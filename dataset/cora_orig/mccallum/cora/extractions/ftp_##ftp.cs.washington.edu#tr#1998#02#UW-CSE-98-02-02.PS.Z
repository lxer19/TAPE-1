URL: ftp://ftp.cs.washington.edu/tr/1998/02/UW-CSE-98-02-02.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Email: frgrimm, bershadg@cs.washington.edu  
Title: Providing Policy-Neutral and Transparent Access Control in Extensible Systems  
Author: Robert Grimm Brian N. Bershad 
Address: Seattle, WA 98195, U.S.A. UW-CSE-98-02-02  
Affiliation: Dept. of Computer Science and Engineering University of Washington  
Abstract: Extensible systems, such as Java or the SPIN extensible operating system, allow for units of code, or extensions, to be added to a running system in almost arbitrary fashion. Extensions closely interact through low-latency, but type-safe interfaces to form a tightly integrated system. As extensions can come from arbitrary sources, not all of whom can be trusted to conform to an organization's security policy, such structuring raises the question of how security constraints are enforced in an extensible system. In this paper, we present an access control mechanism for extensible systems to address this problem. Our access control mechanism decomposes access control into a policy-neutral enforcement manager and a security policy manager, and it is transparent to extensions in the absence of security violations. It structures the system into protection domains, enforces protection domains through access control checks, and performs auditing of system operations. It works by inspecting extensions for their types and operations to determine which abstractions require protection, and by redirecting procedure or method invocations to inject access control operations into the system. We describe the design of this access control mechanism, present an implementation within the SPIN extensible operating system, and provide a qualitative as well as quantitative evaluation of the mechanism. fl This research was sponsored by the Defense Advanced Research Projects Agency, the National Science Foundation and by an equipment grant from Digital Equipment Corporation. Grimm was partially supported by fellowships from the Mi-crosoft Corporation and IBM Corporation. Bershad was partially supported by a National Science Foundation Presidential Faculty Fellowship and an Office of Naval Research Young Investigator Award. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Badger, K. A. Oostendorp, W. G. Morrison, K. M. Walker, C. D. Vance, D. L. Sherman, and D. F. Sterne. </author> <title> DTE Firewalls|Initial Measurement and Evaluation Report. </title> <type> Technical Report 0632R, </type> <institution> Trusted Information Systems, </institution> <month> March </month> <year> 1997. </year>
Reference-contexts: Starting from multi-level security [5, 12, 7], which has become part of the U.S. Department of Defense's standard for trusted computer systems [13], much attention has been directed towards mapping non-military policies onto multi-level security [23, 21], defining al 9 ternative policies more suitable for commercial appli-cations <ref> [8, 10, 9, 3, 2, 1] </ref>, and expanding multi-level security to be more flexible and powerful [24, 29]. Based on the realization that no single security policy is appropriate for all environments, the DTOS effort [27, 31, 37, 36] has the goal of providing a policy-neutral access control mechanism.
Reference: [2] <author> L. Badger, D. F. Sterne, D. L. Sherman, K. M. Walker, and S. A. Haghighat. </author> <title> A Domain and Type Enforcement UNIX Prototype. </title> <booktitle> In Proceedings of the Fifth USENIX UNIX Security Symposium, </booktitle> <pages> pages 127-140, </pages> <address> Salt Lake City, Utah, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Files in the local cache are automatically associated with a security identifier as described in Section 3.2. Files in NFS are associated with a security identifier by using a mapping from the file system name-space to security identifiers (similar to the one described in <ref> [3, 2] </ref>) to provide fine-grained control over which files are associated with which security identifier. <p> Starting from multi-level security [5, 12, 7], which has become part of the U.S. Department of Defense's standard for trusted computer systems [13], much attention has been directed towards mapping non-military policies onto multi-level security [23, 21], defining al 9 ternative policies more suitable for commercial appli-cations <ref> [8, 10, 9, 3, 2, 1] </ref>, and expanding multi-level security to be more flexible and powerful [24, 29]. Based on the realization that no single security policy is appropriate for all environments, the DTOS effort [27, 31, 37, 36] has the goal of providing a policy-neutral access control mechanism.
Reference: [3] <author> L. Badger, D. F. Sterne, D. L. Sherman, K. M. Walker, and S. A. Haghighat. </author> <title> Practical Domain and Type Enforcement for UNIX. </title> <booktitle> In Proceedigns of the 1995 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 66-77, </pages> <address> Oakland, California, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Files in the local cache are automatically associated with a security identifier as described in Section 3.2. Files in NFS are associated with a security identifier by using a mapping from the file system name-space to security identifiers (similar to the one described in <ref> [3, 2] </ref>) to provide fine-grained control over which files are associated with which security identifier. <p> Starting from multi-level security [5, 12, 7], which has become part of the U.S. Department of Defense's standard for trusted computer systems [13], much attention has been directed towards mapping non-military policies onto multi-level security [23, 21], defining al 9 ternative policies more suitable for commercial appli-cations <ref> [8, 10, 9, 3, 2, 1] </ref>, and expanding multi-level security to be more flexible and powerful [24, 29]. Based on the realization that no single security policy is appropriate for all environments, the DTOS effort [27, 31, 37, 36] has the goal of providing a policy-neutral access control mechanism.
Reference: [4] <author> E. Belani, A. Vahdat, T. Anderson, and M. Dahlin. </author> <title> The CRISIS Wide Area Security Architecture. </title> <booktitle> In Proceedings of the 7th USENIX Security Symposium, </booktitle> <address> San Antonio, Texas, </address> <month> January </month> <year> 1998. </year>
Reference-contexts: Second, as extensions often execute in networked environments, a protocol for the secure expression and transfer of credentials is required. We thus intend to examine distributed authentication protocols, such as those described in <ref> [20, 4] </ref>, in the context of extensible systems. Finally, as illustrated by the micro-benchmarks in Section 6, the access control operations show a relatively high overhead when compared to a simple procedure invocation.
Reference: [5] <author> D. E. Bell and L. J. La Padula. </author> <title> Secure Computer System: Unified Exposition and Multics Interpretation. </title> <type> Technical Report MTR-2997 Rev. 1, </type> <institution> The MITRE Corporation, Bedford, Massachusetts, </institution> <month> March </month> <year> 1976. </year> <note> Also ADA023588, National Technical Information Service. </note>
Reference-contexts: To better quantify this overhead, we plan to conduct further experiments in the future that use more complex security policies and require finer-grained access control operations. 7 Related Work A considerable body of literature focuses on system protection [19, 35] and appropriate security policies. Starting from multi-level security <ref> [5, 12, 7] </ref>, which has become part of the U.S.
Reference: [6] <author> B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. Fiuczynski, D. Becker, S. Eggers, and C. Chambers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the 15th Symposium on Operating Systems Principles, </booktitle> <pages> pages 267-284, </pages> <address> Copper Mountain, Colorado, </address> <month> Decem-ber </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Extensible systems, such as Java [15, 22] or SPIN <ref> [6] </ref>, promise more power and flexibility, and thus enable new applications such as smart clients [44] or active networks [41]. Extensible systems are best characterized by their support for dynamically composing units of code, called extensions in this paper. <p> Furthermore, for any lookup operation on any of the mappings, it specifies whether that particular entry can be cached and, if so, for how long. 4 Implementation We have implemented our access control mechanism in the SPIN extensible operating system <ref> [6] </ref>. Our access control mechanism does not depend on features that are unique to SPIN, and could be implemented in other systems.
Reference: [7] <author> K. J. Biba. </author> <title> Integrity Considerations for Secure Computer Systems. </title> <type> Technical Report MTR-3153 Rev. 1, </type> <institution> The MITRE Corporation, Bedford, Massachusetts, </institution> <month> April </month> <year> 1977. </year> <note> Also ADA039324, National Technical Information Service. </note>
Reference-contexts: To better quantify this overhead, we plan to conduct further experiments in the future that use more complex security policies and require finer-grained access control operations. 7 Related Work A considerable body of literature focuses on system protection [19, 35] and appropriate security policies. Starting from multi-level security <ref> [5, 12, 7] </ref>, which has become part of the U.S.
Reference: [8] <author> W. E. Boebert and R. Y. Kain. </author> <title> A Practical Alternative to Hierarchical Integrity Policies. </title> <booktitle> In Proceedings of the 17th National Computer Security Conference, </booktitle> <pages> pages 18-27, </pages> <address> Gaithersburg, Maryland, </address> <year> 1985. </year>
Reference-contexts: Starting from multi-level security [5, 12, 7], which has become part of the U.S. Department of Defense's standard for trusted computer systems [13], much attention has been directed towards mapping non-military policies onto multi-level security [23, 21], defining al 9 ternative policies more suitable for commercial appli-cations <ref> [8, 10, 9, 3, 2, 1] </ref>, and expanding multi-level security to be more flexible and powerful [24, 29]. Based on the realization that no single security policy is appropriate for all environments, the DTOS effort [27, 31, 37, 36] has the goal of providing a policy-neutral access control mechanism.
Reference: [9] <author> D. F. C. Brewer and M. J. Nash. </author> <title> The Chinese Wall Security Policy. </title> <booktitle> In Proceedings of the 1989 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 206-214, </pages> <address> Oak-land, California, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: Starting from multi-level security [5, 12, 7], which has become part of the U.S. Department of Defense's standard for trusted computer systems [13], much attention has been directed towards mapping non-military policies onto multi-level security [23, 21], defining al 9 ternative policies more suitable for commercial appli-cations <ref> [8, 10, 9, 3, 2, 1] </ref>, and expanding multi-level security to be more flexible and powerful [24, 29]. Based on the realization that no single security policy is appropriate for all environments, the DTOS effort [27, 31, 37, 36] has the goal of providing a policy-neutral access control mechanism.
Reference: [10] <author> D. D. Clark and D. R. Wilson. </author> <title> A Comparison of Commercial and Military Computer Security Policies. </title> <booktitle> In Proceedings of the 1987 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 184-194, </pages> <address> Oakland, California, </address> <month> April </month> <year> 1987. </year>
Reference-contexts: Starting from multi-level security [5, 12, 7], which has become part of the U.S. Department of Defense's standard for trusted computer systems [13], much attention has been directed towards mapping non-military policies onto multi-level security [23, 21], defining al 9 ternative policies more suitable for commercial appli-cations <ref> [8, 10, 9, 3, 2, 1] </ref>, and expanding multi-level security to be more flexible and powerful [24, 29]. Based on the realization that no single security policy is appropriate for all environments, the DTOS effort [27, 31, 37, 36] has the goal of providing a policy-neutral access control mechanism.
Reference: [11] <author> D. Dean, E. W. Felten, and D. S. Wallach. </author> <title> Java Security: From HotJava to Netscape and Beyond. </title> <booktitle> In Proceedings of the 1996 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 190-200, </pages> <address> Oakland, California, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: Our access control mechanism avoids these limitations, as access control operations are dynamically specified and injected into the system, and as they are strictly more expressive. Due to Java's [15, 22] popularity for providing executable content on the Internet, and prompted by a string of security breaches <ref> [11, 25] </ref> in early versions of the system, research into protection for extensible systems has mostly focused on Java.
Reference: [12] <author> D. E. Denning. </author> <title> A Lattice Model of Secure Information Flow. </title> <journal> Communications of the ACM, </journal> <volume> 19(5) </volume> <pages> 236-243, </pages> <month> May </month> <year> 1976. </year>
Reference-contexts: To better quantify this overhead, we plan to conduct further experiments in the future that use more complex security policies and require finer-grained access control operations. 7 Related Work A considerable body of literature focuses on system protection [19, 35] and appropriate security policies. Starting from multi-level security <ref> [5, 12, 7] </ref>, which has become part of the U.S.
Reference: [13] <institution> Department of Defense Computer Security Center. Department of Defense Trusted Computer System Evaluation Criteria, </institution> <month> December </month> <year> 1985. </year> <institution> Department of Defense Standard DoD 5200.28-STD. </institution>
Reference-contexts: Starting from multi-level security [5, 12, 7], which has become part of the U.S. Department of Defense's standard for trusted computer systems <ref> [13] </ref>, much attention has been directed towards mapping non-military policies onto multi-level security [23, 21], defining al 9 ternative policies more suitable for commercial appli-cations [8, 10, 9, 3, 2, 1], and expanding multi-level security to be more flexible and powerful [24, 29].
Reference: [14] <author> L. Gong. </author> <title> Java Security: Present and Near Future. </title> <journal> IEEE Micro, </journal> <volume> 17(3) </volume> <pages> 14-19, </pages> <month> May/June </month> <year> 1997. </year>
Reference-contexts: In departure from the original sand-box model, which grants trusted code full access to the underlying system and untrusted code almost no access, the Java security architecture is currently being extended <ref> [14] </ref> to allow for multiple protection domains, provide fine-grained access control primitives, and support cryptographic protocols. The basic technique for performing dynamic access checks in Java, called extended stack introspection, is described in [43].
Reference: [15] <author> J. Gosling, B. Joy, and G. Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1996. </year>
Reference-contexts: 1 Introduction Extensible systems, such as Java <ref> [15, 22] </ref> or SPIN [6], promise more power and flexibility, and thus enable new applications such as smart clients [44] or active networks [41]. Extensible systems are best characterized by their support for dynamically composing units of code, called extensions in this paper. <p> Our access control mechanism avoids these limitations, as access control operations are dynamically specified and injected into the system, and as they are strictly more expressive. Due to Java's <ref> [15, 22] </ref> popularity for providing executable content on the Internet, and prompted by a string of security breaches [11, 25] in early versions of the system, research into protection for extensible systems has mostly focused on Java.
Reference: [16] <author> S. L. Graham, S. Lucco, and R. Wahbe. </author> <title> Adaptable Binary Programs. </title> <booktitle> In Proceedings of the 1995 USENIX 11 Technical Conference, </booktitle> <pages> pages 315-325, </pages> <address> New Orleans, Louisiana, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: A more powerful model could be used to express finer-grained security constraints. And, more aggressive techniques, such as binary rewriting <ref> [42, 40, 16, 34] </ref>, could be used to enforce these constraints onto an extensible system. But such a system would also require a considerably more complex design and implementation.
Reference: [17] <author> D. Hagimont and L. Ismail. </author> <title> A Protection Scheme for Mobile Agents on Java. </title> <booktitle> In Proceedings of the Third Annual ACM/IEEE International Conference on Mobile Computing and Networking, </booktitle> <address> Budapest, Hungary, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: Furthermore, as access checks need to walk the entire call-stack, the performance impact of extended stack introspection on extensible systems is still unclear. Hagimont and Ismail <ref> [17] </ref> describe an alternative design for access control in Java which provides for a separate description of security constraints through an extended interface definition language.
Reference: [18] <author> W. C. Hsieh, M. E. Fiuczynski, C. Garrett, S. Savage, D. Becker, and B. N. Bershad. </author> <title> Language Support for Extensible Operating Systems. </title> <booktitle> In Proceedings of the Workshop on Compiler Support for System Software, </booktitle> <pages> pages 127-133, </pages> <address> Tucson, Arizona, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: Third, the implementation should be fast to impose as little performance overhead as possible. In SPIN, a statically linked core provides most basic services, including hardware support, the Modula-3 runtime <ref> [39, 18] </ref>, the linker/loader [38], threads, and the event dispatcher [32]. All other services, including networking and file system support, are provided by dynamically linked extensions.
Reference: [19] <author> B. W. Lampson. </author> <title> Protection. </title> <booktitle> In Proceedings of the Fifth Princeton Symposium on Information Sciences and Systems, </booktitle> <pages> pages 437-443, </pages> <address> Princeton, New Jersey, </address> <month> March </month> <year> 1971. </year> <booktitle> Reprinted in Operating Systems Review, </booktitle> <volume> 8(1) </volume> <pages> 18-24, </pages> <month> January </month> <year> 1974. </year>
Reference-contexts: As a result of this structuring, system security becomes an important challenge, and access control becomes a fundamental requirement for the success of extensible systems. As system security is customarily expressed through protection domains <ref> [19, 35] </ref>, an access control mechanism must: * structure the system into protection domains (which are an orthogonal concept to conventional address spaces), * enforce these domains through access control checks, * support auditing of system operations. <p> To better quantify this overhead, we plan to conduct further experiments in the future that use more complex security policies and require finer-grained access control operations. 7 Related Work A considerable body of literature focuses on system protection <ref> [19, 35] </ref> and appropriate security policies. Starting from multi-level security [5, 12, 7], which has become part of the U.S.
Reference: [20] <author> B. W. Lampson, M. Abadi, M. Burrows, and E. Wob-ber. </author> <title> Authentication in Distributed Systems: </title> <journal> Theory and Practice. ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 265-310, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Second, as extensions often execute in networked environments, a protocol for the secure expression and transfer of credentials is required. We thus intend to examine distributed authentication protocols, such as those described in <ref> [20, 4] </ref>, in the context of extensible systems. Finally, as illustrated by the micro-benchmarks in Section 6, the access control operations show a relatively high overhead when compared to a simple procedure invocation.
Reference: [21] <author> T. M. P. Lee. </author> <title> Using Mandatory Integrity to Enforce "Commercial" Security. </title> <booktitle> In Proceedings of the 1988 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 140-146, </pages> <address> Oakland, California, </address> <month> April </month> <year> 1988. </year>
Reference-contexts: Starting from multi-level security [5, 12, 7], which has become part of the U.S. Department of Defense's standard for trusted computer systems [13], much attention has been directed towards mapping non-military policies onto multi-level security <ref> [23, 21] </ref>, defining al 9 ternative policies more suitable for commercial appli-cations [8, 10, 9, 3, 2, 1], and expanding multi-level security to be more flexible and powerful [24, 29].
Reference: [22] <author> T. Lindholm and F. Yellin. </author> <title> The Java Virtual Machine Specification. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1996. </year>
Reference-contexts: 1 Introduction Extensible systems, such as Java <ref> [15, 22] </ref> or SPIN [6], promise more power and flexibility, and thus enable new applications such as smart clients [44] or active networks [41]. Extensible systems are best characterized by their support for dynamically composing units of code, called extensions in this paper. <p> As a result, the compiler becomes part of the trusted computing base. Clearly, it is preferable to establish this guarantee in the extensible system that actually executes the code, especially for large computer networks. Considerable work has been devoted to this issue, and viable alternatives include typed byte-codes <ref> [22] </ref>, proof-carrying code [30], as well as typed assembly language [28]. All of these efforts are complementary to our own. 6 Performance Evaluation To determine the performance overhead of our implementation, we evaluate a set of micro-benchmarks that measure the performance of access control operations. <p> Our access control mechanism avoids these limitations, as access control operations are dynamically specified and injected into the system, and as they are strictly more expressive. Due to Java's <ref> [15, 22] </ref> popularity for providing executable content on the Internet, and prompted by a string of security breaches [11, 25] in early versions of the system, research into protection for extensible systems has mostly focused on Java.
Reference: [23] <author> S. B. Lipner. </author> <title> Non-Discretionary Controls for Commercial Applications. </title> <booktitle> In Proceedings of the 1982 Symposium on Security and Privacy, </booktitle> <pages> pages 2-10, </pages> <address> Oakland, California, </address> <month> April </month> <year> 1982. </year>
Reference-contexts: Starting from multi-level security [5, 12, 7], which has become part of the U.S. Department of Defense's standard for trusted computer systems [13], much attention has been directed towards mapping non-military policies onto multi-level security <ref> [23, 21] </ref>, defining al 9 ternative policies more suitable for commercial appli-cations [8, 10, 9, 3, 2, 1], and expanding multi-level security to be more flexible and powerful [24, 29].
Reference: [24] <author> C. J. McCollum, J. R. Messing, and L. Notargiacomo. </author> <title> Beyond the Pale of MAC and DAC|Defining New Forms of Access Control. </title> <booktitle> In Proceedings of the 1990 IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 190-200, </pages> <address> Oakland, California, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: Department of Defense's standard for trusted computer systems [13], much attention has been directed towards mapping non-military policies onto multi-level security [23, 21], defining al 9 ternative policies more suitable for commercial appli-cations [8, 10, 9, 3, 2, 1], and expanding multi-level security to be more flexible and powerful <ref> [24, 29] </ref>. Based on the realization that no single security policy is appropriate for all environments, the DTOS effort [27, 31, 37, 36] has the goal of providing a policy-neutral access control mechanism.
Reference: [25] <author> G. McGraw and E. W. Felten. </author> <title> Java Security: Hostile Applets, Holes and Antidotes. </title> <publisher> Wiley Computer Publishing, John Wiley & Sons, Inc., </publisher> <address> New York, New York, </address> <year> 1997. </year>
Reference-contexts: Our access control mechanism avoids these limitations, as access control operations are dynamically specified and injected into the system, and as they are strictly more expressive. Due to Java's [15, 22] popularity for providing executable content on the Internet, and prompted by a string of security breaches <ref> [11, 25] </ref> in early versions of the system, research into protection for extensible systems has mostly focused on Java.
Reference: [26] <author> M. K. McKusick, K. Bostic, M. J. Karels, and J. S. Quarterman. </author> <title> The Design and Implementation of the 4.4BSD Operating System. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1996. </year>
Reference-contexts: Extensions and the core system services are typically co-located within the same address space, and form a tightly integrated system. Consequently, extensible systems differ fundamentally from conventional systems, such as Unix <ref> [26] </ref>, which rely on processes executing under the control of a privileged kernel. As a result of this structuring, system security becomes an important challenge, and access control becomes a fundamental requirement for the success of extensible systems.
Reference: [27] <author> S. E. Minear. </author> <title> Providing Policy Control Over Object Operations in a Mach Based System. </title> <booktitle> In Proceedings of the Fifth USENIX UNIX Security Symposium, </booktitle> <pages> pages 141-156, </pages> <address> Salt Lake City, Utah, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Based on the realization that no single security policy is appropriate for all environments, the DTOS effort <ref> [27, 31, 37, 36] </ref> has the goal of providing a policy-neutral access control mechanism. Their design relies on the same basic abstractions (security identifiers and access modes) as our access control mechanism, and also features a separate security policy manager. DTOS has been implemented on top of the Mach micro-kernel.
Reference: [28] <author> G. Morrisett, D. Walker, K. Crary, and N. Glew. </author> <title> From System F to Typed Assembly Language. </title> <booktitle> In Proceedings of the 25th Symposium on Principles of Programming Languages, </booktitle> <address> San Diego, California, </address> <month> January </month> <year> 1998. </year>
Reference-contexts: Clearly, it is preferable to establish this guarantee in the extensible system that actually executes the code, especially for large computer networks. Considerable work has been devoted to this issue, and viable alternatives include typed byte-codes [22], proof-carrying code [30], as well as typed assembly language <ref> [28] </ref>. All of these efforts are complementary to our own. 6 Performance Evaluation To determine the performance overhead of our implementation, we evaluate a set of micro-benchmarks that measure the performance of access control operations. We also present end-to-end performance results for a web server benchmark.
Reference: [29] <author> A. C. Myers and B. Liskov. </author> <title> A Decentralized Model for Information Flow Control. </title> <booktitle> In Proceedings of the 16th Symposium on Operating Systems Principles, </booktitle> <pages> pages 129-142, </pages> <address> Saint-Malo, France, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: Department of Defense's standard for trusted computer systems [13], much attention has been directed towards mapping non-military policies onto multi-level security [23, 21], defining al 9 ternative policies more suitable for commercial appli-cations [8, 10, 9, 3, 2, 1], and expanding multi-level security to be more flexible and powerful <ref> [24, 29] </ref>. Based on the realization that no single security policy is appropriate for all environments, the DTOS effort [27, 31, 37, 36] has the goal of providing a policy-neutral access control mechanism.
Reference: [30] <author> G. C. Necula and P. Lee. </author> <title> Safe Kernel Extensions Without Run-Time Checking. </title> <booktitle> In Proceedings of the Second Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 229-243, </pages> <address> Seattle, Washington, </address> <month> Octo-ber </month> <year> 1996. </year>
Reference-contexts: Clearly, it is preferable to establish this guarantee in the extensible system that actually executes the code, especially for large computer networks. Considerable work has been devoted to this issue, and viable alternatives include typed byte-codes [22], proof-carrying code <ref> [30] </ref>, as well as typed assembly language [28]. All of these efforts are complementary to our own. 6 Performance Evaluation To determine the performance overhead of our implementation, we evaluate a set of micro-benchmarks that measure the performance of access control operations.
Reference: [31] <author> D. Olawsky, T. Fine, E. Schneider, and R. Spencer. </author> <title> Developing and Using a "Policy Neutral" Access Control Policy. </title> <booktitle> In Proceedings of the New Security Paradigms Workshop, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: Based on the realization that no single security policy is appropriate for all environments, the DTOS effort <ref> [27, 31, 37, 36] </ref> has the goal of providing a policy-neutral access control mechanism. Their design relies on the same basic abstractions (security identifiers and access modes) as our access control mechanism, and also features a separate security policy manager. DTOS has been implemented on top of the Mach micro-kernel.
Reference: [32] <author> P. Pardyak and B. N. Bershad. </author> <title> Dynamic Binding for an Extensible System. </title> <booktitle> In Proceedings of the Second Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 201-212, </pages> <address> Seattle, Washington, </address> <month> Octo-ber </month> <year> 1996. </year>
Reference-contexts: It is thus neces-sary, at link-time, to provide access control over which interfaces a given extension can link against for execution and extending <ref> [38, 32] </ref>. <p> Third, the implementation should be fast to impose as little performance overhead as possible. In SPIN, a statically linked core provides most basic services, including hardware support, the Modula-3 runtime [39, 18], the linker/loader [38], threads, and the event dispatcher <ref> [32] </ref>. All other services, including networking and file system support, are provided by dynamically linked extensions. We have implemented the basic abstractions of our access control mechanism, such as security identifiers and access modes, as well as the enforcement manager as part of this static core. <p> The implementation consists of 1000 lines of well-documented Modula-3 interfaces and 2400 lines of Modula-3 code, with an additional 50 lines of changes to other parts of the static core. It uses the Modula-3 runtime to determine the types and operations of an extension, and the event dispatcher <ref> [32] </ref> to inject access control operations into the system. It defines the abstractions for security identifiers and access modes. Security identifiers are simply integers. Access modes y We have not validated the implementation. <p> Table 2 shows the instruction breakdown of the common path for protection domain transfers, excluding the overhead for the event dispatcher (which amounts 8 to 31 or 48 instructions, depending on the optimiza-tions used within the event dispatcher <ref> [32] </ref>). On a protection domain transfer, the enforcement manager establishes the new protection domain before control passes into the actual procedure, and restores the original protection domain upon completion of the procedure.
Reference: [33] <author> J. Richardson, P. Schwarz, and L.-F. Cabrera. CACL: </author> <title> Efficient Fine-Grained Protection for Objects. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications '92, </booktitle> <pages> pages 263-275, </pages> <address> Vancouver, Canada, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: The design essentially provides a form of type hiding [43] at the granularity of entire methods, as the visibility of object methods is controlled by the security constraints. In its ability to provide access control at the granularity of object methods, Hagimont and Ismail's design is similar to CACL <ref> [33] </ref> which presents a general protection model for objects. At the same time, CACL offers a more complete model (which includes explicit representations of the owner of an object and its implementor) and a more efficient implementation (through object jump tables instead of proxy objects).
Reference: [34] <author> T. Romer, G. Voelker, D. Lee, A. Woman, W. Wong, H. Levy, B. N. Bershad, and B. Chen. </author> <title> Instrumentation and Optimization of Win32/Intel Executables Using Etch. </title> <booktitle> In Proceedings of the USENIX Windows NT Workshop, </booktitle> <pages> pages 1-8, </pages> <address> Seattle, Washington, </address> <month> August </month> <year> 1997. </year>
Reference-contexts: A more powerful model could be used to express finer-grained security constraints. And, more aggressive techniques, such as binary rewriting <ref> [42, 40, 16, 34] </ref>, could be used to enforce these constraints onto an extensible system. But such a system would also require a considerably more complex design and implementation.
Reference: [35] <author> J. H. Saltzer and M. D. Schroeder. </author> <title> The Protection of Information in Computer Systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 63(9) </volume> <pages> 1278-1308, </pages> <month> September </month> <year> 1975. </year>
Reference-contexts: As a result of this structuring, system security becomes an important challenge, and access control becomes a fundamental requirement for the success of extensible systems. As system security is customarily expressed through protection domains <ref> [19, 35] </ref>, an access control mechanism must: * structure the system into protection domains (which are an orthogonal concept to conventional address spaces), * enforce these domains through access control checks, * support auditing of system operations. <p> It defines the abstractions for security identifiers and access modes. Security identifiers are simply integers. Access modes y We have not validated the implementation. However, a critical characteristic for any security mechanism is that it be small and well-structured <ref> [35] </ref>. 6 are immutable objects, and are represented by a set of simple, pre-defined permissions in addition to a list of permission objects. The simple permissions provide 64 permissions at a low overhead. <p> To better quantify this overhead, we plan to conduct further experiments in the future that use more complex security policies and require finer-grained access control operations. 7 Related Work A considerable body of literature focuses on system protection <ref> [19, 35] </ref> and appropriate security policies. Starting from multi-level security [5, 12, 7], which has become part of the U.S.
Reference: [36] <author> Secure Computing Corporation. </author> <title> DTOS General System Security and Assurability Assessment Report. </title> <type> Technical Report DTOS CDRL A011, </type> <institution> Secure Computing Corporation, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: Based on the realization that no single security policy is appropriate for all environments, the DTOS effort <ref> [27, 31, 37, 36] </ref> has the goal of providing a policy-neutral access control mechanism. Their design relies on the same basic abstractions (security identifiers and access modes) as our access control mechanism, and also features a separate security policy manager. DTOS has been implemented on top of the Mach micro-kernel. <p> As reported in [37], adding explicit access checks to the micro-kernel presented a considerable challenge as it fixed part of the security policy within the system. Furthermore, as noted in <ref> [36] </ref>, their choice of checking whether a subject can perform an operation on an object (where the object is the primary argument to an operation) does not provide sufficient flexibility, since the security decision may depend on other parameters to the operation as well.
Reference: [37] <institution> Secure Computing Corporation. </institution> <note> DTOS Lessons Learned Report. Technical Report DTOS CDRL A008, </note> <institution> Secure Computing Corporation, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: Based on the realization that no single security policy is appropriate for all environments, the DTOS effort <ref> [27, 31, 37, 36] </ref> has the goal of providing a policy-neutral access control mechanism. Their design relies on the same basic abstractions (security identifiers and access modes) as our access control mechanism, and also features a separate security policy manager. DTOS has been implemented on top of the Mach micro-kernel. <p> Furthermore, it uses explicit access checks on pre-defined permissions for enforcing protection domains, which makes it impossible to change or remove access checks. As reported in <ref> [37] </ref>, adding explicit access checks to the micro-kernel presented a considerable challenge as it fixed part of the security policy within the system.
Reference: [38] <author> E. G. Sirer, M. Fiuczynski, P. Pardyak, and B. N. Bershad. </author> <title> Safe Dynamic Linking in an Extensible Operating System. </title> <booktitle> In Proceedings of the Workshop on Compiler Support for System Software, </booktitle> <pages> pages 134-140, </pages> <address> Tucson, Arizona, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: It is thus neces-sary, at link-time, to provide access control over which interfaces a given extension can link against for execution and extending <ref> [38, 32] </ref>. <p> Third, the implementation should be fast to impose as little performance overhead as possible. In SPIN, a statically linked core provides most basic services, including hardware support, the Modula-3 runtime [39, 18], the linker/loader <ref> [38] </ref>, threads, and the event dispatcher [32]. All other services, including networking and file system support, are provided by dynamically linked extensions.
Reference: [39] <author> E. G. Sirer, S. Savage, P. Pardyak, G. P. DeFouw, M. A. Alapat, and B. N. Bershad. </author> <title> Writing an Operating System with Modula-3. </title> <booktitle> In Proceedings of the Workshop on Compiler Support for System Software, </booktitle> <pages> pages 141-148, </pages> <address> Tucson, Arizona, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: Third, the implementation should be fast to impose as little performance overhead as possible. In SPIN, a statically linked core provides most basic services, including hardware support, the Modula-3 runtime <ref> [39, 18] </ref>, the linker/loader [38], threads, and the event dispatcher [32]. All other services, including networking and file system support, are provided by dynamically linked extensions.
Reference: [40] <author> A. Srivastava and A. Eustace. </author> <title> ATOM: A System for Building Customized Program Analysis Tools. </title> <booktitle> In Proceedings of the ACM SIGPLAN '94 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 196-205, </pages> <address> Orlando, Florida, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: A more powerful model could be used to express finer-grained security constraints. And, more aggressive techniques, such as binary rewriting <ref> [42, 40, 16, 34] </ref>, could be used to enforce these constraints onto an extensible system. But such a system would also require a considerably more complex design and implementation.
Reference: [41] <author> D. L. Tennenhouse, J. M. Smith, W. D. Sincoskie, D. J. Wetherall, and G. J. Minden. </author> <title> A Survey of Active Network Research. </title> <journal> IEEE Communications Magazine, </journal> <volume> 25(1) </volume> <pages> 80-86, </pages> <month> January </month> <year> 1997. </year> <month> 12 </month>
Reference-contexts: 1 Introduction Extensible systems, such as Java [15, 22] or SPIN [6], promise more power and flexibility, and thus enable new applications such as smart clients [44] or active networks <ref> [41] </ref>. Extensible systems are best characterized by their support for dynamically composing units of code, called extensions in this paper. In these systems, extensions can be added to a running system in almost arbitrary fashion, and they interact through low-latency, but type-safe interfaces with each other.
Reference: [42] <author> R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Gra--ham. </author> <title> Efficient Software-Based Fault Isolation. </title> <booktitle> In Proceedings of the 14th Symposium on Operating Systems Principles, </booktitle> <pages> pages 203-216, </pages> <address> Ashville, North Carolina, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: A more powerful model could be used to express finer-grained security constraints. And, more aggressive techniques, such as binary rewriting <ref> [42, 40, 16, 34] </ref>, could be used to enforce these constraints onto an extensible system. But such a system would also require a considerably more complex design and implementation.
Reference: [43] <author> D. S. Wallach, D. Balfanz, D. Dean, and E. W. Fel-ten. </author> <title> Extensible Security Architectures for Java. </title> <booktitle> In Proceedings of the 16th Symposium on Operating Systems Principles, </booktitle> <pages> pages 116-128, </pages> <address> Saint-Malo, France, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: The basic technique for performing dynamic access checks in Java, called extended stack introspection, is described in <ref> [43] </ref>. With this technique, each extension is implicitly associated with a protection domain, and access checks essentially take the intersection of all protection domains represented on the current call-stack to determine if an operation is legal. <p> In their design, security constraints are expressed as part of the interface specification for each extension, and result in the creation of proxy objects which provide only limited functionality to their clients. The design essentially provides a form of type hiding <ref> [43] </ref> at the granularity of entire methods, as the visibility of object methods is controlled by the security constraints. In its ability to provide access control at the granularity of object methods, Hagimont and Ismail's design is similar to CACL [33] which presents a general protection model for objects.
Reference: [44] <author> C. Yoshikawa, B. Chun, P. Eastham, A. Vahdat, T. Anderson, and D. Culler. </author> <title> Using Smart Clients to Build Scalable Services. </title> <booktitle> In Proceedings of the 1997 USENIX Technical Conference, </booktitle> <pages> pages 105-117, </pages> <address> Ana-heim, California, </address> <month> January </month> <year> 1997. </year> <month> 13 </month>
Reference-contexts: 1 Introduction Extensible systems, such as Java [15, 22] or SPIN [6], promise more power and flexibility, and thus enable new applications such as smart clients <ref> [44] </ref> or active networks [41]. Extensible systems are best characterized by their support for dynamically composing units of code, called extensions in this paper. In these systems, extensions can be added to a running system in almost arbitrary fashion, and they interact through low-latency, but type-safe interfaces with each other.
References-found: 44

