URL: http://www.cs.umn.edu/Ajanta/papers/icpp98ws.ps
Refering-URL: http://www.cs.umn.edu/Ajanta/
Root-URL: http://www.cs.umn.edu
Email: tripathi@cs.umn.edu  
Title: Protected Resource Access for Mobile Agent-based Distributed Computing  
Author: Anand Tripathi and Neeran Karnik 
Address: Minneapolis, MN 55455  
Affiliation: Department of Computer Science, University of Minnesota  
Abstract: This paper describes the mobile agent paradigm for distributed computing, and outlines the security-related issues encountered in supporting it. One of the major requirements is the provision of access control mechanisms for server resources. Several possible designs are discussed, and one such proxy-based design, which we have developed in conjunction with the Ajanta mobile agent system, is described in detail. Extensions of this mechanism which allow accounting of usage and selective revocation of access privileges are discussed. The Java security model is also described, since the security of the proxy mechanism depends on it. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. R. Ames, M. Gasser, and R. Schell. </author> <title> Security Kernel Design and Implementation: An Introduction. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 1422, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: Therefore, only trusted classes should be put on the classpath, and these classes must be designed carefully all accesses to sensitive resources should be screened by the security manager. Thus the security manager acts as a reference monitor <ref> [1] </ref>. Class loaders and the security manager are the two basic mechanisms which we use for creating protection domains for mobile agents at a host, and to provide agents with protected access to host resources. In Section 5 we outline our approach based on these two mechanisms. 4.
Reference: [2] <author> J. Banino. </author> <title> Parallelism and Fault Tolerance in Chorus. </title> <journal> Journal of Systems and Software, </journal> <pages> pages 205211, </pages> <year> 1986. </year>
Reference-contexts: An early example of a system that provided such object mobility within a homogeneous local area network was Emerald [13]. Earlier, systems like R2D2 [29] and Chorus <ref> [2] </ref> introduced the concept of active messages that could migrate from node to node, carrying with them program code to be executed at these nodes. The mobile agent paradigm has evolved from these antecedents.
Reference: [3] <author> B. Bershad, S. Savage, P. Pardyaki, E. Sirer, M. Fiuczyn-ski, D. Becker, C. Chambers, and S. Eggers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 267284, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: We would like to note that several other projects have also used a type-safe language to create and enforce protection domains. The SPIN operating system <ref> [3] </ref> allows applications to safely load extensions written in Modula-3 into the kernel. An approach based on Java is used in choices [17]. It uses name-space separation based on class loaders and it inhibits modifications to Java packages using access control lists.
Reference: [4] <author> J. Bull, L. Gong, and K. Sollins. </author> <title> Towards Security in an Open Systems Federation. </title> <booktitle> In Proceedings of the Second Eu-ropean Symposium on Research in Computer Security ES-ORICS'92, </booktitle> <pages> pages 320. </pages> <publisher> Springer-Verlag, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: For security purposes, the credentials could have an expiration time [26, 24] so that stolen credentials cannot be misused indefinitely. In general, the approach adopted in our design follows the server-oriented view of enforcement of security policies, advocated in <ref> [4] </ref>. This viewpoint is preferred over a ubiquitous or central authority for security policy enforcement, which may not be feasible in an open, federated environment of servers and clients. There are two basic problems that we have to address. <p> A server may also need to forward an agent to another server (like a subcontract) granting it some additional privileges or restricting some of its existing ones. In the past, several protocols have been proposed based on secret or public-key cryptosystems for delegating rights to proxies <ref> [24, 4, 19] </ref>. Integration of any such protocols in our designs is constrained by the fact that an on-line authentication service may not always be available. The second problem is to provide mechanisms to agent servers for specifying restricted access rights for agents this is usually termed as authorization.
Reference: [5] <author> GeneralMagic. </author> <title> General Magic's Odyssey web page. </title> <note> http://www.genmagic.com/agents/odyssey.html, 1997. </note>
Reference-contexts: Security mix-in classes can be used to protect objects from unauthorized modification, copying or migration. However, Telescript has now been shelved, with General Magic having embarked on a Java-based mobile agent system called Odyssey <ref> [5] </ref>. Odyssey has comparatively limited functionality, but can be viewed as a derivative of the Telescript design framework.
Reference: [6] <author> L. Gong. </author> <title> A Secure Identity-Based Capability System. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 5663, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: Even though the reference to a proxy is like a capability, we can limit its propagation from one agent to another by checking whether the invoker of the proxy belongs to the protection domain to which it was originally granted. Thus, a proxy acts as an identity-based capability <ref> [6] </ref>. This requires extending the proxy by including in its state, the identifier of the protection domain to which it was assigned. It is also possible to add an expiration time to each proxy object.
Reference: [7] <author> R. S. Gray. </author> <title> Agent Tcl: A flexible and secure mobile-agent system. </title> <booktitle> In Proceedings of the Fourth Annual Tcl/Tk Workshop (TCL 96), </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: However a security architecture for this system has been recently proposed [14]. Voyager [20], Sumatra [22], and Mole [27] are some other Java-based agent programming systems. These systems do not address security issues directly among their basic design objectives. Tacoma [12] and Agent Tcl <ref> [7] </ref> were among the first of the Tcl-based systems. The Tacoma design does not address security issues. Agent Tcl [7] supports access control lists based on host names and uses PGP for encryption and authentication. <p> These systems do not address security issues directly among their basic design objectives. Tacoma [12] and Agent Tcl <ref> [7] </ref> were among the first of the Tcl-based systems. The Tacoma design does not address security issues. Agent Tcl [7] supports access control lists based on host names and uses PGP for encryption and authentication. The Knowbots project [9] uses Python, an object-oriented script language, for programming agents, although its architecture is language-independent. It does not currently support secure agent transfer, or protection of agents from their hosts.
Reference: [8] <author> C. G. Harrison, D. M. Chess, and A. Kershen-baum. </author> <title> Mobile Agents: Are they a good idea? Technical report, </title> <institution> IBM Research Division, T.J.Watson Research Center, </institution> <month> March </month> <year> 1995. </year> <note> Available at URL http://www.research.ibm.com/massdist/mobag.ps. </note>
Reference-contexts: The mobile agent paradigm has evolved from these antecedents. Agents can be implemented as active objects, which encapsulate code and execution context along with their data, and are transportable on a network. Harrison et al <ref> [8] </ref> have evaluated the agent paradigm in detail and identified two clear advantages of mobile agent-based computing. First, by moving processing functions close to where the information is stored, it reduces communication between the client and the server.
Reference: [9] <author> J. Hylton, K. Manheimer, F. L. Drake, Jr., B. Warsaw, R. Masse, and G. van Rossum. </author> <title> Knowbot programming: System support for mobile agents. </title> <booktitle> In Proceedings of the Fifth International Workshop on Object Orientation in Operating Systems (IWOOOS '96), </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: Tacoma [12] and Agent Tcl [7] were among the first of the Tcl-based systems. The Tacoma design does not address security issues. Agent Tcl [7] supports access control lists based on host names and uses PGP for encryption and authentication. The Knowbots project <ref> [9] </ref> uses Python, an object-oriented script language, for programming agents, although its architecture is language-independent. It does not currently support secure agent transfer, or protection of agents from their hosts. Ara [21] is another mobile agent system which supports multiple agent languages like Tcl and C++.
Reference: [10] <author> IBM. </author> <title> IBM Aglets Workbench Documentation web page. </title> <address> http://www.trl.ibm.co.jp/aglets/documentation.html. </address>
Reference-contexts: A comparative evaluation of three Java-based mobile agent systems is presented in [15]. The Aglets Workbench <ref> [10] </ref> developed by IBM is an example of a Java-based mobile agent system. It uses an event-based programming model; handlers are defined for different types of events such as migration, dispatch, arrival at a server, etc.
Reference: [11] <institution> JavaSoft. </institution> <note> JDK 1.1 Documentation. Available at URL http://www.javasoft.com/products/jdk/1.1/docs/. </note>
Reference-contexts: Recently, Java has emerged as a widely used basis for building mobile agent systems because of its support for object-orientation, its security model for mobile code, and a rich set of libraries which support object serialization, remote method invocation (RMI), and reflection <ref> [11] </ref>. A comparative evaluation of three Java-based mobile agent systems is presented in [15]. The Aglets Workbench [10] developed by IBM is an example of a Java-based mobile agent system.
Reference: [12] <author> D. Johansen, R. van Renesse, and F. B. Schneider. </author> <title> An Introduction to the TACOMA Distributed System. </title> <type> Technical Report 95-23, </type> <institution> Department of Computer Science, University of Troms, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: Currently, this system has only primitive security functionality. However a security architecture for this system has been recently proposed [14]. Voyager [20], Sumatra [22], and Mole [27] are some other Java-based agent programming systems. These systems do not address security issues directly among their basic design objectives. Tacoma <ref> [12] </ref> and Agent Tcl [7] were among the first of the Tcl-based systems. The Tacoma design does not address security issues. Agent Tcl [7] supports access control lists based on host names and uses PGP for encryption and authentication.
Reference: [13] <author> E. Jul, H. Levy, N. Hutchinson, and A. Black. </author> <title> Fine-Grained Mobility in the Emerald System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1):109133, </volume> <month> February </month> <year> 1988. </year>
Reference-contexts: A more generic concept is that of a mobile object, i.e., an object which can be transported from one network node to another. An early example of a system that provided such object mobility within a homogeneous local area network was Emerald <ref> [13] </ref>. Earlier, systems like R2D2 [29] and Chorus [2] introduced the concept of active messages that could migrate from node to node, carrying with them program code to be executed at these nodes. The mobile agent paradigm has evolved from these antecedents.
Reference: [14] <author> G. Karjoth, D. Lange, and M. Oshima. </author> <title> A Security Model for Aglets. </title> <booktitle> IEEE Internet Computing, </booktitle> <pages> pages 6877, </pages> <month> July-August </month> <year> 1997. </year>
Reference-contexts: For migration, an agent's state is captured at the application level therefore it does not involve any modifications to the Java virtual machine and makes it easily portable. Currently, this system has only primitive security functionality. However a security architecture for this system has been recently proposed <ref> [14] </ref>. Voyager [20], Sumatra [22], and Mole [27] are some other Java-based agent programming systems. These systems do not address security issues directly among their basic design objectives. Tacoma [12] and Agent Tcl [7] were among the first of the Tcl-based systems. The Tacoma design does not address security issues.
Reference: [15] <author> J. Kiniry and D. Zimmerman. </author> <title> A Hands-on Look at Java Mobile Agents. </title> <booktitle> IEEE Internet Computing, </booktitle> <pages> pages 2130, </pages> <note> July-August 1997. Available at http://computer.org/internet/. </note>
Reference-contexts: A comparative evaluation of three Java-based mobile agent systems is presented in <ref> [15] </ref>. The Aglets Workbench [10] developed by IBM is an example of a Java-based mobile agent system. It uses an event-based programming model; handlers are defined for different types of events such as migration, dispatch, arrival at a server, etc.
Reference: [16] <author> J. Y. Levy and J. K. Ousterhout. </author> <title> A Safe Tcl Toolkit for Electronic Meeting Places. </title> <booktitle> In Proceedings of the First USENIX Workshop on Electronic Commerce, </booktitle> <pages> pages 133135, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: However, putting a wrapper around an agent can be reasonable for protecting the agent itself, since the set of principals required to invoke an agent's methods is likely to be small and may even be known at the time of agent's creation. Another approach, exemplified by Safe Tcl <ref> [16] </ref>, is to use two execution environments a safe one which hosts the agent, and a more powerful trusted one which provides access to resources. Whenever the agent calls a potentially dangerous operation, the safe environment acts as a monitor and screens the request based on its security policy.
Reference: [17] <author> W. S. Liao, S. M. Tan, and R. H. Campbell. </author> <title> Fine-grained, Dynamic User Customization of Operating Systems. </title> <booktitle> In Proceedings of the Fifth International Workshop on Object-Orientation in Operating Systems, </booktitle> <pages> pages 6266, </pages> <year> 1996. </year>
Reference-contexts: We would like to note that several other projects have also used a type-safe language to create and enforce protection domains. The SPIN operating system [3] allows applications to safely load extensions written in Modula-3 into the kernel. An approach based on Java is used in choices <ref> [17] </ref>. It uses name-space separation based on class loaders and it inhibits modifications to Java packages using access control lists.
Reference: [18] <author> G. McGraw and E. Felten. </author> <title> Java Security. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1996. </year>
Reference-contexts: Its security model therefore was designed specifically for applets. Applets are similar to agents; however, they are not autonomous or mobile, and therefore far less general than agents. The security problems raised by downloaded applets <ref> [18] </ref> are also applicable to mobile agents; however, there are other problems that only arise in the context of mobile agents. These are elaborated on in Section 5.1. The Java environment has a security-aware design [18]. Its security model has three main components: 1. <p> The security problems raised by downloaded applets <ref> [18] </ref> are also applicable to mobile agents; however, there are other problems that only arise in the context of mobile agents. These are elaborated on in Section 5.1. The Java environment has a security-aware design [18]. Its security model has three main components: 1. A byte-code verifier ensures that programs do not violate type-safety, encapsulation properties, etc. or cause run-time errors that can result in security vulnerabili ties (e.g. stack overflows). 2. Class loader objects are used to dynamically load classes into the Java runtime.
Reference: [19] <author> B. Neuman. </author> <title> Proxy-based authorization and accounting for distributed systems. </title> <booktitle> In Proceedings of the Thirteenth International Conference on Distributed Computing Systems, </booktitle> <pages> pages 283291, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: A server may also need to forward an agent to another server (like a subcontract) granting it some additional privileges or restricting some of its existing ones. In the past, several protocols have been proposed based on secret or public-key cryptosystems for delegating rights to proxies <ref> [24, 4, 19] </ref>. Integration of any such protocols in our designs is constrained by the fact that an on-line authentication service may not always be available. The second problem is to provide mechanisms to agent servers for specifying restricted access rights for agents this is usually termed as authorization. <p> Accounting and Revocation: The proxy-based approach presented here offers some other advantages too. The following features can be added by a resource provider by suitably implementing the getProxy method, and extending the proxy class. One can embed usage-metering and accounting mechanisms in a proxy <ref> [19] </ref>. This can be done either by counting the invocations of each method, possibly assigning different costs to different methods, or by metering the elapsed time for method execution and then basing the charges on it.
Reference: [20] <author> ObjectSpace. </author> <title> ObjectSpace Voyager Core Package Technical Overview. </title> <type> Technical report, ObjectSpace, </type> <institution> Inc., </institution> <month> July </month> <year> 1997. </year> <note> Available at URL http://www.objectspace.com/. </note>
Reference-contexts: For migration, an agent's state is captured at the application level therefore it does not involve any modifications to the Java virtual machine and makes it easily portable. Currently, this system has only primitive security functionality. However a security architecture for this system has been recently proposed [14]. Voyager <ref> [20] </ref>, Sumatra [22], and Mole [27] are some other Java-based agent programming systems. These systems do not address security issues directly among their basic design objectives. Tacoma [12] and Agent Tcl [7] were among the first of the Tcl-based systems. The Tacoma design does not address security issues.
Reference: [21] <author> H. Peine and T. Stolpmann. </author> <title> The Architecture of the Ara Platform for Mobile Agents. </title> <booktitle> In Proceedings of the First International Workshop on Mobile Agents (MA'97), </booktitle> <address> Berlin, Germany, April 1997. </address> <publisher> Springer Verlag, LNCS #1219. </publisher>
Reference-contexts: The Knowbots project [9] uses Python, an object-oriented script language, for programming agents, although its architecture is language-independent. It does not currently support secure agent transfer, or protection of agents from their hosts. Ara <ref> [21] </ref> is another mobile agent system which supports multiple agent languages like Tcl and C++. Agents move between places, which represent servers. Places use access control lists (called allowances) to impose security restrictions on visiting agents.
Reference: [22] <author> M. Ranganathan, A. Acharya, S. Sharma, and J. Saltz. </author> <title> Network-aware Mobile Programs. </title> <booktitle> In Proceedings of USENIX '97, </booktitle> <month> Winter </month> <year> 1997. </year>
Reference-contexts: Currently, this system has only primitive security functionality. However a security architecture for this system has been recently proposed [14]. Voyager [20], Sumatra <ref> [22] </ref>, and Mole [27] are some other Java-based agent programming systems. These systems do not address security issues directly among their basic design objectives. Tacoma [12] and Agent Tcl [7] were among the first of the Tcl-based systems. The Tacoma design does not address security issues.
Reference: [23] <author> M. Shapiro. </author> <title> Structure and Encapsulation in Distributed Systems: The Proxy Principle. </title> <booktitle> In Proceedings of the 6th International Conference on Distributed Computing Systems, pages 198204. IEEE, </booktitle> <year> 1986. </year>
Reference-contexts: Therefore, our approach is to limit the use of the security manager to providing generic protection of system resources and not have it directly deal with the protection of application-level objects. Another approach for establishing controlled access is to use proxy <ref> [23] </ref> objects. When an agent first makes a request to access a resource, the server consults the security policy and constructs a resource proxy, which is an object with a safe interface to the resource. If the agent is not trusted, certain operations on the resource may be disabled.
Reference: [24] <author> K. R. Sollins. </author> <title> Cascaded Authentication. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 156163, </pages> <year> 1988. </year>
Reference-contexts: When a server receives an agent, it uses these credentials to validate the authenticity of the agent, and based on the agent's identity and delegated rights, it can grant access privileges for its local resources. For security purposes, the credentials could have an expiration time <ref> [26, 24] </ref> so that stolen credentials cannot be misused indefinitely. In general, the approach adopted in our design follows the server-oriented view of enforcement of security policies, advocated in [4]. <p> A server may also need to forward an agent to another server (like a subcontract) granting it some additional privileges or restricting some of its existing ones. In the past, several protocols have been proposed based on secret or public-key cryptosystems for delegating rights to proxies <ref> [24, 4, 19] </ref>. Integration of any such protocols in our designs is constrained by the fact that an on-line authentication service may not always be available. The second problem is to provide mechanisms to agent servers for specifying restricted access rights for agents this is usually termed as authorization.
Reference: [25] <author> J. W. Stamos and D. K. Gifford. </author> <title> Remote Evaluation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4):537565, </volume> <month> October </month> <year> 1990. </year>
Reference-contexts: The RPC model is usually synchronous, i.e., the client suspends itself after sending a request to the server, waiting for the results of the call. In an alternative architecture called Remote Evaluation (REV), proposed by Stamos and Gifford <ref> [25] </ref>, the client sends its own procedure code to a remote server and requests the server to execute it and return the results.
Reference: [26] <author> J. Steiner, B. Neuman, and J. Schiller. </author> <title> Kerberos: an authentication service for open network systems. </title> <booktitle> In Usenix Conference Proceedings, pages 191202, </booktitle> <address> Dallas, Texas, </address> <month> February </month> <year> 1988. </year>
Reference-contexts: When a server receives an agent, it uses these credentials to validate the authenticity of the agent, and based on the agent's identity and delegated rights, it can grant access privileges for its local resources. For security purposes, the credentials could have an expiration time <ref> [26, 24] </ref> so that stolen credentials cannot be misused indefinitely. In general, the approach adopted in our design follows the server-oriented view of enforcement of security policies, advocated in [4].
Reference: [27] <author> M. Straer, J. Baumann, and F. Hohl. </author> <title> Mole A Java Based Mobile Agent System. </title> <booktitle> In Proceedings of the 2nd ECOOP Workshop on Mobile Object Systems, </booktitle> <year> 1996. </year>
Reference-contexts: Currently, this system has only primitive security functionality. However a security architecture for this system has been recently proposed [14]. Voyager [20], Sumatra [22], and Mole <ref> [27] </ref> are some other Java-based agent programming systems. These systems do not address security issues directly among their basic design objectives. Tacoma [12] and Agent Tcl [7] were among the first of the Tcl-based systems. The Tacoma design does not address security issues.
Reference: [28] <author> J. Tardo and L. Valente. </author> <title> Mobile Agent Security and Tele-script. </title> <booktitle> In Proceedings of COMPCON Spring '96, </booktitle> <pages> pages 58 63. </pages> <publisher> IEEE, </publisher> <year> 1996. </year>
Reference-contexts: The advantage of such systems is their simplicity and the existence of mature interpreter environments which permit efficient access to local resources. In the category of object-oriented systems, the most noteworthy effort is the Telescript <ref> [28] </ref> language by General Magic. This object-oriented type-safe language was expressly designed to support agent-based computing, and it was among the pioneers in this field. It has several interesting features especially in the security context.
Reference: [29] <author> J. Vittal. </author> <title> Active Message Processing: Messages as Messengers. </title> <editor> In R. Uhlig, editor, </editor> <booktitle> Computer Message System, </booktitle> <pages> pages 175195. </pages> <publisher> North-Holland, </publisher> <year> 1981. </year>
Reference-contexts: A more generic concept is that of a mobile object, i.e., an object which can be transported from one network node to another. An early example of a system that provided such object mobility within a homogeneous local area network was Emerald [13]. Earlier, systems like R2D2 <ref> [29] </ref> and Chorus [2] introduced the concept of active messages that could migrate from node to node, carrying with them program code to be executed at these nodes. The mobile agent paradigm has evolved from these antecedents.
References-found: 29

