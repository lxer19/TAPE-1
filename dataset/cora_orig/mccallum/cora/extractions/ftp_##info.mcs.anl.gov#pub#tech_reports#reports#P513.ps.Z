URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P513.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts95.htm
Root-URL: http://www.mcs.anl.gov
Email: (gjertsen@ncsa.uiuc.edu)  (jones@cs.utk.edu)  (plassman@mcs.anl.gov)  
Title: Parallel Heuristics for Improved, Balanced Graph Colorings  
Author: Robert K. Gjertsen, Jr. Mark T. Jones Paul E. Plassmann 
Note: This work was supported by the Mathematical, Information, and Computational Sciences Division subprogram of the Office of Computational and Technology Research, U.S. Department of Energy, under Contract W-31-109-Eng-38. In addition, the second author received support from the 1994-1995 UTK Professional Development Award Program.  
Address: Urbana, IL 61801  Knoxville, TN 37996  Argonne, IL 60439  
Affiliation: Computer Science Department University of Illinois,  Department of Computer Science University of Tennessee  Mathematics and Computer Science Division Argonne National Laboratory,  
Abstract: The computation of good, balanced graph colorings is an essential part of many algorithms required in scientific and engineering applications. Motivated by an effective sequential heuristic, we introduce a new parallel heuristic, PLF, and show that this heuristic has the same expected runtime under the P-RAM computational model as the scalable coloring heuristic introduced by Jones and Plassmann (JP). We present experimental results performed on the Intel DELTA that demonstrate that this new heuristic consistently generates better colorings and requires only slightly more time than the JP heuristic. In the second part of the paper we introduce two new parallel color-balancing heuristics, PDR(k) and PLF(k). We show that these heuristics have the desirable property that they do not increase the number of colors used by an initial coloring during the balancing process. We present experimental results that show that these heuristics are very effective in obtaining balanced colorings and, in addition, exhibit scalable performance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Allwright, R. Bordawekar, P. Coddington, K. Dincer, and C. Martin, </author> <title> A comparison of parallel graph coloring algorithms, </title> <type> Tech. Rep. </type> <institution> SCCS-666, Northeast Parallel Architectures Center, Syracuse University, </institution> <year> 1995. </year>
Reference-contexts: If adjacent vertices have the same degree, the random numbers are used to determine the coloring order. Since this heuristic is related to the LFO sequential heuristic, we call the new method the parallel largest first (PLF) heuristic. We note that Allwright et al. <ref> [1] </ref> has independently determined that this heuristic is effective in numerical calculations involving dynamically triangulated random surfaces. The PLF heuristic can be implemented by a straightforward modification of the JP heuristic. Let ae (v) = u (v) + deg (v), and recall that u (v) is between 0 and 1.
Reference: [2] <author> D. Br elaz, </author> <title> New methods to color the vertices of a graph, </title> <journal> Comm. ACM, </journal> <volume> 22 (1979), </volume> <pages> pp. 251-256. </pages>
Reference-contexts: General sequential coloring heuristic vertices to be colored are ordered. Effective, well-known ordering techniques include the largest first ordering (LFO) [23], the incidence degree ordering (IDO) [4], and the saturation degree ordering (SDO) <ref> [2] </ref>. The vertex ordering for each of these methods is determined at each step i in the above greedy heuristic as follows: * LFO chooses v i 2 V 0 such that deg (v i ) deg (v j ) for all j &gt; i. <p> Sequential coloring heuristics have been compared by several authors, including a study by Matula et al. with random graphs [16], an analysis by Brelaz on general random graphs <ref> [2] </ref>, and work by Coleman and More [4] with random graphs and matrices from various well-known test suites such as the Harwell collection [6]. Overall, these studies found SDO to be best, closely followed by IDO. LFO performed well, but was not quite as good as either SDO or IDO.
Reference: [3] <author> T. Canfield, M. Jones, P. Plassmann, and M. Tang, </author> <title> Thermal effects on the frequency response of piezoelectric crystals, in New Methods in Transient Analysis, </title> <booktitle> PVP-Vol. 246 and AMD-Vol. 143, </booktitle> <address> New York, </address> <year> 1992, </year> <booktitle> ASME, </booktitle> <pages> pp. 103-108. </pages>
Reference-contexts: Communication is accomplished via message passing on this MIMD architecture. Two problem types are used to perform these comparisons. The Crystal problem is a set of graphs arising from a finite-element model of a piezoelectric crystal <ref> [3] </ref>. The domain is a rectangular solid that is regularly discretized and second-order, hexahedral elements are used. The sequence of graphs is chosen such that each graph is twice as large as its predecessor.
Reference: [4] <author> T. F. Coleman and J. J. Mor e, </author> <title> Estimation of sparse Jacobian matrices and graph coloring problems, </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> 20 (1983), </volume> <pages> pp. 187-209. </pages>
Reference-contexts: 1. Introduction. The graph coloring problem arises in many scientific computing applica-tions. For example, the efficient computation of sparse Jacobian matrices <ref> [4] </ref> and the parallel solution of sparse triangular linear systems [5] [11] [12] [14] [17] [18] [19] [21] require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem [7]. Fortunately, effective sequential heuristics [4] [19] have been developed and implemented for graph coloring <p> For example, the efficient computation of sparse Jacobian matrices <ref> [4] </ref> and the parallel solution of sparse triangular linear systems [5] [11] [12] [14] [17] [18] [19] [21] require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem [7]. Fortunately, effective sequential heuristics [4] [19] have been developed and implemented for graph coloring problems of practical importance. On serial computers these heuristics are inexpensive relative to the other required computational tasks in most applications. <p> General sequential coloring heuristic vertices to be colored are ordered. Effective, well-known ordering techniques include the largest first ordering (LFO) [23], the incidence degree ordering (IDO) <ref> [4] </ref>, and the saturation degree ordering (SDO) [2]. <p> The SDO method is the slowest heuristic and requires P v2V deg 2 (v) time; this complexity can be improved to P v2V deg (v), but requires approximately doubling the amount of storage <ref> [4] </ref>. Sequential coloring heuristics have been compared by several authors, including a study by Matula et al. with random graphs [16], an analysis by Brelaz on general random graphs [2], and work by Coleman and More [4] with random graphs and matrices from various well-known test suites such as the Harwell <p> improved to P v2V deg (v), but requires approximately doubling the amount of storage <ref> [4] </ref>. Sequential coloring heuristics have been compared by several authors, including a study by Matula et al. with random graphs [16], an analysis by Brelaz on general random graphs [2], and work by Coleman and More [4] with random graphs and matrices from various well-known test suites such as the Harwell collection [6]. Overall, these studies found SDO to be best, closely followed by IDO. LFO performed well, but was not quite as good as either SDO or IDO.
Reference: [5] <author> I. S. Duff and G. A. Meurant, </author> <title> The effect of ordering on preconditioned conjugate gradients, </title> <journal> BIT, </journal> <volume> 29 (1989), </volume> <pages> pp. 635-657. </pages>
Reference-contexts: 1. Introduction. The graph coloring problem arises in many scientific computing applica-tions. For example, the efficient computation of sparse Jacobian matrices [4] and the parallel solution of sparse triangular linear systems <ref> [5] </ref> [11] [12] [14] [17] [18] [19] [21] require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem [7]. Fortunately, effective sequential heuristics [4] [19] have been developed and implemented for graph coloring problems of practical importance.
Reference: [6] <author> I. S. Duff and J. K. Reid, </author> <title> Performance evaluation of codes for sparse matrix problems, in Performance Evaluation of Numerical Software, </title> <editor> L. Fosdick, ed., </editor> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1979, </year> <pages> pp. 121-135. </pages>
Reference-contexts: coloring heuristics have been compared by several authors, including a study by Matula et al. with random graphs [16], an analysis by Brelaz on general random graphs [2], and work by Coleman and More [4] with random graphs and matrices from various well-known test suites such as the Harwell collection <ref> [6] </ref>. Overall, these studies found SDO to be best, closely followed by IDO. LFO performed well, but was not quite as good as either SDO or IDO. Features of the LFO heuristic are incorporated in the PLF heuristic described in the next section. 2 3.
Reference: [7] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability, </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: For example, the efficient computation of sparse Jacobian matrices [4] and the parallel solution of sparse triangular linear systems [5] [11] [12] [14] [17] [18] [19] [21] require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem <ref> [7] </ref>. Fortunately, effective sequential heuristics [4] [19] have been developed and implemented for graph coloring problems of practical importance. On serial computers these heuristics are inexpensive relative to the other required computational tasks in most applications. <p> The smallest number of colors required for coloring G is known as the chromatic number of G and is denoted by O (G). As previously mentioned, the graph coloring problem is NP-hard for graphs that require three or more colors <ref> [7] </ref>. There are some well-known bounds on O (G) including O (G) (G) + 1 and O (G) jC max j, where C max is the largest clique in G. <p> One of the best theoretical bounds for the bin-packing problem is obtained by the "first fit decreasing" heuristic <ref> [7] </ref>, which works by first sorting the items by size and trying to pack the largest items first. We use a greedy strategy, working first with the color with the largest positive deviance.
Reference: [8] <author> R. K. Gjertsen Jr., </author> <title> Parallel graph coloring heuristics, </title> <type> Master's thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1994. </year>
Reference-contexts: j Processors jV j jV G j w (V G ) jV L j w (V L ) 1 10556 0 0 10556 162774 4 10556 977 22992 9579 139782 16 10556 2455 52743 8101 110031 performs at least as well as any other combination of the heuristics tested in <ref> [8] </ref>. The number of colors required for the global phase and the total coloring are given for the JP and PLF heuristics for the Crystal and Kall problems in Tables 3 and 4, respectively. Note that the PLF heuristic is consistently superior.
Reference: [9] <author> B. Hendrickson and R. Leland, </author> <title> A multilevel algorithm for partitioning graphs, </title> <type> Tech. Rep. </type> <institution> SAND93-1301, Sandia National Laboratories, Applied Mathematical Sciences, </institution> <address> Albuquerque, NM, </address> <month> October </month> <year> 1993. </year> <note> Draft. </note>
Reference-contexts: Let the set of processors be P , and let the mapping : V ! P represent the assignment of the vertex set V to the set of processors P . We note that good heuristics exist for determining such partitionings <ref> [9] </ref> [20] [22]. By "good" we mean that the heuristics are able to assign nearly equal numbers of vertices (or vertex weights) to each processor while minimizing the edges that cross partitions (edges whose vertices are assigned to different processors).
Reference: [10] <author> J. </author> <title> J aj a, An Introduction to Parallel Algorithms, </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1992. </year>
Reference-contexts: The JP heuristic has a slightly faster expected runtime, but its major advantage is that is an asynchronous algorithm. This feature of the heuristic allows for very efficient, scalable implementations on distributed-memory machines. We first formulate the JP heuristic under the CREW P-RAM model <ref> [10] </ref> with each processor assigned a single vertex from the graph. Later we will study the heuristic modified for a parallel, 3 distributed-memory MIMD machine. We assign each vertex v a unique number ae (v), which we use to generate a partial ordering of the vertices.

Reference: [15] <author> M. Luby, </author> <title> A simple parallel algorithm for the maximal independent set problem, </title> <journal> SIAM Journal on Computing, </journal> <volume> 4 (1986), </volume> <pages> pp. 1036-1053. </pages>
Reference-contexts: Previous Parallel Coloring Heuristics. The JP heuristic [13] colors the global vertices by finding independent sets of vertices, coloring them, and updating nonlocal neighbors asynchronously. The heuristic is inspired by a parallel algorithm introduced by Luby to determine a maximal independent set in a graph <ref> [15] </ref>. The Luby heuristic has a fast expected runtime (logarithmic in the number of vertices) under the P-RAM computational model.
Reference: [16] <author> D. Matula, G. Marble, and J. Isaacson, </author> <title> Graph coloring algorithms, in Graph Theory and Computing, </title> <editor> R. Read, ed., </editor> <publisher> Academic Press, </publisher> <year> 1972, </year> <pages> pp. 104-122. </pages>
Reference-contexts: Sequential coloring heuristics have been compared by several authors, including a study by Matula et al. with random graphs <ref> [16] </ref>, an analysis by Brelaz on general random graphs [2], and work by Coleman and More [4] with random graphs and matrices from various well-known test suites such as the Harwell collection [6]. Overall, these studies found SDO to be best, closely followed by IDO.
Reference: [17] <author> R. G. Melhem and V. S. Ramarao, </author> <title> Multicolor reorderings of sparse matrices resulting from irregular grids, </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 14 (1988), </volume> <pages> pp. 117-138. </pages>
Reference-contexts: 1. Introduction. The graph coloring problem arises in many scientific computing applica-tions. For example, the efficient computation of sparse Jacobian matrices [4] and the parallel solution of sparse triangular linear systems [5] [11] [12] [14] <ref> [17] </ref> [18] [19] [21] require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem [7]. Fortunately, effective sequential heuristics [4] [19] have been developed and implemented for graph coloring problems of practical importance.
Reference: [18] <author> J. M. Ortega, </author> <title> Orderings for conjugate gradient preconditionings, </title> <journal> SIAM Journal on Optimization, </journal> <volume> 1 (1991), </volume> <pages> pp. 565-582. </pages>
Reference-contexts: 1. Introduction. The graph coloring problem arises in many scientific computing applica-tions. For example, the efficient computation of sparse Jacobian matrices [4] and the parallel solution of sparse triangular linear systems [5] [11] [12] [14] [17] <ref> [18] </ref> [19] [21] require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem [7]. Fortunately, effective sequential heuristics [4] [19] have been developed and implemented for graph coloring problems of practical importance.
Reference: [19] <author> C. Pommerell, M. Annaratone, and W. Fichtner, </author> <title> A set of new mapping and coloring heuristics for distributed-memory parallel processors, </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 13 (1992), </volume> <pages> pp. 194-226. </pages>
Reference-contexts: 1. Introduction. The graph coloring problem arises in many scientific computing applica-tions. For example, the efficient computation of sparse Jacobian matrices [4] and the parallel solution of sparse triangular linear systems [5] [11] [12] [14] [17] [18] <ref> [19] </ref> [21] require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem [7]. Fortunately, effective sequential heuristics [4] [19] have been developed and implemented for graph coloring problems of practical importance. <p> example, the efficient computation of sparse Jacobian matrices [4] and the parallel solution of sparse triangular linear systems [5] [11] [12] [14] [17] [18] <ref> [19] </ref> [21] require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem [7]. Fortunately, effective sequential heuristics [4] [19] have been developed and implemented for graph coloring problems of practical importance. On serial computers these heuristics are inexpensive relative to the other required computational tasks in most applications. <p> Without such an assignment, a balanced coloring is not possible. In the discussions that follow, we assume the parallel computer is homogeneous; however, the definitions and methods can be extended to a heterogeneous system. In <ref> [19] </ref> the imbalance of a coloring is quantified by using the following definitions. <p> One could construct other measures; however, we have found this method to be a simple and effective indicator. Pommerell et al. <ref> [19] </ref> give algorithms for producing balanced colorings; a parallel variant of their most effective algorithm is summarized in Figure 6. This heuristic colors only the global vertices, ignoring edge dependencies between vertices on the same processor. <p> A potential shortcoming of the method is that, in general, the number of colors required to color the graph will increase 10 for small I max . Note that the algorithms given in <ref> [19] </ref> were designed to run on a sequential computer and are not well suited for MIMD implementation. In parallel, at most jP j vertices are colored per step, and a global synchronization is required after each step. These synchronization steps result in a poor communication-to-computation ratio. 4.1.
Reference: [20] <author> A. Pothen, H. Simon, and K.-P. Liou, </author> <title> Partitioning sparse matrices with eigenvectors of graphs, </title> <journal> SIAM Journal on Matrix Analysis, </journal> <volume> 11 (1990), </volume> <pages> pp. 430-452. </pages>
Reference-contexts: Let the set of processors be P , and let the mapping : V ! P represent the assignment of the vertex set V to the set of processors P . We note that good heuristics exist for determining such partitionings [9] <ref> [20] </ref> [22]. By "good" we mean that the heuristics are able to assign nearly equal numbers of vertices (or vertex weights) to each processor while minimizing the edges that cross partitions (edges whose vertices are assigned to different processors).
Reference: [21] <author> R. Schreiber and W.-P. Tang, </author> <title> Vectorizing the Conjugate Gradient method. </title> <type> Unpublished manuscript, </type> <institution> Department of Computer Science, Stanford University, </institution> <year> 1982. </year>
Reference-contexts: 1. Introduction. The graph coloring problem arises in many scientific computing applica-tions. For example, the efficient computation of sparse Jacobian matrices [4] and the parallel solution of sparse triangular linear systems [5] [11] [12] [14] [17] [18] [19] <ref> [21] </ref> require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem [7]. Fortunately, effective sequential heuristics [4] [19] have been developed and implemented for graph coloring problems of practical importance.
Reference: [22] <author> S. Vavasis, </author> <title> Automatic domain partitioning in three dimensions, </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 12 (1991), </volume> <pages> pp. 950-970. </pages>
Reference-contexts: Let the set of processors be P , and let the mapping : V ! P represent the assignment of the vertex set V to the set of processors P . We note that good heuristics exist for determining such partitionings [9] [20] <ref> [22] </ref>. By "good" we mean that the heuristics are able to assign nearly equal numbers of vertices (or vertex weights) to each processor while minimizing the edges that cross partitions (edges whose vertices are assigned to different processors).
Reference: [23] <author> D. Welsh and M. Powell, </author> <title> An upper bound for the chromatic number of a graph and its application to timetabling problems, </title> <journal> Comput. J., </journal> <volume> 10 (1967), </volume> <pages> pp. 85-86. 17 </pages>
Reference-contexts: General sequential coloring heuristic vertices to be colored are ordered. Effective, well-known ordering techniques include the largest first ordering (LFO) <ref> [23] </ref>, the incidence degree ordering (IDO) [4], and the saturation degree ordering (SDO) [2].
References-found: 19

