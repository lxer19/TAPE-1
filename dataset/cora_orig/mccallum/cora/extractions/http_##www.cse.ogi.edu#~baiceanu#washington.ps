URL: http://www.cse.ogi.edu/~baiceanu/washington.ps
Refering-URL: http://www.cse.ogi.edu/~baiceanu/
Root-URL: http://www.cse.ogi.edu
Email: fsynthetix-requestg@cse.ogi.edu  
Title: Multimedia Applications Require Adaptive CPU Scheduling  
Author: Veronica Baiceanu, Crispin Cowan, Dylan McNamee, Calton Pu, and Jonathan Walpole 
Date: November 20, 1996  
Address: Portland, Oregon, USA  
Affiliation: Department of Computer Science and Engineering Oregon Graduate Institute of Science and Technology  
Abstract: CPU scheduling and admission testing for multimedia applications have been extensively studied, and various solutions have been proposed using assorted simplifying assumptions. However, we believe that the complexity and dynamic behavior of multimedia applications and systems make static solutions hard to apply in real-world situations. We are analyzing the difficulties that arise when applying the rate-monotonic (RM) scheduling algorithm and the corresponding admission tests for CPU management, in the context of real multimedia applications running on real systems. RM requires statically predictable, periodic workloads, and while multimedia applications appear to be periodic, in practice they exhibit numerous variabilities in workload. Our study suggests the need for more adaptive scheduling mechanisms, which would allow complex applications to dynamically respond to variations in workload and resource availability. Furthermore, we believe there is a need for a more abstract characterization of applications and resources for admission testing purposes. We conclude that adaptive CPU scheduling policies should address the needs of CPU scheduling and reservation for current multimedia applications.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Veronica Baiceanu. </author> <title> CPU Management for UNIX-based MPEG Video Applications. </title> <note> Available at http://www.cse.ogi.edu/ baiceanu/papers/, </note> <year> 1996. </year>
Reference-contexts: Whether a more complex buffer management strategy is appropriate or not, this example clearly shows that CPU management cannot ignore buffer management. 1 Assuming that processes in both pipelines have the same CPU service times. 4 3.4 Insufficient Operating System Support for Multimedia Our previous work <ref> [1] </ref> analyzed the effects of various Unix features on RM scheduling and admission testing. We used the simulation of player streams described in Section 2, and assigned priorities to tasks according to their periods to approximate RM on top of Unix. <p> Our study showed that the Unix features that generate imprecision for our RM scheduling mechanism and admission test does not generally cause significant performance degradation compared to RM applied in ideal conditions <ref> [1] </ref>. However, when the CPU utilization factor is close to 100%, this slight imprecision can lead to catastrophic degradation of quality for the stream with the lowest priority in the system.
Reference: [2] <author> Shanwei Cen, Calton Pu, Richard Staehli, Crispin Cowan, and Jonathan Walpole. </author> <title> A Distributed Real-Time MPEG Video Audio Player. </title> <booktitle> In Proceedings of the 1995 International Workshop on Network and Operating System Support for Digital Audio and Video (NOSSDAV'95), </booktitle> <pages> pages 151-162, </pages> <address> New Hampshire, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: Our study considers the client side of a multiple stream distributed Internet MPEG player <ref> [2, 3, 4] </ref>, running on a Unix system, and allowing interactive user specification of desired QoS (resolution, frame rate, window size). We believe that this type of multimedia application and environment encompasses present and future multimedia systems, and thus the problems we have identified are characteristic to general multimedia environments. <p> Finally, Section 4 describes our conclusions and suggests some future directions in multimedia resource management. 2 Rate-Monotonic Scheduling and Multimedia System We have assessed the applicability of the RM scheduling algorithm and admission testing in real-world systems by considering the case of our MPEG player <ref> [2, 3, 4] </ref>. To make our study possible, we have created a simplified model of our player, as represented in figure 1. The relevant processes are the decoding process and the display process. Buf 1 holds frames assembled from network packets.
Reference: [3] <author> Crispin Cowan, Shanwei Cen, Jonathan Walpole, and Calton Pu. </author> <title> Adaptive Methods for Distributed Video Presentation. </title> <journal> ACM Computing Surveys, </journal> <volume> 27(4) </volume> <pages> 580-583, </pages> <month> December </month> <year> 1995. </year> <booktitle> Symposium on Multimedia. </booktitle>
Reference-contexts: Our study considers the client side of a multiple stream distributed Internet MPEG player <ref> [2, 3, 4] </ref>, running on a Unix system, and allowing interactive user specification of desired QoS (resolution, frame rate, window size). We believe that this type of multimedia application and environment encompasses present and future multimedia systems, and thus the problems we have identified are characteristic to general multimedia environments. <p> Finally, Section 4 describes our conclusions and suggests some future directions in multimedia resource management. 2 Rate-Monotonic Scheduling and Multimedia System We have assessed the applicability of the RM scheduling algorithm and admission testing in real-world systems by considering the case of our MPEG player <ref> [2, 3, 4] </ref>. To make our study possible, we have created a simplified model of our player, as represented in figure 1. The relevant processes are the decoding process and the display process. Buf 1 holds frames assembled from network packets.
Reference: [4] <author> Rainer Koster. </author> <title> Design of a Multimedia Player with Advanced QoS Control. </title> <type> Master's thesis, </type> <institution> Oregon Graduate Institute of Science & Technology, </institution> <year> 1997. </year>
Reference-contexts: Our study considers the client side of a multiple stream distributed Internet MPEG player <ref> [2, 3, 4] </ref>, running on a Unix system, and allowing interactive user specification of desired QoS (resolution, frame rate, window size). We believe that this type of multimedia application and environment encompasses present and future multimedia systems, and thus the problems we have identified are characteristic to general multimedia environments. <p> Finally, Section 4 describes our conclusions and suggests some future directions in multimedia resource management. 2 Rate-Monotonic Scheduling and Multimedia System We have assessed the applicability of the RM scheduling algorithm and admission testing in real-world systems by considering the case of our MPEG player <ref> [2, 3, 4] </ref>. To make our study possible, we have created a simplified model of our player, as represented in figure 1. The relevant processes are the decoding process and the display process. Buf 1 holds frames assembled from network packets. <p> Our prototype MPEG player supports multiple video pipelines, possibly synchronized with each other, and with one or multiple audio pipelines <ref> [4] </ref>. The process structure is also simplified in a real player, the display process might be broken into two different processes, one for dithering and image scaling, and another one for rendering the image on the display [4]. <p> pipelines, possibly synchronized with each other, and with one or multiple audio pipelines <ref> [4] </ref>. The process structure is also simplified in a real player, the display process might be broken into two different processes, one for dithering and image scaling, and another one for rendering the image on the display [4]. A "buffering" process should also be considered, which would assemble packets arriving over the network into frames, and store them into Buf 1. Buffer disposition and buffer sizes could also vary depending on design preferences [4]. <p> dithering and image scaling, and another one for rendering the image on the display <ref> [4] </ref>. A "buffering" process should also be considered, which would assemble packets arriving over the network into frames, and store them into Buf 1. Buffer disposition and buffer sizes could also vary depending on design preferences [4]. Controller processes might synchronize some of the streams or perform other functions. 3 Thus, the overall application architecture can be quite complex and dynamic. <p> Our MPEG player currently allows users to specify the desired frame rate or resolution for any of its multiple streams, and to modify the window size by simply stretching the window as the video plays <ref> [4] </ref>. This kind of interface suggests a potentially frequent demand for admission testing, together with the need of translating each of the "points" in this QoS space into corresponding requirements in the resource space.
Reference: [5] <author> J. Lehoczky, L. Sha, and Y. Ding. </author> <title> The rate monotonic scheduling algorithm: exact characterization and average case behavior. </title> <booktitle> In Proc. IEEE 10th Real-Time Systems Symp., </booktitle> <pages> pages 166-171, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Rate-monotonic (RM) scheduling <ref> [5, 6] </ref> and its corresponding admission tests are widely used tech niques in CPU management for multi-media applications [7, 9]. However, implementing RM and admission testing in real systems is problematic due to insufficient operating system support and the inherent difficulty of characterizing variable media and complex applications. <p> We then execute the the simulated tasks on a real system and measure their behavior. We approximate RM scheduling by assigning priorities to tasks according to their periods, using Unix real-time (non-aging) priorities. We use Lehoczky et al's exact admission test <ref> [5] </ref>. We did not study relaxed deadline constraints for the decoding process, even though buffering allowed it: we just assigned the same frame rates to both the decoder and display processes. We consider a stream to have missed its deadline if either its decoder or display processes misses a deadline. <p> Additional imprecision is introduced through context switch overhead, timer interrupt imprecision, non-preemptability in system calls and during I/O blocks. We used Lehoczky's RM admission test <ref> [5] </ref>, which assumes perfect preemptability of tasks. In this sense, our test is optimistic: Some of the tasks it accepted should have been rejected, even ignoring the influence of non-real-time Unix characteristics. Note that we could have used an admission test that would not have required perfectly preemptable tasks.
Reference: [6] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard real-time environment. </title> <journal> J. ACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: 1 Introduction Rate-monotonic (RM) scheduling <ref> [5, 6] </ref> and its corresponding admission tests are widely used tech niques in CPU management for multi-media applications [7, 9]. However, implementing RM and admission testing in real systems is problematic due to insufficient operating system support and the inherent difficulty of characterizing variable media and complex applications.
Reference: [7] <author> C. W. Mercer, S. Savage, and H. Tokuda. </author> <title> Processor Capacity Reserves: Operating System Support for Multimedia Applications. </title> <booktitle> In Proc. of the International Conference on Multimedia Computing and Systems, </booktitle> <pages> pages 90-99, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Rate-monotonic (RM) scheduling [5, 6] and its corresponding admission tests are widely used tech niques in CPU management for multi-media applications <ref> [7, 9] </ref>. However, implementing RM and admission testing in real systems is problematic due to insufficient operating system support and the inherent difficulty of characterizing variable media and complex applications.
Reference: [8] <author> R. Nagarajan and C. Vogt. </author> <title> Performance of Multimedia Traffic over the Token Ring. </title> <type> Tech. report, </type> <address> IBM-ENC, Heidelberg, </address> <year> 1992. </year>
Reference-contexts: Note that we could have used an admission test that would not have required perfectly preemptable tasks. For instance, we could have used the more restrictive admission test described by Nagarajan and Vogt <ref> [8] </ref> for nonpreemptable tasks, but this would over-reserve the CPU, and complicate analysis. Our study showed that the Unix features that generate imprecision for our RM scheduling mechanism and admission test does not generally cause significant performance degradation compared to RM applied in ideal conditions [1].
Reference: [9] <author> K.K. Ramakrishnan, Lev Vaitzblit, Cary Gray, Uresh Vahalia, Dennis Ting, Percy Tzelnic, Steve Glaser, and Wayne Duso. </author> <title> Operating Systems Support for a Video-On-Demand File Service. </title> <booktitle> In Proceedings of the 1993 International Workshop on Network and Operating Systems Support for Digital Audio and Video (NOSSDAV'93), </booktitle> <pages> pages 225-236, </pages> <address> Lancaster, U.K., </address> <month> November </month> <year> 1993. </year> <month> 6 </month>
Reference-contexts: 1 Introduction Rate-monotonic (RM) scheduling [5, 6] and its corresponding admission tests are widely used tech niques in CPU management for multi-media applications <ref> [7, 9] </ref>. However, implementing RM and admission testing in real systems is problematic due to insufficient operating system support and the inherent difficulty of characterizing variable media and complex applications.
References-found: 9

