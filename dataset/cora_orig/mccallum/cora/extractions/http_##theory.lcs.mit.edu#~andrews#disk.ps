URL: http://theory.lcs.mit.edu/~andrews/disk.ps
Refering-URL: http://theory.lcs.mit.edu/~andrews/
Root-URL: 
Email: andrews@theory.lcs.mit.edu  bender@das.harvard.edu  ylz@theory.lcs.mit.edu  
Title: New Algorithms for the Disk Scheduling Problem  
Author: Matthew Andrews Michael A. Bender Lisa Zhang 
Note: Supported by NSF contract 9302476-CCR, ARMY grant DAAH04-95-1-0607 and ARPA contract N00014-95-1-1246. Supported by NSF contract 9313775-CCR. Supported by an NSF graduate fellowship, ARMY grant DAAH04-95-1 0607 and ARPA contract N00014-95-1-1246.  
Affiliation: Laboratory for Computer Science MIT  Aiken Computation Laboratory Harvard University  Laboratory for Computer Science MIT  
Abstract: We consider the following disk scheduling problem. Given a set of requests on a computer disk and a convex reachabil-ity function which determines how fast the disk head travels between tracks, our goal is to schedule the disk head so that it services all the requests in the shortest time possible. We present a 3/2-approximation algorithm (with a constant additive term). For the special case in which the reachability function is linear we present an optimal polynomial-time solution. The disk scheduling problem is related to the special case of the asymmetric Traveling Salesman Problem with the triangle inequality (ATSP-) in which all distances are either 0 or some constant ff. We show how to find the optimal tour in polynomial time and describe how this gives another approximation algorithm for the disk scheduling problem. Finally we consider the on-line version of the problem in which uniformly-distributed requests arrive over time. We present an algorithm (related to the above ATSP-) that appears to give higher throughput than previously existing head scheduling algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Baker, S. Asami, E. Deprit, J. Ousterhout, and M. Seltzer. </author> <title> Non-volatile memory for fast, reliable file systems. </title> <booktitle> In Proceedings of the Fifth International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: (NVRAM is currently used, for example, in the products Legato Prestoserve TM and the Network Appliance Corporation's FAServer TM [10].) If the disk buffer consists of NVRAM, then for writes, only the first goal - increasing the throughput is important, since the nonvolatile buffer is now part of storage 2 <ref> [1, 10] </ref>. Most early papers (e.g., [11, 3, 8, 21, 9, 15, 22]) consider the problem of on-line scheduling with small queue lengths (less than 50).
Reference: [2] <author> K. Bogart. </author> <title> Introductory Combinatorics. </title> <publisher> Harcourt Brace Jovanovich, </publisher> <address> Orlando, Florida, </address> <year> 1990. </year>
Reference-contexts: The optimal traveling salesman tour must visit all these nodes v i . Hence the tour has length at least ffA. 2 It remains to show that we can find a tour that achieves this lower bound. Our algorithm is based on the following theorem. See <ref> [4, 2] </ref>. Dilworth's Theorem If the largest antichain in a partial order (P; ) has cardinality A, then the partial order can be decomposed into exactly A chains. Moreover this decomposition can be obtained in polynomial time. <p> It is clear that no decomposition can have fewer than A chains since every element of the antichain must be in a different chain. What is remarkable is that there always exist A chains that cover the whole partial order. (See <ref> [2] </ref> for a proof.) An optimal tour is constructed from the chains in a minimum-size chain decomposition.
Reference: [3] <author> E. G. Coffman, L. A. Klimko, and B. Ryan. </author> <title> Analysis of scanning policies for reducing disk seek times. </title> <journal> SIAM Journal of Computing, </journal> <volume> 1(3), </volume> <month> September </month> <year> 1972. </year>
Reference-contexts: Most early papers (e.g., <ref> [11, 3, 8, 21, 9, 15, 22] </ref>) consider the problem of on-line scheduling with small queue lengths (less than 50).
Reference: [4] <author> R. P. </author> <title> Dilworth. A decomposition theorem for partially ordered sets. </title> <journal> Ann. Math., </journal> <volume> 51(2) </volume> <pages> 161-166, </pages> <year> 1950. </year>
Reference-contexts: The optimal traveling salesman tour must visit all these nodes v i . Hence the tour has length at least ffA. 2 It remains to show that we can find a tour that achieves this lower bound. Our algorithm is based on the following theorem. See <ref> [4, 2] </ref>. Dilworth's Theorem If the largest antichain in a partial order (P; ) has cardinality A, then the partial order can be decomposed into exactly A chains. Moreover this decomposition can be obtained in polynomial time.
Reference: [5] <author> A. M. Frieze, G. Galbiati, and F. Maffioli. </author> <title> On the worst-case performance of some algorithms for the asymmetric traveling salesman problem. </title> <journal> Networks, </journal> <volume> 12 </volume> <pages> 23-39, </pages> <year> 1982. </year>
Reference-contexts: A minimum-cost cycle cover of G has the minimum cost among all the cycle covers of G. The problem of finding a minimum-cost cycle cover is equivalent to solving an assignment problem on the matrix of edge weights <ref> [5] </ref>. If G has n nodes then we can solve the assignment problem and 3 The distance between R i and R j could be defined as the angular distance through which the head must travel in order to service R i and then R j . <p> In this case we apply the previous result to obtain a fi=ff-approximation algorithm. The best known approximation ratio for a general ATSP- problem is dlog 2 ne. (See <ref> [5] </ref>.) We have, Theorem 11 Let ff &gt; 0. If ffi (u; v) 2 f0; ffg for all nodes u and v then the resulting ATSP- problem is polynomially solvable. Proof: We define a relation on the nodes.
Reference: [6] <author> G. Gallo, F. Malucelli, and M. Marre. </author> <title> Hamiltonian paths algorithms for disk scheduling. </title> <type> Technical Report 20/94, </type> <institution> Dipartimento di Informatica, Universita di Pisa, </institution> <year> 1994. </year>
Reference-contexts: They test the algorithms with queues having many (up to 1000) random uniformly-distributed requests. In [23], the authors test disk scheduling algorithms on traces of actual disk executions. Algorithms for disk scheduling that are based on the Traveling Salesman Problem are presented in <ref> [6] </ref>. Other papers dedicated to modeling disks include [24, 19, 13]. 2. The Model The Disk Scheduling Problem A computer disk is in the shape of an annulus. We let the radial distance between the inner and outer circles be 1. The disk rotates at a constant rate. <p> As shown below, our algorithm finds an order in which to service the cycles in C such that the disk head can move between the cycles without using too many rotations. An approach based on finding a minimum-cost cycle cover was independently proposed by <ref> [6] </ref>, but no performance guarantees were provided for the resulting algorithms. The Virtual Trace Before describing the algorithm in detail, we need to define a virtual trace to connect neighboring requests on a cycle.
Reference: [7] <author> M. Garey and D. Johnson. </author> <title> Computers and intractability: A guide to the theory of NP-Completeness. </title> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: It is not practical to look for an optimal solution since we can show that the problem is NP-hard. The reduction is from the directed Hamiltonian cycle problem in which every vertex is incident to at most 3 arcs. This is known to be NP-complete. (See <ref> [7, 17] </ref>.) The details of the reduction are left for the full version.
Reference: [8] <author> R. Geist and S. Daniel. </author> <title> A continuum of disk scheduling algorithms. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 77-92, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: Most early papers (e.g., <ref> [11, 3, 8, 21, 9, 15, 22] </ref>) consider the problem of on-line scheduling with small queue lengths (less than 50).
Reference: [9] <author> C. C. Gotlieb and H. MacEwen. </author> <title> Performance of movable-head disk storage devices. </title> <journal> Journal of the ACM, </journal> <volume> 20(4), </volume> <month> October </month> <year> 1973. </year>
Reference-contexts: Most early papers (e.g., <ref> [11, 3, 8, 21, 9, 15, 22] </ref>) consider the problem of on-line scheduling with small queue lengths (less than 50).
Reference: [10] <author> D. Hitz, J. Lau, and M. Malcolm. </author> <title> File system design for an NFS file server appliance. </title> <booktitle> In USENIX, </booktitle> <pages> pages 235-245, </pages> <month> Winter </month> <year> 1994. </year>
Reference-contexts: Now, however, nonvolatile memory (NVRAM, i.e. memory that retains its stored values even without power) is emerging as a viable technology. (NVRAM is currently used, for example, in the products Legato Prestoserve TM and the Network Appliance Corporation's FAServer TM <ref> [10] </ref>.) If the disk buffer consists of NVRAM, then for writes, only the first goal - increasing the throughput is important, since the nonvolatile buffer is now part of storage 2 [1, 10]. <p> (NVRAM is currently used, for example, in the products Legato Prestoserve TM and the Network Appliance Corporation's FAServer TM [10].) If the disk buffer consists of NVRAM, then for writes, only the first goal - increasing the throughput is important, since the nonvolatile buffer is now part of storage 2 <ref> [1, 10] </ref>. Most early papers (e.g., [11, 3, 8, 21, 9, 15, 22]) consider the problem of on-line scheduling with small queue lengths (less than 50).
Reference: [11] <author> M. Hofri. </author> <title> Disk scheduling: FCFS vs SSTF revisited. </title> <journal> Communications of the ACM, </journal> <volume> 23(11), </volume> <month> November </month> <year> 1980. </year>
Reference-contexts: Most early papers (e.g., <ref> [11, 3, 8, 21, 9, 15, 22] </ref>) consider the problem of on-line scheduling with small queue lengths (less than 50).
Reference: [12] <author> D. M. Jacobson and J. Wilkes. </author> <title> Disk scheduling algorithms based on rotational position. </title> <type> Technical Report HPL-CSP-91-7rev1, </type> <institution> Hewlett-Packard Company, </institution> <year> 1991. </year>
Reference-contexts: However, despite the difficulty of improving mechanical components, we can still aim to use the disks more efficiently. For example, disks generally operate at a small fraction of their maximum bandwidth. Researchers have demonstrated experimentally that sophisticated disk head scheduling algorithms can deliver higher throughput <ref> [20, 12, 23] </ref>. <p> In [20] and <ref> [12] </ref>, the authors examine algorithms that depend on rotational position. They test the algorithms with queues having many (up to 1000) random uniformly-distributed requests. In [23], the authors test disk scheduling algorithms on traces of actual disk executions.
Reference: [13] <author> D. Kotz, S. B. Toh, and S. Radhakrishnan. </author> <title> A detailed simulation model of the HP 97560 disk drive. </title> <type> Technical Report PCS-TR94-220, </type> <institution> Dartmouth College, </institution> <year> 1994. </year>
Reference-contexts: In [23], the authors test disk scheduling algorithms on traces of actual disk executions. Algorithms for disk scheduling that are based on the Traveling Salesman Problem are presented in [6]. Other papers dedicated to modeling disks include <ref> [24, 19, 13] </ref>. 2. The Model The Disk Scheduling Problem A computer disk is in the shape of an annulus. We let the radial distance between the inner and outer circles be 1. The disk rotates at a constant rate.
Reference: [14] <author> H. W. Kuhn. </author> <title> The Hungarian method for the assignment problem. </title> <journal> Naval Research Logistics Quarterly, </journal> <volume> 2:83 - 97, </volume> <year> 1955. </year>
Reference-contexts: However, our integral definition of distance facilitates the proofs in Sections 3 and 5. hence find a minimum-cost cycle cover in O (n 3 ) time using the Hungarian method of Kuhn <ref> [14, 16] </ref>. Let C denote a minimum-cost cycle cover of the disk graph, and let C (i) denote the set of cycles in C with cost i. Let p be the maximum cost of a cycle in C.
Reference: [15] <author> W. C. Oney. </author> <title> Queuing analysis of the scan policy for moving-head disks. </title> <journal> Journal of the ACM, </journal> <volume> 22(3), </volume> <month> July </month> <year> 1975. </year>
Reference-contexts: Most early papers (e.g., <ref> [11, 3, 8, 21, 9, 15, 22] </ref>) consider the problem of on-line scheduling with small queue lengths (less than 50).
Reference: [16] <author> C. H. Papadimitriou and K. Steiglitz. </author> <title> Combinatorial Optimization: Algorithms and Complexity. </title> <publisher> Prentice Hall, </publisher> <address> New Jersey, </address> <year> 1982. </year>
Reference-contexts: However, our integral definition of distance facilitates the proofs in Sections 3 and 5. hence find a minimum-cost cycle cover in O (n 3 ) time using the Hungarian method of Kuhn <ref> [14, 16] </ref>. Let C denote a minimum-cost cycle cover of the disk graph, and let C (i) denote the set of cycles in C with cost i. Let p be the maximum cost of a cycle in C.
Reference: [17] <author> J. Plesnik. </author> <title> The NP-completeness of the Hamiltonian cycle problem in planar digraphs with degree bound two. </title> <type> Unpublished manuscript, </type> <year> 1978. </year>
Reference-contexts: It is not practical to look for an optimal solution since we can show that the problem is NP-hard. The reduction is from the directed Hamiltonian cycle problem in which every vertex is incident to at most 3 arcs. This is known to be NP-complete. (See <ref> [7, 17] </ref>.) The details of the reduction are left for the full version.
Reference: [18] <author> C. Ruemmler and J. Wilkes. </author> <title> UNIX disk access patterns. </title> <booktitle> In USENIX, </booktitle> <pages> pages 405-420, </pages> <month> Winter </month> <year> 1993. </year>
Reference-contexts: We show how to find the optimal tour in polynomial time and describe how this gives another approximation algorithm for the disk scheduling problem. In Section 6 we consider the on-line problem. Since the requests in real systems are known to arrive in a bursty fashion <ref> [18] </ref> our off-line algorithms are still useful. When a burst of requests arrive we can schedule them using an off-line algorithm. We also consider the steady state model of disk arrivals of Seltzer, Chen and Ousterhout [20] in which the queue is always full. <p> The disk head can only service requests that are in the queue. This situation may be viewed as an on-line problem in which we have limited look-ahead. In real systems the requests are known to arrive in a bursty fashion <ref> [18] </ref> and so the preceding analysis of the off-line problem is useful. Suppose a large group of requests arrive together and then there is a period in which no requests arrive. We can use an off-line algorithm to service these requests.
Reference: [19] <author> C. Ruemmler and J. Wilkes. </author> <title> An introduction to disk drive modeling. </title> <journal> IEEE Computer, </journal> <volume> 27(3) </volume> <pages> 17-29, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: 1. Introduction Processor speed and disk and memory capacity are increasing by over 40% per year. In contrast, disk speed is increasing more gradually, growing by only 7% per year <ref> [19] </ref>. Since this rate is unlikely to change substantially in the near future, I/O performance may become the system bottleneck. However, despite the difficulty of improving mechanical components, we can still aim to use the disks more efficiently. <p> Small seeks are dominated by a constant start-up time, medium-length seeks by a period of acceleration and deceleration, and long seeks by a period of constant speed. In the appendix we give the specifications from <ref> [19] </ref> for the Hewlett-Packard 97560 disk. The Problem In this paper we chiefly consider the off-line version of the disk scheduling problem. <p> In [23], the authors test disk scheduling algorithms on traces of actual disk executions. Algorithms for disk scheduling that are based on the Traveling Salesman Problem are presented in [6]. Other papers dedicated to modeling disks include <ref> [24, 19, 13] </ref>. 2. The Model The Disk Scheduling Problem A computer disk is in the shape of an annulus. We let the radial distance between the inner and outer circles be 1. The disk rotates at a constant rate.
Reference: [20] <author> M. Seltzer, P. Chen, and J. Ousterhout. </author> <title> Disk scheduling revisited. </title> <booktitle> In USENIX, </booktitle> <pages> pages 313-324, </pages> <month> Winter </month> <year> 1990. </year>
Reference-contexts: However, despite the difficulty of improving mechanical components, we can still aim to use the disks more efficiently. For example, disks generally operate at a small fraction of their maximum bandwidth. Researchers have demonstrated experimentally that sophisticated disk head scheduling algorithms can deliver higher throughput <ref> [20, 12, 23] </ref>. <p> When a burst of requests arrive we can schedule them using an off-line algorithm. We also consider the steady state model of disk arrivals of Seltzer, Chen and Ousterhout <ref> [20] </ref> in which the queue is always full. Whenever a request is serviced it is replaced in the queue by a new request chosen uniformly at random on the disk. <p> Whenever a request is serviced it is replaced in the queue by a new request chosen uniformly at random on the disk. We present an algorithm, CHAIN, which is related to our algorithm for the above ATSP- and which appears to give higher throughput than the algorithms considered in <ref> [20] </ref>. Related Work One of the most famous disk head scheduling algorithms, called CSCAN, is used in the UNIX 1 operating system. <p> In <ref> [20] </ref> and [12], the authors examine algorithms that depend on rotational position. They test the algorithms with queues having many (up to 1000) random uniformly-distributed requests. In [23], the authors test disk scheduling algorithms on traces of actual disk executions. <p> Suppose a large group of requests arrive together and then there is a period in which no requests arrive. We can use an off-line algorithm to service these requests. For the remainder of this section we focus on the steady state model of disk arrivals used in <ref> [20] </ref>. The disk is discretized so that there are finitely many points for which a request can be made. This is achieved by dividing the disk into t tracks and s sectors per track. <p> That is, if the disk has made r rotations and x requests have been serviced then the throughput is x=sr. Note that throughput is dependent on q as well as the algorithm used. If q is small then any algorithm will yield low throughput. In <ref> [20] </ref> the authors simulated a number of algorithms and measured their throughput. Among the algorithms they tested, SHORTEST-TIME-FIRST (STF) has the highest throughput. This algorithm always aims to service the request that it can reach with the smallest amount of rotation. <p> Unfortunately, we are currently unable to determine its throughput analytically. We believe that CHAIN is of interest however because preliminary simulations indicate that it gives a higher throughput than STF. For s = 8, t = 40 and q = 40 and using the reachability function from <ref> [20] </ref>, the disk throughput of CHAIN is 25.0% whereas the throughput of STF is 23.7%. Hence CHAIN services 5% more requests than STF in a given time period. This contradicts the conjecture of [20] that STF yields the best throughput. <p> For s = 8, t = 40 and q = 40 and using the reachability function from <ref> [20] </ref>, the disk throughput of CHAIN is 25.0% whereas the throughput of STF is 23.7%. Hence CHAIN services 5% more requests than STF in a given time period. This contradicts the conjecture of [20] that STF yields the best throughput. More extensive simulation results will be given in the full version. The algorithm Consider the q requests that are in the queue.
Reference: [21] <author> T. J. Teorey and T. B. Pinkerton. </author> <title> A comparative analysis of disk scheduling policies. </title> <journal> Communications of the ACM, </journal> <volume> 15(3), </volume> <month> March </month> <year> 1972. </year>
Reference-contexts: Most early papers (e.g., <ref> [11, 3, 8, 21, 9, 15, 22] </ref>) consider the problem of on-line scheduling with small queue lengths (less than 50).
Reference: [22] <author> N. C. Wilhelm. </author> <title> An anomaly in disk scheduling: A comparison of FCFS and SSTF seek scheduling using an empirical model for disk accesses. </title> <journal> Communications of the ACM, </journal> <volume> 9(1), </volume> <month> January </month> <year> 1976. </year>
Reference-contexts: Most early papers (e.g., <ref> [11, 3, 8, 21, 9, 15, 22] </ref>) consider the problem of on-line scheduling with small queue lengths (less than 50).
Reference: [23] <author> B. L. Worthington, G. R. Ganger, and Y. N. Patt. </author> <title> Scheduling algorithms for modern disk drives. </title> <booktitle> In SIGMETRICS, </booktitle> <pages> pages 241-251, </pages> <year> 1994. </year>
Reference-contexts: However, despite the difficulty of improving mechanical components, we can still aim to use the disks more efficiently. For example, disks generally operate at a small fraction of their maximum bandwidth. Researchers have demonstrated experimentally that sophisticated disk head scheduling algorithms can deliver higher throughput <ref> [20, 12, 23] </ref>. <p> In [20] and [12], the authors examine algorithms that depend on rotational position. They test the algorithms with queues having many (up to 1000) random uniformly-distributed requests. In <ref> [23] </ref>, the authors test disk scheduling algorithms on traces of actual disk executions. Algorithms for disk scheduling that are based on the Traveling Salesman Problem are presented in [6]. Other papers dedicated to modeling disks include [24, 19, 13]. 2.
Reference: [24] <author> B. L. Worthington, G. R. Ganger, Y. N. Patt, and J. Wilkes. </author> <title> On-line extraction of SCSI disk drive parameters. </title> <booktitle> In SIGMETRICS, </booktitle> <pages> pages 146-156, </pages> <year> 1995. </year>
Reference-contexts: In [23], the authors test disk scheduling algorithms on traces of actual disk executions. Algorithms for disk scheduling that are based on the Traveling Salesman Problem are presented in [6]. Other papers dedicated to modeling disks include <ref> [24, 19, 13] </ref>. 2. The Model The Disk Scheduling Problem A computer disk is in the shape of an annulus. We let the radial distance between the inner and outer circles be 1. The disk rotates at a constant rate.
References-found: 24

