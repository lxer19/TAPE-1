URL: http://http.cs.berkeley.edu/~asah/papers/other/printed/widom-srs-implementation.ps.gz
Refering-URL: http://http.cs.berkeley.edu/~asah/papers/other/printed/
Root-URL: http://www.cs.berkeley.edu
Email: widom@ibm.com, bruce@ibm.com bobbie@cs.umd.edu  
Title: Implementing Set-Oriented Production Rules as an Extension to Starburst  
Author: Jennifer Widom Roberta Jo Cochrane Bruce G. Lindsay 
Address: 650 Harry Road  San Jose, CA 95120 College Park, MD 20742  
Affiliation: IBM Almaden Research Center Department of Computer Science  University of Maryland  
Note: Proc. of 1991 VLDB Conference, pages 275-285  
Abstract: This paper describes the implementation of a set-oriented database production rule language proposed in earlier papers. Our implementation uses the extensibility features of the Starburst database system, and rule execution is fully integrated into database query and transaction processing. 
Abstract-found: 1
Intro-found: 1
Reference: [ACL91] <author> R. Agrawal, R.J. Cochrane, and B. Lindsay. </author> <title> On maintaining priorities in a production rule system. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 479-487, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: not permitted: if creation of a rule would cause a cycle in user-defined or transitive priorities, then that create rule statement is rejected.) To satisfy the second requirement, the system uses a deterministic scheme to order rules with no user-defined or transitive priority; details of this scheme are given in <ref> [ACL91] </ref>. To enforce rule ordering, the set of potentially triggered rules described in Section 7 is maintained as a sort structure|a balanced binary tree. Inserting a rule or fetching the highest priority rule requires time proportional to log (number of rules in structure). <p> Inserting a rule or fetching the highest priority rule requires time proportional to log (number of rules in structure). However, to insert rules we must be able to determine efficiently, for any two rules, which precedes the other. A method for doing this is described in <ref> [ACL91] </ref>. 9 Concurrency Control Since Starburst is a multi-user database system, we must consider the effect on the rule system of concurrently executing transactions. <p> Each time a transaction adds a rule to Potential-Rules, it obtains an rs-lock on that rule. Consider a transaction that performs rule definition. All rule definition commands|create rule, drop rule, and alter rule|may force some recomputation of rule priorities; even the ordering between unchanged rules may be reversed <ref> [ACL91] </ref>. When a rule definition command is executed, there is an identifiable minimal set S of rule pairs whose precedence relationship may be reversed by the resulting recomputation of priorities.
Reference: [Coh89] <author> D. Cohen. </author> <title> Compiling complex database transition triggers. </title> <booktitle> In Proceedings of the ACM SIG-MOD International Conference on Management of Data, </booktitle> <pages> pages 225-234, </pages> <address> Portland, Oregon, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: This paper serves the dual role of describing our implementation of the rule system and illustrating how the extensibility features of Starburst facilitated its rapid development. Several other research efforts also consider production rules in database systems. Descriptions of a variety of rule languages and prototype systems appear in <ref> [Coh89, DE89, dMS88, Esw76, Han89, MD89, SLR88, SJGP90] </ref>, among others. The most significant difference between our rule system and others is our focus on set-orientation, whereby rules can be triggered by and process arbitrary sets of changes to the database.
Reference: [CW90] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for constraint maintenance. </title> <booktitle> In Proceedings of the Sixteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 566-577, </pages> <address> Bris-bane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Otherwise, rule processing terminates when the set of triggered rules is empty or when no triggered rule has a true condition; the entire transaction is then committed. 2.1 Examples We illustrate our rule language with three simple examples; for numerous additional examples see <ref> [CW90, CW91, WF89, WF90, Wid91] </ref>. The first rule controls salaries in a database of employees: 7 In [WF90] we specified that a rule is considered with respect to the (composite) transition since the point at which it was most recently executed. <p> The facility uses conservative algorithms to provide information about possible non-termination of rule sets, whether rule ordering may affect the final database state, etc. In addition, we plan to build special-purpose applications on top of the rule system, such as the constraint maintenance facility described in <ref> [CW90] </ref>, the incremental view maintenance facility described in [CW91], and the deductive database facility described in [Wid91].
Reference: [CW91] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for incremental view maintenance. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 577-589, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Otherwise, rule processing terminates when the set of triggered rules is empty or when no triggered rule has a true condition; the entire transaction is then committed. 2.1 Examples We illustrate our rule language with three simple examples; for numerous additional examples see <ref> [CW90, CW91, WF89, WF90, Wid91] </ref>. The first rule controls salaries in a database of employees: 7 In [WF90] we specified that a rule is considered with respect to the (composite) transition since the point at which it was most recently executed. <p> In addition, we plan to build special-purpose applications on top of the rule system, such as the constraint maintenance facility described in [CW90], the incremental view maintenance facility described in <ref> [CW91] </ref>, and the deductive database facility described in [Wid91]. Acknowledgements We are grateful to Rakesh Agrawal, Manish Arya, Ste-fano Ceri, George Lapis, Guy Lohman, John McPherson, Joel Richardson, and Ulf Schreier, who all have helped us out one way or another along the way.
Reference: [DE89] <author> L.M.L. Delcambre and J.N. Etheredge. </author> <title> The Relational Production Language: A production language for relational databases. </title> <editor> In L. Ker-schberg, editor, </editor> <booktitle> Expert Database Systems| Proceedings from the Second International Conference, </booktitle> <pages> pages 333-351. </pages> <address> Benjamin/Cummings, Redwood City, California, </address> <year> 1989. </year>
Reference-contexts: This paper serves the dual role of describing our implementation of the rule system and illustrating how the extensibility features of Starburst facilitated its rapid development. Several other research efforts also consider production rules in database systems. Descriptions of a variety of rule languages and prototype systems appear in <ref> [Coh89, DE89, dMS88, Esw76, Han89, MD89, SLR88, SJGP90] </ref>, among others. The most significant difference between our rule system and others is our focus on set-orientation, whereby rules can be triggered by and process arbitrary sets of changes to the database.
Reference: [dMS88] <author> C. de Maindreville and E. Simon. </author> <title> A production rule based approach to deductive databases. </title> <booktitle> In Proceedings of the Fourth International Conference on Data Engineering, </booktitle> <pages> pages 234-241, </pages> <address> Los Angeles, California, </address> <month> February </month> <year> 1988. </year>
Reference-contexts: This paper serves the dual role of describing our implementation of the rule system and illustrating how the extensibility features of Starburst facilitated its rapid development. Several other research efforts also consider production rules in database systems. Descriptions of a variety of rule languages and prototype systems appear in <ref> [Coh89, DE89, dMS88, Esw76, Han89, MD89, SLR88, SJGP90] </ref>, among others. The most significant difference between our rule system and others is our focus on set-orientation, whereby rules can be triggered by and process arbitrary sets of changes to the database.
Reference: [Esw76] <author> K.P. Eswaran. </author> <title> Specifications, implementations and interactions of a trigger subsystem in an integrated database system. </title> <institution> IBM Research Report RJ 1820, IBM San Jose Research Laboratory, </institution> <address> San Jose, California, </address> <month> August </month> <year> 1976. </year>
Reference-contexts: This paper serves the dual role of describing our implementation of the rule system and illustrating how the extensibility features of Starburst facilitated its rapid development. Several other research efforts also consider production rules in database systems. Descriptions of a variety of rule languages and prototype systems appear in <ref> [Coh89, DE89, dMS88, Esw76, Han89, MD89, SLR88, SJGP90] </ref>, among others. The most significant difference between our rule system and others is our focus on set-orientation, whereby rules can be triggered by and process arbitrary sets of changes to the database.
Reference: [GLL89] <author> R. Gagliardi, G. Lapis, and B. Lindsay. </author> <title> A flexible and efficient database authorization facility. </title> <institution> IBM Research Report RJ 6826, IBM Almaden Research Center, </institution> <address> San Jose, California, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: In addition, we must consider how authorization is handled at rule execution time. To explain how these issues have been addressed, we first briefly describe (some of) Starburst's extensible authorization component <ref> [GLL89] </ref>. Lattices of privilege types can be defined for arbitrary database objects, and privileges on objects can be granted to and revoked from users and groups of users. In a lattice of privilege types, higher types subsume the privileges of lower types.
Reference: [H + 90] <author> L.M. Haas et al. </author> <title> Starburst mid-flight: As the dust clears. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 143-160, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Our rule language has now been implemented at the IBM Almaden Research Center as an extension to Starburst. Starburst is a prototype relational database system with a focus on extensibility <ref> [H + 90] </ref>. This paper serves the dual role of describing our implementation of the rule system and illustrating how the extensibility features of Starburst facilitated its rapid development. Several other research efforts also consider production rules in database systems. <p> It is based on SQL, since an extended version of SQL is the query language used in Starburst <ref> [H + 90] </ref>. The production rules facility is fully integrated into the database system. That is, all the usual database tasks are performed; in addition, a set of rules may be defined. <p> One of the goals of Starburst is to build an extensible system|a system that can support non-traditional applications and can serve as a testbed for innovations and improvements in database technology. For a detailed description of Star-burst, its extensibility architecture, and some of its current extensions, see <ref> [H + 90] </ref>. Our production rules facility is a substantial extension that takes advantage of several features included in Starburst for extensibility.
Reference: [Han89] <author> E.N. Hanson. </author> <title> An initial report on the design of Ariel: A DBMS with an integrated production rule system. </title> <booktitle> SIGMOD Record, Special Issue on Rule Management and Processing in Expert Database Systems, </booktitle> <volume> 18(3) </volume> <pages> 12-19, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: This paper serves the dual role of describing our implementation of the rule system and illustrating how the extensibility features of Starburst facilitated its rapid development. Several other research efforts also consider production rules in database systems. Descriptions of a variety of rule languages and prototype systems appear in <ref> [Coh89, DE89, dMS88, Esw76, Han89, MD89, SLR88, SJGP90] </ref>, among others. The most significant difference between our rule system and others is our focus on set-orientation, whereby rules can be triggered by and process arbitrary sets of changes to the database. <p> The algorithms we use guarantee consistency, yet they permit substantial concurrency. 10 In the Ariel <ref> [Han89] </ref> and HiPAC [MD89] systems, object-orientation allows rules to be specified as database objects, so concurrency control is handled automatically. This is not possible in Starburst. We first define the consistency requirements, then ex-plain the solutions we have implemented.
Reference: [HCKW90] <author> E.N. Hanson, M. Chaabouni, C.-H. Kim, and Y.-W. Wang. </author> <title> A predicate matching algorithm for database rule systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 271-280, </pages> <address> Atlantic City, New Jersey, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: This information is shared by all user processes. (We assume that the number of rules does not exceed the capacity of (virtual) memory. An argument for this assumption appears in <ref> [HCKW90] </ref>.) * Transition Log: This is a highly structured log of those operations occurring within a transaction that are relevant to currently defined rules.
Reference: [MD89] <author> D.R. McCarthy and U. Dayal. </author> <title> The architecture of an active database management system. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 215-224, </pages> <address> Portland, Oregon, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: This paper serves the dual role of describing our implementation of the rule system and illustrating how the extensibility features of Starburst facilitated its rapid development. Several other research efforts also consider production rules in database systems. Descriptions of a variety of rule languages and prototype systems appear in <ref> [Coh89, DE89, dMS88, Esw76, Han89, MD89, SLR88, SJGP90] </ref>, among others. The most significant difference between our rule system and others is our focus on set-orientation, whereby rules can be triggered by and process arbitrary sets of changes to the database. <p> The algorithms we use guarantee consistency, yet they permit substantial concurrency. 10 In the Ariel [Han89] and HiPAC <ref> [MD89] </ref> systems, object-orientation allows rules to be specified as database objects, so concurrency control is handled automatically. This is not possible in Starburst. We first define the consistency requirements, then ex-plain the solutions we have implemented.
Reference: [SJGP90] <author> M. Stonebraker, A. Jhingran, J. Goh, and S. Potamianos. </author> <title> On rules, procedures, caching and views in data base systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 281-290, </pages> <address> Atlantic City, New Jersey, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: This paper serves the dual role of describing our implementation of the rule system and illustrating how the extensibility features of Starburst facilitated its rapid development. Several other research efforts also consider production rules in database systems. Descriptions of a variety of rule languages and prototype systems appear in <ref> [Coh89, DE89, dMS88, Esw76, Han89, MD89, SLR88, SJGP90] </ref>, among others. The most significant difference between our rule system and others is our focus on set-orientation, whereby rules can be triggered by and process arbitrary sets of changes to the database.
Reference: [SLR88] <author> T. Sellis, C.-C. Lin, and L. Raschid. </author> <title> Implementing large production systems in a DBMS environment: </title> <booktitle> Concepts and algorithms. In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 404-412, </pages> <address> Chicago, Illinois, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: This paper serves the dual role of describing our implementation of the rule system and illustrating how the extensibility features of Starburst facilitated its rapid development. Several other research efforts also consider production rules in database systems. Descriptions of a variety of rule languages and prototype systems appear in <ref> [Coh89, DE89, dMS88, Esw76, Han89, MD89, SLR88, SJGP90] </ref>, among others. The most significant difference between our rule system and others is our focus on set-orientation, whereby rules can be triggered by and process arbitrary sets of changes to the database.
Reference: [WF89] <author> J. Widom and S.J. Finkelstein. </author> <title> A syntax and semantics for set-oriented production rules in relational database systems. </title> <institution> IBM Research Report RJ 6880, IBM Almaden Research Center, </institution> <address> San Jose, California, </address> <month> June </month> <year> 1989. </year> <month> Revised March </month> <year> 1990. </year>
Reference-contexts: A formal presentation of transitions and their net effects appears in <ref> [WF89] </ref>. <p> Otherwise, rule processing terminates when the set of triggered rules is empty or when no triggered rule has a true condition; the entire transaction is then committed. 2.1 Examples We illustrate our rule language with three simple examples; for numerous additional examples see <ref> [CW90, CW91, WF89, WF90, Wid91] </ref>. The first rule controls salaries in a database of employees: 7 In [WF90] we specified that a rule is considered with respect to the (composite) transition since the point at which it was most recently executed.
Reference: [WF90] <author> J. Widom and S.J. Finkelstein. </author> <title> Set-oriented production rules in relational database systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 259-270, </pages> <address> Atlantic City, New Jersey, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: Once there are no triggered rules left to consider, the transaction is committed. Details are given below. To facilitate a quick prototype implementation, the rule language supported by our system differs slightly from that proposed in <ref> [WF90] </ref>. Some changes are purely syntactic, others are restrictions that we intend to remove, and in one case we have added expressive power to the language. To alleviate any confusion in readers familiar with [WF89,WF90], all changes are documented in footnotes. <p> the condition evaluates to true, then the rule's list of actions is executed. 3 (The condition may be omitted, in which case it is always true.) Rule actions are arbitrary Starburst database operations, including select, insert, delete, and update expressions, as well 2 Note minor changes from the syntax in <ref> [WF90] </ref>. The syntax used here allows us to take advantage of general commands provided by Starburst (see Section 5). Also note that rules are triggered by operations on only one table, while in [WF90] they could be triggered by operations on any number of tables. <p> including select, insert, delete, and update expressions, as well 2 Note minor changes from the syntax in <ref> [WF90] </ref>. The syntax used here allows us to take advantage of general commands provided by Starburst (see Section 5). Also note that rules are triggered by operations on only one table, while in [WF90] they could be triggered by operations on any number of tables. We intend to permit multiple tables in the future. 3 For simplicity, in our current implementation rule conditions actually are SQL select expressions: if the select expression is nonempty then the condition is true. <p> Deactivated rules remain in the 4 In <ref> [WF90] </ref> we proposed only data modification and rollback. The more general actions were readily implemented in Starburst and mesh with our intention to eventually permit rule actions to be arbitrary procedure calls. 5 In [WF90] rule priorities are specified in separate commands; the expressive power is equivalent. 6 This form combines <p> Deactivated rules remain in the 4 In <ref> [WF90] </ref> we proposed only data modification and rollback. The more general actions were readily implemented in Starburst and mesh with our intention to eventually permit rule actions to be arbitrary procedure calls. 5 In [WF90] rule priorities are specified in separate commands; the expressive power is equivalent. 6 This form combines the two forms given in [WF90]. system but cannot be executed. <p> The more general actions were readily implemented in Starburst and mesh with our intention to eventually permit rule actions to be arbitrary procedure calls. 5 In <ref> [WF90] </ref> rule priorities are specified in separate commands; the expressive power is equivalent. 6 This form combines the two forms given in [WF90]. system but cannot be executed. The syntax for deacti- vation and reactivation is: alter rule rule-name on table-name deactivate ; alter rule rule-name on table-name activate ; We now describe the semantics of rule execution. <p> Otherwise, rule processing terminates when the set of triggered rules is empty or when no triggered rule has a true condition; the entire transaction is then committed. 2.1 Examples We illustrate our rule language with three simple examples; for numerous additional examples see <ref> [CW90, CW91, WF89, WF90, Wid91] </ref>. The first rule controls salaries in a database of employees: 7 In [WF90] we specified that a rule is considered with respect to the (composite) transition since the point at which it was most recently executed. <p> The first rule controls salaries in a database of employees: 7 In <ref> [WF90] </ref> we specified that a rule is considered with respect to the (composite) transition since the point at which it was most recently executed.
Reference: [Wid91] <author> J. Widom. </author> <title> Deduction in the Starburst production rule system. </title> <institution> IBM Research Report RJ 8135, IBM Almaden Research Center, </institution> <address> San Jose, Cali-fornia, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Otherwise, rule processing terminates when the set of triggered rules is empty or when no triggered rule has a true condition; the entire transaction is then committed. 2.1 Examples We illustrate our rule language with three simple examples; for numerous additional examples see <ref> [CW90, CW91, WF89, WF90, Wid91] </ref>. The first rule controls salaries in a database of employees: 7 In [WF90] we specified that a rule is considered with respect to the (composite) transition since the point at which it was most recently executed. <p> In addition, we plan to build special-purpose applications on top of the rule system, such as the constraint maintenance facility described in [CW90], the incremental view maintenance facility described in [CW91], and the deductive database facility described in <ref> [Wid91] </ref>. Acknowledgements We are grateful to Rakesh Agrawal, Manish Arya, Ste-fano Ceri, George Lapis, Guy Lohman, John McPherson, Joel Richardson, and Ulf Schreier, who all have helped us out one way or another along the way.
References-found: 17

