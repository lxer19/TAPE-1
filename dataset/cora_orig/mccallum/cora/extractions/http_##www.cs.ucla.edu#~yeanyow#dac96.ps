URL: http://www.cs.ucla.edu/~yeanyow/dac96.ps
Refering-URL: http://www.cs.ucla.edu/~yeanyow/
Root-URL: http://www.cs.ucla.edu
Title: Structural Gate Decomposition for Depth-Optimal Technology Mapping in LUT-based FPGA Design  
Author: Jason Cong and Yean-Yow Hwang 
Address: Los Angeles  
Affiliation: Department of Computer Science University of California,  
Abstract: In this paper, we study the problem of decomposing gates in fanin-unbounded or K-bounded networks such that the K-input LUT mapping solutions computed by a depth-optimal mapper have minimum depth. We show (1) any decomposition leads to a smaller or equal mapping depth regardless the decomposition algorithm used, and (2) the problem is NP-hard for unbounded networks when K 3 and remains NP-hard for K-bounded networks when K 5. We propose a gate decomposition algorithm, named DOGMA, which combines level-driven node packing technique (Chortle-d) and the network flow based optimal labeling technique (FlowMap). Experimental results show that networks decomposed by DOGMA allow depth-optimal technology mappers to improve the mapping solutions by up to 11% in depth and up to 35% in area comparing to the mapping results of networks decomposed by other existing decomposition algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Chen, K. C., J. Cong, Y. Ding, A. B. Kahng, and P. Trajmar, ``DAG-Map: </author> <title> Graph-based FPGA Technology Mapping for Delay Optimization,'' </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <pages> pp. 7-20, </pages> <month> Sep. </month> <year> 1992. </year>
Reference-contexts: Even for K-bounded networks, the depth of mapping solutions computed by FlowMap may decrease if gates are further decomposed before mapping [4]. Several gate decomposition routines have been used for LUT-mapping. The tech_decomp and the speed_up in SIS [10] and the dmig in <ref> [1] </ref> focus on minimizing the number of levels in the decomposed network. They do not directly minimize the depth of the mapping solution. Chortle-d [6] computes depth-optimal gate decomposition and mapping solutions for tree networks (may be unbounded) but produces suboptimal results for general networks. <p> Since MC-FFD is faster than other three methods, DOGMA employs MC-FFD to solve the packing problem. We compare DOGMA with two decomposition routines: the tech_decomp in SIS [10] and the dmig in <ref> [1] </ref>. The tech_decomp routine is based on a balanced-tree heuristic which only minimizes the gate level locally. The dmig routine minimizes the gate level of the decomposed networks. The decomposed networks by the three algorithms are all mapped by CutMap [3], an enhancement of FlowMap.
Reference: [2] <author> Cong, J. and Y. Ding, </author> <title> ``An Optimal Technology Mapping Algorithm for Delay Optimization in Lookup-Table Based FPGA Designs,'' </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> Vol. 13, </volume> <pages> pp. 1-12, </pages> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: The delay of a network can be estimated by the number of levels (i.e. depth). Two factors affect the mapping solution depth: the gate decomposition before mapping and the mapping algorithm. Several LUT mapping algorithms have been proposed for depth minimization <ref> [6, 9, 2] </ref>. In particular, the FlowMap algorithm [2] guarantees a depth-optimal mapping solution for any K-bounded network. However, FlowMap can not be applied directly to unbounded networks. Gate decomposition can be classified into structural decomposition and Boolean decomposition. <p> The delay of a network can be estimated by the number of levels (i.e. depth). Two factors affect the mapping solution depth: the gate decomposition before mapping and the mapping algorithm. Several LUT mapping algorithms have been proposed for depth minimization [6, 9, 2]. In particular, the FlowMap algorithm <ref> [2] </ref> guarantees a depth-optimal mapping solution for any K-bounded network. However, FlowMap can not be applied directly to unbounded networks. Gate decomposition can be classified into structural decomposition and Boolean decomposition. The structural decomposition replaces multi-fanin (simple) gates by fanin trees while the Boolean decomposition decomposes the functionality of gates. <p> If N v is unbounded, let MMD N (v) = . PI nodes have a mapping depth of 0. The minimum mapping depth of a network N, denoted MMD (N), is the largest mapping depth among all PO nodes. Given a K-bounded network N, the FlowMap <ref> [2] </ref> algorithm computes MMD N (v) for every node v N in polynomial time. A cut in N v is a partition (X v ,X hh v ) of nodes in N v such that PI nodes are in X v and v X hh v . <p> The height of a cut, denoted height (X v ,X hh v ), is the maximum mapping depth for nodes in n (X v ,X v ). We have the following lemma based on results in <ref> [2] </ref>. Lemma 1 A node v has MMD N (v) = p if there is a K-feasible cut of height of p - 1 in N v but no K-feasible cut of height of p - 2 or smaller exists. <p> For example, Chortle-d [6] is an integrated approach (since it decomposes gates and maps LUTs in an interleaving manner) while dmig + FlowMap in <ref> [2] </ref> uses a two-step approach. We can show that the best two-step approach produces the same optimal mapping depth as that by the best integrated approach [4]. In this paper, we consider only independent gate decompositions in a two-step approach. <p> However, Chortle-d integrates gate decomposition with technology mapping, and computes mapping depth based on the partially generated LUT network. Since the fanin constraint is not a monotone clustering constraint <ref> [2] </ref>, Chortle-d may obtain inaccurate node mapping depth. Besides, Chortle-d enumerates all packing combinations for nodes on reconvergent paths, which is quite expensive. In contrast, DOGMA computes mapping depth as well as packs nodes into bins (to be discussed) using the network flow based computation. <p> On average, DOGMA allows CutMap to achieve 10% and 4% depth reduction comparing to tech_decomp and dmig, respectively. We compare DOGMA + CutMap with existing gate decomposition and depth-oriented mapping algorithms. The tested circuits are area-optimized MCNC benchmarks. The mappers TechMap-D [9], FlowMap <ref> [2] </ref>, and CutMap [3] are used for comparison. The dmig was used in [2] while the speed_up was used in [9] and [3] to prepare 2-input networks for technology mapping. The results are in Table 2. <p> We compare DOGMA + CutMap with existing gate decomposition and depth-oriented mapping algorithms. The tested circuits are area-optimized MCNC benchmarks. The mappers TechMap-D [9], FlowMap <ref> [2] </ref>, and CutMap [3] are used for comparison. The dmig was used in [2] while the speed_up was used in [9] and [3] to prepare 2-input networks for technology mapping. The results are in Table 2. Comparing results from [2, 3] with ours, we see gate decomposition routines speed_up, dmig, and DOGMA decompose gates equally well in terms of mapping depth. <p> The mappers TechMap-D [9], FlowMap [2], and CutMap [3] are used for comparison. The dmig was used in [2] while the speed_up was used in [9] and [3] to prepare 2-input networks for technology mapping. The results are in Table 2. Comparing results from <ref> [2, 3] </ref> with ours, we see gate decomposition routines speed_up, dmig, and DOGMA decompose gates equally well in terms of mapping depth. <p> In [9], TechMap-D obtained the smallest depth because it integrated logic synthesis into technology mapping. However, 35% more LUTs are generated comparing to DOGMA + CutMap. iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii [9] <ref> [2] </ref> [3] Ours iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii speed_up dmig speed_up DOGMA iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii TechMap-D FlowMap CutMap CutMap iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii Circuit LUT (d) LUT (d) LUT (d) LUT (d) iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii 5xp1 17 (2) 22 (3) 23 (3) 24 (3) 9symml 9 (3) 55 (5) 58 (5) 50 (4) C499 148 (4) 68 (4) 143 (5) 68 (4)
Reference: [3] <author> Cong, J. and Y.-Y. Hwang, </author> <title> ``Simultaneous Depth and Area Minimization in LUT-Based FPGA Mapping,'' </title> <booktitle> Proc. ACM 3rd Int'l Symp. on FPGA, </booktitle> <pages> pp. 68-74, </pages> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: The tech_decomp routine is based on a balanced-tree heuristic which only minimizes the gate level locally. The dmig routine minimizes the gate level of the decomposed networks. The decomposed networks by the three algorithms are all mapped by CutMap <ref> [3] </ref>, an enhancement of FlowMap. The results are shown in Table 1. We see CutMap produces the same or smaller depth for circuits decomposed by DOGMA. On average, DOGMA allows CutMap to achieve 10% and 4% depth reduction comparing to tech_decomp and dmig, respectively. <p> On average, DOGMA allows CutMap to achieve 10% and 4% depth reduction comparing to tech_decomp and dmig, respectively. We compare DOGMA + CutMap with existing gate decomposition and depth-oriented mapping algorithms. The tested circuits are area-optimized MCNC benchmarks. The mappers TechMap-D [9], FlowMap [2], and CutMap <ref> [3] </ref> are used for comparison. The dmig was used in [2] while the speed_up was used in [9] and [3] to prepare 2-input networks for technology mapping. The results are in Table 2. <p> We compare DOGMA + CutMap with existing gate decomposition and depth-oriented mapping algorithms. The tested circuits are area-optimized MCNC benchmarks. The mappers TechMap-D [9], FlowMap [2], and CutMap <ref> [3] </ref> are used for comparison. The dmig was used in [2] while the speed_up was used in [9] and [3] to prepare 2-input networks for technology mapping. The results are in Table 2. Comparing results from [2, 3] with ours, we see gate decomposition routines speed_up, dmig, and DOGMA decompose gates equally well in terms of mapping depth. <p> The mappers TechMap-D [9], FlowMap [2], and CutMap [3] are used for comparison. The dmig was used in [2] while the speed_up was used in [9] and [3] to prepare 2-input networks for technology mapping. The results are in Table 2. Comparing results from <ref> [2, 3] </ref> with ours, we see gate decomposition routines speed_up, dmig, and DOGMA decompose gates equally well in terms of mapping depth. <p> In [9], TechMap-D obtained the smallest depth because it integrated logic synthesis into technology mapping. However, 35% more LUTs are generated comparing to DOGMA + CutMap. iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii [9] [2] <ref> [3] </ref> Ours iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii speed_up dmig speed_up DOGMA iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii TechMap-D FlowMap CutMap CutMap iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii Circuit LUT (d) LUT (d) LUT (d) LUT (d) iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii 5xp1 17 (2) 22 (3) 23 (3) 24 (3) 9symml 9 (3) 55 (5) 58 (5) 50 (4) C499 148 (4) 68 (4) 143 (5) 68 (4) alu2
Reference: [4] <author> Cong, J. and Y.-Y. Hwang, </author> <title> ``Structural Gate Decomposition for Depth-Optimal Technology Mapping in LUT-based FPGA,'' </title> <institution> in UCLA Computer Science Dept. Tech. Report CSD-950045, </institution> <month> (December </month> <year> 1995). </year>
Reference-contexts: However, if the decomposition shown in Figure 1 (c) is carried out for node v, a mapping solution of depth equal to 2 can be obtained. Even for K-bounded networks, the depth of mapping solutions computed by FlowMap may decrease if gates are further decomposed before mapping <ref> [4] </ref>. Several gate decomposition routines have been used for LUT-mapping. The tech_decomp and the speed_up in SIS [10] and the dmig in [1] focus on minimizing the number of levels in the decomposed network. They do not directly minimize the depth of the mapping solution. <p> There are two issues related to the problem of gate decomposition. (1) A smaller depth might be obtained when several gates are decomposed simultaneously instead of independently <ref> [4] </ref>. This is because the intermediate nodes could be shared during the decomposition of multiple gates of the same functional type. (2) Gate decomposition can be performed before the mapping phase in a two-step approach or embedded into the mapping process being part of an integrated approach. <p> We can show that the best two-step approach produces the same optimal mapping depth as that by the best integrated approach <ref> [4] </ref>. In this paper, we consider only independent gate decompositions in a two-step approach. Nevertheless, our gate decomposition algorithm takes into account the impact of gate decomposition on mapping to obtain a decomposed network which is most suitable for FlowMap to achieve a minimum mapping depth. 3. <p> Complexity of SGD/K and K-SGD/K Problems In this section, we only state our complexity theorems. Complete proofs can be found in <ref> [4] </ref>. Theorem 1 The SGD/K problem is NP-hard for K 3. Theorem 2 The K-SGD/K problem is NP-hard for K 5. 4. <p> We can solve the problem by dynamic programming. By searching the minimal k (k = 2,3, . . . ), the min-height K-feasible bin packing problem can be solved optimally. We refer to this method as the MC-DP algorithm. The details of these algorithms can be found in <ref> [4] </ref>. 5. Experimental Results We have implemented the DOGMA algorithm with MC-FFD, MC-BFD, MC-MSD, and MC-DP packing methods using the C language and incorporated our implementation into the RASP FPGA synthesis system [5].
Reference: [5] <author> Cong, J., J. Peck, and Y. Ding, ``RASP: </author> <title> A General Logic Synthesis System for SRAM-based FPGAs,'' </title> <booktitle> Proc. ACM 4th Int'l Symp. on FPGA, </booktitle> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: The details of these algorithms can be found in [4]. 5. Experimental Results We have implemented the DOGMA algorithm with MC-FFD, MC-BFD, MC-MSD, and MC-DP packing methods using the C language and incorporated our implementation into the RASP FPGA synthesis system <ref> [5] </ref>. In our experiments, we optimize the MCNC benchmark circuits for area using standard SIS scripts, decompose them into simple gate networks, apply gate decomposition routines to obtain 2-input networks, and obtain the final LUT networks using a depth-optimal technology mapper. We choose K = 5 in the experiments.
Reference: [6] <author> Francis, R. J., J. Rose, and Z. Vranesic, </author> <title> ``Technology Mapping of Lookup Table-Based FPGAs for Performance,'' </title> <booktitle> Proc. IEEE Int'l Conf. on CAD, </booktitle> <pages> pp. 568-571, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: The delay of a network can be estimated by the number of levels (i.e. depth). Two factors affect the mapping solution depth: the gate decomposition before mapping and the mapping algorithm. Several LUT mapping algorithms have been proposed for depth minimization <ref> [6, 9, 2] </ref>. In particular, the FlowMap algorithm [2] guarantees a depth-optimal mapping solution for any K-bounded network. However, FlowMap can not be applied directly to unbounded networks. Gate decomposition can be classified into structural decomposition and Boolean decomposition. <p> Several gate decomposition routines have been used for LUT-mapping. The tech_decomp and the speed_up in SIS [10] and the dmig in [1] focus on minimizing the number of levels in the decomposed network. They do not directly minimize the depth of the mapping solution. Chortle-d <ref> [6] </ref> computes depth-optimal gate decomposition and mapping solutions for tree networks (may be unbounded) but produces suboptimal results for general networks. In this paper, we study the structural gate decomposition problem to decompose gates in a general network such that a mapping solution of minimum depth can be obtained. <p> This is because the intermediate nodes could be shared during the decomposition of multiple gates of the same functional type. (2) Gate decomposition can be performed before the mapping phase in a two-step approach or embedded into the mapping process being part of an integrated approach. For example, Chortle-d <ref> [6] </ref> is an integrated approach (since it decomposes gates and maps LUTs in an interleaving manner) while dmig + FlowMap in [2] uses a two-step approach. We can show that the best two-step approach produces the same optimal mapping depth as that by the best integrated approach [4].
Reference: [7] <author> Garey, M. and D. Johnson, </author> <title> Computer and Intractability: A Guide to the Theory of NP-Completeness, </title> <publisher> Freeman, </publisher> <address> San Francisco (1979). </address>
Reference-contexts: The third method is the maximal-share-decreasing (MC-MSD) heuristic which packs nodes that can maximally share a cut together. The fourth method is inspired by the dynamic programming approach for the number partitioning problem <ref> [7] </ref>. Instead of partitioning numbers, we ask whether there is a way to partition the nodes in S p into k subsets X 1 ,X 2 , . . . ,X k such that TC p (X i ) K (1 i k).
Reference: [8] <author> Horowitz, E. and S. Sahni, </author> <title> Fundamentals of Computer Algorithms, </title> <publisher> Computer Science Press, </publisher> <address> Potomac, Maryland (1978). </address>
Reference-contexts: Nodes are packed in a decreasing order of individual cut sizes. The first two heuristics, named MC-FFD and MC-BFD, to the min-height K-feasible bin packing problem are based on the first-fit-decreasing (FFD) and best-fit-decreasing (BFD), which are two heuristics for the bin packing problem <ref> [8] </ref>. The third method is the maximal-share-decreasing (MC-MSD) heuristic which packs nodes that can maximally share a cut together. The fourth method is inspired by the dynamic programming approach for the number partitioning problem [7].
Reference: [9] <author> Sawkar, P. and D. Thomas, </author> <title> ``Performance Directed Technology Mapping for Look-Up Table Based FPGAs,'' </title> <booktitle> Proc. 30th ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 208-212, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The delay of a network can be estimated by the number of levels (i.e. depth). Two factors affect the mapping solution depth: the gate decomposition before mapping and the mapping algorithm. Several LUT mapping algorithms have been proposed for depth minimization <ref> [6, 9, 2] </ref>. In particular, the FlowMap algorithm [2] guarantees a depth-optimal mapping solution for any K-bounded network. However, FlowMap can not be applied directly to unbounded networks. Gate decomposition can be classified into structural decomposition and Boolean decomposition. <p> On average, DOGMA allows CutMap to achieve 10% and 4% depth reduction comparing to tech_decomp and dmig, respectively. We compare DOGMA + CutMap with existing gate decomposition and depth-oriented mapping algorithms. The tested circuits are area-optimized MCNC benchmarks. The mappers TechMap-D <ref> [9] </ref>, FlowMap [2], and CutMap [3] are used for comparison. The dmig was used in [2] while the speed_up was used in [9] and [3] to prepare 2-input networks for technology mapping. The results are in Table 2. <p> We compare DOGMA + CutMap with existing gate decomposition and depth-oriented mapping algorithms. The tested circuits are area-optimized MCNC benchmarks. The mappers TechMap-D <ref> [9] </ref>, FlowMap [2], and CutMap [3] are used for comparison. The dmig was used in [2] while the speed_up was used in [9] and [3] to prepare 2-input networks for technology mapping. The results are in Table 2. Comparing results from [2, 3] with ours, we see gate decomposition routines speed_up, dmig, and DOGMA decompose gates equally well in terms of mapping depth. <p> In <ref> [9] </ref>, TechMap-D obtained the smallest depth because it integrated logic synthesis into technology mapping. However, 35% more LUTs are generated comparing to DOGMA + CutMap. iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii [9] [2] [3] Ours iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii speed_up dmig speed_up DOGMA iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii TechMap-D FlowMap CutMap CutMap iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii Circuit LUT (d) LUT (d) LUT (d) LUT (d) iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii <p> In <ref> [9] </ref>, TechMap-D obtained the smallest depth because it integrated logic synthesis into technology mapping. However, 35% more LUTs are generated comparing to DOGMA + CutMap. iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii [9] [2] [3] Ours iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii speed_up dmig speed_up DOGMA iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii TechMap-D FlowMap CutMap CutMap iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii Circuit LUT (d) LUT (d) LUT (d) LUT (d) iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii 5xp1 17 (2) 22 (3) 23 (3) 24 (3) 9symml 9 (3) 55 (5) 58 (5) 50 (4) C499 148 (4) 68 (4) 143 (5) 68
Reference: [10] <author> Sentovich, E., K. Singh, L. Lavagno, C. Moon, R. Murgai, A. Saldanha, H. Savoj, P. Stephen, R. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> ``SIS: A System for Sequential Circuit Synthesis,'' </title> <note> U.C.Berkeley Technical Report UCB/ERL M92/41, </note> <month> May, </month> <year> 1992. </year>
Reference-contexts: Even for K-bounded networks, the depth of mapping solutions computed by FlowMap may decrease if gates are further decomposed before mapping [4]. Several gate decomposition routines have been used for LUT-mapping. The tech_decomp and the speed_up in SIS <ref> [10] </ref> and the dmig in [1] focus on minimizing the number of levels in the decomposed network. They do not directly minimize the depth of the mapping solution. Chortle-d [6] computes depth-optimal gate decomposition and mapping solutions for tree networks (may be unbounded) but produces suboptimal results for general networks. <p> Since MC-FFD is faster than other three methods, DOGMA employs MC-FFD to solve the packing problem. We compare DOGMA with two decomposition routines: the tech_decomp in SIS <ref> [10] </ref> and the dmig in [1]. The tech_decomp routine is based on a balanced-tree heuristic which only minimizes the gate level locally. The dmig routine minimizes the gate level of the decomposed networks. The decomposed networks by the three algorithms are all mapped by CutMap [3], an enhancement of FlowMap.
References-found: 10

