URL: http://www.psrg.lcs.mit.edu/Projects/SFS/newsfs.ps
Refering-URL: http://www.psrg.lcs.mit.edu/
Root-URL: 
Title: Semantic File Systems  
Author: David K. Gifford, Pierre Jouvelot Mark A. Sheldon, James W. O'Toole, Jr. 
Affiliation: Programming Systems Research Group MIT Laboratory for Computer Science  
Abstract: A semantic file system is an information storage system that provides flexible associative access to the system's contents by automatically extracting attributes from files with file type specific transducers. Associative access is provided by a conservative extension to existing tree-structured file system protocols, and by protocols that are designed specifically for content based access. Compatiblity with existing file system protocols is provided by introducing the concept of a virtual directory. Virtual directory names are interpreted as queries, and thus provide flexible associative access to files and directories in a manner compatible with existing software. Rapid attribute-based access to file system contents is implemented by automatic extraction and indexing of key properties of file system objects. The automatic indexing of files and directories is called "semantic" because user programmable transducers use information about the semantics of updated file system objects to extract the properties for indexing. Experimental results from a semantic file system implementation support the thesis that semantic file systems present a more effective storage abstraction than do traditional tree structured file systems for information sharing and command level programming. 
Abstract-found: 1
Intro-found: 1
Reference: [BP88] <author> Brian N. Bershad and C. Brian Pinkerton. Watchdogs: </author> <title> Extending the UNIX file system. </title> <booktitle> In USENIX Association 1988 Winter Conference Proceedings, </booktitle> <pages> pages 267-275, </pages> <address> Dallas, Texas, </address> <month> February </month> <year> 1988. </year>
Reference-contexts: process file system [Kil84], enabling process observation and control via file operations. * Services appear as special directories in Plan 9 [PPTT90], enabling service access in a distributed system through file system operations in the service's name space. * Arbitrary semantics can be associated with files and directories using Watchdogs <ref> [BP88] </ref>, Pseudo Devices [WO88], and Filters [Neu90], enabling file system extensions such as terminal drivers, network protocols, X servers, file access control, file compression, mail notification, user specific directory views, heterogeneous file access, and service access. * The ATTIC system [CG91] uses a modified NFS server to provide transparent access to
Reference: [Cat83] <author> R. G. G. Cattell. </author> <title> Design and implementation of a relationship-entity-datum data model. </title> <type> Technical Report CSL-83-4, </type> <institution> Xerox PARC, Palo Alto, California, </institution> <month> May </month> <year> 1983. </year>
Reference-contexts: In principle this would permit access by time, frame number, or content [Nee91]. * The data model underlying a semantic file system could be enhanced. For example, an entity-relationship model <ref> [Cat83] </ref> would provide more expressive power than sim ple attribute based retrieval. * The entities indexed by a semantic file system could include a wide variety of object types, including I/O devices and file servers.
Reference: [CCI88] <author> CCITT. </author> <title> The Directory Overview of Concepts, Models and Services. Recommendation X.500, </title> <year> 1988. </year>
Reference-contexts: NSE is a network transparent software development tool that allows different views of a file system hierarchy called environments to be de-fined. Unlike virtual directories, these views must be explicitly created before being accessed. * Wide-area naming systems such as X.500 <ref> [CCI88] </ref>, Profile [Pet88], and the Networked Resource Discovery Project [Sch89] provide attribute-based access to a wide variety of objects, but they are not integrated into a file system nor do they provide automatic attribute based access to the contents of a file system. <p> For example, an entity-relationship model [Cat83] would provide more expressive power than sim ple attribute based retrieval. * The entities indexed by a semantic file system could include a wide variety of object types, including I/O devices and file servers. Wide-area naming systems such as X.500 <ref> [CCI88] </ref> could be presented in terms of virtual directories. * A confederation of semantic file systems, possibly numbering in the thousands, can be organized into an semantic library system.
Reference: [CG91] <author> Vincent Cate and Thomas Gross. </author> <title> Combining the concepts of compression and caching for a two-level filesystem. </title> <booktitle> In Fourth International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 200-211, </pages> <address> Santa Clara, California, </address> <month> April </month> <year> 1991. </year> <note> ACM. </note>
Reference-contexts: semantics can be associated with files and directories using Watchdogs [BP88], Pseudo Devices [WO88], and Filters [Neu90], enabling file system extensions such as terminal drivers, network protocols, X servers, file access control, file compression, mail notification, user specific directory views, heterogeneous file access, and service access. * The ATTIC system <ref> [CG91] </ref> uses a modified NFS server to provide transparent access to automatically com pressed files. author: smith exports: init_xdr_rcv exports: move_xdr_rep imports: malloc from: smith to: jones subject: meeting text: fine author: smith section: introduction text: beginning text: distributed Document Transducer Mail Transducer Object Transducer move_xdr.o prop.tex mail.txt 3 Semantic File
Reference: [CL89] <author> Brent Callaghan and Tom Lyon. </author> <booktitle> The auto-mounter. In USENIX Association 1989 Winter Conference Proceedings, </booktitle> <year> 1989. </year>
Reference-contexts: special files [RT74] in the /dev directory, enabling them to be used as ordinary files from UNIX applications. * UNIX System III named pipes [Roc85, p. 159f] appear as special files, enabling programs to rendezvous using file system operations. * File systems appear as special directories in Automount daemon directories <ref> [CL89, Pen90, PW90] </ref>, enabling the binding of a name to a file system to be computed at the time of reference. * Processes appear as special directories in Killian's process file system [Kil84], enabling process observation and control via file operations. * Services appear as special directories in Plan 9 [PPTT90],
Reference: [Cla90] <institution> Claris Corporation, </institution> <address> Santa Clara, California, </address> <month> January </month> <year> 1990. </year> <title> News Release. </title>
Reference-contexts: These systems all create indexes to reduce search time. On Location automatically indexes files in the background, while Magellan and the Digital Librarian require users to explicitly create indexes. Both On Location and the Digital Librarian permit users to add appropriate keyword generation programs <ref> [Cla90, NC89b] </ref> to index new types of files.
Reference: [Cor] <author> Lotus Corporation. </author> <title> Lotus Magellan: Quick Launch. Product tutorial, </title> <publisher> Lotus Corporation, </publisher> <address> Cambridge, Massachusetts. Part number 35115. </address>
Reference-contexts: The previous research we build upon includes work on personal computer indexing systems, information retrieval systems, distributed file systems, new naming models for file systems, and wide-area naming systems: * Personal computer indexing systems such as On Location [Tec90], Magellan <ref> [Cor] </ref>, and the Digital Librarian [NC89b, NC89a] provide window-based file system browsers that permit word-based associative access to file system contents. Magellan and the Digital Librarian permit searches based upon boolean combinations of words, while On Location is limited to conjunctions of words.
Reference: [DANO91] <author> Peter B. Danzig, Jongsuk Ahn, John Noll, and Katia Obraczka. </author> <title> Distributed indexing: A scalable mechanism for distributed information retrieval. </title> <type> Technical Report USC-TR 91-06, </type> <institution> University of Southern California, Computer Science Department, </institution> <year> 1991. </year>
Reference-contexts: The WAIS system permits information at remote sites to be queried, but relies upon the user to choose an appropriate remote host from a directory of services [KM91, Ste91]. Distributed information retrieval systems <ref> [GCS87, DANO91] </ref> perform query routing based upon database content labels to ensure that all rele vant hosts are contacted in response to a query. * Distributed file systems [Sun89, Kaz88] provide remote access to files with tree structured names.
Reference: [GCS87] <author> David K. Gifford, Robert G. Cote, and David A. Segal. </author> <title> Walter user's manual. </title> <type> Technical Report MIT/LCS/TR-399, </type> <institution> M.I.T. Laboratory for Computer Science, </institution> <month> September </month> <year> 1987. </year>
Reference-contexts: Application programming interfaces that permit remote access include specialized protocols for information retrieval [NIS91], and remote procedure call based interfaces <ref> [GCS87] </ref>. It is also possible to export the facilities of a semantic file system without introducing any new interfaces. This can be accomplished by extending the naming semantics of files and directories to support associative access. <p> The WAIS system permits information at remote sites to be queried, but relies upon the user to choose an appropriate remote host from a directory of services [KM91, Ste91]. Distributed information retrieval systems <ref> [GCS87, DANO91] </ref> perform query routing based upon database content labels to ensure that all rele vant hosts are contacted in response to a query. * Distributed file systems [Sun89, Kaz88] provide remote access to files with tree structured names.
Reference: [GLB85] <author> David K. Gifford, John M. Lucassen, and Stephen T. </author> <title> Berlin. An architecture for large scale information systems. </title> <booktitle> In 10th Symposium on Operating System Principles, </booktitle> <pages> pages 161-170. </pages> <publisher> ACM, </publisher> <month> December </month> <year> 1985. </year>
Reference-contexts: A semantic library system is implemented by servers that use content based routing <ref> [GLB85] </ref> to direct a single user request to one or more relevant semantic file systems.
Reference: [GMT86] <author> Ferdinando Gallo, Regis Minot, and Ian Thomas. </author> <title> The object management system of PCTE as a software engineering database management system. </title> <booktitle> In Second ACM SIG-SOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <pages> pages 12-15. </pages> <publisher> ACM, </publisher> <month> December </month> <year> 1986. </year>
Reference-contexts: Existing UNIX tools such as grep and find [Gro86] are often used to per form associative searches in distributed file systems. * New naming models for file systems include the Portable Common Tool Environment (PCTE) <ref> [GMT86] </ref>, the Property List DIRectory system (PLDIR) [Mog86], Virtual Systems [Neu90] and Sun's Network Software Environment (NSE) [SC88]. PCTE provides an entity-relationship database that models the attributes of objects including files. PCTE has been implemented as a compatible extension to UNIX.
Reference: [GO91] <author> David K. Gifford and James W. O'Toole. </author> <title> Intelligent file systems for object repositories. </title> <booktitle> In Operating Systems of the 90s and Beyond, Saarbrucken, </booktitle> <address> Germany, </address> <month> July </month> <year> 1991. </year> <institution> Internationales Begegnales- und Forschungs-zentrum fur Informatik, </institution> <note> Schloss Dagstuhl-Geschaftsstelle. To be published by Springer-Verlag. </note>
Reference-contexts: We are exploring also how existing applications could access object repositories via a virtual directory interface. It is possible to extend the semantics of a semantic file system to include access to individual entities in a manner suitable for an object repository <ref> [GO91] </ref>. * Relevance feedback and query results could be added by introducing new virtual directories. The implementation of real-time indexing may require a substantial amount of computing power at a semantic file server. We are investigating how to optimize the task of real-time indexing in order to minimize this load.
Reference: [Gro86] <institution> Computer Systems Research Group. </institution> <note> UNIX User's Reference Manual. </note> <institution> 4.3 Berkeley Software Distribution, Berkeley, California, </institution> <month> April </month> <year> 1986. </year> <note> Virtual VAX-11 Version. </note>
Reference-contexts: These systems have enabled file sharing among groups of people and over wide geographic areas. Existing UNIX tools such as grep and find <ref> [Gro86] </ref> are often used to per form associative searches in distributed file systems. * New naming models for file systems include the Portable Common Tool Environment (PCTE) [GMT86], the Property List DIRectory system (PLDIR) [Mog86], Virtual Systems [Neu90] and Sun's Network Software Environment (NSE) [SC88].
Reference: [Inf90] <institution> Information Dimensions, Inc. </institution> <month> BASISplus. </month> <title> The Key To Managing The World Of Information. Information Dimensions, </title> <publisher> Inc., </publisher> <address> Dublin, Ohio, </address> <year> 1990. </year> <title> Product description. </title>
Reference-contexts: For example, files can be located based upon transducer generated attributes such as author, exported or imported procedures, words contained, type, and title. A semantic file system provides both a user interface and an application programming interface to its associative access facilities. User interfaces based upon browsers <ref> [Inf90, Ver90] </ref> have proven to be effective for query based access to information, and we expect browsers to be offered by most semantic file system implementations. Application programming interfaces that permit remote access include specialized protocols for information retrieval [NIS91], and remote procedure call based interfaces [GCS87]. <p> Both On Location and the Digital Librarian permit users to add appropriate keyword generation programs [Cla90, NC89b] to index new types of files. However, Magellan, On Location, and the Digital Librarian are limited to a list of words for file description. * Information retrieval systems such as Basis <ref> [Inf90] </ref>, Verity [Ver90], and Boss DMS [Log91] extend the semantics of personal computer indexing systems by adding field specific queries. Fields that can be queried include document category, author, type, title, identifier, status, date, and text contents.
Reference: [Kaz88] <author> Michael Leon Kazar. </author> <title> Synchronization and caching issues in the Andrew File System. </title> <booktitle> In USENIX Association 1988 Winter Conference Proceedings, </booktitle> <pages> pages 31-43, </pages> <year> 1988. </year>
Reference-contexts: Because semantic file systems are compatible with existing tree structured file systems, implementations of semantic file systems can be fully compatible with existing network file system protocols such as NFS [SGK + 85, Sun88] and AFS <ref> [Kaz88] </ref>. NFS compatibility permits existing client machines to use the indexing and associative access features of a semantic file system without modification. Files stored in a semantic file system via NFS will be automatically indexed, and query result sets will appear as virtual directories in the NFS name space. <p> Distributed information retrieval systems [GCS87, DANO91] perform query routing based upon database content labels to ensure that all rele vant hosts are contacted in response to a query. * Distributed file systems <ref> [Sun89, Kaz88] </ref> provide remote access to files with tree structured names. These systems have enabled file sharing among groups of people and over wide geographic areas.
Reference: [Kil84] <author> T. J. Killian. </author> <title> Processes as files. </title> <booktitle> In USENIX Association 1984 Summer Conference Proceedings, </booktitle> <address> Salt Lake City, Utah, </address> <year> 1984. </year>
Reference-contexts: programs to rendezvous using file system operations. * File systems appear as special directories in Automount daemon directories [CL89, Pen90, PW90], enabling the binding of a name to a file system to be computed at the time of reference. * Processes appear as special directories in Killian's process file system <ref> [Kil84] </ref>, enabling process observation and control via file operations. * Services appear as special directories in Plan 9 [PPTT90], enabling service access in a distributed system through file system operations in the service's name space. * Arbitrary semantics can be associated with files and directories using Watchdogs [BP88], Pseudo Devices [WO88],
Reference: [Kle86] <author> S. R. Kleiman. Vnodes: </author> <title> An architecture for multiple file system types in Sun UNIX. </title> <booktitle> In USENIX Association 1986 Winter Conference Proceedings, </booktitle> <pages> pages 238-247, </pages> <year> 1986. </year>
Reference-contexts: The file server process could be integrated into the kernel by a VFS based implementation <ref> [Kle86] </ref> of an semantic file system. We chose to implement our prototype using a user level NFS server to simplify development.
Reference: [KM91] <author> Brewster Kahle and Art Medlar. </author> <title> An information system for corporate users: Wide area information servers. </title> <type> Technical Report TMC-199, </type> <institution> Thinking Machines, Inc., </institution> <month> April </month> <year> 1991. </year> <note> Version 3. </note>
Reference-contexts: The WAIS system permits information at remote sites to be queried, but relies upon the user to choose an appropriate remote host from a directory of services <ref> [KM91, Ste91] </ref>. Distributed information retrieval systems [GCS87, DANO91] perform query routing based upon database content labels to ensure that all rele vant hosts are contacted in response to a query. * Distributed file systems [Sun89, Kaz88] provide remote access to files with tree structured names.
Reference: [Leg89] <institution> Legato Systems, Inc. Nhfsstone. Software package. Legato Systems, Inc., Palo Alto, California, </institution> <year> 1989. </year>
Reference-contexts: To determine the increased latency of overlaid NFS operations introduced by interposing our SFS server between the client and the native file system, we used the nhfsstone benchmark <ref> [Leg89] </ref> at low loads. The delays observed from an unmodified client machine were smaller than the variation in latencies of the native NFS operations. Preliminary measurements show that lookup operations are delayed by 2 ms on average, and operations that generate update notifications incur a larger delay.
Reference: [Les] <author> M. E. Lesk. </author> <title> Some applications of inverted indexes on the UNIX system. UNIX Supplementary Document, </title> <type> Section 30. </type>
Reference-contexts: If no special transducer is found a default transducer is used. The output of the transducer is fed to the Indexer module that inserts the computed attributes into the index. Indexing and retrieval are based upon Peter Weinberger's BTree package [Wei] and an adapted version of the refer <ref> [Les] </ref> software to maintain the mappings between attributes and objects. * The mount daemon is contacted to determine the root file handle of the underlying UNIX file system.
Reference: [Log91] <author> Boss Logic, Inc. </author> <title> Boss DMS development specification. Technical documentation, Boss Logic, </title> <publisher> Inc., Fairfield, </publisher> <address> IA, </address> <month> February </month> <year> 1991. </year>
Reference-contexts: However, Magellan, On Location, and the Digital Librarian are limited to a list of words for file description. * Information retrieval systems such as Basis [Inf90], Verity [Ver90], and Boss DMS <ref> [Log91] </ref> extend the semantics of personal computer indexing systems by adding field specific queries. Fields that can be queried include document category, author, type, title, identifier, status, date, and text contents.
Reference: [Mog86] <author> Jeffrey C. Mogul. </author> <title> Representing information about files. </title> <type> Technical Report 86-1103, </type> <institution> Stanford Univ. Department of CS, </institution> <month> March </month> <year> 1986. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: Existing UNIX tools such as grep and find [Gro86] are often used to per form associative searches in distributed file systems. * New naming models for file systems include the Portable Common Tool Environment (PCTE) [GMT86], the Property List DIRectory system (PLDIR) <ref> [Mog86] </ref>, Virtual Systems [Neu90] and Sun's Network Software Environment (NSE) [SC88]. PCTE provides an entity-relationship database that models the attributes of objects including files. PCTE has been implemented as a compatible extension to UNIX. <p> The Property List DIRectory system implements a file system model designed around file properties and offers a Unix front-end user interface. Similarly, Virtual Systems permit users to hand-craft customized views of services, files, and directories. However, neither system provides automatic attribute extraction (although <ref> [Mog86] </ref> alludes to it as a possible extension) or attribute-based access to their contents. NSE is a network transparent software development tool that allows different views of a file system hierarchy called environments to be de-fined.
Reference: [NC89a] <institution> NeXT Corporation. 1.0 release notes: Indexing. NeXT Corporation, Palo Alto, California, </institution> <year> 1989. </year>
Reference-contexts: The previous research we build upon includes work on personal computer indexing systems, information retrieval systems, distributed file systems, new naming models for file systems, and wide-area naming systems: * Personal computer indexing systems such as On Location [Tec90], Magellan [Cor], and the Digital Librarian <ref> [NC89b, NC89a] </ref> provide window-based file system browsers that permit word-based associative access to file system contents. Magellan and the Digital Librarian permit searches based upon boolean combinations of words, while On Location is limited to conjunctions of words. All three systems rank matching files using a relevance score.
Reference: [NC89b] <author> NeXT Corporation. </author> <title> Text indexing facilities on the NeXT computer. NeXT Corporation, </title> <address> Palo Alto, California, </address> <year> 1989. </year> <note> from 1.0 Release Notes. </note>
Reference-contexts: The previous research we build upon includes work on personal computer indexing systems, information retrieval systems, distributed file systems, new naming models for file systems, and wide-area naming systems: * Personal computer indexing systems such as On Location [Tec90], Magellan [Cor], and the Digital Librarian <ref> [NC89b, NC89a] </ref> provide window-based file system browsers that permit word-based associative access to file system contents. Magellan and the Digital Librarian permit searches based upon boolean combinations of words, while On Location is limited to conjunctions of words. All three systems rank matching files using a relevance score. <p> These systems all create indexes to reduce search time. On Location automatically indexes files in the background, while Magellan and the Digital Librarian require users to explicitly create indexes. Both On Location and the Digital Librarian permit users to add appropriate keyword generation programs <ref> [Cla90, NC89b] </ref> to index new types of files.
Reference: [Nee91] <author> Roger Needham, </author> <year> 1991. </year> <type> Personal communication. </type>
Reference-contexts: In principle this would permit access by time, frame number, or content <ref> [Nee91] </ref>. * The data model underlying a semantic file system could be enhanced.
Reference: [Neu90] <author> B. Clifford Neuman. </author> <title> The virtual system model: A scalable approach to organizing large systems. </title> <type> Technical Report 90-05-01, </type> <institution> Univ. of Washington CS Department, </institution> <month> May </month> <year> 1990. </year> <type> Thesis Proposal. </type>
Reference-contexts: Existing UNIX tools such as grep and find [Gro86] are often used to per form associative searches in distributed file systems. * New naming models for file systems include the Portable Common Tool Environment (PCTE) [GMT86], the Property List DIRectory system (PLDIR) [Mog86], Virtual Systems <ref> [Neu90] </ref> and Sun's Network Software Environment (NSE) [SC88]. PCTE provides an entity-relationship database that models the attributes of objects including files. PCTE has been implemented as a compatible extension to UNIX. <p> observation and control via file operations. * Services appear as special directories in Plan 9 [PPTT90], enabling service access in a distributed system through file system operations in the service's name space. * Arbitrary semantics can be associated with files and directories using Watchdogs [BP88], Pseudo Devices [WO88], and Filters <ref> [Neu90] </ref>, enabling file system extensions such as terminal drivers, network protocols, X servers, file access control, file compression, mail notification, user specific directory views, heterogeneous file access, and service access. * The ATTIC system [CG91] uses a modified NFS server to provide transparent access to automatically com pressed files. author: smith
Reference: [NIS91] <institution> Ansi z39.50 version 2. National Information Standards Organization, Bethesda, Maryland, </institution> <month> January </month> <year> 1991. </year> <note> Second Draft. </note>
Reference-contexts: User interfaces based upon browsers [Inf90, Ver90] have proven to be effective for query based access to information, and we expect browsers to be offered by most semantic file system implementations. Application programming interfaces that permit remote access include specialized protocols for information retrieval <ref> [NIS91] </ref>, and remote procedure call based interfaces [GCS87]. It is also possible to export the facilities of a semantic file system without introducing any new interfaces. This can be accomplished by extending the naming semantics of files and directories to support associative access.
Reference: [OCH + 85] <author> John K. Ousterhout, Herve Da Costa, David Harrison, John A. Kunze, Mike Kupfer, and James G. Thompson. </author> <title> A trace-driven analysis of the unix 4.2bsd file system. </title> <booktitle> In Symposium on Operating System Principles, </booktitle> <pages> pages 15-24. </pages> <publisher> ACM, </publisher> <month> December </month> <year> 1985. </year>
Reference-contexts: Incremental processing of updates will require additional read bandwidth approximately equal to the write traffic that actually occurs. Past studies of Unix file system activity <ref> [OCH + 85] </ref> indicate that update rates are low, and that most new data is deleted or overwritten quickly; thus, delaying slightly the processing of updates might reduce the additional bandwidth required by indexing.
Reference: [Pen90] <author> Jan-Simon Pendry. </author> <title> Amd | an automounter. </title> <institution> Department of Computing, Imperial College, </institution> <address> London, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: special files [RT74] in the /dev directory, enabling them to be used as ordinary files from UNIX applications. * UNIX System III named pipes [Roc85, p. 159f] appear as special files, enabling programs to rendezvous using file system operations. * File systems appear as special directories in Automount daemon directories <ref> [CL89, Pen90, PW90] </ref>, enabling the binding of a name to a file system to be computed at the time of reference. * Processes appear as special directories in Killian's process file system [Kil84], enabling process observation and control via file operations. * Services appear as special directories in Plan 9 [PPTT90],
Reference: [Pet88] <author> Larry Peterson. </author> <title> The Profile Naming Service. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(4) </volume> <pages> 341-364, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: NSE is a network transparent software development tool that allows different views of a file system hierarchy called environments to be de-fined. Unlike virtual directories, these views must be explicitly created before being accessed. * Wide-area naming systems such as X.500 [CCI88], Profile <ref> [Pet88] </ref>, and the Networked Resource Discovery Project [Sch89] provide attribute-based access to a wide variety of objects, but they are not integrated into a file system nor do they provide automatic attribute based access to the contents of a file system.
Reference: [PPTT90] <author> Rob Pike, Dave Presotto, Ken Thompson, and Howard Trickey. </author> <title> Plan 9 from Bell Labs. </title> <booktitle> UK UUG proceedings, </booktitle> <year> 1990. </year>
Reference-contexts: [CL89, Pen90, PW90], enabling the binding of a name to a file system to be computed at the time of reference. * Processes appear as special directories in Killian's process file system [Kil84], enabling process observation and control via file operations. * Services appear as special directories in Plan 9 <ref> [PPTT90] </ref>, enabling service access in a distributed system through file system operations in the service's name space. * Arbitrary semantics can be associated with files and directories using Watchdogs [BP88], Pseudo Devices [WO88], and Filters [Neu90], enabling file system extensions such as terminal drivers, network protocols, X servers, file access control,
Reference: [PW90] <author> Jan-Simon Pendry and Nick Williams. Amd: </author> <title> The 4.4 BSD automounter reference manual, De-cember 1990. Documentation for software revision 5.3 Alpha. </title>
Reference-contexts: special files [RT74] in the /dev directory, enabling them to be used as ordinary files from UNIX applications. * UNIX System III named pipes [Roc85, p. 159f] appear as special files, enabling programs to rendezvous using file system operations. * File systems appear as special directories in Automount daemon directories <ref> [CL89, Pen90, PW90] </ref>, enabling the binding of a name to a file system to be computed at the time of reference. * Processes appear as special directories in Killian's process file system [Kil84], enabling process observation and control via file operations. * Services appear as special directories in Plan 9 [PPTT90],
Reference: [Roc85] <author> Marc J. Rochkind. </author> <title> Advanced UNIX Programming. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1985. </year>
Reference-contexts: Examples of this approach include: * Devices in UNIX appear as special files [RT74] in the /dev directory, enabling them to be used as ordinary files from UNIX applications. * UNIX System III named pipes <ref> [Roc85, p. 159f] </ref> appear as special files, enabling programs to rendezvous using file system operations. * File systems appear as special directories in Automount daemon directories [CL89, Pen90, PW90], enabling the binding of a name to a file system to be computed at the time of reference. * Processes appear as
Reference: [RT74] <author> D. M. Ritchie and K. Thompson. </author> <title> The UNIX Time-Sharing System. </title> <journal> Comm. ACM, </journal> <volume> 17(7) </volume> <pages> 365-375, </pages> <month> July </month> <year> 1974. </year>
Reference-contexts: Previous research supports our view that overloading file system semantics can improve system uniformity and utility when compared with the alternative of creating a new interface that is incompatible with existing applications. Examples of this approach include: * Devices in UNIX appear as special files <ref> [RT74] </ref> in the /dev directory, enabling them to be used as ordinary files from UNIX applications. * UNIX System III named pipes [Roc85, p. 159f] appear as special files, enabling programs to rendezvous using file system operations. * File systems appear as special directories in Automount daemon directories [CL89, Pen90, PW90],
Reference: [Sal83] <author> Gerard Salton. </author> <title> Introduction to Modern Information Retrieval. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1983. </year>
Reference-contexts: (Section 4), present our experimental results (Section 5) and conclude with observations on other applications of virtual directories (Section 6). 2 Previous Work Associative access to on-line information was pioneered in early bibliographic retrieval systems where it was found to be of great value in locating information in large databases <ref> [Sal83] </ref>. The utility of associative access motivated its subsequent application to file and document management.
Reference: [SC88] <author> Sun Corporation. </author> <title> The Network Software Environment. </title> <type> Technical report, </type> <institution> Sun Computer Corporation, Mountain View, California, </institution> <year> 1988. </year>
Reference-contexts: tools such as grep and find [Gro86] are often used to per form associative searches in distributed file systems. * New naming models for file systems include the Portable Common Tool Environment (PCTE) [GMT86], the Property List DIRectory system (PLDIR) [Mog86], Virtual Systems [Neu90] and Sun's Network Software Environment (NSE) <ref> [SC88] </ref>. PCTE provides an entity-relationship database that models the attributes of objects including files. PCTE has been implemented as a compatible extension to UNIX.
Reference: [Sch89] <author> Michael F. Schwartz. </author> <title> The Networked Resource Discovery Project. </title> <booktitle> In Proceedings of the IFIP XI World Congress, </booktitle> <pages> pages 827-832. </pages> <publisher> IFIP, </publisher> <month> August </month> <year> 1989. </year>
Reference-contexts: Unlike virtual directories, these views must be explicitly created before being accessed. * Wide-area naming systems such as X.500 [CCI88], Profile [Pet88], and the Networked Resource Discovery Project <ref> [Sch89] </ref> provide attribute-based access to a wide variety of objects, but they are not integrated into a file system nor do they provide automatic attribute based access to the contents of a file system.
Reference: [SGK + 85] <author> R. Sandberg, D. Goldberg, S. Kleiman, D. Walsh, and B. Lyon. </author> <title> Design and implementation of the Sun Network Filesystem. </title> <booktitle> In USENIX Association 1985 Summer Conference Proceedings, </booktitle> <pages> pages 119-130, </pages> <year> 1985. </year>
Reference-contexts: Because semantic file systems are compatible with existing tree structured file systems, implementations of semantic file systems can be fully compatible with existing network file system protocols such as NFS <ref> [SGK + 85, Sun88] </ref> and AFS [Kaz88]. NFS compatibility permits existing client machines to use the indexing and associative access features of a semantic file system without modification. <p> Entry name conflicts are resolved by assigning nonce names to entries. * The contents of a field: virtual directory is the set of fields in use. 4 Semantic File System Implementation We have built a semantic file system that implements the NFS <ref> [SGK + 85, Sun89] </ref> protocol as its external interface. To use the search facilities of our semantic file system, an Internet client can simply mount our file system at a desired point and begin using virtual directory names.
Reference: [SK86] <author> C. Stanfill and B. Kahle. </author> <title> Parallel Free-Text Search on the Connection Machine System. </title> <journal> Comm. ACM, </journal> <pages> pages 1229-1239, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: The implementation of real-time indexing may require a substantial amount of computing power at a semantic file server. We are investigating how to optimize the task of real-time indexing in order to minimize this load. Another area of research is exploring how massive parallelism <ref> [SK86] </ref> might replace indexing. An interesting limiting case of our design is a system that makes an underlying tree structured naming system superfluous. In such a system all directories would be computed upon demand, including directories that correspond to traditional tree structured file names.
Reference: [Sta87] <author> Richard Stallman. </author> <title> GNU Emacs Manual. Free Software Foundation, </title> <address> Cambridge, MA, </address> <month> March </month> <year> 1987. </year> <note> Sixth Edition, Version 18. </note>
Reference-contexts: We have found the virtual directory interface to be easy to use. (We were immediately able to use the GNU Emacs directory editor DIRED <ref> [Sta87] </ref> to submit queries and browse the results. No code modification was required.) At least two users in our group reexamined their file protections in view of the ease with which other users could locate interesting files in the system.
Reference: [Ste91] <author> Richard Marlon Stein. </author> <title> Browsing through ter-abytes: Wide-area information servers open a new frontier in personal and corporate information services. </title> <journal> Byte, </journal> <pages> pages 157-164, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: The WAIS system permits information at remote sites to be queried, but relies upon the user to choose an appropriate remote host from a directory of services <ref> [KM91, Ste91] </ref>. Distributed information retrieval systems [GCS87, DANO91] perform query routing based upon database content labels to ensure that all rele vant hosts are contacted in response to a query. * Distributed file systems [Sun89, Kaz88] provide remote access to files with tree structured names.
Reference: [Sun88] <institution> Sun Microsystems, Sunnyvale, California. Network Programming, </institution> <month> May </month> <year> 1988. </year> <title> Part Number 800-1779-10. </title>
Reference-contexts: Because semantic file systems are compatible with existing tree structured file systems, implementations of semantic file systems can be fully compatible with existing network file system protocols such as NFS <ref> [SGK + 85, Sun88] </ref> and AFS [Kaz88]. NFS compatibility permits existing client machines to use the indexing and associative access features of a semantic file system without modification.
Reference: [Sun89] <author> NFS: </author> <title> Network file system protocol specification. Sun Microsystems, Network Working Group, Request for Comments (RFC 1094), </title> <month> March </month> <year> 1989. </year> <note> Version 2. </note>
Reference-contexts: Distributed information retrieval systems [GCS87, DANO91] perform query routing based upon database content labels to ensure that all rele vant hosts are contacted in response to a query. * Distributed file systems <ref> [Sun89, Kaz88] </ref> provide remote access to files with tree structured names. These systems have enabled file sharing among groups of people and over wide geographic areas. <p> Entry name conflicts are resolved by assigning nonce names to entries. * The contents of a field: virtual directory is the set of fields in use. 4 Semantic File System Implementation We have built a semantic file system that implements the NFS <ref> [SGK + 85, Sun89] </ref> protocol as its external interface. To use the search facilities of our semantic file system, an Internet client can simply mount our file system at a desired point and begin using virtual directory names.
Reference: [Tec90] <author> ON Technology. </author> <title> ON Technology, Inc. announces On Location for the Apple Macintosh computer. News Release ON Technology, </title> <publisher> Inc., </publisher> <address> Cambridge, Massachusetts, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: The previous research we build upon includes work on personal computer indexing systems, information retrieval systems, distributed file systems, new naming models for file systems, and wide-area naming systems: * Personal computer indexing systems such as On Location <ref> [Tec90] </ref>, Magellan [Cor], and the Digital Librarian [NC89b, NC89a] provide window-based file system browsers that permit word-based associative access to file system contents. Magellan and the Digital Librarian permit searches based upon boolean combinations of words, while On Location is limited to conjunctions of words.
Reference: [Ver90] <author> Verity. </author> <title> Topic. Product description, </title> <address> Verity, Mountain View, California, </address> <year> 1990. </year>
Reference-contexts: For example, files can be located based upon transducer generated attributes such as author, exported or imported procedures, words contained, type, and title. A semantic file system provides both a user interface and an application programming interface to its associative access facilities. User interfaces based upon browsers <ref> [Inf90, Ver90] </ref> have proven to be effective for query based access to information, and we expect browsers to be offered by most semantic file system implementations. Application programming interfaces that permit remote access include specialized protocols for information retrieval [NIS91], and remote procedure call based interfaces [GCS87]. <p> However, Magellan, On Location, and the Digital Librarian are limited to a list of words for file description. * Information retrieval systems such as Basis [Inf90], Verity <ref> [Ver90] </ref>, and Boss DMS [Log91] extend the semantics of personal computer indexing systems by adding field specific queries. Fields that can be queried include document category, author, type, title, identifier, status, date, and text contents.
Reference: [Wei] <author> Peter Weinberger. </author> <title> CBT Program documentation. </title> <institution> Bell Laboratories. </institution>
Reference-contexts: C source file, object file, directory). If no special transducer is found a default transducer is used. The output of the transducer is fed to the Indexer module that inserts the computed attributes into the index. Indexing and retrieval are based upon Peter Weinberger's BTree package <ref> [Wei] </ref> and an adapted version of the refer [Les] software to maintain the mappings between attributes and objects. * The mount daemon is contacted to determine the root file handle of the underlying UNIX file system.
Reference: [WO88] <author> Brent B. Welch and John K. Ousterhout. </author> <title> Pseudo devices: User-level extensions to the Sprite file system. </title> <booktitle> In USENIX Association 1988 Summer Conference Proceedings, </booktitle> <pages> pages 37-49, </pages> <address> San Fran-cisco, California, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: [Kil84], enabling process observation and control via file operations. * Services appear as special directories in Plan 9 [PPTT90], enabling service access in a distributed system through file system operations in the service's name space. * Arbitrary semantics can be associated with files and directories using Watchdogs [BP88], Pseudo Devices <ref> [WO88] </ref>, and Filters [Neu90], enabling file system extensions such as terminal drivers, network protocols, X servers, file access control, file compression, mail notification, user specific directory views, heterogeneous file access, and service access. * The ATTIC system [CG91] uses a modified NFS server to provide transparent access to automatically com pressed
References-found: 47

