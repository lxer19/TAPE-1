URL: http://www.cs.ucsb.edu/~mcguire/papers/2.ps
Refering-URL: http://www.cs.ucsb.edu/~mcguire/
Root-URL: http://www.cs.ucsb.edu
Email: mcguire@cs.stanford.edu manna@cs.stanford.edu  waldinger@ai.sri.com  
Title: Annotation-Based Deduction in Temporal Logic  
Author: Hugh McGuire Zohar Manna and Richard Waldinger 
Note: This deductive system is relatively complete. Contents  
Address: 94305, U.S.A.;  Menlo Park, California 94025, U.S.A.;  
Affiliation: Computer Science Department, Stanford University, Stanford, California  Artificial Intelligence Center, SRI International,  
Abstract: This paper presents a deductive system for predicate temporal logic with induction. Representing temporal operators by first-order expressions enables temporal deduction to use the already developed techniques of first-order deduction. But when translating from temporal logic to first-order logic is done indiscriminately, the ensuing quantifications and comparisons of time expressions encumber formulas, hindering deduction. So in the deductive system presented here, translation occurs more carefully, via reification rules. These rules paraphrase selected temporal formulas as nontemporal first-order formulas with time annotations. This time reifi-cation process suppresses quantifications (the process is analogous to quantifier skolemization) and uses addition instead of complicated combinations of comparisons. Some ordering conditions on arithmetic expressions can arise, but such are handled automatically by a special-purpose unification algorithm plus a decision procedure for Presburger arithmetic. 
Abstract-found: 1
Intro-found: 1
Reference: [AM90] <author> Abadi, M., and Manna, Z.: </author> <title> "Nonclausal Deduction in First-Order Temporal Logic," </title> <journal> in Journal of the Association for Computing Machinery (JACM ), Volume 37 (1990), </journal> <volume> Number 2 (April), </volume> <pages> pp. 279-317. </pages>
Reference-contexts: For example, model-checking or -exploring (`semantic tableau') systems such as [CES86, P86, KM93] are effective for temporal formulas which are essentially propositional. But so far, they have been inapplicable to general predicate temporal formulas. The deductive system of <ref> [AM90] </ref> extends nonclausal resolution for predicate logic [MW80] to handle temporal operators directly, but that system requires a cut rule which gratuitously introduces new formulas into proofs, and it imposes possibly distracting restrictions on its rules. <p> The deductive system here also provides induction for temporal operators, and rules such as rewriting, for convenience. This system subsumes the prior one of <ref> [AM90] </ref>; i.e., any valid formula which can be proven in that system can also be proven here. 2 The Language: Annotated Temporal Logic (ATL) The basic language here is the Linear Temporal Logic of [MP91]; the complete language of atl adds time annotations to formulas. <p> Introduction of the Time Reification Rule Time reification removes a temporal operator from a formula via a process which, actually, is equivalent to the three-step operation of (1) translating the formula into nontemporal first-order predicate logic, (2) eliminating quantifiers introduced by step (1), and (3) translating back into temporal logic. <ref> [AM90] </ref> gives a typical scheme for translating basic temporal formulas to semantically equivalent nontemporal formulas. <p> There are additional temporal induction schemas, e.g., for assertions of the form [t :: : 3 ' ] (see the extended version of this paper). 7 Examples 7.1 Validity of the Formula fi fl fi fl fi fl This example, which requires temporal induction, is used in <ref> [AM90] </ref>. <p> paper.) 8.1 Soundness When all atl formulas and operations are translated into nontemporal pred icate logic, the soundness established in [MW93] applies; i.e., any formula which can be proven in atl is indeed valid. 8.2 Relative Completeness The atl system can perform all the operations of the deductive system of <ref> [AM90] </ref>. Hence, as [AM90] identified a class of `arithmetical' formulas (of predicate temporal logic) for which their deductive system is complete, the atl system is also complete for that class. 8.3 Decision Procedure for Propositional Temporal Logic The atl deductive system can be used for a decision procedure for formulas of <p> When all atl formulas and operations are translated into nontemporal pred icate logic, the soundness established in [MW93] applies; i.e., any formula which can be proven in atl is indeed valid. 8.2 Relative Completeness The atl system can perform all the operations of the deductive system of <ref> [AM90] </ref>. Hence, as [AM90] identified a class of `arithmetical' formulas (of predicate temporal logic) for which their deductive system is complete, the atl system is also complete for that class. 8.3 Decision Procedure for Propositional Temporal Logic The atl deductive system can be used for a decision procedure for formulas of propositional temporal logic
Reference: [CES86] <author> Clarke, E., Emerson, E., and Sistla, A.: </author> <title> "Automatic Verification of Finite-State Concurrent Systems Using Temporal Logic Specifications," </title> <journal> in ACM Transactions on Programming Languages and Systems, </journal> <volume> Volume 8 (1986), Number 2 (April), </volume> <pages> pp. 244-263. </pages>
Reference-contexts: 1 Introduction Temporal logic has been found valuable for the specification of concurrent and reactive software and hardware systems (see, e.g., [MP91]). To use such specifications, however, it is necessary to have techniques for reasoning about temporal-logic formulas. For example, model-checking or -exploring (`semantic tableau') systems such as <ref> [CES86, P86, KM93] </ref> are effective for temporal formulas which are essentially propositional. But so far, they have been inapplicable to general predicate temporal formulas.
Reference: [KM93] <author> Kesten, Y., Manna, Z., McGuire, H., and Pnueli, A.: </author> <title> "A Decision Algorithm for Full Propositional Temporal Logic," </title> <editor> in Courcoubetis, C. (editor): </editor> <booktitle> Computer Aided Verification (5th International Conference, CAV '93) (LNCS #697), </booktitle> <pages> pp. 97-109. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction Temporal logic has been found valuable for the specification of concurrent and reactive software and hardware systems (see, e.g., [MP91]). To use such specifications, however, it is necessary to have techniques for reasoning about temporal-logic formulas. For example, model-checking or -exploring (`semantic tableau') systems such as <ref> [CES86, P86, KM93] </ref> are effective for temporal formulas which are essentially propositional. But so far, they have been inapplicable to general predicate temporal formulas. <p> their deductive system is complete, the atl system is also complete for that class. 8.3 Decision Procedure for Propositional Temporal Logic The atl deductive system can be used for a decision procedure for formulas of propositional temporal logic by mimicking more standard `semantic' decision-algorithms such as the graph-based one of <ref> [KM93] </ref>. (This decision procedure using atl also resembles the construction in [AM90]'s proof of completeness of their deductive system for propositional temporal formulas.) 9 Conclusion The deductive system described here allows established techniques for reasoning in predicate logic with induction to be extended to temporal logic.
Reference: [MP91] <author> Manna, Z., and Pnueli, A.: </author> <title> The Temporal Logic of Reactive and Concurrent Systems: Specification. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Temporal logic has been found valuable for the specification of concurrent and reactive software and hardware systems (see, e.g., <ref> [MP91] </ref>). To use such specifications, however, it is necessary to have techniques for reasoning about temporal-logic formulas. For example, model-checking or -exploring (`semantic tableau') systems such as [CES86, P86, KM93] are effective for temporal formulas which are essentially propositional. <p> This system subsumes the prior one of [AM90]; i.e., any valid formula which can be proven in that system can also be proven here. 2 The Language: Annotated Temporal Logic (ATL) The basic language here is the Linear Temporal Logic of <ref> [MP91] </ref>; the complete language of atl adds time annotations to formulas. For example, in the atl formula [3 :: : 2 p] , the numeral "3" is the time annotation.
Reference: [MW80] <author> Manna, Z., and Waldinger, R.: </author> <title> "A Deductive Approach to Program Synthesis," </title> <journal> in ACM Transactions on Programming Languages and Systems, </journal> <volume> Volume 2 (1980), </volume> <pages> pp. 90-121. </pages>
Reference-contexts: For example, model-checking or -exploring (`semantic tableau') systems such as [CES86, P86, KM93] are effective for temporal formulas which are essentially propositional. But so far, they have been inapplicable to general predicate temporal formulas. The deductive system of [AM90] extends nonclausal resolution for predicate logic <ref> [MW80] </ref> to handle temporal operators directly, but that system requires a cut rule which gratuitously introduces new formulas into proofs, and it imposes possibly distracting restrictions on its rules.
Reference: [MW93] <author> Manna, Z., and Waldinger, R.: </author> <booktitle> The Deductive Foundations of Computer Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1993. </year>
Reference-contexts: A formula ' is valid within the theory specified by the set A if for every model that satisfies all the axioms A, j= ' . 3 Deduction I: Fundamentals Our deductive framework, using deductive tableaux, is that of <ref> [MW93] </ref>. 3.1 Notation: Deductive Tableaux A deductive tableau is a table with four columns and any positive number of rows. <p> Examples of rewriting schemas are: :( ' 1 ^ ' 2 ) , (: ' 1 _ : ' 2 ) and (8-1 )(8-2 ) ' , (8-2 )(8-1 ) ' : Nontemporal rewritings are listed in <ref> [MW93] </ref>. Temporal ones are as follows. First: 2 ' , ' ^ fl 2 ' ( ' 1 U ' 2 ) , ' 2 _ ' 1 ^ fl ( ' 1 U ' 2 ) 2 [MW93] gives formal semantics for deductive tableaux. <p> ' , (8-2 )(8-1 ) ' : Nontemporal rewritings are listed in <ref> [MW93] </ref>. Temporal ones are as follows. First: 2 ' , ' ^ fl 2 ' ( ' 1 U ' 2 ) , ' 2 _ ' 1 ^ fl ( ' 1 U ' 2 ) 2 [MW93] gives formal semantics for deductive tableaux. When used from left to right, these rewritings are called expansions. Next, there are rewritings which specify that the temporal operator " fl " distributes over or commutes with nontemporal boolean operators (":", "^", "_", and "!") and quantifiers. <p> be proven in atl, using induction for lists, in thirty-three steps. 8 Properties of the ATL Deductive System (Proofs of these properties are given in the extended version of this paper.) 8.1 Soundness When all atl formulas and operations are translated into nontemporal pred icate logic, the soundness established in <ref> [MW93] </ref> applies; i.e., any formula which can be proven in atl is indeed valid. 8.2 Relative Completeness The atl system can perform all the operations of the deductive system of [AM90].
Reference: [O88] <author> Ohlbach, H.: </author> <title> "A Resolution Calculus for Modal Logics," </title> <editor> in Lusk, E., and Overbeek, R. (editors): </editor> <booktitle> 9th International Conference on Automated Deduction (Proceedings) (LNCS #310), </booktitle> <pages> pp. 500-516. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1988. </year>
Reference-contexts: Then, one can apply the accumulated technology for reasoning in first-order logic. Such an approach is used in [W89] and <ref> [O88] </ref> for modal logics other than temporal logic.
Reference: [O93] <author> Ohlbach, H.: </author> <title> "Translation Methods for Non-Classical Logics | An Overview," </title> <booktitle> in Automated Deduction in Nonstandard Logics (Technical Report #FS-93-01), </booktitle> <pages> pp. 113-125. </pages> <publisher> AAAI Press, </publisher> <address> Menlo Park, California, </address> <year> 1993. </year>
Reference-contexts: Such an approach is used in [W89] and [O88] for modal logics other than temporal logic. But performing this translation indiscriminately may confuse otherwise simple modal-logic proofs, in which the modal operators are intuitively meaningful; proofs requiring induction are particularly susceptible to this disservice. (See also <ref> [O93] </ref> re efficiency.) This paper presents a deductive system which employs such translation, but with some finesse. Temporal operators are translated gradually and selectively, and the resulting expressions representing time are simple: time is identified with the natural numbers, so temporal operators can be represented by addition (and subtraction).
Reference: [P86] <author> Plaisted, D.: </author> <title> "A Decision Procedure for Combinations of Propositional Temporal Logic and Other Specialized Theories", </title> <journal> in Journal of Automated Reasoning, </journal> <volume> Volume 2 (1986), </volume> <pages> pp. 171-190. </pages>
Reference-contexts: 1 Introduction Temporal logic has been found valuable for the specification of concurrent and reactive software and hardware systems (see, e.g., [MP91]). To use such specifications, however, it is necessary to have techniques for reasoning about temporal-logic formulas. For example, model-checking or -exploring (`semantic tableau') systems such as <ref> [CES86, P86, KM93] </ref> are effective for temporal formulas which are essentially propositional. But so far, they have been inapplicable to general predicate temporal formulas.
Reference: [S79] <author> Shostak, R.: </author> <title> "A practical decision procedure for arithmetic with function symbols," </title> <journal> in JACM, </journal> <volume> Volume 26 (1979), Number 2 (April), </volume> <pages> pp. 351-360. </pages>
Reference-contexts: Then, reasoning about terms which represent time is done automatically by unification (as with "t" in the following simple example) plus a decision procedure for Presburger arithmetic derived from <ref> [S79] </ref>.
Reference: [W89] <author> Wallen, L.: </author> <title> Automated Proof Search in Nonclassical Logics. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1989. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: An alternative to reasoning directly with temporal operators is to translate temporal formulas into nontemporal first-order predicate logic, using quantifications and comparisons of explicit time parameters to express the temporal operators. Then, one can apply the accumulated technology for reasoning in first-order logic. Such an approach is used in <ref> [W89] </ref> and [O88] for modal logics other than temporal logic.
References-found: 11

