URL: http://netlib.bell-labs.com/cm/cs/doc/89/2-17.ps.gz
Refering-URL: http://www.ics.uci.edu/~eppstein/gina/typography.html
Root-URL: 
Title: Generating Automatically-Tuned Bitmaps from Outlines  
Author: John D. Hobby 
Keyword: Roman fonts and Japanese Kanji. Categories and Subject Descriptors: I.3.3 [Computer Graphics]: Picture/Image Generation|digitizing and scanning; I.5.4 [Pattern Recognition]: Applications|text processing General Terms: Algorithms Additional Key Words and Phrases: Scan-conversion; Fonts; Feature recognition; Lovasz basis reduction  
Note: The heuristic information is of such a general nature that it applies equally well to  
Abstract: Consider the problem of generating bitmaps from character shapes given as outlines. The obvious scan-conversion process does not produce acceptable results unless important features such as stem widths are carefully controlled during the scan-conversion process. This paper describes a method for automatically extracting the necessary feature information and generating high quality bitmaps without resorting to hand editing. Almost all of the work is done in a preprocessing step, the result of which is an intermediate form that can be quickly converted into bitmaps once the font size and device resolution are known. A heuristically defined system of linear equations describes how the ideal outlines should be distorted in order to produce the best possible results when scan converted in a straight-forward manner. The Lovasz basis reduction algorithm then reduces the system of equations to a form that makes it easy to find an approximate solution subject to the constraint that some variables must be integers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Adobe Systems Incorporated. Adobe type 1 font format, </institution> <year> 1990. </year>
Reference-contexts: Thus the total space requirement for the original outlines is about 17,600 eight-bit bytes, and the cost of storing encoded instructions for generating low-distortion character outlines is approximately a factor of ten. Hint-based schemes such as the Adobe Type 1 font format <ref> [1] </ref> are not as expensive but they are also not as flexible and they are difficult to generate automatically. Since hint-based schemes generally do not use polygonal character outlines, further discussion of their relative space efficiency is delayed until Section 6. 5.3. <p> It is difficult to make direct comparisons, but the polygonal outlines like those in Figure 13 appear to have about six vertices for every Bezier cubic curve segment in commercially available outlines given in Adobe Type 1 format. <ref> [1] </ref> Since Bezier cubics require three coordinate pairs per curve segment, the number of coordinates is cut in half. In fact the overall savings would be somewhat less than this estimate since there are no savings on straight parts of a character outline.
Reference: [2] <author> P. G. Apley. </author> <title> Automatic generation of digital typographic images from outline masters. </title> <note> Course note of ACM SIGGRAPH 88, Course 14: Digital Typography, </note> <year> 1988. </year>
Reference-contexts: For instance, R. D. Hersch presents a technique for using "grid constraints" to adjust the outlines prior to scan conversion. [7] Other approaches to the problem are discussed by Apley <ref> [2] </ref>. Unfortunately, whatever form the grid constraints take they usually have to be generated laboriously by hand.
Reference: [3] <author> L. Babai. </author> <title> On Lovasz' lattice reduction and the nearest lattice point problem. </title> <journal> Combinatorica, </journal> <volume> 6(1) </volume> <pages> 1-13, </pages> <year> 1986. </year>
Reference-contexts: minimize kR P P V P + R P 1 V 1 k (23) R P 1 V P Van Emde Boas has shown that this problem is N P -complete [17], but good approximate solutions can often be found using the Lovasz lattice basis reduction algorithm.[13] (See also Babai <ref> [3] </ref> for more details and an analysis of the approximation algorithm).
Reference: [4] <author> H. Blum and R. N. Nagel. </author> <title> Shape description using weighted symmetric axis features. </title> <journal> Pattern Recognition, </journal> <volume> 10(3) </volume> <pages> 167-180, </pages> <year> 1978. </year>
Reference: [5] <author> S. Fortune. </author> <title> Sweepline algorithms for voronoi diagrams. </title> <journal> Algorithmica, </journal> <volume> 2 </volume> <pages> 153-174, </pages> <year> 1987. </year>
Reference: [6] <author> M. Grotschel, L. Lovasz, and A. Shrijver. </author> <title> Relaxation of vertex packing. </title> <journal> Journal of Combinatorial Theory, Series B, </journal> <volume> 40(3) </volume> <pages> 330-343, </pages> <year> 1986. </year>
Reference: [7] <author> R. D. Hersch. </author> <title> Character generation under grid constraints. </title> <journal> Computer Graphics, </journal> <volume> 21(4) </volume> <pages> 243-251, </pages> <year> 1987. </year>
Reference-contexts: For instance, R. D. Hersch presents a technique for using "grid constraints" to adjust the outlines prior to scan conversion. <ref> [7] </ref> Other approaches to the problem are discussed by Apley [2]. Unfortunately, whatever form the grid constraints take they usually have to be generated laboriously by hand.
Reference: [8] <author> John D. </author> <title> Hobby. Rasterizing curved lines of constant width. </title> <journal> Journal of the ACM, </journal> <volume> 36(2) </volume> <pages> 209-229, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: As explained in [9], this can be done by counting - 4 - pixels per unit length but it is more practical with the present application to use some ideas from [9] and <ref> [8] </ref> to construct special outlines whose width matches the bitmap. For example, Figure 8a shows a pair of outlines that have the integer offset property defined in [9] and [8]. <p> - pixels per unit length but it is more practical with the present application to use some ideas from [9] and <ref> [8] </ref> to construct special outlines whose width matches the bitmap. For example, Figure 8a shows a pair of outlines that have the integer offset property defined in [9] and [8]. When superimposed on the pixel grid in Figure 8b, the separation between the two halves of the outline for the upper stroke is such that the vector (1; 2) measured in pixel units just spans the gap. <p> Similarly, for the outline of the lower stroke, the integer offset vector (1; 1) just spans the gap. If we scan convert each stroke by turning on the pixels whose centers lie inside the outline, a theorem from <ref> [8] </ref> guarantees that the number of pixels per unit length matches the original outlines.
Reference: [9] <author> John Douglas Hobby. </author> <title> Digitized Brush Trajectories. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, Stanford University, </institution> <year> 1985. </year>
Reference-contexts: Truly measuring width distortion for strokes that are neither vertical nor horizontal requires a definition of "width" that applies to bitmaps. As explained in <ref> [9] </ref>, this can be done by counting - 4 - pixels per unit length but it is more practical with the present application to use some ideas from [9] and [8] to construct special outlines whose width matches the bitmap. <p> As explained in <ref> [9] </ref>, this can be done by counting - 4 - pixels per unit length but it is more practical with the present application to use some ideas from [9] and [8] to construct special outlines whose width matches the bitmap. For example, Figure 8a shows a pair of outlines that have the integer offset property defined in [9] and [8]. <p> - 4 - pixels per unit length but it is more practical with the present application to use some ideas from <ref> [9] </ref> and [8] to construct special outlines whose width matches the bitmap. For example, Figure 8a shows a pair of outlines that have the integer offset property defined in [9] and [8]. When superimposed on the pixel grid in Figure 8b, the separation between the two halves of the outline for the upper stroke is such that the vector (1; 2) measured in pixel units just spans the gap. <p> On the other hand, it is hard to decide in advance whether the direction angle is sufficiently close to a sufficiently simple rational slope. Without such special dirction angles, <ref> [9] </ref> shows that reasonable choices of integer offset vectors can easily deviate from perpendicular to the stroke direction by on the order of 1= p w max even when w max = w min .
Reference: [10] <author> Apple Computer Inc. </author> <title> Technical Introduction to the Macintosh Family. </title> <publisher> Addison Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1987. </year>
Reference: [11] <author> D. E. Knuth. </author> <title> METAFONT the Program. </title> <publisher> Addison Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1986. </year> <title> Volume D of Computers and Typesetting. </title>
Reference: [12] <author> D. T. Lee. </author> <title> Medial axis transformation of a planar shape. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> PAMI-4:363-369, </volume> <year> 1982. </year> <month> - 42 </month> - 
Reference: [13] <author> A. K. Lenstra, H. W. Lenstra, Jr., and L. Lovasz. </author> <title> Factoring polynomials with rational coefficients. </title> <journal> Mathematische Annalen, </journal> <volume> 261 </volume> <pages> 515-534, </pages> <year> 1982. </year>
Reference-contexts: A font-wide version of the distortion function covered in Section 4 uses the same principles to measure nonuniformity in the font as a whole. Well known ideas based on work by Lovasz <ref> [13] </ref> give good approximate minima for both versions of the distortion function. By implementing this as a two step process, we retain the idea that a single set of character outlines can be used to generate bitmaps at any desired size. <p> When applied to R P P , the algorithm finds a transformed matrix R P P T such that the matrices T and T 1 both have integer entries and the columns of R P P T are in some sense "more orthogonal" those of R P P . (See <ref> [13] </ref> for details). <p> Fortunately, this algorithm is reasonably fast for practical values of the problem size N V even though the time bound given in <ref> [13] </ref> is worse than O (N 5 V ). 1. Find the matrix R from the QR-factorization of A. 2.
Reference: [14] <author> U. Montanari. </author> <title> Continuous skeletons from digital images. </title> <journal> Journal of the ACM, </journal> <volume> 16(3) </volume> <pages> 534-549, </pages> <year> 1969. </year>
Reference-contexts: This may be done by the well-known technique of medial axis decomposition introduced by Blum.[4] Most of the work necessary to compute the decomposition was done by Montanari <ref> [14] </ref> and later improved by Lee.[12] The prototype implementation used Fortune's algorithm for line segment sites.[5] The resulting medial axis decomposition of a set of polygons is a radius function and a set of tree-like structures such as those shown in Figure 16a.
Reference: [15] <author> T. Pavlidis and C. J. Van Wyk. </author> <title> An automatic beautifier for drawings and illustrations. </title> <journal> Computer Graphics, </journal> <volume> 19(3) </volume> <pages> 225-234, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Some of the problems that can arise when the height interval size is not known in advance can be seen from the work of Pavlidis and Van Wyk. <ref> [15] </ref> The half-pixel limit for our application implies a height interval size of fl 3 0:5= hi , where hi is an upper limit 4 Typically A tot 345H for fonts like Helvetica or Times Roman, but a complete set of Japanese Kanji has A tot 68000H - 26 - on
Reference: [16] <author> M. F. Plass and P. H. Hochschild. </author> <title> Optimal rendering of characters and images on discrete devices. </title> <journal> ACM Transactions on Graphics, </journal> <note> to appear. </note>
Reference: [17] <author> P. van Emde Boas. </author> <title> Another NP-complete partition problem and the complexity of computing short vectors in a lattice. </title> <type> Report 81-04, </type> <institution> Math. Institute, Univ. of Amsterdam, </institution> <year> 1981. </year>
Reference-contexts: block structure shown in the figure, the problem reduces to finding an integer vector V P so as to minimize kR P P V P + R P 1 V 1 k (23) R P 1 V P Van Emde Boas has shown that this problem is N P -complete <ref> [17] </ref>, but good approximate solutions can often be found using the Lovasz lattice basis reduction algorithm.[13] (See also Babai [3] for more details and an analysis of the approximation algorithm).
Reference: [18] <author> C. K. Yap. </author> <title> An O(n log n) algorithm for the voronoi diagram of a set of simple curve segments. </title> <journal> Discrete and Computational Geometry, </journal> <volume> 2 </volume> <pages> 365-393, </pages> <year> 1987. </year>
Reference-contexts: For instance, the Voronoi Diagram is needed for identifying strokes and stroke-like features, but it is impractical to construct the Voronoi for Bezier cubics due to the tremendous complexity of the required medial axis curves. (See <ref> [18] </ref> for a discussion of how to compute Voronoi Diagrams for another family of curves). A convenient way to avoid the difficulty in finding the Voronoi Diagram is to introduce an apporoximation that provides adequate medial axis information.
References-found: 18

