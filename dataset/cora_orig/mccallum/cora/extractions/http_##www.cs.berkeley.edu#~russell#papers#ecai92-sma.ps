URL: http://www.cs.berkeley.edu/~russell/papers/ecai92-sma.ps
Refering-URL: http://www.cs.berkeley.edu/~russell/publications.html
Root-URL: 
Title: Efficient memory-bounded search methods  
Author: Stuart Russell 
Address: Berkeley, CA 94720, USA  
Affiliation: Computer Science Division University of California,  
Abstract: Memory-bounded algorithms such as Korf's IDA* and Chakrabarti et al's MA* are designed to overcome the impractical memory requirements of heuristic search algorithms such as A* . It is shown that IDA* is inefficient when the heuristic function can take on a large number of values; this is a consequence of using too little memory. Two new algorithms are developed. The first, SMA*, simplifies and improves upon MA*, making the best use of all available memory. The second, Iterative Expansion (IE), is a simple recursive algorithm that uses linear space and incurs little overhead. Experiments indicate that both algorithms perform well. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bratko, I. </author> <title> (1986) The art of Prolog program ming. </title> <publisher> London: Academic Press. </publisher>
Reference-contexts: Thus IE is called on a node with a bound equal to the backed-up f -cost of the second-best path from any ancestor of that node. (The second-best-value idea is also used in RBFS, a similar algorithm developed independently by Korf [7], and in Bratko's implementation of A* <ref> [1] </ref>. ) Backed-up f -costs shown with original f -costs in parentheses. Shaded region indicates pruned nodes. Nodes are generated in alphabetical order, and pruned in the order GKJIHF.
Reference: [2] <author> Chakrabarti, P. P., Ghose, S., Acharya, A., and de Sarkar, S. C. </author> <title> (1989) Heuristic search in restricted memory. </title> <journal> AIJ, </journal> <volume> 41, </volume> <pages> 197-221. </pages>
Reference-contexts: As with other "staged search" algorithms, optimality cannot be ensured because until the best path has been found the optimality of the first step remains in doubt. IDA* [6], one of the earliest admissible, memory-bounded algorithms, uses space linear in the length of the solution. The MA* algorithm <ref> [2] </ref> can utilize whatever memory is available, and thereby avoids some re-expansions. The latter paper also describes several other memory-bounded algorithms. The next section discusses IDA* and MA* in detail. Section 3 describes the SMA* algorithm, which improves on MA*. <p> Hence nodes with highest f -cost should be pruned first. Furthermore, when a node is pruned, as much cost information should be retained in its ancestors as possible, consistent with the constraint that each node takes constant space. The MA* algorithm <ref> [2] </ref> embodies these principles reasonably well. (Unfortunately, the algorithm is too complicated to reproduce here, so a sketch will have to suffice.) Like A*, it maintains two sets of nodes: CLOSED contains nodes all of whose successors are present in memory, and OPEN contains all other nodes in memory.
Reference: [3] <author> Dechter, R., and Pearl, J. </author> <title> (1985) Generalized best first strategies and the optimality of A fl . JACM 32, </title> <type> 505-536. </type>
Reference-contexts: Furthermore, A* examines the minimum number of nodes necessary to do this, up to tie-breaks <ref> [3] </ref> (see below for a simple proof). Given these results, and the existence of more efficient, *-admissible algorithms that relax the optimality requirement, one might imagine that this area of research is more or less sewn up.
Reference: [4] <author> Doran, J., and Michie, D. </author> <title> (1966) Experiments with the graph traverser. </title> <journal> Proc. R. Soc. </journal> <volume> (A) 294, </volume> <pages> 235-259. </pages>
Reference-contexts: The principal difficulties are 1) ensuring optimal solutions, and 2) avoiding the continual re-expansion of nodes that have been visited before but necessarily forgotten because of memory restrictions. The Graph Traverser <ref> [4] </ref>, one of the earliest search programs, commits to an operator after searching best-first up to the memory limit. As with other "staged search" algorithms, optimality cannot be ensured because until the best path has been found the optimality of the first step remains in doubt.
Reference: [5] <author> Hart, P. E., Nilsson, N. J., and Raphael, B. </author> <title> (1968) A formal basis for the heuristic determination of minimum-cost paths. </title> <journal> IEEE Trans. Sys. Sci. and Cybernetics SSC-4(2) 100-107. </journal>
Reference-contexts: We will be principally concerned with finding the optimal solution sequence, using heuristics that are admissible; that is, h (n) h fl (n) where h fl represents the exact distance to the nearest goal state. 1 With admissible h, the A* algorithm <ref> [5] </ref> is known to return optimal solutions. Furthermore, A* examines the minimum number of nodes necessary to do this, up to tie-breaks [3] (see below for a simple proof).
Reference: [6] <author> Korf, R. E. </author> <title> (1985) Depth-first iterative deepening: An optimal admissible tree search. </title> <journal> AIJ, </journal> <volume> 27(1), 97 109. </volume>
Reference-contexts: As with other "staged search" algorithms, optimality cannot be ensured because until the best path has been found the optimality of the first step remains in doubt. IDA* <ref> [6] </ref>, one of the earliest admissible, memory-bounded algorithms, uses space linear in the length of the solution. The MA* algorithm [2] can utilize whatever memory is available, and thereby avoids some re-expansions. The latter paper also describes several other memory-bounded algorithms. The next section discusses IDA* and MA* in detail.
Reference: [7] <author> Korf, R. E. </author> <title> (1991) Best-first search with limited memory. </title> <institution> UCLA Comp. Sci.Ann. </institution>
Reference-contexts: Thus IE is called on a node with a bound equal to the backed-up f -cost of the second-best path from any ancestor of that node. (The second-best-value idea is also used in RBFS, a similar algorithm developed independently by Korf <ref> [7] </ref>, and in Bratko's implementation of A* [1]. ) Backed-up f -costs shown with original f -costs in parentheses. Shaded region indicates pruned nodes. Nodes are generated in alphabetical order, and pruned in the order GKJIHF.
Reference: [8] <author> Wefald, E. H., and Russell, S. J. </author> <title> (1989) Estimat ing the value of computation: The case of real-time search. </title> <booktitle> In Proc. AAAI Spring Symp. AI and Limited Rationality, </booktitle> <address> Stanford, CA. </address>
Reference-contexts: Unfortunately, node I will get a value of 5 although it was once known to have a value of 6. This form of information loss seems unavoidable given the requirement of constant space per node. 4 IE IE is a simple recursive algorithm developed from an idea in DTA* <ref> [8] </ref>. There it was pointed out that with an admissible heuristic, the backed-up f -cost of a child of the root can only increase, and therefore search should only be carried out under the current best child, until its cost exceeds the current second-best child.
References-found: 8

