URL: ftp://ftp.cs.toronto.edu/pub/kbms/rids95.ps.Z
Refering-URL: ftp://ftp.cs.toronto.edu/pub/kbms/readme.html
Root-URL: 
Email: E-mail: dp@ai.toronto.edu  
Title: Compilation and Simplification of Temporal Integrity Constraints  
Author: Dimitris Plexousakis 
Date: April 12, 1995  
Address: Toronto, Ont M5S 1A4, Canada  
Affiliation: Dept. of Computer Science, University of Toronto  
Abstract: The paper presents a novel compilation scheme for temporal integrity constraints and deductive rules expressed in an interval-based first-order temporal logic. Compilation builds a dependence graph with simplified forms of the constraints and rules. This permits the compile-time simplification of the formulae that have to be verified at run-time, as well as the precomputation of potential implicit updates. Simplification takes place with respect to the anticipated types of updates. We show how simplified forms can be obtained with respect to transactions made up of arbitrary sequences of basic updates. Additional optimization steps exploit the organization of simplified forms in dependence graphs.
Abstract-found: 1
Intro-found: 1
Reference: [All83] <author> J. Allen. </author> <title> Maintaining Knowledge about Temporal Intervals. </title> <journal> Communications of the ACM, </journal> <volume> 26(11) </volume> <pages> 832-843, </pages> <month> November </month> <year> 1983. </year>
Reference-contexts: The model of time adopted is a modification of Allen's framework <ref> [All83] </ref>. Seven exclusive temporal relations (e.g, equal, meet, before, after, during, start, end) together with their inverses are used to characterize the possible positions of two intervals on a linear time line. Temporal relationships participate in the expression of deductive rules and integrity constraints in the assertion language. <p> If P is a derivable predicate defined by a set of deductive rules with bodies R 1 ; . . .; R k and respective time intervals T 1 ; . . . ; T k , then 6 The satisfaction of the basic temporal predicates is defined as in <ref> [All83] </ref>. 6 * (KB; ; t ) j= P (x; t) iff (KB; ; t ) j= i=1 R i ^ (t during T ), where T is the intersection of the intervals T i . Now we're in a position to define the satisfaction of temporal integrity constraints.
Reference: [AM87] <author> M. Abadi and Z. Manna. </author> <title> Temporal Logic Programming. </title> <booktitle> In IEEE Symposium on Logic Programming, </booktitle> <pages> pages 4-16, </pages> <year> 1987. </year> <month> 15 </month>
Reference-contexts: On the other hand, research in temporal databases has almost exclusively adopted a relational model [Kun85], [SHS94], [Cho92a], [Cho92b], [GL93], [SW95]. Work on temporal deductive databases has mainly dealt with the problem of finitely representing infinite temporal properties [KSW90] and with the evaluation of temporal logic programs <ref> [AM87] </ref>, [BCW93]. This paper constitutes a proposal towards devising efficient methods for enforcing temporal integrity constraints in a structurally object-oriented framework and in the presence of temporal deductive rules. Temporal integrity maintenance encompasses several challenging research issues. A first such issue is the specification of constraints.
Reference: [BCW93] <author> Marianne Baudinet, Jan Chomicki, and Pierre Wolper. </author> <title> Temporal Deductive Databases. </title> <editor> In A. Tansel, J. Clifford, S. Gadia, S. Jajodia, A. Segev, and R. Snodgrass, editors, </editor> <title> Temporal Databases. </title> <publisher> Benjamin Cummings, </publisher> <year> 1993. </year>
Reference-contexts: Financial and trading applications involve complex operations on time-series, e.g. stock prices over time, and need to preserve constraints on the time-varying characteristics of the objects involved [CS93]. Temporal databases [Tan93] and their extensions <ref> [BCW93] </ref>, [Ple93a] need robust mechanisms for ensuring that time-dependent properties do not become violated due to the evolution of the database or the passage of time. The properties that need to be ensured may refer to arbitrarily many states, past or future, of the database. <p> On the other hand, research in temporal databases has almost exclusively adopted a relational model [Kun85], [SHS94], [Cho92a], [Cho92b], [GL93], [SW95]. Work on temporal deductive databases has mainly dealt with the problem of finitely representing infinite temporal properties [KSW90] and with the evaluation of temporal logic programs [AM87], <ref> [BCW93] </ref>. This paper constitutes a proposal towards devising efficient methods for enforcing temporal integrity constraints in a structurally object-oriented framework and in the presence of temporal deductive rules. Temporal integrity maintenance encompasses several challenging research issues. A first such issue is the specification of constraints.
Reference: [BDM88] <author> F. Bry, H. Decker, and R. Manthey. </author> <title> A Uniform Approach to Constraint Satisfaction and Constraint Satisfiability in Deductive Databases. </title> <booktitle> In Proceedings of the Int. Conference on Extedning Data Base Technology, </booktitle> <pages> pages 488-505, </pages> <year> 1988. </year>
Reference-contexts: So far, the research community has dealt with the problem of maintaining semantic integrity in contexts such as relational, deductive or object-oriented databases <ref> [BDM88] </ref>, [CW90], [JJ91]. On the other hand, research in temporal databases has almost exclusively adopted a relational model [Kun85], [SHS94], [Cho92a], [Cho92b], [GL93], [SW95]. <p> u=UnivAffiliate Forall d=Department Forall s; s 0 =Address Forall t=TimeInterval (address (u; s; t) ^ (D addr (d; s 0 ; t) ^ (s = s 0 ) ) works in (u; d; t)) (at 1993::fl) 2 4 A formula is rectified if no two quantifiers introduce the same variable <ref> [BDM88] </ref>. 5 This class of constraints is equivalent to both the restricted quantification form of [BDM88] and the range form of [JJ91]. Constraints, as well as deductive rules, are associated with history and belief time intervals. <p> (D addr (d; s 0 ; t) ^ (s = s 0 ) ) works in (u; d; t)) (at 1993::fl) 2 4 A formula is rectified if no two quantifiers introduce the same variable <ref> [BDM88] </ref>. 5 This class of constraints is equivalent to both the restricted quantification form of [BDM88] and the range form of [JJ91]. Constraints, as well as deductive rules, are associated with history and belief time intervals. If no such association appears explicitly with their definition, both intervals are assumed to be equal to (systime..*), where systime denotes the current system time. <p> Our method builds on the compilation method that was initially proposed in <ref> [BDM88] </ref> and was later adapted to an object-oriented setting in [JJ91]. Our method extends the latter by the treatment of temporal constraints and by the introduction of an efficient compilation scheme that allows us optimize the computation of implicit updates and to perform additional simplifications.
Reference: [BMS84] <editor> Michael Brodie, John Mylopoulos, and Joachim Schmidt, editors. </editor> <booktitle> On Conceptual Modeling: Perspectives from Artificial Intelligence, Databases and Programming Languages. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1984. </year>
Reference-contexts: Individuals and attributes are referred to by a common term - proposition. As in object models, Telos propositions have their own internal identifiers. Propositions (individuals and attributes) are organized along three dimensions, referred to in the literature as attribution, classification and generalization <ref> [BMS84] </ref>. Structured objects consist of collections of (possibly multi-valued) attributes that have a common proposition as a source, thus adding a simple form of aggregation. Each proposition is an instance of one or more generic propositions called classes thus giving rise to a classification hierarchy.
Reference: [Cho92a] <author> J. Chomicki. </author> <title> History-less Checking of Dynamic Integrity Constraints. </title> <booktitle> In 8th Int. Conference on Data Engineering, </booktitle> <pages> pages 557-564, </pages> <address> Phoenix,AZ, </address> <year> 1992. </year>
Reference-contexts: So far, the research community has dealt with the problem of maintaining semantic integrity in contexts such as relational, deductive or object-oriented databases [BDM88], [CW90], [JJ91]. On the other hand, research in temporal databases has almost exclusively adopted a relational model [Kun85], [SHS94], <ref> [Cho92a] </ref>, [Cho92b], [GL93], [SW95]. Work on temporal deductive databases has mainly dealt with the problem of finitely representing infinite temporal properties [KSW90] and with the evaluation of temporal logic programs [AM87], [BCW93]. <p> Hence, a single formula incorporating the affecting updates of an arbitrary transaction needs only to be verified as opposed to a number of more complex formulae incorporating only individual updates. Current research focuses on devising historical knowledge minimization techniques for integrity constraints, in the lines of <ref> [Cho92a] </ref>, [Cho92b], and [SL88], [SHS94] but in the richer context of temporal deductive knowledge bases introduced in this paper. The reuse and adaptation of proofs of temporal formulae satisfaction over dependence graphs is investigated.
Reference: [Cho92b] <author> Jan Chomicki. </author> <title> Real-Time Integrity Constraints. </title> <booktitle> In ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems , pages 274-282, </booktitle> <address> San Diego, CA, </address> <year> 1992. </year>
Reference-contexts: So far, the research community has dealt with the problem of maintaining semantic integrity in contexts such as relational, deductive or object-oriented databases [BDM88], [CW90], [JJ91]. On the other hand, research in temporal databases has almost exclusively adopted a relational model [Kun85], [SHS94], [Cho92a], <ref> [Cho92b] </ref>, [GL93], [SW95]. Work on temporal deductive databases has mainly dealt with the problem of finitely representing infinite temporal properties [KSW90] and with the evaluation of temporal logic programs [AM87], [BCW93]. <p> Hence, a single formula incorporating the affecting updates of an arbitrary transaction needs only to be verified as opposed to a number of more complex formulae incorporating only individual updates. Current research focuses on devising historical knowledge minimization techniques for integrity constraints, in the lines of [Cho92a], <ref> [Cho92b] </ref>, and [SL88], [SHS94] but in the richer context of temporal deductive knowledge bases introduced in this paper. The reuse and adaptation of proofs of temporal formulae satisfaction over dependence graphs is investigated.
Reference: [CS93] <author> R. Chandra and A. Segev. </author> <title> Managing Temporal Financial Data in an Extensible Database. </title> <booktitle> In Proceedings of the 19th Int. Conference on Very Large Data Bases, </booktitle> <pages> pages 302-313, </pages> <address> Dublin, IR, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Financial and trading applications involve complex operations on time-series, e.g. stock prices over time, and need to preserve constraints on the time-varying characteristics of the objects involved <ref> [CS93] </ref>. Temporal databases [Tan93] and their extensions [BCW93], [Ple93a] need robust mechanisms for ensuring that time-dependent properties do not become violated due to the evolution of the database or the passage of time.
Reference: [CT94] <author> Jan Chomicki and David Toman. </author> <title> Implementing Integrity Constraints Using an Active DBMS. </title> <booktitle> In Proceedings, RIDE-94 Active Database Systems, </booktitle> <pages> pages 87-95, </pages> <year> 1994. </year>
Reference-contexts: Last, but not least, the derivation of incrementally evaluable formulae as simplified forms of integrity constraints expressed in the interval based assertion language is examined. Incrementally evaluable constraints lend themselves to an implementation using an active rule model, as, e.g., in [GL93], <ref> [CT94] </ref> and [SW95].
Reference: [CW90] <author> S. Ceri and J. Widom. </author> <title> Deriving Production Rules for Constraint Maintenance. </title> <booktitle> In Proceedings of the 16th Int. Conference in Very Large Databases, </booktitle> <pages> pages 566-577, </pages> <year> 1990. </year>
Reference-contexts: So far, the research community has dealt with the problem of maintaining semantic integrity in contexts such as relational, deductive or object-oriented databases [BDM88], <ref> [CW90] </ref>, [JJ91]. On the other hand, research in temporal databases has almost exclusively adopted a relational model [Kun85], [SHS94], [Cho92a], [Cho92b], [GL93], [SW95].
Reference: [EC75] <author> K. Eswaran and D. Chamberlin. </author> <title> Functional Specifications of a Subsystem for Database Integrity. </title> <booktitle> In Proceedings of the 1st International Conference in Very Large Databases, </booktitle> <pages> pages 48-68, </pages> <year> 1975. </year>
Reference-contexts: 1 Introduction The maintenance of semantic integrity has been recognized as a cornerstone issue for the development of data bases and knowledge bases alike [Flo74], <ref> [EC75] </ref>, [Ull88], [MCP + 94]. Integrity constraints express application dependent semantics that are not built into the semantics of the knowledge representation language or the data structures used. Additionally, they constitute a means for controlling the quality of information stored in knowledge repositories.
Reference: [ELG84] <author> H. Ehrich, U. Lipeck, and M. Gogolla. </author> <title> Specification, Semantics and Enforcement of Dynamic Database Constraints. </title> <booktitle> In Proceedings of 10th VLDB Conference, </booktitle> <pages> pages 301-308, </pages> <year> 1984. </year>
Reference-contexts: Furthermore, the need for modeling evolving domains has given rise to challenging research issues relating to the incorporation of time in knowledge bases. The by now well established notions of static and transitional integrity [Nic82], <ref> [ELG84] </ref> must be generalized to that of temporal integrity. The problem of ensuring that the correctness criteria expressed by integrity constraints will not be violated in a dynamic environment, now has an additional dimension, namely that of monitoring time-dependent properties.
Reference: [Eme90] <author> E. Allen Emerson. </author> <title> Temporal and Modal Logic. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <pages> pages 996-1072. </pages> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Temporal integrity maintenance encompasses several challenging research issues. A first such issue is the specification of constraints. We will argue for a declarative, as opposed to procedural, specification of integrity constraints. First-Order Temporal Logic <ref> [Eme90] </ref> and several of its variants or subsets have been the most popular formalisms for expressing temporal constraints. Deontic variants of Dynamic Logic [WMW89] have also been proposed for the expression of dynamic and deontic properties. <p> If no such association appears explicitly with their definition, both intervals are assumed to be equal to (systime..*), where systime denotes the current system time. We conjecture that the assertion language we use is at least as expressive as First-Order Temporal Logic (FOTL) <ref> [Eme90] </ref>. In [Ple95] we show a translation of the future and past fragments of FOTL into the assertion language of Telos. 2.4 Satisfaction of Temporal Assertions In the sequel, we define the notion of satisfaction of temporal formulae and that of temporal integrity constraints in particular.
Reference: [Flo74] <author> J. Florentin. </author> <title> Consistency Auditing of Data Bases. </title> <journal> Computer Journal, </journal> <volume> 17(1) </volume> <pages> 52-58, </pages> <year> 1974. </year>
Reference-contexts: 1 Introduction The maintenance of semantic integrity has been recognized as a cornerstone issue for the development of data bases and knowledge bases alike <ref> [Flo74] </ref>, [EC75], [Ull88], [MCP + 94]. Integrity constraints express application dependent semantics that are not built into the semantics of the knowledge representation language or the data structures used. Additionally, they constitute a means for controlling the quality of information stored in knowledge repositories.
Reference: [GL93] <author> Michel Gertz and Udo Lipeck. </author> <title> Deriving Integrity Maintaining Triggers from Transition Graphs. </title> <booktitle> In International Conference on Data Engineering, </booktitle> <pages> pages 22-29, </pages> <year> 1993. </year>
Reference-contexts: So far, the research community has dealt with the problem of maintaining semantic integrity in contexts such as relational, deductive or object-oriented databases [BDM88], [CW90], [JJ91]. On the other hand, research in temporal databases has almost exclusively adopted a relational model [Kun85], [SHS94], [Cho92a], [Cho92b], <ref> [GL93] </ref>, [SW95]. Work on temporal deductive databases has mainly dealt with the problem of finitely representing infinite temporal properties [KSW90] and with the evaluation of temporal logic programs [AM87], [BCW93]. <p> Last, but not least, the derivation of incrementally evaluable formulae as simplified forms of integrity constraints expressed in the interval based assertion language is examined. Incrementally evaluable constraints lend themselves to an implementation using an active rule model, as, e.g., in <ref> [GL93] </ref>, [CT94] and [SW95].
Reference: [JJ91] <author> M. Jeusfeld and M. Jarke. </author> <title> From Relational to Object-Oriented Integrity Simplification. </title> <booktitle> In 2nd Int. Conference on Deductive and Object-Oriented Databases, </booktitle> <pages> pages 460-477, </pages> <year> 1991. </year>
Reference-contexts: So far, the research community has dealt with the problem of maintaining semantic integrity in contexts such as relational, deductive or object-oriented databases [BDM88], [CW90], <ref> [JJ91] </ref>. On the other hand, research in temporal databases has almost exclusively adopted a relational model [Kun85], [SHS94], [Cho92a], [Cho92b], [GL93], [SW95]. Work on temporal deductive databases has mainly dealt with the problem of finitely representing infinite temporal properties [KSW90] and with the evaluation of temporal logic programs [AM87], [BCW93]. <p> t) ^ (s = s 0 ) ) works in (u; d; t)) (at 1993::fl) 2 4 A formula is rectified if no two quantifiers introduce the same variable [BDM88]. 5 This class of constraints is equivalent to both the restricted quantification form of [BDM88] and the range form of <ref> [JJ91] </ref>. Constraints, as well as deductive rules, are associated with history and belief time intervals. If no such association appears explicitly with their definition, both intervals are assumed to be equal to (systime..*), where systime denotes the current system time. <p> Our method builds on the compilation method that was initially proposed in [BDM88] and was later adapted to an object-oriented setting in <ref> [JJ91] </ref>. Our method extends the latter by the treatment of temporal constraints and by the introduction of an efficient compilation scheme that allows us optimize the computation of implicit updates and to perform additional simplifications. <p> The definition of relevance found in <ref> [JJ91] </ref> is not sufficient in the presence of time. The following definition provides sufficient conditions for "relevance" of a 7 constraint to an update, by considering the relationship of the history time intervals participating in the literals of the constraint and the update. <p> It can however depend transitively on a rule whose conclusion literal matches a condition literal of a rule on which the constraint depends either directly or transitively. Formally, we can define the notions of dependence and direct dependence along the lines of <ref> [JJ91] </ref>. <p> The key issue in compilation is to associate every constraint or rule body with the updates that may affect its evaluation. Moreover, for the purpose of restricting the search space for constraints or rules affected by a transaction the concept of a concerned class <ref> [JJ91] </ref>, [Ple93a] is used.
Reference: [KSW90] <author> F. Kabanza, J-M. Stevenne, and P. Wolper. </author> <title> Handling Infinite Temporal Data. </title> <booktitle> In PODS-90, </booktitle> <pages> pages 392-403, </pages> <year> 1990. </year>
Reference-contexts: On the other hand, research in temporal databases has almost exclusively adopted a relational model [Kun85], [SHS94], [Cho92a], [Cho92b], [GL93], [SW95]. Work on temporal deductive databases has mainly dealt with the problem of finitely representing infinite temporal properties <ref> [KSW90] </ref> and with the evaluation of temporal logic programs [AM87], [BCW93]. This paper constitutes a proposal towards devising efficient methods for enforcing temporal integrity constraints in a structurally object-oriented framework and in the presence of temporal deductive rules. Temporal integrity maintenance encompasses several challenging research issues.
Reference: [Kun85] <author> C.H. Kung. </author> <title> On Verification of Database Temporal Constraints. </title> <booktitle> In Proceedings ACM-SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 169-179, </pages> <year> 1985. </year> <month> 16 </month>
Reference-contexts: So far, the research community has dealt with the problem of maintaining semantic integrity in contexts such as relational, deductive or object-oriented databases [BDM88], [CW90], [JJ91]. On the other hand, research in temporal databases has almost exclusively adopted a relational model <ref> [Kun85] </ref>, [SHS94], [Cho92a], [Cho92b], [GL93], [SW95]. Work on temporal deductive databases has mainly dealt with the problem of finitely representing infinite temporal properties [KSW90] and with the evaluation of temporal logic programs [AM87], [BCW93].
Reference: [LT85] <author> J. Lloyd and R. Topor. </author> <title> A Basis for Deductive Database Systems. </title> <journal> Journal of Logic Programming, </journal> <volume> 2 </volume> <pages> 93-109, </pages> <year> 1985. </year>
Reference-contexts: Their general form is: DR 8x 1 =C 1 . . . 8x n =C n (F ) A) where F is subject to the same restrictions as above and A is an atomic formula of the assertion language. In addition, deductive rules are assumed to be stratified <ref> [LT85] </ref>.
Reference: [MBJK90] <author> J. Mylopoulos, A. Borgida, M. Jarke, and M. Koubarakis. </author> <title> Telos: A Language for Representing Knowledge in Information Systems. </title> <journal> ACM Transactions On Information Systems, </journal> <volume> 8(4) </volume> <pages> 325-362, </pages> <year> 1990. </year>
Reference-contexts: In this document, we use a reified temporal logic based on time intervals for the expression of integrity constraints and deductive rules. This language is a variation of the assertion language of Telos <ref> [MBJK90] </ref>. Integrity constraint verification consists of determining whether all integrity constraints are satisfied in the state resulting after an update. <p> The language definition is preceded by a brief introduction to the underlying data model. Finally, the notion of satisfaction of temporal formulae is defined. 2.1 Overview of Telos The representational framework of Telos <ref> [MBJK90] </ref> constitutes a generalization of graph-theoretic data structures used in semantic networks, semantic data models and object-oriented representations. Telos treats attributes as first-class citizens, supports a powerful classification mechanism which enhances extensibility and offers special representational and inferential mechanisms for temporal knowledge. <p> This section introduces the core features of Telos which are divided into structural, temporal and assertional features. We only present features that are relevant to the processing of constraints and rules. A more comprehensive description of the language can be found elsewhere <ref> [MBJK90] </ref>. 2.2 Structural Component A Telos knowledge base consists of structured objects built out of two kinds of primitive units, individuals and attributes. Individuals are intended to represent entities (concrete ones such as John, or abstract ones such as Person), while attributes represent binary relationships between entities or other relationships.
Reference: [MCP + 94] <author> J. Mylopoulos, V. Chaudhri, D. Plexousakis, A. Shrufi, and T. Topaloglou. </author> <title> Building Knowledge Base Management Systems: A Progress Report. </title> <type> Technical Report DKBS-TR-94-4, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1994. </year>
Reference-contexts: 1 Introduction The maintenance of semantic integrity has been recognized as a cornerstone issue for the development of data bases and knowledge bases alike [Flo74], [EC75], [Ull88], <ref> [MCP + 94] </ref>. Integrity constraints express application dependent semantics that are not built into the semantics of the knowledge representation language or the data structures used. Additionally, they constitute a means for controlling the quality of information stored in knowledge repositories.
Reference: [Nic82] <author> J.-M. Nicolas. </author> <title> Logic for Improving Integrity Checking in Relational Databases. </title> <journal> Acta Informatica, </journal> <volume> 18 </volume> <pages> 227-253, </pages> <year> 1982. </year>
Reference-contexts: Furthermore, the need for modeling evolving domains has given rise to challenging research issues relating to the incorporation of time in knowledge bases. The by now well established notions of static and transitional integrity <ref> [Nic82] </ref>, [ELG84] must be generalized to that of temporal integrity. The problem of ensuring that the correctness criteria expressed by integrity constraints will not be violated in a dynamic environment, now has an additional dimension, namely that of monitoring time-dependent properties.
Reference: [Ple93a] <author> D. Plexousakis. </author> <title> Integrity Constraint and Rule Maintenance in Temporal Deductive Knowledge Bases. </title> <booktitle> In Proceedings of the 19th Int. Conference on Very Large Data Bases, </booktitle> <pages> pages 146-157, </pages> <address> Dublin, IR, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Financial and trading applications involve complex operations on time-series, e.g. stock prices over time, and need to preserve constraints on the time-varying characteristics of the objects involved [CS93]. Temporal databases [Tan93] and their extensions [BCW93], <ref> [Ple93a] </ref> need robust mechanisms for ensuring that time-dependent properties do not become violated due to the evolution of the database or the passage of time. The properties that need to be ensured may refer to arbitrarily many states, past or future, of the database. <p> This paper proposes such an incremental compile-time simplification methods for temporal integrity constraints and deductive rules. The basic approach was described in <ref> [Ple93a] </ref>. In this paper we focus on enhancements of the method with respect to the treatment of temporal constraints for arbitrary transactions. Specifically, we propose compile-time simplifications to the formulae expressing temporal integrity constraints and deductive rules. <p> Belief time can be treated in a similar manner, as shown in <ref> [Ple93a] </ref>. 4 t Finally, att (x y,t) denotes that y is a value of the attribute att of x for t. Also, for any terms x and y and any evaluable predicate , x y is an atomic formula with the obvious meaning. <p> It exploits the assumptions that, first, the knowledge base is known to satisfy its constraints prior to an update and, second, that the type of updates can be anticipated. This knowledge is used for generating simplified forms of constraints and for calculating implicit changes to the knowledge base. In <ref> [Ple93a] </ref>, we presented a compilation method that produced simplified forms of constraints and rules with respect to a single affecting update. In this section, we extend the method to treat dyanmic constraints in a special manner and to take into account multiple updates. <p> The key issue in compilation is to associate every constraint or rule body with the updates that may affect its evaluation. Moreover, for the purpose of restricting the search space for constraints or rules affected by a transaction the concept of a concerned class [JJ91], <ref> [Ple93a] </ref> is used. Definition 3.4 (Concerned Class) The Concerned Class for a literal L is the most specialized class CC such that, inserting or deleting an instance of CC can affect the truth of L and the time intervals of L and CC are unifiable. [Ple93a] presents a set of rules <p> of a concerned class [JJ91], <ref> [Ple93a] </ref> is used. Definition 3.4 (Concerned Class) The Concerned Class for a literal L is the most specialized class CC such that, inserting or deleting an instance of CC can affect the truth of L and the time intervals of L and CC are unifiable. [Ple93a] presents a set of rules for the compile-time derivation of concerned classes of literals that occur in integrity constraints or bodies of deductive rules. <p> The scheme presented in <ref> [Ple93a] </ref> is extended to take into account the specific temporal interrelationships between constraints and rules. 4.1 Graph Construction and Properties The definitions of direct and transitive dependence of constraints/rules on other rules define a directed graph representing how literals, implicitly derived from deductive rules, can affect the integrity of the knowledge <p> For an average number of literals per constraint or rule greater than 2 the dependence graph of a knowledge base is sparse <ref> [Ple93a] </ref>. The dependence graph is constructed once when the knowledge base is compiled and is updated incrementally when new rules or constraints are inserted or deleted. Although sparse, the dependence graph for a large knowledge base will be quite large, even too large to fit in main memory. <p> The problem of storage of the dependence graph in secondary storage remains as a future research problem. Below we list some of the properties that the above compilation scheme enjoys and which contribute to the efficiency of integrity constraint checking. These properties are elaborated on in <ref> [Ple93a] </ref> and [Ple94], where performance results with randomly generated dependence graphs are presented. These results attest to the efficiency of the compilation scheme. A dependence graph reflects both the logical and temporal interdependence of rules and constraints.
Reference: [Ple93b] <author> D. Plexousakis. </author> <title> Semantical and Ontological Considerations in Telos: a Lanugage for Knowledge Representation. </title> <journal> Computational Intelligence, </journal> <volume> 9(1) </volume> <pages> 41-72, </pages> <year> 1993. </year>
Reference-contexts: Telos treats attributes as first-class citizens, supports a powerful classification mechanism which enhances extensibility and offers special representational and inferential mechanisms for temporal knowledge. In addition, there have been formal accounts of the semantics of the language based on an axiomatic approach [Sta86] or a possible-worlds model <ref> [Ple93b] </ref>. This section introduces the core features of Telos which are divided into structural, temporal and assertional features. We only present features that are relevant to the processing of constraints and rules.
Reference: [Ple94] <author> D. Plexousakis. </author> <title> Integrity Maintenance in a Telos based KBMS, </title> <note> 1994. Submitted to IEEE-TKDE. </note>
Reference-contexts: The proofs of soundness of simplification and of the completeness of temporal simplification are omitted due to lack of space. They can be found in <ref> [Ple94] </ref> and [Ple95]. The following theorem expresses the soundness of the simplification. <p> A dependence graph may contain cycles among deductive rule nodes. This happens in the case the knowledge base contains mutually recursive rules. As shown in <ref> [Ple94] </ref> the graph is free of trivial cycles and may contain cycles of length at most equal to the number of deductive rules participating in the same recursive scheme. <p> The problem of storage of the dependence graph in secondary storage remains as a future research problem. Below we list some of the properties that the above compilation scheme enjoys and which contribute to the efficiency of integrity constraint checking. These properties are elaborated on in [Ple93a] and <ref> [Ple94] </ref>, where performance results with randomly generated dependence graphs are presented. These results attest to the efficiency of the compilation scheme. A dependence graph reflects both the logical and temporal interdependence of rules and constraints. <p> Moreover, the dependence graph structure is incrementally modifiable to accommodate insertion/deletions of rules and constraints without having to recompile the entire graph structure. <ref> [Ple94] </ref> presents algorithms for efficiently maintaining the graph's precomputed transitive closure. 4.2 Optimizations We now present additional optimizations that take into account the temporal properties of constraints and rules. These optimizations take place after the graph's construction and aim at producing more efficiently evaluable temporal formulae.
Reference: [Ple95] <author> D. Plexousakis. </author> <title> On the Efficient Enforcement of Integrity Constraints in Temporal Deductive Knowledge Bases. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1995. </year> <month> Forthcoming. </month>
Reference-contexts: If no such association appears explicitly with their definition, both intervals are assumed to be equal to (systime..*), where systime denotes the current system time. We conjecture that the assertion language we use is at least as expressive as First-Order Temporal Logic (FOTL) [Eme90]. In <ref> [Ple95] </ref> we show a translation of the future and past fragments of FOTL into the assertion language of Telos. 2.4 Satisfaction of Temporal Assertions In the sequel, we define the notion of satisfaction of temporal formulae and that of temporal integrity constraints in particular. <p> The proofs of soundness of simplification and of the completeness of temporal simplification are omitted due to lack of space. They can be found in [Ple94] and <ref> [Ple95] </ref>. The following theorem expresses the soundness of the simplification. <p> These optimizations exploit the semantics of constraint satisfaction and the organization of simplified forms in the dependence graph structure. Similar simplification steps can be performed when constraints contain belief time, in addition to history time <ref> [Ple95] </ref>. Another contribution is the simplification of temporal formulae with respect to arbitrary transactions. The simplified formulae produced by the compile-time simplification method are used in order to derive a single formula that suffices to be verified at update-time when a transaction takes place.
Reference: [SHS94] <author> S. Schwiderski, T. Hartmann, and G. Saake. </author> <title> Monitoring Temporal Preconditions in a Behavior Oriented Object Model. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 14(1) </volume> <pages> 143-186, </pages> <year> 1994. </year>
Reference-contexts: So far, the research community has dealt with the problem of maintaining semantic integrity in contexts such as relational, deductive or object-oriented databases [BDM88], [CW90], [JJ91]. On the other hand, research in temporal databases has almost exclusively adopted a relational model [Kun85], <ref> [SHS94] </ref>, [Cho92a], [Cho92b], [GL93], [SW95]. Work on temporal deductive databases has mainly dealt with the problem of finitely representing infinite temporal properties [KSW90] and with the evaluation of temporal logic programs [AM87], [BCW93]. <p> Current research focuses on devising historical knowledge minimization techniques for integrity constraints, in the lines of [Cho92a], [Cho92b], and [SL88], <ref> [SHS94] </ref> but in the richer context of temporal deductive knowledge bases introduced in this paper. The reuse and adaptation of proofs of temporal formulae satisfaction over dependence graphs is investigated.
Reference: [SL88] <author> G. Saake and U. Lipeck. </author> <title> Foundations of Temporal Integrity Monitoring. </title> <editor> In C. Roland, editor, </editor> <booktitle> Temporal Aspects in Information Systems, </booktitle> <pages> pages 235-249. </pages> <publisher> North Holland, </publisher> <year> 1988. </year>
Reference-contexts: Hence, a single formula incorporating the affecting updates of an arbitrary transaction needs only to be verified as opposed to a number of more complex formulae incorporating only individual updates. Current research focuses on devising historical knowledge minimization techniques for integrity constraints, in the lines of [Cho92a], [Cho92b], and <ref> [SL88] </ref>, [SHS94] but in the richer context of temporal deductive knowledge bases introduced in this paper. The reuse and adaptation of proofs of temporal formulae satisfaction over dependence graphs is investigated.
Reference: [Sta86] <author> Martin Stanley. </author> <title> CML: A Knowledge Representation Language with Application to Requirements Modelling. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1986. </year>
Reference-contexts: Telos treats attributes as first-class citizens, supports a powerful classification mechanism which enhances extensibility and offers special representational and inferential mechanisms for temporal knowledge. In addition, there have been formal accounts of the semantics of the language based on an axiomatic approach <ref> [Sta86] </ref> or a possible-worlds model [Ple93b]. This section introduces the core features of Telos which are divided into structural, temporal and assertional features. We only present features that are relevant to the processing of constraints and rules.
Reference: [SW95] <author> A.P. Sitsla and O. Wolfson. </author> <title> Temporal Conditions and Integrity Constraints in Active Database Systens. </title> <booktitle> In Proceedings of ACM SIGMOD-95, </booktitle> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: So far, the research community has dealt with the problem of maintaining semantic integrity in contexts such as relational, deductive or object-oriented databases [BDM88], [CW90], [JJ91]. On the other hand, research in temporal databases has almost exclusively adopted a relational model [Kun85], [SHS94], [Cho92a], [Cho92b], [GL93], <ref> [SW95] </ref>. Work on temporal deductive databases has mainly dealt with the problem of finitely representing infinite temporal properties [KSW90] and with the evaluation of temporal logic programs [AM87], [BCW93]. <p> Last, but not least, the derivation of incrementally evaluable formulae as simplified forms of integrity constraints expressed in the interval based assertion language is examined. Incrementally evaluable constraints lend themselves to an implementation using an active rule model, as, e.g., in [GL93], [CT94] and <ref> [SW95] </ref>.
Reference: [Tan93] <author> A. et al. Tansel. </author> <title> Temporal Databases, Theory Design and Implementation. </title> <address> Ben-jamin/Cummings, </address> <year> 1993. </year>
Reference-contexts: Financial and trading applications involve complex operations on time-series, e.g. stock prices over time, and need to preserve constraints on the time-varying characteristics of the objects involved [CS93]. Temporal databases <ref> [Tan93] </ref> and their extensions [BCW93], [Ple93a] need robust mechanisms for ensuring that time-dependent properties do not become violated due to the evolution of the database or the passage of time. The properties that need to be ensured may refer to arbitrarily many states, past or future, of the database.
Reference: [Ull88] <author> J. Ullman. </author> <title> Fundamentals of Database and Knowledge-base Systems, volume 1. </title> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: 1 Introduction The maintenance of semantic integrity has been recognized as a cornerstone issue for the development of data bases and knowledge bases alike [Flo74], [EC75], <ref> [Ull88] </ref>, [MCP + 94]. Integrity constraints express application dependent semantics that are not built into the semantics of the knowledge representation language or the data structures used. Additionally, they constitute a means for controlling the quality of information stored in knowledge repositories.
Reference: [WMW89] <author> R. Wieringa, J-J. Meyer, and H. Weigand. </author> <title> Specifying Dynamic and Deontic Integrity Constraints. </title> <journal> Data and Knowledge Engineering, </journal> <volume> 4 </volume> <pages> 157-189, </pages> <year> 1989. </year> <month> 17 </month>
Reference-contexts: A first such issue is the specification of constraints. We will argue for a declarative, as opposed to procedural, specification of integrity constraints. First-Order Temporal Logic [Eme90] and several of its variants or subsets have been the most popular formalisms for expressing temporal constraints. Deontic variants of Dynamic Logic <ref> [WMW89] </ref> have also been proposed for the expression of dynamic and deontic properties. In this document, we use a reified temporal logic based on time intervals for the expression of integrity constraints and deductive rules. This language is a variation of the assertion language of Telos [MBJK90].
References-found: 33

