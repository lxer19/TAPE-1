URL: ftp://ftp.cs.virginia.edu/pub/techreports/IPC-89-09.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: The ADAMS Preprocessor  
Author: Paul K. Baron 
Note: This research was supported in part by DOE Grant #DE-F605-88ER25063 and JPL Contract #957721  
Address: Charlottesville, VA 22903  
Affiliation: Institute for Parallel Computation School of Engineering and Applied Science University of Virginia  
Date: December 4, 1989  
Pubnum: IPC-TR-89-009  
Abstract-found: 0
Intro-found: 0
Reference: [CDV88] <author> M. J. Carey, D. J. DeWitt and S. L. Vandenberg, </author> <title> A Data Model and Query Language for EXODUS, </title> <booktitle> Proc. SIGMOD Conf., </booktitle> <address> Chicago, IL, </address> <month> June </month> <year> 1988, </year> <pages> 413-423. </pages>
Reference-contexts: ADAMS-related issues 5.1. Embedded language issues The design of ADAMS as a "common interface language" which is embedded in multiple host languages is a fundamental design decision. An alternative approach is to create a complete new languageoften by extending an existing one, as was done in EXODUS <ref> [CDV88] </ref> with its E language, which is an extension of C++. There are advantages and disadvantages to the ADAMS approach.
Reference: [GKP89] <author> R. L. Graham, D. E. Knuth and O. Patashnik, </author> <title> Concrete Mathematics, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year>
Reference-contexts: So to find the number of elements in a k-dimensional tetrahedron of size n, all one must do is sum up the elements in (k - 1) dimensional tetrahedrons ranging from size 0 to n. In <ref> [GKP89] </ref> it is shown that k =0 n I r + k M = L n O . The formula for f (2, k) is already in the proper form for this summation.
Reference: [Jan89] <author> S. A. Janet Jr., </author> <title> The ADAMS Storage Management System, </title> <institution> IPC TR-89-008, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: For more details about the ADAMS low-level storage manager, refer to <ref> [Jan89] </ref>. 1.3. Sample ADAMS program In the next sections, we will examine the operation of the preprocessor in greater detail by thoroughly examing the lexical analyzer, parser, and code generator. The focus will be on understanding these components and their interactions with each other and with other components of ADAMS.
Reference: [Joh78] <author> S. C. Johnson, </author> <title> A Portable Compiler: Theory and Practice, </title> <booktitle> Proc. 5th ACM Symp. on Prin. of Prog. </booktitle> <address> Lang., </address> <month> Jan. </month> <year> 1978, </year> <pages> 97-104. </pages>
Reference-contexts: The Parser The parser is the single most important component of the preprocessor, so understanding its operation is essential. Since it is a YACC program, a short explanation of YACC is in order. For more a detailed explanation see <ref> [Joh78, KeP84] </ref> or any UNIX documentation. A YACC program takes an input file, parses it, and determines whether or not the input followed a set of rules specifying the legal input. YACC decides whether or not the input is a string recognized by a specific grammar.
Reference: [KeP84] <author> B. Kernighan and R. Pike, </author> <title> The UNIX Programming Environment, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1984. </year>
Reference-contexts: The Parser The parser is the single most important component of the preprocessor, so understanding its operation is essential. Since it is a YACC program, a short explanation of YACC is in order. For more a detailed explanation see <ref> [Joh78, KeP84] </ref> or any UNIX documentation. A YACC program takes an input file, parses it, and determines whether or not the input followed a set of rules specifying the legal input. YACC decides whether or not the input is a string recognized by a specific grammar.
Reference: [Klu88] <author> C. Klumpp, </author> <title> Implementation of an ADAMS Prototype: the ADAMS Preprocessor, </title> <institution> IPC TR-88-005, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: Eventually the users' source program is exhausted and preprocessing ends with the new C program as output. 1.2.2. Brief history of the ADAMS preprocessor The current preprocessor is for the most recent version of ADAMS. A prototype was developed for an earlier version of ADAMS <ref> [Klu88] </ref>.
Reference: [PFG89a] <author> J. L. Pfaltz, J. C. French, A. Grimshaw, S. H. Son, P. Baron, S. Janet, Y. Lin, L. Loyd and R. McElrath, </author> <title> Implementation of the ADAMS Database System, </title> <institution> IPC TR-89-010, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: Add the entry definition to the dictionary. There are a number of items that can be added to an entry definition: superclass image attribute_set map_set validating method element_class instant_class There are also other items that could be added for the codomains, but have not been implemented yet. Refer to <ref> [PFG89a] </ref> for more detailed information on the dictionary. First we will briefly describe each of these items, and then examine each type of declaration to see which of these may be used for each.
Reference: [PFG89b] <author> J. L. Pfaltz, J. C. French, A. Grimshaw, S. H. Son, P. Baron, S. Janet, A. Kim, C. Klumpp, Y. Lin and L. Loyd, </author> <title> The ADAMS Database Language, </title> <institution> IPC TR-89-002, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: 1. Overview This technical report describes the implementation and usage of the preprocessor for the ADAMS (Advanced DAta Management System) database language developed by the ADAMS group of the Institute for Parallel Computation, of the University of Virginia. The ADAMS language is described in great detail in a separate document <ref> [PFG89b] </ref>. As such, only a brief overview of the language will be presented in this report. Readers with questions on the details of the language itself are urged to refer to that report.
Reference: [Str87] <author> B. Stroustrup, </author> <title> The C++ Programming Language, </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1987. </year>
Reference-contexts: C/C++ interface problems The run time ADAMS system has been implemented in C++, an object-oriented programming language that is a superset of C <ref> [Str87] </ref> The preprocessor assumes that C is the host language and must accept and generate only legal C code. Although C and C++ are similar, they are not the same language.
References-found: 9

