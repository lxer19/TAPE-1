URL: http://www.cs.ucsb.edu/TRs/techreports/TRCS96-21.ps
Refering-URL: http://www.cs.ucsb.edu/TRs/
Root-URL: 
Title: Tertiary Storage: Current Status and Future Trends  
Author: S. Prabhakar D. Agrawal A. El Abbadi A. Singh 
Address: Santa Barbara, CA 93106  
Affiliation: Department of Computer Science University of California  
Abstract: This report summarizes current state of the art in tertiary storage systems. We begin with a comprehensive discussion of magnetic tape and optical storage technologies. This is followed by a classification of commercial products based on their performance characteristics. Our analysis of product data indicates that in contrast to disk technology, tertiary storage products have significant variablility in terms of data transfer rates as well as other performance figures. We then summarize efforts in the areas of operating systems, databases and advanced applications to integrate tertiary storage. We point out that different assumptions about the underlying technology result in entirely different algorithms and system design. We conclude the report with a speculation of future trends. 
Abstract-found: 1
Intro-found: 1
Reference: [CDK + 95] <author> L. T. Chen, R. Drach, M. Keating, S. Louise, D. Rotem, and A. Shoshani. </author> <title> Efficient organization and access of multi-dimensional datasets on tertiary storage systems. </title> <booktitle> In Information Systems, </booktitle> <pages> pages 155-83. </pages> <publisher> Elsevier Science, </publisher> <year> 1995. </year>
Reference-contexts: The reason why data are usually not available in one location on the storage media is that traditionally data is stored in the order of generation. Two independent studies by Sarawagi and Stonebraker [SS94] and Chen et. al <ref> [CDK + 95] </ref>, have suggested that such data should be stored in a manner that facilitates retrieval for specific access patterns. <p> Experimental results indicate that these methods are very effective in reducing the access times for large arrays. Chunking is found to be useful even if the access patterns are not known. The work done by Chen et al <ref> [CDK + 95] </ref> focuses on the storage techniques for multidimensional data produced by scientific applications on tertiary media, more specifically tapes.
Reference: [Che94] <author> A. L. Chervanak. </author> <title> Tertiary Storage: An Evaluation of New Applications. </title> <type> PhD thesis, </type> <institution> Univ. of California, Berkeley, </institution> <year> 1994. </year>
Reference-contexts: Consequently, there is very little information about their use or research based on these technologies, hence they are not discussed further more details can be found in <ref> [Che94, HS96a] </ref>. 2.1.1 Magnetic Tapes Tapes offer the highest storage densities of all current storage media, however they are sequential access devices and most allow append-only updates. This is the reason why tapes have been historically used as an archival medium.
Reference: [CPK95] <author> A. L. Chervenak, D. A. Patterson, and R. H. Katz. </author> <title> Storage systems for movies-on-demand video servers. </title> <booktitle> In Proceedings of the Fourteenth IEEE Symposium on Mass Storage Systems, </booktitle> <pages> pages 246-56, </pages> <address> Los Alamitos, CA, </address> <month> Sep. </month> <title> 1995. </title> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Another application that is an appropriate candidate for tertiary storage is video-on-demand. This application has two characteristics once the retrieval of a movie is initiated, then the sequence of data access for that request is completely determined, and there is a stron timing requirement for data retrieval. Preliminary studies <ref> [FR94, CPK95] </ref> indicate that although the cost effectiveness of tertiary memory is very attractive for video-on-demand systems, the current performance of tape drives and tape libraries is inadequate.
Reference: [DK93] <author> A. L. Drapeau and R. H. Katz. </author> <title> Striping in large tape libraries. </title> <booktitle> In Proc. of Supercomputing, </booktitle> <pages> pages 378-387, </pages> <address> Portland, Oregon, 1993. </address> <publisher> ACM. </publisher>
Reference-contexts: Could a similar technique be employed to improve the low transfer rate of tertiary devices? Drapeau and Katz have studied striping in the context of large tape libraries in the presence of concurrent random I/O <ref> [DK93] </ref>. They have found that although striping is beneficial for applications whose access patterns consist mainly of large sequential accesses where only one request is handled at a time, it is not necessarily beneficial for concurrent random access patterns.
Reference: [FM96] <author> D. A. Ford and J. Myllymaki. </author> <title> A log-structured organization for tertiary storage. </title> <booktitle> In Proceedings of the Twelfth International Conference on Data Engineering, </booktitle> <pages> pages 20-7, </pages> <address> New Orleans, Louisiana, </address> <year> 1996. </year>
Reference-contexts: Garbage collection in HighLight is done only on the segments stored in secondary storage and although garbage collection of tertiary resident segments is planned, it has not been implemented yet. In contrast, a log structured tertiary file system has been proposed by Ford and Myllymaki in <ref> [FM96] </ref> which manages data on tertiary storage alone. Segment buffers are used to hold data that is being written to tertiary storage and when these become full they are copied to a tertiary medium that is loaded on the write drive.
Reference: [FR94] <author> C. Federighi and L.A. Rowe. </author> <title> A distributed hierarchical storage manager for a video-on-demand system. </title> <booktitle> In Proceedings of SPIE The International Society for Optical Engineering, </booktitle> <pages> pages 185-97, </pages> <address> San Jose, CA, </address> <month> Feb </month> <year> 1994. </year>
Reference-contexts: Another application that is an appropriate candidate for tertiary storage is video-on-demand. This application has two characteristics once the retrieval of a movie is initiated, then the sequence of data access for that request is completely determined, and there is a stron timing requirement for data retrieval. Preliminary studies <ref> [FR94, CPK95] </ref> indicate that although the cost effectiveness of tertiary memory is very attractive for video-on-demand systems, the current performance of tape drives and tape libraries is inadequate.
Reference: [GM95] <author> L. Golubchik and R. Muntz. </author> <title> Analysis of striping techniques in robotic storage libraries. </title> <booktitle> In Pro ceedings of the Fourteenth IEEE Symposium on Mass Storage Systems, </booktitle> <pages> pages 225-38, </pages> <address> Monterey, CA, </address> <year> 1995. </year>
Reference-contexts: The evaluations have been done through event based simulation of large tape libraries. A similar analytical study of striping in libraries has been conducted by Golubchik and Muntz <ref> [GM95] </ref>. The model developed is a more general open system model with multiple sizes of requests within a single run and various stripe widths. The stripe width is the number of media units across which a file is striped.
Reference: [HS96a] <author> B. Hillyer and A. Silberschatz. </author> <title> Storage technology: Status, issues and oppurtunities. </title> <type> Unpublished Manuscript, </type> <month> January </month> <year> 1996. </year>
Reference-contexts: Consequently, there is very little information about their use or research based on these technologies, hence they are not discussed further more details can be found in <ref> [Che94, HS96a] </ref>. 2.1.1 Magnetic Tapes Tapes offer the highest storage densities of all current storage media, however they are sequential access devices and most allow append-only updates. This is the reason why tapes have been historically used as an archival medium.
Reference: [HS96b] <author> B. K. Hillyer and A. Silberschatz. </author> <title> On the modeling and performance characteristics of a serpentine tape. </title> <booktitle> In SIGMETRICS, </booktitle> <pages> pages 170-9, </pages> <address> Canada, </address> <year> 1996. </year>
Reference-contexts: They have studied the problem of scheduling a set of I/O requests for a single DLT tape. The effectiveness of various strategies has been evaluated using a model of the DLT tapes that they have developed in <ref> [HS96b] </ref>.
Reference: [HS96c] <author> B. K. Hillyer and A. Silberschatz. </author> <title> Random I/O scheduling in online tertary storage. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <address> Canada, </address> <year> 1996. </year>
Reference-contexts: This idea has been exploited for specific access patterns in almost all research activities on tertiary storage including the work done with DBMSs and other applications. Silberschatz and Hillyer have studied reordering in the general context for batched I/O requests for single DLT serpentine tapes <ref> [HS96c] </ref>. They have studied the problem of scheduling a set of I/O requests for a single DLT tape. The effectiveness of various strategies has been evaluated using a model of the DLT tapes that they have developed in [HS96b].
Reference: [KDST95] <author> M.G. Kienzle, A. Dan, D. Sitaram, and W. Tetzlaff. </author> <title> Using tertiary storage in video-on-demand servers. </title> <booktitle> In Digest of Papers. COMPCON '95, </booktitle> <pages> pages 225-33, </pages> <year> 1995. </year>
Reference-contexts: In spite of these limitations, new playback techniques based on playback linking can be employed to succesfully use optical storage for video-on-demand [MSNN96]. Furthermore, it has been shown that if popularity of videos is non uniform, then combination of disk and tape storage becomes viable for video-on-demand applications <ref> [SHT96, KDST95] </ref>.
Reference: [KSS93] <author> J. Kohl, M. Stonebraker, and C. Staelin. HighLight: </author> <title> a file system for tertiary storage. </title> <booktitle> In Proceedings of the Twelfth IEEE Symposium on Mass Storage Systems, </booktitle> <pages> pages 157-61, </pages> <address> Monetery, CA, </address> <year> 1993. </year>
Reference-contexts: Due to the sequential nature of access to tertiary systems, a log structured file systems appears to be a natural fit for providing efficient access. Kohl et al <ref> [KSS93] </ref> extended LFS to tertiary storage and developed the HighLight tertiary storage file management system. Unlike UniTree, HighLight provides the capability of migrating parts of files and metadata about files to tertiary storage. Highlight exports a file system that incorporates both secondary and tertiary storage.
Reference: [LLKS85] <author> E. L. Lawler, J. K. Lenstra, A. H. G. Rinnooy Kan, and D. B. Shmoys. </author> <title> The Traveling Salesman Problem. </title> <publisher> Wiley, </publisher> <address> Chichester, </address> <year> 1985. </year>
Reference-contexts: Simulation results indicate that for a small number of requests the best strategy is brute force, i.e. evaluate all combinations and choose the best, for larger sets, up to about 1500 requests, the best policy is to use a greedy algorithm for the asymmetric traveling salesman problem discussed in <ref> [LLKS85] </ref> called LOSS which has quadratic running time, and for even larger requests it is best to scan the whole tape sequentially and service the requests in the order in which they are placed on the tape.
Reference: [McC90] <author> F. McClain. DataTree and UniTree: </author> <title> Software for file and storage management. </title> <booktitle> In IEEE, </booktitle> <pages> pages 126-8, </pages> <year> 1990. </year>
Reference-contexts: As data is used up by the computation, the freed space is used to buffer the data from tape. 3.1.2 File Systems for Tertiary Storage One of the earliest efforts in this direction resulted in the production of the DataTree and UniTree commercial hierarchical file and storage management systems <ref> [McC90] </ref>. DataTree is MVS-based and UniTree is UNIX-based and both are the commercial versions of file systems developed at the Los Alamos National Laboratory and the Lawrence Livermore National Laboratory, respectively. The Unitree Mass Storage System, exports a Unix-like file system interface for secondary and tertiary storage.
Reference: [ML95] <author> J. Myllymaki and M. Livny. </author> <title> Disk-tape joins: Synchronizing disk and tape access. </title> <booktitle> In Joint International Conference on Measurement and Modeling of ComputerSystems. SIGMETRICS '95/PERFORMANCE '95, </booktitle> <pages> pages 279-90, </pages> <address> Ottawa, Canada, </address> <year> 1995. </year>
Reference-contexts: Research efforts should therefore consider the case where the disk is faster as well as the case where the tape is faster <ref> [ML95] </ref>. The storage capacities of tapes also show a similar distribution when compared to the storage capacities of magnetic disks. Tapes vary in capacity from as low as 1.3 GB to 165 GB. Magnetic disks on the other hand have capacities of about 1GB to 10GB. <p> These techniques result in about two orders of magnitude savings in the number of switches and fetches. Myllymaki and Livny, on the other hand, have studied join operations where one relation resides on secondary storage and the other on tertiary storage <ref> [ML95] </ref>. They have studied the performance and disk space requirements of various algorithms as the amount of main memory available to the join algorithm is varied. <p> The benefits of executing disk and tape I/O in parallel have also been investigated. The authors <ref> [ML95] </ref> have shown that contrary to the conventional choice of the smaller relation to be the outer relation, when the larger relation is stored on a slower device, it is more efficient to select the the larger relation to be the outer relation.
Reference: [ML96] <author> J. Myllymaki and M. Livny. </author> <title> Efficient buffering for concurrent disk and tape I/O. </title> <booktitle> In To appear in Proceedings of Performance '96, </booktitle> <year> 1996. </year>
Reference-contexts: Users could then attempt to improve performance by techniques such as clustering data that is accessed together. On the other hand, data reorganization based upon observed access patterns could be automatically handled by the operating system, in a manner that is transparent to the user. Myllymaki and Livny <ref> [ML96] </ref> have also investigated the benefits of executing tape and disk I/O in parallel. The authors show that any application that requires access to both disk and tape resident data concurrently, can benefit from overlapping the disk and tape I/O.
Reference: [MSNN96] <author> T. Mori, H. Suzuki, K. Nishimura, and H. Nakano. </author> <title> Playback techniques for a video-on-demand system using an optical mass storage system. </title> <journal> Japanese Journal of Applied Physics, </journal> <volume> 35(1B):495-9, </volume> <month> January </month> <year> 1996. </year>
Reference-contexts: In spite of these limitations, new playback techniques based on playback linking can be employed to succesfully use optical storage for video-on-demand <ref> [MSNN96] </ref>. Furthermore, it has been shown that if popularity of videos is non uniform, then combination of disk and tape storage becomes viable for video-on-demand applications [SHT96, KDST95].
Reference: [OD89] <author> J. K. Ousterhout and F. Douglis. </author> <title> Beating the I/O bottleneck: A case for log-structured file systems. </title> <booktitle> In Operating Systems Review, </booktitle> <volume> volume 23, </volume> <pages> pages 11-27, </pages> <year> 1989. </year>
Reference-contexts: Analyses of file system traffic indicate that most read requests are satisfied by the cache and as a result disk traffic tends to be write dominated. Moreover these writes are randomly distributed across the disks. In order to improve write performance, Log Structured File System (LFS) <ref> [OD89, RO92] </ref> was developed where the writes are committed to disk in such a way that new data blocks are written as a contiguous log rather than random locations on the disk.
Reference: [Ols92] <author> M. A. Olsen. </author> <title> Extending the POSTGRES database system to manage tertiary storage. </title> <type> Master's thesis, </type> <institution> Univ. of California, Berkeley, </institution> <year> 1992. </year>
Reference-contexts: Simulations of the new architecture and policies indicate that the modifications are able to achieve most of the maximum possible improvements over the baseline policy of FCFS for fetching fragments and LRU for evicting them. These ideas have been incorporated into the 12 POSTGRES <ref> [Ols92] </ref> database management system and the performance of the new architecture and policies on the SEQUOIA benchmark [SFGM93] has been significantly better than the old architecture. 3.2.3 Future Directions Although these studies provide a good starting point for the integration of tertiary storage and database management systems, there are lots of
Reference: [PGK88] <author> D. A. Patterson, G. Gibson, and R. H. Katz. </author> <title> A case for redundant arrays of inexpensive disks (raid). </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 109-116, </pages> <address> Chicago, </address> <year> 1988. </year>
Reference-contexts: In such general settings, other methods have been proposed to improve the performance of tertiary devices. The idea of striping data across several disks and thereby overlapping the transfer of several disks has been extensively studied for RAID <ref> [PGK88] </ref> architectures. Could a similar technique be employed to improve the low transfer rate of tertiary devices? Drapeau and Katz have studied striping in the context of large tape libraries in the presence of concurrent random I/O [DK93].
Reference: [RO92] <author> M. Rosenblum and J. K. Ousterhout. </author> <title> The design and implementation of a log-structured file system. </title> <journal> In ACM transactions on Computer Systems, </journal> <volume> volume 10, </volume> <pages> pages 26-52, </pages> <year> 1992. </year>
Reference-contexts: Analyses of file system traffic indicate that most read requests are satisfied by the cache and as a result disk traffic tends to be write dominated. Moreover these writes are randomly distributed across the disks. In order to improve write performance, Log Structured File System (LFS) <ref> [OD89, RO92] </ref> was developed where the writes are committed to disk in such a way that new data blocks are written as a contiguous log rather than random locations on the disk.
Reference: [Sar95a] <author> S. Sarawagi. </author> <title> Database systems for efficient access to tertiary memory. </title> <booktitle> In Proceedings of the Fourteenth IEEE Symposium on Mass Storage Systems, </booktitle> <pages> pages 120-6, </pages> <address> Monterey, California, 1995. </address> <publisher> IEEE Comput. Soc. Press. </publisher>
Reference-contexts: The study also investigates the situation where the tape transfer rate is greater than the disk rate. In such a situation, both disk and memory buffering are harmful. 3.2.2 Architecture Issues Sarawagi and Stonebraker have also investigated the architecture of database management systems that incorporate tertiary devices directly <ref> [Sar95a, Sar95b] </ref>. Traditionally, DBMSs have several independent components the query executor, the disk cache manager and tertiary memory device scheduler. Queries are executed in a first come first serve manner this mode of operation can lead to poor performance when data are fetched from tertiary storage.
Reference: [Sar95b] <author> S. Sarawagi. </author> <title> Query processing in tertiary memory databases. </title> <booktitle> In Proc. of the 21st Int. Conf. on Very Large Data Bases, </booktitle> <pages> pages 585-596, </pages> <address> San Francisco, California, 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The study also investigates the situation where the tape transfer rate is greater than the disk rate. In such a situation, both disk and memory buffering are harmful. 3.2.2 Architecture Issues Sarawagi and Stonebraker have also investigated the architecture of database management systems that incorporate tertiary devices directly <ref> [Sar95a, Sar95b] </ref>. Traditionally, DBMSs have several independent components the query executor, the disk cache manager and tertiary memory device scheduler. Queries are executed in a first come first serve manner this mode of operation can lead to poor performance when data are fetched from tertiary storage. <p> Finding an optimal solution to the fragment fetching problem is NP-complete and therefore several heuristics are presented <ref> [Sar95b] </ref>. For eviction, fragmented LRU and weighted-LRU type of policies are not effective because reasonable prediction of future use of fragments is possible from knowledge of the pending subqueries, and a more appropriate eviction policy is described.
Reference: [SF95] <author> T. R. Smith and J. Frew. </author> <title> Alexandria digital library. </title> <journal> Communications of the ACM, </journal> <volume> 38(4) </volume> <pages> 61-62, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Thus in contrast to solutions for magnetic disks, it is not obvious that optimizations that work for one type of tertiary technology will also work for others. Much work needs to be done to overcome the problems associated with integrating tape storage. Digital libraries <ref> [SF95] </ref> are one of the most exciting new applications. Although modern traditional libraries have electronic on-line catalogs for search purposes, it is only recently that the display and delivery of images, audio, video and other such data formats have become feasible.
Reference: [SFGM93] <author> M. Stonebraker, J. Frew, K. Gardels, and J. Meredith. </author> <title> The sequoia 2000 storage benchmark. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 2-11, </pages> <year> 1993. </year>
Reference-contexts: These ideas have been incorporated into the 12 POSTGRES [Ols92] database management system and the performance of the new architecture and policies on the SEQUOIA benchmark <ref> [SFGM93] </ref> has been significantly better than the old architecture. 3.2.3 Future Directions Although these studies provide a good starting point for the integration of tertiary storage and database management systems, there are lots of areas that need to be explored. The above studies on joins have focused on 2-way joins.
Reference: [SHT96] <author> G.C. Shueng-Han and F.A. Tobagi. </author> <title> Hierarchical storage systems for on-demand video servers. </title> <booktitle> In Proceedings of the SPIE The International Society for Optical Engineering, </booktitle> <volume> volume 2604, </volume> <pages> pages 103-20, </pages> <year> 1996. </year>
Reference-contexts: In spite of these limitations, new playback techniques based on playback linking can be employed to succesfully use optical storage for video-on-demand [MSNN96]. Furthermore, it has been shown that if popularity of videos is non uniform, then combination of disk and tape storage becomes viable for video-on-demand applications <ref> [SHT96, KDST95] </ref>.
Reference: [SRH90] <author> M. Stonebraker, L. A. Rowe, and M. Hirohama. </author> <title> The implementation of POSTGRES. </title> <journal> In IEEE Trans. on Knowledge and Data Eng., </journal> <volume> volume 2, </volume> <pages> pages 125-142, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Below we describe preliminary work in this area. 3.2.1 Join Operations Research on integration of tertiary storage into DBMSs has focused on relational database management systems. To the best of our knowledge, at present the only existing DBMS that incorporates tertiary memory is POSTGRES <ref> [SRH90] </ref>. Tertiary storage is a first class storage entity in POSTGRES and tuples can reside on either secondary or tertiary storage. One of the most common and expensive operations of relational database systems is the join operation.
Reference: [SS93] <author> S. Sarawagi and M. Stonebraker. </author> <title> Single query opimization for tertiary memory. </title> <type> Technical Report s2k-94-45, </type> <institution> Computer Science Div. U.C. Berkeley, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: One of the most common and expensive operations of relational database systems is the join operation. Optimization schemes for joins of relations stored on disks have been shown to be inefficient when either one or both the relations involved in the join are stored on tape <ref> [SS93] </ref>. Work on the optimization of join operations for tape resident relations has been done using two different approaches. Sarawagi and Stonebraker have investigated 2-way joins of relations which are both tape resident [SS93]. <p> be inefficient when either one or both the relations involved in the join are stored on tape <ref> [SS93] </ref>. Work on the optimization of join operations for tape resident relations has been done using two different approaches. Sarawagi and Stonebraker have investigated 2-way joins of relations which are both tape resident [SS93]. They assume that only one reader is available to the DBMS to read both relations and that the amount of disk space available for the join operation is small compared to the size of these relations.
Reference: [SS94] <author> S. Sarawagi and M. Stonebraker. </author> <title> Efficient organization of large multidimensional arrays. </title> <booktitle> In IEEE Int. Conf. on Data Engineering, </booktitle> <year> 1994. </year> <month> 17 </month>
Reference-contexts: The reason why data are usually not available in one location on the storage media is that traditionally data is stored in the order of generation. Two independent studies by Sarawagi and Stonebraker <ref> [SS94] </ref> and Chen et. al [CDK + 95], have suggested that such data should be stored in a manner that facilitates retrieval for specific access patterns. Sarawagi and Stonebraker [SS94] have proposed array storage schemes that optimize retrieval for a usage pattern that is either supplied by an end user or <p> Two independent studies by Sarawagi and Stonebraker <ref> [SS94] </ref> and Chen et. al [CDK + 95], have suggested that such data should be stored in a manner that facilitates retrieval for specific access patterns. Sarawagi and Stonebraker [SS94] have proposed array storage schemes that optimize retrieval for a usage pattern that is either supplied by an end user or obtained from sampling a DBMS.
References-found: 29

