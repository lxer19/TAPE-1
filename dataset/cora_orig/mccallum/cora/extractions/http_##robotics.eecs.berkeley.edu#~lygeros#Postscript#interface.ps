URL: http://robotics.eecs.berkeley.edu/~lygeros/Postscript/interface.ps
Refering-URL: http://robotics.eecs.berkeley.edu/~lygeros/Publications/interface.html
Root-URL: 
Email: lygeros@robotics.eecs.berkeley.edu godbole@robotics.eecs.berkeley.edu  
Title: An Interface between Continuous Discrete-Event Controllers for Vehicle Automation  
Author: John Lygeros and Datta Godbole 
Address: Berkeley, CA 94720  
Affiliation: Intelligent Machines and Robotics Laboratory University of California, Berkeley  
Abstract: Automation of highways and in particular platooning of vehicles raises a number of control issues. In the design proposed in [1] these issues are addressed by a hierarchical structure consisting of both discrete event and continuous time controllers. The work presented here is an attempt at constructing a consistent interface between these two types of controllers. The design proposed is a finite state machine that communicates with the discrete controllers through discrete commands and flags and with the continuous controllers by issuing commands that get translated to "jerk" input for the vehicle engine. The operation of the proposed design is tested using COSPAN. By virtue of the fact that the interface touches on both the discrete and continuous worlds, the design might provide insight to interesting problems related to the hybrid nature of the system.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Varaiya, </author> <title> "Smart cars on smart roads: problems of control," </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> vol. AC-38, no. 2, </volume> <pages> pp. 195-207, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction The work presented here was carried out with the particular Intelligent Vehicle Highway System (IVHS) structure of <ref> [1, 3, 4] </ref> in mind. In this context, it is assumed that traffic on the highway is organized in platoons of tightly spaced vehicles. This is done in an attempt to maximize the capacity and the throughput of the highway, while avoiding exposing the passengers to additional risk. <p> Finally, the scheme requires a controller that monitors the conditions of the highway and decides on a long term strategy aimed at maximizing capacity. The control structure suggested in <ref> [1] </ref> consists of three layers (Figure 1). The top layer, called the link layer, coordinates the operation of whole sections (links) of the highway. Its primary concern is to maximize throughput while maintaining safe conditions of operation. <p> Work in both these directions is currently underway for the coordination layer design proposed in <ref> [1] </ref>. 12 The interaction with the continuous time control laws is more challenging. Unlike the interaction with the coordination layer, which can be easily investigated using standard FSM tools, the interaction of the interface state machine with the continuous domain is much more complicated.
Reference: [2] <author> D. Godbole and J. Lygeros, </author> <title> "Longitudinal control of the lead car of a platoon," </title> <type> Tech. Rep. PATH Memorandom 93-7, </type> <institution> Institute of Transportation Studies, University of California, Berkeley, </institution> <year> 1993. </year>
Reference-contexts: Its task is to receive the coordination layer commands and translate them to throttle, steering and braking input for the actuators on the vehicle. For this purpose it utilizes a number of continuous time feedback control laws ( <ref> [6, 7, 8, 2] </ref>) that use the readings provided by the sensors to calculate the actuator inputs required for a particular maneuver. The regulation layer occasionally needs to communicate with the coordination layer to inform it of the outcome of 2 the maneuver. <p> A great deal of work has been done on the continuous time control algorithms that the regulation layer uses to carry out the various maneuvers ( <ref> [6, 7, 8, 2] </ref>). Between these two areas of development, there is still, however, a gap. As discussed above, the commands of the coordination layer typically are of the form "accelerate to merge with the preceding platoon". <p> The whole maneuver should be carried out as fast as possible but without pushing the engine or the brakes to their limits (thus compromising safety) and without affecting passenger comfort. A continuous time feedback controller that fulfills the above requirements was designed and is presented in <ref> [2] </ref>. It is based on the calculation of a desired trajectory. <p> A controller capable of carrying out the maneuver expected by the Decel to Change without pushing the actuators to their limits or compromising passenger comfort is presented in <ref> [2] </ref>. The general principle is very similar to that of the merge maneuver: a desired trajectory is calculated and feedback is used to keep the actual trajectory close to it. * Move: Asks the regulation layer to move the vehicle to the adjacent lane. This command requires mainly lateral movement. <p> The design is again very similar to the one for the merge maneuver: a trajectory that carries out the desired task and does not violate any limits is calculated and then feedback is added to guarantee tracking <ref> [2] </ref>. * Split Change: Creates a split so that a vehicle from an adjacent lane can change lane to the middle of the platoon, as in the scenario 3 of Figure 3. <p> The primary goal of the lead control law is to maintain safe spacing between platoons. In the design of <ref> [2] </ref> the safe spacing is calculated according to the formula: D = a x + v _x + p (1) where _x and x denote the velocity and acceleration of the platoon. For normal operation, the values a = 0; v = 1sec; p = 10m are currently used. <p> For this reason, the interface should first carry out some form of initialization. For the control algorithms presented in <ref> [2] </ref>, the initialization involves setting the state of the controller to the right initial condition (for controllers which are dynamic, such as that of the leader) and updating the values of the parameters that might have changed since the controller was last invoked (e.g. the optimum velocity). <p> The sensors are assumed to operate perfectly (there is no fault detection in our design so far) and provide samples of the states at fixed intervals. Finally the engine input is in the form of the third derivative of position ("jerk") <ref> [2] </ref> and is applied to the engine directly from the controllers (without the intervention of the interface). <p> Our design performed all the above tasks. 4 Concluding Remarks The automatic verification described above suggests that the design proposed here will perform well under the assumed conditions. As a further test the interface was implemented in C together with the continuous time control laws described in <ref> [2] </ref>. It was then introduced in the SmartPath simulation platform [9]. For the purpose of SmartPath the reg request and reg response interrupts were modeled by software "events" (in the C-Sim programming language) and parameters (commands and flags) were passed via global variables. <p> There are some tools for verification of timed FSM, that is FSM that have "clocks" associated with each state, based on the work of Alur, Courcoubetis and Dill [11]. However the dynamics of our system (summarized in <ref> [2] </ref>) are a lot more complicated than the simple _x = 1 dynamics of clocks. Therefore attempts to directly use such verification techniques on our system soon run into trouble.
Reference: [3] <author> P. Varaiya and S. E. Shladover, </author> <title> "Sketch of an IVHS systems architecture," </title> <type> Tech. Rep. </type> <institution> UCB-ITS-PRR-91-3, Institute of Transportation Studies, University of California, Berke-ley, </institution> <year> 1991. </year>
Reference-contexts: 1 Introduction The work presented here was carried out with the particular Intelligent Vehicle Highway System (IVHS) structure of <ref> [1, 3, 4] </ref> in mind. In this context, it is assumed that traffic on the highway is organized in platoons of tightly spaced vehicles. This is done in an attempt to maximize the capacity and the throughput of the highway, while avoiding exposing the passengers to additional risk. <p> These factors impose bounds on the acceleration and the jerk produced by the engine and the brakes; typically the acceleration has to lie in the range <ref> [5; 3] </ref>ms 2 while the jerk in the range [5; 5]ms 3 , but the bounds may be even tighter in adverse conditions (e.g. rain). As discussed above the trajectories designed for the various maneuvers are chosen so that they lie well within those bounds.
Reference: [4] <author> S. Shladover, C. Desoer, J. Hedrick, M. Tomizuka, J. Walrand, W. Zhang, D. McMahon, H. Peng, S. Sheikholeslam, and N. McKeown, </author> <title> "Automatic vehicle control developments in the path program," </title> <journal> IEEE Transactions on Vehicular Technology, </journal> <volume> vol. 40, no. 1, </volume> <pages> pp. 114-130, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction The work presented here was carried out with the particular Intelligent Vehicle Highway System (IVHS) structure of <ref> [1, 3, 4] </ref> in mind. In this context, it is assumed that traffic on the highway is organized in platoons of tightly spaced vehicles. This is done in an attempt to maximize the capacity and the throughput of the highway, while avoiding exposing the passengers to additional risk.
Reference: [5] <author> A. Hsu, F. Eskafi, S. Sachs, and P. Varaiya, </author> <title> "The design of platoon maneuver protocols for IVHS," </title> <type> Tech. Rep. </type> <institution> UCB-ITS-PRR-91-6, University of California, Berkeley, </institution> <year> 1991. </year>
Reference-contexts: The current design <ref> [5] </ref> uses protocols, in the form of finite state machines, to organize the maneuvers in a systematic way. They receive the commands of the link layer and aggregated sensor information from the individual vehicles (of the form "there is a vehicle in the adjacent lane"). <p> The physical layer also includes the sensors that provide sampled information about the state to be used by the control algorithms. The work presented here focuses on the interface between the regulation and coordination layers. <ref> [5] </ref> describes how the coordination layer protocols were designed and tested. A great deal of work has been done on the continuous time control algorithms that the regulation layer uses to carry out the various maneuvers ( [6, 7, 8, 2]). <p> These factors impose bounds on the acceleration and the jerk produced by the engine and the brakes; typically the acceleration has to lie in the range <ref> [5; 3] </ref>ms 2 while the jerk in the range [5; 5]ms 3 , but the bounds may be even tighter in adverse conditions (e.g. rain). As discussed above the trajectories designed for the various maneuvers are chosen so that they lie well within those bounds. <p> These factors impose bounds on the acceleration and the jerk produced by the engine and the brakes; typically the acceleration has to lie in the range [5; 3]ms 2 while the jerk in the range <ref> [5; 5] </ref>ms 3 , but the bounds may be even tighter in adverse conditions (e.g. rain). As discussed above the trajectories designed for the various maneuvers are chosen so that they lie well within those bounds. <p> The advantages of this format are many: it is easy to translate to code (in C or other programming languages), it is easy to verify automatically, and it provides a direct way of communicating with the coordination layer which is already in FSM form in the current design <ref> [5] </ref>. In the subsequent discussion five such machines will be presented. INTERFACE will be the central machine; it will carry out all the tasks specified above.
Reference: [6] <author> J. K. Hedrick, D.McMahon, V. Narendran, and D. Swaroop, </author> <title> "Longitudinal vehicle controller design for IVHS system," </title> <booktitle> in American Control Conference, </booktitle> <pages> pp. 3107-3112, </pages> <year> 1991. </year>
Reference-contexts: Its task is to receive the coordination layer commands and translate them to throttle, steering and braking input for the actuators on the vehicle. For this purpose it utilizes a number of continuous time feedback control laws ( <ref> [6, 7, 8, 2] </ref>) that use the readings provided by the sensors to calculate the actuator inputs required for a particular maneuver. The regulation layer occasionally needs to communicate with the coordination layer to inform it of the outcome of 2 the maneuver. <p> A great deal of work has been done on the continuous time control algorithms that the regulation layer uses to carry out the various maneuvers ( <ref> [6, 7, 8, 2] </ref>). Between these two areas of development, there is still, however, a gap. As discussed above, the commands of the coordination layer typically are of the form "accelerate to merge with the preceding platoon".
Reference: [7] <author> H. Peng and M. Tomizuka, </author> <title> "Vehicle lateral control for highway automation," </title> <booktitle> in American Control Conference, </booktitle> <pages> pp. 788-794, </pages> <year> 1990. </year>
Reference-contexts: Its task is to receive the coordination layer commands and translate them to throttle, steering and braking input for the actuators on the vehicle. For this purpose it utilizes a number of continuous time feedback control laws ( <ref> [6, 7, 8, 2] </ref>) that use the readings provided by the sensors to calculate the actuator inputs required for a particular maneuver. The regulation layer occasionally needs to communicate with the coordination layer to inform it of the outcome of 2 the maneuver. <p> A great deal of work has been done on the continuous time control algorithms that the regulation layer uses to carry out the various maneuvers ( <ref> [6, 7, 8, 2] </ref>). Between these two areas of development, there is still, however, a gap. As discussed above, the commands of the coordination layer typically are of the form "accelerate to merge with the preceding platoon".
Reference: [8] <author> S. Sheikholeslam and C. A. Desoer, </author> <title> "Longitudinal control of a platoon of vehicles," </title> <booktitle> in American Control Conference, </booktitle> <pages> pp. 291-297, </pages> <year> 1990. </year>
Reference-contexts: Its task is to receive the coordination layer commands and translate them to throttle, steering and braking input for the actuators on the vehicle. For this purpose it utilizes a number of continuous time feedback control laws ( <ref> [6, 7, 8, 2] </ref>) that use the readings provided by the sensors to calculate the actuator inputs required for a particular maneuver. The regulation layer occasionally needs to communicate with the coordination layer to inform it of the outcome of 2 the maneuver. <p> A great deal of work has been done on the continuous time control algorithms that the regulation layer uses to carry out the various maneuvers ( <ref> [6, 7, 8, 2] </ref>). Between these two areas of development, there is still, however, a gap. As discussed above, the commands of the coordination layer typically are of the form "accelerate to merge with the preceding platoon".
Reference: [9] <author> F. Eskafi, D. Khorramabadi, and P. Varaiya, "Smartpath: </author> <title> An automated highway system simulator," </title> <type> Tech. Rep. PATH Memorandom 92-3, </type> <institution> Institute of Transportation Studies, University of California, Berkeley, </institution> <year> 1992. </year>
Reference-contexts: It is assumed that in an actual implementation of the control scheme, reg request and reg response will use actual interrupt lines. In the current implementation within the framework of the SmartPath simulator <ref> [9] </ref>, the communication channels are modeled by "events" in the C-Sim programming language, which can be considered to be a form of software interrupts. 4 2.1.1 Commands The commands stored in the command buffer reflect the maneuvers that a vehicle may be requested to carry out under the platooning scenario. <p> As a further test the interface was implemented in C together with the continuous time control laws described in [2]. It was then introduced in the SmartPath simulation platform <ref> [9] </ref>. For the purpose of SmartPath the reg request and reg response interrupts were modeled by software "events" (in the C-Sim programming language) and parameters (commands and flags) were passed via global variables.
Reference: [10] <author> Z. Har'El and R. Kurshan, </author> <title> Cospan User's Guide. </title> <institution> AT&T Bell Laboratories, </institution> <year> 1987. </year>
Reference-contexts: It transitions from NR to R whenever there is a need to notify the coordination layer and back when the coordination layer has taken note of the message (COORD: read). 3.3 Automatic Verification The design described above was verified automatically using COSPAN <ref> [10] </ref>. COSPAN is a verification tool that works by symbolically analyzing a given set of FSM to make sure that their performance satisfies certain user-defined requirements.
Reference: [11] <author> R. Alur, C. Courcoubetis, and D. Dill, </author> <title> "Model checking for real-time systems," </title> <booktitle> Logic in Computer Science, </booktitle> <pages> pp. 414-425, </pages> <year> 1990. </year>
Reference-contexts: There are no tools yet to perform automatic verification on hybrid systems like this. There are some tools for verification of timed FSM, that is FSM that have "clocks" associated with each state, based on the work of Alur, Courcoubetis and Dill <ref> [11] </ref>. However the dynamics of our system (summarized in [2]) are a lot more complicated than the simple _x = 1 dynamics of clocks. Therefore attempts to directly use such verification techniques on our system soon run into trouble.
References-found: 11

