URL: ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-95-03.ps.Z
Refering-URL: ftp://ftp.ics.hawaii.edu/pub/tr/INDEX.html
Root-URL: 
Email: cmoore@hawaii.edu  
Phone: (808) 956-3489  
Title: HBS Design Document  
Author: Carleton Moore 
Date: February 9, 1995  
Address: 2565 The Mall  Honolulu, Hawaii 96822  
Affiliation: Collaborative Software Development Laboratory Department of Information and Computer Sciences  University of Hawaii  
Pubnum: ICS/CSDL-TR-95-03  
Abstract: HBS is an 11 KLOC Hypertext Multiuser Database Server written in C++. HBS is designed to work with ECS clients, as part of the Egret client-server system. HBS is broken down into four blocks, File Operations, Basic Hypertext Operations, Events and Locks, and Client/Server Operations. There is also a built in debugging mechanism and memory leak detection system. This document describes the internal design of HBS. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Tom Cargill. </author> <title> C++ Programming Style. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1992. </year>
Reference-contexts: Each debugging tool is discussed in turn. 4.1 Memory Leak Detection. There are two different Memory Leak packages available in the HyperBase HeapStats and Memo-ryCheck. Both packages output their messages to standard error. 4.1.1 HeapStats Package. The simplest package is HeapStats <ref> [1] </ref>. HeapStats provides a count of all calls to new and delete. To initialize the HeapStats counters call the function HeapStats::reset (). To get a display of all the news and deletes use the function HeapStats::report (). To use the HeapStats package do the following: 13 1.
Reference: [2] <author> Philip M. Johnson. </author> <title> Supporting exploratory CSCW with the EGRET framework. </title> <booktitle> In Proceedings of the 1992 Conference on Computer Supported Cooperative Work, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: We have also extended the basic set of operations the Hyperbase provided. We discuss each of these changes in turn. 5 2.3.1 Gagent Since the HBS is only used as a part of Egret <ref> [2, 4] </ref> we have added in the knowledge of the Gagent. The Gagent is treated as a special client.
Reference: [3] <author> Philip M. Johnson. </author> <title> ECS design reference. </title> <type> Technical Report ICS-TR-94-13, </type> <institution> University of Hawaii, Department of Information and Computer Sciences, </institution> <year> 1994. </year>
Reference-contexts: This document will refer you to the original design document Design and Implementation of a HyperBase [7] for further detail and for a detailed discussion of operations that are not currently used in ECS. The ECS design document <ref> [3] </ref> provides detailed information about the client system with which HBS communicates. This document is organized as follows.
Reference: [4] <author> Philip M. Johnson. </author> <title> Experiences with EGRET: An exploratory group work environment. </title> <journal> Collaborative Computing, </journal> <volume> 1(1) </volume> <pages> 87-107, </pages> <year> 1994. </year>
Reference-contexts: We have also extended the basic set of operations the Hyperbase provided. We discuss each of these changes in turn. 5 2.3.1 Gagent Since the HBS is only used as a part of Egret <ref> [2, 4] </ref> we have added in the knowledge of the Gagent. The Gagent is treated as a special client.
Reference: [5] <author> Philip M. Johnson, Carleton Moore, and Rosemary Andrada. </author> <title> HBS interface specification. </title> <type> Technical Report ICS-TR-94-14, </type> <institution> University of Hawaii, Department of Information and Computer Sciences, </institution> <year> 1994. </year> <month> 17 </month>
Reference-contexts: Here is a suggested reading order for the HBS documentation. First, read the HBS Interface Specification <ref> [5] </ref> to get an idea of what operations HBS provides the client. Then read this document to get a description of the design and architecture of HBS.
Reference: [6] <author> James Kanze. </author> <title> Memory leak software. </title> <note> e-mailed to Philip Johnson 1 Feb 94. </note>
Reference-contexts: Add HeapStats::reset (); and HeapStats::report (); to the files you are inter ested in. 3. Re-compile HBS with the -D HEAPSTATS option in the command line. 4.1.2 MemoryCheck Package. The second Memory Leak package is MemoryCheck <ref> [6] </ref> MemoryCheck is similar to HeapStats in that it keeps track of all news and deletes. MemoryCheck is more sophisticated than HeapStats. It keeps track of the number of bytes allocated and deallocated.
Reference: [7] <author> Uffe K. Wiil, Carsten R. Jakobsen, Claus B. Nielsen, Hans M. Jeppesen, Finn Solvsten, Poul Larsen, and Per M. Peterson. </author> <title> Design and implementation of a hyperbase. </title> <type> Internal Report 90-03, </type> <institution> Department of Mathematics and Computer Science, University of Aalborg, Denmark., </institution> <month> September </month> <year> 1990. </year>
Reference-contexts: 1 Introduction This document describes the current design of HBS 1 , an 11 KLOC Hypertext multiuser database server written in C++. The original implementation came from Uffe Kock Will et al <ref> [7] </ref> at the Aalborg University Center. We at the Collaborative Software Development Laboratory (CSDL) rewrote the original HyperBase and added many new features. <p> First, read the HBS Interface Specification [5] to get an idea of what operations HBS provides the client. Then read this document to get a description of the design and architecture of HBS. This document will refer you to the original design document Design and Implementation of a HyperBase <ref> [7] </ref> for further detail and for a detailed discussion of operations that are not currently used in ECS. The ECS design document [3] provides detailed information about the client system with which HBS communicates. This document is organized as follows. <p> UseList is used by the LinkFileHandler and the DataFileHandler classes to store free file addresses. * The DataFileHandler class is one of the two main classes in block1. It provides the data-node interface to block2. The following operations are defined in DataFileHandler: 2 See <ref> [7] </ref> for a detailed description of data-nodes and link-nodes 7 - openEntity retrieves data-node from file. - closeEntity writes data-node fields to file. - openNewEntity creates a data-node. - deleteEntity deletes a data-node. - openData opens datablock area. - closeData writes to datablock area. - openLink opens departing links. - closeLink <p> When a user logs out all of their locks and events are cleared. Classes * The BalanceTree class is a template class that represents a generic balanced binary tree. There are several instantiations of the balanced binary tree. LinkFileHandler and DataFileHandler 3 See <ref> [7] </ref> for a description of the keys. 10 both have balanced binary trees to store file addresses. <p> Where b is the number of direct links, s is the size of the data block in bytes, and 4 is the sizeof (long) on the machine running the HBS. See <ref> [7] </ref> page 27 for a detailed description. (e.g. if the number of direct links is 8 and the data block size is 256 bytes then the maximum amount of data that can be stored in a node is (8 fl 256) + ((256=4) fl 256) + ((256=4) fl (256=4) fl 256)
References-found: 7

