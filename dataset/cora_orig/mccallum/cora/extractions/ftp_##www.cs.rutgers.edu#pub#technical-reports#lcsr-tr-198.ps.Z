URL: ftp://www.cs.rutgers.edu/pub/technical-reports/lcsr-tr-198.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: 
Title: Hillclimbing in a Hierarchy of Abstraction Spaces  
Author: Thomas Ellman Saibal Patra 
Keyword: Content Areas: Knowledge Compilation, Analytic Learning, Speedup Learning, Constraint based reasoning.  
Address: New Brunswick, New Jersey 08903  
Affiliation: Department of Computer Science Hill Center for Mathematical Sciences Rutgers University  
Email: fellman,patrag@cs.rutgers.edu  
Phone: (908) 932 4184  
Web: LCSR-TR-198  
Abstract: Hillclimbing search has been shown to be useful for solving constraint satisfaction problems that are too large to be attacked using backtracking search. Nevertheless, hillclimbing search can be computationally expensive when the length of each climb is long, or when many climbs are required due to the presence of local, but non-global optima. "Hierarchic Hillclimbing" (HHC) is an extension of ordinary "Flat Hillclimb-ing" that is designed to attack such difficulties. HHC carries out hillclimbing search in a hierarchy of abstraction spaces, starting with the most abstract and proceeding to the most concrete. HHC takes as input a description of the abstraction hierarchy, as well as an evaluation function for each abstraction level. The HHC algorithm has been implemented along with a program to synthesize the required abstraction hierarchies and evaluation functions. The synthesis program and the HHC algorithm have been tested in the domains of uniprocessor scheduling and two dimensional tile packing. Results show HHC to improve in two ways on ordinary hillclimbing without abstraction: HHC requires less computation time to complete a single climb. In addition, when the abstraction hierarchy is chosen with care HHC is more likely to find a solution on a single climb. 
Abstract-found: 1
Intro-found: 1
Reference: [ Ellman, 1993 ] <author> T. </author> <title> Ellman. Abstraction via approximate symmetry. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <address> Chambery, France, </address> <month> August </month> <year> 1993. </year> <month> 11 </month>
Reference-contexts: Consider the fact that abstraction techniques have been shown useful for enhancing the performance of backtracking search on constraint satisfaction problems <ref> [ Ellman, 1993 ] </ref> . In light of this fact, one might ask whether abstraction can also improve the performance of hillclimbing search on constraint satisfaction problems. This paper reports on research into the possibility. <p> The method operates by converting the original "goal function", which operates on states in a concrete search space, into an "abstract goal function", which operates on states in an abstract search space. (The abstraction technique is presented in more detail in <ref> [ Ellman, 1993 ] </ref> , along with experimental results obtained from using it to enhance the performance of backtracking search algorithms.) A method of constructing evaluation functions is pre 1 sented in Section 4. <p> A solution is defined by a function f that maps the domain D into the range R (e.g., an assignment of positions to tiles or starting times to jobs). Two distinct types of abstraction can be defined for function finding problems <ref> [ Ellman, 1993 ] </ref> . Abstraction based on Range Symmetry produces an abstraction space in which each state is function _ f mapping the domain D into a partition ^ R of the original range R. The "window" abstraction for scheduling is an example of this type.
Reference: [ Garey and Johnson, 1979 ] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: </title>
Reference-contexts: Find: An assignment of positions and orientations to tiles such that each tile lies entirely within the box, and no two tiles overlap. * Uniprocessor Scheduling Problem: (NP-Hard <ref> [ Garey and Johnson, 1979 ] </ref> ) Given: A set J of jobs; A set T of possible starting times; A working time w (j) required to complete each job j; A deadline d (j) by which time each job j must be completed; A precedence relation p (j; k) indicating
References-found: 2

