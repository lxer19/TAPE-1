URL: ftp://ftp.eecs.umich.edu/groups/gasm/oberon.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.cs.umich.edu
Email: kutter@tik.ee.ethz.ch)  alfonso@univaq.it)  
Title: The Formal Specification of Oberon  
Author: Philipp W. Kutter Alfonso Pierantonio 
Address: Switzerland  L'Aquila, Italy  
Affiliation: (Eidgenossische Technische Hochschule,  (Universita di  
Abstract: This paper presents the formal specification of the programming language Oberon. Using Montages we give a description of syntax, static, and dynamic semantics of all constructs of the language. The specification is arranged in five refinement steps, each of them results in a working sub-language of Oberon. The compactness and readability of the specification make us believe that it can be used for a reference manual. Key Words: abstract state machines, Oberon, Montages, programming languages specifications, reference manuals Category: F.3.2, D.3.1, D3.3 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> E. Borger, I. Durdanovic, and D. Rosenzweig. </author> <title> Occam: Specification and Compiler Correctness. Part I: The Primary Model. </title> <booktitle> In IFIP 13th World Computer Congress, </booktitle> <volume> Volume I: Technology/Foundations, </volume> <pages> pages 489 - 508. </pages> <publisher> Elsevier, </publisher> <address> Amsterdam, </address> <year> 1994. </year>
Reference-contexts: 1 Introduction In this paper we present the formal specification of the programming language Oberon [7] using Montages taking advantage of existing ASM specifications of the dynamic semantics of imperative programming languages <ref> [1, 2, 6, 3] </ref>. A detailed presentation of Montages is given in [4].
Reference: 2. <author> Y. Gurevich and J.K. Huggins. </author> <title> The Semantics of the C Programming Language, </title> <booktitle> volume 702 of LNCS, </booktitle> <pages> pages 274 - 308. </pages> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction In this paper we present the formal specification of the programming language Oberon [7] using Montages taking advantage of existing ASM specifications of the dynamic semantics of imperative programming languages <ref> [1, 2, 6, 3] </ref>. A detailed presentation of Montages is given in [4].
Reference: 3. <author> P.W. Kutter. </author> <title> Dynamic semantics of the programming language oberon. </title> <type> Technical Report 25, </type> <institution> TIK, ETH Zuerich, </institution> <year> 1997. </year>
Reference-contexts: 1 Introduction In this paper we present the formal specification of the programming language Oberon [7] using Montages taking advantage of existing ASM specifications of the dynamic semantics of imperative programming languages <ref> [1, 2, 6, 3] </ref>. A detailed presentation of Montages is given in [4].
Reference: 4. <author> P.W. Kutter and A. Pierantonio. </author> <title> Montages specifications of realistic programming languages. </title> <journal> J.UCS, </journal> <volume> 3(5), </volume> <year> 1997. </year> <note> This volume. </note>
Reference-contexts: 1 Introduction In this paper we present the formal specification of the programming language Oberon [7] using Montages taking advantage of existing ASM specifications of the dynamic semantics of imperative programming languages [1, 2, 6, 3]. A detailed presentation of Montages is given in <ref> [4] </ref>. The language specification is presented as a sequence of five sub-languages of Oberon (O 1 (section 2), O 2 (section 3), O 3 (section 4.1), O 4 (section 4.2), O 5 (section 5)), each extending its predecessor with some new constructs. The last of them is complete Oberon. <p> This is done implicitly (see ListN-ode definitions in <ref> [4] </ref>). In this section we present the assignment and the new statement. Statement = Assignment j NewStatement (O 1 .G.3) The assignment (Montage O 1 .M.3) copies the value (s) of the associated object of the right designator to the value (s) of the associated object of the left designator.
Reference: 5. <author> M. Reiser and N. Wirth. </author> <title> Programming in Oberon. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: In order to obtain a correct specification we adhered to the original Oberon report [7] and to a book on programming in Oberon <ref> [5] </ref>. Nevertheless for certain details we had to consult several times the creator of the language [9].
Reference: 6. <author> C. Wallace. </author> <title> The Semantics of the C++ Programming Language. </title> <editor> In E. Borger, editor, </editor> <booktitle> Specification and Validation Methods, </booktitle> <pages> pages 131 - 164. </pages> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction In this paper we present the formal specification of the programming language Oberon [7] using Montages taking advantage of existing ASM specifications of the dynamic semantics of imperative programming languages <ref> [1, 2, 6, 3] </ref>. A detailed presentation of Montages is given in [4].
Reference: 7. <author> N. Wirth. </author> <title> The Programming Language Oberon. </title> <journal> Software Practice and Experience, </journal> <volume> 18(7):671 - 690, </volume> <year> 1988. </year>
Reference-contexts: 1 Introduction In this paper we present the formal specification of the programming language Oberon <ref> [7] </ref> using Montages taking advantage of existing ASM specifications of the dynamic semantics of imperative programming languages [1, 2, 6, 3]. A detailed presentation of Montages is given in [4]. <p> In order to obtain a correct specification we adhered to the original Oberon report <ref> [7] </ref> and to a book on programming in Oberon [5]. Nevertheless for certain details we had to consult several times the creator of the language [9].
Reference: 8. <author> N. Wirth. </author> <title> Type extensions. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 10(2) </volume> <pages> 204-214, </pages> <year> 1988. </year>
Reference-contexts: W., Pierantonio A.: The Formal Specification of Oberon 5.3 Record Extension In this section we present record type extensions <ref> [8] </ref>. A record type extension adds new fields to a given base type. The extension is a sub-type of its base type, e.g. wherever an instance of the base type can be used, an instance of the extended type is allowed as well.
Reference: 9. <author> N. Wirth. </author> <note> personal communications, emails from feb.1th, feb.5th, nov.28th, 1996. </note> <author> 503Kutter Ph. W., Pierantonio A.: </author> <title> The Formal Specification of Oberon </title>
Reference-contexts: In order to obtain a correct specification we adhered to the original Oberon report [7] and to a book on programming in Oberon [5]. Nevertheless for certain details we had to consult several times the creator of the language <ref> [9] </ref>. In one case the design-intentions [9] where different to what has been implemented in the original compiler, i.e. a type guard of a pointer to Nil should not raise a run-time-error. 7 Acknowledgments First of all thanks go to F. <p> In order to obtain a correct specification we adhered to the original Oberon report [7] and to a book on programming in Oberon [5]. Nevertheless for certain details we had to consult several times the creator of the language <ref> [9] </ref>. In one case the design-intentions [9] where different to what has been implemented in the original compiler, i.e. a type guard of a pointer to Nil should not raise a run-time-error. 7 Acknowledgments First of all thanks go to F.
References-found: 9

