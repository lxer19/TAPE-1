URL: http://www.cs.wisc.edu/~shoup/papers/subquadratic.ps.Z
Refering-URL: http://www.cs.wisc.edu/~shoup/papers/
Root-URL: 
Email: kaltofen@cs.rpi.edu  shoup@bellcore.com  
Phone: 2  
Title: Subquadratic-Time Factoring of Polynomials over Finite Fields  
Author: Erich Kaltofen and Victor Shoup 
Web: URL: http://www.cs.rpi.edu/~kaltofen  
Address: Troy, New York 12180-3590; Inter-Net:  445 South Str. Morristown, New Jersey 07960-6438; Internet:  
Affiliation: 1 Department of Computer Science, Rensselaer Polytechnic Institute  Bellcore,  
Abstract: New probabilistic algorithms are presented for factoring univariate polynomials over finite fields. The algorithms factor a polynomial of degree n over a finite field of constant cardinality in time O(n 1:815 ). Previous algorithms required time fi(n 2+o(1) ). The new algorithms rely on fast matrix multiplication techniques. More generally, to factor a polynomial of degree n over the finite field F q with q elements, the algorithms use O(n 1:815 log q) arithmetic operations in F q . The new "baby step/giant step" techniques used in our algorithms also yield new fast practical algorithms at super-quadratic asymptotic running time, and subquadratic-time methods for manipulating nor mal bases of finite fields.
Abstract-found: 1
Intro-found: 1
Reference: <author> Aho, A., Hopcroft, J., and Ullman, J., </author> <title> The Design and Analysis of Algorithms; Addison and Wesley, </title> <address> Reading, MA, </address> <year> 1974. </year>
Reference-contexts: f ); : : : ; (H m mod f ) 2 R: Using fast algorithms for multiplication of polynomials in R [Y ] (Cantor & Kaltofen 1991) Step D3 can be implemented so as to use O (n 1+fi+o (1) + n 2fi+o (1) ) operations in F q <ref> (Aho et al. 1974) </ref>. In Step D4, we need to compute O (m) GCD's and divisions, requiring O (n 2fi+o (1) ) operations in F q . To implement Step D5 efficiently, we first reduce each h i modulo each F j . <p> To implement Step D5 efficiently, we first reduce each h i modulo each F j . Reducing one h i modulo each F j takes O (n 1+o (1) ) operations in F q , using standard "Chinese remaindering" techniques <ref> (Aho et al. 1974) </ref> Thus, reducing all of the h i 's modulo all of the F j 's takes just O (n 1+fi+o (1) ) operations in F q . Also, we compute H j mod F j for each F j .
Reference: <author> Baur, W. and Strassen, V., </author> <title> "The complexity of partial derivatives," </title> <journal> Theoretical Comp. Sci. </journal> <volume> 22, </volume> <pages> pp. </pages> <month> 317-330 </month> <year> (1983). </year>
Reference: <author> Ben-Or, M., </author> <title> "Probabilistic algorithms in finite fields," </title> <booktitle> Proc. 22nd IEEE Symp. Foundations Comp. Sci., </booktitle> <pages> pp. </pages> <month> 394-398 </month> <year> (1981). </year>
Reference: <author> Berlekamp, E. R., </author> <title> "Factoring polynomials over large finite fields," </title> <journal> Math. Comp. </journal> <volume> 24, </volume> <pages> pp. </pages> <month> 713-735 </month> <year> (1970). </year>
Reference: <author> Brent, R. P., Gustavson, F. G., and Yun, D. Y. Y., </author> <title> "Fast solution of Toeplitz systems of equations and computation of Pade approximants," </title> <journal> J. </journal> <volume> Algorithms 1, </volume> <pages> pp. </pages> <month> 259-295 </month> <year> (1980). </year>
Reference-contexts: The Hankel system is finally solved for the c i in O (n 1+o (1) ) arithmetic steps <ref> (Brent et al. 1980) </ref>. 2 5 Practical Algorithms In this section, we describe how the methods developed in this paper can be used to obtain practical algorithms, without relying on fast matrix multiplication. Consider our Fast Cantor/Zassenhaus algorithm. A practical variant of Algorithm D, the distinct-degree factorizer, runs as follows.
Reference: <author> Brent, R. P. and Kung, H. T., </author> <title> "Fast algorithms for manipulating formal power series," </title> <editor> J. </editor> <booktitle> ACM 25/4, </booktitle> <pages> pp. </pages> <month> 581-595 </month> <year> (1978). </year>
Reference: <author> Canny, J., Kaltofen, E., and Lakshman Yagati, </author> <title> "Solving systems of non-linear polynomial equations faster," </title> <booktitle> Proc. ACM-SIGSAM 1989 Internat. Symp. Symbolic Algebraic Comput., </booktitle> <pages> pp. </pages> <month> 121-128 </month> <year> (1989). </year>
Reference: <author> Cantor, D. G. and Kaltofen, E., </author> <title> "On fast multiplication of polynomials over arbitrary algebras," </title> <journal> Acta Inform. </journal> <volume> 28/7, </volume> <pages> pp. </pages> <month> 693-701 </month> <year> (1991). </year>
Reference-contexts: 2 R [Y ] of degree l, where H (Y ) = 0i&lt;l Then we evaluate H (Y ) at the m points (H 1 mod f ); : : : ; (H m mod f ) 2 R: Using fast algorithms for multiplication of polynomials in R [Y ] <ref> (Cantor & Kaltofen 1991) </ref> Step D3 can be implemented so as to use O (n 1+fi+o (1) + n 2fi+o (1) ) operations in F q (Aho et al. 1974).
Reference: <author> Cantor, D. G. and Zassenhaus, H., </author> <title> "A new algorithm for factoring polynomials over finite fields," </title> <journal> Math. Comp. </journal> <volume> 36, </volume> <pages> pp. </pages> <month> 587-592 </month> <year> (1981). </year> <note> 26 Coppersmith, </note> <author> D., </author> <title> "Rapid multiplication of rectangular matrices," </title> <journal> SIAM J. Comput. </journal> <volume> 11/3, </volume> <pages> pp. </pages> <month> 467-471 </month> <year> (1982). </year>
Reference: <author> Coppersmith, D. and Winograd, S., </author> <title> "Matrix multiplication via arithmetic progressions," </title> <journal> J. Symbolic Comput. </journal> <volume> 9/3, </volume> <pages> pp. </pages> <month> 251-280 </month> <year> (1990). </year>
Reference: <author> Dornstetter, J. L., </author> <title> "On the equivalence between Berlekamp's and Euclid's algorithms," </title> <journal> IEEE Trans. Inf. Theory it-33/3, </journal> <pages> pp. </pages> <month> 428-431 </month> <year> (1987). </year>
Reference: <author> Fiduccia, C. M., </author> <title> "On obtaining upper bounds on the complexity of matrix multiplication," in Complexity of Computer Computations, edited by R. </title>
Reference: <editor> E. Miller and J. W. </editor> <publisher> Thatcher; Plenum Press, </publisher> <address> New York, </address> <pages> pp. 31-40, </pages> <year> 1972. </year>
Reference: <author> Fiduccia, C. M., </author> <title> "On the Algebraic Complexity of Matrix Multiplication," </title> <type> Ph.D. Thesis, </type> <institution> Center Comput. Inform. Sci., Div. Engin., Brown Univ., </institution> <address> Providence, Rhode Island, </address> <month> June </month> <year> 1973. </year>
Reference: <author> Fleischmann, P., </author> <title> "Connections between the algorithms of Berlekamp and Niederreiter for factoring polynomials over F q ," Linear Algebra and Applications 192, </title> <note> pp. 101-108 (1993). </note> <author> von zur Gathen, J. and Giesbrecht, M., </author> <title> "Constructing normal bases in finite fields," </title> <journal> J. Symbolic Comput. </journal> <volume> 10/6, </volume> <pages> pp. </pages> <note> 547-570 (1990). </note> <author> von zur Gathen, J. and Shoup, V., </author> <title> "Computing Frobenius maps and factoring polynomials," </title> <journal> Comput. </journal> <volume> Complexity 2, </volume> <pages> pp. </pages> <month> 187-224 </month> <year> (1992). </year>
Reference-contexts: Niederreiter (1993) developed an alternate approach to factoring polynomials over finite fields. However, from a complexity point of view this method is closely related to Berlekamp's original algorithm <ref> (Fleischmann 1993, Niederreiter and Gottfert 1994) </ref>. Kaltofen & Lobo (1994) adapted the linear system solver of Wiedemann (1986) to Berlekamp's algorithm.
Reference: <author> Giesbrecht, M., </author> <title> "Nearly optimal algorithms for canonical matrix forms," </title> <type> Ph.D. Thesis, </type> <institution> Dept. Comput. Science, University of Toronto, Toronto, Canada, </institution> <year> 1993. </year>
Reference: <author> Griewank, A., </author> <title> "Achieving logarithmic growth of temporal and spatial complexity in reverse automatic differentiation," </title> <booktitle> Optimization Methods & Software 1, </booktitle> <pages> pp. </pages> <month> 35-54 </month> <year> (1992). </year>
Reference: <author> Kaltofen, E. and Lobo, A., </author> <title> "Factoring high-degree polynomials by the black box Berlekamp algorithm," </title> <booktitle> in Proc. Internat. Symp. Symbolic Algebraic Comput. ISSAC '94, </booktitle> <editor> edited by J. von zur Gathen and M. </editor> <publisher> Giesbrecht; ACM Press, </publisher> <address> New York, N. </address> <publisher> Y., </publisher> <pages> pp. 90-98, </pages> <year> 1994. </year>
Reference-contexts: It is easily seen that 1 divides d i 1 exactly to the power p e i , which implies that I i = F q if e i = e, and I i = f0g if e i &lt; e <ref> (see Kaltofen & Lobo 1994, x3, for more details) </ref>. These considerations motivate the following recursive algorithm. The details of how each step is to be implemented are deferred until later.
Reference: <author> Kaltofen, E. and Pan, V., </author> <title> "Processor efficient parallel solution of linear systems over an abstract field," </title> <booktitle> in Proc. 3rd Ann. ACM Symp. Parallel Algor. Architecture; ACM Press, </booktitle> <pages> pp. 180-191, </pages> <year> 1991. </year>
Reference-contexts: 2 R [Y ] of degree l, where H (Y ) = 0i&lt;l Then we evaluate H (Y ) at the m points (H 1 mod f ); : : : ; (H m mod f ) 2 R: Using fast algorithms for multiplication of polynomials in R [Y ] <ref> (Cantor & Kaltofen 1991) </ref> Step D3 can be implemented so as to use O (n 1+fi+o (1) + n 2fi+o (1) ) operations in F q (Aho et al. 1974).
Reference: <author> Kaminski, M., Kirkpatrick, D. G., and Bshouty, N. H., </author> <title> "Addition requirements for matrix and transposed matrix products," </title> <journal> J. </journal> <volume> Algorithms 9, </volume> <pages> pp. </pages> <month> 354-364 </month> <year> (1988). </year>
Reference-contexts: The discovery of the transposition principle goes back to the Ph.D. thesis of Fiduccia (1973), Theorem 2 for multiplications (see also Fiduccia 1972, Theorem 4) and Theorem 5 for additions and subtractions. The additive version with a similar proof is rediscovered in <ref> (Kaminski et al. 1988) </ref>. Furthermore, we remark that the transposition principle is a direct consequence of the so-called reverse mode in automatic differentiation, see Canny et al. (1989); for reverse mode see also Ostrowski et al. (1971), Linnainmaa (1976), Baur & Strassen (1983), and Griewank (1991).
Reference: <author> Knuth, D. E., </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Vol. 2, </volume> <booktitle> Seminumerical Algorithms, </booktitle> <publisher> Ed. 2; Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1981. </year>
Reference-contexts: In the last stage, the non-trivial outputs from the second stage are fed into equal-degree factorizers. The square-free factorization problem can be solved on degree n inputs using O (n 1+o (1) + n log q) operations in F q , using the algorithm of Yun <ref> (see Knuth 1981) </ref>.
Reference: <author> Lidl, R. and Niederreiter, H., </author> <title> Finite Fields; Addison-Wesley, </title> <address> Reading, MA, </address> <year> 1983. </year>
Reference-contexts: Proof. Assume without loss of generality that i j. Then x q i x q j (x q ij , and the result follows at once from the factorization of x q k x, which consists of all irreducible factors whose degree is a divisor of k <ref> (see Lidl & Niederreiter 1983, Theorem 3.20) </ref>. 2 6 We first present a high-level description of our distinct-degree factoriza-tion algorithm. The details of how each step is to be implemented are deferred until later.
Reference: <author> Linnainmaa, S., </author> <title> "Taylor expansion of the accumulated rounding error," </title> <journal> BIT 16, </journal> <pages> pp. </pages> <month> 146-160 </month> <year> (1976). </year>
Reference: <author> Lotti, G. and Romani, F., </author> <title> "On the asymptotic complexity of rectangular matrix multiplication," </title> <journal> Theoretical Comput. Sci. </journal> <volume> 23, </volume> <pages> pp. </pages> <month> 171-185 </month> <year> (1983). </year>
Reference: <author> Massey, J. L., </author> <title> "Shift-register synthesis and BCH decoding," </title> <journal> IEEE Trans. Inf. Theory it-15, </journal> <pages> pp. </pages> <month> 122-127 </month> <year> (1969). </year>
Reference-contexts: Using an asymptotically fast version of the Berlekamp-Massey algorithm <ref> (Massey 1969, Dornstetter 1987) </ref>, given the first 2n terms of the sequence fa i : i 0g, we can determine the minimum polynomial ff;u 2 F q [] of 13 this sequence using O (n 1+o (1) ) operations in F q .
Reference: <author> Niederreiter, H., </author> <title> "A new efficient factorization algorithm for polynomials over small finite fields," </title> <journal> Applic. Algebra Engin., Commun. Comput. </journal> <volume> 4, </volume> <pages> pp. </pages> <month> 81-87 </month> <year> (1993). </year>
Reference-contexts: Niederreiter (1993) developed an alternate approach to factoring polynomials over finite fields. However, from a complexity point of view this method is closely related to Berlekamp's original algorithm <ref> (Fleischmann 1993, Niederreiter and Gottfert 1994) </ref>. Kaltofen & Lobo (1994) adapted the linear system solver of Wiedemann (1986) to Berlekamp's algorithm.
Reference: <author> Niederreiter, H. and Gottfert, R., </author> <title> "Factorization of polynomials over finite fields and characteristic sequences," </title> <journal> J. Symbolic Comput. </journal> <volume> 16/5, </volume> <pages> pp. </pages> <month> 401-412 </month> <year> (1994). </year>
Reference: <author> Ostrowski, G. M., Wolin, Ju. M., and Borisow, W. W., </author> " <title> Uber die Berechnung von Ableitungen," </title> <journal> Wissenschaftliche Zeitschrift Techn. Hochsch. Chem. </journal> <volume> Leuna-Merseburg 13/4, </volume> <pages> pp. </pages> <month> 382-384 </month> <year> (1971). </year> <note> In German. </note>
Reference: <author> Rabin, M. O., </author> <title> "Probabilistic algorithms in finite fields," </title> <journal> SIAM J. Comp. </journal> <volume> 9, </volume> <pages> pp. </pages> <month> 273-280 </month> <year> (1980). </year>
Reference: <author> Schwarz, St., </author> <title> "On the reducibility of polynomials over a finite field," </title> <journal> Quart. </journal>
Reference: <author> J. </author> <title> Math. </title> <journal> Oxford Ser. </journal> <volume> (2) 7, </volume> <pages> pp. </pages> <month> 110-124 </month> <year> (1956). </year>
Reference: <author> Shoup, V., </author> <title> "On the deterministic complexity of factoring polynomials over finite fields," </title> <journal> Inform. Process. Letters 33/5, </journal> <pages> pp. </pages> <month> 261-267 </month> <year> (1990). </year>
Reference-contexts: To attain a subquadratic running time, our algorithms rely on randomization. Even if we restrict ourselves to the field F 2 , the asymptotically fastest known deterministic algorithm <ref> (Shoup 1990) </ref> runs in time O (n 2+o (1) ), and it remains an open problem to find a subquadratic deterministic algorithm. 2 The Fast Cantor/Zassenhaus Algorithm Like the original Cantor/Zassenhaus algorithm, our algorithm splits the problem of factoring into three sub-problems: Square-free factorization The input is a polynomial f 2
Reference: <author> Shoup, V., </author> <title> "Fast construction of irreducible polynomials over finite fields," </title> <journal> J. Symbolic Comput. </journal> <volume> 17/5, </volume> <pages> pp. </pages> <month> 371-391 </month> <year> (1994a). </year>
Reference: <author> Shoup, V., </author> <title> "A new polynomial factorization algorithm and its implementation," </title> <type> Manuscript, </type> <institution> Univ. </institution> <address> d. </address> <institution> Saarlandes, Saarbrucken, Germany, </institution> <month> August </month> <year> 1994b. </year>
Reference: <author> Wiedemann, D., </author> <title> "Solving sparse linear equations over finite fields," </title> <journal> IEEE Trans. Inf. Theory it-32, </journal> <pages> pp. </pages> <month> 54-62 </month> <year> (1986). </year> <month> 28 </month>
Reference-contexts: Furthermore, for a random row vector ~u T and for a random column vector ~ff the probability that the minimum linear generator of ~u T Q i ~ff (0 i) remains n 1 is no less than 1=(12 maxflog q (n); 1g) <ref> (see Wiedemann 1986, Proposition 3, or Giesbrecht 1993, x6.1) </ref>. Therefore, a normal element can be found with success probability no less than 1 1=e by running the automorphism projection algorithm of x3 12 maxflog q (n); 1g times.
References-found: 35

