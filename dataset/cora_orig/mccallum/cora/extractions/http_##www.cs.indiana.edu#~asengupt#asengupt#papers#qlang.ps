URL: http://www.cs.indiana.edu/~asengupt/asengupt/papers/qlang.ps
Refering-URL: http://www.cs.indiana.edu/~asengupt/
Root-URL: http://www.cs.indiana.edu
Title: A Polynomial-time Query language for Hierarchilly Structured Document Databases (DRAFT)  
Author: Arijit Sengupta Dirk Van Gucht 
Date: April 1, 1997  
Abstract: The purpose of this query language is to capture feasible and interesting queries on SGML databases. The main property of this query language is that it acts on SGML documents directly and produces SGML documents as output. This approach is different from the current database systems that support SGML document databases. In current systems, querying is either handled by a proprietary data structure and a query language to suit that structure, or by converting documentations to suit some existing database technology, and using the available query languages for that platform. The language we propose here will work with structure documents in SGML format natively and will use the information in the documents directly without first converting them into a foreign format. 
Abstract-found: 1
Intro-found: 1
Reference: [CACS94] <author> V. Christophides, S. Abiteboul, S. Cluet, and M. Scholl. </author> <title> From structured documents to novel query facilities. </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> 23(2) </volume> <pages> 313-324, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: To specify this in the query language, we use the concept of path expressions. Path expressions have already been considered by Christophides et al <ref> [CACS94, CCM96] </ref>. Our formalism is very similar in nature. Paths are always defined with respect to a given DTD, say D. The following types of paths are possible in the path expression. Null path * is a null path.
Reference: [CCM96] <author> Vassilis Christophides, Sophie Cluet, and Guido Moerkotte. </author> <title> Evaluating queries with generalized path expressions. </title> <editor> In H.V. Jagadish and Inderpal Singh Mumick, editors, </editor> <booktitle> Proceedings, ACM SIGMOD 1996, </booktitle> <volume> volume 25, </volume> <pages> pages 418-422. </pages> <institution> Association of Computing Machinery, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: To specify this in the query language, we use the concept of path expressions. Path expressions have already been considered by Christophides et al <ref> [CACS94, CCM96] </ref>. Our formalism is very similar in nature. Paths are always defined with respect to a given DTD, say D. The following types of paths are possible in the path expression. Null path * is a null path.
Reference: [Dat89] <author> C.J. Date. </author> <title> A guide to the SQL Standard: A user's guide to the standard relational language SQL. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1989. </year>
Reference-contexts: The BNF is a modified version of the one from <ref> [Dat89, pages 144-146] </ref>. query-exp ::= query-term j query-exp UNION [ALL] query-term query-term ::= query-spec j (query-exp) query-spec ::= SELECT [ALL j DISTINCT] output qry-body output ::= target j outputname (target) j dtd-exp (1) target ::= scalar-exp-list j fl (2) scalar-exp-list ::= scalar-exp [; scalar-exp] fl dtd-exp ::= DTD filename (3) qry-body
Reference: [Sen96] <author> Arijit Sengupta. </author> <title> Demand more from your SGML database! bringing SQL under the SGML limelight. </title> <journal> &lt;TAG&gt;, </journal> <volume> 9(4) </volume> <pages> 1-7, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: An informal introduction and examples of this SQL can be found in <ref> [Sen96] </ref>. Since the calculus is basically equivalent to the relational calculus except for the path expression and output DTD creation constructs, this version of the SQL is essentially the above two features added on top of standard SQL [SQL86]. The two major extensions are described below: i.
Reference: [SQL86] <author> ANSI X3.135-1986, </author> <title> Database Language SQL, </title> <booktitle> 1986. </booktitle> <pages> 8 </pages>
Reference-contexts: Since the calculus is basically equivalent to the relational calculus except for the path expression and output DTD creation constructs, this version of the SQL is essentially the above two features added on top of standard SQL <ref> [SQL86] </ref>. The two major extensions are described below: i. Path Expressions: Path expressions are handled in the same way they are handled in the calculus. To use path expressions, two main changes are made to SQL. The . operator can now be cascaded to express listed paths.
References-found: 5

