URL: http://www.cs.tamu.edu/research/realtime/malcolm-rtss-92.ps.gz
Refering-URL: http://www.cs.tamu.edu/research/realtime/new/main.html
Root-URL: http://www.cs.tamu.edu
Title: Dynamic Scheduling of Imprecise Hard Real-Time Tasks  
Author: Nicholas Malcolm Tom Caton and Tony Scholefield 
Address: Adelaide College Station, TX 77843-3112 Adelaide, SA 5001 USA Australia  
Affiliation: Department of Computer Science Department of Computer Science Texas A&M University University of  
Abstract: Imprecise computation can reduce the proportion of tasks violating their time constraints in a hard real-time system. This is achieved by executing tasks for a reduced amount of time, but at the cost of returning imprecise results. This paper discusses dynamic scheduling algorithms for determining how much time should be allocated to each imprecise task. The performance results show that these algorithms are shown to be effective at trading off the preciseness of results for the task loss. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Caton. </author> <title> Performance evaluation of scheduling algorithms for imprecise hard real-time systems. </title> <type> Honours Thesis, </type> <institution> Department of Computer Science, University of Adelaide, </institution> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: This paper considers algorithms for scheduling tasks dynamically. A dynamic scheduling algorithm determines task schedules at runtime. Task characteristics are not assumed to be known in advance. In this paper several dynamic scheduling algorithms <ref> [1, 4] </ref> are proposed and their performance is examined. 2 System Model Tasks arrive randomly during run time to be served by a single processor. Task arrivals are modeled as a Poisson process with arrival rate . <p> Due to space limitations, only a portion of the results are shown here. For more details, the interested reader is referred to <ref> [1, 3, 4] </ref>. 5.1 Guarantee Algorithms results show that a reduction in task loss can be achieved, but at the cost of poorer quality service. The results for the other guarantee schemes show a similar trend and are not shown. 5.2 Nonguarantee Algorithms for result quality.
Reference: [2] <author> J. W. Liu, K.-J. Lin, W.-K. Shih, A. Yu, J.-Y. Chung, and W. Zhao. </author> <title> Algorithms for scheduling imprecise computations. </title> <journal> IEEE Computer, </journal> <volume> 24(5) </volume> <pages> 58-68, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: One way to do this is to use the imprecise computation technique. In imprecise computation, a task is allowed to return imprecise results if there is insufficient time to produce a precise result <ref> [2] </ref>. For example, an image processing task may return a blurred image if it cannot return a perfect image before its deadline. When scheduling an imprecise task for computation, the scheduler must not only decide when to execute the task, but how to execute the task. <p> Scheduling imprecise tasks involves a tradeoff between the preciseness of results and the number of tasks that are lost. There has been much previous work on scheduling imprecise hard real-time tasks <ref> [2] </ref>. However, much of this work assumes that the characteristics of all tasks are known in advance, and that scheduling occurs statically. This paper considers algorithms for scheduling tasks dynamically. A dynamic scheduling algorithm determines task schedules at runtime. Task characteristics are not assumed to be known in advance.
Reference: [3] <author> N. Malcolm, W. Zhao, T. Caton, and T. Scholefield. </author> <title> Dynamic scheduling algorithms for imprecise hard real-time tasks. </title> <note> In preparation. </note>
Reference-contexts: Due to space limitations, only a portion of the results are shown here. For more details, the interested reader is referred to <ref> [1, 3, 4] </ref>. 5.1 Guarantee Algorithms results show that a reduction in task loss can be achieved, but at the cost of poorer quality service. The results for the other guarantee schemes show a similar trend and are not shown. 5.2 Nonguarantee Algorithms for result quality.
Reference: [4] <author> T. Scholefield. </author> <title> Performance evaluation of scheduling algorithms for imprecise hard real-time computer systems. </title> <type> Honours Thesis, </type> <institution> Department of Computer Science, University of Adelaide, </institution> <month> Nov. </month> <year> 1989. </year>
Reference-contexts: This paper considers algorithms for scheduling tasks dynamically. A dynamic scheduling algorithm determines task schedules at runtime. Task characteristics are not assumed to be known in advance. In this paper several dynamic scheduling algorithms <ref> [1, 4] </ref> are proposed and their performance is examined. 2 System Model Tasks arrive randomly during run time to be served by a single processor. Task arrivals are modeled as a Poisson process with arrival rate . <p> Due to space limitations, only a portion of the results are shown here. For more details, the interested reader is referred to <ref> [1, 3, 4] </ref>. 5.1 Guarantee Algorithms results show that a reduction in task loss can be achieved, but at the cost of poorer quality service. The results for the other guarantee schemes show a similar trend and are not shown. 5.2 Nonguarantee Algorithms for result quality.
Reference: [5] <author> W. Zhao and J. A. Stankovic. </author> <title> Performance analysis of FCFS and improved FCFS scheduling algorithms for dynamic real-time computer systems. </title> <booktitle> In Proceedings of the 10th IEEE Real-Time Systems Symposium, </booktitle> <month> Dec. </month> <year> 1989. </year> <month> 5 </month>
Reference-contexts: First Come First Served (FCFS). Tasks are queued in order of arrival time. Enqueueing and dequeueing a task when using this discipline has complexity O (1), and is independent of the number of tasks in the queue. 2. Improved First Come First Served (FCFS (I)) <ref> [5] </ref>. This queueing discipline is used in conjunction with a guarantee decision scheme.
References-found: 5

