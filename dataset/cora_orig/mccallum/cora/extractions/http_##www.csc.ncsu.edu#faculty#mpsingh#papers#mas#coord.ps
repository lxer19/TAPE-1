URL: http://www.csc.ncsu.edu/faculty/mpsingh/papers/mas/coord.ps
Refering-URL: http://www.csc.ncsu.edu/faculty/mpsingh/papers/mas/
Root-URL: http://www.csc.ncsu.edu
Email: singh@ncsu.edu  
Title: Coordinating Heterogeneous Autonomous Agents: A Temporal Logic Approach  
Author: Munindar P. Singh 
Address: Raleigh, NC 27695-7534, USA  
Affiliation: Department of Computer Science North Carolina State University  
Abstract: We address the problem of constructing multiagent systems by coordinating heterogeneous, autonomous agents, whose internal designs may not be fully known. We develop a customizable coordination service that (a) takes declarative specifications of the desired interactions, and (b) automatically enacts them. Our approach is based on temporal logic, and has a rigorous semantics and a naturally distributed implementation. We show how this approach provides a general unifying framework in which to formalize the coordination components of some recent approaches to multiagent system construction. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Cristiano Castelfranchi. </author> <title> Commitments: From individual intentions to groups and organizations. </title> <booktitle> In Proceedings of the International Conference on Multiagent Systems, </booktitle> <pages> pages 41-48, </pages> <year> 1995. </year>
Reference-contexts: Formal research on interactions among agents includes Haddadi [10]. These approaches too develop formal semantics, but do not give as precise an operational characterization as the present approach. There has been much work on social abstractions for agents, for example, by Castelfranchi <ref> [1] </ref> and Gasser [8]. We believe that the present infrastructure will facilitate the development of a computational treatment of the social constructs by succinctly capturing the mechanics of possible interactions.
Reference: [2] <author> Panos K. Chrysanthis and Krithi Ramamritham. </author> <title> Synthesis of extended transaction models using ACTA. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 19(3) </volume> <pages> 450-491, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: These events are organized into skeletons that characterize the coordination behavior of the agents. The idea of skeletons is well-known from logics of programs, especially since Emerson & Clarke [6], and has also been used in the database transaction modeling community <ref> [2] </ref>. 2.1.1 Event Classes Our metamodel considers four classes of events, which have different properties with respect to coordination. <p> The set of events, their properties, and the skeleton of an agent depends on the agent, and is application-specific. The coordination service is independent of the exact skeletons or events used in a multiagent system. Traditional database approaches, for example, Chrysanthis & Ramamritham <ref> [2] </ref>, are limited to loop-free skeletons, which correspond to single-shot queries or transactions. However, we place no such restrictions here. Examples 3 and 4 discuss two common skeletons in information search. A skeleton for dMARS plans is introduced in Section 4.3.2.
Reference: [3] <author> Randall Davis and Reid G. Smith. </author> <title> Negotiation as a metaphor for distributed problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 20 </volume> <pages> 63-109, </pages> <year> 1983. </year>
Reference-contexts: Thread ' 6 i i i i i i1 6 work rfp eval award c-reply c-fail reply fail Succeeded Failed Not executing Local Over Awarding Waiting Deciding g g g g Our approach applies well to higher-level coordination protocols, such as the contract net protocol (CNP) of Davis & Smith <ref> [3] </ref>. Briefly, the CNP begins when the manager sends out a request for proposals (RFP); some potential contractors respond with bids; the manager accepts one of the bids and awards the task.
Reference: [4] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Designing a family of coordination algorithms. </title> <booktitle> In Proceedings of the International Conference on Multiagent Systems, </booktitle> <pages> pages 73-80, </pages> <year> 1995. </year> <note> Reprinted in [12]. </note>
Reference-contexts: Because we separate out the components of commitment and collaboration, our view of coordination is narrower than some others in the distributed AI literature. Our service can effectively support the higher-level requirements of some of the traditional approaches, for example, those of Decker & Lesser <ref> [4] </ref> and Sycara & Zeng [26]. In this manner, it would not replace their insights, but assist in their realization. Section 6 revisits this point. It is easier to relate our approach to previous approaches after we have developed some of our terminology and concepts. <p> For example, the relationship facilitates can be captured by postulating events, such that the success of one plan enables an event in the other plan. Decker & Lesser <ref> [4] </ref> present coordination algorithms in the generalized partial global planning framework. This work includes heuristics to reason about deadlines and coordination problems in various situations, but it does not provide a formal semantics.
Reference: [5] <author> E. A. Emerson. </author> <title> Temporal and modal logic. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B. </booktitle> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year> <month> 22 </month>
Reference-contexts: This semantics characterizes progress along a given computation to determine the decision on each event. It has important differences from traditional linear temporal logics <ref> [5] </ref>. One, our traces are sequences of events, not of states. Two, most of our semantic definitions are given in terms of a pair of indices, that is, intervals, rather than a single index.
Reference: [6] <author> E. Allen Emerson and Edmund C. Clarke. </author> <title> Using branching time temporal logic to synthesize synchronization skeletons. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 2 </volume> <pages> 241-266, </pages> <year> 1982. </year>
Reference-contexts: In other words, the events we speak of are publicly known|the rest are of no concern to the service. These events are organized into skeletons that characterize the coordination behavior of the agents. The idea of skeletons is well-known from logics of programs, especially since Emerson & Clarke <ref> [6] </ref>, and has also been used in the database transaction modeling community [2]. 2.1.1 Event Classes Our metamodel considers four classes of events, which have different properties with respect to coordination.
Reference: [7] <author> Michael Fisher and Michael Wooldridge. </author> <title> On the formal specification and verification of multi-agent systems. </title> <journal> International Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 6(1) </volume> <pages> 37-65, </pages> <year> 1997. </year>
Reference-contexts: Accordingly, we consider dMARS [15] and STEAM [27] in some detail in Section 4.3 to show how we can model their coordination components. We also consider executable temporal as epitomized by Concurrent MetateM <ref> [7, 29] </ref>, as well as reasoning in STEAM in Section 6. Organization. Section 2 motivates and presents our conceptual approach. Section 3 describes our specification language. Section 4 uses it to specify some important relationships, and to model some approaches in the literature. Section 5 shows how the service operates. <p> These concepts do not arise in the original STEAM analysis. 6.1.2 Executable Temporal Logics We consider Concurrent MetateM as a representative executable temporal logic [17], because it has a long intellectual history in temporal logics, and has been used to specify and build agents and multiagent systems <ref> [7, 29] </ref>. Concurrent MetateM enables the specification of the behavior of the various agents, somewhat like reactive systems in traditional logics of programs. This is a major difference from our approach, because we only formalize the coordination requirements in our logic, and leave the internal details to the implementors.
Reference: [8] <author> Les Gasser. </author> <title> Social conceptions of knowledge and action: DAI foundations and open systems semantics. </title> <journal> Artificial Intelligence, </journal> <volume> 47 </volume> <pages> 107-138, </pages> <year> 1991. </year>
Reference-contexts: Formal research on interactions among agents includes Haddadi [10]. These approaches too develop formal semantics, but do not give as precise an operational characterization as the present approach. There has been much work on social abstractions for agents, for example, by Castelfranchi [1] and Gasser <ref> [8] </ref>. We believe that the present infrastructure will facilitate the development of a computational treatment of the social constructs by succinctly capturing the mechanics of possible interactions.
Reference: [9] <author> Alvin I. Goldman. </author> <title> A Theory of Human Action. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1970. </year>
Reference-contexts: Hence the name compensation. R9 and R10 are related to Goldman's generation relation among actions <ref> [9] </ref>. In these, the event f arises as a consequence of the disjunction or conjunction of the other events. Thus, f and f should be modeled as triggerable events, so the coordination service can decide which to execute.
Reference: [10] <author> Afsaneh Haddadi. </author> <title> Towards a pragmatic theory of interactions. </title> <booktitle> In Proceedings of the International Conference on Multiagent Systems, </booktitle> <pages> pages 133-139, </pages> <year> 1995. </year>
Reference-contexts: However, our approach can help capture their intuitions rigorously. High-level abstractions for agents have been intensively studied, for example, by Rao & Georgeff [20] and Singh [22]. Formal research on interactions among agents includes Haddadi <ref> [10] </ref>. These approaches too develop formal semantics, but do not give as precise an operational characterization as the present approach. There has been much work on social abstractions for agents, for example, by Castelfranchi [1] and Gasser [8].
Reference: [11] <author> Carl Hewitt. </author> <title> Viewing control structures as patterns of passing messages. </title> <journal> Artificial Intelligence, </journal> <volume> 8(3) </volume> <pages> 323-364, </pages> <year> 1977. </year>
Reference: [12] <editor> Michael N. Huhns and Munindar P. Singh, editors. </editor> <booktitle> Readings in Agents. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, </address> <year> 1997. </year>
Reference: [13] <author> Michael Huhns, Munindar Singh, and Tomasz Ksiezyk. </author> <title> Global information management via local autonomous agents. </title> <booktitle> In Proceedings of the ICOT International Symposium on Fifth Generation Computer Systems: Workshop on Heterogeneous Cooperative Knowledge Bases, </booktitle> <pages> pages 1-15, </pages> <year> 1994. </year> <note> Reprinted in [12]. </note>
Reference-contexts: Consider a multiagent approach that uses information agents for each resource|a common information architecture, for example, see Huhns et al. <ref> [13] </ref>: Example 2 The search of Example 1 involves querying the bridge agent for the next port, querying a directory agent to find suppliers in the next port, and mapping over the list of suppliers to ask each of their agents about the desired valve. <p> Huhns et al. <ref> [13] </ref> and Sycara & Zeng [26] articulate many of our conceptual intuitions, including the ultimate necessity of multiagent, versus single-agent, approaches. They show how agents need to be coordinated to collectively search or manage information in open environments. Oates et al. propose an approach for planning searches [18].
Reference: [14] <author> Froduald Kabanza. </author> <title> Synchronizing multiagent plans using temporal logic specifications. </title> <booktitle> In Proceedings of the International Conference on Multiagent Systems, </booktitle> <pages> pages 217-224, </pages> <year> 1995. </year>
Reference-contexts: AgenTalk [16] gives a programming environment, but no formal semantics. Kabanza adapts a traditional temporal logic for synchronizing agent plans; his approach has a centralized scheduler and violates autonomy by requiring full knowledge of, and modifying, the agents' plans <ref> [14] </ref>.
Reference: [15] <author> David Kinny and Michael P. Georgeff. </author> <title> Modelling and design of multi-agent systems. In Intelligent Agents III: Agent Theories, Architectures, </title> <booktitle> and Languages, </booktitle> <pages> pages 1-20, </pages> <year> 1997. </year>
Reference-contexts: In this manner, it would not replace their insights, but assist in their realization. Section 6 revisits this point. It is easier to relate our approach to previous approaches after we have developed some of our terminology and concepts. Accordingly, we consider dMARS <ref> [15] </ref> and STEAM [27] in some detail in Section 4.3 to show how we can model their coordination components. We also consider executable temporal as epitomized by Concurrent MetateM [7, 29], as well as reasoning in STEAM in Section 6. Organization. Section 2 motivates and presents our conceptual approach. <p> If they continue, dependency D7 kicks in. The manager now autonomously evaluates bids, leading to an award on one of them, which triggers the work, because of dependency D8. 4.3.2 dMARS Kinny & Georgeff propose a methodology for building multiagent systems using the dMARS tools <ref> [15] </ref>. They separate external and internal viewpoints. The former includes (a) a description of the agent classes, (b) their taxonomic structure and instances, (c) their interactions and control relationships, and (d) their communications. The latter includes a description of the beliefs, goals, and plans of each agent class. <p> The internal details of plans are not of interest here, but their overall structure can be captured by the skeleton of Figure 5. The lower part of Figure 5, up to the states "Aborted," "Failed," and "Passed," is extracted from Kinny & Georgeff's plan graph <ref> [15, Figure 3] </ref>. The other states and events are included based on the textual description of plans and how they may be coordinated. The state "Dead" is included as a convenience, since "Aborted" and "Failed" are often treated alike.
Reference: [16] <author> Kazuhiro Kuwabara. </author> <title> Meta-level control of coordination protocols. </title> <booktitle> In Proceedings of the International Conference on Multiagent Systems, </booktitle> <pages> pages 165-172, </pages> <year> 1996. </year>
Reference-contexts: Our approach requires neither unnecessary control over agents' actions, nor detailed knowledge of their construction. 6.1 Literature The relevant previous tools for developing multiagent systems are either not formal, are centralized, or violate the autonomy of agents. AgenTalk <ref> [16] </ref> gives a programming environment, but no formal semantics. Kabanza adapts a traditional temporal logic for synchronizing agent plans; his approach has a centralized scheduler and violates autonomy by requiring full knowledge of, and modifying, the agents' plans [14].
Reference: [17] <author> B. C. Moszkowski. </author> <title> Executing Temporal Logic Programs. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, UK, </address> <year> 1986. </year>
Reference-contexts: These concepts do not arise in the original STEAM analysis. 6.1.2 Executable Temporal Logics We consider Concurrent MetateM as a representative executable temporal logic <ref> [17] </ref>, because it has a long intellectual history in temporal logics, and has been used to specify and build agents and multiagent systems [7, 29]. Concurrent MetateM enables the specification of the behavior of the various agents, somewhat like reactive systems in traditional logics of programs.
Reference: [18] <author> Tim Oates, M. V. Nagendra Prasad, and Victor R. Lesser. </author> <title> Cooperative information gathering: A distributed problem solving approach. </title> <booktitle> Proceedings of the IEE: Software Engineering, </booktitle> <volume> 144(1), </volume> <year> 1997. </year>
Reference-contexts: They show how agents need to be coordinated to collectively search or manage information in open environments. Oates et al. propose an approach for planning searches <ref> [18] </ref>. However, their approach does not have an explicit representation of the structure of the search as here, and does not apply generically. Their search techniques are captured as sets of coordination relationships in our approach. von Martial motivates relationships among plans, which are higher level than ours [28].
Reference: [19] <author> Vaughan R. Pratt. </author> <title> Action logic and pure induction. </title> <booktitle> In Logics in AI: European Workshop JELIA '90, </booktitle> <volume> LNCS 478, </volume> <pages> pages 97-120. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: For example, = distributes over _ and ^, and expressions that do not mention a given event have no effect on it. Interestingly, these equations are not sound in our formal model (or any simple variation thereof, for example, those considered in <ref> [19] </ref>)! This is because the models include legal as well as illegal traces. When the illegal traces are eliminated, our equations are indeed sound. Eliminating the illegal traces takes the form of a quotient construction, which identifies expressions that are equivalent with respect to the desired coordination of the agents.
Reference: [20] <author> Anand Rao and Michael Georgeff. </author> <title> Modeling rational agents within a BDI-architecture. </title> <booktitle> In Proceedings of the International Conference on Principles of Knowledge Representation & Reasoning, </booktitle> <pages> pages 473-484, </pages> <year> 1991. </year> <note> Reprinted in [12]. 23 </note>
Reference-contexts: Our approach complements the above, because they develop representations that are close to applications, whereas our approach focuses on the coordination infrastructure itself. However, our approach can help capture their intuitions rigorously. High-level abstractions for agents have been intensively studied, for example, by Rao & Georgeff <ref> [20] </ref> and Singh [22]. Formal research on interactions among agents includes Haddadi [10]. These approaches too develop formal semantics, but do not give as precise an operational characterization as the present approach. There has been much work on social abstractions for agents, for example, by Castelfranchi [1] and Gasser [8].
Reference: [21] <author> Jon Siegel. </author> <title> CORBA: Fundamentals and Programming. Object Management Group and Wiley, </title> <address> New York, </address> <year> 1996. </year>
Reference-contexts: One of the enhancements is being able to switch between TCP/IP and CORBA for the underlying functionality. CORBA is important, because it is becoming a de facto standard for lower-level functionality in distributed systems. It provides an event service with notifications and triggers <ref> [21] </ref>, but not a coordination service of the sort we described. Presently, the specifications are given when the multiagent system is constructed. If the specifications do not conflict with the autonomy of the agents, then they can be executed in a distributed manner.
Reference: [22] <author> Munindar P. Singh. </author> <title> Multiagent Systems: A Theoretical Framework for Intentions, Know-How, and Communications. </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, </address> <year> 1994. </year>
Reference-contexts: Our approach complements the above, because they develop representations that are close to applications, whereas our approach focuses on the coordination infrastructure itself. However, our approach can help capture their intuitions rigorously. High-level abstractions for agents have been intensively studied, for example, by Rao & Georgeff [20] and Singh <ref> [22] </ref>. Formal research on interactions among agents includes Haddadi [10]. These approaches too develop formal semantics, but do not give as precise an operational characterization as the present approach. There has been much work on social abstractions for agents, for example, by Castelfranchi [1] and Gasser [8].
Reference: [23] <author> Munindar P. Singh. </author> <title> Synthesizing distributed constrained events from transactional workflow specifications. </title> <booktitle> In Proceedings of the 12th International Conference on Data Engineering (ICDE), </booktitle> <pages> pages 616-623, </pages> <month> February </month> <year> 1996. </year>
Reference: [24] <author> Munindar P. Singh. </author> <title> Commitments among autonomous agents in information-rich environments. </title> <booktitle> In Proceedings of the 8th European Workshop on Modelling Autonomous Agents in a Multi-Agent World (MAAMAW), </booktitle> <pages> pages 141-155, </pages> <year> 1997. </year>
Reference-contexts: If the specifications do not conflict with the autonomy of the agents, then they can be executed in a distributed manner. Determining the coordination requirements on the fly would be an important extension, and would be necessary, for example, when the coordination requirements emerge from the agents' social commitments <ref> [24] </ref>. We hope to explore a number of directions in future work. Within the coordination service itself, there is need for a richer metamodel of tasks, events, and their attributes. One of the challenges is to have a formal means for constructing complex events.
Reference: [25] <author> Munindar P. Singh. </author> <title> Coordinating Heterogeneous Autonomous Agents TR 97-07, </title> <institution> Computer Science, North Carolina State University, </institution> <address> Raleigh, </address> <month> July </month> <year> 1997. </year>
Reference-contexts: Therefore, the designer of a multiagent system must handle not only the application-specific aspects of the various agents, but also their interactions with one another. Current approaches to constructing multiagent systems offer no fl Proofs and additional results are available in <ref> [25] </ref>. y Munindar Singh is supported by the NCSU College of Engineering, the National Science Foun dation under grants IRI-9529179 and IRI-9624425, and IBM corporation. 1 special coordination support to the designer, who must manually ensure that the (po-tentially autonomous) agents interact appropriately. <p> Table 2 shows revised representations for some of the relationships in Table 1. The strengthened dependencies are then used in all reasoning. An algorithm to derive strengthened dependencies exists <ref> [25] </ref>. 8 Name Description Formal notation R1 f requires e If f occurs, e must occur before or after f e _ f R2 e disables f If e occurs, then f must occur before e e _ f _ f e R3 e feeds or enables f f requires e <p> The correctness of these and other strategies for resolving mutual constraints can be established by recourse to the formal semantics of I and T , and an associated formalization of the execution process <ref> [25] </ref>. 6 Discussion We presented a generic, customizable coordination service for building multiagent systems. Our approach hones in on the structure of the coordinating computations by avoiding low-level details. It can thus facilitate the design and enactment of coordinated behavior.
Reference: [26] <author> Katia Sycara and Dajun Zeng. </author> <title> Multi-agent integration of information gathering and decision support. </title> <booktitle> In Proceedings of the European Conference on Artificial Intelligence, </booktitle> <pages> pages 549-553, </pages> <year> 1996. </year>
Reference-contexts: Our service can effectively support the higher-level requirements of some of the traditional approaches, for example, those of Decker & Lesser [4] and Sycara & Zeng <ref> [26] </ref>. In this manner, it would not replace their insights, but assist in their realization. Section 6 revisits this point. It is easier to relate our approach to previous approaches after we have developed some of our terminology and concepts. <p> M takes a single input at start. Thus, B, D, and the Qs are information agents, and M and F are task agents <ref> [26] </ref>. Assume all agents except M have skeletons as in Figure 1 with D returning a tuple response containing a list of suppliers and Q being invoked on each of its members. M has a skeleton as in Figure 2. <p> Huhns et al. [13] and Sycara & Zeng <ref> [26] </ref> articulate many of our conceptual intuitions, including the ultimate necessity of multiagent, versus single-agent, approaches. They show how agents need to be coordinated to collectively search or manage information in open environments. Oates et al. propose an approach for planning searches [18].
Reference: [27] <author> Milind Tambe. </author> <title> Agent architectures for flexible, practical teamwork. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 22-28, </pages> <year> 1997. </year>
Reference-contexts: In this manner, it would not replace their insights, but assist in their realization. Section 6 revisits this point. It is easier to relate our approach to previous approaches after we have developed some of our terminology and concepts. Accordingly, we consider dMARS [15] and STEAM <ref> [27] </ref> in some detail in Section 4.3 to show how we can model their coordination components. We also consider executable temporal as epitomized by Concurrent MetateM [7, 29], as well as reasoning in STEAM in Section 6. Organization. Section 2 motivates and presents our conceptual approach. <p> It can be viewed as a declarative means to capture the interaction model, which is included in the dMARS methodology, but appears primarily to be procedurally specified. 4.3.3 STEAM Specification STEAM is an architecture for teamwork by agents <ref> [27] </ref>. STEAM offers abstractions for joint intentions and teams, which are beyond our present scope. However, STEAM uses some coordination abstractions, which are relevant here. One of STEAM's features is the specification of team plan operators in terms of role operators|that is, plan operators for member agents. <p> However, including mental and social abstractions into a generic executable system is an important open problem. 6.1.1 STEAM Reasoning We covered STEAM's coordination specifications in Section 4.3.3. Example 18 shows how the reasoning example of <ref> [27] </ref> can be realized in our approach.
Reference: [28] <author> Frank von Martial. </author> <title> Coordinating Plans of Autonomous Agents. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: However, their approach does not have an explicit representation of the structure of the search as here, and does not apply generically. Their search techniques are captured as sets of coordination relationships in our approach. von Martial motivates relationships among plans, which are higher level than ours <ref> [28] </ref>. For example, the relationship facilitates can be captured by postulating events, such that the success of one plan enables an event in the other plan. Decker & Lesser [4] present coordination algorithms in the generalized partial global planning framework.
Reference: [29] <author> Michael Wooldridge. </author> <title> A knowledge-theoretic semantics for concurrent MetateM. In Intelligent Agents III: Agent Theories, Architectures, </title> <booktitle> and Languages, </booktitle> <pages> pages 357-374, </pages> <year> 1997. </year>
Reference-contexts: Accordingly, we consider dMARS [15] and STEAM [27] in some detail in Section 4.3 to show how we can model their coordination components. We also consider executable temporal as epitomized by Concurrent MetateM <ref> [7, 29] </ref>, as well as reasoning in STEAM in Section 6. Organization. Section 2 motivates and presents our conceptual approach. Section 3 describes our specification language. Section 4 uses it to specify some important relationships, and to model some approaches in the literature. Section 5 shows how the service operates. <p> These concepts do not arise in the original STEAM analysis. 6.1.2 Executable Temporal Logics We consider Concurrent MetateM as a representative executable temporal logic [17], because it has a long intellectual history in temporal logics, and has been used to specify and build agents and multiagent systems <ref> [7, 29] </ref>. Concurrent MetateM enables the specification of the behavior of the various agents, somewhat like reactive systems in traditional logics of programs. This is a major difference from our approach, because we only formalize the coordination requirements in our logic, and leave the internal details to the implementors. <p> Wooldridge assumes that the agents execute in lock-step synchronization, and that they always choose the "right" path, which would lead to the stated rules being satisfied (assuming the rules are consistent) <ref> [29] </ref>. These assumptions are relaxed in 21 our approach. Our agents can execute asynchronously, and must be serialized only when necessary. Further, mechanisms such as promising enable avoiding potential deadlocks, using not only the past but also the future in a careful manner.
References-found: 29

