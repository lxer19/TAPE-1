URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1997/tr-97-016.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1997.html
Root-URL: http://www.icsi.berkeley.edu
Email: Email: marek@cs.bonn.edu.  Email: wirtgen@cs.bonn.edu  Email: alexz@cs.virginia.edu  
Title: An Approximation Algorithm for the Bandwidth Problem on Dense Graphs  
Author: Marek Karpinski Jurgen Wirtgen Alex Zelikovsky 
Address: Bonn, 53117 Bonn.  Bonn, 53117 Bonn.  
Note: Research partially supported by DFG Grant KA 673/4-1, by the ESPRIT BR Grants 7097 and EC-US 030, and by the Max-Planck Research Prize.  Research partially supported by the ESPRIT BR Grants 7097 and EC-US 030.  Visiting from  22903. Research partially supported by Volkswagen Stiftung and Packard Foundation.  
Affiliation: Dept. of Computer Science, University of Bonn, 53117 Bonn, and International Computer Science Institute, Berkeley, California.  Dept. of Computer Science, University of  Dept. of Computer Science, University of  Dept. of Computer Science, Thornton Hall, University of Virginia, VA  
Pubnum: TR-97-016  
Abstract: The bandwidth problem is the problem of numbering the vertices of a given graph G such that the maximum difference between the numbers of adjacent vertices is minimal. The problem has a long history and is known to be NP-complete [Papadimitriou, 1976]. Only few special cases of this problem are known to be efficiently approximable. In this paper we present the first constant approximation ratio algorithms on dense instances of this problem. 
Abstract-found: 1
Intro-found: 1
Reference: [AKK 95] <author> Arora, S., Karger, D., Karpinski, M., </author> <title> Polynomial Time Approximation Schemes for Dense Instances of NP-Hard Problems, </title> <booktitle> Proc. 36 th ACM STOC (1995), </booktitle> <pages> pp. 284-293. </pages>
Reference-contexts: In this paper we present the first constant approximation ratio algorithm for ffi-dense graphs. In particular we construct a 3-approximation algorithm. We call a graph G ffi-dense, if the minimum degree ffi (G) is at least ffin (see e.g. <ref> [AKK 95] </ref>). To introduce our method, we describe in Section 2 a weaker version of the algorithm namely a 4-approximation algorithm. It uses as one of its building-blocks the construction of perfect matchings in bipartite graphs. <p> We were not able to prove any constant ratio approximation of the bandwidth for dense in average graphs (see <ref> [AKK 95] </ref>) having fi (n 2 ) edges. For this case however we were able to prove its NP-hardness. Acknowledgment We thank Sanjeev Arora, Haim Kaplan and Uri Zwick for helpful discussions. 11
Reference: [CCDG 82] <author> Chinn, P., Chvatalova, J., Dewdney, A., Gibbs, N., </author> <title> The Bandwidth Problem for Graphs and Matrices A Survey, </title> <journal> Journal of Graph Theory (1982), </journal> <pages> pp. 223-254. </pages>
Reference-contexts: 1 Introduction The bandwidth problem on graphs has a very long and interesting history cf. <ref> [CCDG 82] </ref>. It originated around 1962 at the Jet Propulsion Laboratory (JPL) at Pasadena as a model for minimizing absolute and average errors of the 6-bit picture codes on a hypercube.
Reference: [FM 91] <author> Feder, T., Motwani, R., </author> <title> Clique Partitions, Graph Compression and Speeding-up Algorithms, </title> <booktitle> Proc. 23 rd ACM STOC (1991), </booktitle> <pages> pp. 122-133. </pages>
Reference-contexts: Furthermore we can find a perfect matching in O (jV jjEj) time by the standard s-t-flow techniques [LP 86]. There are also some better methods <ref> [FM 91] </ref> [KR 97]. However this algorithm seems to be far away from being practical and the running time P M (G) of the perfect matching algorithm will be dominated by the rest.
Reference: [GGJK 78] <author> Garey, M., Graham, R., Johnson, D., Knuth, D., </author> <title> Complexity Results For Bandwidth Minimization, </title> <journal> SIAM J. Appl. Math. </journal> <volume> 34 (1978), </volume> <pages> pp. 477-495. </pages>
Reference-contexts: The problem of finding the bandwidth of a graph is NP-complete [Pa 76], even for trees with maximum degree 3 <ref> [GGJK 78] </ref>. The general problem is not known to have any sublinear n * -approximation algorithms. There are only few cases where we can find the optimal layout in polynomial time. <p> Saxe [Sa 80] designed an algorithm 1 which decides whether a given graph has bandwidth at most k in time O (n k ) by dynamic programming. Bandwidth two can be checked in linear time <ref> [GGJK 78] </ref>. Kratsch [Kr 87] introduced an exact O (n 2 log n) algorithm for the bandwidth problem in interval graphs. Smithline [Sm 95] proved that the bandwidth of the complete k-ary tree T k;d with d levels and k d leaves is exactly dk (k d 1)=(k 1)(2d)e.
Reference: [HMM 91] <author> Haralamides, J., Makedon, F., Monien, B., </author> <title> Bandwidth minimization: an approximation algorithm for catapillars, Math. </title> <booktitle> Systems Theory 24 (1991), </booktitle> <pages> pp. 169-177. </pages>
Reference-contexts: Smithline [Sm 95] proved that the bandwidth of the complete k-ary tree T k;d with d levels and k d leaves is exactly dk (k d 1)=(k 1)(2d)e. Her proof is constructive and contains a polynomial time algorithm, which do this task. For catapillars <ref> [HMM 91] </ref> found a polynomial time log n-approximation algorithm.
Reference: [KR 97] <author> Karpinski, M., Rytter, W., </author> <title> Fast Parallel Algorithms for Graph Matching Problems, </title> <publisher> Oxford University Press, </publisher> <year> 1997. </year>
Reference-contexts: Furthermore we can find a perfect matching in O (jV jjEj) time by the standard s-t-flow techniques [LP 86]. There are also some better methods [FM 91] <ref> [KR 97] </ref>. However this algorithm seems to be far away from being practical and the running time P M (G) of the perfect matching algorithm will be dominated by the rest. <p> We can find the perfect matchings also in RN C [MVV 87] <ref> [KR 97] </ref>. It is easy, to construct the graph G A in N C.
Reference: [KZ 97] <author> Karpinski, M., Zelikovsky, A., </author> <title> Approximating Dense Cases of Covering Problems, </title> <type> Technical Report TR-97-004, </type> <institution> ECCC, </institution> <year> 1997. </year>
Reference-contexts: We call a simple graph G superdense, if the minimum degree of G is at least n o (n ffi ). The notion of superdenseness has been introduced in <ref> [KZ 97] </ref>.
Reference: [Kr 87] <author> Kratsch, D., </author> <title> Finding the Minimum Bandwidth of an Interval Graph, </title> <booktitle> Information and Computing 74 (1987), </booktitle> <pages> pp. 140-187. </pages>
Reference-contexts: Saxe [Sa 80] designed an algorithm 1 which decides whether a given graph has bandwidth at most k in time O (n k ) by dynamic programming. Bandwidth two can be checked in linear time [GGJK 78]. Kratsch <ref> [Kr 87] </ref> introduced an exact O (n 2 log n) algorithm for the bandwidth problem in interval graphs. Smithline [Sm 95] proved that the bandwidth of the complete k-ary tree T k;d with d levels and k d leaves is exactly dk (k d 1)=(k 1)(2d)e.
Reference: [LP 86] <author> Lovasz, L., Plummer, M., </author> <title> Matching Theory, </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1986. </year>
Reference-contexts: Furthermore we can find a perfect matching in O (jV jjEj) time by the standard s-t-flow techniques <ref> [LP 86] </ref>. There are also some better methods [FM 91] [KR 97]. However this algorithm seems to be far away from being practical and the running time P M (G) of the perfect matching algorithm will be dominated by the rest.
Reference: [MVV 87] <author> Mulmuley, K., Vazirani, U. V., Vazirani, V. V., </author> <title> Matching is as Easy as Matrix Inversion, </title> <booktitle> Proc. 19 th ACM STOC (1987), </booktitle> <pages> pp. 345-354. </pages>
Reference-contexts: We can find the perfect matchings also in RN C <ref> [MVV 87] </ref> [KR 97]. It is easy, to construct the graph G A in N C.
Reference: [Pa 76] <author> Papadimitriou, C., </author> <title> The NP-Completness of the Bandwidth Minimization Problem, </title> <booktitle> Computing 16 (1976), </booktitle> <pages> pp. 263-270. </pages>
Reference-contexts: The bandwidth B (G) is then B (G) = min fis a numbering of G fB (f; G)g Clearly the bandwidth of G is the greatest bandwidth of its components. The problem of finding the bandwidth of a graph is NP-complete <ref> [Pa 76] </ref>, even for trees with maximum degree 3 [GGJK 78]. The general problem is not known to have any sublinear n * -approximation algorithms. There are only few cases where we can find the optimal layout in polynomial time.
Reference: [PY 88] <author> Papadimitriou, C., Yannakakis, M., </author> <title> Optimization, Approximation, and Complexity Classes, </title> <booktitle> Proc. 20 th ACM STOC (1988), </booktitle> <pages> pp. 229-234. 12 </pages>
Reference-contexts: More strongly, can we hope that a PTAS exists for this problem or is the problem MAX-SNP-hard (see <ref> [PY 88] </ref>)? At the moment we do not know whether the general bandwidth problem is MAX-SNP-hard nor whether the bandwidth for dense graphs is in fact NP-hard.
Reference: [PS 97] <author> Promel, H. J., Steger, A., </author> <title> RNC-Approximation Algorithm for the Steiner Problem, </title> <booktitle> Proc. </booktitle> <month> STACS'97 </month> <year> (1997). </year>
Reference-contexts: It uses as one of its building-blocks the construction of perfect matchings in bipartite graphs. Furthermore it is easy to parallelize, since the perfect matching problem lies in RN C. Recently there has been some success in designing parallel approximation algorithms for some other hard problems <ref> [PS 97] </ref> [Tr 97] [TX 97]. This paper is organized as follows. In Section 2 we outline a 4-approximation algorithm.
Reference: [Sa 80] <author> Saxe, J., </author> <title> Dynamic programming algorithms for recognizing small-bandwidth graphs, </title> <booktitle> SIAM Journal on Algebraic Methods 1 (1980), </booktitle> <pages> pp. 363-369. </pages>
Reference-contexts: The general problem is not known to have any sublinear n * -approximation algorithms. There are only few cases where we can find the optimal layout in polynomial time. Saxe <ref> [Sa 80] </ref> designed an algorithm 1 which decides whether a given graph has bandwidth at most k in time O (n k ) by dynamic programming. Bandwidth two can be checked in linear time [GGJK 78].
Reference: [Sm 95] <author> Smithline, L., </author> <title> Bandwidth of the complete k-ary tree, </title> <booktitle> Discrete Mathematics 142 (1995), </booktitle> <pages> pp. 203-212. </pages>
Reference-contexts: Bandwidth two can be checked in linear time [GGJK 78]. Kratsch [Kr 87] introduced an exact O (n 2 log n) algorithm for the bandwidth problem in interval graphs. Smithline <ref> [Sm 95] </ref> proved that the bandwidth of the complete k-ary tree T k;d with d levels and k d leaves is exactly dk (k d 1)=(k 1)(2d)e. Her proof is constructive and contains a polynomial time algorithm, which do this task.
Reference: [Tr 97] <author> Trevisan, L., </author> <title> Positive Linear Programming, Parallel Approximation, </title> <booktitle> and PCP's, Proc. 4 th European Symposium on Algorithms (1997). </booktitle>
Reference-contexts: It uses as one of its building-blocks the construction of perfect matchings in bipartite graphs. Furthermore it is easy to parallelize, since the perfect matching problem lies in RN C. Recently there has been some success in designing parallel approximation algorithms for some other hard problems [PS 97] <ref> [Tr 97] </ref> [TX 97]. This paper is organized as follows. In Section 2 we outline a 4-approximation algorithm. Section 3 gives a refinement to a 3-approximation algorithm and section 4 gives a 2-approximation algorithm for dense directed graphs. 2 Outline of the 4-Approximation Algorithm Suppose we have some optimal numbering.
Reference: [TX 97] <author> Trevisan, L., Xhafa, F., </author> <title> The Parallel Complexity of Positive Linear Programming, </title> <note> submitted (1997). 13 </note>
Reference-contexts: Furthermore it is easy to parallelize, since the perfect matching problem lies in RN C. Recently there has been some success in designing parallel approximation algorithms for some other hard problems [PS 97] [Tr 97] <ref> [TX 97] </ref>. This paper is organized as follows. In Section 2 we outline a 4-approximation algorithm. Section 3 gives a refinement to a 3-approximation algorithm and section 4 gives a 2-approximation algorithm for dense directed graphs. 2 Outline of the 4-Approximation Algorithm Suppose we have some optimal numbering.
References-found: 17

