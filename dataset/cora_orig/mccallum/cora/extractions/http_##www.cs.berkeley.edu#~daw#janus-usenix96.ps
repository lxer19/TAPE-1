URL: http://www.cs.berkeley.edu/~daw/janus-usenix96.ps
Refering-URL: http://www.cs.berkeley.edu/~brewer/cs262/
Root-URL: 
Email: fiang,daw,randit,brewerg@cs.berkeley.edu  
Title: A Secure Environment for Untrusted Helper Applications Confining the Wily Hacker  
Author: Ian Goldberg David Wagner Randi Thomas Eric A. Brewer 
Address: Berkeley  
Affiliation: University of California,  
Abstract: Many popular programs, such as Netscape, use untrusted helper applications to process data from the network. Unfortunately, the unauthenticated network data they interpret could well have been created by an adversary, and the helper applications are usually too complex to be bug-free. This raises significant security concerns. Therefore, it is desirable to create a secure environment to contain untrusted helper applications. We propose to reduce the risk of a security breach by restricting the program's access to the operating system. In particular, we intercept and filter dangerous system calls via the Solaris process tracing facility. This enabled us to build a simple, clean, user-mode implementation of a secure environment for untrusted helper applications. Our implementation has negligible performance impact, and can protect pre-existing applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> [8lgm]-Advisory-16.UNIX.sendmail-6-Dec-1994, </author> <month> December </month> <year> 1994. </year>
Reference: [2] <author> [8lgm]-Advisory-17.UNIX.sendmailV5-2-May-1995, </author> <month> May </month> <year> 1995. </year>
Reference: [3] <author> [8lgm]-Advisory-17.UNIX.sendmailV5.22-Aug-1995, </author> <month> August </month> <year> 1995. </year>
Reference: [4] <author> [8lgm]-Advisory-20.UNIX.sendmailV5.1-Aug-1995, </author> <month> August </month> <year> 1995. </year>
Reference: [5] <author> Lee Badger, Daniel F. Sterne, David L. Sher-man, and Kenneth M. Walker. </author> <title> A domain and type enforcement UNIX prototype. </title> <booktitle> USENIX Computing Systems, </booktitle> <volume> 9(1) </volume> <pages> 47-83, </pages> <month> Winter </month> <year> 1996. </year>
Reference-contexts: Domain and Type Enforcement (DTE) is a way to extend the OS protection mechanisms to let system administrators specify fine-grained mandatory access controls over the interaction between security-relevant subjects and objects. A research group at TIS has amassed considerable experience with DTE and its practical application to Unix systems <ref> [5, 6, 32, 33] </ref>.
Reference: [6] <author> Lee Badger, Daniel F. Sterne, David L. Sher-man, Kenneth M. Walker, and Sheila A. Haghighat. </author> <title> Practical domain and type enforcement for UNIX. </title> <booktitle> In Proc. 1995 IEEE Symposium on Security and Privacy, </booktitle> <year> 1995. </year>
Reference-contexts: Domain and Type Enforcement (DTE) is a way to extend the OS protection mechanisms to let system administrators specify fine-grained mandatory access controls over the interaction between security-relevant subjects and objects. A research group at TIS has amassed considerable experience with DTE and its practical application to Unix systems <ref> [5, 6, 32, 33] </ref>.
Reference: [7] <author> Andrew Berman, Virgil Bourassa, and Erik Sel-berg. </author> <title> TRON: Process-specific file protection for the UNIX operating system. </title> <booktitle> In Proc. 1995 USENIX Winter Technical Conference, </booktitle> <pages> pages 165-175. </pages> <publisher> USENIX Assoc., </publisher> <year> 1995. </year>
Reference-contexts: Lai and Gray [28] describe an approach which protects against Trojan horses and viruses by limiting filesystem access: their OS extension confines user processes to the minimal filesystem privileges needed, relying on hints from the command line and (when necessary) run-time user input. TRON <ref> [7] </ref> discourages Trojan horses by adding per-process capabilities support to the filesystem discretionary access controls. These works all suffer two major disadvantages: they require kernel modifications, and they do not address issues such as control over process and network resources.
Reference: [8] <author> CERT advisory CA-88:01, </author> <year> 1988. </year>
Reference: [9] <author> CERT advisory CA-90:01, </author> <month> January </month> <year> 1990. </year>
Reference: [10] <author> CERT advisory CA-93:15, </author> <month> October </month> <year> 1993. </year>
Reference: [11] <author> CERT advisory CA-93:16, </author> <month> November </month> <year> 1993. </year>
Reference: [12] <author> CERT advisory CA-94:12, </author> <month> July </month> <year> 1994. </year>
Reference: [13] <author> CERT advisory CA-95:05, </author> <month> February </month> <year> 1995. </year>
Reference: [14] <author> CERT advisory CA-95:08, </author> <month> August </month> <year> 1995. </year>
Reference: [15] <author> CERT advisory CA-95:10, </author> <month> August </month> <year> 1995. </year>
Reference-contexts: These helper applications are security-critical, as they handle untrusted data, but they are not particularly trustworthy themselves. Older versions of ghostscript, for example, allowed mali cious programs to spawn processes and to read or write an unsuspecting user's files <ref> [15, 18, 19, 34, 36] </ref>. What is needed in this new environment, then, is protection for all resources on a user's system from this threat. Our aim is to confine the untrusted software and data by monitoring and restricting the system calls it performs. <p> Furthermore, ghostscript implements a full programming language, with complete access to the filesystem; many other helper applications are also very general. Worse still, these programs are generally big and bloated, and large complex programs are notoriously insecure. 2 Security vulnerabilities have been exposed in these applications <ref> [15, 18, 19, 34, 36] </ref>. 2.2 The difficulties What security requirements are demanded from a successful protection mechanism? Simply put, an outsider who has control over the helper application must not be able to compromise the confidentiality, integrity, or availability of the rest of the system, including the user's files or
Reference: [16] <author> CERT advisory CA-95:11, </author> <month> September </month> <year> 1995. </year>
Reference: [17] <author> William R. Cheswick and Steven M. Bellovin. </author> <title> Firewalls and Internet Security: Repelling the Wily Hacker. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: This term was first introduced, in a slightly different setting, in [35]. To achieve security, a slogan we kept in mind was "keep it simple" [29]. Simple programs are more likely to be secure; simplicity helps to avoid bugs, and makes it easier to find those which creep in <ref> [17, Theorem 1] </ref>. We would like to keep our program simpler than the applications that would run under it. Another of our goals was versatility. We would like to be able to allow or deny individual system calls flexibly, perhaps depending on the arguments to the call.
Reference: [18] <author> Frederick Cohen. </author> <type> Personal communication. </type>
Reference-contexts: These helper applications are security-critical, as they handle untrusted data, but they are not particularly trustworthy themselves. Older versions of ghostscript, for example, allowed mali cious programs to spawn processes and to read or write an unsuspecting user's files <ref> [15, 18, 19, 34, 36] </ref>. What is needed in this new environment, then, is protection for all resources on a user's system from this threat. Our aim is to confine the untrusted software and data by monitoring and restricting the system calls it performs. <p> Furthermore, ghostscript implements a full programming language, with complete access to the filesystem; many other helper applications are also very general. Worse still, these programs are generally big and bloated, and large complex programs are notoriously insecure. 2 Security vulnerabilities have been exposed in these applications <ref> [15, 18, 19, 34, 36] </ref>. 2.2 The difficulties What security requirements are demanded from a successful protection mechanism? Simply put, an outsider who has control over the helper application must not be able to compromise the confidentiality, integrity, or availability of the rest of the system, including the user's files or
Reference: [19] <author> Frederick Cohen. </author> <title> Internet holes. Network Security Magazine, </title> <month> January </month> <year> 1996. </year>
Reference-contexts: These helper applications are security-critical, as they handle untrusted data, but they are not particularly trustworthy themselves. Older versions of ghostscript, for example, allowed mali cious programs to spawn processes and to read or write an unsuspecting user's files <ref> [15, 18, 19, 34, 36] </ref>. What is needed in this new environment, then, is protection for all resources on a user's system from this threat. Our aim is to confine the untrusted software and data by monitoring and restricting the system calls it performs. <p> Furthermore, ghostscript implements a full programming language, with complete access to the filesystem; many other helper applications are also very general. Worse still, these programs are generally big and bloated, and large complex programs are notoriously insecure. 2 Security vulnerabilities have been exposed in these applications <ref> [15, 18, 19, 34, 36] </ref>. 2.2 The difficulties What security requirements are demanded from a successful protection mechanism? Simply put, an outsider who has control over the helper application must not be able to compromise the confidentiality, integrity, or availability of the rest of the system, including the user's files or
Reference: [20] <institution> Colusa Software. OmniWare technical overview, </institution> <year> 1995. </year>
Reference-contexts: However, Java offers many other advantages that we do not address; for instance, Java provides architecture-independence, while Janus only applies to native code and provides no help with portability. OmniWare <ref> [20] </ref> takes advantage of software fault isolation techniques and compiler support to safely execute untrusted code. Like Java, it also has architecture-independence, extensibility, and efficiency as important goals. We note two important differences between the Java approach and the Janus philosophy.
Reference: [21] <author> Ray Cromwell. </author> <title> Buffer overflow, </title> <booktitle> Septem-ber 1995. Announced on the Internet. </booktitle> <address> http://www.c2.net/hacknetscape/. </address>
Reference-contexts: The arguments which leave us suspicious of helper applications also apply to web browsers: they are large, complex programs that interpret untrusted network data. For example, a buffer overrun bug was found in an earlier version of the Netscape browser <ref> [21] </ref>. The main challenge is that browsers legitimately require many more privileges; for instance, most manage configuration files, data caches, and network connections. Of these, the broader network access seems to pose the most difficulties. We believe proxies are a promising approach for improving control over network accesses.
Reference: [22] <author> Drew Dean, Edward W. Felten, and Dan S. Wallach. </author> <title> Java security: From HotJava to Nets-cape and beyond. </title> <booktitle> In Proc. of the 1996 IEEE Symposium on Security and Privacy, </booktitle> <year> 1996. </year>
Reference-contexts: It would also be interesting to explore how these techniques might be extended to a more ambitious scope. One exciting area for further research involves Java applet security. Java [25] is seeing widespread deployment, but several implementation bugs <ref> [22] </ref> have started to shake confidence in its security model. For more protection, one could run Java applets within a secure environment built from techniques described in this paper. <p> So far we have followed the policy that a helper application should not be able to communicate with the outside network, since there are several subtle security issues with address-based authentication, trust perimeters, and covert channels <ref> [22] </ref>. Integration with filtering proxies and fine-grained control over access to other network services, such as domain nameservers and remote web servers, would enable our techniques to be used in broader contexts.
Reference: [23] <author> G. Fernandez and L. Allen. </author> <title> Extending the Unix protection model with access control lists. </title> <booktitle> In Proc. Summer 1988 USENIX Conference, </booktitle> <pages> pages 119-132. </pages> <publisher> USENIX Assoc., </publisher> <year> 1988. </year>
Reference-contexts: Fernandez and Allen <ref> [23] </ref> extend the filesystem protection mechanism with per-user access control lists.
Reference: [24] <author> Glenn S. Fowler, Yennun Huang, David G. Korn, and Herman Rao. </author> <title> A user-level replicated file system. </title> <booktitle> In Summer 1993 USENIX Conference Proceedings, </booktitle> <pages> pages 279-290. </pages> <publisher> USENIX As-soc., </publisher> <year> 1993. </year>
Reference-contexts: Other research that also takes advantage of shared libraries can be found in <ref> [27, 24] </ref>. We note that simple replacement of dangerous C library calls with a safe wrapper is insufficient in our extended context of untrusted and possibly hostile applications; a hostile application could bypass this access control by simply issuing the dangerous system call directly without invoking any library calls.
Reference: [25] <author> James Gosling and Henry McGilton. </author> <title> The Java language environment: </title> <note> A white paper, 1995. http://www.javasoft.com/whitePaper/ javawhitepaper 1.html. </note>
Reference-contexts: They ignored the problem of system-level security; conversely, we do not attempt to provide safety. They also use binary-rewriting technology to accomplish their goals, which prevents them from running arbitrarily general pre-existing applications. Java <ref> [25] </ref> is an comprehensive system that addresses, among other things, both safety and security, although it achieves security by a different approach from ours. Java cannot secure pre-existing programs, because it requires use of a new language. <p> It would also be interesting to explore how these techniques might be extended to a more ambitious scope. One exciting area for further research involves Java applet security. Java <ref> [25] </ref> is seeing widespread deployment, but several implementation bugs [22] have started to shake confidence in its security model. For more protection, one could run Java applets within a secure environment built from techniques described in this paper.
Reference: [26] <author> Brian L. Kahn. </author> <title> Safe use of X window system protocol across a firewall. </title> <booktitle> In Proc. of the 5th USENIX UNIX Security Symposium, </booktitle> <year> 1995. </year>
Reference-contexts: Fortunately the firewall community has already built several safe X proxies that understand the X protocol and filter out dangerous requests <ref> [26, 31] </ref>. We integrated our Janus prototype with Xnest [31], which lets us run another complete instance of the X protocol under Xnest. Xnest acts as a server to its clients (e.g. untrusted helper applications), but its display is painted within one window managed by the root X server.
Reference: [27] <author> David G. Korn and Eduardo Krell. </author> <title> The 3-D file system. </title> <booktitle> In Summer 1989 USENIX Conference Proceedings, </booktitle> <pages> pages 147-156. </pages> <publisher> USENIX As-soc., </publisher> <year> 1989. </year>
Reference-contexts: Other research that also takes advantage of shared libraries can be found in <ref> [27, 24] </ref>. We note that simple replacement of dangerous C library calls with a safe wrapper is insufficient in our extended context of untrusted and possibly hostile applications; a hostile application could bypass this access control by simply issuing the dangerous system call directly without invoking any library calls.
Reference: [28] <author> Nick Lai and Terence Gray. </author> <title> Strengthening discretionary access controls to inhibit Trojan horses and computer viruses. </title> <booktitle> In Proc. Summer 1988 USENIX Conference, </booktitle> <pages> pages 275-286. </pages> <publisher> USENIX Assoc., </publisher> <year> 1988. </year>
Reference-contexts: Fernandez and Allen [23] extend the filesystem protection mechanism with per-user access control lists. Lai and Gray <ref> [28] </ref> describe an approach which protects against Trojan horses and viruses by limiting filesystem access: their OS extension confines user processes to the minimal filesystem privileges needed, relying on hints from the command line and (when necessary) run-time user input.
Reference: [29] <author> Butler Lampson. </author> <title> Hints for computer system design. </title> <booktitle> In Proceedings of the 9th ACM Symposium on Operating Systems Review, volume 17:5, </booktitle> <pages> pages 33-48. </pages> <address> Bretton Woods, </address> <year> 1983. </year>
Reference-contexts: We use the term sandboxing to describe the concept of confining a helper application to a restricted environment, within which it has free reign. This term was first introduced, in a slightly different setting, in [35]. To achieve security, a slogan we kept in mind was "keep it simple" <ref> [29] </ref>. Simple programs are more likely to be secure; simplicity helps to avoid bugs, and makes it easier to find those which creep in [17, Theorem 1]. We would like to keep our program simpler than the applications that would run under it. Another of our goals was versatility.
Reference: [30] <author> William LeFebvre. </author> <title> Restricting network access to system daemons under SunOS. </title> <booktitle> In UNIX Security Symposium III Proceedings, </booktitle> <pages> pages 93-103. </pages> <publisher> USENIX Assoc., </publisher> <year> 1992. </year>
Reference-contexts: have more limited goals, explicitly aim for extreme simplicity, and keep the security mechanism orthogonal from the non-security-critical functionality. securelib is a shared library that replaces the C accept, recvfrom, and recvmsg library calls by a version that performs address-based authentication; it is intended to protect security-critical Unix system daemons <ref> [30] </ref>. Other research that also takes advantage of shared libraries can be found in [27, 24].
Reference: [31] <author> Davor Matic. Xnest. </author> <note> Available in the X11R6 source. Also ftp://ftp.cs.umass.edu/pub/ rcf/exp/X11R6/xc/programs/Xserver/hw/ xnest. </note>
Reference-contexts: Fortunately the firewall community has already built several safe X proxies that understand the X protocol and filter out dangerous requests <ref> [26, 31] </ref>. We integrated our Janus prototype with Xnest [31], which lets us run another complete instance of the X protocol under Xnest. Xnest acts as a server to its clients (e.g. untrusted helper applications), but its display is painted within one window managed by the root X server. <p> Fortunately the firewall community has already built several safe X proxies that understand the X protocol and filter out dangerous requests [26, 31]. We integrated our Janus prototype with Xnest <ref> [31] </ref>, which lets us run another complete instance of the X protocol under Xnest. Xnest acts as a server to its clients (e.g. untrusted helper applications), but its display is painted within one window managed by the root X server. <p> We took 100 measurements for each file, 50 traced under our secure environment and 50 untraced, calculating the mean and standard deviation for each set. The measurements were done using an unloaded single-processor SPARCstation 20 workstation running Sol-aris 2.4. The Xnest X windows proxy <ref> [31] </ref> was used with the secure environment, but not with the untraced measurements. The results are displayed in Figure 1. For each set, we plotted the traced time against the untraced time. 4 The boxes around the data points indicate one standard deviation.
Reference: [32] <author> David L. Sherman, Daniel F. Sterne, Lee Badger, and S. Murphy. </author> <title> Controlling network communication with domain and type enforcement. </title> <type> Technical Report 523, TIS, </type> <month> March </month> <year> 1995. </year>
Reference-contexts: Domain and Type Enforcement (DTE) is a way to extend the OS protection mechanisms to let system administrators specify fine-grained mandatory access controls over the interaction between security-relevant subjects and objects. A research group at TIS has amassed considerable experience with DTE and its practical application to Unix systems <ref> [5, 6, 32, 33] </ref>.
Reference: [33] <author> Daniel F. Sterne, Terry V. Benzel, Lee Badger, Kenneth M. Walker, Karen A. Oostendorp, David L. Sherman, and Michael J. Petkac. </author> <title> Browsing the web safely with domain and type enforcement. </title> <booktitle> In 1996 IEEE Symposium on Security and Privacy, </booktitle> <year> 1996. </year> <note> Research abstract. </note>
Reference-contexts: Domain and Type Enforcement (DTE) is a way to extend the OS protection mechanisms to let system administrators specify fine-grained mandatory access controls over the interaction between security-relevant subjects and objects. A research group at TIS has amassed considerable experience with DTE and its practical application to Unix systems <ref> [5, 6, 32, 33] </ref>.
Reference: [34] <author> Jeff Uphoff. Re: </author> <title> Guidelines on cgi-bin scripts, </title> <month> August </month> <year> 1995. </year> <note> Post to bugtraq mailing list. http://www.eecs.nwu.edu/cgi-bin/mfs/ files2/jmyers/public html/bugtraq/ 0166.html?30#mfs. </note>
Reference-contexts: These helper applications are security-critical, as they handle untrusted data, but they are not particularly trustworthy themselves. Older versions of ghostscript, for example, allowed mali cious programs to spawn processes and to read or write an unsuspecting user's files <ref> [15, 18, 19, 34, 36] </ref>. What is needed in this new environment, then, is protection for all resources on a user's system from this threat. Our aim is to confine the untrusted software and data by monitoring and restricting the system calls it performs. <p> Furthermore, ghostscript implements a full programming language, with complete access to the filesystem; many other helper applications are also very general. Worse still, these programs are generally big and bloated, and large complex programs are notoriously insecure. 2 Security vulnerabilities have been exposed in these applications <ref> [15, 18, 19, 34, 36] </ref>. 2.2 The difficulties What security requirements are demanded from a successful protection mechanism? Simply put, an outsider who has control over the helper application must not be able to compromise the confidentiality, integrity, or availability of the rest of the system, including the user's files or
Reference: [35] <author> Robert Wahbe, Steven Lucco, Thomas E. An-derson, and Susan L. Graham. </author> <title> Efficient software-based fault isolation. </title> <booktitle> In Proc. of the Symp. on Operating System Principles, </booktitle> <year> 1993. </year>
Reference-contexts: We use the term sandboxing to describe the concept of confining a helper application to a restricted environment, within which it has free reign. This term was first introduced, in a slightly different setting, in <ref> [35] </ref>. To achieve security, a slogan we kept in mind was "keep it simple" [29]. Simple programs are more likely to be secure; simplicity helps to avoid bugs, and makes it easier to find those which creep in [17, Theorem 1]. <p> Consequently, much of the work addressing security for this environment is still being developed. To achieve security, we use the concept of sandbox-ing, first introduced by Wahbe et al. in the context of software fault isolation <ref> [35] </ref>. However, they were actually solving a different problem. What they achieved was safety for trusted modules running in the same address space as untrusted modules. They ignored the problem of system-level security; conversely, we do not attempt to provide safety.

References-found: 35

