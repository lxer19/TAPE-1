URL: http://www.cs.brandeis.edu/~mairson/Seminar/GAL-LL.ps.gz
Refering-URL: http://www.cs.brandeis.edu/~mairson/PL-seminar.html
Root-URL: http://www.cs.brandeis.edu
Title: Linear Logic Without Boxes  
Author: Georges Gonthier Martn Abadi Jean-Jacques Levy 
Address: Rocquencourt, B.P. 105 130 Lytton Avenue 78153 Le Chesnay Cedex, France Palo Alto, CA 94301, USA  
Affiliation: INRIA Digital Equipment Corporation Domaine de Voluceau Systems Research Center  
Abstract: Girard's original definition of proof nets for linear logic involves boxes. The box is the unit for erasing and duplicating fragments of proof nets. It imposes synchronization, limits sharing, and impedes a completely local view of computation. Here we describe an implementation of proof nets without boxes. Proof nets are translated into graphs of the sort used in optimal -calculus implementations; computation is performed by simple graph rewriting. This graph implementation helps in understanding optimal reductions in the -calculus and in the various programming languages inspired by linear logic. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.-Y. Girard, </author> <title> "Linear logic," </title> <journal> Theoretical Computer Science, </journal> <volume> vol. 50, </volume> <pages> pp. 1-102, </pages> <year> 1987. </year>
Reference-contexts: 1 Beyond the -calculus The -calculus is not entirely explicit about the operations of erasing and duplicating arguments. These operations are important both in the theory of the - calculus and in its implementations, yet they are typically treated somewhat informally, implicitly. The proof nets of linear logic <ref> [1] </ref> provide a refinement of the -calculus where these operations become explicit; they are even reflected in the type system for proof nets (that is, in linear logic).
Reference: [2] <author> S. Abramsky, </author> <title> "Computational interpretations of linear logic," </title> <booktitle> Theoretical Computer Science, </booktitle> <year> 1990. </year> <note> Special Issue on the 1990 MFPS Workshop, to appear. </note>
Reference-contexts: Abramsky, Wadler, and others have suggested that this new expressiveness makes linear logic a good basis for principled and useful improvements in functional-programming systems (e.g., <ref> [2, 3] </ref>). In some sense, however, linear logic could go further. The usual formulation of proof nets involves boxes. The box is the unit for discarding and copying fragments of proof nets. It works as a synchronization mark. <p> Unfortunately, GC is an unsound operation for full lw, e.g., when all the conclusions of N are classical, GC (N ) has only empty conclusion links. However, GC is sound for the intuitionistic fragment ilw of lw (the analogue of ill, the intuitionistic fragment of linear logic <ref> [2] </ref>). Theorem 2 Let N and G be the proof net and sharing graph translations of an ilw proof, respectively.
Reference: [3] <author> P. Wadler, </author> <title> "Linear types can change the world!," </title> <booktitle> in IFIP TC 2 Working Conference on Programming Concepts and Methods, </booktitle> <month> April </month> <year> 1990. </year>
Reference-contexts: Abramsky, Wadler, and others have suggested that this new expressiveness makes linear logic a good basis for principled and useful improvements in functional-programming systems (e.g., <ref> [2, 3] </ref>). In some sense, however, linear logic could go further. The usual formulation of proof nets involves boxes. The box is the unit for discarding and copying fragments of proof nets. It works as a synchronization mark. <p> This graph system may also serve as a basis for efficient implementations of the various programming languages inspired by linear logic in recent years (e.g., <ref> [11, 12, 3] </ref>). In fact, work on the -calculus [13] suggests an optimality criterion for proof-net reduction; our system is optimal in this sense, and so one may even envision optimal implementations of those programming languages. So far we have not succeeded in treating the full linear logic.
Reference: [4] <author> J. Lamping, </author> <title> "An algorithm for optimal lambda calculus reduction," </title> <booktitle> in Seventeenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 16-30, </pages> <publisher> ACM, </publisher> <month> Jan. </month> <year> 1990. </year>
Reference-contexts: As Girard points out, boxes are a bridle to parallelism. They are also an obstacle to sharing: the box formalism does not support some so phisticated mechanisms for "partial sharing" of common subexpressions available in -calculus implementations such as Lamping's <ref> [4] </ref> and Kathail's [5]. These sharing mechanisms are essential for optimality in reductions, and we believe that they can be of practical value. Moreover, boxes complicate the proof theory of linear logic; with boxes, linear logic falls short of giving a fully local account of computation.
Reference: [5] <author> V. Kathail, </author> <title> Optimal interpreters for lambda-calculus based functional languages. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: As Girard points out, boxes are a bridle to parallelism. They are also an obstacle to sharing: the box formalism does not support some so phisticated mechanisms for "partial sharing" of common subexpressions available in -calculus implementations such as Lamping's [4] and Kathail's <ref> [5] </ref>. These sharing mechanisms are essential for optimality in reductions, and we believe that they can be of practical value. Moreover, boxes complicate the proof theory of linear logic; with boxes, linear logic falls short of giving a fully local account of computation.
Reference: [6] <author> Y. Lafont, </author> <title> "Interaction nets," </title> <booktitle> in Seventeenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 95-108, </pages> <publisher> ACM, </publisher> <month> Jan. </month> <year> 1990. </year>
Reference-contexts: In this paper we describe a translation of proof nets into a system of sharing graphs. Proof-net reduction is simulated with graph rewriting. Sharing graphs are interaction nets, in the sense of Lafont <ref> [6] </ref>; hence rewriting is obviously Church-Rosser, and a naive implementation is straightforward. Everything in the graph system is entirely local. In particular, there are no boxes. Instead, brackets are included as nodes in the system, and they represent the boundaries of boxes.
Reference: [7] <author> J.-Y. Girard, </author> <title> "Geometry of interaction I: Interpretation of system F," </title> <booktitle> in Logic Colloquium '88 (Ferro, Bonotto, Valentini, and Zanardo, eds.), </booktitle> <pages> pp. 221-260, </pages> <publisher> Elsevier Science Publishers B.V. (North Holland), </publisher> <year> 1989. </year>
Reference-contexts: These brackets can propagate and interact with other nodes independently of one another, so boxes can disintegrate. Partial copying and partial sharing become possible. The main sources of this work are Girard's geometry of interaction <ref> [7, 8] </ref> and Lamping's optimal implementation of the -calculus. The geometry of interaction provides a semantics for linear logic. The semantics does not require any global notion for interpreting boxes. At a more syntactic level, Lamp-ing invented graphs similar to ours and used them for implementing the -calculus. <p> This fact was used implicitly in the treatment of the pure -calculus in [9], and it also extends to system F proofs, the original domain for Girard's geometry of interaction <ref> [7] </ref>. 6 Optimality In the -calculus, there is a formal criterion for saying whether a reduction strategy is optimal, in the sense that it performs as few fi steps as possible [13].
Reference: [8] <author> J.-Y. Girard, </author> <title> "Geometry of interaction II: Deadlock-free algorithms.". </title>
Reference-contexts: These brackets can propagate and interact with other nodes independently of one another, so boxes can disintegrate. Partial copying and partial sharing become possible. The main sources of this work are Girard's geometry of interaction <ref> [7, 8] </ref> and Lamping's optimal implementation of the -calculus. The geometry of interaction provides a semantics for linear logic. The semantics does not require any global notion for interpreting boxes. At a more syntactic level, Lamp-ing invented graphs similar to ours and used them for implementing the -calculus.
Reference: [9] <author> G. Gonthier, M. Abadi, and J.-J. Levy, </author> <title> "The geometry of optimal lambda reduction," </title> <booktitle> in Nineteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 15-26, </pages> <publisher> ACM, </publisher> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: The geometry of interaction provides a useful foundation for these graphs, leading to various enhancements, while the graphs are a concrete implementation of the geometry of interaction; this was the subject of a previous paper <ref> [9] </ref>. In this work, we exploit the graphs defined in [9] for evaluating proof nets instead of -terms. The graph system described is of some help in understanding Lamping's work on the -calculus and our previous work. <p> The geometry of interaction provides a useful foundation for these graphs, leading to various enhancements, while the graphs are a concrete implementation of the geometry of interaction; this was the subject of a previous paper <ref> [9] </ref>. In this work, we exploit the graphs defined in [9] for evaluating proof nets instead of -terms. The graph system described is of some help in understanding Lamping's work on the -calculus and our previous work. <p> Several of the nodes are indexed with integers. The integers indicate the "depth" at which context operations take place. An alternative presentation of our system, given in <ref> [9] </ref>, does not rely on indices but decomposes edges into bundles of parallel edges; this presentation is somewhat more primitive, but we use the one with indices for the sake of brevity. The rules of rewriting are in Figure 1, where it is assumed that 0 i &lt; j. <p> Finally, we obtain a full correctness theorem for ilw, an intuitionistic fragment of lw for which we can define a sound garbage-collection procedure. 5.1 The context semantics The basic semantics of sharing graphs is given by paths labelled with context marks, as in <ref> [9] </ref>. As the labelling rules there were explained for the "bus" pre sentation of the graphs, we reformulate them in terms of indexed nodes. Context marks (contexts for short) are partial or dered binary trees with variables: * 2 is a context. <p> A special case is when is a root-to-root path: thus, the symmetric one-to-one relation between (root,context) pairs induced by such paths is preserved by reduction. This gives rise to the "context semantics" of <ref> [9] </ref>. 5.2 Matching nets with graphs As proof of correctness for the graph implementation of lw, we define a notion of matching between proof nets and sharing graphs, consistent with the lw translations and with reduction. <p> Hence, when a marked net matches a graph, there can be an arbitrary amount of garbage in the net that lies outside the codomain of the mapping. In <ref> [9] </ref> this problem was solved for the -calculus by determining which part of a net could be accessed by a -term mapping. <p> The subset C acc of the context semantics generated by paths inside (M ) can be constructed from the topology of M plus the residual markings L ; conversely C acc determines both of these. (By introducing shunts and access paths as in <ref> [9] </ref>, C acc could also be characterized directly, and then global correctness results follow.) In general, it is impossible to read back nets with cuts, because arbitrary types may be hidden by cuts with a proof containing a weakening, and the definition of the live part depends on the distinction between <p> It can be shown that all nets obtained as translation of typed -terms are live, hence that in this case the provisions for GC in Theorem 2 above can be omitted. This fact was used implicitly in the treatment of the pure -calculus in <ref> [9] </ref>, and it also extends to system F proofs, the original domain for Girard's geometry of interaction [7]. 6 Optimality In the -calculus, there is a formal criterion for saying whether a reduction strategy is optimal, in the sense that it performs as few fi steps as possible [13]. <p> Hence, a theory of duplication and families of cut links may be developed as for the -calculus [13]. It is easy to show that two cut links have a same label iff they are in a same family. For sharing graphs, it is proved as in <ref> [9] </ref> that different redex edges never bear the same label; this means that sharing graphs capture exactly the family notion for cut links. A shared reduction step in a labelled net consists in reducing simultaneously all the cuts in a family. <p> Sharing graphs thus implement shared reduction steps with a single index-0 node elimination. A redex is needed if it is accessible from a root of the graph through a consistent access path. (Access paths are defined much as in <ref> [9] </ref>.) A call-by-need reduction strategy in graphs will contract only needed redexes. Theorem 3 Shared call-by-need reductions are optimal for computing the live part of normal forms. 7 The additives and weakening We close with a brief discussion of the difficulties remaining in treating the full linear logic.
Reference: [10] <author> J.-Y. Girard, </author> <title> "On the unity of logic," </title> <type> tech. rep., </type> <month> June </month> <year> 1991. </year> <note> INRIA Report 1467. </note>
Reference-contexts: The extant and new encodings of the -calculus can be obtained by encoding the -calculus in linear logic and then translating linear logic into graphs. In turn, a further change of formal system illuminates the encoding of linear logic: a variant of Girard's unified logic <ref> [10] </ref> admits a simpler, more reg-ular treatment than linear logic. This graph system may also serve as a basis for efficient implementations of the various programming languages inspired by linear logic in recent years (e.g., [11, 12, 3]).
Reference: [11] <author> J. Chirimar, C. Gunter, and J. Riecke, </author> <title> "Linear ML." </title> <year> 1991. </year>
Reference-contexts: This graph system may also serve as a basis for efficient implementations of the various programming languages inspired by linear logic in recent years (e.g., <ref> [11, 12, 3] </ref>). In fact, work on the -calculus [13] suggests an optimality criterion for proof-net reduction; our system is optimal in this sense, and so one may even envision optimal implementations of those programming languages. So far we have not succeeded in treating the full linear logic.
Reference: [12] <author> P. Lincoln and J. Mitchell, </author> <title> "Operational aspects of linear lambda calculus," </title> <booktitle> in Seventh Annual Symposium on Logic in Computer Science, IEEE, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: This graph system may also serve as a basis for efficient implementations of the various programming languages inspired by linear logic in recent years (e.g., <ref> [11, 12, 3] </ref>). In fact, work on the -calculus [13] suggests an optimality criterion for proof-net reduction; our system is optimal in this sense, and so one may even envision optimal implementations of those programming languages. So far we have not succeeded in treating the full linear logic.
Reference: [13] <author> J.-J. Levy, </author> <title> "Optimal reductions in the lambda-calculus," in To H.B. Curry: Essays in Com-binatory Logic, Lambda Calculus and Formalism (J. </title> <editor> Seldin and J. Hindley, </editor> <booktitle> eds.), </booktitle> <pages> pp. 159-191, </pages> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference-contexts: This graph system may also serve as a basis for efficient implementations of the various programming languages inspired by linear logic in recent years (e.g., [11, 12, 3]). In fact, work on the -calculus <ref> [13] </ref> suggests an optimality criterion for proof-net reduction; our system is optimal in this sense, and so one may even envision optimal implementations of those programming languages. So far we have not succeeded in treating the full linear logic. <p> -calculus in [9], and it also extends to system F proofs, the original domain for Girard's geometry of interaction [7]. 6 Optimality In the -calculus, there is a formal criterion for saying whether a reduction strategy is optimal, in the sense that it performs as few fi steps as possible <ref> [13] </ref>. Optimality can also be defined for other formal systems, such as proof nets, where it is about as hard to attain. As for the -calculus, a labelled calculus with labelled proof nets may be defined. <p> The reductions rules for labelled nets are defined by Clearly, residuals of cut links keep the same label. Hence, a theory of duplication and families of cut links may be developed as for the -calculus <ref> [13] </ref>. It is easy to show that two cut links have a same label iff they are in a same family.
Reference: [14] <author> J.-Y. Girard, </author> <title> "A new constructive logic: Classical logic," </title> <type> tech. rep., </type> <month> June </month> <year> 1991. </year> <note> INRIA Report 1443. </note>
Reference-contexts: For these reasons, we sometimes focus on the intu-itionistic multiplicative-exponential fragments of logics. We hope that some of Girard's current progress on polarities <ref> [14] </ref> will help in extending this work to even richer logical systems. Some evidence in this direction is provided by a satisfying translation of polarities for unified logic. The next section is a review of sharing graphs and of the corresponding rewrite rules.
References-found: 14

