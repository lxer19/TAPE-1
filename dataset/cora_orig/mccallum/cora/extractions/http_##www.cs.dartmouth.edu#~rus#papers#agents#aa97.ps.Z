URL: http://www.cs.dartmouth.edu/~rus/papers/agents/aa97.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~rus/papers/agents/agents.html
Root-URL: http://www.cs.dartmouth.edu
Email: frus,rgray,dfkg@cs.dartmouth.edu  
Title: Transportable Information Agents  
Author: Daniela Rus, Robert Gray, and David Kotz 
Address: Hanover, NH 03755  
Affiliation: Department of Computer Science Dartmouth College  
Abstract: Transportable agents are autonomous programs. They can move through a heterogeneous network of computers under their own control, migrating from host to host. They can sense the state of the network, monitor software conditions, and interact with other agents or resources. The network-sensing tools allow our agents to adapt to the network configuration and to navigate under the control of reactive plans. In this paper we describe the design and implementation of the navigation system that gives our agents autonomy. We also discuss the intelligent and adaptive behavior of autonomous agents in distributed information-gathering tasks. 
Abstract-found: 1
Intro-found: 1
Reference: [BN84] <author> A. Birrell and B. Nelson, </author> <title> Implementing remote procedure calls, </title> <journal> in ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: Although little has been published on transportable agents, much work has been done concerning the gen 1 In follow-me computing, a user's applications are sent to her current location so that she may interract with them more effectlively. eral concept of remote computation. Remote Procedure Call (RPC) <ref> [BN84] </ref> was an early form of remote client-server processing. Falcone [Fal87] discusses a distributed-system in which a programming language provides a remote service interface as an alternative to RPC calls. Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors.
Reference: [Bro86] <author> R. Brooks, </author> <title> A robust layered control system for a mobile robot, </title> <journal> in IEEE Journal of Robotics and Automation, </journal> <year> 1986. </year>
Reference-contexts: In our previous work [Gra95, Gra96, NCK96, GKNRC95, KGR96] we describe other aspects of Agent Tcl. The analogy between mobile robots in unstructured physical environments and information agents in rich multi-media environments is not just metaphorical. We have observed that the lessons learned in designing task-directed mobile robots <ref> [Bro86] </ref> can be imported to the problem of distributed information gathering with transportable agents. We also draw from recent results in analyzing the information requirements for robot tasks [DJR93]. 3 Transportable Agents Autonomous agents should move independently.
Reference: [DJR93] <author> B. Donald, J. Jennings, and D. </author> <title> Rus, Information Invariants for Cooperating Autonomous Mobile Robots, </title> <booktitle> in Proceedings of the International Symposium on Robotics Research, </booktitle> <year> 1993. </year>
Reference-contexts: We have observed that the lessons learned in designing task-directed mobile robots [Bro86] can be imported to the problem of distributed information gathering with transportable agents. We also draw from recent results in analyzing the information requirements for robot tasks <ref> [DJR93] </ref>. 3 Transportable Agents Autonomous agents should move independently. A transportable agent is a program that can migrate un der its own control from machine to machine in a het-erogeneous network.
Reference: [DJR94] <author> B. Donald, J. Jennings, and D. </author> <title> Rus. Analyzing Teams of Cooperating Mobile Robots. </title> <booktitle> In Proceedings of the International Conference on Robotics and Automation, </booktitle> <address> San Diego, </address> <year> 1994. </year>
Reference: [EW94] <author> O. Etzioni and D. Weld, </author> <title> A softbot-based interface to the Internet, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 72-76, </pages> <year> 1994. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by <ref> [EW94] </ref>, sod-abots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [RS93, RS96]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Agents are called knowbots by [KC86], softbots by [EW94], sod-abots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [RS93, RS96]. We are interested in the same class of tasks as <ref> [EW94, Mae94, MCF94, KSC94] </ref>. Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. <p> Agents are called knowbots by [KC86], softbots by <ref> [EW94] </ref>, sod-abots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [RS93, RS96]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions.
Reference: [Fal87] <author> J. Falcone, </author> <title> A programmable interface language for heterogeneous distributed systems, </title> <journal> in ACM Transactions on Computer Systems, </journal> <volume> 5(4) </volume> <pages> 330-351, </pages> <year> 1987. </year>
Reference-contexts: Remote Procedure Call (RPC) [BN84] was an early form of remote client-server processing. Falcone <ref> [Fal87] </ref> discusses a distributed-system in which a programming language provides a remote service interface as an alternative to RPC calls. Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors.
Reference: [GK94] <author> M. Genesereth and S. Ketchpel, </author> <title> Software agents, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 48-53, </pages> <year> 1994. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by [EW94], sod-abots by [KSC94], software agents by <ref> [GK94] </ref>, personal assistants by [Mae94, MCF94], and information agents by [RS93, RS96]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts.
Reference: [Gra95] <author> R. Gray, </author> <title> Agent Tcl, </title> <booktitle> in Proceedings of the CIKM Workshop on Intelligent Agents, </booktitle> <address> Balti-more, MD, </address> <year> 1995. </year>
Reference-contexts: Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [Whi94]. Prototypes of transportable agent systems exist <ref> [KK94, Gra95, Gra96, JRS95, TLKC95] </ref>. Telescript has been primarily used in connection with Personal Digital Assistants, network management, active email, electronic commerce, and business process management. The details of how Telescript agents jump between mobile hosts and handle disconnected operations are unclear. <p> Rus and Subra-manian [RS93, RS96, RS96] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work <ref> [Gra95, Gra96, NCK96, GKNRC95, KGR96] </ref> we describe other aspects of Agent Tcl. The analogy between mobile robots in unstructured physical environments and information agents in rich multi-media environments is not just metaphorical. <p> We are currently addressing these issues. 3.1 Agent Tcl: a system for transportable agents Agent Tcl <ref> [Gra95] </ref> reduces migration to a single instruction, provides simple communication among agents, supports multiple languages and transport mechanisms, runs on generic platforms, and provides effective security, fault tolerance and performance. In the current implementation, agents are written in a modified version of the Tool Command Language (Tcl) [Ous94].
Reference: [Gra96] <author> R. Gray, </author> <title> Agent Tcl: A transportable agent system, </title> <booktitle> in Proceedings of the Fourth Annual Tcl/Tk Workshop, </booktitle> <address> Monterey, Ca, </address> <year> 1996. </year>
Reference-contexts: Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [Whi94]. Prototypes of transportable agent systems exist <ref> [KK94, Gra95, Gra96, JRS95, TLKC95] </ref>. Telescript has been primarily used in connection with Personal Digital Assistants, network management, active email, electronic commerce, and business process management. The details of how Telescript agents jump between mobile hosts and handle disconnected operations are unclear. <p> Rus and Subra-manian [RS93, RS96, RS96] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work <ref> [Gra95, Gra96, NCK96, GKNRC95, KGR96] </ref> we describe other aspects of Agent Tcl. The analogy between mobile robots in unstructured physical environments and information agents in rich multi-media environments is not just metaphorical.
Reference: [GKNRC95] <author> R. Gray, D. Kotz, S. Nog, D. Rus, and G. Cybenko, </author> <title> Mobile Agents for Mobile Computing, </title> <type> Technical Report PCS-TR96-285, </type> <institution> Department of Computer Science, Dartmouth College, </institution> <year> 1996. </year>
Reference-contexts: We support adaptation with an infrastructure of network-sensing modules. Agents can sense hardware conditions (for example, whether a host is connected to the network) or software conditions (for example, a specific change in a database). The systems infrastructure for information processing on mobile computers is described in detail in <ref> [GKNRC95] </ref>. Transportable agents provide a convenient, efficient, robust, and intelligent paradigm for implementing distributed applications, especially in the context of wireless computing. First, by migrating to the location of an electronic resource, an agent can access the resource locally and eliminate costly data trans fers over congested networks. <p> This capability supports distributed information-processing applications on mobile computers. Third, the network-sensing capabilities enable agents to autonomously find the host computer, even when the host changes its geographical location. Our system infrastructure for using mobile agents with mobile computing is described in <ref> [GKNRC95] </ref>. Fourth, the network software- and hardware-sensing capabilities permit transportable agents to navigate adaptively. Fifth, our transportable agents can communicate with each other even when they do not know their specific locations in the network. <p> Rus and Subra-manian [RS93, RS96, RS96] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work <ref> [Gra95, Gra96, NCK96, GKNRC95, KGR96] </ref> we describe other aspects of Agent Tcl. The analogy between mobile robots in unstructured physical environments and information agents in rich multi-media environments is not just metaphorical. <p> If the site crashes while the agent is there, the agent dies. A sample session from running this information-retrieval agent is shown in We have extended this experiment using the mobile computer-support functions described in <ref> [GKNRC95] </ref> as follows. We started the information gathering agent on a laptop computer called Bond, and the agent immediately jumped off the laptop to interact with Smart agents throughout the network.
Reference: [JRS95] <author> D. Johansen, R. van Renesse, and F. Schnei-der, </author> <title> Operating system support for mobile agents, </title> <booktitle> in Proceedings of the 5th IEEE Workshop on Hot Topics in Operating Systems, </booktitle> <year> 1995. </year>
Reference-contexts: Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [Whi94]. Prototypes of transportable agent systems exist <ref> [KK94, Gra95, Gra96, JRS95, TLKC95] </ref>. Telescript has been primarily used in connection with Personal Digital Assistants, network management, active email, electronic commerce, and business process management. The details of how Telescript agents jump between mobile hosts and handle disconnected operations are unclear.
Reference: [KC86] <author> R. Kahn and V. Cerf, </author> <title> The World of Know-bots, report to the Corporation for National Research Initiative, </title> <address> Arlington, VA, </address> <year> 1988. </year>
Reference-contexts: there is (1) no need for high-level search engines at the remote sites (e.g., the search application); (2) no need for automated installations (i.e., follow-me computing 1 ) and (3) no need for distributed applications to build their own control language (e.g., programmable distributed databases.) 2 Previous Work Kahn's proposal <ref> [KC86] </ref> about architectures for retrieving information from electronic repositories was the first recognition of the utility of software agents for information processing. It provides context for the issues discussed in this paper. We draw from research results in several distinct areas: operating systems, agents, information retrieval, and mobile robotics. <p> The Mobile Service Agent [TLKC95] has been used primarily for "follow-me" computing, and it is less general than our system. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by <ref> [KC86] </ref>, softbots by [EW94], sod-abots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [RS93, RS96]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94].
Reference: [KSC94] <author> H. Kautz, B. Selman, and M. Coen, </author> <title> Bottom-up design of software agents, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 143-145, </pages> <year> 1994. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by [EW94], sod-abots by <ref> [KSC94] </ref>, software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [RS93, RS96]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Agents are called knowbots by [KC86], softbots by [EW94], sod-abots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [RS93, RS96]. We are interested in the same class of tasks as <ref> [EW94, Mae94, MCF94, KSC94] </ref>. Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions.

Reference: [KGR96] <author> D. Kotz, R. Gray, and D. </author> <booktitle> Rus, Trans--portable Agents Support Worldwide Applications, in Proceedings of SIGOPS96, </booktitle> <year> 1996. </year>
Reference-contexts: Rus and Subra-manian [RS93, RS96, RS96] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work <ref> [Gra95, Gra96, NCK96, GKNRC95, KGR96] </ref> we describe other aspects of Agent Tcl. The analogy between mobile robots in unstructured physical environments and information agents in rich multi-media environments is not just metaphorical.
Reference: [Mae94] <author> P. Maes, </author> <title> Agents that reduce work and information overload, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 31-40, </pages> <year> 1994. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by [EW94], sod-abots by [KSC94], software agents by [GK94], personal assistants by <ref> [Mae94, MCF94] </ref>, and information agents by [RS93, RS96]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Agents are called knowbots by [KC86], softbots by [EW94], sod-abots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [RS93, RS96]. We are interested in the same class of tasks as <ref> [EW94, Mae94, MCF94, KSC94] </ref>. Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. <p> We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes <ref> [MCF94, Mae94] </ref> study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. Rus and Subra-manian [RS93, RS96, RS96] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition.
Reference: [MCF94] <author> T. Mitchell, R. Caruana, D. Freitag, J. Mc-Dermott, and D. Zabowski, </author> <title> Experience with a learning personal assistant, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 81-91, </pages> <year> 1994. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by [EW94], sod-abots by [KSC94], software agents by [GK94], personal assistants by <ref> [Mae94, MCF94] </ref>, and information agents by [RS93, RS96]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Agents are called knowbots by [KC86], softbots by [EW94], sod-abots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [RS93, RS96]. We are interested in the same class of tasks as <ref> [EW94, Mae94, MCF94, KSC94] </ref>. Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. <p> We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes <ref> [MCF94, Mae94] </ref> study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. Rus and Subra-manian [RS93, RS96, RS96] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition.
Reference: [NCK96] <author> S. Nog, S. Chawala, and D. Kotz, </author> <title> An RPC mechanism for transportable agents, </title> <type> Technical Report PCS-TR96-280, </type> <institution> Department of Computer Science, Dartmouth College, </institution> <year> 1996. </year>
Reference-contexts: Rus and Subra-manian [RS93, RS96, RS96] propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work <ref> [Gra95, Gra96, NCK96, GKNRC95, KGR96] </ref> we describe other aspects of Agent Tcl. The analogy between mobile robots in unstructured physical environments and information agents in rich multi-media environments is not just metaphorical. <p> The server restores the state image and the Tcl script continues execution on the new machine from the exact point at which it left off. The Tcl scripts can communicate via message passing, or remote procedure call <ref> [NCK96] </ref>. An agent can use the Tk toolkit to present a graphical user interface on either its home machine or on a remote machine to which it has migrated. In addition, Agent Tcl includes the beginnings of a mechanism for considering economic issues in societies of agents.
Reference: [Ous94] <author> J. Ousterhout, </author> <title> Tcl and the Tk Toolkit, </title> <publisher> in Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1994. </year>
Reference-contexts: In the current implementation, agents are written in a modified version of the Tool Command Language (Tcl) <ref> [Ous94] </ref>. Tcl is a high-level scripting language and is an attractive agent language since it is highly portable, easy to use, and easy to make secure (due to the large amount of existing work that addresses the problem of executing a Tcl program from an untrusted source).
Reference: [RS93] <author> D. Rus and D. Subramanian, </author> <title> Multi-media RISSC Informatics: Retrieving Information with Simple Structural Components, </title> <booktitle> in Proceedings of the ACM Conference on Information and Knowledge Management, </booktitle> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by [EW94], sod-abots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by <ref> [RS93, RS96] </ref>. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. Rus and Subra-manian <ref> [RS93, RS96, RS96] </ref> propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work [Gra95, Gra96, NCK96, GKNRC95, KGR96] we describe other aspects of Agent Tcl.
Reference: [RS96] <author> D. Rus and D. Subramanian, </author> <title> Customizing Multimedia Information Access, </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 7, no. 4, </volume> <year> 1995. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by [EW94], sod-abots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by <ref> [RS93, RS96] </ref>. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. Rus and Subra-manian <ref> [RS93, RS96, RS96] </ref> propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work [Gra95, Gra96, NCK96, GKNRC95, KGR96] we describe other aspects of Agent Tcl.
Reference: [RS96] <author> D. Rus and D. Subramanian, </author> <title> Customizing Information Access, </title> <journal> ACM Transactions on Information Systems, </journal> <month> January </month> <year> 1997. </year>
Reference-contexts: In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by [EW94], sod-abots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by <ref> [RS93, RS96] </ref>. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Et-zioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose statistical and machine-learning methods for building user models to control the agent actions. Rus and Subra-manian <ref> [RS93, RS96, RS96] </ref> propose a modular, open, and customizable agent architecture organized around a notion of structure recognition. In our previous work [Gra95, Gra96, NCK96, GKNRC95, KGR96] we describe other aspects of Agent Tcl.
Reference: [Sal91] <author> G. Salton. </author> <title> The Smart document retrieval project. </title> <booktitle> In Proceedings of the Fourteenth Annual International ACM/SIGIR Conference on Research and Development in Information Retrieval, </booktitle> <pages> pages 356-358, </pages> <year> 1991. </year>
Reference-contexts: A simplified version of this agent appears at bottom. The network location of the various agents is shown at top. file-watch looks at the size of the file and compares the content of the file against a query or a previous version of the file using information retrieval techniques <ref> [Sal91] </ref>. policy with a method that encourages initial exploration of other agents. The exploration function returns an overly optimistic estimate of the usefulness of a service until the service is explored N times; after that the real average value of the agent is used for ranking. <p> We have built information-gathering agents that interface with the Smart information retrieval system 3 . 3 The Smart system is a successful statistical information-retrieval system <ref> [Sal91] </ref> that uses the vector-space model to Our data is a distributed collection of Smart repositories running the Smart system. Each collection consists of computer science technical reports.
Reference: [SG90] <author> J. Stamos and D. Gifford, </author> <title> Remote execution, </title> <journal> in ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 537-565, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Remote Procedure Call (RPC) [BN84] was an early form of remote client-server processing. Falcone [Fal87] discusses a distributed-system in which a programming language provides a remote service interface as an alternative to RPC calls. Stamos and Gifford <ref> [SG90] </ref> introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [Whi94]. Prototypes of transportable agent systems exist [KK94, Gra95, Gra96, JRS95, TLKC95].
Reference: [TLKC95] <author> B. Tomsen, L. Leth, F. Knabe, and P-Y. Chevalier, </author> <title> Mobile agents, </title> <type> ECRC external report, </type> <institution> European Computer-Industry Research Center, </institution> <year> 1995. </year>
Reference-contexts: Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [Whi94]. Prototypes of transportable agent systems exist <ref> [KK94, Gra95, Gra96, JRS95, TLKC95] </ref>. Telescript has been primarily used in connection with Personal Digital Assistants, network management, active email, electronic commerce, and business process management. The details of how Telescript agents jump between mobile hosts and handle disconnected operations are unclear. <p> Telescript has been primarily used in connection with Personal Digital Assistants, network management, active email, electronic commerce, and business process management. The details of how Telescript agents jump between mobile hosts and handle disconnected operations are unclear. The Mobile Service Agent <ref> [TLKC95] </ref> has been used primarily for "follow-me" computing, and it is less general than our system. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents.
Reference: [Whi94] <author> J. E. White, </author> <title> Telescript technology: The foundation for the electronic marketplace, General Magic White Paper, General Magic, </title> <publisher> Inc., </publisher> <year> 1994. </year>
Reference-contexts: Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV), in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents <ref> [Whi94] </ref>. Prototypes of transportable agent systems exist [KK94, Gra95, Gra96, JRS95, TLKC95]. Telescript has been primarily used in connection with Personal Digital Assistants, network management, active email, electronic commerce, and business process management. The details of how Telescript agents jump between mobile hosts and handle disconnected operations are unclear.
References-found: 25

