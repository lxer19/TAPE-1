URL: http://www.cs.bu.edu/techreports/97-011-reliability-def.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: heddaya@cs.bu.edu  helal@mcc.com  
Title: Reliability, Availability, Dependability and Performability: A User-centered View  
Author: Abdelsalam Heddaya 
Keyword: Reliability, Recovery, Availability, Dependability, Definitions.  
Date: December 4, 1996  
Address: Abdelsalam Helal  
Affiliation: Computer Science Dept. Boston University  MCC  
Abstract: Reliability and availability have long been considered twin system properties that could be enhanced by distribution. Paradoxically, the traditional definitions of these properties do not recognize the positive impact of recovery|as distinct from simple repair and restart|on reliability, nor the negative effect of recovery, and of internetworking of clients and servers, on availability. As a result of employing the standard definitions, reliability would tend to be underestimated, and availability overestimated. We offer revised definitions of these two critical metrics, which we call service reliability and service availability, that improve the match between their formal expression, and intuitive meaning. A fortuitous advantage of our approach is that the product of our two metrics yields a highly meaningful figure of merit for the overall dependability of a system. But techniques that enhance system dependability exact a performance cost, so we conclude with a cohesive definition of performability that rewards the system for performance that is delivered to its client applications, after discounting the following consequences of failure: service denial and interruption, lost work, and recovery cost. fl Some of this work was done while this author was on sabbatical leave at Harvard University. y Available as hhttp://www.cs.bu.edu/techreports/97011-reliability-def.ps.Zi. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Bhargava, A. Helal, and K. Friesen. </author> <title> Analyzing availability of replicated database systems. </title> <journal> Int'l Journal of Computer Simulation, </journal> <volume> 1(4) </volume> <pages> 393-418, </pages> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: Service and customer availability as defined above are scalar measures, that necessarily induce a total ordering on any systems that are compared in these terms. Other measures that are more complex, but that lead to more detailed design insights, have been proposed in the literature <ref> [1, 3, 6, 8, 12, 13] </ref>. For example, availability can be measured in a combinatoric sense by the size, composition, and number of the various alternative sets of resources that suffice to keep the system ready to accept new service requests.
Reference: [2] <author> Alvin M. Blum, Ambuj Goyal, Philip Heidelberger, Stephen S. Lavenberg, Marvin K. Nakayama, and Perwez Shahabuddin. </author> <title> Modeling and analysis of system dependability using the system availability estimator. </title> <booktitle> In Digest 24th IEEE Int. Symp. on Fault-tolerant Computing, </booktitle> <year> 1994. </year> <title> 4 Admittedly, simulating for customer availability, </title> <note> dependability and performability will be more costly than for service-based metrics. 5 http://www.cs.bu.edu/groups/oceans/ 10 </note>
Reference-contexts: The traditional definitions are valuable because of their mathematical tractability, and the large body of results and software <ref> [2, 5] </ref> that exists for them. Even though our revised definitions may prove more difficult for analytic evaluation, they are all directly measurable by simulation and system monitoring studies 4 .
Reference: [3] <author> B.A. Coan, B.M. Oki, and E.K. Kolodner. </author> <title> Limitations on database availability when networks partition. </title> <booktitle> In Proc. 5th ACM Symp. on Principles of Distributed Computing, </booktitle> <address> Calgary, Canada, 187-194, </address> <month> Aug. </month> <year> 1986. </year>
Reference-contexts: Service and customer availability as defined above are scalar measures, that necessarily induce a total ordering on any systems that are compared in these terms. Other measures that are more complex, but that lead to more detailed design insights, have been proposed in the literature <ref> [1, 3, 6, 8, 12, 13] </ref>. For example, availability can be measured in a combinatoric sense by the size, composition, and number of the various alternative sets of resources that suffice to keep the system ready to accept new service requests.
Reference: [4] <author> F. Cristian, B. Dancey, and J. Dehn. </author> <title> Fault-tolerance in air traffic control systems. </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> 14(3) </volume> <pages> 265-286, </pages> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: This definition is meaningful in systems that require both high reliability and high availability, or in which trading off one for the other is an acceptable route to maximizing dependability. Air traffic control systems are a famous example <ref> [4, 10] </ref> that can benefit from our dependability metric. Finally, we reformulated the definition of performability as a composite measure of dependability and performance, for systems that exhibit smooth degradation in performance in response to failures, ranging from fully operational, to slowly or partially operational, to completely failed.
Reference: [5] <author> Stacy A. Doyle and Joanne Bechta Dugan. </author> <title> Dependability assessment using binary decision diagrams (bdds). </title> <booktitle> In Digest 25th IEEE Int. Symp. on Fault-tolerant Computing, </booktitle> <year> 1995. </year>
Reference-contexts: The traditional definitions are valuable because of their mathematical tractability, and the large body of results and software <ref> [2, 5] </ref> that exists for them. Even though our revised definitions may prove more difficult for analytic evaluation, they are all directly measurable by simulation and system monitoring studies 4 .
Reference: [6] <author> H. Garcia-Molina and J. Kent. </author> <title> Performance evaluation of reliable distributed systems. </title> <editor> In B. Bhargava, editor, </editor> <booktitle> Concurrency Control and Reliability in Distributed Systems, </booktitle> <pages> pages 454-488. </pages> <publisher> Van Nostrand Reinhold, </publisher> <year> 1987. </year>
Reference-contexts: Service and customer availability as defined above are scalar measures, that necessarily induce a total ordering on any systems that are compared in these terms. Other measures that are more complex, but that lead to more detailed design insights, have been proposed in the literature <ref> [1, 3, 6, 8, 12, 13] </ref>. For example, availability can be measured in a combinatoric sense by the size, composition, and number of the various alternative sets of resources that suffice to keep the system ready to accept new service requests.
Reference: [7] <author> Jim Gray. </author> <title> A census of Tandem system availability between 1985 and 1990. </title> <journal> IEEE Trans. on Reliability, </journal> <volume> 39(4) </volume> <pages> 409-418, </pages> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: Over time, only the identity and number of the failed components change. Failures arise from software bugs, human operator errors, performance overload, severe congestion, magnetic media failures, electronic component failures, or malicious subversion <ref> [7] </ref>. Additionally, scheduled maintenance and environmental disasters such as fires, floods and earthquakes, shut down portions of distributed systems. We can achieve fault-tolerance by recovering from failures when they occur, or by masking failures on-the-fly.
Reference: [8] <author> A. Helal. </author> <title> Modeling database system availability under network partitioning. </title> <journal> Information Sciences, </journal> <volume> 83(1-2):23-35, </volume> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: Service and customer availability as defined above are scalar measures, that necessarily induce a total ordering on any systems that are compared in these terms. Other measures that are more complex, but that lead to more detailed design insights, have been proposed in the literature <ref> [1, 3, 6, 8, 12, 13] </ref>. For example, availability can be measured in a combinatoric sense by the size, composition, and number of the various alternative sets of resources that suffice to keep the system ready to accept new service requests.
Reference: [9] <author> D.B. Johnson and L.J. Raab. </author> <title> A tight upper bound on the benefits of replication and consistency control protocols. </title> <booktitle> In Proc. 10th ACM Symp. on Principles of Database Systems, </booktitle> <address> Denver, Colorado, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: In addition, we can also define customer availability, which is similar to Larry Raab's site availability <ref> [9] </ref>. A c (t) = Pr [accessible (t)] (10) All three measures reflect instantaneous availability [20]. The definitions immediately imply that A c A s A y , which is what we mean by saying that A y overestimates availability.
Reference: [10] <author> K. Kanoun, M. Borrel, T. Morteveille, and A. Peytavin. </author> <title> Modeling the dependability of the french air traffic control system. </title> <booktitle> In Digest 26th IEEE Ann. Int. Symp. on Fault-tolerant Computing, Sendai, </booktitle> <address> Japan, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: This definition is meaningful in systems that require both high reliability and high availability, or in which trading off one for the other is an acceptable route to maximizing dependability. Air traffic control systems are a famous example <ref> [4, 10] </ref> that can benefit from our dependability metric. Finally, we reformulated the definition of performability as a composite measure of dependability and performance, for systems that exhibit smooth degradation in performance in response to failures, ranging from fully operational, to slowly or partially operational, to completely failed.
Reference: [11] <author> Jean-Claude Laprie. </author> <title> Dependable computing: Concepts, limits, challenges. </title> <booktitle> In Digest 25th IEEE Int. Symp. on Fault-tolerant Computing, </booktitle> <year> 1995. </year>
Reference-contexts: We believe that any reasonable comparison between fault-tolerant systems must attempt to measure and compare all of the above four quantities. The subject of this paper is becoming increasingly important despite the continuous improvements in the reliability and overall quality of hardware components <ref> [11, 16] </ref>. A very large distributed computing system, being composed of a large number of computers and communication links, almost always functions with some part of it broken. Over time, only the identity and number of the failed components change.
Reference: [12] <author> G. Martella, B. Ronchetti, and F. Shreiber. </author> <title> Availability evaluation in distributed database systems. </title> <booktitle> Performance Evaluation, </booktitle> <pages> pages 201-211, </pages> <year> 1981. </year>
Reference-contexts: Service and customer availability as defined above are scalar measures, that necessarily induce a total ordering on any systems that are compared in these terms. Other measures that are more complex, but that lead to more detailed design insights, have been proposed in the literature <ref> [1, 3, 6, 8, 12, 13] </ref>. For example, availability can be measured in a combinatoric sense by the size, composition, and number of the various alternative sets of resources that suffice to keep the system ready to accept new service requests.
Reference: [13] <author> R. Mukkamala. </author> <title> Measuring the effect of data distribution and replication policies on performance evaluation of distributed database systems. </title> <booktitle> In Proc. 10th IEEE Intl. Conf. on Data Engineering, </booktitle> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: Service and customer availability as defined above are scalar measures, that necessarily induce a total ordering on any systems that are compared in these terms. Other measures that are more complex, but that lead to more detailed design insights, have been proposed in the literature <ref> [1, 3, 6, 8, 12, 13] </ref>. For example, availability can be measured in a combinatoric sense by the size, composition, and number of the various alternative sets of resources that suffice to keep the system ready to accept new service requests.
Reference: [14] <author> H. Nabli and B. Sericola. </author> <title> Performability analysis of fault-tolerant computer systems. </title> <type> Technical Report 805, </type> <institution> IRISA, Campus de Beaulieu, Rennes, France, </institution> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: We denote the reward rate during that interval by r s (g (x)); t x t 0 ; which is the performance at time x when the system's failure configuration is g (x). The traditional definition of performability <ref> [14, 19, 21] </ref> is the simple integration of the reward function. 1 Z t 0 r (g (x))dx: A shortcomming of this definition is that it rewards the system for every subinterval of [t; t 0 ] in which it has a positive reward rate, regardless of whether this subinterval can
Reference: [15] <author> D. K. Pradhan and N. H. Vaidya. </author> <title> Roll-forward and rollback recovery: Performance-reliability trade-off. </title> <booktitle> In Digest 24th IEEE Int. Symp. on Fault-tolerant Computing, </booktitle> <year> 1994. </year>
Reference-contexts: First, we review the standard definition of reliability then refine it and rename it as system reliability, R y . Second, we propose a new definition of reliability, which we dub service reliability, R s , that is similar in spirit to task-based reliability <ref> [15] </ref>. System Reliability Reliability refers to the ability of the system to operate continuously without interruption. By tradition, reliability is defined as the probability that the system functions properly and continuously in the interval [0; t ], assuming that it was operational at time 0.
Reference: [16] <author> Brian Randell. </author> <title> Software dependability: A personal view. </title> <booktitle> In Digest 25th IEEE Int. Symp. on Fault-tolerant Computing, </booktitle> <year> 1995. </year>
Reference-contexts: We believe that any reasonable comparison between fault-tolerant systems must attempt to measure and compare all of the above four quantities. The subject of this paper is becoming increasingly important despite the continuous improvements in the reliability and overall quality of hardware components <ref> [11, 16] </ref>. A very large distributed computing system, being composed of a large number of computers and communication links, almost always functions with some part of it broken. Over time, only the identity and number of the failed components change.
Reference: [17] <author> R.M. Smith and K.S. Trivedi. </author> <title> A performability analysis of two multiprocessor systems. </title> <booktitle> In Digest 17th IEEE Int. Symp. on Fault-tolerant Computing, </booktitle> <address> Pittsburgh, PA, </address> <pages> pages 224-229, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: The ultimate test of a new modelling or evaluation framework rests on whether it influences design decisions. Our work paves the way for a systematic trade-off of reliability against availability in order to optimize dependability or performability, an approach that has proven successful in a more limited context <ref> [17, 18] </ref>. For example, consider two different recovery subsystems, V; W . V is more sophisticated, and hence has a higher coverage c v &gt; c w .
Reference: [18] <author> Ann T. Tai. </author> <title> Performability-driven adaptive fault tolerance. </title> <booktitle> In Digest 24th IEEE Int. Symp. on Fault-tolerant Computing, </booktitle> <year> 1994. </year> <month> 11 </month>
Reference-contexts: The ultimate test of a new modelling or evaluation framework rests on whether it influences design decisions. Our work paves the way for a systematic trade-off of reliability against availability in order to optimize dependability or performability, an approach that has proven successful in a more limited context <ref> [17, 18] </ref>. For example, consider two different recovery subsystems, V; W . V is more sophisticated, and hence has a higher coverage c v &gt; c w .
Reference: [19] <author> A.T. Tai, J.F. Meyer, and A. Avizienis. </author> <title> Software Performability: From Concepts to Appli--cations, </title> <booktitle> volume 347 of International Series in Engineering and Computer Science. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, London, Dordrecht, </address> <year> 1996. </year>
Reference-contexts: Equally importantly, we elucidate the relationships and trade-offs between these pivotal system qualities, to the point of deriving expressions that quantitatively capture the composite system features of dependability and performability <ref> [19] </ref>. Dependability combines availability and reliability, while performability adds performance to the mix. We believe that any reasonable comparison between fault-tolerant systems must attempt to measure and compare all of the above four quantities. <p> One way to measure the consequences is to reward the system for every time unit it is ready, at a rate proportional to its performance during that interval. The resulting metric is termed performability, since it combines both performance and dependability <ref> [19] </ref>. To arrive at a quantitative measure of performability, Y s (t; t ), we reward the system for dependable performance in the time interval [t; t 0 ] where t 0 t + t . <p> We denote the reward rate during that interval by r s (g (x)); t x t 0 ; which is the performance at time x when the system's failure configuration is g (x). The traditional definition of performability <ref> [14, 19, 21] </ref> is the simple integration of the reward function. 1 Z t 0 r (g (x))dx: A shortcomming of this definition is that it rewards the system for every subinterval of [t; t 0 ] in which it has a positive reward rate, regardless of whether this subinterval can
Reference: [20] <author> K.S. Trivedi. </author> <title> Probability & Statistics with Reliability, Queuing, </title> <booktitle> and Computer Science Applications. </booktitle> <publisher> Prentice-Hall, </publisher> <year> 1982. </year>
Reference-contexts: In addition, we can also define customer availability, which is similar to Larry Raab's site availability [9]. A c (t) = Pr [accessible (t)] (10) All three measures reflect instantaneous availability <ref> [20] </ref>. The definitions immediately imply that A c A s A y , which is what we mean by saying that A y overestimates availability. <p> lim t!1 A (t)|known as the limiting availability|which can be shown to depend only on the mean time to fail and the mean time to repair, lim A y (t) = U + T r t!1 U but not on the nature of the distributions of failure times, repair times <ref> [20] </ref>, or, by analogy, recovery time. Service and customer availability as defined above are scalar measures, that necessarily induce a total ordering on any systems that are compared in these terms.
Reference: [21] <author> K.S. Trivedi, G. Ciardo, M. Malhotra, and R.A. Sahner. </author> <title> Dependability and performability analysis. </title> <type> Technical Report ICASE 93-85, </type> <institution> NASA Langley Research Center, </institution> <month> Nov. </month> <year> 1993. </year> <month> 12 </month>
Reference-contexts: We denote the reward rate during that interval by r s (g (x)); t x t 0 ; which is the performance at time x when the system's failure configuration is g (x). The traditional definition of performability <ref> [14, 19, 21] </ref> is the simple integration of the reward function. 1 Z t 0 r (g (x))dx: A shortcomming of this definition is that it rewards the system for every subinterval of [t; t 0 ] in which it has a positive reward rate, regardless of whether this subinterval can
References-found: 21

