URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/douglas-craig/Preprints/pub39.ps.gz
Refering-URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/douglas-craig/ccd-preprints.html
Root-URL: http://www.cs.yale.edu
Title: OBJECT CLASSES FOR NUMERICAL ANALYSIS  
Author: CRAIG C. DOUGLAS DAVID A. GEORGE AND MICHAEL E. HENDERSON 
Abstract: The current state of software development for numerical simulation is unnecessarily cumbersome and time consuming. The language numerical analysts use to communicate ideas with each other is fairly standard, even across language barriers. There have been successful efforts in computer aided designing (CAD) and visualization to make software systems which are designed so that tasks are performed in a way similar to the way they are commonly described. This is sufficient to us to indicate that if the interface between numerical subroutines and software were designed along similar lines, software development would be easier, quicker, more flexible, and could reuse more of previous development efforts. We present some examples of what the design of such a numerical analysis object system might be. The examples use a prototype C++ implementation. 1. Introduction. In this paper we try to make a case that a high level, object-oriented design for the flow of data between the computational pieces of a numerical 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. E. Bank and D. J. Rose, </author> <title> Some error estimates for the box scheme, </title> <journal> SIAM J. Numer. Anal., </journal> <volume> 24 (1987), </volume> <pages> pp. 777-787. </pages>
Reference-contexts: Function objects. A function is a mapping from one region to another. For example, sin (x) : <ref> [0; 2) ! [1; 1] </ref>: A function has a domain region and a range region. Additionly, there may be a norm or inner product associated with a set of functions. The information about domain, range, norm, or inner product is associated into a functionSpace object. <p> Function objects. A function is a mapping from one region to another. For example, sin (x) : [0; 2) ! <ref> [1; 1] </ref>: A function has a domain region and a range region. Additionly, there may be a norm or inner product associated with a set of functions. The information about domain, range, norm, or inner product is associated into a functionSpace object. Functions in the same functionSpace can be added. <p> We have implemented three classes of operators (MatrixOperators, FiniteDiffer-enceOperators, and FiniteElementOperators. Finite volume methods can either be implemented as a seperate class of operators, or may be cast as finite element opera-tors, see <ref> [1] </ref>) as well as some classes which are composites of operators. 4.3.1. Matrix Operators. MatrixOperators store a linear system in an internal format. The apply operation is a matrix-vector multiply. We have implemented two sub-classes (FullMatrices and BandedMatrices) and plan to eventually provide others.
Reference: [2] <author> R. Boisvert, </author> <note> Guide to available mathematical software, in NA Digest, </note> <editor> C. Moler, ed., </editor> <volume> vol. 94(11), </volume> <month> March </month> <year> 1994. </year>
Reference-contexts: There are also repositories like netlib [5] and MGNet [6] where various research codes are available via anonymous ftp (NIST recently announced that it is making a "Guide to Available Mathematical Software" available, see <ref> [2] </ref>). For example, there are codes for mesh generation, ordinary differential equation (ODE) integration, and for solving boundary value problems. The user is responsible for getting data into the form required by these routines, which in many cases requires converting data from one format to another.
Reference: [3] <author> J. J. Dongarra, J. Du Croz, I. S. Duff, and S. Hammarling, </author> <title> A set of Level 3 basic linear algebra subprograms, </title> <journal> ACM Trans. Math. Soft., </journal> <volume> 16 (1990), </volume> <pages> pp. 1-17. </pages>
Reference-contexts: In xx4-5, we describe what this interface could look like. The field of numerical simulation is moving in this direction already. Consider the emergence of standard file formats and subroutine interfaces (e.g., the BLAS <ref> [3] </ref> [4] [7]). However, at present this is piecemeal and slow. If this paper does nothing else we hope that it focuses attention on the problems which occur in piecing together simulations from existing software. 3. Possibilities.
Reference: [4] <author> J. J. Dongarra, J. Du Croz, S. Hammarling, and R. J. Hanson, </author> <title> An extended set of FORTRAN basic linear algebra subprograms, </title> <journal> ACM Trans. Math. Soft., </journal> <volume> 14 (1988), </volume> <pages> pp. 1-17. </pages>
Reference-contexts: In xx4-5, we describe what this interface could look like. The field of numerical simulation is moving in this direction already. Consider the emergence of standard file formats and subroutine interfaces (e.g., the BLAS [3] <ref> [4] </ref> [7]). However, at present this is piecemeal and slow. If this paper does nothing else we hope that it focuses attention on the problems which occur in piecing together simulations from existing software. 3. Possibilities.
Reference: [5] <author> J. J. Dongarra and E. Grosse, </author> <title> Distribution of mathematical software via electronic mail, </title> <journal> Comm. ACM, </journal> <volume> 30 (1987), </volume> <pages> pp. 403-407. </pages>
Reference-contexts: If the previous two approaches are not applicable, creating a new code using existing subroutine libraries may be possible. For example, the use of libraries to manipulate linear systems of equations and to produce graphics output is common. There are also repositories like netlib <ref> [5] </ref> and MGNet [6] where various research codes are available via anonymous ftp (NIST recently announced that it is making a "Guide to Available Mathematical Software" available, see [2]). For example, there are codes for mesh generation, ordinary differential equation (ODE) integration, and for solving boundary value problems.
Reference: [6] <author> C. C. Douglas, MGNet: </author> <title> a multigrid and domain decomposition network, </title> <journal> ACM SIGNUM Newsletter, </journal> <volume> 27 (1992), </volume> <pages> pp. 2-8. </pages>
Reference-contexts: If the previous two approaches are not applicable, creating a new code using existing subroutine libraries may be possible. For example, the use of libraries to manipulate linear systems of equations and to produce graphics output is common. There are also repositories like netlib [5] and MGNet <ref> [6] </ref> where various research codes are available via anonymous ftp (NIST recently announced that it is making a "Guide to Available Mathematical Software" available, see [2]). For example, there are codes for mesh generation, ordinary differential equation (ODE) integration, and for solving boundary value problems.
Reference: [7] <author> C. L. Lawson, R. J. Hanson, D. Kincaid, and F. T. Krogh, </author> <title> Basic linear algebra subprograms for FORTRAN usage, </title> <journal> ACM Trans. Math. Soft., </journal> <volume> 5 (1979), </volume> <pages> pp. 308-323. </pages>
Reference-contexts: In xx4-5, we describe what this interface could look like. The field of numerical simulation is moving in this direction already. Consider the emergence of standard file formats and subroutine interfaces (e.g., the BLAS [3] [4] <ref> [7] </ref>). However, at present this is piecemeal and slow. If this paper does nothing else we hope that it focuses attention on the problems which occur in piecing together simulations from existing software. 3. Possibilities.
References-found: 7

