URL: http://www.csc.calpoly.edu/~smeldal/toplas/multcomp.ps
Refering-URL: http://www.csc.calpoly.edu/~smeldal/tidbits.html
Root-URL: http://www.csc.calpoly.edu
Email: michal@ii.uib.no  sigurd@ii.uib.no  
Title: A Complete Calculus for the Multialgebraic and Functional Semantics of Nondeterminism  
Author: Michal Walicki Sigurd Meldal 
Affiliation: University of Bergen Department of Informatics  
Abstract: Keywords: Nondeterminism; Multialgebras; Equational logic Abstract: The current algebraic models for nondeterminism focus on the notion of possibility rather than necessity, and consequently equate (nondeterministic) terms that one intuitively would not consider equal. Furthermore, existing models for nondeterminism depart radically from the standard models for (equational) specifications of deterministic operators. One would prefer that a specifi cation language for nondeterministic operators be based on an extension of the standard model concepts, preferably in such a way that the reasoning system for (possibly nondetermin istic) operators becomes the standard equational one whenever restricted to the deterministic operators the objective should be to minimize the departure from the stan dard frameworks. In this paper we define a specification language for nondeterministic operators and multialgebraic semantics. The first complete reasoning system for such specifications is introduced. We also define a transformation of specifications of nondeterministic operators into derived specifications of de terministic ones, obtaining a computational semantics of nondeterministic specification by adopting the standard semantics of the derived specification as the semantics of the original one. This semantics turns out to be a refinement of multialgebra semantics. The calculus is shown to be sound and complete also with respect to the new semantics. 
Abstract-found: 1
Intro-found: 1
Reference: [Aceto 1986] <author> Aceto, L., DeNicola, R., Fantechi, A., </author> <title> Testing Equivalencies for Event Structures, in Mathematical models for the semantics of parallelism, </title> <booktitle> LNCS, </booktitle> <volume> vol. 280, </volume> <publisher> Springer, </publisher> <year> 1986. </year>
Reference: [Bauer 1985] <author> Bauer, F., </author> <title> The Munich Project CIP: The Wide Spectrum Language CIP, </title> <publisher> LNCS vol. 183, Springer, </publisher> <year> 1985. </year>
Reference: [Bergstra 1986] <author> Bergstra, J.A., Klop, J.W., </author> <title> Algebra of communicating processes, </title> <booktitle> Proceedings of CWI Symposium on Mathematics and CS , 89 - 138, </booktitle> <month> Oct. 6-7 </month> <year> 1986. </year>
Reference-contexts: 1. Introduction The notion of nondeterminism arises naturally in describing concurrent systems. Various approaches to the theory and specification of such systems, for instance, CCS [Milner 1980], CSP [Hoare 1985], process alge bras <ref> [Bergstra 1986] </ref>, event structures [Winskel 1988], include the phenomenon of nondeterminism.
Reference: [Birkhoff 1935] <author> Birkhoff, G., </author> <title> On the Structure of Abstract Algebras., </title> <journal> Proc. Cambridge Philos. Soc, </journal> <volume> vol. 31, </volume> <pages> 433-454, </pages> <year> 1935. </year>
Reference-contexts: As the main results we present: 1) A modified view of equality in the multialgebraic semantics of nondeterminism. 2) A calculus, NEQ, which is sound and complete with respect to the multialgebraic seman tics, and which behaves identically with the standard equational calculus <ref> [Birkhoff 1935] </ref> in the deterministic case. 3) A new functional semantics for nondeterministic specifications which refines the multialgebraic one. 4) Soundness and completeness of NEQ with respect to this new semantics. 5) A transformation procedure allowing one to interpret specifications of nondeterministic operators as underspecified deterministic functions.
Reference: [Chang 1977] <author> Chang, </author> <title> C.C., Keisler, H.J., Model Theory, </title> <address> Amsterdam, North-Holand, </address> <year> 1977. </year>
Reference-contexts: Chang 1977]. Models are structures that satisfy the axioms and so the definition of the model classes, Mod (SP 9 ) resp. Mod (SP ), is the usual one too. By the standard argument concerning the preservation of satisfiability by the process of Skolemization <ref> [Chang 1977] </ref>, the two model classes are equal in the sense that every M 9 2Mod (SP 9 ) can be turned into an M 2Mod (SP) by supplying an interpretation for the indexing functions, and every M2Mod (SP) can be turned into an M 9 2Mod (SP 9 ) by
Reference: [Dershowitz 1990] <editor> Dershowitz, N., Jouannaud, J.P., </editor> <booktitle> Rewriting Systems, in Handbook of Theoretical Computer Science, </booktitle> <volume> vol. </volume> <editor> B, </editor> <publisher> The MIT Press, </publisher> <year> 1990. </year> <month> 24 </month>
Reference-contexts: This, of course, led to reasoning systems whose efficiency and 2 This observation extends to reactive systems as well, see [Kahn 1974]. 3 simplicity could not match that of the existing systems for equational reasoning (see, e.g., <ref> [ODonell 1977, Dershowitz 1990] </ref> for references). The difficulty with the set approach as sketched above is its inability to distinguish between the equivalence of terms and the equivalence of application of terms. <p> Thus the specifier need not be exposed to new (and possibly exotic) semantic concepts as long as he stays within the deterministic domain of discourse. (2) The existing tool base, created to cater for standard (equationally defined) algebras <ref> [Dershowitz 1990, ODonell 1977] </ref> can be retained. In 3 This may seem trivial, but was in fact hard enough to require the introduction of full first order logic in the early deduction systems [Kapur 1980, Subrahmanyam 1981].
Reference: [Dijkstra 1976] <author> Dijkstra, </author> <title> E.W., A Discipline of Programming, </title> <publisher> Prentice-Hall, </publisher> <year> 1976. </year>
Reference-contexts: But nondeterminism is also a natural concept in describing sequential programs, either as a means of in dicating a dont care attitude as to which among a number of computational paths will actually be uti lized in a particular computation (e.g., <ref> [Dijkstra 1976] </ref>) or as a means of increasing the level of abstraction [Meldal 1989, Walicki 1994a]. The present work proceeds from the theory of algebraic specifications [Ehrig 1985, Wirsing 1990] and generalizes it so that it can be applied to describing nondeterministic operations.
Reference: [Ehrig 1985] <author> Ehrig, H., Mahr, B., </author> <title> Fundamentals of Algebraic Specification , vol. 1, </title> <publisher> Springer, </publisher> <year> 1985. </year>
Reference-contexts: The present work proceeds from the theory of algebraic specifications <ref> [Ehrig 1985, Wirsing 1990] </ref> and generalizes it so that it can be applied to describing nondeterministic operations. <p> It seems also that the most flexible approach which generalizes calculus by introducing explicit variables <ref> [Goguen 1981, Goguen 1982, Ehrig 1985] </ref> can be adapted to our framework. 5 An equivalent (and the original) formulation of the syntax and the following results could use sequents A ,B, where all atoms in A are equalities (corresponding to ) and all atoms in B equalities or inclusions.
Reference: [Goguen 1981] <author> Goguen, J.A., Meseguer, J., </author> <title> Completeness of Many-Sorted Equational Logic, </title> <journal> SIGPLAN Notices , vol. </journal> <volume> 16, no. 7, </volume> <year> 1981. </year>
Reference-contexts: We will usually give signatures with at least one constant for every sort but other ways of restricting the signatures <ref> [Goguen 1981, Huet 1980] </ref> or ensuring nonemptiness [Goguen 1981, Goguen 1987] can be used instead. <p> We will usually give signatures with at least one constant for every sort but other ways of restricting the signatures [Goguen 1981, Huet 1980] or ensuring nonemptiness <ref> [Goguen 1981, Goguen 1987] </ref> can be used instead. <p> It seems also that the most flexible approach which generalizes calculus by introducing explicit variables <ref> [Goguen 1981, Goguen 1982, Ehrig 1985] </ref> can be adapted to our framework. 5 An equivalent (and the original) formulation of the syntax and the following results could use sequents A ,B, where all atoms in A are equalities (corresponding to ) and all atoms in B equalities or inclusions.
Reference: [Goguen 1982] <author> Goguen, J.A., Meseguer, J., </author> <title> Universal realization, persistent interconnection and implementation of abstract modules, </title> <booktitle> in Proc., 9th Int. Coll. on Automata, Languages and Programming, LNCS, </booktitle> <volume> vol. 140, </volume> <publisher> Springer, </publisher> <year> 1982. </year>
Reference-contexts: It seems also that the most flexible approach which generalizes calculus by introducing explicit variables <ref> [Goguen 1981, Goguen 1982, Ehrig 1985] </ref> can be adapted to our framework. 5 An equivalent (and the original) formulation of the syntax and the following results could use sequents A ,B, where all atoms in A are equalities (corresponding to ) and all atoms in B equalities or inclusions.
Reference: [Goguen 1987] <author> Goguen, J.A., Meseguer, J., </author> <title> Remarks on Remarks on Many-Sorted Equational Logic, </title> <journal> SIGPLAN Notices, </journal> <volume> vol. 22, no. 4, </volume> <pages> 41-48, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: We will usually give signatures with at least one constant for every sort but other ways of restricting the signatures [Goguen 1981, Huet 1980] or ensuring nonemptiness <ref> [Goguen 1981, Goguen 1987] </ref> can be used instead.
Reference: [Goguen 1988] <author> Goguen, J.A., </author> <title> What is unification? A categorical view of substitution, equation, and solution, </title> <type> Tech. Rep. </type> <institution> CSLI-88-124, Centerfor Study of Languages and Information, </institution> <year> 1988. </year>
Reference-contexts: Instead of looking for initial algebras exclusively, we therefore consider the class of all structures sat isfying the axioms of the specification. The proponents of initial semantics may find partial satisfaction in the proposals of generalizing this notion to quasi-initiality <ref> [Goguen 1988, Kaplan 1987, Volger 1989a, Volger 1989b, Wolter 1992] </ref>. Quasi-initiality yields multiple non 10 The term computational structure is not to be confused with the computation structure as used, for instance, in [Wirsing 1989].
Reference: [Hennessy 1980] <author> Hennessy, M., Milner, R., </author> <title> On Observing Nondeterminism and Concurrency, </title> <booktitle> in Automata, Languages and Programming, LNCS, </booktitle> <volume> vol. 85, </volume> <publisher> Springer, </publisher> <year> 1980. </year>
Reference-contexts: Thus the set semantic inter pre tation of equality implies the possibility of two terms returning the same result, but it does not guarantee that the same results actually will be produced. This leads to particular difficulties in treating properly such notions as, for example, observability <ref> [Hennessy 1980, Nipkow 1987] </ref> and implementation [Qian 1993]. Equality in our view should be a necessary equality which must hold in every evaluation of a program (specification). It does not correspond to set equality, but to identity of 1-element sets.
Reference: [Hennessy 1988] <author> Hennessy, M., </author> <title> Observing Processes, in Linear Time, Branching Time and Partial Order in Logics and Models for Concurrency , LNCS, </title> <journal> vol. </journal> <volume> 354, </volume> <publisher> Springer, </publisher> <year> 1988. </year>
Reference: [Hesselink 1988] <author> Hesselink, </author> <title> W.H., A Mathematical Approach to Nondeterminism in Data Types, </title> <journal> ACM: Transactions on Programming Languages and Systems , vol. </journal> <volume> 10, </volume> <year> 1988. </year>
Reference-contexts: The input to such a program does not uniquely determine the resultant out put. Since a nondeterministic program cannot be modeled as an input-output function, the set approach <ref> [Hesselink 1988, Kaplan 1988, Kapur 1980, Maibaum 1977, Subrahmanyam 1981] </ref> generalizes the standard algebraic notion of programs as functions, and regards nondeterministic programs as functions in a multialgebra. A program then denotes a function which instead of returning single values returns sets of values. <p> the set semantics of equality the result will always be 5, because the term t.-0, 1- denotes one and the same set valued constant the equality t.-0, 1-= t.-0, 1- is interpreted as a test of whether the set -0, 1- equals the set -0, 1-, which is always true <ref> [Hesselink 1988, Kaplan 1988, Kapur 1980, Maibaum 1977, Subrahmanyam 1981] </ref>. Thus the set semantic inter pre tation of equality implies the possibility of two terms returning the same result, but it does not guarantee that the same results actually will be produced.
Reference: [Hoare 1973] <author> Hoare, C.A.R., Wirth, N., </author> <title> An axiomatic definition of the programming language PASCAL, </title> <journal> Acta Informatica , vol. </journal> <volume> 2, </volume> <pages> 335-355, </pages> <year> 1973. </year>
Reference-contexts: We have the following sorts and operations: sort A of the accessed values, sort P A of access 18 values (pointers), and sort C A which is a collection of access values P A . Collections were introduced by Hoare and Wirth in <ref> [Hoare 1973] </ref>. An access value serves here as an index to a set of the referenced type. Changes to a referenced object as well as allocation of new objects are considered changes to the collec tion in a way quite similar to the treatment of arrays.
Reference: [Hoare 1985] <author> Hoare, </author> <title> C.A.R., Communicating Sequential Processes, </title> <publisher> Prentice-Hall International Ltd., </publisher> <year> 1985. </year>
Reference-contexts: 1. Introduction The notion of nondeterminism arises naturally in describing concurrent systems. Various approaches to the theory and specification of such systems, for instance, CCS [Milner 1980], CSP <ref> [Hoare 1985] </ref>, process alge bras [Bergstra 1986], event structures [Winskel 1988], include the phenomenon of nondeterminism.
Reference: [Humann 1985] <author> Humann, H., </author> <title> Rapid prototyping for algebraic specifications RAP system users manual, </title> <type> Tech. Rep. </type> <institution> MIP-8504, UniversittPassau, </institution> <year> 1985. </year>
Reference-contexts: In fact, general clauses in our language and calculus can be restricted, for instance to those having only a single positive formula, without impairing the results obtained for the general case. It is an open problem whether the system implemented by Humann <ref> [Humann 1985] </ref> can be accommodated to this more general context. In the recent work [Kriauciukas 1994], an alternative and extended version of NEQ is given which also includes rewriting. Unlike our approach, both Mosses and Humann succeed in construction of initial models.
Reference: [Humann 1988] <author> Humann, H., </author> <title> Nondeterministic algebraic specifications and nonconfluent term rewriting, </title> <booktitle> in Algebraic and Logic Programming, LNCS, </booktitle> <volume> vol. 343, </volume> <publisher> Springer, </publisher> <year> 1988. </year>
Reference-contexts: In particular, it completely changes the traditional notion of a model also in the cases when specifications involve only deterministic functions. In <ref> [Humann 1988, Humann 1993] </ref> Humann uses the standard generalization of algebras to multialgebras as the semantics of nondeterminism. The primitives of his specification language are analogous to the primitives of the language L neq .
Reference: [Humann 1990] <author> Humann, H., </author> <title> Nondeterministic Algebraic Specifications , Ph.D. </title> <type> thesis, </type> <institution> Fakultt fr Mathematik und Informatik, Universitt Passau, </institution> <year> 1990. </year>
Reference: [Humann 1993] <author> Humann, H., </author> <title> Nondeterminism in Algebraic Specifications and Algebraic Programs, </title> <address> Birkhuser, </address> <year> 1993. </year>
Reference-contexts: A clause is satisfied if, for every assignment to the variables, at least one of the literals is true. For a specification SP=((, )), L neq (SP) is the restriction of L neq to W (, V . 2.2. L neq specifications and informal semantics Multialgebraic semantics <ref> [Humann 1993, Kapur 1980] </ref> interprets specifications in some form of power structures where the (nondeterministic) operations correspond to set-valued functions . This means that a (ground) term is interpreted as a set of possibilities it denotes the set of possible results of the corre sponding operation. <p> For deterministic terms t and s , st is the same as st, i.e., deterministic negative literals correspond exactly to equational (deterministic) conditions. Initiality of the term multistructure in MStr (SP) depends on the definition of multi - homomorphism. It is a known fact <ref> [Humann 1993, Mosses 1989a] </ref> that, in the general case, one should not expect the exis tence of initial multimodels . In [Humann 1993] Humann has shown that such multimodels may not exist even if the specification language is restricted to simple formulae. <p> Initiality of the term multistructure in MStr (SP) depends on the definition of multi - homomorphism. It is a known fact [Humann 1993, Mosses 1989a] that, in the general case, one should not expect the exis tence of initial multimodels . In <ref> [Humann 1993] </ref> Humann has shown that such multimodels may not exist even if the specification language is restricted to simple formulae. Therefore we allow general clauses in the specifications and will concentrate on the whole class of multimodels of a specification. <p> Therefore we allow general clauses in the specifications and will concentrate on the whole class of multimodels of a specification. For the dis cussion of the structure of the class of multistructures and (the lack of) initiality results, the reader is referred to <ref> [Humann 1993, Walicki 1993a] </ref>. In the present context, the significance of the term structure is expressed in Lemma 3.4 . <p> One can, however, obtain initial algebras by banning disjunctions i.e., by allowing only Horn formulae (as it is done in <ref> [Humann 1993] </ref> and [Mosses 1989a]). Instead of looking for initial algebras exclusively, we therefore consider the class of all structures sat isfying the axioms of the specification. <p> Bindings reflect the computational interpretation of operations as returning unique results and are crucial for completeness of NEQ as the following example illustrates <ref> [Humann 1993, Walicki 1993a] </ref>. <p> In particular, it completely changes the traditional notion of a model also in the cases when specifications involve only deterministic functions. In <ref> [Humann 1988, Humann 1993] </ref> Humann uses the standard generalization of algebras to multialgebras as the semantics of nondeterminism. The primitives of his specification language are analogous to the primitives of the language L neq .
Reference: [Huet 1980] <author> Huet, G., Oppen, D., </author> <title> Equations and Rewrite Rules: A Survey, in Formal Language Theory: </title> <publisher> Perspectives and Open Problems , Academic Press, </publisher> <year> 1980. </year>
Reference-contexts: We will usually give signatures with at least one constant for every sort but other ways of restricting the signatures <ref> [Goguen 1981, Huet 1980] </ref> or ensuring nonemptiness [Goguen 1981, Goguen 1987] can be used instead.
Reference: [Hupbach 1983] <author> Hupbach, U.L., Reichel, H., </author> <title> On Behavioural Equivalence of Data Types, </title> <journal> EIK, Journal of Information Processing and Cybernetics , vol. </journal> <volume> 19, no. 6, </volume> <pages> 297-305, </pages> <year> 1983. </year>
Reference-contexts: The problem might be avoided by designing more specific storage structuresbut this would be more suitable for a definition of programming language semantics rather than specification. Alternatively, one might introduce a more abstract notion of observational equivalence <ref> [Hupbach 1983, Sannella 1985] </ref> (e.g., with respect to the operation Acc ) in order to consider the two programs equivalent. The example illustrates the general problem of abstraction from some low-level details which are irrelevant at the actual level of description.
Reference: [Kahn 1974] <author> Kahn, G., </author> <title> The semantics of a simple language for parallel programming, </title> <booktitle> in Proceedings of Proceedings of IFIP 1974, </booktitle> <publisher> North-Holland, </publisher> <year> 1974. </year>
Reference-contexts: This, of course, led to reasoning systems whose efficiency and 2 This observation extends to reactive systems as well, see <ref> [Kahn 1974] </ref>. 3 simplicity could not match that of the existing systems for equational reasoning (see, e.g., [ODonell 1977, Dershowitz 1990] for references). The difficulty with the set approach as sketched above is its inability to distinguish between the equivalence of terms and the equivalence of application of terms.
Reference: [Kaplan 1987] <author> Kaplan, S., </author> <title> Conditional Rewriting, in Conditional Term Rewriting Systems, </title> <booktitle> LNCS, </booktitle> <volume> vol. 308, </volume> <publisher> Springer, </publisher> <year> 1987. </year>
Reference-contexts: Instead of looking for initial algebras exclusively, we therefore consider the class of all structures sat isfying the axioms of the specification. The proponents of initial semantics may find partial satisfaction in the proposals of generalizing this notion to quasi-initiality <ref> [Goguen 1988, Kaplan 1987, Volger 1989a, Volger 1989b, Wolter 1992] </ref>. Quasi-initiality yields multiple non 10 The term computational structure is not to be confused with the computation structure as used, for instance, in [Wirsing 1989].
Reference: [Kaplan 1988] <author> Kaplan, S., </author> <title> Rewriting with a Nondeterministic Choice Operator, </title> <journal> Theoretical Computer Science, </journal> <volume> vol. 56, </volume> <pages> 37-57, </pages> <year> 1988. </year>
Reference-contexts: The input to such a program does not uniquely determine the resultant out put. Since a nondeterministic program cannot be modeled as an input-output function, the set approach <ref> [Hesselink 1988, Kaplan 1988, Kapur 1980, Maibaum 1977, Subrahmanyam 1981] </ref> generalizes the standard algebraic notion of programs as functions, and regards nondeterministic programs as functions in a multialgebra. A program then denotes a function which instead of returning single values returns sets of values. <p> the set semantics of equality the result will always be 5, because the term t.-0, 1- denotes one and the same set valued constant the equality t.-0, 1-= t.-0, 1- is interpreted as a test of whether the set -0, 1- equals the set -0, 1-, which is always true <ref> [Hesselink 1988, Kaplan 1988, Kapur 1980, Maibaum 1977, Subrahmanyam 1981] </ref>. Thus the set semantic inter pre tation of equality implies the possibility of two terms returning the same result, but it does not guarantee that the same results actually will be produced.
Reference: [Kapur 1980] <author> Kapur, D., </author> <title> Towards a theory of abstract data types, </title> <type> Ph.D. thesis, </type> <institution> Laboratory for CS, MIT, </institution> <year> 1980. </year>
Reference-contexts: The input to such a program does not uniquely determine the resultant out put. Since a nondeterministic program cannot be modeled as an input-output function, the set approach <ref> [Hesselink 1988, Kaplan 1988, Kapur 1980, Maibaum 1977, Subrahmanyam 1981] </ref> generalizes the standard algebraic notion of programs as functions, and regards nondeterministic programs as functions in a multialgebra. A program then denotes a function which instead of returning single values returns sets of values. <p> the set semantics of equality the result will always be 5, because the term t.-0, 1- denotes one and the same set valued constant the equality t.-0, 1-= t.-0, 1- is interpreted as a test of whether the set -0, 1- equals the set -0, 1-, which is always true <ref> [Hesselink 1988, Kaplan 1988, Kapur 1980, Maibaum 1977, Subrahmanyam 1981] </ref>. Thus the set semantic inter pre tation of equality implies the possibility of two terms returning the same result, but it does not guarantee that the same results actually will be produced. <p> which, in addition, has only one element. (To indicate this modified interpretation we will use the symbol instead of the usual identity =.) Besides problems with construct ing an adequate algebraic model the set approach originally forced one to consider even simple equa tional specifications as full first order theories <ref> [Subrahmanyam 1981, Kapur 1980] </ref>. This, of course, led to reasoning systems whose efficiency and 2 This observation extends to reactive systems as well, see [Kahn 1974]. 3 simplicity could not match that of the existing systems for equational reasoning (see, e.g., [ODonell 1977, Dershowitz 1990] for references). <p> In 3 This may seem trivial, but was in fact hard enough to require the introduction of full first order logic in the early deduction systems <ref> [Kapur 1980, Subrahmanyam 1981] </ref>. <p> A clause is satisfied if, for every assignment to the variables, at least one of the literals is true. For a specification SP=((, )), L neq (SP) is the restriction of L neq to W (, V . 2.2. L neq specifications and informal semantics Multialgebraic semantics <ref> [Humann 1993, Kapur 1980] </ref> interprets specifications in some form of power structures where the (nondeterministic) operations correspond to set-valued functions . This means that a (ground) term is interpreted as a set of possibilities it denotes the set of possible results of the corre sponding operation. <p> A deterministic interpretation of nondeterministic specifications can be found in some earlier works <ref> [Kapur 1980, Subrahmanyam 1981] </ref>. They used only simple equations (interpreted as set equalities) and specified a nondeterministic operation f by means of the associated characteristic predicate P f (x) expressing that x is a possible result of f. <p> Our derived specifications are based on further Skolemization of such formulae and yield a new se mantics where nondeterminism is made explicit in form of the index arguments. Furthermore, <ref> [Kapur 1980, Subrahmanyam 1981] </ref> did not address the problem of referential opacity of nondeterministic terms at the level of the specification language. Reasoning had to be carried out at the level of the derived deterministic formulae in full first-order logic.
Reference: [Kriauciukas 1994] <author> Kriauciukas, V., Walicki, M., </author> <title> Reasoning and Rewriting with Set-Relations I: Ground Case, </title> <type> CSL94; also Tech. Rep. 92, </type> <institution> Universityof Bergen, Dept. of Informatics, </institution> <year> 1994. </year>
Reference-contexts: It is an open problem whether the system implemented by Humann [Humann 1985] can be accommodated to this more general context. In the recent work <ref> [Kriauciukas 1994] </ref>, an alternative and extended version of NEQ is given which also includes rewriting. Unlike our approach, both Mosses and Humann succeed in construction of initial models.
Reference: [Lyndon 1959] <author> Lyndon, </author> <title> R.C., Properties Preserved under Homomorphism, </title> <journal> Pacific Journal of Mathematics , vol. </journal> <volume> 9, </volume> <year> 1959. </year>
Reference-contexts: Corollary 5.3 significantly strengthens such an argument. There is an obvious difficulty with applying the above argument to negative formulae as they are not necessarily preserved under ho - momorphisms <ref> [Lyndon 1959] </ref>. More importantly, the above reasoning does not guarantee that for an existential quantifier in C 9 there will exist one index term the terms may be different in different compo nents of Comp (SP).
Reference: [Maibaum 1977] <author> Maibaum, T.S.E., </author> <title> The Semantics of Nondeterminism, </title> <type> Tech. Rep. </type> <address> CS-77-30, Universityof Waterloo, Ontario, Canada, </address> <month> December </month> <year> 1977. </year>
Reference-contexts: The input to such a program does not uniquely determine the resultant out put. Since a nondeterministic program cannot be modeled as an input-output function, the set approach <ref> [Hesselink 1988, Kaplan 1988, Kapur 1980, Maibaum 1977, Subrahmanyam 1981] </ref> generalizes the standard algebraic notion of programs as functions, and regards nondeterministic programs as functions in a multialgebra. A program then denotes a function which instead of returning single values returns sets of values. <p> the set semantics of equality the result will always be 5, because the term t.-0, 1- denotes one and the same set valued constant the equality t.-0, 1-= t.-0, 1- is interpreted as a test of whether the set -0, 1- equals the set -0, 1-, which is always true <ref> [Hesselink 1988, Kaplan 1988, Kapur 1980, Maibaum 1977, Subrahmanyam 1981] </ref>. Thus the set semantic inter pre tation of equality implies the possibility of two terms returning the same result, but it does not guarantee that the same results actually will be produced.
Reference: [Meldal 1987] <author> Meldal, S., </author> <title> Allocations of Objects Considered as Nondeterministic Expressions , Tech. </title> <type> Rep. </type> <institution> CSL-TR-87 - 335, CSLStanford University, </institution> <year> 1987. </year>
Reference-contexts: This leads not only to a more abstract specification but also avoids the problems of distinguishing the structures which are supposed to have the same obser vational behavior. Motivation for this example comes from <ref> [Meldal 1987, Meldal 1989] </ref>. First, we illus trate the problems arising in the case of the usual deterministic underspecification and then show how they can be avoided by introducing nondeterministic operations.
Reference: [Meldal 1989] <author> Meldal, S., </author> <title> An Abstract Axiomatization of Pointer Types, </title> <booktitle> in Proceedings of The 22nd Annual Hawaii International Conference on System Sciences, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1989. </year>
Reference-contexts: also a natural concept in describing sequential programs, either as a means of in dicating a dont care attitude as to which among a number of computational paths will actually be uti lized in a particular computation (e.g., [Dijkstra 1976]) or as a means of increasing the level of abstraction <ref> [Meldal 1989, Walicki 1994a] </ref>. The present work proceeds from the theory of algebraic specifications [Ehrig 1985, Wirsing 1990] and generalizes it so that it can be applied to describing nondeterministic operations. <p> This leads not only to a more abstract specification but also avoids the problems of distinguishing the structures which are supposed to have the same obser vational behavior. Motivation for this example comes from <ref> [Meldal 1987, Meldal 1989] </ref>. First, we illus trate the problems arising in the case of the usual deterministic underspecification and then show how they can be avoided by introducing nondeterministic operations.
Reference: [Meseguer 1990] <author> Meseguer, J., </author> <title> Conditional Rewriting Logic: Deduction, Models and Concurrency, </title> <booktitle> in Proceedings of CTRS'90, </booktitle> <volume> LNCS vol. 516, </volume> <year> 1990. </year>
Reference-contexts: Just like MMod (SP) did not, in general, possess an initial object, so at the level of L deq specifications one cannot hope to find an initial algebra appropriate for the interpretation of general clauses. The reason is well illustrated by Meseguer <ref> [Meseguer 1990, Meseguer 1992] </ref> and Wirsing [Wirsing 1989], and is a conse quence of the fact that disjunctive equations where none of the alternatives are maximal (valid in all models) do not admit initial models.
Reference: [Meseguer 1992] <author> Meseguer, J., </author> <title> Conditional rewriting logic as a unified model of concurrency, </title> <journal> TCS, </journal> <volume> no. 96, </volume> <pages> 73-155, </pages> <year> 1992. </year>
Reference-contexts: Just like MMod (SP) did not, in general, possess an initial object, so at the level of L deq specifications one cannot hope to find an initial algebra appropriate for the interpretation of general clauses. The reason is well illustrated by Meseguer <ref> [Meseguer 1990, Meseguer 1992] </ref> and Wirsing [Wirsing 1989], and is a conse quence of the fact that disjunctive equations where none of the alternatives are maximal (valid in all models) do not admit initial models.
Reference: [Milner 1980] <author> Milner, R., </author> <title> Calculi for Communicating Systems, </title> <publisher> LNCS vol. 92, Springer, </publisher> <year> 1980. </year>
Reference-contexts: 1. Introduction The notion of nondeterminism arises naturally in describing concurrent systems. Various approaches to the theory and specification of such systems, for instance, CCS <ref> [Milner 1980] </ref>, CSP [Hoare 1985], process alge bras [Bergstra 1986], event structures [Winskel 1988], include the phenomenon of nondeterminism.
Reference: [Mosses 1989a] <author> Mosses, </author> <title> P.D., Unified Algebras and Institutions, </title> <booktitle> in Proceedings of LICS89, Fourth Annual Symposium on Logic in Computer Science, </booktitle> <year> 1989. </year>
Reference-contexts: This, together with inclusion and (limited) negation expressed by allows us to utilize nondeterminism for defining and reasoning about subsort hierarchies at the term level (in a way reminiscent of unified algebras <ref> [Mosses 1989a] </ref>). Interpreted in the multialgebras, st means that the possible results of s are contained in the set of possible results of t . <p> For deterministic terms t and s , st is the same as st, i.e., deterministic negative literals correspond exactly to equational (deterministic) conditions. Initiality of the term multistructure in MStr (SP) depends on the definition of multi - homomorphism. It is a known fact <ref> [Humann 1993, Mosses 1989a] </ref> that, in the general case, one should not expect the exis tence of initial multimodels . In [Humann 1993] Humann has shown that such multimodels may not exist even if the specification language is restricted to simple formulae. <p> One can, however, obtain initial algebras by banning disjunctions i.e., by allowing only Horn formulae (as it is done in [Humann 1993] and <ref> [Mosses 1989a] </ref>). Instead of looking for initial algebras exclusively, we therefore consider the class of all structures sat isfying the axioms of the specification. <p> Both multimodels and functional models of a specification SP satisfy the same formula of L neq (SP). Some of the more recent work on algebraic specifications of nondeterminism bears some similarities to the approach presented in this paper. An elegant construction unified algebras has been proposed by Mosses in <ref> [Mosses 1989a, Mosses 1989b] </ref>. The unified algebras provide quite general and flexible semantic tools.
Reference: [Mosses 1989b] <author> Mosses, </author> <title> P.D., Unified Algebras and Action Semantics, </title> <booktitle> in STACS89, LNCS, </booktitle> <volume> vol. 349, </volume> <publisher> Springer, </publisher> <year> 1989. </year>
Reference-contexts: Both multimodels and functional models of a specification SP satisfy the same formula of L neq (SP). Some of the more recent work on algebraic specifications of nondeterminism bears some similarities to the approach presented in this paper. An elegant construction unified algebras has been proposed by Mosses in <ref> [Mosses 1989a, Mosses 1989b] </ref>. The unified algebras provide quite general and flexible semantic tools.
Reference: [Nipkow 1986] <author> Nipkow, T., </author> <title> Nondeterministic Data Types: Models and Implementations, </title> <journal> Acta Informatica, </journal> <volume> vol. 22, 629 - 661, </volume> <year> 1986. </year> <month> 25 </month>
Reference: [Nipkow 1987] <author> Nipkow, T., </author> <title> Observing nondeterministic data types, </title> <booktitle> in Recent Trends in Data Type Specification , LNCS, </booktitle> <volume> vol. 332, </volume> <publisher> Springer, </publisher> <year> 1987. </year>
Reference-contexts: Thus the set semantic inter pre tation of equality implies the possibility of two terms returning the same result, but it does not guarantee that the same results actually will be produced. This leads to particular difficulties in treating properly such notions as, for example, observability <ref> [Hennessy 1980, Nipkow 1987] </ref> and implementation [Qian 1993]. Equality in our view should be a necessary equality which must hold in every evaluation of a program (specification). It does not correspond to set equality, but to identity of 1-element sets.
Reference: [ODonell 1977] <author> O'Donnell, M., </author> <title> Computing in Systems Described by Equations, </title> <booktitle> LNCS, </booktitle> <volume> vol. 58, </volume> <publisher> Springer, </publisher> <year> 1977. </year>
Reference-contexts: This, of course, led to reasoning systems whose efficiency and 2 This observation extends to reactive systems as well, see [Kahn 1974]. 3 simplicity could not match that of the existing systems for equational reasoning (see, e.g., <ref> [ODonell 1977, Dershowitz 1990] </ref> for references). The difficulty with the set approach as sketched above is its inability to distinguish between the equivalence of terms and the equivalence of application of terms. <p> Thus the specifier need not be exposed to new (and possibly exotic) semantic concepts as long as he stays within the deterministic domain of discourse. (2) The existing tool base, created to cater for standard (equationally defined) algebras <ref> [Dershowitz 1990, ODonell 1977] </ref> can be retained. In 3 This may seem trivial, but was in fact hard enough to require the introduction of full first order logic in the early deduction systems [Kapur 1980, Subrahmanyam 1981].
Reference: [Pickett 1967] <author> Pickett, </author> <title> H.E., </title> <journal> Homomorphisms and subalgebras of multialgebras, Pacific Journal of Mathematics, </journal> <volume> vol. 21, </volume> <pages> 327-342, </pages> <year> 1967. </year>
Reference: [Qian 1993] <author> Qian, X., Goldberg, A., </author> <title> Referential Opacity In Nondeterministic Data Refinement, </title> <journal> ACM LoPLaS , vol. </journal> <volume> 2, no. </volume> <pages> 1-4, 233-241, </pages> <year> 1993. </year>
Reference-contexts: This leads to particular difficulties in treating properly such notions as, for example, observability [Hennessy 1980, Nipkow 1987] and implementation <ref> [Qian 1993] </ref>. Equality in our view should be a necessary equality which must hold in every evaluation of a program (specification). It does not correspond to set equality, but to identity of 1-element sets.
Reference: [Sannella 1985] <author> Sannella, D., Tarlecki, A., </author> <title> On Observational Equivalence and Algebraic Specification, </title> <booktitle> in Proceedings of Joint Conference on Theory and Practice of Software Development, TAPSOFT, </booktitle> <volume> LNCS vol. 185, </volume> <publisher> Springer, </publisher> <year> 1985. </year>
Reference-contexts: The problem might be avoided by designing more specific storage structuresbut this would be more suitable for a definition of programming language semantics rather than specification. Alternatively, one might introduce a more abstract notion of observational equivalence <ref> [Hupbach 1983, Sannella 1985] </ref> (e.g., with respect to the operation Acc ) in order to consider the two programs equivalent. The example illustrates the general problem of abstraction from some low-level details which are irrelevant at the actual level of description.
Reference: [Subrahmanyam 1981] <author> Subrahmanyam, </author> <title> P.A., Nondeterminism in Abstract Data Types, </title> <booktitle> in Automata, Languages and Programming, LNCS, </booktitle> <volume> vol. 115, </volume> <publisher> Springer, </publisher> <year> 1981. </year>
Reference-contexts: The input to such a program does not uniquely determine the resultant out put. Since a nondeterministic program cannot be modeled as an input-output function, the set approach <ref> [Hesselink 1988, Kaplan 1988, Kapur 1980, Maibaum 1977, Subrahmanyam 1981] </ref> generalizes the standard algebraic notion of programs as functions, and regards nondeterministic programs as functions in a multialgebra. A program then denotes a function which instead of returning single values returns sets of values. <p> the set semantics of equality the result will always be 5, because the term t.-0, 1- denotes one and the same set valued constant the equality t.-0, 1-= t.-0, 1- is interpreted as a test of whether the set -0, 1- equals the set -0, 1-, which is always true <ref> [Hesselink 1988, Kaplan 1988, Kapur 1980, Maibaum 1977, Subrahmanyam 1981] </ref>. Thus the set semantic inter pre tation of equality implies the possibility of two terms returning the same result, but it does not guarantee that the same results actually will be produced. <p> which, in addition, has only one element. (To indicate this modified interpretation we will use the symbol instead of the usual identity =.) Besides problems with construct ing an adequate algebraic model the set approach originally forced one to consider even simple equa tional specifications as full first order theories <ref> [Subrahmanyam 1981, Kapur 1980] </ref>. This, of course, led to reasoning systems whose efficiency and 2 This observation extends to reactive systems as well, see [Kahn 1974]. 3 simplicity could not match that of the existing systems for equational reasoning (see, e.g., [ODonell 1977, Dershowitz 1990] for references). <p> In 3 This may seem trivial, but was in fact hard enough to require the introduction of full first order logic in the early deduction systems <ref> [Kapur 1980, Subrahmanyam 1981] </ref>. <p> A deterministic interpretation of nondeterministic specifications can be found in some earlier works <ref> [Kapur 1980, Subrahmanyam 1981] </ref>. They used only simple equations (interpreted as set equalities) and specified a nondeterministic operation f by means of the associated characteristic predicate P f (x) expressing that x is a possible result of f. <p> Our derived specifications are based on further Skolemization of such formulae and yield a new se mantics where nondeterminism is made explicit in form of the index arguments. Furthermore, <ref> [Kapur 1980, Subrahmanyam 1981] </ref> did not address the problem of referential opacity of nondeterministic terms at the level of the specification language. Reasoning had to be carried out at the level of the derived deterministic formulae in full first-order logic.
Reference: [Volger 1989a] <author> Volger, H., </author> <title> The semantics of disjunctive deductive databases, </title> <booktitle> in CSL89 , LNCS, </booktitle> <volume> vol. 440, </volume> <publisher> Springer, </publisher> <year> 1989. </year>
Reference-contexts: Instead of looking for initial algebras exclusively, we therefore consider the class of all structures sat isfying the axioms of the specification. The proponents of initial semantics may find partial satisfaction in the proposals of generalizing this notion to quasi-initiality <ref> [Goguen 1988, Kaplan 1987, Volger 1989a, Volger 1989b, Wolter 1992] </ref>. Quasi-initiality yields multiple non 10 The term computational structure is not to be confused with the computation structure as used, for instance, in [Wirsing 1989].
Reference: [Volger 1989b] <author> Volger, H., </author> <title> The Semantics of Disjunctive Deductive Databases, </title> <type> Tech. Rep. </type> <institution> MIP-8931, Fakultt fr Mathematik und Informatik, Universitt Passau, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: Instead of looking for initial algebras exclusively, we therefore consider the class of all structures sat isfying the axioms of the specification. The proponents of initial semantics may find partial satisfaction in the proposals of generalizing this notion to quasi-initiality <ref> [Goguen 1988, Kaplan 1987, Volger 1989a, Volger 1989b, Wolter 1992] </ref>. Quasi-initiality yields multiple non 10 The term computational structure is not to be confused with the computation structure as used, for instance, in [Wirsing 1989].
Reference: [Walicki 1992] <author> Walicki, M., </author> <title> Calculii for nondeterministic specifications: three completeness results, </title> <type> Tech. Rep. 75, </type> <institution> Instituttfor Informatikk, Universitetet i Bergen, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: Unfortunately, several restrictions must be put on the specifications in order to prove even a limited form of completeness, and the full completeness result is still lacking. (NEQ can be used to show which extensions are needed to Humanns calculus and theorem 5.2 yields then the desired completeness theorem <ref> [Walicki 1992] </ref>.) The language and the calculus given by Humann can be constructed as special cases of ours. In fact, general clauses in our language and calculus can be restricted, for instance to those having only a single positive formula, without impairing the results obtained for the general case.
Reference: [Walicki 1993a] <author> Walicki, M., </author> <title> Algebraic Specifications of Nondeterminism, </title> <type> Ph.D. thesis, </type> <institution> University of Bergen, Department of Informatics, </institution> <year> 1993. </year>
Reference-contexts: Section 6 contains an example specification of access types. Section 7 summarizes our results and comments briefly on some re - lated work. The proofs have been omitted from the paper they are given in full in <ref> [Walicki 1993a] </ref>, except for the soundness and completeness theorems which are proved in the appendix. 2. Writing specifications of non deterministic operators In this section we present the specification language L neq , in which the user is expected to write the specifications. <p> Therefore we allow general clauses in the specifications and will concentrate on the whole class of multimodels of a specification. For the dis cussion of the structure of the class of multistructures and (the lack of) initiality results, the reader is referred to <ref> [Humann 1993, Walicki 1993a] </ref>. In the present context, the significance of the term structure is expressed in Lemma 3.4 . <p> What 8 In terms of the intended interpretation indices correspond to oracles . At the level of the derived deterministic specification, however, they are merely additional arguments to the operations. We therefore prefer the semantically more neutral word index. 9 In <ref> [Walicki 1993a] </ref>, where the above construction was introduced, one also added a new constant l of sort I to ensure that the sort is not empty. This extension has also important consequences for the existence of initial/quasi initial semantics which was studied there. <p> The results from [Wolter 1992] are directly applicable at the level of computations any equa tional specification with Gentzen formulae (such as SP ) admits quasi-initial semantics. A mild restriction on the specifications allows us to lift quasi-initial semantics to the multialgebra level <ref> [Walicki 1993a] </ref>. In order to relate the classes Comp (SP) and MMod (SP) we define what it means for a computational structure to satisfy an L neq (SP) formula. There are at least two alternatives here and we record both of them: Definition 4.6 . <p> Bindings reflect the computational interpretation of operations as returning unique results and are crucial for completeness of NEQ as the following example illustrates <ref> [Humann 1993, Walicki 1993a] </ref>.
Reference: [Walicki 1993b] <author> Walicki, M., Meldal, S., Initiality+Nondeterminism =&gt; Junk, </author> <booktitle> Proc. of NIK'93, </booktitle> <year> 1993. </year>
Reference-contexts: Unlike our approach, both Mosses and Humann succeed in construction of initial models. However, it turns out that initial semantics for nondeterministic specifications tend to introduce redun dant elements, thus violating the no junk dictum of the original initial approach <ref> [Walicki 1993b] </ref>. In our formalism, disjunction provides sufficient means for eliminating junk and leads to more intuitive se mantics. Acknowledgment The paper was significantly improved thanks to the suggestions of the anonymous referees.
Reference: [Walicki 1994a] <author> Walicki, M., Meldal, S., Multialgebras, </author> <title> Power Algebras and Complete Calculi of Identities and Inclusions, to appear in Recent Trends in Data Type Specifications, </title> <note> LNCS 1994. </note>
Reference-contexts: also a natural concept in describing sequential programs, either as a means of in dicating a dont care attitude as to which among a number of computational paths will actually be uti lized in a particular computation (e.g., [Dijkstra 1976]) or as a means of increasing the level of abstraction <ref> [Meldal 1989, Walicki 1994a] </ref>. The present work proceeds from the theory of algebraic specifications [Ehrig 1985, Wirsing 1990] and generalizes it so that it can be applied to describing nondeterministic operations. <p> In this case it forces one to distinguish two expressions because of the internal structure of their arguments (the order of allocating pointers) which may correspond to a hidden state. (We discuss this problem in more detail in <ref> [Walicki 1994a] </ref>.) A simple way out is to avoid identifying different occurrences of Next (Z) as referring always to the same unique value, i.e., to consider it as a nondeterministic operation.
Reference: [Walicki 1994b] <author> Walicki, M., </author> <title> Singular and Plural Nondeterministic Parameters: Multialgebras, Power Algebras and Complete Reasoning Systems, </title> <type> Tech. Rep. 96, </type> <institution> Instituttfor Informatikk, Universitetet i Bergen, </institution> <year> 1994. </year>
Reference: [Winskel 1988] <author> Winskel, G., </author> <title> An introduction to event structures, </title> <booktitle> LNCS, </booktitle> <volume> vol. 354, </volume> <publisher> Springer, </publisher> <year> 1988. </year>
Reference-contexts: 1. Introduction The notion of nondeterminism arises naturally in describing concurrent systems. Various approaches to the theory and specification of such systems, for instance, CCS [Milner 1980], CSP [Hoare 1985], process alge bras [Bergstra 1986], event structures <ref> [Winskel 1988] </ref>, include the phenomenon of nondeterminism.
Reference: [Wirsing 1989] <author> Wirsing, M., </author> <title> Algebraic Specification, </title> <type> Tech. Rep. </type> <institution> MIP-8914, UniversittPassau, </institution> <year> 1989. </year>
Reference-contexts: Just like MMod (SP) did not, in general, possess an initial object, so at the level of L deq specifications one cannot hope to find an initial algebra appropriate for the interpretation of general clauses. The reason is well illustrated by Meseguer [Meseguer 1990, Meseguer 1992] and Wirsing <ref> [Wirsing 1989] </ref>, and is a conse quence of the fact that disjunctive equations where none of the alternatives are maximal (valid in all models) do not admit initial models. <p> Quasi-initiality yields multiple non 10 The term computational structure is not to be confused with the computation structure as used, for instance, in <ref> [Wirsing 1989] </ref>. The latter is a synonym for reachable structure while computational structures as defined here are new kinds of models of nondeterminism. 13 isomorphic structures, but nevertheless conforms to the dictum of no junk no confusion cited as the main justification for the initial seman tics.
Reference: [Wirsing 1990] <author> Wirsing, M., </author> <title> Algebraic Specification, </title> <booktitle> in Handbook of Theoretical Computer Science, </booktitle> <volume> vol. </volume> <editor> B, </editor> <publisher> The MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: The present work proceeds from the theory of algebraic specifications <ref> [Ehrig 1985, Wirsing 1990] </ref> and generalizes it so that it can be applied to describing nondeterministic operations.
Reference: [Wolter 1992] <author> Wolter, U., Lwe, M., </author> <title> Beyond Conditional Equations, </title> <booktitle> in CAAP92 , LNCS, </booktitle> <volume> vol. 581, </volume> <publisher> Springer, </publisher> <year> 1992. </year> <title> 26 APPENDIX A. The completeness proof (theorem 5.2). This is the proof of completeness wrt. computational semantics (as defined in section 4.2), both wrt. 9 - and C-validity. (The parts concerning the latter are put into square brackets [ C </title> ... ].) 
Reference-contexts: Instead of looking for initial algebras exclusively, we therefore consider the class of all structures sat isfying the axioms of the specification. The proponents of initial semantics may find partial satisfaction in the proposals of generalizing this notion to quasi-initiality <ref> [Goguen 1988, Kaplan 1987, Volger 1989a, Volger 1989b, Wolter 1992] </ref>. Quasi-initiality yields multiple non 10 The term computational structure is not to be confused with the computation structure as used, for instance, in [Wirsing 1989]. <p> The latter is a synonym for reachable structure while computational structures as defined here are new kinds of models of nondeterminism. 13 isomorphic structures, but nevertheless conforms to the dictum of no junk no confusion cited as the main justification for the initial seman tics. The results from <ref> [Wolter 1992] </ref> are directly applicable at the level of computations any equa tional specification with Gentzen formulae (such as SP ) admits quasi-initial semantics. A mild restriction on the specifications allows us to lift quasi-initial semantics to the multialgebra level [Walicki 1993a].
References-found: 55

