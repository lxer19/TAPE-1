URL: http://dimacs.rutgers.edu/techps/1994/94-09.ps
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1994.html
Root-URL: http://www.cs.rutgers.edu
Title: Defined Boolean Functions 1  
Author: by Endre Boros ; Vladimir Gurvich Peter L. Hammer Toshihide Ibaraki Alexander Kogan 
Address: New Brunswick, NJ 08904  New Brunswick, NJ 08904  New Brunswick, NJ 08903  Kyoto University, Kyoto, Japan 606  New Brunswick, NJ 08903  
Affiliation: RUTCOR, Rutgers University  RUTCOR, Rutgers University  RUTCOR, Rutgers University  Department of Applied Mathematics and Physics  Faculty of Management and RUTCOR, Rutgers University  
Note: Decompositions of Partially  N0001492F4083) and by the Air Force Office of Scientific Research (Grant F49620-93-1-0041). 2 Permanent Member 3 Visiting RUTCOR, on leave from the International Institute of Earthquake Prediction Theory and Mathematical Geophysics, Moscow, Russia. DIMACS is a cooperative project of Rutgers University, Princeton University, AT&T Bell Laboratories and Bellcore. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 94-9 March 1994 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. L. Ashenhurst, </author> <title> The decomposition of switching functions, </title> <booktitle> Proc. Int. Symp. Theory of Switching, </booktitle> <publisher> Harvard University, </publisher> <pages> pp. 74-116, </pages> <year> 1957. </year>
Reference: [2] <author> E. Boros, V. Gurvich, P.L. Hammer, T. Ibaraki, and A. Kogan, </author> <title> Structural analysis of partially defined Boolean functions, </title> <type> manuscript, </type> <year> 1993. </year>
Reference-contexts: Obviously, case (c) implies cases (a) and (b), thus no separate proofs are required for these. Note however that in cases (a) and (b) there exist more efficient algorithms than what follows from (c), see <ref> [2] </ref>. Let us remark that it may be important to consider additional restrictions on the properties of g and h i (i 2 f1; : : : ; kg), e.g. one may require these functions to be positive, Horn, etc. <p> For instance, if all the functions h 1 , ..., h k and g are required to be positive, we shall call the specification (1) or (2) a positive scheme. It is shown in <ref> [2] </ref> that it can be decided in polynomial time whether a given pdBf (T; F), has an extension of positive schemes (a), (b), (d), or (e). 3 Proofs To a given pdBf (T; F) and a given scheme f = g (h 1 (S 1 ); : : : ; h
Reference: [3] <author> R.K. Brayton, G.D. Hachtel, and A.L. Sangiovanni-Vincentelli, </author> <title> Multilevel logic synthesis, </title> <booktitle> Proc. IEEE 78 (2) (1990). </booktitle>
Reference-contexts: In addition to learning theory, such decompositions can be encountered in various applications such as relational databases, where decomposition not only saves storage but also speeds up future queries (see e.g. [6, 9]), VLSI design where decomposition can help both minimization and testability (see e.g. <ref> [3, 10] </ref>), etc. To formulate the problem precisely, we introduce the notion of a partially defined Boolean function (pdBf), which is defined as a pair of disjoint sets (T; F) of binary n-vectors.
Reference: [4] <author> Y. Crama, P.L. Hammer and T. Ibaraki, </author> <title> Cause-effect relationships and partially defined Boolean functions, </title> <note> Annals of Operations Research 16 (1988) 299-325. </note>
Reference: [5] <author> R. Dechter, </author> <title> Decomposing a relation into a tree of binary relations, </title> <journal> J. Comput. Syst. Sci., </journal> <volume> Vol. 41, </volume> <pages> pp. 2-24, </pages> <year> 1990. </year>
Reference: [6] <author> R. Dechter and J. Pearl, </author> <title> Structure identification in relational data, </title> <journal> Artificial Intelligence, </journal> <volume> 58, </volume> <pages> pp. 237-270, </pages> <year> 1992. </year>
Reference-contexts: In addition to learning theory, such decompositions can be encountered in various applications such as relational databases, where decomposition not only saves storage but also speeds up future queries (see e.g. <ref> [6, 9] </ref>), VLSI design where decomposition can help both minimization and testability (see e.g. [3, 10]), etc. To formulate the problem precisely, we introduce the notion of a partially defined Boolean function (pdBf), which is defined as a pair of disjoint sets (T; F) of binary n-vectors.
Reference: [7] <author> M.R. Garey and D.S. Johnson, </author> <title> Computers and Intractability: A guide to the theory of NP-completeness, </title> <address> New York, </address> <publisher> Freeman, </publisher> <year> 1979. </year>
Reference-contexts: To show this we shall reduce our problem to the so called hypergraph 2-coloring problem, which is known to be NP complete (see e.g. <ref> [7] </ref>). Hypergraph 2-coloring Instance: Hypergraph H fl = (V fl ; E fl ), with jj = 3 for every 2 E fl .
Reference: [8] <author> T. Ibaraki and T. Kameda, </author> <title> A theory of coteries: Mutual exclusion in distributed systems, </title> <journal> IEEE Trans. on Parallel and Distributed Systems, Vol.4, </journal> <volume> No.7, </volume> <pages> pp. 779-794, </pages> <year> 1993. </year> <month> - 10 </month> - 
Reference: [9] <author> D. Maier, </author> <title> The theory of relational databases (Computer Science Press, </title> <address> Rockville, MD, </address> <year> 1983). </year>
Reference-contexts: In addition to learning theory, such decompositions can be encountered in various applications such as relational databases, where decomposition not only saves storage but also speeds up future queries (see e.g. <ref> [6, 9] </ref>), VLSI design where decomposition can help both minimization and testability (see e.g. [3, 10]), etc. To formulate the problem precisely, we introduce the notion of a partially defined Boolean function (pdBf), which is defined as a pair of disjoint sets (T; F) of binary n-vectors.
Reference: [10] <author> R. Murgai, R.K. Brayton and A. Sangiovanni-Vincentelli, </author> <title> Some results on the complexity of Boolean Functions for Table Look Up Architectures. </title>
Reference-contexts: In addition to learning theory, such decompositions can be encountered in various applications such as relational databases, where decomposition not only saves storage but also speeds up future queries (see e.g. [6, 9]), VLSI design where decomposition can help both minimization and testability (see e.g. <ref> [3, 10] </ref>), etc. To formulate the problem precisely, we introduce the notion of a partially defined Boolean function (pdBf), which is defined as a pair of disjoint sets (T; F) of binary n-vectors.
Reference: [11] <author> J. R. Quinlan, </author> <title> Induction of decision trees, </title> <journal> Machine Learning, </journal> <volume> Vol. 1, </volume> <pages> pp. 81-106, </pages> <year> 1986. </year>
Reference: [12] <author> K.G. Ramamurthy, </author> <title> Coherent Structures and Simple Games, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1990. </year>
Reference-contexts: It may not be evident, however, to find out whether a given pdBf has an extension with a specified decomposition structure. There is a vast literature on the decomposition of completely specified Boolean functions, with particular attention given to the monotone case (see <ref> [12] </ref>). Unfortunately, these results cannot be applied directly to partially defined Boolean functions. Typically, a pdBf may have exponentially many different extensions, many of which may have exponential size, and the level of their decomposability as well as the complexity of its recognition may vary wildly.
Reference: [13] <author> L. S. Shapley, </author> <title> On committees, New Methods of Thought and Procedures, edited by F. </title> <editor> Zwycky and A. G. Wilson, </editor> <address> New York, </address> <publisher> Springer, </publisher> <year> 1967. </year>
References-found: 13

