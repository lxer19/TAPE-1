URL: http://pertsserver.cs.uiuc.edu/papers/TiDSSSWL95.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/papers/
Root-URL: http://www.cs.uiuc.edu
Title: Probabilistic Performance Guarantee for Real-Time Tasks with Varying Computation Times  
Author: T.-S. Tia Z. Deng M. Shankar M. Storch J. Sun L.-C. Wu J. W.-S. Liu 
Address: Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Date: May 1995  
Note: To appear in 1995 IEEE Real-Time Technology and Applications Symposium, Chicago, Illinois,  
Abstract: This paper describes how the scheduling algorithms and schedulability analysis methods developed for periodic tasks can be extended to provide performance guarantees to semi-periodic tasks. Like periodic tasks, the requests in a semi-periodic task are released regularly. However, their computation times vary widely. We focus on systems where the total maximum utilization of the tasks on each processor is larger than one. Hence according to the existing schedulability conditions for periodic tasks, we cannot guarantee that the semi-periodic tasks are schedulable, even though their total average utilization is very small. We describe two methods of providing probabilistic schedulability guarantees to the semi-periodic tasks: The first method, called probabilistic time-demand analysis, is a modification of the exact schedulability test for periodic tasks. The second method, called the transform-task method, transforms each task into a periodic task followed by a sporadic task. The transform-task method can provide an absolute guarantee to requests with shorter computation times and a probabilistic guarantee to the longer requests. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Chetto and M. Chetto, </author> <title> "Some Results of the Earliest Deadline Scheduling Algorithm," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 15(10), </volume> <pages> pp. 1261-1269, </pages> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: The first algorithm uses sporadic servers [12] to execute the sporadic tasks while the periodic tasks are scheduled on a fixed-priority basis. The second algorithm uses the EDF algorithm to schedule the periodic tasks and a slack stealing algorithm <ref> [1, 14] </ref> to schedule the sporadic tasks. The probabilistic time-demand analysis is applicable only to tasks with deadlines equal to or less than their periods while the transform-task method does not have this restriction. <p> This algorithm differs from the slack stealing algorithms described in [4, 11, 13], which assume that periodic tasks are scheduled on a fixed-priority basis. Conceptually, it is similar to Chetto and Chetto's algorithm <ref> [1] </ref>: Sporadic requests are scheduled on the FIFO basis whenever the execution of periodic requests can be postponed. It differs from Chetto and Chetto's algorithm in implementation. Its complexity is linear in the number of periodic tasks while the latter is a pseudo-polynomial time algorithm.
Reference: [2] <author> P. S. Heidmann, </author> <title> "A Statistical Model for Designers of Rate Monotonic Systems," </title> <type> tech. rep., </type> <institution> RMA Users Forum, Software Engineering Institute, </institution> <address> Pittsburgh PA, </address> <year> 1994. </year>
Reference-contexts: This method, called the probabilistic time-demand analysis method, is a modification of the exact schedu-lability test [5] for periodic tasks. The modification takes into account the variations in the computation times and is similar to the approach taken in <ref> [2] </ref>. It provides the probability that requests of each task will meet their deadlines. The second method, called the transform-task method, transforms each semi-periodic task into a periodic task followed by a sporadic task. The periodic tasks are schedulable according to known schedulability conditions.
Reference: [3] <author> K. Kant, </author> <title> Introduction to Computer System Performance Evaluation. </title> <address> New York: </address> <publisher> McGraw-Hill, </publisher> <pages> pp. 544, </pages> <year> 1992. </year>
Reference-contexts: Else Compute W i (t; x) by approximating it by a normal distribution N M i;k = maxfM i;k ; W i (t; t)g EndFor M i = maxfM i ; M i;k g EndFor EndFor number of terms is small and even the meta-form of the central limit theorem <ref> [3] </ref> cannot be applied. The bound given by (1) implicitly assumes that the request T i;j being analyzed is released at a critical in stant [9].
Reference: [4] <author> J. P. Lehoczky and S. Ramos-Thuel, </author> <title> "An Optimal Algorithm for Scheduling Soft-Aperiodic Tasks in Fixed-Priority Preemptive Systems," </title> <booktitle> in Proceedings of the IEEE Real-Time System Symposium, </booktitle> <pages> pp. 110-123, </pages> <year> 1992. </year>
Reference-contexts: The periodic tasks are scheduled on the EDF basis. The sporadic requests of all tasks are then scheduled according to the slack stealing algorithm described in [14]. This algorithm differs from the slack stealing algorithms described in <ref> [4, 11, 13] </ref>, which assume that periodic tasks are scheduled on a fixed-priority basis. Conceptually, it is similar to Chetto and Chetto's algorithm [1]: Sporadic requests are scheduled on the FIFO basis whenever the execution of periodic requests can be postponed. It differs from Chetto and Chetto's algorithm in implementation.
Reference: [5] <author> J. Lehoczky, L. Sha, and Y. Ding, </author> <title> "The Rate Monotonic Scheduling Algorithm Exact Characterization and Average Case Behavior," </title> <booktitle> in Proceedings of the IEEE Real-Time System Symposium, </booktitle> <pages> pp. 166-171, </pages> <year> 1989. </year>
Reference-contexts: We describe two methods of providing schedula-bility guarantee for semi-periodic tasks. The first method assumes that the semi-periodic tasks are scheduled according to a fixed-priority algorithm. This method, called the probabilistic time-demand analysis method, is a modification of the exact schedu-lability test <ref> [5] </ref> for periodic tasks. The modification takes into account the variations in the computation times and is similar to the approach taken in [2]. It provides the probability that requests of each task will meet their deadlines. <p> Our method for finding this probability is a straightforward extension of the time-demand analysis method used to derive the exact schedulability test <ref> [5] </ref>. Again, our method assumes that the relative deadline d k is less than or equal to the period p k for every task T k . <p> The sporadic requests are served on a FIFO basis by the server. 3. Each server, together with all other servers whose parameters are chosen in the same manner and all the periodic tasks, is schedulable according to the exact schedulability test <ref> [5] </ref>. In practice, the periods of the semi-periodic tasks may be distinct, as in the case of our example application system. Because the total maximum utilization of the processor is larger than one, we cannot have a sporadic server for each sporadic task.
Reference: [6] <author> J. P. Lehoczky, L. Sha, J. K. Strosnider, and H. Tokuda, </author> <title> "Fixed Priority Scheduling Theory for Hard Real-Time Systems," in Foundations of Real-Time Computing, Scheduling and Resource Management (A. </title> <editor> M. Tilborg and G. M. Koob, eds.), ch. </editor> <volume> 1, </volume> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: Schedulability conditions exist for many fl This research is supported in part by ONR under contract N00014-92-J-1815. well-known algorithms for scheduling periodic tasks, including the rate-monotonic (RM) algorithm, the deadline-monotonic (DM) algorithm, and the earliest-deadline-first (EDF) algorithm <ref> [6, 7] </ref>. These conditions are conservative but not overly pessimistic. For applications that fit the periodic task model, the schedulability conditions can serve as design rules.
Reference: [7] <author> J. Y.-T. Leung and J. Whitehead, </author> <title> "On the Complexity of Fixed-Priority Scheduling of Periodic Real-Time Tasks," </title> <journal> Performance Evaluation, </journal> <volume> vol. 2, </volume> <pages> pp. 237-250, </pages> <year> 1982. </year>
Reference-contexts: Schedulability conditions exist for many fl This research is supported in part by ONR under contract N00014-92-J-1815. well-known algorithms for scheduling periodic tasks, including the rate-monotonic (RM) algorithm, the deadline-monotonic (DM) algorithm, and the earliest-deadline-first (EDF) algorithm <ref> [6, 7] </ref>. These conditions are conservative but not overly pessimistic. For applications that fit the periodic task model, the schedulability conditions can serve as design rules.
Reference: [8] <author> J. W.-S. Liu, Z. Deng, M. Shankar, M. Storch, J. Sun, T.-S. Tia, and L.-C. Wu, </author> <title> "The Use of PERTS for an Architecture and Timing Study," </title> <type> Tech. Rep. </type> <note> in preparation (available upon request), </note> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <year> 1995. </year>
Reference-contexts: As a specific example, we consider an actual application system that contains 30 semi-periodic tasks, including the tasks shown in Figure 1. Detailed timing information about the system can be found in <ref> [8] </ref>. The tasks are assigned and bound to three processors so that the maximum utilizations of the processors, using the maximum computation times of the tasks, are as equal as possible. The assignments of tasks are listed in Appendix A. <p> However, with the help of a design tool, such as the PERTS schedulability analyzer [10], the designer can adjust these parameters one or several at a time and use the tool to find a good tradeoff. The use of PERTS for this purpose is described in <ref> [8] </ref>. Using RM and Sporadic Servers One way to schedule the transformed tasks is to schedule the periodic tasks on a fixed-priority basis and use one or more sporadic servers to schedule the sporadic requests. The sporadic server scheme [12] is a bandwidth preserving scheme that has good perfor mance.
Reference: [9] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard Real Time Environment," </title> <journal> in J. Assoc. Comput. Mach., </journal> <volume> vol. 20(1), </volume> <pages> pp. 46-61, </pages> <year> 1973. </year>
Reference-contexts: 1 Introduction The periodic-task model <ref> [9] </ref> has been used extensively to characterize real-time applications. According to this model, computations that provide continuous control, signal processing, and monitoring functions are modeled as periodic tasks. Each periodic task is an infinite stream of requests for computation. <p> The bound given by (1) implicitly assumes that the request T i;j being analyzed is released at a critical in stant <ref> [9] </ref>. Consequently, the sum in the right-hand side of (1) gives an upper bound of the processor-time demand of T i;j and all higher priority tasks only when the deadline and maximum computation time of every task are less than its period.
Reference: [10] <author> J. W. S. Liu, J. L. R. Redondo, Z. Deng, T. S. Tia, R. Bettati, A. Silberman, M. Storch, R. Ha, and W. K. Shih, "PERTS: </author> <title> A Prototyping Environment for Real-Time Systems," </title> <booktitle> in Proceedings of the Real-Time System Symposium, </booktitle> <pages> pp. 184-188, </pages> <year> 1993. </year>
Reference-contexts: Similarly, we can also choose differing ff i 's, which gives us another dimension of tradeoff. It is impractical to tune the 2N parameters ff i 's and A i 's manually. However, with the help of a design tool, such as the PERTS schedulability analyzer <ref> [10] </ref>, the designer can adjust these parameters one or several at a time and use the tool to find a good tradeoff. The use of PERTS for this purpose is described in [8].
Reference: [11] <author> S. Ramos-Thuel and J. P. Lehoczky, </author> <title> "On-Line Scheduling of Hard Deadline Aperiodic Tasks in Fixed-Priority Systems," </title> <booktitle> in Proceedings of the IEEE Real-Time System Symposium, </booktitle> <pages> pp. 160-171, </pages> <year> 1993. </year>
Reference-contexts: The periodic tasks are scheduled on the EDF basis. The sporadic requests of all tasks are then scheduled according to the slack stealing algorithm described in [14]. This algorithm differs from the slack stealing algorithms described in <ref> [4, 11, 13] </ref>, which assume that periodic tasks are scheduled on a fixed-priority basis. Conceptually, it is similar to Chetto and Chetto's algorithm [1]: Sporadic requests are scheduled on the FIFO basis whenever the execution of periodic requests can be postponed. It differs from Chetto and Chetto's algorithm in implementation.
Reference: [12] <author> B. Sprunt, L. Sha, and J. P. Lehoczky, </author> <title> "Aperiodic Task Scheduling for Hard Real-Time Systems," Real-Time Systems: </title> <journal> The International Journal of Time-Critical Computing Systems, </journal> <volume> vol. 1, </volume> <pages> pp. 27-60, </pages> <year> 1989. </year>
Reference-contexts: The second method, called the transform-task method, transforms each semi-periodic task into a periodic task followed by a sporadic task. The periodic tasks are schedulable according to known schedulability conditions. Two different algorithms are used to schedule the periodic and sporadic tasks. The first algorithm uses sporadic servers <ref> [12] </ref> to execute the sporadic tasks while the periodic tasks are scheduled on a fixed-priority basis. The second algorithm uses the EDF algorithm to schedule the periodic tasks and a slack stealing algorithm [1, 14] to schedule the sporadic tasks. <p> The use of PERTS for this purpose is described in [8]. Using RM and Sporadic Servers One way to schedule the transformed tasks is to schedule the periodic tasks on a fixed-priority basis and use one or more sporadic servers to schedule the sporadic requests. The sporadic server scheme <ref> [12] </ref> is a bandwidth preserving scheme that has good perfor mance. According to this scheme, a sporadic server may serve one or more client sporadic tasks.
Reference: [13] <author> T.-S. Tia, J. W.-S. Liu, and M. Shankar, </author> <title> "Algorithms and Optimality of Scheduling Soft Aperiodic Requests in Fixed-Priority Preemptive Systems," To appear in Real-Time Systems: </title> <journal> The International Journal of Time-Critical Computing Systems. </journal>
Reference-contexts: The periodic tasks are scheduled on the EDF basis. The sporadic requests of all tasks are then scheduled according to the slack stealing algorithm described in [14]. This algorithm differs from the slack stealing algorithms described in <ref> [4, 11, 13] </ref>, which assume that periodic tasks are scheduled on a fixed-priority basis. Conceptually, it is similar to Chetto and Chetto's algorithm [1]: Sporadic requests are scheduled on the FIFO basis whenever the execution of periodic requests can be postponed. It differs from Chetto and Chetto's algorithm in implementation.
Reference: [14] <author> T.-S. Tia, J. W.-S. Liu, J. Sun, and R. Ha, </author> <title> "A Linear-Time Optimal Acceptance Test for Scheduling of Hard Real-Time Tasks," </title> <note> Submitted to IEEE Transaction on Software Engineering, 1994. 7 </note>
Reference-contexts: The first algorithm uses sporadic servers [12] to execute the sporadic tasks while the periodic tasks are scheduled on a fixed-priority basis. The second algorithm uses the EDF algorithm to schedule the periodic tasks and a slack stealing algorithm <ref> [1, 14] </ref> to schedule the sporadic tasks. The probabilistic time-demand analysis is applicable only to tasks with deadlines equal to or less than their periods while the transform-task method does not have this restriction. <p> The periodic tasks are scheduled on the EDF basis. The sporadic requests of all tasks are then scheduled according to the slack stealing algorithm described in <ref> [14] </ref>. This algorithm differs from the slack stealing algorithms described in [4, 11, 13], which assume that periodic tasks are scheduled on a fixed-priority basis.
References-found: 14

