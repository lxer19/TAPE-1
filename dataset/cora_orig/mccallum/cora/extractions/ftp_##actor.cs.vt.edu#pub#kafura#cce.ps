URL: ftp://actor.cs.vt.edu/pub/kafura/cce.ps
Refering-URL: http://www.cs.vt.edu/~kafura/
Root-URL: http://www.cs.vt.edu
Email: Email mukherji@cis.udel.edu  Email kafura@cs.vt.edu  
Phone: Tel: (302) 831-8235.  Tel: (540) 231-5568.  
Title: CCE: A Process-Calculus Based Formalism for Specifying Multi-Object Coordination  
Author: Manibrata Mukherji Smith Hall Dennis Kafura 
Date: October 27, 1995  
Address: 19716, USA.  VA 24061, USA.  
Affiliation: Department of Computer and Information Sciences  University of Delaware Newark, DE  Department of Computer Science Virginia Tech Blacksburg,  
Abstract: Coordination, the act of imposing a desired behavior on a group of autonomous, independently conceived agents, has been an important issue in the design and development of software systems, both process-based and object-based. Although the issue of coordination has evoked several solutions in various programming paradigms, coordinating objects in the concurrent object-oriented programming (COOP) paradigm has received significant attention only recently. But, no endeavor has been made to propose formalisms that can capture the coordination among concurrent objects in a direct and simple way. Such a formalism enables a semantic comparison of coordination constructs and a comparative study of related coordination schemes in concurrent object-oriented programming languages (COOPLs). Also, the semantic translations help realize better coordination primitives in new COOPLs. Motivated by these observations, the Calculus of Coordinating Environments (CCE) is proposed in this paper to study coordination as the behavioral union of coordinated and coordinating agents. In CCE, the behavior of coordinated objects is expressed as agents in the Calculus of Communicating Systems (CCS) and the behavior of coordinating objects is expressed as agents of an extension of CCS. Coordinating agents in CCE (called Coordinating Environment (CE) agents) coordinate CCS agents by observing their actions at specific ports and taking coordinating actions on them. Two composition rules are provided that capture the interaction among CE agents and CCS agents. The applicability of the new formalism is shown by specifying two simple coordination problems in CCE. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Milner, </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction In this paper, an abstract, formal approach, based on the Calculus of Communicating Systems (CCS) <ref> [1] </ref>, for describing and reasoning about the coordination of a group of independently conceived, concurrent objects is developed. Such concurrent objects are the cornerstone of the concurrent object-oriented programming (COOP) paradigm. The formalism developed seeks to separate the coordination specification from the specifications of the objects being coordinated.
Reference: [2] <author> N. Carriero and D. Gelernter. </author> <title> Linda In Context. </title> <journal> Communications of the ACM, April, 1989, </journal> <volume> Vol. 32, Number 4. </volume>
Reference: [3] <author> D. Gelernter. </author> <title> Multiple tuple spaces in Linda. </title> <editor> In E. Odjik, M. Rem, and J.-C. Syre, editors, </editor> <booktitle> PARLE '89, </booktitle> <volume> Vol. 2, LNCS 366, </volume> <pages> pages 20-27, </pages> <address> June 1989. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Studying coordination independent of the programming paradigms used to realize agents is relatively new. Several proposals ([2], <ref> [3] </ref>, [4], [5], [6], [7], [8], [9], [10]) have considered coordination and communication among software processes using high-level process-abstractions. Also, the issue of coordination among objects in object-oriented programming languages (OOPLs), both sequential and concurrent, has received significant attention recently ([11], [12], [13], [14], [15], [16], [17], [18], [19], [20]).
Reference: [4] <author> N. Francez, B. Hailpern, and G. Taubenfeld. </author> <title> Script: A Communication Abstraction Mechanism and its Verification. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 6, </volume> <year> 1986, </year> <pages> pages 35 - 88, </pages> <publisher> North-Holland. </publisher>
Reference-contexts: Studying coordination independent of the programming paradigms used to realize agents is relatively new. Several proposals ([2], [3], <ref> [4] </ref>, [5], [6], [7], [8], [9], [10]) have considered coordination and communication among software processes using high-level process-abstractions. Also, the issue of coordination among objects in object-oriented programming languages (OOPLs), both sequential and concurrent, has received significant attention recently ([11], [12], [13], [14], [15], [16], [17], [18], [19], [20]).
Reference: [5] <author> A. W. Holt. Diplans: </author> <title> A New Language for the Study and Implementation of Coordination. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> Vol. 6, Number 2, </volume> <pages> pages 109-125, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: Studying coordination independent of the programming paradigms used to realize agents is relatively new. Several proposals ([2], [3], [4], <ref> [5] </ref>, [6], [7], [8], [9], [10]) have considered coordination and communication among software processes using high-level process-abstractions. Also, the issue of coordination among objects in object-oriented programming languages (OOPLs), both sequential and concurrent, has received significant attention recently ([11], [12], [13], [14], [15], [16], [17], [18], [19], [20]).
Reference: [6] <author> P. Ciancarini. </author> <title> Coordinating Rule-Based Software Processes with ESP. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> Vol. 2, Number 3, </volume> <pages> pages 203-227, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Studying coordination independent of the programming paradigms used to realize agents is relatively new. Several proposals ([2], [3], [4], [5], <ref> [6] </ref>, [7], [8], [9], [10]) have considered coordination and communication among software processes using high-level process-abstractions. Also, the issue of coordination among objects in object-oriented programming languages (OOPLs), both sequential and concurrent, has received significant attention recently ([11], [12], [13], [14], [15], [16], [17], [18], [19], [20]).
Reference: [7] <author> D. C. Luckham et al. </author> <title> Partial Orderings of Event Sets and Their Application to Prototyping Concurrent, Timed Systems. </title> <journal> Journal of Systems Software. </journal> <volume> Vol. 21, </volume> <month> June </month> <year> 1993, </year> <pages> pages 253-265. </pages>
Reference-contexts: Studying coordination independent of the programming paradigms used to realize agents is relatively new. Several proposals ([2], [3], [4], [5], [6], <ref> [7] </ref>, [8], [9], [10]) have considered coordination and communication among software processes using high-level process-abstractions. Also, the issue of coordination among objects in object-oriented programming languages (OOPLs), both sequential and concurrent, has received significant attention recently ([11], [12], [13], [14], [15], [16], [17], [18], [19], [20]).
Reference: [8] <author> M. H. Olsen, E. Oskiewicz, J. P. Warne. </author> <title> A Model for Interface Groups. </title> <booktitle> In Proceedings IEEE 10th Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 98-107, </pages> <year> 1991. </year>
Reference-contexts: Studying coordination independent of the programming paradigms used to realize agents is relatively new. Several proposals ([2], [3], [4], [5], [6], [7], <ref> [8] </ref>, [9], [10]) have considered coordination and communication among software processes using high-level process-abstractions. Also, the issue of coordination among objects in object-oriented programming languages (OOPLs), both sequential and concurrent, has received significant attention recently ([11], [12], [13], [14], [15], [16], [17], [18], [19], [20]).
Reference: [9] <author> ISA Project Core Team. </author> <title> ANSA: Assumptions, Principles, and Structure. </title> <editor> In J. P. Warne, editor, </editor> <booktitle> Conference Proceedings of Software Engineering Environments 1991, </booktitle> <institution> University College of Wales, Aberystwyth, </institution> <month> March, </month> <year> 1991. </year>
Reference-contexts: Studying coordination independent of the programming paradigms used to realize agents is relatively new. Several proposals ([2], [3], [4], [5], [6], [7], [8], <ref> [9] </ref>, [10]) have considered coordination and communication among software processes using high-level process-abstractions. Also, the issue of coordination among objects in object-oriented programming languages (OOPLs), both sequential and concurrent, has received significant attention recently ([11], [12], [13], [14], [15], [16], [17], [18], [19], [20]).
Reference: [10] <author> F. Arbab, I. Herman, and P. </author> <title> Spilling. An Overview of Manifold and its Implementation. </title> <journal> Concurrency: Practice and Experience, February 1993, </journal> <volume> Vol 1, Number 1. </volume>
Reference-contexts: Studying coordination independent of the programming paradigms used to realize agents is relatively new. Several proposals ([2], [3], [4], [5], [6], [7], [8], [9], <ref> [10] </ref>) have considered coordination and communication among software processes using high-level process-abstractions. Also, the issue of coordination among objects in object-oriented programming languages (OOPLs), both sequential and concurrent, has received significant attention recently ([11], [12], [13], [14], [15], [16], [17], [18], [19], [20]).
Reference: [11] <author> A. Corradi and L. Leonardi. </author> <title> PO Constraints as Tools to Synchronize Active Objects. </title> <journal> Journal of Object-Oriented Programming, </journal> <pages> pages 41-53, </pages> <month> Oct. </month> <year> 1991. </year>
Reference: [12] <author> C. Arapis. </author> <title> Specifying Object Interactions. </title> <editor> In D. Tsichritzis, editor, </editor> <title> Object Composition. </title> <institution> University of Geneva, </institution> <year> 1991. </year>
Reference-contexts: Several proposals ([2], [3], [4], [5], [6], [7], [8], [9], [10]) have considered coordination and communication among software processes using high-level process-abstractions. Also, the issue of coordination among objects in object-oriented programming languages (OOPLs), both sequential and concurrent, has received significant attention recently ([11], <ref> [12] </ref>, [13], [14], [15], [16], [17], [18], [19], [20]). But, no endeavor has been made to propose formalisms that can capture the coordination among concurrent objects in a direct and simple way.
Reference: [13] <author> A. R. Helm, I. M. Holland, and D. Gangopadhyay. </author> <title> Contracts: Specifying Behavioral Compositions in Object-Oriented Systems. In OOPSLA'90, </title> <journal> in Special Issue of SIGPLAN Notices, </journal> <pages> pages 169-180, </pages> <address> Ottawa, </address> <year> 1990. </year> <note> ACM Press. Joint conference ECOOP/OOPSLA. </note>
Reference-contexts: Several proposals ([2], [3], [4], [5], [6], [7], [8], [9], [10]) have considered coordination and communication among software processes using high-level process-abstractions. Also, the issue of coordination among objects in object-oriented programming languages (OOPLs), both sequential and concurrent, has received significant attention recently ([11], [12], <ref> [13] </ref>, [14], [15], [16], [17], [18], [19], [20]). But, no endeavor has been made to propose formalisms that can capture the coordination among concurrent objects in a direct and simple way.
Reference: [14] <author> I. M. Holland. </author> <title> Specifying Reusable Components Using Contracts. </title> <editor> In O. Lehrmann Madsen, editor, </editor> <booktitle> Proceedings ECOOP'92, </booktitle> <volume> LNCS 615, </volume> <pages> pages 287-308, </pages> <address> Utrecht, The Netherlands, July, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Several proposals ([2], [3], [4], [5], [6], [7], [8], [9], [10]) have considered coordination and communication among software processes using high-level process-abstractions. Also, the issue of coordination among objects in object-oriented programming languages (OOPLs), both sequential and concurrent, has received significant attention recently ([11], [12], [13], <ref> [14] </ref>, [15], [16], [17], [18], [19], [20]). But, no endeavor has been made to propose formalisms that can capture the coordination among concurrent objects in a direct and simple way.
Reference: [15] <author> R. Wirfs-Brock, B. Wilkerson, and L. Wiener. </author> <title> Designing Object-Oriented Software. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: Several proposals ([2], [3], [4], [5], [6], [7], [8], [9], [10]) have considered coordination and communication among software processes using high-level process-abstractions. Also, the issue of coordination among objects in object-oriented programming languages (OOPLs), both sequential and concurrent, has received significant attention recently ([11], [12], [13], [14], <ref> [15] </ref>, [16], [17], [18], [19], [20]). But, no endeavor has been made to propose formalisms that can capture the coordination among concurrent objects in a direct and simple way.
Reference: [16] <author> C. Atkinson, S. Goldsack, A. D. Maio, and R. Bayan. </author> <title> Object-Oriented Concurrency and Distribution in DRAGOON. </title> <journal> Journal of Object-Oriented Programming, </journal> <month> March/April </month> <year> 1991. </year>
Reference-contexts: Several proposals ([2], [3], [4], [5], [6], [7], [8], [9], [10]) have considered coordination and communication among software processes using high-level process-abstractions. Also, the issue of coordination among objects in object-oriented programming languages (OOPLs), both sequential and concurrent, has received significant attention recently ([11], [12], [13], [14], [15], <ref> [16] </ref>, [17], [18], [19], [20]). But, no endeavor has been made to propose formalisms that can capture the coordination among concurrent objects in a direct and simple way.
Reference: [17] <author> Mario Tokoro. </author> <title> Computational Field Model: Toward a New Computational Model/Methodology for Open Distributed Environment. </title> <booktitle> In Proceedings of the 2nd IEEE Workshop on Future Trends in Distributed Computing Systems, </booktitle> <month> Sept. </month> <year> 1990, </year> <note> Cairo, Egypt. </note>
Reference-contexts: Several proposals ([2], [3], [4], [5], [6], [7], [8], [9], [10]) have considered coordination and communication among software processes using high-level process-abstractions. Also, the issue of coordination among objects in object-oriented programming languages (OOPLs), both sequential and concurrent, has received significant attention recently ([11], [12], [13], [14], [15], [16], <ref> [17] </ref>, [18], [19], [20]). But, no endeavor has been made to propose formalisms that can capture the coordination among concurrent objects in a direct and simple way.
Reference: [18] <author> S. Frolund and G. Agha. </author> <title> A Language Framework for Multi-Object Coordination. </title> <editor> In O. Nierstrasz, editor, </editor> <booktitle> Proceedings ECOOP'93, </booktitle> <volume> LNCS 707, </volume> <pages> pages 346-359, </pages> <address> Germany, July, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Also, the issue of coordination among objects in object-oriented programming languages (OOPLs), both sequential and concurrent, has received significant attention recently ([11], [12], [13], [14], [15], [16], [17], <ref> [18] </ref>, [19], [20]). But, no endeavor has been made to propose formalisms that can capture the coordination among concurrent objects in a direct and simple way. Such a formalism enables a semantic comparison of coordination constructs and a comparative study of related coordination schemes in concurrent object-oriented programming languages (COOPLs).
Reference: [19] <author> J. Van Den Bos and C. Laffra. </author> <title> PROCOL: A Concurrent Object-Oriented Language with Protocols, Delegation, and Constraints. </title> <journal> Acta Informatica, </journal> <volume> Vol. 28, Number 6, </volume> <year> 1991. </year> <month> 18 </month>
Reference-contexts: Also, the issue of coordination among objects in object-oriented programming languages (OOPLs), both sequential and concurrent, has received significant attention recently ([11], [12], [13], [14], [15], [16], [17], [18], <ref> [19] </ref>, [20]). But, no endeavor has been made to propose formalisms that can capture the coordination among concurrent objects in a direct and simple way. Such a formalism enables a semantic comparison of coordination constructs and a comparative study of related coordination schemes in concurrent object-oriented programming languages (COOPLs).
Reference: [20] <editor> M. Aksit et al. </editor> <title> Abstracting Object Interactions Using Composition Filters. </title> <booktitle> Proceedings of the ECOOP'93 Workshop on Object-Based Distributed Programming, </booktitle> <editor> R. Guerraoui, O. Nierstrasz, and M. Rivelli editors, </editor> <volume> LNCS 791, </volume> <pages> pages 152-184, </pages> <address> Kaiserslautern, Germany, July 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Also, the issue of coordination among objects in object-oriented programming languages (OOPLs), both sequential and concurrent, has received significant attention recently ([11], [12], [13], [14], [15], [16], [17], [18], [19], <ref> [20] </ref>). But, no endeavor has been made to propose formalisms that can capture the coordination among concurrent objects in a direct and simple way. Such a formalism enables a semantic comparison of coordination constructs and a comparative study of related coordination schemes in concurrent object-oriented programming languages (COOPLs).
Reference: [21] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A Calculus of Mobile Processes, Parts I and II. </title> <type> Research Report. </type> <institution> Laboratory for Foundations of Computer Science, University of Edinburgh, </institution> <month> June </month> <year> 1989. </year>
Reference-contexts: Such a formalism enables a semantic comparison of coordination constructs and a comparative study of related coordination schemes in concurrent object-oriented programming languages (COOPLs). Also, the semantic translations help realize better coordination primitives in new COOPLs. Using CCS (and its variants <ref> [21] </ref>, [22]) directly to specify coordination has two weaknesses. First, coordination is modeled at a very low level by making agents engage in explicit communications. Such low-level specifications are very poor candidates for specifying designs of software components that must satisfy software engineering criteria like separation of concerns and reusability. <p> CCE is considered to be the first step towards a much more expressive calculus that will provide an integrated approach for specifying concurrency, communication, and coordination. An approach of future work would be to consider the pi-calculus <ref> [21] </ref> for modeling coordination among agents whose interconnection topology is dynamic. Another interesting avenue to pursue would be to utilize the Asynchronous CCS ([26], [27]) to model coordination among agents that engage in asynchronous communication using messages.
Reference: [22] <author> Oscar Nierstrasz. </author> <title> Towards an Object Calculus. </title> <booktitle> Proceedings of the ECOOP'91 Workshop on Object-Based Concurrent Computing, </booktitle> <editor> M. Tokoro, O. Nierstrasz, P. Wegner, A. Yonezawa editors, </editor> <publisher> LNCS 612, Springer-Verlag, </publisher> <address> Geneva, Switzerland, </address> <month> July 15-16, </month> <year> 1991. </year>
Reference-contexts: Such a formalism enables a semantic comparison of coordination constructs and a comparative study of related coordination schemes in concurrent object-oriented programming languages (COOPLs). Also, the semantic translations help realize better coordination primitives in new COOPLs. Using CCS (and its variants [21], <ref> [22] </ref>) directly to specify coordination has two weaknesses. First, coordination is modeled at a very low level by making agents engage in explicit communications. Such low-level specifications are very poor candidates for specifying designs of software components that must satisfy software engineering criteria like separation of concerns and reusability.
Reference: [23] <author> D. Walker. </author> <title> Pi-Calculus Semantics of Object-Oriented Programming Languages. </title> <type> Research Report, </type> <institution> University of Technology, </institution> <address> Sydney. </address> <month> Sept. </month> <year> 1990. </year>
Reference: [24] <author> K. G. Larsen. </author> <title> Context-Dependent Bisimulation Between Processes. </title> <type> Doctoral Dissertation. </type> <institution> University of Edinburgh, </institution> <year> 1986. </year>
Reference-contexts: The modeling of the observe-coordinate property of coordinating agents in CCE was inspired by the Theory of Contexts developed in <ref> [24] </ref>. Note that CCE is not claimed to be a general-purpose calculus. Instead, the goal is to augment the COOP paradigm by laying the foundation for a special-purpose calculus that enables the modeling of communication and coordination among concurrent objects. The paper is organized as follows.
Reference: [25] <author> M. Mukherji. </author> <title> Specification of Multi-Object Coordination Schemes using Coordinating Environments. </title> <type> Doctoral Dissertation. </type> <institution> Virginia Tech. </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: A working model for coordinating concurrent objects has been proposed that is based on the formal coordination abstraction proposed in CCE <ref> [25] </ref>. In the model, an object, termed a Coordinating Environment object, transparently observes the acceptance of asynchronous messages by the coordinated objects and enforces coordination constraints by taking one or more coordinating actions on them.
Reference: [26] <author> K. Honda and M. Tokoro. </author> <title> On Asynchronous Communication Semantics. </title> <editor> In M. Tokoro, O. Nierstrasz, and P. Wener, editors, </editor> <booktitle> Proceedings of ECOOP '91 Workshop on Object-Based Concurrent Computing, </booktitle> <pages> pages 21-51, </pages> <address> Geneva, Switzerland, July 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference: [27] <author> K. Honda and M. Tokoro. </author> <title> An Object Calculus for Asynchronous Communication. </title> <editor> In P. America, editor, </editor> <booktitle> Proceedings ECOOP '91, </booktitle> <volume> LNCS 512, </volume> <pages> pages 133-147, </pages> <address> Geneva, Switzerland, July 1991. </address> <publisher> Springer-Verlag. </publisher> <pages> 19 </pages>
Reference-contexts: An approach of future work would be to consider the pi-calculus [21] for modeling coordination among agents whose interconnection topology is dynamic. Another interesting avenue to pursue would be to utilize the Asynchronous CCS ([26], <ref> [27] </ref>) to model coordination among agents that engage in asynchronous communication using messages. Such a calculus would capture more faithfully, the coordination among concurrently executing objects that are the cornerstone of the COOP paradigm. 17
References-found: 27

