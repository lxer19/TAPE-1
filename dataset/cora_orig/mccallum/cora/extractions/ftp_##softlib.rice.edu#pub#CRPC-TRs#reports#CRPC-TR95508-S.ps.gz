URL: ftp://softlib.rice.edu/pub/CRPC-TRs/reports/CRPC-TR95508-S.ps.gz
Refering-URL: http://www.crpc.rice.edu/CRPC/softlib/TRs_online.html
Root-URL: 
Title: Accessing Sections of Out-of-Core Arrays Using an Extended Two-Phase Method  
Author: Rajeev Thakur Alok Choudhary 
Address: P.O. Box 1892 Houston, TX 77251-1892  
Affiliation: Rice University  
Note: Center for Research on Parallel Computation  
Date: January 1995  
Pubnum: CRPC-TR95508-S  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Bennett, K. Bryant, A. Sussman, R. Das, and J. Saltz. Jovian: </author> <title> A Framework for Optimizing Parallel I/O. </title> <booktitle> In Proceedings of the Scalable Parallel Libraries Conference, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: Another advantage is that if any processor needs to access some data which was previously modified by some other processor, it can be done using just a read call without any additional synchronization. The idea of collective I/O has also been used in other schemes such as in <ref> [1, 11, 10] </ref>. In the next section, we describe the Extended Two-Phase Method for reading sections of out- of-core arrays. <p> Array Section Time (sec.) Direct Write Extended Two-Phase I (1:100:1, 1+100p:100+100p:1) 1.839 3.250 III (200+200p:400+200p:1, 1:512:1) 11.64 8.715 V (200+200p:400+200p:1, 1+200p:512+200p:1) 11.33 6.461 7 Related Work The Jovian library <ref> [1] </ref> also provides support for accessing sections of out-of-core arrays. This library uses separate processes called coalescing processes to perform I/O optimizations. All application processes send I/O requests to predetermined coalescing processes. Each coalescing process is responsible for accessing a particular logical I/O device.
Reference: [2] <author> R. Bordawekar and A. Choudhary. </author> <title> Language and Compiler Support for Parallel I/O. </title> <booktitle> In Proceedings of IFIP Working Conference on Programming Environments for Massively Parallel Distributed Systems, </booktitle> <month> April </month> <year> 1994. </year>
Reference-contexts: PASSION provides support at the language <ref> [2] </ref>, compiler [13], runtime [14] as well as file system level [8, 12]. The PASSION Runtime Library provides routines to efficiently perform the I/O required in loosely synchronous [9] out-of-core programs which use a Single Program Multiple Data (SPMD) model.
Reference: [3] <author> R. Bordawekar, J. del Rosario, and A. Choudhary. </author> <title> Design and Evaluation of Primitives for Parallel I/O. </title> <booktitle> In Proceedings of Supercomputing '93, </booktitle> <pages> pages 452-461, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Therefore, it is necessary to use a more efficient technique for doing I/O in out-of-core computations. In the case of in-core arrays, Bordawekar, del Rosario and Choudhary <ref> [7, 3] </ref> have proposed a Two-Phase Method for reading an entire array from a file in an efficient manner, into a distributed array in main memory. This method is found to give consistently good performance for all data distributions. <p> This results in the same kind of problems as in the Global Placement Model. Hence an improved method needs to be used for accessing data in the Partitioned In-Core Model as well. 3 Two-Phase Method for In-Core Arrays Bordawekar, del Rosario and Choudhary <ref> [7, 3] </ref> have proposed a Two-Phase Method for reading/writing in-core arrays from/to disks. <p> Hence, in the Direct Method, the I/O performance is best for the conforming distribution, but it degrades drastically for any other distribution. The Two-Phase Method <ref> [7, 3] </ref> proposes to read the entire in-core array into a distributed array in main memory in two phases. In the first phase, the processors always read data assuming the conforming distribution. <p> In the first phase, the processors always read data assuming the conforming distribution. In the second phase, data is redistributed [16] among processors, using interprocessor communication, to whatever is the actual desired distribution. This two phase approach is found to give consistently good performance for all distributions <ref> [7, 3] </ref>. The main advantages of the Two-Phase Method are:- * It results in high granularity data transfer between processors and disks. * It makes use of the higher bandwidth of the processor interconnection network. rect Method. <p> to the difference in time for the redistribution phase, and the time required for redistribution is orders of magnitude lower than that required for I/O. 6 4 Extended Two-Phase Method for Out-of-Core Arrays We have extended the basic Two-Phase Method for in-core arrays proposed by Bordawekar, del Rosario and Choudhary <ref> [7, 3] </ref>, to access arbitrary sections of out-of-core arrays. This method performs I/O for out-of-core arrays efficiently by combining several I/O requests into fewer larger requests, eliminating multiple disk accesses for the same data and reducing contention for disks.
Reference: [4] <author> A. Choudhary, R. Bordawekar, M. Harry, R. Krishnaiyer, R. Ponnusamy, T. Singh, and R. Thakur. </author> <title> PASSION: Parallel and Scalable Software for Input-Output. </title> <type> Technical Report SCCS-636, </type> <institution> NPAC, Syracuse University, </institution> <month> September </month> <year> 1994. </year> <note> Also available as CRPC Technical Report CRPC-TR94483-S. </note>
Reference-contexts: In this paper, we propose an Extended Two-Phase Method for accessing sections of out-of-core arrays, which is a generalization of the Two-Phase Method for in-core arrays. This Extended Two-Phase Method is used in the PASSION Runtime Library for Out-of-Core Compu <p>- 1 tations <ref> [14, 4] </ref> which we are developing. The rest of this paper is organized as follows. Section 2 gives an overview of the PASSION Runtime Library and the different data access models it supports. <p> Section 7 describes how the Extended Two-Phase Method relates to other work in this area, followed by Conclusions in Section 8. 2 PASSION Runtime Library for Out-of-Core Computations Our group at Syracuse University is developing a software system called PASSION (Parallel And Scalable Software for Input-Output) <ref> [4] </ref>, which provides software support for high performance parallel I/O. PASSION provides support at the language [2], compiler [13], runtime [14] as well as file system level [8, 12].
Reference: [5] <author> P. Corbett, D. Feitelson, Y. Hsu, J. Prost, M. Snir, S. Fineberg, B. Nitzberg, B. Traversat, and P. Wong. </author> <title> MPI-IO: A Parallel I/O Interface for MPI, </title> <note> Version 0.2. Technical Report IBM Research Report RC 19841(87784), </note> <institution> IBM T. J. Watson Research Center, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: It provides the user with a simple high-level interface, which is a level higher than any of the existing parallel file system interfaces or even the proposed MPI-IO interface <ref> [5] </ref>. For example, the user only needs to specify what section of the array needs to be read in terms of its lower-bound, upper-bound and stride in each dimension, and the PASSION Runtime Library will fetch it in an efficient manner. <p> It can also be implemented on top of any new portable standard interfaces such as the proposed MPI-IO interface <ref> [5] </ref>, resulting in portable implementations. 19 8 Conclusions We have proposed a technique, called the Extended Two-Phase Method, for accessing sections of out-of-core arrays in an efficient manner.
Reference: [6] <author> P. Corbett, D. Feitelson, J. Prost, and S. Baylor. </author> <title> Parallel Access to Files in the Vesta File System. </title> <booktitle> In Proceedings of Supercomputing '93, </booktitle> <pages> pages 472-481, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: There is no working implementation of disk-directed I/O on any parallel machine at present. On the other hand, we have implemented the Extended Two-Phase Method on the Intel Touchstone Delta and Paragon, and we plan to port it to the IBM SP-1/SP-2 using the Vesta/PIOFS file system <ref> [6] </ref>. It can also be implemented on top of any new portable standard interfaces such as the proposed MPI-IO interface [5], resulting in portable implementations. 19 8 Conclusions We have proposed a technique, called the Extended Two-Phase Method, for accessing sections of out-of-core arrays in an efficient manner.
Reference: [7] <author> J. del Rosario, R. Bordawekar, and A. Choudhary. </author> <title> Improved Parallel I/O via a Two-Phase Runtime Access Strategy. </title> <booktitle> In Proceedings of the Workshop on I/O in Parallel Computer Systems at IPPS '93, </booktitle> <month> April </month> <year> 1993. </year> <month> 20 </month>
Reference-contexts: Therefore, it is necessary to use a more efficient technique for doing I/O in out-of-core computations. In the case of in-core arrays, Bordawekar, del Rosario and Choudhary <ref> [7, 3] </ref> have proposed a Two-Phase Method for reading an entire array from a file in an efficient manner, into a distributed array in main memory. This method is found to give consistently good performance for all data distributions. <p> This results in the same kind of problems as in the Global Placement Model. Hence an improved method needs to be used for accessing data in the Partitioned In-Core Model as well. 3 Two-Phase Method for In-Core Arrays Bordawekar, del Rosario and Choudhary <ref> [7, 3] </ref> have proposed a Two-Phase Method for reading/writing in-core arrays from/to disks. <p> Hence, in the Direct Method, the I/O performance is best for the conforming distribution, but it degrades drastically for any other distribution. The Two-Phase Method <ref> [7, 3] </ref> proposes to read the entire in-core array into a distributed array in main memory in two phases. In the first phase, the processors always read data assuming the conforming distribution. <p> In the first phase, the processors always read data assuming the conforming distribution. In the second phase, data is redistributed [16] among processors, using interprocessor communication, to whatever is the actual desired distribution. This two phase approach is found to give consistently good performance for all distributions <ref> [7, 3] </ref>. The main advantages of the Two-Phase Method are:- * It results in high granularity data transfer between processors and disks. * It makes use of the higher bandwidth of the processor interconnection network. rect Method. <p> to the difference in time for the redistribution phase, and the time required for redistribution is orders of magnitude lower than that required for I/O. 6 4 Extended Two-Phase Method for Out-of-Core Arrays We have extended the basic Two-Phase Method for in-core arrays proposed by Bordawekar, del Rosario and Choudhary <ref> [7, 3] </ref>, to access arbitrary sections of out-of-core arrays. This method performs I/O for out-of-core arrays efficiently by combining several I/O requests into fewer larger requests, eliminating multiple disk accesses for the same data and reducing contention for disks.
Reference: [8] <author> J. del Rosario, M. Harry, and A. Choudhary. </author> <title> The Design of VIP-FS: A Virtual Parallel File System for High Performance Parallel and Distributed Computing. </title> <type> Technical Report SCCS628, </type> <institution> NPAC, Syracuse University, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: PASSION provides support at the language [2], compiler [13], runtime [14] as well as file system level <ref> [8, 12] </ref>. The PASSION Runtime Library provides routines to efficiently perform the I/O required in loosely synchronous [9] out-of-core programs which use a Single Program Multiple Data (SPMD) model.
Reference: [9] <author> G. Fox, R. Williams, and P. Messina. </author> <title> Parallel Computing Works. </title> <publisher> Morgan Kaufmann Publishers Inc., </publisher> <year> 1994. </year>
Reference-contexts: PASSION provides support at the language [2], compiler [13], runtime [14] as well as file system level [8, 12]. The PASSION Runtime Library provides routines to efficiently perform the I/O required in loosely synchronous <ref> [9] </ref> out-of-core programs which use a Single Program Multiple Data (SPMD) model. It provides the user with a simple high-level interface, which is a level higher than any of the existing parallel file system interfaces or even the proposed MPI-IO interface [5]. <p> Even if a processor does not need any data, it must still call the routine with a request for 0 bytes, and participate in the two-phase process. This is a reasonable assumption given that 7 our intention is to support a loosely synchronous model of parallel computation <ref> [9] </ref>. An advantage of using collective I/O is that since all processors are participating, they can cooperate to perform certain optimizations.
Reference: [10] <author> N. Galbreath, W. Gropp, and D. Levine. </author> <title> Applications-Driven Parallel I/O. </title> <booktitle> In Proceedings of Supercomputing '93, </booktitle> <pages> pages 462-471, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Another advantage is that if any processor needs to access some data which was previously modified by some other processor, it can be done using just a read call without any additional synchronization. The idea of collective I/O has also been used in other schemes such as in <ref> [1, 11, 10] </ref>. In the next section, we describe the Extended Two-Phase Method for reading sections of out- of-core arrays.
Reference: [11] <author> D. Kotz. </author> <title> Disk-directed I/O for MIMD Multiprocessors. </title> <booktitle> In Proceedings of the First Symposium on Operating Systems Design and Implementation (OSDI), </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: Another advantage is that if any processor needs to access some data which was previously modified by some other processor, it can be done using just a read call without any additional synchronization. The idea of collective I/O has also been used in other schemes such as in <ref> [1, 11, 10] </ref>. In the next section, we describe the Extended Two-Phase Method for reading sections of out- of-core arrays. <p> The Extended Two-Phase Method proposed in this paper provides similar functionality using only a single routine for reading sections and a single routine for writing sections, which can be implemented very easily. It does not incur the overhead of managing many processes and the associated context switching. Disk-directed I/O <ref> [11] </ref> is another technique which uses collective I/O. In disk-directed I/O, compute processors collectively send a single request to all I/O processors, which then perform I/O efficiently, and send the data to the compute processors.
Reference: [12] <author> T. Singh and A. Choudhary. ADOPT: </author> <title> A Dynamic Scheme for Optimal Prefetching in Parallel File Systems. </title> <type> Technical Report SCCS-627, </type> <institution> NPAC, Syracuse University, </institution> <year> 1994. </year>
Reference-contexts: PASSION provides support at the language [2], compiler [13], runtime [14] as well as file system level <ref> [8, 12] </ref>. The PASSION Runtime Library provides routines to efficiently perform the I/O required in loosely synchronous [9] out-of-core programs which use a Single Program Multiple Data (SPMD) model.
Reference: [13] <author> R. Thakur, R. Bordawekar, and A. Choudhary. </author> <title> Compiler and Runtime Support for Out-of-Core HPF Programs. </title> <booktitle> In Proceedings of the 8 th ACM International Conference on Supercomputing, </booktitle> <pages> pages 382-391, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: PASSION provides support at the language [2], compiler <ref> [13] </ref>, runtime [14] as well as file system level [8, 12]. The PASSION Runtime Library provides routines to efficiently perform the I/O required in loosely synchronous [9] out-of-core programs which use a Single Program Multiple Data (SPMD) model. <p> A number of optimizations such as Data Sieving, Data Prefetching and Data Reuse have been incorporated in the library for improved performance <ref> [14, 13] </ref>.
Reference: [14] <author> R. Thakur, R. Bordawekar, A. Choudhary, R. Ponnusamy, and T. Singh. </author> <title> PASSION Runtime Library for Parallel I/O. </title> <booktitle> In Proceedings of the Scalable Parallel Libraries Conference, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: In this paper, we propose an Extended Two-Phase Method for accessing sections of out-of-core arrays, which is a generalization of the Two-Phase Method for in-core arrays. This Extended Two-Phase Method is used in the PASSION Runtime Library for Out-of-Core Compu <p>- 1 tations <ref> [14, 4] </ref> which we are developing. The rest of this paper is organized as follows. Section 2 gives an overview of the PASSION Runtime Library and the different data access models it supports. <p> PASSION provides support at the language [2], compiler [13], runtime <ref> [14] </ref> as well as file system level [8, 12]. The PASSION Runtime Library provides routines to efficiently perform the I/O required in loosely synchronous [9] out-of-core programs which use a Single Program Multiple Data (SPMD) model. <p> A number of optimizations such as Data Sieving, Data Prefetching and Data Reuse have been incorporated in the library for improved performance <ref> [14, 13] </ref>. <p> If the processor tries to read only the useful data, it may result in a number of small strided accesses. In order to avoid this, it uses an optimization known as Data Sieving which is described in <ref> [14] </ref>. The processor reads an entire column of the section at a time in a single operation into a temporary buffer. This may include some unwanted data. The useful data is extracted from the temporary buffer and placed in communication buffers 10 depending on which processors need the data. <p> It may also contain some data which is not being written by any processor. The processor writes the useful data in this section one column at a time using Data Sieving <ref> [14] </ref>. However, for writing using Data Sieving, we cannot directly use the reverse of the method used for reading in Section 5.
Reference: [15] <author> R. Thakur and A. Choudhary. </author> <title> All-to-All Communication on Meshes with Wormhole Routing. </title> <booktitle> In Proceedings of the 8 th International Parallel Processing Symposium, </booktitle> <pages> pages 561-565, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: In the first step of the Extended Two-Phase Method, all processors exchange their own access information (the indices l 1 ; u 1 ; s 1 ; l 2 ; u 2 ; s 2 ) with all other processors, which requires a complete exchange or all-to-all type communication <ref> [15, 17] </ref>. Thus each processor knows the access requests of all other processors. This information is stored in a data structure called the File Access Descriptor (FAD), shown in Figure 5. The FAD contains exactly the same information on all processors.
Reference: [16] <author> R. Thakur, A. Choudhary, and G. Fox. </author> <title> Runtime Array Redistribution in HPF Programs. </title> <booktitle> In Proceedings of the Scalable High Performance Computing Conference, </booktitle> <pages> pages 309-316, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: The Two-Phase Method [7, 3] proposes to read the entire in-core array into a distributed array in main memory in two phases. In the first phase, the processors always read data assuming the conforming distribution. In the second phase, data is redistributed <ref> [16] </ref> among processors, using interprocessor communication, to whatever is the actual desired distribution. This two phase approach is found to give consistently good performance for all distributions [7, 3].
Reference: [17] <author> R. Thakur, R. Ponnusamy, A. Choudhary, and G. Fox. </author> <title> Complete Exchange on the CM-5 and Touchstone Delta. </title> <note> to appear in The Journal of Supercomputing. 21 </note>
Reference-contexts: In the first step of the Extended Two-Phase Method, all processors exchange their own access information (the indices l 1 ; u 1 ; s 1 ; l 2 ; u 2 ; s 2 ) with all other processors, which requires a complete exchange or all-to-all type communication <ref> [15, 17] </ref>. Thus each processor knows the access requests of all other processors. This information is stored in a data structure called the File Access Descriptor (FAD), shown in Figure 5. The FAD contains exactly the same information on all processors.
References-found: 17

