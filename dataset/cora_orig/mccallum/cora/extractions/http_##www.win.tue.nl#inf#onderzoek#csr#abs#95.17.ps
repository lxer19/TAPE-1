URL: http://www.win.tue.nl/inf/onderzoek/csr/abs/95.17.ps
Refering-URL: http://www.win.tue.nl/inf/onderzoek/publicaties.html
Root-URL: http://www.win.tue.nl
Email: email: sjouke@win.tue.nl  email: emma@fwi.uva.nl  
Title: Specification of tools for Message Sequence Charts  
Author: S. Mauw E. A. van der Meulen 
Address: P.O. Box 513, 5600 MB Eindhoven, The Netherlands,  Amsterdam, Kruislaan 403, 1098 SJ Amsterdam, The Netherlands,  
Affiliation: Dept. of Mathematics and Computing Science, Eindhoven University of Technology,  Dept. of Mathematics and Computing Science, University of  
Abstract: The recent formalization of the semantics of Message Sequence Charts enables the derivation of tools for MSCs directly from this formal definition. We use the Asf+Sdf Meta-environment to make a straightforward implementation of tools for transformation, simulation and requirements testing. In this paper we present the complete specification of the tools. 
Abstract-found: 1
Intro-found: 1
Reference: [BK84] <author> J.A. Bergstra and J.W. Klop. </author> <title> Process algebra for synchronous communication. </title> <journal> Information & Control, </journal> <volume> 60 </volume> <pages> 109-137, </pages> <year> 1984. </year>
Reference-contexts: First we define the atomic actions. After that we give the definition of the process algebra PA " and extend it with the state operator. 5.1 Atomic actions The process algebra PA BMSC is an algebraic theory for the description of process behavior based on ACP <ref> [BW90, BK84] </ref>. First we will define the set of atomic actions of PA BMSC . Every (extended) event occurring in a BMSC will be translated into an atomic action from PA BMSC . Thus we have the atomic actions as displayed in Table 2.
Reference: [BW90] <author> J.C.M. Baeten and W.P. Weijland. </author> <title> Process Algebra. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 18. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: First we define the atomic actions. After that we give the definition of the process algebra PA " and extend it with the state operator. 5.1 Atomic actions The process algebra PA BMSC is an algebraic theory for the description of process behavior based on ACP <ref> [BW90, BK84] </ref>. First we will define the set of atomic actions of PA BMSC . Every (extended) event occurring in a BMSC will be translated into an atomic action from PA BMSC . Thus we have the atomic actions as displayed in Table 2. <p> A message input may not be executed before the corresponding message output has been executed. We introduce an operator M that enables only those execution paths that respect the above constraint. The operator M is an instance of the state operator as can be found in <ref> [BW90] </ref>. This operator remembers all message outputs that have been executed in a set M and only allows a message input if its corresponding message output is in that set.
Reference: [EM85] <author> H. Ehrig and B. Mahr. </author> <title> Fundamentals of Algebraic Specifications, vol. I, Equations and Initial Semantics. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Mauw & E. A. van der Meulen also equations. Therefore, the obvious way of implementing the semantics of MSCs is by using algebraic specifications <ref> [EM85] </ref>. We used the Asf+Sdf Meta-environment [Kli93] for the implementation. With this system algebraic specifications can be implemented by means of term rewriting systems. Furthermore, a complete programming environment for BMSCs can be generated, including a syntax directed editor, a parser and a pretty printer.
Reference: [IT94] <author> ITU-TS. </author> <title> ITU-TS Recommendation Z.120: Message Sequence Chart (MSC). </title> <address> ITU-TS, Geneva, </address> <year> 1994. </year> <title> 36 S. </title> <editor> Mauw & E. A. </editor> <publisher> van der Meulen </publisher>
Reference-contexts: 1 Introduction Message Sequence Charts (MSCs) are a graphical method for the description of the interaction between system components <ref> [IT94] </ref>. Due to the recent formalization [MR94a, MR94b, IT95] of the semantics of Message Sequence Charts, we can consider MSC as a formal description technique. <p> Furthermore, a complete programming environment for BMSCs can be generated, including a syntax directed editor, a parser and a pretty printer. The implementation consists of three parts. The first part consists of an implementation of the static requirements for BMSCs expressed informally in <ref> [IT94] </ref> and formalized in [Ren94]. The second part is the translation of BMSCs into process algebra expressions. This is based on the definition of the semantic functions in [MR94a]. The third part is the definition of a simulator for BMSCs. <p> More advanced priority rules are referred to in section 5.2. 3 Message Sequence Charts Message Sequence Charts provide a graphical method for the description of the communication behavior of system components. The ITU-TS (the Telecommunication Standardization Section of the International Telecommunication Union, the former CCITT) maintains recommendation Z.120 <ref> [IT94] </ref> which contains the syntax and an informal explanation of the 6 S. Mauw & E. A. van der Meulen semantics of Message Sequence Charts. A formal semantics based on process algebra has been proposed in [MR94b].
Reference: [IT95] <author> ITU-TS. </author> <title> ITU-TS Recommendation Z.120 Annex B: Algebraic semantics of Message Sequence Charts. </title> <address> ITU-TS, Geneva, </address> <publisher> Publ. </publisher> <address> Sched. </address> <year> 1995. </year>
Reference-contexts: 1 Introduction Message Sequence Charts (MSCs) are a graphical method for the description of the interaction between system components [IT94]. Due to the recent formalization <ref> [MR94a, MR94b, IT95] </ref> of the semantics of Message Sequence Charts, we can consider MSC as a formal description technique. <p> Mauw & E. A. van der Meulen semantics of Message Sequence Charts. A formal semantics based on process algebra has been proposed in [MR94b]. This proposal has been accepted for standardization by the ITU <ref> [IT95] </ref>. 3.1 Basic Message Sequence Charts In this paper we restrict ourselves to the core language of Message Sequence Charts, which we call Basic Message Sequence Charts (BMSCs). A Basic Message Sequence Chart concentrates on communications and local actions only.
Reference: [Kli93] <author> P. Klint. </author> <title> A meta-environment for generating programming environments. </title> <journal> ACM Transactions on Software Engineering Methodology, </journal> <volume> 2(2) </volume> <pages> 176-201, </pages> <year> 1993. </year>
Reference-contexts: Mauw & E. A. van der Meulen also equations. Therefore, the obvious way of implementing the semantics of MSCs is by using algebraic specifications [EM85]. We used the Asf+Sdf Meta-environment <ref> [Kli93] </ref> for the implementation. With this system algebraic specifications can be implemented by means of term rewriting systems. Furthermore, a complete programming environment for BMSCs can be generated, including a syntax directed editor, a parser and a pretty printer. The implementation consists of three parts. <p> Refer to [MR94a] for a comprehensive treatment. Acknowledgements Thanks are due to Arie van Deursen, Wilco Koorn, Michel Reniers and Eelco Visser for their assistance during several phases of this project. 2 The ASF+SDF Meta-environment The Asf+Sdf Meta-environment <ref> [Kli93] </ref> is a programming environment generator based on algebraic specifications. From a specification of the syntax and semantics of a language an environment is generated, in its simplest form consisting of a syntax directed editor and a term rewrite system.
Reference: [Klo92] <author> J.W. Klop. </author> <title> Term rewriting systems. </title> <editor> In S. Abramsky, D. Gabbay, and T. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume II, </volume> <pages> pages 1-116. </pages> <publisher> Oxford University Press, </publisher> <year> 1992. </year>
Reference-contexts: The transformation into a TRS sometimes implies that decisions on implementation details are made, which were not expressed in the algebraic specification. For example, if we aim at complete TRSs (i.e. TRSs which are confluent and terminating, see <ref> [Klo92] </ref>), we need to decide on the implementation of commutative operators and the implementation of 4 S. Mauw & E. A. van der Meulen sets by ordered lists. <p> The transformation into a TRS sometimes implies that decisions on implementation details are made, which were not expressed in the algebraic specification. For example, if we aim at complete TRSs (i.e. TRSs which are confluent and terminating, see <ref> [Klo92] </ref>), we need to decide on the implementation of commutative operators and the implementation of sets by ordered lists. Therefore, a completely automatic implementation of an algebraically specified semantics by means of a TRS is not always feasible.
Reference: [Koo92] <author> J.W.C. Koorn. </author> <title> Connecting semantic tools to a syntax-directed user-interface. </title> <type> Report P9222, </type> <institution> Programming Research Group, University of Amsterdam, </institution> <year> 1992. </year>
Reference-contexts: From a specification of the syntax and semantics of a language an environment is generated, in its simplest form consisting of a syntax directed editor and a term rewrite system. The generated environment can be customized further by means of the language SEAL <ref> [Koo92, Koo94] </ref>. 2.1 Algebraic Specifications An algebraic specification consists of a signature, a set of variables and a set of equations. The signature describes a number of sorts and functions over these sorts. Using these functions and the variables one can construct terms. The equations define equalities between these terms. <p> Figure 3 shows a snapshot of the syntax directed editor, containing the running example of figure 2. Note, that buttons are connected to the editor for the four other tools. These buttons are created by means of the user interface language SEAL <ref> [Koo92, Koo94] </ref>. When a button is selected the corresponding tool is applied to the BMSC in the editor. 4 Requirements Two static requirements for Basic Message Sequence Charts are formulated in [MR94a]. The first is that an instance may be declared only once.
Reference: [Koo94] <author> J.W.C. Koorn. </author> <title> Generating uniform user-interfaces for interactive programming environments. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <year> 1994. </year> <type> ILLC Dissertation series 1994-2. </type>
Reference-contexts: From a specification of the syntax and semantics of a language an environment is generated, in its simplest form consisting of a syntax directed editor and a term rewrite system. The generated environment can be customized further by means of the language SEAL <ref> [Koo92, Koo94] </ref>. 2.1 Algebraic Specifications An algebraic specification consists of a signature, a set of variables and a set of equations. The signature describes a number of sorts and functions over these sorts. Using these functions and the variables one can construct terms. The equations define equalities between these terms. <p> Figure 3 shows a snapshot of the syntax directed editor, containing the running example of figure 2. Note, that buttons are connected to the editor for the four other tools. These buttons are created by means of the user interface language SEAL <ref> [Koo92, Koo94] </ref>. When a button is selected the corresponding tool is applied to the BMSC in the editor. 4 Requirements Two static requirements for Basic Message Sequence Charts are formulated in [MR94a]. The first is that an instance may be declared only once.
Reference: [KW93] <author> J. F. Th. Kamperman and H.R. Walters. </author> <title> ARM, abstract rewriting machine. </title> <type> Technical Report CS-9330, </type> <institution> Centrum voor Wiskunde en Informatica, </institution> <year> 1993. </year>
Reference: [MR94a] <author> S. Mauw and M.A. Reniers. </author> <title> An algebraic semantics of Basic Message Sequence Charts. </title> <journal> The computer journal, </journal> <volume> 37(4) </volume> <pages> 269-277, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction Message Sequence Charts (MSCs) are a graphical method for the description of the interaction between system components [IT94]. Due to the recent formalization <ref> [MR94a, MR94b, IT95] </ref> of the semantics of Message Sequence Charts, we can consider MSC as a formal description technique. <p> BMSCs are Message Sequence Charts with only the main features: communication and local actions. The techniques described in this paper transfer straightforward to the complete MSC language. As described in <ref> [MR94a] </ref> the semantics of BMSCs is defined by a translation into process algebra. This translation is defined by means of equations and the axioms defining process algebra are Proceedings of the ASF+SDF95 workshop on generating tools from algebraic specifications, May 11 & 12, 1995, CWI, Amsterdam 2 S. <p> The first part consists of an implementation of the static requirements for BMSCs expressed informally in [IT94] and formalized in [Ren94]. The second part is the translation of BMSCs into process algebra expressions. This is based on the definition of the semantic functions in <ref> [MR94a] </ref>. The third part is the definition of a simulator for BMSCs. Although a simulator is not part of the formal semantics, it can easily be derived from the operational semantics given in [MR94a]. <p> This is based on the definition of the semantic functions in <ref> [MR94a] </ref>. The third part is the definition of a simulator for BMSCs. Although a simulator is not part of the formal semantics, it can easily be derived from the operational semantics given in [MR94a]. In fact the description of the simulator can be regarded as a formal specification of a simulation tool. the given language and arrows represent transformations from one language to the other. Apart from the INPUT language which is plain ASCII, we consider the following languages. <p> MESSAGES is the language of output messages generated by the requirements checker and the simulator, BMSC is the language of (parsed) Basic Message Sequence Charts, PA BMSC is the process algebra theory used for describing the semantics of BMSCs (see <ref> [MR94a] </ref>) and BPA is the sub-language of PA BMSC that only contains the normalized PA BMSC expressions. The generated tools are considered as transformation tools, described by algebraic specifications. We specified the following tools. Syntax directed editor and parser The parser converts plain ASCII text into BMSC. <p> The Semantics Calculator and Normalizer are defined in Section 6 and the simulator in Section 7. Although this paper covers the complete semantics of BMSCs, it is not intended as a self-contained explanation of these semantics. Refer to <ref> [MR94a] </ref> for a comprehensive treatment. Acknowledgements Thanks are due to Arie van Deursen, Wilco Koorn, Michel Reniers and Eelco Visser for their assistance during several phases of this project. 2 The ASF+SDF Meta-environment The Asf+Sdf Meta-environment [Kli93] is a programming environment generator based on algebraic specifications. <p> A Basic Message Sequence Chart concentrates on communications and local actions only. These are the features encountered in most languages comparable to Message Sequence Charts. Their semantics is described in <ref> [MR94a] </ref>. A Basic Message Sequence Chart contains a (partial) description of the communication behavior of a number of instances. An instance is an abstract entity of which one can observe (part of) the interaction with other instances or with the environment. <p> For the sending of k and the reception of m no ordering is specified. 3.2 BMSC syntax The grammar defining the syntax of textual Basic Message Sequence Charts as presented in <ref> [MR94a] </ref> is given in Table 1. The nonterminals &lt;mscid&gt;, &lt;iid&gt;, &lt;mid&gt; and &lt;aid&gt; represent identifiers. The symbol &lt;&gt; denotes the empty string. The following identifiers are reserved Specification of tools for Message Sequence Charts 7 keywords: action, endinstance, endmsc, env, from, in, instance, msc, out and to. <p> These buttons are created by means of the user interface language SEAL [Koo92, Koo94]. When a button is selected the corresponding tool is applied to the BMSC in the editor. 4 Requirements Two static requirements for Basic Message Sequence Charts are formulated in <ref> [MR94a] </ref>. The first is that an instance may be declared only once. The second is that every message identifier occurs exactly once in an output action and once in a matching input action, or in case of a communication with the environment a message identifier occurs only once. <p> This is the so-called state explosion problem. Therefore, the tools offer the possibility to walk through the events of a BMSC in any of the admitted orders. Thus, the user can interactively simulate the behavior of a BMSC. For this purpose we used the operational semantics for BMSCs from <ref> [MR94a] </ref>. This operational semantics defines for a given BMSC a labeled transition system. The transitions correspond with the events of the BMSC. First, we will interpret the definition of the transition rules in an algebraic specification.
Reference: [MR94b] <author> S. Mauw and M.A. Reniers. </author> <title> An algebraic semantics of Message Sequence Charts. </title> <booktitle> Experts Meeting SG10, </booktitle> <address> Turin, TD9009, ITU-TS, </address> <year> 1994. </year> <type> Report CSN94/23, </type> <institution> Eind-hoven University of Technology, </institution> <year> 1994. </year>
Reference-contexts: 1 Introduction Message Sequence Charts (MSCs) are a graphical method for the description of the interaction between system components [IT94]. Due to the recent formalization <ref> [MR94a, MR94b, IT95] </ref> of the semantics of Message Sequence Charts, we can consider MSC as a formal description technique. <p> Mauw & E. A. van der Meulen semantics of Message Sequence Charts. A formal semantics based on process algebra has been proposed in <ref> [MR94b] </ref>. This proposal has been accepted for standardization by the ITU [IT95]. 3.1 Basic Message Sequence Charts In this paper we restrict ourselves to the core language of Message Sequence Charts, which we call Basic Message Sequence Charts (BMSCs).
Reference: [Plo83] <author> G.D. Plotkin. </author> <title> An operational semantics for CSP. </title> <booktitle> In Proceedings of the Conference on the Formal Description of Programming Concepts, </booktitle> <volume> volume 2, Garmisch, </volume> <year> 1983. </year>
Reference-contexts: First, we will interpret the definition of the transition rules in an algebraic specification. After that, we define the additional functions needed to obtain a simulator. 7.1 Transitions In this section we define a structural operational semantics of Basic Message Sequence Charts in the style of Plotkin <ref> [Plo83] </ref>. For this purpose we define action relations on closed PA BMSC terms.
Reference: [Ren94] <author> M.A. Reniers. </author> <title> Syntax requirements of Message Sequence Charts. Study Group Meeting SG10, </title> <address> Geneva, TD59, ITU-TS, </address> <year> 1994. </year>
Reference-contexts: Furthermore, a complete programming environment for BMSCs can be generated, including a syntax directed editor, a parser and a pretty printer. The implementation consists of three parts. The first part consists of an implementation of the static requirements for BMSCs expressed informally in [IT94] and formalized in <ref> [Ren94] </ref>. The second part is the translation of BMSCs into process algebra expressions. This is based on the definition of the semantic functions in [MR94a]. The third part is the definition of a simulator for BMSCs.
References-found: 14

