URL: http://www.cs.pitt.edu/~kirk/papers/esa98.ps
Refering-URL: http://www.cs.pitt.edu/~kirk/papers/index.html
Root-URL: 
Email: fkalyan, kirkg@cs.pitt.edu  
Title: Maximizing Job Completions Online  
Author: Bala Kalyanasundaram and Kirk Pruhs 
Keyword: P  
Web: http://www.cs.pitt.edu/~fkalyan,kirkg  
Address: Pittsburgh Pittsburgh, PA. 15260 USA  
Affiliation: Dept. of Computer Science University of  
Abstract: We consider the problem of maximizing the number of jobs completed by their deadline in an online single processor system where the jobs are preemptable and have release times. So in the standard three field scheduling notation, this is the online version of the problem 1 j r i ; pmtn j (1 U i ). We give a constant competitive randomized algorithm for this problem. It is known that no constant competitive deterministic algorithm exists for this problem. This is the first time that this phenomenon, the randomized competitive ratio is constant in spite of the fact that the deterministic competitive ratio is nonconstant, has been demonstrated to occur in a natural online problem. This result is also a first step toward determining how an online scheduler can use additional processors in a real-time setting to achieve competitiveness.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S. Baruah, J. Harita, and N. Sharma, </author> <title> "On-line scheduling to maximize task completions", </title> <booktitle> IEEE Real-time Systems Symposium, </booktitle> <year> 1994. </year>
Reference-contexts: The first consequence of this result is that one can then easily obtain a constant competitive randomized online algorithm by running each of SRPT and Lax with equal probability. It is known that no constant competitive deterministic algorithm exists for this problem <ref> [1] </ref>. This is the first time that this phenomenon, the randomized competitive ratio is constant in spite of the fact that the deterministic competitive ratio is nonconstant, has been demonstrated to occur in an unarguably natural online problem. <p> Every deterministic algorithm for this problem has a competitive ratio of ( log loglog ), where is the ratio of the length of the longest job to the length of the shortest job <ref> [1] </ref>. The algorithm SRPT is fi (log ) competitive [4]. Constant competitive deterministic algorithms for special instances (e.g. equal job lengths or monotone deadlines) can also be found in [1]. <p> log loglog ), where is the ratio of the length of the longest job to the length of the shortest job <ref> [1] </ref>. The algorithm SRPT is fi (log ) competitive [4]. Constant competitive deterministic algorithms for special instances (e.g. equal job lengths or monotone deadlines) can also be found in [1]. If all the jobs can be completed by their deadline then the EDF (Earliest Deadline First) algorithm will produce an optimal schedule [3].
Reference: 2. <author> S. Baruah, G. Koren, D. Mao, B. Mishra, A. Raghunathan, L. Rosier, D. Shasha, and F. Wang, </author> <title> "On the competitiveness of on-line real-time task scheduling", </title> <journal> Journal of Real-Time Systems, </journal> <volume> 4, </volume> <pages> 124-144, </pages> <year> 1992. </year>
Reference-contexts: If the objective function is to maximize processor utilization (the fraction of time that the processor is working on a job that it will complete by its deadline), then there is a 4-competitive deterministic algorithm, and this is optimal for deterministic online algorithms <ref> [2, 10] </ref>. It is well known that the algorithm SRPT minimizes the total flow time, which is the sum over all jobs of the completion time minus the release time of that job.
Reference: 3. <author> P. Brucker, </author> <title> Scheduling Algorithms, </title> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction We consider the problem of maximizing the number of jobs completed by their deadline in an online single processor system where the jobs are preemptable and have release times. So in the standard three field scheduling notation <ref> [3] </ref>, this is the online version of the problem 1 j r i ; pmtn j P (1 U i ). <p> Constant competitive deterministic algorithms for special instances (e.g. equal job lengths or monotone deadlines) can also be found in [1]. If all the jobs can be completed by their deadline then the EDF (Earliest Deadline First) algorithm will produce an optimal schedule <ref> [3] </ref>. In [6] it is shown that if the online scheduler is given a faster processor than the adversary, then there is a relatively simple algorithm that is constant competitive. <p> The o*ine version of of 1 j r i ; pmtn j P (1 U i ) can be solved in polynomial time using a dynamic programming algorithm <ref> [3] </ref>. 2 Algorithm Descriptions Among all jobs that can be completed by their deadline, SRPT is always running the job that it can complete first. Lax maintains a stack H of jobs.
Reference: 4. <author> K. Christian, </author> <title> "Analyzing Real-Time Online Scheduling Algorithms with Respect to Completion Count", </title> <type> manuscript. </type>
Reference-contexts: Every deterministic algorithm for this problem has a competitive ratio of ( log loglog ), where is the ratio of the length of the longest job to the length of the shortest job [1]. The algorithm SRPT is fi (log ) competitive <ref> [4] </ref>. Constant competitive deterministic algorithms for special instances (e.g. equal job lengths or monotone deadlines) can also be found in [1]. If all the jobs can be completed by their deadline then the EDF (Earliest Deadline First) algorithm will produce an optimal schedule [3]. <p> For a recent general survey of online scheduling see [9]. We first consider problems where one changes the objective function. If the objective function is to minimize the number of jobs that miss their deadline, then there is no constant competitive randomized online algorithm <ref> [4] </ref>. If the objective function is to maximize processor utilization (the fraction of time that the processor is working on a job that it will complete by its deadline), then there is a 4-competitive deterministic algorithm, and this is optimal for deterministic online algorithms [2, 10].
Reference: 5. <author> S. Irani, and A. Karlin, </author> <title> "Online computation", Chapter 13 of Approximation Algorithms for NP-hard Problems, </title> <editor> ed. D. Hochbaum, </editor> <publisher> PWS Publishing, </publisher> <year> 1997. </year>
Reference-contexts: The adversary specifies the input and services that input optimally. We assume an oblivious adversary, that is, the adversary may not modify I in response to the outcome of a random event in A. For background information on online algorithms see <ref> [5] </ref>. 1.2 Related Results We start with results on the online version of 1 j r i ; pmtn j P (1 U i ).
Reference: 6. <author> B. Kalyanasundaram and K. </author> <title> Pruhs "Speed is as powerful as clairvoyance", </title> <booktitle> IEEE Foundations of Computer Science, </booktitle> <pages> 214-223, </pages> <year> 1995. </year>
Reference-contexts: For a discussion of the usefulness of resource augmentation analysis in online scheduling problems see <ref> [6] </ref> and [8]. Broadly speaking, [6] and [8] show that an online scheduler, equipped with either faster processors or more processors, can be constant competitive with respect to flow time, and that an online scheduler, equipped with faster processors, can be constant competitive in various real-time scheduling problems. <p> For a discussion of the usefulness of resource augmentation analysis in online scheduling problems see <ref> [6] </ref> and [8]. Broadly speaking, [6] and [8] show that an online scheduler, equipped with either faster processors or more processors, can be constant competitive with respect to flow time, and that an online scheduler, equipped with faster processors, can be constant competitive in various real-time scheduling problems. <p> Constant competitive deterministic algorithms for special instances (e.g. equal job lengths or monotone deadlines) can also be found in [1]. If all the jobs can be completed by their deadline then the EDF (Earliest Deadline First) algorithm will produce an optimal schedule [3]. In <ref> [6] </ref> it is shown that if the online scheduler is given a faster processor than the adversary, then there is a relatively simple algorithm that is constant competitive. <p> In the second case assume that there are more fat jobs in T than there are skinny jobs. Let T 0 be T with the skinny jobs deleted. In <ref> [6] </ref> it is shown how to modify a schedule T 0 of fat jobs to create a schedule T 00 that satisfies condition 3, and contains at least fl 2 jT 0 j jobs. Note that for ff &gt; 4, fl 2 1 (ff+1) .
Reference: 7. <author> G. Koren and D. Shasha, "MOCA: </author> <title> A multiprocessor on-line competitive algorithm for real-time systems scheduling", </title> <journal> Theoretical Computer Science, </journal> <volume> 128, </volume> <pages> 75-97, </pages> <year> 1994. </year>
Reference: 8. <author> C. Phillips, C. Stein, E. Torng, and J. Wein, </author> <title> "Optimal time-critical scheduling via resource augmentation", </title> <booktitle> ACM Symposium on Theory of Computation, </booktitle> <volume> 140 - 149, </volume> <year> 1997. </year>
Reference-contexts: For a discussion of the usefulness of resource augmentation analysis in online scheduling problems see [6] and <ref> [8] </ref>. Broadly speaking, [6] and [8] show that an online scheduler, equipped with either faster processors or more processors, can be constant competitive with respect to flow time, and that an online scheduler, equipped with faster processors, can be constant competitive in various real-time scheduling problems. <p> For a discussion of the usefulness of resource augmentation analysis in online scheduling problems see [6] and <ref> [8] </ref>. Broadly speaking, [6] and [8] show that an online scheduler, equipped with either faster processors or more processors, can be constant competitive with respect to flow time, and that an online scheduler, equipped with faster processors, can be constant competitive in various real-time scheduling problems. <p> If one changes the job environment to disallow preemption then it is easy to see that no constant competitive randomized algorithm exists. In <ref> [8] </ref> several results are presented in the case that the machine environment has multiple processors.
Reference: 9. <author> Jiri Sgall, </author> <title> "On-line scheduling a survey", </title> <note> http://www.math.cas.cz/~sgall/ps/schsurv.ps.gz, To appear in the proceedings of the Dagstuhl workshop on On-Line Algorithms, </note> <editor> eds. A. Fiat and G. Woeg-inger, </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: There is no constant competitive deterministic or randomized algorithm for 1 j r i ; pmtn j P We now survey results on problems that are one "change" away from the problem that we consider. For a recent general survey of online scheduling see <ref> [9] </ref>. We first consider problems where one changes the objective function. If the objective function is to minimize the number of jobs that miss their deadline, then there is no constant competitive randomized online algorithm [4].
Reference: 10. <author> G. Woeginger, </author> <title> "On-line scheduling of jobs with fixed start and end time", </title> <journal> Theoretical Computer Science, </journal> <volume> 130, </volume> <pages> 5-16, </pages> <year> 1994.. </year>
Reference-contexts: If the objective function is to maximize processor utilization (the fraction of time that the processor is working on a job that it will complete by its deadline), then there is a 4-competitive deterministic algorithm, and this is optimal for deterministic online algorithms <ref> [2, 10] </ref>. It is well known that the algorithm SRPT minimizes the total flow time, which is the sum over all jobs of the completion time minus the release time of that job.
References-found: 10

