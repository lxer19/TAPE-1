URL: ftp://ftp.win.tue.nl/pub/techreports/michelr/FestschriftMilner.ps.Z
Refering-URL: http://www.win.tue.nl/win/cs/fm/michelr/pub.html
Root-URL: http://www.win.tue.nl
Phone: 2  
Title: Discrete Time Process Algebra with Silent Step embedded in the discrete time theories. Examples of
Author: J.C.M. Baeten and J.A. Bergstra and M.A. Reniers 
Note: ffi are  
Address: P.O. Box 513, NL-5600 MB Eindhoven, The Netherlands  Amsterdam, Kruislaan 403, NL-1098 SJ Amsterdam, The Netherlands  Netherlands  
Affiliation: 1 Department of Mathematics and Computing Science, Eindhoven University of Technology,  Programming Research Group, University of  and Department of Philosophy, Utrecht University, Heidelberglaan  Utrecht, The  
Pubnum: 8, NL-3584 CS  
Abstract: The axiom system ACP of [10] was extended to discrete time in [6]. Here, we proceed to define the silent step in this theory in branching bisimulation semantics [7, 15] rather than weak bisimulation semantics [11, 20]. The version using relative timing is discussed extensively, versions using absolute and parametric timing are presented in brief. A term model and a graph model are presented and soundness and completeness results are given. The time free theories BPA ffi and BPA o Note: Partial support received from ESPRIT Basic Research Action 7166, CONCUR2. This paper supersedes [4]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. C. M. Baeten and J. A. Bergstra. </author> <title> Real time process algebra. </title> <journal> Formal Aspects of Computing, </journal> <volume> 3(2) </volume> <pages> 142-188, </pages> <year> 1991. </year>
Reference-contexts: Process algebras can be introduced that support standardized features to incorporate a quantitative view on time. Time may be represented by means of non-negative reals, and actions can be given time stamps. This line is followed in <ref> [1] </ref> for ACP, in [21] for CCS and in [23] for CSP. <p> Van Glabbeek and Weijland [15] introduced branching bisimulation which also deals with silent step, but is slightly less abstract. This will allow a notion of abstraction. We mention that [18] has extended ACP ae , the real time ACP of <ref> [1] </ref>, with silent steps. We present three views on discrete time process algebra with silent step: a version using relative timing (which we discuss extensively), a version using absolute timing, and a version using parametric timing, that integrates the relative and absolute timing versions.
Reference: [2] <author> J. C. M. Baeten and J. A. Bergstra. </author> <title> Discrete time process algebra (extended abstract). </title> <editor> In W.R. Cleave-land, editor, CONCUR'92, </editor> <booktitle> Third International Conference on Concurrency Theory, volume 630 of Lecture Notes in Computer Science, </booktitle> <pages> pages 401-420, </pages> <address> Stony Brook, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: This line has been followed in ATP [22], a process algebra that adds time slicing to a version of ACP based on action prefixing rather than sequential composition. Further, [16] has extended ACP with time slices whereas [21] have added these features to CCS. Following <ref> [2, 6] </ref>, we use the phrase discrete time process algebra if an enumeration of time slices is used. The objective of this paper is to extend the discrete time process algebra of ACP as given in [6] with the silent step o . <p> This operator, called the current slice time out operator, or current slice operator in short, disallows an initial time step, it gives the part of a process that starts with an action in the current time slice. It was introduced in <ref> [2] </ref> in a setting without immediate deadlock, there, the notation x AE dt 1 was used for rel .x /. (The Greek letter sounds like now; this correspondence is even stronger in Dutch.) The axioms of BPA drt are A1-A5,A6ID,A7ID,DCS1-DCS4,DCSID,DRT1-DRT5,DRTSID, as given in Table 1. <p> Using the embedding of discrete time process algebra into real time process algebra given in <ref> [2, 6] </ref> we find that our notion of silent step in time is in line with the notion of timed branching bisimulation of [18]. <p> In the setting with unbounded start delay instead of time iteration these calculations can be found in [5]. We keep formulas compact by writing a instead of cts.a/ and a instead of ats.a/ (this is in line with notation used in <ref> [2, 13] </ref>). The communication format follows the so-called standard communication function. Suppose we have given two finite sets, the set of messages or data D, and the set of ports P.
Reference: [3] <author> J. C. M. Baeten and J. A. Bergstra. </author> <title> On sequential composition, action prefixes and process prefix. </title> <journal> Formal Aspects of Computing, </journal> <volume> 6(3) </volume> <pages> 250-268, </pages> <year> 1994. </year>
Reference-contexts: The standard process algebra BPA ffi can be considered as an SRM specification (Subalgebra of Reduced Model, in the terminology of <ref> [3] </ref>) of BPA drt : consider the initial algebra of BPA drt , reduce the signature by omitting ffi; oe rel ; rel , then BPA ffi is a complete axiomatization of the reduced model, under the interpretation of a; ffi (from BPA ffi ) by cts.a/; cts.ffi/.
Reference: [4] <author> J. C. M. Baeten and J. A. Bergstra. </author> <title> Discrete time process algebra with abstraction. </title> <editor> In H. Reichel, editor, FCT'95, </editor> <booktitle> International Conference on Fundamentals of Computation Theory, volume 965 of Lecture Notes in Computer Science, </booktitle> <pages> pages 1-15, </pages> <address> Dresden, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In <ref> [4] </ref> the conditional axiom cts.a/x D cts.a/ y ) cts.a/.oe rel .x /C rel .z// D cts.a/.oe rel .y/C rel .z// was introduced to omit a o -step following one or more time steps. In this paper we replace this conditional axiom by DRTB3 (see Table 5). <p> .y/ tf .oe rel .x // D tf .x / tf .oe fl Table 6: Axioms for time abstraction (a 2 A offi ). 5.2 Merge with Communication The extension of the theory BPA drt o with parallel composition, with or without communication, can be done along the lines of <ref> [4] </ref>. We present the extension with parallel composition with communication. In fact the axioms presented in this paper are almost identical to those presented in [4]. <p> Merge with Communication The extension of the theory BPA drt o with parallel composition, with or without communication, can be done along the lines of <ref> [4] </ref>. We present the extension with parallel composition with communication. In fact the axioms presented in this paper are almost identical to those presented in [4]. <p> We present axioms for ACP drt o in Table 8 and Table 9. The operational rules are exactly those given in <ref> [4] </ref> and are therefore omitted.
Reference: [5] <author> J. C. M. Baeten and J. A. Bergstra. </author> <title> Some simple calculations in relative discrete time process algebra. </title> <editor> In E. H. L. Aarts, H. M. M. ten Eikelder, C. Hemerik, and M. Rem, editors, </editor> <booktitle> Simplex Sigillum Veri, </booktitle> <pages> pages 67-74. </pages> <institution> Eindhoven University of Technology, </institution> <year> 1995. </year> <note> Liber Amicorum dedicated to prof.dr. </note> <author> F. E. J. Kruseman Aretz. </author> <month> 24 </month>
Reference-contexts: In the setting with unbounded start delay instead of time iteration these calculations can be found in <ref> [5] </ref>. We keep formulas compact by writing a instead of cts.a/ and a instead of ats.a/ (this is in line with notation used in [2, 13]). The communication format follows the so-called standard communication function.
Reference: [6] <author> J. C. M. Baeten and J. A. Bergstra. </author> <title> Discrete time process algebra. </title> <journal> Formal Aspects of Computing, </journal> <volume> 8(2) </volume> <pages> 188-208, </pages> <year> 1996. </year>
Reference-contexts: This line has been followed in ATP [22], a process algebra that adds time slicing to a version of ACP based on action prefixing rather than sequential composition. Further, [16] has extended ACP with time slices whereas [21] have added these features to CCS. Following <ref> [2, 6] </ref>, we use the phrase discrete time process algebra if an enumeration of time slices is used. The objective of this paper is to extend the discrete time process algebra of ACP as given in [6] with the silent step o . <p> Following [2, 6], we use the phrase discrete time process algebra if an enumeration of time slices is used. The objective of this paper is to extend the discrete time process algebra of ACP as given in <ref> [6] </ref> with the silent step o . Silent steps have been a cornerstone of CCS since its introduction. Milner used weak bisimulation to model processes with silent step. Van Glabbeek and Weijland [15] introduced branching bisimulation which also deals with silent step, but is slightly less abstract. <p> Also, we have the immediate deadlock constant ffi introduced in <ref> [6] </ref>. This constant denotes an immediate and catastrophic deadlock. Within a time slice, there is no explicit mention of the passage of time, we can see the passage to the next time slice as a clock tick. <p> However, this is not the embedding of the time free theory into the discrete time theory that we prefer: it reduces the whole world to one time slice. Rather, we propose to view the time free actions as actions that can occur in any time slice. Following <ref> [6] </ref>, we extend BPA drt to BPA drt by introducing constants ats.a/ (for a 2 A offi ). The constant ats.a/ executes a in an arbitrary time slice, followed by immediate termination. <p> The defining axiom for this operator takes the form of a recursive equation (see axiom DRTI1, Discrete Relative Time Iteration, in Table 1). The presentation using the time iteration operator here differs slightly from the presentation in <ref> [6] </ref>. There, we used the unbounded start delay operator bc ! of [22] instead; the unbounded start delay operator can be simply expressed in terms of the time iteration operator as follows: bx c ! D oe fl rel . rel .x //. <p> Using the embedding of discrete time process algebra into real time process algebra given in <ref> [2, 6] </ref> we find that our notion of silent step in time is in line with the notion of timed branching bisimulation of [18]. <p> Again, we can find BPA o ffi as an SRM specification by using the interpretation of a as atstau.a/. The extension with parallel composition can be found along the same lines as for the relative time case (see <ref> [6] </ref>). <p> The pair hx ; ni denotes x in the .n C 1/st time slice. The operational rules for the absolute value operator are trivial. For the operational rules for the constants fts.a/ (a 2 A o ) and ffi and the operators C; ; oe abs we refer to <ref> [6] </ref>. <p> All axioms presented in the previous sections are still valid for all parametric time processes. We obtain a finite axiomatization, that allows an elimination theorem. As a consequence, we can expand expressions like cts.a/ k fts.b/, cts.a/ k .fts.b/ C ats.ffi//. We follow <ref> [6] </ref>, where we introduced the operators fi, the (relative) time spectrum combinator, and , the spectrum tail operator. The absolute value operator can also be called the spectrum head operator. <p> P/j D P n though not all such P can be finitely expressed. The theory BPA dpt unites the theories BPA drt and BPA dat together with the additional axioms in Table 13. We extend with delayable actions, to BPA dpt , as indicated in <ref> [6] </ref>. <p> Note that we obtain the following spectrum expansion for the rel operator: rel .x / D abs .x / fi rel ..x //: For further details, we refer to <ref> [6] </ref>. Now the axioms introduced for silent steps in relative and absolute time are valid in parametric time as well. 7 Concluding Remarks We presented axioms for discrete time process algebra with silent step in branching bisimulation semantics.
Reference: [7] <author> J. C. M. Baeten and W. P. Weijland. </author> <title> Process Algebra, </title> <booktitle> volume 18 of Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: In order to prove identities for the time iteration operator, we need a restricted form of the Recursive Specification Principle RSP (see, e.g. <ref> [7] </ref>). We call this principle RSP (DRT) (see Table 2). We give a semantics for the theory BPA drt in terms of Plotkin-style operational rules. <p> An immediate deadlock term can only be related to another immediate deadlock term. As a consequence, we can have no term that is related to p . This is different from the usual definition of branching bisimulation of <ref> [7, 15] </ref>. In order to emphasize this fact, we call the relations to be defined branching tail bisimulations. <p> If we reduce the initial algebra of BPA drt o by reducing the signature by omitting ffi, ats.a/ (for a 2 A offi ), oe rel , rel , oe fl rel , and interpret a by cts.a/, we do not obtain BPA o ffi of <ref> [7, 15] </ref>. The first branching law x o D x will not hold, but instead x o y D x y. We can nevertheless obtain BPA o ffi as an SRM specification as follows. <p> Finally, we introduce an equivalent characterization of rooted branching tail bisimilarity in Section 3.4. This characterization of rooted branching tail bisimulation will be used in the completeness proof in Section 4. 3.1 Process graphs We define a set of process graphs as in <ref> [7] </ref> with labels from A ooe satisfying the extra condition that every node has at most one outgoing oe -labeled edge. End-nodes can be labeled with a label # (for successful termination) or a label ID (for immediate deadlock). <p> In time free process algebra, there is the following standard specification of a one-item buffer with input port i and output port j : B i j D d2D A straightforward calculation (see e.g. <ref> [7] </ref>, page 106) shows that the composition of two such buffers in sequence gives a two-item buffer. In the following, we consider three timed versions of this buffer. In each case, only one input per time slice is possible. <p> X / C e2D This is exactly the result of the time free calculation on page 106 of <ref> [7] </ref> (after abstraction).
Reference: [8] <author> T. Basten. </author> <title> Branching bisimilarity is an equivalence indeed! Information Processing Letters, </title> <booktitle> 58(1) </booktitle> <pages> 141-147, </pages> <year> 1996. </year>
Reference-contexts: Actually, we gave the definition of semi-branching bisimulation here, as optimized in <ref> [8] </ref>. The present definition is shorter and easier to work with than the original definition in [15], and induces the same equivalence relation (see [8]). <p> Actually, we gave the definition of semi-branching bisimulation here, as optimized in <ref> [8] </ref>. The present definition is shorter and easier to work with than the original definition in [15], and induces the same equivalence relation (see [8]).
Reference: [9] <author> J. A. Bergstra and P. Klint. </author> <title> The discrete time Toolbus. </title> <editor> In M. Wirsing and M. Nivat, editors, </editor> <booktitle> Algebraic Methodology and Software Technology (AMAST'96), volume 1101 of Lecture Notes in Computer Science, </booktitle> <pages> pages 286-305, </pages> <address> Munich, 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: There are many practical uses conceivable for timed process algebras. In particular, we mention the TOOLBUS (see <ref> [9] </ref>). This TOOLBUS contains a program notation called T which is syntactically sugared discrete time process algebra. Programs in T are called T -scripts. The runtime system is also described in terms of discrete time process algebra.
Reference: [10] <author> J. A. Bergstra and J. W. Klop. </author> <title> Process algebra for synchronous communication. </title> <journal> Information and Control, </journal> 60(1/3):109-137, 1984. 
Reference-contexts: 1 Introduction Process algebra was introduced by Milner in the form of CCS [19]. The original design of CCS and of subsequent versions of process algebra such as ACP <ref> [10] </ref> and TCSP [14] involves no explicit notion of time. Time is present in the interpretation of sequential composition: in p q (ACP notation) the process p should be executed before q. Process algebras can be introduced that support standardized features to incorporate a quantitative view on time.
Reference: [11] <author> J. A. Bergstra and J. W. Klop. </author> <title> Algebra of communicating processes with abstraction. </title> <journal> Theoretical Computer Science, </journal> <volume> 37(1) </volume> <pages> 77-121, </pages> <year> 1985. </year>
Reference: [12] <author> J. A. Bergstra and C. A. Middelburg. </author> <title> A process algebra semantics of OESDL. </title> <type> Technical Report LGPS 129, </type> <institution> Utrecht University, Department of Philisophy, </institution> <year> 1995. </year>
Reference-contexts: A comparable part of discrete time process algebra that is used to describe T -scripts has also been used for the description of OESDL, flat SDL, a subset of SDL that leaves out modularization and concentrates on timing aspects (see <ref> [12] </ref>). Discrete-time process algebra with relative timing has also been used for the formal specification of the I 2 C-bus [13]. At this point we are happy to express our admiration for Milner's contributions.
Reference: [13] <author> S. H. J. Bos and M. A. Reniers. </author> <title> The I 2 C-bus in discrete-time process algebra. </title> <booktitle> Science of Computer Programming, </booktitle> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: Discrete-time process algebra with relative timing has also been used for the formal specification of the I 2 C-bus <ref> [13] </ref>. At this point we are happy to express our admiration for Milner's contributions. <p> In this section, we define an operator that throws away all timing information, so that the image of a discrete time closed term will always be a time free term. This operator is called time abstraction or time free projection, and is denoted by tf (see <ref> [13] </ref>). We present axioms in Table 6, operational rules in Table 7. All axioms in Table 6 are sound with respect to strong and rooted branching tail bisimulation on the term model. <p> In the setting with unbounded start delay instead of time iteration these calculations can be found in [5]. We keep formulas compact by writing a instead of cts.a/ and a instead of ats.a/ (this is in line with notation used in <ref> [2, 13] </ref>). The communication format follows the so-called standard communication function. Suppose we have given two finite sets, the set of messages or data D, and the set of ports P.
Reference: [14] <author> S. D. Brookes, C. A. R. Hoare, and A. W. Roscoe. </author> <title> A theory of communicating sequential processes. </title> <journal> Journal of the ACM, </journal> <volume> 31(3) </volume> <pages> 560-599, </pages> <year> 1984. </year>
Reference-contexts: 1 Introduction Process algebra was introduced by Milner in the form of CCS [19]. The original design of CCS and of subsequent versions of process algebra such as ACP [10] and TCSP <ref> [14] </ref> involves no explicit notion of time. Time is present in the interpretation of sequential composition: in p q (ACP notation) the process p should be executed before q. Process algebras can be introduced that support standardized features to incorporate a quantitative view on time.
Reference: [15] <author> R. J. van Glabbeek and W.P. Weijland. </author> <title> Branching time and abstraction in bisimulation semantics. </title> <journal> Journal of the ACM, </journal> <volume> 43(3) </volume> <pages> 555-600, </pages> <year> 1996. </year>
Reference-contexts: Silent steps have been a cornerstone of CCS since its introduction. Milner used weak bisimulation to model processes with silent step. Van Glabbeek and Weijland <ref> [15] </ref> introduced branching bisimulation which also deals with silent step, but is slightly less abstract. This will allow a notion of abstraction. We mention that [18] has extended ACP ae , the real time ACP of [1], with silent steps. <p> An immediate deadlock term can only be related to another immediate deadlock term. As a consequence, we can have no term that is related to p . This is different from the usual definition of branching bisimulation of <ref> [7, 15] </ref>. In order to emphasize this fact, we call the relations to be defined branching tail bisimulations. <p> Actually, we gave the definition of semi-branching bisimulation here, as optimized in [8]. The present definition is shorter and easier to work with than the original definition in <ref> [15] </ref>, and induces the same equivalence relation (see [8]). <p> If we reduce the initial algebra of BPA drt o by reducing the signature by omitting ffi, ats.a/ (for a 2 A offi ), oe rel , rel , oe fl rel , and interpret a by cts.a/, we do not obtain BPA o ffi of <ref> [7, 15] </ref>. The first branching law x o D x will not hold, but instead x o y D x y. We can nevertheless obtain BPA o ffi as an SRM specification as follows. <p> cts.a/ term..g/ s / otherwise; term g .r oe ! s/ D oe rel .term..g/ s //: Theorem 3.3.9 (Isomorphy) T .BPA drt o /=$ and G=$ are isomorphic. 3.4 Alternative characterization of the bisimulations We proceed to find formulations for our bisimulation relations in terms of colourings, analogous to <ref> [15] </ref>. Let C be a given set, the set of colours. A coloured graph is a process graph with colours C 2 C as labels attached at the nodes. <p> Two process graphs g and h are concrete coloured trace equivalent, notation g j cc h, if, for some concrete consistent colouring on fg; hg, they have the same concrete coloured trace set, or equivalently, the root nodes have the same colour. As in <ref> [15] </ref>, we have the following theorem. Theorem 3.4.1 For process graphs g; h 2 G, we have g$h iff g j cc h. <p> As a consequence we have that a process graph g is graph isomorphic with the graph consisting of the edges and nodes of g that are reachable from the root node of g. As in <ref> [15] </ref> we have the following Normal Form Theorem. Theorem 3.4.6 (Normal form theorem) Let g and h be root unwound process graphs that are in normal form. <p> Theorem 3.4.6 (Normal form theorem) Let g and h be root unwound process graphs that are in normal form. Then g$ rbt h if and only if g ' h. 4 Completeness of the Axiomatization 4.1 Introduction In this section we will prove, following the approach of <ref> [15] </ref>, that BPA drt o is a complete axiomatization of rooted branching tail bisimulation on process graphs from G C .
Reference: [16] <author> J. F. Groote. </author> <title> Specification and verification of real time systems in ACP. </title> <editor> In L. Logrippo, R. L. Probert, and H. Ural, editors, </editor> <title> Protocol Specification, Testing and Verification, </title> <booktitle> volume 10 of Proc. IFIP WG 6.1 Tenth International Symposium, </booktitle> <pages> pages 261-274, </pages> <address> Ottawa, 1990. </address> <publisher> North-Holland. </publisher>
Reference-contexts: This line has been followed in ATP [22], a process algebra that adds time slicing to a version of ACP based on action prefixing rather than sequential composition. Further, <ref> [16] </ref> has extended ACP with time slices whereas [21] have added these features to CCS. Following [2, 6], we use the phrase discrete time process algebra if an enumeration of time slices is used.
Reference: [17] <author> M. Hennessy and T. Regan. </author> <title> A temporal process algebra. </title> <type> Technical Report 2/90, </type> <institution> University of Sussex, </institution> <year> 1990. </year>
Reference-contexts: Thus, the cts.a/ can be called non-delayable actions: the action must occur before the next clock tick. The operators are alternative and sequential composition, and the relative discrete time unit delay oe rel (the notation oe taken from <ref> [17] </ref>). The process oe rel .x / will start x after one clock tick, i.e., in the next time slice. In addition, we add the auxiliary operator rel .
Reference: [18] <author> A. S. Klusener. </author> <title> Models and Axioms for a Fragment of Real Time Process Algebra. </title> <type> PhD thesis, </type> <institution> Eind-hoven University of Technology, </institution> <year> 1993. </year>
Reference-contexts: Milner used weak bisimulation to model processes with silent step. Van Glabbeek and Weijland [15] introduced branching bisimulation which also deals with silent step, but is slightly less abstract. This will allow a notion of abstraction. We mention that <ref> [18] </ref> has extended ACP ae , the real time ACP of [1], with silent steps. <p> Using the embedding of discrete time process algebra into real time process algebra given in [2, 6] we find that our notion of silent step in time is in line with the notion of timed branching bisimulation of <ref> [18] </ref>.
Reference: [19] <author> R. Milner. </author> <title> A Calculus of Communicating Systems, </title> <booktitle> volume 92 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1980. </year>
Reference-contexts: 1 Introduction Process algebra was introduced by Milner in the form of CCS <ref> [19] </ref>. The original design of CCS and of subsequent versions of process algebra such as ACP [10] and TCSP [14] involves no explicit notion of time. Time is present in the interpretation of sequential composition: in p q (ACP notation) the process p should be executed before q.
Reference: [20] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice Hall International, </publisher> <year> 1989. </year>
Reference: [21] <author> F. Moller and C. Tofts. </author> <title> A temporal calculus of communicating systems. </title> <editor> In J. C. M. Baeten and J. W. Klop, editors, </editor> <title> CONCUR'90 Theories of Concurrency: Unification and Extension, </title> <booktitle> volume 458 of Lecture Notes in Computer Science, </booktitle> <pages> pages 401-415, </pages> <address> Amsterdam, 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Process algebras can be introduced that support standardized features to incorporate a quantitative view on time. Time may be represented by means of non-negative reals, and actions can be given time stamps. This line is followed in [1] for ACP, in <ref> [21] </ref> for CCS and in [23] for CSP. <p> This line has been followed in ATP [22], a process algebra that adds time slicing to a version of ACP based on action prefixing rather than sequential composition. Further, [16] has extended ACP with time slices whereas <ref> [21] </ref> have added these features to CCS. Following [2, 6], we use the phrase discrete time process algebra if an enumeration of time slices is used.
Reference: [22] <author> X. Nicollin and J. Sifakis. </author> <title> The algebra of timed processes, ATP: Theory and application. </title> <journal> Information and Computation, </journal> <volume> 114(1) </volume> <pages> 131-178, </pages> <year> 1994. </year>
Reference-contexts: This line has been followed in ATP <ref> [22] </ref>, a process algebra that adds time slicing to a version of ACP based on action prefixing rather than sequential composition. Further, [16] has extended ACP with time slices whereas [21] have added these features to CCS. <p> The defining axiom for this operator takes the form of a recursive equation (see axiom DRTI1, Discrete Relative Time Iteration, in Table 1). The presentation using the time iteration operator here differs slightly from the presentation in [6]. There, we used the unbounded start delay operator bc ! of <ref> [22] </ref> instead; the unbounded start delay operator can be simply expressed in terms of the time iteration operator as follows: bx c ! D oe fl rel . rel .x //.
Reference: [23] <author> G. M. Reed and A. W. Roscoe. </author> <title> A timed model for communicating sequential processes. </title> <journal> Theoretical Computer Science, </journal> <volume> 58 </volume> <pages> 249-261, </pages> <year> 1988. </year>
Reference-contexts: Process algebras can be introduced that support standardized features to incorporate a quantitative view on time. Time may be represented by means of non-negative reals, and actions can be given time stamps. This line is followed in [1] for ACP, in [21] for CCS and in <ref> [23] </ref> for CSP. A second option is to divide time in slices indexed by natural numbers, to have an implicit or explicit time stamping mechanism that determines for each action the time slice in which it occurs and to have a time order within each slice only.
Reference: [24] <author> M. A. Reniers and J. J. Vereijken. </author> <title> Completeness in discrete-time process algebra. </title> <type> Technical Report CSR 96/15, </type> <institution> Eindhoven University of Technology, Department of Computing Science, </institution> <year> 1996. </year>
Reference-contexts: We write A o D A [ fo g; A ffi D A [ fffig, etc. The axioms DRT3 and DRT5 are derivable from the other axioms (see <ref> [24] </ref>). Note that x C cts.ffi/ D x for all closed terms x except those that are derivably equal to ffi (see Proposition 2.1.7), which implies that in a theory without immediate deadlock the law x C cts.ffi/ D x will hold. <p> We state that strong tail bisimulation is a congruence with respect to the operators from the algebra BPA drt . Following <ref> [24] </ref> we can prove that BPA drt is a sound and complete axiomatization of the model of closed process expressions modulo strong tail bisimulation equivalence. Now, we want to define a notion of bisimulation that takes into account the special status of the immediate deadlock and the silent step. <p> tf .x / ! oe x ! x 0 ; tf .x 0 / ! x 00 a x ! x 0 ; tf .x 0 / ! tf .x / ! Table 7: Operational rules for time abstraction (a 2 A o ). some minor mistakes are corrected (see <ref> [24] </ref>). The additional syntax has binary operators k (merge), k (left merge), and j (communication merge) and unary operators @ H (encapsulation, for H A), and o I (abstraction, for I A). We present axioms for ACP drt o in Table 8 and Table 9.
Reference: [25] <author> C. Verhoef. </author> <title> A congruence theorem for structured operational semantics with predicates and negative premises. </title> <journal> Nordic Journal of Computing, </journal> <volume> 2(2) </volume> <pages> 274-302, </pages> <year> 1995. </year> <month> 25 </month>
Reference-contexts: The operational semantics in Table 3 uses predicates and negative premises. Still, using terminology and results of <ref> [25] </ref>, the rules satisfy the panth format, and determine a unique transition relation on closed process expressions. <p> This notion is called strong tail bisimulation in this paper. In the terminology of <ref> [25] </ref> this notion of strong tail bisimulation would be called a bisimulation anyway.
References-found: 25

