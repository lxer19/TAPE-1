URL: http://www.iiia.csic.es/~marco/pub/IIIA-96-15.ps.gz
Refering-URL: http://www.iiia.csic.es/Reports/1996/IIIA-RR-96.html
Root-URL: 
Email: marco@iiia.csic.es  
Title: Bi-rewriting Rewriting Logic  
Author: W. Marco Schorlemmer 
Address: Campus UAB, E-08193 Bellaterra, Catalunya  
Affiliation: Institut d'Investigacio en Intelligencia Artificial Consell Superior d'Investigacions Cientfiques  
Abstract: Rewriting logic appears to have good properties as logical framework, and can be useful for the development of programming languages which attempt to integrate various paradigms of declarative programming. In this paper I propose to tend towards the operational semantics for such languages by basing it on bi-rewrite systems and ordered chaining calculi which apply rewrite techniques to first-order theories with arbitrary possibly non-symmetric transitive relations, because this was an important breakthrough for the automation of deduction in these kind of theories. I show that a proof calculus based on the bi-rewriting technique may serve as framework of different proof calculi, by analizing those of equational logic and Horn logic, and presenting them as specific cases of bi-rewrite systems. Deduction is then essentially bi-rewriting a theory of rewriting logic. Since recently the interest in specifications based on theories with transitive relations has arisen, the result of this research towards a general framework for bi- rewriting based operational semantics of several programming paradigms will also be very useful for the development of rapid prototyping tools for these kind of specifications.
Abstract-found: 1
Intro-found: 1
Reference: [At-Kaci and Podelski, 1993] <author> At-Kaci, H. and Podelski, A. </author> <year> (1993). </year> <title> Towards a meaning of LIFE. </title> <journal> Journal of Logic Programming, </journal> <volume> 16 </volume> <pages> 195-234. </pages>
Reference-contexts: Besides these general specification frameworks, partial orders also play a central role in a variety of much more concrete logic programming languages. For example, At-Kaci and Podelski make use of order-sorted feature terms as basic data structure of the programming language LIFE <ref> [At-Kaci and Podelski, 1993] </ref>, generalizing in this way the flat first-order terms normally used as unique data structure in logic programming.
Reference: [Bachmair et al., 1986] <author> Bachmair, L., Dershowitz, N., and Hsiang, J. </author> <year> (1986). </year> <title> Orderings for equa-tional proofs. </title> <booktitle> In Symposium of Logic in Computer Science, </booktitle> <pages> pages 346-357. </pages>
Reference-contexts: Notice that the number of critical 5 For the sake of simplicity I present Levy and Agust's results for the case where no structural axioms are considered, i.e. A = ;. 6 Variable instance pairs also appear in the context of rewriting modulo a congruence <ref> [Bachmair et al., 1986] </ref>. 5 pairs among rewrite rules of sets R ) and R ( is always finite.
Reference: [Bachmair et al., 1989] <author> Bachmair, L., Dershowitz, N., and Plaisted, D. A. </author> <year> (1989). </year> <title> Completion without failure. In Resolution of Equations in Algebraic Structures, volume 2. </title> <publisher> Academic Press. </publisher>
Reference-contexts: to bi-rewrite systems [Levy and Agust, 1996]. 3.2 Ordered chaining During the last decade and the beginning of the present it has been shown that the process of completion of rewrite systems can be seen as a process of refutation in the context of resolution- based theorem proving [Huet, 1981] <ref> [Bachmair et al., 1989] </ref>. The principle of refutation by means of resolution is the core of the operational semantics of the logic programming paradigm [Lloyd, 1984].
Reference: [Bachmair and Ganzinger, 1994a] <author> Bachmair, L. and Ganzinger, H. </author> <year> (1994a). </year> <title> Ordered chaining for total orderings. </title> <editor> In Bundy, A., editor, </editor> <booktitle> Automated Deduction | CADE'12, volume 814 of LNAI, </booktitle> <pages> pages 435-450. </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: But by restricting these calculi to special theories, or by limiting the kind of axioms we use, it is possible to provide rewriting logic with interesting subcalculi. It is known, e.g. that in dense total orderings without endpoints, variable chaining can be avoided completely <ref> [Bachmair and Ganzinger, 1994a] </ref>.
Reference: [Bachmair and Ganzinger, 1994b] <author> Bachmair, L. and Ganzinger, H. </author> <year> (1994b). </year> <title> Rewrite-based equa-tional theorem proving with selection and simplification. </title> <journal> Journal of Logic and Computation, </journal> <volume> 4(3) </volume> <pages> 1-31. </pages>
Reference-contexts: This was an important breakthrough in automated deduction with arbitrary transitive relations: Bachmair and Ganzinger based on Levy and Agust's work their generalization from superposition calculi for full first-order theories with equality fl Supported by project DISCOR (TIC 94-0847-C02-01) funded by the CICYT 1 <ref> [Bachmair and Ganzinger, 1994b] </ref> to ordered chaining calculi for theories with arbitrary transitive relations, besides equality [Bachmair and Ganzinger, 1994c]. Actually their calculi apply rewrite techniques (i.e. the use of ordering restrictions on terms and atoms involved in inferences) to the original chaining inference first stated by Slagle [Slagle, 1972]. <p> The principle of refutation by means of resolution is the core of the operational semantics of the logic programming paradigm [Lloyd, 1984]. Completion as a refutation process was later generalized for full first-order theories with equality [Hsiang and Rusinowitch, 1991] <ref> [Bachmair and Ganzinger, 1994b] </ref> and has been further improved [Nieuwenhuis and Rubio, 1992] [Bachmair et al., 1992].
Reference: [Bachmair and Ganzinger, 1994c] <author> Bachmair, L. and Ganzinger, H. </author> <year> (1994c). </year> <title> Rewrite techniques for transitive relations. </title> <booktitle> In Proc., Ninth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 384-393. 13 </pages>
Reference-contexts: transitive relations: Bachmair and Ganzinger based on Levy and Agust's work their generalization from superposition calculi for full first-order theories with equality fl Supported by project DISCOR (TIC 94-0847-C02-01) funded by the CICYT 1 [Bachmair and Ganzinger, 1994b] to ordered chaining calculi for theories with arbitrary transitive relations, besides equality <ref> [Bachmair and Ganzinger, 1994c] </ref>. Actually their calculi apply rewrite techniques (i.e. the use of ordering restrictions on terms and atoms involved in inferences) to the original chaining inference first stated by Slagle [Slagle, 1972]. <p> This generalization is also applicable to completion of bi-rewrite systems, and consequently we can prove theorems of a theory in rewriting logic applying a process of refutation captured by the ordered chaining calculus <ref> [Bachmair and Ganzinger, 1994c] </ref>. It is based on the ordered chaining inference rule between two clauses and in essence generalizes the critical pair and variable instance pair computation during completion of bi-rewrite systems. <p> transitive relations is formed of the ordered chaining inference rule together with several other inference rules |negative chaining, ordered resolution, ordered factoring and transitivity resolution|, which also put ordering restriction on the terms and atoms participating in the inference, in order to prune the search space to be explored (see <ref> [Bachmair and Ganzinger, 1994c] </ref> for further details). <p> This inference step is actually a negative chaining step (see <ref> [Bachmair and Ganzinger, 1994c] </ref>). <p> All other leafs are sentences of the rewrite theory. Inference steps are labeled with (OC) if it is a ordered chaining step, with (NC) if it is a negative chaining step and with (OR) if it is a ordered resolution step (see <ref> [Bachmair and Ganzinger, 1994c] </ref> for further details). Bold faced terms are the ones who are unified (i.e. chained through).
Reference: [Bachmair et al., 1992] <author> Bachmair, L., Ganzinger, H., Lynch, C., and Snyder, W. </author> <year> (1992). </year> <title> Basic paramodulation and superposition. </title> <editor> In Kapur, D., editor, </editor> <booktitle> Automated Deduction | CADE-11, volume 607 of LNAI, </booktitle> <pages> pages 462-476. </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Completion as a refutation process was later generalized for full first-order theories with equality [Hsiang and Rusinowitch, 1991] [Bachmair and Ganzinger, 1994b] and has been further improved [Nieuwenhuis and Rubio, 1992] <ref> [Bachmair et al., 1992] </ref>. This generalization is also applicable to completion of bi-rewrite systems, and consequently we can prove theorems of a theory in rewriting logic applying a process of refutation captured by the ordered chaining calculus [Bachmair and Ganzinger, 1994c].
Reference: [Birkhoff, 1935] <author> Birkhoff, G. </author> <year> (1935). </year> <title> On the structure of abstract algebras. </title> <journal> Proc. Cambridge Philos. Soc., </journal> <volume> 31 </volume> <pages> 433-454. </pages>
Reference-contexts: Proof terms are built by the deduction rules defining the entailment relation of rewriting logic given in Figure 1 modulo those equations on proof terms, which identify equivalent proofs. Such a proof calculus is based on the following variant of Birkhoff's theorem <ref> [Birkhoff, 1935] </ref> for the non-symmetric relation `)' of rewriting logic: Lemma 3.1 Given a rewrite theory R, if `! R ' denotes the reachability relation induced by the rules of R, then R ` RW L [s] ) [t] if and only if [s] ! R [t].
Reference: [Dershowitz, 1987] <author> Dershowitz, N. </author> <year> (1987). </year> <title> Termination of rewriting. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 3 </volume> <pages> 69-116. </pages>
Reference-contexts: An example of path ordering is the lexicographic path ordering. For a complete survey on termination orderings we refer to <ref> [Dershowitz, 1987] </ref>. 3 Proof Calculi for Rewriting Logic A straightforward proof calculus for rewriting logic is defined by the category with equivalent classes of terms as objects and proof terms as morphisms [Mart-Oliet and Meseguer, 1993].
Reference: [Dershowitz and Jouannaud, 1990] <author> Dershowitz, N. and Jouannaud, J.-P. </author> <year> (1990). </year> <title> Rewrite systems. </title> <editor> In van Leeuwen, J., editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B. </booktitle> <publisher> Elsevier Science Publishers. </publisher>
Reference-contexts: 1 Introduction Term rewriting has been mainly used as a technique for the deduction in equational theories, and was studied thoroughly in the context of rewrite systems <ref> [Dershowitz and Jouannaud, 1990] </ref> [Plaisted, 1993] [Klop, 1992]. But recently it has been noticed that, since rewriting is done only in one direction, it is not limited to equivalence relations, but also applicable on arbitrary transitive relations. <p> Overlaps on variable positions and the functional reflexive axioms are not needed: All those overlaps are convergent, because rewrite rules appear in both rewrite systems (see [Schorlemmer and Agust, 1995]). If the set of equations E is Church-Rosser (in the `traditional' sense of equational rewrite systems, for instance see <ref> [Dershowitz and Jouannaud, 1990] </ref>), the bi- rewrite system hR ) ; R ( i obtained from set of rules R in which E is mapped to is also Church- Rosser (in the sense of Theorem 3.5), as well as each of both rewrite systems R ) and R ( (again in
Reference: [Freese et al., 1993] <author> Freese, R., Jezek, J., and Nation, J. </author> <year> (1993). </year> <title> Term rewrite systems for lattice theory. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 16 </volume> <pages> 279-288. </pages>
Reference-contexts: Furthermore completion of the inclusional theory of lattices to a finite and convergent bi-rewrite system is possible [Levy, 1994] (though no finite term rewrite system for the equational theory of lattices exists <ref> [Freese et al., 1993] </ref>) and this fact suggests to consider the properties of specific algebraic structures for improving deduction in rewriting logic. 4 A Framework for Proof Calculi In this section I present the idea that a proof calculus based on the bi-rewriting technique may serve as framework of different proof
Reference: [Ganzinger et al., 1995] <author> Ganzinger, H., Nieuwenhuis, R., and Nivela, P. </author> <year> (1995). </year> <note> The Saturate system. http://www.mpi-sb.mpg.de/SATURATE/Saturate.html. </note>
Reference-contexts: Furthermore, these restrictions act upon the drawbacks I just mentioned in Section 3.3. 8 In spite of these general drawbacks, there exists an implementation in Prolog of a theorem prover based on ordered chaining, called Saturate [Nivela and Nieuwenhuis, 1993] <ref> [Ganzinger et al., 1995] </ref>, for which currently better implementation techniques are studied [Nieuwenhuis et al., 1996]. 7 4.1 Bi-rewriting equational logic An equational theory E can be described as a triple (F; A; E), where (F; A) is a signature consisting of a set F of function symbols and a set
Reference: [Gonzalez-Moreno et al., 1996] <author> Gonzalez-Moreno, J. C., Hortala-Gonzalez, T., Lopez-Fraguas, F., and Rodrguez-Artalejo, M. </author> <year> (1996). </year> <title> A rewriting logic for declarative programming. </title> <editor> In Nielson, H. R., editor, </editor> <booktitle> Programming Languages and Systems | ESOP '96, </booktitle> <publisher> LNCS 1058. Springer-Verlag. </publisher>
Reference-contexts: Another recent approach for integrating functional and logic programming, based on rewriting logic, takes possibly non-deterministic lazy functions as the fundamental notion <ref> [Gonzalez-Moreno et al., 1996] </ref>. In order to deal in practice with such multi-paradigm languages like e.g. Maude it is necessary to provide them with an efficient operational semantics.
Reference: [Hsiang and Rusinowitch, 1991] <author> Hsiang, J. and Rusinowitch, M. </author> <year> (1991). </year> <title> Proving refutational com-pleteness of theorem proving strategies: The transfinite semantic tree method. </title> <journal> Journal of the ACM, </journal> <volume> 38(3) </volume> <pages> 559-587. </pages>
Reference-contexts: The principle of refutation by means of resolution is the core of the operational semantics of the logic programming paradigm [Lloyd, 1984]. Completion as a refutation process was later generalized for full first-order theories with equality <ref> [Hsiang and Rusinowitch, 1991] </ref> [Bachmair and Ganzinger, 1994b] and has been further improved [Nieuwenhuis and Rubio, 1992] [Bachmair et al., 1992].
Reference: [Huet, 1981] <author> Huet, G. </author> <year> (1981). </year> <title> A complete proof of correctness of the Knuth-Bendix completion algorithm. </title> <journal> Journal of Computation and System Sciences, </journal> <volume> 23 </volume> <pages> 11-21. </pages>
Reference-contexts: also generalized to bi-rewrite systems [Levy and Agust, 1996]. 3.2 Ordered chaining During the last decade and the beginning of the present it has been shown that the process of completion of rewrite systems can be seen as a process of refutation in the context of resolution- based theorem proving <ref> [Huet, 1981] </ref> [Bachmair et al., 1989]. The principle of refutation by means of resolution is the core of the operational semantics of the logic programming paradigm [Lloyd, 1984].
Reference: [Hullot, 1980] <author> Hullot, J. M. </author> <year> (1980). </year> <title> Canonical forms and unification. </title> <booktitle> In Proc. 4th International Conference on Automated Deduction, </booktitle> <publisher> LNCS 87. </publisher>
Reference-contexts: tom bob ann true, we get the following bi-rewrite system: R ) = &gt; &lt; par (ann; bob) ! true par (bob; tom) ! true anc (x; y) ! par (x; y) n ( 11 Narrowing was originally devised as an efficient E-unification procedure using convergent sets of rewrite rules <ref> [Hullot, 1980] </ref>. 10 anc (x; y) ) par (x; z) ^ anc (z,y) anc (x',y') ) par (x 0 ; y 0 ) anc (x; y) ) par (x,z) ^ par (z; y) par (ann,bob) ) true anc (ann; y) ) true ^ par (bob; y) par (bob; tom) 6) true
Reference: [Jayaraman et al., 1995] <author> Jayaraman, B., Osorio, M., and Moon, K. </author> <year> (1995). </year> <title> Partial order program-ming (revisited). </title> <booktitle> In Proc. Algebraic Methodology and Software Technology (AMAST), </booktitle> <pages> pages 561-575. </pages>
Reference-contexts: Also Jayaraman, Osorio and Moon base their partial order programming paradigm on a lattice structure, and are specially interested on the complete lattice of finite sets <ref> [Jayaraman et al., 1995] </ref>. In their paradigm they pursue the aim to integrate sets into logic programming, and to consider them as basic data structure on which the paradigm relies. But in this framework no deduction mechanisms are given to validate order related functional expressions.
Reference: [Jouannaud and Kirchner, 1986] <author> Jouannaud, J.-P. and Kirchner, H. </author> <year> (1986). </year> <title> Completion of a set of rules modulo a set of equations. </title> <journal> SIAM Journal of Computing, </journal> <volume> 15 </volume> <pages> 1155-1194. </pages>
Reference-contexts: We know from the completion of equational theories, that the process may fail to orient a critical pair with the given reduction ordering. There have been various variants of completion to overcome this situation [Lankford and Ballantyne, 1977] [Peterson and Stickel, 1981] <ref> [Jouannaud and Kirchner, 1986] </ref>, which have been also generalized to bi-rewrite systems [Levy and Agust, 1996]. 3.2 Ordered chaining During the last decade and the beginning of the present it has been shown that the process of completion of rewrite systems can be seen as a process of refutation in the
Reference: [Kirchner et al., 1995] <author> Kirchner, C., Kirchner, H., and Vittek, M. </author> <year> (1995). </year> <title> Designing constraint logic programming languages using computational systems. </title> <editor> In van Hentenryck, P. and Saraswat, S., editors, </editor> <booktitle> Principles and Practice of Constraint Programming. </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: This is the approach followed by C. Kirchner, H. Kirchner and Vittek in <ref> [Kirchner et al., 1995] </ref>, who also studied the map of proofs in Horn theories to proofs in rewrite theories. They map Horn clauses to narrowing rules, and the proof-theoretic structure of Horn logic, based on SLD-resolution, is therefore captured by the straightforward application of the deduction rules of rewriting logic.
Reference: [Klop, 1992] <author> Klop, J. W. </author> <year> (1992). </year> <title> Term rewriting systems. </title> <editor> In Abramsky, S., Gabbay, D. M., and Maibaum, T. S. E., editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume 2, </volume> <pages> pages 1-116. </pages> <publisher> Oxford University Press. </publisher>
Reference-contexts: 1 Introduction Term rewriting has been mainly used as a technique for the deduction in equational theories, and was studied thoroughly in the context of rewrite systems [Dershowitz and Jouannaud, 1990] [Plaisted, 1993] <ref> [Klop, 1992] </ref>. But recently it has been noticed that, since rewriting is done only in one direction, it is not limited to equivalence relations, but also applicable on arbitrary transitive relations. Indeed, Meseguer showed that the implicit logic underlying rewrite systems is not equational logic, but rewriting logic [Meseguer, 1992].
Reference: [Knuth and Bendix, 1970] <author> Knuth, D. E. and Bendix, P. B. </author> <year> (1970). </year> <title> Simple word problems in uni-versal algebras. </title> <editor> In Leech, J., editor, </editor> <booktitle> Computational Problems in Abstract Algebra, </booktitle> <pages> pages 263-297. </pages> <publisher> Pergamon Press. </publisher> <pages> 14 </pages>
Reference-contexts: But, like in the equational case, there exist necessary and sufficient conditions for a terminating bi-rewrite system to be Church-Rosser, which were stated by Levy and Agust adapting the original results of <ref> [Knuth and Bendix, 1970] </ref>.
Reference: [Lankford and Ballantyne, 1977] <author> Lankford, D. S. and Ballantyne, A. </author> <year> (1977). </year> <title> Decision procedures for simple equational theories with permutative axioms: Complete sets of permutative reductions. </title> <type> Technical Report ATP-37, </type> <institution> Department of Mathematics and Computer Science, University of Texas. </institution>
Reference-contexts: We know from the completion of equational theories, that the process may fail to orient a critical pair with the given reduction ordering. There have been various variants of completion to overcome this situation <ref> [Lankford and Ballantyne, 1977] </ref> [Peterson and Stickel, 1981] [Jouannaud and Kirchner, 1986], which have been also generalized to bi-rewrite systems [Levy and Agust, 1996]. 3.2 Ordered chaining During the last decade and the beginning of the present it has been shown that the process of completion of rewrite systems can be
Reference: [Lechner et al., 1995] <author> Lechner, U., Lengauer, C., and Wirsing, M. </author> <year> (1995). </year> <title> An object-oriented air-port: Specification and refinement in Maude. </title> <editor> In Astesiano, E., Reggio, G., and Tarlecki, A., editors, </editor> <title> Recent Trends in Data Types Specification, </title> <publisher> LNCS 906. Springer Verlag. </publisher>
Reference-contexts: Their approach showed to be useful for the preliminary specification and further stepwise refinement of complex systems [Robertson et al., 1994]. Rewriting logic itself and its embodiment in Maude has served as prototyping language for the specification of complex systems <ref> [Lechner et al., 1995] </ref>. Therefore the result of this research towards the design of a multi-paradigm programming language dealing with arbitrary transitive relations may also be very useful for developing rapid prototyping tools for these kind of specifications [Schorlemmer and Agust, 1996].
Reference: [Levy, 1994] <author> Levy, J. </author> <year> (1994). </year> <title> The Calculus of Refinements: a Formal Specification Model Based on Inclusions. </title> <type> PhD thesis, </type> <institution> Departament de Llenguatges i Sistemes Informatics, Universitat Politecnica de Catalunya. </institution>
Reference-contexts: It is known, e.g. that in dense total orderings without endpoints, variable chaining can be avoided completely [Bachmair and Ganzinger, 1994a]. Furthermore completion of the inclusional theory of lattices to a finite and convergent bi-rewrite system is possible <ref> [Levy, 1994] </ref> (though no finite term rewrite system for the equational theory of lattices exists [Freese et al., 1993]) and this fact suggests to consider the properties of specific algebraic structures for improving deduction in rewriting logic. 4 A Framework for Proof Calculi In this section I present the idea that <p> This framework is based on a partial order of a distributive lattice with a bottom. Similar intuitions were followed by Levy and Agust, who proposed the Calculus of Refinements <ref> [Levy, 1994] </ref>, a formal specification model based on inclusions. Their approach showed to be useful for the preliminary specification and further stepwise refinement of complex systems [Robertson et al., 1994].
Reference: [Levy and Agust, 1993] <author> Levy, J. and Agust, J. </author> <year> (1993). </year> <title> Bi-rewriting, a term rewriting technique for monotonic order relations. </title> <editor> In Kirchner, C., editor, </editor> <booktitle> Rewriting Techniques and Applications, </booktitle> <volume> LNCS 690, </volume> <pages> pages 17-31. </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Similar observation were made independently by Levy and Agust, as they studied mechanisms for automating the deduction in theories involving subset inclusions. They applied rewrite techniques to inclusional theories <ref> [Levy and Agust, 1993] </ref> and generalized the notions of Church-Rosser and termination of rewrite systems to the more general framework called bi- rewrite systems [Levy and Agust, 1996]. <p> rewrite rules of each rewrite system, exploring all possible paths, until a common equivalent class of terms is reached: 3 As pointed out in [Meseguer, 1992] equational logic is obtained from rewriting logic by adding the symmetry rule to its deduction rules. 4 To be rigorous we only need quasi-termination <ref> [Levy and Agust, 1993] </ref>, but for the sake of simplicity, in this case I require termination. 4 C C C C C @ @ @ @R C C C C C CW ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~9 ? . . . ) ) )
Reference: [Levy and Agust, 1996] <author> Levy, J. and Agust, J. </author> <year> (1996). </year> <note> Bi-rewrite systems. Journal of Symbolic Computation. To be published. </note>
Reference-contexts: They applied rewrite techniques to inclusional theories [Levy and Agust, 1993] and generalized the notions of Church-Rosser and termination of rewrite systems to the more general framework called bi- rewrite systems <ref> [Levy and Agust, 1996] </ref>. <p> There have been various variants of completion to overcome this situation [Lankford and Ballantyne, 1977] [Peterson and Stickel, 1981] [Jouannaud and Kirchner, 1986], which have been also generalized to bi-rewrite systems <ref> [Levy and Agust, 1996] </ref>. 3.2 Ordered chaining During the last decade and the beginning of the present it has been shown that the process of completion of rewrite systems can be seen as a process of refutation in the context of resolution- based theorem proving [Huet, 1981] [Bachmair et al., 1989].
Reference: [Lloyd, 1984] <author> Lloyd, J. W. </author> <year> (1984). </year> <title> Foundations of Logic Programming. </title> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The principle of refutation by means of resolution is the core of the operational semantics of the logic programming paradigm <ref> [Lloyd, 1984] </ref>. Completion as a refutation process was later generalized for full first-order theories with equality [Hsiang and Rusinowitch, 1991] [Bachmair and Ganzinger, 1994b] and has been further improved [Nieuwenhuis and Rubio, 1992] [Bachmair et al., 1992].
Reference: [Mart-Oliet and Meseguer, 1993] <author> Mart-Oliet, N. and Meseguer, J. </author> <year> (1993). </year> <title> Rewriting logic as log-ical and semantic framework. </title> <type> Technical Report SRI-CSL-93-05, </type> <institution> Computer Science Laboratory, SRI International. </institution>
Reference-contexts: Meseguer's rewriting logic appears to have good properties as logical framework, and, following its approach on `general logics' [Meseguer, 1989], different logics of interest have been mapped to it <ref> [Mart-Oliet and Meseguer, 1993] </ref>. Therefore a proof calculus for rewriting logic may be useful as framework for a variety of other proof calculi, which can also be mapped to it, specially if such a proof calculus is an effective and, even better, a very efficient one. <p> For a complete survey on termination orderings we refer to [Dershowitz, 1987]. 3 Proof Calculi for Rewriting Logic A straightforward proof calculus for rewriting logic is defined by the category with equivalent classes of terms as objects and proof terms as morphisms <ref> [Mart-Oliet and Meseguer, 1993] </ref>. Proof terms are built by the deduction rules defining the entailment relation of rewriting logic given in Figure 1 modulo those equations on proof terms, which identify equivalent proofs. <p> I will sketch this on two very intuitive and well-known logics, following the approach in <ref> [Mart-Oliet and Meseguer, 1993] </ref>, mapping them to rewriting logic. I am going to present the proof calculi of equational logic and Horn clause logic, from the perspective of bi-rewriting.
Reference: [Mart-Oliet and Meseguer, 1994] <author> Mart-Oliet, N. and Meseguer, J. </author> <year> (1994). </year> <title> General logics and log-ical frameworks. </title> <editor> In Gabbay, D. M., editor, </editor> <booktitle> What is a Logical System?, </booktitle> <pages> pages 355-391. </pages> <publisher> Clarendon Press. </publisher>
Reference-contexts: in this direction is to study the results about termination of Horn clause programs from this point of view, and to reformulate the conditions of termination as restrictions on proof calculi of rewriting logic. 5 Towards a Framework for the Operational Semantics of Logic Programs Mart-Oliet and Meseguer conjecture in <ref> [Mart-Oliet and Meseguer, 1994] </ref>, that rewriting logic can be useful as logical framework, at least for those logics we can consider of `practical interest', and whose proof calculi correspond to the operational semantics of programming languages based on these logics.
Reference: [Meseguer, 1989] <author> Meseguer, J. </author> <year> (1989). </year> <title> General logics. </title> <editor> In Ebbinghaus, H. D. et al., editors, </editor> <booktitle> Logic Colloquium '87, </booktitle> <pages> pages 275-329. </pages> <publisher> Elsevier Science Publishers. </publisher>
Reference-contexts: Actually their calculi apply rewrite techniques (i.e. the use of ordering restrictions on terms and atoms involved in inferences) to the original chaining inference first stated by Slagle [Slagle, 1972]. Meseguer's rewriting logic appears to have good properties as logical framework, and, following its approach on `general logics' <ref> [Meseguer, 1989] </ref>, different logics of interest have been mapped to it [Mart-Oliet and Meseguer, 1993].
Reference: [Meseguer, 1992] <author> Meseguer, J. </author> <year> (1992). </year> <title> Conditional rewriting logic as a unified model of concurrency. </title> <journal> Journal of Theoretical Computer Science, </journal> <volume> 96 </volume> <pages> 73-155. </pages>
Reference-contexts: But recently it has been noticed that, since rewriting is done only in one direction, it is not limited to equivalence relations, but also applicable on arbitrary transitive relations. Indeed, Meseguer showed that the implicit logic underlying rewrite systems is not equational logic, but rewriting logic <ref> [Meseguer, 1992] </ref>. Meseguer put the strength of his research in developing a strong mathematical semantics of rewriting logic by formulating it as a logic of action and concurrent change. <p> The entailment of sentences [s] ) [t] from a rewrite theory R, denoted R ` RW L [s] ) [t] is defined by the set of deduction rules given in Figure 1. A rewrite theory R induces the reachability 1 Actually sentences of rewriting logic are conditional rules <ref> [Meseguer, 1992] </ref>, but here I will only consider uncon <br>- ditional ones. 2 Reflexivity: [t] ) [t] Congruence: For each f 2 F , [s 1 ] ) [t 1 ] [s n ] ) [t n ] Replacement: For each rule [s] ) [t] 2 R, [u 1 ] ) <p> the word problem in convergent bi-rewrite systems is then straightforward: To check if R ` RW L [s] ) [t] we reduce [s] and [t] applying rewrite rules of each rewrite system, exploring all possible paths, until a common equivalent class of terms is reached: 3 As pointed out in <ref> [Meseguer, 1992] </ref> equational logic is obtained from rewriting logic by adding the symmetry rule to its deduction rules. 4 To be rigorous we only need quasi-termination [Levy and Agust, 1993], but for the sake of simplicity, in this case I require termination. 4 C C C C C @ @ @
Reference: [Meseguer, 1993] <author> Meseguer, J. </author> <year> (1993). </year> <title> A logical theory of concurrent objects and its realization in the Maude language. </title> <editor> In Agha, G. et al., editors, </editor> <booktitle> Research Directions in Concurrent ObjectOriented Programming, </booktitle> <pages> pages 315-390. </pages> <publisher> MIT Press. </publisher>
Reference-contexts: That's why rewriting logic serves as basis for the development of programming languages like Maude <ref> [Meseguer, 1993] </ref>, which attempt to unify the paradigms of functional, relational and concurrent object-oriented programming. <p> systems can be `simplified' to standard rewrite systems, as we are familiar, as for instance the following equational term rewrite system for the equational theory of Example 4.1: R 0 = x + 0 ! x = Such rewrite systems correspond, for example, to the semantics of Maude's functional modules <ref> [Meseguer, 1993] </ref>. Overlaps on variable positions and the functional reflexive axioms are not needed: All those overlaps are convergent, because rewrite rules appear in both rewrite systems (see [Schorlemmer and Agust, 1995]).
Reference: [Mosses, 1989] <author> Mosses, P. </author> <year> (1989). </year> <title> Unified algebras and institutions. </title> <booktitle> In Principles of Programming Languages Conference, </booktitle> <pages> pages 304-312. </pages> <publisher> ACM Press. </publisher>
Reference-contexts: Furthermore, recently the interest in specifications based on logics with transitive relations has arisen. Mosses introduced unified algebras <ref> [Mosses, 1989] </ref>, a framework for the algebraic specification of abstract data types, where sorts are treated as values, so that operations may be applied to sorts as well as to the elements that they classify. This framework is based on a partial order of a distributive lattice with a bottom.
Reference: [Nieuwenhuis et al., 1996] <author> Nieuwenhuis, R., Rivero, J. M., and Vallejo, M. A. </author> <year> (1996). </year> <title> An imple-mentation kernel for theorem proving with equality clauses. </title> <booktitle> In Proc. of the 1996 Joint Conference on Declarative Programming APPIA-GULP-PRODE'96, </booktitle> <pages> pages 89-103. </pages>
Reference-contexts: restrictions act upon the drawbacks I just mentioned in Section 3.3. 8 In spite of these general drawbacks, there exists an implementation in Prolog of a theorem prover based on ordered chaining, called Saturate [Nivela and Nieuwenhuis, 1993] [Ganzinger et al., 1995], for which currently better implementation techniques are studied <ref> [Nieuwenhuis et al., 1996] </ref>. 7 4.1 Bi-rewriting equational logic An equational theory E can be described as a triple (F; A; E), where (F; A) is a signature consisting of a set F of function symbols and a set A of structural axioms (F -equations), and E is a set of
Reference: [Nieuwenhuis and Rubio, 1992] <author> Nieuwenhuis, R. and Rubio, A. </author> <year> (1992). </year> <title> Basic superposition is com-plete. </title> <booktitle> In European Symposium on Programming. </booktitle>
Reference-contexts: The principle of refutation by means of resolution is the core of the operational semantics of the logic programming paradigm [Lloyd, 1984]. Completion as a refutation process was later generalized for full first-order theories with equality [Hsiang and Rusinowitch, 1991] [Bachmair and Ganzinger, 1994b] and has been further improved <ref> [Nieuwenhuis and Rubio, 1992] </ref> [Bachmair et al., 1992]. This generalization is also applicable to completion of bi-rewrite systems, and consequently we can prove theorems of a theory in rewriting logic applying a process of refutation captured by the ordered chaining calculus [Bachmair and Ganzinger, 1994c].
Reference: [Nivela and Nieuwenhuis, 1993] <author> Nivela, P. and Nieuwenhuis, R. </author> <year> (1993). </year> <title> Saturation of first-order (constrained) clauses with the Saturate system. </title> <editor> In Kirchner, C., editor, </editor> <booktitle> Rewriting Techniques and Applications, </booktitle> <volume> LNCS 690, </volume> <pages> pages 436-440. </pages> <publisher> Springer-Verlag. </publisher> <pages> 15 </pages>
Reference-contexts: Furthermore, these restrictions act upon the drawbacks I just mentioned in Section 3.3. 8 In spite of these general drawbacks, there exists an implementation in Prolog of a theorem prover based on ordered chaining, called Saturate <ref> [Nivela and Nieuwenhuis, 1993] </ref> [Ganzinger et al., 1995], for which currently better implementation techniques are studied [Nieuwenhuis et al., 1996]. 7 4.1 Bi-rewriting equational logic An equational theory E can be described as a triple (F; A; E), where (F; A) is a signature consisting of a set F of function
Reference: [Parker, 1987] <author> Parker, D. S. </author> <year> (1987). </year> <title> Partial order programming. </title> <type> Unpublished monograph. </type>
Reference-contexts: It was Parker who also advocated programming on non-symmetric transitive relations like preorder or partial order relations for generalizing and subsequently combining several different programming paradigms, symbolic or numeric, like functional and logic programming among others <ref> [Parker, 1987] </ref> [Parker, 1989]. Another recent approach for integrating functional and logic programming, based on rewriting logic, takes possibly non-deterministic lazy functions as the fundamental notion [Gonzalez-Moreno et al., 1996]. In order to deal in practice with such multi-paradigm languages like e.g.
Reference: [Parker, 1989] <author> Parker, D. S. </author> <year> (1989). </year> <title> Partial order programming. </title> <booktitle> In POPL'89: 16th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 260-266. </pages> <publisher> ACM Press. </publisher>
Reference-contexts: It was Parker who also advocated programming on non-symmetric transitive relations like preorder or partial order relations for generalizing and subsequently combining several different programming paradigms, symbolic or numeric, like functional and logic programming among others [Parker, 1987] <ref> [Parker, 1989] </ref>. Another recent approach for integrating functional and logic programming, based on rewriting logic, takes possibly non-deterministic lazy functions as the fundamental notion [Gonzalez-Moreno et al., 1996]. In order to deal in practice with such multi-paradigm languages like e.g.
Reference: [Peterson and Stickel, 1981] <author> Peterson, G. E. and Stickel, M. E. </author> <year> (1981). </year> <title> Complete sets of reductions for some equational theories. </title> <journal> Journal of the ACM, </journal> <volume> 28(2) </volume> <pages> 233-264. </pages>
Reference-contexts: We know from the completion of equational theories, that the process may fail to orient a critical pair with the given reduction ordering. There have been various variants of completion to overcome this situation [Lankford and Ballantyne, 1977] <ref> [Peterson and Stickel, 1981] </ref> [Jouannaud and Kirchner, 1986], which have been also generalized to bi-rewrite systems [Levy and Agust, 1996]. 3.2 Ordered chaining During the last decade and the beginning of the present it has been shown that the process of completion of rewrite systems can be seen as a process
Reference: [Plaisted, 1993] <author> Plaisted, D. A. </author> <year> (1993). </year> <title> Equational reasoning and term rewriting systems. </title> <editor> In Gabbay, D. M., Hogger, C. J., and Robinson, J. A., editors, </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> volume 1, </volume> <pages> pages 273-364. </pages> <publisher> Oxford University Press. </publisher>
Reference-contexts: 1 Introduction Term rewriting has been mainly used as a technique for the deduction in equational theories, and was studied thoroughly in the context of rewrite systems [Dershowitz and Jouannaud, 1990] <ref> [Plaisted, 1993] </ref> [Klop, 1992]. But recently it has been noticed that, since rewriting is done only in one direction, it is not limited to equivalence relations, but also applicable on arbitrary transitive relations.
Reference: [Robertson et al., 1994] <author> Robertson, D., Agust, J., Hesketh, J., and Levy, J. </author> <year> (1994). </year> <title> Expressing program requirements using refinement lattices. </title> <journal> Fundamenta Informaticae, </journal> <volume> 21 </volume> <pages> 163-183. </pages>
Reference-contexts: Similar intuitions were followed by Levy and Agust, who proposed the Calculus of Refinements [Levy, 1994], a formal specification model based on inclusions. Their approach showed to be useful for the preliminary specification and further stepwise refinement of complex systems <ref> [Robertson et al., 1994] </ref>. Rewriting logic itself and its embodiment in Maude has served as prototyping language for the specification of complex systems [Lechner et al., 1995].
Reference: [Schorlemmer and Agust, 1995] <author> Schorlemmer, W. M. and Agust, J. </author> <year> (1995). </year> <title> Theorem proving with transitive relations from a practical point of view. </title> <note> Research Report IIIA 95/12, </note> <institution> Institut d'Investigacio en Intelligencia Artificial (CSIC). </institution>
Reference-contexts: But these calculi are still highly prolific in the general case <ref> [Schorlemmer and Agust, 1995] </ref>. <p> Overlaps on variable positions and the functional reflexive axioms are not needed: All those overlaps are convergent, because rewrite rules appear in both rewrite systems (see <ref> [Schorlemmer and Agust, 1995] </ref>).
Reference: [Schorlemmer and Agust, 1996] <author> Schorlemmer, W. M. and Agust, J. </author> <year> (1996). </year> <title> Inclusional theories in declarative programming. </title> <booktitle> In Proc. of the 1996 Joint Conference on Declarative Programming APPIA-GULP-PRODE'96, </booktitle> <pages> pages 167-178. </pages>
Reference-contexts: Therefore the result of this research towards the design of a multi-paradigm programming language dealing with arbitrary transitive relations may also be very useful for developing rapid prototyping tools for these kind of specifications <ref> [Schorlemmer and Agust, 1996] </ref>. Besides these general specification frameworks, partial orders also play a central role in a variety of much more concrete logic programming languages.
Reference: [Slagle, 1972] <author> Slagle, J. R. </author> <year> (1972). </year> <title> Automated theorem proving for theories with built-in theories including equality, partial orderings and sets. </title> <journal> Journal of the ACM, </journal> <volume> 19 </volume> <pages> 120-135. </pages>
Reference-contexts: Actually their calculi apply rewrite techniques (i.e. the use of ordering restrictions on terms and atoms involved in inferences) to the original chaining inference first stated by Slagle <ref> [Slagle, 1972] </ref>. Meseguer's rewriting logic appears to have good properties as logical framework, and, following its approach on `general logics' [Meseguer, 1989], different logics of interest have been mapped to it [Mart-Oliet and Meseguer, 1993].
Reference: [Viry, 1994] <author> Viry, P. </author> <year> (1994). </year> <title> Rewriting: An effective model of concurrency. </title> <editor> In Halatsis, C. et al., editors, </editor> <booktitle> PARLE '94, Proc. Sixth Int. Conf. on Parallel Architectures and Languages Europe, </booktitle> <volume> LNCS 817, </volume> <pages> pages 648-660. </pages> <publisher> Springer-Verlag. </publisher> <pages> 16 </pages>
Reference-contexts: As mentioned in Section 3.1 this has been thoroughly studied by the rewriting community, and their results can be applied also to bi-rewrite systems. This suggests that Patrick Viry's notion of coherence completion <ref> [Viry, 1994] </ref> for the implementation of rewriting in rewriting logic by using standard rewriting instead of rewriting modulo, should be also applicable to bi-rewrite systems. 8 Symmetry plays an important role, because when reasoning with equivalence relations, we can deal with the notion of equivalence class.
References-found: 45

