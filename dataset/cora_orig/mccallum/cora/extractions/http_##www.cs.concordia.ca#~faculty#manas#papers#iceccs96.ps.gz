URL: http://www.cs.concordia.ca/~faculty/manas/papers/iceccs96.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/manas/research/sel-pubs.html
Root-URL: http://www.cs.concordia.ca
Title: Resource Conscious Design of Distributed Real-Time Systems An End-to-End Approach  
Author: Manas Saksena 
Affiliation: Concordia University Seongsoo Hong Seoul National University  
Date: Oct. 1996  
Note: Proceedings, IEEE International Conference on Engineering of Complex Computer Systems,  
Abstract: In this paper, we present a resource conscious approach to designing distributed real-time systems. This work extends our original solution [6], which was limited to single processor systems. Starting from a given task graph, and a set of end-to-end constraints, we systematically generate task attributes (e.g., periods and deadlines) such that (i) the task set is schedulable, and (ii) the end-to-end constraints are satisfied. The methodology presented in this paper can be mostly automated, and provides useful feedback to a designer when it fails to find a solution. We expect that the techniques presented in this paper will help reduce the laborious process of designing a real-time system, by bringing resource contention and schedulability aspects early into the design process. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Audsley, A. Burns, and A. Wellings. </author> <title> Data consistency in hard real-time systems. </title> <journal> Informatica, </journal> <volume> 19(2) </volume> <pages> 223-234, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: We refer the readers to [7] for an overview of design methods and [3, 12] for an overview of real-time scheduling. There has been relatively less effort in the integration of design and scheduling, and specifically the derivation of task periods and deadlines from end-to-end constraints. In <ref> [1] </ref> and [14] similar problems are addressed, but the focus was more on schedulability analysis, and less on the derivation of task parameters. There have also been some studies on the decomposition of end-to-end deadlines into local task deadlines [16, 2, 5, 11].
Reference: [2] <author> R. Bettati and J. W.-S. Liu. </author> <title> End-to-end scheduling to meet deadlines in distributed systems. </title> <booktitle> In Proceedings, IEEE Conference on Distributed Computing Systems, </booktitle> <pages> pages 452-459, </pages> <year> 1992. </year>
Reference-contexts: In [1] and [14] similar problems are addressed, but the focus was more on schedulability analysis, and less on the derivation of task parameters. There have also been some studies on the decomposition of end-to-end deadlines into local task deadlines <ref> [16, 2, 5, 11] </ref>. Recently, [13] reports a study on deriving task periods based on control performance metrics. 2 Problem Formulation In this section, we first present the system and network model. Then, we formulate a system design model in terms of a task graph and end-to-end timing constraints.
Reference: [3] <author> A. Burns. </author> <title> Preemptive priority based scheduling: An appropriate engineering approach. </title> <editor> In S. Son, editor, </editor> <booktitle> Principles of Real-Time Systems. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Recent developments have resulted in the maturity of real-time scheduling theory techniques, and shown the viability of these techniques for industrial real-time systems especially in the domain of distributed control systems <ref> [3, 9] </ref>. However, while this progress is admirable, most real-time scheduling techniques handle timing constraints (i.e., task periods, deadlines, etc.) that are artifacts of system design, and for a given system may be chosen in many different ways to meet the end user requirements. <p> We refer the readers to [7] for an overview of design methods and <ref> [3, 12] </ref> for an overview of real-time scheduling. There has been relatively less effort in the integration of design and scheduling, and specifically the derivation of task periods and deadlines from end-to-end constraints. <p> Clearly, ^ae () = min j ^ae j . In each step, given the priority ordering, we first compute the response times of all tasks, as in <ref> [3] </ref>, assuming that a task is preemptable by all higher and equal priority tasks. Then, based on response times, per task gains are computed. If all gains are above the cut-off threshold, then we stop.
Reference: [4] <author> G. Dantzig and B. Eaves. </author> <title> Fourier-Motzkin Elimination and its Dual. </title> <journal> Journal of Combinatorial Theory (A), </journal> <volume> 14 </volume> <pages> 288-297, </pages> <year> 1973. </year>
Reference-contexts: This process is done in several steps, as outlined below. (1) Phase Variable Elimination. We begin by eliminating the phase variables from the constraint set using Fourier Variable Elimination <ref> [4] </ref>. Basically, this involves rewriting the constraints as lower and upper bound constraints on a variable to be eliminated, and then combining each lower bound with each upper bound.
Reference: [5] <author> J. Garcia and M. G. Harbour. </author> <title> Optimized priority assignment for tasks and messages in distributed hard real-time system. </title> <booktitle> In Proceedings, IEEE Workshop on Parallel and Distributed Real-Time Systems, </booktitle> <year> 1995. </year>
Reference-contexts: In [1] and [14] similar problems are addressed, but the focus was more on schedulability analysis, and less on the derivation of task parameters. There have also been some studies on the decomposition of end-to-end deadlines into local task deadlines <ref> [16, 2, 5, 11] </ref>. Recently, [13] reports a study on deriving task periods based on control performance metrics. 2 Problem Formulation In this section, we first present the system and network model. Then, we formulate a system design model in terms of a task graph and end-to-end timing constraints.
Reference: [6] <author> R. Gerber, S. Hong, and M. Saksena. </author> <title> Guaranteeing real-time requirements with resource-based calibration of periodic processes. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(7), </volume> <month> July </month> <year> 1995. </year>
Reference-contexts: In this paper we address the problem of transforming a high-level real-time system design into a set of schedulable periodic tasks. The current work improves and extends our original solution <ref> [6] </ref> for a single processor system to a distributed system environment. We model the problem as a constraint solving problem, in which the original end-to-end timing constraints are expressed as a set of constraints on task attributes. The constraints are then solved to derive a set of schedula-ble task parameters. <p> This pruning is repeated until no further reduction is possible. After the three pruning steps, we are left with a reduced search space on which the search is performed to find a feasible solution. A simple branch-and-bound heuristic <ref> [6] </ref> is used to control the search. As a result, we obtain the following period assignment.
Reference: [7] <author> H. Gomaa. </author> <title> Software Design Methods for Concurrent and Real-Time Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1993. </year>
Reference-contexts: This is possible not only because the system traceability is maintained throughout the approach, but also because the constraint solver itself generates various performance metrics. 1.1 Related Work Real-time system design and scheduling have been fertile areas of research in the last decade. We refer the readers to <ref> [7] </ref> for an overview of design methods and [3, 12] for an overview of real-time scheduling. There has been relatively less effort in the integration of design and scheduling, and specifically the derivation of task periods and deadlines from end-to-end constraints.
Reference: [8] <author> N. Kim, M. Yoo, S. Hong, M. Saksena, C. Choi, and H. Shin. </author> <title> Visual assessment of a real-time system design: A case study of period calibration method. </title> <booktitle> In Proceedings, IEEE Real-Time Systems Symposium, </booktitle> <year> 1996. </year>
Reference-contexts: fl The work reported in this paper was supported in part by NSERC Operating Grant OGP0170345, and by Engineering Research Center for Advanced Control and Instrumentation (ERC-ACI) under Grant 95-26. depend on factors such as sampling rates for inputs, update rates for outputs, and end-to-end latencies from sensor to actuators <ref> [8] </ref>. Through simulation or analysis, a control engineer can specify requirements such as maximum acceptable sampling rates for a given control loop, or maximum latency from a sensor input to an actuator output, and these requirements constitute what we call high-level end-to-end timing constraints on system inputs and outputs. <p> The following table shows the derived constraints for our walk-through example as a result of applying these rules. Constraints on Periods T 5 jT 4 ; T 6 jT 4 T 5 2 [9; 20]; T 4 2 <ref> [8; 20] </ref>; T 6 2 [15; 50] Constraints on Deadlines & Phases OE 5 d 3 + 10 OE 5 + d 5 35 Equalities T 1 ; T 3 ; T 7 = T 5 T 2 = T 4 ; T 8 = T 6 OE 3 = OE <p> These steps are illustrated using the walk-through example. Recall that the reduced set of period constraints only involve T 4 ; T 5 ; and T 6 . The initial feasible range for the periods is T 4 2 <ref> [8; 20] </ref>, T 5 2 [9; 20], and T 6 2 [15; 50] as shown in Table 2. 1. Time Granularity Pruning: Our first pruning takes place by choosing a coarser time granularity. A coarser granularity results in smaller search space, but may also eliminate feasible solutions. <p> We believe that a tool developed using the ideas developed in the paper will be very useful for rapid prototyping of designs, and in identifying and eliminating bottlenecks. We have successfully done a case study of our period-assignment algorithm for computerized numeric control <ref> [8] </ref> in a single processor environment. We hope to extend it for distributed systems using our deadline decomposition strategy. There exist many directions along which our approach can be extended. First, we have assumed allocation of tasks to processors. We would like to include that in the constraint solving process.
Reference: [9] <author> M. Klein, J. Lehoczky, and R. Rajkumar. </author> <title> Rate-monotonic analysis for real-time industrial computing. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 24-33, </pages> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Recent developments have resulted in the maturity of real-time scheduling theory techniques, and shown the viability of these techniques for industrial real-time systems especially in the domain of distributed control systems <ref> [3, 9] </ref>. However, while this progress is admirable, most real-time scheduling techniques handle timing constraints (i.e., task periods, deadlines, etc.) that are artifacts of system design, and for a given system may be chosen in many different ways to meet the end user requirements. <p> The following table shows the derived constraints for our walk-through example as a result of applying these rules. Constraints on Periods T 5 jT 4 ; T 6 jT 4 T 5 2 <ref> [9; 20] </ref>; T 4 2 [8; 20]; T 6 2 [15; 50] Constraints on Deadlines & Phases OE 5 d 3 + 10 OE 5 + d 5 35 Equalities T 1 ; T 3 ; T 7 = T 5 T 2 = T 4 ; T 8 = T <p> These steps are illustrated using the walk-through example. Recall that the reduced set of period constraints only involve T 4 ; T 5 ; and T 6 . The initial feasible range for the periods is T 4 2 [8; 20], T 5 2 <ref> [9; 20] </ref>, and T 6 2 [15; 50] as shown in Table 2. 1. Time Granularity Pruning: Our first pruning takes place by choosing a coarser time granularity. A coarser granularity results in smaller search space, but may also eliminate feasible solutions.
Reference: [10] <author> J. Lehoczky, L. Sha, and Y. Ding. </author> <title> The rate monotonic scheduling algorithm: Exact characterization and average case behavior. </title> <booktitle> In Proceedings of IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 166-171. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: Consider the periodic task set T = fo i = hT i ; e i ; d i i :: 1 i ng, for which the task periods and execution times are known. We use the notion of critical scaling factor <ref> [10] </ref> for this task set as our objective function for solving the constraints. Let D = fd i :: 1 i ng be any solution satisfying C.
Reference: [11] <author> M. D. Natale and J. Stankovic. </author> <title> Dynamic end-to-end guarantees in distributed real-time systems. </title> <booktitle> In Proceedings, IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 216-227, </pages> <year> 1994. </year>
Reference-contexts: In [1] and [14] similar problems are addressed, but the focus was more on schedulability analysis, and less on the derivation of task parameters. There have also been some studies on the decomposition of end-to-end deadlines into local task deadlines <ref> [16, 2, 5, 11] </ref>. Recently, [13] reports a study on deriving task periods based on control performance metrics. 2 Problem Formulation In this section, we first present the system and network model. Then, we formulate a system design model in terms of a task graph and end-to-end timing constraints.
Reference: [12] <author> K. Ramamritham and J. A. Stankovic. </author> <title> Scheduling algorithms and operating systems support for real-time systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 82(1) </volume> <pages> 55-67, </pages> <month> Jan-uary </month> <year> 1994. </year>
Reference-contexts: We refer the readers to [7] for an overview of design methods and <ref> [3, 12] </ref> for an overview of real-time scheduling. There has been relatively less effort in the integration of design and scheduling, and specifically the derivation of task periods and deadlines from end-to-end constraints.
Reference: [13] <author> D. Seto, J. P. Lehoczky, L. Sha, and K. G. Shin. </author> <title> On task schedulability in real-time control systems. </title> <booktitle> In Proceedings, IEEE Real-Time Systems Symposium, </booktitle> <year> 1996. </year>
Reference-contexts: In [1] and [14] similar problems are addressed, but the focus was more on schedulability analysis, and less on the derivation of task parameters. There have also been some studies on the decomposition of end-to-end deadlines into local task deadlines [16, 2, 5, 11]. Recently, <ref> [13] </ref> reports a study on deriving task periods based on control performance metrics. 2 Problem Formulation In this section, we first present the system and network model. Then, we formulate a system design model in terms of a task graph and end-to-end timing constraints.
Reference: [14] <author> L. Sha and S. S. Sathaye. </author> <title> A systematic approach to designing distributed real-time systems. </title> <journal> IEEE Computer, </journal> <volume> 26(9) </volume> <pages> 68-78, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: We refer the readers to [7] for an overview of design methods and [3, 12] for an overview of real-time scheduling. There has been relatively less effort in the integration of design and scheduling, and specifically the derivation of task periods and deadlines from end-to-end constraints. In [1] and <ref> [14] </ref> similar problems are addressed, but the focus was more on schedulability analysis, and less on the derivation of task parameters. There have also been some studies on the decomposition of end-to-end deadlines into local task deadlines [16, 2, 5, 11].
Reference: [15] <author> D. Simon, B. Espiau, E. Castillo, and K. Kapel-los. </author> <title> Computer aided design of a generic robot controller handling reactivity and real-time control issues. </title> <journal> IEEE Transactions on Control Systems and Technology, </journal> <volume> 1(4), </volume> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: However, while this progress is admirable, most real-time scheduling techniques handle timing constraints (i.e., task periods, deadlines, etc.) that are artifacts of system design, and for a given system may be chosen in many different ways to meet the end user requirements. Consider, for example, a robotic control system <ref> [15] </ref>. The control laws are generally implemented as multi-task programs, and may be allocated to multiple processors on a distributed system. The timing behavior of such a system must ensure that end user requirements such as maximum value of tracking errors are satisfied. <p> Likewise, we assume that the communication network is capable of guaranteeing bounded message transfers for periodic messages. 2.2 Design Model We use a simple producer-consumer model, similar to models proposed by other researchers (e.g., <ref> [15] </ref>) to represent a real-time system. The model incorporates many essential features such as task sharing, simple synchronization, software reusability, network transparent communication, etc. In this model, a real-time system is composed of a set of communicating tasks. <p> The following table shows the derived constraints for our walk-through example as a result of applying these rules. Constraints on Periods T 5 jT 4 ; T 6 jT 4 T 5 2 [9; 20]; T 4 2 [8; 20]; T 6 2 <ref> [15; 50] </ref> Constraints on Deadlines & Phases OE 5 d 3 + 10 OE 5 + d 5 35 Equalities T 1 ; T 3 ; T 7 = T 5 T 2 = T 4 ; T 8 = T 6 OE 3 = OE 1 + d 1 + <p> Recall that the reduced set of period constraints only involve T 4 ; T 5 ; and T 6 . The initial feasible range for the periods is T 4 2 [8; 20], T 5 2 [9; 20], and T 6 2 <ref> [15; 50] </ref> as shown in Table 2. 1. Time Granularity Pruning: Our first pruning takes place by choosing a coarser time granularity. A coarser granularity results in smaller search space, but may also eliminate feasible solutions.
Reference: [16] <author> J. Sun, R. Bettati, and J. W.-S. Liu. </author> <title> An end-to-end approach to schedule tasks with shared resources in multiprocessor systems. </title> <booktitle> In Proceedings of the 11th IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <address> Seattle, Washington, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: In [1] and [14] similar problems are addressed, but the focus was more on schedulability analysis, and less on the derivation of task parameters. There have also been some studies on the decomposition of end-to-end deadlines into local task deadlines <ref> [16, 2, 5, 11] </ref>. Recently, [13] reports a study on deriving task periods based on control performance metrics. 2 Problem Formulation In this section, we first present the system and network model. Then, we formulate a system design model in terms of a task graph and end-to-end timing constraints.
References-found: 16

