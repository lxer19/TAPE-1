URL: ftp://ftp.cs.columbia.edu/reports/reports-1993/cucs-036-93.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1993.html
Root-URL: http://www.cs.columbia.edu
Email: heineman@cs.columbia.edu  
Title: Automatic Translation of Process Modeling Formalisms  
Author: George T. Heineman 
Date: November 10, 1993  
Address: 500 West 120th Street New York, NY 10027  
Affiliation: Columbia University Department of Computer Science  
Pubnum: TR CUCS-036-93  
Abstract: This paper demonstrates that the enaction of a software process can be separated from the formalism in which the process is modeled. To show this, we present a means of automatically translating a process' specification, modeled using the statemate approach, into an active environment, using the Marvel system, which then supports the enaction of the process. key words: Software process modeling, process enaction, formalism interoperability.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Israel Z. Ben-Shaul, Gail E. Kaiser, and George T. Heineman. </author> <title> An architecture for multi-user software development environments. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 149-158, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: In Section 4 we show how the statecharts can be compiled into a Marvel environment; first, we give a brief introduction to the Marvel system. 5 3 Marvel approach The goal of the Marvel project <ref> [1] </ref> is to develop process-centered environments that guide and assist teams of users working on large-scale projects. An administrator provides the schema, process model, tool envelopes and coordination model for a specific project. The schema classes define an objectbase containing the system under development.
Reference: [2] <author> David Harel et al. Statemate: </author> <title> A working environment for the development of complex reactive systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(4) </volume> <pages> 403-414, </pages> <month> April </month> <year> 1990. </year> <month> 20 </month>
Reference-contexts: Section 3 describes the Marvel approach to software modeling. Section 4 describes the compiler which translates the statemate <ref> [2] </ref> specification of the process into a Marvel environment. Section 5 outlines some future research directions. 2 SEI software modeling approach The SEI approach [7] models the software process through the use of three interrelated perspectives which determine the who, what, where, when, and how of the process. <p> Section 5 outlines some future research directions. 2 SEI software modeling approach The SEI approach [7] models the software process through the use of three interrelated perspectives which determine the who, what, where, when, and how of the process. The statemate tool <ref> [2] </ref> is used to construct these perspective charts. * Functional perspective determines what the tasks are, and the information flow between the tasks * Behavioral perspective determines when and how tasks are performed * Organizational perspective determines who in the organization performs the tasks, and where the tasks are done.
Reference: [3] <author> Peter H. Feiler and Gail E. Kaiser. </author> <title> Intelligent Assistance in Software Development Environments. </title> <booktitle> In Annual Technical Review 1987, </booktitle> <pages> pages 43-56, </pages> <address> Pittsburgh, PA, </address> <year> 1987. </year> <institution> Software Engineering Institute, Carnegie Mellon University. </institution>
Reference-contexts: This paper presents a method by which a process modeled using the sei software process modeling approach [7] can be automatically translated into an active Marvel <ref> [3] </ref> environment which can be used to enact the process. Section 2 of this paper describes the sei software process modeling approach and partially reproduces Marc Kellner's 1 Heineman is supported in part by IBM Canada 2 solution to the ispw-6 standard benchmark problem.
Reference: [4] <author> Christer Fernstrom. </author> <title> Process weaver: Adding process support to unix. </title> <booktitle> In 1st International Conference on the Software Process: Continuous Software Process Improvement, </booktitle> <pages> pages 12-26, </pages> <address> Berlin, Germany, February 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: These could be stored and correlated with the actual process as it is being enacted. * Incorporate Organizational Perspective The Marvel environment does not allows rule chains between users (i.e., delegation of tasks). We made some preliminary investigations on the possibility of using Process WEAVER <ref> [4] </ref> which suggest that it could be used to perform the necessary delegation. * Incorporating Tools into the Process Model The generated environment uses no external tools.
Reference: [5] <author> Mark A. Gisi and Gail E. Kaiser. </author> <title> Extending a tool integration language. </title> <editor> In Mark Dowson, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 218-227, </pages> <address> Redondo Beach CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: A rule network is compiled when the Marvel system is tailored by the prcoess model. The process engine chains among rules with different or multiple parameters by "inverting" local bindings [6]. Conventional file-oriented tools are integrated through an enveloping language based on shell scripts <ref> [5] </ref>. A rule activity specifies an envelope and its input and output arguments, which may be literals, status attributes and/or (sets of) file attributes. Each envelope returns a distinguished value to indicate which of the specified effects 6 should be asserted.
Reference: [6] <author> George T. Heineman, Gail E. Kaiser, Naser S. Barghouti, and Israel Z. Ben-Shaul. </author> <title> Rule chaining in marvel: Dynamic binding of parameters. </title> <journal> IEEE Expert, </journal> <volume> 7(6) </volume> <pages> 26-32, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: A rule network is compiled when the Marvel system is tailored by the prcoess model. The process engine chains among rules with different or multiple parameters by "inverting" local bindings <ref> [6] </ref>. Conventional file-oriented tools are integrated through an enveloping language based on shell scripts [5]. A rule activity specifies an envelope and its input and output arguments, which may be literals, status attributes and/or (sets of) file attributes.
Reference: [7] <author> Marc I. Kellner. </author> <title> Software process modeling: Value and experience. In In SEI Technical Review, </title> <journal> Software Engineering Institute, </journal> <pages> pages 23-54. </pages> <institution> Carnegie Mellong University, </institution> <year> 1989. </year>
Reference-contexts: In most cases, there is no way to monitor or control the process, and the managers must simply hope that all the users follow the process. This paper presents a method by which a process modeled using the sei software process modeling approach <ref> [7] </ref> can be automatically translated into an active Marvel [3] environment which can be used to enact the process. <p> Section 3 describes the Marvel approach to software modeling. Section 4 describes the compiler which translates the statemate [2] specification of the process into a Marvel environment. Section 5 outlines some future research directions. 2 SEI software modeling approach The SEI approach <ref> [7] </ref> models the software process through the use of three interrelated perspectives which determine the who, what, where, when, and how of the process.
Reference: [8] <author> Marc I. Kellner. </author> <title> Multiple paradigm approaches for software process modeling. </title> <booktitle> In 7th International Software process Workshop: Communication and Coordination in the Software Process, pages ??-??, Yountville, </booktitle> <address> CA, </address> <month> October </month> <year> 1991. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: 1 Introduction The software community has recognized the importance of understanding and modeling the processes which are used to develop and support software. There are many objectives which have been cited as motivation for the development and application of software process models <ref> [8] </ref>. These include support for: automated execution and control, human interaction, managerial responsibilities, process understanding, and analysis of process. It is our belief that the actual enaction of a process can be orthogonal to the formalism in which the process is modeled.
Reference: [9] <author> Marc I. Kellner. </author> <title> Software process modeling support for management planning and control. </title> <booktitle> In 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <address> Redondo Beach CA, </address> <month> August </month> <year> 1991. </year>
Reference-contexts: This proved to be a valuable experience in translating from one modeling formalism to another. Extensions to this work are many, and include the following: * Incorporate Static Reactions In Kellner's work <ref> [9] </ref>, static reactions produce quantitative measurements for simulation purposes. These could be stored and correlated with the actual process as it is being enacted. * Incorporate Organizational Perspective The Marvel environment does not allows rule chains between users (i.e., delegation of tasks).
References-found: 9

