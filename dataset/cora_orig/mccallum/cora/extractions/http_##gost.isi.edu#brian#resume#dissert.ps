URL: http://gost.isi.edu/brian/resume/dissert.ps
Refering-URL: http://gost.isi.edu/brian/resume/
Root-URL: http://www.isi.edu
Title: Control Using Finite State Automata  
Degree: A dissertation submitted in partial satisfaction of the requirements for the degree Doctor of Philosophy in Computer Science by Yeh-Ching Tung  
Date: 1994  
Note: Distributed  
Address: Los Angeles  
Affiliation: UNIVERSITY OF CALIFORNIA  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> N. Abramson. </author> <title> Packet switching with satellites. </title> <booktitle> In AFIPS Conference Proceedings, </booktitle> <volume> Vol. 42, </volume> <pages> pages 695-702. </pages> <booktitle> National Computer Conference, </booktitle> <year> 1973. </year>
Reference-contexts: If the output is A 0 , the reward probability is r = r 0 ; if it is A 1 , the reward probability is r = r 1 . (We assume we are given r 0 ; r 1 2 <ref> [0; 1] </ref>.) Then, with probability r, the automaton is rewarded; with probability 1 r, it is penalized. This cycle is repeated: the automaton chooses either A 0 or A 1 , the corresponding reward probability is determined, and the automaton is rewarded or penalized. <p> That is, a (t) = m=1 and 1 a (t) (2:8) We assume the existence of a reward function r (f ), defined by r: <ref> [0; 1] </ref> ! [0; 1]. For each moment t, we compute a reward probability r = r (f ), whose value depends solely on the fraction f = f (t) (f = 0; 1=N; 2=N; . . . ; 1). <p> That is, a (t) = m=1 and 1 a (t) (2:8) We assume the existence of a reward function r (f ), defined by r: <ref> [0; 1] </ref> ! [0; 1]. For each moment t, we compute a reward probability r = r (f ), whose value depends solely on the fraction f = f (t) (f = 0; 1=N; 2=N; . . . ; 1). <p> A number of transmission protocols have been devised to achieve this goal. The first was ALOHA <ref> [1] </ref>; this had the advantage of being exceptionally simple to implement, but it reduced the usable channel capacity by a factor of 2e, and it was theoretically unstable for any positive level of traffic! From ALOHA was developed slotted ALOHA [13], which introduced the idea of slots: fixed divisions of time <p> We shall see that this changes the form of the approximation only slightly. Specifically, we define the heterogeneous reward function r h : fA 0 ; A 1 g N ! <ref> [0; 1] </ref>. There are thus not N + 1 points on the reward function, but 2 N points. <p> These are (k) = (0) t n;d (k) i=2 t n;d (i) subject to the constraint that the (k) sum up to unity. We assume that the persistence time for each automaton is exponentially distributed; this is approximately true (see Appendix B in <ref> [1] </ref>).
Reference: [2] <author> V. A. Borovikov and V. I. Bryzgalov. </author> <title> A simple symmetric game between many automata. </title> <journal> Avtomat. Telemekh., </journal> <volume> Vol. 26(No. 4), </volume> <year> 1965. </year>
Reference-contexts: Before we plunge on into our analysis, however, let us first describe the behavior of the system as the memory size of the automata and the number of automata increase without bound. Borovikov and Bryzgalov <ref> [2] </ref> show that when n = 1|that is, when the automata have two states|the behavior is not optimal; in fact, with probability one, f (t) approaches 1=2 in the limit as N; t ! 1. This is stated more precisely for the case of general n in Conjecture 2 below.
Reference: [3] <author> Michael G. Hluchyj and Robert G. Gallager. </author> <title> Multiaccess of a slotted channel by finitely many users. </title> <booktitle> In NTC Proceedings, </booktitle> <volume> Vol. 2, </volume> <booktitle> pages D.4.2.1-7. National Telecommunications Conference, </booktitle> <year> 1981. </year>
Reference-contexts: Interestingly, this system behaves like a cyclic polling system when the load is high, and somewhat like slotted ALOHA when the load is low. We note also that this frame version resembles the window mechanism described by Hluchyj and Gallager <ref> [3] </ref>. However, they consider a problem somewhat different. In their formulation, the population is assumed to be constant, the packet generation probability is identical for all stations, and there is only a single buffer space at each station. In fact, the applicability of the window mechanism depends on these assumptions.
Reference: [4] <editor> Douglas R. Hofstadter. Metamagical themas. </editor> <publisher> Scientific American, </publisher> <month> May </month> <year> 1983. </year>
Reference-contexts: Moreover, each player plays solely in a greedy fashion, each time voting the way that seems to give that player the best payoff. This is somewhat unexpected. Typically, greed leads to significantly suboptimal outcomes; an example of this is the prisoner's dilemma <ref> [4] </ref>. However, we will see that the method used here does not have this property, because each player effectively evaluates the success of an action jointly with the actions of the other players, rather than considering it in isolation, conditioned on the actions of the other players.
Reference: [5] <author> S. Kirkpatrick, C. D. Gelatt, and M. P. Vecchi. </author> <title> Optimization by simulated annealing. </title> <journal> Science, </journal> <volume> 220 </volume> <pages> 671-680, </pages> <year> 1983. </year>
Reference-contexts: In fact, as we shall see, this method, suitably adapted, can be seen as a form of simulated annealing for a distributed environment <ref> [5] </ref>. A second example concerns a meeting of a group. Volunteers are needed to 7 complete a task. Some 70%, say, of the members will be required. No one wants to volunteer, though everyone realizes that the group cannot continue without this task being done. <p> It may be suggested that this change in memory size is very reminiscent of changing the ambient temperature in simulated annealing. In fact, this relationship may be demonstrated in a very straightforward manner. For this purpose, we extrapolate from the heuristics of <ref> [5] </ref>, and define the following version of simulated annealing. The operating point of the population is expressed, as before, by the number k of automata producing A 1 .
Reference: [6] <author> Leonard Kleinrock. </author> <title> Queueing Systems, Volume 1: Theory. </title> <publisher> John Wiley and Sons, </publisher> <year> 1975. </year> <month> 134 </month>
Reference-contexts: equation t i;i1 (r) = 1 + r [t i+1;i (r) + t i;i1 (r)]; 1 i &lt; n which can be rewritten as (1 r)t i;i1 (r) = 1 + rt i+1;i (r); 1 i &lt; n (2:17) This recurrence equation can be solved by the usual z-transform techniques <ref> [6] </ref> (see Appendix A) to yield t i;i1 (r) = 1 2r 1 r ni+1 (2:18) t 1;1 (r) = 1 2r 1 r n 1 1 r 1 (2:19) Immediately after a trigger transition, at least one of the automata|in particular, the one that made the trigger transition|must be in <p> Some of this work will 100 undoubtedly be carried out in the Commotion Laboratory at UCLA. 101 Appendix A Solving for Persistence Time In Section 2.2.1, we claimed that the solution to the recurrence equations 2.16 and 2.17 could be derived using z-transform techniques <ref> [6] </ref> to yield equations 2.18 and 2.19. In this appendix, we carry out this derivation.
Reference: [7] <author> Leonard Kleinrock. </author> <title> On distributed systems performance. </title> <booktitle> In ITC Spe--cialist Seminar: Computer Networks and ISDN Systems, </booktitle> <pages> pages 209-216, </pages> <year> 1990. </year>
Reference-contexts: Evidently, it is necessary for the machines to organize themselves without explicitly communicating control information. The method outlined here allows them to do that. (In <ref> [7] </ref>, we find mentioned the inherent cost in having the entities physically separated, due to the lack of global knowledge. In our 8 approach, that cost is not being sidestepped; it is merely being distributed among the entities.) The organization of this chapter is as follows.
Reference: [8] <author> Leonard Kleinrock and F. A. Tobagi. </author> <title> Carrier sense multiple access for packet switched radio channels. </title> <booktitle> In Proceedings of the IEEE International Conference on Communications, Minnesota, pages 21B-1 to 21B-7, </booktitle> <month> June </month> <year> 1974. </year>
Reference-contexts: We first consider two of the more popular ones, Carrier Sense Multiple Access (CSMA) <ref> [8] </ref> and cyclic polling [9]. Most popular protocols are some variation of one of these (with the exception of reservation-based schemes, which we will discuss later).
Reference: [9] <author> A. G. Konheim and B. Meister. </author> <title> Waiting lines and times in a system with polling. </title> <journal> Journal of the Association of Computing Machines, </journal> <volume> Vol. 21 </volume> <pages> 470-490, </pages> <year> 1974. </year>
Reference-contexts: We first consider two of the more popular ones, Carrier Sense Multiple Access (CSMA) [8] and cyclic polling <ref> [9] </ref>. Most popular protocols are some variation of one of these (with the exception of reservation-based schemes, which we will discuss later).
Reference: [10] <author> B. Paris and B. Aazhang. </author> <title> Near-optimum control of multiple-access collision channels. </title> <journal> IEEE Transactions on Communications, </journal> <volume> Vol. 40(No. </volume> 8):1298-1309, August 1992. 
Reference-contexts: When the current state of an automaton is enabled, the station transmits a packet if it has one. The stations then receive as feedback the result of that slot: whether the slot was idle (0), successful (1), or collided (e). (This is called ternary feedback <ref> [10] </ref>. Some protocols do not assume that ternary feedback is available.) For the moment, we assume that the feedback arrives instantly, although we will find a way to circumvent this requirement below.
Reference: [11] <author> B. G. Pittel. </author> <title> The asymptotic properties of a version of the Goore game. Probl. </title> <journal> Peredachi Inform., </journal> <volume> Vol. 1(No. 3), </volume> <year> 1965. </year>
Reference-contexts: If lim N!1 (n=N ) &lt; , then the automata spend most of their time in nonoptimal system states. Pittel <ref> [11] </ref> examines nearly the same problem. The only change is in the automata; he assumes that in a trigger transition, the automaton has an equal chance (that is, 1=2) of choosing the other output, or staying with the same action.
Reference: [12] <author> P. J. Ramadge and W. Wonham. </author> <title> Supervisory control of a class of discrete event processes. </title> <journal> SIAM Journal on Control and Optimization, </journal> <volume> Vol. 25(No. 1), </volume> <year> 1987. </year>
Reference: [13] <author> L. G. Roberts. </author> <title> Extensions of packet communication to a hand held per-sonal terminal. </title> <booktitle> In AFIPS Conference Proceedings, </booktitle> <volume> Vol. 40, </volume> <pages> pages 295-298. </pages> <booktitle> Spring Joint Computer Conference, </booktitle> <year> 1970. </year>
Reference-contexts: The first was ALOHA [1]; this had the advantage of being exceptionally simple to implement, but it reduced the usable channel capacity by a factor of 2e, and it was theoretically unstable for any positive level of traffic! From ALOHA was developed slotted ALOHA <ref> [13] </ref>, which introduced the idea of slots: fixed divisions of time during which an entire transmission must fit. This single change doubled the channel capacity.
Reference: [14] <author> L. G. Roberts. </author> <title> Dynamic allocation of satellite capacity through packet reservation. </title> <booktitle> In AFIPS Conference Proceedings, </booktitle> <volume> Vol. 42, </volume> <pages> pages 711-716. </pages> <booktitle> National Computer Conference, </booktitle> <year> 1973. </year>
Reference-contexts: One method of avoiding collisions, without resorting to cyclic polling, is a reservation-based scheme <ref> [14] </ref>. In such schemes, the time line is divided into slots of two different types: ordinary slots|the type used to carry message packets|and the smaller reservation slots. Short packets are sent into these reservation slots to reserve ordinary slots for transmission.
Reference: [15] <author> M. L. Tsetlin. </author> <title> Finite Automata and Modeling the Simplest Forms of Behavior. </title> <type> PhD thesis, </type> <institution> V. A. Steklov Mathematical Institute, </institution> <year> 1964. </year>
Reference-contexts: Ramadge and Wonham [12][17] give a similar treatment by means of discrete event decision systems (DEDS), but the conditions differ, as will be detailed below. Let us introduce this scheme with a simple game, called the Gur Game by Tsetlin, who describes it in <ref> [15] </ref>. Imagine that we have N players, none of whom are aware of the others, and a referee. Each minute, the referee asks each player to vote yes or no, then counts up the yes and no answers. <p> We wish to devise an automaton that performs "well" (that is, it receives a greater proportion of rewards), where performance is measured relative to that of a "null" automaton, which simply chooses A 0 or A 1 randomly with probability 1/2. Tsetlin <ref> [15] </ref> gives the following design, which he calls L 2;2 . Let the automaton have two states, 1 and 1. If the current state is 1, the automaton chooses A 0 ; if it is 1, it chooses A 1 . <p> To improve performance, we can give the automaton more than two states. Suppose that it has 2n states, S n = fi; i j 1 i ng. This automaton is then said to have a memory size of n. (Tsetlin <ref> [15] </ref> calls this automaton L 2n;2 .) If the current state is negative, the automaton chooses A 0 ; if it is positive, it chooses A 1 . <p> Even though f can only take on one of N +1 values, the function r (f ) is defined as accepting a continuous domain of values, both for historical reasons (Tsetlin defines it that way in <ref> [15] </ref>), and because it allows for changes in the population. (We do not analyze the case of a changing population in this dissertation, however.) Each automaton then independently receives a stimulus x m (t), which is a binary valued random variable. <p> We then ask: is it possible to design (finite state) automata in such a way that (k fl ) is arbitrarily close to 1? The answer is yes, as noted by Tsetlin <ref> [15] </ref>, although he only describes the construction and behavior of the automata, and does not develop a general method of analysis. The automaton we examine is the one defined in the previous section; the state diagram is displayed in Figure A.2. <p> We map states to outputs in a straightforward way. If s m (t) &lt; 0, then u m (t) = 0; otherwise, u m (t) = 1. The automaton is said to be linear <ref> [15] </ref>; that is, state transitions occur only between adjacent states, except for the self transitions at states n and n. <p> After more than 1000 cycles, the error distribution does not change much. This suggests both that the approximation is very close to the actual result, and that the algorithm converges quickly. 2 2.2.2 The Multiple-Output Case Let us now generalize our model to allow more than two outputs. (Tsetlin <ref> [15] </ref> also examines this case, but gives no analysis of the behavior.) Suppose that there are K &gt; 2 possible outputs. Let (k 1 ; k 2 ; . . . ; k K ) represent the system state in which k l automata are producing A l .
Reference: [16] <author> V. A. Volkonskiy. </author> <title> Asymptotic properties of the behavior of simple automata in a game. Probl. </title> <journal> Peredachi Inform., </journal> <volume> Vol. 1(No. 2), </volume> <year> 1965. </year>
Reference-contexts: The proportion of time that the population spends in system state k is then (k) = P N (2:15) We see therefore that the behavior of the system can be decomposed into two parts: how often the system states are visited, and how much time is spent there. (Volkonskiy <ref> [16] </ref> makes use of this general method for the simple case where the reward function is of the form r (f ) = r 0 for f f c , r (f ) = r 1 &lt; r 0 for f &gt; f c , where f c &lt; 1=2 is
Reference: [17] <author> W. Wonham and P. J. Ramadge. </author> <title> Modular supervisory control of discrete-event systems. Mathematics of Control, Signals, </title> <journal> and Systems, </journal> <volume> Vol. 1(No. </volume> 1):13-30, 1988.
References-found: 17

