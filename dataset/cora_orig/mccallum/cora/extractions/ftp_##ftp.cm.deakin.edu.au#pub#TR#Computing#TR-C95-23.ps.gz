URL: ftp://ftp.cm.deakin.edu.au/pub/TR/Computing/TR-C95-23.ps.gz
Refering-URL: http://gollum.cm.deakin.edu.au/techreports.html
Root-URL: 
Email: ang@deakin.edu.au)  
Title: Paging in RHODOS  
Author: Damien De Paoli, Michael Hobbs, Andrzej Goscinksi (ddp, mick, 
Date: June 26, 1995  
Address: Geelong, Victoria 3217  
Affiliation: School of Computing and Mathematics Deakin University  
Abstract: This technical report details the research into the design of RHODOS paging mechanism. RHODOS main design philosophy is both the building of a high performance modern distributed operating system and the comparison and testing of new and competing strategies and theories in distributed operating systems. Due to this design philosophy the paging facility must be exible. In fact, the paging facility must be capable of supporting process migration and distributed shared memory as well as being able to allow different paging policies to be implemented. This report firstly covers the additions/modifications required to RHODOS existing space management functions; and secondly, shows how these additions/modifications are utilised in both the policy and mechanism of paging in RHODOS. 
Abstract-found: 1
Intro-found: 1
Reference: [De Paoli 93] <author> D. De Paoli. </author> <title> The Multiple Strategy Process Migration for RHODOS: The Logical Design. </title> <type> Technical Report TR C93/37, </type> <institution> Deakin University, Australia. </institution>
Reference-contexts: Thus, paging is a basic mechanism that supports virtual memory. Such a mechanism has been implemented in many operating systems that utilise virtual memory. However, in RHODOS, there are more stringent requirements for a paging mechanism. RHODOS contains many projects being undertaken simultaneously, including process migration <ref> [De Paoli 93] </ref> and distributed shared memory [Silcock and Goscinski 95]. Thus, the paging mechanism must take these into account so that similarities and requirements for these other projects can be factored into the design. The mechanism must be exible enough to allow different paging policies to be used, e.g. <p> Firstly, each process consists of multiple spaces, e.g., Text, Data, Stacks, memory mapped files, shared memory spaces, etc. Secondly, in RHODOS, processes can be migrated between hosts <ref> [De Paoli 93] </ref>. Thus, the memory (spaces) must be transferred between these hosts. Thirdly, processes in RHODOS can utilise distributed shared memory, thus spaces must be capable of being shared between hosts.
Reference: [De Paoli and Goscinski 94] <author> D. De Paoli. </author> <title> An Overview of Process Management in the 7 RHODOS system. </title> <type> Technical Report TR C94/01, </type> <institution> Deakin University, Australia. </institution>
Reference-contexts: It will allocate a new page, and read from the backing file the appropriate page contents into the new page. 6 Interaction with Process Management Within RHODOS, processes can make a copy of themselves with the process_twin () primitive <ref> [De Paoli and Goscinski 94] </ref>. This primitive (similar to the fork () primitive in Unix) utilises the copy on write mechanism to efficiently allow the duplication of memory. Each twinned process shares the Text space and has a copy of the Data and Stack spaces.
Reference: [De Paoli, et al 95] <author> D. De Paoli, A. Goscinski, M. Hobbs and G. Wickham. </author> <title> The RHODOS Microkernel, Kernel Servers and Their Cooperation. </title> <booktitle> IEEE First International Conference on Algorithms And Architectures for Parallel Processing, </booktitle> <address> Brisbane, </address> <month> April. </month>
Reference-contexts: Section 4 details a typical paging scenario. Section 5 discusses the potential trouble with paging and process management, and suggest a solution. Finally, Section 6 concludes this report. 2 Structure of RHODOS RHODOS is a message passing based microkernel operating system, that uses the cli ent server model <ref> [De Paoli, et al 95] </ref>. The microkernel (Nucleus) performs the basic functions of interrupt handling, local interprocess communication, context switching, and page han dling.
Reference: [Gerrity, et al 91] <author> G. Gerrity, A. Goscinski, J. Indulska, W. Toomey and W. Zhu. </author> <month> RHODOS </month> - 
Reference-contexts: page has been chosen, the Space Manager will look at the space structures for this process and retrieve the backing file SName (each space in RHODOS has a backing file that is used to store paged out pages on disk and backing files are referenced by a globally unique SName <ref> [Gerrity, et al 91] </ref>). If the backing file does not exist, then a file will be created and the SName populated, otherwise the existing file will be used.
References-found: 4

