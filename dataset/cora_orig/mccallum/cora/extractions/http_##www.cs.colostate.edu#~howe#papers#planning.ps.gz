URL: http://www.cs.colostate.edu/~howe/papers/planning.ps.gz
Refering-URL: http://eksl-www.cs.umass.edu/publications.html
Root-URL: 
Email: Net: fsrinivas,howeg@cs.colostate.edu  
Title: Comparison of Methods for Improving Search Efficiency in a Partial-Order Planner  
Author: Raghavan Srinivasan Adele E. Howe 
Address: Fort Collins, CO 80523  
Affiliation: Computer Science Department Colorado State University  
Abstract: The search space in partial-order planning grows quickly with the number of subgoals and initial conditions, as well as less countable factors such as operator ordering and subgoal interactions. For partial-order planners to solve more than simple problems, the expansion of the search space will need to be controlled. This paper presents four new approaches to controlling search space expansion by exploiting commonalities in emerging plans. These approaches are described in terms of their algorithms, their effect on the completeness and correctness of the underlying planner and their expected performance. The four new and two existing approaches are compared on several metrics of search space and planning overhead. 
Abstract-found: 1
Intro-found: 1
Reference: [ Anderson et al., 1993 ] <author> S.D. Anderson, A. Carlson, D.L. Westbrook, D.M. Hart, and P.R. Cohen. </author> <title> CLASP/CLIP Common Lisp Analytical Statistics Package/Common Lisp Instrumentation Package. </title> <type> Technical Report TR 93-55, </type> <institution> Computer Science Department, University of Massachusetts, </institution> <year> 1993. </year>
Reference-contexts: We studied the behavior of UCPOP in Truckworld by collecting execution traces of UCPOP working on Truck-world problems with similar conjunctive sub-goals. Using CLIP <ref> [ Anderson et al., 1993 ] </ref> (an instrumentation tool for defining and running data collection routines in a simulated environment), we collected data on what plans were generated, how certain open conditions were repaired, what threats were considered, and what variable bindings were used.
Reference: [ Hanks et al., 1993 ] <author> S. Hanks, D. Nguyen, and C. Thomas. </author> <title> A beginner's guide to the Truckworld simulator. </title> <institution> Dept of CS&E UW-CSE-TR 93-06-09, University of Washington, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: This hard constraint is a simple form of the resource reasoning included in more sophisticated planning systems. We developed this approach to address problems discovered when analyzing the behavior of UCPOP in Truckworld <ref> [ Hanks et al., 1993 ] </ref> (a simulator of trucks moving cargo between different destinations). UCPOP fails (i.e., could not find a plan even given a large search space) on apparently simple conjunctive subgoal problems in Truckworld. <p> The same set of problems without any modification is used for all versions. Most of the problems are from the example domains provided with UCPOP and tested in Joslin and Pollack's research with LCFR. Four of the problems are from the Truckworld domain <ref> [ Hanks et al., 1993 ] </ref> , all of which require picking up fuel drums; the four differ in the number of subgoals and arm positions. In all the domains, some of the operators were modified to include a special variable parameter for Bang-UCPOP.
Reference: [ Howe and Cohen, 1994 ] <author> A.E. Howe and P.R. Cohen. </author> <title> Detecting and explaining dependencies in execution traces. </title> <editor> In P. Cheeseman and R.W. Oldford, editors, </editor> <booktitle> Selecting Models from Data; Artificial Intelligence and Statistics IV, </booktitle> <pages> pages 71-78. </pages> <publisher> Springer-Verlag, </publisher> <address> NY, </address> <year> 1994. </year>
Reference-contexts: We analyzed the data with a variety of methods, from simple eyeballing through dependency detection <ref> [ Howe and Cohen, 1994 ] </ref> , and determined that, in effect, UCPOP was searching in circles: trying the same variable bindings over and over again. For example, consider the problem of picking up two identical fuel drums from a world which has five such drums.
Reference: [ Joslin and Pollack, 1994 ] <author> D. Joslin and M. Pollack. </author> <title> Least-cost flaw repair: A plan refinement strategy for partial-order planning. </title> <booktitle> In Proceedings of the Twelth National Conference on Artificial Intelligence, </booktitle> <pages> pages 1004-1009, </pages> <address> Seattle, WA, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: In general, UCPOP gives good results on small domains and problems in which subgoals are independent. For problems with interrelated subgoals or those requiring arithmetic, UCPOP often does not find a solution even with very large search limits. The Least Cost Flaw Repair (LCFR) strategy <ref> [ Joslin and Pollack, 1994 ] </ref> improved search control in UCPOP by selecting the flaw with the minimum repair cost. The repair cost of a flaw is defined as the number of plans generated to repair it. Open conditions and threats are treated alike. <p> The total time spent in planning with LCFR can be more than that for UCPOP, even though UCPOP examines far more plans than LCFR. However, LCFR reduces the search space more than other flaw selection strategies [ Peot and Smith, 1993 ] . A variant on LCFR, QLCFR <ref> [ Joslin and Pollack, 1994 ] </ref> , assumes the cost of un-repaired flaws to be constant over time; it caches the results of estimating flaw repair costs and uses the cached cost as the estimate in subsequent flaw selection.
Reference: [ Kambhampati and Hendler, 1992 ] <author> S. Kambhampati and J.A. Hendler. </author> <title> A validation-structure-based theory of plan modification and reuse. </title> <journal> Artificial Intelligence Journal, </journal> <pages> 55(2-3), </pages> <year> 1992. </year>
Reference-contexts: This sense of reuse is much more limited and local than what is typically meant by plan reuse (e.g., <ref> [ Kambhampati and Hendler, 1992 ] </ref> ); it is constrained to reusing the occasional step within a plan being developed. Consider a plan P with a set of flaws F .
Reference: [ Penberthy and Weld, 1992 ] <author> J.S. Penberthy and D.S. Weld. UCPOP: </author> <title> a sound, complete, partial order planner for adl. </title> <booktitle> In Proceedings of the Third International Conference on Knowledge Representation and Reasoning, </booktitle> <pages> pages 103-114, </pages> <year> 1992. </year>
Reference-contexts: We focused on the third approach because it requires the least change to the underlying planner. We used UCPOP because it is an easily available, domain independent partial order planner <ref> [ Penberthy and Weld, 1992 ] </ref> . UCPOP plans by iteratively selecting and repairing flaws in the current plan. A flaw is repaired by adding steps and constraints to the plan. The search control strategy decides which partial plan to select for expansion. <p> When special variables are bound to particular unique values, marking threats as bogus when they are due to different instances of the same special variable operator does not affect correctness. The correctness and completeness of UCPOP has already been proven <ref> [ Penberthy and Weld, 1992 ] </ref> , so we will show that all these cases are reducible to UCPOP. If UCPOP cannot find a solution (e.g., if enough unique values do not exist), then neither can our modification.
Reference: [ Peot and Smith, 1993 ] <author> M.A. Peot and D.E. Smith. </author> <title> Threat-removal strategies for partial-order planning. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 492-499, </pages> <year> 1993. </year>
Reference-contexts: The main drawback of LCFR is the overhead incurred for flaw selection. The total time spent in planning with LCFR can be more than that for UCPOP, even though UCPOP examines far more plans than LCFR. However, LCFR reduces the search space more than other flaw selection strategies <ref> [ Peot and Smith, 1993 ] </ref> .
Reference: [ Srinivasan and Howe, 1995 ] <author> R. Srinivasan and A.E. Howe. </author> <title> New methods for plan selection and refinement in a partial-order planner. </title> <institution> Computer Science Department 95-03, Colorado State University, </institution> <year> 1995. </year>
Reference-contexts: If UCPOP cannot find a solution (e.g., if enough unique values do not exist), then neither can our modification. A complete proof is beyond the scope of this paper (see <ref> [ Srinivasan and Howe, 1995 ] </ref> for details), but we can provide a sketch of each part. <p> On average, we expected that the four new approaches, templating, reuse, probabilistic reuse and Bang-UCPOP, would compare favorably to LCFR on plans examined but would have less overhead and so require less CPU time. A complete report of results in provided in <ref> [ Srinivasan and Howe, 1995 ] </ref> . 6.1 Experiment Design The six approaches were tested on 40 problems in ten domains. The same set of problems without any modification is used for all versions.
Reference: [ Tate et al., 1994 ] <author> A. Tate, B. Drabble, and J. Dalton. </author> <title> The use of condition types to restrict search in an ai planner. </title> <booktitle> In Proceedings of the Twelth National Conference on Artificial Intelligence, </booktitle> <pages> pages 1129-1134, </pages> <address> Seattle, WA, </address> <year> 1994. </year>
Reference-contexts: Three approaches have been used to enhance search in planning: more sophisticated plan representations and reasoning (e.g., hierarchical planning and resource reasoning as in <ref> [ Tate et al., 1994; Wilkins, 1988 ] </ref> ), domain specific control knowledge (through programmer intervention or machine learning) and improved search methods. We focused on the third approach because it requires the least change to the underlying planner. <p> When a planning failure occurs, it moves a plan from the most recent backup list into the primary search queue and continues. The modified algorithm is shown in Figure 2. Plan language constructs for restricting search space are available in some hierarchical planners. For example, O-Plan2 <ref> [ Tate et al., 1994 ] </ref> uses condition types, which allow the domain writer to restrict selection of actions as well as to bind variables. The `only use for query' condition type of O-Plan2 resembles the Bang scheme, but differs in the situations for which it is the best approach.
Reference: [ Wilkins, 1988 ] <author> D.E. Wilkins. </author> <title> Practical Planning: Extending the Classical AI Planning Paradigm. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> Palo Alto, CA, </address> <year> 1988. </year>
Reference-contexts: Three approaches have been used to enhance search in planning: more sophisticated plan representations and reasoning (e.g., hierarchical planning and resource reasoning as in <ref> [ Tate et al., 1994; Wilkins, 1988 ] </ref> ), domain specific control knowledge (through programmer intervention or machine learning) and improved search methods. We focused on the third approach because it requires the least change to the underlying planner.
References-found: 10

