URL: http://www.ai.mit.edu/people/unamay/papers/ppsn-94.ps
Refering-URL: http://www.ai.mit.edu/people/unamay/papers.html
Root-URL: 
Phone: 2  
Title: Program Search with a Hierarchical Variable Length Representation: Genetic Programming, Simulated Annealing and Hill Climbing  
Author: Una-May O`Reilly and Franz Oppacher 
Address: Santa Fe, NM, 87505, USA  Ottawa, CANADA  
Affiliation: 1 Santa Fe Institute,  School of Computer Science, Carleton University,  
Abstract: This paper presents a comparison of Genetic Programming(GP) with Simulated Annealing (SA) and Stochastic Iterated Hill Climbing (SIHC) based on a suite of program discovery problems which have been previously tackled only with GP. All three search algorithms employ the hierarchical variable length representation for programs brought into recent prominence with the GP paradigm [8]. We feel it is not intuitively obvious that mutation-based adaptive search can handle program discovery yet, to date, for each GP problem we have tried, SA or SIHC also work.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Aarts, E., Korst, J.: </author> <title> Simulated Annealing and Boltzmann Machines. </title> <publisher> Wiley. </publisher> <year> 1989 </year>
Reference-contexts: Whatever crossover operator used, it was applied 90% of the time with the remaining 10% of individuals chosen by selection being directly copied into the next generation. The Simulated Annealing algorithm <ref> [1] </ref> used was basic. Fitnesses were normalized to lie in [0,1] which fitness drops to [0,1]. A starting temperature of 1.5 was always decreased to a temperature over a given number of evaluations according to an exponential cooling schedule.
Reference: 2. <author> Cramer, N. L.: </author> <title> A Representation for the Adaptive Generation of Simple Sequential Programs. </title> <booktitle> Proc of Ist Intl Conf on Genetic Algorithms. </booktitle> <publisher> Lawrence Erlbaum Assoc. </publisher> <year> 1985. </year>
Reference-contexts: 1 Introduction Genetic Programming (GP) [8] is a recent paradigm in the lineage of search techniques for performing program induction <ref> [2, 3, 4, 5, 10, 12] </ref>. The sources of its effectiveness are: 1) an evolution inspired exploitation and exploration mechanism and, 2) the use of a hierarchical, variable length representation for programs.
Reference: 3. <author> Friedberg, </author> <title> R.M.: A Learning Machine: Part 1. </title> <journal> IBM Journal of Research and Development. </journal> <volume> 2(1): </volume> <month> 2-13 </month> <year> (1958) </year>
Reference-contexts: 1 Introduction Genetic Programming (GP) [8] is a recent paradigm in the lineage of search techniques for performing program induction <ref> [2, 3, 4, 5, 10, 12] </ref>. The sources of its effectiveness are: 1) an evolution inspired exploitation and exploration mechanism and, 2) the use of a hierarchical, variable length representation for programs.
Reference: 4. <author> Friedberg, R.M., Dunham B., North J.H.: </author> <title> A Learning Machine: Part 2. </title> <journal> IBM Journal of Research and Development. </journal> <volume> 3(3): </volume> <month> 282-287 </month> <year> (1959) </year>
Reference-contexts: 1 Introduction Genetic Programming (GP) [8] is a recent paradigm in the lineage of search techniques for performing program induction <ref> [2, 3, 4, 5, 10, 12] </ref>. The sources of its effectiveness are: 1) an evolution inspired exploitation and exploration mechanism and, 2) the use of a hierarchical, variable length representation for programs.
Reference: 5. <author> Fujicki, C., Dickinson J.: </author> <title> Using the Genetic Algorithm to Generate LISP Source Code to Solve the Iterated Prisoner`s Dilemma. </title> <booktitle> Proc. of the 2nd Intl Conf on Genetic Algorithms. </booktitle> <publisher> Lawrence Erlbaum Assoc. </publisher> <year> 1987. </year>
Reference-contexts: 1 Introduction Genetic Programming (GP) [8] is a recent paradigm in the lineage of search techniques for performing program induction <ref> [2, 3, 4, 5, 10, 12] </ref>. The sources of its effectiveness are: 1) an evolution inspired exploitation and exploration mechanism and, 2) the use of a hierarchical, variable length representation for programs.
Reference: 6. <author> Goldberg, D. E.: </author> <title> Genetic Algorithms in search, optimization, and machine learning. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference: 7. <author> Holland, J. H.: </author> <title> Adaptation in Natural and Artificial Systems: An Introductory analysis with applications to biology, control, </title> <booktitle> and artificial intelligence. 2nd Ed MIT Press,1992. (1st Ed 1978) </booktitle>
Reference-contexts: This provides a robust heuristic search approach <ref> [7, ?, ?] </ref>. Regarding the latter source, the hierarchical representation is supported by a genetic crossover operator which ensures the syntactic closure of all programs and permits programs of different lengths to be generated when two "parent" programs are crossed over.
Reference: 8. <author> Koza, J. R.: </author> <title> Genetic Programming; On the Programming of Computers by Means of Natural Selection. </title> <publisher> Bradford Books, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction Genetic Programming (GP) <ref> [8] </ref> is a recent paradigm in the lineage of search techniques for performing program induction [2, 3, 4, 5, 10, 12]. The sources of its effectiveness are: 1) an evolution inspired exploitation and exploration mechanism and, 2) the use of a hierarchical, variable length representation for programs. <p> The proposed rationale for this bias is robustness and the fact that exchange of leaves is more akin to point mutation than recombination and thus is not explorative enough <ref> [8] </ref>. The reason for investigating alternative crossover point selection biases is that the actual impact of the 90% probability bias really seems less than clear cut.
Reference: 9. <editor> Koza, J. R.: </editor> <booktitle> Genetic Programming II. </booktitle> <publisher> Bradford Books, </publisher> <year> 1994. </year>
Reference-contexts: a search for some statistical measures which would indicate the superior technique for a particular problem or the superior crossover operator to choose in GP and 2) finding out how the search techniques compare on larger program discovery problems, i.e. how well do they scale? Automatic definition of functions (ADF) <ref> [9] </ref> is an important new technique in GP which is claimed to improve performance on big problems. ADF is a technique of representation rather than an operator so it seems likely that HVL-mutate can be modified to support it.
Reference: 10. <author> Lenat, D. B: </author> <title> The Role of Heuristics in Learning by Discovery: Three Case Studies. Machine Learning, </title> <editor> Eds. R. S. Michalski, J. G. Carbonell and T. M. Mitchell. </editor> <publisher> Tioga Publishing Inc, </publisher> <year> 1983. </year>
Reference-contexts: 1 Introduction Genetic Programming (GP) [8] is a recent paradigm in the lineage of search techniques for performing program induction <ref> [2, 3, 4, 5, 10, 12] </ref>. The sources of its effectiveness are: 1) an evolution inspired exploitation and exploration mechanism and, 2) the use of a hierarchical, variable length representation for programs.
Reference: 11. <author> Sankoff, S., Kruskal, J.B., </author> <title> Editors: Time Warps, String Edits and Macromolecules: the Theory and Practice of Sequence Comparison. </title> <publisher> Addison Wesley, </publisher> <year> 1983. </year>
Reference-contexts: Both SA and SIHC require a mutation operator. Given that a hierarchical representation is chosen, the operator we have designed and used, HVL-Mutate, is inspired from the method for calculating the distance between trees <ref> [11] </ref>. That approach defines distance as the minimum cost sequence of editing one tree, step by step, to become the other using elementary operations such as substitution, insertion and deletion.
Reference: 12. <author> Smith, S., J.: </author> <title> Flexible Learning of Problem Solving Heuristics Through Adaptive Search. </title> <booktitle> Proc of the 8th Intl Joint Conf on Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1983. </year>
Reference-contexts: 1 Introduction Genetic Programming (GP) [8] is a recent paradigm in the lineage of search techniques for performing program induction <ref> [2, 3, 4, 5, 10, 12] </ref>. The sources of its effectiveness are: 1) an evolution inspired exploitation and exploration mechanism and, 2) the use of a hierarchical, variable length representation for programs.
Reference: 13. <author> Press, W. H.: </author> <title> Numerical Recipes in C: </title> <booktitle> the art of scientific computing. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1992. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: The experiment consisted of a minimum of 30 runs for each crossover operator. Under a t-test <ref> [13] </ref> with 95% confidence the results show that Height-Fair-XO and GP-XO have a significantly better expected probability of success than Fair-XO.
References-found: 13

