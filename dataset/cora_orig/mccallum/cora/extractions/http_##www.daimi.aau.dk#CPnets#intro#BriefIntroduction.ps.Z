URL: http://www.daimi.aau.dk/CPnets/intro/BriefIntroduction.ps.Z
Refering-URL: http://www.daimi.aau.dk/CPnets/intro/brief.html
Root-URL: http://www.daimi.aau.dk
Email: Email: kjensen@daimi.aau.dk,  
Title: A Brief Introduction to Coloured Petri Nets  
Author: Kurt Jensen 
Keyword: 1Introduction to Coloured Petri Nets  
Web: WWW: http://www.daimi.aau.dk/~kjensen/  
Address: Ny Munkegade, Bldg. 540, DK-8000 Aarhus C, Denmark  
Affiliation: Computer Science Department, University of Aarhus  
Abstract: Coloured Petri Nets (CP-nets or CPN) is a graphical oriented language for design, specification, simulation and verification of systems. It is in particular well-suited for systems in which communication, synchronisation and resource sharing are important. Typical examples of application areas are communication protocols, distributed systems, imbedded systems, automated production systems, work flow analysis and VLSI chips. The development of CP-nets has been driven by the desire to develop a modelling language at the same time theoretically well-founded and versatile enough to be used in practice for systems of the size and complexity we find in typical industrial projects. To achieve this, we have combined the strength of Petri nets with the strength of programming languages. Petri nets provide the primitives for the description of the synchronisation of concurrent processes, while programming languages provide the primitives for the definition of data types and the manipulation of data values. A small example of a CP-net is shown in Fig. 1. It describes a simple transport protocol transferring a number of packets over a unreliable network from a sender to a receiver. The ellipses and circles are called places. They describe the states of the system. The rectangles are called transitions. They describe the actions. The arrows are called arcs. The arc expressions describe how the state of the CP-net changes when the transitions occur. Each place contains a set of markers called tokens. In contrast to low-level Petri nets (such as Place/Transition Nets), each of these tokens carries a data value, which belongs to a given type. As an example, place Send (in the upper left corner of Fig. 1) has seven tokens in the initial state. All the token values belong to the type INTxDATA and they represent seven packets which are ready to be sent. The first element in the pair is the packet number, while the second is the data contents of the packet. All the 1s in front of the small backslashes indicate that there is exactly one of each of the seven packets (in general a place may have several tokens with the same data value). Each of the places NextSend and NextRec starts with a single token with value 1 (belonging to type INT). These places represent two counters, holding the number of the next packet to be sent/received. Place Received starts with a token which contains the empty string "" (belonging to type DATA). It represents the contents of those messages which have been successfully received. The remaining four places AD have no tokens in the initial state. They represent input and output buffers of the transmission network. Coloured Petri Nets have got their name because they allow the use of tokens that carry data values and can hence be distinguished from each other in contrast to the tokens of low-level Petri nets, which by convention are drawn as black, uncoloured dots. In the beginning, only small, unstructured sets of colours were used, e.g., enumerating a fixed set of processes. Later it was realised that it was possible to generalise the theory and the tools, in such a way that arbitrarily complex data types can be used as colour sets. Today it is not at all atypical to have tokens that carry a complex data value, e.g., a list of many thousand records, involving fields of many different types. There is no longer any difference between a colour set and a type, and no difference between a token colour and a token value. To be able to occur, a transition must have sufficient tokens on its input places, and these tokens must have token values that match the arc expressions. As an example, let us consider transition SendPacket. It has three surrounding arcs of which two are double arcs (which is a shorthand for two opposite directed arcs, sharing the same arc expression). The three arc expressions involve the variable n of type INT and the variable p of type DATA. For the transition to occur, we must bind these 
Abstract-found: 1
Intro-found: 0
References-found: 0

