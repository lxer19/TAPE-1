URL: ftp://ftpipr.ira.uka.de/pub/conferences/EWLR-4/PROCEEDINGS/ewlr4_hamdi.ps.gz
Refering-URL: http://wwwipr.ira.uka.de/~kaiser/events/ewlr4program.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: flfl e-mail: hamdi@informatik.uni-hamburg.de  
Title: A GOAL-ORIENTED BEHAVIOUR-BASED CONTROL AR- CHITECTURE FOR AUTONOMOUS MOBILE ROBOTS ALLOWING LEARNING  
Author: MOHAMED SALAH HAMDI flfl 
Keyword: Key Words. Autonomous Mobile Robots, Behaviours, Reactivity, Goal-oriented Mechanisms, Scheduling, Global Priority, Local Priority, Machine Learning  
Address: Hamburg, D-22527 Hamburg, Germany.  
Affiliation: Fachbereich Informatik, Universitaet  
Abstract: When dealing with autonomous robots, the definition of autonomy is important. Autonomous agents require decision-making capabilities in order to perform difficult tasks in a complex environment. In addition, learning from experience is required in order to improve dealing with future tasks. Over the past few years, several different architectures for autonomous mobile robots have been proposed in the literature. Most of them can be classified into two categories: a function-based one that decomposes the control system into functional modules and a behaviour-based one that decomposes it into task-achieving behaviours. In this paper, an approach for combining these two categories, i.e., combining reactivity as one of the main characteristics of behaviour-based systems with goal-oriented mechanisms as one of the main characteristics of function-based systems, is presented and possibilities of integrating learning strategies are discussed. The paper gives a short survey of existing systems and then the details of our approach are presented. A more thorough description of existing architectures can be found in the given literature. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Brooks, R. A. </author> <year> (1986). </year> <title> A robust layered control system for a mobile robot. In: </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> Vol. RA-2 (1), </volume> <month> April </month> <year> 1986. </year>
Reference-contexts: Each system develops tools for managing conflicting tasks (blackboard, inhibition, ...). We can distinguish between two basic classes among these approaches depending on their topology, i.e., the direction of decomposition: function-based archi tectures (Meystel, 1991), (Noreils and Chatila, 1995), (Goto and Stentz, 1987) and behaviour-based architectures <ref> (Brooks, 1986) </ref>, (Kaelbling, 1986), (Tzafestas, 1994). See figure 1 (Hoermann, 1989). for autonomous systems The former one is the usual architecture for building control systems. It consists of decomposing the problem into a series of functional units handling individual tasks such as modeling, execution, planning and perception. <p> In such systems a be-haviour is associated with a specific event. The robot is event driven and the reactivity is pro-duced by the interaction of behaviours. Brooks <ref> (Brooks, 1986) </ref> proposes a behavioural decomposition of the robot's functions and builds an architecture in layers of control corresponding to levels of behaviours (see figure 5). control system based on task-achieving behaviours Behaviours are built up from layers of simple, numeric finite-state machines. <p> To do this, the relationships between the individual algorithms have to be understood and the interaction between them modeled. To account for different types of such interactions, a single arbitration scheme like the activation/inhibition one <ref> (Brooks, 1986) </ref> does not suffice. Lack of extensibility due to rigid arbitration constitutes one of the major drawbacks of current behavioural approaches as mentioned above.
Reference: <author> Chapman, D. </author> <year> (1987). </year> <title> Planing for conjunctive goals. In: </title> <journal> Artificial Intelligence, </journal> <volume> Vol. 32, </volume> <year> 1987, </year> <month> pp.333-377. </month>
Reference-contexts: Current approaches to modifying classical planning to cope with the uncertainties of the real world usually involve replanning, or anticipating all potential failures and planning for them, but this may only compound the difficulties inherent in an already undecidable problem <ref> (Chapman, 1987) </ref>. Another approach might be to have reactive and classical systems running in parallel, with the reactive system taking over when the classical planner fails to construct a plan in time for it to be used.
Reference: <author> Chapman, D. and P. </author> <title> Agre (1986). Abstract reasoning as emergent from concrete activity. In: M.P. </title> <editor> Georgeff and A.L. Lansky (Eds.), </editor> <booktitle> Reasoning About Actions and Plans, Proceedings of the 1986 Workshop, </booktitle> <address> Timberline, Oregon, </address> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1986, </year> <pages> pp. 411-424. </pages>
Reference-contexts: However simple in itself this might appear, its power grows exponentially when several reactive components (behaviours) are connected and used within the same system. Interactions between such reactive components may result to what appears to an observer concrete activity or even purposeful reasoning <ref> (Chapman and Agre, 1986) </ref>. The successes of the reactive approach have shown that it can elicit complex quasi-intelligent appearing behaviour without resorting to use of any memory or model of the environment. Reactive systems sometimes exhibit competence on tasks that may previously have been deemed to require a world model.
Reference: <author> Georgeff, </author> <title> M.P. and A.L. Lansky (1987). Procedural knowledge. </title> <type> Technical Report 411, </type> <institution> Artificial Intelligenge Center, SRI International, </institution> <month> Jan. </month> <year> 1987. </year>
Reference-contexts: For example, in designing walking motions over rough terrain,TCA plans one step, initiates it, and then begins to plan the next step before the leg motion has been completed. Another program for combining planning with reactivity is called PRS. PRS <ref> (Georgeff and Lan-sky, 1987) </ref> is a symbolic robot planning system that interleaves planning and execution. In PRS, goals represent robot behaviours, not world states. PRS contains procedures for turning goals into subgoals or iterations thereof.
Reference: <author> Goto, Y. and A. </author> <month> Stentz </month> <year> (1987). </year> <title> Mobile robot navigation: The CMU system. In: </title> <journal> IEEE Expert. </journal> <month> Winter </month> <year> (1987) </year> <month> 44-54. </month>
Reference-contexts: Each system develops tools for managing conflicting tasks (blackboard, inhibition, ...). We can distinguish between two basic classes among these approaches depending on their topology, i.e., the direction of decomposition: function-based archi tectures (Meystel, 1991), (Noreils and Chatila, 1995), <ref> (Goto and Stentz, 1987) </ref> and behaviour-based architectures (Brooks, 1986), (Kaelbling, 1986), (Tzafestas, 1994). See figure 1 (Hoermann, 1989). for autonomous systems The former one is the usual architecture for building control systems. <p> The components work independently and can thus run in parallel. Figure 4 shows an example of a distributed function-based architec ture (Control system of the mobile robot NavLab of the CMU <ref> (Goto and Stentz, 1987) </ref>). system The system consists of many functional modules communicating through a blackboard. The planner (Captain) is the central component of the whole system. It interprets motion orders and sends appropriate commands to the navigator (Map Navigator).
Reference: <author> Hoermann, A. </author> <year> (1989). </year> <editor> Steuerung und Systemarchitek-tur von fortgeschrittenen autonomen Systemen. In: </editor> <volume> Robotersysteme 5, </volume> <month> 173-185 </month> <year> (1989). </year>
Reference-contexts: We can distinguish between two basic classes among these approaches depending on their topology, i.e., the direction of decomposition: function-based archi tectures (Meystel, 1991), (Noreils and Chatila, 1995), (Goto and Stentz, 1987) and behaviour-based architectures (Brooks, 1986), (Kaelbling, 1986), (Tzafestas, 1994). See figure 1 <ref> (Hoermann, 1989) </ref>. for autonomous systems The former one is the usual architecture for building control systems. It consists of decomposing the problem into a series of functional units handling individual tasks such as modeling, execution, planning and perception.
Reference: <editor> Jones, J.L. and A.M. </editor> <booktitle> Flynn (1993). Mobile robots. Inspiration to implementation. </booktitle> <address> ISBN 1-56881-011-3. </address>
Reference-contexts: The most of the systems try therefore to make storage and manipulation of the model practical by simplifying the world but unfortunately doing so will limit the autonomy of the robot. The modeling/planning paradigm is by nature sequential <ref> (Jones and Flynn, 1993) </ref>. The approach first takes a snapshot of the world, then processes the acquired information, and then acts. If the world happens to change between snapshot and action, the plan may fail. Trying to make the actions of such a program more intelligent may produce undesired results.
Reference: <author> Kaelbling, </author> <title> L.P. (1986). An architecture for intelligent reactive systems. </title> <booktitle> In: Proceedings of the 1986 Workshop Reasoning about Actions and Plans, </booktitle> <publisher> Morgan Kauf-mann, </publisher> <address> San Mateo, CA, </address> <pages> pp. 395-410. </pages>
Reference-contexts: Each system develops tools for managing conflicting tasks (blackboard, inhibition, ...). We can distinguish between two basic classes among these approaches depending on their topology, i.e., the direction of decomposition: function-based archi tectures (Meystel, 1991), (Noreils and Chatila, 1995), (Goto and Stentz, 1987) and behaviour-based architectures (Brooks, 1986), <ref> (Kaelbling, 1986) </ref>, (Tzafestas, 1994). See figure 1 (Hoermann, 1989). for autonomous systems The former one is the usual architecture for building control systems. It consists of decomposing the problem into a series of functional units handling individual tasks such as modeling, execution, planning and perception. <p> This lag in interaction causes the robot to `blindly follow a program or plan without verifying that its operations are having their intended effects' <ref> (Kaelbling, 1986) </ref>. The legitimacy of task generation becomes a critical factor in unpredictable environments, where changes in the robot's world easily effects the success of the task.
Reference: <author> Meystel, A. </author> <year> (1991). </year> <title> Autonomous mobile robots. Vehicles with cognitive control. </title> <booktitle> Singapore: World Scientific, 1991. (World Scientific Series in Automation; 1) ISBN 9971-50-089/2. </booktitle>
Reference-contexts: Each system develops tools for managing conflicting tasks (blackboard, inhibition, ...). We can distinguish between two basic classes among these approaches depending on their topology, i.e., the direction of decomposition: function-based archi tectures <ref> (Meystel, 1991) </ref>, (Noreils and Chatila, 1995), (Goto and Stentz, 1987) and behaviour-based architectures (Brooks, 1986), (Kaelbling, 1986), (Tzafestas, 1994). See figure 1 (Hoermann, 1989). for autonomous systems The former one is the usual architecture for building control systems.
Reference: <author> Noreils, Fabrice R. and Raja G. </author> <month> Chatila </month> <year> (1995). </year> <title> Plan execution monitoring and control architecture for mobile robots. In: </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> Vol. 11, </volume> <pages> No.2, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Each system develops tools for managing conflicting tasks (blackboard, inhibition, ...). We can distinguish between two basic classes among these approaches depending on their topology, i.e., the direction of decomposition: function-based archi tectures (Meystel, 1991), <ref> (Noreils and Chatila, 1995) </ref>, (Goto and Stentz, 1987) and behaviour-based architectures (Brooks, 1986), (Kaelbling, 1986), (Tzafestas, 1994). See figure 1 (Hoermann, 1989). for autonomous systems The former one is the usual architecture for building control systems. <p> The control is entirely wired, so it is permanent and irrevocable. Besides being purely reactive, one drawback of this approach is that the robot is not programmable and is limited to the be-haviours that were implemented by its designer <ref> (Noreils and Chatila, 1995) </ref>. The problem of arbitration (action selection) appears mainly for behavioural architectures. Every behaviour has only a local view of the whole environment. The behaviours must therefore cooperate and coordinate their actions in order to achieve good global results.
Reference: <author> Rembold, U. </author> <year> (1988). </year> <note> Autonome mobile Roboter. In: Robot-ersysteme 4, 17-26 (1988). Karlsruhe. </note>
Reference-contexts: In a hierarchical function-based architecture the functional modules are hierarchical and the whole system is organized in many layers built from the hierarchy levels of the modules. Only neigh-bouring layers have a direct connection. Figure 3 <ref> (Rembold, 1988) </ref> shows an example of a hierarchical function-based structure with three hierarchical modules: sensor data processing, world modeling, and planning. At the path planning level, the planning module produces a motion path that represents a rough description of the real route.
Reference: <author> Rich, E. and K. </author> <title> Knight (1991). </title> <booktitle> Artificial intelligence. 2nd ed. </booktitle> <address> New York: </address> <publisher> Mcgraw-Hill, </publisher> <year> 1991. </year> <note> ISBN 0-07-052263-4. </note>
Reference-contexts: Many attempts have been made to deal with such combining of classical and reactive systems. Most approaches still use planning as the main component. TCA (cited in <ref> (Rich and Knight, 1991) </ref>) is an architecture that combines the idea of reactive systems with traditional AI planning. TCA is a distributed system with centralized control, designed to control autonomous robots for long periods in unstructured environments.
Reference: <author> Simon, H. </author> <year> (1970). </year> <booktitle> Sciences of the artificial. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts. </address>
Reference-contexts: Reactive systems sometimes exhibit competence on tasks that may previously have been deemed to require a world model. An often cited example of a biological reactive system due to Simon <ref> (Simon, 1970) </ref> is an ant; its movements appear to be complex, but the real complexity is that of the environment, and the apparent complexity of the ant's behaviour is the result of a small set of responses to the varied environment.
Reference: <author> Tzafestas, Elpida S. </author> <year> (1994). </year> <title> Implementing reactive algorithms on a cellular control architecture. </title> <booktitle> In: Au-tonome Mobile Systeme 1994, 10. </booktitle> <address> Fachgespraech, Stuttgart, 13. und 14. </address> <month> Oktober </month> <year> 1994. </year>
Reference-contexts: We can distinguish between two basic classes among these approaches depending on their topology, i.e., the direction of decomposition: function-based archi tectures (Meystel, 1991), (Noreils and Chatila, 1995), (Goto and Stentz, 1987) and behaviour-based architectures (Brooks, 1986), (Kaelbling, 1986), <ref> (Tzafestas, 1994) </ref>. See figure 1 (Hoermann, 1989). for autonomous systems The former one is the usual architecture for building control systems. It consists of decomposing the problem into a series of functional units handling individual tasks such as modeling, execution, planning and perception.
References-found: 14

