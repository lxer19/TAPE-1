URL: http://www.genetic-programming.com/AID96.ps
Refering-URL: http://www.genetic-programming.com/jkpubs96.html
Root-URL: http://www.genetic-programming.com/jkpubs96.html
Title: AUTOMATED TOPOLOGY AND SIZING OF ANALOG CIRCUITS AUTOMATED DESIGN OF BOTH THE TOPOLOGY AND SIZING
Author: JOHN R. KOZA, FORREST H BENNETT III, DAVID ANDRE MARTIN A. KEANE 
Address: Chicago, Illinois USA  
Affiliation: Stanford University, Computer Science Department, Stanford, California AND  Econometrics Inc.,  
Abstract: This paper describes an automated process for designing analog electrical circuits based on the principles of natural selection, sexual recombination, and developmental biology. The design process starts with the random creation of a large population of program trees composed of circuit-constructing functions. Each program tree specifies the steps by which a fully developed circuit is to be progressively developed from a common embryonic circuit appropriate for the type of circuit that the user wishes to design. Each fully developed circuit is translated into a netlist, simulated using a modified version of SPICE, and evaluated as to how well it satisfies the user's design requirements. The fitness measure is a user-written computer program that may incorporate any calculable characteristic or combination of characteristics of the circuit, including the circuit's behavior in the time domain, its behavior in the frequency domain, its power consumption, the number of components, cost of components, or surface area occupied by its components. The population of program trees is genetically bred over a series of many generations using genetic programming. Genetic programming is driven by a fitness measure and employs genetic operations such as Darwinian reproduction, sexual recombination (crossover), and occasional mutation to create offspring. This automated evolutionary process produces both the topology of the circuit and the numerical values for each component. This paper describes how genetic programming can evolve the circuit for a difficult-to-design low-pass filter. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Aaserud, O. and Nielsen, I. Ring. </author> <year> 1995. </year> <title> Trends in current analog design: A panel debate. Analog Integrated Circuits and Signal Processing. </title> <type> 7(1) 5-9. </type>
Reference: <author> Andre, David and Koza, John R. </author> <year> 1996. </year> <title> Parallel genetic programming: A scalable implementation using the transputer architecture. </title> <editor> In Angeline, Peter J. and Kinnear, Kenneth E. Jr. (editors). </editor> <booktitle> 1996. Advances in Genetic Programming 2. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Degrauwe, M. </author> <year> 1987. </year> <title> IDAC: An interactive design tool for analog integrated circuits. </title> <journal> I1 Journal of Solid State Circuits . 22:11061116. </journal>
Reference-contexts: It is therefore considered by many to be a form of art rather than a science. " 2. Previous Work Numerous efforts have been made to automate the design process for analog and mixed analog-digital circuits. In an interactive design tool called IDAC for analog integrated circuits <ref> (Degrauwe 1987) </ref>, the user selects various possible topologies for the circuit; IDAC determines the values of the components in each circuit (in relation to the desired behavioral characteristics); and, the user chooses the best sized circuit.
Reference: <author> J. KOZA, F. BENNETT III, D. ANDRE AND M. KEANE Gruau, Frederic. </author> <year> 1992. </year> <title> Cellular Encoding of Genetic Neural Networks. </title> <type> Technical report 92-21. </type> <institution> Laboratoire de l'Informatique du Paralllisme. Ecole Normale Suprieure de Lyon. </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: The book Genetic Programming: On the Programming of Computers by Means of Natural Selection <ref> (Koza 1992) </ref> describes an extension of the genetic algorithm in which the genetic population consists of computer programs (that is, compositions of primitive functions and terminals).
Reference: <author> Gruau, Frederic. </author> <year> 1994. </year> <title> Genetic micro programming of neural networks. </title> <editor> In Kinnear, Kenneth E. Jr. (editor). </editor> <booktitle> Advances in Genetic Programming . Cambridge, </booktitle> <address> MA: </address> <publisher> The MIT Press. </publisher> <pages> Pages 495518. </pages>
Reference: <author> Harjani, R., Rutenbar, R. A., and Carley, L. R. </author> <year> 1989. </year> <title> OASYS: A framework for analog circuit synthesis. </title> <journal> I1 Transactions on Computer Aided Design . 8:12471266. </journal>
Reference-contexts: In an interactive design tool called IDAC for analog integrated circuits (Degrauwe 1987), the user selects various possible topologies for the circuit; IDAC determines the values of the components in each circuit (in relation to the desired behavioral characteristics); and, the user chooses the best sized circuit. In OASYS <ref> (Harjani, Rutenbar, and Carley 1989) </ref> and OPASYN (Koh, Sequin, and Gray 1990), a topology is chosen beforehand based on heuristic rules and the synthesis tool attempts to size the circuit.
Reference: <author> Higuchi, T., Niwa, T., Tanaka, H., Iba, H., de Garis, H. and Furuya, T. </author> <year> 1993. </year> <title> Evolvable hardware Genetic-based generation of electric circuitry at gate and hardware description language (HDL) levels. </title> <type> Electrotechnical Laboratory technical report 93-4, </type> <institution> Tsukuba, </institution> <address> Ibaraki, Japan. </address>
Reference: <author> Holland, John H. </author> <year> 1975. </year> <title> Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, Control, </title> <booktitle> and Artificial Intelligence. </booktitle> <address> Ann Arbor, MI: </address> <publisher> University of Michigan Press. </publisher> <address> Second edition. Cambridge, MA: </address> <publisher> The MIT Press 1992. </publisher>
Reference-contexts: Higuchi et al. (1993) have employed genetic methods to the design of digital circuits using a hardware description language (HDL). In DARWIN (Kruiskamp and Leenaerts 1995), opamp circuits are designed using the genetic algorithm <ref> (Holland 1975) </ref>. In creating the initial population in DARWIN, the topology of each opamp in the population is picked randomly from a preestablished hand-designed set of 24 topologies in order to ensure that each circuit behaves as an opamp.
Reference: <author> Koh, H. Y., Sequin, C. H. and Gray, P. R. </author> <year> 1990. </year> <title> OPASYN: A compiler for MOS operational amplifiers. </title> <journal> I1 Transactions on Computer Aided Design. 9:113125. </journal>
Reference-contexts: In OASYS (Harjani, Rutenbar, and Carley 1989) and OPASYN <ref> (Koh, Sequin, and Gray 1990) </ref>, a topology is chosen beforehand based on heuristic rules and the synthesis tool attempts to size the circuit. If the synthesis tool cannot size the chosen topology correctly, the tool creates a new topology using other heuristic rules and the process continues.
Reference: <author> Koza, John R. </author> <year> 1992. </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference-contexts: The book Genetic Programming: On the Programming of Computers by Means of Natural Selection <ref> (Koza 1992) </ref> describes an extension of the genetic algorithm in which the genetic population consists of computer programs (that is, compositions of primitive functions and terminals).
Reference: <author> Koza, John R. </author> <year> 1994. </year> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher> <editor> Kruiskamp, Wim and Leenaerts, Domine. </editor> <year> 1995. </year> <title> DARWIN: CMOS opamp synthesis by means of a genetic algorithm. </title> <booktitle> Proceedings of the 32nd Design Automation Conference. </booktitle> <address> New York, NY: </address> <publisher> Association for Computing Machinery. </publisher> <pages> Pages 433 438. </pages>
Reference-contexts: Mutation is used sparingly in genetic programming. Genetic Programming II: Automatic Discovery of Reusable Programs <ref> (Koza 1994) </ref> demonstrates that genetic programming can evolve multipart programs consisting of a main program and one or more reusable, parameterized, hierarchically-called subprograms (called automatically defined functions or ADF s). 4.
Reference: <author> Maulik, P. C. Carley, L. R., and Rutenbar, R. A. </author> <year> 1992. </year> <title> A mixed-integer nonlinear programming approach to analog circuit synthesis. </title> <booktitle> Proceedings of the 29th Design Automation Conference. </booktitle> <address> Los Alamitos, CA: </address> <publisher> I1 Press, </publisher> <pages> Pages 698703. </pages>
Reference: <author> Ning, Z., Kole, M., Mouthaan, T., and Wallings, H. </author> <year> 1992. </year> <title> Analog circuit design automation for performance. </title> <booktitle> Proceedings of the 14th CICC . New York: </booktitle> <publisher> I1 Press. </publisher> <pages> Pages 8.2.18.2.4. </pages>
Reference-contexts: If the synthesis tool cannot size the chosen topology correctly, the tool creates a new topology using other heuristic rules and the process continues. The success of these systems depends on the effectiveness of the knowledge base of heuristic rules. In SEAS <ref> (Ning, Kole, Mouthaan, and Wallings 1992) </ref>, evolution is used to modify the topology and simulated annealing is used to size the circuit. Maulik, Carley, and Rutenbar (1992) attempt to handle topology selection and circuit sizing simultaneously using expert design knowledge.
Reference: <author> Quarles, Thomas, Newton, A. R., Pederson, D. O., and Sangiovanni-Vincentelli, A. </author> <year> 1994. </year> <institution> SPICE 3 Version 3F5 User's Manual . Department of Electrical Engineering and Computer Science, University of California, Berkeley, California. </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: Background on SPICE SPICE (an acronym for Simulation Program with Integrated Circuit Emphasis) is a massive family of programs written over several decades at the University of California at Berkeley for the simulation of analog, digital, and mixed analog/digital electrical circuits <ref> (Quarles et al. 1994) </ref>. The input to a SPICE simulation consists of a netlist describing the circuit to be analyzed and certain commands that instruct SPICE as to the type of analysis to be performed and the nature of the output to be produced.
Reference: <author> Rutenbar, R. A. </author> <year> 1993. </year> <title> Analog design automation: Where are we? Where are we going? Proceedings of the l5th I1 CICC . New York: </title> <publisher> I1 Press. </publisher> <pages> Pages 13.1.1-13.1.8. </pages>
Reference-contexts: Considerable progress has been made in automating the design of certain categories of purely digital circuits; however, the design of analog circuits and mixed analog-digital J. KOZA, F. BENNETT III, D. ANDRE AND M. KEANE circuits has not proved to be as amenable to automation <ref> (Rutenbar 1993) </ref>. In discussing "the analog dilemma," Aaserud and Nielsen (1995) observe, "Analog designers are few and far between. In contrast to digital design, most of the analog circuits are still handcrafted by the experts or socalled 'zahs' of analog design.
Reference: <author> Samuel, Arthur L. </author> <year> 1959. </year> <title> Some studies in machine learning using the game of checkers. </title> <journal> IBM Journal of Research and Development. </journal> <volume> 3(3) 210229. </volume>

References-found: 16

