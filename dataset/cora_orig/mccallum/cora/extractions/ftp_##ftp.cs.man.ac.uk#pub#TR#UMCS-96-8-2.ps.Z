URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-96-8-2.ps.Z
Refering-URL: http://www.cs.man.ac.uk/cstechrep/Abstracts/UMCS-96-8-2.html
Root-URL: http://www.cs.man.ac.uk
Title: Comments on Specifying Reactive Systems  
Author: Pierre Collette 
Affiliation: Computer Science University of Manchester  
Pubnum: ISSN 1361 6161  
Abstract: Department of Computer Science University of Manchester Technical Report Series UMCS-96-8-2 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> C.Lewerentz and T.Lindner, eds., </editor> <booktitle> Formal Development of Reactive Systems, Lecture Notes in Computer Science, </booktitle> <volume> vol 891, </volume> <year> 1995. </year>
Reference-contexts: 1 Introduction Typically, a reactive system consists of a controller whose primary role is to maintain some interaction with its environment (generally a set of physical devices). Applying formal methods to the development of reactive systems is not a novel idea. A good starting point to the literature is <ref> [1] </ref>: an impressive number of formal methods have been applied to the same case study, and then compared. The purpose of this report is not to apply yet another formal method to the same case study. <p> Each specification module is first presented with some explanatory notes; methodological comments and other discussions then follow. 2 Presentation of the case study 2.1 Informal description The production cell is concerned with moving plates through a series of devices; a complete description can be found in <ref> [1] </ref>. This experiment (see figure) focuses on the elevating table which moves plates from a belt to a robot. More precisely, plates are delivered by the belt onto the elevating table, then lifted by the table, and finally picked up by a robot arm.
Reference: [2] <author> L.Lamport, </author> <title> The Temporal Logic of Actions, </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol 17, </volume> <year> 1995, </year> <pages> pp 507-534. 18 </pages>
Reference-contexts: Before proceeding, the reader might try to sketch a program that reads the sensors ands write the actuators and then provide convincing arguments for its correctness. 2.2 The specification language Lamport's Temporal Logic of Actions (TLA) <ref> [2] </ref> is a logic with a formal syntax and a formal semantics designed to specify reactive and concurrent systems. TLA + is a (draft) specification language equipped with a number of facilities to present TLA formulas in a structured way.
References-found: 2

