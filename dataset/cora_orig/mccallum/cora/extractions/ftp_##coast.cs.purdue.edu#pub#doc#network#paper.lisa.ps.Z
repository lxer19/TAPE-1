URL: ftp://coast.cs.purdue.edu/pub/doc/network/paper.lisa.ps.Z
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ30.html
Root-URL: http://www.cs.purdue.edu
Title: ACMAINT: An Account Creation and Maintenance System for Distributed UNIX Systems  
Author: LISA IV David A. Curry Samuel D. Kimery, Kent C. De La Croix, and Jeffrey R. Schwab 
Affiliation: SRI International  Purdue University  
Note: Colo. Springs, Colorado  
Date: October 17-19, 1990  
Abstract: ACMAINT is a network-based, centralized database system used to manage computer account creation and maintenance on the Purdue University Engineering Computer Network. ACMAINT allows the system administrator to perform account-related admintrative chores for any machine on the network from any attached system. Using ACMAINT, the system adminstrator can create new user accounts, add or delete accounts for existing users, change the global or per-account information associated with a user, place a message on a user's account(s), and enable or disable a user's account(s). Group information and mail aliases are managed in a similar fashion. ACMAINT utilizes a central database, stored on a single network machine, which contains a copy of all data under ACMAINT's control. The system administrator makes changes to the database via a network server running on the database machine, which in turn makes changes around the network via the use of another network server which runs on each machine. Programs which read, but do not write, the standard UNIX system databases such as the password file do not need to be modified to work with ACMAINT. Programs which write the standard databases must be modified or rewritten to converse with the ACMAINT database server. ACMAINT operates transparently to the user, uses minimal network and system resources, and can be used with binary-only UNIX systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. E. Epstein, C. Vandetta, and J. Sechrest, ``Asmodeus: </author> <title> A Daemon Servant for the System Administrator,'' </title> <booktitle> in USENIX Conference Proceedings, </booktitle> <address> San Francisco, </address> <month> Summer, </month> <year> 1988, </year> <pages> pp. 377-391. </pages>
Reference-contexts: DBD free uid/gid lists transaction queues account database User Programs chsh chfn passwd Utility Programs acgrep mkpasswd Administrator Programs buildaccounts checn ah TRANSD /etc/passwd /etc/group TRANSD /etc/passwd /etc/group TRANSD /etc/passwd /etc/group TRANSD /etc/passwd /etc/group Asmodeus Asmodeus <ref> [1] </ref>, developed at Oregon State University, maintains a database of all user information, and provides access to that database through a series of database daemons. All changes to the database are made through these database daemons, as well as all database accesses.
Reference: [2] <author> M. A. Rosenstein, D. E. Geer, Jr., and P. J. Levine, </author> <title> ``The Athena Service Management System,'' </title> <booktitle> in USENIX Conference Proceedings, </booktitle> <address> Dallas, </address> <month> Winter, </month> <year> 1988, </year> <pages> pp. 203-211. </pages>
Reference-contexts: Thus, the failure of a single machine could easily affect hundreds of others. For these reasons, Yellow Pages was rejected as a solution to our problem. Athena Service Management System The Service Management System (Moira) <ref> [2] </ref>, developed by M.I.T.'s Project Athena, maintains a centralized database of user information, as well as other data, using Ingres from Relational Technology, Inc. A Moira process reads the database each night and generates password files, group files, and so on.
Reference: [3] <author> J. G. Steiner, C. Neuman, J. I. Schiller, ``Ker-beros: </author> <title> An Authentication Service for Open Network Systems,'' </title> <booktitle> in USENIX Conference Proceedings, </booktitle> <address> Dallas, </address> <month> Winter, </month> <year> 1988, </year> <pages> pp. 191-203. </pages>
Reference-contexts: The whole back-off/retry scheme presently in use also needs a major overhaul, and will probably be fixed by going to some sort of per-host bounded exponential back-off scheme. Future Directions In the next version of ACMAINT (Version 2.0), we plan to make several changes and additions, including: * Kerberos <ref> [3] </ref>, from M.I.T.'s Project Athena, will be added for authentication between client programs and the DBD, and between the DBD and TRANSDs. * Support in the TRANSD for the Berkeley ``shadow'' password file mechanism, which will be in the next version of Berkeley UNIX. * The functions of the DBD will
Reference: [4] <author> Sun Microsystems, </author> <title> System and Network Administration, Part No. </title> <address> 800-1733-10, </address> <month> May, </month> <year> 1988, </year> <pages> pp. 349-387. </pages>
Reference-contexts: We had hoped that someone who had already faced our problems would have solved them to our satisfaction. Unfortunately, this was not the case. This section briefly describes the three systems we examined, and our reasons for not using them. Yellow Pages Yellow Pages (YP) <ref> [4] </ref> is a distributed network lookup service from Sun Microsystems. It is perhaps the most widely-known approach to system administration on a large network. YP maintains a set of files, called maps, which contain keys and associated values.
Reference: [5] <institution> UNIX Programmer's Reference Manual, 4.3 Berkeley Software Distribution, Computer Systems Research Group, Computer Science Division, Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <month> April, </month> <year> 1986. </year>
Reference-contexts: The principal program used for all this is ah (Account Handler), which can function either in an interactive fashion or by reading ``batch'' files of commands. ah is described in more detail in a later section Database Format The ACMAINT database is implemented using a version of the Berkeley ndbm <ref> [5] </ref> library which has been modified to allow storage of larger records. The ndbm routines are not called directly; ACMAINT library routines which encode and decode database records to and from the format used in the database are used instead.

References-found: 5

