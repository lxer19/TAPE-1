URL: http://www.cs.umd.edu/~rich/courses/cmsc818G-s98/papers/audsley_deadline.ps
Refering-URL: http://www.cs.umd.edu/~rich/courses/cmsc818G-s98/schedule.html
Root-URL: 
Title: HARD REAL-TIME SCHEDULING: THE DEADLINE-MONOTONIC APPROACH  
Author: N. C. Audsley A. Burns M. F. Richardson A. J. Wellings 
Keyword: computer control, deadlines, mathematical analysis, real-computer computer systems, scheduling theory  
Address: York, York, YO1 5DD, England.  
Affiliation: Department of Computer Science, University of  
Abstract: The scheduling of processes to meet deadlines is a difficult problem often simplified by placing severe restrictions upon the timing characteristics of individual processes. One restriction often introduced is that processes must have deadline equal to period. This paper investigates schedulability tests for sets of periodic processes whose deadlines are permitted to be less than their period. Such a relaxation enables sporadic processes to be directly incorporated without alteration to the process model. Following an introduction outlining the constraints associated with existing scheduling approaches and associated schedulability tests, the deadline-monotonic approach is introduced. New schedulability tests are derived which vary in computational complexity. The tests are shown to be directly applicable to the scheduling of sporadic processes. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Audsley, </author> <title> N.C. (1990). Deadline Monotonic Scheduling. </title> <type> YCS 146, </type> <institution> Dept. of Comp. Sci., Univ. of York. </institution>
Reference-contexts: Rate-monotonic scheduling schedulability tests could be used by reducing the period of individual processes until equal to the deadline. Obviously such tests would not be optimal as the workload on the processor would be over-estimated. New schedulability tests have been developed by the authors for the deadline-monotonic approach <ref> (Audsley, 1990) </ref>. These tests are founded upon the concept of critical instants (Liu, 1973). These represent the times that all processes are released simultaneously. When such an event occurs, we have the worst-case processor demand. <p> Thus, we have formed the basis for a schedulability test: check the executions of all processes for a single execution assuming that all processes are released simultaneously. One such schedulability test is given by 2 : hhhhhhhhhhhhhhhhhh 2,4. for derivation see <ref> (Audsley, 1990) </ref>. "i : 1 i n : C i hhh + I i hhh 1 (1) where I i is a measure of higher priority processes interfering with the execution of t i : 3 j = 1 i - 1 R J T j H J The test states <p> We assume that this occurs at time 0. If the deadline of the sporadic can be guaranteed for the release at a critical instant then all subsequent deadlines are guaranteed. Examples of this approach are given in <ref> (Audsley, 1990) </ref>. No limitations on the combination of periodic and sporadic processes are imposed by this scheme. Indeed, the approach is optimal for a fixed priority scheduling since sporadic processes are treated in exactly the same manner as periodic processes.
Reference: <author> Burns, A. </author> <year> (1991). </year> <title> Scheduling Hard Real-Time Systems: A Review. </title> <journal> Software Eng. Journal, </journal> <volume> 6, </volume> <pages> pp. 116-128. </pages>
Reference-contexts: Schedulability Algorithm 3. SCHEDULING SPORADIC PROCESSES Non-periodic processes are those whose releases are not periodic in nature. Such processes can be subdivided into two categories <ref> (Burns, 1991) </ref>: aperiodic and sporadic. The difference between these categories lies in the nature of their release frequencies. Aperiodic processes are those whose release frequency is unbounded. In the extreme, this could lead to an arbitrarily large number of simultaneously active processes.
Reference: <author> Lehoczky, J.P., L. Sha, and J.K. Strosnider. </author> <year> (1987). </year> <title> Enhanced Aperiodic Responsiveness in Hard Real-Time Environments. </title> <booktitle> Proc IEEE Real-Time Sys. Symp., </booktitle> <pages> pp. 261-270. </pages> - <note> 6 - Lehoczky, </note> <author> J.P., L. Sha, and Y. Ding. </author> <year> (1989). </year> <title> The Rate-Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behaviour. </title> <booktitle> Proc IEEE Real-Time Sys. Symp., </booktitle> <pages> pp. 166-171. </pages>
Reference-contexts: Sporadic Processes: the Polling Approach To allow sporadic processes to execute within the confines of a static schedule (such as that generated by the rate-monotonic algorithm) computation time must be reserved within that schedule. An intuitive solution is to set up a periodic process which polls for sporadic processes <ref> (Lehoczky, 1987) </ref>.
Reference: <author> Leung, J.Y.T., and J. Whitehead. </author> <year> (1982). </year> <title> On the Complexity of Fixed-Priority Scheduling of Periodic, Real-Time Tasks. </title> <booktitle> Perf. Eval. (Netherlands), </booktitle> <volume> 2, </volume> <pages> pp. 237-250. </pages>
Reference-contexts: This work is supported, in part, by the Information Engineering Advanced Technology Programme, Grant GR/F 35920/4/1/1214 (Sha, 1988). One constraint that has remained within rate-monotonic literature is that the deadline and period of a process must be equal. Deadline-monotonic <ref> (Leung, 1982) </ref> priority assignment weakens this constraint within a static priority scheduling scheme. However, no schedu-lability tests were given in (Leung, 1982) for the scheme. The weakening of the "period equals deadline" constraint would benefit the application designer by providing a more flexible process model. <p> One constraint that has remained within rate-monotonic literature is that the deadline and period of a process must be equal. Deadline-monotonic <ref> (Leung, 1982) </ref> priority assignment weakens this constraint within a static priority scheduling scheme. However, no schedu-lability tests were given in (Leung, 1982) for the scheme. The weakening of the "period equals deadline" constraint would benefit the application designer by providing a more flexible process model. For example, precedence constraints in a distributed system can be modelled as a sequence of periodic processes (one per processor). <p> Leung et al <ref> (Leung, 1982) </ref> have defined a priority assignment scheme that caters for processes with the above relationship. This is termed inverse-deadline or deadline-monotonic priority assignment. No schedulability tests were given however. Deadline-monotonic priority ordering is similar in concept to rate-monotonic priority ordering. <p> This is termed inverse-deadline or deadline-monotonic priority assignment. No schedulability tests were given however. Deadline-monotonic priority ordering is similar in concept to rate-monotonic priority ordering. Priorities assigned to processes are inversely proportional to the length of the deadline <ref> (Leung, 1982) </ref>. Thus, the process with the shortest deadline is assigned the highest priority and the longest deadline process is assigned the lowest priority. This priority ordering defaults to a rate-monotonic ordering when period =deadline . Deadline-monotonic priority assignment is an optimal static priority scheme (see theorem 2.4 in (Leung, 1982) <p> deadline <ref> (Leung, 1982) </ref>. Thus, the process with the shortest deadline is assigned the highest priority and the longest deadline process is assigned the lowest priority. This priority ordering defaults to a rate-monotonic ordering when period =deadline . Deadline-monotonic priority assignment is an optimal static priority scheme (see theorem 2.4 in (Leung, 1982) ). The implication of this is that if any static priority scheduling algorithm can schedule a process set where process deadlines are unequal to their periods, an algorithm using deadline-monotonic priority ordering for processes will also schedule that process set.
Reference: <author> Liu, C.L. and J.W. Layland. </author> <year> (1973). </year> <title> Scheduling Algorithms for Multiprogramming in a Hard Real-Time Environment J. </title> <journal> ACM, </journal> <volume> 20, </volume> <pages> pp. 40-61. </pages>
Reference-contexts: The development of appropriate scheduling algorithms has been isolated as one of the crucial challenges for the next generation of real-time systems (Stankovic, 1988). One scheduling method that is used in hard real-time systems is based upon rate-monotonic theory <ref> (Liu, 1973) </ref>. At runtime a preemptive scheduling mechanism is used: the highest priority runnable process is executed. Priorities assigned to processes are inversely proportional to the length of period. That is, the process with the shortest period is assigned the highest priority. <p> Priorities assigned to processes are inversely proportional to the length of period. That is, the process with the shortest period is assigned the highest priority. Rate-monotonic scheduling has several useful properties, including a simple "sufficient and not necessary" schedulability test based on process utilisations <ref> (Liu, 1973) </ref>; and a complex sufficient and necessary schedulability test (Lehoczky, 1989). However, the constraints that it imposes on the process set are severe: processes must be periodic, independent and have deadline equal to period. <p> Obviously such tests would not be optimal as the workload on the processor would be over-estimated. New schedulability tests have been developed by the authors for the deadline-monotonic approach (Audsley, 1990). These tests are founded upon the concept of critical instants <ref> (Liu, 1973) </ref>. These represent the times that all processes are released simultaneously. When such an event occurs, we have the worst-case processor demand. Implicitly, if all processes can meet their deadlines for executions beginning at a critical instant, then they will always meet their deadlines.
Reference: <author> Sha, L., and J.B. Goodenough. </author> <year> (1988). </year> <title> Real-Time Scheduling Theory and Ada. </title> <institution> CMU/SEI-88-TR-33, SEI, Carnegie-Mellon University. </institution>
Reference-contexts: Reported work includes a test to allow aperiodic processes to be included in the theory (Sha, 1989), and a test to incorporate processes that synchronise using semaphores hhhhhhhhhhhhhhhhhh 1. This work is supported, in part, by the Information Engineering Advanced Technology Programme, Grant GR/F 35920/4/1/1214 <ref> (Sha, 1988) </ref>. One constraint that has remained within rate-monotonic literature is that the deadline and period of a process must be equal. Deadline-monotonic (Leung, 1982) priority assignment weakens this constraint within a static priority scheduling scheme. However, no schedu-lability tests were given in (Leung, 1982) for the scheme.
Reference: <author> Sha, L. and J.P. Lehoczky. </author> <year> (1989). </year> <title> Aperiodic Task Scheduling for Hard Real-Time Systems. </title> <journal> J. of Real-Time Sys., </journal> <volume> 1, </volume> <pages> pp. 27-69. </pages>
Reference-contexts: Many papers have successively weakened the constraints imposed by the rate-monotonic approach and have provided associated schedula-bility tests. Reported work includes a test to allow aperiodic processes to be included in the theory <ref> (Sha, 1989) </ref>, and a test to incorporate processes that synchronise using semaphores hhhhhhhhhhhhhhhhhh 1. This work is supported, in part, by the Information Engineering Advanced Technology Programme, Grant GR/F 35920/4/1/1214 (Sha, 1988). <p> Problems arise when sporadic processes require deadlines to be guaranteed. It is difficult to accommodate these within periodic server processes due to the rigidly defined points in time at which the server computation time is replenished. The sporadic server <ref> (Sha, 1989) </ref> provides a solution to this problem. The replenishment times are related to when the sporadic uses computation time rather than merely at the period of the server process. However, this approach still requires additional processes with obvious extra overheads. 3.2.
Reference: <author> Stankovic, J.A. </author> <year> (1988). </year> <title> Real-Time Computing Systems: The Next Generation. </title> <type> COINS Tech. Rep. 88-06, </type> <institution> Dept. of Comp. and Inf. Sci., Univ. of Massachusetts. </institution>
Reference-contexts: The issue of meeting deadlines therefore becomes one of process scheduling. The development of appropriate scheduling algorithms has been isolated as one of the crucial challenges for the next generation of real-time systems <ref> (Stankovic, 1988) </ref>. One scheduling method that is used in hard real-time systems is based upon rate-monotonic theory (Liu, 1973). At runtime a preemptive scheduling mechanism is used: the highest priority runnable process is executed. Priorities assigned to processes are inversely proportional to the length of period.
Reference: <author> Tindell, K. </author> <year> (1990). </year> <title> Allocating Real-Time Tasks (An NP-Hard Problem made Easy). </title> <type> YCS 147, </type> <institution> Dept. of Comp. Sci., Univ. of York. </institution>
Reference-contexts: These periodic processes must therefore complete their computations by a deadline that is before the end of the period. Such a model has been used to good effect in a process allocation scheme <ref> (Tindell, 1990) </ref> in which network communication overhead is traded against local schedulability. The greater the inter-processor traffic the greater the "dead time" and hence the lower the schedulability bound. Tindell's analysis (Tindell, 1990) uses the schedu-lability tests discussed in this paper. <p> Such a model has been used to good effect in a process allocation scheme <ref> (Tindell, 1990) </ref> in which network communication overhead is traded against local schedulability. The greater the inter-processor traffic the greater the "dead time" and hence the lower the schedulability bound. Tindell's analysis (Tindell, 1990) uses the schedu-lability tests discussed in this paper. Another important motivation for weakening the "deadline equal to period" constraint is to cater for sporadic (aperiodic) events in an efficient manner. Here the required response time is not, in general, related to the worst case arrival rate.
References-found: 9

