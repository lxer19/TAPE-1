URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-94-9-2.ps.Z
Refering-URL: http://www.cs.man.ac.uk/cstechrep/Abstracts/UMCS-94-9-2.html
Root-URL: http://www.cs.man.ac.uk
Address: TechnicalReportUMCS--94--9--2  
Affiliation: Computer Science University of Manchester ConstraintLogicPlanning YingZhang,HowardBarringer  
Abstract-found: 0
Intro-found: 1
Reference: <author> Allen, James F. </author> <year> 1990. </year> <title> Formal Models of Planning. Pages 50-54 of: </title> <editor> Allen, J., Hendler, J., & Tate, A. (eds), </editor> <booktitle> Readings in Planning. </booktitle> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: In particular, in a deductive planning framework, a planning problem to be solved can be examined independently from the procedural details of finding a plan. In addition, deductive planning systems are more expressive than classical planning systems because of their use of formal logics <ref> (Allen, 1990) </ref>. However, most deductive planners have the frame problem and they are linear planners (Zhang, 1994). Therefore, they are less efficient than classical nonlinear planners and they are not widely accepted by planning researchers.
Reference: <author> Apt, K. R., & van Emden, M. H. </author> <year> 1982. </year> <title> Contributions to the Theory of Logic Programming. </title> <journal> J. ACM, </journal> <volume> 29(3), </volume> <pages> 841-862. </pages>
Reference: <author> Chapman, David. </author> <year> 1987. </year> <title> Planning for Conjunctive Goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32, </volume> <pages> 333-377. </pages>
Reference-contexts: Therefore, they are less efficient than classical nonlinear planners and they are not widely accepted by planning researchers. On the other hand, without a formal framework, most efficient nonlinear planners are "complicated, heuristic, ill defined AI programs without clear conditions under which they work" <ref> (Chapman, 1987) </ref>. To quote Sacerdoti: [The basic operations of NOAH] were developed in an ad hoc fashion. No attempt has been made to justify the transformations that they perform, or to enable them to generate all transformations.
Reference: <author> Christensen, Jens. </author> <year> 1990. </year> <title> Automatic Abstraction in Planning. </title> <type> Ph.D. thesis, </type> <institution> Stanford University. </institution>
Reference: <author> Colmerauer, A. </author> <year> 1987. </year> <title> Opening the Prolog-III Universe: A New Generation of Prolog Promises Some Powerful Capabilities . BYTE, </title> <booktitle> 12(9), </booktitle> <pages> 177-182. </pages>
Reference: <author> Colmerauer, A. </author> <year> 1990. </year> <title> An Introduction to Prolog III. </title> <journal> Communications of the ACM, </journal> <volume> 33(7), 69- 90. </volume>
Reference: <author> Hill, R. </author> <year> 1974. </year> <title> LUSH-Resolution and Its Completeness. </title> <type> Tech. rept. DCL Memo 78. </type> <institution> Dept. of Artificial Intelligence, Univ. of Edinburgh. </institution>
Reference-contexts: Firstly, we assume that all literals of the goal are ground. The first theoretical result of logic programming connects the logical and operational meaning of logic programs. This result is due to Hill <ref> (Hill, 1974) </ref> and it can be summarized as follows. A SLD breadth-first theorem prover will provide a yes answer to the query Q = :G if and only if P [ G is unsatisfiable.
Reference: <author> Jaffar, J., & Lassez, J-L. </author> <year> 1987a. </year> <title> Constraint Logic Programming. </title> <booktitle> Pages 111-119 of: Proceedings of the Fourteenth ACM Symposium of the Principles of Programming Languages. </booktitle>
Reference: <author> Jaffar, J., & Lassez, J-L. </author> <year> 1987b. </year> <title> From Unification to Constraints. </title> <booktitle> Pages 1 - 18 of: Proceedings of the 6th Conference on Logic Programming. </booktitle>
Reference-contexts: This combination provides a promising formal framework, constraint logic planning, for nonlinear planning. In constraint logic programming, "the basic components of a problem are stated as constraints. The problem as a whole is then represented by putting the various constraints together by means of rules" <ref> (Jaffar & Lassez, 1987b) </ref>. In our constraint logic planning, the basic components of nonlinear plans, i.e., the actions and the temporal relations among them, are represented as constraints. <p> Corresponding to the second result, a substitution is a correct answer for P and G if and only if (B 1 ; : : : ; B m ) is true with respect to the least Herbrand model of P . Jaffar and Lassez <ref> (Jaffar & Lassez, 1987b) </ref> proved that the main theoretical results in logic programming remain applicable in constraint logic programming, provided that the domains being considered satisfy certain conditions. <p> Also, the corresponding theory of such a structure, i.e. T = D and T 6= D , is trivially satisfaction-complete. That is Jaffar and Lassez's conditions are satisfied for handling (data) object selection by constraint solving. Based on the results in <ref> (Jaffar & Lassez, 1987b) </ref>, all the results achieved in previous sections remain applicable for this extension, i.e. the planner is sound and complete. 8 Discussion In this paper, we propose a nonlinear deductive planning approach, constraint logic planning, and we prove that constraint logic planning is sound and complete.
Reference: <author> Lloyd, J. W. </author> <year> 1987. </year> <booktitle> Foundations of Logic Programming. 2nd edn. </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Then, corresponding to the first result, for a definite program and a definite goal G, every computed answer is a correct answer and every correct answer is an instance of a computed answer <ref> (Lloyd, 1987) </ref>. Corresponding to the second result, a substitution is a correct answer for P and G if and only if (B 1 ; : : : ; B m ) is true with respect to the least Herbrand model of P . <p> T 1 and Hold (On (B; C); T 1 ; T 2 )jExec (P uton (B; T; A); T 1 ; T 1 ) ^ T 0 OE T 1 are both logical consequences of the planning program and the set of action constraints. 5 Refer to Proposition 5.1 in <ref> (Lloyd, 1987) </ref>. 6 Refer to Proposition 5.1 in (Lloyd, 1987). 7 Refer to Proposition 5.4 in (Lloyd, 1987). 14 With this definition, we can give the theorems about the declarative semantics of planning programs. <p> 1 ; T 2 )jExec (P uton (B; T; A); T 1 ; T 1 ) ^ T 0 OE T 1 are both logical consequences of the planning program and the set of action constraints. 5 Refer to Proposition 5.1 in <ref> (Lloyd, 1987) </ref>. 6 Refer to Proposition 5.1 in (Lloyd, 1987). 7 Refer to Proposition 5.4 in (Lloyd, 1987). 14 With this definition, we can give the theorems about the declarative semantics of planning programs. The following theorem states that every element in T P [ " ! is a logical consequence of P [ . <p> T; A); T 1 ; T 1 ) ^ T 0 OE T 1 are both logical consequences of the planning program and the set of action constraints. 5 Refer to Proposition 5.1 in <ref> (Lloyd, 1987) </ref>. 6 Refer to Proposition 5.1 in (Lloyd, 1987). 7 Refer to Proposition 5.4 in (Lloyd, 1987). 14 With this definition, we can give the theorems about the declarative semantics of planning programs. The following theorem states that every element in T P [ " ! is a logical consequence of P [ .
Reference: <author> Pednault, E. P. D. </author> <year> 1991. </year> <title> Generalizing Nonlinear Planning to Handle Complex Goals and Actions with Context-Dependent Effects. </title> <booktitle> In: Proceedings 12th International Joint Conference on Artificial Intelligence. </booktitle>
Reference: <author> Sacerdoti, Earl D. </author> <year> 1977. </year> <title> A Structure for Plans and Behaviour. </title> <publisher> Elsevier North-Holland, Inc. </publisher>
Reference-contexts: However, it should be possible to define an algebra of plan transformations : : : a body of formal theory about the ways in which interacting subgoals can be dealt with <ref> (Sacerdoti, 1977) </ref>. Providing a formal framework for nonlinear planning motivates the work presented in this report. Procedurally speaking, nonlinear planning is an activity of constraint solving. In a nonlinear planning system, generally, plans are partially described at least until their execution.
Reference: <author> Sakai, K., & Aiba, A. </author> <year> 1990 </year> <month> (Feb). </month> <title> CAL: A Theoretical Background of Constraint Logic Programming and its Applications. </title> <type> Tech. </type> <institution> rept. TR-537. ICOT. </institution>
Reference: <author> Stefik, M. J. </author> <year> 1981. </year> <title> Planning with Constraints. </title> <journal> Artificial Intelligence, </journal> <volume> 16, </volume> <pages> 111-140. </pages> <editor> van Emden, M. H., & Kowalski, R. A. </editor> <year> 1976. </year> <title> The Semantics of Predicate Logic as a Programming Language. </title> <journal> J. ACM, </journal> <month> Oct., </month> <pages> 733-742. </pages>
Reference: <author> Zhang, Ying. </author> <year> 1994 </year> <month> (May). </month> <title> Constraint Logic Planning: A Formal Framework for Nonlinear Planning. </title> <type> Ph.D. thesis, </type> <institution> Manchester Univ., Computer Science Dept. </institution>
Reference-contexts: In addition, deductive planning systems are more expressive than classical planning systems because of their use of formal logics (Allen, 1990). However, most deductive planners have the frame problem and they are linear planners <ref> (Zhang, 1994) </ref>. Therefore, they are less efficient than classical nonlinear planners and they are not widely accepted by planning researchers. On the other hand, without a formal framework, most efficient nonlinear planners are "complicated, heuristic, ill defined AI programs without clear conditions under which they work" (Chapman, 1987). <p> For example, the property On (B; T ) holds true over the interval that is started from T 0 and is ended at t 2 . 4 T 0 T t 2 On (B,C) Clear (B) On (A,T) Clear (C) Clear (A) Clear (B) Puton (B,T,C) Puton (A,T,B) In <ref> (Zhang et al., 1994) </ref>, we proposed a set of restrictions on actions and domain constraints. We showed that the set of restrictions can prevent actions from being improperly defined. <p> Therefore, a definite constraint planning program can also be regarded as a set of actions. The restrictions on actions introduced in <ref> (Zhang et al., 1994) </ref> are added to a definite planning program in the same way as to a set of actions. <p> Furthermore our constraint logic planning inherently embeds a domain independent search heuristic. We showed that a nonlinear plan is inconsistent with an action constraint implies that the temporal model of the plan is not consistent with a domain constraint <ref> (Zhang, 1994) </ref>. <p> This paper is a modified version of part of Zhang's PhD thesis <ref> (Zhang, 1994) </ref>. The work was partially supported by the British Council and the State Education Commission of China.
Reference: <author> Zhang, Ying, & Barringer, Howard. </author> <year> 1994a </year> <month> (July). </month> <title> A Temporal Logic For Nonlinear Planning. </title> <type> Tech. </type> <institution> rept. MUCS-94-7-1. Department of Computer Science, University of Manchester, Manchester, M13 9PL. </institution>
Reference-contexts: Constraint logic planning is believed to be even more efficient than classical nonlinear planning. 2 Preliminaries 2.1 A Reified Temporal Logic for Nonlinear Planning Deductive planning is a reasoning process within some formal logic. In <ref> (Zhang & Bar-ringer, 1994a) </ref>, we presented a point based, reified interval temporal logic for nonlinear planning.
Reference: <author> Zhang, Ying, & Barringer, Howard. </author> <year> 1994b </year> <month> (September). </month> <title> Action Constraint Maintenance. </title> <type> Tech. </type> <institution> rept. MUCS-94-9-1. Department of Computer Science, University of Manch-ester, Manchester, M13 9PL. </institution>
Reference-contexts: In constraint logic programming, the central elements in the semantics are a many sorted structure and the corresponding theory. In constraint logic planning, a temporal model of the temporal logic corresponds to a many sorted structure and a set of specific temporal formulas: action constraints introduced in <ref> (Zhang & Barringer, 1994b) </ref> 1 gives the central part of the corresponding theory. In constraint logic programming, a constraint is satisfiable in a many sorted structure if and only if it is satisfiable in the corresponding theory. <p> In constraint logic programming, a constraint is satisfiable in a many sorted structure if and only if it is satisfiable in the corresponding theory. In constraint logic planning, to check if a constraint is consistent is to check if it is satisfiable in the corresponding theory. In <ref> (Zhang & Barringer, 1994b) </ref>, we proved that a constraint is consistent with the corresponding theory if and only if the nonlinear plan that the constraint represents is conflict free. This result lays down the foundation for soundness and completeness of constraint logic planning. <p> In <ref> (Zhang & Barringer, 1994b) </ref>, we showed that, from a set of domain constraints D , we can obtained a set of temporal formulas , which we termed action constraints. <p> We have shown that a nonlinear plan is conflict free if and only if the plan satisfies the corresponding set of action constraints <ref> (Zhang & Barringer, 1994b) </ref>. In planning, we are only interested in the plans that are conflict free. Therefore, finally, C is also required to be consistent with . <p> If a nonlinear plan does not satisfy , all its possible expansions will not satisfy <ref> (Zhang & Barringer, 1994b) </ref>. Therefore, the fact that C is consistent implies that any subconstraint of C is consistent. <p> Consistency checking for a nonlinear plan and the corresponding action constraints is, at least, not more computationally complicated than preventing the most recently achieved goal from being destroyed by the previously introduced actions using modal truth criteria <ref> (Zhang & Barringer, 1994b) </ref>. However, constraint logic planning achieves and maintains the necessary truth for all the goals involved in planning processes and, therefore, guarantees conflict freeness.
Reference: <author> Zhang, Ying, Barringer, Howard, & Carlisle, David. </author> <year> 1994 </year> <month> (August). </month> <title> Domain Constraint Maintenance. </title> <type> Tech. </type> <institution> rept. MUCS-94-8-1. Department of Computer Science, University of Manchester, Manchester, M13 9PL. </institution> <month> 26 </month>
Reference-contexts: In addition, deductive planning systems are more expressive than classical planning systems because of their use of formal logics (Allen, 1990). However, most deductive planners have the frame problem and they are linear planners <ref> (Zhang, 1994) </ref>. Therefore, they are less efficient than classical nonlinear planners and they are not widely accepted by planning researchers. On the other hand, without a formal framework, most efficient nonlinear planners are "complicated, heuristic, ill defined AI programs without clear conditions under which they work" (Chapman, 1987). <p> For example, the property On (B; T ) holds true over the interval that is started from T 0 and is ended at t 2 . 4 T 0 T t 2 On (B,C) Clear (B) On (A,T) Clear (C) Clear (A) Clear (B) Puton (B,T,C) Puton (A,T,B) In <ref> (Zhang et al., 1994) </ref>, we proposed a set of restrictions on actions and domain constraints. We showed that the set of restrictions can prevent actions from being improperly defined. <p> Therefore, a definite constraint planning program can also be regarded as a set of actions. The restrictions on actions introduced in <ref> (Zhang et al., 1994) </ref> are added to a definite planning program in the same way as to a set of actions. <p> Furthermore our constraint logic planning inherently embeds a domain independent search heuristic. We showed that a nonlinear plan is inconsistent with an action constraint implies that the temporal model of the plan is not consistent with a domain constraint <ref> (Zhang, 1994) </ref>. <p> This paper is a modified version of part of Zhang's PhD thesis <ref> (Zhang, 1994) </ref>. The work was partially supported by the British Council and the State Education Commission of China.
References-found: 18

