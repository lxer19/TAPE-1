URL: ftp://ftp.cs.arizona.edu/ftol/papers/adaptive.ps.Z
Refering-URL: http://www.cs.arizona.edu/cactus/public.html
Root-URL: http://www.cs.arizona.edu
Title: Adaptive Distributed and Fault-Tolerant Systems  
Author: Matti A. Hiltunen and Richard D. Schlichting 
Date: June 9, 1995  
Address: Tucson, AZ 85721, USA  
Affiliation: Department of Computer Science University of Arizona  
Abstract: An adaptive computing system is one that modifies its behavior based on changes in the environment. Since sites connected by a local-area network inherently have to deal with network congestion and the failure of other sites, distributed systems can be viewed as an important subclass of adaptive systems. As such, use of adaptive methods in this context has the same potential advantages of improved efficiency and structural simplicity as for adaptive systems in general. This paper describes a model for adaptive systems that can be applied in many scenarios arising in distributed and fault-tolerant systems. This model divides the adaptation process into three different phaseschange detection, agreement, and actionthat can be used to describe existing algorithms that deal with change, as well as to develop new adaptive algorithms. In addition to clarifying the logical structure of such algorithms, this model can also serve as a unifying implementation framework. Several adaptive algorithms are given as examples, including an adaptive network transmission protocol and a group membership protocol. A technique for implementing the model in a distributed system using small segments of code called micro-protocols and an event-driven execution paradigm is also presented.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Avizienis. </author> <title> The N-Version approach to fault-tolerant software. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-11(12):1491-1501, </volume> <month> Dec </month> <year> 1985. </year>
Reference-contexts: Furthermore, adaptive systems are important in the area of dependable computing since the actions taken by fault-tolerant systems in response to failures are often adaptive in nature [10]. An example in this area is the SCOP (Self-Configuring Optimistic Programming) scheme [7], an adaptive version of N-version programming <ref> [1] </ref>. In this scheme, multiple alternative algorithms are executed, with the actual number of alternatives used being determined at runtime based on the level of confidence desired. Adaptive algorithms have also been used to diagnose faulty processors in distributed systems [20, 5, 21].
Reference: [2] <author> P. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1987. </year>
Reference-contexts: one. 3.1.3 Adaptive concurrency control protocol The problem of concurrency control in database systems is to ensure that two or more concurrent transactions do not leave the database in an inconsistent state, that is, a state that could not have been reached by executing the transactions in some serial order <ref> [2] </ref>. There are numerous such concurrency control algorithms, which can be broadly classified as pessimistic versus optimistic. The pessimistic algorithms are based on preventing conflicts that can lead to inconsistencies using locking or some other technique.
Reference: [3] <author> B. Bhargava, K. Friesen, A. Helal, and J. Riedl. </author> <title> Adaptability experiments in the RAID distributed database system. </title> <booktitle> In Proceedings of the 9th IEEE Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 76-85, </pages> <year> 1990. </year>
Reference-contexts: Other examples include concurrency fl This work supported in part by the National Science Foundation under grant CCR-9003161 and the Office of Naval Research under grant N00014-91-J-1015. control of database transactions <ref> [3] </ref>, real-time parallel systems [6, 29], and high-speed communication protocols [28]. Furthermore, adaptive systems are important in the area of dependable computing since the actions taken by fault-tolerant systems in response to failures are often adaptive in nature [10]. <p> By design, optimistic algorithms work well if the system is lightly loaded whereas pessimistic ones are better when the system is heavily loaded. Therefore, it is advantageous to design an adaptive concurrency control protocol that changes between optimistic and pessimistic depending on the load. See, for example, <ref> [3] </ref> for more discussion on adaptive concurrency control. 3.2 Adapting to failures This section examines examples of adaptive algorithms where the change in the environment is a processor or communication link failure.
Reference: [4] <author> N. Bhatti and R. Schlichting. </author> <title> A system for constructing configurable high-level protocols. </title> <booktitle> In Proceedings of the SIGCOMM '95 Symposium, </booktitle> <month> Aug </month> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: This approach has been applied in a number of areas related to fault-tolerant protocols [13, 15, 14], and is currently being implemented as an extension to the x-kernel [16] on the Mach operating system <ref> [4] </ref>. The major components of this approach are micro-protocols, events, and a software framework: 1. Micro-protocols: Implement a well-defined property; structured as a collection of event handlers, which are procedures that are triggered when events for which they are registered are detected. 2.
Reference: [5] <author> R. Bianchini and R. Buskens. </author> <title> An adaptive distributed system-level diagnosis algorithm and its implementation. </title> <booktitle> In Proceedings of the 21st International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 222-229, </pages> <month> Jun </month> <year> 1991. </year>
Reference-contexts: In this scheme, multiple alternative algorithms are executed, with the actual number of alternatives used being determined at runtime based on the level of confidence desired. Adaptive algorithms have also been used to diagnose faulty processors in distributed systems <ref> [20, 5, 21] </ref>. In this paper, we describe a model for adaptive systems. Although primarily motivated by its use for constructing fault-tolerant systems, the model can be applied to a wide range of other situations that arise in the context of distributed systems.
Reference: [6] <author> T. Bihari and K. Schwan. </author> <title> Dynamic adaptation of real-time software. </title> <journal> ACM Transaction on Computer Systems, </journal> <volume> 9(2) </volume> <pages> 143-174, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Other examples include concurrency fl This work supported in part by the National Science Foundation under grant CCR-9003161 and the Office of Naval Research under grant N00014-91-J-1015. control of database transactions [3], real-time parallel systems <ref> [6, 29] </ref>, and high-speed communication protocols [28]. Furthermore, adaptive systems are important in the area of dependable computing since the actions taken by fault-tolerant systems in response to failures are often adaptive in nature [10].
Reference: [7] <author> A. Bondavalli, F. Di Giandomenico, and J. Xu. </author> <title> A cost-effective and flexible scheme for software fault tolerance. </title> <journal> Journal of Computer Systems Science and Engineering, </journal> <volume> 8 </volume> <pages> 234-244, </pages> <year> 1993. </year>
Reference-contexts: Furthermore, adaptive systems are important in the area of dependable computing since the actions taken by fault-tolerant systems in response to failures are often adaptive in nature [10]. An example in this area is the SCOP (Self-Configuring Optimistic Programming) scheme <ref> [7] </ref>, an adaptive version of N-version programming [1]. In this scheme, multiple alternative algorithms are executed, with the actual number of alternatives used being determined at runtime based on the level of confidence desired. Adaptive algorithms have also been used to diagnose faulty processors in distributed systems [20, 5, 21].
Reference: [8] <author> F. Cristian, H. Aghili, R. Strong, and D. Dolev. </author> <title> Atomic broadcast: From simple message diffusion to Byzantine agreement. </title> <booktitle> In Proceedings of the 15th International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 200-206, </pages> <month> Jun </month> <year> 1985. </year>
Reference-contexts: Action Policy: Start negative ack protocol starting from the missing message (s). Timing Policy: Immediately. Note that the solution is not much cheaper than running negative acks to begin with. One advantage, however, is that it reduces the number of unnecessary nacks and retransmissions. 3.3.3 Synchronous atomic broadcast In <ref> [8] </ref>, a set of broadcast protocols that tolerate different classes of failures is described.
Reference: [9] <author> F. Cristian. </author> <title> Understanding fault-tolerant distributed systems. </title> <journal> Communications of ACM, </journal> <volume> 34(2) </volume> <pages> 56-78, </pages> <month> Feb </month> <year> 1991. </year>
Reference-contexts: This model divides the adaptation process into three different phaseschange detection, agreement, and actionthat can be used as a common means for describing various algorithms such as reliable transmission protocols and network services oriented towards fault-tolerance such as group membership services <ref> [9, 19, 23, 27] </ref>. This serves not only to clarify the logical structure and relationship of such algorithms, but also to provide a unifying implementation framework. This paper is organized as follows. First, the general model of adaptive systems is described in Section 2.
Reference: [10] <author> J. Goldberg, I. Greenberg, and T. Lawrence. </author> <title> Adaptive fault tolerance. </title> <booktitle> In Proceedings of the IEEE Workshop on Advances in Parallel and Distributed Systems, </booktitle> <pages> pages 127-132, </pages> <month> Oct </month> <year> 1993. </year>
Reference-contexts: Furthermore, adaptive systems are important in the area of dependable computing since the actions taken by fault-tolerant systems in response to failures are often adaptive in nature <ref> [10] </ref>. An example in this area is the SCOP (Self-Configuring Optimistic Programming) scheme [7], an adaptive version of N-version programming [1]. In this scheme, multiple alternative algorithms are executed, with the actual number of alternatives used being determined at runtime based on the level of confidence desired.
Reference: [11] <author> A. Gopal and S. Toueg. </author> <title> Inconsistency and contamination. </title> <booktitle> In Proceedings of the 10th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 257-272, </pages> <year> 1991. </year>
Reference-contexts: This can cause one or more sites to enter an inconsistent state relative to other sites, and raises the possibility of system contamination should a site in an inconsistent state send a message <ref> [11] </ref>. Adaptivity can be used to address such a scenario and increase the overall dependability by allowing the system to continue providing message ordering despite the change in the environment. <p> Similarly, to deal with loss of k-connectivity, the system can change to using a reliability protocol for asynchronous networks, such as the use of negative acknowledgements. Detection of such changes can be implemented using a scheme similar to the one presented in <ref> [11] </ref>. Assume the sender of a message, say site p, includes the sequence of messages delivered to the user at site p, DEL p , in the header of each message sent. Now, a site q that receives this message can check its DEL q against DEL p . <p> If this is not the case, the total order must have been violated. This basic idea can be optimized to cut down the overhead on each message either by using the approach taken in <ref> [11] </ref> of sending message counts instead of the complete history, or by using the fact that stable messagesthat is, messages received by every sitecan be removed from the message delivery history.
Reference: [12] <author> M. Hiltunen and R. Schlichting. </author> <title> An approach to constructing modular fault-tolerant protocols. </title> <booktitle> In Proceedings of the 12th IEEE Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 105-114, </pages> <month> Oct </month> <year> 1993. </year> <month> 16 </month>
Reference-contexts: Next, Section 4 shows how algorithms written using the model can easily be implemented using an approach for constructing network subsystems based on small segments of code called micro-protocols <ref> [12] </ref>. Finally, Section 5 offers some conclusions. 2 A General Model for Adaptive Systems Phases of Adaptation. An adaptive system built on a distributed computing platform can be modeled as responding to changes with the following three phases: 1. Change Detection. <p> More work is needed to understand this type of adaptation to discover if such an approach is cost-effective in practice. 4 Implementing the Model 4.1 Event-driven protocol composition This section shows how the general model defined above can be conveniently implemented using a new approach to constructing complex network systems <ref> [12] </ref>. The approach allows small sections of code called micro-protocols to be configured together to yield a composite protocol that can then be composed in a traditional hierarchical manner with other protocols.
Reference: [13] <author> M. Hiltunen and R. Schlichting. </author> <title> A configurable membership service. </title> <type> Technical Report 94-37, </type> <institution> Department of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <year> 1994. </year>
Reference-contexts: Micro-protocols within a given composite protocol are executed in an event-driven manner, which enhances configurability by minimizing explicit references between micro-protocols. This approach has been applied in a number of areas related to fault-tolerant protocols <ref> [13, 15, 14] </ref>, and is currently being implemented as an extension to the x-kernel [16] on the Mach operating system [4]. The major components of this approach are micro-protocols, events, and a software framework: 1.
Reference: [14] <author> M. Hiltunen and R. Schlichting. </author> <title> Properties of membership services. </title> <booktitle> In Proceedings of the 2nd International Symposium on Autonomous Decentralized Systems, </booktitle> <pages> pages 200-207, </pages> <month> Apr </month> <year> 1995. </year>
Reference-contexts: Micro-protocols within a given composite protocol are executed in an event-driven manner, which enhances configurability by minimizing explicit references between micro-protocols. This approach has been applied in a number of areas related to fault-tolerant protocols <ref> [13, 15, 14] </ref>, and is currently being implemented as an extension to the x-kernel [16] on the Mach operating system [4]. The major components of this approach are micro-protocols, events, and a software framework: 1.
Reference: [15] <author> M. Hiltunen and R. Schlichting. </author> <title> Constructing a configurable group RPC service. </title> <booktitle> In Proceedings of the 15th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 288-295, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Micro-protocols within a given composite protocol are executed in an event-driven manner, which enhances configurability by minimizing explicit references between micro-protocols. This approach has been applied in a number of areas related to fault-tolerant protocols <ref> [13, 15, 14] </ref>, and is currently being implemented as an extension to the x-kernel [16] on the Mach operating system [4]. The major components of this approach are micro-protocols, events, and a software framework: 1.
Reference: [16] <author> N. Hutchinson and L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: Micro-protocols within a given composite protocol are executed in an event-driven manner, which enhances configurability by minimizing explicit references between micro-protocols. This approach has been applied in a number of areas related to fault-tolerant protocols [13, 15, 14], and is currently being implemented as an extension to the x-kernel <ref> [16] </ref> on the Mach operating system [4]. The major components of this approach are micro-protocols, events, and a software framework: 1. Micro-protocols: Implement a well-defined property; structured as a collection of event handlers, which are procedures that are triggered when events for which they are registered are detected. 2.
Reference: [17] <author> V. Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> In Proceedings of the SIGCOMM '88 Symposium, </booktitle> <pages> pages 314-332, </pages> <month> Aug </month> <year> 1988. </year>
Reference-contexts: Numerous other examples of adaptive mechanisms can be found. One of the most widely used is the Transmission Control Protocol (TCP) of the Internet protocol suite, which uses adaptive mechanisms for flow control, retransmission, and congestion control <ref> [17] </ref>. Other examples include concurrency fl This work supported in part by the National Science Foundation under grant CCR-9003161 and the Office of Naval Research under grant N00014-91-J-1015. control of database transactions [3], real-time parallel systems [6, 29], and high-speed communication protocols [28].
Reference: [18] <author> M. Kaashoek, A. Tanenbaum, S. Hummel, and H. Bal. </author> <title> An efficient reliable broadcast protocol. </title> <journal> Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 5-19, </pages> <month> Oct </month> <year> 1989. </year>
Reference-contexts: This example is treated in more detail in Section 4.2 below. 8 3.2.3 Centralized total ordering + detection of server failure A simple and straightforward way to achieve a consistent total ordering of messages in a distributed system is to use a central ordering server <ref> [18] </ref>. In this scheme, messages are first sent directly to the ordering server, which then retransmits them in some total order to all receivers. Alternatively, messages can be multicast directly to the receivers, with the central ordering service only sending ordering messages [22].
Reference: [19] <author> H. Kopetz, G. Grunsteidl, and J. Reisinger. </author> <title> Fault-tolerant membership service in a synchronous distributed real-time system. </title> <editor> In A. Avizienis and J. Laprie, editors, </editor> <booktitle> Dependable Computing for Critical Applications, </booktitle> <pages> pages 411-429. </pages> <publisher> Springer-Verlag, </publisher> <address> Vienna, </address> <year> 1991. </year>
Reference-contexts: This model divides the adaptation process into three different phaseschange detection, agreement, and actionthat can be used as a common means for describing various algorithms such as reliable transmission protocols and network services oriented towards fault-tolerance such as group membership services <ref> [9, 19, 23, 27] </ref>. This serves not only to clarify the logical structure and relationship of such algorithms, but also to provide a unifying implementation framework. This paper is organized as follows. First, the general model of adaptive systems is described in Section 2.
Reference: [20] <author> S. Kreutzer and S. Hakimi. </author> <title> Adaptive fault identification in two new diagnostic models. </title> <booktitle> In Proceedings of the 21st Allerton Conference on Communication, Control, and Computing, </booktitle> <pages> pages 353-362, </pages> <year> 1983. </year>
Reference-contexts: In this scheme, multiple alternative algorithms are executed, with the actual number of alternatives used being determined at runtime based on the level of confidence desired. Adaptive algorithms have also been used to diagnose faulty processors in distributed systems <ref> [20, 5, 21] </ref>. In this paper, we describe a model for adaptive systems. Although primarily motivated by its use for constructing fault-tolerant systems, the model can be applied to a wide range of other situations that arise in the context of distributed systems.
Reference: [21] <author> J. Lee, H. Youn, and A. Singh. </author> <title> Adaptive voting for faulty (VFF) node scheme for distributed self-diagnosis. </title> <booktitle> In Proceedings of the 23rd International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 480-489, </pages> <month> Jun </month> <year> 1993. </year>
Reference-contexts: In this scheme, multiple alternative algorithms are executed, with the actual number of alternatives used being determined at runtime based on the level of confidence desired. Adaptive algorithms have also been used to diagnose faulty processors in distributed systems <ref> [20, 5, 21] </ref>. In this paper, we describe a model for adaptive systems. Although primarily motivated by its use for constructing fault-tolerant systems, the model can be applied to a wide range of other situations that arise in the context of distributed systems.
Reference: [22] <author> K. Marzullo, S. Armstrong, and A. Freier. </author> <title> Multicast transport protocol. </title> <type> Technical report, </type> <year> 1992. </year> <title> Internet RPC 1301. </title>
Reference-contexts: In this scheme, messages are first sent directly to the ordering server, which then retransmits them in some total order to all receivers. Alternatively, messages can be multicast directly to the receivers, with the central ordering service only sending ordering messages <ref> [22] </ref>. Like any centralized service, a total ordering service of this type suffers from the problem of how to handle the failure of the central authority.
Reference: [23] <author> S. Mishra, L. Peterson, and R. Schlichting. </author> <title> A membership protocol based on partial order. </title> <editor> In J. Meyer and R. Schlichting, editors, </editor> <booktitle> Dependable Computing for Critical Applications 2, </booktitle> <pages> pages 309-331. </pages> <publisher> Springer-Verlag, </publisher> <address> Vienna, </address> <year> 1992. </year>
Reference-contexts: This model divides the adaptation process into three different phaseschange detection, agreement, and actionthat can be used as a common means for describing various algorithms such as reliable transmission protocols and network services oriented towards fault-tolerance such as group membership services <ref> [9, 19, 23, 27] </ref>. This serves not only to clarify the logical structure and relationship of such algorithms, but also to provide a unifying implementation framework. This paper is organized as follows. First, the general model of adaptive systems is described in Section 2.
Reference: [24] <author> S. Mishra, L. Peterson, and R. Schlichting. </author> <title> Consul: A communication substrate for fault-tolerant distributed programs. </title> <journal> Distributed System Engineering, </journal> <volume> 1 </volume> <pages> 87-103, </pages> <year> 1993. </year>
Reference-contexts: For example, if a centralized algorithm is being used to coordinate some activity, and the coordinator site fails, a different site must start running the appropriate coordination algorithms. Such a change is adaptive in nature. As an example, consider a membership protocol like that used in the Consul system <ref> [24] </ref>. This algorithm is based on examining successive waves (i.e., levels) of the context graph of causally-ordered messages maintained by the Psync group communication mechanism [25]. A membership change in this scheme can be described using the general model of adaptive systems as follows. 7 1. Change Detection.
Reference: [25] <author> L. Peterson, N. Buchholz, and R. Schlichting. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> Aug </month> <year> 1989. </year>
Reference-contexts: Such a change is adaptive in nature. As an example, consider a membership protocol like that used in the Consul system [24]. This algorithm is based on examining successive waves (i.e., levels) of the context graph of causally-ordered messages maintained by the Psync group communication mechanism <ref> [25] </ref>. A membership change in this scheme can be described using the general model of adaptive systems as follows. 7 1. Change Detection. Detection Policy: If no message has arrived from a site within a T-second interval, suspect failure and multicast failure suspicion message. 2. Agreement.
Reference: [26] <author> D. Powell. </author> <title> Failure mode assumptions and assumption coverage. </title> <booktitle> In Proceedings of the 22nd International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 386-395, </pages> <year> 1992. </year>
Reference-contexts: If the environment changes to point x outside the correctness domain of algorithm 1, an adaptive action is taken to replace 1 by 2. 1 This categorization can be refined further if desired <ref> [26] </ref>. 9 Note that this approach is only practical if detecting the change in failure class is cheaper than tolerating the more difficult failure class to begin with.
Reference: [27] <author> A. Ricciardi and K. Birman. </author> <title> Using process groups to implement failure detection in asynchronous environments. </title> <booktitle> In Proceedings of the 10th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 341-353, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: This model divides the adaptation process into three different phaseschange detection, agreement, and actionthat can be used as a common means for describing various algorithms such as reliable transmission protocols and network services oriented towards fault-tolerance such as group membership services <ref> [9, 19, 23, 27] </ref>. This serves not only to clarify the logical structure and relationship of such algorithms, but also to provide a unifying implementation framework. This paper is organized as follows. First, the general model of adaptive systems is described in Section 2.
Reference: [28] <author> D. Schmidt, D. Box, and T. Suda. </author> <title> ADAPTIVE: A dynamically assembled protocol transformation, integration, and evaluation environment. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 5(4) </volume> <pages> 269-286, </pages> <month> Jun </month> <year> 1993. </year>
Reference-contexts: Other examples include concurrency fl This work supported in part by the National Science Foundation under grant CCR-9003161 and the Office of Naval Research under grant N00014-91-J-1015. control of database transactions [3], real-time parallel systems [6, 29], and high-speed communication protocols <ref> [28] </ref>. Furthermore, adaptive systems are important in the area of dependable computing since the actions taken by fault-tolerant systems in response to failures are often adaptive in nature [10]. An example in this area is the SCOP (Self-Configuring Optimistic Programming) scheme [7], an adaptive version of N-version programming [1].
Reference: [29] <author> K. Schwan, T. Bihari, and B. Blake. </author> <title> Adaptive, reliable software for distributed and parallel real-time systems. </title> <booktitle> In Proceedings of the 6th IEEE Symposium on Reliability in Distributed Software and Database Systems, </booktitle> <pages> pages 32-42, </pages> <month> Mar </month> <year> 1987. </year> <month> 17 </month>
Reference-contexts: Other examples include concurrency fl This work supported in part by the National Science Foundation under grant CCR-9003161 and the Office of Naval Research under grant N00014-91-J-1015. control of database transactions [3], real-time parallel systems <ref> [6, 29] </ref>, and high-speed communication protocols [28]. Furthermore, adaptive systems are important in the area of dependable computing since the actions taken by fault-tolerant systems in response to failures are often adaptive in nature [10].
References-found: 29

