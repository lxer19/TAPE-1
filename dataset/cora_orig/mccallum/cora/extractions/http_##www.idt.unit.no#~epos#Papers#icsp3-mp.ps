URL: http://www.idt.unit.no/~epos/Papers/icsp3-mp.ps
Refering-URL: http://www.idt.unit.no/~epos/bibliografia.html
Root-URL: 
Title: Classification of Meta-processes and their Models  
Author: Minh N. Nguyen and Reidar Conradi 
Address: Trondheim, Norway  
Affiliation: Division of Computer Systems and Telematics Norwegian Institute of Technology  
Abstract: The paper is aiming at identifying a taxonomy to characterize meta-process categories, and their characteristics. The taxonomy will be applied to several existing software process-centered support environments (PSEs) and their support technologies. Up to now, meta-process has been poorly understood, and thus hardly exploited properly. In some PSEs, meta-process is however supported but its properties are not reflected clearly in any systematic framework. In this paper, some typical characteristics of meta-processes are first recognized by clarifying the reasons why the meta-process is necessary for software development and maintenance; which effects they have to other components or fragments of a software process; how, and when they should be accomplished; and who is responsible for performing them. These characteristics will also contribute to recognize the phases of meta-process in software engineering. Identified characteristics and phases, serving as a framework for assessment, are then applied to evaluate five European PSEs, namely Adele2, EPOS, SPADE, Process Weaver and Process Wise Integrator. The intention of this evaluation is to illustrate strengths and weaknesses of the identified PSE systems, providing motivation for their further research and enhancement. In addition, it is also an initial step to validate and demonstrate the usefulness of this proposed assessment framework w.r.t. studying software meta-process. 
Abstract-found: 1
Intro-found: 1
Reference: [BEM93] <author> Noureddine Belkhatir, Jacky Estublier, and Walcelio Melo. </author> <title> Software Process Model and Work Space Control in the Adele System. </title> <booktitle> In [Ost93], </booktitle> <pages> pages 2-11, </pages> <year> 1993. </year>
Reference-contexts: A brief summary of each PSE will first be described, including its meta-process, and the evaluation is then presented in a matrix form. Adele2 <ref> [BEM93] </ref>, [BEM94] has been developed at LGI at University of Grenoble since 1982. Adele2 is primarily a software engineering database with process extensions. It is sold as a commercial product by Ver-ilog, and is in daily use by over a dozen major software developers in Europe.
Reference: [BEM94] <author> Noureddine Belkhatir, Jacky Estublier, and Walcelio Melo. ADELE-TEMPO: </author> <title> An Environment to Support Process Modelling and Enac-tion, </title> <booktitle> chapter 8, </booktitle> <pages> pages 187-222. </pages> <note> In [FKe94], </note> <year> 1994. </year>
Reference-contexts: A brief summary of each PSE will first be described, including its meta-process, and the evaluation is then presented in a matrix form. Adele2 [BEM93], <ref> [BEM94] </ref> has been developed at LGI at University of Grenoble since 1982. Adele2 is primarily a software engineering database with process extensions. It is sold as a commercial product by Ver-ilog, and is in daily use by over a dozen major software developers in Europe.
Reference: [BFG93] <author> Sergio Bandinelli, Alfonso Fuggetta, and Carlo Ghezzi. </author> <title> Software Process Model Evolution in the SPADE Environment. </title> <journal> IEEE Transactions on Software Engineering, </journal> <pages> pages 1128-1144, </pages> <month> De-cember </month> <year> 1993. </year>
Reference-contexts: In addition, a change request to process schemas can also be captured through a programmatic interface and analyzed before actually implemented. Platform: Unix and X; done in C and Prolog. SPADE <ref> [BFG93] </ref>, [BFGL94] has been developed at Politecnico di Milano since 1990. It uses generalized and reflective PetriNets expressed in the SLANG PML. These nets can be dynamically built and enacted a Process Engine. Enaction usually means calling external tools via a BMS (DEC-FUSE).
Reference: [BFGL94] <author> Sergio Bandinelli, Alfonso Fuggetta, Carlo Ghezzi, and Luigi Lavazza. SPADE: </author> <title> An Environment for Software Process Analysis, Design and Enactment, </title> <booktitle> chapter 9, </booktitle> <pages> pages 223-248. </pages> <note> In [FKe94], </note> <year> 1994. </year>
Reference-contexts: In addition, a change request to process schemas can also be captured through a programmatic interface and analyzed before actually implemented. Platform: Unix and X; done in C and Prolog. SPADE [BFG93], <ref> [BFGL94] </ref> has been developed at Politecnico di Milano since 1990. It uses generalized and reflective PetriNets expressed in the SLANG PML. These nets can be dynamically built and enacted a Process Engine. Enaction usually means calling external tools via a BMS (DEC-FUSE).
Reference: [BGR + 94] <author> R.F. Bruynooghe, R.M. Greenwood, I. Robert-son, J. Sa, and B.C. Warboys. PADM: </author> <title> Towards a Total Process Modelling System, </title> <booktitle> chapter 12, </booktitle> <pages> pages 293-334. </pages> <note> In [FKe94], </note> <year> 1994. </year>
Reference-contexts: The process modelling focusses on three perspectives: project management (method level); team-interworking (cooperative procedure), and individual team member (work context). The platform is a network of personal workstations (MS-DOS, Unix, Mac etc.) under Unix servers; done in C and C++. Process Wise Integrator <ref> [BGR + 94] </ref> has been developed since 1986 as part in the IPSE 2.5 project in the UK, the University of Manchester being a project partner. It is now hardened into a commercial product by ICL.
Reference: [CFF93] <author> Reidar Conradi, Christer Fernstrom, and Al-fonso Fuggetta. </author> <title> A Conceptual Framework for Evolving Software Processes. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 18(4) </volume> <pages> 26-34, </pages> <note> Oc-tober 1993. Also as EPOS TR 187, NTH, 9 Nov. 1992, 26 p., Trondheim. </note>
Reference-contexts: As described in [Lon93], a software process is a sequence of activities being performed to produce a software system satisfying a set of specifications. The software process is further defined in <ref> [CFF93] </ref> to contain a production process (p-p), involving development of software artifacts and its related production support (e.g. methodology and CASE tools); a meta-process (m-p) governing how the entire process (incl. itself) and process support are evolved over time. <p> The p-p and m-p represent the external, real-world, while the process support (p-s) includes process formalisms (e.g. PMLs, charts, graphics), models of p-p and m-p, and associated process tools (e.g. editor, analyzer, planner, simulator, interpreter, monitor) manipulating and enacting those models. <ref> [CFF93] </ref> also proposes that the process model is composed of template, en-actable and enacting variations. The first one is the process model expressed by the PML. <p> How can the changes be implemented/installed, and be propagated according to which policies (When), and by which human roles (by Whom) <ref> [CFF93] </ref>. Attaching to those questions some suggestions for answers are given, but other alternatives inevitably exist. The benefit of having a predefined set of answers is in making the evaluation more oriented to some vital aspects, rather than being diverse and from which no meaningful conclusion can be drawn.
Reference: [CFFS92] <author> Reidar Conradi, Christer Fernstrom, Alfonso Fuggetta, and Robert Snowdon. </author> <title> Towards a Reference Framework for Process Concepts. </title> <booktitle> In [Der92], </booktitle> <pages> pages 3-17, </pages> <year> 1992. </year>
Reference-contexts: The benefit of process modelling, i.e creating internal descriptions of software processes, has obviously facilitated communication, understanding, management and assessment of real-world processes which are characterized as being complex, large and strongly human-oriented <ref> [CFFS92] </ref>. Appropriate process support in form of guidelines should be achieved without constraining human creativity and work organization. In other words, the internal models, expressed by one or several formal notations, i.e. Process Modelling Languages (PMLs), should be capable of covering different aspects of the software process. <p> Due to the importance and probable substantial impact of the meta-process could likely cause, roles and responsibility should clearly identified to prevent from making serious disasters. In <ref> [CFFS92] </ref> a set of human roles operating on processes are defined as process owner, process technology provider, process designer, process manager, and process agent. Here, the following restrictive characteristics are especially of interest: 1. Free: Every role can freely access and make changes via a common interface.
Reference: [CHL + 94] <author> R. Conradi, M. Hagaseth, J.O. Larsen, M.N. Nguyen, B. Munch, P.H. Westby, W. Zhu, M.L. Jaccheri, and C. Liu. EPOS: </author> <title> Object-Oriented Cooperative Process Modelling, </title> <booktitle> chapter 3, </booktitle> <pages> pages 33-70. </pages> <note> In [FKe94], </note> <year> 1994. </year>
Reference-contexts: A connection expresses how processes collaborate. The rational of introducing role w.r.t. process evolution is that an instance can be dynamically bound to an arbitrary role at any time. The platform is Unix and X; done in C++. EPOS [JC93], and <ref> [CHL + 94] </ref> has been developed at NTH in Trondheim since 1989. It uses a uniformly versioned, client-server EPOSDB to store process models in a nested transaction context. A process model is a typed task network, with metatypes to allow reflection.
Reference: [Der92] <editor> Jean-Claude Derniame, editor. </editor> <booktitle> Proc. Second European Workshop on Software Process Technology (EWSPT'92), </booktitle> <address> Sept. 7-8 1992, Trond-heim, Norway. </address> <publisher> Springer Verlag LNCS 635, </publisher> <month> September </month> <year> 1992. </year>
Reference: [DF94] <author> Mark Dowson and Christer Fernstrtm. </author> <title> Towards Requirements for Enactment Mechanisms. </title> <booktitle> In [War94], </booktitle> <pages> pages 90-106, </pages> <year> 1994. </year>
Reference-contexts: Enact: (Ena) executing the enacting variation of process model, including invocation of production tools in the real-world to guide and assist the pro cess performance in the real-world. By annotating three process domains (definition, enactment and performance) defined in <ref> [DF94] </ref> with the identified meta-process phases, figure 2 below illustrate the total picture of software process. 4 Evaluation of some PSEs w.r.t. meta-processes We have chosen five European PSEs - Adele2, EPOS, SPADE, Process Weaver (PWe), and Process Wise Integrator (PWI) to be applied to the identified assessment structure, describing meta-process
Reference: [Fer93] <author> Christer Fernstrom. </author> <title> Process WEAVER: Adding Process Support to UNIX. </title> <booktitle> In [Ost93], </booktitle> <pages> pages 12-26, </pages> <year> 1993. </year>
Reference-contexts: Activity definitions, type definitions and active copy (enacting variation of process model) are modeled both as code for execution and as datum for modification. Several strategies for propagation of process change may be applied. Platform: Unix and X; done in C++ Process Weaver <ref> [Fer93] </ref> has been developed since 1988, and is now a commercial product from Cap Gemini Innovation in Grenoble. Its emphasis is on flexible support of simple taskflow for decentralized process performers, and is not limited to software processes.
Reference: [FKe94] <author> Anthony Finkelstein, Jeff Kramer, and Bashar Nuseibeh (ed). </author> <title> PROMOTER book: Software Process Modelling and Technology. </title> <publisher> Research Studies Press LTD, </publisher> <year> 1994. </year>
Reference: [Hum89] <author> Watts S. Humphrey. </author> <title> Managing The Software Process. </title> <booktitle> SEI Series in Software Engineering, </booktitle> <pages> 493 pages. </pages> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: In the last decade, the software process has been recognized as a crucial component to enhance software product and quality [LB85]. By continuous improvement, software process will produce a consequently high quality product within a predictable budget and at a lower cost <ref> [Hum89] </ref>. The benefit of process modelling, i.e creating internal descriptions of software processes, has obviously facilitated communication, understanding, management and assessment of real-world processes which are characterized as being complex, large and strongly human-oriented [CFFS92]. <p> Specifically, the meta-process can be perceived as similar case to the framework used to improve the process maturity of a software organization described in Capability Maturity Model of SEI <ref> [Hum89] </ref>. Up to now, the meta-process has been poorly understood and therefore barely exploited to its full potential. Some PSEs provide partial meta-process support as accidentally a consequence of their architecture. <p> Method: describes which methods/models are relied on or applied for assessment of product and process quality, and thus for steering the evolution process. Some standardised methods are e.g. ISO 9000, Capability Maturity Model from SEI <ref> [Hum89] </ref>, or special methods such as e.g. Risk Sensitive Model (ability to identify, analyze, resolve and control risks), Skill Development Model (ability to train people and retain knowledge from past projects), and Business Soundness Model (ability to consistently satisfy customers, grow the market share, and increase profit). 3.
Reference: [JC93] <author> M. Letizia Jaccheri and Reidar Conradi. </author> <title> Techniques for Process Model Evolution in EPOS. </title> <journal> IEEE Transactions on Software Engineering, </journal> <pages> pages 1145-1156, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: A connection expresses how processes collaborate. The rational of introducing role w.r.t. process evolution is that an instance can be dynamically bound to an arbitrary role at any time. The platform is Unix and X; done in C++. EPOS <ref> [JC93] </ref>, and [CHL + 94] has been developed at NTH in Trondheim since 1989. It uses a uniformly versioned, client-server EPOSDB to store process models in a nested transaction context. A process model is a typed task network, with metatypes to allow reflection.
Reference: [LB85] <author> M. M. Lehman and L. A. Belady. </author> <title> Program Evolution | Processes of Software Change. </title> <publisher> Academic Press, </publisher> <address> 538 p., </address> <year> 1985. </year>
Reference-contexts: Phone: +47 73594485, Fax: +47 73594466, Email: nguyen@idt.unit.no. by other fields, e.g. , enterprise modelling and business process re-engineering. In the last decade, the software process has been recognized as a crucial component to enhance software product and quality <ref> [LB85] </ref>. By continuous improvement, software process will produce a consequently high quality product within a predictable budget and at a lower cost [Hum89].
Reference: [Lon93] <author> Jacques Lonchamp. </author> <title> A Structured Conceptual and Terminological Framework for Software Process Engineering. </title> <booktitle> In [Ost93], </booktitle> <pages> pages 41-53, </pages> <year> 1993. </year>
Reference-contexts: This therefore motivates the work of this paper which attempts to identify some typical characteristics and phases of meta-process and to examine how these properties are actually realized in some existing software process technologies. As described in <ref> [Lon93] </ref>, a software process is a sequence of activities being performed to produce a software system satisfying a set of specifications.
Reference: [Lon94] <author> Jacques Lonchamp. </author> <title> An Assessment Exercise, </title> <booktitle> chapter 13, </booktitle> <pages> pages 335-356. </pages> <note> In [FKe94], </note> <year> 1994. </year>
Reference-contexts: Most PSEs are weak on early meta-process phases while later phases are almost fully supported. This phenomenon can be explained by the fact that guiding, expressing and enforcing is most substantial concern in software process modelling <ref> [Lon94] </ref>. Monitoring and measuring for process improvement have been evaluated as secondary concern.
Reference: [Mad92] <author> Nazim H. Madhavji. </author> <title> Environment evolution: The prism model of changes. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> SE-18(5):380-392, </volume> <month> May </month> <year> 1992. </year>
Reference-contexts: It requires thus that the dependencies between relevant model fragments and between enacting variations must be explicitly represented (as in Prism Model of Changes <ref> [Mad92] </ref>). (c) Scope of changes: describing how new change is incorporated to the existing model.
Reference: [NC94] <author> Minh N. Nguyen and Reidar Conradi. </author> <note> SPELL: </note>
Reference-contexts: A process model is a typed task network, with metatypes to allow reflection. There are process tools to edit process schemas and product descriptions expressed in the SPELL PML (a reflective, concurrent, object-oriented Prolog) <ref> [NC94] </ref>. There is a Planner tool to automatically and incrementally (re)construct task networks, and a Process Engine to enact them. These enacting process models may again activate production tools through a Broadcast Message Server (BMS).
References-found: 19

