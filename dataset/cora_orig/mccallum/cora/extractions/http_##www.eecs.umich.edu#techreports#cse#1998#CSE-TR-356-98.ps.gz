URL: http://www.eecs.umich.edu/techreports/cse/1998/CSE-TR-356-98.ps.gz
Refering-URL: http://www.eecs.umich.edu/home/techreports/cse98.html
Root-URL: http://www.cs.umich.edu
Email: fzou, farnam@eecs.umich.edug  
Title: Real-Time Primary-Backup (RTPB) Replication with Temporal Consistency Guarantees  
Author: Hengming Zou and Farnam Jahanian 
Address: Ann Arbor, Michigan 48109  
Affiliation: Real-time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: A common approach to building fault-tolerant distributed systems is to replicate servers that fail independently. The objective is to give the clients the illusion of service that is provided by a single server. The main approaches for structuring fault-tolerant servers are passive and active replication. This paper presents a primary-backup (passive) replication scheme for supporting fault-tolerant real-time applications. The proposed scheme, called Real-Time PB (RTPB) replication service, is an elegant and simple approach that provides the benefits of fault-tolerance, real-time access, and temporal consistency guarantees that are not otherwise easily attainable. This paper formally defines two types of temporal consistency, namely external temporal consistency and inter-object temporal consistency. By introducing a key concept called phase variance, we are able to build our temporal consistency models and derive necessary and sufficient conditions that can be used as the basis for update and transmission scheduling that achieve temporal consistency guarantees. Furthermore, we prove that the term phase variance used in the models can be bounded under various scheduling algorithms, namely EDF, Rate Monotonic [20], and Distance-Constrained Scheduling [9]. The paper also presents an implementation of the real-time primary-backup replication scheme with the aforementioned temporal consistency models. This implementation was developed within the x-kernel architecture on the MK 7.2 microkernel from the Open Group. The results of a detailed performance evaluation of this implementation is also discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Tarek Abdelzaher, Anees Shaikh, Scott Johnson, Farnam Jahanian, and Kang Shin. Rtcast: </author> <title> Lightweight multicast for real-time process groups. </title> <booktitle> In IEEE Real-Time Technology and Applications Symposium, </booktitle> <pages> pages 250-259, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: A Fault-Tolerant Unit (FTU) in a MARS system consists of a collection of replicated components operating in active redundancy. A component, consisting of a node and its application software, relies on a number of hardware and software mechanisms for error detection to ensure a fail-silent behavior. 14 RTCAST <ref> [1] </ref> is a lightweight fault-tolerant multicast and membership service for real-time process groups which exchange periodic and aperiodic messages. The service supports bounded-time message transport, atomicity, and order for multicasts within a group of communicating processes in the presence of processor crashes and communication failures.
Reference: [2] <author> R. Alonso, D. Barbara, and H. Garcia-Molina. </author> <title> Data caching issues in an information retrieval system. </title> <journal> ACM Transaction on Database Systems, </journal> <volume> 15(3) </volume> <pages> 359-384, </pages> <month> September </month> <year> 1990. </year>
Reference: [3] <author> P. Alsberg and J. Day. </author> <title> A principle for resilient sharing of distributed resources. </title> <booktitle> In Proceedings of the IEEE, Int'l Conf. on Software Engineering, </booktitle> <year> 1976. </year>
Reference-contexts: A common approach to building fault-tolerant distributed systems is to replicate servers that fail independently. The objective is to give the clients the illusion of service that is provided by a single server. The main approaches for structuring fault-tolerant servers are passive and active replication. In passive replication schemes <ref> [3, 4, 23] </ref>, the system state is maintained by a primary and one or more backup servers. The primary communicates its local state to the backups so that a backup can take over when a failure of the primary is detected.
Reference: [4] <author> J.F. Bartlett. </author> <title> Tandem: A non-stop kernel. </title> <booktitle> In ACM Operating System Review, </booktitle> <volume> volume 15, </volume> <year> 1991. </year>
Reference-contexts: A common approach to building fault-tolerant distributed systems is to replicate servers that fail independently. The objective is to give the clients the illusion of service that is provided by a single server. The main approaches for structuring fault-tolerant servers are passive and active replication. In passive replication schemes <ref> [3, 4, 23] </ref>, the system state is maintained by a primary and one or more backup servers. The primary communicates its local state to the backups so that a backup can take over when a failure of the primary is detected.
Reference: [5] <author> K.P. Birman. </author> <title> The process group approach to reliable distributed computing. </title> <type> Technical Report TR 91-1216, </type> <institution> Cornell University, </institution> <month> July </month> <year> 1991. </year>
Reference: [6] <author> F.B.Schneider. </author> <title> Implementing fault-tolerant services using the state machine approach: A tutorial. </title> <journal> ACM Transaction on Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 299-319, </pages> <month> December </month> <year> 1990. </year>
Reference: [7] <author> F.Cristian, B.Dancy, and J.Dehn. </author> <title> Fault-tolerance in the advanced automation system. </title> <booktitle> In Proceedings Int'l Symp. on Fault-Tolerant Computing, </booktitle> <pages> pages 160-170, </pages> <month> June </month> <year> 1990. </year>
Reference: [8] <author> M. Gagliardi, R.Rajkumar, and L. Sha. </author> <title> Designing for evolvability: Building blocks for evolvable real-time systems. </title> <booktitle> In Proc. Real-Time Technology and Applications Symposium, </booktitle> <pages> pages 100-109, </pages> <month> june </month> <year> 1996. </year>
Reference-contexts: It guarantees agreement on membership among the communicating processors, and ensures that membership changes resulting from processor joins or departures are atomic and ordered with respect to multicast messages. Both MARS and RTCAST are based on active replication whereas RTPB is a passive scheme. Rajkumar <ref> [8, 26] </ref> present a publisher/subscriber model for distributed real-time systems. It provides a simple user interface for publishing messages on a logical "channel", and for subscribing to selected channels as needed by each application.
Reference: [9] <author> Ching-Chih Han and Kwei-Jay Lin. </author> <title> Scheduling distance-constrained real-time tasks. </title> <booktitle> In Proceedings Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1992. </year>
Reference-contexts: Zero bound of phase variance Thus far, we have demonstrated that phase variance can indeed be bounded by some known number. In fact, we can ensure that the phase variance is exactly zero in most cases through a direct application of the schedulabilities results from Distant-Constrained Scheduling (DCS) <ref> [9] </ref>. The DCS algorithm is used to schedule real-time tasks in which consecutive executions of the same task must be bounded, i.e. the finish time for one execution is no more than ffi time units apart from the next execution. <p> The solution proposed to distanced-constrained scheduling is largely based on the Pinwheel problem. A set of schedulers including Sa, Sx, and Sr that can achieve the purpose have been discussed <ref> [9] </ref>. Consider a task set T = T 1 ; T 2 ; : : : ; T n . Suppose e i and c i denote the execution time and distance constraint of task T i , respectively. <p> Suppose e i and c i denote the execution time and distance constraint of task T i , respectively. Any two invocations of task T i is bounded by c i . Han and Lin <ref> [9] </ref> have shown that the task set can be feasibly scheduled under scheduler S r if P n If we substitute p i for c i , then each invocation of task T i is executed at exactly the same interval p i after some iterations (could be 0).
Reference: [10] <author> H.F.Korth, N.Soparkar, and A. Silberschatz. </author> <title> Triggered real-time databases with consistency constraints. </title> <booktitle> In Proc. Int'l Conf. on Very Large Data Bases, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: In particular, a number of researchers have observed that serializability is too strict as a correctness criterion for real-time databases. Relaxed correctness criteria facilitate higher concurrency by permitting a limited amount of inconsistency in how a transaction views the database state <ref> [10, 13, 15-19, 25, 27] </ref>. For example, a recent work [16] [15] proposed a class of real-time data access protocols called SSP (Similarity Stack Protocol) applicable to distributed real-time systems.
Reference: [11] <author> H.Kopetz, A.Damm, C.Koza, M. Mulazzani, W.Schwabl, C.Senft, and R.Zainlinger. </author> <title> Distributed fault-tolerant real-time systems: The mars approach. </title> <booktitle> In Proceedings of the IEEE Micro, </booktitle> <pages> pages 25-40, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: Hence, the problem of server replication posses additional challenges in a real-time environment. In recent years, several experimental projects have begun to address the problem of replication in distributed hard real-time systems. For example, MARS <ref> [11] </ref> is a time-triggered distributed real-time system: its architecture is based on the assumption that the worst-case load is determined apriori at design time, and the system response to external events is cyclic at predetermined time-intervals. The MARS architecture provides fault-tolerance by implementing active redundancy.
Reference: [12] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: The x-kernel is a protocol development environment which explicitly implements the protocol graph <ref> [12] </ref>. The protocol objects communicate with each other through a set of x-kernel uniform protocol interfaces. A given instance of the x-kernel can be configured by specifying a protocol graph in the configuration file.
Reference: [13] <author> B. Kao and H. Garcia-Molina. </author> <title> An overview of real-time database systems. </title> <editor> In S.H. Son, editor, </editor> <booktitle> Advances in Real-Time systems, </booktitle> <pages> pages 463-486. </pages> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: In particular, a number of researchers have observed that serializability is too strict as a correctness criterion for real-time databases. Relaxed correctness criteria facilitate higher concurrency by permitting a limited amount of inconsistency in how a transaction views the database state <ref> [10, 13, 15-19, 25, 27] </ref>. For example, a recent work [16] [15] proposed a class of real-time data access protocols called SSP (Similarity Stack Protocol) applicable to distributed real-time systems.
Reference: [14] <author> H. Kopetz and P. Verissimo. </author> <title> Real time and dependability concepts. In Sape Mullender, editor, </title> <journal> Distributed Systems, </journal> <volume> chapter 16, </volume> <pages> pages 411-446. </pages> <publisher> Addison-Wesley, </publisher> <address> 2 edition, </address> <year> 1993. </year>
Reference-contexts: Embedded real-time systems are in essence responsive: they interact with the environment by "reacting to stimuli of external events and producing results, within specified timing constraints" <ref> [14] </ref>. To guarantee this responsiveness, a system must be able to tolerate failures. Thus, a fundamental requirement of fault-tolerant real-time systems is that they provide the expected service even in the presence of failures.
Reference: [15] <author> Tei-Wei Kuo, D. Locke, and F. Wang. </author> <title> Error propagation analysis of real-time data intensive application. </title> <booktitle> In IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1997. </year> <month> 16 </month>
Reference-contexts: Relaxed correctness criteria facilitate higher concurrency by permitting a limited amount of inconsistency in how a transaction views the database state [10, 13, 15-19, 25, 27]. For example, a recent work [16] <ref> [15] </ref> proposed a class of real-time data access protocols called SSP (Similarity Stack Protocol) applicable to distributed real-time systems. The correctness of the SSP protocol is justified by the concept of similarity which allows different but sufficiently timely data to be used in a computation without adversely affecting the outcome.
Reference: [16] <author> Tei-Wei Kuo and Aloysius K. Mok. </author> <title> Ssp: a semantics-based protocol for real-time data access. </title> <booktitle> In Pro--ceedings of IEEE 14th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: Relaxed correctness criteria facilitate higher concurrency by permitting a limited amount of inconsistency in how a transaction views the database state [10, 13, 15-19, 25, 27]. For example, a recent work <ref> [16] </ref> [15] proposed a class of real-time data access protocols called SSP (Similarity Stack Protocol) applicable to distributed real-time systems.
Reference: [17] <author> Tei-Wei Kuo and Aloysius K. Mok. </author> <title> Real-time database similarity semantics and resource scheduling. </title> <booktitle> In ACM SIGMOD Record, </booktitle> <month> March </month> <year> 1997. </year>
Reference: [18] <author> K-J Lin. </author> <title> Consistency issues in real-time database systems. </title> <booktitle> In Proc. 22nd Hawaii International Conference on System Sciences, </booktitle> <pages> pages 654-661, </pages> <month> January </month> <year> 1989. </year>
Reference: [19] <author> Kwei-Jay Lin and Farnam Jahanian. </author> <title> Issues and applications. In Sang Son, editor, Real-time Database Systems. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1997. </year>
Reference: [20] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard real-time environment. </title> <journal> Journal of the ACM, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: Fortunately, we are able to derive better bounds on phase variance for various scheduling algorithms. Theorem 2: Inequalities v i xp i e i and v i (x:p i )=(n (2 1=n 1)) e i are satisfiable under EDF and Rate Monotonic Algorithm <ref> [20] </ref>, respectively. Here n is the number of tasks on the particular processor, x is the utilization rate of the task set. A proof is supplied in the appendix. <p> For example, the primary will perform a schedulability test based on the rate-monotonic scheduling algorithm <ref> [20] </ref>. If all existing update tasks as well as the newly added update task for object i are schedulable, the object is admitted into the system. Each inter-object temporal constraint is converted into two external temporal constraints according to the results derived in Section 3.
Reference: [21] <author> J.W.S. Liu, W.-K. Shih, and K.-J. Lin. </author> <title> Imprecise computation. </title> <booktitle> In Proceedings of IEEE, </booktitle> <volume> volume 82, </volume> <pages> pages 83-94, </pages> <month> Jan </month> <year> 1994. </year>
Reference-contexts: Instead, relaxed correctness criteria are used in scheduling database transactions which consequently permits a higher degree of concurrency. Similarly, imprecise computations exploit the fact that some computations can be completed successfully even if the input data is not totally up to date <ref> [21] </ref>. Different consistency semantics exist and are used in diverse applications depending on the objective and environment of the tasks. <p> SSP schedules are deadlock-free, subject to limited blocking and do not use locks. Furthermore, a schedulability bound can be given for the SSP scheduler. Simulation results show that SSP is especially useful for scheduling real-time data access on multiprocessor systems. Similarly, the notion of imprecise computation <ref> [21] </ref> explores weaker application semantics and guarantees timely completion of tasks by relaxing the accuracy requirements of the computation. This is particularly useful in applications that use discrete samples of continuous time variables, since these values can be approximated when there is not sufficient time to compute an exact value.
Reference: [22] <author> Ashish Mehra, Jennifer Rexford, and Farnam Jahanian. </author> <title> Design and evaluation of a window-consistent replication service. </title> <booktitle> In IEEE Transaction on Computer, </booktitle> <year> 1997. </year>
Reference-contexts: This paper presents the design and implementation of a real-time primary-backup replication scheme that combines fault-tolerant protocols, real-time scheduling, temporal consistency guarantees, and flexible x-kernel architecture to accommodate various system requirements. This work builds on the Window Consistent Replication Service by Mehra et al. <ref> [22] </ref> but distinguishes itself from that work in the following areas: * The temporal consistency model is more general. * Inter-object temporal consistency is proposed. * Implementation is built within x-kernel architecture. <p> This is identical to the window-consistent protocol proposed by Mehra et. al. <ref> [22] </ref>, here ffi is the window of inconsistency (or window consistent bound) between the primary and backup. 3 Inter-object temporal consistency The previous section introduced the notion of external temporal consistency which deals with the relationship of an object in the external world and its images on the servers. <p> The difference between these two graphs is that Figure 11 shows the result under normal scheduling while Figure 12 shows the result under compressed scheduling (primary schedules as many updates to backup as the resources allow <ref> [22] </ref>). The figures show that under both normal and compressed scheduling, the larger the probability of message loss, the longer the backup stays in an inconsistent state from the primary. However, for the same window size, the results for compressed scheduling are different from normal scheduling.
Reference: [23] <author> N.Budhiraja, K.Marzullo, F.B.Schneider, and S.Toueg. </author> <title> Primay-backup protocols: Lower bounds and optimal implementations. </title> <booktitle> In Proceedings of IFIP Working Conference on Dependable Computing, </booktitle> <pages> pages 187-198, </pages> <year> 1992. </year>
Reference-contexts: A common approach to building fault-tolerant distributed systems is to replicate servers that fail independently. The objective is to give the clients the illusion of service that is provided by a single server. The main approaches for structuring fault-tolerant servers are passive and active replication. In passive replication schemes <ref> [3, 4, 23] </ref>, the system state is maintained by a primary and one or more backup servers. The primary communicates its local state to the backups so that a backup can take over when a failure of the primary is detected.
Reference: [24] <author> S. W. O'Malley and L. L. Peterson. </author> <title> A dynamic network architecture. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(2) </volume> <pages> 110-143, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Secondly, it has the capability of dynamically configuring the network software, which allows application programmers to configure the right combination of protocols for their applications. Thirdly, its dynamic architecture can adapt more quickly to changes in the underlying network technology <ref> [24] </ref>. Our system includes a primary server and a backup server. A client application resides on the same machine as the primary. The client continuously senses the environment and periodically sends updates to the primary. The client accesses the server using Mach IPC-based interface (cross-domain remote procedure call).
Reference: [25] <author> C. Pu and A. Leff. </author> <title> Replica control in distributed systems: An asynchronous approach. </title> <booktitle> In Proc. ACM SIGMOD, </booktitle> <pages> pages 377-386, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: In particular, a number of researchers have observed that serializability is too strict as a correctness criterion for real-time databases. Relaxed correctness criteria facilitate higher concurrency by permitting a limited amount of inconsistency in how a transaction views the database state <ref> [10, 13, 15-19, 25, 27] </ref>. For example, a recent work [16] [15] proposed a class of real-time data access protocols called SSP (Similarity Stack Protocol) applicable to distributed real-time systems.
Reference: [26] <author> R. Rajkumar, M. Gagliardi, and L. Sha. </author> <title> The real-time publisher/subscriber inter-process communication model for distributed real-time systems: </title> <booktitle> Design and implementation. In Proc. Real-Time Technology and Applications Symposium, </booktitle> <pages> pages 66-75, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: It guarantees agreement on membership among the communicating processors, and ensures that membership changes resulting from processor joins or departures are atomic and ordered with respect to multicast messages. Both MARS and RTCAST are based on active replication whereas RTPB is a passive scheme. Rajkumar <ref> [8, 26] </ref> present a publisher/subscriber model for distributed real-time systems. It provides a simple user interface for publishing messages on a logical "channel", and for subscribing to selected channels as needed by each application.
Reference: [27] <author> S.B.Davidson and A. Watters. </author> <title> Partial computation in real-time database systems. </title> <booktitle> In Proc. Workshop on Real-Time Operating Systems and Software, </booktitle> <pages> pages 117-121, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: In particular, a number of researchers have observed that serializability is too strict as a correctness criterion for real-time databases. Relaxed correctness criteria facilitate higher concurrency by permitting a limited amount of inconsistency in how a transaction views the database state <ref> [10, 13, 15-19, 25, 27] </ref>. For example, a recent work [16] [15] proposed a class of real-time data access protocols called SSP (Similarity Stack Protocol) applicable to distributed real-time systems.
References-found: 27

