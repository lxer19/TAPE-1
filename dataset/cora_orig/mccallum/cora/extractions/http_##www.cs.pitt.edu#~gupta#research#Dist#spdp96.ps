URL: http://www.cs.pitt.edu/~gupta/research/Dist/spdp96.ps
Refering-URL: http://www.cs.pitt.edu/~gupta/research/dist.html
Root-URL: 
Email: wuw@cs.pitt.edu  mspezial@starbase.cs.trincoll.edu  gupta@cs.pitt.edu  
Title: Guaranteed Intrusion Removal from Monitored Distributed Applications  
Author: Wanqing Wu Madalene Spezialetti Rajiv Gupta 
Address: Pittsburgh Pittsburgh, PA 15260  Hartford, CT 06106  Pittsburgh Pittsburgh, PA 15260  
Affiliation: Department of Computer Science University of  Computer Science Department Trinity College  Department of Computer Science University of  
Abstract: This paper presents on-line perturbation tracking and intrusion removal techniques which are designed to accommodate delays which occur due to monitoring activities. These accommodations eliminate the effect of monitoring intrusion on the execution behavior and the scheduling of the monitored computation. By maintaining an adjusted time view, the intrusion removal system preserves the execution order of processes and the message selection decisions that would have been made in an unmonitored execution. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Cristain. </author> <title> Probabilistic internal clock synchronization. </title> <booktitle> 13th IEEE Symp. on Reliable Distributed Systems, </booktitle> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: The determination of the true times of various actions 3 would require a global clock. Since a global clock is not available in a distributed system, we maintain synchronized clocks and minimize the intrusion using these clocks <ref> [1] </ref>. 2.2 The Critical Point Protocol In this section we provide an overview of the critical point protocol. Additional details can be found in [5].
Reference: [2] <author> J. A. Gannon, K. J. Williams, M. S. Andersland, J. E. Lummp, and T. L. Casavant. </author> <title> Using perturbation tracking to compensate for intrusion propagation in message passing systems. </title> <booktitle> 14th IEEE-CS Int'l Conf. on Dist. Computing Sys, </booktitle> <year> 1994. </year>
Reference-contexts: The true behavior of a non-deterministic computation cannot be determined using existing approaches for post-processing execution traces collected by running an instrumented version of an application <ref> [2, 4] </ref>. Therefore we have developed an on-line approach for reducing the impact of monitoring on the behavior of a distributed application [3, 6, 5].
Reference: [3] <author> R. Gupta and M. Spezialetti. </author> <title> Dynamic techniques for minimizing the intrusive affects of monitoring actions. </title> <booktitle> IEEE-CS 15th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 368376, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: The true behavior of a non-deterministic computation cannot be determined using existing approaches for post-processing execution traces collected by running an instrumented version of an application [2, 4]. Therefore we have developed an on-line approach for reducing the impact of monitoring on the behavior of a distributed application <ref> [3, 6, 5] </ref>. In [3] we show how to preserve the behavior of non-determinism introduced by the application program fl Supported in part by NSF through a PYI Award CCR-9157371, NASA/Connecticut Space Grant College Consortium, and Trinity College. mer. <p> Therefore we have developed an on-line approach for reducing the impact of monitoring on the behavior of a distributed application [3, 6, 5]. In <ref> [3] </ref> we show how to preserve the behavior of non-determinism introduced by the application program fl Supported in part by NSF through a PYI Award CCR-9157371, NASA/Connecticut Space Grant College Consortium, and Trinity College. mer. Extensions that consider the non-determinism associated with a round-robin scheduler are described in [6, 5].
Reference: [4] <author> A. Malony and D. Reed. </author> <title> Models for performance perturbation analysis. </title> <booktitle> ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pages 1525, </pages> <year> 1991. </year>
Reference-contexts: The true behavior of a non-deterministic computation cannot be determined using existing approaches for post-processing execution traces collected by running an instrumented version of an application <ref> [2, 4] </ref>. Therefore we have developed an on-line approach for reducing the impact of monitoring on the behavior of a distributed application [3, 6, 5].
Reference: [5] <author> W. Wu, M. Spezialetti, and R. Gupta. </author> <title> Designing a nonintrusive monitoring tool for developing complex distributed applications. </title> <booktitle> Second IEEE International Conference on Engineering of Complex Computer Systems, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: The true behavior of a non-deterministic computation cannot be determined using existing approaches for post-processing execution traces collected by running an instrumented version of an application [2, 4]. Therefore we have developed an on-line approach for reducing the impact of monitoring on the behavior of a distributed application <ref> [3, 6, 5] </ref>. In [3] we show how to preserve the behavior of non-determinism introduced by the application program fl Supported in part by NSF through a PYI Award CCR-9157371, NASA/Connecticut Space Grant College Consortium, and Trinity College. mer. <p> In [3] we show how to preserve the behavior of non-determinism introduced by the application program fl Supported in part by NSF through a PYI Award CCR-9157371, NASA/Connecticut Space Grant College Consortium, and Trinity College. mer. Extensions that consider the non-determinism associated with a round-robin scheduler are described in <ref> [6, 5] </ref>. The focus of this paper is to address the issue of nonintrusive monitoring in context of a priority-based preemptive scheduler. <p> Since a global clock is not available in a distributed system, we maintain synchronized clocks and minimize the intrusion using these clocks [1]. 2.2 The Critical Point Protocol In this section we provide an overview of the critical point protocol. Additional details can be found in <ref> [5] </ref>. To insure the proper execution of a running process at a site S when a critical point is reached, it is essential to insure that all messages are present at S which would have been present during an unmonitored execution.
Reference: [6] <author> W. Wu, M. Spezialetti, and R. Gupta. </author> <title> On-line avoidance of the intrusive affects of monitoring on runtime scheduling decisions. </title> <booktitle> IEEE-CS 16th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 216223, </pages> <month> May </month> <year> 1996. </year> <month> 4 </month>
Reference-contexts: The true behavior of a non-deterministic computation cannot be determined using existing approaches for post-processing execution traces collected by running an instrumented version of an application [2, 4]. Therefore we have developed an on-line approach for reducing the impact of monitoring on the behavior of a distributed application <ref> [3, 6, 5] </ref>. In [3] we show how to preserve the behavior of non-determinism introduced by the application program fl Supported in part by NSF through a PYI Award CCR-9157371, NASA/Connecticut Space Grant College Consortium, and Trinity College. mer. <p> In [3] we show how to preserve the behavior of non-determinism introduced by the application program fl Supported in part by NSF through a PYI Award CCR-9157371, NASA/Connecticut Space Grant College Consortium, and Trinity College. mer. Extensions that consider the non-determinism associated with a round-robin scheduler are described in <ref> [6, 5] </ref>. The focus of this paper is to address the issue of nonintrusive monitoring in context of a priority-based preemptive scheduler.
References-found: 6

