URL: http://www.iro.umontreal.ca/~lecuyer/myftp/papers/fthres.ps
Refering-URL: http://www.iro.umontreal.ca/~lecuyer/papers.html
Root-URL: http://www.iro.umontreal.ca
Title: Discrete Event Dynamic Systems: Theory and Applications, Functional Estimation with Respect to a Threshold Parameter
Author: PIERRE L'ECUYER FELISA J. V AZQUEZ-ABAD 
Keyword: Simulation, functional estimation  
Address: C.P. 6128, Succ. Centre-Ville, Montreal H3C 3J7, Canada  
Affiliation: Departement d'IRO, Universite de Montreal,  
Note: 1-25 (Draft:  c Draft: June 19, 1995 Kluwer Academic Publishers, Boston. Manufactured in The Netherlands.  
Email: lecuyer@iro.umontreal.ca  vazquez@iro.umontreal.ca  
Date: June 19, 1995)  
Abstract: We consider a class of stochastic models for which the performance measure is defined as a mathematical expectation that depends on a parameter , say ff(), and we are interested in constructing estimators of ff in functional form (i.e., entire functions of ), which can be computed from a single simulation experiment. We focus on the case where is a continuous parameter, and also consider estimation of the derivative ff 0 (). One approach for doing that, when is a parameter of the probability law that governs the system, is based on the use of likelihood ratios and score functions. In this paper, we study a different approach, called split-and-merge, for the case where is a threshold parameter. This approach can be viewed as a practical way of running parallel simulations at an infinite number of values of , with common random numbers. We give several examples showing how different kinds of parameters such as the arrival rate in a queue, the probability that an arriving customer be of a given type, a scale parameter of a service time distribution, and so on, can be turned into threshold parameters. We also discuss implementation issues. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Bratley, P., Fox, B. L., and Schrage, L. E. </author> <year> 1987. </year> <title> A Guide to Simulation, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <note> second edition. </note>
Reference-contexts: Perform the simulation, obtaining the z i;k 's along the way (further details on that will follow). Sort the z i;k 's dynamically while they are generated (e.g., using a heap, as suggested in Problem 1.9.7 of Bratley, Fox, and Schrage <ref> [1] </ref>). At the end of all the simulations, let I j denote the interval I j = [v j ; v j+1 ), for j = 0; : : : ; o 0 . <p> Assume that the interarrival times are i.i.d. and that each arrival is of type I (or II) with probability (respectively, 1), independently of all other randomness in the model, where 2 fi = <ref> [0; 1] </ref>. <p> During the simulation, the value of W i () must be maintained, using equation (7), for each interval, i.e., for each node of the simulation tree. When W i+1 () is to be computed, i customers have arrived, and so the interval <ref> [0; 1] </ref> is divided at that moment into i + 1 subintervals (the simulation tree has i + 1 nodes). Coupling would occur when the values of W i () become the same for two or more neighboring intervals I j . <p> Of course, if we are estimating M mathematical expectations in parallel, then there are M values to memorize over each interval. Remark 2 We have assumed in this section that [a; b] = <ref> [0; 1] </ref>. The decision epochs T i () correspond to the arrivals epochs, which are shared by all the nodes in the simulation, since these epochs are independent of . <p> The computational cost for a simulation is then proportional to P o () i=1 i o 2 ()=2 if no merging is performed. On the other hand, if the interval [a; b] for which we are interested in having a functional estimation is only a strict subinterval of <ref> [0; 1] </ref>, then we only need to take care of the uniform variates Z i that fall in that subinterval for the construction of the simulation tree. The number of such variates will be o 0 and one has E [o 0 ]=E [o ] = b a &lt; 1. <p> Define = = 0 . Then, simulating that system at is equivalent to simulating it at 0 and rejecting each arrival with probability 1 . This "thinning" idea is well-known in the area of stochastic processes and is often used for simulating non-homogeneous Poisson processes; see <ref> [1] </ref>, [2], [3], [17]. Estimating a performance measure as a function of is equivalent to estimating it as a function of , which was the subject of the previous example. <p> possible to recover domination by associating the service times with the server instead of with the arriving customers (i.e., by using S i;1 as the service time of the ith customer that is served for any given value of , as suggested for example in Problems 2.1.1 et 2.1.8 of <ref> [1] </ref>), but implementing functional estimation using that approach seems messy and not so much useful. Example 5 Consider again an M=G=1 queue with arrival rate , and let be a scale parameter of the service time distribution B .
Reference: 2. <author> Bremaud, P. and Vazquez-Abad, F. J. </author> <year> 1992. </year> <title> On the Pathwise Computation of Derivatives with Respect to the Rate of a Point Process: The Phantom RPA Method, </title> <journal> Queueing Systems, </journal> <volume> 10, </volume> <pages> pp. 249-270. </pages>
Reference-contexts: Techniques for doing that include the likelihood ratio or score function method, as well as perturbation analysis and its numerous variants (see <ref> [2] </ref>, [5], [9], [12], [14], [15], [18] and the several references given there). To obtain estimations at different values of , one would usually 2 perform different simulations (perhaps with common random numbers) at all of those values of interest, which may become costly. <p> Therefore, the variance depends only on which underlying estimator is used, and is not influenced by the split-and-merge. This also applies to derivative estimators: any estimator that satisfies our assumptions (see next section) can be used. See <ref> [2] </ref>, [5], [12], [14], [15], [18], [20] for more on derivative estmation. <p> It is generally more efficient than simulating in parallel the two systems with the same driving noise !. The phantom method has been used by <ref> [2] </ref>, [4], [24] for derivative estimation and in [26] for parallel computation for a finite number of system parameters. In [25], which was in fact a short preliminary version of the current paper, we used the term phantom method for the (somewhat more general) split-and-merge approach described here. <p> For the rejected customers, W i () and X i () are "virtual" waiting times and sojourn times, but are nevertheless well defined, and S i () = 0. In this case, our method is strongly linked with the so-called phantom method [19], [24], <ref> [2] </ref>, [4]. In the last three references, the phantom RPA method is used to estimate derivatives. <p> Define = = 0 . Then, simulating that system at is equivalent to simulating it at 0 and rejecting each arrival with probability 1 . This "thinning" idea is well-known in the area of stochastic processes and is often used for simulating non-homogeneous Poisson processes; see [1], <ref> [2] </ref>, [3], [17]. Estimating a performance measure as a function of is equivalent to estimating it as a function of , which was the subject of the previous example. <p> This must be taken into account, as shown by the next example. Example 8 Let us return to the admission control model of Example 1. To make sure that we are dealing with one regenerative cycle for any , we can use the same trick as in <ref> [2] </ref>, [24]: always accept the first customer, independently of j 1 (), and start admission control only from the second customer on.
Reference: 3. <author> Cinlar, E. </author> <year> 1975. </year> <title> Introduction to Stochastic Processes, </title> <publisher> Prentice-Hall. </publisher>
Reference-contexts: Define = = 0 . Then, simulating that system at is equivalent to simulating it at 0 and rejecting each arrival with probability 1 . This "thinning" idea is well-known in the area of stochastic processes and is often used for simulating non-homogeneous Poisson processes; see [1], [2], <ref> [3] </ref>, [17]. Estimating a performance measure as a function of is equivalent to estimating it as a function of , which was the subject of the previous example.
Reference: 4. <author> Cassandras, C. G. and Julka, V. </author> <year> 1992. </year> <title> Marked/Phantom Slot Algorithms for a Class of Scheduling Problems, </title> <booktitle> Proceedings of the 31th IEEE Conf. on Decision and Control, </booktitle> <pages> pp. 3215-3220. </pages>
Reference-contexts: It is generally more efficient than simulating in parallel the two systems with the same driving noise !. The phantom method has been used by [2], <ref> [4] </ref>, [24] for derivative estimation and in [26] for parallel computation for a finite number of system parameters. In [25], which was in fact a short preliminary version of the current paper, we used the term phantom method for the (somewhat more general) split-and-merge approach described here. <p> For the rejected customers, W i () and X i () are "virtual" waiting times and sojourn times, but are nevertheless well defined, and S i () = 0. In this case, our method is strongly linked with the so-called phantom method [19], [24], [2], <ref> [4] </ref>. In the last three references, the phantom RPA method is used to estimate derivatives. <p> Estimating a performance measure as a function of is equivalent to estimating it as a function of , which was the subject of the previous example. For a specific example where this can be applied, consider the model (taken from <ref> [4] </ref>) of a central machine which allocates service slots to Q different servers. The total arrival rate is and each arrival is routed to server q with probability p q , independently of everything else, for 1 q Q.
Reference: 5. <author> Glasserman, P. </author> <year> 1991. </year> <title> Gradient Estimation via Perturbation Analysis, </title> <publisher> Kluwer Academic. </publisher>
Reference-contexts: Techniques for doing that include the likelihood ratio or score function method, as well as perturbation analysis and its numerous variants (see [2], <ref> [5] </ref>, [9], [12], [14], [15], [18] and the several references given there). To obtain estimations at different values of , one would usually 2 perform different simulations (perhaps with common random numbers) at all of those values of interest, which may become costly. <p> Therefore, the variance depends only on which underlying estimator is used, and is not influenced by the split-and-merge. This also applies to derivative estimators: any estimator that satisfies our assumptions (see next section) can be used. See [2], <ref> [5] </ref>, [12], [14], [15], [18], [20] for more on derivative estmation. <p> Let ff 0 (; ) denote that derivative. To estimate it, one can use under appropriate conditions (see <ref> [5] </ref>, [14]) the following infinitesimal perturbation analysis (IPA) estimator: h 0 (; ) = i=1 i X j j ()S 0 where S 0 j = (@B 1 =@)(B (S j;1 )), and OE i () = maxfj j 1 j i and W j () = 0g if that set <p> Likewise, under appropriate uniform integrability conditions (see <ref> [5] </ref>, [14]), one has @ P ; [W = 0] = h P o (1) i () E [o (1)] where P 0 i () is the sample derivative of P i () w.r.t. : P 0 @ (1 F (X i ())) = f (X i ()) X 0 and
Reference: 6. <author> Fox, B. L. </author> <year> 1990. </year> <title> Generating Markov Chain Transitions Quickly: </title> <editor> I. ORSA J. </editor> <booktitle> Computing 2, </booktitle> <pages> pp. 126-135. </pages>
Reference-contexts: Notice also that continuous-time Markov chains can most of the time (when the performance measure is additive) be simulated without generating event times at all: just use discrete-time conversion, which consists in replacing times between events and transition costs by their (conditional) expectations (see <ref> [6] </ref>, [7], [8] and Example 4.8 of [14]). We define our setup more precisely and describe the split-and-merge functional estimation method in Section 2. We also give an upper bound on the computational work required by the method, as a function of the simulation time-horizon, under specific (sufficient) assumptions.
Reference: 7. <author> Fox, B. L. and Glynn P. W. </author> <year> 1990. </year> <title> Discrete-Time Conversion for Simulating Finite-Horizon Markov Processes. </title> <journal> SIAM. J. Applied Math. </journal> <volume> 50, </volume> <pages> pp. 1457-1473. </pages>
Reference-contexts: Notice also that continuous-time Markov chains can most of the time (when the performance measure is additive) be simulated without generating event times at all: just use discrete-time conversion, which consists in replacing times between events and transition costs by their (conditional) expectations (see [6], <ref> [7] </ref>, [8] and Example 4.8 of [14]). We define our setup more precisely and describe the split-and-merge functional estimation method in Section 2. We also give an upper bound on the computational work required by the method, as a function of the simulation time-horizon, under specific (sufficient) assumptions.
Reference: 8. <author> Fox, B. L. and Young, A. R. </author> <year> 1991. </year> <title> Generating Markov Chain Transitions Quickly: II. </title> <journal> ORSA J. Computing 3, </journal> <pages> pp. 3-11. 25 </pages>
Reference-contexts: Notice also that continuous-time Markov chains can most of the time (when the performance measure is additive) be simulated without generating event times at all: just use discrete-time conversion, which consists in replacing times between events and transition costs by their (conditional) expectations (see [6], [7], <ref> [8] </ref> and Example 4.8 of [14]). We define our setup more precisely and describe the split-and-merge functional estimation method in Section 2. We also give an upper bound on the computational work required by the method, as a function of the simulation time-horizon, under specific (sufficient) assumptions.
Reference: 9. <author> Glynn, P. W. </author> <year> 1990. </year> <title> Likelihood Ratio Gradient Estimation for Stochastic Systems, </title> <journal> Communications of the ACM , 33, </journal> <pages> pp. 75-84. </pages>
Reference-contexts: Techniques for doing that include the likelihood ratio or score function method, as well as perturbation analysis and its numerous variants (see [2], [5], <ref> [9] </ref>, [12], [14], [15], [18] and the several references given there). To obtain estimations at different values of , one would usually 2 perform different simulations (perhaps with common random numbers) at all of those values of interest, which may become costly.
Reference: 10. <author> Glynn, P. W. and Iglehart, D. L. </author> <year> 1989. </year> <title> Importance Sampling for Stochastic Simulations. </title> <booktitle> Management Science 35, </booktitle> <pages> pp. 1367-1392. </pages>
Reference-contexts: One approach for estimating ff in a functional form, i.e., for estimating ff () for all 2 fi from a single simulation run, is based on the "change of measure" idea, sometimes called importance sampling <ref> [10] </ref>. To summarize the idea in a simplified form, suppose that h (; !) = h (!) does not depend (directly) on and that P has a corresponding density f .
Reference: 11. <author> Haurie, A. and L'Ecuyer, P. </author> <year> 1986. </year> <title> Approximation and Bounds in Discrete Event Dynamic Programming. </title> <journal> IEEE Transactions on Automatic Control AC-31, </journal> <volume> 3 (1986), </volume> <pages> pp. 227-235. </pages>
Reference-contexts: On the other hand, the merging times are in O (n log n), so the total computational effort increases slightly faster than linearly. 3.3. Age replacement policies in a multicomponent system Example 10 This example is taken from <ref> [11] </ref>, [14]. A system is comprised of N components, evolving independently, each with the same lifetime distribution, with increasing failure rate. We assume that the maintenance policy is defined by two thresholds 1 &gt; 2 &gt; 0 as follows. <p> Here, the randomness ! may be viewed as corresponding to the sequence of component lifetimes. Let T be a fixed time horizon and h () be the total cost incurred up to time T , where = ( 1 ; 2 ), and ff () its expectation. In <ref> [11] </ref>, it is shown how to compute an optimal policy for this problem by dynamic programming, for either the finite horizon or the infinite-horizon case with discounting. It turns out that the class of two-threshold policies defined above is suboptimal; the optimal policy is generally much more complicated than that. <p> Nevertheless, the two-threshold policies are interesting because they are much simpler to implement and the best one is typically very close to the optimum. Moreover, the numerical methods used in <ref> [11] </ref> work well for small N (say, N 3 or 4), but become impractical for large N due to the curse of dimensionality. Suppose that for a fixed 1 , we want to estimate ff ( 1 ; 2 ) as a function of 2 .
Reference: 12. <author> Ho, Y.-C. and Cao, X.-R. </author> <year> 1991. </year> <title> Discrete-Event Dynamic Systems and Perturbation Analysis. </title> <publisher> Kluwer Academic. </publisher>
Reference-contexts: Techniques for doing that include the likelihood ratio or score function method, as well as perturbation analysis and its numerous variants (see [2], [5], [9], <ref> [12] </ref>, [14], [15], [18] and the several references given there). To obtain estimations at different values of , one would usually 2 perform different simulations (perhaps with common random numbers) at all of those values of interest, which may become costly. <p> Therefore, the variance depends only on which underlying estimator is used, and is not influenced by the split-and-merge. This also applies to derivative estimators: any estimator that satisfies our assumptions (see next section) can be used. See [2], [5], <ref> [12] </ref>, [14], [15], [18], [20] for more on derivative estmation.
Reference: 13. <author> Julka, V., Cassandras, C. G., and Gong, W.-B. </author> <year> 1992. </year> <title> Sample Path Techniques for Admission Control in Multiclass Queueing Systems with General Arrival Processes, </title> <booktitle> Proceedings of CISS'92 , pp. </booktitle> <pages> 227-232. </pages>
Reference-contexts: Remark 3 This setup is straigthforward to generalize to the case where only some of the customers are of type I or II. For example, as a slight generalization of <ref> [13] </ref>, we may assume that there are several classes of customers, each class having its own arrival stream (with possible correlations between the streams or within each stream), and that only the customers of a specific class (say, class c) can be of type I or II as above. <p> In view of Remark 3, this also covers (with trivial adaptations) all the examples given in <ref> [13] </ref>. 13 Example 2 The domination discussed in the previous example occurs more generally. For example, suppose that the service distribution is of the form S i () = 1 I [j i () = 1] + 2 I [j i () = 0], where 1 &gt; 2 .
Reference: 14. <author> L'Ecuyer, P. </author> <year> 1990. </year> <title> A Unified View of the IPA, SF, and LR Gradient Estimation Techniques, </title> <journal> Management Science, </journal> <volume> 36, </volume> <pages> pp. 1364-1383. </pages>
Reference-contexts: Techniques for doing that include the likelihood ratio or score function method, as well as perturbation analysis and its numerous variants (see [2], [5], [9], [12], <ref> [14] </ref>, [15], [18] and the several references given there). To obtain estimations at different values of , one would usually 2 perform different simulations (perhaps with common random numbers) at all of those values of interest, which may become costly. <p> Therefore, the variance depends only on which underlying estimator is used, and is not influenced by the split-and-merge. This also applies to derivative estimators: any estimator that satisfies our assumptions (see next section) can be used. See [2], [5], [12], <ref> [14] </ref>, [15], [18], [20] for more on derivative estmation. <p> also that continuous-time Markov chains can most of the time (when the performance measure is additive) be simulated without generating event times at all: just use discrete-time conversion, which consists in replacing times between events and transition costs by their (conditional) expectations (see [6], [7], [8] and Example 4.8 of <ref> [14] </ref>). We define our setup more precisely and describe the split-and-merge functional estimation method in Section 2. We also give an upper bound on the computational work required by the method, as a function of the simulation time-horizon, under specific (sufficient) assumptions. That work can increase exponentially fast in general. <p> Let ff 0 (; ) denote that derivative. To estimate it, one can use under appropriate conditions (see [5], <ref> [14] </ref>) the following infinitesimal perturbation analysis (IPA) estimator: h 0 (; ) = i=1 i X j j ()S 0 where S 0 j = (@B 1 =@)(B (S j;1 )), and OE i () = maxfj j 1 j i and W j () = 0g if that set is <p> Likewise, under appropriate uniform integrability conditions (see [5], <ref> [14] </ref>), one has @ P ; [W = 0] = h P o (1) i () E [o (1)] where P 0 i () is the sample derivative of P i () w.r.t. : P 0 @ (1 F (X i ())) = f (X i ()) X 0 and i <p> On the other hand, the merging times are in O (n log n), so the total computational effort increases slightly faster than linearly. 3.3. Age replacement policies in a multicomponent system Example 10 This example is taken from [11], <ref> [14] </ref>. A system is comprised of N components, evolving independently, each with the same lifetime distribution, with increasing failure rate. We assume that the maintenance policy is defined by two thresholds 1 &gt; 2 &gt; 0 as follows.
Reference: 15. <author> L'Ecuyer, P. </author> <year> 1991. </year> <title> An Overview of Derivative Estimation. </title> <booktitle> Proceedings of the 1991 Winter Simulation Conference, </booktitle> <publisher> IEEE Press, </publisher> <pages> pp. 207-217. </pages>
Reference-contexts: Techniques for doing that include the likelihood ratio or score function method, as well as perturbation analysis and its numerous variants (see [2], [5], [9], [12], [14], <ref> [15] </ref>, [18] and the several references given there). To obtain estimations at different values of , one would usually 2 perform different simulations (perhaps with common random numbers) at all of those values of interest, which may become costly. <p> Therefore, the variance depends only on which underlying estimator is used, and is not influenced by the split-and-merge. This also applies to derivative estimators: any estimator that satisfies our assumptions (see next section) can be used. See [2], [5], [12], [14], <ref> [15] </ref>, [18], [20] for more on derivative estmation.
Reference: 16. <author> L'Ecuyer, P. </author> <year> 1993. </year> <title> Two Approaches for Estimating the Gradient in Functional Form. </title> <booktitle> Proceedings of the 1993 Winter Simulation Conference, </booktitle> <publisher> IEEE Press, </publisher> <pages> pp. 338-346. </pages>
Reference-contexts: Several examples of this approach, with numerical illustrations for some queueing systems, are given in [18], <ref> [16] </ref>. Some of these examples show that the likelihood ratio approach sometimes works fine, while others show how dramatically the variance of the functional estimators for ff and ff 0 may increase (sometimes with vertical asymptotes) as gets away from 0 . <p> The variance also increases exponentially fast (typically) as a function of the length of the simulation time-horizon (see [18], <ref> [16] </ref>). As a result, those functional estimators are often useful only in a small neighborhood of 0 and are better suited for short horizon models, or "steady-state" models with short regenerative cycles. <p> To estimate ff 0 (; ) in functional form, just apply the same technique as discussed previously, with h replaced by h 0 . Note that this can also be accomplished with other kinds of derivative estimators <ref> [16] </ref>. Example 7 For a more specific non-trivial illustration, we consider a queue with two classes of customers (as in Remark 3), and with finite capacity K.
Reference: 17. <author> Lewis, P. A. W. and Shedler, G. S. </author> <year> 1979. </year> <title> Simulation of Nonhomogeneous Poisson Processes by Thinning, </title> <journal> Naval Research Logistics Quarterly, </journal> <volume> 26, </volume> <pages> pp. 403-414. </pages>
Reference-contexts: Define = = 0 . Then, simulating that system at is equivalent to simulating it at 0 and rejecting each arrival with probability 1 . This "thinning" idea is well-known in the area of stochastic processes and is often used for simulating non-homogeneous Poisson processes; see [1], [2], [3], <ref> [17] </ref>. Estimating a performance measure as a function of is equivalent to estimating it as a function of , which was the subject of the previous example.
Reference: 18. <author> Rubinstein, R. Y. and Shapiro, A. </author> <year> 1993. </year> <title> Discrete Event Systems: Sensitivity Analysis and Stochastic Optimization by the Score Function Method, </title> <publisher> Wiley. </publisher>
Reference-contexts: Techniques for doing that include the likelihood ratio or score function method, as well as perturbation analysis and its numerous variants (see [2], [5], [9], [12], [14], [15], <ref> [18] </ref> and the several references given there). To obtain estimations at different values of , one would usually 2 perform different simulations (perhaps with common random numbers) at all of those values of interest, which may become costly. <p> Several examples of this approach, with numerical illustrations for some queueing systems, are given in <ref> [18] </ref>, [16]. Some of these examples show that the likelihood ratio approach sometimes works fine, while others show how dramatically the variance of the functional estimators for ff and ff 0 may increase (sometimes with vertical asymptotes) as gets away from 0 . <p> The variance also increases exponentially fast (typically) as a function of the length of the simulation time-horizon (see <ref> [18] </ref>, [16]). As a result, those functional estimators are often useful only in a small neighborhood of 0 and are better suited for short horizon models, or "steady-state" models with short regenerative cycles. <p> Therefore, the variance depends only on which underlying estimator is used, and is not influenced by the split-and-merge. This also applies to derivative estimators: any estimator that satisfies our assumptions (see next section) can be used. See [2], [5], [12], [14], [15], <ref> [18] </ref>, [20] for more on derivative estmation.
Reference: 19. <author> Suri, R. and Cao, X.-R. </author> <year> 1986. </year> <title> The Phantom and Marked Customer Methods for Optimization of Closed Queueing Networks with Blocking and General Service Times. </title> <journal> ACM Performance Evaluation Review, </journal> <volume> 12, 3, </volume> <pages> pp. 243-256. </pages>
Reference-contexts: From a nominal simulation, the phantom method introduced in <ref> [19] </ref> computes one perturbed sample path if a particular decision was reversed. Some of the decisions would be reversed from the nominal simulation due to a small change in . In [24] the method was implemented to estimate a finite difference. <p> For the rejected customers, W i () and X i () are "virtual" waiting times and sojourn times, but are nevertheless well defined, and S i () = 0. In this case, our method is strongly linked with the so-called phantom method <ref> [19] </ref>, [24], [2], [4]. In the last three references, the phantom RPA method is used to estimate derivatives.
Reference: 20. <author> Uryasev, S. </author> <year> 1995. </year> <title> Analytic Perturbation Analysis for DEDS with Discontinuous Sample-Path Functions", Stochastic Models, </title> <note> To appear. </note>
Reference-contexts: Therefore, the variance depends only on which underlying estimator is used, and is not influenced by the split-and-merge. This also applies to derivative estimators: any estimator that satisfies our assumptions (see next section) can be used. See [2], [5], [12], [14], [15], [18], <ref> [20] </ref> for more on derivative estmation.
Reference: 21. <author> Vakili, P. </author> <year> 1991. </year> <title> Using a Standard Clock Technique for Efficient Simulation. </title> <journal> Operations Research Letters 10, </journal> <pages> pp. 445-452. </pages>
Reference-contexts: In [25], which was in fact a short preliminary version of the current paper, we used the term phantom method for the (somewhat more general) split-and-merge approach described here. Vakili <ref> [21] </ref> describes an approach to perform simultaneous simulations at a finite number of distinct parameter values, for a continuous-time Markov chain model (all random variables that determine event times are exponential).
Reference: 22. <author> Vazquez-Abad, F. J. </author> <year> 1996. </year> <title> Generalizations of the surrogate estimation approach for sensitivity analysis via simple examples. </title> <note> In preparation. </note>
Reference-contexts: In other words, each service 14 time S i can be generated by generating a random variable V i from distribution B 1 , and defining S i = V i . Alternatively, one can use surrogate estimation via time rescaling (see <ref> [22] </ref>): generate the service times S i = V i using distribution B 1 , the arrivals at rate 0 (where 0 is the largest parameter value of interest), and accept any given arrival with probability = = 0 .
Reference: 23. <author> Vazquez-Abad, F. J., Kushner, H. J. </author> <year> 1993. </year> <title> The surrogate estimation approach for sensitivity analysis in queueing networks. </title> <booktitle> Proceedings of the 1993 Winter Simulation Conference, </booktitle> <publisher> IEEE Press, </publisher> <pages> pp. 347-355. </pages>
Reference: 24. <author> Vazquez-Abad, F. J. and L'Ecuyer, P. </author> <year> 1991. </year> <title> Comparing Alternative Methods for Derivative Estimation when IPA Does Not Apply Directly. </title> <booktitle> Proceedings of the 1991 Winter Simulation Conference, </booktitle> <publisher> IEEE Press, </publisher> <pages> pp. 1004-1011. </pages>
Reference-contexts: From a nominal simulation, the phantom method introduced in [19] computes one perturbed sample path if a particular decision was reversed. Some of the decisions would be reversed from the nominal simulation due to a small change in . In <ref> [24] </ref> the method was implemented to estimate a finite difference. The phantom method is based on a thought experiment, evaluating only that part of the perturbed system that differs from the nominal system under common random variables. <p> It is generally more efficient than simulating in parallel the two systems with the same driving noise !. The phantom method has been used by [2], [4], <ref> [24] </ref> for derivative estimation and in [26] for parallel computation for a finite number of system parameters. In [25], which was in fact a short preliminary version of the current paper, we used the term phantom method for the (somewhat more general) split-and-merge approach described here. <p> For the rejected customers, W i () and X i () are "virtual" waiting times and sojourn times, but are nevertheless well defined, and S i () = 0. In this case, our method is strongly linked with the so-called phantom method [19], <ref> [24] </ref>, [2], [4]. In the last three references, the phantom RPA method is used to estimate derivatives. <p> This must be taken into account, as shown by the next example. Example 8 Let us return to the admission control model of Example 1. To make sure that we are dealing with one regenerative cycle for any , we can use the same trick as in [2], <ref> [24] </ref>: always accept the first customer, independently of j 1 (), and start admission control only from the second customer on. <p> Let ff (; ) = E [o ()] and ff 0 (; ) its derivative with respect to . To estimate these quantities in functional form, as functions of , we can use the following SPA derivative estimator, adapted from <ref> [24] </ref>. Observe that 1=ff (; ) is equal to the fraction of customers that are first in their busy cycles, in steady-state, among those that are accepted. <p> In order to compare our results with the exact (theoretical) values, we took an M=M=1 queue as in <ref> [24] </ref>, with arrival rate of 1 and mean service time . In that case, one has S 0 j = S j =. Figures 4 and 5 show the values of the functional estimators (11) and (10) for = 0:5, 0 1, and n = 1000.
Reference: 25. <author> Vazquez-Abad, F. J. and L'Ecuyer, P. </author> <year> 1994. </year> <title> Simulation Trees for Functional Estimation via the Phantom Method. </title> <booktitle> Proceedings of the 11th International Conference on Analysis and Optimization of Systems: Discrete Event Systems, Sophia-Antipolis, </booktitle> <month> June </month> <year> 1994, </year> <booktitle> in Lectures Notes in Control and Information Sciences, </booktitle> <volume> 199, </volume> <pages> pp. 449-455. </pages>
Reference-contexts: It is generally more efficient than simulating in parallel the two systems with the same driving noise !. The phantom method has been used by [2], [4], [24] for derivative estimation and in [26] for parallel computation for a finite number of system parameters. In <ref> [25] </ref>, which was in fact a short preliminary version of the current paper, we used the term phantom method for the (somewhat more general) split-and-merge approach described here.
Reference: 26. <author> Vazquez-Abad, F. J. and Jacobson, S. H. </author> <year> 1994. </year> <title> Application of RPA and the Phantom Harmonic Gradient Estimators to a Priority Queueing System. </title> <booktitle> Proceedings of the 1994 Winter Simulation Conference, </booktitle> <publisher> IEEE Press, </publisher> <pages> pp. 369-376. </pages>
Reference-contexts: It is generally more efficient than simulating in parallel the two systems with the same driving noise !. The phantom method has been used by [2], [4], [24] for derivative estimation and in <ref> [26] </ref> for parallel computation for a finite number of system parameters. In [25], which was in fact a short preliminary version of the current paper, we used the term phantom method for the (somewhat more general) split-and-merge approach described here. <p> With that method, a nominal simulation is run at the parameter value = 1 (no rejection); the performance h is also evaluated for the case where customer i is "phantomized" (rejected), for each i, and a derivative estimator is constructed from that. In <ref> [26] </ref>, the phantom method was implemented for estimating the expected response of a system at a finite number of prespecified values of two control parameters. In the present example, the rejected customers can be viewed as "phantomized" and we could also call our approach "phantom method".
References-found: 26

