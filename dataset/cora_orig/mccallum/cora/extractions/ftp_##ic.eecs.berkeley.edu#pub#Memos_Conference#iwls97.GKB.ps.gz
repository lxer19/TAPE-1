URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/iwls97.GKB.ps.gz
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/kukimoto/
Root-URL: 
Email: feugeneg, kukimoto, braytong@ic.eecs.berkeley.edu  
Title: Canonical TBDD's and Their Application to Combinational Verification  
Author: Evguenii I. Goldberg Yuji Kukimoto Robert K. Brayton 
Address: Berkeley CA 94720  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California,  
Abstract: We propose a new class of decision diagrams called canonical cube transformation binary decision diagrams (canonical TBDD's), which is an extension of TBDD's proposed by Meinel et al [11, 3]. The core idea of TBDD's is to transform a function to another function in a new domain by an injective mapping and to represent the transformed function in a standard OBDD. If the new domain is larger than the original domain, canonicity is lost, which makes combinational verification difficult. In this paper we show that canonicity can be maintained by characterizing the care set of the new domain. Transformations of practical interest which guarantee polynomial size canonical TBDD's are introduced. We also give a new interpretation of TBDD's, which leads to an effective heuristic for extracting promising transformations automatically from high-level specifications. Finally a combinational verification technique using canonical TBDD's is proposed, the effectiveness of which is justified by verifying the hidden weight bit function. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Ashar, A. Ghosh, and S. Devadas. </author> <title> Boolean satisfiability and equivalence checking using general binary decision diagrams. </title> <booktitle> In Proceedings of International Conference on Computer Design, </booktitle> <pages> pages 259-264, </pages> <month> Oc-tober </month> <year> 1991. </year>
Reference-contexts: Several extensions to OBDD's have been studied to partially solve this problem. They can be divided into two classes. The first class reduces graph sizes by sacrificing canonicity. Index BDD's [9], XBDD's [10] and GBDD's <ref> [1] </ref> fall into this category. The second class avoids BDD size blowups without losing canonicity. Examples of this class are typed Free BDD's (typed FBDD's) [8], Partitioned BDD's [12] and bijective cube transformation BDD's (BTBDD's) [11, 3].
Reference: [2] <author> R. I. Bahar, E. A. Frohm, C. M. Gaona, G. D. Hachtel, E. Macii, A. Pardo, and F. Somenzi. </author> <title> Algebraic decision diagrams and their applications. </title> <booktitle> In Proceedings of International Conference on Computer-Aided Design, </booktitle> <pages> pages 188-191, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: One way to canonicalize TBDD's is to pick a single representative function from compat (H) in a systematic fashion. A natural choice is H itself. Representing H by a three-valued OBDD gives a canonical representation since as shown in <ref> [2, 6] </ref> multi-terminal OBDD's are canonical. In the following we call such TBDD's canonical TBDD's. Non-canonical TBDD's defined in Section 2 are called general TBDD's or just TBDD's. Functions sat and sat introduced in Section 2 play an important role in obtaining canonical TBDD's.
Reference: [3] <author> J. Bern, C. Meinel, and A. Slobodova. </author> <title> Efficient OBDD-based Boolean manipulation in CAD beyond current limits. </title> <booktitle> In Proceedings of 32nd Design Automation Conference, </booktitle> <pages> pages 408-413, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Index BDD's [9], XBDD's [10] and GBDD's [1] fall into this category. The second class avoids BDD size blowups without losing canonicity. Examples of this class are typed Free BDD's (typed FBDD's) [8], Partitioned BDD's [12] and bijective cube transformation BDD's (BTBDD's) <ref> [11, 3] </ref>. Meinel et al. proposed cube transformation BDD's (TBDD's) in [11, 3], in which they showed that many other extensions to OBDD's including typed FBDD's and indexed BDD's can be interpreted as TBDD's under specific cube transformations. <p> The second class avoids BDD size blowups without losing canonicity. Examples of this class are typed Free BDD's (typed FBDD's) [8], Partitioned BDD's [12] and bijective cube transformation BDD's (BTBDD's) <ref> [11, 3] </ref>. Meinel et al. proposed cube transformation BDD's (TBDD's) in [11, 3], in which they showed that many other extensions to OBDD's including typed FBDD's and indexed BDD's can be interpreted as TBDD's under specific cube transformations. <p> Smart choices of the transformation enables one to transform a problematic function for OBDD's to a well-behaved function thereby making it possible to represent the function compactly. If the original domain and the new domain have the same size, TBDD's are canonical since the transformation must be injective <ref> [11, 3] </ref>. On the other hand, if the new domain has a larger size than the original, not all the minterms of the transformed function are care points thereby breaking the canonical property. [11] did not pursue this direction further. <p> We will demonstrate that this is indeed the case for the hidden weighted bit function, which has a polynomial-size TBDD under natural transformation functions derived from the idea above. Although <ref> [3] </ref> showed that a specific cube transformation represented in terms of a complete type reduces the size of the TBDD of the function to a constant size, the type was highly customized to an optimal form by analyzing the property of the function in detail. <p> result implies inherent difficulty in making indexed BDD's canonical without exponential blowups in their sizes. 5 Relationship between Canonical TBDD's and Other Canonical Variations of OBDD's In this section we study the relationship between canonical TBDD's and three other well-known canonical extensions of OBDD's, namely bijective cube transformation BDD's (BTBDD's) <ref> [3, 7] </ref>, typed FBDD's [8] and partitioned OBDD's (POBDD's) [12]. A BDD-based representation B 1 is said to cover another BDD-based representation B 2 if every Boolean function h which has a polynomial size representation in B 2 also has a polynomial size representation in B 1 . <p> Since then verification of the hidden weight bit function has been studied in <ref> [9, 3, 12] </ref> to overcome this inherent difficulty. In [9] it was shown that an indexed BDD, a variation of OBDD's, can represent hwb in a quadratic size. <p> In [9] it was shown that an indexed BDD, a variation of OBDD's, can represent hwb in a quadratic size. Verification using indexed BDD's, however, is not robust enough since they are not canonical. <ref> [3] </ref> and [12] showed that there is a quadratic size typed FBDD and a cubic size partitioned OBDD of hwb under a certain type and a certain set of window functions respectively.
Reference: [4] <author> R. E. Bryant. </author> <title> Graph-based algorithms for Boolean function manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(8):677-691, </volume> <month> August </month> <year> 1986. </year>
Reference-contexts: One of the representations which meet all of the three requirements in many functions used in practical designs is Ordered Binary Decision Diagrams (OBDD's) <ref> [4] </ref>. Due to this desirable property OBDD's have been used extensively in synthesis and verification for digital circuits. The main problem in OBDD's is that some classes of functions of practical interest are known not to have polynomial size OBDD's under any variable ordering.
Reference: [5] <author> R. E. Bryant. </author> <title> On the complexity of VLSI implementations and graph representations of Boolean functions with applications to integer multiplication. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-40:205-213, </volume> <month> February </month> <year> 1991. </year>
Reference-contexts: closer to the final function in the sense that they take the same value for all unsatisfiable y's as H 0 . 7 Verification of the Hidden Weight Bit Function We demonstrate how the verification scheme proposed in the previous section works for the hidden weight bit function introduced in <ref> [5] </ref>. The hidden bit weight function hwb (x 1 ; : : : ; x n ) is defined as follows. <p> ; : : : ; x n ) is defined to be equal to 0 if sum (x 1 ; : : : ; x n ) = 0 and to x i if i = sum (x 1 ; : : : ; x n ); i 6= 0. <ref> [5] </ref> showed that the size of OBDD representing hwb grows exponentially in n for any ordering. Since then verification of the hidden weight bit function has been studied in [9, 3, 12] to overcome this inherent difficulty. <p> We conducted experimental results to see how the theory works in practice. The implementation was done on top of SIS. We first generated circuits of various sizes to compute the hidden weight bit function. The structure of those circuits is the same as the one suggested by Bryant in <ref> [5] </ref>.
Reference: [6] <author> E. M. Clarke, K. L. McMillan, X. Zhao, M. Fujita, and J. Yang. </author> <title> Spectral transformation for large Boolean functions with application to technology mapping. </title> <booktitle> In Proceedings of 30th Design Automation Conference, </booktitle> <pages> pages 54-60, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: One way to canonicalize TBDD's is to pick a single representative function from compat (H) in a systematic fashion. A natural choice is H itself. Representing H by a three-valued OBDD gives a canonical representation since as shown in <ref> [2, 6] </ref> multi-terminal OBDD's are canonical. In the following we call such TBDD's canonical TBDD's. Non-canonical TBDD's defined in Section 2 are called general TBDD's or just TBDD's. Functions sat and sat introduced in Section 2 play an important role in obtaining canonical TBDD's.
Reference: [7] <author> M. Fujita, Y. Kukimoto, and R. K. Brayton. </author> <title> BDD minimization by truth table permutations. </title> <booktitle> In Proceedings of ACM/IEEE International Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: result implies inherent difficulty in making indexed BDD's canonical without exponential blowups in their sizes. 5 Relationship between Canonical TBDD's and Other Canonical Variations of OBDD's In this section we study the relationship between canonical TBDD's and three other well-known canonical extensions of OBDD's, namely bijective cube transformation BDD's (BTBDD's) <ref> [3, 7] </ref>, typed FBDD's [8] and partitioned OBDD's (POBDD's) [12]. A BDD-based representation B 1 is said to cover another BDD-based representation B 2 if every Boolean function h which has a polynomial size representation in B 2 also has a polynomial size representation in B 1 .
Reference: [8] <author> J. Gergov and C. Meinel. </author> <title> Efficient Boolean manipulation with OBDD's can be extended to FBDD's. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-43:1197-1209, </volume> <month> October </month> <year> 1994. </year>
Reference-contexts: They can be divided into two classes. The first class reduces graph sizes by sacrificing canonicity. Index BDD's [9], XBDD's [10] and GBDD's [1] fall into this category. The second class avoids BDD size blowups without losing canonicity. Examples of this class are typed Free BDD's (typed FBDD's) <ref> [8] </ref>, Partitioned BDD's [12] and bijective cube transformation BDD's (BTBDD's) [11, 3]. Meinel et al. proposed cube transformation BDD's (TBDD's) in [11, 3], in which they showed that many other extensions to OBDD's including typed FBDD's and indexed BDD's can be interpreted as TBDD's under specific cube transformations. <p> in making indexed BDD's canonical without exponential blowups in their sizes. 5 Relationship between Canonical TBDD's and Other Canonical Variations of OBDD's In this section we study the relationship between canonical TBDD's and three other well-known canonical extensions of OBDD's, namely bijective cube transformation BDD's (BTBDD's) [3, 7], typed FBDD's <ref> [8] </ref> and partitioned OBDD's (POBDD's) [12]. A BDD-based representation B 1 is said to cover another BDD-based representation B 2 if every Boolean function h which has a polynomial size representation in B 2 also has a polynomial size representation in B 1 .
Reference: [9] <author> J. Jain, M. Abadir, J. Bitner, D. S. Fussell, and J. A. Abraham. IBDDs: </author> <title> An efficient functional representation for digital circuits. </title> <booktitle> In Proceedings of the European Conference on Design Automation (EDAC), </booktitle> <pages> pages 440-446, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Several extensions to OBDD's have been studied to partially solve this problem. They can be divided into two classes. The first class reduces graph sizes by sacrificing canonicity. Index BDD's <ref> [9] </ref>, XBDD's [10] and GBDD's [1] fall into this category. The second class avoids BDD size blowups without losing canonicity. Examples of this class are typed Free BDD's (typed FBDD's) [8], Partitioned BDD's [12] and bijective cube transformation BDD's (BTBDD's) [11, 3]. <p> This result can be easily extended to the case where 1) different orderings are used in the first and the second sets of variables, or 2) more than two repetitions form branching expression. TBDD's with such transformation functions correspond to indexed BDD's <ref> [9] </ref>. <p> Since then verification of the hidden weight bit function has been studied in <ref> [9, 3, 12] </ref> to overcome this inherent difficulty. In [9] it was shown that an indexed BDD, a variation of OBDD's, can represent hwb in a quadratic size. <p> Since then verification of the hidden weight bit function has been studied in [9, 3, 12] to overcome this inherent difficulty. In <ref> [9] </ref> it was shown that an indexed BDD, a variation of OBDD's, can represent hwb in a quadratic size.
Reference: [10] <author> S.-W. Jeong, B. Plessier, G. Hachtel, and F. Somenzi. </author> <title> Extended BDD's, trading off canonicity for structure in verification algorithms. </title> <booktitle> In Proceedings of International Conference on Computer-Aided Design, </booktitle> <pages> pages 464-467, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: Several extensions to OBDD's have been studied to partially solve this problem. They can be divided into two classes. The first class reduces graph sizes by sacrificing canonicity. Index BDD's [9], XBDD's <ref> [10] </ref> and GBDD's [1] fall into this category. The second class avoids BDD size blowups without losing canonicity. Examples of this class are typed Free BDD's (typed FBDD's) [8], Partitioned BDD's [12] and bijective cube transformation BDD's (BTBDD's) [11, 3].
Reference: [11] <author> C. Meinel and A. Slobodova. </author> <title> A unifying theoretical background for some BDD-based data structures. </title> <type> Technical Report 94-17, </type> <institution> Universitat Trier, </institution> <year> 1994. </year>
Reference-contexts: Index BDD's [9], XBDD's [10] and GBDD's [1] fall into this category. The second class avoids BDD size blowups without losing canonicity. Examples of this class are typed Free BDD's (typed FBDD's) [8], Partitioned BDD's [12] and bijective cube transformation BDD's (BTBDD's) <ref> [11, 3] </ref>. Meinel et al. proposed cube transformation BDD's (TBDD's) in [11, 3], in which they showed that many other extensions to OBDD's including typed FBDD's and indexed BDD's can be interpreted as TBDD's under specific cube transformations. <p> The second class avoids BDD size blowups without losing canonicity. Examples of this class are typed Free BDD's (typed FBDD's) [8], Partitioned BDD's [12] and bijective cube transformation BDD's (BTBDD's) <ref> [11, 3] </ref>. Meinel et al. proposed cube transformation BDD's (TBDD's) in [11, 3], in which they showed that many other extensions to OBDD's including typed FBDD's and indexed BDD's can be interpreted as TBDD's under specific cube transformations. <p> Smart choices of the transformation enables one to transform a problematic function for OBDD's to a well-behaved function thereby making it possible to represent the function compactly. If the original domain and the new domain have the same size, TBDD's are canonical since the transformation must be injective <ref> [11, 3] </ref>. On the other hand, if the new domain has a larger size than the original, not all the minterms of the transformed function are care points thereby breaking the canonical property. [11] did not pursue this direction further. <p> On the other hand, if the new domain has a larger size than the original, not all the minterms of the transformed function are care points thereby breaking the canonical property. <ref> [11] </ref> did not pursue this direction further. In this paper we focus on this case where canonicity is lost and show that canonicity can still be preserved by identifying the care set of the transformed function precisely. Based on this canonical property a combinational verification technique is proposed. <p> We call a pair (B; f ) a TBDD of function h by transformation functions f = (f 1 ; : : : ; f m ). Notice that the definition of TBDD's given above differs from the original definition of <ref> [11] </ref> only in specifying unsatisfiable paths explicitly by having the don't care terminal. We can interpret (B; f ) as a representation of function h since each vector x in the original domain has a unique corresponding vector y = f (x) in the transformed domain. <p> Since any path in BTBDD's is satisfiable under this condition, BTBDD's are guaranteed to be canonical. Therefore canonical TBDD's obviously cover BTBDD's. Typed FBDD's: <ref> [11] </ref> proved that typed FBDD's are a special case of BTBDD's.
Reference: [12] <author> A. Narayan, J. Jain, M. Fujita, and A. Sangiovanni-Vincentelli. </author> <title> Partitioned ROBDDs a compact, canonical and efficiently manipulable representation for Boolean functions. </title> <booktitle> In Proceedings of International Conference on Computer-Aided Design, </booktitle> <pages> pages 547-554, </pages> <month> November </month> <year> 1996. </year>
Reference-contexts: The first class reduces graph sizes by sacrificing canonicity. Index BDD's [9], XBDD's [10] and GBDD's [1] fall into this category. The second class avoids BDD size blowups without losing canonicity. Examples of this class are typed Free BDD's (typed FBDD's) [8], Partitioned BDD's <ref> [12] </ref> and bijective cube transformation BDD's (BTBDD's) [11, 3]. Meinel et al. proposed cube transformation BDD's (TBDD's) in [11, 3], in which they showed that many other extensions to OBDD's including typed FBDD's and indexed BDD's can be interpreted as TBDD's under specific cube transformations. <p> without exponential blowups in their sizes. 5 Relationship between Canonical TBDD's and Other Canonical Variations of OBDD's In this section we study the relationship between canonical TBDD's and three other well-known canonical extensions of OBDD's, namely bijective cube transformation BDD's (BTBDD's) [3, 7], typed FBDD's [8] and partitioned OBDD's (POBDD's) <ref> [12] </ref>. A BDD-based representation B 1 is said to cover another BDD-based representation B 2 if every Boolean function h which has a polynomial size representation in B 2 also has a polynomial size representation in B 1 . <p> Therefore canonical TBDD's obviously cover BTBDD's. Typed FBDD's: [11] proved that typed FBDD's are a special case of BTBDD's. Hence canonical TBDD's cover typed FBDD's as well. 5.2 Relation between Canonical TBDD's and Par titioned OBDD's A partitioned OBDD <ref> [12] </ref> for a function h (x) is the set of p OBDD's representing functions h 1 (x); : : : ; h p (x) where h i (x) = w i (x) ^ h (x) and w 1 (x) _ : : : _ w p (x) = 1. <p> Since then verification of the hidden weight bit function has been studied in <ref> [9, 3, 12] </ref> to overcome this inherent difficulty. In [9] it was shown that an indexed BDD, a variation of OBDD's, can represent hwb in a quadratic size. <p> In [9] it was shown that an indexed BDD, a variation of OBDD's, can represent hwb in a quadratic size. Verification using indexed BDD's, however, is not robust enough since they are not canonical. [3] and <ref> [12] </ref> showed that there is a quadratic size typed FBDD and a cubic size partitioned OBDD of hwb under a certain type and a certain set of window functions respectively.
References-found: 12

