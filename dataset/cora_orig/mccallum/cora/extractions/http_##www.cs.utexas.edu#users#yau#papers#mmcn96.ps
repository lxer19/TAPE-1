URL: http://www.cs.utexas.edu/users/yau/papers/mmcn96.ps
Refering-URL: http://www.cs.utexas.edu/users/yau/research.html
Root-URL: 
Title: An Architecture Towards Efficient OS Support for Distributed Multimedia  
Author: David K.Y. Yau and Simon S. Lam 
Address: Austin, Texas 78712-1188  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract: In designing operating system support for distributed multimedia, we target three areas for improvement: reduced copying, reduced reliance on explicit kernel/user interactions, and provision of rate-based flow control. Towards these goals, we propose an architecture that includes the concept of I/O efficient buffers for reduced copying, the concept of fast system calls for low latency network access, and the concept of kernel threads for flow control. Also included is a concept called direct media streaming which is suitable for applications that require limited user processing of media data. These concepts have been implemented as an extension to SunOS 5.3 (the operating system component of Solaris 2.3). We report some experimental results on the performance of our current system. Keywords: distributed multimedia, operating system support, system call, I/O efficient buffer, kernel thread, rate-based flow control 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David P. Anderson. </author> <title> Metascheduling for continuous media. </title> <journal> ACM Trans. Computer Systems, </journal> <volume> 11(3) </volume> <pages> 226-252, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: The scheduling algorithms presented in Section 8 are extensions of rate-based proposals for scheduling packets in a network switch [12, 13], and for metascheduling of continuous media <ref> [1] </ref>. Our algorithms have been designed for send scheduling by a periodic kernel thread. Elimination of system calls for sending has also been proposed in [3] where requests to send are polled in the clock interrupt handler.
Reference: [2] <author> Flavio Bonomi and Kerry W. Fendick. </author> <title> The rate-based flow control framework for the available bit rate ATM service. </title> <journal> IEEE Network, </journal> <month> March/April </month> <year> 1995. </year>
Reference-contexts: Furthermore, the delivery of media data would require real-time QoS (such as delay and throughput) guarantees to ensure smooth playback. We therefore expect that future multimedia applications will negotiate reserved-rate connections with networks|such as those considered in <ref> [2] </ref> and [8]. To obtain QoS guarantees, the packet arrivals to a reserved-rate connection are required to satisfy certain flow specifications. To better understand the characteristics of multimedia applications, we studied a working video-conferencing tool called nv (for network video), which is widely used in mbone multicasts.
Reference: [3] <author> C. Cranor and G.M. Parulkar. </author> <title> Design of universal continuous media I/O. </title> <booktitle> In Proc. </booktitle> <volume> NOSSDAV '95, </volume> <pages> pages 83-86, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Our algorithms have been designed for send scheduling by a periodic kernel thread. Elimination of system calls for sending has also been proposed in <ref> [3] </ref> where requests to send are polled in the clock interrupt handler. Issues such as order of interleaving of sends by different user processes as well as impact on end-to-end delay are not considered in [3]. An approach similar to direct media streaming has been considered in [5]. <p> Elimination of system calls for sending has also been proposed in <ref> [3] </ref> where requests to send are polled in the clock interrupt handler. Issues such as order of interleaving of sends by different user processes as well as impact on end-to-end delay are not considered in [3]. An approach similar to direct media streaming has been considered in [5]. We have implemented an audio write path in SunOS 5.3 and studied its performance. Furthermore, we have described and evaluated two specific applications of our architecture for supporting distributed multimedia.
Reference: [4] <author> Chris Dalton, Greg Watson, David Banks, Costas Calamvokis, Aled Edwards, and John Lumley. </author> <title> Afterburner. </title> <journal> IEEE Network, </journal> <pages> pages 36-43, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: The concept of I/O efficient buffers is similar to various proposals for minimizing data copies, e.g., <ref> [4] </ref>, [6], and [10]. Independent threads of control for network I/O have been used in several systems, such as [7].
Reference: [5] <author> Peter Druschel. </author> <title> Operating system support for high-speed networking. </title> <type> Technical Report 94-24 (Ph.D. Dissertation), </type> <institution> The University of Arizona, Tucson, Arizona, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: The problem with copying is that it incurs a per-byte overhead. As network bandwidth increases, it is approaching the same order of magnitude as memory bandwidth <ref> [5] </ref>. Therefore, memory bandwidth may become the communication bottleneck if memory copies are not carefully minimized. Data flows generated by multimedia applications are more predictable than conventional data traffic. In a server for video playback, for example, a picture is made available for sending once every frame period. <p> Issues such as order of interleaving of sends by different user processes as well as impact on end-to-end delay are not considered in [3]. An approach similar to direct media streaming has been considered in <ref> [5] </ref>. We have implemented an audio write path in SunOS 5.3 and studied its performance. Furthermore, we have described and evaluated two specific applications of our architecture for supporting distributed multimedia.
Reference: [6] <author> Peter Druschel and Larry L. Peterson. Fbufs: </author> <title> A high-bandwidth cross-domain transfer facility. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 189-202, </pages> <year> 1993. </year>
Reference-contexts: The concept of I/O efficient buffers is similar to various proposals for minimizing data copies, e.g., [4], <ref> [6] </ref>, and [10]. Independent threads of control for network I/O have been used in several systems, such as [7].
Reference: [7] <author> Paul W. Jardetzky, Cormac J. Sreenan, and Roger M. Needham. </author> <title> Storage and synchronization for distributed continuous media. </title> <journal> Multimedia Systems, </journal> <volume> 3 </volume> <pages> 151-161, </pages> <year> 1995. </year>
Reference-contexts: The concept of I/O efficient buffers is similar to various proposals for minimizing data copies, e.g., [4], [6], and [10]. Independent threads of control for network I/O have been used in several systems, such as <ref> [7] </ref>.
Reference: [8] <author> C. Partridge. </author> <title> A proposed flow specification. Internet RFC 1363, </title> <month> September </month> <year> 1992. </year>
Reference-contexts: Furthermore, the delivery of media data would require real-time QoS (such as delay and throughput) guarantees to ensure smooth playback. We therefore expect that future multimedia applications will negotiate reserved-rate connections with networks|such as those considered in [2] and <ref> [8] </ref>. To obtain QoS guarantees, the packet arrivals to a reserved-rate connection are required to satisfy certain flow specifications. To better understand the characteristics of multimedia applications, we studied a working video-conferencing tool called nv (for network video), which is widely used in mbone multicasts.
Reference: [9] <author> D.M. Ritchie. </author> <title> A stream input-output system. </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> 63(8) </volume> <pages> 1897-1910, </pages> <month> October </month> <year> 1984. </year>
Reference-contexts: Data transfer goes through intermediary kernel buffers by memory-to-memory data copies. We illustrate by describing the read/write paths between a user process and the Ethernet interface in SunOS 5.3, whose networking subsystem is implemented using streams <ref> [9] </ref>. When a write () system call occurs, the user data are copied by the stream head into stream buffers; the data are segmented into multiple stream messages if needed (e.g., to conform to Ethernet's packet size). The stream messages are then queued to the Ethernet driver.
Reference: [10] <author> Jonathan M. Smith, C. Brendan, and S. Traw. </author> <title> Giving applications access to Gb/s networking. </title> <journal> IEEE Network, </journal> <pages> pages 44-52, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: The concept of I/O efficient buffers is similar to various proposals for minimizing data copies, e.g., [4], [6], and <ref> [10] </ref>. Independent threads of control for network I/O have been used in several systems, such as [7].
Reference: [11] <author> C.A. Thekkath, T.D. Nguyen, E. Moy, and E.D. Lazowska. </author> <title> Implementing network protocols at user level. </title> <journal> IEEE/ACM Trans. Networking, </journal> <volume> 1(5) </volume> <pages> 554-565, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Our architecture is illustrated in Figure 3. There are various ways to structure protocols in an operating system. We assume a user-level protocol implementation called the protocol server model <ref> [11] </ref>, which facilitates protocol development and customization. From a performance point of view, application and performance-critical protocol code run in the same protection domain; communication between them does not need kernel intervention. We have left device management in kernel space. There are two reasons.
Reference: [12] <author> Geoffrey G. Xie and Simon S. Lam. </author> <title> Delay guarantee of Virtual Clock server. </title> <type> Technical Report TR-94-24, </type> <month> October </month> <year> 1994. </year> <note> Available from http://www.cs.utexas.edu/users/lam/NRL, and to appear in IEEE/ACM Transactions on Networking, </note> <month> December </month> <year> 1995. </year>
Reference-contexts: The scheduling algorithms presented in Section 8 are extensions of rate-based proposals for scheduling packets in a network switch <ref> [12, 13] </ref>, and for metascheduling of continuous media [1]. Our algorithms have been designed for send scheduling by a periodic kernel thread. Elimination of system calls for sending has also been proposed in [3] where requests to send are polled in the clock interrupt handler.
Reference: [13] <author> Lixia Zhang. </author> <title> Virtual clock: A new traffic control algorithm for packet switching networks. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(2) </volume> <pages> 101-124, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: The scheduling algorithms presented in Section 8 are extensions of rate-based proposals for scheduling packets in a network switch <ref> [12, 13] </ref>, and for metascheduling of continuous media [1]. Our algorithms have been designed for send scheduling by a periodic kernel thread. Elimination of system calls for sending has also been proposed in [3] where requests to send are polled in the clock interrupt handler.
References-found: 13

