URL: ftp://ftp.cc.gatech.edu/pub/tech_reports/1995/GIT-CC-95-51.ps.Z
Refering-URL: http://www.cs.gatech.edu/aimosaic/faculty/goel/ABSTRACTS-summary.html
Root-URL: 
Author: Ashok K. Goel Khaled S. Ali Eleni Stoulia 
Abstract: Some Experimental Results in Multistrategy Navigation Planning 
Abstract-found: 1
Intro-found: 1
Reference: [Alterman 1988] <author> R. Alterman. </author> <title> Adaptive Planning. </title> <journal> Cognitive Science, </journal> <volume> 12 </volume> <pages> 393-422, </pages> <year> 1988. </year>
Reference-contexts: Most deliberative path planning algorithms work by searching the problem space characterized by the spatial model of the world (e.g., [Latombe 1991]). Case-based reuse of past plans (e.g., <ref> [Alterman 1988] </ref>; [Hammond 1989]) offers an alternative strategy. In this strategy, new problems are solved by retrieving and adapting similar plans. But the claim that this strategy produces new plans more efficiently than model-based search without any loss in the quality of solutions (see, e.g., [Kolodner 1993]) remains largely unexamined.
Reference: [Anderson, Kushmerick, and Lebiere 1993] <author> Anderson, J., Kushmerick, N., and Lebiere, C. </author> <year> 1993. </year> <title> Navigation and Conflict Resolution. </title> <editor> In Anderson, J. </editor> <title> Rules of the Mind. </title> <address> Hillsdale, New Jersey: </address> <publisher> Lawrence Erlbaum Associates, Inc. Forthcoming. </publisher>
Reference-contexts: The first method adapts the current case by recursively spawning adaptation goals, retrieving relevant cases, and combining them with the current case. The Mediator system [Kolodner and Simpson 1989] probably was the first AI program to use this adaptation strategy, though in the different domain of everyday decision making. <ref> [Anderson, Kushmerick, and Lebiere 1993] </ref> suggest that humans often adapt past navigation plans for new problems simply by concatenating them. Router provides a computational model of how relevant navigation plans can be recursively retrieved from memory and combined to solve new navigation problems. <p> As a result, the generated navigation plan may contain zig-zags and loops. We already have given the reasons for Router's use of this method for adapting navigation plans: case combination is a well known and powerful adaptation strategy [Kolodner and Simpson 1989], and psychological data <ref> [Anderson, Kushmerick, and Lebiere 1993] </ref> appears to indicate that humans often use concatenation of navigation plans as a primary plan adaptation strategy. Of course, it is possible to 46 modify Router's case-adaptation strategy so that it produces better quality plans.
Reference: [Arkin 1989a] <author> R. Arkin. </author> <title> Navigational Path Planning for a Vision-Based Mobile Robot. </title> <journal> Robotica, </journal> <volume> 7 </volume> <pages> 49-63, </pages> <year> 1989. </year>
Reference-contexts: Most deliberative path planning algorithms use metrical knowledge in addition to qualitative topological knowledge (e.g., [Latombe 1991]). This is true even for hybrid robot architectures capable of both deliberative planning and situated control (e.g., <ref> [Arkin 1989a] </ref>). However, metrical knowledge of the kind required by path planning algorithms often may not be available for many navigation spaces. Further, the (implicit) assumption that effective spatial navigation requires the use of metrical knowledge by the path planner remains largely unexamined in case of hybrid robots. <p> Therefore, we integrated Router in a hybrid robot architecture and embodied the architecture in a robot called Stimpy. 32 6.1 Overview of AuRA The Autonomous Robot Architecture (AuRA), developed by <ref> [Arkin 1989a] </ref>, is a general, hybrid robot architecture for integrating navigation planning and reactive control. AuRA produces plans at three levels of abstraction: mission, navigation, and pilot. <p> This line of work is based on the assumption that qualitative knowledge is sufficient for planning in most navigation domains. Our work on Router and related theories shares this assumption. In contrast, almost all robotics work on navigation planning uses metrical knowledge in addition to qualitative knowledge (e.g., <ref> [Arkin 1989a; Latombe 1991] </ref>). This line of work argues that in general qualitative reasoning is not sufficient for navigation planning in the context of physical robots operating in the real world. <p> Note that theories of situated action move away not only from AI theories but also from traditional robotics theories of navigation planning. This in turn has led to proposals for hybrid robot architectures that combine navigation planning with situation action (e.g., <ref> [Arkin 1989a, 1989b] </ref>). The utility of hybrid architectures is apparent in our experiments with Stimpy. Suppose that Stimpy was a purely situated actor, with no capability of planning.
Reference: [Arkin 1989b] <author> Arkin, </author> <title> R.C., Motor Schema-Based Mobile Robot Navigation, </title> <journal> International Journal of Robotics Research, </journal> <volume> Vol. 8, No. 4, </volume> <month> August </month> <year> 1989, </year> <pages> pp. 92-112. </pages>
Reference-contexts: The motion planner directs the robot to move to the goal location of the specific path segment using reactive motor schemas. Figure 11 illustrates the AuRA architecture. 6.2 Situated Action in AuRA The pilot level of AuRA uses schema-based reactive control to realize situated action <ref> [Arkin 1989b] </ref>. Figure 12 illustrates the reactive control mechanism. Each schema in the mechanism for reactive control is responsible for one basic "reflex" action, such as avoiding obstacles. Each schema outputs a vector, or a set of vectors, in response to a particular perceptual stimulus.
Reference: [Brooks 1986] <author> R. Brooks. </author> <title> A Robust Layered Control System for a Mobile Robot. </title> <journal> IEEE Robotics and Automation, </journal> <volume> 2 </volume> <pages> 14-23. </pages>
Reference: [Brown and Chandrasekaran 1989] <author> D. Brown and B. Chandrasekaran. </author> <title> Design Problem Solving: Knowledge Struc--tures and Control Strategies. </title> <publisher> Pitman, </publisher> <address> London. </address> <year> 1989. </year>
Reference: [Chandrasekaran 1989] <author> B. Chandrasekaran. </author> <title> Task Structures, </title> <journal> Knowledge Acquisition and Machine Learning. Machine Learning, </journal> <volume> 4 </volume> <pages> 341-347, </pages> <year> 1989. </year>
Reference: [Cohen and Howe 1988] <author> P. Cohen and A. Howe. </author> <title> How Evaluation Guides Research. </title> <journal> AI Magazine, </journal> <volume> Vol. 9, No. 4, </volume> <month> Winter </month> <year> 1988, </year> <pages> pp. 35-43. </pages>
Reference-contexts: The examination of the second hypothesis requires the design and construction of a path planner capable of using both model-based search and case-based reuse. The two methods then can be compared and evaluated through ablation experiments (see <ref> [Cohen and Howe 1988] </ref>). Router is a multistrategy system capable of dynamically spawning tasks, and flexibly selecting and integrating multiple methods. The selection and integration of the two methods in Router is task directed. <p> We tested the hypotheses described above by conducting a series of ablation experiments <ref> [Cohen and Howe 1988] </ref>. In these experiments, first, a specific portion of the program is made inoperational and the performance of the remaining portions is observed on some set of problems.
Reference: [Davis 1986] <author> E. Davis. </author> <title> Representing and Acquiring Geographic Knowledge. </title> <publisher> Morgan Kauffman, </publisher> <address> California. </address>
Reference-contexts: This principle implicitly forms the basis of much of AI work on the organization of spatial knowledge and reasoning (e.g., <ref> [Davis 1986] </ref> [Lawton and Levitt 1990]). For navigation spaces characterized by discrete pathways, we operationalized the principle into two heuristics pertaining to the proximity and the significance of the pathways.
Reference: [Dijkstra 1959] <author> E. Dijkstra. </author> <title> A Note on Two Problems in Connexion with Graphs. </title> <journal> Numerische Mathematik, </journal> <volume> 1 </volume> <pages> 269-271. </pages>
Reference: [Fikes and Nilsson 1971] <author> STRIPS: </author> <title> A New Approach to the Application of Theorem Proving to Problem Solving. </title> <journal> Artificial Intelligence, </journal> 2(3/4):189-208, 1971. 
Reference: [Fikes, Hart and Nilsson 1972] <editor> Learning and Executing Generalized Robot Plans. </editor> <booktitle> Artificial Intelligence, </booktitle> <volume> 3 </volume> <pages> 251-288, </pages> <year> 1971. </year>
Reference: [Goel 1991] <author> A. Goel. </author> <title> A Model-Based Approach to Case Adaptation. </title> <booktitle> Proc. Thirteenth Annual Conference of the Cognitive Science Society, </booktitle> <address> Chicago, </address> <month> August 7-10 </month> <year> 1991, </year> <pages> pp. 143-148. </pages>
Reference-contexts: This method uses the topological model for completing the retrieved plan. This method builds on our earlier work on integrating case-based and model-based reasoning in the context of engineering design. In that work, we found that structure-behavior-function models of physical devices enable the adaptation of design cases <ref> [Goel 1991; Goel and Chandrasekaran 1992] </ref>. Router's mechanism for method-directed spawning of subtasks and task-directed method selection and integration directly evolves from Chandrasekaran's [1989] conceptual framework of task structures. In this framework, methods directly specify the subtasks they set up.
Reference: [Goel and Callantine 1992] <author> A. Goel and T. Callantine. </author> <title> An Experience-Based Approach to Navigational Route Planning. </title> <booktitle> To appear in Proc. IEEE/RSJ International Conference on Intelligent Robotics and Systems, Rayleigh, </booktitle> <address> North Carolina, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: This meant that we had to visually engineer the office floor by posting barcodes that could be recognized by the robot. First, we designed and constructed a deliberative path planner called Router that uses only qualitative topological knowledge of the navigation space <ref> [Goel and Callantine 1992; Goel et al 1993] </ref>. Then, we integrated Router in a hybrid robot architecture called AuRA that is due to Arkin [1989a]. We call the resulting system Raura. Next, we embodied Raura in a Denning MRV-2 robot that we call Stimpy.
Reference: [Goel and Chandrasekaran 1992] <author> A. Goel and B. Chandrasekaran. </author> <title> Case-Based Design: A Task Analysis. </title> <booktitle> In Artificial Intelligence Approaches to Engineering Design, Volume II: Innovative Design, </booktitle> <editor> C. Tong and D. Sriram (editors). </editor> <publisher> Academic Press, </publisher> <address> San Diego. </address> <year> 1992, </year> <pages> pp. 165-184. </pages>
Reference-contexts: This method uses the topological model for completing the retrieved plan. This method builds on our earlier work on integrating case-based and model-based reasoning in the context of engineering design. In that work, we found that structure-behavior-function models of physical devices enable the adaptation of design cases <ref> [Goel 1991; Goel and Chandrasekaran 1992] </ref>. Router's mechanism for method-directed spawning of subtasks and task-directed method selection and integration directly evolves from Chandrasekaran's [1989] conceptual framework of task structures. In this framework, methods directly specify the subtasks they set up. <p> Router adopts and adapts the TIPS architecture for multistrategy path planning. In general, the selection of a specific method may depend on three criteria <ref> [Goel and Chandrasekaran 1992] </ref>: (1) Since different methods may yield solutions with different properties (e.g., optimality, correctness), what are the properties desired of the solution to the task T 1; (2) Since different methods may have different computational requirements (e.g., processing time, memory size), what are the computational constraints on T
Reference: [Goel, Donnellan, Vasquez, and Callantine 1993] <author> A. Goel, M. Donnellan, N. Vasquez, and T. Callantine. </author> <title> An Integrated Experience-Based Approach to Navigational Path Planning for Automonous Mobile Robotics. </title> <booktitle> In Proc. IEEE International Conference on Robotics and Automation, </booktitle> <address> Atlanta, Georgia, </address> <month> May </month> <year> 1993, </year> <pages> pp. 818-825. </pages>
Reference: [Hammond 1989] <author> K. Hammond. </author> <title> Case-Based Planning: Viewing Planning as a Memory Task, </title> <booktitle> 1989, </booktitle> <address> Boston, MA: </address> <publisher> Academic. </publisher>
Reference-contexts: Most deliberative path planning algorithms work by searching the problem space characterized by the spatial model of the world (e.g., [Latombe 1991]). Case-based reuse of past plans (e.g., [Alterman 1988]; <ref> [Hammond 1989] </ref>) offers an alternative strategy. In this strategy, new problems are solved by retrieving and adapting similar plans. But the claim that this strategy produces new plans more efficiently than model-based search without any loss in the quality of solutions (see, e.g., [Kolodner 1993]) remains largely unexamined. <p> Further, we found that the number of problems Router's case-based method can be solve increases approximately linearly with the initial number of cases in memory. Note that in most case-based systems (e.g., <ref> [Hammond 1989] </ref>) the initial set of cases is handcrafted for a specific class of problems rather than randomly generated. In Experiment 2.4, in contrast, Router's initial set of cases was randomly generated.
Reference: [Kolodner 1993] <author> J. Kolodner. </author> <title> Case-Based Reasoning. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo. </address> <year> 1993. </year>
Reference-contexts: In this strategy, new problems are solved by retrieving and adapting similar plans. But the claim that this strategy produces new plans more efficiently than model-based search without any loss in the quality of solutions (see, e.g., <ref> [Kolodner 1993] </ref>) remains largely unexamined. The issue thus becomes whether the case-based strategy of plan reuse generates navigation plans more efficiently than the strategy of model-based search and whether the former strategy also leads to navigation plans of equal quality as the latter. <p> The prima facie justification for this hypothesis is that in general storing partial cases would enable the case-based method to retrieve a case more appropriate to a given problem, and this would reduce the computational cost of adapting it to meet the specifications of the problem (see <ref> [Kolodner 1993] </ref>). Testing this hypothesis raises the issue of what is a reasonable partial case. <p> In fact, this is precisely what Liu et al's [1994] RFinder does: it uses a Router-like space-subspace hierarchy and then runs Dijsktra's algorithm in the neighborhoods. Two issues are critical in any instantiation of the case-based strategy <ref> [Kolodner 1993] </ref>: case retrieval and case adaptation. Addressing the issue of case retrieval requires a scheme for indexing and organizing the case memory so that case retrieval is efficient and effective. Router uses model-based case indexing and organization. <p> Thus, there is a fundamental tension between the efficiency of planning and the quality of plans produced by Router's case-based method. Perhaps this tension is obvious but our experimental results make it explicit. It is often argued (e.g., <ref> [Kolodner 1993] </ref>) that decomposing a case into partial cases and storing the partial cases in memory may aid the reasoner in retrieving cases more relevant to a given problem. This in turn, the argument continues, would further enhance the efficiency of case-based reasoning. <p> This suggests that if cases are decomposed into partial cases at all, the decomposition should be done during problem solving, as and when needed. Perhaps the result that most surprised us concerns the number of cases needed to bootstrap the case-based method. Theories of case-based reasoning (e.g., <ref> [Kolodner 1993] </ref>) assume that the number of cases needed to seed the case memory is small relative to the total number of problems in a given world.
Reference: [Kolodner and Simpson 1989] <author> J. Kolodner and R. Simpson. </author> <title> The Mediator: Analysis of an Early Case-Based Rea-soner. </title> <journal> Cognitive Science, </journal> <volume> 13(4) </volume> <pages> 507-549. </pages>
Reference-contexts: Router uses two methods for adapting past navigation plans. The first method adapts the current case by recursively spawning adaptation goals, retrieving relevant cases, and combining them with the current case. The Mediator system <ref> [Kolodner and Simpson 1989] </ref> probably was the first AI program to use this adaptation strategy, though in the different domain of everyday decision making. [Anderson, Kushmerick, and Lebiere 1993] suggest that humans often adapt past navigation plans for new problems simply by concatenating them. <p> This method results in concatenating old plans. As a result, the generated navigation plan may contain zig-zags and loops. We already have given the reasons for Router's use of this method for adapting navigation plans: case combination is a well known and powerful adaptation strategy <ref> [Kolodner and Simpson 1989] </ref>, and psychological data [Anderson, Kushmerick, and Lebiere 1993] appears to indicate that humans often use concatenation of navigation plans as a primary plan adaptation strategy. Of course, it is possible to 46 modify Router's case-adaptation strategy so that it produces better quality plans.
Reference: [Kuipers 1978] <author> B. Kuipers. </author> <title> Modeling Spatial Knowledge. </title> <journal> Cognitive Science, </journal> <volume> 2(2): </volume> <pages> 129-154, </pages> <year> 1978. </year>
Reference: [Kuipers and Levitt 1988] <author> B. Kuipers and T. Levitt. </author> <title> Navigation and Mapping in Large-Scale Space. </title> <journal> AI Magazine, </journal> <volume> 9(2): </volume> <pages> 25-43. </pages>
Reference: [Latombe 1991] <author> J.C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: Hypothesis 1: For hybrid robots capable of both deliberative planning and situated action, qualitative topological representations are sufficient for effective spatial navigation in visually engineered worlds containing discrete pathways. Most deliberative path planning algorithms use metrical knowledge in addition to qualitative topological knowledge (e.g., <ref> [Latombe 1991] </ref>). This is true even for hybrid robot architectures capable of both deliberative planning and situated control (e.g., [Arkin 1989a]). However, metrical knowledge of the kind required by path planning algorithms often may not be available for many navigation spaces. <p> Most deliberative path planning algorithms work by searching the problem space characterized by the spatial model of the world (e.g., <ref> [Latombe 1991] </ref>). Case-based reuse of past plans (e.g., [Alterman 1988]; [Hammond 1989]) offers an alternative strategy. In this strategy, new problems are solved by retrieving and adapting similar plans. <p> Hypothesis 3: For the strategy of model-based search, the "principle of locality" provides a productive basis for partitioning and organizing the navigation space. Specific methods in the family of model-based search methods for path planning use different schemes for partitioning and organizing the navigation space 5 (e.g., <ref> [Latombe 1991] </ref>). <p> This line of work is based on the assumption that qualitative knowledge is sufficient for planning in most navigation domains. Our work on Router and related theories shares this assumption. In contrast, almost all robotics work on navigation planning uses metrical knowledge in addition to qualitative knowledge (e.g., <ref> [Arkin 1989a; Latombe 1991] </ref>). This line of work argues that in general qualitative reasoning is not sufficient for navigation planning in the context of physical robots operating in the real world.
Reference: [Levitt and Lawton 1990] <editor> Qualitative Navigation for Mobile Robots. T. Levitt and D. Lawton. </editor> <booktitle> Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference: [Liu et al 1994] <author> B. Liu, S. Choo, S. Lok, S. Leong, S. Lee, F. Poon, and H. Tan. </author> <title> Finding the Shortest Route Using Cases, Knowledge and Dijkstra's Algorithm. </title> <journal> IEEE Expert, </journal> <volume> 9(5) </volume> <pages> 7-11, </pages> <year> 1994. </year>
Reference: [Marr 1976] <author> Marr, D., </author> <title> (1982) Early Processing of Visual Information. </title> <journal> Proc. Transactions Royal Society of London, </journal> <volume> B 275, </volume> <pages> 483-524. </pages>
Reference: [Marr 1982] <author> Marr, D., </author> <title> (1982) Vision: A Computational investigation into the Human Representation and Processing of Visual Information, W.H. </title> <publisher> Freeman, </publisher> <address> San Francisco. </address>
Reference-contexts: Marr [1976] probably first clearly articulated this principle in his work on computer vision. He described an image understanding process <ref> [Marr 1982] </ref> in which the "pixels" in a raw image get locally grouped and understood in terms of spatial aggregations called edges, and the edges in turn get locally grouped and understood in terms of higher-level spatial abstractions called surfaces, and so on.
Reference: [McDermott and Davis 1984] <author> D. McDermott and E. Davis. </author> <title> Planning Routes through Uncertain Territory. </title> <journal> Artificial Intelligence, </journal> <volume> 22 </volume> <pages> 107-156, </pages> <year> 1984. </year>
Reference: [Punch 1989] <author> W. Punch. </author> <title> A Diagnostic System Using Task-Integrated Problem Solving Architecture, Including Causal Reasoning. </title> <type> PhD. Dissertation, </type> <institution> Dept. of Computer and Information Science, The Ohio State University. </institution> <year> 1989. </year> <month> 55 </month>
Reference: [Stroulia 1995] <author> E. Stroulia. </author> <title> Failure-Driven Learning as Model-Based Redesign. </title> <type> PhD. Dissertation, </type> <institution> College of Com--puting, Georgia Institute of Technology; forthcoming. </institution>
Reference-contexts: But Raura's reactive mechanism for monitoring plan execution does not recognize plan failures. The recognition of plan failures appears to require additional (deliberative and qualitative) reasoning. We are presently exploring this issue in the Autognostic project <ref> [Stroulia 1995] </ref>. 45 7.3 Hypothesis 2 One of the arguments for theories of situated action is that deliberative planning is computationally too complex to model behavior close to "real time". Most theories of planning in both AI and robotics use some kind of model-based search to generate plans from start.
Reference: [Stroulia and Goel 1995] <author> E. Stroulia and A. Goel. </author> <title> Functional Representation and Reasoning in Reflective Systems. </title> <note> To appear in Journal of Applied Intelligence, Special Issue on Functional Reasoning, 9(1), January 1995. 56 </note>
Reference-contexts: Meta-Router's learning method itself is not important for the present discussion because the learning of the space-subspace hierarchy is not the research issue here (see <ref> [Stroulia and Goel 1995] </ref> for details of Meta-Router). It is important to note only that, depending on the specific set of examples in the training input, the method is capable of organizing and reorganizing topological knowledge without involving handcrafting. <p> Instead, the research issue pertains to the computational effects of variations in Router's topological models. Therefore, we limit the following description to only what Meta-Router does, not how it does it. The reader may consult <ref> [Stroulia and Goel 1995] </ref> for more information on the what and how of Meta-Router, including its methods for assigning blame and reorganizing knowledge. 24 of fifty training problems and assimilated the feedback on them, we found that Router's topological model indeed was slightly different from the original model in that the
References-found: 30

