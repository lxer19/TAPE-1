URL: http://www.research.digital.com/SRC/tla/cav92.ps.Z
Refering-URL: http://www.research.digital.com/SRC/tla/papers.html
Root-URL: http://www.research.digital.com
Note: 12 References  
Abstract: 1. Stephen J. Garland and John V. Guttag. An overview of LP, the Larch Prover. In N. Dershowitz, editor, Proceedings of the Third International Conference on Rewriting Techniques and Applications, volume 355 of Lecture Notes on Computer Science, pages 137-151. Springer-Verlag, April 1989. 2. Stephen J. Garland and John V. Guttag. A guide to LP, the Larch Prover. Technical Report 82, Digital Equipment Corporation Systems Research Center, December 1991. 3. Robert Harper, David MacQueen, and Christopher Wadsworth. Standard ML. Internal Report ECS-LFCS-86-2, Edingburgh University, March 1986. 4. Leslie Lamport. `Sometime' is sometimes `not never': A tutorial on the temporal logic of programs. In Proceedings of the Seventh Annual Symposium on Principles of Programming Languages, pages 174-185. ACM SIGACT-SIGPLAN, January 1980. 5. Leslie Lamport. What good is temporal logic? In R. E. A. Mason, editor, Information Processing 83: Proceedings of the IFIP 9th World Congress, pages 657-668, Paris, September 1983. IFIP, North-Holland. 6. Leslie Lamport. The temporal logic of actions. Technical Report 79, Digital Equipment Corporation, Systems Research Center, December 1991. 7. Amir Pnueli. The temporal logic of programs. In Proceedings of the 18th Annual Symposium on the Foundations of Computer Science, pages 46-57. IEEE, November 1977. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Stephen J. Garland and John V. Guttag. </author> <title> An overview of LP, the Larch Prover. </title> <editor> In N. Dershowitz, editor, </editor> <booktitle> Proceedings of the Third International Conference on Rewriting Techniques and Applications, volume 355 of Lecture Notes on Computer Science, </booktitle> <pages> pages 137-151. </pages> <publisher> Springer-Verlag, </publisher> <month> April </month> <year> 1989. </year>
Reference: 2. <author> Stephen J. Garland and John V. Guttag. </author> <title> A guide to LP, the Larch Prover. </title> <type> Technical Report 82, </type> <institution> Digital Equipment Corporation Systems Research Center, </institution> <month> December </month> <year> 1991. </year>
Reference: 3. <author> Robert Harper, David MacQueen, and Christopher Wadsworth. </author> <title> Standard ML. </title> <type> Internal Report ECS-LFCS-86-2, </type> <institution> Edingburgh University, </institution> <month> March </month> <year> 1986. </year>
Reference: 4. <author> Leslie Lamport. </author> <title> `Sometime' is sometimes `not never': A tutorial on the temporal logic of programs. </title> <booktitle> In Proceedings of the Seventh Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 174-185. </pages> <publisher> ACM SIGACT-SIGPLAN, </publisher> <month> January </month> <year> 1980. </year>
Reference: 5. <author> Leslie Lamport. </author> <title> What good is temporal logic? In R. </title> <editor> E. A. Mason, editor, </editor> <booktitle> Information Processing 83: Proceedings of the IFIP 9th World Congress, </booktitle> <pages> pages 657-668, </pages> <address> Paris, </address> <month> September </month> <year> 1983. </year> <title> IFIP, </title> <publisher> North-Holland. </publisher>
Reference: 6. <author> Leslie Lamport. </author> <title> The temporal logic of actions. </title> <type> Technical Report 79, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <month> December </month> <year> 1991. </year>

Reference: 1. <editor> Init ) TC Proof We assume Init and prove TC . 1.1. </editor> <title> d 2 [Node ! Nat [ f1g] Proof By definition of Init, considering separately the cases n = Root and n 6= Root. 1.2. f 2 [Node ! Node] Proof By definition of Init. qed Step 1 follows from 1.1, </title> <booktitle> 1.2, and the definition of TC </booktitle> . 


References-found: 7

