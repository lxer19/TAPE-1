URL: ftp://ftp.cs.toronto.edu/pub/bonner/papers/transaction.logic/expose.ps
Refering-URL: http://www.cs.toronto.edu/DB/people/bonner/papers.html
Root-URL: 
Email: email: bonner@db.toronto.edu.  
Title: Transaction Logic: An (Early) Expose  
Author: Anthony J. Bonner and Michael Kifer 
Date: 15-16 May 1992,  
Note: Keynote address in Proceedings of the Workshop on Formal Methods in Databases and Software Engineering, Springer-Verlag, Workshops in Computing Series, May 1993. Held,  This work was supported in part by a grant from the Natural Sciences and Engineering Research Council of Canada and a Connaught Grant from the  
Address: Toronto, Ontario M5S 1A4 Canada  Canada.  
Affiliation: University of Toronto Department of Computer Science  Montreal,  University of Toronto.  
Abstract: This paper is an informal account of Transaction Logic|a new logic recently introduced in [4]. Transaction Logic was devised to deal with the phenomena of state changes in logic programming, databases, and AI. Transaction Logic has a natural model theory and a sound and complete proof theory. Unlike many other logics, however, it is suitable for programming transactions, transactions that accomplish state transitions in a logically correct manner. Transaction logic amalgamates such features as hypothetical and committed updates, dynamic constraints on transaction execution, nondeterminism, and bulk updates. Transaction Logic also appears to be suitable as a logical model of hitherto non-logical phenomena, including so-called procedural knowledge in AI, and the behavior of object-oriented databases, especially methods with side effects. z email: kifer@cs.sunysb.edu. This work was supported in part by NSF grant CCR-9102159 and a grant from New York Science and Technology Foundation. Work done while on sabbatical leave from Stony Brook University. This author wishes to thank Computer Systems Research Institute of University of Toronto for their support. Present address: Department of Computer Science, SUNY at Stony Brook, Stony Brook, NY 11794, U.S.A. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> F. Bancilhon. A logic-programming/Object-oriented cocktail. </editor> <booktitle> SIGMOD Record, </booktitle> <volume> 15(3) </volume> <pages> 11-21, </pages> <month> September </month> <year> 1986. </year>
Reference-contexts: However, despite a plethora of action-logics, database researchers continue to complain that there is no clear declarative semantics for database updates <ref> [2, 1] </ref>. In fact, no action logic has ever been adopted by a database or logic programming system, and none has become a core of database or logic-programming theory.
Reference: [2] <author> C. Beeri. </author> <title> New data models and languages|The challenge. </title> <booktitle> In ACM SIGACT SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 1-15, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: However, despite a plethora of action-logics, database researchers continue to complain that there is no clear declarative semantics for database updates <ref> [2, 1] </ref>. In fact, no action logic has ever been adopted by a database or logic programming system, and none has become a core of database or logic-programming theory.
Reference: [3] <author> A.J. Bonner and M. Kifer. </author> <title> A general logic of state change. </title> <type> Technical report, </type> <institution> CSRI, University of Toronto, </institution> <year> 1992. </year> <note> In preparation. </note>
Reference-contexts: The proof theory for Horn T R is much simpler than the proof theory for full T R, which involves encoding T R in a more general logic of state transitions. The latter will be discussed in a forthcoming report <ref> [3] </ref>. 2 Overview and Introductory Examples From the user's point of view, using T R is similar to using Prolog or using a relational database system. That is, the user may specify rules and he may pose queries and request updates.
Reference: [4] <author> A.J. Bonner and M. Kifer. </author> <title> Transaction logic programming. </title> <type> Technical Report CSRI 270, </type> <institution> University of Toronto, </institution> <month> April </month> <year> 1992. </year> <note> Revised: December 1992. (This report can be FTP'ed (in binary mode) from the anonymous FTP account at cs.sunysb.edu; file: pub/TechReports/kifer/transaction-logic.dvi.Z) </note>
Reference-contexts: T R was designed with several application in mind, especially in databases, logic programming, and AI. It was therefore developed as a general logic, so that it could solve a wide range of update-related problems. The full paper, <ref> [4] </ref>, has an extensive discussion of a number of applications of T R, both practical and theoretical. We outline several of these applications here. 1. T R provides a logical account for many update-related phenomena. <p> This uniformity renders T R suitable for a number of diverse applications in areas such as relational databases, object-oriented databases, logic programming, and Artificial Intelligence. More discussion of the relationship between T R and process logics appears in <ref> [4] </ref>. Like classical logic, T R has a "Horn" version that is of particular interest for logic programming. In Horn T R, a transaction is defined by Prolog-style rules in which the premise specifies a sequence of queries and updates. <p> Horn T R has a clean and simple proof theory that is sound and complete with respect to its model theory. This proof theory is described in detail in <ref> [4] </ref>. Two versions are presented, a bottom-up version based on natural deduction, and a top-down version based on resolution. As in classical Horn logic, the resolution-based proof theory is probably the one that would be used in practice. <p> In this overview, we use the insertion and deletion of atomic formulas as canonical examples of elementary updates. Other kinds of elementary updates, such as SQL-style bulk updates, can be found in <ref> [4] </ref>. Elementary updates are atomic in that they cannot be decomposed into simpler updates. We therefore represent them by atomic formulas. Like all atomic formulas, elementary updates have a truth value; but in addition, they have a side effect on the database. <p> We illustrate this idea in two ways: first, through an informal example of robot navigation (i.e., a routing problem), and then through two formal and abstract examples. More elaborate and formal examples appear in <ref> [4] </ref>. Consider the following conjunction of two robot actions: "Go to the kitchen" ^ "Don't pass through the bedroom" Note that each conjunct is a non-deterministic action, since there are many ways in which it can be carried out. <p> Formally, the following statement is true: 6 P; D; D 0 j= (ins:a _ ins:b) ^ (ins:a _ ins:c) iff D 0 = D + fag In this way, classical conjunction reduces non-determinism and, in this particular example, yields a completely deterministic transaction. 2 In <ref> [4] </ref>, we show that T R is a rich language for expressing constraints. Much of this richness comes from serial conjunction, especially when combined with negation. <p> These formulas can often be simplified by using the dual operator , which we call serial disjunction. For example, the last formula can be rewritten as : <ref> [4] </ref>. 3 Syntax The syntax of T R distinguishes two kinds of formulas: transaction formulas and elementary transitions. The former define composite transactions, and the latter define elementary updates. Transaction formulas are the formulas that most users will work with, using them to define transactions and formulate queries. <p> In other words, such theories are not extensible. This is a serious problem, since the ability to add new transitions is by no means an esoteric whim. For instance, a transition called relational assignment <ref> [4] </ref> is especially important to SQL-style bulk updates. Furthermore, Katsuno and Mendelzon [9] pointed out that, generally, state transitions belong to two major categories|updates and revisions|and even within each category several different flavours of such transitions are worth looking at. <p> Enumerable sets of elementary transitions are called transition bases. The reader is referred to <ref> [4] </ref> for a more detailed discussion of elementary updates. 4 Model Theory Just as the syntax is based on two basic ideas|serial conjunction and elementary transitions|the semantics is also based on a small number of fundamental ideas: * Transaction Execution Paths: A transaction causes a sequence of database state changes; * <p> The path D 0 ; D 1 ; : : : ; D n is one such possible path and D n is one of the possible final states of the execution. This concept was illustrated in Section 2 and its formal rendering can be found in <ref> [4] </ref>. 5 Proof Theory T R has a sound and complete proof theory. Furthermore, there is a subset of T R, which we call Horn T R, that corresponds to classical logic programs and that has an efficient SLD-style proof procedure. <p> If hD 0 ; D 1 iff is in B, then B; P; D 0 ; D 1 j= ff. 5. If D 0 j= c then B; P; D 0 j= , where is a first-order formula, and j= c denotes classical entailment. We refer the reader to <ref> [4] </ref> for a thorough treatment of the proof theory. 6 Conclusions We have reviewed the main ideas underlying Transaction Logic, a novel declarative formalism for specifying and executing actions. A wide range of applications were alluded to, but their full treatment appears elsewhere [4]. <p> We refer the reader to <ref> [4] </ref> for a thorough treatment of the proof theory. 6 Conclusions We have reviewed the main ideas underlying Transaction Logic, a novel declarative formalism for specifying and executing actions. A wide range of applications were alluded to, but their full treatment appears elsewhere [4]. These applications include (but are not limited to): view updates in databases, logic programming with "clean" assert and retract, object-oriented logic programming, temporal constraints among actions, planning robot actions, the frame problem in AI, subjunctive and counterfactual reasoning, program verification, and others.
Reference: [5] <author> W. Chen. </author> <title> Declarative specification and evaluation of database updates. </title> <booktitle> In Intl. Con ference on Deductive and Object-Oriented Databases, volume 566 of Lecture Notes in Computer Science, </booktitle> <pages> pages 147-166. </pages> <publisher> Springer Verlag, </publisher> <month> December </month> <year> 1991. </year>
Reference-contexts: Transaction formulas combine simple transactions into complex ones. However, we also need a way to specify elementary changes to a database. One way to define such transitions is to build them into the semantics as in <ref> [11, 13, 5] </ref>. The problem with this approach is that adding new kinds of elementary transitions leads to a redefinition of the very notion of a model and thus to a revamping of the entire theory, including the need to reprove soundness and completeness results.
Reference: [6] <author> R.E. Fikes and N.J. Nilsson. </author> <title> STRIPS: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-208, </pages> <year> 1971. </year>
Reference-contexts: In general, sequences and constraints can be arbitrarily mixed, and in this way, procedural and declarative knowledge are seamlessly integrated. 1 STRIPS was an early AI planning system that simulated the actions of a robot arm <ref> [6] </ref>. 2 3. Because of its generality, T R supports a wide range of functionality in several ar eas.
Reference: [7] <author> D. Harel. </author> <title> First-Order Dynamic Logic, </title> <booktitle> volume 68 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1979. </year>
Reference-contexts: Most other logics are not capable of this uniform treatment, since they see queries as propositions, but updates (or actions) are seen as entities of a different, incompatible nature. For instance, in situation calculus [12], actions are function terms, while in Dynamic and Process Logics <ref> [7, 8] </ref>, actions are modal operators. Although T R is different from logics of action, it is comparable to declarative query languages, like Prolog and SQL. In Prolog, for instance, one does not reason about logic programs. Instead, one specifies and executes them.
Reference: [8] <author> D. Harel, D. Kozen, and R. Parikh. </author> <title> Process Logic: Expressiveness, decidability, com pleteness. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 25(2) </volume> <pages> 144-170, </pages> <month> October </month> <year> 1982. </year>
Reference-contexts: Most other logics are not capable of this uniform treatment, since they see queries as propositions, but updates (or actions) are seen as entities of a different, incompatible nature. For instance, in situation calculus [12], actions are function terms, while in Dynamic and Process Logics <ref> [7, 8] </ref>, actions are modal operators. Although T R is different from logics of action, it is comparable to declarative query languages, like Prolog and SQL. In Prolog, for instance, one does not reason about logic programs. Instead, one specifies and executes them. <p> Semantically, T R is related to Process Logic <ref> [8] </ref>, but is different from it in several important respects. As in Process Logic, a model in T R consists of a set of states, and actions cause transitions from one state to another.
Reference: [9] <author> H. Katsuno and A.O. Mendelzon. </author> <title> On the difference between updating a knowledge database and revising it. </title> <booktitle> In Proc. of the 2-nd Intl. Conference on Principles of Knowledge Representation (KR'91), </booktitle> <pages> pages 387-394, </pages> <address> Boston, Mass., </address> <month> April </month> <year> 1991. </year>
Reference-contexts: In other words, such theories are not extensible. This is a serious problem, since the ability to add new transitions is by no means an esoteric whim. For instance, a transition called relational assignment [4] is especially important to SQL-style bulk updates. Furthermore, Katsuno and Mendelzon <ref> [9] </ref> pointed out that, generally, state transitions belong to two major categories|updates and revisions|and even within each category several different flavours of such transitions are worth looking at. <p> 2, the predicates ins:b and del:b would be defined by an enumerable set of elementary transitions consisting of the formulas hD; D + fbgi ins:b and hD; D fbgi del:b for every relational database D. (If D is a general first-order formula, defining insertion and deletion is more involved; see <ref> [9] </ref>). Enumerable sets of elementary transitions are called transition bases. <p> For example, what does it mean to insert an atom b into a database that entails :b, especially if :b itself is not explicitly present in the database? There is no consensus on the answer to this question, and many solutions have been proposed (see <ref> [9] </ref> for a comprehensive discussion). Similar difficulties exist for deletion. Furthermore, insertions and deletions are not always the best choice for elementary updates, as mentioned earlier. For these reasons, we take a general approach to elementary updates.
Reference: [10] <author> M. Kifer, G. Lausen, and J. Wu. </author> <title> Logical foundations of object-oriented and frame based languages. </title> <type> Technical Report 90/14, </type> <institution> Department of Computer Science, SUNY at Stony Brook, </institution> <month> July </month> <year> 1990. </year> <note> To appear in J. of ACM. </note>
Reference-contexts: For instance, in logic programming, T R provides a logical treatment of the assert and retract operators in Prolog. This effectively extends the theory of logic programming to include updates as well as queries. In object-oriented databases, T R can be combined with object-oriented logics, such as F-logic <ref> [10] </ref>, to provide a logical account of methods, that is, of programs that reside "inside" objects and update their internal states. Thus, while F-logic covers the structural aspect of object-oriented databases, its combination with T R would account for the behavioral aspect as well. <p> Several other aspects of statement (1) should be mentioned at this point. First, the transaction base P can be any formula in T R. In practice, though, it will often be a 2 by combining T R with F-logic <ref> [10] </ref>, for example. 7 conjunction of Prolog-like rules, which we will represent as a finite set of formulas. In any case, regardless of its form, we call P a transaction base. As the name suggests, transaction bases define transactions and, as a special case, queries.
Reference: [11] <author> S. Manchanda and D.S. Warren. </author> <title> A logic-based language for database updates. </title> <editor> In J. Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 363-394. </pages> <publisher> Morgan-Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1988. </year>
Reference-contexts: Transaction formulas combine simple transactions into complex ones. However, we also need a way to specify elementary changes to a database. One way to define such transitions is to build them into the semantics as in <ref> [11, 13, 5] </ref>. The problem with this approach is that adding new kinds of elementary transitions leads to a redefinition of the very notion of a model and thus to a revamping of the entire theory, including the need to reprove soundness and completeness results.
Reference: [12] <author> J.M. McCarthy and P.J. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence, </booktitle> <volume> volume 4, </volume> <pages> pages 463-502. </pages> <publisher> Edinburgh University Press, </publisher> <year> 1969. </year> <note> Reprinted in Readings in Artificial Intelligence, </note> <year> 1981, </year> <title> Tioga Publ. </title> <publisher> Co. </publisher> <pages> 23 </pages>
Reference-contexts: Most other logics are not capable of this uniform treatment, since they see queries as propositions, but updates (or actions) are seen as entities of a different, incompatible nature. For instance, in situation calculus <ref> [12] </ref>, actions are function terms, while in Dynamic and Process Logics [7, 8], actions are modal operators. Although T R is different from logics of action, it is comparable to declarative query languages, like Prolog and SQL. In Prolog, for instance, one does not reason about logic programs. <p> Likewise, changes to a circuit design may be forbidden if the new design violates certain conditions (e:g:; limits on cost, size, or power consumption). It is worth noting that post-conditions can be awkward, if not impossible to express in other formalism of action, such as the situation calculus <ref> [12, 15] </ref>. Example 2.5 (Post-Conditions) If the atom b is a query (i :e:; has no side effects), then the expression ins:c b denotes an update followed by a test.
Reference: [13] <author> S. Naqvi and R. Krishnamurthy. </author> <title> Database updates in logic programming. </title> <booktitle> In ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 251-262, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Transaction formulas combine simple transactions into complex ones. However, we also need a way to specify elementary changes to a database. One way to define such transitions is to build them into the semantics as in <ref> [11, 13, 5] </ref>. The problem with this approach is that adding new kinds of elementary transitions leads to a redefinition of the very notion of a model and thus to a revamping of the entire theory, including the need to reprove soundness and completeness results.
Reference: [14] <author> N.J. Nilsson. </author> <booktitle> Principles of Artificial Intelligence. </booktitle> <publisher> Tioga Publ. Co., </publisher> <address> Paolo Alto, CA, </address> <year> 1980. </year>
Reference-contexts: All other atoms are updates. 2 Example 2.12 (Non-Deterministic Robot Actions) The rules below define actions that simulate the movements of a robot arm in the blocks world <ref> [14] </ref>.
Reference: [15] <author> R. Reiter. </author> <title> Formalizing database evolution in the situation calculus. </title> <booktitle> In Conf. on Fifth Generation Computer Systems, </booktitle> <year> 1992. </year> <month> 24 </month>
Reference-contexts: Likewise, changes to a circuit design may be forbidden if the new design violates certain conditions (e:g:; limits on cost, size, or power consumption). It is worth noting that post-conditions can be awkward, if not impossible to express in other formalism of action, such as the situation calculus <ref> [12, 15] </ref>. Example 2.5 (Post-Conditions) If the atom b is a query (i :e:; has no side effects), then the expression ins:c b denotes an update followed by a test.
References-found: 15

