URL: ftp://ftp.cs.vu.nl/pub/papers/theory/IR-443.ps.Z
Refering-URL: http://www.cs.vu.nl/vakgroepen/ti/ftpindex.html
Root-URL: 
Title: Full Abstractness of an Interleaving Semantics for Action Refinement  
Author: J.I. den Hartog E.P. de Vink and J.W. de Bakker ; 
Abstract: For an abstract programming language with action refinement both an operational and a denotational semantics are given. The operational semantics is based on an SOS-style transition system specification involving syntactical refinement sequences. The denotational semantics is an interleaving model which uses semantical refinement `environments'. It identifies those statements which are equal under all refinements. The denotational model is shown to be fully abstract with respect to the operational one. The underlying metric machinery is exploited to obtain this full abstractness result. Usually, action refinement is treated either in a model with some form of true concurrency, or, when an interleaving model is applied, by assuming that the refining statements are atomized. We argue that an interleaving model without such atomization is attractive as well.
Abstract-found: 1
Intro-found: 1
Reference: [ABKR89] <author> P. America, J.W. de Bakker, J.N. Kok, and J.J.M.M. Rutten. </author> <title> Denotational semantics of a parallel object-oriented language. </title> <journal> Information and Computation, </journal> <volume> 83 </volume> <pages> 152-205, </pages> <year> 1989. </year>
Reference-contexts: Although the statement of Lemma 5.6 is intuitively clear, we have to prepare for a technically involved proof as we quantify over all statements s and semantical refinements 1 and 2 . However, the so-called `" 1 2 "'-principle due to <ref> [ABKR89] </ref>, turns out to fit quite well with the definition of D together with weight-induction. (A simplified form of the principle was already used in the third example following Lemma 3.7.) In general this metric technique has the following form: Suppose that the expression x (ff) denotes an element in a
Reference: [Ace90] <author> L. Aceto. </author> <title> Action Refinement in Process Algebras. </title> <type> PhD thesis, </type> <institution> University of Sussex, </institution> <year> 1990. </year>
Reference-contexts: Related work in the setting of Petri-nets is the full abstractness result of Jategaonkar and Meyer [JM92] with respect to testing-equivalence. Other semantical investigations, driven by concrete process languages are, e.g., that of Aceto and Hennessy (cf. <ref> [Ace90, AH93] </ref>) and of Gorrieri [Gor91] (see also [DG95]).
Reference: [AH93] <author> L. Aceto and M. Hennessy. </author> <title> Towards action-refinement in process algebras. </title> <journal> Information and Computation, </journal> <volume> 103 </volume> <pages> 204-269, </pages> <year> 1993. </year>
Reference-contexts: Related work in the setting of Petri-nets is the full abstractness result of Jategaonkar and Meyer [JM92] with respect to testing-equivalence. Other semantical investigations, driven by concrete process languages are, e.g., that of Aceto and Hennessy (cf. <ref> [Ace90, AH93] </ref>) and of Gorrieri [Gor91] (see also [DG95]).
Reference: [Ban22] <author> S. </author> <title> Banach. Sur les operations dans les ensembles abstraits et leurs applications aux equations integrales. </title> <journal> Fundamenta Mathematicae, </journal> <volume> 3 </volume> <pages> 133-181, </pages> <year> 1922. </year>
Reference-contexts: Contractiveness of a function is a key ingredient in our semantical considerations below. The fundamental theorem that we use is the classical result due to Banach (cf. <ref> [Ban22] </ref>). Theorem 2.1 (Banach's Fixed Point Theorem) A contraction f : M ! M on a complete metric space has a unique fixed point. See the references given above for a proof of this theorem.
Reference: [BM94] <author> C. Baier and M.E. Majster-Cederbaum. </author> <title> The connection between an event structure semantics and an operational semantics for TSCP. </title> <journal> Acta Informatica, </journal> <volume> 31 </volume> <pages> 81-104, </pages> <year> 1994. </year> <month> 26 </month>
Reference-contexts: Further work on the semantics of action refinement in a true concurrency setting includes [CS95] in the context of LOTOS, and [Ren95] based on Rensink's PhD thesis [Ren93]. As further applications of metric techniques for true concurrency semantics |though not dealing with action refinement| we mention <ref> [BW90, LG91, BM94] </ref>. Another body of the extensive literature related to action refinement deals with language independent semantical equivalences. A comprehensive taxonomy of semantical equivalences, referred to as the linear-time branching-time spectrum is proposed by Van Glabbeek et al. (cf. [Gla90, Gla93, Gla96]).
Reference: [BR92] <editor> J.W. de Bakker and J.J.M.M. Rutten, editors. </editor> <title> Ten Years of Concurrency Semantics, </title> <booktitle> selected papers of the Amsterdam Concurrency Group. World Scientific, </booktitle> <year> 1992. </year>
Reference-contexts: Apart from the comprehensive [BV96] mentioned earlier, the reader may consult the following introductory literature for a more extensive explanation of the use of metric spaces for semantical modeling: <ref> [BZ82, BR92, BV98] </ref>. 3 Syntax and operational semantics In this section the syntax for the language L ref with action refinement is given. Using configurations which can store refinement sequences, the notion of action refinement can be captured intuitively by a transition system.
Reference: [Bre94] <author> F.C. van Breugel. </author> <title> Topological Models in Comparative Semantics. </title> <type> PhD thesis, </type> <institution> Vrije Uni-versiteit Amsterdam, </institution> <year> 1994. </year>
Reference-contexts: See <ref> [Bre94] </ref>.) The weight function that we introduce for this purpose provides a bound for the number of rules and axioms that are applied in a bottom-up construction of the derivation-tree for a transition.
Reference: [BV94] <editor> J.W. de Bakker and E.P. de Vink. </editor> <title> Bisimulation semantics for concurrency with atomicity and action refinement. </title> <journal> Fundamenta Informaticae, </journal> <volume> 20 </volume> <pages> 3-34, </pages> <year> 1994. </year>
Reference-contexts: here. (For a discussion on the relationship between syntactic and semantic action refinement we refer to [GGR96] where also sufficient conditions are proposed for the coincidence of these notions.) The work of Gorrieri considers atomized action refinement in an interleaving setting on the one hand (an approach also followed in <ref> [BV94] </ref>) and, on the other hand, arbitrary action refinement exploiting the causal trees of Darondeau and Degano [DD89], thus taking place in the true concurrency framework. Other key differences between [BV94] and the present paper, both following the interleaving approach, are - [BV94] is not based on the `equivalence under all <p> work of Gorrieri considers atomized action refinement in an interleaving setting on the one hand (an approach also followed in <ref> [BV94] </ref>) and, on the other hand, arbitrary action refinement exploiting the causal trees of Darondeau and Degano [DD89], thus taking place in the true concurrency framework. Other key differences between [BV94] and the present paper, both following the interleaving approach, are - [BV94] is not based on the `equivalence under all refinements' approach; moreover, both the transition system for O, and the definitions of the semantic operators for D, are radically different - [BV94] uses a branching (or `bisimulation') model for <p> the one hand (an approach also followed in <ref> [BV94] </ref>) and, on the other hand, arbitrary action refinement exploiting the causal trees of Darondeau and Degano [DD89], thus taking place in the true concurrency framework. Other key differences between [BV94] and the present paper, both following the interleaving approach, are - [BV94] is not based on the `equivalence under all refinements' approach; moreover, both the transition system for O, and the definitions of the semantic operators for D, are radically different - [BV94] uses a branching (or `bisimulation') model for the denotational semantics; below, D employs a linear model - [BV94] has <p> Other key differences between <ref> [BV94] </ref> and the present paper, both following the interleaving approach, are - [BV94] is not based on the `equivalence under all refinements' approach; moreover, both the transition system for O, and the definitions of the semantic operators for D, are radically different - [BV94] uses a branching (or `bisimulation') model for the denotational semantics; below, D employs a linear model - [BV94] has a considerably more complicated proof of the correctness of D versus O - [BV94] does not feature a full abstractness result. <p> - <ref> [BV94] </ref> is not based on the `equivalence under all refinements' approach; moreover, both the transition system for O, and the definitions of the semantic operators for D, are radically different - [BV94] uses a branching (or `bisimulation') model for the denotational semantics; below, D employs a linear model - [BV94] has a considerably more complicated proof of the correctness of D versus O - [BV94] does not feature a full abstractness result. <p> transition system for O, and the definitions of the semantic operators for D, are radically different - <ref> [BV94] </ref> uses a branching (or `bisimulation') model for the denotational semantics; below, D employs a linear model - [BV94] has a considerably more complicated proof of the correctness of D versus O - [BV94] does not feature a full abstractness result. Further work on the semantics of action refinement in a true concurrency setting includes [CS95] in the context of LOTOS, and [Ren95] based on Rensink's PhD thesis [Ren93].
Reference: [BV96] <editor> J.W. de Bakker and E.P. de Vink. </editor> <title> Control Flow Semantics. </title> <publisher> The MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: It should be noted that in this paper we deal with a process language without synchronization. Operational and denotational semantics for a language with synchronization are feasible as well. One then has to resort to a branching-time domain for the construction of the denotational semantics (see, for example, <ref> [BV96, Har96] </ref>). It is a topic of further investigations to see whether, e.g., failure sets can be employed to obtain a fully abstract model for such a language. We now discuss some related investigations dealing with full abstractness for action refinement. <p> Section 5 treats the comparison of the operational and denotational model and presents the full abstractness result. 3 2 Mathematical preliminaries We refer to [Dug76, Eng89], standard textbooks in general topology, and to the monograph <ref> [BV96] </ref> or the overview [Smy92], which have a theoretical computer science perspective, for the various basic definitions and facts from elementary metric topology: metric space, ul-trametric, 1-bounded metric, completeness, compact subset. <p> In summary we have the following basic result. Theorem 2.2 For any alphabet A, it holds that the metric spaces (A 1 ; d B ) and (A 1 nf*g; d B ) are complete, 1-bounded and ultrametric. 4 The reader is referred, e.g., to <ref> [BV96] </ref> for a proof of the above facts. For any metric space M , e.g. A 1 or A 1 n f*g, the collection P nc (M ) of nonempty and compact subsets is supplied with the Hausdorff-distance d H induced by the metric d of M . <p> ), 1 i n, it holds that d H ( i=1 n [ Y i ) maxf d H (X i ; Y i ) j 1 i n g: (2.1) For the special case of A 1 (and A 1 n f*g) we additionally have the following properties. (See <ref> [BV96] </ref>.) Lemma 2.4 (a) For any nonempty X; Y A 1 and a 2 A: d H (a X; a Y ) = 1 2 d H (X; Y ). (b) For any compact X A 1 and any n 2 N the set X [n] = f x [n] j <p> The next result is used for extending functions on sequences to functions on compact sets of sequences. We only present its basic form. See <ref> [BV96] </ref> (or [MV88] for a similar result in an order-theoretic setting) for more detail. Lemma 2.5 (Lifting Lemma) Let M 1 ; M 2 be two metric spaces. <p> If f : M 1 ! M 2 is non-expansive, then the mapping F : P nc (M 1 ) ! P nc (M 2 ) given by F (X) = f f (x) j x 2 X g is well-defined and also nonexpansive. Apart from the comprehensive <ref> [BV96] </ref> mentioned earlier, the reader may consult the following introductory literature for a more extensive explanation of the use of metric spaces for semantical modeling: [BZ82, BR92, BV98]. 3 Syntax and operational semantics In this section the syntax for the language L ref with action refinement is given. <p> Proof For L ref one first shows, by structural induction, that wgt (g), for g 2 GStat, is well-defined. From this, well-definedness of wgt (s), for s 2 Stat can be shown, again by structural induction. Well-definedness of wgt on Conf is then clear. See, e.g., <ref> [BV96] </ref>, for more details. 2 The operational semantics O will collect the sequences of actions of all the computations that are possible for a given statement. For this the resumption s:* is associated with the statement s as starting configuration for a computation for s. <p> Then O [[Djs]] = O (Djs:*) where O [[]] at the left-hand side is given by Definition 3.6. Proof For a proof of a result similar to part (a) see <ref> [BV96] </ref>, Definition 2.32 and Lemma 2.33. For part (b) see [BV96], Lemma 2.31. 2 As an immediate consequence of the definition of O on configurations we have, e.g., O (r 1 ) = O (r 2 ) if r 1 ! D;0 r 2 with r 1 not an alternative composition, <p> Then O [[Djs]] = O (Djs:*) where O [[]] at the left-hand side is given by Definition 3.6. Proof For a proof of a result similar to part (a) see <ref> [BV96] </ref>, Definition 2.32 and Lemma 2.33. For part (b) see [BV96], Lemma 2.31. 2 As an immediate consequence of the definition of O on configurations we have, e.g., O (r 1 ) = O (r 2 ) if r 1 ! D;0 r 2 with r 1 not an alternative composition, and O (r 1 + r 2 ) = O <p> Parts (b) and (c) can be shown via higher-order transformations for `; 0 ', `k 0 ' and application of the Lifting Lemma 2.5. See for a more detailed discussion, e.g., <ref> [BV96] </ref>, Sections 1.3, 2.2 and 4.1. 2 Now that the semantical operators are available, it is clear what the definition for the de notational semantics should look like. We introduce an intermediate layer of semantical refinements SemRef. <p> Next we address the well-definedness of the denotational model D. For this we will invoke the metric technique of [KR90] (discussed at length in <ref> [BV96] </ref>). The denotational mapping D: L ref ! SemRef ! P can be characterized as the fixed point of a contraction on a complete metric space. By Banach's Theorem 2.1 it then follows that the mapping D exists and is moreover unique.
Reference: [BV98] <editor> J.W. de Bakker and E.P. de Vink. </editor> <title> Denotational models for programming languages: Applications of Banach's fixed point theorem. Topology and its Applications, </title> <note> 1998. To appear. </note>
Reference-contexts: Apart from the comprehensive [BV96] mentioned earlier, the reader may consult the following introductory literature for a more extensive explanation of the use of metric spaces for semantical modeling: <ref> [BZ82, BR92, BV98] </ref>. 3 Syntax and operational semantics In this section the syntax for the language L ref with action refinement is given. Using configurations which can store refinement sequences, the notion of action refinement can be captured intuitively by a transition system.
Reference: [BW90] <author> J.W. de Bakker and J.H.A. Warmerdam. </author> <title> Metric pomset semantics for a concurrent language with recursion. </title> <editor> In I. Guessarian, editor, </editor> <booktitle> Proc. of the LITP Spring School on Theoretical Computer Science, </booktitle> <pages> pages 21-49. </pages> <note> LNCS 469, </note> <year> 1990. </year>
Reference-contexts: Further work on the semantics of action refinement in a true concurrency setting includes [CS95] in the context of LOTOS, and [Ren95] based on Rensink's PhD thesis [Ren93]. As further applications of metric techniques for true concurrency semantics |though not dealing with action refinement| we mention <ref> [BW90, LG91, BM94] </ref>. Another body of the extensive literature related to action refinement deals with language independent semantical equivalences. A comprehensive taxonomy of semantical equivalences, referred to as the linear-time branching-time spectrum is proposed by Van Glabbeek et al. (cf. [Gla90, Gla93, Gla96]).
Reference: [BZ82] <author> J.W. de Bakker and J.I. Zucker. </author> <title> Processes and the denotational semantics of concurrency. </title> <journal> Information and Control, </journal> <volume> 54 </volume> <pages> 70-120, </pages> <year> 1982. </year>
Reference-contexts: Apart from the comprehensive [BV96] mentioned earlier, the reader may consult the following introductory literature for a more extensive explanation of the use of metric spaces for semantical modeling: <ref> [BZ82, BR92, BV98] </ref>. 3 Syntax and operational semantics In this section the syntax for the language L ref with action refinement is given. Using configurations which can store refinement sequences, the notion of action refinement can be captured intuitively by a transition system.
Reference: [CDP87] <author> L. Castellano, G. De Michelis, and L. Pomello. </author> <title> Concurrency vs. interleaving: an instructive example. </title> <journal> Bulletin of the EATCS, </journal> <volume> 31 </volume> <pages> 12-15, </pages> <year> 1987. </year>
Reference-contexts: It follows that the notion of action refinement in itself |as was not perceived so far| does not enforce a truly concurrent interpretation. Previously, it has been argued by several authors that interleaving semantics is not the appropriate model when dealing with non-atomic action refinement. For example, in <ref> [CDP87] </ref> it is noted that in an interleaving interpretation the two statements a k b and a ; b + b ; a have the same meaning, viz. fab; bag, whereas, when the action a is refined to the sequential composition a 1 ; a 2 , the two respective refinements
Reference: [CS95] <author> J.P. Courtiat and D.E. Saidouni. </author> <title> Relating maximality-based semantics to action refinement in process algebras. </title> <editor> In D. Hogrefe and S. Leue, editors, </editor> <booktitle> Formal Description Techniques VII, </booktitle> <pages> pages 292-308. </pages> <publisher> Chapman & Hall, </publisher> <year> 1995. </year>
Reference-contexts: Further work on the semantics of action refinement in a true concurrency setting includes <ref> [CS95] </ref> in the context of LOTOS, and [Ren95] based on Rensink's PhD thesis [Ren93]. As further applications of metric techniques for true concurrency semantics |though not dealing with action refinement| we mention [BW90, LG91, BM94].
Reference: [DD89] <author> Ph. Darondeau and P. Degano. </author> <title> Causal trees. </title> <editor> In G. Ausiello, M. Dezani-Ciancaglini, and S. Ronchi Della Rocca, editors, </editor> <booktitle> Proc. ICALP'89, </booktitle> <pages> pages 234-248. </pages> <note> LNCS 372, </note> <year> 1989. </year>
Reference-contexts: where also sufficient conditions are proposed for the coincidence of these notions.) The work of Gorrieri considers atomized action refinement in an interleaving setting on the one hand (an approach also followed in [BV94]) and, on the other hand, arbitrary action refinement exploiting the causal trees of Darondeau and Degano <ref> [DD89] </ref>, thus taking place in the true concurrency framework.
Reference: [DG95] <author> P. Degano and R. Gorrieri. </author> <title> A causal operational semantics of action refinement. </title> <journal> Information and Computation, </journal> <volume> 122 </volume> <pages> 97-119, </pages> <year> 1995. </year>
Reference-contexts: Related work in the setting of Petri-nets is the full abstractness result of Jategaonkar and Meyer [JM92] with respect to testing-equivalence. Other semantical investigations, driven by concrete process languages are, e.g., that of Aceto and Hennessy (cf. [Ace90, AH93]) and of Gorrieri [Gor91] (see also <ref> [DG95] </ref>).
Reference: [Dug76] <author> J. Dugundji. </author> <title> Topology. </title> <publisher> Allyn and Bacon, </publisher> <year> 1976. </year>
Reference-contexts: In section 4 the denotational semantics for L ref is constructed employing the notion of a semantic refinement. Section 5 treats the comparison of the operational and denotational model and presents the full abstractness result. 3 2 Mathematical preliminaries We refer to <ref> [Dug76, Eng89] </ref>, standard textbooks in general topology, and to the monograph [BV96] or the overview [Smy92], which have a theoretical computer science perspective, for the various basic definitions and facts from elementary metric topology: metric space, ul-trametric, 1-bounded metric, completeness, compact subset.
Reference: [Eng89] <author> R. Engelking. </author> <title> General Topology. Sigma Series in Pure Mathematics 6, </title> <type> Heldermann Verlag, </type> <note> revised and completed edition, </note> <year> 1989. </year>
Reference-contexts: In section 4 the denotational semantics for L ref is constructed employing the notion of a semantic refinement. Section 5 treats the comparison of the operational and denotational model and presents the full abstractness result. 3 2 Mathematical preliminaries We refer to <ref> [Dug76, Eng89] </ref>, standard textbooks in general topology, and to the monograph [BV96] or the overview [Smy92], which have a theoretical computer science perspective, for the various basic definitions and facts from elementary metric topology: metric space, ul-trametric, 1-bounded metric, completeness, compact subset.
Reference: [Eng90] <author> U.H. Engberg. </author> <title> Partial Orders and Fully Abstract Models for Concurrency. </title> <type> PhD thesis, </type> <institution> Aarhus University, </institution> <year> 1990. </year> <note> Also published as Technical Report DAIMI PB-307, </note> <institution> Computer Science Department, Aarhus University 1990. </institution>
Reference-contexts: Their work is based on a special kind of series-parallel pomsets and falls in the linear-time true concurrency framework, since operationally at a given moment in time several actions may be observed simultaneously. In the dissertational work of Engberg <ref> [Eng90] </ref> additionally adequate logics and axiomatizations are discussed in this context. A minor difference, related to the other aspects stressed there, is the usage of set-based pre-orders and the role played by termination. In [Vog91, Vog92] a full abstractness result is obtained for safe Petri nets.
Reference: [GGR96] <author> U. Goltz, R. Gorrieri, and A. Rensink. </author> <title> Comparing syntactic and semantic action refinement. </title> <journal> Information and Computation, </journal> <volume> 125 </volume> <pages> 118-143, </pages> <year> 1996. </year>
Reference-contexts: The former is based on a syntactic interpretation of action refinement, a point of view not adopted here. (For a discussion on the relationship between syntactic and semantic action refinement we refer to <ref> [GGR96] </ref> where also sufficient conditions are proposed for the coincidence of these notions.) The work of Gorrieri considers atomized action refinement in an interleaving setting on the one hand (an approach also followed in [BV94]) and, on the other hand, arbitrary action refinement exploiting the causal trees of Darondeau and Degano
Reference: [GL95] <author> R. Gorrieri and C. Laneve. </author> <title> Split and ST bisimulation semantics. </title> <journal> Information and Computation, </journal> <volume> 118 </volume> <pages> 272-288, </pages> <year> 1995. </year>
Reference-contexts: Hence the resulting semantical equivalence is at least as fine as split n -semantics. It is an open question how the congruence yielded by our denotational model relates to ST-bisimulation and split or swap semantics (cf. <ref> [GL95, Vog96] </ref>). Outline of the paper Section 2 covers the mathematical preliminaries and is mostly devoted to the elementary metric machinery. Section 3 introduces the language L ref and its transition system and related operational model.
Reference: [Gla90] <author> R.J. van Glabbeek. </author> <title> The linear time branching time spectrum (extended abstract). </title> <editor> In J.C.M. Baeten and J.W. Klop, editors, </editor> <booktitle> Proc. CONCUR'90, </booktitle> <pages> pages 278-298. </pages> <note> LNCS 458, </note> <year> 1990. </year>
Reference-contexts: Another body of the extensive literature related to action refinement deals with language independent semantical equivalences. A comprehensive taxonomy of semantical equivalences, referred to as the linear-time branching-time spectrum is proposed by Van Glabbeek et al. (cf. <ref> [Gla90, Gla93, Gla96] </ref>). In the context of the present paper the linear-time notions of split n and ST-bisimulation are relevant.
Reference: [Gla93] <author> R.J. van Glabbeek. </author> <title> The linear time branching time spectrum II: the semantics of sequential systems with silent moves (extended abstract). </title> <editor> In E. Best, editor, </editor> <booktitle> Proc. CONCUR'93, </booktitle> <pages> pages 66-81. </pages> <note> LNCS 715, </note> <year> 1993. </year>
Reference-contexts: Another body of the extensive literature related to action refinement deals with language independent semantical equivalences. A comprehensive taxonomy of semantical equivalences, referred to as the linear-time branching-time spectrum is proposed by Van Glabbeek et al. (cf. <ref> [Gla90, Gla93, Gla96] </ref>). In the context of the present paper the linear-time notions of split n and ST-bisimulation are relevant.
Reference: [Gla96] <author> R.J. van Glabbeek. </author> <title> Comparative Concurrency Semantics and Refinement of Actions. CWI Tract 109. CWI, </title> <booktitle> 1996. Revision of Ph.D thesis of the same title. </booktitle>
Reference-contexts: Another body of the extensive literature related to action refinement deals with language independent semantical equivalences. A comprehensive taxonomy of semantical equivalences, referred to as the linear-time branching-time spectrum is proposed by Van Glabbeek et al. (cf. <ref> [Gla90, Gla93, Gla96] </ref>). In the context of the present paper the linear-time notions of split n and ST-bisimulation are relevant. <p> In ST -bisimulation, as introduced in [GV87], the current state of a process distinguishes between the actions that have been completed and the actions that have been started but not completed as yet. (See <ref> [Vog92, Gla96] </ref> for a further discussion of these notions.) In the denotational model we propose here we quantify over all semantic refinements. Hence the resulting semantical equivalence is at least as fine as split n -semantics.
Reference: [Gor91] <author> R. Gorrieri. </author> <title> Refinement, Atomicity and Transactions for Process Description Languages. </title> <type> PhD thesis, </type> <institution> University of Pisa, </institution> <year> 1991. </year> <note> Also available as Technical Report TD-2/91, </note> <institution> Dipar-timento di Informatica, Universita degli Studi di Pisa. </institution> <month> 27 </month>
Reference-contexts: Related work in the setting of Petri-nets is the full abstractness result of Jategaonkar and Meyer [JM92] with respect to testing-equivalence. Other semantical investigations, driven by concrete process languages are, e.g., that of Aceto and Hennessy (cf. [Ace90, AH93]) and of Gorrieri <ref> [Gor91] </ref> (see also [DG95]).
Reference: [GV87] <author> R.J. van Glabbeek and F.W. Vaandrager. </author> <title> Petri net models for algebraic theories of concur--rency. </title> <editor> In J.W. de Bakker, A.J. Nijman, and P.C. Treleaven, editors, PARLE'87, </editor> <volume> volume I, </volume> <pages> pages 224-242. </pages> <note> LNCS 259, </note> <year> 1987. </year>
Reference-contexts: Split semantics goes back at least to [Hen88]; two statements or structures are identified if they cannot be distinguished by splitting up their actions in sequences of actions up to length n. In ST -bisimulation, as introduced in <ref> [GV87] </ref>, the current state of a process distinguishes between the actions that have been completed and the actions that have been started but not completed as yet. (See [Vog92, Gla96] for a further discussion of these notions.) In the denotational model we propose here we quantify over all semantic refinements.
Reference: [Har96] <author> J.I. den Hartog. </author> <title> Comparative semantics for atomization and action refinement with synchronization. </title> <type> Master's thesis, </type> <institution> Vrije Universiteit Amsterdam, </institution> <year> 1996. </year>
Reference-contexts: It should be noted that in this paper we deal with a process language without synchronization. Operational and denotational semantics for a language with synchronization are feasible as well. One then has to resort to a branching-time domain for the construction of the denotational semantics (see, for example, <ref> [BV96, Har96] </ref>). It is a topic of further investigations to see whether, e.g., failure sets can be employed to obtain a fully abstract model for such a language. We now discuss some related investigations dealing with full abstractness for action refinement.
Reference: [Hen88] <author> M. Hennessy. </author> <title> Axiomatising finite concurrent processes. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17 </volume> <pages> 997-1017, </pages> <year> 1988. </year>
Reference-contexts: A comprehensive taxonomy of semantical equivalences, referred to as the linear-time branching-time spectrum is proposed by Van Glabbeek et al. (cf. [Gla90, Gla93, Gla96]). In the context of the present paper the linear-time notions of split n and ST-bisimulation are relevant. Split semantics goes back at least to <ref> [Hen88] </ref>; two statements or structures are identified if they cannot be distinguished by splitting up their actions in sequences of actions up to length n.
Reference: [JM92] <author> L. Jategaonkar and A. Meyer. </author> <title> Testing equivalence for Petri nets with action refinement: preliminary report. </title> <editor> In R. Cleaveland, editor, </editor> <booktitle> Proc. CONCUR'92, </booktitle> <pages> pages 17-31. </pages> <note> LNCS 630, </note> <year> 1992. </year>
Reference-contexts: Also this research falls in the true concurrency framework. In [Vog93] 2 the results are extended to event structures with silent moves, in particular for history--preserving bisimulation. Related work in the setting of Petri-nets is the full abstractness result of Jategaonkar and Meyer <ref> [JM92] </ref> with respect to testing-equivalence. Other semantical investigations, driven by concrete process languages are, e.g., that of Aceto and Hennessy (cf. [Ace90, AH93]) and of Gorrieri [Gor91] (see also [DG95]).
Reference: [KR90] <author> J.N. Kok and J.J.M.M. Rutten. </author> <title> Contractions in comparing concurrency semantics. </title> <journal> Theoretical Computer Science, </journal> <volume> 76 </volume> <pages> 179-222, </pages> <year> 1990. </year> <note> Extended abstract in Proc. </note> <editor> ICALP'88, T. Lepisto and A. Salomaa (eds.), </editor> <volume> LNCS 317, </volume> <pages> pp. 317-332, </pages> <year> 1988. </year>
Reference-contexts: To determine which mapping 0 : PVar ! P is the proper one an additional fixed point argument is necessary. In the metric methodology the application of environments for the modeling of recursion is generally avoided. As originally proposed by Kok and Rutten <ref> [KR90] </ref>, one can simply state D (x) = D (D (x)) provided sufficient contractiveness for the underlying fixed point characterization can be guaranteed. (It is here that the restriction to guarded recursion is crucial.) The use of environments for procedure variables is, in our approach, replaced by the use of environments <p> Next we address the well-definedness of the denotational model D. For this we will invoke the metric technique of <ref> [KR90] </ref> (discussed at length in [BV96]). The denotational mapping D: L ref ! SemRef ! P can be characterized as the fixed point of a contraction on a complete metric space. By Banach's Theorem 2.1 it then follows that the mapping D exists and is moreover unique.
Reference: [LG91] <author> R. Loogen and U. Goltz. </author> <title> Modelling nondeterministic concurrent processes with event structures. </title> <journal> Fundamenta Informaticae, </journal> <volume> 14 </volume> <pages> 39-73, </pages> <year> 1991. </year>
Reference-contexts: Further work on the semantics of action refinement in a true concurrency setting includes [CS95] in the context of LOTOS, and [Ren95] based on Rensink's PhD thesis [Ren93]. As further applications of metric techniques for true concurrency semantics |though not dealing with action refinement| we mention <ref> [BW90, LG91, BM94] </ref>. Another body of the extensive literature related to action refinement deals with language independent semantical equivalences. A comprehensive taxonomy of semantical equivalences, referred to as the linear-time branching-time spectrum is proposed by Van Glabbeek et al. (cf. [Gla90, Gla93, Gla96]).
Reference: [Mil89] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall International, </publisher> <year> 1989. </year>
Reference-contexts: This is act n (s). The union act (s) over all positions n is similar to the notion of syntactic sort (cf., e.g., <ref> [Mil89] </ref>). 20 Definition 5.4 For n 2 N and s 2 Stat, the subset act n (s) of Act is inductively given by act 0 (s) = ; act n+1 (x) = act n+1 (g) where g = D (x) act n+1 (s 1 ; s 2 ) = act n+1
Reference: [MV88] <author> J.-J.Ch. Meyer and E.P. de Vink. </author> <title> Applications of compactness in the Smyth powerdomain of streams. </title> <journal> Theoretical Computer Science, </journal> <volume> 57 </volume> <pages> 251-282, </pages> <year> 1988. </year>
Reference-contexts: The next result is used for extending functions on sequences to functions on compact sets of sequences. We only present its basic form. See [BV96] (or <ref> [MV88] </ref> for a similar result in an order-theoretic setting) for more detail. Lemma 2.5 (Lifting Lemma) Let M 1 ; M 2 be two metric spaces.
Reference: [NEL88] <author> M Nielsen, U. Engberg, and K.S. Larsen. </author> <title> Fully abstract models for a process language with refinement. </title> <editor> In J.W. de Bakker, W.P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Proc. REX School/Workshop on Linear Time, Branching Time and Partial Order in Logics and Models for Concurrency, </booktitle> <pages> pages 523-548. </pages> <note> LNCS 354, </note> <year> 1988. </year>
Reference-contexts: We now discuss some related investigations dealing with full abstractness for action refinement. An early result concerning full abstraction and action refinement is the work of Nielsen, Engberg and Larsen <ref> [NEL88] </ref>. Their work is based on a special kind of series-parallel pomsets and falls in the linear-time true concurrency framework, since operationally at a given moment in time several actions may be observed simultaneously.
Reference: [Ren93] <author> A. Rensink. </author> <title> Models and Methods for Action Refinement. </title> <type> PhD thesis, </type> <institution> University of Twente, </institution> <year> 1993. </year>
Reference-contexts: Further work on the semantics of action refinement in a true concurrency setting includes [CS95] in the context of LOTOS, and [Ren95] based on Rensink's PhD thesis <ref> [Ren93] </ref>. As further applications of metric techniques for true concurrency semantics |though not dealing with action refinement| we mention [BW90, LG91, BM94]. Another body of the extensive literature related to action refinement deals with language independent semantical equivalences.
Reference: [Ren95] <author> A. Rensink. </author> <title> An event-based SOS for a language with refinement. </title> <editor> In J. Desel, editor, </editor> <booktitle> Structures in Concurrency Theory, Workshops in Computing, </booktitle> <pages> pages 294-309. </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Further work on the semantics of action refinement in a true concurrency setting includes [CS95] in the context of LOTOS, and <ref> [Ren95] </ref> based on Rensink's PhD thesis [Ren93]. As further applications of metric techniques for true concurrency semantics |though not dealing with action refinement| we mention [BW90, LG91, BM94]. Another body of the extensive literature related to action refinement deals with language independent semantical equivalences.
Reference: [Smy92] <editor> M.B. Smyth. Topology. In S. Abramsky, D.M. Gabbay, and T.S.E Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, volume 1, Background: Mathematical Structures, </booktitle> <pages> pages 641-761. </pages> <publisher> Clarendon Press, </publisher> <year> 1992. </year>
Reference-contexts: Section 5 treats the comparison of the operational and denotational model and presents the full abstractness result. 3 2 Mathematical preliminaries We refer to [Dug76, Eng89], standard textbooks in general topology, and to the monograph [BV96] or the overview <ref> [Smy92] </ref>, which have a theoretical computer science perspective, for the various basic definitions and facts from elementary metric topology: metric space, ul-trametric, 1-bounded metric, completeness, compact subset.
Reference: [Vog91] <author> W. Vogler. </author> <title> Failures semantics based on interval semiwords is a congruence for refinement. </title> <journal> Distributed Computing, </journal> <volume> 4 </volume> <pages> 139-162, </pages> <year> 1991. </year>
Reference-contexts: In the dissertational work of Engberg [Eng90] additionally adequate logics and axiomatizations are discussed in this context. A minor difference, related to the other aspects stressed there, is the usage of set-based pre-orders and the role played by termination. In <ref> [Vog91, Vog92] </ref> a full abstractness result is obtained for safe Petri nets. In this work Vogler takes language equivalence as a starting point and uses a notion of interval semiwords, ordered structures in which `timing information' of actions can be encoded.
Reference: [Vog92] <author> W. Vogler. </author> <title> Modular Construction and Partial Order Semantics of Petri Nets. </title> <publisher> LNCS 625, </publisher> <year> 1992. </year>
Reference-contexts: In the dissertational work of Engberg [Eng90] additionally adequate logics and axiomatizations are discussed in this context. A minor difference, related to the other aspects stressed there, is the usage of set-based pre-orders and the role played by termination. In <ref> [Vog91, Vog92] </ref> a full abstractness result is obtained for safe Petri nets. In this work Vogler takes language equivalence as a starting point and uses a notion of interval semiwords, ordered structures in which `timing information' of actions can be encoded. <p> In ST -bisimulation, as introduced in [GV87], the current state of a process distinguishes between the actions that have been completed and the actions that have been started but not completed as yet. (See <ref> [Vog92, Gla96] </ref> for a further discussion of these notions.) In the denotational model we propose here we quantify over all semantic refinements. Hence the resulting semantical equivalence is at least as fine as split n -semantics.
Reference: [Vog93] <author> W. Vogler. </author> <title> Bisimulation and action refinement. </title> <journal> Theoretical Computer Science, </journal> <volume> 114 </volume> <pages> 173-200, </pages> <year> 1993. </year>
Reference-contexts: The resulting notion of equivalence is finer than step semantics and yields the coarsest congruence contained in failure semantics. Also this research falls in the true concurrency framework. In <ref> [Vog93] </ref> 2 the results are extended to event structures with silent moves, in particular for history--preserving bisimulation. Related work in the setting of Petri-nets is the full abstractness result of Jategaonkar and Meyer [JM92] with respect to testing-equivalence.
Reference: [Vog96] <author> W. Vogler. </author> <title> The limit of split n -language equivalence. </title> <journal> Information and Computation, </journal> <volume> 127 </volume> <pages> 41-61, </pages> <year> 1996. </year>
Reference-contexts: Hence the resulting semantical equivalence is at least as fine as split n -semantics. It is an open question how the congruence yielded by our denotational model relates to ST-bisimulation and split or swap semantics (cf. <ref> [GL95, Vog96] </ref>). Outline of the paper Section 2 covers the mathematical preliminaries and is mostly devoted to the elementary metric machinery. Section 3 introduces the language L ref and its transition system and related operational model.
References-found: 41

