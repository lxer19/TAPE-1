URL: ftp://ftp.cs.dartmouth.edu/TR/TR94-218.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/reports/abstracts/TR94-218/
Root-URL: http://www.cs.dartmouth.edu
Title: 1 SPEDE A Simple Programming Environment for Distributed Execution  
Author: JAMES GOCHEE 
Degree: Senior Thesis  
Date: 1992  
Address: College,  
Affiliation: Department of Math and Computer Science Dartmouth  
Abstract: One of the main goals for people who use computer systems, particularly computational scientists, is speed. In the quest for ways to make applications run faster, engineers have developed parallel computers, which use more than one CPU to solve a task. However, many institutions already posses significant computational power in networks of workstations. Through software, it is possible to glue together clusters of machines to simulate a parallel environment. SPEDE is one such system, designed to place the potential of local machines at the fingertips of the programmer. Through a simple interface, users design computational objects that can be linked and run in parallel. The goal of the project is to have a small portable environment that allows various types of computer systems to interact. SPEDE requires no altering of the kernel and does not require system privileges to use. Using SPEDE, programmers can get significant speedup for computationally intensive problems. As an example, a Mandelbrot image generator was implemented, that attained a five-fold speedup with eight processors. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> E. Jul, H. Levy, N. Hutchinson, and A. Black. </author> <title> Fine-grained Mobility in the Emerald System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 109-133, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: SPEDE is a user level environment and should have as little impact on other people's machines as possible. Related Work There are several varieties of distributed systems, ranging from processoriented distribution [3], to objectoriented distribution with a custom operating system <ref> [1] </ref>, [2]. Most systems are somewhere between the two. These "mixed systems" offer finer-grained distribution than a user's process, but they do not usually work with the kernel itself.
Reference: 2. <author> S. Mullender, G. Rossum, A. Tanenbaum, R. Renesse, and H. van Staveren. </author> <title> Amoeba: A Distributed Operating System for the 1990s. </title> <journal> IEEE Computer, </journal> <volume> 23(5) </volume> <pages> 44-53, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: SPEDE is a user level environment and should have as little impact on other people's machines as possible. Related Work There are several varieties of distributed systems, ranging from processoriented distribution [3], to objectoriented distribution with a custom operating system [1], <ref> [2] </ref>. Most systems are somewhere between the two. These "mixed systems" offer finer-grained distribution than a user's process, but they do not usually work with the kernel itself.
Reference: 3. <author> H. Clark and B. McMillin. DAWGS: </author> <title> A Distributed Compute Server Utilizing Idle Workstations. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 14 </volume> <pages> 175-186, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: This avoids leaving processes associated with SPEDE running in the background, consuming resources on other users' workstations. SPEDE is a user level environment and should have as little impact on other people's machines as possible. Related Work There are several varieties of distributed systems, ranging from processoriented distribution <ref> [3] </ref>, to objectoriented distribution with a custom operating system [1], [2]. Most systems are somewhere between the two. These "mixed systems" offer finer-grained distribution than a user's process, but they do not usually work with the kernel itself.
Reference: 4. <author> A. Grimshaw. </author> <title> An Introduction to Parallel ObjectOriented Programming with Mentat. </title> <note> UVA Computer Science Report No. TR-91-07. </note> <month> April 4, </month> <year> 1991. </year>
Reference-contexts: Instead, they sit on top of the kernel and use a run time model other than a UNIX process, such as an object. Systems of - 3 - this type include Mentat <ref> [4] </ref>, Linda [5], and SPEDE. Remote procedure calls [6] can also be considered in this category, although they are only part of an integrated environment (for example, they do not support remote process execution). <p> This is clearly different from SPEDE, which is based on objects sending messages to other objects. While the tuplespace model is powerful because of its simplicity and abstractness, performance may be limited due to the complexities of managing the tuple space. Mentat <ref> [4] </ref>, on the other hand, uses an objectoriented paradigm based on the C++ programming language. Language extensions to C++ allow the system to handle remote communication and synchronization.
Reference: 5. <author> M. Arango, D. Berndt, N. Carriero, D. Gelernter, and D. Gilmore. </author> <title> Adventures with Network Linda. </title> <booktitle> Supercomputing Review, </booktitle> <month> October </month> <year> 1990. </year>
Reference-contexts: Instead, they sit on top of the kernel and use a run time model other than a UNIX process, such as an object. Systems of - 3 - this type include Mentat [4], Linda <ref> [5] </ref>, and SPEDE. Remote procedure calls [6] can also be considered in this category, although they are only part of an integrated environment (for example, they do not support remote process execution). Linda [5] is a unique distributed environment because it uses a much different paradigm than the object model. <p> Systems of - 3 - this type include Mentat [4], Linda <ref> [5] </ref>, and SPEDE. Remote procedure calls [6] can also be considered in this category, although they are only part of an integrated environment (for example, they do not support remote process execution). Linda [5] is a unique distributed environment because it uses a much different paradigm than the object model. Instead of one machine telling another what to do, remote machines that are idle join a pool of free processors.
Reference: 6. <author> A. Birrell and B. Nelson. </author> <title> Implementing Remote Procedure Calls. </title> <journal> ACM Transactions on Computer Systems. </journal> <volume> 2(1) </volume> <pages> 39-59. </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: Instead, they sit on top of the kernel and use a run time model other than a UNIX process, such as an object. Systems of - 3 - this type include Mentat [4], Linda [5], and SPEDE. Remote procedure calls <ref> [6] </ref> can also be considered in this category, although they are only part of an integrated environment (for example, they do not support remote process execution). Linda [5] is a unique distributed environment because it uses a much different paradigm than the object model.
References-found: 6

