URL: http://www.cs.concordia.ca/~faculty/gregb/home/PS/apsec97-industrial-se.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/gregb/home/paper.html
Root-URL: http://www.cs.concordia.ca
Email: gregb@cs.concordia.ca  
Title: Quality and Reuse in Industrial Software Engineering  
Author: Greg Butler 
Address: Montreal, PQ H3G 1M8 Canada  
Affiliation: Department of Computer Science Concordia University  
Abstract: The drive for productivity in the software industry is forcing major changes in the ways that software development and maintenance are being done. The technical trends contributing most to improved productivity are the improvement in quality of products and processes; and the reuse of code and other software components, such as design and requirements. We survey these technical trends. Each has gone beyond the research stage, and the preliminary results from pilot industrial projects have been reported. We summarize the information available on the costs and benefits of the approaches, and the criteria which determine a successful transfer of the technique to industry. Each has demonstrated a long-term (3-6 years) return on investment, under the right circumstances. They have not in general delivered short-term payoffs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. P. Beck, S. R. Desai, D. R. Ryan, R. W. Tower, D. Q. Vroom, and L. M. Wood. </author> <title> Architecture for large-scale reuse. </title> <journal> AT&T Technical Journal, </journal> <volume> 71(6) </volume> <pages> 34-45, </pages> <year> 1992. </year>
Reference-contexts: The role of a component within the framework may also form part of the domain taxonomy and be used in classification and retrieval. Using an architecture for network management systems and operations systems for the telecommunications market, AT&T <ref> [1] </ref> achieve up to 90% reuse and short time-to-market. For mature architectures and product families, one can build an application generator [2]. This is reuse by generation, where the components or system are generated automatically from a description of the desired solution.
Reference: [2] <author> T. J. Biggerstaff. </author> <title> An assessment and analysis of software reuse. </title> <booktitle> Advances in Computers, </booktitle> <volume> 34 </volume> <pages> 1-57, </pages> <year> 1992. </year>
Reference-contexts: Using an architecture for network management systems and operations systems for the telecommunications market, AT&T [1] achieve up to 90% reuse and short time-to-market. For mature architectures and product families, one can build an application generator <ref> [2] </ref>. This is reuse by generation, where the components or system are generated automatically from a description of the desired solution. The description of the solution may use a script language, such as a fourth-generation language (4GL) for relational databases, or a visual metaphor as in graphical user interface builders.
Reference: [3] <author> C. L. Braun. </author> <title> Reuse. </title> <booktitle> In Encyclopedia of Software Engineering, </booktitle> <pages> pages 1055-1069. </pages> <publisher> John Wiley and Sons, </publisher> <year> 1994. </year>
Reference-contexts: These net improvements come even though the development of components for reuse typically requires 20% more effort in each of the following phases: requirements analysis, module interface design, and coding. Braun <ref> [3] </ref> presents experiences from a range of companies around the world. Raytheon achieved 60% reuse and 50% net productivity increase when it applied reuse to business application systems. <p> A generic architecture is developed for this product family, so that there is a well-defined role for each component. The architecture, and its realization, is variously called a reference architecture, a domain specific software architecture (DSSA), or an application framework <ref> [3, 40] </ref>. The role of a component within the framework may also form part of the domain taxonomy and be used in classification and retrieval. Using an architecture for network management systems and operations systems for the telecommunications market, AT&T [1] achieve up to 90% reuse and short time-to-market.
Reference: [4] <author> F. P. Brooks. </author> <title> No silver bullet: </title> <journal> Essence and accidents of software engineering. IEEE Computer, </journal> <volume> 20 </volume> <pages> 10-19, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: Each viewpoint should be derived from a consistent underlying model. Harel [20], in his reply to Brooks <ref> [4] </ref>, is optimistic that developers can exercise greater intellectual control over complexity by using models throughout the development process. Harel is a supporter of multiple models, which have both a visual representation and a solid semantic foundation.
Reference: [5] <author> D. Budgen. </author> <title> Software Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: Models are abstractions which provide software developers with intellectual control over the complexity of a system. For this reason, it is important to understand the models used within software itself, and the models used by people during phases of the software process, such as analysis and design. Budgen <ref> [5] </ref> classifies design models into three categories: diagrammatic models based on a visual graphical repre sentation; textual models written in pseudocode or natural language; and mathematical models based on logic, algebra, set theory, or other mathematical notations. One generally has multiple views of a system [42, pp.117 and 121]. <p> One generally has multiple views of a system [42, pp.117 and 121]. Each view focuses on a single aspect of the system in an attempt to reduce complexity. Common viewpoints or perspectives used by developers <ref> [5, 8, 37] </ref> include structural models of the static aspects of a system, which may include the organization of subsystems and modules at the architectural level; functional viewpoints which seek to describe what the sys tem does in terms of its tasks; behavioral viewpoints describing the dynamic or causal nature of <p> For example, a developer might use nested modules to describe the structural view of a system; hierarchical data flow diagrams to describe functionality; statecharts, which provide nesting, abstraction, and decomposition, to model behavior; and a class inheritance hierarchy to model data <ref> [5] </ref>. Each viewpoint should be derived from a consistent underlying model. Harel [20], in his reply to Brooks [4], is optimistic that developers can exercise greater intellectual control over complexity by using models throughout the development process.
Reference: [6] <author> E. Buss, R. de Mori, W. Gentleman, J. Henshaw, H. John-son, K. Kontogiannis, E. Merlo, H. Muller, J. Mylopoulos, S. Paul, A. Prakash, M. Stanley, S. Tilley, J. Troster, and K. Wong. </author> <title> Investigating reverse engineering technologies for the CAS program understanding project. </title> <journal> IBM Systems Journal, </journal> <volume> 33(3) </volume> <pages> 477-500, </pages> <month> March </month> <year> 1994. </year>
Reference: [7] <author> B. Curtis. </author> <title> The capability maturity model and software process improvement. </title> <institution> Lecture at Le Centre de Recherche Infor-matique de Montreal (CRIM), </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: A large percentage (75%) of organizations assessed are at level 1, some 24% of organizations are at level 2 or 3, and only two organizations are at level 5. Curtis <ref> [7] </ref> cites the return on investment figures for three cases. The Ground Services Division of Hughes Aircraft invested $400K over a three-year period to go from a strong level 2 to a strong level 3 process.
Reference: [8] <author> P. Devanbu, R. Brachman, P. Selfridge, and B. Ballard. </author> <title> Lassie: A knowledge-based software information system. </title> <booktitle> In Proceedings of the 12th International Conference on Software Engineering, </booktitle> <pages> pages 249-261, </pages> <address> Los Alamitos, CA, 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Different models will be important in different domains such as business data bases and real-time embedded controls. A combination of models may be required to accurately portray or estimate a subsystem or system, and to answer questions such as the complexity and cost of a sys tem <ref> [8] </ref>. Formal models play an especially crucial role in critical systems such as nuclear reactors, heart pacemakers, and transport systems where human life is at risk [16]. The (mainly anecdotal) industrial evidence is that formal methods clearly lead to a better quality software product, with perhaps no loss of productivity. <p> One generally has multiple views of a system [42, pp.117 and 121]. Each view focuses on a single aspect of the system in an attempt to reduce complexity. Common viewpoints or perspectives used by developers <ref> [5, 8, 37] </ref> include structural models of the static aspects of a system, which may include the organization of subsystems and modules at the architectural level; functional viewpoints which seek to describe what the sys tem does in terms of its tasks; behavioral viewpoints describing the dynamic or causal nature of
Reference: [9] <author> R. Dion. </author> <title> Elements of a process-improvement program. </title> <journal> IEEE Software, </journal> <volume> 9 </volume> <pages> 83-85, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: The division estimates the improved software development process saves $2M per year on cost overruns, giving a 5 times ROI [23]. The Equipment Division of Raytheon invested $1.1M with estimated savings of $9.2M on rework, giving a 8.4 times ROI <ref> [9] </ref>. The Air Logistics Center of Tinker Air Force Base in Oklahoma City invested $462K with estimated savings of $2.9M over 18 areas of operation, giving a 6.4 times ROI [29].
Reference: [10] <author> R. Dion. </author> <title> Process improvement and the corporate balance sheet. </title> <journal> IEEE Software, </journal> <volume> 10 </volume> <pages> 28-35, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: The Air Logistics Center of Tinker Air Force Base in Oklahoma City invested $462K with estimated savings of $2.9M over 18 areas of operation, giving a 6.4 times ROI [29]. A closer look at the experience at Raytheon <ref> [10] </ref> shows that software process improvements within the Equipment Division over a four-and-a-half year period from mid 1988 to 1992 have yielded a 7.70 return on investment; a twofold increase in productivity; and an evolution from level 1 to level 3 on the CMM scale.
Reference: [11] <author> M. Fagan. </author> <title> Advances in software inspections. </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> SE-12(7):744-751, </volume> <month> July </month> <year> 1986. </year>
Reference-contexts: European sites feel they are in a stronger position for ISO audits for ISO 9001 certification. An important step in achieving level 3 is the implementation of review procedures which are applied consistently across the organization. There is a wide variety of walk-throughs, inspections, or reviews <ref> [11, 14] </ref> available for detecting defects in requirement, design, or code deliverables. Training is needed to ensure the procedures are followed consistently. The collection of data from these reviews, and the analysis of the data, are important at the higher levels.
Reference: [12] <author> J. </author> <title> Favaro. </title> <booktitle> What price reusability? Ada Letters, </booktitle> <pages> pages 115-124, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: This is necessary to justify continued management support for reuse. * Economic changes in the way an organization funds projects are needed to account for, and encourage the use of reusable assets. One study <ref> [12] </ref> indicates that some software assets must be reused more than 13 times to recover development costs. Marketing must identify the business domains where there is abundant opportunity for a variety of closely-related products, and hence reuse.
Reference: [13] <author> W. Frakes and S. Isoda. </author> <title> Success factors of systematic reuse. </title> <journal> IEEE Software, </journal> <volume> 11 </volume> <pages> 15-19, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: Reuse applies not only to source-code fragments, but to all the intermediate products generated during software development, including requirements, documents, system specifications, and any in formation the developer needs to create software. Software reuse <ref> [13] </ref> amortizes the cost of developing a component across many projects and supports better quality of products through more effort in inspections and testing. Systematic reuse, over the longer term, successfully delivers improvements in productivity and quality within an organization. <p> Reuse Technology Transfer Critical factors for the successful introduction of systematic reuse into an organization cover a range of both technical and non-technical areas [18, p.554]. These factors <ref> [13, 18, 39] </ref> include the following. * Long-term, top-down management support is vital, because there may be several years before the investment in reuse pays off, and because systematic reuse requires changes in organizational funding policies and management structures.
Reference: [14] <author> D. Freedman and G. Weinberg. </author> <title> Handbook of Walkthroughs, Inspections, and Technical Reviews. </title> <publisher> Dorset House, </publisher> <address> New York, third edition edition, </address> <year> 1990. </year>
Reference-contexts: European sites feel they are in a stronger position for ISO audits for ISO 9001 certification. An important step in achieving level 3 is the implementation of review procedures which are applied consistently across the organization. There is a wide variety of walk-throughs, inspections, or reviews <ref> [11, 14] </ref> available for detecting defects in requirement, design, or code deliverables. Training is needed to ensure the procedures are followed consistently. The collection of data from these reviews, and the analysis of the data, are important at the higher levels.
Reference: [15] <author> J. Gaffney and R. Cruickshank. </author> <title> A general economics model of software reuse. </title> <booktitle> In Proceedings of the 14th International Conference on Software Engineering, </booktitle> <pages> pages 327-337, </pages> <address> Los Alamitos, CA, 1992. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: A library of reusable assets was maintained for the domain of telephone management [38]. Softech uses a generic architecture for its compilers and achieves productivity levels which are 10-20 times the industry norm. Productivity figures from IBM development of MIS applications <ref> [15, p.331] </ref> that show reuse increased from 30% to 70% over the period 1986 to 1988, and that productivity increased from 20 to 50 function-points/labor-month over the same period.
Reference: [16] <author> S. Gerhart, D. Craigen, and T. Ralston. </author> <title> Experience with formal methods in critical systems. </title> <journal> IEEE Software, </journal> <volume> 11 </volume> <pages> 21-29, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Formal models play an especially crucial role in critical systems such as nuclear reactors, heart pacemakers, and transport systems where human life is at risk <ref> [16] </ref>. The (mainly anecdotal) industrial evidence is that formal methods clearly lead to a better quality software product, with perhaps no loss of productivity.
Reference: [17] <author> W. W. Gibbs. </author> <title> Software's chronic crisis. </title> <journal> Scientific American, </journal> <volume> 271(3) </volume> <pages> 86-95, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: A case study from Hughes Aircraft [23] clearly shows this cycle at work in an organization. The Software Engineering Institute has undertaken 261 assessments of organizations to date <ref> [17, p.90] </ref> and detailed statistics up to 1991 have been reported [25]. A large percentage (75%) of organizations assessed are at level 1, some 24% of organizations are at level 2 or 3, and only two organizations are at level 5.
Reference: [18] <author> M. L. Griss. </author> <title> Software reuse: From library to factory. </title> <journal> IBM Systems Journal, </journal> <volume> 32(4) </volume> <pages> 548-566, </pages> <year> 1993. </year>
Reference-contexts: Reuse Technology Transfer Critical factors for the successful introduction of systematic reuse into an organization cover a range of both technical and non-technical areas <ref> [18, p.554] </ref>. These factors [13, 18, 39] include the following. * Long-term, top-down management support is vital, because there may be several years before the investment in reuse pays off, and because systematic reuse requires changes in organizational funding policies and management structures. <p> Reuse Technology Transfer Critical factors for the successful introduction of systematic reuse into an organization cover a range of both technical and non-technical areas [18, p.554]. These factors <ref> [13, 18, 39] </ref> include the following. * Long-term, top-down management support is vital, because there may be several years before the investment in reuse pays off, and because systematic reuse requires changes in organizational funding policies and management structures. <p> Reuse of software seems to add no unique complications of its own [33]. Systematic reuse goes far beyond the mere use of libraries <ref> [18] </ref>. It requires a change in the whole software process, from requirements analysis to maintenance, and impacts the whole organization and the way it does business. Wasmund [39] provides a lengthy discussion of the IBM experience.
Reference: [19] <author> E. Guerrieri. </author> <title> Case study: Digital's application generator. </title> <journal> IEEE Software, </journal> <volume> 11 </volume> <pages> 95-96, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: The description of the solution may use a script language, such as a fourth-generation language (4GL) for relational databases, or a visual metaphor as in graphical user interface builders. DEC <ref> [19] </ref> have an application generator which describes a database application in terms of the building blocks of the entity-relationship data modeling approach. From the design, the application can generate code for multiple platforms, and in multiple languages, making the design highly portable. DEC achieves 80 to 95 percent code reuse.
Reference: [20] <author> D. Harel. </author> <title> Biting the silver bullet: Toward a brighter future for system development. </title> <journal> IEEE Computer, </journal> <volume> 25(1) </volume> <pages> 8-20, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Each viewpoint should be derived from a consistent underlying model. Harel <ref> [20] </ref>, in his reply to Brooks [4], is optimistic that developers can exercise greater intellectual control over complexity by using models throughout the development process. Harel is a supporter of multiple models, which have both a visual representation and a solid semantic foundation.
Reference: [21] <author> G. Heineman, J. Botsford, G. Caldiera, G. Kaiser, M. Kellner, and N. Madhavji. </author> <title> Emerging technologies that support a software process life cycle. </title> <journal> IBM Systems Journal, </journal> <volume> 33(3) </volume> <pages> 501-529, </pages> <year> 1994. </year>
Reference-contexts: The Capability Maturity Model is a model which provides a five-point scale against which an organization can assess its software process. Level 3 of the CMM requires a documented definition of the software process used within an organization: this is a software process model <ref> [21] </ref>; and level 4 requires a quantitative component to the software process model to support measurement and quantitative analysis. Modern quality improvement processes, like Total Quality Management, use seven models for quality control [43, p.85] and another seven models for management and planning [43, p.87].
Reference: [22] <author> W. S. Humphrey. </author> <title> Managing the Software Process. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: The Capability Maturity Model (CMM) is part of a software process improvement strategy spearheaded by the Software Engineering Institute of Carnegie Mellon University <ref> [22, 35] </ref>. The aim is to have a software process with predictable performance, and to be able to continuously improve that performance.
Reference: [23] <author> W. S. Humphrey, T. R. Snyder, and R. R. Willis. </author> <title> Software process improvement at hughes aircraft. </title> <journal> IEEE Software, </journal> <volume> 8 </volume> <pages> 11-23, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Process improvement is achieved by a cycle of * assessment to determine current capability, * development of an action plan to address shortcomings noted during the assessment, and * implementation of the action plan. A case study from Hughes Aircraft <ref> [23] </ref> clearly shows this cycle at work in an organization. The Software Engineering Institute has undertaken 261 assessments of organizations to date [17, p.90] and detailed statistics up to 1991 have been reported [25]. <p> The Ground Services Division of Hughes Aircraft invested $400K over a three-year period to go from a strong level 2 to a strong level 3 process. The division estimates the improved software development process saves $2M per year on cost overruns, giving a 5 times ROI <ref> [23] </ref>. The Equipment Division of Raytheon invested $1.1M with estimated savings of $9.2M on rework, giving a 8.4 times ROI [9].
Reference: [24] <editor> E.-A. Karlsson, editor. </editor> <title> Software Reuse: A Holistic Approach. </title> <publisher> John Wiley, </publisher> <year> 1995. </year>
Reference-contexts: Perhaps the greatest benefit will come from combined use of these approaches, for example a combination of the Cleanroom approach, object-oriented techniques, and software reuse, which the ESPRIT REBOOT project <ref> [24] </ref> is now actively researching. In this article we briefly survey quality and reuse. Each has gone beyond the research stage, and the preliminary results from pilot industrial projects have been reported. <p> Systematic reuse, over the longer term, successfully delivers improvements in productivity and quality within an organization. Reuse at a broader level than the organization has been less successful. Three different scopes of reuse have been identified <ref> [24] </ref>: General reuse is independent of the domain of application. It almost entirely reuses components such as common data structures and graphical user interfaces, that are found in most applications. Reuse within an application domain restricts its focus to a single domain, such as insurance, or missile guidance. <p> Perhaps the greatest benefit will come from combined use of these approaches, for example a combination of the Cleanroom approach, object-oriented techniques, and software reuse, which the ESPRIT REBOOT project <ref> [24] </ref> is now actively researching. Improvement is an on-going challenge, and one must remain vigilant for new technical advances. Indeed, level 5 of the CMM, for those organizations with an optimizing software process, includes technology change management as a key process area.
Reference: [25] <author> D. H. Kitson and S. M. </author> <title> Masters. An analysis of sei software process assessment results: 1987-1991. </title> <booktitle> In Proceedings of the 15th International Conference on Software Engineering, </booktitle> <pages> pages 68-77, </pages> <address> Los Alamitos, CA, 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: A case study from Hughes Aircraft [23] clearly shows this cycle at work in an organization. The Software Engineering Institute has undertaken 261 assessments of organizations to date [17, p.90] and detailed statistics up to 1991 have been reported <ref> [25] </ref>. A large percentage (75%) of organizations assessed are at level 1, some 24% of organizations are at level 2 or 3, and only two organizations are at level 5. Curtis [7] cites the return on investment figures for three cases.
Reference: [26] <author> R. Lanergan and C. Grasso. </author> <title> Software engineering with reusable designs and code. </title> <journal> IEEE Trans. SE, </journal> <volume> SE-10(5):498-501, </volume> <month> September </month> <year> 1984. </year>
Reference-contexts: Training is important, as is an emphasis on team-based egoless programming and an overwhelming drive to simplify designs. 4. Reuse Systematic reuse of existing software components to construct new systems has been successfully practiced by organizations <ref> [26, 27] </ref> since at least 1979. Reuse applies not only to source-code fragments, but to all the intermediate products generated during software development, including requirements, documents, system specifications, and any in formation the developer needs to create software. <p> Raytheon achieved 60% reuse and 50% net productivity increase when it applied reuse to business application systems. After analyzing 5000 Cobol programs, templates for the major architectures were developed, and a library of parts to fit the architectures was developed from existing modules <ref> [26] </ref>. NEC reports a 6.7 times productivity increase, and a 2.8 times quality improvement, also from reuse in the domain of business applications. They developed a reuse library, and integrated it into their development process.
Reference: [27] <author> R. Lanergan and B. Poynton. </author> <title> Reusable code: The application development technique of the future. </title> <booktitle> In Proceedings of the IBM SHARE/GUIDE Software Symposium, </booktitle> <pages> pages 127-136, </pages> <address> Monterey, CA, </address> <month> October </month> <year> 1979. </year> <institution> IBM. </institution>
Reference-contexts: Training is important, as is an emphasis on team-based egoless programming and an overwhelming drive to simplify designs. 4. Reuse Systematic reuse of existing software components to construct new systems has been successfully practiced by organizations <ref> [26, 27] </ref> since at least 1979. Reuse applies not only to source-code fragments, but to all the intermediate products generated during software development, including requirements, documents, system specifications, and any in formation the developer needs to create software.
Reference: [28] <author> W. C. Lim. </author> <title> Effects of reuse on quality, productivity, </title> <journal> and economics. IEEE Software, </journal> <volume> 11 </volume> <pages> 23-30, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: introduction of reuse. Lim <ref> [28] </ref> cites a 2-4 times ROI from reuse in such cases. Multiple models are encouraged in object-oriented methodologies such as OMT [37]. A model highlights one aspect of a system, for example, static relationships of classes and objects, dynamic behavior, functional dependency, synchronization dependencies, and life cycles of objects. <p> Successful introduction of reuse requires an organization's software development process to be defined, that is, level 3 of CMM scale. In such cases, the conclusions from industrial reuse efforts are typified by Hewlett-Packard's experience <ref> [28] </ref> of a 2-4 times return-on-investment from reuse. Hewlett-Packard [28] also reports improved quality (up to 51% reduction in defects), improved productivity (up to 57% increase), and a 42% reduction in time-to-market. <p> Successful introduction of reuse requires an organization's software development process to be defined, that is, level 3 of CMM scale. In such cases, the conclusions from industrial reuse efforts are typified by Hewlett-Packard's experience <ref> [28] </ref> of a 2-4 times return-on-investment from reuse. Hewlett-Packard [28] also reports improved quality (up to 51% reduction in defects), improved productivity (up to 57% increase), and a 42% reduction in time-to-market.
Reference: [29] <author> W. Lipke and K. Butler. </author> <title> Software process improvement: A success story. </title> <booktitle> Crosstalk, </booktitle> <pages> pages 29-31, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: The Equipment Division of Raytheon invested $1.1M with estimated savings of $9.2M on rework, giving a 8.4 times ROI [9]. The Air Logistics Center of Tinker Air Force Base in Oklahoma City invested $462K with estimated savings of $2.9M over 18 areas of operation, giving a 6.4 times ROI <ref> [29] </ref>.
Reference: [30] <author> N. H. Madhavji. </author> <title> Environment evolution: The prism model of changes. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> 18(5) </volume> <pages> 380-392, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Changes occur in each of these when seeking improvements in quality. There exist software process models which also model the context of the software process including the organization, the nation, and the global community and can model the changes occurring in each of these <ref> [30] </ref>. The Cleanroom approach utilizes * formal models of requirements and usage, * a model of how to construct the system incrementally, * three levels of models black box, state box, and clear box during the development phase, and * models to predict mean-time-to-failure from random test results.
Reference: [31] <author> J. Margono and T. E. Rhoads. </author> <title> Software reuse economics: Cost-benefit analysis on a large-scale ada project. </title> <booktitle> In Proceedings of the 14th International Conference on Software Engineering, </booktitle> <pages> pages 338-348, </pages> <address> Los Alamitos, CA, 1992. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Productivity figures from IBM development of MIS applications [15, p.331] that show reuse increased from 30% to 70% over the period 1986 to 1988, and that productivity increased from 20 to 50 function-points/labor-month over the same period. Margono and Rhoads <ref> [31] </ref> present data from the air traffic control domain that shows that creating reusable software is twice as expensive as non-reusable software. This is due to additional 15% cost for architectural design, 60% for detailed design, and 25% for coding and unit test.
Reference: [32] <author> H. D. Mills. </author> <title> Stepwise refinement and verification in box-structured systems. </title> <journal> IEEE Computer, </journal> <volume> 21 </volume> <pages> 23-35, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Development consists of design and verification steps. The refinement from black box (functional view) to state box (state transition view) to clear box (algorithmic view a la Hoare) follows the procedure described by Mills <ref> [32] </ref>. Reviews verify each stage of the refinement process by formally proving the correspondence between the different models: state box to black box, clear box to state box, and code to clear box. Code is not compiled as part of development: code is first compiled during certification.
Reference: [33] <institution> National Security Industrial Association Software Reuse Subcommittee, </institution> <address> Washington, D.C. </address> <booktitle> The Business Issues Associated with Software Reuse, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: There are also legal issues of ownership, royalties, liabilities, etc but these issues exist for software development with or without reuse, and they exist for the reuse of hardware components. Reuse of software seems to add no unique complications of its own <ref> [33] </ref>. Systematic reuse goes far beyond the mere use of libraries [18]. It requires a change in the whole software process, from requirements analysis to maintenance, and impacts the whole organization and the way it does business. Wasmund [39] provides a lengthy discussion of the IBM experience.
Reference: [34] <author> J. O'Connor, C. Mansour, J. Turner-Harris, and G. H. Camp-bell. </author> <title> Reuse in command-and-control systems. </title> <journal> IEEE Software, </journal> <volume> 11 </volume> <pages> 70-79, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: DEC achieves 80 to 95 percent code reuse. When the product family is suitably narrow, an organization can generate requirements documents, designs, and code for a product, as done by Rockwell <ref> [34] </ref> in the domain of command-and-control systems. 4.1. Reuse Technology Transfer Critical factors for the successful introduction of systematic reuse into an organization cover a range of both technical and non-technical areas [18, p.554].
Reference: [35] <author> M. Paulk, B. Curtis, M. Chrissis, and C. Weber. </author> <title> Capability maturity model for software, version 1.1. </title> <type> Technical Report CMU/SEI-93-TR-24, </type> <institution> Software Engineering Institute, </institution> <month> February </month> <year> 1993. </year>
Reference-contexts: The Capability Maturity Model (CMM) is part of a software process improvement strategy spearheaded by the Software Engineering Institute of Carnegie Mellon University <ref> [22, 35] </ref>. The aim is to have a software process with predictable performance, and to be able to continuously improve that performance.
Reference: [36] <author> J. H. Poore and C. J. Trammell, </author> <title> editors. Cleanroom Software Engineering: A Reader. </title> <publisher> Blackwell, </publisher> <year> 1996. </year>
Reference-contexts: The results of the action plan must be fully institutionalized into the corporate culture before the next cycle of process improvement is undertaken. 3. Quality of Product Cleanroom Software Engineering The Cleanroom approach <ref> [36] </ref>, developed at IBM Federal Services Company, is a highly disciplined software process which aims to produce zero-defect software with guarantees of reliability, measured as mean-time-to-failure (MTTF). In practice, the Cleanroom approach does produce high-quality software, within schedule and budget, and with statistical guarantees of reliability of the software. <p> In 1987, early university trials indicated that the Clean-room approach did lead to significantly fewer defects in the software product, and moreover, it required no more effort than traditional development processes. This has now been supported by industrial trials. Linger <ref> [36, Ch.6] </ref> presents results from 17 industrial projects ranging from system software and tools, to telecommunications and avionics software. The results clearly demonstrate improved quality of software, greatly reduced number of bug reports from the field and lower maintenance costs, and good productivity during the development process. <p> Hence, maintenance costs are very low. Reported productivity of the development phase is never lower than that of the previous development method used by the company; some report productivity at 780 lines of code per programmer month an improvement of 80%. As an example <ref> [36] </ref>, Erics-son Telecom developed their OS32 operating system for a switching computer using the Cleanroom approach. This was an 18-month, 70-person project which produced a 350 KLOC system, fully specified and certified. The testing error rate was 1.0 errors per KLOC; development productivity increased 70%; and testing productivity increased 100%.
Reference: [37] <author> J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy, and W. Lorenson. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference-contexts: introduction of reuse. Lim [28] cites a 2-4 times ROI from reuse in such cases. Multiple models are encouraged in object-oriented methodologies such as OMT <ref> [37] </ref>. A model highlights one aspect of a system, for example, static relationships of classes and objects, dynamic behavior, functional dependency, synchronization dependencies, and life cycles of objects. Different models will be important in different domains such as business data bases and real-time embedded controls. <p> One generally has multiple views of a system [42, pp.117 and 121]. Each view focuses on a single aspect of the system in an attempt to reduce complexity. Common viewpoints or perspectives used by developers <ref> [5, 8, 37] </ref> include structural models of the static aspects of a system, which may include the organization of subsystems and modules at the architectural level; functional viewpoints which seek to describe what the sys tem does in terms of its tasks; behavioral viewpoints describing the dynamic or causal nature of
Reference: [38] <author> M. Swanson and S. Curry. </author> <title> Implementing an asset management program at gte data services. </title> <journal> Information and Management, </journal> <volume> 16, </volume> <year> 1989. </year>
Reference-contexts: GTE Data Services in their first year achieved 14% reuse and savings of $1.5 million from a corporate-wide reuse program. A library of reusable assets was maintained for the domain of telephone management <ref> [38] </ref>. Softech uses a generic architecture for its compilers and achieves productivity levels which are 10-20 times the industry norm.
Reference: [39] <author> M. Wasmund. </author> <title> Implementing critical success factors in software reuse. </title> <journal> IBM Systems Journal, </journal> <volume> 32(4) </volume> <pages> 595-611, </pages> <year> 1993. </year>
Reference-contexts: Reuse Technology Transfer Critical factors for the successful introduction of systematic reuse into an organization cover a range of both technical and non-technical areas [18, p.554]. These factors <ref> [13, 18, 39] </ref> include the following. * Long-term, top-down management support is vital, because there may be several years before the investment in reuse pays off, and because systematic reuse requires changes in organizational funding policies and management structures. <p> Systematic reuse goes far beyond the mere use of libraries [18]. It requires a change in the whole software process, from requirements analysis to maintenance, and impacts the whole organization and the way it does business. Wasmund <ref> [39] </ref> provides a lengthy discussion of the IBM experience. Costing, funding of projects, and terms of contracts with customers and subcontractors are all impacted. However, when successful, reuse does dramatically improve software development process, decrease time-to-market and costs, and improve product quality. 5.
Reference: [40] <author> R. Wirfs-Brock and R. Johnson. </author> <title> Surveying current research in object-oriented design. </title> <journal> CACM, </journal> <volume> 33(9) </volume> <pages> 104-124, </pages> <month> Septem-ber </month> <year> 1990. </year>
Reference-contexts: A generic architecture is developed for this product family, so that there is a well-defined role for each component. The architecture, and its realization, is variously called a reference architecture, a domain specific software architecture (DSSA), or an application framework <ref> [3, 40] </ref>. The role of a component within the framework may also form part of the domain taxonomy and be used in classification and retrieval. Using an architecture for network management systems and operations systems for the telecommunications market, AT&T [1] achieve up to 90% reuse and short time-to-market.
Reference: [41] <author> H. Wohlwend and S. Rosenbaum. </author> <title> Software improvement in an international company. </title> <booktitle> In Proceedings of the 15th International Conference on Software Engineering, </booktitle> <pages> pages 212-220, </pages> <address> Los Alamitos, CA, 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Schlumberger <ref> [41] </ref> has had a process improvement pro-gramme since 1989 and has seen measurable improvements in all of its development groups taking part in the pro-gramme.
Reference: [42] <author> R. A. Zahniser. </author> <title> Design by walking around. </title> <journal> CACM, </journal> <volume> 36(10) </volume> <pages> 115-123, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Budgen [5] classifies design models into three categories: diagrammatic models based on a visual graphical repre sentation; textual models written in pseudocode or natural language; and mathematical models based on logic, algebra, set theory, or other mathematical notations. One generally has multiple views of a system <ref> [42, pp.117 and 121] </ref>. Each view focuses on a single aspect of the system in an attempt to reduce complexity.
Reference: [43] <author> R. E. Zultner. </author> <title> Tqm for technical teams. </title> <journal> CACM, </journal> <volume> 36(10) </volume> <pages> 79-91, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Modern quality improvement processes, like Total Quality Management, use seven models for quality control <ref> [43, p.85] </ref> and another seven models for management and planning [43, p.87]. A holistic view of the organization, its corporate culture, the personnel, and procedures is required in order to improve the quality of the process. Changes occur in each of these when seeking improvements in quality. <p> Modern quality improvement processes, like Total Quality Management, use seven models for quality control [43, p.85] and another seven models for management and planning <ref> [43, p.87] </ref>. A holistic view of the organization, its corporate culture, the personnel, and procedures is required in order to improve the quality of the process. Changes occur in each of these when seeking improvements in quality.
References-found: 43

