URL: ftp://ftp.cs.unc.edu/pub/users/manocha/PAPERS/COLLISION/contact.ps.Z
Refering-URL: http://www.cs.unc.edu/Research/graphics/pubs.html
Root-URL: http://www.cs.unc.edu
Title: Efficient Contact Determination Between Geometric Models  
Author: Ming C. Lin Dinesh Manocha Sitterson Hall, CB # 
Keyword: Additional Keywords and Phrases: contact determination, geometric coherence, spline models, simulations, animation  
Note: supported in part by Junior Faculty Award, University Research Award and ARPA Contract DABT63-93-C-0048.  
Address: Berkeley, CA 94720  Chapel Hill, NC 27599-3175  
Affiliation: Dept. of Electr. Engr. and Computer Science University of California  Computer Science Department  University of North Carolina  
Abstract: The problem of interference detection or contact determination between two or more objects in dynamic environments is fundamental in computer graphics, robotics and computer simulated environments. Most of the earlier work is restricted to either polyhedral models or static environments. In this paper, we present efficient algorithms for contact determination and interference detection between geometric models undergoing rigid motion. The set of models include polyhedra and surfaces described by algebraic sets or piecewise algebraic functions. The algorithms make use of temporal and spatial coherence between successive instances and their running time is a function of the motion between successive instances. The main characteristics of these algorithms are their simplicity and efficiency. They have been implemented; their performance on many applications indicates their potential for real-time simulations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal and M. Sharir. </author> <title> Red-blue intersection detection algorithms, with applications to motion planning and collision detection. </title> <journal> SIAM J. Comput., </journal> <volume> 19 </volume> <pages> 297-321, </pages> <year> 1990. </year>
Reference-contexts: The problems of contact determination and interference detection have been extensively studied in different areas. The literature in computational geometry consists of a number of theoretically efficient algorithms for polyhedral objects in static environments <ref> [1, 2, 9, 10, 11, 12, 13, 17, 36] </ref>. There are a number of algorithms with good asymptotic bounds, however their practical utility is not clear since many of them are not implemented in a realistic environment. <p> Each Bezier surface corresponds to a rational parametric surface, which can be represented in homogeneous coordinates as: F (s; t) = (X (s; t); Y (s; t); Z (s; t); W (s; t)): (1) The Bezier surface is defined over the domain (s; t) 2 <ref> [0; 1] </ref> fi [0; 1]. <p> Each Bezier surface corresponds to a rational parametric surface, which can be represented in homogeneous coordinates as: F (s; t) = (X (s; t); Y (s; t); Z (s; t); W (s; t)): (1) The Bezier surface is defined over the domain (s; t) 2 <ref> [0; 1] </ref> fi [0; 1]. <p> The Bezout bound for the first three equations is M = n 2 (2n 2). * Boundary Intersection : Such intersections lie on the boundary curve of one of the two surfaces. Say we are given a Bezier surface, defined over the domain, (s; t) 2 <ref> [0; 1] </ref> fi [0; 1], we obtain the boundary curves by substituting s or t to be 0 or 1. The resulting problem reduces to solving the equations: F (s; 1) = G (u; v) (8) Other possible boundary intersections can be computed in a similar manner. <p> The Bezout bound for the first three equations is M = n 2 (2n 2). * Boundary Intersection : Such intersections lie on the boundary curve of one of the two surfaces. Say we are given a Bezier surface, defined over the domain, (s; t) 2 <ref> [0; 1] </ref> fi [0; 1], we obtain the boundary curves by substituting s or t to be 0 or 1. The resulting problem reduces to solving the equations: F (s; 1) = G (u; v) (8) Other possible boundary intersections can be computed in a similar manner.
Reference: [2] <author> P. K. Agarwal, M. van Kreveld, and M. Overmars. </author> <title> Intersection queries for curved objects. </title> <booktitle> In Proc. 7th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 41-50, </pages> <year> 1991. </year>
Reference-contexts: The problems of contact determination and interference detection have been extensively studied in different areas. The literature in computational geometry consists of a number of theoretically efficient algorithms for polyhedral objects in static environments <ref> [1, 2, 9, 10, 11, 12, 13, 17, 36] </ref>. There are a number of algorithms with good asymptotic bounds, however their practical utility is not clear since many of them are not implemented in a realistic environment.
Reference: [3] <author> D. Baraff. </author> <title> Curved surfaces and coherence for non-penetrating rigid body simulation. </title> <journal> ACM Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 19-28, </pages> <year> 1990. </year>
Reference-contexts: However, they do not make use of coherence in their methods between successive instances. More recently, geometric coherence has been utilized to devise algorithms based on local features for convex polytopes by Baraff and Lin <ref> [3, 28] </ref>. This has significantly improved the performance of interference detection algorithms in dynamic environments. As far as curved models are concerned, algorithms based on interval arithmetic have been proposed by Duff, Herzen, Snyder, etc. [16, 23, 44]. <p> Due to the nature of application, there exists spatial and temporal coherence between successive instances. Different algorithms in the literature have utilized the coherence. Baraff uses cached edges and faces to find a separating plane between two convex polytopes <ref> [3] </ref>. However, this may not work when the closest features between the objects change or when there is a large abrupt motion. <p> However, we are only interested in the solutions in the domain of interest (since each surface is defined on a subset of the real plane). 14 Baraff has used the formulation in Eqn. 3 to keep track of closest points between closed convex surfaces <ref> [3] </ref> based on local optimization routines. The main problem is finding a solution to these equations (3) for the initial configuration.
Reference: [4] <author> R. Barzel and A. Barr. </author> <title> A modeling system based on dynamic constraints. </title> <journal> ACM Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 31-39, </pages> <year> 1988. </year>
Reference: [5] <author> D. N. Bernstein. </author> <title> The number of roots of a system of equations. </title> <journal> Funktsional'nyi Analiz i Ego Prilozheniya, </journal> <volume> 9(3) </volume> <pages> 1-4, </pages> <month> Jul-Sep </month> <year> 1975. </year>
Reference-contexts: Therefore, the Bezout bound of the resulting system can be as high as N = (2n 2) 2 n 4 . In general, if the system of equations is sparse, we can get a tight bound with Bern-stein bound <ref> [5] </ref>. The Bernstein bound for Eqn. 5 is n 2 (n 2 + 3)(n 1) 2 . Canny and Emiris calculate the Bernstein bounds by using sparse mixed resultant formulation [7].
Reference: [6] <author> J. L. Bentley and J. H. Friedman. </author> <title> Data structures for range searching. </title> <journal> Computing Surveys, </journal> <volume> 11(4), </volume> <month> December </month> <year> 1979. </year>
Reference-contexts: We can divide the space into unit cells (or volumes) and place each object (or bounding box) in some cell (s) <ref> [6, 30] </ref>. To check for collisions, we have to examine the cell (s) occupied by each box to verify if the cell (s) is (are) shared by other objects. But, it is difficult to set a near-optimal size for each cell and it requires tremendous amount of allocated memory.
Reference: [7] <author> J. Canny and I. Emiris. </author> <title> An efficient algorithm for the sparse mixed resultant. </title> <booktitle> In Proceedings of AAECC, </booktitle> <year> 1993. </year>
Reference-contexts: For dense polynomial systems, it is the Bezout bound corresponding to the product of the degrees of the equation; and for sparse polynomial systems, it is the BKK bound corresponding to the mixed volume of the Newton polytope corresponding to each equations <ref> [7, 45] </ref>. Homotopy methods use the solutions of a known system along with tracing algorithms to find the solutions of the given system. <p> In general, if the system of equations is sparse, we can get a tight bound with Bern-stein bound [5]. The Bernstein bound for Eqn. 5 is n 2 (n 2 + 3)(n 1) 2 . Canny and Emiris calculate the Bernstein bounds by using sparse mixed resultant formulation <ref> [7] </ref>. For example, the Bernstein bounds 1 for the case of n = 2; 3; 4; 5; 6; 7; 8; 9 are 28; 432; 2736; 11200; 35100; 91728; 210112; 435456, while the Bezout bounds are 64; 1296; 9216; 40000; 129600; 345744; respectively. <p> They are tangential contact and boundary contact. In this section, we formulate both of these contact determination problems in terms of a system of 1 These figures are calculated by John Canny and Ioannis Emiris using their code based on the sparse mixed resultant formulation <ref> [7] </ref>. 16 algebraic equations. In the next section, we describe how the algorithm tests for these conditions as the object undergoes rigid motion. * Tangential Intersection : This corresponds to a tangential intersection between the two surfaces at a geometric contact point, as in Fig.4 (a).
Reference: [8] <author> J. F. Canny. </author> <title> Collision detection for moving polyhedra. </title> <journal> IEEE Trans. PAMI, </journal> <volume> 8:pp. </volume> <pages> 200-209, </pages> <year> 1986. </year>
Reference-contexts: However, the main purpose of applications has been on planning a collision-free trajectory between obstacles <ref> [8, 15, 27, 31, 43] </ref>. This is different from applications in physical based modeling and virtual environments, where the motion is subject to dynamic constraints or external forces and cannot typically be expressed as a closed form function of time. .
Reference: [9] <author> B. Chazelle. </author> <title> An optimal algorithm for intersecting three-dimensional convex polyhedra. </title> <booktitle> In Proc. 30th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 586-591, </pages> <year> 1989. </year>
Reference-contexts: The problems of contact determination and interference detection have been extensively studied in different areas. The literature in computational geometry consists of a number of theoretically efficient algorithms for polyhedral objects in static environments <ref> [1, 2, 9, 10, 11, 12, 13, 17, 36] </ref>. There are a number of algorithms with good asymptotic bounds, however their practical utility is not clear since many of them are not implemented in a realistic environment.
Reference: [10] <author> B. Chazelle and D. P. Dobkin. </author> <title> Intersection of convex objects in two and three dimensions. </title> <journal> J. ACM, </journal> <volume> 34 </volume> <pages> 1-27, </pages> <year> 1987. </year>
Reference-contexts: The problems of contact determination and interference detection have been extensively studied in different areas. The literature in computational geometry consists of a number of theoretically efficient algorithms for polyhedral objects in static environments <ref> [1, 2, 9, 10, 11, 12, 13, 17, 36] </ref>. There are a number of algorithms with good asymptotic bounds, however their practical utility is not clear since many of them are not implemented in a realistic environment.
Reference: [11] <author> D. P. Dobkin and H. Edelsbrunner. </author> <title> Space searching for intersecting objects. </title> <journal> J. Algorithms, </journal> <volume> 8 </volume> <pages> 348-361, </pages> <year> 1987. </year>
Reference-contexts: The problems of contact determination and interference detection have been extensively studied in different areas. The literature in computational geometry consists of a number of theoretically efficient algorithms for polyhedral objects in static environments <ref> [1, 2, 9, 10, 11, 12, 13, 17, 36] </ref>. There are a number of algorithms with good asymptotic bounds, however their practical utility is not clear since many of them are not implemented in a realistic environment.
Reference: [12] <author> D. P. Dobkin and D. G. Kirkpatrick. </author> <title> Fast detection of polyhedral intersection. </title> <journal> Theoret. Comput. Sci., </journal> <volume> 27 </volume> <pages> 241-253, </pages> <year> 1983. </year>
Reference-contexts: The problems of contact determination and interference detection have been extensively studied in different areas. The literature in computational geometry consists of a number of theoretically efficient algorithms for polyhedral objects in static environments <ref> [1, 2, 9, 10, 11, 12, 13, 17, 36] </ref>. There are a number of algorithms with good asymptotic bounds, however their practical utility is not clear since many of them are not implemented in a realistic environment.
Reference: [13] <author> D. P. Dobkin and D. G. Kirkpatrick. </author> <title> Determining the separation of preprocessed polyhedra a unified approach. </title> <booktitle> In Proc. 17th Internat. Colloq. Automata Lang. Program., volume 443 of Lecture Notes in Computer Science, </booktitle> <pages> pages 400-413. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <month> 32 </month>
Reference-contexts: The problems of contact determination and interference detection have been extensively studied in different areas. The literature in computational geometry consists of a number of theoretically efficient algorithms for polyhedral objects in static environments <ref> [1, 2, 9, 10, 11, 12, 13, 17, 36] </ref>. There are a number of algorithms with good asymptotic bounds, however their practical utility is not clear since many of them are not implemented in a realistic environment.
Reference: [14] <author> D. P. Dobkin and D. L. Souvaine. </author> <title> Detecting the intersection of convex objects in the plane. </title> <journal> Comput. Aided Geom. Design, </journal> <volume> 8 </volume> <pages> 181-200, </pages> <year> 1991. </year>
Reference-contexts: There are a number of algorithms with good asymptotic bounds, however their practical utility is not clear since many of them are not implemented in a realistic environment. Many algorithms are known for intersection between curved objects represented as algebraic surfaces or piecewise spline models in geometric modeling <ref> [14, 25, 33, 24, 37] </ref>. However, they are targeted towards robust computations of the intersection curve between such models for CSG operations and boundary computations.
Reference: [15] <author> B. R. Donald. </author> <title> Motion planning with six degrees of freedom. </title> <type> Master's thesis, </type> <institution> MIT Artificial Intelligence Lab., </institution> <year> 1984. </year> <month> AI-TR-791. </month>
Reference-contexts: However, the main purpose of applications has been on planning a collision-free trajectory between obstacles <ref> [8, 15, 27, 31, 43] </ref>. This is different from applications in physical based modeling and virtual environments, where the motion is subject to dynamic constraints or external forces and cannot typically be expressed as a closed form function of time. .
Reference: [16] <author> Tom Duff. </author> <title> Interval arithmetic and recursive subdivision for implicit functions and constructive solid geometry. </title> <journal> ACM Computer Graphics, </journal> <volume> 26(2) </volume> <pages> 131-139, </pages> <year> 1992. </year>
Reference-contexts: This has significantly improved the performance of interference detection algorithms in dynamic environments. As far as curved models are concerned, algorithms based on interval arithmetic have been proposed by Duff, Herzen, Snyder, etc. <ref> [16, 23, 44] </ref>. They are relatively slow in practice and expect that the motion can be expressed as a closed form function of time. However, no practical and efficient interference detection algorithms are known for general geometric models in dynamic environments.
Reference: [17] <author> H. Edelsbrunner. </author> <title> A new approach to rectangle intersections, Part I. </title> <journal> Internat. J. Comput. Math., </journal> <volume> 13 </volume> <pages> 209-219, </pages> <year> 1983. </year>
Reference-contexts: The problems of contact determination and interference detection have been extensively studied in different areas. The literature in computational geometry consists of a number of theoretically efficient algorithms for polyhedral objects in static environments <ref> [1, 2, 9, 10, 11, 12, 13, 17, 36] </ref>. There are a number of algorithms with good asymptotic bounds, however their practical utility is not clear since many of them are not implemented in a realistic environment. <p> If the information of velocity and acceleration is not available, then we fall back on some well-known algorithms for rectangular intersections <ref> [17, 46] </ref>. For more details on scheduling scheme which uses a priority queue based on lower bound on time to collision, please refer to [28]. <p> for Rectangular and Spherical Bounding Boxes In earlier literature, there are several algorithms which can solve the overlapping problem for d-dimensional rectangular bounding boxes in O (nlog d1 n+k) time, where n is the number of objects and k is the number of pairwise overlaps by Edelsbrunner, Six and Woods <ref> [17, 46] </ref>. For spherical bounding boxes, we can use the algorithm by Hopcroft, Schwartz and Sharir in [26], which runs in O (n 2 logn) time. 6.3 Other Approaches Here we will also briefly mention a few different approaches which we have considered. <p> Some techniques to speed them up based on spatial subdivision are proposed in [47] and algorithms of complexity O (N log 2 N ) have been highlighted for spheres in [26] and axis-aligned bounding boxes in <ref> [17] </ref>. However, they are for static environments and donot make use of coherence for dynamic environments. Furthermore, there are no good algorithms for contact determination between deformable models. Acknowledgement: We wish to thank Professor John Canny for his comments on the draft of this paper.
Reference: [18] <author> M. Edahiro, K. Tanaka, R. Hoshino, and Ta. Asano. </author> <title> A bucketing algorithm for the orthogonal segment intersection search problem and its practical efficiency. </title> <booktitle> In Proc. 3rd Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 258-267, </pages> <year> 1987. </year>
Reference-contexts: For an environment where almost all objects are of uniform size, like a vibrating parts feeder bowl or molecular modeling [30, 47], this is a rather ideal algorithm, especially to run on a parallel-computing machine. Edahiro and etc. <ref> [18] </ref> proposed a O (k) search time, O (n) preprocessing time approach for the reporting all segment intersection with a given orthogonal query segment, where n is the number of orthogonal segments and k is the number of reported intersecting segments.
Reference: [19] <author> G. Farin. </author> <title> Curves and Surfaces for Computer Aided Geometric Design: A Practical Guide. </title> <publisher> Academic Press Inc., </publisher> <year> 1990. </year>
Reference-contexts: Concave polytopes are decomposed into convex polytopes and represented by hierarchical sub-part trees. Curved models consist of NURBS surfaces and piecewise algebraic surfaces. NURBS models are represented in terms of control polytopes, knot vectors and order continuity <ref> [19] </ref>. The convex hull of the control polytopes serves as a bounding volume approximation for these surfaces. They are further decomposed into a series of Bezier surfaces using knot insertion algorithms. <p> Given two B-spline models, we decompose them into a series of Bezier surfaces using knot insertion algorithm <ref> [19] </ref>. After decomposition we use a hierarchical representation for the curved models. The height of the resulting tree is two. Each leaf node corresponds to the Bezier surface. The nodes at the first level of the tree correspond to the convex hull of the control polytope of each Bezier surface.
Reference: [20] <author> C.B. Garcia and W.I. Zangwill. </author> <title> Finding all solutions to polynomial systems and other systems of equations. </title> <journal> Math. Prog., </journal> <volume> 16 </volume> <pages> 159-176, </pages> <year> 1979. </year>
Reference-contexts: On the other hand iterative methods like the Gauss-Newton's method are good for local analysis and need good initial guesses to all the solutions. In the context of floating point arithmetic, the two main approaches are those of homotopy methods <ref> [20] </ref> and matrix computations [32]. The latter algorithms make use of matrix formulation of resultants of polynomial equations and reduce the problem to computing eigenvalues and eigenvectors of generalized companion matrices. They have been applied to a number of geometric applications and perform very well in practice [32].
Reference: [21] <author> E. G. Gilbert, D. W. Johnson, and S. S. Keerthi. </author> <title> A fast procedure for computing the distance between objects in three-dimensional space. </title> <journal> IEEE J. Robotics and Automation, </journal> <volume> vol RA-4:pp. </volume> <pages> 193-203, </pages> <year> 1988. </year>
Reference-contexts: For convex polytopes, linear time algorithms based on linear programming by Megiddo and Seidel [34, 42] and tracking closest points between incremental motion by Gilbert and etc. <ref> [21] </ref> have been proposed. However, they do not make use of coherence in their methods between successive instances. More recently, geometric coherence has been utilized to devise algorithms based on local features for convex polytopes by Baraff and Lin [3, 28].
Reference: [22] <author> J. K. Hahn. </author> <title> Realistic animation of rigid bodies. </title> <journal> Computer Graphics, </journal> <volume> 22(4):pp. </volume> <pages> 299-308, </pages> <year> 1988. </year>
Reference-contexts: However, once the two objects are in the vicinity of each other, spatial decomposition techniques based on subdivision are used to solve the interference problem. This can become rather slow in practice as highlighted by Hahn in <ref> [22] </ref>. In computer animation, algorithms for polyhedral objects of complexity O (n 2 m 2 ), where m is the number of polyhedra with n vertices per polyhedron, are described by 1 Moore and Wilhelms in [35].
Reference: [23] <author> B. V. Herzen, A. H. Barr, and H. R. Zatz. </author> <title> Geometric collisions for time-dependent parametric surfaces. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 39-48, </pages> <year> 1990. </year>
Reference-contexts: This has significantly improved the performance of interference detection algorithms in dynamic environments. As far as curved models are concerned, algorithms based on interval arithmetic have been proposed by Duff, Herzen, Snyder, etc. <ref> [16, 23, 44] </ref>. They are relatively slow in practice and expect that the motion can be expressed as a closed form function of time. However, no practical and efficient interference detection algorithms are known for general geometric models in dynamic environments.
Reference: [24] <author> C.M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1989. </year>
Reference-contexts: There are a number of algorithms with good asymptotic bounds, however their practical utility is not clear since many of them are not implemented in a realistic environment. Many algorithms are known for intersection between curved objects represented as algebraic surfaces or piecewise spline models in geometric modeling <ref> [14, 25, 33, 24, 37] </ref>. However, they are targeted towards robust computations of the intersection curve between such models for CSG operations and boundary computations. <p> In Section 5, we make use of the coherence along with local numerical methods and global techniques for solving algebraic systems to check whether there is a contact or interference between such curved models. 2.2 Object Models Polyhedral models are represented using boundary representation <ref> [24] </ref>. A polyhedron consists of vertices, edges and faces represented in terms of parameters needed to describe them. In addition, we also have the topological information such as adjacencies and incidences of all features (vertices, edges, faces). Concave polytopes are decomposed into convex polytopes and represented by hierarchical sub-part trees.
Reference: [25] <author> M.E. Hohmeyer. </author> <title> A surface intersection algorithm based on loop detection. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(4) </volume> <pages> 473-490, </pages> <year> 1991. </year> <note> Special issue on Solid Modeling. </note>
Reference-contexts: There are a number of algorithms with good asymptotic bounds, however their practical utility is not clear since many of them are not implemented in a realistic environment. Many algorithms are known for intersection between curved objects represented as algebraic surfaces or piecewise spline models in geometric modeling <ref> [14, 25, 33, 24, 37] </ref>. However, they are targeted towards robust computations of the intersection curve between such models for CSG operations and boundary computations.
Reference: [26] <author> J.E. Hopcroft, J.T. Schwartz, and M. Sharir. </author> <title> Efficient detection of intersections among spheres. </title> <journal> The International Journal of Robotics Research, </journal> <volume> 2(4) </volume> <pages> 77-80, </pages> <year> 1983. </year>
Reference-contexts: For spherical bounding boxes, we can use the algorithm by Hopcroft, Schwartz and Sharir in <ref> [26] </ref>, which runs in O (n 2 logn) time. 6.3 Other Approaches Here we will also briefly mention a few different approaches which we have considered. We can divide the space into unit cells (or volumes) and place each object (or bounding box) in some cell (s) [6, 30]. <p> Some techniques to speed them up based on spatial subdivision are proposed in [47] and algorithms of complexity O (N log 2 N ) have been highlighted for spheres in <ref> [26] </ref> and axis-aligned bounding boxes in [17]. However, they are for static environments and donot make use of coherence for dynamic environments. Furthermore, there are no good algorithms for contact determination between deformable models.
Reference: [27] <author> J.C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year> <month> 33 </month>
Reference-contexts: However, the main purpose of applications has been on planning a collision-free trajectory between obstacles <ref> [8, 15, 27, 31, 43] </ref>. This is different from applications in physical based modeling and virtual environments, where the motion is subject to dynamic constraints or external forces and cannot typically be expressed as a closed form function of time. .
Reference: [28] <author> M. C. Lin. </author> <title> Efficient Collision Detection for Animation and Robotics. </title> <type> PhD thesis, </type> <institution> University of California at Berkeley, </institution> <month> December </month> <year> 1993. </year> <institution> Department of Electrical Engineering and Computer Science. </institution>
Reference-contexts: However, they do not make use of coherence in their methods between successive instances. More recently, geometric coherence has been utilized to devise algorithms based on local features for convex polytopes by Baraff and Lin <ref> [3, 28] </ref>. This has significantly improved the performance of interference detection algorithms in dynamic environments. As far as curved models are concerned, algorithms based on interval arithmetic have been proposed by Duff, Herzen, Snyder, etc. [16, 23, 44]. <p> No assumption is made on the motion of the objects. At each instance, their position is described using a transformation matrix with respect to the origin. For convex polytopes, the algorithm keeps track of closest features based on convexity of polyhedra as described in <ref> [28] </ref> and [29]. Concave polytopes are decomposed into convex polytopes and represented by sub-part hierarchical tree. For curved models we use a combination of hierarchical representations, algorithms for polytopes, and global and local methods for solving systems of polynomial equations. <p> Different algorithms in the literature have utilized the coherence. Baraff uses cached edges and faces to find a separating plane between two convex polytopes [3]. However, this may not work when the closest features between the objects change or when there is a large abrupt motion. In <ref> [28] </ref>, an algorithm for keeping track of closest features between convex polytopes using Voronoi regions of the features and local geometry information is used to determine the minimum separation between them, thus to detect possible 3 collision. This works very well for convex polytopes. <p> The tracing steps corresponds to Newton's iteration. 3 Collision Detection for Polyhedra In this section, we summarize a simple and efficient collision detection algorithm for convex polyhedra by tracking the closest points between them <ref> [28] </ref>. We also extend to handle penetration between objects. The method works by finding and maintaining a pair of closest features (vertex, edge, or face) on the two convex polyhedra, in order to calculate the Euclidean distance between them to detect possible collision. <p> point P on object A lies inside the Voronoi region of the feature f B on object B, then f B is a closest feature to the point P . 3.2 Overview The distance computation algorithm which tracks the closest feature pair is more fully described in our earlier work <ref> [28] </ref> or [29]. Here we only give a general overview of the algorithm. Our method is straightforward in its conception. We start with a candidate pair of features, one from each polyhedron, and check whether the closest points lie on these features. <p> In this case, the running time is proportional to the number of feature pairs traversed in this process. It is not more than the product of the numbers of features of the two polyhedra, because the Euclidean distance between feature pairs must always decrease when a switch is made <ref> [28] </ref>, which makes cycling impossible. 3.3 Applicability Test Given the overview of the algorithm, we now present a concise description of the main component of the algorithm | the applicability test | which is established based upon Voronoi region. <p> In order to avoid unnecessary computations and to speed up the run time, we use two methods: one assumes the knowledge of maximum acceleration and velocity, the other purely exploits the spatial arrangement without any other information to reduce the number of pairwise interference tests. For the scheduling scheme <ref> [28] </ref> in which we assume the dynamics (velocities, accelerations, etc.) is known, we rely on the fact that only the object pairs which have a small separation are likely to have an impact within the next few time instances, and those object pairs which are far apart from each other cannot <p> If the information of velocity and acceleration is not available, then we fall back on some well-known algorithms for rectangular intersections [17, 46]. For more details on scheduling scheme which uses a priority queue based on lower bound on time to collision, please refer to <ref> [28] </ref>.
Reference: [29] <author> M.C. Lin and John F. Canny. </author> <title> A fast algorithm for incremental distance calculation. </title> <booktitle> In IEEE Conference on Robotics and Automation, </booktitle> <volume> volume 2, </volume> <pages> pages 1008-1014, </pages> <year> 1991. </year>
Reference-contexts: No assumption is made on the motion of the objects. At each instance, their position is described using a transformation matrix with respect to the origin. For convex polytopes, the algorithm keeps track of closest features based on convexity of polyhedra as described in [28] and <ref> [29] </ref>. Concave polytopes are decomposed into convex polytopes and represented by sub-part hierarchical tree. For curved models we use a combination of hierarchical representations, algorithms for polytopes, and global and local methods for solving systems of polynomial equations. <p> on object A lies inside the Voronoi region of the feature f B on object B, then f B is a closest feature to the point P . 3.2 Overview The distance computation algorithm which tracks the closest feature pair is more fully described in our earlier work [28] or <ref> [29] </ref>. Here we only give a general overview of the algorithm. Our method is straightforward in its conception. We start with a candidate pair of features, one from each polyhedron, and check whether the closest points lie on these features.
Reference: [30] <author> C. Leventhal. </author> <title> Molecular model-building by computer. </title> <journal> Scientific American, </journal> <volume> 214(6), </volume> <month> June </month> <year> 1966. </year>
Reference-contexts: We can divide the space into unit cells (or volumes) and place each object (or bounding box) in some cell (s) <ref> [6, 30] </ref>. To check for collisions, we have to examine the cell (s) occupied by each box to verify if the cell (s) is (are) shared by other objects. But, it is difficult to set a near-optimal size for each cell and it requires tremendous amount of allocated memory. <p> If the size of the cell is not properly chosen, the computation can be rather expensive. For an environment where almost all objects are of uniform size, like a vibrating parts feeder bowl or molecular modeling <ref> [30, 47] </ref>, this is a rather ideal algorithm, especially to run on a parallel-computing machine.
Reference: [31] <author> T. Lozano-Perez and M. Wesley. </author> <title> An algorithm for planning collision-free paths among polyhedral obstacles. </title> <journal> Comm. ACM, </journal> <volume> 22(10):pp. </volume> <pages> 560-570, </pages> <year> 1979. </year>
Reference-contexts: However, the main purpose of applications has been on planning a collision-free trajectory between obstacles <ref> [8, 15, 27, 31, 43] </ref>. This is different from applications in physical based modeling and virtual environments, where the motion is subject to dynamic constraints or external forces and cannot typically be expressed as a closed form function of time. .
Reference: [32] <author> D. Manocha. </author> <title> Algebraic and Numeric Techniques for Modeling and Robotics. </title> <type> PhD thesis, </type> <institution> Computer Science Division, Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: On the other hand iterative methods like the Gauss-Newton's method are good for local analysis and need good initial guesses to all the solutions. In the context of floating point arithmetic, the two main approaches are those of homotopy methods [20] and matrix computations <ref> [32] </ref>. The latter algorithms make use of matrix formulation of resultants of polynomial equations and reduce the problem to computing eigenvalues and eigenvectors of generalized companion matrices. They have been applied to a number of geometric applications and perform very well in practice [32]. <p> of homotopy methods [20] and matrix computations <ref> [32] </ref>. The latter algorithms make use of matrix formulation of resultants of polynomial equations and reduce the problem to computing eigenvalues and eigenvectors of generalized companion matrices. They have been applied to a number of geometric applications and perform very well in practice [32]. The complexity of the algorithm is O (M 3 ), where M corresponds to the algebraic complexity of the system. <p> One such example is shown for two cylinders in Fig.5. In this case the geometric contact corresponds to a curve on each surface, as opposed to a point. These cases can be detected using resultant methods as well <ref> [32] </ref>. 18 4.3 Penetration Analysis In most examples, it is difficult to express the motion as a closed form function of time. <p> A real solution in the domain to those equations implies a geometric collision and a precise contact between the models. The algebraic method based on resultants and eigenvalues is used to find all the solutions to the equations (6),(8) or (7) <ref> [32] </ref>. This global root finder is used when the control polytopes of two Bezier surfaces collide. At that instant the two surfaces may or may not have a geometric contact. It is possible that all the solutions to these equations are complex. <p> In case the Gauss-Newton's method does not converge to a solution, we may again use the problem in terms of an eigenvalue problem and use the previous eigenvalues as a guess and use inverse power iteration. This approach has been explained in detail in <ref> [32] </ref>. The convergence of inverse power iteration is well understood and it converges to the eigenvalue closest to the guess. As a result, we are performing local computations at each step corresponding to a few Gauss-Newton's iterations or inverse power iterations. <p> The resulting system of equations corresponding to (6) are of degrees 4; 4 and 6. The Bezout bound of this system is 96. Using resultants, the problem is reduced to finding the eigendecomposition of a 96 fi 96 matrix <ref> [32] </ref>. The eigendecomposition takes slightly more than a second on the IBM RS/6000 and all the solutions at that instant are complex. As the torus move towards each other, we eventually track 8 of these solutions, whose imaginary parts are decreasing. This uses Gauss-Newton's method at each time instance.
Reference: [33] <author> D. Manocha and J. F. Canny. </author> <title> A new approach for surface intersection. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 1(4) </volume> <pages> 491-516, </pages> <year> 1991. </year>
Reference-contexts: There are a number of algorithms with good asymptotic bounds, however their practical utility is not clear since many of them are not implemented in a realistic environment. Many algorithms are known for intersection between curved objects represented as algebraic surfaces or piecewise spline models in geometric modeling <ref> [14, 25, 33, 24, 37] </ref>. However, they are targeted towards robust computations of the intersection curve between such models for CSG operations and boundary computations.
Reference: [34] <author> N. Megiddo. </author> <title> Linear-time algorithms for linear programming in r 3 and related problems. </title> <journal> SIAM J. Computing, </journal> <volume> 12:pp. </volume> <pages> 759-776, </pages> <year> 1983. </year>
Reference-contexts: For convex polytopes, linear time algorithms based on linear programming by Megiddo and Seidel <ref> [34, 42] </ref> and tracking closest points between incremental motion by Gilbert and etc. [21] have been proposed. However, they do not make use of coherence in their methods between successive instances.
Reference: [35] <author> M. Moore and J. Wilhelms. </author> <title> Collision detection and response for computer animation. </title> <journal> Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 289-298, </pages> <year> 1988. </year>
Reference-contexts: This can become rather slow in practice as highlighted by Hahn in [22]. In computer animation, algorithms for polyhedral objects of complexity O (n 2 m 2 ), where m is the number of polyhedra with n vertices per polyhedron, are described by 1 Moore and Wilhelms in <ref> [35] </ref>. For convex polytopes, linear time algorithms based on linear programming by Megiddo and Seidel [34, 42] and tracking closest points between incremental motion by Gilbert and etc. [21] have been proposed. However, they do not make use of coherence in their methods between successive instances.
Reference: [36] <author> D. M. Mount. </author> <title> Intersection detection and separators for simple polygons. </title> <booktitle> In Proc. 8th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 303-311, </pages> <year> 1992. </year>
Reference-contexts: The problems of contact determination and interference detection have been extensively studied in different areas. The literature in computational geometry consists of a number of theoretically efficient algorithms for polyhedral objects in static environments <ref> [1, 2, 9, 10, 11, 12, 13, 17, 36] </ref>. There are a number of algorithms with good asymptotic bounds, however their practical utility is not clear since many of them are not implemented in a realistic environment.
Reference: [37] <author> B.K. Natarajan. </author> <title> On computing the intersection of b-splines. </title> <booktitle> In ACM Symposium on Computationl Geometry, </booktitle> <pages> pages 157-167, </pages> <year> 1990. </year>
Reference-contexts: There are a number of algorithms with good asymptotic bounds, however their practical utility is not clear since many of them are not implemented in a realistic environment. Many algorithms are known for intersection between curved objects represented as algebraic surfaces or piecewise spline models in geometric modeling <ref> [14, 25, 33, 24, 37] </ref>. However, they are targeted towards robust computations of the intersection curve between such models for CSG operations and boundary computations.
Reference: [38] <author> M. H. Overmars. </author> <title> Point location in fat subdivisions. </title> <journal> Inform. Proc. Lett., </journal> <volume> 44 </volume> <pages> 261-265, </pages> <year> 1992. </year>
Reference-contexts: Consider an environment where most of objects are elongated and only a few objects (probably just the robot manipulators in most situations) are moving, then rectangular bounding boxes are preferable. In a more dynamic environment like a 27 vibrating parts feeder where all objects are rather "fat" <ref> [38] </ref> and bouncing around, then spherical or cubic bounding boxes are more desirable. <p> In fact, Overmars has shown that using a hash table to look up an entry and variable levels (sizes) of cubes or cells, we can use a data structure of O (n) storage space to perform the point location queries in constant time <ref> [38] </ref>. This approach works well if the objects are not intersecting, since the assumption behind the basic algorithm depends on the fact that each cube or cell can only be occupied by a fixed number of objects.
Reference: [39] <author> A. Pentland. </author> <title> Computational complexity versus simulated environment. </title> <journal> Computer Graphics, </journal> <volume> 22(2) </volume> <pages> 185-192, </pages> <year> 1990. </year>
Reference: [40] <author> A. Pentland and J. Williams. </author> <title> Good vibrations: Modal dynamics for graphics and animation. </title> <journal> Computer Graphics, </journal> <volume> 23(3) </volume> <pages> 185-192, </pages> <year> 1990. </year>
Reference: [41] <author> F.P. Preparata and M. I. Shamos. </author> <title> Computational Geometry. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year> <month> 34 </month>
Reference-contexts: In addition, we also precompute the Voronoi region (definied below) for each feature as well. Definition: A Voronoi region associated with each feature is a set of points closer to that feature than to any others. <ref> [41] </ref> The Voronoi regions form a partition of space outside the polyhedron according to the closest feature. The collection of Voronoi regions of each polyhedron is the generalized Voronoi diagram of the polyhedron.
Reference: [42] <author> R. Seidel. </author> <title> Linear programming and convex hulls made easy. </title> <booktitle> In Proc. 6th Ann. ACM Conf. on Computational Geometry, </booktitle> <pages> pages 211-215, </pages> <address> Berkeley, California, </address> <year> 1990. </year>
Reference-contexts: For convex polytopes, linear time algorithms based on linear programming by Megiddo and Seidel <ref> [34, 42] </ref> and tracking closest points between incremental motion by Gilbert and etc. [21] have been proposed. However, they do not make use of coherence in their methods between successive instances.
Reference: [43] <author> M. Sharir. </author> <title> Efficient algorithms for planning purely translational collision-free motion in two and three dimensions. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom., </booktitle> <pages> pages 1326-1331, </pages> <year> 1987. </year>
Reference-contexts: However, the main purpose of applications has been on planning a collision-free trajectory between obstacles <ref> [8, 15, 27, 31, 43] </ref>. This is different from applications in physical based modeling and virtual environments, where the motion is subject to dynamic constraints or external forces and cannot typically be expressed as a closed form function of time. .
Reference: [44] <author> J. Snyder et. al. </author> <title> Interval methods for multi-point collisions between time dependent curved surfaces. </title> <booktitle> In Proceedings of ACM Siggraph, </booktitle> <pages> pages 321-334, </pages> <year> 1993. </year>
Reference-contexts: This has significantly improved the performance of interference detection algorithms in dynamic environments. As far as curved models are concerned, algorithms based on interval arithmetic have been proposed by Duff, Herzen, Snyder, etc. <ref> [16, 23, 44] </ref>. They are relatively slow in practice and expect that the motion can be expressed as a closed form function of time. However, no practical and efficient interference detection algorithms are known for general geometric models in dynamic environments.
Reference: [45] <author> B. Sturmfels. </author> <title> Sparse elimination theory. </title> <editor> In D. Eisenbud and L. Robbiano, editors, </editor> <title> Computational Algebraic Geometry and Commutative Algebra. </title> <publisher> Cambridge University Press, </publisher> <year> 1991. </year>
Reference-contexts: For dense polynomial systems, it is the Bezout bound corresponding to the product of the degrees of the equation; and for sparse polynomial systems, it is the BKK bound corresponding to the mixed volume of the Newton polytope corresponding to each equations <ref> [7, 45] </ref>. Homotopy methods use the solutions of a known system along with tracing algorithms to find the solutions of the given system.
Reference: [46] <author> H.W. Six and D. </author> <title> Wood Counting and reporting intersections in d-Ranges. </title> <journal> IEEE Trans. on Computers, C-31(No. </journal> <volume> 3), </volume> <month> March </month> <year> 1982. </year>
Reference-contexts: If the information of velocity and acceleration is not available, then we fall back on some well-known algorithms for rectangular intersections <ref> [17, 46] </ref>. For more details on scheduling scheme which uses a priority queue based on lower bound on time to collision, please refer to [28]. <p> for Rectangular and Spherical Bounding Boxes In earlier literature, there are several algorithms which can solve the overlapping problem for d-dimensional rectangular bounding boxes in O (nlog d1 n+k) time, where n is the number of objects and k is the number of pairwise overlaps by Edelsbrunner, Six and Woods <ref> [17, 46] </ref>. For spherical bounding boxes, we can use the algorithm by Hopcroft, Schwartz and Sharir in [26], which runs in O (n 2 logn) time. 6.3 Other Approaches Here we will also briefly mention a few different approaches which we have considered.
Reference: [47] <author> G. Turk. </author> <title> Interactive collision detection for molecular graphics. </title> <type> Master's thesis, </type> <institution> Computer Science Department, University of North Carolina at Chapel Hill, </institution> <year> 1989. </year> <month> 35 </month>
Reference-contexts: If the size of the cell is not properly chosen, the computation can be rather expensive. For an environment where almost all objects are of uniform size, like a vibrating parts feeder bowl or molecular modeling <ref> [30, 47] </ref>, this is a rather ideal algorithm, especially to run on a parallel-computing machine. <p> Many issues related to contact determination for general dynamic environments still remain open. In an environment with N objects, we want to avoid the O (N 2 ) pairs testing at each instance. Some techniques to speed them up based on spatial subdivision are proposed in <ref> [47] </ref> and algorithms of complexity O (N log 2 N ) have been highlighted for spheres in [26] and axis-aligned bounding boxes in [17]. However, they are for static environments and donot make use of coherence for dynamic environments.
References-found: 47

