URL: http://www.win.tue.nl/inf/onderzoek/csr/abs/95.35.ps
Refering-URL: http://www.win.tue.nl/inf/onderzoek/publicaties.html
Root-URL: http://www.win.tue.nl
Email: email: ftbasten,wsinmarcg@win.tue.nl  
Title: An Algebraic Semantics for Hierarchical P/T Nets  
Author: Twan Basten and Marc Voorhoeve 
Keyword: Key words: Place/Transition nets hierarchical Petri nets process algebra algebraic semantics abstraction verification- top-down design  
Address: Netherlands  
Affiliation: Department of Computing Science, Eindhoven University of Technology, The  
Abstract: The first part of this paper gives an algebraic semantics for Place/Transition nets in terms of an algebra which is based on the process algebra ACP. The algebraic semantics is such that a P/T net and its term representation have the same operational behavior. As opposed to other approaches in the literature, the actions in the algebra do not correspond to the firing of a transition, but to the consumption or production of tokens. Equality of P/T nets can be determined in a purely equational way. The second part of this paper extends the results to hierarchical P/T nets. It gives a compositional algebraic semantics for both their complete operational behavior and their high-level, observable behavior. By means of a non-trivial example, the Alternating-Bit Protocol, it is shown that the notions of abstraction and verification in the process algebra ACP can be used to verify in an equational way whether a hierarchical P/T net satisfies some algebraic specification of its observable behavior. Thus, the theory in this paper can be used to determine whether two hierarchical P/T nets have the same observable behavior. As an example, it is shown that the Alternating-Bit Protocol behaves as a simple one-place buffer. The theory forms a basis for a modular, top-down design methodology based on Petri nets. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> ASPT Foundation. </author> <title> ExSpect Reference Manual, Release 5.0, </title> <booktitle> 1994. </booktitle> <address> PO Box 23103, 1100 DP, Amsterdam, the Netherlands. </address>
Reference-contexts: In order to support the design of large, complex systems, high-level Petri nets [21, 23] have been defined, which include hierarchy, data, and time. Based on high-level Petri nets, automated tools, such as Design/CPN [26] and ExSpect <ref> [1] </ref>, have been developed. The most important reasons for the widespread use of Petri nets in the area of system design, are their intuitive graphical representation and the simplicity of the main concepts of the theory.
Reference: 2. <author> J.C.M. Baeten and J.A. Bergstra. </author> <title> Non Interleaving Process Algebra. </title> <booktitle> In Best [9], </booktitle> <pages> pages 308-323. </pages>
Reference-contexts: As explained, this paper does the converse. It gives an algebraic semantics for P/T nets. Examples of this approach are Baeten and Berg-stra <ref> [2] </ref>, Boudol, Roucairol, and De Simone [11], and Dietz and Schreibert [14]. All three approaches are discussed briefly. Dietz and Schreibert [14] give an algebraic semantics for P/T nets which reflects the parallelism in their dynamic behavior. <p> The complete behavior of the net is the parallel composition of all these terms. The communication between these terms corresponds to the flow of tokens. A similar approach is taken by Baeten and Bergstra <ref> [2] </ref>. Atomic actions in the algebra correspond to transitions in the P/T nets. So-called input and output causes are added to these actions, corresponding to input and output places. The behavior of a net is the parallel composition of all actions corresponding to its transitions. <p> The remainder of this paper shows that it is powerful enough to capture the behavior of P/T nets. Finally, the causal state operator is a special version of the state operator as described in [4]. It is very similar to the causal state operator as defined in <ref> [2] </ref>. A state operator has a parameter, the superscript, and a certain state space, the subscript. The state space of the causal state operator can be interpreted as the state or marking of some P/T net and its parameter as the set of internal places. <p> It is straightforward to extend the results to a step semantics, in which multiple transitions can fire simultaneously. It is only necessary to define the synchronous-merge operator on processes in the same way as the communication merge is defined in <ref> [2] </ref>. A true concurrency semantics appears to be another interesting candidate for future investigation. 22 Acknowledgements. The authors want to thank Wil van der Aalst, Jos Baeten, Roland Bol, Pedro D'Arge--nio, Kees van Hee, Sjouke Mauw, Paul Rambags, and Michel Reniers for the many fruitful discussions and their valuable suggestions.
Reference: 3. <author> J.C.M. Baeten and C. Verhoef. </author> <title> A Congruence Theorem for Structured Operational Semantics with Predicates. </title> <booktitle> In Best [9], </booktitle> <pages> pages 477-492. </pages>
Reference-contexts: That is, for any p; q 2 C.PTNA/, PTNA ` p D q ) C.PTNA/= jD p D q. Proof. It follows from the format of the derivation rules in Table 2 that bisimulation equivalence is a congruence on C (PTNA) <ref> [3] </ref>. Therefore, it suffices to verify the validity of each axiom of PTNA to prove the theorem. The validity of an axiom can be shown by constructing a bisimulation. The details can be found in Appendix A. 2 An algebraic semantics for P/T nets.
Reference: 4. <author> J.C.M. Baeten and W.P. Weijland. </author> <title> Process Algebra, </title> <booktitle> volume 18 of Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <address> Cambridge, UK, </address> <year> 1990. </year>
Reference-contexts: Several other theories for describing concurrent systems do have this property. For example, process algebras, such as CCS [27], CSP [22], and ACP <ref> [4] </ref>, all support compositionality. Therefore, it is not surprising that several attempts have been made to integrate P/T nets and process algebra. Some approaches give a net semantics for some process algebra; others describe an algebraic semantics for (some subclass of) P/T nets. <p> Usually, only flat P/T nets are considered. Below, a brief survey is given of some recent results described in the literature. This paper presents a different approach. First, it gives an algebraic semantics for flat P/T nets in terms of an ACP-like process algebra <ref> [4] </ref> in which atomic actions correspond to the consumption or production of a single token. This correspondence is the essential idea that allows for a straightforward extension to hierarchical nets. <p> It is the original star operator as introduced by Kleene [24]. In [7], where the axioms BKS1-3 are given, it was introduced into process algebra. Because of its simplicity, the binary Kleene star is preferred over general recursion (see for example <ref> [4] </ref>). The remainder of this paper shows that it is powerful enough to capture the behavior of P/T nets. Finally, the causal state operator is a special version of the state operator as described in [4]. It is very similar to the causal state operator as defined in [2]. <p> of its simplicity, the binary Kleene star is preferred over general recursion (see for example <ref> [4] </ref>). The remainder of this paper shows that it is powerful enough to capture the behavior of P/T nets. Finally, the causal state operator is a special version of the state operator as described in [4]. It is very similar to the causal state operator as defined in [2]. A state operator has a parameter, the superscript, and a certain state space, the subscript.
Reference: 5. <author> T. Basten. </author> <note> Branching Bisimulation is an Equivalence indeed! To appear. </note>
Reference-contexts: Note that the definition given here differs from the original definition given by Van Glabbeek and Weij-land in [17]. In fact, it is the definition of semi-branching bisimulation, which was first defined in [18], as it appears in <ref> [5] </ref>. It can be shown that the two notions are equivalent [18, 5]. The reason for using the alternative definition is that it is more concise and more intuitive than the original definition. It also yields shorter proofs. A comparison of the two definitions can be found in [5]. <p> Note that the definition given here differs from the original definition given by Van Glabbeek and Weij-land in [17]. In fact, it is the definition of semi-branching bisimulation, which was first defined in [18], as it appears in [5]. It can be shown that the two notions are equivalent <ref> [18, 5] </ref>. The reason for using the alternative definition is that it is more concise and more intuitive than the original definition. It also yields shorter proofs. A comparison of the two definitions can be found in [5]. Property 5.5. Rooted branching bisimulation, rb , is an equivalence on processes. <p> appears in <ref> [5] </ref>. It can be shown that the two notions are equivalent [18, 5]. The reason for using the alternative definition is that it is more concise and more intuitive than the original definition. It also yields shorter proofs. A comparison of the two definitions can be found in [5]. Property 5.5. Rooted branching bisimulation, rb , is an equivalence on processes. Proof. It must be shown that rooted branching bisimulation is reflexive, symmetric, and transitive. Reflexivity: Let I be the identity relation on P [ f p g. Obviously, I is a rooted branching bisimulation.
Reference: 6. <author> T. Basten and M. Voorhoeve. </author> <title> An Algebraic Semantics for Hierarchical P/T Nets (extended abstract). </title> <editor> In G. De Michelis and M. Diaz, editors, </editor> <booktitle> Application and Theory of Petri Nets 1995, 16th. International Conference, Proceedings, volume 935 of Lecture Notes in Computer Science, </booktitle> <pages> pages 45-65, </pages> <address> Torino, Italy, June 1995. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1995. </year>
Reference-contexts: The algebraic semantics is such that the two transition systems which form the operational semantics of a P/T net and its algebraic representation are equivalent. The process algebra ACP is chosen, ? An extended abstract of this report appeared as <ref> [6] </ref> 1 because it emphasizes equational reasoning as opposed to model-based reasoning. An equational theory is given which can be used to determine equality of P/T nets, without referring to their operational semantics.
Reference: 7. <author> J.A. Bergstra, I. Bethke, and A. Ponse. </author> <title> Process Algebra with Iteration and Nesting. </title> <journal> The Computer Journal, </journal> <volume> 37(4) </volume> <pages> 241-258, </pages> <year> 1994. </year>
Reference-contexts: However, in combination with the binary Kleene star ( fl ) they are not derivable for closed terms and hence included. The binary Kleene star adds a simple form of recursion to the theory. It is the original star operator as introduced by Kleene [24]. In <ref> [7] </ref>, where the axioms BKS1-3 are given, it was introduced into process algebra. Because of its simplicity, the binary Kleene star is preferred over general recursion (see for example [4]). The remainder of this paper shows that it is powerful enough to capture the behavior of P/T nets.
Reference: 8. <author> J.A. Bergstra and J.W. Klop. </author> <title> The Algebra of Recursively Defined Processes and the Algebra of Regular Processes. </title> <editor> In J. Paredaens, editor, </editor> <booktitle> Automata, Languages and Programming, 11th. Colloquium, volume 172 of Lecture Notes in Computer Science, </booktitle> <pages> pages 82-95, </pages> <address> Antwerpen, Belgium, July 1984. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1984. </year>
Reference-contexts: For any a 0 ; : : : ; a n 2 A, where n 2 IN, .j i : 0 i n : a i / 2 AC. The synchronous merge is a very simple form of the communication merge as defined in <ref> [8] </ref>. There, the axioms S1 and S2 appear as C1 and C2 respectively. The reason for changing the names is that there is no communication in PTNA. The operators C and denote choice and sequential composition respectively. Axiom A4 states the right distributivity of sequential composition over choice.
Reference: 9. <editor> E. Best, editor. </editor> <booktitle> CONCUR '93, 4th. International Conference on Concurrency Theory, Proceedings, volume 715 of Lecture Notes in Computer Science, </booktitle> <address> Hildesheim, Germany, August 1993. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1993. </year>
Reference: 10. <author> E. Best, R. Devillers, and J.G. Hall. </author> <title> The Box Calculus: A New Causal Algebra with Multi-label Communication. </title> <booktitle> In Rozenberg [32], </booktitle> <pages> pages 21-69. </pages>
Reference-contexts: Related work. One way to integrate P/T nets with process algebra is to give a net semantics for terms in the algebra, thus providing the process algebra with a true concurrency semantics. Examples of this approach are Best, Devillers, and Hall <ref> [10] </ref>, Degano, De Nicola, and Montanari [13], Van Glabbeek and Vaandrager [16], Goltz [19], Montanari and Yankelevich [28], Olderog [29], and Taubner [33]. As explained, this paper does the converse. It gives an algebraic semantics for P/T nets.
Reference: 11. <author> G. Boudol, G. Roucairol, and R. de Simone. </author> <title> Petri Nets and Algebraic Calculi of Processes. </title> <editor> In G. Rozenberg, editor, </editor> <booktitle> Advances in Petri Nets 1985, volume 222 of Lecture Notes in Computer Science, </booktitle> <pages> pages 41-58. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1985. </year>
Reference-contexts: As explained, this paper does the converse. It gives an algebraic semantics for P/T nets. Examples of this approach are Baeten and Berg-stra [2], Boudol, Roucairol, and De Simone <ref> [11] </ref>, and Dietz and Schreibert [14]. All three approaches are discussed briefly. Dietz and Schreibert [14] give an algebraic semantics for P/T nets which reflects the parallelism in their dynamic behavior. The parallel components in the algebraic representation of a net do not correspond to its structural components. <p> The parallel components in the algebraic representation of a net do not correspond to its structural components. Such a relationship does exist in the other two papers. Boudol, Roucairol, and De Simone <ref> [11] </ref> give an algebraic term for each place and each transition of a P/T net. The complete behavior of the net is the parallel composition of all these terms. The communication between these terms corresponds to the flow of tokens. A similar approach is taken by Baeten and Bergstra [2].
Reference: 12. <author> W. Brauer, R. Gold, and W. Vogler. </author> <title> A Survey of Behaviour and Equivalence Preserving Refinements of Petri Nets. </title> <editor> In G. Rozenberg, editor, </editor> <booktitle> Advances in Petri Nets 1990, volume 483 of Lecture Notes in Computer Science, </booktitle> <pages> pages 1-46. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1990. </year>
Reference-contexts: Therefore, in this paper, two hierarchical P/T nets are considered equivalent if and only if their observable behavior is bisimilar. Consequently, the two nets of Figure 1 are not equivalent. In their survey on refinement of Petri nets, Brauer, Gold, and Vogler <ref> [12] </ref> propose bisimulation equivalence for similar reasons as explained above. It also appears in the survey on equivalence notions for Petri nets by Pomello, Rozenberg, and Simone [30]. Note that in this paper bisimulation is not used explicitly to determine equivalence of nets.
Reference: 13. <author> P. Degano, R. De Nicola, and U. Montanari. </author> <title> A Distributed Operational Semantics for CCS Based on Condition/Event Systems. </title> <journal> Acta Informatica, </journal> 26(1/2):59-91, October 1988. 
Reference-contexts: Related work. One way to integrate P/T nets with process algebra is to give a net semantics for terms in the algebra, thus providing the process algebra with a true concurrency semantics. Examples of this approach are Best, Devillers, and Hall [10], Degano, De Nicola, and Montanari <ref> [13] </ref>, Van Glabbeek and Vaandrager [16], Goltz [19], Montanari and Yankelevich [28], Olderog [29], and Taubner [33]. As explained, this paper does the converse. It gives an algebraic semantics for P/T nets.
Reference: 14. <author> C. Dietz and G. Schreibert. </author> <title> A Term Representation of P/T Systems. </title> <editor> In R. Valette, editor, </editor> <booktitle> Application and Theory of Petri Nets 1994, 15th. International Conference, Proceedings, volume 815 of Lecture Notes in Computer Science, </booktitle> <pages> pages 239-257, </pages> <address> Zaragoza, Spain, June 1994. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1994. </year>
Reference-contexts: As explained, this paper does the converse. It gives an algebraic semantics for P/T nets. Examples of this approach are Baeten and Berg-stra [2], Boudol, Roucairol, and De Simone [11], and Dietz and Schreibert <ref> [14] </ref>. All three approaches are discussed briefly. Dietz and Schreibert [14] give an algebraic semantics for P/T nets which reflects the parallelism in their dynamic behavior. The parallel components in the algebraic representation of a net do not correspond to its structural components. <p> As explained, this paper does the converse. It gives an algebraic semantics for P/T nets. Examples of this approach are Baeten and Berg-stra [2], Boudol, Roucairol, and De Simone [11], and Dietz and Schreibert <ref> [14] </ref>. All three approaches are discussed briefly. Dietz and Schreibert [14] give an algebraic semantics for P/T nets which reflects the parallelism in their dynamic behavior. The parallel components in the algebraic representation of a net do not correspond to its structural components. Such a relationship does exist in the other two papers.
Reference: 15. <author> R.J. van Glabbeek. </author> <title> What is Branching Time Semantics and Why to Use It? In Bulletin of the EATCS, </title> <booktitle> number 53, </booktitle> <pages> pages 191-198. </pages> <institution> European Association for Theoretical Computer Science, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: The behavior of the nets is different, because their moments of choice are different. 2 So, an appropriate notion of equivalence should capture the moments of choice in a process, often called the branching structure of the process. In <ref> [15] </ref>, Van Glabbeek formally defines the branching structure of a process. He shows that an equivalence notion captures the branching structure if and only if it distinguishes more processes than bisimulation equivalence. <p> Processes with the same observable behavior, but with different internal behavior should be equal. As before, the equivalence relation on processes should distinguish processes with different moments of choice. In <ref> [15] </ref>, Van Glabbeek shows that (rooted) branching bisimulation is exactly the equivalence that satisfies these two requirements. Branching bisimulation is a slightly finer equivalence than the better known observation equivalence [27]. That is, it distinguishes more processes than observation equivalence.
Reference: 16. <author> R.J. van Glabbeek and F.W. Vaandrager. </author> <title> Petri Net Models for Algebraic Theories of Concurrency. </title> <editor> In J.W. de Bakker, A.J. Nijman, and P.C. Treleaven, editors, </editor> <booktitle> PARLE Parallel Architectures and Languages Europe, Volume II: Parallel Languages, Proceedings, volume 259 of Lecture Notes in Computer Science, </booktitle> <pages> pages 224-242, </pages> <address> Eindhoven, The Netherlands, June 1987. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1987. </year> <month> 23 </month>
Reference-contexts: Examples of this approach are Best, Devillers, and Hall [10], Degano, De Nicola, and Montanari [13], Van Glabbeek and Vaandrager <ref> [16] </ref>, Goltz [19], Montanari and Yankelevich [28], Olderog [29], and Taubner [33]. As explained, this paper does the converse. It gives an algebraic semantics for P/T nets. Examples of this approach are Baeten and Berg-stra [2], Boudol, Roucairol, and De Simone [11], and Dietz and Schreibert [14].
Reference: 17. <author> R.J. van Glabbeek and W.P. Weijland. </author> <title> Branching Time and Abstraction in Bisimulation Semantics (extended abstract). </title> <editor> In G.X. Ritter, editor, </editor> <booktitle> Information Processing 89: Proceedings of the IFIP 11th. World Computer Congress, </booktitle> <pages> pages 613-618, </pages> <address> San Fransisco, California, USA, August/September 1989. </address> <publisher> Elsevier Science Publishers B.V., North-Holland, </publisher> <year> 1989. </year>
Reference-contexts: This property is needed in the next section, where rooted branching bisimulation is used to give an operational semantics for PTNA extended with silent actions. Note that the definition given here differs from the original definition given by Van Glabbeek and Weij-land in <ref> [17] </ref>. In fact, it is the definition of semi-branching bisimulation, which was first defined in [18], as it appears in [5]. It can be shown that the two notions are equivalent [18, 5]. <p> For any set of place labels I , the abstraction operator o I simply renames actions from I to o . The axioms B1 and B2 are an axiomatization of branching bisimulation <ref> [17] </ref>. Axiom AT states that only the visible part of the simultaneous execution of some action and o is observed. It is different from the normal axioms for o in ACP with silent actions. There, for any action e, e j o is equal to ffi.
Reference: 18. <author> R.J. van Glabbeek and W.P. Weijland. </author> <title> Branching Time and Abstraction in Bisimulation Semantics. </title> <type> Report CS-R9120, </type> <institution> Centre for Mathematics and Computer Science, CWI, </institution> <address> Amsterdam, The Netherlands, </address> <year> 1991. </year> <note> A revised version will appear in Journal of the ACM. </note>
Reference-contexts: Note that the definition given here differs from the original definition given by Van Glabbeek and Weij-land in [17]. In fact, it is the definition of semi-branching bisimulation, which was first defined in <ref> [18] </ref>, as it appears in [5]. It can be shown that the two notions are equivalent [18, 5]. The reason for using the alternative definition is that it is more concise and more intuitive than the original definition. It also yields shorter proofs. <p> Note that the definition given here differs from the original definition given by Van Glabbeek and Weij-land in [17]. In fact, it is the definition of semi-branching bisimulation, which was first defined in [18], as it appears in [5]. It can be shown that the two notions are equivalent <ref> [18, 5] </ref>. The reason for using the alternative definition is that it is more concise and more intuitive than the original definition. It also yields shorter proofs. A comparison of the two definitions can be found in [5]. Property 5.5. Rooted branching bisimulation, rb , is an equivalence on processes.
Reference: 19. <author> U. Goltz. </author> <title> On Representing CCS Programs by Finite Petri Nets. In M.P. </title> <editor> Chytil, L. Janiga, and V. Koubek, editors, </editor> <booktitle> Mathematical Foundations of Computer Science 1988, Proceedings, volume 324 of Lecture Notes in Computer Science, </booktitle> <pages> pages 339-350, </pages> <address> Carlsbad, Czechoslovakia, August/September 1988. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1988. </year>
Reference-contexts: Examples of this approach are Best, Devillers, and Hall [10], Degano, De Nicola, and Montanari [13], Van Glabbeek and Vaandrager [16], Goltz <ref> [19] </ref>, Montanari and Yankelevich [28], Olderog [29], and Taubner [33]. As explained, this paper does the converse. It gives an algebraic semantics for P/T nets. Examples of this approach are Baeten and Berg-stra [2], Boudol, Roucairol, and De Simone [11], and Dietz and Schreibert [14].
Reference: 20. <author> J.F. Groote and A. Ponse. </author> <title> The Syntax and Semantics of CRL. </title> <editor> In A. Ponse, C. Verhoef, and S.F.M. van Vlij-men, editors, </editor> <booktitle> Algebra of Communicating Processes 1994, Workshops in Computing, </booktitle> <pages> pages 26-62, </pages> <address> Utrecht, The Netherlands, May 1994. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1995. </year>
Reference-contexts: Thus, the explicit distinction made in the current net is not necessary anymore. In case of infinite data domains, the results of this paper must be adapted to an algebraic formalism which supports data, such as for example CRL <ref> [20] </ref> or PSF [25]. 8 Concluding Remarks and Future Work The first part of this paper gives an algebraic semantics for P/T nets which is consistent with their usual interleaving semantics.
Reference: 21. <author> K.M. van Hee. </author> <title> Information Systems Engineering: A Formal Approach. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, UK, </address> <year> 1994. </year>
Reference-contexts: 1 Introduction Motivation. The theory of Petri nets (see for example [31]) has been developed to design and analyze distributed systems. In order to support the design of large, complex systems, high-level Petri nets <ref> [21, 23] </ref> have been defined, which include hierarchy, data, and time. Based on high-level Petri nets, automated tools, such as Design/CPN [26] and ExSpect [1], have been developed. <p> Besides places and transitions, the internal structure of a high-level, hierarchical net can also contain subnets, whose pins are connected to internal places or pins from the high-level net. Essentially, this is the hierarchy construct underlying the high-level nets described in <ref> [21] </ref>. It is also one of the constructs used to build hierarchical nets as described in [23]. Furthermore, it is supported by tools as Design/CPN and ExSpect.
Reference: 22. <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <booktitle> Prentice-Hall International, </booktitle> <address> London, UK, </address> <year> 1985. </year>
Reference-contexts: Unfortunately, the class of Place/Transition nets, which underlies all other classes of Petri nets, also lacks one important property, which is essential to top-down, modular design: compositionality. Several other theories for describing concurrent systems do have this property. For example, process algebras, such as CCS [27], CSP <ref> [22] </ref>, and ACP [4], all support compositionality. Therefore, it is not surprising that several attempts have been made to integrate P/T nets and process algebra. Some approaches give a net semantics for some process algebra; others describe an algebraic semantics for (some subclass of) P/T nets.
Reference: 23. <author> K. Jensen. </author> <title> Coloured Petri Nets. Basic Concepts, Analysis Methods and Practical Use, volume 1, Basic Concepts, </title> <booktitle> volume 28 of EATCS monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1992. </year>
Reference-contexts: 1 Introduction Motivation. The theory of Petri nets (see for example [31]) has been developed to design and analyze distributed systems. In order to support the design of large, complex systems, high-level Petri nets <ref> [21, 23] </ref> have been defined, which include hierarchy, data, and time. Based on high-level Petri nets, automated tools, such as Design/CPN [26] and ExSpect [1], have been developed. <p> Essentially, this is the hierarchy construct underlying the high-level nets described in [21]. It is also one of the constructs used to build hierarchical nets as described in <ref> [23] </ref>. Furthermore, it is supported by tools as Design/CPN and ExSpect. The main objective of this paper is to give an algebraic semantics for the observable behavior of hierarchical nets, that is, their behavior projected onto pins.
Reference: 24. <author> S.C. Kleene. </author> <title> Representation of Events in Nerve Nets and Finite Automata. </title> <editor> In C.E. Shannon and J. McCarthy, editors, </editor> <booktitle> Automata Studies, number 34 in Annals of Mathematics Studies, </booktitle> <pages> pages 3-41. </pages> <publisher> Princeton University Press, </publisher> <address> Princeton, New Jersey, USA, </address> <year> 1956. </year>
Reference-contexts: However, in combination with the binary Kleene star ( fl ) they are not derivable for closed terms and hence included. The binary Kleene star adds a simple form of recursion to the theory. It is the original star operator as introduced by Kleene <ref> [24] </ref>. In [7], where the axioms BKS1-3 are given, it was introduced into process algebra. Because of its simplicity, the binary Kleene star is preferred over general recursion (see for example [4]). The remainder of this paper shows that it is powerful enough to capture the behavior of P/T nets.
Reference: 25. <editor> S. Mauw and G.J. Veltink, editors. </editor> <title> Algebraic Specification of Communication Protocols, </title> <booktitle> volume 36 of Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <address> Cambridge, UK, </address> <year> 1993. </year>
Reference-contexts: Thus, the explicit distinction made in the current net is not necessary anymore. In case of infinite data domains, the results of this paper must be adapted to an algebraic formalism which supports data, such as for example CRL [20] or PSF <ref> [25] </ref>. 8 Concluding Remarks and Future Work The first part of this paper gives an algebraic semantics for P/T nets which is consistent with their usual interleaving semantics.
Reference: 26. <institution> Meta Software Corporation, </institution> <address> Cambridge, Massachusetts, USA. Design/CPN Manual, </address> <year> 1991. </year>
Reference-contexts: In order to support the design of large, complex systems, high-level Petri nets [21, 23] have been defined, which include hierarchy, data, and time. Based on high-level Petri nets, automated tools, such as Design/CPN <ref> [26] </ref> and ExSpect [1], have been developed. The most important reasons for the widespread use of Petri nets in the area of system design, are their intuitive graphical representation and the simplicity of the main concepts of the theory.
Reference: 27. <author> R. Milner. </author> <title> A Calculus of Communcating Systems, </title> <booktitle> volume 92 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1980. </year>
Reference-contexts: Unfortunately, the class of Place/Transition nets, which underlies all other classes of Petri nets, also lacks one important property, which is essential to top-down, modular design: compositionality. Several other theories for describing concurrent systems do have this property. For example, process algebras, such as CCS <ref> [27] </ref>, CSP [22], and ACP [4], all support compositionality. Therefore, it is not surprising that several attempts have been made to integrate P/T nets and process algebra. Some approaches give a net semantics for some process algebra; others describe an algebraic semantics for (some subclass of) P/T nets. <p> Usually, silent actions are denoted o . Only a single symbol is needed, since all internal actions are equal in the sense that they do not have any visible, external effects. The notion of silent actions in an algebraic setting was first introduced by Milner <ref> [27] </ref>. The definition of a process space given in Section 2 can still be used in a context with silent actions. However, since bisimulation does not distinguish between observable and silent actions, the notion of equality on processes needs to be changed. <p> As before, the equivalence relation on processes should distinguish processes with different moments of choice. In [15], Van Glabbeek shows that (rooted) branching bisimulation is exactly the equivalence that satisfies these two requirements. Branching bisimulation is a slightly finer equivalence than the better known observation equivalence <ref> [27] </ref>. That is, it distinguishes more processes than observation equivalence. Let .P; ! / be some process space over Act equal to A [ fo g, for some set of action symbols A.
Reference: 28. <author> U. Montanari and D. Yankelevich. </author> <title> Combining CCS and Petri Nets via Structural Axioms. </title> <journal> Fundamenta Informat-icae, </journal> <volume> 20(1-3):193-229, </volume> <month> May </month> <year> 1994. </year>
Reference-contexts: Examples of this approach are Best, Devillers, and Hall [10], Degano, De Nicola, and Montanari [13], Van Glabbeek and Vaandrager [16], Goltz [19], Montanari and Yankelevich <ref> [28] </ref>, Olderog [29], and Taubner [33]. As explained, this paper does the converse. It gives an algebraic semantics for P/T nets. Examples of this approach are Baeten and Berg-stra [2], Boudol, Roucairol, and De Simone [11], and Dietz and Schreibert [14]. All three approaches are discussed briefly.
Reference: 29. <author> E.-R. Olderog. </author> <title> Petri Nets and Algebraic Calculi of Processes. </title> <editor> In G. Rozenberg, editor, </editor> <booktitle> Advances in Petri Nets 1987, volume 266 of Lecture Notes in Computer Science, </booktitle> <pages> pages 196-223. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1987. </year>
Reference-contexts: Examples of this approach are Best, Devillers, and Hall [10], Degano, De Nicola, and Montanari [13], Van Glabbeek and Vaandrager [16], Goltz [19], Montanari and Yankelevich [28], Olderog <ref> [29] </ref>, and Taubner [33]. As explained, this paper does the converse. It gives an algebraic semantics for P/T nets. Examples of this approach are Baeten and Berg-stra [2], Boudol, Roucairol, and De Simone [11], and Dietz and Schreibert [14]. All three approaches are discussed briefly.
Reference: 30. <author> L. Pomello, G. Rozenberg, and C. Simone. </author> <title> A Survey of Equivalence Notions for Net Based Systems. </title> <booktitle> In Rozenberg [32], </booktitle> <pages> pages 410-472. </pages>
Reference-contexts: Consequently, the two nets of Figure 1 are not equivalent. In their survey on refinement of Petri nets, Brauer, Gold, and Vogler [12] propose bisimulation equivalence for similar reasons as explained above. It also appears in the survey on equivalence notions for Petri nets by Pomello, Rozenberg, and Simone <ref> [30] </ref>. Note that in this paper bisimulation is not used explicitly to determine equivalence of nets. Instead, an equational theory is given which can be used for this purpose.
Reference: 31. <author> W. Reisig. </author> <title> Petri Nets: An Introduction, </title> <booktitle> volume 4 of EATCS monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1985. </year>
Reference-contexts: 1 Introduction Motivation. The theory of Petri nets (see for example <ref> [31] </ref>) has been developed to design and analyze distributed systems. In order to support the design of large, complex systems, high-level Petri nets [21, 23] have been defined, which include hierarchy, data, and time.
Reference: 32. <editor> G. Rozenberg, editor. </editor> <booktitle> Advances in Petri Nets 1992, volume 609 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1992. </year>
Reference: 33. <author> D. Taubner. </author> <title> Finite Representations of CCS and TCSP Programs by Automata and Petri Nets, </title> <booktitle> volume 369 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1989. </year> <month> 24 </month>
Reference-contexts: Examples of this approach are Best, Devillers, and Hall [10], Degano, De Nicola, and Montanari [13], Van Glabbeek and Vaandrager [16], Goltz [19], Montanari and Yankelevich [28], Olderog [29], and Taubner <ref> [33] </ref>. As explained, this paper does the converse. It gives an algebraic semantics for P/T nets. Examples of this approach are Baeten and Berg-stra [2], Boudol, Roucairol, and De Simone [11], and Dietz and Schreibert [14]. All three approaches are discussed briefly.
References-found: 33

