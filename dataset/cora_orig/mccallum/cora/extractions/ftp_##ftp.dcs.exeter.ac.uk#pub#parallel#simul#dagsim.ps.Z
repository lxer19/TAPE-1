URL: ftp://ftp.dcs.exeter.ac.uk/pub/parallel/simul/dagsim.ps.Z
Refering-URL: http://www.dcs.exeter.ac.uk/reports/reports.html
Root-URL: 
Email: Email: aswtcai@ntuix.ntu.ac.sg Email: steve@dcs.exeter.ac.uk  
Phone: Tel: +65 799 1273 Tel: +44 1392 264048  
Title: Dag Consistent Parallel Simulation: a Predictable and Robust Conservative Algorithm  
Author: Wentong Cai Emmanuelle Letertre Stephen J. Turner 
Keyword: parallel simulation, conservative algorithm, dag consistency, performance prediction, robust simulation.  
Address: Singapore 639798 Exeter, EX4 4PT, U.K.  
Affiliation: School of Applied Science Dept. of Computer Science Nanyang Technological University University of Exeter  
Abstract: This paper presents a novel approach to parallel discrete event simulation based on a provably efficient scheduler for multithreaded programming. The "Cilk" runtime system provides the user with an algorithmic model of performance which can be used to predict the runtime of a parallel application accurately. Moreover, a Cilk application can "scale down" to run on a single processor with nearly the same performance as serial code. A conservative parallel discrete event simulation algorithm has been developed in which communication between logical processes is achieved using Cilk's virtual memory model: dag consistent shared memory. The simulation involves a divide and conquer style of execution which does not require the use of null messages or deadlock detection. The algorithm is therefore robust, in that it can be used for simulation applications where local lookahead is small or zero or where lookahead information is difficult to extract. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. D. Blanchard, T. W. Lake, and S. J. Turner. </author> <title> Cooperative acceleration: Robust conservative distributed discrete event simulation. </title> <booktitle> In Proceedings of the 8th Workshop on Parallel and Distributed Simulation, </booktitle> <pages> pages 58-64, </pages> <year> 1994. </year>
Reference-contexts: Researchers have suggested various ways of exploiting global knowledge about the simulated system in order to advance the simulation time <ref> [1, 7, 22] </ref>. Such mechanisms also lead to a robust simulation algorithm in that it can be used for simulation models where the local lookahead calculated by an LP is small or even zero, or where lookahead information is difficult to extract.
Reference: [2] <author> R. D. Blumofe, M. Frigo, C. F. Joerg, C. E. Leiserson, and K. H. Randall. </author> <title> Dag-consistent distributed shared memory. </title> <booktitle> In Proceedings of the Tenth International Parallel Processing Symposium (IPPS), </booktitle> <pages> pages 132-141, </pages> <year> 1996. </year>
Reference-contexts: It can be shown empirically that the constant factor hidden by the order notation is a small one, so that: T P P can be used as a good approximation to the execution time on P processors. Cilk's dag consistent shared memory model <ref> [2] </ref> allows programs to be written which are guaranteed to be deterministic, no matter how the threads are scheduled. <p> A partitioned [14] approach could be used to reserve space on the Cilk stack to be used in allocating elements for each LP's event list and for its buffers. Cilk provides a "cactus stack" <ref> [2] </ref>, in which each subcom-putation sees its own stack allocations and the stack allocated by its ancestors.
Reference: [3] <author> R. D. Blumofe, C. F. Joerg, B. C. Kuszmaul, C. E. Leiserson, K. H. Randall, and Y. Zhou. Cilk: </author> <title> An efficient multithreaded runtime system. </title> <booktitle> In Proceedings of the Fifth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (PPoPP), </booktitle> <pages> pages 207-216, </pages> <year> 1995. </year>
Reference-contexts: This paper presents a novel approach to parallel discrete event simulation based on a provably efficient scheduler for multithreaded programming. The simulation engine is implemented using the "Cilk" runtime system <ref> [3, 4] </ref> developed at MIT, which provides the user with an algorithmic model of performance which can be used to predict the execution time of a parallel simulation application accurately. <p> Instrumenta--tion in the Cilk scheduler can be used to provide an accurate measure of work, critical path length and the average parallelism, T 1 T 1 . It can be shown <ref> [3] </ref> theoretically that Cilk's work stealing scheduler executes a Cilk computation on P processors in time: T P P Since the lower bounds to the execution time are T P T 1 P and T P T 1 , this is asymptotically optimal.
Reference: [4] <author> R. D. Blumofe, C. F. Joerg, B. C. Kuszmaul, C. E. Leiserson, K. H. Randall, and Y. Zhou. Cilk: </author> <title> An efficient multithreaded runtime system. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 37(1) </volume> <pages> 55-69, </pages> <year> 1996. </year>
Reference-contexts: This paper presents a novel approach to parallel discrete event simulation based on a provably efficient scheduler for multithreaded programming. The simulation engine is implemented using the "Cilk" runtime system <ref> [3, 4] </ref> developed at MIT, which provides the user with an algorithmic model of performance which can be used to predict the execution time of a parallel simulation application accurately.
Reference: [5] <author> R. D. Blumofe and C. E. Leiserson. </author> <title> Scheduling multithreaded computations by work stealing. </title> <booktitle> In Proceedings of the 35th Annual Symposium on Foundations of Computer Science (FOCS), </booktitle> <pages> pages 356-368, </pages> <year> 1994. </year>
Reference-contexts: The Cilk runtime system uses a provably efficient scheduler which is based on the concept of randomized work-stealing <ref> [5] </ref>. When a new procedure is spawned, its processor first posts the work locally. When an idle processor runs out of work, it steals work from another processor chosen uniformly at random.
Reference: [6] <author> R. E. Bryant. </author> <title> Simulation of packet communication architecture computer systems. </title> <type> Technical report, </type> <institution> MIT-LCS-TR-188, Massachusetts Institute of Technology, </institution> <year> 1977. </year>
Reference-contexts: The basic problem conservative mechanisms must solve is determining when it is safe to process an event. LPs containing no safe events must block: this can lead to deadlock if appropriate precautions are not taken. To solve the deadlock problem, both deadlock avoidance <ref> [6, 10] </ref> and deadlock detection and recovery [11] mechanisms have been proposed. The concept of lookahead plays an important role in conservative simulations [12, 19] and refers to the ability to predict the future behaviour of an LP with respect to its interactions with other LPs.
Reference: [7] <author> W. Cai and S. J. Turner. </author> <title> An algorithm for distributed discrete event simulation: the "carrier null message" approach. </title> <booktitle> In Proceedings of the 1990 SCS Multiconference on Distributed Simulation, </booktitle> <pages> pages 3-8, </pages> <year> 1990. </year>
Reference-contexts: Researchers have suggested various ways of exploiting global knowledge about the simulated system in order to advance the simulation time <ref> [1, 7, 22] </ref>. Such mechanisms also lead to a robust simulation algorithm in that it can be used for simulation models where the local lookahead calculated by an LP is small or even zero, or where lookahead information is difficult to extract.
Reference: [8] <author> R. Calinescu. </author> <title> Bulk Synchronous Parallel algorithms for conservative discrete event simulation. </title> <booktitle> In Parallel Algorithms and Applications, </booktitle> <volume> volume 9, </volume> <pages> pages 15-38. </pages> <publisher> Gordon and Breach Science Publishers, </publisher> <year> 1996. </year>
Reference-contexts: However, the critical path analysis should also be extended to the simulation protocol itself in order to obtain an accurate prediction of performance. The use of cost models to analyse parallel discrete event simulation algorithms is therefore an important research issue <ref> [8, 9] </ref>. In the conservative approach to parallel discrete event simulation, occurrences of any local causality errors are strictly avoided. This means that each LP must process its input events in nondecreasing timestamp order.
Reference: [9] <author> R. Calinescu. </author> <title> Bulk Synchronous Parallel algorithms for optimistic discrete event simulation. </title> <type> Technical report, </type> <institution> PRG-TR-8-96, Programming Research Group, Oxford University, </institution> <year> 1996. </year>
Reference-contexts: However, the critical path analysis should also be extended to the simulation protocol itself in order to obtain an accurate prediction of performance. The use of cost models to analyse parallel discrete event simulation algorithms is therefore an important research issue <ref> [8, 9] </ref>. In the conservative approach to parallel discrete event simulation, occurrences of any local causality errors are strictly avoided. This means that each LP must process its input events in nondecreasing timestamp order.
Reference: [10] <author> K. M. Chandy and J. Misra. </author> <title> Distributed Simulation: a case study in design and verification of distributed programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> S.E.5(5):440-452, </volume> <year> 1979. </year>
Reference-contexts: The basic problem conservative mechanisms must solve is determining when it is safe to process an event. LPs containing no safe events must block: this can lead to deadlock if appropriate precautions are not taken. To solve the deadlock problem, both deadlock avoidance <ref> [6, 10] </ref> and deadlock detection and recovery [11] mechanisms have been proposed. The concept of lookahead plays an important role in conservative simulations [12, 19] and refers to the ability to predict the future behaviour of an LP with respect to its interactions with other LPs. <p> An example of lookahead is the ability of an LP, say LP i , to predict the events it will (or will not) send to some other LP, say LP k , up to a certain time. The "null message" algorithm for avoiding deadlock <ref> [10] </ref> relies on a non-zero lookahead and problems arise if this is not the case, for example if the simulation model includes pre-emptive behaviour. <p> This calculation involves two components: 1. Calculation of input link clocks: This is very similar to the way that link clocks are calculated in the deadlock avoidance algorithm <ref> [10] </ref> based on the use of "null messages".
Reference: [11] <author> K. M. Chandy and J. Misra. </author> <title> Asynchronous distributed simulation via a sequence of parallel computations. </title> <journal> Communications of the ACM, </journal> <volume> 24(11) </volume> <pages> 198-206, </pages> <year> 1981. </year>
Reference-contexts: LPs containing no safe events must block: this can lead to deadlock if appropriate precautions are not taken. To solve the deadlock problem, both deadlock avoidance [6, 10] and deadlock detection and recovery <ref> [11] </ref> mechanisms have been proposed. The concept of lookahead plays an important role in conservative simulations [12, 19] and refers to the ability to predict the future behaviour of an LP with respect to its interactions with other LPs.
Reference: [12] <author> R. M. Fujimoto. </author> <title> Parallel Discrete Event Simulation. </title> <journal> Communications of the ACM, </journal> <volume> 33(10) </volume> <pages> 30-53, </pages> <year> 1990. </year>
Reference-contexts: Parallel simulation explores the potential parallelism inherent in many simulation applications, since the physical processes of the system being modeled may be represented by Logical Processes (LPs) that execute concurrently and communicate by exchanging timestamped events <ref> [12] </ref>. It is generally recognised that the future success of parallel discrete event simulation largely depends on the extent to which it is possible to reduce the effort and expertise required to develop efficient parallel simulations [13]. <p> LPs containing no safe events must block: this can lead to deadlock if appropriate precautions are not taken. To solve the deadlock problem, both deadlock avoidance [6, 10] and deadlock detection and recovery [11] mechanisms have been proposed. The concept of lookahead plays an important role in conservative simulations <ref> [12, 19] </ref> and refers to the ability to predict the future behaviour of an LP with respect to its interactions with other LPs.
Reference: [13] <author> R. M. Fujimoto. </author> <title> Parallel Discrete Event Simulation: </title> <journal> will the field survive? ORSA Journal on Computing, </journal> <volume> 5(3) </volume> <pages> 213-230, </pages> <year> 1993. </year>
Reference-contexts: It is generally recognised that the future success of parallel discrete event simulation largely depends on the extent to which it is possible to reduce the effort and expertise required to develop efficient parallel simulations <ref> [13] </ref>.
Reference: [14] <author> R. M. Fujimoto and K. S. Panesar. </author> <title> Buffer management in shared memory time-warp systems. </title> <booktitle> In Proceedings of the 9th Workshop on Parallel and Distributed Simulation, </booktitle> <pages> pages 149-156, </pages> <year> 1995. </year>
Reference-contexts: While this works well on a shared memory multiprocessor, an implementation for a distributed shared memory architecture would need a more sophisticated buffer management scheme. A partitioned <ref> [14] </ref> approach could be used to reserve space on the Cilk stack to be used in allocating elements for each LP's event list and for its buffers. Cilk provides a "cactus stack" [2], in which each subcom-putation sees its own stack allocations and the stack allocated by its ancestors.
Reference: [15] <author> F. Hao, K. Wilson, R. M. Fujimoto, and E. Zegura. </author> <title> Logical process size in parallel simulations. </title> <booktitle> In Proceedings of 1996 Winter Simulation Conference, </booktitle> <year> 1996. </year> <month> 16 </month>
Reference-contexts: However, such issues can have a significant effect on performance <ref> [15] </ref>. Another important factor for the future success of parallel discrete event simulation is the ability to predict the performance of a parallel simulation [17]. The inherent parallelism of a simulation application can be measured by a technique known as critical path analysis.
Reference: [16] <author> S. Jain. </author> <title> Virtual factory framework: a key enabler for agile manufacturing. </title> <booktitle> In Proceedings of 1995 INRIA/IEEE Symposium on Emerging Technologies and Factory Automation, </booktitle> <pages> pages 247-258. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: The second benchmark is representative of a real application area where there is a need for parallel discrete event simulation in order to be able to able execute such simulations within a reasonable amount of time <ref> [16] </ref>. 4.1 Super-Ping Simulation Application The Super-Ping application [21] is a generalization of the ping-pong simulation and consists of a number of ping objects connected together in a ring, as shown in figure 4.
Reference: [17] <author> Y-B. </author> <title> Lin. </title> <journal> Will parallel simulation research survive? ORSA Journal on Computing, </journal> <volume> 5(3) </volume> <pages> 236-238, </pages> <year> 1993. </year>
Reference-contexts: However, such issues can have a significant effect on performance [15]. Another important factor for the future success of parallel discrete event simulation is the ability to predict the performance of a parallel simulation <ref> [17] </ref>. The inherent parallelism of a simulation application can be measured by a technique known as critical path analysis. It is possible to instrument a serial simulation program so that its parallelism may be determined before significant effort is spent in developing parallel code.
Reference: [18] <author> W. Mao and D. M. Nicol. </author> <title> A heuristic for partitioning parallel computation. </title> <booktitle> In Proceedings of the Seventh IASTED/ISMM Conference on Parallel and Distributed Computing and Systems, </booktitle> <pages> pages 295-297, </pages> <year> 1995. </year>
Reference-contexts: The current divide and conquer procedure uses the LP number to create a hierarchical tree of Cilk procedures (a more sophisticated procedure might use information about the connectivity of LPs to create a tree structure which would allow locality to be exploiting more fully, for example using a heuristic algorithm <ref> [18] </ref>). When the number of LPs in a sub-tree reaches a certain threshold value, those LPs are grouped together in a cluster which is executed serially.
Reference: [19] <author> D. M. Nicol. </author> <title> Principles of conservative parallel simulation. </title> <booktitle> In Proceedings of 1996 Winter Simulation Conference, </booktitle> <year> 1996. </year>
Reference-contexts: LPs containing no safe events must block: this can lead to deadlock if appropriate precautions are not taken. To solve the deadlock problem, both deadlock avoidance [6, 10] and deadlock detection and recovery [11] mechanisms have been proposed. The concept of lookahead plays an important role in conservative simulations <ref> [12, 19] </ref> and refers to the ability to predict the future behaviour of an LP with respect to its interactions with other LPs.
Reference: [20] <author> J. S. Steinman. </author> <title> Discrete event simulation and the event horizon part 2: Event list management. </title> <booktitle> In Proceedings of the 10th Workshop on Parallel and Distributed Simulation, </booktitle> <pages> pages 170-178, </pages> <year> 1996. </year>
Reference-contexts: In each cycle of the simulation, there must be at least one event with a timestamp equal to gst, so the simulation will progress and deadlock will not occur. 3.3 Implementation issues The event list for each LP is implemented using the Qheap data structure <ref> [20] </ref>. A Qheap is organized as a sorted linked list, whose size is not more than some fixed value S. <p> Removing an element from a Qheap requires an untangle operation if the first item is a metaitem. Qheaps were chosen as the data structure for the event list for two reasons: 1. Because Qheaps are composed from linked lists, they have very low overheads, as demonstrated in <ref> [20] </ref>. Their amortized worst case behaviour is logarithmic, so they should not break down whatever the distribution of timestamps. 2. They have the property that it is possible to merge a sorted list into the Qheap by metasizing the list and inserting it as a single metaitem.
Reference: [21] <author> P. Wonnacott and D. Bruce. </author> <title> A prototype implementation of APOSTLE, and its performance. </title> <booktitle> In Proceedings of the 1995 SCS Summer Computer Simulation Conference, </booktitle> <pages> pages 197-205, </pages> <year> 1995. </year>
Reference-contexts: The second benchmark is representative of a real application area where there is a need for parallel discrete event simulation in order to be able to able execute such simulations within a reasonable amount of time [16]. 4.1 Super-Ping Simulation Application The Super-Ping application <ref> [21] </ref> is a generalization of the ping-pong simulation and consists of a number of ping objects connected together in a ring, as shown in figure 4. In our version of this simulation, each ping object is an LP and events are passed in both directions around the ring.
Reference: [22] <author> K. R. Wood and S. J. Turner. </author> <title> A generalized carrier-null method for conservative parallel simulation. </title> <booktitle> In Proceedings of the 8th Workshop on Parallel and Distributed Simulation, </booktitle> <pages> pages 50-57, </pages> <year> 1994. </year>
Reference-contexts: Researchers have suggested various ways of exploiting global knowledge about the simulated system in order to advance the simulation time <ref> [1, 7, 22] </ref>. Such mechanisms also lead to a robust simulation algorithm in that it can be used for simulation models where the local lookahead calculated by an LP is small or even zero, or where lookahead information is difficult to extract.
References-found: 22

