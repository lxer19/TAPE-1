URL: http://choices.cs.uiuc.edu/2k/papers/coots99.ps.gz
Refering-URL: http://choices.cs.uiuc.edu/2k/
Root-URL: http://www.cs.uiuc.edu
Email: ff-kon,royg@cs.uiuc.edu  
Title: Supporting Automatic Configuration of Component-Based Distributed Systems explicit representations of inter-component dependence and component requirements.
Author: Fabio Kon Roy H. Campbell 
Note: This is a preliminary version of the paper to appear in the proceedings of the 5th USENIX Conference on Object-Oriented Technologies and Systems, May 3-7, 1999,  Component-based software systems must maintain  This research is supported by a grant from the National Science Foundation, NSF 98-70736. Fabio Kon is supported in part by a grant from CAPES, the Brazilian Research Agency, proc.#1405/95-2.  
Web: http://choices.cs.uiuc.edu  
Address: 1304 West Springfield Avenue, Urbana, IL 61801-2987 USA  San Diego, CA.  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Abstract: Recent developments in Component technology enable the construction of complex software systems by assembling together off-the-shelf components. However, it is still difficult to develop efficient, reliable, and dynamically configurable component-based systems. Components are often developed by different groups with different methodologies. Unspecified dependencies and behavior lead to unexpected failures. In this paper, we present a generic model for reifying dependencies in distributed component systems and discuss how it can be used to support automatic configuration. We describe our experience deploying the framework in a reflective ORB and discuss the use of this model in a new distributed operating system. 
Abstract-found: 1
Intro-found: 1
Reference: [Bar98] <author> Saulo Barros. </author> <title> The Regional Atmospheric Modeling System (RAMS) Project. </title> <note> http://www.ime.usp.br/~rams/, 1998. </note>
Reference-contexts: In addition, the Java implementation is being used by researchers at the University of S~ao Paulo to prototype a domain decomposition manager. This manager has two demonstration applications: a Distributed Informa tion System for Mobile Agents [SGE98] and the parallelization of an Atmospheric Modeling System <ref> [Bar98] </ref>. Work on implementations of the framework in Java RMI and CORBA is underway. We will use them in the 2K distributed operating system. As discussed in 3.2, the ComponentConfigurator will be used in 2K to support runtime architectural awareness as the basis for implementing fault-tolerant reconfigurable systems.
Reference: [BBB + 98] <author> R. Balter, L. Bellissard, F. Boyer, M. Riveill, and J.Y. Vion-Dury. </author> <title> Ar-chitecturing and Configuring Distributed Applications with Olan. </title> <booktitle> In Proc. IFIP Int. Conf. on Distributed Systems Platforms and Open Distributed Processing (Middleware'98), </booktitle> <address> The Lake District, UK, </address> <month> September </month> <year> 1998. </year>
Reference-contexts: We are particularly interested in investigating the possibilities of applying results from previous and ongoing work in dynamic reconfiguration <ref> [HWP93, SW98, BBB + 98] </ref> to standard architectures such as CORBA and Java Beans. 5 Ongoing and Future Work The current implementation of the framework in C++ is being used in dynamicTAO as its dynamic reconfigurability is enhanced.
Reference: [BSP + 95] <author> B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. E. Fiuczynski, D. Becker, C. Chabers, and S. Eggers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the 15th Symposium on Operating System Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Prerequisites were only used to express that an object depends on the code implementing it. Not much experimentation was carried out [SGM89, Sha98]. SOS does not include a model for dynamic management of inter-component dependence. Previous research in microkernels and customizable operating systems such as Mach [Lop91], SPIN <ref> [BSP + 95] </ref>, Exokernel [KEG + 97], and Choices [LTC96] developed low-level techniques for dynamic loading new modules to the operating system both in kernel and user space. Nevertheless, a high-level model for operating system reconfiguration is still inexistent.
Reference: [Chi95] <author> Shigeru Chiba. </author> <title> A Metaobject Protocol for C++. </title> <booktitle> In Proceedings of the OOP-SLA'95, </booktitle> <pages> pages 285-299, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: A cleaner solution would be to use existing reflective languages and environments. Iguana [GC96] and OpenC++ <ref> [Chi95] </ref>, for example, are extensions to C++ that reify several features of this language, allowing dynamic modification of their implementations. In these languages, it would be possible to instrument method invocation to take care of dependence maintenance.
Reference: [Cle96] <author> Paul C. Clements. </author> <title> A survey of architecture description languages. </title> <booktitle> In Proceedings of The Eighth International Workshop on Software Specification and Design, Paderborn, </booktitle> <address> Germany, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: They must be able to represent hardware and quality of service requirements as well as dependencies on other software components. Thus, we believe that an ideal language for prerequisite specification will build on previous work on Architecture Description Languages <ref> [Cle96] </ref> and QoS Specification Languages [FK98, LBS + 98]. Connector-based systems like UniCon [SDZ96] and software buses like POLYLITH [Pur94] separate issues concerning component functional behavior from component interaction. Our model goes one step further by separating inter-component communication from inter-component dependence.
Reference: [CNM98] <author> Roy H. Campbell, Klara Nahrstedt, and M. Dennis Mickunas. </author> <title> 2K: A Component-Based Network-Centric Operating System. Project home page: </title> <address> http:// choices.cs.uiuc.edu/2K, </address> <year> 1998. </year>
Reference-contexts: We are in the process of analyzing existing specification languages to study which ones would best fit our needs. The language must allow processing specifications at execution time with little overhead. We will deploy initial prototypes in 2K , a new distributed operating system <ref> [KSC + 98, CNM98] </ref> currently under development. <p> We, then, discuss how this framework will be used to support architectural awareness in the 2K distributed operating system. 3.1 dynamicTAO One of the major constituent elements of the 2K distributed operating system <ref> [KSC + 98, CNM98] </ref> is a reflective middleware layer based on CORBA. After carefully studying existing Object Request Brokers, we came to the conclusion that the TAO ORB [SC99] would be the best starting point for developing our infrastructure.
Reference: [Den97] <author> Adam Denning. </author> <title> ActiveX Controls Inside Out. </title> <publisher> Microsoft Press, </publisher> <address> Redmond, </address> <note> second edition, </note> <year> 1997. </year>
Reference-contexts: Rather than being an alternative to object-orientation, component technology extends the initial concepts of objects. It stresses the desire for independent pieces of software that can be reused and combined in different ways to implement complex software systems. Recently developed component architectures <ref> [Ham97, Den97, OMG97] </ref> support the construction of sophisticated systems by assembling together a collection of off-the-shelf software components with the help of visual tools or programmatic interfaces. However, there is still very little support for managing the interactions between components.
Reference: [FK98] <author> Svend Frolund and Jari Koistinen. </author> <title> Quality of Service Specification in Distributed Object Systems Design. </title> <booktitle> In Proceedings of the 4th USENIX Conference on Object-Oriented Technology and Systems (COOTS), </booktitle> <address> Santa Fe, New Mexico, </address> <month> April </month> <year> 1998. </year>
Reference-contexts: In addition, it gains the means to carry out this reconfiguration without compromising system stability and reliability and with minimal impact in performance. Our research builds on previous and ongoing work on software architecture [SG96], dynamic reconfiguration of distributed systems [HWP93, Hof94, SW98], and quality of service specification <ref> [FK98, LBS + 98] </ref>. Our long-term goal is to develop a generic model for automatic configuration that can be applied to modern component architectures. 1.1 Paper Contents The initial objective of our research is to provide support for representing the dependencies among software components in an explicit way. <p> The last item is the one which determines which auxiliary components must be loaded and in which kind of software environment they will execute. The first two items can be expressed by QoS specification languages <ref> [FK98, LBS + 98] </ref>. The third item is equivalent to the requires clause in module interconnection languages like the one used in Polylith [Pur94]. We are in the process of analyzing existing specification languages to study which ones would best fit our needs. <p> They must be able to represent hardware and quality of service requirements as well as dependencies on other software components. Thus, we believe that an ideal language for prerequisite specification will build on previous work on Architecture Description Languages [Cle96] and QoS Specification Languages <ref> [FK98, LBS + 98] </ref>. Connector-based systems like UniCon [SDZ96] and software buses like POLYLITH [Pur94] separate issues concerning component functional behavior from component interaction. Our model goes one step further by separating inter-component communication from inter-component dependence.
Reference: [GC96] <author> Brendan Gowing and Vinny Cahill. </author> <title> Meta-object protocols for C++: The iguana approach. </title> <booktitle> In Proceedings of Reflection '96, </booktitle> <pages> pages 137-152, </pages> <address> San Fran-cisco, USA, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: In order to avoid a proliferation of programming errors related to dependence reification, it would be necessary to develop special languages, compilers, and runtime systems to guarantee the safety of component execution and reconfiguration. A cleaner solution would be to use existing reflective languages and environments. Iguana <ref> [GC96] </ref> and OpenC++ [Chi95], for example, are extensions to C++ that reify several features of this language, allowing dynamic modification of their implementations. In these languages, it would be possible to instrument method invocation to take care of dependence maintenance.
Reference: [GHJV95] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides. </author> <title> Design Patterns, Elements of Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: After carefully studying existing Object Request Brokers, we came to the conclusion that the TAO ORB [SC99] would be the best starting point for developing our infrastructure. TAO is a portable, flexible, extensible, and configurable ORB based on design patterns. It uses the Strategy design pattern <ref> [GHJV95] </ref> to separate different aspects of the ORB internal engine. A configuration file is used to specify the strategies the ORB uses to implement aspects like concurrency, request demultiplex-ing, scheduling, and connection management. At ORB startup time, the configuration file is parsed and the selected strategies are loaded. <p> Another problem occurs when one replaces the Thread-Pool strategy by a new one. There may be several incoming connections enqueued in the strategy waiting for a thread to execute them. The solution is to use the Memento pattern <ref> [GHJV95] </ref> to encapsulate the old strategy state in an object that is passed to the new strategy. An object is used to encapsulate the queue of waiting connections. The system simply passes this object to the new strategy which then takes care of the enqueued connections.
Reference: [Ham97] <author> Graham Hamilton. </author> <title> JavaBeans specification. Sun Microsystems, </title> <note> 1997. Available at http://java.sun.com/beans/docs. </note>
Reference-contexts: Rather than being an alternative to object-orientation, component technology extends the initial concepts of objects. It stresses the desire for independent pieces of software that can be reused and combined in different ways to implement complex software systems. Recently developed component architectures <ref> [Ham97, Den97, OMG97] </ref> support the construction of sophisticated systems by assembling together a collection of off-the-shelf software components with the help of visual tools or programmatic interfaces. However, there is still very little support for managing the interactions between components.
Reference: [Hen98] <author> Michi Henning. </author> <title> Binding, Migration, and Scalability in CORBA. </title> <journal> Communications of the ACM, </journal> <volume> 41(10), </volume> <month> October </month> <year> 1998. </year>
Reference-contexts: In a CORBA implementation of our model, a De-pendencySpecification stores a CORBA Interopera-ble Object Reference (IOR) so that the Component-Configurator is able to reify dependencies among distributed components. Prerequisites for software components can be specified either in terms of persistent IORs <ref> [Hen98] </ref> or in terms of service type and attributes. In the former case, an implementation repository can be used to dynamically create a new CORBA object if one is not available.
Reference: [HLS97] <author> Tim Harrison, David Levine, and Dou-glas C. Schmidt. </author> <title> The Design and Performance of a Real-time CORBA Object Event Service. </title> <booktitle> In Proceedings of OOP-SLA '97, </booktitle> <address> Atlanta, Georgia, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: At ORB startup time, the configuration file is parsed and the selected strategies are loaded. TAO is primarily targeted for static hard real-time applications such as Avionics systems <ref> [HLS97] </ref>. Thus, it assumes that, once the ORB is initially configured, its strategies will remain in place until it completes its execution. There is very little support for on-the-fly reconfiguration. The 2K project seeks to build a flexible infrastructure to support adaptive applications running on dynamic environments.
Reference: [Hof94] <author> Christine R. Hofmeister. </author> <title> Dynamic Reconfiguration of Distributed Applications. </title> <type> PhD thesis, </type> <institution> University of Maryland, Department of Computer Science, </institution> <month> January </month> <year> 1994. </year> <note> Technical Report CS-TR-3210. </note>
Reference-contexts: In addition, it gains the means to carry out this reconfiguration without compromising system stability and reliability and with minimal impact in performance. Our research builds on previous and ongoing work on software architecture [SG96], dynamic reconfiguration of distributed systems <ref> [HWP93, Hof94, SW98] </ref>, and quality of service specification [FK98, LBS + 98].
Reference: [HWP93] <author> Christine Hofmeister, E. White, and James M. Purtilo. SURGEON: </author> <title> A Packager for Dynamically Reconfigurable Distributed Applications. </title> <journal> IEE Software Engineering Journal, </journal> <volume> 8(2) </volume> <pages> 95-101, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: In addition, it gains the means to carry out this reconfiguration without compromising system stability and reliability and with minimal impact in performance. Our research builds on previous and ongoing work on software architecture [SG96], dynamic reconfiguration of distributed systems <ref> [HWP93, Hof94, SW98] </ref>, and quality of service specification [FK98, LBS + 98]. <p> We are particularly interested in investigating the possibilities of applying results from previous and ongoing work in dynamic reconfiguration <ref> [HWP93, SW98, BBB + 98] </ref> to standard architectures such as CORBA and Java Beans. 5 Ongoing and Future Work The current implementation of the framework in C++ is being used in dynamicTAO as its dynamic reconfigurability is enhanced.
Reference: [KC98] <author> Fabio Kon and Roy H. Campbell. </author> <title> On the Role of Inter-Component Dependence in Supporting Automatic Reconfiguration. </title> <type> Technical Report UIUCDCS-R-98-2080, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> December </month> <year> 1998. </year>
Reference-contexts: Thus, it seems that we are trapped between a safe, conservative solution that might block indefinitely and a liberal but unsafe solution that may crash the whole system by executing invalid code. In <ref> [KC98] </ref>, we discuss two solutions that lie somewhere between these two. They are as safe as the conservative one but are less subject to blocking. 2.2.3 Managing Dependencies The use of our model in a language like C++ requires strict collaboration from the component developer to conform to proposed guidelines.
Reference: [KEG + 97] <author> M. Frans Kaashoek, Dawson R. Engler, Gregory R. Ganger, Hector Brice~no, Rus-sell Hunt, David Mazieres, Tom Pinck-ney, Robert Grimm, John Janotti, and Kenneth Mackenzie. </author> <title> Application Perfor--mance and Flexibility on Exokernel Systems. </title> <booktitle> In Proceedings of the Sixteenth Symposium on Operating Systems Principles, </booktitle> <address> Saint Malo, France, </address> <month> October </month> <year> 1997. </year> <note> ACM. </note>
Reference-contexts: Not much experimentation was carried out [SGM89, Sha98]. SOS does not include a model for dynamic management of inter-component dependence. Previous research in microkernels and customizable operating systems such as Mach [Lop91], SPIN [BSP + 95], Exokernel <ref> [KEG + 97] </ref>, and Choices [LTC96] developed low-level techniques for dynamic loading new modules to the operating system both in kernel and user space. Nevertheless, a high-level model for operating system reconfiguration is still inexistent.
Reference: [KSC + 98] <author> Fabio Kon, Ashish Singhai, Roy H. Campbell, Dulcineia Carvalho, Robert Moore, and Francisco J. Ballesteros. </author> <title> 2K: A Reflective, Component-Based Operating System for Rapidly Changing Environments. </title> <booktitle> In Proceedings of the ECOOP'98 Workshop on Reflective Object-Oriented Programming and Systems, </booktitle> <address> Brussels, Belgium, </address> <month> July </month> <year> 1998. </year>
Reference-contexts: We are in the process of analyzing existing specification languages to study which ones would best fit our needs. The language must allow processing specifications at execution time with little overhead. We will deploy initial prototypes in 2K , a new distributed operating system <ref> [KSC + 98, CNM98] </ref> currently under development. <p> We, then, discuss how this framework will be used to support architectural awareness in the 2K distributed operating system. 3.1 dynamicTAO One of the major constituent elements of the 2K distributed operating system <ref> [KSC + 98, CNM98] </ref> is a reflective middleware layer based on CORBA. After carefully studying existing Object Request Brokers, we came to the conclusion that the TAO ORB [SC99] would be the best starting point for developing our infrastructure.
Reference: [LBS + 98] <author> J. P. Loyall, D. E. Bakken, R. E. Schantz, J. A. Zinky, D. A. Karr, R. Vanegas, and K. R. Anderson. </author> <title> QoS Aspect Languages and Their Runtime Integration. </title> <booktitle> In Proceedings of the Fourth Workshop on Languages, Compilers, and Run-time Systems for Scalable Computers (LCR98), </booktitle> <address> Pittsburgh, Pennsylvania, </address> <month> May </month> <year> 1998. </year> <note> To appear in Lecture Notes in Computer Science, Springer-Verlag. </note>
Reference-contexts: In addition, it gains the means to carry out this reconfiguration without compromising system stability and reliability and with minimal impact in performance. Our research builds on previous and ongoing work on software architecture [SG96], dynamic reconfiguration of distributed systems [HWP93, Hof94, SW98], and quality of service specification <ref> [FK98, LBS + 98] </ref>. Our long-term goal is to develop a generic model for automatic configuration that can be applied to modern component architectures. 1.1 Paper Contents The initial objective of our research is to provide support for representing the dependencies among software components in an explicit way. <p> The last item is the one which determines which auxiliary components must be loaded and in which kind of software environment they will execute. The first two items can be expressed by QoS specification languages <ref> [FK98, LBS + 98] </ref>. The third item is equivalent to the requires clause in module interconnection languages like the one used in Polylith [Pur94]. We are in the process of analyzing existing specification languages to study which ones would best fit our needs. <p> They must be able to represent hardware and quality of service requirements as well as dependencies on other software components. Thus, we believe that an ideal language for prerequisite specification will build on previous work on Architecture Description Languages [Cle96] and QoS Specification Languages <ref> [FK98, LBS + 98] </ref>. Connector-based systems like UniCon [SDZ96] and software buses like POLYLITH [Pur94] separate issues concerning component functional behavior from component interaction. Our model goes one step further by separating inter-component communication from inter-component dependence.
Reference: [Lop91] <author> Keith Lopere. </author> <title> Mach 3 kernel principles. Open Software Foundation, </title> <year> 1991. </year>
Reference-contexts: Prerequisites were only used to express that an object depends on the code implementing it. Not much experimentation was carried out [SGM89, Sha98]. SOS does not include a model for dynamic management of inter-component dependence. Previous research in microkernels and customizable operating systems such as Mach <ref> [Lop91] </ref>, SPIN [BSP + 95], Exokernel [KEG + 97], and Choices [LTC96] developed low-level techniques for dynamic loading new modules to the operating system both in kernel and user space. Nevertheless, a high-level model for operating system reconfiguration is still inexistent.
Reference: [LTC96] <author> W. S. Liao, S. Tan, and R. H. Campbell. </author> <title> Fine-grained, Dynamic User Customization of Operating Systems. </title> <booktitle> In Proceedings Fifth International Workshop on Object-Orientation in Operating Systems, </booktitle> <pages> pages 62-66, </pages> <address> Seattle, Washington USA, </address> <month> Octo-ber </month> <year> 1996. </year>
Reference-contexts: Not much experimentation was carried out [SGM89, Sha98]. SOS does not include a model for dynamic management of inter-component dependence. Previous research in microkernels and customizable operating systems such as Mach [Lop91], SPIN [BSP + 95], Exokernel [KEG + 97], and Choices <ref> [LTC96] </ref> developed low-level techniques for dynamic loading new modules to the operating system both in kernel and user space. Nevertheless, a high-level model for operating system reconfiguration is still inexistent. These previous works have not addressed a number of problems related to fault-tolerance and dynamic reconfiguration.
Reference: [OMG97] <author> OMG. </author> <title> CORBA Component Model RFP. Object Management Group, </title> <address> Framing-ham, MA, </address> <year> 1997. </year> <note> OMG Document 97-05-22. </note>
Reference-contexts: Rather than being an alternative to object-orientation, component technology extends the initial concepts of objects. It stresses the desire for independent pieces of software that can be reused and combined in different ways to implement complex software systems. Recently developed component architectures <ref> [Ham97, Den97, OMG97] </ref> support the construction of sophisticated systems by assembling together a collection of off-the-shelf software components with the help of visual tools or programmatic interfaces. However, there is still very little support for managing the interactions between components.
Reference: [OMG98] <author> OMG. CORBAservices: </author> <title> Common Object Services Specification. Object Management Group, Framingham, </title> <address> MA, </address> <year> 1998. </year> <note> OMG Document 98-07-05. </note>
Reference-contexts: In the former case, an implementation repository can be used to dynamically create a new CORBA object if one is not available. In the latter case, the CORBA Trading Object Service <ref> [OMG98] </ref> can be used to locate an instance of the server component that meets the requirements specified by the given attributes.
Reference: [Pur94] <author> James Purtilo. </author> <title> The Polylith Software Bus. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(1) </volume> <pages> 151-174, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: The first two items can be expressed by QoS specification languages [FK98, LBS + 98]. The third item is equivalent to the requires clause in module interconnection languages like the one used in Polylith <ref> [Pur94] </ref>. We are in the process of analyzing existing specification languages to study which ones would best fit our needs. The language must allow processing specifications at execution time with little overhead. <p> Thus, we believe that an ideal language for prerequisite specification will build on previous work on Architecture Description Languages [Cle96] and QoS Specification Languages [FK98, LBS + 98]. Connector-based systems like UniCon [SDZ96] and software buses like POLYLITH <ref> [Pur94] </ref> separate issues concerning component functional behavior from component interaction. Our model goes one step further by separating inter-component communication from inter-component dependence. Connectors and software buses require that applications be programmed to a particular communication paradigm.
Reference: [SC99] <author> Douglas C. Schmidt and Chris Cleeland. </author> <title> Applying Patterns to Develop Extensible ORB Middleware. </title> <journal> IEEE Communications Magazine, </journal> <note> 1999. (to appear), available at http://www.cs.wustl.edu/ ~schmidt/ACE-papers.html. </note>
Reference-contexts: After carefully studying existing Object Request Brokers, we came to the conclusion that the TAO ORB <ref> [SC99] </ref> would be the best starting point for developing our infrastructure. TAO is a portable, flexible, extensible, and configurable ORB based on design patterns. It uses the Strategy design pattern [GHJV95] to separate different aspects of the ORB internal engine.
Reference: [Sch94] <author> Douglas C. Schmidt. </author> <title> Reactor: An Object Behavioral Pattern for Concurrent Event Demultiplexing and Event Handler Dispatching. </title> <booktitle> In Proceedings of the 1st Pattern Languages of Programs Conference, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: These subclasses may also store references to client connections that depend on them. With this information, it is possible to decide when a strategy can be safely unloaded. Consider, for example, the three concurrency strategies supported by dynamicTAO : Single-Threaded Reactive <ref> [Sch94] </ref>, Thread-Per-Connection, and Thread-Pool. If the user switches from the Reactive or Thread-Per-Connection strategies to any other concurrency strategy, nothing special needs to be done. dynamicTAO may simply load the new strategy, update the proper TAOConfigurator hook, unload the old strategy, and continue.
Reference: [SDZ96] <author> Mary Shaw, R. DeLine, and G. Zelesnik. </author> <title> Abstractions and implementations for architectural connections. </title> <booktitle> In Proceedings of the Third International Conference on Configurable Distributed Systems, </booktitle> <address> An-napolis, Maryland, USA, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: However, a major goal of our research is not to limit the implementation to a particular programming language. We could also tie together the mech anisms for communication and dependence representation using, for example, abstract connectors <ref> [SDZ96] </ref>. But this could limit the expressiveness of the model. Our objective is to develop a generic methodology that could be utilized in a large number of heterogeneous environments. <p> Thus, we believe that an ideal language for prerequisite specification will build on previous work on Architecture Description Languages [Cle96] and QoS Specification Languages [FK98, LBS + 98]. Connector-based systems like UniCon <ref> [SDZ96] </ref> and software buses like POLYLITH [Pur94] separate issues concerning component functional behavior from component interaction. Our model goes one step further by separating inter-component communication from inter-component dependence. Connectors and software buses require that applications be programmed to a particular communication paradigm.
Reference: [SG96] <author> Mary Shaw and David Garlan. </author> <title> Software Architecture: Perspectives on an Emerging Discipline. </title> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference-contexts: In addition, it gains the means to carry out this reconfiguration without compromising system stability and reliability and with minimal impact in performance. Our research builds on previous and ongoing work on software architecture <ref> [SG96] </ref>, dynamic reconfiguration of distributed systems [HWP93, Hof94, SW98], and quality of service specification [FK98, LBS + 98].
Reference: [SGE98] <editor> Dilma Menezes da Silva, Marco Dimas Gubitoso, and Markus Endler. Sistemas de Informac~ao Distribuidos para Agentes Moveis. </editor> <booktitle> In Proceedings of the XXV Integrated Seminars in Software and Hardware (SEMISH'98), </booktitle> <pages> pages 125-140, </pages> <address> Belo Horizonte, Brazil, </address> <month> August </month> <year> 1998. </year> <note> SBC. Available at http://www.ime.usp.br/ ~dilma/papers/semish98.ps. </note>
Reference-contexts: In addition, the Java implementation is being used by researchers at the University of S~ao Paulo to prototype a domain decomposition manager. This manager has two demonstration applications: a Distributed Informa tion System for Mobile Agents <ref> [SGE98] </ref> and the parallelization of an Atmospheric Modeling System [Bar98]. Work on implementations of the framework in Java RMI and CORBA is underway. We will use them in the 2K distributed operating system.
Reference: [SGH + 89] <author> Marc Shapiro, Yvon Gourhant, Sabine Habert, Laurence Mosseri, Michel Ruffin, and Cline Valot. </author> <title> SOS: An object-oriented operating system | assessment and perspectives. </title> <journal> Computing Systems, </journal> <volume> 2(4) </volume> <pages> 287-338, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: mechanism can be used for adapting the system and its components to changing parameters such as network band width, CPU load, resource availability, user access patterns, etc. 4 Related Work The idea of using prerequisites to represent the dependencies among operating system objects was introduced in the SOS operating system <ref> [SGH + 89] </ref> developed at INRIA, France. In the SOS model, objects contain a list of prerequisites that must be satisfied before they are activated. Even though the idea was promising, it was not fully explored in that project.
Reference: [SGM89] <author> Marc Shapiro, Philippe Gautron, and Laurence Mosseri. </author> <title> Persistence and Migration for C++ Objects. </title> <editor> In Stephen Cook, editor, ECOOP'89, </editor> <booktitle> Proc. of the Third European Conf. on Object-Oriented Programming, British Computer Society Workshop Series, </booktitle> <pages> pages 191-204, </pages> <address> Not-tingham (GB), </address> <month> July </month> <year> 1989. </year> <institution> The British Computer Society, Cambridge University Society. </institution>
Reference-contexts: Even though the idea was promising, it was not fully explored in that project. Prerequisites were only used to express that an object depends on the code implementing it. Not much experimentation was carried out <ref> [SGM89, Sha98] </ref>. SOS does not include a model for dynamic management of inter-component dependence.
Reference: [Sha98] <author> Marc Shapiro. </author> <type> Personal communication, </type> <month> July </month> <year> 1998. </year>
Reference-contexts: Even though the idea was promising, it was not fully explored in that project. Prerequisites were only used to express that an object depends on the code implementing it. Not much experimentation was carried out <ref> [SGM89, Sha98] </ref>. SOS does not include a model for dynamic management of inter-component dependence.
Reference: [SW98] <author> S. K. Shrivastava and S. M. Wheater. </author> <title> Architectural Support for Dynamic Reconfiguration of Large Scale Distributed Application. </title> <booktitle> In Proceeding of the 4th International Conference on Configurable Distributed Systems (CDS'98), </booktitle> <address> Annapo--lis, Maryland, </address> <month> May </month> <year> 1998. </year>
Reference-contexts: In addition, it gains the means to carry out this reconfiguration without compromising system stability and reliability and with minimal impact in performance. Our research builds on previous and ongoing work on software architecture [SG96], dynamic reconfiguration of distributed systems <ref> [HWP93, Hof94, SW98] </ref>, and quality of service specification [FK98, LBS + 98]. <p> We are particularly interested in investigating the possibilities of applying results from previous and ongoing work in dynamic reconfiguration <ref> [HWP93, SW98, BBB + 98] </ref> to standard architectures such as CORBA and Java Beans. 5 Ongoing and Future Work The current implementation of the framework in C++ is being used in dynamicTAO as its dynamic reconfigurability is enhanced.
References-found: 33

