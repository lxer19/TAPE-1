URL: ftp://info.mcs.anl.gov/pub/tech_reports/plassman/balanced.ps.Z
Refering-URL: http://www.mcs.anl.gov/sumaa3d/Papers/papers.html
Root-URL: http://www.mcs.anl.gov
Email: (gjertsen@ncsa.uiuc.edu)  (jones@cs.utk.edu)  (plassman@mcs.anl.gov)  
Title: Parallel Heuristics for Improved, Balanced Graph Colorings  
Author: Robert K. Gjertsen, Jr. Mark T. Jones Paul E. Plassmann 
Address: Urbana, IL 61801  Knoxville, TN 37996  Argonne, IL 60439  
Affiliation: Department of Computer Science University of Illinois,  Department of Computer Science University of Tennessee  Mathematics and Computer Science Division Argonne National Laboratory,  
Abstract: The computation of good, balanced graph colorings is an essential part of many algorithms required in scientific and engineering applications. Motivated by an effective sequential heuristic, we introduce a new parallel heuristic, PLF, and show that this heuristic has the same expected runtime under the PRAM computational model as the scalable coloring heuristic introduced by Jones and Plassmann (JP). We present experimental results performed on the Intel DELTA that demonstrate that this new heuristic consistently generates better colorings and requires only slightly more time than the JP heuristic. In the second part of the paper we introduce two new parallel color-balancing heuristics, PDR(k) and PLF(k). We show that these heuristics have the desirable property that they do not increase the number of colors used by an initial coloring during the balancing process. We present experimental results that show that these heuristics are very effective in obtaining balanced colorings and, in addition, exhibit scalable performance. y This work was supported by the Mathematical, Information, and Computational Sciences Division subprogram of the Office of Computational and Technology Research, U.S. Department of Energy, under Contract W-31-109-Eng-38. In addition, the second author received support from the 1994-1995 UTK Professional Development Award Program and NSF grant ASC-9501583. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Allwright, R. Bordawekar, P. Coddington, K. Dincer, and C. Martin, </author> <title> A comparison of parallel graph coloring algorithms, </title> <type> Tech. Rep. </type> <institution> SCCS-666, Northeast Parallel Architectures Center, Syracuse University, </institution> <year> 1995. </year>
Reference-contexts: If adjacent vertices have the same degree, the random numbers are used to determine the coloring order. Because this heuristic is related to the LFO sequential heuristic, we call the new method the parallel largest first (PLF) heuristic. We note that Allwright et al. <ref> [1] </ref> have independently determined that this heuristic is effective in numerical calculations involving dynamically triangulated random surfaces. The PLF heuristic can be implemented by a straightforward modification of the JP heuristic. Let ae (v) = u (v) + deg (v), and recall that u (v) is between 0 and 1.
Reference: [2] <author> D. Br elaz, </author> <title> New methods to color the vertices of a graph, </title> <journal> Comm. ACM, </journal> <volume> 22 (1979), </volume> <pages> pp. 251-256. </pages>
Reference-contexts: General sequential coloring heuristic vertices to be colored are ordered. Effective, well-known ordering techniques include the largest first ordering (LFO) [25], the incidence degree ordering (IDO) [4], and the saturation degree ordering (SDO) <ref> [2] </ref>. The vertex ordering for each of these methods is determined at each step i in the above greedy heuristic as follows: * LFO chooses an ordering of the vertices in V such that deg (v 1 ) deg (v 2 ) : : : deg (v n ). <p> Sequential coloring heuristics have been compared by several authors, including a study by Matula et al. with random graphs [18], an analysis by Brelaz on general random graphs <ref> [2] </ref>, and work by Coleman and More [4] with random graphs and matrices from various well-known test suites such as the Harwell collection [7]. Overall, these studies found that the heuristics perform well on wide variety of test problems.
Reference: [3] <author> T. Canfield, M. Jones, P. Plassmann, and M. Tang, </author> <title> Thermal effects on the frequency response of piezoelectric crystals, in New Methods in Transient Analysis, </title> <booktitle> PVP-Vol. 246 and AMD-Vol. 143, </booktitle> <address> New York, </address> <year> 1992, </year> <booktitle> ASME, </booktitle> <pages> pp. 103-108. </pages>
Reference-contexts: The first four problems are scaled problems; for each of these problems we are able to generate a specific instance for a given number of processors such that the problem size scales nearly linearly with the number of processors. * CRYSTAL A finite-element model of a piezoelectric crystal <ref> [3] </ref>.
Reference: [4] <author> T. F. Coleman and J. J. Mor e, </author> <title> Estimation of sparse Jacobian matrices and graph coloring problems, </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> 20 (1983), </volume> <pages> pp. 187-209. </pages>
Reference-contexts: 1. Introduction. The graph coloring problem arises in many scientific computing appli-cations. For example, the efficient computation of sparse Jacobian matrices <ref> [4] </ref> and the parallel solution of sparse triangular linear systems [6] [14] [19] [20] [21] [23] require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem [8]. Fortunately, effective sequential heuristics [4] [21] have been developed and implemented for graph coloring problems of <p> For example, the efficient computation of sparse Jacobian matrices <ref> [4] </ref> and the parallel solution of sparse triangular linear systems [6] [14] [19] [20] [21] [23] require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem [8]. Fortunately, effective sequential heuristics [4] [21] have been developed and implemented for graph coloring problems of practical importance where good, but not necessarily optimal, colorings are required. On serial computers these heuristics are inexpensive relative to the other required computational tasks in most applications. <p> General sequential coloring heuristic vertices to be colored are ordered. Effective, well-known ordering techniques include the largest first ordering (LFO) [25], the incidence degree ordering (IDO) <ref> [4] </ref>, and the saturation degree ordering (SDO) [2]. <p> Sequential coloring heuristics have been compared by several authors, including a study by Matula et al. with random graphs [18], an analysis by Brelaz on general random graphs [2], and work by Coleman and More <ref> [4] </ref> with random graphs and matrices from various well-known test suites such as the Harwell collection [7]. Overall, these studies found that the heuristics perform well on wide variety of test problems. Features of the LFO heuristic are incorporated in the PLF heuristic described in the next section. 3.
Reference: [5] <author> I. S. Duff, R. Grimes, J. Lewis, and B. Poole, </author> <title> Sparse matrix test problems, </title> <note> SIGNUM Newsletter, 17 (1982), p. 22. </note>
Reference-contexts: The next eleven problems are static problems. For these problems, the same instance of the problem is solved on different numbers of processors. * BCSSTK16, BCSSTK17, BCSSTK18, BCSSTK29, BCSSTK33 Graphs associated with matrices arising from problems in structural engineering, all from the Harwell Boeing sparse matrix collection <ref> [5] </ref>. * DT A graph arising from the Delaunay triangulation of a random point set in two dimensions with three coupled unknowns associated with each vertex. * ELASTIC3D The linear elasticity equations on a six-sided solid domain discretized by quadratic finite elements. * FDGRID3D A finite-difference discretization of a cube for
Reference: [6] <author> I. S. Duff and G. A. Meurant, </author> <title> The effect of ordering on preconditioned conjugate gradients, </title> <journal> BIT, </journal> <volume> 29 (1989), </volume> <pages> pp. 635-657. </pages>
Reference-contexts: 1. Introduction. The graph coloring problem arises in many scientific computing appli-cations. For example, the efficient computation of sparse Jacobian matrices [4] and the parallel solution of sparse triangular linear systems <ref> [6] </ref> [14] [19] [20] [21] [23] require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem [8].
Reference: [7] <author> I. S. Duff and J. K. Reid, </author> <title> Performance evaluation of codes for sparse matrix problems, in Performance Evaluation of Numerical Software, </title> <editor> L. Fosdick, ed., </editor> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1979, </year> <pages> pp. 121-135. </pages>
Reference-contexts: coloring heuristics have been compared by several authors, including a study by Matula et al. with random graphs [18], an analysis by Brelaz on general random graphs [2], and work by Coleman and More [4] with random graphs and matrices from various well-known test suites such as the Harwell collection <ref> [7] </ref>. Overall, these studies found that the heuristics perform well on wide variety of test problems. Features of the LFO heuristic are incorporated in the PLF heuristic described in the next section. 3. An Improved Parallel Graph Coloring Heuristic.
Reference: [8] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability, </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: For example, the efficient computation of sparse Jacobian matrices [4] and the parallel solution of sparse triangular linear systems [6] [14] [19] [20] [21] [23] require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem <ref> [8] </ref>. Fortunately, effective sequential heuristics [4] [21] have been developed and implemented for graph coloring problems of practical importance where good, but not necessarily optimal, colorings are required. On serial computers these heuristics are inexpensive relative to the other required computational tasks in most applications. <p> The smallest number of colors required for coloring G is known as the chromatic number of G and is denoted by O (G). As previously mentioned, the graph coloring problem is NP-hard for graphs that require three or more colors <ref> [8] </ref>. There are some well-known bounds on O (G) including O (G) (G) + 1 and O (G) jC max j, where C max is the largest clique in G. <p> One of the best theoretical bounds for the bin-packing problem is obtained by the "first fit decreasing" heuristic <ref> [8] </ref>, which works by first sorting the items by size and trying to pack the largest items first. Motivated by the bin-packing heuristic, the DR heuristic chooses the vertex with the largest weight from the set of vertices of the color under consideration.
Reference: [9] <author> R. K. Gjertsen Jr., </author> <title> Parallel graph coloring heuristics, </title> <type> Master's thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1994. </year>
Reference-contexts: For both the JP and PLF coloring heuristics, the SDO method was used for the Seq-color () routine for the global phase, and the SDO method was used for the local phase. This combination performs at least as well as any other combination of the heuristics tested in <ref> [9] </ref>.
Reference: [10] <author> B. Hendrickson and R. Leland, </author> <note> The Chaco user's guide: Version 2.0, </note> <institution> Sandia Report SAND94-2692, Sandia National Laboratories, </institution> <address> Albuquerque, N.M., </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Let the set of processors be P , and let the mapping : V ! P represent the assignment of the vertex set V to the set of processors P . We note that good heuristics exist for determining such partitionings <ref> [10] </ref> [22] [24]. By "good" we mean that the heuristics are able to assign nearly equal numbers of vertices (or vertex weights) to each processor while minimizing the edges that cross partitions (edges whose vertices are assigned to different processors).
Reference: [11] <author> J. </author> <title> J aj a, An Introduction to Parallel Algorithms, </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1992. </year>
Reference-contexts: The JP heuristic has a slightly faster expected PRAM runtime, but its major advantage is that it is an asynchronous algorithm. This feature of the heuristic allows for very efficient, scalable implementations on distributed-memory machines. We first formulate the JP heuristic under the CREW PRAM model <ref> [11] </ref> with each processor assigned a single vertex from the graph. Later we will study the heuristic modified for a parallel, distributed-memory MIMD machine. Recall that the PRAM computational model assumes that processors communicate through a common shared memory.
Reference: [12] <author> M. T. Jones and P. E. Plassmann, </author> <title> A parallel graph coloring heuristic, </title> <journal> SIAM Journal on Scientific Computing, </journal> <volume> 14 (1993), </volume> <pages> pp. </pages> <month> 654-669. </month> <title> [13] , Computational results for parallel unstructured mesh computations, </title> <booktitle> Computing Systems in Engineering, 5 (1994), </booktitle> <pages> pp. </pages> <month> 297-309. </month> <title> [14] , Scalable iterative solution of sparse linear systems, </title> <booktitle> Parallel Computing, 20 (1994), </booktitle> <pages> pp. </pages> <month> 753-773. </month> <title> [15] , Parallel algorithms for adaptive mesh refinement, </title> <note> SIAM Journal on Scientific Computing (to appear). </note>
Reference-contexts: In addition, it may not be practical to use a serial implementation of these heuristics because the problems may be too large to fit into the memory available to a single processor. To address this problem, Jones and Plassmann (JP) developed a scalable graph coloring heuristic <ref> [12] </ref>. By scalable we mean that if the size of the subproblem assigned to each processor is kept constant, the running time of the heuristic remains constant (or increases very slowly) as the number of processors is increased. <p> To solve the first problem, we exploit the fact that the JP heuristic achieves a fast parallel running time by coloring a sequence of independent sets based on random numbers assigned to the vertices <ref> [12] </ref>. In this paper, we combine this approach with a more sophisticated strategy based on ideas from a successful sequential coloring heuristic. Our new heuristic (PLF) has the same expected runtime as the JP heuristic under the PRAM parallel computation model, and we show experimentally that it generates better colorings. <p> Assuming that we possess a good graph partitioning and assignment mapping , we initially focus on a high-level procedure for coloring the graph G = (V; E) in parallel. We use the original approach of Jones and Plassmann <ref> [12] </ref>. With this method the vertices on each processor are classified as either local or global vertices. The set of local vertices V L is defined by V L = fv j (v) = (u) 8 (v; u) 2 Eg. <p> If we define the function oe by oe (v) = oe i (v) when v 2 V i , then oe is a coloring for G. Proof: See <ref> [12] </ref>. 2 The advantage of the method is that once the global separator vertices are colored, the processors can work independently to color their local vertices. This two-level approach is used for all the methods described in this paper. <p> The problematic issue of coloring the global vertices is considered next. 3.1. Previous Parallel Coloring Heuristics. The JP heuristic <ref> [12] </ref> colors the global vertices by finding independent sets of vertices, coloring them, and updating neighboring vertices on other processors asynchronously. The heuristic is inspired by a parallel algorithm introduced by Luby to determine a maximal independent set in a graph [17]. <p> The distributed-memory, JP coloring heuristic for the ith processor 5 colorings for graphs derived from finite-difference stencils and finite-element models <ref> [12] </ref>. 3.2. An Improved Coloring Heuristic. To improve the resulting colorings, we modify the above method by using the degree of a vertex v in a manner analogous to the sequential LFO heuristic.
Reference: [16] <author> R. J. Lipton, D. J. Rose, and R. E. Tarjan, </author> <title> Generalized nested dissection, </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> 16 (1979), </volume> <pages> pp. 346-358. 16 </pages>
Reference-contexts: The performance on random graphs is poor primarily because of the large separator size; for random graphs the expected size of these separators is O (jV j) <ref> [16] </ref>. We see in Table 5 that all vertices are global in the partitioning of these random graphs, even for small jP j.
Reference: [17] <author> M. Luby, </author> <title> A simple parallel algorithm for the maximal independent set problem, </title> <journal> SIAM Journal on Comput--ing, </journal> <volume> 4 (1986), </volume> <pages> pp. 1036-1053. </pages>
Reference-contexts: Previous Parallel Coloring Heuristics. The JP heuristic [12] colors the global vertices by finding independent sets of vertices, coloring them, and updating neighboring vertices on other processors asynchronously. The heuristic is inspired by a parallel algorithm introduced by Luby to determine a maximal independent set in a graph <ref> [17] </ref>. The Luby heuristic has a fast expected runtime (logarithmic in the number of vertices) under the PRAM computational model.
Reference: [18] <author> D. Matula, G. Marble, and J. Isaacson, </author> <title> Graph coloring algorithms, in Graph Theory and Computing, </title> <editor> R. Read, ed., </editor> <publisher> Academic Press, </publisher> <year> 1972, </year> <pages> pp. 104-122. </pages>
Reference-contexts: For example, for a regular graph with all vertices of degree , the heuristic can be run in time and additional space proportional to jV j. Sequential coloring heuristics have been compared by several authors, including a study by Matula et al. with random graphs <ref> [18] </ref>, an analysis by Brelaz on general random graphs [2], and work by Coleman and More [4] with random graphs and matrices from various well-known test suites such as the Harwell collection [7]. Overall, these studies found that the heuristics perform well on wide variety of test problems.
Reference: [19] <author> R. G. Melhem and V. S. Ramarao, </author> <title> Multicolor reorderings of sparse matrices resulting from irregular grids, </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 14 (1988), </volume> <pages> pp. 117-138. </pages>
Reference-contexts: 1. Introduction. The graph coloring problem arises in many scientific computing appli-cations. For example, the efficient computation of sparse Jacobian matrices [4] and the parallel solution of sparse triangular linear systems [6] [14] <ref> [19] </ref> [20] [21] [23] require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem [8]. Fortunately, effective sequential heuristics [4] [21] have been developed and implemented for graph coloring problems of practical importance where good, but not necessarily optimal, colorings are required.
Reference: [20] <author> J. M. Ortega, </author> <title> Orderings for conjugate gradient preconditionings, </title> <journal> SIAM Journal on Optimization, </journal> <volume> 1 (1991), </volume> <pages> pp. 565-582. </pages>
Reference-contexts: 1. Introduction. The graph coloring problem arises in many scientific computing appli-cations. For example, the efficient computation of sparse Jacobian matrices [4] and the parallel solution of sparse triangular linear systems [6] [14] [19] <ref> [20] </ref> [21] [23] require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem [8]. Fortunately, effective sequential heuristics [4] [21] have been developed and implemented for graph coloring problems of practical importance where good, but not necessarily optimal, colorings are required.
Reference: [21] <author> C. Pommerell, M. Annaratone, and W. Fichtner, </author> <title> A set of new mapping and coloring heuristics for distributed-memory parallel processors, </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 13 (1992), </volume> <pages> pp. 194-226. </pages>
Reference-contexts: 1. Introduction. The graph coloring problem arises in many scientific computing appli-cations. For example, the efficient computation of sparse Jacobian matrices [4] and the parallel solution of sparse triangular linear systems [6] [14] [19] [20] <ref> [21] </ref> [23] require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem [8]. Fortunately, effective sequential heuristics [4] [21] have been developed and implemented for graph coloring problems of practical importance where good, but not necessarily optimal, colorings are required. <p> For example, the efficient computation of sparse Jacobian matrices [4] and the parallel solution of sparse triangular linear systems [6] [14] [19] [20] <ref> [21] </ref> [23] require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem [8]. Fortunately, effective sequential heuristics [4] [21] have been developed and implemented for graph coloring problems of practical importance where good, but not necessarily optimal, colorings are required. On serial computers these heuristics are inexpensive relative to the other required computational tasks in most applications. <p> Without such an assignment, a balanced coloring is not possible. In the discussions that follow, we assume the parallel computer is homogeneous; however, the definitions and methods can be extended to a heterogeneous system. In <ref> [21] </ref> the imbalance of a coloring is quantified by using the following definitions. <p> Pommerell et al. <ref> [21] </ref> give algorithms for producing balanced colorings; a parallel variant of their most effective algorithm is summarized in Figure 5. This heuristic colors only the global vertices, ignoring edge dependencies between vertices on the same processor. <p> Parallel version of the balanced coloring heuristic for processor i given by Pommerell et al. <ref> [21] </ref> with w (v) = 1 4.1. Two New Parallel Balancing Heuristics. The two parallel heuristics introduced in this section, PDR (k) and PLF (k), work by improving the balance of an existing coloring without increasing the number of colors.
Reference: [22] <author> A. Pothen, H. Simon, and K.-P. Liou, </author> <title> Partitioning sparse matrices with eigenvectors of graphs, </title> <journal> SIAM Journal on Matrix Analysis, </journal> <volume> 11 (1990), </volume> <pages> pp. 430-452. </pages>
Reference-contexts: Let the set of processors be P , and let the mapping : V ! P represent the assignment of the vertex set V to the set of processors P . We note that good heuristics exist for determining such partitionings [10] <ref> [22] </ref> [24]. By "good" we mean that the heuristics are able to assign nearly equal numbers of vertices (or vertex weights) to each processor while minimizing the edges that cross partitions (edges whose vertices are assigned to different processors).
Reference: [23] <author> R. Schreiber and W.-P. Tang, </author> <title> Vectorizing the Conjugate Gradient method. </title> <type> Unpublished manuscript, </type> <institution> Department of Computer Science, Stanford University, </institution> <year> 1982. </year>
Reference-contexts: 1. Introduction. The graph coloring problem arises in many scientific computing appli-cations. For example, the efficient computation of sparse Jacobian matrices [4] and the parallel solution of sparse triangular linear systems [6] [14] [19] [20] [21] <ref> [23] </ref> require graph colorings. Determining an optimal coloring for a general graph is known to be an NP-hard problem [8]. Fortunately, effective sequential heuristics [4] [21] have been developed and implemented for graph coloring problems of practical importance where good, but not necessarily optimal, colorings are required.
Reference: [24] <author> S. Vavasis, </author> <title> Automatic domain partitioning in three dimensions, </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 12 (1991), </volume> <pages> pp. 950-970. </pages>
Reference-contexts: Let the set of processors be P , and let the mapping : V ! P represent the assignment of the vertex set V to the set of processors P . We note that good heuristics exist for determining such partitionings [10] [22] <ref> [24] </ref>. By "good" we mean that the heuristics are able to assign nearly equal numbers of vertices (or vertex weights) to each processor while minimizing the edges that cross partitions (edges whose vertices are assigned to different processors).

References-found: 21

