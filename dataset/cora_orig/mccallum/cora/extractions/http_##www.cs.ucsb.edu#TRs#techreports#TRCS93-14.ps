URL: http://www.cs.ucsb.edu/TRs/techreports/TRCS93-14.ps
Refering-URL: http://www.cs.ucsb.edu/TRs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fsmithtr,sug@cs.ucsb.edu  michael@cs.keele.ac.uk  
Title: Supporting the Construction and Use of Spatio-Temporal Domains In Scientific Databases  
Author: Terrence R. Smith Jianwen Su Michael F. Worboys 
Note: Work supported in part by NSF grant IRI-9117094. Work also supported in part by NSF grant IRI-9109520.  
Date: July 11, 1993  
Address: Santa Barbara, CA 93106 USA  Staffordshire, ST5, 5BG U.K.  
Affiliation: Department of Computer Science University of California  Department of Computer Science Keele University, Keele  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Abiteboul and C. Beeri. </author> <title> On the power of languages for the manipulation of complex objects. </title> <type> Technical Report No.846, </type> <institution> INRIA, </institution> <month> May </month> <year> 1988. </year> <month> 36 </month>
Reference-contexts: Part of a database instance is shown below. (Points) = fo 1 ; o 2 ; :::; o 30 g (Polygons) = fp 1 ; :::; p 5 g (Point-Maps) = fm 1 g (DEMs) = fm 2 g (RainFalls) = (RainFalls) = ; ffi (Points; o 1 ) = <ref> [1; 1] </ref> ffi (Points; o 3 0) = [250; 150] ffi (Point-Maps) = f (o 1 ! 0:5); :::; (o 25 ! 1:3)g 14 3.3 Transformations and Integrity Constraints We further let I be a countably infinite, disjoint set of programs. <p> The language combines features from languages of the complex objects or nested relations model <ref> [1] </ref> and of object-oriented models [4]. Specifically, the languages allows manipulations on objects, transformations, and complex structured values built from the type constructors provided in the model. Predicates from interpreted domains (e.g., Integers, Boolean, Time) are permitted. It can also include the object equality, used-defined functions and predicates (transformations).
Reference: [2] <author> S. Abiteboul and P. C. Kanellakis. </author> <title> Object identity as a query language primitive. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 159-173, </pages> <year> 1989. </year>
Reference-contexts: Namely, every automorphism on an input database instance (respect functions) should also be an automorphism on the output. We can then define the class of computable queries to be the set of all generic mappings that are computable. Using results from <ref> [10, 2] </ref>, it can be verified that the language defined here expresses exactly all computable queries (modulo copies). In the remainder of the section, we show that the query language can also be used to define transformations.
Reference: [3] <author> J. F. Allen. </author> <title> Maintaining knowledge about temporal intervals. </title> <journal> Communications of the ACM, </journal> <volume> 26(11) </volume> <pages> 832-843, </pages> <month> November </month> <year> 1983. </year>
Reference-contexts: Three purely temporal domains (PSD) include: abstract domain: TimePoints concrete domain: TimePoints? structure: Reals abstract domain: TimeIntervals concrete domain: TimeIntervals? structure: [TimePoints; TimePoints] operations: (Included here would be all the operations discussed, for example, by Allen in <ref> [3] </ref>) 25 abstract domain: TimeSpans concrete domain: TimeSpans? structure: fTimeIntervalsg constraints: 8x 2 TimeSpans 8y; z 2 x: y " z = ; (Each member of `TimeSpans' is a set of disjoint time intervals.) The purely temporal domains above can be combined with spatial domains to give mixed spa tiotemporal domains,
Reference: [4] <author> M. Atkinson, F. Bancilhon, D. DeWitt, K. Dittrich, D. Maier, and S. Zdonik. </author> <title> The object-oriented database system manifesto. </title> <booktitle> In Proc. First Int's Conf. on Deductive and Object-Oriented Databases, </booktitle> <pages> pages 40-57, </pages> <year> 1989. </year>
Reference-contexts: The language combines features from languages of the complex objects or nested relations model [1] and of object-oriented models <ref> [4] </ref>. Specifically, the languages allows manipulations on objects, transformations, and complex structured values built from the type constructors provided in the model. Predicates from interpreted domains (e.g., Integers, Boolean, Time) are permitted. It can also include the object equality, used-defined functions and predicates (transformations).
Reference: [5] <author> A. K. Chandra and D. Harel. </author> <title> Computable queries for relational data bases. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 21(2) </volume> <pages> 156-178, </pages> <year> 1980. </year>
Reference-contexts: y 3 ^ u = x y :5gg where 3 = z p = x y :1 ^ z t = x y :3. 2 30 We can view database queries as mapping from inst (D) to inst (t ) (for some type t 2 t ) which are generic <ref> [5, 8] </ref>. The notion of genericity means that the language will treat data elements generically or independent of how they will be stored. Namely, every automorphism on an input database instance (respect functions) should also be an automorphism on the output.
Reference: [6] <author> J. Dozier. </author> <title> Looking ahead to EOS: The earth observing system. </title> <booktitle> Computer in Physics, </booktitle> <month> May/June </month> <year> 1990. </year>
Reference-contexts: The data model and languages that we describe and exemplify are the result of long-term research collaborations with a number of earth scientists who are involved in NASA's Earth Observing System (EOS) program <ref> [7, 6] </ref>. The general goals of these investigators include the development and application of complex, spatially-distributed models of a variety of earth science phenomena. We have found that these investigators, in common with many other applications scientists, lack adequate computational support for the iterative construction and testing of their models. <p> This system is intended to support large-scale earth science investigations by complementing the EOS information system (EOS-DIS) <ref> [6] </ref> in terms of support for high-level modeling and data management. As noted above, MDBS is intended to facilitate the iterative development of models in data-intensive and computationally intensive applications.
Reference: [7] <author> EOS: </author> <title> A Mission to Planet Earth, </title> <publisher> NASA, </publisher> <address> Washington, D.C., </address> <year> 1990. </year>
Reference-contexts: The data model and languages that we describe and exemplify are the result of long-term research collaborations with a number of earth scientists who are involved in NASA's Earth Observing System (EOS) program <ref> [7, 6] </ref>. The general goals of these investigators include the development and application of complex, spatially-distributed models of a variety of earth science phenomena. We have found that these investigators, in common with many other applications scientists, lack adequate computational support for the iterative construction and testing of their models.
Reference: [8] <author> R. Hull. </author> <title> Relative information capacity of simple relational schemata. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15(3) </volume> <pages> 856-886, </pages> <year> 1986. </year>
Reference-contexts: y 3 ^ u = x y :5gg where 3 = z p = x y :1 ^ z t = x y :3. 2 30 We can view database queries as mapping from inst (D) to inst (t ) (for some type t 2 t ) which are generic <ref> [5, 8] </ref>. The notion of genericity means that the language will treat data elements generically or independent of how they will be stored. Namely, every automorphism on an input database instance (respect functions) should also be an automorphism on the output.
Reference: [9] <author> R. Hull and R. King. </author> <title> Semantic data modeling: Survey, applications, and research issues. </title> <journal> ACM Computing Surveys, </journal> <volume> 19(3) </volume> <pages> 201-260, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: The equivalence relations in fact define equalities on objects or object identifiers with respect to certain domains (e.g. polygon). Such equivalence relations are extensions of the notion of key or surrogate in relational and semantic databases <ref> [24, 9] </ref>. To incorporate such equivalence relations in a formal manner, we introduce the following concepts. Suppose t 2 t is a type.
Reference: [10] <author> R. Hull and J. Su. </author> <title> Untyped sets, invention, and computable queries. </title> <booktitle> In Proc. ACM Symp. on Principles of Database Systems, </booktitle> <pages> pages 347-359, </pages> <year> 1989. </year>
Reference-contexts: On the other hand, in databases that allow the set construct, the combination of negation and such existential quantifiers may increase the expressive power of the query language beyond computability <ref> [10] </ref>. Query languages that allow noncomputable queries are not realistic since they are not implementable. Hence in our language, we do not allow negation over such existential quantifiers. This restriction limits the expressive power of our language to only computable queries. <p> Namely, every automorphism on an input database instance (respect functions) should also be an automorphism on the output. We can then define the class of computable queries to be the set of all generic mappings that are computable. Using results from <ref> [10, 2] </ref>, it can be verified that the language defined here expresses exactly all computable queries (modulo copies). In the remainder of the section, we show that the query language can also be used to define transformations.
Reference: [11] <institution> Bulletin of the Technical Committee on Data Engineering, </institution> <month> 16(1), March </month> <year> 1993. </year> <note> (Special Issue on Scientific Databases). </note>
Reference-contexts: 1 Introduction High levels of abstraction are of increasing significance for many areas of application in which computational methods play an important role. In particular, we believe that there is an increasing need for such abstraction in languages that support modeling and database activities in many areas of application <ref> [11, 22] </ref>. Our justification for this need is that as applications become evermore complex, it is important to hide irrelevant computational details from the attention of individuals whose concern is with the application.
Reference: [12] <author> C. Lecluse and P. Richard. </author> <title> Manipulation of structured values in object-oriented databases. </title> <booktitle> In Proc. 2nd Int. Workshop on Database Programming languages, </booktitle> <pages> pages 113-121, </pages> <year> 1989. </year>
Reference: [13] <author> C. Lecluse and P. Richard. </author> <title> Modeling complex structures in object-oriented databases. </title> <booktitle> In Proc. ACM Symp. on Principles of Database Systems, </booktitle> <pages> pages 360-368, </pages> <year> 1989. </year>
Reference: [14] <author> C. Lecluse, P. Richard, and F. Velez. </author> <title> O 2 : An object-oriented formal data model. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 424-433, </pages> <address> Chicago, </address> <month> June </month> <year> 1988. </year>
Reference: [15] <author> R. H. G uting. </author> <title> Geo-Relational Algebra: A Model And Query Language For Geometric Database Systems. </title> <booktitle> In Conference on Extending Database Technology (EDBT '88), </booktitle> <year> 1988. </year>
Reference-contexts: Some of the domains that we exemplify in this first set of examples have been discussed in [25] and are similar to some of the realms defined by Guting <ref> [15, 16] </ref>. In particular, the set of domains includes examples from four important classes of domains, which we term pure spatial domains (PSD), pure temporal domains (PTD), spatio-temporal domains (STD), and geographic domains (GD). In principal, PSD includes many of the domains that are defined in classical geometry.
Reference: [16] <author> R. H. G uting. </author> <title> Modeling non-standard database systems by many-sorted algebras. </title> <type> Technical Report 225, </type> <institution> Fachbereich Infromatik, Universit at Dortmund, </institution> <year> 1988. </year>
Reference-contexts: Some of the domains that we exemplify in this first set of examples have been discussed in [25] and are similar to some of the realms defined by Guting <ref> [15, 16] </ref>. In particular, the set of domains includes examples from four important classes of domains, which we term pure spatial domains (PSD), pure temporal domains (PTD), spatio-temporal domains (STD), and geographic domains (GD). In principal, PSD includes many of the domains that are defined in classical geometry.
Reference: [17] <author> L. A. Rowe and M. R. Stonebraker. </author> <title> The POSTGRES data model. </title> <booktitle> In Proc. Int. Conf. on Very Large Data Bases, </booktitle> <pages> pages 83-96, </pages> <year> 1987. </year>
Reference-contexts: A simple prototype of the data model is currently being built. It implements the data model and MDBL based on the POSTGRES database management system <ref> [17, 23] </ref>. The database contains the datasets from applications menetioned above and is distributed over a network. A virtual file system (not described here) is employed to provide network transparency.
Reference: [18] <author> M. Scholl and A. Voisard. </author> <title> Thematic map modeling. </title> <booktitle> In Design and Implementation of Large Spatial Databases (SSD'89), </booktitle> <pages> pages 167-192, </pages> <year> 1989. </year> <note> Lecture Notes in Computer Science No. 409, Springer-Verlag. 37 </note>
Reference: [19] <institution> Spatial Data Transfer Survey, U.S. Geological Survey, </institution> <year> 1992. </year>
Reference-contexts: An important subset of such core domains should relate to the domains of various standards, such as those of the recently adopted Spatial Data Transfer Standard (SDTS) <ref> [19] </ref>. Although the standard does not employ the explicit terminology of R-domains, it is easy to interpret the SDTS in terms of two classes of isomorphic R-domains that correspond to what we term an abstract R-domain.
Reference: [20] <author> T. R. Smith, J. Su, D. Agrawal, and A. El Abbadi. </author> <title> Database and modeling systems for the earth sciences. </title> <note> In IEEE [11]. (Special Issue on Scientific Databases). </note>
Reference-contexts: In this paper, we present a conceptual data model and a high-level database and modeling language that provide the basis for the appropriate computational support, which we term a modeling and database system (MDBS) <ref> [20] </ref>. The data model and languages that we describe and exemplify are the result of long-term research collaborations with a number of earth scientists who are involved in NASA's Earth Observing System (EOS) program [7, 6]. <p> Both the data model and languages for an MDBS should be closely related to such a characterization. We briefly describe a characterization that we have developed in collaboration with earth science researchers <ref> [20, 22] </ref> and upon which we have based the data model and languages described below. Of central importance for the success of scientific modeling activities, we believe, is the construction of appropriate sets of concepts, and, perhaps even more importantly, appropriate representations of those concepts in some language.
Reference: [21] <author> T. R. Smith, J. Su, D. Agrawal, and A. El Abbadi. MDBS: </author> <title> A modeling and database system to support research in the earth sciences. </title> <type> Technical report, </type> <institution> Dept. of Computer Science, UCSB, </institution> <year> 1993. </year>
Reference-contexts: As noted above, MDBS is intended to facilitate the iterative development of models in data-intensive and computationally intensive applications. The project represents a major extension of a 3-year, interdisciplinary NSF-supported research project on scientific databases, which has resulted in the design of the data model and languages <ref> [22, 21] </ref>. 35 MDBS is being developed with the specific goal of solving several major EOS-scale problems in earth science, including the routing of water and sediment down the entire Amazon basin, the integration of GCM's and regional hydrological models, and the modeling of snowmelt and the routing of runoff from
Reference: [22] <author> T. R. Smith, J. Su, T. Dunne, A. El Abbadi, and D. Agrawal. </author> <title> Requirements for modeling and database systems supporting investigations of large scale flows in the amazon watershed, </title> <note> 1993. (In preparation). </note>
Reference-contexts: 1 Introduction High levels of abstraction are of increasing significance for many areas of application in which computational methods play an important role. In particular, we believe that there is an increasing need for such abstraction in languages that support modeling and database activities in many areas of application <ref> [11, 22] </ref>. Our justification for this need is that as applications become evermore complex, it is important to hide irrelevant computational details from the attention of individuals whose concern is with the application. <p> Both the data model and languages for an MDBS should be closely related to such a characterization. We briefly describe a characterization that we have developed in collaboration with earth science researchers <ref> [20, 22] </ref> and upon which we have based the data model and languages described below. Of central importance for the success of scientific modeling activities, we believe, is the construction of appropriate sets of concepts, and, perhaps even more importantly, appropriate representations of those concepts in some language. <p> As noted above, MDBS is intended to facilitate the iterative development of models in data-intensive and computationally intensive applications. The project represents a major extension of a 3-year, interdisciplinary NSF-supported research project on scientific databases, which has resulted in the design of the data model and languages <ref> [22, 21] </ref>. 35 MDBS is being developed with the specific goal of solving several major EOS-scale problems in earth science, including the routing of water and sediment down the entire Amazon basin, the integration of GCM's and regional hydrological models, and the modeling of snowmelt and the routing of runoff from
Reference: [23] <author> M. Stonebraker, L. A. Rowe, and M. Hirohama. </author> <title> The implementation of POSTGRES. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 125-142, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: A simple prototype of the data model is currently being built. It implements the data model and MDBL based on the POSTGRES database management system <ref> [17, 23] </ref>. The database contains the datasets from applications menetioned above and is distributed over a network. A virtual file system (not described here) is employed to provide network transparency.
Reference: [24] <author> J. D. Ullman. </author> <title> Principles of Database Systems (2nd edition). </title> <publisher> Computer Science Press, </publisher> <address> Potomac, Maryland, </address> <year> 1982. </year>
Reference-contexts: The equivalence relations in fact define equalities on objects or object identifiers with respect to certain domains (e.g. polygon). Such equivalence relations are extensions of the notion of key or surrogate in relational and semantic databases <ref> [24, 9] </ref>. To incorporate such equivalence relations in a formal manner, we introduce the following concepts. Suppose t 2 t is a type.

References-found: 24

