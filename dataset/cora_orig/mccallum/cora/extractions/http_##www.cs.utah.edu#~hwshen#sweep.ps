URL: http://www.cs.utah.edu/~hwshen/sweep.ps
Refering-URL: http://www.cs.utah.edu/~hwshen/
Root-URL: 
Email: E-mail: hwshen@cs.utah.edu and crj@cs.utah.edu  
Title: Sweeping Simplices: A fast iso-surface extraction algorithm for unstructured grids  
Author: Han-Wei Shen and Christopher R. Johnson 
Address: Salt Lake City, UT 84112.  
Affiliation: Department of Computer Science University of Utah  
Abstract: We present an algorithm that accelerates the extraction of iso-surfaces from unstructured grids by avoiding the traversal of the entire set of cells in the volume. The algorithm consists of a sweep algorithm and a data decomposition scheme. The sweep algorithm incrementally locates intersected elements, and the data decomposition scheme restricts the algorithm's worst-case performance. For data sets consisting of hundreds of thousands of elements, our algorithm can reduce the cell traversal time more than 90% over the naive iso-surface extraction algorithm, thus facilitating interactive probing of scalar fields for large-scale problems on unstructured three-dimensional grids. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W.E. Lorensen and H. E. Cline. </author> <title> Marching cubes: A high resolution 3d surface construction algorithm. </title> <journal> Computer Graphics, </journal> <volume> 21(4) </volume> <pages> 163-169, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: We present a new algorithm that overcomes the previous obstacles for interactive iso-surface extraction on unstructured grids. The marching cubes algorithm proposed by Lorensen and Cline <ref> [1] </ref> has become a standard technique to generate iso-surfaces. Although the algorithm originates from medical applications, which typically use structured grids, the algorithm can be extended to problems using unstructured grids of tetrahedral elements. A naive implementation of the algorithm works as follows. Each cell in the field is traversed.
Reference: [2] <author> J. Wilhelms and A. Van Gelder. </author> <title> Octrees for faster isosurface generation. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 11(3) </volume> <pages> 201-227, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: In the following sections, we begin by surveying related work. We then describe our sweep algorithm and data decomposition scheme. Finally, we conclude with a detailed algorithm analysis and results of simulation studies. 2 Related Work Octrees: Wilhelms and Van Gelder <ref> [2] </ref> use an oc-tree data structure to accelerate iso-surface extraction. The algorithm starts with a setup phase that creates the octree. Each node of the octree contains the maximum and minimum scalar values among the data elements in the sub-volume.
Reference: [3] <author> M. Giles and R. Haimes. </author> <title> Advanced interactive visualization for CFD. </title> <journal> Computing Systems in Engineering, </journal> <volume> 1(1) </volume> <pages> 51-62, </pages> <year> 1990. </year>
Reference-contexts: Octrees can substantially reduce cell traversal time because visits to non-intersected regions can be entirely avoided. However, octree data structures have primarily been implemented for data on structured grids. Moreover, octree methods are often sensitive to high-frequency noise within the data. Active List: Giles and Haimes <ref> [3] </ref> have developed an algorithm that accelerates the cell traversal process by sorting the elements by their maximum and minimum values to form two separate lists. They also calculate a global maximum, z, among the differences of all cells' two extreme values.
Reference: [4] <author> R. S. Gallagher. </author> <title> Span filter: An optimization scheme for volume visualization of large finite element models. </title> <booktitle> In Proceedings of Visualization '91, </booktitle> <pages> pages 68-75. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1991. </year>
Reference-contexts: Third, keeping the active list updated requires list insertions and purges that further slow the process if either of the two previous conditions occur. Span Filter: Gallagher designed a span filter to optimize the performance of his iso-surface extraction algorithm <ref> [4] </ref>. Initially, the range of the scalar values in the field is subdivided into several subranges termed buckets. The number of buckets that a cell's scalar values cross is defined as the span length. Cells are then distributed into different span lists according to their span lengths.
Reference: [5] <author> J. Wernecke. </author> <title> The Inventor Mentor. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1994. </year>
Reference-contexts: When a new iso-value is specified, one subgroup at each level is selected. The sweep algorithm is then invoked to find the intersected cells. 4 Algorithm Analysis and Simulation Results We have implemented our algorithms in C++. The Open Inventor libraries <ref> [5] </ref> along with OpenGL [6] are used to facilitate three-dimensional viewing. In this section, we discuss the effectiveness of our data decomposition scheme, the performance of the sweep algorithm, and the respective memory allocations of each.
Reference: [6] <author> J. Neider, T. Davis and M. Woo. </author> <title> OpenGL Programming Guide. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1993. </year> <title> 6 Figure Captions field. finite element simulation of cardiac defibrillation within the ventricles of the human heart. finite element simulation of the voltage distribution due to the electrical activity of the heart within a multi-chambered model of the human thorax. finite element simulation of temporal lobe epilepsy in a model of the human skull and brain. </title>
Reference-contexts: When a new iso-value is specified, one subgroup at each level is selected. The sweep algorithm is then invoked to find the intersected cells. 4 Algorithm Analysis and Simulation Results We have implemented our algorithms in C++. The Open Inventor libraries [5] along with OpenGL <ref> [6] </ref> are used to facilitate three-dimensional viewing. In this section, we discuss the effectiveness of our data decomposition scheme, the performance of the sweep algorithm, and the respective memory allocations of each.
References-found: 6

