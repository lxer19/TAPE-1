URL: ftp://ftp.cs.rpi.edu/pub/szymansk/plasma.ps
Refering-URL: http://www.cs.rpi.edu/~szymansk/papers.html
Root-URL: http://www.cs.rpi.edu
Email: Email: ecj9vkd@mvs.oac.ucla.edu.  
Title: Fortran vs. C++: Electrostatic Plasma PIC Simulation on the Intel Paragon IBM SP1  
Author: Charles D. Norton Boleslaw K. Szymanski Viktor K. Decyk 
Address: Los Angeles, Los Angeles, CA 90024-1547, USA  Pasadena CA 91109, USA.  
Affiliation: Department of Physics, University of California at  and NASA Jet Propulsion Laboratory,  
Note: This work is supported by NASA under Grant NASA NGT-70334. The content does not necessarily reflect the position or policy of the U.S. Government. No official endorsements should be inferred or implied. Access to the Intel Paragon and Cray T3D at the Jet Propulsion Laboratory was provided by NASA's Offices of Aeronautics, Mission to Planet Earth and Space Science.  
Abstract: We discuss the software development issues involved in designing parallel programs using object oriented techniques. Simulations involving 1D and 2D Particle In Cell plasma codes illustrate how C++ programs can effectively describe complex simulations while performing with reasonable efficiency when compared to the equivalent Fortran programs. The scalable object oriented modeling techniques closely match the physical view of the problem, thus supporting modifiability and portability of the code. Selection of a parallel programming paradigm must consider the important factors of efficiency of the computation and the programming implementation effort. C++ and Fortran implementation paradigms are compared and discussed from this point of view. y This report contains the material included in the poster session in Supercomputing '94 and the paper which will appear in Proc. SIAM 7th Conference on Parallel Processing for Scientific Computing, San Franscisco, Feburary, 1995. z Department of Computer Science, Rensselaer Polytechnic Institute, Troy, NY 12180-3590, USA. Email: nor-tonc@cs.rpi.edu, szymansk@cs.rpi.edu.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. K. Birdsall and A. B. Langdon. </author> <title> Plasma Physics via Computer Simulation. </title> <booktitle> The Adam Hilger Series on Plasma Physics. </booktitle> <address> Adam Hilger, New York, </address> <year> 1991. </year>
Reference-contexts: The free electrons can transport a current; thus fusion energy is an important area of plasma physics research, but more familiar examples include the Aurora Borealis, neon signs, the ionosphere, and solar winds. 2.1 Mathematical Formulation The fundamentals of the Particle In Cell plasma simulation model are described in <ref> [1] </ref>. The model integrates in time the trajectories of large numbers of charged particles in their self-consistent electrostatic (coulomb) fields. The PIC method assumes that particles do not interact with each other directly, but through the fields which they produce according to the Maxwell's equations.
Reference: [2] <author> S. W. Haney and J. A. Crotinger. </author> <title> C++ Proves Useful in Writing a Tokamak Systems Code. </title> <journal> J. Computers in Physics, </journal> <volume> 6(5) </volume> <pages> 450-455, </pages> <month> Sep/Oct </month> <year> 1991. </year>
Reference-contexts: Classes that operate on particles with common and/or unique properties should also be introduced. Furthermore, objects of these classes should be integrated so that they can function together to perform specific operations. Various approaches have been presented regarding object oriented class design in plasma simulation <ref> [2, 5] </ref>. We discuss our design decisions in the following sections. The programs are organized into two major sections referred to as the initialization section and the loop section. The initialization section constructs tables, creates the initial particle distribution and performs the initial charge deposition.
Reference: [3] <author> R. W. Hockney and J. W. Eastwood. </author> <title> Computer Simulation Using Particles. Adam Hilger, </title> <address> Philadelphia, </address> <year> 1988. </year>
Reference-contexts: Beam-Plasma interactions cause particle bunching that form potential wells, which are self enhanced, leading to particle trapping forming vortices in phase space. The ions are modeled as a fixed neutralizing background <ref> [3] </ref>. A sketch of the initial state of the simulation is illustrated in Figure 1. In this example, the particles and computational grid points are partitioned across 4 processors.
Reference: [4] <author> P. C. Liewer and V. K. Decyk. </author> <title> A General Concurrent Algorithm for Plasma Particle-in-Cell Simulation Codes. </title> <journal> J. of Computational Physics, </journal> <volume> 85 </volume> <pages> 302-322, </pages> <year> 1989. </year>
Reference-contexts: Diagnostics are computed along the way and all lengths are normalized to the grid spacing. These lengths are related back to physical lengths later. 2.2 Overview of Parallel Computation The General Concurrent Particle in Cell Algorithm described in <ref> [4] </ref> was used for the beam-plasma instability simulation. The GCPIC method partitions the particles and grid points among the N p processors of the MIMD distributed memory machine. Each processor is assigned a subdomain and is responsible for the particles in its domain. <p> We also performed a smaller set of simulations on the Paragon consisting of 409,600 background and 40,960 beam electrons with 2048 grid points. The 2D SP1 simulations consisted of 3,276,800 background and 294,912 beam particles with 32768 grid points. Since the original Fortran codes have been well benchmarked <ref> [4] </ref>, we will restrict our performance overview to these rather arbitrarily selected cases. 6.1 Performance Characteristics The Intel Paragon is a distributed memory MIMD parallel mesh connected machine. We simulated 450,560 particles using 4, 8, 16 and 32 processors with a total of 2048 grid points. <p> The original code achieved very high efficiency rates during bench-marking tests of the advance and charge deposition stages <ref> [4] </ref> so we will not concentrate on this aspect of efficiency. In Table 2 the times given are from the start to the completion speed of the slowest processor, since the number of particles per processor varies over time.
Reference: [5] <author> J. V. W. Reynders. </author> <title> Object-Oriented Particle Simulation on Parallel Computers. </title> <booktitle> In 15th International Conference on the Numerical Simulation of Plasmas, </booktitle> <pages> pages 1B2 1-4, </pages> <institution> King of Prussia, Pennsylvania, 1994. Princetion University Plasma Physics Laboratory and U.S. Department of Energy Office of Fusion Research. </institution>
Reference-contexts: Classes that operate on particles with common and/or unique properties should also be introduced. Furthermore, objects of these classes should be integrated so that they can function together to perform specific operations. Various approaches have been presented regarding object oriented class design in plasma simulation <ref> [2, 5] </ref>. We discuss our design decisions in the following sections. The programs are organized into two major sections referred to as the initialization section and the loop section. The initialization section constructs tables, creates the initial particle distribution and performs the initial charge deposition.

References-found: 5

