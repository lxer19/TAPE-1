URL: http://www.csc.calpoly.edu/~gfisher/classes/205/doc/rsl-ref-man.ps
Refering-URL: http://www.csc.calpoly.edu/~gfisher/classes/205/doc/
Root-URL: http://www.csc.calpoly.edu
Abstract-found: 0
Intro-found: 1
Reference: [Goguen 88] <author> J. A. Goguen and T. N. Winkler, </author> <title> "Introducing OBJ3", </title> <type> SRI International Technical Report, </type> <address> Palo Alto, CA, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: To overcome the deficiencies of informal requirements languages, RSL has constructs for formal mathematical specification. These constructs are similar to those found in formal specification languages such as EHDM (Enhanced Hierarchical Development Methodology [Rushby 91]), Larch [Guttag 85], and OBJ3 <ref> [Goguen 88] </ref>. The formal features of RSL need not be used in all situations. A requirements specification can be constructed in a number of levels from informal, to semi-formal, to fully formal. Examples to follow will illustrate these levels.
Reference: [Greenspan 82] <author> S.J. Greenspan, J. Mylopoulos, and A Borgida, </author> <title> "Capturing More World Knowledge in the Requirements Specification", </title> <booktitle> Proceedings of the Sixth International Conference on Software Engineering, </booktitle> <year> 1982. </year>
Reference-contexts: A system can be comprised of a mixture of hardware, software, and human processing elements. RSL is a hybrid of features found in several popular requirements specification languages, such as SADT (Structured Analysis and Design Technique [Ross 77]), PSL (Problem Statement Language [Teichroew 77]), and RMF (Requirements Modeling Framework <ref> [Greenspan 82] </ref>). While languages such as these have useful features for structuring a specification, they generally lack formality. To overcome the deficiencies of informal requirements languages, RSL has constructs for formal mathematical specification.
Reference: [Gordon 85] <author> M. Gordon, </author> <title> "A Proof Generating System for Higher-Order Logic", </title> <institution> Univerity of Cambridge Computer Laboratory, </institution> <month> January </month> <year> 1987. </year>
Reference: [Guttag 85] <author> J. Guttag, J. J. Horning and J. M. Wing, </author> <title> "The Larch Family of Specification Languages", </title> <journal> IEEE Software, </journal> <month> May </month> <year> 1985. </year>
Reference-contexts: To overcome the deficiencies of informal requirements languages, RSL has constructs for formal mathematical specification. These constructs are similar to those found in formal specification languages such as EHDM (Enhanced Hierarchical Development Methodology [Rushby 91]), Larch <ref> [Guttag 85] </ref>, and OBJ3 [Goguen 88]. The formal features of RSL need not be used in all situations. A requirements specification can be constructed in a number of levels from informal, to semi-formal, to fully formal. Examples to follow will illustrate these levels.
Reference: [Ross 77] <author> D. T. Ross, </author> <title> "Structured Analysis (SA): A Language for Communicating Ideas", </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> January </month> <year> 1977. </year>
Reference-contexts: A system can be comprised of a mixture of hardware, software, and human processing elements. RSL is a hybrid of features found in several popular requirements specification languages, such as SADT (Structured Analysis and Design Technique <ref> [Ross 77] </ref>), PSL (Problem Statement Language [Teichroew 77]), and RMF (Requirements Modeling Framework [Greenspan 82]). While languages such as these have useful features for structuring a specification, they generally lack formality. To overcome the deficiencies of informal requirements languages, RSL has constructs for formal mathematical specification.
Reference: [Rushby 91] <author> J. Rushby, </author> <title> "The EHDM Reference Manual", </title> <type> SRI International Technical Report, </type> <address> Palo Alto, CA, </address> <year> 1991. </year> <title> 56 Section 8 For mal Specification Examples </title>
Reference-contexts: While languages such as these have useful features for structuring a specification, they generally lack formality. To overcome the deficiencies of informal requirements languages, RSL has constructs for formal mathematical specification. These constructs are similar to those found in formal specification languages such as EHDM (Enhanced Hierarchical Development Methodology <ref> [Rushby 91] </ref>), Larch [Guttag 85], and OBJ3 [Goguen 88]. The formal features of RSL need not be used in all situations. A requirements specification can be constructed in a number of levels from informal, to semi-formal, to fully formal. Examples to follow will illustrate these levels.
Reference: [Stroustrup 91] <author> B. Stroustrup, </author> <title> The C++ Programming Language, Second Edition, </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference: [Teichroew 77] <author> D. Teichroew and E. A. Hershey III, "PSL/PSA: </author> <title> A Computer-Aided Technique for Structured Documentation and Analysis of Information Processing Systems", </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> January </month> <year> 1977. </year>
Reference-contexts: A system can be comprised of a mixture of hardware, software, and human processing elements. RSL is a hybrid of features found in several popular requirements specification languages, such as SADT (Structured Analysis and Design Technique [Ross 77]), PSL (Problem Statement Language <ref> [Teichroew 77] </ref>), and RMF (Requirements Modeling Framework [Greenspan 82]). While languages such as these have useful features for structuring a specification, they generally lack formality. To overcome the deficiencies of informal requirements languages, RSL has constructs for formal mathematical specification.
Reference: [Wirth 85] <author> N. Wirth, </author> <title> Programming in Modula-2, Third Edition, </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Multiple Inheritance Multiple inheritance was supported in earlier versions of the RSL language, but has been discontinued in version 3.0. 5. Modules Entity definitions are packaged within modules. The syntax and semantics of RSL modules are similar to that of the Modula-2 programming language <ref> [Wirth 85] </ref>. The basic format of an RSL module is the following: module name ; [imports] [exports] [attribute-definitions ... ;] [entity definition; | formal definition; ] ... end name Module imports and exports optionally define inter-module name visibility.
References-found: 9

