URL: http://www.cs.purdue.edu/homes/fudos/distribution/conic_arcs.ps
Refering-URL: http://www.cs.purdue.edu/people/fudos/
Root-URL: http://www.cs.purdue.edu
Title: Constraint-Based Parametric Conics for CAD  
Author: Ioannis Fudos Christoph M. Hoffmann 
Address: West Lafayette, IN 47907-1398  
Affiliation: Department of Computer Science Purdue University  
Abstract: Report CSD 94-065 z February 1995 Abstract We describe how to construct conic blending arcs from constraints, using a unified rational parametric representation that combines the separate cases of blending parallel and nonparallel edges. The possible constraints are that the arc must have a given distance from a line, a point, or a circle, or else intersect a circle or a line at a prescribed angle. Our representation is easily converted into a rational B-spline with positive weights, and is therefore compatible with internal representations used by most solid modeling systems. Finally, we discuss how we integrated this work with an algebraic constraint solver.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Paula L. Beaty, Patrick A. Fitzhorn, and Gary J. Herron. </author> <title> Extensions in variational geometry that generate and modify object edges composed of rational Bezier curves. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 26(2) </volume> <pages> 98-107, </pages> <year> 1994. </year> <month> 18 </month>
Reference-contexts: A complete representation for any circular arc using rational B-splines is presented in [18] and [17]. In the same work they prove that one convex control polygon can define only one such conic arc. Finally, in <ref> [1] </ref>, regular rational Bezier curves are used for representing conic arcs and other free form edges. In this work, the degree of the appropriate parametrization is specified on a case by case basis. Dimensional geometric constraint solvers usually restrict the shape vocabulary to line segments and circular arcs. <p> Malraison [13] develops a technique for constraining a control net of a rational quadratic Bezier curve to be always an elliptical arc. No constraints may be imposed on the elliptical arc itself except at the end points. In <ref> [1] </ref>, a number of constraints are allowed between an edge, which is described by a classical rational Bezier parametrization of arbitrary degree, and other geometries. <p> Then, we construct a unified representation that that is capable of handling both cases. It is well-known that a rational quadratic Bezier curve is a conic arc. How 3 blending two segments and interpolating the origin. ever, when the denominator of the coordinate functions vanishes in the interval <ref> [0; 1] </ref>, the arc will contain points at infinity. <p> Below, we will exclude those arcs because they are unsuitable for applications. 2.1 Nonparallel Tangents A rational quadratic Bezier curve with nonparallel end tangents has the form: c (t) = w 0 (1 t) 2 + 2w 1 t (1 t) + w 2 t 2 ; t * <ref> [0; 1] </ref> Where C, and D are the end points of the arc and E is the intersection of the end tangents. <p> Then the rational Bezier form of the blending conic can be written c (t) = w 0 (1 t) 2 + w 2 t 2 ; t * <ref> [0; 1] </ref> (2) In [15], ~ v has been called a control point at infinity. <p> We will prove that the solution c (t), if it exists, is given by: c (t) = (1 t) 2 + 2wt (1 t) + t 2 ; t 2 <ref> [0; 1] </ref> (5) where W = Area (C; P; D) U q w = Area (C; P; D)( ~ v fi ~ u) q (6) and that the formula is valid whether the vectors ~ u and ~ v are linearly dependent or not. <p> Determining the Type of the Conic Arc By studying the singularities of the denominator of (5) (see e.g., [11]), we derive the following conclusions for the type of the conic arc c (t), t 2 <ref> [0; 1] </ref>: (i) w &gt; 1, is a hyperbolic arc. (ii) w = 1, is a parabolic arc. (iii) 1 &lt; w &lt; 1, is an elliptic arc. 2.4 Converting to a Rational B-spline No class of rational Bezier curves of any fixed degree is capable of representing all acceptable solutions <p> Let A and B be the intersection points (see Figure 3). It is well-known that a rational parametric curve can be considered to be the projection of a parametric space curve to a plane; e.g., [3]. Specifically, we take the Bezier space curve defined by <ref> [C; 1] </ref>, [W; w] and [D; 1], where w and W are as in (5). Its projection to the plane w = 1 is the original rational curve. <p> It is well-known that a rational parametric curve can be considered to be the projection of a parametric space curve to a plane; e.g., [3]. Specifically, we take the Bezier space curve defined by [C; 1], [W; w] and <ref> [D; 1] </ref>, where w and W are as in (5). Its projection to the plane w = 1 is the original rational curve. <p> Its projection to the plane w = 1 is the original rational curve. Using this formulation, a routine computation shows 8 parallel to CD. that the following rational B-spline represents the original conic arc exactly Control Points: [C, C + W , 1 + w Knot Vector: <ref> [0, 0, 1 , 1, 1] </ref> Weights: [1, 1 + w , 2 3 Constructions We present geometric and algebraic methods for constructing a blending arc that satisfies an additional geometric constraint with another geometric object. <p> Since the conic arc c (t) from D to B had to be extended, testing for this undesirable situation is more complicated than verifying that the parameter value corresponding to A is in the interval <ref> [0; 1] </ref>. Acknowledgements The helpful discussions with J. Peters are gratefully acknowledged. The authors also wish to thank the referees for their valuable comments.
Reference: [2] <author> W. Bouma, Ioannis Fudos, Christoph Hoffmann, Jiazhen Cai, and Robert Paige. </author> <title> A Geometric Constraint Solver. Computer Aided Design, </title> <note> To appear, 1994. Also available through Mosaic, http://www.cs.purdue.edu/people/fudos. </note>
Reference-contexts: Therefore, it is highly desirable to use representations and constructions that are capable of handling both parallel and intersecting segments uniformly. Such representations, moreover, can be expected to increase the robustness of the system. Current commercial CAD/CAM systems allow constraint-based profile sketching. Algebraic constructive constraint solvers (see for example, <ref> [14, 2] </ref>) are among the fastest algorithms for solving the resulting system of geometric constraints. Furthermore, such solvers have the capability of efficiently solving the problem of root identification (see [2, 6] and Section 4), and dealing with under-constrained or overconstrained instances of the geometric constraint problem. <p> Current commercial CAD/CAM systems allow constraint-based profile sketching. Algebraic constructive constraint solvers (see for example, [14, 2]) are among the fastest algorithms for solving the resulting system of geometric constraints. Furthermore, such solvers have the capability of efficiently solving the problem of root identification (see <ref> [2, 6] </ref> and Section 4), and dealing with under-constrained or overconstrained instances of the geometric constraint problem. <p> Again, the computations are valid for both parallel and nonparallel segments. * This work has been integrated into a constructive constraint solver that supports points, lines and circles <ref> [2, 6, 7] </ref>, thus increasing the design vocabulary available to CAD users. Our representation is converted easily into a two-piece rational quadratic B-spline with positive weights, and is therefore compatible with internal representations used by most solid modeling systems. <p> In Section 3, we give algebraic algorithms for constructing a blending arc which is constrained to a given line, point or circle by a distance, tangency or angle constraint. Finally, in Section 4, we discuss how our method has been integrated with our graph-constructive, variational constraint solver <ref> [2] </ref>. 2 A Uniform Representation for Conics We develop a uniform rational Bezier representation for a conic arc that blends two segments at the end points and interpolates a third point. We first review the nonparallel [3] and the parallel [16] cases separately. <p> Thus, the fairness constraint of [9] can be reduced to a constraint computation. 4 Integration with a Geometric Constraint Solver We have incorporated conic arcs into a geometric constraint solver <ref> [2] </ref>. The constraint solving algorithm works in two phases: (i) A constraint graph is analyzed by a reduction process that produces a sequence of constructions. <p> However, if another solution is needed, an interactive tool described in <ref> [2] </ref> can be used to select it. The combination of these requirements entails special rules for analyzing the constraint problem in Phase 1 of our constraint solving algorithm, and we now explain them. <p> That is, the arc is merged as a rigid body into a rigid configuration of geometric elements. The constraint graph initially has vertices corresponding to all geometric elements, including the conic arc itself. Phase 1 proceeds as in <ref> [2] </ref> except that conic arc nodes and the constraints on them are ignored. Whenever a cluster (i.e. a rigid set of geometries which is formally defined in [6]) is formed that contains geometric elements with five constraints to a conic arc c (t), the construction of c (t) is attempted.
Reference: [3] <author> Gerald E. Farin. </author> <title> Curves and surfaces for computer aided geometric design: a practical guide. </title> <publisher> Academic Press, </publisher> <year> 1993. </year> <note> ISBN: 0122490525. </note>
Reference-contexts: A rational quadratic Bezier formula for the nonparallel case is presented in <ref> [3] </ref>. In [16], Piegl proposes "infinite" control points which can be used to handle parallel end tangents [15]. In [3], Farin derives a solution for finding a conic arc that blends two given segments and is tangent to a third line. 2 He assumes nonparallel segments. <p> A rational quadratic Bezier formula for the nonparallel case is presented in <ref> [3] </ref>. In [16], Piegl proposes "infinite" control points which can be used to handle parallel end tangents [15]. In [3], Farin derives a solution for finding a conic arc that blends two given segments and is tangent to a third line. 2 He assumes nonparallel segments. A complete representation for any circular arc using rational B-splines is presented in [18] and [17]. <p> We first review the nonparallel <ref> [3] </ref> and the parallel [16] cases separately. Then, we construct a unified representation that that is capable of handling both cases. It is well-known that a rational quadratic Bezier curve is a conic arc. <p> The lines of the triangle partition the plane into several regions. each region. We write P = c (t P ) = t 0 C + t 1 E + t 2 D. By comparing coefficients (see <ref> [3] </ref>), we derive the implicit formula t 2 1 w 0 w 2 = 4w 2 1 t 0 t 2 . When t 0 and t 2 are positive and t 1 =(2 p t 0 t 2 ) &gt; 1, an acceptable solution is obtained. <p> Let A and B be the intersection points (see Figure 3). It is well-known that a rational parametric curve can be considered to be the projection of a parametric space curve to a plane; e.g., <ref> [3] </ref>. Specifically, we take the Bezier space curve defined by [C; 1], [W; w] and [D; 1], where w and W are as in (5). Its projection to the plane w = 1 is the original rational curve. <p> First, we will describe a geometric construction that derives P and then we shall prove its soundness. The construction for intersecting tangents is from <ref> [3] </ref>, and is shown in Figure 4 (left). For parallel tangents, the construction is illustrated in Figure 4 (right). <p> Here U is as before in Section (2.3). (i) Nonparallel tangents: The correctness of the construction uses Pascal's theorem; <ref> [3, 12] </ref>.
Reference: [4] <author> I. D. Faux and M. J. Pratt. </author> <title> Computational Geometry for Design and Manufacture. </title> <publisher> Ellis Horwood, </publisher> <address> Chichester, </address> <year> 1979. </year>
Reference-contexts: In prior work, an explicit parametric form for a conic arc that blends two segments and passes through a third point has been studied by Liming [12] and Faux and Pratt <ref> [4] </ref>, but the cases of parallel and nonparallel segments must be handled separately. A rational quadratic Bezier formula for the nonparallel case is presented in [3]. In [16], Piegl proposes "infinite" control points which can be used to handle parallel end tangents [15].
Reference: [5] <author> W. H. Frey and D. A. </author> <title> Field. Designing Bezier conic segments with monotone curvature. </title> <type> Technical Report GMR-7845, </type> <institution> General Motors Research Laboratories, </institution> <year> 1991. </year>
Reference-contexts: Some recent results on this problem are presented in [9] and in <ref> [5] </ref> for the case of a conic arc in Bezier form. In particular, [9] and [5] give a method that determines a w value that minimizes curvature extrema and maintains monotone curvature change along the arc. <p> Some recent results on this problem are presented in [9] and in <ref> [5] </ref> for the case of a conic arc in Bezier form. In particular, [9] and [5] give a method that determines a w value that minimizes curvature extrema and maintains monotone curvature change along the arc. When the sum of the angles formed by each tangent and the segment CD is larger than 2 , than there is no conic arc with monotone curvature.
Reference: [6] <author> I. Fudos and C. M. Hoffmann. </author> <title> Correctness Proof of a Geometric Constraint solver. </title> <journal> International Journal of Computational Geometry & Applications, </journal> <month> May </month> <year> 1995. </year> <note> Also available through Mosaic, http://www.cs.purdue.edu/people/fudos. </note>
Reference-contexts: Current commercial CAD/CAM systems allow constraint-based profile sketching. Algebraic constructive constraint solvers (see for example, [14, 2]) are among the fastest algorithms for solving the resulting system of geometric constraints. Furthermore, such solvers have the capability of efficiently solving the problem of root identification (see <ref> [2, 6] </ref> and Section 4), and dealing with under-constrained or overconstrained instances of the geometric constraint problem. <p> Again, the computations are valid for both parallel and nonparallel segments. * This work has been integrated into a constructive constraint solver that supports points, lines and circles <ref> [2, 6, 7] </ref>, thus increasing the design vocabulary available to CAD users. Our representation is converted easily into a two-piece rational quadratic B-spline with positive weights, and is therefore compatible with internal representations used by most solid modeling systems. <p> From the unit normal ~ n 0 = (n 0x ; n 0y ) of fl 0 and ff we determine the normal ~ n of fl: ~ n = (n 0x cos ff n 0y sin ff; n 0y cos ff + n 0x sin ff) See <ref> [6, 7] </ref> for the definition of a signed angle between oriented lines. The sign of fl depends only on fl 0 and ff, and is not related to the sign of the derivative of c. <p> The correctness of the algorithm for well-constrained configurations has been proved in <ref> [6] </ref>. In general, a conic arc can be determined from five constraints, but we require that four of them make the construction a Hermite problem. That is, there must be two end points and two end tangents to the conic arc. <p> When the geometric element constructed at some step of Phase 2 is a conic arc, we may have to choose among up to four distinct solutions (see e.g., Figure 6). The task of selecting the solution the user intended is called root identification or root selection (cf. <ref> [6, 7] </ref>). In the case of a conic arc this task is best performed by combining information such as the type of the arc (hyperbola, parabola or ellipse), the topological order, and the type of blending, in the sketch initially drafted by the user, to get a unique solution. <p> The constraint graph initially has vertices corresponding to all geometric elements, including the conic arc itself. Phase 1 proceeds as in [2] except that conic arc nodes and the constraints on them are ignored. Whenever a cluster (i.e. a rigid set of geometries which is formally defined in <ref> [6] </ref>) is formed that contains geometric elements with five constraints to a conic arc c (t), the construction of c (t) is attempted.
Reference: [7] <author> Ioannis Fudos. </author> <title> Editable Representations for 2D Geometric Design. </title> <type> Master's thesis, </type> <institution> Dept of Computer Sciences, Purdue University, </institution> <month> December </month> <year> 1993. </year> <note> Available through Mosaic, http://www.cs.purdue.edu/people/fudos. </note>
Reference-contexts: Again, the computations are valid for both parallel and nonparallel segments. * This work has been integrated into a constructive constraint solver that supports points, lines and circles <ref> [2, 6, 7] </ref>, thus increasing the design vocabulary available to CAD users. Our representation is converted easily into a two-piece rational quadratic B-spline with positive weights, and is therefore compatible with internal representations used by most solid modeling systems. <p> The authors mention that the solution derived by this method is sensitive to the initial positioning of geometric objects, making the problem of root selection hard to solve (see also, <ref> [7] </ref> for a discussion of the problem of root selection in geometric constraint solving). [8] considers the problem of conics that have C 2 contact with a plane curve, that is, tangency and curvature of the two curves agree at the contact point. <p> From the unit normal ~ n 0 = (n 0x ; n 0y ) of fl 0 and ff we determine the normal ~ n of fl: ~ n = (n 0x cos ff n 0y sin ff; n 0y cos ff + n 0x sin ff) See <ref> [6, 7] </ref> for the definition of a signed angle between oriented lines. The sign of fl depends only on fl 0 and ff, and is not related to the sign of the derivative of c. <p> When the geometric element constructed at some step of Phase 2 is a conic arc, we may have to choose among up to four distinct solutions (see e.g., Figure 6). The task of selecting the solution the user intended is called root identification or root selection (cf. <ref> [6, 7] </ref>). In the case of a conic arc this task is best performed by combining information such as the type of the arc (hyperbola, parabola or ellipse), the topological order, and the type of blending, in the sketch initially drafted by the user, to get a unique solution.
Reference: [8] <author> G. Geise and Th. Nestler. </author> <title> Bezier representation of conics of contact in the projective plane. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 11 </volume> <pages> 233-245, </pages> <year> 1994. </year>
Reference-contexts: The authors mention that the solution derived by this method is sensitive to the initial positioning of geometric objects, making the problem of root selection hard to solve (see also, [7] for a discussion of the problem of root selection in geometric constraint solving). <ref> [8] </ref> considers the problem of conics that have C 2 contact with a plane curve, that is, tangency and curvature of the two curves agree at the contact point. A representation for conics of contact is derived using rational quadratic Bezier curves.
Reference: [9] <author> T. N. T. Goodman. </author> <title> Curvature of Rational Quadratic Splines. </title> <editor> In P. J. Laurent, A. Le Mehaute, and L. L. Schumaker, editors, </editor> <booktitle> Curves and Surfaces in Geometric Design, </booktitle> <pages> pages 201-208. </pages> <editor> A K PETERS, </editor> <address> Wellesley, MA, </address> <year> 1994. </year>
Reference-contexts: Solution (a) is a hyperbolic arcs, while solutions (b)-(d) are elliptical arcs. 3.5 Fairness Constraints When there is no additional constraint imposed on the blending arc, the extra degree of freedom can be used to satisfy a 'fairness' criterion. Some recent results on this problem are presented in <ref> [9] </ref> and in [5] for the case of a conic arc in Bezier form. In particular, [9] and [5] give a method that determines a w value that minimizes curvature extrema and maintains monotone curvature change along the arc. <p> Some recent results on this problem are presented in <ref> [9] </ref> and in [5] for the case of a conic arc in Bezier form. In particular, [9] and [5] give a method that determines a w value that minimizes curvature extrema and maintains monotone curvature change along the arc. <p> When the sum of the angles formed by each tangent and the segment CD is larger than 2 , than there is no conic arc with monotone curvature. For smaller angles, Goodman <ref> [9] </ref> derives a value of w that guarantees monotonicity and minimizes curvature extrema. Since the arc's end tangents are not parallel, we can select, for example, P = c ( 1 2 ) as the third point, where c is given by (5) using W = w U . <p> Since the arc's end tangents are not parallel, we can select, for example, P = c ( 1 2 ) as the third point, where c is given by (5) using W = w U . Thus, the fairness constraint of <ref> [9] </ref> can be reduced to a constraint computation. 4 Integration with a Geometric Constraint Solver We have incorporated conic arcs into a geometric constraint solver [2]. The constraint solving algorithm works in two phases: (i) A constraint graph is analyzed by a reduction process that produces a sequence of constructions.
Reference: [10] <author> C. M. Hoffmann and J. Peters. </author> <title> Geometric Constraints for CAGD. </title> <booktitle> In Proceedings of the 3rd International Conference on Mathematical Methods for CAGD, </booktitle> <address> Ulvic, Norway, </address> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: A representation for conics of contact is derived using rational quadratic Bezier curves. Finally in <ref> [10] </ref>, Hoff-mann and Peters discuss how to construct a class of cubic Bezier curves from geometric constraints. The remainder of this paper is structured as follows. In Section 2, we specify our representation for a conic arc that is tangent to two given segments and passes through a given point.
Reference: [11] <author> Eugene T. Y. Lee. </author> <title> The rational bezier representation for conics. </title> <editor> In Ger-ald E. Farin, editor, </editor> <booktitle> Geometric Modeling: Algorithms and New Trends, </booktitle> <pages> pages 3-19. </pages> <publisher> SIAM, </publisher> <year> 1987. </year>
Reference-contexts: Determining the Type of the Conic Arc By studying the singularities of the denominator of (5) (see e.g., <ref> [11] </ref>), we derive the following conclusions for the type of the conic arc c (t), t 2 [0; 1]: (i) w &gt; 1, is a hyperbolic arc. (ii) w = 1, is a parabolic arc. (iii) 1 &lt; w &lt; 1, is an elliptic arc. 2.4 Converting to a Rational B-spline
Reference: [12] <author> Roy A. Liming. </author> <title> Mathematics for computer graphics. </title> <publisher> Fallbrook, CA : Aero Publishers, </publisher> <year> 1979. </year> <note> ISBN: 0816867518. </note>
Reference-contexts: In prior work, an explicit parametric form for a conic arc that blends two segments and passes through a third point has been studied by Liming <ref> [12] </ref> and Faux and Pratt [4], but the cases of parallel and nonparallel segments must be handled separately. A rational quadratic Bezier formula for the nonparallel case is presented in [3]. In [16], Piegl proposes "infinite" control points which can be used to handle parallel end tangents [15]. <p> Here U is as before in Section (2.3). (i) Nonparallel tangents: The correctness of the construction uses Pascal's theorem; <ref> [3, 12] </ref>.
Reference: [13] <author> Pierre J. Malraison. </author> <title> Constraining a Quadratic Rational Bezier to be an Elliptical Arc. </title> <booktitle> Presented in 3rd SIAM Conf. on Geom. Design., </booktitle> <year> 1994. </year>
Reference-contexts: Dimensional geometric constraint solvers usually restrict the shape vocabulary to line segments and circular arcs. There seems to be little published work that addresses the incorporation of more general geometric shape primitives. Malraison <ref> [13] </ref> develops a technique for constraining a control net of a rational quadratic Bezier curve to be always an elliptical arc. No constraints may be imposed on the elliptical arc itself except at the end points.
Reference: [14] <author> J. C. Owen. </author> <title> Algebraic Solution for Geometry from Dimensional Constraints. </title> <booktitle> In ACM Symp. Found. of Solid Modeling, </booktitle> <address> Austin, TX, </address> <pages> pages 397-407. </pages> <publisher> ACM, </publisher> <year> 1991. </year> <month> 19 </month>
Reference-contexts: Therefore, it is highly desirable to use representations and constructions that are capable of handling both parallel and intersecting segments uniformly. Such representations, moreover, can be expected to increase the robustness of the system. Current commercial CAD/CAM systems allow constraint-based profile sketching. Algebraic constructive constraint solvers (see for example, <ref> [14, 2] </ref>) are among the fastest algorithms for solving the resulting system of geometric constraints. Furthermore, such solvers have the capability of efficiently solving the problem of root identification (see [2, 6] and Section 4), and dealing with under-constrained or overconstrained instances of the geometric constraint problem.
Reference: [15] <author> L. Piegl. </author> <title> Interactive Data Interpolation by Rational Bezier Curves. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 45-58, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: A rational quadratic Bezier formula for the nonparallel case is presented in [3]. In [16], Piegl proposes "infinite" control points which can be used to handle parallel end tangents <ref> [15] </ref>. In [3], Farin derives a solution for finding a conic arc that blends two given segments and is tangent to a third line. 2 He assumes nonparallel segments. A complete representation for any circular arc using rational B-splines is presented in [18] and [17]. <p> Then the rational Bezier form of the blending conic can be written c (t) = w 0 (1 t) 2 + w 2 t 2 ; t * [0; 1] (2) In <ref> [15] </ref>, ~ v has been called a control point at infinity.
Reference: [16] <author> L. Piegl. </author> <title> On the use of infinite control points in CAGD. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 4 </volume> <pages> 155-166, </pages> <year> 1987. </year>
Reference-contexts: A rational quadratic Bezier formula for the nonparallel case is presented in [3]. In <ref> [16] </ref>, Piegl proposes "infinite" control points which can be used to handle parallel end tangents [15]. In [3], Farin derives a solution for finding a conic arc that blends two given segments and is tangent to a third line. 2 He assumes nonparallel segments. <p> We first review the nonparallel [3] and the parallel <ref> [16] </ref> cases separately. Then, we construct a unified representation that that is capable of handling both cases. It is well-known that a rational quadratic Bezier curve is a conic arc.
Reference: [17] <author> L. Piegl and W. Tiller. </author> <title> Curve and Surface Constructions Using Rational B-splines. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 19(9) </volume> <pages> 485-498, </pages> <year> 1987. </year>
Reference-contexts: In [3], Farin derives a solution for finding a conic arc that blends two given segments and is tangent to a third line. 2 He assumes nonparallel segments. A complete representation for any circular arc using rational B-splines is presented in [18] and <ref> [17] </ref>. In the same work they prove that one convex control polygon can define only one such conic arc. Finally, in [1], regular rational Bezier curves are used for representing conic arcs and other free form edges.

References-found: 17

