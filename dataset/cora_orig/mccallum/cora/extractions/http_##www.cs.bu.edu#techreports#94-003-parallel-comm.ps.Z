URL: http://www.cs.bu.edu/techreports/94-003-parallel-comm.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: heddaya@cs.bu.edu  park@cs.bu.edu  
Title: Mapping Parallel Iterative Algorithms onto Workstation Networks  
Author: Abdelsalam Heddaya 
Note: To appear in Proc. HPDC-3 (3rd Int.'l Symp. on High Performance Computing), San Francisco,  
Date: February 7, 1994 (Revised May 19, 1994)  Aug. 2-5, 1994.  
Address: Park  
Affiliation: Kihong  
Pubnum: BU-CS-94-003  
Abstract: For communication-intensive parallel applications, the maximum degree of concurrency achievable is limited by the communication throughput made available by the network. In previous work [HPS94], we showed experimentally that the performance of certain parallel applications running on a workstation network can be improved significantly if a congestion control protocol is used to enhance network performance. In this paper, we characterize and analyze the communication requirements of a large class of supercomputing applications that fall under the category of fixed-point problems, amenable to solution by parallel iterative methods. This results in a set of interface and architectural features sufficient for the efficient implementation of the applications over a large-scale distributed system. In particular, we propose a direct link between the application and network layer, supporting congestion control actions at both ends. This in turn enhances the system's responsiveness to network congestion, improving performance. Measurements are given showing the efficacy of our scheme to support large-scale parallel computations. fl This research was supported in part by NSF under grants IRI-8910195, IRI-9041581 and CDA-8920936.
Abstract-found: 1
Intro-found: 1
Reference: [Bau78] <author> Gerard M. Baudet. </author> <title> Asynchronous iterative methods for multiprocessors. </title> <journal> Journal of the Association of Computing Machinery, </journal> <volume> 25(2) </volume> <pages> 226-244, </pages> <year> 1978. </year>
Reference-contexts: The methods of attack are not always uniform, some requiring only local interaction among processing elements whereas others are inherently global in nature. A large subclass of such applications falls under the category of fixed point problems, a class that is amenable to parallel iterative methods, synchronous or asynchronous <ref> [Bau78, BT89] </ref>. These include dynamic programming, systems of linear equations, network flow problems, genetic algorithms, and ordinary differential equations, just to name a few. This paper deals with the issue of how to map such applications to large-scale workstation clusters linked by local or wide area networks. <p> As with classical iteration methods such as Jacobi and Gauss-Seidel [Mar82], convergence may not be guaranteed, and when both converge, the asynchronous iterative method often converges faster than the synchronous one. For a comparative analysis of these two methods, see <ref> [Bau78, BT89] </ref>. Nevertheless, a large class of problems have been proven to be amenable to solution by asynchronous iterative methods [BT89]. The importance of asynchronous methods lies in the elimination of the synchronization penalty which can be very high in large-scale implementations. <p> An asynchronous iterative algorithm to solve the above equation is given by the fixed-point iteration x i = a ii i1 X a ij x j + j=i+1 With a suitable bound on the spectral radius of A, this iteration can be shown to converge when run asynchronously <ref> [Bau78, BT89] </ref>.
Reference: [BCS90] <author> K. Bala, I. Cidon, and K. Sohraby. </author> <title> Congestion control for high speed packet switched networks. </title> <booktitle> In Proc. IEEE INFOCOM '90, </booktitle> <pages> pages 520-526, </pages> <year> 1990. </year>
Reference-contexts: Congestion control in heterogenous, high-speed networks is a difficult problem aggravated by the high propagation delay-bandwidth product and the different characteristics of multi-media traffic <ref> [BCS90, DMR91, Eck92, Par93] </ref>. One of the advantages of asynchronous iterative algorithms is that they do not require reliable message transmission.
Reference: [Bir93] <author> Kenneth P. Birman. </author> <title> The process group approach to reliable distributed computing. </title> <journal> Comm. ACM, </journal> <volume> 36(12) 37-53 and 103, </volume> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: The slow write and read operations capture the first two design requirements: asynchronous send and receive, and unreliable transmission. There exist two versions of Mermera that incorporate the beforementioned design features. The first version is built on top of version 2.2.5 of the Isis toolkit <ref> [Bir93] </ref> of multicast protocols that support different message ordering properties. That version of Isis employs point-to-point messages for multicasting. The second version of Mermera was redesigned to replace Isis with a communication interface based on UDP.
Reference: [BT89] <author> Dimitri P. Bertsekas and John N. Tsitsiklis. </author> <title> Parallel and distributed computation: numerical methods. </title> <publisher> Prentice-Hall, </publisher> <year> 1989. </year>
Reference-contexts: The methods of attack are not always uniform, some requiring only local interaction among processing elements whereas others are inherently global in nature. A large subclass of such applications falls under the category of fixed point problems, a class that is amenable to parallel iterative methods, synchronous or asynchronous <ref> [Bau78, BT89] </ref>. These include dynamic programming, systems of linear equations, network flow problems, genetic algorithms, and ordinary differential equations, just to name a few. This paper deals with the issue of how to map such applications to large-scale workstation clusters linked by local or wide area networks. <p> As with classical iteration methods such as Jacobi and Gauss-Seidel [Mar82], convergence may not be guaranteed, and when both converge, the asynchronous iterative method often converges faster than the synchronous one. For a comparative analysis of these two methods, see <ref> [Bau78, BT89] </ref>. Nevertheless, a large class of problems have been proven to be amenable to solution by asynchronous iterative methods [BT89]. The importance of asynchronous methods lies in the elimination of the synchronization penalty which can be very high in large-scale implementations. <p> For a comparative analysis of these two methods, see [Bau78, BT89]. Nevertheless, a large class of problems have been proven to be amenable to solution by asynchronous iterative methods <ref> [BT89] </ref>. The importance of asynchronous methods lies in the elimination of the synchronization penalty which can be very high in large-scale implementations. This enables them to execute more iterations, resulting in faster convergence. <p> This enables them to execute more iterations, resulting in faster convergence. It is not always the case that executing more updates based on outdated information is beneficial to convergence, but under certain conditions, it can be shown that this is indeed the case <ref> [BT89] </ref>. The main drawback of asynchronous iterative methods over their synchronous counterpart lies in the increase in message transmission rate. For applications with high communication/computation ratios running on large-scale workstation clusters with shared network resources, this can overload the network, resulting in severe communication delays. <p> An asynchronous iterative algorithm to solve the above equation is given by the fixed-point iteration x i = a ii i1 X a ij x j + j=i+1 With a suitable bound on the spectral radius of A, this iteration can be shown to converge when run asynchronously <ref> [Bau78, BT89] </ref>.
Reference: [CR92] <author> Alex Cheung and Anthony Reeves. </author> <title> High performance computing on a cluster of workstations. </title> <booktitle> In Proc. First International Symp. on High-Performance Distributed Computing, </booktitle> <pages> pages 152-160, </pages> <year> 1992. </year>
Reference-contexts: This paper deals with the issue of how to map such applications to large-scale workstation clusters linked by local or wide area networks. In particular, we concentrate on asynchronous iterative methods that admit non-blocking, unreliable communication that can can be exploited to yield fast convergence. Performance studies on LAN-based <ref> [CS93, CR92, PHMF92] </ref> and WAN-based systems [Str93] have shown the importance of controlling network delay for improving application performance. This is even more pronounced for parallel iterative algorithms since their communication/computation ratio tends to be relatively high, leading to the flooding of network resources if not managed properly.
Reference: [CS93] <author> Clemens Cap and Volker Strumpen. </author> <title> Efficient parallel computing in distributed workstation environments. </title> <journal> Parallel Computing, </journal> <volume> 19 </volume> <pages> 1221-1234, </pages> <year> 1993. </year>
Reference-contexts: This paper deals with the issue of how to map such applications to large-scale workstation clusters linked by local or wide area networks. In particular, we concentrate on asynchronous iterative methods that admit non-blocking, unreliable communication that can can be exploited to yield fast convergence. Performance studies on LAN-based <ref> [CS93, CR92, PHMF92] </ref> and WAN-based systems [Str93] have shown the importance of controlling network delay for improving application performance. This is even more pronounced for parallel iterative algorithms since their communication/computation ratio tends to be relatively high, leading to the flooding of network resources if not managed properly.
Reference: [DMR91] <author> R. Dighe, C. J. May, and G. Ramamurthy. </author> <title> Congestion avoidance strategies in broadband packet networks. </title> <booktitle> In Proc. IEEE INFOCOM '91, </booktitle> <pages> pages 295-303, </pages> <year> 1991. </year>
Reference-contexts: Congestion control in heterogenous, high-speed networks is a difficult problem aggravated by the high propagation delay-bandwidth product and the different characteristics of multi-media traffic <ref> [BCS90, DMR91, Eck92, Par93] </ref>. One of the advantages of asynchronous iterative algorithms is that they do not require reliable message transmission.
Reference: [Eck92] <author> A. E. Eckberg. </author> <title> B-ISDN/ATM traffic and congestion control. </title> <journal> IEEE Network, </journal> <pages> pages 28-37, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Congestion control in heterogenous, high-speed networks is a difficult problem aggravated by the high propagation delay-bandwidth product and the different characteristics of multi-media traffic <ref> [BCS90, DMR91, Eck92, Par93] </ref>. One of the advantages of asynchronous iterative algorithms is that they do not require reliable message transmission.
Reference: [HA90] <author> P.W. Hutto and M. Ahamad. </author> <title> Slow memory: weakening consistency to enhance con-currency in distributed shared memories. </title> <booktitle> In Proc. 10th IEEE Intl. Conference on Distributed Computing Systems, </booktitle> <address> Paris, France, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: Several types of memory behavior are supported, one coherent (equivalent to sequential consistency), and two non-coherent: Pipelined Random Access Memory [LS88], and Slow Memory <ref> [HA90] </ref>. Mermera provides a read operation and three types of write operations: co write, pram write, and slow write, the last of which is the one used by the linear equation solver during most of its computation.
Reference: [Haa90] <author> Zygmunt Haas. </author> <title> A communication architecture for high-speed networking. </title> <booktitle> In Proc. IEEE INFOCOM '90, </booktitle> <pages> pages 433-441, </pages> <year> 1990. </year>
Reference-contexts: It is easily incorporable into existing distributed computing environments. In the context of B-ISDN systems, several papers have addressed inefficiencies associated with the overhead incurred by current network protocols <ref> [Haa90, PHMF92, PS91] </ref>. One feature of our design, the conditional send (or c-send), establishes a direct link between network layer congestion control and application layer send, by making information about the network state available to the application. <p> Unreliable transmission. (E:g:, UDP.) 7 3. Congestion control. It must be sophisticated enough to enable the network to maintain a sustained service rate close to its effective capacity. 4. Conditional send (c send). In the same spirit as reducing the distance between application layer and communication layer <ref> [Haa90] </ref>. Traditional message passing systems often provide an asynchronous, unreliable communication interface, and recently shared memory systems have begun supporting similar behavior [HS93]. We propose a new conditional send communication primitive which we call c send.
Reference: [HPS94] <author> A. Heddaya, K. Park, and H. Sinha. </author> <title> Using warp to control network contention in Mermera. </title> <booktitle> In Proc. 27th Hawaii International Conference on System Sciences, Maui, Hawaii, </booktitle> <pages> pages 96-105, </pages> <year> 1994. </year>
Reference-contexts: The retransmission cost of this class of traffic remains negligible due to the tolerance of message loss. The positive effect of congestion control for solving systems of linear equations across an Ethernet LAN has been demonstrated in <ref> [HPS94] </ref>. In this paper, we formalize and extend the results to an implementation-independent platform, applicable to both shared-memory and message passing distributed systems. We propose a generic design, represented as a set of protocol requirements, sufficient for the efficient implementation of parallel iterative algorithms. <p> This relieves communication-intenstive applications from having to worry about network issues. In the absence of operating system support for congestion control, implementation even at the applications layer can yield noticeable performance gains <ref> [HPS94] </ref>. We argue that the decision not to send a message on a congested network should be made as high as possible in the system software architecture, i:e:, as close as possible to the point of an application's request to send. <p> Two, by effectively increasing C u =M and C r =M , faster convergence and more efficient use of network bandwidth is achieved. 5 Implementation and experiments In this section, we describe experiments of an implementation on a shared-memory environment called Mermera <ref> [HPS94, HS93] </ref>. All four design features (non-blocking send/receive, unreliable transmission, congestion control, and conditional send) were incorporated.
Reference: [HS93] <author> Abdelsalam Heddaya and Himanshu S. Sinha. </author> <title> An overview of mermera: a system and formalism for non-coherent distributed parallel memory. </title> <booktitle> In Proc. 26th Hawaii International Conference on System Sciences, Maui, Hawaii, </booktitle> <pages> pages 164-173, </pages> <year> 1993. </year> <month> 14 </month>
Reference-contexts: Conditional send (c send). In the same spirit as reducing the distance between application layer and communication layer [Haa90]. Traditional message passing systems often provide an asynchronous, unreliable communication interface, and recently shared memory systems have begun supporting similar behavior <ref> [HS93] </ref>. We propose a new conditional send communication primitive which we call c send. It is a send that has access to information about the network state, and if the network is congested, it degenerates into a null operation. <p> Two, by effectively increasing C u =M and C r =M , faster convergence and more efficient use of network bandwidth is achieved. 5 Implementation and experiments In this section, we describe experiments of an implementation on a shared-memory environment called Mermera <ref> [HPS94, HS93] </ref>. All four design features (non-blocking send/receive, unreliable transmission, congestion control, and conditional send) were incorporated. <p> All four design features (non-blocking send/receive, unreliable transmission, congestion control, and conditional send) were incorporated. The congestion algorithm employed is Warp Control [Par93], and the application being tested was the linear equation solver described earlier. 5.1 Mermera Mermera <ref> [HS93] </ref> is a software shared memory system that provides a general-purpose environment for parallel computing on workstation networks. Processes comprising a parallel program reside on a specified group of nodes, and they communicate with each other via shared-memory read/write calls 8 provided by Mermera.
Reference: [LS88] <author> R.J. Lipton and J.S. Sandberg. </author> <title> PRAM: a scalable shared memory. </title> <type> Technical Report CS-TR-180-88, </type> <institution> Princeton Univ., Dept. of Computer Science, </institution> <month> Sep. </month> <year> 1988. </year>
Reference-contexts: Processes comprising a parallel program reside on a specified group of nodes, and they communicate with each other via shared-memory read/write calls 8 provided by Mermera. Several types of memory behavior are supported, one coherent (equivalent to sequential consistency), and two non-coherent: Pipelined Random Access Memory <ref> [LS88] </ref>, and Slow Memory [HA90]. Mermera provides a read operation and three types of write operations: co write, pram write, and slow write, the last of which is the one used by the linear equation solver during most of its computation.
Reference: [Mar82] <author> Melvin J. Maron. </author> <title> Numerical Analysis: A Practical Approach. </title> <publisher> Macmillan, </publisher> <year> 1982. </year>
Reference-contexts: Otherwise, it is said to define an asynchronous iterative algorithm for solving fixed-point problem F . The iteration of F behaves differently under synchronous and asynchronous methods. As with classical iteration methods such as Jacobi and Gauss-Seidel <ref> [Mar82] </ref>, convergence may not be guaranteed, and when both converge, the asynchronous iterative method often converges faster than the synchronous one. For a comparative analysis of these two methods, see [Bau78, BT89].
Reference: [MS91] <author> A. Mukherjee and J. Strikwerda. </author> <title> Analysis of dynamic congestion control protocols a Fokker-Planck approximation. </title> <booktitle> In Proc. ACM SIGCOMM '91, </booktitle> <pages> pages 159-169, </pages> <year> 1991. </year>
Reference-contexts: worlds? That is, increase n without paying a high communication penalty? The main penalties in the case of &lt; stem from queueing delays and network congestion, the latter defined as a decrease in effective throughput, i:e:, a drop in , caused by tying up network resources in an unproductive way <ref> [MS91, RD90] </ref>. This in turn aggravates queueing delays and triggers a positive feedback loop that worsens congestion. Congestion manifests itself in a decrease in C R , hence increasing i and establishing a positive feedback loop.
Reference: [Par93] <author> Kihong Park. </author> <title> Warp control: a dynamically stable congestion protocol and its analysis. </title> <journal> Journal of High Speed Networks, </journal> <volume> 2(4) </volume> <pages> 373-404, </pages> <year> 1993. </year>
Reference-contexts: Congestion control in heterogenous, high-speed networks is a difficult problem aggravated by the high propagation delay-bandwidth product and the different characteristics of multi-media traffic <ref> [BCS90, DMR91, Eck92, Par93] </ref>. One of the advantages of asynchronous iterative algorithms is that they do not require reliable message transmission. <p> Congestion manifests itself in a decrease in C R , hence increasing i and establishing a positive feedback loop. That is, congestion ) # ) C r # ) " ) congestion " A congestion control algorithm may be viewed as trying to achieve two things <ref> [Par93] </ref>: 1. Rate matching, defined as (t) (t), where (t) and (t) are viewed as functions of time. 2. Load matching, a sufficient condition for long-term rate matching, where load is defined as the number of messages in transit. <p> So, the goal is to keep Q Q fl . A distributed, end-to-end congestion control algorithm that captures the above aspects is Warp Control <ref> [Par93] </ref>, and it is used in our experiments. The ideal place for congestion control to reside is at the network layer in the ISO-OSI reference model, and at the ATM adaptation layer (AAL) in the B-ISDN protocol model. This relieves communication-intenstive applications from having to worry about network issues. <p> All four design features (non-blocking send/receive, unreliable transmission, congestion control, and conditional send) were incorporated. The congestion algorithm employed is Warp Control <ref> [Par93] </ref>, and the application being tested was the linear equation solver described earlier. 5.1 Mermera Mermera [HS93] is a software shared memory system that provides a general-purpose environment for parallel computing on workstation networks. <p> It also enabled us to exploit Ethernet's hardware broadcast capability through UDP, thus reducing network contention. The data reported here is based on the first implementation using Isis, primarily because network contention can be made more severe due to the lack of broadcasting. 5.2 Warp Control Warp Control <ref> [Par93] </ref> is a distributed, end-to-end congestion protocol that uses a time-stamp based scheme to throttle arrival rates for achieving optimal network utilization. Let N be the network characterized by two quantities, its service rate and its load Q. <p> It can be shown under certain assumptions on N that the quantity warp as used in MDP approx imates network utilization <ref> [Par93] </ref>. Rate matching is achieved by the following control: d i = *(1 warp); where * is a parameter that governs the rate of change. This is called the rate adjustment protocol (RAP). <p> Thus, if the network delay is high, then the rate constant has to be small to keep the system stable. For a detailed analysis and treatment of other related issues such as load matching and fairness, see <ref> [Par93] </ref>. 5.3 Experiments We conducted our measurements on a network of six dedicated Sun Sparc 1+ workstations and a server, connected by a private 10 Mbit Ethernet, and running SunOS version 4.1.1.
Reference: [PHMF92] <author> M. Parashar, S. Hariri, A. Mohamed, and G. Fox. </author> <title> A requirement analysis for high performance distributed computing over LAN's. </title> <booktitle> In Proc. First International Symp. on High-Performance Distributed Computing, </booktitle> <pages> pages 142-151, </pages> <year> 1992. </year>
Reference-contexts: This paper deals with the issue of how to map such applications to large-scale workstation clusters linked by local or wide area networks. In particular, we concentrate on asynchronous iterative methods that admit non-blocking, unreliable communication that can can be exploited to yield fast convergence. Performance studies on LAN-based <ref> [CS93, CR92, PHMF92] </ref> and WAN-based systems [Str93] have shown the importance of controlling network delay for improving application performance. This is even more pronounced for parallel iterative algorithms since their communication/computation ratio tends to be relatively high, leading to the flooding of network resources if not managed properly. <p> It is easily incorporable into existing distributed computing environments. In the context of B-ISDN systems, several papers have addressed inefficiencies associated with the overhead incurred by current network protocols <ref> [Haa90, PHMF92, PS91] </ref>. One feature of our design, the conditional send (or c-send), establishes a direct link between network layer congestion control and application layer send, by making information about the network state available to the application.
Reference: [PS91] <author> Thomas La Porta and Mischa Schwartz. </author> <title> Architectures, features, and implementation of high-speed transport protocols. </title> <journal> IEEE Network Magazine, </journal> <pages> pages 14-22, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: It is easily incorporable into existing distributed computing environments. In the context of B-ISDN systems, several papers have addressed inefficiencies associated with the overhead incurred by current network protocols <ref> [Haa90, PHMF92, PS91] </ref>. One feature of our design, the conditional send (or c-send), establishes a direct link between network layer congestion control and application layer send, by making information about the network state available to the application.
Reference: [RD90] <author> G. Ramamurthy and R. S. Dighe. </author> <title> Distributed source control: a network access approach to integrated broadband packet networks. </title> <booktitle> In Proc. IEEE INFOCOM '90, </booktitle> <pages> pages 896-907, </pages> <year> 1990. </year>
Reference-contexts: worlds? That is, increase n without paying a high communication penalty? The main penalties in the case of &lt; stem from queueing delays and network congestion, the latter defined as a decrease in effective throughput, i:e:, a drop in , caused by tying up network resources in an unproductive way <ref> [MS91, RD90] </ref>. This in turn aggravates queueing delays and triggers a positive feedback loop that worsens congestion. Congestion manifests itself in a decrease in C R , hence increasing i and establishing a positive feedback loop.
Reference: [Str93] <author> Volker Strumpen. </author> <title> Parallel molecular sequence analysis on workstations in the Internet. </title> <type> Technical Report 93.28, </type> <institution> Department of Computer Science, University of Zurich, </institution> <year> 1993. </year>
Reference-contexts: In particular, we concentrate on asynchronous iterative methods that admit non-blocking, unreliable communication that can can be exploited to yield fast convergence. Performance studies on LAN-based [CS93, CR92, PHMF92] and WAN-based systems <ref> [Str93] </ref> have shown the importance of controlling network delay for improving application performance. This is even more pronounced for parallel iterative algorithms since their communication/computation ratio tends to be relatively high, leading to the flooding of network resources if not managed properly.
Reference: [WAMG92] <author> Marek Wernik, Osama Aboul-Magd, and Henry Gilbert. </author> <title> Traffic management for B-ISDN services. </title> <journal> IEEE Network, </journal> <pages> pages 10-19, </pages> <month> September </month> <year> 1992. </year> <month> 15 </month>
Reference-contexts: One of the advantages of asynchronous iterative algorithms is that they do not require reliable message transmission. Therefore, they need not have access to reserved, connection-oriented channels advocated for delay sensitive ATM traffic <ref> [WAMG92] </ref>. 1 Instead they can use the variable bit rate channels subject to statistical multiplexing. As such, the actual service rate available to the application distributed across a LAN/WAN is a dynamically changing variable, very much like how it is today.
References-found: 21

