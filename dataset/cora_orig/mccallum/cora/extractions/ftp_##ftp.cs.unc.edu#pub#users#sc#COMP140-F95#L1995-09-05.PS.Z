URL: ftp://ftp.cs.unc.edu/pub/users/sc/COMP140-F95/L1995-09-05.PS.Z
Refering-URL: http://www.cs.unc.edu/~sc/teaching/COMP140-F1995/lectures.html
Root-URL: http://www.cs.unc.edu
Title: COMP 140: Introduction to Translator Systems Lexical Analysis (Lecture 1 of 3) 1. Explain the
Author: Siddhartha Chatterjee William M. Waite and Lynn R. Carter, Harper Collins, John E. Hopcroft and Jeffrey D. Ullman, 
Note: 1 Goals for this units On completing this unit, you should be able to do the following.  such as Turing--. 1.1 References 1. Dragon Book, xx3.1-3.4, 3.6, 3.7. 2. An Introduction to Compiler Construction, by  Addison Wesley, 1979. Chapter 2. The diagram on the following page is the concept map for this unit.  
Date: 5 September 1995  1993. Chapter 3.  
Abstract-found: 0
Intro-found: 0
Reference: 1. <author> Dragon Book, xx3.1-3.4, 3.6, </author> <month> 3.7. </month>
Reference: 2. <author> An Introduction to Compiler Construction, by William M. Waite and Lynn R. Carter, Harper Collins, </author> <year> 1993. </year> <note> Chapter 3. </note>

Reference: 1. <author> Simplicity of design. </author> <title> The separation of the two phases typically makes the parser easier to build. For instance, it is far easier to remove whitespace and comments in the lexer than in the parser. </title>
Reference: 2. <author> Better compiler efficiency. </author> <title> The lexer is the only portion of the compiler that deals with the input text character by character. A typical program has 5-10 times as many characters as tokens. Although the algorithms for lexical analysis are not particularly complicated, this phase can be a performance bottleneck in the compiler. When implemented as its own module, the lexer can use specialized buffer management techniques and efficient algorithms to speed up overall compiler performance. </title>

Reference: 1. <institution> A = L U is the set of uppercase and lowercase letters. </institution>
Reference: 2. <institution> AD is the set of strings containing a letter followed by a digit. </institution>
Reference: 3. <institution> U 3 D 2 L is the set of strings consisting of three uppercase letters followed by two digits followed by a lowercase letter. </institution>
Reference: 4. <institution> A fl is the set of all alphabetic strings, including the empty string </institution> *. 
Reference: 5. <institution> D + is the set of all strings of one or more digits, i.e., natural numbers. </institution>

Reference: 3. <institution> For each a in , a is a regular expression denoting the set fag. </institution>
Reference: 4. <editor> If r and s are regular expressions denoting the languages R and S, </editor> <title> then: (a) rjs (also sometimes written r + s) is a regular expression and denotes the language R S (b) rs is a regular expression denoting the language RS. (c) r fl is a regular expression denoting the language R fl . (d) r + is a regular expression denoting the language R + . (e) (r) is a regular expression denoting the language R. </title>
Reference: 5. <editor> Nothing else is a regular expression. </editor> <title> Example 3 Let = f0; 1g. </title>
Reference: 1. <institution> The regular expression 00 denotes the language f00g. </institution>
Reference: 2. <institution> The regular expression (0j1) fl denotes all strings of 0s and 1s. </institution> <note> It is also commonly written as fl </note> . 
Reference: 3. <institution> The regular expression (0j1) fl 00(0j1) fl denotes all strings containing at least two consecutive 0s. </institution>
Reference: 4. <institution> The regular expression (1j10) fl denotes all strings beginning with 1 and not having consecutive 0s. </institution>

References-found: 16

