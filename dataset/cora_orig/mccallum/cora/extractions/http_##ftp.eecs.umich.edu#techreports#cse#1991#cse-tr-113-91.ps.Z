URL: http://ftp.eecs.umich.edu/techreports/cse/1991/cse-tr-113-91.ps.Z
Refering-URL: http://ftp.eecs.umich.edu/techreports/cse/1991/
Root-URL: http://www.eecs.umich.edu
Title: Blending Hierarchical and Attribute-Based File Naming  
Author: Stuart Sechrest and Michael McClennen 
Date: October 1991  
Address: Ann Arbor, Michigan 48109-2122fl USA  
Affiliation: THE UNIVERSITY OF MICHIGAN Computer Science and Engineering Divisionfl Department of Electrical Engineering and Computer Sciencefl  
Abstract-found: 0
Intro-found: 1
Reference: [1] <institution> 4.3 Berkeley Software Distribution, Berkeley, California. </institution> <note> UNIX User's Reference Manual, </note> <month> April </month> <year> 1986. </year>
Reference-contexts: The attribute space is relatively unstructured, because installers are presumed to be experts, and client programs are presumed to describe their desired services generically. A variety of systems seek to circumvent limitations of file naming by providing tools for searching the contents of files. The UNIX system <ref> [1] </ref>, for example, offers the grep utility. Browsing utilities for personal computer systems such as Magellan [9], On Location [14], and the Digital Librarian [13] offer key-word based access to files.
Reference: [2] <author> M. Bowman, L. Peterson, and A. Yeatts. Univers: </author> <title> An attribute-based name sever. </title> <journal> Software-Practice and Experience, </journal> <volume> 20(4) </volume> <pages> 403-424, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Under these systems, users may define their own hierarchies from a selection of file trees exported by various servers. Naming need not be based on graph traversal. Attribute-based naming has been examined as a mechanism for resource location and discovery for large distributed systems <ref> [16, 2, 17] </ref>. In most such systems, attributes are chosen from a flat space, and are presumed to be more or less orthogonal. The attribute space is relatively unstructured, because installers are presumed to be experts, and client programs are presumed to describe their desired services generically. <p> Flat attribute-based name spaces can be made to work with automatic generation of attribute values [7] or when restricted to a limited domain <ref> [4, 16, 2] </ref>, but are difficult for most users to manipulate directly. A traditional hierarchical name space provides structure, but the limitations inherent in this scheme often prevent exactly the sort of organization that is wanted. Neither of these schemes are completely suited to the task of file naming.
Reference: [3] <author> L. F. Cabrera and J. Wyllie. </author> <title> QuickSilver distributed file services: An architecture for horizontal growth. </title> <booktitle> In Proceedings of the 2nd IEEE Conference on Computer Workstations, </booktitle> <pages> pages 23-27, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: The sheer size of such systems have caused some file systems to provide mechanisms for creating hierarchies containing only small subsets of the accessible files. Systems such as QuickSilver <ref> [3] </ref> and Tilde [5] seek to provide flexibility to file system users by allowing them to define their own name spaces. Under these systems, users may define their own hierarchies from a selection of file trees exported by various servers. Naming need not be based on graph traversal.
Reference: [4] <author> CCITT. </author> <title> The Directory-Overview of Concepts, Models and Services, </title> <address> recommendation x.500 edition, </address> <year> 1988. </year>
Reference-contexts: Name services have also been proposed that mix hierarchical structure with a flat space of properties, such as the X.500 directory service <ref> [4] </ref>. As in Mogul's property list file system, X.500 names identify objects in a tree and then select among them on the basis of property values. Neufeld [11] erases the distinction between hierarchical and non-hierarchical properties, allowing elision and rearrangement of name components. <p> Flat attribute-based name spaces can be made to work with automatic generation of attribute values [7] or when restricted to a limited domain <ref> [4, 16, 2] </ref>, but are difficult for most users to manipulate directly. A traditional hierarchical name space provides structure, but the limitations inherent in this scheme often prevent exactly the sort of organization that is wanted. Neither of these schemes are completely suited to the task of file naming.
Reference: [5] <author> Douglas Comer and Thomas P. Murtagh. </author> <title> The Tilde file naming scheme. </title> <booktitle> In Proceedings of the 6th International Conference on Distribute Computing Systems, </booktitle> <pages> pages 184-189, </pages> <address> Cambridge, Mass. (USA), </address> <month> May </month> <year> 1986. </year> <booktitle> IEEE Computer Society, </booktitle> <address> New York (USA). </address>
Reference-contexts: The sheer size of such systems have caused some file systems to provide mechanisms for creating hierarchies containing only small subsets of the accessible files. Systems such as QuickSilver [3] and Tilde <ref> [5] </ref> seek to provide flexibility to file system users by allowing them to define their own name spaces. Under these systems, users may define their own hierarchies from a selection of file trees exported by various servers. Naming need not be based on graph traversal.
Reference: [6] <author> R. C. Daley and P. G. Neumann. </author> <title> A general purpose file system for secondary storage. </title> <booktitle> In Proc. AFIPS Fall Joint Computer Conference, </booktitle> <pages> pages 213-229, </pages> <year> 1965. </year>
Reference-contexts: Hierarchical data models were adopted by early database systems and hierarchical directory structures have provided, by and large, the organizational framework for file systems since MULTICS <ref> [6] </ref>. Hierarchical, tree-structured directory schemes were originally devised to organize files on isolated machines with limited secondary storage. With the advent of networking and inter-operability they have proved adaptable to much larger, distributed file systems.
Reference: [7] <author> David K. Gifford, Pierre Jouvelot, Mark A. Sheldon, and James W. O'Toole, Jr. </author> <title> Semantic file systems. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 16-25, </pages> <address> Pacific Grove CA (USA), </address> <month> October </month> <year> 1991. </year> <note> ACM. </note>
Reference-contexts: The properties form a flat space orthog 3 onal to the hierarchy. Queries can be performed by applying a selection predicate to the property lists associated with the files in a directory, a subtree, or an entire file system. The Semantic File System <ref> [7] </ref> provides much the same structure, but mixes hierarchical name components with properties which appear as "virtual directories." Both of these systems provide increased flexibility over strictly hierarchical naming, but they force each file characteristic to be represented either as part of a hierarchy or in a completely flat name space. <p> Prospero [12] allows the attachment of a filter program to a link, that is invoked whenever the link is crossed during name interpretation. This filter program can alter the interpretation of the remainder of the name. The Semantic File System <ref> [7] </ref> uses "transducer" programs operating on file contents to automatically adjust the contents of virtual directories. Each of the schemes described in this section attacks an area in which hierarchical naming is perceived to be inadequate. None is in itself a complete solution. <p> Flat attribute-based name spaces can be made to work with automatic generation of attribute values <ref> [7] </ref> or when restricted to a limited domain [4, 16, 2], but are difficult for most users to manipulate directly. A traditional hierarchical name space provides structure, but the limitations inherent in this scheme often prevent exactly the sort of organization that is wanted.
Reference: [8] <author> John H Howard, Michael L Kazar, Sherri G Menees, David Nichols, M. Satyanaranan, Robert N. Sidebotham, and Michael J. West. </author> <title> Scale and performance in a distributed file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-81, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: 8 presents our conclusions. 2 A B D F H I L M O E S D F P C M 2 Related Work Most work in file system naming in recent years has focused on the extension of hierarchical file naming schemes to cover large distributed file systems (e.g. <ref> [8, 15] </ref>). The sheer size of such systems have caused some file systems to provide mechanisms for creating hierarchies containing only small subsets of the accessible files.
Reference: [9] <institution> Lotus Corporation, Cambridge, Massachussetts. Lotus Magellan: </institution> <note> Quick Launch. </note>
Reference-contexts: A variety of systems seek to circumvent limitations of file naming by providing tools for searching the contents of files. The UNIX system [1], for example, offers the grep utility. Browsing utilities for personal computer systems such as Magellan <ref> [9] </ref>, On Location [14], and the Digital Librarian [13] offer key-word based access to files. Facilities of this type are limited in their ability to deal with nontextual information and, because they lie outside the naming mechanism, are difficult to integrate with the operating system and with other programs.
Reference: [10] <author> J. C. Mogul. </author> <title> Representing information about files. </title> <type> Report No. </type> <institution> STAN-CS-86-1103, Department of Computer Scince, Stanford University, Stanford, California, </institution> <month> March </month> <year> 1986. </year>
Reference-contexts: New naming models incorporating elements of attribute based naming have been developed for several file systems. Mogul <ref> [10] </ref> proposed extending hierarchical file name spaces to include support for "properties." In this scheme, a file has an unambiguous hierarchical path name as well as a set of name/value pairs. The properties form a flat space orthog 3 onal to the hierarchy. <p> i-shields P and M F i-shields E and F L i-shields L, M, and F B o-shields E, F, L, M, and P Implicit value rules: E, L, and P are implicitly negated 5.2 A Hierarchical Space Decorated with Properties structure can be used to produce semantics similar to Mogul's <ref> [10] </ref>. While Mogul's property lists form a separate name space from the hierarchical structure, these properties are an integral part of the name space. Each has an explicit context, produced by outer and inner shielding rules. These attributes do not shield anything else, and are not implicitly negated.
Reference: [11] <author> Gerald W. Neufeld. </author> <title> Descriptive names in X.500. </title> <booktitle> In SIGCOMM '89 Symposium, Communications Architectures and Protocols, </booktitle> <pages> pages 64-71, </pages> <address> Austin, Texas, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: Name services have also been proposed that mix hierarchical structure with a flat space of properties, such as the X.500 directory service [4]. As in Mogul's property list file system, X.500 names identify objects in a tree and then select among them on the basis of property values. Neufeld <ref> [11] </ref> erases the distinction between hierarchical and non-hierarchical properties, allowing elision and rearrangement of name components. Searches are bounded by constraints placed on the assignment of attributes. Two recent proposals have put forward the concept of dynamic adjustment of the name space.
Reference: [12] <author> B. Clifford. Neuman. </author> <title> The virtual system model for large distributed operating systems. </title> <type> Technical Report 89-01-07, </type> <institution> Dept. of Computer Science, University of Washington, </institution> <address> Seattle, Wash., </address> <month> April </month> <year> 1989. </year>
Reference-contexts: Neufeld [11] erases the distinction between hierarchical and non-hierarchical properties, allowing elision and rearrangement of name components. Searches are bounded by constraints placed on the assignment of attributes. Two recent proposals have put forward the concept of dynamic adjustment of the name space. Prospero <ref> [12] </ref> allows the attachment of a filter program to a link, that is invoked whenever the link is crossed during name interpretation. This filter program can alter the interpretation of the remainder of the name.
Reference: [13] <institution> NeXT Corporation, Palo Alto, California. </institution> <note> 1.0 release notes: indexing, 1989. 17 </note>
Reference-contexts: A variety of systems seek to circumvent limitations of file naming by providing tools for searching the contents of files. The UNIX system [1], for example, offers the grep utility. Browsing utilities for personal computer systems such as Magellan [9], On Location [14], and the Digital Librarian <ref> [13] </ref> offer key-word based access to files. Facilities of this type are limited in their ability to deal with nontextual information and, because they lie outside the naming mechanism, are difficult to integrate with the operating system and with other programs.
Reference: [14] <institution> ON Technology, Inc, </institution> <address> Cambridge, Massachussetts. </address> <note> On Location. </note>
Reference-contexts: A variety of systems seek to circumvent limitations of file naming by providing tools for searching the contents of files. The UNIX system [1], for example, offers the grep utility. Browsing utilities for personal computer systems such as Magellan [9], On Location <ref> [14] </ref>, and the Digital Librarian [13] offer key-word based access to files. Facilities of this type are limited in their ability to deal with nontextual information and, because they lie outside the naming mechanism, are difficult to integrate with the operating system and with other programs.
Reference: [15] <author> John K. Ousterhout, Andrew R. Chrenson, Frederick Douglis, Michael N. Nelson, and Brent B. Welch. </author> <title> The Sprite network operating system. </title> <journal> IEEE Computer, </journal> <volume> 28(2) </volume> <pages> 23-36, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: 8 presents our conclusions. 2 A B D F H I L M O E S D F P C M 2 Related Work Most work in file system naming in recent years has focused on the extension of hierarchical file naming schemes to cover large distributed file systems (e.g. <ref> [8, 15] </ref>). The sheer size of such systems have caused some file systems to provide mechanisms for creating hierarchies containing only small subsets of the accessible files.
Reference: [16] <author> L. L. Peterson. </author> <title> The Profile naming service. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(4) </volume> <pages> 341-364, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: Under these systems, users may define their own hierarchies from a selection of file trees exported by various servers. Naming need not be based on graph traversal. Attribute-based naming has been examined as a mechanism for resource location and discovery for large distributed systems <ref> [16, 2, 17] </ref>. In most such systems, attributes are chosen from a flat space, and are presumed to be more or less orthogonal. The attribute space is relatively unstructured, because installers are presumed to be experts, and client programs are presumed to describe their desired services generically. <p> Flat attribute-based name spaces can be made to work with automatic generation of attribute values [7] or when restricted to a limited domain <ref> [4, 16, 2] </ref>, but are difficult for most users to manipulate directly. A traditional hierarchical name space provides structure, but the limitations inherent in this scheme often prevent exactly the sort of organization that is wanted. Neither of these schemes are completely suited to the task of file naming.
Reference: [17] <author> Michael F. Schwartz. </author> <title> The networked resource discovery project. </title> <booktitle> In Proceedings of the IFIP XI World Congress, </booktitle> <pages> pages 827-832. </pages> <publisher> IFIP, </publisher> <month> August </month> <year> 1989. </year> <month> 18 </month>
Reference-contexts: Under these systems, users may define their own hierarchies from a selection of file trees exported by various servers. Naming need not be based on graph traversal. Attribute-based naming has been examined as a mechanism for resource location and discovery for large distributed systems <ref> [16, 2, 17] </ref>. In most such systems, attributes are chosen from a flat space, and are presumed to be more or less orthogonal. The attribute space is relatively unstructured, because installers are presumed to be experts, and client programs are presumed to describe their desired services generically.
References-found: 17

