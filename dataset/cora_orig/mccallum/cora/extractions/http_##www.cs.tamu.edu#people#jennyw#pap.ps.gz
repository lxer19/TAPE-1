URL: http://www.cs.tamu.edu/people/jennyw/pap.ps.gz
Refering-URL: http://www.cs.tamu.edu/people/jennyw/
Root-URL: http://www.cs.tamu.edu
Email: jennyw@cs.tamu.edu  welch@cs.tamu.edu  
Title: Hazard-Free Connection Release  
Author: Jennifer E. Walter Jennifer L. Welch 
Address: College Station, TX 77843-3112  College Station, TX 77843-3112  
Affiliation: Dept. of Computer Science Texas A M University  Dept. of Computer Science Texas A M University  
Abstract: Fault-tolerant communication in a distributed system requires reliable connection management and message delivery. Reliable connection management includes the guarantee of hazard-free release, in which no data is lost before the connection is terminated. Our work focusses on protocols in which the end nodes retain no connection-specific information between incarnations, operating over networks that deliver packets in order and which may or may not lose packets in transit. In this paper we present a formal model that encompasses the notion of hazard-free connection release. We show that providing a guarantee of hazard-free connection release incurs a penalty over non-hazard-free connection release in terms of message passing overhead if the network does not lose packets. If packet loss may occur, we show that there is no penalty for providing hazard-free connection release, since the connection management protocol must compensate for poorer network behavior.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Attiya, S. Dolev and J. Welch, </author> <title> "Connection Management Without Retaining Information," </title> <journal> Infor 24 mation and Computation, </journal> <volume> vol. 123, no. 2, </volume> <pages> pp. 155-171, </pages> <year> 1993. </year>
Reference-contexts: Several impossibility results have been proven for connection management protocols. These results focus on maintaining correctness under varying degrees of poor system behavior and serve to effectively eliminate certain scenarios from further consideration. It is shown in <ref> [1] </ref> that if no information is retained between incarnations and end nodes do not crash, correct incarnation management is possible on a network that delivers packets in order (a FIFO network) or on a non-FIFO, non-losing network and impossible on networks which are non-FIFO and losing. <p> Impossibility of correct incarnation management in the face of crashes is also considered in <ref> [1] </ref>, where it is shown that incarnation management is impossible when no information is retained across node crashes (i.e. no stable storage). Attiya and Rappoport [2] focus on the degree of handshake necessary to establish a connection in both asynchronous and synchronous message passing systems. <p> Among their results is a proof that incarnation management is impossible in a distributed system consisting of a non-FIFO, losing network and nodes with bounded memory. The results of <ref> [1] </ref> show that incarnation management is impossible on non-FIFO, losing networks which return to the same state between incarnations. The results of [2] show that incarnation management is impossible over any non-FIFO, losing network in which the nodes have bounded memory. <p> For all the results presented in this paper, it is assumed that no connection records are saved between incarnations, using the definition of amnesic protocols from <ref> [1] </ref>. It is further assumed that the network layer is connectionless, supports only primitives to send and receive, does no error checking or flow control, and produces no duplicate or corrupted packets. <p> Section 5 provides a discussion of the results and some avenues for future work. 2 DEFINITIONS 2.1 I/O Automata Model The asynchronous distributed system is modeled by I/O automata, introduced in [5]. The rest of the formalism used to describe the system is from <ref> [1] </ref>. As in these papers, each system component is modeled by an automaton, a state machine whose state transitions are labeled with actions. If there is a transition from a state labeled with an action, then that action is enabled in that state. <p> Both outputs represent the receipt of a packet. Following the discussion of packet duplication mentioned in <ref> [1] </ref>, the arbitrary delay and duplication of packets in the network is considered to be unrealistically pessimistic in some situations, and therefore duplicate packets are not considered in this network model. Correctness of the protocols of S and R is required only in cases where the network behaves properly. <p> (m 0 )), then Deliver (m) precedes Deliver (m 0 ). 1 Throughout this paper the following conventions hold for sequences of events in an execution: brackets mean optional, parentheses signify grouping, j gives alternatives, fl means repeat 0 or more times, and + means repeat 1 or more times <ref> [1] </ref>. 6 IM4 includes the requirement that no Dis from a previous incarnation can cause an existing incarnation to close, i.e., the protocol cannot issue disconnects at random. <p> A (possibly FIFO) incarnation management protocol is HF if IM6 is added to the list of IM properties in the above implication. An incarnation management protocol is NHF if IM6 is not added to the list of properties. As in <ref> [1] </ref>, the system modelled does not allow nodes to keep information between incarnations of a connection. Assume that S's state contains a queue of outgoing packets waiting to be sent to the network, and the same for R. <p> The symmetric nature of definitions 1 and 2 is necessary since the host at either S or R may request disconnect at any time. These definitions are similar to the definition of k-way handshake connection management protocols developed in [2]. The ping-pong scheduling discipline developed in <ref> [1] </ref>, in which every packet sent is received before the next packet is sent, is used in these definitions. <p> The penalty for guaranteeing HF release on non-FIFO networks will be examined to ascertain the cost incurred by such a guarantee. Since a transport protocol which relies on handshaking alone cannot ensure correct incarnation management on networks which are non-FIFO and losing <ref> [1] </ref>, message passing will not be the sole complexity measure examined on these more poorly behaved networks.
Reference: [2] <author> H. Attiya and R. Rappoport, </author> <title> "The Level of Handshake Required for Establishing a Connection," </title> <booktitle> The 8th Int'l Workshop on Distributed Algorithms, </booktitle> <pages> pp. 179-193, </pages> <year> 1994. </year>
Reference-contexts: Impossibility of correct incarnation management in the face of crashes is also considered in [1], where it is shown that incarnation management is impossible when no information is retained across node crashes (i.e. no stable storage). Attiya and Rappoport <ref> [2] </ref> focus on the degree of handshake necessary to establish a connection in both asynchronous and synchronous message passing systems. <p> The results of [1] show that incarnation management is impossible on non-FIFO, losing networks which return to the same state between incarnations. The results of <ref> [2] </ref> show that incarnation management is impossible over any non-FIFO, losing network in which the nodes have bounded memory. <p> The symmetric nature of definitions 1 and 2 is necessary since the host at either S or R may request disconnect at any time. These definitions are similar to the definition of k-way handshake connection management protocols developed in <ref> [2] </ref>. The ping-pong scheduling discipline developed in [1], in which every packet sent is received before the next packet is sent, is used in these definitions. <p> Connecting Req-Con SorR Con SorR [Dis-P end S ] Closing Closed Connected Req-Dis SorR Dis SorR Classify the states of S and R of execution ff in A as: connecting, connected, closing, and closed <ref> [2] </ref>.
Reference: [3] <author> E. W. Biersack and D. Feldmeier, </author> <title> "A Timer-Based Connection Management Protocol with Synchronized Clocks and its Verification," </title> <journal> Comp. Networks and ISDN Systems, </journal> <volume> vol. 25, </volume> <pages> pp. 1303-1319, </pages> <year> 1993. </year>
Reference-contexts: This investigation of hazard-free connection release was motivated by the work of several authors <ref> [3, 4, 6, 7] </ref>. Tanenbaum [6] discusses the problem of releasing a connection while avoiding data loss.
Reference: [4] <author> J. G. Fletcher and R. W. Watson, </author> <title> "Mechanisms for a Reliable Timer-Based Protocol," </title> <journal> Computer Networks, </journal> <volume> vol. 2, </volume> <pages> pp. 271-290, </pages> <year> 1978. </year>
Reference-contexts: This investigation of hazard-free connection release was motivated by the work of several authors <ref> [3, 4, 6, 7] </ref>. Tanenbaum [6] discusses the problem of releasing a connection while avoiding data loss.
Reference: [5] <author> N. Lynch and M. Tuttle, </author> <title> "An Introduction to Input/Output Automata," </title> <journal> CWI Quarterly, </journal> <volume> vol. 2, no. 3, </volume> <pages> pp. 219-246, </pages> <year> 1993. </year>
Reference-contexts: Sections 3 and 4 present the handshake requirements for FIFO, non-losing and FIFO, losing networks, respectively. Section 5 provides a discussion of the results and some avenues for future work. 2 DEFINITIONS 2.1 I/O Automata Model The asynchronous distributed system is modeled by I/O automata, introduced in <ref> [5] </ref>. The rest of the formalism used to describe the system is from [1]. As in these papers, each system component is modeled by an automaton, a state machine whose state transitions are labeled with actions.
Reference: [6] <author> A. Tanenbaum, </author> <title> Computer Networks. </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference-contexts: This investigation of hazard-free connection release was motivated by the work of several authors <ref> [3, 4, 6, 7] </ref>. Tanenbaum [6] discusses the problem of releasing a connection while avoiding data loss. <p> This investigation of hazard-free connection release was motivated by the work of several authors [3, 4, 6, 7]. Tanenbaum <ref> [6] </ref> discusses the problem of releasing a connection while avoiding data loss. He says that 1 an obvious way to handle connection release is to have each side of the connection wait until it is sure the other side received all the data sent before disconnecting. <p> Furthermore, providing this guarantee is no more costly on FIFO networks which experience packet loss than on FIFO networks which do not lose packets in transit. Therefore, the problem in providing HF connection release, which was originally raised by Tanenbaum <ref> [6] </ref> and which was discussed in chapter I, must arise when the network quality of service becomes worse than that offered by the networks examined in this paper, e.g. when the network is non-FIFO and losing.
Reference: [7] <author> R. W. Watson, </author> <title> "The Delta-t Transport Protocol: Features and Experience," </title> <booktitle> Proc. 14th IEEE Conf. on Local Computer Networks, </booktitle> <pages> pp. 399-407, </pages> <year> 1989 </year> <month> 25 </month>
Reference-contexts: This investigation of hazard-free connection release was motivated by the work of several authors <ref> [3, 4, 6, 7] </ref>. Tanenbaum [6] discusses the problem of releasing a connection while avoiding data loss.
References-found: 7

