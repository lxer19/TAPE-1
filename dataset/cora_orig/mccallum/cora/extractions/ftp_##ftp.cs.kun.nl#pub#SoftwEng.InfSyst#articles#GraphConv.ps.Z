URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/GraphConv.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Email: e-mail: socrates-info@serc.nl  
Phone: 2  3  
Title: Specification of Graphic Conventions in Methods  Specification of Graphic Conventions in Methods. In  
Author: A.H.M. ter Hofstede ; T.F. Verhoef ; E.R. Nieuwland G.M. Wijers A.H.M. ter Hofstede, T.F. Verhoef, E.R. Nieuwland, and G.M. Wijers. B. Theodoulidis and A. Sutcliffe, editors, 
Note: Published as:  Proceedings of the Third Workshop on the Next Generation of CASE Tools, pages 185-215,  
Date: May, 1992  May 1992.  
Address: P.O. Box 424, 3500 AK Utrecht, The Netherlands  Toernooiveld, 6525 ED Nijmegen, The Netherlands  P.O. Box 356, 2600 AJ Delft, The Netherlands  Manchester, United Kingdom,  
Affiliation: 1 Software Engineering Research Centre SERC  University of Nijmegen Department of Information Systems  Delft University of Technology Faculty of Technical Mathematics and Informatics Department of Information Systems  
Abstract: The current generation of CASE tools mainly provides rigid and unflexible support for editing, storage, verification and transformation of specifications. Information engineers have to adapt their way of working to CASE tools instead of vice versa. To enable a more flexible, method independent, support of information engineers, the concept of a CASE shell has emerged. Crucial for CASE shells is the specification of interpretable method knowledge. A technique capable of specifying method knowledge is referred to as a meta-modelling technique. In this paper it is stressed that a meta-modelling technique should also be able to represent graphic conventions in methods. An existing meta-modelling technique is extended with constructs for the representation of graphic knowledge.
Abstract-found: 1
Intro-found: 1
Reference: [AF88] <author> D.E. Avison and G. Fitzgerald. </author> <title> Information Systems Development: Methodologies, Techniques and Tools. </title> <publisher> Blackwell Scientific Publications, Oxford, </publisher> <address> United Kingdom, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction CASE tools are currently considered as the prime initiators of attempts to formalize and standardize information systems development methods in a more detailed way. It is believed that CASE tools are becoming the most important contributors to the continuing development in information systems development methods, see also <ref> [AF88] </ref> and [Bub88]. [Mar86] introduced engineering-like 1 methods, characterized by a coherent integrated set of techniques covering the complete devel-opment process. Such methods depend on the availability of automated tools, because of the required consistency between various specifications, which would be difficult to verify manually.
Reference: [AH87] <author> S. Abiteboul and R. Hull. </author> <title> IFO: A Formal Semantic Database Model. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(4) </volume> <pages> 525-565, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: For generalisation it typically is required that the generalised object type is covered by its constituent object types (or specifiers). Furthermore, properties are inherited "upward" in a generalisation hierarchy instead of "downward", which is the case for specialisation (see also <ref> [AH87] </ref>). This also implies that the identification of a generalised object type depends on the identification of its specifiers. Example 2.2 In figure 8 an example of generalisation is shown. A formula may be either a single variable, or constructed by some function (say f ) from simpler formulas.
Reference: [BBD + 89] <author> P. Bergsten, J.A. Bubenko, R. Dahl, M. Gustafsson, and L A. Johansson. </author> <title> RAMATIC a CASE shell for implementation of specific CASE tools. </title> <type> Technical report, </type> <institution> SISU, Stock-holm, Sweden, </institution> <year> 1989. </year> <note> First draft of a contribution to section 4.4 of the TEMPORA T6.1 report. 29 </note>
Reference-contexts: Results gradually emerging in this way during a modelling process are stored in the application base. The concept of a CASE shell is not new. Commercial products such as Toolbuilder of IPSYS Software and Virtual Software Factory of Systematica or academic products such as RAMATIC <ref> [BBD + 89] </ref>, claim to generate CASE tools tailored to specific methods and organisations. Even a tool that supports the modification of meta-models exists (MetaEdit [SLTM91]). However, all these shells focus on the support of modelling techniques and hardly pay attention to the modelling process.
Reference: [BHW91] <author> P. van Bommel, A.H.M. ter Hofstede, and Th.P. van der Weide. </author> <title> Semantics and Verifi--cation of Object-Role Models. </title> <journal> Information Systems, </journal> <volume> 16(5) </volume> <pages> 471-495, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: For proper specialisation, it is required that subtypes are defined in terms of one or more of their supertypes. Such a decision criterion is referred to as the Subtype Defining Rule (see e.g. <ref> [BHW91] </ref>). Specialisation relations are organised in so-called specialisation "hierarchies". The top of a special-isation hierarchy will be referred to as the pater familias. Identification of subtypes is derived from their supertypes, as object types inherit all properties from their ancestors in the specialisation hierarchy.
Reference: [BS87] <author> D. Benyon and S. Skidmore. </author> <title> Towards a Tool Kit for the Systems Analyst. </title> <journal> The Computer Journal, </journal> <volume> 30(1), </volume> <year> 1987. </year>
Reference-contexts: Guidelines on why and how to perform various tasks, and how to determine the specification's quality, are not part of automated tools. In <ref> [BS87] </ref> it is suggested that before using automated tools, the range of the required facilities should be thoroughly understood. They propose an environment (automated or not) supporting the practising information engineer in the use of suitable techniques, depending on the current situation.
Reference: [Bub86] <author> J.A. Bubenko. </author> <title> Information System Methodologies A Research View. </title> <editor> In T.W. Olle, H.G. Sol, and A.A. Verrijn-Stuart, editors, </editor> <booktitle> Information Systems Design Methodologies: Improving the Practice, </booktitle> <pages> pages 289-318. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1986. </year>
Reference-contexts: After a model had been constructed, it was specified by using an automated tool, and then verified. We suspect that this limited usage is largely due to the design of the tools not paying appropriate attention to the information engineer's modelling needs. <ref> [Bub86] </ref> and [Flo86] also endorse the view that automated tools support consistency in the development process, but identify the danger of computerizing unsuitable methods. Guidelines on why and how to perform various tasks, and how to determine the specification's quality, are not part of automated tools.
Reference: [Bub88] <author> J.A. Bubenko. </author> <title> Selecting a Strategy for Computer-Aided Software Engineering (CASE). </title> <type> Technical Report 59, </type> <institution> SYSLAB, University of Stockholm, Stockholm, Sweden, </institution> <year> 1988. </year>
Reference-contexts: It is believed that CASE tools are becoming the most important contributors to the continuing development in information systems development methods, see also [AF88] and <ref> [Bub88] </ref>. [Mar86] introduced engineering-like 1 methods, characterized by a coherent integrated set of techniques covering the complete devel-opment process. Such methods depend on the availability of automated tools, because of the required consistency between various specifications, which would be difficult to verify manually. <p> Explicit process knowledge within a CASE shell offers means normally referred to as methodology drivers, navigators or guides. Product knowledge defines the types of models, their interrelated components and their consistency rules required during information systems development. Both <ref> [Bub88] </ref> and [McC89] distinguish syntactical modelling language knowledge from expert based knowledge. It is important to note that there are such differences in product knowledge. Certain syntactically correct constructs are simply "not done".
Reference: [But87] <author> Butler Cox. </author> <title> Using System Development Knowledge. </title> <type> Technical Report 57, </type> <institution> Butler Cox Foundation, </institution> <address> London, England, </address> <year> 1987. </year>
Reference-contexts: Such methods depend on the availability of automated tools, because of the required consistency between various specifications, which would be difficult to verify manually. In <ref> [But87] </ref> and [You86], techniques such as entity-relationship diagrams, dataflow diagrams and structured English are described as tedious, time-consuming and even impractical, if not supported by automated tools. In this paper focus is on upper CASE tools. These tools are strongly product oriented, as confirmed by the study of [WD90].
Reference: [Che76] <author> P.P. Chen. </author> <title> The Entity-Relationship Model: Toward a Unified View of Data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference: [Flo86] <author> C. Floyd. </author> <title> A Comparative Evaluation of System Development Methods. </title> <editor> In T.W. Olle, H.G. Sol, and A.A. Verrijn-Stuart, editors, </editor> <booktitle> Information Systems Design Methodologies: Improving the Practice, </booktitle> <pages> pages 19-54. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1986. </year>
Reference-contexts: After a model had been constructed, it was specified by using an automated tool, and then verified. We suspect that this limited usage is largely due to the design of the tools not paying appropriate attention to the information engineer's modelling needs. [Bub86] and <ref> [Flo86] </ref> also endorse the view that automated tools support consistency in the development process, but identify the danger of computerizing unsuitable methods. Guidelines on why and how to perform various tasks, and how to determine the specification's quality, are not part of automated tools.
Reference: [HPW93] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Formal Definition of a Conceptual Language for the Description and Manipulation of Information Models. </title> <journal> Information Systems, </journal> <volume> 18(7), </volume> <year> 1993. </year>
Reference-contexts: The population of a power type for example, should be a subset of the power set of the population of its element type and the population of a generalised object type should be the union of the population of its specifiers. 2.8 Relationship descriptors In <ref> [HPW93] </ref> the language LISA-D has been introduced for the description and manipulation of populations at a high level of abstraction. Among others, LISA-D may be employed for the description of so-called derived relationship types. <p> Precisely the reverse is achieved by formulating Identification OF Entity. 8 2.9 Formal definition In this section a small part of the formal definition of PSM, needed in the following sections, is briefly presented. This definition is derived from <ref> [HW93, HPW93] </ref>. A complete formal treatment of PSM and LISA-D can be found in those papers. 2.9.1 Object structures An object structure I over a so-called label type set L, is a structure consisting of the following basic components: 1. A finite set P of roles. 2.
Reference: [HVWB90] <author> A.H.M. ter Hofstede, T.F. Verhoef, G.M. Wijers, and S. Brinkkemper. </author> <title> The SOCRATES project. </title> <editor> In S. Brinkkemper and G.M. Wijers, editors, </editor> <booktitle> Proceedings of the First Workshop on the Next Generation of CASE Tools, </booktitle> <address> Noordwijkerhout, The Nether-lands, </address> <month> April </month> <year> 1990. </year>
Reference-contexts: Only those aspects of a method which can be represented explicitly in meta-models are configurable for CASE tools. Within the SOCRATES project, see <ref> [HVWB90] </ref>, the repository of the CASE shell contains the components shown in figure 2. The information applicable at method level, i.e. the meta-model base, is distinguished here from the information stored at application level, i.e. the application base. We focus our discussion to the method level.
Reference: [HW92] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Formalisation of techniques: chopping down the methodology jungle. </title> <journal> Information and Software Technology, </journal> <volume> 34(1) </volume> <pages> 57-65, </pages> <month> Jan-uary </month> <year> 1992. </year>
Reference-contexts: In this paper extensions are presented to the meta-modelling technique making it possible to specify graphic knowledge concerning the product oriented component of a method. Extensive attention has been paid to establish a sound formal basis for these extensions. Motivations for this approach can be found in <ref> [HW92] </ref>. In figure 2 the subject of this paper is indicated in dark grey. First of all the concepts used to specify the conceptual product oriented part of a method will be presented.
Reference: [HW93] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Expressiveness in conceptual data mod-elling. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 10(1) </volume> <pages> 65-100, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: Section 5 contains conclusions and topics for further research. 2 Ob ject structures Object structures are used to model the concepts of a method and their relationships. Object structures are meta-models specified in the Predicator Set Modelling Technique, defined in <ref> [HW93] </ref>. The Predicator Set Modelling Technique (PSM) is a generalisation of the Predicator Model ([BHW91]) which in turn is a generalisation of object-role modelling techniques as e.g. NIAM ([NH89]) or ER ([Che76]). <p> Precisely the reverse is achieved by formulating Identification OF Entity. 8 2.9 Formal definition In this section a small part of the formal definition of PSM, needed in the following sections, is briefly presented. This definition is derived from <ref> [HW93, HPW93] </ref>. A complete formal treatment of PSM and LISA-D can be found in those papers. 2.9.1 Object structures An object structure I over a so-called label type set L, is a structure consisting of the following basic components: 1. A finite set P of roles. 2.
Reference: [Lev79] <author> A. Levy. </author> <title> Basic Set Theory. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1979. </year>
Reference: [Mar86] <author> J. Martin. </author> <title> Introduction to Information Engineering, </title> <booktitle> volume 1 of Information Engineering. Savant Research Studies, </booktitle> <address> Lancashire, United Kingdom, </address> <year> 1986. </year>
Reference-contexts: It is believed that CASE tools are becoming the most important contributors to the continuing development in information systems development methods, see also [AF88] and [Bub88]. <ref> [Mar86] </ref> introduced engineering-like 1 methods, characterized by a coherent integrated set of techniques covering the complete devel-opment process. Such methods depend on the availability of automated tools, because of the required consistency between various specifications, which would be difficult to verify manually.
Reference: [McC89] <author> C. McClure. </author> <title> CASE is Software Automation. </title> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year>
Reference-contexts: Explicit process knowledge within a CASE shell offers means normally referred to as methodology drivers, navigators or guides. Product knowledge defines the types of models, their interrelated components and their consistency rules required during information systems development. Both [Bub88] and <ref> [McC89] </ref> distinguish syntactical modelling language knowledge from expert based knowledge. It is important to note that there are such differences in product knowledge. Certain syntactically correct constructs are simply "not done".
Reference: [MM87] <author> D.A. Marca and C.L. McGowan. </author> <title> SADT Structured Analysis and Design Technique. </title> <publisher> McGraw-Hill, </publisher> <year> 1987. </year>
Reference-contexts: Each graphic object instance can have one or more handle instances. This possibility of more handle instances for a graphic object instance is important because some modelling techniques assign meaning to the graphic representation of attachments. In SADT <ref> [MM87] </ref> for example, the meaning of an arrow head depends on whether it is connected to the top or the bottom of a box. In the former case, the arrow head represents a control flow, in the latter case it represents a so-called mechanism.
Reference: [NH89] <author> G.M. Nijssen and T.A. Halpin. </author> <title> Conceptual Schema and Relational Database Design: a fact oriented approach. </title> <publisher> Prentice-Hall, </publisher> <address> Sydney, Australia, </address> <year> 1989. </year>
Reference: [SBL89] <author> A.G. Sutcliffe, W.J. Black, and P. Loucopoulos. </author> <title> System Specification Semantics: Defining the knowledge captured by structured system development methods in conceptual models. </title> <editor> In E.D. Falkenberg and P. Lindgreen, editors, </editor> <booktitle> Information Systems Concepts: an In-depth Analysis, </booktitle> <pages> pages 53-77, </pages> <address> Amsterdam, The Netherlands, 1989. </address> <publisher> North-Holland. </publisher> <pages> 30 </pages>
Reference-contexts: Another relevant distinction at method level concerns the differentation between conceptual and graphic knowledge. Models must evidently be represented in one way or another: diagrams, matrices, tables, lists, and program specifications are examples. A clear distinction should be made between the modelling concepts and their external notation. In <ref> [SBL89] </ref> it is argued that 3 some methods allow alternative equivalent notations for one and the same modelling concept, but that on the other hand similar graphical and textual topologies can represent different types of modelling concepts. A similar argumentation is valid for the process part of methods.
Reference: [Sch84] <editor> G. Scheschonk. Eine auf Petri-Netzen basierende Konstruktions, </editor> <title> Analyse und (Teil)- Verificationsmethode zur Modellierungsunterstutzung bei der Entwicklung von Informa-tionssystemen. </title> <type> PhD thesis, </type> <institution> Berlin University of Technology, </institution> <address> Berlin, Germany, </address> <year> 1984. </year> <note> (In German). </note>
Reference: [SLTM91] <author> K. Smolander, K. Lyytinen, V-P. Tahvanainen, and P. Marttiin. MetaEdit: </author> <title> A Flexible Graphical Environment for Methodology Modelling. </title> <editor> In R. Andersen, J.A. Bubenko, and A. Stlvberg, editors, </editor> <booktitle> Proceedings of the Third International Conference CAiSE'91 on Advanced Information Systems Engineering, volume 498 of Lecture Notes in Computer Science, </booktitle> <pages> pages 168-193, </pages> <address> Trondheim, Norway, May 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Commercial products such as Toolbuilder of IPSYS Software and Virtual Software Factory of Systematica or academic products such as RAMATIC [BBD + 89], claim to generate CASE tools tailored to specific methods and organisations. Even a tool that supports the modification of meta-models exists (MetaEdit <ref> [SLTM91] </ref>). However, all these shells focus on the support of modelling techniques and hardly pay attention to the modelling process. Furthermore, the degree of support of modelling techniques which they offer is limited, due to the expressive power of the meta-modelling technique used.
Reference: [VHW91] <author> T.F. Verhoef, A.H.M. ter Hofstede, and G.M. Wijers. </author> <title> Structuring modelling knowledge for CASE shells. </title> <editor> In R. Andersen, J.A. Bubenko, and A. Stlvberg, editors, </editor> <booktitle> Proceedings of the Third International Conference CAiSE'91 on Advanced Information Systems Engineering, volume 498 of Lecture Notes in Computer Science, </booktitle> <pages> pages 502-524, </pages> <address> Trondheim, Norway, May 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The information applicable at method level, i.e. the meta-model base, is distinguished here from the information stored at application level, i.e. the application base. We focus our discussion to the method level. At method level both process knowledge and product knowledge have to be distinguished, as described in <ref> [VHW91, Wij91] </ref>. Process knowledge encompasses the strategies which can be determined for the manner in which information systems are to be developed. Explicit process knowledge within a CASE shell offers means normally referred to as methodology drivers, navigators or guides.
Reference: [WD90] <author> G.M. Wijers and H.E. van Dort. </author> <title> Experiences with the use of CASE-tools in the Nether-lands. </title> <editor> In B. Steinholz, A. Stlvberg, and L. Bergman, editors, </editor> <booktitle> Proceedings of the Second Nordic Conference CAiSE'90 on Advanced Information Systems Engineering, </booktitle> <pages> pages 5-20, </pages> <address> Berlin, Germany, 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In [But87] and [You86], techniques such as entity-relationship diagrams, dataflow diagrams and structured English are described as tedious, time-consuming and even impractical, if not supported by automated tools. In this paper focus is on upper CASE tools. These tools are strongly product oriented, as confirmed by the study of <ref> [WD90] </ref>. This study among Dutch users of CASE tools concluded that these tools are mainly used for documentation and verification purposes. After a model had been constructed, it was specified by using an automated tool, and then verified.
Reference: [WHO92] <author> G.M. Wijers, A.H.M. ter Hofstede, and N.E. van Oosterom. </author> <title> Representation of Information Modelling Knowledge. </title> <editor> In V.-P. Tahvanainen and K. Lyytinen, editors, </editor> <title> Next Generation CASE Tools, </title> <booktitle> volume 3 of Studies in Computer and Communication Systems, </booktitle> <pages> pages 167 - 223. </pages> <publisher> IOS Press, </publisher> <year> 1992. </year>
Reference-contexts: In some way or another it has to be specified how models appear on the screen and how actions can be performed on these represented models. Furthermore the specification of graphic knowledge allows information engineers to change the user interface of tools to their own preferences. In <ref> [WHO92] </ref> a meta-modelling technique for the SOCRATES project has been presented in which both the process and product oriented conceptual aspects of a method could be specified together with its semantic implications at application level. <p> Further research is needed to incorporate knowledge about graphic manipulations in the meta-modelling technique. This knowledge should be related to the graphic structures presented in this paper on the one hand and to task structures (see e.g. <ref> [WHO92] </ref>) specifying process aspects of method knowledge on the other hand. Acknowledgements The authors would like to express their gratitude to Ernst Lippe for his contributive remarks.
Reference: [Wij91] <author> G.M. Wijers. </author> <title> Modelling Support in Information Systems Development. </title> <type> PhD thesis, </type> <institution> Delft University of Technology, Delft, </institution> <address> The Netherlands, </address> <year> 1991. </year>
Reference-contexts: The information applicable at method level, i.e. the meta-model base, is distinguished here from the information stored at application level, i.e. the application base. We focus our discussion to the method level. At method level both process knowledge and product knowledge have to be distinguished, as described in <ref> [VHW91, Wij91] </ref>. Process knowledge encompasses the strategies which can be determined for the manner in which information systems are to be developed. Explicit process knowledge within a CASE shell offers means normally referred to as methodology drivers, navigators or guides. <p> On the basis of this meta-modelling technique a prototype CASE shell has been implemented, see <ref> [Wij91] </ref>, which showed the interpretability of the meta-modelling technique. As the graphic aspects of a method could not be specified using this technique, the prototype had a textual interface.
Reference: [You86] <author> E. Yourdon. </author> <title> What ever happened to structured analysis. </title> <journal> Datamation, </journal> <pages> pages 133-138, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: Such methods depend on the availability of automated tools, because of the required consistency between various specifications, which would be difficult to verify manually. In [But87] and <ref> [You86] </ref>, techniques such as entity-relationship diagrams, dataflow diagrams and structured English are described as tedious, time-consuming and even impractical, if not supported by automated tools. In this paper focus is on upper CASE tools. These tools are strongly product oriented, as confirmed by the study of [WD90].
Reference: [You89] <author> E. Yourdon. </author> <title> Modern Structured Analysis. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year>
Reference-contexts: As an example of a schema type, the meta-model of Activity graphs ([Sch84]) is shown in figure 6. Activity graphs are bipartite directed graphs consisting of activities and states. States can be input and output for activities and can be compared to flows in DFDs (see e.g. <ref> [You89] </ref>). Both states and activities can be decomposed into other activity graphs. <p> These instances are always pairs and their components can be accessed with the functions first and last. 2.10 A sample meta-model: ERDs In this subsection, a meta-model, represented as an object structure, of ERDs is discussed. According to <ref> [You89] </ref>, an ERD is a network model that describes the stored data layout of a system at a high level of abstraction. 10 In figure 9 an example of an ERD according to [You89] is shown. In this diagram, Product, Sale, Supplier and Customer are Object types. <p> According to <ref> [You89] </ref>, an ERD is a network model that describes the stored data layout of a system at a high level of abstraction. 10 In figure 9 an example of an ERD according to [You89] is shown. In this diagram, Product, Sale, Supplier and Customer are Object types. The Object type Customer has as subtypes Regular Customer and Incidental Customer. The Object type Sale is an associative indicator of the Relationship between Customer and Product.
References-found: 28

