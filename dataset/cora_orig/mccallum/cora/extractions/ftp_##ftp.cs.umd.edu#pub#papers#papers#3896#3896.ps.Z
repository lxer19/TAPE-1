URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3896/3896.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: -fshull, basili-@cs.umd.edu  lanubile@di.uniba.it  
Phone: 2  
Title: Investigating Reading Techniques for Framework Learning  
Author: Forrest Shull Filippo Lanubile and Victor R. Basili 
Address: College Park, MD, USA  Via Orabona, 4 70126 Bari, Italia  
Affiliation: UMIACS.  1 Institute for Advanced Computer Studies Computer Science Department University of Maryland  Dipartimento di Informatica Universita' di Bari  
Note: This work was supported by NSF grant CCR9706151 and  
Abstract: The empirical study described in this paper addresses software reading for construction: how application developers obtain an understanding of a software artifact for use in new system development. This study focuses on the processes developers would engage in when learning and using objectoriented frameworks. We analyzed 15 student software development projects using both qualitative and quantitative methods to gain insight into what processes occurred during framework usage. The contribution of the study is not to test predefined hypotheses but to generate wellsupported hypotheses for further investigation. The main hypotheses we produce are that example-based techniques are well suited to use by beginning learners while hierarchy-based techniques are not because of a larger learning curve. Other more specific hypotheses are proposed and discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [Apple86] <institution> MacApp Programmers Guide . Apple Computer, </institution> <year> 1986. </year> <title> [Basili96a] "The Empirical Investigation of Perspective-Based Reading", </title> <editor> V. Basili, S . Green , O. Laitenberger , F. Lanubile, F. Shull, S. Soerumgaard, and M. </editor> <title> Zelkowitz, Empirical Software Engineering: </title> <journal> An International Journal , vol. </journal> <volume> 1, no. 2, </volume> <year> 1996. </year>
Reference-contexts: Patterns and recipes: Beck and Johnson [Johnson92, Beck94] advocate the use of patterns (interlocking descriptions of problem/solution pairs, similar to objectoriented design patterns [Gamma95] or cookbook recipes, e.g. <ref> [Apple86] </ref>) that describe a functionality supported by the framework, demonstrate how to implement the functionality, and discuss the impact of the implementation on the system) to describe frameworks.
Reference: [Basili96b] <author> V. Basili, G. Caldiera, F. Lanubile, and F. Shull. </author> <title> Studies on Reading Techniques. </title> <booktitle> In Proc. of the Twenty-First Annual Software Engineering Workshop , SEL-96- 002, </booktitle> <pages> pages 59-65, </pages> <address> Greenbelt, MD, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: We divide software reading activities into two distinct types: reading for analysis and reading for construction. Through our work in the Software Engineering Laboratory (SEL), we have evolved our understanding of reading for analysis, using a variety of experimental designs <ref> [Basili96a, Basili96b] </ref>. The experiment described in this technical report represents a further attempt to experiment with reading techniques in order to understand how widely applicable some of our conclusions from the earlier studies may be. <p> It is useful for maintenance as well as for building new systems from reusable components and architectures <ref> [Basili96b] </ref>. We chose to focus on the understanding of objectoriented frameworks as the artifact to be used in system development. An objectoriented framework is a class hierarchy augmented with a built-in model that defines how the objects derived from the hierarchy interact with one another to implement some functionality.
Reference: [Beck94] <author> K. Beck, R. Johnson. </author> <title> Patterns Generate Architectures. </title> <booktitle> In Proc. </booktitle> <address> ECOOP94 , Bologna, Italy, </address> <year> 1994. </year>
Reference-contexts: Patterns and recipes: Beck and Johnson <ref> [Johnson92, Beck94] </ref> advocate the use of patterns (interlocking descriptions of problem/solution pairs, similar to objectoriented design patterns [Gamma95] or cookbook recipes, e.g. [Apple86]) that describe a functionality supported by the framework, demonstrate how to implement the functionality, and discuss the impact of the implementation on the system) to describe frameworks.
Reference: [Brandt97] <author> D. S. Brandt. </author> <title> Constructivism: Teaching for Understanding of the Internet, </title> <journal> CACM , Vol. </journal> <volume> 40, No. 10, </volume> <month> October </month> <year> 1997, </year> <pages> pp. 112-117. </pages>
Reference-contexts: It has also been argued that learning by examples is wellsuited for domains where multiple organizational principles and irregularities in interaction exist <ref> [Brandt97] </ref>, which may be a fair assessment of the large hierarchy of classes in a framework. The framework we used in this study came with a set of examples at varying levels of 7 complexity that was constructed to demonstrate the important concepts of the framework.
Reference: [Carroll90] <author> J. Carroll. </author> <title> The Nurnberg Funnel: Designing Minimalist Instruction for Practical Computer Skill . MIT Press, </title> <year> 1990. </year>
Reference-contexts: for users to follow which will presumably guide users through the most important points of the framework. (Two examples are [Vlissides91] for Unidraw and [Frei91] for ET++.) An interesting example of work in this area is Rosson et al. s tutorial for learning Smalltalk [Rosson90] which applies Minimalist instruction techniques <ref> [Carroll90] </ref> and seems to corroborate the benefits that may result from a well-designed tutorial course (claiming to allow new users to develop code for interactive applications after only four hours). Like Johnson, Rosson undertakes some testing which is aimed not at testing hypotheses but at helping to debug the documentation.
Reference: [Chi87] <author> M. Chi, M. Bassok, M. Lewis, P. Reimann, and R. Glaser. Self-Explanations: </author> <title> How Students Study and Use Examples in Learning to Solve Problems. </title> <type> Technical Report UPITT/LRDC/ONR/KBC-9, </type> <institution> University of Pittsburgh, </institution> <year> 1987. </year>
Reference-contexts: Sets of example applications have been used to document some frameworks (the framework we used came with such a set) and the approach has been recommended for similar types of activities: such as learning effective techniques for problem solving <ref> [Chi87] </ref>, or learning how to write programs in a new programming language [Koltun83, Rosson90].
Reference: [Codenie97] <author> W. Codenie, K. DeHondt, P. Steyaert, A. Vercammen. </author> <title> From Custom Applications to DomainSpecific Frameworks, </title> <journal> CACM , Vol. </journal> <volume> 40, No. 10, </volume> <month> October </month> <year> 1997, </year> <pages> pp. 71-77. </pages>
Reference-contexts: Such an approach is not new, and has in fact proven useful in understanding how developers perform related tasks such as understanding code [vonMayrhauser95] or performing maintenance [Singer96]. Other authors <ref> [Codenie97] </ref> who have applied this approach to studying framework usage in industrial environments agree that, in most cases, framework customization will be more complex than just making modifications at a limited number of predefined spots.
Reference: [Conover80] <author> Conover, </author> <title> Practical Nonparametric Statistics, </title> <address> 2 nd Edition, NY: </address> <publisher> John Wiley & Sons, </publisher> <year> 1980. </year>
Reference-contexts: We identified 4 such key functionalities: links, dialog boxes, deletion, and multiple views. They illustrate 3 types of situations that may arise when functionality is being sought in examples: 1 We base our use of the chisquare test, rather than the adjusted chisquare test, on <ref> [Conover80] </ref>, which argues that the adjusted test tends to be overly conservative. 17 1. The examples dont provide all of the functionality desired. Key functionality 1 (links) fits into this category.
Reference: [Eisenhardt89] <author> K. Eisenhardt. </author> <title> Building Theories from Case Study Research, </title> <booktitle> Academy of Management Review , 14 (4), </booktitle> <year> 1989. </year> <month> 31 </month>
Reference-contexts: The process of building theories from empirical research has been first proposed in the social science literature <ref> [Glaser67, Eisenhardt89] </ref> but it is also followed in the software engineering discipline [Seaman97]. 7.1. Development Processes The analysis approach we used was primarily a mix of qualitative and quantitative, in order to understand in detail the development strategies our subjects undertook. <p> Although this is not a common method of analysis in computer science, it is a recommended approach for social sciences and other fields that require the analysis of human behavior <ref> [Eisenhardt89, Miles79] </ref>. It is well suited for our purposes here because our variables of interest are heavily influenced by human behavior and because we are not attempting to prove hypotheses about framework usage, but rather to begin formulating hypotheses about this process, about which we currently know little. <p> Although a case study cannot have the same internal validity as a controlled experiment, because the investigator has little control over events, there are analysis techniques that can strengthen the internal validity, even for exploratory studies like this. We made inferences using the qualitative analytic technique described in <ref> [Eisenhardt89] </ref>. It consists of performing a within-case analysis, to gain familiarity with each case and find emerging patterns, followed by cross-case analysis, to look for similarities and differences between cases. <p> Although this is not a common method of analysis in computer science, it is a recommended approach for social sciences and other fields that require the analysis of human behavior <ref> [Eisenhardt89, Miles79] </ref>. It is well suited for our purposes here because our variables of interest are heavily influenced by human behavior and because we are not attempting to prove hypotheses about framework usage, but rather to begin formulating hypotheses about this process, about which we currently know little.
Reference: [Frei91] <author> C. Frei and H. Schaudt. </author> <title> ET++ Tutorial : Eine Einfhrung in das Application Framework. </title> <booktitle> Software Schule Schweiz, </booktitle> <address> Bern, </address> <year> 1991. </year>
Reference-contexts: Tutorials: Other work has focused on tutorials created for users to follow which will presumably guide users through the most important points of the framework. (Two examples are [Vlissides91] for Unidraw and <ref> [Frei91] </ref> for ET++.) An interesting example of work in this area is Rosson et al. s tutorial for learning Smalltalk [Rosson90] which applies Minimalist instruction techniques [Carroll90] and seems to corroborate the benefits that may result from a well-designed tutorial course (claiming to allow new users to develop code for interactive
Reference: [Froehlich97] <author> G. Froehlich, H. Hoover, L. Liu, and P. Sorenson. </author> <title> Hooking into ObjectOriented Application Frameworks. </title> <booktitle> In Proc. of the 19 th International Conference on Software Engineering , pp. </booktitle> <pages> 491-501, </pages> <address> Boston, MA, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: A related approach is the use of hooks, which are meant to be similar to Beck and Johnsons patterns, although more structured and uniform and less narrative in style <ref> [Froehlich97] </ref>. Like patterns, each hook provides only the information necessary to solve a specific, focused problem. They are produced by the framework developer to illustrate how the framework is intended to be used.
Reference: [Gamma95] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides. </author> <title> Design Patterns: </title> <booktitle> Elements of ObjectOriented Software Architecture . Addison-Wesley, </booktitle> <year> 1995. </year>
Reference-contexts: Patterns and recipes: Beck and Johnson [Johnson92, Beck94] advocate the use of patterns (interlocking descriptions of problem/solution pairs, similar to objectoriented design patterns <ref> [Gamma95] </ref> or cookbook recipes, e.g. [Apple86]) that describe a functionality supported by the framework, demonstrate how to implement the functionality, and discuss the impact of the implementation on the system) to describe frameworks. <p> A second threat to external validity might be that our findings are tied to the framework we used, ET++. Although we cannot completely rule out this threat to validity, ET++ has been thoroughly tested and improved from the initial version and it incorporates seventeen of the design patterns in <ref> [Gamma95] </ref>. From this point of view, we consider ET++ representative of the 25 class of sophisticated white-box frameworks that pose learning problems, which can be major inhibitors against their use. 11.
Reference: [Gangopadhyay95] <author> D. Gangopadhyay, S. Mitra. </author> <title> Understanding Frameworks by Exploration of Exemplars, </title> <booktitle> In Proc. of 7th International Workshop on CASE , pages 90-99, </booktitle> <address> July 1995, </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: for and reusing one component at a time does not allow the potentially subtle connections between components to be understood, and second, it is a very difficult problem to match a query which has been specified in a way meaningful to the developer with the description of the framework components <ref> [Gangopadhyay95] </ref>. 3. Architectural approaches: Gangopadhyay and Mitra recommend instead a top-down approach to learning frameworks, by which they mean a concentration on the framework architecture rather than on individual components [Gangopadhyay95]. <p> a query which has been specified in a way meaningful to the developer with the description of the framework components <ref> [Gangopadhyay95] </ref>. 3. Architectural approaches: Gangopadhyay and Mitra recommend instead a top-down approach to learning frameworks, by which they mean a concentration on the framework architecture rather than on individual components [Gangopadhyay95]. They recommend the development of exemplars, executable visual models that consist of instances of concrete framework classes along with explicit representations of their collaborations. An exemplar should contain at least one concrete subclass for each abstract class in the framework.
Reference: [Glaser67] <author> H. G. Glaser, A. L. Strauss. </author> <title> The Discovery of Grounded Theory: Strategies for Qualitative Research . Aldine Publishing Company, </title> <year> 1967. </year>
Reference-contexts: The process of building theories from empirical research has been first proposed in the social science literature <ref> [Glaser67, Eisenhardt89] </ref> but it is also followed in the software engineering discipline [Seaman97]. 7.1. Development Processes The analysis approach we used was primarily a mix of qualitative and quantitative, in order to understand in detail the development strategies our subjects undertook.
Reference: [Goldberg83] <author> A. Goldberg, </author> <title> Smalltalk-80: The Interactive Programming Environment , Addison-Wesley, </title> <address> Menlo Park, </address> <year> 1983. </year>
Reference-contexts: One-fourth of all the teams in our study had trouble making use of the examples because the example set provided did not conform to a consistent organization or structure. Some examples were based on Model-View-Controller interaction <ref> [Goldberg83] </ref> while others were not constrained by any such separation of functionality, and different examples seemed to achieve the same functionality by using different classes from the framework hierarchy.
Reference: [Hatcher94] <author> Hatcher, L. and Stepanski, E.J. </author> <year> 1994. </year> <title> A Step-by-Step Approach to Using the SASfi System for Univariate and Multivariate Statistics. </title> <type> Cary, </type> <institution> NC: SAS Institute Inc. </institution>
Reference-contexts: We removed the extreme outlier from analysis and used the Pearson correlation coefficient <ref> [Hatcher94] </ref> to measure the strength of the linear relationship between experience and implementation score (with scores close to 1 or -1 representing an exact linear relationship and scores tending to zero representing no linear relationship). <p> The test resulted in a p-value of 0.143, which is statistically significant at the selected a level. An r value of 0.38 confirms that this shows a moderate correlation between level of sophistication and type of technique <ref> [Hatcher94] </ref>. From this example we hypothesize that: HYPOTHESIS 4: A detailed Example-Based procedure can cause developers to not go beyond the functionality that is to be found in the example set. 2. The functionality was completely contained in (perhaps multiple) examples.
Reference: [Johnson92] <author> R. Johnson. </author> <title> Documenting Frameworks with Patterns. </title> <booktitle> In Proc. OOPSLA 92 , Vancouver, </booktitle> <address> BC, </address> <month> October </month> <year> 1992, </year> <journal> SIGPLAN Notices, </journal> <volume> 27(10): </volume> <pages> 63-76. </pages>
Reference-contexts: Patterns and recipes: Beck and Johnson <ref> [Johnson92, Beck94] </ref> advocate the use of patterns (interlocking descriptions of problem/solution pairs, similar to objectoriented design patterns [Gamma95] or cookbook recipes, e.g. [Apple86]) that describe a functionality supported by the framework, demonstrate how to implement the functionality, and discuss the impact of the implementation on the system) to describe frameworks. <p> However, the only evidence presented as to its effectiveness is an informal study in which subjects were asked to learn HotDraw using patterns and provide feedback <ref> [Johnson92] </ref>. This study seems to have been very successful at its primary goal of helping the patterns authors debug their work, but does not provide much detail as to how the learning process was influenced. <p> Like patterns, each hook provides only the information necessary to solve a specific, focused problem. They are produced by the framework developer to illustrate how the framework is intended to be used. Johnson states <ref> [Johnson92] </ref> that it would probably be worthwhile to try out the patterns in a controlled setting where it would be possible to watch how people use the patterns and what aspects of [the framework] are hard to learn.
Reference: [Judd91] <author> C.M.Judd, E.R.Smith, and L.H.Kidder, </author> <title> Research Methods in Social Relations. </title> <publisher> Holt, Rinehart and Winston, Inc., Forth Worth, </publisher> <address> sixth edition, </address> <year> 1991. </year>
Reference-contexts: Due to our small sample sizes and the exploratory nature of this study, we used an a level of 0.20, which is higher than standard levels. We also present the product moment correlation coefficient, r , as a measure of the effect size <ref> [Judd91] </ref>. (An r value of 0 would show no correlation between the variables, whereas a value of 1 shows a perfect correlation.) We realize that these tests do not provide strong statistical evidence of any relationship, but instead see their contribution as helping detect patterns in the data that can be <p> Our study did not address this possibility.) 10. Threats to Validity There are three tests which can be considered to evaluate the quality of any empirical study: construct validity, internal validity, and external validity <ref> [Judd91] </ref>. 10.1. Construct Validity Construct validity aims to assure that the study correctly measures the concepts of interest. The main problem is that variables never measure only the construct of interest but also other extraneous sources of variation.
Reference: [Koltun83] <author> P. Koltun, L. Deimel Jr., and J. Perry. </author> <title> Progress Report on the Study of Program Reading, </title> <journal> ACM SIGCSE Bulletin, </journal> <volume> Volume 15, Number 1, </volume> <month> February </month> <year> 1983, </year> <pages> pp. 168-176. </pages>
Reference-contexts: of example applications have been used to document some frameworks (the framework we used came with such a set) and the approach has been recommended for similar types of activities: such as learning effective techniques for problem solving [Chi87], or learning how to write programs in a new programming language <ref> [Koltun83, Rosson90] </ref>. It has also been argued that learning by examples is wellsuited for domains where multiple organizational principles and irregularities in interaction exist [Brandt97], which may be a fair assessment of the large hierarchy of classes in a framework.
Reference: [Lewis95] <author> T. Lewis et al., </author> <title> Object Oriented Application Frameworks. </title> <publisher> Mannings Publication Co., </publisher> <address> Greenwich, </address> <year> 1995. </year>
Reference-contexts: A framework is tailored to solve a particular problem by customizing its abstract and concrete classes, allowing the framework architecture to be reused by all specific solutions within a problem domain. By providing both design and infrastructure for developing applications, the framework approach promises to develop applications faster <ref> [Lewis95] </ref>. The most popular frameworks are in the GUI application domain (e.g. MacApp, ET++, CommonPoint) and in the drawing domain (e.g. HotDraw, UniDraw) but frameworks have also been developed in other domains such as multimedia, manufacturing, financial trade, and data access. <p> The most common description of a framework uses the class hierarchy to describe the functionality supported by the framework and an object model to describe how the dynamic behavior is implemented. Most of the common descriptions of a framework in the literature (e.g. <ref> [Lewis95] </ref>, [Taligent95]) present a model of the framework similar to this one. To teach subjects how to use this model, we created a set of guidelines that could be used to gain an understanding of the class hierarchy.
Reference: [Miles79] <author> M. Miles, </author> <title> Qualitative Data as an Attractive Nuisance: </title> <booktitle> The Problem of Analysis , Administrative Science Quarterly , 24(4): </booktitle> <pages> 590-601, </pages> <year> 1979. </year>
Reference-contexts: Although this is not a common method of analysis in computer science, it is a recommended approach for social sciences and other fields that require the analysis of human behavior <ref> [Eisenhardt89, Miles79] </ref>. It is well suited for our purposes here because our variables of interest are heavily influenced by human behavior and because we are not attempting to prove hypotheses about framework usage, but rather to begin formulating hypotheses about this process, about which we currently know little. <p> Although this is not a common method of analysis in computer science, it is a recommended approach for social sciences and other fields that require the analysis of human behavior <ref> [Eisenhardt89, Miles79] </ref>. It is well suited for our purposes here because our variables of interest are heavily influenced by human behavior and because we are not attempting to prove hypotheses about framework usage, but rather to begin formulating hypotheses about this process, about which we currently know little.
Reference: [Mili97] <author> H. Mili, H. Sahraoui, I. Benyahia. </author> <title> Representing and Querying Reusable Object Frameworks. </title> <booktitle> In Proc. of the Symposium on Software Reusability, </booktitle> <address> Boston, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: Formal and/or searchable specifications of behavior: Another tactic has been to formalize descriptions of the behavior of framework components, which then allows the creation of a search mechanism for finding useful components given a query. One such example is the prototype framework browser constructed at the University of Quebec <ref> [Mili97] </ref>, which is especially promising in that it concentrates on finding a general solution which can be applied to any existing framework, regardless of the level of documentation supplied.
Reference: [Ott93] <author> R. Ott. </author> <title> An Introduction to Statistical Methods and Data Analysis , Duxbury Press, </title> <address> Belmont, CA, </address> <year> 1993. </year>
Reference-contexts: The test for differences in the two groups could not be conclusive, as only six teams reported their overall effort data, and a team with organizational difficulties had to be again discarded from the analysis as an extreme outlier (as defined by <ref> [Ott93] </ref>). The analysis did, however, show no significant difference between the average amount of effort spent on the project over the course of the semester by teams who had been taught each of the different techniques (p-value of 0.5859 obtained from t-test). <p> A chisquare test of independence was undertaken to test whether the level of sophistication was dependent on the type of technique used, although we recognize that the small number of data points involved can lead to some inaccuracies in the results <ref> [Ott93] </ref>. The test resulted in a p-value of 0.143, which is statistically significant at the selected a level. An r value of 0.38 confirms that this shows a moderate correlation between level of sophistication and type of technique [Hatcher94]. <p> One point, representing a team which experienced severe organizational difficulties which were primarily responsible for a very low implementation score, must be removed from this analysis as an extreme outlier (according to the definition given in <ref> [Ott93] </ref>). The test yielded a p-value of 0.15, which is significant at the 0.20-level and provides some evidence that teams who started by modifying an example tended to be more effective than those starting from scratch.
Reference: [Pree95] <author> W. Pree. </author> <title> Design Patterns for ObjectOriented Software Development. </title> <publisher> ACM Press & Addison-Wesley Publishing Co., </publisher> <year> 1995. </year>
Reference-contexts: Greater benefits are expected from reusable, domain specific frameworks that usefully encapsulate these interconnections themselves. 2. Frameworks have associated learning problems that affect their usefulness. The effort required to learn enough about the framework to begin coding is very high, especially for novices <ref> [Taligent95, Pree95] </ref>. Developing an application by using a framework is closer to maintaining an existing application than to developing a new application from scratch: in framework-based development, the static and dynamic structures must first be understood and then adapted to the specific requirements of the application.
Reference: [Rosson90] <author> M. B. Rosson, J. M. Carroll, and R. K. E. Bellamy. </author> <title> SmallTalk Scaffolding: A Case Study of Minimalist Instruction. </title> <booktitle> In Proc. </booktitle> <address> CHI 90 , April 1990. </address>
Reference-contexts: work has focused on tutorials created for users to follow which will presumably guide users through the most important points of the framework. (Two examples are [Vlissides91] for Unidraw and [Frei91] for ET++.) An interesting example of work in this area is Rosson et al. s tutorial for learning Smalltalk <ref> [Rosson90] </ref> which applies Minimalist instruction techniques [Carroll90] and seems to corroborate the benefits that may result from a well-designed tutorial course (claiming to allow new users to develop code for interactive applications after only four hours). <p> of example applications have been used to document some frameworks (the framework we used came with such a set) and the approach has been recommended for similar types of activities: such as learning effective techniques for problem solving [Chi87], or learning how to write programs in a new programming language <ref> [Koltun83, Rosson90] </ref>. It has also been argued that learning by examples is wellsuited for domains where multiple organizational principles and irregularities in interaction exist [Brandt97], which may be a fair assessment of the large hierarchy of classes in a framework.
Reference: [Rugaber90] <author> S. Rugaber, S. B. Ornburn, and R. J. LeBlanc, Jr. </author> <title> Recognizing design decisions in programs. </title> <journal> IEEE Software, </journal> <volume> 7(1): </volume> <pages> 46-54, </pages> <month> January </month> <year> 1990. </year> <month> 32 </month>
Reference-contexts: Some examples were based on Model-View-Controller interaction [Goldberg83] while others were not constrained by any such separation of functionality, and different examples seemed to achieve the same functionality by using different classes from the framework hierarchy. As others <ref> [Rugaber90] </ref> have pointed out, learning how to implement functionality from existing applications is difficult because the rationales for design 16 choices, which explain why the finished implementation looks the way it does, are usually not included in the documentation.
Reference: [Rumbaugh91] <author> J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy, and W Lorensen. </author> <title> ObjectOriented Modeling and Design , Prentice Hall, </title> <address> Englewood Cliffs, NJ, </address> <year> 1991. </year>
Reference-contexts: The application to be developed was one that would allow a user to edit OMT-notation diagrams <ref> [Rumbaugh91] </ref>.
Reference: [Schneider95] <author> K. Schneider, A. Repenning. </author> <title> Deceived by Ease of Use: Using Paradigmatic Applications to Build Visual Design Environments , In. </title> <booktitle> Proc. of the Symposium on Designing Interactive Systems , Ann Arbor, </booktitle> <address> MI, </address> <year> 1995. </year>
Reference-contexts: Our study belongs in this category of empirical study of practical framework use. It is similar in type to the study undertaken by Schneider and Repenning <ref> [Schneider95] </ref>, which draws conclusions about the process of software development with frameworks from 50 application-building efforts supervised by the authors. <p> Teams who implemented incorrect functionality may have been simply too willing to make modifications to their planned system to accommodate the examples more easily. Schneider and Repenning <ref> [Schneider95] </ref> present an interesting study of framework use that comes to similar conclusions. <p> Taken together, our conclusions indicate that, within proper bounds, exploiting functionality from the framework and example set is the most helpful direction - otherwise, it can be very bad indeed. Schneider <ref> [Schneider95] </ref> draws a similar conclusion: although overuse of framework functionality can lead to negative effects, as described above, exploitation of the low-level framework features is a sensible trend that presumably pays off, when used within bounds.
Reference: [Seaman97] <author> C. B. Seaman, V. R. Basili. </author> <title> An Empirical Study of Communication in Code Inspection. </title> <booktitle> In Proc. </booktitle> <address> ICSE97 , Boston, MA, </address> <year> 1997. </year>
Reference-contexts: The process of building theories from empirical research has been first proposed in the social science literature [Glaser67, Eisenhardt89] but it is also followed in the software engineering discipline <ref> [Seaman97] </ref>. 7.1. Development Processes The analysis approach we used was primarily a mix of qualitative and quantitative, in order to understand in detail the development strategies our subjects undertook.
Reference: [SEL92] <institution> Software Engineering Laboratory. </institution> <note> Recommended Approach to Software Development, Revision 3 , SEL-81-305, </note> <month> June </month> <year> 1992. </year>
Reference-contexts: Projects were graded by assessing how well the submitted system met each of the original functional requirements (on a 6 point scale based upon the suggested scale for reporting runtime defects in the NASA Software Engineering Laboratory <ref> [SEL92] </ref>: required functionality missing, program stops when functionality invoked, functionality cannot be used, functionality can only partly be used, minor or cosmetic deviation, functionality works well).
Reference: [Singer96] <author> J. Singer and T. C. Lethbridge. </author> <title> Methods for Studying Maintenance Activities, </title> <booktitle> in Proc. of 1 st International Workshop on Empirical Studies of Software Maintenance , Monterey, </booktitle> <address> CA, </address> <year> 1996. </year>
Reference-contexts: Such an approach is not new, and has in fact proven useful in understanding how developers perform related tasks such as understanding code [vonMayrhauser95] or performing maintenance <ref> [Singer96] </ref>. Other authors [Codenie97] who have applied this approach to studying framework usage in industrial environments agree that, in most cases, framework customization will be more complex than just making modifications at a limited number of predefined spots. <p> Most of our collection methods are mentioned by Singer and Lethbridge in their discussion of the pros and cons of various methods for studying maintenance activities <ref> [Singer96] </ref>, and we respond to some of their comments where appropriate.
Reference: [Taligent95] <author> Taligent, Inc. </author> <title> The Power of Frameworks, </title> <publisher> Addison-Wesley, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: Greater benefits are expected from reusable, domain specific frameworks that usefully encapsulate these interconnections themselves. 2. Frameworks have associated learning problems that affect their usefulness. The effort required to learn enough about the framework to begin coding is very high, especially for novices <ref> [Taligent95, Pree95] </ref>. Developing an application by using a framework is closer to maintaining an existing application than to developing a new application from scratch: in framework-based development, the static and dynamic structures must first be understood and then adapted to the specific requirements of the application. <p> The most common description of a framework uses the class hierarchy to describe the functionality supported by the framework and an object model to describe how the dynamic behavior is implemented. Most of the common descriptions of a framework in the literature (e.g. [Lewis95], <ref> [Taligent95] </ref>) present a model of the framework similar to this one. To teach subjects how to use this model, we created a set of guidelines that could be used to gain an understanding of the class hierarchy.
Reference: [Vlissides91] <author> J. Vlissides. </author> <title> Unidraw Tutorial I: A Simple Drawing Editor . Stanford University, </title> <year> 1991. </year>
Reference-contexts: Tutorials: Other work has focused on tutorials created for users to follow which will presumably guide users through the most important points of the framework. (Two examples are <ref> [Vlissides91] </ref> for Unidraw and [Frei91] for ET++.) An interesting example of work in this area is Rosson et al. s tutorial for learning Smalltalk [Rosson90] which applies Minimalist instruction techniques [Carroll90] and seems to corroborate the benefits that may result from a well-designed tutorial course (claiming to allow new users to
Reference: [vonMayrhauser95] <author> A. von Mayrhauser and A. M. Vans. </author> <title> Industrial Experience with an Integrated Code Comprehension Model, </title> <note> Software Engineering Journal , September 1995. </note>
Reference-contexts: Such an approach is not new, and has in fact proven useful in understanding how developers perform related tasks such as understanding code <ref> [vonMayrhauser95] </ref> or performing maintenance [Singer96]. Other authors [Codenie97] who have applied this approach to studying framework usage in industrial environments agree that, in most cases, framework customization will be more complex than just making modifications at a limited number of predefined spots. <p> HB in contrast must explicitly rely on EB to focus it on a useful portion of the framework hierarchy. For the next experiment in this area, a smaller case study may be more appropriate than another controlled experiment. A study using protocol analysis (e.g. <ref> [vonMayrhauser95] </ref>) would be able to focus in more detail on the specific process developers go through when attempting to determine whether a functionality is supported by the framework.
Reference: [Weinand89] <author> A. Weinand, E. Gamma, and R. Marty. </author> <title> Design and Implementation of ET++, a Seamless ObjectOriented Application Framework, </title> <booktitle> Structured Programming , 10 (2), </booktitle> <year> 1989. </year>
Reference-contexts: The project was to be built on top of the ET++ framework <ref> [Weinand89] </ref>, which assists the development of GUI-based applicatons. ET++ provides a hierarchy of over 200 classes that provide windowing functionality such as event handling, menu bars, dialog boxes, and the like.
Reference: [Yin94] <author> R. Yin, </author> <title> Case Study Research: Design and Methods , Sage Publications, </title> <address> London, </address> <year> 1994. </year>
Reference-contexts: Since the analysis was carried out both for i ndividuals and the teams of which they were part, we were able to treat the study as an embedded case study <ref> [Yin94] </ref>. Over the course of the semester, we used a number of different methods to collect a wide variety of data, each of which we discuss briefly below. <p> The main problem is that variables never measure only the construct of interest but also other extraneous sources of variation. One tactic to enhance construct validity is triangulation: the use of multiple sources aimed at corroborating the same fact or phenomenon <ref> [Yin94, pp.90-94] </ref>. 24 In our study we applied data triangulation, by including multiple measures for the same aspect of interest and different collection methods for the same measure (Table 1). 10.2. Internal Validity Internal validity aims to establish correct causal relationships between variables as distinguished from spurious relationships.
References-found: 36

