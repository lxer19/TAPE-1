URL: file://ftp.cs.purdue.edu/pub/seh/Papers/longest.ps.Z
Refering-URL: http://www.cs.purdue.edu/people/seh/
Root-URL: http://www.cs.purdue.edu
Title: New Algorithms for Minimizing the Longest Wire Length During Circuit Compaction  
Author: Susanne E. Hambrusch Hung-Yi Tu 
Keyword: Analysis of algorithms, circuit layout, compaction, layout width, longest wire length, path computations.  
Date: January 26, 1995  
Address: West Lafayette, IN 47907  Taichung, Taiwan, ROC  
Affiliation: Department of Computer Sciences Purdue University  Department of Computer Science and Information Management Providence University  
Abstract: Consider the problem of performing 1-dimensional circuit compaction for a layout containing n h horizontal wires and n layout cells. We present new and efficient constraint-graph based algorithms for generating a compacted layout in which either the length of the longest wires or a user-specified tradeoff function between the layout width and the longest wire length is minimized. Both algorithms have an O(n h n log n) running time. The concept employed by our algorithms is that of assigning speeds to the layout cells. Speeds are computed by performing path computations in subgraphs of the constraint graphs. A compacted layout is generated over a number of iterations, with each iteration first determining speeds and then moving the layout elements to the right according to the computed speeds. Each iteration produces a better layout and after at most n n h iterartions the final layout is produced. fl Research supported in part by DARPA under contract DABT63-92-C-0022. The views and conclusions contained in this paper are those of the authors and should not be interpreted as representing official policies, expressed or implied, of the U.S. government. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: As described in the previous section, we determine a legal speed assignment by performing a single-source longest path computation on the speed graph with vertex u s as the source. The entries speed (u i ) are computed similar to the Bellman-Ford algorithm <ref> [1] </ref> for solving a single-source shortest path problem on a graph with negative weights. We use the technique of relaxation, in which the speed-entries (and thus the length of the longest paths) are progressively increased.
Reference: [2] <author> S. Gao, M. Kaufmann, and F. M. Maley. </author> <title> Advances in homotopic layout compaction. </title> <booktitle> In Proceedings of 1989 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 273-282, </pages> <year> 1989. </year>
Reference-contexts: Ignoring constants, our algorithm can be viewed as faster for log n &lt; (1 + n r =n h ) log L. Other compaction algorithms minimizing the layout width, the longest wire length, or the total wire length are described in <ref> [2, 3, 4, 5, 6, 7, 11, 13, 15] </ref>. None of these algorithms can be used to optimize a tradeoff function between the layout width and the longest wire length. The paper is structured as follows. In Section 2 we state relevant definitions.
Reference: [3] <author> S. E. Hambrusch and H. Y. Tu. </author> <title> Minimizing total wire length during 1-dimensional compaction. INTEGRATION, </title> <journal> the VLSI journal, </journal> <volume> 14(2), </volume> <year> 1992. </year> <pages> 113-144. </pages>
Reference-contexts: Ignoring constants, our algorithm can be viewed as faster for log n &lt; (1 + n r =n h ) log L. Other compaction algorithms minimizing the layout width, the longest wire length, or the total wire length are described in <ref> [2, 3, 4, 5, 6, 7, 11, 13, 15] </ref>. None of these algorithms can be used to optimize a tradeoff function between the layout width and the longest wire length. The paper is structured as follows. In Section 2 we state relevant definitions.
Reference: [4] <author> J. F. Lee and C. K. Wong. </author> <title> A performance-aimed cell compactor with automatic jogs. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 11(12) </volume> <pages> 1495-1507, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: The length of a horizontal wire can change during this process. A layout generated by most conventional width-minimizing compaction algorithms contains unnecessarily long horizontal wires, and controlling the wire length is crucial in circuit design <ref> [4, 9, 10, 13] </ref>. In this paper we present new and efficient algorithms for minimizing the length of the longest horizontal wires during 1-D compaction and for minimizing a given tradeoff function between the length of the longest wires and the width of the layout. <p> Ignoring constants, our algorithm can be viewed as faster for log n &lt; (1 + n r =n h ) log L. Other compaction algorithms minimizing the layout width, the longest wire length, or the total wire length are described in <ref> [2, 3, 4, 5, 6, 7, 11, 13, 15] </ref>. None of these algorithms can be used to optimize a tradeoff function between the layout width and the longest wire length. The paper is structured as follows. In Section 2 we state relevant definitions.
Reference: [5] <author> T. Lengauer. </author> <title> Combinatorial Algorithms for Integrated Circuit Layout. </title> <publisher> John Wiley & Sons, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction Circuit compaction is the process of converting a symbolic layout into an actual layout that satisfies the design rules and minimizes a set of objective functions <ref> [5, 9] </ref>. One-dimensional (1-D) compaction allows layout elements to slide in one direction only and is often preferred over computationally intractable 2-dimensional compaction. Consider performing 1-D compaction along the horizontal direction. <p> Each iteration produces a feasible configuration with smaller longest wire length or a smaller tradeoff function value, respectively. The relevant constraints and distances are represented by graphs and, within the area of compaction methods, our algorithms are 2 constraint-graph based solutions <ref> [5] </ref>. A new configuration is generated from the previous one by moving layout elements to the right. A crucial parameter in this movement is the speed of a layout element. <p> Ignoring constants, our algorithm can be viewed as faster for log n &lt; (1 + n r =n h ) log L. Other compaction algorithms minimizing the layout width, the longest wire length, or the total wire length are described in <ref> [2, 3, 4, 5, 6, 7, 11, 13, 15] </ref>. None of these algorithms can be used to optimize a tradeoff function between the layout width and the longest wire length. The paper is structured as follows. In Section 2 we state relevant definitions.
Reference: [6] <author> Y. Z. Liao and C. K. Wong. </author> <title> An algorithm to compact a VLSI symbolic layout with mixed constraints. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 2(2) </volume> <pages> 62-69, </pages> <month> April </month> <year> 1983. </year> <month> 32 </month>
Reference-contexts: Updating the data structures used and performing computations on demand allows us to achieve the O (n h n log n) time bound. The best previously known algorithm for minimizing the longest wire length follows from <ref> [6] </ref>. The algorithm described in that paper uses a different approach and, when translated into our framework, it gives O (log L (n h + n r ) n) time, where L is the longest wire length in the initial layout. <p> Ignoring constants, our algorithm can be viewed as faster for log n &lt; (1 + n r =n h ) log L. Other compaction algorithms minimizing the layout width, the longest wire length, or the total wire length are described in <ref> [2, 3, 4, 5, 6, 7, 11, 13, 15] </ref>. None of these algorithms can be used to optimize a tradeoff function between the layout width and the longest wire length. The paper is structured as follows. In Section 2 we state relevant definitions.
Reference: [7] <author> D. Marple. </author> <title> A hierarchy preserving hierarchical compactor. </title> <booktitle> In Proceedings of 27th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 375-381, </pages> <year> 1990. </year>
Reference-contexts: Ignoring constants, our algorithm can be viewed as faster for log n &lt; (1 + n r =n h ) log L. Other compaction algorithms minimizing the layout width, the longest wire length, or the total wire length are described in <ref> [2, 3, 4, 5, 6, 7, 11, 13, 15] </ref>. None of these algorithms can be used to optimize a tradeoff function between the layout width and the longest wire length. The paper is structured as follows. In Section 2 we state relevant definitions.
Reference: [8] <author> N. Megiddo. </author> <title> Linear-time algorithms for linear programming in R 3 and related problems. </title> <journal> SIAM J. Comput., </journal> <volume> 12(4) </volume> <pages> 759-775, </pages> <month> November </month> <year> 1983. </year>
Reference-contexts: Figure 3 shows the length functions of eight horizontal wires. The upper envelope of the length functions is indicated by the dashed line. The minimum of EN V (t) can be obtained in O (n h ) time <ref> [8] </ref>. Since our line segments have a special structure, the minimum of EN V (t) can be determined by a simpler method having the same time bound as follows.
Reference: [9] <author> D. A. Mlynski and C. H. Sung. </author> <title> Layout compaction. </title> <editor> In T. Ohtsuki, editor, </editor> <booktitle> Layout Design and Verification, </booktitle> <pages> pages 199-235. </pages> <publisher> Elsevier Science Publ., </publisher> <year> 1986. </year>
Reference-contexts: 1 Introduction Circuit compaction is the process of converting a symbolic layout into an actual layout that satisfies the design rules and minimizes a set of objective functions <ref> [5, 9] </ref>. One-dimensional (1-D) compaction allows layout elements to slide in one direction only and is often preferred over computationally intractable 2-dimensional compaction. Consider performing 1-D compaction along the horizontal direction. <p> The length of a horizontal wire can change during this process. A layout generated by most conventional width-minimizing compaction algorithms contains unnecessarily long horizontal wires, and controlling the wire length is crucial in circuit design <ref> [4, 9, 10, 13] </ref>. In this paper we present new and efficient algorithms for minimizing the length of the longest horizontal wires during 1-D compaction and for minimizing a given tradeoff function between the length of the longest wires and the width of the layout.
Reference: [10] <author> A. R. </author> <title> Newton. Symbolic layout and procedural design. </title> <editor> In G. DeMicheli, A. Sangiovanni-Vincentelli, and P. Antognetti, editors, </editor> <booktitle> Design Systems for VLSI Circuits, </booktitle> <pages> pages 65-112, </pages> <address> Boston, 1987. </address> <publisher> Martinus Nijhoff Publishers. </publisher>
Reference-contexts: The length of a horizontal wire can change during this process. A layout generated by most conventional width-minimizing compaction algorithms contains unnecessarily long horizontal wires, and controlling the wire length is crucial in circuit design <ref> [4, 9, 10, 13] </ref>. In this paper we present new and efficient algorithms for minimizing the length of the longest horizontal wires during 1-D compaction and for minimizing a given tradeoff function between the length of the longest wires and the width of the layout.
Reference: [11] <author> A. Onozawa. </author> <title> Layout compaction with attractive and repulsive constraints. </title> <booktitle> In Proceedings of 27th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 369-374, </pages> <year> 1990. </year>
Reference-contexts: Ignoring constants, our algorithm can be viewed as faster for log n &lt; (1 + n r =n h ) log L. Other compaction algorithms minimizing the layout width, the longest wire length, or the total wire length are described in <ref> [2, 3, 4, 5, 6, 7, 11, 13, 15] </ref>. None of these algorithms can be used to optimize a tradeoff function between the layout width and the longest wire length. The paper is structured as follows. In Section 2 we state relevant definitions.
Reference: [12] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry. </title> <publisher> Springer Verlag, </publisher> <year> 1985. </year>
Reference-contexts: This can be done, for example, by sorting the layout components according to their vertical edges and using a plane-sweep approach, together with balanced tree operations <ref> [12, 14] </ref>. As already stated, we generate new configurations by moving cells to the right with certain speeds. The speeds are specified in the speed assignment. A speed assignment assigns to every cell U i a non-negative real number speed (U i ), 1 i n.
Reference: [13] <author> W. L. Schiele. </author> <title> Improved compaction by minimized length of wires. </title> <booktitle> In Proceedings of 20th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 121-121, </pages> <year> 1983. </year>
Reference-contexts: The length of a horizontal wire can change during this process. A layout generated by most conventional width-minimizing compaction algorithms contains unnecessarily long horizontal wires, and controlling the wire length is crucial in circuit design <ref> [4, 9, 10, 13] </ref>. In this paper we present new and efficient algorithms for minimizing the length of the longest horizontal wires during 1-D compaction and for minimizing a given tradeoff function between the length of the longest wires and the width of the layout. <p> Ignoring constants, our algorithm can be viewed as faster for log n &lt; (1 + n r =n h ) log L. Other compaction algorithms minimizing the layout width, the longest wire length, or the total wire length are described in <ref> [2, 3, 4, 5, 6, 7, 11, 13, 15] </ref>. None of these algorithms can be used to optimize a tradeoff function between the layout width and the longest wire length. The paper is structured as follows. In Section 2 we state relevant definitions.
Reference: [14] <author> M. Schlag, F. Luccio, P. Maestrini, D. T. Lee, and C. K. Wong. </author> <title> A visibility problem in VLSI layout compaction. </title> <editor> In F. P. Preparata, editor, </editor> <booktitle> Advances in Computing Research: VLSI Theory, </booktitle> <pages> pages 259-282, </pages> <address> Greenwich, Connecticut, 1984. </address> <publisher> JAI Press. </publisher>
Reference-contexts: This can be done, for example, by sorting the layout components according to their vertical edges and using a plane-sweep approach, together with balanced tree operations <ref> [12, 14] </ref>. As already stated, we generate new configurations by moving cells to the right with certain speeds. The speeds are specified in the speed assignment. A speed assignment assigns to every cell U i a non-negative real number speed (U i ), 1 i n.
Reference: [15] <author> B. X. Weis and D. A. Mlynski. </author> <title> A graphtheoretic approach to the relative placement problem. </title> <journal> IEEE Transactions on Circuits and Systems, </journal> <volume> 35(3) </volume> <pages> 286-293, </pages> <year> 1988. </year> <month> 33 </month>
Reference-contexts: Ignoring constants, our algorithm can be viewed as faster for log n &lt; (1 + n r =n h ) log L. Other compaction algorithms minimizing the layout width, the longest wire length, or the total wire length are described in <ref> [2, 3, 4, 5, 6, 7, 11, 13, 15] </ref>. None of these algorithms can be used to optimize a tradeoff function between the layout width and the longest wire length. The paper is structured as follows. In Section 2 we state relevant definitions.
References-found: 15

