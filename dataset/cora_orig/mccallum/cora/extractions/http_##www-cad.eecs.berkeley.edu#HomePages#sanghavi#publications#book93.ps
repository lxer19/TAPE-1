URL: http://www-cad.eecs.berkeley.edu/HomePages/sanghavi/publications/book93.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/sanghavi/publications/publications.html
Root-URL: http://www.cs.berkeley.edu
Title: A New Exact Minimizer for Two-Level Logic Synthesis  
Author: Robert K. Brayton Patrick C. McGeer Jagesh V. Sanghavi Alberto L. Sangiovanni-Vincentelli 
Date: July 14, 1993  
Abstract: We present a new algorithm for exact two-level logic optimization. It differs from the classical approach; rather than generating the set of all prime implicants of a function, and then deriving a covering problem, we derive the covering problem directly and implicitly, and then generate only those primes involved in the covering problem. We represent a set of primes by the cube of their intersection. We then derive some properties of the sets of primes which form this set covering problem. We prove that the set of sets of primes which forms the covering problem for an incompletely-specified logic function F is unique. Hence the corresponding set of cubes forms a minimum canonical cover for F. We give a successive reduction algorithm for finding the minimum canonical cover from any initial cover. Using the minimum canonical cover, we then generate only those primes involved in at least one minimal cover of F . We discuss two related heuristic minimization procedures; a relaxed form of the exact procedure, and then an improved form of the Espresso-II procedure. We give experimental results for the exact minimizer. The method is effective; solutions for 10 of the 20 hard examples in the Espresso benchmark set are derived and proved minimum. In addition, for 5 of the remaining examples the minimum canonical cover is derived, but the covering problem remains to be solved exactly.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Bartlett, R. Brayton, G. Hachtel, R. Jacoby, C. Morrison, R. Rudell, A. Sangiovanni-Vincentelli, and A. Wang. </author> <title> Multi-level logic minimization using implicit don't cares. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 7(6) </volume> <pages> 723-740, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: We can expect this problem to grow worse. Two-level logic optimization appears in many guises; it is often used as a subprogram in multilevel synthesis. In this application, very large don't-care sets are the rule <ref> [1, 7] </ref>; we can expect a very large number of primes, most of which will not appear in any minimal cover.
Reference: [2] <author> R. Brayton, G. Hachtel, C. McMullen, and A. Sangiovanni-Vincentelli. </author> <title> Logic Minimization Algorithms for VLSI Synthesis. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1984. </year> <month> 26 </month>
Reference-contexts: Most research concentrated on improving each step, not on revising the basic procedure. Efficient methods to generate the set of all primes were discovered [5, 12]. An elegant method of formulating the set-covering problem was devised and improved set covering algorithms were developed <ref> [2] </ref>. In 1987, Rudell combined and improved the procedures for prime generation and set covering formulation with improved techniques to solve the set-covering problem in the program Espresso-exact [14, 13]. <p> An easy induction around the preceding observations demonstrates the correctness of essential test and reduction. One more detail remains; computing (b), or, (more simply) showing that (b) 6= c. In order to compute (b), a function originally introduced in <ref> [2] </ref> is used. 4.2 Computing (b) Since (b) is simply the product of primes containing b, it may be computed by enumerating the primes containing b. However, we can do better than that by using the blocking function [2]. <p> In order to compute (b), a function originally introduced in <ref> [2] </ref> is used. 4.2 Computing (b) Since (b) is simply the product of primes containing b, it may be computed by enumerating the primes containing b. However, we can do better than that by using the blocking function [2]. <p> The following theorems establish the significance of B c . Theorem 4.3 Let c be any implicant of F . p is a prime of F containing c if and only if p is a prime of B c . Proof: See chapter 3 of <ref> [2] </ref>. This theorem establishes the key result of this section as an immediate corollary: Theorem 4.4 (b) = (c) iff P c = P b , and hence iff B c = B b . <p> Proof: (b) = (c) iff S (b) = S (c) iff P c = P b . These results have significance, since the primes of B c are easy to find. Theorem 4.5 <ref> [2] </ref>: B c is completely-specified and unate. Using a property of completely-specified, unate functions, we have: Theorem 4.6 Every prime of B c is essential and occurs in every prime cover of B c .
Reference: [3] <author> M. Cieselski, S. Yang, and M. Perkowski. </author> <title> Multiple-valued minimization based on graph coloring. </title> <booktitle> In International Conference on Computer Design, </booktitle> <year> 1989. </year>
Reference-contexts: X i S. Y S is a set cover of X if for all i, Y " X i 6= ;. 1 An exact minimizer is one which, given enough time and space, will always return a minimum solution 2 An exception is the work of <ref> [3, 8, 9, 10] </ref>. We discuss this work in some detail in section 8. 2 Definition 1.2 X i 2 X is minimal in X if X j X i implies i = j. <p> In addition, we still hope to find the minimum canonical cover by improved techniques for the remaining 5 examples. 8 Related Work In an independent but earlier development, Perkowski et. al. <ref> [3, 8, 9, 10] </ref> developed or commented on ideas very similar to some of those used here. We comment on these in detail below. In [8], the concept of minimal implicants was introduced as any cube obtained by intersecting all the primes which cover a given minterm.
Reference: [4] <author> O. Coudert and J.-C. Madre. </author> <title> A new implicit graph-based prime and essential prime computation technique. </title> <editor> In T. Sasao, editor, </editor> <title> New Trends in Logic Synthesis and Optimization. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1992. </year>
Reference-contexts: We also report results on 20 "hard" examples (ones on which Espresso-exact failed). These examples are noteworthy for having many primes. Indeed, Coud-ert and Madre <ref> [4] </ref> report that some have as many as 10,000,000 primes. <p> 40664 - 5286 ti 47/72 241 836287 46 - x2dn 82/56 112 1.1488e16 2 846 2006 - xparc 41/73 551 - 140 1843 2974 - In the above table, we report the name, number of inputs and outputs, number of terms in the input problem, number of primes (found by <ref> [4] </ref>), number of essential primes, number of essential signature cubes (number of sets or rows of the final covering problem), number of primes in some essential signature set (number of columns of the final covering problem), the size of the minimum solution where known and the computation time on a DECstation
Reference: [5] <author> S. J. Hong, R. G. Cain, and D. L. Ostapko. </author> <title> Mini: A heuristic approach to logic minimization. </title> <journal> IBM Journal of Research and Development, </journal> <year> 1974. </year>
Reference-contexts: Most research concentrated on improving each step, not on revising the basic procedure. Efficient methods to generate the set of all primes were discovered <ref> [5, 12] </ref>. An elegant method of formulating the set-covering problem was devised and improved set covering algorithms were developed [2]. In 1987, Rudell combined and improved the procedures for prime generation and set covering formulation with improved techniques to solve the set-covering problem in the program Espresso-exact [14, 13].
Reference: [6] <author> E. J. McCluskey. </author> <title> Minimization of boolean functions. </title> <journal> Bell System Technical Journal, </journal> <year> 1956. </year>
Reference-contexts: In the 1950's, Karnaugh introduced the map method; seminal algorithms were given by Quine [11] and McCluskey <ref> [6] </ref> leading to the "Quine-McCluskey" procedure. The three basic steps of this procedure are those used by almost all exact 1 logic optimization procedures to date. 2 These are: 1. Generate all the maximal terms ("primes") of F . 2.
Reference: [7] <author> Patrick C. McGeer and Robert K. Brayton. </author> <title> The observability don't-care set and its approximations. </title> <booktitle> In IEEE International Conference on Computer Design, </booktitle> <year> 1990. </year>
Reference-contexts: We can expect this problem to grow worse. Two-level logic optimization appears in many guises; it is often used as a subprogram in multilevel synthesis. In this application, very large don't-care sets are the rule <ref> [1, 7] </ref>; we can expect a very large number of primes, most of which will not appear in any minimal cover.
Reference: [8] <author> L. Nguyen, M. Perkowski, and N. Goldstein. </author> <title> Palmini fast boolean minimizer for personal computers. </title> <booktitle> In Design Automation Conference, </booktitle> <month> July </month> <year> 1987. </year>
Reference-contexts: X i S. Y S is a set cover of X if for all i, Y " X i 6= ;. 1 An exact minimizer is one which, given enough time and space, will always return a minimum solution 2 An exception is the work of <ref> [3, 8, 9, 10] </ref>. We discuss this work in some detail in section 8. 2 Definition 1.2 X i 2 X is minimal in X if X j X i implies i = j. <p> In addition, we still hope to find the minimum canonical cover by improved techniques for the remaining 5 examples. 8 Related Work In an independent but earlier development, Perkowski et. al. <ref> [3, 8, 9, 10] </ref> developed or commented on ideas very similar to some of those used here. We comment on these in detail below. In [8], the concept of minimal implicants was introduced as any cube obtained by intersecting all the primes which cover a given minterm. <p> We comment on these in detail below. In <ref> [8] </ref>, the concept of minimal implicants was introduced as any cube obtained by intersecting all the primes which cover a given minterm. In addition, the subset of these which are maximal was called the set of nonredundant minimal implicants (NMI). These are the essential signature cubes of this paper.
Reference: [9] <author> M. Perkowski and N. Goldstein. </author> <title> Private communication. </title> <type> Technical report, </type> <year> 1983. </year>
Reference-contexts: X i S. Y S is a set cover of X if for all i, Y " X i 6= ;. 1 An exact minimizer is one which, given enough time and space, will always return a minimum solution 2 An exception is the work of <ref> [3, 8, 9, 10] </ref>. We discuss this work in some detail in section 8. 2 Definition 1.2 X i 2 X is minimal in X if X j X i implies i = j. <p> In addition, we still hope to find the minimum canonical cover by improved techniques for the remaining 5 examples. 8 Related Work In an independent but earlier development, Perkowski et. al. <ref> [3, 8, 9, 10] </ref> developed or commented on ideas very similar to some of those used here. We comment on these in detail below. In [8], the concept of minimal implicants was introduced as any cube obtained by intersecting all the primes which cover a given minterm.
Reference: [10] <author> M. Perkowski, P. Wu, and K. Pirkl. Kuai-exact: </author> <title> a new approach for multi-valued logic minimization in VLSI synthesis. </title> <booktitle> In IEEE International Symposium on Circuits and Systems, </booktitle> <year> 1989. </year>
Reference-contexts: X i S. Y S is a set cover of X if for all i, Y " X i 6= ;. 1 An exact minimizer is one which, given enough time and space, will always return a minimum solution 2 An exception is the work of <ref> [3, 8, 9, 10] </ref>. We discuss this work in some detail in section 8. 2 Definition 1.2 X i 2 X is minimal in X if X j X i implies i = j. <p> In addition, we still hope to find the minimum canonical cover by improved techniques for the remaining 5 examples. 8 Related Work In an independent but earlier development, Perkowski et. al. <ref> [3, 8, 9, 10] </ref> developed or commented on ideas very similar to some of those used here. We comment on these in detail below. In [8], the concept of minimal implicants was introduced as any cube obtained by intersecting all the primes which cover a given minterm.
Reference: [11] <author> W. Quine. </author> <title> The problem of simplifying truth functions. </title> <journal> American Mathematical Monthly, </journal> <year> 1952. </year>
Reference-contexts: In the 1950's, Karnaugh introduced the map method; seminal algorithms were given by Quine <ref> [11] </ref> and McCluskey [6] leading to the "Quine-McCluskey" procedure. The three basic steps of this procedure are those used by almost all exact 1 logic optimization procedures to date. 2 These are: 1. Generate all the maximal terms ("primes") of F . 2.
Reference: [12] <author> Bernd Reusch and Lothar Detering. </author> <title> On the generation of prime impli-cants. </title> <journal> Ann. les Societatis Mathematicae Polonae, Series IV, Fundamenta Informaticae II, </journal> <pages> pages 167-186, </pages> <year> 1979. </year>
Reference-contexts: Most research concentrated on improving each step, not on revising the basic procedure. Efficient methods to generate the set of all primes were discovered <ref> [5, 12] </ref>. An elegant method of formulating the set-covering problem was devised and improved set covering algorithms were developed [2]. In 1987, Rudell combined and improved the procedures for prime generation and set covering formulation with improved techniques to solve the set-covering problem in the program Espresso-exact [14, 13].
Reference: [13] <author> R. L. Rudell. </author> <title> Logic Synthesis for VLSI Design. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering and Computer Science, University of California at Berkeley, </institution> <year> 1989. </year>
Reference-contexts: An elegant method of formulating the set-covering problem was devised and improved set covering algorithms were developed [2]. In 1987, Rudell combined and improved the procedures for prime generation and set covering formulation with improved techniques to solve the set-covering problem in the program Espresso-exact <ref> [14, 13] </ref>. Espresso-exact was able to find a minimum solution for 114 out of 134 circuits of an extensive suite of benchmark examples. Rudell's extensive experimental work points the way for improvement in the basic Quine-McCluskey procedure. It demonstrates that the bottleneck is the generation of all the primes. <p> Rudell's extensive experimental work points the way for improvement in the basic Quine-McCluskey procedure. It demonstrates that the bottleneck is the generation of all the primes. The data in <ref> [13] </ref> shows that many circuits had a very large number of primes, often two orders of magnitude more than the minimum solution. Of the 20 "hard" examples on which Espresso-exact failed, 17 had too many primes to be generated in 10 hours on a 1 MIP machine.
Reference: [14] <author> R. L. Rudell and A. L. Sangiovanni-Vincentelli. </author> <title> Multiple-valued minimization for PLA optimization. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <month> September </month> <year> 1987. </year>
Reference-contexts: An elegant method of formulating the set-covering problem was devised and improved set covering algorithms were developed [2]. In 1987, Rudell combined and improved the procedures for prime generation and set covering formulation with improved techniques to solve the set-covering problem in the program Espresso-exact <ref> [14, 13] </ref>. Espresso-exact was able to find a minimum solution for 114 out of 134 circuits of an extensive suite of benchmark examples. Rudell's extensive experimental work points the way for improvement in the basic Quine-McCluskey procedure. It demonstrates that the bottleneck is the generation of all the primes.
Reference: [15] <author> C. E. Shannon. </author> <title> The synthesis of two-terminal switching function. </title> <journal> Bell System Technical Journal, </journal> <year> 1948. </year> <month> 27 </month>
Reference-contexts: x s ), find a sum-of-products expression (a cover of F ) G = g 1 + ::: + g t with minimum t such that F G F + D. fl University of California, Berkeley, Berkeley, CA 94720 1 Apparently, this problem was first considered by Shannon in 1949 <ref> [15] </ref>. In the 1950's, Karnaugh introduced the map method; seminal algorithms were given by Quine [11] and McCluskey [6] leading to the "Quine-McCluskey" procedure. The three basic steps of this procedure are those used by almost all exact 1 logic optimization procedures to date. 2 These are: 1.
References-found: 15

