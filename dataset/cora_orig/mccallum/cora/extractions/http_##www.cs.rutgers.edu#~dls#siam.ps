URL: http://www.cs.rutgers.edu/~dls/siam.ps
Refering-URL: http://www.cs.rutgers.edu/~dls/index.html
Root-URL: http://www.cs.rutgers.edu
Title: Shortest Paths Help Solve Geometric Optimization Problems in Planar Regions  
Author: Elefterios A. Melissaratos and Diane L. Souvaine 
Keyword: Key Words and Phrases: robotics, stock-cutting, computational geometry, enclosure problems, inclusion problems, separators, geometric optimization, shortest paths, visibility, simple polygons, splinegons.  
Date: January 1, 1954  
Address: New Brunswick, NJ 08903  
Affiliation: Department of Computer Science, Rutgers University,  
Abstract: The goal of this paper is to show that the concept of the shortest path inside a polygonal region contributes to the design of efficient algorithms for certain geometric optimization problems involving simple polygons: computing optimum separators, maximum area or perimeter inscribed triangles, a minimum area circumscribed concave quadrilateral, or a maximum area contained triangle. The structure for our algorithms is as follows: a) decompose the initial problem into a low-degree polynomial number of optimization problems; b) solve each individual subproblem in constant time using standard methods of calculus, basic methods of numerical analysis, or linear programming. These same optimization techniques can be applied to splinegons (curved polygons). To do this, we first develop a decomposition technique for curved polygons which we substitute for triangulation in creating equally efficient curved versions of the algorithms for the shortest-path tree, ray-shooting and two-point shortest path problems. The maximum-are or perimeter inscribed triangle problem, the minimum area circumscribed concave quadrilateral problem and maximum area contained triangle problem have applications to robotics and stock-cutting. The results of this paper will appear also in [33]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aggarwal, </author> <booktitle> "Lecture notes in Computational Geometry", MIT Research Seminar Series MIT/LCS/RSS 3, </booktitle> <month> August, </month> <year> 1988. </year>
Reference: [2] <author> A. Aggarwal, J. S. Chang and C. K. Yap, </author> <title> "Minimum Area Circumscribing Polygons", Visual Computer, </title> <booktitle> 1 (1985), </booktitle> <pages> 112-117. </pages>
Reference-contexts: Finding the minimum area circumscribing k-gon of a convex n-gon was solved first in O (n 2 log k log n) time <ref> [2] </ref>, next in O (n 2 log k) time [3], and finally in O (nk + n log n) by Aggarwal and Park [4].
Reference: [3] <author> A. Aggarwal, M. Klawe, S. Moran, P. Shor, R. Wilber, </author> <title> "Geometric Applications to a Matrix Searching Algorithm", </title> <journal> Algorithmica, </journal> <volume> 2 (1987), </volume> <pages> 209-233. </pages>
Reference-contexts: Finding the minimum area circumscribing k-gon of a convex n-gon was solved first in O (n 2 log k log n) time [2], next in O (n 2 log k) time <ref> [3] </ref>, and finally in O (nk + n log n) by Aggarwal and Park [4]. DePano's bound of O (n 3 ) time for computing the minimum perimeter triangle circumscribing a convex n-gon [15] was improved by Aggarwal and Park to O (n log n) time [4]. <p> Boyce et al. [5] computed the maximum area or perimeter convex k-gon inside a convex n-gon in O (kn log n + n log 2 n) time. Aggarwal et al. <ref> [3] </ref> improved the bound to O (kn + n log n). Chang and Yap solved the general problem of finding the maximum area (perimeter) convex polygon contained within a given simple polygon P in O (n 7 ) time (resp.
Reference: [4] <author> A. Aggarwal, J. Park, </author> <title> "Notes on Searching in Multidimensional Monotone Arrays", </title> <booktitle> Proc. 29th IEEE Symp. on Found. of Comp. Sci. </booktitle> <year> (1988), </year> <pages> 497-512. </pages>
Reference-contexts: Finding the minimum area circumscribing k-gon of a convex n-gon was solved first in O (n 2 log k log n) time [2], next in O (n 2 log k) time [3], and finally in O (nk + n log n) by Aggarwal and Park <ref> [4] </ref>. DePano's bound of O (n 3 ) time for computing the minimum perimeter triangle circumscribing a convex n-gon [15] was improved by Aggarwal and Park to O (n log n) time [4]. <p> 2 log k) time [3], and finally in O (nk + n log n) by Aggarwal and Park <ref> [4] </ref>. DePano's bound of O (n 3 ) time for computing the minimum perimeter triangle circumscribing a convex n-gon [15] was improved by Aggarwal and Park to O (n log n) time [4]. Note that any convex k-gon circumscribing a simple polygon P also circumscribes the convex hull of P . Many researchers have studied inclusion problems. Dobkin and Snyder [17] presented a linear-time algorithm for computing the minimum area triangle inscribed in a convex polygon of n vertices.
Reference: [5] <author> J.E. Boyce, </author> <title> D.P. Dobkin, R.L. Drysdale, L.J. Guibas, "Finding Extremal Polygons", </title> <journal> SIAM J. of Computing, </journal> <volume> 14 (1985), </volume> <pages> 134-147. </pages>
Reference-contexts: Note that any convex k-gon circumscribing a simple polygon P also circumscribes the convex hull of P . Many researchers have studied inclusion problems. Dobkin and Snyder [17] presented a linear-time algorithm for computing the minimum area triangle inscribed in a convex polygon of n vertices. Boyce et al. <ref> [5] </ref> computed the maximum area or perimeter convex k-gon inside a convex n-gon in O (kn log n + n log 2 n) time. Aggarwal et al. [3] improved the bound to O (kn + n log n).
Reference: [6] <author> R. D. Bourgin, S. E. Howe, </author> <title> "Algorithms for Shortest Curves in Planar Regions with Curved Boundary", </title> <type> Manuscript, </type> <year> (1989). </year>
Reference-contexts: We have recently learned of some independent work on shortest paths and visibility in curved regions. Many interesting, non-algorithmic, properties of shortest paths inside curvilinear regions appear in [7],[8]. Furthermore, Bourgin and Howe <ref> [6] </ref> provide algorithms for shortest paths between two fixed points in a Jordan region which run in O (nk) time where n is the number of distinct sections of the boundary (i.e. number of vertices of the boundary) of the region and k is the number of the vertices on the
Reference: [7] <author> R. D. Bourgin, M. S. Martin, P. L. Renz, </author> <title> "Shortest Curves in Jordan Regions Vary Continuously with the Boundary", </title> <note> to appear in Advances in Mathematics. </note>
Reference: [8] <author> R. D. Bourgin, P. L. Renz, </author> <title> "Shortest Paths in Simply Connected Regions in R 2 ", Advances in Mathematics, </title> <journal> 76, </journal> <volume> No. 2, </volume> <year> (1989), </year> <pages> pp. 260-295. </pages>
Reference: [9] <author> J. S. Chang, C. K. Yap, </author> <title> "A Polynomial Solution for Potato-Peeling and Other Polygon Inclusion and Enclosure Problems", </title> <journal> Discrete and Comp. Geom., </journal> <volume> 1 (1986), </volume> <pages> 155-182. </pages>
Reference-contexts: A linear algorithm exists for convex polygons [36]. Chang posed the second separator problem [10], claiming applications in finite element analysis. Aggarwal ([1]) posed both the contained triangle problem and the concave circumscribed quadrilateral problem. Chang [10] and Chang and Yap <ref> [9] </ref> previously had posed the contained triangle problem as an open problem. There are numerous results for related problems.
Reference: [10] <author> J. S. Chang, </author> <title> "Polygon Optimization Problems", </title> <type> Ph.D. Thesis, </type> <address> New York University, </address> <year> 1986. </year>
Reference-contexts: The next two paragraphs recite some of the history of the polygon version of these problems. Lisper [32] posed the first separator problem, citing applications in solid modeling and graph cutting. A linear algorithm exists for convex polygons [36]. Chang posed the second separator problem <ref> [10] </ref>, claiming applications in finite element analysis. Aggarwal ([1]) posed both the contained triangle problem and the concave circumscribed quadrilateral problem. Chang [10] and Chang and Yap [9] previously had posed the contained triangle problem as an open problem. There are numerous results for related problems. <p> A linear algorithm exists for convex polygons [36]. Chang posed the second separator problem <ref> [10] </ref>, claiming applications in finite element analysis. Aggarwal ([1]) posed both the contained triangle problem and the concave circumscribed quadrilateral problem. Chang [10] and Chang and Yap [9] previously had posed the contained triangle problem as an open problem. There are numerous results for related problems. <p> Fortunately, the Tarjan-Van Wyk algorithm [42] is applicable to splinegons provided that the edges are monotone to at least one of the axes [19], as is the new linear-time Chazelle algorithm <ref> [10] </ref>. Both algorithms produce a linear number of new vertices. Ordinarily, there will be at most one interior vertex per trapezoid edge. However, in some applications, several vertices may have the same y-coordinate, producing an arbitrary number of vertices within a base of a trapezoid.
Reference: [11] <author> B. Chazelle, </author> <title> "Triangulating a Simple Polygon in Linear Time", </title> <booktitle> Proc. 31st IEEE Symp. on Found. of Comp. Sci., </booktitle> <year> (1990), </year> <pages> 220-230. </pages>
Reference: [12] <author> B. Chazelle, D. Dobkin, </author> <title> "Intersection of convex objects in two and three dimensions", </title> <journal> J. ACM, </journal> <volume> 34 (1987), </volume> <pages> 1-27. </pages>
Reference: [13] <author> B. Chazelle, L. Guibas, </author> <title> "Visibility and Intersection Problems in Plane Geometry", </title> <journal> Discrete and Comp. Geom., </journal> <volume> 4 (1989), </volume> <pages> 551-581. </pages>
Reference-contexts: Let S l be a polygon or splinegon at level l in the decomposition tree, and let d l be the roughly bisecting diagonal of S l . The boundary of S l consists of some edges of S and some diagonals. The factor graph <ref> [13] </ref> has edges between d l and the bounding diagonals of S l ; in other words, edges of the factor graph correspond to pairs of bisecting diagonals. <p> Since representing an hourglass explicitly uses O (n) space, the augmented factor graph could use O (n 2 ) space overall. By keeping each edge of an hourglass only at the highest level in which it appears in the tree, Chazelle and Guibas <ref> [13] </ref> demonstrated that the augmented factor graph could be designed to have the following properties: the augmented factor graph has size O (n), each node has degree O (log n), and the graph can be constructed from the decomposition of the polygon in O (n) time. <p> If it is an edge of S, report it. If not, perform rayshooting as described below in the pocket having that edge as a lid, a new splinegon. As in <ref> [13] </ref>, if q lies within S, find the diagonal crossed by the shooting ray which is closest to the root of the decomposition tree. <p> Then, using fractional cascading, the O (log n) intersection tests between convex chains and the line can all be accomplished in O (log n) time. This algorithm differs from the original polygon algorithm <ref> [13] </ref> in only one respect. In the polygon algorithm, the test of whether a line intersects an hourglass is transformed to the dual problem of point inclusion in a convex polygon, solvable using a variant of binary search. <p> One algorithm would consider all triples of pairs of reflex vertices i.e O (n 6 ) objects, check whether the corresponding triangle is contained in P in O (log n) time using ray-shooting <ref> [13] </ref> or [26], and choose the largest one. This brute force approach requires O (n 6 log n) arithmetic operations.
Reference: [14] <author> P. Chew, K. Kedem, </author> <title> "Placing the Largest Similar Copy of a Convex Polygon among Polygonal Obstacles", </title> <booktitle> Proc. of ACM Symp. Comp. Geom. </booktitle> <year> (1989), </year> <pages> 167-74. </pages>
Reference-contexts: O (n 6 ) time) and O (n 5 ) space [9],[10]. DePano et al. [16] gave an O (n 3 ) algorithm for maximum area equilateral triangle contained in a simple polygon. This result can be improved using a recent result of Chew and Kedem <ref> [14] </ref> for the problem of placing the largest similar copy of a convex k-gon in an arbitrary polygonal environment. S. Fortune [22] solved the problem of placing the largest homothetic copy of a k-gon in a simple polygon in O (kn log kn) time.
Reference: [15] <author> N.A.A. DePano, </author> <title> "Polygon Approximation with Optimized Polygonal Enclosures: Applications and Algorithms", </title> <type> Ph.D. thesis, </type> <institution> Dept of Computer Science, Johns Hopkins University, </institution> <month> April </month> <year> 1988. </year>
Reference-contexts: DePano's bound of O (n 3 ) time for computing the minimum perimeter triangle circumscribing a convex n-gon <ref> [15] </ref> was improved by Aggarwal and Park to O (n log n) time [4]. Note that any convex k-gon circumscribing a simple polygon P also circumscribes the convex hull of P . Many researchers have studied inclusion problems.
Reference: [16] <author> N.A. DePano, Yan Ke, J. O'Rourke, </author> <title> "Finding Largest Inscribed Equilateral Triangles and Squares", </title> <booktitle> Proc. of the Allerton Conference, </booktitle> <year> 1987. </year>
Reference-contexts: Chang and Yap solved the general problem of finding the maximum area (perimeter) convex polygon contained within a given simple polygon P in O (n 7 ) time (resp. O (n 6 ) time) and O (n 5 ) space [9],[10]. DePano et al. <ref> [16] </ref> gave an O (n 3 ) algorithm for maximum area equilateral triangle contained in a simple polygon. This result can be improved using a recent result of Chew and Kedem [14] for the problem of placing the largest similar copy of a convex k-gon in an arbitrary polygonal environment.
Reference: [17] <author> D. Dobkin, L. Snyder, </author> <title> "On a General Method for Maximizing and Minimizing among Certain Geometric Problems", </title> <booktitle> Proc. 20th IEEE Symp. on Found. of Comp. Sci. </booktitle> <year> (1979), </year> <pages> 9-17. </pages>
Reference-contexts: Note that any convex k-gon circumscribing a simple polygon P also circumscribes the convex hull of P . Many researchers have studied inclusion problems. Dobkin and Snyder <ref> [17] </ref> presented a linear-time algorithm for computing the minimum area triangle inscribed in a convex polygon of n vertices. Boyce et al. [5] computed the maximum area or perimeter convex k-gon inside a convex n-gon in O (kn log n + n log 2 n) time.
Reference: [18] <author> D. Dobkin, D. Souvaine, </author> <title> "Computational Geometry in a Curved World", </title> <journal> Algorithmica, </journal> <volume> 5 (1990), </volume> <pages> 421-457. </pages>
Reference-contexts: Although our main results refer to the polygon case of the optimization problems, we extend our results to the curvilinear case also. Souvaine and Dobkin have recently argued that, wherever possible, new results should be presented for polygons and curved polygons simultaneously <ref> [18] </ref>. To make these extensions feasible we need to develop algorithms for shortest paths and visibility problems in curvilinear objects. Unfortunately, shortest paths and visibility represent an area in which little work has been done on curved polygons. <p> In order to express our results on the optimization problems in as general terms as possible, we begin by focusing on decompositions, shortest paths, and visibility in splinegons, curved polygons in which the region bounded by each curved edge and the line segment joining its endpoints is always convex <ref> [18] </ref>. The polygonal shortest path and visibility algorithms all require a triangulated polygon. <p> Preliminary reports on this work have appeared in the Proceedings of the 6th ACM Symposium on Computational Geometry and in the Proceedings of the 2nd Canadian Conference on Computational Geometry. 1 boundary and in the interior; furthermore, curved triangles are not necessarily convex <ref> [18] </ref>, [19], [41]. By substituting a new bounded degree decomposition which is linear-time equivalent to triangulation, we generate equally-efficient curved versions of the polygon algorithms for creating shortest paths and factor graphs and for solving visibility from an edge, ray-shooting, and two-point shortest paths. <p> There are two main changes to make. One is that splitting the funnels may involve computing tangents from a point to a curve or between a pair of curved edges. But we may assume that each curved operation requires constant time <ref> [18] </ref>, so there is no asymptotic penalty. More importantly, at a node corresponding to a quadrilateral, there are two splitting points rather than just one (see fig. 4). Let t 1 ; t 2 be the two splitting points of the current funnel on base AB.
Reference: [19] <author> D. Dobkin, D. Souvaine, C. Van Wyk, </author> <title> "Decomposition and intersection of splinegons", </title> <journal> Algorithmica, </journal> <volume> 3 (1988), </volume> <pages> 473-485. </pages>
Reference-contexts: Preliminary reports on this work have appeared in the Proceedings of the 6th ACM Symposium on Computational Geometry and in the Proceedings of the 2nd Canadian Conference on Computational Geometry. 1 boundary and in the interior; furthermore, curved triangles are not necessarily convex [18], <ref> [19] </ref>, [41]. By substituting a new bounded degree decomposition which is linear-time equivalent to triangulation, we generate equally-efficient curved versions of the polygon algorithms for creating shortest paths and factor graphs and for solving visibility from an edge, ray-shooting, and two-point shortest paths. <p> recurs only to one of the funnels although the algorithm of [26] may recur to both split funnels. 2.2 Bounded degree decomposition of splinegons To extend the polygonal shortest path algorithm [26] to work for splinegons, we first need to find an acceptable substitute for triangulation, since Dobkin et al. <ref> [19] </ref> have shown triangulation of splinegons to be infeasible. One candidate decomposition is the horizontal visibility map which would decompose the splinegon into horizontal trapezoids (with curved sides). <p> One candidate decomposition is the horizontal visibility map which would decompose the splinegon into horizontal trapezoids (with curved sides). Fortunately, the Tarjan-Van Wyk algorithm [42] is applicable to splinegons provided that the edges are monotone to at least one of the axes <ref> [19] </ref>, as is the new linear-time Chazelle algorithm [10]. Both algorithms produce a linear number of new vertices. Ordinarily, there will be at most one interior vertex per trapezoid edge.
Reference: [20] <author> H. Edelsbrunner, L. Guibas, G. Stolfi, </author> <title> "Optimal point location in monotone subdivisions", </title> <journal> SIAM J. Comput., </journal> <volume> 15 (1986), </volume> <pages> 317-340. </pages>
Reference-contexts: Given the bounded degree decomposition both of S and of the pockets identified in the process of computing the convex hull, a layered dag can be constructed in linear time, allowing the location of a query point in a component of the decomposition to be determined in logarithmic time <ref> [20] </ref>. Theorem 2.4 Computing the part of the boundary of a simple splinegon S of n vertices which is visible from an edge requires O (n) time given the horizontal visibility decomposition of S. <p> Proof: Locate the query point q in the decomposition using the layered dag <ref> [20] </ref>. If q is outside CH (S), then determine the convex hull edge first crossed by the shooting ray in logarithmic time [12],[18]. If it is an edge of S, report it.
Reference: [21] <author> R. Fleischer, K. Mehlhorn, G. Rote, E. Welzl, C. Yap, </author> <title> "On Simultaneous Inner and Outer Approximation of Shapes," </title> <booktitle> Proc. of the 6th ACM Symp. on Comp. Geometry, </booktitle> <month> June </month> <year> 1990, </year> <pages> 216-224. </pages>
Reference-contexts: Some recent research has focused on simultaneous inner and outer approximation of convex polygons by a pair of rectangles [39] or by a pair of similar triangles <ref> [21] </ref>. We have recently learned of some independent work on shortest paths and visibility in curved regions. Many interesting, non-algorithmic, properties of shortest paths inside curvilinear regions appear in [7],[8].
Reference: [22] <author> S. Fortune, </author> <title> "A Fast Algorithm For Polygon Containment By Translation", </title> <booktitle> Proc. 13th ICALP (1985), </booktitle> <pages> 189-198. </pages>
Reference-contexts: This result can be improved using a recent result of Chew and Kedem [14] for the problem of placing the largest similar copy of a convex k-gon in an arbitrary polygonal environment. S. Fortune <ref> [22] </ref> solved the problem of placing the largest homothetic copy of a k-gon in a simple polygon in O (kn log kn) time.
Reference: [23] <author> A. Fournier and D. Y. Montuno, </author> <title> "Triangulating Simple Polygons and Equivalent Problems", </title> <journal> ACM Transactions on Graphics, </journal> <volume> 3 (1984), </volume> <pages> 153-74. </pages>
Reference-contexts: Proof: The algorithm described above first computes the horizontal visibility information and then spends at most constant time per vertex refining the decomposition. Fournier and Montuno have proved that triangulating a polygon is linear-time equivalent to computing horizontal visibility information <ref> [23] </ref>. 2 2.3 Shortest Paths in Splinegons Minor revisions allow the polygonal shortest path algorithm [26] to work for curved polygons, also known as splinegons, in comparable time and space bounds.
Reference: [24] <author> M. Garey, D. Johnson, F. Preparata, R. Tarjan, </author> <title> "Triangulation of a simple polygon", </title> <journal> Information Processing Letters, </journal> <volume> 7 (1978), </volume> <pages> 175-179. </pages>
Reference: [25] <author> L. Guibas, J. Hershberger, </author> <title> "Optimal shortest path queries in a simple polygon", </title> <booktitle> Proc. ACM Symp. on Comp. Geometry, </booktitle> <year> (1987). </year>
Reference-contexts: Proof: The polygon algorithm of <ref> [25] </ref> extends directly. 2 3 Separators In this section we solve two optimum polygon separator problems and then generalize those solutions to accommodate splinegons. It should be clear that an area separator does not always exist. For example, there are polygons (splinegons) that cannot be bisected by a single segment.
Reference: [26] <author> L. Guibas, J. Hershberger, D. Leven, M. Sharir, R. Tarjan, </author> <title> "Linear Time Algorithms for Visibility and Shortest Path Problems inside Triangulated Simple Polygons", </title> <journal> Algorithmica, </journal> <volume> 2 (1987), </volume> <pages> 209-233. </pages>
Reference-contexts: 1 Introduction The linear-time algorithm for computing the lengths of the shortest paths inside a triangulated simple polygon from a designated start vertex <ref> [26] </ref> provides a useful tool in developing efficient polygon algorithms for a class of geometric optimization problems. Although our main results refer to the polygon case of the optimization problems, we extend our results to the curvilinear case also. <p> If two edges i and j of P are visible from each other, the set of points of j which are visible from i form the visible part of j with respect to i. In <ref> [26] </ref> the authors describe a linear time and space algorithm for finding the shortest paths from a point v inside or on the boundary of P to all its vertices, if P represents a triangulated simple polygon. <p> The region bounded by the above chains and i and j is called an hourglass and denoted H i;j <ref> [26] </ref>. Assuming that polygon P is triangulated, the shortest path algorithm of [26] from a vertex s of P proceeds as follows. Assume without loss of generality that s lies on only one triangle. <p> The region bounded by the above chains and i and j is called an hourglass and denoted H i;j <ref> [26] </ref>. Assuming that polygon P is triangulated, the shortest path algorithm of [26] from a vertex s of P proceeds as follows. Assume without loss of generality that s lies on only one triangle. <p> If those edges both lie on the boundary of P , then this triangle is a leaf. If both are interior to P , then this triangle has two children. Otherwise, this triangle has one child <ref> [26] </ref>. The use of the triangulation of the polygon as well as of the funnels, in the computation of shortest paths inside simple polygons, appeared first in a paper by Lee and Preparata [31]. <p> The difference is in the following two aspects: a) funnel representation (Lee and Preparata represent the funnels as linked lists and not as finger search trees), b) when a funnel is split the algorithm of [31] recurs only to one of the funnels although the algorithm of <ref> [26] </ref> may recur to both split funnels. 2.2 Bounded degree decomposition of splinegons To extend the polygonal shortest path algorithm [26] to work for splinegons, we first need to find an acceptable substitute for triangulation, since Dobkin et al. [19] have shown triangulation of splinegons to be infeasible. <p> as linked lists and not as finger search trees), b) when a funnel is split the algorithm of [31] recurs only to one of the funnels although the algorithm of <ref> [26] </ref> may recur to both split funnels. 2.2 Bounded degree decomposition of splinegons To extend the polygonal shortest path algorithm [26] to work for splinegons, we first need to find an acceptable substitute for triangulation, since Dobkin et al. [19] have shown triangulation of splinegons to be infeasible. One candidate decomposition is the horizontal visibility map which would decompose the splinegon into horizontal trapezoids (with curved sides). <p> Fournier and Montuno have proved that triangulating a polygon is linear-time equivalent to computing horizontal visibility information [23]. 2 2.3 Shortest Paths in Splinegons Minor revisions allow the polygonal shortest path algorithm <ref> [26] </ref> to work for curved polygons, also known as splinegons, in comparable time and space bounds. <p> Clearly a region with two children must be a straight-edged triangle. Thus, only regions with at most one child need different processing. If the total contribution of the one-child components to the complexity of the algorithm remains O (n), then the recursive formula used in <ref> [26] </ref> to prove the linearity of the entire algorithm still applies. There are two main changes to make. One is that splitting the funnels may involve computing tangents from a point to a curve or between a pair of curved edges. <p> a balanced binary decomposition tree in which each node corresponds to a subpolygon P and to a diagonal d which divides P so that neither of the two children subpolygons P L and P R contains more than 2=3 of the triangles of P ; d roughly 7 bisects P <ref> [26] </ref>. As all of the diagonals in the bounded degree decomposition of a splinegon S are straight segments, this algorithm extends directly to splinegons. Assume that S is the initial polygon or splinegon and that we are given a balanced decomposition tree for S. <p> linear-time polygon algorithm uses the fact that if edges i, j are visible from each other then the shortest paths from p j+1 to p i (SP p j+1 (p i )) and from p i+1 to p j (SP p i+1 (p j )) are inward disjoint convex chains <ref> [26] </ref>. For splinegons, this fact does not hold (fig. 8). We present a new method based on local computations for computing the visibility of an edge in either a polygon or a splinegon. <p> fan-shaped polygons corresponding to all triples (i; j; k) of edges of P is: O ( i=1 j=1 k=1 (s j + s i + s k + s k )) which is O (n 3 ) since P n k = O (n) for any vertex v of P <ref> [26] </ref>. 2 An alternative way of proving the above bound is to prove the following combinatorial result of independent interest: Lemma 4.6 The sum of the sizes of all legal fan-shaped polygons with 3 bases of a simple polygon P is O (n 3 ). <p> Let D i denote the symmetric difference of the shortest path maps from the endpoints of edge i. Also let d i j be the part of D i which intersects edge j. Assuming that the shortest path map from vertex p 1 has already been computed <ref> [26] </ref>, Hershberger [29] shows that the shortest path map from p 2 can be computed incrementally by scanning the boundary of P in counterclockwise order starting from p 2 and going back to p 1 , in time proportional to the symmetric difference of the two shortest path maps D 1 <p> pairs k, l of vertices of CH (P ) do for i = 1 to p do begin Compute the visibility polygon V Q i of Q i from pseudo-edge v i w i and the shortest path maps inside V Q i from both v i and w i <ref> [26] </ref>. Merge those maps [27] and label each region ( 6 sides) with its anchors w.r.t. v i and w i . For every region R, call pocket (a; b; k; l; i; R) . end. Report the optimum. <p> Proof: Computing the visibility polygon and the shortest paths within a pocket can be done in O (n) time <ref> [26] </ref>. Two convex plane subdivisions S 1 and S 2 with m and n vertices respectively, can be merged in O (m + n + k) time and space where k is the size of the resultant subdivision. <p> One algorithm would consider all triples of pairs of reflex vertices i.e O (n 6 ) objects, check whether the corresponding triangle is contained in P in O (log n) time using ray-shooting [13] or <ref> [26] </ref>, and choose the largest one. This brute force approach requires O (n 6 log n) arithmetic operations. <p> Fix a pair of reflex vertices C and D with the characteristic that CD P and all edges incident to C and D lie on the same side of the line containing CD. Assume that side yz contains these vertices. Determine in O (log n) time ([13] or <ref> [26] </ref>) the points G and H closest to C and D, respectively, where the line through segment CD intersects the boundary of P . Let P 0 represent the subpolygon of P which lies at the opposite side of GH from the edges incident to C and D.
Reference: [27] <author> L. Guibas and R. Seidel, </author> <title> "Computing Convolutions via Reciprocal Search", Discrete and Computational Geometry, </title> <booktitle> 2 (1988), </booktitle> <pages> 175-193. </pages>
Reference-contexts: Merge those maps <ref> [27] </ref> and label each region ( 6 sides) with its anchors w.r.t. v i and w i . For every region R, call pocket (a; b; k; l; i; R) . end. Report the optimum.
Reference: [28] <author> L. Guibas and J. Stolfi, </author> <title> "Primitives for the Manipulation of General Subdivisions and the Computation of Voronoi Diagrams, </title> " <journal> ACM Trans. Graphics, </journal> <volume> 4 (1985), </volume> <pages> 74-123. </pages>
Reference: [29] <author> J. Hershberger, </author> <title> "An Optimal Visibility Graph Algorithm for Triangulated Simple polygons", </title> <journal> Algorith-mica, </journal> <volume> 4 (1989), </volume> <pages> 141-155. </pages>
Reference-contexts: Subsequently we combine our techniques with Hershberger's output sensitive visibility graph technique <ref> [29] </ref>, to create modified algorithms for the area separator and maximum area or perimeter inscribed triangle problems which run in O (m) and O (n 2 + nm) time respectively, where m is the size of the visibility graph of P . <p> In order to do that, we fix a particular edge j and find the shortest path map from one of its endpoints, say p j . Then starting from the other endpoint p j+1 , we construct the shortest path map from p j+1 incrementally, as in <ref> [29] </ref>. In order to combine it with our method, at each step, update the appropriate areas and solve the corresponding continuous optimization problem. Repeat the whole process for every j. <p> In each of a) and b) we expend O (n 3 ) time. Now we are going to see how the Hershberger technique <ref> [29] </ref> of creating shortest paths incrementally can profitably be combined with our method of the previous section. First, we define some terms and notation. Let i and j be two polygon edges. <p> Let D i denote the symmetric difference of the shortest path maps from the endpoints of edge i. Also let d i j be the part of D i which intersects edge j. Assuming that the shortest path map from vertex p 1 has already been computed [26], Hershberger <ref> [29] </ref> shows that the shortest path map from p 2 can be computed incrementally by scanning the boundary of P in counterclockwise order starting from p 2 and going back to p 1 , in time proportional to the symmetric difference of the two shortest path maps D 1 .
Reference: [30] <author> V. Klee and M. Laskowski, </author> <title> "Finding the Smallest Triangles Containing a Given Convex Polygon", </title> <editor> J. </editor> <booktitle> of Algorithms, 6 (1985), </booktitle> <pages> 359-375. </pages>
Reference-contexts: Chang [10] and Chang and Yap [9] previously had posed the contained triangle problem as an open problem. There are numerous results for related problems. The Klee-Laskowski bound of O (n log 2 n) time for computing the minimum area triangle containing a convex n-gon time <ref> [30] </ref> was improved to linear time by O' Rourke, Aggarwal, Maddila, and Baldwin [37].
Reference: [31] <author> D. T. Lee and F. P. Preparata, </author> <title> "Euclidean Shortest Paths in the Presence of rectilinear barriers", </title> <journal> Networks, </journal> <volume> 14, No. 3 (1984), </volume> <pages> pp. 393-410. </pages>
Reference-contexts: Otherwise, this triangle has one child [26]. The use of the triangulation of the polygon as well as of the funnels, in the computation of shortest paths inside simple polygons, appeared first in a paper by Lee and Preparata <ref> [31] </ref>. Lee and Preparata, present an algorithm to compute the length of the shortest path between two fixed points inside a simple polygon. <p> The difference is in the following two aspects: a) funnel representation (Lee and Preparata represent the funnels as linked lists and not as finger search trees), b) when a funnel is split the algorithm of <ref> [31] </ref> recurs only to one of the funnels although the algorithm of [26] may recur to both split funnels. 2.2 Bounded degree decomposition of splinegons To extend the polygonal shortest path algorithm [26] to work for splinegons, we first need to find an acceptable substitute for triangulation, since Dobkin et al.
Reference: [32] <author> B. Lisper, TheoryNet posting and followup communication, </author> <month> July, </month> <year> 1988. </year>
Reference-contexts: We expect that the fan-shaped polygon/splinegon will become a useful tool in other applications as well. The next two paragraphs recite some of the history of the polygon version of these problems. Lisper <ref> [32] </ref> posed the first separator problem, citing applications in solid modeling and graph cutting. A linear algorithm exists for convex polygons [36]. Chang posed the second separator problem [10], claiming applications in finite element analysis. Aggarwal ([1]) posed both the contained triangle problem and the concave circumscribed quadrilateral problem.
Reference: [33] <author> E. A. Melissaratos, </author> <type> Ph.D Thesis in preparation, </type> <institution> Rutgers University (1991). </institution>
Reference-contexts: Sections 3 to 6 examine each of the optimization problems in turn. Preliminary results of this paper appear in [34], [35]. The results of this paper will appear also in Melissaratos's forthcoming thesis, <ref> [33] </ref>. 2 Shortest paths and visibility in polygons and splinegons 2.1 Shortest paths in simple polygons In the next few paragraphs we establish our conventions and review necessary facts and definitions.
Reference: [34] <author> E. A. Melissaratos and D. L. Souvaine, </author> <title> "On Solving Geometric Optimization Problems Using Shortest Paths," </title> <booktitle> Proc. of the 6th ACM Symp. on Comp. Geometry, </booktitle> <month> June </month> <year> 1990, </year> <pages> 350-359. </pages>
Reference-contexts: Sections 2.2-2.5 are long and detailed and may be omitted by a reader primarily interested in the polygonal versions of the optimization results. Sections 3 to 6 examine each of the optimization problems in turn. Preliminary results of this paper appear in <ref> [34] </ref>, [35]. The results of this paper will appear also in Melissaratos's forthcoming thesis, [33]. 2 Shortest paths and visibility in polygons and splinegons 2.1 Shortest paths in simple polygons In the next few paragraphs we establish our conventions and review necessary facts and definitions.
Reference: [35] <author> E. A. Melissaratos and D. L. Souvaine, </author> <title> "Shortest Paths, Visibility, and Optimization Problems in Planar Curvilinear Objects," </title> <booktitle> Proc. of the 2nd Canadian Conf. on Comp. Geometry, </booktitle> <month> August </month> <year> 1990, </year> <pages> pp. 337-342. </pages>
Reference-contexts: Sections 2.2-2.5 are long and detailed and may be omitted by a reader primarily interested in the polygonal versions of the optimization results. Sections 3 to 6 examine each of the optimization problems in turn. Preliminary results of this paper appear in [34], <ref> [35] </ref>. The results of this paper will appear also in Melissaratos's forthcoming thesis, [33]. 2 Shortest paths and visibility in polygons and splinegons 2.1 Shortest paths in simple polygons In the next few paragraphs we establish our conventions and review necessary facts and definitions.
Reference: [36] <author> J. D. Mittleman and D. L. Souvaine, </author> <title> "Shortest Area-Bisector of a Convex Polygon", </title> <institution> Rutgers University Technical Report LCSR-TR-139, </institution> <month> November </month> <year> 1989. </year>
Reference-contexts: The next two paragraphs recite some of the history of the polygon version of these problems. Lisper [32] posed the first separator problem, citing applications in solid modeling and graph cutting. A linear algorithm exists for convex polygons <ref> [36] </ref>. Chang posed the second separator problem [10], claiming applications in finite element analysis. Aggarwal ([1]) posed both the contained triangle problem and the concave circumscribed quadrilateral problem. Chang [10] and Chang and Yap [9] previously had posed the contained triangle problem as an open problem.
Reference: [37] <author> J. O' Rourke, A. Aggarwal, S. Maddila, M. Baldwin, </author> <title> "An Optimal Algorithm for Finding Minimal Enclosing Triangles", </title> <journal> J. Algorithms, </journal> <volume> 7 (1986), </volume> <pages> 258-269. </pages>
Reference-contexts: There are numerous results for related problems. The Klee-Laskowski bound of O (n log 2 n) time for computing the minimum area triangle containing a convex n-gon time [30] was improved to linear time by O' Rourke, Aggarwal, Maddila, and Baldwin <ref> [37] </ref>. Finding the minimum area circumscribing k-gon of a convex n-gon was solved first in O (n 2 log k log n) time [2], next in O (n 2 log k) time [3], and finally in O (nk + n log n) by Aggarwal and Park [4]. <p> The midpoint of BC (DC resp.) either lies on Q i or it lies between two distinct points of tangency on BC relative to Q i . 2 We exclude the collinear case since this reduces in finding the minimum area triangle containing a convex polygon, a problem solved in <ref> [37] </ref>. 3 The lemma does not necessarily hold for splinegons. 19 Proof: a) According to lemma 5.1, AB is tangent to CH (P ).
Reference: [38] <author> M. H. Overmars and J. van Leeuwen, </author> <title> "Maintenance of Configurations in the Plane", </title> <journal> J. Comput. System Sci., </journal> <volume> 23 (1981), </volume> <pages> 166-204. </pages>
Reference: [39] <author> O. Schwarzkopf, U. Fuchs, G. Rote, E. Welzl, </author> <title> "Approximation of Convex Figures by Pairs of Rectangles", </title> <booktitle> Proc. of Symp. on Theoretical Aspects of Computer Science, Lecture Notes in Computer Science 415 (1990), </booktitle> <pages> 240-249. </pages>
Reference-contexts: S. Fortune [22] solved the problem of placing the largest homothetic copy of a k-gon in a simple polygon in O (kn log kn) time. Some recent research has focused on simultaneous inner and outer approximation of convex polygons by a pair of rectangles <ref> [39] </ref> or by a pair of similar triangles [21]. We have recently learned of some independent work on shortest paths and visibility in curved regions. Many interesting, non-algorithmic, properties of shortest paths inside curvilinear regions appear in [7],[8].
Reference: [40] <author> A. Shaffer and C. J. Van Wyk, </author> <title> "Convex hulls of piecewise-smooth Jordan curves", </title> <journal> J. Algorithms, </journal> <volume> 8 (1987), </volume> <pages> 66-94. </pages>
Reference: [41] <author> D. L. Souvaine, </author> <title> "Computational Geometry in a Curved World." </title> <type> Ph.D. Thesis, </type> <institution> Princeton University, </institution> <month> October, </month> <year> 1986. </year>
Reference-contexts: Preliminary reports on this work have appeared in the Proceedings of the 6th ACM Symposium on Computational Geometry and in the Proceedings of the 2nd Canadian Conference on Computational Geometry. 1 boundary and in the interior; furthermore, curved triangles are not necessarily convex [18], [19], <ref> [41] </ref>. By substituting a new bounded degree decomposition which is linear-time equivalent to triangulation, we generate equally-efficient curved versions of the polygon algorithms for creating shortest paths and factor graphs and for solving visibility from an edge, ray-shooting, and two-point shortest paths.
Reference: [42] <author> R.E.Tarjan and C. Van Wyk, </author> <title> "Triangulation of a Simple Polygon", </title> <journal> SIAM Journal of Computing, </journal> <month> 17 </month> <year> (1988), </year> <month> 143-178. </month> <title> 26 the algorithm. 27 28 29 30 31 to p i . sides tangent to the chains of the fan-shaped splinegon, as was true in the polygon case. </title> <type> 32 33 34 35 36 </type>
Reference-contexts: One candidate decomposition is the horizontal visibility map which would decompose the splinegon into horizontal trapezoids (with curved sides). Fortunately, the Tarjan-Van Wyk algorithm <ref> [42] </ref> is applicable to splinegons provided that the edges are monotone to at least one of the axes [19], as is the new linear-time Chazelle algorithm [10]. Both algorithms produce a linear number of new vertices. Ordinarily, there will be at most one interior vertex per trapezoid edge.
References-found: 42

