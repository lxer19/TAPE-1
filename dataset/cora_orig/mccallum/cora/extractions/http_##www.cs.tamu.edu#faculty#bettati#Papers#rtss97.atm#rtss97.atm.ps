URL: http://www.cs.tamu.edu/faculty/bettati/Papers/rtss97.atm/rtss97.atm.ps
Refering-URL: http://www.cs.tamu.edu/faculty/bettati/selected_papers.html
Root-URL: http://www.cs.tamu.edu
Title: Static Priority Scheduling for ATM Networks  
Author: Chengzhi Li Riccardo Bettati Wei Zhao 
Affiliation: Department of Computer Science Texas A M University  
Address: (RTSS'97), San Francisco, CA,  College Station, TX 77843-3112  
Note: As appeared in: Proceedings of the Real-Time Systems Symposium  
Email: Email: fchengzhi,bettati,zhaog@cs.tamu.edu  
Phone: FAX 409 847 8578 Phone 409 845 5098  
Date: Dec. 1997.  
Abstract: Static-priority scheduling is popular for traffic scheduling in ATM switches because it is less costly than dynamic priority scheduling while being sensitive to the delay constraints of connections. We study delay computation and priority assignment problems in an ATM networks with static priority scheduling. Given an ATM network with arbitrary topology, it is possible that the traffic on it may become unstable (i.e., packet delays become unbounded) due to the potential cyclic dependency of the traffic. An unstable network is definitely unacceptable for many delay sensitive applications. We start by formally deriving a simple condition under which the network is guaranteed to be stable. We then develop a numerical method to compute worst-case end-to-end delays in an ATM network with arbitrary topology. Convergence of the method is formally proved and a closed form for the computing error is obtained. Despite of its advantages, static-priority scheduling remains sensitive to proper priority assignment. We describe two simple priority assignment methods, which we show to outperform other commonly used methods. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. C. Audsley, A. Burns, M. F. Richardson, and A. J. Wellings. </author> <title> Hard real-time scheduling: the deadline-monotonic approach. </title> <booktitle> In Proc. of the Eighth RTOSS , May 1991. </booktitle>
Reference-contexts: Based on the delay-computation method developed, we study five priority assignment algorithms. As the base method for comparison, we assign the same priority to all connections, effectively scheduling cells in FCFS manner. The second algorithm assigns the priority in a deadline-monotonic manner <ref> [1, 13] </ref>. That is, the smaller the relative deadline of a connection, the higher is its priority. The third algorithm combines the first two by recursively partitioning the connection set into subsets of connections. <p> Intuitively, the smaller the relative deadline of a connection is, the higher its priority should be. The relative deadline monotonic (RDM) algorithm <ref> [1, 13] </ref> assigns priorities in this order. For single-server systems and periodic workload, RDM is known to be an optimal static-priority assignment algorithm. Interestingly, our evaluations show that RDM does not perform well when connections traverse multiple servers.
Reference: [2] <author> P. Boyer, F. Guillemin, M. Servel, and J. Coudreuse. </author> <title> Spacing cells protects and enhances utilization of ATM network links. </title> <journal> IEEE Network, </journal> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: Most previous work also assumes that either cyclic dependencies among connections do not exist or that they are eliminated by some internal network control mechanism (e.g., traffic regulation, reshaping by dedicated hardware, and framing) <ref> [2, 4, 5, 11] </ref>. We explicitly take into account possible cyclic dependencies among connections without using such mechanisms. We investigate and obtain conditions under which the system is stable and are able to determine the delay bounds under such conditions. 3.
Reference: [3] <author> D. D. Clark, S. Shenker, and L. Zhang. </author> <title> Supporting real-time applications in an integrated services packet network: Architecture and mechanism. </title> <booktitle> In Proc. of ACM SIGCOMM'92, </booktitle> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: Nevertheless, considerable progress has been made recently towards obtaining delay bounds for network traffic in a va riety of settings. Much of the previous studies on meeting end-to-end deadlines in ATM networks have concentrated primarily on the design and the analysis of scheduling policies for ATM switches <ref> [3, 6, 8, 11, 17, 19, 25] </ref>. The efficient implementation of most of these schemes turns out to be difficult in high-performance switches. Therefore, most ATM switches have very simple support for traffic scheduling, typically in form of FCFS or static priority.
Reference: [4] <author> R. L. Cruz. </author> <title> A calculus for network delay, partI, part II. </title> <journal> IEEE Trans. on Information Theory, </journal> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: In this approach, the network is decomposed into servers, and each ATM connection is viewed as traversing a sequence of servers. The worst-case end-to-end cell delays are obtained by summing up the upper bounds of the delays suffered by a connection at each of the servers <ref> [4, 17, 18] </ref>. * Stability. Because the topology of an ATM network can be arbitrary, it is possible that traffic of one connection interacts with that of another, resulting in a cyclic dependency among the connections. <p> Because the topology of an ATM network can be arbitrary, it is possible that traffic of one connection interacts with that of another, resulting in a cyclic dependency among the connections. In this case, the system may become unstable in the sense that some of the delays are unbounded <ref> [4, 17] </ref>. Even if the system is stable, an iterative procedure must be used for the delay computation to accommodate these feedback effects. In [19], the stability problem was addressed for systems with FCFS scheduling. <p> It is to be expected that an algorithm that is aware of the topology or the load of the system performs better than strictly deadline driven. We therefore go on to study a basic priority assignment approach described by Cruz <ref> [4] </ref> for a limited class of system configurations. We integrate the scheme proposed by Cruz with our partition scheme, in fact proposing an algorithm that is both delay aware and topology aware. Our evaluations show that the integrated approach by a large margin outperforms the remaining four algorithms. <p> Most previous work also assumes that either cyclic dependencies among connections do not exist or that they are eliminated by some internal network control mechanism (e.g., traffic regulation, reshaping by dedicated hardware, and framing) <ref> [2, 4, 5, 11] </ref>. We explicitly take into account possible cyclic dependencies among connections without using such mechanisms. We investigate and obtain conditions under which the system is stable and are able to determine the delay bounds under such conditions. 3. <p> A server is an abstraction of a network component 2 be it an input port, a switching fabric, an output port, or a physical link which is used by a connection. Traditionally, servers are classified into two categories: constant servers and variable servers <ref> [4, 18, 19] </ref>. A constant server delays each cell by a constant amount of time. It does not, by itself, change the traffic flow characteristics of a connection. For example, physical links and nonblocking switching fabrics are constant servers. <p> In the following discussion, we will assume that the traffic entering the network is bounded by a linear traffic function <ref> [4] </ref> of the form F (I ) = min (I ; fi + fl I ); (2) which models a traffic that is shaped by a token bucket of size fi and rate , followed by a leaky bucket with the rate equal to the link speed, which we normalize to <p> The rate remains constant along the route, but the burstiness fi increases as a function of the accumulated worst-case delay on the route. This theorem generalizes earlier results by Cruz <ref> [4] </ref> and Raha et al [19], where the traffic characteristic function at the output of an FCFS server was obtained in terms of that at the immediate input to the server [4] or at the source [19]. In Theorem 1 we extend these results to servers with static-priority scheduling. <p> This theorem generalizes earlier results by Cruz <ref> [4] </ref> and Raha et al [19], where the traffic characteristic function at the output of an FCFS server was obtained in terms of that at the immediate input to the server [4] or at the source [19]. In Theorem 1 we extend these results to servers with static-priority scheduling. As we will see, Theorem 1 facilitates the efficient computation of worst-case delays in networks with static-priority scheduling. <p> Theorem 5 For a given priority assignment, if - = max ( s=1 q=1 then the system is stable, where ~ C q;s;p;j is defined in (15). Results similar to Theorem 4 and Theorem 5 were obtained earlier by Cruz <ref> [4] </ref> and Li et al [14] for systems with FCFS schedulers. As FCFS scheduling is a special case of priority scheduling, our result here generalizes the earlier work. In addition, Theorem 5 gives a concise criterium for stability. <p> Better results should be expected when priorities are allowed to vary between servers, and are assigned with regard to the underlying topology. 7 A very simple priority assignment that takes into account the network topology was described by Cruz <ref> [4] </ref> for the case of a ring. Cruz proposed a two-priority scheme, in which connections are assigned a low priority on the first server when they join the network. On all the other servers, connections are assigned a high priority. <p> Topology and Traffic Load. We consider ATM networks with a specialized ring topology. This topology has been used as an representative benchmark by Cruz, Gallager, and Parekh to study the problem of delay stability in ATM networks for FCFS servers <ref> [4, 17] </ref>. Henceforth, we shall refer to this topology as the Cruz-Gallager-Parekh (C-G-P) ring. The architecture of the C-G-P ring is described as follows.
Reference: [5] <author> A. Dailianas and A. Bovopoulis. </author> <title> Real-time admission control algorithms with delay and loss guarantees in ATM networks. </title> <booktitle> In Proc. of INFOCOM'94. </booktitle>
Reference-contexts: Most previous work also assumes that either cyclic dependencies among connections do not exist or that they are eliminated by some internal network control mechanism (e.g., traffic regulation, reshaping by dedicated hardware, and framing) <ref> [2, 4, 5, 11] </ref>. We explicitly take into account possible cyclic dependencies among connections without using such mechanisms. We investigate and obtain conditions under which the system is stable and are able to determine the delay bounds under such conditions. 3.
Reference: [6] <author> A. Demers, S. Keshav, and S. Shenker. </author> <title> Analysis and simulation of a fair queueing algorithm. </title> <booktitle> In Proc. of ACM SIGCOMM'89, </booktitle> <month> Sept. </month> <year> 1989. </year>
Reference-contexts: Nevertheless, considerable progress has been made recently towards obtaining delay bounds for network traffic in a va riety of settings. Much of the previous studies on meeting end-to-end deadlines in ATM networks have concentrated primarily on the design and the analysis of scheduling policies for ATM switches <ref> [3, 6, 8, 11, 17, 19, 25] </ref>. The efficient implementation of most of these schemes turns out to be difficult in high-performance switches. Therefore, most ATM switches have very simple support for traffic scheduling, typically in form of FCFS or static priority.
Reference: [7] <author> N. Dunford and J. Schwartz. </author> <title> Linear operators, Part I : General theory. </title> <publisher> In Interscience publishers. </publisher> <address> New York (1958). </address>
Reference: [8] <author> D. Ferrari and D. C. Verma. </author> <title> A scheme for real-time channel establishment in wide-area networks. </title> <journal> IEEE J. on Selected Areas in Comm., </journal> <month> Apr. </month> <year> 1990. </year>
Reference-contexts: Nevertheless, considerable progress has been made recently towards obtaining delay bounds for network traffic in a va riety of settings. Much of the previous studies on meeting end-to-end deadlines in ATM networks have concentrated primarily on the design and the analysis of scheduling policies for ATM switches <ref> [3, 6, 8, 11, 17, 19, 25] </ref>. The efficient implementation of most of these schemes turns out to be difficult in high-performance switches. Therefore, most ATM switches have very simple support for traffic scheduling, typically in form of FCFS or static priority.
Reference: [9] <author> V. Firoiu, J. Kurose, and D. Towsley. </author> <title> Efficient Admission Control for EDF Schedulers. </title> <booktitle> In Proc. of the IEEE INFORCOM'97. </booktitle>
Reference-contexts: As illustrated in Figure 2, the linear bounding function consists of two linear segments, one with a rate of one, and one with rate . Following the terminology in <ref> [9] </ref>, we call the intersection point of the two segments the flex point, which is denoted as f in Figure 2.
Reference: [10] <author> L. Georgiadis, R. Guerin, V. Peris, and K. Sivara-jan. </author> <title> Efficient network QoS provisioning based on per node traffic shaping. </title> <journal> IEEE ACM Trans. on Networking, </journal> <month> Aug. </month> <year> 1996. </year>
Reference: [11] <author> S. J. Golestani. </author> <title> A framing strategy for congestion management. </title> <journal> IEEE J. on Selected Areas in Comm., </journal> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Nevertheless, considerable progress has been made recently towards obtaining delay bounds for network traffic in a va riety of settings. Much of the previous studies on meeting end-to-end deadlines in ATM networks have concentrated primarily on the design and the analysis of scheduling policies for ATM switches <ref> [3, 6, 8, 11, 17, 19, 25] </ref>. The efficient implementation of most of these schemes turns out to be difficult in high-performance switches. Therefore, most ATM switches have very simple support for traffic scheduling, typically in form of FCFS or static priority. <p> Most previous work also assumes that either cyclic dependencies among connections do not exist or that they are eliminated by some internal network control mechanism (e.g., traffic regulation, reshaping by dedicated hardware, and framing) <ref> [2, 4, 5, 11] </ref>. We explicitly take into account possible cyclic dependencies among connections without using such mechanisms. We investigate and obtain conditions under which the system is stable and are able to determine the delay bounds under such conditions. 3.
Reference: [12] <author> S. Kamat and W. Zhao. </author> <title> Performance comparison of two token ring protocols for real-time communication. </title> <editor> In S. Son, editor, </editor> <booktitle> Principles of Real-Time Systems. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference-contexts: In Section 6, we conclude the paper with a discussion of possible extensions. 2. Previous Work Determining delay bounds has been the pivotal issue in the development of real-time technology <ref> [12, 21, 22, 23, 24] </ref>. Much work has focused on centralized systems [16]. In general, obtaining delay bounds in a network environment is difficult due to the distributed nature of the problem.
Reference: [13] <author> J. Y.-T. Leung and J. Whitehead. </author> <title> On the complexity of fixed-priority scheduling of periodic, real-time tasks. Performance Evaluation, </title> <month> December </month> <year> 1982. </year>
Reference-contexts: Based on the delay-computation method developed, we study five priority assignment algorithms. As the base method for comparison, we assign the same priority to all connections, effectively scheduling cells in FCFS manner. The second algorithm assigns the priority in a deadline-monotonic manner <ref> [1, 13] </ref>. That is, the smaller the relative deadline of a connection, the higher is its priority. The third algorithm combines the first two by recursively partitioning the connection set into subsets of connections. <p> Intuitively, the smaller the relative deadline of a connection is, the higher its priority should be. The relative deadline monotonic (RDM) algorithm <ref> [1, 13] </ref> assigns priorities in this order. For single-server systems and periodic workload, RDM is known to be an optimal static-priority assignment algorithm. Interestingly, our evaluations show that RDM does not perform well when connections traverse multiple servers.
Reference: [14] <author> C. Li, A. Raha, and W. Zhao. </author> <title> Stability in ATM networks. </title> <booktitle> In Proc. of the IEEE INFORCOM'97. </booktitle>
Reference-contexts: Even if the system is stable, an iterative procedure must be used for the delay computation to accommodate these feedback effects. In [19], the stability problem was addressed for systems with FCFS scheduling. Determining worst-case delays with FCFS scheduling in a system with traffic dependencies was dealt with in <ref> [14] </ref>. * Priority Assignment. The delay bounds for individual cells depend on the priorities assigned to their respective connections. <p> Theorem 5 For a given priority assignment, if - = max ( s=1 q=1 then the system is stable, where ~ C q;s;p;j is defined in (15). Results similar to Theorem 4 and Theorem 5 were obtained earlier by Cruz [4] and Li et al <ref> [14] </ref> for systems with FCFS schedulers. As FCFS scheduling is a special case of priority scheduling, our result here generalizes the earlier work. In addition, Theorem 5 gives a concise criterium for stability. Furthermore, Theorem 4 provides the basis for efficiently finding the worst case delays.
Reference: [15] <author> J. Liebeherr, D.E. Wrege, and D. Ferrari. </author> <title> Exact admission control in networks with bounded delay services., </title> <note> to appear in IEEE/ACM Trans. on Networking. </note>
Reference-contexts: This assignment should be sensitive to the deadline requirements of the connections in order to maximize the chance that the entire connection set can be admitted, i.e., all the deadlines of connections can always be satisfied. In <ref> [15] </ref> various priority assignment methods were examined and compared for systems with a single server or with traffic regulation mechanisms. In this paper, we are addressing the three issues de-scribed above in the context of ATM networks. Differently from the previous work, we concentrate on ATM switches with static-priority schedulers.
Reference: [16] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard-real-time environment. </title> <journal> J. of the Association for Computing Machinery, </journal> <month> Jan. </month> <year> 1973. </year>
Reference-contexts: In Section 6, we conclude the paper with a discussion of possible extensions. 2. Previous Work Determining delay bounds has been the pivotal issue in the development of real-time technology [12, 21, 22, 23, 24]. Much work has focused on centralized systems <ref> [16] </ref>. In general, obtaining delay bounds in a network environment is difficult due to the distributed nature of the problem. Nevertheless, considerable progress has been made recently towards obtaining delay bounds for network traffic in a va riety of settings.
Reference: [17] <author> A. K. J. Parekh. </author> <title> A Generalized Processor Sharing Approach to Flow Control in Integrated Services Networks. </title> <type> PhD thesis, </type> <institution> M.I.T., </institution> <year> 1992. </year>
Reference-contexts: In this approach, the network is decomposed into servers, and each ATM connection is viewed as traversing a sequence of servers. The worst-case end-to-end cell delays are obtained by summing up the upper bounds of the delays suffered by a connection at each of the servers <ref> [4, 17, 18] </ref>. * Stability. Because the topology of an ATM network can be arbitrary, it is possible that traffic of one connection interacts with that of another, resulting in a cyclic dependency among the connections. <p> Because the topology of an ATM network can be arbitrary, it is possible that traffic of one connection interacts with that of another, resulting in a cyclic dependency among the connections. In this case, the system may become unstable in the sense that some of the delays are unbounded <ref> [4, 17] </ref>. Even if the system is stable, an iterative procedure must be used for the delay computation to accommodate these feedback effects. In [19], the stability problem was addressed for systems with FCFS scheduling. <p> Nevertheless, considerable progress has been made recently towards obtaining delay bounds for network traffic in a va riety of settings. Much of the previous studies on meeting end-to-end deadlines in ATM networks have concentrated primarily on the design and the analysis of scheduling policies for ATM switches <ref> [3, 6, 8, 11, 17, 19, 25] </ref>. The efficient implementation of most of these schemes turns out to be difficult in high-performance switches. Therefore, most ATM switches have very simple support for traffic scheduling, typically in form of FCFS or static priority. <p> Topology and Traffic Load. We consider ATM networks with a specialized ring topology. This topology has been used as an representative benchmark by Cruz, Gallager, and Parekh to study the problem of delay stability in ATM networks for FCFS servers <ref> [4, 17] </ref>. Henceforth, we shall refer to this topology as the Cruz-Gallager-Parekh (C-G-P) ring. The architecture of the C-G-P ring is described as follows.
Reference: [18] <author> A. Raha, S. Kamat, and W. Zhao. </author> <title> Guaranteeing end to-end deadlines in ATM networks. </title> <booktitle> In Proc of the 15th IEEE ICDCS'95. </booktitle>
Reference-contexts: In this approach, the network is decomposed into servers, and each ATM connection is viewed as traversing a sequence of servers. The worst-case end-to-end cell delays are obtained by summing up the upper bounds of the delays suffered by a connection at each of the servers <ref> [4, 17, 18] </ref>. * Stability. Because the topology of an ATM network can be arbitrary, it is possible that traffic of one connection interacts with that of another, resulting in a cyclic dependency among the connections. <p> A server is an abstraction of a network component 2 be it an input port, a switching fabric, an output port, or a physical link which is used by a connection. Traditionally, servers are classified into two categories: constant servers and variable servers <ref> [4, 18, 19] </ref>. A constant server delays each cell by a constant amount of time. It does not, by itself, change the traffic flow characteristics of a connection. For example, physical links and nonblocking switching fabrics are constant servers.
Reference: [19] <author> A. Raha, S. Kamat, and W. Zhao. </author> <title> Admission control for hard real-time connections in ATM LAN's. </title> <booktitle> In Proc. of the IEEE INFORCOM'96. </booktitle>
Reference-contexts: In this case, the system may become unstable in the sense that some of the delays are unbounded [4, 17]. Even if the system is stable, an iterative procedure must be used for the delay computation to accommodate these feedback effects. In <ref> [19] </ref>, the stability problem was addressed for systems with FCFS scheduling. Determining worst-case delays with FCFS scheduling in a system with traffic dependencies was dealt with in [14]. * Priority Assignment. The delay bounds for individual cells depend on the priorities assigned to their respective connections. <p> Nevertheless, considerable progress has been made recently towards obtaining delay bounds for network traffic in a va riety of settings. Much of the previous studies on meeting end-to-end deadlines in ATM networks have concentrated primarily on the design and the analysis of scheduling policies for ATM switches <ref> [3, 6, 8, 11, 17, 19, 25] </ref>. The efficient implementation of most of these schemes turns out to be difficult in high-performance switches. Therefore, most ATM switches have very simple support for traffic scheduling, typically in form of FCFS or static priority. <p> A server is an abstraction of a network component 2 be it an input port, a switching fabric, an output port, or a physical link which is used by a connection. Traditionally, servers are classified into two categories: constant servers and variable servers <ref> [4, 18, 19] </ref>. A constant server delays each cell by a constant amount of time. It does not, by itself, change the traffic flow characteristics of a connection. For example, physical links and nonblocking switching fabrics are constant servers. <p> The rate remains constant along the route, but the burstiness fi increases as a function of the accumulated worst-case delay on the route. This theorem generalizes earlier results by Cruz [4] and Raha et al <ref> [19] </ref>, where the traffic characteristic function at the output of an FCFS server was obtained in terms of that at the immediate input to the server [4] or at the source [19]. In Theorem 1 we extend these results to servers with static-priority scheduling. <p> This theorem generalizes earlier results by Cruz [4] and Raha et al <ref> [19] </ref>, where the traffic characteristic function at the output of an FCFS server was obtained in terms of that at the immediate input to the server [4] or at the source [19]. In Theorem 1 we extend these results to servers with static-priority scheduling. As we will see, Theorem 1 facilitates the efficient computation of worst-case delays in networks with static-priority scheduling.
Reference: [20] <author> A. Raha and W. Zhao. </author> <title> Evaluation of admission policies in ATM based embedded hard real-time systems. </title> <type> Technical report, </type> <institution> Department of Computer Science, Texas A&M University, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: Connection and Network Modes Real-time systems typically operate in a modal fashion; at any given instant of time the system operates in one of a set of known modes <ref> [20] </ref>. System operation in a specific mode is characterized by the execution and the requirements of a previously defined set of applications. Thus, each operational mode of the system has an associated set of connections that must be established among applications that need to communicate.
Reference: [21] <author> J. A. Stankovic. </author> <title> Misconceptions about real-time computing: A serious problem for next generation systems. </title> <booktitle> IEEE Computer, </booktitle> <month> Oct. </month> <year> 1988. </year>
Reference-contexts: In Section 6, we conclude the paper with a discussion of possible extensions. 2. Previous Work Determining delay bounds has been the pivotal issue in the development of real-time technology <ref> [12, 21, 22, 23, 24] </ref>. Much work has focused on centralized systems [16]. In general, obtaining delay bounds in a network environment is difficult due to the distributed nature of the problem.
Reference: [22] <author> J. A. Stankovic and K. Ramamritham, </author> <title> editors. Hard Real-Time Systems. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1988. </year>
Reference-contexts: In Section 6, we conclude the paper with a discussion of possible extensions. 2. Previous Work Determining delay bounds has been the pivotal issue in the development of real-time technology <ref> [12, 21, 22, 23, 24] </ref>. Much work has focused on centralized systems [16]. In general, obtaining delay bounds in a network environment is difficult due to the distributed nature of the problem.
Reference: [23] <author> A. M. van Tilborg and G. M. Koob. </author> <title> Foundations of Real-Time Computing: Formal Specifications and Methods. </title> <publisher> Kluwer Adademic Publishers, </publisher> <year> 1991. </year> <month> 10 </month>
Reference-contexts: In Section 6, we conclude the paper with a discussion of possible extensions. 2. Previous Work Determining delay bounds has been the pivotal issue in the development of real-time technology <ref> [12, 21, 22, 23, 24] </ref>. Much work has focused on centralized systems [16]. In general, obtaining delay bounds in a network environment is difficult due to the distributed nature of the problem.
Reference: [24] <author> A. M. van Tilborg and G. M. Koob. </author> <title> Foundations of Real-Time Computing: Scheduling and Resource Management. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: In Section 6, we conclude the paper with a discussion of possible extensions. 2. Previous Work Determining delay bounds has been the pivotal issue in the development of real-time technology <ref> [12, 21, 22, 23, 24] </ref>. Much work has focused on centralized systems [16]. In general, obtaining delay bounds in a network environment is difficult due to the distributed nature of the problem.
Reference: [25] <author> H. Zhang and D. Ferrari. </author> <title> Rate-controlled static priority queueing. </title> <booktitle> In Proc. of IEEE INFORCOM'93. </booktitle> <pages> 11 </pages>
Reference-contexts: Nevertheless, considerable progress has been made recently towards obtaining delay bounds for network traffic in a va riety of settings. Much of the previous studies on meeting end-to-end deadlines in ATM networks have concentrated primarily on the design and the analysis of scheduling policies for ATM switches <ref> [3, 6, 8, 11, 17, 19, 25] </ref>. The efficient implementation of most of these schemes turns out to be difficult in high-performance switches. Therefore, most ATM switches have very simple support for traffic scheduling, typically in form of FCFS or static priority.
References-found: 25

