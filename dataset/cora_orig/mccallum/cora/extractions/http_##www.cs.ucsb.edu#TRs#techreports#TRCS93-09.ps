URL: http://www.cs.ucsb.edu/TRs/techreports/TRCS93-09.ps
Refering-URL: http://www.cs.ucsb.edu/TRs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Formal Framework for ASTRAL Inter-level Proof Obligations  
Author: Alberto Coen-Porisini Richard A. Kemmerer Dino Mandrioli 
Keyword: Key Words: Formal methods, Formal specification and verification, Realtime systems, Timing requirements, Proof obligations, State machines, ASTRAL.  
Address: Santa Barbara, CA 93106  20133 Milano, Italia  
Affiliation: Reliable Software Group Department of Computer Science University of California  Dipartimento di Elettronica e Informazione Politecnico di Milano  
Abstract: ASTRAL is a formal specification language for realtime systems. It is intended to support formal software development, and therefore has been formally defined. This paper focuses on how to formally prove the mathematical correctness of ASTRAL specifications. ASTRAL is provided with structuring mechanisms that allow one to build modularized specifications of complex systems with layering. A realtime system is modeled by a collection of process specifications and a single global specification. Each process specification consists of a sequence of levels; each level is an abstract data type view of the process being specified. In this paper further details of the ASTRAL refinement process, which were not fully developed in previous papers, are presented. Formal proofs in ASTRAL can be divided into two categories: inter-level proofs and intra-level proofs. The former deal with proving that the specification of level i+1 is consistent with the specification of level i, while the latter deal with proving that the specification of level i is consistent and satisfies the stated critical requirements. This paper concentrates on inter-level proofs. The necessary proof obligations to assure that a refinement is a correct implementation are presented. The approach is motivated with a communication example. 
Abstract-found: 1
Intro-found: 1
Reference: [ACD 90] <author> Alur, R., C. Courcoubetis, and D. Dill, </author> <title> "Model-Checking for Realtime Systems," </title> <booktitle> 5th IEEE LICS 90, IEEE, </booktitle> <pages> pp. 414-425, </pages> <year> 1990. </year>
Reference: [CKM 92] <author> Coen-Porisini, A., R. Kemmerer and D. Mandrioli, </author> <title> "Formal Verification of Realtime Systems in ASTRAL", </title> <type> Report no. </type> <institution> TRCS 92-22, Department of Computer Science, University of California, Santa Barbara, California, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: 1. Introduction ASTRAL is a formal specification language for realtime systems. It is intended to support formal software development, and therefore has been formally defined. [GK 91a] discusses the rational of ASTRAL's design and demonstrates how the language builds on previous language experiments, and <ref> [CKM 92] </ref> gives further details of the ASTRAL environment and critical requirement components. [GK 91b] discusses how ASTRAL's semantics are specified in the TRIO formal realtime logic, and it also outlines how ASTRAL specifications can be formally analyzed by translating them into TRIO and then using the TRIO validation theory. <p> The former deal with proving that the specification of level i+1 is consistent with the specification of level i, while the latter deal with proving that the specification of level i is consistent and satisfies the stated critical requirements. The intra-level proofs are discussed in detail in <ref> [CKM 92] </ref>. This paper concentrates on inter-level proofs. In the next section a brief overview of ASTRAL is presented. Section 3 discusses layering and the implementation statement. <p> Those assumptions were regarded in the top level specification as possible ways of satisfying the schedule <ref> [CKM 92] </ref>. Neither of them was explicitly chosen, since the designer felt that such a decision was not appropriate at that design level.
Reference: [CKM 93] <author> Coen-Porisini, A., R. Kemmerer and D. Mandrioli, </author> <title> "A Formal Framework for ASTRAL Inter-level Proof Obligations", </title> <type> Report no. </type> <institution> TRCS 93-09, Department of Computer Science, University of California, Santa Barbara, California, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: The complete ASTRAL two level specification of the CCITT system is presented in <ref> [CKM 93] </ref>. Due to space limitations only the relevant portions of the specification are presented here. <p> The inter-level proof obligations were also presented and several example proofs were demonstrated. All of the inter-level proofs for the CCITT specification have been completed. The details of these proofs as well as the complete two-level CCITT specification can be found in <ref> [CKM 93] </ref>. Future work will concentrate on applying ASTRAL to more varied and complex realtime systems. Work will also continue on a formal semantic definition for 22 ASTRAL and on building a tool suite for formally designing realtime systems using ASTRAL.
Reference: [CHS 90] <author> Chang, C., H. Huang, and C. Song, </author> <title> "An Approach to Verifying Concurrency Behavior of Realtime Systems Based On Time Petri Net and Temporal Logic," </title> <booktitle> InfoJapan 90, IPSJ, </booktitle> <pages> pp. 307-314, </pages> <year> 1990. </year>
Reference: [FMM 91] <author> Felder, M., D. Mandrioli, and A. Morzenti, </author> <title> "Proving Properties of Realtime Systems through Logical Specifications and Petri Net Models," </title> <type> Tech. </type> <institution> Rept. 91-72, Dip. di Elettronica-Politecnico di Milano, </institution> <month> December </month> <year> 1991. </year>
Reference: [GF 91] <author> Gabrielian, A. and M. Franklin, </author> <title> "Multilevel Specification of Realtime Systems," </title> <journal> CACM 34, </journal> <volume> 5, </volume> <pages> pp. 51-60, </pages> <month> May </month> <year> 1991. </year>
Reference: [GK 91a] <author> Ghezzi, C. and R. Kemmerer, "ASTRAL: </author> <title> An Assertion Language for Specifying Realtime Systems," </title> <booktitle> Proceedings of the Third European Software Engineering Conference, Milano, Italy, </booktitle> <pages> pp. 122-146, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: 1. Introduction ASTRAL is a formal specification language for realtime systems. It is intended to support formal software development, and therefore has been formally defined. <ref> [GK 91a] </ref> discusses the rational of ASTRAL's design and demonstrates how the language builds on previous language experiments, and [CKM 92] gives further details of the ASTRAL environment and critical requirement components. [GK 91b] discusses how ASTRAL's semantics are specified in the TRIO formal realtime logic, and it also outlines how <p> As a consequence, the proofs lack structure, which makes them unsuitable for dealing with complex real-life systems. On the contrary, ASTRAL is provided with structuring mechanisms that allow one to build modularized specifications of complex systems with layering <ref> [GK 91a, GK 91b] </ref>. In this paper further details of the ASTRAL refinement process, which were not fully developed in previous papers, are presented. Formal proofs in ASTRAL can be divided into two categories: inter-level proofs and intra-level proofs. <p> The computation model for ASTRAL is based on nondeterministic state machines and assumes maximal parallelism, noninterruptable and nonoverlapping transitions in a single process instance, and implicit one-to-many (multicast) message passing communication, which is instantaneous. A detailed description of ASTRAL and of its underlying motivations is provided in <ref> [GK 91a] </ref>. In this paper, due to space limitations, only the concepts of ASTRAL that are needed to present the layering issues are discussed in detail. These concepts are illustrated via a refinement of the communication example presented in [GK 91b]. 3.
Reference: [GK 91b] <author> Ghezzi, C. and R. Kemmerer, </author> <title> "Executing Formal Specifications: the ASTRAL to TRIO Translation Approach," </title> <booktitle> Proceedings of TAV4: the Symposium on Testing, Analysis, and Verification, </booktitle> <address> Victoria, B.C., Canada, </address> <pages> pp. 112-119, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: It is intended to support formal software development, and therefore has been formally defined. [GK 91a] discusses the rational of ASTRAL's design and demonstrates how the language builds on previous language experiments, and [CKM 92] gives further details of the ASTRAL environment and critical requirement components. <ref> [GK 91b] </ref> discusses how ASTRAL's semantics are specified in the TRIO formal realtime logic, and it also outlines how ASTRAL specifications can be formally analyzed by translating them into TRIO and then using the TRIO validation theory. <p> As a consequence, the proofs lack structure, which makes them unsuitable for dealing with complex real-life systems. On the contrary, ASTRAL is provided with structuring mechanisms that allow one to build modularized specifications of complex systems with layering <ref> [GK 91a, GK 91b] </ref>. In this paper further details of the ASTRAL refinement process, which were not fully developed in previous papers, are presented. Formal proofs in ASTRAL can be divided into two categories: inter-level proofs and intra-level proofs. <p> In this paper, due to space limitations, only the concepts of ASTRAL that are needed to present the layering issues are discussed in detail. These concepts are illustrated via a refinement of the communication example presented in <ref> [GK 91b] </ref>. 3. Layering in ASTRAL As mentioned earlier, in ASTRAL a realtime system is modelled by a collection of process type specifications and a single global specification.
Reference: [Ost 89] <author> Ostroff, J., </author> <title> Temporal Logic For Realtime Systems, </title> <publisher> Research Studies Press LTD., </publisher> <address> Taunton, Somerset, </address> <booktitle> England , Advanced Software Development Series, </booktitle> <volume> 1, </volume> <year> 1989. </year>
Reference-contexts: Recently, a number of approaches have been proposed to build formal proofs for realtime systems [Ost 89, FMM 91, ACD 90, Suz 90, CHS 90, GF 91]. Many of these exploit the so called "dual language approach" <ref> [Ost 89, Pnu 77] </ref> where a system is modeled as an abstract machine (e.g., a finite state machine or a Petri net) and its properties are described through some assertion language (e.g., a logic or an algebraic language).
Reference: [Pnu 77] <author> Pnueli, A., </author> <title> "The Temporal Logic of Programs," </title> <booktitle> Proceedings of the 18th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pp. 46-57, </pages> <year> 1977. </year>
Reference-contexts: Recently, a number of approaches have been proposed to build formal proofs for realtime systems [Ost 89, FMM 91, ACD 90, Suz 90, CHS 90, GF 91]. Many of these exploit the so called "dual language approach" <ref> [Ost 89, Pnu 77] </ref> where a system is modeled as an abstract machine (e.g., a finite state machine or a Petri net) and its properties are described through some assertion language (e.g., a logic or an algebraic language).
Reference: [Suz 90] <author> Suzuki, I., </author> <title> "Formal Analysis of Alternating Bit Protocol by Temporal Petri Nets," </title> <journal> IEEE-TSE 16, </journal> <volume> 11, </volume> <pages> pp. 1273-1281, </pages> <month> November </month> <year> 1990. </year> <month> 23 </month>
Reference: [Zav 87] <author> Zave, P., </author> <title> PAISLey User Documentation Volume 3: Case Studies, </title> <institution> Computer Technology Research Laboratory Report, AT&T Bell Laboratories, </institution> <address> Murray Hill, New Jersey, </address> <year> 1987. </year>
Reference-contexts: Entry L.n [S0'] IMPL (REntry U ' & CR) & A j ' & Entry L.j ' & Exit L.j fi IMPL (Exit U & CR) [S1'] 5 An Example of a Refined ASTRAL Specification The example used in this paper is a variation of the packet assembler described in <ref> [Zav 87] </ref>. "The system contains an object which assembles data items (in the order in which it receives them) into fixed-size packets, and sends these packets to the environment.
References-found: 12

