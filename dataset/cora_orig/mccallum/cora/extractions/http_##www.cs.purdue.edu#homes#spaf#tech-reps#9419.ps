URL: http://www.cs.purdue.edu/homes/spaf/tech-reps/9419.ps
Refering-URL: http://www.cs.purdue.edu/coast/coast-tools.html
Root-URL: http://www.cs.purdue.edu
Title: Writing, Supporting, and Evaluating Tripwire: A Publically Available Security Tool  
Author: Gene H. Kim and Eugene H. Spafford 
Date: 12 March 1994  
Address: West Lafayette, IN 47907-1398  
Affiliation: COAST Laboratory Department of Computer Sciences Purdue University  
Pubnum: Purdue Technical Report CSD-TR-94-019  
Abstract: Tripwire is an integrity checking program written for the Unix environment that gives system administrators the ability to monitor file systems for added, deleted, and modified files. First released in November of 1992, Tripwire has undergone several updates and is in current use at thousands of machines worldwide. This paper begins with a brief overview of what Tripwire does and how it works. We discuss how certain implementation decisions affected the course of Tripwire development. We also present other applications that have been found for Tripwire. These unanticipated uses guided the demands of some users, and we describe how we addressed some of these demands without compromising the ability of Tripwire to serve as a useful security tool. We also discuss the process of releasing, and then supporting, a widely available and widely used tool across the Internet, and how meeting users' high expectations affects this process. How these issues affected Tripwire, done as as an independent study by an undergraduate, is also discussed. Software tools that were used in developing and maintaining Tripwire are presented. Finally, we discuss problems that remain unresolved and some possible solutions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Brian Berliner. CVS II: </author> <title> Parallelizing software development. </title> <booktitle> In Proceedings of the Winter Conference, </booktitle> <address> Berkely, CA, 1990. </address> <publisher> Usenix Association. </publisher>
Reference-contexts: His cproto program can be found in volume 31 of the comp.sources.misc archive. 15 4.3.4 Source control Another tool used extensively by Gene is the CVS (Concurrent Versions System) tool by Brian Berliner <ref> [1] </ref>. 6 CVS is a front-end to the well-known RCS utilities [15], providing useful "release revision" abstractions beyond the file-by-file revisions afforded by RCS.
Reference: [2] <author> Matt Bishop, </author> <month> November </month> <year> 1993. </year> <type> personal communication (11/6/1993). </type>
Reference-contexts: Safety Because Tripwire sources are publically available and freely distributable, they are available for scrutiny by the community at large. Possible weaknesses have been discussed in the literature (e.g., [16]) and by private communication (e.g., <ref> [2] </ref>). These evaluations were written when our design document was not yet publically available, and reflects positively that our sources are adequately readable. 3 Furthermore, we have received many reports of system administrators modifying Tripwire, sometimes extensively, to suit their local site needs.
Reference: [3] <author> Vesselin Bontchev. </author> <title> Possible virus attacks against integrity programs and how to prevent them. </title> <type> Technical report, </type> <institution> Virus Test Center, University of Hamburg, </institution> <year> 1993. </year>
Reference-contexts: This was discovered when the Tripwire test suite failed on a patched file. (See section 4.1.3.) All these classes of stories further validate the theory behind integrity checking programs. Although the foundations of integrity checkers in Unix security have been discussed in <ref> [3, 4, 7] </ref>, when Tripwire design was started in late 1991, no usable, publically available integrity tools existed | providing one of the primary motivations for writing Tripwire.
Reference: [4] <author> David A. Curry. </author> <title> UNIX System Security: A Guide for Users and System Administrators. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1992. </year>
Reference-contexts: This was discovered when the Tripwire test suite failed on a patched file. (See section 4.1.3.) All these classes of stories further validate the theory behind integrity checking programs. Although the foundations of integrity checkers in Unix security have been discussed in <ref> [3, 4, 7] </ref>, when Tripwire design was started in late 1991, no usable, publically available integrity tools existed | providing one of the primary motivations for writing Tripwire.
Reference: [5] <author> Paul Dickson. </author> <title> The New Official Rules. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Amos Brearly, character in British TV show <ref> [5] </ref> 3 All reported weaknesses have been addressed by changes to the code or documentation. 5 In the previous section, we presented several key design aspects of Tripwire that have sup-ported its widespread use.
Reference: [6] <author> Daniel Farmer and Eugene H. Spafford. </author> <title> The COPS security checker system. </title> <booktitle> In Proceedings of the Summer Conference, </booktitle> <pages> pages 165-190, </pages> <address> Berkely, CA, 1990. </address> <publisher> Usenix Association. </publisher>
Reference-contexts: Safety We wanted to build a system that required no special privileges to run, and that consisted of source that would be easy to read and understand. Spafford's previous experience with setting this as a design goal for the COPS system <ref> [6] </ref> has been well-received; system admins are more comfortable running security tools if they can examine the source and customize it if they feel the need. 2.2 What we actually got Tripwire coding started near the end of the Spring 1992 semester.
Reference: [7] <author> Simson Garfinkel and Gene Spafford. </author> <title> Practical Unix Security. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Sebastopol, CA, </address> <year> 1991. </year>
Reference-contexts: This was discovered when the Tripwire test suite failed on a patched file. (See section 4.1.3.) All these classes of stories further validate the theory behind integrity checking programs. Although the foundations of integrity checkers in Unix security have been discussed in <ref> [3, 4, 7] </ref>, when Tripwire design was started in late 1991, no usable, publically available integrity tools existed | providing one of the primary motivations for writing Tripwire.
Reference: [8] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The M4 Macro Processor. </title> <institution> AT&T Bell Laboratories, </institution> <year> 1977. </year>
Reference-contexts: This was implemented by adding an M4-like preprocessor <ref> [8] </ref> for the configuration files. Directives such as "@@define", "@@ifdef", "@@ifhost", and "@@include" were provided to allow multiple machines to use a configuration file. We did not use the M4 processor itself, or the cpp compiler preprocessor.
Reference: [9] <author> Gene H. Kim and Eugene H. Spafford. </author> <title> The design and implementation of tripwire: A file system integrity checker. </title> <type> Technical Report CSD-TR-93-071, </type> <institution> Purdue University, </institution> <month> nov </month> <year> 1993. </year>
Reference-contexts: Tripwire fl This paper appeared as [11] y Gene Kim is currently at the University of Arizona. 1 was primarily intended to be used for intrusion detection, and its design and operation are described in detail in <ref> [9] </ref>. The first version of Tripwire was completed in September 1992. Since then, its design and code have been available for use by the community at large. <p> More detailed descriptions of operation and features of Tripwire are given in <ref> [9] </ref> and [10]. 2 Theory vs. Practice As with most research projects, what we thought we wanted and what we finished with were somewhat different. 2.1 What we thought we wanted Tripwire was envisioned by one of us (Spafford) as a tool to help with intrusion detection and recovery.
Reference: [10] <author> Gene H. Kim and Eugene H. Spafford. </author> <title> Experiences with tripwire: Using integrity checkers for intrusion detection. </title> <booktitle> In Systems Administration, Networking and Security Conference III. Usenix, </booktitle> <month> April </month> <year> 1994. </year>
Reference-contexts: More detailed descriptions of operation and features of Tripwire are given in [9] and <ref> [10] </ref>. 2 Theory vs. Practice As with most research projects, what we thought we wanted and what we finished with were somewhat different. 2.1 What we thought we wanted Tripwire was envisioned by one of us (Spafford) as a tool to help with intrusion detection and recovery. <p> We have gathered reports of at least seven cases where Tripwire has alerted system administrators to intruders tampering with their systems. (Experiences with Tripwire for intrusion detection is presented in <ref> [10] </ref>.) The continuing interest in new releases, and the endorsement of Tripwire by various response teams has also confirmed the utility of Tripwire. 4 Portability Tripwire has proven to be highly portable, successfully running on over 30 Unix plat-forms.
Reference: [11] <author> Gene H. Kim and Eugene H. Spafford. </author> <title> Writing, supporting, and evaluating tripwire: A publically available security tool. </title> <booktitle> In Proceedings of the Usenix Applications Development Symposium, </booktitle> <address> Berkeley, CA, </address> <year> 1994. </year> <title> Usenix. 7 It is not "free" software, however. Tripwire and some of the signature routines bear copyright notices allowing free use for non-commercial purposes. </title> <type> 22 </type>
Reference-contexts: 1 Introduction 1.1 Genesis Tripwire is an integrity checking program written for the Unix environment that gives system administrators the ability to monitor file systems for added, deleted, and modified files. Tripwire fl This paper appeared as <ref> [11] </ref> y Gene Kim is currently at the University of Arizona. 1 was primarily intended to be used for intrusion detection, and its design and operation are described in detail in [9]. The first version of Tripwire was completed in September 1992.
Reference: [12] <author> Leslie Lamport. </author> <title> L a T E X: User's Guide & Reference Manual. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1986. </year>
Reference-contexts: However, unlike the original document that was written using troff and the almost ubiquitous "ms" macros [14, 13], the new document was written using the L a T E X formatting system <ref> [12] </ref>. The fact that some users would be unable to generate printable text from a L a T E X source file made its inclusion in the Tripwire distribution problematical. We eventually included the design document formatted in PostScript.
Reference: [13] <author> M. E. Lesk. </author> <title> Using the -ms Macros with Troff and Nroff. </title> <institution> AT&T Bell Laboratories, </institution> <year> 1976. </year>
Reference-contexts: However, unlike the original document that was written using troff and the almost ubiquitous "ms" macros <ref> [14, 13] </ref>, the new document was written using the L a T E X formatting system [12]. The fact that some users would be unable to generate printable text from a L a T E X source file made its inclusion in the Tripwire distribution problematical.
Reference: [14] <author> Joseph F. Ossana. </author> <title> Troff User's Manual. </title> <institution> AT&T Bell Laboratories, </institution> <year> 1976. </year>
Reference-contexts: However, unlike the original document that was written using troff and the almost ubiquitous "ms" macros <ref> [14, 13] </ref>, the new document was written using the L a T E X formatting system [12]. The fact that some users would be unable to generate printable text from a L a T E X source file made its inclusion in the Tripwire distribution problematical.
Reference: [15] <author> Walter F. Tichy. </author> <title> Design, implementation, and evaluation of a revision control system. </title> <booktitle> In Proceedings of the 6th International Conference on Software Engineering. </booktitle> <publisher> IEEE Press, </publisher> <month> September </month> <year> 1982. </year>
Reference-contexts: His cproto program can be found in volume 31 of the comp.sources.misc archive. 15 4.3.4 Source control Another tool used extensively by Gene is the CVS (Concurrent Versions System) tool by Brian Berliner [1]. 6 CVS is a front-end to the well-known RCS utilities <ref> [15] </ref>, providing useful "release revision" abstractions beyond the file-by-file revisions afforded by RCS.
Reference: [16] <author> David Vincenzetti and Massimo Cotrozzi. </author> <title> ATP anti tampering program. </title> <editor> In Edward DeHart, editor, </editor> <booktitle> Proceedings of the Security IV Conference, </booktitle> <pages> pages 79-90, </pages> <address> Berkeley, CA, </address> <year> 1993. </year> <booktitle> USENIX Association. </booktitle> <pages> 23 </pages>
Reference-contexts: Safety Because Tripwire sources are publically available and freely distributable, they are available for scrutiny by the community at large. Possible weaknesses have been discussed in the literature (e.g., <ref> [16] </ref>) and by private communication (e.g., [2]). These evaluations were written when our design document was not yet publically available, and reflects positively that our sources are adequately readable. 3 Furthermore, we have received many reports of system administrators modifying Tripwire, sometimes extensively, to suit their local site needs.
References-found: 16

