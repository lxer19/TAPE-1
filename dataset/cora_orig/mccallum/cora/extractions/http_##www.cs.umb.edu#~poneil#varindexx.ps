URL: http://www.cs.umb.edu/~poneil/varindexx.ps
Refering-URL: http://www.cs.toronto.edu/~mendel/dwbib.html
Root-URL: 
Email: poneil@cs.umb.edu  quass@db.stanford.edu  
Title: 1 Improved Query Performance with Variant Indexes  
Author: Patrick O'Neil UMass/Boston Dallan Quass 
Note: 1 I n t r o d u c t i o n  
Address: University  
Affiliation: Stanford  
Abstract: The read-mostly environment of data warehousing makes it possible to use more complex indexes to speed up queries than in situations where concurrent updates are present. The current paper presents a short review of current indexing technology, including rowset representation by Bitmaps, and then introduces two approaches we call BitSliced indexing and Projection indexing. A Projection index basically materializes all values of a column in RID order, and a BitSliced index essentially takes an orthogonal bit-by-bit view of the same data. While some of these concepts started with the MODEL 204 product, and both BitSliced and Projection indexing are now fully realized in Sybase IQ, this is the first rigorous examination of such indexing capabilities in the literature. We compare algorithms that become feasible with these variant index types against algorithms using more conventional indexes. The analysis demonstrates important performance advantages for variant indexes in some types of SQL aggregation, predicate evaluation, and grouping. The paper concludes by introducing a new method whereby multidimensional Group By queries, reminiscent of OLAP or Datacube queries but with more flexibility, can be very efficiently performed. Data warehouses are large, special-purpose databases that contain data integrated from a number of independent sources, supporting clients who wish to analyze the data for trends and anomalies. The process of analysis is usually performed with queries that aggregate, filter, and group the data in a variety of ways. Because the queries are often complex and the warehouse database is often very large, processing the queries quickly is a critical issue in the data warehousing environment. Data warehouses are typically updated only periodically, in a batch fashion, and during this process the warehouse is made unavailable for querying. This allows the batch update process to reorganize the indexes to a new optimal clustered form, in a manner that could not take place if the indexes needed to remain available. Since the problems associated with maintaining indexes in the presence of concurrent updates is not an issue, it becomes possible to utilize more complex access structures, such as specialized indexes and materialized aggregate views (called summary tables in data warehousing literature), to speed up query evaluation. This paper reviews current indexing technology, including rowset representation by Bitmaps, for speeding up the evaluation of complex queries over base data. It then introduces two previously known but relatively obscure indexing structures, which we call BitSliced indexes and Projection indexes. We show that BitSliced indexes and Projection indexes each provide significant performance advantages over traditional indexing structures for certain classes of queries. In fact, it may even be desirable in a data warehousing environment to have more than one type of index available on the same columns, so that the best index can be chosen for the query at hand. Indeed, the Sybase IQ data warehousing product currently provides both of these variant index types [EDEL95, FREN95], and recommends more than one index for a column in some cases. This paper represents the first time of which the authors are aware that these index structures have been examined and their differences analyzed rigorously in the database literature. Data warehouses are often built to support online analytical processing (OLAP). OLAP query performance depends on creating a set of summary tables to efficiently evaluate an expected set of queries. This approach of materializing needed aggregates is possible only when the expected set of queries is known in advance. Specifically, the OLAP approach addresses queries that group by different combinations of columns, known as dimensions. Such queries are called Datacube queries in [GBLP96]. But when ad-hoc queries must be issued that filter the rows by selection criteria that are not part of the dimensional scheme, summary tables that do not foresee such filtering 
Abstract-found: 1
Intro-found: 1
References-found: 0

