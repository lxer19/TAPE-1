URL: http://kirmes.inferenzsysteme.informatik.th-darmstadt.de/~giesl/CADE96-WS-report.ps
Refering-URL: http://www.inferenzsysteme.informatik.tu-darmstadt.de/~giesl/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: giesl@inferenzsysteme.informatik.th-darmstadt.de  
Title: Proving Partial Correctness of Partial Functions  
Author: Jurgen Giesl 
Address: Alexanderstr. 10, 64283 Darmstadt, Germany,  
Affiliation: FB Informatik, TH Darmstadt,  
Abstract: We present a method for automated induction proofs about partial functions. This method cannot only be used to verify the partial correctness of functional programs, but it also solves some other challenge problems where reasoning about partial functions is necessary. For a further analysis of partial functions we also developed a method to determine (non-trivial subsets of) their domains automatically.
Abstract-found: 1
Intro-found: 1
Reference: [BM79] <author> R. S. Boyer & J S. Moore. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference-contexts: 1 Introduction Induction is the essential proof method for the verification of functional programs. For that reason, several techniques 1 have been developed to perform induction proofs automatically, cf. e.g. <ref> [BM79, Bu + 93, Wa94a] </ref>. However, most of these techniques are only sound if all occurring functions are total. In this paper we show that by slightly restricting the prerequisites of these techniques it is nevertheless possible to use them for partial functions, too. <p> But the statement t f (r) contains the function f which may possibly be partial (as we have not yet verified the termination of its algorithm). For that reason previously developed methods for automated termination proofs of functional programs usually failed for algorithms with nested recursion <ref> [BM79, Wa94b, Gie95] </ref>. However, using the techniques to be presented in Section 3, it will be possible to verify partial correctness of statements like t f (r). Note that (surprisingly), partial correctness of these statements is already sufficient for the termination of the algorithm f .
Reference: [BM88] <author> R. S. Boyer & J S. Moore. </author> <title> The Addition of Bounded Quantification and Partial Functions to A Computational Logic and Its Theorem Prover. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 4 </volume> <pages> 117-172, </pages> <year> 1988. </year>
Reference-contexts: Hence, with our approach the well-known techniques for automated induction proofs can be directly extended to partial functions (i.e. we do not follow the suggestion of <ref> [BM88] </ref> to treat partial functions only as inputs to an interpreter function).
Reference: [BG96] <author> J. Brauburger & J. Giesl. </author> <title> Termination Analysis for Partial Functions. </title> <booktitle> In Proc. 3rd International Static Analysis Symposium, </booktitle> <address> Aachen, Germany, </address> <publisher> LNCS, </publisher> <year> 1996. </year>
Reference-contexts: For instance, for minus our method synthesizes the termination predicate "greater-equal" and for quot it synthesizes the algorithm divides. For details on our work on termination analysis for partial functions see <ref> [BG96] </ref>. 5 Conclusion We presented a method to extend the existing techniques for automated induction proofs to partial functions.
Reference: [Bu + 93] <author> A. Bundy, A. Stevens, F. van Harmelen, A. Ireland, & A. Smaill. Rippling: </author> <title> A Heuristic for Guiding Inductive Proofs, </title> <journal> Artif. Int. </journal> <volume> 62 </volume> <pages> 185-253, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction Induction is the essential proof method for the verification of functional programs. For that reason, several techniques 1 have been developed to perform induction proofs automatically, cf. e.g. <ref> [BM79, Bu + 93, Wa94a] </ref>. However, most of these techniques are only sound if all occurring functions are total. In this paper we show that by slightly restricting the prerequisites of these techniques it is nevertheless possible to use them for partial functions, too.
Reference: [Gie95] <author> J. Giesl. </author> <title> Termination Analysis for Functional Programs using Term Order-ings. Pr. </title> <booktitle> 2nd Int. Static Analysis Symp., </booktitle> <address> Glasgow, Scotland, </address> <publisher> LNCS 983, </publisher> <year> 1995. </year>
Reference-contexts: But the statement t f (r) contains the function f which may possibly be partial (as we have not yet verified the termination of its algorithm). For that reason previously developed methods for automated termination proofs of functional programs usually failed for algorithms with nested recursion <ref> [BM79, Wa94b, Gie95] </ref>. However, using the techniques to be presented in Section 3, it will be possible to verify partial correctness of statements like t f (r). Note that (surprisingly), partial correctness of these statements is already sufficient for the termination of the algorithm f .
Reference: [Gie96a] <author> J. Giesl. </author> <title> Termination of Nested and Mutually Recursive Algorithms. </title> <journal> Journal of Automated Reasoning. </journal> <note> To appear. </note>
Reference-contexts: This enables automated termination proofs for well-known challenge problems such as J. McCarthy's f 91 function. For a detailed description of these results see <ref> [Gie96a] </ref>. 2.2 Reasoning about Imperative Programs Although imperative languages are almost exclusively used in practice, up to now most systems for automated induction proofs are restricted to the verification of functional languages. Therefore one attempt for automated reasoning about imperative programs is to translate imperative programs into functional programs.
Reference: [Gie96b] <author> J. Giesl. </author> <title> Induction Proofs with Partial Functions. </title> <type> Technical Report IBN 96/35, </type> <institution> Technische Hochschule Darmstadt, Germany, </institution> <year> 1996. </year>
Reference-contexts: However, in the following we will show that by slightly restricting the application of these techniques one in fact obtains a sound calculus for induction proofs with partial functions. A more detailed description of our calculus can be found in <ref> [Gie96b] </ref>. 3 3.1 Induction w.r.t. Algorithms One of the key ideas in automated induction theorem proving is to perform inductions w.r.t. the recursions of the algorithms.
Reference: [Hen80] <author> P. Henderson. </author> <title> Functional Programming. </title> <publisher> Prentice-Hall, </publisher> <address> London, </address> <year> 1980. </year>
Reference-contexts: Therefore one attempt for automated reasoning about imperative programs is to translate imperative programs into functional programs. In this translation every while-loop is transformed into a separate function <ref> [Hen80] </ref>. But note that in general these functions are partial, because in imperative programs, termination of while-loops often depends on their contexts (i.e. on the preconditions that hold before entering a while-loop).
Reference: [KK94] <author> M. Kerber & M. Kohlhase, </author> <title> A Mechanization of Strong Kleene Logic for Partial Functions. </title> <booktitle> In Proc. 12th CADE, </booktitle> <address> Nancy, France, </address> <publisher> LNAI 814, </publisher> <year> 1994. </year>
Reference-contexts: Previous suggestions for the mechanization of partial functions either did not focus on induction <ref> [KK94] </ref> or they could not deal with non-terminating algorithms [WG94, Wa94a]. 2 Partial Correctness In this section we introduce the notion of partial correctness used in the paper. <p> While this notion of partial correctness is widely used in program verification [LS87] several other definitions for "correctness" of statements about partial functions have been suggested in the literature, cf. e.g. <ref> [KK94] </ref>.
Reference: [LS87] <author> J. Loeckx & K. Sieber, </author> <title> The Foundations of Program Verification. </title> <address> Wiley-Teubner, </address> <year> 1987. </year>
Reference-contexts: We say that a formula 8x fl '(x fl ) is partially correct, if '(t fl ) is true for all those data objects t fl where evaluation of all terms in '(t fl ) is defined. While this notion of partial correctness is widely used in program verification <ref> [LS87] </ref> several other definitions for "correctness" of statements about partial functions have been suggested in the literature, cf. e.g. [KK94].
Reference: [Wa94a] <author> C. Walther. </author> <title> Mathematical Induction. </title> <editor> In D. M. Gabbay, C. J. Hogger, and J. A. Robinson (eds.), </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> vol. 2, </volume> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Induction is the essential proof method for the verification of functional programs. For that reason, several techniques 1 have been developed to perform induction proofs automatically, cf. e.g. <ref> [BM79, Bu + 93, Wa94a] </ref>. However, most of these techniques are only sound if all occurring functions are total. In this paper we show that by slightly restricting the prerequisites of these techniques it is nevertheless possible to use them for partial functions, too. <p> Previous suggestions for the mechanization of partial functions either did not focus on induction [KK94] or they could not deal with non-terminating algorithms <ref> [WG94, Wa94a] </ref>. 2 Partial Correctness In this section we introduce the notion of partial correctness used in the paper. We regard an eager first order functional language with (non-parameterized and free) algebraic data types and pattern matching (where the patterns must be exclusive).
Reference: [Wa94b] <author> C. Walther. </author> <title> On Proving the Termination of Algorithms by Machine. </title> <journal> Artificial Intelligence, </journal> <volume> 71(1) </volume> <pages> 101-157, </pages> <year> 1994. </year>
Reference-contexts: But the statement t f (r) contains the function f which may possibly be partial (as we have not yet verified the termination of its algorithm). For that reason previously developed methods for automated termination proofs of functional programs usually failed for algorithms with nested recursion <ref> [BM79, Wa94b, Gie95] </ref>. However, using the techniques to be presented in Section 3, it will be possible to verify partial correctness of statements like t f (r). Note that (surprisingly), partial correctness of these statements is already sufficient for the termination of the algorithm f .
Reference: [WG94] <author> C.-P. Wirth & B. Gramlich. </author> <title> On Notions of Inductive Validity for First-Order Equational Clauses. </title> <booktitle> In Proc. 12th CADE, </booktitle> <address> Nancy, France, </address> <publisher> LNAI 814, </publisher> <year> 1994. </year> <month> 6 </month>
Reference-contexts: Previous suggestions for the mechanization of partial functions either did not focus on induction [KK94] or they could not deal with non-terminating algorithms <ref> [WG94, Wa94a] </ref>. 2 Partial Correctness In this section we introduce the notion of partial correctness used in the paper. We regard an eager first order functional language with (non-parameterized and free) algebraic data types and pattern matching (where the patterns must be exclusive).
References-found: 13

