URL: ftp://ftp.csd.uu.se/pub/papers/reports/0149.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Email: email: fdantsin,voronkovg@csd.uu.se  
Title: Complexity of Query Answering in Logic Databases with Complex Values  
Author: Evgeny Dantsin Andrei Voronkov 
Note: Supported by grants from the Swedish Royal Academy of Sciences, the Swedish Institute and RFBR/INTAS. Author's email address at St.Petersburg: dantsin@pdmi.ras.ru Supported by a TFR grant.  
Address: Fontanka 27, St.Petersburg 191011 Russia  Box 311, S-751 05 Uppsala Sweden  
Affiliation: Steklov Institute of Mathematics at St.Petersburg  Computing Science Department Uppsala University  
Abstract: UPMAIL Technical Report No. 149 November 27, 1997 Revised February 16, 1998 ISSN 1100-0686 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul and C. Beeri. </author> <title> The power of languages for the manipulation of complex values. </title> <journal> VLDB Journal, </journal> <volume> 4 </volume> <pages> 727-794, </pages> <year> 1995. </year> <note> REFERENCES 9 </note>
Reference: [2] <author> S. Abiteboul and S. Grumbach. Col: </author> <title> A logic-based language for complex objects. </title> <editor> In J. Schmidt, S. Ceri, and M. Missikoff, editors, </editor> <booktitle> Advances in Database Technology - EDBT'88. Proceedings of the International Conference on Extending Database Technology, volume 303 of Lecture Notes in Computer Science, </booktitle> <pages> pages 271-293, </pages> <address> Venice, Italy, March 1988. </address> <publisher> Springer Verlag. </publisher>
Reference: [3] <author> S. Abiteboul and S. Grumbach. </author> <title> A rule-based language with functions and sets. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 16(1) </volume> <pages> 1-30, </pages> <year> 1991. </year>
Reference: [4] <author> K.R. Apt. </author> <title> Logic programming. </title> <editor> In J. Van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Methods and Semantics, chapter 10, </booktitle> <pages> pages 493-574. </pages> <publisher> Elsevier Science, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: We assume that contains at least one constant and does not contain the equality symbol =. Atoms, substitutions, instances, variants etc. are defined in the standard way (see, for example, <ref> [4] </ref>). The Herbrand universe U for is defined as the set of all ground terms over . The set of all ground atoms over is called the Herbrand base B for . <p> Similarly, we use the terms logic programs with bags, trees, etc. Semantics. The semantics of logic programs over equational theories can be defined in many ways by adapting the standard logic programming semantics <ref> [4, 17, 12] </ref> for the corresponding equational theory. For example, one can use the least fixpoint semantics or a generalization of SLD-resolution. We define the semantics by using the least Herbrand model. Let A :- A 1 ; : : : ; A n be a clause without variables.
Reference: [5] <author> C. Beeri and Y. Kornatzky. </author> <title> A logical query language for hypermedia systems. </title> <journal> Information Sciences, </journal> <volume> 77 </volume> <pages> 1-38, </pages> <year> 1994. </year>
Reference: [6] <author> C. Beeri, S. Naqvi, O. Schmueli, and S. Tsur. </author> <title> Set constructors in a logic database language. </title> <journal> Journal of Logic Programming, </journal> <volume> 10 </volume> <pages> 181-232, </pages> <year> 1991. </year>
Reference: [7] <author> E. Dantsin, T. Eiter, G. Gottlob, and A. Voronkov. </author> <title> Complexity and expressive power of logic programming. </title> <booktitle> In Proceedings Twelfth Annual IEEE Conference on Computational Complexity, </booktitle> <pages> pages 82-101, </pages> <address> Ulm, Germany, </address> <month> June </month> <year> 1997. </year>
Reference: [8] <author> E. Dantsin and A. Voronkov. </author> <title> Bag and set unification. </title> <type> UPMAIL Technical Report 150, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> September </month> <year> 1997. </year>
Reference: [9] <author> E. Dantsin and A. Voronkov. </author> <title> Complexity of query answering in logic databases with complex values. </title> <editor> In S. Adian and A. Nerode, editors, </editor> <booktitle> Logical Foundations of Computer Science. 4th International Symposium, LFCS'97, volume 1234 of Lecture Notes in Computer Science, </booktitle> <pages> pages 56-66, </pages> <address> Yaroslavl, Russia, </address> <month> July </month> <year> 1997. </year>
Reference: [10] <author> A. Dovier, E.G. Omodeo, E. Pontelli, and G. Rossi. flogg: </author> <title> A language for programming in logic with finite sets. </title> <journal> Journal of Logic Programming, </journal> <volume> 28(1) </volume> <pages> 1-44, </pages> <year> 1996. </year>
Reference-contexts: Note that we defined hereditarily finite sets, i.e. finite sets whose elements can be other (hereditarily finite) sets. There are other ways of integrating finite sets into logic programming. For example, in <ref> [10] </ref> sets are represented by terms fs 1 ; : : :; s n j tg where t can be any term not necessarily representing a set (the authors call such objects colored sets). Thus, a set is characterized not only by its elements but also by some "type" (color).
Reference: [11] <author> M. Gabbrielli, G.M. Dore, and G. Levi. </author> <title> Observable semantics for constraint logic programs. </title> <journal> Journal of Logic and Computation, </journal> <volume> 5(2) </volume> <pages> 133-171, </pages> <year> 1995. </year>
Reference: [12] <author> J.H. Gallier and S. Raatz. </author> <title> Extending SLD-resolution to equational Horn clauses using E-unification. </title> <journal> Journal of Logic Programming, </journal> <volume> 6(3) </volume> <pages> 3-44, </pages> <year> 1989. </year>
Reference-contexts: Similarly, we use the terms logic programs with bags, trees, etc. Semantics. The semantics of logic programs over equational theories can be defined in many ways by adapting the standard logic programming semantics <ref> [4, 17, 12] </ref> for the corresponding equational theory. For example, one can use the least fixpoint semantics or a generalization of SLD-resolution. We define the semantics by using the least Herbrand model. Let A :- A 1 ; : : : ; A n be a clause without variables.
Reference: [13] <author> S. Grumbach and V. Vianu. </author> <title> Tractable query languages for complex object databases. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 51(2) </volume> <pages> 149-167, </pages> <year> 1995. </year>
Reference: [14] <author> P. Kanellakis, G.M. Kuper, and P.Z. Revesz. </author> <title> Constraint query languages. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 51 </volume> <pages> 26-52, </pages> <year> 1995. </year>
Reference: [15] <author> G.M. Kuper. </author> <title> Logic programming with sets. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 41 </volume> <pages> 44-64, </pages> <year> 1990. </year>
Reference: [16] <author> N. Leone and P. Rullo. </author> <title> Ordered logic programming with sets. </title> <journal> Journal of Logic and Computation, </journal> <volume> 3(6) </volume> <pages> 621-642, </pages> <year> 1993. </year>
Reference: [17] <author> J.W. Lloyd. </author> <booktitle> Foundations of Logic Programming (2nd edition). </booktitle> <publisher> Springer Verlag, </publisher> <year> 1987. </year> <note> 10 REFERENCES </note>
Reference-contexts: Similarly, we use the terms logic programs with bags, trees, etc. Semantics. The semantics of logic programs over equational theories can be defined in many ways by adapting the standard logic programming semantics <ref> [4, 17, 12] </ref> for the corresponding equational theory. For example, one can use the least fixpoint semantics or a generalization of SLD-resolution. We define the semantics by using the least Herbrand model. Let A :- A 1 ; : : : ; A n be a clause without variables.
Reference: [18] <author> M.J. Maher. </author> <title> A CLP view of logic programming. </title> <booktitle> In Proc. Conf. on Algebraic and Logic Programming, volume 632 of Lecture Notes in Computer Science, </booktitle> <pages> pages 364-383, </pages> <month> October </month> <year> 1992. </year>
Reference: [19] <author> C.H. Papadimitriou. </author> <title> Computational Complexity. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Proof. We reduce the TILING problem, which is known to be NEXP-complete (see for example <ref> [19] </ref>, page 501), to the query answering problem for nonrecursive range-restricted logic programs with lists. Informally, TILING is the problem of tiling the square of size 2 n fi 2 n by tiles (squares of size 1 fi 1).
Reference: [20] <author> O. Shmueli, S. Tsur, and C. Zaniolo. </author> <title> Compilation of set terms in the logic data language (LDL). </title> <journal> Journal of Logic Programming, </journal> <volume> 12(1) </volume> <pages> 89-119, </pages> <year> 1992. </year>
Reference: [21] <author> R.W. Topor. </author> <title> Domain independent formulas and databases. </title> <journal> Theoretical Computer Science, </journal> <volume> 52(3) </volume> <pages> 281-306, </pages> <year> 1987. </year>
Reference-contexts: Range-restricted queries play an important role in databases because they are domain independent (see <ref> [21] </ref> for example). The query answering problem. Consider a set C of logic programs over E.
Reference: [22] <author> K. Vadaparty. </author> <title> On the power of rule-based languages with sets. </title> <booktitle> In ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 26-36, </pages> <year> 1991. </year>
Reference: [23] <author> A. Voronkov. </author> <title> Logic programming with bounded quantifiers. </title> <editor> In A. Voronkov, editor, </editor> <booktitle> Logic Programming, volume 592 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 486-514. </pages> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
References-found: 23

