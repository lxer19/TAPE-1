URL: http://www.cs.indiana.edu/database/Ode/doc/att-db-92-6.ps.Z
Refering-URL: http://www.cs.indiana.edu/database/Ode/doc/
Root-URL: http://www.cs.indiana.edu
Title: Event Specification in an Active Object-Oriented Database  
Author: N. H. Gehani H. V. Jagadish O. Shmueli 
Address: Murray Hill, New Jersey 07974  
Affiliation: AT&T Bell Laboratories  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Agrawal and N. H. Gehani, </author> <title> ``Ode (Object Database and Environment): The Language and the Data Model'', </title> <booktitle> Proc. ACM-SIGMOD 1989 Int'l Conf. Management of Data, </booktitle> <address> Portland, Oregon, </address> <month> May-June </month> <year> 1989, </year> <pages> 36-45. </pages>
Reference-contexts: We describe the integration of composite event specification in the context of O++, the database programming language for the Ode object database <ref> [1] </ref>. We propose a new Event-Action (E-A) model, which is simpler than the E-C-A model. <p> Event specification extensions are discussed in Section 9. Related work is discussed in Section 10. Finally, future work and conclusions are outlined in Section 11. 2. ODE SUMMARY The work in this paper builds on the trigger facilities in Ode, an object-oriented system being developed at AT&T Bell Labs <ref> [1, 10] </ref>. The O++ object facility is based on the C++ object facility and is called the class. O++ extends C++ by providing facilities to create persistent objects. O++ visualizes memory as consisting of two parts: volatile and persistent.
Reference: [2] <author> S. Andler, </author> <title> ``Predicate Path Expressions'', </title> <booktitle> Proceedings of the 6th ACM Symposium on Principles of Programming Languages, </booktitle> <year> 1979, </year> <pages> 226-236. </pages>
Reference-contexts: EVENT SPECIFICATION EXTENSIONS We have limited ourselves in the preceding to events that can be monitored efficiently by means of finite automata. But there are other composite events of interest that we may be able to capture efficiently as well. In particular, as in the case of path expressions <ref> [2, 6] </ref>, we discuss here the notion of (unbounded) event counters. The term #F is used to mean the number of times event F has occurred. An event point can be specified using event equations.
Reference: [3] <author> C. Beeri and T. Milo, </author> <title> ``A Model for Active Object Oriented Database'', </title> <booktitle> Proc. of the 17th Int'l Conf. on Very Large Databases, </booktitle> <address> Barcelona, Spain, </address> <month> Sept. </month> <year> 1991, </year> <pages> 337-349. </pages>
Reference-contexts: 1. INTRODUCTION Of late, there has been a surge of interest in active databases <ref> [3, 8, 8, 15, 17, 18] </ref>. Several trigger and constraint specification mechanisms have been proposed, and the use of such mechanisms for various applications has been considered. By and large, the fundamental model underlying this work is the Event-Condition-Action (E-C-A) model first enunciated in [16].
Reference: [4] <author> R. H. Campbell and A. N. Habermann, </author> <title> ``The Specification of Process Synchronization by Path Expressions'', </title> <booktitle> in Lecture Notes in Computer Science, </booktitle> <volume> vol. 16, </volume> <publisher> Springer-Verlag, </publisher> <year> 1974. </year>
Reference-contexts: RELATED WORK Behavior specification using regular expressions and finite state machines is by no means a new idea. In the context of active databases they appear in [9]. Other well-known examples are path expressions and their derivatives <ref> [4, 5, 12] </ref>, which are used to specify process synchronization in concurrent programs. Path expressions are associated with objects. An object method can be executed only if it ``satisfies'' the path expressions associated with the object.
Reference: [5] <author> R. H. Campbell and A. N. Habermann, </author> <title> ``Path Expressions in Pascal'', </title> <booktitle> Proceedings of the Fourth International Conference on Software Engineering, </booktitle> <year> 1979, </year> <pages> 212-219. </pages>
Reference-contexts: RELATED WORK Behavior specification using regular expressions and finite state machines is by no means a new idea. In the context of active databases they appear in [9]. Other well-known examples are path expressions and their derivatives <ref> [4, 5, 12] </ref>, which are used to specify process synchronization in concurrent programs. Path expressions are associated with objects. An object method can be executed only if it ``satisfies'' the path expressions associated with the object.
Reference: [6] <author> R. H. Campbell, </author> <title> ``Distributed Path Pascal'', in Distributed Computing Systems, </title> <editor> Y. Paker, J.-P. Verjus and 191-224 (ed.), </editor> <publisher> Academic Press, </publisher> <year> 1983. </year>
Reference-contexts: EVENT SPECIFICATION EXTENSIONS We have limited ourselves in the preceding to events that can be monitored efficiently by means of finite automata. But there are other composite events of interest that we may be able to capture efficiently as well. In particular, as in the case of path expressions <ref> [2, 6] </ref>, we discuss here the notion of (unbounded) event counters. The term #F is used to mean the number of times event F has occurred. An event point can be specified using event equations.
Reference: [7] <author> S. Chakravarthy and D. Mishra, </author> <title> ``An Event Specification Language (Snoop) for Active Databases and its Detection'', </title> <institution> University of Florida CIS Tech. Rep.-91-23, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: The question of what constitutes an event has not been fully addressed in the literature so far, in our opinion. There are however some considerations of this issue, specifically in [9] and <ref> [7] </ref>. In this paper, we focus on the different types of events that can occur in an object-oriented database and provide facilities for specifying composite events, constructed from (simpler) basic events.
Reference: [8] <author> U. Dayal, B. Blaustein, A. Buchmann, U. Chakravarthy, M. Hsu, R. Ladin, D. McCarthy, A. Rosenthal and S. Sarin, </author> <title> ``The HiPAC Project: Combining Active Databases and Timing Constraints'', </title> <booktitle> ACM-SIGMOD Record 17, </booktitle> <month> 1 (March </month> <year> 1988), </year> <pages> 51-70. </pages>
Reference-contexts: 1. INTRODUCTION Of late, there has been a surge of interest in active databases <ref> [3, 8, 8, 15, 17, 18] </ref>. Several trigger and constraint specification mechanisms have been proposed, and the use of such mechanisms for various applications has been considered. By and large, the fundamental model underlying this work is the Event-Condition-Action (E-C-A) model first enunciated in [16]. <p> Also, its occurrence is no guarantee that the transaction will commit as it may abort after the before tcomplete event. 7. RELATIONSHIP BETWEEN TRIGGERED ACTIONS AND TRIGGERING TRANSACTIONS The most quoted standard model for describing trigger operation is the E-C-A model <ref> [8, 16] </ref>. There are four common types of couplings possible between each of E (first part) - C (second part) and C (first part) - A (second part).
Reference: [9] <author> U. Dayal, M. Hsu and R. Ladin, </author> <title> ``A Transaction Model for Long-Running Activities'', </title> <booktitle> Proc. of the 17th Int'l Conf. on Very Large Databases, </booktitle> <address> Barcelona, Spain, </address> <month> Sept. </month> <year> 1991, </year> <pages> 113-122. </pages>
Reference-contexts: By and large, the fundamental model underlying this work is the Event-Condition-Action (E-C-A) model first enunciated in [16]. The question of what constitutes an event has not been fully addressed in the literature so far, in our opinion. There are however some considerations of this issue, specifically in <ref> [9] </ref> and [7]. In this paper, we focus on the different types of events that can occur in an object-oriented database and provide facilities for specifying composite events, constructed from (simpler) basic events. <p> While this is, strictly speaking, no longer a finite automaton, it is still easily implementable. 10. RELATED WORK Behavior specification using regular expressions and finite state machines is by no means a new idea. In the context of active databases they appear in <ref> [9] </ref>. Other well-known examples are path expressions and their derivatives [4, 5, 12], which are used to specify process synchronization in concurrent programs. Path expressions are associated with objects. An object method can be executed only if it ``satisfies'' the path expressions associated with the object.
Reference: [10] <author> N. H. Gehani and H. V. Jagadish, </author> <title> ``Ode as an Active Database: Constraints and Triggers'', </title> <booktitle> Proc. 17th Int'l Conf. Very Large Data Bases, </booktitle> <address> Barcelona, Spain, </address> <year> 1991, </year> <pages> 327-336. </pages>
Reference-contexts: Event specification extensions are discussed in Section 9. Related work is discussed in Section 10. Finally, future work and conclusions are outlined in Section 11. 2. ODE SUMMARY The work in this paper builds on the trigger facilities in Ode, an object-oriented system being developed at AT&T Bell Labs <ref> [1, 10] </ref>. The O++ object facility is based on the C++ object facility and is called the class. O++ extends C++ by providing facilities to create persistent objects. O++ visualizes memory as consisting of two parts: volatile and persistent.
Reference: [11] <author> D. Harel, ``Statecharts: </author> <title> A Visual Formalism for Complex Systems'', </title> <booktitle> Science of Computer Programming 8, </booktitle> <year> (1988), </year> <pages> 231-274. </pages>
Reference-contexts: Time-based events are important for active databases and their incorporation into a general framework of addressing events is therefore desirable, if not mandatory. The issue of (true physical) time and the proper way of incorporating it with a ``logical'' system view presents many difficulties; see for example <ref> [11, 14] </ref>. One obvious problem is that communication takes time (especially in a distributed system) and that internal events and state transitions are not instantaneous. Furthermore, transaction execution takes time. We propose a way for handling time and time related events. <p> An object method can be executed only if it ``satisfies'' the path expressions associated with the object. Otherwise, execution of the operation (the process) is delayed until the path expressions can be satisfied. Another well known example of the use of behavior specification using finite automata are statecharts <ref> [11] </ref>. Statecharts are a mechanism for specifying the input and output of a system interacting with the environment, such a system is called reactive.
Reference: [12] <author> M. R. Headington and A. E. Oldehoeft, </author> <title> ``Open Predicate Path Expressions and their Implementation in Highly Parallel Computing Environments'', </title> <booktitle> Proceedings of the International Conference on Parallel Processing, </booktitle> <year> 1985, </year> <pages> 239-246. </pages>
Reference-contexts: RELATED WORK Behavior specification using regular expressions and finite state machines is by no means a new idea. In the context of active databases they appear in [9]. Other well-known examples are path expressions and their derivatives <ref> [4, 5, 12] </ref>, which are used to specify process synchronization in concurrent programs. Path expressions are associated with objects. An object method can be executed only if it ``satisfies'' the path expressions associated with the object.
Reference: [13] <author> S. N. Khoshafian and G. P. Copeland, </author> <title> ``Object Identity'', </title> <booktitle> Proc. OOPSLA '86, </booktitle> <address> Portland, Oregon, </address> <month> Sept. </month> <year> 1986, </year> <pages> 406-416. </pages>
Reference-contexts: Persistent objects are allocated in persistent memory and they continue to exist after the program creating them has terminated. Each persistent object is identified by a unique - 2 - identifier, called the object identity <ref> [13] </ref>. The object identity is referred to as a pointer to a persistent object. Transactions in O++ have the form trans ...- Transactions are aborted using the tabort statement. O++ provides facilities for associating constraints and triggers with an object.
Reference: [14] <author> L. Lamport, </author> <title> ``Time, Clocks and the Ordering of Events in a Distributed System'', </title> <journal> Commun. ACM 21, </journal> <month> 7 (July </month> <year> 1978), </year> <pages> 558-565. - 17 </pages> - 
Reference-contexts: Time-based events are important for active databases and their incorporation into a general framework of addressing events is therefore desirable, if not mandatory. The issue of (true physical) time and the proper way of incorporating it with a ``logical'' system view presents many difficulties; see for example <ref> [11, 14] </ref>. One obvious problem is that communication takes time (especially in a distributed system) and that internal events and state transitions are not instantaneous. Furthermore, transaction execution takes time. We propose a way for handling time and time related events.
Reference: [15] <author> G. M. Lohman, B. Lindsay, H. Pirahesh and K. B. Schiefer, </author> <title> ``Extensions to Starburst: Objects, Types, Functions, and Rules'', </title> <journal> Comm. ACM 34, </journal> <month> 10 (October </month> <year> 1991), </year> <pages> 94-109. </pages>
Reference-contexts: 1. INTRODUCTION Of late, there has been a surge of interest in active databases <ref> [3, 8, 8, 15, 17, 18] </ref>. Several trigger and constraint specification mechanisms have been proposed, and the use of such mechanisms for various applications has been considered. By and large, the fundamental model underlying this work is the Event-Condition-Action (E-C-A) model first enunciated in [16].
Reference: [16] <author> D. R. McCarthy and U. Dayal, </author> <title> ``The Architecture of An Active Database Management System'', </title> <booktitle> Proc. ACM-SIGMOD 1989 Int'l Conf. Management of Data, </booktitle> <address> Portland, Oregon, </address> <month> May-June </month> <year> 1989, </year> <pages> 215-224. </pages>
Reference-contexts: Several trigger and constraint specification mechanisms have been proposed, and the use of such mechanisms for various applications has been considered. By and large, the fundamental model underlying this work is the Event-Condition-Action (E-C-A) model first enunciated in <ref> [16] </ref>. The question of what constitutes an event has not been fully addressed in the literature so far, in our opinion. There are however some considerations of this issue, specifically in [9] and [7]. <p> Also, its occurrence is no guarantee that the transaction will commit as it may abort after the before tcomplete event. 7. RELATIONSHIP BETWEEN TRIGGERED ACTIONS AND TRIGGERING TRANSACTIONS The most quoted standard model for describing trigger operation is the E-C-A model <ref> [8, 16] </ref>. There are four common types of couplings possible between each of E (first part) - C (second part) and C (first part) - A (second part).
Reference: [17] <author> A. Silberschatz, M. Stonebraker and J. Ullman, </author> <title> ``Database Systems: Achievements and Opportunities'', </title> <journal> Comm. ACM 34, </journal> <month> 10 (October </month> <year> 1991), </year> <pages> 110-120. </pages>
Reference-contexts: 1. INTRODUCTION Of late, there has been a surge of interest in active databases <ref> [3, 8, 8, 15, 17, 18] </ref>. Several trigger and constraint specification mechanisms have been proposed, and the use of such mechanisms for various applications has been considered. By and large, the fundamental model underlying this work is the Event-Condition-Action (E-C-A) model first enunciated in [16].

References-found: 17

