URL: http://iacoma.cs.uiuc.edu/iacoma-papers/accurate.ps
Refering-URL: http://iacoma.cs.uiuc.edu/papers.html
Root-URL: http://www.cs.uiuc.edu
Title: Low Perturbation Address Trace Collection with Simple Hardware Performance Monitors 1  
Author: Russell Daigle Chun Xia and Josep Torrellas 
Address: IL 61801  
Affiliation: Center for Supercomputing Research and Development Computer Science Department University of Illinois at Urbana-Champaign,  
Abstract: While address trace analysis is a popular method to evaluate the memory system of computers, getting accurate traces of operating system, multiprogrammed, and parallel workloads in multiprocessors is hard. This is because the true behavior of these real-time loads can be easily altered by the trace collecting activity. To minimize perturbation, it is usually necessary to use trace-gathering hardware performance monitors. Unfortunately, these devices often have limitations. For example, they often only capture physical addresses, can only collect references that miss in on-chip caches, and can only monitor a very small time window. In this paper, we show how to improve the capability of such devices. We present a simple methodology to instrument operating system and applications to transfer a wide variety of information to the trace-gathering hardware with little perturbation. For instance, the information transferred includes the virtual to physical address mapping or the sequence of basic blocks executed. Each piece of information is transferred as cheaply and non-intrusively as one or a few machine instructions with one or a few cache misses. With this approach, instrumenting every basic block in the operating system and application to reconstruct the sequence of instructions executed causes only a 1.6-2.8 execution slowdown. This is in contrast to a 10-times slowdown for fully software-based instrumentation. Furthermore, the behavior of the operating system is largely unaffected.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Alexander, W. Keshlear, F. Cooper, and F. Briggs. </author> <title> Cache Memory Performance in a UNIX Environment. </title> <booktitle> In Computer Architecture News, </booktitle> <pages> pages 41-70, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: In addition, they tend to be expensive and non-portable. Several trace-collecting hardware devices have been used, especially in uniprocessors. For example, Alexander et al <ref> [1] </ref> used a logic analyzer to gather address traces from a NS32016 microprocessor. This system can observe all the accesses issued by the processor because the processor monitored does not have on-chip caches.
Reference: [2] <institution> Alliant Computer Systems Corporation. FX/Series Product Summary. Littleton, </institution> <address> MA, </address> <year> 1986. </year>
Reference-contexts: Depending on the frequency of cache misses in the workload that is running, bus transactions fill up the trace buffer in 0.5 to 4 seconds. Example 2: Alliant This trace generation system [19] uses a 4-processor Alliant FX/8 bus-based multiprocessor <ref> [2] </ref>. In this machine, each processor has a 16-Kbyte direct-mapped primary instruction cache. In addition, all processors share one 512-Kbyte 4-way interleaved cache with 32-byte lines. This cache receives all data accesses plus the instruction accesses that miss in the primary caches.
Reference: [3] <editor> J. B. </editor> <address> Andrews. </address>
Reference-contexts: Concentrix is Alliant's commercial operating system and is based on 4.2 BSD UNIX. Xylem is symmetric and all data is shared by all processors. Between the primary caches and the shared cache, we connect a hardware performance monitor <ref> [3] </ref> that can gather address traces. The monitor has 4 trace buffers connected to the four processors. Each trace buffer gathers the physical addresses of the memory locations referenced by the loads and stores from one processor. Each buffer stores up to one million events.
References-found: 3

