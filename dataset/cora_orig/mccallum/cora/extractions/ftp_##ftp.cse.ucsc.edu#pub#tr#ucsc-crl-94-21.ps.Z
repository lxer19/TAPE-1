URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-94-21.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: Extraction of Breaks in Rectilinear Layouts by Plane Sweeps  
Author: Jeffrey S. Rogenski 
Address: Santa Cruz, CA 95064  
Affiliation: Board of Studies in Computer Engineering University of California, Santa Cruz  
Date: April 21, 1995  
Pubnum: UCSC-CRL-94-21  
Abstract: Inductive fault analysis seeks to improve the effectiveness of circuit testing by determining which faults are most likely to occur as the result of common manufacturing defects, and focusing testing efforts on these faults. In current circuit fabrication processes, the most common spot defects cause bridges and breaks. We present an efficient plane sweep algorithm for calculating the critical area of possible breaks in rectilinear circuit layouts. The algorithm has been integrated with an existing program, Carafe, that previously only performed extraction of likely bridges. Carafe was used to analyze the occurrence of breaks in benchmark circuits; the results of this analysis are presented. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. L. Bentley and D. Wood. </author> <title> An optimal worst case algorithm for reporting intersections on rectangles. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-29:563-580, </volume> <year> 1980. </year>
Reference-contexts: Note that the k term can be significant, since it is O (p 2 ). Our implementation does not achieve this optimal asymptotic performance. Edelsbrun-ner's optimal performance comes from the use of an efficient tree structure for keeping track of the active intervals, such as the segment tree <ref> [1] </ref>. The segment tree allows active intervals to be inserted and deleted in O (log n) time. Due to the additional difficulties posed by multiple layers, contacts, and devices in our implementation, we were not able to implement such an efficient structure.
Reference: [2] <author> F. Brglez and H. Fujiwara. </author> <title> A neutral netlist of 10 combinational benchmark circuits and a target translator in FORTRAN. </title> <booktitle> In Proceedings of the IEEE International Symposium on Circuits and Systems, </booktitle> <year> 1985. </year>
Reference-contexts: Hence, the number of breaks in a node, the number of vertices in G, and the number of edges in G are O (t). 23 5. Experimental Results Using the new break extraction routines in Carafe, we analyzed the occurrence of breaks in the ISCAS85 combinational benchmark circuits <ref> [2] </ref>. A standard cell library and channel-routed layouts of the benchmarks were provided by MCNC for this purpose.
Reference: [3] <author> Herbert Edelsbrunner. </author> <title> A new approach to rectangle intersections, part II. </title> <journal> International Journal of Computer Mathematics, </journal> <volume> 13 </volume> <pages> 221-229, </pages> <year> 1983. </year>
Reference-contexts: Graph Construction post-processing, (c) the graph after contacts are expanded, (d) the graph after degree two vertices are removed. 2.2. Performance Analysis 15 solving the pairwise intersection problem has been found by Edelsbrunner; it runs in time O (p log p + k) and space O (p) <ref> [3] </ref>. Here p is the number of polygons, in this case rectangles, and k is the number of intersecting pairs; we will also use n to represent the total number of vertices of the polygons (of course, since we're only concerned with rectangles, n is O (p)).
Reference: [4] <author> Derek Feltham and Wojciech Maly. </author> <title> Physically realistic fault models for analog CMOS neural networks. </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> 26(9) </volume> <pages> 1223-1229, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: A standard cell library and channel-routed layouts of the benchmarks were provided by MCNC for this purpose. We used 1.2 micron design rules, defect sizes ranging from 1.75 microns to 3.25 microns, and the defect densities published by Feltham and Maly <ref> [4] </ref>, which were based on observed failures of fabricated circuits. Our first experiment simply helps to evaluate the practical performance of our algorithms, although the lack of published running times precludes comparisons to other systems.
Reference: [5] <author> F. Joel Ferguson and Tracy Larrabee. </author> <title> Test pattern generation for realistic bridge faults in CMOS ICs. </title> <booktitle> In Proceedings of International Test Conference, </booktitle> <pages> pages 492-499. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: The cells can be extracted once each individually, and an automaic test pattern generation program can combine information from both sources to generate tests for the circuit; for example, Nemesis <ref> [5] </ref> has this capability. As can be seen from the table, the CPU time scales up fairly linearly with the size of the circuit. This is probably due more to the nature of the circuits than the algorithms.
Reference: [6] <author> F. Joel Ferguson and John P. Shen. </author> <title> A CMOS fault extractor for inductive fault analysis. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 7(11) </volume> <pages> 1181-1194, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: Then the effects these changes induce at higher levels of abstraction are determined, hence "inductive" fault analysis. Logic testing is the most commonly used testing methodology, so typically the effects of defects on the logical function of the circuit constitute the desired result. IFA consists of these main steps <ref> [6] </ref>: * Technology analysis * Layout parsing * Defect generation * Primitive fault extraction * Circuit fault translation. Technology analysis involves studying the fabrication technology to develop a simple model of defects that are likely to be present in chips under test.
Reference: [7] <author> C.L. Henderson, J.M. Soden, </author> <title> and C.F. Hawkins. The behavior and testing implications of CMOS IC logic gate open circuits. </title> <booktitle> In Proceedings of International Test Conference, </booktitle> <pages> pages 302-310. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: These faults can be assumed to cause the transistor gate (s) in question to be stuck-at some value, although research has shown that there are complex interactions between floating nodes and the rest of the circuit that may invalidate this assumption <ref> [7] </ref> [12]. Note that because these include faults that only leave a single transistor gate floating, they are not all single stuck-at faults, which require a gate input or output to be stuck.
Reference: [8] <author> Oscar H. Ibarra and Sartaj K. Sahni. </author> <title> Polynomially complete fault detection problems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-24(3):242-249, </volume> <month> March </month> <year> 1975. </year>
Reference-contexts: In addition, the high level of integration possible with VLSI meant that test generation would be more difficult; since test generation for digital circuits is NP-complete <ref> [8] </ref>, generating and performing unnecessary tests is very costly. IFA addresses these problems by looking at the manufacturing process and the layout of the circuit to determine which faults are most likely, so that test generation efforts can be focused on them.
Reference: [9] <author> Alvin Jee and F. Joel Ferguson. Carafe: </author> <title> An inductive fault analysis tool for CMOS VLSI circuits. </title> <booktitle> In Proceedings of the IEEE VLSI Test Symposium, </booktitle> <pages> pages 92-98, </pages> <year> 1993. </year>
Reference-contexts: It is also useful in yield estimation, since circuits that are less vulnerable to realistic defects should have a higher yield. 1.2 Carafe Carafe, a program originally authored by Alvin Jee <ref> [9] </ref>, is designed to perform inductive fault analysis for rectilinear circuit layouts; non-rectilinear layouts must be approximated by a rectilinear layout before they can be analyzed. Previously, it produced a list of likely bridges and their probabilities, for the given layout.
Reference: [10] <author> Siegmar Koeppe. </author> <title> Optimal layout to avoid CMOS stuck-open faults. </title> <booktitle> In Proceedings of Design Automation Conference, </booktitle> <pages> pages 829-835. </pages> <publisher> IEEE, </publisher> <year> 1987. </year>
Reference-contexts: Sometimes, these redundant paths are intentionally added to layouts in order to reduce susceptibility to common defect types <ref> [10] </ref>. Figure 1.1 shows (with X's) the breaks that may be present in a typical standard cell inverter; note that since each unique partitioning is a different break, even this simple cell with four nodes has 16 breaks.
Reference: [11] <author> W. Maly, F.J. Ferguson, and J. P. Shen. </author> <title> Systematic characterization of physical defects for fault analysis of MOS IC cells. </title> <booktitle> In Proceedings of International Test Conference, </booktitle> <pages> pages 390-399. </pages> <publisher> IEEE, </publisher> <year> 1984. </year>
Reference-contexts: Subsequent chapters explore the algorithms we used to implement break extraction. Finally, we describe results that were obtained by analyzing benchmark circuits with our break extraction program. 1.1 Inductive Fault Analysis The concept of Inductive Fault Analysis (IFA) was introduced in 1984 by Maly et al. <ref> [11] </ref>. IFA addressed the testing issues raised by the proliferation of VLSI technology. The single stuck-at (SSA) model [13], which modeled defects as a single gate input or output "stuck" at logic 0 or 1, was the main fault model in use at that time.
Reference: [12] <author> Michel Renovell and Gaston Cambon. </author> <title> Electrical analysis and modeling of floating-gate fault. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 11(11) </volume> <pages> 1450-1458, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: These faults can be assumed to cause the transistor gate (s) in question to be stuck-at some value, although research has shown that there are complex interactions between floating nodes and the rest of the circuit that may invalidate this assumption [7] <ref> [12] </ref>. Note that because these include faults that only leave a single transistor gate floating, they are not all single stuck-at faults, which require a gate input or output to be stuck. Type 2 includes breaks that occur in a parallel connection between power or ground and a cell output.
Reference: [13] <author> J. P. Roth. </author> <title> Diagnosis of automata failures: A calculus and a method. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 10 </volume> <pages> 278-291, </pages> <year> 1966. </year>
Reference-contexts: IFA addressed the testing issues raised by the proliferation of VLSI technology. The single stuck-at (SSA) model <ref> [13] </ref>, which modeled defects as a single gate input or output "stuck" at logic 0 or 1, was the main fault model in use at that time.
Reference: [14] <author> M. I. Shamos and D. Hoey. </author> <title> Geometric intersection problems. </title> <booktitle> In Proceedings of the 17th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 208-215. </pages> <publisher> IEEE, </publisher> <year> 1976. </year>
Reference-contexts: The plane sweep (also known as sweep line) technique that our algorithm is based on was first developed to efficiently solve polygon intersection problems <ref> [14] </ref>. Basically, our graph 1 This formula ignores the area that extends beyond the edges of the LW, known as the fringe area, that is shown in Figure 2.1. Carafe allows the fringe area to be counted if desired, but double-counting of critical area may result. 2.1.
Reference: [15] <author> J.P. Shen, W. Maly, and F.J. Ferguson. </author> <title> Inductive fault analysis of MOS integrated circuits. </title> <journal> IEEE Design and Test of Computers, </journal> <volume> 2(6) </volume> <pages> 13-26, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: The focus is on defects that cause local changes in circuit connectivity, since global changes, such as misaligned masks, are either trivial to detect or are better detected elsewhere in the manufacturing process. Shen et al. <ref> [15] </ref> found that spot defects, small areas of missing or extra material, 2 1. Introduction commonly caused local changes in connectivity. Hence, spot defects constitute our defect model at the technology level.
Reference: [16] <author> J.J.T. Sousa, F.M. Gon~calves, and J.P. Teixeira. </author> <title> IC defects-based testability analysis. </title> <booktitle> In Proceedings of European Test Conference, </booktitle> <pages> pages 500-506, </pages> <year> 1991. </year>
Reference-contexts: Although the geometric break-finding algorithm reduces the number of extractions that must be done, it is still less efficient than our approach, which requires a single extraction for each node. Another break extraction program has been mentioned <ref> [16] </ref>, but the algorithm used is not described in the paper. 6 2. Graph Construction 2. Graph Construction The conversion of the circuit layout to a graph is what makes our break extractor unique.
Reference: [17] <author> R.L. Wadsack. </author> <title> Fault modeling and logic simulation of CMOS and MOS integrated circuits. </title> <journal> Bell System Technical Journal, </journal> <volume> 57(5) </volume> <pages> 1449-1474, </pages> <address> May-June 1978. 30 References </address>
Reference-contexts: These breaks cause the cell to exhibit sequential behavior: under some inputs, the circuit may function normally, but under others, the only path to power or ground may be broken, causing the output to remain at its previous value <ref> [17] </ref>. Type 3 includes breaks that occur on a series connection from the output to power or ground, thus allowing the output to be charged to either power or ground, but not both.
Reference: [18] <author> H. Walker and S.W. Director. VLASIC: </author> <title> A yield simulator for integrated circuits. </title> <booktitle> Proceedings of International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1985. </year>
Reference-contexts: Notice how the unlabeled vertices roughly correspond to places where fanout branches come together. Once the graph is constructed, it is used to produce the ranked fault list and the modified netlist. 1.4 Previous Work Previous work in yield simulation <ref> [18] </ref> includes the extraction of break faults caused by spot defects. However, this implementation uses the Monte Carlo method, which randomly generates defects and analyzes the resulting layout.
Reference: [19] <author> Derick Wood. </author> <title> An isothetic view of computational geometry. </title> <editor> In G. Toussaint, editor, </editor> <booktitle> Computational Geometry, </booktitle> <pages> pages 429-459. </pages> <publisher> North-Holland, </publisher> <year> 1985. </year> <title> Series title: </title> <journal> Machine Intelligence and Pattern Recognition. </journal>
Reference-contexts: The plane sweep algorithm gets its efficiency by converting a two-dimensional problem, polygon intersection, to a one-dimensional problem, line segment intersection <ref> [19] </ref>. At any point in a sweep, the sweep line may intersect several polygons (in our case, rectangles of conducting material); the line segments defined by these intersections are called the active intervals at the current sweep position. Figure 2.2 demonstrates this. <p> As was mentioned before, the graph construction algorithm is based on a polygon intersection algorithm borrowed from computational geometry <ref> [19] </ref>. In our case, the polygons are all rectangular LWs, which simplifies the problem slightly. However, it is still difficult to obtain optimal behavior. The problem is easily expressed: given a collection of polygons, determine all pairwise intersecting polygons.
Reference: [20] <author> Hua Xue, Chennian Di, and J.A.G. Jess. </author> <title> Probability analysis for CMOS floating gate faults. </title> <booktitle> In Proceedings of European Test Conference, </booktitle> <pages> pages 443-448. </pages> <publisher> IEEE, </publisher> <year> 1994. </year>
Reference-contexts: Previous Work 5 number of defects to accurately estimate the critical area for each fault. Thus, it can be quite slow. A geometrically-based algorithm for break extraction has been discussed, but it also relies on repeated circuit extractions (each node is re-extracted for each break that affects it) <ref> [20] </ref>. Although the geometric break-finding algorithm reduces the number of extractions that must be done, it is still less efficient than our approach, which requires a single extraction for each node.
References-found: 20

