URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1995/tr-95-044.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1995.html
Root-URL: http://www.icsi.berkeley.edu
Title: Complexity of Searching an Immobile Hider in a Graph  
Author: Bernhard von Stengel and Ralph Werchner 
Keyword: Covering and packing, game theory, graph search, NP-completeness.  
Note: Email: fstengel,  
Address: I 1947 Center St. Suite 600 Berkeley, California 94704-1198  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  
Pubnum: TR-95-044  
Email: werchnerg@icsi.berkeley.edu  
Phone: (510) 643-9153 FAX (510) 643-7684  
Date: August 22, 1995  
Abstract: We study the computational complexity of certain search-hide games on a graph. There are two players, called searcher and hider. The hider is immobile and hides in one of the nodes of the graph. The searcher selects a starting node and a search path of length at most k. His objective is to detect the hider, which he does with certainty if he visits the node chosen for hiding. Finding the optimal randomized strategies in this zero-sum game defines a fractional path covering problem and its dual, a fractional packing problem. If the length k of the search path is arbitrary, then the problem is NP-hard. The problem remains NP-hard if the searcher may freely revisit nodes that he has seen before. In that case, the searcher selects a connected subgraph of k nodes rather than a path of k nodes. If k is logarithmic in the number of nodes of the graph, then the problem can be solved in polynomial time; this is shown using a recent technique called color-coding due to Alon, Yuster, and Zwick. The same results hold for edges instead of nodes, that is, if the hider hides in an edge and the searcher searches k edges on a path or on a connected subgraph. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Ahlswede and I. </author> <title> Wegener (1987), Search problems. </title> <publisher> Wiley, </publisher> <address> New York. </address>
Reference-contexts: Here our model applies if the searcher's movement is restricted due to geographic and organizational conditions that can be described by a graph. In these circumstances, the optimal detection probability is of interest as a measure of deterrence from illegal activity. Books on search theory are <ref> [1, 11] </ref>. A recent general survey is [4], which would classify our work as two-sided search with immobile target. A continuous search of the edges of a graph is discussed in [12].
Reference: [2] <author> N. Alon, R. Yuster, and U. </author> <title> Zwick (1994), Color-coding: a new method for finding simple paths, cycles and other small subgraphs within large graphs. </title> <booktitle> Proceedings of the 26th ACM Symposium on Theory of Computing, </booktitle> <pages> 326-335. </pages>
Reference-contexts: For search paths of logarithmic length in the size of the graph, we provide in Section 4 a polynomial-time algorithm, based on a recent color-coding technique <ref> [2] </ref> applied to the separation problem of the LP in question. 2. LP formulation The input to our problem is a graph G with node set V and edge set E, and a positive integer k, called the search length. <p> Note that the weight of a node (edge) that is revisited by the searcher is counted only once. We solve this separation problem by modifying an algorithm for finding a simple path of length k in G. Alon, Yuster, and Zwick <ref> [2] </ref> recently presented a technique called color-coding that solves this problem in polynomial time if k = O (log jV j). We adapt this algorithm to finding a (not necessarily simple) path of maximum weight. Edge search and search on connected subgraphs can be solved similarly. Proposition 4.1. <p> For the correctness of the algorithm, we have to make sure that every set of k nodes is colored with k different colors in at least one round. There is such a k-perfect family of colorings consisting of only 2 O (k) log jV j colorings (see <ref> [2] </ref>; a k-perfect family of 2 O (k) log 2 jV j colorings is somewhat simpler to construct). Each of those colorings can be generated in O (jV j) time. Thus the total running time for finding a path of maximum weight is 2 O (k) jEj log jV j. <p> A naive approach would be to store directly the possible sets of nodes on the current paths. However, this requires storing O (jV j k ) of such sets instead of only O (2 k ) color sets. Prior to the color-coding technique of <ref> [2] </ref>, Monien [17] proposed an algorithm for finding a simple path of length k in time O (k! jEj). He showed that for the dynamic programming step, much fewer sets of nodes have to be stored than with the naive approach.
Reference: [3] <author> R. Avenhaus, B. von Stengel, and S. </author> <month> Zamir </month> <year> (1995), </year> <title> Inspection games. </title> <booktitle> In: Handbook of Game Theory, </booktitle> <volume> Vol. 3, </volume> <editor> eds. R. J. Aumann and S. Hart, </editor> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <note> to appear. </note>
Reference-contexts: Our model is a strong simplification of network surveillance. The bound on inspection resources, here given by the parameter k, is however typical of surveillance models (also studied in the context of inspection games, see <ref> [3] </ref>). The number of network links (nodes or edges) that can be searched is usually limited, due to budget constraints or, say, the time that an intruder stays in place and can be detected during a search.
Reference: [4] <author> S. Benkoski, M. G. Monticino and J. R. </author> <month> Weisinger </month> <year> (1991), </year> <title> A survey of the search theory literature. </title> <journal> Naval Research Logistics 38, </journal> <pages> 469-494. </pages>
Reference-contexts: In these circumstances, the optimal detection probability is of interest as a measure of deterrence from illegal activity. Books on search theory are [1, 11]. A recent general survey is <ref> [4] </ref>, which would classify our work as two-sided search with immobile target. A continuous search of the edges of a graph is discussed in [12]. A discrete game where both hider and 1 searcher choose a node and try to maximize respectively minimize their distance is studied in [8]. <p> A continuous search of the edges of a graph is discussed in [12]. A discrete game where both hider and 1 searcher choose a node and try to maximize respectively minimize their distance is studied in [8]. For further references see <ref> [4] </ref>, except for articles related to the search number of a graph, which are cited in [10]. In Section 2, we define our problem as a zero-sum game and describe an equivalent linear program (LP).
Reference: [5] <author> D. Bienstock and P. </author> <title> Seymour (1991), Monotonicity in graph searching. </title> <journal> Journal of Algorithms 12, </journal> <pages> 230-245. </pages>
Reference-contexts: 1. Introduction Communication networks are vulnerable to privacy violations. Surveillance of the network is one way to deter eavesdroppers. This gives rise to various models of pursuit and evasion on graphs and corresponding complexity considerations. One problem that has been examined in depth (see <ref> [5, 16] </ref> and references) is the search of a graph by a team of searchers traversing the edges of the graph in pursuit of a mobile fugitive. The minimum number of searchers necessary to detect the fugitive with certainty is called the search number of the graph.
Reference: [6] <author> B. </author> <title> Cao (1993), Search-hide games on trees. </title> <journal> European Journal of Operational Research 80, </journal> <pages> 175-183. </pages>
Reference-contexts: The revised simplex algorithm stores only the LP columns A j of the current basic solution. For the pivoting step, a profitable column has to be found, which is generated directly from the graph, using suitable heuristics if necessary <ref> [6] </ref>. The separation problem for the dual LP is equivalent to this problem of finding a profitable column [21, p. 148]. <p> For node search on connected subgraphs, the separation problem is that of finding a maximum weight k-cardinality subtree of G. If G is a tree, this problem can be solved in polynomial time (see <ref> [6, 9] </ref> and references), so then the game can be solved in polynomial time. If G is a general graph, then this separation problem is NP-hard [9].
Reference: [7] <author> B. Cao and B. </author> <title> von Stengel (1993), Search-hide games on graphs. </title> <type> Technical Report S-9303, </type> <institution> University of the Federal Armed Forces at Munich, Germany. </institution>
Reference-contexts: If the search length k is constant, then the game can be solved in polynomial time by enumeration, since the LP is of polynomial size. Node search for k = 2 has a direct solution based on bipartite matching (described in detail in <ref> [7] </ref>): If G is represented as a bipartite graph (with edges in V fi V ), then a minimum edge cover yields an optimal solution to (2.3), (2.4); see [18] and [15, pp. 213-216]. <p> A graph G is uniformly searchable for node search if it has a Hamiltonian cycle: In that case, the searcher can select any node with equal probability and search k nodes in one direction of the cycle. This is only a sufficient condition (for generalizations see <ref> [7] </ref>): The graph G in Figure 1 has no Hamiltonian cycle but is uniformly 4 node-searchable for k = 3, by selecting one of the search paths f1; 2; 3g, f1; 2; 4g, f1; 3; 5g, f2; 4; 5g, or f3; 4; 5g with equal probability. (We have seen above that <p> In that construction, k = jV 0 j and G consists of about jV 0 j 1=" suitably connected copies of G 0 ; for details see <ref> [7] </ref>. Next, we consider edge search on paths. If the search length is k = jEj, then the graph G is uniformly searchable if and only if it has an Euler path (proved analogously to Prop. 3.1). However, that question is easy to decide. We therefore need a different argument. <p> It is an open question if the approach of [17] can be applied to the separation problem for node or edge search on connected subgraphs. 13 Acknowledgements The node search game was posed as a problem jointly with Buyang Cao <ref> [7] </ref>. We thank Jeff Edmonds, Ulrich Faigle, Andras Frank, Fred Glover, and a referee for helpful comments.
Reference: [8] <author> F. R. K. Chung, J. E. Cohen and R. L. </author> <title> Graham (1988), Pursuit-evasion games on graphs. </title> <journal> Journal of Graph Theory 12, </journal> <pages> 159-167. </pages>
Reference-contexts: A continuous search of the edges of a graph is discussed in [12]. A discrete game where both hider and 1 searcher choose a node and try to maximize respectively minimize their distance is studied in <ref> [8] </ref>. For further references see [4], except for articles related to the search number of a graph, which are cited in [10]. In Section 2, we define our problem as a zero-sum game and describe an equivalent linear program (LP).
Reference: [9] <author> M. Fischetti, H. W. Hamacher, K. Jtrnsten, and F. </author> <month> Maiffioli </month> <year> (1994), </year> <title> Weighted k-cardinality trees: complexity and polyhedral structure. </title> <booktitle> Networks 24, </booktitle> <pages> 11-21. </pages>
Reference-contexts: For node search on connected subgraphs, the separation problem is that of finding a maximum weight k-cardinality subtree of G. If G is a tree, this problem can be solved in polynomial time (see <ref> [6, 9] </ref> and references), so then the game can be solved in polynomial time. If G is a general graph, then this separation problem is NP-hard [9]. <p> If G is a tree, this problem can be solved in polynomial time (see [6, 9] and references), so then the game can be solved in polynomial time. If G is a general graph, then this separation problem is NP-hard <ref> [9] </ref>. This would entail the NP-hardness of solving the LP if the objective function could be chosen arbitrarily, because in that case the converse of Theorem 2.1 holds as well [13]. However, the objective function is special.
Reference: [10] <author> M. Franklin, Z. Galil, and M. </author> <title> Yung (1993), Eavesdropping games: A graph-theoretic approach to privacy in distributed systems. </title> <booktitle> Proceedings of the 34th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> 670-679. </pages>
Reference-contexts: The minimum number of searchers necessary to detect the fugitive with certainty is called the search number of the graph. Computing it is easy for trees but NP-hard for general graphs [16]. Extensions of this approach to models of privacy in distributed environments are studied in <ref> [10] </ref>. We consider a similar, but more static situation: The hider selects an arbitrary node of the graph for hiding and must stay there. The searcher selects a starting node and traverses the graph along a path, and his search terminates after he has visited k nodes. <p> A discrete game where both hider and 1 searcher choose a node and try to maximize respectively minimize their distance is studied in [8]. For further references see [4], except for articles related to the search number of a graph, which are cited in <ref> [10] </ref>. In Section 2, we define our problem as a zero-sum game and describe an equivalent linear program (LP). If the length k of the search path is unrestricted, then solving the game in any of its variants is NP-hard, as shown in Section 3.
Reference: [11] <author> S. </author> <title> Gal (1980), Search Games. </title> <publisher> Academic Press, </publisher> <address> New York. </address>
Reference-contexts: Here our model applies if the searcher's movement is restricted due to geographic and organizational conditions that can be described by a graph. In these circumstances, the optimal detection probability is of interest as a measure of deterrence from illegal activity. Books on search theory are <ref> [1, 11] </ref>. A recent general survey is [4], which would classify our work as two-sided search with immobile target. A continuous search of the edges of a graph is discussed in [12].
Reference: [12] <author> S. </author> <title> Gal (1989), Continuous search games. In: Search Theory Some Recent Developments, </title> <editor> eds. D. V. Chudnovsky and G. V. Chudnovsky, </editor> <publisher> Dekker, </publisher> <address> New York, </address> <pages> 33-53. </pages>
Reference-contexts: Books on search theory are [1, 11]. A recent general survey is [4], which would classify our work as two-sided search with immobile target. A continuous search of the edges of a graph is discussed in <ref> [12] </ref>. A discrete game where both hider and 1 searcher choose a node and try to maximize respectively minimize their distance is studied in [8]. For further references see [4], except for articles related to the search number of a graph, which are cited in [10].
Reference: [13] <author> M. Grotschel, L. Lovasz, and A. </author> <title> Schrijver (1988), Geometric Algorithms and Combinatorial Optimization. </title> <publisher> Springer, </publisher> <address> Berlin. </address>
Reference-contexts: The separation problem is theoretically important since with the ellipsoid algorithm for linear programming one can solve the entire LP using a polynomial number of calls to a `subroutine' that solves the separation problem <ref> [13] </ref>: Theorem 2.1. With a polynomial-time algorithm for the separation problem, the LP can be solved in polynomial time. For node search on connected subgraphs, the separation problem is that of finding a maximum weight k-cardinality subtree of G. <p> If G is a general graph, then this separation problem is NP-hard [9]. This would entail the NP-hardness of solving the LP if the objective function could be chosen arbitrarily, because in that case the converse of Theorem 2.1 holds as well <ref> [13] </ref>. However, the objective function is special. In the next section, we will prove directly that solving the search game on connected subgraphs is NP-hard.
Reference: [14] <author> R. M. </author> <title> Karp (1972), Reducibility among combinatorial problems. In: Complexity of Computer Computations, </title> <editor> eds. R. E. Miller and J. W. Thatcher, </editor> <publisher> Plenum, </publisher> <address> New York, </address> <pages> 85-103. </pages>
Reference-contexts: However, the problem is still NP-hard. We will reduce the NP-complete problem of finding an exact three-cover to the question if a graph G is uniformly searchable. The construction of G is similar to the reduction of the exact three-cover problem to the Steiner tree problem <ref> [14] </ref>, with additional tails appended to the graph so that we can apply Lemma 3.2. The same proof works for both node and edge search. Proposition 3.4.
Reference: [15] <author> L. Lovasz and M. D. </author> <title> Plummer (1986), Matching Theory. </title> <booktitle> Annals of Discrete Mathematics 29. </booktitle> <publisher> North-Holland, Amsterdam. </publisher>
Reference-contexts: Node search for k = 2 has a direct solution based on bipartite matching (described in detail in [7]): If G is represented as a bipartite graph (with edges in V fi V ), then a minimum edge cover yields an optimal solution to (2.3), (2.4); see [18] and <ref> [15, pp. 213-216] </ref>. If the search length k is allowed to grow sufficiently fast with the size of the graph, then solving the game is NP-hard, as we will show in the next section.
Reference: [16] <author> N. Megiddo, S. L. Hakimi, M. R. Garey, D. S. Johnson, and C. H. </author> <title> Papadimitriou (1988), The complexity of searching a graph. </title> <journal> Journal of the Association for Computing Machinery 35, </journal> <pages> 18-44. </pages>
Reference-contexts: 1. Introduction Communication networks are vulnerable to privacy violations. Surveillance of the network is one way to deter eavesdroppers. This gives rise to various models of pursuit and evasion on graphs and corresponding complexity considerations. One problem that has been examined in depth (see <ref> [5, 16] </ref> and references) is the search of a graph by a team of searchers traversing the edges of the graph in pursuit of a mobile fugitive. The minimum number of searchers necessary to detect the fugitive with certainty is called the search number of the graph. <p> The minimum number of searchers necessary to detect the fugitive with certainty is called the search number of the graph. Computing it is easy for trees but NP-hard for general graphs <ref> [16] </ref>. Extensions of this approach to models of privacy in distributed environments are studied in [10]. We consider a similar, but more static situation: The hider selects an arbitrary node of the graph for hiding and must stay there.
Reference: [17] <author> B. </author> <title> Monien (1985), How to find longs paths efficiently. In: Analysis and Design of Algorithms for Combinatorial Problems, </title> <editor> eds. G. Ausiello and M. Lucertini. </editor> <booktitle> Annals of Discrete Mathematics 25, </booktitle> <pages> 239-254. </pages>
Reference-contexts: A naive approach would be to store directly the possible sets of nodes on the current paths. However, this requires storing O (jV j k ) of such sets instead of only O (2 k ) color sets. Prior to the color-coding technique of [2], Monien <ref> [17] </ref> proposed an algorithm for finding a simple path of length k in time O (k! jEj). He showed that for the dynamic programming step, much fewer sets of nodes have to be stored than with the naive approach. <p> The families F (v; i) can be constructed inductively for successively larger values of i, starting with i = 1. Analogously to <ref> [17] </ref>, we only store a certain representative subfamily F 0 (v; i) of F (v; i) that has the following property: For any set A of k i or fewer nodes and a set S in F (v; i) disjoint to A of maximum weight, there exists some S 0 in <p> A straightforward modification of this algorithm solves the separation problem for edge search on paths in the same running time. It is an open question if the approach of <ref> [17] </ref> can be applied to the separation problem for node or edge search on connected subgraphs. 13 Acknowledgements The node search game was posed as a problem jointly with Buyang Cao [7]. We thank Jeff Edmonds, Ulrich Faigle, Andras Frank, Fred Glover, and a referee for helpful comments.
Reference: [18] <author> G. L. Nemhauser and L. R. Trotter, Jr. </author> <year> (1974), </year> <title> Properties of vertex packing and independence system polyhedra. </title> <booktitle> Mathematical Programming 6, </booktitle> <pages> 48-61. </pages>
Reference-contexts: Node search for k = 2 has a direct solution based on bipartite matching (described in detail in [7]): If G is represented as a bipartite graph (with edges in V fi V ), then a minimum edge cover yields an optimal solution to (2.3), (2.4); see <ref> [18] </ref> and [15, pp. 213-216]. If the search length k is allowed to grow sufficiently fast with the size of the graph, then solving the game is NP-hard, as we will show in the next section.
Reference: [19] <author> G. L. Nemhauser and L. A. </author> <title> Wolsey (1988), Integer and Combinatorial Optimization. </title> <publisher> Wiley, </publisher> <address> New York. </address>
Reference-contexts: The linear programs (2.3), (2.4) and (2.5), (2.6) for a general 0-1-matrix A are known as fractional covering and fractional packing problems <ref> [19, p. 562] </ref>. If the search length k is constant, then the game can be solved in polynomial time by enumeration, since the LP is of polynomial size.
Reference: [20] <author> C. H. </author> <title> Papadimitriou (1994), Computational Complexity. </title> <publisher> Addison-Wesley, </publisher> <address> Reading. </address>
Reference-contexts: Namely, the satisfiability of such an instance of 3SAT can be reduced to the question if a graph G 0 with k = O (n) nodes has a Hamiltonian path <ref> [20, p. 193] </ref>.
Reference: [21] <author> A. </author> <title> Schrijver (1986), Theory of Linear and Integer Programming. </title> <publisher> Wiley, Chich-ester. </publisher> <pages> 15 </pages>
Reference-contexts: For the pivoting step, a profitable column has to be found, which is generated directly from the graph, using suitable heuristics if necessary [6]. The separation problem for the dual LP is equivalent to this problem of finding a profitable column <ref> [21, p. 148] </ref>. It says: Given a vector y = (y 1 ; : : : ; y r ), decide if all inequalities (2.6) are valid, and if not, produce an inquality that is violated. If some y i is negative, then a violated inequality is given directly.
References-found: 21

