URL: http://www.cs.ucsb.edu/TRs/techreports/TRCS94-05.ps
Refering-URL: http://www.cs.ucsb.edu/TRs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Managing Concurrent Activities in Collaborative Environments  
Author: D. Agrawal J. L. Bruno A. El Abbadi V. Krishnaswamy 
Address: Santa Barbara, CA 93106  
Affiliation: Department of Computer Science University of California  
Abstract: An approach to support activities in collaborative databases is proposed. This approach merges flexible transaction models from collaborative environments and semantics based correctness criteria. A model is first presented which incorporates the notion of collaboration in the context of transactions. A protocol is then developed based on this model for efficient management of collaborative activities. This is the first attempt to formally incorporate the notion of collaboration in the database management system. Most earlier approaches provide tools and mechanisms to circumvent the isolation requirement of transactions. The protocol is a generalization of strict two phase locking since in the absence of collaboration, it reduces to strict two-phase locking.
Abstract-found: 1
Intro-found: 1
Reference: [ABEK94] <author> D. Agrawal, J. L. Bruno, A. El Abbadi, and V. Krishnaswamy. </author> <title> Relative Serializability: An Approach for Relaxing the Atomicity of Transactions. </title> <booktitle> In Proceedings of the ACM SIGACT/SIGMOD Symposium on Principles of Database Systems, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: The most serious drawback of Farrag and Ozsu's proposal is that the recognition of executions that are equivalent to correct executions has an exponential complexity [KB92]. Recently, a theory of relative atomicity <ref> [ABEK94] </ref> has been proposed for reasoning about the executions of transactions with semantic information. In particular, a graph-based tool is provided to determine if a given execution of transactions is correct. The acyclicity of this graph is both a necessary and sufficient condition for correctness. <p> For notational convenience, in the rest of the paper, we index co-actions and the operations within a co-action. For example, operation o ij is the j th operation of co-action C i . We now define correct executions in our model that are referred to as relatively serial executions <ref> [ABEK94] </ref>. <p> The notion of relatively serial executions is analogous to the notion of serial executions in serializability theory [BSW79, Pap79]. In particular, there exist executions that are not relatively serial but may have the same behavior as some relatively serial executions. We define an execution to be relatively serializable <ref> [ABEK94] </ref> if it is conflict equivalent to some relatively serial execution. <p> That is, if the specifications are such that each co-action is a single atomic unit with respect to all other co-actions, then relative atomicity reduces to absolute atomicity <ref> [ABEK94] </ref>. In [ABEK94] we also introduce a graph that can be used to determine whether a given execution is relatively serializable. <p> That is, if the specifications are such that each co-action is a single atomic unit with respect to all other co-actions, then relative atomicity reduces to absolute atomicity <ref> [ABEK94] </ref>. In [ABEK94] we also introduce a graph that can be used to determine whether a given execution is relatively serializable.
Reference: [BK91] <author> N. S. Barghouti and G. E. Kaiser. </author> <title> Concurrency Control in Advanced Database Applications. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(3) </volume> <pages> 269-318, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: These proposals, in general, provide a set of tools for facilitating collaboration in design databases. These tools often involve managing design versions or implementing check-in/check-out techniques. A survey of version related issues for engineering databases are reported in [Kat90]. Barghouti and Kaiser <ref> [BK91] </ref> provide an excellent survey of the concurrency control issues in advanced database applications. 3 Motivating Collaboration In a collaborative environment, teams of researchers may be executing concurrently on different tasks, often interacting closely within each team as well as across teams.
Reference: [BKK85] <author> F. Bancilhon, W. Kim, and H. F. Korth. </author> <title> A model of cad transactions. </title> <booktitle> In Proceedings of the Conference on Very Large Data Bases, </booktitle> <pages> pages 25-33, </pages> <address> Stockholm, Sweden, </address> <month> August </month> <year> 1985. </year>
Reference-contexts: This approach provides a low level mechanism for incorporating both the semantics of objects as well as semantics patterns to increase interleavings between collaborating transactions, when the patterns of interactions are known a priori. Several other proposals have been made to adapt transactions to software development environments <ref> [BKK85, WBMN88, RRD90, SV91] </ref>. These proposals, in general, provide a set of tools for facilitating collaboration in design databases. These tools often involve managing design versions or implementing check-in/check-out techniques. A survey of version related issues for engineering databases are reported in [Kat90].
Reference: [BSW79] <author> P. A. Bernstein, D. W. Shipman, and W. S. Wong. </author> <title> Formal Aspects of Serializabil-ity in Database Concurrency Control. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 5(5) </volume> <pages> 203-216, </pages> <month> May </month> <year> 1979. </year>
Reference-contexts: To capture the various ways in which co-actions can interfere with each other, we need to introduce the notions of conflict and dependency. The notion of conflict between operations is used in the traditional concurrency control theory <ref> [Pap79, BSW79] </ref>. Two operations of different co-actions conflict if they access the same data object and at least one of them is a write operation. Two executions are conflict equivalent if they both order conflicting operations in the same manner. <p> Thus, the notion of dependency is used in such a way that the relative atomicity specifications are enforced only when it is necessary, i.e., when co-actions affect each other. The notion of relatively serial executions is analogous to the notion of serial executions in serializability theory <ref> [BSW79, Pap79] </ref>. In particular, there exist executions that are not relatively serial but may have the same behavior as some relatively serial executions. We define an execution to be relatively serializable [ABEK94] if it is conflict equivalent to some relatively serial execution. <p> All the locks acquired by a co-action are released at the end of the co-action. It can be easily shown that the strict two-phase locking protocol maintains each co-action as a single atomic unit with respect to other co-actions in the system <ref> [Pap79, BSW79] </ref>. Several proposals have been made to adapt strict two-phase locking for co-actions to eliminate the restriction that locks must be held until co-actions terminate [PKH88, Kai90].
Reference: [EGLT76] <author> K. P. Eswaran, J. N. Gray, R. A. Lorie, and I. L. Traiger. </author> <title> The Notions of Consistency and Predicate Locks in a Database System. </title> <journal> Communications of the ACM, </journal> 19(11) 624-633, November 1976. 
Reference-contexts: We start with a general overview of the protocol and then we describe the protocol in greater detail. 5.1 Overview of the Protocol One of our main design criteria is to develop a protocol that has similar characteristics to the strict two-phase locking protocol <ref> [EGLT76] </ref>. Ideally, we would like to design the protocol such that when the specifications of co-actions are restricted to absolute atomicity, the proposed locking protocol reduces to the standard strict two-phase locking protocol.
Reference: [F O89] <author> A. A. Farrag and M. T. Ozsu. </author> <title> Using Semantic Knowledge of Transactions to Increase Concurrency. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 14(4) </volume> <pages> 503-525, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: Lynch [Lyn83] extended Garcia-Molina's specifications from two-level compatibility sets to hierarchically structured interleaving sets, allowing transactions to have varying atomic units relative to each other. Lynch [Lyn83] introduced this notion and refers to it as relative atomicity. Farrag and Ozsu <ref> [F O89] </ref> used the notion of breakpoints, which provides maximal freedom for relative atomicity specifications. In addition, they propose a graph which aids in the recognition of executions that are "equivalent" to correct executions. <p> In particular, a graph-based tool is provided to determine if a given execution of transactions is correct. The acyclicity of this graph is both a necessary and sufficient condition for correctness. The main contribution of this theory is that unlike previous proposals <ref> [F O89] </ref>, the recognition of correct executions can be done efficiently. Shasha et al. [SSV92] recently 3 proposed a mechanism for chopping transaction while still preserving the traditional criterion for correctness.
Reference: [Gar83] <author> H. Garcia-Molina. </author> <title> Using Semantic Knowledge for Transaction Processing in a Distributed Database. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 8(2) </volume> <pages> 186-213, </pages> <month> June </month> <year> 1983. </year>
Reference-contexts: We believe our approach integrates these two distinct bodies of research and derives a new approach to solve some of the problems that have plagued advanced database applications, e.g., long lived transactions and the strict isolation of transactions. Garcia-Molina <ref> [Gar83] </ref> pioneered the effort to use the notion of relative atomicity to increase concurrency among transactions in database systems. He proposed grouping transactions into compatibility sets, where transactions in one such set may be arbitrarily interleaved, but transactions in different sets observe each other as single atomic units.
Reference: [GHMS94] <author> K. Gronbaek, J. A. Hem, O. L. Madsen, and L. Sloth. </author> <title> Cooperative Hypermedia Systems: A Dexter-Based Architecture. </title> <journal> Communications of the ACM, </journal> <volume> 37(2) </volume> <pages> 64-74, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: Hence, we need a more powerful paradigm for transactions in collaborative environments. fl This work was supported by the NSF under grant number IRI-9117904 and by the NASA under grant number NAGW-3888. 1 The requirements for adequate models and support for collaboration in software engineering databases have been specified widely <ref> [Sor87, Kai90, GKM93, GHMS94] </ref>. In particular, researchers working in the area of cooperative work and participatory design [Kai90, GHMS94] have put forward several ways in which collaboration can occur among members in a design team. The first simple model is called separate responsibilities . <p> In particular, researchers working in the area of cooperative work and participatory design <ref> [Kai90, GHMS94] </ref> have put forward several ways in which collaboration can occur among members in a design team. The first simple model is called separate responsibilities . In this model, the collaborative database is partitioned among several users in a disjoint manner.
Reference: [GKM93] <author> K. Gronbaek, M. Kyng, and P. Mogensen. </author> <title> CSCW challenges: Cooperative Design in Engineering Projects. </title> <journal> Communications of the ACM, </journal> <volume> 36(6) </volume> <pages> 67-77, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Hence, we need a more powerful paradigm for transactions in collaborative environments. fl This work was supported by the NSF under grant number IRI-9117904 and by the NASA under grant number NAGW-3888. 1 The requirements for adequate models and support for collaboration in software engineering databases have been specified widely <ref> [Sor87, Kai90, GKM93, GHMS94] </ref>. In particular, researchers working in the area of cooperative work and participatory design [Kai90, GHMS94] have put forward several ways in which collaboration can occur among members in a design team. The first simple model is called separate responsibilities .
Reference: [GM93] <author> N. D. Gherson and C. G. Miller. </author> <title> Dealing with the Data Deluge. </title> <journal> IEEE Spectrum, </journal> <volume> 30(7) </volume> <pages> 28-32, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: To illustrate some of these ideas, we use a geographic application from the Earth Observation System (EOS) project <ref> [GM93] </ref>. Our particular example is typical of many software collaborative environments. In the EOS project, raw data is collected from satellites at a centralized repository, and then distributed to various secondary sites, where scientists apply standardized algorithms to derive maps or data that corresponds to their particular applications.
Reference: [Kai90] <author> G. E. Kaiser. </author> <title> A Flexible Transaction Model for Software Engineering. </title> <booktitle> In Proceedings of the Sixth International Conference on Data Engineering, </booktitle> <pages> pages 560-567, </pages> <year> 1990. </year> <month> 20 </month>
Reference-contexts: Hence, we need a more powerful paradigm for transactions in collaborative environments. fl This work was supported by the NSF under grant number IRI-9117904 and by the NASA under grant number NAGW-3888. 1 The requirements for adequate models and support for collaboration in software engineering databases have been specified widely <ref> [Sor87, Kai90, GKM93, GHMS94] </ref>. In particular, researchers working in the area of cooperative work and participatory design [Kai90, GHMS94] have put forward several ways in which collaboration can occur among members in a design team. The first simple model is called separate responsibilities . <p> In particular, researchers working in the area of cooperative work and participatory design <ref> [Kai90, GHMS94] </ref> have put forward several ways in which collaboration can occur among members in a design team. The first simple model is called separate responsibilities . In this model, the collaborative database is partitioned among several users in a disjoint manner. <p> This approach uses limited semantic information of transactions and its main motivation is to improve performance by splitting transactions into smaller units. Kaiser has discussed various scenarios where relaxed forms of transactions may be appropriate for activity coordination among teams of researchers in multi-user software development environments <ref> [Kai90] </ref>. A notion of commit serializability is proposed where a transaction may be divided during operation and parts committed separately. These ideas were implemented by the notions of split-transactions and join transactions [PKH88]. <p> These ideas were implemented by the notions of split-transactions and join transactions [PKH88]. Unlike relative atomicity, once a transaction splits and subsequently commits, its results are visible to all the users of the database. To incorporate the notion of teams of participants, the notion of participation domains is introduced <ref> [Kai90] </ref>. A set of transactions, with a particular set of participants is called a domain, and all other users of the database are observers. <p> The execution of transactions in a domain is not necessarily serializable with respect to other participants in the same domain, but all transactions in different domains are serializable with respect to each other. In <ref> [Kai90] </ref> these notions are proposed but no formal model or protocols are presented. Skarra and Zdonik [SZ89] introduce the notion of transaction groups, which explicitly defines a nested framework for cooperating transactions. <p> In execution S 2 , on the other hand, the two co-actions decide not to collaborate and hence C 3 is not prohibited from observing the state of data when only C 1 has incorporated its changes. Thus, by interleaving co-actions appropriately, we can accomplish the notion participating domains <ref> [Kai90] </ref>. Based on the relative atomicity specifications, the correctness of an execution S over C can be outlined as follows. <p> Several proposals have been made to adapt strict two-phase locking for co-actions to eliminate the restriction that locks must be held until co-actions terminate <ref> [PKH88, Kai90] </ref>. In particular, based on the relative atomicity specifications of a co-action, the co-action should now be allowed to release its locks to those co-actions that are allowed at the end of its atomic units. As before shared locks can be held concurrently by several co-actions.
Reference: [Kat90] <author> R. Katz. </author> <title> Towards a Unified Framework for Version Modeling in Engineering Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 375-408, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: These proposals, in general, provide a set of tools for facilitating collaboration in design databases. These tools often involve managing design versions or implementing check-in/check-out techniques. A survey of version related issues for engineering databases are reported in <ref> [Kat90] </ref>. Barghouti and Kaiser [BK91] provide an excellent survey of the concurrency control issues in advanced database applications. 3 Motivating Collaboration In a collaborative environment, teams of researchers may be executing concurrently on different tasks, often interacting closely within each team as well as across teams.
Reference: [KB92] <author> V. Krishnaswamy and J. Bruno. </author> <title> On the Complexity of Concurrency Control using Semantic Information. </title> <type> Technical Report TRCS 92-21, </type> <institution> Department of Computer Science, University of California, Santa Barbara, </institution> <address> CA 93106, </address> <year> 1992. </year>
Reference-contexts: In addition, they propose a graph which aids in the recognition of executions that are "equivalent" to correct executions. The most serious drawback of Farrag and Ozsu's proposal is that the recognition of executions that are equivalent to correct executions has an exponential complexity <ref> [KB92] </ref>. Recently, a theory of relative atomicity [ABEK94] has been proposed for reasoning about the executions of transactions with semantic information. In particular, a graph-based tool is provided to determine if a given execution of transactions is correct.
Reference: [Kri93] <author> V. Krishnaswamy. </author> <title> Semantics Based Synchronization in Database Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of California, Santa Barbara, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: If the lock on x is acquired by C i , then o ij [x] is executed and is appended to LockQueue (x). The dependencies to o ij [x] and pushforward and pullbackward dependencies are maintained in the data-structure OpEntry. The detailed implementation of this protocol appears in <ref> [Kri93] </ref>. In particular, details regarding the computation of dependencies, termination, and garbage-collection of co-actions are presented. Furthermore, a formal proof of correctness is also presented in [Kri93]. 6 Conclusion In this paper, we present an approach to support collaborative activities that occur in software engineering databases, design databases, and scientific databases. <p> The detailed implementation of this protocol appears in <ref> [Kri93] </ref>. In particular, details regarding the computation of dependencies, termination, and garbage-collection of co-actions are presented. Furthermore, a formal proof of correctness is also presented in [Kri93]. 6 Conclusion In this paper, we present an approach to support collaborative activities that occur in software engineering databases, design databases, and scientific databases. Our approach is novel since it incorporates collaboration into the database management system itself.
Reference: [Lyn83] <author> N. A. Lynch. </author> <title> Multilevel Atomicity ANew Correctness Criterion for Database Con-currency Control. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 8(4) </volume> <pages> 485-502, </pages> <month> December </month> <year> 1983. </year>
Reference-contexts: He proposed grouping transactions into compatibility sets, where transactions in one such set may be arbitrarily interleaved, but transactions in different sets observe each other as single atomic units. Lynch <ref> [Lyn83] </ref> extended Garcia-Molina's specifications from two-level compatibility sets to hierarchically structured interleaving sets, allowing transactions to have varying atomic units relative to each other. Lynch [Lyn83] introduced this notion and refers to it as relative atomicity. <p> Lynch <ref> [Lyn83] </ref> extended Garcia-Molina's specifications from two-level compatibility sets to hierarchically structured interleaving sets, allowing transactions to have varying atomic units relative to each other. Lynch [Lyn83] introduced this notion and refers to it as relative atomicity. Farrag and Ozsu [F O89] used the notion of breakpoints, which provides maximal freedom for relative atomicity specifications. In addition, they propose a graph which aids in the recognition of executions that are "equivalent" to correct executions.
Reference: [Pap79] <author> C. H. Papadimitriou. </author> <title> The Serializability of Concurrent Database Updates. </title> <journal> Journal of the ACM, </journal> <volume> 26(4) </volume> <pages> 631-653, </pages> <month> October </month> <year> 1979. </year>
Reference-contexts: To capture the various ways in which co-actions can interfere with each other, we need to introduce the notions of conflict and dependency. The notion of conflict between operations is used in the traditional concurrency control theory <ref> [Pap79, BSW79] </ref>. Two operations of different co-actions conflict if they access the same data object and at least one of them is a write operation. Two executions are conflict equivalent if they both order conflicting operations in the same manner. <p> Thus, the notion of dependency is used in such a way that the relative atomicity specifications are enforced only when it is necessary, i.e., when co-actions affect each other. The notion of relatively serial executions is analogous to the notion of serial executions in serializability theory <ref> [BSW79, Pap79] </ref>. In particular, there exist executions that are not relatively serial but may have the same behavior as some relatively serial executions. We define an execution to be relatively serializable [ABEK94] if it is conflict equivalent to some relatively serial execution. <p> All the locks acquired by a co-action are released at the end of the co-action. It can be easily shown that the strict two-phase locking protocol maintains each co-action as a single atomic unit with respect to other co-actions in the system <ref> [Pap79, BSW79] </ref>. Several proposals have been made to adapt strict two-phase locking for co-actions to eliminate the restriction that locks must be held until co-actions terminate [PKH88, Kai90].
Reference: [PKH88] <author> C. Pu, G. Kaiser, and N. Hutchinson. </author> <title> Split-Transactions for Open-Ended Activities. </title> <booktitle> In Proceedings of the Fourteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 26-37, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: A notion of commit serializability is proposed where a transaction may be divided during operation and parts committed separately. These ideas were implemented by the notions of split-transactions and join transactions <ref> [PKH88] </ref>. Unlike relative atomicity, once a transaction splits and subsequently commits, its results are visible to all the users of the database. To incorporate the notion of teams of participants, the notion of participation domains is introduced [Kai90]. <p> Several proposals have been made to adapt strict two-phase locking for co-actions to eliminate the restriction that locks must be held until co-actions terminate <ref> [PKH88, Kai90] </ref>. In particular, based on the relative atomicity specifications of a co-action, the co-action should now be allowed to release its locks to those co-actions that are allowed at the end of its atomic units. As before shared locks can be held concurrently by several co-actions.
Reference: [RRD90] <author> M. A. Ranft, S. Rehm, and K. R. Dittrich. </author> <title> How to Share Work on Shared Objects and Design Databases. </title> <booktitle> In Proceedings of the Sixth International Conference on Data Engineering, </booktitle> <pages> pages 575-583, </pages> <year> 1990. </year>
Reference-contexts: This approach provides a low level mechanism for incorporating both the semantics of objects as well as semantics patterns to increase interleavings between collaborating transactions, when the patterns of interactions are known a priori. Several other proposals have been made to adapt transactions to software development environments <ref> [BKK85, WBMN88, RRD90, SV91] </ref>. These proposals, in general, provide a set of tools for facilitating collaboration in design databases. These tools often involve managing design versions or implementing check-in/check-out techniques. A survey of version related issues for engineering databases are reported in [Kat90].
Reference: [Sor87] <author> P. Sorgaard. </author> <title> A Cooperative Work Perspective on Use and Development of Computer Artifacts. </title> <booktitle> In Proceedings of the Tenth Information Systems Research Seminar in Scan-dinavia, </booktitle> <pages> pages 10-12, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: Hence, we need a more powerful paradigm for transactions in collaborative environments. fl This work was supported by the NSF under grant number IRI-9117904 and by the NASA under grant number NAGW-3888. 1 The requirements for adequate models and support for collaboration in software engineering databases have been specified widely <ref> [Sor87, Kai90, GKM93, GHMS94] </ref>. In particular, researchers working in the area of cooperative work and participatory design [Kai90, GHMS94] have put forward several ways in which collaboration can occur among members in a design team. The first simple model is called separate responsibilities .
Reference: [SSV92] <author> D. Shasha, E. Simon, and P. Valduriez. </author> <title> Simple Rational Guidance for Chopping Up Transactions. </title> <booktitle> In Proceedings of the 1992 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 298-307, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: The acyclicity of this graph is both a necessary and sufficient condition for correctness. The main contribution of this theory is that unlike previous proposals [F O89], the recognition of correct executions can be done efficiently. Shasha et al. <ref> [SSV92] </ref> recently 3 proposed a mechanism for chopping transaction while still preserving the traditional criterion for correctness. This approach uses limited semantic information of transactions and its main motivation is to improve performance by splitting transactions into smaller units.
Reference: [SV91] <author> S. Sarkar and V. Venugopal. </author> <title> Transaction Mechanism for Software Environment Databases. </title> <booktitle> In Proceedings of the Hawaii International Conference on System Sciences, </booktitle> <pages> pages 511-518, </pages> <year> 1991. </year>
Reference-contexts: This approach provides a low level mechanism for incorporating both the semantics of objects as well as semantics patterns to increase interleavings between collaborating transactions, when the patterns of interactions are known a priori. Several other proposals have been made to adapt transactions to software development environments <ref> [BKK85, WBMN88, RRD90, SV91] </ref>. These proposals, in general, provide a set of tools for facilitating collaboration in design databases. These tools often involve managing design versions or implementing check-in/check-out techniques. A survey of version related issues for engineering databases are reported in [Kat90].
Reference: [SZ89] <author> A. H. Skarra and S. B. Zdonik. </author> <title> Concurrency Control and Object-Oriented Databases. </title> <editor> In W. Kim and F. H. Lochovsky, editors, </editor> <booktitle> Object-Oriented Concepts, Databases, and Applications, chapter 16, </booktitle> <pages> pages 395-421. </pages> <publisher> ACM Press, </publisher> <year> 1989. </year> <month> 21 </month>
Reference-contexts: Complex tools and techniques are required to oversee this collaboration process, e.g., COSMOS [WBMN88], the ObServer System <ref> [SZ89] </ref>, and Integrated Project Support Environment [VS91]. Ideally, these tools should be integrated with the database system itself. In the arena of software engineering environments, researchers would like the database management system to support the notions of dynamic exchange and synchronous sessions . <p> In [Kai90] these notions are proposed but no formal model or protocols are presented. Skarra and Zdonik <ref> [SZ89] </ref> introduce the notion of transaction groups, which explicitly defines a nested framework for cooperating transactions. Within a transaction group, cooperating transactions and subgroups are synchronized using semantic patterns, which are defined by abstract data types.
Reference: [VS91] <author> V. Venugopal and S. Sarkar. </author> <title> Requirement of Object-Oriented Databases for Tool Integration in IPSEs. </title> <booktitle> In Proceedings of the Hawaii International Conference on System Sciences, </booktitle> <pages> pages 543-552, </pages> <year> 1991. </year>
Reference-contexts: Complex tools and techniques are required to oversee this collaboration process, e.g., COSMOS [WBMN88], the ObServer System [SZ89], and Integrated Project Support Environment <ref> [VS91] </ref>. Ideally, these tools should be integrated with the database system itself. In the arena of software engineering environments, researchers would like the database management system to support the notions of dynamic exchange and synchronous sessions .
Reference: [WBMN88] <author> J. Walpole, G. S. Blair, J. Malik, and J. R. Nicol. </author> <title> A Unifying Model for Consistent Distributed Software Development Environments. </title> <booktitle> In Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <pages> pages 183-190, </pages> <year> 1988. </year> <month> 22 </month>
Reference-contexts: In particular, they require close supervision and management of the collaboration by human users and are hard to automate if adequate support is not available at the level of the database management system. Complex tools and techniques are required to oversee this collaboration process, e.g., COSMOS <ref> [WBMN88] </ref>, the ObServer System [SZ89], and Integrated Project Support Environment [VS91]. Ideally, these tools should be integrated with the database system itself. In the arena of software engineering environments, researchers would like the database management system to support the notions of dynamic exchange and synchronous sessions . <p> This approach provides a low level mechanism for incorporating both the semantics of objects as well as semantics patterns to increase interleavings between collaborating transactions, when the patterns of interactions are known a priori. Several other proposals have been made to adapt transactions to software development environments <ref> [BKK85, WBMN88, RRD90, SV91] </ref>. These proposals, in general, provide a set of tools for facilitating collaboration in design databases. These tools often involve managing design versions or implementing check-in/check-out techniques. A survey of version related issues for engineering databases are reported in [Kat90].
References-found: 24

