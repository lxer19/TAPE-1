URL: http://www.cs.utexas.edu/users/ckwong/sgc/ckproposal.ps
Refering-URL: http://www.cs.utexas.edu/users/ckwong/sgc/index.html
Root-URL: http://www.cs.utexas.edu
Email: ckwong@cs.utexas.edu  
Title: Network Security Services for Flows and Multicasts  
Author: Chung Kei Wong Supervising professor: Simon S. Lam 
Degree: (Dissertation Proposal)  
Date: August 12, 1998  
Address: Austin, Texas 78712  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Tony Ballardie. </author> <title> Scalable Multicast Key Distribution, </title> <booktitle> RFC 1949, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: In Section 3.1, the idea of the key tree approach is described. Then, in Section 3.2, some experimental performance results are presented. 3.1 Key trees The topic of secure group communications has been investigated <ref> [1, 2, 15, 22] </ref>. Also the problem of how to distribute a secret to a group of users has been addressed in the cryptography literature [3, 5, 10, 32].
Reference: [2] <author> Tony Ballardie and Jon Crowcroft. </author> <title> Multicast-Specific Security Threats and CounterMeasures. </title> <booktitle> In Proceedings Symposium on Network and Distributed System Security, </booktitle> <year> 1995. </year>
Reference-contexts: In Section 3.1, the idea of the key tree approach is described. Then, in Section 3.2, some experimental performance results are presented. 3.1 Key trees The topic of secure group communications has been investigated <ref> [1, 2, 15, 22] </ref>. Also the problem of how to distribute a secret to a group of users has been addressed in the cryptography literature [3, 5, 10, 32].
Reference: [3] <author> Shimshon Berkovits. </author> <title> How to Broadcast a Secret. </title> <editor> In D.W. Davies, editor, </editor> <booktitle> Advances in cryptology, EUROCRYPT '91, volume 547 of Lecture Notes in Computer Science, </booktitle> <pages> pages 535-541. </pages> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Then, in Section 3.2, some experimental performance results are presented. 3.1 Key trees The topic of secure group communications has been investigated [1, 2, 15, 22]. Also the problem of how to distribute a secret to a group of users has been addressed in the cryptography literature <ref> [3, 5, 10, 32] </ref>. However, with the exception of [22], no one has addressed the need for frequent key changes and the associated scalability problem for a very large group.
Reference: [4] <author> Ray Bird, Inder Gopal, Amir Herzberg, Phil Janson, Shay Kutten, Refik Molva, and Moti Yung. </author> <title> The KryptoKnight family of light-weight protocols for authentication and key distribution. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 3(1), </volume> <month> February </month> <year> 1995. </year>
Reference-contexts: A typical procedure for securing unicast communications between a client and a server is outlined as follows: Initially, the client and server mutually authenticate each other using an authentication protocol or service <ref> [4, 31, 34, 37] </ref>; subsequently, a secret key is created and shared by them to be used for pairwise confidential communications. For confidential group communications, one approach is to have a group key shared by every group member, and the group key is used to encrypt/decrypt communications within the group.
Reference: [5] <author> Guang-Huei Chiou and Wen-Tsuen Chen. </author> <title> Secure Broadcasting Using the Secure Lock. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(8) </volume> <pages> 929-934, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: Then, in Section 3.2, some experimental performance results are presented. 3.1 Key trees The topic of secure group communications has been investigated [1, 2, 15, 22]. Also the problem of how to distribute a secret to a group of users has been addressed in the cryptography literature <ref> [3, 5, 10, 32] </ref>. However, with the exception of [22], no one has addressed the need for frequent key changes and the associated scalability problem for a very large group.
Reference: [6] <author> Brian DeCleene, Supratik Bhattacharaya, Timur Friedman, Mark Keaton, Jim Kurose, Dan Rubenstein, and Don Towsley. </author> <title> Reliable Multicast Framework (RMF): A White Paper. </title> <type> Technical report, </type> <year> 1998. </year>
Reference-contexts: Another supporting service is multicast delivery for rekey messages. Different applications may require different multicast delivery services, such as reliable multicast. IP multicast [7] is a best-effort multicast delivery service which is currently available. Many reliable multicast protocols have been proposed <ref> [6, 12, 18, 27, 33] </ref>, and some of them have been implemented. There are many other multicast protocols published but most of them are not yet available [26].
Reference: [7] <author> Stephen Deering. </author> <title> Host Extensions for IP Multicasting, </title> <type> RFC 1112, </type> <month> August </month> <year> 1989. </year>
Reference-contexts: For a flow signed using this technique, the verification of each packet (except the first one) in the flow depends on the previous packet. Thus, this technique requires reliable packet delivery. Many applications use best-effort delivery (such as UDP and IP multicast <ref> [7] </ref>) instead of reliable delivery for flows, e.g., digitized audio/video, and sequences of stock quotes and news feeds. <p> Another supporting service is multicast delivery for rekey messages. Different applications may require different multicast delivery services, such as reliable multicast. IP multicast <ref> [7] </ref> is a best-effort multicast delivery service which is currently available. Many reliable multicast protocols have been proposed [6, 12, 18, 27, 33], and some of them have been implemented. There are many other multicast protocols published but most of them are not yet available [26].
Reference: [8] <author> Tim Dierks and Christopher Allen. </author> <title> The TLS Protocol Version 1.0. Work in progress, IETF Transport Layer Security (TLS) Working Group, </title> <month> November </month> <year> 1997. </year>
Reference-contexts: Some applications require mutual authentication between a group server and each group member. The server can use an authentication service, such as SSL [13], TLS <ref> [8] </ref>, or SNP [37], to provide mutual authentication as well as establish a secure point-to-point channel. Another supporting service is multicast delivery for rekey messages. Different applications may require different multicast delivery services, such as reliable multicast. IP multicast [7] is a best-effort multicast delivery service which is currently available.
Reference: [9] <author> Uriel Feige, Amos Fiat, and Adi Shamir. </author> <title> Zero Knowledge Proofs of Identity. </title> <booktitle> In Proc. of the 19th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1987. </year>
Reference-contexts: I have investigated these problems, and designed several extensions to the Feige-Fiat-Shamir signature scheme <ref> [9, 11] </ref>. The extended signature scheme, called eFFS, has been implemented and evaluated [36]. In Section 2.3, eFFS is compared to four other signature schemes (including RSA and DSA) to illustrate its efficiency. 1.2 Confidentiality Confidentiality can be efficiently provided using a symmetric cryptosystem, such as DES [23]. <p> 5910 tree degree 4 332 655 1190 2070 3340 4710 6000 tree degree 8 332 651 1190 2070 3340 4760 6060 (b) using 512-bit DSA Table 2: Flow signing rate (packets/sec) for 1024-byte packets. 2.3 The eFFS signature scheme The eFFS signature scheme is derived from the Feige-Fiat-Shamir signature scheme <ref> [9, 11] </ref> with several extensions [36]. The extensions include a number of techniques to improve the signing and verification operations, and one technique to efficiently provide adjustable and incremental signature verification. We have implemented eFFS and performed some experiments on a Pentium II 300 MHz machine running Linux.
Reference: [10] <author> Amos Fiat and Moni Naor. </author> <title> Broadcast Encryption. </title> <editor> In Douglas R. Stinson, editor, </editor> <booktitle> Advances in cryptology, CRYPTO '93, volume 773 of Lecture Notes in Computer Science, </booktitle> <pages> pages 480-491. </pages> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Then, in Section 3.2, some experimental performance results are presented. 3.1 Key trees The topic of secure group communications has been investigated [1, 2, 15, 22]. Also the problem of how to distribute a secret to a group of users has been addressed in the cryptography literature <ref> [3, 5, 10, 32] </ref>. However, with the exception of [22], no one has addressed the need for frequent key changes and the associated scalability problem for a very large group.
Reference: [11] <author> Amos Fiat and Adi Shamir. </author> <title> How to Prove Yourself: Practical Solutions to Identification and Signature Problems. </title> <booktitle> In Advances in Cryptology | CRYPTO '86, </booktitle> <pages> pages 186-194, </pages> <year> 1987. </year>
Reference-contexts: I have investigated these problems, and designed several extensions to the Feige-Fiat-Shamir signature scheme <ref> [9, 11] </ref>. The extended signature scheme, called eFFS, has been implemented and evaluated [36]. In Section 2.3, eFFS is compared to four other signature schemes (including RSA and DSA) to illustrate its efficiency. 1.2 Confidentiality Confidentiality can be efficiently provided using a symmetric cryptosystem, such as DES [23]. <p> 5910 tree degree 4 332 655 1190 2070 3340 4710 6000 tree degree 8 332 651 1190 2070 3340 4760 6060 (b) using 512-bit DSA Table 2: Flow signing rate (packets/sec) for 1024-byte packets. 2.3 The eFFS signature scheme The eFFS signature scheme is derived from the Feige-Fiat-Shamir signature scheme <ref> [9, 11] </ref> with several extensions [36]. The extensions include a number of techniques to improve the signing and verification operations, and one technique to efficiently provide adjustable and incremental signature verification. We have implemented eFFS and performed some experiments on a Pentium II 300 MHz machine running Linux.
Reference: [12] <author> Sally Floyd, Van Jacobson, Ching-Gung Liu, Steven McCanne, and Lixia Zhang. </author> <title> A Reliable Multicast Framework for Light-Weight Sessions and Application Level Framing. </title> <booktitle> In Proceedings of ACM SIGCOMM '95, </booktitle> <year> 1995. </year>
Reference-contexts: Another supporting service is multicast delivery for rekey messages. Different applications may require different multicast delivery services, such as reliable multicast. IP multicast [7] is a best-effort multicast delivery service which is currently available. Many reliable multicast protocols have been proposed <ref> [6, 12, 18, 27, 33] </ref>, and some of them have been implemented. There are many other multicast protocols published but most of them are not yet available [26].
Reference: [13] <author> Alan O. Freier, Philip Karlton, and Paul C. Kocher. </author> <title> The SSL Protocol Version 3.0. Work in progress, </title> <journal> Netscape Communications, </journal> <month> November </month> <year> 1996. </year>
Reference-contexts: Some applications require mutual authentication between a group server and each group member. The server can use an authentication service, such as SSL <ref> [13] </ref>, TLS [8], or SNP [37], to provide mutual authentication as well as establish a secure point-to-point channel. Another supporting service is multicast delivery for rekey messages. Different applications may require different multicast delivery services, such as reliable multicast.
Reference: [14] <author> Rosario Gennaro and Pankaj Rohatgi. </author> <title> How to Sign Digital Streams. </title> <booktitle> In Advances in Cryptology | CRYPTO '97, </booktitle> <year> 1997. </year> <month> 17 </month>
Reference-contexts: This approach is inefficient. It requires a sender to do one expensive signature signing operation for each packet sent, and a receiver to do one expensive signature verification operation for each packet received. A technique for signing flows (streams) proposed in <ref> [14] </ref> uses only one expensive signature signing operation for an entire flow. For a flow signed using this technique, the verification of each packet (except the first one) in the flow depends on the previous packet. Thus, this technique requires reliable packet delivery.
Reference: [15] <author> Li Gong. Enclaves: </author> <title> Enabling Secure Collaboration over the Internet. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <pages> pages 567-575, </pages> <month> April </month> <year> 1997. </year>
Reference-contexts: In Section 3.1, the idea of the key tree approach is described. Then, in Section 3.2, some experimental performance results are presented. 3.1 Key trees The topic of secure group communications has been investigated <ref> [1, 2, 15, 22] </ref>. Also the problem of how to distribute a secret to a group of users has been addressed in the cryptography literature [3, 5, 10, 32].
Reference: [16] <author> Hugh Harney and Carl Muckenhirn. </author> <title> Group Key Management Protocol (GKMP) Architecture, </title> <booktitle> RFC 2094, </booktitle> <month> July </month> <year> 1997. </year>
Reference-contexts: Conceptually, since a flow is a sequence of data packets, and every point-to-multipoint communication can be represented as a set of point-to-point communications, the current technology base for securing message-oriented unicast communications can be extended in a straightforward manner for securing flows and group communications <ref> [16, 17] </ref>. However, as we will illustrate, such extensions are inefficient and unsatisfactory.
Reference: [17] <author> Hugh Harney and Carl Muckenhirn. </author> <title> Group Key Management Protocol (GKMP) Specification, </title> <booktitle> RFC 2093, </booktitle> <month> July </month> <year> 1997. </year>
Reference-contexts: Conceptually, since a flow is a sequence of data packets, and every point-to-multipoint communication can be represented as a set of point-to-point communications, the current technology base for securing message-oriented unicast communications can be extended in a straightforward manner for securing flows and group communications <ref> [16, 17] </ref>. However, as we will illustrate, such extensions are inefficient and unsatisfactory.
Reference: [18] <author> Hugh W. Holbrook, Sandeep K. Singhal, and David R. Cheriton. </author> <title> Log-Based Receiver-Reliable Multicast for Distributed Interactive Simulation. </title> <booktitle> In Proceedings of ACM SIG-COMM '95, </booktitle> <year> 1995. </year>
Reference-contexts: Another supporting service is multicast delivery for rekey messages. Different applications may require different multicast delivery services, such as reliable multicast. IP multicast [7] is a best-effort multicast delivery service which is currently available. Many reliable multicast protocols have been proposed <ref> [6, 12, 18, 27, 33] </ref>, and some of them have been implemented. There are many other multicast protocols published but most of them are not yet available [26].
Reference: [19] <author> Charlie Kaufman, Radia Perlman, and Mike Speciner. </author> <title> Network Security: Private Communication in a Public World. </title> <publisher> PTR Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey 07632, </address> <year> 1995. </year>
Reference-contexts: authorized receivers will get the data; authenticity, an authorized receiver can verify the identity of the data's source; integrity, an authorized receiver can verify that received data have not been modified; non-repudiation, an authorized receiver can prove to a third party the identity of the data's source. 1 Most investigations <ref> [19, 30] </ref> on securing data delivery over insecure networks have focused on message-oriented unicast communications employed by the majority of traditional applications, e.g., email and file transfer. Many emerging network applications, e.g., teleconference, stock quotes, news feeds, online video games, and shared white-boards, are based upon other communication models.
Reference: [20] <author> J. B. Lacy, D. P. Mitchell, and W. M. </author> <title> Schell. </title> <booktitle> CryptoLib: cryptography in software. In Proceedings of USENIX: 4th UNIX Security Symposium, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: For the eFFS signature scheme, I plan to follow the conventions used by the publicly available CryptoLib <ref> [20] </ref> in designing its API and building it as an extension to CryptoLib. Existing applications that use signature schemes provided by CryptoLib can switch easily to eFFS.
Reference: [21] <author> Ralph C. Merkle. </author> <title> A Certified Digital Signature. </title> <booktitle> In Advances in Cryptology | CRYPTO '89, </booktitle> <year> 1989. </year>
Reference-contexts: The root is the block digest, with the block signature being the signed block digest. For a packet to be individually verifiable, each packet needs to carry its own authentication information (packet signature). In tree chaining, a packet signature consists of the 3 Tree chaining was first presented in <ref> [21] </ref>. 4 Any rooted tree can be used as an authentication tree with packet digests at leaf nodes and the block digest at the root.
Reference: [22] <author> Suvo Mittra. Iolus: </author> <title> A Framework for Scalable Secure Multicasting. </title> <booktitle> In Proceedings of ACM SIGCOMM '97, </booktitle> <year> 1997. </year>
Reference-contexts: In Section 3.1, the idea of the key tree approach is described. Then, in Section 3.2, some experimental performance results are presented. 3.1 Key trees The topic of secure group communications has been investigated <ref> [1, 2, 15, 22] </ref>. Also the problem of how to distribute a secret to a group of users has been addressed in the cryptography literature [3, 5, 10, 32]. <p> Also the problem of how to distribute a secret to a group of users has been addressed in the cryptography literature [3, 5, 10, 32]. However, with the exception of <ref> [22] </ref>, no one has addressed the need for frequent key changes and the associated scalability problem for a very large group. The approach proposed in Iolus [22] to improve scalability is to decompose a large group of clients into many subgroups and employ a hierarchy of group security agents. <p> However, with the exception of <ref> [22] </ref>, no one has addressed the need for frequent key changes and the associated scalability problem for a very large group. The approach proposed in Iolus [22] to improve scalability is to decompose a large group of clients into many subgroups and employ a hierarchy of group security agents. For each subgroup of clients/agents, group members share a subgroup key. However, there is no globally shared group key.
Reference: [23] <author> National Institute of Standards and Technology. </author> <title> Data Encryption Standard. </title> <type> NIST FIPS PUB 46-2, U.S. </type> <institution> Department of Commerce, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: The extended signature scheme, called eFFS, has been implemented and evaluated [36]. In Section 2.3, eFFS is compared to four other signature schemes (including RSA and DSA) to illustrate its efficiency. 1.2 Confidentiality Confidentiality can be efficiently provided using a symmetric cryptosystem, such as DES <ref> [23] </ref>. A sender sends data encrypted using a shared secret key, and a receiver decrypts the encrypted data using the same key.
Reference: [24] <institution> National Institute of Standards and Technology. </institution> <type> Secure Hash Standard. NIST FIPS PUB 180, U.S. </type> <institution> Department of Commerce, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Thus, a receiver may not get every packet 1 In the balance of this proposal, we use "receiver" to mean "authorized receiver" unless otherwise stated. 2 The digest of data is computed using a message digest function, such as MD5 [28] or SHS <ref> [24] </ref>. The signing and verification keys are also referred to as private and public keys, respectively. 2 in a flow due to packet losses. Moreover, a receiver may get a subsequence of a flow based upon the receiver's need/capability even if reliable delivery is available.
Reference: [25] <institution> National Institute of Standards and Technology. Digital Signature Standard. </institution> <type> NIST FIPS PUB 86, U.S. </type> <institution> Department of Commerce, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: The objective of this dissertation is to design efficient algorithms and protocols for securing emerging applications that are flow-oriented and/or group-based. 1.1 Authenticity, integrity, and non-repudiation Authenticity, integrity, and non-repudiation are typically provided using a digital signature scheme, such as RSA [29] or DSA <ref> [25] </ref>. <p> In Sections 2.1 to 2.2, the idea of the procedures and some experimental performance results are presented. Aside from the expensive costs of signing and verification operations, another problem with most digital signature schemes (including RSA [29] and DSA <ref> [25] </ref>) when used in group communications is that the verification operation is not adjustable, i.e., every receiver needs to do the same amount of "work" to verify a signature at the same "security level." In group communications, different receivers may have different amounts of computing resources, and may want to verify
Reference: [26] <author> Katia Obraczka. </author> <title> Multicast Transport Protocols: A Survey and Taxonomy. </title> <journal> IEEE Communications Magazine, </journal> <volume> 36(1), </volume> <month> January </month> <year> 1998. </year>
Reference-contexts: IP multicast [7] is a best-effort multicast delivery service which is currently available. Many reliable multicast protocols have been proposed [6, 12, 18, 27, 33], and some of them have been implemented. There are many other multicast protocols published but most of them are not yet available <ref> [26] </ref>. I plan to investigate how to integrate the prototype server with such supporting services. 4.3 Multiple secure groups Within a large organization (e.g., a Fortune 500 company, DoD), there may be many different secure groups, and a user may belong to more than one secure group.
Reference: [27] <author> Sanjoy Paul, Krishan K. Sabnani, John C.H. Lin, and Supratik Bhattacharyya. </author> <title> Reliable Multicast Transport Protocol (RMTP). </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 15(3), </volume> <month> April </month> <year> 1997. </year>
Reference-contexts: Another supporting service is multicast delivery for rekey messages. Different applications may require different multicast delivery services, such as reliable multicast. IP multicast [7] is a best-effort multicast delivery service which is currently available. Many reliable multicast protocols have been proposed <ref> [6, 12, 18, 27, 33] </ref>, and some of them have been implemented. There are many other multicast protocols published but most of them are not yet available [26].
Reference: [28] <author> Ronald L. Rivest. </author> <title> The MD5 Message Digest Algorithm, </title> <type> RFC 1321, </type> <month> April </month> <year> 1992. </year>
Reference-contexts: Thus, a receiver may not get every packet 1 In the balance of this proposal, we use "receiver" to mean "authorized receiver" unless otherwise stated. 2 The digest of data is computed using a message digest function, such as MD5 <ref> [28] </ref> or SHS [24]. The signing and verification keys are also referred to as private and public keys, respectively. 2 in a flow due to packet losses. Moreover, a receiver may get a subsequence of a flow based upon the receiver's need/capability even if reliable delivery is available.
Reference: [29] <author> Ronald L. Rivest, Adi Shamir, and Leonard Adleman. </author> <title> A method for obtaining digital signatures and public key cryptosystems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2) </volume> <pages> 120-126, </pages> <year> 1978. </year>
Reference-contexts: The objective of this dissertation is to design efficient algorithms and protocols for securing emerging applications that are flow-oriented and/or group-based. 1.1 Authenticity, integrity, and non-repudiation Authenticity, integrity, and non-repudiation are typically provided using a digital signature scheme, such as RSA <ref> [29] </ref> or DSA [25]. <p> In Sections 2.1 to 2.2, the idea of the procedures and some experimental performance results are presented. Aside from the expensive costs of signing and verification operations, another problem with most digital signature schemes (including RSA <ref> [29] </ref> and DSA [25]) when used in group communications is that the verification operation is not adjustable, i.e., every receiver needs to do the same amount of "work" to verify a signature at the same "security level." In group communications, different receivers may have different amounts of computing resources, and may
Reference: [30] <author> Bruce Schneier. </author> <title> Applied Cryptography. </title> <publisher> John Wiley & Sons, Inc., </publisher> <address> second edition, </address> <year> 1996. </year> <month> 18 </month>
Reference-contexts: authorized receivers will get the data; authenticity, an authorized receiver can verify the identity of the data's source; integrity, an authorized receiver can verify that received data have not been modified; non-repudiation, an authorized receiver can prove to a third party the identity of the data's source. 1 Most investigations <ref> [19, 30] </ref> on securing data delivery over insecure networks have focused on message-oriented unicast communications employed by the majority of traditional applications, e.g., email and file transfer. Many emerging network applications, e.g., teleconference, stock quotes, news feeds, online video games, and shared white-boards, are based upon other communication models. <p> Table 4 shows the signing and verification times for a 16-byte message. 6 DSA and ElGa-mal have been designed to achieve efficient signing (e.g., for use in smartcard applications), 6 We use e=3 in RSA to obtain its fastest verification time without affecting its signing time <ref> [30] </ref>.
Reference: [31] <author> Jennifer G. Steiner, Clifford Neuman, and Jeffrey I. Schiller. </author> <title> Kerberos: An Authentica--tion Service for Open Network Systems. </title> <booktitle> In USENIX Winter Conference, </booktitle> <pages> pages 191-202, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: A typical procedure for securing unicast communications between a client and a server is outlined as follows: Initially, the client and server mutually authenticate each other using an authentication protocol or service <ref> [4, 31, 34, 37] </ref>; subsequently, a secret key is created and shared by them to be used for pairwise confidential communications. For confidential group communications, one approach is to have a group key shared by every group member, and the group key is used to encrypt/decrypt communications within the group.
Reference: [32] <author> Douglas R. Stinson. </author> <title> On Some Methods for Unconditionally Secure Key Distribution and Broadcast Encryption. Designs, </title> <journal> Codes and Cryptography, </journal> <volume> 12(3) </volume> <pages> 215-243, </pages> <year> 1997. </year>
Reference-contexts: Then, in Section 3.2, some experimental performance results are presented. 3.1 Key trees The topic of secure group communications has been investigated [1, 2, 15, 22]. Also the problem of how to distribute a secret to a group of users has been addressed in the cryptography literature <ref> [3, 5, 10, 32] </ref>. However, with the exception of [22], no one has addressed the need for frequent key changes and the associated scalability problem for a very large group.
Reference: [33] <author> Rajesh Talpade and Mostafa H. Ammar. </author> <title> Single Connection Emulation (SCE): An Architecture for Providing a Reliable Multicast Transport Service. </title> <booktitle> In 15th IEEE International Conference on Distributed Computing Systems, </booktitle> <year> 1995. </year>
Reference-contexts: Another supporting service is multicast delivery for rekey messages. Different applications may require different multicast delivery services, such as reliable multicast. IP multicast [7] is a best-effort multicast delivery service which is currently available. Many reliable multicast protocols have been proposed <ref> [6, 12, 18, 27, 33] </ref>, and some of them have been implemented. There are many other multicast protocols published but most of them are not yet available [26].
Reference: [34] <author> J.J. Tardo and K. Alagappan. SPX: </author> <title> Global authentication using public key certificates. </title> <booktitle> In Proceedings of 12th IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 232-244, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: A typical procedure for securing unicast communications between a client and a server is outlined as follows: Initially, the client and server mutually authenticate each other using an authentication protocol or service <ref> [4, 31, 34, 37] </ref>; subsequently, a secret key is created and shared by them to be used for pairwise confidential communications. For confidential group communications, one approach is to have a group key shared by every group member, and the group key is used to encrypt/decrypt communications within the group.
Reference: [35] <author> Chung Kei Wong, Mohamed Gouda, and Simon S. Lam. </author> <title> Secure Group Communications Using Key Graphs. </title> <note> To appear in Proceedings of ACM SIGCOMM '98, </note> <month> Sep 2-4, </month> <year> 1998. </year>
Reference-contexts: This approach of changing and distributing group key is not scalable to large groups whose members join and leave frequently. I have investigated this problem, and designed some efficient algorithms and protocols <ref> [35] </ref>. In Section 3, the idea of the algorithms and protocols is described, and some experimental performance results are presented to illustrate the scalability and efficiency of the prototype server I have built. 1.3 Dissertation scope There are many problems in securing applications that are flow-oriented and/or group-based. <p> This dissertation focuses on the problems of confidentiality, authenticity, integrity, and non-repudiation discussed in Section 1.1 and Section 1.2. To address these problems, I have designed and implemented the following <ref> [35, 36] </ref>: 1. a flow signing/verifying procedure that efficiently signs/verifies a flow with each packet in the flow being individually verifiable; 2. a digital signature scheme that has efficient signing and verification operations, and the verification operation is adjustable and incremental; 3. a suite of algorithms and protocols for scalable group <p> For a dynamic group with members joining and leaving, the group key 10 needs to be changed after every join and leave so that a former group member has no access to current communications and a new member has no access to previous communications. In <ref> [35] </ref>, we proposed a key tree approach to this group key management problem. Based upon this key tree approach, we presented three rekeying strategies for sending rekey messages to securely distribute a new group after each join/leave, and specified protocols for joining and leaving a secure group.
Reference: [36] <author> Chung Kei Wong and Simon S. Lam. </author> <title> Digital Signatures for Flows and Multicasts. </title> <note> To appear in Proceedings of IEEE ICNP '98, </note> <month> Oct 14-16, </month> <year> 1998. </year>
Reference-contexts: Therefore, each data packet in a flow needs to be individually verifiable, i.e., a receiver can verify a packet independent of any other packets in the flow. I have investigated this problem, and designed efficient flow signing and verification procedures which have been implemented and evaluated <ref> [36] </ref>. In Sections 2.1 to 2.2, the idea of the procedures and some experimental performance results are presented. <p> I have investigated these problems, and designed several extensions to the Feige-Fiat-Shamir signature scheme [9, 11]. The extended signature scheme, called eFFS, has been implemented and evaluated <ref> [36] </ref>. In Section 2.3, eFFS is compared to four other signature schemes (including RSA and DSA) to illustrate its efficiency. 1.2 Confidentiality Confidentiality can be efficiently provided using a symmetric cryptosystem, such as DES [23]. <p> This dissertation focuses on the problems of confidentiality, authenticity, integrity, and non-repudiation discussed in Section 1.1 and Section 1.2. To address these problems, I have designed and implemented the following <ref> [35, 36] </ref>: 1. a flow signing/verifying procedure that efficiently signs/verifies a flow with each packet in the flow being individually verifiable; 2. a digital signature scheme that has efficient signing and verification operations, and the verification operation is adjustable and incremental; 3. a suite of algorithms and protocols for scalable group <p> I plan to investigate how to integrate such supporting services with the prototype server, and to extend the current prototype server from handling a single secure group to multiple secure groups. In Section 4, they will be discussed in more detail. 2 Digital Signatures for Flows and Multicasts In <ref> [36] </ref>, we presented efficient flow signing and verification procedures based upon a tree chaining technique. <p> 655 1190 2070 3340 4710 6000 tree degree 8 332 651 1190 2070 3340 4760 6060 (b) using 512-bit DSA Table 2: Flow signing rate (packets/sec) for 1024-byte packets. 2.3 The eFFS signature scheme The eFFS signature scheme is derived from the Feige-Fiat-Shamir signature scheme [9, 11] with several extensions <ref> [36] </ref>. The extensions include a number of techniques to improve the signing and verification operations, and one technique to efficiently provide adjustable and incremental signature verification. We have implemented eFFS and performed some experiments on a Pentium II 300 MHz machine running Linux. <p> We use (k; t)=(128,1) and (64,1) in eFFS, and eFFS (128; 1) is more secure than eFFS (64; 1) <ref> [36] </ref>. 8 block size (number of packets) 2 4 8 16 32 64 128 sign-each 1980 tree degree 2 3020 4320 5540 6360 6910 7210 7350 tree degree 4 3000 4400 5650 6640 7230 7590 7760 tree degree 8 2960 4400 5680 6660 7340 7740 7860 (a) using 512-bit RSA block
Reference: [37] <author> Thomas Y.C. Woo, Raghuram Bindignavle, Shaowen Su, and Simon S. Lam. SNP: </author> <title> An interface for secure network programming. </title> <booktitle> In Proceedings of USENIX'94 Summer Technical Conference, </booktitle> <month> June </month> <year> 1994. </year> <month> 19 </month>
Reference-contexts: A typical procedure for securing unicast communications between a client and a server is outlined as follows: Initially, the client and server mutually authenticate each other using an authentication protocol or service <ref> [4, 31, 34, 37] </ref>; subsequently, a secret key is created and shared by them to be used for pairwise confidential communications. For confidential group communications, one approach is to have a group key shared by every group member, and the group key is used to encrypt/decrypt communications within the group. <p> Some applications require mutual authentication between a group server and each group member. The server can use an authentication service, such as SSL [13], TLS [8], or SNP <ref> [37] </ref>, to provide mutual authentication as well as establish a secure point-to-point channel. Another supporting service is multicast delivery for rekey messages. Different applications may require different multicast delivery services, such as reliable multicast. IP multicast [7] is a best-effort multicast delivery service which is currently available.
References-found: 37

