URL: ftp://ftp.cs.uchicago.edu/pub/publications/tech-reports/TR-90-12.ps
Refering-URL: http://cs-www.uchicago.edu/publications/tech-reports/
Root-URL: 
Title: An Abstract Machine for Efficient Implementation of Term Rewriting  
Author: David J. Sherman Robert I. Strandh 
Date: September 8, 1990  
Abstract: We define an intermediate language for term-rewriting systems based on the ideas in Robert Strandh's dissertation. It concentrates on the pattern-matching aspects of term-rewriting rather than on one particular kind of term-rewriting system. The language contains very few instructions, which makes it easy to interpret or to use as the input to a code generator. The language is also a high-enough description of the program that it works well as input for a code optimizer based on partial evaluation.
Abstract-found: 1
Intro-found: 1
Reference: [AHU74] <author> Alfred V. Aho, John E. Hopcroft, and Jeffery D. </author> <title> Ullmann. The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1974. </year>
Reference-contexts: We can produce chains of indirection, and it is possible that these chains can become quite long. We use the chain-collapsing method in the collapsing UNION-FIND algorithm <ref> [AHU74] </ref> to minimize the cost of traversing these chains. 4.4 Control Instructions The call instruction is responsible for providing a new register environment for the client, giving the client a new set of registers and loading the input registers with the appropriate values.
Reference: [ASU85] <author> Alfred V. Aho, Ravi Sethi, and Jeffery D. </author> <title> Ullmann. </title> <booktitle> Compilers, Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1985. </year>
Reference-contexts: This makes the conditionals in EM code program quite fast. Since the symbol table is usually fairly small and the symbols numbers are dense, the jumptable size is not too big. A technique similar to the table-compression method described in section 3.9 of <ref> [ASU85] </ref> can also be used to provide a more compact representation of these jumptables with minimal access time overhead. 4.3 Construction Instructions Building new nodes in memory is straightforward: we allocate a piece of memory of the appropriate size, put the specified information in the node, and put the address of
Reference: [Che80] <author> Leslie Paul Chew. </author> <title> An improved algorithm for computing with equations. </title> <booktitle> In 21st Annual Symposium on Foundations of Computer Science, </booktitle> <year> 1980. </year>
Reference-contexts: We are also using EM code in an experimental implementation of Lazy Directed Congruence Closure, a tabular run-time optimization method for term-rewriting systems based on the work of Paul Chew <ref> [Che80] </ref>. It will be interesting to see what other problems can be attacked in this way. 6 Further Work * Can an EM code program be modified easily, for example when one is adding equations to an equational program? See, for example, [Str84].
Reference: [FK86] <author> Joseph H. Fasel and Robert M. Keller, </author> <title> editors. Graph Reduction, </title> <booktitle> Proceedings of a Workshop, </booktitle> <address> Santa Fe, New Mexico. </address> <publisher> Springer-Verlag, </publisher> <year> 1986. </year> <month> 10 </month>
Reference: [HL79] <author> Gerard Huet and Jean-Jacques Levy. </author> <title> Computations in non-ambiguous linear term rewriting systems. </title> <type> Technical Report 359, </type> <institution> INRIA, </institution> <year> 1979. </year>
Reference: [Jon87] <editor> Simon L. Peyton Jones. </editor> <booktitle> The Implementation of Functional Programming Languages. </booktitle> <publisher> Prentice-Hall, </publisher> <year> 1987. </year>
Reference: [O'D85] <author> Michael J. O'Donnell. </author> <title> Equational Logic as a Programming Language. </title> <publisher> MIT Press, </publisher> <year> 1985. </year>
Reference-contexts: In each node that has been the subject of an replace instruction, we place a reference to the target node. Whenever we try to inspect such a node, we must automatically follow this reduction pointer to the appropriate node. In our application we adopt the indirection technique suggested in <ref> [O'D85] </ref>. We reserve a special indirect symbol of arity one, and overwrite the subject node in an indirection with this symbol. The 8 one child of the node contains the reference to the target.
Reference: [O'D87] <author> Michael J. O'Donnell. </author> <title> Survey of the equational logic programming project. </title> <booktitle> In Colloquium on Resolution of Equations in Algebraic Structures, </booktitle> <year> 1987. </year>
Reference-contexts: Partially funded by NSF grant CCR 8805503. y Laboratoire Bordelais de Recherche en Informatique, Department d'Informatique, Universite de Bordeaux I. Partially funded by ESPRIT. 1 evaluation of systems based on rewriting the lambda-calculus and not on term-rewriting systems in general. The term-rewriting implementation of Equational Logic Programming described in <ref> [O'D87] </ref> emphasizes the pattern-matching qualities of term-rewriting systems. Experimental implementations have offered strong evidence that our pattern-matching methods perform quite well in practice. We present an intermediate language for term-rewriting systems that arose out of Robert Strandh's implementation of Equational Logic Programming, as described in his dissertation [Str88].
Reference: [She90] <author> David J. Sherman. </author> <title> Sharing common subexpressions in EM code programs. </title> <type> Technical Report 90-019, </type> <institution> University of Chicago Department of Computer Science, </institution> <year> 1990. </year>
Reference: [SS90] <author> David J. Sherman and Robert I. Strandh. </author> <title> Partial evaluation of intermediate code from equational programs. </title> <type> Technical Report 90-029, </type> <institution> University of Chicago Department of Computer Science, </institution> <year> 1990. </year> <note> Submitted for publication. </note>
Reference: [Str84] <author> Robert I. Strandh. </author> <title> Incremental suffix trees with multiple subject strings. </title> <type> Technical Report JHU/EECS-84/18, </type> <institution> The Johns Hopkins University, </institution> <year> 1984. </year>
Reference-contexts: It will be interesting to see what other problems can be attacked in this way. 6 Further Work * Can an EM code program be modified easily, for example when one is adding equations to an equational program? See, for example, <ref> [Str84] </ref>. Can this be done while the program is executing? Researchers at Argonne National Laboratory have used a similar method, modifying WAM code during run-time. * Suppose we try to build an EM chip.
Reference: [Str88] <author> Robert I. Strandh. </author> <title> Compiling Equational Programs into Efficient Machine Code. </title> <type> PhD thesis, </type> <institution> Johns Hopkins University, Baltimore, Maryland, </institution> <year> 1988. </year>
Reference-contexts: Experimental implementations have offered strong evidence that our pattern-matching methods perform quite well in practice. We present an intermediate language for term-rewriting systems that arose out of Robert Strandh's implementation of Equational Logic Programming, as described in his dissertation <ref> [Str88] </ref>. This language appears to be a good compromise between fine-grain description and expressive power: it has a small instruction set of relatively simple operations, and yet can succinctly describe a large class of term-rewriting systems. <p> of the topmost invocation of the program specifies the root node of a term stored in the digraph; the term specified in this way is the output term of the program. 3 EM Instructions A program for an Equational Machine is written in EM code, the intermediate code introduced in <ref> [Str88] </ref>. The EM instructions fall naturally into three categories: term traversal, term construction, and recursive control. 3.1 Term Traversal: down and branch Term traversal means inspecting the term currently stored in memory and making decisions based on its contents. <p> It is worth mentioning that in many cases a call is tail-recursive, and a practical implementation should implement these as simple jumps. 5 Applications The Equational Machine was originally designed to implement the pattern-matching automata described by Strandh in <ref> [Str88] </ref>. We have had some success using this intermediate code in an implementation of the Equational Compiler; we have built an interpreter for EM code and a compiler from EM code to machine code.
Reference: [Wol88] <author> Stephen Wolfram. </author> <title> Mathematica: A System For Doing Mathematics By Computer. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year> <month> 11 </month>
References-found: 13

