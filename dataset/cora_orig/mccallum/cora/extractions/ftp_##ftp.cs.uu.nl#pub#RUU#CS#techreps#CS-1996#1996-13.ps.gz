URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1996/1996-13.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: fhansb,babetteg@cs.ruu.nl  
Title: Parallel algorithms for series parallel graphs  
Author: Hans L. Bodlaender and Babette de Fluiter 
Address: P.O. Box 80.089, 3508 TB Utrecht, the Netherlands  
Affiliation: Department of Computer Science, Utrecht University  
Abstract: In this paper, a parallel algorithm is given that, given a graph G = (V; E), decides whether G is a series parallel graph, and if so, builds a decomposition tree for G of series and parallel composition rules. The algorithm uses O(log jEj log fl jEj) time and O(jEj) operations on an EREW PRAM, and O(log jEj) time and O(jEj) operations on a CRCW PRAM (note that if G is a simple series parallel graph, then jEj = O(jV j)). With the same time and processor resources, a tree-decomposition of width at most two can be built of a given series parallel graph, and hence, very efficient parallel algorithms can be found for a large number of graph problems on series parallel graphs, including many well known problems, e.g., all problems that can be stated in monadic second order logic. The results hold for undirected series parallel graphs graphs, as well as for directed series parallel graphs.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arnborg, B. Courcelle, A. Proskurowski, and D. Seese. </author> <title> An algebraic theory of graph reduction. </title> <journal> J. ACM, </journal> <volume> 40 </volume> <pages> 1134-1164, </pages> <year> 1993. </year>
Reference-contexts: in this paper do not carry large constant factors and are probably efficient enough for a practical setting (although a more detailed analysis can probably bring the constant factor further down.) A central technique in this paper is graph reduction, introduced in a setting of graphs of bounded treewidth in <ref> [1] </ref>. In [3] and [4], it is shown how the technique can be used to obtain parallel algorithms for graphs of bounded treewidth.
Reference: [2] <author> M. W. Bern, E. L. Lawler, and A. L. Wong. </author> <title> Linear time computation of optimal subgraphs of decomposable graphs. </title> <journal> J. Algorithms, </journal> <volume> 8 </volume> <pages> 216-235, </pages> <year> 1987. </year>
Reference-contexts: Also, it is known that when a `decomposition tree' for a series parallel graph is given, then many problems can be solved in linear time, including many problems that are NP-hard for arbitrary graphs <ref> [2, 5, 9, 10] </ref>; Valdes et al. also show how to obtain such a decomposition tree in linear time. (In this paper, we assume a specific form of the decomposition tree, and use the term sp-trees for these trees.) He and Yesha gave a parallel algorithm for recognising directed series parallel
Reference: [3] <author> H. L. Bodlaender and B. de Fluiter. </author> <title> Reduction algorithms for graphs with small treewidth. </title> <type> Technical Report UU-CS-1995-37, </type> <institution> Department of Computer Science, Utrecht University, Utrecht, </institution> <year> 1995. </year>
Reference-contexts: Moreover, several of our results were inspired by techniques, established for graphs of bounded treewidth, especially those from <ref> [3] </ref> and [4]. <p> In <ref> [3] </ref> and [4], it is shown how the technique can be used to obtain parallel algorithms for graphs of bounded treewidth. Another technique that is used in this paper is the bounded adjacency list search technique, taken from [4], and adapted here to the setting of series parallel graphs. <p> Note that each undoing of a single reduction can be done in O (1) time without concurrent reading or writing. A small modification to the construction also allows us not only to maintain a minimal sp-tree, but also a binary sp-tree. This technique was based on work, reported in <ref> [3] </ref>, where also more details can be found. Theorem 5.1. <p> Now, note that the characterisation of s and t as in Theorem 6.1 above can be formulated in monadic second order logic (using techniques from e.g., [5]); hence, it is possible (using techniques of <ref> [4, 3] </ref>) to find values of s and t which fulfil the conditions of Theorem 6.1 in O (log m log fl m) time, with O (m) operations and space on an EREW PRAM, and in O (log m) time, and O (m) operations and space on a CRCW PRAM.
Reference: [4] <author> H. L. Bodlaender and T. Hagerup. </author> <title> Parallel algorithms with optimal speedup for bounded treewidth. </title> <editor> In Z. F ul op and F. G ecseg, editors, </editor> <booktitle> Proceedings 22nd International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 268-279, </pages> <address> Berlin, </address> <year> 1995. </year> <note> Springer-Verlag, Lecture Notes in Computer Science 944. </note>
Reference-contexts: Moreover, several of our results were inspired by techniques, established for graphs of bounded treewidth, especially those from [3] and <ref> [4] </ref>. As a side remark, we note that, while the algorithms in [4] are carrying constant factors that make them impractical in their stated form, the algorithms in this paper do not carry large constant factors and are probably efficient enough for a practical setting (although a more detailed analysis can <p> Moreover, several of our results were inspired by techniques, established for graphs of bounded treewidth, especially those from [3] and <ref> [4] </ref>. As a side remark, we note that, while the algorithms in [4] are carrying constant factors that make them impractical in their stated form, the algorithms in this paper do not carry large constant factors and are probably efficient enough for a practical setting (although a more detailed analysis can probably bring the constant factor further down.) A central technique in this <p> In [3] and <ref> [4] </ref>, it is shown how the technique can be used to obtain parallel algorithms for graphs of bounded treewidth. Another technique that is used in this paper is the bounded adjacency list search technique, taken from [4], and adapted here to the setting of series parallel graphs. <p> In [3] and <ref> [4] </ref>, it is shown how the technique can be used to obtain parallel algorithms for graphs of bounded treewidth. Another technique that is used in this paper is the bounded adjacency list search technique, taken from [4], and adapted here to the setting of series parallel graphs. This paper is organised further as follows. In Section 2, we give some basic definitions, and preliminary results. In Section 3, we give a number of graph reduction rules, and show that they are `safe' for series parallel graphs. <p> Also, some reduction-pairs would try to simultaneously write or read to a memory location. Thus, it is needed to find a large set of reductions that can be carried out simultaneously, without any conflicts arising. This is solved in the same way as the reduction algorithms in <ref> [4] </ref> are done: a `conflict graph' is built; one can note that this conflict graph has bounded degree, and a large independent set in the conflict graph is then found. By using the same approach as in [4], we can carry out all reductions in O (log m log fl m) <p> This is solved in the same way as the reduction algorithms in <ref> [4] </ref> are done: a `conflict graph' is built; one can note that this conflict graph has bounded degree, and a large independent set in the conflict graph is then found. By using the same approach as in [4], we can carry out all reductions in O (log m log fl m) time with O (m) operations and O (m) space on an EREW PRAM, and with O (log m) time and O (m) operations and O (m) space on a CRCW PRAM. <p> This situation is handled further in exactly the same way as in <ref> [4] </ref>. <p> Now, note that the characterisation of s and t as in Theorem 6.1 above can be formulated in monadic second order logic (using techniques from e.g., [5]); hence, it is possible (using techniques of <ref> [4, 3] </ref>) to find values of s and t which fulfil the conditions of Theorem 6.1 in O (log m log fl m) time, with O (m) operations and space on an EREW PRAM, and in O (log m) time, and O (m) operations and space on a CRCW PRAM. <p> A large number of interesting and important graph problems can be dealt in this way, including CHROMATIC NUMBER, MAXIMUM CLIQUE, MAXIMUM INDEPENDENT SET, HAMIL TONIAN CIRCUIT, STEINER TREE, LONGEST PATH, etc. See <ref> [4] </ref>. 20 Now, note that we can build a tree-decomposition of treewidth two of a given series par-allel graph in the following way: first make a binary sp-tree, and then use the construction of Lemma 2.5. Lemma 6.1.
Reference: [5] <author> R. B. Borie, R. G. Parker, and C. A. Tovey. </author> <title> Automatic generation of linear-time algorithms from predicate calculus descriptions of problems on recursively constructed graph families. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 555-581, </pages> <year> 1992. </year>
Reference-contexts: Also, it is known that when a `decomposition tree' for a series parallel graph is given, then many problems can be solved in linear time, including many problems that are NP-hard for arbitrary graphs <ref> [2, 5, 9, 10] </ref>; Valdes et al. also show how to obtain such a decomposition tree in linear time. (In this paper, we assume a specific form of the decomposition tree, and use the term sp-trees for these trees.) He and Yesha gave a parallel algorithm for recognising directed series parallel <p> Sink t is taken in the same way in the other biconnected component with one cut vertex. Now, note that the characterisation of s and t as in Theorem 6.1 above can be formulated in monadic second order logic (using techniques from e.g., <ref> [5] </ref>); hence, it is possible (using techniques of [4, 3]) to find values of s and t which fulfil the conditions of Theorem 6.1 in O (log m log fl m) time, with O (m) operations and space on an EREW PRAM, and in O (log m) time, and O (m)
Reference: [6] <author> R. J. Duffin. </author> <title> Topology of series-parallel graphs. </title> <journal> J. Math. Anal. Appl., </journal> <volume> 10 </volume> <pages> 303-318, </pages> <year> 1965. </year>
Reference-contexts: First, suppose we are given a graph G = (V; E), and want to determine whether G is series parallel with a proper choice of terminals. In [7], it was shown (using results from <ref> [6] </ref>) that this 19 problem reduces in a direct way to the problem with specified vertices, as the following result holds. Theorem 6.1. [Eppstein [7]] Let G = (V; E) be an undirected graph.
Reference: [7] <author> D. Eppstein. </author> <title> Parallel recognition of series parallel graphs. </title> <journal> Information and Computation, </journal> <volume> 98 </volume> <pages> 41-55, </pages> <year> 1992. </year>
Reference-contexts: In this paper, n denotes the number of vertices of the input graph; m the fl This research was partially supported by the Foundation for Computer Science (S.I.O.N) of the Netherlands Organisation for Scientific Research (N.W.O.). 1 number of edges.) Eppstein <ref> [7] </ref> improved this result for simple graphs: his algorithm runs in O (log n) time on a CRCW PRAM with O (mff (m; n)= log n) processors. <p> Also, it can be used as a first step to solve many other problems on series parallel graphs. First, suppose we are given a graph G = (V; E), and want to determine whether G is series parallel with a proper choice of terminals. In <ref> [7] </ref>, it was shown (using results from [6]) that this 19 problem reduces in a direct way to the problem with specified vertices, as the following result holds. Theorem 6.1. [Eppstein [7]] Let G = (V; E) be an undirected graph. <p> In <ref> [7] </ref>, it was shown (using results from [6]) that this 19 problem reduces in a direct way to the problem with specified vertices, as the following result holds. Theorem 6.1. [Eppstein [7]] Let G = (V; E) be an undirected graph. <p> While the resulting algorithm will probably not be efficient, this result does not rely on non-constructive arguing. (We expect that a more straightforward approach, based on reduction, will also work here.) When G is directed, then one can use the modification, described in <ref> [7] </ref>: solve the problem first on the underlying undirected graph, and then verify that all edges have the proper direction. If s and t are not specified, then take for s the vertex with indegree 0, and for t the vertex with outdegree 0. Theorem 6.2.
Reference: [8] <author> X. He and Y. Yesha. </author> <title> Parallel recognition and decomposition of two terminal series parallel graphs. </title> <journal> Information and Computation, </journal> <volume> 75 </volume> <pages> 15-38, </pages> <year> 1987. </year>
Reference-contexts: 9, 10]; Valdes et al. also show how to obtain such a decomposition tree in linear time. (In this paper, we assume a specific form of the decomposition tree, and use the term sp-trees for these trees.) He and Yesha gave a parallel algorithm for recognising directed series parallel graphs <ref> [8] </ref>.
Reference: [9] <author> T. Kikuno, N. Yoshida, and Y. Kakuda. </author> <title> A linear algorithm for the domination number of a series-parallel graph. </title> <journal> Disc. Appl. Math., </journal> <volume> 5 </volume> <pages> 299-311, </pages> <year> 1983. </year> <month> 21 </month>
Reference-contexts: Also, it is known that when a `decomposition tree' for a series parallel graph is given, then many problems can be solved in linear time, including many problems that are NP-hard for arbitrary graphs <ref> [2, 5, 9, 10] </ref>; Valdes et al. also show how to obtain such a decomposition tree in linear time. (In this paper, we assume a specific form of the decomposition tree, and use the term sp-trees for these trees.) He and Yesha gave a parallel algorithm for recognising directed series parallel
Reference: [10] <author> K. Takamizawa, T. Nishizeki, and N. Saito. </author> <title> Linear-time computability of combinatorial problems on series-parallel graphs. </title> <journal> J. ACM, </journal> <volume> 29 </volume> <pages> 623-641, </pages> <year> 1982. </year>
Reference-contexts: Also, it is known that when a `decomposition tree' for a series parallel graph is given, then many problems can be solved in linear time, including many problems that are NP-hard for arbitrary graphs <ref> [2, 5, 9, 10] </ref>; Valdes et al. also show how to obtain such a decomposition tree in linear time. (In this paper, we assume a specific form of the decomposition tree, and use the term sp-trees for these trees.) He and Yesha gave a parallel algorithm for recognising directed series parallel
Reference: [11] <author> J. Valdes, R. E. Tarjan, and E. L. Lawler. </author> <title> The recognition of series parallel digraphs. </title> <journal> SIAM J. Comput., </journal> <volume> 11 </volume> <pages> 298-313, </pages> <year> 1982. </year> <month> 22 </month>
Reference-contexts: A well studied problem is the problem to recognise series parallel graphs. A linear time algorithm for this problem has been given by Valdes, Tarjan, and Lawler <ref> [11] </ref>.
References-found: 11

