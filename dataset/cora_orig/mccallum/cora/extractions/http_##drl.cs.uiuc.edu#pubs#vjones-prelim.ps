URL: http://drl.cs.uiuc.edu/pubs/vjones-prelim.ps
Refering-URL: http://drl.cs.uiuc.edu/security/pubs.html
Root-URL: http://www.cs.uiuc.edu
Email: vjones@cs.uiuc.edu/(217) 244-7117  
Title: Databases on the Intranet  
Author: Vicki E. Jones 
Note: Preliminary Proposal  
Date: August 1996  
Address: Urbana, Illinois 61801  
Affiliation: Department of Computer Science University of Illinois  
Abstract: Concern for security and privacy is today's biggest roadblock to wider use of distributed information services such as those provided on the Internet. Clients want services such as efficient browsing and searching, electronic commerce, and digital publishing without requirements to disclose irrelevant personal information. Servers want to provide these services while maintaining control (e.g., only allowing paying customers and limiting the type of information accessed). Conventional centralized user identification and authorization schemes no longer obtain in this decentralized, autonomous environment. Clients and servers must be able to interact without prior knowledge of each other and must maintain personal privacy during the evaluation of access eligibility. Traditional coarse-grained protection schemes are insufficient in this environment; an increased number of clients sharing numerous small data objects necessitates efficient, fine-grained controls. This thesis describes high level "credentials" and a credential system architecture to provide private, secure access to information services. Credentials allow clients to prove their eligibility for services by enclosing them with requests. The meaning of a particular credential depends on the issuer (a protection domain), and belief in the credential's statement depends on the trust relationship between the issuer and the service provider evaluating the credential. After credentials have been evaluated, this thesis shows how to obtain efficient, fine-grained (object-level) access control to provide greater flexibility in specifying and enforcing database access policies. Current client-server object database system architectures often copy objects into the client address space, making authorization checking on every access very expensive. Our prototype system, a modification of the Texas persistent object store, provides access control on objects by checking authorization during object swizzling. We evaluate the performance of such fine-grained controls using standard benchmarks. 
Abstract-found: 1
Intro-found: 1
Reference: [AT96] <author> Marc Andreessen and The Netscape Product Team. </author> <title> The netscape intranet vision and product roadmap, </title> <note> version 1.0. http://home.netscape.com/comprod/at work/white paper/intranet/vision.html, </note> <month> June </month> <year> 1996. </year>
Reference-contexts: emerging in Intranet and Internet software|Microsoft considers transaction management and indexing to be core technologies for their business customers [Gat96] and Netscape has announced future products with fine-grained access control (Catalog, Mail, and News Servers and Publishing System), logging (Proxy Server), and transaction support (Transaction Server for their Merchant System) <ref> [AT96] </ref>. Traditionally, data management needs have been addressed by relational databases using simple data structures such as tables or relations.
Reference: [BDK91] <editor> Bancilhon, L. Delobel, and P. Kanellakis, editors. </editor> <title> Building an Object-Oriented Database System: The Story of O 2 . Morgan-Kaufmann, </title> <year> 1991. </year>
Reference-contexts: More recently object database research and products have emerged to address the needs of applications requiring more complex data structures than tables or relations, distributed processing environments, and better performance [Cat91]. Many object databases (ODBs) are available commercially <ref> [Des95a, Ont89, Obj90, BDK91, Cor94] </ref> and provide various tradeoffs for data modeling features and performance. Neither object nor relational databases, however, address the greater needs for security in today's widely networked environment. Most relational systems provide table-level access controls and one, Oracle, supports more complex authorizations. <p> In O 2 objects are associated with records in the underlying storage manager (WiSS) and, thus, the OID is the record's identifier. This identifier encodes a volume identifier, a page identifier within the volume, and a slot number which indirectly addresses a record within a page <ref> [BDK91] </ref>. Texas OIDs are 64-bit file offsets [WK92]. Objectivity/DB uses a physical page and offset OID. 20 3.2 Inter-object References Another architectural decision which impacts performance is the in-memory format of references between objects. In traditional databases the data is encapsulated by the query language. <p> All objects reachable from these roots are fetched at transaction start and OIDs are swizzled to memory addresses. In object-fault mode a resident-object hash table is used to map OIDs to in-memory object addresses <ref> [BDK91] </ref>. 3.2.2 Object Descriptors A second issue with respect to the implementation of main-memory object references is the maintenance of run-time object information, such as whether a reference has been swizzled, an object's in-memory location, and its concurrency control information.
Reference: [BW94] <author> E. Bertino and H. Weigand. </author> <title> An approach to authorization modeling in object-oriented database systems. </title> <journal> Data and Knowledge Engineering, </journal> <volume> 12, </volume> <year> 1994. </year> <month> Have(Bertino). </month>
Reference-contexts: Other semantic modeling constructs, such as composite objects and versions, are also exploited in some of these proposals. Proposals also distinguish between weak authorizations, which can be overridden at lower levels of a hierarchy, and strong authorizations, which cannot. An extension of these early proposals <ref> [BW94] </ref> supports content-dependent authorization rules, introduces two modalities for authorization administration, and defines a new approach to handle authorization on object versions. They also outline how the model can be extended to support method-based authorization.
Reference: [Cat91] <author> R. G. G. Cattell. </author> <title> Object Data Management. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: More recently object database research and products have emerged to address the needs of applications requiring more complex data structures than tables or relations, distributed processing environments, and better performance <ref> [Cat91] </ref>. Many object databases (ODBs) are available commercially [Des95a, Ont89, Obj90, BDK91, Cor94] and provide various tradeoffs for data modeling features and performance. Neither object nor relational databases, however, address the greater needs for security in today's widely networked environment. <p> crash recovery, and data independence), the following are especially important for ODB applications: unique object identifiers, composite objects, efficient referential integrity, object-type hierarchy, associated procedures, ordered sets, large uninterpreted data items (BLOBs), ease of schema changes, integrated programming language, multiple database versions, long-term locking and checkout, and high single-user performance <ref> [Cat91] </ref>. The relative importance of these features varies with the application. Performance, however, is often the most important factor for customers in deciding to use an object database. An order of magnitude difference in performance between systems can effectively constitute a functional difference.
Reference: [CDG + 90] <author> M. Carey, D. DeWitt, G. Graefe, D. Haight, J. Richardson, D. Schuh, E. Shekita, and S. Vandenberg. </author> <title> The EXODUS extensible DBMS project: An overview. </title> <booktitle> In Readings in Object-Oriented Database Systems. </booktitle> <publisher> Morgan Kaufman, </publisher> <year> 1990. </year>
Reference-contexts: In most instances this will not be the case and variables must be considered persistent. 40 Persistence by type can be defined in two ways: by declaration at the time a class is created (e.g., the persistent storage class in EXODUS <ref> [CDG + 90] </ref>) or by being a subtype of a system-supplied persistent object type. In systems using persistence by type declaration, a superset of all references to protected objects can be identified at compile time of any system.
Reference: [CE86] <author> David Chaum and Jan-Hendrik Evertse. </author> <title> A secure and privacy-protecting protocol for transmitting perso nal information between organizations. </title> <booktitle> In Advances in Cryptology|CRYPTO '86 Proceedings, </booktitle> <pages> pages 118-167, </pages> <address> Berlin, 1986. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: have a rigid format tailored to use for authenticating individuals as described above, there is nothing preventing (ab)use of the format to provide information other than identity in a certificate, 17 so there is the potential for expressivity with the use of such credentials. 7.2.5 Chaum's Credentials Chaum and colleagues <ref> [CE86, Cha90] </ref> describe a credential mechanism which allows individuals to control the transfer of information about themselves between organizations. An individual is known to an organization by a digital pseudonym which not only identifies the individual to the organization, but provides the medium for issuing credentials.
Reference: [CFMS94] <author> Silvana Castano, Mariagrazia Fugini, Giancarlo Martella, and Pierangela Sama-rati, </author> <title> editors. Database Security. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Other systems allow write-up but carefully manage potential conflicts which may destroy information. Polyinstantiation allows multiple objects with the same primary keys to coexist and is one way to allow write-up while preserving integrity <ref> [CFMS94] </ref>. 12 In addition to hierarchical classification levels, mandatory policies usually assign users and objects to categories, often called "need-to-know" categories. <p> Authorization mechanisms have three functions: administration of access control information to assign and maintain permissions, 14 checking whether or not an access is allowed (the decision algorithm), and enforcing the neg-ative decisions. Administration of large amounts of access control information is complex. It is discussed in <ref> [CFMS94] </ref> and not addressed further in this thesis. Section 4 discusses approaches to enforcement for ODBs and a discussion of the management of access control information in support of the decision algorithm is planned (see Section 8). The fundamental conceptual model for access control information is the access matrix.
Reference: [Cha90] <author> David Chaum. </author> <title> Showing credentials without identification: Transferring sign atures between unconditionally unlinkable pseudonyms. </title> <booktitle> In Auscrypt '90, </booktitle> <pages> pages 246-264, </pages> <address> Berlin, 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: have a rigid format tailored to use for authenticating individuals as described above, there is nothing preventing (ab)use of the format to provide information other than identity in a certificate, 17 so there is the potential for expressivity with the use of such credentials. 7.2.5 Chaum's Credentials Chaum and colleagues <ref> [CE86, Cha90] </ref> describe a credential mechanism which allows individuals to control the transfer of information about themselves between organizations. An individual is known to an organization by a digital pseudonym which not only identifies the individual to the organization, but provides the medium for issuing credentials.
Reference: [Cor92] <author> Oracle Corporation. </author> <title> ORACLE7 Server SWL Language Reference Manual. </title> <publisher> Oracle Corporation, </publisher> <month> December </month> <year> 1992. </year>
Reference-contexts: While there is ongoing discussion about exactly what RBAC means, it is clear that RBAC will consolidate security in a unified service which can be managed while providing the flexibility and customizations required by individual applications [SCFY94]. Support for roles is available in commercial products <ref> [Cor92] </ref> and is being considered as part of the emerging SQL3 standard [PB93].
Reference: [Cor94] <author> Servio Corporation. </author> <title> Introduction to GemStone. </title> <institution> Servio Corporation, Beaverton, Oregon, </institution> <year> 1994. </year>
Reference-contexts: More recently object database research and products have emerged to address the needs of applications requiring more complex data structures than tables or relations, distributed processing environments, and better performance [Cat91]. Many object databases (ODBs) are available commercially <ref> [Des95a, Ont89, Obj90, BDK91, Cor94] </ref> and provide various tradeoffs for data modeling features and performance. Neither object nor relational databases, however, address the greater needs for security in today's widely networked environment. Most relational systems provide table-level access controls and one, Oracle, supports more complex authorizations.
Reference: [Cor96] <author> Amy Cortese. </author> <title> Here comes the intranet. </title> <booktitle> Business Week, </booktitle> <pages> pages 76-84, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: Experts believe that the opportunity for Intranet applications is 10 times larger than for Internet applications, which in turn are already a billion dollar business. Many businesses are using Intranet technology for intra-organizational communication needs <ref> [Hor96, Cor96] </ref>. For example, Santa Cruz Organization has about 200 servers on its private Intranet and only two Internet servers [Hal96]. At Simon & Schuster, one of the world's largest book publishers, 9,000 employees use Intranets daily to manage information effectively.
Reference: [CS92a] <author> R. G. G. Cattell and J. Skeen. </author> <title> Object operations benchmark. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 17(1) </volume> <pages> 1-31, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: An order of magnitude difference in performance between systems can effectively constitute a functional difference. For example, in CAD applications relational database servers can require minutes to respond to queries which require responses in seconds for reasonable user feedback <ref> [CS92a] </ref>. The decisions made by ODB designers impact the functionality and performance of an ODB system. The primary decisions include: * Object Identifiers (OIDs). What is the structure of an OID? What information should it reflect? * Inter-object References.
Reference: [CS92b] <author> R. G. G. Cattell and J. Skeen. </author> <title> Object operations benchmark. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 17(1) </volume> <pages> 1-31, </pages> <month> March </month> <year> 1992. </year> <month> 73 </month>
Reference-contexts: We measured the performance of Texas AC 1.0 on a standard ODB benchmark and compared the results to Texas without access control. The benchmark, OO1 <ref> [CS92b] </ref>, is intended to aid in evaluating performance for typical ODB applications where there are many small objects.
Reference: [Des95a] <author> Object Design. </author> <title> ObjectStore C++ API User Guide. Object Design, </title> <publisher> Inc., </publisher> <address> Burling--ton, Massachusetts, </address> <year> 1995. </year>
Reference-contexts: More recently object database research and products have emerged to address the needs of applications requiring more complex data structures than tables or relations, distributed processing environments, and better performance [Cat91]. Many object databases (ODBs) are available commercially <ref> [Des95a, Ont89, Obj90, BDK91, Cor94] </ref> and provide various tradeoffs for data modeling features and performance. Neither object nor relational databases, however, address the greater needs for security in today's widely networked environment. Most relational systems provide table-level access controls and one, Oracle, supports more complex authorizations.
Reference: [Des95b] <author> Object Design. </author> <title> ObjectStore C++ Performance Release 4. Object Design, </title> <publisher> Inc., </publisher> <address> Burlington, Massachusetts, </address> <year> 1995. </year>
Reference-contexts: For example, an OID might contain the segment and page number in its high order bits and a logical slot number in its low-order bits. GemStone [MS90], Orion [KBC + 88], and ObServer [HZ87] use logical identifiers while ObjectStore <ref> [Des95b] </ref> uses structured identifiers. In O 2 objects are associated with records in the underlying storage manager (WiSS) and, thus, the OID is the record's identifier. <p> Different ODBs use different approaches to swizzling, or a mixture of approaches. Objectivity/DB never swizzles, instead using a resident object table to locate objects on every reference. ObjectStore, at the other extreme, maintains references in swizzled form at almost all times <ref> [Des95b] </ref>. In O 2 transactions specify at execution time whether they are to run in resident mode or in object-fault mode. In memory-resident mode the persistent roots accessed by the transaction are identified at the beginning of each transaction.
Reference: [DH66] <author> J. B. Dennis and E. C. Van Horn. </author> <title> Programming semantics for multiprogrammed computations. </title> <journal> Communications of the ACM, </journal> <volume> 9(3) </volume> <pages> 143-155, </pages> <month> March </month> <year> 1966. </year>
Reference-contexts: Due to space limitations we are unable to analyze all of them, but this section reviews some of the better known systems in light of the desiderata, with an eye to extensions to their originally intended use. 7.2.1 Capabilities Since 1962 when the concept of a capability was first introduced <ref> [DH66] </ref> and 1966 when the term was coined [IJ62], the world has seen a variety of capability-based systems with slightly different properties. In most capability-based systems today objects are represented by a physical name or address known as a capability.
Reference: [Gat96] <author> Bill Gates. </author> <title> Transcript from gates' speech at microsoft intranet strategy day. http://198.105.232.7:80/intranet/, June 1996. Microsoft Intranet Strategy Day, </title> <address> San Jose, CA. </address>
Reference-contexts: Databases, however, are gaining popularity on the Web. Gateways have been built between Web servers and most major database products [Ora, Inf, Ker, IBM, Obj]. Traditional database features are emerging in Intranet and Internet software|Microsoft considers transaction management and indexing to be core technologies for their business customers <ref> [Gat96] </ref> and Netscape has announced future products with fine-grained access control (Catalog, Mail, and News Servers and Publishing System), logging (Proxy Server), and transaction support (Transaction Server for their Merchant System) [AT96].
Reference: [Gil95] <author> George Gilder. </author> <title> The coming software shift. Forbes, </title> <booktitle> ASAP, </booktitle> <pages> pages 147-162, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: 1 Introduction The world of computing is currently in the midst of a "fundamental break in the history of technology" 1 <ref> [Gil95] </ref>. As the infrastructure which supports this paradigm shifts from the desktop focus of the personal computer to the network focus of the Internet and World Wide Web continues to expand, the technological challenges we face will also evolve. Today many corporations are using Internet technology to support their enterprises.
Reference: [Hal96] <author> Tom R. Halfhill. </author> <title> Unix vs windows nt. </title> <journal> Byte, </journal> <pages> pages 42-52, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: Many businesses are using Intranet technology for intra-organizational communication needs [Hor96, Cor96]. For example, Santa Cruz Organization has about 200 servers on its private Intranet and only two Internet servers <ref> [Hal96] </ref>. At Simon & Schuster, one of the world's largest book publishers, 9,000 employees use Intranets daily to manage information effectively. Access to timely information empowers all employees to make decisions.
Reference: [HM93] <author> Antony L. Hosking and J. Eliot B. Moss. </author> <title> Object fault handling for persistent programming languages: A performance evaluation. </title> <booktitle> In 1993 Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <year> 1993. </year>
Reference-contexts: Another factor in our decision is the availability of the source code for modification. Many implementations of commercially viable ODB architectures are proprietary and, thus, unavailable for our use. Finally, we chose a structural database instead of a behavioral one, such as persistent SmallTalk <ref> [HM93] </ref>, since most commercially viable systems are structural. Currently, Texas provides database level access controls using the protection facilities of the underlying file system. Access to the entire persistent store is granted based on the operating system file permissions on the database file.
Reference: [Hor96] <author> Elisabeth Horwitt. </author> <title> intranet intracacies. </title> <journal> Computerworld Client/Server Journal, </journal> <pages> pages 20-23, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: Experts believe that the opportunity for Intranet applications is 10 times larger than for Internet applications, which in turn are already a billion dollar business. Many businesses are using Intranet technology for intra-organizational communication needs <ref> [Hor96, Cor96] </ref>. For example, Santa Cruz Organization has about 200 servers on its private Intranet and only two Internet servers [Hal96]. At Simon & Schuster, one of the world's largest book publishers, 9,000 employees use Intranets daily to manage information effectively.
Reference: [HZ87] <author> M. Hornick and S. B. Zdonik. </author> <title> A shared, segmented memory for an object-oriented database. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 5(1), </volume> <year> 1987. </year>
Reference-contexts: For example, an OID might contain the segment and page number in its high order bits and a logical slot number in its low-order bits. GemStone [MS90], Orion [KBC + 88], and ObServer <ref> [HZ87] </ref> use logical identifiers while ObjectStore [Des95b] uses structured identifiers. In O 2 objects are associated with records in the underlying storage manager (WiSS) and, thus, the OID is the record's identifier.
Reference: [IBM] <institution> Business on the internet: A mountain of opportunity amid a range of challenges. </institution> <note> http://www.internet.ibm.com/tier.htm. </note>
Reference-contexts: Currently the dominant type of repository for networked information servers is (hierarchical) file systems, including the recently announced Common Internet File System (CIFS), a remote collaborative file-sharing technology [Mic]. Databases, however, are gaining popularity on the Web. Gateways have been built between Web servers and most major database products <ref> [Ora, Inf, Ker, IBM, Obj] </ref>.
Reference: [IJ62] <author> J. K. Iliffe and J. G. Jodeit. </author> <title> A dynamic storage allocation system. </title> <journal> Computer Journal, </journal> <volume> 5(3) </volume> <pages> 58-78, </pages> <month> October </month> <year> 1962. </year>
Reference-contexts: analyze all of them, but this section reviews some of the better known systems in light of the desiderata, with an eye to extensions to their originally intended use. 7.2.1 Capabilities Since 1962 when the concept of a capability was first introduced [DH66] and 1966 when the term was coined <ref> [IJ62] </ref>, the world has seen a variety of capability-based systems with slightly different properties. In most capability-based systems today objects are represented by a physical name or address known as a capability.
Reference: [Inf] <author> Deploying a database on the web: </author> <title> Potential uses and issues. </title> <address> http://www.informix.com/informix/dbweb/grail/deploy.htm. </address>
Reference-contexts: Currently the dominant type of repository for networked information servers is (hierarchical) file systems, including the recently announced Common Internet File System (CIFS), a remote collaborative file-sharing technology [Mic]. Databases, however, are gaining popularity on the Web. Gateways have been built between Web servers and most major database products <ref> [Ora, Inf, Ker, IBM, Obj] </ref>.
Reference: [JK90] <author> Sushil Jajodia and Boris Kogan. </author> <title> Integrating an object-oriented data model with multilevel security. </title> <booktitle> In 1990 IEEE Computer Society Symposium on Research in Security and Privacy, </booktitle> <year> 1990. </year>
Reference-contexts: Their basic premise defines the object as the unit of authorization since objects are the unit of access (with support for different levels of granularity for performance and user convenience). While other recent work on authorization models for ODBs have been reported <ref> [JK90, KTT89, Lun89, ML92, Mor90, Thu89] </ref>, most of these are concerned with multilevel object models providing mandatory controls. are interesting??? 7.2 Distributed System Security A variety of existing mechanisms 16 provide some of the desiderata specified above.
Reference: [JMD93] <author> Dirk Jonscher, Jonathan D. Moffett, and Klaus R. Dittrich. </author> <title> Complex subjects or: The striving for comlexity is ruling our world. </title> <booktitle> In Proceedings of the 7th IFIP Workshop on Database Security, </booktitle> <month> September </month> <year> 1993. </year> <month> 74 </month>
Reference-contexts: The users, the types of access, and the data items themselves must be aggregated in some manner in order to reduce the sheer number of authorizations to be granted and revoked. Hence the most sophisticated proposals for database security (e.g., <ref> [RBKW91, JMD93, SCFY94] </ref>) categorize users into roles, and organize roles into an inheritance hierarchy to minimize the number of explicit authorizations that must be granted. Similarly, operations on data items, and the items themselves, are organized into hierarchies so that authorizations can be inherited up and down the hierarchies.
Reference: [KBC + 88] <author> W. Kim, N. Ballou, H-T. Chou, J. F. Garza, D. Woelk, and J. Banerjee. </author> <title> In--tegraing and object-oriented programming system with a database system. </title> <booktitle> In 1988 Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <year> 1988. </year>
Reference-contexts: Combinations of logical and physical identifiers allow some location independence and provide some information about the physical location of an object. For example, an OID might contain the segment and page number in its high order bits and a logical slot number in its low-order bits. GemStone [MS90], Orion <ref> [KBC + 88] </ref>, and ObServer [HZ87] use logical identifiers while ObjectStore [Des95b] uses structured identifiers. In O 2 objects are associated with records in the underlying storage manager (WiSS) and, thus, the OID is the record's identifier.
Reference: [Ken93] <author> S. Kent. </author> <title> Internet privacy-enhanced mail. </title> <journal> Communications of the ACM, </journal> <volume> 36(8) </volume> <pages> 48-60, </pages> <month> August </month> <year> 1993. </year>
Reference: [Ker] <author> Mitchell Kertzman. </author> <title> Focusing on a new platform for business applications. </title> <address> http://www.sybase.com/inc/sybmag/strategy.html. </address>
Reference-contexts: Currently the dominant type of repository for networked information servers is (hierarchical) file systems, including the recently announced Common Internet File System (CIFS), a remote collaborative file-sharing technology [Mic]. Databases, however, are gaining popularity on the Web. Gateways have been built between Web servers and most major database products <ref> [Ora, Inf, Ker, IBM, Obj] </ref>.
Reference: [KGBW90] <author> W. Kim, J. Garza, N. Ballou, and D. Woelk. </author> <title> Architecture of the ORION next-generation database system. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1), </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: The same object may be represented in all three places and even updated in one of them. O 2 solves this cache inconsistency problem by flushing all modified objects in the client cache back to the server before execution ([BDK91]). Another solution <ref> [KGBW90] </ref>, execution of the methods on both the client and the server, requires a complex postprocessing step to eliminate duplicates. Both of these solutions are fairly slow.
Reference: [Kim90] <author> Won Kim. </author> <title> Introduction to Object-Oriented Databases. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: If a segment is not placed in its canonical location, all references to objects in the page must be reswizzled to adjust for the difference between the canonical and actual segment locations. 3.5.2 Handle Reference Architecture: Orion The Orion <ref> [Kim90] </ref> research prototype is an object server. Orion OIDs are logical, reflecting both the type of the object and the unique instance. The resident object table is hashed by OID and contains object handles, not direct pointers to objects.
Reference: [KTT89] <author> T Keefe, W. T. Tsai, and B Thuraisingham. </author> <title> SODA|a secure object-oriented database system. </title> <journal> Computers and Security, </journal> <volume> 8(6), </volume> <month> October </month> <year> 1989. </year>
Reference-contexts: Their basic premise defines the object as the unit of authorization since objects are the unit of access (with support for different levels of granularity for performance and user convenience). While other recent work on authorization models for ODBs have been reported <ref> [JK90, KTT89, Lun89, ML92, Mor90, Thu89] </ref>, most of these are concerned with multilevel object models providing mandatory controls. are interesting??? 7.2 Distributed System Security A variety of existing mechanisms 16 provide some of the desiderata specified above.
Reference: [LABW92] <author> Butler Lampson, Martn Abadi, Michael Burrows, and Edward Wobber. </author> <title> Authentication in distributed systems: </title> <journal> Theory and practice. ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 265-310, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: for the secure transfer of capabilities between systems and would allow access control decisions to be made outside of the domain of the target object, thus requiring a more general means of referring to an object than its local address. 7.2.2 Taos The security mechanisms in the Taos operating system <ref> [WABL94, LABW92] </ref> provide facilities for sending and receiving messages over secure channels and for identifying the source of a request in support of an access control decision. In typical fashion, this decision is made by consulting an access control list once the requester has been identified. <p> a principled design for access control which takes into account various properties of the request and of the requester (e.g., the physical origin of the request, or attributes of the requester such as group membership or the adoption of privilege-modifying roles), thus offering an increase in expressivity over simpler schemes <ref> [LABW92] </ref>, and use of delegation certificates provides a controlled transfer of authority.
Reference: [LAC + 96] <author> B. Liskov, A. Adya, M. Castro, M. Day, S. Ghemawat, R. Gruber, U. Mahesh-wari, A. C. Myers, and L. Shrira. </author> <title> Safe and efficient sharing of persistent objects in thor. </title> <booktitle> In 1996 ACM Sigmod International Conference on Management of Data, </booktitle> <year> 1996. </year>
Reference: [Lie93] <author> A. Liebl. </author> <title> Authentication in distributed systems. </title> <journal> Operating Systems Review, </journal> <volume> 27(4) </volume> <pages> 31-41, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: This capability is effectively a ticket whose possession authorizes the holder to access the specified object in a specific way. Capabilities are protected objects|they are not allowed to migrate into any address space directly 16 Liebl's bibliography <ref> [Lie93] </ref> includes a discussion of and references to many existing distributed authentication proposals and systems. 59 accessible by a user process. They are unforgeable and, in most systems, can be trans-ferred to other users.
Reference: [Lun89] <author> T. Lunt. </author> <title> Multilevel security for object-oriented database systems. </title> <booktitle> In Proceedings of the 3rd IFIP Workshop on Database Security, </booktitle> <year> 1989. </year>
Reference-contexts: Their basic premise defines the object as the unit of authorization since objects are the unit of access (with support for different levels of granularity for performance and user convenience). While other recent work on authorization models for ODBs have been reported <ref> [JK90, KTT89, Lun89, ML92, Mor90, Thu89] </ref>, most of these are concerned with multilevel object models providing mandatory controls. are interesting??? 7.2 Distributed System Security A variety of existing mechanisms 16 provide some of the desiderata specified above.
Reference: [LW88] <author> Frederick H. Lochovsky and Carson C. Woo. </author> <title> Role-based security in data base management systems. </title> <editor> In C. E. Landwehr, editor, </editor> <booktitle> Database Security: Status and Prospects, </booktitle> <pages> pages 209-222. </pages> <publisher> North-Holland, </publisher> <year> 1988. </year>
Reference-contexts: Support for roles is available in commercial products [Cor92] and is being considered as part of the emerging SQL3 standard [PB93]. Proposals for roles in object-oriented systems <ref> [LW88, Tin88] </ref> and more recent descriptions of RBAC characteristics demonstrate the usefulness of roles for controlling access to large data repositories. 2.1.2 Authorization Mechanisms Protection mechanisms provide the means for controlling access to resources according to an organization's authorization policy.
Reference: [Mic] <author> Data general, </author> <title> digital, intel, intergraph, network appliance and others join mi-crosoft in support of common internet file system. </title> <note> http://www.microsoft.com/corpinfo/press/1996/jun96/cifs2pr.htm. Microsoft Press Release, June 13, </note> <year> 1996. </year>
Reference-contexts: Currently the dominant type of repository for networked information servers is (hierarchical) file systems, including the recently announced Common Internet File System (CIFS), a remote collaborative file-sharing technology <ref> [Mic] </ref>. Databases, however, are gaining popularity on the Web. Gateways have been built between Web servers and most major database products [Ora, Inf, Ker, IBM, Obj].
Reference: [ML92] <author> Jonathan K. Millen and Teresa F. Lunt. </author> <title> Security for object-oriented database systems. </title> <booktitle> In 1992 IEEE Computer Society Symposium on Research in Security and Privacy, </booktitle> <pages> pages 260-272, </pages> <year> 1992. </year> <month> 75 </month>
Reference-contexts: Their basic premise defines the object as the unit of authorization since objects are the unit of access (with support for different levels of granularity for performance and user convenience). While other recent work on authorization models for ODBs have been reported <ref> [JK90, KTT89, Lun89, ML92, Mor90, Thu89] </ref>, most of these are concerned with multilevel object models providing mandatory controls. are interesting??? 7.2 Distributed System Security A variety of existing mechanisms 16 provide some of the desiderata specified above.
Reference: [Mor90] <author> M. Morgenstern. </author> <title> A security model for multilevel objects with bidirectional re-lationships. </title> <booktitle> In Proceedings of the 4th IFIP Workshop on Database Security, </booktitle> <year> 1990. </year>
Reference-contexts: Their basic premise defines the object as the unit of authorization since objects are the unit of access (with support for different levels of granularity for performance and user convenience). While other recent work on authorization models for ODBs have been reported <ref> [JK90, KTT89, Lun89, ML92, Mor90, Thu89] </ref>, most of these are concerned with multilevel object models providing mandatory controls. are interesting??? 7.2 Distributed System Security A variety of existing mechanisms 16 provide some of the desiderata specified above.
Reference: [Mos92] <author> J. Eliot B. Moss. </author> <title> Working with persistent objects: To swizzle or not to swizzle. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(8), </volume> <month> August </month> <year> 1992. </year>
Reference-contexts: When the collection of objects accessed by an application is known in advance, <ref> [Mos92] </ref> shows that lazy swizzling always costs more than eager swizzling. This study also supports the expectation that swizzling is advantageous if an application does enough computation with the swizzled objects. Swizzling is worthwhile if, on average, a swizzled reference is 21 followed at least three times.
Reference: [MS90] <author> D. Maier and J. Stein. </author> <title> Development and implementation of an object-oriented dbms. </title> <booktitle> In Readings in Object-Oriented Database Systems. </booktitle> <publisher> Morgan Kaufman, </publisher> <year> 1990. </year>
Reference-contexts: Combinations of logical and physical identifiers allow some location independence and provide some information about the physical location of an object. For example, an OID might contain the segment and page number in its high order bits and a logical slot number in its low-order bits. GemStone <ref> [MS90] </ref>, Orion [KBC + 88], and ObServer [HZ87] use logical identifiers while ObjectStore [Des95b] uses structured identifiers. In O 2 objects are associated with records in the underlying storage manager (WiSS) and, thus, the OID is the record's identifier.
Reference: [not96] <author> No Author noted. </author> <title> Lotus notes: Enter the intranet. </title> <journal> The Economist, </journal> <volume> 338(7948) </volume> <pages> 64-65, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: Today many corporations are using Internet technology to support their enterprises. Intranets, corporate internal networks based on Internet technology, are currently in use by 22% of America's 1,000 biggest companies. It is estimated that 70% of sales of Internet software are used towards building such networks <ref> [not96] </ref>. Experts believe that the opportunity for Intranet applications is 10 times larger than for Internet applications, which in turn are already a billion dollar business. Many businesses are using Intranet technology for intra-organizational communication needs [Hor96, Cor96].
Reference: [Obj] <author> Objectstore, </author> <title> the natural database solution for the web! http://www.odi.com/prodinfo/onweb/overview.html. </title>
Reference-contexts: Currently the dominant type of repository for networked information servers is (hierarchical) file systems, including the recently announced Common Internet File System (CIFS), a remote collaborative file-sharing technology [Mic]. Databases, however, are gaining popularity on the Web. Gateways have been built between Web servers and most major database products <ref> [Ora, Inf, Ker, IBM, Obj] </ref>.
Reference: [Obj90] <author> Objectivity. </author> <title> Objectivity Database System Overview. Objectivity, </title> <publisher> Inc., </publisher> <address> Menlo Park, California, </address> <year> 1990. </year>
Reference-contexts: More recently object database research and products have emerged to address the needs of applications requiring more complex data structures than tables or relations, distributed processing environments, and better performance [Cat91]. Many object databases (ODBs) are available commercially <ref> [Des95a, Ont89, Obj90, BDK91, Cor94] </ref> and provide various tradeoffs for data modeling features and performance. Neither object nor relational databases, however, address the greater needs for security in today's widely networked environment. Most relational systems provide table-level access controls and one, Oracle, supports more complex authorizations.
Reference: [Obj95] <institution> Objectstore c++ api user guide release 4, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: ObjectStore <ref> [Obj95] </ref>, a well-known commercial disk-image ODB, provides two general approaches to access control: (1) read and write access controls on files, directories, and databases, and (2) database access controls via a key.
Reference: [Obj96] <institution> Objectivity. </institution> <type> Objectivity Technical Overview Version 4. </type> <institution> Objectivity, Inc., </institution> <address> Menlo Park, California, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: Objectivity/DB's page server has been shown to require fewer instructions at the server process, cause less network delay at the client process, and use less network bandwidth than an object server <ref> [Obj96] </ref>. One disadvantage of the pure page-server architecture is that methods can only be exe 24 cuted at the client, thus requiring all pages containing objects in a collection to be transferred to the client even for a simple sequential scan.
Reference: [Ont89] <author> Ontologic. </author> <title> ONTOS Reference Manual. </title> <publisher> Ontologic, Inc., </publisher> <address> Billerica, Massachusetts, </address> <year> 1989. </year> <note> [Ora] http://www.oracle.com/. </note>
Reference-contexts: More recently object database research and products have emerged to address the needs of applications requiring more complex data structures than tables or relations, distributed processing environments, and better performance [Cat91]. Many object databases (ODBs) are available commercially <ref> [Des95a, Ont89, Obj90, BDK91, Cor94] </ref> and provide various tradeoffs for data modeling features and performance. Neither object nor relational databases, however, address the greater needs for security in today's widely networked environment. Most relational systems provide table-level access controls and one, Oracle, supports more complex authorizations.
Reference: [PB93] <author> W. T. Polk and Lawrence E. Bassham. </author> <title> Security issues in the database language sql. </title> <type> Technical report, </type> <institution> National Institute of Standards and Technology, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: Support for roles is available in commercial products [Cor92] and is being considered as part of the emerging SQL3 standard <ref> [PB93] </ref>. Proposals for roles in object-oriented systems [LW88, Tin88] and more recent descriptions of RBAC characteristics demonstrate the usefulness of roles for controlling access to large data repositories. 2.1.2 Authorization Mechanisms Protection mechanisms provide the means for controlling access to resources according to an organization's authorization policy.
Reference: [RBKW91] <author> Fausto Rabitti, Elisa Bertino, Won Kim, and Darrell Woelk. </author> <title> A model of authorization for next-generation database systems. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 16(1) </volume> <pages> 88-131, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: In open policies the default is to grant access in the absence of an authorization indicating denial. In closed and open policies the authorizations are said to be positive and negative, respectively. While the interactions between positive and negative authorizations can be quite complex <ref> [RBKW91] </ref>, some systems allow both types of authorizations. Effective group-based access controls can be simple or quite complex. In a simple group-based access control model each object is owned by one user, the owner, who specifies a group's permissions to access the object. <p> class; default 6 For simplicity, in the remainder of this thesis the term "principal" will refer to the notion of a principal or set of principals acting in one or more roles. 35 permissions may be inherited down the class hierarchy; "weak" and "strong", positive and negative permissions as in <ref> [RBKW91] </ref>, may be used, or at the other extreme, each object may have its permissions specified explicitly. Permissions may be specified for owner, group, and world, as in UNIX or following some other model. The nature of the access control check is also left unspecified by the target model. <p> The users, the types of access, and the data items themselves must be aggregated in some manner in order to reduce the sheer number of authorizations to be granted and revoked. Hence the most sophisticated proposals for database security (e.g., <ref> [RBKW91, JMD93, SCFY94] </ref>) categorize users into roles, and organize roles into an inheritance hierarchy to minimize the number of explicit authorizations that must be granted. Similarly, operations on data items, and the items themselves, are organized into hierarchies so that authorizations can be inherited up and down the hierarchies.
Reference: [RSA93a] <author> RSA. </author> <title> Pkcs #6: Extended-certificate syntax standard. </title> <note> Technical Report An RSA Laboratories Technical Note Version 1.5, Revised November 1, </note> <institution> RSA Laboratories, </institution> <year> 1993. </year> <month> Have(rsa). </month>
Reference-contexts: See also PKCS#7 [RSA93b], a specification similar to X.509, and extensions to X.509 in PKCS #6 <ref> [RSA93a] </ref>. tightly controlled by a special authority (or hierarchy of authorities) which assigns a unique identifier to the individual. As in other proposals, anonymity and spontaneity depend on the identification and pre-registration requirements of this authority.
Reference: [RSA93b] <author> RSA. </author> <title> Pkcs #7: Cryptographic message syntax standard. </title> <note> Technical Report An RSA Laboratories Technical Note Version 1.5, Revised November 1, </note> <institution> RSA Laboratories, </institution> <year> 1993. </year> <month> Have(rsa). </month>
Reference-contexts: The issuing of pseudonyms is 17 Specifically, a distinguished name is formally a set of attribute-value pairs; the intended interpretation is that they specify a path to an individual in a directory information tree, but other interpretations are possible. See also PKCS#7 <ref> [RSA93b] </ref>, a specification similar to X.509, and extensions to X.509 in PKCS #6 [RSA93a]. tightly controlled by a special authority (or hierarchy of authorities) which assigns a unique identifier to the individual. As in other proposals, anonymity and spontaneity depend on the identification and pre-registration requirements of this authority.
Reference: [RSC92] <author> Joel Richardson, Peter Schwarz, and Luis-Felipe Cabrera. Cacl: </author> <title> Efficient fine-grained protection for objects. </title> <booktitle> In 1992 Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <year> 1992. </year> <month> 76 </month>
Reference-contexts: Thus lazy or eager checking, check once or check on every access|all will give the same result. Finally, the nature of any dynamic access control is left unspecified by the target model. For example, the target model permits delegation in the style of <ref> [RSC92] </ref>, where each executing method is a different principal with its own permissions. Our target model does not support: * Mandatory access controls. <p> While the check often approach may require significant extra processing for static access control models, it may be appropriate for some application models. For example, in the CACL <ref> [RSC92] </ref> dynamic access control model where the principal may change with every method invocation, frequent checking of permissions is necessary. The goal then is to do as 41 few checks as possible while still guaranteeing only authorized access.
Reference: [SCFY94] <author> Ravi S. Sandhu, Edward J. Coyne, Hal L. Feinstein, and Charles E. Youman. </author> <title> Role-based access control: A multi-dimensional view. </title> <booktitle> In Proceedings of the 10th Annual Computer Security Applications Conference, </booktitle> <pages> pages 54-62, </pages> <month> Decem-ber </month> <year> 1994. </year>
Reference-contexts: For example, based on a set of credentials a service provider might allow a user to access any file in a directory accessible by members of a specific group. More sophisticated access controls, such as role-based access controls <ref> [SCFY94] </ref>, allow database designers to describe the roles of users with respect to the data and the capabilities of specific roles within an application. Users prove their eligibility to adopt a role and and can then retrieve data accessible to that role. <p> While there is ongoing discussion about exactly what RBAC means, it is clear that RBAC will consolidate security in a unified service which can be managed while providing the flexibility and customizations required by individual applications <ref> [SCFY94] </ref>. Support for roles is available in commercial products [Cor92] and is being considered as part of the emerging SQL3 standard [PB93]. <p> The users, the types of access, and the data items themselves must be aggregated in some manner in order to reduce the sheer number of authorizations to be granted and revoked. Hence the most sophisticated proposals for database security (e.g., <ref> [RBKW91, JMD93, SCFY94] </ref>) categorize users into roles, and organize roles into an inheritance hierarchy to minimize the number of explicit authorizations that must be granted. Similarly, operations on data items, and the items themselves, are organized into hierarchies so that authorizations can be inherited up and down the hierarchies.
Reference: [SKW92] <author> Vivek Singhal, Sheetal Kakkad, and Paul Wilson. </author> <title> Texas: An efficient, portable persistent store. In Persistent Object Systems: </title> <booktitle> Proceedings of the Fifth International Workshop on Persistent Object Systems, </booktitle> <pages> pages 11-33, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: For both of these we have assumed that any client superusers are trusted and that the application language is safe. The prototypes are discussed in the following sections. 45 5 Adding Access Control to Texas Texas is a persistent object system <ref> [WK92, SKW92] </ref> which uses a version of the disk-image approach (Figure 7 in Section 3.5.1). Texas's persistent programming language is a variant of C++, adding persistent store operations and persistent allocation of objects. Unlike ObjectStore, Texas does not store OIDs in swizzled format for a canonical location.
Reference: [SNS88] <author> J. Steiner, C. Neuman, and J. Schiller. </author> <title> Kerberos: an authentication service for open networksystems. </title> <booktitle> In Proceedings of the Winter USENIX Conference, </booktitle> <year> 1988. </year>
Reference-contexts: A fixed set of credential types is used to encode such data; a similar design which is extensible with respect to the statements contained in credentials may be possible. 7.2.3 Kerberos Kerberos <ref> [SNS88] </ref> is an authentication system providing evidence of a principal's identity. In Kerberos tickets are used to securely pass the identity of an individual between the authentication server and a specific end server. They are encrypted to ensure they are verifiable, unforgeable, and confidential.
Reference: [Ste91] <author> Daniel F. Sterne. </author> <title> On the buzzword "security policy". </title> <booktitle> In 1991 IEEE Computer Society Symposium on Research in Security and Privacy, </booktitle> <year> 1991. </year>
Reference-contexts: Today, the security objectives for most networked computer systems include: * authentication, * authorization, * auditing, * confidentiality, * data integrity, * availability, and * non-repudiation. 2 It has been noted that the term security policy is imprecise <ref> [Ste91] </ref> and may refer to any or a combination policies with respect to confidentiality, availability, reliability, human safety, accuracy, and general functional correctness.
Reference: [Thu89] <author> M. B. Thuraisingham. </author> <title> Mandatory security in object-oriented database systems. </title> <booktitle> In 1989 Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <year> 1989. </year>
Reference-contexts: Their basic premise defines the object as the unit of authorization since objects are the unit of access (with support for different levels of granularity for performance and user convenience). While other recent work on authorization models for ODBs have been reported <ref> [JK90, KTT89, Lun89, ML92, Mor90, Thu89] </ref>, most of these are concerned with multilevel object models providing mandatory controls. are interesting??? 7.2 Distributed System Security A variety of existing mechanisms 16 provide some of the desiderata specified above.
Reference: [Tin88] <author> T. C. Ting. </author> <title> A user-role based data seucrity approach. </title> <editor> In C. E. Landwehr, editor, </editor> <booktitle> Database Security: Status and Prospects, </booktitle> <pages> pages 187-208. </pages> <publisher> North-Holland, </publisher> <year> 1988. </year>
Reference-contexts: Support for roles is available in commercial products [Cor92] and is being considered as part of the emerging SQL3 standard [PB93]. Proposals for roles in object-oriented systems <ref> [LW88, Tin88] </ref> and more recent descriptions of RBAC characteristics demonstrate the usefulness of roles for controlling access to large data repositories. 2.1.2 Authorization Mechanisms Protection mechanisms provide the means for controlling access to resources according to an organization's authorization policy.
Reference: [WABL94] <author> E. Wobber, M. Abadi, M. Burrows, and B. Lampson. </author> <title> Authentication in the taos operating system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(1) </volume> <pages> 3-32, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: for the secure transfer of capabilities between systems and would allow access control decisions to be made outside of the domain of the target object, thus requiring a more general means of referring to an object than its local address. 7.2.2 Taos The security mechanisms in the Taos operating system <ref> [WABL94, LABW92] </ref> provide facilities for sending and receiving messages over secure channels and for identifying the source of a request in support of an access control decision. In typical fashion, this decision is made by consulting an access control list once the requester has been identified.
Reference: [WK92] <author> Paul R. Wilson and Sheetal V. Kakkad. </author> <title> Pointer swizzling at page fault time: Efficiently and compatibly supporting huge address spaces on standard hardware. </title> <booktitle> In International Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pages 364-377, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: This identifier encodes a volume identifier, a page identifier within the volume, and a slot number which indirectly addresses a record within a page [BDK91]. Texas OIDs are 64-bit file offsets <ref> [WK92] </ref>. Objectivity/DB uses a physical page and offset OID. 20 3.2 Inter-object References Another architectural decision which impacts performance is the in-memory format of references between objects. In traditional databases the data is encapsulated by the query language. <p> For both of these we have assumed that any client superusers are trusted and that the application language is safe. The prototypes are discussed in the following sections. 45 5 Adding Access Control to Texas Texas is a persistent object system <ref> [WK92, SKW92] </ref> which uses a version of the disk-image approach (Figure 7 in Section 3.5.1). Texas's persistent programming language is a variant of C++, adding persistent store operations and persistent allocation of objects. Unlike ObjectStore, Texas does not store OIDs in swizzled format for a canonical location.
Reference: [X.588] <editor> CCITT Recommendation X.509. </editor> <booktitle> The Directory|Authentication framework, </booktitle> <month> November </month> <year> 1988. </year>
Reference-contexts: The potential for extensions to increase expressivity and extensibility also exists even though the current design is limited to identity. 61 7.2.4 X.509 Authentication Framework The certificates specified in CCITT X.509 <ref> [X.588] </ref> are a kind of identity credential, one which binds a name to a cryptographic key (a public key).
Reference: [YBA93] <author> Curtis Yarvin, Richard Bukowski, and Thomas Anderson. Anonymous rpc: </author> <title> Low latency protection in a 64-bit address space. </title> <booktitle> In Proceedings of the Summer USENIX Conference, </booktitle> <pages> pages 175-186, </pages> <month> June </month> <year> 1993. </year> <month> 77 </month>
Reference-contexts: In addition, it is fairly natural in an Intranet environment to trust superusers, where they do exist. Finally, current research in operating system protection <ref> [YBA93] </ref> addresses issues of anonymous data placement to make it more difficult to find specific data.
References-found: 64

