URL: http://renoir.csc.ncsu.edu/Faculty/Vouk/Papers/Telecom2.ps
Refering-URL: http://renoir.csc.ncsu.edu/Faculty/Vouk/vouk.se.html
Root-URL: http://www.csc.ncsu.edu
Title: ENGINEERING OF TELECOMMUNICATIONS SOFTWARE 1  
Author: Mladen A. Vouk 
Address: Box 8206  Raleigh, NC 27695-8206  
Affiliation: Department of Computer Science,  North Carolina State University  
Abstract-found: 0
Intro-found: 1
Reference: [Abd91] <author> T.K. Abdel-Hamid, and S.E. Madnick, </author> <title> Software Project Dynamics : An Integrated Approach, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1991. </year>
Reference-contexts: Many techniques for risk assessment and control rely on statistical methods and/or advocate prevention instead of reaction. For example, statistical decision theory [e.g. Boe81], software reliability engineering [e.g., Mus87, Put92], statistical software schedule models <ref> [e.g., Abd91, Bor91] </ref>, more advanced testing techniques including risk based testing [e.g., Ehr85, Bei90, How87, Gel88], advanced verification and validation procedures [IEE89], etc. The higher the software process maturity of an organization the more elements of TQM need to be incorporated into its process model.
Reference: [Bei90] <author> B. Beizer, </author> <title> Software Testing Techniques, </title> <publisher> Van Nostrand, </publisher> <address> Second Edition, </address> <year> 1990 </year> <month> 11 </month>
Reference-contexts: Many techniques for risk assessment and control rely on statistical methods and/or advocate prevention instead of reaction. For example, statistical decision theory [e.g. Boe81], software reliability engineering [e.g., Mus87, Put92], statistical software schedule models [e.g., Abd91, Bor91], more advanced testing techniques including risk based testing <ref> [e.g., Ehr85, Bei90, How87, Gel88] </ref>, advanced verification and validation procedures [IEE89], etc. The higher the software process maturity of an organization the more elements of TQM need to be incorporated into its process model.
Reference: [Boe81] <author> B.W. </author> <title> Boehm,Software Engineering Economics, </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year>
Reference: [Boe88] <author> B.W. Boehm, </author> <title> "A Spiral Model of Software Development and Enhancement," </title> <journal> IEEE Computer, </journal> <volume> Vol. 21(5), pp61-72, </volume> <year> 1988. </year>
Reference-contexts: i g n to- C o s t , D e s i g n to Development: A waterfall-type model is preceded by one or more phases of a model that emphasizes risk reduction of poorly understood requirements, architecture, technology uncertainties, potential performance or robustness shortfalls, etc. (e.g., Spiral Model <ref> [Boe88] </ref>) Design-to-cost or schedule is planned for, and the incremental development is emphasized, i.e., development is a series of increments of functional capabilities rather than a singleshot development. <p> SRM as a consolidated idea is relatively new [Boe89, Cha89, Boe91], although in parts it has been around for a long time and derives many elements from other branches of engineering [e.g., Fra88], and from specific software process methods <ref> [e.g.,Boe81, Boe88, Gil89] </ref>. In fact, successful software project managers have always been good risk managers. Need for SRM Table 3 lists some criteria that can be used to assess the importance of software to your project [after Cha89].
Reference: [Boe89] <editor> B.W. </editor> <publisher> Boehm,Software Risk Management , IEEE CS Press Tutorial, </publisher> <year> 1989. </year>
Reference-contexts: As a result, a software project that uses a process model that operates independently of risk considerations will run into serious difficulties when it encounters high-risk elements <ref> [Boe89, Boe91] </ref>. For example [Boe89], use of purely document-driven Waterfall-type models on user-intensive systems may be disastrous since major risks of a user-intensive system, such as lack of understanding of the implications of written specifications, may not be recognized. <p> As a result, a software project that uses a process model that operates independently of risk considerations will run into serious difficulties when it encounters high-risk elements [Boe89, Boe91]. For example <ref> [Boe89] </ref>, use of purely document-driven Waterfall-type models on user-intensive systems may be disastrous since major risks of a user-intensive system, such as lack of understanding of the implications of written specifications, may not be recognized. <p> Process generation is the process of selecting elements and composing a software process model appropriate for a particular project (or organization) <ref> [Boe89] </ref>. The initial step is to identify process objectives and constraints which then become process drivers (e.g., develop a product-engineered version of software in 18 months, use commercial-off-the-shelf, COTS, software whenever possible, etc.). <p> The model should be periodically reviewed and evaluated with respect to any changes in the process drivers. 7 Boehm has defined a set of critical process drivers and has provided a method of combining them through a process model decision table <ref> [Boe89] </ref>. To illustrate this consider Table 2. It shows the principal process drivers (after [Boe89]) and values that are likely to apply in the case of a medium to large high-performance telecommunications software project. The various alternative life-cycle models are described in [Boe89] (e.g., COTS, transform, evolutionary, prototyping, spiral, capabilities-to-requirements). <p> reviewed and evaluated with respect to any changes in the process drivers. 7 Boehm has defined a set of critical process drivers and has provided a method of combining them through a process model decision table <ref> [Boe89] </ref>. To illustrate this consider Table 2. It shows the principal process drivers (after [Boe89]) and values that are likely to apply in the case of a medium to large high-performance telecommunications software project. The various alternative life-cycle models are described in [Boe89] (e.g., COTS, transform, evolutionary, prototyping, spiral, capabilities-to-requirements). <p> combining them through a process model decision table <ref> [Boe89] </ref>. To illustrate this consider Table 2. It shows the principal process drivers (after [Boe89]) and values that are likely to apply in the case of a medium to large high-performance telecommunications software project. The various alternative life-cycle models are described in [Boe89] (e.g., COTS, transform, evolutionary, prototyping, spiral, capabilities-to-requirements). <p> The goal of software risk management is to identify, address, and eliminate software risk items before they become either threats to successful software operation, or major sources of software rework, schedule and cost overruns, and performance and quality degradation <ref> [Boe89] </ref>. Risk is defined as the possibility of loss or injury with an element of choice involved. Project outcome is unsatisfactory when it keeps a major participant in the software process from becoming a winner. <p> It is important that the software life-cycle model used in the project is appropriately chosen and that it is risk sensitive. Some of SRM techniques are "standard practice," many "best practice," some "best available," and a few state-of-the-art. SRM as a consolidated idea is relatively new <ref> [Boe89, Cha89, Boe91] </ref>, although in parts it has been around for a long time and derives many elements from other branches of engineering [e.g., Fra88], and from specific software process methods [e.g.,Boe81, Boe88, Gil89]. In fact, successful software project managers have always been good risk managers. <p> Software risk management consists of two broad categories of tasks <ref> [Boe89] </ref>: risk assessment and risk control. Risk assessment consists of risk identification, risk analysis, and r i s k prioritization. Risk control consists of risk management planning, risk resolution and risk monitoring. Many techniques are available for execution of these tasks. <p> It fights self-fulfilling prophecies, but it may not succeed every time. Above everything, it is not blame analysis and blame management tool, i.e. it must be conducted in a nonthreatening environment and with full active support at all management levels <ref> [Boe89] </ref>.
Reference: [Boe91] <author> B.W. Boehm, </author> <title> "Software Risk Management: </title> <booktitle> Principles and Practices", IEEE Software, </booktitle> <pages> pp 32-41, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: As a result, a software project that uses a process model that operates independently of risk considerations will run into serious difficulties when it encounters high-risk elements <ref> [Boe89, Boe91] </ref>. For example [Boe89], use of purely document-driven Waterfall-type models on user-intensive systems may be disastrous since major risks of a user-intensive system, such as lack of understanding of the implications of written specifications, may not be recognized. <p> If the manufacturer does not operate under a risk sensitive software process model it is very likely that serious software related problems will materialize since current approaches to software process, such as the Waterfall model, or the evolutionary or codedriven models, too easily allow high-risk commitments <ref> [Boe91] </ref>. The goal of software risk management is to identify, address, and eliminate software risk items before they become either threats to successful software operation, or major sources of software rework, schedule and cost overruns, and performance and quality degradation [Boe89]. <p> It is important that the software life-cycle model used in the project is appropriately chosen and that it is risk sensitive. Some of SRM techniques are "standard practice," many "best practice," some "best available," and a few state-of-the-art. SRM as a consolidated idea is relatively new <ref> [Boe89, Cha89, Boe91] </ref>, although in parts it has been around for a long time and derives many elements from other branches of engineering [e.g., Fra88], and from specific software process methods [e.g.,Boe81, Boe88, Gil89]. In fact, successful software project managers have always been good risk managers. <p> real question to ask is: Given the nature of high-performance telecommunications software can you afford not to do SRM? A Simple Software Risk Management Plan Following is a very simple and easy to implement software risk management plan that can provide considerable help in assessing and controlling your project risks <ref> [after Boe89, Boe91] </ref>. Of course, a full fledged risk management program would need many additional components. Identify the (sub)project's top 10 to 20 risks, the likelihood of their occurrence (e.g. certain, high, low, 90%, 10%), and the penalty (e.g., time, money, other losses).
Reference: [Bor91] <author> D. Borger and M.A. Vouk, </author> <title> "Modeling Behavior of Large Software Projects", </title> <type> Technical Report, </type> <institution> CCSP TR-91/19, NCSU, </institution> <year> 1991. </year>
Reference-contexts: Many techniques for risk assessment and control rely on statistical methods and/or advocate prevention instead of reaction. For example, statistical decision theory [e.g. Boe81], software reliability engineering [e.g., Mus87, Put92], statistical software schedule models <ref> [e.g., Abd91, Bor91] </ref>, more advanced testing techniques including risk based testing [e.g., Ehr85, Bei90, How87, Gel88], advanced verification and validation procedures [IEE89], etc. The higher the software process maturity of an organization the more elements of TQM need to be incorporated into its process model.
Reference: [Cha89] <author> R.N. Charette, </author> <title> Software Engineering Risk Analysis & Management , McGraw-Hill, </title> <year> 1989 </year>
Reference-contexts: SOFTWARE RISK MANAGEMENT (SRM) In the U.S. software production tends to be risk driven and opportunity constrained <ref> [Cha89] </ref>. This basically means that software changes are driven by user requests and in order to make a sale a U.S. software manufacturer is tempted to promise a functionality for which there are no readily available "parts" (or solutions, or even knowledge), instead they have to be developed. <p> It is important that the software life-cycle model used in the project is appropriately chosen and that it is risk sensitive. Some of SRM techniques are "standard practice," many "best practice," some "best available," and a few state-of-the-art. SRM as a consolidated idea is relatively new <ref> [Boe89, Cha89, Boe91] </ref>, although in parts it has been around for a long time and derives many elements from other branches of engineering [e.g., Fra88], and from specific software process methods [e.g.,Boe81, Boe88, Gil89]. In fact, successful software project managers have always been good risk managers. <p> Hence, risk assessment and control must be applied formally. If software risk assessment and control are not performed, then this decision must be viewed as a major project risk in itself. Table 3. Importance of software in telecommunications systems (criteria are after <ref> [Cha89] </ref>) Criterion Medium to Large Telecommunications Systems Are significant amounts of software being developed for the system? Yes Do software costs dominate the total system development costs? Probably Yes Will software contribute greatly to the operational and/or support costs of the system? Probably Yes Is software essential for the successful performance
Reference: [Cop92] <author> A. Coppola, </author> <title> "Total Quality Management (TQM)", </title> <booktitle> Annual Reliability and Maintainability Symposium, Tutorial Notes, The International Forum for Assurance Technologies, </booktitle> <pages> ISSN 0897-5000, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: RELATIONSHIP WITH TOTAL QUALITY MANAGEMENT (TQM) TQM principles include customer satisfaction, quality culture, improvement of processes, education and training (job skills and TQM tools), defect prevention instead of reactive elimination of problems, use of data and statistical tools, team approach (both intra-and interdepartmental, and hierarchical), and commitment to continuous improvement <ref> [Cop92] </ref>. By its nature SRM is an integral part of TQM because SRM activities, tasks and techniques are part of TQM. Many techniques for risk assessment and control rely on statistical methods and/or advocate prevention instead of reaction. For example, statistical decision theory [e.g.
Reference: [Cur89] <author> B. Curtis, </author> <title> "Three Problems Overcome with Behavioral Models of the Software Development Process," </title> <booktitle> Proc. 11 th Int. Conf. on Software Engineering, </booktitle> <pages> pp 398-399, </pages> <year> 1989. </year>
Reference-contexts: To add discipline to the process of software engineering the process must first be defined. Ideally, we would like to have a perfect process model for every project and subproject. However, there are often concurrent and competing viewpoints about the processes actually governing software production <ref> [Cur89] </ref>. Figure 1 illustrates the relationship for a three-level hierarchy. There is a sequential, market-driven, commercial world view often appropriate for a business milieu and an organization as a whole.
Reference: [Ehr85] <author> W. Ehrenberger, </author> <title> "Statistical Testing of Real Time Software," in Verification and Validation of Real-Ti,me Software, </title> <editor> ed. W.J. Quirk, </editor> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Many techniques for risk assessment and control rely on statistical methods and/or advocate prevention instead of reaction. For example, statistical decision theory [e.g. Boe81], software reliability engineering [e.g., Mus87, Put92], statistical software schedule models [e.g., Abd91, Bor91], more advanced testing techniques including risk based testing <ref> [e.g., Ehr85, Bei90, How87, Gel88] </ref>, advanced verification and validation procedures [IEE89], etc. The higher the software process maturity of an organization the more elements of TQM need to be incorporated into its process model.
Reference: [Elm64] <author> S.E. Elmaghraby, </author> <title> "An algebra for the analysis of generalized activity networks," </title> <journal> Management Sci. </journal> <volume> 10, </volume> <pages> 494-514, </pages> <year> 1964. </year>
Reference-contexts: It is the experience of this author that generalized activity networks can be an excellent tool for detailed description and evaluation, as well as subsequent modification and tuning of a software process <ref> [e.g., Elm64, 78, 89] </ref>. SOFTWARE RISK MANAGEMENT (SRM) In the U.S. software production tends to be risk driven and opportunity constrained [Cha89].
Reference: [Elm78] <author> S.E. Elmaghraby, </author> <title> Activity Networks: Project Planning and Control by Network Models, </title> <publisher> Wiley-Interscience, </publisher> <year> 1978. </year>
Reference: [Elm89] <author> S.E. Elmaghraby and J. Kamburowski, </author> <title> "The analysis of activity networks under generalized precedence relations; Parts I & II," OR Reports No.231,232, </title> <institution> Graduate Program in Operations Research, North Carolina State University, </institution> <address> Raleigh NC, 27695-7913, </address> <year> 1989. </year>
Reference: [Fair85] <author> R. Fairley, </author> <year> 1985, </year> <title> Software Engineering Concepts, </title> <publisher> McGraw-Hill. </publisher>
Reference: [Fra88] <author> E.G. </author> <title> Frankel,Systems Reliability and Risk Analysis, Second Revised Edition, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1988. </year>
Reference-contexts: Some of SRM techniques are "standard practice," many "best practice," some "best available," and a few state-of-the-art. SRM as a consolidated idea is relatively new [Boe89, Cha89, Boe91], although in parts it has been around for a long time and derives many elements from other branches of engineering <ref> [e.g., Fra88] </ref>, and from specific software process methods [e.g.,Boe81, Boe88, Gil89]. In fact, successful software project managers have always been good risk managers. Need for SRM Table 3 lists some criteria that can be used to assess the importance of software to your project [after Cha89].
Reference: [Gel88] <author> D. Gelperin and B. Hetzl, </author> <title> "The Growth of Software Testing," </title> <journal> Communications of the ACM, </journal> <volume> Vol. 31(6), </volume> <pages> 687-695, </pages> <year> 1988. </year>
Reference-contexts: Many techniques for risk assessment and control rely on statistical methods and/or advocate prevention instead of reaction. For example, statistical decision theory [e.g. Boe81], software reliability engineering [e.g., Mus87, Put92], statistical software schedule models [e.g., Abd91, Bor91], more advanced testing techniques including risk based testing <ref> [e.g., Ehr85, Bei90, How87, Gel88] </ref>, advanced verification and validation procedures [IEE89], etc. The higher the software process maturity of an organization the more elements of TQM need to be incorporated into its process model.
Reference: [Gil88] <author> T. </author> <title> Gilb, </title> <booktitle> Principles of Software Engineering Management, </booktitle> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1988. </year>
Reference: [How87] <author> W.E. Howden, </author> <title> Functional Program Testing and Analysis, </title> <publisher> McGraw-Hill, </publisher> <year> 1987 </year>
Reference-contexts: Many techniques for risk assessment and control rely on statistical methods and/or advocate prevention instead of reaction. For example, statistical decision theory [e.g. Boe81], software reliability engineering [e.g., Mus87, Put92], statistical software schedule models [e.g., Abd91, Bor91], more advanced testing techniques including risk based testing <ref> [e.g., Ehr85, Bei90, How87, Gel88] </ref>, advanced verification and validation procedures [IEE89], etc. The higher the software process maturity of an organization the more elements of TQM need to be incorporated into its process model.
Reference: [Hum87] <author> W.S. Humphrey, W.L. Sweet, R.K. Edqards, G.R. LaCroix, M.F. Owens, </author> <title> H.P. Schultz, "A Method for Assessing the Software Engineering Capabilities of Contractors," </title> <journal> Software Engineering Institute, </journal> <note> Technical Report CMU/SEI-87-TR-23, 1987; also reprinted in [Boe89]. </note>
Reference-contexts: An effective software process must consider the relationships of the required tasks, the tools and methods, and the skills, training, and motivation of the people involved" [Hum89]. In particular, organizations that fall into the class of "Initial" maturity, or Level 1, organizations may have serious cost and schedule problems <ref> [Hum87] </ref>. Proactive quality control is unlikely 3 before the fourth, or "Managed", level is reached. Even mature level organizations can run into trouble if they operate a project under an inappropriate software process model. <p> Maturity A software process and technology maturity model and (self-)assessment procedures have been developed by Humphrey et al. <ref> [Hum87, Hum89a,b] </ref>. <p> Table 1 Overview of software maturity levels (after <ref> [Hum87, Hum89a] </ref>). Lev el Description Problem Areas 1: Initial Poorly defined procedures and controls and ad hoc process. The organization operates without formalized procedures, cost estimates, and project plans. Even when plans and controls exist there are no management mechanisms to ensure they are followed. <p> In the other stage the organization primarily employs basic but modern, effective and technologically appropriate methods and tools. Such an organization will probably be effective, and depending on the maturity of its process, reasonably consistent in its performance <ref> [Hum87] </ref>.
Reference: [Hum89a] <author> W.S. Humphrey, D.H. Kitson, </author> <title> T.C. Kasse, The State of Software Engineering Practice: A Preliminary Report", </title> <booktitle> Proc 11th Int. Conf. Soft. </booktitle> <address> Eng., </address> <publisher> IEEE CS Press, </publisher> <pages> pp 277-288, </pages> <year> 1989. </year>
Reference-contexts: Table 1 Overview of software maturity levels (after <ref> [Hum87, Hum89a] </ref>). Lev el Description Problem Areas 1: Initial Poorly defined procedures and controls and ad hoc process. The organization operates without formalized procedures, cost estimates, and project plans. Even when plans and controls exist there are no management mechanisms to ensure they are followed. <p> The higher the level of maturity the higher are the expected returns in productivity and quality, and the lower are the risks facing a project. A number of U.S. organizations have gone through the assessment procedure and some of that data was published <ref> [Hum89a, Hump91] </ref>. A relatively small fraction of the reported organizations is at Level 2 or above. None were reported at Levels 4 or 5. However, it is likely that there are subunits of U.S. organizations that are at least at Level 4.
Reference: [Hum89b] <author> W.S. Humphrey, </author> <title> Managing the Software Process, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year>
Reference: [IEE89] <institution> IEEE Software Engineering Standards, </institution> <address> Third Edition, </address> <publisher> IEEE, </publisher> <year> 1989. </year>
Reference-contexts: For example, statistical decision theory [e.g. Boe81], software reliability engineering [e.g., Mus87, Put92], statistical software schedule models [e.g., Abd91, Bor91], more advanced testing techniques including risk based testing [e.g., Ehr85, Bei90, How87, Gel88], advanced verification and validation procedures <ref> [IEE89] </ref>, etc. The higher the software process maturity of an organization the more elements of TQM need to be incorporated into its process model. For instance, collection and analyses of data on process, product and personnel productivity and quality are essential for TQM. The same is true of SRM.
Reference: [Mus87] <author> J.D. Musa, A. Iannino and K. </author> <title> Okumoto,Software Reliability (Measurement, Prediction, Application), </title> <publisher> McGraw-Hill 1987 </publisher>
Reference-contexts: By its nature SRM is an integral part of TQM because SRM activities, tasks and techniques are part of TQM. Many techniques for risk assessment and control rely on statistical methods and/or advocate prevention instead of reaction. For example, statistical decision theory [e.g. Boe81], software reliability engineering <ref> [e.g., Mus87, Put92] </ref>, statistical software schedule models [e.g., Abd91, Bor91], more advanced testing techniques including risk based testing [e.g., Ehr85, Bei90, How87, Gel88], advanced verification and validation procedures [IEE89], etc.
Reference: [Put92] <author> L.H. Putnam and W. Myers, </author> <title> Measures for Excellence Reliable Software on Time, within Budget, </title> <publisher> Yourdon Press, Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1992. </year>
Reference-contexts: By its nature SRM is an integral part of TQM because SRM activities, tasks and techniques are part of TQM. Many techniques for risk assessment and control rely on statistical methods and/or advocate prevention instead of reaction. For example, statistical decision theory [e.g. Boe81], software reliability engineering <ref> [e.g., Mus87, Put92] </ref>, statistical software schedule models [e.g., Abd91, Bor91], more advanced testing techniques including risk based testing [e.g., Ehr85, Bei90, How87, Gel88], advanced verification and validation procedures [IEE89], etc.
Reference: [Wat91] <author> G.F. Watson, </author> <title> "Service Disrupted in Cities: Bell Companies, Manufacturers Join to Cure Phone Outages," </title> <booktitle> The Institute, </booktitle> <publisher> IEEE Press, p1 and p7, </publisher> <month> September </month> <year> 1991. </year>
Reference-contexts: Since software is a growing part of most telecommunications systems, software related failures are of particular concern. A more recent example of a widely publicized telecommunications "disaster" rooted in a software fault is the 1991 signal transfer point problem that caused long telephone outages in major U.S. cities <ref> [e.g., Wat91] </ref>. Unfortunately, it would appear that in this case the fault was caused, at least in part, by poor software engineering practices.
References-found: 26

