URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/axioms_for_real-time_logics.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/axioms_for_real-time_logics.html
Root-URL: http://www.cs.berkeley.edu
Phone: 2  
Title: Axioms for Real-Time Logics  
Author: J.-F. Raskin P.-Y. Schobbens and T.A. Henzinger 
Address: Namur, Belgium  Berkeley  
Affiliation: 1 Computer Science Institute, University of  Electrical Engineering and Computer Sciences, University of California,  
Abstract: This paper presents a complete axiomatization of fully decidable propositional real-time linear temporal logics with past: the Event Clock Logic (ECL) and the Metric Interval Temporal Logic with past (MITL). The completeness proof consists of an effective proof building procedure for ECL. From this result we obtain a complete axiomatization of MITL by providing axioms translating MITL formulae into ECL formulae, the two logics being equally expressive. Our proof is structured to yield a similar axiomatization and procedure for interesting fragments of these logics, such as the linear temporal logic of the real numbers (LTR).
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M. Abadi and L. Lamport. </author> <title> The existence of refinement mappings. </title> <journal> Theoretical Computer Science, </journal> <volume> 82(2) </volume> <pages> 253-284, </pages> <year> 1991. </year>
Reference-contexts: This dense domain is natural and gives many advantages detailed elsewhere: compositionality [7], full abstractness [7], stuttering independence <ref> [1] </ref>, easy refinement. To avoid Zeno's paradox, we add to our models the condition of finite variability [7] (condition (3) below): only finitely many state changes can occur in a finite amount of time. An interval I R + is a convex non-empty subset of the nonnegative reals.
Reference: 2. <author> R. Alur, C. Courcoubetis, and D.L. Dill. </author> <title> Model checking in dense real time. </title> <journal> Information and Computation, </journal> <volume> 104(1) </volume> <pages> 2-34, </pages> <year> 1993. </year>
Reference-contexts: I ; U now understood as shorthands. 16 6 Conclusion The specification of real-time systems using dense time is more natural, and has many semantical advantages, but requires our discrete-time techniques [8, 14] to be generalised. The model-checking and decision techniques have been generalised in <ref> [2, 3] </ref>. This paper provides complete axiom systems and proof-building procedures for linear real time, extending the technique of [15]. This procedure can be used to automate the proof construction of propositional fragments of a larger proof.
Reference: 3. <author> R. Alur, T. Feder, and T.A. Henzinger. </author> <title> The benefits of relaxing punctuality. </title> <journal> Journal of the ACM, </journal> <volume> 43(1) </volume> <pages> 116-146, </pages> <year> 1996. </year>
Reference-contexts: We study logics with time bounded operators because those logics are the only ones that have a decidable satisfiability problem. Note however that the propositional fragment of the time-bounded operator logics, called MTL R +, is undecidable and furthermore not recursively axiomatisable. It becomes decidable with certain restrictions (MITL <ref> [3] </ref>), allowing programs verification using automata-based techniques. However, when the specification is large or when it contains first-order parts, a mixture of automatic and manual proof generation is more suitable. Unfortunately, the current automatic reasoning techniques (based on timed automata) do not provide explicit proofs. <p> We provide a complete axiom system for decidable real-time logics, and a proof-building procedure. We build the axiom system by considering increasingly complex logics: LTR [7], ECL with past clocks only, ECL with past and future clocks (also called SCL [18]), MITL <ref> [3] </ref> with past and future operators, also called MITL P [5]. Previous works on axiomatization of real-time logics have concentrated on models where time is modeled by the natural numbers. For that case, [11] gives a complete axiomatisation. <p> Theorem 1. [18] The satisfiability problem for ECL is complete for Pspace. 2.4 Metric-Interval Temporal Logic The formulae of MITL <ref> [3] </ref> are built from propositional symbols, boolean connec-tives, and the time-bounded "until" and "since" operators: ::= p j 1 ^ 2 j : j 1 ^ U I 2 j 1 ^ S I 2 where p is a proposition and I is a nonsingular interval. <p> This is weaker than the ECL example, since p might also hold in between. Theorem 2. <ref> [3] </ref> The satisfiability problem for MITL is complete for Expspace. 2.5 Abbreviations In the sequel, besides the usual propositional connectives, we use the following abbreviations: - 1 ^ U 2 1 ^ U (0;1) 2 , the untimed "Until" of MITL. 1 - 1 U + 2 1 ^ 1 U <p> The known procedures <ref> [3] </ref> for deciding MITL use a similar construction, first building a timed automaton and then its region automaton. We could not use this construction directly here, because it involves features of automata that have no counterpart in the logic, and thus could not be expressed by axioms. <p> I ; U now understood as shorthands. 16 6 Conclusion The specification of real-time systems using dense time is more natural, and has many semantical advantages, but requires our discrete-time techniques [8, 14] to be generalised. The model-checking and decision techniques have been generalised in <ref> [2, 3] </ref>. This paper provides complete axiom systems and proof-building procedures for linear real time, extending the technique of [15]. This procedure can be used to automate the proof construction of propositional fragments of a larger proof.
Reference: 4. <author> R. Alur and T.A. Henzinger. </author> <title> A really temporal logic. </title> <booktitle> In Proceedings of the 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 164-169. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1989. </year> <month> 17 </month>
Reference-contexts: To this end, real-time temporal logics [6] have been proposed as the basis of specification languages. They use real numbers for time, which has advantages for specification and compositionality. Several syntaxes are possible to deal with real time: freeze quantification <ref> [4, 11] </ref>, explicit clocks in a first-order temporal logic [17, 9] and time-bounded operators [13]. We study logics with time bounded operators because those logics are the only ones that have a decidable satisfiability problem.
Reference: 5. <author> R. Alur and T.A. Henzinger. </author> <title> Back to the future: towards a theory of timed reg-ular languages. </title> <booktitle> In Proceedings of the 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 177-186. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: We build the axiom system by considering increasingly complex logics: LTR [7], ECL with past clocks only, ECL with past and future clocks (also called SCL [18]), MITL [3] with past and future operators, also called MITL P <ref> [5] </ref>. Previous works on axiomatization of real-time logics have concentrated on models where time is modeled by the natural numbers. For that case, [11] gives a complete axiomatisation.
Reference: 6. <author> R. Alur and T.A. Henzinger. </author> <title> Logics and models of real time: a survey. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 74-106. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction Many real-time systems are critical, and therefore deserve to be specified with mathematical precision. To this end, real-time temporal logics <ref> [6] </ref> have been proposed as the basis of specification languages. They use real numbers for time, which has advantages for specification and compositionality. Several syntaxes are possible to deal with real time: freeze quantification [4, 11], explicit clocks in a first-order temporal logic [17, 9] and time-bounded operators [13]. <p> This is why the axiomatization of these logics is cited as an important open question in <ref> [6, 13] </ref>. We provide a complete axiom system for decidable real-time logics, and a proof-building procedure.
Reference: 7. <author> H. Barringer, R. Kuiper, and A. Pnueli. </author> <title> A really abstract concurrent model and its temporal logic. </title> <booktitle> In Proceedings of the 13th Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 173-183. </pages> <publisher> ACM Press, </publisher> <year> 1986. </year>
Reference-contexts: This is why the axiomatization of these logics is cited as an important open question in [6, 13]. We provide a complete axiom system for decidable real-time logics, and a proof-building procedure. We build the axiom system by considering increasingly complex logics: LTR <ref> [7] </ref>, ECL with past clocks only, ECL with past and future clocks (also called SCL [18]), MITL [3] with past and future operators, also called MITL P [5]. Previous works on axiomatization of real-time logics have concentrated on models where time is modeled by the natural numbers. <p> This dense domain is natural and gives many advantages detailed elsewhere: compositionality <ref> [7] </ref>, full abstractness [7], stuttering independence [1], easy refinement. To avoid Zeno's paradox, we add to our models the condition of finite variability [7] (condition (3) below): only finitely many state changes can occur in a finite amount of time. <p> This dense domain is natural and gives many advantages detailed elsewhere: compositionality <ref> [7] </ref>, full abstractness [7], stuttering independence [1], easy refinement. To avoid Zeno's paradox, we add to our models the condition of finite variability [7] (condition (3) below): only finitely many state changes can occur in a finite amount of time. <p> This dense domain is natural and gives many advantages detailed elsewhere: compositionality <ref> [7] </ref>, full abstractness [7], stuttering independence [1], easy refinement. To avoid Zeno's paradox, we add to our models the condition of finite variability [7] (condition (3) below): only finitely many state changes can occur in a finite amount of time. An interval I R + is a convex non-empty subset of the nonnegative reals. <p> Remark 1. It is easy to check that the proof of completeness of Subsection 4 only uses the axioms above for a formula without real-time; therefore they form a complete axiomatization of the logic of the reals with finite variability, defined as LTR in <ref> [7] </ref>. The reader should note that axiom F5 of [7] is unsound; axiom F7 can be deduced from axiom F8; and the system of [7] cannot derive the induction axiom (JI). <p> is easy to check that the proof of completeness of Subsection 4 only uses the axioms above for a formula without real-time; therefore they form a complete axiomatization of the logic of the reals with finite variability, defined as LTR in <ref> [7] </ref>. The reader should note that axiom F5 of [7] is unsound; axiom F7 can be deduced from axiom F8; and the system of [7] cannot derive the induction axiom (JI). To see this last point, take the structure formed by R + followed by R, with finite variability: it satisfies the system of [7] but not the induction axiom <p> axioms above for a formula without real-time; therefore they form a complete axiomatization of the logic of the reals with finite variability, defined as LTR in <ref> [7] </ref>. The reader should note that axiom F5 of [7] is unsound; axiom F7 can be deduced from axiom F8; and the system of [7] cannot derive the induction axiom (JI). To see this last point, take the structure formed by R + followed by R, with finite variability: it satisfies the system of [7] but not the induction axiom (JI). <p> note that axiom F5 of <ref> [7] </ref> is unsound; axiom F7 can be deduced from axiom F8; and the system of [7] cannot derive the induction axiom (JI). To see this last point, take the structure formed by R + followed by R, with finite variability: it satisfies the system of [7] but not the induction axiom (JI).
Reference: 8. <author> E.M. Clarke, </author> <title> E.A. Emerson, and A.P. Sistla. Automatic verification of finite-state concurrent systems using temporal-logic specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <year> 1986. </year>
Reference-contexts: Thus the axioms (RE)- (SHP) and (0)-(FCC) form a complete axiomatization of MITL, with . I ; U now understood as shorthands. 16 6 Conclusion The specification of real-time systems using dense time is more natural, and has many semantical advantages, but requires our discrete-time techniques <ref> [8, 14] </ref> to be generalised. The model-checking and decision techniques have been generalised in [2, 3]. This paper provides complete axiom systems and proof-building procedures for linear real time, extending the technique of [15].
Reference: 9. <author> E. Harel, O. Lichtenstein, and A. Pnueli. </author> <title> Explicit-clock temporal logic. </title> <booktitle> In Proceedings of the Fifth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 402-413. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: To this end, real-time temporal logics [6] have been proposed as the basis of specification languages. They use real numbers for time, which has advantages for specification and compositionality. Several syntaxes are possible to deal with real time: freeze quantification [4, 11], explicit clocks in a first-order temporal logic <ref> [17, 9] </ref> and time-bounded operators [13]. We study logics with time bounded operators because those logics are the only ones that have a decidable satisfiability problem. Note however that the propositional fragment of the time-bounded operator logics, called MTL R +, is undecidable and furthermore not recursively axiomatisable.
Reference: 10. <author> T. Henzinger, J.-F. Raskin, and P.-Y. Schobbens. </author> <title> The regular real-time languages. </title> <editor> In Kim G. Larsen, editor, </editor> <booktitle> ICALP 98: Automata, Languages, and Programming, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1998. </year>
Reference-contexts: It is immediate to add acceptance conditions to eliminate them and obtain a more classical automaton. But it is less obvious to design a class of automata that is as expressive as the logic: this is done in <ref> [10] </ref>. 5 Translating ECL and MITL The logics have been designed from a different philosophical standpoint: MITL restricts the undecidable logic MTL by "relaxing punctuality", i.e., forbidding to look at exact time values; ECL, in contrast, forbids to look past the next event in the future. <p> However, we have shown in <ref> [10] </ref> that, surprisingly, they have the same expressive power. The power given by nesting connectives allows to each logic to do some of its forbidden work.
Reference: 11. <author> T.A. Henzinger. </author> <title> Half-order modal logic: how to prove real-time properties. </title> <booktitle> In Proceedings of the Ninth Annual Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 281-296. </pages> <publisher> ACM Press, </publisher> <year> 1990. </year>
Reference-contexts: To this end, real-time temporal logics [6] have been proposed as the basis of specification languages. They use real numbers for time, which has advantages for specification and compositionality. Several syntaxes are possible to deal with real time: freeze quantification <ref> [4, 11] </ref>, explicit clocks in a first-order temporal logic [17, 9] and time-bounded operators [13]. We study logics with time bounded operators because those logics are the only ones that have a decidable satisfiability problem. <p> Previous works on axiomatization of real-time logics have concentrated on models where time is modeled by the natural numbers. For that case, <ref> [11] </ref> gives a complete axiomatisation. When time is modeled by the real-time numbers, only "intuitive" axioms were proposed, e.g. in [13], without taking into account completeness issues. 2 Models and Logics for Real Time 2.1 Models As time domain, we choose the nonnegative reals R + .
Reference: 12. <author> Yonit Kesten and Amir Pnueli. </author> <title> A complete proof systems for QPTL. </title> <booktitle> In Proceedings, Tenth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 2-12, </pages> <address> San Diego, California, 26-29 June 1995. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: NSF grant CCR-9504469, by the DARPA/NASA grant NAG2-1214, by the ARO MURI grant DAAH-04-96-1-0341, by the SRC contract 97-DC-324.041, the Belgian National Fund for Scientific Research (FNRS), the European Commission under WGs Aspire and Fireworks, the Portuguese FCT, and by Belgacom. that are not completely axiomatisable, in the style of <ref> [16, 12] </ref>. This is why the axiomatization of these logics is cited as an important open question in [6, 13]. We provide a complete axiom system for decidable real-time logics, and a proof-building procedure. <p> state sequence t can be viewed as a function from R + to 2 P , indicating for each time t 2 R + a state t (t) = s i where t 2 I i . 2.2 The Linear Temporal Logic of Real Numbers (LTR) The formulae of LTR <ref> [12] </ref> are built from propositional symbols, boolean con-nectives, the temporal "until" and "since" and are generated by the following grammar: ::= p j 1 ^ 2 j : j 1 U 2 j 1 S 2 where p is a proposition.
Reference: 13. <author> Ron Koymans. </author> <title> Specifying message passing and time-critical systems with temporal logic. </title> <publisher> LNCS 651, Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: They use real numbers for time, which has advantages for specification and compositionality. Several syntaxes are possible to deal with real time: freeze quantification [4, 11], explicit clocks in a first-order temporal logic [17, 9] and time-bounded operators <ref> [13] </ref>. We study logics with time bounded operators because those logics are the only ones that have a decidable satisfiability problem. Note however that the propositional fragment of the time-bounded operator logics, called MTL R +, is undecidable and furthermore not recursively axiomatisable. <p> This is why the axiomatization of these logics is cited as an important open question in <ref> [6, 13] </ref>. We provide a complete axiom system for decidable real-time logics, and a proof-building procedure. <p> Previous works on axiomatization of real-time logics have concentrated on models where time is modeled by the natural numbers. For that case, [11] gives a complete axiomatisation. When time is modeled by the real-time numbers, only "intuitive" axioms were proposed, e.g. in <ref> [13] </ref>, without taking into account completeness issues. 2 Models and Logics for Real Time 2.1 Models As time domain, we choose the nonnegative reals R + . This dense domain is natural and gives many advantages detailed elsewhere: compositionality [7], full abstractness [7], stuttering independence [1], easy refinement.
Reference: 14. <author> O. Lichtenstein and A. Pnueli. </author> <title> Checking that finite-state concurrent programs satisfy their linear specification. </title> <booktitle> In Proceedings of the 12th Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 97-107. </pages> <publisher> ACM Press, </publisher> <year> 1985. </year>
Reference-contexts: Thus the axioms (RE)- (SHP) and (0)-(FCC) form a complete axiomatization of MITL, with . I ; U now understood as shorthands. 16 6 Conclusion The specification of real-time systems using dense time is more natural, and has many semantical advantages, but requires our discrete-time techniques <ref> [8, 14] </ref> to be generalised. The model-checking and decision techniques have been generalised in [2, 3]. This paper provides complete axiom systems and proof-building procedures for linear real time, extending the technique of [15].
Reference: 15. <author> O. Lichtenstein, A. Pnueli, and L.D. Zuck. </author> <title> The glory of the past. </title> <editor> In R. Parikh, editor, </editor> <booktitle> Logics of Programs, Lecture Notes in Computer Science 193, </booktitle> <pages> pages 196-218. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Our proof is divided in steps, that prove the completeness for increasing fragments of ECL. 1. We first deal with the qualitative part, without real-time. This part of the proof follows roughly the completeness proof of <ref> [15] </ref> for discrete-time logic: (a) We work with worlds that are built syntactically, by maximal consistent sets of formulae. 7 (b) We identify the transition relation, and its syntactic counterpart: it was the "next" operator for discrete-time logic [15], here it is the e , expressing the transition from a closed <p> This part of the proof follows roughly the completeness proof of <ref> [15] </ref> for discrete-time logic: (a) We work with worlds that are built syntactically, by maximal consistent sets of formulae. 7 (b) We identify the transition relation, and its syntactic counterpart: it was the "next" operator for discrete-time logic [15], here it is the e , expressing the transition from a closed to an open interval, and , expressing the transition from an open to a closed interval. (c) We impose axioms describing the possible transitions for each operator. (d) We give an induction principle (JI) that extends the properties <p> The model-checking and decision techniques have been generalised in [2, 3]. This paper provides complete axiom systems and proof-building procedures for linear real time, extending the technique of <ref> [15] </ref>. This procedure can be used to automate the proof construction of propositional fragments of a larger proof.
Reference: 16. <author> Z. Manna and A. Pnueli. </author> <title> Completing the temporal picture. </title> <editor> In G. Ausiello, M. Dezani-Ciancaglini, and S. Ronchi Della Rocca, editors, </editor> <booktitle> ICALP 89: Automata, Languages, and Programming, Lecture Notes in Computer Science 372, </booktitle> <pages> pages 534-558. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: NSF grant CCR-9504469, by the DARPA/NASA grant NAG2-1214, by the ARO MURI grant DAAH-04-96-1-0341, by the SRC contract 97-DC-324.041, the Belgian National Fund for Scientific Research (FNRS), the European Commission under WGs Aspire and Fireworks, the Portuguese FCT, and by Belgacom. that are not completely axiomatisable, in the style of <ref> [16, 12] </ref>. This is why the axiomatization of these logics is cited as an important open question in [6, 13]. We provide a complete axiom system for decidable real-time logics, and a proof-building procedure.
Reference: 17. <author> J.S. Ostroff. </author> <title> Temporal Logic of Real-time Systems. </title> <publisher> Research Studies Press, </publisher> <year> 1990. </year>
Reference-contexts: To this end, real-time temporal logics [6] have been proposed as the basis of specification languages. They use real numbers for time, which has advantages for specification and compositionality. Several syntaxes are possible to deal with real time: freeze quantification [4, 11], explicit clocks in a first-order temporal logic <ref> [17, 9] </ref> and time-bounded operators [13]. We study logics with time bounded operators because those logics are the only ones that have a decidable satisfiability problem. Note however that the propositional fragment of the time-bounded operator logics, called MTL R +, is undecidable and furthermore not recursively axiomatisable.
Reference: 18. <author> J.-F. Raskin and P.-Y. Schobbens. </author> <title> State clock logic: a decidable real-time logic. </title> <editor> In O. Maler, editor, </editor> <title> HART 97: Hybrid and Real-time Systems, </title> <booktitle> Lecture Notes in Computer Science 1201, </booktitle> <pages> pages 33-47. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: We provide a complete axiom system for decidable real-time logics, and a proof-building procedure. We build the axiom system by considering increasingly complex logics: LTR [7], ECL with past clocks only, ECL with past and future clocks (also called SCL <ref> [18] </ref>), MITL [3] with past and future operators, also called MITL P [5]. Previous works on axiomatization of real-time logics have concentrated on models where time is modeled by the natural numbers. For that case, [11] gives a complete axiomatisation. <p> Our operators U ; S are slightly non-classical, but more intuitive: they do not require 2 to start in a left-closed interval. 2.3 Event-Clock Temporal Logic The formulae of ECL <ref> [18] </ref> are built from propositional symbols, boolean connec-tives, the temporal "until" and "since" operators, and two real-time operators: at any time t, the history operator / I asserts that was true last in the interval t I, and the prophecy operator . <p> The main part of our axiomatisation consists in describing the behavior and the relation of such clocks over time. For a more formal account on the relation between ECL formulae and clocks, we refer the interested reader to <ref> [18] </ref>. 3 Example 1. fl (p ! . =5 p) asserts that after every p state, the first subsequent p state is exactly 5 units later (so in the interval t+(0,5), p is false); the formula fl (/ =5 p ! q) asserts that whenever the last p state is exactly <p> Theorem 1. <ref> [18] </ref> The satisfiability problem for ECL is complete for Pspace. 2.4 Metric-Interval Temporal Logic The formulae of MITL [3] are built from propositional symbols, boolean connec-tives, and the time-bounded "until" and "since" operators: ::= p j 1 ^ 2 j : j 1 ^ U I 2 j 1 ^ S
Reference: 19. <author> P. Wolper. </author> <title> Synthesis of Communicating Processes from Temporal-Logic Specifications. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1982. </year> <month> 18 </month>
Reference-contexts: Fragments with a complete proof-building procedure are our main interest. The development of programs from specifications should be supported: the automaton produced by the proposed technique might be helpful as a pro gram skeleton <ref> [19] </ref>.
References-found: 19

