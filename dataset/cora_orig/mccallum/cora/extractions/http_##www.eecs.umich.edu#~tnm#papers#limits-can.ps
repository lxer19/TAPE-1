URL: http://www.eecs.umich.edu/~tnm/papers/limits-can.ps
Refering-URL: http://www.eecs.umich.edu/~tnm/papers.html
Root-URL: http://www.eecs.umich.edu
Email: fpostiffm,greened,tyson,tnmg@eecs.umich.edu  
Title: The Limits of Instruction Level Parallelism in SPEC95 Applications  
Author: Matthew A. Postiff, David A. Greene, Gary S. Tyson and Trevor N. Mudge 
Address: Michigan  
Affiliation: Advanced Computer Architecture Lab The University of  
Abstract: This paper examines the limits to instruction level parallelism that can be found in programs, in particular the SPEC95 benchmark suite. It differs from earlier studies in removing non-essential true dependencies that occur as a result of the compiler employing a stack for subroutine linkage. This is a subtle limitation to parallelism that is not readily evident as it appears as a true dependency on the stack pointer. In this paper we show that its removal exposes far more parallelism than has been seen previously. We refer to this type of parallelism as "parallelism at a distance" because it requires impossibly large instruction windows for detection. We conclude with two observations: 1) that a single instruction window characteristic of superscalar machines is inadequate for detecting parallelism at a distance; and 2) in order to take advantage of this parallelism the compiler must be involved, or separate threads must be explicitly programmed. 
Abstract-found: 1
Intro-found: 1
Reference: [AS92] <author> T. M. Austin and G. S. Sohi. </author> <title> Dynamic dependency analysis of ordinary programs. </title> <editor> In David Abramson and Jean-Luc Gau-diot, editors, </editor> <booktitle> Proc. ISCA-19, </booktitle> <pages> pages 342-351. </pages> <publisher> ACM Press, </publisher> <month> May </month> <year> 1992. </year>
Reference-contexts: While they cannot be distinguished from program dependencies by the processor, modification of the run-time support generated during compilation can eliminate many of them. In this study we extend previous limit studies of register and memory renaming <ref> [Wal91, Wal93, AS92, TA97] </ref>. We also examine the effects of eliminating perhaps the most critical compiler-induced dependency|the allocation of activation records on a stack. In Section 2 we explain the presentation of our results.
Reference: [PGTM98] <author> Matthew A. Postiff, David A. Greene, Gary S. Tyson, and Trevor N. Mudge. </author> <title> The limits of instruction level parallelism in spec95 applications. </title> <booktitle> In ASPLOS VIII IN-TERACT3 Workshop, </booktitle> <month> October </month> <year> 1998. </year>
Reference-contexts: In Section 5 we discuss methods of exploiting the parallelism exposed in this study and in Section 6 we conclude and present several areas of further research. Table 1 shows the summary results. For a full discussion of previous work and the results of this study, see <ref> [PGTM98] </ref>. 2 Methodology In order to examine the available parallelism, we constructed an execution driven simulator based on the the Simplescalar simulation environment. We use the SPEC95 becnhmark suite with train inputs.
Reference: [TA97] <author> Gary S. Tyson and Todd M. Austin. </author> <title> Improving the accuracy and performance of memory communication through renaming. </title> <booktitle> In Proc. Micro-30, </booktitle> <pages> pages 218-227, </pages> <month> De-cember </month> <year> 1997. </year>
Reference-contexts: While they cannot be distinguished from program dependencies by the processor, modification of the run-time support generated during compilation can eliminate many of them. In this study we extend previous limit studies of register and memory renaming <ref> [Wal91, Wal93, AS92, TA97] </ref>. We also examine the effects of eliminating perhaps the most critical compiler-induced dependency|the allocation of activation records on a stack. In Section 2 we explain the presentation of our results.
Reference: [Wal91] <author> D. W. Wall. </author> <title> Limits of instruction-level parallelism. </title> <booktitle> In Proc. ASPLOS-4, </booktitle> <volume> volume 26, </volume> <pages> pages 176-189, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: While they cannot be distinguished from program dependencies by the processor, modification of the run-time support generated during compilation can eliminate many of them. In this study we extend previous limit studies of register and memory renaming <ref> [Wal91, Wal93, AS92, TA97] </ref>. We also examine the effects of eliminating perhaps the most critical compiler-induced dependency|the allocation of activation records on a stack. In Section 2 we explain the presentation of our results.
Reference: [Wal93] <author> David W. Wall. </author> <title> Limits of instruction-level parallelism. </title> <type> Technical Report DEC-WRL-93-6, </type> <institution> Digital Equipment Corporation, Western Research Lab, </institution> <month> November 93. </month>
Reference-contexts: While they cannot be distinguished from program dependencies by the processor, modification of the run-time support generated during compilation can eliminate many of them. In this study we extend previous limit studies of register and memory renaming <ref> [Wal91, Wal93, AS92, TA97] </ref>. We also examine the effects of eliminating perhaps the most critical compiler-induced dependency|the allocation of activation records on a stack. In Section 2 we explain the presentation of our results.
References-found: 5

