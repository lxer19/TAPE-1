URL: http://www.cs.umn.edu/Users/dept/users/kencham/MAGELLAN.ps.gz
Refering-URL: http://www.cs.umn.edu/Users/dept/users/kencham/
Root-URL: http://www.cs.umn.edu
Email: kencham@cs.umn.edu  
Title: The MAGELLAN Continuous Media Server  
Author: Simulator 
Abstract-found: 0
Intro-found: 1
Reference: [AHPR94] <author> M. Agrawal, J. Huang, S. Prabhakar, and J. Richardson. </author> <title> Integrated System Support for Continuous Multimedia Applications. </title> <booktitle> In Proceedings of International Conference on Distributed Multimedia Systems and Applications, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: In addition to this technological drive is the lack of inter-operability between different components. The author's experience in trying to put together hardware and supporting software for a video server turned out to be excruciatingly painful <ref> [AHPR94] </ref>. While there is adequate hardware technology available to implement various software solutions in multi-media computing, the task of integrating each vendor's component and controlling them through the available programming environment turns out to be at best futile and distracting from our research charter. 3 4 CHAPTER 1.
Reference: [BFS87] <author> P. Bratley, B.L. Fox, and L.E Schrage. </author> <title> A Guide to Simulation. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, 2 edition, </address> <year> 1987. </year>
Reference-contexts: This is neccessary because * we must be able to run multiple independent simulation runs, each being statistically different, and * we must avoid any correlatory effects between the random variables within each simulations run. MAGELLAN borrows theory and implementation of RNGs from various sources [Knu73], <ref> [BFS87] </ref>, [L'E88], [Jai91], etc. The Multiplicative Linear Congruential Generators RNG. Magellan uses MLCG RNGs [Jai91]. This class of random number generators have many properties that fit our requirements. These include, 1. [L'E88] has subjected them to a battery of statistical tests and has derived robust implementations, 2. <p> These include, 1. [L'E88] has subjected them to a battery of statistical tests and has derived robust implementations, 2. A public domain portable implementation from GNU's libg++ [Lea92] is available, 4.2. RANDOM VARIABLES 15 3. The RNG has a very long period, and 4. <ref> [BFS87] </ref> have given a systematic technique to generate seed for the simulation. hRandom Number Generation 15ai j hRNG Include Files 15b, . . . i hRNG Global Variables 21ai hRNG Class Definition 16ai 3 Macro referenced in scrap 14. <p> For the pair of LCG generators used by libg++ multiple independent streams of random numbers are generated by seeding each generator separately. The technique to automatically compute the seeds for successive instances of MyMLCG is obtained from <ref> [BFS87] </ref> and [Sta95]. Since MLCG uses two LCGs, L 1 = (a 1 ; m 1 ; 0) and L 2 = (a 2 ; m 2 ; 0), [BFS87]'s procedure to derive seeds for statistically independent RNGs is as follows: Regardless of the seed for L 1 (say that it
Reference: [BG88] <author> D. Bitton and J. Gray. </author> <title> Disk shadowing. </title> <booktitle> In 14th International Conference on Very Large Data Bases, </booktitle> <pages> pages 331-338, </pages> <year> 1988. </year>
Reference-contexts: Macro referenced in scrap 91a. 4.8.4 Disk Access Cost Model Elaborate models have been proposed as in [IEE94]. However, presently we use is a non-linear seek profile that is borrowed from <ref> [BG88] </ref>, i.e. if o (t), the seek time for traversing t tracks is given by S + T p (t), where S and T are pre-defined constants. S and T are defined here (all in seconds). TAU (t) is also defined as a macro right now.
Reference: [IEE94] <institution> IEEE Computer Society. COMPUTER: The I/O Subsystem: A candidate for improvement, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: Macro referenced in scrap 91a. The Block Size b. 4.8. STORAGE SYSTEM SIMULATOR 97 hDisk Constants 97ai j #define BLOCK_SIZE (BSR*SECTOR) 3 Macro defined by scraps 93a, 95cd, 96abcd, 97ab. Macro referenced in scrap 91a. 4.8.4 Disk Access Cost Model Elaborate models have been proposed as in <ref> [IEE94] </ref>. However, presently we use is a non-linear seek profile that is borrowed from [BG88], i.e. if o (t), the seek time for traversing t tracks is given by S + T p (t), where S and T are pre-defined constants. S and T are defined here (all in seconds).
Reference: [Jai91] <author> R. Jain. </author> <title> The Art of Computer Systems Performance Analysis. </title> <publisher> John Wiley & Sons, </publisher> <year> 1991. </year>
Reference-contexts: This is neccessary because * we must be able to run multiple independent simulation runs, each being statistically different, and * we must avoid any correlatory effects between the random variables within each simulations run. MAGELLAN borrows theory and implementation of RNGs from various sources [Knu73], [BFS87], [L'E88], <ref> [Jai91] </ref>, etc. The Multiplicative Linear Congruential Generators RNG. Magellan uses MLCG RNGs [Jai91]. This class of random number generators have many properties that fit our requirements. These include, 1. [L'E88] has subjected them to a battery of statistical tests and has derived robust implementations, 2. <p> MAGELLAN borrows theory and implementation of RNGs from various sources [Knu73], [BFS87], [L'E88], <ref> [Jai91] </ref>, etc. The Multiplicative Linear Congruential Generators RNG. Magellan uses MLCG RNGs [Jai91]. This class of random number generators have many properties that fit our requirements. These include, 1. [L'E88] has subjected them to a battery of statistical tests and has derived robust implementations, 2. A public domain portable implementation from GNU's libg++ [Lea92] is available, 4.2. RANDOM VARIABLES 15 3.
Reference: [Joy92] <author> Tim Joyner. MAGELLAN. McGraw Hill, </author> <note> 1 edition, 1992. ISBN 0-87742-263-X. </note>
Reference-contexts: In short, F ern~ao de M agalh~aes 2 was the first man to lead an expedition whose purpose was to circumnavigate the Earth. A very detailed and captivating account of the man and his voyage is given in <ref> [Joy92] </ref>.
Reference: [KHS95a] <author> D. Kenchammana-Hosekote and J. Srivastava. </author> <title> A QoS Based Schuleding Algorithm for Compressed Video. </title> <type> Technical Report 95-28, </type> <institution> Department of Computer Science, University of Min-nesota, 200, Union Street S.E., </institution> <address> Minneapolis, MN 55455, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: SOURCE 4.2.2 Model Distributions One of the problems we ran into to was to decide a frame model for VDR streams. As <ref> [KHS95a] </ref> concludes from emphirical studies, there really is no standard distributions that will fit all the streams. A couple of solutions to fix this problem come to mind. These include * Fitting standard distributions to the the sample data, or * Go for trace-driven simulation. <p> SOURCE Chapter 5 Analysis Tools In this chapter we supply the various analysis tools that are used in summarizing and interpreting output from multiple runs of MAGELLAN . The data presented in <ref> [KHS95a] </ref>, [KHS95b], [KHS95c] have all been obtained from these tools. Most of the analysis tools have been written in Perl [WS93].
Reference: [KHS95b] <author> D.R. Kenchammana-Hosekote and J. Srivastava. </author> <title> I/O scheduling for Digital Continuous Media:Part I: Steady State. </title> <month> April </month> <year> 1995. </year> <note> Also as TR95-30, </note> <institution> Department of Computer Science, Univ. of Minnesota. </institution>
Reference-contexts: SOURCE Chapter 5 Analysis Tools In this chapter we supply the various analysis tools that are used in summarizing and interpreting output from multiple runs of MAGELLAN . The data presented in [KHS95a], <ref> [KHS95b] </ref>, [KHS95c] have all been obtained from these tools. Most of the analysis tools have been written in Perl [WS93].
Reference: [KHS95c] <author> D.R. Kenchammana-Hosekote and J. Srivastava. </author> <title> I/O scheduling for Digital Continuous Media:Part II: </title> <note> VCR-like Operations. 209 210 BIBLIOGRAPHY April 1995. Also as TR95-30, </note> <institution> Department of Computer Science, Univ. of Minnesota. </institution>
Reference-contexts: SOURCE Chapter 5 Analysis Tools In this chapter we supply the various analysis tools that are used in summarizing and interpreting output from multiple runs of MAGELLAN . The data presented in [KHS95a], [KHS95b], <ref> [KHS95c] </ref> have all been obtained from these tools. Most of the analysis tools have been written in Perl [WS93].
Reference: [Knu73] <author> D.E. Knuth. </author> <booktitle> The Art of Computer Programming:Semi-Numerical Algorithms, </booktitle> <volume> volume 2. </volume> <publisher> Addison-Wesley Publishing Inc., </publisher> <address> 2 nd edition, </address> <year> 1973. </year>
Reference-contexts: This is neccessary because * we must be able to run multiple independent simulation runs, each being statistically different, and * we must avoid any correlatory effects between the random variables within each simulations run. MAGELLAN borrows theory and implementation of RNGs from various sources <ref> [Knu73] </ref>, [BFS87], [L'E88], [Jai91], etc. The Multiplicative Linear Congruential Generators RNG. Magellan uses MLCG RNGs [Jai91]. This class of random number generators have many properties that fit our requirements. These include, 1. [L'E88] has subjected them to a battery of statistical tests and has derived robust implementations, 2.
Reference: [L'E88] <author> P. L'Ecuyer. </author> <title> Efficient and Portable Combined Random Number Generators. </title> <journal> Communications of the ACM, </journal> <volume> 31(6) </volume> <pages> 742-749, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: This is neccessary because * we must be able to run multiple independent simulation runs, each being statistically different, and * we must avoid any correlatory effects between the random variables within each simulations run. MAGELLAN borrows theory and implementation of RNGs from various sources [Knu73], [BFS87], <ref> [L'E88] </ref>, [Jai91], etc. The Multiplicative Linear Congruential Generators RNG. Magellan uses MLCG RNGs [Jai91]. This class of random number generators have many properties that fit our requirements. These include, 1. [L'E88] has subjected them to a battery of statistical tests and has derived robust implementations, 2. <p> MAGELLAN borrows theory and implementation of RNGs from various sources [Knu73], [BFS87], <ref> [L'E88] </ref>, [Jai91], etc. The Multiplicative Linear Congruential Generators RNG. Magellan uses MLCG RNGs [Jai91]. This class of random number generators have many properties that fit our requirements. These include, 1. [L'E88] has subjected them to a battery of statistical tests and has derived robust implementations, 2. A public domain portable implementation from GNU's libg++ [Lea92] is available, 4.2. RANDOM VARIABLES 15 3. <p> This uses the portable implementation on 32-bit machines is described in <ref> [L'E88] </ref>. L'ecuyer suggests the mix of two MLCGs: m 1 = 2147483563; a 1 = 40014 Note that (m 1 1)=2 = 3 fi 7 fi 631 fi 81031 and (m 2 1)=2 = 19 fi 31 fi 1019 fi 1789 are relatively prime.
Reference: [Lea92] <author> D. Lea. </author> <title> User's Guide to the GNU C++ Library. Free Software Foundation, </title> <address> 2.0 edition, </address> <year> 1992. </year>
Reference-contexts: Magellan uses MLCG RNGs [Jai91]. This class of random number generators have many properties that fit our requirements. These include, 1. [L'E88] has subjected them to a battery of statistical tests and has derived robust implementations, 2. A public domain portable implementation from GNU's libg++ <ref> [Lea92] </ref> is available, 4.2. RANDOM VARIABLES 15 3.
Reference: [Sta95] <author> C. Stacey. </author> <title> Seed Selection for LCGs. </title> <type> personal communication, </type> <month> April </month> <year> 1995. </year>
Reference-contexts: For the pair of LCG generators used by libg++ multiple independent streams of random numbers are generated by seeding each generator separately. The technique to automatically compute the seeds for successive instances of MyMLCG is obtained from [BFS87] and <ref> [Sta95] </ref>. <p> ; m 2 ; 0), [BFS87]'s procedure to derive seeds for statistically independent RNGs is as follows: Regardless of the seed for L 1 (say that it is set to 0), set the seed for L 2 using every 164 th random number from L 2 (with initial seed 1). <ref> [Sta95] </ref> gives a closed form for computing the i th number in a stream generated by a LCG L = (a; m; c) as Z i = a i Z 0 + a 1 (mod m) (4.1) Since c = 0 for the LCGs used in MLCG we have the simplified
Reference: [WS93] <author> L. Wall and W. Schwartz. </author> <title> Perl Programming. </title> <publisher> O'Reilly & Sons, </publisher> <year> 1993. </year>
Reference-contexts: The data presented in [KHS95a], [KHS95b], [KHS95c] have all been obtained from these tools. Most of the analysis tools have been written in Perl <ref> [WS93] </ref>.
References-found: 14

