URL: http://www.cs.pitt.edu/~gupta/research/SE/icsm95.ps
Refering-URL: http://www.cs.pitt.edu/~gupta/research/testing.html
Root-URL: 
Email: fgupta,soffag@cs.pitt.edu  
Title: Priority Based Data Flow Testing  
Author: Rajiv Gupta and Mary Lou Soffa 
Address: Pittsburgh Pittsburgh, PA 15260  
Affiliation: Dept. of Computer Science University of  
Abstract: Software testing is an expensive component of software development and maintenance. For data flow testing, test cases must be found to test the def-use pairs in a program. Since some of the def-use pairs identified through static analysis may be infeasible, no amount of testing effort may result in exhaustive testing of a program. Therefore in practice a fixed amount of effort is spent in testing a program. In this paper we develop an approach for assigning priorities to def-use pairs, such that the def-use pairs with higher priorities can be expected to require less effort for test case generation and therefore testing. Thus, by using the priorities as a guide for ordering the def-use pairs for testing, we can maximize the number of def-use pairs tested using a fixed amount of testing effort. We apply the technique to regression testing during the software maintenance phase, in which case the priorities are assigned to capture not only the difficulty in test case generation but also the likelihood that an error introduced by a program change will be uncovered by the test case. Keywords software testing, data flow analysis, defuse testing, regression testing, control dependences, definition-free paths. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Agrawal, </author> <title> "Dominators, Super Blocks, and Program Coverage," </title> <booktitle> Proc. 21st Annual ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 25-34, </pages> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: Heuristics have been developed that use static information to guide the test generation process for a given requirement [4]. Also static analysis techniques that group requirements that can be potentially satisfied by the same test case have been considered <ref> [1, 3] </ref>. The approach of prioritizing the requirements can be used in conjunction with the above techniques to maximize the testing achieved using a fixed amount of effort. However, to our knowledge, no work has been done on prioritizing the testing requirements under a given criterion.
Reference: [2] <author> D. Alberts, </author> <title> "The Economics of Software Quality Assurance," </title> <booktitle> Proc. of the AFIPS 1976 National Computer Conference, </booktitle> <volume> Vol. 45, </volume> <pages> pp. 433-442, </pages> <year> 1976. </year>
Reference-contexts: It has been estimated that about 50% of software development costs can be attributed to testing <ref> [2, 9] </ref>. The cost of testing is due to the data flow analysis required to identify requirements, generation of test cases, and the execution of test cases.
Reference: [3] <author> R. Gupta, </author> <title> "Generalized Dominators and Post-Dominators," </title> <booktitle> Proc. 19th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> Albu-querque, New Mexico, </address> <pages> pages 246-257, </pages> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: Heuristics have been developed that use static information to guide the test generation process for a given requirement [4]. Also static analysis techniques that group requirements that can be potentially satisfied by the same test case have been considered <ref> [1, 3] </ref>. The approach of prioritizing the requirements can be used in conjunction with the above techniques to maximize the testing achieved using a fixed amount of effort. However, to our knowledge, no work has been done on prioritizing the testing requirements under a given criterion.
Reference: [4] <author> R. Gupta and M.L. Soffa, </author> <title> "Employing Static Information in the Generation of Test Cases," </title> <journal> Journal of Software Testing, Verification and Reliability, </journal> <volume> Vol. 3, No. 1, </volume> <pages> pages 29-48, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: It is well accepted that test case generation is one of the most time consuming aspect of software testing [11]. Heuristics have been developed that use static information to guide the test generation process for a given requirement <ref> [4] </ref>. Also static analysis techniques that group requirements that can be potentially satisfied by the same test case have been considered [1, 3]. The approach of prioritizing the requirements can be used in conjunction with the above techniques to maximize the testing achieved using a fixed amount of effort.
Reference: [5] <author> R. Gupta, M.J. Harrold, </author> <title> and M.L. Soffa, "An Approach to Regression Testing using Slicing," </title> <booktitle> Proc. of the Conference on Software Maintenance, </booktitle> <pages> pages 299-308, </pages> <address> Orlando, Florida, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: The cost of testing is due to the data flow analysis required to identify requirements, generation of test cases, and the execution of test cases. In order to reduce the cost of computing and maintaining data flow information incremental as well as slicing based approaches have been suggested <ref> [6, 5] </ref>. In order to minimize the cost of test case execution during maintenance, regression testing techniques have been developed [10, 6]. It is well accepted that test case generation is one of the most time consuming aspect of software testing [11]. <p> The greater the number of changes that affect a def-use pair the greater is the priority assigned to it. Algorithms for identifying the def-use pairs effected by a program change is found in <ref> [5] </ref>. The priorities are more formally defined below. Definition 5: A def-use pair (def; use) is effected by a program change if either it is created due to the program change or the computation of the value at the definition def is effected directly or indirectly by a program change.
Reference: [6] <author> M.J. Harrold and M.L. Soffa, </author> <title> "An Incremental Approach to Unit Testing During Maintenance," </title> <booktitle> Proc. of the Conference on Software Maintenance, </booktitle> <pages> pages 362-367, </pages> <year> 1988. </year>
Reference-contexts: The cost of testing is due to the data flow analysis required to identify requirements, generation of test cases, and the execution of test cases. In order to reduce the cost of computing and maintaining data flow information incremental as well as slicing based approaches have been suggested <ref> [6, 5] </ref>. In order to minimize the cost of test case execution during maintenance, regression testing techniques have been developed [10, 6]. It is well accepted that test case generation is one of the most time consuming aspect of software testing [11]. <p> In order to reduce the cost of computing and maintaining data flow information incremental as well as slicing based approaches have been suggested [6, 5]. In order to minimize the cost of test case execution during maintenance, regression testing techniques have been developed <ref> [10, 6] </ref>. It is well accepted that test case generation is one of the most time consuming aspect of software testing [11]. Heuristics have been developed that use static information to guide the test generation process for a given requirement [4].
Reference: [7] <author> K.W. Kennedy, </author> <title> "Node Listings Applied to Data Flow Analysis," </title> <booktitle> Proc. of the 2nd ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 10-21, </pages> <year> 1975. </year>
Reference: [8] <author> R. Kramer, R. Gupta, </author> <title> and M.L. Soffa, "The Combining DAG: A Technique for Parallel Data Flow Analysis," </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> Vol. 5, No. 8, </volume> <pages> pages 805-813, </pages> <month> August </month> <year> 1994. </year>
Reference: [9] <author> G. Myers, </author> <title> "The Art of Software Testing," </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: It has been estimated that about 50% of software development costs can be attributed to testing <ref> [2, 9] </ref>. The cost of testing is due to the data flow analysis required to identify requirements, generation of test cases, and the execution of test cases.
Reference: [10] <author> T.J. Ostrand and E.J. Weyuker, </author> <title> "Using Data Flow Analysis for Regression Testing," </title> <booktitle> Proc. of Sixth Annual Pacific Northwest Software Quality Conference, </booktitle> <pages> pages 58-71, </pages> <year> 1988. </year>
Reference-contexts: In order to reduce the cost of computing and maintaining data flow information incremental as well as slicing based approaches have been suggested [6, 5]. In order to minimize the cost of test case execution during maintenance, regression testing techniques have been developed <ref> [10, 6] </ref>. It is well accepted that test case generation is one of the most time consuming aspect of software testing [11]. Heuristics have been developed that use static information to guide the test generation process for a given requirement [4].
Reference: [11] <author> S. Rapps and E.J. Weyuker, </author> <title> "Selecting Software Test Data Using Data Flow Information," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. SE-11, No. 4, </volume> <pages> pages 367-375, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: In order to minimize the cost of test case execution during maintenance, regression testing techniques have been developed [10, 6]. It is well accepted that test case generation is one of the most time consuming aspect of software testing <ref> [11] </ref>. Heuristics have been developed that use static information to guide the test generation process for a given requirement [4]. Also static analysis techniques that group requirements that can be potentially satisfied by the same test case have been considered [1, 3].
References-found: 11

