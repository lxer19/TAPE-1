URL: http://www.cs.cornell.edu/Info/People/chandra/podc97/papers/kushilevitz.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/chandra/podc97/newProgram.html
Root-URL: http://www.cs.cornell.edu
Title: P 2t+1 i=1 i which is a random, de gree t, polynomial whose free coefficient
Author: P t+ 
Keyword: D(0) i=1  free coefficient  
Web: H(;  
Note: the polynomial  the first element of d, which can therefore be written as D(0) d 0 i=1 V 1 1;i D(i) (where V 1 is a known  is s. (That is,  The  
Abstract: corresponding to a are produced using a random polyno-mial A(x) (over GF [p]) of degree t whose free coefficient is a. The share of each player P i is the value A(i). The value b is shared in the same manner using a polynomial B(x). The goal of the players is to compute shares of the value c, which is the output of the gate, using a degree t polynomial C(x) whose free coefficient is c (and the share of player P i is C(i)). If the gate computes the value c = a + b then the desired polynomial C(x) is just A(x) + B(x). Hence, each player can locally compute (without any communication) the value C(i) = A(i) + B(i). If the gate computes the value c = a b some interaction between the players is required. Here we describe Rabin's simplification [26] of the technique of [6]. First, each player P i locally computes the value D(i) = A(i) B(i). These values define a polynomial D(x) whose free coefficient is indeed the value a b. However, the degree of D is 2t (and not t) which may lead to problems in revealing the output at the end. In addition, D is not even a random polynomial of degree 2t (as D cannot be irreducible) which may lead to the violation of privacy (as shares that will be produced later may not be uniformly distributed). We overcome these problems as follows. We show below that there is a linear combination where the fl i 's are known coefficients. Once this is established, the parties can proceed as follows: Each player P i , (1 i 2t + 1) locally computes ff i = fl i D(i). It then chooses a random polynomial i (x) of degree t whose free coefficient is ff i . It shares this polynomial among the players (i.e., P i sends i (j) to P j ). Each player P j sums up the 2t+1 shares that it receives. This sum is just the share of P j for It remains to show fl i 's that satisfy (1). Denote by ~ d = (d 0 ; d 1 ; : : : ; d 2t ) the vector of coefficients of the polynomial D and let V be the (2t + 1) fi (2t + 1) Vandermonde matrix whose (i; j) entry (for 1 i; j 2t + 1) contains the value this notation we get that ~ D = V ~ d. Since V is non-singular (see, e.g., [49]), we can write ~ d = V 1 ~ D and note that the value that we are interested in sharing is D(0) = d 0 , adversaries. The components that need to be modified are two: 1. Sharing of a secret: Here a Verifiable Secret Sharing (VSS) scheme is used instead of Shamir's secret sharing. (VSS was introduced by [18].) Essentially, a VSS scheme makes sure that an honest dealer can successfully share a secret in a recoverable way, while guaranteeing that even if the dealer is corrupted, at the end of the sharing phase the uncorrupted parties hold shares of a well defined and reconstructible value. Several VSS schemes exist. We sketch one of the schemes described in [6], that withstands t &lt; n=3 faults. The dealer, sharing a secret s, chooses a random bivariate polynomial H of degree t in each variable, whose P t where h 0;0 = s and the other coefficients are random.). Next the dealer sends the polynomials f i () = H(i; ) and g i () = H(; i) to each P i . Next each P i sends f i (j) to each P j , and verifies that the value received from P j equals g i (j). (Note that f i (j) = H(i; j) = g j (i).). If any of his verifications fails, the party requests the dealer to make the corresponding value (i.e., H(i; j)) public. Next, each party P inspects all publicized values. If any of these values doesn't match P 's private shares, then P requests the dealer to make P 's share public. The parties now again inspect the public shares. If a party P i finds any inconsistency with its private share then it decides to abort this sharing. Otherwise it sets its share of the secret to be f 0 (i). reconstructed (using error correcting techniques of Generalized Reed-Solomon codes.) 2. Evaluating a multiplication gate: In the honest but curious case evaluating a multiplication gate consisted of each party re-sharing a locally computed value, followed by local evaluation of a linear combination of the newly received shares. Here we follow this method, with two modifications. First, each party re-shares the locally computed value using a VSS scheme. It should be noted that the local evaluation of the linear combination on the newly received shares can still be done, since the share of each party is still a value f 0 (i) of a random polynomial whose free coefficient is the secret. Next the parties have to prove that the re-shared values are indeed the product of their shares of the input wires to the gate. This is done as follows. Note that all the values that were properly shared `sit on a polynomial' of degree t. Thus the set of values shared by the parties can be regarded as a perturbed code-word of a Reed-Solomon code, where the erroneous entries correspond to the parties that shared incorrect values. Note that no party knows all these values. Still, the parties hold shares of these values. The parties use their shares to reconstruct the syndrome vector of this codeword. This syndrome, while revealing no information on the values that were honestly shared, identifies the parties that shared incorrect values. These shares are sieved out in the computation of the linear combination. i j1 . Also denote, ~ D = (D(1); D(2); : : : ; D(2t + 1)). With
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Alon, O. Goldreich, J. Hastad, and R. Peralta, </author> <title> "Simple Constructions of Almost k-wise Independent Random Variables", </title> <booktitle> FOCS 90 and Random Structures & Algorithms, </booktitle> <volume> Vol. 4, </volume> <year> 1993. </year>
Reference: [2] <author> J. Bar-Ilan, and D. Beaver, </author> <title> "Non-Cryptographic Fault-Tolerant Computing in a Constant Number of Rounds", </title> <booktitle> Proc. of 8th PODC, </booktitle> <pages> pp. 201-209, </pages> <year> 1989. </year>
Reference: [3] <author> D. Beaver, </author> <title> "Perfect Privacy for Two-Party Protocols", </title> <publisher> TR-11-89, Harvard University, </publisher> <year> 1989. </year>
Reference: [4] <author> M. Bellare, O. Goldreich, and S. Goldwasser, </author> <title> "Randomness in Interactive Proofs", </title> <booktitle> FOCS, </booktitle> <year> 1990, </year> <pages> pp. 563-571. </pages>
Reference: [5] <author> M. Ben-Or, R. Canetti and O. Goldreich, </author> <title> "Asynchronous Secure Computations", </title> <booktitle> 25th STOC, </booktitle> <year> 1993, </year> <pages> pp. 52-61. </pages>
Reference: [6] <author> M. Ben-or, S. Goldwasser, and A. Wigderson, </author> <title> "Completeness Theorems for Non-Cryptographic Fault-Tolerant Distributed Computation", </title> <booktitle> STOC, </booktitle> <year> 1988, </year> <pages> pp. 1-10. </pages>
Reference-contexts: Several VSS schemes exist. We sketch one of the schemes described in <ref> [6] </ref>, that withstands t &lt; n=3 faults. The dealer, sharing a secret s, chooses a random bivariate polynomial H of degree t in each variable, whose free coefficient is s. (That is, H (x; y) = P t where h 0;0 = s and the other coefficients are random.). <p> C. Yao, "How to Generate and Exchange Secrets", Proc. of 27th FOCS, 1986, pp. 162-167. [52] D. Zuckerman, "Simulating BPP Using a General Weak Random Source", Proc. of 32nd FOCS, 1991, pp. 79-89. A An Overview of <ref> [6] </ref> A protocol for honest but curious adversaries. The protocol starts with a secret sharing stage in which each player uses Shamir's secret-sharing scheme to share its input among the players. Then, the players simulate an arithmetic circuit for the function in a gate-by-gate fashion. <p> The protocol for active adversaries is identical to the one for passive adversaries, with the exceptions that the size of teams is increased to s = 3t + 1, and the various components of the <ref> [6] </ref> protocol are replaced by their Byzantine counterparts. That is: * The secret sharing procedure is replaced by a verifiable secret sharing (VSS). VSS schemes are described, for instance, in [18, 27, 6, 22, 15]. <p> That is: * The secret sharing procedure is replaced by a verifiable secret sharing (VSS). VSS schemes are described, for instance, in <ref> [18, 27, 6, 22, 15] </ref>. We sketch a VSS scheme in Appendix A. * The multiplication procedure is replaced by its Byzan-tine counterpart, and the addition procedure remains (trivial and) unchanged. * The output reconstruction procedure is replaced by the reconstruction procedure of the VSS scheme in use. <p> In addition, the trusted dealer now has to supply the parties with enough random values to support the VSS scheme and the evaluation scheme of <ref> [6] </ref>. Inspecting these schemes (see Appendix A), it turns out that each invocation of VSS requires from the dealer O (t 2 ) values in GF [p], and evaluating a gate requires O (t 2 ) values in GF [p] for each party in the team. <p> Emulating the trusted dealer is done in the same way as in the basic protocol. Analyzing the Byzantine protocol. The analysis follows the same lines as the proof of Theorem 1, with the exception that the simulator S now invokes the sub-simulators for the Byzantine versions of the <ref> [6] </ref> components. Yet, the introduction of Byzantine adversaries raises an additional apparent difficulty that is not addressed above.
Reference: [7] <author> C. Blundo, A. De-Santis, G. Persiano, and U. Vaccaro, </author> <title> "On the Number of Random Bits in Totally Private Computations", </title> <note> ICALP, LNCS 944, </note> <year> 1995, </year> <pages> pp. 171-182. </pages>
Reference: [8] <author> C. Blundo, A. De-Santis, and U. Vaccaro, </author> <title> "Randomness in Distribution Protocols", </title> <note> ICALP, LNCS 820, </note> <year> 1994, </year> <pages> pp. 568-579. </pages>

References-found: 8

