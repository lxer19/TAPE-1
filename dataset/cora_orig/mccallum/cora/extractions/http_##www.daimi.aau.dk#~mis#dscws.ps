URL: http://www.daimi.aau.dk/~mis/dscws.ps
Refering-URL: http://www.daimi.aau.dk/~mis/papers.html
Root-URL: http://www.daimi.aau.dk
Email: fsandholm,misg@brics.dk  
Title: Distributed Safety Controllers for Web Services  
Author: Anders Sandholm and Michael I. Schwartzbach 
Address: Aarhus, Ny Munkegade DK-8000 Aarhus C, Denmark  
Affiliation: BRICS Department of Computer Science University of  
Abstract: We show how to use high-level synchronization constraints, written in a version of monadic second-order logic on onite strings, to synthesize safety controllers for interactive web services. We improve on the nave runtime model to avoid state-space explosions and to increase the AEow capacities of services. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. E. Bryant. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(8):677691, </volume> <month> August </month> <year> 1986. </year>
Reference-contexts: parallelismwe will consider general distributed alphabets where the sub-alphabets are not necessarily equal to each other. 7 5.1 The State Explosion Problem In model checking, the state explosion problem occurs very often and there have been many attempts to avoid it, e.g., by means of a symbolic representation using BDDs <ref> [7, 1] </ref>. As a colloquial remark one might mention that we actually already do use BDDs because of the way the Mona system represents its data. Here we attack the state explosion problem by using distributed automata.
Reference: 2. <author> K. Cox, T. Ball, and J. C. Ramming. Lunchbot: </author> <title> A tale of two ways to program web services. </title> <note> Available from http://www.cs.utexas.edu/users/cpg/mawl/doc/lunchbot.ps.gz, April 1996. </note>
Reference-contexts: A web client may invoke an individual thread of one of the given session kinds. The execution of this thread may interact with the client and inspect or modify the global state. To alleviate laborious low-level encodings of such services, the Mawl language <ref> [6, 2] </ref> has been suggested as a high-level notation that is compiled into low-level CGI-scripts. It directly provides programming constructs corresponding to global state, dynamic document, sessions, local state, imperative actions, and client interactions. This system shows great promise to facilitate the eOEcient production of reliable web services.
Reference: 3. <author> Brian J. Fox. Meta-html: </author> <title> A dynamic programming language for www applications. </title> <address> http://www.metahtml.com/documentation/manifesto.html. </address>
Reference-contexts: The techniques available for doing synchronization when dealing with concurrency in Mawl is limited to working with critical regions, though. Our work on service logic extends this to working with arbitrary safety constraints. In general, there are increasingly many systems for doing web-programming, e.g., <ref> [6, 5, 3] </ref>, but so far none of seem of them seem to support proper handling of safety requirements. The area of control theory is of course huge. We are only dealing with control of discrete systems, though.
Reference: 4. <author> J.G. Henriksen, J. Jensen, M. Jrgensen, N. Klarlund, B. Paige, T. Rauhe, and A. Sandholm. Mona: </author> <title> Monadic second-order logic in practice. In Tools and Algorithms for the Construction and Analysis of Systems, </title> <booktitle> First International Workshop, </booktitle> <volume> TACAS '95, LNCS 1019, </volume> <year> 1996. </year>
Reference-contexts: For a diagram of the overall compilation process see Fig. 2. M2L-Str is a very expressive logic in which several other logics can be encoded, e.g., interval logic and all sorts of linear time temporal logics. For an introduction to and a discussion of M2L-Str see <ref> [4] </ref>. The specioc high-level notation built on top of M2L-Str for writing Wig safety requirements is called the Wig service logic (WSL). The speciocs of WSL are dealt with later in this paper. <p> One of the reasons why we have chosen M2L-Str is 3 safety requirements !! service code - compiler vv (( safety controller qq run-time system compiled service code Fig. 2. Overview of the setup. that we have a very well functioning tool available for doing computations in this logic <ref> [4] </ref>. Also, since we do not aim for traditional model checking, but rather for synthesizing controllers to be run on fast machines in slow networks, we are in the fortunate position to choose whatever logic provides the most succinct and intuitive syntax.
Reference: 5. <institution> The document is the application. </institution> <note> Web Site. http://www.htmlscript.com/. </note>
Reference-contexts: The techniques available for doing synchronization when dealing with concurrency in Mawl is limited to working with critical regions, though. Our work on service logic extends this to working with arbitrary safety constraints. In general, there are increasingly many systems for doing web-programming, e.g., <ref> [6, 5, 3] </ref>, but so far none of seem of them seem to support proper handling of safety requirements. The area of control theory is of course huge. We are only dealing with control of discrete systems, though.
Reference: 6. <author> D. A. Ladd and J. C. Ramming. </author> <title> Programming the web: An application-oriented language for hypermedia services. </title> <booktitle> In 4th Intl. World Wide Web Conference, </booktitle> <year> 1995. </year>
Reference-contexts: A web client may invoke an individual thread of one of the given session kinds. The execution of this thread may interact with the client and inspect or modify the global state. To alleviate laborious low-level encodings of such services, the Mawl language <ref> [6, 2] </ref> has been suggested as a high-level notation that is compiled into low-level CGI-scripts. It directly provides programming constructs corresponding to global state, dynamic document, sessions, local state, imperative actions, and client interactions. This system shows great promise to facilitate the eOEcient production of reliable web services. <p> The techniques available for doing synchronization when dealing with concurrency in Mawl is limited to working with critical regions, though. Our work on service logic extends this to working with arbitrary safety constraints. In general, there are increasingly many systems for doing web-programming, e.g., <ref> [6, 5, 3] </ref>, but so far none of seem of them seem to support proper handling of safety requirements. The area of control theory is of course huge. We are only dealing with control of discrete systems, though.
Reference: 7. <author> K. L. McMillan. </author> <title> Symbolic Model Checking. </title> <publisher> Kluver Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: parallelismwe will consider general distributed alphabets where the sub-alphabets are not necessarily equal to each other. 7 5.1 The State Explosion Problem In model checking, the state explosion problem occurs very often and there have been many attempts to avoid it, e.g., by means of a symbolic representation using BDDs <ref> [7, 1] </ref>. As a colloquial remark one might mention that we actually already do use BDDs because of the way the Mona system represents its data. Here we attack the state explosion problem by using distributed automata.
Reference: 8. <author> M. O. Rabin. </author> <title> Decidability of second-order theories and automata on inonite trees. </title> <journal> Trans. Amer. Math. Soc., </journal> <volume> 141:135, </volume> <year> 1969. </year>
Reference-contexts: Furthermore we will argue later that the technique handles specioc requirements like critical regions as eOEciently as if implemented directly, e.g., by means of a semaphore. It has been known since the late sixties that M2L-Str characterizes regularity <ref> [8] </ref>. The Mona system provides an algorithm for translating M2L-Str formulae into minimal deterministic onite state automata (mdfa ). Furthermore, regularity is preserved under preox closure. Thus we have a method for producing from the safety requirements an mdfa that will function as our safety controller. Example 2.
Reference: 9. <author> Peter J. G. Ramadge and W. Murray Wonham. </author> <title> The control of discrete event systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <address> 77(1):8198, </address> <month> January </month> <year> 1989. </year>
Reference-contexts: The area of control theory is of course huge. We are only dealing with control of discrete systems, though. Ramadge and Wonham give in <ref> [9] </ref> a good survey on iThe Control of Discrete Event Systemsj. Many of the notions presented here are similar to those of [9]. Distributed automata are simply a special case of the product automata of [10]. <p> The area of control theory is of course huge. We are only dealing with control of discrete systems, though. Ramadge and Wonham give in <ref> [9] </ref> a good survey on iThe Control of Discrete Event Systemsj. Many of the notions presented here are similar to those of [9]. Distributed automata are simply a special case of the product automata of [10]. They again are a special case of the non-cellular asynchronous automata of [11]. 9 Future Work Writing Wig services results in generation of highly concurrent code which needs lots of synchronization.
Reference: 10. <author> P. S. Thiagarajan. </author> <title> PTL over product state spaces. </title> <type> Technical Report TCS-95-4, </type> <institution> School of Mathematics, SPIC Science Foundation, </institution> <year> 1995. </year>
Reference-contexts: Ramadge and Wonham give in [9] a good survey on iThe Control of Discrete Event Systemsj. Many of the notions presented here are similar to those of [9]. Distributed automata are simply a special case of the product automata of <ref> [10] </ref>. They again are a special case of the non-cellular asynchronous automata of [11]. 9 Future Work Writing Wig services results in generation of highly concurrent code which needs lots of synchronization.
Reference: 11. <author> W. Zielonka. </author> <title> The Book of Traces, chapter Asynchronous Automata, </title> <publisher> pages 205248. World Scientioc Publishing, </publisher> <year> 1995. </year> <month> 15 </month>
Reference-contexts: Many of the notions presented here are similar to those of [9]. Distributed automata are simply a special case of the product automata of [10]. They again are a special case of the non-cellular asynchronous automata of <ref> [11] </ref>. 9 Future Work Writing Wig services results in generation of highly concurrent code which needs lots of synchronization.
References-found: 11

