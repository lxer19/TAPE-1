URL: http://www.cs.pitt.edu/~gupta/research/Dist/spdt98.ps
Refering-URL: http://www.cs.pitt.edu/~gupta/research/dist.html
Root-URL: 
Email: fwuw,guptag@cs.pitt.edu madalene.spezialetti@mail.trincoll.edu  
Title: Experimental Evaluation of On-line Techniques for Removing Monitoring Intrusion  
Author: Wanqing Wu and Rajiv Gupta Madalene Spezialetti 
Keyword: distributed systems and applications, monitoring, monitoring intrusion, on-line intrusion removal techniques, token-ring networks, point-to-point networks.  
Note: Supported in part by NSF through a PYI Award CCR-9157371 and NSF Grant CCR-9704350 to the  
Address: Pittsburgh Trinity College  Pittsburgh.  
Affiliation: Dept. of Comp. Science Math., Comp. and Eng. Center University of  University of  
Abstract: We describe the implementation and experimental evaluation of two distributed systems integrated with on-line monitoring intrusion removal techniques. The scheduling of processes at a site is accomplished using the round-robin mechanism. The communication is carried out using a logical token-ring protocol in one system, and a point-to-point protocol in the other. By registering the monitoring activities, such as the instrumentation code in the source program and monitoring processes, monitoring intrusion can be removed in the systems automatically. Experiments were conducted to evaluate the intrinsic overhead of the systems, that is, the cost of providing an intrusion removal capability, and the effectiveness of the systems to remove monitoring intrusion. The intrinsic overhead of both systems was found to be low. In particular, programs took maximally 2.68% and 0.92% more time to finish in the token-ring and point-to-point systems respectively than they did in the original systems that do not provide an intrusion removal capability. In order to measure the effectiveness of our techniques, we consider the behavior of distributed programs with various instrumentations in terms of the estimated execution time, the accumulated number of event occurrences and the sequence of event occurrences. Our intrusion removal techniques are able to estimate the original execution time of a monitored program within 2.98% and 2.6% in the token-ring and point-to-point systems respectively in comparison to the execution time of the unmonitored program, and to remove 99.1% and 98.3% of intrusion on the accumulated event occurrences, and 96.1% and 97.2% of intrusion on the sequence of event occurrences in the token-ring and point-to-point systems respectively. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.A. Gannon, K.J. Williams, M.S. Andersland, T.L. Casavant, and J.E. Lummp, </author> <title> "Trace Recovery in MultiProcessing Systems: Architectural Considerations," </title> <booktitle> Int'l Conf. on Parallel Processing, </booktitle> <volume> Vol. II, </volume> <pages> pages 99-102, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: One approach to reducing the impact of monitoring is through the use of hardware support <ref> [1, 3] </ref>. However, the special purpose or redundant hardware required by these systems limits their application. A generally applicable approach for minimizing the intrusive effects of monitoring is to use software techniques for estimating the true execution time of a computation by compensating for intrusion induced effects. <p> Off-line processing of execution traces, collected by running the instrumented program, is carried out to compensate for the intrusive effects of monitoring. Such techniques have been explored by Malony et al. [5, 6] and Casavant et al. <ref> [1, 2] </ref>. The major drawback of this approach is that it is not generally successful for non-deterministic applications. If the outcomes of non-deterministic actions were altered by monitoring, it is not possible to reconstruct the behavior which the application would have exhibited if monitoring had not been performed.
Reference: [2] <author> J.A. Gannon, K.J. Williams, M.S. Andersland, J.E. Lummp, and T.L. Casavant, </author> <title> "Using Perturbation Tracking to Compensate for Intrusion Propagation in Message Passing Systems," </title> <booktitle> 14th IEEE-CS Int'l Conf. on Dist. Computing Sys., </booktitle> <address> Poland, </address> <year> 1994. </year>
Reference-contexts: Off-line processing of execution traces, collected by running the instrumented program, is carried out to compensate for the intrusive effects of monitoring. Such techniques have been explored by Malony et al. [5, 6] and Casavant et al. <ref> [1, 2] </ref>. The major drawback of this approach is that it is not generally successful for non-deterministic applications. If the outcomes of non-deterministic actions were altered by monitoring, it is not possible to reconstruct the behavior which the application would have exhibited if monitoring had not been performed.
Reference: [3] <author> D. Haban, </author> <title> "DTM A Method for Testing Distributed Systems," </title> <booktitle> Proceedings of the 6th Symposium on Reliable Distributed Software and Database Systems, </booktitle> <pages> pages 66-73, </pages> <year> 1987. </year>
Reference-contexts: One approach to reducing the impact of monitoring is through the use of hardware support <ref> [1, 3] </ref>. However, the special purpose or redundant hardware required by these systems limits their application. A generally applicable approach for minimizing the intrusive effects of monitoring is to use software techniques for estimating the true execution time of a computation by compensating for intrusion induced effects.
Reference: [4] <author> L. Lamport, </author> <title> "Time, Clocks and the Ordering of Events in Distributed Systems," </title> <journal> Comm. of the ACM, </journal> <volume> 21(7), </volume> <pages> pages 558-565, </pages> <year> 1978. </year>
Reference: [5] <author> A. Malony and D. Reed, </author> <title> "Models for performance perturbation analysis," </title> <booktitle> ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pages 15-25, </pages> <year> 1991. </year>
Reference-contexts: Off-line processing of execution traces, collected by running the instrumented program, is carried out to compensate for the intrusive effects of monitoring. Such techniques have been explored by Malony et al. <ref> [5, 6] </ref> and Casavant et al. [1, 2]. The major drawback of this approach is that it is not generally successful for non-deterministic applications.
Reference: [6] <author> S.R. Sarukkai and A. Malony, </author> <title> "Perturbation analysis of high level instrumentation for SPMD programs," </title> <booktitle> 4th ACM SIGPLAN Symp. on Principles and Practices of Parallel Programming, </booktitle> <pages> pages 44-53, </pages> <year> 1993. </year>
Reference-contexts: Off-line processing of execution traces, collected by running the instrumented program, is carried out to compensate for the intrusive effects of monitoring. Such techniques have been explored by Malony et al. <ref> [5, 6] </ref> and Casavant et al. [1, 2]. The major drawback of this approach is that it is not generally successful for non-deterministic applications.
Reference: [7] <author> K.M. Chandy and J. Misra, </author> <title> "Distributed Simulation: A Case Study in Design and Verification of Distributed Programs" IEEE Transaction on Software Engineering vol. </title> <type> se-5, </type> <institution> no.5, </institution> <month> September </month> <year> 1979. </year>
Reference-contexts: Thus, characteristics such as the fairness and load balancing capabilities of a scheduling algorithm cannot be studied using the above approach. Another alternative approach to distributed program analysis, which does not involve runtime monitoring, is program simulation <ref> [7, 8] </ref>. The performance of the conser-vative approach [7] highly depends on lookahead, that is, the prediction of future execution. The optimistic approach [8] suffers from the overhead of rolling back and usually needs hardware support for good performance. <p> Thus, characteristics such as the fairness and load balancing capabilities of a scheduling algorithm cannot be studied using the above approach. Another alternative approach to distributed program analysis, which does not involve runtime monitoring, is program simulation [7, 8]. The performance of the conser-vative approach <ref> [7] </ref> highly depends on lookahead, that is, the prediction of future execution. The optimistic approach [8] suffers from the overhead of rolling back and usually needs hardware support for good performance.
Reference: [8] <author> D.R. Jefferson and H. Sowizral, </author> <title> "Fast Concurrent Simulation Using the Time Warp Mechanism, Part I: Local Control," </title> <type> Tech. Rep. </type> <institution> N-1906-AF, RAND Corporation, </institution> <month> Dec. </month> <year> 1982. </year>
Reference-contexts: Thus, characteristics such as the fairness and load balancing capabilities of a scheduling algorithm cannot be studied using the above approach. Another alternative approach to distributed program analysis, which does not involve runtime monitoring, is program simulation <ref> [7, 8] </ref>. The performance of the conser-vative approach [7] highly depends on lookahead, that is, the prediction of future execution. The optimistic approach [8] suffers from the overhead of rolling back and usually needs hardware support for good performance. <p> Another alternative approach to distributed program analysis, which does not involve runtime monitoring, is program simulation [7, 8]. The performance of the conser-vative approach [7] highly depends on lookahead, that is, the prediction of future execution. The optimistic approach <ref> [8] </ref> suffers from the overhead of rolling back and usually needs hardware support for good performance. In previous work [9, 10, 11] we provided a general solution which addressed some of the drawbacks of the above approaches by performing non-intrusive monitoring of a distributed application through on-line intrusion removal.
Reference: [9] <author> W. Wu, M. Spezialetti, and R. Gupta, </author> <title> "On-line Avoidance of the Intrusive Affects of Monitoring on Runtime Scheduling Decisions," </title> <booktitle> 16th IEEE-CS Int'l Conf. on Distributed Computing Systems, </booktitle> <pages> pages 216-223, </pages> <address> Hong Kong, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: The performance of the conser-vative approach [7] highly depends on lookahead, that is, the prediction of future execution. The optimistic approach [8] suffers from the overhead of rolling back and usually needs hardware support for good performance. In previous work <ref> [9, 10, 11] </ref> we provided a general solution which addressed some of the drawbacks of the above approaches by performing non-intrusive monitoring of a distributed application through on-line intrusion removal. <p> We identified and characterized the intrusive effects of monitoring into three categories: communication intrusion, scheduling intrusion and execution intrusion. We have identified the key issues and presented solutions for the on-line removal of each type of intrusion in <ref> [9, 10, 11] </ref>. Intrusion removal is performed by tracking the relative progress of computation and communication activities at each site. The notion of time has been extended such that it can be used to estimate the times at which events would have occurred in the absence of monitoring. <p> Thus, the decisions of process scheduling and the outcome of a non-deterministic receive could be altered. These two alterations are referred to as scheduling intrusion and execution intrusion individually. Detailed analysis of various monitoring intrusions have been presented in <ref> [9, 10, 11] </ref> To perform intrusion removal we must ensure that the intrusive effects of monitoring actions on the communication, scheduling and execution at each site are avoided. Processes are allowed to execute until they reach a critical point in their execution. <p> The detailed description of the techniques for maintaining the communication intrusion time and the link intrusion time, and the modified point-to-point communication protocol were presented in [11]. The round-robin scheduling paradigm and the message passing library were modified <ref> [9, 10, 11] </ref>. Before a decision at any process scheduling point or any non-deterministic message reception point is made, the relative progress of the computation and communication is determined by examining the computation intrusion time, comp , and the communication intrusion time, comm . <p> Finally, the time spent on monitoring-related activities is not charged to the time slice of any running process and therefore the same time slice is guaranteed for any running process in both the presence and absence of monitoring. Please refer to the detailed descrip tion in <ref> [9, 10, 11] </ref>.
Reference: [10] <author> W. Wu, M. Spezialetti, and R. Gupta, </author> <title> "On-line Avoidance of Communication Intrusion in Token Ring Networks," </title> <booktitle> 9th IASTED Int'l Conf. Parallel and Distributed Computing and Systems, </booktitle> <pages> pp. 429-436, </pages> <address> Washington, D.C., </address> <month> Oct., </month> <year> 1997. </year>
Reference-contexts: The performance of the conser-vative approach [7] highly depends on lookahead, that is, the prediction of future execution. The optimistic approach [8] suffers from the overhead of rolling back and usually needs hardware support for good performance. In previous work <ref> [9, 10, 11] </ref> we provided a general solution which addressed some of the drawbacks of the above approaches by performing non-intrusive monitoring of a distributed application through on-line intrusion removal. <p> We identified and characterized the intrusive effects of monitoring into three categories: communication intrusion, scheduling intrusion and execution intrusion. We have identified the key issues and presented solutions for the on-line removal of each type of intrusion in <ref> [9, 10, 11] </ref>. Intrusion removal is performed by tracking the relative progress of computation and communication activities at each site. The notion of time has been extended such that it can be used to estimate the times at which events would have occurred in the absence of monitoring. <p> Thus, the decisions of process scheduling and the outcome of a non-deterministic receive could be altered. These two alterations are referred to as scheduling intrusion and execution intrusion individually. Detailed analysis of various monitoring intrusions have been presented in <ref> [9, 10, 11] </ref> To perform intrusion removal we must ensure that the intrusive effects of monitoring actions on the communication, scheduling and execution at each site are avoided. Processes are allowed to execute until they reach a critical point in their execution. <p> Further, each message is attached with a timestamp (CT; comp ) where CT and comp represent the clock time and the computation intrusion time individually when the message is generated. In <ref> [10] </ref>, we extended the token-ring protocol for removing communication intrusion, which maintains the token intrusion time and ensures the correct order of message transmission in the network. In the monitored execution, the token could be either behind or ahead of the computation at a site when it is seized. <p> The detailed description of the techniques for maintaining the communication intrusion time and the link intrusion time, and the modified point-to-point communication protocol were presented in [11]. The round-robin scheduling paradigm and the message passing library were modified <ref> [9, 10, 11] </ref>. Before a decision at any process scheduling point or any non-deterministic message reception point is made, the relative progress of the computation and communication is determined by examining the computation intrusion time, comp , and the communication intrusion time, comm . <p> Finally, the time spent on monitoring-related activities is not charged to the time slice of any running process and therefore the same time slice is guaranteed for any running process in both the presence and absence of monitoring. Please refer to the detailed descrip tion in <ref> [9, 10, 11] </ref>. <p> The logical token-ring protocol is then implemented according to the protocol presented in <ref> [10] </ref>. In the Communication Module of the point-to-point system, the IP protocol has been modified to be aware of the intrusion times experienced by the links and sites as shown state and the message M is not ahead of the communication at site s.
Reference: [11] <author> W. Wu, M. Spezialetti, and R. Gupta," </author> <title> A Protocol for Removing Communication Intrusion in Monitored Distributed Systems," </title> <booktitle> 18th IEEE-CS Int'l Conf. on Distributed Computing Systems, </booktitle> <address> Amsterdam, The Nether-lands, </address> <month> May </month> <year> 1998. </year>
Reference-contexts: The performance of the conser-vative approach [7] highly depends on lookahead, that is, the prediction of future execution. The optimistic approach [8] suffers from the overhead of rolling back and usually needs hardware support for good performance. In previous work <ref> [9, 10, 11] </ref> we provided a general solution which addressed some of the drawbacks of the above approaches by performing non-intrusive monitoring of a distributed application through on-line intrusion removal. <p> We identified and characterized the intrusive effects of monitoring into three categories: communication intrusion, scheduling intrusion and execution intrusion. We have identified the key issues and presented solutions for the on-line removal of each type of intrusion in <ref> [9, 10, 11] </ref>. Intrusion removal is performed by tracking the relative progress of computation and communication activities at each site. The notion of time has been extended such that it can be used to estimate the times at which events would have occurred in the absence of monitoring. <p> We developed a logical token-ring communication protocol by modifying the IP protocol and integrating the intrusion removal techniques into the protocol for removing communication intrusion in the token-ring system. The enhanced communication protocol for removing communication intrusion in an arbitrary point-to-point network in the point-to-point system <ref> [11] </ref> has also been implemented and experimented. The scheduler in the Linux OS kernel has been modified and enhanced to remove the scheduling intrusion. <p> Thus, the decisions of process scheduling and the outcome of a non-deterministic receive could be altered. These two alterations are referred to as scheduling intrusion and execution intrusion individually. Detailed analysis of various monitoring intrusions have been presented in <ref> [9, 10, 11] </ref> To perform intrusion removal we must ensure that the intrusive effects of monitoring actions on the communication, scheduling and execution at each site are avoided. Processes are allowed to execute until they reach a critical point in their execution. <p> The communication intrusion time represents the communication delays experienced by the local computation as well as all incoming links. It is calculated as the maximum of the local computation intrusion time and all of the link intrusion times. In <ref> [11] </ref>, techniques for maintaining the communication intrusion time and the link intrusion time were developed and presented. A site is required to send an enter monitoring message and an end monitoring message to all of its outgoing sites right before it starts monitoring-related execution and terminates the monitoring-related execution individually. <p> Oth erwise, the site is in the normal, that is transmit state, and application messages are transmitted as usual. The detailed description of the techniques for maintaining the communication intrusion time and the link intrusion time, and the modified point-to-point communication protocol were presented in <ref> [11] </ref>. The round-robin scheduling paradigm and the message passing library were modified [9, 10, 11]. <p> The detailed description of the techniques for maintaining the communication intrusion time and the link intrusion time, and the modified point-to-point communication protocol were presented in [11]. The round-robin scheduling paradigm and the message passing library were modified <ref> [9, 10, 11] </ref>. Before a decision at any process scheduling point or any non-deterministic message reception point is made, the relative progress of the computation and communication is determined by examining the computation intrusion time, comp , and the communication intrusion time, comm . <p> Finally, the time spent on monitoring-related activities is not charged to the time slice of any running process and therefore the same time slice is guaranteed for any running process in both the presence and absence of monitoring. Please refer to the detailed descrip tion in <ref> [9, 10, 11] </ref>. <p> It forwards the enter monitoring and end monitoring messages according to the communication intrusion removal algorithms. Please refer to <ref> [11] </ref> for details. In the Execution Module, fork and exit system calls, and non-deterministic message reception functions in the Socket library are modified such that the actions at these critical points are taken only when the communication does not lag behind the computation.
References-found: 11

