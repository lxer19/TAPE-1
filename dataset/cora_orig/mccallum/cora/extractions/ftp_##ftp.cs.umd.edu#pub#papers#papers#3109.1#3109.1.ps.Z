URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3109.1/3109.1.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: vadik@cs.umd.edu pugh@cs.umd.edu  
Title: Simplifying Polynomial Constraints Over Integers to Make Dependence Analysis More Precise  
Author: Vadim Maslov William Pugh 
Note: This work is supported by an NSF PYI grant CCR-9157384 and by a Packard Fellowship.  
Address: College Park, MD 20742  
Affiliation: Institute for Advanced Computer Studies Dept. of Computer Science Dept. of Computer Science Univ. of Maryland,  
Date: February, 1994  
Pubnum: UMIACS-TR-93-68.1  CS-TR-3109.1  
Abstract: Why do existing parallelizing compilers and environments fail to parallelize many realistic FORTRAN programs? One of the reasons is that these programs contain a number of linearized array references, such as A(M*N*i+N*j+k) or A(i*(i+1)/2+j). Performing exact dependence analysis for these references requires testing polynomial constraints for integer solutions. Most existing dependence analysis systems, however, restrict themselves to solving affine constraints only, so they have to make worst-case assumptions whenever they encounter a polynomial constraint. In this paper we introduce an algorithm which exactly and efficiently solves a class of polynomial constraints which arise in dependence testing. Another important application of our algorithm is to generate code for loop transformation known as symbolic blocking (tiling). 
Abstract-found: 1
Intro-found: 1
Reference: [AK87] <author> J. R. Allen and K. Kennedy. </author> <title> Automatic translation of Fortran programs to vector form. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 9(4) </volume> <pages> 491-542, </pages> <month> October </month> <year> 1987. </year>
Reference-contexts: To improve locality (that is, to better use the memory cache) the loop transformation known as blocking or tiling <ref> [AK87] </ref> is applied to this loop nest. The idea of transformation is to block (tile) the iteration space into blocks such that each block requires data which fits into cache.
Reference: [Buc85] <author> B. </author> <title> Buchberger. Grobner bases: an algorithmic method in polynomial ideal theory. </title> <editor> In N. K. Bose, editor, </editor> <booktitle> Multidimensional Systems Theory. </booktitle> <address> D. </address> <publisher> Reidel Publishing Co., </publisher> <year> 1985. </year>
Reference-contexts: Other approaches. A number of computer algebra books and papers <ref> [KL92, Buc85, DST88] </ref> are devoted to solving polynomial constraints over the complex and real numbers. Since we are interested in polynomial constraints over the integers, we cannot directly use their results.
Reference: [DST88] <author> J. H. Davenport, Y. Siret, and E. Tournier. </author> <title> Computer Algebra, Systems and Algorithms for Algebraic Computation. </title> <publisher> Academic Press, </publisher> <year> 1988. </year>
Reference-contexts: Other approaches. A number of computer algebra books and papers <ref> [KL92, Buc85, DST88] </ref> are devoted to solving polynomial constraints over the complex and real numbers. Since we are interested in polynomial constraints over the integers, we cannot directly use their results.
Reference: [HP91] <author> M. Haghighat and C. Polychronopoulos. </author> <title> Symbolic dependence analysis for high-performance par-allelizing compilers. </title> <booktitle> In Advances In Languages And Compilers for Parallel Processing, </booktitle> <month> August </month> <year> 1991. </year>
Reference-contexts: We call this rectangular linearization. Triangular linearization (see Section 1.2) that is used quite often in scientific codes is not handled. * Even for the case of rectangular linearization it cannot handle constraints imposed by triangular iter ation space. Parafrase-2. In <ref> [HP91] </ref> the authors propose to use a symbolic version of Banerjee's inequalities for dependence testing, but it is known that Banerjee's inequalities do not detect independence in case of linearized subscript functions [Mas92].
Reference: [HP93] <author> M. Haghighat and C. Polychronopoulos. </author> <title> Symbolic analysis: A basis for parallelization, optimization and scheduling of programs. </title> <booktitle> In Sixth Annual Workshop on Programming Languages and Compilers for Parallel Computing, </booktitle> <address> Portland, OR, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: To alleviate the inexactness of Banerjee's inequalities, Haghighat and Polychronopoulos propose to detect monotonically increasing and decreasing subscript function using the finite differences method <ref> [HP93] </ref>. When the subscript function is monotonically changing, the reference cannot hit the same memory cell on the next iteration, and therefore no output dependence can exist from the reference to itself.
Reference: [KL92] <author> Deepak Kapur and Yagiti Lakshman. </author> <title> Elimination methods: an introduction. </title> <editor> In Bruce Donald, Deepak Kapur, and Joseph Mundy, editors, </editor> <booktitle> Symbolic and Numerical Computation for Artificial Intelligence. </booktitle> <publisher> Academic Press, </publisher> <year> 1992. </year>
Reference-contexts: Other approaches. A number of computer algebra books and papers <ref> [KL92, Buc85, DST88] </ref> are devoted to solving polynomial constraints over the complex and real numbers. Since we are interested in polynomial constraints over the integers, we cannot directly use their results.
Reference: [KP93] <author> Wayne Kelly and William Pugh. </author> <title> A framework for unifying reordering transformations. </title> <type> Technical Report CS-TR-3193, </type> <institution> Dept. of Computer Science, University of Maryland, College Park, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: a framework of Uniform Loop Transformations 2 0 2 4 6 y xy = 5 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? x 1 y 2x + 7 y x + 5 <ref> [KP93] </ref>.
Reference: [Mas92] <author> Vadim Maslov. Delinearization: </author> <title> an efficient way to break multiloop dependence equations. </title> <booktitle> In ACM SIGPLAN '92 Conf. on Programming Language Design and Implementation, </booktitle> <address> San Francisco, California, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction In this paper we describe techniques for simplifying polynomial constraints. This work supersedes our previous work on dependence testing of non-linear subscripts <ref> [Mas92] </ref> and allows us to handle polynomial constraints that arise in a number of situations. This work is also an extension of the Omega test [Pug92, PW92, PW93] | the system that simplifies conjunctions of affine constraints over integers and performs exact elimination of existentially quantified variables. <p> This is rather typical example of loop nest with linearized references, which are met quite often in real programs, and <ref> [Mas92] </ref> discusses in length why linearization is used. <p> This dependence is described by the set of constraints (1) that we want to be able to simplify to (2). All existing dependence analysis techniques (that we know of) except for one fail to prove that this dependence is loop-independent. Symbolic delinearization <ref> [Mas92] </ref> can prove this, but it has serious limitations discussed in Section 8. 1.2 Triangular linearization Consider the program in Figure 2. Since the one-dimensional array A is a linearized version of a triangular matrix A, a reference to A (i; j) is expressed as A (i*(i+1)/2 + j). <p> In this paragraph we compare our polynomial constraints simplification algorithm with symbolic delinearization <ref> [Mas92] </ref>. 10 First, we prove that our algorithm exactly simplifies all problems that can be handled by symbolic delinearization. <p> Parafrase-2. In [HP91] the authors propose to use a symbolic version of Banerjee's inequalities for dependence testing, but it is known that Banerjee's inequalities do not detect independence in case of linearized subscript functions <ref> [Mas92] </ref>. To alleviate the inexactness of Banerjee's inequalities, Haghighat and Polychronopoulos propose to detect monotonically increasing and decreasing subscript function using the finite differences method [HP93].
Reference: [Pug92] <author> William Pugh. </author> <title> The Omega test: a fast and practical integer programming algorithm for dependence analysis. </title> <journal> Communications of the ACM, </journal> <volume> 8 </volume> <pages> 102-114, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: 1 Introduction In this paper we describe techniques for simplifying polynomial constraints. This work supersedes our previous work on dependence testing of non-linear subscripts [Mas92] and allows us to handle polynomial constraints that arise in a number of situations. This work is also an extension of the Omega test <ref> [Pug92, PW92, PW93] </ref> | the system that simplifies conjunctions of affine constraints over integers and performs exact elimination of existentially quantified variables.
Reference: [PW92] <author> William Pugh and David Wonnacott. </author> <title> Going beyond integer programming with the Omega test to eliminate false data dependences. </title> <type> Technical Report CS-TR-3191, </type> <institution> Dept. of Computer Science, University of Maryland, College Park, </institution> <month> December </month> <year> 1992. </year> <note> An earlier version of this paper appeared at the SIGPLAN PLDI'92 conference. </note>
Reference-contexts: 1 Introduction In this paper we describe techniques for simplifying polynomial constraints. This work supersedes our previous work on dependence testing of non-linear subscripts [Mas92] and allows us to handle polynomial constraints that arise in a number of situations. This work is also an extension of the Omega test <ref> [Pug92, PW92, PW93] </ref> | the system that simplifies conjunctions of affine constraints over integers and performs exact elimination of existentially quantified variables.
Reference: [PW93] <author> William Pugh and David Wonnacott. </author> <title> An evaluation of exact methods for analysis of value-based array data dependences. </title> <booktitle> In Sixth Annual Workshop on Programming Languages and Compilers for Parallel Computing, </booktitle> <address> Portland, OR, </address> <month> August </month> <year> 1993. </year> <month> 12 </month>
Reference-contexts: 1 Introduction In this paper we describe techniques for simplifying polynomial constraints. This work supersedes our previous work on dependence testing of non-linear subscripts [Mas92] and allows us to handle polynomial constraints that arise in a number of situations. This work is also an extension of the Omega test <ref> [Pug92, PW92, PW93] </ref> | the system that simplifies conjunctions of affine constraints over integers and performs exact elimination of existentially quantified variables.
References-found: 11

