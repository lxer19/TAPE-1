URL: http://www.cs.dartmouth.edu/~doug/v101.ps
Refering-URL: http://www.cs.dartmouth.edu/~doug/
Root-URL: http://www.cs.dartmouth.edu
Title: Virology 101 almost anybody make a self-reproducing program [1], almost everybody already has one: just
Author: M. Douglas McIlroy 
Note: The principle Not only can  does not deter us from providing them to computer users any more than does the incendiary nature of gasoline keep us from selling it to motorists.  
Address: Murray Hill, New Jersey 07974  
Affiliation: Bell Laboratories  
Abstract: There is nothing mysterious about computer viruses. A working, but easily observable, virus can be written in a few lines of code. Although particular virus attacks may be guarded against, no general defense within one domain of reference is possible; viruses are a natural consequence of stored-program computation. Like other hazards of technol I intend to demonstrate a simple, yet realistic, computer virus for people who may be curious but who have not been motivated to dabble in this shady field. Nothing here will edify folks bent on mischief. The example is made for clarity; it makes no malign effort to hide in obscure recesses of a computer system. It has been expressed in a highly accessible languagethe shell language of UNIX systems. Thus it may be understood without resort to ``microscope and tweezers.'' [3] For good cause, it has not been tested. Ostensibly as a public service, but probably more to establish priestly mystery, writers about viruses usually omit the details. One claimed, ``Most computer programmers, aside from virus researchers, have ... difficulty in writing the code to make a virus replicate itself and secure itself to another disk.'' [4] Despite the claim, programs that reproduce themselves are not hard to make [9]. Indeed, like M. Jourdain, who was astonished to learn he'd been speaking prose all his life [6], programmers make or use them unconsciously in everyday work. ogy, their threat may be mitigated by cautious behavior and community sanctions.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Dewdney, </author> <title> A.K. Computer recreations. </title> <publisher> Scientific American 250, </publisher> <month> 5 (May, </month> <year> 1984), </year> <pages> 15-19. </pages>
Reference: 2. <author> Duff, T.D.S. </author> <title> Viral attacks on UNIX system security. </title> <booktitle> In Proceedings of the Winter 1989 Usenix conference, Usenix Association, </booktitle> <address> Berkeley, </address> <month> January, </month> <year> 1989. </year>
Reference: 3. <author> Eichen, M. and Rochlis, J. </author> <title> With microscope and tweezers: an analysis of the Internet virus of Novem-ber 1988. </title> <institution> Massachusetts Institute of Technology, </institution> <year> 1988. </year>
Reference: 4. <author> Highland, H.J. </author> <title> Random bits and bytes. </title> <booktitle> Computers and Security 7 (1988), </booktitle> <pages> 337-346. </pages>
Reference: 5. <author> Kocher, B. </author> <note> A hygiene lesson. CACM 32 (1989), 3,6. </note>
Reference: 6. <author> Moli ere Le Bourgeois Gentilhomme. </author> <title> Act II, Scene 4, </title> <address> Paris, </address> <month> 1670. </month>
Reference: 7. <author> Reeds, J.A. /bin/sh: </author> <title> The biggest UNIX security loophole. </title> <institution> AT&T Bell Laboratories, </institution> <address> Murray Hill, NJ, </address> <year> 1984. </year>
Reference: 8. <author> Shulman, S. </author> <title> `Virus-proof' computer security system. </title> <note> Nature 337 (5 January, 1989), 4. </note>
Reference: 9. <author> Thompson, K. </author> <title> Reflections on trusting trust. </title> <booktitle> CACM 27 (1984), </booktitle> <pages> 761-764. </pages>
References-found: 9

