URL: http://www-sal.cs.uiuc.edu/~nachum/papers/limit-revised.ps.gz
Refering-URL: http://sal.cs.uiuc.edu/~nachum/papers/
Root-URL: http://www.cs.uiuc.edu
Title: REWRITE, REWRITE, REWRITE, REWRITE, REWRITE,  
Author: Nachum DERSHOWITZ Stephane KAPLAN David A. PLAISTED 
Date: Revised  
Note: Communicated by Received  Is there no limit? |Job 16:3  
Address: 1304 West Springfield Ave., Urbana, IL 61801-2987, U.S.A.  Ramat-Gan 52100, Israel  Orsay 91405, France  Chapel Hill, NC 27514-3175, U.S.A.  
Affiliation: Department of Computer Science, University of Illinois at Urbana-Champaign,  Department of Computer Science, Bar-Ilan University,  Laboratoire de Recherche en Informatique, Universite de Paris-Sud,  Department of Computer Science, University of North Carolina at Chapel Hill,  
Abstract: We study properties of rewrite systems that are not necessarily terminating, but allow instead for transfinite derivations that have a limit. In particular, we give conditions for the existence of a limit and for its uniqueness and relate the operational and algebraic semantics of infinitary theories. We also consider sufficient completeness of hierarchical systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Goguen, J. Thatcher and E. Wagner, </author> <title> Initial algebra semantics and continuous algebras, </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 24(1) (1977), </volume> <pages> 69-95. </pages>
Reference-contexts: Alternative notions of completion have been studied in the algebraic framework, leading to different initial models, each with its own abstract properties (see, for instance, <ref> [1, 19, 27] </ref>). Rewrite, rewrite, rewrite, rewrite, rewrite, . . . 21 Since our approach is unusual, we first illustrate the difficulty in assigning an appropriate algebraic semantics in the continuous case. In particular, the "natural" semantics identifies all terms, whenever there is identity function or axiom of idempotence. <p> The proof is as in the finite case, with t M t 0 if, and only if, M [t] = M [t 0 ]. 8. Hierarchical systems In this section, we consider typed systems (cf. <ref> [1, 13] </ref>), which are more general than the constructor systems of Section 5. A vocabulary (signature) is now a pair hS; F i, where S stands for a finite family of sort names and F is a finite family of operators on S.
Reference: [2] <author> Y. Chen and M. J. O'Donnell, </author> <title> Infinite terms and infinite rewritings, in: Extended Abstracts 2d Internat. </title> <booktitle> Workshop on Conditional and Typed Rewriting Systems, </booktitle> <address> Montreal, </address> <publisher> Canada (Concordia Univ.), </publisher> <pages> pp. </pages> <month> 45-52 (June </month> <year> 1990). </year>
Reference-contexts: Algebraic semantics involving infinite terms were developed by [3, 4, 21, 19a] from a different perspective (particularly, the formal meaning of recursive program schemata). The work in [9, 19, 27] is more closely related to our approach. Recent developments, following our preliminary work [6, 7] in this area, include <ref> [2, 10, 15] </ref>. 2. Infinite chains We are interested in properties of binary relations. Let ! denote any binary relation, and ! fl its reflexive-transitive closure. <p> This is why we will work instead with oriented equations, interpreted in a model as inequations (but see <ref> [2] </ref>). Definition 13. <p> There are many alternatives to the definitions we have given that are worth exploring: normal forms can be defined as (possibly infinite) terms to which no rewrite applies (see [15]); the initial terms of derivations are permitted to be infinite (finitely-representable infinite terms are dealt with in <ref> [2, 10] </ref>); strong convergence properties, like top-termination, can be required (see [10, 11, 15]); transfinite terms (with paths of length greater than !) can be considered, in which subterms do not necessarily "disappear" after being pushed down ! times (cf. [2]); rewrite rules containing infinite terms (from T 1 ) themselves, <p> to be infinite (finitely-representable infinite terms are dealt with in [2, 10]); strong convergence properties, like top-termination, can be required (see [10, 11, 15]); transfinite terms (with paths of length greater than !) can be considered, in which subterms do not necessarily "disappear" after being pushed down ! times (cf. <ref> [2] </ref>); rewrite rules containing infinite terms (from T 1 ) themselves, and not just applying to infinite terms, can be allowed. Acknowledgement We thank John Givler, Jan-Willem Klop, Andrzej Tarlecki, Fer-Jan de Vries, and Ron Watro for their help debugging and improving this paper.
Reference: [3] <author> B. Courcelle, </author> <note> Arbres infinis et systemes d'equations, R.A.I.R.O. Informa-tique Theorique 13(1) (1979), 31-48. </note>
Reference-contexts: With these operational notions in place, Section 7 gives "algebraic" semantics to infinite rewriting; it is followed by a section on the semantics of hierarchically typed systems. We conclude with a brief discussion. Algebraic semantics involving infinite terms were developed by <ref> [3, 4, 21, 19a] </ref> from a different perspective (particularly, the formal meaning of recursive program schemata). The work in [9, 19, 27] is more closely related to our approach. Recent developments, following our preliminary work [6, 7] in this area, include [2, 10, 15]. 2.
Reference: [4] <author> B. Courcelle, </author> <title> Infinite trees in normal form and recursive equations having a unique solution, Math. </title> <booktitle> Systems Theory 13 (1979), </booktitle> <pages> 131-180. </pages>
Reference-contexts: With these operational notions in place, Section 7 gives "algebraic" semantics to infinite rewriting; it is followed by a section on the semantics of hierarchically typed systems. We conclude with a brief discussion. Algebraic semantics involving infinite terms were developed by <ref> [3, 4, 21, 19a] </ref> from a different perspective (particularly, the formal meaning of recursive program schemata). The work in [9, 19, 27] is more closely related to our approach. Recent developments, following our preliminary work [6, 7] in this area, include [2, 10, 15]. 2. <p> A position p in t at which a rewrite can take place is called a redex. We use jRj to denote the maximum depth of a left-hand side of a system R. Since we are interested here primarily in sequences of rewrites issuing from finite terms t 0 (unlike <ref> [4, 10] </ref>), we will restrict our attention to that case: 3 Definition 7. <p> Example (4) is a non-left-linear, top-terminating system, for which the theorem does not hold. Left-linearity turns out to be crucial (as in <ref> [4] </ref>, but cf. [11]), and throughout this paper, we deal exclusively with left-linear systems. Unfortunately, left-linearity is insufficient. The following is an example (from 4 Our preliminary versions of this claim omitted the top-termination requirement. 8 N. Dershowitz, S. Kaplan, D. A. <p> In <ref> [4] </ref>, a condition on normal forms, called "R-propriety", is used to establish existence of unique solutions (as functions over T 1 ) to non-constructor operators, defined by a set of recursive rules. 7.
Reference: [5] <author> N. Dershowitz, </author> <title> Termination of rewriting, </title> <journal> J. Symbolic Computation, </journal> <month> 3(1&2) </month> <year> (1987), </year> <month> 69-115; 4(3) </month> <year> (1987), </year> <pages> 409-410. </pages>
Reference-contexts: Examples (2) and (4) demonstrate the need for both requirements. 5. Existence of normal forms If a system R is finitely terminating, then any finite term has at least one finite normal form. For a survey of methods for establishing finite termination of rewrite systems, see <ref> [5] </ref>. In this section, we weaken this demand, and consider, instead, !-converging systems, for which every derivation of length ! has a limit. We concentrate on special cases that are of practical importance. 12 N. Dershowitz, S. Kaplan, D. A. Plaisted A top-terminating system need not be finitely terminating. <p> To provide semantic methods of proving existence of limits, we define top-termination orderings for proofs of top-termination that are analogous to the well-founded quasi-orderings used to show finite termination (see <ref> [5] </ref>). Definition 11.
Reference: [6] <author> N. Dershowitz and S. Kaplan, </author> <title> Rewrite, Rewrite, Rewrite, Rewrite, </title> <booktitle> Rewrite,.. . in: Proc. 16th ACM Symp. on Principles of Programming Languages, </booktitle> <address> Austin, TX, </address> <pages> pp. </pages> <month> 250-259 (January </month> <year> 1989). </year>
Reference-contexts: For one approach to their use in computing, see [23]. The theory of rewriting is an outgrowth of the study of the lambda calculus and combinatory logic, and fl Preliminary versions <ref> [6, 7] </ref> of ideas in this paper were presented at the Sixteenth ACM Symposium on Principles of Programming Languages, Austin, TX (January 1989) and at the Sixteenth EATCS International Colloquium on Automata, Languages and Programming, Stresa, Italy (July 1989). y Supported in part by the U.S. <p> We conclude with a brief discussion. Algebraic semantics involving infinite terms were developed by [3, 4, 21, 19a] from a different perspective (particularly, the formal meaning of recursive program schemata). The work in [9, 19, 27] is more closely related to our approach. Recent developments, following our preliminary work <ref> [6, 7] </ref> in this area, include [2, 10, 15]. 2. Infinite chains We are interested in properties of binary relations. Let ! denote any binary relation, and ! fl its reflexive-transitive closure.
Reference: [7] <author> N. Dershowitz, S. Kaplan and D. A. Plaisted, </author> <title> Infinite normal forms (Preliminary version), </title> <booktitle> in: Proc. 16th EATCS Internat. Colloquium on Automata, Languages and Programming, Stresa, Italy, Lecture Notes in Computer Science 372, </booktitle> <pages> pp. </pages> <address> 249-262 (Springer, Berlin, </address> <booktitle> 1989); corrigendum distributed at colloquium. </booktitle>
Reference-contexts: For one approach to their use in computing, see [23]. The theory of rewriting is an outgrowth of the study of the lambda calculus and combinatory logic, and fl Preliminary versions <ref> [6, 7] </ref> of ideas in this paper were presented at the Sixteenth ACM Symposium on Principles of Programming Languages, Austin, TX (January 1989) and at the Sixteenth EATCS International Colloquium on Automata, Languages and Programming, Stresa, Italy (July 1989). y Supported in part by the U.S. <p> We conclude with a brief discussion. Algebraic semantics involving infinite terms were developed by [3, 4, 21, 19a] from a different perspective (particularly, the formal meaning of recursive program schemata). The work in [9, 19, 27] is more closely related to our approach. Recent developments, following our preliminary work <ref> [6, 7] </ref> in this area, include [2, 10, 15]. 2. Infinite chains We are interested in properties of binary relations. Let ! denote any binary relation, and ! fl its reflexive-transitive closure.
Reference: [8] <author> N. Dershowitz and J.-P. Jouannaud, </author> <title> Rewrite systems, </title> <booktitle> Chap. 6 in Handbook of Theoretical Computer Science, </booktitle> <volume> vol. </volume> <editor> B: </editor> <title> Formal Models and Semantics, </title> <editor> J. van Leeuwen, ed., </editor> <publisher> in press (North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990). </year>
Reference-contexts: National Science Foundation under Grant CCR 88 02282. 2 N. Dershowitz, S. Kaplan, D. A. Plaisted has important applications in abstract data type specifications and functional programming languages. For surveys of the theory of rewriting, see [13, 16], or <ref> [8] </ref>; our notations conform to the latter. A key property for rewrite systems is that every term rewrites to a unique normal form. <p> Infinite chains We are interested in properties of binary relations. Let ! denote any binary relation, and ! fl its reflexive-transitive closure. We use and fl 1 This property should not be confused with (finite) "convergence" of (finitely) terminating and confluent systems (to unique normal forms)|in the terminology of <ref> [8] </ref>. Rewrite, rewrite, rewrite, rewrite, rewrite, . . . 3 for their respective inverses.
Reference: [9] <author> H. Ehrig, F. Parisi-Presicce, P. Boehm, C. Rieckhoff, C. Dmitrovici and M. Groe-Rhode, </author> <title> Algebraic data type and process specifications based on projection spaces, in Recent Trends in Data Type Specifications: </title> <booktitle> Selected Papers 5th Workshop on Specification of Abstract Data Types, Gullane, Scotland, Lecture Notes in Computer Science 332, </booktitle> <pages> pp. </pages> <address> 23-43 (Springer, Berlin, </address> <year> 1988). </year>
Reference-contexts: We conclude with a brief discussion. Algebraic semantics involving infinite terms were developed by [3, 4, 21, 19a] from a different perspective (particularly, the formal meaning of recursive program schemata). The work in <ref> [9, 19, 27] </ref> is more closely related to our approach. Recent developments, following our preliminary work [6, 7] in this area, include [2, 10, 15]. 2. Infinite chains We are interested in properties of binary relations. Let ! denote any binary relation, and ! fl its reflexive-transitive closure.
Reference: [10] <author> W. M. Farmer and R. J. Watro, </author> <title> Redex capturing in term graph rewriting, </title> <type> Technical report M89-36, </type> <institution> The Mitre Corporation, Bedford, </institution> <address> MA, </address> <year> 1989. </year>
Reference-contexts: Algebraic semantics involving infinite terms were developed by [3, 4, 21, 19a] from a different perspective (particularly, the formal meaning of recursive program schemata). The work in [9, 19, 27] is more closely related to our approach. Recent developments, following our preliminary work [6, 7] in this area, include <ref> [2, 10, 15] </ref>. 2. Infinite chains We are interested in properties of binary relations. Let ! denote any binary relation, and ! fl its reflexive-transitive closure. <p> A position p in t at which a rewrite can take place is called a redex. We use jRj to denote the maximum depth of a left-hand side of a system R. Since we are interested here primarily in sequences of rewrites issuing from finite terms t 0 (unlike <ref> [4, 10] </ref>), we will restrict our attention to that case: 3 Definition 7. <p> Theorem 1. If R is a left-linear top-terminating rewrite system, then R is !-closed. This is essentially the same as the !!-Lemma in <ref> [10] </ref>, where only top-terminating derivations are considered. 4 Proof. <p> Unfortunately, left-linearity is insufficient. The following is an example (from 4 Our preliminary versions of this claim omitted the top-termination requirement. 8 N. Dershowitz, S. Kaplan, D. A. Plaisted <ref> [10] </ref>) of a left-linear non-top-terminating system that is not !-closed: a ! b (6) We have f (c; a) ! ! but f (c; a) 6! ! A term t is said to overlap a term t 0 if t|after renaming all its variables so as not to conflict with those <p> There are many alternatives to the definitions we have given that are worth exploring: normal forms can be defined as (possibly infinite) terms to which no rewrite applies (see [15]); the initial terms of derivations are permitted to be infinite (finitely-representable infinite terms are dealt with in <ref> [2, 10] </ref>); strong convergence properties, like top-termination, can be required (see [10, 11, 15]); transfinite terms (with paths of length greater than !) can be considered, in which subterms do not necessarily "disappear" after being pushed down ! times (cf. [2]); rewrite rules containing infinite terms (from T 1 ) themselves, <p> have given that are worth exploring: normal forms can be defined as (possibly infinite) terms to which no rewrite applies (see [15]); the initial terms of derivations are permitted to be infinite (finitely-representable infinite terms are dealt with in [2, 10]); strong convergence properties, like top-termination, can be required (see <ref> [10, 11, 15] </ref>); transfinite terms (with paths of length greater than !) can be considered, in which subterms do not necessarily "disappear" after being pushed down ! times (cf. [2]); rewrite rules containing infinite terms (from T 1 ) themselves, and not just applying to infinite terms, can be allowed.
Reference: [11] <author> John S. Givler, </author> <title> Continuous rewriting systems, unpublished note, </title> <institution> IBM T. J. Watson Research Center, </institution> <year> 1989. </year>
Reference-contexts: Example (4) is a non-left-linear, top-terminating system, for which the theorem does not hold. Left-linearity turns out to be crucial (as in [4], but cf. <ref> [11] </ref>), and throughout this paper, we deal exclusively with left-linear systems. Unfortunately, left-linearity is insufficient. The following is an example (from 4 Our preliminary versions of this claim omitted the top-termination requirement. 8 N. Dershowitz, S. Kaplan, D. A. <p> have given that are worth exploring: normal forms can be defined as (possibly infinite) terms to which no rewrite applies (see [15]); the initial terms of derivations are permitted to be infinite (finitely-representable infinite terms are dealt with in [2, 10]); strong convergence properties, like top-termination, can be required (see <ref> [10, 11, 15] </ref>); transfinite terms (with paths of length greater than !) can be considered, in which subterms do not necessarily "disappear" after being pushed down ! times (cf. [2]); rewrite rules containing infinite terms (from T 1 ) themselves, and not just applying to infinite terms, can be allowed.
Reference: [12] <author> G. Huet, </author> <title> Confluent reductions: abstract properties and applications to term rewriting systems, </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 27(4) (1980), </volume> <pages> 797-821. </pages>
Reference-contexts: A programming language with infinite constructor normal forms is described in [20]. 6. Uniqueness of normal forms Recall that a relation ! is !-confluent if ! ffi ! ! ! ! ffi ! . Confluence is decidable for finitely terminating systems <ref> [17, 12] </ref>, but not for non-finitely-terminating ones. For !-converging systems, we can use the following variation: Rewrite, rewrite, rewrite, rewrite, rewrite, . . . 17 Definition 12. A binary relation ! over a topological space is semi!- confluent if ! ffi ! fl ! ! ffi ! .
Reference: [13] <author> G. Huet and D. C. Oppen, </author> <title> Equations and rewrite rules: A survey, in Formal Language Theory: Perspectives and Open Problems, </title> <editor> R. </editor> <publisher> Book, ed., </publisher> <pages> pp. </pages> <publisher> 349-405 (Academic Press, </publisher> <address> New York, </address> <year> 1980). </year>
Reference-contexts: National Science Foundation under Grant CCR 88 02282. 2 N. Dershowitz, S. Kaplan, D. A. Plaisted has important applications in abstract data type specifications and functional programming languages. For surveys of the theory of rewriting, see <ref> [13, 16] </ref>, or [8]; our notations conform to the latter. A key property for rewrite systems is that every term rewrites to a unique normal form. <p> The proof is as in the finite case, with t M t 0 if, and only if, M [t] = M [t 0 ]. 8. Hierarchical systems In this section, we consider typed systems (cf. <ref> [1, 13] </ref>), which are more general than the constructor systems of Section 5. A vocabulary (signature) is now a pair hS; F i, where S stands for a finite family of sort names and F is a finite family of operators on S.
Reference: [14] <author> S. Kaplan, </author> <title> Conditional rewrite rules, </title> <booktitle> Theoretical Computer Science 33 (1984), </booktitle> <pages> 175-193. </pages>
Reference: [15] <author> J. R. Kennaway, J. W. Klop, M. R. Sleep and F. J. de Vries, </author> <title> Transfinite reductions in orthogonal term rewriting systems, </title> <type> Technical report, </type> <institution> Centrum voor Wiskunde en Informatica, Amsterdam, </institution> <note> to appear, </note> <year> 1990. </year>
Reference-contexts: Algebraic semantics involving infinite terms were developed by [3, 4, 21, 19a] from a different perspective (particularly, the formal meaning of recursive program schemata). The work in [9, 19, 27] is more closely related to our approach. Recent developments, following our preliminary work [6, 7] in this area, include <ref> [2, 10, 15] </ref>. 2. Infinite chains We are interested in properties of binary relations. Let ! denote any binary relation, and ! fl its reflexive-transitive closure. <p> Indeed, the following non!-converging orthogonal system (discovered by <ref> [15] </ref>) does not have unique !-normal forms: a ! f (g (a)) g (x) ! x The term a has normal forms, f ! and g ! . Nonetheless: Corollary. If R is an !-converging orthogonal rewrite system, then R is uniquely!-normalizing. Proof. <p> There are many alternatives to the definitions we have given that are worth exploring: normal forms can be defined as (possibly infinite) terms to which no rewrite applies (see <ref> [15] </ref>); the initial terms of derivations are permitted to be infinite (finitely-representable infinite terms are dealt with in [2, 10]); strong convergence properties, like top-termination, can be required (see [10, 11, 15]); transfinite terms (with paths of length greater than !) can be considered, in which subterms do not necessarily "disappear" <p> have given that are worth exploring: normal forms can be defined as (possibly infinite) terms to which no rewrite applies (see [15]); the initial terms of derivations are permitted to be infinite (finitely-representable infinite terms are dealt with in [2, 10]); strong convergence properties, like top-termination, can be required (see <ref> [10, 11, 15] </ref>); transfinite terms (with paths of length greater than !) can be considered, in which subterms do not necessarily "disappear" after being pushed down ! times (cf. [2]); rewrite rules containing infinite terms (from T 1 ) themselves, and not just applying to infinite terms, can be allowed.
Reference: [16] <author> J. W. Klop, </author> <title> Term rewriting systems: A tutorial, </title> <journal> Bulletin European Assoc. for Theoret. Comput. Sci. </journal> <volume> 32, </volume> <pages> pp. </pages> <month> 143-183 (June </month> <year> 1987). </year>
Reference-contexts: National Science Foundation under Grant CCR 88 02282. 2 N. Dershowitz, S. Kaplan, D. A. Plaisted has important applications in abstract data type specifications and functional programming languages. For surveys of the theory of rewriting, see <ref> [13, 16] </ref>, or [8]; our notations conform to the latter. A key property for rewrite systems is that every term rewrites to a unique normal form. <p> there exists a fair derivation t 0 ! R t 1 ! R ! ! R t 1 with limit t 1 . 5 This property should not be confused with the (finite) "unique normal form" (i.e. at most one normal form) of property (finitely) confluent systems|in the terminology of <ref> [16] </ref>. 10 N. Dershowitz, S. Kaplan, D. A. Plaisted Of course, unfair derivations can also need lead to normal forms. For example, either rule in f (x) ! f (f (x)) (11) can be forever ignored. Proof. <p> Proof. Suppose t 0 ! R t 1 ! R ! ! R t 1 , and t 0 ! r t 0 0 by some rule r in R. It is well-known (see <ref> [16, 22] </ref>) that there exist terms t 0 i such that, for all i &lt; !, r # k r # k i ! R t 0 If one goes far enough along the !-converging derivations t 0 ! R t 1 ! R ! ! 0 ! R t 0
Reference: [17] <author> D. E. Knuth and P. B. Bendix, </author> <title> Simple word problems in universal algebras, in Computational Problems in Abstract Algebra, </title> <editor> J. Leech, </editor> <publisher> ed., </publisher> <pages> pp. </pages> <publisher> 263-297 (Pergamon Press, Oxford, </publisher> <year> 1970). </year> <title> Rewrite, rewrite, rewrite, rewrite, rewrite, </title> . . . <type> 29 </type>
Reference-contexts: A programming language with infinite constructor normal forms is described in [20]. 6. Uniqueness of normal forms Recall that a relation ! is !-confluent if ! ffi ! ! ! ! ffi ! . Confluence is decidable for finitely terminating systems <ref> [17, 12] </ref>, but not for non-finitely-terminating ones. For !-converging systems, we can use the following variation: Rewrite, rewrite, rewrite, rewrite, rewrite, . . . 17 Definition 12. A binary relation ! over a topological space is semi!- confluent if ! ffi ! fl ! ! ffi ! . <p> Without this condition on provability, a simple system like a ! b (26) with constructors b and c, would mistakenly be deemed confluent. Even for left-linear, top-terminating systems, !-confluence is undecidable. Also, the joinability of critical pairs (as in <ref> [17] </ref>) is not a sufficient (nor necessary) condition for !-confluence, as can be seen from the following !-converging system: a ! b g (x; b) ! c (27) The term g (x; a) rewrites in one step to either f (g (x; a)) or g (x; b), both of which rewrite
Reference: [18] <author> Z. Manna and S. Ness, </author> <title> On the termination of Markov algorithms, </title> <booktitle> in: Proc. 3d Hawaii Internat. Conf. on System Science, </booktitle> <address> Honolulu, HI, </address> <pages> pp. </pages> <month> 789-792 </month> <year> (1970). </year>
Reference-contexts: Applying the finitely terminating rule h (g (x); f (y)) ! h (x; y) reduces this number; applying the !-converging rule a ! g (a) effects no change. (This example is an adaptation of the finite termination method of <ref> [18] </ref>.) In some cases, one can use the transitive closure of ! R for and the reflexive-transitive closure of ! S for _ . A rewrite system is right-linear if the right-hand sides have at most one occurrence of each variable. Corollary. Let R and S be two rewrite systems.
Reference: [19] <author> B. Moller, </author> <title> On the algebraic specification of infinite objects|Ordered and continuous models of algebraic types, </title> <journal> Acta Informatica 22(5) (1984), </journal> <pages> 537-578. </pages>
Reference-contexts: We conclude with a brief discussion. Algebraic semantics involving infinite terms were developed by [3, 4, 21, 19a] from a different perspective (particularly, the formal meaning of recursive program schemata). The work in <ref> [9, 19, 27] </ref> is more closely related to our approach. Recent developments, following our preliminary work [6, 7] in this area, include [2, 10, 15]. 2. Infinite chains We are interested in properties of binary relations. Let ! denote any binary relation, and ! fl its reflexive-transitive closure. <p> Alternative notions of completion have been studied in the algebraic framework, leading to different initial models, each with its own abstract properties (see, for instance, <ref> [1, 19, 27] </ref>). Rewrite, rewrite, rewrite, rewrite, rewrite, . . . 21 Since our approach is unusual, we first illustrate the difficulty in assigning an appropriate algebraic semantics in the continuous case. In particular, the "natural" semantics identifies all terms, whenever there is identity function or axiom of idempotence.
Reference: [19a] <author> T. Naoi and Y. Inagaki, </author> <title> Algebraic semantics and complexity of term rewriting ssystems, </title> <booktitle> in: Proc. 3d Internat. Conf. on Rewriting Techniques and Applications, Lecture Notes in Computer Science 355, </booktitle> <pages> pp. </pages> <address> 311-325 (Springer, Berlin, </address> <year> 1989). </year>
Reference-contexts: With these operational notions in place, Section 7 gives "algebraic" semantics to infinite rewriting; it is followed by a section on the semantics of hierarchically typed systems. We conclude with a brief discussion. Algebraic semantics involving infinite terms were developed by <ref> [3, 4, 21, 19a] </ref> from a different perspective (particularly, the formal meaning of recursive program schemata). The work in [9, 19, 27] is more closely related to our approach. Recent developments, following our preliminary work [6, 7] in this area, include [2, 10, 15]. 2.
Reference: [20] <author> S. Narain, LOG(F): </author> <title> An optimal combination of logic programming, rewriting and lazy evaluation, </title> <type> Ph.D. thesis, </type> <institution> Dept. of Computer Science, Univ. of California, </institution> <address> Los Angeles, CA, </address> <year> 1988. </year>
Reference-contexts: Similarly, for top-terminating !-confluent systems, it is undecidable whether the distance the distance between a term and its normal form is less than a given * &gt; 0. A programming language with infinite constructor normal forms is described in <ref> [20] </ref>. 6. Uniqueness of normal forms Recall that a relation ! is !-confluent if ! ffi ! ! ! ! ffi ! . Confluence is decidable for finitely terminating systems [17, 12], but not for non-finitely-terminating ones.
Reference: [21] <author> M. Nivat, </author> <title> On the interpretation of recursive polyadic program schemes, </title> <journal> Symp. Math. </journal> <volume> 15, </volume> <pages> pp. </pages> <address> 255-281 (Rome, </address> <year> 1975). </year>
Reference-contexts: With these operational notions in place, Section 7 gives "algebraic" semantics to infinite rewriting; it is followed by a section on the semantics of hierarchically typed systems. We conclude with a brief discussion. Algebraic semantics involving infinite terms were developed by <ref> [3, 4, 21, 19a] </ref> from a different perspective (particularly, the formal meaning of recursive program schemata). The work in [9, 19, 27] is more closely related to our approach. Recent developments, following our preliminary work [6, 7] in this area, include [2, 10, 15]. 2. <p> Finite and infinite (first-order or ground) terms, with this distance, form a complete ultra-metric space <ref> [21] </ref>. A rewrite system R is a finite family of pairs (l; r) of (finite) terms of T (F ; X ), each written in the form l ! r; we will assume that all variables appearing on a right-hand side r also appear on the corresponding left-hand side l.
Reference: [22] <author> M. J. O'Donnell, </author> <title> Computing in Systems Described by Equations, </title> <booktitle> Lecture Notes in Computer Science 58 (Springer, </booktitle> <address> Berlin, </address> <year> 1977). </year>
Reference-contexts: A system that is both left-linear and non-overlapping is called orthogonal (or "regular"). Orthogonal systems are important since they are always confluent and can have at most one normal form <ref> [22] </ref>, but since they need not be finitely terminating, there may be terms having no normal form. <p> Proof. Suppose t 0 ! R t 1 ! R ! ! R t 1 , and t 0 ! r t 0 0 by some rule r in R. It is well-known (see <ref> [16, 22] </ref>) that there exist terms t 0 i such that, for all i &lt; !, r # k r # k i ! R t 0 If one goes far enough along the !-converging derivations t 0 ! R t 1 ! R ! ! 0 ! R t 0
Reference: [23] <author> M. J. O'Donnell, </author> <title> Equational Logic as a Programming Language, </title> <publisher> MIT Press (Cambridge, </publisher> <address> MA, </address> <year> 1985). </year>
Reference-contexts: 1. Introduction Rewrite systems are sets of directed equations used to compute by repeat edly replacing equal terms in a given formula, as long as possible. For one approach to their use in computing, see <ref> [23] </ref>.
Reference: [24] <author> J.-C. Raoult and J. Vuillemin, </author> <title> Operational and semantic equivalence between recursive programs, </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 27(4) (1980), </volume> <pages> 772-796. </pages>
Reference-contexts: Under the stated circumstances, the "commutation" property ! S ffi ! R ! R ffi ! fl S holds; see <ref> [24] </ref>. This corollary does not have wide applicability, since the left-hand sides of finitely-terminating R may not refer to symbols used by S to construct an infinite structure.
Reference: [25] <author> D. Scott, </author> <title> Data types as lattices, </title> <journal> SIAM J. Computing 5 (1976), </journal> <pages> 522-587. </pages>
Reference-contexts: Algebraic semantics In this section, we consider algebraic aspects of infinitary theories|that is, their models|and their connection to operational aspects (namely, !- rewriting). Since we are interested in infinite computations, it is natural to work with continuous models. (We refer the reader to <ref> [25, 26] </ref> for general references on the topic.) It is also natural to use a topological completion process. Alternative notions of completion have been studied in the algebraic framework, leading to different initial models, each with its own abstract properties (see, for instance, [1, 19, 27]).
Reference: [26] <author> J. Stoy, </author> <title> Denotational semantics: The Scott-Strachey approach to programming languages, </title> <publisher> MIT Press (Cambridge, </publisher> <address> MA, </address> <year> 1977). </year>
Reference-contexts: Algebraic semantics In this section, we consider algebraic aspects of infinitary theories|that is, their models|and their connection to operational aspects (namely, !- rewriting). Since we are interested in infinite computations, it is natural to work with continuous models. (We refer the reader to <ref> [25, 26] </ref> for general references on the topic.) It is also natural to use a topological completion process. Alternative notions of completion have been studied in the algebraic framework, leading to different initial models, each with its own abstract properties (see, for instance, [1, 19, 27]).
Reference: [27] <author> A. Tarlecki and M. Wirsing, </author> <title> Continuous abstract data types, </title> <note> Fundamenta Informaticae 9 (1986), 95-126. </note>
Reference-contexts: We conclude with a brief discussion. Algebraic semantics involving infinite terms were developed by [3, 4, 21, 19a] from a different perspective (particularly, the formal meaning of recursive program schemata). The work in <ref> [9, 19, 27] </ref> is more closely related to our approach. Recent developments, following our preliminary work [6, 7] in this area, include [2, 10, 15]. 2. Infinite chains We are interested in properties of binary relations. Let ! denote any binary relation, and ! fl its reflexive-transitive closure. <p> Alternative notions of completion have been studied in the algebraic framework, leading to different initial models, each with its own abstract properties (see, for instance, <ref> [1, 19, 27] </ref>). Rewrite, rewrite, rewrite, rewrite, rewrite, . . . 21 Since our approach is unusual, we first illustrate the difficulty in assigning an appropriate algebraic semantics in the continuous case. In particular, the "natural" semantics identifies all terms, whenever there is identity function or axiom of idempotence. <p> These definitions are consonant with those of <ref> [27] </ref> for their notion of continuous specifications. Sufficient completeness means that any finite term t of an old sort, built with old and (possibly) new operators, is smaller than a (possibly infinite) term t 0 built with old operators only.
Reference: [28] <author> M. Wirsing, </author> <title> Algebraic specification, </title> <booktitle> in Handbook of Theoretical Computer Science, </booktitle> <volume> vol. </volume> <editor> B: </editor> <title> Formal Models and Semantics, </title> <editor> J. van Leeuwen, ed., </editor> <publisher> in press (North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990). </year>
Reference-contexts: For instance, the specification: constructors: a: ! elem c: elem fi elem ! elem derived operator: b: ! elem law: b _ c (a; b) is sufficiently complete in our sense. Note that in the classical, finitary framework <ref> [28] </ref>, it would simply be rejected as being (finitely) incomplete. Now, the main result is that, as in the finitary case, a hierarchically consistent and sufficiently complete specification satisfies its hierarchical constraints|in the following sense: Theorem 15.
References-found: 29

