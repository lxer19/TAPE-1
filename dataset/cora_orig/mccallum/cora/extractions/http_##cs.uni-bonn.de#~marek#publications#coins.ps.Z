URL: http://cs.uni-bonn.de/~marek/publications/coins.ps.Z
Refering-URL: http://cs.uni-bonn.de/~marek/index-en.html
Root-URL: http://cs.uni-bonn.de
Email: e-mail: cucker@upf.es  e-mail: marek@cs.uni-bonn.de  e-mail: koiran@lip.ens-lyon.fr  e-mail: lickteig@cs.uni-bonn.de  e-mail: kai@cs.uni-bonn.de  
Title: On real Turing machines that toss coins  
Author: Felipe Cucker Marek Karpinski Pascal Koiran Thomas Lickteig Kai Werther 
Note: Partially supported by DGICyT PB 920498, the ESPRIT BRA Program of the EC under contracts no. 7141 and 8556, projects ALCOM II and NeuroCOLT. Partially supported by Leibniz Center for Research in Computer Science, by the DFG grant KA 673/4-1 ,and by the ESPRIT BR Grants 7097 and EC-US 030. This work was done while this author was visiting DIMACS (Rutgers University), and was supported by the NeuroCOLT project and by an INRIA fellowship. Supported by DFG Grant Li-405/2-1  
Date: May 7, 1996  
Address: Balmes 132, Barcelona 08008 SPAIN  GERMANY  46 allee d'Italie, 69364 Lyon Cedex 07 FRANCE  GERMANY  GERMANY  
Affiliation: Universitat Pompeu Fabra  Institut fur Informatik Universitat Bonn  LIP, Ecole Normale Superieure de Lyon  Institut fur Informatik Universitat Bonn  Institut fur Informatik Universitat Bonn  
Abstract: In this paper we consider real counterparts of classical probabilistic complexity classes in the framework of real Turing machines as introduced by Blum, Shub, and Smale [2]. We give an extension of the well-known "BPP P=poly" result from discrete complexity theory to a very general setting in the real number model. This result holds for real inputs, real outputs, and random elements drawn from an arbitrary probability distribution over IR m . Then we turn to the study of Boolean parts, that is, classes of languages of zero-one vectors accepted by real machines. In particular we show that the classes BPP, PP, PH, and PSPACE are not enlarged by allowing the use of real constants and arithmetic at unit cost provided we restrict branching to equality tests. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.L. Balcazar, J. Diaz and J. Gabarro. </author> <title> Structural Complexity I, </title> <booktitle> EATCS Monographs on Theoretical Computer Science, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference-contexts: We now consider a problem involving the cosine function. As shown in [33], one has infinite VC dimension in this case. On an input w 2 IR, we wish to estimate the area of the subset E w of Y = <ref> [0; 1] </ref> 2 defined by the condition y (1 + cos wx)=2. By e.g. the Chernoff bounds, this can be done efficiently by drawing points (x 1 ; y 1 ); : : :; (x k ; y k ) from the uniform distribution on [0; 1] 2 and counting how <p> E w of Y = <ref> [0; 1] </ref> 2 defined by the condition y (1 + cos wx)=2. By e.g. the Chernoff bounds, this can be done efficiently by drawing points (x 1 ; y 1 ); : : :; (x k ; y k ) from the uniform distribution on [0; 1] 2 and counting how many belong to E w . On the other hand, we shall see that no finite deterministic sample can achieve a worst-case error better than 1/4 when w ranges over IR. <p> Theorem 10 Let s be the sign function: s (x) = 1 for x 0, s (x) = 0 otherwise. For any finite set f (x 1 ; y 1 ); : : : ; (x k ; y k )g <ref> [0; 1] </ref> 2 , w2IR fi fi 1 k X s 1 + cos wx i y i 0 2 fi fi fi Proof. <p> Definition 6 We shall consider the classes k;IR , k;IR , ZPP IR , R IR , BPP IR and PP IR that are all defined upon DNP IR by just mimicking their definitions in the Boolean case (see chapters 6 and 8 of <ref> [1] </ref>). Moreover, if C is any one of these classes then C = IR denote the corresponding class defined by equational machines. In the Boolean case the class R is also denoted by RP. <p> Some basic properties of the above considered complexity classes follow again in the same manner as in the Boolean case (see Chapters 6 and 8 of <ref> [1] </ref>). We state them without proof in the following proposition. Recall before from [11] that the set BSCP = fB j 9b 2 f0; 1g n that satisfies the decision circuit Bg is DNP IR -complete with decision circuit as defined in Section 3.
Reference: [2] <author> L. Blum, M. Shub and S. Smale. </author> <title> On the theory of computation and complexity over the real numbers: NP-completeness, recursive functions and universal machines, </title> <journal> Bulletin of the AMS, </journal> <volume> 21(1), </volume> <pages> pp. 1-46, </pages> <year> 1989. </year>
Reference-contexts: We consider both uniform and non-uniform models. The classical non-uniform models are straight-line programs, algebraic circuits and algebraic decision trees. Our uniform model is the real Turing machine introduced by Blum, Shub and Smale in the foundational paper <ref> [2] </ref>. In section 3 we present a generalization of the well-known "BPP P=poly" result from discrete complexity theory to the real number model. This problem implicitly goes back at least to Heintz and Schnorr [17]. <p> Some applications of our simulation are presented in section 4. In particular, we prove by quite different methods a theorem which is very similar to Heintz and Schnorr's [17]. Lower bounds are discussed in section 5. A recent issue in the theory initiated by Blum, Shub and Smale <ref> [2] </ref> is the comparison of the computational power of real and classical (discrete) Turing machines. This comparison is performed by feeding the real machines with binary inputs, i.e. with finite strings of zeros and ones. <p> Proof. Let f (w) = (wx 1 mod 2; : : :; wx k mod 2), and assume first that the x i 's are rationally independent. As pointed out in [33], it follows from Theorem 3.2 and Lemma 2.7 in [24] that f (IR) is dense in <ref> [0; 2] </ref> k . This implies in particular that for any * &gt; 0, any j &lt; *=2, and any x 2 IR k such that jjxjj &lt; *=2, some f (w) falls in the ball of center x and radius j. <p> 1, then the difference between the "empirical area" and the true area converges to 1/4 or more when w ! 0 (w6=0). 6 Probabilistic complexity classes within PAR IR In the rest of this paper we shall deal with the theory of computability and complexity over the reals introduced in <ref> [2] </ref>. The ground concepts and notations in what follows are taken from there. <p> A further step was taken in [21] which passed from a structured model |the neural net| to a general one |the real Turing machine. However, that paper did not deal with the real Turing machine as introduced in <ref> [2] </ref> but with a restricted version of it that can do only a moderate use of multiplication namely, all rational functions intermediately computed (in the input variables as well as in the machine's constants) must have degree and coefficient size bounded by the running time.
Reference: [3] <author> A. Blumer, A Ehrenfeucht, D. Haussler, and M. Warmuth. </author> <title> Learnability and the Vapnik-Chervonenkis dimension. </title> <journal> Journal of the ACM, </journal> <volume> 36(4), </volume> <pages> pp. 929-965, </pages> <year> 1990. </year>
Reference-contexts: Nodes with indegree 0 are either labeled as input nodes or with elements of IR (we shall call them constant nodes). Nodes with indegree 2 are labeled with the binary operators 2 F must satisfy a benign measurability condition called permissibility. See for instance Appendix A.1 in <ref> [3] </ref> or Appendix C in [28]. In the rest of the paper, we assume implicitly that this condition is satisfied. One can show that it is indeed satisfied in all concrete examples considered. 5 on IR, i.e., +, fi, or =.
Reference: [4] <author> A. Borodin. </author> <title> On relating time and space to size and depth, </title> <journal> SIAM J. on Computing, </journal> <volume> 6, </volume> <pages> pp. 733-744, </pages> <year> 1977. </year>
Reference-contexts: We note that if f0; 1g fl 12 denotes the set of all finite sequences of elements in f0; 1g there is a natural inclusion of f0; 1g fl in IR 1 that we shall freely use. Borodin <ref> [4] </ref> has proved that the class of sets PAR recognized in parallel polynomial time coincides with PSPACE.
Reference: [5] <author> P. Burgisser, M. Karpinski and T. Lickteig. </author> <title> On randomized semi-algebraic test complexity, </title> <journal> J. of Complexity, </journal> <volume> 9, </volume> <pages> pp. 231-251, </pages> <year> 1993. </year>
Reference-contexts: This result is a straightforward consequence of Corollary 3. As Corollary 3, it can be formulated in the algebraic decision tree model. Lower bounds for probabilistic decision trees were also obtained by Burgisser et al. <ref> [5] </ref>. Their results hold only for the (quite large) class of algebraic probability measures, whereas Theorem 7 holds for arbitrary probability measures. Finally, randomization does not help much for parallel computing with circuits. <p> This is the case for instance for the problem of deciding whether a given straight-line program computes the zero function. On the other hand, there are sets for which coin flipping can help (see <ref> [5] </ref>). 7 On Boolean parts of subclasses of PAR = One research direction that has been worked out intensively during the last few years is the study of the computational power of real Turing machines over binary inputs. The general problem can be roughly stated in the following way.
Reference: [6] <author> B. Chazelle. </author> <title> Computational geometry: a retrospective. </title> <booktitle> In Proc. 26th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 75-94, </pages> <year> 1994. </year>
Reference-contexts: This tool was originally developed to study some statistical aspects of pattern recognition, or learning theory as one would say nowadays (see e.g. [36]). It turned out to have important applications in other areas as well, especially in computational geometry (see e.g. the survey <ref> [6] </ref>). A similar theorem was established by Meyer auf der Heide [25] for the algebraic decision tree model. Our result has a much wider range of applicability since it is only based on a VC dimension hypothesis and therefore, it is distribution independent.
Reference: [7] <author> M. Coste and M.F. Roy. </author> <title> Thom's lemma, the coding of real algebraic numbers and the topology of semi-algebraic sets, </title> <journal> J. of Symbolic Computation, </journal> <volume> 5, </volume> <pages> pp. 121-129, </pages> <year> 1988. </year>
Reference: [8] <author> F. Cucker. </author> <title> On the Complexity of Quantifier Elimination: the structural approach, </title> <journal> The Computer Journal, </journal> <volume> 36, </volume> <pages> pp. 400-408, </pages> <year> 1993. </year>
Reference-contexts: A formal definition of PAR IR can be found in <ref> [8] </ref>. In [11] the subclass DNP IR of NP IR is defined by requiring the guesses to belong to the set f0; 1g.
Reference: [9] <author> F. Cucker and P. Koiran. </author> <title> Computing over the reals with addition and order: higher complexity classes, </title> <note> to appear in J. of Complexity. </note>
Reference-contexts: Finally, a last differentiation can be done according to whether these machines branch over order tests or only over equalities (in this case we will say that the machine is equational or order-free). Results concerning Boolean parts have been established for all these settings. Thus, in [22] and <ref> [9] </ref> Boolean parts of several complexity classes for additive machines are characterized. Also, in [21] and [12] Boolean parts of some complexity classes in the weak model are characterized whereas for complexity classes defined with unrestricted multiplications and divisions, this task is carried out in [10]. <p> Moreover, if the machines are order-free, i.e. they are required to branch only on equality tests, we now have that BP (P = add ) = P and that BP (NP = add ) = NP ([22]). These results were subsequently generalized in <ref> [9] </ref> to all the levels of the polynomial hierarchy constructed upon NP add (or NP = add ) as well as to the class PAR add (or PAR = add ) of sets computed in parallel polynomial time.
Reference: [10] <author> F. Cucker and D. Grigoriev. </author> <title> On the power of real Turing machines over binary inputs, </title> <note> to appear in SIAM J. on Computing. </note>
Reference-contexts: Thus, in [22] and [9] Boolean parts of several complexity classes for additive machines are characterized. Also, in [21] and [12] Boolean parts of some complexity classes in the weak model are characterized whereas for complexity classes defined with unrestricted multiplications and divisions, this task is carried out in <ref> [10] </ref>. We begin section 7 with a more detailed exposition of these previous results. In the last sections of this paper, we pursue the study of Boolean parts for equational real Turing machines. <p> The Boolean part of the latter are proven there to be PSPACE/poly (respectively PSPACE). Finally, in <ref> [10] </ref> it was shown that the Boolean part of PAR IR (the class of sets computed in parallel polynomial time with no restrictions on the use of multiplication) is PSPACE/poly.
Reference: [11] <author> F. Cucker and M. Matamala. </author> <title> On digital non-determinism, </title> <note> to appear in Math. Systems Theory. </note>
Reference-contexts: A formal definition of PAR IR can be found in [8]. In <ref> [11] </ref> the subclass DNP IR of NP IR is defined by requiring the guesses to belong to the set f0; 1g. <p> Some basic properties of the above considered complexity classes follow again in the same manner as in the Boolean case (see Chapters 6 and 8 of [1]). We state them without proof in the following proposition. Recall before from <ref> [11] </ref> that the set BSCP = fB j 9b 2 f0; 1g n that satisfies the decision circuit Bg is DNP IR -complete with decision circuit as defined in Section 3.
Reference: [12] <author> F. Cucker, M. Shub and S. Smale. </author> <title> Complexity separations in Koiran's weak model, </title> <journal> Theoretical Computer Science, </journal> <volume> 133, </volume> <pages> pp. 3-14, </pages> <year> 1993. </year>
Reference-contexts: Results concerning Boolean parts have been established for all these settings. Thus, in [22] and [9] Boolean parts of several complexity classes for additive machines are characterized. Also, in [21] and <ref> [12] </ref> Boolean parts of some complexity classes in the weak model are characterized whereas for complexity classes defined with unrestricted multiplications and divisions, this task is carried out in [10]. We begin section 7 with a more detailed exposition of these previous results. <p> It was shown that BP (P W ) = P/poly, where P W is the class of sets accepted in polynomial time in this weak model. Subsequently, several papers exhibited new results on Boolean parts. In <ref> [12] </ref> it was shown that BP (PAR W ) = PSPACE/poly where PAR W is the class of subsets of IR 1 recognized in weak parallel polynomial time.
Reference: [13] <author> C. Darken, M. Donahue, L. Gurvits, and E. Sontag. </author> <title> Rate of approximation results for neural network learning. </title> <type> Technical Report 93-07, </type> <institution> Siemens Corporate Research, Princeton, NJ, </institution> <year> 1993. </year>
Reference-contexts: Note that using Theorem A.2 in ([36], p. 170) instead of Theorem 3 yields the bound k = O (d log d) instead of k = O (d). This sharper bound also follows implicitly from the proof of Theorem 4.2 in <ref> [13] </ref>. Corollary 3 Let C be a probabilistic arithmetic circuit of size s with inputs in IR n , outputs in IR and random elements drawn from an arbitrary probability distribution on IR m .
Reference: [14] <author> S.B. Gashkov. </author> <title> The complexity of the realization of Boolean functions by networks of functional elements and by formulas in bases whose elements realize continuous functions, </title> <journal> Prob. Kibernetiki, </journal> <volume> 37, </volume> <pages> pp. 52-118, </pages> <note> 1980 (in Russian). </note>
Reference-contexts: It is important to notice that this latter problem deals in a natural way with a framework in which an algebraic model having real constants operates over binary inputs. Other references where this setting is also considered are the papers by Gashkov <ref> [14] </ref> and by Turan and Vatan [35]. Here the authors consider analog circuits that compute Boolean functions and they focus on lower and upper bounds for the size of those circuits with respect to some Boolean functions.
Reference: [15] <author> P. Goldberg and M. Jerrum. </author> <title> Bounding the Vapnik-Chervonenkis dimension of concept classes parameterized by real numbers. </title> <journal> Machine Learning, </journal> <volume> 18, </volume> <pages> pp. 131-148, </pages> <year> 1995. </year>
Reference-contexts: The number of satisfiable m-tuples of sign conditions is bounded by (8md=k) k . In his paper, Warren gave only a bound on the of non-zero sign assignements. The generalization to arbitrary sign assignements is easy, see for instance <ref> [15] </ref>. In fact, a slightly weaker bound is used by Meyer auf der Heide in [25]. There, the bound is easily derived from a well known result of Milnor [27] and Thom [34] that bounds the number of connected components of polynomial systems in IR n . <p> Then the function f C : IR n ! IR p computed by C is piecewise rational. This result also holds in the more powerful algebraic tree model if the circuit size s is replaced by the tree depth T (that was actually the computational model used in Goldberg-Jerrum <ref> [15] </ref>). Hence we retrieve Meyer auf der Heide's O (nT 2 ) bound for deterministically simulating probabilistic decision trees [25]. Note that this author only considered the case where P is the uniform distribution over f0; 1g m , and his argument cannot be generalized to arbitrary probability distributions. <p> We explain below how one can obtain the sharper result claimed here by going through the proof of the VC dimension bounds in <ref> [15] </ref>. The only difference with [15] is that we have to count how many straight-line programs in L have a different syntactical structure, i.e., cannot be obtained from one another by changing numerical constants. <p> We explain below how one can obtain the sharper result claimed here by going through the proof of the VC dimension bounds in <ref> [15] </ref>. The only difference with [15] is that we have to count how many straight-line programs in L have a different syntactical structure, i.e., cannot be obtained from one another by changing numerical constants. <p> It follows from the proof of Theorem 1 (see <ref> [15] </ref>) that the number of functions induced by fF L ; L 2 L (L 0 )g on any subset fx 1 ; : : : ; x N g IR n is bounded by (8ed 0 N=k) k . <p> Their result holds over any algebraically closed field K of characteristic zero. We can show that Theorem 6 also holds in this case since it is possible to recover the VC dimension bounds given in <ref> [15] </ref> for the real case.
Reference: [16] <author> D. Haussler. </author> <title> Decision theoretic generalizations of the PAC model for neural nets and other learning applications. </title> <journal> Information and Computation, </journal> <volume> 100, </volume> <pages> pp. 78-150, </pages> <year> 1992. </year>
Reference: [17] <author> J. Heintz and C.-P. Schnorr. </author> <title> Testing polynomials which are easy to compute. </title> <booktitle> In Logic and Algorithmic (an International Symposium held in honour of Ernst Specker), </booktitle> <pages> pp 237-254. </pages> <address> Monographie n o 30 de L'Enseignement Mathematique, </address> <year> 1982. </year> <note> A preliminary version appeared in Proc. 12th ACM Symposium on Theory of Computing, pp. 262-272, </note> <year> 1980. </year>
Reference-contexts: In section 3 we present a generalization of the well-known "BPP P=poly" result from discrete complexity theory to the real number model. This problem implicitly goes back at least to Heintz and Schnorr <ref> [17] </ref>. After giving a deterministic counterpart to Schwarz's probabilistic algorithm for testing polynomials [30], these authors write that "This statement sounds much like Adleman's (1978) observation that every problem which is decidable in random polynomial time has polynomial network size. <p> Some applications of our simulation are presented in section 4. In particular, we prove by quite different methods a theorem which is very similar to Heintz and Schnorr's <ref> [17] </ref>. Lower bounds are discussed in section 5. A recent issue in the theory initiated by Blum, Shub and Smale [2] is the comparison of the computational power of real and classical (discrete) Turing machines. <p> It can be shown by elementary calculations that this number can be larger or equal to 2 N only if N = O (v log v + k log d 0 ). Heintz and Schnorr <ref> [17] </ref> gave the bounds s = 6 (v 0 + n)(v 0 + n + 1) and u = 2v 0 (d + 1) 2 , where v 0 counts only the so-called non-scalar operations. Their result holds over any algebraically closed field K of characteristic zero. <p> (v 0 + n)(v 0 + n + 1) indeterminates (<ref> [17] </ref>, originally [18]), and then from Theorem 1. One advantage of our approach to Theorem 6 is that its relation with Schwarz's probabilistic testing algorithm is clearly established. That these two results are closely related was already pointed out in [17], but the nature of this relation remained somewhat mysterious. We have shown here that the existence of a deterministic testing method is not fortuitous: it follows from a general "derandomization" principle.
Reference: [18] <author> J. Heintz and M. Sieveking. </author> <title> Lower bounds for polynomials with algebraic coefficients. </title> <journal> Theoretical Computer Science, </journal> <volume> 11, </volume> <pages> pp. 321-330, </pages> <year> 1980. </year> <month> 18 </month>
Reference-contexts: This follows from the fact that if a polynomial of degree d in n variables can be evaluated in v 0 non-scalar operations its coefficients are polynomials of degree d (2v 0 + 1) in n + (v 0 + n)(v 0 + n + 1) indeterminates ([17], originally <ref> [18] </ref>), and then from Theorem 1. One advantage of our approach to Theorem 6 is that its relation with Schwarz's probabilistic testing algorithm is clearly established. That these two results are closely related was already pointed out in [17], but the nature of this relation remained somewhat mysterious.
Reference: [19] <author> O.H. Ibarra and S. Moran. </author> <title> Probabilistic algorithms for deciding equivalence of straight-line programs, </title> <journal> J. of the ACM, </journal> <volume> 30, </volume> <pages> pp. 217-228, </pages> <year> 1983. </year>
Reference-contexts: Using the modular techniques from [30], Ibarra and Moran <ref> [19] </ref> have located it in co R. Proposition 2 [19] For all k 1, ZSLP k 2 co R: Proof of Theorem 12. <p> Using the modular techniques from [30], Ibarra and Moran <ref> [19] </ref> have located it in co R. Proposition 2 [19] For all k 1, ZSLP k 2 co R: Proof of Theorem 12. Let C one of these classes, M an equational real Turing machine (that can be nondeterministic, probabilistic, parallel, etc) with respective resource bounds recognizing a language L in C = IR .
Reference: [20] <author> M. Karpinski and A. Macintyre. </author> <title> Polynomial bounds for VC dimension of sigmoidal neural networks. </title> <booktitle> Proc. 27th ACM Symposium on Theory of Computing, </booktitle> <year> 1995, </year> <month> pp.200-208. </month>
Reference-contexts: There, the bound is easily derived from a well known result of Milnor [27] and Thom [34] that bounds the number of connected components of polynomial systems in IR n . Note also that a related result in Warren's paper plays a crucial role in <ref> [20] </ref>. It seems thus that these geometric bounds are at the core of the problem. The notion of VC dimension can be generalized to real-valued functions as follows. Definition 2 Let F be a class of real valued functions on a domain X. <p> It is also possible to obtain good bounds in the case where pfaffian functions (such as, e.g., the exponential function) are allowed, using the recent results of <ref> [20] </ref>. The field of p-addic numbers is a more exotic domain of computation where some of the results given here for the real number model may apply.
Reference: [21] <author> P. Koiran. </author> <title> A weak version of the Blum, Shub & Smale model, </title> <note> NeuroColt Report 94-5. Available by anonymous ftp from cscx.cs.rhbnc.ac.uk in /pub/neurocolt/tech reports. A preliminary version appeared in Proc. 34th IEEE Symposium on Foundations of Computer Science, pp. 486-495, </note> <year> 1993. </year>
Reference-contexts: 1g n for boolean circuits or f0; 1g fl for Turing machines. 2 machines according to whether they can multiply or divide at unit cost, whether they cannot multiply or divide at all (additive machines) or whether they can do it in a restricted way (the weak model introduced in <ref> [21] </ref>). Finally, a last differentiation can be done according to whether these machines branch over order tests or only over equalities (in this case we will say that the machine is equational or order-free). Results concerning Boolean parts have been established for all these settings. <p> Results concerning Boolean parts have been established for all these settings. Thus, in [22] and [9] Boolean parts of several complexity classes for additive machines are characterized. Also, in <ref> [21] </ref> and [12] Boolean parts of some complexity classes in the weak model are characterized whereas for complexity classes defined with unrestricted multiplications and divisions, this task is carried out in [10]. We begin section 7 with a more detailed exposition of these previous results. <p> A further step was taken in <ref> [21] </ref> which passed from a structured model |the neural net| to a general one |the real Turing machine. <p> The only previous results on machines with multiplication can be found in <ref> [21] </ref>, where it is shown that BP (P = W ) = P and BP (P = The aim of this section is to compute the computational power of real Turing machines (that can freely use multiplication) branching on equalities. <p> Again, the Boolean parts computed will be uniform complexity classes but the extra power of the multiplication in the analog model will 15 appear under the form of an oracle in R (the class of one-side error probabilistic polynomial time). We begin with an easy lemma taken from <ref> [21] </ref> that will be helpful in the sequel.
Reference: [22] <author> P. Koiran. </author> <title> Computing over the reals with addition and order, </title> <journal> Theoretical Computer Science, </journal> <volume> 133, </volume> <pages> pp. 35-47, </pages> <year> 1993. </year>
Reference-contexts: Finally, a last differentiation can be done according to whether these machines branch over order tests or only over equalities (in this case we will say that the machine is equational or order-free). Results concerning Boolean parts have been established for all these settings. Thus, in <ref> [22] </ref> and [9] Boolean parts of several complexity classes for additive machines are characterized. Also, in [21] and [12] Boolean parts of some complexity classes in the weak model are characterized whereas for complexity classes defined with unrestricted multiplications and divisions, this task is carried out in [10]. <p> In [12] it was shown that BP (PAR W ) = PSPACE/poly where PAR W is the class of subsets of IR 1 recognized in weak parallel polynomial time. Also, for additive machines (i.e. real Turing machines that do not perform multiplications at all), it was shown in <ref> [22] </ref> that BP (P add ) = P/poly and that BP (NP add ) = NP/poly. Here P add and NP add denote the obvious classes but we recall that the nondeterministic guesses in this model are real numbers.
Reference: [23] <author> W. Maass. </author> <title> Bounds for the computational power and learning complexity of analog neural nets. </title> <booktitle> In Proc. 25 th STOC, </booktitle> <pages> pages 335-344, </pages> <year> 1993. </year>
Reference-contexts: The same problem 14 was then considered for neural networks with real weights and it was shown that they recognize in polynomial time exactly the sets in P/poly (cf. [32] and <ref> [23] </ref>). It is important to notice that this latter problem deals in a natural way with a framework in which an algebraic model having real constants operates over binary inputs. Other references where this setting is also considered are the papers by Gashkov [14] and by Turan and Vatan [35].
Reference: [24] <author> R. Ma~ne. </author> <title> Ergodic Theory and Differentiable Dynamics. </title> <publisher> Springer-Verlag, </publisher> <address> NY, </address> <year> 1987. </year>
Reference-contexts: Proof. Let f (w) = (wx 1 mod 2; : : :; wx k mod 2), and assume first that the x i 's are rationally independent. As pointed out in [33], it follows from Theorem 3.2 and Lemma 2.7 in <ref> [24] </ref> that f (IR) is dense in [0; 2] k . This implies in particular that for any * &gt; 0, any j &lt; *=2, and any x 2 IR k such that jjxjj &lt; *=2, some f (w) falls in the ball of center x and radius j.
Reference: [25] <editor> F. Meyer auf der Heide. </editor> <title> Simulating probabilistic by deterministic algebraic computation trees. </title> <journal> Theoretical Computer Science, </journal> <volume> 41, </volume> <pages> pp. 325-330, </pages> <year> 1985. </year>
Reference-contexts: It turned out to have important applications in other areas as well, especially in computational geometry (see e.g. the survey [6]). A similar theorem was established by Meyer auf der Heide <ref> [25] </ref> for the algebraic decision tree model. Our result has a much wider range of applicability since it is only based on a VC dimension hypothesis and therefore, it is distribution independent. <p> In his paper, Warren gave only a bound on the of non-zero sign assignements. The generalization to arbitrary sign assignements is easy, see for instance [15]. In fact, a slightly weaker bound is used by Meyer auf der Heide in <ref> [25] </ref>. There, the bound is easily derived from a well known result of Milnor [27] and Thom [34] that bounds the number of connected components of polynomial systems in IR n . Note also that a related result in Warren's paper plays a crucial role in [20]. <p> Hence we retrieve Meyer auf der Heide's O (nT 2 ) bound for deterministically simulating probabilistic decision trees <ref> [25] </ref>. Note that this author only considered the case where P is the uniform distribution over f0; 1g m , and his argument cannot be generalized to arbitrary probability distributions. One big advantage of our approach is that it provides distribution-independent bounds.
Reference: [26] <author> C. Michaux. </author> <title> Une remarque a propos des machines sur IR introduites par Blum, Shub et Smale, </title> <journal> C.R. Acad. Sci. Paris Serie I, </journal> <volume> 309, </volume> <pages> pp. 435-437, </pages> <year> 1989. </year>
Reference: [27] <author> J. Milnor. </author> <title> On the Betti numbers of real varieties, </title> <journal> Proc. Amer. Math. Soc., </journal> <volume> 15, </volume> <pages> pp. 275-280, </pages> <year> 1964. </year>
Reference-contexts: The generalization to arbitrary sign assignements is easy, see for instance [15]. In fact, a slightly weaker bound is used by Meyer auf der Heide in [25]. There, the bound is easily derived from a well known result of Milnor <ref> [27] </ref> and Thom [34] that bounds the number of connected components of polynomial systems in IR n . Note also that a related result in Warren's paper plays a crucial role in [20]. It seems thus that these geometric bounds are at the core of the problem.
Reference: [28] <author> D. Pollard. </author> <title> Convergence of Stochastic Processes. </title> <publisher> Springer Verlag, </publisher> <year> 1984. </year>
Reference-contexts: Nodes with indegree 2 are labeled with the binary operators 2 F must satisfy a benign measurability condition called permissibility. See for instance Appendix A.1 in [3] or Appendix C in <ref> [28] </ref>. In the rest of the paper, we assume implicitly that this condition is satisfied. One can show that it is indeed satisfied in all concrete examples considered. 5 on IR, i.e., +, fi, or =.
Reference: [29] <author> K. Romanik and J.S. Vitter. </author> <title> Using Vapnik-Chervonenkis dimension to analyse the testing complexity of program segments. </title> <type> Technical Report DUKE-TR-1994-28, </type> <institution> Department of Computer Science, Duke University, </institution> <year> 1994. </year> <note> This report is available online: http://www.cs.duke.edu/. </note>
Reference-contexts: We would like to thank Angus Macintyre for useful discussions on the exponential function and p-addic numbers. The anonymous referees suggested several improvements in the presentation of the paper, pointed out reference <ref> [29] </ref> and found a mistake in an earlier version of Theorem 6. 17
Reference: [30] <author> J.T. Schwartz. </author> <title> Fast probabilistic algorithms for verification of polynomials identities, </title> <journal> J. of the ACM, </journal> <volume> 27, </volume> <pages> pp. 701-717, </pages> <year> 1980. </year>
Reference-contexts: In section 3 we present a generalization of the well-known "BPP P=poly" result from discrete complexity theory to the real number model. This problem implicitly goes back at least to Heintz and Schnorr [17]. After giving a deterministic counterpart to Schwarz's probabilistic algorithm for testing polynomials <ref> [30] </ref>, these authors write that "This statement sounds much like Adleman's (1978) observation that every problem which is decidable in random polynomial time has polynomial network size. However in our situation Adleman's argument is not applicable since W (d; n; v) is not finite 1 ". <p> The application of theorem 4 is then still possible and allows us to obtain stronger results. 4 Applications In this section, we give a few applications of the techniques developed in the previous section. We start with a deterministic version of Schwarz's randomized testing algorithm <ref> [30] </ref>. Theorem 6 For any integers n; d; d 0 ; k; v, we define a set L = L (n; d; d 0 ; k; v) of straight-line programs as follows. <p> Using the modular techniques from <ref> [30] </ref>, Ibarra and Moran [19] have located it in co R. Proposition 2 [19] For all k 1, ZSLP k 2 co R: Proof of Theorem 12.
Reference: [31] <author> H. T. Siegelmann and E. D. Sontag. </author> <title> On the computational power of neural nets. </title> <booktitle> In Proc. Fifth ACM Workshop on Computational Learning Theory, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: A possible origin of the problem is the recent interest in the computational power of neural networks. The first results characterized the power of nets with rational weights working within polynomial time by showing that they recognize exactly the sets in P (cf. <ref> [31] </ref>). The same problem 14 was then considered for neural networks with real weights and it was shown that they recognize in polynomial time exactly the sets in P/poly (cf. [32] and [23]).
Reference: [32] <author> H. T. Siegelmann and E. D. Sontag. </author> <title> Analog computation via neural networks. </title> <journal> Theoretical Computer Science, </journal> <volume> 131(2) </volume> <pages> 331-360, </pages> <year> 1994. </year>
Reference-contexts: The same problem 14 was then considered for neural networks with real weights and it was shown that they recognize in polynomial time exactly the sets in P/poly (cf. <ref> [32] </ref> and [23]). It is important to notice that this latter problem deals in a natural way with a framework in which an algebraic model having real constants operates over binary inputs.
Reference: [33] <author> E. D. Sontag. </author> <title> Feedforward nets for interpolation and classification. </title> <journal> J. Comp. Syst. Sci., </journal> <volume> 45, </volume> <pages> pp. 20-48, </pages> <year> 1992. </year>
Reference-contexts: This error is smaller than * if and only if k &gt; d (1 *). Note that the same argument applies if S 0 is a multiset rather than an ordinary set. We now consider a problem involving the cosine function. As shown in <ref> [33] </ref>, one has infinite VC dimension in this case. On an input w 2 IR, we wish to estimate the area of the subset E w of Y = [0; 1] 2 defined by the condition y (1 + cos wx)=2. <p> Proof. Let f (w) = (wx 1 mod 2; : : :; wx k mod 2), and assume first that the x i 's are rationally independent. As pointed out in <ref> [33] </ref>, it follows from Theorem 3.2 and Lemma 2.7 in [24] that f (IR) is dense in [0; 2] k .
Reference: [34] <author> R. Thom. Sur l'homologie des varietes algebriques reelles. </author> <title> In Differential and combinatorial topolology, edited by S. Cairns, </title> <publisher> Princeton University Press, </publisher> <year> 1965. </year>
Reference-contexts: The generalization to arbitrary sign assignements is easy, see for instance [15]. In fact, a slightly weaker bound is used by Meyer auf der Heide in [25]. There, the bound is easily derived from a well known result of Milnor [27] and Thom <ref> [34] </ref> that bounds the number of connected components of polynomial systems in IR n . Note also that a related result in Warren's paper plays a crucial role in [20]. It seems thus that these geometric bounds are at the core of the problem.
Reference: [35] <author> G. Turan and F. Vatan. </author> <title> On the computation of Boolean functions by analog circuits of bounded fan-in, </title> <booktitle> Proc. 35th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pp. 553-564, </pages> <year> 1994. </year>
Reference-contexts: It is important to notice that this latter problem deals in a natural way with a framework in which an algebraic model having real constants operates over binary inputs. Other references where this setting is also considered are the papers by Gashkov [14] and by Turan and Vatan <ref> [35] </ref>. Here the authors consider analog circuits that compute Boolean functions and they focus on lower and upper bounds for the size of those circuits with respect to some Boolean functions.
Reference: [36] <author> V. Vapnik. </author> <title> Estimation of dependences based on empirical data. </title> <booktitle> Springer Series in Statistics. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1982. </year>
Reference-contexts: The VC dimension was invented exactly to remedy the lack of finiteness pointed out by Heintz and Schnorr. This tool was originally developed to study some statistical aspects of pattern recognition, or learning theory as one would say nowadays (see e.g. <ref> [36] </ref>). It turned out to have important applications in other areas as well, especially in computational geometry (see e.g. the survey [6]). A similar theorem was established by Meyer auf der Heide [25] for the algebraic decision tree model.
Reference: [37] <author> H.E. Warren. </author> <title> Lower bounds for approximation by non-linear manifolds. </title> <journal> Trans. Amer. Math. Soc., </journal> <volume> 133, </volume> <pages> pp. 167-178, </pages> <year> 1968. </year>
Reference-contexts: Then the VC dimension of fF y ; y 2 IR k g is polynomial in k and n. The proof of Theorem 1 relies on a deep result from real algebraic geometry due to Warren <ref> [37] </ref>. Consider a family f 1 ; : : : ; f m of polynomials in IR [X 1 ; : : : ; X k ].
References-found: 37

