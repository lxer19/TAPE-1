URL: http://www.cs.indiana.edu/l/www/ftp/pierce/oop-popl.ps.gz
Refering-URL: http://www.cs.indiana.edu/l/www/ftp/pierce/
Root-URL: http://www.cs.indiana.edu
Title: Object-Oriented Programming Without Recursive Types  
Author: Benjamin C. Pierce David N. Turner 
Affiliation: LFCS, University of Edinburgh  
Abstract: It is widely agreed that recursive types are inherent in the static typing of the essential mechanisms of object-oriented programming: encapsulation, message passing, subtyping, and inheritance. We demonstrate here that modeling object encapsulation in terms of existential types yields a substantially more straightforward explanation of these features in a simpler calculus without recursive types. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Martin Abadi. </author> <title> Doing without F-bounded quantification. Message to Types electronic mail list, </title> <month> February </month> <year> 1992. </year>
Reference: [2] <author> Henk Barendregt. </author> <title> Introduction to generalized type systems. </title> <journal> Journal of Functional Programming, </journal> <note> 1992. To appear. </note>
Reference: [3] <author> Daniel G. Bobrow, Linda G. DeMichiel, Richard P. Gabriel, Sonya E. Keene, Gregor Kiczales, and David A. Moon. </author> <title> Common Lisp Object System specification X3J13 document 88-002R. </title> <journal> SIGPLAN Notices, </journal> <volume> 23, </volume> <year> 1988. </year>
Reference-contexts: Taking overloading and subtyping as basic, instead of encapsulation and subtyping, they develop an underlying calculus that promises to model some features | notably the generic functions of languages such as CLOS <ref> [3] </ref> | that fall completely outside the scope of previous theories, including ours.
Reference: [4] <author> A. H. Borning. </author> <title> Classes versus prototypes in object-oriented languages. </title> <booktitle> In ACM/IEEE Fall Joint Computer Conference, </booktitle> <pages> pages 30-46, </pages> <year> 1986. </year>
Reference-contexts: A useful variant of inheritance allows classes to specify some methods as "private"; these methods are visible in the implementations of inheriting subclasses but hidden otherwise; the implementation of inheritance given in Section 4 can be extended straightforwardly to include this feature. A model of delegation-based object-oriented programming <ref> [4] </ref> related to the one proposed by Mitchell [32] can easily be formed by modifying our constructions so that the application of the fixed-point operator to the method vector of an object is performed at message-sending time rather than within the new function.
Reference: [5] <author> Kim B. Bruce. </author> <title> The equivalence of two semantic definitions for inheritance in object-oriented languages. </title> <booktitle> In Proceedings of Mathematical Foundations of Programming Semantics, </booktitle> <address> Pittsburgh, PA, </address> <month> March </month> <year> 1991. </year>
Reference: [6] <author> Kim B. Bruce. </author> <title> A paradigmatic object-oriented language: Design, static typing and semantics. </title> <type> Technical Report CS-92-01, </type> <institution> Williams College, </institution> <month> January </month> <year> 1992. </year>
Reference-contexts: Operator subtyping appears in most type theoretic accounts of object-oriented programming. Mitchell [32] uses it explicitly, while Cook, Hill, and Canning [23] and Bruce <ref> [6] </ref> rely on the closely related formalism of F-bounded quantification to achieve a similar effect. 4 Inheritance The word "inheritance" is used to describe a variety of language features that allow object definitions to be constructed incrementally, sharing implementations of methods in hierarchies of related classes. <p> This extension can be viewed as the introduction, in the high-level syntax, of a simple form of extensible records [44, 17, 40] . 6 Related Work The recent accounts of object-oriented programming that are closest to ours in spirit are those due to Bruce <ref> [6] </ref> and Cardelli [14]. Bruce [6] develops a formal semantics (based on previous models by Mitchell [32], Cook [23], and their collaborators) and a proof of soundness for a high-level object-oriented language with essentially the same features as ours. Bruce's model is fundamentally quite similar to the one developed here. <p> This extension can be viewed as the introduction, in the high-level syntax, of a simple form of extensible records [44, 17, 40] . 6 Related Work The recent accounts of object-oriented programming that are closest to ours in spirit are those due to Bruce <ref> [6] </ref> and Cardelli [14]. Bruce [6] develops a formal semantics (based on previous models by Mitchell [32], Cook [23], and their collaborators) and a proof of soundness for a high-level object-oriented language with essentially the same features as ours. Bruce's model is fundamentally quite similar to the one developed here. <p> Inherently complex features include the implicit recursion inherent in the keyword, self, to refer to the current object, and its corresponding type..." <ref> [6, abstract] </ref> While we agree that fixed points at the element level are required to model the inheritance of methods referring to self, we contend that the complexity of constructions based on recursive types is not inherent in the basic concepts of object-oriented programming. <p> This deficiency, which seems to be common to all lambda-calculus models of object-oriented programming (except when a compilation function is involved, as in <ref> [6, 32] </ref>, so that the appropriate fixed points in the semantic model can be chosen without the need to give a type for a polymorphic fixed point operator), has also been pointed out by Wand [46] and Cook, Hill, and Canning [23].
Reference: [7] <author> Kim B. Bruce and Giuseppe Longo. </author> <title> A modest model of records, inheritance, and bounded quantification. </title> <journal> Information and Computation, </journal> <volume> 87 </volume> <pages> 196-240, </pages> <year> 1990. </year> <note> An earlier version appeared in the proceedings of the IEEE Symposium on Logic in Computer Science, </note> <year> 1988. </year>
Reference: [8] <author> Kim Bruce and John Mitchell. </author> <title> PER models of subtyping, recursive types and higher-order poly-morphism. </title> <booktitle> In Proceedings of the Nineteenth ACM Symposium on Principles of Programming Languages, </booktitle> <address> Albequerque, NM, </address> <month> January </month> <year> 1992. </year>
Reference: [9] <author> Timothy Budd. </author> <title> An Introduction to Object-Oriented Programming. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1991. </year>
Reference: [10] <author> Peter Canning, William Cook, Walter Hill, Walter Olthoff, and John Mitchell. </author> <title> F-bounded quantification for object-oriented programming. </title> <booktitle> In Fourth International Conference on Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 273-280, </pages> <month> September </month> <year> 1989. </year>
Reference: [11] <author> Luca Cardelli. </author> <title> A semantics of multiple inheritance. </title> <journal> Information and Computation, </journal> <volume> 76 </volume> <pages> 138-164, </pages> <year> 1988. </year> <title> An earlier version appears in Semantics of Data Types, </title> <editor> Kahn, MacQueen, and Plotkin, eds., </editor> <publisher> Springer-Verlag LNCS 173, </publisher> <year> 1984. </year>
Reference: [12] <author> Luca Cardelli. </author> <title> Structural subtyping and the notion of power type. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 70-79, </pages> <address> San Diego, CA, </address> <month> January </month> <year> 1988. </year>
Reference: [13] <author> Luca Cardelli. </author> <booktitle> Notes about F ! &lt;: . Unpublished notes, </booktitle> <month> October </month> <year> 1990. </year>
Reference-contexts: The subtype relation we use is a straightforward higher-order extension (due to Cardelli and Mitchell <ref> [13, 32] </ref>) of the subtype relation used in the calculus of second-order bounded quantification, F [18, 16, 25].
Reference: [14] <author> Luca Cardelli. </author> <title> Extensible records in a pure calculus of subtyping. </title> <type> Research report 81, </type> <institution> DEC Systems Research Center, </institution> <month> January </month> <year> 1992. </year>
Reference-contexts: This level of detail is typically hidden in type-theoretic accounts of object-oriented programming by extending the base calculus with operations for incrementally extending and modifying record val-uess <ref> [44, 17, 14, 15] </ref>. <p> This extension can be viewed as the introduction, in the high-level syntax, of a simple form of extensible records [44, 17, 40] . 6 Related Work The recent accounts of object-oriented programming that are closest to ours in spirit are those due to Bruce [6] and Cardelli <ref> [14] </ref>. Bruce [6] develops a formal semantics (based on previous models by Mitchell [32], Cook [23], and their collaborators) and a proof of soundness for a high-level object-oriented language with essentially the same features as ours. Bruce's model is fundamentally quite similar to the one developed here. <p> our translation from the high-level syntax described in Section 5 into pure F ! must generate appropriate extractors and overwriters, which amounts to implementing a kind of extensible records; however, since the set of fields of a record being extended is always known statically, the full complexity of row variables <ref> [44, 14] </ref> is not needed. Cardelli's treatment of object-oriented programming [14, 15] aims to describe the same basic features of encapsulation, subtyping, and inheritance as ours and Bruce's. <p> Cardelli's treatment of object-oriented programming <ref> [14, 15] </ref> aims to describe the same basic features of encapsulation, subtyping, and inheritance as ours and Bruce's. Like us (and unlike Bruce), Cardelli adopts a mainly syntactic point of view, trying to capture a set of fundamental requirements in the form of a typed lambda-calculus.
Reference: [15] <author> Luca Cardelli. </author> <booktitle> Typed foundations of object-oriented programming. Tutorial given at POPL '92, </booktitle> <month> January </month> <year> 1992. </year>
Reference-contexts: This level of detail is typically hidden in type-theoretic accounts of object-oriented programming by extending the base calculus with operations for incrementally extending and modifying record val-uess <ref> [44, 17, 14, 15] </ref>. <p> Cardelli's treatment of object-oriented programming <ref> [14, 15] </ref> aims to describe the same basic features of encapsulation, subtyping, and inheritance as ours and Bruce's. Like us (and unlike Bruce), Cardelli adopts a mainly syntactic point of view, trying to capture a set of fundamental requirements in the form of a typed lambda-calculus.
Reference: [16] <author> Luca Cardelli, Simone Martini, John C. Mitchell, and Andre Scedrov. </author> <title> An extension of system F with subtyping. </title> <editor> In T. Ito and A. R. Meyer, editors, </editor> <booktitle> Theoretical Aspects of Computer Software (Sendai, Japan), number 526 in Lecture Notes in Computer Science, </booktitle> <pages> pages 750-770. </pages> <publisher> Springer-Verlag, </publisher> <address> Septem ber 1991. </address>
Reference-contexts: The subtype relation we use is a straightforward higher-order extension (due to Cardelli and Mitchell [13, 32]) of the subtype relation used in the calculus of second-order bounded quantification, F <ref> [18, 16, 25] </ref>. Subtyping between type operators is defined pointwise: Fun (A:K) S is a subtype of Fun (A:K) T if [U=A]S [U=A]T for every type U 2 K | or, equivalently, if S T under no assumptions about the free variable A.
Reference: [17] <author> Luca Cardelli and John Mitchell. </author> <title> Operations on records (summary). </title> <editor> In M. Main, A. Melton, M. Mislove, and D. Schmidt, editors, </editor> <booktitle> Proceedings of Fifth International Conference on Mathematical Foundations of Programming Language Semantics, volume 442 of Lecture Notes in Computer Science, </booktitle> <pages> pages 22-52, </pages> <institution> Tulane University, </institution> <address> New Orleans, </address> <month> March </month> <year> 1989. </year> <note> Springer Verlag. To appear in Mathematical Structures in Computer Science; also available as DEC Systems Research Center Research Report #48, </note> <month> August, </month> <year> 1989. </year>
Reference-contexts: This level of detail is typically hidden in type-theoretic accounts of object-oriented programming by extending the base calculus with operations for incrementally extending and modifying record val-uess <ref> [44, 17, 14, 15] </ref>. <p> A more convenient syntax can be obtained by maintaining information about methods and instance variables between class and object type declarations. This extension can be viewed as the introduction, in the high-level syntax, of a simple form of extensible records <ref> [44, 17, 40] </ref> . 6 Related Work The recent accounts of object-oriented programming that are closest to ours in spirit are those due to Bruce [6] and Cardelli [14]. <p> We formulate our account in terms of more primitive record operations than Bruce, using explicit extractors and overwriters to handle extension of the state during inheritance; Bruce uses extensible records <ref> [40, 17] </ref> for this purpose.
Reference: [18] <author> Luca Cardelli and Peter Wegner. </author> <title> On understanding types, data abstraction, and polymorphism. </title> <journal> Computing Surveys, </journal> <volume> 17(4), </volume> <month> December </month> <year> 1985. </year>
Reference-contexts: The subtype relation we use is a straightforward higher-order extension (due to Cardelli and Mitchell [13, 32]) of the subtype relation used in the calculus of second-order bounded quantification, F <ref> [18, 16, 25] </ref>. Subtyping between type operators is defined pointwise: Fun (A:K) S is a subtype of Fun (A:K) T if [U=A]S [U=A]T for every type U 2 K | or, equivalently, if S T under no assumptions about the free variable A. <p> In [38], we show how a more general case can be handled by associating multi-methods with classes rather than objects, using Cardelli and Wegner's partially abstract types <ref> [18] </ref> to enforce proper encapsulation. Recent papers by Castagna, Ghelli, and Longo [20, 19, 26] propose an intriguing new approach to the foundations of object-oriented programming.
Reference: [19] <author> Giuseppe Castagna. </author> <title> Strong typing in object-oriented paradigms. </title> <institution> Rapport de Recherche LIENS 92-11, Ecole Normale Superieure, Paris, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: In [38], we show how a more general case can be handled by associating multi-methods with classes rather than objects, using Cardelli and Wegner's partially abstract types [18] to enforce proper encapsulation. Recent papers by Castagna, Ghelli, and Longo <ref> [20, 19, 26] </ref> propose an intriguing new approach to the foundations of object-oriented programming.
Reference: [20] <author> Giuseppe Castagna, Giorgio Ghelli, and Giuseppe Longo. </author> <title> A calculus for overloaded functions and subtyping. </title> <institution> Rapport de Recherche LIENS-92-4, Ecole Normale Superieure, Paris, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: In [38], we show how a more general case can be handled by associating multi-methods with classes rather than objects, using Cardelli and Wegner's partially abstract types [18] to enforce proper encapsulation. Recent papers by Castagna, Ghelli, and Longo <ref> [20, 19, 26] </ref> propose an intriguing new approach to the foundations of object-oriented programming.
Reference: [21] <author> William Cook. </author> <title> A Denotational Semantics of In heritance. </title> <type> PhD thesis, </type> <institution> Brown University, </institution> <year> 1989. </year>
Reference: [22] <author> W. Cook. </author> <title> Object-oriented programming versus abstract data types. </title> <editor> In J. W. de Bakker et al., editors, </editor> <booktitle> Foundations of Object-Oriented Languages, volume 489 of Lecture Notes in Computer Science, </booktitle> <pages> pages 151-178. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [23] <author> William R. Cook, Walter L. Hill, and Peter S. Canning. </author> <title> Inheritance is not subtyping. </title> <booktitle> In Seventeenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 125-135, </pages> <address> San Fran cisco, CA, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: Operator subtyping appears in most type theoretic accounts of object-oriented programming. Mitchell [32] uses it explicitly, while Cook, Hill, and Canning <ref> [23] </ref> and Bruce [6] rely on the closely related formalism of F-bounded quantification to achieve a similar effect. 4 Inheritance The word "inheritance" is used to describe a variety of language features that allow object definitions to be constructed incrementally, sharing implementations of methods in hierarchies of related classes. <p> Bruce [6] develops a formal semantics (based on previous models by Mitchell [32], Cook <ref> [23] </ref>, and their collaborators) and a proof of soundness for a high-level object-oriented language with essentially the same features as ours. Bruce's model is fundamentally quite similar to the one developed here. <p> (except when a compilation function is involved, as in [6, 32], so that the appropriate fixed points in the semantic model can be chosen without the need to give a type for a polymorphic fixed point operator), has also been pointed out by Wand [46] and Cook, Hill, and Canning <ref> [23] </ref>. To retain the syntactic flavor of our approach, it appears to be necessary to introduce either more sophisticated record types, so as to be able to write the type of a polymorphic fixed point operator applicable to an arbitrary record of functions, or else a lazy record constructor.
Reference: [24] <author> M. Coppo, M. Dezani-Ciancaglini, and B. Ven-neri. </author> <title> Functional characters of solvable terms. </title> <journal> Zeitschrift fur Mathematische Logik und Grundla-gen der Mathematik, </journal> <volume> 27 </volume> <pages> 45-58, </pages> <year> 1981. </year>
Reference-contexts: More speculatively, it may be possible to extend our approach to include multiple inheritance by working in a variant of F ! with intersection types <ref> [24] </ref>. A second order fragment of this calculus is studied in [35].
Reference: [25] <author> Pierre-Louis Curien and Giorgio Ghelli. </author> <title> Coherence of subsumption. </title> <note> Mathematical Structures in Computer Science, 1992. To appear. </note>
Reference-contexts: The subtype relation we use is a straightforward higher-order extension (due to Cardelli and Mitchell [13, 32]) of the subtype relation used in the calculus of second-order bounded quantification, F <ref> [18, 16, 25] </ref>. Subtyping between type operators is defined pointwise: Fun (A:K) S is a subtype of Fun (A:K) T if [U=A]S [U=A]T for every type U 2 K | or, equivalently, if S T under no assumptions about the free variable A.
Reference: [26] <author> Giorgio Ghelli. </author> <title> A static type system for message passing. </title> <booktitle> In Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 129-143, </pages> <address> Phoenix, Arizona, </address> <month> October </month> <year> 1991. </year> <journal> Distributed as SIGPLAN Notices, </journal> <volume> Volume 26, Number 11, </volume> <month> November </month> <year> 1991. </year>
Reference-contexts: In [38], we show how a more general case can be handled by associating multi-methods with classes rather than objects, using Cardelli and Wegner's partially abstract types [18] to enforce proper encapsulation. Recent papers by Castagna, Ghelli, and Longo <ref> [20, 19, 26] </ref> propose an intriguing new approach to the foundations of object-oriented programming.
Reference: [27] <author> Jean-Yves Girard. </author> <title> Interpretation fonctionelle et elimination des coupures de l'arithmetique d'ordre superieur. </title> <type> PhD thesis, </type> <institution> Universite Paris VII, </institution> <year> 1972. </year>
Reference: [28] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80: The Language and Its Implementation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference: [29] <author> Justin O. Graver and Ralph E. Johnson. </author> <title> A type system for Smalltalk. </title> <booktitle> In Seventeenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 125-135, </pages> <address> San Francisco, CA, </address> <month> January </month> <year> 1990. </year>
Reference: [30] <author> Martin Hofmann and Benjamin Pierce. </author> <title> An abstract view of objects and subtyping (preliminary report). </title> <type> Technical Report ECS-LFCS-92-226, </type> <institution> University of Edinburgh, LFCS, </institution> <year> 1992. </year>
Reference-contexts: Our implementation of F ! provides a simple high-level syntax for both object types and class declarations. The syntax of object types relies on the observation, developed in detail in <ref> [30] </ref>, that message-sending functions like Point'setX can be generated uniformly, given the types of the methods: from the object declarations below, we automatically generate the types PointM and Point and the implementations of Point'getX, Point'setX, and Point'slide. &gt; Point == &gt; ObjectType (Rep) with &gt; getX: Int, &gt; setX: Int-&gt;Rep, &gt;
Reference: [31] <author> S. Kamin. </author> <title> Inheritance in Smalltalk-80: A denota-tional definition. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 80-87, </pages> <month> January </month> <year> 1988. </year>
Reference: [32] <author> John C. Mitchell. </author> <title> Toward a typed foundation for method specialization and inheritance. </title> <booktitle> In Proceedings of the 17th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 109-124, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: The subtype relation we use is a straightforward higher-order extension (due to Cardelli and Mitchell <ref> [13, 32] </ref>) of the subtype relation used in the calculus of second-order bounded quantification, F [18, 16, 25]. <p> Operator subtyping appears in most type theoretic accounts of object-oriented programming. Mitchell <ref> [32] </ref> uses it explicitly, while Cook, Hill, and Canning [23] and Bruce [6] rely on the closely related formalism of F-bounded quantification to achieve a similar effect. 4 Inheritance The word "inheritance" is used to describe a variety of language features that allow object definitions to be constructed incrementally, sharing implementations <p> Bruce [6] develops a formal semantics (based on previous models by Mitchell <ref> [32] </ref>, Cook [23], and their collaborators) and a proof of soundness for a high-level object-oriented language with essentially the same features as ours. Bruce's model is fundamentally quite similar to the one developed here. <p> This deficiency, which seems to be common to all lambda-calculus models of object-oriented programming (except when a compilation function is involved, as in <ref> [6, 32] </ref>, so that the appropriate fixed points in the semantic model can be chosen without the need to give a type for a polymorphic fixed point operator), has also been pointed out by Wand [46] and Cook, Hill, and Canning [23]. <p> A model of delegation-based object-oriented programming [4] related to the one proposed by Mitchell <ref> [32] </ref> can easily be formed by modifying our constructions so that the application of the fixed-point operator to the method vector of an object is performed at message-sending time rather than within the new function.
Reference: [33] <author> John Mitchell, Sigurd Meldal, and Neel Madhav. </author> <title> An extension of Standard ML modules with sub-typing and inheritance. </title> <booktitle> In Proceedings of the Eighteenth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 270-278, </pages> <address> Orlando, FL, </address> <month> Jan-uary </month> <year> 1991. </year>
Reference: [34] <author> John Mitchell and Gordon Plotkin. </author> <title> Abstract types have existential type. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 10(3), </volume> <month> July </month> <year> 1988. </year>
Reference: [35] <author> Benjamin C. Pierce. </author> <title> Programming with Intersection Types and Bounded Polymorphism. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <month> December </month> <year> 1991. </year> <note> Available as School of Computer Science technical report CMU-CS-91-205. </note>
Reference-contexts: More speculatively, it may be possible to extend our approach to include multiple inheritance by working in a variant of F ! with intersection types [24]. A second order fragment of this calculus is studied in <ref> [35] </ref>. Acknowledgements We are grateful for conversations with Dave Berry, Kim Bruce, Luca Cardelli, Giuseppe Castagna, William Cook, Giorgio Ghelli, Bob Harper, Robin Milner, John Mitchell, Kevin Mitchell, Didier Remy, Nick Rothwell, and Phil Wadler, and especially to Martin Hofmann for important insights into the formal background of our constructions.
Reference: [36] <author> Benjamin C. Pierce and Robert Pollack. </author> <title> Higher-order subtyping. </title> <type> Unpublished manuscript, </type> <month> August </month> <year> 1992. </year>
Reference: [37] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Simple type-theoretic foundations for object-oriented programming. </title> <note> Submitted to the Journal of Functional Programming, </note> <month> August </month> <year> 1992. </year>
Reference-contexts: For simplicity of exposition, we use a formulation of inheritance that makes the instance variables of a class visible to all of its subclasses, as in Smalltalk. A more refined style where instance variables are hidden from subclasses can also be supported in this framework; details appear in <ref> [37] </ref>. The setX and getX methods of colored points behave just like those of points. Inheritance allows these methods to be written once, in the definition of points, and then reused in the definition of colored points.
Reference: [38] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Statically typed multi-methods via partially abstract types. </title> <type> Draft technical teport, </type> <month> September </month> <year> 1992. </year>
Reference-contexts: Bruce and Cardelli do allow such methods in a restricted form, where the implementation of a multi-method may obtain concrete access to the representation of only one object, other arguments of the same type being accessible through their public interface. In <ref> [38] </ref>, we show how a more general case can be handled by associating multi-methods with classes rather than objects, using Cardelli and Wegner's partially abstract types [18] to enforce proper encapsulation.
Reference: [39] <author> Uday S. Reddy. </author> <title> Objects as closures: Abstract semantics of object oriented languages. </title> <booktitle> In Proceedings of the 1988 ACM Symposium on Lisp and Functional Programming, </booktitle> <pages> pages 289-297, </pages> <address> Snow-bird, Utah, </address> <month> July </month> <year> 1988. </year>
Reference: [40] <author> Didier Remy. </author> <title> Typechecking records and variants in a natural extension of ML. </title> <booktitle> In Proceedings of the Sixteenth Annual ACM Symposium on Principles of Programming Languages, Austin, </booktitle> <pages> pages 242-249. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1989. </year>
Reference-contexts: A more convenient syntax can be obtained by maintaining information about methods and instance variables between class and object type declarations. This extension can be viewed as the introduction, in the high-level syntax, of a simple form of extensible records <ref> [44, 17, 40] </ref> . 6 Related Work The recent accounts of object-oriented programming that are closest to ours in spirit are those due to Bruce [6] and Cardelli [14]. <p> We formulate our account in terms of more primitive record operations than Bruce, using explicit extractors and overwriters to handle extension of the state during inheritance; Bruce uses extensible records <ref> [40, 17] </ref> for this purpose.
Reference: [41] <author> John C. Reynolds. </author> <title> User defined types and procedural data structures as complementary approaches to data abstraction. </title> <editor> In David Gries, editor, </editor> <booktitle> Programming Methodology, A Collection of Articles by IFIP WG2.3, </booktitle> <pages> pages 309-317. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1978. </year> <note> Reprinted from S. </note> <editor> A. Schu-man (ed.), </editor> <booktitle> New Advances in Algorithmic Languages 1975, </booktitle> <institution> Inst. de Recherche d'Informatique et d'Automatique, Rocquencourt, </institution> <year> 1975, </year> <pages> pages 157-168. </pages>
Reference: [42] <author> John Reynolds. </author> <title> Three approaches to type structure. </title> <booktitle> In Mathematical Foundations of Software Development. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1985. </year> <note> Lecture Notes in Computer Science No. 185. </note>
Reference: [43] <author> Edmund Robinson and Robert Tennent. </author> <title> Bounded quantification and record-update problems. Message to Types electronic mail list, </title> <month> October </month> <year> 1988. </year>
Reference-contexts: But this function is not well typed, as the reader can easily check. Indeed, a simple semantic argument <ref> [43] </ref> shows that the only inhabitants of the type All (P&lt;Point) P-&gt;Int->P are identity functions! The crux of the difficulty is that Point'setX performs a functional update of the state field of p, while the quantifier All (P&lt;Point) ranges over all subtypes of Point; in particular, the type of the state
Reference: [44] <author> Mitchell Wand. </author> <title> Complete type inference for simple objects. </title> <booktitle> In Proceedings of the IEEE Symposium on Logic in Computer Science, </booktitle> <address> Ithaca, NY, </address> <month> June </month> <year> 1987. </year>
Reference-contexts: This level of detail is typically hidden in type-theoretic accounts of object-oriented programming by extending the base calculus with operations for incrementally extending and modifying record val-uess <ref> [44, 17, 14, 15] </ref>. <p> A more convenient syntax can be obtained by maintaining information about methods and instance variables between class and object type declarations. This extension can be viewed as the introduction, in the high-level syntax, of a simple form of extensible records <ref> [44, 17, 40] </ref> . 6 Related Work The recent accounts of object-oriented programming that are closest to ours in spirit are those due to Bruce [6] and Cardelli [14]. <p> our translation from the high-level syntax described in Section 5 into pure F ! must generate appropriate extractors and overwriters, which amounts to implementing a kind of extensible records; however, since the set of fields of a record being extended is always known statically, the full complexity of row variables <ref> [44, 14] </ref> is not needed. Cardelli's treatment of object-oriented programming [14, 15] aims to describe the same basic features of encapsulation, subtyping, and inheritance as ours and Bruce's.
Reference: [45] <author> Mitchell Wand. </author> <title> Corrigendum: Complete type inference for simple objects. </title> <booktitle> In Proceedings of the IEEE Symposium on Logic in Computer Science, </booktitle> <year> 1988. </year>
Reference: [46] <author> Mitchell Wand. </author> <title> Type inference for record concatenation and multiple inheritance. </title> <booktitle> In Fourth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 92-97, </pages> <address> Pacific Grove, CA, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: all lambda-calculus models of object-oriented programming (except when a compilation function is involved, as in [6, 32], so that the appropriate fixed points in the semantic model can be chosen without the need to give a type for a polymorphic fixed point operator), has also been pointed out by Wand <ref> [46] </ref> and Cook, Hill, and Canning [23].
References-found: 46

