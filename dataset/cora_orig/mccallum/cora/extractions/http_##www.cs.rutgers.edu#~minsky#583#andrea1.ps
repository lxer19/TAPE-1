URL: http://www.cs.rutgers.edu/~minsky/583/andrea1.ps
Refering-URL: http://www.cs.rutgers.edu/~minsky/583/coord.html
Root-URL: http://www.cs.rutgers.edu
Email: fedenti, anatali, aomicinig@deis.unibo.it  
Title: On the Expressive Power of a Language for Programming Coordination Media  
Author: Enrico Denti Antonio Natali LIA Laboratorio d'Informatica Avanzata Andrea Omicini 
Address: Viale Risorgimento, 2 Bologna, Italy  
Affiliation: DEIS Universita di Bologna  
Abstract: A programmable coordination medium is a shared communication device whose behaviour can be defined by means of a suitable programming language according to the global system needs. This notion has indeed an impact over the design of multi-component software system, since (part of) the system computational charge of can be in principle shifted from the communicating components (agents) to the communication device. At the same time, this raises the issue of the computational power of a programmable coordination medium, and of its expressiveness. As a meaningful example, this paper discusses the case of ReSpecT, the first-order logic language used by the ACLT coordination model to define the behaviour of its multiple programmable logic tuple spaces, called tuple centres. Its expressiveness is discussed first by comparing ReSpecT with Petri Nets, taken as a reference model for the specification and design of concurrent and distributed systems, then by presenting some simple cases of coordination systems designed around ReSpecT-programmed logic tuple spaces. Finally, we show that ReSpecT is Turing-powerful. This makes it possible to freely split the computational load of an ACLT -based architecture between the communicating components and the communication device according to the design needs. In particular, this allows local and global system properties to be embodied where they naturally fit in, that is, respectively, into the coordination entities (ACLT agents) and the coordination media (ACLT tuple centres). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Arbab, I. Herman, and P. </author> <title> Spilling. An overview of manifold and its implementation. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 5(1) </volume> <pages> 23-70, </pages> <year> 1993. </year>
Reference-contexts: Many other remarkable control-driven coordination models (see [23]), such as ConCoord [18] and MANIFOLD <ref> [1] </ref>, rely on a quite clear separation between coordination and computation, and emphasise the role of the communication abstraction. However, all such models exploit port-to-port communication, and "coordinator" components are in charge of both component activation and the global interaction scheme, not of communication only.
Reference: [2] <author> J.-P. Ban^atre and D. Le Metayer. </author> <title> The Gamma model and its discipline of programming. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 15(1) </volume> <pages> 55-77, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: This proves that ReSpecT is Turing-powerful. 5 Related works The ReSpecT computational model discussed here is based on the notion of reaction, like other known coordination models. However, some remarkable differences are worth to be pointed out. In Gamma <ref> [2] </ref>, for instance, very general coordination laws can be specified in terms of reaction conditions and consequent actions. However, the model provides neither a communication abstraction, nor any agent interaction protocol.
Reference: [3] <author> J.-P. Ban^atre and D. Le Metayer. </author> <title> Programming by multiset transformation. </title> <journal> Communications of the ACM, </journal> <volume> 36(1) </volume> <pages> 98-111, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: However, the model provides neither a communication abstraction, nor any agent interaction protocol. Even more, the model does not account for agent deliberative activity, as it can be argued from the Dining Philosopher example shown in <ref> [3] </ref>, where reactions are the only means for the evolution of a multi-agent system based on Gamma. More similar to ACLT is the ESP coordination language [4, 6], which exploits the reactiveness of the tuple space.
Reference: [4] <author> A. Brogi and P. Ciancarini. </author> <title> The concurrent language, Shared Prolog. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 13(1), </volume> <month> January </month> <year> 1991. </year>
Reference-contexts: More generally, communication occurs in ACLT through a multiplicity [10, 12, 15] of named, logic tuple spaces <ref> [4, 6] </ref>, which are collections of first-order unitary clauses, uniquely identified by a ground term. Logic tuple spaces can be interpreted either as simple communication channels, or as knowledge repositories. <p> Even more, the model does not account for agent deliberative activity, as it can be argued from the Dining Philosopher example shown in [3], where reactions are the only means for the evolution of a multi-agent system based on Gamma. More similar to ACLT is the ESP coordination language <ref> [4, 6] </ref>, which exploits the reactiveness of the tuple space. There, agents are modelled in terms of guarded computations which are triggered in response to given states of the tuple space.
Reference: [5] <author> N. Busi, R. Gorrieri, and G. Zavattaro. </author> <title> On Turing equivalence of Linda coordination primitives. </title> <type> Technical Report UBLCS-97-5, </type> <institution> Laboratory of Computer Science, University of Bologna, </institution> <month> May </month> <year> 1997. </year>
Reference-contexts: in_r (p (X)), out_r (q (X)) )) succeeds, and eventually adds the tuple q (1) to the default tuple space. (As an aside, it is worth to notice that the ReSpecT execution model ensures the ordered semantics for out r inside reactions, while ACLT adopts the unordered semantics for out <ref> [5] </ref>). Since multiple react/2 tuples can be specified for a given logical event as well as multiple reaction/2 for the same communication primitive -, multiple reactions may be triggered at the same time in response to a single communication event.
Reference: [6] <author> P. Ciancarini. </author> <title> Distributed programming with logic tuple spaces. </title> <journal> New Generation Computing, </journal> <volume> 12, </volume> <year> 1994. </year> <note> 1 The ACLT system is freely available to the public and can be found at http://www-lia.deis.unibo.it/Software/ACLT/. </note>
Reference-contexts: More generally, communication occurs in ACLT through a multiplicity [10, 12, 15] of named, logic tuple spaces <ref> [4, 6] </ref>, which are collections of first-order unitary clauses, uniquely identified by a ground term. Logic tuple spaces can be interpreted either as simple communication channels, or as knowledge repositories. <p> Even more, the model does not account for agent deliberative activity, as it can be argued from the Dining Philosopher example shown in [3], where reactions are the only means for the evolution of a multi-agent system based on Gamma. More similar to ACLT is the ESP coordination language <ref> [4, 6] </ref>, which exploits the reactiveness of the tuple space. There, agents are modelled in terms of guarded computations which are triggered in response to given states of the tuple space.
Reference: [7] <author> P. Ciancarini. </author> <title> Coordination models and languages as software integrators. </title> <journal> ACM Computing Surveys, </journal> <volume> 28(2), </volume> <month> June </month> <year> 1996. </year>
Reference-contexts: 1 Introduction The increased complexity of software systems has inspired in the last years a lot of work on coordination architectures <ref> [16, 7, 23] </ref>. Many of the current researches concentrate on communication mechanisms and abstractions which enable a coordination model to substantially decrease the complexity of the design and management of multi-component software systems.
Reference: [8] <author> E. Denti, A. Natali, and A. Omicini. </author> <title> Merging logic programming into web-based technology: a coordination-based approach. </title> <booktitle> In Proceedings of the 2nd International Workshop on Logic Programming Tools for Internet Applications, in conjunction with ICLP'97, </booktitle> <pages> pages 117-128, </pages> <address> Leuven, Belgium, </address> <month> July 8-12 </month> <year> 1997. </year>
Reference-contexts: Further work will be devoted to test the effectiveness of the ACLT model by experimenting its implementation 1 into real-world application domains, and by integrating it into existing multi-component systems. Finally, in <ref> [8] </ref> we argue that also typical multi-coordinated architectures based on message passing and peer-to-peer communication (like World Wide Web servers), where no global communication abstraction is a-priori available, would greatly benefit from the adoption of this approach.
Reference: [9] <author> E. Denti, A. Natali, and A. Omicini. </author> <title> Programmable coordination media. </title> <editor> In D. Garlan and D. Le Metayer, editors, </editor> <booktitle> Coordination Languages and Models, volume 1282 of LNCS, </booktitle> <pages> pages 274-288. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <booktitle> Second International Conference COORDINATION'97, </booktitle> <address> Berlin, Germany, </address> <month> September 1-3, </month> <year> 1997. </year>
Reference-contexts: In particular, Linda tuple spaces suggest that a key-role in the design and development of multi-component software systems could be played by the coordination media. While discussing the benefits of shifting computational properties from coordination entities to coordination media, <ref> [9] </ref> suggests the notion of programmable coordination medium. This notion is based on the full observability of all communication events, as well as on the programmability of the reactions to such events as a way to extend/determine the behaviour of the communication abstraction. <p> What has to be established in general, instead, is what computational power is needed and should be embodied in the coordination medium, and how expressive the language used to program its behaviour should be. As a meaningful example of programmable coordination medium <ref> [9] </ref> we take ACLT [22] tuple centres. Tuple centres are shared communication abstractions whose behaviour can be specialised by programming reactions to communication events. For this purpose, ACLT exploits ReSpecT (which stands for Reaction Specification T uples), a reaction specification language based on first-order logic tuples. <p> Section 5 will discuss some of the most prominent related works, while Section 6 will be devoted to final remarks and conclusions. 2 Programming coordination media with ReSpecT 2.1 Basics of the ACLT coordination model The ACLT coordination model, first presented in [22, 11] and later refined and discussed in <ref> [10, 12, 9] </ref>, moves from the basic observation that, when combining components to build new applications, interaction constitutes a fundamental dimension [25] which can potentially make a multi-component system be something more than the simple sum of its parts. <p> For the same reason, agent design often becomes unnecessarily complex. Instead, the ACLT approach is based on the idea that an effective communication abstraction should be flexible and programmable <ref> [9] </ref>, so as to be able to take most of the coordination tasks on itself instead of charging the application agents. <p> the reaction execution model makes application agents perceive all the effects of a single communication operation as a single-step transition of the state of the communication abstraction: so, at the agents' perception level, the behaviour of the coordination medium can be made as complex as desired by properly programming reactions <ref> [12, 9] </ref>. More generally, communication occurs in ACLT through a multiplicity [10, 12, 15] of named, logic tuple spaces [4, 6], which are collections of first-order unitary clauses, uniquely identified by a ground term. Logic tuple spaces can be interpreted either as simple communication channels, or as knowledge repositories. <p> In principle, this makes it possible to build multi-component systems whose coordination policies can be (dynamically) modified with no need to change the components' interaction protocols. For instance, <ref> [9] </ref> shows how a more complex variant of the Dining Philosophers' problem can be implemented as an ACLT system where philosophers still interact using the same acquire/release protocol discussed here, while the tuple centre is re-programmed according to the new coordination policy. <p> In particular, ACLT -coordinated systems can be designed such that their local and global properties can be embodied into the coordination entities (ACLT agents) and the coordination media (ACLT tuple centres), respectively, in the most natural way. The resulting systems are flexible and easy to design: as shown in <ref> [9] </ref>, for instance, new interaction policies for agent cooperation/competition are simple to implement and built in the communication abstraction with minimal or no modifications at all to the agents' behaviours.
Reference: [10] <author> E. Denti, A. Natali, A. Omicini, and M. Venuti. </author> <title> An extensible framework for the development of coordinated applications. </title> <editor> In P. Ciancarini and C. Hankin, editors, </editor> <booktitle> Coordination Languages and Models, volume 1061 of LNCS, </booktitle> <pages> pages 305-320. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <booktitle> First International Conference, </booktitle> <address> COORDINATION'96, Cesena, Italy, </address> <month> April 15-17, </month> <year> 1996. </year>
Reference-contexts: Section 5 will discuss some of the most prominent related works, while Section 6 will be devoted to final remarks and conclusions. 2 Programming coordination media with ReSpecT 2.1 Basics of the ACLT coordination model The ACLT coordination model, first presented in [22, 11] and later refined and discussed in <ref> [10, 12, 9] </ref>, moves from the basic observation that, when combining components to build new applications, interaction constitutes a fundamental dimension [25] which can potentially make a multi-component system be something more than the simple sum of its parts. <p> For this purpose, ACLT introduces the notion of tuple centre as a tuple space a la Linda [14] enhanced by (i ) raising the observability level from communication state (i.e., tuples) to communication events (i.e., operations on tuples), and by (ii ) making it possible to define activities (called reactions) <ref> [10, 12] </ref> to be triggered upon the occurrence of some given communication event (s). In this way, the actual effect of the execution of a communication operation can be extended as needed, yet in a non-intrusive way (i.e., leaving the semantics of the basic communication primitive untouched). <p> More generally, communication occurs in ACLT through a multiplicity <ref> [10, 12, 15] </ref> of named, logic tuple spaces [4, 6], which are collections of first-order unitary clauses, uniquely identified by a ground term. Logic tuple spaces can be interpreted either as simple communication channels, or as knowledge repositories. <p> alternative to the map/2 + react/2 syntax defined before: however, uncoupling the mapping from the actual reaction specification is useful whenever the same reaction body has to be reused for many different physical operations, without having to rewrite it many times, as in the case of the tracer presented in <ref> [10] </ref>. 2.3 ReSpecT execution model ReSpecT reactions are executed atomically with a transaction semantics. A successful reaction is a reaction whose body goals are all executed successfully. Instead, even a single unsuccessful reaction goal leads to a failed reaction. <p> Thus, whenever useful, an ACLT tuple centre (and a programmable coordination medium, in general) could be exploited in order to change a multi-agent system's coordination policies transparently to the agents. 3.2.4 Building development tools In <ref> [10] </ref> it has been shown how the ACLT reaction model can be used to build development tools for distributed programming, by exploiting the full observability of communication events.
Reference: [11] <author> E. Denti, A. Natali, A. Omicini, and M. Venuti. </author> <title> Logic tuple spaces for the coordination of heterogeneous agents. </title> <editor> In F. Baader and K.U. Schulz, editors, </editor> <booktitle> Frontiers of Combining Systems, </booktitle> <pages> pages 147-160. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1996. </year> <booktitle> First International Workshop "Frontiers of Combining Systems", </booktitle> <address> FroCoS'96, Munich, Germany, March 26-29, </address> <year> 1996. </year>
Reference-contexts: Finally, Section 5 will discuss some of the most prominent related works, while Section 6 will be devoted to final remarks and conclusions. 2 Programming coordination media with ReSpecT 2.1 Basics of the ACLT coordination model The ACLT coordination model, first presented in <ref> [22, 11] </ref> and later refined and discussed in [10, 12, 9], moves from the basic observation that, when combining components to build new applications, interaction constitutes a fundamental dimension [25] which can potentially make a multi-component system be something more than the simple sum of its parts. <p> The latter reading suggests that they can be used as logic theories, where deductive activities can be performed over the current communication state. For this purpose, ACLT provides a set of demo primitives, as well as a coherent notion of logic consequence in a time-dependent environment <ref> [22, 11] </ref>.
Reference: [12] <author> E. Denti and A. Omicini. </author> <title> Designing multi-agent systems around an extensible communication abstraction. </title> <editor> In A. Cesta and P.-Y. Schobbens, editors, </editor> <booktitle> Proceedings of the 4th ModelAge Workshop on Formal Models of Agents, </booktitle> <institution> Certosa di Pontignano, Italy, </institution> <month> January 15-18, </month> <year> 1997, </year> <pages> pages 87-97. </pages> <institution> National Research Council of Italy, </institution> <year> 1997. </year> <note> To be published by Springer-Verlag in the LNAI Series. </note>
Reference-contexts: This approach allows multi-component systems to be designed around a shared communication abstraction whose behaviour can be tailored according to the system needs: components can then be designed following straightforward interaction protocols <ref> [12] </ref>. How much of a system behaviour should depend on the components, and how much, instead, should depend on the programmable communication device, is essentially a design problem. <p> Section 5 will discuss some of the most prominent related works, while Section 6 will be devoted to final remarks and conclusions. 2 Programming coordination media with ReSpecT 2.1 Basics of the ACLT coordination model The ACLT coordination model, first presented in [22, 11] and later refined and discussed in <ref> [10, 12, 9] </ref>, moves from the basic observation that, when combining components to build new applications, interaction constitutes a fundamental dimension [25] which can potentially make a multi-component system be something more than the simple sum of its parts. <p> For this purpose, ACLT introduces the notion of tuple centre as a tuple space a la Linda [14] enhanced by (i ) raising the observability level from communication state (i.e., tuples) to communication events (i.e., operations on tuples), and by (ii ) making it possible to define activities (called reactions) <ref> [10, 12] </ref> to be triggered upon the occurrence of some given communication event (s). In this way, the actual effect of the execution of a communication operation can be extended as needed, yet in a non-intrusive way (i.e., leaving the semantics of the basic communication primitive untouched). <p> the reaction execution model makes application agents perceive all the effects of a single communication operation as a single-step transition of the state of the communication abstraction: so, at the agents' perception level, the behaviour of the coordination medium can be made as complex as desired by properly programming reactions <ref> [12, 9] </ref>. More generally, communication occurs in ACLT through a multiplicity [10, 12, 15] of named, logic tuple spaces [4, 6], which are collections of first-order unitary clauses, uniquely identified by a ground term. Logic tuple spaces can be interpreted either as simple communication channels, or as knowledge repositories. <p> More generally, communication occurs in ACLT through a multiplicity <ref> [10, 12, 15] </ref> of named, logic tuple spaces [4, 6], which are collections of first-order unitary clauses, uniquely identified by a ground term. Logic tuple spaces can be interpreted either as simple communication channels, or as knowledge repositories.
Reference: [13] <author> E.W. Dijkstra. </author> <title> Co-operating sequential processes. </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1965. </year>
Reference-contexts: As a re sult, an in (all (p (X),L)) operation would exactly capture the intended behaviour of an in all (p (X),L) operation. 3.2.3 Modelling coordination policies The classical Dining Philosophers' problem <ref> [13] </ref> is naturally modelled as a multi-agent systems where philosopher agents share fork resources. The main point is that forks are available as single resources, while agents require them instead as resource pair.
Reference: [14] <author> D. Gelernter. </author> <title> Generative communication in Linda. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(1), </volume> <month> January </month> <year> 1985. </year>
Reference-contexts: Many of the current researches concentrate on communication mechanisms and abstractions which enable a coordination model to substantially decrease the complexity of the design and management of multi-component software systems. Blackboard-based coordination models like Linda <ref> [14] </ref> have shown how the typical limitations of point-to-point communication protocols can be in principle over come, by exploiting generative communication as well as a shared communication abstraction. <p> For this purpose, ACLT introduces the notion of tuple centre as a tuple space a la Linda <ref> [14] </ref> enhanced by (i ) raising the observability level from communication state (i.e., tuples) to communication events (i.e., operations on tuples), and by (ii ) making it possible to define activities (called reactions) [10, 12] to be triggered upon the occurrence of some given communication event (s).
Reference: [15] <author> D. Gelernter. </author> <title> Multiple tuple spaces in Linda. </title> <booktitle> In Proceedings of PARLE, volume 365 of LNCS, </booktitle> <year> 1989. </year>
Reference-contexts: More generally, communication occurs in ACLT through a multiplicity <ref> [10, 12, 15] </ref> of named, logic tuple spaces [4, 6], which are collections of first-order unitary clauses, uniquely identified by a ground term. Logic tuple spaces can be interpreted either as simple communication channels, or as knowledge repositories.
Reference: [16] <author> D. Gelernter and N. Carriero. </author> <title> Coordination languages and their significance. </title> <journal> Communications of the ACM, </journal> <volume> 35(2) </volume> <pages> 97-107, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The increased complexity of software systems has inspired in the last years a lot of work on coordination architectures <ref> [16, 7, 23] </ref>. Many of the current researches concentrate on communication mechanisms and abstractions which enable a coordination model to substantially decrease the complexity of the design and management of multi-component software systems.
Reference: [17] <author> D. Gelernter and L. Zuck. </author> <title> On what linda is: Formal description of linda as a reactive system. </title> <editor> In D. Garlan and D. Le Metayer, editors, </editor> <booktitle> Coordination Languages and Models, volume 1282 of LNCS, </booktitle> <pages> pages 187-204. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <booktitle> Second International Conference COORDINATION'97, </booktitle> <address> Berlin, Germany, </address> <month> September 1-3, </month> <year> 1997. </year>
Reference-contexts: Unlike the out primitive, in and rd can be seen (see also <ref> [17] </ref>) as made of two distinct communication events: the first query phase (also called the pre phase), when a tuple template is provided, and the subsequent answer phase (also called the post phase), when a unifying tuple is eventually returned to the querying agent.
Reference: [18] <author> A.A.. Holzbacher. </author> <title> A software environment for concurrent coordinated programming. </title> <editor> In P. Ciancarini and C. Hankin, editors, </editor> <booktitle> Coordination Languages and Models, volume 1061 of LNCS, </booktitle> <pages> pages 249-266. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <booktitle> First International Conference, </booktitle> <address> COORDINATION'96, Cesena, Italy, </address> <month> April 15-17, </month> <year> 1996. </year>
Reference-contexts: Many other remarkable control-driven coordination models (see [23]), such as ConCoord <ref> [18] </ref> and MANIFOLD [1], rely on a quite clear separation between coordination and computation, and emphasise the role of the communication abstraction. However, all such models exploit port-to-port communication, and "coordinator" components are in charge of both component activation and the global interaction scheme, not of communication only.
Reference: [19] <author> D.C. Luckham, J.J. Kenney, L.M. Augustin, J. Vera, D. Brian, and W. Mann. </author> <title> Specification and analysis if system architecture using rapide. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4) </volume> <pages> 336-355, </pages> <year> 1995. </year>
Reference-contexts: The resulting notion of communication abstraction is, in our opinion, quite more complex and less intuitive than in blackboard-based architectures, thus failing to provide the level of abstraction required for the design of multi-component systems. In the same class of coordination languages falls the RAPIDE architecture definition language <ref> [19] </ref>, which (like ReSpecT) relies on the notion of reaction to observable communication events. However, stateless, port-to-port communication abstractions ("connections") prevent RAPIDE from providing the desired level of component uncoupling. Law-governed Linda [21] exploits reactive controllers to superimpose coordination laws.
Reference: [20] <author> M.L. Minsky. </author> <title> Computation: finite and infinite machines. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliff, </address> <year> 1967. </year>
Reference-contexts: The set of the initial values for the registers of R constitutes the input of the machine. Analogously, after the execution of the last instruction, the set of the registers' values can be taken as the machine's output result. In <ref> [20] </ref>, Minsky showed that the two following forms of statements suffices to represent any recursive function: a) label : inc (R i ), next label b) label : [if R i = 0] jmp (R i ,new label ), [else] dec (R i ), next label Thus, the ability to fully
Reference: [21] <author> N. Minsky and J. Leichter. </author> <title> Law-governed linda as a coordination model. </title> <editor> In P. Ciancarini, C. Nierstratsz, and A. Yonezawa, editors, </editor> <booktitle> Object-Based Models and Languages, volume 924 of LNCS, </booktitle> <pages> pages 125-145. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: In the same class of coordination languages falls the RAPIDE architecture definition language [19], which (like ReSpecT) relies on the notion of reaction to observable communication events. However, stateless, port-to-port communication abstractions ("connections") prevent RAPIDE from providing the desired level of component uncoupling. Law-governed Linda <ref> [21] </ref> exploits reactive controllers to superimpose coordination laws. Reactions to communication events are specified through rules which, despite of the syntax and semantics differences, have the same goal of ReSpecT reactions tuples, that is, to extend, control, and modify the behaviour of Linda primitives.
Reference: [22] <author> A. Omicini, E. Denti, and A. Natali. </author> <title> Agent coordination and control through logic theories. </title> <booktitle> In Topics in Artificial Intelligence 4th Congress of the Italian Association for Artificial Intelligence, AI*IA'95, volume 992 of LNAI, </booktitle> <pages> pages 439-450, </pages> <institution> Firenze, Italy, </institution> <month> October 11-13 </month> <year> 1995. </year> <note> Springer-Verlag. </note>
Reference-contexts: What has to be established in general, instead, is what computational power is needed and should be embodied in the coordination medium, and how expressive the language used to program its behaviour should be. As a meaningful example of programmable coordination medium [9] we take ACLT <ref> [22] </ref> tuple centres. Tuple centres are shared communication abstractions whose behaviour can be specialised by programming reactions to communication events. For this purpose, ACLT exploits ReSpecT (which stands for Reaction Specification T uples), a reaction specification language based on first-order logic tuples. <p> Finally, Section 5 will discuss some of the most prominent related works, while Section 6 will be devoted to final remarks and conclusions. 2 Programming coordination media with ReSpecT 2.1 Basics of the ACLT coordination model The ACLT coordination model, first presented in <ref> [22, 11] </ref> and later refined and discussed in [10, 12, 9], moves from the basic observation that, when combining components to build new applications, interaction constitutes a fundamental dimension [25] which can potentially make a multi-component system be something more than the simple sum of its parts. <p> The latter reading suggests that they can be used as logic theories, where deductive activities can be performed over the current communication state. For this purpose, ACLT provides a set of demo primitives, as well as a coherent notion of logic consequence in a time-dependent environment <ref> [22, 11] </ref>.
Reference: [23] <author> G.A. Papadopoulos and F. Arbab. </author> <title> Coordination models and languages. </title> <booktitle> Advances in Computers, </booktitle> <volume> 46, </volume> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: 1 Introduction The increased complexity of software systems has inspired in the last years a lot of work on coordination architectures <ref> [16, 7, 23] </ref>. Many of the current researches concentrate on communication mechanisms and abstractions which enable a coordination model to substantially decrease the complexity of the design and management of multi-component software systems. <p> Moreover, the computational shift from the coordination entities to the communication abstraction is even stronger in ESP than in ACLT , as ESP reduces the notion of agent to a purely reactive execution thread, providing no support for agent deliberative activity. Many other remarkable control-driven coordination models (see <ref> [23] </ref>), such as ConCoord [18] and MANIFOLD [1], rely on a quite clear separation between coordination and computation, and emphasise the role of the communication abstraction.
Reference: [24] <author> J.C. Shepherdson and H.E. Sturgis. </author> <title> Computability of recursive functions. </title> <journal> Journal of the ACM, </journal> <volume> 10 </volume> <pages> 217-255, </pages> <year> 1963. </year>
Reference-contexts: Then, Subsection 3.2 will discuss some simple examples of ACLT -coordinated multi-component systems whose interaction policies are designed around ReSpecT-programmed logic tuple cen-tres. Section 4 will then show the Turing-equivalence of ReSpecT by capturing the behaviour of the Turing-powerful Shepherdson and Sturgis' register machine <ref> [24] </ref> through a set of ReSpecT reactions. <p> (Ag), performed (operation (Op), on tuple (T)))) )). 4 Turing-equivalence of ReSpecT Although computability theory usually refers to the Turing Machine as the abstract computer model, other abstract machines have been proposed in literature as reference models, such as the Minsky machine, or the register machine by Shepherdson and Sturgis <ref> [24] </ref>: however, they were all eventually recognised to be Turing-equivalent. So, we will exploit here the Shepherdson and Sturgis' machine to prove the Turing-equivalence of ReSpecT. <p> Of course, the computational properties of this machine directly depend on which statements are enclosed in S. Shepherdson and Sturgis proved <ref> [24] </ref> that such a machine is Turing-equivalent if S contains the statements inc (R i ), which increments the value of register R i , dec (R i ), which decrements the value of register R i provided that it is greater than zero, and jmp (R i ,label ), which
Reference: [25] <author> P. Wegner. </author> <title> Interactive foundations of computing. </title> <type> Technical report, </type> <institution> Brown University, Providence (RI), </institution> <month> August </month> <year> 1996. </year>
Reference-contexts: conclusions. 2 Programming coordination media with ReSpecT 2.1 Basics of the ACLT coordination model The ACLT coordination model, first presented in [22, 11] and later refined and discussed in [10, 12, 9], moves from the basic observation that, when combining components to build new applications, interaction constitutes a fundamental dimension <ref> [25] </ref> which can potentially make a multi-component system be something more than the simple sum of its parts.
References-found: 25

