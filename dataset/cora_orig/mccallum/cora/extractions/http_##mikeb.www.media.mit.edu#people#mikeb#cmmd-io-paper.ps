URL: http://mikeb.www.media.mit.edu/people/mikeb/cmmd-io-paper.ps
Refering-URL: http://mikeb.www.media.mit.edu/people/mikeb/publications.html
Root-URL: http://www.media.mit.edu
Email: e-mail address: mikeb@think.com  
Title: Connection Machine is a registered trademark of Thinking Machines  
Keyword: Index Terms File systems, I/O systems, parallel supercomputing, parallel UNIX, message passing, Connection Machine.  
Date: [7].  
Note: Corporation. CM, CM-2, CM-5, and DataVault are trademarks of Thinking Machines Corporation. Unix is a registered trademark of AT&T. 1. Authors  2. Adapted from  
Abstract: We have proposed a library providing Unix file system support for highly parallel distributed-memory computers. CMMD I/O supports Unix I/O commands on the CM-5 supercomputer. The overall objective of the library is to provide the node level (SPMD) parallel programmer with routines for opening, reading, writing a file, and so forth. The default behavior mimics standard Unix running on each node; individual nodes can independently perform file system operations. New extensions to the standard Unix file descriptor semantics provide for co-operative parallel I/O. New functions provide access to very large (multi-gigabyte) files. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Crockett, Thomas W. </author> <title> File Concepts for Parallel I/O . Proceedings of Supercomputing 89, </title> <year> 1989 </year>
Reference-contexts: A number of proposals have, however , been presented in the literature including <ref> [1] </ref>, [2], [4], [5]. In this paper, we will first overview the CM-5, its high-speed I/O devices, and the CMMD library in general. Next we will discuss some of the major issues in designing a parallel Unix I/O system. <p> It is easy to appreciate this advantage just by considering something as simple as an equality comparison between two lar ge seek pointers. This is contrasted to storing the pointer as a structure with a most and least-significant integer, as is described in <ref> [1] </ref>.
Reference: [2] <author> DeBenedictis, Erik and Peter Madams. </author> <title> nCUBEs Parallel I/O with Unix Compatibility. </title> <booktitle> Eleventh Annual IEEE International Phoenix Conference on Computers and Communications, </booktitle> <year> 1992. </year>
Reference-contexts: A number of proposals have, however , been presented in the literature including [1], <ref> [2] </ref>, [4], [5]. In this paper, we will first overview the CM-5, its high-speed I/O devices, and the CMMD library in general. Next we will discuss some of the major issues in designing a parallel Unix I/O system.
Reference: [3] <institution> Intel Corporation. </institution> <note> iPSC/2 Users Guide (Preliminary). </note> <month> December </month> <year> 1989. </year>
Reference: [4] <author> Kotz, David. </author> <title> Multiprocessor File System Interface. </title>
Reference-contexts: A number of proposals have, however , been presented in the literature including [1], [2], <ref> [4] </ref>, [5]. In this paper, we will first overview the CM-5, its high-speed I/O devices, and the CMMD library in general. Next we will discuss some of the major issues in designing a parallel Unix I/O system.
Reference: [5] <author> Russell, Channing H., and Pamela J. Waterman. </author> <title> Variations on UNIX for Parallel-Processing Computers. </title> <journal> Communication of the ACM. </journal> <volume> 30(12) </volume> <pages> 1048-1055, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: A number of proposals have, however , been presented in the literature including [1], [2], [4], <ref> [5] </ref>. In this paper, we will first overview the CM-5, its high-speed I/O devices, and the CMMD library in general. Next we will discuss some of the major issues in designing a parallel Unix I/O system.
Reference: [6] <author> Test, Jack A. </author> <title> Parallel Unix: Up in the Air. </title> <journal> Unix Review, </journal> <volume> 7(4) </volume> <pages> 64-71, </pages> <month> April </month> <year> 1989 </year>
Reference-contexts: HHHHHHHHHeeeeeeeeellllllllllllllllll.. Whats our point? Even with years of experience porting Unix file systems onto parallel machines, it s clear that a consensus on the desired behavior of application-parallel Unix I/O has yet to develop within the computer science community <ref> [6] </ref>. A number of proposals have, however , been presented in the literature including [1], [2], [4], [5]. In this paper, we will first overview the CM-5, its high-speed I/O devices, and the CMMD library in general.
Reference: [7] <institution> Thinking Machines Corporation. </institution> <type> CM5 Technical Summary. </type> <month> January </month> <year> 1992. </year>
Reference: [8] <author> Thinking Machines Corporation. </author> <title> Connection Machine I/O System Programming Guide. </title> <year> 1991. </year>
Reference-contexts: This is in contrast, for example, with the CM-2 I/O system which had a unique space of commands for working on the DataVault <ref> [8] </ref>. 5 I/O Modes We satisfy many of the stated goals by one major addition to Unix I/O: an I/O mode is now associated with each and every file descriptor. There are four available I/O modes: Local, Synchronous Sequential, Synchronous Broadcast, and Independent.
References-found: 8

