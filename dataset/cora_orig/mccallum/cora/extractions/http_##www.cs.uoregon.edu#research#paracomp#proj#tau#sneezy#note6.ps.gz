URL: http://www.cs.uoregon.edu/research/paracomp/proj/tau/sneezy/note6.ps.gz
Refering-URL: http://www.cs.uoregon.edu/research/paracomp/proj/tau/sneezy/index.html
Root-URL: http://www.cs.uoregon.edu
Title: Sneezy Note #6: The Parallel Debugger Sneaky  
Author: Lars T. Hansen 
Note: unholy mess. As it matures, it will be split into multiple notes. For now, consider it a snapshot.  
Date: June 12, 1995; August 22, 1995; February 15, 1996  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Winterbottom's Usenix paper on Acid. </institution>
Reference-contexts: This paper suggests that there is a different technique, tending toward minimalism rather than maximalism, which may make the lives of both the debugger writer and the programmer simpler than they would be with a mega-debugger. Inspired initially by the ACID debugger of Plan 9 <ref> [1] </ref>, where the debugging problem is viewed as that of providing abstractions on top of primitive interfaces to the program being debugged, 1 I propose Sneezy, a portable low-level interface to the HPC++ runtime, and Sneaky, a debugger infrastructure based on a high-level multi-threaded interactive programming language with access to the
Reference: [2] <institution> Hanson's SPE paper on the Snobol 4 debugger. </institution>
Reference-contexts: Many research projects have worked on programmable debuggers for various languages, one of the earliest seems to be David Hanson's debugger for SNOBOL4 <ref> [2] </ref>, and the most sophisticated so far being the Dalek debugger from Ronald Olsson's group at UC Irvine [3, 4, 5].
Reference: [3] <institution> Olsson et al's SPE paper on Dalek. </institution>
Reference-contexts: Many research projects have worked on programmable debuggers for various languages, one of the earliest seems to be David Hanson's debugger for SNOBOL4 [2], and the most sophisticated so far being the Dalek debugger from Ronald Olsson's group at UC Irvine <ref> [3, 4, 5] </ref>.
Reference: [4] <institution> Olsson et al's IEEE paper on Dalek. </institution>
Reference-contexts: Many research projects have worked on programmable debuggers for various languages, one of the earliest seems to be David Hanson's debugger for SNOBOL4 [2], and the most sophisticated so far being the Dalek debugger from Ronald Olsson's group at UC Irvine <ref> [3, 4, 5] </ref>.
Reference: [5] <institution> Olsson et al's Usenix paper on Dalek. </institution>
Reference-contexts: Many research projects have worked on programmable debuggers for various languages, one of the earliest seems to be David Hanson's debugger for SNOBOL4 [2], and the most sophisticated so far being the Dalek debugger from Ronald Olsson's group at UC Irvine <ref> [3, 4, 5] </ref>.
Reference: [6] <institution> IEEE Standard for Scheme. </institution>
Reference-contexts: Others advocate using a common higher-level language, for example Tcl, on the basis that a high-level language is important but that just as important is programmer familiarity. Personally, I sympathize with the latter view but find Tcl's semantics repulsive and have chosen to use Scheme <ref> [6] </ref> for Sneaky's debugger language. Scheme is small, well understood, and have clean semantics, and its emphasis on lexical closures and list processing give the programmer considerable power to write both one-shot programs and reusable code. 2 The Model-View-Controller Paradigm The model-view-controller (MVC) paradigm was pioneered by Smalltalk.
Reference: [7] <institution> Gallesio's VHLL Usenix paper on STk. </institution> <month> 6 </month>
References-found: 7

