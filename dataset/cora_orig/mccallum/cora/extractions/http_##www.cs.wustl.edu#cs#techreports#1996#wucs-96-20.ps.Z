URL: http://www.cs.wustl.edu/cs/techreports/1996/wucs-96-20.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Title: Optimal Solution of Off-line and On-line Generalized Caching  
Author: Saied Hosseini-Khayat and Jerome R. Cox, Jr. 
Address: in St. Louis  
Affiliation: Washington University  
Abstract: Network traffic can be reduced significantly if caching is utilized effectively. As an effort in this direction we study the replacement problem that arises in caching of multimedia objects. The size of objects and the cost of cache misses are assumed non-uniform. The non-uniformity of size is inherent in multimedia objects, and the non-uniformity of cost is due to the non-uniformity of size and the fact that the objects are scattered throughout the network. Although a special case of this problem, i.e. the case of uniform size and cost, has been extensively studied, the general case needs a great deal of study. We present a dynamic programming method of optimally solving the off-line and on-line versions of this problem, and discuss the complexity of this method. Key words: Generalized caching, network traffic, network caching, file caching, optimal replacement, replacement algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. A. Aho, P. J. Denning, J. D. Ullman, </author> <title> "Principles of Optimal Page Replacement," </title> <journal> Journal of the ACM, </journal> <volume> Vol. 18, No. 1, </volume> <pages> 80-93, </pages> <month> January </month> <year> 1971. </year>
Reference-contexts: A. Discussion It was shown that stochastic dynamic programming can solve the optimal on-line caching problem. The same approach was used in <ref> [1] </ref> for the memory paging problem. However, the drawback in both cases is the rapid growth of the state space. For this and other reasons, heuristic methods such as LRU (Least Recently Used) and LFU (Least Frequently Used) have been used in caching for decades.
Reference: [2] <author> L. A. Belady, </author> <title> "A Study of Replacement Algorithms for a Virtual-Storage Computer, </title> <journal> IBM System Journal, </journal> <volume> 5 (2) 78-101, </volume> <year> 1966. </year>
Reference: [3] <author> Azer Bestavros, Robert L. Carter, Mark E. Crovella, Carlos R. Cunha, Abdelsalam Hed-daya, Sulaiman A. </author> <title> Mirdad "Application-Level Document Caching in the Internet," </title> <booktitle> Proceeed-ings of the Second Workshop on Services in Distributed and Networked Environments (SDNE '95), </booktitle> <month> June </month> <year> 1995. </year>
Reference: [4] <author> Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, </author> <title> "Introduction to Algorithms," </title> <publisher> The MIT Press, </publisher> <address> Cambridge Mas-sachussetts, </address> <year> 1990. </year>
Reference-contexts: This algorithm can be implemented in such a way that for each node only its optimal ancestors are kept and the rest deleted thus saving memory space. The above algorithm has some resemblance to the relaxation method of finding a shortest path in a graph <ref> [4, page 520] </ref> and the Viterbi convolutional decoding algorithm [9, page 331]. D. Discussion It was shown how to obtain an optimal solution to the generalized off-line caching. It is worthwhile to discuss the efficiency of this algorithm.
Reference: [5] <author> Steve Glassman, </author> <title> "A Caching Relay for the World Wide Web," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> Vol 27 Number 2, </volume> <month> November </month> <year> 1994. </year>
Reference: [6] <author> R. L. Mattson, J. Gecsei, D. R. Slutz, I. L. Traiger, </author> <title> "Evaluation Techniques for Storage Hierarchies," </title> <journal> IBM System Journal, </journal> <volume> 5 (2), </volume> <pages> 78-117, </pages> <year> 1970. </year>
Reference: [7] <author> Christos H. Papadimitriou, S. Ramanathan, P. Venkat Rangan, </author> <title> "Information Caching for Delivery of Personalized Video Programs over Home Entertainment Channels," </title> <booktitle> Proceedings of The IEEE International Conference on Multimedia Computing and Systems, </booktitle> <address> Boston, MA, </address> <month> May </month> <year> 1994. </year>
Reference: [8] <author> S. Ramanathan, P. Venkat Rangan, </author> <title> "Architectures for Personalized Multimedia," </title> <journal> IEEE Multimedia, </journal> <volume> Vol. 1, No. 1, </volume> <month> Spring </month> <year> 1994. </year>
Reference: [9] <author> Bernard Sklar, </author> <title> "Digital Communication: Fundamentals and Applications," </title> <publisher> Prentice Hall, </publisher> <address> New Jersey, </address> <year> 1988. </year>
Reference-contexts: The above algorithm has some resemblance to the relaxation method of finding a shortest path in a graph [4, page 520] and the Viterbi convolutional decoding algorithm <ref> [9, page 331] </ref>. D. Discussion It was shown how to obtain an optimal solution to the generalized off-line caching. It is worthwhile to discuss the efficiency of this algorithm. Notice that the algorithm basically explores a DAG which is associated with the caching problem at hand.
Reference: [10] <author> Allan J. Smith, </author> <title> "Bibliography on Paging and Related Topics," </title> <journal> Operating Systems Review, </journal> <volume> vol. 12, </volume> <pages> 39-56, </pages> <month> Oct. </month> <year> 1978. </year> <month> 7 </month>
Reference: [11] <author> Allan J. Smith, </author> <title> "Second Bibliography for Cache Memories," </title> <journal> Computer Architecture News, </journal> <volume> Vol. 19, No. 4, </volume> <month> June </month> <year> 1991. </year>
Reference: [12] <author> H. C. Tijms, </author> <title> "Stochastic Models: An Algorithmic Approach," </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: This can be a good model for World Wide Web browsing in which the next request is highly dependent on the current request. Also it contains the independent request model as a special case. With the above assumption, caching can be viewed as a discrete-time Markov decision process <ref> [12] </ref> in the following way: Let the state space of our system be S = B fi U. A system state at any time is an ordered pair of the current cache state and the current request. <p> The value iteration algorithm <ref> [12, page206] </ref> computes recursively for k = 1; 2; : : : the value function Y k (s) = min ( X p ij Y k1 (s 0 ) ; s 2 S ; starting with Y 0 (s) = 0; s 2 S. <p> Define M k , max [Y k (s) Y k1 (s)] ; s2S If k is increased until 0 M k m k *m k , then by Theorem 3.4.1 in <ref> [12] </ref> the expected cost per request cannot deviate more then 100*% from g (s). A. Discussion It was shown that stochastic dynamic programming can solve the optimal on-line caching problem. The same approach was used in [1] for the memory paging problem.
References-found: 12

