URL: http://www.cs.jhu.edu/~goodrich/pubs/snap.ps
Refering-URL: http://www.cs.jhu.edu/~goodrich/pubs/index.html
Root-URL: http://www.cs.jhu.edu
Email: goodrich@jhu.edu guibas@cs.stanford.edu  hershberger@mentorg.com pjt@arl.mil  
Title: Snap Rounding Line Segments Efficiently in Two and Three Dimensions  
Author: Michael T. Goodrich Leonidas J. Guibas John Hershberger Paul J. Tanenbaum john 
Keyword: P  Key words. Robustness, finite precision, geometric rounding, line segments, arrangements.  
Note: This research is supported by NSF grant CCR-9623851 and US Army MURI grant 5-23542-A.  
Address: Baltimore, MD 21218 Stanford, CA 94305  1001 Ridder Park Drive ATTN: AMSRL-SL-BV San Jose, CA 95131 Ab. Prv. Gnd., MD 21005-5068  
Affiliation: Cent. for Geometric Computing Dept. of Computer Science Johns Hopkins University Stanford University  Mentor Graphics Corp. U.S. Army Research Lab.  
Abstract: We study the problem of robustly rounding a set S of n line segments in R 2 using the snap rounding paradigm. In this paradigm each pixel containing an endpoint or intersection point is called "hot," and all segments intersecting a hot pixel are re-routed to pass through its center. We show that a snap-rounded approximation to the arrangement defined by S can be built in an output-sensitive fashion, and that this can be done without first determining all the intersecting pairs of segments in S. Specifically, we give a deterministic plane-sweep algorithm running in time O(n log n + h2H jhj log n), where H is the set of hot pixels and jhj is the number of segments intersecting a hot pixel h 2 H. We also give a simple randomized incremental construction whose expected running time matches that of our deterministic algorithm. The complexity of these algorithms is optimal up to polylogar-ithmic factors. We also show how to extend the snap rounding paradigm to a collection S of line segments in R 3 by defining hot voxels in terms of "close encounters" between segments in S, and we give an output-sensitive (though probably sub-optimal) method for finding all close encounters determined by the segments in S. fl This research is supported by NSF grant CCR-9625289 and by U.S. ARO grant DAAH04-96-1-0013.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal and J. Matousek. </author> <title> On range searching with semialgebraic sets. </title> <journal> Discrete Com-put. Geom., </journal> <volume> 11 </volume> <pages> 393-418, </pages> <year> 1994. </year>
Reference-contexts: We now use the range searching techniques for semi-algebraic varieties of Agarwal and Matousek <ref> [1] </ref> to develop an efficient algorithm for reporting all the edge/face intersections. Consider a particular edge e and face f ; orient the four edges of f consistently around f . <p> Then the condition that e intersects f can be expressed by asserting that the line supporting e has positive orientation with respect to the four lines supporting the edges of f , and that that the plane supporting f separates the endpoints of v. By using the techniques of <ref> [1] </ref> we now preprocess all the faces in F so that, given a query edge e, we can quickly report all the faces that e intersects. <p> Assuming that we want to use only linear space, the dominant query cost of this structure comes from the levels of the tree dealing with the line ori-entation conditions. By using Plucker coordinates, Agarwal and Matousek <ref> [1] </ref> show how such a structure can be developed whose query time will be O (n=s 1=4 + k), where k is the number of reported faces intersecting e, using space and preprocessing of O (s 1+ffi , for any ffi &gt; 0.
Reference: [2] <author> F. Avnaim, J.-D. Boissonnat, O. Devillers, F. Preparata, and M. Yvinec. </author> <title> Evaluation of a new method to compute signs of determinants. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Com-put. Geom., </booktitle> <pages> pages C16-C17, </pages> <year> 1995. </year>
Reference: [3] <author> J. L. Bentley and T. A. Ottmann. </author> <title> Algorithms for reporting and counting geometric intersections. </title> <journal> IEEE Trans. Comput., </journal> <volume> C-28:643-647, </volume> <year> 1979. </year>
Reference-contexts: In what follows we refer to the original, unrounded segments as ursegments, to distinguish them from other segments used by the algorithm. Our approach is based on the plane sweeping algorithm of Bentley and Ottmann <ref> [3] </ref> for constructing (unrounded) segment arrangements. We sweep over the ursegments from left to right, processing events, some of which are critical points. However, we dynamically modify the set of segments so that the sweepline processes only the leftmost critical point in each hot pixel. <p> position xpos, a searchable list 1 storing the segments that intersect the vertical line x = xpos in their y order, and an x-ordered priority queue of segment insertions, deletions, and intersections to the right of xpos| intersection events in the priority queue involve only adjacent segments on the sweepline <ref> [3, 4] </ref>. We denote the sweepline by SL. Second, each hot pixel pix with a critical point left of xpos has two searchable x-ordered lists of the ursegments that intersect its top and bottom left of xpos; these lists are pix.toplist and pix.botlist.
Reference: [4] <author> K. Q. Brown. </author> <title> Comments on "Algorithms for reporting and counting geometric intersections". </title> <journal> IEEE Trans. Comput., </journal> <volume> C-30:147-148, </volume> <year> 1981. </year>
Reference-contexts: position xpos, a searchable list 1 storing the segments that intersect the vertical line x = xpos in their y order, and an x-ordered priority queue of segment insertions, deletions, and intersections to the right of xpos| intersection events in the priority queue involve only adjacent segments on the sweepline <ref> [3, 4] </ref>. We denote the sweepline by SL. Second, each hot pixel pix with a critical point left of xpos has two searchable x-ordered lists of the ursegments that intersect its top and bottom left of xpos; these lists are pix.toplist and pix.botlist.
Reference: [5] <author> K. L. Clarkson. </author> <title> Randomized geometric algorithms. </title> <editor> In D.-Z. Du and F. K. Hwang, editors, </editor> <booktitle> Computing in Euclidean Geometry, volume 1 of Lecture Notes Series on Computing, </booktitle> <pages> pages 117-162. </pages> <publisher> World Scientific, </publisher> <address> Singapore, </address> <year> 1992. </year>
Reference-contexts: The basic approach is similar to that of previous RIC's for constructing segment arrangements (e.g., see <ref> [5, 6, 18, 20, 21] </ref>). We again maintain a trapezoidal decomposition of S 0 , except that here we dynamically "clip" the current subdivision each time we discover a new hot pixel. In the usual RIC of line segment arrangements, two different operations need to be addressed. <p> The other is the propagation of s through the trapezoidal decomposition, in order to discover the intersections of s with existing segments, and to update the trapezoidal decomposition in the process. The point location step is normally handled by maintaining a conflict graph between (unin-serted) segments and trapezoids <ref> [5] </ref>, or by the "history-dag" technique of [12]. Like these methods, we also build the trapezoidal decomposition of the pixel-clipped arrangement S 0 in an incremental manner, by inserting all the segments in S into this arrange ment one after the other, in a random sequence.
Reference: [6] <author> K. L. Clarkson, K. Mehlhorn, and R. Seidel. </author> <title> Four results on randomized incremental constructions. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 3(4) </volume> <pages> 185-212, </pages> <year> 1993. </year>
Reference-contexts: The basic approach is similar to that of previous RIC's for constructing segment arrangements (e.g., see <ref> [5, 6, 18, 20, 21] </ref>). We again maintain a trapezoidal decomposition of S 0 , except that here we dynamically "clip" the current subdivision each time we discover a new hot pixel. In the usual RIC of line segment arrangements, two different operations need to be addressed.
Reference: [7] <author> H. Edelsbrunner and E. P. Mucke. </author> <title> Simulation of simplicity: a technique to cope with degenerate cases in geometric algorithms. </title> <journal> ACM Trans. Graph., </journal> <volume> 9 </volume> <pages> 66-104, </pages> <year> 1990. </year>
Reference-contexts: We assume that no two segments are parallel; symbolic perturbation techniques can be used to guarantee that this is so <ref> [7] </ref>. It follows that two tubes t (s) and t (t) will intersect if and only if an edge of one of the tubes pierces (or touches) a face of the other.
Reference: [8] <author> S. Fortune. </author> <title> Numerical stability of algorithms for 2-d Delaunay triangulations. </title> <journal> Internat. J. Com-put. Geom. Appl., </journal> <volume> 5(1) </volume> <pages> 193-213, </pages> <year> 1995. </year>
Reference: [9] <author> S. Fortune and V. Milenkovic. </author> <title> Numerical stability of algorithms for line arrangements. </title> <booktitle> In Proc. 7th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 334-341, </pages> <year> 1991. </year>
Reference-contexts: Subsequent to this early work on segment rounding, there have been several papers that have examined the arithmetic complexity (in terms of bits of accuracy) needed to construct arrangements <ref> [9, 16, 19] </ref>. The gen eral framework of these approaches still involves the computation of all segment intersections, although possibly at a reduced bit complexity than a naive method might use.
Reference: [10] <author> D. H. Greene and F. F. Yao. </author> <title> Finite-resolution computational geometry. </title> <booktitle> In Proc. 27th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 143-152, </pages> <year> 1986. </year>
Reference-contexts: It is of prime importance in performing such a computation that the rounding be done efficiently, both in terms of the combinatorial size of the representation and in terms of the running time of the algorithm that performs this rounding. Greene and Yao <ref> [10] </ref> introduced the framework of rounding line segments to a pixel grid. They gave a method that preserves the topology of a segment arrangement sufficiently, but at the expense of converting each individual line segment into a polygonal chain containing many subsegments.
Reference: [11] <author> L. Guibas and D. Marimont. </author> <title> Rounding arrangements dynamically. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 190-199, </pages> <year> 1995. </year>
Reference-contexts: One approach to the segment rounding problem that has been shown to be very promising, from the standpoint of the combinatorial complexity of the rounded representation, is the snap rounding paradigm introduced by Greene and Hobby [15] and studied in more detail by Guibas and Marimont <ref> [11] </ref>. Given a set S of n line segments in the plane and a regular pixel grid G, this approach involves defining pixels in G as being "hot" if they contain segment endpoints or segment intersection points (the point features of the arrangement). <p> Both of these methods produce a vertical trapezoidal decomposition S of the snap-rounded arrangement of the segments in S, based upon the same strategy: first intersect segments with hot pixels and then collapse hot pixels to single points. This contrasts with the method of Guibas and Marimont <ref> [11] </ref>, which is based upon a randomized incremental construction of S directly.
Reference: [12] <author> L. J. Guibas, D. E. Knuth, and M. Sharir. </author> <title> Randomized incremental construction of Delaunay and Voronoi diagrams. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 381-413, </pages> <year> 1992. </year>
Reference-contexts: The point location step is normally handled by maintaining a conflict graph between (unin-serted) segments and trapezoids [5], or by the "history-dag" technique of <ref> [12] </ref>. Like these methods, we also build the trapezoidal decomposition of the pixel-clipped arrangement S 0 in an incremental manner, by inserting all the segments in S into this arrange ment one after the other, in a random sequence.
Reference: [13] <author> L. J. Guibas, D. Salesin, and J. Stolfi. </author> <title> Epsilon geometry: building robust algorithms from imprecise computations. </title> <booktitle> In Proc. 5th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 208-217, </pages> <year> 1989. </year>
Reference: [14] <author> L. J. Guibas and J. Stolfi. </author> <title> Primitives for the manipulation of general subdivisions and the computation of Voronoi diagrams. </title> <journal> ACM Trans. Graph., </journal> <volume> 4 </volume> <pages> 74-123, </pages> <year> 1985. </year>
Reference-contexts: Let S denote the set of external fragments for the segments in S. The method we use to implement the above strategy is to construct a representation of S 0 , the vertical decomposition of S [ffi (H) (using, say, the quad-edge data structure of Guibas and Stolfi <ref> [14] </ref>). We call S 0 the pixel-clipped arrangement of the segments in S. Note that none of segments in S [ ffi (H) cross (although there will be intersections defined by fragment endpoints and hot pixel boundaries).
Reference: [15] <author> J. </author> <title> Hobby. Practical segment intersection with finite precision output. </title> <type> Technical Report 93/2-27, </type> <institution> Bell Laboratories (Lucent Technologies), </institution> <year> 1993. </year>
Reference-contexts: One approach to the segment rounding problem that has been shown to be very promising, from the standpoint of the combinatorial complexity of the rounded representation, is the snap rounding paradigm introduced by Greene and Hobby <ref> [15] </ref> and studied in more detail by Guibas and Marimont [11]. <p> Their algorithm is dynamic, allowing also for efficient segment insertions and deletions. Alternatively, Hobby <ref> [15] </ref> describes a deterministic batch algorithm that first constructs the actual segment arrangement and then snap rounds it, resulting in an algorithm that runs in O ((n + A) log n + h2H jhj) time.
Reference: [16] <author> C. M. Hoffmann, J. E. Hopcroft, and M. S. Karasick. </author> <title> Towards implementing robust geometric computations. </title> <booktitle> In Proc. 4th Annu. ACM Sym-pos. Comput. Geom., </booktitle> <pages> pages 106-117, </pages> <year> 1988. </year>
Reference-contexts: Subsequent to this early work on segment rounding, there have been several papers that have examined the arithmetic complexity (in terms of bits of accuracy) needed to construct arrangements <ref> [9, 16, 19] </ref>. The gen eral framework of these approaches still involves the computation of all segment intersections, although possibly at a reduced bit complexity than a naive method might use.
Reference: [17] <author> G. Liotta, F. P. Preparata, and R. Tamassia. </author> <title> Robust proximity queries in implicit Voronoi diagrams. </title> <type> Technical Report CS-96-16, </type> <institution> Center for Geometric Computing, Comput. Sci. Dept., Brown Univ., Providence, RI, </institution> <year> 1996. </year>
Reference: [18] <author> J. Matousek and R. Seidel. </author> <title> A tail estimate for Mulmuley's segment intersection algorithm. </title> <booktitle> In 19th International Colloquium on Automata, Languages, and Programming, volume 623 of Lecture Notes in Computer Science, </booktitle> <pages> pages 427-438. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The basic approach is similar to that of previous RIC's for constructing segment arrangements (e.g., see <ref> [5, 6, 18, 20, 21] </ref>). We again maintain a trapezoidal decomposition of S 0 , except that here we dynamically "clip" the current subdivision each time we discover a new hot pixel. In the usual RIC of line segment arrangements, two different operations need to be addressed.
Reference: [19] <author> V. Milenkovic. </author> <title> Double precision geometry: a general technique for calculating line and segment intersections using rounded arithmetic. </title> <booktitle> In Proc. 30th Annu. IEEE Sympos. Found. Com-put. Sci., </booktitle> <pages> pages 500-505, </pages> <year> 1989. </year>
Reference-contexts: Subsequent to this early work on segment rounding, there have been several papers that have examined the arithmetic complexity (in terms of bits of accuracy) needed to construct arrangements <ref> [9, 16, 19] </ref>. The gen eral framework of these approaches still involves the computation of all segment intersections, although possibly at a reduced bit complexity than a naive method might use.
Reference: [20] <author> K. Mulmuley. </author> <title> A fast planar partition algorithm: part I. </title> <type> Technical Report 88-007, </type> <institution> Dept. Comput. Sci., Univ. Chicago, Chicago, IL, </institution> <year> 1988. </year>
Reference-contexts: The basic approach is similar to that of previous RIC's for constructing segment arrangements (e.g., see <ref> [5, 6, 18, 20, 21] </ref>). We again maintain a trapezoidal decomposition of S 0 , except that here we dynamically "clip" the current subdivision each time we discover a new hot pixel. In the usual RIC of line segment arrangements, two different operations need to be addressed.
Reference: [21] <author> R. Seidel. </author> <title> Backwards analysis of randomized geometric algorithms. </title> <editor> In J. Pach, editor, </editor> <booktitle> New Trends in Discrete and Computational Geometry, volume 10 of Algorithms and Combinatorics, </booktitle> <pages> pages 37-68. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The basic approach is similar to that of previous RIC's for constructing segment arrangements (e.g., see <ref> [5, 6, 18, 20, 21] </ref>). We again maintain a trapezoidal decomposition of S 0 , except that here we dynamically "clip" the current subdivision each time we discover a new hot pixel. In the usual RIC of line segment arrangements, two different operations need to be addressed.
Reference: [22] <author> K. Sugihara and M. Iri. </author> <title> Geometric algorithms in finite-precision arithmetic. </title> <type> Technical Report 88-10, </type> <institution> Math. Eng. and Physics Dept., U. of Tokyo, </institution> <address> Japan, </address> <month> Sept. </month> <year> 1988. </year>
Reference: [23] <author> K. Sugihara and M. Iri. </author> <title> Two design principles of geometric algorithms in finite-precision arithmetic. </title> <journal> Appl. Math. Lett., </journal> <volume> 2(2) </volume> <pages> 203-206, </pages> <year> 1989. </year>
References-found: 23

