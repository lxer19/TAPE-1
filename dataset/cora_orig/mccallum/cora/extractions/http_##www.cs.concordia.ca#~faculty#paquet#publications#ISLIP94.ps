URL: http://www.cs.concordia.ca/~faculty/paquet/publications/ISLIP94.ps
Refering-URL: http://www.cs.concordia.ca/~faculty/paquet/publications/publications.html
Root-URL: http://www.cs.concordia.ca
Email: fjpaquet,plaiceg@iad.ift.ulaval.ca  
Title: On the Design of an Indexical Query Language  
Author: Joey Paquet, John Plaice 
Date: September 1994  
Address: Ste-Foy, Quebec, Canada  
Affiliation: Departement d'informatique, Universite Laval  
Abstract: However, relational algebra is unable to solve certain problems. In particular, it is impossible to express such simple concepts as the transitive closure of a binary relation. Furthermore, the relational algebra itself offers no method for dealing with time in its various forms. Instances of relations can be seen as two-dimensional arrays with no explicit bounds, i.e. two-dimensional streams. Therefore a relation in a given database can be coded in Lucid as a pair consisting of a one-dimensional stream defining the relation scheme and a two-dimensional stream defining the instance. Once these concepts have been proposed, we show that certain problems that have been difficult to solve within the standard relational model, such as deductive and historic databases, can be easily solved in the dataflow model, without putting into question the basic notion of a relation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Atzeni and DeAntonellis. </author> <title> Relational Database Theory. </title> <publisher> Benjamin Cummings publishing company, </publisher> <year> 1993. </year>
Reference-contexts: The relational model of data and the relational algebra are the most commonly used forms of data storage and querying. However, the relational algebra has proven to be ineffective in the resolution of certain queries, namely the transitive closure of a binary relation <ref> [1] </ref>. To solve this problem, we propose to combine the expressive power of relational algebra and the iterative powers of Lucid, using the following analogy: a relation is a bidimensional finite array and a dataflow is a multidimensional infinite array. <p> We suppose that the readers are familiar with the relational algebra, so the syntax and semantics are presented without any explanation. See, for example, <ref> [1] </ref> for a full discussion. 2.1 Syntax The syntax given below defines relation occurrences r, functional dependencies FD, boolean formulas F and sequences of attributes X. <p> These are simple examples which relational algebra is capable of representing. The database used in the examples (Figure 3) is inspired from data concerning the British (Tudor) royal family <ref> [1] </ref>.
Reference: [2] <author> E.F. Codd. </author> <title> A Relational Model for Large Shared Databanks. </title> <journal> Communications of the ACM, </journal> <volume> 13(6) </volume> <pages> 76-90, </pages> <year> 1970. </year>
Reference: [3] <author> Faustini and Jaggannathan. </author> <title> Multidimensional Problem Solving in Lucid. </title> <type> Technical report, </type> <institution> SRI International, </institution> <year> 1993. </year>
Reference: [4] <author> Peter Gray. </author> <title> Logic, Algebra and Databases. </title> <publisher> Ellis Horwood Limited, </publisher> <year> 1984. </year>
Reference: [5] <author> Joey Paquet. </author> <title> Why the Universal Relation should not be Forgotten. </title> <type> Technical report, </type> <institution> Department of Computer Science, Laval University, </institution> <year> 1993. </year>
Reference: [6] <author> Jeffrey Ullman. </author> <title> Principles of Database Systems. </title> <note> Computer Science press, second edition, </note> <year> 1983. </year>
Reference: [7] <author> William W. Wadge. </author> <title> Lucid, the Dataflow Programming Language. </title> <publisher> Academic Press, </publisher> <year> 1985. </year>
Reference: [8] <author> William W. Wadge. </author> <title> Higher Order Lucid. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Victoria, </institution> <year> 1992. </year>
Reference: [9] <author> Chao-Chin Yang. </author> <title> Relational Databases. </title> <publisher> Prentice-Hall, </publisher> <year> 1986. </year>
References-found: 9

