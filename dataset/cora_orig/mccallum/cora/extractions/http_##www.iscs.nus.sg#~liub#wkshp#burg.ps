URL: http://www.iscs.nus.sg/~liub/wkshp/burg.ps
Refering-URL: 
Root-URL: 
Email: burg@mthcsc.wfu.edu  lang@cs.ucf.edu  ryap@iscs.nus.sg  
Title: Simplex Variants and Intelligent Back- tracking in CLP Over Real Linear Constraints  
Author: Jennifer J. Burg Sheau-Dong Lang Roland H.C. Yap 
Address: Wake Forest University Winston-Salem, NC 27109  Orlando, FL 32816  Singapore 119260  
Affiliation: Department of Mathematics and Computer Science  Department of Computer Science University of Central Florida  Department of Information Systems and Computer Science National University of Singapore  
Abstract: This paper presents an incremental version of the revised simplex method which is applicable to CLP over real linear constraints. Our algorithm applies consistently the strategy of recording the inverse of the basis matrix, B 1 , rather than maintaining an explicit solved form of the constraint set during the constraint satisfiability check. We examine the relative efficiency of standard simplex and revised simplex, particularly in the context of intelligent backtracking. Our experiments show that when only B 1 is stored, and not the basis matrix itself, the forward elimination step of Gaussian elimination is more costly than in standard simplex. However, in problems which benefit from intelligent backtracking, the revised simplex method is more efficient, since much of the overhead of recording row operations for backtracking purposes is absorbed by work that must be done for checking satisfiability of the constraint set. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. </author> <title> Burg. Depth-first search with backjumping in CLP. </title> <type> Technical Report TR-CS-95-01, </type> <institution> Wake Forest University, Winston-Salem, NC. </institution> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: Also, since B 1 is in effect a record of the row operations performed during the satisfiability check, the revised simplex method automatically maintains information which can be used in intelligent backtracking. Details of our intelligent backtracking method are given in <ref> [1, 3] </ref>. (See also [6].) The goal of our experiments for this paper has been to determine the relative efficiency of the revised simplex method as opposed to standard simplex in our constraint satisfaction algorithm. <p> These variants have been implemented and compared by the authors in an earlier work [4]. (See also [8].) The algorithm has also been incorporated into a CLP system with intelligent backtracking <ref> [1, 3] </ref>. <p> In cases where conflicts are uncovered during the satisfiability check, B 1 tells us the linear combination of rows that produce the conflict. That is, B 1 provides a minimal conflict set which can direct backtracking more efficiently <ref> [3, 1] </ref>. 1 Mathematically speaking, the matrix B 1 is not exactly the inverse of the matrix corresponding to the basic variables, because our constraint satisfaction algorithm uses Gaussian elimination on the unconstrained variables (which does not invert the matrix corresponding to these variables) and the algorithm applies simplex to the <p> and require the simplex method, clp-standib and clp-rsib are generally superior to the naive backtrackers both in execution time and number of operations performed. (See Tables 1, 2, and 6.) This is due primarily to the large number of nodes which are pruned from the search tree by intelligent backtracking <ref> [1] </ref>. Between clp-rsib and clp-standib, clp-rsib is more efficient on this type of program. (See Tables 1 and 2.) This is due in part to the fact that clp-standib stores both B 1 and T, requiring B 1 for intelligent backtracking purposes, while clp-rsib needs only B 1 .
Reference: [2] <author> J. </author> <title> Burg. Parallel execution models and algorithms for constraint logic programming over a real-number domain. </title> <type> PhD Dissertation, </type> <institution> University of Central Florida, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: Our approach is to have the m th constraint, whether it is an equation or inequality, undergo Gaussian elimination as a first step, followed by the simplex method only if necessary <ref> [2] </ref>. An advantage of this approach is that constraints in which unconstrained variables can be made basic are never involved in the operations of the simplex method. The simplex algorithm operates only on constraints which contain only slack variables after forward elimination. We first define a solved form.
Reference: [3] <author> J. Burg, S.-D. Lang, and C. E. Hughes. </author> <title> Finding conflict sets and backtrack points in CLP (&lt;). </title> <booktitle> Proc. of the Eleventh Int. Conf. on Logic Programming, </booktitle> <address> (Santa Margherita Ligure, Italy, </address> <year> 1994), </year> <pages> 323-338. </pages>
Reference-contexts: Also, since B 1 is in effect a record of the row operations performed during the satisfiability check, the revised simplex method automatically maintains information which can be used in intelligent backtracking. Details of our intelligent backtracking method are given in <ref> [1, 3] </ref>. (See also [6].) The goal of our experiments for this paper has been to determine the relative efficiency of the revised simplex method as opposed to standard simplex in our constraint satisfaction algorithm. <p> These variants have been implemented and compared by the authors in an earlier work [4]. (See also [8].) The algorithm has also been incorporated into a CLP system with intelligent backtracking <ref> [1, 3] </ref>. <p> In cases where conflicts are uncovered during the satisfiability check, B 1 tells us the linear combination of rows that produce the conflict. That is, B 1 provides a minimal conflict set which can direct backtracking more efficiently <ref> [3, 1] </ref>. 1 Mathematically speaking, the matrix B 1 is not exactly the inverse of the matrix corresponding to the basic variables, because our constraint satisfaction algorithm uses Gaussian elimination on the unconstrained variables (which does not invert the matrix corresponding to these variables) and the algorithm applies simplex to the
Reference: [4] <author> J. Burg, P. Stuckey, J. Tai, and R. Yap. </author> <title> Linear equation-solving for constraint logic programming. </title> <booktitle> Proc. of the Twelfth Int. Conf. on Logic Programming, </booktitle> <address> (Tokyo, Japan, </address> <year> 1995). </year>
Reference-contexts: Variants of this algorithm can be created by fine-tuning the manner in which Gaussian elimination is performed (e.g. using only partial forward elimination, full forward elimination, or full forward elimination followed by back substitution). These variants have been implemented and compared by the authors in an earlier work <ref> [4] </ref>. (See also [8].) The algorithm has also been incorporated into a CLP system with intelligent backtracking [1, 3].
Reference: [5] <author> H. Beringer and B. DeBacker. </author> <title> Combinatorial Problem Solving in Constraint Logic Programming with Cooperating Solvers. Logic Programming: Formal Methods and Practical Applications. </title> <editor> C. Beierle and L. Plumer, eds. </editor> <publisher> Elsevier. </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction Current implementations of CLP languages over rational or real domains are generally restricted to linear constraints and employ combined Gaussian elimination/simplex algorithms for constraint satisfaction <ref> [9, 5, 13] </ref>. Recent research has focused on identifying the variant of simplex which works best on complex CLP problems [11]. Standard simplex checks satisfiability by storing a solved form of the constraint set in a basis matrix. <p> DeBacker and Beringer argue for the revised simplex method in <ref> [5] </ref> and use it in their implementation. However, they do not compare it empirically to standard simplex, nor do they give their incremental version of the algorithm explicitly.
Reference: [6] <author> B. DeBacker and H. Beringer. </author> <title> Intelligent backtracking for CLP languages: An application to CLP(&lt;). </title> <booktitle> Proc. of the Int. Symp. on Logic Programming. </booktitle> <address> (San Diego, </address> <month> Oct. </month> <year> 1991), </year> <pages> 405-419. </pages>
Reference-contexts: Also, since B 1 is in effect a record of the row operations performed during the satisfiability check, the revised simplex method automatically maintains information which can be used in intelligent backtracking. Details of our intelligent backtracking method are given in [1, 3]. (See also <ref> [6] </ref>.) The goal of our experiments for this paper has been to determine the relative efficiency of the revised simplex method as opposed to standard simplex in our constraint satisfaction algorithm. DeBacker and Beringer argue for the revised simplex method in [5] and use it in their implementation.
Reference: [7] <author> F. S. Hillier and G. J. Lieberman. </author> <title> Introduction to Operations Research. 5 th ed. </title> <publisher> McGraw-Hill. </publisher> <year> 1990. </year>
Reference: [8] <author> J.-L. Imbert. </author> <title> Solved forms for linear constraints in CLP languages. </title> <booktitle> Int'l Conf. on Artificial Intelligence: Methodology, Systems, Applications, </booktitle> <address> (Sofia, Bulgaria, </address> <month> Sept. </month> <year> 1994), </year> <pages> 77-90. </pages>
Reference-contexts: These variants have been implemented and compared by the authors in an earlier work [4]. (See also <ref> [8] </ref>.) The algorithm has also been incorporated into a CLP system with intelligent backtracking [1, 3].
Reference: [9] <author> J. Jaffar, S. Michaylov, P. J. Stuckey, and R. Yap. </author> <title> The CLP(&lt;) language and system. </title> <journal> ACM transactions on programming languages and systems 14, </journal> <month> 3 (July </month> <year> 1992), </year> <pages> 339-395. </pages>
Reference-contexts: 1 Introduction Current implementations of CLP languages over rational or real domains are generally restricted to linear constraints and employ combined Gaussian elimination/simplex algorithms for constraint satisfaction <ref> [9, 5, 13] </ref>. Recent research has focused on identifying the variant of simplex which works best on complex CLP problems [11]. Standard simplex checks satisfiability by storing a solved form of the constraint set in a basis matrix. <p> Thus, x may contain slack variables (also called constrained variables). We allow only the constraint relations =, , and to simplify the presentation. Extension to strict inequalities is straightforward <ref> [9] </ref>. 2.2 Constraint Satisfaction Using Standard Simplex Our algorithm is based on putting the constraint system Ax = b into an equivalent solved form Tx = c at each incremental satisfiability check, using a combination of Gaussian elimination and some variant of the simplex method. <p> Since the system Sx = c contains constrained variables only, its satisfiability can be determined by phase one of the simplex method (as stated in the Fundamental Theorem of Linear Programming) [10]. Also, it was clearly explained in <ref> [9] </ref> that since the system Sx = c is in solved form except for the its last row, applying phase one of the simplex method is equivalent to repeatedly pivoting out the basic variables in earlier rows until a basic variable is found in the last row.
Reference: [10] <author> D. Luenberger. </author> <title> Linear and Nonlinear Programming. 2nd ed. </title> <publisher> Addison--Wesley. </publisher> <year> 1984. </year>
Reference-contexts: Since the system Sx = c contains constrained variables only, its satisfiability can be determined by phase one of the simplex method (as stated in the Fundamental Theorem of Linear Programming) <ref> [10] </ref>.
Reference: [11] <author> P. Refalo and P. Van Hentenryck. </author> <title> CLP(R lin ) Revised. </title> <booktitle> Proc. 1996 Joint International Conference and Symposium on Logic Programming, </booktitle> <address> (Bonn, Germany). </address> <publisher> MIT Press. </publisher> <pages> 22-36. </pages>
Reference-contexts: 1 Introduction Current implementations of CLP languages over rational or real domains are generally restricted to linear constraints and employ combined Gaussian elimination/simplex algorithms for constraint satisfaction [9, 5, 13]. Recent research has focused on identifying the variant of simplex which works best on complex CLP problems <ref> [11] </ref>. Standard simplex checks satisfiability by storing a solved form of the constraint set in a basis matrix. The revised simplex stores instead the inverse of the basis matrix, B 1 . The revised simplex has the advantage of requiring fewer operations than standard simplex on many optimization problems.
Reference: [12] <author> P. Van Hentenryck. </author> <title> Constraint Satisfaction in Logic Programming. </title> <publisher> MIT Press. </publisher> <year> 1989. </year>
Reference-contexts: and backtracks intelligently; and clp-rsib, which uses revised simplex and backtracks intelligently. (These implementations are available upon request from burg@mthcsc.wfu.edu.) We run six representative programs: fibonacci, run forward; fibonnaci, run backwards; magic, a magic square of primes program; crypt, a cryptarithmetic program; 6queens; and bridge, a scheduling problem adapted from <ref> [12] </ref>.
Reference: [13] <author> P. Van Hentenryck. </author> <title> Backtracking without Trailing in CLP(R lin . ACM Transactions on Programming Languages and Systems, </title> <type> 17, </type> <month> 4 (July </month> <year> 1995), </year> <pages> 635-671. </pages>
Reference-contexts: 1 Introduction Current implementations of CLP languages over rational or real domains are generally restricted to linear constraints and employ combined Gaussian elimination/simplex algorithms for constraint satisfaction <ref> [9, 5, 13] </ref>. Recent research has focused on identifying the variant of simplex which works best on complex CLP problems [11]. Standard simplex checks satisfiability by storing a solved form of the constraint set in a basis matrix.
References-found: 13

