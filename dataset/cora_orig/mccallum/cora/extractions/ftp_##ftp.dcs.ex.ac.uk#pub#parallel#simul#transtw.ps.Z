URL: ftp://ftp.dcs.ex.ac.uk/pub/parallel/simul/transtw.ps.Z
Refering-URL: http://www.dcs.ex.ac.uk/reports/reports.html
Root-URL: 
Title: Distributed Simulation with a Transputer Version of the Time Warp Operating System  
Author: Stephen Turner, Monique Damitio and Stephen Trivett 
Address: Exeter, Exeter EX4 4PT, England  
Affiliation: Department of Computer Science, University of  
Abstract: Computer-based discrete event simulation is an important design and analysis tool in many different application areas. Traditionally, discrete event simulation has been performed in a sequential manner, but the size and complexity of many of today's simulation models demand a move towards parallel execution. Distributed simulation explores the potential parallelism inherent in many simulation applications by modelling events as time-stamped messages which are exchanged between the logical processes that represent the physical objects of the application. This paper describes the porting of the Time Warp Operating System (TWOS) onto a network of transputers. TWOS is a special purpose operating system, designed to support distributed simulation, originally developed at the Jet Propulsion Laboratory. The paper discusses the way in which particular features of the transputer make it suitable for distributed simulation and presents experimental results which demonstrate the speed-ups obtainable with TWOS on a network of T805 transputers. Current work in porting TWOS onto the T9000 series of transputers is also discussed.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Beckman, M. Di Loreto, K. Sturdevant, P. Hontalas, L. Van Warren, L. Blume, D. Jefferson, and S. Bellenot. </author> <title> Distributed Simulation and Time Warp: </title> <booktitle> Design of Colliding Pucks. In Proc. SCS Distributed Simulation Conference, </booktitle> <pages> pages 56-60, </pages> <year> 1988. </year> <institution> 1 currently at the Department of Computer Science, University of California, Los Angeles 2 currently at the Mathematics Department, Florida State University, Tallahassee 15 </institution>
Reference-contexts: The pucks collide with each other and with stationary cushions on the border of the table. It is assumed that there is total conservation of energy and no table friction so that the pucks remain in constant motion. The design and implementation of Pucks is described in <ref> [1] </ref>. There are three object types: sectors, cushions and pucks. A sector represents a portion of the table and regulates the movement and interaction of pucks within its boundaries. A cushion object calculates and schedules collisions of pucks with the cushion that borders the table.
Reference: [2] <author> S. Bellenot. </author> <title> Global Virtual Time algorithms. </title> <booktitle> In Proc. SCS Distributed Simulation Conference, </booktitle> <pages> pages 122-127, </pages> <year> 1990. </year>
Reference-contexts: In simulations using the Time Warp mechanism, virtual time is synonymous with simulation time and the smallest time-stamp among all unprocessed event messages is called Global Virtual Time <ref> [2] </ref> or GVT (see figure 1). No event with a time-stamp smaller than GVT will ever be rolled back, so storage used by such events (e.g., saved states) can be discarded. Such an event is said to be a committed event. GVT is also used for normal termination detection. <p> First, both the Sun and transputer networks have distributed memory and therefore would be similar in their need to acknowledge messages to enable the correct calculation of Global Virtual Time <ref> [2] </ref>. Secondly, the Sun version was available, known to work and complete. This meant that tests could be carried out on both the Sun and transputer versions, to provide benchmarking and confidence checks. TWOS allows any object to send messages to any other object with no constraints on their location.
Reference: [3] <author> S. Bellenot. </author> <title> A Network Version of the Time Warp Operating System. </title> <booktitle> In Proc. Workshop on Cluster Computing, </booktitle> <year> 1992. </year>
Reference-contexts: This system was developed at the Jet Propulsion Laboratory (JPL), originally for the Caltech Hypercube, and has been ported onto 2 other parallel machines such as the BBN Butterfly GP-1000. There is also a version which executes on a network of Sun workstations <ref> [3] </ref>. The Time Warp Sequential Simulator (TWSIM) is a sequential program that provides the user with a way of sequentially running applications intended for the Time Warp Operating System. TWSIM has exactly the same user interface as TWOS and produces the same simulation results.
Reference: [4] <author> C. J. M. Booth, M. J. Kirton, and K. R. Milner. </author> <title> Experiences in Implementing the Breathing Time Buckets Algorithm on a Transputer Array. </title> <booktitle> Proc. IASTED Conf. on Modelling and Simulation, </booktitle> <pages> pages 274-277, </pages> <year> 1993. </year>
Reference-contexts: The use of TWOS as a benchmark in evaluating the performance of other simulators is described in [8], which gives a comparison of the performance of TWOS and a simulator <ref> [4] </ref> developed by the Defence Research Agency (Malvern) based on the Breathing Time Buckets algorithm. TWOS is also being used in a number of simulation projects: examples include the simulation of parallel computer architectures, Petri nets and cellular communications. 3.
Reference: [5] <author> K. M. Chandy and J. Misra. </author> <title> Distributed Simulation: A case study in design and verification of distributed programs. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> S.E.5(5):440-452, </volume> <year> 1979. </year>
Reference-contexts: As there is no longer a single set of future events, preserving causality is the main problem in distributed simulations, and this is converted to an event synchronization problem. There are two basic approaches to solving this in the design of distributed simulations: the conservative approach <ref> [5] </ref> and the optimistic approach [13]. The conservative approach strictly avoids the possibility of any causality error ever occurring. It means that each LP must deal with event messages in order of nondecreasing time-stamp. <p> The basic problem conservative mechanisms must solve is determining when it is safe to process an event. LPs containing no safe events must block: this can lead to deadlock if appropriate precautions are not taken. In the Chandy-Misra-Bryant (CMB) algorithm <ref> [5] </ref>, null messages are used to avoid deadlock. The principal drawbacks of this method are the overhead of the null messages, the fixed connectivity required between LPs and the restriction on the amount of parallelism that may be exploited.
Reference: [6] <author> L. J. Clarke. </author> <title> Tiny Version 2 Release 1 For Inmos ANSI C Toolset: C Interface, </title> <year> 1991. </year>
Reference-contexts: By contrast, a transputer can communicate directly with only its four neighbouring transputers and only the root transputer has direct access to the host computer's file system. At the time this work was carried out, it was felt that Tiny <ref> [6, 7] </ref> offered the best solution to this problem as it provided a minimal, fast, deadlock-free message router. As there will be many objects (logical processes) on each processor, a context switching mechanism is required.
Reference: [7] <author> L. J. Clarke. </author> <title> Tiny Version 2 Release 1 For Inmos ANSI C Toolset: Overview, </title> <year> 1991. </year>
Reference-contexts: By contrast, a transputer can communicate directly with only its four neighbouring transputers and only the root transputer has direct access to the host computer's file system. At the time this work was carried out, it was felt that Tiny <ref> [6, 7] </ref> offered the best solution to this problem as it provided a minimal, fast, deadlock-free message router. As there will be many objects (logical processes) on each processor, a context switching mechanism is required. <p> Currently, pre-emptive scheduling is not implemented in the transputer version. 4. The Transputer Implementation of TWOS The transputer versions of TWSIM and TWOS were implemented under the ANSI C standard, using the Inmos D4214B ANSI C Toolset [12]. 4 4.1. Message passing The Tiny <ref> [7] </ref> message passing system was used to provide full connectivity between tasks, with messages addressed by task name rather than by channel. A Time Warp simulation is configured as a number of Time Warp nodes with one Time Warp node per transputer (see figure 2).
Reference: [8] <author> M. Damitio, S. J. Turner, C. J. M. Booth, M. J. Kirton, K. R. Milner, and P. R. Hoare. </author> <title> Comparing the Breathing Time Buckets Algorithm and the Time Warp Operating System on a Transputer Architecture. </title> <booktitle> In Proc. SCS European Simulation Multiconference, </booktitle> <pages> pages 141-145, </pages> <year> 1994. </year>
Reference-contexts: This paper reports on the first of these objectives: the suitability of transputer networks as a platform for the Time Warp Operating System. The use of TWOS as a benchmark in evaluating the performance of other simulators is described in <ref> [8] </ref>, which gives a comparison of the performance of TWOS and a simulator [4] developed by the Defence Research Agency (Malvern) based on the Breathing Time Buckets algorithm.
Reference: [9] <author> R. M. Fujimoto. </author> <title> Parallel Discrete Event Simulation. </title> <journal> CACM, </journal> <volume> 33(10) </volume> <pages> 30-53, </pages> <year> 1990. </year>
Reference-contexts: The principal drawbacks of this method are the overhead of the null messages, the fixed connectivity required between LPs and the restriction on the amount of parallelism that may be exploited. In contrast to conservative mechanisms, optimistic methods detect and recover from causality errors <ref> [9] </ref>, they do not strictly avoid them. The Time Warp mechanism, based on the Virtual Time paradigm [13], is the most well-known optimistic protocol. This mechanism allows an LP to simulate as far forward in time as possible, with no regard for the risk of having its simulated past affected.
Reference: [10] <author> P. Hontalas, B. Beckman, M. Di Loreto, L. Blume, P. Reiher, K. Sturdevant, L. Van Warren, J. Wedel, F. Wieland, and D. Jefferson. </author> <title> Performance of the colliding pucks simulation on the Time Warp Operating System. </title> <booktitle> In Proc. SCS Distributed Simulation Conference, </booktitle> <pages> pages 3-7, </pages> <year> 1989. </year>
Reference-contexts: Three standard benchmark applications are provided with the TWOS system and these ran on the transputer version without modification: * Pucks <ref> [10] </ref>, a simulation of two-dimensional colliding disks, * Warpnet [19], a computer network simulation, * STB88 [24], a distributed combat simulation.
Reference: [11] <author> Inmos. </author> <title> Transputer Reference Manual. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: The event set mechanism in TWSIM is based on the splay tree, one of the most efficient methods of organising the set of events [14] in a sequential simulator. This paper describes the transputer <ref> [11] </ref> implementation of TWSIM and TWOS. The research objectives of the project are discussed in the next section. After outlining some of the design considerations in section 3, important aspects of the transputer implementation are described in section 4.
Reference: [12] <author> Inmos. </author> <title> ANSI C Toolset Reference Manual, </title> <year> 1990. </year>
Reference-contexts: Currently, pre-emptive scheduling is not implemented in the transputer version. 4. The Transputer Implementation of TWOS The transputer versions of TWSIM and TWOS were implemented under the ANSI C standard, using the Inmos D4214B ANSI C Toolset <ref> [12] </ref>. 4 4.1. Message passing The Tiny [7] message passing system was used to provide full connectivity between tasks, with messages addressed by task name rather than by channel.
Reference: [13] <author> D. R. Jefferson. </author> <title> Virtual Time. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 7(3) </volume> <pages> 404-425, </pages> <year> 1985. </year>
Reference-contexts: There are two basic approaches to solving this in the design of distributed simulations: the conservative approach [5] and the optimistic approach <ref> [13] </ref>. The conservative approach strictly avoids the possibility of any causality error ever occurring. It means that each LP must deal with event messages in order of nondecreasing time-stamp. The basic problem conservative mechanisms must solve is determining when it is safe to process an event. <p> In contrast to conservative mechanisms, optimistic methods detect and recover from causality errors [9], they do not strictly avoid them. The Time Warp mechanism, based on the Virtual Time paradigm <ref> [13] </ref>, is the most well-known optimistic protocol. This mechanism allows an LP to simulate as far forward in time as possible, with no regard for the risk of having its simulated past affected.
Reference: [14] <author> D.W. Jones. </author> <title> An Empirical Comparison of Priority Queue and Event Set Implementations. </title> <journal> Comm. ACM, </journal> <volume> 29(4) </volume> <pages> 300-311, </pages> <year> 1986. </year>
Reference-contexts: It is used to debug simulations, to generate certain statistics useful in running TWOS, and to provide a basis for speed-up comparisons. The event set mechanism in TWSIM is based on the splay tree, one of the most efficient methods of organising the set of events <ref> [14] </ref> in a sequential simulator. This paper describes the transputer [11] implementation of TWSIM and TWOS. The research objectives of the project are discussed in the next section. After outlining some of the design considerations in section 3, important aspects of the transputer implementation are described in section 4.
Reference: [15] <author> JPL. </author> <title> Time Warp Operating System User's Manual. </title> <institution> Jet Propulsion Laboratory, </institution> <year> 1991. </year>
Reference-contexts: No event with a time-stamp smaller than GVT will ever be rolled back, so storage used by such events (e.g., saved states) can be discarded. Such an event is said to be a committed event. GVT is also used for normal termination detection. The Time Warp Operating System (TWOS) <ref> [15] </ref> is a complete implementation of the Time Warp mechanism, designed to support discrete event simulation on parallel architectures. Simulation designers can define many different types of object (logical process). For each object, there is a module of application code that will be executed at run-time.
Reference: [16] <author> JPL. </author> <title> Time Warp Operating System Internals Manual. </title> <institution> Jet Propulsion Laboratory, </institution> <year> 1992. </year>
Reference-contexts: The GP-1000 consists of Motorola 68020 processors, each with 4 MBytes of memory. For each of the benchmark applications, three graphs are shown, as recommended in <ref> [16] </ref>. The first gives the timing curves, which show run time plotted against the number of processors. The two points on the vertical axis are the run times for the sequential simulator TWSIM.
Reference: [17] <author> M.D. May, P.W. Thompson, and P.H. Welch. </author> <title> Networks, Routers and Transputers. </title> <publisher> IOS Press, </publisher> <year> 1993. </year>
Reference-contexts: To evaluate the suitability of transputers as a platform for optimistic simulation based on the Time Warp mechanism. This would include not only the current generation of transputers (T805), but also the newly available T9000 series <ref> [17] </ref>. 2. To provide a benchmark against which other approaches to discrete event simulation could be evaluated. This would include both optimistic and conservative methods, and variations of these such as the Breathing Time Buckets (BTB) algorithm [22]. 3 3. <p> Current work and Future developments 6.1. The T9000 Implementation The T9000 series of transputers offers a number of improvements over the T805. In addition to being a much faster processor, global connectivity is provided by means of virtual channels <ref> [17] </ref>. On the T9000, these are multiplexed by hardware onto the physical links by the on-chip virtual channel processor. In conjunction with the C104 router, this provides virtual channel routing by hardware.
Reference: [18] <author> D.A.P. Mitchell, J.A. Thompson, G.A. Manson, and G.R. Brookes. </author> <title> Inside the Transputer. </title> <publisher> Black-well Scientific Publications, </publisher> <year> 1990. </year>
Reference-contexts: Although the current generation of transputers (T805) is slower in terms of raw processing power than the processors in more recent workstations, this disadvantage is offset by the fact that support for concurrency is provided on the transputer by hardware <ref> [18] </ref> rather than by software. Moreover, in a network of transputers, message passing is via high speed links rather than a local area network such as Ethernet. <p> However, manipulating the scheduling queue is dangerous on the T805 transputer, since there is no easy way of preventing the link hardware from modifying the queue at the same time. A simple solution to this problem involves the use of the two transputer instructions runp and stopp <ref> [18] </ref>. Each object is started as a transputer process, but when an object calls a TWOS service, its workspace pointer is saved in its state and the TWOS kernel on that node is run by executing runp, which reinstates the TWOS workspace pointer.
Reference: [19] <author> M. Presley, M. Ebling, F. Wieland, and D. Jefferson. </author> <title> Benchmarking the Time Warp Operating System with a computer network simulation. </title> <booktitle> In Proc. SCS Distributed Simulation Conference, </booktitle> <pages> pages 8-13, </pages> <year> 1989. </year>
Reference-contexts: Three standard benchmark applications are provided with the TWOS system and these ran on the transputer version without modification: * Pucks [10], a simulation of two-dimensional colliding disks, * Warpnet <ref> [19] </ref>, a computer network simulation, * STB88 [24], a distributed combat simulation. In the following subsections, results are given comparing the performance of the transputer version of TWOS with that of TWOS on the BBN Butterfly GP-1000 (using data provided by JPL). <p> These experiments were carried out using a simulation of 137 warpnet node objects and 32 warpinit objects (169 objects in total). The exact topology of the simulated computer network is not important apart from the fact that it has only partial connectivity <ref> [19] </ref>. 10 0 1000 2000 3000 Time (secs) Processors 'Transputer' 3 3 3 3 'BBN' + + + 0 4 8 12 Speedup Processors 'Transputer' 3 3 3 3 3 3 3 3 'BBN' + + + + + 0 4000 8000 1 2 3 4 5 6 7 8 9
Reference: [20] <author> P. Reiher, S. Bellenot, and D. Jefferson. </author> <title> Temporal Decomposition of Simulations under The Time Warp Operating System. </title> <booktitle> In Proc. SCS Parallel and Distributed Simulation Conference, </booktitle> <pages> pages 47-54, </pages> <year> 1991. </year>
Reference-contexts: This will allow the easy implementation of a pre-emptive lowest virtual time first scheduling algorithm. On the Hypercube, it was found that pre-emptive scheduling improved the performance of TWOS by about 10%. 6.2. Dynamic Load Management According to Reiher et. al. <ref> [20] </ref>, simulations run under TWOS can only achieve their peak performance if the load on the processors of the parallel machine is balanced. Otherwise, some processors will spend part of the run not contributing to the computation, effectively wasting some processing power.
Reference: [21] <author> P. Reiher and D. Jefferson. </author> <title> Dynamic Load Management in the Time Warp Operating System. </title> <journal> Trans. Society for Computer Simulation, </journal> <volume> 7(2) </volume> <pages> 91-120, </pages> <year> 1990. </year>
Reference-contexts: Dynamic load management monitors the course of the run and shifts objects or phases (see below) from node to node to equalize load. Reiher and Jefferson <ref> [21] </ref> have shown how the dynamic load management facility produces good performance improvements. To balance the load on TWOS dynamically, it is necessary to determine periodically the load on each node of the network.
Reference: [22] <author> J. S. Steinman. SPEEDES: </author> <title> Synchronous Parallel Environment for Emulation and Discrete Event Simulation. </title> <booktitle> Proc. Parallel and Distributed Simulation Conference, </booktitle> <pages> pages 95-103, </pages> <year> 1991. </year>
Reference-contexts: To provide a benchmark against which other approaches to discrete event simulation could be evaluated. This would include both optimistic and conservative methods, and variations of these such as the Breathing Time Buckets (BTB) algorithm <ref> [22] </ref>. 3 3. To provide a parallel discrete event simulation system which could be used not only as an educational tool but also as a production quality simulator for a variety of application areas.
Reference: [23] <author> J. G. Taylor. </author> <title> Lanchester-Type Models of Warfare. </title> <type> Technical report, </type> <institution> US Naval Postgraduate School, </institution> <address> Monterey, CA, </address> <year> 1980. </year>
Reference-contexts: When two enemy divisions are within a critical distance of each other, an engagement begins and the divisions perform an attrition calculation (this is based on the Lanch-ester model in <ref> [23] </ref>). When a division has lost enough weapons to fall below a critical value, it is destroyed and the territory may be captured by the other side.
Reference: [24] <author> F. Wieland, L. Hawley, A. Feinberg, M. Di Loreto, L. Blume, J. Ru*es, P. Reiher, B. Beckman, P. Hontalas, S. Bellenot, and D. Jefferson. </author> <title> The Performance of a distributed combat simulation with the Time Warp Operating System. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 1(1) </volume> <pages> 35-50, </pages> <year> 1989. </year>
Reference-contexts: Three standard benchmark applications are provided with the TWOS system and these ran on the transputer version without modification: * Pucks [10], a simulation of two-dimensional colliding disks, * Warpnet [19], a computer network simulation, * STB88 <ref> [24] </ref>, a distributed combat simulation. In the following subsections, results are given comparing the performance of the transputer version of TWOS with that of TWOS on the BBN Butterfly GP-1000 (using data provided by JPL).
Reference: [25] <author> F. Wieland, P. Reiher, and D. Jefferson. </author> <title> Experiences in Parallel Performance Measurement: The Speedup Bias. </title> <booktitle> In Proc. 3rd Symp. on Experiences with Distributed and Multiprocessor Systems, </booktitle> <year> 1992. </year>
Reference-contexts: + + 0 100000 200000 ERBOs Processors 'Transputer' 3 3 3 3 3 3 3 3 3 'BBN' + + + + 9 the run time for TWSIM by the run time for TWOS (speed-up calculated relative to the one-processor TWOS time would look more impressive, but would be misleading <ref> [25] </ref>). The third graph shows EBRO (Events Rolled Back Over), which is calculated by subtracting the number of events committed from the number of events completed. 5.1. Results for Pucks application Pucks is a discrete event simulation of two-dimensional disks moving on a flat surface (the table).
References-found: 25

