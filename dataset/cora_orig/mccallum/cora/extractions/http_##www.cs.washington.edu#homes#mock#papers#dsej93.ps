URL: http://www.cs.washington.edu/homes/mock/papers/dsej93.ps
Refering-URL: http://www.cs.washington.edu/homes/mock/papers.html
Root-URL: 
Title: 1 DC++: Distributed Object-Oriented System Support on top of OSF DCE  
Author: Alexander B. Schill and Markus U. Mock 
Address: Germany 1  
Affiliation: Institute of Telematics, University of Karlsruhe,  
Abstract: The OSF Distributed Computing Environment (DCE) is becoming an industry standard for open distributed computing. However, DCE only supports client/server-style applications based on the remote procedure call (RPC) communication model. This paper describes the design and implementation of an extended distributed object-oriented environment, DC++, on top of DCE. As opposed to RPC, it supports a uniform object model, location independent invocation of fine-grained objects, remote reference parameter passing, dynamic migration of objects between nodes, and C++ language integration. Moreover, the implementation is fully integrated with DCE, using DCE UUIDs for object identification, DCE threads for interobject concurrency, DCE RPC for remote object invocation, and the DCE Cell Directory Service (CDS) for optional retrieval of objects by name. An additional stub compiler enables automatic generation of C++- based object communication interfaces. Low-level parameter encoding is done by DCE RPC's stub generation facility using the C-based DCE interface definition language (IDL). The system has been fully implemented and tested by implementing an office application. Experiences with the existing system and performance results are also reported in the paper. Furthermore, a former, less transparent implementation of our group using DCE RPC as a pure transport-level mechanism is compared with the described approach. Related C++ extensions and standardization efforts are also compared with our work. 
Abstract-found: 1
Intro-found: 1
Reference: [ABB93] <author> Assenmacher, H., Breitbach, T., Buhler, P., Hbsch, V., Schwarz, R.: </author> <title> Panda - Supporting Distributed Programming in C++; Internal Report, </title> <institution> Univ. of Kaiserslautern, </institution> <year> 1993 </year>
Reference-contexts: For example, distributed C++ extensions have been implemented by the Amber system [CAL89], the Amadeus system [HOC91] within the European ESPRIT project CO-MANDOS, the Arjuna system [SDP91], Electra [MAF92], Peace [SCP92], and Panda <ref> [ABB93] </ref>. A similar approach has been the base of the ANSA project [ANS89], leading to the ANSAware system. Amadeus offers a general distributed C++ implementation but required many compiler modifications as reported by the authors. The Amber system integrates local multiprocessor parallelism with distributed programming.
Reference: [ANS89] <institution> Advanced Network Systems Architecture (ANSA): ANSA Reference Manual; APM Ltd., </institution> <address> 24 Hills Road, Cambridge CB2 IJP, UK (Mar. </address> <year> 1989) </year>
Reference-contexts: For example, distributed C++ extensions have been implemented by the Amber system [CAL89], the Amadeus system [HOC91] within the European ESPRIT project CO-MANDOS, the Arjuna system [SDP91], Electra [MAF92], Peace [SCP92], and Panda [ABB93]. A similar approach has been the base of the ANSA project <ref> [ANS89] </ref>, leading to the ANSAware system. Amadeus offers a general distributed C++ implementation but required many compiler modifications as reported by the authors. The Amber system integrates local multiprocessor parallelism with distributed programming. These facilities are achieved by the use of a dedicated kernel named Topaz.
Reference: [BEN87] <author> Bennett, J.K.: </author> <booktitle> The Design and Implementation of Distributed Smalltalk; ACM OOPSLA Conf., </booktitle> <address> Orlando, Florida, </address> <year> 1987, </year> <pages> pp. 318-330 </pages>
Reference-contexts: This makes sophisticated performance possible but requires kernel modifications. Implementations of distributed object-oriented systems based on different or new languages are Emerald [BHJ87], Distributed Smalltalk <ref> [BEN87] </ref>, and LII [BLA90]. They have introduced the major concepts and have shown that they can be implemented efficiently. However, due to the specialized languages, these and other systems have been limited to a dedicated domain of users.
Reference: [BHJ87] <author> Black, A., Hutchinson, N., Jul, E., Levy, H., Carter, L.: </author> <title> Distribution and Abstract Types in Emerald; IEEE Trans. </title> <journal> on Softw. Eng., </journal> <volume> Vol. 13, No. 1, </volume> <month> Jan. </month> <year> 1987, </year> <pages> pp. 65-75 </pages>
Reference-contexts: Based on DCE, the imple mentation is highly portable and enables heterogeneous systems interoperability. - 3 - The approach is based on concepts introduced by earlier systems such as Emerald <ref> [BHJ87] </ref>, Amber [CAL89], Arjuna [SDP91], and Amadeus [HOC91]. However, as opposed to these systems, it is integrated with DCE mechanisms, an issue that guided many detailed design choices. <p> This makes sophisticated performance possible but requires kernel modifications. Implementations of distributed object-oriented systems based on different or new languages are Emerald <ref> [BHJ87] </ref>, Distributed Smalltalk [BEN87], and LII [BLA90]. They have introduced the major concepts and have shown that they can be implemented efficiently. However, due to the specialized languages, these and other systems have been limited to a dedicated domain of users.
Reference: [BLA90] <author> Black, A., Artsy, Y.: </author> <title> Implementing Location Independent Invocation; IEEE Trans. </title> <journal> on Parallel and Distributed Systems, </journal> <volume> Vol. 1, No. 1, </volume> <month> Jan. </month> <year> 1990, </year> <pages> pp. 107-119 </pages>
Reference-contexts: This makes sophisticated performance possible but requires kernel modifications. Implementations of distributed object-oriented systems based on different or new languages are Emerald [BHJ87], Distributed Smalltalk [BEN87], and LII <ref> [BLA90] </ref>. They have introduced the major concepts and have shown that they can be implemented efficiently. However, due to the specialized languages, these and other systems have been limited to a dedicated domain of users.
Reference: [CAL89] <author> Chase, J.S., Amador, F.G., Lazowska, E.D., Levy, H.M., Littlefield, </author> <title> R.J.: The Amber System: </title> <booktitle> Parallel Programming on a Network of Multiprocessors; 12th ACM Symp. on Operating Systems Principles, </booktitle> <address> Litchfield Park, Arizona, </address> <year> 1989, </year> <pages> pp. 147-158 </pages>
Reference-contexts: Based on DCE, the imple mentation is highly portable and enables heterogeneous systems interoperability. - 3 - The approach is based on concepts introduced by earlier systems such as Emerald [BHJ87], Amber <ref> [CAL89] </ref>, Arjuna [SDP91], and Amadeus [HOC91]. However, as opposed to these systems, it is integrated with DCE mechanisms, an issue that guided many detailed design choices. <p> For example, distributed C++ extensions have been implemented by the Amber system <ref> [CAL89] </ref>, the Amadeus system [HOC91] within the European ESPRIT project CO-MANDOS, the Arjuna system [SDP91], Electra [MAF92], Peace [SCP92], and Panda [ABB93]. A similar approach has been the base of the ANSA project [ANS89], leading to the ANSAware system.
Reference: [CHC91] <author> Chin, </author> <title> R.S., Chanson, </title> <booktitle> S.T.: Distributed Object-Based Programming Systems; ACM Comp. Surv., </booktitle> <volume> Vol. 23, No. 1, </volume> <month> Mar. </month> <year> 1991, </year> <pages> pp. 91-124 - 21 </pages> - 
Reference-contexts: On the other hand, we also believe that it does not make sense to provide virtually all "local" functionality remotely at any price in terms of implementation effort. 4 Related Approaches Several other distributed object-oriented prototype systems have been implemented; a survey is given in <ref> [CHC91] </ref>. For example, distributed C++ extensions have been implemented by the Amber system [CAL89], the Amadeus system [HOC91] within the European ESPRIT project CO-MANDOS, the Arjuna system [SDP91], Electra [MAF92], Peace [SCP92], and Panda [ABB93].
Reference: [DEC86] <author> Decouchant, D.: </author> <title> Design of a Distributed Object Manager for the Smalltalk-80 System; ACM OOPSLA Conf., </title> <booktitle> Portland, Oregon 1986, </booktitle> <pages> pp. 444-452 </pages>
Reference-contexts: The alternative of immediately updating all remote proxies whenever an object moves would improve invocation performance of mobile objects and is found in some distributed Smalltalk implementations (see <ref> [DEC86] </ref>, for example).
Reference: [ENC92] <institution> Encina Transaction Processing System; Transarc Corp., </institution> <address> Pittsburgh, PA, </address> <year> 1992 </year>
Reference-contexts: Nevertheless, we believe that advanced features can be built directly on top of our distributed object management techniques. Such an enhanced implementation can also be facilitated by RPC-based distributed transaction management products on top of DCE such as Encina <ref> [ENC92] </ref>. In the following sections, we first give an overview of the underlying OSF Distributed Computing Environment and then discuss our system architecture and design choices. Thereafter, we describe details of our implementation and discuss experiences and performance results. We also illustrate the functionality by an example application.
Reference: [HOC91] <author> Horn, C., Cahill, V.: </author> <title> Supporting Distributed Applications in the Amadeus Environment; Computer Communications, </title> <journal> Vol. </journal> <volume> 14, No. 6, Juli/Aug. </volume> <year> 1991, </year> <pages> pp. 358-365 </pages>
Reference-contexts: Based on DCE, the imple mentation is highly portable and enables heterogeneous systems interoperability. - 3 - The approach is based on concepts introduced by earlier systems such as Emerald [BHJ87], Amber [CAL89], Arjuna [SDP91], and Amadeus <ref> [HOC91] </ref>. However, as opposed to these systems, it is integrated with DCE mechanisms, an issue that guided many detailed design choices. <p> For example, distributed C++ extensions have been implemented by the Amber system [CAL89], the Amadeus system <ref> [HOC91] </ref> within the European ESPRIT project CO-MANDOS, the Arjuna system [SDP91], Electra [MAF92], Peace [SCP92], and Panda [ABB93]. A similar approach has been the base of the ANSA project [ANS89], leading to the ANSAware system.
Reference: [LET91] <author> Levy, H.M., Tempero, E.D.: </author> <title> Modules, Objects and Distributed Programming: Issues in RPC and Remote Object Invocation; Software - Practice and Experience, </title> <journal> Vol. </journal> <volume> 21, No. 1, </volume> <month> Jan. </month> <year> 1991, </year> <pages> pp. 77-90 </pages>
Reference-contexts: This environment has reached a stable, product-level stage, is becoming widely available, operates in heterogeneous systems, and is the base for many higher-level services such as distributed transaction support. For these reasons, DCE has been the choice for our research and development projects, too. However, like other authors <ref> [LET91] </ref>, we have also observed several deficiencies of the traditional client/server-model supported by DCE: Granularity: Clients and servers are heavyweight instances. Therefore, it is costly to install them dynamically and it is virtually impossible to relocate them at runtime. Communication: The communication paradigm in asymmetric: Invocations are usually client-to-server round-trip.
Reference: [MAF92] <author> Maffeis, S.: </author> <title> The Electra Approach to Object Oriented Programming; Institute for Infor-matics, </title> <institution> University of Zrich, IFI TR 92.23, </institution> <month> November </month> <year> 1992 </year>
Reference-contexts: For example, distributed C++ extensions have been implemented by the Amber system [CAL89], the Amadeus system [HOC91] within the European ESPRIT project CO-MANDOS, the Arjuna system [SDP91], Electra <ref> [MAF92] </ref>, Peace [SCP92], and Panda [ABB93]. A similar approach has been the base of the ANSA project [ANS89], leading to the ANSAware system. Amadeus offers a general distributed C++ implementation but required many compiler modifications as reported by the authors. The Amber system integrates local multiprocessor parallelism with distributed programming.
Reference: [OMG91] <author> Object Management Group: </author> <title> The Common Object Request Broker: Architecture and Specification; OMG, </title> <year> 1991 </year>
Reference-contexts: However, due to the specialized languages, these and other systems have been limited to a dedicated domain of users. Finally, we would also like to note the standardization effort of the Object Management Group (OMG) [OMG92], especially concerning the Common Object Request Broker (CORBA) <ref> [OMG91] </ref>. This ambitious work aims at providing a global distributed/persistent object management framework, including DCE technology, language bindings, but also services from other areas like databases. CORBA itself enables remote object invocations, offering a C++ language binding. However, it does not support object mobility.
Reference: [OMG92] <institution> Object Management Group: Object Services Architecture; OMG, </institution> <year> 1992 </year>
Reference-contexts: However, due to the specialized languages, these and other systems have been limited to a dedicated domain of users. Finally, we would also like to note the standardization effort of the Object Management Group (OMG) <ref> [OMG92] </ref>, especially concerning the Common Object Request Broker (CORBA) [OMG91]. This ambitious work aims at providing a global distributed/persistent object management framework, including DCE technology, language bindings, but also services from other areas like databases. CORBA itself enables remote object invocations, offering a C++ language binding.
Reference: [OSF92a] <author> Open Software Foundation: </author> <title> Introduction to OSF DCE; Open Software Foundation, </title> <address> Cambridge, USA, </address> <year> 1992 </year>
Reference: [OSF92b] <author> Open Software Foundation: </author> <title> DCE Users Guide and Reference; Open Software Foundation, </title> <address> Cambridge, USA, </address> <year> 1992 </year>
Reference: [OSF92c] <author> Open Software Foundation: </author> <title> DCE Application Development Guide; Open Software Foundation, </title> <address> Cambridge, USA, </address> <year> 1992 </year>
Reference-contexts: With DC++, much of this task can be left to the IDL compiler and stub generator. Moreover, interobject communication was only possible in homogeneous systems due to data representation mismatch problems. With DC++, DCE performs transparent data transformations based on its "receiver makes right" scheme <ref> [OSF92c] </ref>. Finally, our former implementation did not achieve a satisfying performance due to the use of an intermediate "message distributor" process per physical node. With DCE RPC, interprocess communication is direct as soon as a full binding handle for a peer server is available.
Reference: [OSF92d] <author> Open Software Foundation: </author> <title> DCE Application Development Reference; Open Software Foundation, </title> <address> Cambridge, USA, </address> <year> 1992 </year>
Reference: [PER93] <editor> Person, M.: Verteilte Objektverwaltung auf der Basis von DCE; Diplomarbeit an der Fakultt fr Informatik der Universitt Karlsruhe, </editor> <booktitle> 1993 (in German) </booktitle>
Reference: [SCH93] <author> Schill, A.: </author> <title> Das OSF Distributed Computing Environment: </title> <publisher> Einfhrung und Grundlagen; Springer, </publisher> <address> Berlin/Heidelberg, </address> <note> 1993 (in German) </note>
Reference: [SCM93] <author> Schill A., Mock M.: </author> <title> Design and Implementation of Distributed C++, </title> <booktitle> EURO-Arch '93 Conference, </booktitle> <address> Munich, </address> <month> Oct. </month> <year> 1993 </year>
Reference-contexts: Moreover, the use of DCE as a standard has provided significant implementation benefits. The described implementation grew out of experiences with an earlier system that attempted to provide the same functionality. However, we implemented this former prototype directly on top of TCP/IP <ref> [SCM93] </ref> without DCE support. Our experiences compared to DC++ can be summarized as follows: First, it was much harder to provide basic system functionality for naming, object addressing and multithreading.
Reference: [SCP92] <author> Schrder-Preikschat, W.: </author> <title> PEACE - The Evolution of a Parallel Operating System; Reports of GMD No. </title> <type> 646, </type> <month> May </month> <year> 1992 </year>
Reference-contexts: For example, distributed C++ extensions have been implemented by the Amber system [CAL89], the Amadeus system [HOC91] within the European ESPRIT project CO-MANDOS, the Arjuna system [SDP91], Electra [MAF92], Peace <ref> [SCP92] </ref>, and Panda [ABB93]. A similar approach has been the base of the ANSA project [ANS89], leading to the ANSAware system. Amadeus offers a general distributed C++ implementation but required many compiler modifications as reported by the authors. The Amber system integrates local multiprocessor parallelism with distributed programming.
Reference: [SDP91] <author> Shrivastava, S.K., Dixon, G.N., Parrington, G.D.: </author> <title> An Overview of the Arjuna Distributed Programming System; IEEE Software, </title> <month> Jan. </month> <year> 1991, </year> <pages> pp. 66-73 </pages>
Reference-contexts: Based on DCE, the imple mentation is highly portable and enables heterogeneous systems interoperability. - 3 - The approach is based on concepts introduced by earlier systems such as Emerald [BHJ87], Amber [CAL89], Arjuna <ref> [SDP91] </ref>, and Amadeus [HOC91]. However, as opposed to these systems, it is integrated with DCE mechanisms, an issue that guided many detailed design choices. <p> For example, distributed C++ extensions have been implemented by the Amber system [CAL89], the Amadeus system [HOC91] within the European ESPRIT project CO-MANDOS, the Arjuna system <ref> [SDP91] </ref>, Electra [MAF92], Peace [SCP92], and Panda [ABB93]. A similar approach has been the base of the ANSA project [ANS89], leading to the ANSAware system. Amadeus offers a general distributed C++ implementation but required many compiler modifications as reported by the authors.
Reference: [TKR91] <author> Tanenbaum, A.S., Kaashoek, M.F., v. Renesse, R., Bal, </author> <title> H.E.: The Amoeba Distributed Operating System - A Status Report; Computer Communications, </title> <journal> Vol. </journal> <volume> 14, No. 6, July/Aug. </volume> <year> 1991, </year> <pages> pp. 324-335 </pages>
Reference-contexts: The achieved performance is fully acceptable within our cooperation project with DEC. It can definitely be improved by some implementation optimizations, but it will not reach the limits of mi-crokernel implementations like Amoeba <ref> [TKR91] </ref>, of course. This is the price to pay for the use of standards - but within our context of work, it seems to be worth to pay it. 5 Conclusion This paper described the design and implementation of a distributed object-oriented extension of the OSF Distributed Computing Environment.
References-found: 24

