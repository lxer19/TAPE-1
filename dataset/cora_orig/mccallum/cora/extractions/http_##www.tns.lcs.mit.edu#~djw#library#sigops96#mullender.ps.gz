URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/mullender.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/sigops96/index.html
Root-URL: 
Email: E-mail: martijn@pegasus.esprit.ec.org  
Title: Simulating Wide-area Replication  
Author: Sape J. Mullender Martijn van der Valk 
Address: P.O. Box 217, 7500 AE Enschede, Netherlands  
Affiliation: University of Twente,  
Abstract: We describe our experiences with simulating replication algorithms for use in far flung distributed systems. The algorithms under scrutiny mimic epidemics. Epidemic algorithms seem to scale and adapt to change (such as varying replica sets) well. The loose consistency guarantees they make seem more useful in applications where availability strongly outweighs correctness; e.g., distributed name service.
Abstract-found: 1
Intro-found: 1
Reference: [Becker88] <author> Richard A. Becker, John M. Chambers, and Allan R. Wilks. </author> <title> New S Language: A Programming Environment for Data Analysis and Graphics. </title> <publisher> Wadsworth, </publisher> <year> 1988. </year>
Reference-contexts: When run, this imports the generic analyser code through Python libraries. The output of the analyser can be run directly through gnuplot or Splus <ref> [Becker88] </ref>, to create the graphs in this paper. 5.1 Round-trip Delays It is impossible to foresee all the kinds of future applications that will make use of far-flung replication. At present, the only existing candidates would be (selected) Web servers and their clients.
Reference: [Berners-Lee94a] <author> T. Berners-Lee, R. Cailliau, A. Luotonen, H. F. Nielsen, and A. </author> <title> Secret. The WorldWide Web. </title> <journal> Communications of the ACM, </journal> <volume> 37(8):7682, </volume> <month> August </month> <year> 1994. </year>
Reference-contexts: As an example, every time one clicks on a hyperlink in a World Wide Web browser, the corresponding data is replicated in a cache on your local disk. The success of the Web <ref> [Berners-Lee94a] </ref> lies partly in the simplicity of its protocols. However, simplicity comes at a price; e.g., http does not cater for coherency control between source and replica. Also, with the appearance of commercial web servers, replication of data becomes important to increase availability.
Reference: [Berners-Lee94b] <author> T. Berners-Lee. </author> <title> Universal Resource Identifiers in WWW. Request for Comments 1630. </title> <booktitle> ARPA Network Working Group, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: This work is still in progress, and up to now, URNs have not been defined; see <ref> [Berners-Lee94b] </ref>. We believe that for naming to be efficient, names have to be impure to some extent, so they may guide the name resolution. Efficiency can be realised, even in the face of replication using the following scheme.
Reference: [Birrel82] <author> Andrew D. Birrel, Roy Levin, Roger M. Needham, and Michael D. Schroeder. Grapevine: </author> <title> An exercise in distributed computing. </title> <journal> Communications of the ACM, </journal> <volume> 25(4):26074, </volume> <month> April </month> <year> 1982. </year>
Reference-contexts: The algorithms are partly randomized, have simple behaviour and keep little state, yet are capable of distributing updates fairly rapidly among a large percentage of the nodes. The usefulness of epidemic algorithms was reported in [Demers87], as part of the Grapevine <ref> [Birrel82] </ref> project.
Reference: [Black87] <author> Andrew Black, Norman Hutchinson, Eric Jul, Henry Levy, and Larry Carter. </author> <title> Distribution and abstract types in Emerald. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE13(1):6576, </volume> <month> January </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Traditionally, replication has been an important area of research in distributed systems. Most of the existing work concerns small-scale (LAN) interconnects <ref> [Black87, Dixon89] </ref>. In recent years, replication of data across an interconnect that spans continents is becoming ever more popular. As an example, every time one clicks on a hyperlink in a World Wide Web browser, the corresponding data is replicated in a cache on your local disk.
Reference: [Ceri84] <author> Stefano Ceri and Giuseppe Pelagatti. </author> <booktitle> Distributed Databases; Principles and Systems, Computer Science Series. </booktitle> <publisher> McGraw-Hill International Editions, </publisher> <year> 1984. </year>
Reference-contexts: Wide-area replication or far-flung replication is very different from the local case. To scale, coherency control cannot rely on efficient multi-cast. Further, transient communication failures make it long-winded and tedious to apply traditional methods, such as weighted voting [Gifford79] or three-phase commit <ref> [Ceri84] </ref>. An approach that has been followed is to use a layer of replication strategies, on a spectrum ranging from unreliable but efficient to reliable and slow. The first is used to distribute updates as best one may, and the latter to fill in the holes [Lampson86, Ma92].
Reference: [Demers87] <author> Alan Demers, Dan Greene, Carl Hauser, Wes Irish, John Larson, Scott Shenker, Howard Sturgis, Dan Swinehart, and Doug Terry. </author> <title> Epidemic algorithms for replicated database maintenance. </title> <booktitle> Proceedings of the 6 th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 112. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1987. </year> <title> Order no. </title> <type> 536870. </type>
Reference-contexts: The algorithms are partly randomized, have simple behaviour and keep little state, yet are capable of distributing updates fairly rapidly among a large percentage of the nodes. The usefulness of epidemic algorithms was reported in <ref> [Demers87] </ref>, as part of the Grapevine [Birrel82] project.
Reference: [Dixon89] <author> G. N. Dixon, G. D. Parrington, S. K. Shrivastava, and S. M. Wheater. </author> <title> The treatment of persistent objects in Arjuna. </title> <booktitle> Proceedings of ECOOP '89, </booktitle> <month> July </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Traditionally, replication has been an important area of research in distributed systems. Most of the existing work concerns small-scale (LAN) interconnects <ref> [Black87, Dixon89] </ref>. In recent years, replication of data across an interconnect that spans continents is becoming ever more popular. As an example, every time one clicks on a hyperlink in a World Wide Web browser, the corresponding data is replicated in a cache on your local disk.
Reference: [Gifford79] <author> D. K. Gifford. </author> <title> Weighted voting for replicated data. </title> <booktitle> Proceedings of the 7 th Symposium on Operating System Principles (Pacific Grove), </booktitle> <pages> pages 15061. </pages> <publisher> ACM, </publisher> <year> 1979. </year>
Reference-contexts: Wide-area replication or far-flung replication is very different from the local case. To scale, coherency control cannot rely on efficient multi-cast. Further, transient communication failures make it long-winded and tedious to apply traditional methods, such as weighted voting <ref> [Gifford79] </ref> or three-phase commit [Ceri84]. An approach that has been followed is to use a layer of replication strategies, on a spectrum ranging from unreliable but efficient to reliable and slow.
Reference: [Kaashoek89] <author> M. Frans Kaashoek, Andrew S. Tanenbaum, Susan Flynn Hummel, and Henri E. Bal. </author> <title> An efficient reliable broadcast protocol. Operating Systems Review, </title> <address> 23(4):519, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: To provide causal order, vector time stamps would be needed [Ladin92]. Their size is substantial, and subject to the current replica set. Also, to maintain them, more shared state is introduced. To provide total order, a sequencer would be needed <ref> [Kaashoek89] </ref>, whose single point of failure reduces availability. We are investigating the use of epidemic algorithms so called because their behaviour mimics virii spreading infectious disease for distributing updates among the nodes of a highly-available name service.
Reference: [Ladin92] <author> Rivka Ladin, Barbara Liskov, and Sanjay Ghemawat. </author> <title> Providing high availability using lazy replication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(4):36091, </volume> <month> November </month> <year> 1992. </year>
Reference-contexts: Also, different strategies could be applied to different classes of updates: changes to the set of replicas are considered more important than new data values and and hence are distributed in a stronger order <ref> [Ladin92] </ref>, Since a name service sits at the bottom of any distributed application, high availability is our prime concern. <p> The order in which updates are applied to the database is of less concern; global time stamps are used to provide a consistent shared state eventually 1 , at a low cost. To provide causal order, vector time stamps would be needed <ref> [Ladin92] </ref>. Their size is substantial, and subject to the current replica set. Also, to maintain them, more shared state is introduced. To provide total order, a sequencer would be needed [Kaashoek89], whose single point of failure reduces availability.
Reference: [Lampson86] <author> Butler W. Lampson. </author> <title> Designing a Global Name Service. </title> <booktitle> Proceedings of the 5 th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 110. </pages> <publisher> ACM, </publisher> <year> 1986. </year>
Reference-contexts: An approach that has been followed is to use a layer of replication strategies, on a spectrum ranging from unreliable but efficient to reliable and slow. The first is used to distribute updates as best one may, and the latter to fill in the holes <ref> [Lampson86, Ma92] </ref>.
Reference: [Long95] <author> Darrell Long, Andrew Muir, and Richard Golding. </author> <title> A longitudinal survey of Internet host reliability. </title> <type> Technical report UCSCCRL9516. </type> <institution> Computer and Information Sciences Board, University of California at Santa Cruz, </institution> <month> February </month> <year> 1995. </year>
Reference-contexts: Without a global joint effort (i.e., many people pinging in harmony), the first assumption cannot be verified. With the exception of <ref> [Long95] </ref>, we have not been able to find many joint efforts to measure properties of a great many hosts on the Internet simultaneously.
Reference: [Ma92] <author> Chaoying Ma. </author> <title> Designing a Universal Name Service. </title> <type> Technical report TR 270. </type> <institution> University of Cambridge Computer Laboratory, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: An approach that has been followed is to use a layer of replication strategies, on a spectrum ranging from unreliable but efficient to reliable and slow. The first is used to distribute updates as best one may, and the latter to fill in the holes <ref> [Lampson86, Ma92] </ref>.
Reference: [Needham93] <author> Roger M. Needham. </author> <title> Names. </title> <editor> In Sape J. Mullender, editor, </editor> <booktitle> Distributed Systems, Frontier Series, </booktitle> <pages> pages 31527. </pages> <publisher> Addison-Wesley Publishing Company, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: Therefore, naming will benefit immensely from a tailored implementation of wide-area replication. Again, consider the Web. Data on it are referred to by URLs. URLs identify the location of data; not their contents or type. Following his definition laid out in <ref> [Needham93] </ref>, URLs are impure names. Impure names, as contrasted with pure names, are subject to change when the data they refer to is moved, or replicated. Especially replication is bound to become a feature of many commercial sites that wish to increase their availability around the Internet.
Reference: [Rivest92] <author> R. Rivest. </author> <title> The MD5 Message-Digest Algorithm. Request for comments 1321. </title> <booktitle> ARPA Network Working Group, </booktitle> <month> April </month> <year> 1992. </year>
Reference-contexts: A way out of this dilemma is to make uninfected nodes pull for updates, and to introduce dormant infections, which are inactive until two nodes find their respective databases out-of-sync. An MD5 <ref> [Rivest92] </ref> ticket is a small (16 bytes) and efficiently computed digest of a database value, and can be used for comparison. 7 Acknowledgement Mrs. Yeung Siu Lan's help with understanding the Splus language proved indispensable.
Reference: [Shapiro92] <author> Marc Shapiro, Peter Dickman, and David Plainfosse. </author> <title> SSP chains: robust, distributed references supporting acyclic garbage collection. </title> <type> Technical report 1799. </type> <institution> INRIA, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: The way in which broken references may be re-established differs in local and wide areas. In the local area network, the use of global search as a last resort for mending broken links seems to be taken for granted by the distributed systems community <ref> [Tanenbaum90, Shapiro92] </ref>. The success of hardware-support broadcast in Ethernet seems responsible for this. However, this assumption will prove untenable in switch-based networks such as ATM, especially in large interconnects.
Reference: [Tanenbaum90] <author> A. S. Tanenbaum, Robbert van Renesse, Hans van Staveren, G. J. Sharp, S. J. Mullender, A. J. Jansen, and G. van Rossum. </author> <title> Experiences with the Amoeba distributed operating system. </title> <journal> Communications of the ACM, </journal> <volume> 33(12):4763, </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: The way in which broken references may be re-established differs in local and wide areas. In the local area network, the use of global search as a last resort for mending broken links seems to be taken for granted by the distributed systems community <ref> [Tanenbaum90, Shapiro92] </ref>. The success of hardware-support broadcast in Ethernet seems responsible for this. However, this assumption will prove untenable in switch-based networks such as ATM, especially in large interconnects.
Reference: [VanRossum93] <author> Guido van Rossum. </author> <title> An Introduction to Python for UNIX/C Programmers. </title> <booktitle> Proceedings of the NLUUG (The Netherlands), </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: However, this decision also means that the code is relatively inflexible. Yet, during analysing, one often needs to filter out uninteresting data or magnify the good bits. Therefore, analysis should be done using a language that allows rapid adjustments. Python was a good choice <ref> [VanRossum93] </ref>. As it is interpreted, it is very flexible. Yet, its built-in type generators (lists, hash-tables, &c.) are fast enough for our purposes.
References-found: 19

