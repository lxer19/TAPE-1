URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr92/tr92-030.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr92-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: Supporting Insertions and Deletions in Striped Parallel Filesystems  
Author: Theodore Johnson 
Date: September 23, 1992  
Address: Gainesville, Fl 32611-2024  
Affiliation: University of Florida, Dept. of CIS  
Abstract: The dramatic improvements in the processing rates of parallel computers are turning many compute-bound jobs into IO-bound jobs. Parallel file systems have been proposed to better match IO throughput to processing power. Many parallel file systems stripe files across numerous disks; each disk has its own controller. A striped file can be appended (or prepended) to and maintain its structure. However, a block can't be inserted into or deleted from the middle of the file, since doing so would destroy the regular striping structure of the file. In this paper, we present a distributed file structure that maintains files in indexed striped extents on a message passing multiprocessor. This approach allows highly parallel random and sequential reads, and also allows insertion and deletion into the middle of the file.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T.W. Crockett. </author> <title> File concepts for parallel I/O. </title> <booktitle> In Proceedings Supercomputing 1988, </booktitle> <pages> pages 574-589, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction Researchers have observed that the performance of I/O subsystems has not kept pace with the increasing performance of the processors, especially in parallel systems <ref> [1] </ref>. A very large I/O bandwidth can be created by attaching disk drives to each node of a parallel computer, but this bandwidth cannot be used effectively if files are stored sequentially on the disks [3]. <p> For many types of files and application, the only operations on the files are read and append, so that the mechanism of striping leads to a substantial increase in throughput <ref> [1] </ref>. In other types of applications, it would be very useful to be able to insert or delete data blocks from the middle of the file. For example, the file might contain a quad or oct tree that stores image data in locational code [18] which is being revised. <p> We note that in this paper, we only address the issues of indexing, accessing, and modifying an indexed striped file. We don't address issues of distributing the data once it is retrieved <ref> [1, 3] </ref>, caching [9, 10, 4], and other file system issues. 3 The dE-tree Our approach to maintaining a striped file is to break it into extents, then keep an index into the extents. Therefore, one major problem that we need to solve is that of maintaining a distributed index. <p> We will 10 measure the overhead by the cost of an action, as we discuss later. The "best" file organization (long extents or short extents) depends on the type of access to the file. Crockett <ref> [1] </ref> describes file access methods as being either sequential or direct. Parallel sequential access can be either partitioned each processor reads a different section of the file) or interleaved (all processors read the same parts of the file). Direct access means that the file is read in an arbitrary order. <p> When an extent boundary is crossed, the lock on the previous extent is released and the new extent is read-locked. Multiple scan operations can be executed simultaneously. If the parallel file has enough structure, then indexed striped file structure can be specialized to yield a more efficient file structure <ref> [1] </ref>. For example, the file might consist of a series of buckets, where each bucket must occur in sorted order but the data items in the buckets need not be sorted. In this case, each bucket is stored in a different extent.
Reference: [2] <author> P.C. </author> <title> Dibble and M.L. Scott. Beyond striping: The Bridge multiprocessor file system. </title> <journal> Computer Architecture News, </journal> <volume> 15(5) </volume> <pages> 32-39, </pages> <year> 1989. </year>
Reference-contexts: Kim [8] has proposed disk synchronization, in which a file is byte-wise distributed across the disks, and the disks synchronously read a block. Reddy and Banerjee [13, 14, 15] compare the performance of disk synchronization and disk striping. The Bridge filesystem <ref> [3, 2, 9] </ref> is a parallel striped file system implemented on a BBN butterfly. Files in Bridge are striped across multiple disks in a regular pattern. The Bridge file system can support highly parallel block file reads and file appends. <p> We will use the Bridge filesystem <ref> [3, 2, 9] </ref> as a concrete example. The Bridge file system consists of a number of Local File Systems (or LFSs) distributed throughput the parallel computer. Each LFS is managed by a single processor. <p> When a processor issues a random access read request, it first determines which LFS stores the block by a simple modulo calculation, then sends the request to that LFS. The LFS consults a local index to determine which disk block to return <ref> [3, 2] </ref>. Allowing irregularities in the striping pattern is not a satisfactory solution, because file reads must first be filtered to remove the gaps, and indexing the file becomes difficult. Restructuring the the file can be very expensive if the file is long.
Reference: [3] <author> P.C. Dibble, M.L. Scott, and C.S. Ellis. </author> <title> Bridge: A high-performance file system for parallel processors. </title> <booktitle> In IEEE Int'l Conf. on Distributed Computing Systems, </booktitle> <pages> pages 154-161, </pages> <year> 1988. </year>
Reference-contexts: A very large I/O bandwidth can be created by attaching disk drives to each node of a parallel computer, but this bandwidth cannot be used effectively if files are stored sequentially on the disks <ref> [3] </ref>. A parallel filesystem is a file system in which the files are stored on multiple disks and the disk drives are located on different processors. <p> Kim [8] has proposed disk synchronization, in which a file is byte-wise distributed across the disks, and the disks synchronously read a block. Reddy and Banerjee [13, 14, 15] compare the performance of disk synchronization and disk striping. The Bridge filesystem <ref> [3, 2, 9] </ref> is a parallel striped file system implemented on a BBN butterfly. Files in Bridge are striped across multiple disks in a regular pattern. The Bridge file system can support highly parallel block file reads and file appends. <p> Dibble, Scott, and Ellis concede that Bridge does not support these operations, and suggest a linked-list implementation of the file that trades off the capability for interior inserts and deletes at the expense of slow random access <ref> [3] </ref>. In this paper, we present a file index structure that allows inserts and deletes in the middle of a parallel striped file, (if the records in the file are ordered) and that permits fast random access and 1 highly parallel block reads. <p> We will use the Bridge filesystem <ref> [3, 2, 9] </ref> as a concrete example. The Bridge file system consists of a number of Local File Systems (or LFSs) distributed throughput the parallel computer. Each LFS is managed by a single processor. <p> When a processor issues a random access read request, it first determines which LFS stores the block by a simple modulo calculation, then sends the request to that LFS. The LFS consults a local index to determine which disk block to return <ref> [3, 2] </ref>. Allowing irregularities in the striping pattern is not a satisfactory solution, because file reads must first be filtered to remove the gaps, and indexing the file becomes difficult. Restructuring the the file can be very expensive if the file is long. <p> Allowing irregularities in the striping pattern is not a satisfactory solution, because file reads must first be filtered to remove the gaps, and indexing the file becomes difficult. Restructuring the the file can be very expensive if the file is long. Dibble, Scott, and Ellis <ref> [3] </ref> suggest that the file can be broken into a series of striped extents, where each extent is linked to its successor (an extent is a contiguous set of blocks with an uninterrupted striping pattern). <p> The index, which is based on the dB-tree [7, 6], is a highly parallel distributed data structure, so an indexed striped file system can be built on a distributed memory parallel computer. Our approach is similar to the one proposed in <ref> [3] </ref>, in that we maintain the file as a sequence of linked, striped extents. We use the dB-tree to index and to help maintain the extents. The striped extents provide highly parallel sequential access, and the dB-tree index provides fast and highly concurrent random access. <p> We note that in this paper, we only address the issues of indexing, accessing, and modifying an indexed striped file. We don't address issues of distributing the data once it is retrieved <ref> [1, 3] </ref>, caching [9, 10, 4], and other file system issues. 3 The dE-tree Our approach to maintaining a striped file is to break it into extents, then keep an index into the extents. Therefore, one major problem that we need to solve is that of maintaining a distributed index. <p> The dB-tree index helps to manage the striped extents and provides an index to the extents. We will call such a file an indexed striped file. This file structure is similar to the method that Dibble, Scott, and Ellis proposed <ref> [3] </ref>, but the index allows fast random access. In addition, the index aids in the maintenance of the file. An example of an indexed striped file is shown in figure 6.
Reference: [4] <author> C.S. Ellis and D. Kotz. </author> <title> Prefetching in file systems for mimd multiprocessors. </title> <booktitle> In Int'l Conf. on Parallel Processing, </booktitle> <pages> pages I:306-314, </pages> <year> 1989. </year>
Reference-contexts: We note that in this paper, we only address the issues of indexing, accessing, and modifying an indexed striped file. We don't address issues of distributing the data once it is retrieved [1, 3], caching <ref> [9, 10, 4] </ref>, and other file system issues. 3 The dE-tree Our approach to maintaining a striped file is to break it into extents, then keep an index into the extents. Therefore, one major problem that we need to solve is that of maintaining a distributed index.
Reference: [5] <author> W. Feller. </author> <title> An Introduction to Probability Theory and Its Applications, volume 1. </title> <publisher> John Wiley, </publisher> <year> 1950. </year>
Reference-contexts: Thus, the future cost of reorganizing the extent is the additional blocking of random access operations that will occur if the extent is not split. The amount of blocking can be estimated via ball-and-urn models <ref> [5] </ref>. The immediate cost of splitting the extent is the cost of creating a new extent and inserting it into the dB-tree index. We denote this cost by S (i; L; M ).
Reference: [6] <author> T. Johnson and A. Colbrook. </author> <title> A distributed data-balanced dictionary based on the b-link tree. </title> <type> Technical Report TR-530, </type> <institution> MIT Laboratory for Computer Science, </institution> <year> 1992. </year> <note> Also available via anonymous ftp at cis.ufl.edu:cis/techreports. </note>
Reference-contexts: We base our file structure on the dB-tree <ref> [6, 7] </ref>, a highly parallel distributed index structure. <p> In this paper, we propose an index structure for parallel striped files. The index, which is based on the dB-tree <ref> [7, 6] </ref>, is a highly parallel distributed data structure, so an indexed striped file system can be built on a distributed memory parallel computer. Our approach is similar to the one proposed in [3], in that we maintain the file as a sequence of linked, striped extents.
Reference: [7] <author> T. Johnson and A. Colbrook. </author> <title> A distributed data-balanced dictionary based on the b-link tree. </title> <booktitle> In Proc. Int'l Parallel Processing Symposium, </booktitle> <pages> pages 319-325, </pages> <year> 1992. </year>
Reference-contexts: We base our file structure on the dB-tree <ref> [6, 7] </ref>, a highly parallel distributed index structure. <p> In this paper, we propose an index structure for parallel striped files. The index, which is based on the dB-tree <ref> [7, 6] </ref>, is a highly parallel distributed data structure, so an indexed striped file system can be built on a distributed memory parallel computer. Our approach is similar to the one proposed in [3], in that we maintain the file as a sequence of linked, striped extents.
Reference: [8] <author> M.Y. Kim. </author> <title> Synchronized disk striping. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(11):336-342, </volume> <year> 1986. </year>
Reference-contexts: A common method for implementing a parallel filesystem is to use disk striping [17], in which consecutive blocks in a file are stored on different disk drives. Kim <ref> [8] </ref> has proposed disk synchronization, in which a file is byte-wise distributed across the disks, and the disks synchronously read a block. Reddy and Banerjee [13, 14, 15] compare the performance of disk synchronization and disk striping.
Reference: [9] <author> D. Kotz and C.S. Ellis. </author> <title> Prefetching in file systems for MIMD multiprocessors. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 1(2) </volume> <pages> 218-230, </pages> <year> 1990. </year>
Reference-contexts: Kim [8] has proposed disk synchronization, in which a file is byte-wise distributed across the disks, and the disks synchronously read a block. Reddy and Banerjee [13, 14, 15] compare the performance of disk synchronization and disk striping. The Bridge filesystem <ref> [3, 2, 9] </ref> is a parallel striped file system implemented on a BBN butterfly. Files in Bridge are striped across multiple disks in a regular pattern. The Bridge file system can support highly parallel block file reads and file appends. <p> We will use the Bridge filesystem <ref> [3, 2, 9] </ref> as a concrete example. The Bridge file system consists of a number of Local File Systems (or LFSs) distributed throughput the parallel computer. Each LFS is managed by a single processor. <p> We note that in this paper, we only address the issues of indexing, accessing, and modifying an indexed striped file. We don't address issues of distributing the data once it is retrieved [1, 3], caching <ref> [9, 10, 4] </ref>, and other file system issues. 3 The dE-tree Our approach to maintaining a striped file is to break it into extents, then keep an index into the extents. Therefore, one major problem that we need to solve is that of maintaining a distributed index. <p> Direct access means that the file is read in an arbitrary order. Direct access can be either global (all processors can read all of the file) or partitioned (each processor accesses its own part of the file exclusively). Kotz and Ellis <ref> [9] </ref> provide a similar taxonomy of parallel file access. From the perspective of a striped indexed file, the important characteristics of the file access are whether the access is highly sequential or highly random, and how many update operations are performed.
Reference: [10] <author> D. Kotz and C.S. Ellis. </author> <title> Practical prefetching techniques for parallel file systems. </title> <booktitle> In Int'l Conf. on Parallel and Distributed Information Systems, </booktitle> <pages> pages 182-189, </pages> <year> 1991. </year>
Reference-contexts: We note that in this paper, we only address the issues of indexing, accessing, and modifying an indexed striped file. We don't address issues of distributing the data once it is retrieved [1, 3], caching <ref> [9, 10, 4] </ref>, and other file system issues. 3 The dE-tree Our approach to maintaining a striped file is to break it into extents, then keep an index into the extents. Therefore, one major problem that we need to solve is that of maintaining a distributed index.
Reference: [11] <author> V. Lanin and D. Shasha. </author> <title> A Symmetric Concurrent B-Tree Algorithm. </title> <booktitle> In 1986 Proceedings Fall Joint Computer Conference, </booktitle> <pages> pages 380-386, </pages> <month> November </month> <year> 1986. </year>
Reference-contexts: Readers who are familiar with B + -trees can skip to section 4, as the distributed index is based on a B + -tree whose leaves correspond to the striped extents. The base for the dB-tree is the concurrent (shared memory) B-link tree <ref> [12, 16, 11] </ref>, which is a B + - tree in which every node contains a pointer to its right neighbor. The B-link tree is easy to distribute because global restructuring operations are performed one node at a time.
Reference: [12] <author> P.L. Lehman and S.B. Yao. </author> <title> Efficient locking for concurrent operations on B-trees. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(4) </volume> <pages> 650-670, </pages> <year> 1981. </year>
Reference-contexts: Readers who are familiar with B + -trees can skip to section 4, as the distributed index is based on a B + -tree whose leaves correspond to the striped extents. The base for the dB-tree is the concurrent (shared memory) B-link tree <ref> [12, 16, 11] </ref>, which is a B + - tree in which every node contains a pointer to its right neighbor. The B-link tree is easy to distribute because global restructuring operations are performed one node at a time.
Reference: [13] <author> A.L.N. Reddy and P. Banerjee. </author> <title> An evaluation of multiple-disk i/o systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 38(12) </volume> <pages> 1680-1690, </pages> <year> 1989. </year>
Reference-contexts: Kim [8] has proposed disk synchronization, in which a file is byte-wise distributed across the disks, and the disks synchronously read a block. Reddy and Banerjee <ref> [13, 14, 15] </ref> compare the performance of disk synchronization and disk striping. The Bridge filesystem [3, 2, 9] is a parallel striped file system implemented on a BBN butterfly. Files in Bridge are striped across multiple disks in a regular pattern.
Reference: [14] <author> A.L.N. Reddy and P. Banerjee. </author> <title> Performance evaluation of multiple-disk i/o systems. </title> <booktitle> In Int'l Conference on Parallel Processing, </booktitle> <pages> pages I:315-318, </pages> <year> 1989. </year> <month> 13 </month>
Reference-contexts: Kim [8] has proposed disk synchronization, in which a file is byte-wise distributed across the disks, and the disks synchronously read a block. Reddy and Banerjee <ref> [13, 14, 15] </ref> compare the performance of disk synchronization and disk striping. The Bridge filesystem [3, 2, 9] is a parallel striped file system implemented on a BBN butterfly. Files in Bridge are striped across multiple disks in a regular pattern.
Reference: [15] <author> A.L.N. Reddy and P. Banerjee. </author> <title> A study of parallel disk organizations. </title> <journal> Computer Architecture News, </journal> <volume> 17(5) </volume> <pages> 40-47, </pages> <year> 1989. </year>
Reference-contexts: Kim [8] has proposed disk synchronization, in which a file is byte-wise distributed across the disks, and the disks synchronously read a block. Reddy and Banerjee <ref> [13, 14, 15] </ref> compare the performance of disk synchronization and disk striping. The Bridge filesystem [3, 2, 9] is a parallel striped file system implemented on a BBN butterfly. Files in Bridge are striped across multiple disks in a regular pattern.
Reference: [16] <author> Y. Sagiv. </author> <title> Concurrent Operations on B-Trees with Overtaking. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 33(2) </volume> <pages> 275-296, </pages> <month> October </month> <year> 1986. </year>
Reference-contexts: Readers who are familiar with B + -trees can skip to section 4, as the distributed index is based on a B + -tree whose leaves correspond to the striped extents. The base for the dB-tree is the concurrent (shared memory) B-link tree <ref> [12, 16, 11] </ref>, which is a B + - tree in which every node contains a pointer to its right neighbor. The B-link tree is easy to distribute because global restructuring operations are performed one node at a time. <p> The B-link tree algorithms use the additional information stored in the nodes to let an operation recover if it misnavigates in the tree due to out-of-date information. In the concurrent B-link tree algorithm described by Sagiv <ref> [16] </ref>, insert operations place no more than one lock on the data structure at a time. Search operations start by placing an R (read) lock on the root and then searching the root to determine the next node to access.
Reference: [17] <author> K. Salem and H. Garcia-Molina. </author> <title> Disk striping. </title> <booktitle> In Int'l Conf. on Data Engineering, </booktitle> <pages> pages 336-342, </pages> <year> 1986. </year>
Reference-contexts: A parallel filesystem is a file system in which the files are stored on multiple disks and the disk drives are located on different processors. A common method for implementing a parallel filesystem is to use disk striping <ref> [17] </ref>, in which consecutive blocks in a file are stored on different disk drives. Kim [8] has proposed disk synchronization, in which a file is byte-wise distributed across the disks, and the disks synchronously read a block.
Reference: [18] <author> H. Samet. </author> <title> The quadtree and related hierarchical data structures. </title> <journal> Computing Surveys, </journal> <volume> 16(2) </volume> <pages> 187-260, </pages> <year> 1984. </year>
Reference-contexts: In other types of applications, it would be very useful to be able to insert or delete data blocks from the middle of the file. For example, the file might contain a quad or oct tree that stores image data in locational code <ref> [18] </ref> which is being revised. In a striped file, a block can't be inserted or deleted from the middle of the file without requiring an expensive restructuring to maintain the regular striped pattern (see figure 1). <p> Further, we note that many interesting file types have this form, such as a files that contains a quad or oct tree <ref> [18] </ref>, or a sorted database. We assume that the records fit evenly onto the blocks. In addition to read, append, prepend, and overwrite operations, we support the following: Insert: Insert k blocks into F after the record with key v.
References-found: 18

