URL: http://www.isi.edu/~blythe/cs541/Readings/aips98-nppp.ps
Refering-URL: http://www.isi.edu/~blythe/cs541/syllabus.html
Root-URL: http://www.isi.edu
Email: fmajercik,mlittmang@cs.duke.edu  
Title: MAXPLAN: A New Approach to Probabilistic Planning  
Author: Stephen M. Majercik and Michael L. Littman 
Address: Durham, NC 27708-0129  
Affiliation: Department of Computer Science Duke University  
Abstract: Classical artificial intelligence planning techniques can operate in large domains but traditionally assume a deterministic universe. Operations research planning techniques can operate in probabilistic domains but break when the domains approach realistic sizes. max-plan is a new probabilistic planning technique that aims at combining the best of these two worlds. max-plan converts a planning instance into an E-Majsat instance, and then draws on techniques from Boolean satisfiability and dynamic programming to solve the E-Majsat instance. E-Majsat is an NP PP -complete problem that is essentially a probabilistic version of Sat. maxplan performs as much as an order of magnitude better on some standard stochastic test problems than buridan|a state-of-the-art probabilistic planner|and scales better on one test problem than two algorithms based on dynamic programming. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Blum, A. L., and Furst, M. L. </author> <year> 1997. </year> <title> Fast planning through planning graph analysis. </title> <journal> Artificial Intelligence 90(1-2):279-298. </journal>
Reference-contexts: The first two conditions are not probabilistic and can be encoded in a straightforward manner <ref> (Blum & Furst 1997) </ref>, but the third condition is complicated by the fact that chance variables sometimes intervene between actions and their effects on propositions. We will illustrate the conversion process by describing the construction of the CNF formula corresponding to a one-step plan for Sand-Castle-67.
Reference: <author> Boutilier, C.; Dearden, R.; and Goldszmidt, M. </author> <year> 1995. </year> <title> Exploiting structure in policy construction. </title> <booktitle> In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 1104-1113. </pages>
Reference-contexts: future direction is to extend our approach to completely or partially observable domains, in which more complex plan structures will be needed. maxplan represents planning domains in the sequential-effects-tree (st) representation (Littman 1997), which is a syntactic variant of two-time-slice Bayes nets (2TBNs) with conditional probability tables represented as trees <ref> (Boutilier, Dearden, & Goldszmidt 1995) </ref>. This representation is expressively equivalent to 2TBNs and probabilistic state-space operators, so it is likely that a similar planner could be built based on any of these representations. In st, the effect of each action on each proposition is represented as a separate decision tree.
Reference: <author> Cassandra, A.; Littman, M. L.; and Zhang, N. L. </author> <year> 1997. </year> <title> Incremental Pruning: A simple, fast, exact method for partially observable Markov decision processes. </title> <booktitle> In Proceedings of the Thirteenth Annual Conference on Uncertainty in Artificial Intelligence (UAI-97), </booktitle> <pages> 54-61. </pages> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann Publishers. </publisher>
Reference-contexts: maxplan to three other planning techniques: * buridan (Kushmerick, Hanks, & Weld 1995), a classical AI planning technique that extends partial-order planning to probabilistic domains, * Plan enumeration with dynamic programming for plan evaluation (enum), and * Dynamic programming (incremental pruning) to solve the corresponding finite-horizon partially observable mdp (pomdp) <ref> (Cassandra, Littman, & Zhang 1997) </ref>. These comparisons were motivated by a desire to compare maxplan to other algorithms that can determine the best plan in a probabilistic domain, including domains in which no plan is certain of succeeding (thus ruling out lower complexity minimax planners).
Reference: <author> Davis, M.; Logemann, G.; and Loveland, D. </author> <year> 1962. </year> <title> A machine program for theorem proving. </title> <journal> Communications of the ACM 5 </journal> <pages> 394-397. </pages>
Reference-contexts: We need to find the assignment to the choice variables that maximizes the probability of a satisfying assignment; for plan-generated formulas, such an assignment is directly interpretable as an optimal straight-line plan. Our algorithm is based on an extension of the Davis-Putnam-Logemann-Loveland (DPLL) procedure for determining satisfiability <ref> (Davis, Loge-mann, & Loveland 1962) </ref>. To our knowledge, DPLL (and its variants) is the best systematic satisfiability solver known.
Reference: <author> Ernst, M. D.; Millstein, T. D.; and Weld, D. S. </author> <year> 1997. </year> <title> Automatic SAT-compilation of planning problems. </title> <booktitle> In Proceedings of the Fifteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 1169-1176. </pages>
Reference: <author> Goldsmith, J.; Littman, M. L.; and Mundhenk, M. </author> <year> 1997. </year> <title> The complexity of plan existence and evaluation in probabilistic domains. </title> <booktitle> In Proceedings of the Thirteenth Annual Conference on Uncertainty in Artificial Intelligence (UAI-97), </booktitle> <pages> 182-189. </pages> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann Publishers. </publisher>
Reference-contexts: In a propositional planning domain, states are specified as assignments to a set of propositional variables. If we place reasonable bounds|polynomial in the size of the planning problem|on both plan size and plan horizon, the planning problem is NP PP -complete <ref> (Goldsmith, Littman, & Mundhenk 1997) </ref> (perhaps easier than PSPACE-complete) and may be amenable to heuristics. For a survey of relevant results, see (Littman, Goldsmith, & Mundhenk 1997). <p> If we place reasonable bounds|polynomial in the size of the planning problem|on both plan size and plan horizon, the planning problem is NP PP -complete (Goldsmith, Littman, & Mundhenk 1997) (perhaps easier than PSPACE-complete) and may be amenable to heuristics. For a survey of relevant results, see <ref> (Littman, Goldsmith, & Mundhenk 1997) </ref>. Membership in this complexity class suggests a solution strategy analogous to that of satplan (Kautz & Selman 1996), a successful deterministic planner that converts a planning problem into a satisfiability (Sat) problem and solves the Sat problem instead. <p> In the same way that deterministic planning can be expressed as the NP-complete problem Sat, probabilistic planning can be expressed as the NP PP -complete problem E-Majsat <ref> (Littman, Goldsmith, & Mundhenk 1997) </ref>: Given a Boolean formula with choice variables (variables whose truth status can be arbitrarily set) and chance variables (variables whose truth status is determined by a set of independent probabilities), find the setting of the choice variables that maximizes the probability of a satisfying assign ment
Reference: <author> Hooker, J. N., and Vinay, V. </author> <year> 1994. </year> <title> Branching rules for satisfiability. </title> <type> Technical Report GSIA Working Paper 1994-09, </type> <institution> Carnegie Mellon University. </institution> <note> Revised January 1995. </note>
Reference-contexts: If we split on a choice (chance) variable, we return the maximum (probability weighted average) of assigning True to the variable and recursing or assigning False and recursing. The splitting heuristic used is critical to the efficiency of the algorithm <ref> (Hooker & Vinay 1994) </ref>.
Reference: <author> Kautz, H., and Selman, B. </author> <year> 1996. </year> <title> Pushing the envelope: Planning, propositional logic, and stochastic search. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence, </booktitle> <pages> 1194-1201. </pages> <publisher> AAAI Press/The MIT Press. </publisher>
Reference-contexts: For a survey of relevant results, see (Littman, Goldsmith, & Mundhenk 1997). Membership in this complexity class suggests a solution strategy analogous to that of satplan <ref> (Kautz & Selman 1996) </ref>, a successful deterministic planner that converts a planning problem into a satisfiability (Sat) problem and solves the Sat problem instead.
Reference: <author> Kautz, H.; McAllester, D.; and Selman, B. </author> <year> 1996. </year> <title> Encoding plans in propositional logic. </title> <booktitle> In Proceedings of the Fifth International Conference on Principles of Knowledge Representation and Reasoning (KR-96). </booktitle>
Reference-contexts: For a survey of relevant results, see (Littman, Goldsmith, & Mundhenk 1997). Membership in this complexity class suggests a solution strategy analogous to that of satplan <ref> (Kautz & Selman 1996) </ref>, a successful deterministic planner that converts a planning problem into a satisfiability (Sat) problem and solves the Sat problem instead.
Reference: <author> Kushmerick, N.; Hanks, S.; and Weld, D. S. </author> <year> 1995. </year> <title> An algorithm for probabilistic planning. </title> <journal> Artificial Intelligence 76(1-2):239-286. </journal>
Reference-contexts: This plan succeeds with near certainty (probability 0.9669) and maxplan finds this plan in approximately 12 seconds on a Sun Ultra-1 Model 140 with 128 Mbytes of memory. COMPARISON TO OTHER PLANNING TECHNIQUES We compared maxplan to three other planning techniques: * buridan <ref> (Kushmerick, Hanks, & Weld 1995) </ref>, a classical AI planning technique that extends partial-order planning to probabilistic domains, * Plan enumeration with dynamic programming for plan evaluation (enum), and * Dynamic programming (incremental pruning) to solve the corresponding finite-horizon partially observable mdp (pomdp) (Cassandra, Littman, & Zhang 1997).
Reference: <author> Littman, M. L.; Goldsmith, J.; and Mundhenk, M. </author> <year> 1997. </year> <title> The computational complexity of probabilistic plan existence and evaluation. </title> <note> Submitted. </note>
Reference-contexts: In a propositional planning domain, states are specified as assignments to a set of propositional variables. If we place reasonable bounds|polynomial in the size of the planning problem|on both plan size and plan horizon, the planning problem is NP PP -complete <ref> (Goldsmith, Littman, & Mundhenk 1997) </ref> (perhaps easier than PSPACE-complete) and may be amenable to heuristics. For a survey of relevant results, see (Littman, Goldsmith, & Mundhenk 1997). <p> If we place reasonable bounds|polynomial in the size of the planning problem|on both plan size and plan horizon, the planning problem is NP PP -complete (Goldsmith, Littman, & Mundhenk 1997) (perhaps easier than PSPACE-complete) and may be amenable to heuristics. For a survey of relevant results, see <ref> (Littman, Goldsmith, & Mundhenk 1997) </ref>. Membership in this complexity class suggests a solution strategy analogous to that of satplan (Kautz & Selman 1996), a successful deterministic planner that converts a planning problem into a satisfiability (Sat) problem and solves the Sat problem instead. <p> In the same way that deterministic planning can be expressed as the NP-complete problem Sat, probabilistic planning can be expressed as the NP PP -complete problem E-Majsat <ref> (Littman, Goldsmith, & Mundhenk 1997) </ref>: Given a Boolean formula with choice variables (variables whose truth status can be arbitrarily set) and chance variables (variables whose truth status is determined by a set of independent probabilities), find the setting of the choice variables that maximizes the probability of a satisfying assign ment <p> Because no information is gained during plan execution, optimal plans are sequences of actions. A future direction is to extend our approach to completely or partially observable domains, in which more complex plan structures will be needed. maxplan represents planning domains in the sequential-effects-tree (st) representation <ref> (Littman 1997) </ref>, which is a syntactic variant of two-time-slice Bayes nets (2TBNs) with conditional probability tables represented as trees (Boutilier, Dearden, & Goldszmidt 1995). <p> The leaves of a decision tree describe how the associated proposition changes as a function of the state and action, perhaps probabilistically. A formal description of st is available elsewhere <ref> (Littman 1997) </ref>; for brevity, we present the representation in the form of an example (see Figure 1). Sand-Castle-67, a simple probabilistic planning domain, is concerned with building a sand castle. There are four states, described by combinations of two Boolean propositions, moat and castle (propositions appear in boldface). <p> maxplan to three other planning techniques: * buridan (Kushmerick, Hanks, & Weld 1995), a classical AI planning technique that extends partial-order planning to probabilistic domains, * Plan enumeration with dynamic programming for plan evaluation (enum), and * Dynamic programming (incremental pruning) to solve the corresponding finite-horizon partially observable mdp (pomdp) <ref> (Cassandra, Littman, & Zhang 1997) </ref>. These comparisons were motivated by a desire to compare maxplan to other algorithms that can determine the best plan in a probabilistic domain, including domains in which no plan is certain of succeeding (thus ruling out lower complexity minimax planners).
Reference: <author> Littman, M. L. </author> <year> 1997. </year> <title> Probabilistic propositional planning: Representations and complexity. </title> <booktitle> In Proceedings of the Fourteenth National Conference on Artificial Intelligence, </booktitle> <pages> 748-754. </pages> <publisher> AAAI Press/The MIT Press. </publisher>
Reference-contexts: In a propositional planning domain, states are specified as assignments to a set of propositional variables. If we place reasonable bounds|polynomial in the size of the planning problem|on both plan size and plan horizon, the planning problem is NP PP -complete <ref> (Goldsmith, Littman, & Mundhenk 1997) </ref> (perhaps easier than PSPACE-complete) and may be amenable to heuristics. For a survey of relevant results, see (Littman, Goldsmith, & Mundhenk 1997). <p> If we place reasonable bounds|polynomial in the size of the planning problem|on both plan size and plan horizon, the planning problem is NP PP -complete (Goldsmith, Littman, & Mundhenk 1997) (perhaps easier than PSPACE-complete) and may be amenable to heuristics. For a survey of relevant results, see <ref> (Littman, Goldsmith, & Mundhenk 1997) </ref>. Membership in this complexity class suggests a solution strategy analogous to that of satplan (Kautz & Selman 1996), a successful deterministic planner that converts a planning problem into a satisfiability (Sat) problem and solves the Sat problem instead. <p> In the same way that deterministic planning can be expressed as the NP-complete problem Sat, probabilistic planning can be expressed as the NP PP -complete problem E-Majsat <ref> (Littman, Goldsmith, & Mundhenk 1997) </ref>: Given a Boolean formula with choice variables (variables whose truth status can be arbitrarily set) and chance variables (variables whose truth status is determined by a set of independent probabilities), find the setting of the choice variables that maximizes the probability of a satisfying assign ment <p> Because no information is gained during plan execution, optimal plans are sequences of actions. A future direction is to extend our approach to completely or partially observable domains, in which more complex plan structures will be needed. maxplan represents planning domains in the sequential-effects-tree (st) representation <ref> (Littman 1997) </ref>, which is a syntactic variant of two-time-slice Bayes nets (2TBNs) with conditional probability tables represented as trees (Boutilier, Dearden, & Goldszmidt 1995). <p> The leaves of a decision tree describe how the associated proposition changes as a function of the state and action, perhaps probabilistically. A formal description of st is available elsewhere <ref> (Littman 1997) </ref>; for brevity, we present the representation in the form of an example (see Figure 1). Sand-Castle-67, a simple probabilistic planning domain, is concerned with building a sand castle. There are four states, described by combinations of two Boolean propositions, moat and castle (propositions appear in boldface). <p> maxplan to three other planning techniques: * buridan (Kushmerick, Hanks, & Weld 1995), a classical AI planning technique that extends partial-order planning to probabilistic domains, * Plan enumeration with dynamic programming for plan evaluation (enum), and * Dynamic programming (incremental pruning) to solve the corresponding finite-horizon partially observable mdp (pomdp) <ref> (Cassandra, Littman, & Zhang 1997) </ref>. These comparisons were motivated by a desire to compare maxplan to other algorithms that can determine the best plan in a probabilistic domain, including domains in which no plan is certain of succeeding (thus ruling out lower complexity minimax planners).
Reference: <author> Majercik, S. M., and Littman, M. L. </author> <year> 1998. </year> <title> Using caching to solve larger probabilistic planning problems. </title> <booktitle> To appear in the proceedings of the Fifteenth National Conference on Artificial Intelligence. </booktitle>
Reference: <author> Zhang, H., and Stickel, M. E. </author> <year> 1994. </year> <title> Implementing the Davis-Putnam algorithm by tries. </title> <type> Technical report, </type> <institution> Computer Science Department, University of Iowa, </institution> <address> Iowa City, IA. </address>
Reference-contexts: Efficiency could probably be improved by using a better CNF encoding of the planning problem (Ernst, Mill-stein, & Weld 1997; Kautz, McAllester, & Selman 1996) and by using more sophisticated data structures for storing the CNF formulas <ref> (Zhang & Stickel 1994) </ref>. Another promising area is splitting heuristics. Our time-ordered splitting heuristic does not specify an ordering for variables associated with the same time step.
References-found: 14

