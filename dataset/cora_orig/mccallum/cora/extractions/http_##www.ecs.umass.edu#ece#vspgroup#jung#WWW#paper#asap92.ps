URL: http://www.ecs.umass.edu/ece/vspgroup/jung/WWW/paper/asap92.ps
Refering-URL: http://www.ecs.umass.edu/ece/vspgroup/arrest.html
Root-URL: 
Email: burleson@ecs.umass.edu  
Title: ARREST: An Interactive Graphic Analysis Tool for VLSI Arrays  
Author: Wayne Burleson Bongjin Jung 
Address: Amherst, MA 01003  
Affiliation: Department of Electrical and Computer Engineering University of Massachusetts,  
Abstract: In this paper we present a graphical CAD tool, Array Estimator(ARREST), for VLSI array architectures. In real VLSI arrays, piece-wise regular computations are spread across space and time and occur at a fine-grain, which can make visualization quite difficult. Consequently, a graphical interface environment is desirable to enhance the design, verification, and analysis of VLSI arrays by providing feedback at all levels of the design process. ARREST reads a high level description of structured VLSI algorithms in terms of Affine Recurrence Equations(AREs) and permits a broad range of transformations on the algorithm. The system does not target a fully automated design process, instead it provides a designer with a means to systematically explore various array architectures and evaluate design trade-offs between VLSI cost and performance. To allow a human designer better insight into the design process, ARREST uses the Xt/MOTIF window system for graphics and interfaces to the Cadence VERILOG simulator. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.W. Brodersen, et. al., </author> <title> LagerIV Cell Library Documentation, Electronics Research Library, </title> <institution> University of California, Berkeley. </institution> <month> June 23, </month> <year> 1988. </year>
Reference-contexts: Section 5 discusses the development of ARREST and suggests improvements and extensions to ARREST, including hierarchical netlist output to feed a backend VLSI module generator (i.e. LAGER <ref> [1] </ref>). 2. Background Digital signal/image processing (DSP) systems which require extensive computations on real-time data such as speech, video, or radar, usually require high-performance, special-purpose computer systems. <p> Both the simulation and analysis toolboxes can be extended as new techniques arise. In the future, ARREST will add the following toolboxes: 1. design of a module generator and interface to a VLSI layout tool for actual VLSI array layout (i.e. LAGER <ref> [1] </ref>). 2. automatic design and analysis of I/O conversion hardware for VLSI arrays [4]. 3. precision analysis of parallel computations [7]. 4. verification (i.e. [10]). 6. Conclusion We have presented a CAD tool for VLSI arrays.
Reference: [2] <author> G.P. Brown, et. al., </author> <title> "Program Visualization: Graphical Support for Software Development", </title> <booktitle> Computer, </booktitle> <pages> pp. 27-35, </pages> <month> August, </month> <year> 1985. </year>
Reference-contexts: Overview of ARREST Visualization of computer programs has been promoted in tools for software development <ref> [2] </ref>. Graphical programming, simulation, and debugging all improve the user interface of the system by taking advantage of the powerful graphics capability of modern workstations. Graphical tools are particularly well-suited for the programming and debugging of parallel and distributed computers since computations are distributed in time and space.
Reference: [3] <author> J. Bu, </author> <title> "Systematic Design of Regular VLSI Processor Arrays", </title> <type> PhD Dissertation, </type> <institution> Delft University of Technology, </institution> <year> 1990. </year>
Reference-contexts: emphasize that it is not a synthesis tool such as ADVIS [20], Cathedral IV [9], DIASTOL [25], MSSM [13], VACS [31], but a research tool which encourages interaction of the user to explore new methods of transformation including folding [28], partitioning [4], [20], multi-projection [30], index regrouping [9] and clustering <ref> [3] </ref>. We claim that finding an optimal course through this large design space is not yet well-understood and that this research tool will help achieve that goal. In Section 2 we review background in VLSI arrays, looking at the development of transformational synthesis methods and CAD implementations of those methods. <p> Hence, they serve as a useful intermediate-level description of VLSI algorithms. ARREST uses an ARE description of an algorithm as the input to the system. The design of AREs from a high-level specification is still not a trivial problem and is currently being explored by several researchers <ref> [3] </ref>, [9]. In addition, localizing high fan-in computations and restructuring of parallel computations using associativity and factoring are still open questions. 2.2 CAD for VLSI Arrays There have been several efforts to incorporate transformational methods in CAD tools for VLSI arrays. <p> ARREST provides visualization of partitioning to give a designer better understanding of the problem. Figure 7 shows a DG partitioned into blocks (from <ref> [3] </ref>), and suggests an allocation and scheduling for the partitioned computation. 5. Development of the CAD tool ARREST is implemented on DEC-stations using the C programming language and the Xt/Motif window system and provides an interface to the VERILOG simulator.
Reference: [4] <author> W. Burleson, </author> <title> "The Partitioning Problem on VLSI Arrays: I/O and Local Memory Complexity", </title> <booktitle> Proc. of ICASSP, </booktitle> <pages> pp. 1217-1220, </pages> <year> 1991. </year>
Reference-contexts: We emphasize that it is not a synthesis tool such as ADVIS [20], Cathedral IV [9], DIASTOL [25], MSSM [13], VACS [31], but a research tool which encourages interaction of the user to explore new methods of transformation including folding [28], partitioning <ref> [4] </ref>, [20], multi-projection [30], index regrouping [9] and clustering [3]. We claim that finding an optimal course through this large design space is not yet well-understood and that this research tool will help achieve that goal. <p> Section 4 shows an example of a partitioned integer multiplication array. This is taken from our recent work <ref> [4] </ref> which uses formal array methods to synthesize and analyze computer arithmetic and other bit-level structures. Section 5 discusses the development of ARREST and suggests improvements and extensions to ARREST, including hierarchical netlist output to feed a backend VLSI module generator (i.e. LAGER [1]). 2. <p> Possible transformations which the user might wish to explore through ARREST include: 1. modifying the DG by index regrouping [9]. 2. localizing the DG by data pipelining [26]. 3. partitioning (LPGS and LSGP [30]) 4. folding <ref> [4] </ref> 5. changing the direction of transmittent variables. 6. re-parenthesizing associative computations 7. re-partitioning of node computations. SFG design: ARREST generates a signal flow graph (SFG) by affine transformation according to user-specified scheduling and projection vectors. <p> ARREST also analyzes and estimates the number of internal and external registers required for partitioned problems and I/O structures <ref> [4] </ref>. 4. An Example: Partitioning with Folding The partitioning of a large DG is a non-linear transformation that introduces both spatial and temporal nonlocality, which results in a more complicated analysis of complexity, I/O format and local memory requirements. <p> In the future, ARREST will add the following toolboxes: 1. design of a module generator and interface to a VLSI layout tool for actual VLSI array layout (i.e. LAGER [1]). 2. automatic design and analysis of I/O conversion hardware for VLSI arrays <ref> [4] </ref>. 3. precision analysis of parallel computations [7]. 4. verification (i.e. [10]). 6. Conclusion We have presented a CAD tool for VLSI arrays. The design philosophy is based on interaction, and user-feedback is emphasized in the form of graphics, as well as simulation, estimation and verification toolboxes.
Reference: [6] <author> W. Burleson and B. Jung, </author> <title> "Interactive Graphic Analysis Tool for VLSI Arrays" , Proc. </title> <journal> of ASAP, </journal> <note> pp , 1992. </note>
Reference-contexts: 1. Introduction Recent research in VLSI arrays has explored a variety of transformations on the dependency graph and signal flow graph representations of a particular computation. These new transformations are extensions to the original work in the field which was restricted to linear transformations [5], <ref> [6] </ref>, [19], [24]. Unlike linear transformations, it is difficult to estimate the VLSI costs and performance of the various new transformations due to their non-linear nature. We propose a graphical tool to aid in this task. <p> Kung [16], can be characterized by a high degree of modularity, localized data communication, minimum control overhead, and very high throughput; therefore, they are well suited for special-purpose systems for real-time applications. The design, analysis, and implementation of systolic arrays for specific problems has motivated extensive research [5], <ref> [6] </ref>, [19], [24], [29]. Quinton [24] proposed the notion of Uniform Recurrence Equations (UREs) as an initial high-level specification of the problem for synthesizing systolic arrays, and Rao [29] further extended the concept to characterize the algorithms which are implementable on systolic arrays.
Reference: [5] <author> P.R. Cappello and K. Steiglitz, </author> <title> "Unifying VLSI array Designs with Geometric Transformation", </title> <booktitle> Proc. Int. Conf. on Parallel Processing, </booktitle> <pages> PP. 448-457, </pages> <month> August </month> <year> 1983. </year>
Reference-contexts: 1. Introduction Recent research in VLSI arrays has explored a variety of transformations on the dependency graph and signal flow graph representations of a particular computation. These new transformations are extensions to the original work in the field which was restricted to linear transformations <ref> [5] </ref>, [6], [19], [24]. Unlike linear transformations, it is difficult to estimate the VLSI costs and performance of the various new transformations due to their non-linear nature. We propose a graphical tool to aid in this task. <p> Kung [16], can be characterized by a high degree of modularity, localized data communication, minimum control overhead, and very high throughput; therefore, they are well suited for special-purpose systems for real-time applications. The design, analysis, and implementation of systolic arrays for specific problems has motivated extensive research <ref> [5] </ref>, [6], [19], [24], [29]. Quinton [24] proposed the notion of Uniform Recurrence Equations (UREs) as an initial high-level specification of the problem for synthesizing systolic arrays, and Rao [29] further extended the concept to characterize the algorithms which are implementable on systolic arrays.
Reference: [6] <author> M.C. Chen, </author> <title> "Synthesizing Systolic Designs", </title> <booktitle> Proc. Int.Symp. on VLSI technol-ogy, Systems, and Application, </booktitle> <month> May </month> <year> 1985. </year>
Reference-contexts: 1. Introduction Recent research in VLSI arrays has explored a variety of transformations on the dependency graph and signal flow graph representations of a particular computation. These new transformations are extensions to the original work in the field which was restricted to linear transformations [5], <ref> [6] </ref>, [19], [24]. Unlike linear transformations, it is difficult to estimate the VLSI costs and performance of the various new transformations due to their non-linear nature. We propose a graphical tool to aid in this task. <p> Kung [16], can be characterized by a high degree of modularity, localized data communication, minimum control overhead, and very high throughput; therefore, they are well suited for special-purpose systems for real-time applications. The design, analysis, and implementation of systolic arrays for specific problems has motivated extensive research [5], <ref> [6] </ref>, [19], [24], [29]. Quinton [24] proposed the notion of Uniform Recurrence Equations (UREs) as an initial high-level specification of the problem for synthesizing systolic arrays, and Rao [29] further extended the concept to characterize the algorithms which are implementable on systolic arrays.
Reference: [7] <author> H. Choi and W. Burleson, </author> <title> "Efficient VLSI Multiplication under Precision Constraints", </title> <type> Technical Report TR-92-CSE-7, </type> <institution> Dept. of Elec. and Comp. Eng., University of Massachusetts, Amherst, </institution> <year> 1992. </year>
Reference-contexts: In the future, ARREST will add the following toolboxes: 1. design of a module generator and interface to a VLSI layout tool for actual VLSI array layout (i.e. LAGER [1]). 2. automatic design and analysis of I/O conversion hardware for VLSI arrays [4]. 3. precision analysis of parallel computations <ref> [7] </ref>. 4. verification (i.e. [10]). 6. Conclusion We have presented a CAD tool for VLSI arrays. The design philosophy is based on interaction, and user-feedback is emphasized in the form of graphics, as well as simulation, estimation and verification toolboxes.
Reference: [8] <author> H. De Man, et. al., </author> <title> "Architecture-Driven Synthesis Techniques for VLSI Implementation of DSP Algorithms", </title> <booktitle> Proceedings of IEEE, </booktitle> <pages> PP. 319-335, </pages> <month> Feb. </month> <year> 1990. </year>
Reference: [9] <author> H. De Man, et. al., </author> <title> "Synthesis of ASIC Regular Arrays for Real-Time Image Processing Systems", </title> <journal> Journal of VLSI Signal Processing, </journal> <pages> pp. 183-192, </pages> <year> 1991. </year>
Reference-contexts: Unlike linear transformations, it is difficult to estimate the VLSI costs and performance of the various new transformations due to their non-linear nature. We propose a graphical tool to aid in this task. We emphasize that it is not a synthesis tool such as ADVIS [20], Cathedral IV <ref> [9] </ref>, DIASTOL [25], MSSM [13], VACS [31], but a research tool which encourages interaction of the user to explore new methods of transformation including folding [28], partitioning [4], [20], multi-projection [30], index regrouping [9] and clustering [3]. <p> We emphasize that it is not a synthesis tool such as ADVIS [20], Cathedral IV <ref> [9] </ref>, DIASTOL [25], MSSM [13], VACS [31], but a research tool which encourages interaction of the user to explore new methods of transformation including folding [28], partitioning [4], [20], multi-projection [30], index regrouping [9] and clustering [3]. We claim that finding an optimal course through this large design space is not yet well-understood and that this research tool will help achieve that goal. <p> Hence, they serve as a useful intermediate-level description of VLSI algorithms. ARREST uses an ARE description of an algorithm as the input to the system. The design of AREs from a high-level specification is still not a trivial problem and is currently being explored by several researchers [3], <ref> [9] </ref>. In addition, localizing high fan-in computations and restructuring of parallel computations using associativity and factoring are still open questions. 2.2 CAD for VLSI Arrays There have been several efforts to incorporate transformational methods in CAD tools for VLSI arrays. <p> ARREST provides a tool which permits interactive modifications to the DG. Based on dependency matrices and vectors extracted from the SHDL description, ARREST generates a corresponding DG. Possible transformations which the user might wish to explore through ARREST include: 1. modifying the DG by index regrouping <ref> [9] </ref>. 2. localizing the DG by data pipelining [26]. 3. partitioning (LPGS and LSGP [30]) 4. folding [4] 5. changing the direction of transmittent variables. 6. re-parenthesizing associative computations 7. re-partitioning of node computations.
Reference: [10] <author> F.V. Aelten and S. Devadas, </author> " <title> Compositional Verification of Systems with Synchronous Globally Timed Control", </title> <booktitle> Proc. of Advanced Research in VLSI and Parallel Systems, </booktitle> <pages> pp. 195-209, </pages> <year> 1992. </year>
Reference-contexts: LAGER [1]). 2. automatic design and analysis of I/O conversion hardware for VLSI arrays [4]. 3. precision analysis of parallel computations [7]. 4. verification (i.e. <ref> [10] </ref>). 6. Conclusion We have presented a CAD tool for VLSI arrays. The design philosophy is based on interaction, and user-feedback is emphasized in the form of graphics, as well as simulation, estimation and verification toolboxes.
Reference: [11] <author> G.H. Golub and C.F. Loan, </author> <title> Matrix Computations, </title> <publisher> The Johns Hopkins University Press, </publisher> <year> 1992. </year>
Reference-contexts: Figure 1 shows the description of the computation resulting in the system Ux = c. Upon completion of the computation, A i;j is overwritten with L i;j for i &gt; j and is overwritten with U i;j otherwise <ref> [11] </ref>. Gaussian elimination is a triple loop procedure that can be arranged in several different ways. A parallel description of the computation is shown in Figure 1. Figure 3 shows a dependence graph of the computation. Figure 4 shows systolic and non-systolic schedules for the DG of Figure 3.
Reference: [12] <author> H. Hellwagner and T. Muller, </author> <title> "LISAS Loops-implemented systolic array simulator", </title> <booktitle> Proc. of VLSI and Computers Conference, COMPEURO'87, IEEE, </booktitle> <year> 1987. </year>
Reference-contexts: All of them assume a dependency graph that must have uniform dependencies as the description of the algorithm. We claim that more flexible and semiautomatic VLSI design tools are needed, specifically those which allow graphical interface and simulation. We are aware of some existing array simulators <ref> [12] </ref>, [14], [17]; however, these are somewhat demonstration projects rather than usable CAD tools. We expand the design space by allowing a broader class of transformations and implement a number of additional interactive features which make ARREST a useful tool for research, education, and design of VLSI arrays. 3.
Reference: [13] <author> Y.H. Hu, </author> <title> "MSSM A Design Aid for Multi-Stage Systolic Mapping", </title> <booktitle> VLSI Signal Processing IV, </booktitle> <pages> pp. 147-156, </pages> <year> 1990. </year>
Reference-contexts: We propose a graphical tool to aid in this task. We emphasize that it is not a synthesis tool such as ADVIS [20], Cathedral IV [9], DIASTOL [25], MSSM <ref> [13] </ref>, VACS [31], but a research tool which encourages interaction of the user to explore new methods of transformation including folding [28], partitioning [4], [20], multi-projection [30], index regrouping [9] and clustering [3].
Reference: [14] <author> T.H. Huang, et. al., </author> <title> "A High-Level Synthesizer for VLSI Array Architectures Dedicated to Digital Signal Processing", </title> <booktitle> Proc. of ICASSP , PP. </booktitle> <pages> 1221-1224, </pages> <year> 1991. </year>
Reference-contexts: All of them assume a dependency graph that must have uniform dependencies as the description of the algorithm. We claim that more flexible and semiautomatic VLSI design tools are needed, specifically those which allow graphical interface and simulation. We are aware of some existing array simulators [12], <ref> [14] </ref>, [17]; however, these are somewhat demonstration projects rather than usable CAD tools. We expand the design space by allowing a broader class of transformations and implement a number of additional interactive features which make ARREST a useful tool for research, education, and design of VLSI arrays. 3.
Reference: [15] <author> Y. Jeong and W. Burleson, </author> <title> "Choosing VLSI Algorithms for Finite Field Arithmetic" , Proc. </title> <booktitle> of ISCAS, </booktitle> <pages> pp. 799-802, </pages> <year> 1992. </year>
Reference-contexts: Our own applications of this tool are mainly in the area of bit-level algorithms and architectures such as arithmetic, coding and cryptography <ref> [15] </ref>, [18], [22], as well as linear algebra computations. 6. Acknowlegement The authors would like to thank Yongjin Jeong for writing the VERILOG interface.
Reference: [16] <author> H.T. Kung and C.E. Leiserson, </author> <title> "Systolic Arrays for VLSI", </title> <booktitle> Sparse Matrix Proceedings, </booktitle> <pages> pp. 245-282, </pages> <address> Philadelphia:SIAM, </address> <year> 1978. </year>
Reference-contexts: The formalisms of indexed dependency graphs (DGs) and signal flow graphs (SFGs) allow powerful synthesis methods based on transformations of the index set. 2.1 Transformation Methods Systolic arrays, first introduced by H.T. Kung <ref> [16] </ref>, can be characterized by a high degree of modularity, localized data communication, minimum control overhead, and very high throughput; therefore, they are well suited for special-purpose systems for real-time applications.
Reference: [17] <author> H.V.D. Lee and M. Perkowski, </author> <title> "Real Time Graphical Simulation of Systolic Arrays", Pro. </title> <booktitle> of Intl. Symp. Circ. and Sys., </booktitle> <pages> pp. 171-174, </pages> <year> 1989. </year>
Reference-contexts: All of them assume a dependency graph that must have uniform dependencies as the description of the algorithm. We claim that more flexible and semiautomatic VLSI design tools are needed, specifically those which allow graphical interface and simulation. We are aware of some existing array simulators [12], [14], <ref> [17] </ref>; however, these are somewhat demonstration projects rather than usable CAD tools. We expand the design space by allowing a broader class of transformations and implement a number of additional interactive features which make ARREST a useful tool for research, education, and design of VLSI arrays. 3.
Reference: [18] <author> W. Lien and W. Burleson, </author> <title> "Wave Domino Logic: Theory and Applications", </title> <booktitle> Proc. of ISCAS, </booktitle> <pages> pp. 2949-2952, </pages> <year> 1992. </year>
Reference-contexts: Our own applications of this tool are mainly in the area of bit-level algorithms and architectures such as arithmetic, coding and cryptography [15], <ref> [18] </ref>, [22], as well as linear algebra computations. 6. Acknowlegement The authors would like to thank Yongjin Jeong for writing the VERILOG interface. We are also very grateful to graduate students in Advanced VLSI Design (ECE697D) at the University of Massachusetts who were the first users of the ARREST software.
Reference: [19] <author> D.I. Moldovan, </author> <title> "On the Design of Algorithms for VLSI Systolic Arrays", </title> <booktitle> Proceedings of IEEE, </booktitle> <pages> pp. 113-120, </pages> <year> 1983. </year>
Reference-contexts: 1. Introduction Recent research in VLSI arrays has explored a variety of transformations on the dependency graph and signal flow graph representations of a particular computation. These new transformations are extensions to the original work in the field which was restricted to linear transformations [5], [6], <ref> [19] </ref>, [24]. Unlike linear transformations, it is difficult to estimate the VLSI costs and performance of the various new transformations due to their non-linear nature. We propose a graphical tool to aid in this task. <p> Kung [16], can be characterized by a high degree of modularity, localized data communication, minimum control overhead, and very high throughput; therefore, they are well suited for special-purpose systems for real-time applications. The design, analysis, and implementation of systolic arrays for specific problems has motivated extensive research [5], [6], <ref> [19] </ref>, [24], [29]. Quinton [24] proposed the notion of Uniform Recurrence Equations (UREs) as an initial high-level specification of the problem for synthesizing systolic arrays, and Rao [29] further extended the concept to characterize the algorithms which are implementable on systolic arrays.
Reference: [20] <author> D.I. Moldovan and J.A.B.Fortes, </author> <title> "Partitioning and Mapping Algorithms into Fixed Size Systolic Arrays", </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. c-35, no. 1, </volume> <year> 1986. </year>
Reference-contexts: Unlike linear transformations, it is difficult to estimate the VLSI costs and performance of the various new transformations due to their non-linear nature. We propose a graphical tool to aid in this task. We emphasize that it is not a synthesis tool such as ADVIS <ref> [20] </ref>, Cathedral IV [9], DIASTOL [25], MSSM [13], VACS [31], but a research tool which encourages interaction of the user to explore new methods of transformation including folding [28], partitioning [4], [20], multi-projection [30], index regrouping [9] and clustering [3]. <p> We emphasize that it is not a synthesis tool such as ADVIS <ref> [20] </ref>, Cathedral IV [9], DIASTOL [25], MSSM [13], VACS [31], but a research tool which encourages interaction of the user to explore new methods of transformation including folding [28], partitioning [4], [20], multi-projection [30], index regrouping [9] and clustering [3]. We claim that finding an optimal course through this large design space is not yet well-understood and that this research tool will help achieve that goal.
Reference: [21] <author> D.I. Moldovan, "ADVIS: </author> <title> A Software Package for the Design of Systolic Arrays", </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <pages> pp. 208-214, </pages> <month> January </month> <year> 1987. </year>
Reference: [22] <author> J.D. Narkiewicz and W. Burleson, </author> <title> "VLSI Performance/Precision Tradeoffs of Approximate Rank-Order Filters", </title> <booktitle> submitted for review to IEEE Workshop on VLSI Signal Processing, </booktitle> <year> 1992. </year>
Reference-contexts: To complement silicon compilers, some array compilers such as ADVIS, DIASTOL, VACS, and SYSTARS <ref> [22] </ref>, have been developed to assist users in designing optimal array structures. All of them assume a dependency graph that must have uniform dependencies as the description of the algorithm. We claim that more flexible and semiautomatic VLSI design tools are needed, specifically those which allow graphical interface and simulation. <p> Our own applications of this tool are mainly in the area of bit-level algorithms and architectures such as arithmetic, coding and cryptography [15], [18], <ref> [22] </ref>, as well as linear algebra computations. 6. Acknowlegement The authors would like to thank Yongjin Jeong for writing the VERILOG interface. We are also very grateful to graduate students in Advanced VLSI Design (ECE697D) at the University of Massachusetts who were the first users of the ARREST software.
Reference: [23] <author> E.Theodore Omtzight, "SYSTARS: </author> <title> A CAD Tool for the Synthesis and Analysis of VLSI Systolic/Wavefront Arrays", </title> <booktitle> Proc. of Int. conf. on Systolic Arrays , pp. </booktitle> <pages> 383-391, </pages> <year> 1988. </year>
Reference: [24] <author> P. </author> <title> Quinton, "Automatic Synthesis of Systolic Arrays from Uniform Recurrent Equations", </title> <booktitle> Proceeding 11th Annual Symp. on Computer Architecture, </booktitle> <pages> pp. 208-214, </pages> <year> 1984. </year>
Reference-contexts: 1. Introduction Recent research in VLSI arrays has explored a variety of transformations on the dependency graph and signal flow graph representations of a particular computation. These new transformations are extensions to the original work in the field which was restricted to linear transformations [5], [6], [19], <ref> [24] </ref>. Unlike linear transformations, it is difficult to estimate the VLSI costs and performance of the various new transformations due to their non-linear nature. We propose a graphical tool to aid in this task. <p> The design, analysis, and implementation of systolic arrays for specific problems has motivated extensive research [5], [6], [19], <ref> [24] </ref>, [29]. Quinton [24] proposed the notion of Uniform Recurrence Equations (UREs) as an initial high-level specification of the problem for synthesizing systolic arrays, and Rao [29] further extended the concept to characterize the algorithms which are implementable on systolic arrays. <p> The design, analysis, and implementation of systolic arrays for specific problems has motivated extensive research [5], [6], [19], <ref> [24] </ref>, [29]. Quinton [24] proposed the notion of Uniform Recurrence Equations (UREs) as an initial high-level specification of the problem for synthesizing systolic arrays, and Rao [29] further extended the concept to characterize the algorithms which are implementable on systolic arrays.
Reference: [25] <author> P. Quinton, P. Frison, P. Gachet, </author> <title> "Synthesizing Systolic Arrays Using DIAS-TOL", VLSI signal processingII, </title> <publisher> IEEE press, </publisher> <pages> pp. 93-105, </pages> <month> November </month> <year> 1986. </year>
Reference-contexts: We propose a graphical tool to aid in this task. We emphasize that it is not a synthesis tool such as ADVIS [20], Cathedral IV [9], DIASTOL <ref> [25] </ref>, MSSM [13], VACS [31], but a research tool which encourages interaction of the user to explore new methods of transformation including folding [28], partitioning [4], [20], multi-projection [30], index regrouping [9] and clustering [3].
Reference: [26] <author> S. V. Rajopadhye, </author> <title> "Synthesizing Systolic Arrays with Control Signals from Recurrence Equations", </title> <booktitle> Distributed Computing, </booktitle> <pages> pp. 88-105, </pages> <year> 1989. </year>
Reference-contexts: Based on dependency matrices and vectors extracted from the SHDL description, ARREST generates a corresponding DG. Possible transformations which the user might wish to explore through ARREST include: 1. modifying the DG by index regrouping [9]. 2. localizing the DG by data pipelining <ref> [26] </ref>. 3. partitioning (LPGS and LSGP [30]) 4. folding [4] 5. changing the direction of transmittent variables. 6. re-parenthesizing associative computations 7. re-partitioning of node computations. SFG design: ARREST generates a signal flow graph (SFG) by affine transformation according to user-specified scheduling and projection vectors.
Reference: [27] <author> S. V. Rajopadhye, </author> <title> "Synthesizing Systolic Arrays from Recurrence Equations", </title> <booktitle> Parallel Computing, </booktitle> <pages> pp. 163-189, </pages> <year> 1990. </year>
Reference-contexts: However, many problems cannot be expressed as UREs, and finding UREs from the problem description is not an easy task. To overcome these limitations, Rajopadhye <ref> [27] </ref> proposed Affine Recurrence Equations (AREs) as the starting point for synthesizing systolic arrays. AREs basically allow non-local (broadcast) communication of data and control and include tree structures. A method called data-pipelining is used to localize these non-local connections. <p> )) where p 2 D; q i 2 D and g is a single-valued function and for i = 1, ..., k, q i = A i p + b j , where A i is a constant n x n matrix and b j is a constant n-dimensional vector <ref> [27] </ref>. As stated above, AREs can be characterized by a constant matrix and a constant vector but unlike UREs, many more algorithms can be described naturally by AREs. Hence, they serve as a useful intermediate-level description of VLSI algorithms.
Reference: [28] <author> S. V. Rajopadhye, </author> <title> "A Folding Transformation for VLSI IIR Filter Array Design", </title> <booktitle> Proc. of ICASSP, </booktitle> <pages> pp. 1237-1240, </pages> <year> 1991. </year>
Reference-contexts: We emphasize that it is not a synthesis tool such as ADVIS [20], Cathedral IV [9], DIASTOL [25], MSSM [13], VACS [31], but a research tool which encourages interaction of the user to explore new methods of transformation including folding <ref> [28] </ref>, partitioning [4], [20], multi-projection [30], index regrouping [9] and clustering [3]. We claim that finding an optimal course through this large design space is not yet well-understood and that this research tool will help achieve that goal.
Reference: [29] <author> S. K. Rao, Thomas Kailath, and Hosagrahar V. Jagadish, </author> <title> "Array Architectures for Iterative Algorithms", </title> <booktitle> Proceeding of IEEE, </booktitle> <pages> pp. 1304-1321, </pages> <year> 1987. </year>
Reference-contexts: The design, analysis, and implementation of systolic arrays for specific problems has motivated extensive research [5], [6], [19], [24], <ref> [29] </ref>. Quinton [24] proposed the notion of Uniform Recurrence Equations (UREs) as an initial high-level specification of the problem for synthesizing systolic arrays, and Rao [29] further extended the concept to characterize the algorithms which are implementable on systolic arrays. <p> The design, analysis, and implementation of systolic arrays for specific problems has motivated extensive research [5], [6], [19], [24], <ref> [29] </ref>. Quinton [24] proposed the notion of Uniform Recurrence Equations (UREs) as an initial high-level specification of the problem for synthesizing systolic arrays, and Rao [29] further extended the concept to characterize the algorithms which are implementable on systolic arrays. All of the above works make a basic assumption of uniform dependencies which can be expressed as constant vectors, and synthesizing UREs with linear transformations is well understood.
Reference: [30] <author> S.Y.Kung, </author> <title> VLSI Array Processors, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1988. </year>
Reference-contexts: We emphasize that it is not a synthesis tool such as ADVIS [20], Cathedral IV [9], DIASTOL [25], MSSM [13], VACS [31], but a research tool which encourages interaction of the user to explore new methods of transformation including folding [28], partitioning [4], [20], multi-projection <ref> [30] </ref>, index regrouping [9] and clustering [3]. We claim that finding an optimal course through this large design space is not yet well-understood and that this research tool will help achieve that goal. <p> Based on dependency matrices and vectors extracted from the SHDL description, ARREST generates a corresponding DG. Possible transformations which the user might wish to explore through ARREST include: 1. modifying the DG by index regrouping [9]. 2. localizing the DG by data pipelining [26]. 3. partitioning (LPGS and LSGP <ref> [30] </ref>) 4. folding [4] 5. changing the direction of transmittent variables. 6. re-parenthesizing associative computations 7. re-partitioning of node computations. SFG design: ARREST generates a signal flow graph (SFG) by affine transformation according to user-specified scheduling and projection vectors. For high dimensional DGs, ARREST allows multiprojection [30] to obtain a VLSI <p> partitioning (LPGS and LSGP <ref> [30] </ref>) 4. folding [4] 5. changing the direction of transmittent variables. 6. re-parenthesizing associative computations 7. re-partitioning of node computations. SFG design: ARREST generates a signal flow graph (SFG) by affine transformation according to user-specified scheduling and projection vectors. For high dimensional DGs, ARREST allows multiprojection [30] to obtain a VLSI feasible 2-dimensional SFG. SFGs can be further partitioned to meet a design constraint. For a linear system Ax = b, Gaussian elimination converts the given system into the triangular system LUx = b.
Reference: [31] <author> S.Y.Kung and S.N.Jean, </author> <title> "A VLSI Array Compiler Systems(VACS) for Array Design" , VLSI Signal Processing III, </title> <journal> pp. </journal> <pages> 495-508, </pages> <year> 1988. </year>
Reference-contexts: We propose a graphical tool to aid in this task. We emphasize that it is not a synthesis tool such as ADVIS [20], Cathedral IV [9], DIASTOL [25], MSSM [13], VACS <ref> [31] </ref>, but a research tool which encourages interaction of the user to explore new methods of transformation including folding [28], partitioning [4], [20], multi-projection [30], index regrouping [9] and clustering [3].
Reference: [32] <institution> Cadence Design Systems Inc., VERILOG Manual, </institution> <year> 1991. </year>
Reference-contexts: This will identify obvious flaws such as cyclic dependencies, illegal schedules and other dependency violations. For more detailed simulation, ARREST provides an interface to the Cadence VERILOG simulator which is recognized as an academic and industry standard <ref> [32] </ref>. The user can interactively specify VERILOG simulation commands from the ARREST graphic interface. Similarly, VERILOG output such as register and wire values are available through the user-specified view of the computation in ARREST.
Reference: [33] <author> Douglas A. Young, </author> <title> The X Window System with Xt, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1990. </year>
References-found: 34

