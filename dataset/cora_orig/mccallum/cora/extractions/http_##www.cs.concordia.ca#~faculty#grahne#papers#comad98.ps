URL: http://www.cs.concordia.ca/~faculty/grahne/papers/comad98.ps
Refering-URL: http://www.cs.concordia.ca/~faculty/grahne/papers/index.html
Root-URL: http://www.cs.concordia.ca
Email: grahne@cs.concordia.ca  fRaul.Hakli,Matti.Nykanen,Esko.Ukkoneng@cs.Helsinki.Fi  
Title: AQL: an Alignment Based Language for Querying String Databases  
Author: Gosta Grahne Raul Hakli Matti Nykanen Esko Ukkonen 
Keyword: string databases, query languages, multi-tape automata, biological sequence data, declarative languages, modal logic  
Note: Supported by the Academy of Finland, grant number 18814.  
Address: Montreal H3G 1M8, Canada  P.O. Box 26, FIN-00014 University of Helsinki, Finland  
Affiliation: Department of Computer Science, Concordia University  Department of Computer Science  
Abstract: AQL stands for Alignment Query Language, and it is an extension of SQL. AQL allows for declarative querying of databases containing strings of characters as entries. For instance, in applications such as genomic databases, the DNA-sequences are strings, and they need to be queried based on their structure. The LIKE-operation in SQL does not go very far. Existing systems for string databases have a very ad hoc nature, usually giving the user a set of predefined simple query forms. On the other hand, there has recently been considerable theoretical advancement in the field of string databases. Several languages have been proposed, and their expressive power is becoming illuminated. However, there has been no practical demonstration of the feasibility of these languages. In this paper we describe an implementation of Alignment Calculus, a powerful string database language based on a modal logic extension of relational calculus. The implementation yields AQL. In AQL the user can write declarative string predicates in the WHERE-clause of a query. The predicates can be of an arbitrary arity, expressing for instance a unary property of a string being a palindrome, or expressing a binary property of one string being the reversal on another, and so on. The string predicates are translated into a novel form of a high level finite state automaton, and they are evaluated using an inference engine for chasing these automata. The AQL system has been implemented as an extension of a relational database management system. Our experiments show that the inference engine has the efficiency of an equivalent query computed in compiled Prolog. This is efficiency achieved already without using optimisation, something which the string queries due to their declarative nature are amenable to. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abarbanel, R.M., Wieneke, P.R., Mansfield, D.A., et al. </author> <title> Rapid searches for complex patterns in biological molecules. </title> <journal> Nucleic Acids Research 12, </journal> <volume> 1 (1984), </volume> <pages> 263-280. </pages>
Reference-contexts: The resulting language, originally presented in [10], is called Alignment Query Language (AQL). Some other more practically oriented proposals have been appeared in application areas like molecular biology where long DNA-sequences are represented as character strings. These suggestions include Searls' String Variable Grammars [21], pattern matching systems like QUEST <ref> [1] </ref>, ANREP [16], PAMALA [15], and PALM [11], and database query language extensions like Proximal [4]. Apart from Proximal, these implementations have not been studied in a database setting. <p> An atomic string formula can be obtained by adding a transpose to an arbitrary string. For example, [x 1 ] l x 1 = x 3 holds in an alignment if the first and third row characters on the window A 1 g <ref> [1; 3] </ref> l a ag A 3 g [1; 2; 3] l a ag a ag [1] r column are equal after sliding the first row one step to the left. The formula above holds in alignment A 5 but not in alignment A 2 of Figure 1. <p> For example, [x 1 ] l x 1 = x 3 holds in an alignment if the first and third row characters on the window A 1 g [1; 3] l a ag A 3 g <ref> [1; 2; 3] </ref> l a ag a ag [1] r column are equal after sliding the first row one step to the left. The formula above holds in alignment A 5 but not in alignment A 2 of Figure 1. <p> For example, [x 1 ] l x 1 = x 3 holds in an alignment if the first and third row characters on the window A 1 g [1; 3] l a ag A 3 g [1; 2; 3] l a ag a ag <ref> [1] </ref> r column are equal after sliding the first row one step to the left. The formula above holds in alignment A 5 but not in alignment A 2 of Figure 1. Furthermore, string formulae are regular expressions composed of atomic string formulae using concatenation, Kleene closure, and union operators.
Reference: [2] <author> Bonner, A.J., and Mecca, G. </author> <title> Sequences, Datalog and Transducers. </title> <note> To appear in the Journal of Computer and System Sciences (JCSS) special issue on the Fourteenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems. </note>
Reference-contexts: Richardson's logic can be used to express properties of lists, which may also be nested. The expressive power of temporal logic is known not to cover regular languages [30], but Richardson's extensions such as rigid variables allow some context-free properties to be expressed. Mecca and Bonner <ref> [2, 14] </ref> extend Datalog for string manipulation, in the spirit of Sequence Logic. Their language is highly expressive with respect to sequence functions. Grahne, Nykanen, and Ukkonen have presented Alignment Calculus, a powerful modal logic that can be used in string querying [8, 9, 17]. <p> For example, [x 1 ] l x 1 = x 3 holds in an alignment if the first and third row characters on the window A 1 g [1; 3] l a ag A 3 g <ref> [1; 2; 3] </ref> l a ag a ag [1] r column are equal after sliding the first row one step to the left. The formula above holds in alignment A 5 but not in alignment A 2 of Figure 1.
Reference: [3] <author> Codd, E.F. </author> <title> A relational model for large shared data banks. </title> <journal> Communications of the ACM 13, </journal> <volume> 6 (1970), </volume> <pages> 377-387. </pages>
Reference-contexts: This can be a problem in several string-oriented application areas such as molecular biology and text processing. A string is one of the basic data types of Codd's relational model <ref> [3] </ref>, which means that the strings are treated as atomic entities; thus a string can be accessed only as a whole and not on the level of the individual characters occurring within it. Modern object-oriented systems are usually alike in this sense. <p> An atomic string formula can be obtained by adding a transpose to an arbitrary string. For example, [x 1 ] l x 1 = x 3 holds in an alignment if the first and third row characters on the window A 1 g <ref> [1; 3] </ref> l a ag A 3 g [1; 2; 3] l a ag a ag [1] r column are equal after sliding the first row one step to the left. The formula above holds in alignment A 5 but not in alignment A 2 of Figure 1. <p> For example, [x 1 ] l x 1 = x 3 holds in an alignment if the first and third row characters on the window A 1 g [1; 3] l a ag A 3 g <ref> [1; 2; 3] </ref> l a ag a ag [1] r column are equal after sliding the first row one step to the left. The formula above holds in alignment A 5 but not in alignment A 2 of Figure 1.
Reference: [4] <author> Ganguly, S., and Noordewier, M. </author> <title> Proximal: a database system for the efficient retrieval of genetic information. </title> <booktitle> Computers in Biology and Medicine 26, 3 (1996), </booktitle> <pages> 199-207. </pages>
Reference-contexts: These suggestions include Searls' String Variable Grammars [21], pattern matching systems like QUEST [1], ANREP [16], PAMALA [15], and PALM [11], and database query language extensions like Proximal <ref> [4] </ref>. Apart from Proximal, these implementations have not been studied in a database setting. Our implementation has some similarities to the Proximal system in the idea of extending SQL-queries with special predicates describing properties of strings.
Reference: [5] <author> Ginsburg, S., and Wang, X. </author> <title> Pattern matching by rs-operations: towards a unified approach to querying sequenced data (extended abstract). </title> <booktitle> In ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems (1992), </booktitle> <pages> pp. 293-300. </pages>
Reference-contexts: Several methods for string and sequence manipulation and querying have been proposed. Ginsburg and Wang <ref> [5, 27, 6] </ref> have suggested Sequence Logic, which is predicate calculus extended with sequence predicates. The predicates are based on pattern merging with regular expressions, and they can be used to express properties of sequences and to manipulate sequences. Richardson [20] has modified temporal logic for list querying.
Reference: [6] <author> Ginsburg, S., and Wang, X.S., </author> <title> Regular sequence operations and their use in database queries. </title> <journal> Journal of Computer and System Sciences 56, </journal> <year> (1998), </year> <pages> 1-26. </pages>
Reference-contexts: Several methods for string and sequence manipulation and querying have been proposed. Ginsburg and Wang <ref> [5, 27, 6] </ref> have suggested Sequence Logic, which is predicate calculus extended with sequence predicates. The predicates are based on pattern merging with regular expressions, and they can be used to express properties of sequences and to manipulate sequences. Richardson [20] has modified temporal logic for list querying.
Reference: [7] <author> Grahne, G., Nykanen, M. </author> <title> Safety, translation and evaluation of Alignment Calculus. </title> <booktitle> In Proceedings of the First East-European Symposium on Advances in Databases and Information Systems (ADBIS'97) (1997), </booktitle> <pages> pp. 295-304. </pages>
Reference-contexts: Alignment Calculus is then domain relational calculus equipped with string formulae <ref> [7] </ref>. Before going into the details of AQL, let us now give an example of how the string properties can be expressed. <p> Then for instance in Example 1 only string s 2 is required to be in the database, while its prefixes s 1 are generated during query evaluation. The theory on how this aspect of Alignment Calculus could be implemented has been developed in <ref> [7, 17, 18] </ref>. Our ongoing implementation projects include a new prototype that also allows for the aforementioned string restructuring, and a World Wide Web -based query system for a molecular biology database [13, 26].
Reference: [8] <author> Grahne, G., Nykanen, M., and Ukkonen, E. </author> <title> Reasoning about strings in databases. </title> <booktitle> In ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems (1994), </booktitle> <pages> pp. 303-312. </pages>
Reference-contexts: Mecca and Bonner [2, 14] extend Datalog for string manipulation, in the spirit of Sequence Logic. Their language is highly expressive with respect to sequence functions. Grahne, Nykanen, and Ukkonen have presented Alignment Calculus, a powerful modal logic that can be used in string querying <ref> [8, 9, 17] </ref>. The above theoretical investigations came up with interesting models for expressing string properties but, thus far, few working implementations have been developed. This means that the practical applicability of these models is not known. <p> not x=']' read x on "tata" The results of this query are shown in Table 2. id sequence D12466 gatcaaataaagttataaaattgccttc Table 2: The query result 3 The syntax of AQL The syntax of the Alignment Declarations of AQL is a redefinition of the syntax of a subset of Alignment Calculus <ref> [8, 17] </ref>. We now define the relation between expressions written in Alignment Calculus and expressions written in Alignment Declarations of AQL.
Reference: [9] <author> Grahne, G., Nykanen, M., and Ukkonen, E. </author> <title> Reasoning about strings in databases. </title> <note> To appear in the Journal of Computer and System Sciences (JCSS). </note>
Reference-contexts: Mecca and Bonner [2, 14] extend Datalog for string manipulation, in the spirit of Sequence Logic. Their language is highly expressive with respect to sequence functions. Grahne, Nykanen, and Ukkonen have presented Alignment Calculus, a powerful modal logic that can be used in string querying <ref> [8, 9, 17] </ref>. The above theoretical investigations came up with interesting models for expressing string properties but, thus far, few working implementations have been developed. This means that the practical applicability of these models is not known.
Reference: [10] <author> Hakli, R. </author> <title> Extending a Database System with a String Language (in Finnish). </title> <type> MSc thesis, </type> <institution> Department of Computer Science, University of Helsinki, Finland, </institution> <year> 1997. </year>
Reference-contexts: This means that the practical applicability of these models is not known. The research presented in this paper studies the practical aspects of Alignment Calculus by restricting its expressivity, modifying its syntax, and attaching it to a database management system. The resulting language, originally presented in <ref> [10] </ref>, is called Alignment Query Language (AQL). Some other more practically oriented proposals have been appeared in application areas like molecular biology where long DNA-sequences are represented as character strings. <p> The transition diagram of automaton A is illustrated in Figure 3. Automaton A accepts all sequences containing the string 'tata'. In <ref> [10] </ref> it is proved that for each Alignment Declaration expression OE a corresponding automaton A OE can be constructed. Following [12, Theorem 2.3] the proof proceeds inductively on the structure of the expression OE by adding necessary states and transitions to the automaton.
Reference: [11] <author> Helgesen, C., and Sibbald, P.R. </author> <title> PALM a pattern language for molecular biology. </title> <booktitle> In Proceedings of the First International Conference on Intelligent Systems in Molecular Biology (1993), </booktitle> <pages> pp. 172-180. </pages>
Reference-contexts: Some other more practically oriented proposals have been appeared in application areas like molecular biology where long DNA-sequences are represented as character strings. These suggestions include Searls' String Variable Grammars [21], pattern matching systems like QUEST [1], ANREP [16], PAMALA [15], and PALM <ref> [11] </ref>, and database query language extensions like Proximal [4]. Apart from Proximal, these implementations have not been studied in a database setting. Our implementation has some similarities to the Proximal system in the idea of extending SQL-queries with special predicates describing properties of strings.
Reference: [12] <author> Hopcroft, J.E., and Ullman, J.D. </author> <title> Introduction to Automata Theory, Languages, and Computation. </title> <publisher> Addison-Wesley 1979. </publisher>
Reference-contexts: The transition diagram of automaton A is illustrated in Figure 3. Automaton A accepts all sequences containing the string 'tata'. In [10] it is proved that for each Alignment Declaration expression OE a corresponding automaton A OE can be constructed. Following <ref> [12, Theorem 2.3] </ref> the proof proceeds inductively on the structure of the expression OE by adding necessary states and transitions to the automaton.
Reference: [13] <author> Kekkonen, M., Koskelainen, J., Niemi, J., et al. </author> <title> Design document for the BiO 2 system (in Finnish). </title> <type> Tech. rep., </type> <institution> Department of Computer Science, University of Helsinki, Finland, </institution> <year> 1997. </year>
Reference-contexts: Although we wanted to test our ideas using the relational model in the first prototype, the Alignment Declarations are not connected to any specific data model. In fact, our current projects include a similar extension to object-oriented database management system O 2 <ref> [13] </ref>, and a World Wide Web -based system to query biological flat file databases [26]. The first prototype system can be used by defining predicates using the Alignment Declarations, and by using these predicates in queries. <p> Indeed, the optimisation of queries on strings is in our view a very fruitful area of research. We are currently working on a new prototype which extends the O 2 database management system and is also capable for generating new strings not contained in the database <ref> [13] </ref>. Another project is a WWW query system for a biological database [26] where an ordinary query form is extended with a possibility to use Alignment Declarations as an additional search condition. <p> The theory on how this aspect of Alignment Calculus could be implemented has been developed in [7, 17, 18]. Our ongoing implementation projects include a new prototype that also allows for the aforementioned string restructuring, and a World Wide Web -based query system for a molecular biology database <ref> [13, 26] </ref>.
Reference: [14] <author> Mecca, G., and Bonner, A.J. </author> <title> Sequences, Datalog and transducers. </title> <booktitle> In ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems (1995), </booktitle> <pages> pp. 23-35. </pages>
Reference-contexts: Richardson's logic can be used to express properties of lists, which may also be nested. The expressive power of temporal logic is known not to cover regular languages [30], but Richardson's extensions such as rigid variables allow some context-free properties to be expressed. Mecca and Bonner <ref> [2, 14] </ref> extend Datalog for string manipulation, in the spirit of Sequence Logic. Their language is highly expressive with respect to sequence functions. Grahne, Nykanen, and Ukkonen have presented Alignment Calculus, a powerful modal logic that can be used in string querying [8, 9, 17].
Reference: [15] <author> Mehldau, G. </author> <title> A Pattern Matching System for Biosequences, </title> <type> Tech. rep. TR 91-21, </type> <institution> Department of Computer Science, The University of Arizona, Tucson, Arizona, </institution> <year> 1991. </year>
Reference-contexts: Some other more practically oriented proposals have been appeared in application areas like molecular biology where long DNA-sequences are represented as character strings. These suggestions include Searls' String Variable Grammars [21], pattern matching systems like QUEST [1], ANREP [16], PAMALA <ref> [15] </ref>, and PALM [11], and database query language extensions like Proximal [4]. Apart from Proximal, these implementations have not been studied in a database setting. Our implementation has some similarities to the Proximal system in the idea of extending SQL-queries with special predicates describing properties of strings.
Reference: [16] <author> Mehldau, G., and Myers, G. </author> <title> A system for pattern matching applications on biosequences. </title> <booktitle> Computer Applications in the Biosciences 9, 3 (1993), </booktitle> <pages> 299-314. </pages>
Reference-contexts: Some other more practically oriented proposals have been appeared in application areas like molecular biology where long DNA-sequences are represented as character strings. These suggestions include Searls' String Variable Grammars [21], pattern matching systems like QUEST [1], ANREP <ref> [16] </ref>, PAMALA [15], and PALM [11], and database query language extensions like Proximal [4]. Apart from Proximal, these implementations have not been studied in a database setting. Our implementation has some similarities to the Proximal system in the idea of extending SQL-queries with special predicates describing properties of strings.
Reference: [17] <author> Nykanen, M. </author> <title> Querying String Databases with Modal Logic, </title> <type> PhD thesis, </type> <institution> Department of Com--puter Science, University of Helsinki, Helsinki, </institution> <year> 1997. </year>
Reference-contexts: Mecca and Bonner [2, 14] extend Datalog for string manipulation, in the spirit of Sequence Logic. Their language is highly expressive with respect to sequence functions. Grahne, Nykanen, and Ukkonen have presented Alignment Calculus, a powerful modal logic that can be used in string querying <ref> [8, 9, 17] </ref>. The above theoretical investigations came up with interesting models for expressing string properties but, thus far, few working implementations have been developed. This means that the practical applicability of these models is not known. <p> not x=']' read x on "tata" The results of this query are shown in Table 2. id sequence D12466 gatcaaataaagttataaaattgccttc Table 2: The query result 3 The syntax of AQL The syntax of the Alignment Declarations of AQL is a redefinition of the syntax of a subset of Alignment Calculus <ref> [8, 17] </ref>. We now define the relation between expressions written in Alignment Calculus and expressions written in Alignment Declarations of AQL. <p> Then for instance in Example 1 only string s 2 is required to be in the database, while its prefixes s 1 are generated during query evaluation. The theory on how this aspect of Alignment Calculus could be implemented has been developed in <ref> [7, 17, 18] </ref>. Our ongoing implementation projects include a new prototype that also allows for the aforementioned string restructuring, and a World Wide Web -based query system for a molecular biology database [13, 26].
Reference: [18] <author> Nykanen, M. </author> <title> Using acceptors as transducers. </title> <booktitle> To appear in Third International Workshop on Implementing Automata (WIA'98). </booktitle>
Reference-contexts: Then for instance in Example 1 only string s 2 is required to be in the database, while its prefixes s 1 are generated during query evaluation. The theory on how this aspect of Alignment Calculus could be implemented has been developed in <ref> [7, 17, 18] </ref>. Our ongoing implementation projects include a new prototype that also allows for the aforementioned string restructuring, and a World Wide Web -based query system for a molecular biology database [13, 26].
Reference: [19] <author> Pistor, P., and Traunmueller, R. </author> <title> A database language for sets, lists and tables. </title> <booktitle> Information Systems 11, 4 (1986), </booktitle> <pages> 323-336. </pages>
Reference-contexts: Other related work has been carried out in the study of complex object databases and sequence databases. These suggestions include for example the extended NF 2 model <ref> [19] </ref>, the SEQ-model [22], and the AQUA data model [25]. Implementations based on these suggestions have also been reported [23, 28].
Reference: [20] <author> Richardson, J. </author> <title> Supporting lists in a data model (a timely approach). </title> <booktitle> In Proceedings of the 18th International Conference on Very Large Data Bases (1992), </booktitle> <pages> pp. 127-138. </pages>
Reference-contexts: Ginsburg and Wang [5, 27, 6] have suggested Sequence Logic, which is predicate calculus extended with sequence predicates. The predicates are based on pattern merging with regular expressions, and they can be used to express properties of sequences and to manipulate sequences. Richardson <ref> [20] </ref> has modified temporal logic for list querying. Richardson's logic can be used to express properties of lists, which may also be nested.
Reference: [21] <author> Searls, </author> <title> D.B. String variable grammar: a logic grammar formalism for the biological language of DNA. </title> <journal> The Journal of Logic Programming 24, </journal> <volume> 1 & 2 (1995), </volume> <pages> 73-102. </pages>
Reference-contexts: The resulting language, originally presented in [10], is called Alignment Query Language (AQL). Some other more practically oriented proposals have been appeared in application areas like molecular biology where long DNA-sequences are represented as character strings. These suggestions include Searls' String Variable Grammars <ref> [21] </ref>, pattern matching systems like QUEST [1], ANREP [16], PAMALA [15], and PALM [11], and database query language extensions like Proximal [4]. Apart from Proximal, these implementations have not been studied in a database setting.
Reference: [22] <author> Seshadri, P., Livny, M., and Ramakrishnan, R. SEQ: </author> <title> A model for sequence databases. </title> <booktitle> In IEEE International Conference on Data Engineering (1995), </booktitle> <pages> pp. 232-239. </pages>
Reference-contexts: Other related work has been carried out in the study of complex object databases and sequence databases. These suggestions include for example the extended NF 2 model [19], the SEQ-model <ref> [22] </ref>, and the AQUA data model [25]. Implementations based on these suggestions have also been reported [23, 28].
Reference: [23] <author> Seshadri, P., Livny, M., and Ramakrishnan, R. </author> <booktitle> The design and implementation of a sequence database system In Proceedings of the Twenty-second International Conference on Very Large Data Bases (1996), </booktitle> <pages> pp. 99-110. </pages>
Reference-contexts: Other related work has been carried out in the study of complex object databases and sequence databases. These suggestions include for example the extended NF 2 model [19], the SEQ-model [22], and the AQUA data model [25]. Implementations based on these suggestions have also been reported <ref> [23, 28] </ref>. The difference between these approaches compared to ours is that they are interested in developing a new data model supporting ordered data types like lists of records while our focus is in the string fields of the data model in question.
Reference: [24] <author> Stoesser, G., Sterk, P., Tuli, M.A., et al. </author> <title> The EMBL Nucleotide Sequence Database. </title> <journal> Nucleic Acids Research 25, </journal> <volume> 1 (1997), </volume> <pages> 7-13. </pages>
Reference-contexts: or stack empty then end loop true 11. else (S; p) pop 12. until end loop 13. if s 2 F then accept input W 14. else reject 5 Results We tested our system by building a small database consisting of biological nucleotide data from the EMBL Nucleotide Sequence Database <ref> [24] </ref> together with some artificial sequences constructed for testing purposes. The schema consisted of three relations: sequence table, organism table, and comment table.
Reference: [25] <author> Subramanian, B., Leung, T., Vandenberg, S., and Zdonik, S. </author> <title> The AQUA approach to querying lists and trees in object-oriented databases. </title> <booktitle> In IEEE International Conference on Data Engineering (1995), </booktitle> <pages> pp. 80-89. </pages>
Reference-contexts: Other related work has been carried out in the study of complex object databases and sequence databases. These suggestions include for example the extended NF 2 model [19], the SEQ-model [22], and the AQUA data model <ref> [25] </ref>. Implementations based on these suggestions have also been reported [23, 28].
Reference: [26] <author> Tuomimaki, L. </author> <title> Querying Heterogeneous Sequence Databases in Computer Networks (in Finnish). </title> <type> MSc thesis, </type> <institution> Department of Computer Science, University of Helsinki, Finland, </institution> <year> 1998. </year>
Reference-contexts: In fact, our current projects include a similar extension to object-oriented database management system O 2 [13], and a World Wide Web -based system to query biological flat file databases <ref> [26] </ref>. The first prototype system can be used by defining predicates using the Alignment Declarations, and by using these predicates in queries. The communication between the DBMS and our inference engine is carried out by using two functions written in C. <p> We are currently working on a new prototype which extends the O 2 database management system and is also capable for generating new strings not contained in the database [13]. Another project is a WWW query system for a biological database <ref> [26] </ref> where an ordinary query form is extended with a possibility to use Alignment Declarations as an additional search condition. <p> The theory on how this aspect of Alignment Calculus could be implemented has been developed in [7, 17, 18]. Our ongoing implementation projects include a new prototype that also allows for the aforementioned string restructuring, and a World Wide Web -based query system for a molecular biology database <ref> [13, 26] </ref>.
Reference: [27] <author> Wang, X. </author> <title> Pattern Matching by Rs-Operations: Towards a Unified Approach to Querying Sequenced Data. </title> <type> PhD thesis, </type> <institution> University of Southern California, </institution> <year> 1992. </year>
Reference-contexts: Several methods for string and sequence manipulation and querying have been proposed. Ginsburg and Wang <ref> [5, 27, 6] </ref> have suggested Sequence Logic, which is predicate calculus extended with sequence predicates. The predicates are based on pattern merging with regular expressions, and they can be used to express properties of sequences and to manipulate sequences. Richardson [20] has modified temporal logic for list querying.
Reference: [28] <author> Wegner, L.M. </author> <title> Let the fingers do the walking: object manipulation in an NF 2 database editor. In New Results and New Trends in Computer Science, </title> <editor> H.Maurer, Ed, </editor> <booktitle> Lecture Notes in Computer Science 555, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991, </year> <pages> pp. 337-358. </pages>
Reference-contexts: Other related work has been carried out in the study of complex object databases and sequence databases. These suggestions include for example the extended NF 2 model [19], the SEQ-model [22], and the AQUA data model [25]. Implementations based on these suggestions have also been reported <ref> [23, 28] </ref>. The difference between these approaches compared to ours is that they are interested in developing a new data model supporting ordered data types like lists of records while our focus is in the string fields of the data model in question.
Reference: [29] <author> Wielemaker, J. </author> <title> SWI-Prolog Reference Manual. </title> <institution> University of Amsterdam, </institution> <address> The Netherlands, http://www.swi.psy.uva.nl/usr/jan/SWI-Prolog/Manual/Title.html, 1997. </address>
Reference-contexts: It turned out that the automaton based simulation of Alignment Declarations was slightly faster than evaluating the predicates in compiled SWI-Prolog <ref> [29] </ref>, encoding strings as Prolog lists. In general, the efficiency of the string-predicates in AQL correspond to brute-force pattern matching. The main benefits of AQL lie in its simplicity compared to embedded programming languages, and its expressive power well beyond the LIKE operator of SQL and regular languages.
Reference: [30] <author> Wolper, P. </author> <title> Temporal logic can be more expressive. </title> <booktitle> Information and Control 56 (1983), </booktitle> <pages> 72-99. </pages>
Reference-contexts: Richardson [20] has modified temporal logic for list querying. Richardson's logic can be used to express properties of lists, which may also be nested. The expressive power of temporal logic is known not to cover regular languages <ref> [30] </ref>, but Richardson's extensions such as rigid variables allow some context-free properties to be expressed. Mecca and Bonner [2, 14] extend Datalog for string manipulation, in the spirit of Sequence Logic. Their language is highly expressive with respect to sequence functions.
Reference: [31] <author> Yu, A., and Chen, J. </author> <title> The POSTGRES95 User Manual. </title> <institution> University of California at Berkeley, California, </institution> <note> http://www.eol.ists.ca/%7Edunlop/postgres95-manual/, 1995. </note>
Reference-contexts: Then it only remains to read s 1 and s 2 backwards to check that these (n=2) characters are indeed equal. 4 The prototype system A prototype system using Alignment Query Language was implemented as an extension to the PostgreSQL database management system <ref> [31] </ref>. The project of extending a database system to allow the users to construct their own predicates poses certain requirements for the database management system. <p> In our first prototype, we chose the PostgreSQL database management system because it can easily be extended with user defined functions written in the C programming language <ref> [31] </ref>. While this feature is common among object-oriented database management systems, it usually is not available in systems based on the relational model. Although we wanted to test our ideas using the relational model in the first prototype, the Alignment Declarations are not connected to any specific data model.
References-found: 31

