URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr97/tr97-009.ps
Refering-URL: http://www.cis.ufl.edu/~fishwick/tr/tr97-009.html
Root-URL: http://www.cis.ufl.edu
Email: E-mail: fishwick@cise.ufl.edu  
Phone: Phone  FAX: (352) 392-1414  
Title: REVISED SUBMISSION FOR SPECIAL ISSUE ON MODEL SPECIFICATION REPRESENTATION for ACM Transactions on Modeling and
Author: Paul A. Fishwick 
Date: April 14, 1996  
Note: and  
Address: Bldg. CSE, Room 301 Gainesville, FL 32611  
Affiliation: Dept. of Computer Information Science and Engineering University of Florida  
Abstract-found: 0
Intro-found: 1
Reference: [1] <editor> Osman Balci and Richard E. Nance. </editor> <title> Simulation Model Development Environments: A Research Prototype. </title> <journal> Journal of the Operational Research Society, </journal> <volume> 38(8):753 - 763, </volume> <year> 1987. </year>
Reference-contexts: Other more recent simulation thrusts in the object-oriented arena include SCS conferences [35] as well as numerous Winter Simulation Conference sessions over the past ten years. Also, various simulation groups have adopted the general object-oriented perspective <ref> [38, 49, 18, 1] </ref>. Fishwick and Zeigler [12] demonstrate a translation from multimodel to system formalism using DEVS [48] for one particular type of visual multimodel (i.e., finite state automaton (FSA) model controlling a set of ordinary differential equations). For other types of mul-timodels, one can devise additional formalisms [32].
Reference: [2] <author> G. M. Birtwistle. </author> <title> Discrete Event Modelling on SIMULA. </title> <publisher> Macmillan, </publisher> <year> 1979. </year>
Reference-contexts: Our definition of modeling is described at a level where models are translated into executable programs and formal specifications. Object-oriented methodology in simulation has a long history, as with the introduction of the Simula language <ref> [2] </ref>, which can be considered one of the pioneering ways in which simulation applied itself to "object-oriented thinking." Simula provided many of the basic primitives for class construction and object oriented principles but was not accompanied by a visually-oriented engineering approach to model building that is found in more recent software
Reference: [3] <author> Grady Booch. </author> <title> Object Oriented Design. </title> <publisher> Benjamin Cummings, </publisher> <year> 1991. </year>
Reference-contexts: be considered one of the pioneering ways in which simulation applied itself to "object-oriented thinking." Simula provided many of the basic primitives for class construction and object oriented principles but was not accompanied by a visually-oriented engineering approach to model building that is found in more recent software engineering texts <ref> [39, 3, 15] </ref>. We find the visual orientation convenient since it represents a natural, and often-used, technique of scientists and engineers. Other more recent simulation thrusts in the object-oriented arena include SCS conferences [35] as well as numerous Winter Simulation Conference sessions over the past ten years.
Reference: [4] <author> Alan H. Borning. </author> <title> THINGLAB A Constraint-Oriented Simulation Laboratory. </title> <type> Technical report, </type> <note> Xerox PARC, 1979. 20 </note>
Reference-contexts: Functional languages, often based on the lambda calculus [24, 33], are similar in principle. The languages Lisp [45] and ML [29] are two example functional languages. Lisp has some declarative features (i.e., side effects) whereas other functional languages attempt to be "pure." Constraint languages <ref> [4, 22] </ref> reflect a relatively recent trend for programming where procedures and declarations are insufficient. The constraint language CLP (R) [17] (Constraint Logic Programming) represents this type of language. Also, the next generation Prolog (Prolog III) is constraint oriented.
Reference: [5] <author> Peter C. Breedveld. </author> <title> A Systematic Method to Derive Bond Graph Models. </title> <booktitle> In Second European Simulation Congress, </booktitle> <address> Antwerp, Belgium, </address> <year> 1986. </year>
Reference-contexts: An example constraint graph is an analog electrical circuit or a bond graph <ref> [5] </ref>. The extra model type not previously discussed here, but found in [10], is spatial model. In our discussion, a spatial model is a static model whose dynamics take on one of three visual model types. <p> Constraint: Constraint models are equational in nature, and reflect non-directional constraints among object attributes. A class C with a constraint equational model contains an equation with terms containing attributes of ^ C i . Equations can be represented in graph form as well as with bond graphs <ref> [5, 37, 44] </ref>. Models of non-directional behavior, such as general hydrodynamic models are constraint-based.
Reference: [6] <author> Fran~cois E. </author> <title> Cellier. Continuous System Modeling. </title> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: More specific object-oriented simulation for physical models of the automatic control variety are discussed at length by Elmqvist [7], while Cellier <ref> [6] </ref> covers the DYMOLA simulation language used a basis for further object-oriented extensions. Our approach provides an extension to this research with an effort in explicitly specifying a method of mapping the physical category (i.e., group of objects) into the multimodeling framework.
Reference: [7] <author> Hilding Elmqvist. </author> <title> A Structured Model Language for Large Continuous Systems. </title> <type> PhD thesis, </type> <institution> Lund Institute of Technology, Lund, Sweden, </institution> <year> 1979. </year>
Reference-contexts: Therefore, the primary contribution is one of defining how multimodels are specified in an object-oriented setting, and the secondary contribution is the use of these models for physical modeling in general. More specific object-oriented simulation for physical models of the automatic control variety are discussed at length by Elmqvist <ref> [7] </ref>, while Cellier [6] covers the DYMOLA simulation language used a basis for further object-oriented extensions. Our approach provides an extension to this research with an effort in explicitly specifying a method of mapping the physical category (i.e., group of objects) into the multimodeling framework.
Reference: [8] <author> John B. Evans. </author> <title> Structures of Discrete Event Simulation: An Introduction to the Engagement Strategy. </title> <publisher> Ellis Horwood Limited, a Division of John Wiley and Sons, </publisher> <year> 1988. </year>
Reference-contexts: These styles capture the nature of the model types and this metaphor to programming languages ends there. We do not claim that this taxonomy is the only valid one since many others exist such as the taxonomy for discrete event modeling and simulation <ref> [30, 8] </ref>.
Reference: [9] <author> Paul A. Fishwick. </author> <title> Heterogeneous Decomposition and Coupling for Combined Modeling. </title> <booktitle> In 1991 Winter Simulation Conference, </booktitle> <pages> pages 1199 - 1208, </pages> <address> Phoenix, AZ, </address> <month> December </month> <year> 1991. </year>
Reference-contexts: So, for example, one may take a state of r and refine this into a functional model containing two coupled functions. This sort of model decomposition is called heterogeneous model decomposition <ref> [9, 25, 10] </ref> since more than one model type is used during refinement. Homogeneous refinements are more commonly used, where a model component is refined into similar components but using more detail. In [10], multimodels are visualized outside of an object-oriented framework.
Reference: [10] <author> Paul A. Fishwick. </author> <title> Simulation Model Design and Execution: Building Digital Worlds. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: To model a system's dynamics, we need to couple together attributes and methods inside objects rather than the objects themselves. A similar argument is valid for coupled classes. 3.2.2 Three types of Dynamic Model In <ref> [10] </ref>, we define three key types of dynamic model, and we use these types to describe object-oriented multimodel design. The multimodel design approach is not limited to this taxonomy but we find the taxonomy to be a convenient categorization of visual dynamic models. 6 Some justification for this choice follows. <p> An example constraint graph is an analog electrical circuit or a bond graph [5]. The extra model type not previously discussed here, but found in <ref> [10] </ref>, is spatial model. In our discussion, a spatial model is a static model whose dynamics take on one of three visual model types. <p> So, for example, one may take a state of r and refine this into a functional model containing two coupled functions. This sort of model decomposition is called heterogeneous model decomposition <ref> [9, 25, 10] </ref> since more than one model type is used during refinement. Homogeneous refinements are more commonly used, where a model component is refined into similar components but using more detail. In [10], multimodels are visualized outside of an object-oriented framework. <p> This sort of model decomposition is called heterogeneous model decomposition [9, 25, 10] since more than one model type is used during refinement. Homogeneous refinements are more commonly used, where a model component is refined into similar components but using more detail. In <ref> [10] </ref>, multimodels are visualized outside of an object-oriented framework. In OOPM, a multimodel may be embedded in several physical objects; however, the individual multimodel layers can still be abstracted by refining dynamic model components.
Reference: [11] <author> Paul A. Fishwick and Kangsun Lee. </author> <title> Two Methods for Exploiting Abstraction in Systems. </title> <booktitle> AI, Simulation and Planning in High Autonomous Systems, </booktitle> <pages> pages 257-264, </pages> <year> 1996. </year>
Reference-contexts: For static models, we may decide to subdivide each cell of s using quadtrees. This represents a shift in model type: from an array to a quadtree. Recent work on multimodeling and a new taxonomy for structural and behavioral abstraction is found in <ref> [11, 21] </ref>. Every dynamic model obj:M () has model components. For multimodeling, the following three model components are important: 1) attribute reference, 2) attribute value, and 3) method. Refinements can be made for each of these model component types. 1.
Reference: [12] <author> Paul A. Fishwick and Bernard P. Zeigler. </author> <title> A Multimodel Methodology for Qualitative Model Engineering. </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> 2(1) </volume> <pages> 52-81, </pages> <year> 1992. </year>
Reference-contexts: Other more recent simulation thrusts in the object-oriented arena include SCS conferences [35] as well as numerous Winter Simulation Conference sessions over the past ten years. Also, various simulation groups have adopted the general object-oriented perspective [38, 49, 18, 1]. Fishwick and Zeigler <ref> [12] </ref> demonstrate a translation from multimodel to system formalism using DEVS [48] for one particular type of visual multimodel (i.e., finite state automaton (FSA) model controlling a set of ordinary differential equations). For other types of mul-timodels, one can devise additional formalisms [32].
Reference: [13] <author> James D. Foley, Andries van Dam, Steven K. Feiner, and John F. Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1990. </year> <note> Second Edition. </note>
Reference-contexts: A quadtree represents a simple form of four-ply tree data structure that can be used to model the space. For 3D spaces, octrees provide a related structure. Likewise, for the robot depicted in Fig. 1, there are methods described in the literature on CAD and computer graphics <ref> [13, 16] </ref>. Fig. 2 displays two static models: the first model is a quadtree 4 Table 1: A sample set of applications using a particle-field metaphor.
Reference: [14] <author> Carlo Ghezzi and Mehdi Jazayeri. </author> <title> Programming Language Concepts. </title> <publisher> John Wiley, </publisher> <address> second edition, </address> <year> 1987. </year>
Reference-contexts: These visual model types correspond, in form and function, to programming language styles. Our model types are: declarative, functional and constraint. The first two styles are discussed in <ref> [14] </ref> as being fundamental styles for programming, while the more recent constraint style is discussed in [22] with a more recent exposition in [31]. A declarative simulation model is one where states and event transitions| individually or in groups|are specified in the model directly. <p> For programming languages, there is no explicit specification of time. In programming languages, the logical programming style is defined as synonymous with the declarative style <ref> [14] </ref>. 2. Functional models have causality, and therefore a direction in the flow of data from input to output. Functional programming languages and model types such as block model, used frequently in automatic control, exhibit the same style. 3.
Reference: [15] <author> Ian Graham. </author> <title> Object Oriented Methods. </title> <publisher> Addison Wesley, </publisher> <year> 1991. </year>
Reference-contexts: be considered one of the pioneering ways in which simulation applied itself to "object-oriented thinking." Simula provided many of the basic primitives for class construction and object oriented principles but was not accompanied by a visually-oriented engineering approach to model building that is found in more recent software engineering texts <ref> [39, 3, 15] </ref>. We find the visual orientation convenient since it represents a natural, and often-used, technique of scientists and engineers. Other more recent simulation thrusts in the object-oriented arena include SCS conferences [35] as well as numerous Winter Simulation Conference sessions over the past ten years.
Reference: [16] <author> Donald Hearn and M. Pauline Baker. </author> <title> Computer Graphics. </title> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference-contexts: A quadtree represents a simple form of four-ply tree data structure that can be used to model the space. For 3D spaces, octrees provide a related structure. Likewise, for the robot depicted in Fig. 1, there are methods described in the literature on CAD and computer graphics <ref> [13, 16] </ref>. Fig. 2 displays two static models: the first model is a quadtree 4 Table 1: A sample set of applications using a particle-field metaphor.
Reference: [17] <author> Nevin Heintze, Joxan Jaffar, Spiro Michaylov, Peter Stuckey, and Roland Yap. </author> <title> The CLP(R) Programmer's Manual: </title> <note> Version 1.1, </note> <month> November </month> <year> 1991. </year>
Reference-contexts: Lisp has some declarative features (i.e., side effects) whereas other functional languages attempt to be "pure." Constraint languages [4, 22] reflect a relatively recent trend for programming where procedures and declarations are insufficient. The constraint language CLP (R) <ref> [17] </ref> (Constraint Logic Programming) represents this type of language. Also, the next generation Prolog (Prolog III) is constraint oriented. In constraint models, the focus is on an acausal or non-directional dataflow, which involves basic balances of units such as momentum and energy.
Reference: [18] <author> David R. C. Hill. </author> <title> Object-Oriented Analysis and Simulation. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: Other more recent simulation thrusts in the object-oriented arena include SCS conferences [35] as well as numerous Winter Simulation Conference sessions over the past ten years. Also, various simulation groups have adopted the general object-oriented perspective <ref> [38, 49, 18, 1] </ref>. Fishwick and Zeigler [12] demonstrate a translation from multimodel to system formalism using DEVS [48] for one particular type of visual multimodel (i.e., finite state automaton (FSA) model controlling a set of ordinary differential equations). For other types of mul-timodels, one can devise additional formalisms [32].
Reference: [19] <author> John A. Jacquez. </author> <title> Compartmental Analysis in Biology and Medicine. </title> <publisher> University of Michigan Press, </publisher> <year> 1985. </year> <note> Second edition. </note>
Reference-contexts: To accurately represent the dynamics of objects, we need a more comprehensive and flexible approach that affords the modeler the ability to use familiar models such as FSAs, System Dynamics flow graphs [34, 36], compartmental flow models <ref> [19] </ref> and functional block models [27]. To model a system's dynamics, we need to couple together attributes and methods inside objects rather than the objects themselves. <p> Both methods can be found in ^ C i . The block model is function-based since functions are made explicit as nodes. Variable-based models such as System Dynamics flow graphs [36] or compartmental models <ref> [19] </ref> are the duals of function-based models since variables are placed at the nodes. For a C with this type of method, the variables are attributes of ^ C i .
Reference: [20] <author> Robert Kowalski. </author> <title> Logic for Problem Solving. </title> <publisher> Elsevier North Holland, </publisher> <year> 1979. </year>
Reference-contexts: A declarative simulation model is one where states and event transitions| individually or in groups|are specified in the model directly. Production rule languages and logic-based languages based on Horn clauses (such as Prolog <ref> [20] </ref>) create a mirror image of the declarative model for simulation. Moreover, declarative semantics are used to define the interpretation of programming language statements. A functional model is one where there is directionality in flow of a signal whether discrete or continuous.
Reference: [21] <author> Kangsun Lee and Paul A. Fishwick. </author> <title> A Methodology for Dynamic Model Abstraction. </title> <journal> SCS Transactions on Simulation, </journal> <note> 1996. Submitted August 1996. </note>
Reference-contexts: For static models, we may decide to subdivide each cell of s using quadtrees. This represents a shift in model type: from an array to a quadtree. Recent work on multimodeling and a new taxonomy for structural and behavioral abstraction is found in <ref> [11, 21] </ref>. Every dynamic model obj:M () has model components. For multimodeling, the following three model components are important: 1) attribute reference, 2) attribute value, and 3) method. Refinements can be made for each of these model component types. 1.
Reference: [22] <author> William Leler. </author> <title> Constraint Programming Languages: Their Specification and Generation. </title> <publisher> Addison Wesley, </publisher> <year> 1988. </year> <month> 21 </month>
Reference-contexts: These visual model types correspond, in form and function, to programming language styles. Our model types are: declarative, functional and constraint. The first two styles are discussed in [14] as being fundamental styles for programming, while the more recent constraint style is discussed in <ref> [22] </ref> with a more recent exposition in [31]. A declarative simulation model is one where states and event transitions| individually or in groups|are specified in the model directly. <p> Functional languages, often based on the lambda calculus [24, 33], are similar in principle. The languages Lisp [45] and ML [29] are two example functional languages. Lisp has some declarative features (i.e., side effects) whereas other functional languages attempt to be "pure." Constraint languages <ref> [4, 22] </ref> reflect a relatively recent trend for programming where procedures and declarations are insufficient. The constraint language CLP (R) [17] (Constraint Logic Programming) represents this type of language. Also, the next generation Prolog (Prolog III) is constraint oriented.
Reference: [23] <author> Aristid Lindenmeyer. </author> <title> Mathematical Models for Cellular Interaction in Development. </title> <journal> Journal of Theoretical Biology, </journal> <volume> 18 </volume> <pages> 280-315, </pages> <year> 1968. </year>
Reference-contexts: But, what if the dynamics cause a change in the static model of an object? This is what happens in biological systems and what we call morphogenesis [26]|a temporal change in structure. Lindenmeyer Systems <ref> [23] </ref> (L-Systems) capture a dynamic way of modeling that falls under the declarative class of dynamic models: rules are specified to model change of object structure.
Reference: [24] <author> Greg Michaelson. </author> <title> An Introduction to Functional Programming through Lambda Calculus. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: There is often a causal relation associated with a directional flow. The flow has a source, several possible sinks, and contains coupled components through which material flows. Functional languages, often based on the lambda calculus <ref> [24, 33] </ref>, are similar in principle. The languages Lisp [45] and ML [29] are two example functional languages.
Reference: [25] <author> Victor T. Miller and Paul A. Fishwick. </author> <title> Heterogeneous Hierarchical Models. In Artificial Intelligence X: Knowledge Based Systems, </title> <address> Orlando, FL, </address> <month> April </month> <year> 1992. </year> <pages> SPIE. </pages>
Reference-contexts: So, for example, one may take a state of r and refine this into a functional model containing two coupled functions. This sort of model decomposition is called heterogeneous model decomposition <ref> [9, 25, 10] </ref> since more than one model type is used during refinement. Homogeneous refinements are more commonly used, where a model component is refined into similar components but using more detail. In [10], multimodels are visualized outside of an object-oriented framework.
Reference: [26] <author> J. D. Murray. </author> <title> Mathematical Biology. </title> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference: [27] <author> Katsuhiko Ogata. </author> <title> Modern Control Engineering. </title> <publisher> Prentice Hall, </publisher> <year> 1970. </year>
Reference-contexts: To accurately represent the dynamics of objects, we need a more comprehensive and flexible approach that affords the modeler the ability to use familiar models such as FSAs, System Dynamics flow graphs [34, 36], compartmental flow models [19] and functional block models <ref> [27] </ref>. To model a system's dynamics, we need to couple together attributes and methods inside objects rather than the objects themselves.
Reference: [28] <author> Louis Padulo and Michael A. Arbib. </author> <title> Systems Theory: A Unified State Space Approach to Continuous and Discrete Systems. </title> <editor> W. B. </editor> <publisher> Saunders, </publisher> <address> Philadelphia, PA, </address> <year> 1974. </year>
Reference-contexts: There are internal and external events. An external event is one from "outside the system" whereas an internal event is one "inside the system," but from a lower abstraction level. Further explanation and variations of the system formalism can be found in the systems <ref> [28] </ref> and simulation [47] literature; however, the above definition suffices for our purpose. The first key observation of OOPM is that we are encapsulating behavior (i.e., dynamic models) and structure (i.e., static models) within objects.
Reference: [29] <author> L. C. Paulson. </author> <title> ML for the Working Programmer. </title> <publisher> Cambridge University Press, </publisher> <year> 1991. </year>
Reference-contexts: There is often a causal relation associated with a directional flow. The flow has a source, several possible sinks, and contains coupled components through which material flows. Functional languages, often based on the lambda calculus [24, 33], are similar in principle. The languages Lisp [45] and ML <ref> [29] </ref> are two example functional languages. Lisp has some declarative features (i.e., side effects) whereas other functional languages attempt to be "pure." Constraint languages [4, 22] reflect a relatively recent trend for programming where procedures and declarations are insufficient.
Reference: [30] <author> Michael Pidd, </author> <title> editor. Computer Modelling for Discrete Simulation. </title> <publisher> John Wiley and Sons, </publisher> <year> 1989. </year>
Reference-contexts: These styles capture the nature of the model types and this metaphor to programming languages ends there. We do not claim that this taxonomy is the only valid one since many others exist such as the taxonomy for discrete event modeling and simulation <ref> [30, 8] </ref>.
Reference: [31] <author> Andreas Podelski, </author> <title> editor. Constraint Programming: Basics and Trends. </title> <publisher> Springer, </publisher> <year> 1995. </year> <note> Lecture Notes in Computer Science 910. </note>
Reference-contexts: Our model types are: declarative, functional and constraint. The first two styles are discussed in [14] as being fundamental styles for programming, while the more recent constraint style is discussed in [22] with a more recent exposition in <ref> [31] </ref>. A declarative simulation model is one where states and event transitions| individually or in groups|are specified in the model directly. Production rule languages and logic-based languages based on Horn clauses (such as Prolog [20]) create a mirror image of the declarative model for simulation.
Reference: [32] <author> Herbert Praehofer. </author> <title> Systems Theoretic Formalisms for Combined Discrete-Continuous System Simulation. </title> <journal> International Journal of General Systems, </journal> <volume> 19(3) </volume> <pages> 219-240, </pages> <year> 1991. </year>
Reference-contexts: Fishwick and Zeigler [12] demonstrate a translation from multimodel to system formalism using DEVS [48] for one particular type of visual multimodel (i.e., finite state automaton (FSA) model controlling a set of ordinary differential equations). For other types of mul-timodels, one can devise additional formalisms <ref> [32] </ref>. Our focus on multimodels is to define how a set of heterogeneous visually-oriented model types can be integrated together to form a cohesive multi-layer model. Heterogeneous model types refer to the use of visually distinct model types such as a System Dynamics flow graph [34] versus an FSA.
Reference: [33] <author> G. Revesz. </author> <title> Lambda Calculus Combinators and Functional Programming. </title> <publisher> Cambridge University Press, </publisher> <year> 1988. </year>
Reference-contexts: There is often a causal relation associated with a directional flow. The flow has a source, several possible sinks, and contains coupled components through which material flows. Functional languages, often based on the lambda calculus <ref> [24, 33] </ref>, are similar in principle. The languages Lisp [45] and ML [29] are two example functional languages.
Reference: [34] <author> George P. Richardson and A. L. Pugh. </author> <title> Introduction to System Dynamics Modeling with DYNAMO. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1981. </year>
Reference-contexts: Our focus on multimodels is to define how a set of heterogeneous visually-oriented model types can be integrated together to form a cohesive multi-layer model. Heterogeneous model types refer to the use of visually distinct model types such as a System Dynamics flow graph <ref> [34] </ref> versus an FSA. We define how these multimodels are constructed within an object-oriented design framework. Moreover, we define the framework in terms of a simple scenario involving "physical" objects. <p> To accurately represent the dynamics of objects, we need a more comprehensive and flexible approach that affords the modeler the ability to use familiar models such as FSAs, System Dynamics flow graphs <ref> [34, 36] </ref>, compartmental flow models [19] and functional block models [27]. To model a system's dynamics, we need to couple together attributes and methods inside objects rather than the objects themselves.
Reference: [35] <author> Chell A. Roberts, Terrence Beaumariage, Charles Herring, and Jeffrey Wallace. </author> <title> Object Oriented Simulation. </title> <booktitle> Society for Computer Simulation International, </booktitle> <year> 1995. </year>
Reference-contexts: We find the visual orientation convenient since it represents a natural, and often-used, technique of scientists and engineers. Other more recent simulation thrusts in the object-oriented arena include SCS conferences <ref> [35] </ref> as well as numerous Winter Simulation Conference sessions over the past ten years. Also, various simulation groups have adopted the general object-oriented perspective [38, 49, 18, 1].
Reference: [36] <author> Nancy Roberts, David Andersen, Ralph Deal, Michael Garet, and William Shaffer. </author> <title> Introduction to Computer Simulation: A Systems Dynamics Approach. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: To accurately represent the dynamics of objects, we need a more comprehensive and flexible approach that affords the modeler the ability to use familiar models such as FSAs, System Dynamics flow graphs <ref> [34, 36] </ref>, compartmental flow models [19] and functional block models [27]. To model a system's dynamics, we need to couple together attributes and methods inside objects rather than the objects themselves. <p> A node is a method of C, and the arc represents a directed connection from one method to another. Both methods can be found in ^ C i . The block model is function-based since functions are made explicit as nodes. Variable-based models such as System Dynamics flow graphs <ref> [36] </ref> or compartmental models [19] are the duals of function-based models since variables are placed at the nodes. For a C with this type of method, the variables are attributes of ^ C i .
Reference: [37] <author> Ronald C. Rosenberg and Dean C. Karnopp. </author> <title> Introduction to Physical System Dynamics. </title> <publisher> McGraw-Hill, </publisher> <year> 1983. </year>
Reference-contexts: Constraint: Constraint models are equational in nature, and reflect non-directional constraints among object attributes. A class C with a constraint equational model contains an equation with terms containing attributes of ^ C i . Equations can be represented in graph form as well as with bond graphs <ref> [5, 37, 44] </ref>. Models of non-directional behavior, such as general hydrodynamic models are constraint-based.
Reference: [38] <author> Jeff Rothenberg. </author> <title> Object-Oriented Simulation: Where do we go from here? Technical report, </title> <publisher> RAND Corporation, </publisher> <month> October </month> <year> 1989. </year>
Reference-contexts: Other more recent simulation thrusts in the object-oriented arena include SCS conferences [35] as well as numerous Winter Simulation Conference sessions over the past ten years. Also, various simulation groups have adopted the general object-oriented perspective <ref> [38, 49, 18, 1] </ref>. Fishwick and Zeigler [12] demonstrate a translation from multimodel to system formalism using DEVS [48] for one particular type of visual multimodel (i.e., finite state automaton (FSA) model controlling a set of ordinary differential equations). For other types of mul-timodels, one can devise additional formalisms [32].
Reference: [39] <author> James Rumbaugh, Michael Blaha, William Premerlani, Eddy Frederick, and William Lorenson. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: be considered one of the pioneering ways in which simulation applied itself to "object-oriented thinking." Simula provided many of the basic primitives for class construction and object oriented principles but was not accompanied by a visually-oriented engineering approach to model building that is found in more recent software engineering texts <ref> [39, 3, 15] </ref>. We find the visual orientation convenient since it represents a natural, and often-used, technique of scientists and engineers. Other more recent simulation thrusts in the object-oriented arena include SCS conferences [35] as well as numerous Winter Simulation Conference sessions over the past ten years.
Reference: [40] <author> Hanan Samet. </author> <title> Applications of Spatial Data Structures: Computer Graphics, Image Processing, and GIS. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year> <month> 22 </month>
Reference-contexts: For modeling geometry and space, there are a number of representational techniques, many of which are discussed by Samet in two volumes <ref> [41, 40] </ref>. We do not create any extensions of static modeling methods. Instead, for our scenario conceptual model in Fig. 1, we discuss our alternatives with an example. In Fig. 1, there are robots r that move over space s. <p> agents) (room,factory floor, terrain) Military plane, squadron air space (Air Force) Ecology individuals, species landscape Materials particles,molecules fluid (air, liquid) Computer chip, module N/A Engineering Quantum wave function wave function Mechanics Meteorology hurricane, tornado atmosphere (finite volumes) of space s and the second model is a Constructive Solid Geometry (CSG) <ref> [41, 40] </ref> model of robot r. The quadtree is composed entirely of objects, which when aggregated, form s. An object can contain its own static models or an attribute called contains that refers to a list structure of robots found in the object.
Reference: [41] <author> Hanan Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: For modeling geometry and space, there are a number of representational techniques, many of which are discussed by Samet in two volumes <ref> [41, 40] </ref>. We do not create any extensions of static modeling methods. Instead, for our scenario conceptual model in Fig. 1, we discuss our alternatives with an example. In Fig. 1, there are robots r that move over space s. <p> agents) (room,factory floor, terrain) Military plane, squadron air space (Air Force) Ecology individuals, species landscape Materials particles,molecules fluid (air, liquid) Computer chip, module N/A Engineering Quantum wave function wave function Mechanics Meteorology hurricane, tornado atmosphere (finite volumes) of space s and the second model is a Constructive Solid Geometry (CSG) <ref> [41, 40] </ref> model of robot r. The quadtree is composed entirely of objects, which when aggregated, form s. An object can contain its own static models or an attribute called contains that refers to a list structure of robots found in the object.
Reference: [42] <author> Lee W. Schruben. </author> <title> Simulation Modeling with Event Graphs. </title> <journal> Communications of the ACM, </journal> <volume> 26(11), </volume> <year> 1983. </year>
Reference-contexts: Two examples involve an FSA and a functional block model. An FSA is defined primarily with states and events, so there is a natural dichotomy when considering that declarative models might be categorically split into state-oriented and event-oriented. The event oriented dual of an FSA is an event graph <ref> [42] </ref>. A functional block model contains functions and arcs. The arcs of primary importance represents state variables. Therefore, we imagine a dichotomy consisting of functional model types which can be placed into one of these two sub-categories.
Reference: [43] <author> D. Stauffer and H. E. Stanley. </author> <title> From Newton to Mandelbrot: A Primer in Theoretical Physics. </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Non-physical objects are called artifacts. A linked-list is an example of an artifact. For simulation, we are primarily interested in physical objects. We utilize a physical metaphor by categorizing our dynamics into categories such as individual object, group of objects, and continuum <ref> [43] </ref>. In physics or mechanics, the taxonomy is oriented toward similar entities such as particle, system of particles and field.
Reference: [44] <author> Jean Thoma. </author> <title> Bond Graphs: Introduction and Application. </title> <publisher> Pergamon Press, </publisher> <year> 1975. </year>
Reference-contexts: Constraint: Constraint models are equational in nature, and reflect non-directional constraints among object attributes. A class C with a constraint equational model contains an equation with terms containing attributes of ^ C i . Equations can be represented in graph form as well as with bond graphs <ref> [5, 37, 44] </ref>. Models of non-directional behavior, such as general hydrodynamic models are constraint-based.
Reference: [45] <author> Patrick Henry Winston and Berthold Klaus Paul Horn. </author> <title> LISP. </title> <publisher> Addison Wesley, </publisher> <address> second edition, </address> <year> 1984. </year>
Reference-contexts: There is often a causal relation associated with a directional flow. The flow has a source, several possible sinks, and contains coupled components through which material flows. Functional languages, often based on the lambda calculus [24, 33], are similar in principle. The languages Lisp <ref> [45] </ref> and ML [29] are two example functional languages. Lisp has some declarative features (i.e., side effects) whereas other functional languages attempt to be "pure." Constraint languages [4, 22] reflect a relatively recent trend for programming where procedures and declarations are insufficient.
Reference: [46] <author> William A. Woods. </author> <title> What's in a Link: Foundations for Semantic Networks. </title> <editor> In Daniel Bobrow and Allan Collins, editors, </editor> <booktitle> Representation and Understanding. </booktitle> <publisher> Academic Press, </publisher> <year> 1975. </year>
Reference-contexts: For physical modeling, our primary type of static model is one that specifies the topology or geometry of a physical object such as r. In this respect, static models are of the sort often found in computer graphics and computer aided design (CAD). However, a semantic net <ref> [46] </ref>, is an equally valid static model. Dynamic models (ref. Sec. 3.2) have the ability to change the structure of static models over time. The previously discussed conceptual model, composed of classes and relations, is seen as dynamically changing with class relations changing over time.
Reference: [47] <author> Bernard P. Zeigler. </author> <title> Theory of Modelling and Simulation. </title> <publisher> John Wiley and Sons, </publisher> <year> 1976. </year>
Reference-contexts: There are internal and external events. An external event is one from "outside the system" whereas an internal event is one "inside the system," but from a lower abstraction level. Further explanation and variations of the system formalism can be found in the systems [28] and simulation <ref> [47] </ref> literature; however, the above definition suffices for our purpose. The first key observation of OOPM is that we are encapsulating behavior (i.e., dynamic models) and structure (i.e., static models) within objects.
Reference: [48] <author> Bernard P. Zeigler. </author> <title> DEVS Representation of Dynamical Systems: Event-Based Intelligent Control. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(1):72 - 80, </volume> <month> January </month> <year> 1989. </year>
Reference-contexts: Also, various simulation groups have adopted the general object-oriented perspective [38, 49, 18, 1]. Fishwick and Zeigler [12] demonstrate a translation from multimodel to system formalism using DEVS <ref> [48] </ref> for one particular type of visual multimodel (i.e., finite state automaton (FSA) model controlling a set of ordinary differential equations). For other types of mul-timodels, one can devise additional formalisms [32].

References-found: 48

