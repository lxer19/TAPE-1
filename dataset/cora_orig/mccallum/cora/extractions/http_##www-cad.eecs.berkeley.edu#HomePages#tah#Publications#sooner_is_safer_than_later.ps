URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/sooner_is_safer_than_later.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/sooner_is_safer_than_later.html
Root-URL: http://www.cs.berkeley.edu
Title: Sooner is Safer than Later  
Author: Thomas A. Henzinger 
Keyword: Safety, liveness, real time, topology, concurrency, semantics.  
Affiliation: Computer Science Department Cornell University  
Abstract: It has been observed repeatedly that the standard safety-liveness classification for properties of reactive systems does not fit for real-time properties. This is because the implicit "liveness" of time shifts the spectrum towards the safety side. While, for example, response | that "something good" will happen eventually | is a classical liveness property, bounded response | that "something good" will happen soon, within a certain amount of time | has many characteristics of safety. We account for this phenomenon formally by defining safety and liveness relative to a given condition, such as the progress of time. 
Abstract-found: 1
Intro-found: 1
Reference: [AD90] <author> Rajeev Alur and David L. Dill. </author> <title> Automata for modeling real-time systems. </title> <booktitle> In 17th International Colloquium on Automata, Languages, and Programming, </booktitle> <pages> pages 322-335. </pages> <note> Springer-Verlag Lecture Notes in Computer Science 443, </note> <year> 1990. </year>
Reference-contexts: So are the timed automata of [LA90], which specify only properties that are safe relative to monotonic divergence. On the other hand, real-time temporal logics such as [AH89, Koy90, Ost90] and the timed automata of <ref> [AD90] </ref> permit, relative to monotonic divergence, incongruous specifications of real-time systems. A machine trying to execute such a specification without look-ahead may find itself in a situation from which time cannot diverge without violating the specification. For nonZeno specifications we can apply Theorem 3.
Reference: [ADS86] <author> Bowen Alpern, Alan J. Demers, and Fred B. Schneider. </author> <title> Safety without stuttering. </title> <journal> Information Processing Letters, </journal> <volume> 23(4) </volume> <pages> 177-180, </pages> <year> 1986. </year>
Reference-contexts: Thus we can formalize safety as follows: fl An extended version of this paper appeared in Information Processing Letters 43, 1992, pp. 135-141. ! is a safety property iff for all 2 ! , whenever every finite prefix of can be extended to a string in , then 2 <ref> [ADS86] </ref>. * A liveness property stipulates that "something good" will happen, eventually, during the execution of a system.
Reference: [AFK88] <author> Krzysztof R. Apt, Nissim Francez, and Shmuel Katz. </author> <title> Appraising fairness in languages for distributed programming. </title> <journal> Distributed Computing, </journal> <volume> 2(4) </volume> <pages> 226-241, </pages> <year> 1988. </year>
Reference-contexts: In other words, the safety part of a congruous specification is complete: the liveness part does not preclude any safe prefixes. A congruous pair ( S ; L ) is called machine closed in [AL88], feasible in <ref> [AFK88] </ref>, and L is called live with respect to S in [DW90]. Theorem 1 (Existence of congruous specifications) Every property has a congruous specification. Proof sketch of Theorem 1 Since safety properties are closed under intersection, we can define the closure of ! as the smallest safety property containing . <p> On the other hand, a machine trying to execute an incongruous specification without look-ahead may "paint itself into a corner" from which no legal continuation is possible <ref> [AFK88] </ref>.
Reference: [AH89] <author> Rajeev Alur and Thomas A. Henzinger. </author> <title> A really temporal logic. </title> <booktitle> In Proceedings of the 30th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 164-169, </pages> <year> 1989. </year>
Reference-contexts: So are the timed automata of [LA90], which specify only properties that are safe relative to monotonic divergence. On the other hand, real-time temporal logics such as <ref> [AH89, Koy90, Ost90] </ref> and the timed automata of [AD90] permit, relative to monotonic divergence, incongruous specifications of real-time systems. A machine trying to execute such a specification without look-ahead may find itself in a situation from which time cannot diverge without violating the specification.
Reference: [AH92] <author> Rajeev Alur and Thomas A. Henzinger. </author> <title> Logics and models of real time: a survey. </title> <booktitle> In Proceedings of the REX Workshop Real-time: Theory in Practice. Springer-Verlag Lecture Notes in Computer Science 600, </booktitle> <year> 1992. </year>
Reference-contexts: Strictly monotonic time is appropriate for the former model, while instantaneous actions are required by the lat ter. (See <ref> [AH92] </ref> for a survey of various models of time that have been proposed for the verification of real-time systems.) Given a particular choice of model, we consider, by definition, only a subset all of timed state sequences as possible behaviors of a real-time system; that is, the specification of a property
Reference: [AL88] <author> Martn Abadi and Leslie Lamport. </author> <title> The existence of refinement map-pings. </title> <booktitle> In Proceedings of the Third Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 165-175. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1988. </year>
Reference-contexts: In other words, the safety part of a congruous specification is complete: the liveness part does not preclude any safe prefixes. A congruous pair ( S ; L ) is called machine closed in <ref> [AL88] </ref>, feasible in [AFK88], and L is called live with respect to S in [DW90]. Theorem 1 (Existence of congruous specifications) Every property has a congruous specification.
Reference: [AL92] <author> Martn Abadi and Leslie Lamport. </author> <title> An old-fashioned recipe for real time. </title> <booktitle> In Proceedings of the REX Workshop Real-time: Theory in Practice. Springer-Verlag Lecture Notes in Computer Science 600, </booktitle> <year> 1992. </year>
Reference-contexts: Specifications that are congruous relative to monotonic divergence are called nonZeno <ref> [AL92] </ref>, because they cannot define Zeno machines that force time to converge. Real-time transition systems [HMP91] and extended state machines [Ost90] are examples of specifications that are nonZeno, and thus operational descriptions of real-time systems.
Reference: [AS85] <author> Bowen Alpern and Fred B. Schneider. </author> <title> Defining liveness. </title> <journal> Information Processing Letters, </journal> <volume> 21(4) </volume> <pages> 181-185, </pages> <year> 1985. </year>
Reference-contexts: Thus we can formalize liveness as follows: ! is a liveness property iff every finite prefix of a string in ! can be extended to a string in <ref> [AS85] </ref>. There is a natural topology on ! | the Cantor topology | in which the safety properties are exactly the closed sets, and the liveness properties are exactly the dense sets. <p> Hence any correctness proof for a reactive system can be decomposed into a safety part and a liveness part. Let us briefly sketch the standard topological construction for showing observation (2) <ref> [AS85] </ref>, because we shall generalize it later. The construction is well-known to prove a strong formulation of the observation that is based on the following definition.
Reference: [DW90] <author> Frank Dederichs and Rainer Weber. </author> <title> Safety and liveness from a methodological point of view. </title> <journal> Information Processing Letters, </journal> <volume> 36(1) </volume> <pages> 25-30, </pages> <year> 1990. </year>
Reference-contexts: In other words, the safety part of a congruous specification is complete: the liveness part does not preclude any safe prefixes. A congruous pair ( S ; L ) is called machine closed in [AL88], feasible in [AFK88], and L is called live with respect to S in <ref> [DW90] </ref>. Theorem 1 (Existence of congruous specifications) Every property has a congruous specification. Proof sketch of Theorem 1 Since safety properties are closed under intersection, we can define the closure of ! as the smallest safety property containing . Given a property , let S be .
Reference: [HMP91] <author> Thomas A. Henzinger, Zohar Manna, and Amir Pnueli. </author> <title> Temporal proof methodologies for real-time systems. </title> <booktitle> In Proceedings of the 18th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 353-366. </pages> <publisher> ACM Press, </publisher> <month> January </month> <year> 1991. </year>
Reference-contexts: Bounded response is the standard example of a real-time property that is unconditionally live and becomes safe under strong enough timing assumptions <ref> [LA90, HMP91, Lam91, Sch91] </ref>. Let p; q 2 and let ffi be a nonnegative real. <p> Specifications that are congruous relative to monotonic divergence are called nonZeno [AL92], because they cannot define Zeno machines that force time to converge. Real-time transition systems <ref> [HMP91] </ref> and extended state machines [Ost90] are examples of specifications that are nonZeno, and thus operational descriptions of real-time systems. So are the timed automata of [LA90], which specify only properties that are safe relative to monotonic divergence. <p> For nonZeno specifications we can apply Theorem 3. If a system is given congruously relative to monotonic divergence, then the bounded-response property ffi p7!q can be verified as the safety property ffi p7!q " time <ref> [HMP91] </ref>. This property states that (1) time does not decrease and (2) whenever i = p, then either j = q and d (t i ; t j ) ffi for some j i or d (t i ; t j ) ffi for all j i. Acknowledgements.
Reference: [Kel55] <author> John L. Kelley. </author> <title> General Topology. </title> <publisher> Springer-Verlag, </publisher> <year> 1955. </year>
Reference-contexts: Thus unconditional safety and liveness are safety and liveness relative to ! . The Cantor topology on ! induces a topological subspace on ! , which is called the relativization of the ! -topology to <ref> [Kel55] </ref>. We show that the properties that are safe relative to are exactly the closed sets of the relative topology, and the properties that are live relative to are exactly the dense sets of the relative topology.
Reference: [Koy90] <author> Ron Koymans. </author> <title> Specifying real-time properties with metric temporal logic. </title> <journal> Journal of Real-time Systems, </journal> <volume> 2 </volume> <pages> 255-299, </pages> <year> 1990. </year>
Reference-contexts: So are the timed automata of [LA90], which specify only properties that are safe relative to monotonic divergence. On the other hand, real-time temporal logics such as <ref> [AH89, Koy90, Ost90] </ref> and the timed automata of [AD90] permit, relative to monotonic divergence, incongruous specifications of real-time systems. A machine trying to execute such a specification without look-ahead may find itself in a situation from which time cannot diverge without violating the specification.
Reference: [LA90] <author> Nancy A. Lynch and Hagit Attiya. </author> <title> Using mappings to prove timing properties. </title> <booktitle> In Proceedings of the Ninth Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 265-280. </pages> <publisher> ACM Press, </publisher> <month> August </month> <year> 1990. </year>
Reference-contexts: Bounded response is the standard example of a real-time property that is unconditionally live and becomes safe under strong enough timing assumptions <ref> [LA90, HMP91, Lam91, Sch91] </ref>. Let p; q 2 and let ffi be a nonnegative real. <p> Real-time transition systems [HMP91] and extended state machines [Ost90] are examples of specifications that are nonZeno, and thus operational descriptions of real-time systems. So are the timed automata of <ref> [LA90] </ref>, which specify only properties that are safe relative to monotonic divergence. On the other hand, real-time temporal logics such as [AH89, Koy90, Ost90] and the timed automata of [AD90] permit, relative to monotonic divergence, incongruous specifications of real-time systems.
Reference: [Lam77] <author> Leslie Lamport. </author> <title> Proving the correctness of multiprocess programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-3(2):125-143, </volume> <year> 1977. </year>
Reference-contexts: It is useful to classify properties of reactive systems into two categories, because they require qualitatively different means for their specification and verification <ref> [Lam77] </ref>: * A safety property stipulates that "nothing bad" will happen, ever, during the execution of a system. If "something bad" were to happen during the execution, it would have to happen within a finite number of states.
Reference: [Lam91] <author> Leslie Lamport. </author> <title> The temporal logic of actions. </title> <type> Technical report, </type> <institution> DEC Systems Research Center, </institution> <month> February </month> <year> 1991. </year>
Reference-contexts: Bounded response is the standard example of a real-time property that is unconditionally live and becomes safe under strong enough timing assumptions <ref> [LA90, HMP91, Lam91, Sch91] </ref>. Let p; q 2 and let ffi be a nonnegative real.
Reference: [Ost90] <author> Jonathan S. Ostroff. </author> <title> Temporal Logic of Real-time Systems. </title> <publisher> Research Studies Press, </publisher> <year> 1990. </year>
Reference-contexts: Specifications that are congruous relative to monotonic divergence are called nonZeno [AL92], because they cannot define Zeno machines that force time to converge. Real-time transition systems [HMP91] and extended state machines <ref> [Ost90] </ref> are examples of specifications that are nonZeno, and thus operational descriptions of real-time systems. So are the timed automata of [LA90], which specify only properties that are safe relative to monotonic divergence. <p> So are the timed automata of [LA90], which specify only properties that are safe relative to monotonic divergence. On the other hand, real-time temporal logics such as <ref> [AH89, Koy90, Ost90] </ref> and the timed automata of [AD90] permit, relative to monotonic divergence, incongruous specifications of real-time systems. A machine trying to execute such a specification without look-ahead may find itself in a situation from which time cannot diverge without violating the specification.
Reference: [Pnu86] <author> Amir Pnueli. </author> <title> Applications of temporal logic to the specification and verification of reactive systems: a survey of current trends. </title> <booktitle> In Current Trends in Concurrency, </booktitle> <pages> pages 510-584. </pages> <note> Springer-Verlag Lecture Notes in Computer Science 224, </note> <year> 1986. </year>
Reference-contexts: Examples of congruous specifications are fair transition systems; examples of formalisms that admit incongruous specifications are temporal logic and finite automata (see <ref> [Pnu86] </ref> and [Tho90] for surveys of these formalisms). 2 2 Relative Safety and Liveness Instead of looking at all strings in ! , it is often useful to have a concept of safety and liveness under the assumption that, a priori, only a certain subset ! of strings are possible behaviors
Reference: [Sch91] <author> Fred B. Schneider, </author> <month> February </month> <year> 1991. </year> <title> Private communication. </title> <type> 10 </type>
Reference-contexts: Bounded response is the standard example of a real-time property that is unconditionally live and becomes safe under strong enough timing assumptions <ref> [LA90, HMP91, Lam91, Sch91] </ref>. Let p; q 2 and let ffi be a nonnegative real.
Reference: [Tho90] <author> Wolfgang Thomas. </author> <title> Automata on infinite objects. </title> <editor> In Jan van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> volume B, </volume> <pages> pages 133-191. </pages> <publisher> Elsevier, </publisher> <year> 1990. </year> <month> 11 </month>
Reference-contexts: Examples of congruous specifications are fair transition systems; examples of formalisms that admit incongruous specifications are temporal logic and finite automata (see [Pnu86] and <ref> [Tho90] </ref> for surveys of these formalisms). 2 2 Relative Safety and Liveness Instead of looking at all strings in ! , it is often useful to have a concept of safety and liveness under the assumption that, a priori, only a certain subset ! of strings are possible behaviors of a
References-found: 19

