URL: http://www.CS.Berkeley.EDU/~tea/exp.ps
Refering-URL: http://www.cs.washington.edu/homes/tom/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Experience with a Distributed File System Implementation  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Anderson, T., Culler, D., Patterson, D., </author> <title> and the NOW team. A Case for NOW (Networks of Workstations). </title> <journal> IEEE Micro (Feb. </journal> <year> 1995), </year> <pages> 54-64. </pages>
Reference-contexts: 1 Introduction The recent emergence of high-performance local area networks [2, 6] and cluster technology <ref> [1, 37] </ref> has resulted in a renewed interest in distributed computation. Relative to the client/server programs of the previous generation, the new peer-to-peer distributed systems enabled by low latency high bandwidth communication are more complex due to their performance, scalability, and availability requirements.
Reference: [2] <author> Anderson, T., Owicki, S., Saxe, J., and Thacker, C. </author> <title> High-Speed Switch Scheduling for Local-Area Networks. </title> <journal> ACM Trans. on Computer Systems 11, </journal> <volume> 4 (Nov. </volume> <year> 1993), </year> <pages> 319-52. </pages>
Reference-contexts: 1 Introduction The recent emergence of high-performance local area networks <ref> [2, 6] </ref> and cluster technology [1, 37] has resulted in a renewed interest in distributed computation. Relative to the client/server programs of the previous generation, the new peer-to-peer distributed systems enabled by low latency high bandwidth communication are more complex due to their performance, scalability, and availability requirements.
Reference: [3] <author> Anderson, T. E., Dahlin, M. D., Neefe, J. M., Patterson, D. A., Roselli, D. S., and Wang, R. Y. </author> <title> Serverless Network File Systems. </title> <booktitle> In Proc. of the 15th ACM Symposium on Operating Systems Principles (De-cember 1995), </booktitle> <pages> pp. 109-126. </pages>
Reference-contexts: This growing complexity has outpaced our understanding of how to engineer these systems. xFS, a network file system described in a previous paper <ref> [3] </ref>, is an example of such a distributed system. It distributes its cache, secondary storage, and metadata management over closely coupled workstations. The decentralized nature of the system, while offering superior performance, scalability, and availability over traditional client/server file systems, is also more complex.
Reference: [4] <author> Birman, K. P., Schiper, A., and Stephenson, P. </author> <title> Light-weight causal and atomic group multicast. </title> <journal> ACM Transactions on Computer Systems 9, </journal> <month> 3 (August </month> <year> 1991), </year> <pages> 272-314. </pages>
Reference-contexts: For example, an xFS manager does not wait until a client completes a forwarding request to continue, so a subsequent invalidate message can potentially reach the same client out of order. Although such ordering can be enforced at the communication layer <ref> [4] </ref>, recent research has argued that this ordering is best expressed with application state [8]. The third difficulty concerns unexpected messages. Even if messages do not get out of order, we might still receive messages that can not be processed right away in the current state.
Reference: [5] <author> Birrell, A. D., and Nelson, B. J. </author> <title> Implementing Remote Procedure Calls. </title> <journal> ACM Transactions on Computer Systems 2, </journal> <month> 1 (February </month> <year> 1984), </year> <pages> 39-59. </pages>
Reference-contexts: We have found, however, that we need an easy-to-use communication interface that can accommodate multi-party communication patterns that are not addressed by either the traditional RPC paradigm <ref> [5] </ref> or the various mul-ticast efforts [21, 28]. This interface should not be built on top of the traditional RPC interface. * Kernel vnode layers have matured enough to support distributed file systems. Our experience again indicates the contrary. <p> Instead of using simple two-party request/reply exchanges, xFS transactions require the cooperation of many machines. RPC communication <ref> [5] </ref> provides an easy-to-understand semantics and has been the tool of choice of many distributed system builders. Our experience in xFS, however, suggests that when we synthesize multi-party communication using RPC, we can not benefit from the advantages that RPC was designed to provide.
Reference: [6] <author> Boden, N., Cohen, D., Felderman, R., Kulawik, A., Seitz, C., Seizovic, J., and Su, W. </author> <month> Myrinet </month> - 
Reference-contexts: 1 Introduction The recent emergence of high-performance local area networks <ref> [2, 6] </ref> and cluster technology [1, 37] has resulted in a renewed interest in distributed computation. Relative to the client/server programs of the previous generation, the new peer-to-peer distributed systems enabled by low latency high bandwidth communication are more complex due to their performance, scalability, and availability requirements.
References-found: 6

