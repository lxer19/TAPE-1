URL: http://www.cs.colorado.edu/~stolle/Model/aaai98pret.ps
Refering-URL: http://www.cs.colorado.edu/~lizb/papers/stolle-aaai98.html
Root-URL: http://www.cs.colorado.edu
Email: fstolle,lizbg@cs.colorado.edu  
Title: Multimodal Reasoning for Automatic Model Construction  
Author: Reinhard Stolle and Elizabeth Bradley 
Address: Boulder, Colorado 80309-0430  
Affiliation: University of Colorado at Boulder Department of Computer Science  
Abstract: This paper describes a program called Pret that automates system identification, the process of finding a dynamical model of a black-box system. Pret performs both structural identification and parameter estimation by integrating several reasoning modes: qualitative reasoning, qualitative simulation, numerical simulation, geometric reasoning, constraint reasoning, resolution, reasoning with abstraction levels, declarative meta-level control, and a simple form of truth maintenance. Unlike other modeling programs that map structural or functional descriptions to model fragments, Pret combines hypotheses about the mathematics involved into candidate models that are intelligently tested against observations about the target system. We give two examples of system identification tasks that this automated modeling tool has successfully performed. The first, a simple linear system, was chosen because it facilitates a brief and clear presentation of Pret's features and reasoning techniques. In the second example, a difficult real-world modeling task, we show how Pret models a radio-controlled car used in the University of British Columbia's soccer-playing robot project. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Addanki, S.; Cremonini, R.; and Penberthy, J. S. </author> <year> 1991. </year> <title> Graphs of models. </title> <journal> Artif. Intell. </journal> <volume> 51 </volume> <pages> 145-177. </pages>
Reference-contexts: Since the state of Pret's inference engine is represented explicitly, it is trivial to generate explanations (proof trees) for failures of models. These explanations can then be used to guide the generation of better models. In the literature this approach has been termed discrepancy-driven refinement (e.g., <ref> (Addanki, Cremonini, & Penberthy 1991) </ref>). 6 Several algebraic operations call Maple; interaction with this package is realized through file I/O which can, in sum, take longer than a second. In principle, however, Scheme could communicate with Maple without file I/O, or the algebraic operations could be implemented in Scheme directly.
Reference: <author> Amsterdam, J. </author> <year> 1992. </year> <title> Automated Qualitative Modeling of Dynamic Physical Systems. </title> <type> Ph.D. Dissertation, </type> <institution> MIT. </institution>
Reference-contexts: Other existing modeling tools use energy-based approaches and/or bond graphs (Karnopp & Rosenberg 1975) to find structural models <ref> (Amsterdam 1992) </ref>. This approach may be useful in our case: typical bond graphs and bond graph fragments may help select terms from a large number of hypotheses. It is not clear, however, how similarity of system behavior (the solution of an ODE) translates to similarity of the involved model fragments.
Reference: <author> Astrom, K. J., and Eykhoff, P. </author> <year> 1971. </year> <title> System identification | a survey. </title> <type> Automatica 7 </type> <pages> 123-167. </pages>
Reference: <author> Beckstein, C., and Tobermann, G. </author> <year> 1992. </year> <title> Evolutionary logic programming with RISC. </title> <booktitle> In 4th Intl. Workshop on Logic Programming Environments. </booktitle>
Reference-contexts: Every time the reasoning proceeds to a less-abstract level, Pret needs all information that has already been derived at the more abstract level. To avoid duplication of effort, Pret stores this information rather than rederiving it. The user declares a number of predicates as relevant <ref> (Beckstein & Tobermann 1992) </ref> which causes all succeeding subgoals with this predicate to be stored for later reuse. 4 Currently, Pret recognizes special cases and generalizations of previously proved formulae, but it maintains no contexts or labels for intermediate results.
Reference: <author> Beckstein, C.; Stolle, R.; and Tobermann, G. </author> <year> 1996. </year> <title> Meta-programming for generalized horn clause logic. </title> <booktitle> In META-96. </booktitle>
Reference: <author> Bradley, E., and Easley, M. </author> <year> 1998. </year> <title> Reasoning about sensor data for automated system identification. Intelligent Data Analysis. </title> <note> In press. Also in IDA-97. </note>
Reference-contexts: For example, an observation might inform Pret that the system to be modeled is autonomous; another observation could state that the state variable q oscillates and that this oscillation is damped. Observations can also be physical measurements made directly and automatically on the system <ref> (Bradley & Easley 1998) </ref>. Hypotheses about the physics involved, e.g., a hypothesis about friction, are supplied to Pret by the user; these may conflict and need not be mutually exclusive, whereas observations are always held to be true. <p> In order to achieve this behavior, Pret processes the observations|curve fitting, recognition of linear regions, and so on|using Maple functions and simple phase-portrait analysis techniques, both of which yield high-level results that can then be used much as qualitative observations are <ref> (Bradley & Easley 1998) </ref>. Qualitative Simulation Before Pret resorts to the numerical level, it attempts to establish contradictions quickly and cheaply by reasoning about the qualitative states of the physical system (Kuipers 1992). Pret's qualitative envisioning module constrains the possible ranges of parameters in the candidate model. <p> Therefore, Pret's meta control predicate hot is used in this example to prioritize a stability check in the case where this check is cheap and easy|i.e., if the system is known to be linear. For a more detailed discussion of Pret's meta control constructs, see <ref> (Hogan, Stolle, & Bradley 1998) </ref>. Reasoning at Different Abstraction Levels Every rule in the ODE theory is assigned a natural number that indicates its level of abstraction: the lower the abstraction level number , the more abstract the rule.
Reference: <author> Bradley, E., and Stolle, R. </author> <year> 1996. </year> <title> Automatic construction of accurate models of physical systems. </title> <journal> Annals of Mathematics and Artif. Intell. </journal> <volume> 17 </volume> <pages> 1-28. </pages>
Reference-contexts: In the second system identification stage, parameter estimation, the parameter values a and b are determined. The program Pret <ref> (Bradley & Stolle 1996) </ref> automates both stages of the system identification process; it finds a system of ODEs that models a given physical system. Inputs are observations about that system, user-supplied hypotheses about the desired model, and specifications. <p> The special predicate scheme-eval provides the link between the inference engine and Pret's model observer functions. It also provides the link to all modules that implement other reasoning modes. For a more detailed discussion of Pret's logic system, see <ref> (Stolle & Bradley 1996) </ref>. Declarative Meta Level Control The control strategy of a SLD resolution theorem prover is defined by the function that selects the literal that is resolved and by the function that chooses the resolving clause.
Reference: <author> Bradley, E.; O'Gallagher, A.; and Rogers, J. </author> <year> 1997. </year> <title> Global solutions for nonlinear systems using qualitative reasoning. </title> <booktitle> In QR-97. </booktitle>
Reference: <author> Capelo, A. C.; Ironi, L.; and Tentoni, S. </author> <year> 1996. </year> <title> The need for qualitative reasoning in automated modeling: A case study. </title> <booktitle> In QR-96. </booktitle>
Reference-contexts: We are investigating techniques for reasoning about more-general expressions, e.g., (Faltings & Gelle 1997). For example, if the candidate model 1 How to use qualitative reasoning (QR) to navigate in the parameter space for models of one particular class of linear systems is exemplified in <ref> (Capelo, Ironi, & Tentoni 1996) </ref>. x + a _x 4 + b _x 2 = 0 is to match a conservative observa-tion, the coefficients a and b must take on values such that the divergence 4a _x 3 2b _x is zero, below a certain resolution threshold, for the specified range
Reference: <author> Davis, R. </author> <year> 1980. </year> <title> Meta-rules: Reasoning about control. </title> <booktitle> Artif. Intell. </booktitle> <pages> 15(3). </pages>
Reference: <author> Falkenhainer, B., and Forbus, K. D. </author> <year> 1991. </year> <title> Compositional modeling: Finding the right model for the job. </title> <journal> Artif. Intell. </journal> <volume> 51 </volume> <pages> 95-143. </pages>
Reference: <author> Faltings, B., and Gelle, E. </author> <year> 1997. </year> <title> Local consistency for ternary numeric constraints. </title> <booktitle> In IJCAI-97. </booktitle>
Reference-contexts: Pret uses expression inference to merge and simplify such constraints. However, this approach works only for linear and quadratic expressions and some special cases of higher order. We are investigating techniques for reasoning about more-general expressions, e.g., <ref> (Faltings & Gelle 1997) </ref>.
Reference: <author> Forbus, K. D. </author> <year> 1984. </year> <title> Qualitative process theory. </title> <journal> Artif. Intell. </journal> <volume> 24 </volume> <pages> 85-168. </pages>
Reference-contexts: In general, modeling underlies most approaches to reasoning about physical systems. Strictly speaking, every formalization of the properties of a physical system constitutes a model of that system. The spectrum of models ranges from those that use a language that is very close to the physics (e.g., QPT/QPE <ref> (Forbus 1984) </ref>) to models that use a language that is well suited to describe the system mathematically (e.g., ODEs). QSIM (Kuipers 1986) is a qualitative realization of the mathematics end of this spectrum. Pret resides somewhere in the middle.
Reference: <author> Gabbay, D. M., and Sergot, M. J. </author> <year> 1986. </year> <title> Negation as inconsistency I. </title> <journal> J. Logic Progr. </journal> <volume> 3(1) </volume> <pages> 1-36. </pages>
Reference: <author> Gallaire, H., and Lasserre, C. </author> <year> 1979. </year> <title> Controlling knowledge deduction in a declarative approach. </title> <booktitle> In IJCAI-79. </booktitle>
Reference: <author> Gallaire, H., and Lasserre, C. </author> <year> 1982. </year> <title> Metalevel control for logic programs. </title> <editor> In Clark, K., and Tarnlund, S., eds., </editor> <booktitle> Logic Programming. </booktitle> <address> London: </address> <publisher> Academic Press. </publisher>
Reference: <author> Ginsberg, M., and Geddis, D. </author> <year> 1991. </year> <title> Is there any need for domain-dependent control information? In AAAI-91. </title>
Reference: <author> Hogan, A.; Stolle, R.; and Bradley, E. </author> <year> 1998. </year> <title> Putting declarative meta control to work. </title> <type> Technical Report CU-CS-856-98, </type> <institution> University of Colorado at Boulder. </institution>
Reference-contexts: Therefore, Pret's meta control predicate hot is used in this example to prioritize a stability check in the case where this check is cheap and easy|i.e., if the system is known to be linear. For a more detailed discussion of Pret's meta control constructs, see <ref> (Hogan, Stolle, & Bradley 1998) </ref>. Reasoning at Different Abstraction Levels Every rule in the ODE theory is assigned a natural number that indicates its level of abstraction: the lower the abstraction level number , the more abstract the rule.
Reference: <author> Karnopp, D., and Rosenberg, R. </author> <year> 1975. </year> <title> System Dynamics: A Unified Approach. </title> <address> New York: </address> <publisher> John Wiley & Sons. </publisher>
Reference-contexts: Hypotheses could be explicitly prioritized by the user, for instance, or Pret could use case-based reasoning and a repertoire of typical hypothesis combinations (e.g., cori-olis and centripetal forces usually appear together, and both have recognizable forms). Other existing modeling tools use energy-based approaches and/or bond graphs <ref> (Karnopp & Rosenberg 1975) </ref> to find structural models (Amsterdam 1992). This approach may be useful in our case: typical bond graphs and bond graph fragments may help select terms from a large number of hypotheses.
Reference: <author> Kay, H., and Kuipers, B. </author> <year> 1993. </year> <title> Numerical behavior envelopes for qualitative models. </title> <booktitle> In AAAI-93. </booktitle>
Reference: <author> Kuipers, B. J. </author> <year> 1986. </year> <title> Qualitative simulation. </title> <journal> Artif. Intell. </journal> <volume> 29(3) </volume> <pages> 289-338. </pages>
Reference-contexts: Currently, the qualitative states contain only sign information (; 0; +). For example, for the model ax + by = 0 the state (x; y) = (+; +) constrains (a; b) to the possibilities (+; ) or (0; 0) or (; +). Pret does not do full qualitative simulation <ref> (Kuipers 1986) </ref>. Instead, it only envisions the state space of all possible combinations of qualitative values of state variables and parameters. This strategy is faster than full qualitative simulation, but it is also less accurate; it may let invalid models pass the test. <p> The spectrum of models ranges from those that use a language that is very close to the physics (e.g., QPT/QPE (Forbus 1984)) to models that use a language that is well suited to describe the system mathematically (e.g., ODEs). QSIM <ref> (Kuipers 1986) </ref> is a qualitative realization of the mathematics end of this spectrum. Pret resides somewhere in the middle. Its inputs are partially expressed in terms of physics and its reasoning uses concepts from physics. However, its output|the model of the physical system that it constructs|is purely mathematical: an ODE.
Reference: <author> Kuipers, B. J. </author> <year> 1992. </year> <title> Qualitative Reasoning: Modeling and Simulation with incomplete knowledge. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: Pret's QR features are not only important for accelerating the search for inconsistencies between the physical system and the model; they also allow the user to express incomplete information <ref> (Kuipers 1992) </ref>. For example, the user might not know the exact value of a friction coefficient, but he or she might know that it is constant and positive. This example also shows the importance and power of interaction among the various reasoning modes. <p> Qualitative Simulation Before Pret resorts to the numerical level, it attempts to establish contradictions quickly and cheaply by reasoning about the qualitative states of the physical system <ref> (Kuipers 1992) </ref>. Pret's qualitative envisioning module constrains the possible ranges of parameters in the candidate model. If the constraints become inconsistent|i.e., the range of a parameter becomes the empty set|the model is ruled out. Currently, the qualitative states contain only sign information (; 0; +).
Reference: <author> Kuipers, B. J. </author> <year> 1993. </year> <title> Reasoning with qualitative models. </title> <journal> Artif. Intell. </journal> <volume> 59 </volume> <pages> 125-132. </pages>
Reference: <author> Langley, P.; Simon, H. A.; Bradshaw, G. L.; and Zytkow, J. M., eds. </author> <year> 1987. </year> <title> Scientific Discovery: Computational Explorations of the Creative Process. </title> <address> Cam-bridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Also, Pret's aim is not to discover the underlying physics of the system, but rather to find the simplest ODE that is consistent with the observed behavior. We emphasize, once again, that Pret is not a scientific discovery program <ref> (Langley et al. 1987) </ref> whose goal is to discover new physical phenomena; it is an engineering tool that identifies (already understood) phenomena and models them.
Reference: <author> Ljung, L., ed. </author> <year> 1987. </year> <title> System Identification; Theory for the User. </title> <address> Englewood Cliffs, N.J.: </address> <publisher> Prentice-Hall. </publisher>
Reference: <author> McCarty, L. T. </author> <year> 1988. </year> <title> Clausal intuitionistic logic I. Fixed-point semantics. </title> <journal> J. of Logic Progr. </journal> <volume> 5 </volume> <pages> 1-31. </pages>
Reference-contexts: SLD-based resolution Pret's search for an inconsistency between the observations and a particular candidate model is based on SLD resolution. The language in which observations and the ODE theory are expressed is that of generalized Horn clause intuitionistic logic (GHCIL) <ref> (McCarty 1988) </ref>. Roughly, GHCIL clauses are Horn clauses that also allow embedded implications in their bodies. The special atomic formula falsum may only appear as the head of a clause. Such clauses express fundamental reasons for inconsistencies, e.g., that a system cannot be oscillating and non-oscillating at the same time.
Reference: <author> Minton, S. </author> <year> 1996. </year> <title> Is there any need for domain-dependent control information? A reply. </title> <booktitle> In AAAI-96. </booktitle>
Reference-contexts: While this elegant result is true for logic programming in general, our particular project (and others as well, e.g., <ref> (Minton 1996) </ref>) suggested a different approach. Having to think about control in terms of the structure of the search space is exactly what we want to avoid.
Reference: <author> Mosterman, P. J., and Biswas, G. </author> <year> 1996. </year> <title> A formal hybrid modeling scheme for handling discontinuities in physical system models. </title> <booktitle> In AAAI-96. </booktitle>
Reference-contexts: Pret is not designed to work with PDEs, but it can produce useful ODE truncations of PDE-governed systems, thus automating another hard and useful part of the modeling art. ample, <ref> (Mosterman & Biswas 1996) </ref>. Pret models the continuous sections between discontinuities. Most automated modeling programs (Forbus 1984; Addanki, Cremonini, & Penberthy 1991; Falkenhainer & Forbus 1991; Amsterdam 1992; Kuipers 1993; Nayak 1995) use domain knowledge in order to map a structural description of the system to model fragments.
Reference: <author> Munker, B.; Hellinger, S.; Schaich, D.; and King, R. </author> <year> 1997. </year> <title> Application of QR techniques within an integrated tool for automated modelling of chemical reaction systems. </title> <booktitle> In QR-97. </booktitle>
Reference-contexts: The implementer of the knowledge base should instead approach it from the viewpoint of his/her domain|in our case as an engineer: which rules are more abstract than others, which rules or goals trigger expensive calls to other packages, and so on. 8 In <ref> (Munker et al. 1997) </ref>, chemical processes are modeled using a Pret-like approach. Conclusion System identification (SID) is a necessary first step in many control-theory problems; without a reasonable model of the dynamics, very few systems admit any form of control.
Reference: <author> Nayak, P. </author> <year> 1995. </year> <title> Automated Modeling of Physical Systems. </title> <publisher> Berlin: Springer. LNCS 1003. </publisher>
Reference: <author> Stolle, R., and Bradley, E. </author> <year> 1996. </year> <title> A customized logic paradigm for reasoning about models. </title> <booktitle> In QR-96. </booktitle>
Reference-contexts: In the second system identification stage, parameter estimation, the parameter values a and b are determined. The program Pret <ref> (Bradley & Stolle 1996) </ref> automates both stages of the system identification process; it finds a system of ODEs that models a given physical system. Inputs are observations about that system, user-supplied hypotheses about the desired model, and specifications. <p> The special predicate scheme-eval provides the link between the inference engine and Pret's model observer functions. It also provides the link to all modules that implement other reasoning modes. For a more detailed discussion of Pret's logic system, see <ref> (Stolle & Bradley 1996) </ref>. Declarative Meta Level Control The control strategy of a SLD resolution theorem prover is defined by the function that selects the literal that is resolved and by the function that chooses the resolving clause.
Reference: <author> Williams, B. C. </author> <year> 1991. </year> <title> A theory of interactions: unifying qualitative and quantitative algebraic reasoning. </title> <journal> Artif. Intell. </journal> <volume> 51 </volume> <pages> 39-94. </pages>
References-found: 32

