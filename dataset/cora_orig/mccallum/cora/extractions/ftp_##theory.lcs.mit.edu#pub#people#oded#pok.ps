URL: ftp://theory.lcs.mit.edu/pub/people/oded/pok.ps
Refering-URL: http://theory.lcs.mit.edu/~oded/zk.html
Root-URL: 
Email: e-mail: mihir@watson.ibm.com  e-mail: oded@cs.technion.ac.il.  
Title: On Defining Proofs of Knowledge  
Author: Mihir Bellare Oded Goldreich 
Address: PO Box 704, Yorktown Heights, NY 10598, USA.  Israel.  
Affiliation: IBM T.J. Watson Research Center,  Computer Science Department, Technion, Haifa,  
Date: August 26, 1992  
Note: Appears in Proceedings of CRYPTO 92.  High Performance Computing and Communications,  Research was par tially supported by grant No. 89-00312 from the US-Israel Binational Science Foundation (BSF), Jerusalem, Israel.  
Abstract: The notion of a "proof of knowledge," suggested by Goldwasser, Micali and Rackoff, has been used in many works as a tool for the construction of cryptographic protocols and other schemes. Yet the commonly cited formalizations of this notion are unsatisfactory and in particular inadequate for some of the applications in which they are used. Consequently, new researchers keep getting misled by existing literature. The purpose of this paper is to indicate the source of these problems and suggest a definition which resolves them. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Beaver, and J. Feigenbaum, </author> <title> "Hiding Instances in Multioracle Queries," </title> <booktitle> Proc. of the 7th STACS, </booktitle> <year> 1990, </year> <pages> pp. 37-48. </pages>
Reference-contexts: We note that in applications (x) is small, and often it is zero (cf. x4.4 and x5). The precise definition follows. Definition 3.1 (System of proofs of knowledge) Let R be a binary relation, and : f0; 1g fl ! <ref> [0; 1] </ref>. Let V be an interactive function which is computable in probabilistic, polynomial time. <p> However, whereas originally the extractor had expected time proportional to 1=(p (x) (x)), we now give it only expected polynomial time. More precisely, letting : f0; 1g fl 7! <ref> [0; 1] </ref>, we have the following. * New validity (with error ): We say that the verifier V satisfies new validity with error if there exists a probabilistic expected polynomial-time oracle machine K such that for every interactive function P and every x 2 L R it is the case that <p> The c i;j 's are polynomials each of total degree at most 2 (i 1) &lt; 2t 1, and we are interested in the values of c i;j ( 1 ; :::; i1 ). Using the ideas of <ref> [1] </ref> these values can be found via "interpolation" at 2t uniformly selected (yet dependent) points.
Reference: [2] <author> M. Bellare, S. Micali and R. Ostrovsky, </author> <title> "The True Complexity of Statistical Zero-Knowledge," </title> <booktitle> Proceedings of the 22nd Annual ACM Symposium on the Theory of Computing, ACM (1990), </booktitle> <pages> pp. 494-502. </pages>
Reference-contexts: both of the verifier and of the prover (meeting the completeness condition) is preserved (and so are zero-knowledge properties). 7 In this context we note, however, that the zero-knowledge too may be preserved, as long as one is willing to make a complexity assumption, by further applying the transformation of <ref> [2] </ref>. 12 4.7 A word about computationally convincing proofs of knowledge Some works (cf. [4, 5]) consider the situation in which the class of provers for which the protocol is supposed to be a "proof of knowledge" is restricted to the class of probabilistic, polynomial time interactive Turing machines with auxiliary
Reference: [3] <author> G. Brassard, D. Chaum, and C. Crepeau, </author> <title> "Minimum Disclosure Proofs of knowledge," </title> <journal> JCSS, </journal> <volume> Vol. 37, No. 2, </volume> <year> 1988, </year> <pages> pp. 156-189. </pages>
Reference-contexts: This is the case of computationally convincing (zero-knowledge) proofs, also known as arguments (cf. <ref> [3] </ref>). Our definitions may be adapted to cover such settings as well. We would restrict the class of provers for which validity is required to hold to the class of interactive functions computable in probabilistic, polynomial time by interactive machines.
Reference: [4] <author> J. Boyar, C. Lund and R. Peralta, </author> <title> "On the Communication Complexity of Zero-Knowledge Proofs." </title> <year> 1989. </year>
Reference-contexts: (and so are zero-knowledge properties). 7 In this context we note, however, that the zero-knowledge too may be preserved, as long as one is willing to make a complexity assumption, by further applying the transformation of [2]. 12 4.7 A word about computationally convincing proofs of knowledge Some works (cf. <ref> [4, 5] </ref>) consider the situation in which the class of provers for which the protocol is supposed to be a "proof of knowledge" is restricted to the class of probabilistic, polynomial time interactive Turing machines with auxiliary input. 8 Typically, the protocols in question rely on the use of problems which
Reference: [5] <author> G. Brassard, C. Crepeau, S. Laplante and C. Leger, </author> <title> "Computationally Convincing Proofs of Knowledge," </title> <booktitle> Proc. of the 8th STACS, </booktitle> <year> 1991. </year>
Reference-contexts: Such applications are better modeled by our definition than by previous ones. 5 Although the ideas in <ref> [5] </ref> may be interpreted as pointing to a similar notion. 11 To be concrete, consider the following identification scheme based on the hardness of quadratic residuosity. Example. <p> (and so are zero-knowledge properties). 7 In this context we note, however, that the zero-knowledge too may be preserved, as long as one is willing to make a complexity assumption, by further applying the transformation of [2]. 12 4.7 A word about computationally convincing proofs of knowledge Some works (cf. <ref> [4, 5] </ref>) consider the situation in which the class of provers for which the protocol is supposed to be a "proof of knowledge" is restricted to the class of probabilistic, polynomial time interactive Turing machines with auxiliary input. 8 Typically, the protocols in question rely on the use of problems which <p> Some ideas on the subject of "computationally convincing proofs of knowledge" appear in the work of Brassard, Crepeau, Laplante and Leger <ref> [5] </ref>. Although they do not present definitions, it would appear these ideas bear many similarities to ours. We discuss their work in Appendix A.
Reference: [6] <author> U. Feige, A. Fiat, and A. Shamir, </author> <title> "Zero-Knowledge Proofs of Identity", </title> <journal> Journal of Cryptology, </journal> <volume> Vol. 1, </volume> <year> 1988, </year> <pages> pp. 77-94. </pages>
Reference-contexts: This fundamental work, though containing intuition and clues towards a definition of the notion of a "proof of knowledge," does not provide a formal definition of it. Furthermore, in our opinion, the commonly cited formal definitions, namely those of Feige, Fiat and Shamir <ref> [6] </ref> and Tompa and Woll [18], are not satisfactory, and, in particular, inadequate for some of the applications in which they have been used. The purpose of this paper is two-fold. <p> We then propose a definition which we feel remedies these defects and also has other advantages. We note that a definition which is much better than those of <ref> [6, 18] </ref> has appeared in the work of Feige and Shamir [7], but the community seems unaware of the fact that the definition in [7] is fundamentally different from, and preferable to, the one in [6] (in particular, this fact is not stated in [7]). <p> We note that a definition which is much better than those of [6, 18] has appeared in the work of Feige and Shamir [7], but the community seems unaware of the fact that the definition in [7] is fundamentally different from, and preferable to, the one in <ref> [6] </ref> (in particular, this fact is not stated in [7]). The definition we present differs in many ways from that of [7] which we feel still has some conceptual problems. <p> Yet both have in common the attempt to capture provers who convince with probabilities that are not non-negligible, thereby correctly addressing what we believe is one of the main flaws in the definitions of <ref> [6, 18] </ref>. Among the novel features of our new definition is that it allows us also to talk of the knowledge of machines which operate in super-polynomial-time. <p> Indeed, this is exactly the interpretation given in works as <ref> [18, 6] </ref>. The problem is to deal with the general case in which the prover may convince the verifier with some probability * &lt; 1. <p> But what should be required if the prover does not convince the verifier with non-negligible probability ? Most previous formulations (e.g., <ref> [18, 6] </ref>) require nothing, and hence are unsatisfactory both from a conceptual point of view and from a practical point of view (i.e., in view of many known applications). In particular, this inadequacy often appears when "proofs of knowledge" are used as subprotocols inside larger protocols. <p> One should not make the mistake of saying that events which happen with probability that is not non-negligible can be ignored, since such probabilities are not negligible! Put in other words, negligible is not the negation of non-negligible! To avoid confusion we stress that the definitions of <ref> [6] </ref> do suffice for the applications in their paper. <p> Clearly, if the verifier accepts with non-negligible probability then the knowledge extractor runs in average polynomial in jxj time. This conclusion yields essentially what <ref> [6, 18] </ref> have considered as sufficient. Yet, as we have argued, this conclusion by itself does not suffice. 4.2 The efficiency of the provers and verifier For the purpose of defining proofs of knowledge, there is no need to restrict the prover to polynomial-time.
Reference: [7] <author> U. Feige, and A. Shamir, </author> <title> "Witness Indistinguishability and Witness Hiding Protocols," </title> <booktitle> Proceedings of the 22nd Annual ACM Symposium on the Theory of Computing, ACM (1990), </booktitle> <pages> pp 416-426. </pages>
Reference-contexts: We then propose a definition which we feel remedies these defects and also has other advantages. We note that a definition which is much better than those of [6, 18] has appeared in the work of Feige and Shamir <ref> [7] </ref>, but the community seems unaware of the fact that the definition in [7] is fundamentally different from, and preferable to, the one in [6] (in particular, this fact is not stated in [7]). The definition we present differs in many ways from that of [7] which we feel still has <p> We note that a definition which is much better than those of [6, 18] has appeared in the work of Feige and Shamir <ref> [7] </ref>, but the community seems unaware of the fact that the definition in [7] is fundamentally different from, and preferable to, the one in [6] (in particular, this fact is not stated in [7]). The definition we present differs in many ways from that of [7] which we feel still has some conceptual problems. <p> is much better than those of [6, 18] has appeared in the work of Feige and Shamir <ref> [7] </ref>, but the community seems unaware of the fact that the definition in [7] is fundamentally different from, and preferable to, the one in [6] (in particular, this fact is not stated in [7]). The definition we present differs in many ways from that of [7] which we feel still has some conceptual problems. <p> work of Feige and Shamir <ref> [7] </ref>, but the community seems unaware of the fact that the definition in [7] is fundamentally different from, and preferable to, the one in [6] (in particular, this fact is not stated in [7]). The definition we present differs in many ways from that of [7] which we feel still has some conceptual problems. Yet both have in common the attempt to capture provers who convince with probabilities that are not non-negligible, thereby correctly addressing what we believe is one of the main flaws in the definitions of [6, 18]. <p> Problems (as illustrated above) have arisen when these same definitions have (later) been used in other applications. 1.3 A few words about the definition presented in this paper The most important aspect in which our definition (as well as the one of <ref> [7] </ref>) deviates from the previous ones is that there is no sharp distinction between provers based on whether they convince the verifier with non-negligible probability or not. <p> Over and above this change, we have taken the opportunity to correct what we feel are other conceptual drawbacks of previous definitions (including <ref> [7] </ref>). Although these other changes are to some extent a matter of taste they are nonetheless important, and also enable us to obtain definitions that are more general than previous ones. <p> In applications, (x) could be set to 1=poly (x) for some specific poly (). Alternatively, following <ref> [7] </ref>, one can use () as a shorthand for "smaller than any function of the form 1=poly ()". <p> Many proofs of knowledge (e.g., the one presented in Appendix E) are of this type. 6 An equivalent formulation of validity Following is an equivalent formulation of the validity condition. The new formulation is inspired by (yet is quite different in many respects from) the definition in <ref> [7] </ref>. Let p (x) be as in Definition 3.1. <p> Otherwise, K 0 halts immediately outputting ?. One can easily verify that K 0 runs in expected polynomial-time and outputs y 2 R (x) with probability exactly Pr [tr P;V (x) 2 ACC V (x)]. 14 7 Applications Our formalization, as well as that of <ref> [7] </ref>, do suffice to prove the security of those schemes for encryption secure against chosen-cyphertext attack which rely on zero-knowledge proofs of knowledge (cf. x1.2). However, we prefer to describe here two applications to which our definition of "proof of knowledge" can be applied, whereas all the previous formalizations fail. <p> Nevertheless, this subprotocol is "witness indistinguishable" (in the sense defined latter by Feige and Shamir <ref> [7] </ref>) and this property suffices to the soundness of the interactive proof of GNI. However this entire issue is irrelevant to the current paper. The other definition that was lacking at that time was an adequate definition of a proof of knowledge.
Reference: [8] <author> Z. Galil, S. Haber, and M. Yung, </author> <title> "Symmetric Public-Key Encryption", </title> <booktitle> Advances in Cryptology - Crypto85 proceedings, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 218, </volume> <publisher> Springer-Verlag, </publisher> <year> 1986, </year> <pages> pp. 128-137. </pages>
Reference-contexts: It has been suggested to use a "proof of knowledge" as a subprotocol inside a multi-round encryption scheme secure against chosen ciphertext attack (cf. <ref> [8, Sec. 5] </ref> and [15, Sec. 5.4]). Namely, the decryption module returns a decryption of a chosen ciphertext only if "convinced" that the party asking for it already "knows it". (This is a special case of the application considered in the previous paragraph).
Reference: [9] <author> M. Furer, O. Goldreich, Y. Mansour, M. Sipser, and S. Zachos, </author> <title> "On Completeness and Soundness in Interactive Proof Systems", </title> <booktitle> Advances in Computing Research: a research annual, </booktitle> <volume> Vol. 5 (S. </volume> <pages> Micali, </pages> <publisher> ed.), </publisher> <pages> pp. 429-442, </pages> <year> 1989. </year>
Reference-contexts: As far as polynomial-time (or even more powerful) verifiers are concerned any choice of a polynomial-time constructible bound, C (), which is both non-negligibly greater than () and bounded above by 1 2 poly () , is equivalent. 6 In fact, following the ideas in <ref> [9] </ref>, one can eliminate the error probability in the completeness condition altogether and derive the definition as in the previous section.
Reference: [10] <author> O. Goldreich, </author> <title> "A Uniform-Complexity Treatment of Encryption and Zero-Knowledge", </title> <journal> J. of Cryptology, </journal> <note> to appear. </note>
Reference-contexts: However, the quantifiers may be switched if one considers only provers which are (uniform) interactive machines. For further discussion see the parenthetical subsection in <ref> [10, Sec. 4.1] </ref>, which considers an analogous situation in the context of zero-knowledge. We stress that also in case the quantifiers are switched, the knowledge extractor (although it may depend on the prover) must be given oracle access to the prover.
Reference: [11] <author> O. Goldreich, and H. Krawczyk, </author> <title> "On Sequential and Parallel Composition of Zero-Knowledge Protocols", </title> <booktitle> 17th ICALP, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 443, </volume> <publisher> Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 268-282. </pages>
Reference-contexts: Specifically, that subprotocol, which consists of the parallel version of the zero-knowledge proof of Graph Isomorphism, is not known to be zero-knowledge (and in light of <ref> [11] </ref> it is unlikely that a proof that it is zero-knowledge can ever be given). Nevertheless, this subprotocol is "witness indistinguishable" (in the sense defined latter by Feige and Shamir [7]) and this property suffices to the soundness of the interactive proof of GNI.
Reference: [12] <author> O. Goldreich, S. Micali, and A. Wigderson, </author> <title> "Proofs that Yields Nothing but Their Validity or All Languages in NP Have Zero-Knowledge Proof Systems", </title> <journal> JACM, </journal> <volume> Vol. 38, No. 1, </volume> <month> July </month> <year> 1991. </year>
Reference-contexts: hand, one cannot ignore the case in which something is sent by Alice since this case is not negligible. 5 interactive proofs introduced by Shamir [17], in order to demonstrate that IP=PSPACE, constitute "proofs of knowledge." Most proofs of knowledge (e.g., the proof of knowledge of an isomorphism used by <ref> [12] </ref> see Appendix E) are constructed by iterating some "atomic" protocol. Typically, these atomic protocols have the property that one can easily lead the verifier to accept with some constant probability (say, 1=2) even when having no "knowledge" whatsoever. <p> A typical example is the zero-knowledge protocol for graph non-isomorphism of <ref> [12] </ref> (cf. x7.1). We stress that none of the previous definitions could handle "proofs of knowledge with zero error." 1.4 Organization The main conventions used throughout the paper appear in x2. <p> One the other hand, provers which succeed 9 in convincing a verifier of their knowledge can be reasonably efficient. For example, they may be implemented by polynomial-time programs. Furthermore, all "reasonable" interactive proofs for languages in NP (and in particular the zero-knowledge ones <ref> [12] </ref>) can be convinced by probabilistic polynomial-time provers which get an NP-witness as auxiliary input. (However, membership in an NP language can be proven via Shamir's result that IP = PSPACE. The corresponding prover is unlikely to be implementable in polynomial-time). <p> Note that we do not ask that the verifier be a probabilistic polynomial time interactive Turing machine, but just that it be an interactive function computable by one. This distinction is conceptually useful when we consider applications such as the graph non-isomorphism protocol <ref> [12] </ref> in which the verifier (of the proof of knowledge) is the prover of the graph non-isomorphism protocol, and thus not a probabilistic polynomial time interactive Turing machine. <p> Typically, "proofs of knowledge" are constructed by repeating an "atomic" protocol sufficiently many times. An atomic protocol for graph isomorphism, for example, is the following (cf. <ref> [12] </ref>). Example. The input is a pair of (isomorphic) graphs G 1 and G 2 . The prover generates a single random isomorphic copy of G 1 which we call H , and sends H to the verifier. The latter responds with a random query i 2 f1; 2g. <p> However, we prefer to describe here two applications to which our definition of "proof of knowledge" can be applied, whereas all the previous formalizations fail. The first application is a modular description of the zero-knowledge proof for Graph Non-Isomorphism (of <ref> [12] </ref>) which uses a "proof of knowledge of an isomorphism" as a subprotocol. <p> The second application is to Shamir's interactive proof for PSPACE. 7.1 Zero-Knowledge proof of Graph Non-Isomorphism The second author first realized the inadequacy of previous formulations of "proofs of knowledge" when Leonid Levin insisted that the zero-knowledge interactive proof for Graph Non-Isomorphism (of <ref> [12] </ref>) should be presented in a modular manner. 9 As many people noticed, the intuition behind this zero-knowledge proof is that the verifier first proves to the prover that it "knows" an isomor-phism between one of the input graphs and the query graph that it presents to the prover. 10 If <p> This intuitive idea, taken from the Quadratic Non-Residousity zero-knowledge proof of [14], has indeed guided the development of the zero-knowledge proof system for GNI, but plays no part in the formal description and proof of correctness appearing in <ref> [12] </ref> (and [14]). Levin complained, rightfully, against this inelegant and non-modular approach. <p> of knowledge of an isomorphism between two graphs"; whereas the verifier in the zero-knowledge proof for GNI is the party claiming and proving knowledge of an NP-witness for GI. 11 It should be stressed that a proof of correctness of (the zero-knowledge property of) the protocol of does appear in <ref> [12] </ref>. The criticism points to the fact that the proof of correctness in [12] does not reflect the intuition just outlined. 12 The reader may find it useful at this point to consult Appendix E. 15 the simulator will fail to construct the interactions in these cases which may occur with <p> zero-knowledge proof for GNI is the party claiming and proving knowledge of an NP-witness for GI. 11 It should be stressed that a proof of correctness of (the zero-knowledge property of) the protocol of does appear in <ref> [12] </ref>. The criticism points to the fact that the proof of correctness in [12] does not reflect the intuition just outlined. 12 The reader may find it useful at this point to consult Appendix E. 15 the simulator will fail to construct the interactions in these cases which may occur with probability that is neither non-negligible nor negligible (see x1.2). <p> On the other hand, one can show that the subprotocol "for proof of knowledge of isomorphism" (presented in <ref> [12] </ref> and Appendix E) constitutes a (sound) proof of knowledge, according to the definitions presented in x3. It follows that the running time of the knowledge extractor is inversely proportional to the probability that the GNI-prover is convinced.
Reference: [13] <author> O. Goldreich, and Y. Oren, </author> <title> "Definitions and Properties of Zero-Knowledge Proof Systems", </title> <institution> TR-610, Computer Science Dept., Technion, Haifa, Israel. </institution> <note> Submitted to Jour. of Cryptology. </note>
Reference: [14] <author> S. Goldwasser, S. Micali, and C. Rackoff, </author> <title> "The Knowledge Complexity of Interactive Proof Systems", </title> <journal> SIAM J. on Computing, </journal> <volume> Vol. 18, No. 1, </volume> <year> 1989, </year> <pages> pp. 186-208. </pages>
Reference-contexts: 1 Introduction The introduction of the concept of a "proof of knowledge" is one of the many conceptual contributions of the work of Goldwasser, Micali and Rackoff <ref> [14] </ref>. This fundamental work, though containing intuition and clues towards a definition of the notion of a "proof of knowledge," does not provide a formal definition of it. <p> The clue to a formalization of "proofs of knowledge" is an appropriate interpretation of the phrases "whenever" and "knows" which appear in the condition. The phrase "convinced" has the straightforward and standard interpretation of accepting (i.e., entering a specified state in the computation). Following <ref> [14] </ref> the interpretation of the phrases "whenever" and "knows" is as follows. Suppose for simplicity that the verifier is always convinced (i.e. after interaction with the prover the verifier always enters an accepting state). <p> Yet, in case the interaction is accepting and this event is not incidental, one can say more on the knowledge of P . Namely, the ability of P to "often" lead the verifier to accept may say something about the knowledge of P . The crucial observation, originating in <ref> [14] </ref>, is that the "knowledge of P about x (deduced by interaction)" can be captured by whatever can be efficiently computed on input x and access to the oracle P x . <p> This intuitive idea, taken from the Quadratic Non-Residousity zero-knowledge proof of <ref> [14] </ref>, has indeed guided the development of the zero-knowledge proof system for GNI, but plays no part in the formal description and proof of correctness appearing in [12] (and [14]). Levin complained, rightfully, against this inelegant and non-modular approach. <p> This intuitive idea, taken from the Quadratic Non-Residousity zero-knowledge proof of <ref> [14] </ref>, has indeed guided the development of the zero-knowledge proof system for GNI, but plays no part in the formal description and proof of correctness appearing in [12] (and [14]). Levin complained, rightfully, against this inelegant and non-modular approach.
Reference: [15] <author> S. Haber, </author> <title> "Multi-Party Cryptographic Computations: Techniques and Applications", </title> <type> PhD Dissertation, </type> <institution> Computer Science Dept., Columbia University, </institution> <month> Nov. </month> <year> 1987. </year> <month> 18 </month>
Reference-contexts: It has been suggested to use a "proof of knowledge" as a subprotocol inside a multi-round encryption scheme secure against chosen ciphertext attack (cf. [8, Sec. 5] and <ref> [15, Sec. 5.4] </ref>). Namely, the decryption module returns a decryption of a chosen ciphertext only if "convinced" that the party asking for it already "knows it". (This is a special case of the application considered in the previous paragraph).
Reference: [16] <author> Y. Oren, </author> <title> "On the Cunning Power of Cheating Verifiers: Some Observations about Zero--Knowledge Proofs," </title> <booktitle> Proceedings of the 28th Annual IEEE Symposium on the Foundations of Computer Science, IEEE (1987), </booktitle> <pages> pp. 462-471. </pages>
Reference: [17] <author> A. Shamir, "IP=PSPACE," </author> <booktitle> Proceedings of the 31st Annual IEEE Symposium on the Foundations of Computer Science, IEEE (1990), </booktitle> <pages> pp. 11-15. </pages>
Reference-contexts: For example, we are able to say in what sense the which handles the entire sequence of formulae. On the other hand, one cannot ignore the case in which something is sent by Alice since this case is not negligible. 5 interactive proofs introduced by Shamir <ref> [17] </ref>, in order to demonstrate that IP=PSPACE, constitute "proofs of knowledge." Most proofs of knowledge (e.g., the proof of knowledge of an isomorphism used by [12] see Appendix E) are constructed by iterating some "atomic" protocol. <p> Let us show how a knowledge extractor may find the middle configuration. For the rest of this subsection, we assume that the reader is very familiar with the interactive proof for QBF as presented in <ref> [17, Section 5] </ref>. The standard reduction of a PSPACE language to QBF associates the middle configuration in an accepting poly-space computation with the first block of t existential quantifiers in the formula.
Reference: [18] <author> M. Tompa and H. Woll, </author> <title> "Random Self-Reducibility and Zero-Knowledge Interactive Proofs of Possession of Information," </title> <institution> University of California (San Diego) Computer Science and Engineering Dept. </institution> <note> Technical Report Number CS92-244 (June 1992). (Preliminary version in Proceedings of the 28th Annual IEEE Symposium on the Foundations of Computer Science, IEEE (1987), pp. 472-482.) 19 </note>
Reference-contexts: This fundamental work, though containing intuition and clues towards a definition of the notion of a "proof of knowledge," does not provide a formal definition of it. Furthermore, in our opinion, the commonly cited formal definitions, namely those of Feige, Fiat and Shamir [6] and Tompa and Woll <ref> [18] </ref>, are not satisfactory, and, in particular, inadequate for some of the applications in which they have been used. The purpose of this paper is two-fold. First, we would like to describe whence stem the flaws in the previous definitions and why these definitions do not suffice for some applications. <p> We then propose a definition which we feel remedies these defects and also has other advantages. We note that a definition which is much better than those of <ref> [6, 18] </ref> has appeared in the work of Feige and Shamir [7], but the community seems unaware of the fact that the definition in [7] is fundamentally different from, and preferable to, the one in [6] (in particular, this fact is not stated in [7]). <p> Yet both have in common the attempt to capture provers who convince with probabilities that are not non-negligible, thereby correctly addressing what we believe is one of the main flaws in the definitions of <ref> [6, 18] </ref>. Among the novel features of our new definition is that it allows us also to talk of the knowledge of machines which operate in super-polynomial-time. <p> Indeed, this is exactly the interpretation given in works as <ref> [18, 6] </ref>. The problem is to deal with the general case in which the prover may convince the verifier with some probability * &lt; 1. <p> But what should be required if the prover does not convince the verifier with non-negligible probability ? Most previous formulations (e.g., <ref> [18, 6] </ref>) require nothing, and hence are unsatisfactory both from a conceptual point of view and from a practical point of view (i.e., in view of many known applications). In particular, this inadequacy often appears when "proofs of knowledge" are used as subprotocols inside larger protocols. <p> Clearly, if the verifier accepts with non-negligible probability then the knowledge extractor runs in average polynomial in jxj time. This conclusion yields essentially what <ref> [6, 18] </ref> have considered as sufficient. Yet, as we have argued, this conclusion by itself does not suffice. 4.2 The efficiency of the provers and verifier For the purpose of defining proofs of knowledge, there is no need to restrict the prover to polynomial-time.
References-found: 18

