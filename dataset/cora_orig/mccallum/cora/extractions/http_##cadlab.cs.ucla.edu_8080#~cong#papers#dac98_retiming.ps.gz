URL: http://cadlab.cs.ucla.edu:8080/~cong/papers/dac98_retiming.ps.gz
Refering-URL: http://ballade.cs.ucla.edu/~cong/publications.html
Root-URL: http://www.cs.ucla.edu
Title: Optimal FPGA Mapping and Retiming with Efficient Initial State Computation  
Author: Jason Cong and Chang Wu 
Address: Los Angeles, CA 90095  
Affiliation: Department of Computer Science University of California,  
Abstract: For sequential circuits with given initial states, new equivalent initial states must be computed for retiming, which unfortunately is NP-hard. In this paper we propose a novel polynomial time algorithm for optimal FPGA mapping with forward retiming to minimize the clock period with guaranteed initial state computation. It enables a new methodology of separating forward retiming from backward retiming to avoid time-consuming iterations between retiming and initial state computation. Our algorithm compares very favorably with both of the conventional approaches of separate mapping followed by retiming [1, 8] and the recent approaches of combined mapping with retiming [12, 2]. It is also applicable to circuits with partial initial state assignment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Cong and Y. Ding. FlowMap: </author> <title> An Optimal Technology Mapping Algorithm for Delay Optimization in Lookup-Table Based FPGA Designs. </title> <journal> IEEE Trans. on Computer-Aided Design of Integrated Circuits And Systems, </journal> <volume> 13(1) </volume> <pages> 1-12, </pages> <year> 1994. </year>
Reference-contexts: Our algorithm compares very favorably with both of the conventional approaches of separate mapping with retiming <ref> [1, 8] </ref> and the recent approaches of combined mapping with retiming [12, 2]. It is also applicable to circuits with partial initial state assignment. The rest of the paper is organized as follows. Section 2 is the problem formulation and definitions and an overview of our algorithm. <p> In fact, we can compute a forward retiming directly from the node label pairs as shown in x 3.3. 4 Much smaller upper-bound can be computed by performing depth-optimal mapping (FlowMap <ref> [1] </ref>) on combinational subcircuits following by forward retiming. 5 It was shown that the expanded circuit had no more than O (Kn 2 ) nodes and O (K 2 n 2 ) edges for a circuit with n gates [12]. longer holds. <p> We compared TurboMap-frt with FlowMap-frt and TurboMap [2]. FlowMap-frt is based on the FlowMap algorithm <ref> [1] </ref>. It first map each combinational subcircuit bounded by FFs independently with the FlowMap algorithm. Then it merges the mapped LUT subcircuits with the original FFs and performs a postprocessing of forward retiming for clock period minimization. TurboMap [2] computes optimal mapping with general retiming solutions for synchronous sequential circuits.
Reference: [2] <author> J. Cong and C. Wu. </author> <title> An Improved Algorithm for Performance Optimal Technology Mapping with Retiming in LUT-Based FPGA Design. </title> <booktitle> In IEEE International Conference on Computer Design, </booktitle> <pages> pages 572-578, </pages> <year> 1996. </year>
Reference-contexts: Our algorithm compares very favorably with both of the conventional approaches of separate mapping with retiming [1, 8] and the recent approaches of combined mapping with retiming <ref> [12, 2] </ref>. It is also applicable to circuits with partial initial state assignment. The rest of the paper is organized as follows. Section 2 is the problem formulation and definitions and an overview of our algorithm. Our algorithm is presented in Section 3. <p> We propose to study the following problem in this paper. Problem 1 Given a sequential circuit with initial state s 0 , find an equivalent LUT circuit with initial state s r 0 and its clock period is minimum under forward retiming. As in <ref> [12, 2] </ref>, instead of solving the optimization Problem 1 directly, we shall solve its decision version and use binary search to get the minimum clock period. <p> As a result, the minimum l-values among all possible FRT mapping solutions are much more difficult to compute, because the path weight from PIs to a node will also be changed which makes the monotone property of l-values shown in <ref> [2] </ref> no longer holds. To overcome these difficulties we separate the l-value into two values such that the first one has the monotone property defined in [2] and the second one can be computed according to the first one. <p> to compute, because the path weight from PIs to a node will also be changed which makes the monotone property of l-values shown in <ref> [2] </ref> no longer holds. To overcome these difficulties we separate the l-value into two values such that the first one has the monotone property defined in [2] and the second one can be computed according to the first one. <p> Then we decide whether there exists a K-cut on F v with height of no more than L s (v) based on the max-flow K-cut computation on a partial flow network presented in <ref> [2] </ref>. 6 If there does not exist such a K-cut, we set l s new (v) = L s (v) + 1 and r new (v) = 0, because it can then be proved that L s (v) &gt; L s (v). 6 We refer readers to [2] for the detail. <p> network presented in <ref> [2] </ref>. 6 If there does not exist such a K-cut, we set l s new (v) = L s (v) + 1 and r new (v) = 0, because it can then be proved that L s (v) &gt; L s (v). 6 We refer readers to [2] for the detail. <p> In practice, the expanded circuits have much fewer than Kn edges using the efficient max-flow computation on partial flow networks <ref> [2] </ref> and the number of iterations for each is around 5 ~ 15 based on a computation order proposed in [2]. Practically, the runtime of our algorithm is in the order of K 2 n 2 log 2 n, the space requirement is in the order of Kn. <p> In practice, the expanded circuits have much fewer than Kn edges using the efficient max-flow computation on partial flow networks <ref> [2] </ref> and the number of iterations for each is around 5 ~ 15 based on a computation order proposed in [2]. Practically, the runtime of our algorithm is in the order of K 2 n 2 log 2 n, the space requirement is in the order of Kn. <p> We compared TurboMap-frt with FlowMap-frt and TurboMap <ref> [2] </ref>. FlowMap-frt is based on the FlowMap algorithm [1]. It first map each combinational subcircuit bounded by FFs independently with the FlowMap algorithm. Then it merges the mapped LUT subcircuits with the original FFs and performs a postprocessing of forward retiming for clock period minimization. TurboMap [2] computes optimal mapping with <p> with FlowMap-frt and TurboMap <ref> [2] </ref>. FlowMap-frt is based on the FlowMap algorithm [1]. It first map each combinational subcircuit bounded by FFs independently with the FlowMap algorithm. Then it merges the mapped LUT subcircuits with the original FFs and performs a postprocessing of forward retiming for clock period minimization. TurboMap [2] computes optimal mapping with general retiming solutions for synchronous sequential circuits. The initial states of Tur-boMap solutions were computed with SIS [13] based on the algorithm in [15]. <p> Column Best lists the best valid solutions (with computed equivalent initial states) by TurboMap and FlowMap-frt. The results show that comparing with TurboMap-frt, FlowMap-frt computed results with 20.2% larger clock period. Though TurboMap <ref> [2] </ref> can compute results with 2.8% smaller clock period, there are 10 out of 18 solutions by TurboMap SIS concludes no equivalent initial states exist or cannot find them due to huge memory requirement (&gt;300MB) and long runtime (&gt;2hours).
Reference: [3] <author> J. Cong and C. Wu. </author> <title> Optimal FPGA Mapping and Retim-ing with Efficient Initial State Computation. </title> <type> UCLA-CSD 980016, Technique Report, </type> <month> March </month> <year> 1998. </year>
Reference-contexts: Our algorithm is presented in Section 3. The experimental results are presented in Section 4 and the conclusions and our future work in Section 5. Due to the page limit, the details of the algorithm and the proofs of the theorems are left out. They are available in <ref> [3] </ref>. 2 Problem Formulation and Definitions Given a sequential circuit, the technology mapping problem for K-LUT based FPGAs is to construct an equivalent circuit consisting of K-LUTs and flipflops (FFs), such that both of the circuits generate the same output sequence for any input sequence, starting from their individual initial states,
Reference: [4] <author> G. Even, I. Y. Spillinger, and L. Stok. </author> <title> Retiming Revisited and Reversed. </title> <journal> IEEE Trans. on Computer-Aided Design of Integrated Circuits And Systems, </journal> <volume> 15(3) </volume> <pages> 348-357, </pages> <year> 1996. </year>
Reference-contexts: The initial state for backward retiming, however, needs to solve a satisfiability problem which is in general NP-complete. Several heuristics for initial state computation based on ATPG (automatic test pattern generation) techniques <ref> [17, 4, 9] </ref> or STG (state transition graph) traversal [15] have been proposed in recent years. However, none of them guarantees to find an equivalent initial state for a given retiming. For example, L. <p> However, none of them guarantees to find an equivalent initial state for a given retiming. For example, L. Stok, et. al. <ref> [4] </ref> proposed to try to exclude backward retiming by minimizing the maximum retiming value. If backward retiming is still needed for a target clock period, ATPG based justification was proposed to compute equivalent initial states with possible iterations of retiming and initial state computation. <p> However, ATPG itself is also NP-complete [5, 6]. We also observe that minimizing the maximum retiming value as formulated in <ref> [4] </ref> does not always lead to a simpler initial state computation problem. Our experience shows that unless a complete forward retiming solution can be found, the effort of initial state computation depends on the number of nodes with backward retiming, instead of the maximum retiming value.
Reference: [5] <author> H. Fujiwara and S. Toida. </author> <title> The Complexity of Fault Detection: An Approach to Design for Testability. </title> <booktitle> In FTCS-12, </booktitle> <pages> pages 101-108, </pages> <year> 1982. </year>
Reference-contexts: If backward retiming is still needed for a target clock period, ATPG based justification was proposed to compute equivalent initial states with possible iterations of retiming and initial state computation. However, ATPG itself is also NP-complete <ref> [5, 6] </ref>. We also observe that minimizing the maximum retiming value as formulated in [4] does not always lead to a simpler initial state computation problem.
Reference: [6] <author> S. Kundu, L. M. Huisman, I. Nair, and V. Iyengar. </author> <title> A Small Test Generator for Large Designs. </title> <booktitle> In International Test Conference, </booktitle> <pages> pages 30-40, </pages> <year> 1992. </year>
Reference-contexts: If backward retiming is still needed for a target clock period, ATPG based justification was proposed to compute equivalent initial states with possible iterations of retiming and initial state computation. However, ATPG itself is also NP-complete <ref> [5, 6] </ref>. We also observe that minimizing the maximum retiming value as formulated in [4] does not always lead to a simpler initial state computation problem.
Reference: [7] <author> C. Legl, P. Vanbekbergen, and A. Wang. </author> <title> Retiming of Edge-Triggered Circuits with Multiple Clocks and Load Enables. </title> <booktitle> In International Workshop on Logic Synthesis, </booktitle> <year> 1997. </year>
Reference-contexts: In the future we plan to extend our work for library based technology mapping with (forward) retiming for high performance gate array and standard cell designs. A general framework on retiming with multiple clock designs was proposed recently by Legl, et. al. <ref> [7] </ref>. We plan to accommodate our approach into this framework as well. 6 Acknowledgements This work is partially supported by National Science Foundation Young Investigator Award MIP9357582 and grants from Xilinx, Lucent Technologies and Quickturn Design Systems under the California MICRO program.
Reference: [8] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Retiming Synchronous Circuitry. </title> <journal> Algorithmica, </journal> <volume> 6 </volume> <pages> 5-35, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction Retiming is a well known technique to reduce the clock period by repositioning flipflops (FFs) in sequential circuits originally proposed by Leiserson and Saxe <ref> [8] </ref>. Many studies have been done on combining retiming with logic optimization, circuit partitioning and technology mapping, e.g., [11, 16, 10]. For lookup-table (LUT) based FPGA designs, a significant advancement was made by Pan and Liu [12] on simultaneous optimal technology mapping with retiming for clock period minimization. <p> Our algorithm compares very favorably with both of the conventional approaches of separate mapping with retiming <ref> [1, 8] </ref> and the recent approaches of combined mapping with retiming [12, 2]. It is also applicable to circuits with partial initial state assignment. The rest of the paper is organized as follows. Section 2 is the problem formulation and definitions and an overview of our algorithm. <p> In this paper, sequential circuits are represented as re-timing graphs. The retiming graph G (V; E; W ) of a sequential circuit is a directed graph, where V is the set of nodes, E is the set of edges and W is the set of edge weights <ref> [8] </ref>. Each node in V represents a gate, a primary input (PI) or a primary output (PO) in the original circuit. Each edge e (u; v) in E represents a directed connection from node u to node v. <p> We shall show that L s (v) has the important monotone property in x 3.2. According to Corollary 1, we can solve the decision Problem 2 by computing the node label pairs and checking if L s (v) + R (v) holds for every node. 2 In <ref> [8] </ref>, the retiming value &lt;(v) 0 corresponds to forward retim-ing at node v. We define r M (v) 0 for FRT mapping. <p> circuit E Kn v of v due to the one-to-one correspondence between K-cuts and K-LUTs. 5 However, the one-to-one correspondence between K-cuts on E Kn v and K-LUTs rooted at v under forward retiming no 3 Notice that an optimal forward retiming after mapping can be computed easily based on <ref> [8] </ref> by adding linear constraints &lt;(v) 0 for every node v.
Reference: [9] <author> N. Maheshwari and S. S. Sapatnekar. </author> <title> Minimum Area Re-timing with Equivalent Initial States. </title> <booktitle> In IEEE International Conference on CAD, </booktitle> <pages> pages 216-219, </pages> <year> 1997. </year>
Reference-contexts: The initial state for backward retiming, however, needs to solve a satisfiability problem which is in general NP-complete. Several heuristics for initial state computation based on ATPG (automatic test pattern generation) techniques <ref> [17, 4, 9] </ref> or STG (state transition graph) traversal [15] have been proposed in recent years. However, none of them guarantees to find an equivalent initial state for a given retiming. For example, L. <p> As a result we can still achieve effective retiming for circuit optimization without time-consuming iterations between retiming and initial state computation, avoiding the slow STG traversal procedure or any extra reset logic in existing approaches <ref> [9, 17, 14, 15] </ref>. Our algorithm compares very favorably with both of the conventional approaches of separate mapping with retiming [1, 8] and the recent approaches of combined mapping with retiming [12, 2]. It is also applicable to circuits with partial initial state assignment.
Reference: [10] <author> S. Malik, K. J. Singh, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Performance Optimization of Pipelined Logic Circuits Using Peripheral Retiming and Resynthesis. </title> <journal> IEEE Trans. on Computer-Aided Design of Integrated Circuits And Systems, </journal> <volume> 12(5) </volume> <pages> 568-578, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction Retiming is a well known technique to reduce the clock period by repositioning flipflops (FFs) in sequential circuits originally proposed by Leiserson and Saxe [8]. Many studies have been done on combining retiming with logic optimization, circuit partitioning and technology mapping, e.g., <ref> [11, 16, 10] </ref>. For lookup-table (LUT) based FPGA designs, a significant advancement was made by Pan and Liu [12] on simultaneous optimal technology mapping with retiming for clock period minimization.
Reference: [11] <author> G. D. </author> <title> Micheli. Synchronous Logic Synthesis: Algorithms for Cycle-Time Minimization. </title> <journal> IEEE Trans. on Computer-Aided Design of Integrated Circuits And Systems, </journal> <volume> 10(1) </volume> <pages> 63-73, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction Retiming is a well known technique to reduce the clock period by repositioning flipflops (FFs) in sequential circuits originally proposed by Leiserson and Saxe [8]. Many studies have been done on combining retiming with logic optimization, circuit partitioning and technology mapping, e.g., <ref> [11, 16, 10] </ref>. For lookup-table (LUT) based FPGA designs, a significant advancement was made by Pan and Liu [12] on simultaneous optimal technology mapping with retiming for clock period minimization.
Reference: [12] <author> P. Pan and C. L. Liu. </author> <title> Optimal Clock Period FPGA Technology Mapping for Sequential Circuits. </title> <journal> ACM Transactions on Design Automation of Electronic Systems, </journal> <volume> 4(1), </volume> <year> 1999. </year> <note> http://www.acm.org/todaes/V4N1/L166/paper.ps.gz. </note>
Reference-contexts: Many studies have been done on combining retiming with logic optimization, circuit partitioning and technology mapping, e.g., [11, 16, 10]. For lookup-table (LUT) based FPGA designs, a significant advancement was made by Pan and Liu <ref> [12] </ref> on simultaneous optimal technology mapping with retiming for clock period minimization. For designs with initial states, however, equivalent initial states need to be computed for retiming, which unfortunately is NP-hard [14]. small rectangle represents a FF. A general retiming procedure usually involves two kinds of FF movements. <p> Our algorithm compares very favorably with both of the conventional approaches of separate mapping with retiming [1, 8] and the recent approaches of combined mapping with retiming <ref> [12, 2] </ref>. It is also applicable to circuits with partial initial state assignment. The rest of the paper is organized as follows. Section 2 is the problem formulation and definitions and an overview of our algorithm. Our algorithm is presented in Section 3. <p> We propose to study the following problem in this paper. Problem 1 Given a sequential circuit with initial state s 0 , find an equivalent LUT circuit with initial state s r 0 and its clock period is minimum under forward retiming. As in <ref> [12, 2] </ref>, instead of solving the optimization Problem 1 directly, we shall solve its decision version and use binary search to get the minimum clock period. <p> A mapping solution with r (v) 0 for every LUT root v is called a simple mapping solution <ref> [12] </ref>. One important property of simple mapping solution is that the path weight of any path from PIs to a node is the same as that in the original circuit. Thus, we only need to focus on reducing the path delay for path length and clock period minimization. <p> Thus, we only need to focus on reducing the path delay for path length and clock period minimization. It was shown in <ref> [12] </ref> that, there always exists a simple mapping solution whose clock period will be the minimum after a second step of general retiming. However, there may not exist any simple FRT mapping solutions with the minimum clock period after optimal forward retiming. <p> Pan and Liu <ref> [12] </ref> proposed to search all possible LUTs rooted at a node on expanded circuits of the node. <p> One important property of E v is that for any node, denoted u w , every path from u w to the root v 0 passes exactly w FFs. Pan and Liu <ref> [12] </ref> showed that to examine all K-LUTs for a node v, it sufficed to examine all the K-LUTs that can be derived from the K-cuts in a large enough expanded circuit E Kn v of v due to the one-to-one correspondence between K-cuts and K-LUTs. 5 However, the one-to-one correspondence between <p> Much smaller upper-bound can be computed by performing depth-optimal mapping (FlowMap [1]) on combinational subcircuits following by forward retiming. 5 It was shown that the expanded circuit had no more than O (Kn 2 ) nodes and O (K 2 n 2 ) edges for a circuit with n gates <ref> [12] </ref>. longer holds. <p> Now we define a set of expanded circuits of a node v for FRT mapping. The expanded circuit F i v for a given upper bound i of forward retiming value of node v is a sub-DAG of E Kn v (defined in <ref> [12] </ref>) with root v 0 such that, u w is an internal node of F i v if and only if u w is an internal node of E Kn v and w i, and u w is a leaf of F i v if and only if u w is <p> Notice that the above result is based on the worst-case scenario that the expanded circuits have O (K 2 n 2 ) edges <ref> [12] </ref> and we need go through n 2 iterations (lines 5~9 in Figure 5).
Reference: [13] <author> E. Sentovich, K. Singh, L. Lavagno, C. Moon, R. Mur-gai, A. Saldanha, H. Savoj, P. Stephan, R. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> SIS: A System for Sequential Circuit Synthesis. </title> <note> Electronics Research Laboratory, Memorandum No. UCB/ERL M92/41, </note> <year> 1992. </year>
Reference-contexts: l is the number of variables to represent the function of the node, for example, the number of literals on cover table representation or the number of variables in the BDD representation. 4 Experimental Results The TurboMap-frt algorithm has been implemented in C language and incorporated into the SIS package <ref> [13] </ref>. Our test set consists of 14 MCNC FSMs and 4 ISCAS'89 benchmarks. The initial circuits are shown in Column Original of Table 1, in which N means the number of nodes and F means the number of FFs, respectively, in the circuits. <p> Our experiments were performed on a Sun Ultra2 with 256MB memory. K was set to be 5. All the mapping results of TurboMap-frt were computed and verified by verify fsm of SIS <ref> [13] </ref>, except the 4 largest ones which were verified by simulations with input sequences of 3008 random vectors due to huge amount of memory (&gt;1GB) needed by verify fsm for those cases. We compared TurboMap-frt with FlowMap-frt and TurboMap [2]. FlowMap-frt is based on the FlowMap algorithm [1]. <p> Then it merges the mapped LUT subcircuits with the original FFs and performs a postprocessing of forward retiming for clock period minimization. TurboMap [2] computes optimal mapping with general retiming solutions for synchronous sequential circuits. The initial states of Tur-boMap solutions were computed with SIS <ref> [13] </ref> based on the algorithm in [15]. The experimental results are shown in Table 1, where Columns LUT and FF list the numbers of LUTs and FFs, respectively, in the final mapping solutions by each approach. Columns list the clock periods of the results. Columns CPU list the CPU time.
Reference: [14] <author> L. Stok, I. Spillinger, and G. </author> <title> Even. Improving Initialization through Reversed Retiming. </title> <booktitle> In Proc. Euro. Design & Test Conference, </booktitle> <pages> pages 150-154, </pages> <year> 1995. </year>
Reference-contexts: For lookup-table (LUT) based FPGA designs, a significant advancement was made by Pan and Liu [12] on simultaneous optimal technology mapping with retiming for clock period minimization. For designs with initial states, however, equivalent initial states need to be computed for retiming, which unfortunately is NP-hard <ref> [14] </ref>. small rectangle represents a FF. A general retiming procedure usually involves two kinds of FF movements. Forward retiming moves FFs from the inputs of some gates to their outputs, while backward retiming moves FFs in the opposite direction. <p> As a result we can still achieve effective retiming for circuit optimization without time-consuming iterations between retiming and initial state computation, avoiding the slow STG traversal procedure or any extra reset logic in existing approaches <ref> [9, 17, 14, 15] </ref>. Our algorithm compares very favorably with both of the conventional approaches of separate mapping with retiming [1, 8] and the recent approaches of combined mapping with retiming [12, 2]. It is also applicable to circuits with partial initial state assignment.
Reference: [15] <author> H. Touati and R. K. Brayton. </author> <title> Computing the Initial States of Retimed Circuits. </title> <journal> IEEE Trans. on Computer-Aided Design of Integrated Circuits And Systems, </journal> <volume> 12(1) </volume> <pages> 157-162, </pages> <year> 1993. </year>
Reference-contexts: The initial state for backward retiming, however, needs to solve a satisfiability problem which is in general NP-complete. Several heuristics for initial state computation based on ATPG (automatic test pattern generation) techniques [17, 4, 9] or STG (state transition graph) traversal <ref> [15] </ref> have been proposed in recent years. However, none of them guarantees to find an equivalent initial state for a given retiming. For example, L. Stok, et. al. [4] proposed to try to exclude backward retiming by minimizing the maximum retiming value. <p> Our experience shows that unless a complete forward retiming solution can be found, the effort of initial state computation depends on the number of nodes with backward retiming, instead of the maximum retiming value. Alternatively, Touati and Brayton <ref> [15] </ref> proposed an initial state computation algorithm based on STG traversal. Their algorithm can compute equivalent initial states under the condition that there exists an input sequence for the original initial state going back to itself in the STG of the original circuit [15]. <p> Alternatively, Touati and Brayton <ref> [15] </ref> proposed an initial state computation algorithm based on STG traversal. Their algorithm can compute equivalent initial states under the condition that there exists an input sequence for the original initial state going back to itself in the STG of the original circuit [15]. However, unless provided externally, to determine the existence and compute such an input sequence needs to search the STG which may have an exponential number of nodes. Although representing the reset logic explicitly can avoid the STG traversal [15], the extra cost of the reset logic separated from FFs after <p> going back to itself in the STG of the original circuit <ref> [15] </ref>. However, unless provided externally, to determine the existence and compute such an input sequence needs to search the STG which may have an exponential number of nodes. Although representing the reset logic explicitly can avoid the STG traversal [15], the extra cost of the reset logic separated from FFs after re-timing can be high. Furthermore, such kind of reset logic may restrict possible retiming of the original circuit, thus reduce the potential of retiming optimization. <p> As a result we can still achieve effective retiming for circuit optimization without time-consuming iterations between retiming and initial state computation, avoiding the slow STG traversal procedure or any extra reset logic in existing approaches <ref> [9, 17, 14, 15] </ref>. Our algorithm compares very favorably with both of the conventional approaches of separate mapping with retiming [1, 8] and the recent approaches of combined mapping with retiming [12, 2]. It is also applicable to circuits with partial initial state assignment. <p> Theorem 6 f&lt;(v)g is a legal forward retiming to achieve clock period min . Since the retiming is a forward retiming, an equivalent initial state can be computed in linear time with circuit simulation based on the approach in <ref> [15] </ref>. For a K-bounded circuit with n gates and O (Kn) edges, the first step of getting LUT roots can be done in O (Kn) time. <p> The forward re-timing on the constructed circuit can be done in O (CK 2 n 2 ) time since j &lt;(v) j O (Kn) for each v and each K-input node can be simulated in O (K) time <ref> [15] </ref>. 7 So the mapping generation with forward retiming and initial state computation can be finished in O (CK 2 n 2 ) time. 7 To be precise, a node can be simulated in O (l) time, where l is the number of variables to represent the function of the node, <p> TurboMap [2] computes optimal mapping with general retiming solutions for synchronous sequential circuits. The initial states of Tur-boMap solutions were computed with SIS [13] based on the algorithm in <ref> [15] </ref>. The experimental results are shown in Table 1, where Columns LUT and FF list the numbers of LUTs and FFs, respectively, in the final mapping solutions by each approach. Columns list the clock periods of the results. Columns CPU list the CPU time.
Reference: [16] <author> H. Touati, N. Shenoy, and A. Sangiovanni-Vincentelli. </author> <title> Re-timing for Table-Lookup Field-Programmable Gate Arrays. </title> <booktitle> In FPGA'92, </booktitle> <pages> pages 89-94, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Retiming is a well known technique to reduce the clock period by repositioning flipflops (FFs) in sequential circuits originally proposed by Leiserson and Saxe [8]. Many studies have been done on combining retiming with logic optimization, circuit partitioning and technology mapping, e.g., <ref> [11, 16, 10] </ref>. For lookup-table (LUT) based FPGA designs, a significant advancement was made by Pan and Liu [12] on simultaneous optimal technology mapping with retiming for clock period minimization.
Reference: [17] <author> H. Yotsuyanagi, S. Kajihara, and K. Kinoshita. </author> <title> Retiming for Sequential Circuits with a Specified Initial State and Its Application to Testability Enhancement. </title> <journal> IEICE Trans. INF. & SYST., </journal> <volume> E78-D(7):861-867, </volume> <month> July </month> <year> 1995. </year>
Reference-contexts: The initial state for backward retiming, however, needs to solve a satisfiability problem which is in general NP-complete. Several heuristics for initial state computation based on ATPG (automatic test pattern generation) techniques <ref> [17, 4, 9] </ref> or STG (state transition graph) traversal [15] have been proposed in recent years. However, none of them guarantees to find an equivalent initial state for a given retiming. For example, L. <p> As a result we can still achieve effective retiming for circuit optimization without time-consuming iterations between retiming and initial state computation, avoiding the slow STG traversal procedure or any extra reset logic in existing approaches <ref> [9, 17, 14, 15] </ref>. Our algorithm compares very favorably with both of the conventional approaches of separate mapping with retiming [1, 8] and the recent approaches of combined mapping with retiming [12, 2]. It is also applicable to circuits with partial initial state assignment.
References-found: 17

