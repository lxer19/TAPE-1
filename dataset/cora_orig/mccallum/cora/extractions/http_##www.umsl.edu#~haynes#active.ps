URL: http://www.umsl.edu/~haynes/active.ps
Refering-URL: http://euler.mcs.utulsa.edu/~sandip/wshop/97/
Root-URL: 
Email: e-mail: haynes@euler.mcs.utulsa.edu  
Title: Augmenting Collective Adaptation with Simple Process Agents  
Author: Thomas Haynes 
Address: 600 South College Ave.  Tulsa, OK 74104-3189  
Affiliation: Department of Mathematical Computer Sciences  The University of Tulsa  
Abstract: We have integrated the distributed search of genetic programming based systems with collective memory to form a collective adaptation search method. Such a system significantly improves search as problem complexity is increased. However, there is still considerable scope for improvement. In collective adaptation, search agents gather knowledge of their environment and deposit it in a central information repository. Process agents are then able to manipulate that focused knowledge, exploiting the exploration of the search agents. We examine the utility of increasing the capabilities of the centralized process agents. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Garey, M. R., and Johnson, D. S. </author> <year> 1979. </year> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <address> San Francisco, CA: </address> <publisher> W.H. Freeman and Co. </publisher>
Reference-contexts: These simpler actions reflect a computational bound on either the reasoning power or memory storage of the individual agent. Such bounds are caused by the combinatorial explosion found in either search or optimization of NP complete problems <ref> (Garey & Johnson 1979) </ref>. Collective memory is defined as the combined knowledge gained by the interaction of the agents with both themselves and their environment. We combine the raw power of collective action with the expressiveness of collective memory to enhance a distributed search process.

Reference: <author> Haynes, T.; Schoenefeld, D.; and Wainwright, R. </author> <year> 1996. </year> <title> Type inheritance in strongly typed genetic programming. </title> <editor> In Kinnear, Jr., K. E., and Angeline, P. J., eds., </editor> <booktitle> Advances in Genetic Programming 2. </booktitle> <publisher> MIT Press. </publisher> <address> chapter 18. </address>
Reference-contexts: This example graph exhibits nice regularities which allows for the efficient comparison of results across different test runs. We have utilized these regularities to identify and enumerate the building blocks, i.e., the connected components <ref> (Haynes 1996) </ref>. We repaired chromosomes by stripping out all invalid candidate cliques. We investigated various rates of return of repaired chromosomes into the population.
Reference: <author> Haynes, T. </author> <year> 1996. </year> <title> Duplication of coding segments in genetic programming. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: This example graph exhibits nice regularities which allows for the efficient comparison of results across different test runs. We have utilized these regularities to identify and enumerate the building blocks, i.e., the connected components <ref> (Haynes 1996) </ref>. We repaired chromosomes by stripping out all invalid candidate cliques. We investigated various rates of return of repaired chromosomes into the population.
Reference: <author> Haynes, T. </author> <year> 1997. </year> <title> Collective memory search. </title> <booktitle> In Proceedings of the 1997 ACM Symposium on Applied Computing. </booktitle> <publisher> ACM Press. </publisher>
Reference-contexts: The evaluation of one chromosome typically is independent of all others. We have found that collective adaptation, which is the addition of collective memory to a GP-based learning system, significantly improves the search process as problem complexity is increased <ref> (Haynes 1997) </ref>. We believe that this improvement is a direct result of the change of focus from strict competition to cooperation. However, there is still considerable room for improvement. <p> Instead the search agents gather candidate cliques into the information center and the process agent removes duplicates and candidates subsumed by larger candidates. The addition of Passive-Active collective adaptation to the search technique significantly improves the efficiency of the search process <ref> (Haynes 1997) </ref>. We want to leverage that improvement to allow clique detection in more realistic graphs. The ten node graph we use to illustrate the clique detection is contrived and thus facilitates the search process, i.e. a known optimal solution exists.
Reference: <author> Holland, J. H. </author> <year> 1975. </year> <booktitle> Adpatation in Natural and Artificial Systems. </booktitle> <address> Ann Arbor, MI: </address> <publisher> University of Michigan Press. </publisher>
Reference-contexts: We consider simple computational search agents, which are chromosomes in a genetic programming (GP) (Koza 1992) population. Genetic algorithms (GA) <ref> (Holland 1975) </ref> are a class of distributed search algorithms inspired by biological evolutionary adaptation. GP is an off-shoot of GA's, and is typically used in the automatic induction of programs. Both GA and GP represent search strategies in a population of chromosomes.
Reference: <author> Johnson, D. S., and Trick, M. A. </author> <year> 1993. </year> <title> Cliques, coloring, and satisfiability: </title> <note> The second DIMACS challange. (to appear). </note>
Reference-contexts: The ten node graph we use to illustrate the clique detection is contrived and thus facilitates the search process, i.e. a known optimal solution exists. The search for the optimal solution for this graph is not trivial with either plain GP or STGP systems. In the Second DIMACS Challenge <ref> (Johnson & Trick 1993) </ref> random graphs were generated as tests for the maximum clique detection problem (ftp://dimacs.rutgers.edu/pub/challenge). While the duplication of coding segments repair process is able to search such graphs, the plain STGP system will prematurely converge.
Reference: <author> Koza, J. R. </author> <year> 1992. </year> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <address> Cam-bridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: The integration of action and memory leads to a distributed society of search agents which interact via collective memory; allowing for either agent communication or for a centralized search of the gathered knowledge. We consider simple computational search agents, which are chromosomes in a genetic programming (GP) <ref> (Koza 1992) </ref> population. Genetic algorithms (GA) (Holland 1975) are a class of distributed search algorithms inspired by biological evolutionary adaptation. GP is an off-shoot of GA's, and is typically used in the automatic induction of programs. Both GA and GP represent search strategies in a population of chromosomes. <p> We examine the coordination of knowledge of loosely-coupled, heterogeneous, and initially simple agents. The agents can adapt during the search process, eventually becoming quite complex. Genetic Programming Genetic programming is a machine learning technique used in the automatic induction of computer programs <ref> (Koza 1992) </ref>. A GP system is primarily comprised of three main parts: * a population of chromosomes * a chromosome evaluator * a selection and recombination mechanism.
Reference: <author> Montana, D. J. </author> <year> 1995. </year> <title> Strongly typed genetic programming. </title> <booktitle> Evolutionary Computation 3(2) </booktitle> <pages> 199-230. 6 </pages>
Reference-contexts: Montana claims that closure is a serious limitation to genetic programming. He introduces a variant of GP in strongly typed genetic programming (STGP), in which variables, constants, arguments, and returned values can be of any type <ref> (Montana 1995) </ref>. The only restriction is that the data type for each element be specified beforehand. This causes the initialization process and the various genetic operations to only construct syntactically correct trees. It has been shown that STGP can significantly reduce the search space (Haynes et al. 1995; Montana 1995).
References-found: 8

