URL: http://www.erg.sri.com/people/saurav/Papers/icdcs97.ps
Refering-URL: http://www.erg.sri.com/people/saurav/paper.html
Root-URL: 
Email: saurav@erg.sri.com  
Title: A Quality of Service based Allocation and Routing Algorithm for Distributed, Heterogeneous Real Time Systems*  
Author: Saurav Chatterjee 
Address: Menlo Park, Ca 94025  
Affiliation: SRI International  
Date: May 1997.  
Note: In the Proceedings of the 17th IEEE International Conference on Distributed Computing Systems,  Copyright 1997 IEEE. Published in the Proceedings of ICDCS97, May 27- 30, 1997 in Baltimore, Maryland. Personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works, must be obtained from the IEEE.  for two multimedia scenarios. Rules of thumb for setting are also given.  
Abstract: An increasing number of applications execute over a set of computing and communication resources and have end-to-end quality of service (QoS) requirements. Given a system and an application with specific flow structure and QoS requirements, this paper describes an integrated QoS-based allocation and routing algorithm that determines which computing and communication resources to utilize for this application. More specifically, the algorithm finds the best flow path for an application, subject to application flow and QoS constraints, so as to optimize system objectives (e.g., minimize total system utilization or balance the load). The paper also introduces a -optimal algorithm that, relative to the optimal algorithm, significantly reduces the run-time of the algorithm with a minor degradation in the optimality of the solution. The -optimal algorithm is guaranteed to produce a result that is at most -units sub-optimal. The paper also analyzes the optimality and run time of the solution as a function of 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Barringer, T. Burd, F. Burghardt, A. Burstein, A. Chan-drakasan, R. Doering, S. Narayanaswamy, T. Pering, B. Richards, T. Truman, J. Rabaey, R. Brodersen; Infopad: </author> <title> A System Design for Portable Multimedia Access, </title> <booktitle> Calgary Wireless 94 Conference, </booktitle> <month> July </month> <year> 1994. </year>
Reference-contexts: D D D high bandwidth networks. This has directly led to a transformation in application design an increasing number of applications are end-to-end applications, in that they execute in an ordered manner over many computing, storage, and communication system resources. Third, current trends toward network computers, mobile computers <ref> [1] </ref>, and appliance computers will increasingly require these applications to execute many of their complex algorithms on shared proxy servers rather than on the simpler (i.e., less computing capability and storage capacity), dedicated end-user machines; this will transform the end-point to end-point connection paradigm of an end-to-end application (source communication destination)
Reference: [2] <author> S. Chatterjee, </author> <title> Allocation and Routing for Distributed Multimedia Systems, </title> <booktitle> 8th IEEE Symposium on Parallel and Distributed Processing (Workshop on Resource Management in Computer Systems and Networks), </booktitle> <address> New Orleans, LA, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: The description will be conceptual. <ref> [2] </ref> transforms this conceptual algorithm into a practical and efficient algorithm.
Reference: [3] <author> S. Chatterjee, </author> <title> Distributed Pipeline Scheduling: A Framework for Design of Large-Scale, Distributed, Heterogeneous Real-Time Systems, </title> <type> Ph.D. Thesis, </type> <institution> Carnegie Mellon University, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: Resources with identical prefixes have identical type and sub-type (e.g., B1 and B2 are same type computing resources). 3.2 End-to-End Application Stream Model The Logical Application Stream Model (LASM) <ref> [3, 4] </ref> captures an applications work and data ow specifications. In this paper, we present a simplified LASM, where processing steps capture the work and the number of the processing step implicitly specifies the data ow. <p> In Section 4.3, we will present a methodology for how to assign weights; even though the specific equations we will specify are for a particular end-to-end scheduling policy (Generalized Rate Controlled Static Priority <ref> [3] </ref>), other scheduling policies can also be utilized with our allocation and routing algorithm by assigning weights differently. 4.1 Creating the ASTPM Graph This section transforms the TPM graph into an application-specific TPM graph, ASTPM = (N, F). <p> node n, , also considers the two constraints of each path namely that all resources in the path must have utilization below 100% and that the end-to-end latency for the path must be less than the required latency, : for the Generalized Rate Control Static Priority end-to-end ow control policy <ref> [3] </ref>. If n is the source node, and . <p> Because the run time for finding the optimal solution may be excessive, we now develop a -optimal algorithm that provides near optimal solutions at a fraction of the run time of the optimal solution. The near optimal solution is guaranteed to be at most units sub-optimal <ref> [3] </ref>, where is user defined. The basic tenet of the -optimal algorithm is to reduce the number of back-tracks that the algorithm attempts. In step 2 in Section 4.2, denote node as the tail of the current path. <p> Note that n would be if LB was moved. Go to step 2. The resulting algorithm can be proven to be at most units less optimal than the optimal solution. The proof is given in <ref> [3] </ref>. The next section analyzes the optimal and -optimal allocation and routing algorithms, illustrates the impact of back-tracking and determines the impact of various values of . <p> Section 6.1 analyzes a system running a set of video applications with diverse QoS requirements. Section 6.2 analyzes a system running a set of diverse multimedia applications with diverse QoS requirements. Both scenarios used a common system <ref> [3] </ref>, composed of five work-groups, each with 20 CPUs connected using a local area network (LAN). A central D D b D m n, b b m b, L L w w = D D D - 7 - site contained a video server. <p> Each of these application classes had a different LASM and a different number of processing steps. The LASMs for each are in <ref> [3] </ref>. The QoS attributes for each application was chosen using exponential distribution functions [3]. End-to-end latency constraints were fixed at 200 ms. <p> Each of these application classes had a different LASM and a different number of processing steps. The LASMs for each are in <ref> [3] </ref>. The QoS attributes for each application was chosen using exponential distribution functions [3]. End-to-end latency constraints were fixed at 200 ms. D Number of Failures D Number of Backtracks (a) Number of Failures (b) Number of Backtracks no back-tracking D = D 10= - 8 - The results are given in Table 5. The results are similar to that for Scenario A.
Reference: [4] <author> S. Chatterjee and J. Strosnider, </author> <title> Distributed Pipeline Scheduling: A Framework for Distributed, Heterogeneous Real-Time System Design, </title> <journal> The Computer Journal (British Computer Society), </journal> <volume> Vol. 38, No. 4, </volume> <year> 1995. </year>
Reference-contexts: we must simultaneously identify the set of heterogeneous computing and communication resources to utilize for each application. 3 Models This section presents two abstractions for modeling the system and the application that will be used in later sections of this paper. 3.1 System Model The Target Platform Model (TPM) abstraction <ref> [4] </ref> captures the resources comprising the systems, their attributes and their topology. The TPM is represented using a cyclic graph, , where is a set of computing and communication resources, and is a set of edges specifying connectivity between these resources. <p> Resources with identical prefixes have identical type and sub-type (e.g., B1 and B2 are same type computing resources). 3.2 End-to-End Application Stream Model The Logical Application Stream Model (LASM) <ref> [3, 4] </ref> captures an applications work and data ow specifications. In this paper, we present a simplified LASM, where processing steps capture the work and the number of the processing step implicitly specifies the data ow.
Reference: [5] <author> A. Nanda and D. Stenger, </author> <title> Simulated annealing algorithms for scheduling directed task graphs on multiprocessors, </title> <institution> Texas A & M University. Computer Science Dept. </institution> <type> Technical Report TAMU 91-040, </type> <year> 1991. </year>
Reference-contexts: Also, if an application needs to execute one or more algorithms on intermediate proxy processors, these algorithms cannot be used to determine which processors to use. The QoS-based allocation algorithms attempt to find a set of computing resources to allocate to each application. Most algorithms <ref> [5, 8, 10] </ref> assume that the system is composed entirely of homogeneous processors connected by a local area network (LAN), simplifying the problem greatly. <p> Some algorithms <ref> [5, 10] </ref> are based on simulated annealing and cannot be used for on-line allocation. Others [8] dont consider end-to-end latency constraints. Our algorithm doesnt have these limitations.
Reference: [6] <author> R. Perlman, </author> <title> Interconnections: Bridges and Routers, </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: It is based on the standard Dijkstras shortest path algorithm, as described in <ref> [6] </ref>. 1. Start with the source (i.e., node PS), as the root of the tree by placing (PS, 0) in PATH. Terminate the algorithm if this nodes utilization, including the load that places on this resource, is above 100%. 2.
Reference: [7] <author> C. Parris and D. Ferrari, </author> <title> A Dynamic Connection Management Scheme for Guaranteed Performance Services in Packet switching Integrated Services Networks, </title> <institution> University of California at Berkeley Technical Report TR-93-005, </institution> <year> 1993. </year>
Reference-contexts: Section 7 summarizes this paper and explores our current research thrusts. 2 Related Work There exists work in both QoS-based routing and QoS-based allocation. The routing algorithms attempt to find a communication route between a fixed source and destination that either minimize end-to-end latency <ref> [7] </ref> or minimize the number of I/O hops [9].
Reference: [8] <author> K. Ramamritham, </author> <title> Allocation and Scheduling of Complex Periodic Tasks, </title> <institution> Univ. of Massachusetts Technical Report 90-01, </institution> <month> Jan </month> <year> 1989. </year>
Reference-contexts: Also, if an application needs to execute one or more algorithms on intermediate proxy processors, these algorithms cannot be used to determine which processors to use. The QoS-based allocation algorithms attempt to find a set of computing resources to allocate to each application. Most algorithms <ref> [5, 8, 10] </ref> assume that the system is composed entirely of homogeneous processors connected by a local area network (LAN), simplifying the problem greatly. <p> Some algorithms [5, 10] are based on simulated annealing and cannot be used for on-line allocation. Others <ref> [8] </ref> dont consider end-to-end latency constraints. Our algorithm doesnt have these limitations.
Reference: [9] <author> S. Rampal, D. Reeves and D. Agrawal, </author> <title> An Evaluation of Routing and Admission Control Algorithms for Multimedia Traffic in Packet-switched Networks, </title> <booktitle> Proceedings of the 5th IFIP Conference on High-Performance Networking, </booktitle> <pages> pp. 77-92, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: The routing algorithms attempt to find a communication route between a fixed source and destination that either minimize end-to-end latency [7] or minimize the number of I/O hops <ref> [9] </ref>. Our algorithm is based on a different philosophy - whereas these algorithms typically find a path that minimizes application latency, our algorithm finds a path that meets application latency requirements and optimizes the system objective (e.g., load balance or minimize the system utilization).
Reference: [10] <author> K. Tindell, A. Burns and A. Wellings, </author> <title> Allocating hard real-time tasks: an NP-hard problem made easy, </title> <journal> Real-Time Systems Journal, </journal> <volume> vol. 4, no. 2, </volume> <pages> pp. 145-165, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Also, if an application needs to execute one or more algorithms on intermediate proxy processors, these algorithms cannot be used to determine which processors to use. The QoS-based allocation algorithms attempt to find a set of computing resources to allocate to each application. Most algorithms <ref> [5, 8, 10] </ref> assume that the system is composed entirely of homogeneous processors connected by a local area network (LAN), simplifying the problem greatly. <p> Some algorithms <ref> [5, 10] </ref> are based on simulated annealing and cannot be used for on-line allocation. Others [8] dont consider end-to-end latency constraints. Our algorithm doesnt have these limitations.
References-found: 10

