URL: ftp://ftp.cs.columbia.edu/reports/reports-1996/cucs-001-96.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1996.html
Root-URL: http://www.cs.columbia.edu
Email: issy@ee.technion.ac.il  heineman@cs.columbia.edu  
Phone: phone +972-4-294689 fax +972-4-323041  phone 212-939-7085  
Title: A 3-level Atomicity Model for Decentralized Workflow Management Systems  
Author: Israel Z. Ben-Shaul George T. Heineman Z. Ben-Shaul and George T. Heineman 
Keyword: transaction management, workflow interoperability, distributed systems, process mod eling, software engineering environments, collaborative work.  
Note: c fl1996, Israel  
Address: City, Haifa 32000 ISRAEL  500 West 120th Street New York, NY 10027 UNITED STATES  
Affiliation: Technion-Israel Institute of Technology Department of Electrical Engineering Technion  Columbia University Department of Computer Science  
Abstract: Decentralized workflow management systems (WFMSs) provide an architecture for multiple, heterogeneous WFMSs to interoperate. Atomicity is a standard correctness model for guaranteeing that a set of operations occurs as an atomic unit, or none of them occur at all. Within a single WFMS, atomicity is the concern of its transaction manager. In a decentralized environment, however, the autonomous transaction managers must find ways to cooperate if an atomic unit is split between multiple WFMSs. This paper describes a flexible atomicity model that enables workflow administrators to specify the scope of multi-site atomicity based upon the desired semantics of multi-site tasks in the decentralized WFMS. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Israel Ben-Shaul and Gail E. Kaiser. </author> <title> A Paradigm for Decentralized Process Modeling. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1995. </year>
Reference-contexts: Our atomicity model, presented in Section 3, assumes an underlying execution model and system architecture, which we first discuss in Section 2. This execution model has been implemented in the Oz DWFMS <ref> [1] </ref> on top of its rule-based workflow modeling language and the Pern transaction component [5], and is outside the scope of this paper. 2 System Architecture and Execution Model A DWFMS consists of a set of local WFMSs that share no resources and communicate via message passing. <p> If an activity a i only accesses data from its local data manager, then a single local transaction T i is created to encapsulate the data requests for the activity. Each multi-site activity is created when two or more sites enter into an agreement, called Treaty <ref> [1] </ref>, whereby the activity becomes "shared" between the multiple sites. A multi-site activity a i involving n sites is associated with n transactions | T 1 i ; T 2 i | one at each site.
Reference: [2] <author> P.A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading MA, </address> <year> 1987. </year>
Reference-contexts: If the data is local, the WFM contacts its local TM and a local transaction is created to manage the data; otherwise, the WFM contacts the remote TM and that TM creates the necessary and that TM creates the necessary transaction. In contrast, distributed database systems <ref> [2] </ref> employ a global transaction manager that must process any request to access remote data. Although multi-site activities are "global", there is no centralized global TM. Instead, we assume that each local TM supports nested transactions and are extended to support multi-site transactions as explained below.
Reference: [3] <author> W. Du, K. Elmagarmid, Y. Leu, and S. Ostermann. </author> <title> Effects of Local Autonomy on Global Concurrency Control in Heterogeneous Distributed Database Systems. </title> <booktitle> In Proc. of Second International Conference on Data and Knowledge Systems for manufacturing and Engineering, </booktitle> <address> Maryland, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: On one hand, a DWFMS must support the atomicity of multi-site activities, but on the other hand it may have to respect the autonomy of the local WFMSs regarding the management of access to their data. These are conflicting goals, and as shown in <ref> [7, 3] </ref>, it is impossible to guarantee global atomicity on top of local autonomous transaction managers (TMs). The conflict between local autonomy and global atomicity is particularly evident when a (long duration) global task consists of a combination of local and multi-site activities.
Reference: [4] <author> Hector Garcia-Molina and Ken Salem. </author> <title> SAGAS. </title> <editor> In U. Dayal and I. Traiger, editors, </editor> <booktitle> ACM SIGMOD 1987 Annual Conference, </booktitle> <address> New York NY, </address> <month> May </month> <year> 1987. </year> <journal> ACM Press. SIGMOD Record, </journal> <volume> 16(3) </volume> <pages> 249-259. </pages>
Reference-contexts: Therefore the atomicity of activity a i is compromised in favor of retaining atomicity within a given site s. Such inconsistencies are easily detected, and may either be tolerated, in cases where it is semantically allowable, or fixed by a compensating operation (as in <ref> [4] </ref>). 3. Level GG (Global to Global) | This "two-dimensional" mode atomically binds together several multi-site and local activities. It enforces global atomicity, i.e., local aborts imply full rollback of all updates at all sites, and therefore necessarily violates local autonomy.
Reference: [5] <author> George T. Heineman and Gail E. Kaiser. </author> <title> An architecture for integrating concurrency control into environment frameworks. </title> <booktitle> In 17th International Conference on Software Engineering, </booktitle> <pages> pages 305-313, </pages> <address> Seattle WA, April 1995. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Our atomicity model, presented in Section 3, assumes an underlying execution model and system architecture, which we first discuss in Section 2. This execution model has been implemented in the Oz DWFMS [1] on top of its rule-based workflow modeling language and the Pern transaction component <ref> [5] </ref>, and is outside the scope of this paper. 2 System Architecture and Execution Model A DWFMS consists of a set of local WFMSs that share no resources and communicate via message passing.
Reference: [6] <author> Nancy A. Lynch. </author> <title> Multilevel atomicity | a new correctness criterion for database concurrency control. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 8(4) </volume> <pages> 484-502, </pages> <month> December </month> <year> 1983. </year>
Reference-contexts: Conventional transaction managers ensure atomicity within the context of isolated transactions; transactions are rolled back as needed. We are concerned here mainly with recovery atomicity as opposed to concurrency atomicity (as defined in <ref> [6] </ref>). WFMSs access and manipulate data in ways that cannot abide by such restrictions: (1) Activities may entail much work and require hours or days of operation.
Reference: [7] <author> Nandit Soparkar, Henry F. Korth, and Abraham Silberschatz. </author> <title> Failure-resilient transaction management in multidatabases. </title> <journal> Computer, </journal> <volume> 24(12) </volume> <pages> 28-36, </pages> <month> December </month> <year> 1991. </year> <month> 5 </month>
Reference-contexts: On one hand, a DWFMS must support the atomicity of multi-site activities, but on the other hand it may have to respect the autonomy of the local WFMSs regarding the management of access to their data. These are conflicting goals, and as shown in <ref> [7, 3] </ref>, it is impossible to guarantee global atomicity on top of local autonomous transaction managers (TMs). The conflict between local autonomy and global atomicity is particularly evident when a (long duration) global task consists of a combination of local and multi-site activities. <p> Each WFMS consists of a local data manager (DM), local transaction manager (TM), and local workflow manager (WFM). We focus on operational autonomy (more specifically on execution and control autonomy as defined in <ref> [7] </ref>) and ignore issues of design autonomy, thus we assume that the TM components in all sites are structurally similar although sites may consist of heterogeneous workflow engines and/or workflow processes and employ different concurrency control policies.
References-found: 7

