URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1997/97-25.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1997.html
Root-URL: http://www.cs.rutgers.edu
Email: E-mail: dietzf@ls2.informatik.uni-dortmund.de.  E-mail: bromille@brics.dk.  E-mail: erez@dimacs.rutgers.edu.  E-mail: tardos@cs.elte.hu.  
Title: Linear Hashing  
Author: by Noga Alon ; Martin Dietzfelbinger ; Peter Bro Miltersen ; Erez Petrank ; ; Gabor Tardos ; 
Address: Princeton, NJ 08540.  Dortmund, D-44221 Dortmund, Germany.  Aarhus, Ny Munkegade, Aarhus, Denmark.  P.O.Box 1179, Piscataway, NJ 08855-1179, USA.  Pf. 127, Budapest, H-1364 Hungary  Princeton, NJ 08540.  
Affiliation: Institute for Advanced Study,  at Tel Aviv University. 3 Fachbereich Informatik, Lehrstuhl II, Universitat  University of  University of Toronto. 10 Mathematical Institute of the Hungarian Academy of Sciences,  and Institute for Advanced Study,  
Date: 1997  
Note: July  2 Research supported in part by a USA-Israeli BSF grant, by the Sloan Foundation grant No. 96-6-2, by an NEC Research Institute grant and by the Hermann Minkowski Minerva Center for Geometry  4 Partially supported by DFG grant Di 412/5-1. 5 BRICS, Centre of the Danish National Research Foundation,  6 Supported by the ESPRIT Long Term Research Programme of the EU under project number 20244 (ALCOM-IT). Part of this work was done while the author was at the University of Toronto 7 DIMACS post-doctoral fellow 8 DIMACS,  9 Part of this work was done while the author was visiting the  11 Supported by NSF grants CCR-95-03254 and DMS-9304580, a grant from Fuji Bank and the grant OTKA-F014919. Part of this work was done while the author was visiting the University of Toronto. DIMACS is a partnership of Rutgers University, Princeton University, AT&T Labs, Bellcore, and Bell Labs. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 97-25 
Abstract-found: 1
Intro-found: 1
Reference: [ABI86] <author> N. Alon, L. Babai and A. Itai, </author> <title> A fast and simple randomized parallel algorithm for the maximal independent set problem. </title> <journal> J. </journal> <note> Algorithms 7 (1986) 567-583. </note>
Reference-contexts: One immediate such result is obtained by looking at the class of d-degree polynomials over finite fields, where d = c log n= log log n (see, e.g., <ref> [ABI86] </ref>.) It is easy to see that - 4 - this class maps each d elements of the domain independently to the range, and thus, the bound that applies to the class of all functions also applies to this class.
Reference: [AS92] <author> N. Alon and J. H. Spencer, </author> <title> The Probabilistic Method, </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1992. </year>
Reference: [AHNR95] <author> A. Andersson, T. Hagerup, S. Nilsson, and R. Raman, </author> <title> Sorting in linear time?, </title> <booktitle> in: Proc. 27th ACM Symposium on Theory of Computing, </booktitle> <year> 1995, </year> <pages> pp. 427-436. </pages>
Reference-contexts: Tighter bounds should be possible. Another question is which fine-grained property other well known hash families have. Examples of the families we have in mind include: Arithmetic over Z p [CW79, FKS84] (with h a;b (x) = (ax + b mod p) mod n), integer multiplication <ref> [DHKP93, AHNR95] </ref> (with h a (x) = (ax mod 2 k ) div 2 kl ), Boolean convolution [MNT93] (with h a (x) = affix projected to some subspace).
Reference: [CW79] <author> J. L. Carter and M. N. Wegman, </author> <title> Universal classes of hash functions, </title> <institution> J. Comput. Syst. Sci. </institution> <month> 18 </month> <year> (1979) </year> <month> 143-154. </month>
Reference-contexts: The families from [S89] and [DM90] are somewhat complex to implement while the class of linear maps requires only very basic bit operations (as discussed already in <ref> [CW79] </ref>). It is therefore desirable to study this class, and this is the main purpose of the present paper. 1.3 Notation If S is a subset of the domain D of a function h we use h (S) to denote fh (s) j s 2 Sg. <p> Tighter bounds should be possible. Another question is which fine-grained property other well known hash families have. Examples of the families we have in mind include: Arithmetic over Z p <ref> [CW79, FKS84] </ref> (with h a;b (x) = (ax + b mod p) mod n), integer multiplication [DHKP93, AHNR95] (with h a (x) = (ax mod 2 k ) div 2 kl ), Boolean convolution [MNT93] (with h a (x) = affix projected to some subspace).
Reference: [CLR90] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: is for the class of linear maps over Z 2 , i.e., is it as good as O (log s= log log s)? We leave this as an open question. 1.1 Motivation There is no doubt that the method of implementing a dictionary by hashing with chaining, recommended in textbooks <ref> [CLR90, GBY90] </ref> especially for situations with many update operations, is a practically important scheme.
Reference: [DHKP93] <author> M. Dietzfelbinger, T. Hagerup, J. Katajainen, and M. Penttonen, </author> <title> A reliable randomized algorithm for the closest-pair problem, </title> <type> Technical Report 513, </type> <institution> Fach-bereich Informatik, Universitat Dortmund, </institution> <year> 1993. </year>
Reference-contexts: Tighter bounds should be possible. Another question is which fine-grained property other well known hash families have. Examples of the families we have in mind include: Arithmetic over Z p [CW79, FKS84] (with h a;b (x) = (ax + b mod p) mod n), integer multiplication <ref> [DHKP93, AHNR95] </ref> (with h a (x) = (ax mod 2 k ) div 2 kl ), Boolean convolution [MNT93] (with h a (x) = affix projected to some subspace).
Reference: [DM90] <editor> M. Dietzfelbinger and F. Meyer auf der Heide, </editor> <title> Dynamic hashing in real time, </title> <editor> in: J. Buchmann, H. Ganzinger, W. J. Paul (Eds.): </editor> <booktitle> Informatik Festschrift zum 60. </booktitle> <editor> Geburtstag von Gunter Hotz, </editor> <title> Teubner-Texte zur Informatik, Band 1, </title> <editor> B. G. </editor> <publisher> Teubner, </publisher> <year> 1992, </year> <pages> pp. </pages> <month> 95-119. </month> <title> (A preliminary version appeared under the title "A New Universal Class of Hash Functions and Dynamic Hashing in Real Time" in ICALP'90.) </title>
Reference-contexts: For other simple hash classes such bounds on the worst case bucket size are not available or are even wrong (see Theorem 8); other, more sophisticated hash families <ref> [S89, DM90, DGMP92] </ref> that do guarantee small maximal bucket sizes consist of functions with higher evaluation time. <p> time for certain operations is absolutely necessary, the known two-level hashing schemes can be used, e. g., the FKS scheme [FKS84] for static dictionaries; dynamic perfect hashing [DKMHRT94] for the dynamic case with constant time lookups and expected time O (n) for n update operations; and the "real-time dictionaries" from <ref> [DM90] </ref> that perform each operation in constant time, with high probability. <p> More efficient (but much larger) families where given by Siegel [S89] and by Dietzfelbinger and Meyer auf der Heide <ref> [DM90] </ref>. Both provide families of size jU j n * such that the functions can be evaluated in O (1) time on a RAM and with L n n = fi (log n= log log n). The families from [S89] and [DM90] are somewhat complex to implement while the class of <p> [S89] and by Dietzfelbinger and Meyer auf der Heide <ref> [DM90] </ref>. Both provide families of size jU j n * such that the functions can be evaluated in O (1) time on a RAM and with L n n = fi (log n= log log n). The families from [S89] and [DM90] are somewhat complex to implement while the class of linear maps requires only very basic bit operations (as discussed already in [CW79]).
Reference: [DKMHRT94] <author> M. Dietzfelbinger, A. Karlin, K. Mehlhorn, F. Meyer Auf Der Heide, H. Rohnert, R.E. Tarjan, </author> <title> Dynamic perfect hashing: upper and lower bounds, </title> <journal> SIAM J. Comput. </journal> <month> 23 </month> <year> (1994) </year> <month> 738-761. </month>
Reference-contexts: Of course, if worst case constant time for certain operations is absolutely necessary, the known two-level hashing schemes can be used, e. g., the FKS scheme [FKS84] for static dictionaries; dynamic perfect hashing <ref> [DKMHRT94] </ref> for the dynamic case with constant time lookups and expected time O (n) for n update operations; and the "real-time dictionaries" from [DM90] that perform each operation in constant time, with high probability.
Reference: [DGMP92] <author> M. Dietzfelbinger, J. Gil, Y. Matias, and N. Pippenger, </author> <title> Polynomial hash functions are reliable, </title> <publisher> ICALP'92, Springer LNCS 623, </publisher> <pages> pp. 235-246. </pages>
Reference-contexts: For other simple hash classes such bounds on the worst case bucket size are not available or are even wrong (see Theorem 8); other, more sophisticated hash families <ref> [S89, DM90, DGMP92] </ref> that do guarantee small maximal bucket sizes consist of functions with higher evaluation time.
Reference: [FKS84] <author> M. L. Fredman, J. Komlos, and E. Szemeredi, </author> <title> Storing a sparse table with O(1) worst case access time, </title> <journal> J. Ass. Comput. Mach. </journal> <month> 31 </month> <year> (1984) </year> <month> 538-544. </month>
Reference-contexts: Of course, if worst case constant time for certain operations is absolutely necessary, the known two-level hashing schemes can be used, e. g., the FKS scheme <ref> [FKS84] </ref> for static dictionaries; dynamic perfect hashing [DKMHRT94] for the dynamic case with constant time lookups and expected time O (n) for n update operations; and the "real-time dictionaries" from [DM90] that perform each operation in constant time, with high probability. <p> Tighter bounds should be possible. Another question is which fine-grained property other well known hash families have. Examples of the families we have in mind include: Arithmetic over Z p <ref> [CW79, FKS84] </ref> (with h a;b (x) = (ax + b mod p) mod n), integer multiplication [DHKP93, AHNR95] (with h a (x) = (ax mod 2 k ) div 2 kl ), Boolean convolution [MNT93] (with h a (x) = affix projected to some subspace).
Reference: [GBY90] <author> G. Gonnet and R. Baeza-Yates, </author> <title> Handbook of Algorithms and Data Structures, </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: is for the class of linear maps over Z 2 , i.e., is it as good as O (log s= log log s)? We leave this as an open question. 1.1 Motivation There is no doubt that the method of implementing a dictionary by hashing with chaining, recommended in textbooks <ref> [CLR90, GBY90] </ref> especially for situations with many update operations, is a practically important scheme.
Reference: [GR90] <author> S. W. Graham and C. J. Ringrose, </author> <title> Lower bounds for least quadratic nonresidues, in: Analytic Number Theory: </title> <booktitle> Proceedings of a Conference in Honor of P.T. </booktitle> <editor> Bateman, B. C. Berndt et al. (Eds.), </editor> <publisher> Birkhauser, </publisher> <address> Boston, </address> <year> 1990. </year> <month> - 15 </month> - 
Reference-contexts: Note that for every nonzero element a 2 Z p , the set aS ( mod p) is either the set of all quadratic residues or the set of all quadratic non-residues modulo p. The main result of Graham and Ringrose <ref> [GR90] </ref> asserts that for infinitely many primes p, the smallest quadratic nonresidue modulo p is at least (log p log log log p) (this result holds for primes p 3 ( mod 4) as well, as follows from the remark at the end of [GR90]). <p> main result of Graham and Ringrose <ref> [GR90] </ref> asserts that for infinitely many primes p, the smallest quadratic nonresidue modulo p is at least (log p log log log p) (this result holds for primes p 3 ( mod 4) as well, as follows from the remark at the end of [GR90]).
Reference: [MCW78] <author> G. Markowsky, J. L. Carter, and M. N. Wegman, </author> <title> Analysis of a universal class of hash functions, </title> <booktitle> in: Proc. 7th Conference on Math. Found. of Computer Science (MFCS), 1978, </booktitle> <publisher> Springer LNCS 64, </publisher> <pages> pp. 345-354. </pages>
Reference-contexts: Markowsky, Carter and Wegman <ref> [MCW78] </ref> showed that for this case L s s (H) = O (s 1=4 ). Mehlhorn and Vishkin [MV84] improved on this result (although this is implicit in their paper) and showed that L s s (H) = O (2 log s ).
Reference: [MV84] <author> K. Mehlhorn and U. Vishkin, </author> <title> Randomized and deterministic simulations of PRAMs by parallel machines with restricted granularity of parallel memories., </title> <note> Acta Informatica 21 (1984) 339-374. </note>
Reference-contexts: Markowsky, Carter and Wegman [MCW78] showed that for this case L s s (H) = O (s 1=4 ). Mehlhorn and Vishkin <ref> [MV84] </ref> improved on this result (although this is implicit in their paper) and showed that L s s (H) = O (2 log s ).
Reference: [MNT93] <author> Y. Mansour, N. Nisan, and P. Tiwari, </author> <title> The computational complexity of universal hashing. </title> <note> Theoretical Computer Science 107 (1993) 121-133. </note>
Reference-contexts: Examples of the families we have in mind include: Arithmetic over Z p [CW79, FKS84] (with h a;b (x) = (ax + b mod p) mod n), integer multiplication [DHKP93, AHNR95] (with h a (x) = (ax mod 2 k ) div 2 kl ), Boolean convolution <ref> [MNT93] </ref> (with h a (x) = affix projected to some subspace).
Reference: [PA95] <author> J. Pach and P. K. Agarwal, </author> <title> Combinatorial Geometry, </title> <publisher> Wiley 1995. </publisher>
Reference-contexts: Clearly jS 0 j &lt; n. It is well known that each of the n most popular lines contains at least m n 1=3 =3 points of S 0 . This is usually proved for the same grid in the Euclidean plane (see e.g. <ref> [PA95] </ref>, pp. 178-179) but that result implies the same for our grid in F 2 . Now let n = p k and let F 0 be the subfield in F of p elements.
Reference: [S89] <author> A. Siegel, </author> <title> On universal classes of fast high performance hash functions, their time-space tradeoff, and their application, </title> <booktitle> in: Proc. 30th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1989, </year> <pages> pp. 20-25. </pages>
Reference-contexts: For other simple hash classes such bounds on the worst case bucket size are not available or are even wrong (see Theorem 8); other, more sophisticated hash families <ref> [S89, DM90, DGMP92] </ref> that do guarantee small maximal bucket sizes consist of functions with higher evaluation time. <p> More efficient (but much larger) families where given by Siegel <ref> [S89] </ref> and by Dietzfelbinger and Meyer auf der Heide [DM90]. Both provide families of size jU j n * such that the functions can be evaluated in O (1) time on a RAM and with L n n = fi (log n= log log n). The families from [S89] and [DM90] <p> by Siegel <ref> [S89] </ref> and by Dietzfelbinger and Meyer auf der Heide [DM90]. Both provide families of size jU j n * such that the functions can be evaluated in O (1) time on a RAM and with L n n = fi (log n= log log n). The families from [S89] and [DM90] are somewhat complex to implement while the class of linear maps requires only very basic bit operations (as discussed already in [CW79]).
Reference: [VC71] <author> V. A. Vapnik and A. Y. Chervonenkis, </author> <title> On the uniform convergence of relative frequencies of events to their probabilities, </title> <journal> Theory of Prob. </journal> <note> Applications 16 (1971) 264-280. </note>
Reference-contexts: Thus, the probability of E 1 must be small. We remark here that a somewhat similar line of reasoning was used in the seminal paper of Vapnik and Chervonenkis <ref> [VC71] </ref>.
References-found: 18

