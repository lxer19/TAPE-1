URL: ftp://ftp.cs.caltech.edu/tr/cs-tr-96-19.ps.Z
Refering-URL: ftp://ftp.cs.caltech.edu/tr/INDEX.html
Root-URL: http://www.cs.caltech.edu
Email: fmani, schoolerg@cs.caltech.edu  
Title: Designing Directories in Distributed Systems: A Systematic Framework  
Author: K. Mani Chandy and Eve M. Schooler 
Keyword: Key words: Distributed systems, directories, design frameworks, theory of process knowledge, estimation, performance models, multicast.  
Address: Pasadena, California 91125  
Affiliation: Computer Science Department, 256-80 California Institute of Technology  
Abstract: This paper proposes a framework for the systematic design of directory-based distributed applications. We evaluate a space of directory designs using our framework. We present a case study consisting of design, implementation and analysis of directories for a multi-cast application. Our framework is based on a model that extends the formal concept of process knowledge in distributed systems. This concept is used informally in phrases such as "process p knows when it is in state s that process q is active." We show that this definition of knowledge is too strong for many distributed applications, including directory design. We propose a weaker concept: estimation. We define the meaning of phrases of the form: "process p in state s estimates with probability 0.9 that process q is active." We specify directory design as an optimization problem with the objective function of maximizing estimation probabilities, and with constraints on the amount of bandwidth, computation and storage used. We show how this specification helps in a systematic analysis of alternative directory designs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. M. Chandy and J. Misra. </author> <title> How processes learn. </title> <journal> Journal of Distributed Computing, </journal> <volume> 1 </volume> <pages> 40-52, </pages> <year> 1986. </year>
Reference-contexts: Informal discussions about distributed systems may use phrases of the form: "process p in state s knows that process q is active." This means that process q is active in all reachable (global) states of the system in which process p is in state s <ref> [1, 4] </ref>. A global state is a state of the entire system, as opposed to a process' local state. In general, "p knows x" is a predicate on p's local state, where p is a process and x is a predicate on global states of the system. <p> In more philosophical terms, this statement says that a process only knows truths; a process cannot know falsehood. Early philosophical works on knowledge defined the concept in terms of a set of axioms [5]. Knowledge Gain and Loss. Theorems <ref> [1] </ref> about knowledge gain and loss that are relevant to our discussion about directories are given next. Knowledge Gain Theorem: A process can only gain knowledge about another process by receiving messages. Knowledge Loss Theorem: A process can only lose knowledge about another process by sending messages.
Reference: [2] <author> S. Deering. </author> <title> Host extensions for ip multicasting. </title> <type> RFC 1054, </type> <institution> Stanford University, Stanford, </institution> <address> CA, </address> <year> 1988. </year>
Reference-contexts: Implementation Each directory process uses periodic multicast messaging <ref> [2] </ref> to disseminate and collect user state information. State information includes naming and addressing information for a user. As a result, a directory is able to track the most recent location where a user resides, as well as statistics on previous and alternate locations. <p> Future Work In the future, we will evaluate the applicability of other fully distributed and hybrid architectures (a combination of distributed and hierarchical approaches). Our interest stems from two important developments. First, the emergence of IP multicast <ref> [2] </ref> allows a reduction in the overhead associated with group communication, which makes efficient multiway messaging tractable in the wide area.
Reference: [3] <author> S. Floyd, V. Jacobson, S. McCanne, L. Zhang, and C. Liu. </author> <title> A reliable multicast framework for light-weight session and application level framing. </title> <journal> SIGCOMM Computer Communications Review, </journal> <volume> 25 </volume> <pages> 342-356, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: For applications that permit inconsistencies among directory contents [7], or those that only need eventual consistency <ref> [3] </ref>, the fully replicated directory provides the greatest immediacy of state information, as there are no intermediaries required. More moderate forms of this architecture use coarser grain replication, providing just a few replicated directories.
Reference: [4] <author> J. Y. Halpern and Y. Moses. </author> <title> Knowledge and common knowledge in a distributed environment. </title> <booktitle> In SIGACT-SIGOPS Symposium on Principles of Distributed Computing, </booktitle> <address> Vancouver, Canada, </address> <month> August </month> <year> 1984. </year> <note> ACM. </note>
Reference-contexts: Informal discussions about distributed systems may use phrases of the form: "process p in state s knows that process q is active." This means that process q is active in all reachable (global) states of the system in which process p is in state s <ref> [1, 4] </ref>. A global state is a state of the entire system, as opposed to a process' local state. In general, "p knows x" is a predicate on p's local state, where p is a process and x is a predicate on global states of the system.
Reference: [5] <author> J. Hintikka. </author> <title> Knowledge and Belief. </title> <publisher> Cornell University Press, </publisher> <year> 1962. </year>
Reference-contexts: In more philosophical terms, this statement says that a process only knows truths; a process cannot know falsehood. Early philosophical works on knowledge defined the concept in terms of a set of axioms <ref> [5] </ref>. Knowledge Gain and Loss. Theorems [1] about knowledge gain and loss that are relevant to our discussion about directories are given next. Knowledge Gain Theorem: A process can only gain knowledge about another process by receiving messages.
Reference: [6] <author> P. V. Mockapetris and K. J. Dunlap. </author> <title> Development of the domain name system. </title> <booktitle> In SIGCOMM Symposium on Communications Architectures and Protocols, </booktitle> <pages> pages 123-133, </pages> <address> Stanford, CA, </address> <month> August </month> <year> 1988. </year> <note> ACM. </note>
Reference-contexts: This situation is handled by a multilevel directory, which is comprised of a hard-copy directory that changes once a year and a more current directory maintained by the telephone companies. In the Internet realm, the Domain Name Service (DNS) provides a mapping between machine names and machine addresses <ref> [6] </ref>. Again, the directory is multilevel, but the DNS directories change dynamically.
Reference: [7] <author> E. M. Schooler. </author> <title> A multicast-based user directory service for synchronous rendezvous. </title> <type> Master's thesis, </type> <institution> Califor-nia Institute of Technology, Pasadena, </institution> <address> California 91125, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: For applications that permit inconsistencies among directory contents <ref> [7] </ref>, or those that only need eventual consistency [3], the fully replicated directory provides the greatest immediacy of state information, as there are no intermediaries required. More moderate forms of this architecture use coarser grain replication, providing just a few replicated directories. <p> A Case Study In this section, we describe a case study that explores a particular point in the directory design space, and that illustrates how architectural decisions are driven by application context. 5.1. Design We have designed a directory that dynamically updates user location information across wide-area networks <ref> [7] </ref>. It is a fully distributed architecture, meaning every process participates in the directory protocol. The motivation behind this experiment was to help collaborative applications find user addresses for those users it wishes to invite to participate in multimedia sessions.
References-found: 7

