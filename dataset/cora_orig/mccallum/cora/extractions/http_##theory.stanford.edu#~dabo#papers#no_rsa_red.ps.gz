URL: http://theory.stanford.edu/~dabo/papers/no_rsa_red.ps.gz
Refering-URL: http://theory.stanford.edu/~dabo/publications.html
Root-URL: 
Email: dabo@cs.stanford.edu venkie@microsoft.com  
Title: Breaking RSA May Be Easier Than Factoring (Extended Abstract)  
Author: Dan Boneh Ramarathnam Venkatesan 
Keyword: RSA, Factoring, Straight line programs, Algebraic circuits.  
Affiliation: Stanford University Microsoft Research  
Abstract: We provide evidence that breaking low-exponent rsa cannot be equivalent to factoring integers. We show that an algebraic reduction from factoring to breaking low-exponent rsa can be converted into an efficient factoring algorithm. Thus, in effect an oracle for breaking rsa does not help in factoring integers. Our result suggests an explanation for the lack of progress in proving that breaking rsa is equivalent to factoring. We emphasize that our results do not expose any specific weakness in the rsa system.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Boneh, R. Lipton, </author> <title> "Black box fields and their application to cryptography", </title> <booktitle> Proc. of Crypto '96, </booktitle> <pages> pp. 283-297. </pages>
Reference-contexts: 1 Introduction Two longstanding open problems in cryptography are to prove or disprove that breaking the rsa system [10] is as hard as factoring integers and that breaking the Diffie-Hellman protocol [3] is as hard as computing discrete log. Although some recent progress has been made on the second problem <ref> [8, 9, 1] </ref> very little progress has been made on the first. A harder version of the first problem asks whether breaking low exponent rsa (le-rsa) is as hard as factoring.
Reference: [2] <author> D. Coppersmith, </author> <title> "Finding a small root of a univariate modular equation", </title> <booktitle> Proc. of Eurocrypt '96, </booktitle> <pages> pp. 155-165. </pages>
Reference-contexts: Our methods leave it open that reductions using bit manipulations (i.e. non-algebraic operations as described in Section 3) on the outputs of an rsa oracle may reduce factoring to breaking rsa. However, we note that current attacks on low public exponent rsa <ref> [4, 2] </ref> decrypt a message without factoring the modulus. Our results suggest that this is no accident, since breaking le-rsa may be easier than factoring. 2 Straight line programs Our results make use of straight line programs for polynomials. <p> Since our results may suggest that breaking le-rsa is not as hard as factoring it is interesting to note that attacks on low public exponent rsa due to Hastad [4] and Coppersmith <ref> [2] </ref> break the rsa system (i.e. decrypt messages without the private key) but do not factor the modulus. In conjunction with our results this suggests further evidence that breaking le-rsa is easier than factoring.
Reference: [3] <author> W. Diffie, M. Hellman, </author> <title> "New directions in cryptography", </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> vol. 22, no. 6, </volume> <pages> pp. 644-654, </pages> <year> 1976. </year>
Reference-contexts: 1 Introduction Two longstanding open problems in cryptography are to prove or disprove that breaking the rsa system [10] is as hard as factoring integers and that breaking the Diffie-Hellman protocol <ref> [3] </ref> is as hard as computing discrete log. Although some recent progress has been made on the second problem [8, 9, 1] very little progress has been made on the first. A harder version of the first problem asks whether breaking low exponent rsa (le-rsa) is as hard as factoring.
Reference: [4] <author> J. Hastad, </author> <title> "Solving simultaneous modular equations of low degree", </title> <journal> SIAM Journal of Computing, </journal> <volume> vol. 17, </volume> <pages> pp 336-341, </pages> <year> 1988. </year>
Reference-contexts: Our methods leave it open that reductions using bit manipulations (i.e. non-algebraic operations as described in Section 3) on the outputs of an rsa oracle may reduce factoring to breaking rsa. However, we note that current attacks on low public exponent rsa <ref> [4, 2] </ref> decrypt a message without factoring the modulus. Our results suggest that this is no accident, since breaking le-rsa may be easier than factoring. 2 Straight line programs Our results make use of straight line programs for polynomials. <p> Since our results may suggest that breaking le-rsa is not as hard as factoring it is interesting to note that attacks on low public exponent rsa due to Hastad <ref> [4] </ref> and Coppersmith [2] break the rsa system (i.e. decrypt messages without the private key) but do not factor the modulus. In conjunction with our results this suggests further evidence that breaking le-rsa is easier than factoring.
Reference: [5] <author> S. Lang, </author> <title> "Algebra", </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: Then for any constant 0 6= c 2 F p the polynomial gcd (f (x); x m c m ) has odd degree if and only if x is a root of f (x). Proof We know (see <ref> [5] </ref>) that when c 6= 0: x m c m = djm x ) (mod p) where d (x) is the d'th cyclotomic polynomial. It's degree is '(d) and it is irreducible over F p . Observe that '(d) is even for all odd integers d &gt; 1.
Reference: [6] <author> A. Lenstra, H.W. Lenstra, </author> <title> "Algorithms in Number Theory", Handbook of Theoretical Computer Science (Volume A: Algorithms and Complexity), </title> <publisher> Elsevier and MIT Press, Ch. </publisher> <pages> 12, pp. 673-715, </pages> <year> 1990. </year>
Reference-contexts: A factorization is obtained once the polynomial evaluates to a non-zero non-invertible element modulo N (if 0 6= x 2 Z N is not invertible then gcd (N; x) gives a non-trivial factor of N ). Both Pollard's p 1 factoring <ref> [6] </ref> and Elliptic curve factoring [7] can be viewed as such (one evaluates the polynomial x B 1 for some smooth integer B, the other evaluates the B'th division polynomial of a random elliptic curve at a random point). <p> A factorization is obtained once the straight line program outputs a non-zero non-invertible element modulo N . Both Pollard's p 1 factoring <ref> [6] </ref> and Elliptic curve factoring [7] can be viewed as straight line factoring algorithms. In this section we show that an oracle for breaking low exponent rsa cannot aid straight line factoring algorithms as long as the algorithm doesn't make too many oracle calls.
Reference: [7] <author> H. W. Lenstra, </author> <title> "Factoring integers with elliptic curves", </title> <journal> Annals of Math., </journal> <volume> Vol. 126, </volume> <pages> pp. 649-673, </pages> <year> 1987. </year>
Reference-contexts: A factorization is obtained once the polynomial evaluates to a non-zero non-invertible element modulo N (if 0 6= x 2 Z N is not invertible then gcd (N; x) gives a non-trivial factor of N ). Both Pollard's p 1 factoring [6] and Elliptic curve factoring <ref> [7] </ref> can be viewed as such (one evaluates the polynomial x B 1 for some smooth integer B, the other evaluates the B'th division polynomial of a random elliptic curve at a random point). <p> A factorization is obtained once the straight line program outputs a non-zero non-invertible element modulo N . Both Pollard's p 1 factoring [6] and Elliptic curve factoring <ref> [7] </ref> can be viewed as straight line factoring algorithms. In this section we show that an oracle for breaking low exponent rsa cannot aid straight line factoring algorithms as long as the algorithm doesn't make too many oracle calls.
Reference: [8] <author> U. Maurer, </author> <title> "Towards proving the equivalence of breaking the Diffie-Hellman protocol and computing discrete logarithms", </title> <booktitle> Proc. of Crypto '94, </booktitle> <pages> pp. 271-281. </pages>
Reference-contexts: 1 Introduction Two longstanding open problems in cryptography are to prove or disprove that breaking the rsa system [10] is as hard as factoring integers and that breaking the Diffie-Hellman protocol [3] is as hard as computing discrete log. Although some recent progress has been made on the second problem <ref> [8, 9, 1] </ref> very little progress has been made on the first. A harder version of the first problem asks whether breaking low exponent rsa (le-rsa) is as hard as factoring.
Reference: [9] <author> U. Maurer, S. Wolf, </author> <title> "Diffie-Hellman oracles", </title> <booktitle> Proc. of Crypto '96, </booktitle> <pages> pp. 268-282. </pages>
Reference-contexts: 1 Introduction Two longstanding open problems in cryptography are to prove or disprove that breaking the rsa system [10] is as hard as factoring integers and that breaking the Diffie-Hellman protocol [3] is as hard as computing discrete log. Although some recent progress has been made on the second problem <ref> [8, 9, 1] </ref> very little progress has been made on the first. A harder version of the first problem asks whether breaking low exponent rsa (le-rsa) is as hard as factoring.
Reference: [10] <author> R. Rivest, A. Shamir, L. Adleman, </author> <title> "A method for obtaining digital signatures and public-key cryptosystems", </title> <journal> Communications of the ACM, </journal> <volume> vol. 21, </volume> <pages> pp. 120-126, </pages> <year> 1978. </year>
Reference-contexts: 1 Introduction Two longstanding open problems in cryptography are to prove or disprove that breaking the rsa system <ref> [10] </ref> is as hard as factoring integers and that breaking the Diffie-Hellman protocol [3] is as hard as computing discrete log. Although some recent progress has been made on the second problem [8, 9, 1] very little progress has been made on the first.
References-found: 10

