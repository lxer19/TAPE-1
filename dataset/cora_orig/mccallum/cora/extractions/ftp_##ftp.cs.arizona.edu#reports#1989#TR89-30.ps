URL: ftp://ftp.cs.arizona.edu/reports/1989/TR89-30.ps
Refering-URL: http://www.cs.arizona.edu/research/reports.html
Root-URL: http://www.cs.arizona.edu
Title: 1 The Visualization of Dynamic Memory Management in the Icon Programming Language  
Author: Ralph E. Griswold and Gregg M. Townsend 
Address: Tucson, Arizona 85721  
Affiliation: Department of Computer Science The University of Arizona  
Date: December 22, 1989  
Pubnum: TR 89-30  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> The Icon Programming Language, Ralph E. Griswold and Madge T. </author> <title> Griswold, </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1983. </year>
Reference-contexts: 1. Introduction The Icon programming language <ref> [1] </ref> supports many types of data strings, records, lists, sets, tables, and so on. Data objects vary in size by type and, for some types, from value to value. Object size ranges from one byte to many thousands of bytes. Storage management is automatic.
Reference: 2. <institution> The Implementation of the Icon Programming Language, </institution> <note> Ralph E. </note> <author> Griswold and Madge T. </author> <title> Griswold, </title> <publisher> Princeton University Press, </publisher> <year> 1986. </year>
Reference-contexts: Data objects vary in size by type and, for some types, from value to value. Object size ranges from one byte to many thousands of bytes. Storage management is automatic. Space for an object is allocated when the object is created, and unused space is collected as necessary <ref> [2] </ref>. It is typical for Icon data objects to be created and used in a transient fashion, so that the space they occupy is needed only for a short period of time. Consequently, many Icon programs exhibit a substantial amount of storage throughput. <p> The garbage collection process is fairly complicated, since it is necessary to locate all objects that may be needed for subsequent program execution. See <ref> [2] </ref> for details. <p> In fact, even the implementors of such a system usually do not fully understand how it works in practice and the problems it may have. Displays of memory management have proved this. 7 An example is a heuristic used to accommodate both positional and deque access to lists <ref> [2] </ref>. Since values can be added to any list, space for possible additional values is provided when a list is created to avoid allocating another block as soon as a value is added to a list. Many lists remain fixed in size, however, and this additional space is unused.
Reference: 3. <editor> Icon Allocation History Files, Gregg M. </editor> <title> Townsend, </title> <type> technical report IPD98a, </type> <institution> Department of Computer Science, The University of Arizona, </institution> <year> 1989. </year>
Reference: 4. <institution> Supplementary Information for the Implementation of Version 7.9 of Icon, </institution> <type> Ralph E. Griswold, technical report IPD-51d, </type> <institution> Department of Computer Science, The University of Arizona, </institution> <year> 1989. </year>
Reference-contexts: The heuristic was changed as a result, and extra space now is allocated only for empty lists, since these are the main candidates for added values <ref> [4] </ref>. Two aspects of storage management are particularly troublesome: thrashing and garbage collection in the presence of long-lived data. Thrashing occurs when most allocated objects must be saved and only a few can be collected for subsequent allocation. <p> The overhead for calling these functions is undetectable unless allocation history information is being written. The description of the information contained in allocation history files is given in Reference 3. The displays contained in this report were produced under Version 7.9 of Icon <ref> [4] </ref>. 8. Visualization Programs There are several programs for producing displays [5]. These include drivers for the AED and RasterTech color-graphics monitors, color Quickdraw for the Macintosh, and color PostScript (which is used in this report).
Reference: 5. <institution> Programs for Visualizing Icon Memory Management, Gregg M. </institution> <type> Townsend, technical report IPD99a, </type> <institution> Department of Computer Science, The University of Arizona, </institution> <year> 1989. </year>
Reference-contexts: The description of the information contained in allocation history files is given in Reference 3. The displays contained in this report were produced under Version 7.9 of Icon [4]. 8. Visualization Programs There are several programs for producing displays <ref> [5] </ref>. These include drivers for the AED and RasterTech color-graphics monitors, color Quickdraw for the Macintosh, and color PostScript (which is used in this report). The processing needed for visualization programs consists of two parts: the analysis of allocation history files and devicespecific actions.
Reference: 6. <author> Notes on MemMon Internals, Gregg M. </author> <title> Townsend, </title> <type> technical report IPD97a, </type> <institution> Department of Computer Science, The University of Arizona, </institution> <year> 1989. </year>
Reference-contexts: The processing needed for visualization programs consists of two parts: the analysis of allocation history files and devicespecific actions. Much of the processing is common to all visualization programs and is isolated in device-independent routines <ref> [6] </ref>. Producing a new visualization program consists largely of providing device-specific code. 9. Comments on Visualization Visualization of storage management in Icon has provided many new insights into storage management. It also has suggested other possibilities for program visualization and pointed out some inherent difficulties.
Reference: 7. <institution> The Forms of Color, </institution> <address> Karl Gerstner, </address> <publisher> MIT Press, </publisher> <year> 1986. </year> <month> 9 </month>
Reference-contexts: The use of color to differentiate between different types of objects is intended to make direct use of color discrimination in the human visual system. Color perception is, however, a complex and relatively poorly understood phenomenon with many psychological aspects <ref> [7] </ref>. Color perception is centrally important in the design of the visualization programs. Different color palettes applied to the same display produce dramatically different reactions from viewers. A program that is interesting with one color scheme is dull with another.
References-found: 7

