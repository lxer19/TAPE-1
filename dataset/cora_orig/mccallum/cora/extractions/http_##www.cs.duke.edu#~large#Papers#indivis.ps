URL: http://www.cs.duke.edu/~large/Papers/indivis.ps
Refering-URL: http://www.cs.duke.edu/~large/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: On showing lower bounds for external-memory computational geometry problems  
Author: Lars Arge Peter Bro Miltersen CGC BRICS 
Address: Durham, NC, USA Aarhus, Denmark  
Affiliation: Dept. of Computer Science Dept. of Computer Science Duke University University of Aarhus  
Abstract: In this paper we consider lower bounds for external-memory computational geometry problems. We find that it is not quite clear which model of computation to use when considering such problems. As an attempt of providing a model, we define the external memory Turing machine model, and we derive lower bounds for a number of problems, including the element distinctness problem, in this model. For these lower bounds we make the standard assumption that records are indivisible. Waiving the indivisibility assumption we show how to beat the lower bound for element distinctness. As an alternative model, we briefly discuss an external-memory version of the algebraic computation tree.
Abstract-found: 1
Intro-found: 1
Reference: [Adl96] <author> M. Adler, </author> <title> New coding techniques for improved bandwidth utilization, </title> <booktitle> Proc. IEEE Symp. on Foundations of Comp. Sci., </booktitle> <year> 1996, </year> <pages> pp. 173-182. </pages>
Reference-contexts: This indicates that the indivisibility of records assumption may be a harmful restriction of the class of algorithms we want to consider. (A similar observation is made by Adler for a problem related to matrix transposition <ref> [Adl96] </ref>.) Finally, as an alternative model for external memory computational geometry, we define the external memory algebraic computation tree. This model does not include any indivisibility assump 4 tion and is concerned with computation over reals, rather than integers as the external memory Turing Machine.
Reference: [AFGV97] <author> L. Arge, P. Ferragina, R. Grossi, and J. Vitter, </author> <title> On sorting strings in external memory, </title> <booktitle> Proc. ACM Symp. on Theory of Computation, </booktitle> <year> 1997, </year> <pages> pp. 540-548. </pages>
Reference-contexts: Indivisibility of record is still assumed in their model, but the Aggarwal and Vitter conjecture may not seem so obvious for decision problems. Recently, Arge et al. <ref> [AFGV97] </ref> studied the complexity of sorting strings of records in the 2 comparison I/O-model (and assuming indivisibility of record), and obtained different lower bounds depending on if one is allowed to break the strings into their characters (records) or not.
Reference: [AHNR95] <author> A. Andersson, T. Hagerup, S. Nilsson, and R. Raman, </author> <title> Sorting in linear time?, </title> <booktitle> Proc. ACM Symp. on Theory of Computation, </booktitle> <year> 1995, </year> <pages> pp. 427-436. </pages>
Reference-contexts: However, we show that if we remove the indivisibility of records assumption, the Element Distinctness problem (among other problems) can be solved in O (N=B) I/Os by a Las Vegas algorithm! For this, we use a modification of the internal signature sort of Andersson et al. <ref> [AHNR95] </ref>. The algorithm is not unrealistic though it does take advantage of a certain amount of non-uniformity allowed in our model. <p> Proof : The algorithm is a simple variant of signature sort by Andersson et al. <ref> [AHNR95] </ref>. Let a universal [CW79] class of hash functions h k : f0; 1g r ! f0; 1g s be given, where r = p w log N and s = log (N 2 w). Pick a random h k .
Reference: [AKL93] <author> L. Arge, M. Knudsen, and K. Larsen, </author> <title> A general lower bound on the I/O-complexity of comparison-based algorithms, </title> <booktitle> Proc. Workshop on Algorithms and Data Structures, LNCS 709, </booktitle> <year> 1993, </year> <pages> pp. 83-94. </pages>
Reference-contexts: Aggarwal and Vitter conjectured that their lower bounds for Sorting and Permutation hold even if the indivisibility assumption is waived, but were not able to prove so. The model where comparisons are the only allowed computation on the elements in internal memory was later formalized by Arge et al. <ref> [AKL93] </ref>. They proved that any problem with an (N log 2 N ) comparison model lower bound has a lower bound in the comparison I/O-model of ( N B B ) I/Os. <p> As discussed, the permuting bound (minfN; N B log M N B g) I/Os is a lower bound on Sorting as well, and if the comparison I/O-model is assumed an ( N B log M N B ) I/O bound can be obtained. Using the result in <ref> [AKL93] </ref> on the (N log 2 N ) comparison lower bound implies an ( N B log M N lower bounds on the Element Distinctness problem in the comparison I/O-model as well. However, no lower bound on the problem is know in the general I/O-model. <p> For example one can easily solve the pairwise Orthogonal Line Segment Intersection problem using comparisons only. Thus comparison I/O-model lower bounds matching the upper bounds can be obtained from their comparison model counterparts using the result in <ref> [AKL93] </ref>. However, the rest of the problems cannot be solved using comparisons only. Thus, reductions from e.g. Element Distinctness will not yield interesting lower bounds. <p> In particular we show that the sorting lower bound holds for all the prototype problems discussed previously. Thus we remove the comparison I/O-model assumption for small B and M in the bound for Sorting proved by Aggarwal and Vitter [AV88], we extend the Element Distinctness lower bound proved in <ref> [AKL93] </ref> to the external memory Turing machine model, and we prove a new lower bound on the Extreme Points problem. Using these lower bounds we obtain alternative and improved lower bounds for the computational geometry problems discussed previously. <p> Using these lower bounds we obtain alternative and improved lower bounds for the computational geometry problems discussed previously. We improve the permutation lower bound on the Segment Sorting, All Nearest Neighbors, Convex Hull, and the various Line Segment Intersection problems to the sorting bound. We extend the result in <ref> [AKL93] </ref> to the general I/O model, that is, we prove that the sorting lower bound holds for any problem requiring (N log 2 N ) comparisons. <p> By an order invariant I/O decision tree we mean an I/O decision tree where all functions f v are order invariant. The following Lemma is a version of a theorem found in <ref> [AKL93] </ref>. Lemma 3 If an order invariant I/O decision tree of height t solves a problem, then there is a comparison based algorithm solving the problem using N log B + t T merge (M B; B) comparisons in the worst case.
Reference: [APR + 98] <author> L. Arge, O. Procopiuc, S. Ramaswamy, T. Suel, and J. S. Vitter, </author> <title> Theory and practice of I/O-efficient algorithms for multidimensional batched searching problems, </title> <booktitle> Proc. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1998, </year> <pages> pp. 685-694. </pages>
Reference-contexts: Finally, it is not clear how to show a lower bound for the I/O-complexity of the Extreme Points problem, because it is a decision problem (so the permutation technique does not apply, as no object is constructed), for which the comparison model is not strong enough. In <ref> [GTVV93, AVV98, APR + 98] </ref> external-memory algorithms for a large number of computational geometry problems are developed.
Reference: [Arg95] <author> L. Arge, </author> <title> The I/O-complexity of ordered binary-decision diagram manipulation, </title> <booktitle> Proc. Int. Symp. on Algorithms and Computation, LNCS 1004, </booktitle> <year> 1995, </year> <pages> pp. 82-91. </pages> <note> A complete version appears as BRICS technical report RS-96-29, </note> <institution> University of Aarhus. </institution>
Reference-contexts: Some lower bounds for external-memory graph problems are discussed in <ref> [CGG + 95, Arg95] </ref>. 1.2 Computational geometry lower bounds Our interest in this paper is lower bound for external-memory computational geometry problems. Let us first recall how internal-memory computational geometry lower bounds are usually proved. Some lower bounds are proved in the comparison model.
Reference: [AV88] <author> A. Aggarwal and J. S. Vitter, </author> <title> The Input/Output complexity of sorting and related problems, </title> <journal> Communications of the ACM 31 (1988), </journal> <volume> no. 9, </volume> <pages> 1116-1127. </pages>
Reference-contexts: In this paper we study lower bound for external-memory computational geometry problems. 1.1 The I/O-model and lower bounds for fundamental problems We will be working in variations of the external-memory model of computation introduced by Aggarwal and Vitter <ref> [AV88] </ref>. The model has the following parameters: fl Supported in part by U.S. Army Research Office MURI grant DAAH04-96-1-0013. Part of this work was done while at BRICS, Department of Computer Science, University of Aarhus, Denmark. <p> Large-scale problem instances can be in the range N = 10 10 to N = 10 12 . Aggarwal and Vitter <ref> [AV88] </ref> defined an I/O operation in the model to be a swap of B records from internal memory with B consecutive records from external memory. The measure of performance is then the number of such I/Os needed to solve a given problem. Internal computation is free. <p> In particular we show that the sorting lower bound holds for all the prototype problems discussed previously. Thus we remove the comparison I/O-model assumption for small B and M in the bound for Sorting proved by Aggarwal and Vitter <ref> [AV88] </ref>, we extend the Element Distinctness lower bound proved in [AKL93] to the external memory Turing machine model, and we prove a new lower bound on the Extreme Points problem. Using these lower bounds we obtain alternative and improved lower bounds for the computational geometry problems discussed previously. <p> for all inputs, it is still possible to obtain a somewhat weaker approximation result, where * and some upper bound on the numbers of the input are fixed parameters of the problem, instead of being part of the input. 6 Open problems As already pointed out by Aggarwal and Vitter <ref> [AV88] </ref> the most important open problem in the area of I/O lower bounds is to show lower bounds without assuming indivisibility of records. With the models introduced in this paper, two concrete questions are: 1.
Reference: [AVV98] <author> L. Arge, D. E. Vengroff, and J. S. Vitter, </author> <title> External-memory algorithms for processing line segments in geographic information systems, </title> <note> Algorithmica (to appear in special issues on Geographical Information Systems) 1998. Extended abstract appears in Proc. of Third European Symposium on Algorithms, </note> <year> 1995. </year>
Reference-contexts: Finally, it is not clear how to show a lower bound for the I/O-complexity of the Extreme Points problem, because it is a decision problem (so the permutation technique does not apply, as no object is constructed), for which the comparison model is not strong enough. In <ref> [GTVV93, AVV98, APR + 98] </ref> external-memory algorithms for a large number of computational geometry problems are developed.
Reference: [BO83] <author> M. Ben-Or, </author> <title> Lower bounds for algebraic computation trees, </title> <booktitle> Proc. ACM Symp. on Theory of Computation, </booktitle> <year> 1983, </year> <pages> pp. 80-86. </pages>
Reference-contexts: For such problems, comparison model lower bounds are not interesting (because a lower bound of 1 trivially holds in that model!). Therefore the majority of the lower bounds are proved in the algebraic computation tree model <ref> [Rei72, Rab72, BO83, PS85] </ref>. In [PS85] three fundamental "prototype" problems are identified for this model; Sorting, Element Distinctness and Extreme Points (the problem of computing if a set of points in the plane all are vertices of their convex hull). <p> Usually the lower bound on this problem is proved using a (complicated) connected component proof <ref> [SY82, BO83] </ref>. Here we take advantage of the bounded domain to prove a lower bound using a syntactic reduction from Element Distinctness. Lemma 20 There is a syntactic reduction from Element Distinctness on N records to Extreme Points on N + 2 records. <p> A Las Vegas lower bound for this problem can be shown in essentially the same way as for Element Distinctness. We omit the proof here. If a worst case lower bound is sufficient, an (n log n) comparison lower bound can be found in the literature <ref> [BO83] </ref>, yielding an ( N B log M N B ) bound on the number of I/Os by Theorem 5.
Reference: [CGG + 95] <author> Y.-J. Chiang, M. T. Goodrich, E. F. Grove, R. Tamassia, D. E. Vengroff, and J. S. Vitter, </author> <title> External-memory graph algorithms, </title> <booktitle> Proc. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1995, </year> <pages> pp. 139-149. </pages>
Reference-contexts: Some lower bounds for external-memory graph problems are discussed in <ref> [CGG + 95, Arg95] </ref>. 1.2 Computational geometry lower bounds Our interest in this paper is lower bound for external-memory computational geometry problems. Let us first recall how internal-memory computational geometry lower bounds are usually proved. Some lower bounds are proved in the comparison model. <p> The non-uniformity makes it essential that w can be varied independently of N . Unfortunately, this is not the case for most graph problems (where w = O (log N )) <ref> [CGG + 95] </ref>, so the external memory Turing machine is not an appropriate model for these problems. <p> The reason is that in internal memory one can easily and in linear time obtain the sorted sequence of a set of points from a list of neighbor pairs. In external memory it is in general not possible to obtain the sequence in O (N=B) I/O <ref> [CGG + 95] </ref>. For our final reduction we require a lower bound for the Set Disjointness problem. A Las Vegas lower bound for this problem can be shown in essentially the same way as for Element Distinctness. We omit the proof here.
Reference: [CW79] <author> J.L. Carter and M.N. Wegman, </author> <title> Universal classes of hash functions, </title> <institution> J. Comput. Syst. Sci. </institution> <month> 18 </month> <year> (1979), </year> <pages> 143-154. </pages>
Reference-contexts: Proof : The algorithm is a simple variant of signature sort by Andersson et al. [AHNR95]. Let a universal <ref> [CW79] </ref> class of hash functions h k : f0; 1g r ! f0; 1g s be given, where r = p w log N and s = log (N 2 w). Pick a random h k . First, we make a single pass through all the records. <p> For sufficiently large w, this becomes smaller than M=6. Since the total number of fields in all the records is N w=r = N p p N 2 w, the hash function is collision free on the set of all fields with high probability <ref> [CW79] </ref>. Assume that it is. We now construct a path compressed trie (see, e.g., [Knu73], page 490) with alphabet f0; 1g s in internal memory, containing all the ~ h (x)-vectors.
Reference: [GTVV93] <author> M. T. Goodrich, J.-J. Tsay, D. E. Vengroff, and J. S. Vitter, </author> <title> External-memory computational geometry, </title> <booktitle> Proc. IEEE Symp. on Foundations of Comp. Sci., </booktitle> <year> 1993, </year> <pages> pp. 714-723. </pages>
Reference-contexts: Finally, it is not clear how to show a lower bound for the I/O-complexity of the Extreme Points problem, because it is a decision problem (so the permutation technique does not apply, as no object is constructed), for which the comparison model is not strong enough. In <ref> [GTVV93, AVV98, APR + 98] </ref> external-memory algorithms for a large number of computational geometry problems are developed. <p> The Measure Of Union Of Rectangles problem was discussed in the introduction of this paper and in <ref> [GTVV93] </ref>: Given (the corner coordinates of) a number of axis-parallel rectangles in the plane, compute the area of their union. It is easy to see that this problem is an example of an effectively continuous problem. So are many other natural computational problems in computational geometry.
Reference: [Knu73] <author> D. Knuth, </author> <booktitle> The art of computer programming, </booktitle> <volume> vol. </volume> <month> 3: </month> <title> sorting and searching, </title> <publisher> Addison-Wesley, </publisher> <year> 1973. </year>
Reference-contexts: If T solves an order invariant decision problem using t I/Os in the worst case, then there is a comparison based algorithm solving the problem using N log B + t T merge (M B; B) comparisons in the worst case. According to Knuth <ref> [Knu73] </ref>, if n m, T merge (n; m) m + bn=2 s c 1 + sm, where s = blog n m c. This means that T merge (M B; B) B log B + 3B. Combining this with Theorem 4 we get the following. <p> Since the total number of fields in all the records is N w=r = N p p N 2 w, the hash function is collision free on the set of all fields with high probability [CW79]. Assume that it is. We now construct a path compressed trie (see, e.g., <ref> [Knu73] </ref>, page 490) with alphabet f0; 1g s in internal memory, containing all the ~ h (x)-vectors. Each node in the trie corresponds to some fixed prefix (z 1 ; : : : ; z i ).
Reference: [Min61] <author> M. L. Minsky, </author> <title> Recursive unsolvability of Post's problem of 'tag' and other topics in the theory of Turing machines, </title> <journal> Ann. Math. </journal> <volume> 74 (1961), no. 3, </volume> <pages> 437-454. </pages>
Reference-contexts: Proof : It is well known <ref> [Min61] </ref> that an arbitrary computable functions g : N k ! N can be computed by a while-program using at most 2 auxiliary variables.
Reference: [MSM85] <author> S. Moran, M. Snir, and U. Manber, </author> <title> Applications of Ramsey's theorem to decision tree complexity, </title> <journal> Journal of the ACM 32 (1985), </journal> <pages> 938-949. 20 </pages>
Reference-contexts: This is done primarily to make a direct comparison with our upper bound in Section 4 meaningful. 3.1.1 Deterministic Turing machine model The proof technique we will use to prove the lower bound in this section is an adaption of the Ramsey theoretic technique of Moran et al. <ref> [MSM85] </ref>. Let the parameters N , M and B be fixed. Furthermore, let a domain D be given. An I/O decision tree is a rooted tree. Each node has two associated labels v and f v . The label v is a memory configuration. <p> However, the lower bound we shall show only holds if the trees are restricted to have constant out-degree and we find it more natural to motivate this restriction through the external memory Turing machine model. The following lemma is essentially Theorem 3.5 of <ref> [MSM85] </ref>. A function is order invariant if its value can be determined by performing a number of pairwise comparisons of its arguments, each comparison yielding &lt;, &gt; or =. <p> I/Os in the worst case, then there is a d, so that for all w, there is a Las Vegas I/O decision tree of height t and out-degree d, solving the problem for domain f0; 1g w . 9 Since Lemma 2 is also shown for probabilistic decision tree in <ref> [MSM85] </ref>, one might now think that we just proceed as before. Unfortunately, the model of probabilistic trees given in [MSM85] is not compatible with our model. In [MSM85] the trees contain explicit coin-tossing nodes and these nodes contribute to the depth of the tree. <p> Vegas I/O decision tree of height t and out-degree d, solving the problem for domain f0; 1g w . 9 Since Lemma 2 is also shown for probabilistic decision tree in <ref> [MSM85] </ref>, one might now think that we just proceed as before. Unfortunately, the model of probabilistic trees given in [MSM85] is not compatible with our model. In [MSM85] the trees contain explicit coin-tossing nodes and these nodes contribute to the depth of the tree. With our definition of Las Vegas I/O trees, it becomes difficult to apply the Ramsey theoretic arguments of [MSM85] directly, the problem being that there is <p> out-degree d, solving the problem for domain f0; 1g w . 9 Since Lemma 2 is also shown for probabilistic decision tree in <ref> [MSM85] </ref>, one might now think that we just proceed as before. Unfortunately, the model of probabilistic trees given in [MSM85] is not compatible with our model. In [MSM85] the trees contain explicit coin-tossing nodes and these nodes contribute to the depth of the tree. With our definition of Las Vegas I/O trees, it becomes difficult to apply the Ramsey theoretic arguments of [MSM85] directly, the problem being that there is an infinite number of possibilities of probability distributions <p> the model of probabilistic trees given in <ref> [MSM85] </ref> is not compatible with our model. In [MSM85] the trees contain explicit coin-tossing nodes and these nodes contribute to the depth of the tree. With our definition of Las Vegas I/O trees, it becomes difficult to apply the Ramsey theoretic arguments of [MSM85] directly, the problem being that there is an infinite number of possibilities of probability distributions in a given node, even if we fix the domain and the out-degree of the node. We get around this using the following Lemma. <p> This makes it possible to use the Ramsey theoretic technique of <ref> [MSM85] </ref>. Emulating the proof of their Theorem 3.5 now gives us the following Lemma. Lemma 9 For each N , d, and t, there exists a number M (N; d; t) such that the following holds. <p> Can Element Distinctness be solved by an external memory algebraic decision tree using a linear number of I/Os? We believe that the answers to both questions are no. Acknowledgment The first author would like to thank Michael Ben-Or for directing his attention to the result in <ref> [MSM85] </ref>.
Reference: [PS85] <author> F. P. Preparata and M. I. Shamos, </author> <title> Computational geometry: An introduction, </title> <publisher> Springer--Verlag, </publisher> <year> 1985. </year>
Reference-contexts: For such problems, comparison model lower bounds are not interesting (because a lower bound of 1 trivially holds in that model!). Therefore the majority of the lower bounds are proved in the algebraic computation tree model <ref> [Rei72, Rab72, BO83, PS85] </ref>. In [PS85] three fundamental "prototype" problems are identified for this model; Sorting, Element Distinctness and Extreme Points (the problem of computing if a set of points in the plane all are vertices of their convex hull). <p> For such problems, comparison model lower bounds are not interesting (because a lower bound of 1 trivially holds in that model!). Therefore the majority of the lower bounds are proved in the algebraic computation tree model [Rei72, Rab72, BO83, PS85]. In <ref> [PS85] </ref> three fundamental "prototype" problems are identified for this model; Sorting, Element Distinctness and Extreme Points (the problem of computing if a set of points in the plane all are vertices of their convex hull). <p> In this problem we are given a number of intervals and should decide if any of them overlap. The standard reduction from Element Distinctness consists of converting each of the N elements x i to the interval [x i ; x i ] <ref> [PS85] </ref>. This set of intervals overlap if and only if the elements are not distinct. If we represent an interval by a pair of elements this reduction will also work in the external memory Turing machine model, because the intervals can be produced using only copying of the original elements. <p> Using the well know reductions <ref> [PS85] </ref> from this problem to the Euclidian Minimum Spanning Tree problem or the All Nearest Neighbors problem we then obtain the lower bound on the latter two (for both problems we assume that the result is given as a sequence of pairs of points first on the external tape). <p> As the triangulation is of linear size this can be done in O (N=B) I/Os. 2 The Triangulation problem is a good example of a problem where the usual internal memory reduction from sorting <ref> [PS85] </ref> does not work in the external model. The reason is that in internal memory one can easily and in linear time obtain the sorted sequence of a set of points from a list of neighbor pairs. <p> Vegas Turing machine satisfying the indivisibility assumption solves the Element Distinctness problem using less than ( N B log M N 5 External memory algebraic computation trees In this section we discuss a alternative model for formalizing external memory geometric algorithms, an external memory variant of the algebraic computation tree <ref> [PS85] </ref>. This model does not make the indivisibility assumption. Let the parameters N; B; M and L be given. An external memory algebraic computation tree is a rooted tree, containing four kinds of nodes, decision nodes, computation nodes, read nodes and write nodes.
Reference: [Rab72] <author> M. O. Rabin, </author> <title> Proving simultaneous positivity of linear forms, </title> <institution> J. Comput. Syst. Sci. </institution> <month> 6 </month> <year> (1972), </year> <pages> 639-650. </pages>
Reference-contexts: For such problems, comparison model lower bounds are not interesting (because a lower bound of 1 trivially holds in that model!). Therefore the majority of the lower bounds are proved in the algebraic computation tree model <ref> [Rei72, Rab72, BO83, PS85] </ref>. In [PS85] three fundamental "prototype" problems are identified for this model; Sorting, Element Distinctness and Extreme Points (the problem of computing if a set of points in the plane all are vertices of their convex hull).
Reference: [Rei72] <author> E. M. Reingold, </author> <title> On the optimality of some set algorithms, </title> <editor> J. </editor> <booktitle> ACM 19 (1972), </booktitle> <pages> 649-659. </pages>
Reference-contexts: For such problems, comparison model lower bounds are not interesting (because a lower bound of 1 trivially holds in that model!). Therefore the majority of the lower bounds are proved in the algebraic computation tree model <ref> [Rei72, Rab72, BO83, PS85] </ref>. In [PS85] three fundamental "prototype" problems are identified for this model; Sorting, Element Distinctness and Extreme Points (the problem of computing if a set of points in the plane all are vertices of their convex hull).
Reference: [RW94] <author> Chris Ruemmler and John Wilkes, </author> <title> An introduction to disk drive modeling, </title> <booktitle> IEEE Computer 27 (1994), </booktitle> <volume> no. 3, </volume> <pages> 17-28. </pages>
Reference-contexts: The significance of this bottleneck is increasing as internal computation gets faster, and as parallel computation gains popularity. Currently, technological advances are increasing CPU speeds at an annual rate of 40-60% while disk transfer rates are only increasing by 7-10% annually <ref> [RW94] </ref>. Internal memory sizes are also increasing, but not nearly fast enough to meet the needs of important large-scale applications. In recent years a lot of research has therefore been done in the area of external-memory algorithms.
Reference: [SY82] <author> J. M. Steele and A. C. Yao, </author> <title> Lower bounds for algebraic decision trees., </title> <booktitle> Journal of Algorithms 3 (1982), </booktitle> <pages> 1-8. 21 </pages>
Reference-contexts: Usually the lower bound on this problem is proved using a (complicated) connected component proof <ref> [SY82, BO83] </ref>. Here we take advantage of the bounded domain to prove a lower bound using a syntactic reduction from Element Distinctness. Lemma 20 There is a syntactic reduction from Element Distinctness on N records to Extreme Points on N + 2 records.
References-found: 20

