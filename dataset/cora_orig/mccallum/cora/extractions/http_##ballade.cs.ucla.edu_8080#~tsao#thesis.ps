URL: http://ballade.cs.ucla.edu:8080/~tsao/thesis.ps
Refering-URL: http://ballade.cs.ucla.edu:8080/~tsao/publications.html
Root-URL: http://www.cs.ucla.edu
Title: VLSI Clock Net Routing  
Author: Chung-Wen Tsao 
Degree: A dissertation submitted in partial satisfaction of the requirements for the degree Doctor of Philosophy in Computer Science by  
Date: 1996  
Affiliation: University of California Los Angeles  
Abstract-found: 0
Intro-found: 1
Reference: [AK93] <author> C. J. Alpert and A. B. Kahng. </author> <title> "Geometric Embeddings for Faster (and Better) Multi-Way Partitioning." </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 743-748, </pages> <year> 1993. </year>
Reference-contexts: The set of nodes assigned to a given level i 1 buffer constitute a cluster. If there are k buffers in the next higher level of the buffer hierarchy, then this is a k-way clustering problem. Numerous algorithms have been developed for geometric clustering (see, e.g., the survey in <ref> [AK93] </ref>); our empirical studies show that the K-Center technique of Gonzalez [Gon85] tends to produce more balanced clusters than other techniques. Furthermore, the K-Center heuristic has only O (nk) time complexity (assuming n nodes at the current level). <p> After all k cluster centers have been selected, each node at the current level is assigned to the nearest center. Pseudo-code for K-Center is given in Figure 6.11 (reproduced from <ref> [AK93] </ref>), with Steps 0 and 3a added to heuristically maximize the minimum distance among the k cluster centers. We propose to further balance the clustering solution from K-Center using the iterative procedure PostBalance in Figure 6.12, which greedily minimizes the objective function P i=1;k Cap (X i ) w .
Reference: [ATG95] <author> T. Asano, Asano T, L. Guibas, J. Hershberger, and H. Imai. </author> <title> "Visibility-Polygon Search and Euclidean Shortest Paths." </title> <booktitle> In Proc. IEEE Symp. Foundations of Computer Science, </booktitle> <pages> pp. 155-164, </pages> <year> 1995. </year>
Reference-contexts: Since the detour points must be located at the endpoints of planar edges, a general approach based on visibility graphs (e.g., <ref> [ATG95, Wel85] </ref>) can be used. Our current implementation uses Dijkstra's algo rithm in the visibility graph, with edge weights computed on the fly; this does 4 Thus, Procedure Rebuild-Tree-of-Segments may iterate several times at each level. <p> For each internal node, we maintain at most k = 5 merging regions with lowest tree cost. We use the procedure Find-Shortest-Planar-Path of the Elmore-Planar-DME algorithm in Chapter 3 to find shortest planar s-t paths. The current implementation uses Dijkstra's algorithm in the visibility graph G (V; E) (e.g., <ref> [ATG95, Wel85] </ref>) where V consists of the source and destination points s, t along with detour points around the corners of obstacles.
Reference: [Bak90] <author> H. Bakoglu. </author> <title> Circuits, Interconnections and Packaging for VLSI. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Hence, a planar zero pathlength skew clock tree with minimal path length is an ideal starting point for design of the clock tree. 2 Our work does not address such issues as buffer insertion and wire-sizing; the most relevant design style is in some sense the "monolithic" single-buffer clocking approach <ref> [Bak90, Da92] </ref>. 51 For these four sinks on a line, edges of the optimal planar ZST will overlap.
Reference: [BK92] <author> K. D. Boese and A. B. Kahng. </author> <title> "Zero-Skew Clock Routing Trees With Minimum Wirelength." </title> <booktitle> In Proc. IEEE Intl. Conf. on ASIC, </booktitle> <pages> pp. </pages> <address> 1.1.1 - 1.1.5, </address> <year> 1992. </year>
Reference-contexts: The above methods all concentrate on generation of the clock tree topology: the topology is then embedded in the plane more or less arbitrarily as it is generated. The Deferred-Merge Embedding (DME) method, which was discovered independently by three groups <ref> [Eda91, CHH92a, BK92] </ref>, is a linear-time algorithm which optimally embeds any given topology in the Manhattan plane, i.e., with exact zero skew and minimum total wirelength. <p> Because the properties of the DME construction are central to our work, we now review the original DME method, following notations of <ref> [BK92, CHH92b] </ref>. 1.2.1.1 The DME Approach The Deferred-Merge Embedding (DME) algorithm [Eda91, CHH92a, BK92] achieves exact zero skew given any delay model for which sink delays are monotone in the length of each edge of the clock tree (pathlength delay and Elmore delay are both monotone delay models). <p> Because the properties of the DME construction are central to our work, we now review the original DME method, following notations of [BK92, CHH92b]. 1.2.1.1 The DME Approach The Deferred-Merge Embedding (DME) algorithm <ref> [Eda91, CHH92a, BK92] </ref> achieves exact zero skew given any delay model for which sink delays are monotone in the length of each edge of the clock tree (pathlength delay and Elmore delay are both monotone delay models). <p> via: (i) a bottom-up phase that constructs a tree of merging segments which represent loci of possible placements of internal nodes in a zero-skew tree (ZST) T ; and (ii) a top-down embedding phase that determines exact locations for the internal nodes in T (see Figure 1.1, reproduced 6 from <ref> [BK92] </ref>). In the bottom-up phase (Figure 1.1a), each node v 2 G is associated with a merging segment, denoted ms (v), which represents a set of possible placements of v in a minimum-cost ZST. <p> The collection of points within a fixed distance of a Manhattan arc is called a tilted rectangular region, or TRR, whose boundary is composed of Manhattan arcs (Figure 1.2, reproduced from <ref> [BK92] </ref>). The Manhattan arc at the center of the TRR is called its core. Finally, the radius of a TRR is the distance between its core and its boundary. Note that a Manhattan arc is itself a TRR with radius 0. <p> (b) are both Manhattan arcs, then ms (v) = trr a " trr b is obtained by intersecting two TRRs, trr a with core ms (a) and radius je a j, and trr b with core ms (b) and radius je b j (see Figure 1.3 (a), also reproduced from <ref> [BK92] </ref>). Boese and Kahng [BK92] show that if ms (a) and ms (b) are both Manhattan arcs, then ms (v) is also a Manhattan arc. <p> arcs, then ms (v) = trr a " trr b is obtained by intersecting two TRRs, trr a with core ms (a) and radius je a j, and trr b with core ms (b) and radius je b j (see Figure 1.3 (a), also reproduced from <ref> [BK92] </ref>). Boese and Kahng [BK92] show that if ms (a) and ms (b) are both Manhattan arcs, then ms (v) is also a Manhattan arc. <p> In case (ii), l (v) can be any point in the intersection of ms (v) and the square TRR trr p which has radius je v j and core fl (p)g (see Figure 1.3 (b), also reproduced from <ref> [BK92] </ref>). the topology G shown at the left of the figure. Merging segments ms (a), ms (b), and ms (v) are constructed in bottom-up order, then each node is embedded at a point on its merging segment that is closest to its parent. <p> This is also the convention of [ZD92], whose algorithm will generate the solution shown in Figure 2.1. Following related work on planar clock routing [ZD92] and on minimum-cost zero-skew routing <ref> [BK92, CHH92a, CHH92b, Eda91] </ref>, we first address this problem in the context of the pathlength (linear) delay approximation: pathlength delay is simply the edge length, allowing geometric intuitions to be applied. <p> P S 0 , P S 0 1 , 2 and the points p and v pertain to the later discussion about the partitioning rules for Linear-Planar-DME.) Overview of Contributions Our work lies at the juncture of two recent directions in clock routing: (i) the DME (Deferred-Merge Embedding) algorithm of <ref> [BK92, CHH92a, CHH92b, Eda91] </ref> which embeds a given topology with guaranteed exact zero pathlength skew and minimum cost; and (ii) the method of [ZD92], which is the first to guarantee a planar-embeddable clock routing solution. <p> This leads to what we call the Single-Pass DME algorithm. The following Facts and Theorem are crucial to the development of the Single-Pass DME and then the Linear-Planar-DME algorithms. Two useful facts are due to <ref> [BK92] </ref>. Fact 2.1 is a straightforward extension of Theorem 2 in [BK92] 3 , and Fact 2.2 is proved in the analysis of the same Theorem 2. <p> This leads to what we call the Single-Pass DME algorithm. The following Facts and Theorem are crucial to the development of the Single-Pass DME and then the Linear-Planar-DME algorithms. Two useful facts are due to <ref> [BK92] </ref>. Fact 2.1 is a straightforward extension of Theorem 2 in [BK92] 3 , and Fact 2.2 is proved in the analysis of the same Theorem 2. Fact 2.1 For any sink set S and topology G, let S v be the set of sinks in the subtree rooted at v in the DME solution. <p> Then for each node v 2 G, ms (v) = core (T RR (v)). 3 Theorem 2 in <ref> [BK92] </ref> states that for any sink set S and topology G, the DME algorithm will find a ZST with source-sink pathlength delay T LD (s 0 ) = diam (S)=2. 54 Fact 2.3 For any sink subset S 0 S, diam (S 0 ) can be computed in linear time. <p> From Lemmas 1, 2 and 3 in <ref> [BK92] </ref>, we have ms (v) = core ( T T u2S v M D (l (u); r 0 ) = center (S v ), where r 0 = radius (S v ). <p> Finally, Figure 2.6 shows the planar clock routing solutions constructed by Linear-Planar-DME and the algorithm of [ZD92] for the Primary 1 benchmark. 2.5 Conclusions and Discussions We have extended the DME algorithm of <ref> [Eda91, BK92, CHH92a, CHH92b] </ref> to construct a guaranteed-planar exact zero-skew clock routing tree which is compatible with the DME (optimum) solution. Hence, in the pathlength delay model, the wirelength of our solution is the minimum possible with respect to the generated topology. <p> Note that under the Elmore delay model, the DME algorithm is no longer optimal: it does not necessarily return a minimum-cost ZST for given S and G <ref> [BK92, CHH92b] </ref>. Also, the merging segment for the root of the subtree over S 0 S in the DME solution is no longer independent of the subtree connection topology. Hence, the bottom-up DME phase cannot be eliminated, i.e., Single-Pass DME cannot be applied to the Elmore delay model. <p> Our enabling concept is a merging region, which generalizes the merging segment concept of the DME algorithm <ref> [Eda91, CHH92a, BK92] </ref> for zero-skew clock trees. For the pathlength delay model, we prove that the merging region is a convex polygon with at most 8 boundary segments which are either Manhattan arcs 45 ffi lines) or rectilinear line segments (horizontal or vertical line segments).
Reference: [BKM95] <author> K. D. Boese, A. B. Kahng, B. A. McCoy, and G. Robins. </author> <title> "Near-Optimal Critical Sink Routing Tree Constructions." </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 14(12) </volume> <pages> 1417-1436, </pages> <year> 1995. </year>
Reference-contexts: Not only is the correlation poor, but the pathlength-based BST solutions simply cannot meet tight skew bounds (of 100ps or less). On the other hand, Figure 5.1 (b) demonstrates the accuracy and fidelity of Elmore delay skew to actual skew; cf. <ref> [BKM95] </ref>. While it is possible to "convert", e.g., a zero pathlength skew routing into a zero Elmore delay skew routing, via the use of "snaking" to balance wirelengths [Tsa91], such an approach will usually entail over 30% increase in total wirelength.
Reference: [BOI94] <author> M. Borah, R. M. Owens, and M. J. Irwin. </author> <title> "An Edge-Based Heuristic for Rectilinear Steiner Trees." </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 13(12) </volume> <pages> 1563-1568, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: With this new topology generation method, not only can our Ex-DME algorithm provide a smooth cost-skew tradeoff, but it also very closely matches the performance of the best-known heuristics for both the zero-skew [Eda93a, Eda94] and infinite-skew limiting cases <ref> [BOI94, KR92] </ref>. Note that the latter case corresponds to the classic rectilinear Steiner minimal tree problem. Recall that in DME, two merging subtrees are always merged at their roots so as to maintain zero skew. However, the shortest connection between two trees may not be between their roots. <p> We tested our methods on the seven benchmark examples Primary1, Primary2 and r1-r5. Table 4.1 shows the total wirelengths of BSTs constructed by ExG-DME/ExP-DME for different values of the skew bound. The last row of the table gives the results obtained by the Steiner heuristic in <ref> [BOI94] </ref>, which has O (n log n) time complexity and is competitive with Iterated 1-Steiner [KR95] heuristic in terms of minimizing RSMT cost. The data for ExG-DME are the best results obtained using k = 2 to 5. <p> are equivalent to the best known non-planar and planar ZST algorithms [Eda93a, KT94] in the literature. (Our numbers are slightly different from those reported in [Eda93a], since that paper uses the Elmore delay model.) When B = 1, the Steiner trees constructed by ExG-DME average only 0.21% higher cost than <ref> [BOI94] </ref>; on the other hand, ExP-DME is essentially similar to the "MST + edge overlapping" heuristic [HVW90] for the Steiner minimal tree problem. When 0 &lt; B &lt; 1, both ExG-DME and ExP-DME obtain smooth skew-cost tradeoffs. <p> 4,195.4/5,380.7 6,146.1/8,085.9 500 1,906.7/1,948.4 3,793.3/4,004.9 5,595.4/5,849.8 2000 1,906.7/1,932.7 3,792.2/3,849.8 5,584.3/5,676.6 1 (<ref> [BOI94] </ref>) 1,902.6 3,781.4 5,571.1 Table 4.1: Total wirelengths obtained by ExG-DME and ExP-DME for different skew bounds. Note that all wirelengths have been divided by 100 units. When B = 1, the results are competitive with those obtained by [BOI94], shown in the last row. 120 for benchmark Primary1 when the skew bound B = 100m.
Reference: [CC93] <author> N.-C. Chou and C.-.K. Cheng. </author> <title> "Wire Length and Delay Minimization in General Clock Net Routing." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 552-555, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: In general, when there is less wire area the phase delay and skew sensitivity will be improved. Experimental studies in [CC94b] apply the SSM algorithm to the ZST solutions from <ref> [CC93] </ref>; worst-case skew under process variations is reduced by factors ranging from 87 to 144 and phase delay is reduced by factors of 11 or more.
Reference: [CC94a] <author> J. Chung and C.-K. Cheng. </author> <title> "Optimal Buffered Clock Tree Synthesis." </title> <booktitle> In Proc. IEEE Intl. ASIC Conf. and Exhibit, </booktitle> <pages> pp. 130-133, </pages> <year> 1994. </year>
Reference-contexts: Experiments reported in [VM95] show that GRIN, by spreading the buffers over the entire tree, is superior in terms of power dissipation, rise/fall time, and buffer area to Greedy-DME with buffer insertion only at the root. GRIN is also superior to the OBTS method of <ref> [CC94a] </ref> (see discussion in Section 1.2.3.4) which applies both wire sizing and buffer sizing techniques to a given zero-skew tree. This is because that GRIN performs simultaneous clock routing and buffer insertion, while OBTS assumes a prescribed clock tree topology. <p> dynamic programming approach will have computed and stored the values of B [b 1; l 0 ; s 0 ] for 1 &lt; l 0 &lt; l O (log n) and 1 s 0 M. 5 The same work also appeared as the Optimum Buffer Tree Synthesis (OBTS) algorithm in <ref> [CC94a] </ref>, where delay minimization, rather than skew sensitivity minimization, is used as the objective function. 34 Then, in O (log n M ) time we can compute B [b; l; s] = min fMSS (l; s; l 0 ; s 0 ) + B [b 1; l 0 ; s 0
Reference: [CC94b] <author> J. Chung and C.-K. Cheng. </author> <title> "Skew Sensitivity Minimization of Buffered Clock Tree." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 280-283, </pages> <year> 1994. </year>
Reference-contexts: Insertion of intermediate buffers can isolate the buffered subtree capacitances, permitting the use of smaller metal line widths and improving the signal edge rate quality. <ref> [VM95, CC94b] </ref> demonstrate that buffer insertion can also reduce the total wirelength. level and one buffer at the root. <p> The delay through the buffer is given by the linear equation d b = r b C L + t b <ref> [VM95, CW96, CC94b, CK96] </ref>. (Recall that [PMO93] models buffer delay using a linear k-factor equation d b = k 1 + k 2 C L , with empirical constants k 1 and k 2 generated from SPICE runs; the switch-resistor model is equivalent to the k-factor equation.) Buffers of different sizes <p> In this subsection, we will summarize several representative works which use (i) buffer insertion techniques only [VM95, CW96], (ii) buffer insertion and buffer sizing techniques [XD95a], (iii) buffer and wire sizing techniques [CCW96, CK96], or (iv) buffer insertion/sizing and wire sizing techniques <ref> [PMO93, CC94b] </ref>. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, [XD95a, PMO93, CCW96, CK96] require a routed clock tree as input, and [CC94b] requires an input clock tree topology. <p> (ii) buffer insertion and buffer sizing techniques [XD95a], (iii) buffer and wire sizing techniques [CCW96, CK96], or (iv) buffer insertion/sizing and wire sizing techniques [PMO93, CC94b]. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, [XD95a, PMO93, CCW96, CK96] require a routed clock tree as input, and <ref> [CC94b] </ref> requires an input clock tree topology. <p> A final observation is that the OWBA algorithm, like [ZDX93, PMP93, XD95a, PMO93], performs post-optimization of a routed clock tree. It is unclear whether near-zero skew and large delay reductions will still be achieved if the OWBA algorithm is applied to ZST solutions with minimized delay <ref> [Eda93b, CC94b] </ref>. To minimize delay and power dissipation, [CK96] recently proposed the simultaneous buffer and wire sizing (SWBS) algorithm. Unlike the OWBA algorithm, [CK96] assumes discrete wire widths and buffer sizes. <p> Furthermore, all clock signals at the sinks are sharper, i.e., have smaller rise/fall times. 1.2.3.4 Buffer Insertion/Sizing and Wire sizing Two approaches in <ref> [CC94b, PMO93] </ref> are representative of those which combine buffer insertion, buffer sizing and wire sizing techniques to improve either phase delay, skew sensitivity or power dissipation. In [CC94b], the algorithm input is the topology of a clock tree, and the objective is to minimize either phase delay or skew sensitivity. <p> In <ref> [CC94b] </ref>, the algorithm input is the topology of a clock tree, and the objective is to minimize either phase delay or skew sensitivity. <p> Although the intermediate buffers consume some power, the total power dissipation is still reduced 20 30% for larger instances. The skew sensitivity minimization (SSM) algorithm proposed by Chung and Cheng <ref> [CC94b] </ref> is a dynamic programming approach which finds optimum buffer sizes, their insertion levels in the clock tree, and optimum wire widths to also minimize skew sensitivity to process variation 5 . <p> As in the GRIN algorithm, which inserts buffers at non-Steiner points for wirelength savings, the SSM algorithm repositions buffers to eliminate excessive detour wiring in the final solution. In general, when there is less wire area the phase delay and skew sensitivity will be improved. Experimental studies in <ref> [CC94b] </ref> apply the SSM algorithm to the ZST solutions from [CC93]; worst-case skew under process variations is reduced by factors ranging from 87 to 144 and phase delay is reduced by factors of 11 or more. <p> different buffer sizes, i.e., M + 1 alternatives including that of no buffer, for each level of the clock tree requires O ((M + 1) log n ) = O (n log (M+1) ) time, which implies high-order polynomial time complexity that 35 depends on the number of buffer types. <ref> [CC94b] </ref> use dynamic programming to reduce the time complexity of simultaneous buffer sizing/insertion to O (log 3 n M 2 ), while [PMO93] separates the buffer insertion and buffer sizing procedures in order to achieve O (n 2 ) time complexity. 1.2.4 Non-Tree Clock Routing All of the algorithms reviewed so <p> Our experiments in Table 6.3 show that Elmore-Planar-DME is consistently improved. 6.4 Buffered Clock Tree Synthesis Finally, we extend our bounded-skew routing method to handle the practical case of buffering hierarchies in large circuits. There have been many works on buffered clock tree designs. <ref> [XD95a, PMO93, CC94b] </ref> determine the buffer tree hierarchy for the given clock tree layout or topology. [VM95, CW96] design the buffer tree 170 hierarchy and the routing of the clock net simultaneously. <p> For example, a 170-16-4-1 hierarchy has 170 buffers at level 3, 16 buffers at level 2, etc. Note that we always have k 0 = 1 since there is only one buffer at the root of the clock tree. As in <ref> [CC94b, PMO93, CW96] </ref>, to minimize the skew induced by the changes of buffer sizes due to the process variation, we assume that identical buffers are used at the same buffer level. (From the discussion of our method below, we can see that our method can work without this assumption by minor <p> Based on our experiments, we use w = 5 to obtain all the results reported below; this value seems to reasonably balance the goals of low routing cost at both the current and next higher levels. 6 6.4.2 Buffer Sliding Chung and Cheng <ref> [CC94b] </ref> shift the location of a buffer along the edge to its parent node to reduce or eliminate excessive detouring. The motivation for their technique is straightforward.
Reference: [CCF93] <author> R. J. Carragher, C.-K. Cheng, and M. Fujita. </author> <title> "An Efficient Algorithm for the Net Matching Problem." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 640-644, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: One simple solution, which they may use, is to add wires between the clock source and the root of the clock tree that has smaller delay. Also, it is not clear why all the clock nets are routed on the same single layer. Carragher, Cheng and co-authors in <ref> [CCX93, CCF93, CCX96] </ref> study the problem of signal net matching, which occurs (i) for multi-phase clock routing, (ii) for signal input paths of cells driven by differential amplifiers, and (iii) when some outputs of the cells must arrive at a data bus at the same time (i.e., simultaneous output switching is <p> The problem of topology generation is reduced to a multidimensional analog of the rectilinear Steiner problem which requires exponential time for an optimum solution. Thus, a simulated annealing approach is used to 41 generate the topology. Later, in <ref> [CCF93] </ref>, Carragher et al. give another "faster" and "equally good" approach for the embedding of the topology. This second approach transforms the Manhattan metric L 1 to an L 1 norm using a 45 ffi rotation of the solution space.
Reference: [CCW96] <author> C. P. Chen, Y.W. Chang, and D. F. Wong. </author> <title> "Fast Performance-Driven Optimization for Buffered Clock Trees Based on Lagrangian Relaxation." </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 405-408, </pages> <year> 1996. </year>
Reference-contexts: One disadvantage of wire sizing is that wire area may increase, which in turn increases capacitive power dissipation. None of these works attempts to address the tradeoff between power reduction and phase delay/skew/skew sensitivity reduction. Two works <ref> [CCW96, CK96] </ref> discussed below consider power minimization during buffer and wire sizing. Edahiro [Eda93b] uses wire width optimization to reduce the phase delay of a zero-skew routing. <p> In this subsection, we will summarize several representative works which use (i) buffer insertion techniques only [VM95, CW96], (ii) buffer insertion and buffer sizing techniques [XD95a], (iii) buffer and wire sizing techniques <ref> [CCW96, CK96] </ref>, or (iv) buffer insertion/sizing and wire sizing techniques [PMO93, CC94b]. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, [XD95a, PMO93, CCW96, CK96] require a routed clock tree as input, and [CC94b] requires an input clock tree topology. <p> several representative works which use (i) buffer insertion techniques only [VM95, CW96], (ii) buffer insertion and buffer sizing techniques [XD95a], (iii) buffer and wire sizing techniques [CCW96, CK96], or (iv) buffer insertion/sizing and wire sizing techniques [PMO93, CC94b]. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, <ref> [XD95a, PMO93, CCW96, CK96] </ref> require a routed clock tree as input, and [CC94b] requires an input clock tree topology. The works of [XD95a, PMO93, CCW96, CK96] also assume that the given clock tree has large clock skew based on the fact that in practice, obstacles (large macro blocks), process variation, and <p> and wire sizing techniques [CCW96, CK96], or (iv) buffer insertion/sizing and wire sizing techniques [PMO93, CC94b]. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, <ref> [XD95a, PMO93, CCW96, CK96] </ref> require a routed clock tree as input, and [CC94b] requires an input clock tree topology. The works of [XD95a, PMO93, CCW96, CK96] also assume that the given clock tree has large clock skew based on the fact that in practice, obstacles (large macro blocks), process variation, and other constraints make near zero-skew routing difficult, if not impossible, for large clock nets. 1.2.3.1 Buffer Insertion The GReedy INternal buffering (GRIN) <p> However, BIS does not improve over [ZDX93] in terms of clock skew and phase delay. The iterative buffer and sizing approach converges very quickly within between 5 and 10 iterations. 1.2.3.3 Buffer Sizing and Wire sizing Two approaches <ref> [CCW96, CK96] </ref> improve clock skew by simultaneously sizing the buffers and the wire segments of an existing buffered clock tree. <p> maximum or the average weighted source-sink delay, and only indirectly address skew minimization (by allocating higher weights to sinks with larger delay and smaller weights to the sinks with smaller delay it is presumed that the difference between the largest and smallest delays will be reduced.) Chen, Chang and Wong <ref> [CCW96] </ref> propose an Optimal Wire sizing and Buffer sizing Algorithm (OWBA) which optimizes multiple objectives delay, power, skew, area and process sensitivity of skew by sizing wires and buffers in a routed clock tree. <p> max t + fi P OW + fl A + ffi (maxj t min t) + n i=1 i (min t t i (X )) subject to L i x i U i ; 1 i m + b; max t &gt; 0; min t &gt; 0: The authors of <ref> [CCW96] </ref> state that the clock skew can be minimized by repeatedly solving M 1 0 , and that the OWBA algorithm not only optimizes delay, power and area, but also simultaneously minimizes process sensitivity with respect to average delay. [CCW96] test their OWBA algorithm on the five benchmarks r1 r5 [Tsa91] <p> max t &gt; 0; min t &gt; 0: The authors of <ref> [CCW96] </ref> state that the clock skew can be minimized by repeatedly solving M 1 0 , and that the OWBA algorithm not only optimizes delay, power and area, but also simultaneously minimizes process sensitivity with respect to average delay. [CCW96] test their OWBA algorithm on the five benchmarks r1 r5 [Tsa91] with initial clock tree routings constructed by the method of [Eda93a] under the pathlength delay model; these have Elmore delay skew ranging from 64ps to 974ps. <p> As with all post-routing approaches, the effectiveness of the algorithm will depend on the skew and delay of the initial routing solution. Thus, it would be interesting to compare the algorithm against traditional wire sizing algorithms for clock trees, e.g., <ref> [CCW96, CK96] </ref>. 1.2.5 Multi-Clock Synchronous Systems So far, we have only considered single-phase clock routing. In fact, large VLSI systems may use multiple clocks for extra degrees of freedom in the system timing.
Reference: [CCX93] <author> R. J. Carragher, C.-K. Cheng, and X.-M. Xiong. </author> <title> "The net match-ing problem in high performance microelectronics design." </title> <booktitle> In Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <pages> pp. 52-62, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: One simple solution, which they may use, is to add wires between the clock source and the root of the clock tree that has smaller delay. Also, it is not clear why all the clock nets are routed on the same single layer. Carragher, Cheng and co-authors in <ref> [CCX93, CCF93, CCX96] </ref> study the problem of signal net matching, which occurs (i) for multi-phase clock routing, (ii) for signal input paths of cells driven by differential amplifiers, and (iii) when some outputs of the cells must arrive at a data bus at the same time (i.e., simultaneous output switching is <p> Any timing discrepancy among the matched sinks is termed inter-skew. Carragher et al. propose a conservative approach which (i) uses identical topologies for all the matching nets and (ii) equalizes the wirelength of corresponding edges in all the matching nets by using detour wiring as necessary. <ref> [CCX93] </ref> use linear programming to embed a fixed topology; this requires an average of O (n 2 p 2 ) time where p is the number of the nets and n is the number of sinks in a net.
Reference: [CCX96] <author> R. J. Carragher, C.-K. Cheng, X.-M. Xiong, M. Fujita, and R. Paturi. </author> <title> "Solving the Net matching Problem in High-Performance Chip Design." </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 15(8) </volume> <pages> 902-911, </pages> <month> 8 </month> <year> 1996. </year>
Reference-contexts: One simple solution, which they may use, is to add wires between the clock source and the root of the clock tree that has smaller delay. Also, it is not clear why all the clock nets are routed on the same single layer. Carragher, Cheng and co-authors in <ref> [CCX93, CCF93, CCX96] </ref> study the problem of signal net matching, which occurs (i) for multi-phase clock routing, (ii) for signal input paths of cells driven by differential amplifiers, and (iii) when some outputs of the cells must arrive at a data bus at the same time (i.e., simultaneous output switching is
Reference: [CHH92a] <author> T.-H. Chao, Y.-C. Hsu, and J.-M. Ho. </author> <title> "Zero Skew Clock Net Routing." </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 518-523, </pages> <year> 1992. </year>
Reference-contexts: The above methods all concentrate on generation of the clock tree topology: the topology is then embedded in the plane more or less arbitrarily as it is generated. The Deferred-Merge Embedding (DME) method, which was discovered independently by three groups <ref> [Eda91, CHH92a, BK92] </ref>, is a linear-time algorithm which optimally embeds any given topology in the Manhattan plane, i.e., with exact zero skew and minimum total wirelength. <p> Because the properties of the DME construction are central to our work, we now review the original DME method, following notations of [BK92, CHH92b]. 1.2.1.1 The DME Approach The Deferred-Merge Embedding (DME) algorithm <ref> [Eda91, CHH92a, BK92] </ref> achieves exact zero skew given any delay model for which sink delays are monotone in the length of each edge of the clock tree (pathlength delay and Elmore delay are both monotone delay models). <p> The total wirelength of this zero-skew clock tree is 20 units, which is the minimum possible for the given topology. II. Greedy-DME: DME with Topology Construction. Note that DME requires an input topology. Several works including <ref> [CHH92a, CHH92b, Eda92] </ref> have thus studied topology constructions that lead to low-cost routing solutions when DME is applied; the most successful is the Greedy-DME method of [Eda92] 10 rithm. 11 which determines the topology of the merging tree in a greedy bottom-up fashion. <p> The solution is improved by a post-processing local search that adjusts the resulting topology (cf. "CL+I6" in [Eda93a]). Greedy-DME achieves 20% reduction in wiring cost compared with the methods of <ref> [CHH92a, CHH92b] </ref>. 1.2.1.2 Planar-Embeddable Trees None of the clock tree solutions given by the above "exact zero skew" algorithms is easily embedded in the layout plane: it is often impossible to perform the actual layout without introducing many vias. <p> Xi and Dai [XD96] formulate and solve the problem of useful skew clock routing with gate sizing for power minimization (UST). A recursive top-down 45 bi-partitioning approach, similar to the BB bipartitioning heuristic in <ref> [CHH92a] </ref>, is used to generate the clock tree topology. <p> This is also the convention of [ZD92], whose algorithm will generate the solution shown in Figure 2.1. Following related work on planar clock routing [ZD92] and on minimum-cost zero-skew routing <ref> [BK92, CHH92a, CHH92b, Eda91] </ref>, we first address this problem in the context of the pathlength (linear) delay approximation: pathlength delay is simply the edge length, allowing geometric intuitions to be applied. <p> P S 0 , P S 0 1 , 2 and the points p and v pertain to the later discussion about the partitioning rules for Linear-Planar-DME.) Overview of Contributions Our work lies at the juncture of two recent directions in clock routing: (i) the DME (Deferred-Merge Embedding) algorithm of <ref> [BK92, CHH92a, CHH92b, Eda91] </ref> which embeds a given topology with guaranteed exact zero pathlength skew and minimum cost; and (ii) the method of [ZD92], which is the first to guarantee a planar-embeddable clock routing solution. <p> Finally, Figure 2.6 shows the planar clock routing solutions constructed by Linear-Planar-DME and the algorithm of [ZD92] for the Primary 1 benchmark. 2.5 Conclusions and Discussions We have extended the DME algorithm of <ref> [Eda91, BK92, CHH92a, CHH92b] </ref> to construct a guaranteed-planar exact zero-skew clock routing tree which is compatible with the DME (optimum) solution. Hence, in the pathlength delay model, the wirelength of our solution is the minimum possible with respect to the generated topology. <p> Our enabling concept is a merging region, which generalizes the merging segment concept of the DME algorithm <ref> [Eda91, CHH92a, BK92] </ref> for zero-skew clock trees. For the pathlength delay model, we prove that the merging region is a convex polygon with at most 8 boundary segments which are either Manhattan arcs 45 ffi lines) or rectilinear line segments (horizontal or vertical line segments).
Reference: [CHH92b] <author> T.-H. Chao, Y. C. Hsu, J. M. Ho, K. D. Boese, and A. B. Kahng. </author> <title> "Zero Skew Clock Routing With Minimum Wirelength." </title> <journal> IEEE Trans. Circuits and Systems, </journal> <volume> 39(11) </volume> <pages> 799-814, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Because the properties of the DME construction are central to our work, we now review the original DME method, following notations of <ref> [BK92, CHH92b] </ref>. 1.2.1.1 The DME Approach The Deferred-Merge Embedding (DME) algorithm [Eda91, CHH92a, BK92] achieves exact zero skew given any delay model for which sink delays are monotone in the length of each edge of the clock tree (pathlength delay and Elmore delay are both monotone delay models). <p> The total wirelength of this zero-skew clock tree is 20 units, which is the minimum possible for the given topology. II. Greedy-DME: DME with Topology Construction. Note that DME requires an input topology. Several works including <ref> [CHH92a, CHH92b, Eda92] </ref> have thus studied topology constructions that lead to low-cost routing solutions when DME is applied; the most successful is the Greedy-DME method of [Eda92] 10 rithm. 11 which determines the topology of the merging tree in a greedy bottom-up fashion. <p> The solution is improved by a post-processing local search that adjusts the resulting topology (cf. "CL+I6" in [Eda93a]). Greedy-DME achieves 20% reduction in wiring cost compared with the methods of <ref> [CHH92a, CHH92b] </ref>. 1.2.1.2 Planar-Embeddable Trees None of the clock tree solutions given by the above "exact zero skew" algorithms is easily embedded in the layout plane: it is often impossible to perform the actual layout without introducing many vias. <p> This is also the convention of [ZD92], whose algorithm will generate the solution shown in Figure 2.1. Following related work on planar clock routing [ZD92] and on minimum-cost zero-skew routing <ref> [BK92, CHH92a, CHH92b, Eda91] </ref>, we first address this problem in the context of the pathlength (linear) delay approximation: pathlength delay is simply the edge length, allowing geometric intuitions to be applied. <p> P S 0 , P S 0 1 , 2 and the points p and v pertain to the later discussion about the partitioning rules for Linear-Planar-DME.) Overview of Contributions Our work lies at the juncture of two recent directions in clock routing: (i) the DME (Deferred-Merge Embedding) algorithm of <ref> [BK92, CHH92a, CHH92b, Eda91] </ref> which embeds a given topology with guaranteed exact zero pathlength skew and minimum cost; and (ii) the method of [ZD92], which is the first to guarantee a planar-embeddable clock routing solution. <p> The resulting tree has provably minimum total wirelength and minimum pathlength delay for its topology. A very simple ver 52 sion of our method produces planar solutions with total wirelengths that are competitive with the best non-planar exact zero-skew results in the literature <ref> [Eda92, CHH92b] </ref>. We also obtain an average of 15:5% wirelength savings over the previous planar routing algorithm of [ZD92]. 2.2 Single-Pass DME Describing our new planar clock routing algorithm requires a little more terminology. <p> Details of the circuit parameters for benchmarks r1-r5 can be found in [Tsa91]. For the pathlength delay model, we compared Linear-Planar-DME against three other methods: the method of Zhu and Dai which guarantees a planar ZST; the KCR+DME method which gave the best results in <ref> [CHH92b] </ref>; and the Greedy-DME method of Edahiro [Eda92], which gives the best-known wirelength results for zero-skew trees in the linear model. <p> Finally, Figure 2.6 shows the planar clock routing solutions constructed by Linear-Planar-DME and the algorithm of [ZD92] for the Primary 1 benchmark. 2.5 Conclusions and Discussions We have extended the DME algorithm of <ref> [Eda91, BK92, CHH92a, CHH92b] </ref> to construct a guaranteed-planar exact zero-skew clock routing tree which is compatible with the DME (optimum) solution. Hence, in the pathlength delay model, the wirelength of our solution is the minimum possible with respect to the generated topology. <p> Note that under the Elmore delay model, the DME algorithm is no longer optimal: it does not necessarily return a minimum-cost ZST for given S and G <ref> [BK92, CHH92b] </ref>. Also, the merging segment for the root of the subtree over S 0 S in the DME solution is no longer independent of the subtree connection topology. Hence, the bottom-up DME phase cannot be eliminated, i.e., Single-Pass DME cannot be applied to the Elmore delay model. <p> Experimentally, very limited improvements result from trying more than 16 cases. 83 3.6 Experimental Results We implemented the Linear-Planar-DME and Elmore-Planar-DME algorithms using Sun SPARC-10 workstations and the C/Unix environment. The same seven examples as in <ref> [CHH92b, Eda93a, ZD92] </ref> were studied. Benchmarks Primary1 and Primary2 both have the same loading capacitance of 0:5pF for all sinks, and also have per-unit wire resistance and wire capacitance of 16:6m and 0:027f F , respectively. Details of the circuit parameters for benchmarks r1-r5 can be found in [Tsa91]. <p> Thus, the observed time complexity of Linear-Planar-DME-3 is O (n (lg n) 3 ). Table 3.2 compares our new algorithms with two leading non-planar ZST algorithms in the literature - Greedy-DME [Eda93a] and KCR+DME <ref> [CHH92b, KCR91] </ref> as well as the previous planar routing method of Zhu and Dai [ZD92]. Greedy-DME corresponds to the CL+I6 method of Edahiro [Eda93a], and can yield an unbalanced topology. KCR+DME uses a matching approach to achieve a balanced topology [CHH92b]. <p> Greedy-DME corresponds to the CL+I6 method of Edahiro [Eda93a], and can yield an unbalanced topology. KCR+DME uses a matching approach to achieve a balanced topology <ref> [CHH92b] </ref>. Our new planar ZST solutions are competitive with the best known non-planar ZST solutions of Greedy-DME (having average 9:8% greater wiring cost), and are superior to KCR+DME solutions in all cases. <p> 4,635.9 r5 9,723.7 10,556.2 10,806.4 11,606 12,823.3 14,119.4 Ave Cost (+0.0%) +7.2% +9.8% +17.3% +28.1% +39.4% Planar No Yes Yes No Yes Yes Delay Model Elmore Linear Elmore Elmore Elmore Linear Table 3.2: Comparison of Elmore-Planar-DME with other algorithms in terms of total wirelength, using the same benchmarks studied in <ref> [CHH92b, Eda93a, ZD92] </ref>. No prescribed clock source location was assumed. Ave Cost indicates the average percentage increase in wire-length versus the results of CL+I6 [Eda93a]. Note that all wirelengths have been divided by 100 units. previous planar clock routing methods.
Reference: [CHK96] <author> J. Cong, L. He, C.-K. Koh, and P. H. Madden. </author> <title> "Performance Optimization of VLSI Interconnect Layout." Integration: </title> <journal> the VLSI Journal (submitted), </journal> <year> 1996. </year>
Reference-contexts: More detailed surveys of clock tree synthesis can be found in <ref> [KR95, Fri95, CHK96] </ref>. 1.2.1 Minimum-Cost Zero-Skew Trees Minimum-cost, exact zero-skew clock trees for large cell-based designs have been addressed in a series of works by Kuh et al., Tsay, Boese et al., and others - primarily via geometric optimizations applied to the set of sink locations.
Reference: [CK94] <author> J. Cong and C.-K. Koh. </author> <title> "Simultaneous Driver and Wire Sizing for Performance and Power Optimization (Special Issue on Low-Power Design)." </title> <journal> IEEE Trans. VLSI Systems, </journal> <volume> 2(4) </volume> <pages> 408-425, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: To minimize delay and power dissipation, [CK96] recently proposed the simultaneous buffer and wire sizing (SWBS) algorithm. Unlike the OWBA algorithm, [CK96] assumes discrete wire widths and buffer sizes. By extending a driver sizing/wire sizing relation of <ref> [CK94] </ref> where no buffers are considered, a buffer sizing/wire sizing relation is obtained which leads to the polynomial-time SBWS-LU-Bound algorithm for computing lower and upper size bounds for optimal SBWS solutions. <p> The routing cost is reduced at the expense of longer running times. There is still much room for further improvement of current methods for merging region construction. Our final goal is to combine the techniques of BST topology generation with optimal sizing of interconnects and drivers <ref> [CK94, CL95] </ref>, and develop a practical clock routing algorithm which carries out simultaneous topology generation, buffer insertion, and wire sizing to achieve bounded skew with minimum power dissipation under various layout constraints. 145 CHAPTER 6 Practical Bounded-Skew Clock Routing "Academic" clock routing research results have had only limited direct impact on
Reference: [CK95] <author> J. Cong and C.-K. Koh. </author> <title> "Minimum-Cost Bounded-Skew Clock Routing." </title> <booktitle> In Proc. IEEE Intl. Symp. Circuits and Systems, </booktitle> <volume> volume 1, </volume> <pages> pp. 215-218, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Our work provides unifications of 1 Note: Recently another independent study of the same problem was reported in <ref> [CK95] </ref>. 89 the clock routing and Steiner tree heuristic literatures and gives smooth cost-skew tradeoff that enable good engineering solutions. We now define the bounded-skew routing tree (BST) problem.
Reference: [CK96] <author> J. Cong and C.-K. Koh. </author> <title> "Simultaneous Buffer and Wire Sizing for Performance and Power Optimization." </title> <booktitle> In Proc. Intl. Workshop on Lower Power Design, </booktitle> <pages> pp. 271-276, </pages> <address> Monterey, California, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: One disadvantage of wire sizing is that wire area may increase, which in turn increases capacitive power dissipation. None of these works attempts to address the tradeoff between power reduction and phase delay/skew/skew sensitivity reduction. Two works <ref> [CCW96, CK96] </ref> discussed below consider power minimization during buffer and wire sizing. Edahiro [Eda93b] uses wire width optimization to reduce the phase delay of a zero-skew routing. <p> The delay through the buffer is given by the linear equation d b = r b C L + t b <ref> [VM95, CW96, CC94b, CK96] </ref>. (Recall that [PMO93] models buffer delay using a linear k-factor equation d b = k 1 + k 2 C L , with empirical constants k 1 and k 2 generated from SPICE runs; the switch-resistor model is equivalent to the k-factor equation.) Buffers of different sizes <p> In this subsection, we will summarize several representative works which use (i) buffer insertion techniques only [VM95, CW96], (ii) buffer insertion and buffer sizing techniques [XD95a], (iii) buffer and wire sizing techniques <ref> [CCW96, CK96] </ref>, or (iv) buffer insertion/sizing and wire sizing techniques [PMO93, CC94b]. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, [XD95a, PMO93, CCW96, CK96] require a routed clock tree as input, and [CC94b] requires an input clock tree topology. <p> several representative works which use (i) buffer insertion techniques only [VM95, CW96], (ii) buffer insertion and buffer sizing techniques [XD95a], (iii) buffer and wire sizing techniques [CCW96, CK96], or (iv) buffer insertion/sizing and wire sizing techniques [PMO93, CC94b]. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, <ref> [XD95a, PMO93, CCW96, CK96] </ref> require a routed clock tree as input, and [CC94b] requires an input clock tree topology. The works of [XD95a, PMO93, CCW96, CK96] also assume that the given clock tree has large clock skew based on the fact that in practice, obstacles (large macro blocks), process variation, and <p> and wire sizing techniques [CCW96, CK96], or (iv) buffer insertion/sizing and wire sizing techniques [PMO93, CC94b]. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, <ref> [XD95a, PMO93, CCW96, CK96] </ref> require a routed clock tree as input, and [CC94b] requires an input clock tree topology. The works of [XD95a, PMO93, CCW96, CK96] also assume that the given clock tree has large clock skew based on the fact that in practice, obstacles (large macro blocks), process variation, and other constraints make near zero-skew routing difficult, if not impossible, for large clock nets. 1.2.3.1 Buffer Insertion The GReedy INternal buffering (GRIN) <p> However, BIS does not improve over [ZDX93] in terms of clock skew and phase delay. The iterative buffer and sizing approach converges very quickly within between 5 and 10 iterations. 1.2.3.3 Buffer Sizing and Wire sizing Two approaches <ref> [CCW96, CK96] </ref> improve clock skew by simultaneously sizing the buffers and the wire segments of an existing buffered clock tree. <p> It is unclear whether near-zero skew and large delay reductions will still be achieved if the OWBA algorithm is applied to ZST solutions with minimized delay [Eda93b, CC94b]. To minimize delay and power dissipation, <ref> [CK96] </ref> recently proposed the simultaneous buffer and wire sizing (SWBS) algorithm. Unlike the OWBA algorithm, [CK96] assumes discrete wire widths and buffer sizes. <p> It is unclear whether near-zero skew and large delay reductions will still be achieved if the OWBA algorithm is applied to ZST solutions with minimized delay [Eda93b, CC94b]. To minimize delay and power dissipation, <ref> [CK96] </ref> recently proposed the simultaneous buffer and wire sizing (SWBS) algorithm. Unlike the OWBA algorithm, [CK96] assumes discrete wire widths and buffer sizes. By extending a driver sizing/wire sizing relation of [CK94] where no buffers are considered, a buffer sizing/wire sizing relation is obtained which leads to the polynomial-time SBWS-LU-Bound algorithm for computing lower and upper size bounds for optimal SBWS solutions. <p> Experimentally, SBWS has been applied to reduce the inter-clock skew of two clock nets CLK and DCLK in a custom logic block <ref> [CK96] </ref>. The worst-case inter-clock skew of 500ps occurs between the maximum DCLK delay (4:55ns) and the minimum CLK delay (4:05ns). <p> The power dissipation of DCLK is reduced by a factor of 2:6, but the intra-clock skew of DCLK is increased by a factor of 1:69. <ref> [CK96] </ref> also apply SBWS to optimize the CLK net and achieve a factor of 1:16 skew reduction, along with a factor of 2:3 power dissipation reduction. <p> As with all post-routing approaches, the effectiveness of the algorithm will depend on the skew and delay of the initial routing solution. Thus, it would be interesting to compare the algorithm against traditional wire sizing algorithms for clock trees, e.g., <ref> [CCW96, CK96] </ref>. 1.2.5 Multi-Clock Synchronous Systems So far, we have only considered single-phase clock routing. In fact, large VLSI systems may use multiple clocks for extra degrees of freedom in the system timing.
Reference: [CKK95a] <author> J. Cong, A. B. Kahng, C.-K. Koh, and C.-W. A. Tsao. </author> <title> "Bounded-Skew Clock and Steiner Routing Under Elmore Delay." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 66-71, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: So we name our rules for constructing a merging region as the Boundary Merging and Embedding (BME) construction rules. An alternative approach to construct the merging region is called the Interior Merging and Embedding method (IME) <ref> [CKK95a, CKK95b] </ref>, which uses s 1 (boundary and interior) segments from each child region to generate multiple merging regions for the parent node. <p> Details will be presented in Koh's thesis [Koh97]; see also <ref> [CKK95a] </ref>. <p> Then, there will be multiple merging regions for nodes in the given topology. The IME method in <ref> [CKK95a] </ref> addresses this case. 93 segments, denoted J S Q (P ) and J S P (Q). <p> We distinguish the joining segment and shortest distance segment concepts because actually any pair of line segments which are interior to or on the boundaries of the merging regions P and Q can be used to construct merging region mr (v). (For example, the IME method <ref> [CKK95a] </ref> considers joining segments that are interior to the merging regions.) Merging Region. <p> Also, when F M R (SDR (L a ; L b )) = ; (i.e., detour wiring is needed), then the merging cost of mr (v) is not necessarily the minimum. An example is given in our technical report <ref> [CKK95a] </ref>. <p> Even if all the merging regions are equal to the full set of minimum-cost merging points, the BME method is still not optimal for the given topology. A four-sink counterexample is given in Figure 5.6, where the IME method <ref> [CKK95a] </ref> gives an optimal BST solution. 5.6 Experimental Results We have implemented the ExG-DME algorithm with the BME construction rules under Elmore delay in ANSI C on Sun SPARC-20 machines. The benchmark test cases r1-r5 [Tsa91] were used to evaluate our method for skew bounds in the range of 0-10ns. <p> We also achieve 26:6% average wirelength reduction when compared to the best reported zero-skew solutions (by the CL+I6 algorithm in [Eda93a]). Table 5.6 shows the results obtained by IME method in <ref> [CKK95a] </ref> for the same set of skew bounds. In this experiment, IME uses s = 7 joining segments (possibly interior to the merging regions) from each child merging region to generate merging regions for the parent node. <p> Even if all the merging regions that we construct are equal to the full set of minimum-cost merging points, our method is still not optimal for the given topology. The IME method <ref> [CKK95a] </ref> improves the BME method by considering multiple choices of merging regions which may have non-minimum merging cost. The routing cost is reduced at the expense of longer running times. There is still much room for further improvement of current methods for merging region construction. <p> At the same time, if an internal node v can have multiple planar merging regions, the number of merging regions may grow exponentially during the bottom-up construction of merging regions (this is the difficulty encountered by the IME method of <ref> [CKK95a] </ref>). Our current implementation simply keeps at most k regions with lowest tree cost for each internal node.
Reference: [CKK95b] <author> J. Cong, A. B. Kahng, C.-K. Koh, and C.-W. A. Tsao. </author> <title> "Bounded-Skew Clock and Steiner Routing Under Elmore Delay." </title> <type> Technical Report CSD950030, </type> <institution> Computer Science Dept., University of California, </institution> <address> Los Angeles, </address> <month> August </month> <year> 1995. </year> <note> Available by anonymous ftp to ftp.cs.ucla.edu, also available at http://ballade.cs.ucla.edu:8080/~tsao/htdocs/950030.ps. 184 </note>
Reference-contexts: So we name our rules for constructing a merging region as the Boundary Merging and Embedding (BME) construction rules. An alternative approach to construct the merging region is called the Interior Merging and Embedding method (IME) <ref> [CKK95a, CKK95b] </ref>, which uses s 1 (boundary and interior) segments from each child region to generate multiple merging regions for the parent node.
Reference: [CKR93] <author> J. Cong, A. B. Kahng, and G. Robin. </author> <title> "Matching-Based Methods for High-Performance Clock Routing." </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 12(8) </volume> <pages> 1157-1169, </pages> <year> 1993. </year>
Reference-contexts: Kahng et al. <ref> [CKR93, KCR91] </ref> constructed clock tree topologies using a bottom-up matching approach. Their "KCR" algorithm obtains zero pathlength skew in practice (i.e., zero skew under the pathlength delay model) but has no theoretical guarantee. <p> We conclude that no routing crosses any other. 2.4 Experimental Results We implemented the Linear-Planar-DME algorithm on Sun SPARC IPC workstations in the C/UNIX environment. Two sets of benchmarks were used: (i) the sink placements for the MCNC Primary1 and Primary2 benchmarks used in [JSK90] and <ref> [CKR93] </ref>, and originally provided by the authors of [JSK90]; and (ii) the sink placements for the five benchmarks r1 - r5 used in [Tsa91]. These seven examples have also been studied by Edahiro [Eda92] and by Zhu and Dai [ZD92].
Reference: [CL95] <author> J. Cong and K.-S. Leung. </author> <title> "Optimal Wiresizing Under Elmore Delay Model." </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 14(3) </volume> <pages> 321-336, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: This implies that a so-called "monotone property" 3 (cf. <ref> [CL95] </ref>) will hold in the zero-skew clock routing. input rise time, [PMO93] models the buffer delay as a function of the capacitive load C L , by a linear k-factor equations: d b = k 2 + k 1 C L . <p> constants k 1 and k 2 are generated form SPICE runs. 3 Given a routing tree T , a wire sizing solution W for T is monotone if w e v w e u for any pair of edges e v , e u with v an ancestor of u. <ref> [CL95] </ref> shows that for any given tree T , there exists a monotone optimal width assignment W fl for minimizing the sum of weighted sink delays. <p> The routing cost is reduced at the expense of longer running times. There is still much room for further improvement of current methods for merging region construction. Our final goal is to combine the techniques of BST topology generation with optimal sizing of interconnects and drivers <ref> [CK94, CL95] </ref>, and develop a practical clock routing algorithm which carries out simultaneous topology generation, buffer insertion, and wire sizing to achieve bounded skew with minimum power dissipation under various layout constraints. 145 CHAPTER 6 Practical Bounded-Skew Clock Routing "Academic" clock routing research results have had only limited direct impact on
Reference: [CSH93] <author> W. Chuang, S. S. Sapatnekar, and I. N. Haji. </author> <title> "A Unified Algorithm for Gate Sizing and Clock Skew Optimization to Minimize Sequential Circuit Area." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 220-223, </pages> <year> 1993. </year>
Reference-contexts: To achieve the optimal clock schedule, Fishburn assumes arbitrary source to sink delays and realizes the desired delays by inserting buffers as delay elements. Without considering routability or power dissipation of the resulting clock trees, optimal skew may be too costly to realize. Subsequent works of <ref> [CSH93, SSF95] </ref> consider gate sizing in the clock skew optimization to achieve faster clock operating frequencies. Xi and Dai [XD96] formulate and solve the problem of useful skew clock routing with gate sizing for power minimization (UST).
Reference: [CW96] <author> Y. P. Chen and D. F. Wong. </author> <title> "An Algorithm for Zero-Skew Clock Tree Routing with Buffer Insertion." </title> <booktitle> In Proc. European Design and Test Conf., </booktitle> <pages> pp. 652-657, </pages> <year> 1996. </year>
Reference-contexts: The delay through the buffer is given by the linear equation d b = r b C L + t b <ref> [VM95, CW96, CC94b, CK96] </ref>. (Recall that [PMO93] models buffer delay using a linear k-factor equation d b = k 1 + k 2 C L , with empirical constants k 1 and k 2 generated from SPICE runs; the switch-resistor model is equivalent to the k-factor equation.) Buffers of different sizes <p> In this subsection, we will summarize several representative works which use (i) buffer insertion techniques only <ref> [VM95, CW96] </ref>, (ii) buffer insertion and buffer sizing techniques [XD95a], (iii) buffer and wire sizing techniques [CCW96, CK96], or (iv) buffer insertion/sizing and wire sizing techniques [PMO93, CC94b]. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, [XD95a, PMO93, CCW96, CK96] require a routed clock tree as input, <p> In this subsection, we will summarize several representative works which use (i) buffer insertion techniques only <ref> [VM95, CW96] </ref>, (ii) buffer insertion and buffer sizing techniques [XD95a], (iii) buffer and wire sizing techniques [CCW96, CK96], or (iv) buffer insertion/sizing and wire sizing techniques [PMO93, CC94b]. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, [XD95a, PMO93, CCW96, CK96] require a routed clock tree as input, and [CC94b] requires an input clock tree topology. <p> However, the values of parameters ff, , and max t rise in Equation (1.3) are not shown, and the performance of GRIN will depend on manual tuning of these parameters. Like the GRIN algorithm, the clustering-based algorithm of <ref> [CW96] </ref> also performs simultaneous clock tree routing and buffer insertion. As in the Greedy-DME method, at each iteration [CW96] maintains a set of subtrees S which initially is a set of sinks. <p> Like the GRIN algorithm, the clustering-based algorithm of <ref> [CW96] </ref> also performs simultaneous clock tree routing and buffer insertion. As in the Greedy-DME method, at each iteration [CW96] maintains a set of subtrees S which initially is a set of sinks. For each S there is some number k such that 2 k &lt; jSj 2 k+1 , and the zero-skew merging operation is iteratively applied to subtrees in S until jSj = 2 k . <p> Define a clock tree T to be redundant if there exists another tree with both smaller phase delay and total wirelength; T is non-redundant otherwise. The set of non-redundant clock trees generated by <ref> [CW96] </ref> yield a smooth trade-off between the phase delay and the total wire-length. In general, when more buffers are inserted, the phase delay is smaller while the wirelength is larger. For comparison, the authors of [CW96] also use the clock tree T constructed by Greedy-DME, and exhaustively consider all possible combinations <p> The set of non-redundant clock trees generated by <ref> [CW96] </ref> yield a smooth trade-off between the phase delay and the total wire-length. In general, when more buffers are inserted, the phase delay is smaller while the wirelength is larger. For comparison, the authors of [CW96] also use the clock tree T constructed by Greedy-DME, and exhaustively consider all possible combinations of buffer 24 insertion in T . That is, buffer insertion is performed after the clock tree routing is done. When more buffers are inserted, the algorithm of [CW96] achieves better phase delay for any <p> For comparison, the authors of <ref> [CW96] </ref> also use the clock tree T constructed by Greedy-DME, and exhaustively consider all possible combinations of buffer 24 insertion in T . That is, buffer insertion is performed after the clock tree routing is done. When more buffers are inserted, the algorithm of [CW96] achieves better phase delay for any given total wirelength cost. Since the number of buffers inserted at level k of the clock tree is limited to 2 k , not every possible buffer hierarchy is considered and the solution can be suboptimal. <p> However, this approach has a distinct advantage over GRIN in that all source-sink paths have the same number of buffers, implying less sensitivity to process variation. 1.2.3.2 Buffer Insertion and Buffer Sizing Unlike <ref> [VM95, CW96] </ref>, which consider simultaneous topology design and buffer insertion, the buffer insertion and sizing (BIS) method of Xi and Dai [XD95a] minimizes the power dissipation of a given (unbuffered) zero pathlength skew clock tree 4 , subject to constraints on phase delay and process variation-dependent skew. <p> There have been many works on buffered clock tree designs. [XD95a, PMO93, CC94b] determine the buffer tree hierarchy for the given clock tree layout or topology. <ref> [VM95, CW96] </ref> design the buffer tree 170 hierarchy and the routing of the clock net simultaneously. <p> For example, a 170-16-4-1 hierarchy has 170 buffers at level 3, 16 buffers at level 2, etc. Note that we always have k 0 = 1 since there is only one buffer at the root of the clock tree. As in <ref> [CC94b, PMO93, CW96] </ref>, to minimize the skew induced by the changes of buffer sizes due to the process variation, we assume that identical buffers are used at the same buffer level. (From the discussion of our method below, we can see that our method can work without this assumption by minor <p> H0 No buffer sliding. H1 Slide buffers to equalize max t (b i ) for all 1 i k, i.e., the max-delay from the input of each buffer b i to sinks which are the descendants of b i . This is the buffer sliding technique used in <ref> [PMO93, CW96] </ref>. H2 Slide buffers to equalize max t (b i ) and max t (b j ) where b i and b j are the sibling buffers. buffer sliding heuristics on benchmark circuit r1 with a 32-1 buffer hierarchy. <p> And for the 50ps skew regime, the heuristics H0, H1 and H2 respectively require 3.1%, 17.0% and 1.1% more wirelength on average than our heuristic H3. Notice that heuristic H1, the method used in <ref> [PMO93, CW96] </ref>, actually has the largest total wirelength in most cases. 6.5 Conclusions and Discussions In this work, we have extended the bounded-skew routing methodology to encompass several very practical clock routing issues: non-uniform layer parasitics, non-zero via resistance and/or capacitance, existing obstacles in the metal routing layers, and hierarchical buffered <p> Our experimental results show that H3 achieves very substantial wirelength improvements over the method used by <ref> [PMO93, CW96] </ref> for a range of buffer hierarchy types and skew bounds. 182
Reference: [Da92] <editor> D. Dobberpuhl and et al. "A 200MHz 64b Dual-Issue CMOS Microprocessor." </editor> <booktitle> Proc. IEEE Intl. Solid State Circuits Conf., </booktitle> <pages> pp. 106-107, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: Hence, a planar zero pathlength skew clock tree with minimal path length is an ideal starting point for design of the clock tree. 2 Our work does not address such issues as buffer insertion and wire-sizing; the most relevant design style is in some sense the "monolithic" single-buffer clocking approach <ref> [Bak90, Da92] </ref>. 51 For these four sinks on a line, edges of the optimal planar ZST will overlap.
Reference: [DKJ90] <author> W. M. Dai, R. Kong, J. Jue, and M. Sato. </author> <title> "Rubber band routing and dynamic data representation." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 52-55, </pages> <year> 1990. </year>
Reference-contexts: Currently, we do not take routing capacity, crosstalk constraints, etc. into consideration (recall the example of Figure 3.5b). We hope to use such computational geometry techniques as those of Dai et al. <ref> [DKJ90] </ref> to enhance our current approach. * Second, although Elmore-Planar-DME has reasonable runtime in practice, various heuristic speedups are possible.
Reference: [Eck80] <author> J. G. Ecker. </author> <title> "Geometric Programming Methods, Computations and Applications." </title> <journal> SIAM Review, </journal> <volume> 22(3) </volume> <pages> 338-362, </pages> <month> July </month> <year> 1980. </year>
Reference-contexts: Thus, the buffer sizing problem can be transformed into a convex programming problem for which posynomial programming <ref> [Eck80] </ref> can be applied. Since min t P and min t N have to be computed before the posynomial programming is applied, the overall buffer sizing algorithm is iterative in nature. At each iteration, min t P and min t N are computed and used in the skew constraints (1.6).
Reference: [Eda91] <author> M. Edahiro. </author> <title> "Minimum Skew and Minimum Path Length Routing in VLSI Layout Design." </title> <journal> NEC Research and Development, </journal> <volume> 32(4) </volume> <pages> 569-575, </pages> <year> 1991. </year>
Reference-contexts: The above methods all concentrate on generation of the clock tree topology: the topology is then embedded in the plane more or less arbitrarily as it is generated. The Deferred-Merge Embedding (DME) method, which was discovered independently by three groups <ref> [Eda91, CHH92a, BK92] </ref>, is a linear-time algorithm which optimally embeds any given topology in the Manhattan plane, i.e., with exact zero skew and minimum total wirelength. <p> Because the properties of the DME construction are central to our work, we now review the original DME method, following notations of [BK92, CHH92b]. 1.2.1.1 The DME Approach The Deferred-Merge Embedding (DME) algorithm <ref> [Eda91, CHH92a, BK92] </ref> achieves exact zero skew given any delay model for which sink delays are monotone in the length of each edge of the clock tree (pathlength delay and Elmore delay are both monotone delay models). <p> the sum of the ratios of length to width over all tree edges e in the path from root v r to v, i.e., R v = P jej Since the zero-skew routing is constructed in bottom-up order, the initial value of R v is approximated from the "equi-distant" routing <ref> [Eda91] </ref> (i.e., Greedy-DME solutions under pathlength delay) using minimum wire width. <p> This is also the convention of [ZD92], whose algorithm will generate the solution shown in Figure 2.1. Following related work on planar clock routing [ZD92] and on minimum-cost zero-skew routing <ref> [BK92, CHH92a, CHH92b, Eda91] </ref>, we first address this problem in the context of the pathlength (linear) delay approximation: pathlength delay is simply the edge length, allowing geometric intuitions to be applied. <p> P S 0 , P S 0 1 , 2 and the points p and v pertain to the later discussion about the partitioning rules for Linear-Planar-DME.) Overview of Contributions Our work lies at the juncture of two recent directions in clock routing: (i) the DME (Deferred-Merge Embedding) algorithm of <ref> [BK92, CHH92a, CHH92b, Eda91] </ref> which embeds a given topology with guaranteed exact zero pathlength skew and minimum cost; and (ii) the method of [ZD92], which is the first to guarantee a planar-embeddable clock routing solution. <p> Finally, Figure 2.6 shows the planar clock routing solutions constructed by Linear-Planar-DME and the algorithm of [ZD92] for the Primary 1 benchmark. 2.5 Conclusions and Discussions We have extended the DME algorithm of <ref> [Eda91, BK92, CHH92a, CHH92b] </ref> to construct a guaranteed-planar exact zero-skew clock routing tree which is compatible with the DME (optimum) solution. Hence, in the pathlength delay model, the wirelength of our solution is the minimum possible with respect to the generated topology. <p> Our enabling concept is a merging region, which generalizes the merging segment concept of the DME algorithm <ref> [Eda91, CHH92a, BK92] </ref> for zero-skew clock trees. For the pathlength delay model, we prove that the merging region is a convex polygon with at most 8 boundary segments which are either Manhattan arcs 45 ffi lines) or rectilinear line segments (horizontal or vertical line segments).
Reference: [Eda92] <author> M. Edahiro. </author> <title> "Minimum Path-Length Equi-Distant Routing." </title> <booktitle> In IEEE Asia-Pacific Conference on Circuits and Systems, </booktitle> <pages> pp. 41-46, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: The total wirelength of this zero-skew clock tree is 20 units, which is the minimum possible for the given topology. II. Greedy-DME: DME with Topology Construction. Note that DME requires an input topology. Several works including <ref> [CHH92a, CHH92b, Eda92] </ref> have thus studied topology constructions that lead to low-cost routing solutions when DME is applied; the most successful is the Greedy-DME method of [Eda92] 10 rithm. 11 which determines the topology of the merging tree in a greedy bottom-up fashion. <p> II. Greedy-DME: DME with Topology Construction. Note that DME requires an input topology. Several works including [CHH92a, CHH92b, Eda92] have thus studied topology constructions that lead to low-cost routing solutions when DME is applied; the most successful is the Greedy-DME method of <ref> [Eda92] </ref> 10 rithm. 11 which determines the topology of the merging tree in a greedy bottom-up fashion. Let F denote a set of merging segments which initially consists of all the sink locations, i.e., F = fms (s i )g. <p> The resulting tree has provably minimum total wirelength and minimum pathlength delay for its topology. A very simple ver 52 sion of our method produces planar solutions with total wirelengths that are competitive with the best non-planar exact zero-skew results in the literature <ref> [Eda92, CHH92b] </ref>. We also obtain an average of 15:5% wirelength savings over the previous planar routing algorithm of [ZD92]. 2.2 Single-Pass DME Describing our new planar clock routing algorithm requires a little more terminology. <p> These seven examples have also been studied by Edahiro <ref> [Eda92] </ref> and by Zhu and Dai [ZD92]. The x-coordinates and y-coordinates of Primary1 sink locations range from 120 to 5520 units and from 0 to 5790 units, respectively; those of Primary2 range from 20 to 9840 units and from 0 to 10250 units, respectively. <p> For the pathlength delay model, we compared Linear-Planar-DME against three other methods: the method of Zhu and Dai which guarantees a planar ZST; the KCR+DME method which gave the best results in [CHH92b]; and the Greedy-DME method of Edahiro <ref> [Eda92] </ref>, which gives the best-known wirelength results for zero-skew trees in the linear model. <p> Our topology generation method for bounded-skew routing is an extension of <ref> [Eda92, Eda93a] </ref> that exploits flexibility stemming from allowed skew during the topology construction.
Reference: [Eda93a] <author> M. Edahiro. </author> <title> "A Clustering-Based Optimization Algorithm in Zero-Skew Routings." </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 612-616, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Note that at any moment, F consists of the merging segments of the roots of maximal subtrees. After n1 iterations, F contains the merging segment for the root of the topology. In <ref> [Eda93a] </ref>, O (n log n) time complexity was achieved by finding several nearest-neighbor pairs at once, i.e., the algorithm first constructs a "nearest-neighbor graph" H over F . <p> Through zero-skew merges, jF j=f nearest-neighbor pairs (edges) are taken from the graph in non-decreasing order of edge weight, where f is a constant typically between 2 and 4. The solution is improved by a post-processing local search that adjusts the resulting topology (cf. "CL+I6" in <ref> [Eda93a] </ref>). <p> tree has large clock skew based on the fact that in practice, obstacles (large macro blocks), process variation, and other constraints make near zero-skew routing difficult, if not impossible, for large clock nets. 1.2.3.1 Buffer Insertion The GReedy INternal buffering (GRIN) algorithm [VM95] is an extension of the Greedy-DME Algorithm <ref> [Eda93a] </ref> which considers buffer insertion while satisfying rise time constraints and seeking to minimize the area (and thus power dissipation) of the clock net. At each merging step, the GRIN algorithm considers the possibility of inserting a buffer to reduce the wirelength, as follows. <p> solving M 1 0 , and that the OWBA algorithm not only optimizes delay, power and area, but also simultaneously minimizes process sensitivity with respect to average delay. [CCW96] test their OWBA algorithm on the five benchmarks r1 r5 [Tsa91] with initial clock tree routings constructed by the method of <ref> [Eda93a] </ref> under the pathlength delay model; these have Elmore delay skew ranging from 64ps to 974ps. The results show that the delay, skew and sensitivity are reduced by factors of about 6, 7 and 26 respectively. <p> Two important issues are: (i) choice of the topology G, and (ii) embedding to achieve zero Elmore delay skew. First, any connection topology can be trivially embedded with exact zero skew onto a single routing layer; however, re-embedding the topology of a non-planar ZST (e.g., from <ref> [Eda93a] </ref>) onto a single layer can drastically increase the tree 1 In fact, our method can construct a low-cost single-layer ZST for any monotonic delay model to which the original DME algorithm applies. 71 cost. <p> Experimentally, very limited improvements result from trying more than 16 cases. 83 3.6 Experimental Results We implemented the Linear-Planar-DME and Elmore-Planar-DME algorithms using Sun SPARC-10 workstations and the C/Unix environment. The same seven examples as in <ref> [CHH92b, Eda93a, ZD92] </ref> were studied. Benchmarks Primary1 and Primary2 both have the same loading capacitance of 0:5pF for all sinks, and also have per-unit wire resistance and wire capacitance of 16:6m and 0:027f F , respectively. Details of the circuit parameters for benchmarks r1-r5 can be found in [Tsa91]. <p> Thus, the observed time complexity of Linear-Planar-DME-3 is O (n (lg n) 3 ). Table 3.2 compares our new algorithms with two leading non-planar ZST algorithms in the literature - Greedy-DME <ref> [Eda93a] </ref> and KCR+DME [CHH92b, KCR91] as well as the previous planar routing method of Zhu and Dai [ZD92]. Greedy-DME corresponds to the CL+I6 method of Edahiro [Eda93a], and can yield an unbalanced topology. KCR+DME uses a matching approach to achieve a balanced topology [CHH92b]. <p> Table 3.2 compares our new algorithms with two leading non-planar ZST algorithms in the literature - Greedy-DME <ref> [Eda93a] </ref> and KCR+DME [CHH92b, KCR91] as well as the previous planar routing method of Zhu and Dai [ZD92]. Greedy-DME corresponds to the CL+I6 method of Edahiro [Eda93a], and can yield an unbalanced topology. KCR+DME uses a matching approach to achieve a balanced topology [CHH92b]. Our new planar ZST solutions are competitive with the best known non-planar ZST solutions of Greedy-DME (having average 9:8% greater wiring cost), and are superior to KCR+DME solutions in all cases. <p> Costs of our planar ZST solutions are comparable to those of the best previous non-planar ZST solutions, and substantially improve over 85 (a) Greedy-DME <ref> [Eda93a] </ref> (b) Linear-Planar-DME (c) Elmore-Planar-DME (d) Zhu-Dai [ZD92] lines. 86 Greedy Lin-Pln Elm-Pln- KCR+ Naive Elm- benchmark DME DME-3 DME DME Pln-DME Zhu-Dai prim1 129.2 130.2 132.9 140.1 146.1 167.9 prim2 304.0 320.1 330.2 345.2 391.6 422.5 r1 1,253.3 1,351.3 1,392.8 1,487 1,686.2 1,778.3 r3 3,193.8 3,501.4 3,543.7 3,867 3,916.2 4,635.9 <p> 4,635.9 r5 9,723.7 10,556.2 10,806.4 11,606 12,823.3 14,119.4 Ave Cost (+0.0%) +7.2% +9.8% +17.3% +28.1% +39.4% Planar No Yes Yes No Yes Yes Delay Model Elmore Linear Elmore Elmore Elmore Linear Table 3.2: Comparison of Elmore-Planar-DME with other algorithms in terms of total wirelength, using the same benchmarks studied in <ref> [CHH92b, Eda93a, ZD92] </ref>. No prescribed clock source location was assumed. Ave Cost indicates the average percentage increase in wire-length versus the results of CL+I6 [Eda93a]. Note that all wirelengths have been divided by 100 units. previous planar clock routing methods. <p> No prescribed clock source location was assumed. Ave Cost indicates the average percentage increase in wire-length versus the results of CL+I6 <ref> [Eda93a] </ref>. Note that all wirelengths have been divided by 100 units. previous planar clock routing methods. We have considered several improvements to this work. * First, the output of our Planar-DME approach may be viewed as a planar routing sketch for a ZST. <p> Our topology generation method for bounded-skew routing is an extension of <ref> [Eda92, Eda93a] </ref> that exploits flexibility stemming from allowed skew during the topology construction. <p> With this new topology generation method, not only can our Ex-DME algorithm provide a smooth cost-skew tradeoff, but it also very closely matches the performance of the best-known heuristics for both the zero-skew <ref> [Eda93a, Eda94] </ref> and infinite-skew limiting cases [BOI94, KR92]. Note that the latter case corresponds to the classic rectilinear Steiner minimal tree problem. Recall that in DME, two merging subtrees are always merged at their roots so as to maintain zero skew. <p> The data for ExG-DME are the best results obtained using k = 2 to 5. When B = 0, ExG-DME and ExP-DME are equivalent to the best known non-planar and planar ZST algorithms <ref> [Eda93a, KT94] </ref> in the literature. (Our numbers are slightly different from those reported in [Eda93a], since that paper uses the Elmore delay model.) When B = 1, the Steiner trees constructed by ExG-DME average only 0.21% higher cost than [BOI94]; on the other hand, ExP-DME is essentially similar to the "MST <p> The data for ExG-DME are the best results obtained using k = 2 to 5. When B = 0, ExG-DME and ExP-DME are equivalent to the best known non-planar and planar ZST algorithms [Eda93a, KT94] in the literature. (Our numbers are slightly different from those reported in <ref> [Eda93a] </ref>, since that paper uses the Elmore delay model.) When B = 1, the Steiner trees constructed by ExG-DME average only 0.21% higher cost than [BOI94]; on the other hand, ExP-DME is essentially similar to the "MST + edge overlapping" heuristic [HVW90] for the Steiner minimal tree problem. <p> Each pair of coordinates associated with a point or a segment represents its max-delay and min-delay. by our method with the best reported zero-skew clock routing costs of the best known algorithm (CL+I6 from <ref> [Eda93a] </ref>). Note that for the infinite-skew case, our method will give the same result under both the pathlength and Elmore delay models. Also included in Table 5.6 is the CPU time. <p> Also included in Table 5.6 is the CPU time. In general, we see a decrease in total wirelength (and an increase in the CPU time) as the skew bound increases. When the skew bound B = 0, our routing costs are on average 5:4% higher than that of <ref> [Eda93a] </ref>. We believe that this is due to the fact that the CL+I6 algorithm performs local optimization using exhaustive search and calculates an optimum sequence, which we did not implement in our algorithm. The other reason is that [Eda93a] used the best result from eight different values of the f parameter <p> 0, our routing costs are on average 5:4% higher than that of <ref> [Eda93a] </ref>. We believe that this is due to the fact that the CL+I6 algorithm performs local optimization using exhaustive search and calculates an optimum sequence, which we did not implement in our algorithm. The other reason is that [Eda93a] used the best result from eight different values of the f parameter ranging from 2 to 4 (recall the discussion of the Greedy-DME algorithm in Section 2.1), while we use only the single value = 1. <p> When the skew bound is relaxed from zero to 150ps, we achieve a average power reduction of up to 18:4%. We also achieve 26:6% average wirelength reduction when compared to the best reported zero-skew solutions (by the CL+I6 algorithm in <ref> [Eda93a] </ref>). Table 5.6 shows the results obtained by IME method in [CKK95a] for the same set of skew bounds. In this experiment, IME uses s = 7 joining segments (possibly interior to the merging regions) from each child merging region to generate merging regions for the parent node.
Reference: [Eda93b] <author> M. Edahiro. </author> <title> "Delay Minimization for Zero-Skew Routing." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 563-566, </pages> <year> 1993. </year> <month> 185 </month>
Reference-contexts: Both [KHB93, ZD92] rely completely on the pathlength delay model to achieve their results. 13 1.2.2 Wire sizing in Clock Routing We use the term wire sizing to describe the variation of individual wire segment widths in the clock tree to improve the performance, reliability, and area. Three papers <ref> [Eda93b, ZDX93, PMP93] </ref> are representative of wire sizing techniques in clock routing. In [Eda93b], the wire sizing and clock routing (topology generation and embedding) are performed simultaneously. The solution has exact zero Elmore skew while also minimizing phase delay and skew sensitivity to process variation. <p> Three papers [Eda93b, ZDX93, PMP93] are representative of wire sizing techniques in clock routing. In <ref> [Eda93b] </ref>, the wire sizing and clock routing (topology generation and embedding) are performed simultaneously. The solution has exact zero Elmore skew while also minimizing phase delay and skew sensitivity to process variation. <p> Both [ZDX93, PMP93] require an input routed clock tree which may have (large) non-zero skew (possibly due to routing constraints); thus, these methods cannot guarantee a solution with exact zero clock skew as does <ref> [Eda93b] </ref>. While [ZDX93] only aims to minimize the skew, [PMP93] tries to simultaneously minimize skew, phase delay and skew sensitivity to process variation. We note that [ZDX93, PMP93] assume discrete wire widths; the model of [Eda93b], which assumes the continuous wire widths without any explicit upper bound on the wire widths, <p> constraints); thus, these methods cannot guarantee a solution with exact zero clock skew as does <ref> [Eda93b] </ref>. While [ZDX93] only aims to minimize the skew, [PMP93] tries to simultaneously minimize skew, phase delay and skew sensitivity to process variation. We note that [ZDX93, PMP93] assume discrete wire widths; the model of [Eda93b], which assumes the continuous wire widths without any explicit upper bound on the wire widths, may not be feasible in practice. It is expected that [Eda93b] will achieve smaller total wire area (and possibly phase delay) than [ZDX93, PMP93] since the solution quality of the post-processing method is dependent on <p> We note that [ZDX93, PMP93] assume discrete wire widths; the model of <ref> [Eda93b] </ref>, which assumes the continuous wire widths without any explicit upper bound on the wire widths, may not be feasible in practice. It is expected that [Eda93b] will achieve smaller total wire area (and possibly phase delay) than [ZDX93, PMP93] since the solution quality of the post-processing method is dependent on the given routing layout. One disadvantage of wire sizing is that wire area may increase, which in turn increases capacitive power dissipation. <p> None of these works attempts to address the tradeoff between power reduction and phase delay/skew/skew sensitivity reduction. Two works [CCW96, CK96] discussed below consider power minimization during buffer and wire sizing. Edahiro <ref> [Eda93b] </ref> uses wire width optimization to reduce the phase delay of a zero-skew routing. <p> By solving @t d @w e a @w e b = 0, it can be shown <ref> [Eda93b] </ref> that over the domain w e a , w e b w min and d = je a j + je b j, the function t d (w e a ; w e b ) has a global minimum when w e a = w e b = w fl <p> The later work of [Sap96] shows that the monotone property also holds under uniform wirelengths (i.e., all wire segments have the same lengths) when the objective is to minimize the maximum sink delay. 16 <ref> [Eda93b] </ref> reports that this method achieves 10% 50% reduction in phase delay versus the best previous methods without wire sizing, but this comes at the expense of the increase of the total wire area and thus power dissipation. <p> Monte Carlo simulations show that when process variations occur, the 19 worst-case skew is still much smaller than the skew of the original MMM solu-tion. As with the method of [ZDX93], the effectiveness of this method will be limited when initial solutions are given by <ref> [Eda93b] </ref>. 1.2.3 Buffered Clock Tree As the clock tree becomes larger, it becomes more difficult to use a single huge buffer at the root to drive the entire tree; this is due to various constraints such as the power dissipation, rise/fall time at sinks, and reliability (e.g., thermal degradation or hot-electron <p> The results show that the delay, skew and sensitivity are reduced by factors of about 6, 7 and 26 respectively. Furthermore, OWBA requires only 67-second runtime and 1:3 MB storage to solve the largest standard benchmark, r5, with 3101 sinks. Like the method of <ref> [Eda93b] </ref>, the OWBA algorithm assumes continuous wire widths and buffer sizes; optimality may be lost after mapping to discrete solutions. Also, power dissipation due to intermediate buffers is ignored in the objective function. <p> A final observation is that the OWBA algorithm, like [ZDX93, PMP93, XD95a, PMO93], performs post-optimization of a routed clock tree. It is unclear whether near-zero skew and large delay reductions will still be achieved if the OWBA algorithm is applied to ZST solutions with minimized delay <ref> [Eda93b, CC94b] </ref>. To minimize delay and power dissipation, [CK96] recently proposed the simultaneous buffer and wire sizing (SWBS) algorithm. Unlike the OWBA algorithm, [CK96] assumes discrete wire widths and buffer sizes.
Reference: [Eda93c] <author> M. Edahiro. </author> <title> "Delay Minimization for Zero-Skew Routing." </title> <type> Technical Report CS-TR-415-93, </type> <institution> Department of Computer Science, Princeton University and C&C Systems Research laboratories, NEC Corporation, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: Once a zero-skew routing is generated, the values R v can be re-calculated for each node v, and used for approximation of R v in a second pass. <ref> [Eda93c] </ref> states that more precise approximation of R v is achieved by more iterations.
Reference: [Eda94] <author> M. Edahiro. </author> <title> "An Efficient Zero-Skew Routing Algorithm." </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 375-380, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: With this new topology generation method, not only can our Ex-DME algorithm provide a smooth cost-skew tradeoff, but it also very closely matches the performance of the best-known heuristics for both the zero-skew <ref> [Eda93a, Eda94] </ref> and infinite-skew limiting cases [BOI94, KR92]. Note that the latter case corresponds to the classic rectilinear Steiner minimal tree problem. Recall that in DME, two merging subtrees are always merged at their roots so as to maintain zero skew. <p> Thus, the time complexity of ExG-DME is O (n 2 log n). By using the bucket decomposition method of <ref> [Eda94] </ref>, the nearest-neighbor graph can be constructed in linear time, so that the total time complexity becomes O (n log n). Note that when the root is repositioned at a tree edge at the lower level, the tree will become very unbalanced.
Reference: [Elm48] <author> W. C. </author> <title> Elmore. "The Transient Response of Damped Linear Networks With Particular Regard to Wide-Band Amplifiers." </title> <journal> Journal of Applied Physics, </journal> <volume> 19(1) </volume> <pages> 55-63, </pages> <month> January </month> <year> 1948. </year>
Reference-contexts: Initially, the loading capacitance is given for each sink node. Then, C v and t (v; u) for an internal node v 2 G with children a and b are calculated as follows <ref> [Elm48, RPH83, Sak83] </ref>: 3 t (v; u) = t (w; u) + r je w j ( 2 where w 2 P ath (v; u) is a child of node v.
Reference: [Fis90] <author> J. P. Fishburn. </author> <title> "Clock Skew Optimization." </title> <journal> IEEE Trans. Computers, </journal> <volume> 39(7) </volume> <pages> 945-951, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Second, from Equation (1.8) we know that negative clock skew, i.e., skew (i; j) &lt; 0, can be considered useful skew since it actually increases the effective clock period <ref> [Fis90] </ref>. That is, we can improve the performance of the system by introducing negative skew as long as Equation (1.7) is not violated. Third, the skew bounds can be adjusted by sizing the logic gates. <p> The positive skew bound can be enlarged by increasing drive strengths to decrease max t (L ij ). The negative skew bound can be enlarged by decreasing drive strengths to increase min t (L ij ). Note that smaller gate sizes will generally result in less power dissipation. Fishburn <ref> [Fis90] </ref> was the first to study these properties of clock skew. He formulates the problem of clock skew optimization to maximize the minimum safety margin against clock hazards.
Reference: [Fri95] <author> E. G. Friedman, </author> <title> editor. Clock Distribution networks in VLSI Circuits and Systems: A Selected Reprint Volume. </title> <publisher> IEEE Press, </publisher> <year> 1995. </year>
Reference-contexts: More detailed surveys of clock tree synthesis can be found in <ref> [KR95, Fri95, CHK96] </ref>. 1.2.1 Minimum-Cost Zero-Skew Trees Minimum-cost, exact zero-skew clock trees for large cell-based designs have been addressed in a series of works by Kuh et al., Tsay, Boese et al., and others - primarily via geometric optimizations applied to the set of sink locations. <p> Thus, the "zero-skew" clock tree and performance-driven routing literatures have seen rapid growth over the past several years; see <ref> [KR95, Fri95] </ref> for reviews. "Exact zero skew" is typically obtained at the expense of increased wiring area and 146 higher power dissipation. In practice, circuits still operate correctly within some non-zero skew bound, and so the actual design requirement is for a bounded-skew routing tree (BST).
Reference: [Gin90] <author> L. P. P. P. van Ginneken. </author> <title> "Buffer Placement in Distributed RC-Tree Networks for Minimal Elmore Delay." </title> <booktitle> In Proc. IEEE Intl. Symp. Circuits and Systems, </booktitle> <pages> pp. 865-868, </pages> <year> 1990. </year>
Reference-contexts: When the bounds from SBWS-LU-Bound do not meet, 30 a dynamic programming approach similar to <ref> [Gin90, LCL95] </ref> is used to compute the optimal solution. Note that the objective function in [Gin90, LCL95] is to minimize the maximum Elmore delay, while the objective of SBWS is to minimize the weighted sum of delays. <p> When the bounds from SBWS-LU-Bound do not meet, 30 a dynamic programming approach similar to <ref> [Gin90, LCL95] </ref> is used to compute the optimal solution. Note that the objective function in [Gin90, LCL95] is to minimize the maximum Elmore delay, while the objective of SBWS is to minimize the weighted sum of delays. Experimentally, SBWS has been applied to reduce the inter-clock skew of two clock nets CLK and DCLK in a custom logic block [CK96].
Reference: [Gon85] <author> T. F. Gonzalez. </author> <title> "Clustering to Minimize the Maximum Interclus-ter Distance." </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 38(2-3):293-306, </address> <month> June </month> <year> 1985. </year>
Reference-contexts: If there are k buffers in the next higher level of the buffer hierarchy, then this is a k-way clustering problem. Numerous algorithms have been developed for geometric clustering (see, e.g., the survey in [AK93]); our empirical studies show that the K-Center technique of Gonzalez <ref> [Gon85] </ref> tends to produce more balanced clusters than other techniques. Furthermore, the K-Center heuristic has only O (nk) time complexity (assuming n nodes at the current level).
Reference: [HVW90] <author> J.-M. Ho, G. Vijayan, and C. K. Wong. </author> <title> "New Algorithms for the Rectilinear Steiner Tree Problem." </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 9(2) </volume> <pages> 185-193, </pages> <year> 1990. </year>
Reference-contexts: The resulting ExP-DME heuristic is described in Figure 4.12. When B = 0, the time complexity of ExP-DME is O (n log n) since ExP-DME is identical to Linear-Planar-DME. When the skew bound increases, the running time of ExP 4 Ho et al. <ref> [HVW90] </ref> provide an optimal edge-overlapping construction, but it cannot always be applied to the KRY spanning trees which may contain high-degree nodes. The output of our edge-overlapping heuristic is nearly identical to that of the optimal edge-overlapping algorithm of Ho et al. (called S-RST in [HVW90]), with about 0:2% average cost <p> ExP 4 Ho et al. <ref> [HVW90] </ref> provide an optimal edge-overlapping construction, but it cannot always be applied to the KRY spanning trees which may contain high-degree nodes. The output of our edge-overlapping heuristic is nearly identical to that of the optimal edge-overlapping algorithm of Ho et al. (called S-RST in [HVW90]), with about 0:2% average cost difference. 116 DME becomes dominated by the KRY and edge-overlapping heuristics. Exper--imentally, ExP-DME takes no more than 43 minutes to solve all benchmark examples under any skew bound. <p> (Our numbers are slightly different from those reported in [Eda93a], since that paper uses the Elmore delay model.) When B = 1, the Steiner trees constructed by ExG-DME average only 0.21% higher cost than [BOI94]; on the other hand, ExP-DME is essentially similar to the "MST + edge overlapping" heuristic <ref> [HVW90] </ref> for the Steiner minimal tree problem. When 0 &lt; B &lt; 1, both ExG-DME and ExP-DME obtain smooth skew-cost tradeoffs. The effectiveness of these methods is due to their novel topology generation strategies, which allow very natural transitions between zero-skew tree and Steiner minimal tree constructions.
Reference: [JSK90] <author> M. A. B. Jackson, A. Srinivasan, and E. S. Kuh. </author> <title> "Clock Routing for High Performance ICs." </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 573-579, </pages> <year> 1990. </year>
Reference-contexts: The first clock tree construction for cell-based layouts with arbitrary sink locations was that of Jackson et al. <ref> [JSK90] </ref>; their MMM algorithm does recursive top-down partitioning of the set of sinks into two equal-sized subsets, always connecting the centroid of a set to the centroids of its subsets. Kahng et al. [CKR93, KCR91] constructed clock tree topologies using a bottom-up matching approach. <p> Khan et al. [KHB93] have observed this deficiency, and have proposed a guaranteed-planar heuristic which reduces the tree cost by applying the top-down horizontal/vertical partitioning approach of <ref> [JSK90] </ref> for a user-specified number of levels, then applying the Zhu and Dai X-tree construction within each of the resulting regions. When the user-specified number of levels is zero, the method reduces to that of Zhu-Dai. <p> We conclude that no routing crosses any other. 2.4 Experimental Results We implemented the Linear-Planar-DME algorithm on Sun SPARC IPC workstations in the C/UNIX environment. Two sets of benchmarks were used: (i) the sink placements for the MCNC Primary1 and Primary2 benchmarks used in <ref> [JSK90] </ref> and [CKR93], and originally provided by the authors of [JSK90]; and (ii) the sink placements for the five benchmarks r1 - r5 used in [Tsa91]. These seven examples have also been studied by Edahiro [Eda92] and by Zhu and Dai [ZD92]. <p> Two sets of benchmarks were used: (i) the sink placements for the MCNC Primary1 and Primary2 benchmarks used in <ref> [JSK90] </ref> and [CKR93], and originally provided by the authors of [JSK90]; and (ii) the sink placements for the five benchmarks r1 - r5 used in [Tsa91]. These seven examples have also been studied by Edahiro [Eda92] and by Zhu and Dai [ZD92].
Reference: [KCR91] <author> A. B. Kahng, J. Cong, and G. Robins. </author> <title> "High-Performance Clock Routing Based on Recursive Geometric Matching." </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 322-327, </pages> <year> 1991. </year>
Reference-contexts: Kahng et al. <ref> [CKR93, KCR91] </ref> constructed clock tree topologies using a bottom-up matching approach. Their "KCR" algorithm obtains zero pathlength skew in practice (i.e., zero skew under the pathlength delay model) but has no theoretical guarantee. <p> The work of Tsay [Tsa91] was the first to guarantee exact zero skew for any input; this was 5 accomplished with respect to the Elmore delay model. In the same spirit as <ref> [KCR91] </ref>, Tsay recursively combines pairs of zero skew trees at "tapping points" to yield larger zero skew trees. To maintain exact zero skew, wires are elongated via "snaking", i.e., detouring, as necessary. <p> Thus, the observed time complexity of Linear-Planar-DME-3 is O (n (lg n) 3 ). Table 3.2 compares our new algorithms with two leading non-planar ZST algorithms in the literature - Greedy-DME [Eda93a] and KCR+DME <ref> [CHH92b, KCR91] </ref> as well as the previous planar routing method of Zhu and Dai [ZD92]. Greedy-DME corresponds to the CL+I6 method of Edahiro [Eda93a], and can yield an unbalanced topology. KCR+DME uses a matching approach to achieve a balanced topology [CHH92b].
Reference: [KHB93] <author> W. Khan, X. He, L. Bangaru, and N. Sherwani. </author> <title> "Combat: Zero Skew Minimal Delay Planar Clock Routing for High Performance Systems." </title> <type> Technical Report TR/93-08, </type> <institution> Computer Science Dept., Western Michi-gan Univ., </institution> <month> April </month> <year> 1993. </year> <month> 186 </month>
Reference-contexts: Khan et al. <ref> [KHB93] </ref> have observed this deficiency, and have proposed a guaranteed-planar heuristic which reduces the tree cost by applying the top-down horizontal/vertical partitioning approach of [JSK90] for a user-specified number of levels, then applying the Zhu and Dai X-tree construction within each of the resulting regions. <p> When the user-specified number of levels is zero, the method reduces to that of Zhu-Dai. The authors of <ref> [KHB93] </ref> claim that their algorithm guarantees minimum source-sink pathlength delay, and report approximately 10% wirelength reduction over [ZD92]. <p> When the user-specified number of levels is zero, the method reduces to that of Zhu-Dai. The authors of [KHB93] claim that their algorithm guarantees minimum source-sink pathlength delay, and report approximately 10% wirelength reduction over [ZD92]. Both <ref> [KHB93, ZD92] </ref> rely completely on the pathlength delay model to achieve their results. 13 1.2.2 Wire sizing in Clock Routing We use the term wire sizing to describe the variation of individual wire segment widths in the clock tree to improve the performance, reliability, and area.
Reference: [KHS92a] <author> W. Khan, M. Hossain, and N. Sherwani. </author> <title> "Minimum Skew Multiple Clock Routing in Synchronous ASIC Systems." </title> <booktitle> In Proc. IEEE Intl. ASIC Conf. and Exhibit, </booktitle> <pages> pp. 22-25, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: In fact, large VLSI systems may use multiple clocks for extra degrees of freedom in the system timing. In multiple-clock systems, it is necessary to minimize not only the skew within 40 a clock (intra-clock skew) but also the skew between different clocks (inter-clock skew). <ref> [KHS92a, KHS92b] </ref> study the 2-phase clock routing problem in which each clock phase is simply treated as a separate clock and each routed with the ZST algorithm of [Tsa91]. Their algorithm did not show clearly how inter-clock skew can be eliminated.
Reference: [KHS92b] <author> W. Khan, M. Hossain, and N. Sherwani. </author> <title> "Zero Skew Clock Routing in Multiple-Clock Synchronous Systems." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 464-467, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: In fact, large VLSI systems may use multiple clocks for extra degrees of freedom in the system timing. In multiple-clock systems, it is necessary to minimize not only the skew within 40 a clock (intra-clock skew) but also the skew between different clocks (inter-clock skew). <ref> [KHS92a, KHS92b] </ref> study the 2-phase clock routing problem in which each clock phase is simply treated as a separate clock and each routed with the ZST algorithm of [Tsa91]. Their algorithm did not show clearly how inter-clock skew can be eliminated.
Reference: [Koh97] <author> C.-K. Koh. </author> <type> "PhD Thesis (in preparation)." </type> <institution> University of California, </institution> <address> Los Angeles, </address> <year> 1997. </year>
Reference-contexts: To avoid exponential growth in the number of possible merging regions for each internal node, at most k "best" merging regions are selected from m s 2 k 2 regions generated by merging each possible pair of segments of the child nodes. Details will be presented in Koh's thesis <ref> [Koh97] </ref>; see also [CKK95a].
Reference: [KR92] <author> A. B. Kahng and G. Robins. </author> <title> "A New Class of Iterative Steiner Tree Heuristics with Good Performance." </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 11(7) </volume> <pages> 893-902, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: With this new topology generation method, not only can our Ex-DME algorithm provide a smooth cost-skew tradeoff, but it also very closely matches the performance of the best-known heuristics for both the zero-skew [Eda93a, Eda94] and infinite-skew limiting cases <ref> [BOI94, KR92] </ref>. Note that the latter case corresponds to the classic rectilinear Steiner minimal tree problem. Recall that in DME, two merging subtrees are always merged at their roots so as to maintain zero skew. However, the shortest connection between two trees may not be between their roots.
Reference: [KR95] <author> A. B. Kahng and G. Robins. </author> <title> On Optimal Interconnections for VLSI. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1995. </year>
Reference-contexts: More detailed surveys of clock tree synthesis can be found in <ref> [KR95, Fri95, CHK96] </ref>. 1.2.1 Minimum-Cost Zero-Skew Trees Minimum-cost, exact zero-skew clock trees for large cell-based designs have been addressed in a series of works by Kuh et al., Tsay, Boese et al., and others - primarily via geometric optimizations applied to the set of sink locations. <p> In practice, circuits still operate correctly within some non-zero skew bound, and so the actual design requirement is for a bounded-skew routing tree (BST) <ref> [KR95] </ref>. In addition, recall that works such as those of Zhu and Dai [ZDX93] and Pullela et al. [PMP93] use initial non-zero skew routing solutions which are then wiresized to satisfy a given skew bound; construction of an initial minimum-cost BST is a key underlying optimization. <p> Table 4.1 shows the total wirelengths of BSTs constructed by ExG-DME/ExP-DME for different values of the skew bound. The last row of the table gives the results obtained by the Steiner heuristic in [BOI94], which has O (n log n) time complexity and is competitive with Iterated 1-Steiner <ref> [KR95] </ref> heuristic in terms of minimizing RSMT cost. The data for ExG-DME are the best results obtained using k = 2 to 5. <p> Thus, the "zero-skew" clock tree and performance-driven routing literatures have seen rapid growth over the past several years; see <ref> [KR95, Fri95] </ref> for reviews. "Exact zero skew" is typically obtained at the expense of increased wiring area and 146 higher power dissipation. In practice, circuits still operate correctly within some non-zero skew bound, and so the actual design requirement is for a bounded-skew routing tree (BST).
Reference: [KRY93] <author> S. Khuller, B. Raghavachari, and N. Young. </author> <title> "Balancing Minimum Spanning and Shortest Path Trees." </title> <booktitle> Proc. ACM/SIAM Symp. Discrete Algorithms, </booktitle> <pages> pp. 243-250, </pages> <year> 1993. </year>
Reference-contexts: To achieve the planar radius-bounded tree construction over the sinks in any given cluster, we modify the KRY method of Khuller et al. <ref> [KRY93] </ref>, so that it does not cross the clock tree edge that leads into the given sink cluster. 3 The spanning tree output by KRY may be converted to a Steiner tree by overlapping the embeddings of tree edges within the union of their bounding boxes.
Reference: [KT94] <author> A. B. Kahng and C.-W. Albert Tsao. "Planar-DME: </author> <title> Improved Planar Zero-Skew Clock Routing With Minimum Pathlength Delay." </title> <booktitle> In Proc. European Design Automation Conf. with with EURO-VHDL, </booktitle> <pages> pp. 440-445, </pages> <address> Grenoble, France, </address> <month> September </month> <year> 1994. </year> <note> Also available as technical report CSD-940006, </note> <institution> Computer Science Dept., UCLA. </institution>
Reference-contexts: Furthermore, such variants can achieve averages of up to 10.9% wirelength reduction versus results for the original Linear-Planar-DME algorithm which we have reported in <ref> [KT94] </ref>. We now briefly describe two possible Linear-Planar-DME variants. Using a Splitting Path Consider a subset of sinks S 0 S that is being partitioned, with jS 0 j 2. Recall that the splitting path consists of line segment pv and ~v, a ray emanating from v. <p> The data for ExG-DME are the best results obtained using k = 2 to 5. When B = 0, ExG-DME and ExP-DME are equivalent to the best known non-planar and planar ZST algorithms <ref> [Eda93a, KT94] </ref> in the literature. (Our numbers are slightly different from those reported in [Eda93a], since that paper uses the Elmore delay model.) When B = 1, the Steiner trees constructed by ExG-DME average only 0.21% higher cost than [BOI94]; on the other hand, ExP-DME is essentially similar to the "MST
Reference: [LCL95] <author> J. Lillis, C.-K. Cheng, and T.-T. Y. Lin. </author> <title> "Optimal Wire Sizing and Buffer Insertion for Low Power and a Generalized Delay Model." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 138-143, </pages> <month> Novem-ber </month> <year> 1995. </year>
Reference-contexts: When the bounds from SBWS-LU-Bound do not meet, 30 a dynamic programming approach similar to <ref> [Gin90, LCL95] </ref> is used to compute the optimal solution. Note that the objective function in [Gin90, LCL95] is to minimize the maximum Elmore delay, while the objective of SBWS is to minimize the weighted sum of delays. <p> When the bounds from SBWS-LU-Bound do not meet, 30 a dynamic programming approach similar to <ref> [Gin90, LCL95] </ref> is used to compute the optimal solution. Note that the objective function in [Gin90, LCL95] is to minimize the maximum Elmore delay, while the objective of SBWS is to minimize the weighted sum of delays. Experimentally, SBWS has been applied to reduce the inter-clock skew of two clock nets CLK and DCLK in a custom logic block [CK96].
Reference: [LDW93] <author> H. Liao, W. Dai, R. Wang, and F.Y. Chang. </author> <title> "S-parameter based macro model of distributed-lumped networks using exponentially decayed polynomial function." </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 726-731, </pages> <year> 1993. </year>
Reference-contexts: This sizing method can be used under pathlength or Elmore delay, or under a generalized delay model <ref> [LDW93] </ref> appropriate to RLC and transmission line networks (under pathlength or Elmore delay, the method has no effect if the initial solution already has zero skew). The overall approach reduces clock skew 17 at the expense of increased wire area in all cases, and increased phase delay in some cases.
Reference: [LW94] <author> S. Lin and C. K. Wong. </author> <title> "Process-Variation-Tolerant Clock Skew Minimization." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 284-288, </pages> <year> 1994. </year>
Reference-contexts: We now review several clock routing approaches that construct non-tree solutions. Unlike the binary merging used in the DME algorithm, Lin and Wong <ref> [LW94] </ref> merge multiple sinks (e.g., 15 or 16 sinks) all at once to form a zero-skew non-tree routing. <p> For example, to move the clock sink A to the right, the designer can just shift A-A1 to the right, or if the capacitive loading of sink B is different than expected, only the delay of B-B1 will change. The authors of <ref> [LW94] </ref> argue that since each clock sink is connected to the center chunk with the shortest possible wire, only minimal skew will be introduced when the RC parameters vary. <p> They further claim that because all edges at any level have identical lengths in the balanced length binary tree, their approach is much less sensitive to process variation. Experimental results in <ref> [LW94] </ref> show that the algorithm achieves better process 37 length binary tree rooted at L with 4 driving points on the center chunk as the leaves. (c) The resulting non-tree zero-skew clock routing. 38 variation tolerance than the zero-skew algorithm of [Tsa91] on an industry floating point unit with 18 clock <p> However, the algorithm of <ref> [LW94] </ref> may require much larger wire area and hence power dissipation, due to the large wire area of center trunks and the balanced length binary trees over potentially large number of driving points on the center trunks.
Reference: [NLL83] <author> T. M. Nicholl, D. T. Lee, Y. Z. Liao, and C. K. Wong. </author> <title> "On the X-Y Convex Hull of a Set of X-Y Polygons." </title> <journal> BIT, </journal> <volume> 23 </volume> <pages> 456-471, </pages> <year> 1983. </year> <month> 187 </month>
Reference-contexts: For example, obstacles (planar edges) are actually connected as subtrees, and all the obstacles in each subtree can be replaced by its (rectilinear) convex hull <ref> [NLL83] </ref> to reduce the complexity of procedure Find-Shortest-Planar-Path. Also the number of 87 candidate embedding points tested by Improve-Path can be greatly reduced. * Third, we are pursuing the exact algorithm which can guarantee the optimum (near-optimum) planar zero-skew embedding of any given topology under the pathlength (Elmore) delay model.
Reference: [PMO93] <author> S. Pullela, N. Menezes, J. Omar, and L. T. Pillage. </author> <title> "Skew and Delay Optimization for Reliable Buffered Clock Trees." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 556-562, </pages> <year> 1993. </year>
Reference-contexts: Now suppose that the phase delay t d can be expressed by the formula t d = k 1 C v r + k 2 + t (v r ) where the first two terms are the linear "k-factor" equation <ref> [PMO93] </ref> for calculating the buffer delay 2 , and the last term is the Elmore delay of the wire. From 2 In general, the k-factor equation is a delay formula for gates (or cells) based on input rise/fall time (or edge rate) and capacitive load at gate output. <p> This implies that a so-called "monotone property" 3 (cf. [CL95]) will hold in the zero-skew clock routing. input rise time, <ref> [PMO93] </ref> models the buffer delay as a function of the capacitive load C L , by a linear k-factor equations: d b = k 2 + k 1 C L . <p> The delay through the buffer is given by the linear equation d b = r b C L + t b [VM95, CW96, CC94b, CK96]. (Recall that <ref> [PMO93] </ref> models buffer delay using a linear k-factor equation d b = k 1 + k 2 C L , with empirical constants k 1 and k 2 generated from SPICE runs; the switch-resistor model is equivalent to the k-factor equation.) Buffers of different sizes have different parameters. <p> In this subsection, we will summarize several representative works which use (i) buffer insertion techniques only [VM95, CW96], (ii) buffer insertion and buffer sizing techniques [XD95a], (iii) buffer and wire sizing techniques [CCW96, CK96], or (iv) buffer insertion/sizing and wire sizing techniques <ref> [PMO93, CC94b] </ref>. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, [XD95a, PMO93, CCW96, CK96] require a routed clock tree as input, and [CC94b] requires an input clock tree topology. <p> several representative works which use (i) buffer insertion techniques only [VM95, CW96], (ii) buffer insertion and buffer sizing techniques [XD95a], (iii) buffer and wire sizing techniques [CCW96, CK96], or (iv) buffer insertion/sizing and wire sizing techniques [PMO93, CC94b]. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, <ref> [XD95a, PMO93, CCW96, CK96] </ref> require a routed clock tree as input, and [CC94b] requires an input clock tree topology. The works of [XD95a, PMO93, CCW96, CK96] also assume that the given clock tree has large clock skew based on the fact that in practice, obstacles (large macro blocks), process variation, and <p> and wire sizing techniques [CCW96, CK96], or (iv) buffer insertion/sizing and wire sizing techniques [PMO93, CC94b]. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, <ref> [XD95a, PMO93, CCW96, CK96] </ref> require a routed clock tree as input, and [CC94b] requires an input clock tree topology. The works of [XD95a, PMO93, CCW96, CK96] also assume that the given clock tree has large clock skew based on the fact that in practice, obstacles (large macro blocks), process variation, and other constraints make near zero-skew routing difficult, if not impossible, for large clock nets. 1.2.3.1 Buffer Insertion The GReedy INternal buffering (GRIN) <p> At this point, S is copied to S 0 , and a buffer is inserted into each subtree in S 0 . Similar to the algorithm in <ref> [PMO93] </ref>, a wire is inserted between the subtree root and the buffer to equalize the phase delays of all subtrees in S 0 . This procedure is recursively applied to both S and S 0 , each of which will produce two more sets of subtrees at the next iteration. <p> Note that this type of process variation is different from the device geometry variations which can be overcome by increasing the device geometries <ref> [PMO93] </ref>. Let t P i be the pull-up path delays and t N i be the pull-down path delays from the clock source to sink s i (i.e., t i = t P i + t N i ). <p> Like the method of [Eda93b], the OWBA algorithm assumes continuous wire widths and buffer sizes; optimality may be lost after mapping to discrete solutions. Also, power dissipation due to intermediate buffers is ignored in the objective function. A final observation is that the OWBA algorithm, like <ref> [ZDX93, PMP93, XD95a, PMO93] </ref>, performs post-optimization of a routed clock tree. It is unclear whether near-zero skew and large delay reductions will still be achieved if the OWBA algorithm is applied to ZST solutions with minimized delay [Eda93b, CC94b]. <p> Furthermore, all clock signals at the sinks are sharper, i.e., have smaller rise/fall times. 1.2.3.4 Buffer Insertion/Sizing and Wire sizing Two approaches in <ref> [CC94b, PMO93] </ref> are representative of those which combine buffer insertion, buffer sizing and wire sizing techniques to improve either phase delay, skew sensitivity or power dissipation. In [CC94b], the algorithm input is the topology of a clock tree, and the objective is to minimize either phase delay or skew sensitivity. <p> In [CC94b], the algorithm input is the topology of a clock tree, and the objective is to minimize either phase delay or skew sensitivity. In <ref> [PMO93] </ref>, the algorithm input is a routed clock tree with large skew, and the objective is to minimize the total power dissipation while satisfying a given skew bound of 500ps. Pullela et al. [PMO93] introduce a buffered clock tree synthesis algorithm, 31 later extended in [PMP96], which concurrently sizes wire and <p> In <ref> [PMO93] </ref>, the algorithm input is a routed clock tree with large skew, and the objective is to minimize the total power dissipation while satisfying a given skew bound of 500ps. Pullela et al. [PMO93] introduce a buffered clock tree synthesis algorithm, 31 later extended in [PMP96], which concurrently sizes wire and buffers as it exhaus-tively searches for buffer locations. The input to the algorithm is a routed balanced binary clock tree with (large) non-zero skew and tree height l = O (log n). [PMO93] <p> <ref> [PMO93] </ref> introduce a buffered clock tree synthesis algorithm, 31 later extended in [PMP96], which concurrently sizes wire and buffers as it exhaus-tively searches for buffer locations. The input to the algorithm is a routed balanced binary clock tree with (large) non-zero skew and tree height l = O (log n). [PMO93] generate all possible combinations of levels for buffer insertion, i.e., there are 2 l = 2 O (log n) = O (n) possible buffered trees. For each buffered tree, wire sizing and buffer sizing are performed in a single O (n) bottom-up phase. <p> Thus, zero nominal skew is not guaranteed. To show the advantage of buffer insertion, <ref> [PMO93] </ref> compares their algorithm with [PMP93], which did not insert buffers. With buffer insertion, the algorithm achieves up to 25 times smaller phase delay than [PMP93], although [PMO93] 33 only wiresizes the clock tree to achieve zero skew without considering delay re-duction while [PMP93] consider both skew and delay reduction. <p> Thus, zero nominal skew is not guaranteed. To show the advantage of buffer insertion, <ref> [PMO93] </ref> compares their algorithm with [PMP93], which did not insert buffers. With buffer insertion, the algorithm achieves up to 25 times smaller phase delay than [PMP93], although [PMO93] 33 only wiresizes the clock tree to achieve zero skew without considering delay re-duction while [PMP93] consider both skew and delay reduction. The reduction of phase delay increases with the size of the clock tree, since larger downstream capacitances are shielded from upstream edges. <p> The algorithm input is a balanced clock tree topology G with height O (log n); this is in contrast to <ref> [PMO93] </ref> which requires a completely routed balanced clock tree (with height O (log n)). As in [PMO93], it is assumed that identical buffers are used on any given level of the tree. The modeling is less accurate than [PMO93] in that the total capacitive loads of the buffers are used, instead <p> The algorithm input is a balanced clock tree topology G with height O (log n); this is in contrast to <ref> [PMO93] </ref> which requires a completely routed balanced clock tree (with height O (log n)). As in [PMO93], it is assumed that identical buffers are used on any given level of the tree. The modeling is less accurate than [PMO93] in that the total capacitive loads of the buffers are used, instead of the effective capacitive loads. <p> topology G with height O (log n); this is in contrast to <ref> [PMO93] </ref> which requires a completely routed balanced clock tree (with height O (log n)). As in [PMO93], it is assumed that identical buffers are used on any given level of the tree. The modeling is less accurate than [PMO93] in that the total capacitive loads of the buffers are used, instead of the effective capacitive loads. <p> ((M + 1) log n ) = O (n log (M+1) ) time, which implies high-order polynomial time complexity that 35 depends on the number of buffer types. [CC94b] use dynamic programming to reduce the time complexity of simultaneous buffer sizing/insertion to O (log 3 n M 2 ), while <ref> [PMO93] </ref> separates the buffer insertion and buffer sizing procedures in order to achieve O (n 2 ) time complexity. 1.2.4 Non-Tree Clock Routing All of the algorithms reviewed so far assume a tree structure for the clock routing solution. We now review several clock routing approaches that construct non-tree solutions. <p> Our experiments in Table 6.3 show that Elmore-Planar-DME is consistently improved. 6.4 Buffered Clock Tree Synthesis Finally, we extend our bounded-skew routing method to handle the practical case of buffering hierarchies in large circuits. There have been many works on buffered clock tree designs. <ref> [XD95a, PMO93, CC94b] </ref> determine the buffer tree hierarchy for the given clock tree layout or topology. [VM95, CW96] design the buffer tree 170 hierarchy and the routing of the clock net simultaneously. <p> For example, a 170-16-4-1 hierarchy has 170 buffers at level 3, 16 buffers at level 2, etc. Note that we always have k 0 = 1 since there is only one buffer at the root of the clock tree. As in <ref> [CC94b, PMO93, CW96] </ref>, to minimize the skew induced by the changes of buffer sizes due to the process variation, we assume that identical buffers are used at the same buffer level. (From the discussion of our method below, we can see that our method can work without this assumption by minor <p> H0 No buffer sliding. H1 Slide buffers to equalize max t (b i ) for all 1 i k, i.e., the max-delay from the input of each buffer b i to sinks which are the descendants of b i . This is the buffer sliding technique used in <ref> [PMO93, CW96] </ref>. H2 Slide buffers to equalize max t (b i ) and max t (b j ) where b i and b j are the sibling buffers. buffer sliding heuristics on benchmark circuit r1 with a 32-1 buffer hierarchy. <p> And for the 50ps skew regime, the heuristics H0, H1 and H2 respectively require 3.1%, 17.0% and 1.1% more wirelength on average than our heuristic H3. Notice that heuristic H1, the method used in <ref> [PMO93, CW96] </ref>, actually has the largest total wirelength in most cases. 6.5 Conclusions and Discussions In this work, we have extended the bounded-skew routing methodology to encompass several very practical clock routing issues: non-uniform layer parasitics, non-zero via resistance and/or capacitance, existing obstacles in the metal routing layers, and hierarchical buffered <p> Our experimental results show that H3 achieves very substantial wirelength improvements over the method used by <ref> [PMO93, CW96] </ref> for a range of buffer hierarchy types and skew bounds. 182
Reference: [PMP93] <author> S. Pullela, N. Menezes, and L. T. Pillage. </author> <title> "Reliable Non-Zero Skew Clock Tree Using Wire Width Optimization." </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 165-170, </pages> <year> 1993. </year>
Reference-contexts: Both [KHB93, ZD92] rely completely on the pathlength delay model to achieve their results. 13 1.2.2 Wire sizing in Clock Routing We use the term wire sizing to describe the variation of individual wire segment widths in the clock tree to improve the performance, reliability, and area. Three papers <ref> [Eda93b, ZDX93, PMP93] </ref> are representative of wire sizing techniques in clock routing. In [Eda93b], the wire sizing and clock routing (topology generation and embedding) are performed simultaneously. The solution has exact zero Elmore skew while also minimizing phase delay and skew sensitivity to process variation. <p> Three papers [Eda93b, ZDX93, PMP93] are representative of wire sizing techniques in clock routing. In [Eda93b], the wire sizing and clock routing (topology generation and embedding) are performed simultaneously. The solution has exact zero Elmore skew while also minimizing phase delay and skew sensitivity to process variation. Both <ref> [ZDX93, PMP93] </ref> require an input routed clock tree which may have (large) non-zero skew (possibly due to routing constraints); thus, these methods cannot guarantee a solution with exact zero clock skew as does [Eda93b]. <p> Both [ZDX93, PMP93] require an input routed clock tree which may have (large) non-zero skew (possibly due to routing constraints); thus, these methods cannot guarantee a solution with exact zero clock skew as does [Eda93b]. While [ZDX93] only aims to minimize the skew, <ref> [PMP93] </ref> tries to simultaneously minimize skew, phase delay and skew sensitivity to process variation. We note that [ZDX93, PMP93] assume discrete wire widths; the model of [Eda93b], which assumes the continuous wire widths without any explicit upper bound on the wire widths, may not be feasible in practice. <p> While [ZDX93] only aims to minimize the skew, [PMP93] tries to simultaneously minimize skew, phase delay and skew sensitivity to process variation. We note that <ref> [ZDX93, PMP93] </ref> assume discrete wire widths; the model of [Eda93b], which assumes the continuous wire widths without any explicit upper bound on the wire widths, may not be feasible in practice. It is expected that [Eda93b] will achieve smaller total wire area (and possibly phase delay) than [ZDX93, PMP93] since the <p> We note that <ref> [ZDX93, PMP93] </ref> assume discrete wire widths; the model of [Eda93b], which assumes the continuous wire widths without any explicit upper bound on the wire widths, may not be feasible in practice. It is expected that [Eda93b] will achieve smaller total wire area (and possibly phase delay) than [ZDX93, PMP93] since the solution quality of the post-processing method is dependent on the given routing layout. One disadvantage of wire sizing is that wire area may increase, which in turn increases capacitive power dissipation. <p> max w min ; r ( C a + C b ) The wire lengths in this optimum solution are: je a j fl = w fl + cl r (cl + C a w fl ) Notice that this global optimum solution also minimizes the delay sensitivity introduced in <ref> [PMP93] </ref>, which is the change in delay with respect to the change in wire widths. Since the optimum wire width satisfies @t d @w e a @w e b sensitivity is theoretically zero, and the wire width optimization simultaneously achieves the most reliable zero-skew routing and the minimum phase delay. <p> The overall approach reduces clock skew 17 at the expense of increased wire area in all cases, and increased phase delay in some cases. Pullela, Menezes and Pillage <ref> [PMP93] </ref> construct reliable in the sense of immunity to process variations low-skew and low-delay clock trees by considering clock delay sensitivities with respect to wire widths. Their approach consists of three major steps: delay reduction, de-sensitization, and skew reduction. 1. <p> That is, the width of each wire j is increased until j max S ij &lt; t for all sinks i, where 18 j max is the maximum change in w j due to process variations. In <ref> [PMP93] </ref>, t is chosen to be norm =2, where norm is the standard deviation of the normal distribution of delays from the root to all clock sinks. <p> Starting at the modified wire, trace back to the root, widening wires as necessary to ensure that j max S ij &lt; t=L = norm =(2L) for all leaves s i . 5. Go to step 3 until the skew objectives are met. The authors of <ref> [PMP93] </ref> apply the above procedure to initial solutions produced by the MMM algorithm (which uses the pathlength delay model and has large Elmore delay skew) with target delay heuristically selected as one-half the initial phase delay. <p> Like the method of [Eda93b], the OWBA algorithm assumes continuous wire widths and buffer sizes; optimality may be lost after mapping to discrete solutions. Also, power dissipation due to intermediate buffers is ignored in the objective function. A final observation is that the OWBA algorithm, like <ref> [ZDX93, PMP93, XD95a, PMO93] </ref>, performs post-optimization of a routed clock tree. It is unclear whether near-zero skew and large delay reductions will still be achieved if the OWBA algorithm is applied to ZST solutions with minimized delay [Eda93b, CC94b]. <p> To minimize the increase of wire area (and power dissipation), the minimum feasible wire widths that achieve zero-skew merging are calculated. No lengths are increased unless zero skew cannot be achieved with any feasible wire width, and rerouting of the clock tree is not an option. In contrast to <ref> [PMP93] </ref>, phase delay reduction by wire sizing is not considered. To ensure that the skew upper bound B w is satisfied, minimum wire widths are computed. <p> Thus, zero nominal skew is not guaranteed. To show the advantage of buffer insertion, [PMO93] compares their algorithm with <ref> [PMP93] </ref>, which did not insert buffers. With buffer insertion, the algorithm achieves up to 25 times smaller phase delay than [PMP93], although [PMO93] 33 only wiresizes the clock tree to achieve zero skew without considering delay re-duction while [PMP93] consider both skew and delay reduction. <p> Thus, zero nominal skew is not guaranteed. To show the advantage of buffer insertion, [PMO93] compares their algorithm with <ref> [PMP93] </ref>, which did not insert buffers. With buffer insertion, the algorithm achieves up to 25 times smaller phase delay than [PMP93], although [PMO93] 33 only wiresizes the clock tree to achieve zero skew without considering delay re-duction while [PMP93] consider both skew and delay reduction. The reduction of phase delay increases with the size of the clock tree, since larger downstream capacitances are shielded from upstream edges. <p> To show the advantage of buffer insertion, [PMO93] compares their algorithm with <ref> [PMP93] </ref>, which did not insert buffers. With buffer insertion, the algorithm achieves up to 25 times smaller phase delay than [PMP93], although [PMO93] 33 only wiresizes the clock tree to achieve zero skew without considering delay re-duction while [PMP93] consider both skew and delay reduction. The reduction of phase delay increases with the size of the clock tree, since larger downstream capacitances are shielded from upstream edges. <p> The reduction of phase delay increases with the size of the clock tree, since larger downstream capacitances are shielded from upstream edges. Also, the maximum wire width required for robustness (i.e., skew tolerance of process variation) is up to 10 times smaller than that in <ref> [PMP93] </ref>. Although the intermediate buffers consume some power, the total power dissipation is still reduced 20 30% for larger instances. <p> In practice, circuits still operate correctly within some non-zero skew bound, and so the actual design requirement is for a bounded-skew routing tree (BST) [KR95]. In addition, recall that works such as those of Zhu and Dai [ZDX93] and Pullela et al. <ref> [PMP93] </ref> use initial non-zero skew routing solutions which are then wiresized to satisfy a given skew bound; construction of an initial minimum-cost BST is a key underlying optimization.
Reference: [PMP96] <author> S. Pullela, N. Menezes, and L. T. Pileggi. </author> <title> "Post-Processing of Clock Trees via Wiresizing and Buffering for Robust Design." </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 15(6) </volume> <pages> 165-170, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: In [PMO93], the algorithm input is a routed clock tree with large skew, and the objective is to minimize the total power dissipation while satisfying a given skew bound of 500ps. Pullela et al. [PMO93] introduce a buffered clock tree synthesis algorithm, 31 later extended in <ref> [PMP96] </ref>, which concurrently sizes wire and buffers as it exhaus-tively searches for buffer locations.
Reference: [RPH83] <author> J. Rubinstein, P. Penfield, and M. A. Horowitz. </author> <title> "Signal Delay in RC Tree Networks." </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 2(3) </volume> <pages> 202-211, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: Initially, the loading capacitance is given for each sink node. Then, C v and t (v; u) for an internal node v 2 G with children a and b are calculated as follows <ref> [Elm48, RPH83, Sak83] </ref>: 3 t (v; u) = t (w; u) + r je w j ( 2 where w 2 P ath (v; u) is a child of node v.
Reference: [Rue87] <author> A. E. Ruehli, </author> <title> editor. Circuit Analysis, Simulation and Design: </title> <booktitle> Advances in CAD for VLSI Part 2, </booktitle> <volume> volume 3, chapter 11. </volume> <publisher> North-Holland, </publisher> <year> 1987. </year>
Reference-contexts: Because of the link insertion, the resulting topology can have a tree or mesh structure (an extension of the Elmore delay model for uniform distributed RC meshes <ref> [Rue87] </ref> is used for delay estimation). The algorithm is summarized as follows. 1. (a) Input an existing routing tree T and its performance requirements (i.e., the maximum delay max t and maximum skew max skew). (b) Identify the critical sink s max which has maximum delay. 2.
Reference: [Sak83] <author> T. Sakurai. </author> <title> "Approximation of Wiring Delay in MOSFET LSI." </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> 18(4) </volume> <pages> 418-426, </pages> <month> August </month> <year> 1983. </year>
Reference-contexts: Initially, the loading capacitance is given for each sink node. Then, C v and t (v; u) for an internal node v 2 G with children a and b are calculated as follows <ref> [Elm48, RPH83, Sak83] </ref>: 3 t (v; u) = t (w; u) + r je w j ( 2 where w 2 P ath (v; u) is a child of node v.
Reference: [Sap96] <author> S. S. Sapatnekar. </author> <title> "Wire Sizing as a Convex Optimization Problem: Exploring the Area-Delay Tradeoff." </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 8(8) </volume> <pages> 1001-1011, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: The later work of <ref> [Sap96] </ref> shows that the monotone property also holds under uniform wirelengths (i.e., all wire segments have the same lengths) when the objective is to minimize the maximum sink delay. 16 [Eda93b] reports that this method achieves 10% 50% reduction in phase delay versus the best previous methods without wire sizing, but
Reference: [SSF95] <author> H. Sathyamurthy, S. S. Sapatnekar, and J. P. Fishburn. </author> <title> "Speeding up Pipelined Circuits through a Combination of Gate Sizing and Clock Skew Optimization." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 467-470, </pages> <year> 1995. </year>
Reference-contexts: To achieve the optimal clock schedule, Fishburn assumes arbitrary source to sink delays and realizes the desired delays by inserting buffers as delay elements. Without considering routability or power dissipation of the resulting clock trees, optimal skew may be too costly to realize. Subsequent works of <ref> [CSH93, SSF95] </ref> consider gate sizing in the clock skew optimization to achieve faster clock operating frequencies. Xi and Dai [XD96] formulate and solve the problem of useful skew clock routing with gate sizing for power minimization (UST).
Reference: [Tsa91] <author> R. S. Tsay. </author> <title> "Exact Zero Skew." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 336-339, </pages> <year> 1991. </year>
Reference-contexts: It is easy to see that both C v and t (v; u) can be computed recursively in linear time <ref> [Tsa91] </ref>. 1.2 A Clock Routing Taxonomy There is a huge body of literature on clock routing due to the problem's significance as well as the many possible combinations of objectives, constraints, and degrees of freedom that are used in the design methodology. <p> Kahng et al. [CKR93, KCR91] constructed clock tree topologies using a bottom-up matching approach. Their "KCR" algorithm obtains zero pathlength skew in practice (i.e., zero skew under the pathlength delay model) but has no theoretical guarantee. The work of Tsay <ref> [Tsa91] </ref> was the first to guarantee exact zero skew for any input; this was 5 accomplished with respect to the Elmore delay model. In the same spirit as [KCR91], Tsay recursively combines pairs of zero skew trees at "tapping points" to yield larger zero skew trees. <p> [CCW96] state that the clock skew can be minimized by repeatedly solving M 1 0 , and that the OWBA algorithm not only optimizes delay, power and area, but also simultaneously minimizes process sensitivity with respect to average delay. [CCW96] test their OWBA algorithm on the five benchmarks r1 r5 <ref> [Tsa91] </ref> with initial clock tree routings constructed by the method of [Eda93a] under the pathlength delay model; these have Elmore delay skew ranging from 64ps to 974ps. The results show that the delay, skew and sensitivity are reduced by factors of about 6, 7 and 26 respectively. <p> Experimental results in [LW94] show that the algorithm achieves better process 37 length binary tree rooted at L with 4 driving points on the center chunk as the leaves. (c) The resulting non-tree zero-skew clock routing. 38 variation tolerance than the zero-skew algorithm of <ref> [Tsa91] </ref> on an industry floating point unit with 18 clock sinks. <p> necessary to minimize not only the skew within 40 a clock (intra-clock skew) but also the skew between different clocks (inter-clock skew). [KHS92a, KHS92b] study the 2-phase clock routing problem in which each clock phase is simply treated as a separate clock and each routed with the ZST algorithm of <ref> [Tsa91] </ref>. Their algorithm did not show clearly how inter-clock skew can be eliminated. One simple solution, which they may use, is to add wires between the clock source and the root of the clock tree that has smaller delay. <p> Two sets of benchmarks were used: (i) the sink placements for the MCNC Primary1 and Primary2 benchmarks used in [JSK90] and [CKR93], and originally provided by the authors of [JSK90]; and (ii) the sink placements for the five benchmarks r1 - r5 used in <ref> [Tsa91] </ref>. These seven examples have also been studied by Edahiro [Eda92] and by Zhu and Dai [ZD92]. <p> The x-coordinates and y-coordinates of Primary1 sink locations range from 120 to 5520 units and from 0 to 5790 units, respectively; those of Primary2 range from 20 to 9840 units and from 0 to 10250 units, respectively. Details of the circuit parameters for benchmarks r1-r5 can be found in <ref> [Tsa91] </ref>. <p> Time O (n log n) O (n log n) O (n 2 ) O (n 2 ) Planarity NO NO YES YES Table 2.1: Comparison of Linear-Planar-DME with other algorithms under the linear delay model, using MCNC benchmarks Primary1 (P1) and Primary2 (P2), and benchmarks r1 through r5 from Tsay <ref> [Tsa91] </ref>. The clock source locations are not given. Average cost savings over [ZD92] are 15:5%. Note that all wirelengths have been divided by 100 units. vious method of [ZD92]. <p> Thus, Linear-Planar-DME is a natural choice for generating the connection topology within our approach. 2 Second, given a Linear-Planar-DME solution, it is simple to obtain a planar Elmore-ZST by elongating tree edges in a bottom-up fashion to balance differences in sink delays (e.g., by the "snaking" method of <ref> [Tsa91] </ref>). In the experimental comparisons of Section 3.6 below, we call such an approach "Naive-Elmore-Planar-DME". <p> Benchmarks Primary1 and Primary2 both have the same loading capacitance of 0:5pF for all sinks, and also have per-unit wire resistance and wire capacitance of 16:6m and 0:027f F , respectively. Details of the circuit parameters for benchmarks r1-r5 can be found in <ref> [Tsa91] </ref>. Table 3.1 shows that our Elmore-Planar-DME implementation is relatively efficient, with runtimes dominated by the generation of a good topology in the call to Linear-Planar-DME-3. Note that the Primary2 and r2 test cases have about the same number of sinks, but Primary2 leads to relatively higher runtimes. <p> Figure 5.1 (a) plots HSPICE delay skew against pathlength delay skew for routing trees generated by our ExG-DME algorithm under pathlength delay on MCNC benchmark r3 <ref> [Tsa91] </ref>. Not only is the correlation poor, but the pathlength-based BST solutions simply cannot meet tight skew bounds (of 100ps or less). On the other hand, Figure 5.1 (b) demonstrates the accuracy and fidelity of Elmore delay skew to actual skew; cf. [BKM95]. <p> On the other hand, Figure 5.1 (b) demonstrates the accuracy and fidelity of Elmore delay skew to actual skew; cf. [BKM95]. While it is possible to "convert", e.g., a zero pathlength skew routing into a zero Elmore delay skew routing, via the use of "snaking" to balance wirelengths <ref> [Tsa91] </ref>, such an approach will usually entail over 30% increase in total wirelength. In this chapter, we prove that the well-behaved property still holds under Elmore delay, after a slight extension of the definition of "well-behaved". <p> A four-sink counterexample is given in Figure 5.6, where the IME method [CKK95a] gives an optimal BST solution. 5.6 Experimental Results We have implemented the ExG-DME algorithm with the BME construction rules under Elmore delay in ANSI C on Sun SPARC-20 machines. The benchmark test cases r1-r5 <ref> [Tsa91] </ref> were used to evaluate our method for skew bounds in the range of 0-10ns. Table 5.6 compares the various bounded-skew routing costs obtained 138 for skew bound B = 4 units. <p> 1229.8 2501.0 3062.4 6797.0 9881.5 10ps 1084.4 2191.9 2803.6 5966.7 8092.6 100ps 941.1 2208.8 2676.7 4769.5 7668.4 1ns 793.5 1779.3 2361.7 4729.0 6242.9 10ns 780.1 1668.9 2102.2 4060.6 6024.3 Table 5.1: The wirelength-skew tradeoff and running time of the ExG-DME algorithm (using the BME construction rules) for benchmark circuits r1-r5 <ref> [Tsa91] </ref>. <p> 9896.7 10ps 1112.5 2353.2 *2727.2 *5350.2 *8065.1 100ps *930.4 *1978.4 *2366.9 4953.7 *7004.0 1ns 861.6 1995.7 *2097.8 4741.0 6280.0 10ns 790.3 *1574.2 *1998.0 4326.2 *5912.5 Table 5.2: The wirelength-skew tradeoff and running time of the ExG-DME algorithms which use the IME (instead of BME) construction rules for benchmark circuits r1-r5 <ref> [Tsa91] </ref>. We mark the cases where IME outperforms BME by *.
Reference: [Tsa93] <author> R. S. Tsay. </author> <title> "An Exact Zero-Skew Clock Routing Algorithm." </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 12(2) </volume> <pages> 242-249, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: For sinks s i , t (s i ) = 0. Then according to the Elmore delay model, t (v) and C v must satisfy <ref> [Tsa93] </ref>: t (v) = w e a cje a jw e a + C a ) + t (a) = w e b cje b jw e b + C b ) + t (b); (1.1) The wire width optimization is then to determine the values w e a and w
Reference: [VM95] <author> A. Vittal and M. Marek-Sadowska. </author> <title> "Power Optimal Buffered Clock Tree Design." </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <address> San Francisco, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Insertion of intermediate buffers can isolate the buffered subtree capacitances, permitting the use of smaller metal line widths and improving the signal edge rate quality. <ref> [VM95, CC94b] </ref> demonstrate that buffer insertion can also reduce the total wirelength. level and one buffer at the root. <p> The delay through the buffer is given by the linear equation d b = r b C L + t b <ref> [VM95, CW96, CC94b, CK96] </ref>. (Recall that [PMO93] models buffer delay using a linear k-factor equation d b = k 1 + k 2 C L , with empirical constants k 1 and k 2 generated from SPICE runs; the switch-resistor model is equivalent to the k-factor equation.) Buffers of different sizes <p> In this subsection, we will summarize several representative works which use (i) buffer insertion techniques only <ref> [VM95, CW96] </ref>, (ii) buffer insertion and buffer sizing techniques [XD95a], (iii) buffer and wire sizing techniques [CCW96, CK96], or (iv) buffer insertion/sizing and wire sizing techniques [PMO93, CC94b]. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, [XD95a, PMO93, CCW96, CK96] require a routed clock tree as input, <p> In this subsection, we will summarize several representative works which use (i) buffer insertion techniques only <ref> [VM95, CW96] </ref>, (ii) buffer insertion and buffer sizing techniques [XD95a], (iii) buffer and wire sizing techniques [CCW96, CK96], or (iv) buffer insertion/sizing and wire sizing techniques [PMO93, CC94b]. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, [XD95a, PMO93, CCW96, CK96] require a routed clock tree as input, and [CC94b] requires an input clock tree topology. <p> CCW96, CK96] also assume that the given clock tree has large clock skew based on the fact that in practice, obstacles (large macro blocks), process variation, and other constraints make near zero-skew routing difficult, if not impossible, for large clock nets. 1.2.3.1 Buffer Insertion The GReedy INternal buffering (GRIN) algorithm <ref> [VM95] </ref> is an extension of the Greedy-DME Algorithm [Eda93a] which considers buffer insertion while satisfying rise time constraints and seeking to minimize the area (and thus power dissipation) of the clock net. <p> x and v y are respectively the merging segments for v in the configurations shown in (a) and (b), where one buffer is inserted at different locations on the parent edge e a of subtree T a . and the total buffer sizes due to the merge. (The authors of <ref> [VM95] </ref> approximate the rise time at sink s i as t rise i = 2:2 t i , where t i is the Elmore delay from the root to sink s i . <p> Thus, at each merging step GRIN selects the pair of subtrees which have the least merging cost, defined as above. After having merged two subtrees, a buffer may be inserted directly at the root of the merged tree if the rise/fall time constraint is very stringent. Experiments reported in <ref> [VM95] </ref> show that GRIN, by spreading the buffers over the entire tree, is superior in terms of power dissipation, rise/fall time, and buffer area to Greedy-DME with buffer insertion only at the root. <p> However, this approach has a distinct advantage over GRIN in that all source-sink paths have the same number of buffers, implying less sensitivity to process variation. 1.2.3.2 Buffer Insertion and Buffer Sizing Unlike <ref> [VM95, CW96] </ref>, which consider simultaneous topology design and buffer insertion, the buffer insertion and sizing (BIS) method of Xi and Dai [XD95a] minimizes the power dissipation of a given (unbuffered) zero pathlength skew clock tree 4 , subject to constraints on phase delay and process variation-dependent skew. <p> There have been many works on buffered clock tree designs. [XD95a, PMO93, CC94b] determine the buffer tree hierarchy for the given clock tree layout or topology. <ref> [VM95, CW96] </ref> design the buffer tree 170 hierarchy and the routing of the clock net simultaneously. <p> There is a similar idea in <ref> [VM95] </ref>, which reduces wirelength by inserting an extra buffer as shown in Figure 1.7. However, adding a buffer will cause large extra delay and power dissipation. <p> However, adding a buffer will cause large extra delay and power dissipation. Indeed, when T a and T b have similar delays, excessive detour wirelength is inevitable when a buffer is added at the parent edge of just one subtree. Hence, the technique of <ref> [VM95] </ref> will be effective in reducing power dissipation and wirelength only when the delays of T a and T b are very different. ([VM95] also consider buffer insertion only for the zero-skew case.) We now give a buffer sliding heuristic, called H3 (see Figure 6.14), that does not add any extra
Reference: [WE93] <author> N. H. E. Weste and K. Eshraghian. </author> <title> Principles of CMOS VLSI Design: a Systems Perspective. </title> <publisher> Addison-Wesley, </publisher> <address> 2nd edition, </address> <year> 1993. </year> <month> 188 </month>
Reference-contexts: t setup + t ff ); (1.8) where 43 * t ds is the delay for data to travel through the combinational logic L ij from F F i to F F j , * t su and t hold are the setup time and hold time of the flip-flop <ref> [WE93] </ref>, * t ff is the propagation delay through the flip-flop, and * max t (L ij ) and min t (L ij ) are the longest and shortest path delays in the combinational logic L ij from F F i to F F j .
Reference: [Wel85] <author> E. Welzl. </author> <title> "Constructing the Visibility Graph for n Line Segments in O(n 2 ) Time." </title> <journal> Information Processing Letters, </journal> <volume> 20 </volume> <pages> 167-171, </pages> <year> 1985. </year>
Reference-contexts: Since the detour points must be located at the endpoints of planar edges, a general approach based on visibility graphs (e.g., <ref> [ATG95, Wel85] </ref>) can be used. Our current implementation uses Dijkstra's algo rithm in the visibility graph, with edge weights computed on the fly; this does 4 Thus, Procedure Rebuild-Tree-of-Segments may iterate several times at each level. <p> For each internal node, we maintain at most k = 5 merging regions with lowest tree cost. We use the procedure Find-Shortest-Planar-Path of the Elmore-Planar-DME algorithm in Chapter 3 to find shortest planar s-t paths. The current implementation uses Dijkstra's algorithm in the visibility graph G (V; E) (e.g., <ref> [ATG95, Wel85] </ref>) where V consists of the source and destination points s, t along with detour points around the corners of obstacles.
Reference: [XD95a] <author> J. G. Xi and W. W.-M. Dai. </author> <title> "Buffer Insertion and Sizing Under Process Variations for Low Power Clock Distribution." </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 491-496, </pages> <year> 1995. </year>
Reference-contexts: In this subsection, we will summarize several representative works which use (i) buffer insertion techniques only [VM95, CW96], (ii) buffer insertion and buffer sizing techniques <ref> [XD95a] </ref>, (iii) buffer and wire sizing techniques [CCW96, CK96], or (iv) buffer insertion/sizing and wire sizing techniques [PMO93, CC94b]. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, [XD95a, PMO93, CCW96, CK96] require a routed clock tree as input, and [CC94b] requires an input clock tree topology. <p> several representative works which use (i) buffer insertion techniques only [VM95, CW96], (ii) buffer insertion and buffer sizing techniques [XD95a], (iii) buffer and wire sizing techniques [CCW96, CK96], or (iv) buffer insertion/sizing and wire sizing techniques [PMO93, CC94b]. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, <ref> [XD95a, PMO93, CCW96, CK96] </ref> require a routed clock tree as input, and [CC94b] requires an input clock tree topology. The works of [XD95a, PMO93, CCW96, CK96] also assume that the given clock tree has large clock skew based on the fact that in practice, obstacles (large macro blocks), process variation, and <p> and wire sizing techniques [CCW96, CK96], or (iv) buffer insertion/sizing and wire sizing techniques [PMO93, CC94b]. 20 21 While [VM95, CW96] perform the buffering and topology design simultaneously, <ref> [XD95a, PMO93, CCW96, CK96] </ref> require a routed clock tree as input, and [CC94b] requires an input clock tree topology. The works of [XD95a, PMO93, CCW96, CK96] also assume that the given clock tree has large clock skew based on the fact that in practice, obstacles (large macro blocks), process variation, and other constraints make near zero-skew routing difficult, if not impossible, for large clock nets. 1.2.3.1 Buffer Insertion The GReedy INternal buffering (GRIN) <p> a distinct advantage over GRIN in that all source-sink paths have the same number of buffers, implying less sensitivity to process variation. 1.2.3.2 Buffer Insertion and Buffer Sizing Unlike [VM95, CW96], which consider simultaneous topology design and buffer insertion, the buffer insertion and sizing (BIS) method of Xi and Dai <ref> [XD95a] </ref> minimizes the power dissipation of a given (unbuffered) zero pathlength skew clock tree 4 , subject to constraints on phase delay and process variation-dependent skew. <p> Like the method of [Eda93b], the OWBA algorithm assumes continuous wire widths and buffer sizes; optimality may be lost after mapping to discrete solutions. Also, power dissipation due to intermediate buffers is ignored in the objective function. A final observation is that the OWBA algorithm, like <ref> [ZDX93, PMP93, XD95a, PMO93] </ref>, performs post-optimization of a routed clock tree. It is unclear whether near-zero skew and large delay reductions will still be achieved if the OWBA algorithm is applied to ZST solutions with minimized delay [Eda93b, CC94b]. <p> Our experiments in Table 6.3 show that Elmore-Planar-DME is consistently improved. 6.4 Buffered Clock Tree Synthesis Finally, we extend our bounded-skew routing method to handle the practical case of buffering hierarchies in large circuits. There have been many works on buffered clock tree designs. <ref> [XD95a, PMO93, CC94b] </ref> determine the buffer tree hierarchy for the given clock tree layout or topology. [VM95, CW96] design the buffer tree 170 hierarchy and the routing of the clock net simultaneously.
Reference: [XD95b] <author> J. G. Xi and W. W.-M. Dai. </author> <title> "Buffer Insertion and Sizing Under Process Variations for Low Power Clock Distribution." </title> <type> Technical Report UCSC-CRL-95-12, </type> <institution> Computer Science Dept., University of California, Santa Cruz, </institution> <year> 1995. </year>
Reference-contexts: i 6= s j (1.5) The total power dissipation P OW and delays t P i , t N i of a clock tree with inter mediate buffers can be expressed as a convex function of variables w P and w N (the sizes of the PMOS and NMOS devices <ref> [XD95b] </ref>).
Reference: [XD96] <author> J. G. Xi and W. W.-M. Dai. </author> <title> "Useful-Skew Clock Routing with Gate Sizing for Low Power Design." </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 383-388, </pages> <year> 1996. </year>
Reference-contexts: However, if we study clock skew more closely, we see that correct or safe clock operation depends on both the direction and value of the skew. Consider the timing behavior of a synchronous circuit as shown in Figure 1.9 (reproduced from <ref> [XD96] </ref>), where positive edge-triggered flip-flops are used. Due to interconnect delays, skew can occur between clock terminals such as C 01 and 42 C 02 of flip-flops F F 01 and F F 02 . Figure 1.10 (also reproduced from [XD96]) illustrates the clock operation in two cases of skew values. <p> a synchronous circuit as shown in Figure 1.9 (reproduced from <ref> [XD96] </ref>), where positive edge-triggered flip-flops are used. Due to interconnect delays, skew can occur between clock terminals such as C 01 and 42 C 02 of flip-flops F F 01 and F F 02 . Figure 1.10 (also reproduced from [XD96]) illustrates the clock operation in two cases of skew values. In both cases, skews are considered allowable if correct data are produced at the prescribed clock frequency. <p> Without considering routability or power dissipation of the resulting clock trees, optimal skew may be too costly to realize. Subsequent works of [CSH93, SSF95] consider gate sizing in the clock skew optimization to achieve faster clock operating frequencies. Xi and Dai <ref> [XD96] </ref> formulate and solve the problem of useful skew clock routing with gate sizing for power minimization (UST). A recursive top-down 45 bi-partitioning approach, similar to the BB bipartitioning heuristic in [CHH92a], is used to generate the clock tree topology. <p> For a given topology G, <ref> [XD96] </ref> construct a tree of feasible merging segments sets (FMSS) for a merging region when the skew bound is not zero. Only the pair of closest segments from the given two FMSS's are used to construct the FMSS for the parent node.
Reference: [XK95a] <author> T. Xue and E. S. Kuh. </author> <title> "Post Routing Performance Optimization via Multi-Link Insertion and Non-Uniform Wiresizing." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 575-580, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: However, the algorithm of [LW94] may require much larger wire area and hence power dissipation, due to the large wire area of center trunks and the balanced length binary trees over potentially large number of driving points on the center trunks. Xue and Kuh <ref> [XK95a] </ref> proposed a post-routing approach which inserts links into an existing routing solution, then performs non-uniform wire sizing of the added links to simultaneously reduce maximum delay and skew with minimum increase in wire area. <p> Otherwise, the process will stop here when the wire sizing of e satisfies the performance requirement. <ref> [XK95a] </ref> prove that if an inserted link is connected from the source to s max , the reduction of maximum delay and skew are consistent, i.e., larger reduction in the maximum delay leads to larger reduction in the maximum skew.
Reference: [XK95b] <author> T. Xue and E. S. Kuh. </author> <title> "Post Routing Performance Optimization via Tapered Link Insertion and Wiresizing." </title> <booktitle> In Proc. European Design Automation Conf. with with EURO-VHDL, </booktitle> <pages> pp. 74-79, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: While the performance requirement is not met and s max remains critical, e is divided into some number k of segments which are wiresized by the Sequential Quadratic Programming method <ref> [XK95b] </ref>. 4.
Reference: [ZD92] <author> Q. Zhu and W. W.-M. Dai. </author> <title> "Perfect-Balance Planar Clock Routing With Minimal Path-Length." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 473-476, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: The clock routing method of Zhu and Dai 12 <ref> [ZD92] </ref> was the first to guarantee a planar-embeddable ZST. The method starts with a tree containing only a connection from the source node to the furthest sink. <p> However, if we consider the simple case of four sinks at the corners of the unit square (with the source at the center), we see that the method of <ref> [ZD92] </ref> will adopt an "X" clock tree with cost = 4, while the optimal "H" solution has cost = 3. <p> When the user-specified number of levels is zero, the method reduces to that of Zhu-Dai. The authors of [KHB93] claim that their algorithm guarantees minimum source-sink pathlength delay, and report approximately 10% wirelength reduction over <ref> [ZD92] </ref>. Both [KHB93, ZD92] rely completely on the pathlength delay model to achieve their results. 13 1.2.2 Wire sizing in Clock Routing We use the term wire sizing to describe the variation of individual wire segment widths in the clock tree to improve the performance, reliability, and area. <p> When the user-specified number of levels is zero, the method reduces to that of Zhu-Dai. The authors of [KHB93] claim that their algorithm guarantees minimum source-sink pathlength delay, and report approximately 10% wirelength reduction over [ZD92]. Both <ref> [KHB93, ZD92] </ref> rely completely on the pathlength delay model to achieve their results. 13 1.2.2 Wire sizing in Clock Routing We use the term wire sizing to describe the variation of individual wire segment widths in the clock tree to improve the performance, reliability, and area. <p> Buffers are inserted at each intersection of a tree branch and a horizontal line, i.e., not necessarily at Steiner points of the topology. 4 This zero pathlength skew clock tree can be produced by <ref> [ZD92] </ref> or by the DME method under pathlength delay. 25 To determine the minimum number of buffer levels m fl , BIS exhaustively searches over the possible number of buffer levels m = 1; 2; until the worst-case skew due to asymmetric loads and wire width variations is B w . <p> Often, many vias must be introduced. This difficulty was first noted by Zhu and Dai, whose paper <ref> [ZD92] </ref> stated several compelling reasons to seek a planar-embeddable clock routing solution. <p> Existing work <ref> [ZD92] </ref> implicitly relies on Eu-clidean planar-embeddability being sufficient for Manhattan planar-embeddability (a line segment in the Euclidean plane can be approximated to any desired accuracy by a monotone staircase in the Manhattan plane). <p> Figure 2.1 shows this phenomenon: four sinks that are collinear will have an optimal "planar" clock tree whose edges pass over each other. Since this overlapping can be made planar with minimum increase in wirelength, we accept such a degenerate solution as planar. This is also the convention of <ref> [ZD92] </ref>, whose algorithm will generate the solution shown in Figure 2.1. Following related work on planar clock routing [ZD92] and on minimum-cost zero-skew routing [BK92, CHH92a, CHH92b, Eda91], we first address this problem in the context of the pathlength (linear) delay approximation: pathlength delay is simply the edge length, allowing geometric <p> Since this overlapping can be made planar with minimum increase in wirelength, we accept such a degenerate solution as planar. This is also the convention of <ref> [ZD92] </ref>, whose algorithm will generate the solution shown in Figure 2.1. Following related work on planar clock routing [ZD92] and on minimum-cost zero-skew routing [BK92, CHH92a, CHH92b, Eda91], we first address this problem in the context of the pathlength (linear) delay approximation: pathlength delay is simply the edge length, allowing geometric intuitions to be applied. <p> partitioning rules for Linear-Planar-DME.) Overview of Contributions Our work lies at the juncture of two recent directions in clock routing: (i) the DME (Deferred-Merge Embedding) algorithm of [BK92, CHH92a, CHH92b, Eda91] which embeds a given topology with guaranteed exact zero pathlength skew and minimum cost; and (ii) the method of <ref> [ZD92] </ref>, which is the first to guarantee a planar-embeddable clock routing solution. We show that under the pathlength delay model, the two passes (bottom-up and top-down) of the DME algorithm can be replaced by a single top-down pass. <p> A very simple ver 52 sion of our method produces planar solutions with total wirelengths that are competitive with the best non-planar exact zero-skew results in the literature [Eda92, CHH92b]. We also obtain an average of 15:5% wirelength savings over the previous planar routing algorithm of <ref> [ZD92] </ref>. 2.2 Single-Pass DME Describing our new planar clock routing algorithm requires a little more terminology. <p> The worst-case and best-case time bounds are the same as those for the method of <ref> [ZD92] </ref>. 2.3 The Linear-Planar-DME Algorithm The impact of Theorem 2.1 may not be immediately apparent, since DME can already accomplish the same construction in linear time. <p> These seven examples have also been studied by Edahiro [Eda92] and by Zhu and Dai <ref> [ZD92] </ref>. The x-coordinates and y-coordinates of Primary1 sink locations range from 120 to 5520 units and from 0 to 5790 units, respectively; those of Primary2 range from 20 to 9840 units and from 0 to 10250 units, respectively. <p> The clock source locations are not given. Average cost savings over <ref> [ZD92] </ref> are 15:5%. Note that all wirelengths have been divided by 100 units. vious method of [ZD92]. Also, our planar solutions are very competitive to those non-planar solutions by KCR+DME, and actually superior for benchmarks Pri-mary1 and r5 due to the regular distribution of sinks. <p> The clock source locations are not given. Average cost savings over <ref> [ZD92] </ref> are 15:5%. Note that all wirelengths have been divided by 100 units. vious method of [ZD92]. Also, our planar solutions are very competitive to those non-planar solutions by KCR+DME, and actually superior for benchmarks Pri-mary1 and r5 due to the regular distribution of sinks. Finally, Figure 2.6 shows the planar clock routing solutions constructed by Linear-Planar-DME and the algorithm of [ZD92] for the Primary 1 benchmark. <p> 100 units. vious method of <ref> [ZD92] </ref>. Also, our planar solutions are very competitive to those non-planar solutions by KCR+DME, and actually superior for benchmarks Pri-mary1 and r5 due to the regular distribution of sinks. Finally, Figure 2.6 shows the planar clock routing solutions constructed by Linear-Planar-DME and the algorithm of [ZD92] for the Primary 1 benchmark. 2.5 Conclusions and Discussions We have extended the DME algorithm of [Eda91, BK92, CHH92a, CHH92b] to construct a guaranteed-planar exact zero-skew clock routing tree which is compatible with the DME (optimum) solution. <p> Hence, in the pathlength delay model, the wirelength of our solution is the minimum possible with respect to the generated topology. Moreover, the source-sink delay is the minimum possible, 66 (a) Zhu-Dai <ref> [ZD92] </ref> (cost=167.9) (b) Linear-Planar-DME (cost=136.0) for MCNC benchmark Primary1. i.e., it is equal to the radius of the sink set, radius (S). Our Linear-Planar-DME method hinged on two key observations. <p> In particular, the Linear-Planar-DME algorithm invokes embedding 67 and partitioning rules which guarantee the planarity of the resulting clock tree. The experimental results show that our planar solutions are competitive with the best previous non-planar solutions, and we obtain substantial cost reductions over the previous planar routing method of <ref> [ZD92] </ref>. <p> Experimentally, very limited improvements result from trying more than 16 cases. 83 3.6 Experimental Results We implemented the Linear-Planar-DME and Elmore-Planar-DME algorithms using Sun SPARC-10 workstations and the C/Unix environment. The same seven examples as in <ref> [CHH92b, Eda93a, ZD92] </ref> were studied. Benchmarks Primary1 and Primary2 both have the same loading capacitance of 0:5pF for all sinks, and also have per-unit wire resistance and wire capacitance of 16:6m and 0:027f F , respectively. Details of the circuit parameters for benchmarks r1-r5 can be found in [Tsa91]. <p> Thus, the observed time complexity of Linear-Planar-DME-3 is O (n (lg n) 3 ). Table 3.2 compares our new algorithms with two leading non-planar ZST algorithms in the literature - Greedy-DME [Eda93a] and KCR+DME [CHH92b, KCR91] as well as the previous planar routing method of Zhu and Dai <ref> [ZD92] </ref>. Greedy-DME corresponds to the CL+I6 method of Edahiro [Eda93a], and can yield an unbalanced topology. KCR+DME uses a matching approach to achieve a balanced topology [CHH92b]. <p> Note that the topology generation via Linear-Planar-DME-3 requires much more time than the embedding by Elmore-Planar-DME. In the last column, we also show the ZST height as a multiple of the minimum possible tree height, lg n. method of <ref> [ZD92] </ref>. It is interesting to note that the cost of our Elmore-Planar-DME solutions is only slightly increased from the cost of the starting Linear-Planar-DME ZSTs. We believe this implies that better solutions can be obtained as we continue to improve Linear-Planar-DME. <p> Costs of our planar ZST solutions are comparable to those of the best previous non-planar ZST solutions, and substantially improve over 85 (a) Greedy-DME [Eda93a] (b) Linear-Planar-DME (c) Elmore-Planar-DME (d) Zhu-Dai <ref> [ZD92] </ref> lines. 86 Greedy Lin-Pln Elm-Pln- KCR+ Naive Elm- benchmark DME DME-3 DME DME Pln-DME Zhu-Dai prim1 129.2 130.2 132.9 140.1 146.1 167.9 prim2 304.0 320.1 330.2 345.2 391.6 422.5 r1 1,253.3 1,351.3 1,392.8 1,487 1,686.2 1,778.3 r3 3,193.8 3,501.4 3,543.7 3,867 3,916.2 4,635.9 r5 9,723.7 10,556.2 10,806.4 11,606 12,823.3 14,119.4 <p> 4,635.9 r5 9,723.7 10,556.2 10,806.4 11,606 12,823.3 14,119.4 Ave Cost (+0.0%) +7.2% +9.8% +17.3% +28.1% +39.4% Planar No Yes Yes No Yes Yes Delay Model Elmore Linear Elmore Elmore Elmore Linear Table 3.2: Comparison of Elmore-Planar-DME with other algorithms in terms of total wirelength, using the same benchmarks studied in <ref> [CHH92b, Eda93a, ZD92] </ref>. No prescribed clock source location was assumed. Ave Cost indicates the average percentage increase in wire-length versus the results of CL+I6 [Eda93a]. Note that all wirelengths have been divided by 100 units. previous planar clock routing methods. <p> A similar approach is used by Zhu and Dai [ZD94], but we expect substantial cost savings (e.g., using Linear-Planar-DME instead of the method in <ref> [ZD92] </ref> represents over 20% cost reduction).
Reference: [ZD94] <author> Q. Zhu and W.M. </author> <title> Dai. </title> <type> manuscript, </type> <institution> University of California, Santa Cruz, </institution> <year> 1994. </year>
Reference-contexts: This is the least imaginative of our three methods: we simply use Linear-Planar-DME to recursively partition the sink set until each sink cluster has radius less than B, then construct a planar radius-bounded tree over each cluster. A similar approach is used by Zhu and Dai <ref> [ZD94] </ref>, but we expect substantial cost savings (e.g., using Linear-Planar-DME instead of the method in [ZD92] represents over 20% cost reduction).
Reference: [ZDX93] <author> Q. Zhu, W. M. Dai, and J. G. </author> <title> Xi. "Optimal Sizing of High-Speed Clock Networks Based on Distributed RC and Lossy Transmission Line Models." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 628-633, </pages> <year> 1993. </year>
Reference-contexts: Both [KHB93, ZD92] rely completely on the pathlength delay model to achieve their results. 13 1.2.2 Wire sizing in Clock Routing We use the term wire sizing to describe the variation of individual wire segment widths in the clock tree to improve the performance, reliability, and area. Three papers <ref> [Eda93b, ZDX93, PMP93] </ref> are representative of wire sizing techniques in clock routing. In [Eda93b], the wire sizing and clock routing (topology generation and embedding) are performed simultaneously. The solution has exact zero Elmore skew while also minimizing phase delay and skew sensitivity to process variation. <p> Three papers [Eda93b, ZDX93, PMP93] are representative of wire sizing techniques in clock routing. In [Eda93b], the wire sizing and clock routing (topology generation and embedding) are performed simultaneously. The solution has exact zero Elmore skew while also minimizing phase delay and skew sensitivity to process variation. Both <ref> [ZDX93, PMP93] </ref> require an input routed clock tree which may have (large) non-zero skew (possibly due to routing constraints); thus, these methods cannot guarantee a solution with exact zero clock skew as does [Eda93b]. <p> Both [ZDX93, PMP93] require an input routed clock tree which may have (large) non-zero skew (possibly due to routing constraints); thus, these methods cannot guarantee a solution with exact zero clock skew as does [Eda93b]. While <ref> [ZDX93] </ref> only aims to minimize the skew, [PMP93] tries to simultaneously minimize skew, phase delay and skew sensitivity to process variation. <p> While [ZDX93] only aims to minimize the skew, [PMP93] tries to simultaneously minimize skew, phase delay and skew sensitivity to process variation. We note that <ref> [ZDX93, PMP93] </ref> assume discrete wire widths; the model of [Eda93b], which assumes the continuous wire widths without any explicit upper bound on the wire widths, may not be feasible in practice. It is expected that [Eda93b] will achieve smaller total wire area (and possibly phase delay) than [ZDX93, PMP93] since the <p> We note that <ref> [ZDX93, PMP93] </ref> assume discrete wire widths; the model of [Eda93b], which assumes the continuous wire widths without any explicit upper bound on the wire widths, may not be feasible in practice. It is expected that [Eda93b] will achieve smaller total wire area (and possibly phase delay) than [ZDX93, PMP93] since the solution quality of the post-processing method is dependent on the given routing layout. One disadvantage of wire sizing is that wire area may increase, which in turn increases capacitive power dissipation. <p> Zhu, Dai and Xi <ref> [ZDX93] </ref> minimize clock skew by making slower paths faster through wire sizing, rather than by making faster paths slower through detour wiring. <p> Monte Carlo simulations show that when process variations occur, the 19 worst-case skew is still much smaller than the skew of the original MMM solu-tion. As with the method of <ref> [ZDX93] </ref>, the effectiveness of this method will be limited when initial solutions are given by [Eda93b]. 1.2.3 Buffered Clock Tree As the clock tree becomes larger, it becomes more difficult to use a single huge buffer at the root to drive the entire tree; this is due to various constraints such <p> Experimental results show that BIS can reduce power dissipation by up to 75% when compared against the skew minimization by wire sizing <ref> [ZDX93] </ref>. However, BIS does not improve over [ZDX93] in terms of clock skew and phase delay. <p> Experimental results show that BIS can reduce power dissipation by up to 75% when compared against the skew minimization by wire sizing <ref> [ZDX93] </ref>. However, BIS does not improve over [ZDX93] in terms of clock skew and phase delay. <p> Like the method of [Eda93b], the OWBA algorithm assumes continuous wire widths and buffer sizes; optimality may be lost after mapping to discrete solutions. Also, power dissipation due to intermediate buffers is ignored in the objective function. A final observation is that the OWBA algorithm, like <ref> [ZDX93, PMP93, XD95a, PMO93] </ref>, performs post-optimization of a routed clock tree. It is unclear whether near-zero skew and large delay reductions will still be achieved if the OWBA algorithm is applied to ZST solutions with minimized delay [Eda93b, CC94b]. <p> In practice, circuits still operate correctly within some non-zero skew bound, and so the actual design requirement is for a bounded-skew routing tree (BST) [KR95]. In addition, recall that works such as those of Zhu and Dai <ref> [ZDX93] </ref> and Pullela et al. [PMP93] use initial non-zero skew routing solutions which are then wiresized to satisfy a given skew bound; construction of an initial minimum-cost BST is a key underlying optimization.
References-found: 75

