URL: http://www.cs.ucsd.edu/users/goguen/ps/modalg.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/goguen/pubs/
Root-URL: http://www.cs.ucsd.edu
Title: Logical Support for Modularisation  
Author: Razvan Diaconescu Joseph Goguen Petros Stefaneas 
Affiliation: Programming Research Group, Oxford University  
Abstract: Modularisation is important for managing the complex structures that arise in large theorem proving problems, and in large software and/or hardware development projects. This paper studies some properties of logical systems that support the definition, combination, parameterisation and reuse of modules. Our results show some new connections among: (1) the preservation of various kinds of conservative extension under pushouts; (2) various distributive laws for information hiding over sums; and (3) (Craig style) interpolation properties. In addition, we study differences between syntactic and semantic formulations of conservative extension properties, and of distributive laws. A model theoretic property that we call exactness plays an important role in some results. This paper explores the interplay between syntax and semantics, and thus lies in the tradition of abstract model theory. We represent logical systems as institutions. An important technical foundation is a new axiomatisation of the notion of inclusion. We also show how to subsume the deduction-based approach of -institutions under that of ordinary institutions. Our results illuminate some interesting differences between equational style logics and first order style logics, encouraging us to conclude that, on the whole, equational style logics may be more suitable for modularisation than first order style logics.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Hajnal Andreka and Istvan Nemeti. </author> <title> A general axiomatizability theorem formulated in terms of cone-injective subcategories. </title> <editor> In B. Csakany, E. Fried, and E.T. Schmidt, editors, </editor> <booktitle> Universal Algebra, </booktitle> <pages> pages 13-35. </pages> <publisher> North-Holland, </publisher> <year> 1981. </year> <note> Colloquia Mathematics Societas Janos Bolyai, 29. </note>
Reference: [2] <author> Egidio Astesiano and Maura Cerioli. </author> <title> Commuting between institutions by simulation. </title> <type> Technical Report 2, </type> <institution> University of Genova, </institution> <year> 1990. </year>
Reference-contexts: For example, Salibra and Scollo [56] and Astesiano and Cerioli <ref> [2] </ref> describe some other possibilities. 8 2.2 Factorisations and Inclusions In this subsection, we first present the standard notion of a factorisation system (e.g., see [42]), which has been used many places in Computing Science (e.g., [26, 62]); then we give our novel axiomatisation for the notion of "inclusion." Definition 6:
Reference: [3] <author> Jon Barwise. </author> <title> Axioms for abstract model theory. </title> <journal> Annals of Mathematical Logic, </journal> <volume> 7 </volume> <pages> 221-265, </pages> <year> 1974. </year>
Reference-contexts: Institutions are an abstraction of Tarski's classic semantic definition of truth [67], based on a relation of satisfaction between models and sentences. In logic, there is a tradition, called abstract model theory, which abstracts the Tarskian approach to cover other logical systems (e.g., see <ref> [4, 3] </ref>). The goal of research in this area is to generalise as much of classical first order model theory as possible. Institutions can be seen in this light, but they are much more general, and are not focussed on first order logic.
Reference: [4] <author> Jon Barwise and Solomon Feferman. </author> <title> Model-Theoretic Logics. </title> <publisher> Springer, </publisher> <year> 1985. </year>
Reference-contexts: Institutions are an abstraction of Tarski's classic semantic definition of truth [67], based on a relation of satisfaction between models and sentences. In logic, there is a tradition, called abstract model theory, which abstracts the Tarskian approach to cover other logical systems (e.g., see <ref> [4, 3] </ref>). The goal of research in this area is to generalise as much of classical first order model theory as possible. Institutions can be seen in this light, but they are much more general, and are not focussed on first order logic.
Reference: [5] <author> Jan Bergstra, Jan Heering, and Paul Klint. </author> <title> Module algebra. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 37(2) </volume> <pages> 335-372, </pages> <year> 1990. </year>
Reference-contexts: Some recent results on the formal properties of module composition over institutions appear in [23]. The present paper is in the same tradition. The module algebra of Bergstra, Heering and Klint <ref> [5] </ref> attempts to capture the horizontal structure of modules with equations among certain basic operations on modules, including sum, renaming, and information hiding. <p> However, Bergstra et al. abstract some interesting general principles from this special case. In particular, we will see that the equivalence of Craig Interpolation with a distributive law for information hiding asserted in <ref> [5] </ref> is actually valid at the level of institutions under certain conditions (namely, compactness and closure under implication and false); moreover, we use essentially the same proof that they gave. <p> Also, Meseguer [47] showed that F (P) is semiexact. Putting these results together, we are able to apply results about institutions to F (P), and hence to P. 16 3 Basic Module Algebra Bergstra, Heering and Klint <ref> [5] </ref> consider a module to be a set of sentences in first order logic, and develop a "module algebra" which captures many important properties of modules in this sense, through equations that are satisfied by basic operations on modules. <p> This section and the next discuss some equations that may be satisfied by operations on theories over a reasonable institution I. Recall that we have already shown that T h (I) has an inclusion system and finite colimits when I is reasonable. We will use the following notations (from <ref> [5] </ref>): if T = (; E), then we let (T ) = ; and given a signature , we let T () = (; ; * ) and we call it the empty theory. <p> Then 0 2T = ( " 0 ; E " Sen ( 0 )), where 2 is called the information hiding operator. 2 18 Bergstra, Heering and Klint <ref> [5] </ref> called 2 the "export operator," but we think that this name may be misleading. Proposition 41: Given a signature inclusion 0 ,! and a -theory T , then 0 2T is a 0 - theory. <p> Much of this paper can be seen as exploring equations that hold on the quotient of this algebra by an equivalence induced by some notion of denotation. What is attractive about the module algebra of Bergstra et al. <ref> [5] </ref> is that it provides a normal form for such module expressions; unfortunately, their development is restricted to the case of first order logic. 4 Distributive Laws This section discusses three distributive laws for information hiding over the sum of theories. <p> We first formulate the Craig Interpolation Property for institutions in a style used by Rodenburg [55] for the equational case. Then we connect the middle distributive law with Craig Interpolation, in the style of <ref> [5] </ref> and [54]. <p> Therefore (E 1 [ E 2 ) " Sen ( 0 ) j= 0 (E 0 1 [ E 0 22 The Amsterdam distributive law appears in the work of Bergstra, Heering and Klint <ref> [5] </ref>, who note that it has the form of a conditional equation; notice also that the middle distributive law is a special case. <p> Proof: This follows from Theorem 50 and Theorem 49. 2 The proof of Theorem 49 resembles the proof of equivalence of the distributive law and the Craig Interpolation Property given in <ref> [5] </ref> for first order logic. Indeed, we can apply the above result to obtain the distributive law for first order logic, because first order logic is compact, closed under implication and false, and satisfies the Craig Interpolation Property. <p> However, equational logic, and also conditional equational logic, are not closed under implication and false, so that we cannot obtain the distributive law in this way for these logical systems. In fact, the distributive law does not hold for them, as shown by the following counterexample, adapted from <ref> [5] </ref>: Example 52: Consider the unsorted signatures 1 containing the constants 0, c 1 and c 2 and the unary operation symbol , and 2 containing the constants c 1 and c 2 , the unary operation symbol , and the ternary operation symbol h. <p> Also, at least for first order logic, the middle distributive law supports a normal form for module expressions, in which information hiding can be reduced to a single operation which is performed last <ref> [5] </ref>. Subsection 4.3 showed that the middle distributive law holds for equational style logics when the extensions are conservative, and argued that this is the case of greatest interest in applications. <p> Some authors have argued that certain properties of equational logic render it unsuitable for use in specification. These include the following: 1. the failure of pushouts to preserve conservative extensions [44]; 2. failure of the (middle) distributive law for information hiding over sum <ref> [5] </ref>; and 3. failure of the Strong Craig Interpolation Property [44, 45]. The first point rests on using a syntactic formulation of conservative extension, rather than the semantic formulation that we have argued correctly describes the behaviour of the models that are the real result of the design process.
Reference: [6] <author> Jan Bergstra and John Tucker. </author> <title> Characterization of computable data types by means of a finite equational specification method. </title> <editor> In J.W. de Bakker and Jan van Leeuwen, editors, </editor> <booktitle> Automata, Languages and Programming, Seventh Colloquium, </booktitle> <pages> pages 76-90. </pages> <publisher> Springer, </publisher> <year> 1980. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 81. </volume>
Reference-contexts: This is accomplished by hiding the data representation, i.e., by allowing access to it only through operations exported by its module. Similarly, Majster [46] showed that certain -algebras cannot be specified as the initial -algebra of a finite set of -equations, while later work by Bergstra and Tucker (see <ref> [6] </ref>, and a summary of related research in [48]) showed that any recursive -algebra could be specified as the -restriction of an initial 0 -algebra of a finite set of 0 -equations.
Reference: [7] <author> Rod Burstall and Joseph Goguen. </author> <title> Putting theories together to make specifications. </title> <editor> In Raj Reddy, editor, </editor> <booktitle> Proceedings, Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1045-1058. </pages> <institution> Department of Computer Science, Carnegie-Mellon University, </institution> <year> 1977. </year>
Reference-contexts: Such modules support software reuse because they can be specified, verified, and compiled separately. Note that this notion of module is essentially syntactic: it concerns texts that describe systems. The earliest work that we know on specification modules is by Goguen and Burstall, for their specification language Clear <ref> [7, 8] </ref>, the semantics of which is based on institutions.
Reference: [8] <author> Rod Burstall and Joseph Goguen. </author> <title> The semantics of Clear, a specification language. </title> <editor> In Dines Bjorner, editor, </editor> <booktitle> Proceedings, 1979 Copenhagen Winter School on Abstract Software Specification, </booktitle> <pages> pages 292-332. </pages> <publisher> Springer, </publisher> <year> 1980. </year> <booktitle> Lecture Notes in Computer Science, Volume 86; based on unpublished notes handed out at the Symposium on Algebra and Applications, </booktitle> <institution> Stefan Banach Center, Warsaw, Poland, </institution> <year> 1978. </year>
Reference-contexts: Such modules support software reuse because they can be specified, verified, and compiled separately. Note that this notion of module is essentially syntactic: it concerns texts that describe systems. The earliest work that we know on specification modules is by Goguen and Burstall, for their specification language Clear <ref> [7, 8] </ref>, the semantics of which is based on institutions. <p> Building on Clear, they studied laws for horizontal structuring relationships, and vertical implementing (also called "refinement") relationships, concluding that the axioms of a 2-category should be satisfied. Some general laws for the module operations of Clear appear in [19], and others occur in the proofs in <ref> [8] </ref>. Some recent results on the formal properties of module composition over institutions appear in [23]. The present paper is in the same tradition. <p> Indeed, their paper was a major inspiration for the present paper, and opened what seems to us a fascinating realm of new questions in the theory of institutions. The original semantics of Clear <ref> [8] </ref> did not capture the use of subsignatures and subtheories that is natural in many institutions. The present paper gives a new axiomatisation of the notion of inclusion, so that sums are given by least upper bounds of inclusions. <p> Notice that even for equational logic, there may be some sentences in T (), for example, those of the form (8x) x = x. 3.1 Sum A very basic operation on theories is simply to combine their features into a single theory. This was modelled with colimits in Clear <ref> [8] </ref> in a way that permitted shared subtheories. For a strongly inclusive institution, we can use the specific colimit that is given by the sum. Recall that given theories T and T 0 , their sum is their coproduct T + T 0 in I T h .
Reference: [9] <author> Paddy Byers and David Pitt. </author> <title> Conservative extensions: A cautionary note. </title> <journal> Bulletin of the European Association for Theoretical Computer Science, </journal> <volume> 41 </volume> <pages> 196-201, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Byers and Pitt <ref> [9] </ref> give a nice discussion of the problem with some counterexamples, and Veloso and Veloso [69] discuss counterexamples from first order logic in more detail.
Reference: [10] <author> Paul M. Cohn. </author> <title> Universal Algebra. </title> <publisher> Harper and Row, </publisher> <year> 1965. </year> <note> Revised edition 1980. </note>
Reference-contexts: Proposition 3: The two functions denoted "*" in Definition 2 form what is known as a Galois connection (see, e.g., <ref> [10] </ref>), in that they satisfy the following properties, for any collections E; E 0 of -sentences and collections M; M 0 of -models: 1. E E 0 implies E 0 * E*. 2. M M 0 implies M 0 * M *. 3. E E**.
Reference: [11] <author> Robert Constable and David Basin. </author> <title> Meta-logical frameworks. </title> <booktitle> In Proceedings, 2nd Edinburgh Workshop on Logical Frameworks. </booktitle> <address> Cambridge, </address> <note> to appear 1993. </note>
Reference-contexts: Although the unsorted variant is the most traditional in mathematics, it is perhaps the least suitable for Computing Science applications; for example, order sorted algebra [33] is much better, because of its capabilities to handle subsorts, errors, polymorphism and overloading. 8 Following <ref> [11] </ref>, this means that the system supports metalevel reasoning, that is, reasoning about proofs, as well as object level reasoning. 32
Reference: [12] <author> Thierry Coquand and Gerard Huet. </author> <title> The calculus of constructions. </title> <journal> Information and Computation, </journal> 76(2/3):95-120, 1988. 
Reference-contexts: Much interesting work using institutions has been done by Tarlecki [62, 63, 64, 65] and by Sannella and Tarlecki [58, 59, 60], and we discuss several aspects of this work later. 1.2 Relation with Type Theoretic Approaches In systems like the Calculus of Constructions <ref> [12] </ref> and the various automath languages [13], theories appear as dependent sequences of declarations, and are structured by various type theoretic devices. Hence, signatures and sentences are not cleanly separated; moreover, this proof-theoretic tradition has no model theory of the kind considered in this paper.
Reference: [13] <author> Nicolas de Bruijn. </author> <title> A survey of the project automath. </title> <editor> In J.P. Seldin and J.R. Hindley, editors, </editor> <booktitle> To H.B. Curry: Essays in Combinatory Logic, Lambda Calculus and Formalism, </booktitle> <pages> pages 579-606. </pages> <publisher> Academic, </publisher> <year> 1980. </year>
Reference-contexts: Much interesting work using institutions has been done by Tarlecki [62, 63, 64, 65] and by Sannella and Tarlecki [58, 59, 60], and we discuss several aspects of this work later. 1.2 Relation with Type Theoretic Approaches In systems like the Calculus of Constructions [12] and the various automath languages <ref> [13] </ref>, theories appear as dependent sequences of declarations, and are structured by various type theoretic devices. Hence, signatures and sentences are not cleanly separated; moreover, this proof-theoretic tradition has no model theory of the kind considered in this paper.
Reference: [14] <author> Harmut Ehrig, Michael Baldamus, Felix Cornelius, and Fernando Orejas. </author> <title> Abstract module specifications in the framework of specification logics and applications to behavioural module specifications. </title> <type> Technical report, </type> <institution> Technical University of Berlin, </institution> <year> 1991. </year>
Reference-contexts: Ehrig, Baldamus and Orejas <ref> [14, 15] </ref> have proposed a different weakening of institutions that they call "specification logics," which are functors Mod : T h op ! Cat that assign a category of models to each (abstract) theory.
Reference: [15] <author> Harmut Ehrig, Michael Baldamus, and Fernando Orejas. </author> <title> New concepts for amalgamation and extension in the framework of specification logics. </title> <type> Technical Report 91/05, </type> <institution> Technical University Berlin, </institution> <year> 1991. </year> <month> 33 </month>
Reference-contexts: Ehrig, Baldamus and Orejas <ref> [14, 15] </ref> have proposed a different weakening of institutions that they call "specification logics," which are functors Mod : T h op ! Cat that assign a category of models to each (abstract) theory.
Reference: [16] <author> Hartmut Ehrig, Hans-Jorg Kreowski, James Thatcher, Eric Wagner, and Jesse Wright. </author> <title> Pa--rameter passing in algebraic specification languages. </title> <journal> Theoretical Computer Science, </journal> <volume> 28 </volume> <pages> 45-81, </pages> <year> 1984. </year> <title> Earlier version in Workshop on Program Specification (Aarhus) pages 322-369, </title> <booktitle> Springer, Lecture Notes in Computer Science, </booktitle> <volume> Volume 134, </volume> <year> 1981. </year>
Reference-contexts: Finally, we consider extensions that conserve initial models of the theories involved; this is relevant to the specification of data types. Similar results have been previously obtained for the equational case by Ehrig, Kreowski, Thatcher, Wagner and Wright <ref> [16] </ref>, by Goguen and Meseguer [29], and by others; early work extending these concepts to institutions was done by Goguen and Burstall in [26]. 5.1 Conservative Extensions This section shows that pushouts of conservative extensions are conservative under some weak assumptions.
Reference: [17] <author> Jose Fiadeiro and Amilcar Sernadas. </author> <title> Structuring theories on consequence. </title> <editor> In Donald San-nella and Andrzej Tarlecki, editors, </editor> <booktitle> Recent Trends in Data Type Specification, </booktitle> <pages> pages 44-72. </pages> <publisher> Springer, </publisher> <year> 1988. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 332. </volume>
Reference-contexts: Following the work of Fiadeiro and Sernadas <ref> [17] </ref>, logical systems based on deduction can be formalised as -institutions, which have for each signature a set of -sentences, but no given models. To compensate for this lack, a consequence relation is given on sentences. We will use the definition of Fiadeiro and Sernadas [17] as modified by Meseguer [47], <p> work of Fiadeiro and Sernadas <ref> [17] </ref>, logical systems based on deduction can be formalised as -institutions, which have for each signature a set of -sentences, but no given models. To compensate for this lack, a consequence relation is given on sentences. We will use the definition of Fiadeiro and Sernadas [17] as modified by Meseguer [47], rather than that of Maibaum and Fiadeiro [45], which seems overly complex to us; Harper, Sannella and Tarlecki [41] have given a definition similar to Meseguer's, but restricted to finite sets of sentences. <p> However, this does not mean that -institutions should be abandoned; for example, they may be appropriate for deductive databases (as was suggested in <ref> [17] </ref>), where it seems reasonable 6 to take theories as models, as in the construction of Theorem 35. This section considers pushouts of three different variants of the notion of conservative extension. The first is the notion in Definition 58 of the previous section.
Reference: [18] <author> Kokichi Futatsugi, Joseph Goguen, Jean-Pierre Jouannaud, and Jose Meseguer. </author> <title> Principles of OBJ2. </title> <editor> In Brian Reid, editor, </editor> <booktitle> Proceedings, Twelfth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 52-66. </pages> <institution> Association for Computing Machinery, </institution> <year> 1985. </year>
Reference-contexts: In particular, these ideas are used in the 2OBJ theorem proving system [34], which supports deduction over any desired logical system by implementing its abstract data type of proofs in equational logic. 2OBJ builds on facilities from the OBJ3 system <ref> [18, 37] </ref>, including its module system. <p> The earliest work that we know on specification modules is by Goguen and Burstall, for their specification language Clear [7, 8], the semantics of which is based on institutions. This approach to modules has been applied to various logic-based languages, particularly OBJ <ref> [18, 36] </ref> (an equational based on order sorted algebra), Eqlog [31] (which combines the functional and logic paradigms), foops [32, 38] (which combines the functional and object paradigms), and fooplog [32] (which combines all three paradigms); it could also be applied to any pure logic-based programming languages, such as (pure) Lisp <p> This approach is taken in the 2OBJ system [34], a metalogical 8 theorem prover that supports deduction in any logical system, by implementing its abstract data type of proofs in equational logic. 2OBJ builds on facilities of the OBJ3 system <ref> [18, 37] </ref>. Both 2OBJ and OBJ3 have module systems based on the approach described in this paper.
Reference: [19] <author> Joseph Goguen. </author> <title> Categorical foundations for general systems theory. </title> <editor> In F. Pichler and R. Trappl, editors, </editor> <booktitle> Advances in Cybernetics and Systems Research, </booktitle> <pages> pages 121-130. </pages> <publisher> Tran-scripta Books, </publisher> <year> 1973. </year>
Reference-contexts: In [20], it is even extended to imperative programming. Clear introduced the ideas that a specification module determines a theory, and that such theories can be put together using colimits; these ideas have their origin in some earlier work by Goguen on General Systems Theory <ref> [19, 27] </ref>. Clear provided operations for summing, renaming, extending, hiding, importing and (in the case of generics) applying theories. Theories in turn denote classes of models. The earliest work that we know giving a calculus of modules is also due to Goguen and Burstall [24]. <p> Building on Clear, they studied laws for horizontal structuring relationships, and vertical implementing (also called "refinement") relationships, concluding that the axioms of a 2-category should be satisfied. Some general laws for the module operations of Clear appear in <ref> [19] </ref>, and others occur in the proofs in [8]. Some recent results on the formal properties of module composition over institutions appear in [23]. The present paper is in the same tradition.
Reference: [20] <author> Joseph Goguen. </author> <title> Reusing and interconnecting software components. </title> <journal> Computer, </journal> <volume> 19(2) </volume> <pages> 16-28, </pages> <month> February </month> <year> 1986. </year> <note> Reprinted in Tutorial: Software Reusability, </note> <editor> Peter Freeman, editor, </editor> <publisher> IEEE Computer Society, </publisher> <year> 1987, </year> <pages> pages 251-263, </pages> <booktitle> and in Domain Analysis and Software Systems Modelling, </booktitle> <editor> Ruben Prieto-Diaz and Guillermo Arango, editors, </editor> <publisher> IEEE Computer Society, </publisher> <year> 1991, </year> <pages> pages 125-137. </pages>
Reference-contexts: In <ref> [20] </ref>, it is even extended to imperative programming. Clear introduced the ideas that a specification module determines a theory, and that such theories can be put together using colimits; these ideas have their origin in some earlier work by Goguen on General Systems Theory [19, 27].
Reference: [21] <author> Joseph Goguen. </author> <title> Principles of parameterized programming. </title> <editor> In Ted Biggerstaff and Alan Perlis, editors, </editor> <booktitle> Software Reusability, Volume I: Concepts and Models, </booktitle> <pages> pages 159-225. </pages> <publisher> Addison Wes-ley, </publisher> <year> 1989. </year>
Reference-contexts: Our approach applies to theorem proving, software specification, hardware description, and logic-based programming; with some extra effort, it can even apply to imperative programming. Some general discussion and examples of our approach to modularisation are given in <ref> [21] </ref>. Two basic operations on theories are sum and renaming.
Reference: [22] <author> Joseph Goguen. </author> <title> A categorical manifesto. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 1(1) </volume> <pages> 49-67, </pages> <month> March </month> <year> 1991. </year> <note> Also, </note> <institution> Programming Research Group Technical Monograph PRG-72, Oxford University, </institution> <month> March </month> <year> 1989. </year>
Reference-contexts: In particular, a new categorical axiomatisation of the notion of inclusion permits simple definitions for our operations on theories. A general discussion of how to apply ideas from category theory in Computing Science in given in <ref> [22] </ref>. One application for the machinery of this paper is theorem proving, where modules representing logical theories are important.
Reference: [23] <author> Joseph Goguen. </author> <title> Types as theories. </title> <editor> In George Michael Reed, Andrew William Roscoe, and Ralph F. Wachter, editors, </editor> <booktitle> Topology and Category Theory in Computer Science, </booktitle> <pages> pages 357-390. </pages> <address> Oxford, </address> <year> 1991. </year> <title> Proceeding of a Conference held at Oxford, </title> <month> June </month> <year> 1989. </year>
Reference-contexts: Some general laws for the module operations of Clear appear in [19], and others occur in the proofs in [8]. Some recent results on the formal properties of module composition over institutions appear in <ref> [23] </ref>. The present paper is in the same tradition. The module algebra of Bergstra, Heering and Klint [5] attempts to capture the horizontal structure of modules with equations among certain basic operations on modules, including sum, renaming, and information hiding. <p> Although [56] claims that hidden sorted equational logic is not an institution, but does satisfy half of the Satisfaction Condition, this is only because their version of hidden sorted equational logic has signature morphisms that do not respect all of the appropriate structure; see <ref> [23] </ref> for a proof that with appropriate signature morphisms, hidden sorted equational logic is indeed an institution. <p> 3. algorithms like term rewriting, Knuth-Bendix, and narrowing, which give equational logic a strong computational aspect, and make it especially suitable for mechanisation. 31 Some additional points are that equational logic can be used conveniently for the specification and verification of imperative programs [28], as well as object oriented programs <ref> [23] </ref>. Moreover, equational deduction is significantly simpler than deduction for full first order logic, and has significant advantages for computation. Thus, the case for using equational logic in Computing Science wherever it can be used seems quite strong.
Reference: [24] <author> Joseph Goguen and Rod Burstall. </author> <title> CAT, a system for the structured elaboration of correct programs from structured specifications. </title> <type> Technical Report Report CSL-118, </type> <institution> SRI Computer Science Lab, </institution> <month> October </month> <year> 1980. </year>
Reference-contexts: Clear provided operations for summing, renaming, extending, hiding, importing and (in the case of generics) applying theories. Theories in turn denote classes of models. The earliest work that we know giving a calculus of modules is also due to Goguen and Burstall <ref> [24] </ref>. Building on Clear, they studied laws for horizontal structuring relationships, and vertical implementing (also called "refinement") relationships, concluding that the axioms of a 2-category should be satisfied. Some general laws for the module operations of Clear appear in [19], and others occur in the proofs in [8].
Reference: [25] <author> Joseph Goguen and Rod Burstall. </author> <title> A study in the foundations of programming methodology: Specifications, </title> <editor> institutions, charters and parchments. In David Pitt, Samson Abramsky, Axel Poigne, and David Rydeheard, editors, </editor> <booktitle> Proceedings, Conference on Category Theory and Computer Programming, </booktitle> <pages> pages 313-333. </pages> <publisher> Springer, </publisher> <year> 1986. </year> <note> Lecture Notes in Computer Science, Volume 240; also, Report CSLI-86-54, </note> <institution> Center for the Study of Language and Information, Stanford University, </institution> <month> June </month> <year> 1986. </year>
Reference-contexts: foundations of such an approach require formalising the notions of deduction in a logical system, and of encoding one logical system into another; these formalisations are provided by the notions of ruled charter (which gives rise to an institution) and ruled charter morphism; see [34], which builds on work in <ref> [25] </ref>. 1.1 Some History The earliest work on software modules with which we are familiar is by Parnas [51, 52, 53]. <p> Mosses shows that his unified algebras form an institution in [49]. Yukawa [71] gives an institution for the lambda calculus, with -models as models. Nielsen and Platet [50] give an institution for higher order logic with polymorphic types. Goguen and Burstall <ref> [25] </ref> show how to ease checking the Satisfaction Condition through the use of charters and parchments; this technique is applied by Stefaneas [61] to get institutions for second order and modal logics. <p> It is not hard to see that any chartered institution is exact 3 . Charters were introduced by Goguen and Burstall <ref> [25] </ref> as a general way to produce institutions. The basic intuition is that the syntax of a logical system is an initial algebra. Because it appears that most institutions of interest in Computing Science can be chartered, it follows that most institutions of interest in Computing are exact. <p> approach to theorem proving require formalising the notions of deduction in a logical system, and of encoding one logical system into another; these are provided by the notion of a ruled charter (which gives rise to an institution) and a ruled charter morphism [34], which are elaborations of ideas from <ref> [25] </ref>. Given our position that the consideration of logic in Computing Science should involve a delicate balance between syntax and semantics, it is interesting to compare our intuitive discussions of information hiding and conservative extensions.
Reference: [26] <author> Joseph Goguen and Rod Burstall. Institutions: </author> <title> Abstract model theory for specification and programming. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 39(1) </volume> <pages> 95-146, </pages> <month> January </month> <year> 1992. </year> <note> Draft appears as Report ECS-LFCS-90-106, </note> <institution> Computer Science Department, University of Edinburgh, </institution> <note> January 1990; an early ancestor is "Introducing Institutions," in Proceedings, Logics of Programming Workshop, </note> <editor> Edward Clarke and Dexter Kozen, Eds., </editor> <booktitle> Springer Lecture Notes in Computer Science, </booktitle> <volume> Volume 164, </volume> <pages> pages 221-256, </pages> <year> 1984. </year>
Reference-contexts: In a series of papers beginning in 1979, Burstall and Goguen developed institutions to for-malise the intuitive notion of a logical system; the most recent and complete exposition is <ref> [26] </ref>. This approach allows us to discuss the crucial relationship between theories and models without commitment to either side at the expense of the other. <p> An institution is compact iff whenever E j= e then there is a finite subset E 0 E such that E 0 j= e. 2 Of course, it takes some effort to prove that a given logical system really is an institution. The basic paper on institutions <ref> [26] </ref> showed that a number of basic logical systems are institutions, including the many sorted and unsorted versions of first order logic, equational logic, and Horn clause logic, with and without equality. Mosses shows that his unified algebras form an institution in [49]. <p> Thus, we believe that the name "specification logic" is misleading, although the concept is certainly useful. In our opinion, it is more interesting to explore variations of the institution concept that provide deduction, as well as satisfaction; see <ref> [26, 47] </ref> and [34] for further discussion. There are two equivalent ways to give a denotation for a presentation P : the set of all sentences entailed by those in P ; and the class of all models of P . <p> Let P res (I) denote the category of presentations over an institution I, and let T h (I) denote its subcategory of theories over I. 2 The following basic result is proved in <ref> [26] </ref>. Proposition 3: The two functions denoted "*" in Definition 2 form what is known as a Galois connection (see, e.g., [10]), in that they satisfy the following properties, for any collections E; E 0 of -sentences and collections M; M 0 of -models: 1. <p> These imply the following properties: 5. E* = E***. 7. There is a dual (i.e., inclusion reversing) isomorphism between the closed collections of sentences and the closed collections of models; this isomorphism takes unions to intersections and intersections to unions. 2 The following basic result is proved in <ref> [26] </ref>: Theorem 4: If the category of signatures of an institution I has [finite] colimits, then so does its category T h (I) of theories. 2 Again following [26], we now present institution morphisms, which are useful for comparing and for transferring results among different logical systems: Definition 5: Let I <p> closed collections of models; this isomorphism takes unions to intersections and intersections to unions. 2 The following basic result is proved in <ref> [26] </ref>: Theorem 4: If the category of signatures of an institution I has [finite] colimits, then so does its category T h (I) of theories. 2 Again following [26], we now present institution morphisms, which are useful for comparing and for transferring results among different logical systems: Definition 5: Let I and I 0 be institutions. <p> Institutions with institution morphisms form a category, which we denote Ins. 2 The above is just one of several different kinds of morphism between institutions; while we feel that it is the one that properly reflects the structure of institutions (see <ref> [26] </ref> for detailed arguments on this point), it is not the right notion for certain purposes. <p> For example, Salibra and Scollo [56] and Astesiano and Cerioli [2] describe some other possibilities. 8 2.2 Factorisations and Inclusions In this subsection, we first present the standard notion of a factorisation system (e.g., see [42]), which has been used many places in Computing Science (e.g., <ref> [26, 62] </ref>); then we give our novel axiomatisation for the notion of "inclusion." Definition 6: An image factorisation system for a category C consists of a class M of monics and a class E of epics in C such that (1) both E and M are closed under composition, (2) all <p> It is easy to check that this forms a factorisation system. If I respects the inclusion system (I; E), then (2) and (3) of Definition 7 hold trivially, and I T h has finite coproducts by an argument similar to that given for Theorem 4 in <ref> [26] </ref>. 2 Fact 25: Under the hypothesis of Proposition 24, the forgetful functor T h (I) ! Sign is an inclusion system morphism. <p> Recall <ref> [26] </ref> that ( 0 1 ; 0 is the pushout of ( 1 ; 2 ) in Sign and E is the closure of 0 2 (E 1 ) [ 0 Let M 1 be a 1 -model of E 1 and M 2 a 2 -model of E 2 such <p> Proof: This follows from the fact that the forgetful functor T h (I) ! Sign creates both colimits <ref> [26] </ref> and inclusions. 2 2.4 -Institutions It has been claimed (e.g., in [44]) that the standard notion of institution (Definition 1) is not suitable for the foundations of software engineering, because it is based on satisfaction rather than deduction. <p> Similar results have been previously obtained for the equational case by Ehrig, Kreowski, Thatcher, Wagner and Wright [16], by Goguen and Meseguer [29], and by others; early work extending these concepts to institutions was done by Goguen and Burstall in <ref> [26] </ref>. 5.1 Conservative Extensions This section shows that pushouts of conservative extensions are conservative under some weak assumptions. <p> E), Example 63 provides an extension 2 ( 0 ; E 0 ) ! ( 0 ; E 0 ) that is syntactically but not semantically conservative. 5.2 Persistent Extensions Persistence is a stronger notion than conservative extension, and is important for the semantics of parameterised data types (e.g., see <ref> [26] </ref>).
Reference: [27] <author> Joseph Goguen and Susanna Ginali. </author> <title> A categorical approach to general systems theory. </title> <editor> In George Klir, editor, </editor> <booktitle> Applied General Systems Research, </booktitle> <pages> pages 257-270. </pages> <publisher> Plenum, </publisher> <year> 1978. </year> <month> 34 </month>
Reference-contexts: In [20], it is even extended to imperative programming. Clear introduced the ideas that a specification module determines a theory, and that such theories can be put together using colimits; these ideas have their origin in some earlier work by Goguen on General Systems Theory <ref> [19, 27] </ref>. Clear provided operations for summing, renaming, extending, hiding, importing and (in the case of generics) applying theories. Theories in turn denote classes of models. The earliest work that we know giving a calculus of modules is also due to Goguen and Burstall [24].
Reference: [28] <author> Joseph Goguen and Grant Malcolm. </author> <title> Algebraic Semantics for Imperative Languages. </title> <type> Draft, </type> <institution> Programming Research Group, Oxford University, </institution> <year> 1992. </year>
Reference-contexts: sup porting free extensions of models; and 3. algorithms like term rewriting, Knuth-Bendix, and narrowing, which give equational logic a strong computational aspect, and make it especially suitable for mechanisation. 31 Some additional points are that equational logic can be used conveniently for the specification and verification of imperative programs <ref> [28] </ref>, as well as object oriented programs [23]. Moreover, equational deduction is significantly simpler than deduction for full first order logic, and has significant advantages for computation. Thus, the case for using equational logic in Computing Science wherever it can be used seems quite strong.
Reference: [29] <author> Joseph Goguen and Jose Meseguer. </author> <title> Universal realization, persistent interconnection and implementation of abstract modules. </title> <editor> In M. Nielsen and E.M. Schmidt, editors, </editor> <booktitle> Proceedings, 9th International Conference on Automata, Languages and Programming, </booktitle> <pages> pages 265-281. </pages> <publisher> Springer, </publisher> <year> 1982. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 140. </volume>
Reference-contexts: Finally, we consider extensions that conserve initial models of the theories involved; this is relevant to the specification of data types. Similar results have been previously obtained for the equational case by Ehrig, Kreowski, Thatcher, Wagner and Wright [16], by Goguen and Meseguer <ref> [29] </ref>, and by others; early work extending these concepts to institutions was done by Goguen and Burstall in [26]. 5.1 Conservative Extensions This section shows that pushouts of conservative extensions are conservative under some weak assumptions.
Reference: [30] <author> Joseph Goguen and Jose Meseguer. </author> <title> Completeness of many-sorted equational logic. </title> <journal> Houston Journal of Mathematics, </journal> <volume> 11(3) </volume> <pages> 307-334, </pages> <year> 1985. </year> <note> Preliminary versions have appeared in: SIG-PLAN Notices, </note> <month> July </month> <year> 1981, </year> <title> Volume 16, </title> <type> Number 7, </type> <institution> pages 24-37; SRI Computer Science Lab, </institution> <note> Report CSL-135, May 1982; and Report CSLI-84-15, </note> <institution> Center for the Study of Language and Information, Stanford University, </institution> <month> September </month> <year> 1984. </year>
Reference-contexts: Notice that 2T 1 is empty and that 2T 2 does not contain c 1 = c 2 . Therefore c 1 = c 2 does not belong to (2T 1 ) + (2T 2 ). 2 A simpler example could be given along the lines of one in <ref> [30] </ref> showing the need for explicit quantification in many sorted equational logic with possibly empty carriers. However, the example given above is stronger, because it shows that the (middle) distributive law does not hold for unsorted equational logic.
Reference: [31] <author> Joseph Goguen and Jose Meseguer. </author> <title> Eqlog: Equality, types, and generic modules for logic programming. </title> <editor> In Douglas DeGroot and Gary Lindstrom, editors, </editor> <booktitle> Logic Programming: Functions, Relations and Equations, </booktitle> <pages> pages 295-363. </pages> <publisher> Prentice-Hall, </publisher> <year> 1986. </year> <title> An earlier version appears in Journal of Logic Programming, </title> <journal> Volume 1, </journal> <volume> Number 2, </volume> <pages> pages 179-210, </pages> <month> September </month> <year> 1984. </year>
Reference-contexts: This approach to modules has been applied to various logic-based languages, particularly OBJ [18, 36] (an equational based on order sorted algebra), Eqlog <ref> [31] </ref> (which combines the functional and logic paradigms), foops [32, 38] (which combines the functional and object paradigms), and fooplog [32] (which combines all three paradigms); it could also be applied to any pure logic-based programming languages, such as (pure) Lisp and (pure) Prolog.
Reference: [32] <author> Joseph Goguen and Jose Meseguer. </author> <title> Unifying functional, object-oriented and relational programming, with logical semantics. </title> <editor> In Bruce Shriver and Peter Wegner, editors, </editor> <booktitle> Research Directions in Object-Oriented Programming, </booktitle> <pages> pages 417-477. </pages> <publisher> MIT, </publisher> <year> 1987. </year> <journal> Preliminary version in SIGPLAN Notices, </journal> <volume> Volume 21, Number 10, </volume> <pages> pages 153-162, </pages> <month> October </month> <year> 1986. </year>
Reference-contexts: This approach to modules has been applied to various logic-based languages, particularly OBJ [18, 36] (an equational based on order sorted algebra), Eqlog [31] (which combines the functional and logic paradigms), foops <ref> [32, 38] </ref> (which combines the functional and object paradigms), and fooplog [32] (which combines all three paradigms); it could also be applied to any pure logic-based programming languages, such as (pure) Lisp and (pure) Prolog. In [20], it is even extended to imperative programming. <p> This approach to modules has been applied to various logic-based languages, particularly OBJ [18, 36] (an equational based on order sorted algebra), Eqlog [31] (which combines the functional and logic paradigms), foops [32, 38] (which combines the functional and object paradigms), and fooplog <ref> [32] </ref> (which combines all three paradigms); it could also be applied to any pure logic-based programming languages, such as (pure) Lisp and (pure) Prolog. In [20], it is even extended to imperative programming.
Reference: [33] <author> Joseph Goguen and Jose Meseguer. </author> <title> Order-sorted algebra I: Equational deduction for multiple inheritance, overloading, exceptions and partial operations. </title> <journal> Theoretical Computer Science, </journal> <volume> 105(2) </volume> <pages> 217-273, </pages> <year> 1992. </year> <note> Also, </note> <institution> Programming Research Group Technical Monograph PRG-80, Oxford University, </institution> <month> December </month> <year> 1989, </year> <note> and Technical Report SRI-CSL-89-10, </note> <institution> SRI International, Computer Science Lab, </institution> <note> July 1989; originally given as lecture at Seminar on Types, Carnegie-Mellon University, June 1983; many draft versions exist, from as early as 1985. </note>
Reference-contexts: Although the unsorted variant is the most traditional in mathematics, it is perhaps the least suitable for Computing Science applications; for example, order sorted algebra <ref> [33] </ref> is much better, because of its capabilities to handle subsorts, errors, polymorphism and overloading. 8 Following [11], this means that the system supports metalevel reasoning, that is, reasoning about proofs, as well as object level reasoning. 32
Reference: [34] <author> Joseph Goguen, Andrew Stevens, Keith Hobley, and Hendrik Hilberdink. 2OBJ, </author> <title> a metalog-ical framework based on equational logic. </title> <journal> Philosophical Transactions of the Royal Society, Series A, </journal> <volume> 339 </volume> <pages> 69-86, </pages> <year> 1992. </year> <title> Also in Mechanized Reasoning and Hardware Design, edited by C.A.R. Hoare and M.J.C. </title> <publisher> Gordon, Prentice-Hall, </publisher> <year> 1992, </year> <pages> pages 69-86. </pages>
Reference-contexts: A general discussion of how to apply ideas from category theory in Computing Science in given in [22]. One application for the machinery of this paper is theorem proving, where modules representing logical theories are important. In particular, these ideas are used in the 2OBJ theorem proving system <ref> [34] </ref>, which supports deduction over any desired logical system by implementing its abstract data type of proofs in equational logic. 2OBJ builds on facilities from the OBJ3 system [18, 37], including its module system. <p> The logical foundations of such an approach require formalising the notions of deduction in a logical system, and of encoding one logical system into another; these formalisations are provided by the notions of ruled charter (which gives rise to an institution) and ruled charter morphism; see <ref> [34] </ref>, which builds on work in [25]. 1.1 Some History The earliest work on software modules with which we are familiar is by Parnas [51, 52, 53]. <p> Thus, we believe that the name "specification logic" is misleading, although the concept is certainly useful. In our opinion, it is more interesting to explore variations of the institution concept that provide deduction, as well as satisfaction; see [26, 47] and <ref> [34] </ref> for further discussion. There are two equivalent ways to give a denotation for a presentation P : the set of all sentences entailed by those in P ; and the class of all models of P . <p> Equational logic also seems promising as a metalanguage for describing other logics, and hence for theorem proving over arbitrary logical systems. This approach is taken in the 2OBJ system <ref> [34] </ref>, a metalogical 8 theorem prover that supports deduction in any logical system, by implementing its abstract data type of proofs in equational logic. 2OBJ builds on facilities of the OBJ3 system [18, 37]. Both 2OBJ and OBJ3 have module systems based on the approach described in this paper. <p> Foundations for the 2OBJ approach to theorem proving require formalising the notions of deduction in a logical system, and of encoding one logical system into another; these are provided by the notion of a ruled charter (which gives rise to an institution) and a ruled charter morphism <ref> [34] </ref>, which are elaborations of ideas from [25]. Given our position that the consideration of logic in Computing Science should involve a delicate balance between syntax and semantics, it is interesting to compare our intuitive discussions of information hiding and conservative extensions.
Reference: [35] <author> Joseph Goguen, James Thatcher, and Eric Wagner. </author> <title> An initial algebra approach to the specification, correctness and implementation of abstract data types. </title> <type> Technical Report RC 6487, </type> <institution> IBM T.J. Watson Research Center, </institution> <month> October </month> <year> 1976. </year> <title> In Current Trends in Programming Methodology, IV, </title> <editor> Raymond Yeh, editor, </editor> <publisher> Prentice-Hall, </publisher> <year> 1978, </year> <pages> pages 80-149. </pages>
Reference-contexts: Most of the categories used in specification and programming have obvious and natural inclusion systems, including the following: Example 8: The category Set of sets with I the inclusions and E the surjections is an inclusion system. 2 9 Example 9: Recall (e.g., from <ref> [35] </ref>) that a many sorted signature consists of a set S of sorts and an S fl fi S-indexed family of sets w;s whose elements are the operation symbols of arity (i.e., input sorts) w 2 S fl , and value (i.e., output) s 2 S.
Reference: [36] <author> Joseph Goguen and Timothy Winkler. </author> <title> Introducing OBJ3. </title> <type> Technical Report SRI-CSL-88-9, </type> <institution> SRI International, Computer Science Lab, </institution> <month> August </month> <year> 1988. </year> <note> Revised version to appear with additional authors Jose Meseguer, </note> <editor> Kokichi Futatsugi and Jean-Pierre Jouannaud, </editor> <title> in Applications of Algebraic Specification using OBJ, edited by Joseph Goguen, </title> <address> Cambridge, </address> <note> to appear 1993. </note>
Reference-contexts: The earliest work that we know on specification modules is by Goguen and Burstall, for their specification language Clear [7, 8], the semantics of which is based on institutions. This approach to modules has been applied to various logic-based languages, particularly OBJ <ref> [18, 36] </ref> (an equational based on order sorted algebra), Eqlog [31] (which combines the functional and logic paradigms), foops [32, 38] (which combines the functional and object paradigms), and fooplog [32] (which combines all three paradigms); it could also be applied to any pure logic-based programming languages, such as (pure) Lisp <p> This solution has been implemented in the OBJ3 system <ref> [36] </ref> simply by renaming all operations as they are stored into the module database. Then module importation is just inclusion of the renamed theories.
Reference: [37] <author> Joseph Goguen, Timothy Winkler, Jose Meseguer, Kokichi Futatsugi, and Jean-Pierre Jouan-naud. </author> <title> Introducing OBJ. In Joseph Goguen, editor, Applications of Algebraic Specification using OBJ. </title> <address> Cambridge, </address> <note> to appear 1993. Also to appear as Technical Report from SRI International. </note>
Reference-contexts: In particular, these ideas are used in the 2OBJ theorem proving system [34], which supports deduction over any desired logical system by implementing its abstract data type of proofs in equational logic. 2OBJ builds on facilities from the OBJ3 system <ref> [18, 37] </ref>, including its module system. <p> This approach is taken in the 2OBJ system [34], a metalogical 8 theorem prover that supports deduction in any logical system, by implementing its abstract data type of proofs in equational logic. 2OBJ builds on facilities of the OBJ3 system <ref> [18, 37] </ref>. Both 2OBJ and OBJ3 have module systems based on the approach described in this paper.
Reference: [38] <author> Joseph Goguen and David Wolfram. </author> <title> On types and FOOPS. </title> <editor> In Robert Meersman, William Kent, and Samit Khosla, editors, </editor> <title> Object Oriented Databases: Analysis, </title> <booktitle> Design and Construction, </booktitle> <pages> pages 1-22. </pages> <publisher> North Holland, </publisher> <year> 1991. </year> <booktitle> Proceedings, IFIP TC2 Conference, </booktitle> <address> Windermere, UK, </address> <month> 2-6 July </month> <year> 1990. </year> <month> 35 </month>
Reference-contexts: This approach to modules has been applied to various logic-based languages, particularly OBJ [18, 36] (an equational based on order sorted algebra), Eqlog [31] (which combines the functional and logic paradigms), foops <ref> [32, 38] </ref> (which combines the functional and object paradigms), and fooplog [32] (which combines all three paradigms); it could also be applied to any pure logic-based programming languages, such as (pure) Lisp and (pure) Prolog. In [20], it is even extended to imperative programming.
Reference: [39] <author> Robert Goldblatt. </author> <title> Topoi, the Categorial Analysis of Logic. </title> <publisher> North-Holland, </publisher> <year> 1979. </year>
Reference-contexts: The necessary material may be found in [43], [42], or in a more gentle style, <ref> [39] </ref>. By way of notation, we use ";" for composition, we let 1 A denote the identity morphism at an object A, and we let jCj denote the class of objects of a category C.
Reference: [40] <author> Robert Harper, David MacQueen, and Robin Milner. </author> <title> Standard ML. </title> <type> Technical Report ECS-LFCS-86-2, </type> <institution> Department of Computer Science, University of Edinburgh, </institution> <year> 1986. </year>
Reference-contexts: For example, Clear modules are built up recursively from its combine, enrich, derive, and apply operations. The module expressions of the OBJ language are generated in a similar way. Standard ML <ref> [40] </ref> and Modula-2 [70] also have interesting module systems. In the context of the present section, we may define module expressions to be built up from +, 2, and ?, plus the finite presentations; i.e., they are the elements of the free term algebra 5 .
Reference: [41] <author> Robert Harper, Donald Sannella, and Andrzej Tarlecki. </author> <title> Logic representation in LF. </title> <editor> In David Pitt, David Rydeheard, Peter Dybjer, Andrew Pitts, and Axel Poigne, editors, </editor> <booktitle> Proceedings, Conference on Category Theory and Computer Science, </booktitle> <pages> pages 250-272. </pages> <publisher> Springer, </publisher> <year> 1989. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 389. </volume>
Reference-contexts: To compensate for this lack, a consequence relation is given on sentences. We will use the definition of Fiadeiro and Sernadas [17] as modified by Meseguer [47], rather than that of Maibaum and Fiadeiro [45], which seems overly complex to us; Harper, Sannella and Tarlecki <ref> [41] </ref> have given a definition similar to Meseguer's, but restricted to finite sets of sentences. Meseguer [47] showed how to construct an institution from a system of deduction, by producing a model theory directly from a comma category construction on theories.
Reference: [42] <author> Horst Herrlich and George Strecker. </author> <title> Category Theory. </title> <publisher> Allyn and Bacon, </publisher> <year> 1973. </year>
Reference-contexts: The necessary material may be found in [43], <ref> [42] </ref>, or in a more gentle style, [39]. By way of notation, we use ";" for composition, we let 1 A denote the identity morphism at an object A, and we let jCj denote the class of objects of a category C. <p> For example, Salibra and Scollo [56] and Astesiano and Cerioli [2] describe some other possibilities. 8 2.2 Factorisations and Inclusions In this subsection, we first present the standard notion of a factorisation system (e.g., see <ref> [42] </ref>), which has been used many places in Computing Science (e.g., [26, 62]); then we give our novel axiomatisation for the notion of "inclusion." Definition 6: An image factorisation system for a category C consists of a class M of monics and a class E of epics in C such that
Reference: [43] <author> Saunders Mac Lane. </author> <title> Categories for the Working Mathematician. </title> <publisher> Springer, </publisher> <year> 1971. </year>
Reference-contexts: The necessary material may be found in <ref> [43] </ref>, [42], or in a more gentle style, [39]. By way of notation, we use ";" for composition, we let 1 A denote the identity morphism at an object A, and we let jCj denote the class of objects of a category C. <p> In fact, this paper stays well away from anything that is problematical, and nearly any foundation that has been proposed for category theory will do, including the "hierarchy of universes" discussed e.g., by Mac Lane <ref> [43] </ref> in Section I.6. 4 1.5 Acknowledgements We wish to thank Drs. Jose Fiadeiro, Piet Rodenburg, Don Sannella, and especially Andrzej Tarlecki, for their very useful comments on drafts of this paper. Prof. Virgil Emil Cazanescu carefully read several drafts and helped with some technical corrections. We also thank Prof.
Reference: [44] <author> Thomas Maibaum and Martin Sadler. </author> <title> Axiomatising specification theory. </title> <editor> In Hans-Jorg Kre-owski, editor, </editor> <booktitle> Recent Trends in Data Type Specification, </booktitle> <pages> pages 171-177. </pages> <publisher> Springer, </publisher> <year> 1985. </year> <note> Informatik-Fachberichte 116. </note>
Reference-contexts: In Section 3.4, we discuss "module expressions" and their denotations. It follows from our general discussion of syntax and semantics that we should define notions like "conservative extension" semantically, and then seek syntactic criteria for checking such relationships. Thus, we disagree with the approach of Maibaum, Sadler, and Turski <ref> [44, 68] </ref>, who consider only sentences and deduction. In our view, such an approach cannot adequately formalise the actual situation in (for example) software engineering, which involves models of concrete objects, as well as their descriptions. <p> Proof: This follows from the fact that the forgetful functor T h (I) ! Sign creates both colimits [26] and inclusions. 2 2.4 -Institutions It has been claimed (e.g., in <ref> [44] </ref>) that the standard notion of institution (Definition 1) is not suitable for the foundations of software engineering, because it is based on satisfaction rather than deduction. <p> Therefore the results of this paper apply can also be applied to deduction-based approaches to formal software engineering advocated by Turski and Maibaum [68] and Maibaum and Sadler <ref> [44] </ref>, and later formalised by Fiadeiro and Maibaum using -institutions [45]. <p> In an institution with (arbitrary) conjunctions, the single sentence and the set of sentence forms are equivalent; but equational logic does not have even finite conjunctions. Maibaum and Sadler <ref> [44] </ref> give a version of Craig Interpolation that is stronger in a different way, and Maibaum and Fiadeiro [45] give a precise formulation of it for -institutions without inclusions. <p> model theoretic definition of conservative extension should be given priority, and the fact that the syntactic formulation does not exactly characterise what happens to the models seems to us evidence against taking a purely deductive approach to the foundations of software engineering, as advocated by Maibaum, Turski, Sadler and others <ref> [44, 68] </ref>. However, this does not mean that -institutions should be abandoned; for example, they may be appropriate for deductive databases (as was suggested in [17]), where it seems reasonable 6 to take theories as models, as in the construction of Theorem 35. <p> Therefore M 0 j= 0 e 0 . Thus, M 0 j j= e 0 , i.e., M j= e 0 . Therefore e 0 2 E * = E. 2 Maibaum and Sadler <ref> [44] </ref> gave an example showing that syntactic conservatism is not preserved under pushouts in the equational institution. From this, they concluded that equational logic is defective. However, we conclude instead that syntactic conservatism is not a sufficient condition for true conservatism. <p> We have been particularly interested in the comparison between equational logic and classical first order logic. Some authors have argued that certain properties of equational logic render it unsuitable for use in specification. These include the following: 1. the failure of pushouts to preserve conservative extensions <ref> [44] </ref>; 2. failure of the (middle) distributive law for information hiding over sum [5]; and 3. failure of the Strong Craig Interpolation Property [44, 45]. <p> These include the following: 1. the failure of pushouts to preserve conservative extensions [44]; 2. failure of the (middle) distributive law for information hiding over sum [5]; and 3. failure of the Strong Craig Interpolation Property <ref> [44, 45] </ref>. The first point rests on using a syntactic formulation of conservative extension, rather than the semantic formulation that we have argued correctly describes the behaviour of the models that are the real result of the design process.
Reference: [45] <author> Thomas Maibaum and Jose Fiadeiro with Martin Sadler. </author> <title> Stepwise program development in -institutions. </title> <type> Technical report, </type> <institution> Imperial College, </institution> <year> 1990. </year>
Reference-contexts: To compensate for this lack, a consequence relation is given on sentences. We will use the definition of Fiadeiro and Sernadas [17] as modified by Meseguer [47], rather than that of Maibaum and Fiadeiro <ref> [45] </ref>, which seems overly complex to us; Harper, Sannella and Tarlecki [41] have given a definition similar to Meseguer's, but restricted to finite sets of sentences. <p> Therefore the results of this paper apply can also be applied to deduction-based approaches to formal software engineering advocated by Turski and Maibaum [68] and Maibaum and Sadler [44], and later formalised by Fiadeiro and Maibaum using -institutions <ref> [45] </ref>. <p> In an institution with (arbitrary) conjunctions, the single sentence and the set of sentence forms are equivalent; but equational logic does not have even finite conjunctions. Maibaum and Sadler [44] give a version of Craig Interpolation that is stronger in a different way, and Maibaum and Fiadeiro <ref> [45] </ref> give a precise formulation of it for -institutions without inclusions. <p> These include the following: 1. the failure of pushouts to preserve conservative extensions [44]; 2. failure of the (middle) distributive law for information hiding over sum [5]; and 3. failure of the Strong Craig Interpolation Property <ref> [44, 45] </ref>. The first point rests on using a syntactic formulation of conservative extension, rather than the semantic formulation that we have argued correctly describes the behaviour of the models that are the real result of the design process.
Reference: [46] <author> Mila Majster. </author> <title> Limits of the algebraic specification of abstract data types. </title> <journal> SIGPLAN Notices, </journal> <pages> pages 37-42, </pages> <month> October </month> <year> 1977. </year>
Reference-contexts: This is accomplished by hiding the data representation, i.e., by allowing access to it only through operations exported by its module. Similarly, Majster <ref> [46] </ref> showed that certain -algebras cannot be specified as the initial -algebra of a finite set of -equations, while later work by Bergstra and Tucker (see [6], and a summary of related research in [48]) showed that any recursive -algebra could be specified as the -restriction of an initial 0 -algebra
Reference: [47] <author> Jose Meseguer. </author> <title> General logics. </title> <editor> In H.-D. Ebbinghaus et al., editors, </editor> <booktitle> Proceedings, Logic Colloquium, </booktitle> <year> 1987, </year> <pages> pages 275-329. </pages> <publisher> North-Holland, </publisher> <year> 1989. </year>
Reference-contexts: Thus, we believe that the name "specification logic" is misleading, although the concept is certainly useful. In our opinion, it is more interesting to explore variations of the institution concept that provide deduction, as well as satisfaction; see <ref> [26, 47] </ref> and [34] for further discussion. There are two equivalent ways to give a denotation for a presentation P : the set of all sentences entailed by those in P ; and the class of all models of P . <p> This property, which we call exactness, seems to have first arisen in [60], and is also used in the pioneering work of Tarlecki [64] on abstract algebraic institutions, and of Meseguer <ref> [47] </ref> on categorical logics 2 . 2 Meseguer [47] introduced the term exactness, but used it for the concept that we call semiexactness here. 13 Definition 29: An institution is exact iff the model functor Mod : Sign ! Cat op preserves finite colimits, and is semiexact iff Mod preserves pushouts. <p> This property, which we call exactness, seems to have first arisen in [60], and is also used in the pioneering work of Tarlecki [64] on abstract algebraic institutions, and of Meseguer <ref> [47] </ref> on categorical logics 2 . 2 Meseguer [47] introduced the term exactness, but used it for the concept that we call semiexactness here. 13 Definition 29: An institution is exact iff the model functor Mod : Sign ! Cat op preserves finite colimits, and is semiexact iff Mod preserves pushouts. 2 Although many sorted logics tend to be <p> The following result shows that one can lift exactness from signatures to theories, so that exactness depends only on the behaviour of signatures, and is independent of what happens with sentences. Semiexactness for theories plays an important role in the "categorical logics" described by Meseguer in <ref> [47] </ref>. Here, we show that this follows from the corresponding property for signatures: Proposition 30: If an institution is semiexact, then Mod : T h ! Cat op preserves pushouts. <p> To compensate for this lack, a consequence relation is given on sentences. We will use the definition of Fiadeiro and Sernadas [17] as modified by Meseguer <ref> [47] </ref>, rather than that of Maibaum and Fiadeiro [45], which seems overly complex to us; Harper, Sannella and Tarlecki [41] have given a definition similar to Meseguer's, but restricted to finite sets of sentences. Meseguer [47] showed how to construct an institution from a system of deduction, by producing a model <p> We will use the definition of Fiadeiro and Sernadas [17] as modified by Meseguer <ref> [47] </ref>, rather than that of Maibaum and Fiadeiro [45], which seems overly complex to us; Harper, Sannella and Tarlecki [41] have given a definition similar to Meseguer's, but restricted to finite sets of sentences. Meseguer [47] showed how to construct an institution from a system of deduction, by producing a model theory directly from a comma category construction on theories. <p> Applying U to an institution morphism forgets its model part, and the Satisfaction Condition for institution morphisms helps to prove that this indeed gives a -institution morphism. In <ref> [47] </ref>, Meseguer gives a comma category construction for categories of models of a - institution. It is remarkable that this construction gives exactly the right models for the most common examples. <p> Because P = U (F (P)) and because U interprets ` as j=, the theories of P are exactly the same as the theories of F (P). Also, Meseguer <ref> [47] </ref> showed that F (P) is semiexact.
Reference: [48] <author> Jose Meseguer and Joseph Goguen. Initiality, </author> <title> induction and computability. </title> <editor> In Maurice Nivat and John Reynolds, editors, </editor> <booktitle> Algebraic Methods in Semantics, </booktitle> <pages> pages 459-541. </pages> <address> Cambridge, </address> <year> 1985. </year>
Reference-contexts: Similarly, Majster [46] showed that certain -algebras cannot be specified as the initial -algebra of a finite set of -equations, while later work by Bergstra and Tucker (see [6], and a summary of related research in <ref> [48] </ref>) showed that any recursive -algebra could be specified as the -restriction of an initial 0 -algebra of a finite set of 0 -equations. Thus, there are some interesting -theories that do not have finite -presentations, but that are -restrictions of finitely presented 0 -theories, for some 0 .
Reference: [49] <author> Peter Mosses. </author> <title> Unified algebras and institutions. </title> <type> Technical Report DAIMI PB-274, </type> <institution> Computer Science Department, Aarhus University, </institution> <year> 1989. </year>
Reference-contexts: The basic paper on institutions [26] showed that a number of basic logical systems are institutions, including the many sorted and unsorted versions of first order logic, equational logic, and Horn clause logic, with and without equality. Mosses shows that his unified algebras form an institution in <ref> [49] </ref>. Yukawa [71] gives an institution for the lambda calculus, with -models as models. Nielsen and Platet [50] give an institution for higher order logic with polymorphic types.
Reference: [50] <author> Mogens Nielsen and Udo Platet. </author> <title> Polymorphism in an institutional framework, 1986. </title> <institution> Technical University of Denmark. </institution>
Reference-contexts: Mosses shows that his unified algebras form an institution in [49]. Yukawa [71] gives an institution for the lambda calculus, with -models as models. Nielsen and Platet <ref> [50] </ref> give an institution for higher order logic with polymorphic types. Goguen and Burstall [25] show how to ease checking the Satisfaction Condition through the use of charters and parchments; this technique is applied by Stefaneas [61] to get institutions for second order and modal logics.
Reference: [51] <author> David Parnas. </author> <title> Information distribution aspects of design methodology. </title> <booktitle> Information Processing '72, </booktitle> <volume> 71 </volume> <pages> 339-344, </pages> <year> 1972. </year> <booktitle> Proceedings of 1972 IFIP Congress. </booktitle>
Reference-contexts: one logical system into another; these formalisations are provided by the notions of ruled charter (which gives rise to an institution) and ruled charter morphism; see [34], which builds on work in [25]. 1.1 Some History The earliest work on software modules with which we are familiar is by Parnas <ref> [51, 52, 53] </ref>. Program modules differ from earlier program structuring mechanisms such as subroutines, procedures and blocks, in that they may include a number of procedure and data definitions, may be pa-rameterised, may import other modules, and may hide certain elements. <p> Then module importation is just inclusion of the renamed theories. Thus, our mathematical treatment of theory inclusion already takes account of this practical difficulty. 3.3 Information Hiding Information hiding is an important technique in modern programming, as well as in algebraic specification. Parnas <ref> [51] </ref> emphasised the importance of hiding implementation details within a module, in order to make it possible (for example) to improve a given data representation without having to search through all of a large program for each place where details of the representation are used. <p> Recall that if P is a presentation, then [[P ]] denotes its class of models. From its very beginning in the work of Parnas <ref> [51] </ref> and others, information hiding has been a syntactic notion: it refers to scoping conventions that prevent the use of certain parts of a module that are regarded as internal; the purpose is to make it easier to reuse and maintain software.
Reference: [52] <author> David Parnas. </author> <title> On the criteria to be used in decomposing systems into modules. </title> <journal> Communications of the Association for Computing Machinery, </journal> <volume> 15 </volume> <pages> 1053-1058, </pages> <year> 1972. </year>
Reference-contexts: one logical system into another; these formalisations are provided by the notions of ruled charter (which gives rise to an institution) and ruled charter morphism; see [34], which builds on work in [25]. 1.1 Some History The earliest work on software modules with which we are familiar is by Parnas <ref> [51, 52, 53] </ref>. Program modules differ from earlier program structuring mechanisms such as subroutines, procedures and blocks, in that they may include a number of procedure and data definitions, may be pa-rameterised, may import other modules, and may hide certain elements.
Reference: [53] <author> David Parnas. </author> <title> A technique for software module specification. </title> <journal> Communications of the Association for Computing Machinery, </journal> <volume> 15 </volume> <pages> 330-336, </pages> <year> 1972. </year>
Reference-contexts: one logical system into another; these formalisations are provided by the notions of ruled charter (which gives rise to an institution) and ruled charter morphism; see [34], which builds on work in [25]. 1.1 Some History The earliest work on software modules with which we are familiar is by Parnas <ref> [51, 52, 53] </ref>. Program modules differ from earlier program structuring mechanisms such as subroutines, procedures and blocks, in that they may include a number of procedure and data definitions, may be pa-rameterised, may import other modules, and may hide certain elements.
Reference: [54] <author> Pieter Hendrik Rodenburg. </author> <title> Interpolation in conditional equational logic, </title> <booktitle> 1989. Preprint from Programming Research Group at the University of Amsterdam. </booktitle>
Reference-contexts: We first formulate the Craig Interpolation Property for institutions in a style used by Rodenburg [55] for the equational case. Then we connect the middle distributive law with Craig Interpolation, in the style of [5] and <ref> [54] </ref>. <p> This can be assured by assuming the existence of at least one constant for any sort which is the target of a new operation symbol in 0 . Model expansion is used, for example, by Rodenburg <ref> [54] </ref> in his elegant proof of the Craig Interpolation Property for conditional equational logic. Lemma 56: Any inclusive institution with model expansion is uniform. Proof: Let 0 ,! be an inclusion of signatures.
Reference: [55] <author> Pieter Hendrik Rodenburg. </author> <title> A simple algebraic proof of the equational interpolation theorem. </title> <journal> Algebra Universalis, </journal> <volume> 28 </volume> <pages> 48-51, </pages> <year> 1991. </year>
Reference-contexts: Some that are equivalent for first order logic differ for many other important institutions, and some are so strong that they are not satisfied even by first order logic. We first formulate the Craig Interpolation Property for institutions in a style used by Rodenburg <ref> [55] </ref> for the equational case. Then we connect the middle distributive law with Craig Interpolation, in the style of [5] and [54]. <p> For example, Tarlecki [63] gives a more restrictive definition, involving a pushout of arbitrary signature morphisms. Another difference is that we consider sets of sentences rather than just single sentences. We agree with Rodenburg <ref> [55] </ref> that this is more natural; in particular, note that equational logic satisfies Definition 45, but not the single sentence version given in [63]. In an institution with (arbitrary) conjunctions, the single sentence and the set of sentence forms are equivalent; but equational logic does not have even finite conjunctions.
Reference: [56] <author> Antonino Salibra and Giuseppe Scollo. </author> <note> A soft stairway to institutions, 1991. </note> <institution> University of Pisa. </institution>
Reference-contexts: Goguen and Burstall [25] show how to ease checking the Satisfaction Condition through the use of charters and parchments; this technique is applied by Stefaneas [61] to get institutions for second order and modal logics. Salibra and Scollo <ref> [56] </ref> propose weakening the notion of institution by eliminating the Satisfaction Condition, or replacing "iff" in it by "only if" or "if." However, we feel that too much is lost by these generalisations. <p> For example, the reader can check that many proofs in the present paper require both directions of the Satisfaction Condition. Moreover, we do not know any examples where this weakening is needed. Although <ref> [56] </ref> claims that hidden sorted equational logic is not an institution, but does satisfy half of the Satisfaction Condition, this is only because their version of hidden sorted equational logic has signature morphisms that do not respect all of the appropriate structure; see [23] for a proof that with appropriate signature <p> For example, Salibra and Scollo <ref> [56] </ref> and Astesiano and Cerioli [2] describe some other possibilities. 8 2.2 Factorisations and Inclusions In this subsection, we first present the standard notion of a factorisation system (e.g., see [42]), which has been used many places in Computing Science (e.g., [26, 62]); then we give our novel axiomatisation for the
Reference: [57] <author> Donald Sannella. </author> <title> Semantics, Implementation and Pragmatics of Clear, a Program Specification Language. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, Computer Science Department, </institution> <year> 1982. </year> <note> Report CST-17-82. 36 </note>
Reference-contexts: The present paper gives a new axiomatisation of the notion of inclusion, so that sums are given by least upper bounds of inclusions. A more concrete approach is given by Sannella and Tarlecki in [58]. The desirability of using inclusions for theories first appeared in the thesis of Sannella <ref> [57] </ref>, which gave a set theoretic semantics for Clear in the case of many sorted equational logic.
Reference: [58] <author> Donald Sannella and Andrzej Tarlecki. </author> <title> Extended ML: an institution independent framework for formal program development. </title> <editor> In David Pitt, Samson Abramsky, Axel Poigne, and David Rydeheard, editors, </editor> <booktitle> Proceedings, Summer Workshop on Category Theory and Computer Programming, </booktitle> <pages> pages 364-389. </pages> <publisher> Springer, </publisher> <year> 1986. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 240. </volume>
Reference-contexts: The present paper gives a new axiomatisation of the notion of inclusion, so that sums are given by least upper bounds of inclusions. A more concrete approach is given by Sannella and Tarlecki in <ref> [58] </ref>. The desirability of using inclusions for theories first appeared in the thesis of Sannella [57], which gave a set theoretic semantics for Clear in the case of many sorted equational logic. <p> Much interesting work using institutions has been done by Tarlecki [62, 63, 64, 65] and by Sannella and Tarlecki <ref> [58, 59, 60] </ref>, and we discuss several aspects of this work later. 1.2 Relation with Type Theoretic Approaches In systems like the Calculus of Constructions [12] and the various automath languages [13], theories appear as dependent sequences of declarations, and are structured by various type theoretic devices.
Reference: [59] <author> Donald Sannella and Andrzej Tarlecki. </author> <title> On observational equivalence and algebraic specification. </title> <journal> Journal of Computer and System Science, </journal> <volume> 34 </volume> <pages> 150-178, </pages> <year> 1987. </year> <title> Earlier version in Proceedings, </title> <booktitle> Colloquium on Trees in Algebra and Programming, Lecture Notes in Computer Science, </booktitle> <volume> Volume 185, </volume> <publisher> Springer, </publisher> <year> 1985. </year>
Reference-contexts: Much interesting work using institutions has been done by Tarlecki [62, 63, 64, 65] and by Sannella and Tarlecki <ref> [58, 59, 60] </ref>, and we discuss several aspects of this work later. 1.2 Relation with Type Theoretic Approaches In systems like the Calculus of Constructions [12] and the various automath languages [13], theories appear as dependent sequences of declarations, and are structured by various type theoretic devices.
Reference: [60] <author> Donald Sannella and Andrzej Tarlecki. </author> <title> Specifications in an arbitrary institution. </title> <journal> Information and Control, </journal> <volume> 76 </volume> <pages> 165-210, </pages> <year> 1988. </year> <title> Earlier version in Proceedings, </title> <booktitle> International Symposium on the Semantics of Data Types, Lecture Notes in Computer Science, </booktitle> <volume> Volume 173, </volume> <publisher> Springer, </publisher> <year> 1985. </year>
Reference-contexts: Much interesting work using institutions has been done by Tarlecki [62, 63, 64, 65] and by Sannella and Tarlecki <ref> [58, 59, 60] </ref>, and we discuss several aspects of this work later. 1.2 Relation with Type Theoretic Approaches In systems like the Calculus of Constructions [12] and the various automath languages [13], theories appear as dependent sequences of declarations, and are structured by various type theoretic devices. <p> This property, which we call exactness, seems to have first arisen in <ref> [60] </ref>, and is also used in the pioneering work of Tarlecki [64] on abstract algebraic institutions, and of Meseguer [47] on categorical logics 2 . 2 Meseguer [47] introduced the term exactness, but used it for the concept that we call semiexactness here. 13 Definition 29: An institution is exact iff <p> the pullback of j 1 : Mod ( 1 ; E 1 ) ! Mod ( 0 ; E 0 ) and j 2 : Mod ( 2 ; E 2 ) ! Mod ( 0 ; E 0 ). 2 A proof of the following result was sketched in <ref> [60] </ref>. Corollary 31: If an institution is exact, then Mod : T h ! Cat op preserves finite colimits. Proof: By exactness, Mod maps the initial object of Sign to the terminal (singleton) category.
Reference: [61] <author> Petros Stefaneas. </author> <title> Chartering some institutions, </title> <booktitle> 1993. MSc Thesis, Programming Research Group, </booktitle> <publisher> Oxford University. </publisher>
Reference-contexts: Nielsen and Platet [50] give an institution for higher order logic with polymorphic types. Goguen and Burstall [25] show how to ease checking the Satisfaction Condition through the use of charters and parchments; this technique is applied by Stefaneas <ref> [61] </ref> to get institutions for second order and modal logics. Salibra and Scollo [56] propose weakening the notion of institution by eliminating the Satisfaction Condition, or replacing "iff" in it by "only if" or "if." However, we feel that too much is lost by these generalisations.
Reference: [62] <author> Andrzej Tarlecki. </author> <title> Free constructions in algebraic institutions. In M.P. </title> <editor> Chytil and V. Koubek, editors, </editor> <booktitle> Proceedings, International Symposium on Mathematical Foundations of Computer Science, </booktitle> <pages> pages 526-534. </pages> <publisher> Springer, </publisher> <year> 1984. </year> <note> Lecture Notes in Computer Science, Volume 176; extended version, </note> <institution> University of Edinburgh, Computer Science Department, </institution> <note> Report CSR-149-83, and revised version 'On the existence of Free Models in Abstract Algebraic Institutions', </note> <month> September </month> <year> 1984. </year>
Reference-contexts: The desirability of using inclusions for theories first appeared in the thesis of Sannella [57], which gave a set theoretic semantics for Clear in the case of many sorted equational logic. Much interesting work using institutions has been done by Tarlecki <ref> [62, 63, 64, 65] </ref> and by Sannella and Tarlecki [58, 59, 60], and we discuss several aspects of this work later. 1.2 Relation with Type Theoretic Approaches In systems like the Calculus of Constructions [12] and the various automath languages [13], theories appear as dependent sequences of declarations, and are structured <p> For example, Salibra and Scollo [56] and Astesiano and Cerioli [2] describe some other possibilities. 8 2.2 Factorisations and Inclusions In this subsection, we first present the standard notion of a factorisation system (e.g., see [42]), which has been used many places in Computing Science (e.g., <ref> [26, 62] </ref>); then we give our novel axiomatisation for the notion of "inclusion." Definition 6: An image factorisation system for a category C consists of a class M of monics and a class E of epics in C such that (1) both E and M are closed under composition, (2) all
Reference: [63] <author> Andrzej Tarlecki. </author> <title> Bits and pieces of the theory of institutions. </title> <editor> In David Pitt, Samson Abram-sky, Axel Poigne, and David Rydeheard, editors, </editor> <booktitle> Proceedings, Summer Workshop on Category Theory and Computer Programming, </booktitle> <pages> pages 334-360. </pages> <publisher> Springer, </publisher> <year> 1986. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 240. </volume>
Reference-contexts: The desirability of using inclusions for theories first appeared in the thesis of Sannella [57], which gave a set theoretic semantics for Clear in the case of many sorted equational logic. Much interesting work using institutions has been done by Tarlecki <ref> [62, 63, 64, 65] </ref> and by Sannella and Tarlecki [58, 59, 60], and we discuss several aspects of this work later. 1.2 Relation with Type Theoretic Approaches In systems like the Calculus of Constructions [12] and the various automath languages [13], theories appear as dependent sequences of declarations, and are structured <p> The set I is called the interpolant of E and E 0 . 2 Without axiomatising inclusions, it is not possible to formulate Craig Interpolation in quite such an intuitive way. For example, Tarlecki <ref> [63] </ref> gives a more restrictive definition, involving a pushout of arbitrary signature morphisms. Another difference is that we consider sets of sentences rather than just single sentences. <p> Another difference is that we consider sets of sentences rather than just single sentences. We agree with Rodenburg [55] that this is more natural; in particular, note that equational logic satisfies Definition 45, but not the single sentence version given in <ref> [63] </ref>. In an institution with (arbitrary) conjunctions, the single sentence and the set of sentence forms are equivalent; but equational logic does not have even finite conjunctions.
Reference: [64] <author> Andrzej Tarlecki. </author> <title> On the existence of free models in abstract algebraic institutions. </title> <journal> Theoretical Computer Science, </journal> <volume> 37 </volume> <pages> 269-304, </pages> <year> 1986. </year> <note> Preliminary version, </note> <institution> University of Edinburgh, Computer Science Department, Report CSR-165-84, </institution> <year> 1984. </year>
Reference-contexts: The desirability of using inclusions for theories first appeared in the thesis of Sannella [57], which gave a set theoretic semantics for Clear in the case of many sorted equational logic. Much interesting work using institutions has been done by Tarlecki <ref> [62, 63, 64, 65] </ref> and by Sannella and Tarlecki [58, 59, 60], and we discuss several aspects of this work later. 1.2 Relation with Type Theoretic Approaches In systems like the Calculus of Constructions [12] and the various automath languages [13], theories appear as dependent sequences of declarations, and are structured <p> This property, which we call exactness, seems to have first arisen in [60], and is also used in the pioneering work of Tarlecki <ref> [64] </ref> on abstract algebraic institutions, and of Meseguer [47] on categorical logics 2 . 2 Meseguer [47] introduced the term exactness, but used it for the concept that we call semiexactness here. 13 Definition 29: An institution is exact iff the model functor Mod : Sign ! Cat op preserves finite
Reference: [65] <author> Andrzej Tarlecki. </author> <title> Quasi-varieties in abstract algebraic institutions. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 33(3) </volume> <pages> 333-360, </pages> <year> 1986. </year> <note> Original version, University of Edinburgh, Report CSR-173-84. </note>
Reference-contexts: The desirability of using inclusions for theories first appeared in the thesis of Sannella [57], which gave a set theoretic semantics for Clear in the case of many sorted equational logic. Much interesting work using institutions has been done by Tarlecki <ref> [62, 63, 64, 65] </ref> and by Sannella and Tarlecki [58, 59, 60], and we discuss several aspects of this work later. 1.2 Relation with Type Theoretic Approaches In systems like the Calculus of Constructions [12] and the various automath languages [13], theories appear as dependent sequences of declarations, and are structured
Reference: [66] <author> Andrzej Tarlecki, Rod Burstall, and Joseph Goguen. </author> <title> Some fundamental algebraic tools for the semantics of computation, part 3: Indexed categories. </title> <journal> Theoretical Computer Science, </journal> <volume> 91 </volume> <pages> 239-264, </pages> <year> 1991. </year> <note> Also, Monograph PRG-77, </note> <month> August </month> <year> 1989, </year> <title> Programming Research Group, </title> <publisher> Oxford University. </publisher>
Reference-contexts: Moreover, many such functors have nothing to do with logic. Finally, we note that "specification logics" have earlier been studied under the name of (strict) indexed categories; for example, <ref> [66] </ref> proved a number of basic results about limits, colimits and the Grothendieck "flattening" construction. Thus, we believe that the name "specification logic" is misleading, although the concept is certainly useful.
Reference: [67] <author> Alfred Tarski. </author> <title> The semantic conception of truth. </title> <journal> Philos. Phenomenological Research, </journal> <volume> 4 </volume> <pages> 13-47, </pages> <year> 1944. </year>
Reference-contexts: Institutions are an abstraction of Tarski's classic semantic definition of truth <ref> [67] </ref>, based on a relation of satisfaction between models and sentences. In logic, there is a tradition, called abstract model theory, which abstracts the Tarskian approach to cover other logical systems (e.g., see [4, 3]). <p> Tarski's semantic definition of truth for first order logic <ref> [67] </ref> is a traditional reconciliation of these two views of what is fundamental, based on the notion of satisfaction as a binary relation between models and sentences.
Reference: [68] <author> W ladys law Turski and Thomas Maibaum. </author> <title> The Specification of Computer Programs. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: In Section 3.4, we discuss "module expressions" and their denotations. It follows from our general discussion of syntax and semantics that we should define notions like "conservative extension" semantically, and then seek syntactic criteria for checking such relationships. Thus, we disagree with the approach of Maibaum, Sadler, and Turski <ref> [44, 68] </ref>, who consider only sentences and deduction. In our view, such an approach cannot adequately formalise the actual situation in (for example) software engineering, which involves models of concrete objects, as well as their descriptions. <p> Therefore the results of this paper apply can also be applied to deduction-based approaches to formal software engineering advocated by Turski and Maibaum <ref> [68] </ref> and Maibaum and Sadler [44], and later formalised by Fiadeiro and Maibaum using -institutions [45]. <p> model theoretic definition of conservative extension should be given priority, and the fact that the syntactic formulation does not exactly characterise what happens to the models seems to us evidence against taking a purely deductive approach to the foundations of software engineering, as advocated by Maibaum, Turski, Sadler and others <ref> [44, 68] </ref>. However, this does not mean that -institutions should be abandoned; for example, they may be appropriate for deductive databases (as was suggested in [17]), where it seems reasonable 6 to take theories as models, as in the construction of Theorem 35.
Reference: [69] <author> Paulo Veloso and Sheila Veloso. </author> <title> Some remarks on conservative extensions: A socratic dialogue. </title> <journal> Bulletin of the European Association for Theoretical Computer Science, </journal> <volume> 43 </volume> <pages> 189-198, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: Byers and Pitt [9] give a nice discussion of the problem with some counterexamples, and Veloso and Veloso <ref> [69] </ref> discuss counterexamples from first order logic in more detail.
Reference: [70] <author> Niklaus Wirth. </author> <title> Programming in Modula-2. </title> <publisher> Springer, </publisher> <address> fourth edition, </address> <year> 1988. </year> <month> 37 </month>
Reference-contexts: For example, Clear modules are built up recursively from its combine, enrich, derive, and apply operations. The module expressions of the OBJ language are generated in a similar way. Standard ML [40] and Modula-2 <ref> [70] </ref> also have interesting module systems. In the context of the present section, we may define module expressions to be built up from +, 2, and ?, plus the finite presentations; i.e., they are the elements of the free term algebra 5 .
Reference: [71] <author> Keitaro Yukawa. </author> <title> The untyped lambda calculus as a logical programming language, </title> <booktitle> 1990. </booktitle> <address> City University of New York. </address> <month> 38 </month>
Reference-contexts: The basic paper on institutions [26] showed that a number of basic logical systems are institutions, including the many sorted and unsorted versions of first order logic, equational logic, and Horn clause logic, with and without equality. Mosses shows that his unified algebras form an institution in [49]. Yukawa <ref> [71] </ref> gives an institution for the lambda calculus, with -models as models. Nielsen and Platet [50] give an institution for higher order logic with polymorphic types.
References-found: 71

