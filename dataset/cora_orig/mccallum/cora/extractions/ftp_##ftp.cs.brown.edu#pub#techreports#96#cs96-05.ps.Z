URL: ftp://ftp.cs.brown.edu/pub/techreports/96/cs96-05.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-96-05.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy, </author> <title> "Proof verification and the hardness of approximation problems," </title> <booktitle> Proceedings of the Thirty-third Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <year> (1992), </year> <pages> pp. 14-23. </pages>
Reference-contexts: They called this class MAX SNP. It has been shown that the problems complete for this class do not permit a fully polynomial-time approximation scheme unless P=NP <ref> [1] </ref>. Galbiati, Maffioli, and Morzenti show that Maximum Leaf Spanning Tree is MAX SNP-complete [8], which settles the open question raised in the preliminary version of this paper [18].
Reference: [2] <author> H. L. Bodlaender, </author> <title> "On linear time minor tests and depth first search," </title> <booktitle> Proceedings of Workshop on Algorithms and Data Structures, </booktitle> <year> (1989), </year> <pages> pp. 577-590. </pages>
Reference-contexts: The first such algorithm was due to Fellows and Langston [5]. The running time of their algorithm was improved by Bodlaender <ref> [2] </ref>. Papadimitriou and Yannakakis [21] identified a class of NP-hard optimization problems interre-ducible to one another using approximation-preserving reductions and thus took a step towards classifying NP-complete problems with respect to hardness of approximating them. They called this class MAX SNP.
Reference: [3] <author> G. A. Croes, </author> <title> "A method for solving traveling-salesman problems," </title> <note> Operations Research 6, (Nov.-Dec. </note> <year> 1958), </year> <pages> pp. 791-812. </pages>
Reference-contexts: These algorithms perform a series of local-improvement steps until a local optimum is reached and output a locally optimal solution. This notion of applying local-improvement heuristics to hard optimization problems was around 1958 <ref> [3] </ref>, long before the invention of NP-completeness [14]. It has been applied heuristically to solve a variety of NP-hard problems in combinatorial optimization [20].
Reference: [4] <author> E. W. Dijkstra, </author> <title> "Self-stabilizing systems in spite of distributed control," </title> <journal> Communications of ACM 17, </journal> <month> (Nov. </month> <year> 1974), </year> <pages> pp. 643-644. </pages>
Reference-contexts: This problem finds applications in communication networks, circuit layouts and in other graph-theoretic problems [25]. An interesting application is mentioned in [22]: In <ref> [4] </ref>, E. W. Dijkstra studied the problem of self-stabilizing a set of processors in the presence of distributed control and proposed a solution based on mutual exclusion.
Reference: [5] <author> M. R. Fellows and M. A. Langston, </author> <title> "On well-partial-order theory and its applications to combinatorial problems of VLSI design," </title> <type> Technical Report CS-88-188, </type> <institution> Dept. of Computer Science, Washington State University, </institution> <year> 1988. </year>
Reference-contexts: There has also been work on polynomial-time solutions to the problem of determining if a given graph has a spanning tree with at least k leaves for fixed k. The first such algorithm was due to Fellows and Langston <ref> [5] </ref>. The running time of their algorithm was improved by Bodlaender [2]. Papadimitriou and Yannakakis [21] identified a class of NP-hard optimization problems interre-ducible to one another using approximation-preserving reductions and thus took a step towards classifying NP-complete problems with respect to hardness of approximating them.
Reference: [6] <author> M. Furer and B. Raghavachari, </author> <title> "Approximating the minimum degree spanning tree to within one from the optimal degree," </title> <booktitle> Proceedings of the Third Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> (1992), </year> <pages> pp. 317-324. </pages>
Reference-contexts: This notion of applying local-improvement heuristics to hard optimization problems was around 1958 [3], long before the invention of NP-completeness [14]. It has been applied heuristically to solve a variety of NP-hard problems in combinatorial optimization [20]. A breakthrough in this area was the work of Furer and Raghavachari <ref> [6] </ref>, who applied this technique fl The preliminary version of this paper appeared in Proceedings, Thirtieth Annual Allerton Conference on Communication, Control and Computing (October 1992), pp. 533-542. 1 to the Minimum-Degree Spanning Tree problem. <p> In this paper we are interested in the application of the local search techniques to design efficient approximation algorithms, namely, those that run in polynomial time and provide provably good solutions with values close to that of the optimum. Furer and Raghavachari <ref> [6] </ref> showed such an application of local search to the problem of computing a spanning tree of a given graph whose maximum degree is minimum. This is termed the Minimum Degree Spanning Tree problem and is NP-complete [9].
Reference: [7] <author> M. Furer and B. Raghavachari, </author> <title> "Approximating the minimum-degree Steiner tree to within one of optimal", Journal of Algorithms 17, </title> <booktitle> (1994), p. </booktitle> <pages> 409-423. </pages>
Reference-contexts: This is termed the Minimum Degree Spanning Tree problem and is NP-complete [9]. Furer and Raghavachari show that local optimization can be applied to produce spanning trees and even Steiner trees of nearly minimum degree <ref> [7] </ref>. The maximum degree of the spanning trees obtained by their polynomial-time approximation algorithms is at most one plus the maximum degree of the minimum-degree spanning trees. Unless P=NP, this performance guarantee is the best bound achievable in polynomial time. <p> Unless P=NP, this performance guarantee is the best bound achievable in polynomial time. The result is generalized to work on the Minimum Degree Steiner Tree problem with the same performance guarantee <ref> [7] </ref>. In [24], Ravi, Raghavachari, and Klein generalized their technique to obtain approximation algorithms for a variety of minimum-degree-network-design problems. In this paper we add to the list of problems that are amenable to good approximate solutions by local-search methods.
Reference: [8] <author> G. Galbiati, F. Maffioli and A. Morzenti, </author> <title> "A short note on the approximability of the maximum leaves spanning tree problem," </title> <journal> Information Processing Letters 52, </journal> <year> (1994), </year> <pages> pp. 45-49. </pages>
Reference-contexts: They called this class MAX SNP. It has been shown that the problems complete for this class do not permit a fully polynomial-time approximation scheme unless P=NP [1]. Galbiati, Maffioli, and Morzenti show that Maximum Leaf Spanning Tree is MAX SNP-complete <ref> [8] </ref>, which settles the open question raised in the preliminary version of this paper [18]. Therefore there exists some constant 3 * 0 &gt; 0 such that there is no (1 + * 0 )-approximation for Maximum Leaf Spanning Tree unless P=NP. <p> We present a typical such graph in Figure 12. However, we have no proof that this is the worst possible performance of k-LOTs on any graph. Since Maximum Leaf Spanning Tree is MAX SNP-complete <ref> [8] </ref>, there must be a constant * 0 &gt; 0 such that there is no (1 + * 0 )-approximation for Maximum Leaf Spanning Tree, unless P=NP. It follows that the graph shown in Figure 12 is certainly not the worst example of k-LOTs for some k 3.
Reference: [9] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability: A guide to the theory of NP-completeness, </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> San Francisco (1979). </address>
Reference-contexts: We can use a spanning tree with maximum number of leaves as a heuristic solution (with no guarantees) for the latter problem. Maximum Leaf Spanning Tree is NP-complete <ref> [9] </ref>. In this paper we use the simple technique of local optimization to provide the first approximation algorithms for this problem. These algorithms perform a series of local-improvement steps until a local optimum is reached and output a locally optimal solution. <p> Furer and Raghavachari [6] showed such an application of local search to the problem of computing a spanning tree of a given graph whose maximum degree is minimum. This is termed the Minimum Degree Spanning Tree problem and is NP-complete <ref> [9] </ref>. Furer and Raghavachari show that local optimization can be applied to produce spanning trees and even Steiner trees of nearly minimum degree [7]. The maximum degree of the spanning trees obtained by their polynomial-time approximation algorithms is at most one plus the maximum degree of the minimum-degree spanning trees.
Reference: [10] <author> J. R. Griggs, D. J. Kleitman, and A. Shastri, </author> <title> "Spanning trees with many leaves in cubic graphs," </title> <journal> Journal of Graph Theory 13, </journal> <year> (1989), </year> <pages> pp. 669-695. </pages>
Reference-contexts: Previous work on finding spanning trees with many leaves have focused on graphs with minimum degree at least k for some fixed k 3. For such graphs, good lower bounds on the number of leaves achievable in a spanning tree are derived in <ref> [10, 16, 22, 25] </ref>. These lower bounds are typically proved algorithmically by constructing a spanning tree with the desired number of leaves.
Reference: [11] <author> M. M. </author> <title> Halldorsson "Approximating discrete collections via local improvements," </title> <booktitle> Proceedings of the Sixth Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> (1995), </year> <pages> pp. 160-169. </pages>
Reference-contexts: In [24], Ravi, Raghavachari, and Klein generalized their technique to obtain approximation algorithms for a variety of minimum-degree-network-design problems. In this paper we add to the list of problems that are amenable to good approximate solutions by local-search methods. Very recently, using the technique of local optimization, Halldorsson <ref> [11] </ref> gives the approximation algorithms with the currently best performance ratios for a set of problems, including (a) k-Set Cover, (b) Independent Set, Vertex Cover, k-Set Packing, k-Dimensional Matching and k-Clique Packing for (k + 1)-claw free graphs, (c) Induced -Colorable Subgraph and Vertex Arboricity, which are special cases of Hereditary
Reference: [12] <author> D. S. Johnson, C. H. Papadimitriou, and M. Yannakakis, </author> <title> "How easy is local search?" Journal of Computer and System Sciences 37, </title> <booktitle> (1988), </booktitle> <pages> pp. 79-100. </pages>
Reference-contexts: Some notable examples are its applications to the graph-partitioning problem [15] and the Traveling Salesperson problems [17]. A number of complexity results relating to the paradigm of local optimality and the time complexity of computing a locally optimal solution are presented in <ref> [12, 19, 23, 27] </ref>. In this paper we are interested in the application of the local search techniques to design efficient approximation algorithms, namely, those that run in polynomial time and provide provably good solutions with values close to that of the optimum.
Reference: [13] <author> D. Karger, R. Motwani, and G. D. S. Ramkumar, </author> <title> "On approximating the longest path in a graph," </title> <booktitle> Proceedings of Workshop on Algorithms and Data Structures, </booktitle> <year> (1993), </year> <pages> pp. 421-432. </pages>
Reference-contexts: It is natural to ask whether the techniques similar to ours can be used to approximate this problem as well. We can use recent results on hardness of approximating the longest path problem <ref> [13] </ref> to infer that the Minimum Leaf Spanning Tree problem is hard to approximate. The key observation is that a spanning tree on n nodes with at most ` leaves contains a path with at least 2n=` edges. <p> By our observation above, this yields a path in the graph of size at least n=f . The results of Karger, Motwani and Ramkumar <ref> [13] </ref> imply that f is at least 2 (log 1* n) for any * &gt; 1 unless ~ P=NP, where ~ P stands for the complexity class Deterministic Quasi-polynomial time, or DTIME [n polylog n ]. Acknowledgments We gratefully acknowledge the support, guidance and encouragement of our advisor, Prof.
Reference: [14] <author> R. M. Karp, </author> <title> "Reducibility among combinatorial problems," </title> <editor> in R. E. Miller and J. W. Thatcher (eds.), </editor> <title> Complexity of Computer Computations. </title> <publisher> Plenum Press, </publisher> <address> New York (1972), </address> <pages> pp. 85-103. </pages>
Reference-contexts: These algorithms perform a series of local-improvement steps until a local optimum is reached and output a locally optimal solution. This notion of applying local-improvement heuristics to hard optimization problems was around 1958 [3], long before the invention of NP-completeness <ref> [14] </ref>. It has been applied heuristically to solve a variety of NP-hard problems in combinatorial optimization [20].
Reference: [15] <author> B. W. Kernighan and S. Lin, </author> <title> "An efficient heuristic procedure for partitioning graphs," </title> <address> BSTJ 49, </address> <year> (1970), </year> <pages> pp. 291-308. </pages>
Reference-contexts: Chapter 19 of [20] surveys a few applications of this technique. Some notable examples are its applications to the graph-partitioning problem <ref> [15] </ref> and the Traveling Salesperson problems [17]. A number of complexity results relating to the paradigm of local optimality and the time complexity of computing a locally optimal solution are presented in [12, 19, 23, 27].
Reference: [16] <author> D. J. Kleitman and D. B. West, </author> <title> "Spanning trees with many leaves," </title> <note> SIAM Journal on Discrete Mathematics 4, </note> <month> (Feb. </month> <year> 1991), </year> <pages> pp. 99-106. 25 </pages>
Reference-contexts: Previous work on finding spanning trees with many leaves have focused on graphs with minimum degree at least k for some fixed k 3. For such graphs, good lower bounds on the number of leaves achievable in a spanning tree are derived in <ref> [10, 16, 22, 25] </ref>. These lower bounds are typically proved algorithmically by constructing a spanning tree with the desired number of leaves. <p> The best-known lower bound for the number of leaves achievable in a spanning tree of an n-node graph with minimum degree k is (1 b ln k=k)n where b is any constant exceeding 2.5 and k is sufficiently large <ref> [16] </ref>. The best lower bounds for the cases k = 3 and 4 are n=4 and 2n=5, respectively [16]. There has also been work on polynomial-time solutions to the problem of determining if a given graph has a spanning tree with at least k leaves for fixed k. <p> of leaves achievable in a spanning tree of an n-node graph with minimum degree k is (1 b ln k=k)n where b is any constant exceeding 2.5 and k is sufficiently large <ref> [16] </ref>. The best lower bounds for the cases k = 3 and 4 are n=4 and 2n=5, respectively [16]. There has also been work on polynomial-time solutions to the problem of determining if a given graph has a spanning tree with at least k leaves for fixed k. The first such algorithm was due to Fellows and Langston [5].
Reference: [17] <author> S. Lin and B. W. Kernighan, </author> <title> "An effective heuristic algorithm for the Traveling-Salesman Problem," </title> <note> Operations Research 21, </note> <year> (1973), </year> <pages> pp. 498-516. </pages>
Reference-contexts: Chapter 19 of [20] surveys a few applications of this technique. Some notable examples are its applications to the graph-partitioning problem [15] and the Traveling Salesperson problems <ref> [17] </ref>. A number of complexity results relating to the paradigm of local optimality and the time complexity of computing a locally optimal solution are presented in [12, 19, 23, 27].
Reference: [18] <author> H.-I. Lu and R. Ravi, </author> <title> "The power of local optimization: approximation algorithms for maximum-leaf spanning tree," </title> <booktitle> Proceedings of the Thirtieth Annual Allerton Conference on Communication, Control and Computing, </booktitle> <month> (Oct. </month> <year> 1992), </year> <pages> pp. 533-542. </pages>
Reference-contexts: It has been shown that the problems complete for this class do not permit a fully polynomial-time approximation scheme unless P=NP [1]. Galbiati, Maffioli, and Morzenti show that Maximum Leaf Spanning Tree is MAX SNP-complete [8], which settles the open question raised in the preliminary version of this paper <ref> [18] </ref>. Therefore there exists some constant 3 * 0 &gt; 0 such that there is no (1 + * 0 )-approximation for Maximum Leaf Spanning Tree unless P=NP. What the * 0 is for the Maximum Leaf Spanning Tree problem remains open. 3 Preliminaries Let G be an undirected graph.
Reference: [19] <author> C. H. Papadimitriou, A. A. Schaffer and M. Yannakakis, </author> <title> "On the complexity of local search (Extended Abstract)," </title> <booktitle> Proceedings of the Twenty-second Annual ACM Symposium on the Theory of Computing, </booktitle> <year> (1990), </year> <pages> pp. 438-445. </pages>
Reference-contexts: Some notable examples are its applications to the graph-partitioning problem [15] and the Traveling Salesperson problems [17]. A number of complexity results relating to the paradigm of local optimality and the time complexity of computing a locally optimal solution are presented in <ref> [12, 19, 23, 27] </ref>. In this paper we are interested in the application of the local search techniques to design efficient approximation algorithms, namely, those that run in polynomial time and provide provably good solutions with values close to that of the optimum.
Reference: [20] <author> C. H. Papadimitriou and K. Steiglitz, </author> <title> Combinatorial Optimization: Algorithms and Complexity, </title> <publisher> Prentice-Hall, Inc. </publisher> <year> (1982). </year>
Reference-contexts: This notion of applying local-improvement heuristics to hard optimization problems was around 1958 [3], long before the invention of NP-completeness [14]. It has been applied heuristically to solve a variety of NP-hard problems in combinatorial optimization <ref> [20] </ref>. A breakthrough in this area was the work of Furer and Raghavachari [6], who applied this technique fl The preliminary version of this paper appeared in Proceedings, Thirtieth Annual Allerton Conference on Communication, Control and Computing (October 1992), pp. 533-542. 1 to the Minimum-Degree Spanning Tree problem. <p> In the subsequent sections we prove Theorems 1 and 2. We conclude with some remarks on related problems. 2 2 Related Work The technique of local optimization has been applied to provide heuristic solutions for a variety of hard problems in combinatorial optimization. Chapter 19 of <ref> [20] </ref> surveys a few applications of this technique. Some notable examples are its applications to the graph-partitioning problem [15] and the Traveling Salesperson problems [17].
Reference: [21] <author> C. H. Papadimitriou and M. Yannakakis, </author> <title> "Optimization, Approximation, and Complexity classes," </title> <booktitle> Proceedings of the Twentieth Annual ACM Symposium on the Theory of Computing, (1988) pp. </booktitle> <pages> 229-234. </pages>
Reference-contexts: The first such algorithm was due to Fellows and Langston [5]. The running time of their algorithm was improved by Bodlaender [2]. Papadimitriou and Yannakakis <ref> [21] </ref> identified a class of NP-hard optimization problems interre-ducible to one another using approximation-preserving reductions and thus took a step towards classifying NP-complete problems with respect to hardness of approximating them. They called this class MAX SNP.
Reference: [22] <author> C. Payan, M. Tchuente, and N. H. Xuong, </author> <title> "Arbres avec un nombres maximum de sommets pendants," </title> <booktitle> Discrete Mathematics 49, </booktitle> <year> (1984), </year> <pages> pp. 267-273. </pages>
Reference-contexts: 1 Introduction Given an undirected graph G = (V; E), the Maximum Leaf Spanning Tree problem is to find a spanning tree of G with maximum number of leaves. This problem finds applications in communication networks, circuit layouts and in other graph-theoretic problems [25]. An interesting application is mentioned in <ref> [22] </ref>: In [4], E. W. Dijkstra studied the problem of self-stabilizing a set of processors in the presence of distributed control and proposed a solution based on mutual exclusion. <p> Previous work on finding spanning trees with many leaves have focused on graphs with minimum degree at least k for some fixed k 3. For such graphs, good lower bounds on the number of leaves achievable in a spanning tree are derived in <ref> [10, 16, 22, 25] </ref>. These lower bounds are typically proved algorithmically by constructing a spanning tree with the desired number of leaves.
Reference: [23] <author> A. A. Schaffer and M. Yannakakis, </author> <title> "Simple local search problems that are hard to solve," </title> <journal> SIAM Journal on Computing 20(1), </journal> <year> (1991), </year> <pages> pp. 56-87. </pages>
Reference-contexts: Some notable examples are its applications to the graph-partitioning problem [15] and the Traveling Salesperson problems [17]. A number of complexity results relating to the paradigm of local optimality and the time complexity of computing a locally optimal solution are presented in <ref> [12, 19, 23, 27] </ref>. In this paper we are interested in the application of the local search techniques to design efficient approximation algorithms, namely, those that run in polynomial time and provide provably good solutions with values close to that of the optimum.
Reference: [24] <author> R. Ravi, B. Raghavachari, and P. N. Klein, </author> <title> "Approximation through local optimality: Designing networks with small degree," </title> <booktitle> Proceedings, Twelfth Annual Conference on Foundations of Software Technology and Theoretical Computer Science, </booktitle> <month> (Dec. </month> <year> 1992), </year> <pages> LNCS 652, pp. 279-290. </pages>
Reference-contexts: Unless P=NP, this performance guarantee is the best bound achievable in polynomial time. The result is generalized to work on the Minimum Degree Steiner Tree problem with the same performance guarantee [7]. In <ref> [24] </ref>, Ravi, Raghavachari, and Klein generalized their technique to obtain approximation algorithms for a variety of minimum-degree-network-design problems. In this paper we add to the list of problems that are amenable to good approximate solutions by local-search methods.
Reference: [25] <author> J. A. Storer, </author> <title> "Constructing full spanning trees for cubic graphs," </title> <journal> Information Processing Letters 13, </journal> <year> (1981), </year> <pages> pp. 8-11. </pages>
Reference-contexts: 1 Introduction Given an undirected graph G = (V; E), the Maximum Leaf Spanning Tree problem is to find a spanning tree of G with maximum number of leaves. This problem finds applications in communication networks, circuit layouts and in other graph-theoretic problems <ref> [25] </ref>. An interesting application is mentioned in [22]: In [4], E. W. Dijkstra studied the problem of self-stabilizing a set of processors in the presence of distributed control and proposed a solution based on mutual exclusion. <p> Previous work on finding spanning trees with many leaves have focused on graphs with minimum degree at least k for some fixed k 3. For such graphs, good lower bounds on the number of leaves achievable in a spanning tree are derived in <ref> [10, 16, 22, 25] </ref>. These lower bounds are typically proved algorithmically by constructing a spanning tree with the desired number of leaves.
Reference: [26] <author> M. Tchuente, "Sur l'auto-stabilisation dans un reseau d'odinateurs," R. A. I. R. O. Informa-tique Theorique 15, </author> <year> (1981), </year> <pages> pp. 47-66. </pages>
Reference-contexts: An interesting application is mentioned in [22]: In [4], E. W. Dijkstra studied the problem of self-stabilizing a set of processors in the presence of distributed control and proposed a solution based on mutual exclusion. A variant of this solution <ref> [26] </ref> seeks a spanning tree of a graph such that the product of the degrees of all the nodes in the tree is minimum. We can use a spanning tree with maximum number of leaves as a heuristic solution (with no guarantees) for the latter problem.
Reference: [27] <author> M. Yannakakis, </author> <title> "The analysis of local search problems and their heuristics," </title> <booktitle> STACS, </booktitle> <year> (1990), </year> <pages> pp. 289-311 </pages> . 
Reference-contexts: Some notable examples are its applications to the graph-partitioning problem [15] and the Traveling Salesperson problems [17]. A number of complexity results relating to the paradigm of local optimality and the time complexity of computing a locally optimal solution are presented in <ref> [12, 19, 23, 27] </ref>. In this paper we are interested in the application of the local search techniques to design efficient approximation algorithms, namely, those that run in polynomial time and provide provably good solutions with values close to that of the optimum.
References-found: 27

