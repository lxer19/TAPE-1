URL: http://www.daimi.aau.dk/~thore/Papers/prog-rep.ps.gz
Refering-URL: http://www.daimi.aau.dk/~thore/
Root-URL: http://www.daimi.aau.dk
Keyword: Computational Complexity of Dynamic Problems Thore Husfeldt  
Abstract: Progress Report Abstract. This progress report surveys some of my scientific work on part A of the Ph.D.-programme at the Computer Science Department of the University of Aarhus. I give a survey-like introduction to the field of Complexity Theory to which my results bear relevance. I give a general account of my contributions to the field, including the the Dynamic Transitive Closure Problem for spherical st-graphs, the Dynamic Circuit Value Problem, and some dynamic membership problems for formal languages. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Karl Abrahamson and Michael Fellows, </author> <title> Finite automata, bounded treewidth and well-quasiordering, Graph Structure Theory (Neil Robertson and Paul Seymour, eds.), </title> <journal> Contemporary Mathematics, </journal> <volume> vol. 147, </volume> <publisher> American Mathematical Society, </publisher> <year> 1993, </year> <pages> pp. 539-563. </pages>
Reference-contexts: Almost all algorithms for this class of graphs work in two stages: (i) transform G into T and then (ii) solve the problem using T . A recent result by Abrahamson and Fellows <ref> [1] </ref> formalises the above: it roughly says that for every graph property p of finite index (say, three-colourability) there exists a tree-automaton M such that for all graphs G and every tree-decomposition T of G, the automaton M accepts T if and only if p (G) is true. <p> A property has finite index if the number of equivalence classes is finite. Many properties of bounded treewidth graphs have finite index, most notably (by a result of Courcelle, see <ref> [1] </ref> for a proof) every property that can be expressed as a sentence in monadic second order logic. This yields a strong tool for arguing about the existence of dynamic algorithms for tree-like graphs, see Theorem 10 for an application of this. <p> The proof uses a tree-automata analogue of the Myhill-Nerode Theorem and the fact that j p is a congruence with respect to all composition operators. See <ref> [1] </ref> for the details. 23 3. Dynamic Algorithms for Finite Index Properties 3.1. The Fully Dynamic Problem. Let k by a positive integer and let p be any finite index property of graphs with treewidth k.
Reference: [2] <author> Giuseppe Di Battista and Roberto Tamassia, </author> <title> Algorithms for plane representations of acyclic digraphs, </title> <booktitle> Theoretical Computer Science 61 (1988), </booktitle> <pages> 175-198. </pages>
Reference: [3] <author> Meurig Beynon and John Buckle, </author> <title> On the planar monotone computation of boolean functions, </title> <booktitle> Theoretical Computer Science 53 (1987), </booktitle> <pages> 267-279. </pages>
Reference-contexts: This class has received some attention in the past. Planar circuits have been studied in connection with VLSI design, see Chapter 6 in Dunne's book for an introduction, [10]. McColl [27], and Beynon and Buckle <ref> [3] </ref>, have studied the (quite small) class of functions that can be computed by planar circuits over the monotone base.
Reference: [4] <author> Hans L. Bodlaender, </author> <title> Dynamic algorithms for graphs with treewidth 2, </title> <booktitle> 19th International Workshop on Graph Theoretic Concepts in Computer Science (WG) (Jan van Leeuwen, </booktitle> <editor> ed.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 790, </volume> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1993, </year> <pages> pp. </pages> <month> 112-124. </month> <title> [5] , A linear time algorithm for finding tree-decompositions of small treewidth, </title> <booktitle> Proc. 25th Ann. Symp. on Theory of Computing (STOC), ACM, </booktitle> <year> 1993, </year> <pages> pp. 216-224. </pages>
Reference-contexts: Related Work. The result of this section is not really new; it works for a larger class of graphs or properties than previous results and the proof is much simpler and more rigourous. Both Bodlaender <ref> [4] </ref> and Cohen et al. [6] present dynamic algorithms for graphs of bounded treewidth. The former paper works for a slightly larger class of properties (but a smaller class of graphs), but the proof is difficult and requires some handwaving. In contrast, my proof is very simple and completely formal. <p> The former paper works for a slightly larger class of properties (but a smaller class of graphs), but the proof is difficult and requires some handwaving. In contrast, my proof is very simple and completely formal. Also, <ref> [4] </ref> requires the tree-decomposition to have logarithmic depth, which may 21 complicate the extension to larger k. The construction from [6] only works for smaller classes of problems (called DECC and DLCC). <p> An unpublished manuscript by Frederickson [15] shows how to maintain properties if the update operations modify the parse-tree (as opposed to the graph); this result is a corollary to my characterisation. 1.3. Maintaining the Parse-tree. Both <ref> [4] </ref> and [6] give algorithms to maintain tree-decompositions for small k dynamically; the former works for k = 2, the latter also for k = 3. It is an open problem to dynamically maintain decompositions for larger k in polylogarithmic time. In other models, the problem is well understood. <p> Since it is easy to maintain the parse-tree of a forest, we can infer the following. Slightly weaker results are stated in [6, 15], and a slightly stronger result in <ref> [4] </ref>, all using different proofs. Theorem 8. The Dynamic Membership Problem on forests for every property of finite index can be solved in time O (log n). <p> Theorem 8. The Dynamic Membership Problem on forests for every property of finite index can be solved in time O (log n). Using algorithms that maintain nice tree-decompositions (and hence, parse-trees) from <ref> [4, 6] </ref>, we can instantiate the above result for some larger values of k. Theorem 9. The Dynamic Membership Problem for every property of finite index on graphs of treewidth three can be solved in time O (log 2 n). This result is stronger than [4, 6] in that it works <p> tree-decompositions (and hence, parse-trees) from <ref> [4, 6] </ref>, we can instantiate the above result for some larger values of k. Theorem 9. The Dynamic Membership Problem for every property of finite index on graphs of treewidth three can be solved in time O (log 2 n). This result is stronger than [4, 6] in that it works for a larger class of graphs than the former and a larger class of problems than the latter. <p> This result is stronger than [4, 6] in that it works for a larger class of graphs than the former and a larger class of problems than the latter. In contrast, the algorithm for k = 2 from <ref> [4] </ref> cuts off a logarithmic factor; careful analysis would do the same for us but ruin the point of the exposition (I want a simple proof, not the strongest possible result). 3.2. Other updates. Apart from fully dynamic updates as presented above, other schemes have been considered in the literature. <p> Some handwaving is necessary to use the result from Section IV, since we did not mention labelled graphs there. The sceptical reader may prefer to use Theorem 20 from <ref> [4] </ref>, which does this explicitly. 2.2. Planar circuits of polylog depth. If the strong result above appears too easy to the reader, he or she may be able to appreciate the next, the construction if which is a nightmare compared to the weakness of the result. Theorem 11.
Reference: [6] <author> Robert F. Cohen, S. Sairam, Roberto Tamassia, and Jeffrey S. Vitter, </author> <title> Dynamic algorithms for optimization problems in bounded tree-width graphs, </title> <booktitle> Proceedings of the 3rd Conference on Integer Programming and Combinatorial Optimization, </booktitle> <year> 1993. </year>
Reference-contexts: Related Work. The result of this section is not really new; it works for a larger class of graphs or properties than previous results and the proof is much simpler and more rigourous. Both Bodlaender [4] and Cohen et al. <ref> [6] </ref> present dynamic algorithms for graphs of bounded treewidth. The former paper works for a slightly larger class of properties (but a smaller class of graphs), but the proof is difficult and requires some handwaving. In contrast, my proof is very simple and completely formal. <p> In contrast, my proof is very simple and completely formal. Also, [4] requires the tree-decomposition to have logarithmic depth, which may 21 complicate the extension to larger k. The construction from <ref> [6] </ref> only works for smaller classes of problems (called DECC and DLCC). An unpublished manuscript by Frederickson [15] shows how to maintain properties if the update operations modify the parse-tree (as opposed to the graph); this result is a corollary to my characterisation. 1.3. Maintaining the Parse-tree. Both [4] and [6] <p> <ref> [6] </ref> only works for smaller classes of problems (called DECC and DLCC). An unpublished manuscript by Frederickson [15] shows how to maintain properties if the update operations modify the parse-tree (as opposed to the graph); this result is a corollary to my characterisation. 1.3. Maintaining the Parse-tree. Both [4] and [6] give algorithms to maintain tree-decompositions for small k dynamically; the former works for k = 2, the latter also for k = 3. It is an open problem to dynamically maintain decompositions for larger k in polylogarithmic time. In other models, the problem is well understood. <p> Since it is easy to maintain the parse-tree of a forest, we can infer the following. Slightly weaker results are stated in <ref> [6, 15] </ref>, and a slightly stronger result in [4], all using different proofs. Theorem 8. The Dynamic Membership Problem on forests for every property of finite index can be solved in time O (log n). <p> Theorem 8. The Dynamic Membership Problem on forests for every property of finite index can be solved in time O (log n). Using algorithms that maintain nice tree-decompositions (and hence, parse-trees) from <ref> [4, 6] </ref>, we can instantiate the above result for some larger values of k. Theorem 9. The Dynamic Membership Problem for every property of finite index on graphs of treewidth three can be solved in time O (log 2 n). This result is stronger than [4, 6] in that it works <p> tree-decompositions (and hence, parse-trees) from <ref> [4, 6] </ref>, we can instantiate the above result for some larger values of k. Theorem 9. The Dynamic Membership Problem for every property of finite index on graphs of treewidth three can be solved in time O (log 2 n). This result is stronger than [4, 6] in that it works for a larger class of graphs than the former and a larger class of problems than the latter.
Reference: [7] <author> Robert F. Cohen and Roberto Tamassia, </author> <title> Dynamic expression trees and their applications, </title> <booktitle> Proc. 1st Ann. Symp. on Discrete Algorithms (SODA), ACM-SIAM, </booktitle> <year> 1990, </year> <pages> pp. </pages> <month> 52-61. </month> <title> [8] , Combine and conquer: a general technique for dynamic algorithms, </title> <booktitle> Proc. 1st Ann. European Symp. on Algorithms (ESA) (Thomas Lengauer, </booktitle> <editor> ed.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 726, </volume> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1993, </year> <pages> pp. 97-108. </pages>
Reference-contexts: I see no way to circumvent this restriction, which seems inherent to the dynamic version of the problem. The easy way out would be to let the updates work directly on the input nodes (as done in <ref> [7, 8] </ref>). 1.2. Results in the parallel world. In the parallel case, circuit value problems have been extensively studied almost since the introduction of the notion 25 Authors # proc. <p> We will call it the Dynamic Polymorph Circuit Value Problem, for lack of a better term. 26 1.4. Related dynamic algorithms. When we restrict the topology of the graph to trees the algorithm by Cohen and Tamassia in <ref> [7] </ref> for dynamic expression evaluation can be used to solve the circuit value problem in logarithmic time. See also an extension of this result by the same authors, [8]. Both results I present below do much better. 1.5. Reductions. <p> The only previous result in the field, the seminal construction from <ref> [7] </ref>, is just the last part of the theorem for some of graphs whose tree-width is unity (namely, forests). Some handwaving is necessary to use the result from Section IV, since we did not mention labelled graphs there. <p> The only previously well-studied class that is contained in these is the class of read-once boolean formulae (see [34] for a survey). Proposition 3.1. The class of read-once boolean formulae is in DC. This is not very surprising and also follows from <ref> [7] </ref>. My result gives a much larger class of formulae: there may be arbitrarily many leaves that read the same variable as long as they can be grouped in polylogarithmically many clusters. It may be fruitful to study the class of (what we could call) read-polylog-often boolean formulae.
Reference: [9] <author> Arthur L. Delcher and S. Rao Kosaraju, </author> <title> An NC algorithm for evaluating monotone planar circuits, </title> <type> Unpublished manuscript, </type> <note> cited in [36]. </note>
Reference-contexts: These appear in articles by Goldschlager, Dymond and Cook, and Mayr. More recently, Yang [46], and Delcher and Kosaraju <ref> [9] </ref>, give NC algorithms that do not need the layeredness assumption. The first efficient parallel algorithm for the layered case is due to Ramachandran and Yang [35]; the same authors recently gave an efficient algorithm that does not need the layeredness condition in [36].
Reference: [10] <author> Paul E. Dunne, </author> <title> The complexity of boolean networks, </title> <booktitle> A.P.I.C. Studies in data processing, </booktitle> <volume> vol. 29, </volume> <publisher> Academic Press, </publisher> <year> 1988. </year>
Reference-contexts: This class has received some attention in the past. Planar circuits have been studied in connection with VLSI design, see Chapter 6 in Dunne's book for an introduction, <ref> [10] </ref>. McColl [27], and Beynon and Buckle [3], have studied the (quite small) class of functions that can be computed by planar circuits over the monotone base.
Reference: [11] <author> David Eppstein, Zvi Galil, Giuseppe F. Italiano, and Thomas H. Spencer, </author> <title> Seperator based sparsification for dynamic planar graph algorithms, </title> <booktitle> Proc. 25th Ann. Symp. on Theory of Computing (STOC), </booktitle> <year> 1993, </year> <pages> pp. 208-217. </pages>
Reference: [12] <author> David Eppstein, Giuseppe Italiano, Roberto Tamassia, Robert E. Tarjan, Jeffery West-brook, and Moti Yung, </author> <title> Maintenance of a minimum spanning forest in a dyamic planar graph, </title> <booktitle> Journal of Algorithms 13 (1992), </booktitle> <pages> 33-54. </pages>
Reference: [13] <author> G.S. Frandsen, T. Husfeldt, and P.B. Miltersen, </author> <title> Dyck languages are dynamic, </title> <note> In preparation, </note> <year> 1994. </year>
Reference: [14] <author> G.S. Frandsen, P.B. Miltersen, and S. Skyum, </author> <title> Dynamic word problems, </title> <booktitle> Proc 34th Ann. Symp. on Foundations of Computer Science (FOCS), </booktitle> <year> 1993, </year> <pages> pp. 470-479. </pages>
Reference: [15] <author> Greg N. Frederickson, </author> <title> Draft: Maintaining regular properties dynamically in k-terminal graphs, </title> <type> Unpublished manuscript, </type> <year> 1993. </year> <month> 31 </month>
Reference-contexts: In contrast, my proof is very simple and completely formal. Also, [4] requires the tree-decomposition to have logarithmic depth, which may 21 complicate the extension to larger k. The construction from [6] only works for smaller classes of problems (called DECC and DLCC). An unpublished manuscript by Frederickson <ref> [15] </ref> shows how to maintain properties if the update operations modify the parse-tree (as opposed to the graph); this result is a corollary to my characterisation. 1.3. Maintaining the Parse-tree. <p> Since it is easy to maintain the parse-tree of a forest, we can infer the following. Slightly weaker results are stated in <ref> [6, 15] </ref>, and a slightly stronger result in [4], all using different proofs. Theorem 8. The Dynamic Membership Problem on forests for every property of finite index can be solved in time O (log n). <p> Other updates. Apart from fully dynamic updates as presented above, other schemes have been considered in the literature. An unpublished manuscript by Frederickson <ref> [15] </ref> shows how to use topology trees to maintain finite-state properties on graphs of bounded treewidth if the update operations directly modify the parse-tree (rather than the original graph). This result is immediate from our construction.
Reference: [16] <author> Michael L. Fredman, </author> <title> The complexity of maintaining an array and computing its partial sums, </title> <journal> Journal of the ACM 29 (1982), </journal> <month> 250-260. </month> <title> [17] , Lower bounds for dynamic algorithms, </title> <booktitle> Proc. </booktitle> <editor> 4th SWAT (Erik M. Schmidt and Sven Skyum, eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 824, </volume> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1994, </year> <pages> pp. 167-171. </pages>
Reference: [18] <author> Michael L. Fredman and Michael E. Saks, </author> <title> The cell probe complexity of dynamic data structures, </title> <booktitle> Proc. 21st Ann. Symp. on Theory of Computing (STOC), </booktitle> <year> 1989, </year> <pages> pp. 345-354. </pages>
Reference: [19] <author> L. M. Goldschlager, </author> <title> The monotone and planar circuit value problems are log space complete for P, </title> <journal> SIGACT News 9 (1977), </journal> <volume> no. 2, </volume> <pages> 25-29. </pages>
Reference-contexts: Recent MPCVP algorithms of P-completeness. Ladner [24] shows that the Circuit Value Problem is complete for P under log-space reductions. Goldschlager <ref> [19] </ref> points out that essentially the same reduction also works if the circuit is planar or the base is monotone. So without any of these restrictions, the problem is probably not in NC.
Reference: [20] <author> Thore Husfeldt, </author> <title> Finite automata, bounded treewidth, and dynamic algorithms, Unpublished note, 1994. [21] , Fully dynamic transitive closure in plane dags with one source and one sink, Research Series RS-94-30, </title> <type> BRICS, </type> <institution> Department of Computer Science, University of Aarhus, </institution> <month> September </month> <year> 1994, </year> <title> 26 pp. [22] , On the dynamic circuit value problem, Unpublished note, </title> <year> 1994. </year>
Reference: [23] <author> Giuseppe F. Italiano, Alberto Marchetti Spaccamela, and Umberto Nanni, </author> <title> Dynamic data structures for series parallel digraphs, </title> <booktitle> Proc. First Workshop on Algorithms and Data Structures (WADS) (F. </booktitle> <editor> Dehne, J.-R. Sack, and N. Santoro, eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 382, </volume> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1989, </year> <pages> pp. 352-373. </pages>
Reference: [24] <author> R. E. Ladner, </author> <title> The circuit value problem is log-space complete for P, </title> <journal> SIGACT News 7 (1975), </journal> <volume> no. 1, </volume> <pages> 18-20. </pages>
Reference-contexts: Recent MPCVP algorithms of P-completeness. Ladner <ref> [24] </ref> shows that the Circuit Value Problem is complete for P under log-space reductions. Goldschlager [19] points out that essentially the same reduction also works if the circuit is planar or the base is monotone. So without any of these restrictions, the problem is probably not in NC.
Reference: [25] <author> Jens Lagergren, </author> <title> Efficient parallel algorithms for tree-decompositions and related problems, </title> <booktitle> Proc. 31st Ann. Symp. on Foundations of Computer Science (FOCS), IEEE Computer Society, </booktitle> <year> 1990, </year> <pages> pp. 173-182. </pages>
Reference-contexts: It is an open problem to dynamically maintain decompositions for larger k in polylogarithmic time. In other models, the problem is well understood. In the sequential model, the optimal (linear time) algorithm was found by Bodlaender [5]. Lagergren <ref> [25] </ref> presents a parallel algorithm that runs in time O (log 3 n) with O (n) processors. 2. Preliminaries In this section we give some preliminary definitions and results.
Reference: [26] <author> Richard J. Lipton and Yechezkel Zalcstein, </author> <title> Word problems solvable in logspace, </title> <journal> Journal of the ACM 24 (1977), </journal> <volume> no. 3, </volume> <pages> 522-526. </pages>
Reference: [27] <author> W. F. McColl, </author> <title> On the planar monotone computation of threshold functions, </title> <booktitle> Proc. 2nd Ann. Symp. on Theoretical Aspects of Computer Science (STACS) (K. </booktitle> <editor> Mehlhorn, ed.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 182, </volume> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1985, </year> <pages> pp. 219-230. </pages>
Reference-contexts: This class has received some attention in the past. Planar circuits have been studied in connection with VLSI design, see Chapter 6 in Dunne's book for an introduction, [10]. McColl <ref> [27] </ref>, and Beynon and Buckle [3], have studied the (quite small) class of functions that can be computed by planar circuits over the monotone base.
Reference: [28] <author> K. Mehlhorn, R. Sundar, and C. Uhrig, </author> <title> Maintaining dynamic sequences under equality-tests in polylogarithmic time, </title> <booktitle> Proc. 4th Ann. Symp. on Discrete Algorithms (SODA), ACM-SIAM, </booktitle> <year> 1994, </year> <pages> pp. 213-222. </pages>
Reference: [29] <author> P. B. Miltersen, S. Subramanian, J. S. Vitter, and R. Tamassia, </author> <title> Complexity models for incremental computation, </title> <booktitle> Theoretical Computer Science 130 (1994), </booktitle> <pages> 203-236. </pages>
Reference-contexts: Function (v; f): Change the operation of (non-input) gate v to another function f (from some fixed universe). This variant is clearly harder than the above and fits better into model from <ref> [29] </ref>. We will call it the Dynamic Polymorph Circuit Value Problem, for lack of a better term. 26 1.4. Related dynamic algorithms. <p> Both results I present below do much better. 1.5. Reductions. It comes as no surprise that we cannot hope for DC-algorithms for the general, monotone, or planar problem, because of the P-completeness (the necessary details to translate the argument from the parallel to the dynamic world are provided in <ref> [29] </ref>. Hence we have to anticipate stronger restrictions on the problem to push it down into DC.
Reference: [30] <author> Peter Bro Miltersen, </author> <title> On the cell probe complexity of dynamic problems, Manuscript, to appear. [31] , On-line reevaluation of functions, </title> <type> Tech. Report DAIMI PB-380, </type> <institution> Computer Science Department, Aarhus University, </institution> <year> 1992. </year> <type> [32] , personal communication, </type> <year> 1994. </year> <title> [33] , Lower bounds for union-split-find related problems on random access machines, </title> <booktitle> Proc. 26th Ann. Symp. on Theory of Computing (STOC), ACM, </booktitle> <year> 1994, </year> <pages> pp. 625-634. </pages>
Reference: [34] <author> Ilan Newman, </author> <title> On read-once boolean functions, Boolean Function Complexity (M. </title> <editor> S. Paterson, ed.), </editor> <booktitle> London Mathematical Society Lecture Note Series, </booktitle> <volume> vol. 169, </volume> <publisher> Cambridge University Press, </publisher> <year> 1992, </year> <pages> pp. 25-34. </pages>
Reference-contexts: Classes of boolean networks. The results presented here motivate the study of complexity classes defined by networks introduced in Theorems 10 and 11. The only previously well-studied class that is contained in these is the class of read-once boolean formulae (see <ref> [34] </ref> for a survey). Proposition 3.1. The class of read-once boolean formulae is in DC. This is not very surprising and also follows from [7].
Reference: [35] <author> Vijaya Ramachandran and Honghua Yang, </author> <title> An efficient parallel algorithm for the layered planar monotone circuit value problem, </title> <booktitle> Proc. 1st Ann. European Symp. on Algorithms (ESA) (Thomas Lengauer, </booktitle> <editor> ed.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 726, </volume> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1993, </year> <pages> pp. </pages> <month> 321-332. </month> <title> [36] , An efficient parallel algorithm for the general planar monotone circuit value problem, </title> <booktitle> Proc. 4th Ann. Symp. on Discrete Algorithms (SODA), ACM-SIAM, </booktitle> <year> 1994, </year> <pages> pp. 622-631. </pages>
Reference-contexts: Results in the parallel world. In the parallel case, circuit value problems have been extensively studied almost since the introduction of the notion 25 Authors # proc. Time Restrictions Yang [46] O (n 6 ) O (log 3 n) Inputs on same face Ramachandran & Yang <ref> [35] </ref> O (n) O (log 2 n) Inputs on same face, layered Ramachandran & Yang [36] O (n) O (log 2 n) Inputs on same face Ramachandran & Yang [36] O (n) O (log 6 n) Table V.5. Recent MPCVP algorithms of P-completeness. <p> These appear in articles by Goldschlager, Dymond and Cook, and Mayr. More recently, Yang [46], and Delcher and Kosaraju [9], give NC algorithms that do not need the layeredness assumption. The first efficient parallel algorithm for the layered case is due to Ramachandran and Yang <ref> [35] </ref>; the same authors recently gave an efficient algorithm that does not need the layeredness condition in [36]. Figure V.5 summarises some of the results. Note that none of the existing algorithms can cope with circuits with an arbitrary plane topology.
Reference: [37] <author> Monika Rauch, </author> <title> Improved data structures for fully dynamic biconnectivity, </title> <booktitle> 26th Ann. Symp. on Theory of Computing (STOC), ACM, </booktitle> <year> 1994, </year> <pages> pp. 686-695. </pages>
Reference: [38] <author> Daniel D. Sleator and Robert Endre Tarjan, </author> <title> A data structure for dynamic trees, </title> <journal> Journal of Computer and Systems Sciences 26 (1983), </journal> <pages> 362-391. 32 </pages>
Reference: [39] <author> Howard Straubing, </author> <title> Finite automata, formal logic, and circuit complexity, </title> <booktitle> Progress in Theoretical Computer Science, </booktitle> <volume> vol. 11, </volume> <publisher> Birkhauser, </publisher> <year> 1994. </year>
Reference: [40] <author> Sairam Subramanian, </author> <title> A fully dynamic data structure for reachability in planar digraphs, </title> <booktitle> Proc. 1st Ann. European Symp. on Algorithms (ESA) (Thomas Lengauer, </booktitle> <editor> ed.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 726, </volume> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1993, </year> <pages> pp. 372-383. </pages>
Reference: [41] <author> Roberto Tamassia, </author> <title> A dynamic data structure for planar graph embedding, </title> <booktitle> Proc. 15th International Colloquium on Automata, Languages, and Programming (ICALP) (T. </booktitle> <editor> Lep-isto and A. Salomaa, eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 317, </volume> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1988, </year> <pages> pp. 576-590. </pages>
Reference: [42] <author> Roberto Tamassia and Franco P. Preparata, </author> <title> Dynamic maintenance of planar digraphs, with applications, </title> <booktitle> Algorithmica 5 (1990), </booktitle> <pages> 509-527. </pages>
Reference: [43] <author> Roberto Tamassia and Ioannis G. Tollis, </author> <title> Dynamic reachability in planar digraphs with one source and one sink, </title> <booktitle> Theoretical Computer Science 119 (1993), </booktitle> <pages> 331-343. </pages>
Reference: [44] <author> J. van Leeuwen, </author> <title> Graph algorithms, Algorithms and complexity (J. </title> <editor> van Leeuwen, ed.), </editor> <booktitle> Handbook of theoretical computer science, </booktitle> <volume> vol. </volume> <publisher> A, Elsevier, </publisher> <address> Amsterdam, </address> <year> 1990, </year> <pages> pp. 525-631. </pages>
Reference: [45] <author> B. Xiao, </author> <title> New bounds in the cell probe model, </title> <type> Doctoral dissertation, </type> <institution> University of Cali-fornia, </institution> <address> San Diego, </address> <year> 1992, </year> <note> cited in [17]. </note>
Reference: [46] <author> Honghua Yang, </author> <title> An NC algorithm for the general planar monotone circuit value problem, </title> <booktitle> Proc. 3rdSymp. on Parallel and Distributed Processing, IEEE Computer Society, </booktitle> <year> 1991, </year> <pages> pp. 196-203. </pages>
Reference-contexts: Results in the parallel world. In the parallel case, circuit value problems have been extensively studied almost since the introduction of the notion 25 Authors # proc. Time Restrictions Yang <ref> [46] </ref> O (n 6 ) O (log 3 n) Inputs on same face Ramachandran & Yang [35] O (n) O (log 2 n) Inputs on same face, layered Ramachandran & Yang [36] O (n) O (log 2 n) Inputs on same face Ramachandran & Yang [36] O (n) O (log 6 <p> The first NC algorithms for circuits that are both monotone and planar uses an additional layeredness condition (the circuit must be such that all edges go from level i to level i+1). These appear in articles by Goldschlager, Dymond and Cook, and Mayr. More recently, Yang <ref> [46] </ref>, and Delcher and Kosaraju [9], give NC algorithms that do not need the layeredness assumption. The first efficient parallel algorithm for the layered case is due to Ramachandran and Yang [35]; the same authors recently gave an efficient algorithm that does not need the layeredness condition in [36].
Reference: [47] <author> Andrew Chi-Chih Yao, </author> <title> Should tables be sorted?, </title> <journal> Journal of the ACM 28 (1981), </journal> <volume> no. 3, </volume> <pages> 615-628. </pages>
References-found: 38

