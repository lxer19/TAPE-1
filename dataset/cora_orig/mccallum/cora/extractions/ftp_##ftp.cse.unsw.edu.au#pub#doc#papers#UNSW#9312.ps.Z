URL: ftp://ftp.cse.unsw.edu.au/pub/doc/papers/UNSW/9312.ps.Z
Refering-URL: http://www.cse.unsw.edu.au/school/research/tr.html
Root-URL: http://www.cse.unsw.edu.au
Title: System  
Author: Kevin Elphinstone 
Affiliation: SCHOOL OF COMPUTER SCIENCE AND ENGINEERING THE UNIVERSITY OF NEW SOUTH WALES  
Note: Address Space Management Issues in the Mungi Operating  
Abstract: SCS&E Report 9312 November, 1993 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Mary G. Baker, John H. Hartman, Michael D. Kupfer, Ken W. Shirriff, and John K. Ousterhout. </author> <title> Measurement of a Distributed File System. </title> <booktitle> 13th ACM Symposium on Operating Systems Principles, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: The object size distribution analysed is illustrated in Figure 1. The distribution's source is the actual distribution of 240000 files found on our local network of UNIX workstations. The distribution is very similar to distributions found in other file system studies <ref> [1, 5] </ref>. It can be argued that a typical file distribution may not be a typical object distribution. <p> The lifetime distribution is taken directly from Baker's file system studies <ref> [1] </ref> and is not correlated with the file size distribution. The simulator generates files at a rate of approximately 350 Mbytes per simulated day; a statistic that is similar to published studies. Each file is allocated in the single address space, followed by deallocating them after their lifetime has expired.
Reference: [2] <author> Gernot Heiser, Kevin Elphinstone, Stephen Russell, and Graham R. Hellestrand. </author> <title> A Distributed Single Address-Space Operating System Supporting Persistence. </title> <type> Technical Report 9302, </type> <institution> School of Computer Science and Engineering, The University of New South Wales, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Mungi is a single address space operating system supporting persistence <ref> [2, 6] </ref>. It features a single 64 bit namespace encompassing all data contained in the system. Mungi does not have a traditional file system; instead, Mungi relies on distributed persistent shared memory for storage. <p> is unlikely that it would be significantly better than a multilevel tree if the mappings are as densely populated as they are using first fit policy in the above situation. 5 Page Table Indexing Mungi divides the address space up into partitions managed by the different machines on the network <ref> [2] </ref>. The upper nine bits 1 of an address is used to indicate the address space partition an object was allocated from, and is termed the address-space partition identifier (API). This leaves 36000 terabytes of address space per partition.
Reference: [3] <author> Frans Alexander Henskens. </author> <title> A Capability-Based Persistent Distributed Shared Memory. </title> <type> Technical Report 462, </type> <institution> Basser Department of Computer Science, University of Sydney, Australia, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: With a 64 bit address space this policy would be reduced to a policy of effectively never reusing address space as the persistent system MONADS <ref> [3] </ref> does. Never reusing the address space will effect the amount of address space spanned by the amount of data in it, and hence will effect the population density of the page table and size.
Reference: [4] <author> Donald Knuth. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> volume 1. </volume> <publisher> Addison-Wesley, </publisher> <year> 1968. </year>
Reference-contexts: System restart results in the same address space layout that 3 existed at system shutdown. Minimisation of external fragmentation can only achieved by allocation policy, not by post allocation processing. Knuth <ref> [4, pages 445-451] </ref> derived the Fifty Percent Rule which attempts to predict the ratio of the equilibrium number of free blocks in relation to the equilibrium number allocated blocks (p). <p> The simulator generates files at a rate of approximately 350 Mbytes per simulated day; a statistic that is similar to published studies. Each file is allocated in the single address space, followed by deallocating them after their lifetime has expired. Files are allocated using the first fit algorithm <ref> [4, pages 437-438] </ref> and various page sizes are used to assess their effect on p f and external fragmentation. The simulation was run for a simulated month. The following variables were sampled at intervals of 10 minutes simulated time. Free blocks The number of free blocks of memory.
Reference: [5] <author> John K. Ousterhout, Herve Da Costa, David Harrison, John A. Kunze, and James G. Thompson. </author> <title> A Trace-Driven Analysis of the UNIX 4.2 BSD File System. </title> <booktitle> 10th ACM Symposium on Operating Systems Principles, </booktitle> <year> 1985. </year>
Reference-contexts: The object size distribution analysed is illustrated in Figure 1. The distribution's source is the actual distribution of 240000 files found on our local network of UNIX workstations. The distribution is very similar to distributions found in other file system studies <ref> [1, 5] </ref>. It can be argued that a typical file distribution may not be a typical object distribution.
Reference: [6] <author> Stephen Russell, Alan Skea, Kevin Elphinstone, Gernot Heiser, Keith Burston, Ian Gorton, and Graham Hellestrand. </author> <title> Distribution + Persistence = Global Virtual Memory. </title> <booktitle> In Int'l Workshop on Object-Orientation in Operating Systems, </booktitle> <volume> volume 2, </volume> <pages> pages 96-99, </pages> <address> Dourdan, France, </address> <year> 1992. </year> <journal> IEEE. </journal> <volume> 12 </volume>
Reference-contexts: 1 Introduction Mungi is a single address space operating system supporting persistence <ref> [2, 6] </ref>. It features a single 64 bit namespace encompassing all data contained in the system. Mungi does not have a traditional file system; instead, Mungi relies on distributed persistent shared memory for storage.
References-found: 6

