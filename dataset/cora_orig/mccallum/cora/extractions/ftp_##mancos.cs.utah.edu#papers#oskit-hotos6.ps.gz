URL: ftp://mancos.cs.utah.edu/papers/oskit-hotos6.ps.gz
Refering-URL: http://www.cs.utah.edu/~baford/pub.html
Root-URL: 
Email: oskit@cs.utah.edu  
Title: The Flux OS Toolkit: Reusable Components for OS Implementation  
Author: Bryan Ford Kevin Van Maren Jay Lepreau Stephen Clawson Bart Robinson Jeff Turner 
Note: This research was supportedin part by the DefenseAdvancedResearch Projects Agency, monitored by the Department of the Army under contract number DABT63-94-C-0058, and Rome Laboratory, Air Force Material Command, USAF, under agreementnumber F30602-96-2-0269. The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes notwithstanding any copyright annotation hereon. U.S. Department of Defense Copyright 1997 IEEE. Personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works must be obtained from the IEEE.  
Web: http://www.cs.utah.edu/projects/flux/  
Address: Salt Lake City, UT 84112  
Affiliation: Department of Computer Science, University of Utah  
Abstract: To an unappreciated degree, research both in operating systems and their programming languages has been severely hampered by the lack of cleanly reusable code providing mundane low-level OS infrastructure such as bootstrap code and device drivers. The Flux OS Toolkit solves this problem by providing a set of clean, well-documented components. These components can be used as basic building blocks both for operating systems and for booting language run-time systems directly on the hardware. The toolkit's implementation itself embodies reuse techniques by incorporating components such as device drivers, file systems, and networking code, unchanged, from other sources. We believe the kit also makes feasible the production of highly assured embedded and operating systems: by enabling reuse of low-level code, the high cost of detailed verification of that code can be amortized over many systems for critical environments. The OS toolkit is already heavily used in several different OS and programming language projects, and has already catalyzed research and development that would otherwise never have been attempted. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. J. Ballesteros and L. L. Fernandez. </author> <title> The Network Hardware is the Operating System. </title> <booktitle> In Proc. of the Sixth Workshop on Hot Topics in Operating Systems, </booktitle> <address> Cape Cod, MA, </address> <month> May </month> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Here at Utah, we have also ported two other languages to the OS Kit, Java and Smalltalk. The Systems and Communications Group at the University of Carlos III in Spain has employed the OS Kit in their distributed microkernel-based operating system project, named Off <ref> [1] </ref>.
Reference: [2] <author> G. D. Benson and R. A. Olsson. </author> <title> A Portable Run-Time System for the SR Concurrent Programming Language. </title> <booktitle> In Proc. of the Workshopon Runtime Systems for Parallel Programming, </booktitle> <address> Geneva, Switzerland, </address> <month> April </month> <year> 1997. </year> <booktitle> Held in conjuction with the 11th International Parallel Processing Symposium (IPPS'97). </booktitle>
Reference-contexts: This is a goal the ML community has desired for years but until now the low-level aspects have presented too much of a barrier. The SR project at U.C. Davis <ref> [2] </ref> is exploring using the OS Kit to run SR directly on the hardware. Here at Utah, we have also ported two other languages to the OS Kit, Java and Smalltalk.
Reference: [3] <author> B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. E. Fi-uczynski, D. Becker, C. Chambers, and S. Eggers. </author> <title> Extensibility, Safety, and Performance in the SPIN Operating System. </title> <booktitle> In Proc. of the 15th ACM Symp. on Operating Systems Principles, </booktitle> <pages> pages 267-284, </pages> <address> Copper Mountain, CO, </address> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Mach used BSD, Linux [13], and vendors' device drivers; SPIN <ref> [3] </ref> uses device drivers from FreeBSD; and VINO [17] takes its device drivers, bootstrap code, and low-level support for virtual memory from NetBSD. <p> This is the purpose of the Flux OS Toolkit. Recent research projects such as Exokernel [6], SPIN <ref> [3] </ref>, and VINO [17], focus on creating extensible systems which allow applications to modify the behavior of the core OS to suit their particular needs.
Reference: [4] <author> E. Boleyn. </author> <title> GRUB GRand Unified Bootloader. </title> <note> http://- www.uruk.org/grub/, 1996. </note>
Reference-contexts: We then incorporated all the necessary support code into the OS Kit to make it trivial to create MultiBoot-compliant OS kernels, and included a set of simple MultiBoot-compliant boot loaders. A more complete and powerful MultiBoot-compatible boot loader, GRUB <ref> [4] </ref>, is also available as a separate package.
Reference: [5] <author> R. Campbell, N. Islam, P. Madany, and D. Raila. </author> <title> Designing and Implementing Choices: An Object-Oriented System in C++. </title> <journal> Communications of the ACM, </journal> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: Other approaches involved creating an operating system built from a complex object-oriented framework, such as in the Choices <ref> [5] </ref> or Taligent [15] work. Although such efforts have been influential in other OS projects, such as Spring, they do not appear to have been widely used. In contrast, the OS Kit exhibits a less ambitious, but more pragmatic, and we believe more effective, approach to software design and re-use.
Reference: [6] <author> D. R. Engler, M. F. Kaashoek, and J. O'Toole Jr. Exokernel: </author> <title> An Operating System Architecture for Application-Level Resource Management. </title> <booktitle> In Proc. of the 15th ACM Symp. on Operating Systems Principles, </booktitle> <pages> pages 251-266, </pages> <address> Copper Mountain, CO, </address> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: This is the purpose of the Flux OS Toolkit. Recent research projects such as Exokernel <ref> [6] </ref>, SPIN [3], and VINO [17], focus on creating extensible systems which allow applications to modify the behavior of the core OS to suit their particular needs.
Reference: [7] <author> B. Ford. MOSS: </author> <title> A DOS extender based on the Flux OS Toolkit. </title> <note> Available as http://www.cs.utah.edu/projects/flux/- moss/, </note> <year> 1996. </year>
Reference-contexts: We used an early version of the OS Kit in MOSS <ref> [7] </ref>, a DOS extender (a small OS kernel that runs on MS-DOS and creates a more complete process environment for 32-bit applications), which is being used in commercial products.
Reference: [8] <author> B. Ford and E. S. Boleyn. </author> <title> MultiBoot Standard. </title> <note> Available as ftp://flux.cs.utah.edu/flux/multiboot, </note> <year> 1996. </year>
Reference-contexts: To solve this problem, we worked with key people in various other OS projects to produce the MultiBoot standard <ref> [8] </ref> for x86 PCs, which is a standard interface between a boot loader and an OS so that any compliant boot loader can load any compliant OS.
Reference: [9] <author> B. </author> <title> Ford and Flux Project Members. The Flux Operating System Toolkit. </title> <institution> University of Utah. </institution> <note> Postscript and HTML available under http://www.cs.utah.edu/projects/flux/oskit/html/, 1996. </note>
Reference-contexts: We have found this ability to prototype radical designs in a real kernel to be crucial to choosing designs that are worth fully developing. 2 Toolkit design The Flux OS Toolkit is a framework and set of modularized library code, together with extensive documentation <ref> [9] </ref> for the construction of operating system kernels, servers, and other core OS functionality. The goal is for developers to take the OS Kit and immediately have a starting point for investigating real OS issues such as scheduling, VM, IPC, file systems, or security.
Reference: [10] <author> B. Ford, M. Hibler, J. Lepreau, P. Tullmann, G. Back, and S. Clawson. </author> <title> Microkernels Meet Recursive Virtual Machines. </title> <booktitle> In Proc. of the Second Symp. on Operating Systems Design and Implementation, </booktitle> <pages> pages 137-151, </pages> <address> Seattle, WA, Oct. 1996. </address> <publisher> USENIX Assoc. </publisher>
Reference-contexts: Because we were finding our version of Mach [11] too constraining a vehicle in which to prototype new ideas, we developed a series of experimental kernels to try out ideas before designing our Fluke kernel <ref> [10] </ref>. In doing so, we gradually modularized and formalized the libraries of support code we developed, proto-typing the OS Kit along the way. These experimental kernels embodied radical changes to fundamental aspects of OS structure which would have been impossible to explore in an existing operating system. <p> All line counts were taken after filtering out comments, blank lines, preprocessor directives, and punctuation-only lines (e.g., lines containing only a brace); the result typically runs 1=4 to 1=2 the size of the unfiltered code. 5.1 Existing uses of the OS Toolkit Our Fluke microkernel <ref> [10] </ref> puts almost all of the OS Kit to use, and in fact over half of the Fluke kernel is OS Kit code.
Reference: [11] <author> B. Ford and J. Lepreau. </author> <title> Evolving Mach 3.0 to a Migrating Thread Model. </title> <booktitle> In Proc. of the Winter 1994 USENIX Conf., </booktitle> <pages> pages 97-114, </pages> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: However, starting in 1995, that approach gradually evolved, resulting in what became the Flux OS Toolkit, or OS Kit. Because we were finding our version of Mach <ref> [11] </ref> too constraining a vehicle in which to prototype new ideas, we developed a series of experimental kernels to try out ideas before designing our Fluke kernel [10]. In doing so, we gradually modularized and formalized the libraries of support code we developed, proto-typing the OS Kit along the way.
Reference: [12] <author> R. P. Gabriel. </author> <title> Lisp: Good News, Bad News, How to Win Big. </title> <journal> AI Expert, </journal> <pages> pages 31-39, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: In contrast, the OS Kit exhibits a less ambitious, but more pragmatic, and we believe more effective, approach to software design and re-use. Gabriel distinguished two approaches to software design and implementation, sardonically labeling them The Right Thing and Worse is Better <ref> [12] </ref>. The former is characterized by interface perfection at the cost of implementation complexity (e.g., Lisp with CLOS), whereas the latter sacrifices interface elegance and completeness for simplicity of implementation (e.g., Unix and C).
Reference: [13] <author> S. Goel and D. Duchamp. </author> <title> Linux Device Driver Emulation in Mach. </title> <booktitle> In Proc. of the Annual USENIX 1996 Technical Conf., </booktitle> <pages> pages 65-73, </pages> <address> San Diego, CA, </address> <month> Jan. </month> <year> 1996. </year>
Reference-contexts: Mach used BSD, Linux <ref> [13] </ref>, and vendors' device drivers; SPIN [3] uses device drivers from FreeBSD; and VINO [17] takes its device drivers, bootstrap code, and low-level support for virtual memory from NetBSD. <p> We generalized the approach taken by Goel at Columbia and Utah, which allowed unchanged Linux device drivers to be used by the Mach 3.0 kernel <ref> [13] </ref>.
Reference: [14] <author> Microsoft Corporation and Digital Equipment Corporation. </author> <title> Component Object Model Specification, </title> <address> Oct. </address> <year> 1995. </year> <pages> 274 pp. </pages>
Reference-contexts: The glue code surrounding the imported code hides the details of the original OS environment from the developer and in its place presents clean, simple, well-defined device interfaces. These device interfaces conform to a small subset of the Component Object Model <ref> [14] </ref>, namely the interface querying and reference counting mechanisms, which allow them to be cleanly extended and updated over time and facilitate future binary-level compatibility.
Reference: [15] <author> W. Myers. Taligent's CommonPoint: </author> <title> The Promise of Objects. </title> <journal> Computer, </journal> <volume> 28(3) </volume> <pages> 78-83, </pages> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: Other approaches involved creating an operating system built from a complex object-oriented framework, such as in the Choices [5] or Taligent <ref> [15] </ref> work. Although such efforts have been influential in other OS projects, such as Spring, they do not appear to have been widely used. In contrast, the OS Kit exhibits a less ambitious, but more pragmatic, and we believe more effective, approach to software design and re-use.
Reference: [16] <author> O. Shivers. </author> <title> Automatic Management of Operating System Resources. </title> <booktitle> In Proceedings of the Second ACM SIGPLAN International Conference on Functional Programming (ICFP '97), </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: Some of the OS Kit's external users have informed us of their efforts. At MIT, Olin Shivers et al. are investigating advanced-language operating systems and use the OS Kit to run SML/NJ on the bare hardware as the OS <ref> [16] </ref>. This is a goal the ML community has desired for years but until now the low-level aspects have presented too much of a barrier. The SR project at U.C. Davis [2] is exploring using the OS Kit to run SR directly on the hardware.
Reference: [17] <author> C. Small and M. Seltzer. VINO: </author> <title> An Integrated Platform for Operating System and Database Research. </title> <type> Technical Report TR-30-94, </type> <institution> Harvard University, </institution> <year> 1994. </year>
Reference-contexts: Mach used BSD, Linux [13], and vendors' device drivers; SPIN [3] uses device drivers from FreeBSD; and VINO <ref> [17] </ref> takes its device drivers, bootstrap code, and low-level support for virtual memory from NetBSD. While this approach saves time, the developer must manually examine and dissect the old OS; it would save even more time if the developer could simply obtain a set of 1 clearly-documented components. <p> This is the purpose of the Flux OS Toolkit. Recent research projects such as Exokernel [6], SPIN [3], and VINO <ref> [17] </ref>, focus on creating extensible systems which allow applications to modify the behavior of the core OS to suit their particular needs. However, these systems still define a particular, fixed set of core functionality and a set of policies by which the core can be used and extended.
Reference: [18] <author> P. Tullmann, J. Lepreau, B. Ford, and M. Hibler. </author> <title> User-level Checkpointing Through Exportable Kernel State. </title> <booktitle> In Proc. Fifth International Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pages 85-88, </pages> <address> Seattle, WA, </address> <month> Oct. </month> <year> 1996. </year> <journal> IEEE. </journal> <volume> 6 </volume>
Reference-contexts: One of these kernels explored implementations of high performance kernel-mediated capabilities and IPC paths, and took about 2 weeks to develop from scratch; the other explored interruptibilityof kernel operations at arbitrary points (finding a more final expression in Fluke's atomic operations <ref> [18] </ref>), which took only a month.
References-found: 18

