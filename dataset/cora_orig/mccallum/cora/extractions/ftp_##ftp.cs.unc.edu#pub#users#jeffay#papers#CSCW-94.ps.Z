URL: ftp://ftp.cs.unc.edu/pub/users/jeffay/papers/CSCW-94.ps.Z
Refering-URL: http://www.cs.unc.edu/Research/dirt/cscw.html
Root-URL: http://www.cs.unc.edu
Email: -menges,jeffay-@cs.unc.edu  
Title: On the Partitioning of Function in Distributed Synchronous Collaboration Systems  
Author: John Menges Kevin Jeffay 
Address: Chapel Hill, NC 27599  
Affiliation: Department of Computer Science University of North Carolina  
Abstract: A large number of experimental (and a few commercial) distributed synchronous collaboration support systems have been developed to date for the UNIX 1 /X environment. These systems typically fall into one of two categories: toolkits for collaborative application development, and shared window systems. Collaboration toolkits usually focus on supporting the development of collaboration-aware applications, and shared window systems are typically intended to make existing single-user (collaboration-unaware) applications available to multiple users concurrently. The two types of systems are usually developed and used independently; that is, integrated systems with the capabilities of both types of systems are rare. This field of research is now mature enough that we can identify the major components of such systems and the functions they typically provide. In this paper we analyze a typical partitioning of function among the usual set of components, and suggest changes that can be made to this partitioning to improve the characteristics of future collaborative support systems. In the process, we find that our redistribution of function makes it easier to develop integrated systems supporting both collaboration-aware and collaboration-unaware applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. M. Abdel-Wahab and Mark A. Feit. XTV: </author> <title> A Framework for Sharing X Window Clients in Remote Synchronous Collaboration. </title> <booktitle> In Proceedings of Tricomm 91 , April 1991. </booktitle>
Reference-contexts: 1. Introduction Support for distributed synchronous collaboration typically comes in one of two forms: that of a collaboration toolkit supporting the development of collaboration-aware applications [3, 4, 10, 11], or that of a shared window system that makes it possible for existing single-user applications to be shared <ref> [1, 2, 5, 6, 9] </ref>. Many experimental support systems of these types have been developed to date, and though they differ widely in their capabilities and designs, at a high level of abstraction the components of these support systems and the functions performed by each are fairly consistent.
Reference: [2] <author> John Eric Baldeschweiler, Thomas Gutekunst, and Bernhard Plattner. </author> <title> A survey of X Protocol Multiplexors. </title> <booktitle> ACM SIGCOMM Computer Communication Review , pages 16 - 24, </booktitle> <month> April </month> <year> 1993. </year>
Reference-contexts: 1. Introduction Support for distributed synchronous collaboration typically comes in one of two forms: that of a collaboration toolkit supporting the development of collaboration-aware applications [3, 4, 10, 11], or that of a shared window system that makes it possible for existing single-user applications to be shared <ref> [1, 2, 5, 6, 9] </ref>. Many experimental support systems of these types have been developed to date, and though they differ widely in their capabilities and designs, at a high level of abstraction the components of these support systems and the functions performed by each are fairly consistent.
Reference: [3] <author> Terrence Crowley, Paul Milazzo, Ellie Baker, Harry Forsdick, and Raymond Tomlinson. MMConf: </author> <title> An Infrastructure for Building Shared Multimedia Applications. </title> <booktitle> In CSCW 90 Proceedings, </booktitle> <year> 1990. </year>
Reference-contexts: 1. Introduction Support for distributed synchronous collaboration typically comes in one of two forms: that of a collaboration toolkit supporting the development of collaboration-aware applications <ref> [3, 4, 10, 11] </ref>, or that of a shared window system that makes it possible for existing single-user applications to be shared [1, 2, 5, 6, 9].
Reference: [4] <author> Prasun Dewan and Rajiv Choudhary. </author> <title> Flexible Interface Coupling in a Collaborative System. </title> <booktitle> In Proceedings ACM CHI 91, </booktitle> <pages> pages 41-48, </pages> <address> New Orleans, LA, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: 1. Introduction Support for distributed synchronous collaboration typically comes in one of two forms: that of a collaboration toolkit supporting the development of collaboration-aware applications <ref> [3, 4, 10, 11] </ref>, or that of a shared window system that makes it possible for existing single-user applications to be shared [1, 2, 5, 6, 9].
Reference: [5] <author> Daniel Garfinkel, Bruce C. Welti, and Thomas W. Yip. </author> <title> HP Shared X: A Tool for Real-Time Collaboration. </title> <journal> Hewlett-Packard Journal, </journal> <volume> 45(2) </volume> <pages> 23-36, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: 1. Introduction Support for distributed synchronous collaboration typically comes in one of two forms: that of a collaboration toolkit supporting the development of collaboration-aware applications [3, 4, 10, 11], or that of a shared window system that makes it possible for existing single-user applications to be shared <ref> [1, 2, 5, 6, 9] </ref>. Many experimental support systems of these types have been developed to date, and though they differ widely in their capabilities and designs, at a high level of abstraction the components of these support systems and the functions performed by each are fairly consistent.
Reference: [6] <author> J. Chris Lauwers. </author> <title> Collaboration Transparency in Desktop Teleconferencing Environments. </title> <type> Technical Report CSL-TR-90-435, </type> <institution> Computer Systems Laboratory, Departments of Electrical Engineering and Computer Science, Stanford University, Stanford, </institution> <address> California 94305-4055, </address> <month> July </month> <year> 1990. </year>
Reference-contexts: 1. Introduction Support for distributed synchronous collaboration typically comes in one of two forms: that of a collaboration toolkit supporting the development of collaboration-aware applications [3, 4, 10, 11], or that of a shared window system that makes it possible for existing single-user applications to be shared <ref> [1, 2, 5, 6, 9] </ref>. Many experimental support systems of these types have been developed to date, and though they differ widely in their capabilities and designs, at a high level of abstraction the components of these support systems and the functions performed by each are fairly consistent.
Reference: [7] <author> John Menges and Kevin Jeffay. </author> <title> Inverting X: An Architecture for a Shared Distributed Window System, </title> <booktitle> In Proceedings, Third Workshop on Enabling Technologies: Infrastructure for Collaborative Enterprises, </booktitle> <address> Morgantown, WV, April 1994, </address> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 53-64. </pages>
Reference-contexts: In addition, these modifications to the typical partitioning will facilitate the integration of collaboration toolkits and shared window systems. Window System Enhancements <ref> [7] </ref>. Many of the common low-level functions of collaboration toolkits can and should be subsumed by the window system. In particular, we propose that windows should become first class sharable objects similar to files in a distributed file system. <p> In any case, new window systems must also be responsible for maintaining backward compatibility.) Client Device Drivers <ref> [7] </ref>. Current window system servers (e.g., X) directly drive I/O devices such as bitmapped displays, keyboards, and mice. We propose that these functions should be moved to a separate device driver application which is a client of a window server.
Reference: [8] <author> John K. Ousterhout. </author> <title> An Introduction to Tcl and Tk. </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: We propose that there should be two levels of binding. The first should be performed by the window system, and should consist of a binding between user input and a generic representation of the application operations exported by a particular application. A string-oriented scripting language such as Tcl <ref> [8] </ref> would make a good language for representing application operations generically. The second binding, between these generic operation representations and the applications programming paradigm/language should be performed by the toolkit itself.
Reference: [9] <author> J. F. Patterson. </author> <title> The Good, the Bad, and the Ugly of Window Sharing in X. </title> <booktitle> In Proceedings of the Fourth Annual X Technical Conference, </booktitle> <month> January </month> <year> 1990. </year>
Reference-contexts: 1. Introduction Support for distributed synchronous collaboration typically comes in one of two forms: that of a collaboration toolkit supporting the development of collaboration-aware applications [3, 4, 10, 11], or that of a shared window system that makes it possible for existing single-user applications to be shared <ref> [1, 2, 5, 6, 9] </ref>. Many experimental support systems of these types have been developed to date, and though they differ widely in their capabilities and designs, at a high level of abstraction the components of these support systems and the functions performed by each are fairly consistent.
Reference: [10] <author> John F. Patterson, Ralph D. Hill, Steven L. Rohall, and Scott W. Meeks. </author> <title> Rendezvous: An Architecture for Synchronous MultiUser Applications. </title> <booktitle> In CSCW 90 Proceedings, </booktitle> <year> 1990. </year>
Reference-contexts: 1. Introduction Support for distributed synchronous collaboration typically comes in one of two forms: that of a collaboration toolkit supporting the development of collaboration-aware applications <ref> [3, 4, 10, 11] </ref>, or that of a shared window system that makes it possible for existing single-user applications to be shared [1, 2, 5, 6, 9].
Reference: [11] <author> Mark Roseman and Saul Greenberg. GroupKit: </author> <title> A Groupware Toolkit for Building Real-Time Conferencing Applications. </title> <booktitle> In Proceedings, </booktitle> <address> CSCW92, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: 1. Introduction Support for distributed synchronous collaboration typically comes in one of two forms: that of a collaboration toolkit supporting the development of collaboration-aware applications <ref> [3, 4, 10, 11] </ref>, or that of a shared window system that makes it possible for existing single-user applications to be shared [1, 2, 5, 6, 9].
Reference: [12] <author> Robert Scheifler and James Gettys. </author> <title> X Window System. </title> <publisher> Digital Press, </publisher> <address> Bedford, MA, 2 nd edition, </address> <year> 1990. </year>
Reference-contexts: Window System . The window system provides a particular, low-level, standard windowing model on top of which higher-level user-interfaces can be built. The X Window System 2 <ref> [12] </ref>, in particular, is implemented by server processes that maintain a window database manipulable by clients (toolkits, in this discussion).
References-found: 12

