URL: ftp://ftp.win.tue.nl/pub/techreports/josb/feedback.ps.Z
Refering-URL: http://www.win.tue.nl/cs/fm/misc/pubbaeten.html
Root-URL: http://www.win.tue.nl
Title: Process Algebra with Feedback  
Author: J.C.M. Baeten J.A. Bergstra ; Gh. Stefanescu 
Keyword: Key words Phrases: process algebra, feedback, pin.  
Note: 1980 Mathematics Subject Classification (1985 revision): 68Q55, 68Q10, 68Q45. 1987 CR Categories:  Note: The research of the first two authors was supported in part by ESPRIT basic research action 7166, CONCUR2.  
Address: P.O.Box 513, 5600 MB Eindhoven, The Netherlands  Kruislaan 403, 1098 SJ Amsterdam, The Netherlands  Heidelberglaan  Netherlands  P.O.Box 1-764, 70700 Bucharest, Romania  
Affiliation: 1 Department of Computing Science, Eindhoven University of Technology  Programming Research Group, University of Amsterdam,  Department of Philosophy, Utrecht University,  CS Utrecht, The  Institute of Mathematics of the Romanian Academy  
Email: E-mail: josb@win.tue.nl janb@fwi.uva.nl ghstef@imar.ro  
Phone: 2  3  8, 3584  4  
Web: F.1.2, D.3.1, F.3.1, D.1.3.  
Abstract: We consider process graphs over a set of pins, i.e. with multiple entries and exits. On process graphs modulo bisimulation, we can define all standard process algebra operators plus the feedback operator from flowchart theory. We provide a complete axiomatisation for finite processes. Considering the one-point pin structure, we get back standard process algebra. 
Abstract-found: 1
Intro-found: 1
Reference: [AcH92] <author> L. Aceto and M. Hennessy, </author> <title> Termination, deadlock and divergence, </title> <journal> Journal of the ACM 39(1), </journal> <year> 1992, </year> <pages> pp. 147-187. </pages>
Reference-contexts: As a side effect, this introduces a new constant ; into ACP. As future work, we leave the exact determination of the interaction of all the special constants: ;, ffi (inaction, [BeK84]), nil (CCS termination [Mil89], <ref> [AcH92] </ref>), * (termi Process Algebra with Feedback / 22 nation option [Vra91]), o (silent step [Mil89]), (divergence [AcH92]), O (chaos [BrHR84]), 0 (zero process [BaB90]). <p> As future work, we leave the exact determination of the interaction of all the special constants: ;, ffi (inaction, [BeK84]), nil (CCS termination [Mil89], <ref> [AcH92] </ref>), * (termi Process Algebra with Feedback / 22 nation option [Vra91]), o (silent step [Mil89]), (divergence [AcH92]), O (chaos [BrHR84]), 0 (zero process [BaB90]).
Reference: [BaB90] <author> J.C.M. Baeten and J.A. Bergstra, </author> <title> Process algebra with a zero object, </title> <booktitle> in: Proc. </booktitle> <address> CONCUR'90, </address> <publisher> Amsterdam (J.C.M. </publisher> <editor> Baeten and J.W. Klop, eds.), </editor> <publisher> LNCS 458, Springer-Verlag, </publisher> <year> 1990, </year> <pages> pp. 83-98. </pages>
Reference-contexts: As future work, we leave the exact determination of the interaction of all the special constants: ;, ffi (inaction, [BeK84]), nil (CCS termination [Mil89], [AcH92]), * (termi Process Algebra with Feedback / 22 nation option [Vra91]), o (silent step [Mil89]), (divergence [AcH92]), O (chaos [BrHR84]), 0 (zero process <ref> [BaB90] </ref>).
Reference: [BaB94] <author> J.C.M. Baeten and J.A. Bergstra, </author> <title> On sequential composition, action prefixes and process prefix, </title> <booktitle> Formal Aspects of Computing 6(3), </booktitle> <year> 1994, </year> <pages> pp. 250-268. </pages>
Reference-contexts: We claim that standard ACP is an axiomatisation of this algebra, again substituting a for p p p ! ;. Thus, ACP is a subalgebra of a reduced model specification (an SRM specification) of ACP pin . For more information on SRM specifications, we refer to <ref> [BaB94] </ref>. 9.2 ACP with ;. Now extend the signature above with the extra constant ;.
Reference: [BaV93] <author> J.C.M. Baeten and C. Verhoef, </author> <title> A congruence theorem for structured operational semantics with predicates, </title> <booktitle> in Proc. </booktitle> <editor> CONCUR'93, Hildesheim (E. Best, ed.), </editor> <publisher> LNCS 715, Springer-Verlag, </publisher> <year> 1993, </year> <pages> pp. 477-492. </pages>
Reference-contexts: Considering the terminating transitions and entry set membership as predicates, we find that the rules satisfy the path format of <ref> [BaV93] </ref>. Thus, the standard definition of bisimulation (call this $ sos ) on these transition systems yields a congruence. We can formulate the following theorem, where [[:]] is the interpretation defined in section 2: 3.3 Theorem. For all closed terms u; v: u $ sos v () [[u]] $ [[v]].
Reference: [BaV95] <author> J.C.M. Baeten and C. Verhoef, </author> <title> Concrete process algebra, </title> <note> to appear in: Handbook of logic in computer science (S. </note> <editor> Abramsky, D.M. Gabbay and T.S.E. Maibaum, eds.), </editor> <volume> Vol. </volume> <booktitle> IV, Syntactical Methods, Chapter 2, </booktitle> <publisher> Oxford University Press, </publisher> <year> 1995, </year> <pages> pp. 149 - 268. </pages>
Reference-contexts: Basically, the same trick was used in [Klu93]. Further, we add the rule (p ! ;)X = p ! ;. Then, we prove the term rewriting system is terminating by using the lexicographic path ordering (many examples of this procedure can be found in <ref> [BaV95] </ref>). Then, elimination follows since all normal forms are basic terms. Note that we can also eliminate linking composition. 2 5.3 Theorem (Soundness Theorem). G (A; V )= $ j= BPA " pin . Proof. In each case, it is straightforward to find a bisimulation relation in the SOS model.
Reference: [BaW90] <author> J.C.M. Baeten and W.P. Weijland, </author> <title> Process algebra, </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 18, </booktitle> <publisher> Cambridge University Press 1990. </publisher>
Reference-contexts: Projection. 5.7 Theorem (Projection theorem). Let t be a closed BPA " pin term, and let n 0. Then n (t) can be written as a basic term. Proof. As in the standard theory, see <ref> [BaW90] </ref>. 2 5.8 Theorem (Representation theorem). Let g be a regular process (an element of G (A; V ) with finitely many states). Then there is a closed BPA " pin term t such that [[t]] $ g. Sketch of proof. An example is provided in 5.9 below. <p> Abstraction and o -laws. Process Algebra with Feedback / 19 7.5 Fair Abstraction. Table 13 shows a law for removing a o -loop. This law corresponds to the law KFAR b 1 of <ref> [BaW90] </ref>. The process on the left-hand side of the equation is shown in fig. 7. <p> We assume that elements of D are to be transmitted from sender S to receiver R using unreliable channels K; L. B = f0; 1g. We use the standard communication function given by fl (r k (x); s k (x)) = c k (x) (see <ref> [BaW90] </ref>). The communication links are as shown in fig. 8.
Reference: [BaWM94] <author> H. Barendregt, H. Wupper and H. </author> <title> Mulder, Computable processes, </title> <type> Technical report CSI-R9405, </type> <institution> Computing Science Institute, Catholic University of Nijmegen, </institution> <year> 1994. </year>
Reference-contexts: Then, we illustrate the expressive power of the general formalism, and sketch the extension of the theory with silent steps and abstraction. More about feedback and flowchart theories can be found in <ref> [BaWM94] </ref>, [Bar92], [BlE93], [CaS90, 92], [Mil94], [Ste87a, 87b], [Sta92]. 2 Process Graphs over a Set of Pins We introduce process graphs over a set of edge labels and a set of pin names. Edge labels are, as usual, taken from a finite set of primitive actions A.
Reference: [Bar92] <author> M. Bartha, </author> <title> An algebraic model of synchronous systems. </title> <booktitle> Information and Computation 97, </booktitle> <year> 1992, </year> <pages> pp. 97-131. </pages>
Reference-contexts: Then, we illustrate the expressive power of the general formalism, and sketch the extension of the theory with silent steps and abstraction. More about feedback and flowchart theories can be found in [BaWM94], <ref> [Bar92] </ref>, [BlE93], [CaS90, 92], [Mil94], [Ste87a, 87b], [Sta92]. 2 Process Graphs over a Set of Pins We introduce process graphs over a set of edge labels and a set of pin names. Edge labels are, as usual, taken from a finite set of primitive actions A.
Reference: [BeBP94a] <author> J.A. Bergstra, I. Bethke and A. Ponse, </author> <title> Process algebra with combi-nators, </title> <editor> in E. Borger, Y. Gurevich, and K. Meinke, editors, </editor> <booktitle> Proceedings CSL'93, </booktitle> <publisher> Swansea, LNCS 832, Springer-Verlag, </publisher> <year> 1994, </year> <pages> pp. 36 - 65. </pages>
Reference-contexts: The above shows that it is possible over BPA fl pin . This shows that generalising to processes over pin structures adds expressive power. 8.2 Alternating Bit Protocol. We consider the well-known example of the Alternating Bit Protocol. We give the specification using the iteration operator, taken from <ref> [BeBP94a] </ref>. There, also a verification can be found. We assume that elements of D are to be transmitted from sender S to receiver R using unreliable channels K; L. B = f0; 1g.
Reference: [BeBP94b] <author> J.A. Bergstra, I. Bethke and A. Ponse, </author> <title> Process algebra with iteration and nesting, </title> <journal> The Computer Journal 37(4), </journal> <year> 1994, </year> <pages> pp. 243 - 258. </pages>
Reference-contexts: An input of d 2 D is de noted by action r 1 (d), an output of d 2 D by s 2 (d). The iteration construct fl , binary Kleene star, is defined by the usual equation (see <ref> [BeBP94b] </ref>): x fl y = x (x fl y) + y Table 14. Binary Kleene star.
Reference: [BeK84] <author> J.A. Bergstra and J.W. Klop, </author> <title> Process algebra for synchronous communication, </title> <journal> Inf. and Control 60, </journal> <year> 1984, </year> <pages> pp. 109-137. </pages>
Reference-contexts: Moreover, we get the orginal ACP back as an SRM specification of the general theory. As a side effect, this introduces a new constant ; into ACP. As future work, we leave the exact determination of the interaction of all the special constants: ;, ffi (inaction, <ref> [BeK84] </ref>), nil (CCS termination [Mil89], [AcH92]), * (termi Process Algebra with Feedback / 22 nation option [Vra91]), o (silent step [Mil89]), (divergence [AcH92]), O (chaos [BrHR84]), 0 (zero process [BaB90]).
Reference: [BeS94] <author> J.A. Bergstra and Gh. Stefanescu, </author> <title> Processes with multiple entries and exits modulo isomorphism and modulo bisimulation, </title> <type> report P9403, </type> <institution> Programming Research Group, University of Amsterdam, </institution> <year> 1994. </year>
Reference-contexts: 1 Introduction Semantics of process theory is often given in terms of graphs. The process graphs considered usually have exactly one entry and exactly one exit. In <ref> [BeS94] </ref>, this was adapted to allow for multiple entries and multiple exits. The resulting model was used to model key constructs of ACP and of the algebra of flownomials [Ste90], especially the feedback construct. Feedback is a looping or iteration construct used in e.g. flowcharts. <p> Feedback is a looping or iteration construct used in e.g. flowcharts. Another iteration construct is Kleene star, that was extensively studied in the setting of ACP in [BeBP94]. Here, we generalize and extend the results of <ref> [BeS94] </ref>. We consider process graphs that have interior states and so-called pins, connections to the environment (a pin is an external connection of a chip, the name is used for the external connections of a Petri net in [ExS92]). A pin can be an entry, an exit, or both. <p> First, we consider the constants. Process Algebra with Feedback / 3 1. Atomic actions. For each a 2 A and p; q 2 V we have a constant p ! a ! q. In <ref> [BeS94] </ref>, we find the notation a q p for p ! a ! q. The notation p ! a ! q is already used in [Ber89]. <p> Empty graph. We have a constant ; that stands for the empty graph, i.e. ; = h;; ;; ;; ;i. Abusing notation, we usually write ; instead of ;. The notation ; was also used in <ref> [BeS94] </ref>. This process behaves as the deadlocked process ffi with respect to alternative and sequential composition, but not with respect to parallel composition. Next, we consider four operators used to manipulate pins. 3. Entry operator. Let a process graph g be given, and let p 2 V . <p> Process Algebra with Feedback / 6 We say g; h are bisimilar, g $ h, if I (g) = I (h) and there is an bisimulation between g and h. Note that, different from <ref> [BeS94] </ref>, bisimulating processes do not need to have the same exits. As usual, bisimulation is an equivalence relation on process graphs. We can divide out this equivalence, and obtain the algebras G (A; V )= $ .
Reference: [BlE93] <author> S.L. Bloom and Z. </author> <title> Esik, Iteration theories; the equational logic of iterative processes, </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Then, we illustrate the expressive power of the general formalism, and sketch the extension of the theory with silent steps and abstraction. More about feedback and flowchart theories can be found in [BaWM94], [Bar92], <ref> [BlE93] </ref>, [CaS90, 92], [Mil94], [Ste87a, 87b], [Sta92]. 2 Process Graphs over a Set of Pins We introduce process graphs over a set of edge labels and a set of pin names. Edge labels are, as usual, taken from a finite set of primitive actions A.
Reference: [BrHR84] <author> S.D. Brookes, C.A.R. Hoare and A.W. Roscoe, </author> <title> A theory of communicating sequential processes, </title> <journal> Journal of the ACM 31, </journal> <year> 1984, </year> <pages> pp. 560-599. </pages>
Reference-contexts: As future work, we leave the exact determination of the interaction of all the special constants: ;, ffi (inaction, [BeK84]), nil (CCS termination [Mil89], [AcH92]), * (termi Process Algebra with Feedback / 22 nation option [Vra91]), o (silent step [Mil89]), (divergence [AcH92]), O (chaos <ref> [BrHR84] </ref>), 0 (zero process [BaB90]).
Reference: [CaS90] <author> V.E. Cazanescu and Gh. Stefanescu, </author> <title> Towards a new algebraic foundation of flowchart scheme theory, </title> <note> Fundamenta Informaticae 13, </note> <year> 1990, </year> <pages> pp. 171-210. </pages>
Reference-contexts: Then, we illustrate the expressive power of the general formalism, and sketch the extension of the theory with silent steps and abstraction. More about feedback and flowchart theories can be found in [BaWM94], [Bar92], [BlE93], <ref> [CaS90, 92] </ref>, [Mil94], [Ste87a, 87b], [Sta92]. 2 Process Graphs over a Set of Pins We introduce process graphs over a set of edge labels and a set of pin names. Edge labels are, as usual, taken from a finite set of primitive actions A.
Reference: [CaS92] <author> V.E. Cazanescu and Gh. Stefanescu, </author> <title> A general result of abstract flowchart schemes with applications to the study of accessibility, reduction and minimization, </title> <booktitle> Theoretical Computer Science 99, </booktitle> <year> 1992, </year> <pages> pp. </pages> <month> 1-63. </month> <title> Process Algebra with Feedback / 24 </title>
Reference: [ExS92] <author> ExSpect-Team, </author> <title> ExSpect user manual, </title> <institution> Eindhoven University of Technology, </institution> <year> 1992. </year>
Reference-contexts: Here, we generalize and extend the results of [BeS94]. We consider process graphs that have interior states and so-called pins, connections to the environment (a pin is an external connection of a chip, the name is used for the external connections of a Petri net in <ref> [ExS92] </ref>). A pin can be an entry, an exit, or both. We obtain a full theory of ACP with feedback operator, which generalises ACP in the sense that it weakens the axioms (e.g., in general, parallel composition is neither commutative nor Process Algebra with Feedback / 2 associative).
Reference: [Klu93] <author> A.S. Klusener, </author> <title> Models and axioms for a fragment of real time process algebra, </title> <type> Ph.D. thesis, </type> <institution> Eindhoven University of Technology, </institution> <year> 1993. </year>
Reference-contexts: In order to achieve this, we mark the sign on the left hand side, and duplicate all other rules involving sequential composition, by replacing each by a marked . Basically, the same trick was used in <ref> [Klu93] </ref>. Further, we add the rule (p ! ;)X = p ! ;. Then, we prove the term rewriting system is terminating by using the lexicographic path ordering (many examples of this procedure can be found in [BaV95]). Then, elimination follows since all normal forms are basic terms.
Reference: [Mil89] <author> R. Milner, </author> <title> Communication and concurrency, </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: As a side effect, this introduces a new constant ; into ACP. As future work, we leave the exact determination of the interaction of all the special constants: ;, ffi (inaction, [BeK84]), nil (CCS termination <ref> [Mil89] </ref>, [AcH92]), * (termi Process Algebra with Feedback / 22 nation option [Vra91]), o (silent step [Mil89]), (divergence [AcH92]), O (chaos [BrHR84]), 0 (zero process [BaB90]). <p> As future work, we leave the exact determination of the interaction of all the special constants: ;, ffi (inaction, [BeK84]), nil (CCS termination <ref> [Mil89] </ref>, [AcH92]), * (termi Process Algebra with Feedback / 22 nation option [Vra91]), o (silent step [Mil89]), (divergence [AcH92]), O (chaos [BrHR84]), 0 (zero process [BaB90]).
Reference: [Mil94] <author> R. Milner, </author> <title> Action Calculi V: Reflexive molecular forms, </title> <type> Draft, </type> <month> June </month> <year> 1994. </year>
Reference-contexts: Then, we illustrate the expressive power of the general formalism, and sketch the extension of the theory with silent steps and abstraction. More about feedback and flowchart theories can be found in [BaWM94], [Bar92], [BlE93], [CaS90, 92], <ref> [Mil94] </ref>, [Ste87a, 87b], [Sta92]. 2 Process Graphs over a Set of Pins We introduce process graphs over a set of edge labels and a set of pin names. Edge labels are, as usual, taken from a finite set of primitive actions A.
Reference: [Sta92] <author> E.W. Stark, </author> <title> A calculus of dataflow networks, </title> <booktitle> in: Proc. </booktitle> <address> LICS (Santa Cruz), </address> <publisher> IEEE, </publisher> <year> 1992, </year> <pages> pp. 125-136. </pages>
Reference-contexts: Then, we illustrate the expressive power of the general formalism, and sketch the extension of the theory with silent steps and abstraction. More about feedback and flowchart theories can be found in [BaWM94], [Bar92], [BlE93], [CaS90, 92], [Mil94], [Ste87a, 87b], <ref> [Sta92] </ref>. 2 Process Graphs over a Set of Pins We introduce process graphs over a set of edge labels and a set of pin names. Edge labels are, as usual, taken from a finite set of primitive actions A. This set A is a parameter of the theory.
Reference: [Ste87a] <author> Gh. Stefanescu, </author> <title> On flowchart theories, part I, the deterministic case, </title> <type> JCSS 35, </type> <year> 1987, </year> <pages> pp. 163-191. </pages>
Reference-contexts: Then, we illustrate the expressive power of the general formalism, and sketch the extension of the theory with silent steps and abstraction. More about feedback and flowchart theories can be found in [BaWM94], [Bar92], [BlE93], [CaS90, 92], [Mil94], <ref> [Ste87a, 87b] </ref>, [Sta92]. 2 Process Graphs over a Set of Pins We introduce process graphs over a set of edge labels and a set of pin names. Edge labels are, as usual, taken from a finite set of primitive actions A. This set A is a parameter of the theory.
Reference: [Ste87b] <author> Gh. Stefanescu, </author> <title> On flowchart theories, part II, the non-deterministic case, </title> <type> TCS 52, </type> <year> 1987, </year> <pages> pp. 307-340. </pages>
Reference: [Ste90] <author> Gh. Stefanescu, </author> <title> Feedback theories (a calculus for isomorphism classes of flowchart schemes), </title> <institution> Revue Roumaine de Mathematiques Pures et Applique 35, </institution> <year> 1990, </year> <pages> pp. 73-79. </pages>
Reference-contexts: The process graphs considered usually have exactly one entry and exactly one exit. In [BeS94], this was adapted to allow for multiple entries and multiple exits. The resulting model was used to model key constructs of ACP and of the algebra of flownomials <ref> [Ste90] </ref>, especially the feedback construct. Feedback is a looping or iteration construct used in e.g. flowcharts. Another iteration construct is Kleene star, that was extensively studied in the setting of ACP in [BeBP94]. Here, we generalize and extend the results of [BeS94].
Reference: [Ver94] <author> C. Verhoef, </author> <title> A general conservative extension theorem in process algebra, in: Programming Concepts, Methods and Calculi (PROCOMET'94), San Miniato (E.-R. </title> <editor> Olderog, ed.), </editor> <booktitle> IFIP Transactions A-56, North-Holland 1994, </booktitle> <pages> pp. 149-168. </pages>
Reference-contexts: Sketch of proof. Since all our SOS rules are in path format, operational conservativity follows immediately (see <ref> [Ver94] </ref>). Then the (equational) conservativity follows by a result of [Ver94] since the axiomatisation of BPA ffi is sound and complete and the axiomatisation of BPA " pin is sound (theorem 5.3). 2 5.5 Theorem (Completeness Theorem). <p> Sketch of proof. Since all our SOS rules are in path format, operational conservativity follows immediately (see <ref> [Ver94] </ref>). Then the (equational) conservativity follows by a result of [Ver94] since the axiomatisation of BPA ffi is sound and complete and the axiomatisation of BPA " pin is sound (theorem 5.3). 2 5.5 Theorem (Completeness Theorem). The axiomatisation of BPA pin (so without iterative construct!) is complete for the model G (A; V )= $ . Sketch of proof. <p> The axiomatisation of BPA pin (so without iterative construct!) is complete for the model G (A; V )= $ . Sketch of proof. By the general result of <ref> [Ver94] </ref>. In addition to the ingredients of the previous proof, all we need is the elimination theorem. 2 5.6 Definition.
Reference: [Vra91] <author> J.L.M. Vrancken, </author> <title> Studies in process algebra, algebraic specifications and parallelism, </title> <type> Ph.D. thesis, </type> <month> UvA </month> <year> 1991. </year>
Reference-contexts: To do the proof in the graph model, we need to talk about graphs more explicitly, as in <ref> [Vra91] </ref>. This requires much overhead from graph theory, and we refrain from doing this here. 2 5.4 Theorem (Conservativity Theorem). <p> As a side effect, this introduces a new constant ; into ACP. As future work, we leave the exact determination of the interaction of all the special constants: ;, ffi (inaction, [BeK84]), nil (CCS termination [Mil89], [AcH92]), * (termi Process Algebra with Feedback / 22 nation option <ref> [Vra91] </ref>), o (silent step [Mil89]), (divergence [AcH92]), O (chaos [BrHR84]), 0 (zero process [BaB90]).
References-found: 26

