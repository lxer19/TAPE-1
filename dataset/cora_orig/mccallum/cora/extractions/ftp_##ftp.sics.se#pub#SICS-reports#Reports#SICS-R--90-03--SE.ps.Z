URL: ftp://ftp.sics.se/pub/SICS-reports/Reports/SICS-R--90-03--SE.ps.Z
Refering-URL: http://www.sics.se/libindex.html
Root-URL: 
Title: B On the Efficiency of Optimising Shallow Backtracking in Compiled Prolog  
Author: Mats Carlsson 
Note: The paper also appears in Logic Programming: Proceedings of the Sixth International Conference, MIT Press, pp. 316, 1989.  
Address: PO Box 1263 S-164 28 KISTA, Sweden  
Affiliation: SICS, Swedish Institute of Computer Science  
Abstract: The cost of backtracking has been identified as one of the bottlenecks in achieving peak performance in compiled Prolog programs. Much of the backtracking in Prolog programs is shallow, i.e. is caused by unification failures in the head of a clause when there are more alternatives for the same procedure, and so special treatment of this form of backtracking has been proposed as a significant optimisation. This paper describes a modified WAM which optimises shallow backtracking. Four different implementation approaches are compared. A number of benchmark results are presented, measuring the relative tradeoffs between compilation time, code size, and run time. The results show that the speedup gained by this optimisation can be significant. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Carlsson, </author> <title> Freeze, Indexing and Other Implementation Issues in the WAM, </title> <booktitle> Proc. Fourth International Conference on Logic Programming, </booktitle> <pages> pp. 4058, </pages> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: This indexing step singles out an applicable subset of clauses, and at most one choicepoint is created. Although not essential for the shallow backtracking mechanism, this modification increases its effectiveness as the number of alternatives per choicepoints increases. This technique is further discussed in <ref> [1] </ref>. 4.2 Split environment pointer Since an allocate instruction can occur before a neck instruction, it would seem that the E register has to be saved by try (_me_else) and restored when a shallow failure occurs.
Reference: [2] <author> M. Carlsson, J. Widn, </author> <title> SICStus Prolog User's Manual, </title> <institution> SICS Research Report R88007B, </institution> <month> October, </month> <year> 1988. </year>
Reference: [3] <author> M. Meier, </author> <title> Shallow Backtracking in Prolog Programs, </title> <type> Internal report, </type> <institution> ECRC, </institution> <year> 1987. </year>
Reference: [4] <author> H. Tateno, H. Nakashima, S. Kondo, K. Nakajima, </author> <title> Neck Cut Optimization: An Optimization technique for the Shallow Backtracking, </title> <type> Internal report, </type> <institution> Mitsubishi Electric Corporation and ICOT, </institution> <year> 1989. </year>
Reference-contexts: The design of Van Roy et.al. uses up to four entrypoints per clause B whereas ours uses at most two entrypoints. The scope of the shallow backtracking optimisation is somewhat restricted in their design, as head unification for "nondeterministic entries" is not allowed to bind variables. Tateno et.al. <ref> [4] </ref> describe a design similar to ours but restricted to predicates in which all clauses but the last one have a cut before the first general body goal. Their design allows head unifications to bind variables and handles the trail specially for such bindings.
Reference: [5] <author> E. Tick and D.H.D. Warren, </author> <title> Towards a pipelined Prolog processor, </title> <booktitle> in Proc. International Symposium on Logic Programming, </booktitle> <pages> pp. 2940, </pages> <publisher> IEEE Computer Society, </publisher> <year> 1984. </year>
Reference: [6] <author> E. Tick, </author> <title> Studies in Prolog Architectures, </title> <type> Technical Report No. </type> <institution> CSL-TR-87-329, Stanford University, </institution> <month> June </month> <year> 1987. </year>
Reference: [7] <author> P. Van Roy, B. Demoen, and Y.D. Willems, </author> <title> Improving the execution speed of compiled Prolog with modes, clause selection, and determinacy, </title> <booktitle> Proc. TAPSOFT'87: International Joint Conference on Theory and Practice of Software Development, </booktitle> <pages> pp. 111125, </pages> <address> SpringerVerlag, </address> <year> 1987. </year>
Reference: [8] <author> D.H.D. Warren, </author> <title> IMPLEMENTING PROLOGcompiling predicate logic programs, D.A.I. </title> <type> Research Report 39, </type> <institution> University of Edinburgh, </institution> <month> May, </month> <year> 1977. </year>
Reference: [9] <author> D.H.D. Warren, </author> <title> An Abstract Prolog Instruction Set , Technical Note 309, </title> <booktitle> SRI International, </booktitle> <year> 1983. </year>
Reference: [10] <author> E. Lusk, D.H.D. Warren, S. Haridi et.al., </author> <title> The Aurora Or-Parallel Prolog System, </title> <booktitle> in Proc. International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pp. 819830, </pages> <publisher> ICOT, </publisher> <address> Tokyo, </address> <year> 1988. </year>
References-found: 10

