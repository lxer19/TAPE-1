URL: ftp://ftp.cc.gatech.edu/pub/gvu/tr/1991/91-10.ps.Z
Refering-URL: http://www.cs.gatech.edu/gvu/reports/1991/
Root-URL: 
Email: foley@cc.gatech.edu mullet@eng.sun.com  
Title: Coupling Application design and User interface design  
Author: Dennis J.M.J. de Baar James D. Foley Kevin Mullet 
Date: june 1991  
Affiliation: College of Computing Human Interface Technology Group Georgia Institute of Technology Sun Microsystems Inc.  
Note: last modified 6/24/91, printed 8/8/91 1 of 7  
Abstract: Building an interactive application requires, amongst other activities, the design of both a data model and a user interface. These two designs are often done separately, frequently by different individuals or groups. However, there are strong similarities between the objects, actions and attributes of the data model and those of the user interface. This means that considerable specification work has to be done twice. Our approach is to automatically generate user interface elements directly from the data model. This saves time and effort and at the same time style rules can be applied automatically to the design of the user interface. This relieves the designer of the need to be familiar with certain style rules, while at the same time creating the consistency embodied in the rules. 
Abstract-found: 1
Intro-found: 1
Reference: [Appl86] <author> Apple Computer, Inc. </author> <title> Human Interface Guidelines: The apple Desktop Interface. Apple Programmers and developers Association. </title> <address> Renton, WA. </address> <year> 1986. </year>
Reference-contexts: Guidelines for presenting an application in a tasteful and functional manner are embodied in a number of user interface styleguides, such as the OPEN LOOK Graphical User Interface Application Style Guidelines [Sun90b], the OSF/Motif Style Guide [OSF], the Apple Desktop Interface <ref> [Appl86] </ref> and IBMs styleguide [IBM87]. These styleguides help the developer design a user interface based on principles of simplicity, consistency and efficiency. With each of these tools, however, the user interface designer has to perform three unnecessary steps.
Reference: [Beek90] <author> Beekman, W.H.R. D2m2edit, </author> <type> Masters Thesis. </type> <institution> Delft University of Technology, </institution> <month> July </month> <year> 1990 </year>
Reference-contexts: DevGuide has a palette from, which the user interface designer can drag objects onto the screen. For the specification of the attributes of each different interaction object DevGuide uses property sheets. D2M2-Edit is the Delft University of Technologys Direct Manipulation Manager Editor <ref> [Beek90] </ref>, which is an interactive graphics editor implemented in Open Windows for creating semantic data diagrams (node and arc style figures).
Reference: [Fole88] <author> Foley, J.D., C. Gibbs, W. Kim, S. Kovacevic, L. Moran, P. Sukaviriya, </author> <title> A Knowledge-Based User Interface Management System, </title> <booktitle> CHI88 Proceedings, </booktitle> <address> Washington DC, </address> <month> may </month> <year> 1988, </year> <pages> pp. 67-72. </pages>
Reference-contexts: The actions are associated Actions Attributes Control Selection Layout Menu Rules Rules & Interaction Library Presentation Component Generated User Existing User Incremental design step Intelligent design link Interface Interface Inference engine with pre- and postconditions. The data model is based on that of UIDE <ref> [Fole88] </ref>. objects Every user interface interaction object is related to an action or attribute in the application data model (Figure 1). Interactions objects are pre-defined user interface objects (button, slider, menu, etc.).
Reference: [Fole91] <author> Foley, J.D., W. C. Kim, S. Kovacevic, and K. Murray, </author> <title> UIDE - An intelligent User Interface Design Environment, </title> <editor> in Sullivan, J and S. Tyler (eds.), </editor> <title> Architectures for Intelligent Interfaces: Elements and Prototypes, </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: This back end has to be adjusted for other tools. This project just started this year and there are some topics and issues, which we want to work on: Integration of automatic generation tool in a framework for the development of whole UIMS.A typical example is the UIDE <ref> [Fole91] </ref>, in which one shared knowledge base is be ing used for the complete specification of the application and the user interface. The logical order in a property sheet is now determined by the designer. He tries to create a top-down visual cue.
Reference: [Hewl90] <author> Hewlett-Packard Company, </author> <title> HP Interface Architect Developers Guide, </title> <institution> Hewlett-Packard Company, Corvallis, Oregon, </institution> <month> October </month> <year> 1990. </year>
Reference-contexts: An increasing number of software tools assist the designer in this step. They provide standard user interface elements and allow the designer to interactively lay out user interface elements on the screen. Examples of user interface builders are DevGuide [Sun90a], the Interface Architect <ref> [Hewl90] </ref>. The use of these tools, however, does not guarantee good user interface design; that depends on the designer.
Reference: [IBM87] <author> IBM Corporation. </author> <title> System Application Architecture, Common Access Panel Design and User Interaction. </title> <address> SC26-4351-0. </address> <month> December </month> <year> 1987. </year>
Reference-contexts: Guidelines for presenting an application in a tasteful and functional manner are embodied in a number of user interface styleguides, such as the OPEN LOOK Graphical User Interface Application Style Guidelines [Sun90b], the OSF/Motif Style Guide [OSF], the Apple Desktop Interface [Appl86] and IBMs styleguide <ref> [IBM87] </ref>. These styleguides help the developer design a user interface based on principles of simplicity, consistency and efficiency. With each of these tools, however, the user interface designer has to perform three unnecessary steps. First, he must access, either from documentation or from his memory, details of the data model.
Reference: [Olse89] <author> Olsen, D. </author> <title> A programming Language Basis for User Interface Management,CHI89 Proceedings, </title> <address> Austin, Texas, </address> <month> may </month> <year> 1989, </year> <pages> pp. 171-176. </pages>
Reference-contexts: Automatic generation of dialog boxes from a high-level textual specification description provides the possibility to automatically apply layout style rules to the design, avoiding some of the unnecessary steps described above. Jade [Zand90], ITS [Wiec90] and Mickey <ref> [Olse89] </ref> all generate dialog boxes from textual specifications. Mickey generates Macintosh user interface (menus and dialog boxes) from interface descriptions embedded in Pascal. ITS and Jade use a set of style rules, created by a style expert and a specification of the dialog content to generate dialog boxes.
Reference: [OSF] <author> Open Software Foundation. </author> <title> OSF/Motif Style Guide, Revision 1.0, </title> <address> OSF 11 Cambridge Center, Cambridge, MA 02142, ISBN 0-13-640491-X, </address> <year> 1990. </year>
Reference-contexts: Guidelines for presenting an application in a tasteful and functional manner are embodied in a number of user interface styleguides, such as the OPEN LOOK Graphical User Interface Application Style Guidelines [Sun90b], the OSF/Motif Style Guide <ref> [OSF] </ref>, the Apple Desktop Interface [Appl86] and IBMs styleguide [IBM87]. These styleguides help the developer design a user interface based on principles of simplicity, consistency and efficiency. With each of these tools, however, the user interface designer has to perform three unnecessary steps.
Reference: [Sun90a] <author> Sun Microsystems, Inc. </author> <title> and AT&T OPEN LOOK, Graphical User Interface Application Style Guidelines. </title> <publisher> Addision-Wesley Publishing Company, Inc. </publisher> <address> ISBN 0 201-52364-7, </address> <year> 1990. </year>
Reference-contexts: A later step is the design of the user interface. An increasing number of software tools assist the designer in this step. They provide standard user interface elements and allow the designer to interactively lay out user interface elements on the screen. Examples of user interface builders are DevGuide <ref> [Sun90a] </ref>, the Interface Architect [Hewl90]. The use of these tools, however, does not guarantee good user interface design; that depends on the designer. <p> Jade also includes a graphical editing capabilities, which allow the designer to refine the generated user interface. Our system automates all the three steps, using D2M2edit [- Beek90], a tool for creating data models; DevGuide <ref> [Sun90a] </ref>, Sun Microsystems interactive user interface lay Coupling Application design and User interface design last modified 6/24/91, printed 8/8/91 2 of 7 out tool, and the OPEN LOOK Style Guide Rules [SUN90b].
Reference: [Sun90b] <author> Sun Microsystems, Inc., </author> <title> Open Windows Developers Guide 1.1, Reference Manual, Part No. 800-5380-10, Revision A, </title> <note> of June 1990. </note>
Reference-contexts: The use of these tools, however, does not guarantee good user interface design; that depends on the designer. Guidelines for presenting an application in a tasteful and functional manner are embodied in a number of user interface styleguides, such as the OPEN LOOK Graphical User Interface Application Style Guidelines <ref> [Sun90b] </ref>, the OSF/Motif Style Guide [OSF], the Apple Desktop Interface [Appl86] and IBMs styleguide [IBM87]. These styleguides help the developer design a user interface based on principles of simplicity, consistency and efficiency. With each of these tools, however, the user interface designer has to perform three unnecessary steps. <p> Our system automates all the three steps, using D2M2edit [- Beek90], a tool for creating data models; DevGuide [Sun90a], Sun Microsystems interactive user interface lay Coupling Application design and User interface design last modified 6/24/91, printed 8/8/91 2 of 7 out tool, and the OPEN LOOK Style Guide Rules <ref> [SUN90b] </ref>. We will first describe our mechanism used to transform selected application data as dialog content into user interface dialog. After that we expain the relation between data in the application model and the dialog parts of the user interface.
Reference: [Wiec89] <author> Wiecha, C., W. Bennett, S. Boies, and J. Gould, </author> <title> Generating Highly Interactive User Interfaces, </title> <booktitle> CHI89 Proceedings, </booktitle> <address> Austin, Texas, </address> <month> may </month> <year> 1989, </year> <pages> pp. 277-282. </pages>
Reference: [Zand90] <author> Zanden, B. Vander and B.A. Myers, </author> <title> Automatic, Look-and-Feel Independent Dialog Creation for graphical User Interfaces, </title> <booktitle> CHI90 Proceedings, </booktitle> <address> Seattle, Washington, </address> <month> April </month> <year> 1990, </year> <pages> pp. 27-34. </pages>
Reference-contexts: Automatic generation of dialog boxes from a high-level textual specification description provides the possibility to automatically apply layout style rules to the design, avoiding some of the unnecessary steps described above. Jade <ref> [Zand90] </ref>, ITS [Wiec90] and Mickey [Olse89] all generate dialog boxes from textual specifications. Mickey generates Macintosh user interface (menus and dialog boxes) from interface descriptions embedded in Pascal.
References-found: 12

