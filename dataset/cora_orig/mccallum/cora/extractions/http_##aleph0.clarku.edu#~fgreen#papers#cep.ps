URL: http://aleph0.clarku.edu/~fgreen/papers/cep.ps
Refering-URL: http://aleph0.clarku.edu/~fgreen/papers/papers.html
Root-URL: http://aleph0.clarku.edu
Email: fgreen@clarku.bitnet  
Title: On the Power of Deterministic Reductions to C  
Author: P Frederic Green 
Note: 1 Research supported by a grant from the Direccion General de Investigacion Cientfica Tecnica (DGICYT), Spanish Ministry of Education, while the author was visiting the  
Date: September 15, 1991  
Address: Worcester, Massachusetts 01610  Barcelona.  
Affiliation: Department of Mathematics and Computer Science Clark University  Facultat d'Informatica, Universitat Politecnica de Catalunya,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> L. Babai, </author> <title> "E-Mail and the Unexpected Power of Interaction", </title> <booktitle> 5th Annual Conference on Structure in Complexity Theory (1990) 30-44. </booktitle>
Reference-contexts: = P A ). 16 Then using theorem 7, we have, Corollary 24 There exists an oracle A such that P NP A (k+1)T 6 P C = P A 7 Open Problems Oracle separations are naturally not satisfying in these times of techniques that do not relativize (see, e.g., <ref> [1] </ref> and references therein), and thus the results of this paper raise more questions than they answer.
Reference: [2] <author> A. Bertoni, D. Bruschi, D. Joseqh, M. Sitharam, and P. Young, </author> <title> "Generalized Boolean Hierarchies and Boolean Hierarchies over RP", </title> <booktitle> Proceedings of the 7th Conference on Fundamentals of Computation Theory, Springer-Verlag 1989, Lecture Notes in Computer Science 380. </booktitle>
Reference-contexts: Boolean hierarchies over general complexity classes have been studied previously in <ref> [2] </ref>. The Boolean hierarchy can be defined in many different ways. We will make use of the following two characterizations which hold for complexity classes C that are closed under union, which will be the case for the classes we consider in this paper.
Reference: [3] <author> J. L. Balcazar, J. Daz, and J. Gabarro, </author> <title> Structural Complexity Theory I, </title> <booktitle> Volume II of EATCS Monographs on Theoretical Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: The resulting construction for the Boolean hierarchy over NP is simpler than existing ones [9] although it apparently is not powerful enough to obtain random oracle results (see [8]). 2 2 Preliminaries We assume the reader is familiar with complexity classes such as P, NP, p e.g., <ref> [3] </ref>). Let N be a polynomial time-bounded nondeterministic Turing machine.
Reference: [4] <author> R. Beigel, </author> <title> "Bounded Queries to SAT and the Boolean Hierarchy", </title> <type> Johns Hopkins Tech Report 87-8 (1988), </type> <note> to appear in Theoretical Computer Science. </note>
Reference-contexts: Some insight into question 2 is gained immediately by examining the analogies between NP and C = P. Using these analogies we find here that the query and Boolean hierarchies are just as closely intertwined for C = P as they are for NP <ref> [4] </ref>. We also find that the proof of Kadin [13] and Chang and Kadin [11] which shows that if the Boolean hierarchy over NP collapses then the polynomial hierarchy collapses, also works for the Boolean hierarchy over C = P. <p> Another important example for this paper is that, just as in the case of NP, there is a tight intertwining relationship between the Boolean and query hierarchies over C = P. The proof of this fact follows Beigel's proof for NP <ref> [4] </ref>. In fact it was pointed out in [4] that the proof for this theorem only depends on the existence of a complete problem, and closure under intersection, union and NP m -reducibility. <p> Another important example for this paper is that, just as in the case of NP, there is a tight intertwining relationship between the Boolean and query hierarchies over C = P. The proof of this fact follows Beigel's proof for NP <ref> [4] </ref>. In fact it was pointed out in [4] that the proof for this theorem only depends on the existence of a complete problem, and closure under intersection, union and NP m -reducibility.
Reference: [5] <author> R. Beigel, R. Chang, and M. Ogiwara, </author> <title> "A Relationship between Difference Hierarchies and Relativized Polynomial Hierarchies", </title> <type> manuscript, </type> <month> January, </month> <year> 1991. </year> <month> 17 </month>
Reference-contexts: This links 1 a collapse of the query hierarchy over C = P to a collapse of the polynomial hierarchy relative to PP. Beigel, Chang and Ogiwara <ref> [5] </ref> have independently proved a stronger version of this theorem, using techniques somewhat different than those of Chang and Kadin. Note that this is in sharp contrast to the query hierarchy over PP, which collapses to PP [6]. These results are discussed in section 3. <p> Independently, Beigel, Chang and Ogiwara <ref> [5] </ref> have made the same observation, but they present their own simpler proof of this, using a "mind change" technique that allows them to derive a stronger result.
Reference: [6] <author> R. Beigel, N. Reingold and D. Spielman, </author> <note> "PP is Closed Under Intersection", STOC 1991. </note>
Reference-contexts: Beigel, Chang and Ogiwara [5] have independently proved a stronger version of this theorem, using techniques somewhat different than those of Chang and Kadin. Note that this is in sharp contrast to the query hierarchy over PP, which collapses to PP <ref> [6] </ref>. These results are discussed in section 3. Nothing is known about question 1, not even oracle separations, and up until now there has been no reason (other than intuition) to believe that P C = P is any less powerful than P PP .
Reference: [7] <author> S. R. Buss and L. Hay, </author> <title> "On Truth-table Reducibility to SAT and the Difference Hierarchy Over NP", </title> <booktitle> Proceedings of the 3rd Conference on Structure in Complexity Theory (1988) 224-233. </booktitle>
Reference: [8] <author> J.-y. </author> <title> Cai "Probability One Separation of the Boolean Hierarchy", </title> <booktitle> 4th Annual Symposium on Theoretical Aspects of Computer Science, Springer-Verlag Lecture Notes in Computer Science 247 (1987) 148-158. </booktitle>
Reference-contexts: Clearly this simultaneously separates the query hierarchies over NP and C = P. The resulting construction for the Boolean hierarchy over NP is simpler than existing ones [9] although it apparently is not powerful enough to obtain random oracle results (see <ref> [8] </ref>). 2 2 Preliminaries We assume the reader is familiar with complexity classes such as P, NP, p e.g., [3]). Let N be a polynomial time-bounded nondeterministic Turing machine.
Reference: [9] <author> J.-y. Cai, T. Gunderman, J. Hartmanis, L. A. Hemachandra, V. Sewelson, K. Wagner, and G. Wechsung, </author> <title> "The Boolean Hierarchy I: Structural Properties", </title> <journal> SIAM Journal of Computing, </journal> <month> 17 </month> <year> (1988) </year> <month> 1232-1252. </month>
Reference-contexts: Clearly this simultaneously separates the query hierarchies over NP and C = P. The resulting construction for the Boolean hierarchy over NP is simpler than existing ones <ref> [9] </ref> although it apparently is not powerful enough to obtain random oracle results (see [8]). 2 2 Preliminaries We assume the reader is familiar with complexity classes such as P, NP, p e.g., [3]). Let N be a polynomial time-bounded nondeterministic Turing machine. <p> The query hierarchy over C is defined as S 1 kT . Let C be a complexity class. Following <ref> [9] </ref>, we define the Boolean hierarchy over C inductively as follows: Let BH 1 (C) = C, and, for all k &gt; 1, BH 2k (C) = fLjL = L 1 " L 2 ; L 1 2 BH 2k1 (C); L 2 2 Cg; BH 2k+1 (C) = fLjL = <p> The first is a 3 convenient normal form, and the second shows that for such classes the Boolean hierarchy is the same as the difference hierarchy <ref> [9] </ref>. Proposition 1 Suppose C is closed under union.
Reference: [10] <author> L. A. Hemachandra, </author> <title> "The Strong Exponential Hierarchy Collapses", </title> <note> Journal of Computer and System Science (1989) 299-322. </note>
Reference-contexts: Now many interesting results can be derived using analogous proofs for NP, with C 6= P playing the role of NP. For the first result, recall that truth-table reductions to NP are exactly as powerful as Turing reductions with logarithmically many queries, i.e., P NP tt ([7], <ref> [10] </ref>). Here we find the same is true of C = P. This result has also been found by Toda [19]. The result and the proof reported here were obtained independently 1 .
Reference: [11] <author> R. Chang and J. Kadin, </author> <title> "The Boolean Hierarchy and the Polynomial Hierarchy: a Closer Connection", </title> <booktitle> 5th Annual Conference on Structure in Complexity Theory (1990) 169-178. </booktitle>
Reference-contexts: Using these analogies we find here that the query and Boolean hierarchies are just as closely intertwined for C = P as they are for NP [4]. We also find that the proof of Kadin [13] and Chang and Kadin <ref> [11] </ref> which shows that if the Boolean hierarchy over NP collapses then the polynomial hierarchy collapses, also works for the Boolean hierarchy over C = P.
Reference: [12] <author> T. Gundermann, N. A. Nasser and G. Wechsung, </author> <title> "A Survey on Counting Classes", </title> <booktitle> 5th Annual Conference on Structure in Complexity Theory (1990) 140-153. </booktitle>
Reference-contexts: A direct consequence of the separation of BPP from P C = P are separations of both PP and 2 " 2 from P C = P . The constructions are based on circuit lower bounds, building on a result of Gundermann, Nasser and Wechsung <ref> [12] </ref>, as well as a new characterization of P C = P (easily proved using the analogies between C 6= P and NP). <p> We finally turn to oracle results relating to question 2. Gundermann, Nasser and Wech-sung <ref> [12] </ref> obtained an oracle separation of the Boolean hierarchy over C = P. Since the Boolean hierarchy is intertwined with the query hierarchy, in some relativized world, k + 1 queries to C = P are more powerful than k. <p> One may regard this as a generalization of the result of Toran [21] that relative to some oracle, NP is not contained in C = P. In order to do this we again adapt the technique of <ref> [12] </ref> (section 4) to appropriate circuit problems. In section 6 an oracle is constructed which separates every level of the Boolean hierarchy over NP from a level of the Boolean hierarchy over C = P. Clearly this simultaneously separates the query hierarchies over NP and C = P. <p> We will denote co-C = P alternatively by C 6= P. PP is similarly defined, but with "f (x) = t (x)" replaced by "f (x) t (x)". It was recently remarked in <ref> [12] </ref> that in the definitions above one can replace the function t 2 FP by a function g 2 #P, and still obtain the same classes. <p> The proof of this fact is similar to the proof that C = P is closed under intersection. The closure of C = P under union was proved in <ref> [12] </ref>. Again, using essentially the same proof as for the closure under union it is easy to see that C = P is closed under polynomial-time disjunctive truth-table reductions. <p> if the Boolean hierarchy over C = P collapses, or, equivalently, if the query hierarchy over C = P collapses to some finite level. (Corollary 6 represents a first step in this direction.) As mentioned in the introduction, up to now the only known separation is a relativized one (see <ref> [12] </ref> and section 6). In contrast for NP, structural relationships between the Boolean hierarchy over NP and the polynomial hierarchy are known. It was proved by Kadin that if the Boolean hierarchy collapses to a finite level then PH collapses to P NP NP [13],[11]. <p> The notion that an NEQ circuit C is computable by a non-negative polynomial is defined precisely the same, except that C (x 1 ; :::; x n ) = 1 if and only if p (x 1 ; :::; x n ) 6= 0. Using a technique from <ref> [12] </ref>, it is easy to show that every EQ (resp. NEQ) circuit can be computed by a non-negative polynomial. Proposition 10 Let C be an EQ circuit of size m and order s. <p> We have that p 0, and p = 0 if and only if C = 1. A similar argument holds for NEQ. 8 We use the following lemma to establish the relativized separations. It is the same as lemma 30 in <ref> [12] </ref>, translated into the context of circuits. In addition, we generalize the lemma so that it can be applied to Boolean functions which are symmetric with respect to certain (disjoint) subsets of the input variables, a generalization of the usual definition of symmetric function. <p> This represents a technical improvement of the oracle of Gundermann, Nasser and Wechsung <ref> [12] </ref>. It is possible to reduce this separation to circuit lower bounds.
Reference: [13] <author> J. Kadin, </author> <title> "Restricted Turing Reducibilities and the Structure of the Polynomial Time Hierarchy", </title> <type> Ph.D. thesis, </type> <institution> Cornell University, </institution> <month> February </month> <year> 1988. </year>
Reference-contexts: Using these analogies we find here that the query and Boolean hierarchies are just as closely intertwined for C = P as they are for NP [4]. We also find that the proof of Kadin <ref> [13] </ref> and Chang and Kadin [11] which shows that if the Boolean hierarchy over NP collapses then the polynomial hierarchy collapses, also works for the Boolean hierarchy over C = P. <p> The proof of theorem 8 exploits the analogy between C 6= P and NP. Using the terminology of <ref> [13] </ref>, Corollary 4 allows us to do "oracle replacement" in nondeterministic computations when it is possible to find "small C 6= P machines" for C = P. The "hard string/easy 6 string" argument similarly holds with ESAT playing the role of SAT.
Reference: [14] <author> C. Lautenmann, </author> <title> "BPP and the Polynomial Hierarchy", </title> <note> Information Processing Letters 17 (1983) 215-217. </note>
Reference-contexts: Corollary 20 There exists an oracle A such that p;A p;A and PP A 6 P C = P A Proof: It is well known that BPP PP " p p 2 via a proof that relativizes (e.g., <ref> [14] </ref>). 6 An Oracle Interlocking the Query Hierarchies Over NP and C = P In this section we construct an oracle which gives an optimal separation of the Boolean and query hierarchies over NP and C = P.
Reference: [15] <author> M. Ogiwara, </author> <title> "Generealized Theorems on Relationships Among Reducibility Notions to Certain Complexity Classes", </title> <type> manuscript, </type> <month> April </month> <year> 1991. </year>
Reference-contexts: Hence with O (log (n)) queries to C 6= P we can simulate M A . It is well known that NP = co-NP if and only if PH = NP. A similar phenomenon occurs if C = P is closed under complement. 1 Subsequently Ogiwara <ref> [15] </ref> has substantially generalized this result, exhibiting sufficient conditions for any complexity class C to obey P C tt = P C O (log (n))T .
Reference: [16] <author> J. Tarui, </author> <title> "Randomized Polynomials, Threshold Circuits, and the Polynomial Hierarchy", </title> <booktitle> Proceedings of the 8th Annual Symposium on Theoretical Aspects of Computer Science (1991) 238-250. </booktitle>
Reference-contexts: It is significant since it states that C = P is hard for the polynomial hierarchy under nondeterministic reductions. Fact (ii) was proved by Toda and Ogiwara [20], and in a stronger form by Tarui <ref> [16] </ref>. It is significant since it says that C = P is hard for the polynomial hierarchy under randomized reductions.
Reference: [17] <author> J. Tarui, </author> <title> "Degree Complexity of Boolean Functions and Its Applications to Relativized Separations", </title> <booktitle> to appear in 6th Annual Conference on Structure in Complexity Theory (1991). </booktitle>
Reference-contexts: Applying lemma 15, the result is immediate. In the proof of the following, as well as in the following section, s n i denotes the i th string of length n. We note that Tarui <ref> [17] </ref> has independently obtained the theorem as well as theorem 19 using slightly different techniques. In place of the concept of P C = P -circuits, Tarui uses the concept of small-depth decision trees.
Reference: [18] <author> S. </author> <title> Toda, "On the computational power of PP and P", </title> <booktitle> Proceedings 30th IEEE Symposium on Foundations of Computer Science (1989) 514-519. </booktitle>
Reference-contexts: The power of C = P can be seen from the following facts: Facts: (i) PP PH NP C = P . Fact (i) is a consequence of Toda's theorem <ref> [18] </ref> that PP PH P PP combined with a theorem of Toran [22] which states NP PP = NP C = P . It is significant since it states that C = P is hard for the polynomial hierarchy under nondeterministic reductions.
Reference: [19] <author> S. </author> <title> Toda, "On Polynomial-Time Truth-Table Reducibility to C = P Sets", </title> <type> Colloquium, </type> <institution> Department of Computer Science, University of Chicago, </institution> <month> October 26, </month> <year> 1990. </year> <month> 18 </month>
Reference-contexts: For the first result, recall that truth-table reductions to NP are exactly as powerful as Turing reductions with logarithmically many queries, i.e., P NP tt ([7], [10]). Here we find the same is true of C = P. This result has also been found by Toda <ref> [19] </ref>. The result and the proof reported here were obtained independently 1 . The proof we give is typical of those that use the closure properties shared by NP and C 6= P.
Reference: [20] <author> S. Toda and M. Ogiwara, </author> <title> "Counting Classes Are as Hard as the Polynomial- Time Hierarchy", </title> <booktitle> to appear in 6th Annual Conference on Structure in Complexity Theory (1991). </booktitle>
Reference-contexts: It is significant since it states that C = P is hard for the polynomial hierarchy under nondeterministic reductions. Fact (ii) was proved by Toda and Ogiwara <ref> [20] </ref>, and in a stronger form by Tarui [16]. It is significant since it says that C = P is hard for the polynomial hierarchy under randomized reductions.
Reference: [21] <author> J. Toran, </author> <title> "Structural Properties of the Counting Hierarchy", </title> <type> Ph.D. thesis, </type> <institution> Facultat d'Informatica de Barcelona, </institution> <year> 1988. </year>
Reference-contexts: In fact we find that in some relativized world, there are sets that are recognizable with k + 1 queries to NP that cannot be recognized with k queries to C = P. One may regard this as a generalization of the result of Toran <ref> [21] </ref> that relative to some oracle, NP is not contained in C = P. In order to do this we again adapt the technique of [12] (section 4) to appropriate circuit problems.
Reference: [22] <author> J. Toran, </author> <title> "An Oracle Characterization of the Counting Hierarchy", </title> <booktitle> 3rd Annual Conference on Structure in Complexity Theory (1988) 213 - 223. </booktitle>
Reference-contexts: The power of C = P can be seen from the following facts: Facts: (i) PP PH NP C = P . Fact (i) is a consequence of Toda's theorem [18] that PP PH P PP combined with a theorem of Toran <ref> [22] </ref> which states NP PP = NP C = P . It is significant since it states that C = P is hard for the polynomial hierarchy under nondeterministic reductions. Fact (ii) was proved by Toda and Ogiwara [20], and in a stronger form by Tarui [16]. <p> 1, BH k (C) = fLjL = L 1 " L 2 ; L 1 2 BH k1 (C); L 2 2 Cg: where 3 Analogies Between NP and C 6= P It has been known for some time that C = P is closed under intersection (<ref> [22] </ref>, [23]). In [22] it was also proved that C = P is closed under unbounded cartesian product which implies that it is closed under (polynomial-time) conjunctive truth-table reductions. The proof of this fact is similar to the proof that C = P is closed under intersection. <p> Proof: The "if" part is clear. Then suppose C = P = C 6= P. Toran <ref> [22] </ref> has proved that NP PP = NP C = P = 9C = P. Hence if C = P = C 6= P, NP PP = 9C = P = 9C 6= P = C 6= P = C = P. <p> Since NP PP = NP C = P and PH PP = PH C = P <ref> [22] </ref>, we find the following Theorem 8 If for any k, BH k (C = P) co-BH k (C = P) then PH PP BH k (NP PP ) P NP PP kT .
Reference: [23] <author> K. Wagner, </author> <title> "Compact Descriptions and the Counting Polynomial Time Hierarchy", </title> <note> Acta Informatica 23 (1986) 325-356. </note>
Reference-contexts: Then #acc N (x) denotes the number of accepting paths of N on input x. #P is the class of functions f such that there exists a polynomial time-bounded nondeterministic machine N such that for all x, f (x) = #acc N (x). The class C = P <ref> [23] </ref> is defined to be the set of languages L such that there exist functions f 2 #P, t 2 FP and for all x, x 2 L if and only if f (x) = t (x). <p> P is defined as the set of languages L such that there exists a function f 2 #P and for all x, x 2 L if and only if f (x) is odd. We denote by ESAT the standard complete language <ref> [23] </ref> for C = P: ESAT = fhF ; nijF is a Boolean formula with exactly n satisfying truth assignments g. Obviously ESAT is complete for C 6= P. We now present other definitions that will be important in later sections. Let A and B be sets. <p> k &gt; 1, BH k (C) = fLjL = L 1 " L 2 ; L 1 2 BH k1 (C); L 2 2 Cg: where 3 Analogies Between NP and C 6= P It has been known for some time that C = P is closed under intersection ([22], <ref> [23] </ref>). In [22] it was also proved that C = P is closed under unbounded cartesian product which implies that it is closed under (polynomial-time) conjunctive truth-table reductions. The proof of this fact is similar to the proof that C = P is closed under intersection.
Reference: [24] <author> K. Wagner, </author> <title> "Bounded Query Classes", </title> <note> SIAM Journal of Computing 19 (1990) 833-846. 19 </note>
Reference-contexts: Following Wagner <ref> [24] </ref>, we define, for any complexity class C and for any bounding function b, the class C (b) as follows: A 2 C (b) if and only if there exists a B 2 C such that for any x, for all z where 1 z b (jxj), B (hx; zi) B <p> C (2 poly ) is defined as c2IN C (2 n c ). It was shown in <ref> [24] </ref> that NP (2 poly ) = P NP . We can prove the analogous result here. Theorem 12 C 6= P (2 poly ) = P C = P .
References-found: 24

