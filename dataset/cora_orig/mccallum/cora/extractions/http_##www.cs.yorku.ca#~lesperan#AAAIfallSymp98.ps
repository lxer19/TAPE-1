URL: http://www.cs.yorku.ca/~lesperan/AAAIfallSymp98.ps
Refering-URL: http://www.cs.utoronto.ca/~cogrobo/
Root-URL: 
Email: -lesperan,kenneth,jenkin-@cs.yorku.ca  
Title: Reactivity in a Logic-Based Robot Programming Framework  
Author: Yves Lesperance, Kenneth Tam, and Michael Jenkin 
Address: Canada, M3J 1P3  
Affiliation: Dept. of Computer Science, York University, Toronto, ON  
Abstract: A robot must often react to events in its environment and exceptional conditions by suspending or abandoning its current plan and selecting a new plan that is an appropriate response to the event. This paper describes how high-level controllers for robots that are reactive in this sense can conveniently be implemented in ConGolog, a new logic-based robot/agent programming language. Reactivity is achieved by exploiting ConGolog's prioritized concurrent processes and interrupts facilities. The language also provides nondeterministic constructs that support a form of planning. Program execution relies on a declarative domain theory to model the state of the robot and its environment. The approach is illustrated with a mail delivery application. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bratman, M.; Israel, D.; and Pollack, M. </author> <year> 1988. </year> <title> Plans and ressource-nounded practical reasoning. </title> <booktitle> Computational Intelligence 4 </booktitle> <pages> 349-355. </pages>
Reference: <author> Brooks, R. </author> <year> 1986. </year> <title> A robust layered control system for a mobile robot. </title> <journal> IEEE Journal on Robotics and Automation 2(1) </journal> <pages> 14-23. </pages>
Reference-contexts: Introduction Reactivity is usually understood as having mainly to do with strict constraints on reaction time. As such, much work on the design of reactive agents has involved non-deliberative approaches where behavior is hardwired <ref> (Brooks 1986) </ref> or produced from compiled universal plans (Schoppers 1987; Rosenschein & Kaelbling 1995). However, there is more to reacting to environmental events or exceptional conditions than reaction time.
Reference: <author> De Giacomo, G., and Levesque, H. J. </author> <year> 1998. </year> <title> An incremental interpreter for high-level programs with sensing. </title> <type> Technical Report, </type> <institution> Department of Computer Science, University of Toronto. </institution>
Reference-contexts: An adapted model involving incremental high-level program execution is developed in <ref> (De Giacomo & Levesque 1998) </ref>. <p> The addition of a conventional exception throwing and catching mechanism that terminates the current plan is being investigated. Another limitation concerns the lack of search/deliberation in the current high-level program. However, the new model of De Giacomo and Levesque <ref> (De Giacomo & Levesque 1998) </ref> provides a clean specification of incremental high-level program execution in the presence of sensing. This will allow us to incorporate controlled search in our programs while retaining a clean semantics. Another area under investigation is perceptual tasks.
Reference: <author> De Giacomo, G.; Lesperance, Y.; and Levesque, H. J. </author> <year> 1997. </year> <title> Reasoning about concurrent execution, prioritized interrupts, </title> <booktitle> and exogenous actions in the situation calculus. In Proceedings of the Fifteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 1221-1226. </pages>
Reference-contexts: A limitation of Golog for this kind of applications is that it provides limited support for writing reactive programs. In <ref> (De Giacomo, Lesperance, & Levesque 1997) </ref>, GonGolog, an extension of Golog that provides concurrent processes with possibly different priorities as well as interrupts was introduced. In this paper, we try to show that ConGolog is an effective tool for the design of high-level reactive control modules for robotics applications. <p> With interrupts, it is easy to write programs that are reactive in that they will suspend whatever task they are doing to handle given conditions as they arise. A more detailed description of ConGolog and a formal semantics appear in <ref> (De Giacomo, Lesperance, & Levesque 1997) </ref>. We give an example ConGolog program in section 4. A prototype ConGolog interpreter has been implemented in Prolog.
Reference: <author> Jenkin, M.; Bains, N.; Bruce, J.; Campbell, T.; Down, B.; Jasiobedzki, P.; Jepson, A.; Majarais, B.; Milios, E.; Nickerson, B.; Service, J.; Terzopoulos, D.; Tsotsos, J.; and Wilkes, D. </author> <year> 1994. </year> <title> ARK: Autonomous mobile robot for an industrial environment. </title> <booktitle> In Proc. IEEE/RSJ IROS. </booktitle>
Reference-contexts: We are currently porting the module to a RWI B12 mobile robot that was used in earlier experiments with a Golog-based controller. The software for this platform was developed during an earlier project concerned with building an experimental vehicle to conduct survey/inspection tasks in an industrial environment <ref> (Jenkin et al. 1994) </ref>. The system supports point to point navigation in a previously mapped environment and can use pre-positioned visual landmarks to correct odometry errors. It relies on touch, infrared and sonar sensors to sense unmodeled obstacles. The system's architecture conforms to the general scheme described earlier. <p> It relies on touch, infrared and sonar sensors to sense unmodeled obstacles. The system's architecture conforms to the general scheme described earlier. It provides two levels of control. An onboard low-level controller <ref> (Robinson & Jenkin 1994) </ref> performs all time-critical tasks such as collision avoidance and straight line path execution. The low-level controller assumes that the robot is always in motion and communicates with an offboard global path planner and user interface module known as the Navigator.
Reference: <author> Levesque, H. J.; Reiter, R.; Lesperance, Y.; Lin, F.; and Scherl, R. B. </author> <year> 1997. </year> <title> GOLOG: A logic programming language for dynamic domains. </title> <journal> Journal of Logic Programming 31(59-84). </journal>
Reference-contexts: Synthesizing plans at run-time provides great flexibility, but it is often computationally infeasible in complex domains, especially when the agent does not have complete knowledge and there are exogenous events (i.e. actions by other agents or natural events). In <ref> (Levesque et al. 1997) </ref>, it was argued that high-level program execution was a more practical alternative. <p> However, if the program happens to be almost deterministic, very little searching is required; as more and more nondeterminism is included, the search task begins to resemble traditional planning. Thus, in formulating a high-level program, the user gets to control the search effort required. In <ref> (Levesque et al. 1997) </ref>, Golog was proposed as a suitable language for expressing high-level programs for robots and autonomous agents. Golog was used to design a high-level robot control module for a mail delivery application (Tam et al. 1997). <p> A limitation of Golog for this kind of applications is that it provides limited support for writing reactive programs. In <ref> (De Giacomo, Lesperance, & Levesque 1997) </ref>, GonGolog, an extension of Golog that provides concurrent processes with possibly different priorities as well as interrupts was introduced. In this paper, we try to show that ConGolog is an effective tool for the design of high-level reactive control modules for robotics applications. <p> With interrupts, it is easy to write programs that are reactive in that they will suspend whatever task they are doing to handle given conditions as they arise. A more detailed description of ConGolog and a formal semantics appear in <ref> (De Giacomo, Lesperance, & Levesque 1997) </ref>. We give an example ConGolog program in section 4. A prototype ConGolog interpreter has been implemented in Prolog.
Reference: <author> McCarthy, J., and Hayes, P. </author> <year> 1979. </year> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> In Meltzer, B., and Michie, D., eds., </editor> <booktitle> Machine Intelligence, </booktitle> <volume> volume 4. </volume> <publisher> Edinburgh, UK: Edinburgh University Press. </publisher> <pages> 463-502. </pages>
Reference-contexts: Moreover, an interpreter for such programs must reason about the preconditions and effects of the actions in the program to find a legal terminating execution. We specify the required domain theories in the situation calculus <ref> (McCarthy & Hayes 1979) </ref>, a first-order language for representing dynamically changing worlds. In this language, a possible world history, which is simply a sequence of actions, is represented by a first order term called a situation.
Reference: <author> Rao, A., and Georgeff, M. </author> <year> 1992. </year> <title> An abstract architecture for rational agents. </title> <editor> In Nebel, B.; Rich, C.; and Swartout, W., eds., </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Third International Conference, </booktitle> <pages> 439-449. </pages> <address> Cambridge, MA: </address> <publisher> Morgan Kaufmann Publishing. </publisher>
Reference: <author> Reiter, R. </author> <year> 1991. </year> <title> The frame problem in the situation calculus: A simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In Lifschitz, V., ed., </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy. </booktitle> <address> San Diego, CA: </address> <publisher> Academic Press. </publisher> <pages> 359-380. </pages>
Reference-contexts: P oss (ff; s). * Successor state axioms, one for each fluent F , which characterize the conditions under which F (~x; do (a; s)) holds in terms of what holds in situation s; these axioms may be compiled from effects axioms, but provide a solution to the frame problem <ref> (Reiter 1991) </ref>. * Unique names axioms for the primitive actions. * Some foundational, domain independent axioms. Thus, the declarative part of a ConGolog program implementing a high-level controller for a robot will be such a theory.
Reference: <author> Robinson, M., and Jenkin, M. </author> <year> 1994. </year> <title> Reactive low level control of the ARK. </title> <booktitle> In Proceedings, Vision Interface '94, </booktitle> <pages> 41-47. </pages>
Reference-contexts: It relies on touch, infrared and sonar sensors to sense unmodeled obstacles. The system's architecture conforms to the general scheme described earlier. It provides two levels of control. An onboard low-level controller <ref> (Robinson & Jenkin 1994) </ref> performs all time-critical tasks such as collision avoidance and straight line path execution. The low-level controller assumes that the robot is always in motion and communicates with an offboard global path planner and user interface module known as the Navigator.
Reference: <author> Rosenschein, S. J., and Kaelbling, L. P. </author> <year> 1995. </year> <title> A situated view of representation and control. </title> <booktitle> Artificial Intelligence 73 </booktitle> <pages> 149-173. </pages>
Reference: <author> Schoppers, M. J. </author> <year> 1987. </year> <title> Universal plans for reactive robots in unpredictable environments. </title> <booktitle> In Proceedings of the Tenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> 1039-1046. </pages>
Reference: <author> Tam, K.; LLoyd, J.; Lesperance, Y.; Levesque, H.; Lin, F.; Marcu, D.; Reiter, R.; and Jenkin, M. </author> <year> 1997. </year> <title> Controlling autonomous robots with GOLOG. </title> <booktitle> In Proceedings of the Tenth Australian Joint Conference on Artificial Intelligence (AI-97), </booktitle> <pages> 1-12. </pages> <address> Perth, Australia. </address>
Reference-contexts: In (Levesque et al. 1997), Golog was proposed as a suitable language for expressing high-level programs for robots and autonomous agents. Golog was used to design a high-level robot control module for a mail delivery application <ref> (Tam et al. 1997) </ref>. This module was interfaced to systems providing path planning and low-level motion control, and successfully tested on several different robot platforms, including a Nomad 200, a RWI B21, and a RWI B12.
Reference: <author> Tam, K. </author> <year> 1998. </year> <title> Experiments in high-level robot control using ConGolog reactivity, failure handling, and knowledge-based search. </title> <type> Master's thesis, </type> <institution> Dept. of Computer Science, York University. </institution> <note> To appear. </note>
Reference-contexts: For example, the ConGolog primitive action startGoT o (p) is implemented as [planPath (coordinatesOf (p)); followPath], where planPath and follow path are operations supplied by the Navigator. For more details on the system, see <ref> (Tam 1998) </ref>. Discussion We have described how ConGolog can be used to implement high-level robot controllers that can cope with dynamic and unpredictable environments controllers that are reactive and support high-level plan reconsideration in response to exogenous events and exceptional conditions. <p> We are currently working on an application where packages must be delivered to the recipient in person and where the robot must use sophisticated search strategies to locate the recipient, for example, asking whether a co-worker has seen the recipient <ref> (Tam 1998) </ref>. The high-level program execution model of robot/agent control that underlies our approach is related to work on resource-bounded deliberative architectures (Bratman, Is--rael, & Pollack 1988; Rao & Georgeff 1992). One difference is that in our approach, plan selection is coded in the program.
References-found: 14

