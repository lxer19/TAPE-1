URL: ftp://ftp.cs.unc.edu/pub/users/munson/sync.ps
Refering-URL: http://www.cs.unc.edu/~munson/sync.html
Root-URL: http://www.cs.unc.edu
Title: Sync: A System for Mobile Collaborative Applications  
Author: Jonathan P. Munson and Prasun Dewan 
Date: March 14, 1997  
Address: Chapel Hill  
Affiliation: Department of Computer Science, University of North Carolina at  
Abstract: Sync is a new Java-based framework for developing collaborative applications for wireless mobile systems. Sync is based on objectoriented replication and offers high-level synchronization-aware classes based on existing Java classes. Programmers may also extend the Sync-provided classes to create new replicated classes, either to add functionality or to modify a classs merge policy. Sync supports fully disconnected operation and employs centralized, asynchronous synchronization. Application programmers use the Sync framework to define conflicts and specify conflict resolution on the basis of the applications structure and semantics. We discuss the general needs of wireless mobile applications, and present a high-function example application that would be useful to mobile users, to be used for illustration throughout the paper. Next we discuss related work, and evaluate each work relative to its ability to support the example application. We then present the Sync framework, motivating each feature with its use in the example application. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> L. Kalwell, S. Beckhardt, T. Halvorsen, R. Ozzie, and I. Greif, </author> <title> Replicated document management in a group communication system, in Groupware: Software for ComputerSupported Cooperative Work, </title> <editor> D. Marca and G. Bock, Editors. </editor> <booktitle> 1992, </booktitle> <publisher> IEEE Computer Society Press. </publisher> <address> p. </address> <month> 226235. </month>
Reference-contexts: TOOLKITS FOR MULTIUSER MOBILE APPLICATIONS Researchers have developed several toolkits to address the problems of mobile applications. These toolkits differ from Sync in the sets of features they offer and the tradeoffs made between flexibility and ease of use. Lotus Notes Lotus Notes <ref> [1] </ref> replicates document databases. Documents have record-like structure, the fields of which may contain arbitrary objects, which are opaque to Notes. The programmer declares static templates that define how documents are created and viewed.
Reference: 2. <author> J.J. Kistler and M. Satyanarayanan, </author> <title> Disconnected operation in the Coda file system, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol. 10, No. </volume> <month> 1 (February </month> <year> 1992), 1992, </year> <pages> pp. 325. </pages>
Reference-contexts: A Notes database could contain the drawing objects, but the objects would be opaque to Notes. Thus any concurrent updates to the same drawing would be considered in conflict, and thus require users to manually merge their changes. Coda Coda <ref> [2, 3] </ref> is a file system that supports disconnected operation by caching files in client workstations. Users have full access to the cached files when disconnected, during which time Coda records file updates in a log.
Reference: 3. <author> L.B. Mummert, M.R. Ebling, and M. Satyanarayanan, </author> <title> Exploiting weak connectivity for mobile file access, </title> <journal> Operating Systems Review, </journal> <volume> Vol. 29, No. 4, </volume> <year> 1995, </year> <pages> pp. 143155. </pages>
Reference-contexts: A Notes database could contain the drawing objects, but the objects would be opaque to Notes. Thus any concurrent updates to the same drawing would be considered in conflict, and thus require users to manually merge their changes. Coda Coda <ref> [2, 3] </ref> is a file system that supports disconnected operation by caching files in client workstations. Users have full access to the cached files when disconnected, during which time Coda records file updates in a log.
Reference: 4. <editor> D.B. Terry, et al., </editor> <title> Managing update conflicts in Bayou, a weakly connected replicated storage system, </title> <journal> Operating Systems Review, </journal> <volume> Vol. 29, No. 5, </volume> <year> 1995, </year> <pages> pp. 17283. </pages>
Reference-contexts: Coda performs conflict detection on an update-by-update basis, and thus if any updates are lost due to conflict, inconsistency may result unless all updates are independent of each other. Bayou Bayou <ref> [4] </ref> is a toolkit focused specifically on wireless mobile applications. A Bayou applications code and data are replicated at multiple clients and multiple servers. The servers provide synchronization services to the clients, and then synchronize among themselves.
Reference: 5. <author> A.D. Joseph, A.F. deLespinasse, J.A. Tauber, D.K. Gifford, and M.F. Kaashoek, </author> <title> Rover: a toolkit for mobile information access, </title> <journal> Operating Systems Review, </journal> <volume> Vol. 29, No. 5, </volume> <year> 1995, </year> <pages> pp. 15671. </pages>
Reference-contexts: Like Code, Bayou also processes updates one by one, but its conflict detection language allows it to detect conflicts between an update and a set of concurrent updates. Unlike the object model, its tuplestore data model is not naturally suited to representing the hierarchically structured example application. Rover Rover <ref> [5] </ref> offers two programming abstractions designed to address the problems of network disconnection and slow communications. Relocatable Dynamic Objects encapsulate the applications code and data. Initially resident on an applications home server, they may be imported to reside in the remote 6 clients physical memory, and updated locally.
Reference: 6. <author> J.P. Munson and P. Dewan, </author> <title> A flexible object merging framework, </title> <booktitle> Proc. ACM Conference on Computer Supported Cooperative Work, </booktitle> <year> 1994, </year> <pages> pp. 231242. </pages>
Reference-contexts: We are investigating policies and mechanisms that allow the server to defer conflict resolution. Merge model Syncs merge model describes how two sets of changes to an object are merged and their conflicts resolved. We have adapted the Suite merge model described in <ref> [6] </ref>, but have made several changes. First, due to our focus on mobile applications, Sync does not support interactive, user-to-user merging, as does Suite.
References-found: 6

