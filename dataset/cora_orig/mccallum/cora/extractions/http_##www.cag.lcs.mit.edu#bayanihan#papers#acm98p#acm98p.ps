URL: http://www.cag.lcs.mit.edu/bayanihan/papers/acm98p/acm98p.ps
Refering-URL: http://www.cag.lcs.mit.edu/bayanihan/papers/acm98p/html/
Root-URL: 
Email: lfgs,ward@cag.lcs.mit.edu  hirano@etl.go.jp  
Phone: 2  
Title: Towards Bayanihan: Building an Extensible Framework for Volunteer Computing Using Java  
Author: Luis F. G. Sarmenta, Satoshi Hirano, and Stephen A. Ward 
Web: URL: http://www.cag.lcs.mit.edu/bayanihan  
Address: Cambridge, MA 02139, USA  1-1-4 Umezono, Tsukuba, 305, Japan  
Affiliation: 1 MIT Laboratory for Computer Science  Electrotechnical Laboratory  
Abstract: Project Bayanihan seeks to develop the idea of volunteer computing, which allows people to very easily pool together their computers' processing power and cooperate in solving parallel problems. While the idea of volunteer computing offers many exciting new prospects in global supercomputing and collaboration, its realization involves many challenging research issues that need to be addressed. In this paper, we present a flexible object-oriented framework using Java and HORB that allows programmers to experiment with different approaches to these issues by simply extending and interconnecting basic library components. We also present results from a distributed web-crawling application written using the framework. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <institution> ACM 1997 Workshop on Java for Science and Engineering Computation. Las Ve gas, </institution> <month> June </month> <year> 1997. </year> <note> http://www.npac.syr.edu/users/gcf/03/javaforcse/ acmspecissue/latestpapers.html </note>
Reference-contexts: Most early projects such as ATLAS, ParaWeb, JPVM, and many newer projects such as IceT and others presented or referred to in <ref> [1] </ref> use Java applications. These are more powerful and versatile than applets, but require some technical expertise and setup effort from volunteer users.
Reference: 2. <author> Arash Baratloo, Mehmet Karaul, Zvi Kedem, and Peter Wyckoff. </author> <title> Charlotte: Meta computing on the Web. </title> <booktitle> Proc. of the 9th Intl. Conference on Parallel and Distributed Computing Systems, </booktitle> <month> Sept. </month> <year> 1996. </year> <note> http://cs.nyu.edu/milan/charlotte/ </note>
Reference-contexts: Programmers can even implement entirely new parallel programming models by creating new sets of engines, managers, and data pools. At present, we have implemented a generic set of engines and managers that support master-worker style programming with eager scheduling <ref> [2] </ref>, and have used it for a variety of demo applications including factoring, Mandelbrot set rendering, and distributed web-crawling. We are currently working on extending the basic generic objects to implement performance, reliability, and programmability improvements. <p> Projects like Bayanihan that support the use of applets and Web browsers to allow "ordinary" users to volunteer their computers seem to be fewer, but have also been growing in number. These include simple systems such as DAMPP [8], and more complex and general-purpose frameworks such as Charlotte <ref> [2] </ref>, and Javelin [4]. Many of these projects provide the programmer with a way to easily generate different applications, but are usually restricted to following a particular programming model.
Reference: 3. <author> R. D. Blumofe, C. F. Joerg, B. C. Kuszmaul, C. E. Leiserson, K. H. Randall, and Y. Zhou. Cilk: </author> <title> An Efficient Multithreaded Runtime System, </title> <booktitle> in Proceedings of the 5th ACM SIGPLAN Symposium on Principles of Parallel Programming, </booktitle> <month> July, </month> <year> 1995, </year> <institution> Santa Barbara, California. </institution> <note> http://theory.lcs.mit.edu/~cilk/ </note>
Reference-contexts: We are currently working on extending the basic generic objects to implement performance, reliability, and programmability improvements. In the future, we also plan to implement generic components for supporting Cilk <ref> [3] </ref>, and other adaptively parallel programming models. 3 An Example: Distributed Web Crawling In [7], we presented the results of a factoring application which demonstrated the potential use of Java-based volunteer computing and the Bayanihan framework for computationally-intensive applications.
Reference: 4. <author> P. Cappello, B. O. Christiansen, M. F. Ionescu, M. O. Neary, K. E. Schauser, and D. Wu. Javelin: </author> <title> Internet-Based Parallel Computing Using Java. </title> <booktitle> ACM Workshop on Java for Science and Engineering Computation. </booktitle> <address> Las Vegas, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: These include simple systems such as DAMPP [8], and more complex and general-purpose frameworks such as Charlotte [2], and Javelin <ref> [4] </ref>. Many of these projects provide the programmer with a way to easily generate different applications, but are usually restricted to following a particular programming model.
Reference: 5. <author> HIRANO Satoshi. </author> <title> Distributed Execution of Java Programs. WorldWide Comput ing and Its Applications, </title> <booktitle> Springer Lecture Notes in Computer Science 1274, </booktitle> <year> 1997. </year>
Reference-contexts: While the idea of volunteer computing offers many exciting new prospects in global supercomputing and collaboration, its realization involves addressing many challenging issues such as adaptive parallelism, fault-tolerance, computational security, and scalability [7]. To address these issues, we have built a software framework using Java and HORB <ref> [5] </ref>, a distributed object library similar to RMI but not requiring JDK 1.1 (which, unfortunately, is presently not as ubiquitous as JDK 1.0).
Reference: 6. <author> Don Roberts, and Ralph Johnson. </author> <title> Evolving Frameworks: A Pattern Language for Developing Object-Oriented Frameworks. HTML document. </title> <institution> University of Illinois. </institution> <year> 1997. </year> <note> http://st-www.cs.uiuc.edu/users/droberts/evolve.html </note>
Reference-contexts: By allowing programmers to access remote objects without worrying about network communication details, HORB allows us to take full advantage of object-oriented techniques to build an extensible framework <ref> [6] </ref> that lets programmers experiment with different approaches to research issues by simply filling-in appropriate hot-spots in the framework. 2 Framework Design Fig. 1.
Reference: 7. <author> Luis F. G. Sarmenta. Bayanihan: </author> <title> Web-Based Volunteer Computing Using Java. </title> <booktitle> Proc. of the 2nd Intl. Conference on Worldwide Computing and its Applications, </booktitle> <address> Tsukuba, Japan, </address> <month> March, </month> <year> 1998. </year> <note> http://www.cag.lcs.mit.edu/bayanihan </note>
Reference-contexts: While the idea of volunteer computing offers many exciting new prospects in global supercomputing and collaboration, its realization involves addressing many challenging issues such as adaptive parallelism, fault-tolerance, computational security, and scalability <ref> [7] </ref>. To address these issues, we have built a software framework using Java and HORB [5], a distributed object library similar to RMI but not requiring JDK 1.1 (which, unfortunately, is presently not as ubiquitous as JDK 1.0). <p> We are currently working on extending the basic generic objects to implement performance, reliability, and programmability improvements. In the future, we also plan to implement generic components for supporting Cilk [3], and other adaptively parallel programming models. 3 An Example: Distributed Web Crawling In <ref> [7] </ref>, we presented the results of a factoring application which demonstrated the potential use of Java-based volunteer computing and the Bayanihan framework for computationally-intensive applications. Here, we present an application which demonstrates another interesting potential use of volunteer computing| multiplying not just computational power, but communication power as well.
Reference: 8. <author> Laurence Vanhelsuwe. </author> <title> Create your own supercomputer with Java. </title> <address> JavaWorld, </address> <month> Jan. </month> <year> 1997. </year> <note> http://www.javaworld.com/jw-01-1997/jw-01-dampp.ibd.html </note>
Reference-contexts: Projects like Bayanihan that support the use of applets and Web browsers to allow "ordinary" users to volunteer their computers seem to be fewer, but have also been growing in number. These include simple systems such as DAMPP <ref> [8] </ref>, and more complex and general-purpose frameworks such as Charlotte [2], and Javelin [4]. Many of these projects provide the programmer with a way to easily generate different applications, but are usually restricted to following a particular programming model.
References-found: 8

