URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-95-22.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: An Implementation Model for Contexts and Negation in Conceptual Graphs  
Author: John Esch Robert Levinson 
Keyword: contexts, negation, conceptual graphs, consistency, inference, retrieval, knowledge representation, lattice  
Address: P.O. Box 64525 U1T23 St. Paul, MN 55164  Building  Santa Cruz, CA 95064  
Affiliation: Systems Group  Department of Computer and Information Sciences 225 Applied Sciences  University of California  
Note: Unisys Government  
Pubnum: UCSC-CRL-95-22  
Email: esch@email.sp.paramax.com  levinson@cse.ucsc.edu  
Phone: (612) 456-3947  (408) 459-2087  
Date: May 1, 1995  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> H. Boley. </author> <title> Pattern associativity and the retrieval of semantic networks. Computers and Mathematics with Applications, </title> <booktitle> 23(6-9):601-638, 1992. Part 2 of Special Issue on Semantic Networks in Artificial Intelligence, Fritz Lehmann, editor. </booktitle>
Reference: [2] <author> M. </author> <title> Chein and M.L. Mugnier. Conceptual Graphs: Fundamental Notions In Revue d'Intelligence Artificielle, </title> <address> n14, </address> <year> 1992, </year> <month> pp365-406. </month>
Reference-contexts: Each of the formation rules has a mutual inverse: Simplify with Copy, Restrict with Join, and Unrestrict with Detach. Some work in the same spirit is taken up in <ref> [2] </ref>. In the following, each of the formation rules is defined in terms of more primitive individual concept and relation operations. The notation type (r1) type (r2) is used. It means that r1 is a subtype of r2 and hence more specialized.
Reference: [3] <author> G. Ellis. </author> <title> Compiled hierarchical retrieval. </title> <editor> In E. Way, editor, </editor> <booktitle> Proceedings of Sixth Annual Workshop on Conceptual Structures, </booktitle> <pages> pages 187-208, </pages> <address> SUNY-Binghamton, </address> <year> 1991. </year>
Reference-contexts: Some of the major contributing notions include: 1. The storing of the CG generalization hierarchy as a CNF lattice that exploits the duality between Boolean AND and OR for storage and retrieval efficiency. 2. The extension of previous implementation models <ref> [3, 18] </ref> that exploit containment links to avoid repeated storage of structures, to store nested contexts. 3. The association of labels (codes) with nodes and links that indicate whether the positive or negated version is being asserted or inferred. 4. <p> The treatment of contexts and complex referents in the same unifying manner. 7. The extension of existing retrieval algorithms for exploring the generalization hierar chy to cover the full variety of CGs <ref> [16, 3, 4] </ref>. 8. A formalization of Peirce's inference rules in terms of formation rules. In Section 2, Formation Rules, we restate the basic rules for transforming one CG to another. These are foundational because the generalization hierarchy/lattice is based on the partial ordering relation induced by the projection operator.
Reference: [4] <author> G. Ellis. </author> <title> Efficient retrieval from hierarchies of objects using lattice operations. </title> <editor> In G. Mineau and B. Moulin, editors, </editor> <booktitle> Proceedings of First International Conference on Conceptual Structures (ICCS-93), </booktitle> <address> Montreal, </address> <year> 1993. </year>
Reference-contexts: The treatment of contexts and complex referents in the same unifying manner. 7. The extension of existing retrieval algorithms for exploring the generalization hierar chy to cover the full variety of CGs <ref> [16, 3, 4] </ref>. 8. A formalization of Peirce's inference rules in terms of formation rules. In Section 2, Formation Rules, we restate the basic rules for transforming one CG to another. These are foundational because the generalization hierarchy/lattice is based on the partial ordering relation induced by the projection operator. <p> Section 5 is on Adding Negation. It describes how to extend the generalization hierarchy/lattice to cover the negative graphs 2. Formation Rules 2 that were not included in previous work either. In Section 6, Extended Algorithms, the basic structure of the previous Method III algorithm <ref> [4, 15] </ref> is extended, without increasing the complexity, to cover complex referents, such as names, variables, contexts, and negative graphs. Section 7 covers Peirce Inference Rules. With conjunction and negation it is possible to represent all logical expressions. <p> To do it, one has to make concepts with different type labels coreferent. All that doing so implies is that the referent of the two concepts conforms to two types. At the implementation level, all types are converted to bitcodes for fast comparison. <ref> [4] </ref>. 5 "Unrestrict" is the currently used term; however, in the future, the use of the term "broaden" might be more appropriate. 3. Lattice Terminology 5 The CG formation rules can be simplified and clarified by considering simplify and copy to be forming syntactic variants, or equivalence rules. <p> The basic algorithms depend on the mathematical properties of lattices. Techniques for improving algorithm efficiency embed this lattice in a bit encoded lattice where operations are much more efficient <ref> [4] </ref>. In this section we give a few definitions and apply them to the CG lattice. The sections following this one, on adding contexts and negation, extend the use of the lattice structure. <p> Each of them is an immediate predecessor of the context. Thus, IP ([T: g1 g2]) = f [T] g1 g2g. To show how contexts fit into and extend the CG lattice, we add to an example commonly used <ref> [4, 14] </ref>. It involves the 7 graphs given below. The lattice that results from inserting these 7 graphs into a CG database utilizing the original Method III algorithm is shown in Figure 4.1 (left). <p> Augmented Algorithms 11 The algorithm considers graphs in topological sort order <ref> [4] </ref> by using a combination of a FIFO queue called C and the addition of a depth to each graph node. The depth is one greater than the largest depth of its immediate predecessors, IPs. The function pop (C) returns the next graph from C. <p> If IS (X) is the set of immediate successors of graph X, then IS'(X) returns the members of IS (X) which have depth one greater than X. The procedure push (C, SET) pushes set SET onto the FIFO queue C. The augmentation is to the original Method III algorithm <ref> [4, 14] </ref> to add Phase 0, the greatest lower bound (GLB) test, negation checking, and Phase IV. Phase 0: Handle negation and assertions. 1. Set Q = Q minus pairs of leading :'s. 2.
Reference: [5] <author> G. Ellis and R. Levinson. </author> <booktitle> Proceedings of the Fourth International Workshop on Peirce: A Conceptual Graph Workbench. In association with the Second International Conference on Conceptual Structures, </booktitle> <address> ICCS'94, College Park, Maryland, USA, </address> <month> August 19, </month> <year> 1994. </year>
Reference-contexts: graphs? How is negation handled? Are complex referents too complex to use? Does it properly map the mathematical relationship of Peirce's rules to Sowa's [21, 22, 23] formation rules? Although conceptual graph (CG) theory has been discussed in depth for the past ten years, and several implementations have been developed <ref> [5] </ref>, these full implementation questions have largely been neglected. In this paper we address some of these omissions. In particular, we give implementation methods for handling negation, arbitrarily nested contexts, the canonical formation rules, and lambda abstraction. <p> References 14 first envisioned by Peirce, will be more deeply appreciated and complete implementations of his theory, such as incorporating our approach into the Peirce Conceptual Graphs Work bench <ref> [5] </ref>, will soon come to pass.
Reference: [6] <author> G. Ellis and F. Lehmann. </author> <title> Exploiting the Induced Order on Type-labeled Graphs for Fast Knowledge Retrieval. </title> <editor> In W.M. Tepfenhart, J.P. Dick and J.F. Sowa editors Conceptual Structures: </editor> <booktitle> Current Practices, the proceedings of the Second International Conference on Conceptual Structures, </booktitle> <address> ICCS'94, College Park, Maryland, USA, </address> <publisher> Springer-Verlag, </publisher> <month> August, </month> <year> 1994. </year>
Reference-contexts: To summarize, every generic concept/context has, potentially, under it in the generalization lattice a sublattice consisting of all possible combinations in any order of icons, indexes, and graphs with the bottom being, implicitly, all of them together. 7 Similarly, every graph has, potentially, under it something like the cross product <ref> [6] </ref> of these individual sublattices with a common bottom where each concept of the graph has all possible referent values. A context is a concept that has one or more graphs as its referent. Each of them is an immediate predecessor of the context.
Reference: [7] <author> J.W. Esch. </author> <title> Contexts as White Box Concepts. </title> <booktitle> In Supplemental Proceedings of First International Conference on Conceptual Structures: Theory and Application, </booktitle> <address> Quebec City, Canada, </address> <month> August 4-7, </month> <year> 1993, </year> <pages> pages 17-29. </pages>
Reference-contexts: Also, is not necessarily unique, [&gt;]g could map to any of g's concepts. Note that for any graph g2CG, g g. 4. Adding Contexts and Complex Referents 6 4 Adding Contexts and Complex Referents In the black box view of a context <ref> [7] </ref> it is thought of as a special kind of concept, able to participate in CGs in the same way that any concept can. In the white box view of a context, it is thought of as a special kind of referent.
Reference: [8] <author> J.W. Esch. </author> <title> Contexts and Concepts: Abstraction Duals. </title> <booktitle> In em Proceedings of Second International Conference on Conceptual Structures, </booktitle> <address> ICCS'94, College Park, Maryland, USA, </address> <month> August </month> <year> 1994, </year> <pages> pages 175-184. </pages>
Reference-contexts: In the white box view of a context, it is thought of as a special kind of referent. This duality leads to thinking of contexts and concepts as abstraction duals <ref> [8, 9] </ref>.
Reference: [9] <author> J.W. Esch. </author> <title> Contexts, </title> <booktitle> Canons and Coreferent Types. In em Proceedings of Second International Conference on Conceptual Structures, </booktitle> <address> ICCS'94, College Park, Maryland, USA, </address> <month> August </month> <year> 1994, </year> <pages> pages 185-195. </pages>
Reference-contexts: In the white box view of a context, it is thought of as a special kind of referent. This duality leads to thinking of contexts and concepts as abstraction duals <ref> [8, 9] </ref>.
Reference: [10] <author> B. Goertzel. </author> <title> Chaotic logic : language, </title> <booktitle> thought, and reality from the perspective of complex systems science In IFSR International Series on Systems Science and Engineering v.9., </booktitle> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: negative version of the parent projects to satisfy the subsumption relation. 9 In some logics a contradiction does not undermine the integrity of the entire database and there are other more "avante gard" solutions, such as not letting the contradiction be used in proofs in which it is not relevant. <ref> [10] </ref> 5.
Reference: [11] <author> J.A. Goguen and F.J. Varela. </author> <title> Systems and Distinctions: Duality and Complementarity. </title> <journal> In International Journal of Systems, </journal> <volume> 5(1) </volume> <pages> 31-43, </pages> <year> 1979. </year>
Reference-contexts: The choice of considering the level above or below corresponds to a choice of treating the given system as autonomous or controlled (constrained) <ref> [11] </ref>.
Reference: [12] <author> J. Gould and R. Levinson. </author> <title> Experience-based adaptive search. </title> <booktitle> In Machine Learning:A Multi-Strategy Approach, </booktitle> <volume> volume 4. </volume> <publisher> Morgan Kauffman, </publisher> <year> 1992. </year>
Reference-contexts: The ability of the retrieval algorithms to find all syntactic implications of graphs at any contextual level provides exactly the information needed to employ higher-order inference rules. Our other work on heuristic search and machine learning <ref> [12] </ref> may also be able to improve the efficiency of the inference system. It is our hope that the implementation model in this paper will extend the scope of discussion in the CG community to include the hard issues that we have ignored up until present.
Reference: [13] <author> R. Levinson. </author> <title> A self-organizing retrieval system for graphs. </title> <booktitle> In AAAI-84, </booktitle> <pages> pages 203-206. </pages> <publisher> Morgan Kaufman, </publisher> <year> 1984. </year> <note> References 15 </note>
Reference: [14] <author> R. Levinson. </author> <title> Pattern associativity and the retrieval of semantic networks. Computers and Mathematics with Applications, </title> <booktitle> 23(6-9):573-600, 1992. Part 2 of Special Issue on Semantic Networks in Artificial Intelligence, </booktitle> <editor> Fritz Lehmann, editor. </editor> <booktitle> Also reprinted on pages 573-600 of the book, Semantic Networks in Artificial Intelligence, </booktitle> <editor> Fritz Lehmann, editor, </editor> <publisher> Pergammon Press, </publisher> <year> 1992. </year>
Reference-contexts: Each of them is an immediate predecessor of the context. Thus, IP ([T: g1 g2]) = f [T] g1 g2g. To show how contexts fit into and extend the CG lattice, we add to an example commonly used <ref> [4, 14] </ref>. It involves the 7 graphs given below. The lattice that results from inserting these 7 graphs into a CG database utilizing the original Method III algorithm is shown in Figure 4.1 (left). <p> If IS (X) is the set of immediate successors of graph X, then IS'(X) returns the members of IS (X) which have depth one greater than X. The procedure push (C, SET) pushes set SET onto the FIFO queue C. The augmentation is to the original Method III algorithm <ref> [4, 14] </ref> to add Phase 0, the greatest lower bound (GLB) test, negation checking, and Phase IV. Phase 0: Handle negation and assertions. 1. Set Q = Q minus pairs of leading :'s. 2.
Reference: [15] <author> R. Levinson and G. Ellis. </author> <title> Multilevel hierarchical retrieval. </title> <booktitle> Knowledge-Based Systems, </booktitle> <year> 1992. </year>
Reference-contexts: Section 5 is on Adding Negation. It describes how to extend the generalization hierarchy/lattice to cover the negative graphs 2. Formation Rules 2 that were not included in previous work either. In Section 6, Extended Algorithms, the basic structure of the previous Method III algorithm <ref> [4, 15] </ref> is extended, without increasing the complexity, to cover complex referents, such as names, variables, contexts, and negative graphs. Section 7 covers Peirce Inference Rules. With conjunction and negation it is possible to represent all logical expressions.
Reference: [16] <author> R. Levinson and Karplus K. </author> <title> Graph-isomorphism and experience-based planning. </title> <editor> In D. Subramaniam, editor, </editor> <booktitle> Proceedings of Workshop on Knowledge Compilation and SpeedUp Learning, </booktitle> <address> Amherst, MA., </address> <month> June </month> <year> 1993. </year>
Reference-contexts: The treatment of contexts and complex referents in the same unifying manner. 7. The extension of existing retrieval algorithms for exploring the generalization hierar chy to cover the full variety of CGs <ref> [16, 3, 4] </ref>. 8. A formalization of Peirce's inference rules in terms of formation rules. In Section 2, Formation Rules, we restate the basic rules for transforming one CG to another. These are foundational because the generalization hierarchy/lattice is based on the partial ordering relation induced by the projection operator.
Reference: [17] <author> R.A. Levinson. </author> <title> Exploiting the physics of state-space search. </title> <booktitle> In Proceedings of AAAI Symposium on Games:Planning and Learning, </booktitle> <pages> pages 157-165. </pages> <publisher> AAAI Press, </publisher> <year> 1993. </year>
Reference: [18] <author> R. Levinson. UDS: </author> <title> A Universal Data Structure. </title> <booktitle> In Proceedings of Second International Conference on Conceptual Structures, </booktitle> <address> ICCS'94, College Park, Maryland, USA, </address> <month> August </month> <year> 1994, </year> <pages> pages 230-250. </pages>
Reference-contexts: Some of the major contributing notions include: 1. The storing of the CG generalization hierarchy as a CNF lattice that exploits the duality between Boolean AND and OR for storage and retrieval efficiency. 2. The extension of previous implementation models <ref> [3, 18] </ref> that exploit containment links to avoid repeated storage of structures, to store nested contexts. 3. The association of labels (codes) with nodes and links that indicate whether the positive or negated version is being asserted or inferred. 4. <p> Section 3, Lattice Terminology, explains the basic terminology needed to understand and use lattices to store the CG database. Section 4, Adding Contexts, adds complex referents which include contexts. Previous work defining a Universal Data Structure (UDS) to store the CG database <ref> [18] </ref> did not include complex referents with icons, indexes, and symbols. This section shows how various forms of them, e.g. names, variables, literals, and graphs for contexts, can be added to the generalization lattice. Section 5 is on Adding Negation. <p> That is, T1:*x][T1:*x]...[T2:*y] and [T2:*y][T:*x]...[T:*y]. The impact on the query/insert algorithm, of handling complex referents, is minimal because all these complex referent checks are part of the isomorphism test. In Method V, once bindings are found, they are propagated. <ref> [18] </ref> 8 The original syntax used = signs as in [T:*x=*y]. 5. Adding Negation 8 5 Adding Negation The best way to think about how CGs are stored, when negative contexts are included, is as a lattice over the syntactic structure of graphs, not as all possible semantic implications.
Reference: [19] <author> D.D. Roberts. </author> <title> The existential graphs. </title> <booktitle> In Semantic Networks in Artificial Intelligence, </booktitle> <pages> pages 639-664. Roberts, </pages> <year> 1992. </year>
Reference: [20] <author> E. Sciore. </author> <title> A complete axiomatization for join dependencies. </title> <journal> JACM, </journal> <volume> 29(2) </volume> <pages> 373-393, </pages> <month> April </month> <year> 1982. </year>
Reference: [21] <author> J.F. Sowa. </author> <title> Conceptual Structures. </title> <publisher> Addison-Wesley, </publisher> <year> 1984. </year>
Reference-contexts: Is your conceptual graphs database consistent? Does it store and process nested context graphs? How is negation handled? Are complex referents too complex to use? Does it properly map the mathematical relationship of Peirce's rules to Sowa's <ref> [21, 22, 23] </ref> formation rules? Although conceptual graph (CG) theory has been discussed in depth for the past ten years, and several implementations have been developed [5], these full implementation questions have largely been neglected. In this paper we address some of these omissions. <p> And Section 8 concludes by giving future directions. 2 Formation Rules The formation rules are a foundational part of CG theory because they define the partial ordering relation used to build the syntactic generalization hierarchy. They were originally defined by Sowa in 1984 <ref> [21] </ref> and refined in his latest book [23]. We have streamlined and clarified those definitions by defining three kinds of operations on conceptual graphs, equivalence preserving, specialization, and generalization. Each of the formation rules has a mutual inverse: Simplify with Copy, Restrict with Join, and Unrestrict with Detach. <p> Another key idea is how to handle coreference. John Sowa <ref> [21] </ref> handled the problem of coreference by propagating aliases down each line of identity from all dominant concepts. <p> Conclusions and Summary 13 With the above in mind, here's a restatement/merge of the Peirce rules in John Sowa's 1984 book <ref> [21] </ref> and in the draft of his new book [23] using our formation rules. Definition: Erasure. An evenly enclosed context may be generalized by applying the following formation rules to one or more of the graphs contained in the context: erasure, unrestrict, or detach from evenly enclosed dominant concepts.
Reference: [22] <author> J.F. Sowa. </author> <title> Conceptual Graphs Summary. In Conceptual Structures: Current Research and Practice, </title> <editor> T. Nagle et. al. Ed., </editor> <publisher> Ellis Horwood, </publisher> <year> 1992. </year>
Reference-contexts: Is your conceptual graphs database consistent? Does it store and process nested context graphs? How is negation handled? Are complex referents too complex to use? Does it properly map the mathematical relationship of Peirce's rules to Sowa's <ref> [21, 22, 23] </ref> formation rules? Although conceptual graph (CG) theory has been discussed in depth for the past ten years, and several implementations have been developed [5], these full implementation questions have largely been neglected. In this paper we address some of these omissions.
Reference: [23] <author> J.F. Sowa. </author> <title> Knowledge Representation: Logical, </title> <journal> Philosophical, </journal> <note> and Computational Foundations. Book in preparation. To be published by PWS Publishing Company, </note> <institution> Boston, Massachusetts. </institution>
Reference-contexts: Is your conceptual graphs database consistent? Does it store and process nested context graphs? How is negation handled? Are complex referents too complex to use? Does it properly map the mathematical relationship of Peirce's rules to Sowa's <ref> [21, 22, 23] </ref> formation rules? Although conceptual graph (CG) theory has been discussed in depth for the past ten years, and several implementations have been developed [5], these full implementation questions have largely been neglected. In this paper we address some of these omissions. <p> They were originally defined by Sowa in 1984 [21] and refined in his latest book <ref> [23] </ref>. We have streamlined and clarified those definitions by defining three kinds of operations on conceptual graphs, equivalence preserving, specialization, and generalization. Each of the formation rules has a mutual inverse: Simplify with Copy, Restrict with Join, and Unrestrict with Detach. <p> Conclusions and Summary 13 With the above in mind, here's a restatement/merge of the Peirce rules in John Sowa's 1984 book [21] and in the draft of his new book <ref> [23] </ref> using our formation rules. Definition: Erasure. An evenly enclosed context may be generalized by applying the following formation rules to one or more of the graphs contained in the context: erasure, unrestrict, or detach from evenly enclosed dominant concepts. Definition: Insertion.
Reference: [24] <author> M. Willems. </author> <title> Generalization of Conceptual Graphs. </title> <booktitle> In Proceedings of Sixth Annual Workshop on Conceptual Graphs, Binghamton, </booktitle> <address> New York, </address> <institution> State Univ. of New York, </institution> <year> 1991. </year>
Reference-contexts: The association of labels (codes) with nodes and links that indicate whether the positive or negated version is being asserted or inferred. 4. The representation of a CG hierarchy as a hierarchy over equivalence classes of CGs rather than over individual structures as is discussed in <ref> [24] </ref>. 5. A more elegant statement of the canonical formation rules that more clearly distin guishes restriction and join. 6. The treatment of contexts and complex referents in the same unifying manner. 7.
References-found: 24

