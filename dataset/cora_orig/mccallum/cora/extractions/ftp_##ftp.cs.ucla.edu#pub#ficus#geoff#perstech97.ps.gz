URL: ftp://ftp.cs.ucla.edu/pub/ficus/geoff/perstech97.ps.gz
Refering-URL: http://ficus-www.cs.ucla.edu/project-members/geoff/pubs.html
Root-URL: http://www.cs.ucla.edu
Title: Experience with an Automated Hoarding System  
Author: Geoffrey H. Kuenning, Peter Reiher, and Gerald J. Popek 
Abstract: Hoarding is a technique in which a portable computer caches files before disconnecting from a network, so that the files will be available during the disconnection period. Predictive hoarding extends this approach to automatically predict the set of files that should be hoarded. We report the results of a study of the Seer predictive hoarding system, which examined both live and simulated usage. This is by far the most detailed study of hoarding that has been carried out to date. Our results show not only that predictive hoarding is feasible, but that Seer has excellent performance that significantly improves disk-space usage on mobile computers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gregory J. Pottie. </author> <title> System design choices in personal communications. </title> <journal> IEEE Personal Communications Magazine, </journal> <volume> 2(5) </volume> <pages> 50-67, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Gerald Popek is also affiliated with Platinum technology. E-mail: geoff@fmg.cs.ucla.edu, reiher@fmg.cs.ucla.edu, popek@platinum.com many research and commercial efforts to rectify this situation by providing wireless communication <ref> [1, 2] </ref>, there are also numerous roadblocks that will either slow deployment for a significant time, or remain fundamentally insurmountable.
Reference: [2] <author> Otto Spaniol, Andreas Fasbender, Simon Hoff, Josef Kaltwasser, and Jurgen Kassubek. </author> <title> Impacts of mobility on telecommunication and data communication networks. </title> <journal> IEEE Personal Communications Magazine, </journal> <volume> 2(5) </volume> <pages> 20-33, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Gerald Popek is also affiliated with Platinum technology. E-mail: geoff@fmg.cs.ucla.edu, reiher@fmg.cs.ucla.edu, popek@platinum.com many research and commercial efforts to rectify this situation by providing wireless communication <ref> [1, 2] </ref>, there are also numerous roadblocks that will either slow deployment for a significant time, or remain fundamentally insurmountable.
Reference: [3] <author> Richard G. Guy, John S. Heidemann, Wai Mak, Thomas W. Page, Jr., Gerald J. Popek, and Dieter Rothmeier. </author> <title> Implementation of the Ficus replicated file system. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 63-71. </pages> <institution> University of California, Los Angeles, USENIX, </institution> <month> June </month> <year> 1990. </year>
Reference-contexts: There are a number of systems that have successfully automated all or part of the hoarding process. Some of the better-known are Ficus <ref> [3, 4] </ref>, Coda [5, 6], and Little Work [7], all of which allow files to be replicated while connected and updated while disconnected. However, replication only addresses half of the problem of disconnected operation.
Reference: [4] <author> John S. Heidemann, Thomas W. Page, Jr., Richard G. Guy, and Gerald J. Popek. </author> <title> Primarily disconnected operation: Experiences with Ficus. </title> <booktitle> In Proceedings of the Second Workshop on Management of Replicated Data, </booktitle> <pages> pages 2-5. </pages> <institution> University of California, Los Angeles, IEEE, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: There are a number of systems that have successfully automated all or part of the hoarding process. Some of the better-known are Ficus <ref> [3, 4] </ref>, Coda [5, 6], and Little Work [7], all of which allow files to be replicated while connected and updated while disconnected. However, replication only addresses half of the problem of disconnected operation.
Reference: [5] <author> James J. Kistler and Mahadev Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1) </volume> <pages> 3-25, </pages> <year> 1992. </year>
Reference-contexts: There are a number of systems that have successfully automated all or part of the hoarding process. Some of the better-known are Ficus [3, 4], Coda <ref> [5, 6] </ref>, and Little Work [7], all of which allow files to be replicated while connected and updated while disconnected. However, replication only addresses half of the problem of disconnected operation. It is not helpful to hoard files on a mobile computer if they are the wrong files.
Reference: [6] <author> Mahadev Satyanarayanan, James J. Kistler, Pu-neet Kumar, Maria E. Okasaki, Ellen H. Siegel, and David C. Steere. Coda: </author> <title> A highly available file system for a distributed workstation environment. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(4) </volume> <pages> 447-459, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: There are a number of systems that have successfully automated all or part of the hoarding process. Some of the better-known are Ficus [3, 4], Coda <ref> [5, 6] </ref>, and Little Work [7], all of which allow files to be replicated while connected and updated while disconnected. However, replication only addresses half of the problem of disconnected operation. It is not helpful to hoard files on a mobile computer if they are the wrong files.
Reference: [7] <author> L. B. Huston and Peter Honeyman. </author> <title> Disconnected operation for AFS. </title> <booktitle> In Proceedings of the USENIX Symposium on Mobile and Location-Independent Computing, </booktitle> <pages> pages 1-10. </pages> <publisher> USENIX, </publisher> <year> 1993. </year>
Reference-contexts: There are a number of systems that have successfully automated all or part of the hoarding process. Some of the better-known are Ficus [3, 4], Coda [5, 6], and Little Work <ref> [7] </ref>, all of which allow files to be replicated while connected and updated while disconnected. However, replication only addresses half of the problem of disconnected operation. It is not helpful to hoard files on a mobile computer if they are the wrong files.
Reference: [8] <author> Mahadev Satyanarayanan, James J. Kistler, Lily B. Mummert, Maria R. Ebling, Puneet Ku-mar, and Qi Lu. </author> <title> Experience with disconnected operation in a mobile computing environment. </title> <booktitle> In Proceedings of the USENIX Symposium on Mobile and Location-Independent Computing, </booktitle> <pages> pages 11-28, </pages> <address> Cambridge, MA, </address> <month> August </month> <year> 1993. </year> <booktitle> USENIX. </booktitle>
Reference-contexts: In fact, researchers have found that mobile workers are extremely sensitive to the presence or absence of information; the lack of even a single file can force the user to switch his efforts to a lower-priority task or even to stop using the computer altogether <ref> [8] </ref>. (To get a feeling for the importance of individual files, choose a file at random from the list of those you edited today, and ask yourself how your activities would have changed had that file been unavailable.) Because of the importance of correct file selection, early hoarding systems did not <p> Due to space limitations, we only present an overview of the system design; the interested reader can consult [12] or [14] for more information. Earlier investigations of predictive hoarding have presented only anecdotal data <ref> [8, 13] </ref> regarding the performance of the hoarding approach. <p> Because there is a need to quantify the performance of automated hoarding systems in a fashion that permits useful comparisons to be made, we have chosen two alternative measures. One is the time to first miss, first suggested in <ref> [8] </ref>. This simply counts the elapsed time between the beginning of a disconnection period and the occurrence of the first hoard miss in that period; it characterizes the amount of work that the user accomplishes before disconnected operation rears its ugly head and makes the lack of the network noticeable.
Reference: [9] <author> Geoffrey H. Kuenning, Gerald J. Popek, and Peter Reiher. </author> <title> An analysis of trace data for predictive file caching in mobile computing. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 291-306. </pages> <publisher> USENIX, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: This is known as the LRU algorithm, a term borrowed from memory caching where it refers to the replacement algorithm: the information discarded is that which has been Least Recently Used. Although LRU often performs well, it is very sensit ive to attention shifts <ref> [9] </ref> in which the user suddenly begins work on a new task. Coda extends the basic LRU concept by allowing the user to specify lists of files that are considered important; these files are given an extra priority boost by applying an offset to their reference time.
Reference: [10] <author> James Jay Kistler. </author> <title> Disconnected Operation in a Distributed File System. </title> <type> Ph.D. dissertation, </type> <institution> Carnegie-Mellon University, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Although this addresses the problem of attention shifts, it does so by placing a significant extra burden on the user. As discussed in <ref> [10, p. 193] </ref> and in [11], it is exceedingly difficult for even an expert user to correctly identify the complete set of files needed for daily operation.
Reference: [11] <author> Geoffrey H. Kuenning. </author> <title> Design of the SEER predictive caching system. </title> <booktitle> In Proceedings of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: Although this addresses the problem of attention shifts, it does so by placing a significant extra burden on the user. As discussed in [10, p. 193] and in <ref> [11] </ref>, it is exceedingly difficult for even an expert user to correctly identify the complete set of files needed for daily operation. To address this challenge, two recent systems, Seer [11, 12] and Spy Utility [13] have attempted to completely automate the task of file selection. <p> As discussed in [10, p. 193] and in [11], it is exceedingly difficult for even an expert user to correctly identify the complete set of files needed for daily operation. To address this challenge, two recent systems, Seer <ref> [11, 12] </ref> and Spy Utility [13] have attempted to completely automate the task of file selection. Each groups files into projects representing coherent user tasks and attempts to hoard only complete projects. <p> Seer estimates the membership of a project by forming one or more clusters of files based on its observations of user behavior. The primary measure used for clustering is the semantic distance <ref> [11, 12] </ref> between individual files. Semantic distance is based on the reference sequence of an individual process, and is calculated from a set of local semantic distances.
Reference: [12] <author> Geoffrey Houston Kuenning. Seer: </author> <title> Predictive File Hoarding for Disconnected Mobile Operation. </title> <type> PhD thesis, </type> <institution> University of California, </institution> <address> Los Angeles, Los Angeles, CA, </address> <month> May </month> <year> 1997. </year> <note> Also available as UCLA CSD Technical Report UCLA-CSD-970015. </note>
Reference-contexts: As discussed in [10, p. 193] and in [11], it is exceedingly difficult for even an expert user to correctly identify the complete set of files needed for daily operation. To address this challenge, two recent systems, Seer <ref> [11, 12] </ref> and Spy Utility [13] have attempted to completely automate the task of file selection. Each groups files into projects representing coherent user tasks and attempts to hoard only complete projects. <p> Due to space limitations, we only present an overview of the system design; the interested reader can consult <ref> [12] </ref> or [14] for more information. Earlier investigations of predictive hoarding have presented only anecdotal data [8, 13] regarding the performance of the hoarding approach. <p> Seer estimates the membership of a project by forming one or more clusters of files based on its observations of user behavior. The primary measure used for clustering is the semantic distance <ref> [11, 12] </ref> between individual files. Semantic distance is based on the reference sequence of an individual process, and is calculated from a set of local semantic distances. <p> For example, reference histories are tracked across process invocation and termination, so that file relationships implied by process families (e.g., complex compilations) can be identified. These heuristics are discussed further in <ref> [12] </ref> and [14]. Naturally, the process of observing the user's behavior and tracking file reference is not without cost. A full analysis of Seer's performance impact is given in [12]. <p> These heuristics are discussed further in <ref> [12] </ref> and [14]. Naturally, the process of observing the user's behavior and tracking file reference is not without cost. A full analysis of Seer's performance impact is given in [12]. In brief, observing the user's behavior on a 133-MHz Pentium adds about 35 s to the execution path for selected system calls (the high-utilization read and write operations are not affected). <p> In addition, it could easily be maintained on disk rather than in virtual memory, an option that is discussed in detail in <ref> [12] </ref>.) 3 Characterizing Success Hoarding is a variation of the caching methods commonly used in many areas of computer science. However, hoarding differs from caching in one important respect: the cost of a miss. <p> To avoid errors introduced by uncontrolled trends, the experiments were run in random order. 2 The results given here differ somewhat from those shown in <ref> [12] </ref>, due to improvements in the simulation software. <p> Here, it is clear that a user's average experience was one of getting large amounts of work done, not of suffering from hoard misses. In fact, when the values in this table are compared to statistics on average disconnection times (given in <ref> [12] </ref>), the numbers are almost indistinguishable, which demonstrates that automated predictive hoarding can make disconnected operation a viable option even for the unsophisticated user. 7 Conclusions This research demonstrates, via both simulation and actual use, that automated hoarding of files for portable computers is feasible and that it has significant benefits
Reference: [13] <author> Carl D. Tait, Hui Lei, Swarup Acharya, and Henry Chang. </author> <title> Intelligent file hoarding for mobile computers. </title> <booktitle> In Proceedings of MobiCom '95: The First International Conference on Mobile Computing and Networking, </booktitle> <pages> pages 119-125, </pages> <address> Berkeley, CA, </address> <month> November </month> <year> 1995. </year> <month> 15 </month>
Reference-contexts: As discussed in [10, p. 193] and in [11], it is exceedingly difficult for even an expert user to correctly identify the complete set of files needed for daily operation. To address this challenge, two recent systems, Seer [11, 12] and Spy Utility <ref> [13] </ref> have attempted to completely automate the task of file selection. Each groups files into projects representing coherent user tasks and attempts to hoard only complete projects. <p> Due to space limitations, we only present an overview of the system design; the interested reader can consult [12] or [14] for more information. Earlier investigations of predictive hoarding have presented only anecdotal data <ref> [8, 13] </ref> regarding the performance of the hoarding approach.
Reference: [14] <author> Geoffrey H. Kuenning and Gerald J. Popek. </author> <title> Automated hoarding for mobile computers. </title> <booktitle> In Proceedings of the 16th Symposium on Operating Systems Principles, </booktitle> <address> St. Malo, France, Octo-ber 1997. </address> <publisher> ACM. </publisher>
Reference-contexts: Due to space limitations, we only present an overview of the system design; the interested reader can consult [12] or <ref> [14] </ref> for more information. Earlier investigations of predictive hoarding have presented only anecdotal data [8, 13] regarding the performance of the hoarding approach. <p> For example, reference histories are tracked across process invocation and termination, so that file relationships implied by process families (e.g., complex compilations) can be identified. These heuristics are discussed further in [12] and <ref> [14] </ref>. Naturally, the process of observing the user's behavior and tracking file reference is not without cost. A full analysis of Seer's performance impact is given in [12].
Reference: [15] <author> Edward R. Tufte. </author> <title> Envisioning Information. </title> <publisher> Graphic Press, </publisher> <address> Cheshire, Connecticut, </address> <year> 1990. </year> <month> 16 </month>
Reference-contexts: We then present a second run at a large scale so that the data may be examined closely, followed by "small multiples" <ref> [15] </ref> of the corresponding information for six more machines. (The remaining two machines were used relatively briefly, and do not present interesting new data.) management scheme on machine "Norgay" for simulated weekly disconnections in simulation run number 1, with the evolution of working set sizes over time included for comparison.
References-found: 15

