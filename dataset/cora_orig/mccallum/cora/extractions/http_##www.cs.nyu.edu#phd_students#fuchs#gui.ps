URL: http://www.cs.nyu.edu/phd_students/fuchs/gui.ps
Refering-URL: http://www.cs.nyu.edu/phd_students/fuchs/index.html
Root-URL: http://www.cs.nyu.edu
Email: email: fuchs@cerc.wvu.edu  
Title: Escaping the event loop: an alternative control structure for multi-threaded GUIs  
Author: M. Fuchs 
Keyword: multithreaded user interfaces, distributed programming, reactive programming, Scheme, continuations, programming languages, event-loop  
Note: This work was partly supported by ARPA Grant MDA972-91-J-1022  
Address: 886 Chestnut Hill Rd., P. O. Box 6506 West Virginia University Morgantown, WV 26506  
Affiliation: Concurrent Engineering Research Center  
Abstract: The event-driven, or reactive, programming style of the contemporary GUI is a major reason they are difficult to program. This is compounded in a distributed application. The reactive style, however, reflects the mismatch between multithreaded interfaces and a single threaded process, and is actually the equivalent of continuation passing style, a source code transformation used by some compilers. Using continuations for callbacks eliminates much of the difficulty of the reactive style. We describe a toolkit for managing the multiple threads of control which can be combined with existing GUI toolkits and which supports distributed applications. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Appel, A. </author> <title> (1992) Compiling with Continuations. </title> <publisher> Cambridge University Press. </publisher>
Reference-contexts: The event-loop forces the application programmer to explicitly maintain all the information which in other applications is implicitly maintained on the stack, such as the values of variables and the return location after the next event. The resulting program is, in fact, written in continuation passing style (CPS) <ref> (Appel 1992) </ref>. Compilers for functional-style languages, such as Scheme and ML, frequently transform source code into CPS as an intermediate step. Humans normally don't program directly in CPS; it can be quite complex. In CPS, each function in a program takes an extra parameter, called the continuation. <p> Unlike setjmp/longjmp, a first-class continuation can be called at any point in the future computation, repeatedly if desired. (Continuations do not necessarily require copying the stack. Compilers or interpreters using CPS, such as SML/NJ <ref> (Appel 1992) </ref>, Stack ( a ) Return Pointer (b) Call Parameters do not employ a stack.) The analogy between continuations and setjmp/longjmp would be an equivalence if setjmp stored the stack as well as the registers.
Reference: <author> Chambers C. et al. </author> <title> (1980) An Efficient Implementation of SELF: a dynamically-typed Object-Oriented Language Based on Prototypes. </title> <booktitle> OOPSLA 1989 Conference Proceedings. ACM. </booktitle>
Reference: <author> Dybvig, R. K. </author> <title> (1987) The Scheme Programming Language. </title> <publisher> Prentice-Hall, Inc. </publisher>
Reference-contexts: We will also discuss some implementation details, show how existing systems can be integrated with this approach, and how this approach is extended to distributed systems. 3 FIRST-CLASS CONTINUATIONS AND CALLBACKS A first-class continuation is an object that represents the remainder of a computation <ref> (Dybvig 1987, Reynolds 1993, Wand 1980) </ref>. A more concrete description would be an object containing the process stack, ff, and the return address, fi, just before execution of a function call (fig. 3).
Reference: <author> Flecchia M., Bergeron R. D. </author> <year> (1987), </year> <title> Specifying complex dialogs in Algae. </title> <booktitle> Human Factors in Computing Systems and Graphics Interface. </booktitle> <publisher> SIGCHI. </publisher>
Reference: <author> Fuchs, M. </author> <year> (1995) </year> <month> Dreme: </month> <title> for life in the Net. </title> <type> PhD thesis, </type> <institution> NYU. </institution>
Reference-contexts: Setting callbacks We will now apply this scheme to the original bridge problem. We will start with the standard, single-threaded bridge game described above, and then relax the constraints until almost everything occurs simultaneously. Our implementation language is a concurrent, distributed dialect of Scheme <ref> (Fuchs, 1995) </ref>, although for our purposes we only need to assume an interrupt-driven scheduler, so computations can proceed without waiting for the current thread to request input, and some concurrency control construct, such as monitors.
Reference: <author> Gansner, E. R., Reppy, J. </author> <title> (1993) A foundation for user interface construction. Languages for Developing User Interfaces. </title> <publisher> Jones and Bartlett Publishers. </publisher>
Reference: <author> Haahr, P. </author> <title> (1990) Montage: breaking windows into small pieces. </title> <booktitle> Proceedings of the USENIX Summer Conference. USENIX. </booktitle>
Reference: <author> Hill, R. D. </author> <title> (1986) Supporting concurrency, communication, and synchronization in human-computer interaction | the Sassafras UIMS. </title> <journal> ACM Transactions on Graphics. </journal>
Reference: <author> Hill, R. D. </author> <title> (1993) Languages for the construction of Multi-Media Multi-User Synchronous (MUMMS) applications. Languages for Developing User Interfaces. </title> <publisher> Jones and Bartlett Publishers. </publisher>
Reference: <author> Hill, R. D. </author> <title> (1993) The Rendezvous constraint maintenance system. User Interface Software and Technology, </title> <publisher> ACM. </publisher>
Reference: <author> Hoare, C. A. R. </author> <title> (1978) Communicating sequential processes. </title> <journal> Communications of the ACM. </journal>
Reference-contexts: Although our implementation was written for distributed Scheme, the same approach can be implented in a distributed object-system. 5 PREVIOUS WORK Several previous windowing systems have been built using concurrent processes and communication channels based on Communicating Sequential Processes (CSP) <ref> (Hoare 1978) </ref>. Pike (1988) describes another such system written in Newsqueak, an application specific concurrent language. In this system, the windowing system and its clients communicate over five typed synchronous channels, one for bitmaps, one each for keyboard and mouse events, and two for control information.
Reference: <author> Horn, B. </author> <title> (1993) Properties of user interface systems and the Siri programming language. Languages for Developing User Interfaces. </title> <publisher> Jones and Bartlett Publishers. </publisher>
Reference: <author> Myers, B. </author> <title> (1993) Why are human-computer interfaces difficult to design and implement. </title> <type> Technical Report CMU-CS-93-183, </type> <institution> Carnegie Mellon University. </institution>
Reference: <author> Olsen, D. R., Jr. </author> <title> (1990) Propositional production systems for dialog description. </title> <booktitle> Human Factors in Computing Systems, </booktitle> <publisher> SIGCHI. </publisher>
Reference: <author> Patterson, J. F., et al. </author> <title> (1990) Rendezvous: an architecture for synchronous multi-user applications. Computer Supported Cooperative Work SIGCHI. </title>
Reference: <author> Pike, R. </author> <title> (1989) A concurrent window system. </title> <booktitle> USENIX Computing Systems. </booktitle>
Reference: <author> Reppy, J. </author> <title> (1992) Higher-Order Concurrency. </title> <type> PhD thesis, </type> <institution> Cornell University. </institution>
Reference: <author> Reynolds, J. </author> <title> (1993) The discoveries of continuations. Lisp and Symbolic Computation. </title>
Reference: <author> Wand, M. </author> <title> (1980) Continuation-based multiprocessing. Lisp Conference. 7 BIOGRAPHY Dr. Fuchs is a Research Associate at WVU's Concurrent Engineering Research Center. He received his B.A. from Harvard University in 1983 and his PhD. from NYU in 1995. His interests include programming languages, mobile objects, multi-user applications, SGML, and distributed garbage collection. </title>
References-found: 19

