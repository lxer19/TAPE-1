URL: http://www.csl.sri.com/~qian/icde96.ps.gz
Refering-URL: http://www.csl.sri.com/~qian/early-pubs.html
Root-URL: 
Email: qian@csl.sri.com  
Title: Query Folding  
Author: Xiaolei Qian 
Affiliation: Computer Science Laboratory SRI International  
Date: February 1996, pages 48-55. 1  
Note: Proceedings of the 12th International Conference on Data Engineering,  
Abstract: Query folding refers to the activity of determining if and how a query can be answered using a given set of resources, which might be materialized views, cached results of previous queries, or queries answerable by other databases. We investigate query folding in the context where queries and resources are conjunctive queries. We develop an exponential-time algorithm that finds all complete or partial foldings, and a polynomial-time algorithm for the subclass of acyclic conjunctive queries. Our results can be applied to query optimization in centralized databases, to query processing in distributed databases, and to query answering in federated databases. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. V. Aho, Y. Sagiv, and J. D. Ullman. </author> <title> Efficient optimization of a class of relational expressions. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 4(4) </volume> <pages> 435-454, </pages> <month> December </month> <year> 1979. </year>
Reference-contexts: The query containment problem for conjunctive queries is known to be NP-complete [3]. Several subclasses of conjunctive queries have been identified that have polynomial-time containment algorithms <ref> [1, 2, 5] </ref>. Thus, the query folding problem is at least NP-hard. Actually, it is shown recently to be NP-complete for conjunctive queries and resources [8], and for conjunctive queries and resources with binding patterns [10]. <p> For the query containment problem, our algorithm degenerates to a polynomial-time containment algorithm for the subclass of acyclic conjunctive queries, which is incomparable to but more natural than the subclasses identified in <ref> [1, 2, 5] </ref> as having polynomial-time containment algorithms. <p> Since query containment is a special case of query folding, our algorithm degenerates to a polynomial-time containment algorithm for the subclass of acyclic conjunctive queries. This subclass is incomparable to and more natural than the classes of queries identified in <ref> [1, 2, 5] </ref> as having polynomial-time containment algorithms. For instance, a polynomial-time algorithm is developed in [5] for the class of fan-out free queries.
Reference: [2] <author> A. V. Aho, Y. Sagiv, and J. D. Ullman. </author> <title> Equivalence of relational expressions. </title> <journal> SIAM Journal of Computing, </journal> <volume> 8(2) </volume> <pages> 218-246, </pages> <year> 1979. </year>
Reference-contexts: The query containment problem for conjunctive queries is known to be NP-complete [3]. Several subclasses of conjunctive queries have been identified that have polynomial-time containment algorithms <ref> [1, 2, 5] </ref>. Thus, the query folding problem is at least NP-hard. Actually, it is shown recently to be NP-complete for conjunctive queries and resources [8], and for conjunctive queries and resources with binding patterns [10]. <p> For the query containment problem, our algorithm degenerates to a polynomial-time containment algorithm for the subclass of acyclic conjunctive queries, which is incomparable to but more natural than the subclasses identified in <ref> [1, 2, 5] </ref> as having polynomial-time containment algorithms. <p> Since query containment is a special case of query folding, our algorithm degenerates to a polynomial-time containment algorithm for the subclass of acyclic conjunctive queries. This subclass is incomparable to and more natural than the classes of queries identified in <ref> [1, 2, 5] </ref> as having polynomial-time containment algorithms. For instance, a polynomial-time algorithm is developed in [5] for the class of fan-out free queries.
Reference: [3] <author> A. K. Chandra and P. M. Merlin. </author> <title> Optimal implementation of conjunctive queries in relational databases. </title> <booktitle> In Proceedings of the Ninth ACM Symposium on Theory of Computing, </booktitle> <pages> pages 77-90, </pages> <year> 1977. </year>
Reference-contexts: To determine whether a query is contained in another query, we could determine instead whether the second query can be answered using a view defined by the first query. The query containment problem for conjunctive queries is known to be NP-complete <ref> [3] </ref>. Several subclasses of conjunctive queries have been identified that have polynomial-time containment algorithms [1, 2, 5]. Thus, the query folding problem is at least NP-hard. Actually, it is shown recently to be NP-complete for conjunctive queries and resources [8], and for conjunctive queries and resources with binding patterns [10]. <p> It is known that Q 0 Q iff there exists a containment mapping from Q to Q 0 <ref> [3] </ref>.
Reference: [4] <author> S. Chaudhuri, R. Krishnamurthy, S. Potamianos, and K. Shim. </author> <title> Optimizing queries with materialized views. </title> <booktitle> In Proceedings of the Eleventh International Conference on Data Engineering, </booktitle> <pages> pages 190-200, </pages> <year> 1995. </year>
Reference-contexts: Query folding has applications in query optimization in centralized databases <ref> [4] </ref>, query processing in distributed databases [6], and query answering in federated databases [7]. Example 1 Let us consider a patient record database consisting of the following relations. <p> Thus, the query folding problem is at least NP-hard. Actually, it is shown recently to be NP-complete for conjunctive queries and resources [8], and for conjunctive queries and resources with binding patterns [10]. Solutions to query folding for conjunctive queries and resources with built-in predicates have been developed in <ref> [4, 12, 14] </ref>. The algorithms employed all use exhaustive search strategies that are exponential-time in complexity, and often use unnecessary pruning conditions that do not guarantee to find all foldings. In addition, these algorithms compute only strong fold-ings, which are foldings that are equivalent to the original query. <p> For example, databases often maintain materialized views, and a query can be answered by accessing views instead of base relations if the query can be folded using the views <ref> [4] </ref>. In multiple query answering, the result of a query can be used to at least partially answer another query if the second query can be folded using the first one. Query folding is even more important in a distributed environment.
Reference: [5] <author> D. S. Johnson and A. Klug. </author> <title> Optimizing conjunctive queries that contain untyped variables. </title> <journal> SIAM Journal of Computing, </journal> <volume> 12(4) </volume> <pages> 616-640, </pages> <month> November </month> <year> 1983. </year> <title> 2 Notice that these statements are more general than the site descriptions in [7]. </title>
Reference-contexts: The query containment problem for conjunctive queries is known to be NP-complete [3]. Several subclasses of conjunctive queries have been identified that have polynomial-time containment algorithms <ref> [1, 2, 5] </ref>. Thus, the query folding problem is at least NP-hard. Actually, it is shown recently to be NP-complete for conjunctive queries and resources [8], and for conjunctive queries and resources with binding patterns [10]. <p> For the query containment problem, our algorithm degenerates to a polynomial-time containment algorithm for the subclass of acyclic conjunctive queries, which is incomparable to but more natural than the subclasses identified in <ref> [1, 2, 5] </ref> as having polynomial-time containment algorithms. <p> Since query containment is a special case of query folding, our algorithm degenerates to a polynomial-time containment algorithm for the subclass of acyclic conjunctive queries. This subclass is incomparable to and more natural than the classes of queries identified in <ref> [1, 2, 5] </ref> as having polynomial-time containment algorithms. For instance, a polynomial-time algorithm is developed in [5] for the class of fan-out free queries. <p> This subclass is incomparable to and more natural than the classes of queries identified in [1, 2, 5] as having polynomial-time containment algorithms. For instance, a polynomial-time algorithm is developed in <ref> [5] </ref> for the class of fan-out free queries.
Reference: [6] <author> A. M. Keller and J. Basu. </author> <title> A predicate-based caching scheme for client-server database architectures. </title> <booktitle> In Proceedings of the International Conference on Parallel and Distributed Information Systems, </booktitle> <year> 1994. </year>
Reference-contexts: Query folding has applications in query optimization in centralized databases [4], query processing in distributed databases <ref> [6] </ref>, and query answering in federated databases [7]. Example 1 Let us consider a patient record database consisting of the following relations. <p> Query folding is even more important in a distributed environment. In client-server applications, views and queries might be cached at the client site. Client queries can be an-swered more efficiently if they can be folded using the cached data <ref> [6] </ref>. In the situation of a disconnected network, a query can still be answered at least partially if it can be folded using views and queries maintained at available sites.
Reference: [7] <author> A. Levy, D. Srivastava, and T. Kirk. </author> <title> Data model and query evaluation in global information systems. </title> <journal> Journal of Intelligent Information Systems, </journal> <year> 1995. </year>
Reference-contexts: Query folding has applications in query optimization in centralized databases [4], query processing in distributed databases [6], and query answering in federated databases <ref> [7] </ref>. Example 1 Let us consider a patient record database consisting of the following relations. <p> In a federated environment containing multiple heterogeneous, autonomous, and legacy data sources, a data source might be capable of answering only limited kinds of queries <ref> [7] </ref>.
Reference: [8] <author> A. Y. Levy, A. O. Mendelzon, Y. Sagiv, and D. Srivastava. </author> <title> Answering queries using views. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 95-104, </pages> <year> 1995. </year>
Reference-contexts: Several subclasses of conjunctive queries have been identified that have polynomial-time containment algorithms [1, 2, 5]. Thus, the query folding problem is at least NP-hard. Actually, it is shown recently to be NP-complete for conjunctive queries and resources <ref> [8] </ref>, and for conjunctive queries and resources with binding patterns [10]. Solutions to query folding for conjunctive queries and resources with built-in predicates have been developed in [4, 12, 14].
Reference: [9] <author> A. K. Mackworth. </author> <title> The logic of constraint satisfaction. </title> <journal> Artificial Intelligence, </journal> <volume> 58(1-3):3-20, </volume> <month> De-cember </month> <year> 1992. </year>
Reference-contexts: The query-folding algorithm computes a set of complete or partial foldings of Q using R. It is similar in spirit to arc consistency algorithms for constraint satisfaction problems <ref> [9] </ref>. The algorithm consists of two steps. Initialization The first step is to compute a label for every hyperedge in G Q . Given hyperedge e 2 G Q and literal p associated with e, its label L e is a relation with attributes var (p).
Reference: [10] <author> A. Rajaraman, Y. Sagiv, and J. D. Ullman. </author> <title> Answering queries using templates with binding patterns. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 105-112, </pages> <year> 1995. </year>
Reference-contexts: Several subclasses of conjunctive queries have been identified that have polynomial-time containment algorithms [1, 2, 5]. Thus, the query folding problem is at least NP-hard. Actually, it is shown recently to be NP-complete for conjunctive queries and resources [8], and for conjunctive queries and resources with binding patterns <ref> [10] </ref>. Solutions to query folding for conjunctive queries and resources with built-in predicates have been developed in [4, 12, 14]. The algorithms employed all use exhaustive search strategies that are exponential-time in complexity, and often use unnecessary pruning conditions that do not guarantee to find all foldings.
Reference: [11] <author> Y. Sagiv and M. Yannakakis. </author> <title> Equivalences among relational expressions with the union and difference operators. </title> <journal> Journal of the ACM, </journal> <volume> 27(4) </volume> <pages> 633-655, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: 1 ; Y 3 ; V 3 ) 2 : r 2 (Y 1 ; Y 2 ; Y 3 ; Y 4 ) drugs (Y 3 ; Y 4 ) : r 2 (Y 1 ; Y 2 ; Y 3 ; Y 4 ) 1 Using results from <ref> [11] </ref>, the definitions can be generalized directly to foldings that are unions of conjunctive queries. In other words, a union of conjunctive queries is a partial folding of Q iff every conjunctive query in the union is a partial folding of Q.
Reference: [12] <author> O. G. Tsatalos, M. H. Solomon, and Y. E. Ioan-nidis. </author> <title> The GMAP: A versatile tool for physical data independence. </title> <booktitle> In Proceedings of the Twentieth International Conference on Very Large Data Bases, </booktitle> <pages> pages 367-378. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: Thus, the query folding problem is at least NP-hard. Actually, it is shown recently to be NP-complete for conjunctive queries and resources [8], and for conjunctive queries and resources with binding patterns [10]. Solutions to query folding for conjunctive queries and resources with built-in predicates have been developed in <ref> [4, 12, 14] </ref>. The algorithms employed all use exhaustive search strategies that are exponential-time in complexity, and often use unnecessary pruning conditions that do not guarantee to find all foldings. In addition, these algorithms compute only strong fold-ings, which are foldings that are equivalent to the original query. <p> The algorithms employed all use exhaustive search strategies that are exponential-time in complexity, and often use unnecessary pruning conditions that do not guarantee to find all foldings. In addition, these algorithms compute only strong fold-ings, which are foldings that are equivalent to the original query. The algorithms in <ref> [12, 14] </ref> compute only complete foldings, which are foldings that depend solely on the resources. When strong and complete foldings do not exist, partial foldings that are contained in the original query or depend partially on the resources could be very useful in practice, especially in the distributed environment.
Reference: [13] <author> J. D. Ullman. </author> <booktitle> Principles of Database and Knowledge Base Systems, </booktitle> <volume> volume 2. </volume> <publisher> Computer Science Press, </publisher> <year> 1989. </year>
Reference-contexts: Its hypergraph is shown in Figure 1. 2 A conjunctive query is acyclic if its hypergraph representation is acyclic. We briefly recall the definitions of GYO-reductions of hypergraphs and acyclic hyper-graphs from <ref> [13, Section 11.12] </ref>. Given two hyperedges e and e 0 , if nodes in the set difference e e 0 appear in no other hyperedges, then e is an ear . The GYO-reduction of a hypergraph is obtained by removing ears repeatedly until no more ears exist. <p> Proof We recall the definition of a containment map ping from <ref> [13, Section 14.1] </ref>.
Reference: [14] <author> H. Z. Yang and P. A. Larson. </author> <title> Query transformation for PSJ-queries. </title> <booktitle> In Proceedings of the Thirteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 245-254. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference-contexts: Thus, the query folding problem is at least NP-hard. Actually, it is shown recently to be NP-complete for conjunctive queries and resources [8], and for conjunctive queries and resources with binding patterns [10]. Solutions to query folding for conjunctive queries and resources with built-in predicates have been developed in <ref> [4, 12, 14] </ref>. The algorithms employed all use exhaustive search strategies that are exponential-time in complexity, and often use unnecessary pruning conditions that do not guarantee to find all foldings. In addition, these algorithms compute only strong fold-ings, which are foldings that are equivalent to the original query. <p> The algorithms employed all use exhaustive search strategies that are exponential-time in complexity, and often use unnecessary pruning conditions that do not guarantee to find all foldings. In addition, these algorithms compute only strong fold-ings, which are foldings that are equivalent to the original query. The algorithms in <ref> [12, 14] </ref> compute only complete foldings, which are foldings that depend solely on the resources. When strong and complete foldings do not exist, partial foldings that are contained in the original query or depend partially on the resources could be very useful in practice, especially in the distributed environment.
References-found: 14

