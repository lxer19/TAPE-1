URL: http://theory.lcs.mit.edu/~harchol/Papers/discovery.ps
Refering-URL: http://theory.lcs.mit.edu/~harchol/Papers/papers.html
Root-URL: 
Email: h harchol,ftl,danli@theory.lcs.mit.edu  
Title: Resource Discovery in Distributed Networks  
Author: Mor Harchol-Balter Tom Leighton Daniel Lewin 
Note: Laboratory for Computer Science. Supported by the NSF Postdoctoral Fellowship in the  Supported by DARPA N00014-95-1-1246 and ARMY DAAH 04-95-1-0607 Laboratory for Computer Science. Supported by DARPA N00014-95-1-1246 and ARMY DAAH 04-95-1-0607  
Address: Cambridge, MA 02139  
Affiliation: MIT,  Mathematical Sciences. Department of Mathematics and Laboratory for Computer Science.  
Abstract: In large distributed networks of computers, it is often the case that a subset of machines wants to cooperate to perform a task. Before they can do so, these machines need to learn of the existence of each other. In this paper we are interested in distributed algorithms whereby machines in a network learn of other machines in the network by making local queries to machines they already know. The algorithms should be efficient both in terms of the time and in terms of the total network communication required until all machines have discovered all other machines. We propose a very simple algorithm called Name-Dropper whereby all machines learn about each other within O(log 2 n) rounds, where n is the number of machines in the network. The total number of connections required is O(n log 2 n), and the total number of pointers which must be communicated is O(n 2 log 2 n). Each of the preceding bounds is optimal to within polylogarithmic factors. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Divyakant Agrawal, Amr El Abbadi, and R. Steinke. </author> <title> Epidemic algorithms in replicated databases. </title> <booktitle> In Proceedings of the Sixteenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 161-172, </pages> <address> Tucson, Arizona, </address> <month> 12-15 May </month> <year> 1997. </year>
Reference-contexts: Our results show that if we allow machines to learn about other machines during the gossip process, then gossiping can be done efficiently starting from any weakly connected graph. Gossip type algorithms have been used in various practical distributed systems and algorithms <ref> [1, 3, 5, 9, 8, 10] </ref>. For example, in [1, 3], gossiping is used to maintain consistency in a distributed replicated database. Recently [10], gossiping has been used to gather information about failures in a network of machines. <p> Gossip type algorithms have been used in various practical distributed systems and algorithms [1, 3, 5, 9, 8, 10]. For example, in <ref> [1, 3] </ref>, gossiping is used to maintain consistency in a distributed replicated database. Recently [10], gossiping has been used to gather information about failures in a network of machines.
Reference: [2] <author> Susan Assmann and Daniel Kleitman. </author> <title> The number of rounds needed to exchange information within a graph. </title> <journal> SIAM Discrete Applied Math, </journal> <volume> 6 </volume> <pages> 117-125, </pages> <year> 1983. </year>
Reference-contexts: Communication and broadcast by local queries has been extensively studied under the name "gossiping" <ref> [6, 4, 2, 9] </ref>. The "classical" gossiping problem assumes that either all machines know about each other, or that there is a fixed communication network. Gossiping is used to broadcast information from every machine to every machine.
Reference: [3] <author> Alan J. Demers, Daniel H. Greene, Carl Hauser, Wes Irish, and John Larson. </author> <title> Epidemic algorithms for replicated database maintenance. </title> <booktitle> In Proceedings of the Sixth Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 1-12, </pages> <address> Vancouver, British Columbia, Canada, </address> <month> 10-12 August </month> <year> 1987. </year>
Reference-contexts: Our results show that if we allow machines to learn about other machines during the gossip process, then gossiping can be done efficiently starting from any weakly connected graph. Gossip type algorithms have been used in various practical distributed systems and algorithms <ref> [1, 3, 5, 9, 8, 10] </ref>. For example, in [1, 3], gossiping is used to maintain consistency in a distributed replicated database. Recently [10], gossiping has been used to gather information about failures in a network of machines. <p> Gossip type algorithms have been used in various practical distributed systems and algorithms [1, 3, 5, 9, 8, 10]. For example, in <ref> [1, 3] </ref>, gossiping is used to maintain consistency in a distributed replicated database. Recently [10], gossiping has been used to gather information about failures in a network of machines.
Reference: [4] <author> S. Even and B. Monien. </author> <title> On the number of rounds necessary to disseminate information. </title> <booktitle> In Proceedings of the ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 261-266, </pages> <year> 1989. </year>
Reference-contexts: Communication and broadcast by local queries has been extensively studied under the name "gossiping" <ref> [6, 4, 2, 9] </ref>. The "classical" gossiping problem assumes that either all machines know about each other, or that there is a fixed communication network. Gossiping is used to broadcast information from every machine to every machine.
Reference: [5] <author> Mark Hayden and Kenneth Birman. </author> <title> Probabilistic broadcast. </title> <type> Cornell CS Technical Report TR96-1606, </type> <year> 1998. </year>
Reference-contexts: Our results show that if we allow machines to learn about other machines during the gossip process, then gossiping can be done efficiently starting from any weakly connected graph. Gossip type algorithms have been used in various practical distributed systems and algorithms <ref> [1, 3, 5, 9, 8, 10] </ref>. For example, in [1, 3], gossiping is used to maintain consistency in a distributed replicated database. Recently [10], gossiping has been used to gather information about failures in a network of machines.
Reference: [6] <author> Sandra Hedetniemi, Stephen Hedetniemi, and Arthur Liestman. </author> <title> A survey of gossiping and broadcasting in communication networks. </title> <journal> Networks, </journal> <volume> 18 </volume> <pages> 319-349, </pages> <year> 1988. </year>
Reference-contexts: Communication and broadcast by local queries has been extensively studied under the name "gossiping" <ref> [6, 4, 2, 9] </ref>. The "classical" gossiping problem assumes that either all machines know about each other, or that there is a fixed communication network. Gossiping is used to broadcast information from every machine to every machine. <p> The "classical" gossiping problem assumes that either all machines know about each other, or that there is a fixed communication network. Gossiping is used to broadcast information from every machine to every machine. In <ref> [6] </ref>, a survey of general lower bounds on the number of connections that need to be made to broadcast information from every machine to every other machine can be found. In addition, [6] describes tight upper bounds for gossiping on fixed specific communication networks. 2 Name-Dropper derives its name from the <p> Gossiping is used to broadcast information from every machine to every machine. In <ref> [6] </ref>, a survey of general lower bounds on the number of connections that need to be made to broadcast information from every machine to every other machine can be found. In addition, [6] describes tight upper bounds for gossiping on fixed specific communication networks. 2 Name-Dropper derives its name from the following social behavior commonly called "name dropping." A newcomer approaches a group of people and introduces himself.
Reference: [7] <author> John Moy. </author> <note> Ospf version 2, rfc 1583. Available from http://www.dsi.unive.it/Connected/RFC/1583/index.html, 1994. </note>
Reference-contexts: All these bounds are within polylogarithmic factors of optimal. 1.3 Previous Work The Flooding algorithm which we describe in Section 1.1.1 is used today by routers on the Internet, see the Internet request for comments number 1583 <ref> [7] </ref>. Communication and broadcast by local queries has been extensively studied under the name "gossiping" [6, 4, 2, 9]. The "classical" gossiping problem assumes that either all machines know about each other, or that there is a fixed communication network.
Reference: [8] <author> Derek C. Oppen and Yogen K. Dalal. </author> <title> The clearinghouse: A decentralized agent for locating named objects in a distributed environment. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 1(3) </volume> <pages> 230-253, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: Our results show that if we allow machines to learn about other machines during the gossip process, then gossiping can be done efficiently starting from any weakly connected graph. Gossip type algorithms have been used in various practical distributed systems and algorithms <ref> [1, 3, 5, 9, 8, 10] </ref>. For example, in [1, 3], gossiping is used to maintain consistency in a distributed replicated database. Recently [10], gossiping has been used to gather information about failures in a network of machines.
Reference: [9] <author> Andrzej Pelc. </author> <title> Fault-tolerant broadcasting and gossiping in communication. </title> <journal> Networks, </journal> <volume> 28(3) </volume> <pages> 143-156, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: Communication and broadcast by local queries has been extensively studied under the name "gossiping" <ref> [6, 4, 2, 9] </ref>. The "classical" gossiping problem assumes that either all machines know about each other, or that there is a fixed communication network. Gossiping is used to broadcast information from every machine to every machine. <p> Our results show that if we allow machines to learn about other machines during the gossip process, then gossiping can be done efficiently starting from any weakly connected graph. Gossip type algorithms have been used in various practical distributed systems and algorithms <ref> [1, 3, 5, 9, 8, 10] </ref>. For example, in [1, 3], gossiping is used to maintain consistency in a distributed replicated database. Recently [10], gossiping has been used to gather information about failures in a network of machines.
Reference: [10] <author> Robbert van Renesse, Yaron Minsky, and Mark Hayden. </author> <title> A gossip-style failure detector. </title> <booktitle> 1998. </booktitle> <pages> 10 </pages>
Reference-contexts: Our results show that if we allow machines to learn about other machines during the gossip process, then gossiping can be done efficiently starting from any weakly connected graph. Gossip type algorithms have been used in various practical distributed systems and algorithms <ref> [1, 3, 5, 9, 8, 10] </ref>. For example, in [1, 3], gossiping is used to maintain consistency in a distributed replicated database. Recently [10], gossiping has been used to gather information about failures in a network of machines. <p> Gossip type algorithms have been used in various practical distributed systems and algorithms [1, 3, 5, 9, 8, 10]. For example, in [1, 3], gossiping is used to maintain consistency in a distributed replicated database. Recently <ref> [10] </ref>, gossiping has been used to gather information about failures in a network of machines. <p> This broadcast is carried out by an algorithm similar to the Name-Dropper: choose a random neighbor and tell him your information. In <ref> [10] </ref>, it is assumed for simplicity that only a single machine gossips at every round, and the authors give empirical evidence that information is propagated to all machines in linear time.
References-found: 10

