URL: http://www.neci.nj.nec.com/homepages/wds/rao-smith-stoc.ps
Refering-URL: http://www.neci.nj.nec.com/homepages/wds/confpubs.html
Root-URL: 
Email: fsatish,wdsg@research.NJ.NEC.COM  
Title: Approximating geometrical graphs via "spanners" and "banyans"  
Author: Satish B. Rao Warren D. Smith 
Address: 4 Independence way, Princeton NJ 08544  
Affiliation: NECI,  
Abstract: The main result of this paper is an improvement of Arora's method to find (1 + *) approximations for geometric NP-hard problems including the Euclidean Traveling Salesman Problem and the Euclidean Steiner Minimum Tree problems. For fixed dimension d and *, our algorithms run in O(N log N) time. An interesting byproduct of our work is the definition and construction of banyans, a generalization of graph spanners. A (1 + *)-banyan for a set of points A is a set of points A 0 and line segments S with endpoints in A [ A 0 such that a 1 + * optimal Steiner Minimum Tree for any subset of A is contained in S. We give a construction for banyans such that the total length of the line segments in S is within a constant factor of the length of the minimum spanning tree of A, and jA 0 j = O(jAj), when * and d are fixed. In this abbreviated paper, we only provide proofs of these results in two dimensions. The full paper on WDS's web page (http://www.neci.nj.nec.com/homepages/wds, click "NECI technical reports") extends the techniques to higher dimensions, proves some new facts and clarifies some old facts about spanners, and also gives approximation algorithms for minimum matching, edge cover, rectilinear Steiner minimum tree, and minimum 2-matching. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arora. </author> <title> Nearly linear time approximation schemes for Euclidean TSP and other geometric problems. </title> <booktitle> In Proceedings of the 38th Annual Symposium on Foundations of Computer Science, </booktitle> <year> 1997. </year> <note> Also available electronically on Arora's web page http://www.cs.princeton.edu/~arora/publist.html in an updated form. </note>
Reference-contexts: 1 Introduction We improve a method of Arora <ref> [1] </ref> for approximating various geometric NP-hard problems, such as the traveling salesman problem and Steiner Minimum Tree problem. For example, Arora's algorithm, given N points in a Eu-clidean d-space, d 2, produces, with probability 1=2, a (1 + 1=s)-approximate traveling salesman tour (TST). <p> Again, many of the techniques were previously developed by Arora in <ref> [1] </ref>. We assume that the sites are on integer coordinates of an L fi L grid. We then choose random integers a and b from [0; L]. <p> The procedure above and its analysis arose in Arora's proof of his main structure theorem <ref> [1] </ref>. We set r = O (s K+1 ) in the procedure above. This produces a modified graph S 0 that consists of the line segments from S plus some additional line segments whose total length is O (s K M ST )=r = O (M ST =s). <p> This allows us to use dynamic programming to find the optimal TST in the modified spanner in time that is exponential in r = O (s K+1 ) but linear in N . (The same standard techniques were used by <ref> [1] </ref>). We remark that, unlike Arora [1], we can efficiently deran-domize the procedure above. This is because Arora considered applying (but didn't apply) his modification procedure to some unknown solution to the TST problem. We actually use the modification procedure on the spanner graph which we explicitly compute. <p> This allows us to use dynamic programming to find the optimal TST in the modified spanner in time that is exponential in r = O (s K+1 ) but linear in N . (The same standard techniques were used by <ref> [1] </ref>). We remark that, unlike Arora [1], we can efficiently deran-domize the procedure above. This is because Arora considered applying (but didn't apply) his modification procedure to some unknown solution to the TST problem. We actually use the modification procedure on the spanner graph which we explicitly compute. <p> However in arbitrary metric spaces it is known that there exists * &gt; 0 so that approximating SMT or TST to within 1 + * is NP-hard. (See <ref> [1] </ref> for the references to this recently developed area of "MAX-SNP hardness.") 1.6 Organization of the paper In x2 we describe how to approximate the traveling salesman tour in the plane; x3 describes banyans and their use for 5 Actually [6] did not prove this for spanners and banyans. <p> pure algebraic, and hence initially would seem not to be susceptible to the lower bound) they may be rewritten in an honestly purely algebraic manner still with O (N log N ) runtime. approximating SMTs; and x4 concludes. 2 Approximating the TSP in the plane We use lemmas stated in <ref> [1] </ref> and [16] about (1+*)-approximate traveling salesman tours for N sites in the plane. They all generalize to d-space with d &gt; 2, but in this abbreviated pa per we'll sometimes only state them with d = 2. <p> They all generalize to d-space with d &gt; 2, but in this abbreviated pa per we'll sometimes only state them with d = 2. Lemma 3 (Perturbation Lemma) Given a graph G on N input sites in <ref> [0; 1] </ref> d , one can per turb the sites so that they are on points of the form (i=k; j=k) for integers i; j and with common denominator k, so that the total length of the graph changes by an additive term of at most p dE G =k where <p> Assuming WLOG that the point set in <ref> [0; 1] </ref> d has MST length M 1, by using the lemma above and scaling by a factor of L = p dN=(ffiM ), we may alter a traveling salesman problem so that its sites lie on integer points in [0; L) d . <p> We also state a version of a lemma from <ref> [1] </ref>. Lemma 5 Given a graph G in &lt; 2 on N sites X l:horizontal t (G; l) + l:vertical t (G; l) d`(G); (6) where `(G) denotes the length of G, and l are lines (in d space, hyperplanes) of the integer grid. The above lemma (proven in [1]) follows <p> from <ref> [1] </ref>. Lemma 5 Given a graph G in &lt; 2 on N sites X l:horizontal t (G; l) + l:vertical t (G; l) d`(G); (6) where `(G) denotes the length of G, and l are lines (in d space, hyperplanes) of the integer grid. The above lemma (proven in [1]) follows from the fact that the L 1 and L 2 norms differ by at most a p d factor. Definition 6 A crossing between a G-edge and a quadtree box boundary is "relevant" if exactly one of the endpoints of the G-edge is inside the box. <p> For example disregarding the constants in the Os the 2 (sd) O (d) factor in our runtime bound (EQ 4) when d = 2 and s = 10 (for 10% accuracy in the worst case), would be 2 400 . However, at the end of <ref> [1] </ref>, Arora points out that a (slower form of) his algorithm may be interpreted as a local optimizer. (Ours too.) It is possible that this interpretation is of more practical value than our algorithms, because then the powerful competing techniques [20] [27] could be used as Arora's local optimizer! Also these
Reference: [2] <author> S. Arya, G.Das, D.M.Mount, J.S.Salowe, and M.Smid. </author> <title> Euclidean spanners: short, thin, </title> <booktitle> and lanky. In Proceedings of the 27th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 489-498, </pages> <year> 1995. </year>
Reference-contexts: They did not specify the function a d (*). We redo the analysis of Arya et. al. <ref> [2] </ref> to show in the full paper that a d (*) = (d=*) O (d) . The full paper also studies extending the notion of Eu-clidean spanner graphs to allow Steiner points. <p> Algorithm. 1. Scale and pre-perturb the N sites according to the Perturbation Lemma 3 (also removing duplicates) so that they have distinct integer coordinates 9 of size O (N s). 2. Find a t-spanner graph S of the N sites according to <ref> [2] </ref>. Let this spanner have total length L S . 3. Find a randomly shifted quadtree in O (N log 2 (sN )) time. 4. <p> Find a (1 + O (*))-spanner graph as in <ref> [2] </ref>. 2. Circumscribe a d-sphere about each spanner edge. 3. Expand all these d-spheres about their centers by a fac tor d =* ( d is a constant depending only on d). We now have (d=*) O (d) N d-spheres. 4.
Reference: [3] <author> J.E. Beasley and F.Goffinet. </author> <title> A Delaunay triangulation-based heuristic for the Euclidean Steiner problem. </title> <booktitle> Networks, </booktitle> <pages> pages 215-224, </pages> <year> 1994. </year>
Reference-contexts: For such point sets, the program of [27] can only reach nm = 35. algorithm described in [24] or the Smith multi-D topology op-timization algorithm also described there, (see also <ref> [3] </ref>; also the exhaustive search algorithm of [27] may be used as a local optimizer by applying it to subtrees); and by using the competing exhaustive search algorithms to solve the small subproblems arising in our algorithm; it may be possible to find very good approximate SMTs even for very large
Reference: [4] <author> B.M. Chazelle. </author> <title> A faster deterministic algorithm for minimum spanning trees. </title> <booktitle> In Proceedings of the 38th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 22-34, </pages> <year> 1997. </year>
Reference-contexts: However by applying any o (N log N ) MST algorithm <ref> [4] </ref> to either of these graphs we would recover an approximate MST, hence by [6]'s (N log N ) lower bound for approximate MSTs, the result follows. 6 Although our algorithms are most easily expressed in a way that use the "floor" function (so they are not pure algebraic, and hence
Reference: [5] <author> N. Christophides. </author> <title> Worst-case analysis of a new heuristic for the traveling salesman problem. In J.F.Traub, editor, Symposium on new directions and recent results in algorithms and complexity. </title> <publisher> Academic Press, </publisher> <year> 1976. </year>
Reference-contexts: We get 2 d O (d) N O (1) so that our dependence on d is also tight except that we have a d O (d) instead of a 2 O (d) . It's likely that this improvement is actually possible. 1.5 Related Work on Geometrical Graph algorithms Christophides <ref> [5] </ref> observed that by finding the minimum spanning tree of the graph, and then adjoining the minimum length matching of all the odd-valent points in the spanning tree, an Eulerian (even-valent) graph CG resulted, and in any metric space 3 2 `(T ST ) `(CG): In fact 3 2 `(LP )
Reference: [6] <author> G. Das, S. Kapoor, and M. Smid. </author> <title> On the complexity of approximating Euclidean traveling salesman tours and minimum spanning trees. </title> <journal> Algorithmica, </journal> <volume> 19 </volume> <pages> 447-460, </pages> <year> 1997. </year>
Reference-contexts: involve vertices which are not input sites, which is an obstacle we had to overcome using some new ideas. 1.4 How close are we to optimal speed? The N log N behavior of our TST, SMT, spanner, and banyan runtime (4) when s and d are held fixed is optimal <ref> [6] </ref> 5 in an "algebraic computation tree" model 6 . It is very likely that (4)'s dependence on s with d held fixed is optimal. <p> or TST to within 1 + * is NP-hard. (See [1] for the references to this recently developed area of "MAX-SNP hardness.") 1.6 Organization of the paper In x2 we describe how to approximate the traveling salesman tour in the plane; x3 describes banyans and their use for 5 Actually <ref> [6] </ref> did not prove this for spanners and banyans. However by applying any o (N log N ) MST algorithm [4] to either of these graphs we would recover an approximate MST, hence by [6]'s (N log N ) lower bound for approximate MSTs, the result follows. 6 Although our algorithms
Reference: [7] <author> G. Das, G. Narasimhan, and J. Salowe. </author> <title> A new way to weigh malnourished Euclidean graphs. </title> <booktitle> In Proceedings of the 6th Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 215-222, </pages> <year> 1995. </year>
Reference-contexts: Das, Narasimhan & Salowe <ref> [7] </ref> showed that spanners could be found with sum of the edge lengths at most a d (*)`(M ST ) where `(M ST ) is the length of the minimum spanning tree of the sites. They did not specify the function a d (*).
Reference: [8] <author> D. Z. Du and F. K. Hwang. </author> <title> A proof of the Gilbert-Pollak conjecture on the Steiner ratio. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 121-135, </pages> <year> 1992. </year>
Reference-contexts: RSMT in the Euclidean plane is at most 3=2 times shorter than the L 1 MST [15]; SMT in the Euclidean plane is at most 2= 3 times shorter than the MST <ref> [8] </ref>; and these factors are both tight.
Reference: [9] <editor> E.Aarts and J.K.Lenstra, editors. </editor> <title> Local search in combinatorial optimization. </title> <address> J.Wiley, </address> <year> 1997. </year>
Reference-contexts: Choosing the quadtree split coordinates in some heuris tic manner. It seems impossible to tell how much effect these ploys will have, except by experiment. A brief survey of the competition is below. TST: In practice heuristic algorithms such as the Lin-Kernighan [19] [21] <ref> [9] </ref> local optimization procedure and Held-Karp lower bound [14] [22] will rapidly find a TST and a proof that it is within a small factor (usually a few percent) of optimality.
Reference: [10] <author> U. Fossmeier and M. Kaufmann. </author> <title> Solving rectilinear Steiner tree problems exactly in theory and practice. </title> <year> 1997. </year>
Reference-contexts: However, it is not known if this can be done in a polynomial number of steps, even in the plane 15 . SMT: The best computer program so far [27] can solve problems with 140 random 16 sites in 2D. See also <ref> [10] </ref> for a program which can solve 55-site 2D RSMT problems.
Reference: [11] <author> M. R. Garey, R. L. Graham, and D. S. Johnson. </author> <title> The complexity of computing Steiner minimal trees. </title> <journal> SIAM J. Appl. Math., </journal> <volume> 32(4) </volume> <pages> 835-859, </pages> <year> 1977. </year>
Reference-contexts: Similarly H B contains a regular site V B . Proof of Hexagon property: It is almost the same as the proof of lemma 3 (page 841) of <ref> [11] </ref>, but we include it here for completeness. Refer to figure 4 in which AB and all the hexagon sides are L in length and AB is vertical.
Reference: [12] <author> E.N. Gilbert and H.O. Pollak. </author> <title> Steiner minimal trees. </title> <journal> SIAM J. Appl. Math., </journal> <volume> 16(1) </volume> <pages> 1-29, </pages> <year> 1968. </year>
Reference-contexts: The above facts 0-5 were shown in <ref> [12] </ref>. All of them are valid in general dimension except for fact 5. Lemma 27 (Hexagon property; d = 2 only) Let AB be an SMT edge.
Reference: [13] <author> Michel X. Goemans. </author> <title> Worst-case comparison of valid inequalities for the TSP. </title> <journal> Mathematical Programming, </journal> <volume> 69 </volume> <pages> 335-349, </pages> <year> 1995. </year>
Reference-contexts: No proof is known that the running time is always going to be rapid or that the approximation is always going to be good, but in practice it almost always is. Furthermore, programs that branch and bound (using high quality lower bounds arising from "polyhedral combinatorics" [17] <ref> [13] </ref> which empirically always seem to exhibit errors well below 1%) can find the optimal tour, and prove it, for TST problems with 1000s of sites [20] 13 .
Reference: [14] <author> M. Held and R.M. Karp. </author> <title> The traveling salesman problem and minimum spanning trees. </title> <journal> Operations Research, </journal> <volume> 18 </volume> <pages> 1138-1162, </pages> <year> 1970. </year>
Reference-contexts: It seems impossible to tell how much effect these ploys will have, except by experiment. A brief survey of the competition is below. TST: In practice heuristic algorithms such as the Lin-Kernighan [19] [21] [9] local optimization procedure and Held-Karp lower bound <ref> [14] </ref> [22] will rapidly find a TST and a proof that it is within a small factor (usually a few percent) of optimality.
Reference: [15] <author> F.K. Hwang. </author> <title> On Steiner minimal trees with rectilinear distance. </title> <journal> SIAM J. Appl. Math., </journal> <volume> 30(1) </volume> <pages> 104-114, </pages> <year> 1976. </year>
Reference-contexts: Apparently the current record polynomial time approximation factor for SMTs in arbitrary metric spaces is 1:644, due to Karpinski & Zelikovsky in an unpublished manuscript. RSMT in the Euclidean plane is at most 3=2 times shorter than the L 1 MST <ref> [15] </ref>; SMT in the Euclidean plane is at most 2= 3 times shorter than the MST [8]; and these factors are both tight.
Reference: [16] <author> R.M. Karp. </author> <title> Probabilistic analysis of partitioning algorithms for the TSP in the plane. </title> <journal> Math.Oper.Res., </journal> <volume> 2 </volume> <pages> 209-224, </pages> <year> 1977. </year>
Reference-contexts: and hence initially would seem not to be susceptible to the lower bound) they may be rewritten in an honestly purely algebraic manner still with O (N log N ) runtime. approximating SMTs; and x4 concludes. 2 Approximating the TSP in the plane We use lemmas stated in [1] and <ref> [16] </ref> about (1+*)-approximate traveling salesman tours for N sites in the plane. They all generalize to d-space with d &gt; 2, but in this abbreviated pa per we'll sometimes only state them with d = 2.
Reference: [17] <author> E.L. Lawler, J.K. Lenstra, A.H.G. Rinnooy Kan, </author> <title> and D.B. Shmoys, editors. The traveling salesman problem. </title> <address> J.Wiley, </address> <year> 1985. </year>
Reference-contexts: No proof is known that the running time is always going to be rapid or that the approximation is always going to be good, but in practice it almost always is. Furthermore, programs that branch and bound (using high quality lower bounds arising from "polyhedral combinatorics" <ref> [17] </ref> [13] which empirically always seem to exhibit errors well below 1%) can find the optimal tour, and prove it, for TST problems with 1000s of sites [20] 13 .
Reference: [18] <author> J. Van Leeuwen and A.A. Schoone. </author> <title> Untangling a traveling salesman tour in the plane. </title> <booktitle> In Proc. 7th conf. on graphtheoretic concepts in computer sci. (WG 81), </booktitle> <address> Linz, Austria, </address> <pages> pages 87-98, </pages> <year> 1981. </year>
Reference-contexts: any as-yet inexactly solved TST prob lem in "TSPlib" is 2103. 14 Also, it should be possible to combine the N O ( p N) time exact 2D TST algorithm of [23] with the branch and bound programs to get the best of both worlds. 15 Van Leeuwen and Schoone <ref> [18] </ref> show that performing any N 3 =4 elementary uncrossing operations will always uncross a TST of N sites in general position in the plane.
Reference: [19] <author> S. Lin and B. Kernighan. </author> <title> An effective heuristic algorithm for the travelling-salesman problem. </title> <journal> Operations Research, </journal> <volume> 21 </volume> <pages> 498-516, </pages> <year> 1973. </year>
Reference-contexts: Choosing the quadtree split coordinates in some heuris tic manner. It seems impossible to tell how much effect these ploys will have, except by experiment. A brief survey of the competition is below. TST: In practice heuristic algorithms such as the Lin-Kernighan <ref> [19] </ref> [21] [9] local optimization procedure and Held-Karp lower bound [14] [22] will rapidly find a TST and a proof that it is within a small factor (usually a few percent) of optimality.
Reference: [20] <author> M. Padberg and G. Rinaldi. </author> <title> A branch and cut algorithm for the resolution of large scale symmetric traveling salesman problems. </title> <journal> SIAM Review, </journal> <volume> 33 </volume> <pages> 60-100, </pages> <year> 1991. </year>
Reference-contexts: Furthermore, programs that branch and bound (using high quality lower bounds arising from "polyhedral combinatorics" [17] [13] which empirically always seem to exhibit errors well below 1%) can find the optimal tour, and prove it, for TST problems with 1000s of sites <ref> [20] </ref> 13 . These procedures undoubtedly consume asymptotically exponential runtime (1 + c) N , or quite likely even N cN , for some c &gt; 0. But empirically c is remarkably small 14 (c 0:004? Or even less?). <p> However, at the end of [1], Arora points out that a (slower form of) his algorithm may be interpreted as a local optimizer. (Ours too.) It is possible that this interpretation is of more practical value than our algorithms, because then the powerful competing techniques <ref> [20] </ref> [27] could be used as Arora's local optimizer! Also these techniques could be used to solve the small "TST with boundary conditions" subproblems arising in our algorithm.
Reference: [21] <author> Christos H. Papadimitriou. </author> <title> The complexity of the Lin-Kernighan heuristic for the traveling salesman problem. </title> <journal> SIAM J. Comput., </journal> <volume> 21(3) </volume> <pages> 450-465, </pages> <year> 1992. </year>
Reference-contexts: Choosing the quadtree split coordinates in some heuris tic manner. It seems impossible to tell how much effect these ploys will have, except by experiment. A brief survey of the competition is below. TST: In practice heuristic algorithms such as the Lin-Kernighan [19] <ref> [21] </ref> [9] local optimization procedure and Held-Karp lower bound [14] [22] will rapidly find a TST and a proof that it is within a small factor (usually a few percent) of optimality.
Reference: [22] <author> D.B. Shmoys and D.P. Williamson. </author> <title> Analyzing the Held-Karp TSP bound: A monotonicity property with application. </title> <journal> Info. Proc. Lett., </journal> <pages> pages 281-285, </pages> <year> 1990. </year>
Reference-contexts: in the spanning tree, an Eulerian (even-valent) graph CG resulted, and in any metric space 3 2 `(T ST ) `(CG): In fact 3 2 `(LP ) `(CG), where `(LP ) is the cost of a simple linear programming lower bound on the TST cost (also computable in polynomial time) <ref> [22] </ref>. This approximation ratio 1:5 is still best known for TST in arbitrary metric spaces for approximation algorithms running in polynomial time. <p> It seems impossible to tell how much effect these ploys will have, except by experiment. A brief survey of the competition is below. TST: In practice heuristic algorithms such as the Lin-Kernighan [19] [21] [9] local optimization procedure and Held-Karp lower bound [14] <ref> [22] </ref> will rapidly find a TST and a proof that it is within a small factor (usually a few percent) of optimality.
Reference: [23] <author> W.D. Smith. </author> <title> Studies in computational geometry motivated by mesh generation. </title> <type> PhD thesis, </type> <institution> Princeton Applied Math Dept., Princeton, NJ, </institution> <year> 1988. </year> <note> University Microfilms International, order # 9002713. </note>
Reference-contexts: This approximation ratio 1:5 is still best known for TST in arbitrary metric spaces for approximation algorithms running in polynomial time. Smith <ref> [23] </ref> showed how, by "searching over separators," to find the optimum TST for N points in the Euclidean plane in N O ( N) steps. (Other geometrical graphs are calculable with the same technique, for example the minimum length triangulation.) Also in [24] he extended this to handle RSMT. <p> Techniques for showing a 2 O (r) bound with planarity and generation algorithms to achieve such bounds are discussed in <ref> [23] </ref>. We then claim the TST our algorithm produces will be at most a factor (1 + O (* + r 1 a 2 (*)) times longer than the optimum TST. We may choose r = O (a 2 (*)=*) to get a 1 + * approximation. <p> our algorithm with the aid of the Hwang O (N )-time 2D topology optimization 13 The lowest cardinality of any as-yet inexactly solved TST prob lem in "TSPlib" is 2103. 14 Also, it should be possible to combine the N O ( p N) time exact 2D TST algorithm of <ref> [23] </ref> with the branch and bound programs to get the best of both worlds. 15 Van Leeuwen and Schoone [18] show that performing any N 3 =4 elementary uncrossing operations will always uncross a TST of N sites in general position in the plane.
Reference: [24] <author> W.D. Smith. </author> <title> How to find Steiner minimal trees in d-space. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 137-177, </pages> <year> 1992. </year>
Reference-contexts: Smith [23] showed how, by "searching over separators," to find the optimum TST for N points in the Euclidean plane in N O ( N) steps. (Other geometrical graphs are calculable with the same technique, for example the minimum length triangulation.) Also in <ref> [24] </ref> he extended this to handle RSMT. Apparently the current record polynomial time approximation factor for SMTs in arbitrary metric spaces is 1:644, due to Karpinski & Zelikovsky in an unpublished manuscript. <p> SMT: The best computer program so far [27] can solve problems with 140 random 16 sites in 2D. See also [10] for a program which can solve 55-site 2D RSMT problems. An impractical exact RSMT algorithm running in N O ( p time is described in <ref> [24] </ref>; recently the author (Smith) has generalized this to N O (N 11=d ) in d dimensions while at the same time making it much more practical. <p> The worst case runtime behavior of their algorithm appears (!) to be doubly exponential: A B N . At present, however, the best available program for SMT in 3D <ref> [24] </ref>, can only solve 12-site SMTs. Thus again at least on the surface it seems as though our algorithm cannot have much practical impact in 2D. Looking more deeply, again it may be possible by combining our techniques with the competing ones, to get a practical impact. <p> Problems in which the sites form an n fi m grid give the program much more difficulty because there are then an exponentially large number of nearly equal SMTs. For such point sets, the program of [27] can only reach nm = 35. algorithm described in <ref> [24] </ref> or the Smith multi-D topology op-timization algorithm also described there, (see also [3]; also the exhaustive search algorithm of [27] may be used as a local optimizer by applying it to subtrees); and by using the competing exhaustive search algorithms to solve the small subproblems arising in our algorithm; it
Reference: [25] <author> Luca Trevisan. </author> <title> When Hamming meets Euclid: the ap-proximability of geometric TSP and MST. </title> <booktitle> In Proceedings of the 29th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 21-29, </pages> <year> 1997. </year>
Reference-contexts: But in fact our runtime bounds are the same as this "impossible" result but with the o changed to an O. Finally, we can make it plausible that the dependence of our TST running time on d with s held fixed is close to optimal. Trevisan <ref> [25] </ref> showed that approximating TST to within any sufficiently small constant factor for N sites in log N dimensional space, is NP-hard.
Reference: [26] <author> David M. Warme. </author> <title> A new exact algorithm for rectilinear steiner trees. </title> <booktitle> In International Symposium on Mathematical Programming, </booktitle> <address> Lausanne, Switzerland, </address> <year> 1997. </year>
Reference-contexts: Later note: A recent breakthrough (for practical purposes) is a program by D.Warme <ref> [26] </ref>, in cooperation with P.Winter and M.Zachariasen, which can now solve 2000-site 2D SMT and 1000-site 2D RSMT problems. The worst case runtime behavior of their algorithm appears (!) to be doubly exponential: A B N .
Reference: [27] <author> P. Winter and M. Zachariasen. </author> <title> Euclidean Steiner minimal trees, an improved exact algorithm. </title> <journal> Networks, </journal> <volume> 30(3) </volume> <pages> 149-166, </pages> <year> 1997. </year>
Reference-contexts: However, at the end of [1], Arora points out that a (slower form of) his algorithm may be interpreted as a local optimizer. (Ours too.) It is possible that this interpretation is of more practical value than our algorithms, because then the powerful competing techniques [20] <ref> [27] </ref> could be used as Arora's local optimizer! Also these techniques could be used to solve the small "TST with boundary conditions" subproblems arising in our algorithm. <p> However, it is not known if this can be done in a polynomial number of steps, even in the plane 15 . SMT: The best computer program so far <ref> [27] </ref> can solve problems with 140 random 16 sites in 2D. See also [10] for a program which can solve 55-site 2D RSMT problems. <p> Problems in which the sites form an n fi m grid give the program much more difficulty because there are then an exponentially large number of nearly equal SMTs. For such point sets, the program of <ref> [27] </ref> can only reach nm = 35. algorithm described in [24] or the Smith multi-D topology op-timization algorithm also described there, (see also [3]; also the exhaustive search algorithm of [27] may be used as a local optimizer by applying it to subtrees); and by using the competing exhaustive search algorithms <p> For such point sets, the program of <ref> [27] </ref> can only reach nm = 35. algorithm described in [24] or the Smith multi-D topology op-timization algorithm also described there, (see also [3]; also the exhaustive search algorithm of [27] may be used as a local optimizer by applying it to subtrees); and by using the competing exhaustive search algorithms to solve the small subproblems arising in our algorithm; it may be possible to find very good approximate SMTs even for very large N .
References-found: 27

