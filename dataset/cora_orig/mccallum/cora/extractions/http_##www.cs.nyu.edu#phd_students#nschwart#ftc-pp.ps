URL: http://www.cs.nyu.edu/phd_students/nschwart/ftc-pp.ps
Refering-URL: http://www.cs.nyu.edu/phd_students/nschwart/index.html
Root-URL: http://www.cs.nyu.edu
Title: Design of the FT-C Preprocessor  
Author: Naftali Schwartz 
Date: June 6, 1995  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> Remzi H. Arpaci, Andrea Dusseau, Amin M. Vahdat, Lok T. Liu, Thomas E. Anderson, and David A. Patterson. </author> <title> The interaction of parallel and sequential workloads on a network of workstations. </title> <note> In Sigmetrics '95, to possibly appear, </note> <month> November </month> <year> 1994. </year> <note> Available via http:http://www.cs.berkeley.edu/~vahat/vahat/conf/sigmetrics95/sigmetrics.ps. 12 </note>
Reference-contexts: This preprocessor parses and outputs C++ code with some transformations germane to compiling parallel programs to run on standard network of workstations (NOW <ref> [1] </ref>). It has been developed to support the Calypso [2] project as well. Other projects pursuing similar objectives have produced preprocessors of a similar nature. Of interest is the Cilk [3] system, which preprocesses the Cilk language (a minor variant of C) into something the standard C compiler can handle.
Reference: [2] <author> Arash Baratloo, Partha Dasgupta, and Zvi M. Kedem. </author> <title> Parallel Processing on Networks of Work--stations: A Fault-Tolerant, High Performance Approach. </title> <booktitle> In Proceedings of the IEEE Computer Society, </booktitle> <pages> page 0, </pages> <year> 1995. </year>
Reference-contexts: This preprocessor parses and outputs C++ code with some transformations germane to compiling parallel programs to run on standard network of workstations (NOW [1]). It has been developed to support the Calypso <ref> [2] </ref> project as well. Other projects pursuing similar objectives have produced preprocessors of a similar nature. Of interest is the Cilk [3] system, which preprocesses the Cilk language (a minor variant of C) into something the standard C compiler can handle.
Reference: [3] <author> Robert D. Blumofe, Christopher F. Joerg, Bradley C. Kuszmaul, Charles E. Leiserson, Phil Lisiecki, Keith H. Randall, Andy Shaw, and Yuli Zhou. </author> <title> Cilk 1.2 Reference Manual. MITLCS, 545 Technology Square, </title> <address> Cambridge, MA 02139, </address> <month> February </month> <year> 1995. </year> <note> Available via ftp://theory.lcs.mit.edu/pub/cilk/manual1.0.ps.Z. </note>
Reference-contexts: It has been developed to support the Calypso [2] project as well. Other projects pursuing similar objectives have produced preprocessors of a similar nature. Of interest is the Cilk <ref> [3] </ref> system, which preprocesses the Cilk language (a minor variant of C) into something the standard C compiler can handle. Because we hope to appeal to a very broad user base (e.g. - anyone with access to a NOW), we felt it imperative that our preprocessor accept C++ code.
Reference: [4] <author> Dalia Malki and Marc Snir. </author> <title> Nicke - C extensions for Programming on Distributed-Memory Machines. </title> <editor> In J. Saltz and P. Mehrotra, editors, </editor> <title> Languages, Compilers and Run-Time Environments for Distributed Memory Machines. </title> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1992. </year>
Reference-contexts: This first goal of our work may easily be met with a simple textual substitution script. However, this method introduces some arbitrary restrictions on the programmer. (For other work where this technique was chosen for expediency notwithstanding the undesirable side-effects, see <ref> [4] </ref>.) For example, it would not be possible to implement the "shared" storage class syntax in the general case without a compiler front-end with full-blown symbol tables. (The Calypso project has produced a simple script which implements this feature with the provisions that (1) shared-memory declarations must take a restricted form
Reference: [5] <author> Vern Paxson. </author> <title> Using Flex, A Fast Lexical Analyzer Generator. Free Software Foundation, </title> <month> May </month> <year> 1990. </year> <note> Available via http://csugrad.cs.vt.edu/manuals/flex/flex toc.html. </note>
Reference-contexts: When the closing brace of the class definition is seen by the parser, this temporary file gets a special `$' marker appended. Using the special "multiple input buffer" feature of flex <ref> [5] </ref>, the lexical input is switched to read back from this file. The parser has special "rescanning transitions" included in the class-definition rules, which assign inlined code to member function declarations until seeing the marker.
Reference: [6] <author> N. Schwartz. </author> <title> FT-C Fault-Tolerant Distributed Computing. </title> <note> Available via http://galt.cs.nyu.edu/students/nschwart/proposal.ps.Z. 13 </note>
Reference-contexts: : : : : : : : : 8 5 The Expression Hierarchy 9 6 The Statement Hierarchy 10 7 Outputting the Transformed Program 11 8 Future Work 12 ii 1 General Overview 1.1 Introduction and Related Work This document describes our new object-oriented implementation of the Fault-Tolerant C preprocessor <ref> [6] </ref>. This preprocessor parses and outputs C++ code with some transformations germane to compiling parallel programs to run on standard network of workstations (NOW [1]). It has been developed to support the Calypso [2] project as well. Other projects pursuing similar objectives have produced preprocessors of a similar nature. <p> This also implies arbitrary nesting, although this feature has not yet been implemented in the runtime. The "shared" keyword is syntactically a storage class like auto or static. It declares Hard Shared memory <ref> [6] </ref>. We will see that the system supports implicit (undeclared) data sharing as well. 1 1.3 Role of the Preprocessor One of the fundamental distinctions of our parallel processing environment is that it is highly programmer-centric. <p> It is, however, extremely desirable to let programmers use stack variables as naturally within parallel steps as they would use them anywhere else | it is this attention to detail which produces a solid programming paradigm. We call this form of shared memory Soft Sharing <ref> [6] </ref>. There are, too, potential optimizations available in the source program which may be used in the future to increase efficiency, but the information needed for this can only be gleaned with a tool capable of serious program analysis.
References-found: 6

