URL: http://www.cs.wisc.edu/~talluri/asplos.ps
Refering-URL: http://www.cs.wisc.edu/~talluri/talluri.html
Root-URL: 
Title: Abstract  
Abstract: Many commer cial micr oprocessor ar chitectures have added translation lookaside buffer (TLB) support for super-pages. Superpages dif fer from segments because their size must be a power of two multiple of the base page size and they must be aligned in both virtual and physical addr ess spaces. Very large superpages (e.g., 1MB) are clearly useful for mapping special str uctures, such as kernel data or frame buf fers. This paper considers the ar chitectural and operating system support r equired to exploit medium-sized superpages ( e.g., 64KB, i.e., sixteen times a 4KB base page size). First, we show that superpages impr ove TLB performance only after invasive operating system modifications that introduce considerable overhead. We then pr opose two subblock TLB designs as alternate ways to improve TLB performance. Analogous to a subblock cache, a completesubblock TLB associates a tag with a superpage-sized r egion but has valid bits, physical page number, attributes, etc., for each possible base page mapping. A partialsubblock TLB entry is much smaller than a completesubblock TLB entry , because it shar es physical page number and attribute fields acr oss base page mappings. A drawback of a partialsubblock TLB is that base page mappings can share a TLB entry only if they map to consecutive physical pages and have the same attributes. We propose a physical memory allocation algorithm, page reservation, that makes this sharing more likely. When page reservation is used, experimental r esults show partial-subblock TLBs perform better than superpage TLBs, while requiring simpler operating system changes. If operating system changes ar e inappr opriate, however , complete-subblock TLBs perform best. 
Abstract-found: 1
Intro-found: 1
Reference: [Bail91] <author> David Bailey, John Barton, Thomas Lasinski, Horst Simon. </author> <title> The NAS Parallel Benchmarks. </title> <type> Report RNR-91-002 Revision 2, </type> <institution> Ames Research Center, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: W e concentrate on benchmarks where TLB miss handling is a significant part of the execution time, because we expect it to be tr ue for futur e workloads. Nasa7, compress, wave5, spice, and gcc are from the SPEC92 suite [SPEC91]; fftpde is a NAS benchmark <ref> [Bail91] </ref> and operates on a 64X64X64 matrix; mp3d and pthor are uniprocessor versions fr om the SPLASH benchmark suite [Sing92]; coral [Rama93] is a deductive database executing a nested loop join; ML [Appe91] is executing a pr ogram that does a str ess test on the garbage collector.
Reference: [Chen92] <author> J. Bradley Chen, Anita Borg, Norman P. Jouppi. </author> <title> A Simulation Based Study of TLB Performance. </title> <booktitle> In Proc. of the 19th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 114123, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: While many commercial architectures support medium-sized superpages in their TLBs, ther e are few published studies on their impact on TLBs or operating systems. Kagimasa et al. [Kagi91] describe a system using two page sizes in a partitioned addr ess space. Chen et al. <ref> [Chen92] </ref> and Talluri et al. [Tall92] present data that supports the use of superpages. Khalidi et al. [Khal93] and Mogul [Mogu93] raise some operating system issues researchers should address to support superpages. 2.
Reference: [Denn70] <author> Peter J. Denning. </author> <title> Virtual Memory. </title> <journal> Computing Surveys, </journal> <volume> 2(3):153189, </volume> <month> September </month> <year> 1970. </year>
Reference-contexts: 1. Introduction Most architectures that support paged virtual memory <ref> [Denn70] </ref> accelerate addr ess translation with a Surpassing the TLB Performance of Superpages with Less Operating System Support Madhusudhan Talluri and Mark D. Hill. <p> Chen et al. [Chen92] and Talluri et al. [Tall92] present data that supports the use of superpages. Khalidi et al. [Khal93] and Mogul [Mogu93] raise some operating system issues researchers should address to support superpages. 2. Operating System Support for Superpages Effective paged virtual memory <ref> [Denn70] </ref> r equires coordinated support fr om a computer s operating system and har dware architecture. Operating system support for virtual memory with a single fixed page size is substantial but well-understood ( e.g., UNIX, VMS, NT , MACH).
Reference: [Devi92] <author> Yannick Deville and Jean Gobert. </author> <title> A class of replacement policies for medium and high associativity structures. Computer Architecture News, </title> <address> 20(1):5564, </address> <month> March </month> <year> 1992. </year>
Reference-contexts: TLB replacement algorithm We use a pseudo-LRU TLB r eplacement algorithm for fully-associative TLBs. The algorithm is similar to the Go Down Stack (GODS) algorithm described by Deville et al. <ref> [Devi92] </ref>. We associate an used bit with every TLB entry that is set on hits to that entry.
Reference: [Good83] <author> James R. Goodman. </author> <title> Using Cache Memory to Reduce Processor-Memory Traffic. </title> <booktitle> In Proc. of the Tenth Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 124131, </pages> <address> Stockholm Sweden, </address> <month> June </month> <year> 1983. </year>
Reference-contexts: For example, using the area model described in the Appendix, a completesub 2. Subblocking [Hill84] is also called sectoring [Lipt68] and address/transfer blocks <ref> [Good83] </ref>. block TLB with subblock factor 16 is about 4.5 times larger than a superpage TLB with the same number of entries. Also the incr eased ar ea can translate into increased access time, but the tradeof fs ar e complex.
Reference: [Henn90] <author> John L Hennessy and David A Patterson. </author> <title> Computer Architecture A Quantitative Approach. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1990. </year>
Reference-contexts: The experiments were performed on equipment donated by Sun Microsystems. translation lookaside buffer 1 (TLB). A TLB is a cache whose tags ar e virtual page numbers (VPN) and data are physical page numbers (PPN), page attributes ( e.g., protection, cacheability), and optional r eference and modified bits <ref> [Mile90, Henn90, Smit82] </ref>. TLBs must be studied again, because of curr ent workload and pr oces-sor trends. Future workloads will demand gr eater TLB r each the maximum size of memory mapped by a TLBthan today.
Reference: [Hill84] <author> Mark D. Hill and Alan Jay Smith. </author> <title> Experimental Evaluation of On-Chip Microprocessor Cache Memories. </title> <booktitle> In Proc. of the 11th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 158166, </pages> <address> Ann Arbor MI, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: Completesubblocking, however, has one major disadvantage compar ed to superpages, namely , that a completesubblock TLB entry occupies a lar ger ar ea than a superpage TLB entry . For example, using the area model described in the Appendix, a completesub 2. Subblocking <ref> [Hill84] </ref> is also called sectoring [Lipt68] and address/transfer blocks [Good83]. block TLB with subblock factor 16 is about 4.5 times larger than a superpage TLB with the same number of entries. Also the incr eased ar ea can translate into increased access time, but the tradeof fs ar e complex.
Reference: [Joup94] <author> Norman P. Jouppi and Steven J. E. Wilson. </author> <title> Tradeoffs in Two-Level On-Chip Caching. </title> <booktitle> In Proc. of the 21st Annual International Symposium on Computer Architecture, </booktitle> <month> April </month> <year> 1994. </year>
Reference-contexts: Comparing TLB chip areas The results above assume TLBs with the same number of entries, but r equire different chip ar ea per entry. Here we size TLBs to get comparable number of TLB misses to see which TLB minimizes chip ar ea <ref> [Joup94, Nagl94] </ref>. We estimate the chip ar ea r equired to implement a single-ported TLB using the on-chip cache ar ea model proposed by Mulder et al. [Muld91] with the assumptions given in the Appendix.
Reference: [Kagi91] <author> Toyohiko Kagimasa, Kikuo Takahashi, Toshiaki Mori. </author> <title> Adaptive Storage Management for Very Large Virtual/Real Storage Systems. </title> <booktitle> In Proc. of the 18th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 372379, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: When operating system changes ar e inappropriate, completesubblock TLBs perform best. While many commercial architectures support medium-sized superpages in their TLBs, ther e are few published studies on their impact on TLBs or operating systems. Kagimasa et al. <ref> [Kagi91] </ref> describe a system using two page sizes in a partitioned addr ess space. Chen et al. [Chen92] and Talluri et al. [Tall92] present data that supports the use of superpages. Khalidi et al. [Khal93] and Mogul [Mogu93] raise some operating system issues researchers should address to support superpages. 2.
Reference: [Kane92] <author> Gerry Kane and Joe Heinrich. </author> <title> MIPS RISC Architecture. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: Architectures that support superpages include MIPS R4x00, DEC Alpha, SP ARC, PowerPC, Intel, ARM, Mo-torola 68K and HP PARISC. The MIPS R4000 <ref> [Kane92] </ref>, for example, supports a 4KB base page size and super-pages of 16KB, 64KB, 256KB, 1MB, 4MB and 16MB. The clear motivation for supporting superpages is that using them appears to incr ease TLB r each for fr ee. <p> A completesubblock TLB entry with a subblock factor n has an n times lar ger data portion but a log 2 (n) bits smaller tag than a non-subblocked TLB entry . The MIPS R4x00 has, for example, a completesubblock TLB with a subblock factor of 2 <ref> [Kane92] </ref>. On a TLB miss, befor e attempting a replacement, the tags and valid bits ar e checked to see if an empty subblock can hold the mapping. Alternatively , all subblocks can be loaded on a TLB miss.
Reference: [Kess92] <author> R. E. Kessler and Mark D. Hill. </author> <title> Page Placement Algorithms for Large Real-Index Caches. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(4):338359, </volume> <month> November </month> <year> 1992. </year>
Reference-contexts: Thus, there should be no significant change in the page fault rate from the non-superpage implementation. 4. Page coloring <ref> [Tayl90, Kess92] </ref> also carefully selects physical pages for virtual addresses but for a different purpose and in a different way than page reservation.
Reference: [Khal93] <author> Yousef A. Khalidi, Madhusudhan Talluri, Michael N. Nelson, Dock Williams. </author> <title> Virtual Memory Support for Multiple Page Sizes. </title> <booktitle> In Proc. of the Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 104109, </pages> <address> Napa CA, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: Kagimasa et al. [Kagi91] describe a system using two page sizes in a partitioned addr ess space. Chen et al. [Chen92] and Talluri et al. [Tall92] present data that supports the use of superpages. Khalidi et al. <ref> [Khal93] </ref> and Mogul [Mogu93] raise some operating system issues researchers should address to support superpages. 2. Operating System Support for Superpages Effective paged virtual memory [Denn70] r equires coordinated support fr om a computer s operating system and har dware architecture.
Reference: [Knut68] <author> Donald E. Knuth. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Volume 1. </volume> <publisher> Addison Wesley, </publisher> <year> 1968. </year> <note> Second Printing. </note>
Reference-contexts: Second, the changes required for efficient superpage support ar e invasive and af fect lar ge portions of existing operating systems. Physical memory management, for example, must be overhauled to handle variable sizes and external fragmentation <ref> [Knut68, Pete77] </ref>. Many key data str uctures ( e.g., page tables) and interfaces need to be redesigned. Use of superpages often conicts with file system r ead-ahead and r equires coor dination on what would otherwise have been local policy decisions. <p> Page Fault Handling Superpages increase pagefault latency and program execution time. Operating sys tems would otherwise overlap some of the I/O with execution. Physical Memory Management & Page promotion: Allocate Physical memory cannot be treated as equal-sized pages. Requires an algorithm to efficiently allocate memory in variable-sized chunks <ref> [Knut68] </ref>. Physical Memory Management During periods of high memory demand, external fragmentation prevents use of superpages. Many of the operating system modifications for superpages continue to add overhead, even though there is no further TLB benefit. <p> Memory management techniques for variablesized objects have been studied extensively . There ar e well-known techniques to minimize external fragmentation <ref> [Knut68, Pete77] </ref>. Some file systems also use similar techniques to reserve disk space [McKu84]. Page r eservation significantly impr oves the performance of partialsubblock TLBs and r educes page pr o-motion cost if using superpages. However , we did not study the effect of page reservation on cache behavior. 5.
Reference: [Lipt68] <author> J. S. Liptay. </author> <title> Structural aspects of the System/360 Model 85, Part II: the cache. </title> <journal> IBM Systems Journal, </journal> <volume> 7(1):1521, </volume> <year> 1968. </year>
Reference-contexts: Completesubblocking, however, has one major disadvantage compar ed to superpages, namely , that a completesubblock TLB entry occupies a lar ger ar ea than a superpage TLB entry . For example, using the area model described in the Appendix, a completesub 2. Subblocking [Hill84] is also called sectoring <ref> [Lipt68] </ref> and address/transfer blocks [Good83]. block TLB with subblock factor 16 is about 4.5 times larger than a superpage TLB with the same number of entries. Also the incr eased ar ea can translate into increased access time, but the tradeof fs ar e complex.
Reference: [McKu84] <author> M. K. McKusick, W. N. Joy, S. J. Leffler, R. S. Fabry. </author> <title> A Fast File System for UNIX. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3):191197, </volume> <month> August </month> <year> 1984. </year>
Reference-contexts: Memory management techniques for variablesized objects have been studied extensively . There ar e well-known techniques to minimize external fragmentation [Knut68, Pete77]. Some file systems also use similar techniques to reserve disk space <ref> [McKu84] </ref>. Page r eservation significantly impr oves the performance of partialsubblock TLBs and r educes page pr o-motion cost if using superpages. However , we did not study the effect of page reservation on cache behavior. 5.
Reference: [Mile90] <author> Milan Milenkovic. </author> <title> Microprocessor Memory Management Units. </title> <journal> IEEE Micro, </journal> <volume> 10(2):7085, </volume> <month> April </month> <year> 1990. </year>
Reference-contexts: The experiments were performed on equipment donated by Sun Microsystems. translation lookaside buffer 1 (TLB). A TLB is a cache whose tags ar e virtual page numbers (VPN) and data are physical page numbers (PPN), page attributes ( e.g., protection, cacheability), and optional r eference and modified bits <ref> [Mile90, Henn90, Smit82] </ref>. TLBs must be studied again, because of curr ent workload and pr oces-sor trends. Future workloads will demand gr eater TLB r each the maximum size of memory mapped by a TLBthan today.
Reference: [MIPS93] <author> MIPS Technologies, Inc. </author> <title> TFP Microprocessor Chip Set: Preliminary Product Information, </title> <month> October </month> <year> 1993. </year>
Reference-contexts: The SGI R8000 (TFP), for example, implements a set-associative TLB, but r estricts a pr ocess to a single page size <ref> [MIPS93] </ref>. Second, the complexity or time needed to handle TLB misses is likely to be lar ger for superpages. We expect this to be of fset easily by the reduction in the number of TLB misses. The impact of supporting superpages, however , is not limited to the TLB.
Reference: [Mogu93] <author> Jeffrey C. Mogul. </author> <title> Big Memories on the Desktop. </title> <booktitle> In Proc. of the Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 110115, </pages> <address> Napa CA, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: Kagimasa et al. [Kagi91] describe a system using two page sizes in a partitioned addr ess space. Chen et al. [Chen92] and Talluri et al. [Tall92] present data that supports the use of superpages. Khalidi et al. [Khal93] and Mogul <ref> [Mogu93] </ref> raise some operating system issues researchers should address to support superpages. 2. Operating System Support for Superpages Effective paged virtual memory [Denn70] r equires coordinated support fr om a computer s operating system and har dware architecture.
Reference: [Muld91] <author> Johannes M. Mulder, N. T. Quach, Michael J. Flynn. </author> <title> An Area Model for On-Chip Memories and its Applications. </title> <journal> IEEE Journal of Solid State Circuits, </journal> <volume> 26(2):98106, </volume> <month> February </month> <year> 1991. </year>
Reference-contexts: Here we size TLBs to get comparable number of TLB misses to see which TLB minimizes chip ar ea [Joup94, Nagl94]. We estimate the chip ar ea r equired to implement a single-ported TLB using the on-chip cache ar ea model proposed by Mulder et al. <ref> [Muld91] </ref> with the assumptions given in the Appendix. T able 7 gives the number of single-page-size, partial and completesub-block TLB entries required to get comparable number of misses to a 64-entry superpage TLB and the corresponding area normalized with r espect to the ar ea for the 64-entry superpage TLB.
Reference: [Nagl92] <author> David Nagle, Richard Uhlig, Trevor Mudge. </author> <title> Monster: A Tool for Analyzing the Interaction Between Operating Systems and Computer Architecture. </title> <institution> University of Michigan Technical Report, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: Thir d, trap-based simulation naturally extends to multi-program workloads. The key disadvantage of trap-based simulation is the inability to calculate the number of TLB hits without hardware support such as pr ofiling counters [Site93] or external pr obes <ref> [Nagl92] </ref>. This makes it dif ficult to use normalized metrics (e.g., TLB miss ratio). Foxtrot implements trap-based simulation for SPARC V8 pr ocessors [SP AR91].
Reference: [Nagl94] <author> David Nagle, Richard Uhlig, Trevor Mudge, Stuart Sechrest. </author> <title> Optimal Allocation of On-Chip Memory for Multiple-API Operating Systems. </title> <booktitle> In Proc. of the 21st Annual International Symposium on Computer Architecture, </booktitle> <month> April </month> <year> 1994. </year>
Reference-contexts: Comparing TLB chip areas The results above assume TLBs with the same number of entries, but r equire different chip ar ea per entry. Here we size TLBs to get comparable number of TLB misses to see which TLB minimizes chip ar ea <ref> [Joup94, Nagl94] </ref>. We estimate the chip ar ea r equired to implement a single-ported TLB using the on-chip cache ar ea model proposed by Mulder et al. [Muld91] with the assumptions given in the Appendix.
Reference: [Orga72] <author> E.J. Organick. </author> <title> The Multics System: An Examination of Its Structure. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1972. </year>
Reference: [Pete77] <author> J. L. Peterson and N. Theodore. </author> <title> Buddy Systems. </title> <journal> Communications of the ACM, </journal> <volume> 20(6):421431, </volume> <month> June </month> <year> 1977. </year>
Reference-contexts: Second, the changes required for efficient superpage support ar e invasive and af fect lar ge portions of existing operating systems. Physical memory management, for example, must be overhauled to handle variable sizes and external fragmentation <ref> [Knut68, Pete77] </ref>. Many key data str uctures ( e.g., page tables) and interfaces need to be redesigned. Use of superpages often conicts with file system r ead-ahead and r equires coor dination on what would otherwise have been local policy decisions. <p> Memory management techniques for variablesized objects have been studied extensively . There ar e well-known techniques to minimize external fragmentation <ref> [Knut68, Pete77] </ref>. Some file systems also use similar techniques to reserve disk space [McKu84]. Page r eservation significantly impr oves the performance of partialsubblock TLBs and r educes page pr o-motion cost if using superpages. However , we did not study the effect of page reservation on cache behavior. 5.
Reference: [Rama93] <author> Raghu Ramakrishnan, Divesh Srivastava, S. Sudarshan, Praveen Seshadri. </author> <title> Implementation of the CORAL Deductive Database System. </title> <booktitle> In Proceedings of ACM SIGMOD International Conference on Management of Data, </booktitle> <year> 1993. </year>
Reference-contexts: Nasa7, compress, wave5, spice, and gcc are from the SPEC92 suite [SPEC91]; fftpde is a NAS benchmark [Bail91] and operates on a 64X64X64 matrix; mp3d and pthor are uniprocessor versions fr om the SPLASH benchmark suite [Sing92]; coral <ref> [Rama93] </ref> is a deductive database executing a nested loop join; ML [Appe91] is executing a pr ogram that does a str ess test on the garbage collector.
Reference: [Rein93] <author> Steven K. Reinhardt, Mark D. Hill, James R. Larus, Alvin R. Lebeck, James C. Lewis, David A. Wood. </author> <title> The Wisconsin Wind Tunnel: Virtual Prototyping of Parallel Computers. </title> <booktitle> In Proc. ACM SIGMETRICS Conference on Measurement and Modeling of Computer Systems, </booktitle> <pages> pages 4860, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Foxtrot implements trap-based simulation for SPARC V8 pr ocessors [SP AR91]. The cost of a tar get TLB missincluding trap cost, TLB simulator complexity and wrappers, much of which is written in Cis 1500 to 4000 cycles, comparable to the overhead seen by others <ref> [Uhli94, Rein93] </ref>. Our implementation, however , does not account for kernel r eferences. 5.3. Metrics While the ultimate measur e of TLB performance is the fraction of execution time spent in servicing TLB misses, the TLB miss ratio is often used instead.
Reference: [Sing92] <author> Jaswinder Pal Singh, Wolf-Dietrich Weber, Anoop Gupta. </author> <title> SPLASH: Stanford Parallel Applications for Shared Memory. Computer Architecture News, </title> <address> 20(1):544, </address> <month> March </month> <year> 1992. </year>
Reference-contexts: The SPEC benchmark gcc [SPEC91] r e-quires page table changes and superpage support in the file system for mapped files. A unipr ocessor version of the SPLASH benchmark mp3d <ref> [Sing92] </ref> requires super-page support for mapped files and heaps. <p> Nasa7, compress, wave5, spice, and gcc are from the SPEC92 suite [SPEC91]; fftpde is a NAS benchmark [Bail91] and operates on a 64X64X64 matrix; mp3d and pthor are uniprocessor versions fr om the SPLASH benchmark suite <ref> [Sing92] </ref>; coral [Rama93] is a deductive database executing a nested loop join; ML [Appe91] is executing a pr ogram that does a str ess test on the garbage collector.
Reference: [Site93] <author> Richard L. </author> <title> Sites. Alpha AXP Architecture. </title> <journal> Communications of the ACM, </journal> <volume> 36(2):3344, </volume> <month> February </month> <year> 1993. </year>
Reference-contexts: Our simulator runs three to four or ders of magnitude faster than a tracedriven simulation. Thir d, trap-based simulation naturally extends to multi-program workloads. The key disadvantage of trap-based simulation is the inability to calculate the number of TLB hits without hardware support such as pr ofiling counters <ref> [Site93] </ref> or external pr obes [Nagl92]. This makes it dif ficult to use normalized metrics (e.g., TLB miss ratio). Foxtrot implements trap-based simulation for SPARC V8 pr ocessors [SP AR91].
Reference: [Smit82] <author> Alan Jay Smith. </author> <title> Cache Memories. </title> <journal> Computing Surveys, </journal> <volume> 14(3):473530, </volume> <month> September </month> <year> 1982. </year>
Reference-contexts: The experiments were performed on equipment donated by Sun Microsystems. translation lookaside buffer 1 (TLB). A TLB is a cache whose tags ar e virtual page numbers (VPN) and data are physical page numbers (PPN), page attributes ( e.g., protection, cacheability), and optional r eference and modified bits <ref> [Mile90, Henn90, Smit82] </ref>. TLBs must be studied again, because of curr ent workload and pr oces-sor trends. Future workloads will demand gr eater TLB r each the maximum size of memory mapped by a TLBthan today.
Reference: [SPAR91] <author> SPARC International Inc. </author> <title> The SPARC Architecture Manual, </title> <type> Version 8, </type> <year> 1991. </year>
Reference: [SPEC91] <institution> SPEC. </institution> <note> (entire issue). SPEC Newsletter, 3(4), </note> <month> December </month> <year> 1991. </year>
Reference-contexts: T able 1 motivates the r est of this paper by giving an example which shows that superpage TLBs significantly reduce the number of user TLB misses only after substantial operating system modifications. The SPEC benchmark gcc <ref> [SPEC91] </ref> r e-quires page table changes and superpage support in the file system for mapped files. A unipr ocessor version of the SPLASH benchmark mp3d [Sing92] requires super-page support for mapped files and heaps. <p> W e concentrate on benchmarks where TLB miss handling is a significant part of the execution time, because we expect it to be tr ue for futur e workloads. Nasa7, compress, wave5, spice, and gcc are from the SPEC92 suite <ref> [SPEC91] </ref>; fftpde is a NAS benchmark [Bail91] and operates on a 64X64X64 matrix; mp3d and pthor are uniprocessor versions fr om the SPLASH benchmark suite [Sing92]; coral [Rama93] is a deductive database executing a nested loop join; ML [Appe91] is executing a pr ogram that does a str ess test on
Reference: [Tall92] <author> Madhusudhan Talluri, Shing Kong, Mark D. Hill, David A. Patterson. </author> <title> Tradeoffs in Supporting Two Page Sizes. </title> <booktitle> In Proc. of the 19th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 415424, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: While many commercial architectures support medium-sized superpages in their TLBs, ther e are few published studies on their impact on TLBs or operating systems. Kagimasa et al. [Kagi91] describe a system using two page sizes in a partitioned addr ess space. Chen et al. [Chen92] and Talluri et al. <ref> [Tall92] </ref> present data that supports the use of superpages. Khalidi et al. [Khal93] and Mogul [Mogu93] raise some operating system issues researchers should address to support superpages. 2.
Reference: [Tall94] <author> Madhusudhan Talluri and Mark D. Hill. </author> <title> Surpassing the TLB Performance of Superpages with Less Operating System Support. </title> <type> Computer Sciences Technical Report #1275, </type> <institution> University of Wisconsin, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: Results of sensitivity analysisnot included hereshow that varying the su-perpage size fr om 16KB to 64KB, the subblock factor from 2 to 16, and TLB size fr om 32 to 256 entries do not qualitatively alter the conclusions <ref> [Tall94] </ref>. 6.2. Comparing TLB chip areas The results above assume TLBs with the same number of entries, but r equire different chip ar ea per entry. Here we size TLBs to get comparable number of TLB misses to see which TLB minimizes chip ar ea [Joup94, Nagl94]. <p> Results of sensitivity analysis show that completesubblock TLBs with a small subblock factor ( e.g., two) ar e mor e attractive than a single page size TLB with mor e entries <ref> [Tall94] </ref>.
Reference: [Tayl90] <author> George Taylor, P. Davies, M. Farmwald. </author> <title> The TLB SliceA Low-Cost High-Speed Address Translation Mechanism. </title> <booktitle> In Proc. of the 17th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 355363, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Thus, there should be no significant change in the page fault rate from the non-superpage implementation. 4. Page coloring <ref> [Tayl90, Kess92] </ref> also carefully selects physical pages for virtual addresses but for a different purpose and in a different way than page reservation.
Reference: [Uhli94] <author> Richard Uhlig, David Nagle, Trevor Mudge, Stuart Sechrest. </author> <title> Trap-driven Simulation with Tapeworm II. </title> <booktitle> In Proc. Sixth International Conference on Architectural Support for Programming Language and Operating Systems, (in these proceedings), </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: The simulator maintains a data structure corresponding to the TLB under study, the target TLB, and marks valid only those page table entries that r eect the contents of the tar get TLB. This technique invokes the simulator only on tar get TLB misses and never on hits <ref> [Uhli94] </ref>. The kernel is modified to account for operating system effects (e.g., TLB invalidations) and superpage support. Trap-based simulation has significant advantages over tracedriven simulation. First, TLB simulation r e-quires information that is hard to encapsulate in a trace, such as pagesize assignment, physical page numbers, and attributes. <p> Foxtrot implements trap-based simulation for SPARC V8 pr ocessors [SP AR91]. The cost of a tar get TLB missincluding trap cost, TLB simulator complexity and wrappers, much of which is written in Cis 1500 to 4000 cycles, comparable to the overhead seen by others <ref> [Uhli94, Rein93] </ref>. Our implementation, however , does not account for kernel r eferences. 5.3. Metrics While the ultimate measur e of TLB performance is the fraction of execution time spent in servicing TLB misses, the TLB miss ratio is often used instead.
References-found: 34

