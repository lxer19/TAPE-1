URL: ftp://softlib.rice.edu/pub/CRPC-TRs/reports/CRPC-TR89015.ps.gz
Refering-URL: http://www.crpc.rice.edu/CRPC/softlib/TRs_online.html
Root-URL: 
Abstract-found: 0
Intro-found: 1
Reference: [AK84] <author> John R. Allen and Ken Kennedy. </author> <title> Automatic Loop Interchange. </title> <booktitle> In Proceedings of the SIGPLAN '84 Symposium on Compiler Construction, SIGPLAN Notices Vol. </booktitle> <volume> 19, No. 6, </volume> <pages> pages 233-246, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: and Loop Distribution * Set2: Set1 + Loop Shifting * Set3: Set1 + If-Conversion and Scalar Expansion * Set4: Set3 + Loop Shifting and Loop Switching * Set5: Set4 + Array Renaming and Single Statement Reductions Loop Shifting and Loop Switching are special forms of loop interchange as described in <ref> [AK84] </ref>. If there are no dependences at a level k, then the k loop can be placed as the innermost loop. This process is called loop shifting. Loop switching is loop interchange applied to only the innermost pair of loops in a -block ([AK87]).
Reference: [AK87] <author> John R. Allen and Ken Kennedy. </author> <title> Automatic Translation of Fortran Programs to Vector Form. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 9(4) </volume> <pages> 491-542, </pages> <month> October </month> <year> 1987. </year>
Reference: [All83] <author> John R. Allen. </author> <title> Dependence Analysis for Subscripted Variables and its Application to Program Transformations. </title> <type> Technical report, </type> <institution> Dept. of Mathematical Science, Rice University, </institution> <month> April </month> <year> 1983. </year> <type> Ph.D. Dissertation. </type>
Reference: [ANS86] <institution> American National Standards Institute X3J3:Fortran 8X Version 96. </institution> <month> January </month> <year> 1986. </year>
Reference-contexts: Other versions to understand multiprocessor memory management and the parallelization potential of numerical programs are in preparation. In this paper we will concentrate on PFC-VECTSIM, the vector option version of PFC-SIM. 2.1 Structural Overview <ref> [ANS86] </ref> but sequential loop nests instead, with innermost loops marked as vector loops.
Reference: [KKP + 81] <author> D. J. Kuck, R. H. Kuhn, D. A. Padua, B. Leasure, and M. Wolfe. </author> <title> Dependence Graphs and Compiler Optimizations. </title> <booktitle> In Conference Record of the Eigth ACM Symposium on the Principles of Programming Languages, </booktitle> <pages> pages 207-218, </pages> <month> January </month> <year> 1981. </year>
Reference: [Knu71] <author> Donald E. Knuth. </author> <title> An Empirical Study of Fortran Programs. </title> <journal> In Software Practice and Experience, </journal> <volume> volume 1, </volume> <pages> pages 105-133, </pages> <year> 1971. </year>
Reference: [PIJJ88] <author> D.J. Pease, R. Inamdar, A. Joshi, and S. Jejurikar. </author> <title> Predicting the Performance of a Scalar Program Converted to Execute on a Vector Processor. </title> <booktitle> In Proceedings of the 3rd ACM SIGSoft/SIGPlan Conference on Parallel Processing, </booktitle> <pages> pages 355-361, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Tools like PFC-SIM can also help optimize a specific program or estimate the runtime improvement resulting from executing the program on a vector machine instead of a sequential machine as in <ref> [PIJJ88] </ref>. Embedding PFC-SIM in an interactive environment would allow the user to identify performance bottle necks by mapping the generated information back to the source program. For the memory option of PFC-SIM such an interactive visualization tool already exists ([Por89]).
Reference: [Por89] <author> Allan Porterfield. </author> <title> Software Methods for Improvement of Cache Performance on Supercomputer Applications. </title> <type> Technical Report TR88-93, </type> <institution> Rice University, </institution> <month> May </month> <year> 1989. </year> <type> Ph.D. Dissertation. </type>
Reference-contexts: Many input data sets share the first part but differ in the second. 1 Some studies have already been performed including studies on uniprocessor memory management <ref> [Por89] </ref>, array subscript characteristics relevant for data dependence analysis, and vectorization potential and vector characteristics. In this paper we present the results on the latter study, analyzing eight Fortran programs, some of which have been included in the program suite RiCEPS. <p> Two versions of PFC-SIM have been implemented so far, a version to gather information about the memory performance of the input program on a uniprocessor in terms of cache hits, misses and memory traffic (memory option <ref> [Por89] </ref>), and a version to determine the vectorizability and vector characteristics of the input program, using program restructuring transformations (vector option). Other versions to understand multiprocessor memory management and the parallelization potential of numerical programs are in preparation.
Reference: [Sto87] <author> Harold S. Stone. </author> <title> High-Performance Computer Architecture. </title> <publisher> Addison-Wesley, </publisher> <month> October </month> <year> 1987. </year>
Reference: [Wol87] <author> Michael Wolfe. </author> <title> Vector Optimization vs. Vectorization. </title> <booktitle> In Proceedings of the 1987 International Conference on Supercomputing (Athens), </booktitle> <month> June </month> <year> 1987. </year> <month> 14 </month>
References-found: 10

