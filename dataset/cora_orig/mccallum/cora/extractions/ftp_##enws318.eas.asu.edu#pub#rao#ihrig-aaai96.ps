URL: ftp://enws318.eas.asu.edu/pub/rao/ihrig-aaai96.ps
Refering-URL: http://enuxsa.eas.asu.edu:80/~ihrig/
Root-URL: 
Email: laurie.ihrig@asu.edu rao@asu.edu  
Title: Design and Implementation of a Replay Framework based on a Partial Order Planner Content Area:
Author: Laurie H. Ihrig Subbarao Kambhampati 
Address: Tempe, AZ 85287  
Affiliation: Department of Computer Science and Engineering Arizona State University,  
Pubnum: Paper Tracking No: A642  
Abstract: In this paper we describe the design and implementation of the derivation replay framework, dersnlp+ebl (Derivational SNLP + EBL), which is based on a partial order planner. We provide empirical results demonstrating its effectiveness in improving planning performance on randomly-generated problems drawn from a complex domain. DerSNLP replays previous plan derivations by first repeating its earlier decisions in the context of the new problem situation, then extending the derivation to obtain a complete solution for the new problem. When case extension does not succeed in finding a new solution, explanation-based learning (EBL) techniques are employed to identify the features of the new problem which inhibit the extension of the case. These features are then added as censors on the retrieval of the stored case. To keep retrieval costs low, DerSNLP normally stores plan derivations for individual goals, and replays one or more of these derivations in solving multi-goal problems. Cases covering multiple goals are stored only when subplans for individual goals cannot be successfully merged. The aim in constructing the case library is to predict these goal interactions and to store a multi-goal case for each set of mutually interacting goals. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Barrett and D. Weld. </author> <title> Partial order planning: evaluating possible efficiency gains. </title> <journal> Artificial Intelligence, </journal> <volume> 67:71--112, </volume> <year> 1994. </year>
Reference-contexts: Since a plan failure is explained by a subset of plan constraints, failure explanations are represented in the same manner as a partial plan. dersnlp represents its partial plans as a 6-tuple, hS; O; B; L; E; Ci, where <ref> [1] </ref>: S is the set of actions (step-names) in the plan, each of which is mapped onto an operator in the domain theory. S contains two dummy steps: t I whose effects are the initial state conditions, and t G whose preconditions are the input goals, G. <p> The first was the artificial domain, ( 2 D m S 1 ), originally described in <ref> [1] </ref> and shown in Figure 8. Testing was done on problems which were randomly generated from this domain with the restriction that they always contain the goal G ff .
Reference: [2] <author> J. Carbonell. </author> <title> Derivational analogy: A theory of reconstructive problem solving and expertise acquisition. </title> <editor> In Ryszard Michalski, Jaime Carbonell, and Tom M. Mitchell, editors, </editor> <booktitle> Machine Learning: an Artificial Intelligence approach: </booktitle> <volume> Volume 2. Morgan-Kaufman, </volume> <year> 1986. </year>
Reference-contexts: One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems <ref> [2, 17] </ref>. Recently this approach, called derivational replay, was adapted to improve the performance of the partial-order planner, snlp [6]. Although it was found that replay tends to improve overall performance, its effectiveness depends on retrieving an appropriate case. <p> Finally, in Section 6 we discuss the relationship to previous work in case storage and retrieval. 2 Derivation Replay in Partial-Order Planning Derivational analogy is a case-based planning technique which includes all of the following elements <ref> [2, 17, 18] </ref>: a facility within the underlying planner to generate a trace of the derivation of a plan, the indexing and storage of the derivation trace in a library of previous cases, the retrieval of a case in preparation for solving a new problem, and finally, a replay mechanism by
Reference: [3] <author> A. Francis and S. Ram. </author> <title> A comparative utility analysis of case-based reasoning and control-rule learning systems. </title> <booktitle> In Proceedings of the Workshop on Case-Based Reasoning. AAAI, 1994. </booktitle> <address> Seattle, Washington. </address>
Reference-contexts: As learned information is used as a censor on retrieval rather than as a pruning rule, soundness and completeness of the EBL framework may not be as critical. Furthermore, keeping censors on specific cases avoids the utility problem commonly suffered by EBL systems. See <ref> [14, 8, 3] </ref> for discussions on the issue of the relative tradeoffs offered by case-based and EBL methods in learning to improve planning performance . 7 Conclusion In this paper, we described a framework for a case-based planning system that is able to exploit case failure to improve case retrieval.
Reference: [4] <author> K. Hammond. Chef: </author> <title> A model of case-based planning. </title> <booktitle> In Proceedings AAAI-86, pages 261--271. AAAI, 1986. </booktitle> <address> Philadelphia, Pennsylvania. </address>
Reference-contexts: Replay failures are explained and used to avoid the retrieval of a case in situations where replay will mislead the planner. Failures are also used to construct repairing cases which are stored as alternatives to be retrieved when a similar failure is predicted. CHEF <ref> [4] </ref> learns to avoid execution-time failures by simulating and analyzing plans derived by reusing old cases. In contrast, our approach attempts to improve planning efficiency by concentrating on search failures encountered in plan generation. We integrate replay with techniques adopted from the planning framework provided by snlp+ebl [11].
Reference: [5] <author> K. Hammond. </author> <title> Explaining and repairing plans that fail. </title> <journal> Artificial Intelligence, </journal> <volume> 45:173--228, </volume> <year> 1990. </year>
Reference-contexts: 1 Introduction Case-based planning provides significant performance improvements over generative planning when the planner is solving a series of similar problems, and when it has an adequate theory of problem similarity <ref> [5, 6, 12, 17] </ref>. One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems [2, 17]. Recently this approach, called derivational replay, was adapted to improve the performance of the partial-order planner, snlp [6].
Reference: [6] <author> L. Ihrig and S. Kambhampati. </author> <title> Derivation replay for partial-order planning. </title> <booktitle> In Proceedings AAAI-94, </booktitle> <year> 1994. </year>
Reference-contexts: 1 Introduction Case-based planning provides significant performance improvements over generative planning when the planner is solving a series of similar problems, and when it has an adequate theory of problem similarity <ref> [5, 6, 12, 17] </ref>. One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems [2, 17]. Recently this approach, called derivational replay, was adapted to improve the performance of the partial-order planner, snlp [6]. <p> One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems [2, 17]. Recently this approach, called derivational replay, was adapted to improve the performance of the partial-order planner, snlp <ref> [6] </ref>. Although it was found that replay tends to improve overall performance, its effectiveness depends on retrieving an appropriate case. Often the planner is not aware of the implicit features of the new problem situation which determine if a certain case is applicable. <p> Earlier work in case-based planning has retrieved previous cases on the basis of a static similarity metric which considers the previous problem goals as well as the features of the initial state which are relevant to the achievement of those goals <ref> [10, 6, 17] </ref>. If these are again elements of the problem description then the case is retrieved and reused in solving the new problem. Usually the new problem will contain extra goal conditions not covered by the case.
Reference: [7] <author> L Ihrig and S. Kambhampati. </author> <title> On the relative utility of plan-space vs state-space planning in a case-based framework. </title> <type> Technical Report 94-006, </type> <institution> Department of Computer Science and Engineering, 1994. Arizona State University. </institution>
Reference: [8] <author> S. Kambhampati. </author> <title> Utility tradeoffs in incremental modification and reuse of plans. </title> <booktitle> In Proc. AAAI Spring Symp. on Computational Considerations in Supporting Incremental Modification and Reuse, </booktitle> <year> 1992. </year>
Reference-contexts: As learned information is used as a censor on retrieval rather than as a pruning rule, soundness and completeness of the EBL framework may not be as critical. Furthermore, keeping censors on specific cases avoids the utility problem commonly suffered by EBL systems. See <ref> [14, 8, 3] </ref> for discussions on the issue of the relative tradeoffs offered by case-based and EBL methods in learning to improve planning performance . 7 Conclusion In this paper, we described a framework for a case-based planning system that is able to exploit case failure to improve case retrieval.
Reference: [9] <author> S. Kambhampati. </author> <title> Exploiting causal structure to control retrieval and refitting during plan reuse. </title> <journal> Computational Intelligence Journal, </journal> <volume> 10(2), </volume> <year> 1994. </year>
Reference-contexts: Retrieval Strategy: Cases were initially retrieved on the basis of a static similarity metric which takes into account the goals that are covered by the case as well as all of their relevant initial state conditions. The metric was similar to the validation structure-based similarity metric of <ref> [9] </ref> and the foot-printed similarity metric of [17]. Prior studies show it to be a reasonably effective metric. In learning mode, cases were also retrieved on the same basis. However, in this mode, the failure reasons attached to the case were used to censor its retrieval.
Reference: [10] <author> S. Kambhampati and J. A. Hendler. </author> <title> A validation structure based theory of plan modification and reuse. </title> <journal> Artificial Intelligence, </journal> <volume> 55:193--258, </volume> <year> 1992. </year>
Reference-contexts: Earlier work in case-based planning has retrieved previous cases on the basis of a static similarity metric which considers the previous problem goals as well as the features of the initial state which are relevant to the achievement of those goals <ref> [10, 6, 17] </ref>. If these are again elements of the problem description then the case is retrieved and reused in solving the new problem. Usually the new problem will contain extra goal conditions not covered by the case. <p> 14 Phase Logistics Two Goal % Seq 87% % Rep 98% Three Goal % Seq 70% % Rep 96% Four Goal % Seq 86% % Rep 98% Table 4: Measures of Effectiveness of Replay 6 Related Work and Discussion The current work complements and extends earlier treatments of case retrieval <ref> [10, 17, 18] </ref>. Replay failures are explained and used to avoid the retrieval of a case in situations where replay will mislead the planner. Failures are also used to construct repairing cases which are stored as alternatives to be retrieved when a similar failure is predicted.
Reference: [11] <author> S. Katukam and S. Kambhampati. </author> <title> Learning ebl-based search control rules for partial order planning. </title> <booktitle> In Proceedings AAAI-94, </booktitle> <year> 1994. </year> <month> 16 </month>
Reference-contexts: These include a method for forming explanations of search path failures and regressing these explanations through the planning decisions in the failing paths <ref> [11] </ref>. These techniques are employed to construct reasons for case failure, which are then used to annotate the case to constrain its future retrieval. Furthermore, each failure results in the storage of a new case which repairs the failure. dersnlp+ebl normally stores plan derivations solving single input goals. <p> We discuss a definition of case failure, and show how dersnlp+ebl recovers from the case failures it encounters. Then, in Section 3 we briefly describe the explanation-based learning techniques that were developed in <ref> [11] </ref>, including the construction of failure explanations, and their regression and propagation up the search tree. We then show how reasons for case failure are constructed using these techniques, and how these failure reasons are used to build the case library. <p> We are now in a position to describe how the planner learns the reasons underlying a case failure. Specifically, we use EBL techniques to accomplish this learning. In the next section, we show how the techniques developed in <ref> [11] </ref> are employed to construct these reasons. 3 Learning from Case Failure dersnlp+ebl constructs explanations for case failure through the use of explanation-based learning (EBL) techniques. These techniques allow dersnlp+ebl to explain the failures of individual paths in the planner's search space. <p> A search path experiences an analytical failure when it arrives at a plan which, because it contains a set of inconsistent constraints, cannot be further refined into a solution. EBL techniques are used in forming explanations of plan failures in terms of these constraints <ref> [11] </ref>. dersnlp+ebl forms explanations for each of the analytical failures that occur under the skeletal plan. 1 Path failure explanations identify a minimal set of conflicting constraints in the plan which are together inconsistent. These are regressed up the search paths and are collected at the root of the tree. <p> CHEF [4] learns to avoid execution-time failures by simulating and analyzing plans derived by reusing old cases. In contrast, our approach attempts to improve planning efficiency by concentrating on search failures encountered in plan generation. We integrate replay with techniques adopted from the planning framework provided by snlp+ebl <ref> [11] </ref>. This framework includes methods for constructing conditions for predicting analytical failures in its search space. Although EBL techniques have been previously used to learn from problem-solving failures [15], the goal of EBL has been to construct generalized control rules that can be applied to each new planning decision.
Reference: [12] <author> J. Koehler. </author> <title> Avoiding pitfalls in case-based planning. </title> <booktitle> In Proceedings of the 2nd Intl. Conf. on AI Planning Systems, </booktitle> <pages> pages 104--109, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction Case-based planning provides significant performance improvements over generative planning when the planner is solving a series of similar problems, and when it has an adequate theory of problem similarity <ref> [5, 6, 12, 17] </ref>. One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems [2, 17]. Recently this approach, called derivational replay, was adapted to improve the performance of the partial-order planner, snlp [6].
Reference: [13] <author> R. Korf. </author> <title> Planning as search: a qualitative approach. </title> <journal> Artificial Intelligence, </journal> <volume> 33:65--68, </volume> <year> 1987. </year>
Reference-contexts: The aim is to store a minimum number of cases such that all of the problems encountered in the future may be achieved through sequential replay of multiple stored cases. <ref> [13] </ref>. Multi-goal cases are stored in the library so as to censor the retrieval of their corresponding single-goal counterparts. The discrimination net depicted in Figure 7 indexes one fragment of the case library. This fragment includes all of the cases which solve a single input goal.
Reference: [14] <author> S. Minton. </author> <title> Issues in the design of operator composition systems. </title> <booktitle> In Proceedings of the International conference on Machine Learning, </booktitle> <year> 1990. </year>
Reference-contexts: As learned information is used as a censor on retrieval rather than as a pruning rule, soundness and completeness of the EBL framework may not be as critical. Furthermore, keeping censors on specific cases avoids the utility problem commonly suffered by EBL systems. See <ref> [14, 8, 3] </ref> for discussions on the issue of the relative tradeoffs offered by case-based and EBL methods in learning to improve planning performance . 7 Conclusion In this paper, we described a framework for a case-based planning system that is able to exploit case failure to improve case retrieval.
Reference: [15] <author> J. Mostow and N. Bhatnagar. </author> <title> Failsafe: A floor planner that uses ebg to learn from its failures. </title> <booktitle> In Proceedings IJCAI-87, </booktitle> <pages> pages 249--255, </pages> <year> 1987. </year>
Reference-contexts: We integrate replay with techniques adopted from the planning framework provided by snlp+ebl [11]. This framework includes methods for constructing conditions for predicting analytical failures in its search space. Although EBL techniques have been previously used to learn from problem-solving failures <ref> [15] </ref>, the goal of EBL has been to construct generalized control rules that can be applied to each new planning decision. Here we use the same analysis to generate case-specific rules for case retrieval.
Reference: [16] <author> A. Perez and J. Carbonell. </author> <title> Control knowledge to improve plan quality. </title> <booktitle> In Proceedings of the 2nd Intl. Conf. on AI Planning Systems, </booktitle> <pages> pages 323--328, </pages> <year> 1994. </year>
Reference: [17] <author> M. Veloso. </author> <title> Learning by analogical reasoning in general problem solving. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1992. </year>
Reference-contexts: 1 Introduction Case-based planning provides significant performance improvements over generative planning when the planner is solving a series of similar problems, and when it has an adequate theory of problem similarity <ref> [5, 6, 12, 17] </ref>. One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems [2, 17]. Recently this approach, called derivational replay, was adapted to improve the performance of the partial-order planner, snlp [6]. <p> One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems <ref> [2, 17] </ref>. Recently this approach, called derivational replay, was adapted to improve the performance of the partial-order planner, snlp [6]. Although it was found that replay tends to improve overall performance, its effectiveness depends on retrieving an appropriate case. <p> Earlier work in case-based planning has retrieved previous cases on the basis of a static similarity metric which considers the previous problem goals as well as the features of the initial state which are relevant to the achievement of those goals <ref> [10, 6, 17] </ref>. If these are again elements of the problem description then the case is retrieved and reused in solving the new problem. Usually the new problem will contain extra goal conditions not covered by the case. <p> Finally, in Section 6 we discuss the relationship to previous work in case storage and retrieval. 2 Derivation Replay in Partial-Order Planning Derivational analogy is a case-based planning technique which includes all of the following elements <ref> [2, 17, 18] </ref>: a facility within the underlying planner to generate a trace of the derivation of a plan, the indexing and storage of the derivation trace in a library of previous cases, the retrieval of a case in preparation for solving a new problem, and finally, a replay mechanism by <p> The derivation path which leads from the root of the search tree to the final plan in the leaf node thus avoids (or repairs) the failure encountered in replaying the old case. Consider a simple example taken from the logistics transportation domain of <ref> [17] </ref> (See Figure 3a). The goal is to have package OB1 located at the destination location l d . The package is initially at location l 1 . There is a plane located at l p which can be used to transport the package. <p> It is therefore an advantage to store cases covering smaller subsets of goals, and to retrieve and replay multiple cases in solving a single large problem. In implementing this storage strategy, decisions have to be made as to which goal combinations 8 to store. Previous work <ref> [17] </ref> has reduced the size of the library by separating out independent subparts of a plan, and storing their derivations individually. Since dersnlp+ebl is based on a partial order planner, it can replay cases in sequence and later add step orderings to accomplish the merging of their subplans. <p> When derivations for positively-interacting goals are stored individually, replaying each case in sequence may result in redundant steps in the plan. We solved this problem and obtained shorter plans by increasing the justification for replaying a step addition decision <ref> [17] </ref>. When the first goal in a multi-goal problem is solved through replay of a single-goal case, none of the replayed step additions will result in redundancy. <p> The logistics transportation domain of <ref> [17] </ref> was adopted for the second set of experiments. Eight packages and one airplane were randomly distributed over four cities. Problem goals represented the task of getting one or more packages to a single destination airport. <p> The metric was similar to the validation structure-based similarity metric of [9] and the foot-printed similarity metric of <ref> [17] </ref>. Prior studies show it to be a reasonably effective metric. In learning mode, cases were also retrieved on the same basis. However, in this mode, the failure reasons attached to the case were used to censor its retrieval. <p> 14 Phase Logistics Two Goal % Seq 87% % Rep 98% Three Goal % Seq 70% % Rep 96% Four Goal % Seq 86% % Rep 98% Table 4: Measures of Effectiveness of Replay 6 Related Work and Discussion The current work complements and extends earlier treatments of case retrieval <ref> [10, 17, 18] </ref>. Replay failures are explained and used to avoid the retrieval of a case in situations where replay will mislead the planner. Failures are also used to construct repairing cases which are stored as alternatives to be retrieved when a similar failure is predicted.
Reference: [18] <author> M. Veloso and J. Carbonell. </author> <title> Derivational analogy in prodigy: Automating case acquisition, storage and utilization. </title> <booktitle> In Machine Learning, </booktitle> <pages> pages 249--278, </pages> <year> 1993. </year> <month> 17 </month>
Reference-contexts: Finally, in Section 6 we discuss the relationship to previous work in case storage and retrieval. 2 Derivation Replay in Partial-Order Planning Derivational analogy is a case-based planning technique which includes all of the following elements <ref> [2, 17, 18] </ref>: a facility within the underlying planner to generate a trace of the derivation of a plan, the indexing and storage of the derivation trace in a library of previous cases, the retrieval of a case in preparation for solving a new problem, and finally, a replay mechanism by <p> 14 Phase Logistics Two Goal % Seq 87% % Rep 98% Three Goal % Seq 70% % Rep 96% Four Goal % Seq 86% % Rep 98% Table 4: Measures of Effectiveness of Replay 6 Related Work and Discussion The current work complements and extends earlier treatments of case retrieval <ref> [10, 17, 18] </ref>. Replay failures are explained and used to avoid the retrieval of a case in situations where replay will mislead the planner. Failures are also used to construct repairing cases which are stored as alternatives to be retrieved when a similar failure is predicted.
References-found: 18

