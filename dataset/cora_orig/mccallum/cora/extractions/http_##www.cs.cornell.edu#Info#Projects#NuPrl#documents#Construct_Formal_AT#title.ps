URL: http://www.cs.cornell.edu/Info/Projects/NuPrl/documents/Construct_Formal_AT/title.ps
Refering-URL: http://www.cs.cornell.edu/Info/Projects/NuPrl/html/publication.html
Root-URL: 
Title: Formalizing Automata Theory I: Finite Automata many points critical to formalization of computational mathematics, especially
Author: Robert L. Constable Paul B. Jackson Pavel Naumov Juan Uribe 
Keyword: Key Words and Phrases: automata, constructivity, congruence, equivalence relation, formal languages, LCF, Martin-Lof semantics, Myhill-Nerode theorem, Nuprl, program extraction, propositions-as-types, quotient types, regular languages, state minimization, tactics, type theory.  
Note: The Myhill/Nerode theorem was chosen because it illustrates  Supported in part by NSF grants CCR-9423687, DUE-955162.  
Date: July 2, 1997  
Affiliation: Cornell University  
Abstract: This article and the World Wide Web display of computer checked proofs is an experiment in the formalization of computational mathematics. 1 Readers are asked to judge whether this formalization adds value in comparison to a careful informal account. The topic is state minimization in finite automata theory. We follow the account in Hopcroft and Ullman's book Formal Languages and Their Relation to Automata where state minimization is a corollary to the Myhill/Nerode theorem. That book constitutes one of the most compact and elegant published accounts. It sets high standards against which to compare any formalization. The theorem proving methodology used here is based on the concept of tactics pioneered by Robin Milner. The theorem prover we use is Nuprl ("new pearl") which, like its companion, HOL, is a descendent of the LCF system of Milner, Gordon and Wadsworth. It supports constructive reasoning and computation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Stuart F. Allen. </author> <title> A non-type-theoretic semantics for type-theoretic language. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <year> 1987. </year>
Reference-contexts: Various references are made to Nuprl libraries in the text. In the html version these were hot references (one could click on them to open the referenced files). 2 Type Theory Preliminaries Accounts of Nuprl's type theory can be found in several sources <ref> [8, 35, 20, 1, 6] </ref>. 2.1 Basic Types The integers Z= f0; 1; 2; : : :g are a primitive type of Nuprl with primitive operations of + ; ; ; ffi ; rem (for remainder): Equality, x = y in Z, and order, x &lt; y , are also primitive. <p> For a full discussion of universes, see Allen <ref> [1] </ref> as well as Jackson [20]. 5 A discussion of the constructive meaning of these types is beyond the scope of this work, but see [9, 20, 28]. 9 A finite type is one which can be put into a 1-1 correspondence with [1 : : : n]; its cardinality is
Reference: [2] <author> Y. Bertot, G. Kahn, and L. Thery. </author> <title> Proof by pointing. </title> <booktitle> In Theoretical Aspects of Computer Software, Lecture Notes in Computer Science, </booktitle> <volume> volume 789, </volume> <pages> pages 141-160, </pages> <year> 1994. </year>
Reference: [3] <author> E. Bishop. </author> <title> Foundations of Constructive Analysis. </title> <publisher> McGraw Hill, </publisher> <address> NY, </address> <year> 1967. </year>
Reference-contexts: It also allows the interpretation of recursive mathematics that all functions are given by "Turing machines" or Lisp programs. It also allows an Intuitionistic interpretation. One way to describe this style is to relate it to the work of Bishop <ref> [3] </ref> who showed that real, complex, and abstract analysis could be formalized in this neutral way. 1.4 Outline In section 1 we present the basic ideas from Nuprl needed for this article.
Reference: [4] <author> P. Borras, D. Clement, T. Despeyroux, J. Incerpi, G. Kahn, B. Lang, and V. Pascual. </author> <title> Centaur: the system. </title> <booktitle> In Software Engineering Notes, volume 13(5). Third Symposium on Software Development Environments, </booktitle> <year> 1988. </year>
Reference-contexts: We are also following the work of the Centaur group to make proofs more readable <ref> [4, 34] </ref>, and we expect to use the modularity feature of the Nuprl-Light refiner [16] to help structure theories as part of a major effort to improve the readability of proofs. Grant Support/Acknowledgments We acknowledge the support granted by the National Science Foundation and the Office of Naval Research.
Reference: [5] <author> N. Bourbaki. </author> <title> Elements of Mathematics, Theory of Sets. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1968. </year>
Reference-contexts: 1 Introduction 1.1 Background It is widely believed that we know how to formalize large tracts of classical mathematics | namely write in the style of Bourbaki <ref> [5] </ref> using some version of set theory and fill in all the details. The Journal of Formalized Mathematics publishes results formalized in set theory and checked by the Mizar system. In fact, the topic of state minimization of finite automata has been formalized in Mizar [21].
Reference: [6] <author> Robert L. Constable. </author> <title> Using reflection to explain and enhance type theory. </title> <editor> In Helmut Schwicht-enberg, editor, </editor> <booktitle> Proof and Computation, volume 139 of NATO Advanced Study Institute, International Summer School held in Marktoberdorf, </booktitle> <address> Germany, July 20-August 1, </address> <booktitle> NATO Series F, </booktitle> <pages> pages 65-100. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1994. </year>
Reference-contexts: Various references are made to Nuprl libraries in the text. In the html version these were hot references (one could click on them to open the referenced files). 2 Type Theory Preliminaries Accounts of Nuprl's type theory can be found in several sources <ref> [8, 35, 20, 1, 6] </ref>. 2.1 Basic Types The integers Z= f0; 1; 2; : : :g are a primitive type of Nuprl with primitive operations of + ; ; ; ffi ; rem (for remainder): Equality, x = y in Z, and order, x &lt; y , are also primitive.
Reference: [7] <author> Robert L. Constable. </author> <title> Experience using type theory as a foundation for computer science. </title> <booktitle> In Proceedings of the Tenth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 266-279. </pages> <note> LICS, </note> <month> June </month> <year> 1995. </year>
Reference-contexts: So our claim that formalism adds value is put to a good test. 2 Even worse, few people appreciate that this is a significant new problem (see <ref> [7] </ref>). 5 5. The Myhill/Nerode theorem illustrates a phenomenon that nonspecialists are curious about.
Reference: [8] <author> Robert L. Constable. </author> <title> The Structure of Nuprl's Type Theory in Logic and Computation. </title> <booktitle> NATO ASI Series. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Various references are made to Nuprl libraries in the text. In the html version these were hot references (one could click on them to open the referenced files). 2 Type Theory Preliminaries Accounts of Nuprl's type theory can be found in several sources <ref> [8, 35, 20, 1, 6] </ref>. 2.1 Basic Types The integers Z= f0; 1; 2; : : :g are a primitive type of Nuprl with primitive operations of + ; ; ; ffi ; rem (for remainder): Equality, x = y in Z, and order, x &lt; y , are also primitive.
Reference: [9] <author> Robert L. Constable, Stuart F. Allen, H.M. Bromley, W.R. Cleaveland, J.F. Cremer, R.W. Harper, Douglas J. Howe, T.B. Knoblock, N.P. Mendler, P. Panangaden, James T. Sasaki, and Scott F. Smith. </author> <title> Implementing Mathematics with the Nuprl Development System. </title> <publisher> Prentice-Hall, </publisher> <address> NJ, </address> <year> 1986. </year>
Reference-contexts: We will, of course, talk about the truth value of a proposition as well as its sense. The type of all propositions needed in this article is denoted P. Nuprl can express "higher order logic" as well, in which case "larger" propositions are needed. See Jackson [20] or <ref> [9] </ref> for fuller accounts of higher order logic. There are two distinguished atomic propositions, &gt; the canonically true one and ? the canonically false one. <p> For a full discussion of universes, see Allen [1] as well as Jackson [20]. 5 A discussion of the constructive meaning of these types is beyond the scope of this work, but see <ref> [9, 20, 28] </ref>. 9 A finite type is one which can be put into a 1-1 correspondence with [1 : : : n]; its cardinality is n. We write F in (T ) to mean that T is finite.
Reference: [10] <author> Thierry Coquand and G. Huet. </author> <title> The Calculus of Constructions. </title> <journal> Information and Computation, </journal> <volume> 76 </volume> <pages> 95-120, </pages> <year> 1988. </year>
Reference: [11] <author> Y. Coscoy, G. Kahn, and L. Thery. </author> <title> Extracting text from proofs. In Typed Lambda Calculus and its Applications, </title> <booktitle> volume 902 of Lecture Notes in Computer Science, </booktitle> <pages> pages 109-123, </pages> <year> 1995. </year>
Reference: [12] <author> N. G. deBruijn. </author> <title> Set theory with type restrictions. </title> <editor> In V.T. Sos A. Jahnal, R. Rado, editor, </editor> <booktitle> Infinite and Finite Sets, </booktitle> <pages> pages 205-314. </pages> <note> vol. I, </note> <institution> Coll. Math. Soc. J. Bolyai 10, </institution> <year> 1975. </year>
Reference-contexts: Despite this belief, and the many formalizations accomplished, massive formalization is not a fait accompli , and there are many research issues related to the formalization effort and its computerization. Indeed, some doubt the appropriateness of set theory for expressing working mathematics <ref> [12] </ref>. In contrast, there is no general agreement on how to formalize computational mathematics 2 . This article is a contribution to understanding that task and exploring one approach to it. Our approach stresses that formalized computational mathematics can be useful in carrying out computations.
Reference: [13] <author> Michael Gordon and T. Melham. </author> <title> Introduction to HOL: a theorem proving environment for higher-order logic. </title> <publisher> University Press, </publisher> <address> Cambridge, </address> <year> 1993. </year>
Reference: [14] <author> Michael Gordon, Robin Milner, and Christopher Wadsworth. </author> <title> Edinburgh LCF: a mechanized logic of computation, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 78. </volume> <publisher> Springer-Verlag, </publisher> <address> NY, </address> <year> 1979. </year>
Reference: [15] <author> Jason J. Hickey. </author> <title> Objects and theories as very dependent types. </title> <booktitle> In Proceedings of FOOL 3, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: Then the monoid signature is T : Ufi S 2 (T ): This is the approach taken by Jason Hickey <ref> [15] </ref>. 2.7 Reading Nuprl Proofs Proofs in Nuprl are trees. The nodes of the tree consist of sequents and justifications . A sequent is a list of formulas, called hypotheses, paired with a single formula called the goal .
Reference: [16] <author> Jason J. Hickey. Nuprl-light: </author> <title> An implementation framework for hgher-order logics. </title> <booktitle> In 14th International Conference on Automated Deduction, </booktitle> <year> 1997. </year> <month> 32 </month>
Reference-contexts: We are also following the work of the Centaur group to make proofs more readable [4, 34], and we expect to use the modularity feature of the Nuprl-Light refiner <ref> [16] </ref> to help structure theories as part of a major effort to improve the readability of proofs. Grant Support/Acknowledgments We acknowledge the support granted by the National Science Foundation and the Office of Naval Research.
Reference: [17] <author> John E. Hopcroft and Jeffrey D. Ullman. </author> <title> Formal Languages and Their Relation to Automata. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1969. </year>
Reference-contexts: One of the most basic theorems in finite automata theory, the Myhill/Nerode Theorem, illustrates beautifully the idea that algorithms can be extracted from constructive proofs; so it is a good test for our main subgoal. 3. The account of Myhill/Nerode in Hopcroft and Ullman's famous book <ref> [17] </ref> is constructive except for a few small points, one buried deep in the proof. The nonconstructive steps are easy to miss. We show how to make the proof entirely constructive with a trivial change in the theorem. 4. <p> B : A (g)2 Automata (Alph; x; y : (Alph list)==(xRly)) T lang auto compute 4 8Alph : U: 8L : Language (Alph): 8g : x; y : (Alph list)==(xRly) ! B : 8l : Alph List: A (g)(l) = l Let us review the proof exactly as written in <ref> [17] </ref>. 27 Proof. In the proof of Theorem 3.1 we saw that any finite automaton M = (K; Alph; ffi; q 0 ; F ) accepting L defines an equivalence relation which is a refinement of R.
Reference: [18] <author> Douglas J. Howe. </author> <title> Importing mathematics from HOL into Nuprl. </title> <editor> In J. von Wright, J. Grundy, and J. Harrison, editors, </editor> <title> Theorem Proving in Higher Order Logics, </title> <booktitle> volume 1125, of LNCS, </booktitle> <pages> pages 267-282. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1996. </year>
Reference-contexts: The collaboration methods we have learned would extend to larger teams. It would be especially interesting to collaborate with other theorem proving systems as Howe and his colleagues are doing with HOL and Nuprl <ref> [19, 18] </ref>. Much of a classical treatment of languages can easily be re-interpreted constructively. It would be especially fruitful to collaborate with other constructive provers such as Alf, Coq and Lego or with Isabelle which has formalized Martin-Lof type theory.
Reference: [19] <author> Douglas J. Howe. </author> <title> Semantic foundations for embedding HOL in Nuprl. </title> <editor> In Martin Wirsing and Maurice Nivat, editors, </editor> <booktitle> Algebraic Methodology and Software Technology, volume 1101 of LNCS, </booktitle> <pages> pages 85-101. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1996. </year>
Reference-contexts: The first thing we show is how to treat computation systematically and foundationally with minor changes in their text. Our presentation then enables a person to imagine that all of the mathematics is classical, as Howe's work illustrates <ref> [19] </ref>. It also allows the interpretation of recursive mathematics that all functions are given by "Turing machines" or Lisp programs. It also allows an Intuitionistic interpretation. <p> The collaboration methods we have learned would extend to larger teams. It would be especially interesting to collaborate with other theorem proving systems as Howe and his colleagues are doing with HOL and Nuprl <ref> [19, 18] </ref>. Much of a classical treatment of languages can easily be re-interpreted constructively. It would be especially fruitful to collaborate with other constructive provers such as Alf, Coq and Lego or with Isabelle which has formalized Martin-Lof type theory.
Reference: [20] <author> Paul B. Jackson. </author> <title> Enhancing the Nuprl Proof Development System and Applying it to Computational Abstract Algebra. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <address> Ithaca, NY, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: Various references are made to Nuprl libraries in the text. In the html version these were hot references (one could click on them to open the referenced files). 2 Type Theory Preliminaries Accounts of Nuprl's type theory can be found in several sources <ref> [8, 35, 20, 1, 6] </ref>. 2.1 Basic Types The integers Z= f0; 1; 2; : : :g are a primitive type of Nuprl with primitive operations of + ; ; ; ffi ; rem (for remainder): Equality, x = y in Z, and order, x &lt; y , are also primitive. <p> We will, of course, talk about the truth value of a proposition as well as its sense. The type of all propositions needed in this article is denoted P. Nuprl can express "higher order logic" as well, in which case "larger" propositions are needed. See Jackson <ref> [20] </ref> or [9] for fuller accounts of higher order logic. There are two distinguished atomic propositions, &gt; the canonically true one and ? the canonically false one. <p> For a full discussion of universes, see Allen [1] as well as Jackson <ref> [20] </ref>. 5 A discussion of the constructive meaning of these types is beyond the scope of this work, but see [9, 20, 28]. 9 A finite type is one which can be put into a 1-1 correspondence with [1 : : : n]; its cardinality is n. <p> For a full discussion of universes, see Allen [1] as well as Jackson [20]. 5 A discussion of the constructive meaning of these types is beyond the scope of this work, but see <ref> [9, 20, 28] </ref>. 9 A finite type is one which can be put into a 1-1 correspondence with [1 : : : n]; its cardinality is n. We write F in (T ) to mean that T is finite.
Reference: [21] <author> Miroslava Kaloper and Piotr Rudnicki. </author> <title> Minimization of finite state machines. </title> <booktitle> Mizar User's Association, </booktitle> <year> 1996. </year>
Reference-contexts: The Journal of Formalized Mathematics publishes results formalized in set theory and checked by the Mizar system. In fact, the topic of state minimization of finite automata has been formalized in Mizar <ref> [21] </ref>. Despite this belief, and the many formalizations accomplished, massive formalization is not a fait accompli , and there are many research issues related to the formalization effort and its computerization. Indeed, some doubt the appropriateness of set theory for expressing working mathematics [12].
Reference: [22] <author> Dexter Kozen. </author> <title> Automata and Computability. </title> <publisher> Springer, </publisher> <year> 1997. </year>
Reference-contexts: The subject of formalization is closely allied with other subjects in computer science (such as programming languages and semantics, applied logic, automated deduction, problem solving environments, computer algebra systems, knowledge representation, and computing theory). Also automata theory is widely taught in computer science <ref> [22] </ref> and used in building systems. So we hope for a large sympathetic audience for the material we create. 2. <p> If ffi (q 0 0 ; x) = ffi 0 (q 0 0 ; y) = q, then, by Theorem 3.1, x and y are in the same equivalence class of R. Thus ffi 0 (q 0 0 ; x) = ffi 0 (q 0 Qed Note, some authors <ref> [22] </ref> use the term Myhill/Nerode relation for L to refer to an extension invariant equivalence relation of finite index which refines L. Using this terminology, statement (2) becomes 2.
Reference: [23] <author> C. </author> <title> Kreitz. Constructive automata theory implemented with the Nuprl proof development system. </title> <type> Technical Report 86-779, </type> <institution> Cornell University, </institution> <address> Ithaca, New York, </address> <month> September </month> <year> 1986. </year>
Reference-contexts: Because it required building new basic material about the quotient type, we see why formalization efforts are so laborious. 6. The existence of an earlier formalization of the pumping lemma from automata theory by Christoph Krietz in 1988 <ref> [23] </ref> in Nuprl 3 allows us to compare the progress made in the tactic collection from version 3 (1988) to version 4.2 (1995). 7. Finally, the formalization reveals some technical problems about how to formalize computational mathematics.
Reference: [24] <author> L. Magnusson and B. Nordstrom. </author> <title> The ALF proof editor and its proof engine. In Springer-Verlag, editor, Types for Proofs and Programs, </title> <booktitle> volume 806 of Lecture Notes in Computer Science, </booktitle> <pages> pages 213-237, </pages> <year> 1994. </year>
Reference: [25] <author> Per Martin-Lof. </author> <title> Constructive mathematics and computer programming. </title> <booktitle> In Sixth International Congress for Logic, Methodology, and Philosophy of Science, </booktitle> <pages> pages 153-75. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1982. </year>
Reference: [26] <author> Per Martin-Lof. </author> <title> Intuitionistic Type Theory, Studies in Proof Theory, </title> <booktitle> Lecture Notes. Bibliopo-lis, Napoli, </booktitle> <year> 1984. </year>
Reference-contexts: The type theory we use is based on Martin-Lof's semantics <ref> [26] </ref>. In this paper we examine these ideas in the setting of basic automata theory. There are several reasons for this choice. 1.
Reference: [27] <author> Alexei Nogin. </author> <title> Improving the efficiency of Nuprl proofs. </title> <institution> Moscow State University, unpublished, </institution> <year> 1997. </year>
Reference-contexts: We have carried out this computation for some automata in Automata 6. With the proofs as we initially completed them, the complexity of the minimization algorithm was exponential in the number of states. However, recent work by Aleksy Nogin on the formalization, Improving the efficiency of Nuprl Proofs <ref> [27] </ref>, has reduced the complexity to a low-order polynomial; this is now displayed on the Web. 7 Future Work and Conclusion We believe that the Nuprl formalizations of the Hopcroft and Ullman account of the Myhhill/Nerode theorem demonstrates the added value of formalization.
Reference: [28] <author> B. Nordstrom, K. Petersson, and J. Smith. </author> <title> Programming in Martin-Lof 's Type Theory. </title> <publisher> Oxford Sciences Publication, Oxford, </publisher> <year> 1990. </year>
Reference-contexts: For a full discussion of universes, see Allen [1] as well as Jackson [20]. 5 A discussion of the constructive meaning of these types is beyond the scope of this work, but see <ref> [9, 20, 28] </ref>. 9 A finite type is one which can be put into a 1-1 correspondence with [1 : : : n]; its cardinality is n. We write F in (T ) to mean that T is finite.
Reference: [29] <author> L. Paulson and T. Nipkow. </author> <title> Isabelle: a generic theorem prover. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 825, </volume> <year> 1994. </year>
Reference: [30] <author> L. C. Paulson. </author> <title> Isabelle: A Generic Theorem Prover, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 78. </volume> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [31] <author> Robert Pollack. </author> <title> The Theory of LEGO:A Proof Checker for the Extended Calculus of Constructions. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, Dept. of Computer Science, JCMaxwell Bldg, Mayfield Rd, Edinburgh EH9 3JZ, </institution> <month> April </month> <year> 1995. </year>
Reference: [32] <author> M. O. Rabin and D. Scott. </author> <title> Finite automata and their decision problems. </title> <journal> In IBM Journal of Research and Development, </journal> <volume> volume 3(2), </volume> <pages> pages 115-125, </pages> <year> 1959. </year> <month> 33 </month>
Reference: [33] <author> D. Scott. </author> <title> Constructive validity. </title> <editor> In D. Lacombe M. Laudelt, editor, </editor> <booktitle> Symposium on Automatic Demonstration, volume 5(3) of Lecture Notes in Mathematics, </booktitle> <pages> pages 237-275. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1970. </year>
Reference: [34] <author> L. Thery, Y. Bertot, and G. Kahn. </author> <title> Real theorem provers deserve real user-interfaces. </title> <booktitle> In Software Engineering Notes, </booktitle> <volume> volume 17(5), </volume> <pages> pages 120-129. </pages> <booktitle> 5th Symposium on Software Development Environments, </booktitle> <year> 1992. </year>
Reference-contexts: We are also following the work of the Centaur group to make proofs more readable <ref> [4, 34] </ref>, and we expect to use the modularity feature of the Nuprl-Light refiner [16] to help structure theories as part of a major effort to improve the readability of proofs. Grant Support/Acknowledgments We acknowledge the support granted by the National Science Foundation and the Office of Naval Research.
Reference: [35] <author> S. Thompson. </author> <title> Type Theory and Functional Programming. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year> <month> 34 </month>
Reference-contexts: Various references are made to Nuprl libraries in the text. In the html version these were hot references (one could click on them to open the referenced files). 2 Type Theory Preliminaries Accounts of Nuprl's type theory can be found in several sources <ref> [8, 35, 20, 1, 6] </ref>. 2.1 Basic Types The integers Z= f0; 1; 2; : : :g are a primitive type of Nuprl with primitive operations of + ; ; ; ffi ; rem (for remainder): Equality, x = y in Z, and order, x &lt; y , are also primitive.
References-found: 35

