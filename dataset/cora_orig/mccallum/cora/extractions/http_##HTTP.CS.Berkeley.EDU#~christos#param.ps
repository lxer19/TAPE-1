URL: http://HTTP.CS.Berkeley.EDU/~christos/param.ps
Refering-URL: http://HTTP.CS.Berkeley.EDU/~christos/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: On the Complexity of Database Queries (Extended Abstract)  
Author: Christos H. Papadimitriou Mihalis Yannakakis 
Address: Berkeley, Berkeley, CA 94720  Murray Hill NJ 07974  
Affiliation: Division of Computer Science, U. C.  Bell Laboratories, Lucent Technologies,  
Abstract: We revisit the issue of the complexity of database queries, in the light of the recent parametric refinement of complexity theory. We show that, if the number of variables in the query (or the query size) is considered as a parameter, the familiar query languages (conjunctive, positive, first order, Datalog) are classified at appropriate levels of the so-called W hierarchy of Downey and Fellows. These results strongly suggest that the query size is inherently in the exponent of the data complexity of any query evaluation algorithm, with the implication becoming stronger as the expressibility of the query language increases. On the positive side, we show that this exponential dependence can be avoided for the extension of acyclic queries with 6= (but not &lt;) inequalities.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul, R. Hull, V. Vianu, </author> <title> Foundations of Databases, </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction The complexity of query languages has been |next to expressibility| one of the main preoccupations of database theory ever since the paper by Chandra and Merlin twenty years ago [4]; see <ref> [6, 1] </ref> for extensive overviews of the subject. <p> First order queries add set difference (negation in calculus). Datalog adds recursion to the positive queries. We refer to the textbooks <ref> [13, 1] </ref> for a detailed exposition. In the evaluation problem for a query Q, we are given database d and wish to compute Q (d). In the decision problem, we are given in addition to the database d a tuple t, and wish to decide if t 2 Q (d). <p> variables v conjunctive W <ref> [1] </ref>-complete W [1]-hard, in W [2] positive W [1]-complete W [SAT]-hard first-order W [t]-hard, all t W [P]-hard Datalog W [P]-hard W [P]-hard Note: In the case of fixed signature, all the entries are the same except that the (conjunctive, parameter v) problem is in W [1] (and thus, W [1]-complete). Sketch of proof. 1. Conjunctive queries. The lower bounds follow by a simple reduction from the clique problem, which is known to be W [1]-complete [5]. <p> In the case of the parameter v, we have Boolean variables for the mapping from the query variables to the database constants. We omit the details from this abstract. 2. Positive queries. For the upper bound of W <ref> [1] </ref> (parameter q), we transform the query into a union of (exponentially many in q) conjunctive queries; note that in this case we need the full power of parametric reductions, as opposed to transformations. <p> It can be shown that if we restrict all EDB and IDB relations to have fixed arity (independent of the parameter), then the problem is in W <ref> [1] </ref> (and thus W [1]-complete) for both parameters. 5 A Tractable Case Is there a nontrivial class of queries that is parametrically tractable? Even some simple queries that involve joins are NP-complete in combined complexity, and probably paramet 8 rically intractable as well, as we saw.
Reference: [2] <author> N. Alon, R. Yuster, U. Zwick, "Color-Coding", J. </author> <booktitle> ACM, </booktitle> <pages> pp. 844-856, </pages> <year> 1995. </year>
Reference-contexts: Examples: Given a graph and k pairs of nodes, are there node-disjoint paths between all pairs of nodes? [12] Given a graph and an integer k, is there a path of length k in the graph? <ref> [10, 2] </ref> Both problems, and many others like them, have algorithms with running time f (k) n c , where n is the input size and c a constant. <p> Theorem 1 The parametric versions of the query evaluation problems correponding to these four query languages are classified as described in the table. query parameter language query size q number of variables v conjunctive W [1]-complete W [1]-hard, in W <ref> [2] </ref> positive W [1]-complete W [SAT]-hard first-order W [t]-hard, all t W [P]-hard Datalog W [P]-hard W [P]-hard Note: In the case of fixed signature, all the entries are the same except that the (conjunctive, parameter v) problem is in W [1] (and thus, W [1]-complete). Sketch of proof. 1. <p> This problem was proved f.p. tractable by Monien [10], and an improved algorithm was given in <ref> [2] </ref> using an elegant "color-coding" (hashing) technique. Our algorithm combines this technique with acyclic query processing techniques. <p> One can construct such a family F with 2 O (k) log jDj hash functions that can be evaluated in constant time (see <ref> [2] </ref> and the references therein). Then Q (d) = [ h2F Q h (d).
Reference: [3] <author> J. F. Buss, J. Goldsmith, </author> <title> "Nondeterminism within P", </title> <journal> SIAM J. Comput., </journal> <pages> pp. 560-572, </pages> <year> 1993. </year>
Reference-contexts: Query evaluation problems lie ominously within the scope of this category, with query length being the obvious analog of k in the parametric clique problem above. Researchers in complexity have recently developed a theory of limited nondeterminism and fixed-parameter tractability <ref> [3, 11, 5] </ref> which seeks to make important distinctions, along the lines suggested above, between problems below NP.
Reference: [4] <author> A. K. Chandra, P. M. Merlin, </author> <title> "Optimal Implementation of Conjunctive Queries in Relational Databases", </title> <booktitle> Proc. 9th ACM Symp. Theory of Comp., </booktitle> <pages> pp. 77-90, </pages> <year> 1977. </year>
Reference-contexts: 1 Introduction The complexity of query languages has been |next to expressibility| one of the main preoccupations of database theory ever since the paper by Chandra and Merlin twenty years ago <ref> [4] </ref>; see [6, 1] for extensive overviews of the subject.
Reference: [5] <author> R. G. Downey, M. R. Fellows, </author> <title> "Fixed-parameter Tractability and Completeness I: Basic Results", </title> <journal> SIAM J. Comp., </journal> <pages> pp. 873-921, </pages> <year> 1995. </year>
Reference-contexts: Query evaluation problems lie ominously within the scope of this category, with query length being the obvious analog of k in the parametric clique problem above. Researchers in complexity have recently developed a theory of limited nondeterminism and fixed-parameter tractability <ref> [3, 11, 5] </ref> which seeks to make important distinctions, along the lines suggested above, between problems below NP. <p> It is of great interest to distinguish between these two categories, and to develop rigorous tools that classify problems with respect to them. Downey and Fellows have introduced a sequence of complexity classes of parametric problems, collectively called the W hierarchy, which capture reasonably well this important issue <ref> [5] </ref>. The classes of the W hierarchy are indexed by the numbers 1; 2; : : :, plus two limiting classes W [SAT] and W [P]. <p> Trying to extend this further to &lt; constraints leads however to parametric hardness. 2 Parametric Complexity Theory We introduce next the main concepts from the complexity theory of parametric problems. Our definitions generally follow <ref> [5] </ref>. A parametric problem is a set L of pairs (x; k), where x is a string and k an integer parameter. <p> It would be very interesting to develop a refinement of NP-completeness theory that anticipates this sophisticated form of apparent intrectability. Such a theory has been emerging from the work of many people, but most recently and notably Downey and Fellows <ref> [5] </ref>. There appears to be a hierarchy of parametric problems, called the W hierarchy, which classifies many of these problems. <p> We define W [t] to be the set of all parametric problems that reduce to depth-t weighted satisfiability. The limiting classes W [SAT] and W [P], are the sets of all parametric problems that reduce respectively to weighted formula and weighted circuit satisfiability, with unlimited depth. In <ref> [5] </ref> it is pointed out that these classes have many natural complete problems, under parametric reductions. For example, clique is W [1]-complete and dominating set is W [2]-complete, while bandwidth is W [t]-hard for all t &gt; 0. <p> The higher the t for which W [t]-hardness is proved (or, at the limit, W [P]-hardness) the stronger the implication of intractability. It should be noted that the W hierarchy, as defined in <ref> [5] </ref>, does not appear to have the classification power of, say, NP-completeness theory and of the polynomial hierarchy, in that many natural problems are only partially classified, proved hard for one class and in another, higher one (or, as in the case of bandwidth, W [t]-hard for all t &gt; 0 <p> Sketch of proof. 1. Conjunctive queries. The lower bounds follow by a simple reduction from the clique problem, which is known to be W [1]-complete <ref> [5] </ref>. For any instance (G; k) of clique we construct a database consisting of one binary relation G (:; :) (the graph). The query for parameter k is simply P : 1i&lt;jk The goal proposition (0-ary relation) P is true iff G has a clique of size k.
Reference: [6] <author> P. C. Kanellakis, </author> <title> "Elements of Relational Database Theory", </title> <booktitle> in Handbook of Theoretical Computer Science, </booktitle> <editor> J. Van Leeuwen ed., </editor> <booktitle> pp. </booktitle> <pages> 1074-1156, </pages> <publisher> Elsevier, </publisher> <year> 1991. </year> <month> 12 </month>
Reference-contexts: 1 Introduction The complexity of query languages has been |next to expressibility| one of the main preoccupations of database theory ever since the paper by Chandra and Merlin twenty years ago [4]; see <ref> [6, 1] </ref> for extensive overviews of the subject.
Reference: [7] <author> P. C. Kanellakis, </author> <title> "Constraint Programming and Database Languages: A Tutorial", </title> <booktitle> Proc. 14th ACM Symp. Principles of Database Sys., </booktitle> <pages> pp. 46-53, </pages> <year> 1995. </year>
Reference: [8] <author> A. Klug, </author> <title> "On Conjunctive Queries Containing Inequalities", </title> <journal> J.ACM, </journal> <pages> pp. 146-160, </pages> <year> 1988. </year>
Reference-contexts: The system is consistent iff there is no strongly connected component that contains a &lt; arc, and the implied equalities are that all nodes of the same strong component are equal (see eg. <ref> [8] </ref>). Let Q 0 be the resulting query after collapsing equal variables and constants of Q, and C 0 its set of comparison constraints (which is now acyclic).
Reference: [9] <author> O. Lichtenstein, A. Pnueli, </author> <title> "Checking that Finite State Concurrent Programs Satisfy their Specifications", </title> <booktitle> Proc. 12th Annual ACM Symp. on Principles of Prog. Lang., </booktitle> <pages> pp. 97-107, </pages> <year> 1985. </year>
Reference-contexts: However, usually specifications are rather small (like queries) and programs are quite large (like databases). Fortunately, it turns out that the model checking problem for LTL specification and program P can be solved in time exponential in jj and linear in jP j <ref> [9] </ref>. Can we hope for such algorithms in the query evaluation of the important query languages (such as the ones mentioned above)? What are natural classes of queries that possess this type of algorithms? Parametric complexity provides the framework to examine these problems.
Reference: [10] <author> B. Monien, </author> <title> "How to Find Long Paths Efficiently", </title> <journal> Ann. Disc. Math., </journal> <pages> pp. 239-254, </pages> <year> 1985. </year>
Reference-contexts: Examples: Given a graph and k pairs of nodes, are there node-disjoint paths between all pairs of nodes? [12] Given a graph and an integer k, is there a path of length k in the graph? <ref> [10, 2] </ref> Both problems, and many others like them, have algorithms with running time f (k) n c , where n is the input size and c a constant. <p> Furthermore, we can evaluate such a query in f.p. polynomial time in the input and the output. 9 A special case is the problem of finding simple paths of a specified length k in a graph. This problem was proved f.p. tractable by Monien <ref> [10] </ref>, and an improved algorithm was given in [2] using an elegant "color-coding" (hashing) technique. Our algorithm combines this technique with acyclic query processing techniques.
Reference: [11] <author> C. H. Papadimitriou, M. Yannakakis, </author> <title> "On Limited Nondeterminism and the Complexity of the VC dimension", </title> <journal> J. Comp. Sys. </journal> <volume> Sc., </volume> <pages> pp. 161-170, </pages> <year> 1996. </year>
Reference-contexts: Query evaluation problems lie ominously within the scope of this category, with query length being the obvious analog of k in the parametric clique problem above. Researchers in complexity have recently developed a theory of limited nondeterminism and fixed-parameter tractability <ref> [3, 11, 5] </ref> which seeks to make important distinctions, along the lines suggested above, between problems below NP.
Reference: [12] <author> N. Robertson, P. D. Seymour, </author> <title> "Graph Minors XIII: The Disjoint Paths Problem". </title>
Reference-contexts: Several NP-complete problems when supplied with a meaningful, natural parameter yield parametric problems that are f.p. tractable. Examples: Given a graph and k pairs of nodes, are there node-disjoint paths between all pairs of nodes? <ref> [12] </ref> Given a graph and an integer k, is there a path of length k in the graph? [10, 2] Both problems, and many others like them, have algorithms with running time f (k) n c , where n is the input size and c a constant.
Reference: [13] <author> J. D. Ullman, </author> <title> Principles of Database and Knowledge Base Systems, </title> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: First order queries add set difference (negation in calculus). Datalog adds recursion to the positive queries. We refer to the textbooks <ref> [13, 1] </ref> for a detailed exposition. In the evaluation problem for a query Q, we are given database d and wish to compute Q (d). In the decision problem, we are given in addition to the database d a tuple t, and wish to decide if t 2 Q (d). <p> In this case we would normally include in the hypergraph also edges (x i ; x j ) corresponding to the inequalities between the variables (see <ref> [13] </ref>). However, inclusion of these edges destroys acyclicity even in very simple cases.
Reference: [14] <author> M. Y. Vardi, </author> <title> "The Complexity of Relational Query Languages", </title> <booktitle> Proc. ACM Symp. Theory of Computing, </booktitle> <pages> pp. 137-146, </pages> <year> 1982. </year>
Reference-contexts: 1 Introduction The complexity of query languages has been |next to expressibility| one of the main preoccupations of database theory ever since the paper by Chandra and Merlin twenty years ago [4]; see [6, 1] for extensive overviews of the subject. It has been noted rather early <ref> [14] </ref> that, when considering the complexity of evaluating a query on an instance, one has to distinguish between two kinds of complexity: Data complexity is the complexity of evaluating a query on a database instance, when the query is fixed, and we express the complexity as a function of the size
Reference: [15] <author> M. Y. Vardi, </author> <title> "On the Complexity of Bounded-Variable Queries", </title> <booktitle> Proc. ACM Symp. Principles of Database Sys., </booktitle> <pages> pp. 266-276, </pages> <year> 1995. </year>
Reference-contexts: We analyse the complexity for two types of parameters: the query size q and the number of variables v that appear in the query. The latter parameter is motivated by recent work of Vardi <ref> [15] </ref>, who studied the complexity of queries assuming that the number of variables v is fixed, while the size of the query can grow along with the database.
Reference: [16] <author> M. Yannakakis, </author> <title> "Algorithms for Acyclic Database Schemes", </title> <booktitle> Proc. 7th Intl. Conf. Very Large Data Bases, </booktitle> <pages> pp. 82-94, </pages> <year> 1981. </year>
Reference-contexts: If Q is acyclic, this evaluation can be done in time polynomial in the size of the input database d and the output Q (d) <ref> [16] </ref>.
Reference: [17] <author> M. Yannakakis, </author> <title> "Perspectives on Database Theory", </title> <booktitle> Proc. IEEE Symp. Foundations of Comp. </booktitle> <address> Sc., </address> <year> 1995. </year> <month> 13 </month>
References-found: 17

