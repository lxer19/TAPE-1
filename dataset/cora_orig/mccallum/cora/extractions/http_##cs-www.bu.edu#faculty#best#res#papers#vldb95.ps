URL: http://cs-www.bu.edu/faculty/best/res/papers/vldb95.ps
Refering-URL: http://cs-www.bu.edu/faculty/best/res/Home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: best@cs.bu.edu  sb@cs.bu.edu  
Title: In Proceedings of VLDB'95: The InternationalConference on Very Large Databases, Zurich, Switzerland, September1995. Value-cognizant Speculative
Author: Azer Bestavros Spyridon Braoudakis 
Address: Boston University, MA 02215  Boston University, MA 02215  
Affiliation: Computer Science Department  Computer Science Department  
Abstract: We describe SCC-kS, a Speculative Concurrency Control (SCC) algorithm that allows a DBMS to use efficiently the extra computing resources available in the system to increase the likelihood of timely commitment of transactions. Using SCC-kS, up to k shadow transactions execute speculatively on behalf of a given uncommitted transaction so as to protect against the hazards of blockages and restarts. SCC-kS allows the system to scale the level of speculation that each transaction is allowed to perform, thus providing a straightforward mechanism of trading resources for timeliness. Also, we describe SCC-DC, a value-cognizant SCC protocol that utilizes deadline and criticalness information to improve timeliness through the controlled deferment of transaction commitments. We present simulation results that quantify the performance gains of our protocols compared to other widely used con currency control protocols for real-time databases.
Abstract-found: 1
Intro-found: 1
Reference: [AAJ92] <author> D. Agrawal, A. El Abbadi, and R. Jeffers. </author> <title> Using delayed commitment in locking protocols for real-time databases. </title> <booktitle> In Proceedings of the 1992 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> San Diego, Ca, </address> <year> 1992. </year>
Reference-contexts: Figure 10 shows the increased value-added to the system that results from delaying the commitment of T 1 , thus allowing T o 2 to commit before its deadline and contribute a higher value to the system. Our approach for introducing delays is similar to those proposed in <ref> [AAJ92, HCL90a, SPL92] </ref>. Whenever a shadow T o u finishes its execution, we evaluate if it is advantageous to defer T o u 's commitment.
Reference: [ACL87] <author> R. Agrawal, M. Carey, and M. Linvy. </author> <title> Concurency control performance modeling: Alternatives and implications. </title> <journal> ACM Transaction on Database Sys--tems, </journal> <volume> 12(4), </volume> <month> December </month> <year> 1987. </year>
Reference-contexts: 1 Introduction For DataBase Management Systems (DBMS) with limited resources, performance studies of concur-rency control methods (e.g. <ref> [ACL87] </ref>) have concluded that Pessimistic Concurrency Control (PCC) protocols [EGLT76, GLPT76] perform better than Optimistic Concurrency Control (OCC) techniques [BCFF87, KR81]. The main reason for this good performance is that PCC's blocking-based conflict resolution policies result in resource conservation. <p> Real-time concurrency control schemes considered in the literature could be viewed as extensions of either PCC-based or OCC-based protocols, whereby transactions are assigned priorities that reflect the urgency of their timing constraints. These priorities are used with PCC-based techniques <ref> [AGM88, ACL87, SZ88, HSTR89, Sin88, SRL88, SRSC91] </ref> to make it possible for urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used with OCC-based techniques [Kor90, HCL90b, HCL90a, HSRT91, KS91, LS90, SPL92] to favor urgent transactions when conflicting, less urgent ones attempt to validate
Reference: [AGM88] <author> Robert Abbott and Hector Garcia-Molina. </author> <title> Scheduling real-time transactions: A performance evaluation. </title> <booktitle> In Prooceedings of the 14th International Conference on Very Large Data Bases, </booktitle> <address> Los Angeles, Ca, </address> <year> 1988. </year>
Reference-contexts: Real-time concurrency control schemes considered in the literature could be viewed as extensions of either PCC-based or OCC-based protocols, whereby transactions are assigned priorities that reflect the urgency of their timing constraints. These priorities are used with PCC-based techniques <ref> [AGM88, ACL87, SZ88, HSTR89, Sin88, SRL88, SRSC91] </ref> to make it possible for urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used with OCC-based techniques [Kor90, HCL90b, HCL90a, HSRT91, KS91, LS90, SPL92] to favor urgent transactions when conflicting, less urgent ones attempt to validate <p> If CI u (t) ff, then delay T o u 's commitment, otherwise invoke the Commit Rule on T o u . 4 Performance Evaluation In this section, we present a comparative evaluation of the following protocols: 2PL with Priority Abort (2PL-PA) <ref> [AGM88] </ref> as a representative of PCC-based protocols, OCC-BC [HCL90b] and WAIT-50 [HCL90a] as representatives of OCC-based protocols, and SCC-2S and SCC-VW as representatives of SCC-based protocols. The RTDBS model that we used in our experiments consists of a multiprocessor DBMS operating on disk resident data.
Reference: [BB94] <author> Azer Bestavros and Spyridon Braoudakis. </author> <title> Timeliness via speculation for real-time databases. </title> <booktitle> In Proceedings of RTSS'94: The 14 th IEEE Real-Time System Symposium, </booktitle> <address> San Juan, Puerto Rico, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: SCC protocols are particularly suitable for RTDBS because they reduce the negative impact of blockages and rollbacks, which are characteristics of PCC and OCC techniques. In our previous SCC studies, we did not make any use of transaction deadline or criticalness information. Nevertheless, our performance studies <ref> [BB94] </ref> demonstrated the superiority of SCC-based protocols to real-time OCC-based and PCC--based protocols, which use such information. In this paper, we argue that SCC protocols provide for a very natural (and elegant) way of incorporating transaction deadline and criticalness information into concur-rency control for RTDBS. <p> Rather, this limit is on the number of conflicts that SCC-kS will be ready to deal with in a timely manner. Choosing Which conflicts should be accounted for by speculative shadows is an interesting problem. In <ref> [BB94] </ref> we have adopted a Latest-Blocked-First-Out (LBFO) shadow replacement policy that requires the speculative shadows of SCC-kS to account for the first l k 1 conflicts (whether read-after-write or write-after-read) encountered by a transaction. LBFO is one of several policies that could be adopted.
Reference: [BCFF87] <author> C. Boksenbaum, M. Cart, J. Ferrie, and J. Fran-cois. </author> <title> Concurrent certifications by intervals of timestamps in distributed database systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <pages> pages 409-419, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: 1 Introduction For DataBase Management Systems (DBMS) with limited resources, performance studies of concur-rency control methods (e.g. [ACL87]) have concluded that Pessimistic Concurrency Control (PCC) protocols [EGLT76, GLPT76] perform better than Optimistic Concurrency Control (OCC) techniques <ref> [BCFF87, KR81] </ref>. The main reason for this good performance is that PCC's blocking-based conflict resolution policies result in resource conservation.
Reference: [Bes92] <author> Azer Bestavros. </author> <title> Speculative Concurrency Control: A position statement. </title> <type> Technical Report TR-92-016, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: In a recent study <ref> [Bes92] </ref>, we proposed an approach to concurrency control that combines the advantages of both OCC and PCC protocols while avoiding their disadvantages. Our approach relies on the use of redundant computations to start on alternative schedules, as soon as conflicts that threaten the consistency of the database are detected. <p> All such conflicting transactions are immediately restarted. OCC-BC detects conflicts earlier than the basic OCC algorithm resulting in less wasted resources and earlier restarts. The SCC approach proposed in <ref> [Bes92] </ref> goes one step further in utilizing information about conflicts. Instead of waiting for a potential consistency threat to materialize and then taking a corrective measure, an SCC algorithm uses additional (redundant) resources to start on speculative corrective measures as soon as the conflict in question develops.
Reference: [BMHD89] <author> A. P. Buchmann, D. C. McCarthy, M. Hsu, and U. Dayal. </author> <title> Time-critical database scheduling: A framework for integrating real-time scheduling and concurrency controls. </title> <booktitle> In Proceedings of the 5th International Conference on Data Engineering, </booktitle> <address> Los Angeles, California, </address> <month> February </month> <year> 1989. </year>
Reference-contexts: RTDBS are engineered not to guarantee a particular throughput, but to ensure that in the rare event of a highly-loaded system, transactions complete before their set deadlines <ref> [BMHD89] </ref>. These design goals often lead to a computing environment with far more resources than what would be necessary to sustain average loads, thus vanishing the advantage of PCC over OCC algorithms.
Reference: [Bra94] <author> Spyridon Braoudakis. </author> <title> Concurrency Control Protocols for Real-Time Databases. </title> <type> PhD thesis, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA 02215, expected June 1994. </address>
Reference-contexts: This leads to what we have termed the Order-Based SCC (SCC-OB). A SCC-OB algorithm requires a large amount of redundancy. If transaction T r is one of n pairwise conflicting transactions, then SCC-OB may require T r to fork an exponential number of shadows <ref> [Bra94] </ref>, namely: P n (n1)! The SCC-OB algorithm can be optimized so as to reduce significantly the number of shadows that may be required per transaction. <p> Such an optimized algorithm, called Conflict-Based SCC (SCC-CB), is detailed in <ref> [Bra94] </ref>. <p> In [BB94] we have adopted a Latest-Blocked-First-Out (LBFO) shadow replacement policy that requires the speculative shadows of SCC-kS to account for the first l k 1 conflicts (whether read-after-write or write-after-read) encountered by a transaction. LBFO is one of several policies that could be adopted. In <ref> [Bra94] </ref> some alternative policies that account for the most probable serialization orders based on deadline and priority information are described and evaluated. Blocking Rule: This rule is used to control when a speculative shadow T i r must be blocked. <p> Simulations were performed under a wide range of workloads to enable us to characterize the behavior of the protocols under the various conditions that may arise in a real-world RTDBS. For a comprehensive analysis of these simulations, we refer the reader to <ref> [Bra94] </ref>. Figures 13 and 14 depict the average number of transactions that missed their deadlines, and the extra time needed by late transactions to complete their operations, respectively. All protocols perform well when the number of transactions in the system is small.
Reference: [BSR88] <author> Sara Biyabani, John Stankovic, and Krithi Ra-mamritham. </author> <title> The integration of deadline and criticalness in hard real-time scheduling. </title> <booktitle> In Prooceed-ings of the 9th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1988. </year>
Reference-contexts: For such systems the attention shifts to maximizing the value-added to the system by the transactions' commitment; minimizing tardiness or the number of missed deadlines becomes of secondary importance. Notice that a transaction's value and its deadline are two orthogonal properties <ref> [BSR88, HSTR89] </ref>. The fact that a transaction has a tight deadline does not in any way imply that it has a high value, nor does the fact that it has a loose deadline imply that it has a low value.
Reference: [EGLT76] <author> K. P. Eswaran, J. N. Gray, R. A. Lorie, and I. L. Traiger. </author> <title> The notions of consistency and predicate locks in a database system. </title> <journal> Communications of the ACM, </journal> 19(11) 624-633, November 1976. 
Reference-contexts: 1 Introduction For DataBase Management Systems (DBMS) with limited resources, performance studies of concur-rency control methods (e.g. [ACL87]) have concluded that Pessimistic Concurrency Control (PCC) protocols <ref> [EGLT76, GLPT76] </ref> perform better than Optimistic Concurrency Control (OCC) techniques [BCFF87, KR81]. The main reason for this good performance is that PCC's blocking-based conflict resolution policies result in resource conservation.
Reference: [GLPT76] <author> J. N. Gray, R. A. Lorie, G. R. Putzolu, and I. L. Traiger. </author> <title> Granularity of locks and degrees of con-sistensy in a shared data base. </title> <editor> In G. M. Ni-jssen, editor, </editor> <booktitle> Modeling in Data Base Management Systems, </booktitle> <pages> pages 365-395. </pages> <publisher> North-Holland, </publisher> <address> Amster-dam, The Netherlands, </address> <year> 1976. </year>
Reference-contexts: 1 Introduction For DataBase Management Systems (DBMS) with limited resources, performance studies of concur-rency control methods (e.g. [ACL87]) have concluded that Pessimistic Concurrency Control (PCC) protocols <ref> [EGLT76, GLPT76] </ref> perform better than Optimistic Concurrency Control (OCC) techniques [BCFF87, KR81]. The main reason for this good performance is that PCC's blocking-based conflict resolution policies result in resource conservation.
Reference: [HCL90a] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Linvy. </author> <title> Dynamic real-time optimistic concurrency control. </title> <booktitle> In Prooceedings of the 11th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: These design goals often lead to a computing environment with far more resources than what would be necessary to sustain average loads, thus vanishing the advantage of PCC over OCC algorithms. In particular, OCC algorithms become attractive since computing resources wasted due to restarts do not adversely affect performance <ref> [HCL90b, HCL90a] </ref>. Real-time concurrency control schemes considered in the literature could be viewed as extensions of either PCC-based or OCC-based protocols, whereby transactions are assigned priorities that reflect the urgency of their timing constraints. <p> These priorities are used with PCC-based techniques [AGM88, ACL87, SZ88, HSTR89, Sin88, SRL88, SRSC91] to make it possible for urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used with OCC-based techniques <ref> [Kor90, HCL90b, HCL90a, HSRT91, KS91, LS90, SPL92] </ref> to favor urgent transactions when conflicting, less urgent ones attempt to validate and commit (thus avoiding the hazards of restarts). <p> Figure 10 shows the increased value-added to the system that results from delaying the commitment of T 1 , thus allowing T o 2 to commit before its deadline and contribute a higher value to the system. Our approach for introducing delays is similar to those proposed in <ref> [AAJ92, HCL90a, SPL92] </ref>. Whenever a shadow T o u finishes its execution, we evaluate if it is advantageous to defer T o u 's commitment. <p> (t) ff, then delay T o u 's commitment, otherwise invoke the Commit Rule on T o u . 4 Performance Evaluation In this section, we present a comparative evaluation of the following protocols: 2PL with Priority Abort (2PL-PA) [AGM88] as a representative of PCC-based protocols, OCC-BC [HCL90b] and WAIT-50 <ref> [HCL90a] </ref> as representatives of OCC-based protocols, and SCC-2S and SCC-VW as representatives of SCC-based protocols. The RTDBS model that we used in our experiments consists of a multiprocessor DBMS operating on disk resident data.
Reference: [HCL90b] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Linvy. </author> <title> On being optimistic about real-time constraints. </title> <booktitle> In Prooceedings of the 1990 ACM PODS Symposium, </booktitle> <month> April </month> <year> 1990. </year>
Reference-contexts: These design goals often lead to a computing environment with far more resources than what would be necessary to sustain average loads, thus vanishing the advantage of PCC over OCC algorithms. In particular, OCC algorithms become attractive since computing resources wasted due to restarts do not adversely affect performance <ref> [HCL90b, HCL90a] </ref>. Real-time concurrency control schemes considered in the literature could be viewed as extensions of either PCC-based or OCC-based protocols, whereby transactions are assigned priorities that reflect the urgency of their timing constraints. <p> These priorities are used with PCC-based techniques [AGM88, ACL87, SZ88, HSTR89, Sin88, SRL88, SRSC91] to make it possible for urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used with OCC-based techniques <ref> [Kor90, HCL90b, HCL90a, HSRT91, KS91, LS90, SPL92] </ref> to favor urgent transactions when conflicting, less urgent ones attempt to validate and commit (thus avoiding the hazards of restarts). <p> In figure 9, committing T 1 as soon as it is validated causes T 2 to miss its deadline and a value penalty to be assessed to the system. In <ref> [HCL90b] </ref>, Haritsa showed that by delaying the commitment of a lower priority transaction, the number of transactions meeting their deadlines is increased. <p> If CI u (t) ff, then delay T o u 's commitment, otherwise invoke the Commit Rule on T o u . 4 Performance Evaluation In this section, we present a comparative evaluation of the following protocols: 2PL with Priority Abort (2PL-PA) [AGM88] as a representative of PCC-based protocols, OCC-BC <ref> [HCL90b] </ref> and WAIT-50 [HCL90a] as representatives of OCC-based protocols, and SCC-2S and SCC-VW as representatives of SCC-based protocols. The RTDBS model that we used in our experiments consists of a multiprocessor DBMS operating on disk resident data.
Reference: [HCL92] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Linvy. </author> <title> Data access scehduling in firm real-time database systems. </title> <journal> The Journal of Real-Time Systems, </journal> <volume> 4 </volume> <pages> 203-241, </pages> <year> 1992. </year>
Reference-contexts: The slack factor for the computation of transaction deadlines is set up at 2, and the EDF policy to assign transaction priorities (for 2PL-PA and Wait-50) is adopted. These parameter settings are comparable to those used in similar studies <ref> [HCL92] </ref>. Our experiments assumed that transaction deadlines are soft. This entails that late transactions (those missing their deadlines) must complete|nevertheless|with the minimum possible delay. Each simulation runs until at least 4,000 transactions are committed. Enough runs were performed to guarantee a 90% confidence interval.
Reference: [HSRT91] <author> Jiandong Huang, John A. Stankovic, Krithi Ra-mamritham, and Don Towslwy. </author> <title> Experimental evaluation of real-time optimistic concurrency control schemes. </title> <booktitle> In Prooceedings of the 17th International Conference on Very Large Data Bases, </booktitle> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: These priorities are used with PCC-based techniques [AGM88, ACL87, SZ88, HSTR89, Sin88, SRL88, SRSC91] to make it possible for urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used with OCC-based techniques <ref> [Kor90, HCL90b, HCL90a, HSRT91, KS91, LS90, SPL92] </ref> to favor urgent transactions when conflicting, less urgent ones attempt to validate and commit (thus avoiding the hazards of restarts).
Reference: [HSTR89] <author> J. Huang, J. A. Stankovic, D. Towsley, and K. Ra-mamritham. </author> <title> Experimental evaluation of real-time transaction processing. </title> <booktitle> In Proceedings of the 10th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1989. </year>
Reference-contexts: Real-time concurrency control schemes considered in the literature could be viewed as extensions of either PCC-based or OCC-based protocols, whereby transactions are assigned priorities that reflect the urgency of their timing constraints. These priorities are used with PCC-based techniques <ref> [AGM88, ACL87, SZ88, HSTR89, Sin88, SRL88, SRSC91] </ref> to make it possible for urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used with OCC-based techniques [Kor90, HCL90b, HCL90a, HSRT91, KS91, LS90, SPL92] to favor urgent transactions when conflicting, less urgent ones attempt to validate <p> Under this approach all system transactions are assigned the same value. However, there exist real-time applications where different transactions may be assigned different values <ref> [SZ88, HSTR89] </ref> to reflect their relative worth to the system upon successful completion. For such systems the attention shifts to maximizing the value-added to the system by the transactions' commitment; minimizing tardiness or the number of missed deadlines becomes of secondary importance. <p> For such systems the attention shifts to maximizing the value-added to the system by the transactions' commitment; minimizing tardiness or the number of missed deadlines becomes of secondary importance. Notice that a transaction's value and its deadline are two orthogonal properties <ref> [BSR88, HSTR89] </ref>. The fact that a transaction has a tight deadline does not in any way imply that it has a high value, nor does the fact that it has a loose deadline imply that it has a low value.
Reference: [JLT85] <author> E. Jensen, C. Locke, and H. Tokuda. </author> <title> A time-driven scheduling model for real-time operating systems. </title> <booktitle> In Proceedings of the 6th Real-Time Systems Symbosium, </booktitle> <month> December </month> <year> 1985. </year>
Reference-contexts: Transactions with similar values may have different deadlines, while those with similar deadlines may have different values. 3.1 Transaction Value The relationship between a transaction's value and the value-added to the system can be captured by the notion of value functions introduced by Jensen, Locke, and Tokuda <ref> [JLT85, Loc86] </ref>. Each transaction T u is associated with a value function V u (t), which represents the value of T u as a function of its completion (commit) time. A real-time application cashes on the full value of a transaction if it is committed on time.
Reference: [Kor90] <author> Henry Korth. </author> <title> Triggered real-time databases with consistency constraints. </title> <booktitle> In Proceedings of the 16th International Conference on Very Large Data Bases, </booktitle> <address> Brisbane, Australia, </address> <year> 1990. </year>
Reference-contexts: These priorities are used with PCC-based techniques [AGM88, ACL87, SZ88, HSTR89, Sin88, SRL88, SRSC91] to make it possible for urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used with OCC-based techniques <ref> [Kor90, HCL90b, HCL90a, HSRT91, KS91, LS90, SPL92] </ref> to favor urgent transactions when conflicting, less urgent ones attempt to validate and commit (thus avoiding the hazards of restarts).
Reference: [KR81] <author> H. Kung and John Robinson. </author> <title> On optimistic methods for concurrency control. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(2), </volume> <month> June </month> <year> 1981. </year>
Reference-contexts: 1 Introduction For DataBase Management Systems (DBMS) with limited resources, performance studies of concur-rency control methods (e.g. [ACL87]) have concluded that Pessimistic Concurrency Control (PCC) protocols [EGLT76, GLPT76] perform better than Optimistic Concurrency Control (OCC) techniques <ref> [BCFF87, KR81] </ref>. The main reason for this good performance is that PCC's blocking-based conflict resolution policies result in resource conservation. <p> Also, SCC-VW, a simplified, efficient version of the SCC-DC protocol is presented. In section 4, we present simulation results that show the improvements achievable by SCC-based algorithms over other widely used protocols. 2 Speculative Concurrency Control A major disadvantage of basic OCC <ref> [KR81] </ref> when used in RTDBS is that transaction conflicts are not detected until the validation phase, at which time it may be too late to restart.
Reference: [KS91] <author> Woosaeng Kim and Jaideep Srivastava. </author> <title> Enhancing real-time dbms performance with multiver-sion data and priority based disk scheduling. </title> <booktitle> In Prooceedings of the 12th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: These priorities are used with PCC-based techniques [AGM88, ACL87, SZ88, HSTR89, Sin88, SRL88, SRSC91] to make it possible for urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used with OCC-based techniques <ref> [Kor90, HCL90b, HCL90a, HSRT91, KS91, LS90, SPL92] </ref> to favor urgent transactions when conflicting, less urgent ones attempt to validate and commit (thus avoiding the hazards of restarts).
Reference: [Loc86] <author> C. Locke. </author> <title> Best Effort Decision Making for Real-Time Scheduling. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, Department of Computer Science, </institution> <month> May </month> <year> 1986. </year>
Reference-contexts: Transactions with similar values may have different deadlines, while those with similar deadlines may have different values. 3.1 Transaction Value The relationship between a transaction's value and the value-added to the system can be captured by the notion of value functions introduced by Jensen, Locke, and Tokuda <ref> [JLT85, Loc86] </ref>. Each transaction T u is associated with a value function V u (t), which represents the value of T u as a function of its completion (commit) time. A real-time application cashes on the full value of a transaction if it is committed on time.
Reference: [LS90] <author> Yi Lin and Sang Son. </author> <title> Concurrency control in real-time databases by dynamic adjustment of serialization order. </title> <booktitle> In Proceedings of the 11th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: These priorities are used with PCC-based techniques [AGM88, ACL87, SZ88, HSTR89, Sin88, SRL88, SRSC91] to make it possible for urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used with OCC-based techniques <ref> [Kor90, HCL90b, HCL90a, HSRT91, KS91, LS90, SPL92] </ref> to favor urgent transactions when conflicting, less urgent ones attempt to validate and commit (thus avoiding the hazards of restarts).
Reference: [MN82] <author> D. Menasce and T. Nakanishi. </author> <title> Optimistic versus pessimistic concurrency control mechanisms in database management systems. </title> <journal> Information Systems, </journal> <volume> 7(1), </volume> <year> 1982. </year>
Reference-contexts: The Broadcast Commit (OCC-BC) variant of classical OCC <ref> [MN82, Rob82] </ref> attempts to solve this problem by a notification process, whereby a committing transaction notifies all concurrently running, conflicting transactions about its commitment. All such conflicting transactions are immediately restarted. OCC-BC detects conflicts earlier than the basic OCC algorithm resulting in less wasted resources and earlier restarts.
Reference: [Rob82] <author> John Robinson. </author> <title> Design of Concurrency Controls for Transaction Processing Systems. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1982. </year>
Reference-contexts: The Broadcast Commit (OCC-BC) variant of classical OCC <ref> [MN82, Rob82] </ref> attempts to solve this problem by a notification process, whereby a committing transaction notifies all concurrently running, conflicting transactions about its commitment. All such conflicting transactions are immediately restarted. OCC-BC detects conflicts earlier than the basic OCC algorithm resulting in less wasted resources and earlier restarts.
Reference: [Sin88] <author> Mukesh Singhal. </author> <title> Issues and approaches to design real-time database systems. </title> <journal> ACM, SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 19-33, </pages> <year> 1988. </year>
Reference-contexts: Real-time concurrency control schemes considered in the literature could be viewed as extensions of either PCC-based or OCC-based protocols, whereby transactions are assigned priorities that reflect the urgency of their timing constraints. These priorities are used with PCC-based techniques <ref> [AGM88, ACL87, SZ88, HSTR89, Sin88, SRL88, SRSC91] </ref> to make it possible for urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used with OCC-based techniques [Kor90, HCL90b, HCL90a, HSRT91, KS91, LS90, SPL92] to favor urgent transactions when conflicting, less urgent ones attempt to validate
Reference: [SPL92] <author> S. Son, S. Park, and Y. Lin. </author> <title> An integrated real-time locking protocol. </title> <booktitle> In Prooceedings of the IEEE International Conference on Data Engineering, </booktitle> <address> Tempe, AZ, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: These priorities are used with PCC-based techniques [AGM88, ACL87, SZ88, HSTR89, Sin88, SRL88, SRSC91] to make it possible for urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used with OCC-based techniques <ref> [Kor90, HCL90b, HCL90a, HSRT91, KS91, LS90, SPL92] </ref> to favor urgent transactions when conflicting, less urgent ones attempt to validate and commit (thus avoiding the hazards of restarts). <p> Figure 10 shows the increased value-added to the system that results from delaying the commitment of T 1 , thus allowing T o 2 to commit before its deadline and contribute a higher value to the system. Our approach for introducing delays is similar to those proposed in <ref> [AAJ92, HCL90a, SPL92] </ref>. Whenever a shadow T o u finishes its execution, we evaluate if it is advantageous to defer T o u 's commitment.
Reference: [SRL88] <author> Lui Sha, R. Rajkumar, and J. Lehoczky. </author> <title> Concur-rency control for distributed real-time databases. </title> <journal> ACM, SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 82-98, </pages> <year> 1988. </year>
Reference-contexts: Real-time concurrency control schemes considered in the literature could be viewed as extensions of either PCC-based or OCC-based protocols, whereby transactions are assigned priorities that reflect the urgency of their timing constraints. These priorities are used with PCC-based techniques <ref> [AGM88, ACL87, SZ88, HSTR89, Sin88, SRL88, SRSC91] </ref> to make it possible for urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used with OCC-based techniques [Kor90, HCL90b, HCL90a, HSRT91, KS91, LS90, SPL92] to favor urgent transactions when conflicting, less urgent ones attempt to validate
Reference: [SRSC91] <author> Lui Sha, R. Rajkumar, Sang Son, and Chun-Hyon Chang. </author> <title> A real-time locking protocol. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(7) </volume> <pages> 793-800, </pages> <year> 1991. </year>
Reference-contexts: Real-time concurrency control schemes considered in the literature could be viewed as extensions of either PCC-based or OCC-based protocols, whereby transactions are assigned priorities that reflect the urgency of their timing constraints. These priorities are used with PCC-based techniques <ref> [AGM88, ACL87, SZ88, HSTR89, Sin88, SRL88, SRSC91] </ref> to make it possible for urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used with OCC-based techniques [Kor90, HCL90b, HCL90a, HSRT91, KS91, LS90, SPL92] to favor urgent transactions when conflicting, less urgent ones attempt to validate
Reference: [SZ88] <author> John Stankovic and Wei Zhao. </author> <title> On real-time transactions. </title> <journal> ACM, SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 4-18, </pages> <year> 1988. </year>
Reference-contexts: Real-time concurrency control schemes considered in the literature could be viewed as extensions of either PCC-based or OCC-based protocols, whereby transactions are assigned priorities that reflect the urgency of their timing constraints. These priorities are used with PCC-based techniques <ref> [AGM88, ACL87, SZ88, HSTR89, Sin88, SRL88, SRSC91] </ref> to make it possible for urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used with OCC-based techniques [Kor90, HCL90b, HCL90a, HSRT91, KS91, LS90, SPL92] to favor urgent transactions when conflicting, less urgent ones attempt to validate <p> Under this approach all system transactions are assigned the same value. However, there exist real-time applications where different transactions may be assigned different values <ref> [SZ88, HSTR89] </ref> to reflect their relative worth to the system upon successful completion. For such systems the attention shifts to maximizing the value-added to the system by the transactions' commitment; minimizing tardiness or the number of missed deadlines becomes of secondary importance.
References-found: 29

