URL: http://www.cs.brown.edu/cgc/papers/lpt-rpqid-.ps.gz
Refering-URL: http://www.cs.brown.edu/cgc/cgc-papers/cgc-papers.html
Root-URL: http://www.cs.brown.edu
Email: fgl,franco,rtg@cs.brown.edu  
Title: Robust Proximity Queries: an Illustration of Degree-driven Algorithm Design  
Author: Giuseppe Liotta Franco P. Preparata Roberto Tamassia 
Date: December 1996)  
Note: (Revised Version,  Research supported in part by the U.S. Army Research Office under grant DAAH04-96-1-0013, and by the N.A.T.O.-C.N.R. Advanced Fellowships Programme.  
Address: 115 Waterman Street, Providence, RI 02912-1910, USA  
Affiliation: Center for Geometric Computing Department of Computer Science, Brown University  
Abstract: In the context of methodologies intended to confer robustness to geometric algorithms, we elaborate on the exact computation paradigm and formalize the notion of degree of a geometric algorithm, as a worst-case quantification of the precision (number of bits) to which arithmetic calculation have to be executed in order to guarantee topological correctness. We also propose a formalism for the expeditious evaluation of algorithmic degree. As an application of this paradigm and an illustration of our general approach where algorithm design is driven also by the degree, we consider the important classical problem of proximity queries in 2 and 3 dimensions, and develop a new technique for the efficient and robust execution of such queries based on an implicit representation of Voronoi diagrams. Our new technique offers both low degree and fast query time, and for 2D queries is optimal with respect to both cost measures of the paradigm, asymptotic number of operations and arithmetic degree. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aggarwal, L. J. Guibas, J. Saxe, and P. W. Shor. </author> <title> A linear-time algorithm for computing the Voronoi diagram of a convex polygon. </title> <journal> Discrete Comput. Geom., </journal> <volume> 4(6) </volume> <pages> 591-604, </pages> <year> 1989. </year>
Reference-contexts: The space and preprocessing time of Theorems 7-8 and the query time of Theorem 8 can be improved while preserving the same degree bounds by more complicated procedures along the lines suggested in <ref> [1, 2, 15] </ref>. 5 Proximity Queries for Point Sites in 3D Space In this section, we consider the following proximity query on a set S of point sites in three dimensional (3D) space: nearest neighbor search: given query point q, find a site of S whose Euclidean distance from q is
Reference: [2] <author> A. Aggarwal, M. Hansen, and T. Leighton. </author> <title> Solving query-retrieval problems by compacting Voronoi diagrams. </title> <booktitle> In Proc. 22nd Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 331-340, </pages> <year> 1990. </year>
Reference-contexts: The space and preprocessing time of Theorems 7-8 and the query time of Theorem 8 can be improved while preserving the same degree bounds by more complicated procedures along the lines suggested in <ref> [1, 2, 15] </ref>. 5 Proximity Queries for Point Sites in 3D Space In this section, we consider the following proximity query on a set S of point sites in three dimensional (3D) space: nearest neighbor search: given query point q, find a site of S whose Euclidean distance from q is
Reference: [3] <author> F. Aurenhammer. </author> <title> Voronoi diagrams: A survey of a fundamental geometric data structure. </title> <journal> ACM Comput. Surv., </journal> <volume> 23 </volume> <pages> 345-405, </pages> <year> 1991. </year>
Reference-contexts: The incircle test is a basic operation for many algorithms that construct the Voronoi diagram of the sites (see, e.g. <ref> [37, 41, 33, 3] </ref>). The degree of the incircle test has been extensively studied by Burnikel [9] and by Burnikel, Mehlhorn and Schirra [11].
Reference: [4] <author> F. Avnaim, J.-D. Boissonnat, O. Devillers, F. Preparata, and M. Yvinec. </author> <title> Evaluating signs of determinants using single-precision arithmetic. </title> <type> Research Report 2306, </type> <institution> INRIA, BP93, 06902 Sophia-Antipolis, France, </institution> <year> 1994. </year>
Reference-contexts: This involves the use of "arithmetic filters," possibly families of filters, of progressively increasing power that, depending upon the values of primitive variables, carefully adjust the computational effort (see, e.g., <ref> [4, 11, 29, 41] </ref>). Next, one should carefully analyze the precision adopted in executing constructions, so that the outputs are within the precision bounds required by the application.
Reference: [5] <author> J. E. Baker, I. F. Cruz, G. Liotta, and R. Tamassia. </author> <title> The Mocha algorithm animation system. </title> <journal> ACM Comput. Surv., </journal> <volume> 27 </volume> <pages> 568-572, </pages> <year> 1995. </year>
Reference-contexts: We are currently implementing GeomLib, an object-oriented library for robust geometric computing that will be accessible through the World Wide Web by using the architectural framework of Mocha <ref> [6, 5] </ref>. 29 Acknowledgments The authors wish to thank the referees for several useful suggestions. 30
Reference: [6] <author> J. E. Baker, I. F. Cruz, G. Liotta, and R. Tamassia. </author> <title> Animating geometric algorithms over the Web. </title> <booktitle> In Proc. 12th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages C3-C4, </pages> <year> 1996. </year>
Reference-contexts: We are currently implementing GeomLib, an object-oriented library for robust geometric computing that will be accessible through the World Wide Web by using the architectural framework of Mocha <ref> [6, 5] </ref>. 29 Acknowledgments The authors wish to thank the referees for several useful suggestions. 30
Reference: [7] <author> J. L. Bentley and H. A. Maurer. </author> <title> A note on Euclidean near neighbor searching in the plane. </title> <journal> Inform. Process. Lett., </journal> <volume> 8 </volume> <pages> 133-136, </pages> <year> 1979. </year>
Reference-contexts: Circular range search queries in a set S of n point sites can be reduced to a sequence of 2 i -nearest neighbors queries in V 2 i (S), i = 0; ; log n <ref> [7] </ref>. This approach yields a data structure with O (n 3 ) space and preprocessing time, and O (log n log log n + k) query time, where k is the size of the output. Hence, with analogous reasoning as above, we obtain the following theorem.
Reference: [8] <author> M. Bocher. </author> <title> Introduction to higher algebra. </title> <publisher> Macmillan, </publisher> <year> 1907. </year>
Reference-contexts: Moreover, as the arguments of P j vary while P j remains 0, so does f and hence P . Therefore, P vanishes at all points for which P j vanishes and, for a well-known theorem of polynomial algebra (see, e.g., <ref> [8] </ref> pp. 212-216), we conclude that P j is a factor of P .
Reference: [9] <author> C. Burnikel. </author> <title> Exact Computation of Voronoi Diagrams and Line Segment Intersections. </title> <type> Ph.D thesis, </type> <institution> Universitat des Saarlandes, </institution> <month> Mar. </month> <year> 1996. </year>
Reference-contexts: this paper, we consider as a test case a problem area, geometric proximity, which plays a major role in several applications and has recently attracted considerable attention because, due to its demands of high precision for exact computation, it is particularly appropriate in assessing effectiveness of robust approaches (see, e.g., <ref> [9, 11, 20, 29, 31, 27, 55, 32] </ref>). In particular we shall illustrate the role played by the degree criterion if one wishes to comply with the standard exact-computation paradigm. <p> Definition 1 An algorithm has degree d if its test computations involve the evaluation of multivariate polynomials of arithmetic degree at most d. A problem has degree d if any algorithm that solves has degree at least d. Remark 1 Recently, Burnikel <ref> [9] </ref> has independently defined the notion of precision of an algorithm, which is equivalent to our notion of degree of an algorithm. Also, our definition of degree is related to that of depth of derivation proposed by Yap [57, 58]. <p> We omit the proofs of such lemmas, since they are either straightforward or have been already proved in <ref> [9] </ref>. However, it is worth mentioning that the proofs in [9] can be substantially simplified by using the proposed notation. Let p be a point and r a line in the plane. The point-to-point-line distance test determines whether a query point q is closer to p or to r. <p> We omit the proofs of such lemmas, since they are either straightforward or have been already proved in <ref> [9] </ref>. However, it is worth mentioning that the proofs in [9] can be substantially simplified by using the proposed notation. Let p be a point and r a line in the plane. The point-to-point-line distance test determines whether a query point q is closer to p or to r. <p> The incircle test is a basic operation for many algorithms that construct the Voronoi diagram of the sites (see, e.g. [37, 41, 33, 3]). The degree of the incircle test has been extensively studied by Burnikel <ref> [9] </ref> and by Burnikel, Mehlhorn and Schirra [11]. Following the notation of Burnikel [9], an incircle test is conveniently expressed as a quadruple (a 1 ; a 2 ; a 3 ; a 4 ), where each a i 2 fp; lg (i = 1; : : :; 4) is either <p> The incircle test is a basic operation for many algorithms that construct the Voronoi diagram of the sites (see, e.g. [37, 41, 33, 3]). The degree of the incircle test has been extensively studied by Burnikel <ref> [9] </ref> and by Burnikel, Mehlhorn and Schirra [11]. Following the notation of Burnikel [9], an incircle test is conveniently expressed as a quadruple (a 1 ; a 2 ; a 3 ; a 4 ), where each a i 2 fp; lg (i = 1; : : :; 4) is either a point or a line on the plane (a segment is seen by <p> The following lemma is proved observing that the incircle test (p 1 ; p 2 ; p 3 ; p 4 ) can be answered by determining the sign of 4 fi 4 determinant that is an arithmetic degree 4 multivariate polynomial. 7 Lemma 5 <ref> [9] </ref> The incircle test (p 1 ; p 2 ; p 3 ; p 4 ) can be solved with degree 4. Lemma 5 can be easily extended to any dimension d &gt; 2. <p> For the construction of the Voronoi diagram of a set of points and segments in the plane Burnikel shows that the most demanding test in terms of degree is the incircle test (l 1 ; l 2 ; l 3 ; l 4 ) <ref> [9] </ref>. Lemma 7 [9] The incircle test (l 1 ; l 2 ; l 3 ; l 4 ) can be solved with degree 40. While the above lemmas provide an upper bound on the degree of a proximity problem, the next theorem gives a lower bound. <p> For the construction of the Voronoi diagram of a set of points and segments in the plane Burnikel shows that the most demanding test in terms of degree is the incircle test (l 1 ; l 2 ; l 3 ; l 4 ) <ref> [9] </ref>. Lemma 7 [9] The incircle test (l 1 ; l 2 ; l 3 ; l 4 ) can be solved with degree 40. While the above lemmas provide an upper bound on the degree of a proximity problem, the next theorem gives a lower bound. <p> The implicit Voronoi diagram can be constructed in O (n log n) expected running time by using the randomized incremental algorithm of [11]. The most demanding operation is incircle test for three segments, which has degree 40 by Lemma 7 (see also <ref> [9] </ref>). <p> Specifically, consider (p 1 ; p 2 ; l 1 ; p 3 ), which can 28 be answered with degree 12 <ref> [9] </ref>. We show that it can be more efficiently executed as fol-lows. Perform first the test (p 1 ; p 2 ; p 3 ; l 1 ). <p> Thus test (p 1 ; p 2 ; l 1 ; p 3 ) is reduced to test (p 1 ; p 2 ; p 3 ; l 1 ) that can be executed with degree 8 (see <ref> [9] </ref>), and at most two other left-right tests of lower degree. Finally, an important issue for future research deals with the experimental comparison between point location algorithms in implicit Voronoi diagrams and traditional point location algorithms in explicit Voronoi diagrams.
Reference: [10] <author> C. Burnikel, J. Konnemann, K. Mehlhorn, S. Naher, S. Schirra, and C. Uhrig. </author> <title> Exact geometric computation in LEDA. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages C18-C19, </pages> <year> 1995. </year>
Reference-contexts: In this category falls the exact-geometric computation paradigm independently advocated by Yap [58] and by the Saarbrucken school <ref> [10] </ref>, and so does our approach. Within this paradigm, we introduce the notion of degree of an algorithm, which describes, up to a small additive constant, the arithmetic precision (i.e., number of bits) needed by the exact computation paradigm. <p> The extended Voronoi diagram V 0 (S) of S is said to be explicit if the coordinates of the vertices of V 0 (S) are computed and stored with exact arithmetic, i.e., as algebraic numbers <ref> [10, 58] </ref>.
Reference: [11] <author> C. Burnikel, K. Mehlhorn, and S. Schirra. </author> <title> How to compute the Voronoi diagram of line segments: Theoretical and experimental results. </title> <booktitle> In Proc. 2nd Annu. European Sympos. Algorithms (ESA '94), volume 855 of Lecture Notes in Computer Science, </booktitle> <pages> pages 227-239. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: this paper, we consider as a test case a problem area, geometric proximity, which plays a major role in several applications and has recently attracted considerable attention because, due to its demands of high precision for exact computation, it is particularly appropriate in assessing effectiveness of robust approaches (see, e.g., <ref> [9, 11, 20, 29, 31, 27, 55, 32] </ref>). In particular we shall illustrate the role played by the degree criterion if one wishes to comply with the standard exact-computation paradigm. <p> The incircle test is a basic operation for many algorithms that construct the Voronoi diagram of the sites (see, e.g. [37, 41, 33, 3]). The degree of the incircle test has been extensively studied by Burnikel [9] and by Burnikel, Mehlhorn and Schirra <ref> [11] </ref>. <p> The implicit Voronoi diagram can be constructed in O (n log n) expected running time by using the randomized incremental algorithm of <ref> [11] </ref>. The most demanding operation is incircle test for three segments, which has degree 40 by Lemma 7 (see also [9]). <p> This involves the use of "arithmetic filters," possibly families of filters, of progressively increasing power that, depending upon the values of primitive variables, carefully adjust the computational effort (see, e.g., <ref> [4, 11, 29, 41] </ref>). Next, one should carefully analyze the precision adopted in executing constructions, so that the outputs are within the precision bounds required by the application.
Reference: [12] <author> C. Burnikel, K. Mehlhorn, and S. Schirra. </author> <title> On degeneracy in geometric computations. </title> <booktitle> In Proc. 5th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 16-23, </pages> <year> 1994. </year>
Reference: [13] <author> C. Burnikel, R.Fleischer, K. Mehlhorn, and S. Schirra. </author> <title> A strong and easily computable separation bound for arithmetic expressions involving square roots. </title> <booktitle> In Proc. ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1997. </year> <note> to appear. </note>
Reference-contexts: First, the methodological framework described in Section 2 should be extended to the computation of the degree of other classes of geometric primitives. Recently, motivated in part by a preliminary version of this paper [45], Burnikel et al. <ref> [13] </ref> have presented a new separation bound for arithmetic expressions involving square roots.
Reference: [14] <author> B. Chazelle. </author> <title> How to search in history. </title> <journal> Inform. Control, </journal> <volume> 64 </volume> <pages> 77-99, </pages> <year> 1985. </year>
Reference-contexts: A degree 3 algorithm based on "implicit" 3D Voronoi diagrams is then given in Section 5.3. 5.1 Test Primitives and Methods for Spatial Point Location There are only two known efficient spatial point location methods for cell-complexes that are applicable to 3D Voronoi diagrams: the separating surfaces method <ref> [14, 56] </ref>, which extends the chain-method [44], and the persistent planar location method [52], which extends the persistent search tree method [53]. Let N be the number of facets of a cell-complex C. The query time is O (log 2 N ) for both methods. <p> Test primitives above-below (q; v) and left-right (q; v) are used only in degenerate cases (e.g. in the presence of facets parallel to the z-axis and in cases where e xy is horizontal). Now, we analyze the separating surfaces method for spatial point location <ref> [14, 56] </ref> in acyclic cell-complexes. Separating surfaces are the 3D analogue of separators of monotone maps. Their existence is guaranteed by the acyclicity of the cell-complex.
Reference: [15] <author> B. Chazelle, R. Cole, F. P. Preparata, and C. K. Yap. </author> <title> New upper bounds for neighbor searching. </title> <journal> Inform. Control, </journal> <volume> 68 </volume> <pages> 105-124, </pages> <year> 1986. </year>
Reference-contexts: The space and preprocessing time of Theorems 7-8 and the query time of Theorem 8 can be improved while preserving the same degree bounds by more complicated procedures along the lines suggested in <ref> [1, 2, 15] </ref>. 5 Proximity Queries for Point Sites in 3D Space In this section, we consider the following proximity query on a set S of point sites in three dimensional (3D) space: nearest neighbor search: given query point q, find a site of S whose Euclidean distance from q is
Reference: [16] <author> B. Chazelle and H. Edelsbrunner. </author> <title> An improved algorithm for constructing kth-order Voronoi diagrams. </title> <journal> IEEE Trans. Comput., </journal> <volume> C-36:1349-1354, </volume> <year> 1987. </year>
Reference-contexts: As shown in <ref> [43, 16] </ref>, V k (S) can be computed in O (k (nk) p time. Since the construction is based on iteratively computing Voronoi diagrams by using the incircle test, which is the most expensive operation in terms of degree, the overall degree of the preprocessing is 4 (Lemma 5).
Reference: [17] <author> B. Chazelle and L. J. Guibas. Fractional cascading: I. </author> <title> A data structuring technique. </title> <journal> Algorith-mica, </journal> <volume> 1 </volume> <pages> 133-162, </pages> <year> 1986. </year>
Reference-contexts: Hence, the chain method is ordinary for general maps. In the bridged chain method [25], the technique of fractional cascading <ref> [17, 18] </ref> is applied to the sets of y-coordinates of the separators. Fractional cascading establishes "bridges" between the separator of a node and the separators of its children such that there are O (1) vertices between any two consecutive bridges.
Reference: [18] <author> B. Chazelle and L. J. Guibas. </author> <title> Fractional cascading: II. </title> <journal> Applications. Algorithmica, </journal> <volume> 1 </volume> <pages> 163-191, </pages> <year> 1986. </year>
Reference-contexts: Hence, the chain method is ordinary for general maps. In the bridged chain method [25], the technique of fractional cascading <ref> [17, 18] </ref> is applied to the sets of y-coordinates of the separators. Fractional cascading establishes "bridges" between the separator of a node and the separators of its children such that there are O (1) vertices between any two consecutive bridges.
Reference: [19] <author> K. L. Clarkson. </author> <title> Safe and effective determinant evaluation. </title> <booktitle> In Proc. 33rd Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 387-395, </pages> <year> 1992. </year>
Reference: [20] <author> T. K. Dey, K. Sugihara, and C. L. Bajaj. </author> <title> Delaunay triangulations in three dimensions with finite precision arithmetic. </title> <journal> Comput. Aided Geom. Design, </journal> <volume> 9 </volume> <pages> 457-470, </pages> <year> 1992. </year>
Reference-contexts: this paper, we consider as a test case a problem area, geometric proximity, which plays a major role in several applications and has recently attracted considerable attention because, due to its demands of high precision for exact computation, it is particularly appropriate in assessing effectiveness of robust approaches (see, e.g., <ref> [9, 11, 20, 29, 31, 27, 55, 32] </ref>). In particular we shall illustrate the role played by the degree criterion if one wishes to comply with the standard exact-computation paradigm.
Reference: [21] <author> D. P. </author> <title> Dobkin. </title> <journal> Computational geometry and computer graphics. Proc. IEEE, </journal> <volume> 80(9) </volume> <pages> 1400-1411, </pages> <month> Sept. </month> <year> 1992. </year>
Reference: [22] <author> D. P. Dobkin and D. G. Kirkpatrick. </author> <title> Fast detection of polyhedral intersection. </title> <journal> Theoret. Comput. Sci., </journal> <volume> 27 </volume> <pages> 241-253, </pages> <year> 1983. </year>
Reference-contexts: However, we shall show that the latter method fails to achieve optimal degree because the search is based on predicates requiring 4b bits of precision; moreover, the high overhead of the search technique (which uses the hierarchical polytope representation <ref> [22] </ref>) casts some doubts on the practicality of the method. The main results of this work are summarized in Table 1. Considering, for the time being, the degree as a measure of complexity, we show that previous methods exhibit a sharp tradeoff between degree and query time. <p> Projecting s 0 down onto the xy-plane gives the nearest neighbor s of q in S. The extremal-search method makes use of 3D geometric primitives that guide the search through a data structure embodying the Dobkin-Kirkpatrick hierarchical representation <ref> [22] </ref> of the convex hull of S 0 .
Reference: [23] <author> D. P. Dobkin and M. J. Laszlo. </author> <title> Primitives for the manipulation of three-dimensional subdivisions. </title> <journal> Algorithmica, </journal> <volume> 4 </volume> <pages> 3-32, </pages> <year> 1989. </year>
Reference-contexts: Namely V fl (S) stores the topological structure of the 3D Voronoi diagram V (S) of S (e.g., the data structure of <ref> [23] </ref>) and the following geometric information for each vertex and facet: * For each vertex v of V (S), V fl (S) stores the semi-integer (b + 1)-bit approximations x fl (v), y fl (v) and z fl (v) of the x-, y-, and z-coordinates of v. * For each facet <p> Namely V fl (S) stores the topological structure of the extended Voronoi diagram V 0 (S) of S (e.g., the data structure of <ref> [23] </ref>) and the following geometric information for each vertex and edge: 25 * For each vertex v of V 0 (S), V fl (S) stores the semi-integer (b + 1)-bit approximations x fl (v) and y fl (v) of the x- and y-coordinates of v. * For each non-horizontal edge e
Reference: [24] <author> M. Edahiro, I. Kokubo, and T. Asano. </author> <title> A new point-location algorithm and its practical efficiency: comparison with existing algorithms. </title> <journal> ACM Trans. Graph., </journal> <volume> 3 </volume> <pages> 86-109, </pages> <year> 1984. </year>
Reference-contexts: Planar Point Location The chain method [44], the bridged chain method [25], the trapezoid method [50], the subdivision refinement method [42], and the persistent search tree method [53] are popular deterministic techniques for point location in a planar map that combine theoretical efficiency with good performance in practice (see, e.g., <ref> [24, 51] </ref>). Namely, denoting with n the size of the map, all the above point location methods O (n log n) preprocessing time. The 9 query time is O (log 2 n) for the chain method and O (log n) for the other methods.
Reference: [25] <author> H. Edelsbrunner, L. J. Guibas, and J. Stolfi. </author> <title> Optimal point location in a monotone subdivision. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 317-340, </pages> <year> 1986. </year>
Reference-contexts: In Sections 4.3-4.4, we describe our new implicit representation of Voronoi diagrams for point sites in the plane, which allows us to perform proximity queries with optimal degree 2. 4.1 Test Primitives and Methods for Planar Point Location The chain method [44], the bridged chain method <ref> [25] </ref>, the trapezoid method [50], the subdivision refinement method [42], and the persistent search tree method [53] are popular deterministic techniques for point location in a planar map that combine theoretical efficiency with good performance in practice (see, e.g., [24, 51]). <p> For a map M that is not monotone, fictitious "regularization" edges are added to M and point location in M is reduced to point location in the resulting refinement M 0 of M . Hence, the chain method is ordinary for general maps. In the bridged chain method <ref> [25] </ref>, the technique of fractional cascading [17, 18] is applied to the sets of y-coordinates of the separators. Fractional cascading establishes "bridges" between the separator of a node and the separators of its children such that there are O (1) vertices between any two consecutive bridges.
Reference: [26] <author> H. Edelsbrunner and H. A. Maurer. </author> <title> Finding extreme points in three dimensions and solving the post-office problem in the plane. </title> <journal> Inform. Process. Lett., </journal> <volume> 21 </volume> <pages> 39-47, </pages> <year> 1985. </year>
Reference-contexts: It must be pointed out that distance comparisons have already been used nontrivially for proximity search (extremal-search method <ref> [26] </ref>). However, we shall show that the latter method fails to achieve optimal degree because the search is based on predicates requiring 4b bits of precision; moreover, the high overhead of the search technique (which uses the hierarchical polytope representation [22]) casts some doubts on the practicality of the method. <p> It is well known that such queries are efficiently solved by performing point location in the Voronoi diagram (possibly of higher order) V (S) of the sites [51]. For nearest neighbor search, the alternative extremal-search method <ref> [26] </ref> also exists. We begin by examining in Section 4.1 the geometric test primitives used by the theoretically optimal and practically efficient point location methods. <p> For example, if k = 32, the points that can be treated with single-precision arithmetic belong to a grid of size at most 64 fi 64. The extremal-search method <ref> [26] </ref>, also designed for proximity queries, reduces the nearest neighbor search problem for a set S of 2D point sites to the following extremal search problem.
Reference: [27] <author> H. Edelsbrunner and E. P. Mucke. </author> <title> Simulation of simplicity: a technique to cope with degenerate cases in geometric algorithms. </title> <journal> ACM Trans. Graph., </journal> <volume> 9 </volume> <pages> 66-104, </pages> <year> 1990. </year>
Reference-contexts: this paper, we consider as a test case a problem area, geometric proximity, which plays a major role in several applications and has recently attracted considerable attention because, due to its demands of high precision for exact computation, it is particularly appropriate in assessing effectiveness of robust approaches (see, e.g., <ref> [9, 11, 20, 29, 31, 27, 55, 32] </ref>). In particular we shall illustrate the role played by the degree criterion if one wishes to comply with the standard exact-computation paradigm.
Reference: [28] <author> S. Fortune. </author> <title> Stable maintenance of point set triangulations in two dimensions. </title> <booktitle> In Proc. 30th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 494-505, </pages> <year> 1989. </year>
Reference: [29] <author> S. Fortune. </author> <title> Numerical stability of algorithms for 2-d Delaunay triangulations. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 5(1) </volume> <pages> 193-213, </pages> <year> 1995. </year>
Reference-contexts: this paper, we consider as a test case a problem area, geometric proximity, which plays a major role in several applications and has recently attracted considerable attention because, due to its demands of high precision for exact computation, it is particularly appropriate in assessing effectiveness of robust approaches (see, e.g., <ref> [9, 11, 20, 29, 31, 27, 55, 32] </ref>). In particular we shall illustrate the role played by the degree criterion if one wishes to comply with the standard exact-computation paradigm. <p> This involves the use of "arithmetic filters," possibly families of filters, of progressively increasing power that, depending upon the values of primitive variables, carefully adjust the computational effort (see, e.g., <ref> [4, 11, 29, 41] </ref>). Next, one should carefully analyze the precision adopted in executing constructions, so that the outputs are within the precision bounds required by the application.
Reference: [30] <author> S. Fortune. </author> <title> Polyhedral modeling with multiprecision integer arithmetic. </title> <booktitle> Computer Aided Design, </booktitle> <year> 1996. </year> <note> to appear. </note>
Reference: [31] <author> S. Fortune and C. J. Van Wyk. </author> <title> Efficient exact arithmetic for computational geometry. </title> <booktitle> In Proc. 9th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 163-172, </pages> <year> 1993. </year>
Reference-contexts: this paper, we consider as a test case a problem area, geometric proximity, which plays a major role in several applications and has recently attracted considerable attention because, due to its demands of high precision for exact computation, it is particularly appropriate in assessing effectiveness of robust approaches (see, e.g., <ref> [9, 11, 20, 29, 31, 27, 55, 32] </ref>). In particular we shall illustrate the role played by the degree criterion if one wishes to comply with the standard exact-computation paradigm.
Reference: [32] <author> S. Fortune and C. V. Wyk. </author> <title> Static analysis yields efficient exact integer arithmetic for computational geometry. </title> <journal> ACM Transactions on Graphics, </journal> <note> 1996. to appear. </note>
Reference-contexts: this paper, we consider as a test case a problem area, geometric proximity, which plays a major role in several applications and has recently attracted considerable attention because, due to its demands of high precision for exact computation, it is particularly appropriate in assessing effectiveness of robust approaches (see, e.g., <ref> [9, 11, 20, 29, 31, 27, 55, 32] </ref>). In particular we shall illustrate the role played by the degree criterion if one wishes to comply with the standard exact-computation paradigm.
Reference: [33] <author> S. J. Fortune. </author> <title> A sweepline algorithm for Voronoi diagrams. </title> <journal> Algorithmica, </journal> <volume> 2 </volume> <pages> 153-174, </pages> <year> 1987. </year>
Reference-contexts: The incircle test is a basic operation for many algorithms that construct the Voronoi diagram of the sites (see, e.g. <ref> [37, 41, 33, 3] </ref>). The degree of the incircle test has been extensively studied by Burnikel [9] and by Burnikel, Mehlhorn and Schirra [11].
Reference: [34] <author> D. H. Greene and F. F. Yao. </author> <title> Finite-resolution computational geometry. </title> <booktitle> In Proc. 27th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 143-152, </pages> <year> 1986. </year>
Reference: [35] <author> L. J. Guibas, D. E. Knuth, and M. Sharir. </author> <title> Randomized incremental construction of Delaunay and Voronoi diagrams. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 381-413, </pages> <year> 1992. </year>
Reference-contexts: The space used is O (n log n) for the trapezoid method and O (n) for the other methods. For monotone maps, the preprocessing time is O (n) for the chain method and the bridged chain method, and O (n log n) for the other methods. The randomized-incremental method <ref> [35] </ref> also exists. Such method is specialized for point location in Voronoi diagrams, uses expected space O (n), and has expected query time O (log 2 n).
Reference: [36] <author> L. J. Guibas, D. Salesin, and J. Stolfi. </author> <title> Epsilon geometry: building robust algorithms from imprecise computations. </title> <booktitle> In Proc. 5th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 208-217, </pages> <year> 1989. </year>
Reference: [37] <author> L. J. Guibas and J. Stolfi. </author> <title> Primitives for the manipulation of general subdivisions and the computation of Voronoi diagrams. </title> <journal> ACM Trans. Graph., </journal> <volume> 4 </volume> <pages> 74-123, </pages> <year> 1985. </year> <month> 32 </month>
Reference-contexts: The incircle test is a basic operation for many algorithms that construct the Voronoi diagram of the sites (see, e.g. <ref> [37, 41, 33, 3] </ref>). The degree of the incircle test has been extensively studied by Burnikel [9] and by Burnikel, Mehlhorn and Schirra [11]. <p> The topological 13 component of V fl (S) is the planar embedding of V (S), represented by a suitable data struc-ture (e.g., doubly-connected edge lists [51] or the data structure of <ref> [37] </ref>). <p> In order to compute the implicit Voronoi diagram V fl (S), we begin by constructing the Delaunay triangulation of S, denoted DT (S), by means of the O (n log n)-time algorithm of <ref> [37] </ref>, which has degree 4 because its most expensive operation in terms of the degree is the incircle test (see Lemma 5). The topological structure of V (S) and the sites `(e) and r (e) for each edge e of V (S) are immediately derived from DT (S) by duality.
Reference: [38] <author> C. M. Hoffmann. </author> <title> The problems of accuracy and robustness in geometric computation. </title> <journal> IEEE Computer, </journal> <volume> 22(3) </volume> <pages> 31-41, </pages> <month> Mar. </month> <year> 1989. </year>
Reference-contexts: For an early survey of the different approaches to robust computational geometry the reader is referred to <ref> [38] </ref>. To a first, rough, approximation, robustness approaches are of two main types: perturbing and nonperturbing.
Reference: [39] <author> C. M. Hoffmann, J. E. Hopcroft, and M. T. Karasick. </author> <title> Robust set operations on polyhedral solids. </title> <journal> IEEE Comput. Graph. Appl., </journal> <volume> 9(6) </volume> <pages> 50-59, </pages> <month> Nov. </month> <year> 1989. </year>
Reference: [40] <author> B. Joe. </author> <title> Construction of three-dimensional Delaunay triangulations using local transformations. </title> <journal> Comput. Aided Geom. Design, </journal> <volume> 8(2) </volume> <pages> 123-142, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Hence, using the separating surfaces method on the implicit 3D Voronoi diagram yields the following result: The implicit Voronoi diagram V fl (S) of a set S of n points in 3D space can be constructed by computing the 3D Delaunay triangulation with the incremental algorithm by Joe <ref> [40] </ref>, whose time complexity and storage is O (n 2 ) (see also [49]). Since the most demanding operation of the algorithm in terms of degree is the 3D insphere test, from Lemma 6 we 21 have that the degree of the algorithm that computes V (S) is 5.
Reference: [41] <author> M. Karasick, D. Lieber, and L. R. Nackman. </author> <title> Efficient Delaunay triangulations using rational arithmetic. </title> <journal> ACM Trans. Graph., </journal> <volume> 10 </volume> <pages> 71-91, </pages> <year> 1991. </year>
Reference-contexts: Theoretical analysis and experimental results show that multiprecision numerical computations take up most of the CPU time of exact geometric algorithms (see, e.g., <ref> [41, 49] </ref>). Thus, we believe that, in defining the efficiency of a geometric algorithm, the degree should be considered as important as the asymptotic time complexity and should correspondingly play a major role in the design stage. <p> The incircle test is a basic operation for many algorithms that construct the Voronoi diagram of the sites (see, e.g. <ref> [37, 41, 33, 3] </ref>). The degree of the incircle test has been extensively studied by Burnikel [9] and by Burnikel, Mehlhorn and Schirra [11]. <p> This involves the use of "arithmetic filters," possibly families of filters, of progressively increasing power that, depending upon the values of primitive variables, carefully adjust the computational effort (see, e.g., <ref> [4, 11, 29, 41] </ref>). Next, one should carefully analyze the precision adopted in executing constructions, so that the outputs are within the precision bounds required by the application.
Reference: [42] <author> D. G. Kirkpatrick. </author> <title> Optimal search in planar subdivisions. </title> <journal> SIAM J. Comput., </journal> <volume> 12 </volume> <pages> 28-35, </pages> <year> 1983. </year>
Reference-contexts: our new implicit representation of Voronoi diagrams for point sites in the plane, which allows us to perform proximity queries with optimal degree 2. 4.1 Test Primitives and Methods for Planar Point Location The chain method [44], the bridged chain method [25], the trapezoid method [50], the subdivision refinement method <ref> [42] </ref>, and the persistent search tree method [53] are popular deterministic techniques for point location in a planar map that combine theoretical efficiency with good performance in practice (see, e.g., [24, 51]).
Reference: [43] <author> D. T. Lee. </author> <title> On k-nearest neighbor Voronoi diagrams in the plane. </title> <journal> IEEE Trans. Comput., </journal> <volume> C-31:478-487, </volume> <year> 1982. </year>
Reference-contexts: n point sites has O (k (n k)) vertices, edges, and faces, and can be obtained from the order k 1 implicit Voronoi diagram V k1 (S) by intersecting each face of V k1 (S) with the (order 1) Voronoi diagram of a suitable subset of the vertices of S <ref> [43] </ref>. As shown in [43, 16], V k (S) can be computed in O (k (nk) p time. <p> As shown in <ref> [43, 16] </ref>, V k (S) can be computed in O (k (nk) p time. Since the construction is based on iteratively computing Voronoi diagrams by using the incircle test, which is the most expensive operation in terms of degree, the overall degree of the preprocessing is 4 (Lemma 5).
Reference: [44] <author> D. T. Lee and F. P. Preparata. </author> <title> Location of a point in a planar subdivision and its applications. </title> <journal> SIAM J. Comput., </journal> <volume> 6 </volume> <pages> 594-606, </pages> <year> 1977. </year>
Reference-contexts: In Sections 4.3-4.4, we describe our new implicit representation of Voronoi diagrams for point sites in the plane, which allows us to perform proximity queries with optimal degree 2. 4.1 Test Primitives and Methods for Planar Point Location The chain method <ref> [44] </ref>, the bridged chain method [25], the trapezoid method [50], the subdivision refinement method [42], and the persistent search tree method [53] are popular deterministic techniques for point location in a planar map that combine theoretical efficiency with good performance in practice (see, e.g., [24, 51]). <p> Now, we analyze the chain method <ref> [44] </ref> for point location in a monotone map M . A binary tree represents a balanced recursive decomposition of map M by means of vertically monotone polygonal chains covering the edges of M , called separators. <p> based on "implicit" 3D Voronoi diagrams is then given in Section 5.3. 5.1 Test Primitives and Methods for Spatial Point Location There are only two known efficient spatial point location methods for cell-complexes that are applicable to 3D Voronoi diagrams: the separating surfaces method [14, 56], which extends the chain-method <ref> [44] </ref>, and the persistent planar location method [52], which extends the persistent search tree method [53]. Let N be the number of facets of a cell-complex C. The query time is O (log 2 N ) for both methods.
Reference: [45] <author> G. Liotta, F. P. Preparata, and R. Tamassia. </author> <title> Robust proximity queries in implicit Voronoi diagrams. </title> <type> Technical Report CS-96-16, </type> <institution> Center for Geometric Computing, Comput. Sci. Dept., Brown Univ., Providence, RI, </institution> <year> 1996. </year>
Reference-contexts: First, the methodological framework described in Section 2 should be extended to the computation of the degree of other classes of geometric primitives. Recently, motivated in part by a preliminary version of this paper <ref> [45] </ref>, Burnikel et al. [13] have presented a new separation bound for arithmetic expressions involving square roots.
Reference: [46] <author> K. Mehlhorn and S. Naher. LEDA: </author> <title> a platform for combinatorial and geometric computing. </title> <journal> Commun. ACM, </journal> <volume> 38 </volume> <pages> 96-102, </pages> <year> 1995. </year>
Reference-contexts: Next, we compute the approximations x fl (v) and y fl (v) for each vertex v of V (S) by means of integer division. For effective procedures that perform the integer division, see, e.g., LEDA <ref> [46] </ref>. Let a, b, and c be the three sites of S that define vertex v.
Reference: [47] <author> K. Mehlhorn, S. Naher, T. Schilz, S. Schirra, M. Seel, R. Seidel, and C. Uhrig. </author> <title> Checking geometric programs or verification of geometric structures. </title> <booktitle> In Proc. 12th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 159-165, </pages> <year> 1996. </year>
Reference-contexts: only checks for topological compliance of the output with the generic member of its class (as, e.g., a Voronoi diagram must have the topology of a convex map) as illustrated in [54], but more specifically verifies its topological agreement with the structure emerging from the tests executed by the algorithm <ref> [47] </ref>.
Reference: [48] <author> V. Milenkovic. </author> <title> Verifiable implementations of geometric algorithms using finite precision arithmetic. </title> <journal> Artif. Intell., </journal> <volume> 37 </volume> <pages> 377-401, </pages> <year> 1988. </year>
Reference: [49] <author> E. Mucke. Detri 2.2: </author> <title> A robust implementation for 3d triangulations. </title> <type> Manuscript, </type> <note> available at URL: http://www.geom.umn.edu:80/software/cglist/lowdvod.html, 1996. </note>
Reference-contexts: Theoretical analysis and experimental results show that multiprecision numerical computations take up most of the CPU time of exact geometric algorithms (see, e.g., <ref> [41, 49] </ref>). Thus, we believe that, in defining the efficiency of a geometric algorithm, the degree should be considered as important as the asymptotic time complexity and should correspondingly play a major role in the design stage. <p> diagram yields the following result: The implicit Voronoi diagram V fl (S) of a set S of n points in 3D space can be constructed by computing the 3D Delaunay triangulation with the incremental algorithm by Joe [40], whose time complexity and storage is O (n 2 ) (see also <ref> [49] </ref>). Since the most demanding operation of the algorithm in terms of degree is the 3D insphere test, from Lemma 6 we 21 have that the degree of the algorithm that computes V (S) is 5.
Reference: [50] <author> F. P. Preparata. </author> <title> A new approach to planar point location. </title> <journal> SIAM J. Comput., </journal> <volume> 10 </volume> <pages> 473-482, </pages> <year> 1981. </year>
Reference-contexts: In Sections 4.3-4.4, we describe our new implicit representation of Voronoi diagrams for point sites in the plane, which allows us to perform proximity queries with optimal degree 2. 4.1 Test Primitives and Methods for Planar Point Location The chain method [44], the bridged chain method [25], the trapezoid method <ref> [50] </ref>, the subdivision refinement method [42], and the persistent search tree method [53] are popular deterministic techniques for point location in a planar map that combine theoretical efficiency with good performance in practice (see, e.g., [24, 51]).
Reference: [51] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: It is well known that such queries are efficiently solved by performing point location in the Voronoi diagram (possibly of higher order) V (S) of the sites <ref> [51] </ref>. For nearest neighbor search, the alternative extremal-search method [26] also exists. We begin by examining in Section 4.1 the geometric test primitives used by the theoretically optimal and practically efficient point location methods. <p> Planar Point Location The chain method [44], the bridged chain method [25], the trapezoid method [50], the subdivision refinement method [42], and the persistent search tree method [53] are popular deterministic techniques for point location in a planar map that combine theoretical efficiency with good performance in practice (see, e.g., <ref> [24, 51] </ref>). Namely, denoting with n the size of the map, all the above point location methods O (n log n) preprocessing time. The 9 query time is O (log 2 n) for the chain method and O (log n) for the other methods. <p> The topological 13 component of V fl (S) is the planar embedding of V (S), represented by a suitable data struc-ture (e.g., doubly-connected edge lists <ref> [51] </ref> or the data structure of [37]). <p> As for the other queries studied in the previous sections, such query is efficiently solved by performing point location in the Voronoi diagram of the set of point and segment sites <ref> [51] </ref>. The test primitives needed by such approach are described in Section 6.1. Section 6.2 shows that the "conventional" approach requires degree 64.
Reference: [52] <author> F. P. Preparata and R. Tamassia. </author> <title> Efficient point location in a convex spatial cell-complex. </title> <journal> SIAM J. Comput., </journal> <volume> 21 </volume> <pages> 267-280, </pages> <year> 1992. </year>
Reference-contexts: then given in Section 5.3. 5.1 Test Primitives and Methods for Spatial Point Location There are only two known efficient spatial point location methods for cell-complexes that are applicable to 3D Voronoi diagrams: the separating surfaces method [14, 56], which extends the chain-method [44], and the persistent planar location method <ref> [52] </ref>, which extends the persistent search tree method [53]. Let N be the number of facets of a cell-complex C. The query time is O (log 2 N ) for both methods.
Reference: [53] <author> N. Sarnak and R. E. Tarjan. </author> <title> Planar point location using persistent search trees. </title> <journal> Commun. ACM, </journal> <volume> 29 </volume> <pages> 669-679, </pages> <year> 1986. </year>
Reference-contexts: for point sites in the plane, which allows us to perform proximity queries with optimal degree 2. 4.1 Test Primitives and Methods for Planar Point Location The chain method [44], the bridged chain method [25], the trapezoid method [50], the subdivision refinement method [42], and the persistent search tree method <ref> [53] </ref> are popular deterministic techniques for point location in a planar map that combine theoretical efficiency with good performance in practice (see, e.g., [24, 51]). Namely, denoting with n the size of the map, all the above point location methods O (n log n) preprocessing time. <p> and Methods for Spatial Point Location There are only two known efficient spatial point location methods for cell-complexes that are applicable to 3D Voronoi diagrams: the separating surfaces method [14, 56], which extends the chain-method [44], and the persistent planar location method [52], which extends the persistent search tree method <ref> [53] </ref>. Let N be the number of facets of a cell-complex C. The query time is O (log 2 N ) for both methods. The space used is O (N ) for the separating 17 surfaces method and O (N log 2 N ) for the persistent planar location method.
Reference: [54] <author> K. Sugihara and M. Iri. </author> <title> Construction of the Voronoi diagram for `one million' generators in single-precision arithmetic. </title> <journal> Proc. IEEE, </journal> <volume> 80(9) </volume> <pages> 1471-1484, </pages> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: In addition, each construction algorithm should be accompanied by a verification algorithm, which not only checks for topological compliance of the output with the generic member of its class (as, e.g., a Voronoi diagram must have the topology of a convex map) as illustrated in <ref> [54] </ref>, but more specifically verifies its topological agreement with the structure emerging from the tests executed by the algorithm [47].
Reference: [55] <author> K. Sugihara, Y. Ooishi, and T. Imai. </author> <title> Topology-oriented approach to robustness and its applications to several Voronoi-diagram algorithms. </title> <booktitle> In Proc. 2nd Canad. Conf. Comput. Geom., </booktitle> <pages> pages 36-39, </pages> <year> 1990. </year>
Reference-contexts: this paper, we consider as a test case a problem area, geometric proximity, which plays a major role in several applications and has recently attracted considerable attention because, due to its demands of high precision for exact computation, it is particularly appropriate in assessing effectiveness of robust approaches (see, e.g., <ref> [9, 11, 20, 29, 31, 27, 55, 32] </ref>). In particular we shall illustrate the role played by the degree criterion if one wishes to comply with the standard exact-computation paradigm.
Reference: [56] <author> R. Tamassia and J. S. Vitter. </author> <title> Optimal cooperative search in fractional cascaded data structures. </title> <journal> Algorithmica, </journal> <volume> 15(2), </volume> <year> 1996. </year> <month> 33 </month>
Reference-contexts: A degree 3 algorithm based on "implicit" 3D Voronoi diagrams is then given in Section 5.3. 5.1 Test Primitives and Methods for Spatial Point Location There are only two known efficient spatial point location methods for cell-complexes that are applicable to 3D Voronoi diagrams: the separating surfaces method <ref> [14, 56] </ref>, which extends the chain-method [44], and the persistent planar location method [52], which extends the persistent search tree method [53]. Let N be the number of facets of a cell-complex C. The query time is O (log 2 N ) for both methods. <p> Test primitives above-below (q; v) and left-right (q; v) are used only in degenerate cases (e.g. in the presence of facets parallel to the z-axis and in cases where e xy is horizontal). Now, we analyze the separating surfaces method for spatial point location <ref> [14, 56] </ref> in acyclic cell-complexes. Separating surfaces are the 3D analogue of separators of monotone maps. Their existence is guaranteed by the acyclicity of the cell-complex.
Reference: [57] <author> C. K. Yap. </author> <title> Symbolic treatment of geometric degeneracies. </title> <journal> J. Symbolic Comput., </journal> <volume> 10 </volume> <pages> 349-370, </pages> <year> 1990. </year>
Reference-contexts: Remark 1 Recently, Burnikel [9] has independently defined the notion of precision of an algorithm, which is equivalent to our notion of degree of an algorithm. Also, our definition of degree is related to that of depth of derivation proposed by Yap <ref> [57, 58] </ref>. Given a set of numbers, any number x of the set has depth 0.
Reference: [58] <author> C. K. Yap. </author> <title> Toward exact geometric computation. Computational Geometry: </title> <journal> Theory and Applications, </journal> <note> 1996. to appear. 34 </note>
Reference-contexts: In this category falls the exact-geometric computation paradigm independently advocated by Yap <ref> [58] </ref> and by the Saarbrucken school [10], and so does our approach. Within this paradigm, we introduce the notion of degree of an algorithm, which describes, up to a small additive constant, the arithmetic precision (i.e., number of bits) needed by the exact computation paradigm. <p> Remark 1 Recently, Burnikel [9] has independently defined the notion of precision of an algorithm, which is equivalent to our notion of degree of an algorithm. Also, our definition of degree is related to that of depth of derivation proposed by Yap <ref> [57, 58] </ref>. Given a set of numbers, any number x of the set has depth 0. <p> The extended Voronoi diagram V 0 (S) of S is said to be explicit if the coordinates of the vertices of V 0 (S) are computed and stored with exact arithmetic, i.e., as algebraic numbers <ref> [10, 58] </ref>.
References-found: 58

