URL: http://www.dcs.ex.ac.uk/~colin/papers/wp.ps
Refering-URL: http://www.dcs.ex.ac.uk/~colin/pages/research.html
Root-URL: http://www.dcs.ex.ac.uk
Email: email colinj@maths.napier.ac.uk, dmarsh@maths.napier.ac.uk  
Phone: Telephone +44 131 455 4631 Fax +44 131 455 4232  
Title: Modelling Robot Manipulators in a CAD Environment Using B-Splines  
Author: Colin G. Johnson and Duncan Marsh. 
Address: 219 Colinton Road, Edinburgh, EH14 1DJ, Scotland, UK  
Affiliation: Department of Mathematics, Napier University,  
Abstract: A major aim of robotics research is the provision of systems which simplify the programming of robots, enabling experienced designers and engineers to implement robotic devices as part of a larger systems without the need to become expert programmers. Also in the quest for a flexible industrial production system is it desirable to be able to reprogram robots offline, so that they can be doing one task whilst being prepared for another. This paper describes the mathematical and computational background to a system which enables the development and testing of robot programs in a CAD environment in a way that is simple to use and compatible with existing methods used in CAD systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Alison, M. Gilmartin, and P. Urwin. </author> <title> Strategic collision avoidance of two robot arms in the same work cell. </title> <editor> In A. Lenarcic and B.B.Ravani, editors, </editor> <booktitle> Advances in Robot Kinematics and Computational Geometry, </booktitle> <pages> pages 467476. </pages> <publisher> Kluwer, </publisher> <year> 1994. </year>
Reference-contexts: Many variants on this problem have been studied, including the motion of multiple robots <ref> [1, 35] </ref> and the motion of a robot amidst moving obstacles [2, 12]. Several approaches to these path-planning problems have been studied. The first work in this area approached the problems from the point of view of computational geometrytrying to calculate the computational complexity of the problems. <p> We have recently been studying the problem of collision detection using these methods. It is possible to obtain a NURBS volume corresponding to the space swept out by using functional composition (the mathematics behind this is described in [22, 7]). Basically we take a continuous NURBS function M : <ref> [0; 1] </ref> ! C (6) describing a path in configuration space, i.e. a continuous motion of the robot parameterized by time. Then we can form the composition ffi (M fi I) : [0; 1] fi R ! R 3 (7) (I is the identity map) which describes the motion of a <p> Basically we take a continuous NURBS function M : <ref> [0; 1] </ref> ! C (6) describing a path in configuration space, i.e. a continuous motion of the robot parameterized by time. Then we can form the composition ffi (M fi I) : [0; 1] fi R ! R 3 (7) (I is the identity map) which describes the motion of a given point on the robot (r 2 R) through time.
Reference: [2] <author> S. Cameron. </author> <title> Using space-time for collision detection : solving the general case. </title> <booktitle> In Warwick [39], </booktitle> <pages> pages 403415. </pages>
Reference-contexts: Many variants on this problem have been studied, including the motion of multiple robots [1, 35] and the motion of a robot amidst moving obstacles <ref> [2, 12] </ref>. Several approaches to these path-planning problems have been studied. The first work in this area approached the problems from the point of view of computational geometrytrying to calculate the computational complexity of the problems. <p> The other problem is collision detectiongiven a movement of the robot, testing whether it is able to move freely through its environment (which could include other robots or moving objects) <ref> [2] </ref>. The review papers [18, 32, 34] summarize different aspects of work on the path-planning and collision detection problems, ranging from the abstract mathematical problems suggested by this area to real-world implementations of systems designed to tackle these problems in real-world environments. 2.2. Ideas from computer graphics and geometry. <p> The natural mathematical framework for studying these moving obstacles is to extrude the moving obstacles into a four-dimensional space-time <ref> [2, 4] </ref> and study the intersections there. Figure 7 illustrates this idea by extruding two-dimensional objects into three-dimensional space-time. The framework of generalized NURBS described above in section 3.2, together with the algorithms of NURBS-skinning and extrusion [36, 30] provide a powerful set of tools for tackling these hard problems.
Reference: [3] <author> M. S. Casale. </author> <title> Free-form solid modeling with trimmed surface patches. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 3343, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: Below this shall be used in the implementation of divide-and-conquer strategies. Subdivision can also be seen to be numerically stablebasically the algorithms for subdivision are just repeated linear interpolation (see [9] for more detail). Another idea which is used in the work below is trimmed NURBS <ref> [3, 33] </ref>. These arise from the problem in design where it is desired to cut away part of a surface, for example in producing a cut-away graphic or designing a small patch to fit part of a design.
Reference: [4] <author> H. H. Cheng. </author> <title> Real-time four-dimensional collsion detection for an industrial robot manipulator. </title> <booktitle> In Proceedings of the 3rd National Conference on Applied Mechanisms and Robotics (Cincinatti, Ohio), </booktitle> <volume> volume 1, </volume> <pages> pages 113, </pages> <year> 1993. </year>
Reference-contexts: The natural mathematical framework for studying these moving obstacles is to extrude the moving obstacles into a four-dimensional space-time <ref> [2, 4] </ref> and study the intersections there. Figure 7 illustrates this idea by extruding two-dimensional objects into three-dimensional space-time. The framework of generalized NURBS described above in section 3.2, together with the algorithms of NURBS-skinning and extrusion [36, 30] provide a powerful set of tools for tackling these hard problems.
Reference: [5] <author> S. Chiaverini and C. Vicinanza. </author> <title> Reachable workspace computation for planar revolute jointed arms. </title> <booktitle> In Warwick [39], </booktitle> <pages> pages 93105. </pages>
Reference-contexts: In order to test the unity of our model we are also studying two simpler problems. The first of these is the problem of mapping the end-effector space of a manipulatorthat is creating a visual representation of the regions of space where the robot is able to access <ref> [5, 11] </ref> and calculating the connectivity of this space [40]. The other problem is collision detectiongiven a movement of the robot, testing whether it is able to move freely through its environment (which could include other robots or moving objects) [2].
Reference: [6] <author> J. Craig. </author> <title> Introduction to Robotics. </title> <publisher> Addison-Wesley, </publisher> <address> second edition, </address> <year> 1989. </year>
Reference-contexts: of programming robots in a what you see is what you get style environment has become an important strand of development, using CAD models of the robot and its environment to enable the motions of the robot to be tested in a simulated environment before it is used in practice <ref> [8, 6] </ref>. However current systems use object representations which are good for representing static objects, yet which can only represent moving objects approximately, or by using a different representation from the static objects.
Reference: [7] <author> T. D. DeRose, R. N. Goodman, H. Haken, and S. Mann. </author> <title> Functional composition algorithms via blossoming. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 12(2):113135, </volume> <month> April </month> <year> 1993. </year>
Reference-contexts: We have recently been studying the problem of collision detection using these methods. It is possible to obtain a NURBS volume corresponding to the space swept out by using functional composition (the mathematics behind this is described in <ref> [22, 7] </ref>). Basically we take a continuous NURBS function M : [0; 1] ! C (6) describing a path in configuration space, i.e. a continuous motion of the robot parameterized by time.
Reference: [8] <editor> Editorial. </editor> <booktitle> IEEE Robotics and Automation Magazine, </booktitle> <volume> 1(1), </volume> <month> March </month> <year> 1994. </year> <title> front cover picture and associated comment, work from Sandia National Laboratories. </title>
Reference-contexts: of programming robots in a what you see is what you get style environment has become an important strand of development, using CAD models of the robot and its environment to enable the motions of the robot to be tested in a simulated environment before it is used in practice <ref> [8, 6] </ref>. However current systems use object representations which are good for representing static objects, yet which can only represent moving objects approximately, or by using a different representation from the static objects.
Reference: [9] <author> G. Farin. </author> <title> Curves and Surfaces for Computer Aided Geometric Design. </title> <publisher> Academic Press, </publisher> <address> third edition, </address> <year> 1993. </year>
Reference-contexts: Our work has been concerned with using ideas from computer-aided geometric design to study mechanisms and robot manipulators. We have been using non-uniform rational B-splines (NURBS), a standard method of representing curves and surfaces in computer graphics, as a standard representation <ref> [31, 9] </ref>. Recent work [37, 20, 19] has shown that not only can static objects and swept volumes be given this representation, but that the motions themselves can be represented as NURBS with control points in the group of Euclidean motions SE (3). 2. Related work. <p> Details of both the history of this and the mathematics can be found in <ref> [9] </ref>. The basic idea of all of these forms is simple. A function of an appropriate number of parameters (i.e. one for a curve, two for a surface et cetera) is created which depends on a set of point in space called the control polygon of the curve/surface. <p> I shall give a brief account of B-spline theory heremore detail can be found in the books <ref> [9, 17, 31] </ref>. 3.1. Mathematics of B-spline curves. <p> By changing these weights the shape of the curve can be modified [29]. Mathematically the weights can be thought of as the fourth coordinate in a homogeneous coordinate system, defining the projection of a 4-dimensional non-rational space curve into 3-dimensional space <ref> [9] </ref>. The N i;p (t) are the B-spline rational basis functions, defined recursively by N i;0 (t) = 1 if t i t &lt; t i+1 and t i &lt; t i+1 0 otherwise (2) polygon. <p> Below this shall be used in the implementation of divide-and-conquer strategies. Subdivision can also be seen to be numerically stablebasically the algorithms for subdivision are just repeated linear interpolation (see <ref> [9] </ref> for more detail). Another idea which is used in the work below is trimmed NURBS [3, 33]. <p> This allows us to represent for example volumes [23] and motions in SE (3) [20]. This representation has a number of computational advantages. Firstly it is possible to represent the obstacles as NURBS, and efficient intersection algorithms exist for finding the intersection of two NURBS-structures <ref> [9] </ref>. Secondly, there exists a natural subdivision of NURBS structures, which does not exist for, say, polygons, which allows effective use to be made of divide-and-conquer strategies.
Reference: [10] <author> R. T. Farouki and J. K. Hinds. </author> <title> A hierarchy of geometric forms. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 5178, </pages> <month> May </month> <year> 1985. </year>
Reference-contexts: Indeed this small set of basic algorithms could be implemented in hardware, as has proven successful in the development of computer-graphics workstations. The power of such a unified system has been advocated strongly in the solid-modelling community, for example this paragraph by Farouki and Hinds <ref> [10] </ref> Since the unified approach (to geometric modeling) guarantees the functional equivalence of all geometric entities of a given type, geometric operations can be performed with equal facility on simple primitives and complex sculptured geometries.
Reference: [11] <author> R. Featherstone. </author> <title> A hierarchical representation of the space occupancy of a robot mechanism. </title> <editor> In J.-P. Merlet and B. Ra-vani, editors, </editor> <title> Computational Kinematics (INRIA, September 1995). </title> <publisher> Kluwer, </publisher> <year> 1995. </year>
Reference-contexts: In order to test the unity of our model we are also studying two simpler problems. The first of these is the problem of mapping the end-effector space of a manipulatorthat is creating a visual representation of the regions of space where the robot is able to access <ref> [5, 11] </ref> and calculating the connectivity of this space [40]. The other problem is collision detectiongiven a movement of the robot, testing whether it is able to move freely through its environment (which could include other robots or moving objects) [2].
Reference: [12] <author> K. Fujimura and H. Samet. </author> <title> A hierarchical strategy for path-planning among moving obstacles. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 5(1), </volume> <month> February </month> <year> 1989. </year>
Reference-contexts: Many variants on this problem have been studied, including the motion of multiple robots [1, 35] and the motion of a robot amidst moving obstacles <ref> [2, 12] </ref>. Several approaches to these path-planning problems have been studied. The first work in this area approached the problems from the point of view of computational geometrytrying to calculate the computational complexity of the problems.
Reference: [13] <author> C. Gibson and D. Marsh. </author> <title> Concerning cranks and rockers. Mechanism and Machine Theory, </title> <address> 23(5):355360, </address> <year> 1988. </year>
Reference-contexts: Similar constructions can be used for as many links as is desired, producing a hierarchy of spaces representing the occupancy space of each link of the manipulator. This principle of building up kinematic functions and configuration spaces of a complicated mechanism has been called mechanism inheritance <ref> [13, 14, 15] </ref>, and has proven a powerful tool in the study of closed-chain mechanisms. We can use these ideas of building up spaces in this way to give a NURBS structure to most of the functions illustrated in figure 2. 4.2. Interaction with obstacles. <p> This could incorporate both the ideas above and other recent work on the theory of mechanisms with closed-loops <ref> [13, 14, 15] </ref>. Finally there are a number of ways in which the computational aspects of the project could be enhanced. We are currently studying different data structures to hold the information about which patches are free and which blocked.
Reference: [14] <author> C. Gibson and D. Marsh. </author> <title> On the linkage varieties of the Watt 6-bar mechanisms. Mechanism and Machine Theory, </title> <address> 24(2):106126, </address> <year> 1989. </year>
Reference-contexts: Similar constructions can be used for as many links as is desired, producing a hierarchy of spaces representing the occupancy space of each link of the manipulator. This principle of building up kinematic functions and configuration spaces of a complicated mechanism has been called mechanism inheritance <ref> [13, 14, 15] </ref>, and has proven a powerful tool in the study of closed-chain mechanisms. We can use these ideas of building up spaces in this way to give a NURBS structure to most of the functions illustrated in figure 2. 4.2. Interaction with obstacles. <p> This could incorporate both the ideas above and other recent work on the theory of mechanisms with closed-loops <ref> [13, 14, 15] </ref>. Finally there are a number of ways in which the computational aspects of the project could be enhanced. We are currently studying different data structures to hold the information about which patches are free and which blocked.
Reference: [15] <author> C. Gibson and D. Marsh. </author> <title> On the geometry of geared 5-bar motion. </title> <journal> Journal of Mechanical Design, </journal> <volume> 112(4):620627, </volume> <year> 1990. </year>
Reference-contexts: Similar constructions can be used for as many links as is desired, producing a hierarchy of spaces representing the occupancy space of each link of the manipulator. This principle of building up kinematic functions and configuration spaces of a complicated mechanism has been called mechanism inheritance <ref> [13, 14, 15] </ref>, and has proven a powerful tool in the study of closed-chain mechanisms. We can use these ideas of building up spaces in this way to give a NURBS structure to most of the functions illustrated in figure 2. 4.2. Interaction with obstacles. <p> This could incorporate both the ideas above and other recent work on the theory of mechanisms with closed-loops <ref> [13, 14, 15] </ref>. Finally there are a number of ways in which the computational aspects of the project could be enhanced. We are currently studying different data structures to hold the information about which patches are free and which blocked.
Reference: [16] <author> J. Hopcroft, J. Schwartz, and M. Sharir, </author> <title> editors. Planning, Geometry and Complexity of Robot Motion. </title> <publisher> Ablex, </publisher> <address> Nor-wood, N.J., </address> <year> 1987. </year>
Reference-contexts: The first work in this area approached the problems from the point of view of computational geometrytrying to calculate the computational complexity of the problems. Though much progress was made in this area (the important papers are collected in the book <ref> [16] </ref>) this work produced little in the way of practical solutions. Two basic ideas have come to dominate work in this area since. The first is studying configuration spaces of mechanisms [27, 25].
Reference: [17] <author> J. Hoschek and D. </author> <title> Lasser. Fundamentals of Computer Aided Geometric Design. A.K. </title> <publisher> Peters, </publisher> <year> 1989. </year>
Reference-contexts: I shall give a brief account of B-spline theory heremore detail can be found in the books <ref> [9, 17, 31] </ref>. 3.1. Mathematics of B-spline curves.
Reference: [18] <author> Y. Hwang and N. Ahuja. </author> <title> Gross motion planninga survey. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(3):219291, </volume> <year> 1992. </year>
Reference-contexts: The other problem is collision detectiongiven a movement of the robot, testing whether it is able to move freely through its environment (which could include other robots or moving objects) [2]. The review papers <ref> [18, 32, 34] </ref> summarize different aspects of work on the path-planning and collision detection problems, ranging from the abstract mathematical problems suggested by this area to real-world implementations of systems designed to tackle these problems in real-world environments. 2.2. Ideas from computer graphics and geometry.
Reference: [19] <author> B. Juttler. </author> <title> Spatial rational motions, </title> <month> March </month> <year> 1996. </year> <note> Seminar, University of Dundee. </note>
Reference-contexts: Our work has been concerned with using ideas from computer-aided geometric design to study mechanisms and robot manipulators. We have been using non-uniform rational B-splines (NURBS), a standard method of representing curves and surfaces in computer graphics, as a standard representation [31, 9]. Recent work <ref> [37, 20, 19] </ref> has shown that not only can static objects and swept volumes be given this representation, but that the motions themselves can be represented as NURBS with control points in the group of Euclidean motions SE (3). 2. Related work.
Reference: [20] <author> B. Juttler and M. G. Wagner. </author> <title> Computer-aided design with spatial rational B-spline motions. </title> <type> Technical report, </type> <institution> University of Dundee / University of California, Davis, </institution> <month> December </month> <year> 1995. </year> <note> To appear in ASME Journal of Mechanical Design. </note>
Reference-contexts: Our work has been concerned with using ideas from computer-aided geometric design to study mechanisms and robot manipulators. We have been using non-uniform rational B-splines (NURBS), a standard method of representing curves and surfaces in computer graphics, as a standard representation [31, 9]. Recent work <ref> [37, 20, 19] </ref> has shown that not only can static objects and swept volumes be given this representation, but that the motions themselves can be represented as NURBS with control points in the group of Euclidean motions SE (3). 2. Related work. <p> This allows us to represent for example volumes [23] and motions in SE (3) <ref> [20] </ref>. This representation has a number of computational advantages. Firstly it is possible to represent the obstacles as NURBS, and efficient intersection algorithms exist for finding the intersection of two NURBS-structures [9].
Reference: [21] <author> O. Khatib. </author> <title> Real-time obstacle avoidance for manipulators and mobile robots. </title> <journal> International Journal of Robotics Research, </journal> <volume> 5(1):9098, </volume> <year> 1986. </year>
Reference-contexts: Another approach to the path-planning problem is the use of artificial potential fields, whereby the obstacles (either in the physical space or in a configuration space) are given a high positive potential, and the target a high negative potential <ref> [21] </ref>. Mathematical techniques for finding a potential-minimizing path are then used, which lead the robot from a start point to the target potential well.
Reference: [22] <author> D. </author> <title> Lasser. Composition of tensor product Bezier representations. </title> <booktitle> Computing Supplementum, </booktitle> <address> 8:155172, </address> <year> 1993. </year>
Reference-contexts: We have recently been studying the problem of collision detection using these methods. It is possible to obtain a NURBS volume corresponding to the space swept out by using functional composition (the mathematics behind this is described in <ref> [22, 7] </ref>). Basically we take a continuous NURBS function M : [0; 1] ! C (6) describing a path in configuration space, i.e. a continuous motion of the robot parameterized by time.
Reference: [23] <author> D. </author> <title> Lasser. Rational tensor product Bezier volumes. Computers and Mathematics with Applications, </title> <address> 28(8):4962, </address> <year> 1994. </year>
Reference-contexts: For this we will need to generalize the concept of a NURBS function. In this more general setting we shall define NURBS as usual but with two generalizations. Firstly we shall allow any number of parameter variables, using a tensor-product scheme similar to NURBS surfaces and volumes <ref> [23] </ref>. Secondly we will allow the control points to be in any vector space, not just the usual Euclidean two or three dimensional space. Then we can, for example, define a motion of a rigid body in space as a NURBS curve in SE (3). <p> We can represent all of the above as generalized NURBSgeneralized in the sense that there can be any number of parameters, not just curves and surfaces, and that the control points are not necessarily points in space. This allows us to represent for example volumes <ref> [23] </ref> and motions in SE (3) [20]. This representation has a number of computational advantages. Firstly it is possible to represent the obstacles as NURBS, and efficient intersection algorithms exist for finding the intersection of two NURBS-structures [9].
Reference: [24] <author> S. Lavallee and P. Szeliski. </author> <title> Recovering the position and orientation of free-form objects from image contours using 3D distance maps. </title> <journal> IEEE Transactions of Pattern Analysis and Machine Intelligence, </journal> <volume> 17(4):378390, </volume> <year> 1995. </year>
Reference-contexts: This could be at various levels. It would be a relatively simple task to incorporate responses to basic range finding and on/off sensors. At the other end of the scale the use of NURBS for visual image reconstruction <ref> [38, 24] </ref> offers a realm of possibility for using vision as part of the feedback process. One area which we have only begun to explore is the possibility of using these techniques to analyse the motion of robots in an environment which has other moving components.
Reference: [25] <author> T. Lozano-Perez. </author> <title> Automatic planning of manipulator transfer movements. </title> <journal> IEEE transactions on systems, man and cybernetics, </journal> <volume> SMC-11:681698, </volume> <month> October </month> <year> 1981. </year>
Reference-contexts: The canonical path-planning problem is thisgiven a description of the shape of a robot and constraints on how it is able to move, to design a motion of the robot which moves it from one point to another, possibly incorporating parts of a predefined trajectory on the way <ref> [25] </ref>. Many variants on this problem have been studied, including the motion of multiple robots [1, 35] and the motion of a robot amidst moving obstacles [2, 12]. Several approaches to these path-planning problems have been studied. <p> Though much progress was made in this area (the important papers are collected in the book [16]) this work produced little in the way of practical solutions. Two basic ideas have come to dominate work in this area since. The first is studying configuration spaces of mechanisms <ref> [27, 25] </ref>. The configuration space is a set which maps onto the set of all possible positions of the manipulatorin the case of robot arm manipulators the joint space (the space of all possible positions that the joints of the robot can take) is the most common configuration space studied.
Reference: [26] <author> T. Lozano-Perez. </author> <title> A simple motion-planning algorithm for general robotic manipulators. </title> <journal> IEEE Journal on Robotics and Automation, </journal> <volume> RA-3(3):224238, </volume> <year> 1987. </year>
Reference-contexts: These few algorithms could then be implemented very efficiently and rigorously tested, rather than many special case algorithms having to be written as is often the case in robotics (for example the various kinds of contact described in the appendix to <ref> [26] </ref>). Indeed this small set of basic algorithms could be implemented in hardware, as has proven successful in the development of computer-graphics workstations.
Reference: [27] <author> T. Lozano-Perez and M. Wesley. </author> <title> An algorithm for plannign collision-free paths among polyhedral obstacles. </title> <journal> Communications of the ACM, </journal> <volume> 22:560570, </volume> <month> October </month> <year> 1979. </year>
Reference-contexts: Though much progress was made in this area (the important papers are collected in the book [16]) this work produced little in the way of practical solutions. Two basic ideas have come to dominate work in this area since. The first is studying configuration spaces of mechanisms <ref> [27, 25] </ref>. The configuration space is a set which maps onto the set of all possible positions of the manipulatorin the case of robot arm manipulators the joint space (the space of all possible positions that the joints of the robot can take) is the most common configuration space studied.
Reference: [28] <author> Q. Peng. </author> <title> An algorithm for finding the intersection lines between two B-spline circles. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 16(4), </volume> <month> July </month> <year> 1984. </year>
Reference-contexts: A simple strategy for this works as follows. We construct the function in NURBS form as above. We can then subdivide the image of using the standard subdivision algorithms, and test these subdivided patches for interference with , using a simple bounding-box check <ref> [28] </ref>. Then if the patches do interfere with the obstacle we can subdivide them further, until we have reached the desired level of accuracy. The results can be stored in a quadtree-like data structure 5we are currently investigating other more efficient data structures to hold the information. <p> Then we can form the composition ffi (M fi I) : [0; 1] fi R ! R 3 (7) (I is the identity map) which describes the motion of a given point on the robot (r 2 R) through time. Then we can again use standard bounding-box intersection techniques <ref> [28] </ref> to test for intersection between the image of the motion of the manipulator and the set of obstacles.
Reference: [29] <author> L. Piegl. </author> <title> Modifying the shape of rational B-splines. part 1 : curves. </title> <booktitle> Computer Aided Design, </booktitle> <address> 21(8):509518, </address> <year> 1989. </year>
Reference-contexts: By changing these weights the shape of the curve can be modified <ref> [29] </ref>. Mathematically the weights can be thought of as the fourth coordinate in a homogeneous coordinate system, defining the projection of a 4-dimensional non-rational space curve into 3-dimensional space [9].
Reference: [30] <author> L. Piegl and W. Tiller. </author> <title> Curve and surface constructions using rational B-splines. </title> <booktitle> Computer Aided Design, </booktitle> <address> 19(7):485498, </address> <year> 1987. </year>
Reference-contexts: Figure 7 illustrates this idea by extruding two-dimensional objects into three-dimensional space-time. The framework of generalized NURBS described above in section 3.2, together with the algorithms of NURBS-skinning and extrusion <ref> [36, 30] </ref> provide a powerful set of tools for tackling these hard problems. The final aspect of moving obstacles is that a robot can move obstacles itself, by use of a gripper or similar.
Reference: [31] <author> L. Piegl and W. Tiller. </author> <title> The N U RBS Book. </title> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Our work has been concerned with using ideas from computer-aided geometric design to study mechanisms and robot manipulators. We have been using non-uniform rational B-splines (NURBS), a standard method of representing curves and surfaces in computer graphics, as a standard representation <ref> [31, 9] </ref>. Recent work [37, 20, 19] has shown that not only can static objects and swept volumes be given this representation, but that the motions themselves can be represented as NURBS with control points in the group of Euclidean motions SE (3). 2. Related work. <p> I shall give a brief account of B-spline theory heremore detail can be found in the books <ref> [9, 17, 31] </ref>. 3.1. Mathematics of B-spline curves.
Reference: [32] <author> J. Schwartz and M. Sharir. </author> <title> A survey of motion planning and related geometric algorithms. </title> <journal> Artificial Intelligence, </journal> <volume> 37:157169, </volume> <year> 1988. </year>
Reference-contexts: The other problem is collision detectiongiven a movement of the robot, testing whether it is able to move freely through its environment (which could include other robots or moving objects) [2]. The review papers <ref> [18, 32, 34] </ref> summarize different aspects of work on the path-planning and collision detection problems, ranging from the abstract mathematical problems suggested by this area to real-world implementations of systems designed to tackle these problems in real-world environments. 2.2. Ideas from computer graphics and geometry.
Reference: [33] <author> M. Shantz and S.-L. Chang. </author> <title> Rendering trimmed NURBS with adaptive forward differencing. </title> <journal> Computer Graphics, </journal> <volume> 22(4):189198, </volume> <month> August </month> <year> 1988. </year>
Reference-contexts: Below this shall be used in the implementation of divide-and-conquer strategies. Subdivision can also be seen to be numerically stablebasically the algorithms for subdivision are just repeated linear interpolation (see [9] for more detail). Another idea which is used in the work below is trimmed NURBS <ref> [3, 33] </ref>. These arise from the problem in design where it is desired to cut away part of a surface, for example in producing a cut-away graphic or designing a small patch to fit part of a design. <p> We can use the method described above in section 4.2 to calculate the areas of C trimmed away by the obstacles, and then use a trimmed-surface visualization algorithm such as the one described in <ref> [33] </ref> to obtain the image. This is a valuable tool for deciding where to place a robot in a given environment so that it can reach a set of desired regions. We have recently been studying the problem of collision detection using these methods.
Reference: [34] <author> M. Sharir. </author> <title> Algorithmic motion planning in robotics. </title> <booktitle> Computer, </booktitle> <address> 22:920, </address> <month> March </month> <year> 1989. </year>
Reference-contexts: The other problem is collision detectiongiven a movement of the robot, testing whether it is able to move freely through its environment (which could include other robots or moving objects) [2]. The review papers <ref> [18, 32, 34] </ref> summarize different aspects of work on the path-planning and collision detection problems, ranging from the abstract mathematical problems suggested by this area to real-world implementations of systems designed to tackle these problems in real-world environments. 2.2. Ideas from computer graphics and geometry.
Reference: [35] <author> Y. Shin and Z. </author> <title> Bien. Collision-free trajectory planning for two robot arms. Robotica, </title> <address> 7:205212, </address> <year> 1989. </year>
Reference-contexts: Many variants on this problem have been studied, including the motion of multiple robots <ref> [1, 35] </ref> and the motion of a robot amidst moving obstacles [2, 12]. Several approaches to these path-planning problems have been studied. The first work in this area approached the problems from the point of view of computational geometrytrying to calculate the computational complexity of the problems.
Reference: [36] <author> W. Tiller. </author> <title> Rational B-splines for curve and surface resp-resentation. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 6169, </pages> <month> September </month> <year> 1983. </year>
Reference-contexts: Figure 7 illustrates this idea by extruding two-dimensional objects into three-dimensional space-time. The framework of generalized NURBS described above in section 3.2, together with the algorithms of NURBS-skinning and extrusion <ref> [36, 30] </ref> provide a powerful set of tools for tackling these hard problems. The final aspect of moving obstacles is that a robot can move obstacles itself, by use of a gripper or similar.
Reference: [37] <author> M. G. Wagner. </author> <title> Planar rational B-spline motions. </title> <booktitle> Computer-Aided Design, </booktitle> <address> 27(2):129137, </address> <month> February </month> <year> 1995. </year>
Reference-contexts: Our work has been concerned with using ideas from computer-aided geometric design to study mechanisms and robot manipulators. We have been using non-uniform rational B-splines (NURBS), a standard method of representing curves and surfaces in computer graphics, as a standard representation [31, 9]. Recent work <ref> [37, 20, 19] </ref> has shown that not only can static objects and swept volumes be given this representation, but that the motions themselves can be represented as NURBS with control points in the group of Euclidean motions SE (3). 2. Related work.
Reference: [38] <author> Y. Wang and J. Wang. </author> <title> On 3D model construction by fusing heterogeneous sensor data. </title> <booktitle> CVGIP-Image Understanding, </booktitle> <address> 60(2):210229, </address> <year> 1994. </year>
Reference-contexts: This could be at various levels. It would be a relatively simple task to incorporate responses to basic range finding and on/off sensors. At the other end of the scale the use of NURBS for visual image reconstruction <ref> [38, 24] </ref> offers a realm of possibility for using vision as part of the feedback process. One area which we have only begun to explore is the possibility of using these techniques to analyse the motion of robots in an environment which has other moving components.
Reference: [39] <author> K. Warwick, </author> <title> editor. </title> <journal> Robotics, Applied Mathematics and Computational Aspects. </journal> <volume> Clarendon/IMA, </volume> <year> 1993. </year>
Reference: [40] <author> P. Wenger and P. Chedmail. </author> <title> Ability of a robot to travel through its free work space in an environment with obstacles. </title> <journal> International Journal of Robotics Research, </journal> <volume> 10(3):214227, </volume> <booktitle> 1991. From the Proceedings of the IEEE International Joint Symposia on Intelligence and Systems, </booktitle> <address> Washington DC, </address> <month> November </month> <year> 1996. </year> <note> c fl1996 IEEE. </note>
Reference-contexts: The first of these is the problem of mapping the end-effector space of a manipulatorthat is creating a visual representation of the regions of space where the robot is able to access [5, 11] and calculating the connectivity of this space <ref> [40] </ref>. The other problem is collision detectiongiven a movement of the robot, testing whether it is able to move freely through its environment (which could include other robots or moving objects) [2].
References-found: 40

