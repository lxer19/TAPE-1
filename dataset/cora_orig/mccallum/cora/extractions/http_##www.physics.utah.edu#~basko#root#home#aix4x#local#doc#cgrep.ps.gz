URL: http://www.physics.utah.edu/~basko/root/home/aix4x/local/doc/cgrep.ps.gz
Refering-URL: http://www.physics.utah.edu/~basko/root/home/aix4x/local/doc/
Root-URL: 
Email: fclaclark,gvcormacg@plg.uwaterloo.ca  
Title: Context grep  
Author: Charles L. A. Clarke Gordon V. Cormack 
Web: ftp://plg.uwaterloo.ca/pub/mt/cgrep  
Note: The current release of the search tool is available at  A detailed man page for the program is included as part of the distribution.  
Date: November 30, 1996  
Address: Waterloo, Waterloo, Ontario N2L 3G1, Canada  
Affiliation: Department of Computer Science University of  
Pubnum: Technical Report CS-96-41  
Abstract: The Unix grep utility searches a text file for a pattern defined by a regular expression and prints the lines containing the pattern. Unfortunately, a line of text is not always the appropriate unit for search and retrieval. Our solution is to treat a newline as an ordinary character and to allow pattern matching across the entire file. Several issues must be addressed to make this free text searching useful. In particular, the standard approach of taking the "leftmost longest match" tends to select inappropriately large fragments of the text. Instead we follow the principle of always taking the shortest match and allow these matches to overlap but not nest. The resulting tool is novel, expressive and simple. Matches can be reported across lines and multiple matches can be reported within a line. Appropriate structure may be imposed by using a regular expression to define a search universe. Elements may then be selected from this universe by matching with a second regular expression. 
Abstract-found: 1
Intro-found: 1
Reference: [2] <author> Charles L. A. Clarke and Gordon V. Cormack. </author> <title> On the use of regular expressions for searching text. </title> <type> Technical Report CS-95-07, </type> <institution> University of Waterloo Computer Science Department, </institution> <month> February </month> <year> 1995. </year>
Reference: [3] <author> Charles L. A. Clarke and Gordon V. Cormack. </author> <title> On the use of regular expression for searching text. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <note> 1997. To appear. An earlier version of the paper was distributed as a technical report [2]. </note>
Reference-contexts: The structural regular expressions provided in the text editor sam allow the use of regular expressions under a "left-most longest match" rule to divide a file into records for searching [7, 8]. In a related paper <ref> [3] </ref> we argue that the utility of a regular expression search program is significantly increased if it is based on an approach that may be summarized by the following three rules: 1. Don't divide the input text into lines (or other records). 2. <p> Similar problems occur with Examples 3 and 4. It can be shown that it is always possible to explicitly re-write a regular expression to accept only shortest matches <ref> [3, Theorem 5] </ref>. This is quite easy in some cases, such as the second example, where the pattern ^[^"n]*United [[:space:]]+States [^"n]*$ is sufficient. The escape sequence ""n" matches the newline character. Example 3 requires more work.
Reference: [4] <author> Charles L. A. Clarke, Gordon V. Cormack, and Forbes J. Burkowski. </author> <title> An algebra for structured text search and a framework for its implementation. </title> <journal> The Computer Journal, </journal> <volume> 38(1) </volume> <pages> 43-56, </pages> <year> 1995. </year>
Reference-contexts: The approach is motivated by our experience with structured text databases <ref> [1, 4] </ref>. We have termed the combination of the shortest-match rule and the overlap rule shortest substring matching. The approach has been used as the basis for a search tool, cgrep, that has proved to be of significant value for a variety applications. <p> The input sources described as "US Constitution" and "Exodus" are electronic texts from Project Gutenburg [9]. The L a T E X source is that of reference <ref> [4] </ref>. The source to nethack supplied an example of C source code with lots of oddly structured comments. The HTML source is a collection of local users' World-Wide-Web home pages. The personal email was received by the author over several 7 months.
Reference: [5] <author> Donna Harman. </author> <booktitle> Overview of the first TREC conference. In Proceedings of the 16th Annual International ACM SIGIR Conference, </booktitle> <pages> pages 36-47, </pages> <address> Pittsburgh, PA, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: The tool has been used to assist in sorting, organizing and indexing structured documents from the TREC collection <ref> [5] </ref>. Other applications have included the extraction of World-Wide-Web hypertext links (URL's) from NetNews articles, searching files of machine code in binary format, searching comments in source code files, and counting actual occurrences of patterns in files (as opposed to lines containing the patterns).
Reference: [6] <author> Institute of Electrical and Electronics Engineers. </author> <title> Standard for Information Technology | Portable Operating System Interface (POSIX) | Part 2 (Shell and Utilities) | Section 2.8 (Regular Expression Notation), </title> <month> September </month> <year> 1992. </year> <note> IEEE Std 1003.2. </note>
Reference-contexts: As a group, these examples are intended to demonstrate the utility of cgrep and the necessity of both the shortest-match rule and the overlap rule. The regular expression syntax of cgrep is based on that of POSIX 1003.2 extended regular expressions <ref> [6] </ref>. This regular expression syntax is based in turn on that of egrep. In addition, cgrep provides macros, an intersection operator, and several other useful extensions. In particular, the characters "&lt;" and "&gt;" may be used to match the beginning and end of file respectively. <p> In this example and in previous examples the shortest substring matching guarantees that the patterns represented the beginning and end of a match are properly associated with one another. Under a longest-match rule, which is standard for regular expression search <ref> [6] </ref>, the command of Example 2 would report a single match for any text containing the name of the country. The match would cover the entire file, starting at the beginning of the first line and continuing to the end of the last line.
Reference: [7] <author> Rob Pike. </author> <title> Structural regular expressions. </title> <booktitle> Proceedings of the European UNIX User's Group Conference, </booktitle> <year> 1987. </year>
Reference-contexts: The agrep search program allows the user to define record delimiters for searching [10]. The structural regular expressions provided in the text editor sam allow the use of regular expressions under a "left-most longest match" rule to divide a file into records for searching <ref> [7, 8] </ref>. In a related paper [3] we argue that the utility of a regular expression search program is significantly increased if it is based on an approach that may be summarized by the following three rules: 1. Don't divide the input text into lines (or other records). 2.
Reference: [8] <author> Rob Pike. </author> <title> The text editor sam. </title> <journal> Software | Practice and Experience, </journal> <volume> 17(11) </volume> <pages> 813-845, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: The agrep search program allows the user to define record delimiters for searching [10]. The structural regular expressions provided in the text editor sam allow the use of regular expressions under a "left-most longest match" rule to divide a file into records for searching <ref> [7, 8] </ref>. In a related paper [3] we argue that the utility of a regular expression search program is significantly increased if it is based on an approach that may be summarized by the following three rules: 1. Don't divide the input text into lines (or other records). 2.
Reference: [9] <author> Project Gutenburg. ftp://mrcnext.cso.uiuc.edu/. </author> <month> 9 </month>
Reference-contexts: The input sources described as "US Constitution" and "Exodus" are electronic texts from Project Gutenburg <ref> [9] </ref>. The L a T E X source is that of reference [4]. The source to nethack supplied an example of C source code with lots of oddly structured comments. The HTML source is a collection of local users' World-Wide-Web home pages.
Reference: [10] <author> Sun Wu and Udi Manber. </author> <title> agrep |- A fast approximate pattern-matching tool. </title> <booktitle> In USENIX Winter 1992 Technical Conference, </booktitle> <pages> pages 153-162, </pages> <address> San Francisco, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: Patterns must be contained on a single line, and only lines containing or not containing the pattern may be selected for retrieval. Several attempts have been made to loosen the restrictions. The agrep search program allows the user to define record delimiters for searching <ref> [10] </ref>. The structural regular expressions provided in the text editor sam allow the use of regular expressions under a "left-most longest match" rule to divide a file into records for searching [7, 8].
References-found: 9

