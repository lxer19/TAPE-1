URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1993/1993-18.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A PROBABILISTIC APPROACH TO MOTION PLANNING FOR CAR-LIKE ROBOTS 1  
Author: Petr Svestka 
Note: 1 This research was partially supported by the ESPRIT III BRA Project 6546 (PRO Motion) and by the Dutch Organisation for Scientific Research (N.W.O.).  
Date: April 22, 1996  
Pubnum: INF/SCR-93-11  
Abstract-found: 0
Intro-found: 1
Reference: [Gie93] <author> G.-J. Giezeman. </author> <title> PlaGeo | a library for planar geometry. </title> <type> Technical report, </type> <institution> Department of Computer Science, Utrecht University, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: A concern could be the large number of obstacles, which may cause high computation times for intersection tests (of the robot with the obstacles). The intersection routines used in our implementation though are very efficient in discarding obstacles which are far away from the robot (see <ref> [Gie93] </ref>), and (consequently) we never had problems related to the complexity of the scene. 4. In contrast to the previous scene, scene 4 looks quite easy (and for humans also is easy), but is relatively hard to solve for our motion planner.
Reference: [Lat91] <author> J.-C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: I.e. the robot gets to a configuration m where the (weighed) sum over all the potentials is equal to the null-vector. For a more thorough treatment of the above approaches see <ref> [Lat91] </ref>. Very recently a new approach for the motion planning problem for free flying solid robots was presented in [Ove92]. We will refer to it as the random 5 motion planning approach. <p> In fact, for free flying robots the number of unconnected nodes normally remains very low. For this reason problem (3) has not been addressed in [Ove92]. Here we should also mention the notion of robot controllability (see chapter 4 in <ref> [Lat91] </ref>). Assuming that the free configuration space is connected, a robot which is fully controllable will in theory always be able to maneuver its way out from any (difficult) configuration, in contrast to a robot which is not fully controllable. <p> In section 7.1 car-like robots together with paths which respect their non-holonomic constraints will formally be defined. See also chapter 9 in <ref> [Lat91] </ref> for a thorough treatment of this topic. In section 7.2 some useful paths constructs will be defined and discussed, which will later be used as 'primitive building blocks' by the local methods, for the construction of feasible paths. Two types of car-like robots will then be dealt with. <p> a set of obstacles, a feasible path for a car-like robot A from a configuration s to a configuration g exists, then there also exists a feasible path for A from s to g which is a finite sequence of subpaths corresponding to circular motions with minimal turning radii (see <ref> [Lat91] </ref>). So we could even do without the straight paths, but we will include them in order to reduce the length of the paths computed by the local methods, and, hence, reduce the total length of the paths computed by our motion planner.
Reference: [Mas92] <author> P. Mastwijk. </author> <title> Motion planning using potential fields. </title> <type> Technical report, </type> <institution> Department of Computer Science, Utrecht University, </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: Fortunately, for free-flying robots a large number of experiments where performed concerning the use of different kinds of potential field methods as local methods in the random motion planner (See <ref> [Mas92] </ref>). These experiments clearly indicated that potential field methods using very primitive potential fields lead to a much better performance of the global method than such which use complex potential fields, and, hence, cause the validations of configurations in the potential field to be relatively expensive. <p> When plugged into the global method, either the directed or the undirected version, depending on the robot type, this results in a (fast) motion planner for the given robot type. Experimental results in this paper, and in <ref> [Mas92] </ref> (concerning free flying planar robots), indicate that very primitive local methods achieve very good results. Hence, it should normally be no problem to find a good local method for some given robot type. Another useful property of the random motion planner is that it uses a learning approach.
Reference: [Ove92] <author> M.H. Overmars. </author> <title> A random approach to motion planning. </title> <type> Technical Report RUU-CS-92-32, </type> <institution> Department of Computer Science, Utrecht University, </institution> <month> October </month> <year> 1992. </year> <month> 93 </month>
Reference-contexts: For a more thorough treatment of the above approaches see [Lat91]. Very recently a new approach for the motion planning problem for free flying solid robots was presented in <ref> [Ove92] </ref>. We will refer to it as the random 5 motion planning approach. The idea is that a network of highways is built up, by repeatedly generating random via-points and trying to connect these to other (earlier added) via-points by some simple motion planning algorithm. <p> So it can be regarded as a learning strategy, which improves its performance in a particular scene with every search that it performs. As described in <ref> [Ove92] </ref>, the method solves the motion planning problem for free flying robots, moving in a planar environment. In this paper we use the concepts of the random motion planning method for solving the motion planning problem for planar robots which have certain nonholonomic constraints. <p> The motivation for this is, that the global method is easier and more efficient to implement when based on an undirected graph, and for many motion planning problems it is sufficient. For example the method in <ref> [Ove92] </ref>, for free flying planar robots, uses an undirected underlying graph. As indicated in the previous chapter, an (directed) edge (a; b) corresponds to the statement that the local method can compute a feasible path from a to b. Now suppose that the underlying graph is undirected. <p> For the case where a directed underlying graph is used, an analog argument holds. A number of approaches for dealing with the sketched problems will be discussed. (1) and (2) have already been addressed to in <ref> [Ove92] </ref>, and in sections 5.2 and 5.3 we will discuss the solutions proposed in that paper. <p> It should be noted that the constants in both the above methods are a bit arbitrary and that they could probably be tuned to more optimal values. As mentioned before, the adaptive node adding strategy was already proposed in <ref> [Ove92] </ref>, and it was included in the corresponding implementation of the random motion planner for free flying planar robots. For these robots the strategy clearly brings some improvement (for testing results see again [Ove92]). <p> As mentioned before, the adaptive node adding strategy was already proposed in <ref> [Ove92] </ref>, and it was included in the corresponding implementation of the random motion planner for free flying planar robots. For these robots the strategy clearly brings some improvement (for testing results see again [Ove92]). For car-like robots though the performance of the adaptive node adding strategy seems to be somewhat disappointing. <p> In fact, for free flying robots the number of unconnected nodes normally remains very low. For this reason problem (3) has not been addressed in <ref> [Ove92] </ref>. Here we should also mention the notion of robot controllability (see chapter 4 in [Lat91]).
References-found: 4

