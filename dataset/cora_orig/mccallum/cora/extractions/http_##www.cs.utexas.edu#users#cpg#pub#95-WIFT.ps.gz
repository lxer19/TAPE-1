URL: http://www.cs.utexas.edu/users/cpg/pub/95-WIFT.ps.gz
Refering-URL: http://www.cs.utexas.edu/users/cpg/pub/index.html
Root-URL: http://www.cs.utexas.edu
Email: lalita@research.att.com  cpg@cs.utexas.edu  jevon@uscbu.att.com  
Title: A Formal Approach to Reactive Systems Software: A Telecommunications Application in ESTEREL Industrial-Strength Formal Specification
Author: Lalita Jategaonkar Jagadeesan Carlos Puchol James E. Von Olnhausen 
Address: IL 60566 (USA)  Austin, TX 78712 (USA)  IL 60566 (USA)  
Affiliation: Software Production Research Department AT&T Bell Laboratories Naperville,  Department of Computer Sciences The University of Texas at Austin  Global Maintenance Operations Platform Department AT&T Bell Laboratories Naperville,  
Note: (To appear in the Proceedings of the Workshop on  
Abstract: ESTEREL is a formally-defined language designed for programming reactive systems; namely, those that maintain a permanent interaction with their environment. The AT&T 5ESS R fl telephone switching system is an example of a legacy reactive system. As a case study, we describe an implementation in ESTEREL of one feature of a 5ESS switch; this implementation has been tested in the 5ESS switch simulator. Furthermore, it has been formally verified that this implementation satisfies some safety properties required for telecommunications applications. Our case study provides some evidence that ESTEREL is suitable for programming legacy reactive systems, and that it may afford significant advantages in software development over more traditional programming languages used in industrial settings. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> AGEL workshop manual version 3.0, </institution> <year> 1989. </year> <note> Produced by ILOG. </note>
Reference-contexts: Whenever the door is opened regardless of whether the oven is on a light comes on until the door is closed. The corresponding finite state machine with four states is illustrated in Figure 2. This picture was generated using the AGEL <ref> [1] </ref> development environment for ESTEREL; all labels on transitions have been removed for the sake of clarity. <p> These interface functions must also be called by the state machine. This execution model is depicted in Figure 3. Furthermore, in the current AGEL <ref> [1] </ref> development environment for ESTEREL, the driver, the output functions, and the interface functions currently must be written in C, and the state machine, the reaction function, and the input functions generated by the ESTEREL compiler are coded in C. <p> We note that values of arbitrary types can be used in ESTEREL programs; only the type names must be declared in ESTEREL programs, while the type definitions must appear in the accompanying C code. The AGEL <ref> [1] </ref> development environment for ESTEREL provides high-quality tools, including an editor, compiler, simulator, debugger, and verifier. The verifier provides a graphical representation of the generated state machine, and computes reduced state machines based on bisimula-tion equivalence [12]. <p> Thus, we did not need to perform any unit testing on this ESTEREL program. We then generated C code from our ESTEREL implementation using the ESTEREL compiler <ref> [1] </ref>. We inserted this generated code into the 5ESS switch simulator, which contains the existing 5ESS switch software. Our code replaced part of the current CGA code in this testing environment and had to interface properly with the rest of the 5ESS software. <p> We found that ESTEREL and its commercially-available development environment <ref> [1] </ref> pass this test. <p> The program derived from the formula is then composed (by means of the ESTEREL parallel operator) with the original ESTEREL program to be verified. The ESTEREL program resulting from this composition is compiled using commercially available ESTEREL tools <ref> [1] </ref>; a trivial analysis of the output of the compiler then indicates whether or not the property is satisfied by the original ESTEREL program. <p> One of the authors, who is a 5ESS software developer for CGA, provided a list of safety properties that our ESTEREL version should satisfy; we have verified these properties using our translator together with the ESTEREL development environment <ref> [1] </ref>. For example, we have verified that our ES-TEREL version of the CGA Collection Software never waits for longer than a bounded amount of time for a processor to respond to a request, and that two summary requests can never be processed simultaneously. <p> Another aid in proto-typing is that it is sufficient first to write only the ESTEREL portion of the system, animate and test it using the simulator provided by the AGEL <ref> [1] </ref> environment, and verify it using the technique described earlier. Any bugs that are found can be fixed and the process repeated all before any of the C interface functions, output functions, and driver need be written.
Reference: [2] <author> M.A. Ardis, L.J. Jagadeesan, P. Mataga, C. Puchol, M.G. Staskauskas, and J.E. Von Olnhausen. </author> <title> A framework for evaluating specification methods for reactive systems, </title> <booktitle> 1995. To appear in the Proceedings of the 17th International Conference on Software Engineering. </booktitle>
Reference-contexts: In addition to our ESTEREL version of a piece of the CGA software, we have written an ESTEREL version of another switch feature <ref> [2] </ref>, and have found the same benefits. We are currently extending that version with further functionality, and are planning to test it in the switch environments. Acknowledgments We are grateful to Mark Ardis, Peter Mataga, Chris Ramming, Mark Staskauskas, David Weiss, and Mary Zajac for many useful discussions.
Reference: [3] <author> G. Berry and G. Gonthier. </author> <title> Incremental development of an HDLC entity in ESTEREL. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 22 </volume> <pages> 35-49, </pages> <year> 1991. </year>
Reference-contexts: Our work was originally inspired by the work of Mu-rakami&Sethi [13], in which the terminal call processing protocol of a data switch was programmed in ESTEREL. Other case studies of the use of ESTEREL for programming reactive systems include <ref> [3, 6, 14] </ref>. This paper is organized as follows. A short introduction to ESTEREL is given in Section 2. Section 3 provides an overview of typical Carrier Group Alarms (CGA) software, and Section 4 describes our version of this CGA software in ESTEREL.
Reference: [4] <author> G. Berry and G. Gonthier. </author> <title> The ESTEREL synchronous programming language: design, semantics, </title> <booktitle> implementation. Science of Computer Programming, </booktitle> <volume> 19 </volume> <pages> 87-152, </pages> <year> 1992. </year>
Reference-contexts: Most of the software in the switch several million lines of code is written in the C programming language. ESTEREL <ref> [4] </ref> is a formally-defined, high-level language designed especially for programming reactive systems, and hence is a potential next generation language for systems such as the 5ESS switch. ESTEREL is based on the synchrony hypothesis: namely, that every reaction of a system to a set of inputs is theoretically instantaneous. <p> Section 7 describes the significant advantages provided by ESTEREL in industrial software development, while difficulties are discussed in Section 8. Our conclusions appear in Section 9. 2 ESTEREL ESTEREL <ref> [4] </ref> is a language, with a precisely defined mathematical semantics, for programming the class of deterministic reactive systems that wait for a set of possibly simultaneous inputs, react to the inputs by computing and producing outputs, and then quiesce, waiting for new inputs.
Reference: [5] <author> G. Berry, S. Ramesh, and R. K. Shyamasundar. </author> <title> Communicating reactive processes. </title> <booktitle> In ACM SIGPLAN-SIGACT Symposium of Programming Languages, </booktitle> <pages> pages 85-98, </pages> <year> 1993. </year>
Reference-contexts: A more natural solution inside ESTEREL itself is to treat the original C functions, containing loops, as asynchronous parallel components that take an unbounded amount of time. This facility is being incorporated in future versions of ESTEREL <ref> [5] </ref>, but is not present in the current commercially available version. Another complication that arose in writing our implementation is that since output signals are considered simultaneous, their corresponding output functions are called in arbitrary order, at the end of the reaction.
Reference: [6] <author> E. Coste-Maniere. Utilisation d'ESTEREL dans un contexte ansynchrone: </author> <title> une application robotique. </title> <type> Technical report, </type> <institution> INRIA, </institution> <month> December </month> <year> 1989. </year>
Reference-contexts: Our work was originally inspired by the work of Mu-rakami&Sethi [13], in which the terminal call processing protocol of a data switch was programmed in ESTEREL. Other case studies of the use of ESTEREL for programming reactive systems include <ref> [3, 6, 14] </ref>. This paper is organized as follows. A short introduction to ESTEREL is given in Section 2. Section 3 provides an overview of typical Carrier Group Alarms (CGA) software, and Section 4 describes our version of this CGA software in ESTEREL.
Reference: [7] <author> N. Halbwachs. </author> <title> Synchronous Programming of Reactive Systems. </title> <publisher> Kluwer Academic, </publisher> <year> 1993. </year>
Reference-contexts: At another level, ESTEREL can be regarded as a way to program finite state machines: in practice, it is significantly more convenient than programming state machines directly. It is well-known that conceptually small changes to a state machine can radically change the structure of the state machine <ref> [13, 7] </ref>. In well-designed ESTERELprograms, conceptually small changes often consist of simple changes to individual components, and the compiler takes care of making the resulting radical changes to the much more complex underlying state machine. a simple microwave oven is given that heats food for one minute.
Reference: [8] <author> G. Haugk, F.M. Lax, R.D. Royer, and J.R. Williams. </author> <title> The 5ESS(TM) switching system: Maintenance capabilities. </title> <journal> AT&T Technical Journal, </journal> <volume> 64(6 part </volume> 2):1385-1416, July-August 1985. 
Reference-contexts: Inputs to the switch include requests for placing and disconnecting telephone calls, requests for call forwarding, conference calling, and other calling features, as well as status changes such as malfunctions or recoveries from malfunctions on carrier groups <ref> [8] </ref>. In response to these inputs, the switch connects or disconnects calls, activates calling features, or in the case of malfunctions/recoveries, removes/restores the associated carrier groups and routes new calls over functioning carrier groups. This functionality is depicted in Figure 1. <p> The Carrier Group Alarms (CGA) software in the 5ESS switch is responsible for reporting status changes malfunctions or recoveries from malfunctions on carrier groups, so that other 5ESS software can respectively remove or restore the associated carrier groups from service, and route new telephone calls accordingly <ref> [8] </ref>. The carrier group alarm software has two main sources of inputs, namely summary-requests from higher-level entities and status changes from the hardware via lower-level software.
Reference: [9] <author> L.J. Jagadeesan, C. Puchol, and J.E. Von Olnhausen. </author> <title> Safety property verification of ESTEREL programs and an application to telecommunications software, </title> <note> 1995. In preparation. </note>
Reference-contexts: A more detailed presentation of our verification technique, and our application of this technique to the ESTEREL version of CGA appear in <ref> [9] </ref>. Our verification technique is general enough to use on all typical ESTEREL programs, and provides several benefits in the software development cycle. First, verified code is of higher-quality since the absence of a potentially large class of software bugs has been formally proved.
Reference: [10] <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems: Specification. </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Safety properties which stipulate that something bad never happens are typically sufficient to describe most intended properties of real-time systems, since responses are required within a bounded interval. One of the more widely used languages for specification of safety properties of programs is temporal logic <ref> [10] </ref>. We have developed a technique and associated tools for automatically verifying whether ESTEREL programs satisfy a large class of temporal logic safety properties.
Reference: [11] <author> K.E. Martersteck and A.E. Spencer. </author> <title> Introduction to the 5ESS(TM) switching system. </title> <journal> AT&T Technical Journal, </journal> <volume> 64(6 part </volume> 2):1305-1314, July-August 1985. 
Reference-contexts: An example of a reactive, fl The author is currently supported by a Fulbright fellowship. The work described here was performed while the author was visiting AT&T Bell Laboratories. real-time system is the AT&T 5ESS R fl telephone switch ing system <ref> [11] </ref>, which provides telecommunications services. Long-distance telephone calls are typically connected through a network of hardware, referred to as carrier groups.
Reference: [12] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> Series in Computer Science. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: The AGEL [1] development environment for ESTEREL provides high-quality tools, including an editor, compiler, simulator, debugger, and verifier. The verifier provides a graphical representation of the generated state machine, and computes reduced state machines based on bisimula-tion equivalence <ref> [12] </ref>. The simulator supports interactive execution of ESTEREL programs, by allowing the user to provide input signals and corresponding values and observe the output signals and corresponding values that are produced in response.
Reference: [13] <author> G.J. Murakami and R. Sethi. </author> <title> Terminal call processing in ESTEREL. </title> <booktitle> In Proceedings of the IFIP 92 World Computer Congress, </booktitle> <address> Madrid, Spain, </address> <year> 1992. </year>
Reference-contexts: We have also developed a technique and tools for formally verifying ESTEREL programs. These tools were used to automatically formally verify that our ESTEREL version satisfies some properties required for the existing Carrier Group Alarms software. Our work was originally inspired by the work of Mu-rakami&Sethi <ref> [13] </ref>, in which the terminal call processing protocol of a data switch was programmed in ESTEREL. Other case studies of the use of ESTEREL for programming reactive systems include [3, 6, 14]. This paper is organized as follows. A short introduction to ESTEREL is given in Section 2. <p> At another level, ESTEREL can be regarded as a way to program finite state machines: in practice, it is significantly more convenient than programming state machines directly. It is well-known that conceptually small changes to a state machine can radically change the structure of the state machine <ref> [13, 7] </ref>. In well-designed ESTERELprograms, conceptually small changes often consist of simple changes to individual components, and the compiler takes care of making the resulting radical changes to the much more complex underlying state machine. a simple microwave oven is given that heats food for one minute.
Reference: [14] <author> J.B. Stefani, L. Hazard, and F. Horn. </author> <title> Computational model for distributed multimedia applications based on a synchronous programming language. </title> <journal> Computer Communications, </journal> <volume> 15(2), </volume> <month> March </month> <year> 1992. </year>
Reference-contexts: Our work was originally inspired by the work of Mu-rakami&Sethi [13], in which the terminal call processing protocol of a data switch was programmed in ESTEREL. Other case studies of the use of ESTEREL for programming reactive systems include <ref> [3, 6, 14] </ref>. This paper is organized as follows. A short introduction to ESTEREL is given in Section 2. Section 3 provides an overview of typical Carrier Group Alarms (CGA) software, and Section 4 describes our version of this CGA software in ESTEREL.
References-found: 14

