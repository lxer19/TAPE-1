URL: ftp://ftp.cm.deakin.edu.au/pub/TR/Computing/rhodos/TR-C93-07.ps.gz
Refering-URL: http://gollum.cm.deakin.edu.au/techreports.html
Root-URL: 
Email: ying@deakin.edu.au, ang@deakin.edu.au  
Title: Trader Cooperation to Enable Object Sharing among Users of Homogenous Distributed Systems*  
Author: Y. Ni and A. Goscinski 
Note: This work was partly supported by Australian Research Council under Grant A48831034 and the Deakin University Research Grant 0504054151.  
Address: Geelong, Victoria 3217  
Affiliation: School of Computing and Mathematics Deakin University  
Date: March 15, 1993  
Pubnum: RHODOS  
Abstract: This paper demonstrates that it is possible to build a trading service which allows users to access objects of remote distributed systems. This service is an extension to an original RHODOS trader which provides the maximum possible autonomy and exibility to users yet at the same time allows them to share all accessible objects (resource, service) within a local distributed computer system. We demonstrated that concepts, such as attribute names, name domains, the operations of object export, import and withdrawal, are necessary to achieving object sharing among a number of users of independent homogeneous distributed computer systems which form together a large heterogeneous distributed system. We also show how location transparency can be achieved by the cooperation between traders based on attribute names and that the use of attributes has the potential to make resource sharing effective and efficient. 
Abstract-found: 1
Intro-found: 1
Reference: [Bach 1986] <author> Maurice Bach, </author> <title> The Design of the UNIX Operating System. </title> <publisher> Prentice-Hall. </publisher>
Reference: [Gerrity et al. 1991] <author> G. Gerrity, A. Goscinski, J. Indulska, W. Toomey, and W. Zhu. </author> <title> Can We Study Design Issues of Distributed Operating Systems in a Generalized Way? - RHODOS. </title> <booktitle> Proceedings of the 2nd Symposium on Experiences with Distributed and Multiprocessor Systems (SEDMS II), </booktitle> <month> March. </month>
Reference: [Goscinski 1991] <author> A. Goscinski, </author> <title> Distributed Operating Systems: The Logical Design. </title> <publisher> Addition-Wesley. </publisher>
Reference-contexts: However, the possibility that the peripheral devices and software services of local systems are heterogeneous and, moreover, the architectures of local systems or processors of local systems are diverse, is not excluded. One of the fundamental features of a distributed operating system is transparency <ref> [Goscinski 1991] </ref>. Thus, a trading service in a homogeneous large distributed system should also provide location transparency to users. <p> We believe the same conceptual design can be used in the case there are multiple traders within one large distributed system [Ni and Goscinski, 1993]. In the further research, a general approach to trader resolution presented in <ref> [Goscinski 1991] </ref> will be used. 4.3 Algorithms The three most important algorithms which relate to the trading service are search, export and import.
Reference: [Goscinski 1993] <author> A. Goscinski. </author> <title> Supporting User Autonomy and Object Sharing in Distributed Systems: The RHODOS Trading Service. </title> <booktitle> Proceedings of the International Symposium on Autonomous Decentralized Systems ISADS93. </booktitle>
Reference-contexts: The prototype of a trader, which provides the maximum possible autonomy and exibility to users, yet at the same time allows them to share all accessible objects, has been developed for a distributed system supported by an attribute naming facility <ref> [Goscinski 1993] </ref>. It is based on the concepts of user and system domains, the concept of a context, and explores the operations of object export, withdrawal, and import.
Reference: [Goscinski and Bearman 1990] <author> A. Goscinski and M. Bearman. </author> <title> Resource Management in Large Distributed Systems. Operating System Review, </title> <month> October. </month>
Reference-contexts: This has led to the need to find new methods to manage objects in the system. As suggested in <ref> [Goscinski and Bearman 1990] </ref>, [van der Linden 1990] and [van der Linden and Sventek 1992], this problem can be solved by providing a new class of naming servers and object managers called traders.
Reference: [Goscinski and Haddock 1993] <author> A. Goscinski and A. Haddock, </author> <title> The Development of a Prototype Attributed Naming and Trading Facility Supporting User Autonomy and Object Sharing, </title> <note> Submitted to Software Practice and Experience. </note>
Reference-contexts: A detailed discussion and definition of the attribute name supported by RHODOS traders is given in <ref> [Goscinski and Haddock 1993] </ref>. RHODOS attribute names are user-oriented object names for which there is no location-oriented information given. However, there are some hints about the location of the object.
Reference: [Goscinski and Indulska 1992] <author> A. Goscinski and J. Indulska, </author> <title> The RHODOS Naming Facility, </title> <journal> IEEE Distributed Processing Technical Committee Newsletter, </journal> <volume> Vol. 14, No. </volume> <pages> 1. </pages>
Reference: [Haddock and Goscinski, 1991] <author> A. Haddock and A. Goscinski, </author> <title> The Development and Experiences With the RHODOS Naming Facility, </title> <type> Technical Report CS37/91, </type> <institution> Department of Computer Science, University College, ADFA, UNSW, </institution> <month> September. </month>
Reference-contexts: The RHODOS naming and trading facility which trades objects within a local RHODOS system <ref> [Haddock and Goscinski, 1991, 1993] </ref> consists of two servers which perform two distinctive sets of functions: a name server which provides the conventional naming operations, such as creating an object, changing an object name, deleting an object, changing an object attribute, etc., and a trader which provides trading operations, i.e., exporting, <p> The search algorithm used in the RHODOS trader uses the search function implemented in the initial RHODOS trading facility prototype. The search algorithm performs an exhaustive search based on the hierarchical structure of the RHODOS naming contexts. The detail of the search function is presented in <ref> [Haddock and Goscinski, 1991] </ref>. 4.3.2 Export algorithm The export operation implementation is designed to prove the correctness of the conceptual design of the User user agent RHODOS-1 Trader RHODOS-2 Trader RHODOS-1 Trading database RHODOS-2 Trading database (1) (3) Yes/No (11) Yes/No (12) Yes/No (10) Yes/No RHODOS-1 (9) User user agent RHODOS-2
Reference: [Haddock, 1991] <author> A. N. Haddock, </author> <title> Selected Aspects of the Development of the RHODOS Naming Facility. </title> <type> MInfSc Thesis, </type> <institution> Department of Computer Science, University College, ADFA, UNSW, </institution> <month> November. </month>
Reference: [Ni and Goscinski 1993] <author> Y. Ni and A. Goscinski, </author> <title> Trading of Objects in a Heterogeneous Large Distributed System, </title> <note> Technical Report in processing, </note> <institution> School of Computing and Mathematics, Deakin University. </institution>
Reference: [van der Linden 1990] <author> R. van der Linden, </author> <title> ISA Project. Federated Naming Model. Advanced Network System Architecture. Architecture Projects Management Limited. </title>
Reference-contexts: This has led to the need to find new methods to manage objects in the system. As suggested in [Goscinski and Bearman 1990], <ref> [van der Linden 1990] </ref> and [van der Linden and Sventek 1992], this problem can be solved by providing a new class of naming servers and object managers called traders.
Reference: [van der Linden and Sventek 1992] <author> R. van der Linden and J. Sventek, </author> <title> The ANSA Trading Service. </title> <journal> IEEE Distributed Processing Technical Committee Newsletter, </journal> <volume> Vol. 14, </volume> <month> No.1. </month>
Reference-contexts: This has led to the need to find new methods to manage objects in the system. As suggested in [Goscinski and Bearman 1990], [van der Linden 1990] and <ref> [van der Linden and Sventek 1992] </ref>, this problem can be solved by providing a new class of naming servers and object managers called traders.
References-found: 12

