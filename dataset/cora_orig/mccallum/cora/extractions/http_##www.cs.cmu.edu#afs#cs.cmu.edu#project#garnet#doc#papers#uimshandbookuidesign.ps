URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/garnet/doc/papers/uimshandbookuidesign.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/bam/www/toolnames.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: bam@cs.cmu.edu  
Phone: (412) 268-5150  
Title: UIMSs, Toolkits, Interface Builders  
Author: Brad A. Myers 
Web: http://www.cs.cmu.edu/~bam  
Address: 5000 Forbes Avenue Pittsburgh, PA 15213  
Affiliation: Human Computer Interaction Institute Carnegie Mellon University  
Abstract-found: 0
Intro-found: 1
Reference: [Apple 85] <author> Apple Computer, Inc. </author> <title> Inside Macintosh. </title> <publisher> Addison-Wesley, </publisher> <year> 1985. </year>
Reference-contexts: The most conventional is simply a collection of procedures that can be called by application programs. Examples of this style include the SunTools toolkit for the SunView windowing system, and the Macintosh Toolbox <ref> [Apple 85] </ref>. The other variety uses an object-oriented programming style which makes it easier for the designer to customize the interaction techniques. Examples include Smalltalk [Tesler 81], Andrew [Palay 88], Garnet [Myers 90c], InterViews [Linton 89], Xt [McCormack 88], Amulet [Myers 96a], and the Java toolkit AWT [Sun 96].
Reference: [Asymetrix 95] <author> Asymetrix Corporation. </author> <title> Tool Book. </title> <address> 100 100th Ave., NE, Bellevue, Washington, </address> <month> 98004, </month> <pages> (206) 637-1500. </pages> <year> 1995. </year>
Reference-contexts: The designer does not need to be a programmer to use Menulay. Probably, the most famous example of a card-based system is HyperCard from Apple. There are now many similar programs, such as GUIDE [InfoAccess 91], and Tool Book <ref> [Asymetrix 95] </ref>. In all of these, the designer can easily create cards containing text fields, buttons, etc., along with various graphic decorations. The buttons can transfer to other cards. These programs provide a scripting language to provide more flexibility for buttons.
Reference: [AutoCode 91] <institution> Integrated Systems. </institution> <address> AutoCode. 3260 Jay Street, Santa Clara, CA 94054. </address> <pages> (408) 980-1500. </pages> <year> 1991. </year>
Reference-contexts: These tend to be quite expensive, however (i.e., US$20,000 to US$50,000). For example, in the aeronautics and real-time control areas, there are a number of high-level tools, such as AutoCode <ref> [AutoCode 91] </ref> and InterMAPhics [Gallium 96]. 9. Technology Transfer User interface tools are an area where research has had a tremendous impact on the current practice of software development.
Reference: [Bharat 94] <author> Krishna Bharat and Marc H. Brown. </author> <title> Building Distributed, Multi-User Applications by Direct Manipulation. </title> <booktitle> In ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 71-81. </pages> <booktitle> Proceedings UIST'94, </booktitle> <address> Marina del Rey, CA, </address> <month> November, </month> <year> 1994. </year>
Reference-contexts: Amulet [Myers 96a] provides high-level support for graphical, direct manipulation interfaces, and handles input as hierarchical command objects, making Undo easier to implement [Myers 96b]. Rendezvous [Hill 93] and Visual Obliq <ref> [Bharat 94] </ref> are designed to make it easier to create applications that support multiple users on multiple machines operating synchronously.
Reference: [Bly 86] <author> Sara A. Bly and Jarrett K. Rosenberg. </author> <title> A Comparison of Tiled and Overlapping Windows. </title> <booktitle> In Human Factors in Computing Systems, </booktitle> <pages> pages 101-106. </pages> <booktitle> Proceedings SIGCHI'86, </booktitle> <address> Boston, Mass, </address> <month> April, </month> <year> 1986. </year>
Reference-contexts: The tiled style was popular for a while, and was used by Cedar [Swinehart 86], and early versions of the Star [Smith 82], Andrew [Palay 88], and Microsoft Windows. A study even suggested that using tiled windows was more efficient for users <ref> [Bly 86] </ref>. However, today tiled windows are rarely seen on conventional window systems, because users generally prefer overlapping. Modern ``browsers'' for the World-Wide Web, such as Mosaic, Netscape, and Microsoft's Internet Explorer, provide a windowing environment inside the computer's main windowing system.
Reference: [Booz 92] <author> Booz Allen & Hamilton Inc. </author> <title> NeXTStep vs. Other Development Environments; Comparative Study. </title> <note> 1992. Report available from NeXT Computer, Inc. UIMSs, Toolkits, Interface Builders - 36 - To appear in Handbook of UI Design </note>
Reference-contexts: Myers. ``User Interface Software Tools,'' ACM Transactions on Computer-Human Interaction. vol. 2, no. 1, March, 1995. pp. 64-103. UIMSs, Toolkits, Interface Builders - 2 - To appear in Handbook of UI Design one-tenth the time <ref> [Booz 92] </ref>. Furthermore, user interface tools are a major business. In the Unix market alone, over US$133 million of tools were sold in 1993, which is about 50,000 licenses [XBusiness 94].
Reference: [Borning 81] <author> Alan Borning. </author> <title> The Programming Language Aspects of Thinglab; a Constraint-Oriented Simulation Laboratory. </title> <journal> ACM Transactions on Programming Languages and Systems 3(4) </journal> <pages> 353-387, </pages> <month> October, </month> <year> 1981. </year>
Reference-contexts: Specification Format Examples Section Language Based 8.2.1 State Transition Networks [Newman 68], VAPS [VAPS 95] 8.2.1.1 Context-Free Grammars YACC, LEX, Syngraph [Olsen 83] 8.2.1.2 Event Languages Sassafras [Hill 86], EET [Frank 96], HyperTalk 8.2.1.3 Declarative Languages Cousin [Hayes 85], Open Dialog [Schulert 85], Motif UIL 8.2.1.4 Constraint Languages Thinglab <ref> [Borning 81] </ref>, C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha <p> Early constraint systems include Sketchpad [Sutherland 63] which pioneered the use of graphical constraints in a drawing editor, and Thinglab <ref> [Borning 81] </ref> which used constraints for graphical simulation. Subsequently, Thinglab was extended to aid in the generation of user interfaces [Borning 86a]. The discussion of toolkits above mentioned the use of constraints as part of the intrinsics of a toolkit.
Reference: [Borning 86a] <author> Alan Borning and Robert Duisberg. </author> <title> Constraint-Based Tools for Building User Interfaces. </title> <journal> ACM Transactions on Graphics 5(4) </journal> <pages> 345-374, </pages> <month> October, </month> <year> 1986. </year>
Reference-contexts: However, these languages are now proving successful as intermediate languages describing the layout of widgets (such as UIL) that are generated by interactive tools. 8.2.1.5 Constraint Languages A number of user interface tools allow the programmer to use constraints to define the user interface <ref> [Borning 86a] </ref>. Early constraint systems include Sketchpad [Sutherland 63] which pioneered the use of graphical constraints in a drawing editor, and Thinglab [Borning 81] which used constraints for graphical simulation. Subsequently, Thinglab was extended to aid in the generation of user interfaces [Borning 86a]. <p> to use constraints to define the user interface <ref> [Borning 86a] </ref>. Early constraint systems include Sketchpad [Sutherland 63] which pioneered the use of graphical constraints in a drawing editor, and Thinglab [Borning 81] which used constraints for graphical simulation. Subsequently, Thinglab was extended to aid in the generation of user interfaces [Borning 86a]. The discussion of toolkits above mentioned the use of constraints as part of the intrinsics of a toolkit. A number of research toolkits now supply constraints as an integral part of the object system (e.g., Garnet and Amulet). In addition, some systems have provided higher-level interfaces to constraints.
Reference: [Borning 86b] <author> Alan Borning. </author> <title> Defining Constraints Graphically. </title> <booktitle> In Human Factors in Computing Systems, </booktitle> <pages> pages 137-143. </pages> <booktitle> Proceedings SIGCHI'86, </booktitle> <address> Boston, MA, </address> <month> April, </month> <year> 1986. </year>
Reference-contexts: A number of research toolkits now supply constraints as an integral part of the object system (e.g., Garnet and Amulet). In addition, some systems have provided higher-level interfaces to constraints. Graphical Thinglab <ref> [Borning 86b] </ref> allows the designer to create constraints by wiring icons together, and NoPump [Wilde 90] and C32 [Myers 91b] allow constraints to be defined using a spreadsheet-like interface.
Reference: [Buxton 83] <author> W. Buxton, M.R. Lamb, D. Sherman, and K.C. Smith. </author> <title> Towards a Comprehensive User Interface Management System. </title> <journal> In Computer Graphics, </journal> <volume> 17(3), </volume> <pages> pages 35-42. </pages> <booktitle> Proceedings SIGGRAPH'83, </booktitle> <address> Detroit, Mich, </address> <month> July, </month> <year> 1983. </year>
Reference-contexts: Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 Cards Menulay <ref> [Buxton 83] </ref>, HyperCard 8.2.4.2 Interface Builders DialogEditor [Cardelli 88], NeXT Interface Builder [NeXT 91], Visual Basic, UIM/X [VisualEdge 90] 8.2.4.3 Data Visualization Tools DataViews [DataViews 95] 8.2.4.4 Graphical Editors Peridot [Myers 88b], DEMO [Fisher 92], Marquise [Myers 93] 8.2.4.5 article that discusses the technique. <p> There is usually a fixed set of widgets to choose from, which have been coded by hand. An early example of this is Menulay <ref> [Buxton 83] </ref>, which allows the designer to place text, graphical potentiometers, iconic pictures, and light buttons on the screen and see exactly what the end user will see when the application is run. The designer does not need to be a programmer to use Menulay.
Reference: [Cardelli 85] <author> Luca Cardelli and Rob Pike. Squeak: </author> <title> A Language for Communicating with Mice. </title> <booktitle> In Computer Graphics, </booktitle> <pages> pages 199-204. </pages> <booktitle> Proceedings SIGGRAPH'85, </booktitle> <address> San Francisco, CA, </address> <month> July, </month> <year> 1985. </year>
Reference-contexts: In addition, the toolkits themselves are often expensive to create: ``The primitives never seem complex in principle, but the programs that implement them are surprisingly UIMSs, Toolkits, Interface Builders - 15 - To appear in Handbook of UI Design intricate'' <ref> [Cardelli 85, p.199] </ref>. Another problem with toolkits is that they are often difficult to use since they may contain hundreds of procedures, and it is often not clear how to use the procedures to create a desired interface.
Reference: [Cardelli 88] <author> Luca Cardelli. </author> <title> Building User Interfaces by Direct Manipulation. </title> <booktitle> In ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 152-166. </pages> <booktitle> Proceedings UIST'88, </booktitle> <address> Banff, Alberta, Canada, </address> <month> October, </month> <year> 1988. </year>
Reference-contexts: 90], Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 Interface Builders DialogEditor <ref> [Cardelli 88] </ref>, NeXT Interface Builder [NeXT 91], Visual Basic, UIM/X [VisualEdge 90] 8.2.4.3 Data Visualization Tools DataViews [DataViews 95] 8.2.4.4 Graphical Editors Peridot [Myers 88b], DEMO [Fisher 92], Marquise [Myers 93] 8.2.4.5 article that discusses the technique. <p> The Steamer project at BBN demonstrated many of the ideas later incorporated into interface builders and was probably the first object-oriented graphics system [Stevens 83]. Other examples of research interface builders are DialogEditor <ref> [Cardelli 88] </ref>, vu [Singh 88] and Gilt [Myers 91a]. There are literally hundreds of commercial interface builders. Just two examples are the NeXT Interface Builder [NeXT 91], and UIM/X for X [VisualEdge 90]. Visual Basic is essentially an Interface Builder coupled with an editor for an interpreted language.
Reference: [DataViews 95] <institution> DataViews Corporation. </institution> <address> DataViews. 47 Pleasant St., Northampton, MA, </address> <month> 01006, </month> <pages> (413) 586-4144. </pages> <year> 1995. </year>
Reference-contexts: 90], UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 Interface Builders DialogEditor [Cardelli 88], NeXT Interface Builder [NeXT 91], Visual Basic, UIM/X [VisualEdge 90] 8.2.4.3 Data Visualization Tools DataViews <ref> [DataViews 95] </ref> 8.2.4.4 Graphical Editors Peridot [Myers 88b], DEMO [Fisher 92], Marquise [Myers 93] 8.2.4.5 article that discusses the technique. <p> The interface to the designer is usually quite similar to an interface builder, with a palette of gauges, graphers, knobs and switches that can be placed interactively. However, these controls usually are not from a toolkit and are supplied by the tool. Example tools in this category include DataViews <ref> [DataViews 95] </ref>, and SL-GMS [SL-GMS 93]. 8.2.4.5 Editors for Application-Specific Graphics When an application has custom graphics, it would be useful if the designer could draw pictures of what the graphics should look like rather than having to write code for this.
Reference: [DePalma 93] <author> Donald A. DePalma and Stuart D. Woodring. </author> <title> Client/Server Power Tools Futures. </title> <booktitle> The Software Strategy Report 4(1) </booktitle> <pages> 2-13, </pages> <month> April, </month> <year> 1993. </year> <title> Forrester Research, One Brattle Square, Camb, </title> <address> MA 02138. </address>
Reference-contexts: Forrester Research claims that the total market for UI software tools on all platforms, including ``vertical tools'' which include database and user interface construction tools, was 130,000 developers generating US$400 million in revenue in 1993 <ref> [DePalma 93] </ref>. Whereas the ``first generation'' of commercial tools were not fully graphical or not sufficiently powerful, this is no longer true for today's tools.
Reference: [Easel 93] <author> Easel. </author> <title> Workbench. 25 Corporate Drive, </title> <address> Burlington, MA 01803. </address> <pages> (617) 221-2100. </pages> <year> 1993. </year>
Reference-contexts: Transition Networks [Newman 68], VAPS [VAPS 95] 8.2.1.1 Context-Free Grammars YACC, LEX, Syngraph [Olsen 83] 8.2.1.2 Event Languages Sassafras [Hill 86], EET [Frank 96], HyperTalk 8.2.1.3 Declarative Languages Cousin [Hayes 85], Open Dialog [Schulert 85], Motif UIL 8.2.1.4 Constraint Languages Thinglab [Borning 81], C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel <ref> [Easel 93] </ref> 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND [Neches <p> Similarly, when the user operates a widget, the script converts this into the appropriate edits of the character buffer. A leading program of this type is Easel, <ref> [Easel 93] </ref>, which also contains an interface builder for laying out the widgets. 8.2.1.7 Database Interfaces A very important class of commercial tools support form-based or GUI-based access to databases.
Reference: [Fisher 92] <author> Gene L. Fisher, Dale E. Busse, and David A. Wolber. </author> <title> Adding Rule-Based Reasoning to a Demonstrational Interface Builder. </title> <booktitle> In ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 89-97. </pages> <booktitle> Proceedings UIST'92, </booktitle> <address> Monterey, CA, </address> <month> November, </month> <year> 1992. </year>
Reference-contexts: 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 Interface Builders DialogEditor [Cardelli 88], NeXT Interface Builder [NeXT 91], Visual Basic, UIM/X [VisualEdge 90] 8.2.4.3 Data Visualization Tools DataViews [DataViews 95] 8.2.4.4 Graphical Editors Peridot [Myers 88b], DEMO <ref> [Fisher 92] </ref>, Marquise [Myers 93] 8.2.4.5 article that discusses the technique. UIMSs, Toolkits, Interface Builders - 21 - To appear in Handbook of UI Design 8.2.1 Language Based With most of the older user interface tools, the designer specifies the user interface in a special-purpose language. <p> Experiments showed that Peridot can be used by non-programmers. Lapidary [Myers 89] extends the ideas of Peridot to allow general application-specific objects to be drawn. For example, the designer can draw the nodes and arcs for a graph program. The DEMO system <ref> [Fisher 92] </ref> allows UIMSs, Toolkits, Interface Builders - 31 - To appear in Handbook of UI Design some dynamic, run-time properties of the objects to be demonstrated, such as how objects are created.
Reference: [Frank 96] <author> Martin R. Frank. </author> <title> Model-Based User Interface Design by Demonstration and by Interview. </title> <type> PhD thesis, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <year> 1996. </year> <note> In progress. </note>
Reference-contexts: These are classified by their predominant or most interesting feature. Specification Format Examples Section Language Based 8.2.1 State Transition Networks [Newman 68], VAPS [VAPS 95] 8.2.1.1 Context-Free Grammars YACC, LEX, Syngraph [Olsen 83] 8.2.1.2 Event Languages Sassafras [Hill 86], EET <ref> [Frank 96] </ref>, HyperTalk 8.2.1.3 Declarative Languages Cousin [Hayes 85], Open Dialog [Schulert 85], Motif UIL 8.2.1.4 Constraint Languages Thinglab [Borning 81], C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], <p> Sassafras [Hill 86] is an event language where the user interface is programmed as a set of small event handlers. The Elements-Events and Transitions (EET) language provides elaborate control over when the various event handlers are fired <ref> [Frank 96] </ref>. As described below in section 8.2.4.2, the HyperTalk language that is part of HyperCard for the Apple Macintosh, can be considered an event language. Microsoft's Visual Basic also contains event-language features, since code is generally written as responses to events on objects.
Reference: [Gallium 96] <institution> Gallium Software Inc. </institution> <address> InterMAPhics. 4000-303 Moodie Drive, Nepean, Ontario, CANADA K2H 9R4; (613) 721-0902, http://www.gallium.com/ProductInfo/InterMAPhics. 1996. </address>
Reference-contexts: These tend to be quite expensive, however (i.e., US$20,000 to US$50,000). For example, in the aeronautics and real-time control areas, there are a number of high-level tools, such as AutoCode [AutoCode 91] and InterMAPhics <ref> [Gallium 96] </ref>. 9. Technology Transfer User interface tools are an area where research has had a tremendous impact on the current practice of software development.
Reference: [Gaskins 92] <author> Tom Gaskins. </author> <title> PEXlib Programming Manual. </title> <publisher> O'Reilly and Associates, Inc., </publisher> <address> 103 Morris Street, Suite A, Sebastopol CA, </address> <year> 1992. </year>
Reference-contexts: All of the standard output models only contain drawing operations for two dimensional objects. Two extensions to support 3-D objects are PEX and OpenGL. PEX <ref> [Gaskins 92] </ref> is an extension to the X windowing system that incorporates much of the PHIGS graphics standard. OpenGL [OpenGL 93] is based on the GL programming interface that has been used for many years on Silicon Graphics machines.
Reference: [Gleicher 93] <author> Michael Gleicher. </author> <title> A Graphics Toolkit Based on Differential Constraints. </title> <booktitle> In ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 109-120. </pages> <booktitle> Proceedings UIST'93, </booktitle> <address> Atlanta, GA, </address> <month> November, </month> <year> 1993. </year>
Reference-contexts: Therefore, research is being directed at reducing the number of call-backs in user interface software [Myers 91a]. Some research toolkits have added novel features to the toolkit intrinsics. For example, Garnet [Myers 90c], Rendezvous [Hill 93], Bramble <ref> [Gleicher 93] </ref> and Amulet [Myers 96a], allow the objects to be connected using constraints, which are relationships that are declared once and then maintained automatically by the system.
Reference: [Green 86] <author> Mark Green. </author> <title> A Survey of Three Dialog Models. </title> <journal> ACM Transactions on Graphics 5(3) </journal> <pages> 244-275, </pages> <month> July, </month> <year> 1986. </year>
Reference-contexts: This language can take many forms, including context-free grammars, state transition diagrams, declarative languages, event languages, etc. The language is usually used to specify the syntax of the user interface; i.e., the legal sequences of input and output actions. This is sometimes called the ``dialog.'' Green <ref> [Green 86] </ref> provides an extensive comparison of grammars, state transition diagrams, and event languages, and Olsen [Olsen 92] surveys various UIMS techniques. 8.2.1.1 State Transition Networks Since many parts of user interfaces involve handling a sequence of input events, it is natural to think of using a state transition network to
Reference: [Hartson 90] <author> H. Rex Hartson, Antonio C. Siochi, and Deborah Hix. </author> <title> The UAN: A User-Oriented Representation for Direct Manipulation Interface Designs. </title> <journal> ACM Transactions on Information Systems 8(3) </journal> <pages> 181-203, </pages> <month> July, </month> <year> 1990. </year>
Reference-contexts: The information might also be used to automatically generate documentation and run-time help. Another approach is to allow the designer to specify the design in an appropriate notation, and then provide tools to convert that notation into interfaces. For example, the UAN <ref> [Hartson 90] </ref> is a notation for expressing the end user's actions and the system's responses. Finally, much work is needed in ways for tools to help evaluate interface designs.
Reference: [Hayes 85] <author> Philip J. Hayes, Pedro A. Szekely, and Richard A. Lerner. </author> <title> Design Alternatives for User Interface Management Systems Based on Experience with COUSIN. </title> <booktitle> In Human Factors in Computing Systems, </booktitle> <pages> pages 169-175. </pages> <booktitle> Proceedings SIGCHI'85, </booktitle> <address> San Francisco, CA, </address> <month> April, </month> <year> 1985. </year> <note> UIMSs, Toolkits, Interface Builders - 37 - To appear in Handbook of UI Design </note>
Reference-contexts: These are classified by their predominant or most interesting feature. Specification Format Examples Section Language Based 8.2.1 State Transition Networks [Newman 68], VAPS [VAPS 95] 8.2.1.1 Context-Free Grammars YACC, LEX, Syngraph [Olsen 83] 8.2.1.2 Event Languages Sassafras [Hill 86], EET [Frank 96], HyperTalk 8.2.1.3 Declarative Languages Cousin <ref> [Hayes 85] </ref>, Open Dialog [Schulert 85], Motif UIL 8.2.1.4 Constraint Languages Thinglab [Borning 81], C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew <p> However, the success of HyperTalk, Visual Basic and similar tools shows that this approach is appropriate for small to medium-size programs. 8.2.1.4 Declarative Languages Another approach is to try to define a language that is declarative (stating what should happen) rather than procedural (how to make it happen). Cousin <ref> [Hayes 85] </ref> and HP/Apollo's Open-Dialogue [Schulert 85] both allow the designer to specify user interfaces in this manner. The user interfaces supported are basically forms, where fields can be text which is typed by the user, or options selected using menus or buttons.
Reference: [Hill 86] <author> Ralph D. Hill. </author> <title> Supporting Concurrency, Communication and Synchronization in Human-Computer Interaction The Sassafras UIMS. </title> <journal> ACM Transactions on Graphics 5(3) </journal> <pages> 179-210, </pages> <month> July, </month> <year> 1986. </year>
Reference-contexts: These are classified by their predominant or most interesting feature. Specification Format Examples Section Language Based 8.2.1 State Transition Networks [Newman 68], VAPS [VAPS 95] 8.2.1.1 Context-Free Grammars YACC, LEX, Syngraph [Olsen 83] 8.2.1.2 Event Languages Sassafras <ref> [Hill 86] </ref>, EET [Frank 96], HyperTalk 8.2.1.3 Declarative Languages Cousin [Hayes 85], Open Dialog [Schulert 85], Motif UIL 8.2.1.4 Constraint Languages Thinglab [Borning 81], C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks <p> Each handler will have a condition clause that determines what types of events it will handle, and when it is active. The body of the handler can cause output events, change the internal state of the system (which might enable other event handlers), or call application routines. Sassafras <ref> [Hill 86] </ref> is an event language where the user interface is programmed as a set of small event handlers. The Elements-Events and Transitions (EET) language provides elaborate control over when the various event handlers are fired [Frank 96].
Reference: [Hill 93] <author> Ralph D. Hill, Tom Brinck, John F. Patterson, Steven L. Rohall, and Wayne T. Wilner. </author> <title> The Rendezvous Language and Architecture. </title> <journal> Communications of the ACM 36(1) </journal> <pages> 62-67, </pages> <month> January, </month> <year> 1993. </year>
Reference-contexts: This means that code for one toolkit is difficult to port to a different toolkit. Therefore, research is being directed at reducing the number of call-backs in user interface software [Myers 91a]. Some research toolkits have added novel features to the toolkit intrinsics. For example, Garnet [Myers 90c], Rendezvous <ref> [Hill 93] </ref>, Bramble [Gleicher 93] and Amulet [Myers 96a], allow the objects to be connected using constraints, which are relationships that are declared once and then maintained automatically by the system. <p> Amulet [Myers 96a] provides high-level support for graphical, direct manipulation interfaces, and handles input as hierarchical command objects, making Undo easier to implement [Myers 96b]. Rendezvous <ref> [Hill 93] </ref> and Visual Obliq [Bharat 94] are designed to make it easier to create applications that support multiple users on multiple machines operating synchronously.
Reference: [Hudson 93] <author> Scott E. Hudson and John T. Stasko. </author> <title> Animation Support in a User Interface Toolkit: Flexible, Robust, and Reusable Abstractions. </title> <booktitle> In ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 57-67. </pages> <booktitle> Proceedings UIST'93, </booktitle> <address> Atlanta, GA, </address> <month> November, </month> <year> 1993. </year>
Reference-contexts: Special support for animations has been added to Artkit <ref> [Hudson 93] </ref> and Amulet [Myers 96c]. Tk [Ousterhout 91] is a popular toolkit for the X window system because it uses an interpretive language called tcl which makes it possible to dynamically change the user interface.
Reference: [InfoAccess 91] <author> InfoAccess Inc. </author> <title> Guide 2. 2800 156th Avenue SE, </title> <journal> Bellevue, </journal> <volume> WA 98007. </volume> <pages> (206) 747-3203. </pages> <year> 1991. </year>
Reference-contexts: The designer does not need to be a programmer to use Menulay. Probably, the most famous example of a card-based system is HyperCard from Apple. There are now many similar programs, such as GUIDE <ref> [InfoAccess 91] </ref>, and Tool Book [Asymetrix 95]. In all of these, the designer can easily create cards containing text fields, buttons, etc., along with various graphic decorations. The buttons can transfer to other cards. These programs provide a scripting language to provide more flexibility for buttons.
Reference: [Karrer 90] <author> Anthony Karrer and Walt Scacchi. </author> <title> Requirements for an Extensible Object-Oriented Tree/Graph Editor. </title> <booktitle> In ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 84-91. </pages> <booktitle> Proceedings UIST'90, </booktitle> <address> Snowbird, Utah, </address> <month> October, </month> <year> 1990. </year>
Reference-contexts: Even more specialized are various graph programs, such as Edge [Newbery 88] and TGE <ref> [Karrer 90] </ref>. These provide a framework in which the designer can create programs that display their data as trees or graphs. The programmer typically specializes the node and arc classes, and specifies some of the commands, but the framework handles layout and the overall control.
Reference: [Kieras 95] <author> David E. Kieras, Scott D. Wood, Kasen Abotel, Anthony Hornof. GLEAN: </author> <title> A Computer-Based Tool for Rapid GOMS Model Usability Evaluation of User Interface Designs. </title> <booktitle> In ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 91-100. </pages> <booktitle> Proceedings UIST'95, </booktitle> <address> Pittsburgh, PA, </address> <month> November, </month> <year> 1995. </year>
Reference-contexts: A new generation of tools are trying to evaluate how people will interact with interfaces by automatically creating cognitive models from high-level descriptions of the user interface. For example, the GLEAN system generates quantitative predictions of performance of a system from a GOMS model <ref> [Kieras 95] </ref>. 8.2 Specification Styles High-level user interface tools come in a large variety of forms. One important way that they can be classified is by how the designer specifies what the interface should be. <p> Initial attempts, such as in MIKE [Olsen 88], have highlighted the need for better models and metrics against which to evaluate the user interfaces. Research in this area by cognitive psychologists and other user interface researchers (e.g., <ref> [Kieras 95] </ref>) is continuing. UIMSs, Toolkits, Interface Builders - 33 - To appear in Handbook of UI Design 10.3 Increased Breadth We can expect the user interfaces of tomorrow to be different from the conventional window-and-mouse interfaces of today, and tools will have to change to support the new styles.
Reference: [Kim 93] <author> Won Chul Kim and James D. Foley. </author> <title> Providing High-level Control and Expert Assistance in the User Interface Presentation Design. </title> <booktitle> In Human Factors in Computing Systems, </booktitle> <pages> pages 430-437. </pages> <booktitle> Proceedings INTERCHI'93, </booktitle> <address> Amsterdam, The Netherlands, </address> <month> April, </month> <year> 1993. </year>
Reference-contexts: To solve this problem, some tools use automatic generation so that the tool makes many of these choices from a much higher-level specification. Many of these tools, such as Mickey [Olsen 89], Jade [Vander Zanden 90], and DON <ref> [Kim 93] </ref> have concentrated on creating menus and dialog boxes. Jade allows the designer to use a graphical editor to edit the generated interface if it is not good enough. DON has the most sophisticated layout mechanisms and takes into account the desired window size, balance, columness, symmetry, grouping, etc.
Reference: [Labview 96] <author> National Instruments. </author> <title> LabVIEW. 6504 Bridge Point Parkway, </title> <address> Austin, TX, </address> <pages> 78730-5039, (512)794-1000. </pages> <year> 1996. </year>
Reference-contexts: Syngraph [Olsen 83] 8.2.1.2 Event Languages Sassafras [Hill 86], EET [Frank 96], HyperTalk 8.2.1.3 Declarative Languages Cousin [Hayes 85], Open Dialog [Schulert 85], Motif UIL 8.2.1.4 Constraint Languages Thinglab [Borning 81], C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView <ref> [Labview 96] </ref> Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director <p> In these, icons represent processing steps, and the data flow along the connecting wires. The user interface is usually constructed directly by laying out pre-built widgets, in the style of interface builders (section 8.2.4.3). Examples of visual programming systems for creating user interfaces include Labview <ref> [Labview 96] </ref> which is specialized for controlling laboratory instruments, and Prograph [Prograph 96]. Using a visual language seems to make it easier for novice programmers, but large programs still suffer from the familiar ``maze of wires'' problem.
Reference: [Landay 95] <author> James Landay and Brad A. Myers. </author> <title> Interactive Sketching for the Early Stages of User Interface Design. </title> <booktitle> In Human Factors in Computing Systems, </booktitle> <pages> pages 43-50. </pages> <booktitle> Proceedings SIGCHI'95, </booktitle> <address> Denver, CO, </address> <month> May, </month> <year> 1995. </year>
Reference-contexts: Therefore, a new research tool called SILK is trying to provide a quick sketching interface and then convert the sketches into actual UIMSs, Toolkits, Interface Builders - 29 - To appear in Handbook of UI Design widgets <ref> [Landay 95] </ref>. 8.2.4.2 Cards Many graphical programs are limited to user interfaces that can be presented as a sequence of mostly static pages, sometimes called ``frames,'' ``cards,'' or ``forms.'' Each page contains a set of widgets, some of which cause transfer to other pages. <p> Today's user interface tools mostly help with the generation of the code of the interface, and assume that the fundamental user interface design is complete. What are also needed are tools to help with the generation, specification, and analysis of the design of the interface <ref> [Landay 95] </ref>. For example, an important first step in user interface design is task analysis, where the designer identifies the particular tasks that the end user will need to perform. Research should be directed at creating tools to support these methods and techniques.
Reference: [Lifeboat 95] <editor> Lifeboat Publishing. Dan Bricklin's Demo, </editor> <address> 1163 Shrewsbury Ave, Shrewsbury, NJ 07702, 800-336-1166, 908-389-9227. </address> <year> 1995. </year>
Reference-contexts: Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo <ref> [Lifeboat 95] </ref>, Director [MacroMedia 96] 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 Interface Builders DialogEditor [Cardelli 88], NeXT Interface Builder [NeXT 91], Visual Basic, UIM/X [VisualEdge 90] 8.2.4.3 Data Visualization Tools DataViews [DataViews 95] 8.2.4.4 Graphical Editors Peridot [Myers 88b], DEMO [Fisher 92], Marquise [Myers 93] 8.2.4.5 article that discusses the <p> The term ``prototyping'' is being used in this paper in a much more specific manner. Probably the first prototyping tool was Dan Bricklin's Demo program <ref> [Lifeboat 95] </ref>. This is a program for an IBM PC that allows the designer to create sample screens composed of characters and ``character graphics'' (where the fixed-size character cells can contain a graphic like a horizontal, vertical or diagonal line).
Reference: [Linton 89] <author> Mark A. Linton, John M. Vlissides and Paul R. Calder. </author> <title> Composing user interfaces with InterViews. </title> <booktitle> IEEE Computer 22(2) </booktitle> <pages> 8-22, </pages> <month> February, </month> <year> 1989. </year>
Reference-contexts: When the X system was being developed, the developers could not agree on a single toolkit, so they left the toolkit to be on top of the windowing system. In X, programmers can use a variety of toolkits (for example, the Motif, OpenLook, InterViews <ref> [Linton 89] </ref>, Garnet [Myers 90c] or tk [Ousterhout 91] toolkits can be used on top of X), but the window manager must usually implement its user interface from scratch. <p> The other variety uses an object-oriented programming style which makes it easier for the designer to customize the interaction techniques. Examples include Smalltalk [Tesler 81], Andrew [Palay 88], Garnet [Myers 90c], InterViews <ref> [Linton 89] </ref>, Xt [McCormack 88], Amulet [Myers 96a], and the Java toolkit AWT [Sun 96]. <p> To implement the objects, the toolkit might invent its own object system, as was done with Xt, Andrew, Garnet and Amulet, or it might use an existing object system, as was done in InterViews <ref> [Linton 89] </ref> which uses C++, NeXTStep from NeXT which uses Objective-C, and AWT uses Java [Sun 96]. The usual way that object-oriented toolkits interface with application programs is through the use of call-back procedures. <p> Unidraw [Vlissides 90] is a research framework, but it is more specialized for graphical editors. This means that it can provide even more support. Unidraw uses the C++ object-oriented language and is part of the InterViews system <ref> [Linton 89] </ref>. Unidraw has been used to create various drawing and CAD programs, and a user interface editor [Vlissides 91].
Reference: [MacroMedia 96] <author> MacroMedia. </author> <title> Director. </title> <address> 600 Townsend Street, San Francisco, CA 94103, macropr@macromedia.com, http://www.macromedia.com/. 1996. </address>
Reference-contexts: 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director <ref> [MacroMedia 96] </ref> 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 Interface Builders DialogEditor [Cardelli 88], NeXT Interface Builder [NeXT 91], Visual Basic, UIM/X [VisualEdge 90] 8.2.4.3 Data Visualization Tools DataViews [DataViews 95] 8.2.4.4 Graphical Editors Peridot [Myers 88b], DEMO [Fisher 92], Marquise [Myers 93] 8.2.4.5 article that discusses the technique. <p> However, it is difficult to define other behaviors. In general, there may be some support for type-in fields and menus in prototyping tools, but there is little ability to process or test the results. For graphical user interfaces, designers often use tools like Macromedia's Director <ref> [MacroMedia 96] </ref> which is actually an animation tool. The designer can draw example screens, and then specify that when the mouse is pressed in a particular place, an animation should start or a different screen should be displayed.
Reference: [McCormack 88] <author> Joel McCormack and Paul Asente. </author> <title> An Overview of the X Toolkit. </title> <booktitle> In ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 46-55. </pages> <booktitle> Proceedings UIST'88, </booktitle> <address> Banff, Alberta, Canada, </address> <month> October, </month> <year> 1988. </year>
Reference-contexts: Because the designers of X could not agree on a single look-and-feel, they created an intrinsics layer on which to build different widget sets, which they called xt <ref> [McCormack 88] </ref>. This layer provides the common services, such as techniques for object-oriented programming and layout control. The widget UIMSs, Toolkits, Interface Builders - 16 - To appear in Handbook of UI Design set layer is the collection of widgets that is implemented using the intrinsics. <p> The other variety uses an object-oriented programming style which makes it easier for the designer to customize the interaction techniques. Examples include Smalltalk [Tesler 81], Andrew [Palay 88], Garnet [Myers 90c], InterViews [Linton 89], Xt <ref> [McCormack 88] </ref>, Amulet [Myers 96a], and the Java toolkit AWT [Sun 96].
Reference: [Metrowerks 96] <institution> Metrowerks, Inc. PowerPlant for CodeWarrior. </institution> <address> 2201 Donley Drive, Suite 310, Austin, TX 78758, (800)377-5416, http://www.metrowerks.com/. 1996. </address>
Reference-contexts: MacApp was very successful at simplifying the writing of Macintosh applications. Today, there are multiple frameworks to help build applications for most major platforms, including the Microsoft Foundation Classes for Windows, and the CodeWarrior PowerPlant <ref> [Metrowerks 96] </ref> for the Macintosh. Unidraw [Vlissides 90] is a research framework, but it is more specialized for graphical editors. This means that it can provide even more support. Unidraw uses the C++ object-oriented language and is part of the InterViews system [Linton 89].
Reference: [Myers 84] <author> Brad A. Myers. </author> <title> The User Interface for Sapphire. </title> <journal> IEEE Computer Graphics and Applications 4(12) </journal> <pages> 13-23, </pages> <month> December, </month> <year> 1984. </year>
Reference-contexts: For example, the EMACs text editor [Stallman 79], and the Smalltalk [Tesler 81] and DLISP [Teitelman 79] programming environments had their own windowing systems. Later systems implemented the windowing system as an integral part of the operating system, such as Sapphire for PERQs <ref> [Myers 84] </ref>, SunView for Suns, and the Macintosh and Microsoft Windows systems.
Reference: [Myers 86] <author> Brad A. Myers. </author> <title> A Complete and Efficient Implementation of Covered Windows. </title> <booktitle> IEEE Computer 19(9) </booktitle> <pages> 57-67, </pages> <month> September, </month> <year> 1986. </year>
Reference-contexts: These operations can be much quicker, but are very dangerous and therefore should seldom be used. Most modern computers provide graphics hardware that is optimized to work efficiently with the window system. In early windowing systems, such as Smalltalk [Tesler 81] and Sapphire <ref> [Myers 86] </ref>, the primary output operation was BitBlt (also called ``RasterOp''). These systems primarily supported monochrome screens (each pixel is either black or white). BitBlt takes a rectangle of pixels from one part of the screen and copies it to another part.
Reference: [Myers 88a] <author> Brad A. Myers. </author> <title> A Taxonomy of User Interfaces for Window Managers. </title> <journal> IEEE Computer Graphics and Applications 8(5) </journal> <pages> 65-84, </pages> <month> Sept, </month> <year> 1988. </year> <note> UIMSs, Toolkits, Interface Builders - 38 - To appear in Handbook of UI Design </note>
Reference-contexts: Windowing Systems A windowing system is a software package that helps the user monitor and control different contexts by separating them physically onto different parts of one or more display screens. A survey of various windowing systems was published earlier <ref> [Myers 88a] </ref>. Although most of today's systems provide toolkits on top of the windowing systems, as will be explained below, toolkits generally only address the drawing of widgets such as buttons, menus and scroll bars. <p> It is possible, for example, to run applications that use Motif widgets inside the windows controlled by the OpenLook window manager. A discussion of the options for the user interfaces of window managers was previously published <ref> [Myers 88a] </ref>. Also, the video All the Widgets [Myers 90b] has a 30 minute segment showing many different forms of window manager user interfaces. Some parts of the user interface of a windowing system, which is sometimes called its ``look and feel,'' can apparently be copyrighted and patented.
Reference: [Myers 88b] <author> Brad A. Myers. </author> <title> Creating User Interfaces by Demonstration. </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 Interface Builders DialogEditor [Cardelli 88], NeXT Interface Builder [NeXT 91], Visual Basic, UIM/X [VisualEdge 90] 8.2.4.3 Data Visualization Tools DataViews [DataViews 95] 8.2.4.4 Graphical Editors Peridot <ref> [Myers 88b] </ref>, DEMO [Fisher 92], Marquise [Myers 93] 8.2.4.5 article that discusses the technique. UIMSs, Toolkits, Interface Builders - 21 - To appear in Handbook of UI Design 8.2.1 Language Based With most of the older user interface tools, the designer specifies the user interface in a special-purpose language. <p> As a result of the generalization task of converting the example objects into parameterized prototypes that can change at run-time, most of these systems are still in the research phase. Peridot <ref> [Myers 88b] </ref> allows new, custom widgets to be created. The primitives that the designer manipulates with the mouse are rectangles, circles, text, and lines. The system generalizes from the designer's actions to create parameterized, object-oriented procedures like those that might be found in toolkits.
Reference: [Myers 89] <author> Brad A. Myers, Brad Vander Zanden, and Roger B. Dannenberg. </author> <title> Creating Graphical Interactive Application Objects by Demonstration. </title> <booktitle> In ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 95-104. </pages> <booktitle> Proceedings UIST'89, </booktitle> <address> Williamsburg, VA, </address> <month> November, </month> <year> 1989. </year>
Reference-contexts: The primitives that the designer manipulates with the mouse are rectangles, circles, text, and lines. The system generalizes from the designer's actions to create parameterized, object-oriented procedures like those that might be found in toolkits. Experiments showed that Peridot can be used by non-programmers. Lapidary <ref> [Myers 89] </ref> extends the ideas of Peridot to allow general application-specific objects to be drawn. For example, the designer can draw the nodes and arcs for a graph program.
Reference: [Myers 90a] <author> Brad A. Myers. </author> <title> A New Model for Handling Input. </title> <journal> ACM Transactions on Information Systems 8(3) </journal> <pages> 289-320, </pages> <month> July, </month> <year> 1990. </year>
Reference-contexts: This problem can occur when the window is scrolled. Although these problems have been known for a long time, there has been little research on new input models (an exception is the Garnet Interactors model <ref> [Myers 90a] </ref>). UIMSs, Toolkits, Interface Builders - 11 - To appear in Handbook of UI Design 5.2.3 Communication In the X windowing system and NeWS, all communication between applications and the window system uses inter-process communication through a network protocol.
Reference: [Myers 90b] <author> Brad A. Myers. </author> <title> All the Widgets. </title> <note> SIGGRAPH Video Review 57, </note> <year> 1990. </year>
Reference-contexts: It is possible, for example, to run applications that use Motif widgets inside the windows controlled by the OpenLook window manager. A discussion of the options for the user interfaces of window managers was previously published [Myers 88a]. Also, the video All the Widgets <ref> [Myers 90b] </ref> has a 30 minute segment showing many different forms of window manager user interfaces. Some parts of the user interface of a windowing system, which is sometimes called its ``look and feel,'' can apparently be copyrighted and patented. <p> However, a particular widget set must pick a look-and-feel. The video All the Widgets shows many examples of widgets that have been designed over the years <ref> [Myers 90b] </ref>. For example, it shows 35 different kinds of menus. Like window manager user interfaces, the widgets' look-and-feel can be copyrighted and patented [Samuelson 93]. As was mentioned above, different widget sets (with different looks and feels) can be implemented on top of the same intrinsics.
Reference: [Myers 90c] <author> Brad A. Myers, Dario A. Giuse, Roger B. Dannenberg, Brad Vander Zanden, David S. Kosbie, Edward Pervin, Andrew Mickish, and Philippe Marchal. Garnet: </author> <title> Comprehensive Support for Graphical, Highly-Interactive User Interfaces. </title> <booktitle> IEEE Computer 23(11) </booktitle> <pages> 71-85, </pages> <month> November, </month> <year> 1990. </year>
Reference-contexts: When the X system was being developed, the developers could not agree on a single toolkit, so they left the toolkit to be on top of the windowing system. In X, programmers can use a variety of toolkits (for example, the Motif, OpenLook, InterViews [Linton 89], Garnet <ref> [Myers 90c] </ref> or tk [Ousterhout 91] toolkits can be used on top of X), but the window manager must usually implement its user interface from scratch. <p> Examples of this style include the SunTools toolkit for the SunView windowing system, and the Macintosh Toolbox [Apple 85]. The other variety uses an object-oriented programming style which makes it easier for the designer to customize the interaction techniques. Examples include Smalltalk [Tesler 81], Andrew [Palay 88], Garnet <ref> [Myers 90c] </ref>, InterViews [Linton 89], Xt [McCormack 88], Amulet [Myers 96a], and the Java toolkit AWT [Sun 96]. <p> This means that code for one toolkit is difficult to port to a different toolkit. Therefore, research is being directed at reducing the number of call-backs in user interface software [Myers 91a]. Some research toolkits have added novel features to the toolkit intrinsics. For example, Garnet <ref> [Myers 90c] </ref>, Rendezvous [Hill 93], Bramble [Gleicher 93] and Amulet [Myers 96a], allow the objects to be connected using constraints, which are relationships that are declared once and then maintained automatically by the system. <p> All of the toolkits that work on multiple platforms can be considered virtual toolkits of the second type. For example, SUIT [Pausch 92] and Garnet <ref> [Myers 90c] </ref> work on X, Macintosh and Windows. <p> The HUMANOID modeling language includes abstraction, composition, recursion, iteration and conditional constructs to support sophisticated interfaces. The HUMANOID system, which is built on top of the Garnet toolkit <ref> [Myers 90c] </ref>, provides a number of interactive modeling tools to help the designer specify the model. The developers of HUMANOID and UIDE are collaborating on a new combined model called MASTERMIND that integrates their approaches [Neches 93]. The ITS [Wiecha 90] system also uses rules to generate an interface.
Reference: [Myers 90d] <author> Brad A. Myers. </author> <title> Taxonomies of Visual Programming and Program Visualization. </title> <journal> Journal of Visual Languages and Computing 1(1) </journal> <pages> 97-123, </pages> <month> March, </month> <year> 1990. </year>
Reference-contexts: Fourth generation languages (4GLs), that support defining the interactive forms for accessing and entering data, also fall into this category. 8.2.1.8 Visual Programming ``Visual programs'' use graphics and two (or more) dimensional layout as part of the program specification <ref> [Myers 90d] </ref>. Many different approaches to using visual programming to specify user interfaces have been investigated. Most systems that support state transition networks (section 8.2.1.1) use a visual representation. Another popular technique is to use dataflow languages. <p> Using a visual language seems to make it easier for novice programmers, but large programs still suffer from the familiar ``maze of wires'' problem. Other papers (e.g., <ref> [Myers 90d] </ref>) have analyzed the strengths and weaknesses of visual programming in detail. Another popular language is Visual Basic from Microsoft.
Reference: [Myers 91a] <author> Brad A. Myers. </author> <title> Separating Application Code from Toolkits: Eliminating the Spaghetti of Call-Backs. </title> <booktitle> In ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 211-220. </pages> <booktitle> Proceedings UIST'91, </booktitle> <address> Hilton Head, SC, </address> <month> November, </month> <year> 1991. </year>
Reference-contexts: In addition, different toolkits, even when implemented on the same intrinsics like Motif and OpenLook, have different call-back protocols. This means that code for one toolkit is difficult to port to a different toolkit. Therefore, research is being directed at reducing the number of call-backs in user interface software <ref> [Myers 91a] </ref>. Some research toolkits have added novel features to the toolkit intrinsics. For example, Garnet [Myers 90c], Rendezvous [Hill 93], Bramble [Gleicher 93] and Amulet [Myers 96a], allow the objects to be connected using constraints, which are relationships that are declared once and then maintained automatically by the system. <p> The Steamer project at BBN demonstrated many of the ideas later incorporated into interface builders and was probably the first object-oriented graphics system [Stevens 83]. Other examples of research interface builders are DialogEditor [Cardelli 88], vu [Singh 88] and Gilt <ref> [Myers 91a] </ref>. There are literally hundreds of commercial interface builders. Just two examples are the NeXT Interface Builder [NeXT 91], and UIM/X for X [VisualEdge 90]. Visual Basic is essentially an Interface Builder coupled with an editor for an interpreted language.
Reference: [Myers 91b] <author> Brad A. Myers. </author> <title> Graphical Techniques in a Spreadsheet for Specifying User Interfaces. </title> <booktitle> In Human Factors in Computing Systems, </booktitle> <pages> pages 243-249. </pages> <booktitle> Proceedings SIGCHI'91, </booktitle> <address> New Orleans, LA, </address> <month> April, </month> <year> 1991. </year>
Reference-contexts: Examples Section Language Based 8.2.1 State Transition Networks [Newman 68], VAPS [VAPS 95] 8.2.1.1 Context-Free Grammars YACC, LEX, Syngraph [Olsen 83] 8.2.1.2 Event Languages Sassafras [Hill 86], EET [Frank 96], HyperTalk 8.2.1.3 Declarative Languages Cousin [Hayes 85], Open Dialog [Schulert 85], Motif UIL 8.2.1.4 Constraint Languages Thinglab [Borning 81], C32 <ref> [Myers 91b] </ref> 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE [Sukaviriya <p> In addition, some systems have provided higher-level interfaces to constraints. Graphical Thinglab [Borning 86b] allows the designer to create constraints by wiring icons together, and NoPump [Wilde 90] and C32 <ref> [Myers 91b] </ref> allow constraints to be defined using a spreadsheet-like interface. The advantage of constraints is that they are a natural way to express many kinds of relationships that arise frequently in user interfaces.
Reference: [Myers 92a] <author> Brad A. Myers and Mary Beth Rosson. </author> <title> Survey on User Interface Programming. </title> <booktitle> In Human Factors in Computing Systems, </booktitle> <pages> pages 195-202. </pages> <booktitle> Proceedings SIGCHI'92, </booktitle> <address> Monterey, CA, </address> <month> May, </month> <year> 1992. </year>
Reference-contexts: A 1992 study found that an average of 48% of the code of applications is devoted to the user interface, and that about 50% of the implementation time is devoted to implementing the user interface portion <ref> [Myers 92a] </ref>, and the numbers are probably much higher today. As interfaces become easier to use, they become harder to create [Myers 94]. <p> Experience has shown that real interfaces often contain hundreds of call-backs, which makes the code harder to modify and maintain <ref> [Myers 92a] </ref>. In addition, different toolkits, even when implemented on the same intrinsics like Motif and OpenLook, have different call-back protocols. This means that code for one toolkit is difficult to port to a different toolkit. <p> However, a survey reported that conventional toolkits actually make this separation more difficult, due to the large number of call-back procedures required <ref> [Myers 92a] </ref>. Therefore, further research is needed into ways to better modularize the code, and how tools can support this.
Reference: [Myers 92b] <author> Brad A. Myers (editor). </author> <title> Languages for Developing User Interfaces. </title> <publisher> Jones and Bartlett, </publisher> <address> Boston, MA, </address> <year> 1992. </year>
Reference-contexts: Indeed, an entire book is devoted to investigating the languages for programming user interfaces <ref> [Myers 92b] </ref>. 8.2.2 Application Frameworks After the Macintosh Toolbox had been available for a little while, Apple discovered that programmers had a difficult time figuring out how to call the various toolkit functions, and how to ensure that the resulting interface met the Apple guidelines. <p> Furthermore, an integrated environment, where the graphical parts of an application can be specified graphically and the rest textually, would make the generation of applications much easier. How programming languages can be improved to better support user interface software is the topic of a book <ref> [Myers 92b] </ref>. 10.2 Increased Depth Many researchers are trying to create tools that will cover more of the user interface, such as application-specific graphics and behaviors. The challenge here is to allow flexibility to application developers while still providing a high level of support. <p> However, end user programming is rare in other applications, and where it exists, usually requires learning conventional programming. For example, AutoCAD provides Lisp for customization. More effective mechanisms for users to customize existing applications and create new ones are needed <ref> [Myers 92b] </ref>. However, these should not be built into individual applications as is done today, since this means that the user must learn a different programming technique for each application. Instead, the facilities should be provided at the system level, and therefore should be part of the underlying toolkit.
Reference: [Myers 92c] <author> Brad A. Myers. </author> <title> Demonstrational Interfaces: A Step Beyond Direct Manipulation. </title> <booktitle> IEEE Computer 25(8) </booktitle> <pages> 61-73, </pages> <month> August, </month> <year> 1992. </year>
Reference-contexts: Therefore, the designer can only draw an example of the desired display, which will be modified at run-time, and so these tools are called ``demonstrational programming'' <ref> [Myers 92c] </ref>. This distinguishes these programs from the graphical tools of the previous three sections, where the full picture can be specified at design time.
Reference: [Myers 92d] <author> Brad A. Myers and Brad Vander Zanden. </author> <title> Environment for Rapid Creation of Interactive Design Tools. </title> <journal> The Visual Computer; International Journal of Computer Graphics 8(2) </journal> <pages> 94-116, </pages> <month> February, </month> <year> 1992. </year>
Reference-contexts: Each one takes an enormous effort. Therefore, work is needed in ways to make the tools themselves easier to create. For example, the Garnet toolkit explored mechanisms specifically designed to make high-level graphical tools easier to create <ref> [Myers 92d] </ref>. The Unidraw framework has also proven useful for creating interface builders [Vlissides 91]. However, more work is needed. 11. Conclusions The area of user interface tools is expanding rapidly.
Reference: [Myers 93] <author> Brad A. Myers, Richard G. McDaniel, and David S. Kosbie. Marquise: </author> <title> Creating Complete User Interfaces by Demonstration. </title> <booktitle> In Human Factors in Computing Systems, </booktitle> <pages> pages 293-300. </pages> <booktitle> Proceedings INTERCHI'93, </booktitle> <address> Amsterdam, The Netherlands, </address> <month> April, </month> <year> 1993. </year>
Reference-contexts: Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 Interface Builders DialogEditor [Cardelli 88], NeXT Interface Builder [NeXT 91], Visual Basic, UIM/X [VisualEdge 90] 8.2.4.3 Data Visualization Tools DataViews [DataViews 95] 8.2.4.4 Graphical Editors Peridot [Myers 88b], DEMO [Fisher 92], Marquise <ref> [Myers 93] </ref> 8.2.4.5 article that discusses the technique. UIMSs, Toolkits, Interface Builders - 21 - To appear in Handbook of UI Design 8.2.1 Language Based With most of the older user interface tools, the designer specifies the user interface in a special-purpose language. <p> The DEMO system [Fisher 92] allows UIMSs, Toolkits, Interface Builders - 31 - To appear in Handbook of UI Design some dynamic, run-time properties of the objects to be demonstrated, such as how objects are created. The Marquise tool <ref> [Myers 93] </ref> allows the designer to demonstrate when various behaviors should happen, and supports palettes which control the behaviors. With Pavlov [Wolber 96], the user can demonstrate how widgets should control a car's movement in a driving game.
Reference: [Myers 94] <author> Brad A. Myers. </author> <title> Challenges of HCI Design and Implementation. </title> <booktitle> ACM Interactions 1(1) </booktitle> <pages> 73-83, </pages> <month> January, </month> <year> 1994. </year>
Reference-contexts: As interfaces become easier to use, they become harder to create <ref> [Myers 94] </ref>. Today, direct manipulation interfaces (also called ``GUIs'' for Graphical User Interfaces) are almost universal: one 1993 study found that 97% of all software development on Unix involved a GUI [XBusiness 94, p.80].
Reference: [Myers 96a] <author> Brad A. Myers, Alan Ferrency, Rich McDaniel, Robert C. Miller, Patrick Doane, Andy Mickish, Alex Klimovitski. </author> <title> The Amulet V2.0 Reference Manual. </title> <type> Technical Report CMU-CS-95-166-R1, </type> <institution> Carnegie Mellon University Computer Science Department, </institution> <month> May, </month> <year> 1996. </year> <note> also Human Computer Interaction Institute CMU-HCII-95-102-R1. http://www.cs.cmu.edu/~amulet. </note>
Reference-contexts: The other variety uses an object-oriented programming style which makes it easier for the designer to customize the interaction techniques. Examples include Smalltalk [Tesler 81], Andrew [Palay 88], Garnet [Myers 90c], InterViews [Linton 89], Xt [McCormack 88], Amulet <ref> [Myers 96a] </ref>, and the Java toolkit AWT [Sun 96]. <p> Therefore, research is being directed at reducing the number of call-backs in user interface software [Myers 91a]. Some research toolkits have added novel features to the toolkit intrinsics. For example, Garnet [Myers 90c], Rendezvous [Hill 93], Bramble [Gleicher 93] and Amulet <ref> [Myers 96a] </ref>, allow the objects to be connected using constraints, which are relationships that are declared once and then maintained automatically by the system. <p> For example, the SUIT system [Pausch 92] (which contains a toolkit and an interface builder), is specifically designed to be easy to learn and is aimed at classroom instruction. Amulet <ref> [Myers 96a] </ref> provides high-level support for graphical, direct manipulation interfaces, and handles input as hierarchical command objects, making Undo easier to implement [Myers 96b]. Rendezvous [Hill 93] and Visual Obliq [Bharat 94] are designed to make it easier to create applications that support multiple users on multiple machines operating synchronously. <p> Languages Cousin [Hayes 85], Open Dialog [Schulert 85], Motif UIL 8.2.1.4 Constraint Languages Thinglab [Borning 81], C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet <ref> [Myers 96a] </ref>, Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 Interface Builders DialogEditor [Cardelli 88], NeXT <p> This means that it can provide even more support. Unidraw uses the C++ object-oriented language and is part of the InterViews system [Linton 89]. Unidraw has been used to create various drawing and CAD programs, and a user interface editor [Vlissides 91]. The Amulet framework <ref> [Myers 96a] </ref> is also aimed at graphical applications, but due to its graphical data model, many of the built-in routines can be used without change (the programmer does not usually need to write methods for subclasses).
Reference: [Myers 96b] <author> Brad A. Myers and David Kosbie. </author> <title> Reusable Hierarchical Command Objects. </title> <booktitle> In Human Factors in Computing Systems, </booktitle> <pages> pages 260-267. </pages> <booktitle> Proceedings SIGCHI'96, </booktitle> <address> Vancouver, BC, Canada, </address> <month> April, </month> <year> 1996. </year>
Reference-contexts: Amulet [Myers 96a] provides high-level support for graphical, direct manipulation interfaces, and handles input as hierarchical command objects, making Undo easier to implement <ref> [Myers 96b] </ref>. Rendezvous [Hill 93] and Visual Obliq [Bharat 94] are designed to make it easier to create applications that support multiple users on multiple machines operating synchronously.
Reference: [Myers 96c] <author> Brad A. Myers, Robert C. Miller, Rich McDaniel, and Alan Ferrency. </author> <title> Easily Adding Animations to Interfaces Using Constraints. </title> <note> 1996.Submitted for Publication. UIMSs, Toolkits, Interface Builders - 39 - To appear in Handbook of UI Design </note>
Reference-contexts: Special support for animations has been added to Artkit [Hudson 93] and Amulet <ref> [Myers 96c] </ref>. Tk [Ousterhout 91] is a popular toolkit for the X window system because it uses an interpretive language called tcl which makes it possible to dynamically change the user interface. Tcl also supports the Unix style of programming where many small programs are glued together. 7.
Reference: [Neches 93] <author> Robert Neches, Jim Foley, Pedro Szekely, Piyawadee Sukaviriya, Ping Luo, Srdjan Kovacevic, and Scott Hudson. </author> <title> Knowledgable Development Environments Using Shared Design Models. </title> <booktitle> In Proceedings of the 1993 International Workshop on Intelligent User Interfaces, </booktitle> <pages> pages 63-70. </pages> <publisher> ACM SIGCHI, </publisher> <address> Orlando, FL, </address> <month> January, </month> <year> 1993. </year>
Reference-contexts: [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND <ref> [Neches 93] </ref> 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 Interface Builders DialogEditor [Cardelli 88], NeXT Interface Builder [NeXT 91], Visual Basic, UIM/X [VisualEdge 90] 8.2.4.3 Data Visualization Tools DataViews [DataViews 95] 8.2.4.4 Graphical Editors Peridot [Myers 88b], DEMO <p> The HUMANOID system, which is built on top of the Garnet toolkit [Myers 90c], provides a number of interactive modeling tools to help the designer specify the model. The developers of HUMANOID and UIDE are collaborating on a new combined model called MASTERMIND that integrates their approaches <ref> [Neches 93] </ref>. The ITS [Wiecha 90] system also uses rules to generate an interface. ITS was used to create the visitor information system for the EXPO 1992 worlds fair in Seville, Spain.
Reference: [Newbery 88] <author> Frances J. Newbery. </author> <title> An interface description language for graph editors. </title> <booktitle> In 1988 IEEE Workshop on Visual Languages, </booktitle> <pages> pages 144-149. </pages> <address> Pittsburgh, PA, </address> <month> October, </month> <year> 1988. </year> <booktitle> IEEE Computer Society Order Number 876. </booktitle>
Reference-contexts: The Amulet framework [Myers 96a] is also aimed at graphical applications, but due to its graphical data model, many of the built-in routines can be used without change (the programmer does not usually need to write methods for subclasses). Even more specialized are various graph programs, such as Edge <ref> [Newbery 88] </ref> and TGE [Karrer 90]. These provide a framework in which the designer can create programs that display their data as trees or graphs. The programmer typically specializes the node and arc classes, and specifies some of the commands, but the framework handles layout and the overall control.
Reference: [Newman 68] <author> William M. Newman. </author> <title> A System for Interactive Graphical Programming. </title> <booktitle> In AFIPS Spring Joint Computer Conference, </booktitle> <pages> pages 47-54. </pages> <year> 1968. </year>
Reference-contexts: Of course, some tools use different techniques for specifying different parts of the user UIMSs, Toolkits, Interface Builders - 20 - To appear in Handbook of UI Design interface. These are classified by their predominant or most interesting feature. Specification Format Examples Section Language Based 8.2.1 State Transition Networks <ref> [Newman 68] </ref>, VAPS [VAPS 95] 8.2.1.1 Context-Free Grammars YACC, LEX, Syngraph [Olsen 83] 8.2.1.2 Event Languages Sassafras [Hill 86], EET [Frank 96], HyperTalk 8.2.1.3 Declarative Languages Cousin [Hayes 85], Open Dialog [Schulert 85], Motif UIL 8.2.1.4 Constraint Languages Thinglab [Borning 81], C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 <p> In addition to input tokens, calls to application procedures and the output to display can also be put on the arcs in some systems. Newman implemented a simple tool using finite state machines in 1968 <ref> [Newman 68] </ref> which handled textual input. This was apparently the first user interface tool.
Reference: [NeXT 91] <author> NeXT, Inc. </author> <title> NeXTStep and the NeXT Interface Builder. 900 Chesapeake Drive, </title> <address> Redwood City, CA 94063. </address> <year> 1991. </year>
Reference-contexts: [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 Interface Builders DialogEditor [Cardelli 88], NeXT Interface Builder <ref> [NeXT 91] </ref>, Visual Basic, UIM/X [VisualEdge 90] 8.2.4.3 Data Visualization Tools DataViews [DataViews 95] 8.2.4.4 Graphical Editors Peridot [Myers 88b], DEMO [Fisher 92], Marquise [Myers 93] 8.2.4.5 article that discusses the technique. <p> Other examples of research interface builders are DialogEditor [Cardelli 88], vu [Singh 88] and Gilt [Myers 91a]. There are literally hundreds of commercial interface builders. Just two examples are the NeXT Interface Builder <ref> [NeXT 91] </ref>, and UIM/X for X [VisualEdge 90]. Visual Basic is essentially an Interface Builder coupled with an editor for an interpreted language. Many of the tools discussed above, such as the virtual toolkits, visual languages, and application frameworks, also contain interface builders.
Reference: [Nielsen 93] <author> Jakob Nielsen. </author> <title> Noncommand User Interfaces. </title> <journal> Communications of the ACM 36(4) </journal> <pages> 83-99, </pages> <month> April, </month> <year> 1993. </year>
Reference-contexts: In these ``non-WIMP'' applications (WIMP stands for Windows, Icons, Menus and Pointing devices), designers will also need better control over the timing of the interface, to support animations and various new media like video <ref> [Nielsen 93] </ref>. Although a few tools are directed at multiple-user applications, there are no direct graphical specification tools, and the current tools are limited in the styles of applications they support. 10.4 End User Programming and Customization One of the most successful computer programs of all time is the spreadsheet.
Reference: [Olsen 83] <author> Dan R. Olsen, Jr. and Elizabeth P. Dempsey. Syngraph: </author> <title> A Graphical User Interface Generator. </title> <booktitle> In Computer Graphics, </booktitle> <pages> pages 43-50. </pages> <booktitle> Proceedings SIGGRAPH'83, </booktitle> <address> Detroit, MI, </address> <month> July, </month> <year> 1983. </year>
Reference-contexts: These are classified by their predominant or most interesting feature. Specification Format Examples Section Language Based 8.2.1 State Transition Networks [Newman 68], VAPS [VAPS 95] 8.2.1.1 Context-Free Grammars YACC, LEX, Syngraph <ref> [Olsen 83] </ref> 8.2.1.2 Event Languages Sassafras [Hill 86], EET [Frank 96], HyperTalk 8.2.1.3 Declarative Languages Cousin [Hayes 85], Open Dialog [Schulert 85], Motif UIL 8.2.1.4 Constraint Languages Thinglab [Borning 81], C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] <p> For example, the designer might specify the user interface syntax using some form of BNF. Examples of grammar-based systems are Syngraph <ref> [Olsen 83] </ref> and parsers built with YACC and LEX in Unix. Grammar-based tools, like state diagram tools, are not appropriate for specifying highly-interactive interfaces, since they are oriented to batch processing of strings with a complex syntactic structure.
Reference: [Olsen 86] <author> Dan R. Olsen, Jr. Mike: </author> <title> The Menu Interaction Kontrol Environment. </title> <journal> ACM Transactions on Graphics 5(4) </journal> <pages> 318-344, </pages> <month> October, </month> <year> 1986. </year>
Reference-contexts: Constraint Languages Thinglab [Borning 81], C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE <ref> [Olsen 86] </ref>, ITS [Wiecha 90], UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 Interface Builders DialogEditor [Cardelli 88], NeXT Interface Builder [NeXT 91], Visual Basic, UIM/X [VisualEdge 90] 8.2.4.3 Data
Reference: [Olsen 87] <author> Dan R. Olsen, Jr. </author> <title> Larger Issues in User Interface Management. </title> <booktitle> Computer Graphics 21(2) </booktitle> <pages> 134-137, </pages> <month> April, </month> <year> 1987. </year>
Reference-contexts: One problem with all of these is that they can only be used by professional programmers. Some programmers have objected to the requirement for learning a new language for programming just the user interface portion <ref> [Olsen 87] </ref>. This has been confirmed by market research [XBusiness 94, p.29]. Furthermore, it seems more natural to define the graphical part of a user interface using a graphical editor (see section 8.2.4).
Reference: [Olsen 88] <author> Dan R. Olsen, Jr. and Bradley W. Halversen. </author> <title> Interface Usage Measurements in a User Interface Management System. </title> <booktitle> In ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 102-108. </pages> <booktitle> Proceedings UIST'88, </booktitle> <address> Banff, Alberta, Canada, </address> <month> October, </month> <year> 1988. </year>
Reference-contexts: There may also be an after-run-time component that helps with the evaluation and debugging of the user interface. Unfortunately, very few user interface tools have an after-run-time component. This is partially because tools that have tried, such as MIKE <ref> [Olsen 88] </ref>, discovered that there are very few metrics that can be applied by computers. A new generation of tools are trying to evaluate how people will interact with interfaces by automatically creating cognitive models from high-level descriptions of the user interface. <p> For example, the UAN [Hartson 90] is a notation for expressing the end user's actions and the system's responses. Finally, much work is needed in ways for tools to help evaluate interface designs. Initial attempts, such as in MIKE <ref> [Olsen 88] </ref>, have highlighted the need for better models and metrics against which to evaluate the user interfaces. Research in this area by cognitive psychologists and other user interface researchers (e.g., [Kieras 95]) is continuing.
Reference: [Olsen 89] <author> Dan R. Olsen, Jr. </author> <title> A Programming Language Basis for User Interface Management. </title> <booktitle> In Human Factors in Computing Systems, </booktitle> <pages> pages 171-176. </pages> <booktitle> Proceedings SIGCHI'89, </booktitle> <address> Austin, TX, </address> <month> April, </month> <year> 1989. </year>
Reference-contexts: To solve this problem, some tools use automatic generation so that the tool makes many of these choices from a much higher-level specification. Many of these tools, such as Mickey <ref> [Olsen 89] </ref>, Jade [Vander Zanden 90], and DON [Kim 93] have concentrated on creating menus and dialog boxes. Jade allows the designer to use a graphical editor to edit the generated interface if it is not good enough.
Reference: [Olsen 92] <author> Dan R. Olsen, Jr. </author> <title> User Interface Management Systems: Models and Algorithms. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1992. </year>
Reference-contexts: The rest of the program is called the application or the application semantics. User interface tools have been called various names over the years, with the most popular being User Interface Management Systems (UIMS) <ref> [Olsen 92] </ref>. However, many people feel that the term UIMS should be used only for tools that handle the sequencing of operations (what happens after each event from the user), so other terms like Toolkits, User Interface Development Environments, Interface Builders, Interface Development Tools, and Application Frameworks have been used. <p> The language is usually used to specify the syntax of the user interface; i.e., the legal sequences of input and output actions. This is sometimes called the ``dialog.'' Green [Green 86] provides an extensive comparison of grammars, state transition diagrams, and event languages, and Olsen <ref> [Olsen 92] </ref> surveys various UIMS techniques. 8.2.1.1 State Transition Networks Since many parts of user interfaces involve handling a sequence of input events, it is natural to think of using a state transition network to code the interface.
Reference: [Olsen 93] <author> Dan R. Olsen Jr., James D. Foley, Scott E. Hudson, James Miller, and Brad Myers. </author> <title> Research Directions for User Interface Software Tools. </title> <booktitle> Behaviour and Information Technology 12(2) </booktitle> <pages> 80-97, </pages> <address> March-April, </address> <year> 1993. </year> <title> [Open Interface 95] NeuronData. Open Interface. </title> <type> 1310 Villa Street, </type> <institution> Mountain View, </institution> <address> CA 94041, (415) 943-3450, sales@neurondata.com. </address> <year> 1995. </year>
Reference-contexts: Research Issues Although there are many user interface tools, there are plenty of areas in which further research is needed. A report prepared for an NSF study discusses future research ideas for user interface tools at length <ref> [Olsen 93] </ref>. Here, a few of the important ones are summarized. 10.1 New Programming Languages The built-in input/output primitives in today's programming languages, such as printf/scanf or cout/cin, support a textual question-and-answer style of user interface which is modal and well-known to be poor.
Reference: [OpenGL 93] <institution> Silicon Graphics, Inc. </institution> <address> Open-GL. 2011 N. Shoreline Blvd. Mountain View, CA 94039-7311. </address> <pages> (415) 960-1980. </pages> <year> 1993. </year>
Reference-contexts: All of the standard output models only contain drawing operations for two dimensional objects. Two extensions to support 3-D objects are PEX and OpenGL. PEX [Gaskins 92] is an extension to the X windowing system that incorporates much of the PHIGS graphics standard. OpenGL <ref> [OpenGL 93] </ref> is based on the GL programming interface that has been used for many years on Silicon Graphics machines. OpenGL provides machine independence for 3-D since it is available for various X platforms (SGI, Sun, etc.) and is included as a standard part of Microsoft Windows NT.
Reference: [Oracle 96] <institution> Oracle Tools. Oracle Corporation, </institution> <address> 500 Oracle Parkway, Redwood Shores, CA, </address> <month> 94065, </month> <pages> (800) 633-0583. </pages> <year> 1996. </year>
Reference-contexts: 95] 8.2.1.1 Context-Free Grammars YACC, LEX, Syngraph [Olsen 83] 8.2.1.2 Event Languages Sassafras [Hill 86], EET [Frank 96], HyperTalk 8.2.1.3 Declarative Languages Cousin [Hayes 85], Open Dialog [Schulert 85], Motif UIL 8.2.1.4 Constraint Languages Thinglab [Borning 81], C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle <ref> [Oracle 96] </ref> 8.2.1.7 Visual Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 <p> A leading program of this type is Easel, [Easel 93], which also contains an interface builder for laying out the widgets. 8.2.1.7 Database Interfaces A very important class of commercial tools support form-based or GUI-based access to databases. Major database vendors such as Oracle <ref> [Oracle 96] </ref> provide tools which allow designers to define the user interface for accessing and setting data. Often these tools include interactive form editors (which are essentially interface builders) and special database languages.
Reference: [Ousterhout 91] <author> John K. Ousterhout. </author> <title> An X11 Toolkit Based on the Tcl Language. </title> <booktitle> In Winter, </booktitle> <pages> pages 105-115. </pages> <publisher> USENIX, </publisher> <year> 1991. </year>
Reference-contexts: In X, programmers can use a variety of toolkits (for example, the Motif, OpenLook, InterViews [Linton 89], Garnet [Myers 90c] or tk <ref> [Ousterhout 91] </ref> toolkits can be used on top of X), but the window manager must usually implement its user interface from scratch. <p> Special support for animations has been added to Artkit [Hudson 93] and Amulet [Myers 96c]. Tk <ref> [Ousterhout 91] </ref> is a popular toolkit for the X window system because it uses an interpretive language called tcl which makes it possible to dynamically change the user interface. Tcl also supports the Unix style of programming where many small programs are glued together. 7.
Reference: [Palay 88] <author> Andrew J. Palay, et. al. </author> <title> The Andrew Toolkit - An Overview. </title> <booktitle> In Proceedings Winter Usenix Technical Conference, </booktitle> <pages> pages 9-21. </pages> <address> Dallas, Tex, </address> <month> February, </month> <year> 1988. </year>
Reference-contexts: Therefore, a window manager is classified as ``covered'' if it allows windows to overlap. The tiled style was popular for a while, and was used by Cedar [Swinehart 86], and early versions of the Star [Smith 82], Andrew <ref> [Palay 88] </ref>, and Microsoft Windows. A study even suggested that using tiled windows was more efficient for users [Bly 86]. However, today tiled windows are rarely seen on conventional window systems, because users generally prefer overlapping. <p> Examples of this style include the SunTools toolkit for the SunView windowing system, and the Macintosh Toolbox [Apple 85]. The other variety uses an object-oriented programming style which makes it easier for the designer to customize the interaction techniques. Examples include Smalltalk [Tesler 81], Andrew <ref> [Palay 88] </ref>, Garnet [Myers 90c], InterViews [Linton 89], Xt [McCormack 88], Amulet [Myers 96a], and the Java toolkit AWT [Sun 96]. <p> 85], Open Dialog [Schulert 85], Motif UIL 8.2.1.4 Constraint Languages Thinglab [Borning 81], C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew <ref> [Palay 88] </ref>, OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 Interface Builders DialogEditor [Cardelli 88], NeXT Interface Builder [NeXT <p> For example, you might buy a separate text editor, ruler, paragraph formatter, spell checker, and drawing program, and have them all work together seamlessly. This approach was invented by the Andrew environment <ref> [Palay 88] </ref> which provides an object-oriented document model that supports the embedding of different kinds of data inside other documents.
Reference: [Pausch 92] <author> Randy Pausch, Matthew Conway, and Robert DeLine. </author> <title> Lesson Learned from SUIT, the Simple User Interface Toolkit. </title> <journal> ACM Transactions on Information Systems 10(4) </journal> <pages> 320-344, </pages> <month> October, </month> <year> 1992. </year> <note> UIMSs, Toolkits, Interface Builders - 40 - To appear in Handbook of UI Design </note>
Reference-contexts: For example, the SUIT system <ref> [Pausch 92] </ref> (which contains a toolkit and an interface builder), is specifically designed to be easy to learn and is aimed at classroom instruction. Amulet [Myers 96a] provides high-level support for graphical, direct manipulation interfaces, and handles input as hierarchical command objects, making Undo easier to implement [Myers 96b]. <p> All of the toolkits that work on multiple platforms can be considered virtual toolkits of the second type. For example, SUIT <ref> [Pausch 92] </ref> and Garnet [Myers 90c] work on X, Macintosh and Windows.
Reference: [Prograph 96] <author> Pictorius. Prograph. Pictorius Incorporated, </author> <title> 2745 Dutch Village Road, </title> <type> Suite 200, </type> <institution> Halifax, Nova Scotia B3L 4G7, </institution> <address> Canada, (800) 927-4847, info@prograph.com. </address> <year> 1996. </year>
Reference-contexts: 8.2.1.2 Event Languages Sassafras [Hill 86], EET [Frank 96], HyperTalk 8.2.1.3 Declarative Languages Cousin [Hayes 85], Open Dialog [Schulert 85], Motif UIL 8.2.1.4 Constraint Languages Thinglab [Borning 81], C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] Prograph <ref> [Prograph 96] </ref> 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 <p> The user interface is usually constructed directly by laying out pre-built widgets, in the style of interface builders (section 8.2.4.3). Examples of visual programming systems for creating user interfaces include Labview [Labview 96] which is specialized for controlling laboratory instruments, and Prograph <ref> [Prograph 96] </ref>. Using a visual language seems to make it easier for novice programmers, but large programs still suffer from the familiar ``maze of wires'' problem. Other papers (e.g., [Myers 90d]) have analyzed the strengths and weaknesses of visual programming in detail. Another popular language is Visual Basic from Microsoft.
Reference: [Samuelson 93] <author> Pamela Samuelson. </author> <title> Legally Speaking: The Ups and Downs of Look and Feel. </title> <journal> Communications of the ACM 36(4) </journal> <pages> 29-35, </pages> <month> April, </month> <year> 1993. </year>
Reference-contexts: Some parts of the user interface of a windowing system, which is sometimes called its ``look and feel,'' can apparently be copyrighted and patented. Which parts is a highly complex issue, and the status changes with decisions in various court cases <ref> [Samuelson 93] </ref>. 5.3.1 Presentation The presentation of the windows defines how the screen looks. One very important aspect of the presentation of windows is whether they can overlap or not. <p> The video All the Widgets shows many examples of widgets that have been designed over the years [Myers 90b]. For example, it shows 35 different kinds of menus. Like window manager user interfaces, the widgets' look-and-feel can be copyrighted and patented <ref> [Samuelson 93] </ref>. As was mentioned above, different widget sets (with different looks and feels) can be implemented on top of the same intrinsics. In addition, the same look-and-feel can be implemented on top of different intrinsics.
Reference: [Scheifler 86] <author> Robert W. Scheifler and Jim Gettys. </author> <title> The X Window System. </title> <journal> ACM Transactions on Graphics 5(2) </journal> <pages> 79-109, </pages> <month> April, </month> <year> 1986. </year>
Reference-contexts: Of course, many practical systems span multiple layers. The windowing system supports the separation of the screen into different (usually rectangular) regions, called windows. The X system <ref> [Scheifler 86] </ref> divides the window functionality into two layers: the window system, which is the functional or programming interface, and the window manager which is the user interface. <p> People writing software found this to be unacceptable because they wanted to be able to run their software on different platforms, but they would have to rewrite significant amounts of code to convert from one window system to another. The X windowing system <ref> [Scheifler 86] </ref> was created to solve this problem by providing a hardware-independent interface to windows. X has been quite successful at this, and has driven virtually all other windowing systems out of the workstation hardware market.
Reference: [Schulert 85] <author> Andrew J. Schulert, George T. Rogers, and James A. Hamilton. </author> <title> ADM-A Dialogue Manager. </title> <booktitle> In Human Factors in Computing Systems, </booktitle> <pages> pages 177-183. </pages> <booktitle> Proceedings SIGCHI'85, </booktitle> <address> San Francisco, CA, </address> <month> April, </month> <year> 1985. </year>
Reference-contexts: Specification Format Examples Section Language Based 8.2.1 State Transition Networks [Newman 68], VAPS [VAPS 95] 8.2.1.1 Context-Free Grammars YACC, LEX, Syngraph [Olsen 83] 8.2.1.2 Event Languages Sassafras [Hill 86], EET [Frank 96], HyperTalk 8.2.1.3 Declarative Languages Cousin [Hayes 85], Open Dialog <ref> [Schulert 85] </ref>, Motif UIL 8.2.1.4 Constraint Languages Thinglab [Borning 81], C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc <p> Cousin [Hayes 85] and HP/Apollo's Open-Dialogue <ref> [Schulert 85] </ref> both allow the designer to specify user interfaces in this manner. The user interfaces supported are basically forms, where fields can be text which is typed by the user, or options selected using menus or buttons.
Reference: [Singh 88] <author> Gurminder Singh and Mark Green. </author> <title> Designing the Interface Designer's Interface. </title> <booktitle> In ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 109-116. </pages> <booktitle> Proceedings UIST'88, </booktitle> <address> Banff, Alberta, Canada, </address> <month> October, </month> <year> 1988. </year>
Reference-contexts: The Steamer project at BBN demonstrated many of the ideas later incorporated into interface builders and was probably the first object-oriented graphics system [Stevens 83]. Other examples of research interface builders are DialogEditor [Cardelli 88], vu <ref> [Singh 88] </ref> and Gilt [Myers 91a]. There are literally hundreds of commercial interface builders. Just two examples are the NeXT Interface Builder [NeXT 91], and UIM/X for X [VisualEdge 90]. Visual Basic is essentially an Interface Builder coupled with an editor for an interpreted language.
Reference: [SL-GMS 93] <institution> SL Corp. </institution> <address> Suite 110 Hunt Plaza, 240 Tamal Vista Blvd., Corte Madera, CA, </address> <month> 94925, </month> <pages> (415) 927-1724. </pages> <year> 1993. </year>
Reference-contexts: However, these controls usually are not from a toolkit and are supplied by the tool. Example tools in this category include DataViews [DataViews 95], and SL-GMS <ref> [SL-GMS 93] </ref>. 8.2.4.5 Editors for Application-Specific Graphics When an application has custom graphics, it would be useful if the designer could draw pictures of what the graphics should look like rather than having to write code for this.
Reference: [Smith 82] <author> David Canfield Smith, Charles Irby, Ralph Kimball, Bill Verplank, and Erik Harslem. </author> <title> Designing the Star User Interface. </title> <journal> Byte 7(4) </journal> <pages> 242-282, </pages> <month> April, </month> <year> 1982. </year>
Reference-contexts: Therefore, a window manager is classified as ``covered'' if it allows windows to overlap. The tiled style was popular for a while, and was used by Cedar [Swinehart 86], and early versions of the Star <ref> [Smith 82] </ref>, Andrew [Palay 88], and Microsoft Windows. A study even suggested that using tiled windows was more efficient for users [Bly 86]. However, today tiled windows are rarely seen on conventional window systems, because users generally prefer overlapping. <p> is used by the Macintosh. move-to-type, which means that the mouse only has to move over a window to allow typing 5 There are usually other aspects to the desktop metaphor, however, such as presenting file operations in a way that mimics office operations, as in the Star office workstation <ref> [Smith 82] </ref>. UIMSs, Toolkits, Interface Builders - 13 - To appear in Handbook of UI Design the right margin. to it. This is usually faster for the user, but may cause input to go to the wrong window if the user accidentally knocks the mouse.
Reference: [Stallman 79] <author> Richard M. Stallman. </author> <title> Emacs: The Extensible, Customizable, Self-Documenting Display Editor. </title> <type> Technical Report 519, </type> <institution> MIT Artificial Intelligence Lab, </institution> <month> August, </month> <year> 1979. </year>
Reference-contexts: Therefore, the windowing system's programming interface has significant impact on most user interface programmers. The first windowing systems were implemented as part of a single program or system. For example, the EMACs text editor <ref> [Stallman 79] </ref>, and the Smalltalk [Tesler 81] and DLISP [Teitelman 79] programming environments had their own windowing systems. Later systems implemented the windowing system as an integral part of the operating system, such as Sapphire for PERQs [Myers 84], SunView for Suns, and the Macintosh and Microsoft Windows systems.
Reference: [Stevens 83] <author> Albert Stevens, Bruce Roberts, and Larry Stead. </author> <title> The Use of a Sophisticated Graphics Interface in Computer-Assisted Instruction. </title> <journal> IEEE Computer Graphics and Applications 3(2) </journal> <pages> 25-31, </pages> <address> March/April, </address> <year> 1983. </year>
Reference-contexts: Usually, there is also some support for sequencing, such as bringing up sub-dialogs when a particular button is hit. The Steamer project at BBN demonstrated many of the ideas later incorporated into interface builders and was probably the first object-oriented graphics system <ref> [Stevens 83] </ref>. Other examples of research interface builders are DialogEditor [Cardelli 88], vu [Singh 88] and Gilt [Myers 91a]. There are literally hundreds of commercial interface builders. Just two examples are the NeXT Interface Builder [NeXT 91], and UIM/X for X [VisualEdge 90].
Reference: [Stevens 94] <author> Marc P. Stevens, Robert C. Zeleznik, and John F. Hughes. </author> <title> An Architecture for an Extensible 3D Interface Toolkit. </title> <booktitle> In ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 59-67. </pages> <booktitle> Proceedings UIST'94, </booktitle> <address> Marina del Rey, CA, </address> <month> November, </month> <year> 1994. </year>
Reference-contexts: Rendezvous [Hill 93] and Visual Obliq [Bharat 94] are designed to make it easier to create applications that support multiple users on multiple machines operating synchronously. Whereas most toolkits provide only 2-D interaction techniques, the Brown 3-D toolkits <ref> [Zeleznik 91, Stevens 94] </ref> and Silicon Graphics' Inventor toolkit UIMSs, Toolkits, Interface Builders - 18 - To appear in Handbook of UI Design [Strauss 92, Wernecke 94] provide preprogrammed 3-D widgets and a framework for creating others.
Reference: [Strauss 92] <author> Paul S. Strauss and Rikk Carey. </author> <title> An Object-Oriented 3D Graphics Toolkit. </title> <booktitle> In Computer Graphics, </booktitle> <pages> pages 341-349. </pages> <booktitle> Proceedings SIGGRAPH'92, </booktitle> <month> July, </month> <year> 1992. </year>
Reference-contexts: Whereas most toolkits provide only 2-D interaction techniques, the Brown 3-D toolkits [Zeleznik 91, Stevens 94] and Silicon Graphics' Inventor toolkit UIMSs, Toolkits, Interface Builders - 18 - To appear in Handbook of UI Design <ref> [Strauss 92, Wernecke 94] </ref> provide preprogrammed 3-D widgets and a framework for creating others. Special support for animations has been added to Artkit [Hudson 93] and Amulet [Myers 96c].
Reference: [Sukaviriya 90] <author> Piyawadee Sukaviriya and James D. Foley. </author> <title> Coupling A UI Framework with Automatic Generation of Context-Sensitive Animated Help. </title> <booktitle> In ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 152-166. </pages> <booktitle> Proceedings UIST'90, </booktitle> <address> Snowbird, Utah, </address> <month> October, </month> <year> 1990. </year>
Reference-contexts: In UIDE, the description includes pre and post-conditions of the operations, and the system uses these to reason about the operations, and to automatically generate an interface. One interesting feature of UIDE is that the pre and post-conditions are used to automatically generate help <ref> [Sukaviriya 90] </ref>. UIMSs, Toolkits, Interface Builders - 27 - To appear in Handbook of UI Design Another model-based system is HUMANOID [Szekely 93] which supports the modeling of the presentation, behavior and dialogue of an interface.
Reference: [Sukaviriya 93] <author> Piyawadee Sukaviriya, James D. Foley and Todd Griffith. </author> <title> A Second Generation User Interface Design Environment: The Model and The Runtime Architecture. </title> <booktitle> In Human Factors in Computing Systems, </booktitle> <pages> pages 375-382. </pages> <booktitle> Proceedings INTERCHI'93, </booktitle> <address> Amsterdam, The Netherlands, </address> <month> April, </month> <year> 1993. </year>
Reference-contexts: [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE <ref> [Sukaviriya 93] </ref>, Humanoid [Szekely 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 Interface Builders DialogEditor [Cardelli 88], NeXT Interface Builder [NeXT 91], Visual Basic, UIM/X [VisualEdge 90] 8.2.4.3 Data Visualization Tools DataViews [DataViews 95] 8.2.4.4 <p> DON has the most sophisticated layout mechanisms and takes into account the desired window size, balance, columness, symmetry, grouping, etc. Creating dialog boxes automatically has been very thoroughly researched, but there still are no commercial tools that do this. UIDE (the User-Interface Design Environment) <ref> [Sukaviriya 93] </ref> requires that the semantics of the application be defined in a special-purpose language, and therefore might be included with the language-based tools (section 8.2.1). It is placed here instead because the language is used to describe the functions that the application supports and not the desired interface.
Reference: [Sun 96] <author> Sun Microsystems. </author> <title> Java: Programming for the Internet. </title> <note> 1996. http://java.sun.com/. </note>
Reference-contexts: The other variety uses an object-oriented programming style which makes it easier for the designer to customize the interaction techniques. Examples include Smalltalk [Tesler 81], Andrew [Palay 88], Garnet [Myers 90c], InterViews [Linton 89], Xt [McCormack 88], Amulet [Myers 96a], and the Java toolkit AWT <ref> [Sun 96] </ref>. <p> To implement the objects, the toolkit might invent its own object system, as was done with Xt, Andrew, Garnet and Amulet, or it might use an existing object system, as was done in InterViews [Linton 89] which uses C++, NeXTStep from NeXT which uses Objective-C, and AWT uses Java <ref> [Sun 96] </ref>. The usual way that object-oriented toolkits interface with application programs is through the use of call-back procedures. These are procedures defined by the application programmer that are called when a widget is operated by the end user. <p> The AWT toolkit that comes with the Java programming language <ref> [Sun 96] </ref> also can be classified as a Virtual Toolkit, since the programmer can write code once and it will operate on all platforms. Java programs can be run locally in a conventional fashion, or can be downloaded dynamically over the worldwide-web into a browser such as Netscape. 8.
Reference: [Sutherland 63] <author> Ivan E. Sutherland. </author> <title> SketchPad: A Man-Machine Graphical Communication System. </title> <booktitle> In AFIPS Spring Joint Computer Conference, </booktitle> <pages> pages 329-346. </pages> <year> 1963. </year>
Reference-contexts: Early constraint systems include Sketchpad <ref> [Sutherland 63] </ref> which pioneered the use of graphical constraints in a drawing editor, and Thinglab [Borning 81] which used constraints for graphical simulation. Subsequently, Thinglab was extended to aid in the generation of user interfaces [Borning 86a].
Reference: [Swinehart 86] <author> Daniel Swinehart, Polle Zellweger, Richard Beach, and Robert Hagmann. </author> <title> A Structural View of the Cedar Programming Environment. </title> <journal> ACM Transactions on Programming Languages and Systems 8(4) </journal> <pages> 419-490, </pages> <month> October, </month> <year> 1986. </year>
Reference-contexts: Obviously, a window manager that supports covered windows can also allow them to be side-by-side, but not vice-versa. Therefore, a window manager is classified as ``covered'' if it allows windows to overlap. The tiled style was popular for a while, and was used by Cedar <ref> [Swinehart 86] </ref>, and early versions of the Star [Smith 82], Andrew [Palay 88], and Microsoft Windows. A study even suggested that using tiled windows was more efficient for users [Bly 86]. However, today tiled windows are rarely seen on conventional window systems, because users generally prefer overlapping.
Reference: [Szekely 93] <author> Pedro Szekely, Ping Luo, and Robert Neches. </author> <title> Beyond Interface Builders: Model-Based Interface Tools. </title> <booktitle> In Human Factors in Computing Systems, </booktitle> <pages> pages 383-390. </pages> <booktitle> Proceedings INTERCHI'93, </booktitle> <address> Amsterdam, The Netherlands, </address> <month> April, </month> <year> 1993. </year> <note> UIMSs, Toolkits, Interface Builders - 41 - To appear in Handbook of UI Design </note>
Reference-contexts: Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE [Sukaviriya 93], Humanoid <ref> [Szekely 93] </ref>, MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 Interface Builders DialogEditor [Cardelli 88], NeXT Interface Builder [NeXT 91], Visual Basic, UIM/X [VisualEdge 90] 8.2.4.3 Data Visualization Tools DataViews [DataViews 95] 8.2.4.4 Graphical Editors Peridot <p> One interesting feature of UIDE is that the pre and post-conditions are used to automatically generate help [Sukaviriya 90]. UIMSs, Toolkits, Interface Builders - 27 - To appear in Handbook of UI Design Another model-based system is HUMANOID <ref> [Szekely 93] </ref> which supports the modeling of the presentation, behavior and dialogue of an interface. The HUMANOID modeling language includes abstraction, composition, recursion, iteration and conditional constructs to support sophisticated interfaces.
Reference: [Teitelman 79] <author> Warren Teitelman. </author> <title> A Display Oriented Programmer's Assistant. </title> <journal> International Journal of Man-Machine Studies 11 </journal> <pages> 157-187, </pages> <year> 1979. </year> <note> Also Xerox PARC Technical Report CSL-77-3, </note> <institution> Palo Alto, </institution> <address> CA, March 8, </address> <year> 1977. </year>
Reference-contexts: Therefore, the windowing system's programming interface has significant impact on most user interface programmers. The first windowing systems were implemented as part of a single program or system. For example, the EMACs text editor [Stallman 79], and the Smalltalk [Tesler 81] and DLISP <ref> [Teitelman 79] </ref> programming environments had their own windowing systems. Later systems implemented the windowing system as an integral part of the operating system, such as Sapphire for PERQs [Myers 84], SunView for Suns, and the Macintosh and Microsoft Windows systems.
Reference: [Tesler 81] <author> Larry Tesler. </author> <title> The Smalltalk Environment. </title> <journal> Byte Magazine 6(8) </journal> <pages> 90-147, </pages> <month> August, </month> <note> 1981. </note> <author> [Vander Zanden 90] Brad Vander Zanden and Brad A. Myers. </author> <title> Automatic, Look-and-Feel Independent Dialog Creation for Graphical User Interfaces. </title> <booktitle> In Human Factors in Computing Systems, </booktitle> <pages> pages 27-34. </pages> <booktitle> Proceedings SIGCHI'90, </booktitle> <address> Seattle, WA, </address> <month> April, </month> <year> 1990. </year>
Reference-contexts: Therefore, the windowing system's programming interface has significant impact on most user interface programmers. The first windowing systems were implemented as part of a single program or system. For example, the EMACs text editor [Stallman 79], and the Smalltalk <ref> [Tesler 81] </ref> and DLISP [Teitelman 79] programming environments had their own windowing systems. Later systems implemented the windowing system as an integral part of the operating system, such as Sapphire for PERQs [Myers 84], SunView for Suns, and the Macintosh and Microsoft Windows systems. <p> These operations can be much quicker, but are very dangerous and therefore should seldom be used. Most modern computers provide graphics hardware that is optimized to work efficiently with the window system. In early windowing systems, such as Smalltalk <ref> [Tesler 81] </ref> and Sapphire [Myers 86], the primary output operation was BitBlt (also called ``RasterOp''). These systems primarily supported monochrome screens (each pixel is either black or white). BitBlt takes a rectangle of pixels from one part of the screen and copies it to another part. <p> BitBlt can be used to draw solid rectangles in either black or white, display text, scroll windows, and perform many other effects <ref> [Tesler 81] </ref>. The only additional drawing operation typically supported by these early systems was drawing straight lines. Later windowing systems, such as the Macintosh and X, added a full set of drawing operations, such as filled and unfilled polygons, text, lines, arcs, etc. <p> Examples of this style include the SunTools toolkit for the SunView windowing system, and the Macintosh Toolbox [Apple 85]. The other variety uses an object-oriented programming style which makes it easier for the designer to customize the interaction techniques. Examples include Smalltalk <ref> [Tesler 81] </ref>, Andrew [Palay 88], Garnet [Myers 90c], InterViews [Linton 89], Xt [McCormack 88], Amulet [Myers 96a], and the Java toolkit AWT [Sun 96].
Reference: [VAPS 95] <institution> Virtual Prototypes Inc. VAPS. 4700 de la Savane, </institution> <address> Suite 300, Montreal, Quebec CAN, H4P 1T7, </address> <pages> (514) 341-3874. </pages> <year> 1995. </year>
Reference-contexts: These are classified by their predominant or most interesting feature. Specification Format Examples Section Language Based 8.2.1 State Transition Networks [Newman 68], VAPS <ref> [VAPS 95] </ref> 8.2.1.1 Context-Free Grammars YACC, LEX, Syngraph [Olsen 83] 8.2.1.2 Event Languages Sassafras [Hill 86], EET [Frank 96], HyperTalk 8.2.1.3 Declarative Languages Cousin [Hayes 85], Open Dialog [Schulert 85], Motif UIL 8.2.1.4 Constraint Languages Thinglab [Borning 81], C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle <p> VAPS is a commercial system that uses the state transition model, and it eliminates the maze-of-wires problem by providing a spreadsheet-like table in which the states, events, and actions are specified <ref> [VAPS 95] </ref>. Transition networks have been thoroughly researched, but have not proven particularly successful or useful either as a research or commercial approach.
Reference: [Visix 96] <author> Visix Software Inc. </author> <title> Galaxy Application Environment. </title> <address> 11440 Commerce Park Drive, Reston VA 22091. (800) 832-8668, http://www.visix.com. 1996. </address>
Reference-contexts: For example, XVT [XVT 96] provides a C or C++ interface that links to the actual Motif, OpenLook, Macintosh, MS-Windows, and OS/2-PM toolkits (and also character terminals) and hides their differences. The second style of virtual toolkit re-implements the widgets in each style. For example, Galaxy <ref> [Visix 96] </ref>, and Open Interface from NeuronData [Open Interface 95], provide libraries of widgets that look like those on the various platforms. The advantage of the first style is that the user interface is more likely to be look-and-feel conformant (since it uses the real widgets).
Reference: [VisualEdge 90] <institution> Visual Edge Software Ltd. </institution> <address> UIM/X. 3950 Cote Vertu, Montreal, Quebec H4R 1V4. Phone (514) 332-6430. </address> <year> 1990. </year>
Reference-contexts: Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 Interface Builders DialogEditor [Cardelli 88], NeXT Interface Builder [NeXT 91], Visual Basic, UIM/X <ref> [VisualEdge 90] </ref> 8.2.4.3 Data Visualization Tools DataViews [DataViews 95] 8.2.4.4 Graphical Editors Peridot [Myers 88b], DEMO [Fisher 92], Marquise [Myers 93] 8.2.4.5 article that discusses the technique. <p> Other examples of research interface builders are DialogEditor [Cardelli 88], vu [Singh 88] and Gilt [Myers 91a]. There are literally hundreds of commercial interface builders. Just two examples are the NeXT Interface Builder [NeXT 91], and UIM/X for X <ref> [VisualEdge 90] </ref>. Visual Basic is essentially an Interface Builder coupled with an editor for an interpreted language. Many of the tools discussed above, such as the virtual toolkits, visual languages, and application frameworks, also contain interface builders. <p> Also, they cannot handle widgets that change dynamically. For example if the contents of a menu or the layout of a dialog box changes based on program state, this must be programmed by writing code. To help with this part of the problem, some interface builders, like UIM/X <ref> [VisualEdge 90] </ref>, provide a C code interpreter. 8.2.4.4 Data Visualization Tools An important commercial category of tools is that of dynamic data visualization systems.
Reference: [Vlissides 90] <author> John M. Vlissides and Mark A. Linton. Unidraw: </author> <title> A Framework for Building Domain-Specific Graphical Editors. </title> <journal> ACM Transactions on Information Systems 8(3) </journal> <pages> 204-236, </pages> <month> July, </month> <year> 1990. </year>
Reference-contexts: HyperTalk 8.2.1.3 Declarative Languages Cousin [Hayes 85], Open Dialog [Schulert 85], Motif UIL 8.2.1.4 Constraint Languages Thinglab [Borning 81], C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw <ref> [Vlissides 90] </ref>, Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 Interface Builders DialogEditor <p> MacApp was very successful at simplifying the writing of Macintosh applications. Today, there are multiple frameworks to help build applications for most major platforms, including the Microsoft Foundation Classes for Windows, and the CodeWarrior PowerPlant [Metrowerks 96] for the Macintosh. Unidraw <ref> [Vlissides 90] </ref> is a research framework, but it is more specialized for graphical editors. This means that it can provide even more support. Unidraw uses the C++ object-oriented language and is part of the InterViews system [Linton 89].
Reference: [Vlissides 91] <author> John M. Vlissides and Steven Tang. </author> <title> A Unidraw-Based User Interface Builder. </title> <booktitle> In ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 201-210. </pages> <booktitle> Proceedings UIST'91, </booktitle> <address> Hilton Head, SC, </address> <month> November, </month> <year> 1991. </year>
Reference-contexts: This means that it can provide even more support. Unidraw uses the C++ object-oriented language and is part of the InterViews system [Linton 89]. Unidraw has been used to create various drawing and CAD programs, and a user interface editor <ref> [Vlissides 91] </ref>. The Amulet framework [Myers 96a] is also aimed at graphical applications, but due to its graphical data model, many of the built-in routines can be used without change (the programmer does not usually need to write methods for subclasses). <p> Therefore, work is needed in ways to make the tools themselves easier to create. For example, the Garnet toolkit explored mechanisms specifically designed to make high-level graphical tools easier to create [Myers 92d]. The Unidraw framework has also proven useful for creating interface builders <ref> [Vlissides 91] </ref>. However, more work is needed. 11. Conclusions The area of user interface tools is expanding rapidly.
Reference: [Wernecke 94] <author> Josie Wernecke. </author> <title> The Inventor Mentor. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: Whereas most toolkits provide only 2-D interaction techniques, the Brown 3-D toolkits [Zeleznik 91, Stevens 94] and Silicon Graphics' Inventor toolkit UIMSs, Toolkits, Interface Builders - 18 - To appear in Handbook of UI Design <ref> [Strauss 92, Wernecke 94] </ref> provide preprogrammed 3-D widgets and a framework for creating others. Special support for animations has been added to Artkit [Hudson 93] and Amulet [Myers 96c].
Reference: [Wiecha 90] <author> Charles Wiecha, William Bennett, Stephen Boies, John Gould, and Sharon Greene. </author> <title> ITS: A Tool for Rapidly Developing Interactive Applications. </title> <journal> ACM Transactions on Information Systems 8(3) </journal> <pages> 204-236, </pages> <month> July, </month> <year> 1990. </year>
Reference-contexts: [Borning 81], C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp [Wilson 90], Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS <ref> [Wiecha 90] </ref>, UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 Interface Builders DialogEditor [Cardelli 88], NeXT Interface Builder [NeXT 91], Visual Basic, UIM/X [VisualEdge 90] 8.2.4.3 Data Visualization Tools DataViews <p> The developers of HUMANOID and UIDE are collaborating on a new combined model called MASTERMIND that integrates their approaches [Neches 93]. The ITS <ref> [Wiecha 90] </ref> system also uses rules to generate an interface. ITS was used to create the visitor information system for the EXPO 1992 worlds fair in Seville, Spain.
Reference: [Wilde 90] <author> Nicholas Wilde and Clayton Lewis. </author> <title> Spreadsheet-based Interactive Graphics: from Prototype to Tool. </title> <booktitle> In Human Factors in Computing Systems, </booktitle> <pages> pages 153-159. </pages> <booktitle> Proceedings SIGCHI'90, </booktitle> <address> Seattle, WA, </address> <month> April, </month> <year> 1990. </year>
Reference-contexts: A number of research toolkits now supply constraints as an integral part of the object system (e.g., Garnet and Amulet). In addition, some systems have provided higher-level interfaces to constraints. Graphical Thinglab [Borning 86b] allows the designer to create constraints by wiring icons together, and NoPump <ref> [Wilde 90] </ref> and C32 [Myers 91b] allow constraints to be defined using a spreadsheet-like interface. The advantage of constraints is that they are a natural way to express many kinds of relationships that arise frequently in user interfaces.
Reference: [Wilson 90] <author> David Wilson. </author> <title> Programming with MacApp. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: For example, the MacApp system from Apple was reported to reduce development time by a factor of four or five <ref> [Wilson 90] </ref>. <p> EET [Frank 96], HyperTalk 8.2.1.3 Declarative Languages Cousin [Hayes 85], Open Dialog [Schulert 85], Motif UIL 8.2.1.4 Constraint Languages Thinglab [Borning 81], C32 [Myers 91b] 8.2.1.5 Screen Scrapers Easel [Easel 93] 8.2.1.6 Database Interfaces Oracle [Oracle 96] 8.2.1.7 Visual Programming LabView [Labview 96] Prograph [Prograph 96] 8.2.1.8 Application Frameworks MacApp <ref> [Wilson 90] </ref>, Unidraw [Vlissides 90], Amulet [Myers 96a], Andrew [Palay 88], OLE, OpenDoc 8.2.2 Model-Based Generation MIKE [Olsen 86], ITS [Wiecha 90], UIDE [Sukaviriya 93], Humanoid [Szekely 93], MASTERMIND [Neches 93] 8.2.3 Interactive Graphical Specification 8.2.4 Prototypers Bricklin's Demo [Lifeboat 95], Director [MacroMedia 96] 8.2.4.1 Cards Menulay [Buxton 83], HyperCard 8.2.4.2 <p> They therefore created a software system that provides an overall application framework to guide programmers. This was called MacApp <ref> [Wilson 90] </ref> and used the object-oriented language Object Pascal.
Reference: [Wolber 96] <author> David Wolber. Pavlov: </author> <title> Programming by Stimulus-Response Demonstration. </title> <booktitle> In Human Factors in Computing Systems, </booktitle> <pages> pages 252-259. </pages> <booktitle> Proceedings SIGCHI'96, </booktitle> <address> Vancouver, BC, Canada, </address> <month> April, </month> <year> 1996. </year>
Reference-contexts: The Marquise tool [Myers 93] allows the designer to demonstrate when various behaviors should happen, and supports palettes which control the behaviors. With Pavlov <ref> [Wolber 96] </ref>, the user can demonstrate how widgets should control a car's movement in a driving game. Research continues on making these ideas practical. 8.3 Specialized Tools For some application domains, there are customized tools that provide significant high-level support.
Reference: [XBusiness 94] <institution> X Business Group, Inc. Interface Development Technology. </institution> <address> 3155 Kearney Street, Suite 160, Fremont, CA 94538. </address> <pages> (510) 226-1075, </pages> , <year> 1994. </year>
Reference-contexts: As interfaces become easier to use, they become harder to create [Myers 94]. Today, direct manipulation interfaces (also called ``GUIs'' for Graphical User Interfaces) are almost universal: one 1993 study found that 97% of all software development on Unix involved a GUI <ref> [XBusiness 94, p.80] </ref>. <p> UIMSs, Toolkits, Interface Builders - 2 - To appear in Handbook of UI Design one-tenth the time [Booz 92]. Furthermore, user interface tools are a major business. In the Unix market alone, over US$133 million of tools were sold in 1993, which is about 50,000 licenses <ref> [XBusiness 94] </ref>. Forrester Research claims that the total market for UI software tools on all platforms, including ``vertical tools'' which include database and user interface construction tools, was 130,000 developers generating US$400 million in revenue in 1993 [DePalma 93]. <p> One problem with all of these is that they can only be used by professional programmers. Some programmers have objected to the requirement for learning a new language for programming just the user interface portion [Olsen 87]. This has been confirmed by market research <ref> [XBusiness 94, p.29] </ref>. Furthermore, it seems more natural to define the graphical part of a user interface using a graphical editor (see section 8.2.4). <p> The X Business Group predicts that there will be an increased use of tools by end users, rather than professional software developers, which will present enormous opportunities and challenges to tool creators <ref> [XBusiness 94] </ref>. 10.5 Application and UI Separation One of the fundamental goals of user interface tools is to allow better modularization and separation of user interface code from application code.
Reference: [XVT 96] <institution> XVT Software, Inc. XVT. 4900 Pearl East Circle, Boulder, </institution> <address> CO, 80301, USA, 1-800-678-7988 or (303) 443-4223, info@xvt.com, http://www.xvt.com/xvt. 1996. </address>
Reference-contexts: There are two styles of virtual toolkits. In one, the virtual toolkit links to the different actual toolkits on the host machine. For example, XVT <ref> [XVT 96] </ref> provides a C or C++ interface that links to the actual Motif, OpenLook, Macintosh, MS-Windows, and OS/2-PM toolkits (and also character terminals) and hides their differences. The second style of virtual toolkit re-implements the widgets in each style.
Reference: [Zeleznik 91] <author> Robert C. Zeleznik, et.al. </author> <title> An Object-Oriented Framework for the Integration of Interactive Animation Techniques. </title> <booktitle> In Computer Graphics, </booktitle> <pages> pages 105-112. </pages> <booktitle> Proceedings SIGGRAPH'91, </booktitle> <month> July, </month> <year> 1991. </year>
Reference-contexts: Rendezvous [Hill 93] and Visual Obliq [Bharat 94] are designed to make it easier to create applications that support multiple users on multiple machines operating synchronously. Whereas most toolkits provide only 2-D interaction techniques, the Brown 3-D toolkits <ref> [Zeleznik 91, Stevens 94] </ref> and Silicon Graphics' Inventor toolkit UIMSs, Toolkits, Interface Builders - 18 - To appear in Handbook of UI Design [Strauss 92, Wernecke 94] provide preprogrammed 3-D widgets and a framework for creating others.
References-found: 106

