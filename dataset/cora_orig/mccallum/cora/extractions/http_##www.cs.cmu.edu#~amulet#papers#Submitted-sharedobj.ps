URL: http://www.cs.cmu.edu/~amulet/papers/Submitted-sharedobj.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/project/amulet/www/amulet-papers.html
Root-URL: 
Title: Easily Programmable Shared Objects For Peer-To-Peer Distributed Applications  
Author: John Huebner Brad A. Myers 
Keyword: Toolkits, Distributed Applications, Amulet, CSCW, Constraints  
Address: Pittsburgh, PA 15213 USA  Pittsburgh, PA 15213 USA  
Affiliation: School of Computer Science Carnegie Mellon University  Human Computer Interaction Institute Carnegie Mellon University  
Email: jh6p@cs.cmu.edu  
Phone: +1 412-268-5150  
Web: http://www.cs.cmu.edu/~jh6p  http://www.cs.cmu.edu/~bam  
Abstract: This paper presents our experiences in implementing PERSON, a toolkit for adapting single user applications into multi-machine multiuser applications. This is achieved by providing a way to share objects in a peer-to-peer model using a programming model that emphasizes values rather than functions and ties the values together with constraints. This encourages a modular and declarative style of program design. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Berlage, T. and Genau, A., </author> <title> A Framework for Shared Applications with a Replicated Architecture, </title> <booktitle> in Proceedings of the ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <year> 1993, </year> <pages> pp. 249-257. </pages>
Reference-contexts: Also applies to objects who have new sub-objects set in a shared slot. .Other directions that we might take PERSON include sending command objects to support network undo as a concurrency control mechanism, as GINA <ref> [1] </ref> does, or making our naming scheme hierarchical. Conclusion Our experiences support the evidence presented by VisualOblique and Programmers Playground that the declarative programming style provides an excellent method for abstracting the complexities of designing distributed multiuser applications.
Reference: 2. <author> Bharat, K. and Brown, M.H. </author> <title> Building Distributed, MultiUser Applications by Direct Manipulation, </title> <booktitle> in Proceedings UIST'94: ACM SIGGRAPH Symposium on User Interface Software and Technology. 1994. </booktitle> <address> Marina del Rey, CA: </address> <pages> pp. 71-81. </pages>
Reference-contexts: GroupKit avoids marshalling data into byte streams by requiring the programmer to use Tcl/Tk, a language where all types are represented as character [10]. VisualOblique <ref> [2] </ref> and Programmers Playground [4] both provide abstractions that transparently transport data from one host to another, but both require that the application be written in from scratch in a new language.
Reference: 3. <author> Bharat, K. and Hudson, </author> <title> S.E. Supporting Distributed, Concurrent, </title> <booktitle> One-Way Constraints in User Interface Applications in Proceedings UIST'95: ACM SIGGRAPH Symposium on User Interface Software and Technology. </booktitle> <year> 1995, </year> <pages> pp. 121-132 </pages>
Reference-contexts: To achieve this, they built an elaborate infrastructure into Doppler that tracked state changes with vector clocks, in a data structure that kept copies of previous states for reference, <ref> [3] </ref>. However, Doppler still required locking data during reads, which requires messages to make a round trip between hosts before a read can proceed. There are also attempts to create high-level programming abstractions for client/server systems.
Reference: 4. <author> Goldman, K.J., et al., </author> <title> The Programmer's Playground: I/O Abstraction for User Configurable Distributed Applications. </title> <journal> IEEE Transactions on Software Engineering, 1995. </journal> <volume> 21(9): </volume> <pages> pp. 735-746. </pages> <address> http;//www.cs.wustl.edu/cs/playground/papers.html. </address>
Reference-contexts: GroupKit avoids marshalling data into byte streams by requiring the programmer to use Tcl/Tk, a language where all types are represented as character [10]. VisualOblique [2] and Programmers Playground <ref> [4] </ref> both provide abstractions that transparently transport data from one host to another, but both require that the application be written in from scratch in a new language.
Reference: 5. <author> Greenberg, S. and Marwood, D., </author> <title> Real Time Groupware as a Distributed System: Concurrency Control and its Effect on the Interface, </title> <booktitle> in Proceedings of ACM CSCW'94 Conference on ComputerSupported Cooperative Work, </booktitle> <year> 1994, </year> <pages> pp. 207-217. </pages>
Reference-contexts: Although this does not prevent one host from overriding anothers changes, it does prevent corrupted data. Inconsistencies may not matter and people may mediate their own actions, as noted in early GroupKit work, <ref> [5] </ref>. That paper also notes that if visible feedback of conflicts is presented, then people are able to resolve the conflict. Our policy ensures that the result converges to some hosts input.
Reference: 6. <author> Lamport, L. </author> <title> Time, Clocks, and the Ordering of Events in a Distributed System. </title> <journal> Communications of the ACM, 1978. </journal> <volume> 21 (7): </volume> <pages> pp. 558-56 </pages>
Reference-contexts: PERSON uses an optimistic consistency strategy, of conflict detection rather than conflict avoidance, to allow reads and writes to be executed immediately. Conflicts detected using Lamports logical clocks <ref> [6] </ref> to detect stale data. A deterministic algorithm is used to determine the final state after stale data is received. The process of contacting a new participant, and getting all of the current versions of the objects to them is handled transparently by PERSON.
Reference: 7. <institution> Microsoft, </institution> <note> DirectX Online Help. 1997. www.microsoft.com. </note>
Reference-contexts: Furthermore, the programmer still has to invent a protocol of method invocations and or messages to pass back and forth. Microsofts DirectX gaming toolkit, uses a Lobby server for establishing connections. Even for peer-to-peer messaging <ref> [7] </ref> requires a lobby server to establish a connection. GroupKit uses a Registrar to connect its clients [11]. EXAMPLE In a sample program, a Pong Game was converted from single machine to networked by adding a few lines of code.
Reference: 8. <author> Myers, B.A., et al., </author> <title> The Amulet Environment: New Models for Effective User Interface Software Development. </title> <journal> IEEE Transactions on Software Engineering, 1997. </journal> <volume> 23(6): </volume> <pages> pp. 347-365. </pages>
Reference-contexts: The object name space is shared across a group of hosts. The programmer need not manage multiple copies of objects, or send updates since this is handled by PERSON. Amulet PERSON is written in the Amulet user interface toolkit <ref> [8] </ref> in C++. Amulet has structured graphics, which is a drawing model that requires every image on the screen have an object associated with it. This allows the toolkit to take over many routine maintenance tasks such as refreshing the screen. Amulet objects have lists of value pairs called slots.
Reference: 9. <author> OMG, </author> <title> CORBA 2.2 Specification. </title> <note> 1998. OMG Technical Document formal/98-02-01 http://www.omg.org/corba/corbaiiop.htm. </note>
Reference-contexts: This is useful for hierarchical organizations, but inappropriate for a group of peers collaborating or playing together. In the strict client/server design, objects are stored separately from the host that uses them. For example, CORBA stores objects in one location and does remote procedure calls on the methods <ref> [9] </ref>. A peer-to-peer model enables designs where each user is responsible for their local resources and views. For many programming tasks, such a cooperative authoring, it makes more sense for the authors to manage communications themselves with all members as peers. <p> However, Doppler still required locking data during reads, which requires messages to make a round trip between hosts before a read can proceed. There are also attempts to create high-level programming abstractions for client/server systems. Tools such as Javas Remote Method Invocation [12] and CORBA <ref> [9] </ref> support abstractions that hide the byte stream behind local stub (client side) or skeleton (server side) proxy objects that convert to and from local data structures.
Reference: 10. <author> Roseman, M. </author> <title> Tcl/Tk as a basis for groupware, </title> <booktitle> in Tcl/Tk Workshop. </booktitle> <year> 1993. </year>
Reference-contexts: RELATED WORK One issue with multi-platform distributed applications is the marshaling and unmarshalling of data to support varying data storage designs such as byte ordering. GroupKit avoids marshalling data into byte streams by requiring the programmer to use Tcl/Tk, a language where all types are represented as character <ref> [10] </ref>. VisualOblique [2] and Programmers Playground [4] both provide abstractions that transparently transport data from one host to another, but both require that the application be written in from scratch in a new language.
Reference: 11. <author> Roseman, M. and Greenberg, S., </author> <title> Building Real Time Groupware with GroupKit, A Groupware Toolkit. </title> <journal> ACM Transactions on Computer Human Interaction, 1996. </journal> <volume> 3(1): </volume> <pages> pp. 66-106. </pages>
Reference-contexts: INTRODUCTION Programming a multiuser, distributed application is significantly harder than writing an application that executes on a single machine for a single user <ref> [11] </ref>. If not using a groupware toolkit, the programmer has to explicitly create, open, and close sockets. Once the sockets are open, the programmer often has to deal with converting local data structures into byte streams to be sent over the network. This is called marshalling the data. <p> Microsofts DirectX gaming toolkit, uses a Lobby server for establishing connections. Even for peer-to-peer messaging [7] requires a lobby server to establish a connection. GroupKit uses a Registrar to connect its clients <ref> [11] </ref>. EXAMPLE In a sample program, a Pong Game was converted from single machine to networked by adding a few lines of code. First the programmer specifies how the objects are to be shared and then shares the objects.
Reference: 12. <author> Sun, </author> <title> Java RMI reference. </title> <address> www.sun.com </address>
Reference-contexts: However, Doppler still required locking data during reads, which requires messages to make a round trip between hosts before a read can proceed. There are also attempts to create high-level programming abstractions for client/server systems. Tools such as Javas Remote Method Invocation <ref> [12] </ref> and CORBA [9] support abstractions that hide the byte stream behind local stub (client side) or skeleton (server side) proxy objects that convert to and from local data structures.
References-found: 12

