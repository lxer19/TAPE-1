URL: http://www.cs.ucl.ac.uk/staff/N.Vassila/papers/im97.ps.gz
Refering-URL: http://www.cs.ucl.ac.uk/staff/N.Vassila/
Root-URL: http://www.cs.ucl.ac.uk
Email: e-mail: n.vassila, g.pavlou, g.knight @cs.ucl.ac.uk  
Phone: Tel: +44-171 419 3679, +44-171 380 7366, +44-171 380 7215  
Title: Active Objects in TMN  
Author: A. Vassila, G. Pavlou, G. Knight 
Keyword: TMN, OSI Management, Active Managed Objects, Management by Delegation  
Address: Gower Street, London WC1E 6BT, UK  
Affiliation: Department of Computer Science, University College London,  
Abstract: Telecommunications Management Network (TMN) systems use the objectoriented information modelling techniques and communication facilities provided by OSI Systems Management (SM). TMN interfaces are specified in terms of rather passive Managed Objects (MOs) with prespecified behaviour. In this paper, we propose the concept of Active Managed Objects (AMOs) as the means to specify and express arbitrary management functions (including those specified in [1]) through a suitable scripting language. AMOs may be delegated to a TMN application in agent role and function close to other managed objects they access. Such a facility increases the intelligence and autonomy of TMN applications and enables the expression of management functions with arbitrary intelligence. Also, since it uses the normal TMN mechanisms for information modelling and access (GDMO, CMIS/P), it could be potentially standardised. In this paper, we describe the AMO concept, examine tha information model and scripting language aspects and present our implementation experience. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> ITU/CCITT Recommendation M.3400 - TMN Management Functions, </institution> <month> October </month> <year> 1992. </year>
Reference: [2] <institution> ITU/CCITT Recommendation M.3010 - Principles For A Telecommunications Management Network, </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: 1 INTRODUCTION This paper describes work at UCL * which is aimed at increasing the intelligence and autonomy of components of TMN <ref> [2] </ref> systems. TMN systems normally make use of the services and protocols defined within OSI management [3]. The OSI management information model [4] is based on an objectoriented database paradigm with rather passive Managed Objects (MO) encapsulating management information on a managed system.
Reference: [3] <author> ITU-T X.701, </author> <title> Information Technology - Open Systems Interconnection - Systems Management Overview, </title> <month> June </month> <year> 1991. </year>
Reference-contexts: 1 INTRODUCTION This paper describes work at UCL * which is aimed at increasing the intelligence and autonomy of components of TMN [2] systems. TMN systems normally make use of the services and protocols defined within OSI management <ref> [3] </ref>. The OSI management information model [4] is based on an objectoriented database paradigm with rather passive Managed Objects (MO) encapsulating management information on a managed system.
Reference: [4] <author> ITU-T X.720, </author> <title> Information Technology - Open Systems Interconnection - Structure of Management Information - Part 1: Management Information Model, </title> <month> January </month> <year> 1992. </year>
Reference-contexts: 1 INTRODUCTION This paper describes work at UCL * which is aimed at increasing the intelligence and autonomy of components of TMN [2] systems. TMN systems normally make use of the services and protocols defined within OSI management [3]. The OSI management information model <ref> [4] </ref> is based on an objectoriented database paradigm with rather passive Managed Objects (MO) encapsulating management information on a managed system.
Reference: [5] <author> ITU-T X.734, </author> <title> Information Technology - Open Systems Interconnection - Systems Management - Part 5: Event Report Management Function, </title> <year> 1992. </year>
Reference-contexts: Our work is motivated by the following considerations: There are some exceptions to the general passive nature of MOs, for example the discriminator <ref> [5] </ref> objects which take an active role in the handling of asynchronous notifications, and the monitor metric [6] and summarisation [7] objects which calculate various statistics based on values obtained from other local MOs.
Reference: [6] <author> ITU-T X.738, </author> <title> Information Technology - Open Systems Interconnection - Systems Management - Part 11: Metric Objects and Attributes, </title> <year> 1994. </year>
Reference-contexts: Our work is motivated by the following considerations: There are some exceptions to the general passive nature of MOs, for example the discriminator [5] objects which take an active role in the handling of asynchronous notifications, and the monitor metric <ref> [6] </ref> and summarisation [7] objects which calculate various statistics based on values obtained from other local MOs.
Reference: [7] <author> ITU-T X.739, </author> <title> Information Technology - Open Systems Interconnection - Systems Management - Part 13: Summarisation Function, </title> <year> 1994. </year>
Reference-contexts: Our work is motivated by the following considerations: There are some exceptions to the general passive nature of MOs, for example the discriminator [5] objects which take an active role in the handling of asynchronous notifications, and the monitor metric [6] and summarisation <ref> [7] </ref> objects which calculate various statistics based on values obtained from other local MOs.
Reference: [8] <author> G. Goldszmidt and Y.Yemini, </author> <title> Evaluating Management Decisions via Delegation, </title> <booktitle> in IFIP International Symposium of Network Management, </booktitle> <month> April </month> <year> 1993. </year>
Reference-contexts: An answer to the above considerations is to have a script executed by an interpreter that performs management operations. This approach has also been followed by other research groups: In Columbia University the Management by Delegation paradigm <ref> [8] </ref> has been defined, and a system implementing it has been developed. In addition, in INRS Telecommunications Canada [9], another delegation framework is being developed for application management, as well as for systems administration. [10] also describes a prototype implementation of an intelligent agent system for application management using CORBA.
Reference: [9] <author> Jean-Charles Grgoire, </author> <title> Management with Delegation, </title> <booktitle> in IFIP AIPs Techniques for LAN and MAN Management, </booktitle> <address> Paris France, </address> <year> 1993. </year>
Reference-contexts: This approach has also been followed by other research groups: In Columbia University the Management by Delegation paradigm [8] has been defined, and a system implementing it has been developed. In addition, in INRS Telecommunications Canada <ref> [9] </ref>, another delegation framework is being developed for application management, as well as for systems administration. [10] also describes a prototype implementation of an intelligent agent system for application management using CORBA. Other work includes the scotty implementation package [11].
Reference: [10] <author> P. Steenekamp and J. Roos, </author> <title> A Framework for Policy-based Agents: Implementation of an Application Management Scenario, </title> <booktitle> in IFIP/IEEE DSOM Workshop, </booktitle> <address> Italy, </address> <year> 1996. </year>
Reference-contexts: In addition, in INRS Telecommunications Canada [9], another delegation framework is being developed for application management, as well as for systems administration. <ref> [10] </ref> also describes a prototype implementation of an intelligent agent system for application management using CORBA. Other work includes the scotty implementation package [11]. But, what we have identified, is that the execution of the script should be controlled by a higher level (probably remote) management entity.
Reference: [11] <author> J. Shnwlder and H. Langerdrfer, </author> <title> Tcl Extensions for Network Management Applications, </title> <booktitle> in 3rd Tcl/Tk Workshop, </booktitle> <address> Toronto, </address> <year> 1995. </year>
Reference-contexts: In addition, in INRS Telecommunications Canada [9], another delegation framework is being developed for application management, as well as for systems administration. [10] also describes a prototype implementation of an intelligent agent system for application management using CORBA. Other work includes the scotty implementation package <ref> [11] </ref>. But, what we have identified, is that the execution of the script should be controlled by a higher level (probably remote) management entity. This entity should be able to control every aspect of the script.
Reference: [12] <author> A.Vassila and G.Knight, </author> <title> Introducing Active Managed Objects for Effective and Autonomous Distributed Management, in Bringing Services to People, </title> <booktitle> IS&N Conference, </booktitle> <address> Heraklion Greece, </address> <year> 1995. </year>
Reference-contexts: This means that the invocation of a script must be represented as a MO; the higher level managing system then interfaces with the script by manipulating the MOs attributes, actions and notifications. We call such MOs Active Managed Objects <ref> [12] </ref> (AMO). A similar approach has been followed by ISO and has been documented in [13].It has to be noted that our primary interest is in prototyping the idea of AMOs and assess their usability and effectiveness, rather than presenting a fully implemented system.
Reference: [13] <institution> ISO/IEC DIS 10164-21 - Information Technology - Open Systems Interconnection - Command Sequencer for Systems Management, </institution> <year> 1996. </year>
Reference: [14] <institution> ITU-T X.710 - Information Technology - Open Systems Interconnection - Common Management Information Service/Protocol, </institution> <note> Version 2. </note>
Reference-contexts: It can also be used to provide autonomous control within a managed system. 2.2 Access to Remote Managed Systems An example of this is shown in system marked A in the centre of the figure contains an AMO which controls an interpreter offering the full CMIS client service <ref> [14] </ref>. This service is being used to manage a subordinate managed system. At the same time, A is itself being managed by a higher level managing system. This gives fully hierarchical management controlled by scripts which can be downloaded at runtime.
Reference: [15] <author> J.K.Ousterhout, </author> <title> Tcl and the Tk Toolkit, </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: The base language facilities with respect to the available data and control structures need to be comparable to those of compiled programming languages. Objectoriented aspects, i.e. classes, inheritance and polymorphism, are necessary for structuring more complex scripts. Scripting languages that can be thought as potential candidates are Tcl <ref> [15] </ref>/ Scheme [16] and their objectoriented extensions and of course Java [17]. These languages need to be extended with management facilities that will enable interaction with the TMN environment and the MIB. It is these extensions we consider in this section.
Reference: [16] <editor> William Clinger and Jonathan Rees (eds.), </editor> <title> Revised 4 Report on the Algorithmic Language Scheme, </title> <month> November </month> <year> 1991. </year>
Reference-contexts: Objectoriented aspects, i.e. classes, inheritance and polymorphism, are necessary for structuring more complex scripts. Scripting languages that can be thought as potential candidates are Tcl [15]/ Scheme <ref> [16] </ref> and their objectoriented extensions and of course Java [17]. These languages need to be extended with management facilities that will enable interaction with the TMN environment and the MIB. It is these extensions we consider in this section.
Reference: [17] <author> Sun Microsystems, </author> <title> The Java TM Language: A White Paper, </title> <year> 1995. </year>
Reference-contexts: Objectoriented aspects, i.e. classes, inheritance and polymorphism, are necessary for structuring more complex scripts. Scripting languages that can be thought as potential candidates are Tcl [15]/ Scheme [16] and their objectoriented extensions and of course Java <ref> [17] </ref>. These languages need to be extended with management facilities that will enable interaction with the TMN environment and the MIB. It is these extensions we consider in this section.

References-found: 17

