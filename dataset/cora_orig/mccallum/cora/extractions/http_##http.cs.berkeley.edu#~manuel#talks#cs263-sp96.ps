URL: http://http.cs.berkeley.edu/~manuel/talks/cs263-sp96.ps
Refering-URL: http://http.cs.berkeley.edu/~manuel/
Root-URL: 
Email: http://www.cs.berkeley.edu/manuel  http://www.cs.berkeley.edu/manuel  
Title: Effect Systems (CS263 Guest lecture)  Effect Systems (CS263 Guest lecture)  
Author: Manuel Fahndrich Manuel F ahndrich 
Date: Slide 1  
Abstract: This talk is an introduction to effect systems in general. I give examples to motivate the extension of types with effect information. I also present generic effect system rules, and domain specific ones for store effects and exceptions. Effect inference and soundness are only briefly men tioned. The talk concludes with a short history on research in effect systems. 
Abstract-found: 1
Intro-found: 1
Reference: [JG91] <author> Pierre Jouvelot and David K. Gifford. </author> <title> Algebraic reconstruction of types and effects. </title> <booktitle> In Proceedings of the 18th Annual ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages, </booktitle> <pages> pages 303-310, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Since effects define a set algebra, general set constraint solvers are another solution. As an aside, the type inference problem for a language with records does also requires a nonstructural unification algorithm. Effect inference rules can be found in [TJ92] and <ref> [JG91] </ref>. <p> Polymorphic effect systems are first described in Lucassen's PhD thesis [Luc87]. That work got published in [LG88], where the authors describe an explicitly typed system for store effects that infers effect masking. The inference problem for effect systems is described and solved in <ref> [JG91] </ref>. In [TJ92], the authors add sub-effecting to the inference algorithm.
Reference: [LG88] <author> John M. Lucassen and David K. Gifford. </author> <title> Polymorphic effect systems. </title> <booktitle> In Proceedings of the 15th Annual ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages, </booktitle> <pages> pages 47-57, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: At each step, a well-formed state is transformed into a new well-formed state, and the 10 type and effect of the remaining computation is preserved or decreased. Furthermore, the reduction step should only produce effects that are described by the statically inferred effect. See <ref> [LG88] </ref> and [TJ92] for two distinct proof approaches. Slide 15 Soundness At each reduction step of and operational semantics, W F state (he; si) e : t; red =) W F state (he 0 ; s 0 i) e 0 : t 0 ; 0 show that: 1. <p> That work in turn is based on ideas taken from flow analysis research. Polymorphic effect systems are first described in Lucassen's PhD thesis [Luc87]. That work got published in <ref> [LG88] </ref>, where the authors describe an explicitly typed system for store effects that infers effect masking. The inference problem for effect systems is described and solved in [JG91]. In [TJ92], the authors add sub-effecting to the inference algorithm.
Reference: [Luc87] <author> John M. Lucassen. </author> <title> Types and Effects Towards the Integration of Functional and Imperative Programming. </title> <type> Ph.D. thesis, </type> <institution> MIT Laboratory for Computer Science, </institution> <month> August </month> <year> 1987. </year>
Reference-contexts: That work in turn is based on ideas taken from flow analysis research. Polymorphic effect systems are first described in Lucassen's PhD thesis <ref> [Luc87] </ref>. That work got published in [LG88], where the authors describe an explicitly typed system for store effects that infers effect masking. The inference problem for effect systems is described and solved in [JG91]. In [TJ92], the authors add sub-effecting to the inference algorithm.
Reference: [TJ92] <author> Jean-Pierre Talpin and Pierre Jouvelot. </author> <title> Polymorphic type, region and effect inference. </title> <journal> Journal of Functional Programming, </journal> <volume> 2(3) </volume> <pages> 245-271, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Since effects define a set algebra, general set constraint solvers are another solution. As an aside, the type inference problem for a language with records does also requires a nonstructural unification algorithm. Effect inference rules can be found in <ref> [TJ92] </ref> and [JG91]. <p> At each step, a well-formed state is transformed into a new well-formed state, and the 10 type and effect of the remaining computation is preserved or decreased. Furthermore, the reduction step should only produce effects that are described by the statically inferred effect. See [LG88] and <ref> [TJ92] </ref> for two distinct proof approaches. Slide 15 Soundness At each reduction step of and operational semantics, W F state (he; si) e : t; red =) W F state (he 0 ; s 0 i) e 0 : t 0 ; 0 show that: 1. <p> Polymorphic effect systems are first described in Lucassen's PhD thesis [Luc87]. That work got published in [LG88], where the authors describe an explicitly typed system for store effects that infers effect masking. The inference problem for effect systems is described and solved in [JG91]. In <ref> [TJ92] </ref>, the authors add sub-effecting to the inference algorithm.
Reference: [TT93] <author> M. Tofte and J. Talpin. </author> <title> Implementation of the typed call-by-value -calculus using a stack of regions. </title> <booktitle> In Twenty-First Annual ACM Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1993. </year> <note> To appear. 12 </note>
Reference-contexts: That work got published in [LG88], where the authors describe an explicitly typed system for store effects that infers effect masking. The inference problem for effect systems is described and solved in [JG91]. In [TJ92], the authors add sub-effecting to the inference algorithm. More recently, Tofte and Talpin <ref> [TT93] </ref> show how effect inference can be used to completely stack allocate the typed call-by-value lambda calculus. 11 Slide 16 Background * Originated in work on FX for parallel compilation. * Lucassen87 PhD Thesis. * Lucassen & Gifford POPL'88, explicitly typed system, can infer masking. * Jouvelot & Gifford, POPL'91, Algebraic
References-found: 5

