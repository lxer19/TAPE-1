URL: http://roger-rabbit.cs.berkeley.edu/~twong/classes/db/report.ps.gz
Refering-URL: http://roger-rabbit.cs.berkeley.edu/~twong/classes/index.html
Root-URL: http://www.cs.berkeley.edu
Title: CS286 Class Project: Indexing Wavelets  
Author: Sara McMains Taku Tokuyasu Tina Wong 
Date: May 10, 1996  
Affiliation: Computer Science Division, EECS Department University of California at Berkeley  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Charles E. Jacobs, Adam Finkelstein, David H. Salesin, </author> <title> Fast Multiresolution Image Querying, </title> <booktitle> in Proceedings of SIGGRAPH95 (Los Angeles, </booktitle> <address> CA, </address> <month> August 6-11, </month> <year> 1995), </year> <note> ACM. </note>
Reference-contexts: A number of approaches come to mind. One is to assume that the images are annotated with descriptions of their content, so that the problem is converted to one of text retrieval. This has been the traditional method of choice, but it has its limitations <ref> [1] </ref>. Another suggestion might be to ask the computer vision people for help in designing object recognizers to extract the image content, either beforehand or on the fly. This unfortunately is generally beyond the capability of current technology. <p> Our interest in this problem began when we came across a description of a project at the University of Washington <ref> [1] </ref>. As described further below, the UW project uses a wavelet representation of images and accesses them using keys based directly on this 1 representation. <p> We begin, however, by describing the University of Washington database and their wavelet image representation in more detail. 2 Background We based our project on an image query engine created by the Fast Multiresolution Image Querying project <ref> [1] </ref> (which we will often refer to as simply the UW project) at the University of Washington. We were fortunate to be able to obtain the source code, including the query interface and a small database of images to start us off. <p> We also wished to avoid 3 The UW team implemented a number of clever optimizations to reduce the constant that sits in front of this linear dependence (see <ref> [1] </ref>). 5 the pain of tracking down the bugs which might appear in a research prototype such as Postgres95 [6]. A major drawback of using a commercial system is that we do not have access to the source code.
Reference: [2] <author> C. Faloutsos et al, </author> <title> Efficient and Effective Querying by Image Content, </title> <type> preprint. </type> <note> More information about the QBIC system is available at http://wwwqbic.almaden.ibm.com/ qbic/qbic.html/ </note>
Reference-contexts: There remains the fundamental question of how well one can cluster a database of wavelets (or more generally, multi-keyed data). This is a tough problem, to which highly refined techniques from the AI community, for example, can be applied. This is the subject of ongoing research <ref> [2] </ref>.
Reference: [3] <institution> The UC Berkeley Digital Library Project, </institution> <note> accessible at http://elib.cs.berkeley.edu/. </note>
Reference-contexts: We were fortunate to be able to obtain the source code, including the query interface and a small database of images to start us off. We later obtained additional images from the UC Berkeley Digital Library Project <ref> [3] </ref>, for a total of 5000 images. To enter a query in this system, the user actually paints a query image, depending on memory or perhaps a thumbnail to guide its creation.
Reference: [4] <author> Eric J. Stollnitz, Tony D. DeRose, and David H. Salesin, </author> <title> Wavelets for Computer Graphics: A Primer, </title> <type> Technical report 94-09-11, </type> <institution> Department of Computer Sci 13 ence and Engineering, University of Washington, </institution> <month> September </month> <year> 1994. </year> <note> Available at http://www.cs.washington.edu/research/projects/grail2/www/Projects/wavelets.html. </note>
Reference-contexts: For the case of wavelets, the functions of interest are piecewise constant. For example, the wavelet basis functions 2 for a four-segment grid in one dimension is given in Figure 1 (this example is taken from <ref> [4] </ref>). Note that the f functions describe progressively finer spatial detail, and that the first function differs from the rest in having a nonzero average value. <p> We call the first coefficient the average value, and the others detail coefficients (or more loosely, wavelet coefficients). For a more thorough (and highly readable) introduction, the interested reader is referred to <ref> [4] </ref>. This idea can be generalized to two dimensions by forming products of one-dimensional wavelet functions. These wavelets then form a basis for functions that are piecewise constant on a square grid, such as pixel-based digital images.
Reference: [5] <author> Antonin Guttman, R-Trees: </author> <title> A Dynamic Index Structure for Spatial Searching, </title> <booktitle> in Proceedings of the 1984 ACM SIGMOD International Conference on Management of Data, 1984, pp.47-57, ACM. </booktitle>
Reference: [6] <institution> POSTGRES95, Database Research Group, U.C. Berkeley. </institution> <note> Source code is available at http://s2k-ftp.CS.Berkeley.EDU:8000/postgres/. 14 </note>
Reference-contexts: We also wished to avoid 3 The UW team implemented a number of clever optimizations to reduce the constant that sits in front of this linear dependence (see [1]). 5 the pain of tracking down the bugs which might appear in a research prototype such as Postgres95 <ref> [6] </ref>. A major drawback of using a commercial system is that we do not have access to the source code. Thus we can only affect the creation of the index indirectly through the methods provided by the system.
References-found: 6

