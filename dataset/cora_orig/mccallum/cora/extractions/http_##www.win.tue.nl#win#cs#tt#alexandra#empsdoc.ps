URL: http://www.win.tue.nl/win/cs/tt/alexandra/empsdoc.ps
Refering-URL: http://www.win.tue.nl/win/cs/tt/alexandra/documents.html
Root-URL: http://www.win.tue.nl
Title: Documentation for EMPS development.  
Author: Alexandra Janssen Raemaekers 
Date: August 15, 1995  
Address: Eindhoven, The Netherlands  
Affiliation: Department of Mathematics and Computer Science Eindhoven University of Technology  
Abstract-found: 0
Intro-found: 1
Reference: [AvdS93] <author> D. Alstein and P. van der Stok. </author> <title> Hard real-time reliable multicast in the dedos system. </title> <type> 93/17, </type> <month> June </month> <year> 1993. </year>
Reference-contexts: If one processor fails, for example, only this part of the system needs to be reloaded and configured. Parallelism in computer systems improves system performance and can make it suitable for SRT and HRT software applications. See <ref> [AvdS93] </ref> and [Ver92] for more details. The main purpose of the EMPS is to provide efficient and transparent utilities for interproces-sorcommunication. One of the utilities is fast point to point communication between processors. See [Jan94b]. The processor, the EMPS is based on is a Motorola 68030 processor.
Reference: [Jan94a] <author> A.H.T. Janssen. </author> <title> An introduction to the generation of the EMPS. </title> <institution> Eindhoven University of Technology, Computing Science, </institution> <year> 1994. </year>
Reference-contexts: On top of DEDOS, distributed applications may be written. However, our main concern lies in the kernel and application layers. For an explanation of the generation of the EMPS <ref> [Jan94a] </ref> can be examined. The EMPS supports DEDOS as an operating system. The combination of parallel processor hardware and kernel software can be used to locate errors, restart and reconfigure the system. If one processor fails, for example, only this part of the system needs to be reloaded and configured. <p> Interrupts are only handled by the system controller To load the kernel software as described in <ref> [Jan94a] </ref> an initialization file, installed at address 0xE000 is executed. The file takes care of preparing a memory area mapping evironment and then loads the complete kernel. This procedure is only needed for the processor that is called the system controller of the EMPS. <p> The software programmed in the EPROM is available in the directory: /home/svin11c/dedos/Dedos/Emps/Slavemon Via the system bus (VME) the kernel software in the file emps.q as described in <ref> [Jan94a] </ref> can be sent to the other processors by the system controller. The executable file is sent in blocks of 512 by the system controller. If a slave processor has received the data a reply is given by an interrupt. <p> This is always the address at the table with index 0: xdef terminate_proc sys_terminate_proc: equ 0 terminate_proc: MOVEQ #sys_terminate_proc,D0 BRA do_syscall It is required that stdemps.obj is the first linked object after the header file object. See <ref> [Jan94a] </ref>. Using this method for calling a kernel function has the advantage that it does not matter whether the call is made from usermode or from supervisormode, because register A0 is used to transfer the address of the parameters. <p> Notice that in the link file emps.lnk the object file load.obj is linked first and empsend.obj is linked as the last object. This is necessary for the definition of the labels at the required virtual addresses. The files init.map and emps.map show the virtual addresses of the sections. See <ref> [Jan94a] </ref>. Initially, the location counter will point to offset 0 within a section. <p> For the creation of the kernel we used : -c -ansi -asm=-W:32 -X133 -X6 -X23 In the old version these options are used to change the compilers behaviour and to create the desired objects for the kernel. See <ref> [Jan94a] </ref>. To compile and link the kernel, a lot of different options can be used.
Reference: [Jan94b] <author> A.H.T. Janssen. </author> <title> Transputer link communication in the EMPS. </title> <institution> Eindhoven University of Technology, Computing Science, </institution> <year> 1994. </year>
Reference-contexts: See [AvdS93] and [Ver92] for more details. The main purpose of the EMPS is to provide efficient and transparent utilities for interproces-sorcommunication. One of the utilities is fast point to point communication between processors. See <ref> [Jan94b] </ref>. The processor, the EMPS is based on is a Motorola 68030 processor. The 68030 processor is provided with a Memory Management Unit facility. 2 Chapter 2 The MC68030 Processor The MC68030 is the computer module, used in the EMPS hardware. <p> Often performance is the reason why the construction with global variables is preferred . 4.3.1 Performance The kernel software is not always consistent in the decision between performance and robust code constructions. An extra function call can improve the readability of the code but reduces speed, see <ref> [Jan94b] </ref>. Error detection is also a time consuming action. An example: MB_QE *qe; - printf ("_MBSearch : Queue Element not found &gt; pid = %lX"n",*pid ); return; - else - prev_qe = qe-&gt;prev; - shows that kernel dumps can be avoided by introducing extra checks on pointers.
Reference: [Mar94] <author> Rob Marissen. </author> <title> The real-time emps kernel: Memory management and suitability for epep/phydas. </title> <type> Master's thesis, </type> <institution> Eindhoven University of Technology, Physical Computing Science, </institution> <month> September </month> <year> 1994. </year>
Reference-contexts: The kernel software can only be downloaded to other processors by the system controller if the software has been downloaded successfully. 2.2.1 Master protocols Phylan is the local area network that is used by the Physics Department, to connect different computer systems for the control of physics experiments. <ref> [Mar94] </ref> contains descriptions of the system hardware components that can be used in the EMPS. Every node contains one Phylan board. If only one node uses Phylan, the single-master protocol is used to supervise the multiprocessor system. <p> Now TRAP # 13 is used for all system calls and the index in D0 identifies which call has to be executed in the kernel. A table containing all possible addresses of functions that can be called by an application is used with the index. See <ref> [Mar94] </ref>. Termination of a process, for example, can only be exececuted in supervisor mode. The procedure is executed when an application process has finished its last statement. If the assembly statement RTS finishes the process, the supervisor stack should contain the address where the termination procedure can be found. <p> A T (ranslation) C (ontrol) register defines the size of pages in memory and specifies the number of address bytes used to index into the various levels of the translation tree. In other words, it defines the lay-out of the translation tree. For more information <ref> [Mar94] </ref> and [vD91] can be consulted. 3.1 Translation Control register The TC data structure is used to set the various bits of the MMU Translation Control register. <p> The Level C data and heap tables can grow from lower to higher adresses. This figure shows an overview of memory management like it was designed by [vD93]. The most recent EMPS version has a different lay-out. See <ref> [Mar94] </ref> for more information. At initialization time only those table trees are filled that are needed for downloading the kernel. After the kernel has been downloaded tables that are needed for memory management of the kernelprocesses and for any application processes are filled. <p> In the future it will have to prevent application processes from accessing memory pages they are not allowed to. 3.4 The new memory management The memory management in the kernel has been changed lately as described in <ref> [Mar94] </ref>. A restriction of the EMPS was the location of the memoryboards in a crate. One board could only be installed at one specific slot. More than one hardware memory board in software is only checked at initialization time. <p> The pointer to levelC is identical for all allocations but the remaining virtual address part, pointed to by one of the 61 entries, is equal to the physical location. The sum of the entries is 64. See <ref> [Mar94] </ref> for more information. 3.4.2 Overview of implemented changes A short overview of the changes in memory management are: * For application processes that allocate one contiguous block of memory, an early termination page descriptor will be used.
Reference: [Sof92] <author> Green Hills Software. </author> <title> Green Hills Compiler Family Development Guide. </title> <booktitle> Oasys, Green Hills Software, </booktitle> <month> January </month> <year> 1992. </year>
Reference-contexts: contain: (directory lib30) X20 -X23 -X35 -X58 -X93 -R -X114 -D__BigEndian -Dhasatexit -D__IeeeFloat -DUN_BUFFERED_STD -DNOFLOAT -DOASYS (directory lib68) -X20 -X23 -X35 -X58 -X93 -R -X114 -D__BigEndian -Dhasatexit 20 -D__IeeeFloat -DUN_BUFFERED_STD -DNOFLOAT -DOASYS The SPECIAL files contain: -O -asm=-C:68030/68881-O:NOLC -X98 -X99 -X129 -X130 (directory lib30) -O -asm=-C:68000-W:32-O:NOLC -v (directory lib68) See <ref> [Sof92] </ref> for an explanation of these options. The settings in the SPECIAL file override the OPTS settings. To check which options are active the option -S can be used. With this option only assembly output files are produced. In the first lines the options that are active are displayed.
Reference: [vD91] <author> G.J.W. v. </author> <title> Dijk. </title> <booktitle> Memory management in the emps system, </booktitle> <month> November </month> <year> 1991. </year>
Reference-contexts: A T (ranslation) C (ontrol) register defines the size of pages in memory and specifies the number of address bytes used to index into the various levels of the translation tree. In other words, it defines the lay-out of the translation tree. For more information [Mar94] and <ref> [vD91] </ref> can be consulted. 3.1 Translation Control register The TC data structure is used to set the various bits of the MMU Translation Control register.
Reference: [vD93] <author> G.J.W. v. Dijk. </author> <title> The Design of the EMPS Multiprocessor Executive for Distributed Computing. </title> <type> Doctor's thesis, </type> <institution> Eindhoven University of Technology, </institution> <year> 1993. </year>
Reference-contexts: See [Jan94b]. The processor, the EMPS is based on is a Motorola 68030 processor. The 68030 processor is provided with a Memory Management Unit facility. 2 Chapter 2 The MC68030 Processor The MC68030 is the computer module, used in the EMPS hardware. See <ref> [vD93] </ref> for a block diagram of the computer module. On the computer module a 128K EPROM has been programmed with the basic software instructions to access the hardware. This software is called the monitor. See [vH92]. <p> The Level C data and heap tables can grow from lower to higher adresses. This figure shows an overview of memory management like it was designed by <ref> [vD93] </ref>. The most recent EMPS version has a different lay-out. See [Mar94] for more information. At initialization time only those table trees are filled that are needed for downloading the kernel.
Reference: [Ver92] <author> G.A. Vermeulen. </author> <title> Reliable multicast for soft real-time processes in dedos. </title> <type> Master's thesis, </type> <institution> Eindhoven University of Technology, Department of Mathematics and Computing Science, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: If one processor fails, for example, only this part of the system needs to be reloaded and configured. Parallelism in computer systems improves system performance and can make it suitable for SRT and HRT software applications. See [AvdS93] and <ref> [Ver92] </ref> for more details. The main purpose of the EMPS is to provide efficient and transparent utilities for interproces-sorcommunication. One of the utilities is fast point to point communication between processors. See [Jan94b]. The processor, the EMPS is based on is a Motorola 68030 processor.
Reference: [vH92] <author> L. van Houten. </author> <title> User manual Monitor MPS030. </title> <institution> Eindhoven University of Technology, Physical & Technical Laboratory Automation Group, </institution> <month> April </month> <year> 1992. </year> <month> 26 </month>
Reference-contexts: See [vD93] for a block diagram of the computer module. On the computer module a 128K EPROM has been programmed with the basic software instructions to access the hardware. This software is called the monitor. See <ref> [vH92] </ref>. The EPROM is copied to the processor memory (RAM) initially, which occupies physical addresses 0x00000000 to 0x00200000. The monitor size is about 48K. This means addresses 0x0 to 0xC000 will be occupied. <p> The monitor size is about 48K. This means addresses 0x0 to 0xC000 will be occupied. The next section will explain how the monitor instructions are used to install the operating system on the hardware. 2.1 The Monitor With the monitor, a basic set of instructions as described in <ref> [vH92] </ref> becomes available. Assembler instructions will be used to execute the commands. <p> For example, DUART is mapped onto the addresses 0xFFFFFFF0 to 0xFFFFFFFF. See <ref> [vH92] </ref>. The transputer links are mapped on 0xFFFFFFC0 to 0xFFFFFFCF.
References-found: 9

