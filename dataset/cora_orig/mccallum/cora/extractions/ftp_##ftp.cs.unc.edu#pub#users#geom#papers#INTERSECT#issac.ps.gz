URL: ftp://ftp.cs.unc.edu/pub/users/geom/papers/INTERSECT/issac.ps.gz
Refering-URL: http://www.cs.unc.edu/Research/graphics/pubs.html
Root-URL: http://www.cs.unc.edu
Email: fkrishnas,manochag@cs.unc.edu  
Title: Numeric-Symbolic Algorithms for Evaluating One-Dimensional Algebraic Sets  
Author: Shankar Krishnan Dinesh Manocha 
Address: Chapel Hill, NC 27599 USA  
Affiliation: Department of Computer Science University of North Carolina  
Note: Appeared in Proceedings of ISSAC'95  
Abstract: We present efficient algorithms based on a combination of numeric and symbolic techniques for evaluating one-dimensional algebraic sets in a subset of the real domain. Given a description of a one-dimensional algebraic set, we compute its projection using resultants. We represent the resulting plane curve as a singular set of a matrix polynomial as opposed to roots of a bivariate polynomial. Given the matrix formulation, we make use of algorithms from numerical linear algebra to compute start points on all the components, partition the domain such that each resulting region contains only one component and evaluate it accurately using marching methods. We also present techniques to handle singularities for well-conditioned inputs. The resulting algorithm is iterative and its complexity is output sensitive. It has been implemented in floating-point arithmetic and we highlight its performance in the context of computing intersection of high-degree algebraic surfaces. 
Abstract-found: 1
Intro-found: 1
Reference: [AB88] <author> S.S. Abhyankar and C. Bajaj. </author> <title> Computations with algebraic curves. </title> <booktitle> In Lecture Notes in Computer Science, </booktitle> <volume> volume 358, </volume> <pages> pages 279-284. </pages> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference-contexts: Every algebraic space curve is birationally equivalent to an algebraic plane curve and the latter can be computed using Gr-obner bases [Buc89] and resultants. Given an algebraic plane curve, techniques for desingulariza-tion based on quadratic transformations are given in <ref> [Wal50, Abh90, AB88] </ref>. However, the resulting algorithm can be exponential in the degree of the curve. Algorithms based on Collins' cylindrical algebraic decomposition (CAD), [Col75], have been used for evaluating all components of algebraic curves [Arn83, SS83]. However, its worst case complexity is doubly exponential in the number of variables.
Reference: [ABB + 92] <author> E. Anderson, Z. Bai, C. Bischof, J. Demmel, J. Don-garra, J. Du Croz, A. Greenbaum, S. Hammarling, and D. Sorensen. </author> <title> LAPACK User's Guide, Release 1.0. </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1992. </year>
Reference-contexts: Thus making use of component splitting and inverse power iterations, we avoid component jumping during tracing. 5 Implementation and Performance The algorithm has been implemented and its performance was measured on a number of models. The algorithm uses existing EISPACK [GBDM77] and LAPACK <ref> [ABB + 92] </ref> routines for some of the matrix computations. At each stage of the algorithm, we can compute bounds on the accuracy of the results obtained based on the accuracy and convergence of numerical methods adopted like eigenvalue computation, power iteration and Gaussian elimination.
Reference: [Abh90] <author> S. S. Abhyankar. </author> <title> Algebraic Geometry for Scientists and Engineers. </title> <publisher> American Mathematical Society, Providence, </publisher> <editor> R. I., </editor> <year> 1990. </year>
Reference-contexts: In most cases we are interested in evaluating all the components in the subset of the real domain. All these problems have been extensively studied in the literature. It is well known in algebraic geometry that curves of genus zero have a rational parametrization <ref> [Abh90] </ref>. <p> Every algebraic space curve is birationally equivalent to an algebraic plane curve and the latter can be computed using Gr-obner bases [Buc89] and resultants. Given an algebraic plane curve, techniques for desingulariza-tion based on quadratic transformations are given in <ref> [Wal50, Abh90, AB88] </ref>. However, the resulting algorithm can be exponential in the degree of the curve. Algorithms based on Collins' cylindrical algebraic decomposition (CAD), [Col75], have been used for evaluating all components of algebraic curves [Arn83, SS83]. However, its worst case complexity is doubly exponential in the number of variables.
Reference: [AF88] <author> S. Arnborg and H. Feng. </author> <title> Algebraic decomposition of regular curves. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 5 </volume> <pages> 131-140, </pages> <year> 1988. </year>
Reference-contexts: Algorithms based on Collins' cylindrical algebraic decomposition (CAD), [Col75], have been used for evaluating all components of algebraic curves [Arn83, SS83]. However, its worst case complexity is doubly exponential in the number of variables. For plane curves, improved polynomial time algorithms based on CAD have been presented in <ref> [AF88, AM88] </ref>. However, the exponent in terms of N (the degree of the curve) is rather high. Furthermore, these algorithms are implemented using exact arithmetic, which makes them slow in practice. Other algorithms include those based on Whitney's stratified sets and gap theorems [Can88]. <p> Meth ods of <ref> [AF88, AM88] </ref> evaluate the topological types of plane algebraic curves using exact arithmetic. These algorithms provide very accurate results, but are inefficient for high degree curves. 6 Problem Conditioning The three most important considerations in the evaluation of algebraic curves are robustness, accuracy and efficiency.
Reference: [AM88] <author> D. Arnon and S. McCallum. </author> <title> A polynomial time algorithm for the topological type of a real algebraic curve. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 5 </volume> <pages> 213-236, </pages> <year> 1988. </year>
Reference-contexts: Algorithms based on Collins' cylindrical algebraic decomposition (CAD), [Col75], have been used for evaluating all components of algebraic curves [Arn83, SS83]. However, its worst case complexity is doubly exponential in the number of variables. For plane curves, improved polynomial time algorithms based on CAD have been presented in <ref> [AF88, AM88] </ref>. However, the exponent in terms of N (the degree of the curve) is rather high. Furthermore, these algorithms are implemented using exact arithmetic, which makes them slow in practice. Other algorithms include those based on Whitney's stratified sets and gap theorems [Can88]. <p> Meth ods of <ref> [AF88, AM88] </ref> evaluate the topological types of plane algebraic curves using exact arithmetic. These algorithms provide very accurate results, but are inefficient for high degree curves. 6 Problem Conditioning The three most important considerations in the evaluation of algebraic curves are robustness, accuracy and efficiency.
Reference: [Arn83] <author> D. S. Arnon. </author> <title> Topologically reliable display of algebraic curves. </title> <journal> Computer Graphics, </journal> <volume> 17 </volume> <pages> 219-227, </pages> <year> 1983. </year>
Reference-contexts: However, the resulting algorithm can be exponential in the degree of the curve. Algorithms based on Collins' cylindrical algebraic decomposition (CAD), [Col75], have been used for evaluating all components of algebraic curves <ref> [Arn83, SS83] </ref>. However, its worst case complexity is doubly exponential in the number of variables. For plane curves, improved polynomial time algorithms based on CAD have been presented in [AF88, AM88]. However, the exponent in terms of N (the degree of the curve) is rather high. <p> In many ways the underlying philosophy is rather similar to CAD based algorithms for partitioning the domain into regions. Our algorithm uses an efficient and accurate zero-dimensional solver [Man94] and works well using finite precision algorithm. On the other hand, the CAD based algorithm <ref> [Arn83] </ref> compute all the extremal and turning points using purely symbolic methods and exact arithmetic.
Reference: [AS86] <author> W. Auzinger and H.J. Stetter. </author> <title> An elimination algorithm for the computation of all zeros of a system of multivariate polynomial equations. </title> <booktitle> In International Series of Numerical Mathematics, </booktitle> <volume> volume 86, </volume> <pages> pages 11-30, </pages> <year> 1986. </year>
Reference-contexts: This includes algorithms for computing all components including the closed loops. However, these algorithms are somewhat restrictive and cannot be used for evaluating general algebraic curves. The combination of resultant formulations and matrix computations have been used for evaluating zero-dimensional algebraic sets in <ref> [Laz83, AS86, Man92, Man94] </ref>. In this paper, we use them for evaluating one-dimensional algebraic sets. Organization : The rest of the paper is organized in the following manner. In section 2, we review some literature on resultants and matrix computations and formulate the problem in terms of matrix polynomials.
Reference: [BHHL88] <author> C. L. Bajaj, C. M. Hoffmann, J. E. Hopcroft, and R. E. Lynch. </author> <title> Tracing surface intersections. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5 </volume> <pages> 285-307, </pages> <year> 1988. </year>
Reference-contexts: Further, there are very few published performance results on surface intersection algorithms. Interval arithmetic has been used to compute surface intersections. In computing the intersection curve between a bumpy sphere and a cylinder, [Sny92] reports a running time of several minutes on a HP9000 series 835 workstation. <ref> [BHHL88, BR90] </ref> use quadratic transformations to remove singularities from the intersection curve and trace it in higher dimensions. [MD94a] provide efficient algorithms to evaluate zero-dimensional algebraic sets. Meth ods of [AF88, AM88] evaluate the topological types of plane algebraic curves using exact arithmetic.
Reference: [BR90] <author> C. Bajaj and A. Royappa. </author> <title> The GANITH algebraic geometry toolkit. </title> <booktitle> In Lecture Notes in Computer Science, </booktitle> <volume> volume 429, </volume> <pages> pages 268-269. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Further, there are very few published performance results on surface intersection algorithms. Interval arithmetic has been used to compute surface intersections. In computing the intersection curve between a bumpy sphere and a cylinder, [Sny92] reports a running time of several minutes on a HP9000 series 835 workstation. <ref> [BHHL88, BR90] </ref> use quadratic transformations to remove singularities from the intersection curve and trace it in higher dimensions. [MD94a] provide efficient algorithms to evaluate zero-dimensional algebraic sets. Meth ods of [AF88, AM88] evaluate the topological types of plane algebraic curves using exact arithmetic.
Reference: [Buc89] <author> B. </author> <title> Buchberger. Applications of groebner bases in non-linear computational geometry. </title> <editor> In D. Kapur and J. Mundy, editors, </editor> <booktitle> Geometric Reasoning, </booktitle> <pages> pages 415-447. </pages> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: Prior Work: There is a considerable amount of work in classic and modern literature related to evaluation of algebraic curves. Every algebraic space curve is birationally equivalent to an algebraic plane curve and the latter can be computed using Gr-obner bases <ref> [Buc89] </ref> and resultants. Given an algebraic plane curve, techniques for desingulariza-tion based on quadratic transformations are given in [Wal50, Abh90, AB88]. However, the resulting algorithm can be exponential in the degree of the curve.
Reference: [Can88] <author> J.F. Canny. </author> <title> The Complexity of Robot Motion Planning. ACM Doctoral Dissertation Award. </title> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: Many of the fundamental problems like surface-surface intersection, offsets of curves and surfaces, Voronoi sets generated by curves and surfaces in geometric modeling [Hof89], kinematic analysis of a redundant robot [Cra89], robot motion planning <ref> [Can88] </ref>, object recognition in computer vision [PK92] and conformation space of molecular chains [CH] correspond to evaluating one-dimensional algebraic sets. In most cases we are interested in evaluating all the components in the subset of the real domain. All these problems have been extensively studied in the literature. <p> However, the exponent in terms of N (the degree of the curve) is rather high. Furthermore, these algorithms are implemented using exact arithmetic, which makes them slow in practice. Other algorithms include those based on Whitney's stratified sets and gap theorems <ref> [Can88] </ref>. In practice all these algorithms are efficient for low degree curves only. Numerical and finite precision algorithms based on interval arithmetic [Moo79] and homotopy methods [GZ79, Mor92] have been used for evaluating algebraic sets.
Reference: [CE93] <author> J. Canny and I. Emiris. </author> <title> An efficient algorithm for the sparse mixed resultant. </title> <booktitle> In Proceedings of AAECC, </booktitle> <pages> pages 89-104. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The most general formulation of the resultant expresses it as a ratio of two determinants [Mac02]. Let us denote the top and bottom matrices as P (u; v) and Q (u; v) respectively. A similar formulation for P (u; v) for sparse polynomial systems has been highlighted in <ref> [CE93] </ref>. In our case, we will make use of the matrix formulation and represent it as an unevaluated determinant. It is possible that P (u; v) and Q (u; v) are singular, while the resultant is nonzero.
Reference: [CH] <author> G.W. Crippen and T.F. </author> <title> Havel. Distance geometry and molecular conformation. </title> <publisher> Research Studies Press, </publisher> <address> New York. </address>
Reference-contexts: Many of the fundamental problems like surface-surface intersection, offsets of curves and surfaces, Voronoi sets generated by curves and surfaces in geometric modeling [Hof89], kinematic analysis of a redundant robot [Cra89], robot motion planning [Can88], object recognition in computer vision [PK92] and conformation space of molecular chains <ref> [CH] </ref> correspond to evaluating one-dimensional algebraic sets. In most cases we are interested in evaluating all the components in the subset of the real domain. All these problems have been extensively studied in the literature.
Reference: [Col75] <author> G.E. Collins. </author> <title> Quantifier elimination for real closed fields by cylindrical algebraic decomposition. </title> <booktitle> In Lecture Notes in Computer Science, number 33, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1975. </year>
Reference-contexts: Given an algebraic plane curve, techniques for desingulariza-tion based on quadratic transformations are given in [Wal50, Abh90, AB88]. However, the resulting algorithm can be exponential in the degree of the curve. Algorithms based on Collins' cylindrical algebraic decomposition (CAD), <ref> [Col75] </ref>, have been used for evaluating all components of algebraic curves [Arn83, SS83]. However, its worst case complexity is doubly exponential in the number of variables. For plane curves, improved polynomial time algorithms based on CAD have been presented in [AF88, AM88].
Reference: [Cra89] <author> J.J. Craig. </author> <title> Introduction to Robotics: Mechanics and Control. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1989. </year>
Reference-contexts: Many of the fundamental problems like surface-surface intersection, offsets of curves and surfaces, Voronoi sets generated by curves and surfaces in geometric modeling [Hof89], kinematic analysis of a redundant robot <ref> [Cra89] </ref>, robot motion planning [Can88], object recognition in computer vision [PK92] and conformation space of molecular chains [CH] correspond to evaluating one-dimensional algebraic sets. In most cases we are interested in evaluating all the components in the subset of the real domain.
Reference: [Dix08] <author> A.L. Dixon. </author> <title> The eliminant of three quantics in two independent variables. </title> <journal> Proceedings of London Mathematical Society, </journal> <volume> 6 </volume> <pages> 49-69, 209-236, </pages> <year> 1908. </year>
Reference-contexts: The resultant can be expressed in terms of matrices and determinants. In particular, single determinant formulations are known for values of n = 2; 3; 4; 5; 6 <ref> [Dix08, Jou91, MC27, SZ94] </ref>. We use M (u; v) to represent the resulting matrix polynomial. The most general formulation of the resultant expresses it as a ratio of two determinants [Mac02]. Let us denote the top and bottom matrices as P (u; v) and Q (u; v) respectively. <p> The variables s and t are eliminated using Dixon's resultant <ref> [Dix08] </ref>. If the patch F (s; t) is of degree m fi n, then the Dixon's resultant obtained by eliminating s and t from F 1 ; F 2 and F 3 is a bivariate matrix (M (u; v)) of order 2mn.
Reference: [GBDM77] <author> B.S. Garbow, J.M. Boyle, J. Dongarra, and C.B. Moler. </author> <title> Matrix Eigensystem Routines - EISPACK Guide Extension, volume 51. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1977. </year>
Reference-contexts: Thus making use of component splitting and inverse power iterations, we avoid component jumping during tracing. 5 Implementation and Performance The algorithm has been implemented and its performance was measured on a number of models. The algorithm uses existing EISPACK <ref> [GBDM77] </ref> and LAPACK [ABB + 92] routines for some of the matrix computations. At each stage of the algorithm, we can compute bounds on the accuracy of the results obtained based on the accuracy and convergence of numerical methods adopted like eigenvalue computation, power iteration and Gaussian elimination.
Reference: [GL89] <author> G.H. Golub and C.F. Van Loan. </author> <title> Matrix Computations. </title> <publisher> John Hopkins Press, </publisher> <address> Baltimore, </address> <year> 1989. </year>
Reference-contexts: Algorithms to compute all the eigen-values are based on QR orthogonal transformations <ref> [GL89] </ref>. They compute all the real as well as complex eigenvalues. To compute a real or complex subset of the roots, iterative algorithms are given in [Man94]. If there are few real solutions (two or three in the domain), the latter algorithm is significantly faster than the QR algorithm. <p> Therefore, we need to compute the smallest eigenvalue of the matrix C sI. The smallest eigenvalue of C sI corresponds to the largest eigenvalue of (C sI) 1 . Instead of computing the inverse explicitly (which is numerically unstable), we use inverse power iterations <ref> [GL89] </ref>. To solve the matrix system efficiently, we use LU decomposition of the matrix (C sI) using Gaussian elimination. We also make use of the structure of the matrix to reduce its complexity. Given s, let B = C sI.
Reference: [GLR82] <author> I. Gohberg, P. Lancaster, and L. Rodman. </author> <title> Matrix Polynomials. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1982. </year>
Reference: [GZ79] <author> C.B. Garcia and W.I. Zangwill. </author> <title> Finding all solutions to polynomial systems and other systems of equations. </title> <journal> Math. Prog., </journal> <volume> 16 </volume> <pages> 159-176, </pages> <year> 1979. </year>
Reference-contexts: Other algorithms include those based on Whitney's stratified sets and gap theorems [Can88]. In practice all these algorithms are efficient for low degree curves only. Numerical and finite precision algorithms based on interval arithmetic [Moo79] and homotopy methods <ref> [GZ79, Mor92] </ref> have been used for evaluating algebraic sets. While the former are slow in practice, the latter have been restricted to zero-dimensional algebraic sets and suffer from problems like component jumping.
Reference: [Hof89] <author> C.M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Mor-gan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1989. </year>
Reference-contexts: Algebraic sets are widely used for representing objects and constraints in computer graphics, geometric modeling, robotics, computer vision and molecular modeling. Many of the fundamental problems like surface-surface intersection, offsets of curves and surfaces, Voronoi sets generated by curves and surfaces in geometric modeling <ref> [Hof89] </ref>, kinematic analysis of a redundant robot [Cra89], robot motion planning [Can88], object recognition in computer vision [PK92] and conformation space of molecular chains [CH] correspond to evaluating one-dimensional algebraic sets. In most cases we are interested in evaluating all the components in the subset of the real domain. <p> While the former are slow in practice, the latter have been restricted to zero-dimensional algebraic sets and suffer from problems like component jumping. There is a considerable amount of emphasis in the modeling literature to evaluate surface intersections and offset curves <ref> [Hof89, Hof90, SN91, MC91, Hoh91] </ref> and in vision literature to compute aspect graphs [PK92]. This includes algorithms for computing all components including the closed loops. However, these algorithms are somewhat restrictive and cannot be used for evaluating general algebraic curves. <p> A number of algorithms for tracing based on local iterative methods have been used in homotopy methods, surface interrogations and solutions of differential equations <ref> [Hof89, Mor92] </ref>. Given a point on the curve, an approximate value of the next point is obtained by taking a small step size in a direction determined by the local geometry of the curve. <p> The conditioning becomes more significant because of errors introduced by numerical computations. If the input data changes by *, the output results will change by a function ffi (*). For very small values of *, there may exist a constant such that ffi (*) * <ref> [Hof89] </ref>. If is small the problem is said to be well-conditioned. A large value of signifies an ill-conditioned problem. The value is called the condition number. However, it is nontrivial to calculate for general algebraic problems, as shown by [Ren94]. In our case, the algorithm works well for well-conditioned inputs. <p> In terms of efficiency it outperforms earlier methods based on CAD, desingulariza-tion etc. and it is more robust and accurate (in terms of identifying all components and singularities) as compared to specific algorithms for surface intersection presented in <ref> [Hof89, Hoh91, SN91] </ref>.
Reference: [Hof90] <author> C.M. Hoffmann. </author> <title> A dimensionality paradigm for surface interrogations. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 7 </volume> <pages> 517-532, </pages> <year> 1990. </year>
Reference-contexts: While the former are slow in practice, the latter have been restricted to zero-dimensional algebraic sets and suffer from problems like component jumping. There is a considerable amount of emphasis in the modeling literature to evaluate surface intersections and offset curves <ref> [Hof89, Hof90, SN91, MC91, Hoh91] </ref> and in vision literature to compute aspect graphs [PK92]. This includes algorithms for computing all components including the closed loops. However, these algorithms are somewhat restrictive and cannot be used for evaluating general algebraic curves.
Reference: [Hoh91] <author> M.E. Hohmeyer. </author> <title> A surface intersection algorithm based on loop detection. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(4) </volume> <pages> 473-490, </pages> <year> 1991. </year> <note> Special issue on Solid Modeling. </note>
Reference-contexts: While the former are slow in practice, the latter have been restricted to zero-dimensional algebraic sets and suffer from problems like component jumping. There is a considerable amount of emphasis in the modeling literature to evaluate surface intersections and offset curves <ref> [Hof89, Hof90, SN91, MC91, Hoh91] </ref> and in vision literature to compute aspect graphs [PK92]. This includes algorithms for computing all components including the closed loops. However, these algorithms are somewhat restrictive and cannot be used for evaluating general algebraic curves. <p> In terms of efficiency it outperforms earlier methods based on CAD, desingulariza-tion etc. and it is more robust and accurate (in terms of identifying all components and singularities) as compared to specific algorithms for surface intersection presented in <ref> [Hof89, Hoh91, SN91] </ref>.
Reference: [Jou91] <author> Jean-Pierre Jouanolou. </author> <title> Le Formalisme du Resultant, </title> <booktitle> volume 90 of Advances in Mathematics. </booktitle> <year> 1991. </year>
Reference-contexts: The resultant can be expressed in terms of matrices and determinants. In particular, single determinant formulations are known for values of n = 2; 3; 4; 5; 6 <ref> [Dix08, Jou91, MC27, SZ94] </ref>. We use M (u; v) to represent the resulting matrix polynomial. The most general formulation of the resultant expresses it as a ratio of two determinants [Mac02]. Let us denote the top and bottom matrices as P (u; v) and Q (u; v) respectively.
Reference: [Kat80] <author> T. Kato. </author> <title> Perturbation Theory for Linear Operators. </title> <publisher> Springer Verlag, </publisher> <address> Berlin, 2 edition, </address> <year> 1980. </year>
Reference-contexts: Since the reduction process involves rounding errors, the resulting system will have a cluster of eigenvalues near the original multiple eigenvalue. However, it has been shown that the arithmetic mean of the cluster is usually much less sensitive to small perturbations than individual eigenvalues <ref> [Kat80] </ref>. In such cases, our algorithm computes the arithmetic mean of the cluster by following a simple heuristic which monitors the condition number of individual eigen-values [MD94b]. 7 Conclusion We have presented a general algorithm based on numeric and symbolic methods for evaluation of algebraic curves in arbitrary dimensions.
Reference: [Laz83] <author> D. Lazard. </author> <title> Groebner bases, gaussian elimination and resolution of systems of algebraic equations. </title> <booktitle> In EUROCAL'83. European Computer Algebra Conference, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1983. </year>
Reference-contexts: This includes algorithms for computing all components including the closed loops. However, these algorithms are somewhat restrictive and cannot be used for evaluating general algebraic curves. The combination of resultant formulations and matrix computations have been used for evaluating zero-dimensional algebraic sets in <ref> [Laz83, AS86, Man92, Man94] </ref>. In this paper, we use them for evaluating one-dimensional algebraic sets. Organization : The rest of the paper is organized in the following manner. In section 2, we review some literature on resultants and matrix computations and formulate the problem in terms of matrix polynomials.
Reference: [Mac02] <author> F.S. </author> <title> Macaulay. On some formula in elimination. </title> <journal> Proceedings of London Mathematical Society, </journal> <volume> 1(33) </volume> <pages> 3-27, </pages> <month> May </month> <year> 1902. </year>
Reference-contexts: In particular, single determinant formulations are known for values of n = 2; 3; 4; 5; 6 [Dix08, Jou91, MC27, SZ94]. We use M (u; v) to represent the resulting matrix polynomial. The most general formulation of the resultant expresses it as a ratio of two determinants <ref> [Mac02] </ref>. Let us denote the top and bottom matrices as P (u; v) and Q (u; v) respectively. A similar formulation for P (u; v) for sparse polynomial systems has been highlighted in [CE93].
Reference: [Man92] <author> D. Manocha. </author> <title> Algebraic and Numeric Techniques for Modeling and Robotics. </title> <type> PhD thesis, </type> <institution> Computer Science Division, Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: This includes algorithms for computing all components including the closed loops. However, these algorithms are somewhat restrictive and cannot be used for evaluating general algebraic curves. The combination of resultant formulations and matrix computations have been used for evaluating zero-dimensional algebraic sets in <ref> [Laz83, AS86, Man92, Man94] </ref>. In this paper, we use them for evaluating one-dimensional algebraic sets. Organization : The rest of the paper is organized in the following manner. In section 2, we review some literature on resultants and matrix computations and formulate the problem in terms of matrix polynomials. <p> Given a point on the plane curve, (u 0 ; v 0 ), the corresponding point on the space curve, (w 1 0 ; w 2 0 ; : : : ; w n1 0 ), is computed using the kernel of M (u 0 ; v 0 ) <ref> [Man92] </ref>. The algorithm for evaluation of algebraic curves computes a start point on each component and traces the resulting component. The tracing algorithm uses the local geometry of the curve (like derivative information) to determine successive points. <p> We need to find all the solutions of this matrix polynomial. The roots of ^ M (u) have a one-to-one correspondence with the eigenvalues of the companion matrix C <ref> [Man92] </ref>. <p> : : : 0 . . . . . . 0 0 0 : : : I n 3 5 (1) where M i = ^ M 1 d ^ M i [GLR82].In case ^ M d is singular or ill-conditioned, the problem is reduced to a generalized eigenvalue problem <ref> [Man92] </ref>. Algorithms to compute all the eigen-values are based on QR orthogonal transformations [GL89]. They compute all the real as well as complex eigenvalues. To compute a real or complex subset of the roots, iterative algorithms are given in [Man94].
Reference: [Man94] <author> D. Manocha. </author> <title> Computing selected solutions of polynomial equations. </title> <booktitle> In Proceedings of International Symposium on Symbolic and Algebraic Computation, </booktitle> <pages> pages 1-8, </pages> <address> Oxford, England, 1994. </address> <publisher> ACM Press. </publisher>
Reference-contexts: This includes algorithms for computing all components including the closed loops. However, these algorithms are somewhat restrictive and cannot be used for evaluating general algebraic curves. The combination of resultant formulations and matrix computations have been used for evaluating zero-dimensional algebraic sets in <ref> [Laz83, AS86, Man92, Man94] </ref>. In this paper, we use them for evaluating one-dimensional algebraic sets. Organization : The rest of the paper is organized in the following manner. In section 2, we review some literature on resultants and matrix computations and formulate the problem in terms of matrix polynomials. <p> Algorithms to compute all the eigen-values are based on QR orthogonal transformations [GL89]. They compute all the real as well as complex eigenvalues. To compute a real or complex subset of the roots, iterative algorithms are given in <ref> [Man94] </ref>. If there are few real solutions (two or three in the domain), the latter algorithm is significantly faster than the QR algorithm. <p> In many ways the underlying philosophy is rather similar to CAD based algorithms for partitioning the domain into regions. Our algorithm uses an efficient and accurate zero-dimensional solver <ref> [Man94] </ref> and works well using finite precision algorithm. On the other hand, the CAD based algorithm [Arn83] compute all the extremal and turning points using purely symbolic methods and exact arithmetic.
Reference: [MC27] <author> F. Morley and A.B. Coble. </author> <title> New results in elimination. </title> <journal> American Journal of Mathematics, </journal> <volume> 49 </volume> <pages> 463-488, </pages> <year> 1927. </year>
Reference-contexts: The resultant can be expressed in terms of matrices and determinants. In particular, single determinant formulations are known for values of n = 2; 3; 4; 5; 6 <ref> [Dix08, Jou91, MC27, SZ94] </ref>. We use M (u; v) to represent the resulting matrix polynomial. The most general formulation of the resultant expresses it as a ratio of two determinants [Mac02]. Let us denote the top and bottom matrices as P (u; v) and Q (u; v) respectively.
Reference: [MC91] <author> D. Manocha and J.F. Canny. </author> <title> A new approach for surface intersection. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(4) </volume> <pages> 491-516, </pages> <year> 1991. </year> <note> Special issue on Solid Modeling. </note>
Reference-contexts: While the former are slow in practice, the latter have been restricted to zero-dimensional algebraic sets and suffer from problems like component jumping. There is a considerable amount of emphasis in the modeling literature to evaluate surface intersections and offset curves <ref> [Hof89, Hof90, SN91, MC91, Hoh91] </ref> and in vision literature to compute aspect graphs [PK92]. This includes algorithms for computing all components including the closed loops. However, these algorithms are somewhat restrictive and cannot be used for evaluating general algebraic curves. <p> To compute the first and higher order partials, we use a simple variation of Gaussian elimination <ref> [MC91] </ref>. The basic idea is to compute the partial derivative of each matrix entry at the beginning of computation and update the derivative information along with each step of Gaussian elimination.
Reference: [MD94a] <author> D. Manocha and J. Demmel. </author> <title> Algorithms for intersecting parametric and algebraic curves i: simple intersections. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 13(1) </volume> <pages> 73-100, </pages> <year> 1994. </year>
Reference-contexts: In computing the intersection curve between a bumpy sphere and a cylinder, [Sny92] reports a running time of several minutes on a HP9000 series 835 workstation. [BHHL88, BR90] use quadratic transformations to remove singularities from the intersection curve and trace it in higher dimensions. <ref> [MD94a] </ref> provide efficient algorithms to evaluate zero-dimensional algebraic sets. Meth ods of [AF88, AM88] evaluate the topological types of plane algebraic curves using exact arithmetic.
Reference: [MD94b] <author> D. Manocha and J. Demmel. </author> <title> Algorithms for intersecting parametric and algebraic curves ii: multiple intersections. Computer Vision, Graphics and Image Processing: Graphical Models and Image Processing, </title> <note> 1994. To appear. </note>
Reference-contexts: However, it has been shown that the arithmetic mean of the cluster is usually much less sensitive to small perturbations than individual eigenvalues [Kat80]. In such cases, our algorithm computes the arithmetic mean of the cluster by following a simple heuristic which monitors the condition number of individual eigen-values <ref> [MD94b] </ref>. 7 Conclusion We have presented a general algorithm based on numeric and symbolic methods for evaluation of algebraic curves in arbitrary dimensions. It computes a birationally equivalent plane curve using resultants and represents it as a matrix polynomial.
Reference: [Moo79] <author> R.E. Moore. </author> <title> Methods and applications of interval analysis. </title> <note> SIAM studies in applied mathematics. Siam, </note> <year> 1979. </year>
Reference-contexts: Furthermore, these algorithms are implemented using exact arithmetic, which makes them slow in practice. Other algorithms include those based on Whitney's stratified sets and gap theorems [Can88]. In practice all these algorithms are efficient for low degree curves only. Numerical and finite precision algorithms based on interval arithmetic <ref> [Moo79] </ref> and homotopy methods [GZ79, Mor92] have been used for evaluating algebraic sets. While the former are slow in practice, the latter have been restricted to zero-dimensional algebraic sets and suffer from problems like component jumping.
Reference: [Mor92] <author> A. P. Morgan. </author> <title> Polynomial continuation and its relationship to the symbolic reduction of polynomial systems. </title> <booktitle> In Symbolic and Numerical Computation for Artificial Intelligence, </booktitle> <pages> pages 23-45, </pages> <year> 1992. </year>
Reference-contexts: Other algorithms include those based on Whitney's stratified sets and gap theorems [Can88]. In practice all these algorithms are efficient for low degree curves only. Numerical and finite precision algorithms based on interval arithmetic [Moo79] and homotopy methods <ref> [GZ79, Mor92] </ref> have been used for evaluating algebraic sets. While the former are slow in practice, the latter have been restricted to zero-dimensional algebraic sets and suffer from problems like component jumping. <p> A number of algorithms for tracing based on local iterative methods have been used in homotopy methods, surface interrogations and solutions of differential equations <ref> [Hof89, Mor92] </ref>. Given a point on the curve, an approximate value of the next point is obtained by taking a small step size in a direction determined by the local geometry of the curve.
Reference: [PK92] <author> J. Ponce and D.J. Kriegman. </author> <title> Elimination theory and computer vision: Recognition and positioning of curved 3d objects from range, intensity, or contours. </title> <booktitle> In Symbolic and Numerical Computation for Artificial Intelligence, </booktitle> <pages> pages 123-146, </pages> <year> 1992. </year>
Reference-contexts: Many of the fundamental problems like surface-surface intersection, offsets of curves and surfaces, Voronoi sets generated by curves and surfaces in geometric modeling [Hof89], kinematic analysis of a redundant robot [Cra89], robot motion planning [Can88], object recognition in computer vision <ref> [PK92] </ref> and conformation space of molecular chains [CH] correspond to evaluating one-dimensional algebraic sets. In most cases we are interested in evaluating all the components in the subset of the real domain. All these problems have been extensively studied in the literature. <p> There is a considerable amount of emphasis in the modeling literature to evaluate surface intersections and offset curves [Hof89, Hof90, SN91, MC91, Hoh91] and in vision literature to compute aspect graphs <ref> [PK92] </ref>. This includes algorithms for computing all components including the closed loops. However, these algorithms are somewhat restrictive and cannot be used for evaluating general algebraic curves. The combination of resultant formulations and matrix computations have been used for evaluating zero-dimensional algebraic sets in [Laz83, AS86, Man92, Man94].
Reference: [Ren94] <author> J. Renegar. </author> <title> Is it possible to know a problem instance is ill-posed? Journal of Complexity, </title> <booktitle> 10(1) </booktitle> <pages> 1-56, </pages> <year> 1994. </year>
Reference-contexts: If is small the problem is said to be well-conditioned. A large value of signifies an ill-conditioned problem. The value is called the condition number. However, it is nontrivial to calculate for general algebraic problems, as shown by <ref> [Ren94] </ref>. In our case, the algorithm works well for well-conditioned inputs. Our algorithm (which reduces starting point computation and tracing to solving eigensystems) can encounter ill-conditioned inputs if the system has higher multiplicity eigen-values.
Reference: [SN91] <author> T.W. Sederberg and T. Nishita. </author> <title> Geometric hermite approximation of surface patch intersection curves. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 8 </volume> <pages> 97-114, </pages> <year> 1991. </year>
Reference-contexts: While the former are slow in practice, the latter have been restricted to zero-dimensional algebraic sets and suffer from problems like component jumping. There is a considerable amount of emphasis in the modeling literature to evaluate surface intersections and offset curves <ref> [Hof89, Hof90, SN91, MC91, Hoh91] </ref> and in vision literature to compute aspect graphs [PK92]. This includes algorithms for computing all components including the closed loops. However, these algorithms are somewhat restrictive and cannot be used for evaluating general algebraic curves. <p> In terms of efficiency it outperforms earlier methods based on CAD, desingulariza-tion etc. and it is more robust and accurate (in terms of identifying all components and singularities) as compared to specific algorithms for surface intersection presented in <ref> [Hof89, Hoh91, SN91] </ref>.
Reference: [Sny92] <author> J. Snyder. </author> <title> Interval arithmetic for computer graphics. </title> <booktitle> In Proceedings of ACM Siggraph, </booktitle> <pages> pages 121-130, </pages> <year> 1992. </year>
Reference-contexts: The decomposition step is similar in nature to that of interval arithmetic based algorithms. However, for most cases our algorithm performs fewer levels of decomposition. Interval arithmetic based algorithms <ref> [Sny92] </ref> perform a number of decompositions as a function of the accuracy parameter. These algorithms are usually robust, but are slow in practice. <p> Unfortunately, there are no existing benchmarks available to test our algorithm. Further, there are very few published performance results on surface intersection algorithms. Interval arithmetic has been used to compute surface intersections. In computing the intersection curve between a bumpy sphere and a cylinder, <ref> [Sny92] </ref> reports a running time of several minutes on a HP9000 series 835 workstation. [BHHL88, BR90] use quadratic transformations to remove singularities from the intersection curve and trace it in higher dimensions. [MD94a] provide efficient algorithms to evaluate zero-dimensional algebraic sets.
Reference: [SS83] <author> J. T. Schwartz and M. Sharir. </author> <title> On the piano movers probelem ii, general techniques for computing topological properties of real algebraic manifolds. </title> <journal> Advances of Applied Maths, </journal> <volume> 4 </volume> <pages> 298-351, </pages> <year> 1983. </year>
Reference-contexts: However, the resulting algorithm can be exponential in the degree of the curve. Algorithms based on Collins' cylindrical algebraic decomposition (CAD), [Col75], have been used for evaluating all components of algebraic curves <ref> [Arn83, SS83] </ref>. However, its worst case complexity is doubly exponential in the number of variables. For plane curves, improved polynomial time algorithms based on CAD have been presented in [AF88, AM88]. However, the exponent in terms of N (the degree of the curve) is rather high.
Reference: [SZ94] <author> B. Sturmfels and A. Zelevinsky. </author> <title> Multigraded resultants of sylvester type. </title> <journal> Journal of Algebra, </journal> <note> 1994. To appear. </note>
Reference-contexts: The resultant can be expressed in terms of matrices and determinants. In particular, single determinant formulations are known for values of n = 2; 3; 4; 5; 6 <ref> [Dix08, Jou91, MC27, SZ94] </ref>. We use M (u; v) to represent the resulting matrix polynomial. The most general formulation of the resultant expresses it as a ratio of two determinants [Mac02]. Let us denote the top and bottom matrices as P (u; v) and Q (u; v) respectively.
Reference: [Wal50] <author> R.J. Walker. </author> <title> Algebraic Curves. </title> <publisher> Princeton University Press, </publisher> <address> New Jersey, </address> <year> 1950. </year>
Reference-contexts: Every algebraic space curve is birationally equivalent to an algebraic plane curve and the latter can be computed using Gr-obner bases [Buc89] and resultants. Given an algebraic plane curve, techniques for desingulariza-tion based on quadratic transformations are given in <ref> [Wal50, Abh90, AB88] </ref>. However, the resulting algorithm can be exponential in the degree of the curve. Algorithms based on Collins' cylindrical algebraic decomposition (CAD), [Col75], have been used for evaluating all components of algebraic curves [Arn83, SS83]. However, its worst case complexity is doubly exponential in the number of variables.
References-found: 42

