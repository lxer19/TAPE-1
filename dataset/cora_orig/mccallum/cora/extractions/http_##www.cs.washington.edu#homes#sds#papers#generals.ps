URL: http://www.cs.washington.edu/homes/sds/papers/generals.ps
Refering-URL: http://www.cs.washington.edu/homes/sds/
Root-URL: http://www.cs.washington.edu
Email: sds@cs.washington.edu  
Title: Handling Time in Real-Time Specifications  
Author: Sean David Sandys 
Date: April 28, 1998  
Address: Box 352350 Seattle, WA 98195-2350  
Affiliation: Department of Computer Science Engineering University of Washington  
Abstract: This paper compares and evaluates techniques that are used for the specification, analysis, and simulation of time in the Statecharts, Modechart, Esterel, and Timed Automata notations and systems. This paper describes various formalisms and models of time, and examines how those formalisms impact the simulation and analysis of real-time system specification. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Alur, R., C. Courcoubetis, and D. </author> <title> Dill (1990). Model-checking for real-time systems. </title> <booktitle> In IEEE Symposium On Logic in Computer Science, </booktitle> <pages> pp. 414-425. </pages>
Reference-contexts: Various groups have had success using model checkers to verify systems specified in Statecharts or some of its variants.(Anderson, Beame, Burns, Chan, Modugno, Notkin, and Reese 1996; Helbig and Kelb 1994) Alur, Courcoubetis and Dill <ref> (Alur, Courcoubetis, and Dill 1990) </ref> report on the additional complexity of model checking a finite state system in the presence of dense time versus discrete time. <p> Finally, the third implies that additional constraints are necessary to ensure system safety. Although, some examples in Modechart have been verified using theorem provers (Jahanian and Mok 1986), Alur and Henzinger have shown that RTL is undecidable in general <ref> (Alur and Henzinger 1990) </ref>. However, there are decidable classes of timing properties for Modechart specifications (Ja-hanian and Stuart 1988). Two of those classes include: 1. Minimum and maximum separation of related event occurences. 2. Inclusion and exclusion of intervals described by event occurences.
Reference: <author> Alur, R. and D. L. </author> <title> Dill (1994). A theory of timed automata. </title> <booktitle> Theoretical Computer Science 126, </booktitle> <pages> 183-235. </pages>
Reference-contexts: General's Examination Written Report 3 Throughout this paper four methodologies, Statecharts (Harel 1987; Harel and Naamad 1996), Modechart (Jahanian and Mok 1994), The Theory of Timed Automata (Timed Automata) <ref> (Alur and Dill 1994) </ref>, and Esterel (Berry and Georges 1992) are used to illustrate different choices in developing techniques for specifying, analyzing, and simulating time in real-time systems. <p> parallel composition of modules where each module waits on a subset of input signals, and then immediately reacts to those inputs and emits some set of output signals. 2.2 Modeling Time Alur and Dill describe three possible ways to model time: discrete-time model, a fictitious-clock model, and a dense-time model <ref> (Alur and Dill 1994) </ref>. In a discrete-time model, time is a monotonically increasing sequence of integers. The fictitious-clock model requires the sequence of integer times be non-decreasing. <p> Additionally, timed automata allow the specification of timing of paths directly rather than as a concatenation of timing contraints on individual transitions. Alur and Dill <ref> (Alur and Dill 1994) </ref> identify four types of timed automata that differ along two dimensions: (1) acceptance criteria and (2) deterministic versus non-deterministic.
Reference: <author> Alur, R. and T. A. </author> <title> Henzinger (1990). Real-time logics: Complexity and expressiveness. </title> <booktitle> In IEEE Symposium On Logic in Computer Science, </booktitle> <pages> pp. 390-401. </pages>
Reference-contexts: Various groups have had success using model checkers to verify systems specified in Statecharts or some of its variants.(Anderson, Beame, Burns, Chan, Modugno, Notkin, and Reese 1996; Helbig and Kelb 1994) Alur, Courcoubetis and Dill <ref> (Alur, Courcoubetis, and Dill 1990) </ref> report on the additional complexity of model checking a finite state system in the presence of dense time versus discrete time. <p> Finally, the third implies that additional constraints are necessary to ensure system safety. Although, some examples in Modechart have been verified using theorem provers (Jahanian and Mok 1986), Alur and Henzinger have shown that RTL is undecidable in general <ref> (Alur and Henzinger 1990) </ref>. However, there are decidable classes of timing properties for Modechart specifications (Ja-hanian and Stuart 1988). Two of those classes include: 1. Minimum and maximum separation of related event occurences. 2. Inclusion and exclusion of intervals described by event occurences.
Reference: <author> Anderson, R. J., P. Beame, S. Burns, W. Chan, F. Modugno, D. Notkin, and J. D. Reese (1996, </author> <month> October). </month> <title> Model checking large software specifications. </title> <editor> In D. Garlan (Ed.), SIGSOFT'96: </editor> <booktitle> Proceedings of the Fourth ACM SIGSOFT Symposium on the Foundations of Software Engineering, </booktitle> <address> San Francisco, CA, USA, </address> <pages> pp. 156-166. </pages> <note> ACM. General's Examination Written Report 25 Berry, </note> <author> G. and G. </author> <title> Georges (1992). The esterel synchronous programming language: design, semantics and implementation. </title> <booktitle> Science of Computer Programming 19. </booktitle>
Reference: <author> Clarke, E. W. and J. M. Wing (1996, </author> <month> September). </month> <title> Formal methods: State of the art and future directions. </title> <type> Technical Report CMS-CS-96-178, </type> <institution> Carnegie Mellon University. </institution>
Reference-contexts: By analyzing the requirements of a system, it is possible to validate the behavior of the system against a set of properties. A survey of formal methods <ref> (Clarke and Wing 1996) </ref> identifies two major categories for formal analysis: Model Checking and Theorem Proving. I will also talk about one other class of analysis of these models, Focused Analyses.
Reference: <author> Daws, C., A. Olivero, and S. </author> <month> Yovine </month> <year> (1995). </year> <title> Verifying et-lotos programs with kronos. </title> <editor> In D. Hogrefe and S. Leue (Eds.), </editor> <booktitle> International Conference on Formal Description Techniques, </booktitle> <pages> pp. 227-242. </pages>
Reference: <author> Edwards, S., L. Lavagnu, E. A. Lee, and A. </author> <month> Sangiovanni-Vicentelli </month> <year> (1997, </year> <month> March). </month> <title> Design of embedded systems: Formal models, validation, and synthesis. </title> <booktitle> In Proceedings of the IEEE, </booktitle> <volume> Volume 85, </volume> <pages> pp. 366-390. </pages>
Reference-contexts: If this assumption is true, the designer's job is made much easier by not having to worry about race conditions between communicating components. These latter definition of synchrony, used by Esterel differs from that used by State-charts (Harel and Naamad 1996) and the Tagged-Signal Model <ref> (Edwards, Lavagnu, Lee, and Sangiovanni-Vicentelli 1997) </ref>. In this second definition of synchrony, there are clock ticks and events can happen only at those clock ticks. Using the second definition of synchrony, we can see that the languages that support a discrete-time model are also synchronous.
Reference: <author> Elbow, P. </author> <year> (1981). </year> <title> Writing With Power. </title> <address> New York: </address> <publisher> Oxford University Press. </publisher>
Reference: <author> Harel, D. </author> <year> (1987). </year> <title> Statecharts: A visual formalism for complex systems. </title> <booktitle> Science of Computer Programming (8), </booktitle> <pages> 231-274. </pages>
Reference: <author> Harel, D. and A. </author> <title> Naamad (1996, October). </title> <booktitle> The statemate semantics of statecharts. ACM Transactions on Software Engineering and Methodology 5 (4), </booktitle> <pages> 293-333. </pages>
Reference-contexts: If this assumption is true, the designer's job is made much easier by not having to worry about race conditions between communicating components. These latter definition of synchrony, used by Esterel differs from that used by State-charts <ref> (Harel and Naamad 1996) </ref> and the Tagged-Signal Model (Edwards, Lavagnu, Lee, and Sangiovanni-Vicentelli 1997). In this second definition of synchrony, there are clock ticks and events can happen only at those clock ticks.
Reference: <author> Helbig, J. and P. </author> <month> Kelb </month> <year> (1994, </year> <month> March). </month> <title> An obdd-representation of statecharts. </title> <booktitle> In European Conference on Design Automation, </booktitle> <pages> pp. 142-149. </pages>
Reference: <author> Jaffe, M. S. </author> <year> (1988). </year> <title> Completeness, Roubustness, and Safety in Real-Time Software Requirements Specifications. </title> <type> Ph. D. thesis, </type> <institution> University of California - Irvine. </institution>
Reference: <author> Jagadeesan, L. J., C. Puchol, and J. </author> <title> von Olnhausen (1995). Safety property verification od esterel programs and applications to telecommunication software. </title> <booktitle> In International General's Examination Written Report 26 Conference on Computer-Aided Verification LNCS, </booktitle> <volume> Volume 939, </volume> <pages> pp. 127-140. </pages>
Reference-contexts: Properties in Esterel can be verified by using the Esterel compiler as a model checker. A group at AT&T <ref> (Jagadeesan, Puchol, and von Olnhausen 1995) </ref> have described a technique for using a linear temporal logic (LTL) formula to generate an Esterel program s. This program is constructed such that the traces of s correspond to violations of the temporal formula.
Reference: <author> Jahanian, F. and A. K. Mok (1986, </author> <month> September). </month> <title> Safety analysis of timing properties in real-time systems. </title> <journal> In IEEE Transactions on Software Engineering, </journal> <volume> Volume SE-12, </volume> <pages> pp. 890-904. </pages>
Reference-contexts: Modechart (Jahanian and Mok 1994) defines its semantics using RTL as its underlying formalism. A theorem prover can be used on the RTL formula represented by the Modechart. Jahanian and Mok <ref> (Jahanian and Mok 1986) </ref> give three procedures to relate a safety property to a timing specification. 1. The safety assertion is a theorem derivable from the system specification. 2. The safety assertion is unsatisfiable with respect to the systems specification. 3. <p> The second, that the General's Examination Written Report 21 requirements causes the safety property to be violated. Finally, the third implies that additional constraints are necessary to ensure system safety. Although, some examples in Modechart have been verified using theorem provers <ref> (Jahanian and Mok 1986) </ref>, Alur and Henzinger have shown that RTL is undecidable in general (Alur and Henzinger 1990). However, there are decidable classes of timing properties for Modechart specifications (Ja-hanian and Stuart 1988). Two of those classes include: 1. Minimum and maximum separation of related event occurences. 2.
Reference: <author> Jahanian, F. and A. K. Mok (1994, Decemeber). Modechart: </author> <title> A specification language for real-time systems. </title> <journal> In IEEE Transactions on Software Engineering, </journal> <volume> Volume 20(12), </volume> <pages> pp. 933-947. </pages>
Reference-contexts: General's Examination Written Report 3 Throughout this paper four methodologies, Statecharts (Harel 1987; Harel and Naamad 1996), Modechart <ref> (Jahanian and Mok 1994) </ref>, The Theory of Timed Automata (Timed Automata) (Alur and Dill 1994), and Esterel (Berry and Georges 1992) are used to illustrate different choices in developing techniques for specifying, analyzing, and simulating time in real-time systems. <p> They show that the complexity of the model checking procedure is increased by a factor of C!, where C is the number of clocks used in the timed automata specification. Modechart <ref> (Jahanian and Mok 1994) </ref> defines its semantics using RTL as its underlying formalism. A theorem prover can be used on the RTL formula represented by the Modechart. Jahanian and Mok (Jahanian and Mok 1986) give three procedures to relate a safety property to a timing specification. 1.
Reference: <author> Jahanian, F. and D. A. Stuart (1988, </author> <month> December). </month> <title> A method for verifying properties of mod-echart specifications. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <pages> pp. 12-21. </pages>
Reference: <author> Larsen, K. G., P. Pettersson, and Y. </author> <title> Wang (1995). Model-checking for real-time systems. </title> <booktitle> In International Conference on Fundamentalls of Computational Theory, </booktitle> <volume> LCNS 965, </volume> <pages> pp. 62-88. </pages>
Reference-contexts: j 8OE 1 U c OE 2 ; where p is an element of the set of propositions, c is a natural number and is one of the following binary relations &lt;; ; =; ; &gt; (Alur, Courcoubetis, and Dill 1990; Daws, Olivero, and Yovine 1995) The UPPAAL model checker <ref> (Larsen, Pettersson, and Wang 1995) </ref> allows for the verification of logic properties of the form: ' ::= 82fi j 93fi where a is either a clock or data constraint, or state variable that indicates the active state of automaton.
Reference: <author> Puchol, C., D. A. Stuart, and A. K. Mok (1995, </author> <month> September). </month> <title> An operational semantics and a compiler for modechart specifications. </title> <type> Technical Report UTCS-TR95-37, </type> <institution> University of Texas at Austin. </institution>
Reference-contexts: Properties in Esterel can be verified by using the Esterel compiler as a model checker. A group at AT&T <ref> (Jagadeesan, Puchol, and von Olnhausen 1995) </ref> have described a technique for using a linear temporal logic (LTL) formula to generate an Esterel program s. This program is constructed such that the traces of s correspond to violations of the temporal formula. <p> In contrast to the others, Modechart may be the most limited of the methodologies because General's Examination Written Report 23 RTL does not have an executable semantics. However, work has been done in creating an executable semantics and a compiler for Modechart specifications <ref> (Puchol, Stuart, and Mok 1995) </ref>. Interestingly, the Modechart compiler converts Modechart specifications into Esterel programs and those programs are then compiled by the Esterel compiler into an executable file.
Reference: <author> Shaw, A. C. </author> <year> (1997). </year> <title> Real-Time Software Design. </title> <note> unpublished. </note>
Reference: <author> Shostak, R. E. </author> <year> (1979, </year> <month> April). </month> <title> A practical decision procedure for arithmetic with function sumbols. </title> <journal> Journal of the Association for Computing Machinery 26 (2), </journal> <pages> 351-360. </pages>
References-found: 20

