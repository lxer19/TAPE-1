URL: http://www.cs.utexas.edu/users/vl/mypapers/flp.ps
Refering-URL: http://www.cs.utexas.edu/users/vl/
Root-URL: http://www.cs.utexas.edu
Title: Foundations of Logic Programming  
Author: Vladimir Lifschitz 
Address: Austin, TX 78712  
Affiliation: Department of Computer Sciences University of Texas  
Abstract: This is a survey of the theory of logic programs with classical negation and negation as failure. The semantics of this class of programs is based on the notion of an answer set. The operation of Prolog is described in terms of proof search in the SLDNF calculus.
Abstract-found: 1
Intro-found: 1
Reference: [ Apt and Bezem, 1990 ] <author> Krzysztof Apt and Marc Bezem. </author> <title> Acyclic programs. </title> <editor> In David Warren and Peter Szeredi, editors, </editor> <booktitle> Logic Programming: Proc. of the Seventh Int'l Conf., </booktitle> <pages> pages 617-633, </pages> <year> 1990. </year>
Reference-contexts: Hierarchical programs were defined in [ Cavedon, 1989 ] , on the basis of a special case defined in [ Clark, 1978 ] . Another special case of hierarchical programs was studied and applied to reasoning about action in <ref> [ Apt and Bezem, 1990 ] </ref> . Tight programs were introduced by Fages [1994], under the name "positive-order-consistent." The notion of a stratified program was developed in a series of papers by Chandra and Harel [1985], Apt, Blair and Walker [1988], Van Gelder [1988] and Przymusinski [1988].
Reference: [ Apt and Bol, 1994 ] <author> Krzysztof Apt and Ronald Bol. </author> <title> Logic programming and negation: a survey. </title> <journal> Journal of Logic Programming, </journal> <volume> 19,20:9-71, </volume> <year> 1994. </year>
Reference: [ Apt et al., 1988 ] <author> Krzysztof Apt, Howard Blair, and Adrian Walker. </author> <title> Towards a theory of declarative knowledge. </title> <editor> In Jack Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 89-148. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: Supported sets were defined in <ref> [ Apt et al., 1988 ] </ref> . Well-founded and unfounded literals were introduced (for normal programs) in [ Van Gelder et al., 1990 ] and [ Przymusinski, 1991 ] . This concept is often used as a semantical foundation for logic programming. <p> Tight programs were introduced by Fages [1994], under the name "positive-order-consistent." The notion of a stratified program was developed in a series of papers by Chandra and Harel [1985], Apt, Blair and Walker [1988], Van Gelder [1988] and Przymusinski [1988]. Strict programs were defined in <ref> [ Apt et al., 1988 ] </ref> , and order-consistent programs in [ Sato, 1990 ] . Propositions 3.5 and 3.12 are from [ Fages, 1994 ] . The idea of tightening and Proposition 3.6 belong to Wallace [1993].
Reference: [ Baral and Gelfond, 1994 ] <author> Chitta Baral and Michael Gelfond. </author> <title> Logic programming and knowledge representation. </title> <journal> Journal of Logic Programming, </journal> <volume> 19,20:73-148, </volume> <year> 1994. </year>
Reference: [ Bidoit and Froidevaux, 1987 ] <author> Nicole Bidoit and Christine Froidevaux. </author> <title> Minimalism subsumes default logic and circumscription. </title> <booktitle> In Proc. of LICS-87, </booktitle> <pages> pages 89-97, </pages> <year> 1987. </year>
Reference: [ Cavedon, 1989 ] <author> Lawrence Cavedon. </author> <title> Continuity, consistency and completeness properties for logic programs. </title> <editor> In Giorgio Levi and Maurizio Martelli, editors, </editor> <booktitle> Logic Programming: Proc. of the Sixth Int'l Conf., </booktitle> <pages> pages 89-97, </pages> <year> 1989. </year>
Reference-contexts: The discussion of splitting in Sections 2.4 and 3.4 is based on [ Lifschitz and Turner, 1994 ] . The elimination step performed as part of splitting is an example of "partial 51 deduction" [ Komorowski, 1990 ] . Hierarchical programs were defined in <ref> [ Cavedon, 1989 ] </ref> , on the basis of a special case defined in [ Clark, 1978 ] . Another special case of hierarchical programs was studied and applied to reasoning about action in [ Apt and Bezem, 1990 ] .
Reference: [ Chandra and Harel, 1985 ] <author> Ashok Chandra and David Harel. </author> <title> Horn clause queries and generalizations. </title> <journal> Journal of Logic Programming, </journal> <volume> 2(1) </volume> <pages> 1-5, </pages> <year> 1985. </year>
Reference: [ Chen et al., 1995 ] <author> Weidong Chen, Terrance Swift, and David Warren. </author> <title> Efficient top-down computation of queries under the well-founded semantics. </title> <journal> Journal of Logic Programming, </journal> <volume> 24 </volume> <pages> 161-199, </pages> <year> 1995. </year>
Reference-contexts: D. Warren developed a more efficient implementation of Prolog and made it available to others. The second query evaluation method mentioned here, SLG, was designed and implemented by Chen and David S. Warren <ref> [ Chen et al., 1995 ] </ref> . The idea of negation as failure was introduced by Clark [1978], and the closed world assumption by Reiter [1978].
Reference: [ Clark, 1978 ] <author> Keith Clark. </author> <title> Negation as failure. </title> <editor> In Herve Gallaire and Jack Minker, editors, </editor> <booktitle> Logic and Data Bases, </booktitle> <pages> pages 293-322. </pages> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1978. </year>
Reference-contexts: The elimination step performed as part of splitting is an example of "partial 51 deduction" [ Komorowski, 1990 ] . Hierarchical programs were defined in [ Cavedon, 1989 ] , on the basis of a special case defined in <ref> [ Clark, 1978 ] </ref> . Another special case of hierarchical programs was studied and applied to reasoning about action in [ Apt and Bezem, 1990 ] .
Reference: [ Emden and Kowalski, 1976 ] <author> Maarten van Emden and Robert Kowalski. </author> <title> The semantics of predicate logic as a programming language. </title> <journal> Journal of the ACM, </journal> <volume> 23(4) </volume> <pages> 733-742, </pages> <year> 1976. </year>
Reference: [ Fages, 1994 ] <author> Fran~cois Fages. </author> <title> Consistency of Clark's completion and existence of stable models. </title> <journal> Journal of Methods of Logic in Computer Science, </journal> <volume> 1 </volume> <pages> 51-60, </pages> <year> 1994. </year>
Reference-contexts: Strict programs were defined in [ Apt et al., 1988 ] , and order-consistent programs in [ Sato, 1990 ] . Propositions 3.5 and 3.12 are from <ref> [ Fages, 1994 ] </ref> . The idea of tightening and Proposition 3.6 belong to Wallace [1993]. The reduction of arbitrary programs to normal programs was proposed in [ Gelfond and Lifschitz, 1990 ] . Proposition 3.18 is from [ Gelfond and Lifschitz, 1988 ] .
Reference: [ Fitting, 1990 ] <author> Melvin Fitting. </author> <title> First-order logic and automated theorem proving. </title> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: [ Gelfond and Lifschitz, 1988 ] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> The stable model semantics for logic programming. </title> <editor> In Robert Kowalski and Kenneth Bowen, editors, </editor> <booktitle> Logic Programming: Proc. of the Fifth Int'l Conf. and Symp., </booktitle> <pages> pages 1070-1080, </pages> <year> 1988. </year>
Reference-contexts: Propositions 3.5 and 3.12 are from [ Fages, 1994 ] . The idea of tightening and Proposition 3.6 belong to Wallace [1993]. The reduction of arbitrary programs to normal programs was proposed in [ Gelfond and Lifschitz, 1990 ] . Proposition 3.18 is from <ref> [ Gelfond and Lifschitz, 1988 ] </ref> . The abnormality predicate was first used by McCarthy [1986] in the context of his theory of circumscription.
Reference: [ Gelfond and Lifschitz, 1990 ] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Logic programs with classical negation. </title> <editor> In David Warren and Peter Szeredi, editors, </editor> <booktitle> Logic Programming: Proc. of the Seventh Int'l Conf., </booktitle> <pages> pages 579-597, </pages> <year> 1990. </year>
Reference-contexts: Propositions 3.5 and 3.12 are from [ Fages, 1994 ] . The idea of tightening and Proposition 3.6 belong to Wallace [1993]. The reduction of arbitrary programs to normal programs was proposed in <ref> [ Gelfond and Lifschitz, 1990 ] </ref> . Proposition 3.18 is from [ Gelfond and Lifschitz, 1988 ] . The abnormality predicate was first used by McCarthy [1986] in the context of his theory of circumscription.
Reference: [ Gelfond and Lifschitz, 1991 ] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Classical negation in logic programs and disjunctive databases. </title> <journal> New Generation Computing, </journal> <volume> 9 </volume> <pages> 365-385, </pages> <year> 1991. </year>
Reference-contexts: SLDNF calculi are further generalized in [ Lifschitz, 1995 ] and [ Lifschitz et al., 1995 ] . The notion of an answer set for disjunctive programs without negation as failure in the heads of rules was defined in <ref> [ Gelfond and Lifschitz, 1991 ] </ref> . This last limitation was removed by Lifschitz and Woo [1992]. Inoue and Sakama [1994] related negation as failure in heads to the important area of "abductive logic programming" [ Kakas et al., 1992 ] . Default logic was invented by Reiter [1980].
Reference: [ Gelfond, 1987 ] <author> Michael Gelfond. </author> <title> On stratified autoepistemic theories. </title> <booktitle> In Proc. AAAI-87, </booktitle> <pages> pages 207-211, </pages> <year> 1987. </year>
Reference: [ Inoue and Sakama, 1994 ] <author> Katsumi Inoue and Chiaki Sakama. </author> <title> On positive occurrences of negation as failure. </title> <booktitle> In Proc. of the Fourth Int'l Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 293-304, </pages> <year> 1994. </year>
Reference: [ Kakas et al., 1992 ] <author> Antonis Kakas, Robert Kowalski, and F. Toni. </author> <title> Abductive logic programming. </title> <journal> Journal of Logic and Computation, </journal> <volume> 2(6) </volume> <pages> 719-770, </pages> <year> 1992. </year>
Reference-contexts: This last limitation was removed by Lifschitz and Woo [1992]. Inoue and Sakama [1994] related negation as failure in heads to the important area of "abductive logic programming" <ref> [ Kakas et al., 1992 ] </ref> . Default logic was invented by Reiter [1980]. His definition of an extension was, historically, a source of the idea of an answer set; the work by Bidoit and Froidevaux mentioned above was based on the reduction of logic programs to default theories.
Reference: [ Komorowski, 1990 ] <author> Jan Komorowski. </author> <title> Towards a programming methodology founded on partial deduction. </title> <booktitle> In Proc. of ECAI-90, </booktitle> <year> 1990. </year>
Reference-contexts: The discussion of splitting in Sections 2.4 and 3.4 is based on [ Lifschitz and Turner, 1994 ] . The elimination step performed as part of splitting is an example of "partial 51 deduction" <ref> [ Komorowski, 1990 ] </ref> . Hierarchical programs were defined in [ Cavedon, 1989 ] , on the basis of a special case defined in [ Clark, 1978 ] .
Reference: [ Kunen, 1989 ] <author> Kenneth Kunen. </author> <title> Signed data dependencies in logic programs. </title> <journal> Journal of Logic Programming, </journal> <volume> 7(3) </volume> <pages> 231-245, </pages> <year> 1989. </year>
Reference-contexts: The abnormality predicate was first used by McCarthy [1986] in the context of his theory of circumscription. Our treatment of Prolog is based on the ideas of [ Mints, 1986 ] (translated into English as [ Mints, 1990 ] ) and <ref> [ Kunen, 1989 ] </ref> . SLDNF calculi are further generalized in [ Lifschitz, 1995 ] and [ Lifschitz et al., 1995 ] .
Reference: [ Lifschitz and Turner, 1994 ] <author> Vladimir Lifschitz and Hudson Turner. </author> <title> Splitting a logic program. </title> <editor> In Pascal Van Hentenryck, editor, </editor> <booktitle> Proc. Eleventh Int'l Conf. on Logic Programming, </booktitle> <pages> pages 23-37, </pages> <year> 1994. </year>
Reference-contexts: According to the "well-founded semantics," only well-founded literals are counted as consequences of the program. This approach and its extensions are applied to knowledge representation in [ Pereira et al., 1993 ] . The discussion of splitting in Sections 2.4 and 3.4 is based on <ref> [ Lifschitz and Turner, 1994 ] </ref> . The elimination step performed as part of splitting is an example of "partial 51 deduction" [ Komorowski, 1990 ] .
Reference: [ Lifschitz and Woo, 1992 ] <author> Vladimir Lifschitz and Thomas Woo. </author> <title> Answer sets in general nonmonotonic reasoning (preliminary report). </title> <editor> In Bernhard Nebel, Charles Rich, and William Swartout, editors, </editor> <booktitle> Proc. of the Third Int'l Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 603-614, </pages> <year> 1992. </year>
Reference: [ Lifschitz et al., 1995 ] <author> Vladimir Lifschitz, Norman McCain, Teodor Przymusinski, and Robert Stark. </author> <title> Loop checking and the well-founded semantics. </title> <booktitle> In Logic Programming and Non-monotonic Reasoning: Proceedings of the Third International Conference, </booktitle> <pages> pages 127-142, </pages> <year> 1995. </year> <month> 55 </month>
Reference-contexts: Our treatment of Prolog is based on the ideas of [ Mints, 1986 ] (translated into English as [ Mints, 1990 ] ) and [ Kunen, 1989 ] . SLDNF calculi are further generalized in [ Lifschitz, 1995 ] and <ref> [ Lifschitz et al., 1995 ] </ref> . The notion of an answer set for disjunctive programs without negation as failure in the heads of rules was defined in [ Gelfond and Lifschitz, 1991 ] . This last limitation was removed by Lifschitz and Woo [1992].
Reference: [ Lifschitz, 1995 ] <author> Vladimir Lifschitz. </author> <title> SLDNF, constructive negation and grounding. </title> <booktitle> In Proc. of ICLP-95, </booktitle> <pages> pages 581-595, </pages> <year> 1995. </year>
Reference-contexts: Our treatment of Prolog is based on the ideas of [ Mints, 1986 ] (translated into English as [ Mints, 1990 ] ) and [ Kunen, 1989 ] . SLDNF calculi are further generalized in <ref> [ Lifschitz, 1995 ] </ref> and [ Lifschitz et al., 1995 ] . The notion of an answer set for disjunctive programs without negation as failure in the heads of rules was defined in [ Gelfond and Lifschitz, 1991 ] . This last limitation was removed by Lifschitz and Woo [1992].
Reference: [ Lloyd, 1987 ] <author> John Lloyd. </author> <title> Foundations of logic programming. </title> <publisher> Springer-Verlag, </publisher> <year> 1987. </year> <note> Second, extended edition. </note>
Reference-contexts: In a similar way, Gelfond's paper related logic programs to another nonmonotonic formalism whose semantics is defined by a fixpoint construction|to the system of autoepistemic logic introduced by Moore [1985]. The monographs <ref> [ Lloyd, 1987 ] </ref> and [ Lobo et al., 1992 ] use the approaches to the semantics of logic programming different from ours. A survey of early work on negation as failure can be found in [ Shepherdson, 1988 ] .
Reference: [ Lobo et al., 1992 ] <author> Jorge Lobo, Jack Minker, and Arcot Rajasekar. </author> <title> Foundations of disjunctive logic programming. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: In a similar way, Gelfond's paper related logic programs to another nonmonotonic formalism whose semantics is defined by a fixpoint construction|to the system of autoepistemic logic introduced by Moore [1985]. The monographs [ Lloyd, 1987 ] and <ref> [ Lobo et al., 1992 ] </ref> use the approaches to the semantics of logic programming different from ours. A survey of early work on negation as failure can be found in [ Shepherdson, 1988 ] .
Reference: [ McCarthy, 1959 ] <author> John McCarthy. </author> <title> Programs with common sense. </title> <booktitle> In Proc. of the Teddington Conference on the Mechanization of Thought Processes, </booktitle> <pages> pages 75-91, </pages> <address> London, </address> <year> 1959. </year> <editor> Her Majesty's Stationery Office. Reproduced in [ McCarthy, </editor> <year> 1990 </year> ] . 
Reference: [ McCarthy, 1986 ] <author> John McCarthy. </author> <title> Applications of circumscription to formalizing common sense knowledge. </title> <journal> Artificial Intelligence, </journal> <volume> 26(3) </volume> <pages> 89-116, </pages> <year> 1986. </year> <editor> Reproduced in [ McCarthy, </editor> <year> 1990 </year> ] . 
Reference: [ McCarthy, 1990 ] <author> John McCarthy. </author> <title> Formalizing common sense: papers by John McCarthy. </title> <publisher> Ablex, </publisher> <address> Norwood, NJ, </address> <year> 1990. </year>
Reference: [ Minker, 1988 ] <author> Jack Minker. </author> <title> Perspectives in deductive databases. </title> <journal> Journal of Logic Programming, </journal> <volume> 5 </volume> <pages> 33-60, </pages> <year> 1988. </year>
Reference: [ Mints, 1986 ] <author> Grigori Mints. </author> <title> A complete calculus for pure Prolog. </title> <journal> Proc: Academy of Sciences of Estonian SSR, </journal> <volume> 35(4) </volume> <pages> 367-380, </pages> <year> 1986. </year> <note> In Russian. </note>
Reference-contexts: Proposition 3.18 is from [ Gelfond and Lifschitz, 1988 ] . The abnormality predicate was first used by McCarthy [1986] in the context of his theory of circumscription. Our treatment of Prolog is based on the ideas of <ref> [ Mints, 1986 ] </ref> (translated into English as [ Mints, 1990 ] ) and [ Kunen, 1989 ] . SLDNF calculi are further generalized in [ Lifschitz, 1995 ] and [ Lifschitz et al., 1995 ] .
Reference: [ Mints, 1990 ] <author> Grigori Mints. </author> <title> Several formal systems of logic programming. </title> <journal> Computers and Artificial Intelligence, </journal> <volume> 9(1) </volume> <pages> 19-41, </pages> <year> 1990. </year>
Reference-contexts: Proposition 3.18 is from [ Gelfond and Lifschitz, 1988 ] . The abnormality predicate was first used by McCarthy [1986] in the context of his theory of circumscription. Our treatment of Prolog is based on the ideas of [ Mints, 1986 ] (translated into English as <ref> [ Mints, 1990 ] </ref> ) and [ Kunen, 1989 ] . SLDNF calculi are further generalized in [ Lifschitz, 1995 ] and [ Lifschitz et al., 1995 ] .
Reference: [ Moore, 1985 ] <author> Robert Moore. </author> <title> Semantical considerations on nonmonotonic logic. </title> <journal> Artificial Intelligence, </journal> <volume> 25(1) </volume> <pages> 75-94, </pages> <year> 1985. </year>
Reference: [ Pearce and Wagner, 1990 ] <author> David Pearce and Gerd Wagner. </author> <title> Reasoning with negative information I: Strong negation in logic programs. </title> <journal> Acta Philosophica Fennica, </journal> <volume> 49, </volume> <year> 1990. </year>
Reference: [ Pereira et al., 1993 ] <author> Luis Pereira, Joaquim Aparicio, and Jose Alferes. </author> <title> Nonmonotonic reasoning with logic programming. </title> <journal> Journal of Logic Programming, </journal> <volume> 17 </volume> <pages> 227-263, </pages> <year> 1993. </year>
Reference-contexts: This concept is often used as a semantical foundation for logic programming. According to the "well-founded semantics," only well-founded literals are counted as consequences of the program. This approach and its extensions are applied to knowledge representation in <ref> [ Pereira et al., 1993 ] </ref> . The discussion of splitting in Sections 2.4 and 3.4 is based on [ Lifschitz and Turner, 1994 ] . The elimination step performed as part of splitting is an example of "partial 51 deduction" [ Komorowski, 1990 ] .
Reference: [ Przymusinski, 1988 ] <author> Teodor Przymusinski. </author> <title> On the declarative semantics of deductive databases and logic programs. </title> <editor> In Jack Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 193-216. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference: [ Przymusinski, 1991 ] <author> Teodor Przymusinski. </author> <title> Stable semantics for disjunctive programs. </title> <journal> New Generation Computing, </journal> <volume> 9 </volume> <pages> 401-424, </pages> <year> 1991. </year>
Reference-contexts: Supported sets were defined in [ Apt et al., 1988 ] . Well-founded and unfounded literals were introduced (for normal programs) in [ Van Gelder et al., 1990 ] and <ref> [ Przymusinski, 1991 ] </ref> . This concept is often used as a semantical foundation for logic programming. According to the "well-founded semantics," only well-founded literals are counted as consequences of the program. This approach and its extensions are applied to knowledge representation in [ Pereira et al., 1993 ] .
Reference: [ Ramakrishnan and Ullman, 1995 ] <author> Raghu Ramakrishnan and Jeffrey Ullman. </author> <title> A survey of deductive database systems. </title> <journal> Journal of Logic Programming, </journal> <volume> 23 </volume> <pages> 125-150, </pages> <year> 1995. </year> <month> 56 </month>
Reference: [ Reiter, 1978 ] <author> Raymond Reiter. </author> <title> On closed world data bases. </title> <editor> In Herve Gallaire and Jack Minker, editors, </editor> <booktitle> Logic and Data Bases, </booktitle> <pages> pages 119-140. </pages> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1978. </year>
Reference: [ Reiter, 1980 ] <author> Raymond Reiter. </author> <title> A logic for default reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13 </volume> <pages> 81-132, </pages> <year> 1980. </year>
Reference: [ Reiter, 1984 ] <author> Raymond Reiter. </author> <title> Towards a logical reconstruction of relational database theory. In M.L. </title> <editor> Brodie, J. Mylopoulos, and J.W. Schmidt, editors, </editor> <booktitle> On Conceptual Modelling: Perspectives from Artificial Intelligence, Databases and Programming Languages, </booktitle> <pages> pages 191-233. </pages> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference: [ Sato, 1990 ] <author> Taisuke Sato. </author> <title> Completed logic programs and their consistency. </title> <journal> Journal of Logic Programming, </journal> <volume> 9 </volume> <pages> 33-44, </pages> <year> 1990. </year>
Reference-contexts: Strict programs were defined in [ Apt et al., 1988 ] , and order-consistent programs in <ref> [ Sato, 1990 ] </ref> . Propositions 3.5 and 3.12 are from [ Fages, 1994 ] . The idea of tightening and Proposition 3.6 belong to Wallace [1993]. The reduction of arbitrary programs to normal programs was proposed in [ Gelfond and Lifschitz, 1990 ] .
Reference: [ Shepherdson, 1988 ] <author> John Shepherdson. </author> <title> Negation in logic programming. </title> <editor> In Jack Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 19-88. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: The monographs [ Lloyd, 1987 ] and [ Lobo et al., 1992 ] use the approaches to the semantics of logic programming different from ours. A survey of early work on negation as failure can be found in <ref> [ Shepherdson, 1988 ] </ref> . The 1994 special issue of the Journal of Logic Programming and its continuation, celebrating the tenth anniversary of the journal, contain, among others, three surveys closely related to this one|by Apt and Bol [1994], by Baral and Gelfond [1994], and by Ramakrishnan and Ullman [1995].
Reference: [ Tarski, 1955 ] <author> Alfred Tarski. </author> <title> A lattice-theoretical fixpoint theorem and its applications. </title> <journal> Pacific Journal of Mathematics, </journal> <volume> 5 </volume> <pages> 285-309, </pages> <year> 1955. </year>
Reference-contexts: We say that T is monotone if, for any subsets X; Y of , T X T Y whenever X Y . The following fact is known as the Knaster-Tarski theorem <ref> [ Tarski, 1955 ] </ref> : Proposition A.1. Every monotone function has * a least fixpoint, that is also its least pre-fixpoint, and * a greatest fixpoint, that is also its greatest post-fixpoint. These fixpoints can be approached (but not necessarily reached) by iterating T : Proposition A.2.
Reference: [ Turner, 1994 ] <author> Hudson Turner. </author> <title> Signed logic programs. </title> <booktitle> In Proc. </booktitle> <address> ILPS-94, </address> <year> 1994. </year>
Reference-contexts: Classical negation was incorporated into the syntax of logic programming rules by Gelfond and Lifschitz [1990]; a similar idea was independently developed by Pearce and Wagner [1990]. Head-consistency was introduced in <ref> [ Turner, 1994 ] </ref> . The properties of T and ' are due to van Emden and Kowalski [1976]. Definitions equivalent to the definition of an answer set for normal programs were proposed independently by Bidoit and Froidevaux [1987] and Gelfond [1987].
Reference: [ Van Gelder et al., 1990 ] <author> Allen Van Gelder, Kenneth Ross, and John Schlipf. </author> <title> The well-founded semantics for general logic programs. </title> <journal> Journal of ACM, </journal> <pages> pages 221-230, </pages> <year> 1990. </year>
Reference-contexts: Supported sets were defined in [ Apt et al., 1988 ] . Well-founded and unfounded literals were introduced (for normal programs) in <ref> [ Van Gelder et al., 1990 ] </ref> and [ Przymusinski, 1991 ] . This concept is often used as a semantical foundation for logic programming. According to the "well-founded semantics," only well-founded literals are counted as consequences of the program.
Reference: [ Van Gelder, 1988 ] <author> Allen Van Gelder. </author> <title> Negation as failure using tight derivations for general logic programs. </title> <editor> In Jack Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 149-176. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference: [ Wallace, 1993 ] <author> Mark Wallace. </author> <title> Tight, consistent and computable completions for unrestricted logic programs. </title> <journal> Journal of Logic Programming, </journal> <volume> 15 </volume> <pages> 243-273, </pages> <year> 1993. </year> <month> 57 </month>
References-found: 48

