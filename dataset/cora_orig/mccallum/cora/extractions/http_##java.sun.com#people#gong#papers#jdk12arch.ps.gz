URL: http://java.sun.com/people/gong/papers/jdk12arch.ps.gz
Refering-URL: http://www.rstcorp.com/javasecurity/links.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fgong,mrm,hemma,schemersg@eng.sun.com  
Title: Going Beyond the Sandbox: An Overview of the New Security Architecture in the Java TM
Author: Li Gong, Marianne Mueller, Hemma Prafullchandra, and Roland Schemers 
Affiliation: JavaSoft, Sun Microsystems, Inc.  
Date: Dec., 1997  
Note: In Proceedings of the USENIX Symposium on Internet Technologies and Systems, Monterey, California,  
Abstract: This paper describes the new security architecture that has been implemented as part of JDK1.2, the forthcoming Java TM Development Kit. In going beyond the sandbox security model in the original release of Java, JDK1.2 provides fine-grained access control via an easily configurable security policy. Moreover, JDK1.2 introduces the concept of protection domain and a few related security primitives that help to make the underlying protection mechanism more robust. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. Fiuchynski, D. Becker, S. Eggers, and C. Chambers. </author> <title> Extensibility, Safety, and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 251-266, </pages> <address> Colorado, </address> <month> December </month> <year> 1995. </year> <note> Published as ACM Operating System Review 29(5) 251-266, </note> <year> 1995. </year>
Reference-contexts: Another significant character of JDK is that its protection mechanisms are language-based, within a single address space. This feature is a major distinction from more traditional operating systems, but is very much related to recent works on software-based protection and safe kernel extensions (e.g., <ref> [2, 1, 18] </ref>), where various research teams have lately aimed for some of the same goals with different programming techniques. 2 New Protection Mechanisms This section covers the concept and implementation of some important new primitives introduced in JDK1.2, namely, security policy, access permission, protection domain, access control checking, privileged operation,
Reference: [2] <author> J.S. Chase, H.M. Levy, M.J. Feeley, and E.D. Lazowska. </author> <title> Sharing and Protection in a Single-Address-Space Operating System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(4) </volume> <pages> 271-307, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Another significant character of JDK is that its protection mechanisms are language-based, within a single address space. This feature is a major distinction from more traditional operating systems, but is very much related to recent works on software-based protection and safe kernel extensions (e.g., <ref> [2, 1, 18] </ref>), where various research teams have lately aimed for some of the same goals with different programming techniques. 2 New Protection Mechanisms This section covers the concept and implementation of some important new primitives introduced in JDK1.2, namely, security policy, access permission, protection domain, access control checking, privileged operation,
Reference: [3] <author> D. Dean. </author> <title> The Security of Static Typing with Dynamic Linking. </title> <booktitle> In Proceedings of the 4th ACM Conference on Computer and Communications Security, </booktitle> <pages> pages 18-27, </pages> <address> Zurich, Switzer-land, </address> <month> April </month> <year> 1997. </year> <month> 9 </month>
Reference-contexts: Signed applets, together with their signatures, are delivered in the JAR (Java Archive) format. The rest of this paper focuses on the new system security features. Discussion of various language safety issues can be found elsewhere (e.g., <ref> [3, 4, 19, 21] </ref>). 1.2 Evolving the Sandbox Model The new security architecture in JDK1.2, as illustrated in Figure 3, is introduced primarily for the following purposes. * Fine-grained access control.
Reference: [4] <author> D. Dean, </author> <title> E.W. Felten, and D.S. Wallach. Java Security: From HotJava to Netscape and Beyond. </title> <booktitle> In Proceedings of the IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 190-200, </pages> <address> Oakland, California, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: Signed applets, together with their signatures, are delivered in the JAR (Java Archive) format. The rest of this paper focuses on the new system security features. Discussion of various language safety issues can be found elsewhere (e.g., <ref> [3, 4, 19, 21] </ref>). 1.2 Evolving the Sandbox Model The new security architecture in JDK1.2, as illustrated in Figure 3, is introduced primarily for the following purposes. * Fine-grained access control.
Reference: [5] <author> M. Gasser. </author> <title> Building a Secure Computer System. </title> <publisher> Van Nostrand Reinhold Co., </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: It is worth emphasizing that this work by itself does not claim to break significant new ground in terms of the theory of computer security. Instead, it offers a real world example where well-known security principles <ref> [5, 12, 13, 16] </ref> are put into engineering practice to construct a practical and widely deployed secure system. 1.1 The Original Security Model The original security model provided by Java is known as the sandbox model, which exists in order to provide a very restricted environment in which to run untrusted
Reference: [6] <author> L. Gong. </author> <title> Java Security: Present and Near Future. </title> <journal> IEEE Micro, </journal> <volume> 17(3) </volume> <pages> 14-19, </pages> <month> May/June </month> <year> 1997. </year>
Reference-contexts: 1 Introduction Since the inception of Java [8, 11], there has been strong and growing interest around the security of Java as well as new security issues raised by the deployment of Java. From a technology provider's point of view, Java security includes two aspects <ref> [6] </ref>: * Provide Java (primarily through JDK) as a secure, ready-built platform on which to run Java enabled applications in a secure fashion. * Provide security tools and services implemented in Java that enable a wider range of security-sensitive applications, for example, in the enterprise world.
Reference: [7] <author> L. Gong and R. Schemers. </author> <title> Implementing Protection Domains in the Java TM Development Kit 1.2. </title> <booktitle> In Proceedings of the Internet Society Symposium on Network and Distributed System Security, </booktitle> <address> San Diego, California, </address> <month> March </month> <year> 1998. </year>
Reference-contexts: the following code is typical: ClassLoader loader = this.getClass ().getClassLoader (); if (loader != null) - SecurityManager security = System.getSecurityManager (); if (security != null) - security.checkRead ("path/file"); - 3 For details of the implementation of protection domain, and a discussion on performance and optimization tech niques, please refer to <ref> [7] </ref>. 6 Under the new architecture, the check typically should be invoked whether or not there is a class-loader associated with a calling class.
Reference: [8] <author> J. Gosling, Bill Joy, and Guy Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison-Wesley, </publisher> <address> Menlo Park, California, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Since the inception of Java <ref> [8, 11] </ref>, there has been strong and growing interest around the security of Java as well as new security issues raised by the deployment of Java.
Reference: [9] <author> A.K. Jones. </author> <title> Protection in Programmed Systems. </title> <type> Ph.D. dissertation, </type> <institution> Carnegie-Mellon University, </institution> <address> Pittsburgh, PA 15213, </address> <month> June </month> <year> 1973. </year>
Reference-contexts: We followed some of the Unix conventions in specifying access permissions to the file system and other system resources, but significantly, our design has been inspired by the concept of protection domains and the work dealing with mutually suspicious programs in Multics [17, 15], and right amplification in Hydra <ref> [9, 20] </ref>. One novel feature, which is not present in operating systems such as Unix or MS-DOS, is that we implement the least-privilege principle by automatically intersecting the sets of permissions granted to protection domains that are involved in a call sequence.
Reference: [10] <author> B.W. Lampson. </author> <title> Protection. </title> <booktitle> In Proceedings of the 5th Princeton Symposium on Information Sciences and Systems, </booktitle> <address> Princeton University, </address> <month> March </month> <year> 1971. </year> <journal> Reprinted in ACM Operating Systems Review, </journal> <volume> 8(1) </volume> <pages> 18-24, </pages> <month> January, </month> <year> 1974. </year>
Reference-contexts: design and implementation of the SecurityManager and ClassLoader classes as well as the underlying access control checking mechanism. 1.3 Related Work The fundamental ideas adopted in the new security architecture have roots in the last 40 years of computer security research, such as the overall idea of access control list <ref> [10] </ref>.
Reference: [11] <author> T. Lindholm and F. Yellin. </author> <title> The Java Virtual Machine Specification. </title> <publisher> Addison-Wesley, </publisher> <address> Menlo Park, California, </address> <year> 1997. </year>
Reference-contexts: 1 Introduction Since the inception of Java <ref> [8, 11] </ref>, there has been strong and growing interest around the security of Java as well as new security issues raised by the deployment of Java.
Reference: [12] <author> P.G. Neumann. </author> <title> Computer-Related Risks. </title> <publisher> Addison-Wesley, </publisher> <address> Menlo Park, California, </address> <year> 1995. </year>
Reference-contexts: It is worth emphasizing that this work by itself does not claim to break significant new ground in terms of the theory of computer security. Instead, it offers a real world example where well-known security principles <ref> [5, 12, 13, 16] </ref> are put into engineering practice to construct a practical and widely deployed secure system. 1.1 The Original Security Model The original security model provided by Java is known as the sandbox model, which exists in order to provide a very restricted environment in which to run untrusted
Reference: [13] <institution> U.S. General Accounting Office. Information Security: Computer Attacks at Department of Defense Pose Increasing Risks. </institution> <type> Technical Report GAO/AIMD-96-84, </type> <address> Washington, D.C. 20548, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: It is worth emphasizing that this work by itself does not claim to break significant new ground in terms of the theory of computer security. Instead, it offers a real world example where well-known security principles <ref> [5, 12, 13, 16] </ref> are put into engineering practice to construct a practical and widely deployed secure system. 1.1 The Original Security Model The original security model provided by Java is known as the sandbox model, which exists in order to provide a very restricted environment in which to run untrusted
Reference: [14] <author> S. Ritchie. </author> <title> Systems Programming in Java. </title> <journal> IEEE Micro, </journal> <volume> 17(3) </volume> <pages> 30-35, </pages> <month> May/June </month> <year> 1997. </year>
Reference-contexts: Note that although the Java Virtual Machine (JVM) typically runs over another hosting operating system such as Solaris, it may also run directly over hardware as in the case of the network computer JavaStation running JavaOS <ref> [14] </ref>. To maintain platform independence, our architecture does not depend on security features provided by an underlying operating system. Furthermore, our architecture does not override the protection mechanisms in the underlying operating system.
Reference: [15] <author> J.H. Saltzer. </author> <title> Protection and the Control of Information Sharing in Multics. </title> <journal> Communications of the ACM, </journal> <volume> 17(7) </volume> <pages> 388-402, </pages> <month> July </month> <year> 1974. </year>
Reference-contexts: We followed some of the Unix conventions in specifying access permissions to the file system and other system resources, but significantly, our design has been inspired by the concept of protection domains and the work dealing with mutually suspicious programs in Multics <ref> [17, 15] </ref>, and right amplification in Hydra [9, 20]. One novel feature, which is not present in operating systems such as Unix or MS-DOS, is that we implement the least-privilege principle by automatically intersecting the sets of permissions granted to protection domains that are involved in a call sequence.
Reference: [16] <author> J.H. Saltzer and M.D. Schroeder. </author> <title> The Protection of Information in Computer Systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 63(9) </volume> <pages> 1278-1308, </pages> <month> September </month> <year> 1975. </year>
Reference-contexts: It is worth emphasizing that this work by itself does not claim to break significant new ground in terms of the theory of computer security. Instead, it offers a real world example where well-known security principles <ref> [5, 12, 13, 16] </ref> are put into engineering practice to construct a practical and widely deployed secure system. 1.1 The Original Security Model The original security model provided by Java is known as the sandbox model, which exists in order to provide a very restricted environment in which to run untrusted <p> and objects belong, and 4 not to classes and objects directly. 2 In other words, a domain can be scoped by the set of objects that correspond to a principal, where a principal is an entity in the computer system to which authorizations (and as a result, accountability) are granted <ref> [16] </ref>. The Java sandbox in JDK1.0.2 is one example of a protection domain with a fixed boundary. In JDK1.2, protection domains are created "on demand", based on code source. Each class belongs to one and only one domain.
Reference: [17] <author> M.D. Schroeder. </author> <title> Cooperation of Mutually Suspicious Subsystems in a Computer Utility. </title> <type> Ph.D. dissertation, </type> <institution> Massachusetts Institute of Technology, </institution> <address> Cambridge, MA 02139, </address> <month> September </month> <year> 1972. </year>
Reference-contexts: We followed some of the Unix conventions in specifying access permissions to the file system and other system resources, but significantly, our design has been inspired by the concept of protection domains and the work dealing with mutually suspicious programs in Multics <ref> [17, 15] </ref>, and right amplification in Hydra [9, 20]. One novel feature, which is not present in operating systems such as Unix or MS-DOS, is that we implement the least-privilege principle by automatically intersecting the sets of permissions granted to protection domains that are involved in a call sequence.
Reference: [18] <author> M. I. Seltzer, Y. Endo, C. Small, and K. A. Smith. </author> <title> Dealing with Disaster: Surviving Misbehaved Kernel Extensions. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 213-227, </pages> <address> Seattle, Washington, </address> <month> October </month> <year> 1996. </year> <note> Published as ACM Operating Systems Review, 30, special winter issue, </note> <year> 1996. </year>
Reference-contexts: Another significant character of JDK is that its protection mechanisms are language-based, within a single address space. This feature is a major distinction from more traditional operating systems, but is very much related to recent works on software-based protection and safe kernel extensions (e.g., <ref> [2, 1, 18] </ref>), where various research teams have lately aimed for some of the same goals with different programming techniques. 2 New Protection Mechanisms This section covers the concept and implementation of some important new primitives introduced in JDK1.2, namely, security policy, access permission, protection domain, access control checking, privileged operation,
Reference: [19] <author> T. Thorn. </author> <title> Programming Languages for Mobile Code. </title> <journal> ACM Cumpting Surveys, </journal> <volume> 29(3) </volume> <pages> 213-239, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: Signed applets, together with their signatures, are delivered in the JAR (Java Archive) format. The rest of this paper focuses on the new system security features. Discussion of various language safety issues can be found elsewhere (e.g., <ref> [3, 4, 19, 21] </ref>). 1.2 Evolving the Sandbox Model The new security architecture in JDK1.2, as illustrated in Figure 3, is introduced primarily for the following purposes. * Fine-grained access control.
Reference: [20] <author> W.A. Wulf, R. Levin, and S.P. Harbison. </author> <title> HYDRA/C.mmp An Experimental Computer System. </title> <publisher> McGraw-Hill, </publisher> <year> 1981. </year>
Reference-contexts: We followed some of the Unix conventions in specifying access permissions to the file system and other system resources, but significantly, our design has been inspired by the concept of protection domains and the work dealing with mutually suspicious programs in Multics [17, 15], and right amplification in Hydra <ref> [9, 20] </ref>. One novel feature, which is not present in operating systems such as Unix or MS-DOS, is that we implement the least-privilege principle by automatically intersecting the sets of permissions granted to protection domains that are involved in a call sequence.
Reference: [21] <author> F. Yellin. </author> <title> Low Level Security in Java. </title> <booktitle> In Proceedings of the 4th International World Wide Web Conference, </booktitle> <address> Boston, Massachusetts, </address> <month> De-cember </month> <year> 1995. </year> <month> 10 </month>
Reference-contexts: Signed applets, together with their signatures, are delivered in the JAR (Java Archive) format. The rest of this paper focuses on the new system security features. Discussion of various language safety issues can be found elsewhere (e.g., <ref> [3, 4, 19, 21] </ref>). 1.2 Evolving the Sandbox Model The new security architecture in JDK1.2, as illustrated in Figure 3, is introduced primarily for the following purposes. * Fine-grained access control.
References-found: 21

