URL: http://www.cse.ogi.edu/~barga/papers/hpts-95.ps
Refering-URL: http://www.cse.ogi.edu/~barga/
Root-URL: http://www.cse.ogi.edu
Email: email: fbarga,caltong@cse.ogi.edu  
Title: Towards Implementing Extended Transaction Models on Conventional Transaction Processing Monitors  
Author: Roger Barga Calton Pu 
Address: P.O. Box 91000 Portland, OR 97291-1000  
Affiliation: Department of Computer Science and Engineering Oregon Graduate Institute of Science Technology  
Abstract-found: 0
Intro-found: 1
Reference: [BP95] <author> Roger S. Barga and Calton Pu. </author> <title> A practical and modular method to implement extended transaction models. </title> <booktitle> In Proceedings of the 21st International Conference on Very Large Data Bases, </booktitle> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: We present the Reflective Transaction Framework, a practical and modular framework that can be used to implement a wide range of extended transaction models on conventional TP monitors <ref> [BP95] </ref>. We achieve modularity by applying the Open Implementation approach [Kic92], also known as meta-object protocol [KdRB91], to design the reflective transaction framework. <p> This modular and practical design enables us to implement a wide range of extended transaction models on a commercial TP monitor, and we demonstrate this with the implementation of two independently proposed extended transaction models for collaborative work <ref> [BP95] </ref> (split/join model [PKH88] and cooperative groups [MP92, RC92]). 2 The Reflective Transaction Framework Classic transactions are bracketed by the control operations Begin-Transaction, Commit-Transaction and Abort-Transaction, while extended transactions can invoke additional operations to control their execution, such as Split-Transaction, Join-Transaction or Join-Group. <p> Next, we proceed to extend the underlying transaction pro-cessing facilities to support these modular functional components via transaction adapters. We outline these steps below, and their complete description is available in the full version of this paper <ref> [BP95] </ref>. 2.1 A Separation of Interfaces The Reflective Transaction Framework separates the programming interface to transactions into distinct levels, where each level presents a different view of transaction functionality. <p> Concretely, we are currently implementing the Transaction Manager Adapter, Lock Adapter, and Conflict Adapter (Figure 1) on Encina, a commercial OLTP system distributed by Transarc. The full version of this paper <ref> [BP95] </ref> contains a complete description of the implementation details. 4 The goals of our implementation effort are to: (1) demonstrate the practicality of the reflective transaction framework and transaction adapters, (2) evaluate extended transaction models in a real environment, (3) determine how easy it is to implement a wide range of <p> Using the framework, we outlined an implementation method for extended transaction models based on transaction adapters, add-on modules built on top of existing commercial TP components, such as Encina, that extend their functionality to support extended transaction features and semantics. Our early experience <ref> [BP95] </ref> shows that the framework is general enough for a wide range of extended transaction models. Although the implementation details were product specific (Transarc's Encina), our framework was designed in the context of the TP Monitor Architecture, so it is applicable to many modern commercial TP monitors.
Reference: [Elm93] <editor> Ahmed K. Elmagarmid, editor. </editor> <title> Database Transaction Models for Advanced Applications. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction The last five years have witnessed the introduction of numerous extended transaction models <ref> [Elm93] </ref>. Despite their popularity, there are no commercial transaction processing (TP) products or prototypes that incorporate extended transactions, and relatively little has appeared in the literature on implementing extended transaction models.
Reference: [GR93] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1993. </year>
Reference-contexts: We achieve modularity by applying the Open Implementation approach [Kic92], also known as meta-object protocol [KdRB91], to design the reflective transaction framework. We achieve practicality by basing the implementation of the reflective transaction framework on the well documented ideas of the TP Monitor architecture <ref> [GR93] </ref>, which is widely applicable to many modern transaction processing systems. Our proposed implementation introduces transaction adapters, add-on modules built on top of existing commercial TP components that extend their functionality to support extended transaction features and semantics.
Reference: [KdRB91] <author> Gregor Kiczales, Jim des Rivieres, and Daniel G. Bobrow. </author> <title> The Art of the Metaobject Protocol. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: We present the Reflective Transaction Framework, a practical and modular framework that can be used to implement a wide range of extended transaction models on conventional TP monitors [BP95]. We achieve modularity by applying the Open Implementation approach [Kic92], also known as meta-object protocol <ref> [KdRB91] </ref>, to design the reflective transaction framework. We achieve practicality by basing the implementation of the reflective transaction framework on the well documented ideas of the TP Monitor architecture [GR93], which is widely applicable to many modern transaction processing systems.
Reference: [Kic92] <author> Gregor Kiczales. </author> <title> Towards a new model of abstraction in software engineering. </title> <booktitle> In Proceedings of the IMSA'92 Workshop on Reflection and Meta-level Architectures, </booktitle> <year> 1992. </year> <note> See http://www.xerox.com/PARC/spl/eca/oi.html for updates. </note>
Reference-contexts: We present the Reflective Transaction Framework, a practical and modular framework that can be used to implement a wide range of extended transaction models on conventional TP monitors [BP95]. We achieve modularity by applying the Open Implementation approach <ref> [Kic92] </ref>, also known as meta-object protocol [KdRB91], to design the reflective transaction framework. We achieve practicality by basing the implementation of the reflective transaction framework on the well documented ideas of the TP Monitor architecture [GR93], which is widely applicable to many modern transaction processing systems. <p> To design the reflective transaction framework, we first apply the Open Implementation approach <ref> [Kic92] </ref> to separate the programming interfaces to extended transactions, and identify modular functional com 1 ponents required to realize this separation. Next, we proceed to extend the underlying transaction pro-cessing facilities to support these modular functional components via transaction adapters. <p> This separation follows the Open Implementation approach <ref> [Kic92] </ref>, in which the functional interface is separated from the meta interface, and the purpose of the meta interface is to modify the behavior of the functional interface. In our separation of interfaces, presented below, Level 1 and Level 2 are functional, subdivided for clarity only.
Reference: [MP92] <author> B. Martin and C. Pederson. </author> <title> Long-lived concurrent activities. </title> <editor> In Amar Gupta, editor, </editor> <booktitle> Distributed Object Management, </booktitle> <pages> pages 188-206. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: This modular and practical design enables us to implement a wide range of extended transaction models on a commercial TP monitor, and we demonstrate this with the implementation of two independently proposed extended transaction models for collaborative work [BP95] (split/join model [PKH88] and cooperative groups <ref> [MP92, RC92] </ref>). 2 The Reflective Transaction Framework Classic transactions are bracketed by the control operations Begin-Transaction, Commit-Transaction and Abort-Transaction, while extended transactions can invoke additional operations to control their execution, such as Split-Transaction, Join-Transaction or Join-Group.
Reference: [PKH88] <author> C. Pu, G.E. Kaiser, and N. Hutchinson. </author> <title> Split-transactions for open-ended activities. </title> <booktitle> In Proceedings of the Fourteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 27-36, </pages> <address> Los Angeles, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: This modular and practical design enables us to implement a wide range of extended transaction models on a commercial TP monitor, and we demonstrate this with the implementation of two independently proposed extended transaction models for collaborative work [BP95] (split/join model <ref> [PKH88] </ref> and cooperative groups [MP92, RC92]). 2 The Reflective Transaction Framework Classic transactions are bracketed by the control operations Begin-Transaction, Commit-Transaction and Abort-Transaction, while extended transactions can invoke additional operations to control their execution, such as Split-Transaction, Join-Transaction or Join-Group. <p> For example, the sequence of transaction control operations presented below first creates a metatransaction for transaction T i , assign it the semantics of the Split/Join transaction model <ref> [PKH88] </ref>, and begins the execution the execution of transaction T i . 3 instantiate (Ti); // create metatransaction reflect (Ti,Split-Join); // assign split-join transaction semantics begin-transaction (Ti); // begin execution of extended transaction A transaction with semantics beyond ACID properties is referred to as an E-transaction.
Reference: [RC92] <author> K. Ramamritham and P.K. Chrysanthis. </author> <title> In search of acceptability criteria: Database consistency requirements and transaction correctness properties. </title> <editor> In Amar Gupta, editor, </editor> <booktitle> Distributed Object Management, </booktitle> <pages> pages 212-230. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: This modular and practical design enables us to implement a wide range of extended transaction models on a commercial TP monitor, and we demonstrate this with the implementation of two independently proposed extended transaction models for collaborative work [BP95] (split/join model [PKH88] and cooperative groups <ref> [MP92, RC92] </ref>). 2 The Reflective Transaction Framework Classic transactions are bracketed by the control operations Begin-Transaction, Commit-Transaction and Abort-Transaction, while extended transactions can invoke additional operations to control their execution, such as Split-Transaction, Join-Transaction or Join-Group.
Reference: [RP91] <author> K. Ramamrithan and C. Pu. </author> <title> A formal characterization of epsilon serializability. </title> <type> Technical Report CUCS-044-91, </type> <institution> Department of Computer Science, Columbia University, </institution> <year> 1991. </year> <note> To appear in IEEE Transaction on Knowledge and Data Engineering, </note> <month> June </month> <year> 1996. </year> <month> 5 </month>
References-found: 9

