URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P351.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts93.htm
Root-URL: http://www.mcs.anl.gov
Title: Parallelizing the Spectral Transform Method: A Comparison of Alternative Parallel Algorithms  
Author: Ian Foster Patrick H. Worley 
Abstract: The spectral transform method is a standard numerical technique for solving partial differential equations on the sphere and is widely used in global climate modeling. In this paper, we outline different approaches to parallelizing the method and describe experiments that we are conducting to evaluate the efficiency of these approaches on parallel computers. The experiments are conducted using a testbed code that solves the nonlinear shallow water equations on a sphere, but are designed to permit evaluation in the context of a global model. They allow us to evaluate the relative merits of the approaches as a function of problem size and number of processors. The results of this study are guiding ongoing work on PCCM2, a parallel implementation of the Community Climate Model developed at the National Center for Atmospheric Research. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. L. Browning, J. J. Hack, and P. N. Swarztrauber, </author> <title> A comparison of three numerical methods for solving differential equations on the sphere, </title> <journal> Mon. Wea. Rev. </journal> <volume> 117, </volume> <year> 1989, </year> <pages> pp. 1058-1075. </pages>
Reference-contexts: STSWM uses the spectral transform method to solve the nonlinear shallow water equations on a sphere. The nonlinear shallow water equations constitute a simplified atmospheric-like fluid prediction model that exhibits many of the features of more complete models. They are frequently used to investigate and compare numerical methods <ref> [1] </ref>. An important Parallelizing the Spectral Transform 5 characteristic from our point of view is that STSWM's data structures and implementation of the spectral transform algorithm are based directly on equivalent structures and algorithms in CCM2.
Reference: [2] <author> D. Dent, </author> <title> The ECMWF model on the Cray Y-MP8, </title> <booktitle> Proc. 4th ECMWF Workshop on Use of Parallel Processors in Meteorology, ECMWF, </booktitle> <address> Reading, U.K., </address> <year> 1990. </year>
Reference-contexts: Parallel matrix transpose operations are used to move between the different decompositions. An algorithm of this type has been used at the European Center for Medium-Range Weather Forecasts to execute their production spectral model on an eight-processor Cray Y/MP <ref> [2] </ref>. Hybrid algorithms, in which for example a transpose FFT is combined with a parallel LT, are also possible. A comprehensive comparison of these two approaches to the parallel implementation of the spectral transform method has not previously been attempted.
Reference: [3] <author> Department of Energy, </author> <title> Building an Advanced Climate Model: Progress Plan for the CHAMMP Climate Modeling Program, </title> <type> DOE Tech. Report DOE/ER-0479T, U.S. </type> <institution> Department of Energy, </institution> <address> Washington, D.C., </address> <year> 1990. </year>
Reference-contexts: Box 2008, Bldg. 6012, Oak Ridge, TN 37831-6367. 1 2 Foster and Worley FFT LT l z z m Fig. 1. Principal Data Structures in Spectral Transform at Argonne and Oak Ridge National Laboratories as part of the Department of Energy CHAMMP initiative <ref> [3] </ref>.
Reference: [4] <author> J. B. Drake, R. E. Flanery, I. T. Foster, J. J. Hack, J. G. Michalakes, R. L. Stevens, D. W. Walker, D. L. Williamson, and P. H. Worley, </author> <title> The message passing version of the parallel community climate model, </title> <booktitle> Proc. 5th ECMWF Workshop on Parallel Processing in Meteorology, ECMWF, </booktitle> <address> Reading, U.K., </address> <year> 1992. </year>
Reference-contexts: Transform algorithms employ a single decomposition of the principal data structures and use parallel Legendre transforms (LTs) and fast Fourier transforms (FFTs) to communicate data among the different partitions. An algorithm of this type is being used to construct a parallel implementation <ref> [4] </ref> of the National Center for Atmospheric Research's Community Climate Model (CCM2) [13]. In contrast, transpose algorithms use different data decompositions at different stages of the computation, permitting the LTs and FFTs to proceed without communication. Parallel matrix transpose operations are used to move between the different decompositions. <p> Parallel implementations of the FFT and LT are then required. The parallel Fourier transform algorithm used in this work [14] extends the conventional power-of-two parallel FFT algorithm by performing two block transforms concurrently to overlap computation with communication. We consider two alternative algorithms for the parallel LT <ref> [4] </ref>. The first, ring-pipeline, uses a pipeline algorithm over a logical ring of processors to overlap communication with computation during the LT.
Reference: [5] <author> I. Foster, </author> <title> Information hiding in parallel programs, </title> <type> Preprint MCS-P290-0292, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1992. </year>
Reference-contexts: Hence, there are a total of twelve different algorithms to be compared. In some of the algorithms, we are interested in exploring several different mappings of data to processors. Hence, we specify the mapping of "logical processors" to "physical processors" in a separate routine. This use of information-hiding techniques <ref> [5] </ref> makes it straightforward to explore alternative mappings.
Reference: [6] <author> I. Foster, W. Gropp, and R. Stevens, </author> <title> The parallel scalability of the spectral transform method, </title> <journal> Mon. Wea. Rev., </journal> <volume> 120(5), </volume> <year> 1992, </year> <pages> pp. 835-850. </pages>
Reference-contexts: Because of space constraints, we are able to sketch only some aspects of these models here. In previous work, we have shown that the communication costs for a parallel Fourier and ring-pipeline Legendre transform of r data elements can be approximated as follows <ref> [6] </ref>: O fft = t s log p + t h 2 ( p 1) + t w 2r p 1 (1) 4 Foster and Worley O rp = (p 1) t s + t h + t w p :(2) In these expressions, p is the number of processors and
Reference: [7] <author> G. A. Geist, M. T. Heath, B. W. Peyton and P. H. Worley, PICL: </author> <title> A Portable Instrumented Communication Library, C Reference Manual, </title> <type> Tech. Rep. </type> <institution> ORNL/TM-11130, Oak Ridge National Laboratory, Oak Ridge, Tenn., </institution> <year> 1990. </year>
Reference-contexts: This will allow us to make meaningful performance predictions for future parallel computers (e.g., the 2048-processor Intel Paragon to be installed at Oak Ridge National Laboratory) and for related codes with somewhat different computational characteristics (e.g., the NCAR Community Climate Model). The testbed code is implemented using PICL <ref> [7] </ref>, a portable message-passing library that incorporates instrumentation. This provides portability between Intel and NCUBE multiprocessors and allows the collection of data for performance studies. In addition, we are using the PICL emulation mode in W.
Reference: [8] <author> J. J. Hack and R. Jakob, </author> <title> Description of a Global Shallow Water Model Based on the Spectral Transform Method, NCAR Technical Note TN-343+STR, NCAR, </title> <address> Boulder, Colo., </address> <year> 1992. </year>
Reference-contexts: Hack and R. Jacob of NCAR for numerical studies of the shallow water equations <ref> [8] </ref>. STSWM uses the spectral transform method to solve the nonlinear shallow water equations on a sphere. The nonlinear shallow water equations constitute a simplified atmospheric-like fluid prediction model that exhibits many of the features of more complete models. They are frequently used to investigate and compare numerical methods [1].
Reference: [9] <author> C-T. Ho and S. L. Johnsson, </author> <title> Matrix Transposition on Boolean N-Cube Configured Ensemble Architectures, </title> <type> Yale report YALEU/DCS/TR-494, </type> <year> 1986. </year>
Reference-contexts: Scott provides a constructive proof that such a schedule exists in an p fi p mesh with p a multiple of four [11], demonstrating that this lower bound is achievable. An alternative transpose algorithm performs the transpose in log p steps <ref> [9] </ref>. This performs fewer communications but transfers more data and must perform additional copying.
Reference: [10] <author> J. Michalakes, </author> <title> Analysis of Workload and Load Balancing Issues in the NCAR Community Climate Model, </title> <institution> ANL/MCS-TM-144, Argonne National Laboratory, Argonne, Ill., </institution> <year> 1991. </year>
Reference-contexts: only to quantify the performance difference between the two algorithms but also to describe clearly what is involved in implementing each algorithm. 8 Foster and Worley Load imbalances can occur in climate models as a result of variations in the cost of approximating physical processes such as radiation and convection <ref> [10] </ref>. These load imbalances can be corrected by dynamically redistributing data prior to calling the relevant routines, which operate on data stored in physical space. This redistribution appears cheaper to perform in a transpose code. Hence, a complete algorithm comparison should perhaps investigate the relative costs of redistribution.
Reference: [11] <author> D. Scott, </author> <title> Efficient all-to-all communication patterns in hypercube and mesh architectures, </title> <booktitle> Proc. 6th Distributed Memory Computer Conf., </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: Scott provides a constructive proof that such a schedule exists in an p fi p mesh with p a multiple of four <ref> [11] </ref>, demonstrating that this lower bound is achievable. An alternative transpose algorithm performs the transpose in log p steps [9]. This performs fewer communications but transfers more data and must perform additional copying.
Reference: [12] <author> P. N. Swarztrauber, W. L. Briggs, R. A. Sweet, V. E. Henson, and J. Otto, </author> <title> Bluestein's FFT for arbitrary N on the hypercube, </title> <booktitle> Parallel Computing 17(6), </booktitle> <year> 1991, </year> <pages> pp. 607-618. </pages>
Reference-contexts: However, potential users of these algorithms will certainly be interested in results obtained with optimized libraries. The parallel FFT described in [14] can deal only with power-of-two vectors. A non-power-of-two parallel FFT has been developed by David Semeraro, based on the Bluestein algorithm <ref> [12] </ref>, but is considerably less efficient. The gadd and O (log p) transpose algorithms are also more efficient when applied to power-of-two problems. In contrast, the O (p) transpose algorithm can operate on matrices of any size with equal efficiency.
Reference: [13] <author> D. J. Williamson, J.T. Kiehl, V. Ramanathan, R.E. Dickinson, and J.J. Hack, </author> <title> Description of NCAR Community Climate Model (CCM1), NCAR Technical Note TN-285+STR, NCAR, </title> <address> Boulder, Colo., </address> <year> 1987. </year>
Reference-contexts: An algorithm of this type is being used to construct a parallel implementation [4] of the National Center for Atmospheric Research's Community Climate Model (CCM2) <ref> [13] </ref>. In contrast, transpose algorithms use different data decompositions at different stages of the computation, permitting the LTs and FFTs to proceed without communication. Parallel matrix transpose operations are used to move between the different decompositions.
Reference: [14] <author> D. W. Walker, P. H. Worley, and J. B. Drake, </author> <title> Parallelizing the spectral transform method - part 2, </title> <journal> Concurrency: Practice and Experience 4(7), </journal> <year> 1992, </year> <pages> pp. 509-531. </pages>
Reference-contexts: Parallel Transpose Algorithm 3 Parallel Transform Algorithms Parallel transform algorithms decompose the principal data structures by latitude and longitude. Parallel implementations of the FFT and LT are then required. The parallel Fourier transform algorithm used in this work <ref> [14] </ref> extends the conventional power-of-two parallel FFT algorithm by performing two block transforms concurrently to overlap computation with communication. We consider two alternative algorithms for the parallel LT [4]. The first, ring-pipeline, uses a pipeline algorithm over a logical ring of processors to overlap communication with computation during the LT. <p> A potentially significant advantage of the parallel transpose algorithm is that it is able to use sequential FFT and LT libraries optimized (perhaps using assembly code) for a particular processor. In contrast, a parallel transform algorithm must use custom parallel FFT and LTs such as those described in <ref> [15, 14] </ref>, which are less likely to be assembly coded. From a scientific viewpoint, a fair comparison of the two algorithms should probably forbid use of optimized sequential libraries. However, potential users of these algorithms will certainly be interested in results obtained with optimized libraries. <p> From a scientific viewpoint, a fair comparison of the two algorithms should probably forbid use of optimized sequential libraries. However, potential users of these algorithms will certainly be interested in results obtained with optimized libraries. The parallel FFT described in <ref> [14] </ref> can deal only with power-of-two vectors. A non-power-of-two parallel FFT has been developed by David Semeraro, based on the Bluestein algorithm [12], but is considerably less efficient. The gadd and O (log p) transpose algorithms are also more efficient when applied to power-of-two problems.
Reference: [15] <author> P. H. Worley and J. B. Drake, </author> <title> Parallelizing the spectral transform method, </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 4(4), </volume> <year> 1992, </year> <pages> pp. 269-291. </pages>
Reference-contexts: We fit a performance model comprising Equation 2 plus a characterization of sequential computation time to 6 Foster and Worley Fig. 3. Predicted (lines) and Observed (data points) Speedups for Transform Code runtimes obtained using an early version of the testbed code <ref> [15] </ref>. These experiments were conducted on a 128-processor Intel iPSC/860 computer. <p> A potentially significant advantage of the parallel transpose algorithm is that it is able to use sequential FFT and LT libraries optimized (perhaps using assembly code) for a particular processor. In contrast, a parallel transform algorithm must use custom parallel FFT and LTs such as those described in <ref> [15, 14] </ref>, which are less likely to be assembly coded. From a scientific viewpoint, a fair comparison of the two algorithms should probably forbid use of optimized sequential libraries. However, potential users of these algorithms will certainly be interested in results obtained with optimized libraries.
References-found: 15

