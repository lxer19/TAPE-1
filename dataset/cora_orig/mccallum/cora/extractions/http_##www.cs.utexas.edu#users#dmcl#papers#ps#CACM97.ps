URL: http://www.cs.utexas.edu/users/dmcl/papers/ps/CACM97.ps
Refering-URL: http://www.cs.utexas.edu/users/dmcl/allpapers.html
Root-URL: http://www.cs.utexas.edu
Email: E-mail: fejp,lavender,vin@cs.utexas.edug,  
Phone: Telephone: (512) 471-9732,  
Title: An Adaptive Framework for Developing Multimedia Software Components  
Author: Edward J. Posnak, R. Greg Lavender, and Harrick M. Vin 
Note: Fax:(512) 471-8885  
Address: Taylor Hall 2.124, Austin, Texas 78712-1188  
Affiliation: Distributed Multimedia Computing Laboratory Department of Computer Sciences, University of Texas at Austin  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> B.S. Cherukupally and P. Uppuluri. </author> <title> Netscape Plug-In. Multimedia Systems class project, </title> <month> December </month> <year> 1996. </year>
Reference-contexts: Tk is an extension to Tcl that allows user interface objects (e.g. windows) to be quickly and easily developed. 3 This was, in fact, the case when novice multimedia programmers used our Tcl/Tk wrappers to create a Netscape Navigator plug-in with less than 50 lines of original code <ref> [1] </ref>. 4 4 Conclusion We have described the high-level design of a framework for developing software components that decode and process digital audio and video data. 4 This framework provides mechanisms that enable components to be developed using a modular compositional approach that has advantages in both software development and runtime
Reference: [2] <author> J.K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. Professional Computing Series. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Since implementing these features requires only knowledge of the possible module configurations, not their implementations, a powerful adaptive media player can be developed by a programmer with very little domain expertise. 3 2 Tcl <ref> [2] </ref> is an interpreted scripting language that can be used to control and configure software components. When a Tcl interpreter is embedded inside a component, users and applications can then configure and control the component dynamically using the Tcl scripting language.
Reference: [3] <author> E. J. Posnak, R. G. Lavender, and H. M. Vin. </author> <title> Adaptive Pipeline: an Object Structural Pattern for Adaptive Applications. </title> <booktitle> In The Third Pattern Languages of Programming conference, </booktitle> <address> Monticello, Illinois, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: To facilitate reuse of this design pattern each time a new component is developed, the PPE framework provides mechanisms that allow modules to be composed both statically and dynamically <ref> [3] </ref>. 3 PPE Composition: Examples The PPE framework has been used to develop a variety of decompression engines (e.g., JPEG and MPEG) and media player components (e.g., Tcl/Tk, Netscape Navigator Plug-in).
Reference: [4] <author> E. J. Posnak, H. M. Vin, and R. G. Lavender. </author> <title> Presentation Processing Mechanisms for Adaptive Applications. </title> <booktitle> In Proceedings of Multimedia Computing and Networking, </booktitle> <address> San Jose, California, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: To facilitate the development of such components, the PPE framework provides a library of reusable modules, which implement the primitive transformations, as well as the mechanisms that allow these modules to be composed into processing pipelines <ref> [4] </ref>. The PPE module library uses fine-grained modular decomposition to effectively decouple the environment-specific elements of the code from the reusable transformation implementations.
Reference: [5] <author> B. Smith. </author> <title> Fast Software Processing of Motion JPEG Video. </title> <booktitle> In Proceedings of the ACM Multimedia'94, </booktitle> <pages> pages 7788, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: This allows for significant code reuse when developing new components, and also makes it possible to incorporate reusable signal processing modules at intermediate stages of compression, where factors of ten speedup can be achieved <ref> [5] </ref>. Whereas such efficiencies are normally obtained by tight coupling of signal processing and compression operations, in the PPE framework these transformations are implemented as separate modules, and hence, can be reused to compose other software components.
Reference: [6] <author> G. K. Wallace. </author> <title> The JPEG Still Picture Compression Standard. </title> <journal> Communications of the ACM, </journal> <volume> 34(4):3144, </volume> <month> April </month> <year> 1991. </year> <title> 4 A more detailed description of the design and implementation of this framework may be found at http://www.cs.utexas.edu/users/ejp/CACM.ps. 5 </title>
Reference-contexts: This section illustrates how the framework is used to develop such components. 2 3.1 JPEG Decoder JPEG is a widely used standard for image compression and video conferencing <ref> [6] </ref>. A JPEG encoder performs a series of transformations on raw image data to produce a highly compressed output stream, which can then be transmitted to a JPEG decoder that applies the inverse of these transformations to decompress the images.
References-found: 6

