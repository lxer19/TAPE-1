URL: ftp://ftp.cs.columbia.edu/reports/reports-1992/cucs-006-92.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1992.html
Root-URL: http://www.cs.columbia.edu
Email: swfc@cs.columbia.edu  
Phone: Phone (212) 854-8182 FAX (212) 666-0140  
Title: A Structural Classification of Integrated Replica Control Mechanisms  
Author: Shu-Wie Chen and Calton Pu 
Address: New York, NY 10027  
Affiliation: Department of Computer Science Columbia University  
Pubnum: Technical Report CUCS-006-92  
Abstract: We classify practical replica control (RC) mechanisms according to two main criteria: (1) the abstract RC protocol, e.g., how many physical copies are written for a logical update, and (2) the kind of integration between the RC mechanism and system services such as atomic broadcast, commit protocols, and concurrency control. We describe about a dozen representative RC mechanisms (most of them implemented) classified by their integration with communications, concurrency control, or both. This classification based on a few essential components of RC mechanisms show that practical replicated systems overwhelmingly adopt the read-one/write-one RC protocol (read/write one physical copy for each logical read/write), due to its low overhead and high availability, despite some inherent inconsistency. Furthermore, this trend points to the need for the integration of weak consistency methods (e.g., epsilon serializability) with read-one/write-one RC protocols if replicated databases are to be realized in practice. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Divyakant Agrawal and Arthur J. Bernstein. </author> <title> A nonblocking quorum consensus protocol for replicated data. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 2(2) </volume> <pages> 171-179, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Systems that support mutual consistency provide a property called one-copy equivalence: multiple copies of an object appear as a single logical object <ref> [1] </ref>. One-copy equivalence is a strong consistency property since the replicated system behaves like a non-replicated system but with better availability and performance characteristics. Providing mutual consistency requires a certain degree of cooperation and coordination between the copies of an object. <p> Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism Locking ROWO Inconsistent Reads Consistent Updates anti-entropy Siphon 5.3 Non-Blocking Quorum Consensus Nonblocking quorum consensus (NBQC) is an RC scheme that uses an asynchronous propagation mechanism but guarantees correctness by using the synchronization services of CC and atomic agreement protocol <ref> [1] </ref>. NBQC uses Gifford's weighted voting protocol (Section 2.2) but integrates the implementation of RC with both CC and communications mechanisms. It assumes that the CC protocol will only permit recoverable executions, that is, transactions are only allowed to observe values of objects that are produced by committed transactions.
Reference: [2] <author> R. Alonso, D. Barbara, and H. Garcia-Molina. </author> <title> Data caching issues in an information retrieval systems. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(3) </volume> <pages> 359-384, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Checkpointing schemes such as the Tandem Remote Duplicate Database Facility and backup schemes such as the Remote Backup Procedure [26] are 3 also examples of ROWO. In addition, all of the so-called caching schemes are examples of ROWO, including quasi-copies <ref> [2] </ref>. These alternatives are not completely mutually exclusive and combinations are possible. <p> As the base case, one-copy equivalence guarantees (1) zero time-lag, that is, it provides instantaneous consistency, and (2) a logical read operation will return the value last written. Some systems [41] may only guarantee eventual consistency with a time-lag greater than zero. Other proposals such as quasi-copies <ref> [2] </ref> allow user control of the time lag, imposing constraints on how long replica copies may lag the current object value. Some early systems such as Grapevine [9] place no limit on the time lag and only guarantee that update messages will eventually reach all copies.
Reference: [3] <author> P.A. Alsberg and J.D. Day. </author> <title> A principle for resilient sharing of distributed resources. </title> <booktitle> In Proceedings of the Second International Conference on Software Engineering, </booktitle> <pages> pages 562-570, </pages> <year> 1976. </year>
Reference-contexts: The copies that are down during an update must be brought up to date, however, during the node recovery time. Compared to quorum consensus, ROWAA offers a faster R (X), just one r (x) instead of several, but requires the knowledge of system configuration. Some primary copy algorithms (e.g., <ref> [3] </ref>) are early examples of the ROWO strategy. The basic idea is to allow the secondary copies to lag behind the primary in update, in exchange for faster reading time.
Reference: [4] <author> P.A. Bernstein and N. Goodman. </author> <title> An algorithm for concurrency control and recovery in replicated distributed databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 9(4) </volume> <pages> 596-615, </pages> <month> December </month> <year> 1984. </year>
Reference-contexts: The overlap itself guarantees that any R (X) will return the result from the last W (X). The first ROWAA algorithm (Available Copies) was proposed by Bernstein et al <ref> [4] </ref>. The idea is to write on all copies that are accessible and therefore allow reading of any accessible copy. The copies that are down during an update must be brought up to date, however, during the node recovery time.
Reference: [5] <author> Philip A. Bernstein, Vassos Hadzilacos, and Nathan Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: As an example, in a classic replicated distributed database system, both serializability and one-copy equivalence are guaranteed. Replica control and concurrency control are said to provide one-copy serializability (1SR): interleaved execution on replicated data is equivalent to serial execution on non-replicated data <ref> [13, 5] </ref>. We can categorize 1SR systems has handling all types of conflicts, not allowing divergence, and providing instantaneous consistency. <p> In RC protocols, an agreement protocol is necessary if multiple copies are to be updated consistently. In distributed databases, the outcome of a distributed transaction is decided by an agreement protocol <ref> [5] </ref>. In a replicated distributed database, RC updates will commit if and only if the transaction commits, so some RC methods integrate their agreement protocol with that of transaction commit protocol, as described in Section 5. 2.3.2 Concurrency Control Concurrency control methods are algorithms that preserve serializability in databases [5]. <p> protocol <ref> [5] </ref>. In a replicated distributed database, RC updates will commit if and only if the transaction commits, so some RC methods integrate their agreement protocol with that of transaction commit protocol, as described in Section 5. 2.3.2 Concurrency Control Concurrency control methods are algorithms that preserve serializability in databases [5]. Traditional concurrency control methods are conflict-based. Operations conflict if they are from different transactions, they access the same data object, and one of the operations is a write operation. Conflicts are classified as write-write, read-write, and write-read depending on the type and order of the operations.
Reference: [6] <author> K. Birman and T. Joseph. </author> <title> Exploiting virtual synchrony in distributed systems. </title> <booktitle> In Proceedings of the Eleventh Symposium on Operating Systems Principles, </booktitle> <pages> pages 123-138. </pages> <address> ACM/SIGOPS, </address> <month> November </month> <year> 1987. </year>
Reference-contexts: There are two classes of asynchronous message mechanisms specifically useful to RC protocols. First, some researchers have proposed some powerful asynchronous group communications primitives that can be called ordered broadcast, such as Isis <ref> [6] </ref>, Psync [34], and other schemes described in Section 3. The essential feature of an ordered broadcast is that a message is actually delivered only when all the recipients have agreed on how to place its reception time relative to other messages [24].
Reference: [7] <author> Kenneth P. Birman. </author> <title> Replication and fault-tolerance in the isis system. </title> <booktitle> In Proceedings of the Tenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 79-86, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: The atomic broadcast (ABCAST) in the ISIS <ref> [7, 8] </ref> system sends a message to the recipients atomically, i.e., all at the same time. Some control messages make sure that ABCAST messages have arrived in order at all recipients. This property is useful for RC mechanism in update propagation.
Reference: [8] <author> Kenneth P. Birman and Thomas Joseph. </author> <title> Exploiting virtual synchrony in distributed systems. </title> <booktitle> In Proceedings of the Eleventh Symposium on Operating Systems Principles, </booktitle> <pages> pages 123-138. </pages> <address> ACM/SIGOPS, </address> <month> November </month> <year> 1987. </year>
Reference-contexts: Typically, they are used for distributed file systems or name servers. A distributed database is seen as built on top of these RC mechanisms. 8 3.1 Ordered Broadcast 3.1.1 Virtual Synchrony - ABCAST The concept of virtual synchrony <ref> [8] </ref> is based on the premise that event orderings should be subsumed into the communication layer of a distributed system. The atomic broadcast (ABCAST) in the ISIS [7, 8] system sends a message to the recipients atomically, i.e., all at the same time. <p> The atomic broadcast (ABCAST) in the ISIS <ref> [7, 8] </ref> system sends a message to the recipients atomically, i.e., all at the same time. Some control messages make sure that ABCAST messages have arrived in order at all recipients. This property is useful for RC mechanism in update propagation.
Reference: [9] <author> A.D. Birrell, R. Levin, R.M. Needham, and M.D. Schroeder. Grapevine: </author> <title> An exercise in distributed computing. </title> <journal> Communications of ACM, </journal> <volume> 25(4) </volume> <pages> 260-274, </pages> <month> April </month> <year> 1982. </year>
Reference-contexts: Some systems [41] may only guarantee eventual consistency with a time-lag greater than zero. Other proposals such as quasi-copies [2] allow user control of the time lag, imposing constraints on how long replica copies may lag the current object value. Some early systems such as Grapevine <ref> [9] </ref> place no limit on the time lag and only guarantee that update messages will eventually reach all copies. Some proposals [46] place a restriction on how far a copy's value may diverge from the correct value.
Reference: [10] <author> Andrew D. Birrell, Roy Levin, Roger M. Needham, and Michael D. Schroeder. Grapevine: </author> <title> An exercise in distributed computing. </title> <journal> Communications of the ACM, </journal> <volume> 25(4) </volume> <pages> 260-274, </pages> <month> April </month> <year> 1982. </year>
Reference-contexts: Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism Write Tokens ROWO Mutual Consist. (Stability Notif.) epidemic propagation Deceit distributed file system 3.2 Epidemic Propagation 3.2.1 Grapevine Grapevine <ref> [10] </ref> was a distributed system with a replicated registration database. Updates to the registration database use Grapevine's message delivery system, an example of the direct mail asynchronous communication paradigm described earlier. From a user's point 10 of view, an update completes after one copy has been written.
Reference: [11] <author> M.J. Carey and M. Livny. </author> <title> Conflict detection tradeoffs for replicated data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 16(4) </volume> <pages> 703-746, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Instead, we show some representative examples of each class to illustrate our classification scheme. Furthermore, we compare the structural differences of RC methods but do not analyze their performance due to the structural differences. This is in contrast to cost/benefit analysis of particular RC algorithms such as <ref> [11, 32] </ref>. To the best of our knowledge, Ceri et al's classification [12] is the only systematic attempt to analyze and compare the structure of RC algorithms.
Reference: [12] <author> Stefano Ceri, Maurice A.W. Houtsma, Arthur M. Keller, and Pierangela Samarati. </author> <title> A classification of update methods for replicated databases. </title> <type> Technical report, </type> <institution> Department of Computer Science, Stanford University, </institution> <year> 1991. </year> <month> 22 </month>
Reference-contexts: Furthermore, we compare the structural differences of RC methods but do not analyze their performance due to the structural differences. This is in contrast to cost/benefit analysis of particular RC algorithms such as [11, 32]. To the best of our knowledge, Ceri et al's classification <ref> [12] </ref> is the only systematic attempt to analyze and compare the structure of RC algorithms. Specifically, they have analyzed RC protocols according to the number of copies read and written, in conjunction with the kind of agreement protocol used in implementation. <p> Some other proposals introduce multiple levels of control into RC. Group paradigm [17] is an example of combining local RC methods with a global RC to provide mutual consistency at the global level. Ceri et al's classification of RC protocols <ref> [12] </ref> is the work most closely related to our 5 classification. They have an excellent analysis of abstract RC protocols.
Reference: [13] <author> Susan B. Davidson, Hector Garcia-Molina, and Dale Skeen. </author> <title> Consistency in partitioned networks. </title> <journal> ACM Computing Surveys, </journal> <volume> 17(3) </volume> <pages> 341-370, </pages> <month> September </month> <year> 1985. </year>
Reference-contexts: A fundamental consistency criterion for replicated systems is mutual consistency, which requires that the copies of an object agree on a current value for the object, in effect, providing the illusion that the copies have the same value <ref> [13] </ref>. To guarantee mutual consistency, an RC protocol ensures that: (1) physical read operations access appropriate copies to determine the current value (the last value written) of an object, and (2) physical write operations update the appropriate copies so that subsequent physical read operations will return the correct value. <p> As an example, in a classic replicated distributed database system, both serializability and one-copy equivalence are guaranteed. Replica control and concurrency control are said to provide one-copy serializability (1SR): interleaved execution on replicated data is equivalent to serial execution on non-replicated data <ref> [13, 5] </ref>. We can categorize 1SR systems has handling all types of conflicts, not allowing divergence, and providing instantaneous consistency.
Reference: [14] <author> Alan Demers and et al. </author> <title> Epidemic algorithms for replicated database maintenance. </title> <type> Technical report, </type> <note> Xerox PARC, CSL-89-1, </note> <year> 1991. </year>
Reference-contexts: For example, logical updates can use ordered broadcast to guarantee mutual consistency without any additional synchronization. Second, the ROWAA and ROWO protocols need to handle some copies in the background. This can be done with epidemic propagation methods including direct mail, anti-entropy, and rumor mongering <ref> [14, 21] </ref>. Unlike ordered broadcast, epidemic propagation only ensures that the effect of every update will eventually be reflected in all replicas. Direct mail methods transmit update instruction messages directly to the appropriate sites. Though timely and efficient, the method is not reliable because messages may be lost.
Reference: [15] <author> Alan R. Downing, Ira B. Greenberg, and Jon M. Peha. Oscar: </author> <title> A system for weak-consistency replication. </title> <editor> In Luis-Felipe Cabrera and Jehan-Francois Paris, editors, </editor> <booktitle> Proceedings of the Workshop on Management of Replicated Data, </booktitle> <pages> pages 26-30, </pages> <address> Los Alamitos, California, </address> <month> November 8-9 </month> <year> 1990. </year> <booktitle> IEEE Computer Society Technical Committee on Operating Systems and Application Environments (TCOS), </booktitle> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism None ROWO Temp. Incons. Confl. Detect. Oper. Semantics: Commutat. & Idempot. direct mail & reliable sweeps Global Name Service 3.2.4 Oscar The Open System for Consistency and Replication (OSCAR) is an architecture for weak-consistency replication systems <ref> [15] </ref>. OSCAR's replication scheme is based on two types of cooperating agents called replicators and mediators. Replicators perform local physical operations and initiate the propagation of updates to other replicas using unreliable mul-ticasts to implement the direct mail communication method.
Reference: [16] <author> D.L. Eager and K.C. Sevcik. </author> <title> Achieving robustness in distributed database systems. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 8(3) </volume> <pages> 354-381, </pages> <month> September </month> <year> 1983. </year>
Reference-contexts: In addition, all of the so-called caching schemes are examples of ROWO, including quasi-copies [2]. These alternatives are not completely mutually exclusive and combinations are possible. For example, the Missing Writes protocol <ref> [16] </ref> uses ROWAA when all the copies are accessible and switches to quorum consensus when some site or network failures happen. 2.2.2 Degrees of Consistency The second RC protocol decision is the degree of consistency maintained among replicas.
Reference: [17] <author> A. El Abbadi and S. Toueg. </author> <title> The group paradigm for concurrency control protocol. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 1(3) </volume> <pages> 376-386, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: For example, the idea of witnesses [33] replicates metadata on the copy (version information) at low cost, due to their small size. The real data (copy itself) can be replicated less often. Some other proposals introduce multiple levels of control into RC. Group paradigm <ref> [17] </ref> is an example of combining local RC methods with a global RC to provide mutual consistency at the global level. Ceri et al's classification of RC protocols [12] is the work most closely related to our 5 classification. They have an excellent analysis of abstract RC protocols.
Reference: [18] <author> D. Scott Parker et al. </author> <title> Detection of mutual inconsistency in distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 9(3) </volume> <pages> 240-247, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: Ficus also detects conflicting updates using version vectors <ref> [18] </ref> when they occur, but leaves their resolution to the higher levels in the system. Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism None ROWO 1-Copy Avail. Confl. Detect. Oper. Semantics Some Confl. Resol.
Reference: [19] <author> Richard Guy et al. </author> <title> Implementation of the ficus replicated file service. </title> <booktitle> In Proceedings of the Summer 1990 USENIX Conference, </booktitle> <pages> pages 63-71, </pages> <address> Berkeley, CA, </address> <month> June 11-15 </month> <year> 1990. </year> <booktitle> The USENIX Association. </booktitle>
Reference-contexts: Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism None ROWO Temporary Inconsistency Oper. Semantics: Commutat. & Idempot. direct mail & anti-entropy OSCAR 12 3.2.5 Ficus The Ficus replicated file system provides a replication service on top of the Network File System (NFS) <ref> [36, 19] </ref>. Ficus uses asynchronous update propagation in the form of asynchronous multicasts, an example of the direct mail communication method.
Reference: [20] <author> D.K. Gifford. </author> <title> Weighted voting for replicated data. </title> <booktitle> In Proceedings of the Seventh Symposium on Operating Systems Principles, </booktitle> <pages> pages 150-162. </pages> <address> ACM/SIGOPS, </address> <month> December </month> <year> 1979. </year>
Reference-contexts: Read One, Write One (ROWO); other copies are handled later. There are many quorum consensus RC algorithms and we will not list them exhaustively here. They are analogous to hardware fault tolerance techniques such as Triple Modular Redundancy. Gifford's Weighted Voting <ref> [20] </ref> is a well known early example of these algorithms. In a simplified explanation, quorum consensus RC maps W (X) onto a subset of physical copies, called a write quorum, and R (X) onto an overlapping subset of physical copies, called a read quorum. <p> The interaction between RC operation scheduling and concurrency control operation scheduling can be summarized as follows. First, an RC method may assume that a concurrency control algorithm will handle the conflicts. This is the case of Gifford's work <ref> [20] </ref>, where each update happens within a transaction. Second, a distributed concurrency control algorithm may assume that each logical operation is atomic. In this case, the same algorithm works for both replicated and non-replicated database, provided that the RC method handles the conflicts between physical operations within a transaction.
Reference: [21] <author> Richard A. Golding. </author> <title> Group membership in the epidemic style. </title> <type> Technical report, </type> <institution> University of California, Santa Cruz, UCSC-CRL-91-32, </institution> <year> 1991. </year>
Reference-contexts: For example, logical updates can use ordered broadcast to guarantee mutual consistency without any additional synchronization. Second, the ROWAA and ROWO protocols need to handle some copies in the background. This can be done with epidemic propagation methods including direct mail, anti-entropy, and rumor mongering <ref> [14, 21] </ref>. Unlike ordered broadcast, epidemic propagation only ensures that the effect of every update will eventually be reflected in all replicas. Direct mail methods transmit update instruction messages directly to the appropriate sites. Though timely and efficient, the method is not reliable because messages may be lost.
Reference: [22] <author> Maurice Herlihy. </author> <title> A quorum-consensus replication method for abstract data types. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 4(1) </volume> <pages> 32-53, </pages> <month> February </month> <year> 1986. </year>
Reference-contexts: Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism Confl.-Based Timestamps Quorum Consensus Serializability & 1-Copy Equiv. Static broadcast or daisy chain Thomas Majority Voting 4.1.3 Consensus Locking Consensus locking [23] is a generalization of general quorum consensus <ref> [22] </ref>. It is a type-specific replication method that relies on an underlying CC scheme to ensure atomicity. As in other quorum consensus schemes, consensus locking requires that a logical operation access a quorum of copies. For correct execution, certain quorums are required 15 to have nonempty intersections.
Reference: [23] <author> Maurice Herlihy. </author> <title> Concurrency versus availability: Atomicity mechanisms for replicated data. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(3) </volume> <pages> 249-274, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism Confl.-Based Timestamps Quorum Consensus Serializability & 1-Copy Equiv. Static broadcast or daisy chain Thomas Majority Voting 4.1.3 Consensus Locking Consensus locking <ref> [23] </ref> is a generalization of general quorum consensus [22]. It is a type-specific replication method that relies on an underlying CC scheme to ensure atomicity. As in other quorum consensus schemes, consensus locking requires that a logical operation access a quorum of copies. <p> In such as system, concurrency is increased (N + 1)-fold with respect to a serializable system at the expense of bounded violations of the database's integrity constraints. N -ignorance is implemented using quorum locking <ref> [23] </ref> and gossip messages. However, unlike the original quorum locking, a transaction's read and write quorums are over the same sets (and therefore of the same size) and need not contain a majority of the sites.
Reference: [24] <author> Thomas A. Joseph and Ken P. Birman. </author> <title> Distributed Systems, chapter 14. </title> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: The essential feature of an ordered broadcast is that a message is actually delivered only when all the recipients have agreed on how to place its reception time relative to other messages <ref> [24] </ref>. The RC protocols may take advantage of this feature to make the ordering on operations at the physical copy level consistent with and according to the ordering of the corresponding operations at the logical object level.
Reference: [25] <author> Thomas A. Joseph and Kenneth P. Birman. </author> <title> Low cost management of replicated data in fault-tolerant distributed systems. </title> <journal> ACM Transaction on Computer Systems, </journal> <volume> 4(1) </volume> <pages> 54-700, </pages> <month> February </month> <year> 1986. </year>
Reference-contexts: We divide them into two classes, those that support serializability (Section 4.1) and those that support weaker notions of database correctness (Section 4.2). Unless noted, these RC mechanisms are not integrated with specific communications primitives. 4.1 Serializability Based 4.1.1 Piggybacked and Concurrent Updates The piggybacked and concurrent update techniques <ref> [25] </ref> are based on the observation that concurrency control (CC) mechanisms already provide synchronization facilities and that RC mechanisms, instead of duplicating these synchronization facilities, could exploit them to improve the combined performance.
Reference: [26] <author> R.P. King, N. Halim, H. Garcia-Molina, and C. Polyzois. </author> <title> Management of a remote backup copy for disaster recovery. </title> <journal> Transactions on Database Systems, </journal> <volume> 16(2) </volume> <pages> 338-368, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: The basic idea is to allow the secondary copies to lag behind the primary in update, in exchange for faster reading time. Checkpointing schemes such as the Tandem Remote Duplicate Database Facility and backup schemes such as the Remote Backup Procedure <ref> [26] </ref> are 3 also examples of ROWO. In addition, all of the so-called caching schemes are examples of ROWO, including quasi-copies [2]. These alternatives are not completely mutually exclusive and combinations are possible.
Reference: [27] <author> James J. Kistler and M. Satyanarayanan. </author> <title> Disconnected operation in the coda file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1) </volume> <pages> 3-25, </pages> <month> February </month> <year> 1992. </year> <month> 23 </month>
Reference-contexts: Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism None ROWO 1-Copy Avail. Confl. Detect. Oper. Semantics Some Confl. Resol. Asynchronous Multicast FICUS Distributed File System 3.2.6 Coda The Coda distributed file system <ref> [27, 28] </ref> uses two levels of replication to increase availability. First-class replicas are traditional replicas that are stored at server sites. Second-class replicas are cached copies of first-class replicas that are stored on client machines.
Reference: [28] <author> James Jay Kistler. </author> <title> Increasing file system availability through second-class replica-tion. </title> <editor> In Luis-Felipe Cabrera and Jehan-Francois Paris, editors, </editor> <booktitle> Proceedings of the Workshop on Management of Replicated Data, </booktitle> <pages> pages 65-69, </pages> <address> Los Alamitos, Califor-nia, </address> <month> November 8-9 </month> <year> 1990. </year> <booktitle> IEEE Computer Society Technical Committee on Operating Systems and Application Environments (TCOS), </booktitle> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism None ROWO 1-Copy Avail. Confl. Detect. Oper. Semantics Some Confl. Resol. Asynchronous Multicast FICUS Distributed File System 3.2.6 Coda The Coda distributed file system <ref> [27, 28] </ref> uses two levels of replication to increase availability. First-class replicas are traditional replicas that are stored at server sites. Second-class replicas are cached copies of first-class replicas that are stored on client machines.
Reference: [29] <author> Narayanan Krishnakumar and Arthur J. Bernstein. </author> <title> Bounded ignorance in replicated systems. </title> <booktitle> In Proceedings of the 1991 Principles of Database Systems, </booktitle> <pages> pages 63-74, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Assume DDB gossip messages Non-Blocking Quorum Consensus 5.4 N-Ignorance In an N -ignorant system <ref> [29] </ref>, a transaction may not see the results of at most N prior transactions that it would have seen if the execution had been serial.
Reference: [30] <author> Rivka Ladin, Barbara Liskov, and Liuba Shrira. </author> <title> Lazy replication: Exploiting the semantics of distributed services. </title> <booktitle> In Proceedings of the 1990 Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 43-57, </pages> <year> 1990. </year>
Reference-contexts: As an alternative, causal broadcast (CBCAST) can be used, but since it is integrated with concurrency control, we describe it in Section 5.1. Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism None ROWO 1-Copy Equivalence Static Mapping totally-ordered broadcast Virtual Synchrony with ABCAST 3.1.2 Lazy Replication Lazy replication <ref> [30] </ref> is a way to preserve consistency by exploiting the semantics of the service's operations to relax the constraints on ordering. Since some operations need not be ordered identically at all replicas, lazy replication guarantees one-copy equivalence with improved response time and availability.
Reference: [31] <author> Butler W. Lampson. </author> <title> Designing a global name service. </title> <booktitle> In Proceedings of the Fifth Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 1-10, </pages> <year> 1986. </year>
Reference-contexts: Read operations may still see temporary inconsistencies due to the asynchronous update propagation. Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism None ROWO Temp. Incons. Timestamp Confl. Detect. Static Mapping direct mail & anti-entropy Clearinghouse 3.2.3 Global Name Service The RC scheme developed for a global name service <ref> [31] </ref> is a further refinement of Clearinghouse. Updates are propagated primarily through direct mail messages. Update operation semantics such as commutativity and idempotency are used to increase performance. However, because direct mail may be unreliable, a sweep-based propagation method is used 11 to guarantee reliable delivery.
Reference: [32] <author> D.D.E. Long and J.-F. Paris. </author> <title> Regeneration protocols for replicated objects. </title> <booktitle> In Proceedings of the Fifth International Conference on Data Engineering, </booktitle> <pages> pages 538-545, </pages> <address> Los Angeles, </address> <year> 1989. </year>
Reference-contexts: Instead, we show some representative examples of each class to illustrate our classification scheme. Furthermore, we compare the structural differences of RC methods but do not analyze their performance due to the structural differences. This is in contrast to cost/benefit analysis of particular RC algorithms such as <ref> [11, 32] </ref>. To the best of our knowledge, Ceri et al's classification [12] is the only systematic attempt to analyze and compare the structure of RC algorithms. <p> An alternative is to use some kind of copy location protocol (e.g., a directory or broadcast) to dynamically find the copies. This way, physical copies may be regenerated [39] when a site goes down, providing more availability than static RC protocols <ref> [32] </ref>. Note that regeneration of copies is independent from the issue of dynamic quorum formation in quorum consensus protocols. Regardless of how and when quorum is formed, copy regeneration is possible. Another possibility is to separate the replication of metadata from the replication of real data.
Reference: [33] <author> D.D.E. Long and J.-F. Paris. </author> <title> Voting with regenerable volatile witnesses. </title> <type> Technical Report UCSC-CRL-90-09, </type> <institution> Computer and Information Sciences, University of California at Santa Cruz, </institution> <month> July </month> <year> 1990. </year>
Reference-contexts: Regardless of how and when quorum is formed, copy regeneration is possible. Another possibility is to separate the replication of metadata from the replication of real data. For example, the idea of witnesses <ref> [33] </ref> replicates metadata on the copy (version information) at low cost, due to their small size. The real data (copy itself) can be replicated less often. Some other proposals introduce multiple levels of control into RC.
Reference: [34] <author> Shivakant Mishra, Larry L. Peterson, and Richard D. Schlichting. </author> <title> Communication substrate for maintaining replicated data. </title> <editor> In Luis-Felipe Cabrera and Jehan-Francois Paris, editors, </editor> <booktitle> Proceedings of the Workshop on Management of Replicated Data, </booktitle> <pages> pages 125-127, </pages> <address> Los Alamitos, California, </address> <month> November 8-9 </month> <year> 1990. </year> <booktitle> IEEE Computer Society Technical Committee on Operating Systems and Application Environments (TCOS), </booktitle> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: There are two classes of asynchronous message mechanisms specifically useful to RC protocols. First, some researchers have proposed some powerful asynchronous group communications primitives that can be called ordered broadcast, such as Isis [6], Psync <ref> [34] </ref>, and other schemes described in Section 3. The essential feature of an ordered broadcast is that a message is actually delivered only when all the recipients have agreed on how to place its reception time relative to other messages [24]. <p> In virtual synchrony, the causal-ordered broadcast primitive is implemented by the ISIS broadcast primitive called CBCAST. By using CBCASTs and some type of CC to acquire exclusive access of objects, a program can be guaranteed to read objects in a mutually-consistent manner. Psync <ref> [34] </ref> is another example of RC mechanism using causal broadcasts. The difference is that as proposed Psync is not integrated with a CC mechanism. Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism Locking ROWAA Serializability & 1-Copy Equiv.
Reference: [35] <author> D.C. Oppen and Y.K. Dalal. </author> <title> The Clearinghouse: A decentralized agent for locating named objects in a distributed environment. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 1(3), </volume> <month> July </month> <year> 1983. </year>
Reference-contexts: The applications that use the registration database must be able to tolerate the problem. Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism None ROWO Temporary Inconsistency Static Mapping direct mail Grapevine registration database 3.2.2 Clearinghouse Clearinghouse <ref> [35] </ref> is a production version of Grapevine registration database. It also uses epidemic update propagation. A refinement is that when two programs perform conflicting operations on two different physical copies, Clearinghouse detects the conflicts by comparing timestamps.
Reference: [36] <author> Gerald J. Popek, Richard G. Guy, Jr. Thomas W. Page, and John S. Heidemann. </author> <title> Replication in ficus distributed file systems. </title> <editor> In Luis-Felipe Cabrera and Jehan-Francois Paris, editors, </editor> <booktitle> Proceedings of the Workshop on Management of Replicated Data, </booktitle> <pages> pages 5-10, </pages> <address> Los Alamitos, California, </address> <month> November 8-9 </month> <year> 1990. </year> <booktitle> IEEE Computer Society Technical Committee on Operating Systems and Application Environments (TCOS), </booktitle> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism None ROWO Temporary Inconsistency Oper. Semantics: Commutat. & Idempot. direct mail & anti-entropy OSCAR 12 3.2.5 Ficus The Ficus replicated file system provides a replication service on top of the Network File System (NFS) <ref> [36, 19] </ref>. Ficus uses asynchronous update propagation in the form of asynchronous multicasts, an example of the direct mail communication method.
Reference: [37] <author> Francis J. Prusker and Edward P. Wobber. </author> <title> The siphon: Managing distant replicated repositories. </title> <editor> In Luis-Felipe Cabrera and Jehan-Francois Paris, editors, </editor> <booktitle> Proceedings of the Workshop on Management of Replicated Data, </booktitle> <pages> pages 44-47, </pages> <address> Los Alamitos, Califor-nia, </address> <month> November 8-9 </month> <year> 1990. </year> <booktitle> IEEE Computer Society Technical Committee on Operating Systems and Application Environments (TCOS), </booktitle> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The difference is that as proposed Psync is not integrated with a CC mechanism. Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism Locking ROWAA Serializability & 1-Copy Equiv. CBCAST Virtual Synchrony with CBCAST 5.2 Siphon Siphon is a replica management system used to manage multi-site software development efforts <ref> [37] </ref>. Copies of objects are stored at all sites. Like Grapevine, Siphon allows temporary inconsistencies to arise. Updates are propagated using anti-entropy and may take indefinitely long time to arrive at all sites.
Reference: [38] <author> C. Pu and A. Leff. </author> <title> Replica control in distributed systems: An asynchronous approach. </title> <booktitle> In Proceedings of the 1991 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 377-386, </pages> <address> Denver, </address> <month> May </month> <year> 1991. </year> <month> 24 </month>
Reference-contexts: These proposals span the spectrum from one-copy equivalence to 4 user-specified degrees of consistency. Epsilon serializability (ESR) is a family of correctness criteria that explicitly supports such a spectrum of consistency for distributed databases <ref> [38, 40] </ref>. Many real-world databases have a distance function defined between different states. For example, in a bank account database, the distance between $110 and $80 is $30. <p> Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism Strict 2PL (quorum sites) Gen.Quo. Consensus Serializability & Confl. Detect. Timestamp order. Updates RPC Consensus Locking 4.2 Weak Consistency 4.2.1 Epsilon Serializability Epsilon serializability (ESR) <ref> [38, 40] </ref> offers a spectrum of consistency criteria spanning serializability on the one end and complete freedom from synchronization on the other end. <p> An example of promising ap 21 proaches in this direction is epsilon serializability (ESR <ref> [38] </ref>, outlined in Section 4.2.1) and divergence control methods [47] that guarantee ESR. Integrating ROWO protocols with ESR and asynchronous communication mechanisms may satisfy the performance, availability, and scalability requirements of practical replicated databases.
Reference: [39] <author> C. Pu, J.D. Noe, and A. Proudfoot. </author> <title> Regeneration of replicated objects: A technique and its Eden implementation. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-14(7):936-945, </volume> <month> July </month> <year> 1988. </year>
Reference-contexts: For example, many RC protocols assume that physical copies are statically allocated on certain sites. An alternative is to use some kind of copy location protocol (e.g., a directory or broadcast) to dynamically find the copies. This way, physical copies may be regenerated <ref> [39] </ref> when a site goes down, providing more availability than static RC protocols [32]. Note that regeneration of copies is independent from the issue of dynamic quorum formation in quorum consensus protocols. Regardless of how and when quorum is formed, copy regeneration is possible.
Reference: [40] <author> K. Ramamrithan and C. Pu. </author> <title> A formal characterization of epsilon serializability. </title> <type> Technical Report CUCS-044-91, </type> <institution> Department of Computer Science, Columbia University, </institution> <year> 1991. </year>
Reference-contexts: These proposals span the spectrum from one-copy equivalence to 4 user-specified degrees of consistency. Epsilon serializability (ESR) is a family of correctness criteria that explicitly supports such a spectrum of consistency for distributed databases <ref> [38, 40] </ref>. Many real-world databases have a distance function defined between different states. For example, in a bank account database, the distance between $110 and $80 is $30. <p> Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism Strict 2PL (quorum sites) Gen.Quo. Consensus Serializability & Confl. Detect. Timestamp order. Updates RPC Consensus Locking 4.2 Weak Consistency 4.2.1 Epsilon Serializability Epsilon serializability (ESR) <ref> [38, 40] </ref> offers a spectrum of consistency criteria spanning serializability on the one end and complete freedom from synchronization on the other end.
Reference: [41] <author> Amit Sheth and Marek Rusinkiewicz. </author> <title> Management of interdependent data: Specifying dependency and consistency requirements. </title> <editor> In Luis-Felipe Cabrera and Jehan-Francois Paris, editors, </editor> <booktitle> Proceedings of the Workshop on Management of Replicated Data, </booktitle> <pages> pages 133-136, </pages> <address> Los Alamitos, California, </address> <month> November 8-9 </month> <year> 1990. </year> <booktitle> IEEE Computer Society Technical Committee on Operating Systems and Application Environments (TCOS), </booktitle> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: One-copy equivalence is at one end of the spectrum of consistency criteria. We can characterize RC schemes in terms of the time lag (time) or fuzziness (value) of the copies in diverging from one-copy equivalence <ref> [41] </ref>. As the base case, one-copy equivalence guarantees (1) zero time-lag, that is, it provides instantaneous consistency, and (2) a logical read operation will return the value last written. Some systems [41] may only guarantee eventual consistency with a time-lag greater than zero. <p> schemes in terms of the time lag (time) or fuzziness (value) of the copies in diverging from one-copy equivalence <ref> [41] </ref>. As the base case, one-copy equivalence guarantees (1) zero time-lag, that is, it provides instantaneous consistency, and (2) a logical read operation will return the value last written. Some systems [41] may only guarantee eventual consistency with a time-lag greater than zero. Other proposals such as quasi-copies [2] allow user control of the time lag, imposing constraints on how long replica copies may lag the current object value. <p> Some RC methods integrate these scheduling decisions in a way analogous to multi-level concurrency control [45]. They are described in Section 4. Traditionally, distributed concurrency control must maintain serializability. Consequently, RC methods wishing to allow consistency weaker than serializability cannot be easily integrated. ESR (Section 4.2.1), eventual consistency <ref> [41] </ref>, and other proposals supporting a spectrum of consistency provide new challenges in their integration with appropriate RC protocols. 3 Integration with Communications We outline in this section some representative RC mechanisms integrated with some kind of communication mechanism. This integration may happen in one of two ways.
Reference: [42] <author> Alex Siegel, Kenneth Birman, and Keith Marzullo. Deceit: </author> <title> A flexible distributed file system. </title> <editor> In Luis-Felipe Cabrera and Jehan-Francois Paris, editors, </editor> <booktitle> Proceedings of the Workshop on Management of Replicated Data, </booktitle> <pages> pages 15-17, </pages> <address> Los Alamitos, Califor-nia, </address> <month> November 8-9 </month> <year> 1990. </year> <booktitle> IEEE Computer Society Technical Committee on Operating Systems and Application Environments (TCOS), </booktitle> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Lazy Replication 3.1.3 Deceit Deceit is a distributed file system that provides flexible file semantics to allow user control of the degree of efficiency, scalability, and reliability <ref> [42, 43] </ref>. Deceit requires a program to acquire the write token for a file before updating any copy of the file. The update is then propagated to the other file replicas using ISIS broadcast mechanisms such as CBCAST.
Reference: [43] <author> Alex Siegel, Kenneth Birman, and Keith Marzullo. Deceit: </author> <title> A flexible distributed file system. </title> <booktitle> In Proceedings of the Summer 1990 USENIX Conference, </booktitle> <pages> pages 51-62, </pages> <address> Berkeley, CA, </address> <month> June 11-15 </month> <year> 1990. </year> <booktitle> The USENIX Association. </booktitle>
Reference-contexts: Lazy Replication 3.1.3 Deceit Deceit is a distributed file system that provides flexible file semantics to allow user control of the degree of efficiency, scalability, and reliability <ref> [42, 43] </ref>. Deceit requires a program to acquire the write token for a file before updating any copy of the file. The update is then propagated to the other file replicas using ISIS broadcast mechanisms such as CBCAST.
Reference: [44] <author> R.H. Thomas. </author> <title> A majority consensus approach to concurrency control. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 4(2) </volume> <pages> 180-209, </pages> <month> June </month> <year> 1979. </year>
Reference-contexts: Unspecified Any, Including ABCAST and CBCAST Piggybacked and Concurrent Update Scheme 4.1.2 Thomas's Majority Voting Thomas's majority consensus algorithm <ref> [44] </ref> is another solution to the update synchronization problem for replicated databases that integrates the RC mechanism with concurrency control. The algorithm strives to preserve both database and object consistency.
Reference: [45] <author> G. Weikum. </author> <title> Principles and realization strategies of multilevel transaction management. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 16(1) </volume> <pages> 132-180, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: In both cases, the RC method and concurrency control are scheduling operations at different levels. Some RC methods integrate these scheduling decisions in a way analogous to multi-level concurrency control <ref> [45] </ref>. They are described in Section 4. Traditionally, distributed concurrency control must maintain serializability. Consequently, RC methods wishing to allow consistency weaker than serializability cannot be easily integrated.
Reference: [46] <author> G. Wiederhold and X. Qian. </author> <title> Consistency control of replicated data in federated databases. </title> <booktitle> In Proceedings of the Workshop on Management of Replicated Data, </booktitle> <pages> pages 130-132, </pages> <address> Houston, </address> <month> November </month> <year> 1990. </year>
Reference-contexts: Some early systems such as Grapevine [9] place no limit on the time lag and only guarantee that update messages will eventually reach all copies. Some proposals <ref> [46] </ref> place a restriction on how far a copy's value may diverge from the correct value. These proposals span the spectrum from one-copy equivalence to 4 user-specified degrees of consistency.
Reference: [47] <author> K.L. Wu, P. S. Yu, and C. Pu. </author> <title> Divergence control for epsilon-serializability. </title> <booktitle> In Proceedings of Eighth International Conference on Data Engineering, Phoenix, </booktitle> <month> February </month> <year> 1992. </year> <journal> IEEE/Computer Society. </journal>
Reference-contexts: A distance measure in the database state space allows users to specify the amount of inconsistency tolerated by a transaction and the database system enforces that limit through algorithms called divergence control methods <ref> [47] </ref>. When applied to replication, ESR allows the replicas to diverge by a limited amount of difference in value, the number of updates, or other distance measures. Concurrency Replica Control Communications Control Mapping Consistency Other Mechanism Divergence Control ROWO ROWAA ESR Primarily epidemic propa. <p> An example of promising ap 21 proaches in this direction is epsilon serializability (ESR [38], outlined in Section 4.2.1) and divergence control methods <ref> [47] </ref> that guarantee ESR. Integrating ROWO protocols with ESR and asynchronous communication mechanisms may satisfy the performance, availability, and scalability requirements of practical replicated databases.
Reference: [48] <author> G.T. Wuu and A.J. Bernstein. </author> <title> Efficient solutions to the replicated log and dictionary problems. </title> <booktitle> In Proceedings of the Third ACM Symposium of Principles of Distributed Computing, </booktitle> <pages> pages 233-242, </pages> <month> August </month> <year> 1984. </year> <month> 25 </month>
Reference-contexts: Unlike anti-entropy, rumor mongering is not reliable since it is possible for a rumor to die out before all sites have been informed. A related communication mechanism is gossip messages <ref> [48] </ref>. Like anti-entropy methods, every site eventually learns of each update. However, the gossip algorithm requires that each site maintain information about the states of other sites.
References-found: 48

