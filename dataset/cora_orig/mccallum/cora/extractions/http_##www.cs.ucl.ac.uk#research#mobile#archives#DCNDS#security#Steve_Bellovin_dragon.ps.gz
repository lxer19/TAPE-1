URL: http://www.cs.ucl.ac.uk/research/mobile/archives/DCNDS/security/Steve_Bellovin_dragon.ps.gz
Refering-URL: http://www.cs.ucl.ac.uk/research/mobile/archives/DCNDS/security/
Root-URL: http://www.cs.ucl.ac.uk
Email: smb@ulysses.att.com  
Title: There Be Dragons  
Author: Steven M. Bellovin 
Address: Murray Hill, NJ  
Affiliation: AT&T Bell Laboratories  
Date: September 1992.  August 15, 1992  
Note: To appear in Proceedings of the Third Usenix UNIX Security Sympisum, Baltimore,  
Abstract: Our security gateway to the Internet, research.att.com, provides only a limited set of services. Most of the standard servers have been replaced by a variety of trap programs that look for attacks. Using these, we have detected a wide variety of pokes, ranging from simple doorknob-twisting to determined assaults. The attacks range from simple attempts to log in as guest to forged NFS packets. We believe that many other sites are being probed but are unaware of it: the standard network daemons do not provide administrators with either appropriate controls and filters or with the logging necessary to detect attacks. 
Abstract-found: 1
Intro-found: 1
Reference: [Bel89] <author> Steven M. Bellovin. </author> <title> Security problems in the TCP/IP protocol suite. </title> <journal> Computer Communications Review, </journal> <volume> 19(2) </volume> <pages> 32-48, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: Other programs need to create network log entries as well. For example, named should note the source of all zone transfer requests. (Optionally, such requests should be denied if not from known secondary servers for the zone. Some reasons were presented above; others are discussed in <ref> [Bel89] </ref>.) The ftp daemon, login, and anything else that does authentication should note any session that does not end in a successful login. (Truly paranoid machines should log every attempt to log in, successful or not.
Reference: [Bel92] <author> Steven M. Bellovin. </author> <title> Packets found on an internet, </title> <note> 1992. In preparation. </note>
Reference-contexts: The pattern does not suggest an attack; rather, it suggests hosts that are quite confused about our proper IP address. The problem appears to be corrupted DNS entries, which we have also experienced, rather than any security problem. This problem is discussed further in <ref> [Bel92] </ref>. 2.2 Counterintelligence When a probe occurs, we try to learn as much about the originating machine and user as we can. Thus far, the only generally-available mechanism to do that is the finger command. While far better than nothing, it has some weaknesses. <p> Currently, the gateway machine is blind to such probes, but the TCP listener on a Plan 9 machine has picked up requests for some very unusual port numbers, as part of an apparent attack <ref> [Bel92] </ref>. The ideal way to implement this monitoring would be for the kernel to pass unwanted packets to a user-level daemon, rather than issuing its own rejections. That daemon could do what it wanted | fork a child process to handle the connection, issue a reject, log the incident, etc.
Reference: [CFSD90] <author> J.D. Case, M. Fedor, M.L. Schoffstall, and C. Davin. </author> <title> Simple Network Management Protocol (SNMP), </title> <month> May </month> <year> 1990. </year> <note> RFC 1157. </note>
Reference-contexts: Another choice would be the Authentication Server [Joh85], but our experiments show that very few sites support it. And SNMP <ref> [CFSD90] </ref> is generally implemented on routers, not hosts. A totally different set of investigations are performed using DNS data. First of all, we attempt to learn the host name associated with the prober's IP address, which should be a trivial matter.
Reference: [Che90] <author> W.R. Cheswick. </author> <title> The design of a secure internet gateway. </title> <booktitle> In Proc. Summer USENIX Conference, </booktitle> <address> Anaheim, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: AT&T appears to be a tempting target. Our approach to this problem is two-fold. First, most machines here are not directly connected to the Internet. Rather, we rely on application-level gateways and proxy servers <ref> [Che90] </ref>. Second, we employ a variety of monitors and phony daemons. Instead of providing services useful to both legitimate users and crackers, 1 Some call them "crackers", and some call them "hackers". A compromise term might be "chrackers".
Reference: [Che92] <author> W.R. Cheswick. </author> <title> An evening with Berferd, in which a cracker is lured, </title> <booktitle> endured, and studied. In Proc. Winter USENIX Conference, </booktitle> <address> San Francisco, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: But our motivation is somewhat different. We do not expect to prosecute, because (we hope) no damage will occur to our machines. (This is not to say that the attackers do not try such things; see, for example, <ref> [Che92] </ref>.) Nor, in general, do we care much about the identity of any particular attacker. Rather, we wish to study the attackers' strategies, tools, and techniques. <p> We thus cannot engage in counterintelligence activity in response to such pokes. Nevertheless, they remain very useful. These monitors | and a serious attack discovered via them | are described more fully in <ref> [Che92] </ref>. We also discovered that our gateway machine was being used as a repository for (presumably stolen) PC software. Assorted individuals would store such programs under a directory named "..^T", where "^T" represents the control-T character; others would retrieve it at their leisure. <p> No such excuse can be offered for trying to log in as an apparent genuine user. The next level up are folks who want our password file. Our ftp daemon provides a dummy one (see <ref> [Che92] </ref> for details); a packet sucker catches tftp requests for it. We have contemplated the idea of distributing the same dummy file via tftp, but have rejected it; the benefit to us would be minimal, and we would have to expose ourselves to possible bugs in the tftp daemon. <p> Suspicious RPC requests, which are difficult to filter via external mechanisms, arrived at least weekly. Attempts to connect to non-existent bait machines occurred at least every two weeks. It is worth noting that during the "Berferd" incident <ref> [Che92] </ref>, we attempted, without success, to lure the intruders to that machine, which actually existed at the time. Now, connection requests have become commonplace. <p> That may change in the future. Then again, it may not. 10 Acknowledgements Bill Cheswick and Diana D'Angelo implemented the first hacker traps on our gateway machine <ref> [Che92] </ref>. Bill also did a lot of work collecting and collating log file data for this paper. He and Dave Presotto designed our overall security architecture. Testing the traps described here required machines from which to launch simulated attacks.
Reference: [DG87] <author> Jack J. Dongarra and Eric Grosse. </author> <title> Distribution of mathematical software via electronic mail. </title> <journal> Communications of the ACM, </journal> <volume> 30 </volume> <pages> 403-407, </pages> <year> 1987. </year>
Reference-contexts: Most of these appear to be innocent, though curious nevertheless: why would anyone expect to be able to log in to another company's machines? Sometimes, we see attempts to connect as netlib, or to rcp the netlib distribution <ref> [DG87] </ref>; these most likely denote a somewhat-naive attempt to avoid the use of ftp when retrieving the netlib package we distribute. For other connections, we believe that fingers are faster than brains; the real intent was to use ftp or telnet to reach us.
Reference: [GM84] <author> Fred T. Grampp and Robert H. Morris. </author> <title> Unix operating system security. </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> 63(8, Part </volume> 2):1649-1672, October 1984. 
Reference-contexts: But caution is indicated; experience suggests that one is likely to collect passwords that way <ref> [GM84] </ref>.) We urge the creation of a standardized logging interface. Do not confuse this interface with the syslog daemon. The daemon is a mechanism for collecting entries, not for creating them.
Reference: [HM91] <author> Katie Hafner and John Markoff. </author> <title> Cyberpunk : Outlaws and Hackers on the Computer Frontier. </title> <publisher> Simon & Schuster, </publisher> <year> 1991. </year>
Reference-contexts: We are certainly not the first ones to attempt to trick attackers <ref> [Sto88, Sto89, HM91] </ref>. But our motivation is somewhat different.
Reference: [Joh85] <author> Mike St. </author> <title> Johns. Authentication Server, </title> <month> January </month> <year> 1985. </year> <note> RFC 931. </note>
Reference-contexts: To be sure, because it goes through the portmapper, it is harder to block or monitor; unfortunately, many sites block all outside calls to the portmapper because of (valid) concerns about the security of some RPC-based services. Another choice would be the Authentication Server <ref> [Joh85] </ref>, but our experiments show that very few sites support it. And SNMP [CFSD90] is generally implemented on routers, not hosts. A totally different set of investigations are performed using DNS data.
Reference: [Moc87] <author> P.V. Mockapetris. </author> <title> Domain Names | Concepts and Facilities, </title> <month> November </month> <year> 1987. </year> <note> RFC 1034. </note>
Reference-contexts: A clever cracker, though, might investigate further, looking for other likely machines to try. There seemed to be two possibilities: blind probing of the address space, or examination of our domain name system (DNS) data <ref> [Moc87] </ref>. We decided to monitor for such attempts. The obvious way to do such monitoring is to put a network controller into promiscuous mode and watch the packets fly by. Indeed, we did do just that; however, the solution was not at all straight-forward.
Reference: [Pen] <author> Jan-Simon Pendry. </author> <title> Amd | An automounter. </title> <institution> Department of Computing, Imperial College, </institution> <address> London. </address>
Reference-contexts: to contact the individuals responsible; they generally replied that they were checking to see if our archives were accessible by NFS as well as by ftp. (A number of sites do provide this option; we marvel at their courage.) In fact, at least one popular program | the amd auto-mounter <ref> [Pen] </ref> | apparently generates NFS no-ops automatically. We are starting to see worrisome levels of such queries. Given the existence of public NFS archives, checking to see if we offer such a service cannot be considered a hostile act.
Reference: [Plu82] <author> D.C. Plummer. </author> <title> Ethernet Address Resolution Protocol, </title> <month> November </month> <year> 1982. </year> <note> RFC 826. </note>
Reference-contexts: Although we could now listen, we could not learn as much as we would like. Upon seeing a packet for a new machine, our router's instinct is to issue an ARP request <ref> [Plu82] </ref>. For non-existent machines, of course, no one can answer. Ideally, the monitoring machine would pick up such requests and provide a proxy ARP reply. Unfortunately, our security measures rendered that idea impractical.
Reference: [PPTT90] <author> Rob Pike, Dave Presotto, Ken Thompson, and Howard Trickey. </author> <title> Plan 9 from Bell Labs. </title> <booktitle> In Proceedings of the Summer 1990 UKUUG Conference, </booktitle> <pages> pages 1-9, </pages> <address> London, </address> <month> July </month> <year> 1990. </year> <pages> UKUUG. </pages>
Reference-contexts: This is useful for programmers, but bad for us; if, say, someone is playing games with the authenticators, we want to know about it. Finally, we wanted our code to be very portable. In particular, we want it to run on Plan 9 machines <ref> [PPTT90] </ref>. As of now, no one has ported RPC to Plan 9. Doing so might not be a lot of work, but it is not work we are interested in performing. 2.1 Address Space Probes Our gateway, research.att.com, is a well-known machine, and hence attracts crackers.
Reference: [Ran92] <author> Marcus J. Ranum. </author> <title> A network firewall. </title> <booktitle> In Proc. World Conference on System Administration and Security, </booktitle> <address> Washington, D.C., </address> <month> July </month> <year> 1992. </year>
Reference-contexts: A small university machine might see a very different pattern of attacks. On the other hand, we have seen enough connections that were apparently laundered through small university machines that we advise against complacency. Others report similar phenomena; see, for example, <ref> [Ran92] </ref>. For serious investigations of cracker behavior, a dedicated sacrificial machine is probably a better idea than installing trap programs. As noted, we made such a machine available when trying to track Berferd, but it attracted little interest.
Reference: [Sto88] <author> C. Stoll. </author> <title> Stalking the wiley hacker. </title> <journal> Communications of the ACM, </journal> <volume> 31(5):484, </volume> <month> May </month> <year> 1988. </year>
Reference-contexts: We are certainly not the first ones to attempt to trick attackers <ref> [Sto88, Sto89, HM91] </ref>. But our motivation is somewhat different.
Reference: [Sto89] <author> C. Stoll. </author> <title> The Cuckoo's Egg: Tracking a Spy Through the Maze of Computer Espionage. </title> <publisher> Doubleday, </publisher> <year> 1989. </year>
Reference-contexts: We are certainly not the first ones to attempt to trick attackers <ref> [Sto88, Sto89, HM91] </ref>. But our motivation is somewhat different.
Reference: [Sun90] <author> Sun Microsystems, Inc., </author> <title> Mountain View, CA. Network Interfaces Programmer's Guide, </title> <month> March </month> <year> 1990. </year> <note> SunOS 4.1. </note>
Reference-contexts: It shows an attempt to grab our password file via tftp. Experience with the packet sucker showed us that there were a significant number of requests for the portmapper service. The portmapper, part of Sun Microsystem's RPC package, maps a program identifier to a dynamically-assigned port number <ref> [Sun90] </ref>. The From: adm@research.att.com To: trappers Attempted rsh to inet [24640] Call from host Some.Random.COM (176.75.92.87) remuser: bin locuser: bin command: domainname (/usr/ucb/finger @176.75.92.87; /usr/ucb/finger bin@176.75.92.87) 2&gt;&1 [176.75.92.87] Login Name TTY Idle When Where rel R. <p> We do not know for certain what they had in mind; likely guesses include attempts to read newsgroups not carried at their own sites, or attempts to forge netnews postings. The most sophisticated pokes have been attempted NFS operations <ref> [Sun90] </ref>. They may have been hand-crafted, as most normal NFS operations are preceded by mount requests. A sample alarm message is shown as Figure 4. Perhaps not surprisingly, the users shown as logged in have all been idle for quite some time.
Reference: [Tol65] <author> J.R.R. Tolkien. </author> <title> Lord of the Rings. </title> <publisher> Ballantine Books, </publisher> <year> 1965. </year>
Reference: [Tol66] <author> J.R.R. Tolkien. </author> <title> The Hobbit. </title> <publisher> Ballantine Books, </publisher> <year> 1937, 1938, 1966. </year>
References-found: 19

