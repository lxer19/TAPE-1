URL: http://www.cs.rpi.edu/~musser/ap/nuweb.ps.gz
Refering-URL: http://www.cs.rpi.edu/~musser/ap/index_29.html
Root-URL: http://www.cs.rpi.edu
Email: preston@cs.rice.edu  ramsdell@mitre.org  mengel@fnal.gov  
Title: Nuweb A Simple Literate Programming Tool  
Author: Preston Briggs John D. Ramsdell Marc W. Mengel 
Note: HTML part generator by  part formatting by  Author address:  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Alfred V. Aho and Margaret J. Corasick. </author> <title> Efficient string matching: An aid to bibliographic search. </title> <journal> Communications of the ACM, </journal> <volume> 18(6) </volume> <pages> 333-340, </pages> <month> June </month> <year> 1975. </year>
Reference-contexts: c = *p++; while (c) - *q++ = c; if (PATH_SEP (c)) - trim = q; dot = NULL; - else if (c == '.') dot = q - 1; - if (dot) - *dot = '"0'; /* produce HTML when the file extension is ".hw" */ html_flag = dot <ref> [1] </ref> == 'h' && dot [2] == 'w' && dot [3] == '"0'; sprintf (tex_name, "%s.tex", trim); sprintf (aux_name, "%s.aux", trim); *dot = '.'; else - sprintf (tex_name, "%s.tex", trim); sprintf (aux_name, "%s.aux", trim); *q++ = '.'; *q = '"0'; hi Used in part 13a. 14 2. <p> The obvious approach to this problem would be quite expensive for large documents; however, there is an interesting paper describing an efficient solution <ref> [1] </ref>. "src/parts.c" 64c typedef struct name_node - struct name_node *next; Name *name; - Name_Node; hi File defined by parts 9b, 44cd, 45acd, 46aef, 47ab, 49d, 50a, 51a, 54a, 64cd, 65abce, 66, 70ab. "src/parts.c" 64d typedef struct goto_node - Name_Node *output; /* list of words ending in this state */ struct move_node <p> with tree-&gt;spelling 67i - int depth = 2; char *p = tree-&gt;spelling; char c = *p++; Goto_Node *q = root [c]; if (!q) - q = (Goto_Node *) arena_getmem (sizeof (Goto_Node)); root [c] = q; q-&gt;moves = NULL; q-&gt;fail = NULL; q-&gt;moves = NULL; q-&gt;output = NULL; q-&gt;next = depths <ref> [1] </ref>; depths [1] = q; - while (c = *p++) - Goto_Node *new = goto_lookup (c, q); if (!new) - Move_Node *new_move = (Move_Node *) arena_getmem (sizeof (Move_Node)); new = (Goto_Node *) arena_getmem (sizeof (Goto_Node)); new-&gt;moves = NULL; new-&gt;fail = NULL; new-&gt;moves = NULL; new-&gt;output = NULL; new_move-&gt;state = new; new_move-&gt;c <p> 67i - int depth = 2; char *p = tree-&gt;spelling; char c = *p++; Goto_Node *q = root [c]; if (!q) - q = (Goto_Node *) arena_getmem (sizeof (Goto_Node)); root [c] = q; q-&gt;moves = NULL; q-&gt;fail = NULL; q-&gt;moves = NULL; q-&gt;output = NULL; q-&gt;next = depths <ref> [1] </ref>; depths [1] = q; - while (c = *p++) - Goto_Node *new = goto_lookup (c, q); if (!new) - Move_Node *new_move = (Move_Node *) arena_getmem (sizeof (Move_Node)); new = (Goto_Node *) arena_getmem (sizeof (Goto_Node)); new-&gt;moves = NULL; new-&gt;fail = NULL; new-&gt;moves = NULL; new-&gt;output = NULL; new_move-&gt;state = new; new_move-&gt;c = c;
Reference: [2] <author> Nikos Drakos. </author> <title> The LaTeX2HTML translator, </title> <month> January </month> <year> 1994. </year> <note> Available fromhttp://clb.leeds.ac.uk/nikos/tex2html/latex2html.tar. </note>
Reference-contexts: This form is perhaps more desirable for small webs. 4. Generating HTML Nikos Drakos' L A T E X2HTML Version 0.5.3 <ref> [2] </ref> can be used to translate L A T E X with embedded HTML parts into HTML. Be sure to include the document-style option html so that L A T E X will understand the hypertext commands. <p> - *q++ = c; if (PATH_SEP (c)) - trim = q; dot = NULL; - else if (c == '.') dot = q - 1; - if (dot) - *dot = '"0'; /* produce HTML when the file extension is ".hw" */ html_flag = dot [1] == 'h' && dot <ref> [2] </ref> == 'w' && dot [3] == '"0'; sprintf (tex_name, "%s.tex", trim); sprintf (aux_name, "%s.aux", trim); *dot = '.'; else - sprintf (tex_name, "%s.tex", trim); sprintf (aux_name, "%s.aux", trim); *q++ = '.'; *q = '"0'; hi Used in part 13a. 14 2.
Reference: [3] <author> David R. Hanson. </author> <title> Fast allocation and deallocation of memory based on object lifetimes. </title> <journal> Software Practice and Experience, </journal> <volume> 20(1) </volume> <pages> 5-12, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: (PATH_SEP (c)) - trim = q; dot = NULL; - else if (c == '.') dot = q - 1; - if (dot) - *dot = '"0'; /* produce HTML when the file extension is ".hw" */ html_flag = dot [1] == 'h' && dot [2] == 'w' && dot <ref> [3] </ref> == '"0'; sprintf (tex_name, "%s.tex", trim); sprintf (aux_name, "%s.aux", trim); *dot = '.'; else - sprintf (tex_name, "%s.tex", trim); sprintf (aux_name, "%s.aux", trim); *q++ = '.'; *q = '"0'; hi Used in part 13a. 14 2. <p> Memory Management I manage memory using a simple scheme inspired by Hanson's idea of arenas <ref> [3] </ref>. Basically, I allocate all the storage required when processing a source file (primarily for names and parts) using calls to arena_getmem (n), where n specifies the number of bytes to be allocated.
Reference: [4] <author> Donald E. Knuth. </author> <title> Literate programming. </title> <journal> The Computer Journal, </journal> <volume> 27(2) </volume> <pages> 97-111, </pages> <month> May </month> <year> 1984. </year>
Reference-contexts: Introduction In 1984, Knuth introduced the idea of literate programming and described a pair of tools to support the practise <ref> [4] </ref>. His approach was to combine Pascal code with T E X documentation to produce a new language, WEB, that offered programmers a superior approach to programming. He wrote several programs in WEB, including weave and tangle, the programs used to support literate programming.
Reference: [5] <author> Donald E. Knuth. METAFONT: </author> <title> The Program. Computers & Typesetting. </title> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: Additionally, all of the code sections were automatically pretty printed, resulting in a quite impressive document. Knuth also wrote the programs for T E X and METAFONT entirely in WEB, eventually publishing them in book form <ref> [6, 5] </ref>. These are probably the largest programs ever published in a readable form. Inspired by Knuth's example, many people have experimented with WEB. Some people have even built web-like tools for their own favorite combinations of programming language and typesetting language.
Reference: [6] <author> Donald E. Knuth. </author> <title> T E X: The Program. Computers & Typesetting. </title> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: Additionally, all of the code sections were automatically pretty printed, resulting in a quite impressive document. Knuth also wrote the programs for T E X and METAFONT entirely in WEB, eventually publishing them in book form <ref> [6, 5] </ref>. These are probably the largest programs ever published in a readable form. Inspired by Knuth's example, many people have experimented with WEB. Some people have even built web-like tools for their own favorite combinations of programming language and typesetting language.
Reference: [7] <author> Donald E. Knuth. </author> <title> The T E Xbook. Computers & Typesetting. </title> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: He wrote several programs in WEB, including weave and tangle, the programs used to support literate programming. The idea was that a programmer wrote one document, the web file, that combined documentation (written in T E X <ref> [7] </ref>) with code (written in Pascal). Running tangle on the web file would produce a complete Pascal program, ready for compilation by an ordinary Pascal compiler.
Reference: [8] <author> Leslie Lamport. </author> <title> L A T E X: A Document Preparation System. </title> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: Inspired by the versatility of FunnelWeb and by the daunting size of its documentation, I decided to write my own, very simple, tool for literate programming. 1 1. Nuweb Nuweb works with any programming language and L A T E X <ref> [8] </ref>. I wanted to use L A T E X because it supports a multi-level sectioning scheme and has facilities for drawing figures.
Reference: [9] <author> Silvio Levy and Donald E. Knuth. </author> <title> CWEB user manual: The CWEB system of structured documentation. </title> <type> Technical Report STAN-CS-83-977, </type> <institution> Stanford University, </institution> <month> October </month> <year> 1990. </year> <note> Available for anonymous ftp from labrea.stanford.edu in directory pub/cweb. </note>
Reference-contexts: Inspired by Knuth's example, many people have experimented with WEB. Some people have even built web-like tools for their own favorite combinations of programming language and typesetting language. For example, CWEB, Knuth's current system of choice, works with a combination of C (or C++) and T E X <ref> [9] </ref>. Another system, FunnelWeb, is independent of any programming language and only mildly dependent on T E X [11]. Inspired by the versatility of FunnelWeb and by the daunting size of its documentation, I decided to write my own, very simple, tool for literate programming. 1 1.
Reference: [10] <author> Norman Ramsey. </author> <title> Literate-programming tools need not be complex. </title> <note> Submitted to IEEE Software, </note> <month> August </month> <year> 1992. </year>
Reference-contexts: Here are the advantages I can see: 1 There is another system similar to mine, written by Norman Ramsey, called noweb <ref> [10] </ref>. It perhaps suffers from being overly Unix-dependent and requiring several programs to use. On the other hand, its command syntax is very nice. In any case, nuweb certainly owes its name and a number of features to his inspiration. 1 2 1. <p> Used in part 9e. 1.2. Local Declarations. "src/input.c" 41d static FILE *source_file; /* the current input file */ static int source_peek; static int double_at; static int include_depth; hi File defined by parts 9a, 41de, 42a, 44b. "src/input.c" 41e static struct - FILE *file; char *name; int line; - stack <ref> [10] </ref>; hi File defined by parts 9a, 41de, 42a, 44b. 1.3. Reading a File. The routine source_get returns the next character from the current source file. It notices newlines and keeps the line counter source_line up to date. It also catches EOF and watches for @ characters.
Reference: [11] <author> Ross N. Williams. </author> <note> FunnelWeb user's manual, May 1992. Available for anonymous ftp from sirius.itd.adelaide.edu.au in directory pub/funnelweb. 83 </note>
Reference-contexts: For example, CWEB, Knuth's current system of choice, works with a combination of C (or C++) and T E X [9]. Another system, FunnelWeb, is independent of any programming language and only mildly dependent on T E X <ref> [11] </ref>. Inspired by the versatility of FunnelWeb and by the daunting size of its documentation, I decided to write my own, very simple, tool for literate programming. 1 1. Nuweb Nuweb works with any programming language and L A T E X [8].
References-found: 11

