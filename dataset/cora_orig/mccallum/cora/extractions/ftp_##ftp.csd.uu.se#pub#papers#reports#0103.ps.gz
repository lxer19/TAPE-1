URL: ftp://ftp.csd.uu.se/pub/papers/reports/0103.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Email: svenolof@csd.uu.se  
Title: Non-determinism, Infinite Computations, Fixpoint Semantics and Full Abstraction  
Author: Sven-Olof Nystrom 
Address: P.O. Box 311, S-751 05 Uppsala, Sweden  
Affiliation: Computing Science Department Uppsala University,  
Note: On  Consider the programming languages which satisfy the following prop erties.  
Abstract: UPMAIL Technical Report No. 103 20 March, 1995 Abstract 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abramsky, </author> <title> On semantic foundations for applicative multiprogramming, </title> <booktitle> Proceedings of the Tenth ICALP , Springer LNCS 154, </booktitle> <pages> 1-14, </pages> <address> New York 1983. </address>
Reference-contexts: However, they were able to give a fully abstract least fixpoint semantics by giving up the requirement that the semantic functions should be continuous. Abramsky <ref> [1] </ref> demonstrated that there is no continuous fully abstract fixpoint for a non-deterministic language, similar to the one we consider. In contrast, we show that the language we consider does not allow any fully abstract least fixpoint semantics, regardless of whether continuity is required or not.
Reference: [2] <author> K. R. Apt, G.D. Plotkin, </author> <title> Countable nondeterminism and random assignment, </title> <journal> JACM , 33(4) </journal> <pages> 724-767, </pages> <year> 1986. </year> <month> 8 </month>
Reference-contexts: It should be stressed that our results are with respect to fixpoint semantics, so we rule out not only any semantics based on continuous functions, but but also any non-continuous function based on other types of functions. 1 1.2 Related Work Apt and Plotkin <ref> [2] </ref> considered an imperative programming language with unbounded non-determinism and while-loops and showed that there could be no continuous fully abstract fixpoint semantics. However, they were able to give a fully abstract least fixpoint semantics by giving up the requirement that the semantic functions should be continuous.
Reference: [3] <author> S.D. Brookes, </author> <title> Full abstraction for a shared variable parallel language, </title> <booktitle> Proc. 8th IEEE Int. Symp. on Logic in Computer Science, </booktitle> <year> 1993. </year>
Reference-contexts: There are many examples of denotational semantics for languages which satisfy three of the four properties listed above. For example, Kahn's semantics [4] treats infinite computation and arbitrary recursion but does not allow non-determinism. Brookes <ref> [3] </ref> gives a fully abstract fixpoint semantics of an imperative non-deterministic language with shared variables. The semantic model also allows infinite traces and is thus able to adequately model the behaviour of infinitely running processes. However, recursion is not dealt with.
Reference: [4] <author> G. Kahn, </author> <title> The semantics of a simple language for parallel programming, </title> <booktitle> Proceedings of IFIP Congress 74 , North-Holland, </booktitle> <pages> 471-475, </pages> <year> 1974. </year>
Reference-contexts: 1 Introduction It is well known that the problem of giving a fixpoint semantics for a programming language with non-determinism raises difficulties, especially if one wants to consider infinite computations and wants to avoid redundant information in the semantic model. Why is it so? In 1974 Kahn <ref> [4] </ref> presented a denotational semantics for a deterministic concurrent programming language. It is obvious that the semantics is fully abstract, and the treatment of recursion (i.e. fixpoints) and infinite computations is immediate. <p> The language in this paper is also much simpler, since it is not a regular programming language and has no state or value-passing etc. There are many examples of denotational semantics for languages which satisfy three of the four properties listed above. For example, Kahn's semantics <ref> [4] </ref> treats infinite computation and arbitrary recursion but does not allow non-determinism. Brookes [3] gives a fully abstract fixpoint semantics of an imperative non-deterministic language with shared variables. The semantic model also allows infinite traces and is thus able to adequately model the behaviour of infinitely running processes.
Reference: [5] <author> M. Nivat, </author> <title> Infinite words, infinite trees, infinite computations, </title> <booktitle> Foundations of Computer Science III , Mathematical Centre Tracts 109, </booktitle> <month> Ams-terdam </month> <year> 1979. </year>
Reference-contexts: To obtain a suitable operational semantics we will extend the set of derivations of a grammar to also allow infinite derivations. In the following, we will follow the definition of Nivat <ref> [5] </ref>. He gave a fixpoint interpretation for grammars in Greibach form. This restriction roughly corresponds to the guarded recursion found in various programming languages.
Reference: [6] <author> A. Poigne, </author> <title> Context-free languages of infinite words as least fixpoints, Foundations of Computation Theory, </title> <publisher> Springer LNCS 117, </publisher> <year> 1981. </year>
Reference-contexts: However, the agents Aa and Ba differ in that L 1 (G; Aa) = fag but L 1 (G; Ba) = f*g. We need a way to distinguish between finite strings generated by terminating computations, and finite strings generated by non-terminating computations. Poigne <ref> [6] </ref> solves this by adding to the set of finite and infinite words a new set of words consisting of finite words ending with ?.
Reference: [7] <author> J. R. Russell, </author> <title> On oraclizable networks and Kahn's principle, </title> <booktitle> Proceedings of the 17'th ACM Symposium on Principles of Programming languages, </booktitle> <pages> 320-328, </pages> <year> 1990. </year>
Reference-contexts: Saraswat, Rinard and Panangaden [8] give fully abstract fixpoint semantics for various types of concurrent constraint programming languages. One of the languages under consideration is a non-deterministic language which allows arbitrary recursion. However, only finite computations are considered. A similar result is by Russel <ref> [7] </ref>, who considers a class of non-deterministic data flow networks.
Reference: [8] <author> V. A. Saraswat, M. Rinard, P. Panangaden, </author> <title> Semantic foundations of concurrent constraint programming, </title> <booktitle> Proceedings of the 18'th ACM Symposium on Principles of Programming languages, </booktitle> <pages> 333-352, </pages> <year> 1991. </year>
Reference-contexts: Brookes [3] gives a fully abstract fixpoint semantics of an imperative non-deterministic language with shared variables. The semantic model also allows infinite traces and is thus able to adequately model the behaviour of infinitely running processes. However, recursion is not dealt with. Saraswat, Rinard and Panangaden <ref> [8] </ref> give fully abstract fixpoint semantics for various types of concurrent constraint programming languages. One of the languages under consideration is a non-deterministic language which allows arbitrary recursion. However, only finite computations are considered. A similar result is by Russel [7], who considers a class of non-deterministic data flow networks.
Reference: [9] <author> D. S. Scott, </author> <title> Data types as lattices, </title> <journal> SIAM Journal of Computing, </journal> <volume> Vol 5, No. 3, </volume> <year> 1976. </year>
Reference-contexts: One important idea in domain theory is that an infinite amount of information should be approximated by finite pieces of information <ref> [9] </ref>.
References-found: 9

