URL: http://www.cs.utah.edu/~ald/tr-intro.ps
Refering-URL: http://www.cs.utah.edu/~ald/
Root-URL: 
Title: An Introduction to Asynchronous Circuit Design  
Author: Al Davis Steven M. Nowick 
Date: September 19, 1997  
Address: Salt Lake City, UT 84112 New York, NY 10027  
Affiliation: 1 Computer Science 2 Computer Science University of Utah Columbia University  
Pubnum: UUCS-97-013  
Abstract: The purpose of this monograph is to provide both an introduction to field of asynchronous digital circuit design and an overview of the practical state of the art in 1997. In the early days of digital circuit design, little distinction was made between synchronous and asynchronous circuits. However, since the 1960's, the mainstream of the digital circuit design enterprise has been primarily concerned with synchronous circuits. Synchronous circuits may be simply defined as circuits which are sequenced by one or more globally distributed periodic timing signals called clocks. Asynchronous circuits are an inherently larger class of circuits, since there are may sequencing options other than global periodic clock signals. Asynchronous circuits have been studied in one form or another since the early 1950's [92] when the focus was primarily on mechanical relay circuits. A number of theoretical issues were studied in detail by Muller and Bartky as early as 1956 [138]. Since then, the field of asynchronous circuits has gone through a number of high-interest cycles. In recent years there has been an unprecedented level of interest in both academic and industrial settings [81]. Much of this recent research effort has focused more on theory than practice. Nonetheless, the advance of practical asynchronous circuit design techniques also has an unusual level of interest. The focus of this document is on the aspects of the asynchronous circuit design discipline which are either likely, or have been an influence on the practical design of asynchronous circuits. The attempt is to provide an introduction to the basic concepts which provide the foundation for today's design techniques and to summarize the current practice. The text contains an extensive set of bibliographical pointers to guide the more serious student of the field. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. B. Ackerman and J. B. Dennis. </author> <title> VAL A Value-Oriented Algorithmic Language Preliminary Reference Manual. </title> <type> Technical Report LCS/TR-218, </type> <institution> Massachusetts Institute Technology, Computer Science Department, </institution> <year> 1979. </year>
Reference-contexts: Strictly speaking these handshake signals are independent of any global system time and are only concerned with the local relative temporal relationships between two subsystems sharing a common interface. The resulting computational model is very much like the dataflow model <ref> [49, 1] </ref>, where the arrival of the necessary operand data triggers an operation. Similarly there is a concept of a sender of information and a corresponding receiver.
Reference: [2] <author> M. Afhahi and C. Svensson. </author> <title> Performance of Synchronous and Asynchronous Schemes for VLSI Systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 41(7) </volume> <pages> 858-872, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: New approaches will be necessary or performance will be adversely affected. A similar skew problem exists for circuit boards as well as chips. The literature contains an abundance of methods for de-skewing clocks <ref> [2, 36] </ref> on a board but most of them are also costly in either area or complexity, and some will probably not be robust enough for use in commercial circuits. An interesting example is the Monarch [168] processor chip which used active signal selection on each 4 input pad.
Reference: [3] <author> F. Aghdasi. </author> <title> Synthesis of asynchronous sequential machines for VLSI applications. </title> <booktitle> In Proceedings of the 1991 International Conference on Concurrent Engineering and Electronic Design Automation (CEEDA), </booktitle> <pages> pages 55-59, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: Unlike a synchronous design, the clock is aperiodic, being generated as needed for the given computations. A block diagram of a self-synchronized machine is shown in Figure 11. Both SIC [82, 201] and MIC <ref> [3, 41, 169, 208] </ref> self-synchronized machines have been proposed. In a related approach, the local clock is replaced by an explicit external completion signal [105]. Other researchers have developed hybrid mixed-operation 23 mode machines [224, 37].
Reference: [4] <author> V. Akella and G. Gopalakrishnan. SHILPA: </author> <title> a high-level synthesis system for self-timed circuits. </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 587-91. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: The compiler includes algorithms for optimal transistor sizing [27]. (Designs for other datapath components, and for a microprocessor, using this method are described in the next two sections.) Martin's work has been extended by Akella and Gopalakrishnan in a system called SHILPA <ref> [4] </ref>. This method allows global shared variables, and uses flow analysis techniques to optimize resource allocation. A different compiler-based approach was developed by van Berkel, Rem and others [210, 211, 161, 212] at Philips Research Laboratories and Eindhoven University of Technology, using the Tangram language.
Reference: [5] <author> R. Alur and D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 1(126) </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: The above verification techniques handle SI and DI circuits and protocols, and therefore are not concerned with timing. However, timing is critical for the analysis and verification of many asynchronous systems. A general model for timed systems was introduced by Alur and Dill <ref> [5] </ref>. Timing analysis and verification methods for asynchronous state machines with bounded delays were developed by Devadas et al. [57] and Chakraborty et al. [31, 30]. Methods using Timed Petri Nets have been developed by Rokicki [173], Semenov et al. [187] and Verlind et al. [219].
Reference: [6] <author> D.B. Armstrong, A.D. Friedman, and P.R. Menon. </author> <title> Realization of asynchronous sequential circuits without inserted delay elements. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-17(2):129-134, </volume> <month> February </month> <year> 1968. </year>
Reference-contexts: In effect, the machine sees the new state before the combinational logic has stabilized from the input change. Essential hazards are avoided by adding delays to the feedback path or, in some cases, using special logic factoring <ref> [6] </ref>. Because of the complexity of building correct Huffman machines, an alternative approach was proposed, called self-synchronized machines. These machines are similar to Huffman machines, but have a local self-synchronization unit which acts like a clock on the machine's latches or flip-flops.
Reference: [7] <author> A. Ashkinazy, D. Edwards, C. Farnsworth, G. Gendel, and S. Sikand. </author> <title> Tools for validating asynchronous digital circuits. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async94), </booktitle> <pages> pages 12-21. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: Williams [220] and Burns [27] have introduced methods to analyze the performance of systems. A notion of timing-reliability was proposed by Kuwako and Nanya [104]. Timing and hazard analysis tools have been developed by Ashkinazy et al. <ref> [7] </ref>. Other recent work has focused on timing analysis to determine minimum and maximum separation of events in a concurrent circuit or system [128, 87, 86].
Reference: [8] <editor> A.M. Bailey and M.B. Josephs. </editor> <booktitle> Sequencer circuits for VLSI programming. In Proceedings of the Working Conference on Asynchronous Design Methodologies, </booktitle> <pages> pages 82-90. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: Finally, low-power micropipeline structures have been introduced using adaptive scaling of supply voltage [146]. While pipelining is fundamental to high-performance systems, sequencing is the basic control operation in low-performance non-pipelined systems. A number of sequencer designs have been proposed <ref> [122, 211, 209, 161, 8, 64, 164] </ref>. There has been much recent research on asynchronous datapaths, beyond the above work on pipelines and sequencers.
Reference: [9] <author> H. B. Bakoglu. </author> <title> Circuits, Interconnections, and Packaging for VLSI. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Clock distribution and de-skewing methods are abundant but they share the common characteristic of being expensive in either power or area and they become more so as clock speeds increase. A common method is to distribute the clock via a balanced H-tree configuration <ref> [9] </ref> with amplifying buffers placed at the fanout points. The problem with this approach is that as more buffers are added to a clock path, larger skew results. The designers of the DEC Alpha CPU [193] took the opposite approach. <p> For clock deskewing purposes the local clock is kept in phase with an external reference clock. There are many PLL design variants. We describe a simple voltage controlled version <ref> [9] </ref> even though in higher speed circuits a current controlled methodology is more common. A phase detection circuit is used to decide whether the internal clock is behind or ahead of the external clock and produces a ChargeAdd or ChargeRemove signal accordingly.
Reference: [10] <author> P. Beerel and T. Meng. </author> <title> Semi-Modularity and Self-Diagnostic Asynchronous Control Circuits. </title> <editor> In Carlo H. Sequin, editor, </editor> <booktitle> Proceedings of the 1991 University of California/Santa Cruz Conference, </booktitle> <pages> pages 103-117. </pages> <publisher> The MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: However, the testing of asynchronous circuits is complicated by their special design constraints. For example, asynchronous circuits may use redundant logic to eliminate hazards, but redundant logic makes testing more difficult. Initial results on the testing of speed-independent circuits include work by Beerel and Meng <ref> [10] </ref> and Martin and Hazewindus [124]. These papers indicate that certain classes of speed-independent 41 circuits are "self-testing" with respect to stuck-at faults, where certain faults will cause the circuit to halt. Beerel and Meng generalized their approach to handle stuck-at faults in timed control circuits [13].
Reference: [11] <author> P.A. Beerel, J. Burch, and T. Meng. </author> <title> Efficient verification of determinate speed-independent circuits. </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 261-267. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1993. </year>
Reference-contexts: These sets are compared using a formal relation called conformance, which defines precisely when an implementation meets its specification. Dill has uncovered bugs in published circuits using the verifier. More efficient algorithms for approximate verification (allowing occasional false negatives) have been developed by Beerel et al. <ref> [11] </ref>. Dill's verifier effectively checks for safety violations (where a design has incorrect behavior), but does not check for liveness violations (where a design has deadlock or livelock). Dill also introduced a theory of complete trace structures [58], based on Buchi automata, which can model general liveness properties.
Reference: [12] <author> P.A. Beerel and T. Meng. </author> <title> Automatic gate-level synthesis of speed-independent circuits. </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 581-586. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: SI circuits were introduced by David Muller in the 1950's (see [132]). Muller's formulation only considered deterministic input and output behavior. This class has recently been extended to include circuits with a limited form of non-determinism <ref> [12, 100] </ref>. A self-timed circuit, described by Seitz [129], contains a group of self-timed "elements". Each element is contained in an "equipotential region", where wires have negligible or well-bounded delay. <p> Sutherland and Sproull have introduced a notation for composite Petri nets called "snippets". Others allow timing constraints for specification and synthesis, using a related Event-Rule formalism [141]. In addition, some researchers are using state graphs for specifications, as an alternative to Petri nets <ref> [217, 12, 100] </ref>. State graphs allow the direct specification of interleaved behavior, avoiding some of the structural complexity of Petri nets. The target designs are usually speed-independent gate-level implementations. Originally, this work focused on determinate specifications, having no input or output choice, based on Muller's semi-modular lattice formulations (see [132]). <p> Several speed-independent synthesis methods have been developed, which insure hazard-freedom at the gate-level. Much of this work has been pursued by Kishinevsky, Kondratyev, Taubin and Var-shavsky [97, 217], by Beerel and Meng <ref> [12] </ref>, and by Cortadella, Lavagno, Lin, Vanbekbergen, Yakovlev and others [100, 44]. These methods have been effectively applied to a number of designs.
Reference: [13] <author> P.A. Beerel and T. H.-Y. Meng. </author> <title> Testability of asynchronous timed control circuits with delay assumptions. </title> <booktitle> In Proceedings of the 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 446-451. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1991. </year>
Reference-contexts: These papers indicate that certain classes of speed-independent 41 circuits are "self-testing" with respect to stuck-at faults, where certain faults will cause the circuit to halt. Beerel and Meng generalized their approach to handle stuck-at faults in timed control circuits <ref> [13] </ref>. A general synthesis-for-testability method was proposed by Keutzer, Lavagno and Sangiovanni-Vincentelli [93] which considers both stuck-at and path-delay faults in combinational circuits. The method uses algebraic transformations to produce hazard-free and fully-testable multi-level logic.
Reference: [14] <author> P.A. Beerel, K.Y. Yun, and W.C. Chou. </author> <title> Optimizing average-case delay in technology mapping of burst-mode circuits. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async96), </booktitle> <pages> pages 244-260. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1996. </year> <month> 44 </month>
Reference-contexts: These transformations transform a hazard-free two-level circuit into a hazard-free multi-level circuit. Alternatively, a hazard-free multi-level circuit can be synthesized directly, using binary decision diagrams (BDDs) [110]. Other algorithms have been developed for the hazard-free technology mapping of circuits to arbitrary cell libraries <ref> [191, 102, 14] </ref>. 4.3.4 An Alternative View of Hazards The above discussion follows a classical framework, focusing on combinational hazards separately from sequential hazards. This distinction has been quite useful for synthesis of asynchronous state machines. However, for other synthesis styles, a uniform treatment of hazards is more natural. <p> A number of CAD optimization algorithms have been developed, which have been used in burst-mode synthesis. These include: optimal state assignment [68]; hazard-free 2-level logic minimization, both exact (hfmin [153, 68]) and heuristic (espresso-hf [202]); hazard-free multi-level logic optimization [103, 110]; and hazard non-increasing technology mapping <ref> [191, 102, 14] </ref>, which enables more modern standard cell methodologies to be utilized. Davis, Marshall, Coates and Siegel [117] have built a CAD framework to incorporate all of the burst-mode synthesis methods. The framework includes tools for simulation and layout as well.
Reference: [15] <author> J. Beister. </author> <title> A unified approach to combinational hazards. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-23(6):566-575, </volume> <month> June </month> <year> 1974. </year>
Reference-contexts: A solution to this problem was proposed by Beister <ref> [15] </ref>: product A 0 D 0 is reduced to a smaller product A 0 B 0 D 0 which no longer intersects the transition. Note that this product is non-prime. The final cover is shown in Figure 6 (b).
Reference: [16] <author> W. Belluomini and C.J. Myers. </author> <title> Efficient timing analysis algorithms for timed state space exploration. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async97). </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1997. </year>
Reference-contexts: The worst-case complexity of the algorithms is actually worse than discrete methods, but it has been shown that the region based approach works well in practice <ref> [174, 143, 16] </ref>. The method is automated in a tool called ATACS, which has been used to design a number of practical circuits.
Reference: [17] <author> I. Benko and J.C. Ebergen. </author> <title> Delay-insensitive solutions to the committee problem. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async94), </booktitle> <pages> pages 228-237. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: Using techniques for delay-insensitive decomposition, this command can be decomposed into a network of 2 toggles and 1 merge which implements equivalent behavior, as shown in Figure 15. Ebergen has applied his decomposition method to a number of designs, including modulo-n counters, stacks, committee schedulers <ref> [17] </ref> and token ring arbiters. A related algebraic approach was proposed by Udding and Josephs [205, 91]. Their method is based on a delay-insensitive algebra which formally characterizes a delay-insensitive system. Using axioms and lemmas, a specification is transformed into a provably correct delay-insensitive circuit.
Reference: [18] <author> G. Birtwistle and Y. Liu. </author> <title> Specification of the Manchester Amulet 1: Top level Specification. </title> <institution> Computer Science Department Technical Report, University of Calgary, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: CCS has been successfully used for the specification of several asynchronous designs, including a token ring arbiter and SCSI controller. Specifications can then be checked for deadlock, safety and liveness properties using a modal logic. A substantial specification has been developed for the AMULET processor <ref> [18] </ref>, with detailed models for the different instruction classes. The above verification techniques handle SI and DI circuits and protocols, and therefore are not concerned with timing. However, timing is critical for the analysis and verification of many asynchronous systems.
Reference: [19] <author> J.G. Bredeson. </author> <title> Synthesis of multiple-input change hazard-free combinational switching circuits without feedback. </title> <journal> International Journal of Electronics (GB), </journal> <volume> 39(6) </volume> <pages> 615-624, </pages> <month> December </month> <year> 1975. </year>
Reference-contexts: A heuristic hazard-free two-level minimization algorithm has also been developed [202]. There is a rich literature on multi-level hazard-free circuits as well, and several synthesis methods have been proposed. One approach is to start with a hazard-free circuit (for example, a two-level circuit), and apply hazard-non-increasing multi-level transformations <ref> [206, 19, 103] </ref>. These transformations transform a hazard-free two-level circuit into a hazard-free multi-level circuit. Alternatively, a hazard-free multi-level circuit can be synthesized directly, using binary decision diagrams (BDDs) [110].
Reference: [20] <author> J.G. Bredeson and P.T. Hulina. </author> <title> Elimination of static and dynamic hazards for multiple input changes in combinational switching circuits. </title> <journal> Information and Control, </journal> <volume> 20 </volume> <pages> 114-224, </pages> <year> 1972. </year>
Reference-contexts: This phenomenon is apparent in the Karnaugh map: product A 0 D 0 intersects the transition from ABCD : 0111 ! 1110, but intersects neither the start point (ABCD = 0111) nor the end point (ABCD = 1110) of the transition <ref> [20] </ref>. A solution to this problem was proposed by Beister [15]: product A 0 D 0 is reduced to a smaller product A 0 B 0 D 0 which no longer intersects the transition. Note that this product is non-prime. The final cover is shown in Figure 6 (b).
Reference: [21] <author> E. Brunvand. </author> <title> Translating concurrent communicating programs into asynchronous circuits. </title> <type> Technical Report CMU-CS-91-198, </type> <institution> Carnegie Mellon University, </institution> <year> 1991. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: In each approach, handshaking components are clustered, formally specified as a single block, then resynthesized using STG techniques. A different approach has been proposed, which uses burst-mode techniques for the resynthesis step [78]. Brunvand and Sproull <ref> [21, 23] </ref> introduced an alternative compiler using occam specifications. Unlike the approaches of Martin and van Berkel, communication between processes is through two-phase handshaking, or transition-signaling. In their method, an occam specification is first compiled 33 into an unoptimized circuit using syntax-directed translation.
Reference: [22] <author> E. Brunvand. </author> <title> The NSR processor. </title> <booktitle> In Proceedings of the Twenty-Sixth Annual Hawaii International Conference on System Sciences, </booktitle> <volume> volume I, </volume> <pages> pages 428-435. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1993. </year>
Reference-contexts: The architecture is based on a novel looped micropipeline, which 39 synchronizes instructions and data flowing in opposite directions. The processor makes careful use of arbiters to regulate the synchronization. Brunvand developed the NSR RISC microprocessor <ref> [22] </ref> at the University of Utah, using transition-signaling for control, bundled data, and a micropipelined datapath. The NSR was implemented using commercially available FPGA technology.
Reference: [23] <author> E. Brunvand and R. F. Sproull. </author> <title> Translating concurrent programs into delay-insensitive circuits. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 262-265. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1989. </year>
Reference-contexts: This project created a digital "Lego" kit of modules. These modules could (and were) rapidly used to configure special-purpose computing engines, as well as general-purpose computers. The project took a significant step forward and provided a sound foundation for the numerous macromodular synthesis approaches being investigated today <ref> [23, 210, 61] </ref>. Yet another noteworthy pioneer was Chuck Seitz, whose MIT dissertation [186] introduced a Petri Net like formalism which proved to be extremely useful in the design and analysis of asynchronous circuits. In his subsequent academic career, Prof. <p> In each approach, handshaking components are clustered, formally specified as a single block, then resynthesized using STG techniques. A different approach has been proposed, which uses burst-mode techniques for the resynthesis step [78]. Brunvand and Sproull <ref> [21, 23] </ref> introduced an alternative compiler using occam specifications. Unlike the approaches of Martin and van Berkel, communication between processes is through two-phase handshaking, or transition-signaling. In their method, an occam specification is first compiled 33 into an unoptimized circuit using syntax-directed translation.
Reference: [24] <author> J.A. Brzozowski and J.C. Ebergen. </author> <title> Recent developments in the design of asynchronous circuits. </title> <type> Technical Report CS-89-18, </type> <institution> University of Waterloo, Computer Science Department, </institution> <year> 1989. </year>
Reference-contexts: The circuit and environment together form a closed system, called a complete circuit (see Muller in [132]). If the environment is allowed to respond to a circuit's outputs without any timing constraints, the two interact in input/output mode <ref> [24] </ref>. Otherwise, environmental timing constraints are assumed. The most common example is fundamental mode [126, 206] where the environment must wait for a circuit to stabilize before responding to circuit outputs. <p> The use of the C-elements in the arbiter prevents another pending request from passing through the arbiter until after the active request cycle has cleared. Two cycle arbitration is somewhat more complex, since the inputs of the arbiter may race in all possible combinations of signal trajectories. Ebergen <ref> [24] </ref>, for example, has reported on a particular 2-cycle arbiter known as the RGD (Request, Grant, Done) arbiter. Another interesting arbitration problem was posed by Davis and Stevens during the development of the Post Office chip [52].
Reference: [25] <author> J.A. Brzozowski and J.C. Ebergen. </author> <title> On the delay-sensitivity of gate networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 41(11) </volume> <pages> 1349-1360, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: The class of DI circuits built out of simple gates and operators is quite limited. In fact, it has been proven that almost no useful DI circuits can be built if one is restricted to a class of simple gates and operators <ref> [121, 25] </ref>. However, many practical DI circuits can be built if one allows more complex components [61, 91]. A complex component is constructed out of several simple gates. Internal to the component, timing assumptions must be satisfied; externally, the component operates in a delay-insensitive manner.
Reference: [26] <author> S. M. Burns. </author> <title> Automated compilation of concurrent programs into self-timed circuits. </title> <type> Technical Report Caltech-CS-TR-88-2, </type> <institution> California Institute of Technology, </institution> <year> 1987. </year> <title> M.S. </title> <type> Thesis. </type>
Reference-contexts: In most designs, a four-phase handshaking protocol is used (step (ii)), although two-phase handshaking can be used as well. Martin's synthesis method has been automated by Burns <ref> [29, 26] </ref> and applied to many substantial examples, including a distributed mutual exclusion element [119, 26], a stack [122], and a multiply-accumulate unit [145]. <p> In most designs, a four-phase handshaking protocol is used (step (ii)), although two-phase handshaking can be used as well. Martin's synthesis method has been automated by Burns [29, 26] and applied to many substantial examples, including a distributed mutual exclusion element <ref> [119, 26] </ref>, a stack [122], and a multiply-accumulate unit [145].
Reference: [27] <author> S.M. Burns. </author> <title> Performance analysis and optimization of asynchronous circuits. </title> <type> Technical Report Caltech-CS-TR-91-01, </type> <institution> California Institute of Technology, </institution> <year> 1991. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: A C-element is such a component and other examples of DI designs using complex components are described in Section 6.4; see Figure 15. A quasi-delay-insensitive (quasi-DI or QDI) circuit is delay-insensitive except that "isochronic forks" are required <ref> [27] </ref>. An isochronic fork is a forked wire where all branches have exactly the same delay. In other formulations, a bounded skew is allowed between the different branches of each fork. In contrast, in a DI circuit, delays on the different fork branches are completely independent, and may vary considerably. <p> Martin's synthesis method has been automated by Burns [29, 26] and applied to many substantial examples, including a distributed mutual exclusion element [119, 26], a stack [122], and a multiply-accumulate unit [145]. The compiler includes algorithms for optimal transistor sizing <ref> [27] </ref>. (Designs for other datapath components, and for a microprocessor, using this method are described in the next two sections.) Martin's work has been extended by Akella and Gopalakrishnan in a system called SHILPA [4]. This method allows global shared variables, and uses flow analysis techniques to optimize resource allocation. <p> Timing analysis and verification methods for asynchronous state machines with bounded delays were developed by Devadas et al. [57] and Chakraborty et al. [31, 30]. Methods using Timed Petri Nets have been developed by Rokicki [173], Semenov et al. [187] and Verlind et al. [219]. Williams [220] and Burns <ref> [27] </ref> have introduced methods to analyze the performance of systems. A notion of timing-reliability was proposed by Kuwako and Nanya [104]. Timing and hazard analysis tools have been developed by Ashkinazy et al. [7].
Reference: [28] <author> S.M. Burns. </author> <title> General condition for the decomposition of state holding elements. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async96), </booktitle> <pages> pages 48-57. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: A general asynchronous CAD system, including speed-independent tools, has also been developed at IMEC Laboratory [225]. A comprehensive solution to the problem of hazard-free decomposition complex-gates into simpler gates, under a speed-independent model, has been developed by Burns <ref> [28] </ref>. 6.4 Transformation Methods While STG-based methods view computation as partially-ordered sequences of events, a different approach is to view an asynchronous system as a collection of communicating processes. A system is specified as a program in a high-level language of concurrency.
Reference: [29] <author> S.M. Burns and A.J. Martin. </author> <title> Syntax-directed translation of concurrent programs into self-timed circuits. </title> <editor> In J. Allen and T.F. Leighton, editors, </editor> <booktitle> Advanced Research in VLSI: Proceedings of the Fifth MIT Conference, </booktitle> <pages> pages 35-50. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1988. </year>
Reference-contexts: In most designs, a four-phase handshaking protocol is used (step (ii)), although two-phase handshaking can be used as well. Martin's synthesis method has been automated by Burns <ref> [29, 26] </ref> and applied to many substantial examples, including a distributed mutual exclusion element [119, 26], a stack [122], and a multiply-accumulate unit [145].
Reference: [30] <author> S. Chakraborty and D.L. Dill. </author> <title> More accurate polynomial-time min-max timing simulation. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async97). </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1997. </year>
Reference-contexts: However, timing is critical for the analysis and verification of many asynchronous systems. A general model for timed systems was introduced by Alur and Dill [5]. Timing analysis and verification methods for asynchronous state machines with bounded delays were developed by Devadas et al. [57] and Chakraborty et al. <ref> [31, 30] </ref>. Methods using Timed Petri Nets have been developed by Rokicki [173], Semenov et al. [187] and Verlind et al. [219]. Williams [220] and Burns [27] have introduced methods to analyze the performance of systems. A notion of timing-reliability was proposed by Kuwako and Nanya [104].
Reference: [31] <author> S. Chakraborty, D.L. Dill, K.-Y. Chang, and K.Y. Yun. </author> <title> Timing analysis for extended burst-mode circuits. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async97). </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1997. </year> <month> 45 </month>
Reference-contexts: However, timing is critical for the analysis and verification of many asynchronous systems. A general model for timed systems was introduced by Alur and Dill [5]. Timing analysis and verification methods for asynchronous state machines with bounded delays were developed by Devadas et al. [57] and Chakraborty et al. <ref> [31, 30] </ref>. Methods using Timed Petri Nets have been developed by Rokicki [173], Semenov et al. [187] and Verlind et al. [219]. Williams [220] and Burns [27] have introduced methods to analyze the performance of systems. A notion of timing-reliability was proposed by Kuwako and Nanya [104].
Reference: [32] <author> S.T. Chakradhar, S. Banerjee, R.K. Roy, and D.K. Pradhan. </author> <title> Synthesis of initializable asynchronous circuits. </title> <journal> IEEE Transactions on VLSI Systems, </journal> <volume> 4(2) </volume> <pages> 254-262, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: An issue related to testing is initializability, which is the process of driving a circuit at power-up to a known state. Initializability is also often required by automatic test pattern generators. Two recent methods for asynchronous initializability have been developed <ref> [32, 192] </ref>. One interesting area of asynchronous circuit testing that is just beginning to be studied is the issue of hazards. Asynchronous circuits by nature often contain redundant logic to prevent hazards. This is a particularly problematic issue with respect to testing.
Reference: [33] <author> T. J. Chaney and C. E. Molnar. </author> <title> Anomalous Behaviour of Synchronizer and Arbiter Circuits. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-22(4):421-422, </volume> <year> 1973. </year>
Reference-contexts: Nondeterministic behavior will occur if this guarantee cannot be provided. Such mutually exclusive signal conditioning is usually provided by arbitration. Latches and flip-flops cannot be used for arbitration due to the inherent possibility that they may enter their metastable regions <ref> [34, 33] </ref>. Arbiter circuits are typically constructed to adhere to a particular signaling protocol and therefore vary somewhat. However all arbiters rely on a mutual exclusion, or ME element, to separate possible concurrent signal transitions. The ME element is essentially a latch with an analog metastability detector on its outputs. <p> The duration of metastability is unbounded but normally persists for a very short time. It has been experimentally confirmed <ref> [34, 33] </ref> that the metastability duration is an exponentially decaying probability which depends somewhat on the particular latch properties. The result is that in the case of a tie, exactly one side will win the arbitration. The additional implication is that the distinction of which side wins does not matter.
Reference: [34] <author> T.J. Chaney, S.M. Ornstein, and W.M. Littlefield. </author> <title> Beware the synchronizer. </title> <booktitle> In IEEE 6th International Computer Conference, </booktitle> <pages> pages 317-319, </pages> <year> 1972. </year>
Reference-contexts: The problem of combining synchronous systems is exacerbated when each module has a separate clock, each running at a different frequency. The effects of this problem are numerous and probabilistically involve some variant of metastability failure <ref> [34] </ref>. It is commonly accepted, although not definitively 5 proven to the authors' knowledge, that it is impossible to build a perfect synchronizer. Many of the sub-systems in today's computers run on clocks which are not synchronized with the CPU. A good example is the I/O subsystem. <p> Nondeterministic behavior will occur if this guarantee cannot be provided. Such mutually exclusive signal conditioning is usually provided by arbitration. Latches and flip-flops cannot be used for arbitration due to the inherent possibility that they may enter their metastable regions <ref> [34, 33] </ref>. Arbiter circuits are typically constructed to adhere to a particular signaling protocol and therefore vary somewhat. However all arbiters rely on a mutual exclusion, or ME element, to separate possible concurrent signal transitions. The ME element is essentially a latch with an analog metastability detector on its outputs. <p> The duration of metastability is unbounded but normally persists for a very short time. It has been experimentally confirmed <ref> [34, 33] </ref> that the metastability duration is an exponentially decaying probability which depends somewhat on the particular latch properties. The result is that in the case of a tie, exactly one side will win the arbitration. The additional implication is that the distinction of which side wins does not matter.
Reference: [35] <author> J.F. Chappel and S.G. </author> <title> Zaky. A delay-controlled phase-locked loop to reduce timing errors in synchronous/asynchronous communication links. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async94), </booktitle> <pages> pages 156-165. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: Other datapath research has focused on architectures and protocols for chip-to-chip communication, including recent methods by Greenstreet [80] and Roiene [172]. An architecture for communication between synchronous and asynchronous chips has been developed by Chappel et al. <ref> [35] </ref>. 6.7 Asynchronous Processor Design Perhaps the greatest challenge in large-scale asynchronous design to date has been to combine the techniques for asynchronous controller and datapath synthesis, and build asynchronous processors.
Reference: [36] <author> V. L. Chi. </author> <title> Salphasic Distribution of Clock Signals for Synchronous Systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 43(5) </volume> <pages> 597-602, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: New approaches will be necessary or performance will be adversely affected. A similar skew problem exists for circuit boards as well as chips. The literature contains an abundance of methods for de-skewing clocks <ref> [2, 36] </ref> on a board but most of them are also costly in either area or complexity, and some will probably not be robust enough for use in commercial circuits. An interesting example is the Monarch [168] processor chip which used active signal selection on each 4 input pad.
Reference: [37] <author> J.-S. Chiang and D. Radhakrishnan. </author> <title> Hazard-free design of mixed operating mode asynchronous sequential circuits. </title> <journal> International Journal of Electronics, </journal> <volume> 68(1) </volume> <pages> 23-37, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Both SIC [82, 201] and MIC [3, 41, 169, 208] self-synchronized machines have been proposed. In a related approach, the local clock is replaced by an explicit external completion signal [105]. Other researchers have developed hybrid mixed-operation 23 mode machines <ref> [224, 37] </ref>. Self-synchronized machines tend to have a simpler construction but a greater overhead than Huffman machines. In general, asynchronous state machines offer a number of attractive features. First, input-to-output latency is often low: if no delays are added to inputs or outputs, the delay is combinational.
Reference: [38] <author> T.-A. Chu. </author> <title> Synthesis of self-timed vlsi circuits from graph-theoretic specifications. </title> <type> Technical Report MIT-LCS-TR-393, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1987. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: Examples include Seitz's M-Nets [185] and Rosenblum and Yakovlev's Signal Graphs [179]. Vanbekbergen et al. [215] introduced the notion of a lock class to synthesize designs from marked graphs. More general classes of Petri nets include Molnar et al.'s I-Nets [134] and Chu's Signal Transition Graphs or STGs <ref> [38, 39] </ref>. These nets allow both concurrency and a limited form of choice. Chu developed a synthesis method which transforms an STG into a speed-independent circuit, and applied the method to a number of examples, such as an A-to-D controller and a resource locking module. <p> Several extensions have been proposed to describe more general behavior than is possible with the original STG's. These include the use of "epsilon" and "dummy" transitions <ref> [38] </ref>, "don't-care" and "toggle" transitions [136], OR-causality [223] and semaphore transitions [46]. Sutherland and Sproull have introduced a notation for composite Petri nets called "snippets". Others allow timing constraints for specification and synthesis, using a related Event-Rule formalism [141].
Reference: [39] <author> T.-A. Chu. </author> <title> Automatic synthesis and verification of hazard-free control circuits from asynchronous finite state machine specifications. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pages 407-413. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: Examples include Seitz's M-Nets [185] and Rosenblum and Yakovlev's Signal Graphs [179]. Vanbekbergen et al. [215] introduced the notion of a lock class to synthesize designs from marked graphs. More general classes of Petri nets include Molnar et al.'s I-Nets [134] and Chu's Signal Transition Graphs or STGs <ref> [38, 39] </ref>. These nets allow both concurrency and a limited form of choice. Chu developed a synthesis method which transforms an STG into a speed-independent circuit, and applied the method to a number of examples, such as an A-to-D controller and a resource locking module.
Reference: [40] <author> T.-A. Chu, N. Mani, and C.K.C. Leung. </author> <title> An efficient critical race-free state assignment technique for asynchronous finite state machines. </title> <booktitle> In Proceedings of the 30th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 2-6. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1993. </year>
Reference-contexts: Originally, this work focused on determinate specifications, having no input or output choice, based on Muller's semi-modular lattice formulations (see [132]). More recent research allows generalized behavior with choice. A number of optimized synthesis algorithms have been developed. Lavagno et al. [107], Van-bekbergen et al. [216], Chu et al. <ref> [40] </ref> and Puri and Gu [165] have each developed algorithms for state minimization and state assignment from STG specifications. A partitioning algorithm for STG-based specifications was proposed by Puri and Gu [166].
Reference: [41] <author> H.Y.H. Chuang and S. Das. </author> <title> Synthesis of multiple-input change asynchronous machines using controlled excitation and flip-flops. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-22(12):1103-1109, </volume> <month> December </month> <year> 1973. </year>
Reference-contexts: Unlike a synchronous design, the clock is aperiodic, being generated as needed for the given computations. A block diagram of a self-synchronized machine is shown in Figure 11. Both SIC [82, 201] and MIC <ref> [3, 41, 169, 208] </ref> self-synchronized machines have been proposed. In a related approach, the local clock is replaced by an explicit external completion signal [105]. Other researchers have developed hybrid mixed-operation 23 mode machines [224, 37].
Reference: [42] <editor> W.A. Clark. </editor> <booktitle> Macromodular computer systems. In Proceedings of the Spring Joint Computer Conference, AFIPS, </booktitle> <month> April </month> <year> 1967. </year>
Reference-contexts: That is, an unbounded gate and wire delay model is assumed. The concept of a delay-insensitive circuit grows out of work by Clark and Molnar in the 1960's on Macromodules <ref> [42] </ref>. 1 DI systems have been formalized by Udding [205] and Dill [58]. The class of DI circuits built out of simple gates and operators is quite limited. <p> For example, the subsequent work of both of these authors was heavily influenced by Unger's work. Additionally, several early mainframe computers were constructed as entirely asynchronous systems, notably the MU-5 and Atlas computers. Another noteworthy effort, the Macromodule Project <ref> [42] </ref>, conducted at Washington University in St. Louis, provided an early demonstration of the composition benefits of asynchronous circuit modules. This project created a digital "Lego" kit of modules. These modules could (and were) rapidly used to configure special-purpose computing engines, as well as general-purpose computers.
Reference: [43] <author> F. Commoner, A. Holt, S. Even, and A. Pnueli. </author> <title> Marked directed graphs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 5(5) </volume> <pages> 511-523, </pages> <month> October </month> <year> 1971. </year>
Reference-contexts: Using reachability analysis, the Petri net is typically transformed into a state graph, which describes the explicit sequencing behavior of the net. An asynchronous circuit is then derived from the state graph. Several approaches use a constrained class of Petri net called a marked graph <ref> [43] </ref>. Marked graphs 27 are used to model concurrency, but not choice. That is, a marked graph cannot model that one of several possible inputs (or outputs) may change in some state. Examples include Seitz's M-Nets [185] and Rosenblum and Yakovlev's Signal Graphs [179].
Reference: [44] <author> J. Cortadella, M. Kishinevsky, A. Kondratyev, L. Lavagno, and A. Yakovlev. </author> <title> Complete state encoding based on the theory of regions. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async96), </booktitle> <pages> pages 36-47. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: More recently, the theory of regions has been used as a powerful tool in developing efficient STG algorithms, including state minimization and assignment (see Cortadella et al. <ref> [44, 45] </ref>). A region is a set of states in the state graph corresponding to a place in the associated STG. The theory of regions allows synthesis steps to be performed directly on the STG, without the need to generate a complete state graph. <p> Several speed-independent synthesis methods have been developed, which insure hazard-freedom at the gate-level. Much of this work has been pursued by Kishinevsky, Kondratyev, Taubin and Var-shavsky [97, 217], by Beerel and Meng [12], and by Cortadella, Lavagno, Lin, Vanbekbergen, Yakovlev and others <ref> [100, 44] </ref>. These methods have been effectively applied to a number of designs. The sustained research effort of Kishinevsky et al., pursued over many years in Russia and Japan, has been especially noteworthy, resulting in a collection of algorithms and tools which are making SI design practical.
Reference: [45] <author> J. Cortadella, M. Kishinevsky, A. Kondratyev, L. Lavagno, and A. Yakovlev. </author> <title> Methodology and tools for state encoding in asynchronous circuit synthesis. </title> <booktitle> In 33rd ACM/IEEE Design Automation Conference, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: More recently, the theory of regions has been used as a powerful tool in developing efficient STG algorithms, including state minimization and assignment (see Cortadella et al. <ref> [44, 45] </ref>). A region is a set of states in the state graph corresponding to a place in the associated STG. The theory of regions allows synthesis steps to be performed directly on the STG, without the need to generate a complete state graph.
Reference: [46] <author> J. Cortadella, L. Lavagno, P. Vanbekbergen, and A. Yakovlev. </author> <title> Designing asynchronous circuits from behavioural specifications with internal conflicts. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async94), </booktitle> <pages> pages 106-115. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: Several extensions have been proposed to describe more general behavior than is possible with the original STG's. These include the use of "epsilon" and "dummy" transitions [38], "don't-care" and "toggle" transitions [136], OR-causality [223] and semaphore transitions <ref> [46] </ref>. Sutherland and Sproull have introduced a notation for composite Petri nets called "snippets". Others allow timing constraints for specification and synthesis, using a related Event-Rule formalism [141]. In addition, some researchers are using state graphs for specifications, as an alternative to Petri nets [217, 12, 100].
Reference: [47] <author> I. David, R. Ginosar, and M. Yoeli. </author> <title> Self-timed implementation of a reduced instruction set computer. </title> <type> Technical Report 732, </type> <institution> Technion and Israel Institute of Technology, </institution> <month> October </month> <year> 1989. </year> <month> 46 </month>
Reference-contexts: Fred was an architectural study and therefore was not actually fabricated. Other micropipelined-based RISC designs have been proposed by David et al. <ref> [47] </ref> and Ginosar and Michell [75]. A delay-insensitive microprocessor, TITAC, has been developed by Nanya et al. at Tokyo Institute of Technology [144]. The designers introduce several optimizations to improve performance. A different approach was proposed by Unger at Columbia University [209].
Reference: [48] <author> A. Davis, B. Coates, and K. Stevens. </author> <title> Automatic synthesis of fast compact self-timed control circuits. </title> <booktitle> In 1993 IFIP Working Conference on Asynchronous Design Methodologies (Manchester, </booktitle> <address> England), </address> <year> 1993. </year>
Reference-contexts: The result is an asynchronous pipeline structure similar to synchronous pipeline circuits. The goal of all pipeline circuits is the increase in throughput performance. Still, most designers would agree that both 2- and 4-cycle protocols have advantages over the other in particular circuits. Certain design styles <ref> [48] </ref> and designs [199] show that the 2-cycle protocols can coexist in the same system, albeit on different interfaces. <p> As a result, these machines could operate more flexibly in a concurrent environment. More recently, Davis, Coates and Stevens implemented this approach in the MEAT synthesis system at Hewlett-Packard Laboratories <ref> [48] </ref>. The synthesis method was applied to the design of controllers for the Post Office routing chip for the Mayfly project. However, although it produced high-performance implementations, it relied on a verifier to insure hazard-free designs. An example of a burst-mode specification is shown in Figure 12.
Reference: [49] <author> A.L. Davis. </author> <title> The architecture and system method of DDM-1: A recursively-structured data driven machine. </title> <booktitle> In Proc. Fifth Annual Symposium on Computer Architecture, </booktitle> <year> 1978. </year>
Reference-contexts: Strictly speaking these handshake signals are independent of any global system time and are only concerned with the local relative temporal relationships between two subsystems sharing a common interface. The resulting computational model is very much like the dataflow model <ref> [49, 1] </ref>, where the arrival of the necessary operand data triggers an operation. Similarly there is a concept of a sender of information and a corresponding receiver. <p> The idea was originally suggested by Chuck Seitz and was used during the construction of the first dataflow computer, DDM1 <ref> [49] </ref>. This technique works well when the size of the module is large, but when the module is small, the additional logic required for the internal clock generator represents an overhead that is too costly. <p> Seitz taught numerous courses at the University of Utah and then later at CalTech where he infected a large number of students with what proved to be an incurable interest in asynchronous circuits. His influence directly resulted in the asynchronous implementation of the first operational dataflow computer <ref> [49] </ref> and the first commercial graphics system, the Evans & Sutherland LDS-1. Professor Seitz's role as an educator is also significant in that his courses on asynchronous circuits, starting as early as 1970, inspired many of the field's current researchers.
Reference: [50] <author> A.L. Davis. </author> <title> A data-driven machine architecture suitable for VLSI implementation. </title> <editor> In C.L. Seitz, editor, </editor> <booktitle> Proceedings of the Caltech Conference on Very Large Scale Integration, </booktitle> <pages> pages 479-494, </pages> <month> January </month> <year> 1979. </year>
Reference-contexts: These specifications were introduced to allow more much more concurrency than traditional SIC machines, and therefore to be more effective in building concurrent systems. At the same time, burst-mode implementations are guaranteed hazard-free, while maintaining high-performance. Burst-mode specifications are based on the work of Davis on the DDM Machine <ref> [50] </ref>. In this dataflow machine, Davis used state machines which would wait for a collection of input changes ("input burst"), and then respond with a collection of output changes ("output burst").
Reference: [51] <author> Al Davis. </author> <title> Synthesizing Asynchronous Circuits: Practice and Experience. </title> <booktitle> In Asynchronous Digital Circuit Design, </booktitle> <pages> pages 104-150, </pages> <year> 1995. </year>
Reference-contexts: Several versions of this NACK'ing arbiter have been designed. The version used in the Post Office design used 4 ME elements <ref> [51] </ref>. Each ME element resolved one of the 4 possible race trajectories. The remaining protocol control was provided by an asynchronous finite state machine. Arbiters for more than 2 inputs allow numerous implementation options.
Reference: [52] <author> A.L. Davis, B. Coates, and K. Stevens. </author> <title> The post office experience: Designing a large asynchronous chip. </title> <booktitle> In Proceedings of the Twenty-Sixth Annual Hawaii International Conference on System Sciences, </booktitle> <volume> volume I, </volume> <pages> pages 409-418. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1993. </year>
Reference-contexts: Ebergen [24], for example, has reported on a particular 2-cycle arbiter known as the RGD (Request, Grant, Done) arbiter. Another interesting arbitration problem was posed by Davis and Stevens during the development of the Post Office chip <ref> [52] </ref>. One potential performance difficulty with asynchronous signaling protocols is that waiting for the next event is the normal mode of operation. Hence if two requesters want to share some resource, the loser must wait until the winner is finished before access to that resource can be granted. <p> Another approach is to use redundant ME elements to provide mutually exclusive assertion of 1 of the N input signals. This approach was also used by Ken Stevens in the design of the Post Office chip <ref> [52] </ref>, and several variants of 19 the multiple ME element theme have been investigated by Charles Molnar at Sun Laboratories for the counterflow pipeline processor [195]. Perhaps some of the best work on cascaded arbiters and nacking arbiters has been performed by Robert Shapiro and Hartmann Genrich [190, 189].
Reference: [53] <author> P. Day and J.V. Woods. </author> <title> Investigation into micropipeline latch design styles. </title> <journal> IEEE Transactions on VLSI Systems, </journal> <volume> 3(2) </volume> <pages> 264-272, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Research on asynchronous pipelines and datapaths is now proceeding in many directions. Several new asynchronous pipelining schemes have been proposed. Some emphasize low-power [65, 72] while others emphasize high-performance <ref> [53, 228, 72, 135] </ref>. In addition, several generalizations to asynchronous pipeline structures have been proposed: rings [220], multi-rings [194] and 2-dimensional micropipelines [76]. Techniques to reduce the communication overhead between stages have been developed [220, 55, 79].
Reference: [54] <author> M.E. Dean. </author> <title> STRiP: A self-timed RISC processor architecture. </title> <type> Technical report, </type> <institution> Stanford University, </institution> <year> 1992. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: Yet, for very large circuits, such as microprocessors, balancing all the timing constraints of a large computational space to minimize the difference between the worst and average case timing models is a difficult task. The work by Mark Dean on the STRiP processor <ref> [54] </ref> provides an interesting example. Dean showed that even a well-balanced and well-designed processor such as the MIPS-X CPU could be sped up if the instruction set were split into three classes, and the clock period adjusted appropriately to match the temporal needs of each class. <p> His "computers without clocks" use traditional asynchronous state machines for control logic, and a building block approach to design rather than compilation schemes. This approach requires a spectrum of timing assumptions to insure correct designs. Finally, Dean's STRiP (self-timed RISC) processor at Stanford University combines synchronous and asynchronous features <ref> [54] </ref>. The design uses synchronous functional units in a globally-clocked pipeline. However, the clock rate may change dynamically based on the current contents of the pipeline, using a technique called dynamic clocking. The clock also is suspended during off-chip operations, such as input/output or access to a second-level cache.
Reference: [55] <author> M.E. Dean, D.L. Dill, and M. Horowitz. </author> <title> Self-timed logic using current-sensing completion detection (CSCD). </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Design. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: Note that this technique will only work directly in a 4-cycle signaling protocol. If used with a 2-cycle protocol, additional logic such as a T flip-flop will be required. A novel technique was proposed by Mark Dean <ref> [55] </ref> where completion detection was performed by observing the power consumption of the circuit. <p> Some emphasize low-power [65, 72] while others emphasize high-performance [53, 228, 72, 135]. In addition, several generalizations to asynchronous pipeline structures have been proposed: rings [220], multi-rings [194] and 2-dimensional micropipelines [76]. Techniques to reduce the communication overhead between stages have been developed <ref> [220, 55, 79] </ref>. Liebchen and Gopalakrishnan have proposed a reordering pipeline [109] which allows the freezing and dynamic reordering of data within the pipe using "LockC" elements. Finally, low-power micropipeline structures have been introduced using adaptive scaling of supply voltage [146].
Reference: [56] <author> M.E. Dean, T.E. Williams, and D.L. Dill. </author> <title> Efficient self-timing with level-encoded 2-phase dual-rail (LEDR). </title> <editor> In Carlo Sequin, editor, </editor> <booktitle> Advanced Research in VLSI : Proceedings of the 1991 University of California Santa Cruz Conference, </booktitle> <pages> pages 55-70. </pages> <publisher> The MIT Press, </publisher> <year> 1991. </year> <note> ISBN 0-262-19308-6. </note>
Reference-contexts: Concurrent transitions on both the left and right bits are illegal. Sending a 0 or a 1 must be followed by a transition on the acknowledge wire before another bit can be transmitted. Alternative encoding schemes have been proposed as well <ref> [218, 56] </ref>. Dual rail signaling is insensitive to the delays on any wire and therefore is more robust when assumptions like the bundling constraint cannot be guaranteed. The receiver will need to check for validity of all n-bits before using the data or asserting the acknowledge. <p> Williams [220], Martin [123] and van Berkel [211] have used 4-phase handshaking (the "return-to-zero" protocol) between stages. An alternative two-phase signaling scheme, called LEDR (level-encoded dual-rail), was introduced to combine advantages of both transition-signaling and four-phase <ref> [56] </ref>. Asynchronous pipelines have been designed for numerous applications: multiplication [200, 145], division [221], and DSP [211, 131]. The Williams and Horowitz self-timed divider [221] is especially impressive: the fabricated chip was twice as fast as comparable synchronous designs.
Reference: [57] <author> S. Devadas, K. Keutzer, S. Malik, and A. Wang. </author> <title> Verification of asynchronous interface circuits with bounded wire delays. </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 188-195. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: However, timing is critical for the analysis and verification of many asynchronous systems. A general model for timed systems was introduced by Alur and Dill [5]. Timing analysis and verification methods for asynchronous state machines with bounded delays were developed by Devadas et al. <ref> [57] </ref> and Chakraborty et al. [31, 30]. Methods using Timed Petri Nets have been developed by Rokicki [173], Semenov et al. [187] and Verlind et al. [219]. Williams [220] and Burns [27] have introduced methods to analyze the performance of systems.
Reference: [58] <author> D.L. Dill. </author> <title> Trace Theory for Automatic Hierarchical Verification of Speed-Independent Circuits. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1989. </year>
Reference-contexts: That is, an unbounded gate and wire delay model is assumed. The concept of a delay-insensitive circuit grows out of work by Clark and Molnar in the 1960's on Macromodules [42]. 1 DI systems have been formalized by Udding [205] and Dill <ref> [58] </ref>. The class of DI circuits built out of simple gates and operators is quite limited. In fact, it has been proven that almost no useful DI circuits can be built if one is restricted to a class of simple gates and operators [121, 25]. <p> As components are combined into a circuit, their composite behavior is formally determined. If a component may produce an output which cannot legally be accepted by another component, then a violation occurs. This notion has been formalized, in different contexts, as: computation interference [61], stability violation [122] and choking <ref> [58] </ref>. 17 5 Arbitration In order to avoid non-deterministic behavior, asynchronous circuits must be hazard-free under some circuit delay model. <p> The remaining protocol control was provided by an asynchronous finite state machine. Arbiters for more than 2 inputs allow numerous implementation options. The simplest case is to create a binary tree of 2-input arbiters of the appropriate size (see <ref> [58] </ref>) . The tree may be balanced or unbalanced. Balanced trees are fair in that they give equal priority to all of the leaf inputs. Unbalanced trees inherently provide higher priority for inputs which enter the structure closest to the root (in this case the output) of the arbitration tree. <p> Each trace describes one possible interleaved behavior of the system. The traces are combined into a set, which defines the observable 40 behavior of the system. Dill <ref> [58, 59] </ref> and Ebergen [62] have built effective verification tools for SI and DI circuits based on trace theory. In Dill's theory, an implementation and specification are each modeled by trace sets. <p> Dill's verifier effectively checks for safety violations (where a design has incorrect behavior), but does not check for liveness violations (where a design has deadlock or livelock). Dill also introduced a theory of complete trace structures <ref> [58] </ref>, based on Buchi automata, which can model general liveness properties. Although these general verification algorithms may be too expensive to apply in practice, a verifier has been developed for a constrained class of specifications [197].
Reference: [59] <author> D.L. Dill, </author> <title> S.M. Nowick, and R.F. Sproull. Specification and automatic verification of self-timed queues. </title> <booktitle> Formal Methods in System Design, </booktitle> <volume> 1(1) </volume> <pages> 29-60, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Each trace describes one possible interleaved behavior of the system. The traces are combined into a set, which defines the observable 40 behavior of the system. Dill <ref> [58, 59] </ref> and Ebergen [62] have built effective verification tools for SI and DI circuits based on trace theory. In Dill's theory, an implementation and specification are each modeled by trace sets.
Reference: [60] <author> D. W. Dobberpuhl and et al. </author> <title> A 200-MHz 64-bit Dual-issue CMOS Microprocessor. </title> <journal> Digital Technical Journal, </journal> <volume> 4(4) </volume> <pages> 35-50, </pages> <year> 1993. </year>
Reference-contexts: In order to keep clock skew to within 300 picoseconds, the Alpha's designers localized the clock buffering to minimize process induced variations and therefore the skew induced by the buffers. Details of the method can be found in <ref> [60] </ref> but the result is a clock driver circuit that occupies about 10% of the chip area, and consumes over 40% of the 30 watts of power dissipated by the chip. 19 mm 2 of area and over 12 watts of power is a very high price to pay for keeping
Reference: [61] <author> J.C. Ebergen. </author> <title> A formal approach to designing delay-insensitive circuits. </title> <journal> Distributed Computing, </journal> <volume> 5(3) </volume> <pages> 107-119, </pages> <year> 1991. </year>
Reference-contexts: In fact, it has been proven that almost no useful DI circuits can be built if one is restricted to a class of simple gates and operators [121, 25]. However, many practical DI circuits can be built if one allows more complex components <ref> [61, 91] </ref>. A complex component is constructed out of several simple gates. Internal to the component, timing assumptions must be satisfied; externally, the component operates in a delay-insensitive manner. <p> As components are combined into a circuit, their composite behavior is formally determined. If a component may produce an output which cannot legally be accepted by another component, then a violation occurs. This notion has been formalized, in different contexts, as: computation interference <ref> [61] </ref>, stability violation [122] and choking [58]. 17 5 Arbitration In order to avoid non-deterministic behavior, asynchronous circuits must be hazard-free under some circuit delay model. <p> This project created a digital "Lego" kit of modules. These modules could (and were) rapidly used to configure special-purpose computing engines, as well as general-purpose computers. The project took a significant step forward and provided a sound foundation for the numerous macromodular synthesis approaches being investigated today <ref> [23, 210, 61] </ref>. Yet another noteworthy pioneer was Chuck Seitz, whose MIT dissertation [186] introduced a Petri Net like formalism which proved to be extremely useful in the design and analysis of asynchronous circuits. In his subsequent academic career, Prof. <p> The program is then transformed, by a series of steps, into a low-level program which maps directly to a circuit. Such transformation methods use algebraic or compiler techniques to carry out the translation. Some of these methods treat datapath and control uniformly during synthesis. Ebergen <ref> [61] </ref> introduced a synthesis method for delay-insensitive circuits using specifications called commands. A command is a concise program notation to describe concurrent computation based on trace theory. <p> A command can be used to specify a complex circuit or system. The command is then decomposed in a series of steps into an equivalent network of components, using a "calculus of decomposition". As an example, a modulo-3 counter can be specified by the following command <ref> [61] </ref>: M OD3 = preffl [a?; q!; a?; q!; a?; p!] This command describes a counter with one input, a?, and two outputs, p! and q!. The counter receives 30 events on input a?.
Reference: [62] <author> J.C. Ebergen. </author> <title> A verifier for network decompositions of command-based specifications. </title> <booktitle> In Proceedings of the Twenty-Sixth Annual Hawaii International Conference on System Sciences, </booktitle> <volume> volume I, </volume> <pages> pages 310-318. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1993. </year>
Reference-contexts: Each trace describes one possible interleaved behavior of the system. The traces are combined into a set, which defines the observable 40 behavior of the system. Dill [58, 59] and Ebergen <ref> [62] </ref> have built effective verification tools for SI and DI circuits based on trace theory. In Dill's theory, an implementation and specification are each modeled by trace sets. These sets are compared using a formal relation called conformance, which defines precisely when an implementation meets its specification. <p> Although these general verification algorithms may be too expensive to apply in practice, a verifier has been developed for a constrained class of specifications [197]. Other methods use a restricted notion of liveness that can be easily checked <ref> [62, 77, 226] </ref>. A method which uses Signal Graphs for verification of properties of speed-independent circuits has been proposed by Kishinevsky et al. [96]. Another approach, by Kol, Ginosar and Samuel [98], uses state charts to verify both safety and liveness properties.
Reference: [63] <author> E.B. Eichelberger. </author> <title> Hazard detection in combinational and sequential switching circuits. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 9(2) </volume> <pages> 90-99, </pages> <year> 1965. </year>
Reference-contexts: If no glitches are possible, the transition is logic-hazard-free. Static-1 logic hazards (i.e., hazards during a 1 ! 1 transition) can be avoided in an AND-OR implementation by using an approach similar to the SIC case <ref> [63] </ref>. As an example, consider the Karnaugh map in Figure 5 (a). A minimum-cost sum-of-products realization is: f = C 0 D 0 + A 0 D 0 + BD. Consider the MIC transition from ABCD = 0100 to ABCD = 0111, indicated by an arrow. <p> The next problem is to eliminate static-0 logic hazards. These hazards are easily handled. In fact, it has been shown that, given any MIC 0 ! 0 transition which is already function-hazard-free, the transition is guaranteed to be free of logic hazards in any AND-OR implementation <ref> [63] </ref>. That is, no special care need be taken during 2-level synthesis to avoid static-0 logic hazards. A more difficult problem is to eliminate MIC dynamic logic hazards.
Reference: [64] <author> C. Farnsworth, D.A. Edwards, J. Liu, and S.S. Sikand. </author> <title> A hybrid asynchronous system design environment. </title> <booktitle> In Proceedings of the Working Conference on Asynchronous Design Methodologies, </booktitle> <pages> pages 91-98. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year> <month> 47 </month>
Reference-contexts: Finally, low-power micropipeline structures have been introduced using adaptive scaling of supply voltage [146]. While pipelining is fundamental to high-performance systems, sequencing is the basic control operation in low-performance non-pipelined systems. A number of sequencer designs have been proposed <ref> [122, 211, 209, 161, 8, 64, 164] </ref>. There has been much recent research on asynchronous datapaths, beyond the above work on pipelines and sequencers.
Reference: [65] <author> C. Farnsworth, D.A. Edwards, and S.S. Sikand. </author> <title> Utilising dynamic logic for low power consumption in asynchronous circuits. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async94), </booktitle> <pages> pages 186-194. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: The Williams and Horowitz self-timed divider [221] is especially impressive: the fabricated chip was twice as fast as comparable synchronous designs. Research on asynchronous pipelines and datapaths is now proceeding in many directions. Several new asynchronous pipelining schemes have been proposed. Some emphasize low-power <ref> [65, 72] </ref> while others emphasize high-performance [53, 228, 72, 135]. In addition, several generalizations to asynchronous pipeline structures have been proposed: rings [220], multi-rings [194] and 2-dimensional micropipelines [76]. Techniques to reduce the communication overhead between stages have been developed [220, 55, 79].
Reference: [66] <author> J. Frackowiak. </author> <title> Methoden der analyse und synthese von hasardarmen schaltnetzen mit minimalen kosten I. </title> <journal> Elektronische Informationsverarbeitung und Kybernetik, </journal> 10(2/3):149-187, 1974. 
Reference-contexts: These conditions suffice to eliminate any single MIC hazard. Unfortunately, when attempting to eliminate hazards for several MIC transitions simultaneously, these covering conditions may be unsatisfiable. That is, for a given set of MIC transitions, a hazard-free cover may not exist <ref> [206, 66, 153] </ref>. An exact hazard-free two-level minimization algorithm was developed by Nowick and Dill [153]. The algorithm finds an exactly minimum-cost cover which is hazard-free for a set of MIC transitions, if a solution exists. A heuristic hazard-free two-level minimization algorithm has also been developed [202].
Reference: [67] <author> A.D. Friedman and P.R. Menon. </author> <title> Synthesis of asynchronous sequential circuits with multiple-input changes. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-17(6):559-566, </volume> <month> June </month> <year> 1968. </year>
Reference-contexts: More formally, all inputs must change within some narrow time period, ffi. This constraint helps to simplify hazard elimination, which is still more complicated than in the SIC case. MIC designs were proposed by Friedman and Menon <ref> [67] </ref> and Mago [115]. These designs require the use of delays on inputs or outputs, special "delay boxes", and careful timing requirements. The usefulness of these designs in a concurrent environment is limited, since input changes are required to be near-simultaneous.
Reference: [68] <author> R.M. Fuhrer, B. Lin, and S.M. Nowick. </author> <title> Symbolic hazard-free minimization and encoding of asynchronous finite state machines. </title> <booktitle> In IEEE/ACM International Conference on Computer-Aided Design (ICCAD), </booktitle> <pages> pages 604-611, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: Finally, they developed a hazard-free 2-level minimization algorithm, which produces a minimum-cost hazard-free sum-of-products implementation [153]. The minimizer has been refined into a CAD package called hfmin <ref> [68] </ref>, which includes multi-output and multi-valued minimization and uses highly-optimized synchronous tools such as mincov [180] to solve substeps. A heuristic hazard-free minimizer, espresso-hf, 25 has also been developed [202]. Yun and Dill [229] later proposed an alternative implementation style for burst-mode machines, called a 3D machine. <p> A number of CAD optimization algorithms have been developed, which have been used in burst-mode synthesis. These include: optimal state assignment <ref> [68] </ref>; hazard-free 2-level logic minimization, both exact (hfmin [153, 68]) and heuristic (espresso-hf [202]); hazard-free multi-level logic optimization [103, 110]; and hazard non-increasing technology mapping [191, 102, 14], which enables more modern standard cell methodologies to be utilized. <p> A number of CAD optimization algorithms have been developed, which have been used in burst-mode synthesis. These include: optimal state assignment [68]; hazard-free 2-level logic minimization, both exact (hfmin <ref> [153, 68] </ref>) and heuristic (espresso-hf [202]); hazard-free multi-level logic optimization [103, 110]; and hazard non-increasing technology mapping [191, 102, 14], which enables more modern standard cell methodologies to be utilized. Davis, Marshall, Coates and Siegel [117] have built a CAD framework to incorporate all of the burst-mode synthesis methods. <p> Beerel and Yun have recently used burst-mode synthesis tools at Intel Corporation, including 3D [229, 230] and hfmin <ref> [153, 68] </ref>, to design of an experimental high-performance instruction decoder.
Reference: [69] <author> S. Furber, P. Day, J. Garside, N. Paver, and S. </author> <title> Temple. </title> <booktitle> Amulet2e. In EMSYS96 - OMI Sixth Annual Conference. </booktitle> <publisher> IOS Press, </publisher> <year> 1996. </year> <note> ISBN 90 5199 300 5. </note>
Reference-contexts: Much of this work is focused on low-power design, including designs for a digital compact cassette (DCC) error corrector [213], an infrared communications chip [117], an FFT [137], a FIR Filter bank [147], and cache [74], microprocessor <ref> [123, 69] </ref> and memory designs [203]. Others have developed techniques which use novel low-power devices, such as RSFQ [114]. 37 Nowick introduced a method for high-performance design, called speculative completion, which uses a single-rail bundled datapath but also allows early completion [149]. <p> This Amulet1 results forced the design team to explore other protocol options for the subsequent Amulet2 effort. A version of the Amulet2 called the Amulet2e <ref> [69] </ref> has been fabricated. The Amulet2e is an Amulet2 processor core (93,000 transistors) coupled with 4K bytes of memory, in a 128-pin package containing 454,000 transistors. It was fabricated in a .5 micron CMOS technology and operates at 3.3 volts. The Amulet2e is intended for embedded controller applications.
Reference: [70] <author> S. B. Furber, P. Day, J. D. Garside, N. C. Paver, and J. V. Woods. </author> <title> A micropipelined ARM. </title> <booktitle> In Proceedings of VLSI 93, </booktitle> <address> pages 5.4.1 -5.4.10, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: Another advantage is that even for an active system, only the subsystems that are required for the computation at hand will dissipate any power. Researchers such as Kees van Berkel [211] and Steve Furber <ref> [70] </ref> are pursuing asynchronous circuit designs in an attempt to exploit this feature. The final motivation of asynchronous design is the inherent ease of composing asynchronous subsystems into larger asynchronous systems. <p> The increased logic complexity may consume more power than is saved by the reduced 7 control transitions. This was shown to be the case in the two versions of the low-power asynchronous ARM processor produced by researchers at the University of Manchester. ARM1 <ref> [70] </ref> was a 2-cycle design. The lack of a distinct low-power advantage in ARM1, led to an improved ARM2 [73] 4-cycle design which demonstrated both a performance and low-power improvement over the ARM1. <p> Such pipelines have been used by several researchers in the design of asynchronous microprocessors. Sutherland, Sproull, Molnar, and others at Sun Labs have recently designed a "counterflow microprocessor" based on mi-cropipelines [195]. Micropipelines also form the basis for the Manchester ARM microprocessors, developed by Furber and the AMULET group <ref> [70, 71, 159] </ref>. control is indicated. In practice, a bundled datapath is also used, along with event-controlled registers to store the data as it propagates down the pipe. A control stage of the pipeline consists of a C-element (described above). <p> Recently, Furber and the AMULET group at Manchester University have fabricated two asynchronous implementations of the ARM microprocessor <ref> [70, 160, 71, 159] </ref>. The designs are based on micropipelined datapaths, and are part of a large-scale investigation of low-power techniques. The project addresses issues such as caching, exceptions and architectural optimization which are critical to the development of production-quality asynchronous machines.
Reference: [71] <author> S.B. Furber, P. Day, J.D. Garside, N.C. Paver, S. Temple, and J.V. Woods. </author> <title> The design and evaluation of an asynchronous microprocessor. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pages 217-220. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: Such pipelines have been used by several researchers in the design of asynchronous microprocessors. Sutherland, Sproull, Molnar, and others at Sun Labs have recently designed a "counterflow microprocessor" based on mi-cropipelines [195]. Micropipelines also form the basis for the Manchester ARM microprocessors, developed by Furber and the AMULET group <ref> [70, 71, 159] </ref>. control is indicated. In practice, a bundled datapath is also used, along with event-controlled registers to store the data as it propagates down the pipe. A control stage of the pipeline consists of a C-element (described above). <p> Recently, Furber and the AMULET group at Manchester University have fabricated two asynchronous implementations of the ARM microprocessor <ref> [70, 160, 71, 159] </ref>. The designs are based on micropipelined datapaths, and are part of a large-scale investigation of low-power techniques. The project addresses issues such as caching, exceptions and architectural optimization which are critical to the development of production-quality asynchronous machines.
Reference: [72] <author> S.B. Furber and J. Liu. </author> <title> Dynamic logic in four-phase micropipelines. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async96), </booktitle> <pages> pages 11-16. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: The Williams and Horowitz self-timed divider [221] is especially impressive: the fabricated chip was twice as fast as comparable synchronous designs. Research on asynchronous pipelines and datapaths is now proceeding in many directions. Several new asynchronous pipelining schemes have been proposed. Some emphasize low-power <ref> [65, 72] </ref> while others emphasize high-performance [53, 228, 72, 135]. In addition, several generalizations to asynchronous pipeline structures have been proposed: rings [220], multi-rings [194] and 2-dimensional micropipelines [76]. Techniques to reduce the communication overhead between stages have been developed [220, 55, 79]. <p> Research on asynchronous pipelines and datapaths is now proceeding in many directions. Several new asynchronous pipelining schemes have been proposed. Some emphasize low-power [65, 72] while others emphasize high-performance <ref> [53, 228, 72, 135] </ref>. In addition, several generalizations to asynchronous pipeline structures have been proposed: rings [220], multi-rings [194] and 2-dimensional micropipelines [76]. Techniques to reduce the communication overhead between stages have been developed [220, 55, 79].
Reference: [73] <author> S.B. Furber and P. </author> <title> Woods. </title> <journal> Four-phase micropipeline latch control circuits. IEEE Transactions on VLSI Systems, </journal> <volume> 4(2) </volume> <pages> 247-253, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: This was shown to be the case in the two versions of the low-power asynchronous ARM processor produced by researchers at the University of Manchester. ARM1 [70] was a 2-cycle design. The lack of a distinct low-power advantage in ARM1, led to an improved ARM2 <ref> [73] </ref> 4-cycle design which demonstrated both a performance and low-power improvement over the ARM1.
Reference: [74] <author> J.D. Garside, S. Temple, and R. Mehra. </author> <title> The AMULET2e cache system. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async96), </booktitle> <pages> pages 208-217. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: Much of this work is focused on low-power design, including designs for a digital compact cassette (DCC) error corrector [213], an infrared communications chip [117], an FFT [137], a FIR Filter bank [147], and cache <ref> [74] </ref>, microprocessor [123, 69] and memory designs [203]. Others have developed techniques which use novel low-power devices, such as RSFQ [114]. 37 Nowick introduced a method for high-performance design, called speculative completion, which uses a single-rail bundled datapath but also allows early completion [149].
Reference: [75] <author> R. Ginosar and N. Michell. </author> <title> On the potential of asynchronous pipelined processors. </title> <type> Technical Report UUCS-90-015, </type> <institution> VLSI Systems Research Group, University of Utah, </institution> <year> 1990. </year>
Reference-contexts: Fred was an architectural study and therefore was not actually fabricated. Other micropipelined-based RISC designs have been proposed by David et al. [47] and Ginosar and Michell <ref> [75] </ref>. A delay-insensitive microprocessor, TITAC, has been developed by Nanya et al. at Tokyo Institute of Technology [144]. The designers introduce several optimizations to improve performance. A different approach was proposed by Unger at Columbia University [209].
Reference: [76] <author> G. Gopalakrishnan. </author> <title> Micropipeline wavefront arbiters using lockable C-elements. </title> <journal> IEEE Design and Test, </journal> <volume> 11(4) </volume> <pages> 55-64, </pages> <month> Winter </month> <year> 1994. </year>
Reference-contexts: Several new asynchronous pipelining schemes have been proposed. Some emphasize low-power [65, 72] while others emphasize high-performance [53, 228, 72, 135]. In addition, several generalizations to asynchronous pipeline structures have been proposed: rings [220], multi-rings [194] and 2-dimensional micropipelines <ref> [76] </ref>. Techniques to reduce the communication overhead between stages have been developed [220, 55, 79]. Liebchen and Gopalakrishnan have proposed a reordering pipeline [109] which allows the freezing and dynamic reordering of data within the pipe using "LockC" elements.
Reference: [77] <author> G. Gopalakrishnan, E. Brunvand, N. Michell, and S.M. Nowick. </author> <title> A correctness criterion for asynchronous circuit validation and optimization. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 13(11) </volume> <pages> 1309-1318, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Although these general verification algorithms may be too expensive to apply in practice, a verifier has been developed for a constrained class of specifications [197]. Other methods use a restricted notion of liveness that can be easily checked <ref> [62, 77, 226] </ref>. A method which uses Signal Graphs for verification of properties of speed-independent circuits has been proposed by Kishinevsky et al. [96]. Another approach, by Kol, Ginosar and Samuel [98], uses state charts to verify both safety and liveness properties.
Reference: [78] <author> G. Gopalakrishnan, P. Kudva, and E. Brunvand. </author> <title> Peephole optimization of asynchronous macro-module networks. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pages 442-446. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: In each approach, handshaking components are clustered, formally specified as a single block, then resynthesized using STG techniques. A different approach has been proposed, which uses burst-mode techniques for the resynthesis step <ref> [78] </ref>. Brunvand and Sproull [21, 23] introduced an alternative compiler using occam specifications. Unlike the approaches of Martin and van Berkel, communication between processes is through two-phase handshaking, or transition-signaling. In their method, an occam specification is first compiled 33 into an unoptimized circuit using syntax-directed translation.
Reference: [79] <author> E. Grass, R.C.S. Morling, and I. Kale. Activity-monitoring completion-detection (AMCD): </author> <title> a new single rail approach to achieve self timing. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async96), </booktitle> <pages> pages 143-149. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: Some emphasize low-power [65, 72] while others emphasize high-performance [53, 228, 72, 135]. In addition, several generalizations to asynchronous pipeline structures have been proposed: rings [220], multi-rings [194] and 2-dimensional micropipelines [76]. Techniques to reduce the communication overhead between stages have been developed <ref> [220, 55, 79] </ref>. Liebchen and Gopalakrishnan have proposed a reordering pipeline [109] which allows the freezing and dynamic reordering of data within the pipe using "LockC" elements. Finally, low-power micropipeline structures have been introduced using adaptive scaling of supply voltage [146].
Reference: [80] <author> M. Greenstreet. </author> <title> Implementing a STARI chip. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pages 38-43. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1995. </year> <month> 48 </month>
Reference-contexts: The method has been applied to a high-performance Brent-Kung adder [155]; SPICE results indicate a 19-29% performance improvement over a comparable synchronous design. Other datapath research has focused on architectures and protocols for chip-to-chip communication, including recent methods by Greenstreet <ref> [80] </ref> and Roiene [172].
Reference: [81] <author> S. Hauck. </author> <title> Asynchronous design methodologies: An overview. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 83(1) </volume> <pages> 69-93, </pages> <month> January </month> <year> 1995. </year>
Reference: [82] <author> A.B. Hayes. </author> <title> Stored state asynchronous sequential circuits. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-30(8):596-600, </volume> <month> August </month> <year> 1981. </year>
Reference-contexts: Unlike a synchronous design, the clock is aperiodic, being generated as needed for the given computations. A block diagram of a self-synchronized machine is shown in Figure 11. Both SIC <ref> [82, 201] </ref> and MIC [3, 41, 169, 208] self-synchronized machines have been proposed. In a related approach, the local clock is replaced by an explicit external completion signal [105]. Other researchers have developed hybrid mixed-operation 23 mode machines [224, 37].
Reference: [83] <author> C.A.R. Hoare. </author> <title> Communicating sequential processes. </title> <journal> Communications of the ACM, </journal> <volume> 21(8) </volume> <pages> 666-677, </pages> <month> August </month> <year> 1978. </year>
Reference-contexts: A system is specified as a program in a high-level language of concurrency. Typically, the program is based on a variant of Hoare's CSP <ref> [83] </ref>, such as occam or trace theory [167]. The program is then transformed, by a series of steps, into a low-level program which maps directly to a circuit. Such transformation methods use algebraic or compiler techniques to carry out the translation. <p> This subsequent sections briefly sketch some of the recent work on validation of asynchronous designs. Due to the large variety of asynchronous design approaches, it is difficult to find a unified approach to the analysis and verification of all asynchronous circuits. For speed-independent and delay-insensitive systems, though, Hoare's CSP <ref> [83] </ref> and Milner's CCS [133] have been especially effective as formal underpinnings. Rem, Snepscheut and Udding's trace theory [167], based on CSP, has been used both for specification and formal verification.
Reference: [84] <author> D. A. Huffman. </author> <title> The synthesis of sequential switching circuits. </title> <journal> Journal of the Franklin Institute, </journal> <volume> 257(3) </volume> <pages> 161-190, </pages> <month> March </month> <year> 1954. </year>
Reference-contexts: These efforts were part of the general interest in switching theory. Huffman postulated <ref> [84, 85] </ref> that there must be a minimum time between input changes in order for a sequential circuit to be able to recognize them as being distinct. There must then be two critical periods, ffi 1 and ffi 2 , where ffi 1 &lt; ffi 2 .
Reference: [85] <author> D. A. Huffman. </author> <title> The synthesis of sequential switching circuits. </title> <journal> Journal of the Franklin Institute, </journal> <volume> 257(4) </volume> <pages> 275-303, </pages> <month> April </month> <year> 1954. </year>
Reference-contexts: These efforts were part of the general interest in switching theory. Huffman postulated <ref> [84, 85] </ref> that there must be a minimum time between input changes in order for a sequential circuit to be able to recognize them as being distinct. There must then be two critical periods, ffi 1 and ffi 2 , where ffi 1 &lt; ffi 2 .
Reference: [86] <author> H. Hulgaard and S.M. Burns. </author> <title> Bounded delay timing analysis of a class of CSP programs with choice. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async94), </booktitle> <pages> pages 2-11. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: A notion of timing-reliability was proposed by Kuwako and Nanya [104]. Timing and hazard analysis tools have been developed by Ashkinazy et al. [7]. Other recent work has focused on timing analysis to determine minimum and maximum separation of events in a concurrent circuit or system <ref> [128, 87, 86] </ref>. Such analysis can aid in both the optimization and verification of asynchronous designs. 6.9 Testing and Synthesis-for-Testability While formal verification is used to validate designs, testing is needed to validate the correctness of fabricated implementations.
Reference: [87] <author> H. Hulgaard, S.M. Burns, T. Amon, and G. Borriello. </author> <title> Practical applications of an efficient time separation of events algorithm. </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 146-151. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1993. </year>
Reference-contexts: A notion of timing-reliability was proposed by Kuwako and Nanya [104]. Timing and hazard analysis tools have been developed by Ashkinazy et al. [7]. Other recent work has focused on timing analysis to determine minimum and maximum separation of events in a concurrent circuit or system <ref> [128, 87, 86] </ref>. Such analysis can aid in both the optimization and verification of asynchronous designs. 6.9 Testing and Synthesis-for-Testability While formal verification is used to validate designs, testing is needed to validate the correctness of fabricated implementations.
Reference: [88] <author> K. Hwang. </author> <title> Computer Arithmetic: </title> <booktitle> Principles, Architecture, and Design. </booktitle> <publisher> John Wiley and Sons, </publisher> <year> 1979. </year>
Reference-contexts: Note that this method works equally well for both 2- and 4-cycle signaling protocols. Special functions often have unique opportunities. For example, arithmetic circuits can be built to generate completion signals based on carry propagation patterns <ref> [88] </ref>. Other functions can independently compute both F and F and use the exclusive-OR of their outputs to generate the acknowledge signal. Note that this technique will only work directly in a 4-cycle signaling protocol.
Reference: [89] <author> M.B. Josephs. </author> <title> Receptive process theory. </title> <journal> Acta Informatica, </journal> <volume> 29 </volume> <pages> 17-31, </pages> <year> 1992. </year>
Reference-contexts: A related algebraic approach was proposed by Udding and Josephs [205, 91]. Their method is based on a delay-insensitive algebra which formally characterizes a delay-insensitive system. Using axioms and lemmas, a specification is transformed into a provably correct delay-insensitive circuit. An alternative speed-independent algebra has also been proposed <ref> [89] </ref>. Proof methods for recursively-defined DI specifications have been formally justified [116]. The DI synthesis method has been used to design a stack, a routing chip, an up-down counter, and a polynomial divider [90].
Reference: [90] <author> M.B. Josephs, P.G. Lucassen, J.T. Udding, and T. Verhoeff. </author> <title> Formal design of an asynchronous DSP counterflow pipeline: A case study in handshake algebra. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async94), </booktitle> <pages> pages 206-215. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: An alternative speed-independent algebra has also been proposed [89]. Proof methods for recursively-defined DI specifications have been formally justified [116]. The DI synthesis method has been used to design a stack, a routing chip, an up-down counter, and a polynomial divider <ref> [90] </ref>. Lucassen and Udding [113] have used DI algebra to design, and prove correct, a stage in the Counterflow Pipeline Processor developed at Sun Laboratories. In related work, Patra and Fussell [158] have proposed a "basis set" of DI components.
Reference: [91] <author> M.B. Josephs and J.T. Udding. </author> <title> An overview of D-I algebra. </title> <booktitle> In Proceedings of the Twenty-Sixth Annual Hawaii International Conference on System Sciences, </booktitle> <volume> volume I, </volume> <pages> pages 329-338. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1993. </year>
Reference-contexts: In fact, it has been proven that almost no useful DI circuits can be built if one is restricted to a class of simple gates and operators [121, 25]. However, many practical DI circuits can be built if one allows more complex components <ref> [61, 91] </ref>. A complex component is constructed out of several simple gates. Internal to the component, timing assumptions must be satisfied; externally, the component operates in a delay-insensitive manner. <p> Ebergen has applied his decomposition method to a number of designs, including modulo-n counters, stacks, committee schedulers [17] and token ring arbiters. A related algebraic approach was proposed by Udding and Josephs <ref> [205, 91] </ref>. Their method is based on a delay-insensitive algebra which formally characterizes a delay-insensitive system. Using axioms and lemmas, a specification is transformed into a provably correct delay-insensitive circuit. An alternative speed-independent algebra has also been proposed [89]. Proof methods for recursively-defined DI specifications have been formally justified [116].
Reference: [92] <author> W. Keister, A. E. Ritchie, and S. H. Washburn. </author> <title> The Design of Switching Circuits. </title> <publisher> Van Nostrand, </publisher> <address> Princeton, New Jersey, </address> <year> 1951. </year>
Reference: [93] <author> K. Keutzer, L. Lavagno, and A. Sangiovanni-Vincentelli. </author> <title> Synthesis for testability techniques for asynchronous circuits. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 326-329. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1991. </year>
Reference-contexts: Beerel and Meng generalized their approach to handle stuck-at faults in timed control circuits [13]. A general synthesis-for-testability method was proposed by Keutzer, Lavagno and Sangiovanni-Vincentelli <ref> [93] </ref> which considers both stuck-at and path-delay faults in combinational circuits. The method uses algebraic transformations to produce hazard-free and fully-testable multi-level logic. This work was extended by Nowick, Jha and Cheng [154], to include a richer set of transformations and to handle a more general class of hazards.
Reference: [94] <author> A. Khoche. </author> <title> Testing Macro-Module Based Self-Timed Circuits. </title> <type> PhD thesis, </type> <institution> University of Utah, </institution> <year> 1996. </year>
Reference-contexts: However, the inherent temporally decoupled nature of asynchronous circuits tends to make the concept of "total system state" counter-productive. The implication is that the design for test methods developed for synchronous circuits are not appropriate for asynchronous systems. However, a surprisingly analogous technique was developed by Khoche <ref> [95, 94] </ref>. This technique applies to macromodular, micropipelined self-timed circuits. The key idea is that, while the circuits operate asynchronously in normal mode, the scan mode operation is synchronous and the clock propagates in the backward direction along the micropipeline.
Reference: [95] <author> A. Khoche and E. Brunvand. </author> <title> Testing micropipelines. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async94), </booktitle> <pages> pages 239-246. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: However, the inherent temporally decoupled nature of asynchronous circuits tends to make the concept of "total system state" counter-productive. The implication is that the design for test methods developed for synchronous circuits are not appropriate for asynchronous systems. However, a surprisingly analogous technique was developed by Khoche <ref> [95, 94] </ref>. This technique applies to macromodular, micropipelined self-timed circuits. The key idea is that, while the circuits operate asynchronously in normal mode, the scan mode operation is synchronous and the clock propagates in the backward direction along the micropipeline.
Reference: [96] <author> M. Kishinevsky, A. Kondratyev, A. Taubin, and V. Varshavsky. </author> <title> Analysis and identification of speed-independent circuits on an event model. </title> <booktitle> Formal Methods in System Design, </booktitle> <volume> 4(1) </volume> <pages> 33-75, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Other methods use a restricted notion of liveness that can be easily checked [62, 77, 226]. A method which uses Signal Graphs for verification of properties of speed-independent circuits has been proposed by Kishinevsky et al. <ref> [96] </ref>. Another approach, by Kol, Ginosar and Samuel [98], uses state charts to verify both safety and liveness properties. An alternative verification method based on CCS has been proposed by Birtwistle, Stevens, et al. [198, 197].
Reference: [97] <author> M.A. Kishinevsky, A.Y. Kondratyev, </author> <title> A.R. Taubin, and V.I. Varshavsky. Concurrent Hardware: The Theory and Practice of Self-Timed Design. </title> <publisher> John Wiley and Sons Ltd., </publisher> <year> 1994. </year> <month> 49 </month>
Reference-contexts: Lavagno has developed an influential CAD system for STG synthesis, which has been incorporated into the Berkeley SIS tool package [108, 188]. Several speed-independent synthesis methods have been developed, which insure hazard-freedom at the gate-level. Much of this work has been pursued by Kishinevsky, Kondratyev, Taubin and Var-shavsky <ref> [97, 217] </ref>, by Beerel and Meng [12], and by Cortadella, Lavagno, Lin, Vanbekbergen, Yakovlev and others [100, 44]. These methods have been effectively applied to a number of designs.
Reference: [98] <author> R. Kol, R. Ginosar, and G. Samuel. </author> <title> Statechart methodology for the design, validation, and synthesis of large scale asynchronous systems. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async96), </booktitle> <pages> pages 164-174. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: Other methods use a restricted notion of liveness that can be easily checked [62, 77, 226]. A method which uses Signal Graphs for verification of properties of speed-independent circuits has been proposed by Kishinevsky et al. [96]. Another approach, by Kol, Ginosar and Samuel <ref> [98] </ref>, uses state charts to verify both safety and liveness properties. An alternative verification method based on CCS has been proposed by Birtwistle, Stevens, et al. [198, 197]. CCS has been successfully used for the specification of several asynchronous designs, including a token ring arbiter and SCSI controller.
Reference: [99] <author> T. Kolks, S. Vercauteren, and B. Lin. </author> <title> Control resynthesis for control-dominated asynchronous designs. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async96), </booktitle> <pages> pages 233-243. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: A major goal this work is rapid turnaround time and low-power implementation. Even though some peephole optimizations have been developed, Tangram is basically a syntax-directed translation method. Recently, two resynthesis methods have been proposed, by Pena/Cortadella [162] and Kolks et al. <ref> [99] </ref>, which use aggressive peephole techniques to further optimize the resulting Tan-gram circuits. In each approach, handshaking components are clustered, formally specified as a single block, then resynthesized using STG techniques. A different approach has been proposed, which uses burst-mode techniques for the resynthesis step [78].
Reference: [100] <author> A. Kondratyev, M. Kishinevsky, B. Lin, P. Vanbekbergen, and A. Yakovlev. </author> <title> Basic gate implementation of speed-independent circuits. </title> <booktitle> In Proceedings of the 31st ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 56-62. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: SI circuits were introduced by David Muller in the 1950's (see [132]). Muller's formulation only considered deterministic input and output behavior. This class has recently been extended to include circuits with a limited form of non-determinism <ref> [12, 100] </ref>. A self-timed circuit, described by Seitz [129], contains a group of self-timed "elements". Each element is contained in an "equipotential region", where wires have negligible or well-bounded delay. <p> Sutherland and Sproull have introduced a notation for composite Petri nets called "snippets". Others allow timing constraints for specification and synthesis, using a related Event-Rule formalism [141]. In addition, some researchers are using state graphs for specifications, as an alternative to Petri nets <ref> [217, 12, 100] </ref>. State graphs allow the direct specification of interleaved behavior, avoiding some of the structural complexity of Petri nets. The target designs are usually speed-independent gate-level implementations. Originally, this work focused on determinate specifications, having no input or output choice, based on Muller's semi-modular lattice formulations (see [132]). <p> Several speed-independent synthesis methods have been developed, which insure hazard-freedom at the gate-level. Much of this work has been pursued by Kishinevsky, Kondratyev, Taubin and Var-shavsky [97, 217], by Beerel and Meng [12], and by Cortadella, Lavagno, Lin, Vanbekbergen, Yakovlev and others <ref> [100, 44] </ref>. These methods have been effectively applied to a number of designs. The sustained research effort of Kishinevsky et al., pursued over many years in Russia and Japan, has been especially noteworthy, resulting in a collection of algorithms and tools which are making SI design practical.
Reference: [101] <author> P. Kudva, G. Gopalakrishnan, and H. Jacobson. </author> <title> A technique for synthesizing distributed burst-mode circuits. </title> <booktitle> In 33rd ACM/IEEE Design Automation Conference, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: Beerel and Yun have recently used burst-mode synthesis tools at Intel Corporation, including 3D [229, 230] and hfmin [153, 68], to design of an experimental high-performance instruction decoder. Gopalakrishnan et al. have developed a high-level asynchronous synthesis tool, called ACK <ref> [101] </ref>, which incorporates burst-mode CAD tools to synthesize controllers. 6.3 Petri-net and Graph-based Methods Petri nets and other graphical notations are a widely-used alternative to specify and synthesize asynchronous circuits. In this model, an asynchronous system is viewed not as state-based, but rather as a partially-ordered sequence of events.
Reference: [102] <author> P. Kudva, G. Gopalakrishnan, H. Jacobson, and S.M. Nowick. </author> <title> Synthesis of hazard-free customized CMOS complex-gate networks under multiple-input changes. </title> <booktitle> In 33rd ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 77-82, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: These transformations transform a hazard-free two-level circuit into a hazard-free multi-level circuit. Alternatively, a hazard-free multi-level circuit can be synthesized directly, using binary decision diagrams (BDDs) [110]. Other algorithms have been developed for the hazard-free technology mapping of circuits to arbitrary cell libraries <ref> [191, 102, 14] </ref>. 4.3.4 An Alternative View of Hazards The above discussion follows a classical framework, focusing on combinational hazards separately from sequential hazards. This distinction has been quite useful for synthesis of asynchronous state machines. However, for other synthesis styles, a uniform treatment of hazards is more natural. <p> A number of CAD optimization algorithms have been developed, which have been used in burst-mode synthesis. These include: optimal state assignment [68]; hazard-free 2-level logic minimization, both exact (hfmin [153, 68]) and heuristic (espresso-hf [202]); hazard-free multi-level logic optimization [103, 110]; and hazard non-increasing technology mapping <ref> [191, 102, 14] </ref>, which enables more modern standard cell methodologies to be utilized. Davis, Marshall, Coates and Siegel [117] have built a CAD framework to incorporate all of the burst-mode synthesis methods. The framework includes tools for simulation and layout as well.
Reference: [103] <author> D.S. Kung. </author> <title> Hazard-non-increasing gate-level optimization algorithms. </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 631-634. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: A heuristic hazard-free two-level minimization algorithm has also been developed [202]. There is a rich literature on multi-level hazard-free circuits as well, and several synthesis methods have been proposed. One approach is to start with a hazard-free circuit (for example, a two-level circuit), and apply hazard-non-increasing multi-level transformations <ref> [206, 19, 103] </ref>. These transformations transform a hazard-free two-level circuit into a hazard-free multi-level circuit. Alternatively, a hazard-free multi-level circuit can be synthesized directly, using binary decision diagrams (BDDs) [110]. <p> A number of CAD optimization algorithms have been developed, which have been used in burst-mode synthesis. These include: optimal state assignment [68]; hazard-free 2-level logic minimization, both exact (hfmin [153, 68]) and heuristic (espresso-hf [202]); hazard-free multi-level logic optimization <ref> [103, 110] </ref>; and hazard non-increasing technology mapping [191, 102, 14], which enables more modern standard cell methodologies to be utilized. Davis, Marshall, Coates and Siegel [117] have built a CAD framework to incorporate all of the burst-mode synthesis methods. The framework includes tools for simulation and layout as well.
Reference: [104] <author> M. Kuwako and T. Nanya. </author> <title> Timing-reliability evaluation of asynchronous circuits based on different delay models. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async94), </booktitle> <pages> pages 22-31. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: Methods using Timed Petri Nets have been developed by Rokicki [173], Semenov et al. [187] and Verlind et al. [219]. Williams [220] and Burns [27] have introduced methods to analyze the performance of systems. A notion of timing-reliability was proposed by Kuwako and Nanya <ref> [104] </ref>. Timing and hazard analysis tools have been developed by Ashkinazy et al. [7]. Other recent work has focused on timing analysis to determine minimum and maximum separation of events in a concurrent circuit or system [128, 87, 86].
Reference: [105] <author> M. Ladd and W. P. </author> <title> Birmingham. Synthesis of multiple-input change asynchronous finite state machines. </title> <booktitle> In Proceedings of the 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 309-314. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1991. </year>
Reference-contexts: A block diagram of a self-synchronized machine is shown in Figure 11. Both SIC [82, 201] and MIC [3, 41, 169, 208] self-synchronized machines have been proposed. In a related approach, the local clock is replaced by an explicit external completion signal <ref> [105] </ref>. Other researchers have developed hybrid mixed-operation 23 mode machines [224, 37]. Self-synchronized machines tend to have a simpler construction but a greater overhead than Huffman machines. In general, asynchronous state machines offer a number of attractive features.
Reference: [106] <author> L. Lavagno, K. Keutzer, and A. Sangiovanni-Vincentelli. </author> <title> Algorithms for synthesis of hazard-free asynchronous circuits. </title> <booktitle> In Proceedings of the 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 302-308. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1991. </year>
Reference-contexts: Several recent methods address this problem, using a simple-gate model which can model hazards due to actual delays in a collection of individual gates and wires. 28 Moon et al. [136] and Yu and Subrahmanyam [227] proposed heuristic techniques for gate-level hazard elimination for speed-independent design. Lavagno et al. <ref> [106] </ref> used logic synthesis algorithms, hazard analysis and added delays to avoid hazards, assuming bounded gate delays. Lavagno has developed an influential CAD system for STG synthesis, which has been incorporated into the Berkeley SIS tool package [108, 188].
Reference: [107] <author> L. Lavagno, C.W. Moon, R.K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Solving the state assignment problem for signal transition graphs. </title> <booktitle> In Proceedings of the 29th IEEE/ACM Design Automation Conference, </booktitle> <pages> pages 568-572. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: The target designs are usually speed-independent gate-level implementations. Originally, this work focused on determinate specifications, having no input or output choice, based on Muller's semi-modular lattice formulations (see [132]). More recent research allows generalized behavior with choice. A number of optimized synthesis algorithms have been developed. Lavagno et al. <ref> [107] </ref>, Van-bekbergen et al. [216], Chu et al. [40] and Puri and Gu [165] have each developed algorithms for state minimization and state assignment from STG specifications. A partitioning algorithm for STG-based specifications was proposed by Puri and Gu [166].
Reference: [108] <author> L. Lavagno and A. Sangiovanni-Vincentelli. </author> <title> Algorithms for synthesis and testing of asynchronous circuits. </title> <publisher> Kluwer Academic, </publisher> <year> 1993. </year>
Reference-contexts: Lavagno et al. [106] used logic synthesis algorithms, hazard analysis and added delays to avoid hazards, assuming bounded gate delays. Lavagno has developed an influential CAD system for STG synthesis, which has been incorporated into the Berkeley SIS tool package <ref> [108, 188] </ref>. Several speed-independent synthesis methods have been developed, which insure hazard-freedom at the gate-level. Much of this work has been pursued by Kishinevsky, Kondratyev, Taubin and Var-shavsky [97, 217], by Beerel and Meng [12], and by Cortadella, Lavagno, Lin, Vanbekbergen, Yakovlev and others [100, 44].
Reference: [109] <author> A. Liebchen and G. Gopalakrishnan. </author> <title> Dynamic reordering of high latency transactions using a modified micropipeline. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pages 336-340. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: In addition, several generalizations to asynchronous pipeline structures have been proposed: rings [220], multi-rings [194] and 2-dimensional micropipelines [76]. Techniques to reduce the communication overhead between stages have been developed [220, 55, 79]. Liebchen and Gopalakrishnan have proposed a reordering pipeline <ref> [109] </ref> which allows the freezing and dynamic reordering of data within the pipe using "LockC" elements. Finally, low-power micropipeline structures have been introduced using adaptive scaling of supply voltage [146]. While pipelining is fundamental to high-performance systems, sequencing is the basic control operation in low-performance non-pipelined systems.
Reference: [110] <author> B. Lin and S. Devadas. </author> <title> Synthesis of hazard-free multi-level logic under multiple-input changes from binary decision diagrams. </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 542-549. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: One approach is to start with a hazard-free circuit (for example, a two-level circuit), and apply hazard-non-increasing multi-level transformations [206, 19, 103]. These transformations transform a hazard-free two-level circuit into a hazard-free multi-level circuit. Alternatively, a hazard-free multi-level circuit can be synthesized directly, using binary decision diagrams (BDDs) <ref> [110] </ref>. Other algorithms have been developed for the hazard-free technology mapping of circuits to arbitrary cell libraries [191, 102, 14]. 4.3.4 An Alternative View of Hazards The above discussion follows a classical framework, focusing on combinational hazards separately from sequential hazards. <p> A number of CAD optimization algorithms have been developed, which have been used in burst-mode synthesis. These include: optimal state assignment [68]; hazard-free 2-level logic minimization, both exact (hfmin [153, 68]) and heuristic (espresso-hf [202]); hazard-free multi-level logic optimization <ref> [103, 110] </ref>; and hazard non-increasing technology mapping [191, 102, 14], which enables more modern standard cell methodologies to be utilized. Davis, Marshall, Coates and Siegel [117] have built a CAD framework to incorporate all of the burst-mode synthesis methods. The framework includes tools for simulation and layout as well.
Reference: [111] <author> K.-J. Lin and C.-S. Lin. </author> <title> Automatic synthesis of asynchronous circuits. </title> <booktitle> In Proceedings of the 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 296-301. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1991. </year>
Reference-contexts: Lavagno et al. [107], Van-bekbergen et al. [216], Chu et al. [40] and Puri and Gu [165] have each developed algorithms for state minimization and state assignment from STG specifications. A partitioning algorithm for STG-based specifications was proposed by Puri and Gu [166]. Lin and Lin <ref> [111] </ref> have developed algorithms which avoid expensive intermediate representations during synthesis, instead performing synthesis directly on an STG representation, for a limited class of STGs.
Reference: [112] <author> C.N. Liu. </author> <title> A state variable assignment method for asynchronous sequential switching circuits. </title> <journal> Journal of the ACM, </journal> <volume> 10 </volume> <pages> 209-216, </pages> <month> April </month> <year> 1963. </year> <month> 50 </month>
Reference-contexts: When a state machine goes from one state to another, several state bits may change. If the machine may stabilize incorrectly in a transient state, a critical race occurs. Critical races are eliminated using specialized state encodings, such as one-hot [206], one-shot [206], Liu <ref> [112] </ref> or Tracey [204] critical race-free codes. These codes often require extra bits. A second type of sequential problem is an essential hazard [206]. Essential hazards arise if a machine has not fully absorbed an input change at the time the next-state begins to change.
Reference: [113] <author> P.G. Lucassen and J.T. Udding. </author> <title> On the correctness of the sproull counterflow pipeline processor. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async96), </booktitle> <pages> pages 112-120. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: An alternative speed-independent algebra has also been proposed [89]. Proof methods for recursively-defined DI specifications have been formally justified [116]. The DI synthesis method has been used to design a stack, a routing chip, an up-down counter, and a polynomial divider [90]. Lucassen and Udding <ref> [113] </ref> have used DI algebra to design, and prove correct, a stage in the Counterflow Pipeline Processor developed at Sun Laboratories. In related work, Patra and Fussell [158] have proposed a "basis set" of DI components.
Reference: [114] <author> M. Maezawa, I. Kurosawa, Y. Kameda, and T. Nanya. </author> <title> Pulse-driven dual-rail logic gate family based on rapid single-flux-quantum (RSFQ) devices for asynchronous circuits. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async96), </booktitle> <pages> pages 134-142. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: Others have developed techniques which use novel low-power devices, such as RSFQ <ref> [114] </ref>. 37 Nowick introduced a method for high-performance design, called speculative completion, which uses a single-rail bundled datapath but also allows early completion [149]. The method uses a multi-slotted matched delay, where several of the delays are faster than the worst-case.
Reference: [115] <author> G. Mago. </author> <title> Realization methods for asynchronous sequential circuits. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-20(3):290-297, </volume> <month> March </month> <year> 1971. </year>
Reference-contexts: More formally, all inputs must change within some narrow time period, ffi. This constraint helps to simplify hazard elimination, which is still more complicated than in the SIC case. MIC designs were proposed by Friedman and Menon [67] and Mago <ref> [115] </ref>. These designs require the use of delays on inputs or outputs, special "delay boxes", and careful timing requirements. The usefulness of these designs in a concurrent environment is limited, since input changes are required to be near-simultaneous.
Reference: [116] <author> W.C. Mallon and J.T. Udding. </author> <title> Using metrics for proof rules for recursively defined delay-insensitive specifications. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async97). </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1997. </year>
Reference-contexts: Their method is based on a delay-insensitive algebra which formally characterizes a delay-insensitive system. Using axioms and lemmas, a specification is transformed into a provably correct delay-insensitive circuit. An alternative speed-independent algebra has also been proposed [89]. Proof methods for recursively-defined DI specifications have been formally justified <ref> [116] </ref>. The DI synthesis method has been used to design a stack, a routing chip, an up-down counter, and a polynomial divider [90]. Lucassen and Udding [113] have used DI algebra to design, and prove correct, a stage in the Counterflow Pipeline Processor developed at Sun Laboratories.
Reference: [117] <author> A. Marshall, B. Coates, and P. Siegel. </author> <title> The design of an asynchronous communications chip. </title> <journal> IEEE Design and Test, </journal> <volume> 11(2) </volume> <pages> 8-21, </pages> <month> Summer </month> <year> 1994. </year>
Reference-contexts: These include: optimal state assignment [68]; hazard-free 2-level logic minimization, both exact (hfmin [153, 68]) and heuristic (espresso-hf [202]); hazard-free multi-level logic optimization [103, 110]; and hazard non-increasing technology mapping [191, 102, 14], which enables more modern standard cell methodologies to be utilized. Davis, Marshall, Coates and Siegel <ref> [117] </ref> have built a CAD framework to incorporate all of the burst-mode synthesis methods. The framework includes tools for simulation and layout as well. Their tools have been applied to several significant designs, including an low-power infrared communications chip for portable communication, developed at Hewlett-Packard Laboratories and Stanford University. <p> There has been much recent research on asynchronous datapaths, beyond the above work on pipelines and sequencers. Much of this work is focused on low-power design, including designs for a digital compact cassette (DCC) error corrector [213], an infrared communications chip <ref> [117] </ref>, an FFT [137], a FIR Filter bank [147], and cache [74], microprocessor [123, 69] and memory designs [203].
Reference: [118] <author> A. J. Martin, A. Lines, R. Manohar, M Nystroem, P. Penzes, R. Southworth, U. Cummings, and T.K. Lee. </author> <title> The Design of an Asynchronous MIPS R3000 Processor. </title> <editor> In Richard B. Brown and Alexander T. Ishii, editors, </editor> <booktitle> 17th Conference on Advanced Research in VLSI, </booktitle> <pages> pages 164-181. </pages> <publisher> IEEE, IEEE Computer Society Press, </publisher> <year> 1997. </year>
Reference-contexts: Of course today's microprocessors also utilize pipelined caches for CPU's which tolerate multiple outstanding misses without stalling. The result of the CalTech R3000 "MiniMIPS" experiment <ref> [118] </ref> is expected to run at 280 MIPS and dissipate 7 watts (at 3.3V and 75 degrees Celsius) or run at 150 MIPS dissipating 1 watt (at 2.0V and 75 degrees Celsius).
Reference: [119] <author> A.J. Martin. </author> <title> The design of a self-timed circuit for distributed mutual exclusion. </title> <editor> In Henry Fuchs, editor, </editor> <booktitle> Proceedings of the 1985 Chapel Hill Conference on Very Large Scale Integration, </booktitle> <pages> pages 245-60. </pages> <publisher> CSP, Inc., </publisher> <year> 1985. </year>
Reference-contexts: In most designs, a four-phase handshaking protocol is used (step (ii)), although two-phase handshaking can be used as well. Martin's synthesis method has been automated by Burns [29, 26] and applied to many substantial examples, including a distributed mutual exclusion element <ref> [119, 26] </ref>, a stack [122], and a multiply-accumulate unit [145].
Reference: [120] <author> A.J. Martin. </author> <title> Compiling communicating processes into delay-insensitive vlsi circuits. </title> <journal> Distributed Computing, </journal> <volume> 1 </volume> <pages> 226-234, </pages> <year> 1986. </year>
Reference-contexts: While the above methods use algebraic calculi to derive asynchronous circuits, other transformation methods rely on compiler-oriented techniques. An elegant and influential method for QDI synthesis has been developed by Martin and his students at Caltech <ref> [120, 122] </ref>. Martin specifies an asynchronous system as a set of concurrent processes which communicate on channels, using a CSP-like language. The language uses communication constructs from Hoare's CSP, sequential constructs from Dijkstra's guarded command language, and new constructs such as the probe (see [122]).
Reference: [121] <author> A.J. Martin. </author> <title> The limitation to delay-insensitivity in asynchronous circuits. </title> <editor> In W.J. Dally, editor, </editor> <booktitle> Advanced Research in VLSI: Proceedings of the Sixth MIT Conference, </booktitle> <pages> pages 263-278. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: The class of DI circuits built out of simple gates and operators is quite limited. In fact, it has been proven that almost no useful DI circuits can be built if one is restricted to a class of simple gates and operators <ref> [121, 25] </ref>. However, many practical DI circuits can be built if one allows more complex components [61, 91]. A complex component is constructed out of several simple gates. Internal to the component, timing assumptions must be satisfied; externally, the component operates in a delay-insensitive manner. <p> This case represents the worst form of isochronic fork, since one of the forks is contained within the C element circuit module while the other is exported to outside modules. Martin [122] and van Berkel [211] have used QDI circuits extensively and have described their advantages and disadvantages <ref> [121, 214] </ref>. A speed-independent (SI) circuit is one which operates correctly regardless of gate delays; wires are assumed to have zero or negligible delay. SI circuits were introduced by David Muller in the 1950's (see [132]). Muller's formulation only considered deterministic input and output behavior.
Reference: [122] <author> A.J. Martin. </author> <title> Programming in VLSI: From communicating processes to delay-insensitive circuits. In C.A.R. Hoare, editor, Developments in Concurrency and Communication, </title> <booktitle> UT Year of Programming Institute on Concurrent Programming, </booktitle> <pages> pages 1-64. </pages> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: This case represents the worst form of isochronic fork, since one of the forks is contained within the C element circuit module while the other is exported to outside modules. Martin <ref> [122] </ref> and van Berkel [211] have used QDI circuits extensively and have described their advantages and disadvantages [121, 214]. A speed-independent (SI) circuit is one which operates correctly regardless of gate delays; wires are assumed to have zero or negligible delay. <p> As components are combined into a circuit, their composite behavior is formally determined. If a component may produce an output which cannot legally be accepted by another component, then a violation occurs. This notion has been formalized, in different contexts, as: computation interference [61], stability violation <ref> [122] </ref> and choking [58]. 17 5 Arbitration In order to avoid non-deterministic behavior, asynchronous circuits must be hazard-free under some circuit delay model. <p> While the above methods use algebraic calculi to derive asynchronous circuits, other transformation methods rely on compiler-oriented techniques. An elegant and influential method for QDI synthesis has been developed by Martin and his students at Caltech <ref> [120, 122] </ref>. Martin specifies an asynchronous system as a set of concurrent processes which communicate on channels, using a CSP-like language. The language uses communication constructs from Hoare's CSP, sequential constructs from Dijkstra's guarded command language, and new constructs such as the probe (see [122]). <p> Martin specifies an asynchronous system as a set of concurrent processes which communicate on channels, using a CSP-like language. The language uses communication constructs from Hoare's CSP, sequential constructs from Dijkstra's guarded command language, and new constructs such as the probe (see <ref> [122] </ref>). The specification is then translated into a collection of gates and components which communicate on wires. <p> In most designs, a four-phase handshaking protocol is used (step (ii)), although two-phase handshaking can be used as well. Martin's synthesis method has been automated by Burns [29, 26] and applied to many substantial examples, including a distributed mutual exclusion element [119, 26], a stack <ref> [122] </ref>, and a multiply-accumulate unit [145]. The compiler includes algorithms for optimal transistor sizing [27]. (Designs for other datapath components, and for a microprocessor, using this method are described in the next two sections.) Martin's work has been extended by Akella and Gopalakrishnan in a system called SHILPA [4]. <p> Finally, low-power micropipeline structures have been introduced using adaptive scaling of supply voltage [146]. While pipelining is fundamental to high-performance systems, sequencing is the basic control operation in low-performance non-pipelined systems. A number of sequencer designs have been proposed <ref> [122, 211, 209, 161, 8, 64, 164] </ref>. There has been much recent research on asynchronous datapaths, beyond the above work on pipelines and sequencers.
Reference: [123] <author> A.J. Martin, S.M. Burns, T.K. Lee, D. Borkovic, and P.J. Hazewindus. </author> <title> The design of an asynchronous microprocessor. </title> <booktitle> In 1989 Caltech Conference on Very Large Scale Integration, </booktitle> <year> 1989. </year>
Reference-contexts: The resulting configuration is shown in Figure 18 (d). In practice, more complicated scenarios are possible, since data may be added and removed from the pipeline concurrently. Although micropipelines use transition-signaling, other signaling conventions have been used in asynchronous pipelines as well. Williams [220], Martin <ref> [123] </ref> and van Berkel [211] have used 4-phase handshaking (the "return-to-zero" protocol) between stages. An alternative two-phase signaling scheme, called LEDR (level-encoded dual-rail), was introduced to combine advantages of both transition-signaling and four-phase [56]. <p> Much of this work is focused on low-power design, including designs for a digital compact cassette (DCC) error corrector [213], an infrared communications chip [117], an FFT [137], a FIR Filter bank [147], and cache [74], microprocessor <ref> [123, 69] </ref> and memory designs [203]. Others have developed techniques which use novel low-power devices, such as RSFQ [114]. 37 Nowick introduced a method for high-performance design, called speculative completion, which uses a single-rail bundled datapath but also allows early completion [149]. <p> The first QDI asynchronous microprocessor was developed by Martin et al. <ref> [123] </ref> in the late 1980's. The 16-bit design is almost fully quasi-delay-insensitive except for the memory interface. A 2 CMOS version consumed 145mW at 5V and 6.7mW at 2V. A 1.6CMOS version consumed 200mW at 5V and 7.6mW at 2V. The architecture was later re-implemented in GaAs.
Reference: [124] <author> A.J. Martin and P.J. Hazewindus. </author> <title> Testing delay-insensitive circuits. </title> <editor> In Carlo H. Sequin, editor, </editor> <booktitle> Advanced Research in VLSI: Proceedings of the 1991 UC Santa Cruz Conference, </booktitle> <pages> pages 118-132. </pages> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: For example, asynchronous circuits may use redundant logic to eliminate hazards, but redundant logic makes testing more difficult. Initial results on the testing of speed-independent circuits include work by Beerel and Meng [10] and Martin and Hazewindus <ref> [124] </ref>. These papers indicate that certain classes of speed-independent 41 circuits are "self-testing" with respect to stuck-at faults, where certain faults will cause the circuit to halt. Beerel and Meng generalized their approach to handle stuck-at faults in timed control circuits [13].
Reference: [125] <author> Doug Matzge. </author> <title> Will Physical Scalability Sabotage Performance Gains? IEEE Computer, </title> <booktitle> 30(9) </booktitle> <pages> 37-39, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: The result is that given the trend of 10% growth in the physical dies size per generation, less than 10% of the die area will be reachable in a single clock period when the feature size reaches .06m <ref> [125] </ref>. The result is that it is highly unlikely that one billion transistor chips will be both cost effective and synchronous. This monograph has provided a number of options that may well be the basis for a future solution to this critical problem. 43
Reference: [126] <author> E.J. McCluskey. </author> <title> Introduction to the Theory of Switching Circuits. </title> <publisher> McGraw-Hill, </publisher> <address> New York, NY, </address> <year> 1965. </year>
Reference-contexts: If the environment is allowed to respond to a circuit's outputs without any timing constraints, the two interact in input/output mode [24]. Otherwise, environmental timing constraints are assumed. The most common example is fundamental mode <ref> [126, 206] </ref> where the environment must wait for a circuit to stabilize before responding to circuit outputs.
Reference: [127] <author> E.J. McCluskey. </author> <title> Logic Design Principles: with emphasis on testable semicustom circuits. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1986. </year>
Reference-contexts: Otherwise, environmental timing constraints are assumed. The most common example is fundamental mode [126, 206] where the environment must wait for a circuit to stabilize before responding to circuit outputs. Such a requirement can be seen as the hold time for a simple latch or flipflop <ref> [127] </ref>. 11 4.2 Classes of Asynchronous Circuits Given these models for a circuit and its environment, asynchronous circuits can be classified into a hierarchy. A delay-insensitive (DI) circuit is one which is designed to operate correctly regardless of the delays on its gates and wires. <p> That is, an unbounded gate and wire delay model is assumed. 4.3.1 SIC Hazards Hazards are temporal phenomena: they are manifest during the dynamic operation of a circuit. As an example, consider the Karnaugh map ("K-map") <ref> [127] </ref> in Figure 4 (a), defining a Boolean function with 3 inputs: A, B, C. A minimum-cost sum-of-products realization, or cover, is given by expression f = A 0 B + AC; the corresponding AND-OR circuit is shown in the figure. <p> No latches or flip-flops are used: state is stored on feedback loops, which may have added delay elements. A block diagram of a Huffman machine is shown in Figure 10. Synthesis methods for asynchronous state machines usually follow the same general outline as synchronous methods <ref> [127] </ref>. A flow table is reduced through state minimization. Symbolic states are assigned binary codes using state assignment. Finally, the resulting Boolean functions are implemented in combinational logic using logic minimization. There are several possible operating modes for an asynchronous state machine.
Reference: [128] <author> K. McMillan and D.L. Dill. </author> <title> Algorithms for interface timing verification. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pages 48-51. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1992. </year> <month> 51 </month>
Reference-contexts: A notion of timing-reliability was proposed by Kuwako and Nanya [104]. Timing and hazard analysis tools have been developed by Ashkinazy et al. [7]. Other recent work has focused on timing analysis to determine minimum and maximum separation of events in a concurrent circuit or system <ref> [128, 87, 86] </ref>. Such analysis can aid in both the optimization and verification of asynchronous designs. 6.9 Testing and Synthesis-for-Testability While formal verification is used to validate designs, testing is needed to validate the correctness of fabricated implementations.
Reference: [129] <author> C. Mead and L. Conway. </author> <title> Introduction to VLSI Systems, chapter 7. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1980. </year> <title> C.L. Seitz, System Timing. </title>
Reference-contexts: Chuck Seitz wrote an excellent introduction to this general topic in his chapter on System Timing in the classic VLSI book by Mead and Conway <ref> [129] </ref>. The next section of this treatise presents some of the more commonly used protocols and terminology. Another common motivation for pursuing the asynchronous circuit option is the quest for low-power circuit operation. <p> SI circuits were introduced by David Muller in the 1950's (see [132]). Muller's formulation only considered deterministic input and output behavior. This class has recently been extended to include circuits with a limited form of non-determinism [12, 100]. A self-timed circuit, described by Seitz <ref> [129] </ref>, contains a group of self-timed "elements". Each element is contained in an "equipotential region", where wires have negligible or well-bounded delay. An element itself may be an SI circuit, or a circuit whose correct operation relies on use of local timing assumptions.
Reference: [130] <author> T. H.-Y. Meng, R.W. Brodersen, and D.G. Messerschmitt. </author> <title> Automatic synthesis of asynchronous circuits from high-level specifications. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 8(11) </volume> <pages> 1185-1205, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: These nets allow both concurrency and a limited form of choice. Chu developed a synthesis method which transforms an STG into a speed-independent circuit, and applied the method to a number of examples, such as an A-to-D controller and a resource locking module. This work was extended by Meng <ref> [130] </ref>, who produced an automated synthesis tool for speed-independent designs from STGs. Meng also explored design tradeoffs to allow greater concurrency in the resulting circuits.
Reference: [131] <author> T.H. Meng. </author> <title> Synchronization Design for Digital Systems. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: An alternative two-phase signaling scheme, called LEDR (level-encoded dual-rail), was introduced to combine advantages of both transition-signaling and four-phase [56]. Asynchronous pipelines have been designed for numerous applications: multiplication [200, 145], division [221], and DSP <ref> [211, 131] </ref>. The Williams and Horowitz self-timed divider [221] is especially impressive: the fabricated chip was twice as fast as comparable synchronous designs. Research on asynchronous pipelines and datapaths is now proceeding in many directions. Several new asynchronous pipelining schemes have been proposed.
Reference: [132] <author> R.E. Miller. </author> <title> Switching Theory. Volume II: Sequential Circuits and Machines. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, NY, </address> <year> 1965. </year>
Reference-contexts: Given a circuit model, it is also important to characterize the interaction of the circuit with its environment. The circuit and environment together form a closed system, called a complete circuit (see Muller in <ref> [132] </ref>). If the environment is allowed to respond to a circuit's outputs without any timing constraints, the two interact in input/output mode [24]. Otherwise, environmental timing constraints are assumed. <p> A speed-independent (SI) circuit is one which operates correctly regardless of gate delays; wires are assumed to have zero or negligible delay. SI circuits were introduced by David Muller in the 1950's (see <ref> [132] </ref>). Muller's formulation only considered deterministic input and output behavior. This class has recently been extended to include circuits with a limited form of non-determinism [12, 100]. A self-timed circuit, described by Seitz [129], contains a group of self-timed "elements". <p> State graphs allow the direct specification of interleaved behavior, avoiding some of the structural complexity of Petri nets. The target designs are usually speed-independent gate-level implementations. Originally, this work focused on determinate specifications, having no input or output choice, based on Muller's semi-modular lattice formulations (see <ref> [132] </ref>). More recent research allows generalized behavior with choice. A number of optimized synthesis algorithms have been developed. Lavagno et al. [107], Van-bekbergen et al. [216], Chu et al. [40] and Puri and Gu [165] have each developed algorithms for state minimization and state assignment from STG specifications.
Reference: [133] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <address> London, </address> <year> 1989. </year>
Reference-contexts: Due to the large variety of asynchronous design approaches, it is difficult to find a unified approach to the analysis and verification of all asynchronous circuits. For speed-independent and delay-insensitive systems, though, Hoare's CSP [83] and Milner's CCS <ref> [133] </ref> have been especially effective as formal underpinnings. Rem, Snepscheut and Udding's trace theory [167], based on CSP, has been used both for specification and formal verification.
Reference: [134] <author> C.E. Molnar, T.-P. Fang, and F.U. Rosenberger. </author> <title> Synthesis of delay-insensitive modules. </title> <editor> In Henry Fuchs, editor, </editor> <booktitle> Proceedings of the 1985 Chapel Hill Conference on Very Large Scale Integration, </booktitle> <pages> pages 67-86. </pages> <publisher> CSP, Inc., </publisher> <year> 1985. </year>
Reference-contexts: Examples include Seitz's M-Nets [185] and Rosenblum and Yakovlev's Signal Graphs [179]. Vanbekbergen et al. [215] introduced the notion of a lock class to synthesize designs from marked graphs. More general classes of Petri nets include Molnar et al.'s I-Nets <ref> [134] </ref> and Chu's Signal Transition Graphs or STGs [38, 39]. These nets allow both concurrency and a limited form of choice.
Reference: [135] <author> C.E. Molnar, I.W. Jones, B. Coates, and J. Lexau. </author> <title> A fifo ring oscillator performance experiment. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async97). </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1997. </year>
Reference-contexts: Research on asynchronous pipelines and datapaths is now proceeding in many directions. Several new asynchronous pipelining schemes have been proposed. Some emphasize low-power [65, 72] while others emphasize high-performance <ref> [53, 228, 72, 135] </ref>. In addition, several generalizations to asynchronous pipeline structures have been proposed: rings [220], multi-rings [194] and 2-dimensional micropipelines [76]. Techniques to reduce the communication overhead between stages have been developed [220, 55, 79].
Reference: [136] <author> C.W. Moon, P.R. Stephan, and R.K. Brayton. </author> <title> Synthesis of hazard-free asynchronous circuits from graphical specifications. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 322-325. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1991. </year>
Reference-contexts: Several extensions have been proposed to describe more general behavior than is possible with the original STG's. These include the use of "epsilon" and "dummy" transitions [38], "don't-care" and "toggle" transitions <ref> [136] </ref>, OR-causality [223] and semaphore transitions [46]. Sutherland and Sproull have introduced a notation for composite Petri nets called "snippets". Others allow timing constraints for specification and synthesis, using a related Event-Rule formalism [141]. <p> Several recent methods address this problem, using a simple-gate model which can model hazards due to actual delays in a collection of individual gates and wires. 28 Moon et al. <ref> [136] </ref> and Yu and Subrahmanyam [227] proposed heuristic techniques for gate-level hazard elimination for speed-independent design. Lavagno et al. [106] used logic synthesis algorithms, hazard analysis and added delays to avoid hazards, assuming bounded gate delays.
Reference: [137] <author> S.V. Morton, S.S. Appleton, and M.J. Liebelt. </author> <title> An event controlled reconfigurable multi-chip FFT. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async94), </booktitle> <pages> pages 144-153. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: There has been much recent research on asynchronous datapaths, beyond the above work on pipelines and sequencers. Much of this work is focused on low-power design, including designs for a digital compact cassette (DCC) error corrector [213], an infrared communications chip [117], an FFT <ref> [137] </ref>, a FIR Filter bank [147], and cache [74], microprocessor [123, 69] and memory designs [203].
Reference: [138] <author> D. E. Muller and W. S. Bartky. </author> <title> A theory of asynchronous circuits I. </title> <institution> Digital Computer Laboratory 75, University of Illinois, </institution> <month> November </month> <year> 1956. </year>
Reference-contexts: This led to a class of circuits that became known as Huffman circuits. This work was extended in the 1950's and 60's by the fundamental contributions of Unger, McCluskey and others. 20 Muller <ref> [138, 139] </ref> proposed a different class of circuits which are more closely related to modern asynchronous circuits. In particular, he proposed the use of a ready signal. Input signals to Muller circuits were only permitted when the ready signal was asserted.
Reference: [139] <author> D. E. Muller and W. S. Bartky. </author> <title> A theory of asynchronous circuits II. </title> <institution> Digital Computer Laboratory 78, University of Illinois, </institution> <month> March </month> <year> 1957. </year>
Reference-contexts: This led to a class of circuits that became known as Huffman circuits. This work was extended in the 1950's and 60's by the fundamental contributions of Unger, McCluskey and others. 20 Muller <ref> [138, 139] </ref> proposed a different class of circuits which are more closely related to modern asynchronous circuits. In particular, he proposed the use of a ready signal. Input signals to Muller circuits were only permitted when the ready signal was asserted.
Reference: [140] <author> C. Myers. </author> <title> Computer-Aided Synthesis and Verification of Gate-Level Timed Circuits. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1995. </year>
Reference-contexts: In his timed state space method, rather than using timing analysis for post-synthesis-based optimizations to remove the unnecessary circuitry, timing information is used during synthesis to avoid generating unnecessary circuitry. His method is based on timed event rule (ER) structures <ref> [140] </ref>, which can be automatically generated from high-level language representations such as CSP or VHDL. ER structures and Petri Nets use a similar representational semantics, but ER structures have a more concise syntax. A rule set represents a causal dependence between events.
Reference: [141] <author> C. Myers and T. Meng. </author> <title> Synthesis of timed asynchronous circuits. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pages 279-284. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: These circuits contain no global clock. However, they may make use of timing assumptions both within the circuit and in the interaction between circuit and environment. Latches and flip-flops, with setup and hold times, belong to this class. Other examples include timed circuits <ref> [141] </ref>, where both internal and environmental bounded-delay assumptions are used to optimize the designs. 4.3 Hazards A fundamental difference between synchronous and asynchronous circuits is in their treatment of hazards. In a synchronous system, computation occurs between clock ticks. <p> These include the use of "epsilon" and "dummy" transitions [38], "don't-care" and "toggle" transitions [136], OR-causality [223] and semaphore transitions [46]. Sutherland and Sproull have introduced a notation for composite Petri nets called "snippets". Others allow timing constraints for specification and synthesis, using a related Event-Rule formalism <ref> [141] </ref>. In addition, some researchers are using state graphs for specifications, as an alternative to Petri nets [217, 12, 100]. State graphs allow the direct specification of interleaved behavior, avoiding some of the structural complexity of Petri nets. The target designs are usually speed-independent gate-level implementations. <p> The circuits are then mapped to a library of transition-signaling components. 6.5 Timed Methods While all asynchronous synthesis methods make some timing assumptions, much of the discipline is focused on minimizing these timing assumptions or at least localizing them into low-level modules. Myers <ref> [141, 142] </ref> contends that this approach often leads to additional time and space being spent in the circuit to deal with contingencies which never occur.
Reference: [142] <author> C. Myers and T. Meng. </author> <title> Synthesis of Timed Asynchronous Circuits. </title> <journal> IEEE Transactions on VLSI Systems, </journal> <volume> 1(2) </volume> <pages> 106-119, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The circuits are then mapped to a library of transition-signaling components. 6.5 Timed Methods While all asynchronous synthesis methods make some timing assumptions, much of the discipline is focused on minimizing these timing assumptions or at least localizing them into low-level modules. Myers <ref> [141, 142] </ref> contends that this approach often leads to additional time and space being spent in the circuit to deal with contingencies which never occur.
Reference: [143] <author> C.J. Myers, T.G. Rokicki, and T. H.-Y. Meng. </author> <title> Automatic synthesis of gate-level timed circuits with choice. </title> <editor> In W.J. Dally, J.W. Poulton, and A.T. Ishii, editors, </editor> <booktitle> Advanced Research in VLSI : Proceedings of the 1995 University of North Carolina Conference, </booktitle> <pages> pages 42-58. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: The worst-case complexity of the algorithms is actually worse than discrete methods, but it has been shown that the region based approach works well in practice <ref> [174, 143, 16] </ref>. The method is automated in a tool called ATACS, which has been used to design a number of practical circuits.
Reference: [144] <author> T. Nanya, Y. Ueno, H. Kagotani, M. Kuwako, and A. Takamura. TITAC: </author> <title> design of a quasi-delay-insensitive microprocessor. </title> <journal> IEEE Design and Test, </journal> <volume> 11(2) </volume> <pages> 50-63, </pages> <month> Summer </month> <year> 1994. </year>
Reference-contexts: Fred was an architectural study and therefore was not actually fabricated. Other micropipelined-based RISC designs have been proposed by David et al. [47] and Ginosar and Michell [75]. A delay-insensitive microprocessor, TITAC, has been developed by Nanya et al. at Tokyo Institute of Technology <ref> [144] </ref>. The designers introduce several optimizations to improve performance. A different approach was proposed by Unger at Columbia University [209]. His "computers without clocks" use traditional asynchronous state machines for control logic, and a building block approach to design rather than compilation schemes.
Reference: [145] <author> C.D. Nielsen and A. Martin. </author> <title> The design of a delay-insensitive multiply-accumulate unit. </title> <booktitle> In Proceedings of the Twenty-Sixth Annual Hawaii International Conference on System Sciences, </booktitle> <volume> volume I, </volume> <pages> pages 379-388. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1993. </year> <month> 52 </month>
Reference-contexts: Martin's synthesis method has been automated by Burns [29, 26] and applied to many substantial examples, including a distributed mutual exclusion element [119, 26], a stack [122], and a multiply-accumulate unit <ref> [145] </ref>. The compiler includes algorithms for optimal transistor sizing [27]. (Designs for other datapath components, and for a microprocessor, using this method are described in the next two sections.) Martin's work has been extended by Akella and Gopalakrishnan in a system called SHILPA [4]. <p> Williams [220], Martin [123] and van Berkel [211] have used 4-phase handshaking (the "return-to-zero" protocol) between stages. An alternative two-phase signaling scheme, called LEDR (level-encoded dual-rail), was introduced to combine advantages of both transition-signaling and four-phase [56]. Asynchronous pipelines have been designed for numerous applications: multiplication <ref> [200, 145] </ref>, division [221], and DSP [211, 131]. The Williams and Horowitz self-timed divider [221] is especially impressive: the fabricated chip was twice as fast as comparable synchronous designs. Research on asynchronous pipelines and datapaths is now proceeding in many directions. Several new asynchronous pipelining schemes have been proposed.
Reference: [146] <author> L.S. Nielsen, C. Niessen, J. Sparso, and K. van Berkel. </author> <title> Low-Power Operation Using Self-Timed Circuits and Adaptive Scaling of the Supply Voltage. </title> <journal> IEEE Transactions on VLSI, </journal> <volume> 2(4):7, </volume> <year> 1994. </year>
Reference-contexts: Liebchen and Gopalakrishnan have proposed a reordering pipeline [109] which allows the freezing and dynamic reordering of data within the pipe using "LockC" elements. Finally, low-power micropipeline structures have been introduced using adaptive scaling of supply voltage <ref> [146] </ref>. While pipelining is fundamental to high-performance systems, sequencing is the basic control operation in low-performance non-pipelined systems. A number of sequencer designs have been proposed [122, 211, 209, 161, 8, 64, 164]. There has been much recent research on asynchronous datapaths, beyond the above work on pipelines and sequencers.
Reference: [147] <author> L.S. Nielsen and J. Sparso. </author> <title> A low-power asynchronous data path for a fir filter bank. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async96), </booktitle> <pages> pages 197-207. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: There has been much recent research on asynchronous datapaths, beyond the above work on pipelines and sequencers. Much of this work is focused on low-power design, including designs for a digital compact cassette (DCC) error corrector [213], an infrared communications chip [117], an FFT [137], a FIR Filter bank <ref> [147] </ref>, and cache [74], microprocessor [123, 69] and memory designs [203]. Others have developed techniques which use novel low-power devices, such as RSFQ [114]. 37 Nowick introduced a method for high-performance design, called speculative completion, which uses a single-rail bundled datapath but also allows early completion [149].
Reference: [148] <author> S.M. Nowick. </author> <title> Automatic synthesis of burst-mode asynchronous controllers. </title> <type> Technical report, </type> <institution> Stanford University, </institution> <month> March </month> <year> 1993. </year> <type> Ph.D. </type> <note> Thesis (available as Stanford University Computer Systems Laboratory technical report, CSL-TR-95-686, Dec. 95). </note>
Reference-contexts: Input and output bursts are separated by a slash, /. A rising transition is indicated by a "+" 24 and a falling transition is indicated by a "-". The specification describes a controller, pe-send-ifc, which has been implemented in the Post Office chip. Nowick and Dill <ref> [152, 148] </ref> made three main contributions. First, they constrained and formalized the specifications used in MEAT into the final form called burst-mode [152, 148]. Second, they introduced a new self-synchronized design style called a locally-clocked state machine [152, 148]. <p> The specification describes a controller, pe-send-ifc, which has been implemented in the Post Office chip. Nowick and Dill <ref> [152, 148] </ref> made three main contributions. First, they constrained and formalized the specifications used in MEAT into the final form called burst-mode [152, 148]. Second, they introduced a new self-synchronized design style called a locally-clocked state machine [152, 148]. This was the first burst-mode synthesis method to guarantee a hazard-free gate-level implementation, given a burst-mode specification. <p> Nowick and Dill <ref> [152, 148] </ref> made three main contributions. First, they constrained and formalized the specifications used in MEAT into the final form called burst-mode [152, 148]. Second, they introduced a new self-synchronized design style called a locally-clocked state machine [152, 148]. This was the first burst-mode synthesis method to guarantee a hazard-free gate-level implementation, given a burst-mode specification. In addition, unlike several previous self-synchronized design methods, this method produces low-latency designs, where the latency of the machine is primarily combinational delay.
Reference: [149] <author> S.M. Nowick. </author> <title> Design of a low-latency asynchronous adder using speculative completion. </title> <booktitle> IEE Proceedings Computers and Digital Techniques, </booktitle> <volume> 143(5) </volume> <pages> 301-307, </pages> <year> 1996. </year>
Reference-contexts: Others have developed techniques which use novel low-power devices, such as RSFQ [114]. 37 Nowick introduced a method for high-performance design, called speculative completion, which uses a single-rail bundled datapath but also allows early completion <ref> [149] </ref>. The method uses a multi-slotted matched delay, where several of the delays are faster than the worst-case. These speculative delays allow early completion, and are disabled for worst-case data.
Reference: [150] <editor> S.M. Nowick and B. Coates. UCLOCK: </editor> <booktitle> automated design of high-performance unclocked state machines. In Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pages 434-441. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: The synthesis method has been fully automated into a CAD tool and applied to several large designs, including an experimental SCSI controller at AMD Corporation [231]. A more recent unclocked burst-mode method, UCLOCK, was developed by Nowick and Coates <ref> [150] </ref>. The burst-mode approach allows greater concurrency than MIC designs, but it still has two main limitations. First, it requires strictly alternating bursts of inputs and outputs: concurrency occurs only within a burst.
Reference: [151] <author> S.M. Nowick, M.E. Dean, D.L. Dill, and M. Horowitz. </author> <title> The design of a high-performance cache controller: a case study in asynchronous synthesis. INTEGRATION, </title> <journal> the VLSI journal, </journal> <volume> 15(3) </volume> <pages> 241-262, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: In addition, unlike several previous self-synchronized design methods, this method produces low-latency designs, where the latency of the machine is primarily combinational delay. The design method has been automated and applied to a number of significant designs: a high-performance second-level cache controller <ref> [151] </ref>, a DRAM controller and a SCSI controller [156]. Finally, they developed a hazard-free 2-level minimization algorithm, which produces a minimum-cost hazard-free sum-of-products implementation [153].
Reference: [152] <author> S.M. Nowick and D.L. Dill. </author> <title> Synthesis of asynchronous state machines using a local clock. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pages 192-197. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: Input and output bursts are separated by a slash, /. A rising transition is indicated by a "+" 24 and a falling transition is indicated by a "-". The specification describes a controller, pe-send-ifc, which has been implemented in the Post Office chip. Nowick and Dill <ref> [152, 148] </ref> made three main contributions. First, they constrained and formalized the specifications used in MEAT into the final form called burst-mode [152, 148]. Second, they introduced a new self-synchronized design style called a locally-clocked state machine [152, 148]. <p> The specification describes a controller, pe-send-ifc, which has been implemented in the Post Office chip. Nowick and Dill <ref> [152, 148] </ref> made three main contributions. First, they constrained and formalized the specifications used in MEAT into the final form called burst-mode [152, 148]. Second, they introduced a new self-synchronized design style called a locally-clocked state machine [152, 148]. This was the first burst-mode synthesis method to guarantee a hazard-free gate-level implementation, given a burst-mode specification. <p> Nowick and Dill <ref> [152, 148] </ref> made three main contributions. First, they constrained and formalized the specifications used in MEAT into the final form called burst-mode [152, 148]. Second, they introduced a new self-synchronized design style called a locally-clocked state machine [152, 148]. This was the first burst-mode synthesis method to guarantee a hazard-free gate-level implementation, given a burst-mode specification. In addition, unlike several previous self-synchronized design methods, this method produces low-latency designs, where the latency of the machine is primarily combinational delay.
Reference: [153] <author> S.M. Nowick and D.L. Dill. </author> <title> Exact two-level minimization of hazard-free logic with multiple-input changes. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 14(8) </volume> <pages> 986-997, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: These conditions suffice to eliminate any single MIC hazard. Unfortunately, when attempting to eliminate hazards for several MIC transitions simultaneously, these covering conditions may be unsatisfiable. That is, for a given set of MIC transitions, a hazard-free cover may not exist <ref> [206, 66, 153] </ref>. An exact hazard-free two-level minimization algorithm was developed by Nowick and Dill [153]. The algorithm finds an exactly minimum-cost cover which is hazard-free for a set of MIC transitions, if a solution exists. A heuristic hazard-free two-level minimization algorithm has also been developed [202]. <p> Unfortunately, when attempting to eliminate hazards for several MIC transitions simultaneously, these covering conditions may be unsatisfiable. That is, for a given set of MIC transitions, a hazard-free cover may not exist [206, 66, 153]. An exact hazard-free two-level minimization algorithm was developed by Nowick and Dill <ref> [153] </ref>. The algorithm finds an exactly minimum-cost cover which is hazard-free for a set of MIC transitions, if a solution exists. A heuristic hazard-free two-level minimization algorithm has also been developed [202]. There is a rich literature on multi-level hazard-free circuits as well, and several synthesis methods have been proposed. <p> The design method has been automated and applied to a number of significant designs: a high-performance second-level cache controller [151], a DRAM controller and a SCSI controller [156]. Finally, they developed a hazard-free 2-level minimization algorithm, which produces a minimum-cost hazard-free sum-of-products implementation <ref> [153] </ref>. The minimizer has been refined into a CAD package called hfmin [68], which includes multi-output and multi-valued minimization and uses highly-optimized synchronous tools such as mincov [180] to solve substeps. A heuristic hazard-free minimizer, espresso-hf, 25 has also been developed [202]. <p> A number of CAD optimization algorithms have been developed, which have been used in burst-mode synthesis. These include: optimal state assignment [68]; hazard-free 2-level logic minimization, both exact (hfmin <ref> [153, 68] </ref>) and heuristic (espresso-hf [202]); hazard-free multi-level logic optimization [103, 110]; and hazard non-increasing technology mapping [191, 102, 14], which enables more modern standard cell methodologies to be utilized. Davis, Marshall, Coates and Siegel [117] have built a CAD framework to incorporate all of the burst-mode synthesis methods. <p> Beerel and Yun have recently used burst-mode synthesis tools at Intel Corporation, including 3D [229, 230] and hfmin <ref> [153, 68] </ref>, to design of an experimental high-performance instruction decoder.
Reference: [154] <author> S.M. Nowick, N.K. Jha, and F.-C. Cheng. </author> <title> Synthesis of asynchronous circuits for stuck-at and robust path delay fault testability. </title> <booktitle> In Proceedings of the Eighth International Conference on VLSI Design (VLSI Design 95). </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1995. </year>
Reference-contexts: A general synthesis-for-testability method was proposed by Keutzer, Lavagno and Sangiovanni-Vincentelli [93] which considers both stuck-at and path-delay faults in combinational circuits. The method uses algebraic transformations to produce hazard-free and fully-testable multi-level logic. This work was extended by Nowick, Jha and Cheng <ref> [154] </ref>, to include a richer set of transformations and to handle a more general class of hazards. Subsequent research has focused on testing of handshaking circuits and micropipelines. Roncken et al. [178, 175] at Philips Research Laboratories have developed techniques and tools for partial scan of handshaking circuits.
Reference: [155] <author> S.M. Nowick, K.Y. Yun, P.A. Beerel, and A.E. Dooply. </author> <title> Speculative completion for the design of high-performance asynchronous dynamic adders. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async97). </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1997. </year>
Reference-contexts: The method uses a multi-slotted matched delay, where several of the delays are faster than the worst-case. These speculative delays allow early completion, and are disabled for worst-case data. The method has been applied to a high-performance Brent-Kung adder <ref> [155] </ref>; SPICE results indicate a 19-29% performance improvement over a comparable synchronous design. Other datapath research has focused on architectures and protocols for chip-to-chip communication, including recent methods by Greenstreet [80] and Roiene [172].
Reference: [156] <author> S.M. Nowick, K.Y. Yun, and D.L. Dill. </author> <title> Practical asynchronous controller design. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pages 341-345. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: The design method has been automated and applied to a number of significant designs: a high-performance second-level cache controller [151], a DRAM controller and a SCSI controller <ref> [156] </ref>. Finally, they developed a hazard-free 2-level minimization algorithm, which produces a minimum-cost hazard-free sum-of-products implementation [153]. The minimizer has been refined into a CAD package called hfmin [68], which includes multi-output and multi-valued minimization and uses highly-optimized synchronous tools such as mincov [180] to solve substeps.
Reference: [157] <author> S.S. Patil. </author> <title> An Asynchronous Logic Array. </title> <type> Technical Report Technical Memorandom 62, </type> <institution> Mas-sachusetts Institute of Technology, Project MAC, </institution> <year> 1975. </year>
Reference-contexts: In this example, events X and Y can occur concurrently: both transitions are enabled and may fire in any order. Figure 13 (c) indicates the result of firing transition Y after X. After both events have fired, transition Z is enabled and may fire. Patil <ref> [157] </ref> proposed the synthesis of Petri nets into asynchronous logic arrays. In this approach, the structure of the Petri net is mapped directly into hardware. Many modern synthesis methods use a Petri net as a behavioral specification only, not as a structural specification.
Reference: [158] <author> P. Patra and D.S. Fussell. </author> <title> Efficient building blocks for delay insensitive circuits. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async94), </booktitle> <pages> pages 196-205. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: Lucassen and Udding [113] have used DI algebra to design, and prove correct, a stage in the Counterflow Pipeline Processor developed at Sun Laboratories. In related work, Patra and Fussell <ref> [158] </ref> have proposed a "basis set" of DI components. They have shown that any DI circuit can be constructed using only components from the set, and that the set is minimal. While the above methods use algebraic calculi to derive asynchronous circuits, other transformation methods rely on compiler-oriented techniques.
Reference: [159] <author> N.C. Paver. </author> <title> The design and implementation of an asynchronous microprocessor. </title> <type> Technical report, </type> <institution> University of Manchester, </institution> <month> June </month> <year> 1994. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: Such pipelines have been used by several researchers in the design of asynchronous microprocessors. Sutherland, Sproull, Molnar, and others at Sun Labs have recently designed a "counterflow microprocessor" based on mi-cropipelines [195]. Micropipelines also form the basis for the Manchester ARM microprocessors, developed by Furber and the AMULET group <ref> [70, 71, 159] </ref>. control is indicated. In practice, a bundled datapath is also used, along with event-controlled registers to store the data as it propagates down the pipe. A control stage of the pipeline consists of a C-element (described above). <p> Recently, Furber and the AMULET group at Manchester University have fabricated two asynchronous implementations of the ARM microprocessor <ref> [70, 160, 71, 159] </ref>. The designs are based on micropipelined datapaths, and are part of a large-scale investigation of low-power techniques. The project addresses issues such as caching, exceptions and architectural optimization which are critical to the development of production-quality asynchronous machines.
Reference: [160] <author> N.C. Paver, P. Day, S.B. Furber, J.D. Garside, and J.V. Woods. </author> <title> Register locking in an asynchronous microprocessor. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pages 351-355. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1992. </year> <month> 53 </month>
Reference-contexts: Recently, Furber and the AMULET group at Manchester University have fabricated two asynchronous implementations of the ARM microprocessor <ref> [70, 160, 71, 159] </ref>. The designs are based on micropipelined datapaths, and are part of a large-scale investigation of low-power techniques. The project addresses issues such as caching, exceptions and architectural optimization which are critical to the development of production-quality asynchronous machines.
Reference: [161] <author> A. Peeters. </author> <title> Single-rail handshake circuits. </title> <type> Technical report, </type> <institution> Eindhoven University of Technology, </institution> <month> June </month> <year> 1996. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: This method allows global shared variables, and uses flow analysis techniques to optimize resource allocation. A different compiler-based approach was developed by van Berkel, Rem and others <ref> [210, 211, 161, 212] </ref> at Philips Research Laboratories and Eindhoven University of Technology, using the Tangram language. Tangram, based on CSP, is a specification language for concurrent systems. <p> Finally, low-power micropipeline structures have been introduced using adaptive scaling of supply voltage [146]. While pipelining is fundamental to high-performance systems, sequencing is the basic control operation in low-performance non-pipelined systems. A number of sequencer designs have been proposed <ref> [122, 211, 209, 161, 8, 64, 164] </ref>. There has been much recent research on asynchronous datapaths, beyond the above work on pipelines and sequencers.
Reference: [162] <author> M.A. Pena and J. Cortadella. </author> <title> Combining process algebras and petri nets for the specification and synthesis of asynchronous circuits. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async96), </booktitle> <pages> pages 222-232. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: A major goal this work is rapid turnaround time and low-power implementation. Even though some peephole optimizations have been developed, Tangram is basically a syntax-directed translation method. Recently, two resynthesis methods have been proposed, by Pena/Cortadella <ref> [162] </ref> and Kolks et al. [99], which use aggressive peephole techniques to further optimize the resulting Tan-gram circuits. In each approach, handshaking components are clustered, formally specified as a single block, then resynthesized using STG techniques.
Reference: [163] <author> J.L. Peterson. </author> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1981. </year>
Reference-contexts: In this model, an asynchronous system is viewed not as state-based, but rather as a partially-ordered sequence of events. A Petri net <ref> [163] </ref> is a directed bipartite graph which can describe 26 both concurrency and choice. The net consists of two kinds of vertices: places and transitions. Tokens are assigned to the various places in the net.
Reference: [164] <author> L. Plana and S.M. Nowick. </author> <title> Concurrency-oriented optimization for low-power asynchronous systems. </title> <booktitle> In IEEE International Symposium on Low-Power Electronics and Design, </booktitle> <pages> pages 151-156. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> August </month> <year> 1996. </year>
Reference-contexts: Finally, low-power micropipeline structures have been introduced using adaptive scaling of supply voltage [146]. While pipelining is fundamental to high-performance systems, sequencing is the basic control operation in low-performance non-pipelined systems. A number of sequencer designs have been proposed <ref> [122, 211, 209, 161, 8, 64, 164] </ref>. There has been much recent research on asynchronous datapaths, beyond the above work on pipelines and sequencers.
Reference: [165] <author> R. Puri and J. Gu. </author> <title> Area efficient synthesis of asynchronous interface circuits. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pages 212-216. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: More recent research allows generalized behavior with choice. A number of optimized synthesis algorithms have been developed. Lavagno et al. [107], Van-bekbergen et al. [216], Chu et al. [40] and Puri and Gu <ref> [165] </ref> have each developed algorithms for state minimization and state assignment from STG specifications. A partitioning algorithm for STG-based specifications was proposed by Puri and Gu [166].
Reference: [166] <author> R. Puri and J. Gu. </author> <title> A modular partitioning approach for asynchronous circuit synthesis. </title> <booktitle> In Proceedings of the 31st ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 63-69. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: Lavagno et al. [107], Van-bekbergen et al. [216], Chu et al. [40] and Puri and Gu [165] have each developed algorithms for state minimization and state assignment from STG specifications. A partitioning algorithm for STG-based specifications was proposed by Puri and Gu <ref> [166] </ref>. Lin and Lin [111] have developed algorithms which avoid expensive intermediate representations during synthesis, instead performing synthesis directly on an STG representation, for a limited class of STGs.
Reference: [167] <author> M. Rem, J.L.A. van de Snepscheut, and J.T. Udding. </author> <title> Trace theory and the definition of hierarchical components. </title> <editor> In Randal Bryant, editor, </editor> <booktitle> Proceedings of the Third Caltech Conference on Very Large Scale Integration, </booktitle> <pages> pages 225-239. </pages> <publisher> CSP, Inc., </publisher> <year> 1983. </year>
Reference-contexts: A system is specified as a program in a high-level language of concurrency. Typically, the program is based on a variant of Hoare's CSP [83], such as occam or trace theory <ref> [167] </ref>. The program is then transformed, by a series of steps, into a low-level program which maps directly to a circuit. Such transformation methods use algebraic or compiler techniques to carry out the translation. Some of these methods treat datapath and control uniformly during synthesis. <p> For speed-independent and delay-insensitive systems, though, Hoare's CSP [83] and Milner's CCS [133] have been especially effective as formal underpinnings. Rem, Snepscheut and Udding's trace theory <ref> [167] </ref>, based on CSP, has been used both for specification and formal verification. In trace theory, the behavior of a concurrent system is described by the set of possible traces, or sequences of events, which may be observed. Each trace describes one possible interleaved behavior of the system.
Reference: [168] <author> R. D. Rettberg, W. R. Crowther, P. P. Carvey, and R. S. Tomlinson. </author> <title> The Monarch Parallel Processor Hardware Design. </title> <journal> Computer, </journal> <volume> 23(4) </volume> <pages> 18-30, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: The literature contains an abundance of methods for de-skewing clocks [2, 36] on a board but most of them are also costly in either area or complexity, and some will probably not be robust enough for use in commercial circuits. An interesting example is the Monarch <ref> [168] </ref> processor chip which used active signal selection on each 4 input pad. In this instance, a five slot delay line was used to skew signals to match the clock skew. The appropriate tap in the delay line was selected based on analyzing the clock vs. the incoming signal.
Reference: [169] <author> C.A. Rey and J. Vaucher. </author> <title> Self-synchronized asynchronous sequential machines. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-23(12):1306-1311, </volume> <month> December </month> <year> 1974. </year>
Reference-contexts: Unlike a synchronous design, the clock is aperiodic, being generated as needed for the given computations. A block diagram of a self-synchronized machine is shown in Figure 11. Both SIC [82, 201] and MIC <ref> [3, 41, 169, 208] </ref> self-synchronized machines have been proposed. In a related approach, the local clock is replaced by an explicit external completion signal [105]. Other researchers have developed hybrid mixed-operation 23 mode machines [224, 37].
Reference: [170] <author> W. Richardson and E. Brunvand. Fred: </author> <title> An Architecture for a Self-Timed Decoupled Computer. </title> <booktitle> In Advanced Research in Asynchronous Circuits and Systems, </booktitle> <pages> pages 60-68. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: Brunvand developed the NSR RISC microprocessor [22] at the University of Utah, using transition-signaling for control, bundled data, and a micropipelined datapath. The NSR was implemented using commercially available FPGA technology. The result of the NSR effort led to a more aggressive architecture called FRED <ref> [171, 170] </ref> which was implemented to the level of structural VHDL and subsequently analyzed.
Reference: [171] <author> W. F. Richardson. </author> <title> Architectural Considerations for a Self-Timed Decoupled Processor. </title> <type> PhD thesis, </type> <institution> University of Utah, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: Brunvand developed the NSR RISC microprocessor [22] at the University of Utah, using transition-signaling for control, bundled data, and a micropipelined datapath. The NSR was implemented using commercially available FPGA technology. The result of the NSR effort led to a more aggressive architecture called FRED <ref> [171, 170] </ref> which was implemented to the level of structural VHDL and subsequently analyzed.
Reference: [172] <author> P.T. Roeine. </author> <title> A system for asynchronous high-speed chip to chip communication. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async96), </booktitle> <pages> pages 2-10. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: The method has been applied to a high-performance Brent-Kung adder [155]; SPICE results indicate a 19-29% performance improvement over a comparable synchronous design. Other datapath research has focused on architectures and protocols for chip-to-chip communication, including recent methods by Greenstreet [80] and Roiene <ref> [172] </ref>. An architecture for communication between synchronous and asynchronous chips has been developed by Chappel et al. [35]. 6.7 Asynchronous Processor Design Perhaps the greatest challenge in large-scale asynchronous design to date has been to combine the techniques for asynchronous controller and datapath synthesis, and build asynchronous processors.
Reference: [173] <author> T. Rokicki. </author> <title> Representing and modeling digital circuits. </title> <type> Technical report, </type> <institution> Stanford University, </institution> <month> December </month> <year> 1993. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: Myers' gate-level synthesis method permits larger circuits to be synthesized more efficiently as a result of the state space reduction. A new set of timing analysis algorithms, based on a theory of geometric regions <ref> [173] </ref>, allows a large number of discrete timed states to be condensed into a single region. The worst-case complexity of the algorithms is actually worse than discrete methods, but it has been shown that the region based approach works well in practice [174, 143, 16]. <p> A general model for timed systems was introduced by Alur and Dill [5]. Timing analysis and verification methods for asynchronous state machines with bounded delays were developed by Devadas et al. [57] and Chakraborty et al. [31, 30]. Methods using Timed Petri Nets have been developed by Rokicki <ref> [173] </ref>, Semenov et al. [187] and Verlind et al. [219]. Williams [220] and Burns [27] have introduced methods to analyze the performance of systems. A notion of timing-reliability was proposed by Kuwako and Nanya [104]. Timing and hazard analysis tools have been developed by Ashkinazy et al. [7].
Reference: [174] <author> T. Rokicki and C. Myers. </author> <title> Automatic Verification of Timed Circuits. </title> <booktitle> In International Conference on Computer-Aided Verification, </booktitle> <pages> pages 468-480. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The worst-case complexity of the algorithms is actually worse than discrete methods, but it has been shown that the region based approach works well in practice <ref> [174, 143, 16] </ref>. The method is automated in a tool called ATACS, which has been used to design a number of practical circuits.
Reference: [175] <author> M. Roncken. </author> <title> Partial scan test for asynchronous circuits illustrated on a DCC error corrector. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async94), </booktitle> <pages> pages 247-256. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: This work was extended by Nowick, Jha and Cheng [154], to include a richer set of transformations and to handle a more general class of hazards. Subsequent research has focused on testing of handshaking circuits and micropipelines. Roncken et al. <ref> [178, 175] </ref> at Philips Research Laboratories have developed techniques and tools for partial scan of handshaking circuits. The method is now used in the Tangram synthesis compiler. A novelty of the approach is that testability is insured at the highest-level, i.e., by modifying the Tangram program specification. <p> The method was used in the design of a DCC error corrector, where it led to 99.9% stuck-at output fault coverage at an expense of less than 3% additional area <ref> [175, 213] </ref>. More realistic fault models, such as for I DDQ testing, have recently been addressed as well [177].
Reference: [176] <author> M. Roncken, E. Aarts, and W. Verhaegh. </author> <title> Optimal scan for pipelined testing: an asynchronous foundation. </title> <booktitle> In Proceedings of the IEEE International Test Conference. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1996. </year> <month> 54 </month>
Reference-contexts: Khoche demonstrated that the overhead of adding scanability to asynchronous circuits is commensurate with the overhead for synchronous circuits. More recent approaches to testing micropipelines have been developed as well <ref> [181, 176] </ref>. An issue related to testing is initializability, which is the process of driving a circuit at power-up to a known state. Initializability is also often required by automatic test pattern generators. Two recent methods for asynchronous initializability have been developed [32, 192].
Reference: [177] <author> M. Roncken and E. Bruls. </author> <title> Test quality of asynchronous circuits: a defect-oriented evaluation. </title> <booktitle> In Proceedings of the IEEE International Test Conference. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1996. </year>
Reference-contexts: The method was used in the design of a DCC error corrector, where it led to 99.9% stuck-at output fault coverage at an expense of less than 3% additional area [175, 213]. More realistic fault models, such as for I DDQ testing, have recently been addressed as well <ref> [177] </ref>. The most prevalent "design-for-test" technique in the synchronous domain has been the use of a serial scan path technique, which effectively creates a shift register out of the storage components on the chip. The external interface provides both read and write capability to this shift register.
Reference: [178] <author> Marly Roncken and Ronald Saeijs. </author> <title> Linear Test Times for Delay-Insensitive Circuits: a Compilation Strategy. </title> <editor> In S. Furber and M. Edwards, editors, </editor> <booktitle> Proceedings of the IFIP WG 10.5 Working Conference on Asynchronous Design Methodologies, Manchester, </booktitle> <pages> pages 13-27. </pages> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1993. </year>
Reference-contexts: This work was extended by Nowick, Jha and Cheng [154], to include a richer set of transformations and to handle a more general class of hazards. Subsequent research has focused on testing of handshaking circuits and micropipelines. Roncken et al. <ref> [178, 175] </ref> at Philips Research Laboratories have developed techniques and tools for partial scan of handshaking circuits. The method is now used in the Tangram synthesis compiler. A novelty of the approach is that testability is insured at the highest-level, i.e., by modifying the Tangram program specification.
Reference: [179] <author> L.Y. Rosenblum and A.V. Yakovlev. </author> <title> Signal graphs: from self-timed to timed ones. </title> <booktitle> In Proceedings of International Workshop on Timed Petri Nets, </booktitle> <address> Torino, Italy, </address> <pages> pages 199-207. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1985. </year>
Reference-contexts: Marked graphs 27 are used to model concurrency, but not choice. That is, a marked graph cannot model that one of several possible inputs (or outputs) may change in some state. Examples include Seitz's M-Nets [185] and Rosenblum and Yakovlev's Signal Graphs <ref> [179] </ref>. Vanbekbergen et al. [215] introduced the notion of a lock class to synthesize designs from marked graphs. More general classes of Petri nets include Molnar et al.'s I-Nets [134] and Chu's Signal Transition Graphs or STGs [38, 39]. These nets allow both concurrency and a limited form of choice.
Reference: [180] <author> R. Rudell and A. Sangiovanni-Vincentelli. </author> <title> Multiple-valued optimization for PLA optimization. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 6(5) </volume> <pages> 727-750, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: Finally, they developed a hazard-free 2-level minimization algorithm, which produces a minimum-cost hazard-free sum-of-products implementation [153]. The minimizer has been refined into a CAD package called hfmin [68], which includes multi-output and multi-valued minimization and uses highly-optimized synchronous tools such as mincov <ref> [180] </ref> to solve substeps. A heuristic hazard-free minimizer, espresso-hf, 25 has also been developed [202]. Yun and Dill [229] later proposed an alternative implementation style for burst-mode machines, called a 3D machine. These machines are named after the 3-dimensional flow table used in their synthesis.
Reference: [181] <author> V. Schoeber and T. </author> <title> Kiel. An asynchronous scan path concept for micropipelines using the bundled data convention. </title> <booktitle> In Proceedings of the IEEE International Test Conference. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1996. </year>
Reference-contexts: Khoche demonstrated that the overhead of adding scanability to asynchronous circuits is commensurate with the overhead for synchronous circuits. More recent approaches to testing micropipelines have been developed as well <ref> [181, 176] </ref>. An issue related to testing is initializability, which is the process of driving a circuit at power-up to a known state. Initializability is also often required by automatic test pattern generators. Two recent methods for asynchronous initializability have been developed [32, 192].
Reference: [182] <author> C.-J. Seger. </author> <title> A bounded delay race model. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 130-133. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1989. </year>
Reference-contexts: Therefore, a delay model is critical in defining the dynamic behavior of an asynchronous circuit. There are two fundamental models of delay: the pure delay model and the inertial delay model <ref> [206, 182] </ref>. A pure delay can delay the propagation of a waveform, but does not otherwise alter it. An inertial delay can alter the shape of a waveform by attenuating short glitches. More formally, an inertial delay has a threshold period, ffi.
Reference: [183] <author> Charles L. Seitz. </author> <title> "The Cosmic Cube". </title> <journal> Communications of the ACM, </journal> <volume> 28(1) </volume> <pages> 22-33, </pages> <month> January </month> <year> 1984. </year>
Reference-contexts: This annual effort went through several iterations and eventually became the CalTech Mosaic processor [184] that was subsequently used in the Cosmic Cube multiprocessor <ref> [183] </ref>. This binary N-cube connected multicomputer spawned a significant amount of activity in the parallel processing industry and was the forerunner of similarly architected machines vended by NCube corporation and Intel [196].
Reference: [184] <author> Charles L. Seitz. </author> <title> The Mosaic C: An Experimental Fine Grain Multicomputer. </title> <editor> In Alain Bensoussan and Jean Pierre Verjus, editors, </editor> <booktitle> Future Tendencies in Computer Science. Springer Verlag Lecture Notes in Computer Science #653, </booktitle> <year> 1992. </year>
Reference-contexts: The first asynchronous microprocessor-like device was developed in the early 1980's at Caltech by Chuck Seitz as class projects for his courses in VLSI and asynchronous circuit design. This annual effort went through several iterations and eventually became the CalTech Mosaic processor <ref> [184] </ref> that was subsequently used in the Cosmic Cube multiprocessor [183]. This binary N-cube connected multicomputer spawned a significant amount of activity in the parallel processing industry and was the forerunner of similarly architected machines vended by NCube corporation and Intel [196].
Reference: [185] <author> C.L. Seitz. </author> <title> Asynchronous machines exhibiting concurrency. </title> <booktitle> In Conference Record of the Project MAC Conference on Concurrent Systems and Parallel Computation, </booktitle> <year> 1970. </year>
Reference-contexts: Several approaches use a constrained class of Petri net called a marked graph [43]. Marked graphs 27 are used to model concurrency, but not choice. That is, a marked graph cannot model that one of several possible inputs (or outputs) may change in some state. Examples include Seitz's M-Nets <ref> [185] </ref> and Rosenblum and Yakovlev's Signal Graphs [179]. Vanbekbergen et al. [215] introduced the notion of a lock class to synthesize designs from marked graphs. More general classes of Petri nets include Molnar et al.'s I-Nets [134] and Chu's Signal Transition Graphs or STGs [38, 39].
Reference: [186] <author> C.L. Seitz. </author> <title> Graph representations for logical machines. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> Jan </month> <year> 1971. </year>
Reference-contexts: The project took a significant step forward and provided a sound foundation for the numerous macromodular synthesis approaches being investigated today [23, 210, 61]. Yet another noteworthy pioneer was Chuck Seitz, whose MIT dissertation <ref> [186] </ref> introduced a Petri Net like formalism which proved to be extremely useful in the design and analysis of asynchronous circuits. In his subsequent academic career, Prof.
Reference: [187] <author> A. Semenov and A. Yakovlev. </author> <title> Verification of asynchronous circuits using time petri net unfolding. </title> <booktitle> In 33rd ACM/IEEE Design Automation Conference, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: Timing analysis and verification methods for asynchronous state machines with bounded delays were developed by Devadas et al. [57] and Chakraborty et al. [31, 30]. Methods using Timed Petri Nets have been developed by Rokicki [173], Semenov et al. <ref> [187] </ref> and Verlind et al. [219]. Williams [220] and Burns [27] have introduced methods to analyze the performance of systems. A notion of timing-reliability was proposed by Kuwako and Nanya [104]. Timing and hazard analysis tools have been developed by Ashkinazy et al. [7].
Reference: [188] <author> E.M. Sentovich. </author> <title> SIS: a system for sequential circuit synthesis. </title> <type> Technical Report UCB/ERL M92/41, </type> <institution> UC Berkeley, </institution> <month> May </month> <year> 1992. </year> <institution> Dept. of EECS. </institution>
Reference-contexts: Lavagno et al. [106] used logic synthesis algorithms, hazard analysis and added delays to avoid hazards, assuming bounded gate delays. Lavagno has developed an influential CAD system for STG synthesis, which has been incorporated into the Berkeley SIS tool package <ref> [108, 188] </ref>. Several speed-independent synthesis methods have been developed, which insure hazard-freedom at the gate-level. Much of this work has been pursued by Kishinevsky, Kondratyev, Taubin and Var-shavsky [97, 217], by Beerel and Meng [12], and by Cortadella, Lavagno, Lin, Vanbekbergen, Yakovlev and others [100, 44].
Reference: [189] <author> Robert Shapiro and Hartmann Genrich. </author> <title> A Design of a Cascadable Nacking Arbiter. </title> <publisher> MetaSoftware, Inc. </publisher> <address> Cambridge, MA 02140, </address> <year> 1993 </year> <month> February. </month>
Reference-contexts: Perhaps some of the best work on cascaded arbiters and nacking arbiters has been performed by Robert Shapiro and Hartmann Genrich <ref> [190, 189] </ref>. Sadly this work has not been published in an available forum. Their work started as a formal effort to prove the cascaded arbiter properties of the arbiter circuits used in the aforementioned Post Office chip, after a defect was discovered during testing of an arbiter fragment chip.
Reference: [190] <author> Robert Shapiro and Hartmann Genrich. </author> <title> Formal Verification of an Arbiter Cascade. </title> <publisher> MetaSoftware, Inc. </publisher> <address> Cambridge, MA 02140, </address> <year> 1992 </year> <month> January. </month>
Reference-contexts: Perhaps some of the best work on cascaded arbiters and nacking arbiters has been performed by Robert Shapiro and Hartmann Genrich <ref> [190, 189] </ref>. Sadly this work has not been published in an available forum. Their work started as a formal effort to prove the cascaded arbiter properties of the arbiter circuits used in the aforementioned Post Office chip, after a defect was discovered during testing of an arbiter fragment chip.
Reference: [191] <author> P. Siegel, G. De Micheli, and D. Dill. </author> <title> Technology mapping for generalized fundamental-mode asynchronous designs. </title> <booktitle> In Proceedings of the 30th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 61-67. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1993. </year>
Reference-contexts: These transformations transform a hazard-free two-level circuit into a hazard-free multi-level circuit. Alternatively, a hazard-free multi-level circuit can be synthesized directly, using binary decision diagrams (BDDs) [110]. Other algorithms have been developed for the hazard-free technology mapping of circuits to arbitrary cell libraries <ref> [191, 102, 14] </ref>. 4.3.4 An Alternative View of Hazards The above discussion follows a classical framework, focusing on combinational hazards separately from sequential hazards. This distinction has been quite useful for synthesis of asynchronous state machines. However, for other synthesis styles, a uniform treatment of hazards is more natural. <p> A number of CAD optimization algorithms have been developed, which have been used in burst-mode synthesis. These include: optimal state assignment [68]; hazard-free 2-level logic minimization, both exact (hfmin [153, 68]) and heuristic (espresso-hf [202]); hazard-free multi-level logic optimization [103, 110]; and hazard non-increasing technology mapping <ref> [191, 102, 14] </ref>, which enables more modern standard cell methodologies to be utilized. Davis, Marshall, Coates and Siegel [117] have built a CAD framework to incorporate all of the burst-mode synthesis methods. The framework includes tools for simulation and layout as well.
Reference: [192] <author> M. Singh and S.M. Nowick. </author> <title> Synthesis-for-testability of asynchronous sequential machines. </title> <booktitle> In Proceedings of the IEEE International Test Conference. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1996. </year>
Reference-contexts: An issue related to testing is initializability, which is the process of driving a circuit at power-up to a known state. Initializability is also often required by automatic test pattern generators. Two recent methods for asynchronous initializability have been developed <ref> [32, 192] </ref>. One interesting area of asynchronous circuit testing that is just beginning to be studied is the issue of hazards. Asynchronous circuits by nature often contain redundant logic to prevent hazards. This is a particularly problematic issue with respect to testing.
Reference: [193] <author> R. L. </author> <title> Sites. Alpha Architecture Reference Manual. </title> <institution> Digital Equipment Corporation, </institution> <year> 1992. </year> <month> 55 </month>
Reference-contexts: A common method is to distribute the clock via a balanced H-tree configuration [9] with amplifying buffers placed at the fanout points. The problem with this approach is that as more buffers are added to a clock path, larger skew results. The designers of the DEC Alpha CPU <ref> [193] </ref> took the opposite approach. The Alpha contains 1.68 million transistors and is fabricated in a .75 micron, 3.3 volt CMOS process. Even with three layers of metal, the chip is 16.8 mm by 13.9 mm.
Reference: [194] <author> J. Sparso and J. Staunstrup. </author> <title> Design and performance analysis of delay insensitive multi-ring structures. </title> <booktitle> In Proceedings of the Twenty-Sixth Annual Hawaii International Conference on System Sciences, </booktitle> <volume> volume I, </volume> <pages> pages 349-358. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1993. </year>
Reference-contexts: Research on asynchronous pipelines and datapaths is now proceeding in many directions. Several new asynchronous pipelining schemes have been proposed. Some emphasize low-power [65, 72] while others emphasize high-performance [53, 228, 72, 135]. In addition, several generalizations to asynchronous pipeline structures have been proposed: rings [220], multi-rings <ref> [194] </ref> and 2-dimensional micropipelines [76]. Techniques to reduce the communication overhead between stages have been developed [220, 55, 79]. Liebchen and Gopalakrishnan have proposed a reordering pipeline [109] which allows the freezing and dynamic reordering of data within the pipe using "LockC" elements.
Reference: [195] <author> R.F. Sproull, I.E. Sutherland, and C.E. Molnar. </author> <title> The counterflow pipeline processor architecture. </title> <journal> IEEE Design & Test of Computers, </journal> <volume> 11(3) </volume> <pages> 48-59, </pages> <year> 1994. </year> <title> [196] staff. New Products. </title> <journal> IEEE Computer, </journal> <volume> 25(1), </volume> <year> 1992. </year>
Reference-contexts: Charlie's work has provided both a solid foundation for the field as well as an inspiration to continue. At the time of his death, he was one of the creative leaders of the asynchronous circuits group at Sun Microsystems Laboratories, Inc. <ref> [195] </ref>. His influence will be sorely missed. 12 when the environment responds to the circuit. The most general category is an asynchronous circuit [206]. These circuits contain no global clock. However, they may make use of timing assumptions both within the circuit and in the interaction between circuit and environment. <p> This approach was also used by Ken Stevens in the design of the Post Office chip [52], and several variants of 19 the multiple ME element theme have been investigated by Charles Molnar at Sun Laboratories for the counterflow pipeline processor <ref> [195] </ref>. Perhaps some of the best work on cascaded arbiters and nacking arbiters has been performed by Robert Shapiro and Hartmann Genrich [190, 189]. Sadly this work has not been published in an available forum. <p> Such pipelines have been used by several researchers in the design of asynchronous microprocessors. Sutherland, Sproull, Molnar, and others at Sun Labs have recently designed a "counterflow microprocessor" based on mi-cropipelines <ref> [195] </ref>. Micropipelines also form the basis for the Manchester ARM microprocessors, developed by Furber and the AMULET group [70, 71, 159]. control is indicated. In practice, a bundled datapath is also used, along with event-controlled registers to store the data as it propagates down the pipe. <p> Sutherland, Sproull, Molnar, and others at Sun Labs have been developing an asynchronous Counterflow Pipeline Processor <ref> [195] </ref>. The architecture is based on a novel looped micropipeline, which 39 synchronizes instructions and data flowing in opposite directions. The processor makes careful use of arbiters to regulate the synchronization.
Reference: [197] <author> K. Stevens. </author> <title> Practical Verification and Synthesis of Low Latency Asynchronous Systems. </title> <type> PhD Thesis, </type> <institution> Computer Science Department, University of Calgary, </institution> <year> 1994. </year>
Reference-contexts: Dill also introduced a theory of complete trace structures [58], based on Buchi automata, which can model general liveness properties. Although these general verification algorithms may be too expensive to apply in practice, a verifier has been developed for a constrained class of specifications <ref> [197] </ref>. Other methods use a restricted notion of liveness that can be easily checked [62, 77, 226]. A method which uses Signal Graphs for verification of properties of speed-independent circuits has been proposed by Kishinevsky et al. [96]. <p> Another approach, by Kol, Ginosar and Samuel [98], uses state charts to verify both safety and liveness properties. An alternative verification method based on CCS has been proposed by Birtwistle, Stevens, et al. <ref> [198, 197] </ref>. CCS has been successfully used for the specification of several asynchronous designs, including a token ring arbiter and SCSI controller. Specifications can then be checked for deadlock, safety and liveness properties using a modal logic.
Reference: [198] <author> K. Stevens, J. Aldwinckle, G. Birtwistle, and Y. Liu. </author> <title> Designing parallel specifications in CCS. </title> <booktitle> In Proceedings of Canadian Conference on Electrical and Computer Engineering, </booktitle> <address> Vancouver, </address> <year> 1993. </year>
Reference-contexts: Another approach, by Kol, Ginosar and Samuel [98], uses state charts to verify both safety and liveness properties. An alternative verification method based on CCS has been proposed by Birtwistle, Stevens, et al. <ref> [198, 197] </ref>. CCS has been successfully used for the specification of several asynchronous designs, including a token ring arbiter and SCSI controller. Specifications can then be checked for deadlock, safety and liveness properties using a modal logic.
Reference: [199] <author> K.S. Stevens, S.V. Robison, and A.L. Davis. </author> <title> The post office communication support for distributed ensemble architectures. </title> <booktitle> In Sixth International Conference on Distributed Computing Systems, </booktitle> <year> 1986. </year>
Reference-contexts: The result is an asynchronous pipeline structure similar to synchronous pipeline circuits. The goal of all pipeline circuits is the increase in throughput performance. Still, most designers would agree that both 2- and 4-cycle protocols have advantages over the other in particular circuits. Certain design styles [48] and designs <ref> [199] </ref> show that the 2-cycle protocols can coexist in the same system, albeit on different interfaces. Numerous 2-cycle to 4-cycle (and vice versa) conversion circuits exist and can be used for interfaces where performance is not critical, since the circuits do add some latency to the interface operation.
Reference: [200] <author> I.E. Sutherland. </author> <title> Micropipelines. </title> <journal> Communications of the ACM, </journal> <volume> 32(6) </volume> <pages> 720-738, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: The same is true for transitions on the acknowledge wire. 2-cycle signaling is particularly useful for high-speed micropipelines, as pointed out by Ivan Sutherland in his Turing Award paper <ref> [200] </ref>. 2-cycle proponents argue that that 2-cycle signaling is better from both a power and a performance standpoint, since every transition represents a meaningful event and no transitions or power are consumed in returning to zero, since there is no resetting of the handshake link. <p> Of course, new overhead may be introduced, since each stage must now tell its neighbor when it is ready. Sutherland introduced an elegant and influential approach to building asynchronous pipelines, which he called micropipelines <ref> [200] </ref>. A micropipeline has alternating computation stages separated by storage elements and control circuitry. This approach uses transition-signaling for control along with bundled data. Sutherland describes several designs for the storage elements, called "event-controlled registers", which respond symmetrically to rising and falling transitions on inputs. <p> Williams [220], Martin [123] and van Berkel [211] have used 4-phase handshaking (the "return-to-zero" protocol) between stages. An alternative two-phase signaling scheme, called LEDR (level-encoded dual-rail), was introduced to combine advantages of both transition-signaling and four-phase [56]. Asynchronous pipelines have been designed for numerous applications: multiplication <ref> [200, 145] </ref>, division [221], and DSP [211, 131]. The Williams and Horowitz self-timed divider [221] is especially impressive: the fabricated chip was twice as fast as comparable synchronous designs. Research on asynchronous pipelines and datapaths is now proceeding in many directions. Several new asynchronous pipelining schemes have been proposed.
Reference: [201] <author> M.A. Tapia. </author> <title> Synthesis of asynchronous sequential systems using boolean calculus. </title> <booktitle> In 14th Asilomar Conference on Circuits, Systems and Computers, </booktitle> <pages> pages 205-209, </pages> <month> November </month> <year> 1980. </year>
Reference-contexts: Unlike a synchronous design, the clock is aperiodic, being generated as needed for the given computations. A block diagram of a self-synchronized machine is shown in Figure 11. Both SIC <ref> [82, 201] </ref> and MIC [3, 41, 169, 208] self-synchronized machines have been proposed. In a related approach, the local clock is replaced by an explicit external completion signal [105]. Other researchers have developed hybrid mixed-operation 23 mode machines [224, 37].
Reference: [202] <author> M. Theobald, S.M. Nowick, and T. Wu. Espresso-HF: </author> <title> a heuristic hazard-free minimizer for two-level logic. </title> <booktitle> In 33rd ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 71-76, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: An exact hazard-free two-level minimization algorithm was developed by Nowick and Dill [153]. The algorithm finds an exactly minimum-cost cover which is hazard-free for a set of MIC transitions, if a solution exists. A heuristic hazard-free two-level minimization algorithm has also been developed <ref> [202] </ref>. There is a rich literature on multi-level hazard-free circuits as well, and several synthesis methods have been proposed. One approach is to start with a hazard-free circuit (for example, a two-level circuit), and apply hazard-non-increasing multi-level transformations [206, 19, 103]. <p> The minimizer has been refined into a CAD package called hfmin [68], which includes multi-output and multi-valued minimization and uses highly-optimized synchronous tools such as mincov [180] to solve substeps. A heuristic hazard-free minimizer, espresso-hf, 25 has also been developed <ref> [202] </ref>. Yun and Dill [229] later proposed an alternative implementation style for burst-mode machines, called a 3D machine. These machines are named after the 3-dimensional flow table used in their synthesis. Unlike locally-clocked machines, these are Huffman machines, with no local clock or latches. <p> A number of CAD optimization algorithms have been developed, which have been used in burst-mode synthesis. These include: optimal state assignment [68]; hazard-free 2-level logic minimization, both exact (hfmin [153, 68]) and heuristic (espresso-hf <ref> [202] </ref>); hazard-free multi-level logic optimization [103, 110]; and hazard non-increasing technology mapping [191, 102, 14], which enables more modern standard cell methodologies to be utilized. Davis, Marshall, Coates and Siegel [117] have built a CAD framework to incorporate all of the burst-mode synthesis methods.
Reference: [203] <author> J.A. Tierno and A.J. Martin. </author> <title> Low-energy asynchronous memory design. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async94), </booktitle> <pages> pages 176-185. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: Much of this work is focused on low-power design, including designs for a digital compact cassette (DCC) error corrector [213], an infrared communications chip [117], an FFT [137], a FIR Filter bank [147], and cache [74], microprocessor [123, 69] and memory designs <ref> [203] </ref>. Others have developed techniques which use novel low-power devices, such as RSFQ [114]. 37 Nowick introduced a method for high-performance design, called speculative completion, which uses a single-rail bundled datapath but also allows early completion [149].
Reference: [204] <author> J.H. Tracey. </author> <title> Internal state assignments for asynchronous sequential machines. </title> <journal> IEEE Transactions on Electronic Computers, </journal> <volume> EC-15:551-560, </volume> <month> August </month> <year> 1966. </year>
Reference-contexts: When a state machine goes from one state to another, several state bits may change. If the machine may stabilize incorrectly in a transient state, a critical race occurs. Critical races are eliminated using specialized state encodings, such as one-hot [206], one-shot [206], Liu [112] or Tracey <ref> [204] </ref> critical race-free codes. These codes often require extra bits. A second type of sequential problem is an essential hazard [206]. Essential hazards arise if a machine has not fully absorbed an input change at the time the next-state begins to change.
Reference: [205] <author> J.T. Udding. </author> <title> A formal model for defining and classifying delay-insensitive circuits and systems. </title> <journal> Distributed Computing, </journal> <volume> 1(4) </volume> <pages> 197-204, </pages> <year> 1986. </year>
Reference-contexts: That is, an unbounded gate and wire delay model is assumed. The concept of a delay-insensitive circuit grows out of work by Clark and Molnar in the 1960's on Macromodules [42]. 1 DI systems have been formalized by Udding <ref> [205] </ref> and Dill [58]. The class of DI circuits built out of simple gates and operators is quite limited. In fact, it has been proven that almost no useful DI circuits can be built if one is restricted to a class of simple gates and operators [121, 25]. <p> Ebergen has applied his decomposition method to a number of designs, including modulo-n counters, stacks, committee schedulers [17] and token ring arbiters. A related algebraic approach was proposed by Udding and Josephs <ref> [205, 91] </ref>. Their method is based on a delay-insensitive algebra which formally characterizes a delay-insensitive system. Using axioms and lemmas, a specification is transformed into a provably correct delay-insensitive circuit. An alternative speed-independent algebra has also been proposed [89]. Proof methods for recursively-defined DI specifications have been formally justified [116].
Reference: [206] <author> S.H. Unger. </author> <title> Asynchronous Sequential Switching Circuits. </title> <publisher> Wiley-Interscience, </publisher> <address> New York, NY, </address> <year> 1969. </year>
Reference-contexts: Therefore, a delay model is critical in defining the dynamic behavior of an asynchronous circuit. There are two fundamental models of delay: the pure delay model and the inertial delay model <ref> [206, 182] </ref>. A pure delay can delay the propagation of a waveform, but does not otherwise alter it. An inertial delay can alter the shape of a waveform by attenuating short glitches. More formally, an inertial delay has a threshold period, ffi. <p> If the environment is allowed to respond to a circuit's outputs without any timing constraints, the two interact in input/output mode [24]. Otherwise, environmental timing constraints are assumed. The most common example is fundamental mode <ref> [126, 206] </ref> where the environment must wait for a circuit to stabilize before responding to circuit outputs. <p> At the time of his death, he was one of the creative leaders of the asynchronous circuits group at Sun Microsystems Laboratories, Inc. [195]. His influence will be sorely missed. 12 when the environment responds to the circuit. The most general category is an asynchronous circuit <ref> [206] </ref>. These circuits contain no global clock. However, they may make use of timing assumptions both within the circuit and in the interaction between circuit and environment. Latches and flip-flops, with setup and hold times, belong to this class. <p> As a result, any glitch may be treated by the system as a real change in value, and may cause the system to malfunction. The potential for a glitch in an asynchronous design is called a hazard <ref> [206] </ref>. Hazards were first studied in the context of asynchronous state machines, and much of the original work focused on combinational logic. Sequential hazards are also possible in asynchronous state machines; these are called critical races or essential hazards, and will be discussed later. <p> Several approaches have been used to eliminate combinational hazards. First, inertial delays may be used to attenuate undesired "spikes"; much of the early work in asynchronous synthesis relied on use of inertial delays (see Unger <ref> [206] </ref>). Second, if a bounded delay model is assumed, hazards may be "fixed" by adding appropriate delays to slow down certain paths in a circuit. Third, hazards are sometimes tolerated where they will do no harm; this approach was also used in some early work. <p> This product is used to cover the K-map transition, ABC : 011 ! 111. The original theory of combinational hazards for SIC transitions was developed by Huffman, Unger and McCluskey (see <ref> [206] </ref>). The above example indicates how to eliminate an SIC static-1 hazard, that is, for an input change where the function makes a 1 ! 1 transition. In this case, some product must cover (i.e., completely contain) the entire transition. <p> There are 3 remaining types of transitions, where the output makes a 0 ! 0, 0 ! 1, or 1 ! 0 transition. It has been shown that, given an arbitrary AND-OR implementation, no hazard will occur for any of these 3 transitions <ref> [206] </ref>. 2 That is, only static-1 SIC hazards must be avoided during synthesis of an AND-OR circuit; other SIC transitions will be hazard-free. 4.3.2 MIC Hazards The case of a multiple-input change (MIC) is much more complex: both static and dynamic hazards must be eliminated. <p> destination input value, N , where several inputs change monotonically between M and N . 2 More precisely, these realizations will be hazard-free as long as no AND gate contains a pair of complementary literals. 14 The first problem which arises when considering MIC transitions is that of function hazards <ref> [206] </ref>. Consider the Karnaugh map in Figure 5 (a). An example of an MIC transition has start point ABCD = 0010 and end point ABCD = 0111, and two changing inputs: B and D. <p> Such an MIC transition is said to have a function hazard. It has been shown that, assuming gates and wires may have arbitrary delay, there is no guaranteed method to synthesize a circuit which is hazard-free for a transition with a function-hazard <ref> [206] </ref>. Intuitively, a function hazard is a glitch that is inherent in the Karnaugh map specification itself. If input D changes much later than input B, there is no way to prevent the function output from glitching. 3 In summary, function hazards cannot be avoided. <p> For the 1 ! 0 and 0 ! 1 cases, every product which intersects the transition must also contain its start or end point. For the remaining case, 0 ! 0, no hazard will occur in any AND-OR realization <ref> [206] </ref>. These conditions suffice to eliminate any single MIC hazard. Unfortunately, when attempting to eliminate hazards for several MIC transitions simultaneously, these covering conditions may be unsatisfiable. That is, for a given set of MIC transitions, a hazard-free cover may not exist [206, 66, 153]. <p> These conditions suffice to eliminate any single MIC hazard. Unfortunately, when attempting to eliminate hazards for several MIC transitions simultaneously, these covering conditions may be unsatisfiable. That is, for a given set of MIC transitions, a hazard-free cover may not exist <ref> [206, 66, 153] </ref>. An exact hazard-free two-level minimization algorithm was developed by Nowick and Dill [153]. The algorithm finds an exactly minimum-cost cover which is hazard-free for a set of MIC transitions, if a solution exists. A heuristic hazard-free two-level minimization algorithm has also been developed [202]. <p> A heuristic hazard-free two-level minimization algorithm has also been developed [202]. There is a rich literature on multi-level hazard-free circuits as well, and several synthesis methods have been proposed. One approach is to start with a hazard-free circuit (for example, a two-level circuit), and apply hazard-non-increasing multi-level transformations <ref> [206, 19, 103] </ref>. These transformations transform a hazard-free two-level circuit into a hazard-free multi-level circuit. Alternatively, a hazard-free multi-level circuit can be synthesized directly, using binary decision diagrams (BDDs) [110]. <p> The efforts of Muller and Huffman spurred considerable theoretical debate in the switching circuit literature. The next notable event from a modern perspective was the seminal work by Stephen Unger that resulted in the publication of his classic text <ref> [206] </ref>. In this book, Unger provided a detailed method for synthesizing single-input change asynchronous sequential switching circuits. He provided a partial view of what would be required for the larger domain of multiple-input change circuits. <p> This view of computation is state-based: a machine is in some state, it receives inputs, generates outputs, and moves to a new state. Such specifications are naturally described by a flow table or state table <ref> [206] </ref>. These tables define the behavior of outputs and next state as a function of the inputs and current state. Current and next states are described symbolically (see Figure 9). The earliest asynchronous state machine implementations were Huffman machines (see [206]). 21 These machines consist of combinational logic, primary inputs, primary <p> are naturally described by a flow table or state table <ref> [206] </ref>. These tables define the behavior of outputs and next state as a function of the inputs and current state. Current and next states are described symbolically (see Figure 9). The earliest asynchronous state machine implementations were Huffman machines (see [206]). 21 These machines consist of combinational logic, primary inputs, primary outputs and fed-back state variables. No latches or flip-flops are used: state is stored on feedback loops, which may have added delay elements. A block diagram of a Huffman machine is shown in Figure 10. <p> Once the input has changed, no further inputs may change until the machine has stabilized. This operating mode is highly restrictive, but simplifies the elimination of hazards. A summary of SIC asynchronous state machines can be found in Unger <ref> [206] </ref>. A multiple-input change (MIC) machine allows several inputs to change concurrently. Once the inputs change, no further inputs may change until the machine has stabilized. This approach allows greater concurrency, but it is still quite restricted. <p> As mentioned earlier, SIC hazards are easier to eliminate. Hazards are eliminated by hazard-free synthesis or by using inertial delays to filter out glitches. Alternatively, many traditional synthesis methods ignore hazards on outputs, and only eliminate hazards in the next-state logic. Such machines are called S-proper or properly-realizable <ref> [206] </ref>. Second, since asynchronous state machines have state, sequential hazards must be addressed. When a state machine goes from one state to another, several state bits may change. If the machine may stabilize incorrectly in a transient state, a critical race occurs. <p> When a state machine goes from one state to another, several state bits may change. If the machine may stabilize incorrectly in a transient state, a critical race occurs. Critical races are eliminated using specialized state encodings, such as one-hot <ref> [206] </ref>, one-shot [206], Liu [112] or Tracey [204] critical race-free codes. These codes often require extra bits. A second type of sequential problem is an essential hazard [206]. Essential hazards arise if a machine has not fully absorbed an input change at the time the next-state begins to change. <p> When a state machine goes from one state to another, several state bits may change. If the machine may stabilize incorrectly in a transient state, a critical race occurs. Critical races are eliminated using specialized state encodings, such as one-hot <ref> [206] </ref>, one-shot [206], Liu [112] or Tracey [204] critical race-free codes. These codes often require extra bits. A second type of sequential problem is an essential hazard [206]. Essential hazards arise if a machine has not fully absorbed an input change at the time the next-state begins to change. <p> Critical races are eliminated using specialized state encodings, such as one-hot <ref> [206] </ref>, one-shot [206], Liu [112] or Tracey [204] critical race-free codes. These codes often require extra bits. A second type of sequential problem is an essential hazard [206]. Essential hazards arise if a machine has not fully absorbed an input change at the time the next-state begins to change. In effect, the machine sees the new state before the combinational logic has stabilized from the input change.
Reference: [207] <author> S.H. Unger. </author> <title> Asynchronous sequential switching circuits with unrestricted input changes. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-20(12):1437-1444, </volume> <month> December </month> <year> 1971. </year>
Reference-contexts: A flow table is reduced through state minimization. Symbolic states are assigned binary codes using state assignment. Finally, the resulting Boolean functions are implemented in combinational logic using logic minimization. There are several possible operating modes for an asynchronous state machine. Unger <ref> [207] </ref> proposed a hierarchy, based on the kinds of input changes that a machine can accept. In a single-input change (SIC) machine, only one input may change at a time. Once the input has changed, no further inputs may change until the machine has stabilized. <p> Finally, an unrestricted-input change (UIC) machine allows arbitrary input changes, as long as no one input changes more than once in some given time interval, ffi. This behavior is quite general, but hazard elimination is problematic. UIC designs were first proposed by Unger <ref> [207] </ref>. These designs are 22 not currently practical: they require the use of large inertial delays and have not been proven to avoid metastability problems. In any asynchronous state machine, the problem of hazards must be addressed. First is the problem of combinational hazards.
Reference: [208] <author> S.H. Unger. </author> <title> Self-synchronizing circuits and nonfundamental mode operation. </title> <journal> IEEE Transactions on Computers (Correspondence), </journal> <volume> C-26(3):278-281, </volume> <month> March </month> <year> 1977. </year>
Reference-contexts: Unlike a synchronous design, the clock is aperiodic, being generated as needed for the given computations. A block diagram of a self-synchronized machine is shown in Figure 11. Both SIC [82, 201] and MIC <ref> [3, 41, 169, 208] </ref> self-synchronized machines have been proposed. In a related approach, the local clock is replaced by an explicit external completion signal [105]. Other researchers have developed hybrid mixed-operation 23 mode machines [224, 37].
Reference: [209] <author> S.H. Unger. </author> <title> A building block approach to unclocked systems. </title> <booktitle> In Proceedings of the Twenty-Sixth Annual Hawaii International Conference on System Sciences, </booktitle> <volume> volume I, </volume> <pages> pages 339-348. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1993. </year>
Reference-contexts: Finally, low-power micropipeline structures have been introduced using adaptive scaling of supply voltage [146]. While pipelining is fundamental to high-performance systems, sequencing is the basic control operation in low-performance non-pipelined systems. A number of sequencer designs have been proposed <ref> [122, 211, 209, 161, 8, 64, 164] </ref>. There has been much recent research on asynchronous datapaths, beyond the above work on pipelines and sequencers. <p> A delay-insensitive microprocessor, TITAC, has been developed by Nanya et al. at Tokyo Institute of Technology [144]. The designers introduce several optimizations to improve performance. A different approach was proposed by Unger at Columbia University <ref> [209] </ref>. His "computers without clocks" use traditional asynchronous state machines for control logic, and a building block approach to design rather than compilation schemes. This approach requires a spectrum of timing assumptions to insure correct designs.
Reference: [210] <author> C.H. van Berkel and R.W.J.J. Saeijs. </author> <title> Compilation of communicating processes into delay-insensitive circuits. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pages 157-162. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1988. </year>
Reference-contexts: This project created a digital "Lego" kit of modules. These modules could (and were) rapidly used to configure special-purpose computing engines, as well as general-purpose computers. The project took a significant step forward and provided a sound foundation for the numerous macromodular synthesis approaches being investigated today <ref> [23, 210, 61] </ref>. Yet another noteworthy pioneer was Chuck Seitz, whose MIT dissertation [186] introduced a Petri Net like formalism which proved to be extremely useful in the design and analysis of asynchronous circuits. In his subsequent academic career, Prof. <p> This method allows global shared variables, and uses flow analysis techniques to optimize resource allocation. A different compiler-based approach was developed by van Berkel, Rem and others <ref> [210, 211, 161, 212] </ref> at Philips Research Laboratories and Eindhoven University of Technology, using the Tangram language. Tangram, based on CSP, is a specification language for concurrent systems.
Reference: [211] <author> K. van Berkel. </author> <title> Handshake Circuits. An asynchronous architecture for VLSI programming. </title> <booktitle> International Series on Parallel Computation 5. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: Another advantage is that even for an active system, only the subsystems that are required for the computation at hand will dissipate any power. Researchers such as Kees van Berkel <ref> [211] </ref> and Steve Furber [70] are pursuing asynchronous circuit designs in an attempt to exploit this feature. The final motivation of asynchronous design is the inherent ease of composing asynchronous subsystems into larger asynchronous systems. <p> This case represents the worst form of isochronic fork, since one of the forks is contained within the C element circuit module while the other is exported to outside modules. Martin [122] and van Berkel <ref> [211] </ref> have used QDI circuits extensively and have described their advantages and disadvantages [121, 214]. A speed-independent (SI) circuit is one which operates correctly regardless of gate delays; wires are assumed to have zero or negligible delay. SI circuits were introduced by David Muller in the 1950's (see [132]). <p> This method allows global shared variables, and uses flow analysis techniques to optimize resource allocation. A different compiler-based approach was developed by van Berkel, Rem and others <ref> [210, 211, 161, 212] </ref> at Philips Research Laboratories and Eindhoven University of Technology, using the Tangram language. Tangram, based on CSP, is a specification language for concurrent systems. <p> The resulting configuration is shown in Figure 18 (d). In practice, more complicated scenarios are possible, since data may be added and removed from the pipeline concurrently. Although micropipelines use transition-signaling, other signaling conventions have been used in asynchronous pipelines as well. Williams [220], Martin [123] and van Berkel <ref> [211] </ref> have used 4-phase handshaking (the "return-to-zero" protocol) between stages. An alternative two-phase signaling scheme, called LEDR (level-encoded dual-rail), was introduced to combine advantages of both transition-signaling and four-phase [56]. Asynchronous pipelines have been designed for numerous applications: multiplication [200, 145], division [221], and DSP [211, 131]. <p> An alternative two-phase signaling scheme, called LEDR (level-encoded dual-rail), was introduced to combine advantages of both transition-signaling and four-phase [56]. Asynchronous pipelines have been designed for numerous applications: multiplication [200, 145], division [221], and DSP <ref> [211, 131] </ref>. The Williams and Horowitz self-timed divider [221] is especially impressive: the fabricated chip was twice as fast as comparable synchronous designs. Research on asynchronous pipelines and datapaths is now proceeding in many directions. Several new asynchronous pipelining schemes have been proposed. <p> Finally, low-power micropipeline structures have been introduced using adaptive scaling of supply voltage [146]. While pipelining is fundamental to high-performance systems, sequencing is the basic control operation in low-performance non-pipelined systems. A number of sequencer designs have been proposed <ref> [122, 211, 209, 161, 8, 64, 164] </ref>. There has been much recent research on asynchronous datapaths, beyond the above work on pipelines and sequencers.
Reference: [212] <author> K. van Berkel and A. Bink. </author> <title> Single-track handshake signaling with application to micropipelines. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async96), </booktitle> <pages> pages 122-133. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1996. </year> <month> 56 </month>
Reference-contexts: This method allows global shared variables, and uses flow analysis techniques to optimize resource allocation. A different compiler-based approach was developed by van Berkel, Rem and others <ref> [210, 211, 161, 212] </ref> at Philips Research Laboratories and Eindhoven University of Technology, using the Tangram language. Tangram, based on CSP, is a specification language for concurrent systems.
Reference: [213] <author> K. van Berkel, R. Burgess, J. Kessels, A. Peeters, M. Roncken, and F. Schalij. </author> <title> Asynchronous Circuits for Low Power: a DCC Error Corrector. </title> <journal> IEEE Design & Test, </journal> <volume> 11(2) </volume> <pages> 22-32, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: The Tangram compiler has been successfully used at Philips for several experimental DSP designs for portable electronics, including a systolic RSA Converter, counters, decoders, image generators, and an error corrector for a digital compact cassette player <ref> [213] </ref>. A major goal this work is rapid turnaround time and low-power implementation. Even though some peephole optimizations have been developed, Tangram is basically a syntax-directed translation method. <p> There has been much recent research on asynchronous datapaths, beyond the above work on pipelines and sequencers. Much of this work is focused on low-power design, including designs for a digital compact cassette (DCC) error corrector <ref> [213] </ref>, an infrared communications chip [117], an FFT [137], a FIR Filter bank [147], and cache [74], microprocessor [123, 69] and memory designs [203]. <p> The method was used in the design of a DCC error corrector, where it led to 99.9% stuck-at output fault coverage at an expense of less than 3% additional area <ref> [175, 213] </ref>. More realistic fault models, such as for I DDQ testing, have recently been addressed as well [177].
Reference: [214] <author> Kees van Berkel. </author> <title> Beware the isochronic fork. Integration, </title> <journal> the VLSI journal, </journal> <volume> 13(2) </volume> <pages> 103-128, </pages> <year> 1992. </year>
Reference-contexts: This case represents the worst form of isochronic fork, since one of the forks is contained within the C element circuit module while the other is exported to outside modules. Martin [122] and van Berkel [211] have used QDI circuits extensively and have described their advantages and disadvantages <ref> [121, 214] </ref>. A speed-independent (SI) circuit is one which operates correctly regardless of gate delays; wires are assumed to have zero or negligible delay. SI circuits were introduced by David Muller in the 1950's (see [132]). Muller's formulation only considered deterministic input and output behavior.
Reference: [215] <author> P. Vanbekbergen, F. Catthoor, G. Goossens, and H. De Man. </author> <title> Optimized synthesis of asynchronous control circuits from graph-theoretic specifications. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer-Aided Design, </booktitle> <pages> pages 184-187. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1990. </year>
Reference-contexts: Marked graphs 27 are used to model concurrency, but not choice. That is, a marked graph cannot model that one of several possible inputs (or outputs) may change in some state. Examples include Seitz's M-Nets [185] and Rosenblum and Yakovlev's Signal Graphs [179]. Vanbekbergen et al. <ref> [215] </ref> introduced the notion of a lock class to synthesize designs from marked graphs. More general classes of Petri nets include Molnar et al.'s I-Nets [134] and Chu's Signal Transition Graphs or STGs [38, 39]. These nets allow both concurrency and a limited form of choice.
Reference: [216] <author> P. Vanbekbergen, B. Lin, G. Goossens, and H. De Man. </author> <title> A generalized state assignment theory for transformations on signal transition graphs. </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 112-117. </pages> <publisher> IEEE Computer Society, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: Originally, this work focused on determinate specifications, having no input or output choice, based on Muller's semi-modular lattice formulations (see [132]). More recent research allows generalized behavior with choice. A number of optimized synthesis algorithms have been developed. Lavagno et al. [107], Van-bekbergen et al. <ref> [216] </ref>, Chu et al. [40] and Puri and Gu [165] have each developed algorithms for state minimization and state assignment from STG specifications. A partitioning algorithm for STG-based specifications was proposed by Puri and Gu [166].
Reference: [217] <institution> V.I. </institution> <address> Varshavsky, M.A. Kishinevsky, V.B. Marakhovsky, V.A. Peschansky, </address> <note> L.Y. </note> <author> Rosenblum, A.R. Taubin, and B.S. Tzirlin. </author> <title> Self-timed Control of Concurrent Processes. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1990. </year> <note> Russian edition: </note> <year> 1986. </year>
Reference-contexts: Sutherland and Sproull have introduced a notation for composite Petri nets called "snippets". Others allow timing constraints for specification and synthesis, using a related Event-Rule formalism [141]. In addition, some researchers are using state graphs for specifications, as an alternative to Petri nets <ref> [217, 12, 100] </ref>. State graphs allow the direct specification of interleaved behavior, avoiding some of the structural complexity of Petri nets. The target designs are usually speed-independent gate-level implementations. Originally, this work focused on determinate specifications, having no input or output choice, based on Muller's semi-modular lattice formulations (see [132]). <p> Lavagno has developed an influential CAD system for STG synthesis, which has been incorporated into the Berkeley SIS tool package [108, 188]. Several speed-independent synthesis methods have been developed, which insure hazard-freedom at the gate-level. Much of this work has been pursued by Kishinevsky, Kondratyev, Taubin and Var-shavsky <ref> [97, 217] </ref>, by Beerel and Meng [12], and by Cortadella, Lavagno, Lin, Vanbekbergen, Yakovlev and others [100, 44]. These methods have been effectively applied to a number of designs.
Reference: [218] <author> Tom Verhoeff. </author> <title> Delay-insensitive codes an overview. </title> <journal> Distributed Computing, </journal> <volume> 3(1) </volume> <pages> 1-8, </pages> <year> 1988. </year>
Reference-contexts: Concurrent transitions on both the left and right bits are illegal. Sending a 0 or a 1 must be followed by a transition on the acknowledge wire before another bit can be transmitted. Alternative encoding schemes have been proposed as well <ref> [218, 56] </ref>. Dual rail signaling is insensitive to the delays on any wire and therefore is more robust when assumptions like the bundling constraint cannot be guaranteed. The receiver will need to check for validity of all n-bits before using the data or asserting the acknowledge.
Reference: [219] <author> E. Verlind, G. de Jong, and B. Lin. </author> <title> Efficient partial enumeration for timing analysis of asynchronous systems. </title> <booktitle> In 33rd ACM/IEEE Design Automation Conference, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: Timing analysis and verification methods for asynchronous state machines with bounded delays were developed by Devadas et al. [57] and Chakraborty et al. [31, 30]. Methods using Timed Petri Nets have been developed by Rokicki [173], Semenov et al. [187] and Verlind et al. <ref> [219] </ref>. Williams [220] and Burns [27] have introduced methods to analyze the performance of systems. A notion of timing-reliability was proposed by Kuwako and Nanya [104]. Timing and hazard analysis tools have been developed by Ashkinazy et al. [7].
Reference: [220] <author> T.E. Williams. </author> <title> Self-timed rings and their application to division. </title> <type> Technical Report CSL-TR-91-482, </type> <institution> Computer Systems Laboratory, Stanford University, </institution> <year> 1991. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: The resulting configuration is shown in Figure 18 (d). In practice, more complicated scenarios are possible, since data may be added and removed from the pipeline concurrently. Although micropipelines use transition-signaling, other signaling conventions have been used in asynchronous pipelines as well. Williams <ref> [220] </ref>, Martin [123] and van Berkel [211] have used 4-phase handshaking (the "return-to-zero" protocol) between stages. An alternative two-phase signaling scheme, called LEDR (level-encoded dual-rail), was introduced to combine advantages of both transition-signaling and four-phase [56]. <p> Research on asynchronous pipelines and datapaths is now proceeding in many directions. Several new asynchronous pipelining schemes have been proposed. Some emphasize low-power [65, 72] while others emphasize high-performance [53, 228, 72, 135]. In addition, several generalizations to asynchronous pipeline structures have been proposed: rings <ref> [220] </ref>, multi-rings [194] and 2-dimensional micropipelines [76]. Techniques to reduce the communication overhead between stages have been developed [220, 55, 79]. Liebchen and Gopalakrishnan have proposed a reordering pipeline [109] which allows the freezing and dynamic reordering of data within the pipe using "LockC" elements. <p> Some emphasize low-power [65, 72] while others emphasize high-performance [53, 228, 72, 135]. In addition, several generalizations to asynchronous pipeline structures have been proposed: rings [220], multi-rings [194] and 2-dimensional micropipelines [76]. Techniques to reduce the communication overhead between stages have been developed <ref> [220, 55, 79] </ref>. Liebchen and Gopalakrishnan have proposed a reordering pipeline [109] which allows the freezing and dynamic reordering of data within the pipe using "LockC" elements. Finally, low-power micropipeline structures have been introduced using adaptive scaling of supply voltage [146]. <p> Timing analysis and verification methods for asynchronous state machines with bounded delays were developed by Devadas et al. [57] and Chakraborty et al. [31, 30]. Methods using Timed Petri Nets have been developed by Rokicki [173], Semenov et al. [187] and Verlind et al. [219]. Williams <ref> [220] </ref> and Burns [27] have introduced methods to analyze the performance of systems. A notion of timing-reliability was proposed by Kuwako and Nanya [104]. Timing and hazard analysis tools have been developed by Ashkinazy et al. [7].
Reference: [221] <author> T.E. Williams and M.A. Horowitz. </author> <title> A zero-overhead self-timed 54b 160ns CMOS divider. </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> 26(11) </volume> <pages> 1651-1661, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: Williams [220], Martin [123] and van Berkel [211] have used 4-phase handshaking (the "return-to-zero" protocol) between stages. An alternative two-phase signaling scheme, called LEDR (level-encoded dual-rail), was introduced to combine advantages of both transition-signaling and four-phase [56]. Asynchronous pipelines have been designed for numerous applications: multiplication [200, 145], division <ref> [221] </ref>, and DSP [211, 131]. The Williams and Horowitz self-timed divider [221] is especially impressive: the fabricated chip was twice as fast as comparable synchronous designs. Research on asynchronous pipelines and datapaths is now proceeding in many directions. Several new asynchronous pipelining schemes have been proposed. <p> An alternative two-phase signaling scheme, called LEDR (level-encoded dual-rail), was introduced to combine advantages of both transition-signaling and four-phase [56]. Asynchronous pipelines have been designed for numerous applications: multiplication [200, 145], division <ref> [221] </ref>, and DSP [211, 131]. The Williams and Horowitz self-timed divider [221] is especially impressive: the fabricated chip was twice as fast as comparable synchronous designs. Research on asynchronous pipelines and datapaths is now proceeding in many directions. Several new asynchronous pipelining schemes have been proposed. Some emphasize low-power [65, 72] while others emphasize high-performance [53, 228, 72, 135].
Reference: [222] <author> A. Yakovlev, A. Petrov, and L. Lavagno. </author> <title> A Low Latency Asynchronous Arbitration Circuit. </title> <journal> IEEE Trans. on VLSI Systems, </journal> <volume> 2(3) </volume> <pages> 372-377, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: Another interesting approach to the low-latency cascaded arbitration problem has been taken by Yakovlev, Petrov, and Lavagno <ref> [222] </ref>. Their circuits are speed-independent and have an improved response delay at the input request-grant handshake link due to two factors. First, request propagation is performed in parallel with the start of arbitration.
Reference: [223] <author> A.V. Yakovlev. </author> <title> On limitations and extensions of STG model for designing asynchronous control circuits. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pages 396-400. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: Several extensions have been proposed to describe more general behavior than is possible with the original STG's. These include the use of "epsilon" and "dummy" transitions [38], "don't-care" and "toggle" transitions [136], OR-causality <ref> [223] </ref> and semaphore transitions [46]. Sutherland and Sproull have introduced a notation for composite Petri nets called "snippets". Others allow timing constraints for specification and synthesis, using a related Event-Rule formalism [141].
Reference: [224] <author> O. Yenersoy. </author> <title> Synthesis of asynchronous machines using mixed-operation mode. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-28(4):325-329, </volume> <month> April </month> <year> 1979. </year>
Reference-contexts: Both SIC [82, 201] and MIC [3, 41, 169, 208] self-synchronized machines have been proposed. In a related approach, the local clock is replaced by an explicit external completion signal [105]. Other researchers have developed hybrid mixed-operation 23 mode machines <ref> [224, 37] </ref>. Self-synchronized machines tend to have a simpler construction but a greater overhead than Huffman machines. In general, asynchronous state machines offer a number of attractive features. First, input-to-output latency is often low: if no delays are added to inputs or outputs, the delay is combinational.
Reference: [225] <author> C. Ykman-Couvreur, B. Lin, and H. De Man. ASSASSIN: </author> <title> a synthesis system for asynchronous control circuits. </title> <type> Technical report, </type> <institution> IMEC Laboratory, </institution> <month> September </month> <year> 1994. </year> <title> User and tutorial manual. </title>
Reference-contexts: The sustained research effort of Kishinevsky et al., pursued over many years in Russia and Japan, has been especially noteworthy, resulting in a collection of algorithms and tools which are making SI design practical. A general asynchronous CAD system, including speed-independent tools, has also been developed at IMEC Laboratory <ref> [225] </ref>.
Reference: [226] <author> T. Yoneda and T. Yoshikawa. </author> <title> Using partial orders for trace theoretic verification of asynchronous circuits. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async96), </booktitle> <pages> pages 152-163. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: Although these general verification algorithms may be too expensive to apply in practice, a verifier has been developed for a constrained class of specifications [197]. Other methods use a restricted notion of liveness that can be easily checked <ref> [62, 77, 226] </ref>. A method which uses Signal Graphs for verification of properties of speed-independent circuits has been proposed by Kishinevsky et al. [96]. Another approach, by Kol, Ginosar and Samuel [98], uses state charts to verify both safety and liveness properties.
Reference: [227] <author> M.L. Yu and P.A. Subrahmanyam. </author> <title> A path-oriented approach for reducing hazards in asynchronous designs. </title> <booktitle> In Proceedings of the 29th IEEE/ACM Design Automation Conference, </booktitle> <pages> pages 239-244. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: Several recent methods address this problem, using a simple-gate model which can model hazards due to actual delays in a collection of individual gates and wires. 28 Moon et al. [136] and Yu and Subrahmanyam <ref> [227] </ref> proposed heuristic techniques for gate-level hazard elimination for speed-independent design. Lavagno et al. [106] used logic synthesis algorithms, hazard analysis and added delays to avoid hazards, assuming bounded gate delays.
Reference: [228] <author> K.Y. Yun, P.A. Beerel, and J. Arceo. </author> <title> High-performance asynchronous pipeline circuits. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async96), </booktitle> <pages> pages 17-28. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: Research on asynchronous pipelines and datapaths is now proceeding in many directions. Several new asynchronous pipelining schemes have been proposed. Some emphasize low-power [65, 72] while others emphasize high-performance <ref> [53, 228, 72, 135] </ref>. In addition, several generalizations to asynchronous pipeline structures have been proposed: rings [220], multi-rings [194] and 2-dimensional micropipelines [76]. Techniques to reduce the communication overhead between stages have been developed [220, 55, 79].
Reference: [229] <author> K.Y. Yun and D.L. Dill. </author> <title> Automatic synthesis of 3D asynchronous finite-state machines. </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1992. </year> <month> 57 </month>
Reference-contexts: The minimizer has been refined into a CAD package called hfmin [68], which includes multi-output and multi-valued minimization and uses highly-optimized synchronous tools such as mincov [180] to solve substeps. A heuristic hazard-free minimizer, espresso-hf, 25 has also been developed [202]. Yun and Dill <ref> [229] </ref> later proposed an alternative implementation style for burst-mode machines, called a 3D machine. These machines are named after the 3-dimensional flow table used in their synthesis. Unlike locally-clocked machines, these are Huffman machines, with no local clock or latches. <p> Beerel and Yun have recently used burst-mode synthesis tools at Intel Corporation, including 3D <ref> [229, 230] </ref> and hfmin [153, 68], to design of an experimental high-performance instruction decoder.
Reference: [230] <author> K.Y. Yun and D.L. Dill. </author> <title> Unifying synchronous/asynchronous state machine synthesis. </title> <booktitle> In Pro--ceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 255-260. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1993. </year>
Reference-contexts: First, it requires strictly alternating bursts of inputs and outputs: concurrency occurs only within a burst. Second, as in many asynchronous design styles, there is no notion of "sampling"signal levels which may or may not change. Yun, Dill and Nowick <ref> [232, 230] </ref> introduced extended burst-mode specifications to eliminate these two restrictions. These generalized specifications allow a limited form of intermingled input and output changes, and provide greater concurrency. These designs also allow the sampling of level signals. <p> These generalized specifications allow a limited form of intermingled input and output changes, and provide greater concurrency. These designs also allow the sampling of level signals. Yun has extended his 3D synthesis algorithms and tools to handle extended burst-mode specifications <ref> [230] </ref>. His work includes performance-oriented optimizations targetted to multi-level implementations [233]. A novelty of Yun's method is that it can be used to synthesize controllers for mixed synchronous/asynchronous systems, where the global clock is one of the controller inputs [230]. <p> his 3D synthesis algorithms and tools to handle extended burst-mode specifications <ref> [230] </ref>. His work includes performance-oriented optimizations targetted to multi-level implementations [233]. A novelty of Yun's method is that it can be used to synthesize controllers for mixed synchronous/asynchronous systems, where the global clock is one of the controller inputs [230]. A number of CAD optimization algorithms have been developed, which have been used in burst-mode synthesis. <p> Beerel and Yun have recently used burst-mode synthesis tools at Intel Corporation, including 3D <ref> [229, 230] </ref> and hfmin [153, 68], to design of an experimental high-performance instruction decoder.
Reference: [231] <author> K.Y. Yun and D.L. Dill. </author> <title> A high-performance asynchronous SCSI controller. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Design, </booktitle> <pages> pages 44-49. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1995. </year>
Reference-contexts: Unlike locally-clocked machines, these are Huffman machines, with no local clock or latches. The synthesis method has been fully automated into a CAD tool and applied to several large designs, including an experimental SCSI controller at AMD Corporation <ref> [231] </ref>. A more recent unclocked burst-mode method, UCLOCK, was developed by Nowick and Coates [150]. The burst-mode approach allows greater concurrency than MIC designs, but it still has two main limitations. First, it requires strictly alternating bursts of inputs and outputs: concurrency occurs only within a burst.
Reference: [232] <author> K.Y. Yun, D.L. Dill, and S.M. Nowick. </author> <title> Practical generalizations of asynchronous state machines. </title> <booktitle> In The 1993 European Conference on Design Automation, </booktitle> <pages> pages 525-530. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> February </month> <year> 1993. </year>
Reference-contexts: First, it requires strictly alternating bursts of inputs and outputs: concurrency occurs only within a burst. Second, as in many asynchronous design styles, there is no notion of "sampling"signal levels which may or may not change. Yun, Dill and Nowick <ref> [232, 230] </ref> introduced extended burst-mode specifications to eliminate these two restrictions. These generalized specifications allow a limited form of intermingled input and output changes, and provide greater concurrency. These designs also allow the sampling of level signals.
Reference: [233] <author> K.Y. Yun, B. Lin, D.L. Dill, and S. Devadas. </author> <title> Performance-driven synthesis of asynchronous controllers. </title> <booktitle> In IEEE/ACM International Conference on Computer-Aided Design (ICCAD), </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: These designs also allow the sampling of level signals. Yun has extended his 3D synthesis algorithms and tools to handle extended burst-mode specifications [230]. His work includes performance-oriented optimizations targetted to multi-level implementations <ref> [233] </ref>. A novelty of Yun's method is that it can be used to synthesize controllers for mixed synchronous/asynchronous systems, where the global clock is one of the controller inputs [230]. A number of CAD optimization algorithms have been developed, which have been used in burst-mode synthesis.
References-found: 232

