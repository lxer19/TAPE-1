URL: ftp://ftp.cs.toronto.edu/pub/bonner/papers/views/sigmod91.ps
Refering-URL: http://www.cs.toronto.edu/DB/people/bonner/papers.html
Root-URL: 
Title: Objects and Views  
Author: Serge Abiteboul Anthony Bonner 
Date: 238-247.  
Note: Appears in Proceedings of ACM SIGMOD 1991, pages  
Address: 78153 Le Chesnay, France  
Affiliation: INRIA,  
Abstract: Object-oriented databases have been introduced primarily to ease the development of database applications. However, the difficulties encountered when, for instance, trying to restructure data or integrate databases demonstrate that the models being used still lack flexibility. We claim that the natural way to overcome these shortcomings is to introduce a sophisticated view mechanism. This paper presents such a mechanism, one which allows a programmer to restructure the class hierarchy and modify the behavior and structure of objects. The mechanism allows a programmer to specify attribute values implicitly, rather than storing them. It also allows him to introduce new classes into the class hierarchy. These virtual classes are populated by selecting existing objects from other classes and by creating new objects. Fixing the identify of new objects during database updates introduces subtle issues into view design. Our presentation, mostly informal, leans on a number of illustrative examples meant to emphasize the simplicity of our mechanism. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul, </author> <title> Virtuality in Object-Oriented Databases, </title> <booktitle> proc. VIemes Journees Bases de Donnees Avancees, </booktitle> <year> 1990. </year>
Reference: [2] <author> S. Abiteboul and P. Kanellakis, </author> <title> Object Identity as a Query Language Primitive, </title> <note> proc. ACM SIG-MOD 1989, to appear in Journal of the ACM. </note>
Reference-contexts: However, the concepts are general and apply to other models as well. Our work makes extensive use of existing mechanisms. Clearly, the query language [4] is an important component in specifying views. In addition, inheritance and overloading are extremely useful, as are database imports [9] and object creation <ref> [2, 15, 13] </ref>. New features are introduced such as grouping all objects with similar behaviors, and a parameterized way of grouping objects. Our main contribution is an analysis of the rich and various aspects of object-oriented views and their incorporation in a coherent framework. <p> The presentation, mostly informal, leans on a number of illustrative examples meant to emphasize the simplicity of our view mechanism. In the formal foundations based on the IQL model <ref> [2] </ref>, which will appear in a subsequent work, a view is just a query, as in the relational world. However, in the object-oriented world, the situation is much more intricate, so we must carefully distinguish between various kinds of view specifications. <p> This section shows how to populate a virtual class by creating new objects. We say that such objects are imaginary, since they exist in the view, but not in the database. Object creation has been considered in a number of papers (e.g., <ref> [2, 15] </ref>). Our semantics of identity for created objects is in the style of [13]. Imaginary objects have several important applications: * Creating an object-oriented view of a relational database.
Reference: [3] <author> F. Bancilhon. </author> <title> Object-Oriented Database Systems. </title> <booktitle> Proc. ACM conf. Principles of Database Systems (PODS), </booktitle> <pages> pages 152-162, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction Object-oriented databases <ref> [3, 14, 20] </ref> have been introduced primarily to ease the development of database applications. However, the difficulties encountered when, for instance, trying to restructure data or integrate databases demonstrate that the models being used still lack flexibility.
Reference: [4] <author> F. Bancilhon, S. Cluet and C. Delobel, </author> <title> Query Languages for Object-Oriented Database Systems: The O 2 Proposal, </title> <booktitle> proc. Intern. Work. on Data Base Programming Languages 2, </booktitle> <year> 1989. </year>
Reference-contexts: This paper presents such a view mechanism. The view mechanism is presented in the context of the O 2 model [5]. However, the concepts are general and apply to other models as well. Our work makes extensive use of existing mechanisms. Clearly, the query language <ref> [4] </ref> is an important component in specifying views. In addition, inheritance and overloading are extremely useful, as are database imports [9] and object creation [2, 15, 13]. New features are introduced such as grouping all objects with similar behaviors, and a parameterized way of grouping objects. <p> Since we are using the O 2 model, our view definitions use primarily the O 2 -query language <ref> [4] </ref>. However, we are quite liberal with the exact syntax and assume it to be self explanatory. Although we use a particular database model, the concepts described are general and are applicable to other models as well. <p> Problems related to object-oriented views have been considered in several papers. For instance, a query language is a core component of a view mechanism, and a number of query languages have been proposed for object-oriented databases (e.g., <ref> [4, 19, 10] </ref>). Orthogonal issues are covered in other papers. The use of views for integrating databases is considered in [12]. The important issue of the interaction between user and system through the use of views is treated in [17].
Reference: [5] <author> F. Bancilhon, C. Delobel and P. Kanellakis ed., </author> <note> The O 2 Book, 1989, in preparation. </note>
Reference-contexts: This paper presents such a view mechanism. The view mechanism is presented in the context of the O 2 model <ref> [5] </ref>. However, the concepts are general and apply to other models as well. Our work makes extensive use of existing mechanisms. Clearly, the query language [4] is an important component in specifying views. <p> After briefly describing the database model, we argue that the object-oriented approach is naturally suited to the definition of views. We are then led to blur the distinction between attributes (stored values) and methods (behaviors). Our starting point is a standard object-oriented database model, the O 2 model <ref> [5, 16] </ref>. In this model, the database consists of a hierarchy of classes. Each class has an associated type, and every object (oid) in a class has a value of this particular type. Classes also have methods attached to them. <p> That is, an object created in class C is also a member of each superclass of C. We say that the object is real in C and virtual in each superclass of C. To deal with this situation, most object-oriented data models adopt the following rule (see e.g., <ref> [6, 5] </ref>): Unique Root: An object is real in only one class. <p> These two rules have important consequences for the implementation of object-oriented database systems. On the one hand, experience has shown that the unique root rule increases the efficiency and decreases the complexity of data-intensive systems <ref> [6, 5] </ref>. The reason is that under this rule, the structure of an object is fixed: It has a fixed set of attributes and it can be stored uniformly along with similar objects.
Reference: [6] <author> J. Banerjee et al., </author> <title> Data Model Issues for Object-Oriented Applications, </title> <journal> ACM Trans. on Office Information Systems, </journal> <year> 1987. </year>
Reference-contexts: That is, an object created in class C is also a member of each superclass of C. We say that the object is real in C and virtual in each superclass of C. To deal with this situation, most object-oriented data models adopt the following rule (see e.g., <ref> [6, 5] </ref>): Unique Root: An object is real in only one class. <p> These two rules have important consequences for the implementation of object-oriented database systems. On the one hand, experience has shown that the unique root rule increases the efficiency and decreases the complexity of data-intensive systems <ref> [6, 5] </ref>. The reason is that under this rule, the structure of an object is fixed: It has a fixed set of attributes and it can be stored uniformly along with similar objects.
Reference: [7] <author> J. Banerjee, W. Kim. K.-C. Kim, </author> <title> Queries in Object-Oriented Databases, </title> <booktitle> proc. Data Engineering conf., </booktitle> <year> 1988. </year>
Reference: [8] <author> U. Dayal, </author> <title> Queries and Views in an Object-Oriented Data Model, Intern. Work. </title> <booktitle> on Data Base Programming Languages 2, </booktitle> <year> 1989. </year>
Reference-contexts: For instance, hiding the distinction between stored attributes and computed properties has been a prominent feature of several systems (e.g., <ref> [10, 8] </ref>); some interesting ideas on views in the Daplex world are mentioned in [8]; and a limited view mechanism is described for Orion in [15], and for the Fugue Model in [11]. <p> For instance, hiding the distinction between stored attributes and computed properties has been a prominent feature of several systems (e.g., [10, 8]); some interesting ideas on views in the Daplex world are mentioned in <ref> [8] </ref>; and a limited view mechanism is described for Orion in [15], and for the Fugue Model in [11]. These proposals introduce interesting ideas but do not provide the flexibility and the generality that one would expect from a view mechanism.
Reference: [9] <author> G. Ferran, </author> <title> the import mechanism in O 2 , private communication. </title>
Reference-contexts: However, the concepts are general and apply to other models as well. Our work makes extensive use of existing mechanisms. Clearly, the query language [4] is an important component in specifying views. In addition, inheritance and overloading are extremely useful, as are database imports <ref> [9] </ref> and object creation [2, 15, 13]. New features are introduced such as grouping all objects with similar behaviors, and a parameterized way of grouping objects. Our main contribution is an analysis of the rich and various aspects of object-oriented views and their incorporation in a coherent framework. <p> This section describes mechanisms for selecting data for use in a view. It is convenient to think of a view as being initially empty, and then specify what information from other databases should be made visible. The basic mechanism for this is the import <ref> [9] </ref>. The following simple example, defining a view called My View, illustrates our syntax: create view My View; import all classes from database Chrysler; import class Person from database Ford.
Reference: [10] <author> D.H. Fishman, D. Beech, et al, </author> <title> IRIS: An Object-Oriented Database Management System. </title> <editor> In S.B. Zdonik and D. Maier, editors, </editor> <booktitle> Readings in Object-Oriented Database Systems, </booktitle> <pages> pages 216-226. </pages> <publisher> Mor-gan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: For instance, hiding the distinction between stored attributes and computed properties has been a prominent feature of several systems (e.g., <ref> [10, 8] </ref>); some interesting ideas on views in the Daplex world are mentioned in [8]; and a limited view mechanism is described for Orion in [15], and for the Fugue Model in [11]. <p> Problems related to object-oriented views have been considered in several papers. For instance, a query language is a core component of a view mechanism, and a number of query languages have been proposed for object-oriented databases (e.g., <ref> [4, 19, 10] </ref>). Orthogonal issues are covered in other papers. The use of views for integrating databases is considered in [12]. The important issue of the interaction between user and system through the use of views is treated in [17].
Reference: [11] <author> S. Heiler and S. Zdonik, </author> <title> Object Views: Extending the Vision, </title> <booktitle> proc. Data Engineering conf., </booktitle> <year> 1990. </year>
Reference-contexts: hiding the distinction between stored attributes and computed properties has been a prominent feature of several systems (e.g., [10, 8]); some interesting ideas on views in the Daplex world are mentioned in [8]; and a limited view mechanism is described for Orion in [15], and for the Fugue Model in <ref> [11] </ref>. These proposals introduce interesting ideas but do not provide the flexibility and the generality that one would expect from a view mechanism. In particular, the creation of new classes is too limited and relies too heavily on explicit specifications given by the user.
Reference: [12] <author> M. Kaul, K Drosten, E.J. Neuhold, ViewSystem: </author> <title> Integrating Heterogeneous Information Bases by Object-Oriented Views, </title> <booktitle> proc. Data Engineering conf. </booktitle> <year> 1990. </year>
Reference-contexts: For instance, a query language is a core component of a view mechanism, and a number of query languages have been proposed for object-oriented databases (e.g., [4, 19, 10]). Orthogonal issues are covered in other papers. The use of views for integrating databases is considered in <ref> [12] </ref>. The important issue of the interaction between user and system through the use of views is treated in [17]. The problem of authorization, which is clearly relevant to information hiding, is considered in depth in [18].
Reference: [13] <author> M. Kifer and J. Wu, </author> <title> A Logic for Object-Oriented Logic Programming (Maier's O-logic: Revisited), </title> <booktitle> proc. ACM conf. Principles of Database Systems (PODS), </booktitle> <year> 1989. </year>
Reference-contexts: However, the concepts are general and apply to other models as well. Our work makes extensive use of existing mechanisms. Clearly, the query language [4] is an important component in specifying views. In addition, inheritance and overloading are extremely useful, as are database imports [9] and object creation <ref> [2, 15, 13] </ref>. New features are introduced such as grouping all objects with similar behaviors, and a parameterized way of grouping objects. Our main contribution is an analysis of the rich and various aspects of object-oriented views and their incorporation in a coherent framework. <p> We say that such objects are imaginary, since they exist in the view, but not in the database. Object creation has been considered in a number of papers (e.g., [2, 15]). Our semantics of identity for created objects is in the style of <ref> [13] </ref>. Imaginary objects have several important applications: * Creating an object-oriented view of a relational database.
Reference: [14] <author> W. Kim, </author> <title> A Foundation for Object-Oriented Databases. </title> <type> Technical Report, </type> <institution> MCC, </institution> <year> 1988. </year>
Reference-contexts: 1 Introduction Object-oriented databases <ref> [3, 14, 20] </ref> have been introduced primarily to ease the development of database applications. However, the difficulties encountered when, for instance, trying to restructure data or integrate databases demonstrate that the models being used still lack flexibility.
Reference: [15] <author> W. Kim, </author> <title> A Model of Queries for Object-Oriented Databases, </title> <booktitle> proc. 15th Conf. on Very Large Databases, </booktitle> <year> 1989. </year>
Reference-contexts: However, the concepts are general and apply to other models as well. Our work makes extensive use of existing mechanisms. Clearly, the query language [4] is an important component in specifying views. In addition, inheritance and overloading are extremely useful, as are database imports [9] and object creation <ref> [2, 15, 13] </ref>. New features are introduced such as grouping all objects with similar behaviors, and a parameterized way of grouping objects. Our main contribution is an analysis of the rich and various aspects of object-oriented views and their incorporation in a coherent framework. <p> This section shows how to populate a virtual class by creating new objects. We say that such objects are imaginary, since they exist in the view, but not in the database. Object creation has been considered in a number of papers (e.g., <ref> [2, 15] </ref>). Our semantics of identity for created objects is in the style of [13]. Imaginary objects have several important applications: * Creating an object-oriented view of a relational database. <p> For instance, hiding the distinction between stored attributes and computed properties has been a prominent feature of several systems (e.g., [10, 8]); some interesting ideas on views in the Daplex world are mentioned in [8]; and a limited view mechanism is described for Orion in <ref> [15] </ref>, and for the Fugue Model in [11]. These proposals introduce interesting ideas but do not provide the flexibility and the generality that one would expect from a view mechanism.
Reference: [16] <author> C. Lecluse and P. Richard, </author> <title> the O 2 Database Programming Language, </title> <booktitle> proc. 15th Conf. on Very Large Databases, </booktitle> <address> Amsterdam, </address> <year> 1989. </year>
Reference-contexts: After briefly describing the database model, we argue that the object-oriented approach is naturally suited to the definition of views. We are then led to blur the distinction between attributes (stored values) and methods (behaviors). Our starting point is a standard object-oriented database model, the O 2 model <ref> [5, 16] </ref>. In this model, the database consists of a hierarchy of classes. Each class has an associated type, and every object (oid) in a class has a value of this particular type. Classes also have methods attached to them.
Reference: [17] <author> C. Medeiros and J.-C. Mamou, </author> <title> Interactive Manipulation of Object-Oriented Views, </title> <booktitle> proc. Data Engineering conf., </booktitle> <year> 1991. </year>
Reference-contexts: Orthogonal issues are covered in other papers. The use of views for integrating databases is considered in [12]. The important issue of the interaction between user and system through the use of views is treated in <ref> [17] </ref>. The problem of authorization, which is clearly relevant to information hiding, is considered in depth in [18]. Finally, we note that important issues such as materialized views and view updates, which have been extensively studied in the relational model, acquire a new dimension in the context of objects.
Reference: [18] <author> F. Rabiti, E. Brtino, W. Kim, D. Woelk, </author> <title> A Model of Authorization for Next-Generation Database Systems, </title> <note> to appear in ACM Transactions on Database Systems. </note>
Reference-contexts: The use of views for integrating databases is considered in [12]. The important issue of the interaction between user and system through the use of views is treated in [17]. The problem of authorization, which is clearly relevant to information hiding, is considered in depth in <ref> [18] </ref>. Finally, we note that important issues such as materialized views and view updates, which have been extensively studied in the relational model, acquire a new dimension in the context of objects.
Reference: [19] <editor> G.M. Shaw, S.B. Zdonik, </editor> <title> An Object-Oriented Query Algebra, </title> <booktitle> proc. Intern. Work. on Data Base Programming Languages 2, </booktitle> <year> 1989. </year>
Reference-contexts: Problems related to object-oriented views have been considered in several papers. For instance, a query language is a core component of a view mechanism, and a number of query languages have been proposed for object-oriented databases (e.g., <ref> [4, 19, 10] </ref>). Orthogonal issues are covered in other papers. The use of views for integrating databases is considered in [12]. The important issue of the interaction between user and system through the use of views is treated in [17].
Reference: [20] <institution> IEEE Transaction on Knowledge and Data Engineering, </institution> <note> Special issue on database prototype systems, </note> <author> Ed. M. Stonebraker, 2:1, </author> <year> 1990. </year>
Reference-contexts: 1 Introduction Object-oriented databases <ref> [3, 14, 20] </ref> have been introduced primarily to ease the development of database applications. However, the difficulties encountered when, for instance, trying to restructure data or integrate databases demonstrate that the models being used still lack flexibility.
References-found: 20

