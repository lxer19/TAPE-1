URL: ftp://ftp.cag.lcs.mit.edu/pub/virtual_wires/fccm93.ps.Z
Refering-URL: http://www.cag.lcs.mit.edu/vwires/papers/index.html
Root-URL: 
Title: Virtual Wires: Overcoming Pin Limitations in FPGA-based Logic Emulators  
Author: Jonathan Babb, Russell Tessier, and Anant Agarwal 
Address: Cambridge, MA 02139  
Affiliation: MIT Laboratory for Computer Science  
Abstract: Existing FPGA-based logic emulators suffer from limited inter-chip communication bandwidth, resulting in low gate utilization (10 to 20 percent). This resource imbalance increases the number of chips needed to emulate a particular logic design and thereby decreases emulation speed, since signals must cross more chip boundaries. Current emulators only use a fraction of potential communication bandwidth because they dedicate each FPGA pin (physical wire) to a single emulated signal (logical wire). These logical wires are not active simultaneously and are only switched at emulation clock speeds. Virtual wires overcome pin limitations by intelligently multiplexing each physical wire among multiple logical wires and pipelining these connections at the maximum clocking frequency of the FPGA. A virtual wire represents a connection from a logical output on one FPGA to a logical input on another FPGA. Virtual wires not only increase usable bandwidth, but also relax the absolute limits imposed on gate utilization. The resulting improvement in bandwidth reduces the need for global interconnect, allowing effective use of low dimension inter-chip connections (such as nearest-neighbor). Nearest-neighbor topologies, coupled with the ability of virtual wires to overlap communication with computation, can even improve emulation speeds. We present the concept of virtual wires and describe our first implementation, a softwire compiler which utilizes static routing and relies on minimal hardware support. Results from compiling netlists for the 18K gate Sparcle microprocessor and the 86K gate Alewife Communications and Cache Controller indicate that virtual wires can increase FPGA gate utilization beyond 80 percent without a significant slowdown in emulation speed. Keywords: FPGA, logic emulation, prototyping, reconfigurable architectures, static routing, virtual wires. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Agarwal et al. </author> <title> The MIT Alewife machine: A large-scale distributed memory multiprocessor. In Scalable Shared Memory Multiprocessors. </title> <publisher> Kluwer Academic Press, </publisher> <year> 1991. </year>
Reference-contexts: Sparcle is an 18K gate SPARC microprocessor enhanced with multiprocessing features. The Alewife controller and memory management unit (A-1000) [11] is an 86K gate cache controller for the Alewife Multiprocessor <ref> [1] </ref>, a distributed shared memory machine being designed at MIT. For target FPGAs we consider the Xilinx 3000 and 4000 series (including the new 4000H series) [16] [17] and the Concurrent Logic Cli6000 series [4].
Reference: [2] <author> A. Agarwal, J. Kubiatowicz, D. Kranz, B.-H. Lim, D. Yeung, G. D'Souza, and M. Parkin. Sparcle: </author> <title> An Evolutionary Processor Design for Multiprocessors. </title> <note> To appear in IEEE Micro, </note> <month> June </month> <year> 1993. </year>
Reference-contexts: Furthermore, the flexibility of virtual wires allows the emulation architecture to be balanced for each logic design application. Our results from compiling two complex designs, the 18K gate Sparcle microprocessor <ref> [2] </ref> and the 86K gate Alewife Communications and Cache Controller [11] (A-1000) show that the use of virtual wires can decrease FPGA chip count by a factor of 3 for Sparcle and 10 for the A-1000, assuming a crossbar interconnect.
Reference: [3] <author> D. Bertsekas and R. Gallagher, </author> <title> editors. Data Networks. </title> <publisher> Pren-tice Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1992. </year>
Reference-contexts: Virtual wires are similar to virtual channels [5], which decouple resource allocation in dynamically-routed networks, and to virtual circuits <ref> [3] </ref> found in a connection-oriented network. 1.5 Overview The rest of this paper is organized as follows: Section 2 describes the basic ideas behind virtual wires. Section 3 outlines the key components of our initial system, including softwire compiler and hardware support.
Reference: [4] <institution> Concurrent Logic, Inc. CLi6000 Series Field-Programmable Gate Arrays, </institution> <month> May </month> <year> 1992. </year> <note> Revision 1c. </note>
Reference-contexts: For target FPGAs we consider the Xilinx 3000 and 4000 series (including the new 4000H series) [16] [17] and the Concurrent Logic Cli6000 series <ref> [4] </ref>. This analysis does not include the final FPGA-specific APR stage; we assume a 50 percent APR mapping efficiency for both architectures. 4.1 Virtual Wire Gate Overhead In the following analysis, we estimate the FPGA gate costs of virtual wires based on the Concurrent Logic CLI6000 series FPGA.
Reference: [5] <author> W. J. Dally. </author> <title> Virtual-channel flow control. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 3(2), </volume> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: Other related uses of static routing include FPGA-based systolic arrays, such as Splash [7], and in the very large simulation subsystem (VLSS) [15], a massively parallel simulation engine which uses time-division multiplexing to stagger logic evaluation. Virtual wires are similar to virtual channels <ref> [5] </ref>, which decouple resource allocation in dynamically-routed networks, and to virtual circuits [3] found in a connection-oriented network. 1.5 Overview The rest of this paper is organized as follows: Section 2 describes the basic ideas behind virtual wires.
Reference: [6] <author> D. V. den Bout, J. Morris, D. Thomae, S. Labrozzi, S. Wingo, and D. Hallman. Anyboard: </author> <title> An FPGA-based, reconfigurable system. </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: The Virtual ASIC system by InCA [9] uses a combination of nearest neigh Page 2 bor and crossbar interconnect. Like Quickturn's systems, Virtual ASIC logic partitions are hardwired to FPGAs following partition placement. AnyBoard, developed at North Carolina State University, <ref> [6] </ref> is targetted for logic designs of a few thousand gates. Statically routed networks can be used whenever communication can be predetermined. Static refers to the fact that all data movement can be determined and optimized at compile-time.
Reference: [7] <author> M. Gokhale, W. Holmes, A. Kopser, S. Lucas, R. Minnich, D. Sweeney, and D. Lopresti. </author> <title> Building and using a highly parallel programmable logic array. </title> <journal> Computer, </journal> <volume> 24(1), </volume> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: Static refers to the fact that all data movement can be determined and optimized at compile-time. This mechanism has been used in scheduling real-time communication in a multiprocessor environment [12]. Other related uses of static routing include FPGA-based systolic arrays, such as Splash <ref> [7] </ref>, and in the very large simulation subsystem (VLSS) [15], a massively parallel simulation engine which uses time-division multiplexing to stagger logic evaluation.
Reference: [8] <author> N. Hastie and R. Cliff. </author> <title> The implementation of hardware subroutines on field programmable gate arrays. </title> <booktitle> In IEEE Custom Integrated Circuits Conference, </booktitle> <month> May </month> <year> 1990. </year>
Reference-contexts: Using the information gained from dependency analysis, we can now predict which portions of the design are active during which parts of the emulation clock cycle. If the FPGA device supports fast partial reconfiguration, this information can be used to implement virtual logic via invocation of hardware subroutines <ref> [8] </ref>. An even more ambitious direction which we are exploring is event-driven emulation only transmit signals that change, only activate (configure) logic when it is needed.
Reference: [9] <author> InCA Inc. </author> <title> Concept Silicon Reference Manual, </title> <month> Nov. </month> <year> 1992. </year> <note> Version 1.1. </note>
Reference-contexts: Quickturn Inc. [14] [13] has developed emulation systems which interconnect FPGAs in a two-dimensional mesh and, more recently, in a partial crossbar topology. The Quickturn Enterprise system uses a hierarchical approach to interconnection. The Virtual ASIC system by InCA <ref> [9] </ref> uses a combination of nearest neigh Page 2 bor and crossbar interconnect. Like Quickturn's systems, Virtual ASIC logic partitions are hardwired to FPGAs following partition placement. AnyBoard, developed at North Carolina State University, [6] is targetted for logic designs of a few thousand gates. <p> With virtual wires, the total gate count (logic gates and virtual wiring overhead) must be no greater than the target FPGA gate count. In our current implementation we use the Concept Silicon partitioner by InCA <ref> [9] </ref>. This partitioner performs K-way partitioning with min-cut and clustering techniques to minimize partition pin counts. 3.2.3 Dependency Analysis Since a combinatorial signal may pass through several FPGA partitions during an emulated clock cycle, all signals will not be ready to schedule at the same time. <p> This logic is generated with a state machine specifically optimized for a given phase specification. 4 Experimental Results We implemented the system compiler described by developing a dependency analyzer, global placer and global router and using the InCA <ref> [9] </ref> partitioner. Except for the partitioner, which can take hours to optimize a complex design, running times on a SPARC 2 workstation were usually 1 to 15 minutes for each stage. <p> Table 2 shows the results for both hard wires and virtual wires. Compiling the A-1000 to a torus, hardwires only, was not practical with our partitioning software. The gate utilizations obtained for the hardwired cases agree with reports in the literature <ref> [9] </ref> [14] on designs of similar complexity. In order to understand the tradeoffs involved, we plotted both the hard wires pin/gate constraint and the virtual wires pin/gate constraint curve against the partition curves for the two designs (Figure 10).
Reference: [10] <author> S. Kirkpatrick, C. D. Gellatt, and M. P. Vecchi. </author> <title> Simulated annealing. </title> <journal> Science, </journal> <volume> 220, </volume> <year> 1983. </year>
Reference-contexts: An ideal placement minimizes system communication, thus requiring fewer virtual wire cycles to transfer information. We first make a random placement followed by cost-reducing swaps, and then further optimize with simulated annealing <ref> [10] </ref>. 3.2.5 Global Routing and Phase Assignment The input to the global routing and phase assignment module is a set of FPGA partitions that have been assigned to FPGA devices, and a graph describing the dependency relationships between inputs and outputs.
Reference: [11] <author> J. Kubiatowicz. </author> <title> User's Manual for the A-1000 Communications and Memory Management Unit. ALEWIFE Memo No. </title> <type> 19, </type> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <month> January </month> <year> 1991. </year>
Reference-contexts: Furthermore, the flexibility of virtual wires allows the emulation architecture to be balanced for each logic design application. Our results from compiling two complex designs, the 18K gate Sparcle microprocessor [2] and the 86K gate Alewife Communications and Cache Controller <ref> [11] </ref> (A-1000) show that the use of virtual wires can decrease FPGA chip count by a factor of 3 for Sparcle and 10 for the A-1000, assuming a crossbar interconnect. <p> In order to evaluate the costs and benefits of virtual wires, we compiled two complex designs, Sparcle and the A-1000. Sparcle is an 18K gate SPARC microprocessor enhanced with multiprocessing features. The Alewife controller and memory management unit (A-1000) <ref> [11] </ref> is an 86K gate cache controller for the Alewife Multiprocessor [1], a distributed shared memory machine being designed at MIT. For target FPGAs we consider the Xilinx 3000 and 4000 series (including the new 4000H series) [16] [17] and the Concurrent Logic Cli6000 series [4].
Reference: [12] <author> H. T. Kung. </author> <title> Systolic communication. </title> <booktitle> In Proceedings of the International Conference on Systolic Arrays, </booktitle> <address> San Diego, California, </address> <month> May </month> <year> 1988. </year>
Reference-contexts: A virtual wire represents a simple connection between a logical output on one FPGA and a logical input on another FPGA. Established via a pipelined, statically routed <ref> [12] </ref> communication network, these virtual wires increase available off-chip communication bandwidth by multiplexing the use of FPGA pin resources (physical wires) among multiple emulation signals (logical wires). 1 Although this paper focuses on logic emulators, virtual-wire technology can be employed in any system comprising multiple interconnected FPGAs. <p> Statically routed networks can be used whenever communication can be predetermined. Static refers to the fact that all data movement can be determined and optimized at compile-time. This mechanism has been used in scheduling real-time communication in a multiprocessor environment <ref> [12] </ref>. Other related uses of static routing include FPGA-based systolic arrays, such as Splash [7], and in the very large simulation subsystem (VLSS) [15], a massively parallel simulation engine which uses time-division multiplexing to stagger logic evaluation.
Reference: [13] <author> L. Maliniak. </author> <title> Multiplexing enhances hardware emulation. </title> <booktitle> Electronic Design, </booktitle> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: Typically, the software for these systems is considered the most complex component and comprises a major portion of system costs. Quickturn Inc. [14] <ref> [13] </ref> has developed emulation systems which interconnect FPGAs in a two-dimensional mesh and, more recently, in a partial crossbar topology. The Quickturn Enterprise system uses a hierarchical approach to interconnection. The Virtual ASIC system by InCA [9] uses a combination of nearest neigh Page 2 bor and crossbar interconnect.
Reference: [14] <author> S. Walters. </author> <title> Computer-aided prototyping for ASIC-Based systems. </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: Typically, the software for these systems is considered the most complex component and comprises a major portion of system costs. Quickturn Inc. <ref> [14] </ref> [13] has developed emulation systems which interconnect FPGAs in a two-dimensional mesh and, more recently, in a partial crossbar topology. The Quickturn Enterprise system uses a hierarchical approach to interconnection. The Virtual ASIC system by InCA [9] uses a combination of nearest neigh Page 2 bor and crossbar interconnect. <p> Table 2 shows the results for both hard wires and virtual wires. Compiling the A-1000 to a torus, hardwires only, was not practical with our partitioning software. The gate utilizations obtained for the hardwired cases agree with reports in the literature [9] <ref> [14] </ref> on designs of similar complexity. In order to understand the tradeoffs involved, we plotted both the hard wires pin/gate constraint and the virtual wires pin/gate constraint curve against the partition curves for the two designs (Figure 10).
Reference: [15] <author> Y.-C. Wei, C.-K. Cheng, and Z. Wurman. </author> <title> Multiple-level partitioning: An application the very large-scale hardware simulator. </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> 26(5), </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: This mechanism has been used in scheduling real-time communication in a multiprocessor environment [12]. Other related uses of static routing include FPGA-based systolic arrays, such as Splash [7], and in the very large simulation subsystem (VLSS) <ref> [15] </ref>, a massively parallel simulation engine which uses time-division multiplexing to stagger logic evaluation.
Reference: [16] <author> Xilinx, Inc. </author> <title> The Programmable Gate Array Data Book, </title> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: The Alewife controller and memory management unit (A-1000) [11] is an 86K gate cache controller for the Alewife Multiprocessor [1], a distributed shared memory machine being designed at MIT. For target FPGAs we consider the Xilinx 3000 and 4000 series (including the new 4000H series) <ref> [16] </ref> [17] and the Concurrent Logic Cli6000 series [4].
Reference: [17] <author> Xilinx, Inc. </author> <title> The XC4000 Data Book, </title> <month> Aug. </month> <year> 1992. </year> <pages> Page 10 </pages>
Reference-contexts: The Alewife controller and memory management unit (A-1000) [11] is an 86K gate cache controller for the Alewife Multiprocessor [1], a distributed shared memory machine being designed at MIT. For target FPGAs we consider the Xilinx 3000 and 4000 series (including the new 4000H series) [16] <ref> [17] </ref> and the Concurrent Logic Cli6000 series [4].
References-found: 17

