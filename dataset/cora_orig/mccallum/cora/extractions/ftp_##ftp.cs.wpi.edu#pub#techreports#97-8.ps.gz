URL: ftp://ftp.cs.wpi.edu/pub/techreports/97-8.ps.gz
Refering-URL: http://cs.wpi.edu/Resources/techreports/index.html
Root-URL: 
Title: CVS: The Complex Substitution Algorithm for View Synchronization  
Author: by Anisora Nica Amy J. Lee Elke A. Rundensteinter 
Date: September 1997  
Pubnum: WPI-CS-TR-97-8  
Abstract: Computer Science Technical Report Series WORCESTER POLYTECHNIC INSTITUTE Computer Science Department 100 Institute Road, Worcester, Massachusetts 01609-2280 
Abstract-found: 1
Intro-found: 1
Reference: [CKP95] <author> S. Chaudhuri, R. Krishnamurthy, and S. Potamianos. </author> <title> Optimizing Query with Materialized Views. </title> <booktitle> In Proceedings of IEEE International Conference on Data Engineering, </booktitle> <year> 1995. </year>
Reference-contexts: This problem is similar to the problem of writing a query using views which was extensively studied in the database community <ref> [CKP95, LSK95] </ref>. However, in our problem domain, we have an added issue of the availability of the set of partial/complete information constraints defined in MKB' that could be used to compare the extent of the initial view V and the extent of the evolved view V 0 .
Reference: [GMR95] <author> A. Gupta, I.S. Mumick, and K.A. Ross. </author> <title> Adapting Materialized Views after Redefinition. </title> <booktitle> In Proceedings of ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 211-222, </pages> <year> 1995. </year>
Reference-contexts: While the evolution of views is assumed to be triggered by capability changes of ISs in our work, previous work (e.g., by Gupta et al. <ref> [GMR95] </ref> and Mohania et al. [MD96]) typically assumed that view redefinition at the schema level was explicitly requested by the view developer at the view site. Furthermore, previous work Gupta et al. [GMR95], Mohania et al. [MD96], Huyn [Huy96], etc., has focused on maintenance of the data itself (i.e., content changes) <p> to be triggered by capability changes of ISs in our work, previous work (e.g., by Gupta et al. <ref> [GMR95] </ref> and Mohania et al. [MD96]) typically assumed that view redefinition at the schema level was explicitly requested by the view developer at the view site. Furthermore, previous work Gupta et al. [GMR95], Mohania et al. [MD96], Huyn [Huy96], etc., has focused on maintenance of the data itself (i.e., content changes) that is associated with the modified schema and not with modifications of the view definitions themselves as done in this paper. <p> If all of the ISs were willing to preserve the relations that are referenced by the view definitions (i.e., no schema changes were to happen on base relations), then DVS behaves like TSE. Gupta et al. <ref> [GMR95] </ref> and Mohania et al. [MD96] address the problem of how most efficiently to update view tuples after a view redefinition takes place. And, they study under which conditions this view update can take place without requiring access to base relations, i.e., the self-maintainability issue.
Reference: [Huy96] <author> N. Huyn. </author> <title> Efficient View Self-Maintenance. </title> <booktitle> Proceedings of the Workshop on Materialized Views: Techniques and Applications, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: Furthermore, previous work Gupta et al. [GMR95], Mohania et al. [MD96], Huyn <ref> [Huy96] </ref>, etc., has focused on maintenance of the data itself (i.e., content changes) that is associated with the modified schema and not with modifications of the view definitions themselves as done in this paper.
Reference: [LNR97a] <author> A. J. Lee, A. Nica, and E. A. Rundensteiner. </author> <title> Keeping Virtual Information Resources Up and Running. In Proceedings of IBM Centre for Advanced Studies Conference CASCON97, </title> <type> Best Paper Award, </type> <pages> pages 1-14, </pages> <month> November </month> <year> 1997. </year>
Reference-contexts: In our prior work, we have proposed a novel approach to solve this view inelasticity problem <ref> [LNR97a] </ref>. Namely, we have designed a framework for view maintenance in these evolving environments which supports to "preserve as much as possible" of the view instead of completely disabling it with each IS change.
Reference: [LNR97b] <author> A. J. Lee, A. Nica, and E. A. Rundensteiner. </author> <title> The EVE Framework: View Evolution in an Evolving Environment. </title> <type> Technical Report WPI-CS-TR-97-4, </type> <institution> Worcester Polytechnic Institute, Dept. of Computer Science, </institution> <year> 1997. </year>
Reference-contexts: Our view synchronization algorithm attempts to find valid replacements for affected (deleted) components of the existing view definitions based on the semantic constraints captured in the MKB. These replacements thus correspond to possibly complex pieces of information from several ISs <ref> [LNR97b] </ref>. The proposed strategy can be shown to find a new valid definition of a view in many cases where current view technology would have simply disabled the view. <p> Next, we use one example to demonstrate the integrated usage of and interactions among these evolution parameters, while a more extensive justification for the design of this language plus many more examples can be found in <ref> [LNR97b] </ref>. Example 6 In our Example 1, let's assume that the travel agency has a promotion for the customers who travel to Asia. Therefore, the travel agency needs to find the customers' names, addresses, and phone numbers.
Reference: [LSK95] <author> A. Y. Levy, D. Srivastava, and T. Kirk. </author> <title> Data Model and Query Evaluation in Global Information Systems. </title> <journal> Journal of Intelligent Information Systems. </journal> <note> Special Issue on Networked Information Discovery and Retrieval, </note> <year> 1995. </year>
Reference-contexts: This problem is similar to the problem of writing a query using views which was extensively studied in the database community <ref> [CKP95, LSK95] </ref>. However, in our problem domain, we have an added issue of the availability of the set of partial/complete information constraints defined in MKB' that could be used to compare the extent of the initial view V and the extent of the evolved view V 0 . <p> Issues of defining evolving view models, MKB evolution process, view synchronization, etc., are not discussed. In the DVS system, on the other hand, we solve the problem of how to change well-defined view queries when the capabilities of the underlying ISs change. In the work of Levy et al. <ref> [LSK95] </ref>, a global information system is designed using the world-view approach where the external information sources are described relative to the unified world-view relations. <p> However, evolution of views as handled in our current paper is not discussed at all in <ref> [LSK95] </ref>. Papakonstantinou et al. [PGMW95] are pursuing the goal of information gathering across multiple sources. Their proposed language OEM assumes queries that explicitly list the source identifiers of the database from which the data is to be taken.
Reference: [MD96] <author> M. Mohania and G. Dong. </author> <title> Algorithms for Adapting Materialized Views in Data Warehouses. </title> <booktitle> International Symposium on Cooperative Database Systems for Advanced Applications, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: While the evolution of views is assumed to be triggered by capability changes of ISs in our work, previous work (e.g., by Gupta et al. [GMR95] and Mohania et al. <ref> [MD96] </ref>) typically assumed that view redefinition at the schema level was explicitly requested by the view developer at the view site. Furthermore, previous work Gupta et al. [GMR95], Mohania et al. [MD96], Huyn [Huy96], etc., has focused on maintenance of the data itself (i.e., content changes) that is associated with the <p> capability changes of ISs in our work, previous work (e.g., by Gupta et al. [GMR95] and Mohania et al. <ref> [MD96] </ref>) typically assumed that view redefinition at the schema level was explicitly requested by the view developer at the view site. Furthermore, previous work Gupta et al. [GMR95], Mohania et al. [MD96], Huyn [Huy96], etc., has focused on maintenance of the data itself (i.e., content changes) that is associated with the modified schema and not with modifications of the view definitions themselves as done in this paper. <p> If all of the ISs were willing to preserve the relations that are referenced by the view definitions (i.e., no schema changes were to happen on base relations), then DVS behaves like TSE. Gupta et al. [GMR95] and Mohania et al. <ref> [MD96] </ref> address the problem of how most efficiently to update view tuples after a view redefinition takes place. And, they study under which conditions this view update can take place without requiring access to base relations, i.e., the self-maintainability issue.
Reference: [NR96] <author> A. Nica and E. A. Rundensteiner. </author> <title> The Dynamic Information Integration Model. </title> <type> Technical Report CSE-TR-311-96, </type> <institution> University of Michigan, Ann Arbor, EECS Dept. CSE Division, </institution> <year> 1996. </year>
Reference-contexts: However, some subproblems that must be solved in the context of our DVS system were studied before, most of them in the area of information integration. The Dynamic Information Integration Model (DIIM) we propose in a University of Michigan Digital Library Project <ref> [NR96, NR97] </ref> is a model that allows information sources to dynamically participate in an information integration system. The DIIM query language allows loosely specified queries that the DIIM system refines into executable, well-defined queries based on the capability descriptions each information source exports when joining the DIIM system.
Reference: [NR97] <author> A. Nica and E. A. Rundensteiner. </author> <title> On Translating Loosely-Specified Queries into Executable Plans in Large-Scale Information Systems. </title> <booktitle> In Proceedings of Second IFCIS International Conference on Cooperative Information Systems CoopIS'97, </booktitle> <pages> pages 213-222, </pages> <month> June </month> <year> 1997. </year>
Reference-contexts: When an IS joins our environment, it advertises itself and registers the information regarding its capabilities and data content to the meta knowledge base (MKB). For this purpose, we have designed a model capable of describing the content and capabilities of heterogeneous and widely diverse ISs <ref> [NR97] </ref>. Our model captures the capability of each IS and the relationships between ISs by partial and/or complete containment constraints, join constraints, and attribute transformation constraints (see Section 3). The IS descriptions collected in the MKB are critical for identifying alternate view definitions when evolving a view definition. <p> assume in this paper that all ISs support at least SQL queries composed of a conjunction of primitive clauses in the WHERE clause, and we do not discuss how query capabilities are described in our system further. (For a description of an IS description model that including query capabilities see <ref> [NR97] </ref>.) 3.1 Type Integrity Constraints Each attribute A i is given a name and a data type to specify its domain of values. This information is specified by using a type integrity constraint with the format Type i (A i ). <p> However, some subproblems that must be solved in the context of our DVS system were studied before, most of them in the area of information integration. The Dynamic Information Integration Model (DIIM) we propose in a University of Michigan Digital Library Project <ref> [NR96, NR97] </ref> is a model that allows information sources to dynamically participate in an information integration system. The DIIM query language allows loosely specified queries that the DIIM system refines into executable, well-defined queries based on the capability descriptions each information source exports when joining the DIIM system.
Reference: [PGMW95] <author> Y. Papakonstantinou, H. Garcia-Molina, and J. Widom. </author> <title> Object Exchange Across Heterogeneous Information Sources. </title> <booktitle> In Proceedings of IEEE International Conference on Data Engineering, </booktitle> <pages> pages 251-260, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: However, evolution of views as handled in our current paper is not discussed at all in [LSK95]. Papakonstantinou et al. <ref> [PGMW95] </ref> are pursuing the goal of information gathering across multiple sources. Their proposed language OEM assumes queries that explicitly list the source identifiers of the database from which the data is to be taken.
Reference: [RLN97] <author> E. A. Rundensteiner, A. J. Lee, and A. </author> <title> Nica. On Preserving Views in Evolving Environments. </title> <booktitle> In Proceedings of 4th Int. Workshop on Knowledge Representation Meets Databases (KRDB'97): Intelligent Access to Heterogeneous Information, pages 13.1-13.11, </booktitle> <address> Athens, Greece, </address> <month> August </month> <year> 1997. </year>
Reference-contexts: Materialized views in such evolving environments introduce new challenges to the database community [Wid95]. In our prior work <ref> [RLN97] </ref>, we have identified view evolution as a critical new problem faced by these applications. The problem is that current view technology is insufficient for supporting flexible view definitions. <p> The proposed strategy can be shown to find a new valid definition of a view in many cases where current view technology would have simply disabled the view. While we have introduced the view evolution problem as well as the overall solution framework in <ref> [RLN97] </ref>, new contributions of this paper now include the following. First, since our work discusses applications operating in a dynamic environment, issues associated with meta knowledge base management are important. <p> Section 8 lists work in the literature that is most closely related to ours, and Section 9 presents our conclusions. 2 Background In this section, we first give a brief overview of the evolvable view environment (EVE) framework that we have designed to tackle the view evolution problem (Figure 1) <ref> [RLN97] </ref>. Then, we describe a web-based travel consolidator as our running example used throughout the remainder of this paper. 2.1 Framework for View Maintenance in Evolving Environments Our environment can be divided into two spaces, i.e., the view site and the information space.
Reference: [RR95] <author> Y. G. Ra and E. A. Rundensteiner. </author> <title> A Transparent Object-Oriented Schema Change Approach Using View Schema Evolution. </title> <booktitle> In Proceedings of IEEE International Conference on Data Engineering, </booktitle> <pages> pages 165-172, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: Their data model allows information sources to describe their capabilities as well, but they don't assume that these capabilities could be changed and thus they do not address the view synchronization problem. The latter is the problem we address in our work. In a separate project, we <ref> [RR95, RRL97] </ref> use view technology to handle schema changes transparently in a centralized environment. In the TSE framework, a user works on special-tailored view schemas instead of working on the base schema directly.
Reference: [RRL97] <author> E. A. Rundensteiner, Y. G. Ra, and A. J. Lee. </author> <title> Transparent Schema Evolution (TSE) Using Object--Oriented View Technology: Taking a Fresh Look. </title> <type> Technical Report WPI-CS-TR-97-3, </type> <institution> Worcester Polytechnic Institute, Dept. of Computer Science, </institution> <year> 1997. </year>
Reference-contexts: Their data model allows information sources to describe their capabilities as well, but they don't assume that these capabilities could be changed and thus they do not address the view synchronization problem. The latter is the problem we address in our work. In a separate project, we <ref> [RR95, RRL97] </ref> use view technology to handle schema changes transparently in a centralized environment. In the TSE framework, a user works on special-tailored view schemas instead of working on the base schema directly.
Reference: [Ull89] <author> J.D. Ullman. </author> <title> Principle of Database and Knowledge-Base Systems. </title> <publisher> Computer Science Press, </publisher> <year> 1989. </year>
Reference: [Wid95] <author> J. Widom. </author> <title> Research Problems in Data Warehousing. </title> <booktitle> In Proceedings of International Conference on Information and Knowledge Management, </booktitle> <pages> pages 25-30, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Advanced applications such as web-based information services, data warehousing, digital libraries, and data mining typically operate in an information space populated with on a large number of dynamic information sources (ISs) <ref> [Wid95] </ref>. The ISs in such environments are usually distributed, have distinct schemas, support different query languages, update not only their content but also their capabilities 1 , and even join or leave the environment frequently. <p> Materialized views in such evolving environments introduce new challenges to the database community <ref> [Wid95] </ref>. In our prior work [RLN97], we have identified view evolution as a critical new problem faced by these applications. The problem is that current view technology is insufficient for supporting flexible view definitions.
References-found: 15

