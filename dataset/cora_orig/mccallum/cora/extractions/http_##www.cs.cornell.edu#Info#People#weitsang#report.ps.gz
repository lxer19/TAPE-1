URL: http://www.cs.cornell.edu/Info/People/weitsang/report.ps.gz
Refering-URL: http://www.cs.cornell.edu/Info/People/weitsang/research.html
Root-URL: http://www.cs.cornell.edu
Title: in Genome Rearrangements  
Author: By Ooi Wei Tsang 
Address: 1995/96  
Affiliation: Department of Information Systems and Computer Science National University of Singapore  
Note: Sorting by Reversals  
Abstract: Honours Year Project Report 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Bafna and P. Pevzner. </author> <title> Sorting by reversals: genome rearrangements in plant organelles and evolutionary history of x chromosome. Molecular Biology and evolution, </title> <booktitle> 12 </booktitle> <pages> 239-246, </pages> <year> 1995. </year>
Reference-contexts: The algorithms devised so far focus more on genome rearrangement by inversion, as biological data has shown that inversion is a very common rearrangement in most plants and some animals such as fruit flies [8]. Some biologists even believe that many plant mtDNA rearrange only by inversion <ref> [1] </ref>. Hopefully by solving the genome rearrangement by inversion problem first, a more general algorithm can be devised later to solve the evolutionary distance problem, by incoorperating other operations such as translocation and transposition. 1.2 Mathematical Models There are two mathematical models for modeling chromosomes. <p> delete (h; g) from H () 6. else 7. add (h; g) into H () FindSafeReversalToMergeHurdle (, hurdles): Reversal 1. if has only 2 hurdles then 2. return the reversal that merge the two hurdles 3. sort hurdles [1::4] according to rightmost position 4. return the reversal that merge hurdle <ref> [1] </ref> and hurdle [3] Line 3 and 4 of FindSafeReversalToMergeHurdle ensure that both sets BETWEEN (L; M ) and OUTSIDE (L; M ) are not empty if a reversal is performed on L and M . Lemma 3.11 guarantees that such a reversal is safe.
Reference: [2] <author> V. Bafna and P. Pevzner. </author> <title> Sorting by transposition. </title> <booktitle> In Proceedings of 6th Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 614-623, </pages> <address> San Francisco, California, </address> <year> 1995. </year>
Reference-contexts: There has been some work done recently, on finding the translocation distance and transposition distance <ref> [7, 2] </ref>. It would be interesting to combine these results and try to solve the evolutionary distance problem where each genome rearrangement can be either an inversion, a translocation or a transposition.
Reference: [3] <author> V. Bafna and P. Pevzner. </author> <title> Genome rearrangements and sorting by reversals. </title> <booktitle> In 34th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 148-157, </pages> <address> Palo Alto, California, </address> <month> Nov, </month> <year> 1993. </year>
Reference-contexts: In 1993, Kececioglu and Sankoff [8] gave a CHAPTER 1. INTRODUCTION 5 greedy approximation algorithm for sorting unsigned permutation with performance guarantee of 2 that ran in O (n 2 ) time. This performance guarantee was later improved to 7 4 by Bafna and Pevzner <ref> [3] </ref> in 1993. Moreover, they provided a 3 2 approximation algorithm for sorting signed permutation by reversal. However their approximation algorithm gave solutions with high accuracy when they used it on simulated and biological data. <p> Denote b (; ) as changes in the number of breakpoints, b () b () and c (; ) as changes in the number of cycles, c () c (). Lemma 2.1 gives a bound on value b (; )c (; ). Bafna and Pevzner <ref> [3] </ref> proved the lemma in 1993 for unsigned permutation and arbitrary reversal. We give a simplified proof here since we only consider image of a signed permutation and reversal that does not cut strips. 1 This is the key property that makes signed permutation easier to analyze than unsigned permutation. <p> from H () 6. else 7. add (h; g) into H () FindSafeReversalToMergeHurdle (, hurdles): Reversal 1. if has only 2 hurdles then 2. return the reversal that merge the two hurdles 3. sort hurdles [1::4] according to rightmost position 4. return the reversal that merge hurdle [1] and hurdle <ref> [3] </ref> Line 3 and 4 of FindSafeReversalToMergeHurdle ensure that both sets BETWEEN (L; M ) and OUTSIDE (L; M ) are not empty if a reversal is performed on L and M . Lemma 3.11 guarantees that such a reversal is safe. <p> We will also list a few interesting problems that are still open and have potential for future research. 5.1 Contributions * In section 2.3.1, we give a simplified proof to lemma 2.1 which was origi nally given by Bafna and Pevzner in <ref> [3] </ref>. * In section 2.3.3, we introduce the notion of left vertices, right vertices and crossing edges.
Reference: [4] <author> T. Dobzhansky and A.H. Sturtevant. </author> <title> Inversions in the chromosomes of drosophila pseudoobscura. </title> <journal> Genetics, </journal> <volume> 23 </volume> <pages> 28-64, </pages> <year> 1938. </year>
Reference-contexts: Genome rearrangement has been studied for about 60 years. The first paper in this area was published in 1938, by Dobzhansky and Sturtevant <ref> [4] </ref>. They presented an evolutionary tree of Drosophila pseudoobscura and D.miranda based on genome rearrangement by inversion. The number of biologists interested in 1 CHAPTER 1. INTRODUCTION 2 genome rearrangement has increased in the last ten years. They studied genome rearrangement to analyze plant and animal molecular evolution.
Reference: [5] <author> S. Hannenhalli. </author> <title> Polynomial-time algorithm for computing translocation distance between genomes. </title> <booktitle> In Proceedings of 6th Annual Symposium on Combinatorial Pattern Matching, </booktitle> <address> Helsinki, Finland, </address> <year> 1995. </year>
Reference: [6] <author> S. Hannenhalli and P. Pevzner. </author> <title> Reversals do not cut long strips. </title> <type> Technical Report CSE-94-074, </type> <year> 1994. </year>
Reference: [7] <author> S. </author> <title> Hannenhalli and P.A. Pevzner. Transforming cabbage into turnip (polynomial algorithm for sorting signed permutations by reversals). </title> <booktitle> In ACM symposium on the Theory of Computing, </booktitle> <pages> pages 178-189, </pages> <address> Las Vegas, Nevada, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Moreover, they provided a 3 2 approximation algorithm for sorting signed permutation by reversal. However their approximation algorithm gave solutions with high accuracy when they used it on simulated and biological data. In 1995, Hannenhalli and Pevzner <ref> [7] </ref> explained the accuracy of Bafna and Pevzner's approximation algorithm with their duality theorem, and presented the first polynomial time algorithm that sorts signed permutation in O (n 4 ) time. Their algorithm adopted a method called padding that inserted extra elements into the permutation. <p> Hannenhalli and Pevzner also gave a simpler algorithm that did not use padding, but ran in O (n 5 ) time. 1.5 Pro ject Objective The aim of this project is to * study the polynomial algorithm suggested by Hannenhalli and Pevzner in <ref> [7] </ref> for sorting signed permutation; * provide examples and proofs for results stated by Hannenhalli and Pevzner in [7]; and * suggest improvements to the algorithm above. 1.6 Report Organization Chapters 2 and 3 of this report discuss our version of the algorithm for sorting signed permutations. <p> use padding, but ran in O (n 5 ) time. 1.5 Pro ject Objective The aim of this project is to * study the polynomial algorithm suggested by Hannenhalli and Pevzner in <ref> [7] </ref> for sorting signed permutation; * provide examples and proofs for results stated by Hannenhalli and Pevzner in [7]; and * suggest improvements to the algorithm above. 1.6 Report Organization Chapters 2 and 3 of this report discuss our version of the algorithm for sorting signed permutations. Chapter 2 gives the basic definition of terms that are used in Hannenhalli and Pevzner's algorithm and our algorithm. <p> Both reversals are not proper. Considering the new parameter h (), define a safe reversal to be a reversal with b (; ) c (; ) + h (; ) = 1 Hannenhalli and Pevzner <ref> [7] </ref> in 1995 stated lemma 2.6 and theorem 2.1 below, which gives a lower bound on the reversal distance d () in terms of b (), c () 2 This will be discussed in detailed in the next chapter. CHAPTER 2. BASIC DEFINITIONS 22 and h (). <p> Suppose that does not merge two hurdles, then by argument similar to lemma 3.13 will be unsafe. Hence is unsafe or is a fortress with h () 2 superhurdles. 2 3.4.3 Duality Theorem We are now ready to show the Hannenhalli and Pevzner's Duality Theorem <ref> [7] </ref> which gives the reversal distance of a permutation in terms of b (), c () and h (). <p> This reduces the size of the interleaving graph and increases the execution speed of FindSafeReversalInOriented, especially when the breakpoint graph of the input permutation contains a lot of short cycles. 4.3 An Algorithm With Padding Hannenhalli and Pevzner <ref> [7] </ref> suggested two polynomial algorithms for sorting signed permutation by reversal that runs in O (n 4 ) and O (n 5 ) respectively. Our SortByReversal is based on their O (n 4 ) algorithm. <p> See figure 4.4 for an example. A (g; b)-padding is said to be safe if g and b are not incident, and h () = h (^). For example, the (g; b)-padding in figure 4.4 is safe. Hannenhalli and Pevzner showed in <ref> [7] </ref> that there is a safe (g; b)-padding in every long cycle. Define generalized identity permutation ^ to be a generalized permutation whose elements is in increasing sorted order. <p> We also proof lemma 2.5, that was stated by Hannenhalli and Pevzner in <ref> [7] </ref> without proof. * In section 2.5, we introduce the interleaving graph, which has a major difference from the one introduced by Hannenhalli and Pevzner in [7]. The vertices of our interleaving graph consists of gray edges instead of short cycles. * Lemma 3.1 to lemma 3.4 are stated in [7] <p> We also proof lemma 2.5, that was stated by Hannenhalli and Pevzner in <ref> [7] </ref> without proof. * In section 2.5, we introduce the interleaving graph, which has a major difference from the one introduced by Hannenhalli and Pevzner in [7]. The vertices of our interleaving graph consists of gray edges instead of short cycles. * Lemma 3.1 to lemma 3.4 are stated in [7] without proofs. We give the proofs, and modified the lemmas to suit our definition of interleaving 59 CHAPTER 5. CONCLUSION 60 graph. <p> <ref> [7] </ref> without proof. * In section 2.5, we introduce the interleaving graph, which has a major difference from the one introduced by Hannenhalli and Pevzner in [7]. The vertices of our interleaving graph consists of gray edges instead of short cycles. * Lemma 3.1 to lemma 3.4 are stated in [7] without proofs. We give the proofs, and modified the lemmas to suit our definition of interleaving 59 CHAPTER 5. CONCLUSION 60 graph. The proofs given in [7] for lemma 3.5 and theorem 3.1 are also modified. * We introduce the term partner in section 3.1.1 to aid the explanation of <p> The vertices of our interleaving graph consists of gray edges instead of short cycles. * Lemma 3.1 to lemma 3.4 are stated in <ref> [7] </ref> without proofs. We give the proofs, and modified the lemmas to suit our definition of interleaving 59 CHAPTER 5. CONCLUSION 60 graph. The proofs given in [7] for lemma 3.5 and theorem 3.1 are also modified. * We introduce the term partner in section 3.1.1 to aid the explanation of a special case that occurs when we perform a reversal on a short cycle. * Lemma 3.6 and lemma 3.7 are stated in [7] without proofs. <p> proofs given in <ref> [7] </ref> for lemma 3.5 and theorem 3.1 are also modified. * We introduce the term partner in section 3.1.1 to aid the explanation of a special case that occurs when we perform a reversal on a short cycle. * Lemma 3.6 and lemma 3.7 are stated in [7] without proofs. We give the proofs in this report. * We state and prove lemma 3.9 in section 3.3.2 and lemma 3.8 in section 3.3. * Lemma 3.15 was stated without proof in [7]. <p> perform a reversal on a short cycle. * Lemma 3.6 and lemma 3.7 are stated in <ref> [7] </ref> without proofs. We give the proofs in this report. * We state and prove lemma 3.9 in section 3.3.2 and lemma 3.8 in section 3.3. * Lemma 3.15 was stated without proof in [7]. It turns out that the original lemma was not true as it does not take care of the case when h () = 3. <p> This running time is equal to the version with padding, and is superior than the version without padding (which runs in O (n 5 ) time) given by Hannenhalli and Pevzner in <ref> [7] </ref>. 5.2 Future Research We identify a few open problems related to reversal distance that have potential for further research. * Hannenhalli and Pevzner have identified 3 parameters that characterized the reversal distance for a permutation : number of breakpoints, number of cycles, and number of hurdles [7]. <p> and Pevzner in <ref> [7] </ref>. 5.2 Future Research We identify a few open problems related to reversal distance that have potential for further research. * Hannenhalli and Pevzner have identified 3 parameters that characterized the reversal distance for a permutation : number of breakpoints, number of cycles, and number of hurdles [7]. However the notion of hurdles is not intuitive. It seems that we went through a lot of trouble to define fortress and show that it needs just one more reversal to sort than a non-fortress. <p> There has been some work done recently, on finding the translocation distance and transposition distance <ref> [7, 2] </ref>. It would be interesting to combine these results and try to solve the evolutionary distance problem where each genome rearrangement can be either an inversion, a translocation or a transposition.
Reference: [8] <author> J. Kececioglu and D. Sankoff. </author> <title> Exact and approximation algorithms for the inversion distance between two permutations. </title> <booktitle> In Proceedings of 4th Annual Symposium on Combanitorial Pattern Matching, </booktitle> <pages> pages 87-105, </pages> <address> Padove, Italy, </address> <month> Jun, </month> <year> 1993. </year> <note> 63 BIBLIOGRAPHY 64 </note>
Reference-contexts: The algorithms devised so far focus more on genome rearrangement by inversion, as biological data has shown that inversion is a very common rearrangement in most plants and some animals such as fruit flies <ref> [8] </ref>. Some biologists even believe that many plant mtDNA rearrange only by inversion [1]. <p> 2 1 4 5) ! (1 2 3 4 5) The shortest series of reversals is not unique, since there may be more than one way to sort a permutation. 1.4 Previous Work Sorting of unsigned permutation is believed to be NP-complete, although nobody has proven that it is so <ref> [8] </ref>. In 1993, Kececioglu and Sankoff [8] gave a CHAPTER 1. INTRODUCTION 5 greedy approximation algorithm for sorting unsigned permutation with performance guarantee of 2 that ran in O (n 2 ) time. This performance guarantee was later improved to 7 4 by Bafna and Pevzner [3] in 1993. <p> 2 3 4 5) The shortest series of reversals is not unique, since there may be more than one way to sort a permutation. 1.4 Previous Work Sorting of unsigned permutation is believed to be NP-complete, although nobody has proven that it is so <ref> [8] </ref>. In 1993, Kececioglu and Sankoff [8] gave a CHAPTER 1. INTRODUCTION 5 greedy approximation algorithm for sorting unsigned permutation with performance guarantee of 2 that ran in O (n 2 ) time. This performance guarantee was later improved to 7 4 by Bafna and Pevzner [3] in 1993. <p> J. Kececioglu and D. Sankoff <ref> [8] </ref> conjectured that the problem is NP-complete but so far no one has proved that it is so.
Reference: [9] <author> J. Kececioglu and D. Sankoff. </author> <title> Efficient bounds for oriented chromosome inversion distance. </title> <booktitle> In Proceedings of 5th Annual Symposium on Combani-torial Pattern Matching, </booktitle> <pages> pages 307-325, </pages> <address> Asilomar, California, </address> <month> Jun, </month> <year> 1994. </year>
Reference-contexts: As an example, in permutation = (0 1 2 8 7 5 6 4 3 9), [0,2], [3,4], [5,6], [7,8] and [9,9] are strips. Reversal (1,2) cut the strip [0,2], while reversal (3,4) does not cut any strip. Kececioglu and Sankoff <ref> [9] </ref> in 1994 shows that for every signed permutation, there always exist a solution to sorting by reversal problem that consists of reversals that does not cut strips. Therefore to simplify analysis, we only consider such reversal in the attempt to find the optimal series of reversals.
Reference: [10] <author> P.A. </author> <title> Pevzner and M.S. Waterman. Open combinatorial problems in computational molecular biology. </title> <booktitle> In 3rd Israel Symposium on Theory of Computing and Systems, </booktitle> <pages> pages 158-163, </pages> <address> Tel Aviv, Israel, </address> <month> Jan </month> <year> 1995. </year>
Reference-contexts: The complexity of the evolutionary distance problem increases dramatically when the number of gene segments increases. A chromosome with more than 10 segments is almost impossible to analyze by exhaustive search on all possible rearrangements without the help of a computer <ref> [10] </ref>. This is where computer science can help. There are similarities between the evolutionary distance problem and the string edit distance problem. The combinatorical nature of the problem has inspired computer scientists to find algorithms to solve efficiently the evolutionary distance problem. <p> This is the main bottleneck in algorithm SortByReversal. It would be interesting to improve the running time of FindSafeReversalInOriented and subsequently improve the run ning time of SortByReversal. CHAPTER 5. CONCLUSION 61 * Genetic maps that the biologist obtain are seldom complete and may contain errors <ref> [10] </ref>. Possible errors include errors in identifying gene sequences and their directions. In our model, this will result in an error in the elements' positions and their signs.
Reference: [11] <author> D. Sankoff et al. </author> <title> Gene order comparisons for phylogenetic inference : Evolution of the mitochondrial genome. </title> <booktitle> Proceedings of National Academic of Science USA, </booktitle> <volume> 89 </volume> <pages> 6575-6579, </pages> <year> 1992. </year>
Reference-contexts: They studied genome rearrangement to analyze plant and animal molecular evolution. The problem involves finding the minimum number of rearrangements in order to convert one gene sequence into another. The number of rearrangements is often called evolutionary distance. As an example, D. Sankoff et.al. <ref> [11] </ref> used a branch-and-bound program derange to analyze the evolutionary distance between mitocondrial genomes of 16 species, from fungi like Schizosaccharomyces pombe to vertebrates like Gallus gallus (chicken). They built a table of the evolutionary distance among the species and constructed an evolutionary tree based on the table.
References-found: 11

