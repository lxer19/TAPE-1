URL: http://polaris.cs.uiuc.edu/reports/1451.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/tech_reports.html
Root-URL: http://www.cs.uiuc.edu
Title: The Generation of Optimized Codes using Nonzero Structure Analysis  
Author: Kyle A. Gallivan, Bret A. Marsolf, Aart J. C. Bik, and Harry A. G. Wijshoff 
Address: 1308 West Main Street Urbana, Illinois 61801  
Affiliation: Center for Supercomputing Research and Development University of Illinois at Urbana-Champaign  
Date: September 1995  
Pubnum: CSRD Report No. 1451  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. C. Agawal, F. G. Gustavson, and M. Zubair. </author> <title> A High Performance Algorithm Using Pre-Processing for the Sparse Matrix-Vector Multiplication. </title> <booktitle> In Proceedings of the International Conference on Supercomputing, </booktitle> <pages> pages 32-41, </pages> <year> 1992. </year>
Reference-contexts: the design of computational primitives for the multiplication of a sparse matrix and a vector, Agawal, Gustavson and Zubair have advocated an analysis procedure that decomposes a sparse matrix into a sum of several sparse matrices, each of which possess a sparsity structure that can be exploited to enhance performance <ref> [1] </ref>. In that work, the extraction and exploitation of sparsity structure was limited to the scope of the matrix-vector product primitive.
Reference: [2] <author> Richard Barrett, Michael Berry, Tony Chan, James Demmel, June Donato, Jack Dongarra, Victor Ei-jkhout, Roldan Pozo, Charles Romine, and Henk van der Vorst. </author> <title> Templates for the Solution of Linear Systems: Building Blocks for Iterative Methods. </title> <publisher> SIAM Publications, </publisher> <year> 1993. </year>
Reference-contexts: The first example will be the Conjugate Gradient (CG) iterative solver and the second example is Gaussian elimination without pivoting. The original code for the CG algorithm, for solving A fl x = b, was taken from <ref> [2] </ref>. This code was modified to eliminate the conditional in the loop and a diagonal preconditioner has been incorporated.
Reference: [3] <author> Aart J. C. Bik and Harry A. G. Wijshoff. </author> <title> Nonzero Structure Analysis. </title> <booktitle> In Proceedings of the International Conference on Supercomputing, </booktitle> <pages> pages 226-235, </pages> <year> 1994. </year>
Reference-contexts: APPARC 6634 BRA III. 1 Feature extraction from a sparse matrix and its use to select appropriate control and data structures, and generate efficient Fortran code, was discussed in <ref> [3] </ref>. However, no algebraic information was used to aid in the code generation.
Reference: [4] <author> L. DeRose, K. Gallivan, E. Gallopoulos, B. Marsolf, and D. Padua. </author> <title> A MATLAB Compiler and Restruc-turer for the Development of Scientific Libraries and Applications. </title> <booktitle> To appear in Proceedings for the 8th International Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> Columbus, Ohio, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: The design and implementation of an environment which can help the algorithm designer utilize this knowledge can both speed the development process for libraries and improve their performance within application codes. One ongoing attempt at such an environment is described in <ref> [4] </ref>. <p> One such environment which operates on this level is the system for the compilation and interactive restructuring of numerical algorithms using MATLAB being developed by DeRose, Gallivan, Gallopoulos, Marsolf, and Padua <ref> [4] </ref>. The input language to this system is the array language MATLAB. The system parses the MATLAB code and then allows transformations to be performed on the internal format. From the internal format, the system can then generate code in the target language, either Fortran 90, C++, or MATLAB.
Reference: [5] <author> The Math Works, Inc. </author> <title> MATLAB, High-Performance Numeric Computation and Visualization Software. User's Guide, </title> <year> 1992. </year>
Reference-contexts: One ongoing attempt at such an environment is described in [4]. The environment is attempting to use novel compilation techniques adapted for languages specifically targeted for rapid prototyping (such as that in MATLAB <ref> [5] </ref>), high-level algebraic transformations that exploit detailed mathematical information about the operations performed, implementation details of the libraries available on the target machines and new compiler strategies for detecting and exploiting problem structure such as matrix sparsity.
Reference: [6] <author> Youcef Saad. SPARSKIT: </author> <title> A basic tool for sparse matrix computations. </title> <address> CSRD/RIACS, </address> <year> 1990. </year> <month> 14 </month>
Reference-contexts: The tool of Bik and Wijshoff, previously mentioned, is able to detect several well-known forms in O (n + nnz) time. In addition, some statistical information about the nonzero structure is computed, comparable with the information that is gathered by the tool of Saad (SPARSKIT) <ref> [6] </ref>. Although originally developed for a compiler that transforms dense programs into 3 its nearly dense block decomposition.
References-found: 6

