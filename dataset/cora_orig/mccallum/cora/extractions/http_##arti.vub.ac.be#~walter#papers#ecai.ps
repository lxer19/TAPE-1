URL: http://arti.vub.ac.be/~walter/papers/ecai.ps
Refering-URL: http://arti.vub.ac.be/~walter/papers/welcome.html
Root-URL: 
Title: A Constructivist View on Knowledge Engineering  
Author: Walter Van de Velde 
Abstract: This paper addresses the notion of a repository of knowledge engineering experience and expertise from a con-structivist point of view. Construction refers to the everyday practice by which knowledge engineers develop and exercise their resources: representations, ontologies, structures, mechanisms or, in general, their models. It is argued that the operations, arguments and circumstances that play a role in the life-cycle of these models should be the primary object of study, rather than the reality that they describe. A notion of modeling libraries is proposed that targets wider modeling support, bottom-up construction and is not aimed at standardization. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aamodt, B. Bredeweg, J. Breuker, C. Duursma, C. L. Lockenhoff, K. Orsvarn, J. Top, A. Valente, and W. Van de Velde, </author> <title> `The CommonKads library', </title> <institution> Esprit project p5248, AI-Lab, Vrije Universiteit Brussel, </institution> <address> Pleinlaan 2, 1050 Brussels, Belgium, </address> <year> (1992). </year>
Reference-contexts: This problem is typically addressed by proposing a common modeling language or framework [4], by facilities for storage, retrieval and modification of (partial) models [8] and/or through the development of standard libraries of models <ref> [3, 7, 2, 1] </ref>. Note however that none of these approaches has actually realized a full library and a genuine practice of reuse is definitely not real yet. <p> Our aim here is to extend support from a library beyond model selection (a model library) into any aspect of model development (a modeling library). Traditionally a knowledge engineering library is viewed as a collection of models (partial or abstract), in effect, a model library <ref> [3, 7, 2, 1] </ref>. This is a limited view. A modeling library should store anything that is useful in developing a particular type of model (as long as it can be meaningfully retrieved). <p> They can be genuine building blocks that only need to be inserted in a model, or they can be like modeling methods that specify how to transform a model to yield for example more detail or more contents. 2 For example, in CommonKADS there are the following modeling components <ref> [1] </ref>: function, function structure, control structure, expansion method, control method, generic domain model and domain ontology. What is important here is that these are not all exact subparts of the expertise model [12]. For example, the notions of function or function structure are alien to the expertise model. <p> Whoever specifies a modeling library is free to define the modeling components and canonical operators he/she finds useful. For instance here are canonical operations proposed for expertise modeling in CommonKADS <ref> [1] </ref>: Use function as inference, Use function as task, Expand task, Expand inference, Use control structure, Combine control structure, Refine control structure, Use in domain model, Use in case model and Use domain ontology. 3 The proposed library concept is a generic one. <p> We will mostly use examples from expertise modeling in CommonKADS <ref> [12, 1] </ref> and conceptual design in general, but the constructs are in no way limited to this particular type of modeling. 3.2 Composition operators Composition operators take several modeling components and put them together in a model. <p> These two models are basically the same but differ in the use of terminology for referring to the domain and inferential primitives. Table 1 (from <ref> [1, Duursma chapter] </ref>) explicates the mapping. cover and differentiate assessment event decision or case feature symptom observable case feature explanatory event decision, case features connection explanatory connection decision, more specific decision connection initial features initial case features given required events decision, required decision or feature association enabling events decision, enabling decision <p> Modeling operators can express how modeling components from different frameworks can contribute to the construction of a particular model. If one wants to use modeling components from another framework one defines the appropriate operators. For example a Com-monKADS function structure <ref> [1] </ref> can be turned into a Subtask Model Dependency Diagram in KresT [8]. A VITAL GDM is close enough to a CommonKADS expansion method [1] to envisage defining an appropriate operator. Also the composition operators can be used to interpret building blocks from one framework in terms of another. <p> If one wants to use modeling components from another framework one defines the appropriate operators. For example a Com-monKADS function structure <ref> [1] </ref> can be turned into a Subtask Model Dependency Diagram in KresT [8]. A VITAL GDM is close enough to a CommonKADS expansion method [1] to envisage defining an appropriate operator. Also the composition operators can be used to interpret building blocks from one framework in terms of another.
Reference: [2] <author> J. A. Breuker, B. J. Wielinga, M. van Someren, R. de Hoog, A. Th. Schreiber, P. de Greef, B. Bredeweg, J. Wielemaker, J. P. Billault, M. Davoodi, and S. A. Hayward, </author> <title> `Model Driven Knowledge Acquisition: Interpretation Models', ESPRIT Project P1098 Deliverable D1 (task A1), </title> <institution> University of Amsterdam and STL Ltd, </institution> <year> (1987). </year>
Reference-contexts: This problem is typically addressed by proposing a common modeling language or framework [4], by facilities for storage, retrieval and modification of (partial) models [8] and/or through the development of standard libraries of models <ref> [3, 7, 2, 1] </ref>. Note however that none of these approaches has actually realized a full library and a genuine practice of reuse is definitely not real yet. <p> Similarity hypothesis: similar situations share similar mod els. The various efforts toward model libraries (of generic tasks [3], problem solving methods [7], interpretation models <ref> [2] </ref>, mechanisms [5]) indicate the hypothesis that a model (or an abstraction or generalization of it) can be reused to some degree over a characterizable range of situations. Let us examine these hypotheses in some more detail. "Knowledge acquisition is modeling". <p> Our aim here is to extend support from a library beyond model selection (a model library) into any aspect of model development (a modeling library). Traditionally a knowledge engineering library is viewed as a collection of models (partial or abstract), in effect, a model library <ref> [3, 7, 2, 1] </ref>. This is a limited view. A modeling library should store anything that is useful in developing a particular type of model (as long as it can be meaningfully retrieved). <p> Generic models capture useful combinations of model elements and can therefore often (but not always) be expressed as combined uses of modeling components. In the literature one finds several classes of such 'generic models' : interpretation models <ref> [2] </ref>, role-limiting methods [7], generic tasks [3] and so forth. For example a generic task is a combination of task, its decomposition, control, inferences and domain organizations. It can be obtained by the combination of modeling components.
Reference: [3] <author> B. Chandrasekaran, </author> <title> `Generic tasks in knowledge-based reasoning: High level building blocks for expert system design', </title> <journal> IEEE Expert, </journal> <volume> 1(3), </volume> <pages> 23-30, </pages> <year> (1986). </year>
Reference-contexts: This problem is typically addressed by proposing a common modeling language or framework [4], by facilities for storage, retrieval and modification of (partial) models [8] and/or through the development of standard libraries of models <ref> [3, 7, 2, 1] </ref>. Note however that none of these approaches has actually realized a full library and a genuine practice of reuse is definitely not real yet. <p> Similarity hypothesis: similar situations share similar mod els. The various efforts toward model libraries (of generic tasks <ref> [3] </ref>, problem solving methods [7], interpretation models [2], mechanisms [5]) indicate the hypothesis that a model (or an abstraction or generalization of it) can be reused to some degree over a characterizable range of situations. Let us examine these hypotheses in some more detail. "Knowledge acquisition is modeling". <p> Our aim here is to extend support from a library beyond model selection (a model library) into any aspect of model development (a modeling library). Traditionally a knowledge engineering library is viewed as a collection of models (partial or abstract), in effect, a model library <ref> [3, 7, 2, 1] </ref>. This is a limited view. A modeling library should store anything that is useful in developing a particular type of model (as long as it can be meaningfully retrieved). <p> Generic models capture useful combinations of model elements and can therefore often (but not always) be expressed as combined uses of modeling components. In the literature one finds several classes of such 'generic models' : interpretation models [2], role-limiting methods [7], generic tasks <ref> [3] </ref> and so forth. For example a generic task is a combination of task, its decomposition, control, inferences and domain organizations. It can be obtained by the combination of modeling components. Such a combination can be expressed as a set of operations of the canonical type. <p> A VITAL GDM is close enough to a CommonKADS expansion method [1] to envisage defining an appropriate operator. Also the composition operators can be used to interpret building blocks from one framework in terms of another. For example, a generic task <ref> [3] </ref> is a combination of task, its decomposition, control, inferences and domain organizations. 4 Toward a Practice of Reuse In previous sections we have proposed a library concept that takes the notion of operation seriously.
Reference: [4] <author> M. Genesereth and R. E. Fikes, </author> <title> `Knowledge interchange format version 3.0 reference manual', </title> <type> Report Logic 92-1, </type> <institution> Logic Group, Stanford University, </institution> <address> CA., </address> <year> (1992). </year>
Reference-contexts: 1 Introduction This paper treats the notion of a repository of knowledge engineering experience and expertise that is useful and usable to the wider community of knowledge engineers. This problem is typically addressed by proposing a common modeling language or framework <ref> [4] </ref>, by facilities for storage, retrieval and modification of (partial) models [8] and/or through the development of standard libraries of models [3, 7, 2, 1]. Note however that none of these approaches has actually realized a full library and a genuine practice of reuse is definitely not real yet.
Reference: [5] <author> G. Klinker, C. Bhola, G. Dallemagne, D. Marques, and J. Mc-Dermott, </author> <title> `Usable and reusable programming constructs', </title> <journal> Knowledge Acquisition, </journal> <volume> 3, </volume> <pages> 117-136, </pages> <year> (1991). </year>
Reference-contexts: Similarity hypothesis: similar situations share similar mod els. The various efforts toward model libraries (of generic tasks [3], problem solving methods [7], interpretation models [2], mechanisms <ref> [5] </ref>) indicate the hypothesis that a model (or an abstraction or generalization of it) can be reused to some degree over a characterizable range of situations. Let us examine these hypotheses in some more detail. "Knowledge acquisition is modeling". <p> What are the consequences for the interpretation of the similarity hypothesis? Usually reuse is guided by so called task features, characterizations of the process being modelled that are indicative for the adequacy of a certain model <ref> [5] </ref>. This approach, however, has some problems (e.g. [10] and it is now clear why: it views a model as a black-box with a declared relation to reality. However, a practice of reuse that ignores the origin of a model in a series of argumentations is bound to fail.
Reference: [6] <author> B. Latour and S. Woolgar, </author> <title> Laboratory Life: The Construction of Scientific Facts, </title> <publisher> Princeton University Press, </publisher> <address> Prince-ton, New Jersey., 2nd edition edn., </address> <year> 1986. </year>
Reference-contexts: Similar observations have been made in other fields, like philosophy of science. Latour and Woolgar <ref> [6] </ref>, in the context of theory formation, even argue that reality is the consequence rather than the cause of this construction: as qualifications on validity are dropped (or become embedded in circumstances or in material tools) increasingly factual statements are created. <p> Common 'tricks' in the practice of scientific development (or model development), in particular black-boxing (reusing packaged results without questioning their premises) and materialization (embedding results in material tools or 'laboratory furniture', e.g., shells) <ref> [6] </ref> are ways to shortcut argumentations but they work only by virtue of credibility, not by `declaration' that they are in some sense a correct model. One conclusion is that a standard framework, language, or library of reusable models are mistaken goals. <p> By its emphasis on construction we believe that it is also a more realistic approach to the collection of really useful modeling expertise in its broader sense, i.e., "the practical craftswork by which inscriptions are superimposed and accounts backed up or dismissed" <ref> [6] </ref>. However, if we take this direction seriously then reuse must be treated, not as an added value to an existing methodology, but as an integral and integrated part of the real practice of knowledge engineering. <p> Van de Velde being accepted (true, correct)." (Section 1). Here are some of the more surprising steps (after <ref> [6] </ref>): Demonstration: in AI we use operationalizations to make our case. When a model is being used for the realization of a system with a clear impact its value will dramatically increase. It is important that this operation be properly documented or its impact may get lost.
Reference: [7] <author> J. McDermott, </author> <title> `Preliminary steps towards a taxonomy of problem-solving methods', in Automating Knowledge Acquisition for Expert Systems, </title> <editor> ed., S. </editor> <booktitle> Marcus, </booktitle> <pages> 225-255, </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> (1988). </year>
Reference-contexts: This problem is typically addressed by proposing a common modeling language or framework [4], by facilities for storage, retrieval and modification of (partial) models [8] and/or through the development of standard libraries of models <ref> [3, 7, 2, 1] </ref>. Note however that none of these approaches has actually realized a full library and a genuine practice of reuse is definitely not real yet. <p> Similarity hypothesis: similar situations share similar mod els. The various efforts toward model libraries (of generic tasks [3], problem solving methods <ref> [7] </ref>, interpretation models [2], mechanisms [5]) indicate the hypothesis that a model (or an abstraction or generalization of it) can be reused to some degree over a characterizable range of situations. Let us examine these hypotheses in some more detail. "Knowledge acquisition is modeling". <p> Our aim here is to extend support from a library beyond model selection (a model library) into any aspect of model development (a modeling library). Traditionally a knowledge engineering library is viewed as a collection of models (partial or abstract), in effect, a model library <ref> [3, 7, 2, 1] </ref>. This is a limited view. A modeling library should store anything that is useful in developing a particular type of model (as long as it can be meaningfully retrieved). <p> Generic models capture useful combinations of model elements and can therefore often (but not always) be expressed as combined uses of modeling components. In the literature one finds several classes of such 'generic models' : interpretation models [2], role-limiting methods <ref> [7] </ref>, generic tasks [3] and so forth. For example a generic task is a combination of task, its decomposition, control, inferences and domain organizations. It can be obtained by the combination of modeling components. Such a combination can be expressed as a set of operations of the canonical type.
Reference: [8] <author> L. Steels, </author> <title> `The componential framework and its role in reusability', in Second Generation Expert Systems, </title> <editor> eds., Jean-Paul Krivine Jean-Marc David and Reid Simmons, </editor> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> (1993). </year>
Reference-contexts: This problem is typically addressed by proposing a common modeling language or framework [4], by facilities for storage, retrieval and modification of (partial) models <ref> [8] </ref> and/or through the development of standard libraries of models [3, 7, 2, 1]. Note however that none of these approaches has actually realized a full library and a genuine practice of reuse is definitely not real yet. <p> For example a CommonKADS expertise modeling library contains models that respect the expertise model definition in [12]. A library for knowledge modeling in Components of Expertise contains generic models that respect the model definition in <ref> [8] </ref>. * A modeling operation is an operation (relation) over models that transforms a generic model into another one. A modeling operation is typically represented as the application of a modeling operator in the context of a generic model, i.e., to a part of it. <p> The stated or implied presence of a feature restricts the library elements (including the operations) from being retrieved. Features thus corresponds to an implicit class organization of library elements, where a class corresponds to those elements that have a compatible set of features. See also <ref> [8] </ref> for a similar usage of feature descriptions. 3 Operations of construction In the previous section we have introduced the concept of a modeling library. <p> The power of a modeling framework therefore comes largely from the dependencies between the different types of models. For example, in CommonKADS there are 6 types of models: organization, task, expertise, communication, agent and design model. The KresT workbench related knowledge level, code and execution levels <ref> [8] </ref>. Modeling operators must be defined that document useful modeling decisions for one model, based on characteristics of another one. In KresT [8] the relation between the knowledge and symbol level model is defined by a straight relation between modeling components at both levels. This presupposed a structure preserving design. <p> The KresT workbench related knowledge level, code and execution levels <ref> [8] </ref>. Modeling operators must be defined that document useful modeling decisions for one model, based on characteristics of another one. In KresT [8] the relation between the knowledge and symbol level model is defined by a straight relation between modeling components at both levels. This presupposed a structure preserving design. However, in general the mapping between models does not need to be so straightforward. <p> If one wants to use modeling components from another framework one defines the appropriate operators. For example a Com-monKADS function structure [1] can be turned into a Subtask Model Dependency Diagram in KresT <ref> [8] </ref>. A VITAL GDM is close enough to a CommonKADS expansion method [1] to envisage defining an appropriate operator. Also the composition operators can be used to interpret building blocks from one framework in terms of another. <p> It is important that this operation be properly documented or its impact may get lost. Of course this requires an environment in which knowledge- and symbol level models can be treated together (e.g. KresT <ref> [8] </ref>). Blackbox-ing or encapsulation. Occurs when the credibility of a model (i.e. the strength of its total argumentation) becomes so high that its argumentation and its implicit assumptions are no longer being questioned. The model of heuristic classification may be such a case. Blackbox-ing is not an easy operation.
Reference: [9] <author> W. Van de Velde, </author> <title> `Issues in knowledge level modeling', in Second Generation Expert Systems, </title> <editor> eds., J.-P. Krivine J.- M. David and R. Simmons, </editor> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> (1993). </year>
Reference-contexts: What ties all these models together is the fact that they model one and the same observed or intended process <ref> [9] </ref>. If one takes a radical position on this modeling view, then it can be argued that the value of a model is not in its intrinsic relation to reality.
Reference: [10] <author> J. Vanwelkenhuysen, </author> <title> Participative design of industrial knowledge based systems, </title> <type> Ph.D. dissertation, </type> <institution> Vrije Universiteit Brussel, </institution> <address> Brussels, Belgium, </address> <year> 1993. </year> <note> Also as VUB AI-Lab TR-93-1. </note>
Reference-contexts: A model is the result of a series of arguments, negotiations and circumstances involving knowledge engineers, domain experts, clients, system developers, managers and so forth that need to agree on its acceptability for their different purposes (e.g. <ref> [10] </ref>). Similar observations have been made in other fields, like philosophy of science. <p> What are the consequences for the interpretation of the similarity hypothesis? Usually reuse is guided by so called task features, characterizations of the process being modelled that are indicative for the adequacy of a certain model [5]. This approach, however, has some problems (e.g. <ref> [10] </ref> and it is now clear why: it views a model as a black-box with a declared relation to reality. However, a practice of reuse that ignores the origin of a model in a series of argumentations is bound to fail. <p> This type of operator accounts for much of the modeling tricks that are used in knowledge engineering to adapt approximate models to specific situations. As an example consider the design decisions taken in TroTelC, a knowledge system for troubleshooting printed circuit boards <ref> [10] </ref>. "TroTelC's design aims at reducing knowledge engineering and representations efforts (i.e. improving system adaptivity) and improving troubleshooting effectiveness with respect to existing computational theories. This goes at the cost of the design's troubleshooting resolution. <p> This goes at the cost of the design's troubleshooting resolution. The design tries to compromise between these quality requirements, while keeping the troubleshooting competence acceptable" <ref> [10, p251] </ref> (figure 3). The conceptual design guidelines affecting these requirements are listed in table 2. Each of these corresponds to a modification operator, aimed at realizing a different compromise between requirements. onto the quality requirements (from [Vanwelkenhuysen 93]).
Reference: [11] <author> J. Vanwelkenhuysen and W. Van de Velde, </author> <title> `What's the problem when working with generic models', </title> <type> AI Memo 92-07, </type> <institution> AI-LAb, Vrije Universiteit Brussel, </institution> <address> Brussels, Belgium, </address> <year> (1992). </year>
Reference-contexts: Blackbox-ing or encapsulation. Occurs when the credibility of a model (i.e. the strength of its total argumentation) becomes so high that its argumentation and its implicit assumptions are no longer being questioned. The model of heuristic classification may be such a case. Blackbox-ing is not an easy operation. In <ref> [11] </ref> we have pointed at some dangers of this and similar arguments are showing up in software engineering. Again, the value of a model derives in large part from the credibility of its source. Materialization Materialization is an extreme form of encapsulation.
Reference: [12] <author> B. J. Wielinga, W. Van de Velde, A. Th. Schreiber, and J. M. Akkermans, </author> <title> `Towards a unification of knowledge modelling approaches', in Second Generation Expert Systems, </title> <editor> eds., J.- M. David, J.-P. Krivine, and R. Simmons, </editor> <publisher> Springer-Verlag, </publisher> <address> Berlin, (1993). </address> <publisher> Standards 733 W. Van de Velde </publisher>
Reference-contexts: What is important here is that these are not all exact subparts of the expertise model <ref> [12] </ref>. For example, the notions of function or function structure are alien to the expertise model. Indeed, a type of modeling component can be anything that is useful for constructing a model of a particular type. * The generic models are frames that represent a class of complete models. <p> All generic models must respect the form of the model that a library is specific for. For example a CommonKADS expertise modeling library contains models that respect the expertise model definition in <ref> [12] </ref>. A library for knowledge modeling in Components of Expertise contains generic models that respect the model definition in [8]. * A modeling operation is an operation (relation) over models that transforms a generic model into another one. <p> We will mostly use examples from expertise modeling in CommonKADS <ref> [12, 1] </ref> and conceptual design in general, but the constructs are in no way limited to this particular type of modeling. 3.2 Composition operators Composition operators take several modeling components and put them together in a model.
References-found: 12

