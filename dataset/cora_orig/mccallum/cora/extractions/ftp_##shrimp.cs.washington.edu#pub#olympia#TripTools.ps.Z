URL: ftp://shrimp.cs.washington.edu/pub/olympia/TripTools.ps.Z
Refering-URL: http://www.cs.washington.edu/homes/hauck/publications.html
Root-URL: 
Title: Placement and Routing Tools for the Triptych FPGA  
Author: Carl Ebeling, Larry McMurchie, Scott Hauck, Steven Burns 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Note: submitted to IEEE Transactions on VLSI  
Abstract: Field-programmable gate arrays (FPGAs) are becoming an increasingly important implementation medium for digital logic. One of the most important keys to using FPGAs effectively is a complete, automated software system for mapping onto the FPGA architecture. Unfortunately, many of the tools necessary require different techniques than traditional circuit implementation options, and these techniques are often developed specifically for only a single FPGA architecture. In this paper we describe automatic mapping tools for Triptych 1 , an FPGA architecture with improved logic density and performance over commercial FPGAs. These tools include a simulated-annealing placement algorithm that handles the routability issues of fine-grained FPGAs, and an architecture-adaptive routing algorithm that can easily be retargeted to other FPGAs. We also describe extensions to these algorithms for mapping asynchronous circuits to Montage, the first FPGA architecture to completely support asynchronous and synchronous interface applications.
Abstract-found: 1
Intro-found: 1
Reference: [Algotronix91] <author> Algotronix Limited, </author> <note> CAL1024 Preliminary Datasheet, </note> <year> 1991. </year>
Reference-contexts: While standard cell techniques are sufficient for those FPGAs that invest a large portion of their chip area in routing resources [Xilinx93], special care must be taken in FPGA architectures that seek to limit the cost of routing. For example, architectures such as the Algotronix CAL <ref> [Algotronix91] </ref> and Triptych have localized, limited routing resources, and a good placement will not only put connected logic functions together, but will also ensure that logic elements are not packed too closely for the routing to succeed.
Reference: [Beetem91] <author> J. Beetem, </author> <title> "Simultaneous Placement and Routing of the LABYRINTH Reconfigurable Logic Array", </title> <booktitle> International Workshop on Field-Programmable Logic and Applications, </booktitle> <address> Oxford, </address> <year> 1991, </year> <pages> pp. 232-243. </pages>
Reference-contexts: Algorithms have been developed specifically for the placement of logic in FPGAs. [Togawa94] uses a min-cut placement combined with hierarchical global routing that introduces signal congestion into the placement process. <ref> [Beetem91] </ref> uses a penalty-driven iterative improvement algorithm. The problem of routing FPGAs bears a considerable resemblance to the problem of global routing for custom integrated circuit design. In both cases the goal is to assign signal routes to routing resources in order to minimize congestion and achieve performance goals.
Reference: [Brown92] <author> S. Brown, J. Rose, Z. Vranesic, </author> <title> "A Detailed Router for Field-Programmable Gate Arrays," </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. 11, no. 5, </volume> <month> May </month> <year> 1992, </year> <pages> pp. 620-628. </pages>
Reference-contexts: A blame factor is introduced to decide what routes need to be ripped up when a connection is not made. [Palczewski92] describes an application of the A* algorithm to the switchboxes in the Xilinx architecture. <ref> [Brown92] </ref> uses a global router to assign connections so that channel densities are balanced. A detailed router generates families of explicit paths within channels to resolve congestion. If some connections are unrealizable, the channel routes are ripped up and a rerouting is performed using larger families of paths. <p> If some connections are unrealizable, the channel routes are ripped up and a rerouting is performed using larger families of paths. Delay is usually factored into the standard rip-up and retry approach by ordering the nets to be routed so that critical nets are routed most directly <ref> [Brown92] </ref>. How to balance the competing goals of minimizing delay of critical paths and minimizing congestion is an open question. In [Frankle92] a slack analysis is performed to calculate upper bounds for individual sourcesink connections. A rip-up and retry scheme then routes signals, increasing upper bounds as needed.
Reference: [Cohn91] <author> J. Cohn, D. Garrod, R. Rutenbar, and L. Carley, "KOAN/ANAGRAM II: </author> <title> New Tools for Device-Level Analog Placement and Routing," </title> <journal> IEEE Journal of SolidState Circuits, </journal> <volume> vol. 26, </volume> <month> March </month> <year> 1991, </year> <pages> pp. 330-342. </pages>
Reference-contexts: By itself, this technique usually yields many unrouteable nets, which must be rerouted by hand. A multitude of rip-up and retry approaches have been proposed to remedy the deficiencies of this approach ([Kuh86], [Linsker89], <ref> [Cohn91] </ref>). In essence, rip-up and retry involves rerouting nets in congested areas. The basic problem of rip-up and retry is that the success of a route is dependent not just on the choice of which nets to reroute, but also on the order that the rerouting is done.
Reference: [Frankle92] <author> J. Frankle, </author> <title> "Iterative and Adaptive Slack Allocation for Performance-driven Layout and FPGA Routing," </title> <booktitle> in Proc. 29h Design Automation Conference, </booktitle> <month> June </month> <year> 1992, </year> <pages> pp. 536-542. </pages>
Reference-contexts: Delay is usually factored into the standard rip-up and retry approach by ordering the nets to be routed so that critical nets are routed most directly [Brown92]. How to balance the competing goals of minimizing delay of critical paths and minimizing congestion is an open question. In <ref> [Frankle92] </ref> a slack analysis is performed to calculate upper bounds for individual sourcesink connections. A rip-up and retry scheme then routes signals, increasing upper bounds as needed. Once the routing is completed, selected connections are rerouted to reduce the overall delay. <p> Note that by recalculating the A ij each iteration, we keep a tight reign on the critical path. Over the course of iterations, the critical path increases only to the extent required to resolve congestion. This approach is fundamentally different from other schemes ([Brown92], <ref> [Frankle92] </ref>) which attempt to resolve congestion first, then reduce delay by rerouting critical nets. 4.4 Enhancements Several enhancements can increase the speed of the algorithm without adversely affecting the quality of the route. One enhancement is to introduce the A* algorithm into the breadth-first search loop.
Reference: [Hauck95] <author> S. </author> <title> Hauck ...., The Triptych FPGA Architecture, </title> <journal> IEEE Transactions on Computer-Adied Design, current issue. </journal>
Reference-contexts: However, FPGAs differ from these other technologies in one critical factor: while the logic and routing resources in an FPGA can be customized by the end-user, the amount and location of each of 1 Triptych is described in the companion paper The Triptych FPGA Architecture <ref> [Hauck95] </ref>. the resources is fixed by the architecture. <p> Minimizing the wirelength will generally cause cells to be placed tightly in the center of the array, which almost certainly results in unrouteable nets. The cost function developed in this section assumes the three-input, three output RLB architecture described in Section 2.1 of the companion paper <ref> [Hauck95] </ref>. This architecture relies on using some number of empty cells in the array for routing. These cells must be allocated as a part of the placement process. The wirelength calculation for the Triptych architecture requires a very different calculation than for other technologies.
Reference: [Hill91] <author> D. Hill, </author> <title> "A CAD System for the Design of Field Programmable Gate Arrays," </title> <booktitle> in Proc. 28t Design Automation Conference, </booktitle> <month> June </month> <year> 1991, </year> <pages> pp. 187-192. </pages> <month> [ILSW93], </month> <title> "LGSynth93 Benchmark Set," </title> <booktitle> 1993 International Logic Synthesis Workshop, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Most of the work to date in FPGA routing has applied variants on rip-up and retry schemes. Often specific features of a target architecture are exploited, with a resulting loss in generality. <ref> [Hill91] </ref> uses a breadth-first search while performing routes in random order.
Reference: [Kuh86] <author> E. Kuh, M. Marek-Sadowska, </author> <title> "Global Routing," in Layout Design and Verification, </title> <editor> T. Ohtsuki, Ed., </editor> <publisher> Elsevier Science Publishers B. V. (North-Holland), </publisher> <year> 1986, </year> <pages> pp. 169-198. </pages>
Reference: [Lee61] <author> C. Lee, </author> <title> "An Algorithm for Path Connections and its Applications," </title> <journal> IRE Trans. Electron. Comput., </journal> <volume> vol. EC-10, </volume> <year> 1961, </year> <pages> pp. 346-365. </pages>
Reference-contexts: This distinction is important, as it prevents direct application of much of the work that has been done in custom IC routing. By far the most common approach to global routing of custom ICs is a shortest path algorithm with obstacle avoidance <ref> [Lee61] </ref>. By itself, this technique usually yields many unrouteable nets, which must be rerouted by hand. A multitude of rip-up and retry approaches have been proposed to remedy the deficiencies of this approach ([Kuh86], [Linsker89], [Cohn91]). In essence, rip-up and retry involves rerouting nets in congested areas.
Reference: [Linsker84] <author> R. Linsker, </author> <title> "An Iterative-Improvement Penalty-Function-Driven Wire Routing System," </title> <journal> IBM Journal of Research and Development, </journal> <volume> vol. 28, </volume> <month> Sept. </month> <year> 1984, </year> <pages> pp. 613-624. </pages>
Reference: [McMurchie94] <author> L. McMurchie and C. Ebeling, </author> <title> "WireC Tutorial and Reference Manual," </title> <institution> UW Dept. of CS&E TR# 94-09-09, </institution> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: The routing resources of Triptych were described using the schematic capture system WireC <ref> [McMurchie94] </ref>. The description includes all specifics about the construction of the RLBs, the segmentation of vertical buses and diagonal connections. The output of the WireC system is a directed graph over all routing resources that includes delay information.
Reference: [Nair87] <author> R. Nair, </author> <title> "A Simple Yet Effective Technique for Global Wiring," </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> vol. CAD-6, no. 6, </volume> <month> March </month> <year> 1987, </year> <pages> pp. 165-172. </pages>
Reference-contexts: sourcesink distances are then weighted relative to the critical path and the contribution of their lengths to the overall cost function are scaled accordingly. 4 Triptych Routing Software Our approach to routing for Triptych is based on an iterative approach to global routing of custom integrated circuits developed by Nair <ref> [Nair87] </ref>. This approach differs in several aspects from most forms of rip-up and retry. Only one net is ripped up at a time, but every net is ripped up and rerouted on every iteration, even if the net does not pass through a congested area.
Reference: [Palczewski92] <author> M. Palczewski, </author> <title> "Plane Parallel A* Maze Router and its Application to FPGAs," </title> <booktitle> in Proc. 29th Design Automation Conference, </booktitle> <month> June </month> <year> 1992, </year> <pages> pp 691-697. </pages> <address> [PREP92] "PREP PLD Benchmark Suite #1," </address> <institution> Programmable Electronics Performance Corp., </institution> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: Often specific features of a target architecture are exploited, with a resulting loss in generality. [Hill91] uses a breadth-first search while performing routes in random order. A blame factor is introduced to decide what routes need to be ripped up when a connection is not made. <ref> [Palczewski92] </ref> describes an application of the A* algorithm to the switchboxes in the Xilinx architecture. [Brown92] uses a global router to assign connections so that channel densities are balanced. A detailed router generates families of explicit paths within channels to resolve congestion.
Reference: [Sechen87] <author> C. Sechen, K. Lee, </author> <title> "An Improved Simulated Annealing Algorithm for Row-Based Placement," </title> <booktitle> Proc. IEEE International Conference on Computer Aided Design, </booktitle> <month> Nov. </month> <year> 1987, </year> <pages> pp. 478-481. </pages>
Reference-contexts: While this problem is characteristic of traditional channeled gate arrays, it is more extreme for FPGAs. Simulated annealing has been applied to the FPGA placement problem in a manner similar to the placement of standard cells <ref> [Sechen87] </ref>. While standard cell techniques are sufficient for those FPGAs that invest a large portion of their chip area in routing resources [Xilinx93], special care must be taken in FPGA architectures that seek to limit the cost of routing.
Reference: [SIS92] <author> Sentovich et al., </author> <title> "SIS: A System for Sequential Circuit Synthesis," </title> <note> Electronics Research Laboratory Memorandum No. </note> <institution> UCB/ERL M92/41, Dept. of EE & CS, Univ. of California, Berkeley, </institution> <address> CA, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: All circuits were synthesized and technology-mapped using SIS <ref> [SIS92] </ref> and covering was performed using the table-lookup (TLU) architecture primitives in SIS. The 8x64 Triptych array (8 columns, 64 rows) was used for all the experiments. There are 8 vertical, unidirectional, segmented buses.
Reference: [Togawa94] <author> N. Togawa, M. Sato, T. Ohtuski, </author> <title> "A Simultaneous Placement and Global Routing Algorithm for Field-Programmable Gate Arrays," </title> <booktitle> presented at FPGA94, </booktitle> <address> Berkeley, </address> <year> 1994. </year>
Reference-contexts: Algorithms have been developed specifically for the placement of logic in FPGAs. <ref> [Togawa94] </ref> uses a min-cut placement combined with hierarchical global routing that introduces signal congestion into the placement process. [Beetem91] uses a penalty-driven iterative improvement algorithm. The problem of routing FPGAs bears a considerable resemblance to the problem of global routing for custom integrated circuit design.
Reference: [Walkup92] <author> E. Walkup, S. Hauck, G. Borriello, C. Ebeling, </author> <title> "Routing-directed Placement for the Triptych FPGA," </title> <booktitle> Proceedings of FPGA92, </booktitle> <address> Berkeley, CA, </address> <year> 1992. </year>
Reference: [Xilinx93] <author> Xilinx, Inc., </author> <title> "XACT Development System Reference Guide," </title> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: Simulated annealing has been applied to the FPGA placement problem in a manner similar to the placement of standard cells [Sechen87]. While standard cell techniques are sufficient for those FPGAs that invest a large portion of their chip area in routing resources <ref> [Xilinx93] </ref>, special care must be taken in FPGA architectures that seek to limit the cost of routing.
References-found: 18

