URL: http://www.cs.cornell.edu/kozen/papers/change.ps
Refering-URL: http://www.cs.cornell.edu/kozen/papers/papers.html
Root-URL: 
Email: kozen@cs.cornell.edu  zaks@cs.technion.ac.il  
Phone: 2  
Title: Optimal Bounds for the Change-Making Problem  
Author: Dexter Kozen and Shmuel Zaks 
Keyword: c m c m1  complete.  
Note: c 3 1 &lt; &lt; c m c m1  
Address: Ithaca, New York 14853, USA  Haifa, Israel  
Affiliation: 1 Computer Science Department, Cornell University  Computer Science Department, Technion  
Abstract: The change-making problem is the problem of representing a given value with the fewest coins possible. We investigate the problem of determining whether the greedy algorithm produces an optimal representation of all amounts for a given set of coin denominations 1 = c 1 &lt; c 2 &lt; &lt; c m . Chang and Gill [1] show that if the greedy algorithm is not always optimal, then there exists a counterexample x in the range To test for the existence of such a counterexample, Chang and Gill propose computing and comparing the greedy and optimal representations of all x in this range. In this paper we show that if a counterexample exists, then the smallest one lies in the range and these bounds are tight. Moreover, we give a simple test for the existence of a counterexample that does not require the calculation of optimal representations. In addition, we give a complete characterization of three-coin systems and an efficient algorithm for all systems with a fixed number of coins. Finally, we show that a related problem is coNP - c 3 x &lt;
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S. K. Chang and A. Gill. </author> <title> Algorithmic solution of the change-making problem. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 17(1) </volume> <pages> 113-122, </pages> <month> January </month> <year> 1970. </year>
Reference-contexts: The system 1; k; k + 1 for k &gt; 2 is not canonical: the counterexample 2k has optimal representation 0; 2; 0 of size 2, whereas the greedy representation is k 1; 0; 1 of size k. Chang and Gill <ref> [1] </ref> show that it suffices to search for a counterexample among the members of a certain finite set; if no counterexample is found in this set, then no counterexample exists and the system is canonical. The size of the set to be checked is polynomial in the largest coin value. <p> The size of the set to be checked is polynomial in the largest coin value. Specifically, Theorem 2 Chang and Gill <ref> [1] </ref>. Let 1 = c 1 &lt; &lt; c m be any system of coins. If M (x) = G (x) for all x in the range c 3 x &lt; c m c m1 then the system is canonical.
Reference: 2. <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: a Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <year> 1979. </year>
Reference-contexts: To show coNP-hardness, we will encode the problem of exact cover by three-sets: given a set X and a family E of three-element subsets of X, can X be represented as a disjoint union of elements of E ? This problem is known to be NP-complete (see <ref> [2] </ref>). Assume without loss of generality that X = f1; 2; : : :; 3ng. Let p = n + 1. Consider the system of coins c A = 1 + i2A c X = i=1 and a penny.
Reference: 3. <author> G. S. Lueker. </author> <title> Two NP -complete problems in nonnegative integer programming. </title> <type> Technical Report 178, </type> <institution> Computer Science Laboratory, Princeton University, </institution> <year> 1975. </year>
Reference-contexts: Martello and Toth devote an entire chapter to it in their text on knapsack problems [4], and a good summary of the state of knowledge can be found there. In general, the problem is NP-complete when the coin values are large and represented in binary <ref> [3] </ref>; however, it can be solved in time polynomial in the number of coins and the value of the largest coin. <p> Thus to check whether the system is canonical, we need only determine (10) for all coins c and x 2 A m c . There are m2 m1 such x to check, and each check takes time O (m log n). 5 An NP -Completeness Result Lueker <ref> [3] </ref> shows that when the coin values are large and represented in binary, the problem of finding an optimal representation of a given x is NP -hard. Here we show: Theorem 11.
Reference: 4. <author> S. Martello and P. Toth. </author> <title> Knapsack Problems. </title> <publisher> John Wiley and Sons, </publisher> <year> 1990. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: We restrict our attention here to systems containing a penny (i.e., c 1 = 1), so that every x has a representation. The change-making problem is a form of knapsack problem. Martello and Toth devote an entire chapter to it in their text on knapsack problems <ref> [4] </ref>, and a good summary of the state of knowledge can be found there. <p> Given a system of coins, let M (x) denote the minimum size over all representations of the number x in that system, and let G (x) denote the size of the greedy representation of x. Following <ref> [4] </ref>, we call the system canonical if G (x) = M (x) for all x. If a system is not canonical, then a value x for which M (x) &lt; G (x) is called a counterexample for the system. Example 1. <p> In order to check for a counterexample in this set, Chang and Gill propose computing the greedy and optimal representations of each element of the set and comparing their sizes. Martello and Toth comment <ref> [4, p. 142] </ref>: The proof [of Theorem 2] is quite involved and will not be reported here. Furthermore, application of the theorem is very onerous, calling for optimality testing of a usually high number of greedy solutions. Example 2. <p> Furthermore, application of the theorem is very onerous, calling for optimality testing of a usually high number of greedy solutions. Example 2. Consider the system 1; 2; 4; 8; 10; 16 (this example is taken from <ref> [4, Example 5.2, p. 143] </ref>). In order to test whether this system is canonical according to the algorithm of Chang and Gill, we must compute and compare the sizes of the greedy and optimal representations of all 385 values x in the range (4).
References-found: 4

