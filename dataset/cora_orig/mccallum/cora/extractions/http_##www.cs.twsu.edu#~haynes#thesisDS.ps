URL: http://www.cs.twsu.edu/~haynes/thesisDS.ps
Refering-URL: http://adept.cs.twsu.edu/~thomas/phd.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: COLLECTIVE ADAPTATION: THE SHARING OF BUILDING BLOCKS  
Author: T H E U N I V E R S I T Y O F T U L S A by Thomas Dunlop Haynes 
Degree: A dissertation submitted in partial fulfillment of the requirements for the degree of Doctor of Philosophy in the Discipline of Computer Science The Graduate School  
Date: 1998  
Affiliation: THE GRADUATE SCHOOL  The University of Tulsa  
Abstract-found: 0
Intro-found: 1
Reference: [ Alberts et al., 1989 ] <author> Bruce Alberts, Dennis Bray, Julian Lewis, Martin Raff, Keith Roberts, and James D. Watson. </author> <title> Molecular Biology of the Cell. </title> <publisher> Garland Publishing, Inc., </publisher> <year> 1989. </year>
Reference-contexts: The non-coding sequences might also act as a library for adaptation. During RNA splicing the non-coding sequences are stripped, producing a smaller RNA molecule. As the gene can be spliced in a variety of ways, the non-coding sequence for one mRNA could be a coding sequence for another <ref> [ Alberts et al., 1989 ] </ref> . <p> Each candidate clique is a building block from which "better" chromosomes can be constructed. This paring down of the chromosome is similar to the RNA splicing in that non-coding segments are stripped out of the RNA transcript from DNA <ref> [ Alberts et al., 1989 ] </ref> . The evaluation function maps chromosomes from GP space to clique set space, i.e., genotype to phenotype. Repair maps the phenotype back into a genotype.
Reference: [ Altenberg, 1994 ] <author> Lee Altenberg. </author> <title> The evolution of evolvability in genetic programming. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 3, </booktitle> <pages> pages 47-74. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Altenberg believes the Schema Theorem can not account for the proliferation of copies of subtrees and he applies Price's Theorem and introduces a "constructional fitness" to account for such proliferation <ref> [ Altenberg, 1994 ] </ref> . The key to understanding constructional fitness is in his redefinition of a building block; a building block is not necessarily highly fit, instead it is a block which has a higher probability of increasing fitness in a child chromosome. <p> These subtrees are prevalent due to their contribution to the fitness of the chromosomes in which they appear. Altenberg believes duplications appear inside GP chromosomes due to two selection forces adding blocks of code to the population <ref> [ Altenberg, 1994 ] </ref> . The genetic operators spread a block to different chromosomes, and an emergent selection pressure causes the formation of duplication within a chromosome. The duplication is a result of the fitness of the block being replicated.
Reference: [ Andre and Teller, 1996 ] <author> David Andre and Astro Teller. </author> <title> A study in program response and the negative effects of introns in genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 12-20, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference: [ Andre, 1995 ] <author> David Andre. </author> <title> The evolution of agents that build mental models and create simple plans using genetic programming. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 248-255, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Angeline and Kinnear, Jr., 1996 ] <editor> Peter J. Angeline and Kenneth E. Kinnear, Jr., editors. </editor> <booktitle> Advances in Genetic Programming 2. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1996. </year>
Reference: [ Angeline, 1994 ] <author> Peter J. Angeline. </author> <title> Genetic programming and emergent intelligence. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, </booktitle> <pages> pages 75-97. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1994. </year>
Reference-contexts: To address this pressing problem, researchers have been investigating various means to reduce the GP state-space size for complex problems. Notable work in this area include Automatically Defined Functions (ADF) [ Kinnear, Jr., 1994b; Koza, 1994 ] , module acquisition (MA) <ref> [ Angeline, 1994; Kinnear, Jr., 1994b ] </ref> , and strongly typed genetic programming (STGP) [ Montana, 1995 ] . The first two methods utilize function decomposition to reduce the state-space. The STGP method utilizes structuring of 4 the GP S-expression to reduce the state-space. <p> The duplication is a result of the fitness of the block being replicated. Angeline reports while there is redundancy in chromosomes, the benefit of these semantically extraneous components is in the prevention of destructive crossover <ref> [ Angeline, 1994 ] </ref> . He highlights a difference between GAs and GPs with regards to non-coding segments: in GAs they are added by design and in GPs they evolve naturally. 29 Nordin investigates the dynamics of non-coding segments in GP evolution [ Nordin, 1996 ] . <p> The tree could be pruned, leaving only the middle subtree. The IFTE (IfThenElse) function can be used to add a duplicate of the coding segment <ref> [ Angeline, 1994 ] </ref> , as shown in IFTE node is non-coding. (b) A duplicate of the coding segment has been added. 39 3.6 Conclusions I have shown that the duplication of building blocks does more than provide protection against destructive crossover; it also provides a natural backup of good genetic
Reference: [ Angeline, 1996 ] <author> Peter J. Angeline. </author> <title> Two self-adaptive crossover operators for genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 5, </booktitle> <pages> pages 89-110. </pages> <publisher> MIT Press, </publisher> <address> Cam-bridge, MA, USA, </address> <year> 1996. </year>
Reference: [ Angeline, 1997 ] <author> Peter J. Angeline. </author> <title> Subtree crossover: Building block engine or macromutation? In John R. </title> <editor> Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 9-17, </pages> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Bui and Eppley, 1995 ] <author> Thang Nguyen Bui and Paul H. Eppley. </author> <title> A hybrid genetic algorithm for the maximum clique problem. </title> <editor> In Larry Eshelman, editor, </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <pages> pages 478-484, </pages> <address> San Francisco, CA, 1995. </address> <publisher> Morgan Kaufmann. </publisher> <pages> 125 126 </pages>
Reference: [ Cobb, 1993 ] <author> Helen Cobb. </author> <title> Is the genetic algorithm a cooperative learner? In L. </title> <editor> Darrell Whitley, editor, </editor> <booktitle> Foundations of Genetic Algorithms 2, </booktitle> <pages> pages 277-296. </pages> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1993. </year>
Reference-contexts: rule "reward" other rules for getting the system to that state, i.e., how is credit assignment handled? Genetic algorithms are often interpreted as competitive learning systems: the driving force for exploring the fitness landscape is "survival of the fittest." Some GA applications can also be considered as cooperative learning systems <ref> [ Cobb, 1993 ] </ref> : "Michigan style" GBML systems certainly fall into this category. <p> systems <ref> [ Cobb, 1993 ] </ref> : "Michigan style" GBML systems certainly fall into this category. Furthermore, Cobb views the fitness function as a mechanism to determine which solutions are to be shared among the chromosomes, with the crossover operator as the vehicle for which "partial solutions" are shared between chromosomes [ Cobb, 1993 ] . 4.2 Collective Memory Collective memory is the body of common knowledge that a group shares. Common knowledge is knowledge which is either learned through interaction with the environment or explicitly communicated from one individual to all others in the group.
Reference: [ Corkill et al., 1986 ] <author> Daniel D. Corkill, Kevin Q. Gallagher, and Kelly E. Murray. </author> <title> GBB: A generic blackboard development system. </title> <booktitle> In Proceedings of the Fifth National Conference on Artificial Intelligence, </booktitle> <pages> pages 1008-1014, </pages> <address> Philadelphia, PA, </address> <month> August </month> <year> 1986. </year> <note> (Also published in Blackboard Systems, </note> <editor> Robert S. Engelmore and Anthony Morgan, editors, </editor> <address> pages 503-518, </address> <publisher> Addison-Wesley, 1988.). </publisher>
Reference: [ Corkill, 1989 ] <author> Daniel D. Corkill. </author> <title> Design alternatives for parallel and distributed blackboard systems. </title> <editor> In V. Jagannathan, Rajendra Dodhiawala, and Lawrence S. Baum, editors, </editor> <booktitle> Blackboard Architectures and Applications, </booktitle> <pages> pages 99-136. </pages> <publisher> Academic Press, </publisher> <year> 1989. </year> <booktitle> (Presented at the Second Workshop on Blackboard Systems, AAAI-88, </booktitle> <address> St. Paul, Minnesota, </address> <month> August 24, </month> <year> 1988.). </year>
Reference-contexts: The collective memory can itself be either centralized or distributed (for examples of centralized and distributed blackboard architectures see <ref> [ Corkill, 1989 ] </ref> and [ Decker et al., 1993 ] ).
Reference: [ Davidor, 1991 ] <author> Yuval Davidor. </author> <title> Epistasis variance: A viewpoint on GA-hardness. </title> <editor> In Gregory J. E. Rawlins, editor, </editor> <booktitle> Foundations of Genetic Algorithms. </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1991. </year>
Reference-contexts: They used graphs from the Center for Discrete Mathematics and Theoretical Computer Science (DIMACS) at Rutgers University. These graphs were generated as part of a DIMACS challenge on graph problems [ Johnson and Trick, 1996 ] . Five measures of hardness were employed: 84 85 an epistasis measure <ref> [ Davidor, 1991 ] </ref> , a fitness distance correlation [ Jones and Forrest, 1995 ] ; graph size, graph density, and, relative clique size. They were unable to associate any of these measures with the difficulty of the GA to solve a particular graph.
Reference: [ Davis et al., 1993 ] <author> Lawrence Davis, David Orvosh, Anthony Cox, and Yuping Qiu. </author> <title> A genetic algorithm for survivable network design. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <pages> pages 408-415, </pages> <address> San Mateo, CA, 1993. </address> <publisher> Morgan Kaufman. </publisher>
Reference-contexts: With the BCD example, we could use modulo arithmetic to force all combinations to be legal. If we then take the phenotype and map it back into the genotype, we have repaired the chro 30 mosome <ref> [ Davis et al., 1993; Orvosh and Davis, 1993 ] </ref> . Furthermore, repair rate denotes the percentage of repaired chromosomes that are returned into the population, overwriting the original.
Reference: [ Davis, 1991 ] <author> Lawrence Davis. </author> <title> Handbook of Genetic Algorithms. </title> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, NY, </address> <year> 1991. </year>
Reference-contexts: The average fitness of the chromosomes per generation is likely to increase and over time the system converges to a "good", i.e., close to optimal, solution. The repetitive application of evaluation and selection has been shown to efficiently solve a variety of problems in many different domains <ref> [ Davis, 1991; Goldberg, 1989; Goldberg, 1994; Koza, 1992 ] </ref> . The canonical GA chromosome, or string representation, utilizes a binary alphabet: f0; 1g. A schema (plural schemata) is a template describing subsets of strings within the string. <p> Though GAs are not guaranteed to find optimal solutions, they still possess some nice provable properties (optimal allocation of trials to sub-strings, evaluating exponential number of schemas with linear number of string evaluations, etc.), and have been found to be useful in a number of practical applications <ref> [ Davis, 1991 ] </ref> . Koza's work on genetic programming (GP) was motivated by the representational constraint, i.e., fixed length encodings, in traditional GAs [ Koza, 1992 ] .
Reference: [ de Souza and Talukdar, 1991 ] <author> Pedro Sergio de Souza and Sarosh N. Talukdar. </author> <title> Genetic algorithms in asynchronous teams. </title> <editor> In Rick Belew and Lashon Booker, editors, </editor> <booktitle> Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <pages> pages 392-397, </pages> <address> San Mateo, CA, 1991. </address> <publisher> Morgan Kaufman. </publisher>
Reference-contexts: Each agent is always executing and there is no triggering of execution via data added to the blackboard, which removes the need for a scheduling mechanism. The A-Teams research employs a shared memory to effect communication between a team of autonomous agents <ref> [ Talukdar et al., 1983; de Souza and Talukdar, 1991 ] </ref> . Each agent is either a constructor or destructor; i.e., they either add or delete knowledge from the shared memory.
Reference: [ Decker et al., 1993 ] <author> Keith S. Decker, Alan J. Garvey, Marty A. Humphrey, and Victor R. Lesser. </author> <title> Control heuristics for scheduling in a parallel blackboard system. </title> <journal> International Journal of Pattern Recognition and Artificial Intelligence, </journal> <volume> 7(2) </volume> <pages> 243-264, </pages> <year> 1993. </year>
Reference-contexts: The collective memory can itself be either centralized or distributed (for examples of centralized and distributed blackboard architectures see [ Corkill, 1989 ] and <ref> [ Decker et al., 1993 ] </ref> ).
Reference: [ Falkenauer, 1995 ] <author> Emanuel Falkenauer. </author> <title> Solving equal piles with the grouping genetic algorithm. </title> <editor> In Larry Eshelman, editor, </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <pages> pages 492-497, </pages> <address> San Francisco, CA, 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The GA encoding of Bui and Eppley could not maintain several candidate cliques in a single chromosome. Soule and Foster utilize a grouping GA <ref> [ Falkenauer, 1995 ] </ref> to maintain multiple candidate cliques in the chromosome. They fix the number of initial groups in a chromosome to be initially 30 and slowly reduce it to 4.
Reference: [ Fennell and Lesser, 1977 ] <author> Richard D. Fennell and Victor R. Lesser. </author> <title> Parallelism in Artificial Intelligence problem solving: A case study of Hearsay II. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-26(2):98-111, </volume> <month> February </month> <year> 1977. </year> <note> (Also published in Readings in Distributed Artificial Intelligence, </note> <editor> Alan H. Bond and Les Gasser, editors, </editor> <address> pages 106-119, </address> <publisher> Morgan Kaufmann, 1988.). </publisher> <pages> 127 </pages>
Reference: [ Futuyma, 1986 ] <author> Douglas J. Futuyma. </author> <title> Evolutionary Biology. </title> <publisher> Sinauer Associate, </publisher> <address> Sunderland, MA, </address> <year> 1986. </year>
Reference-contexts: They account for a large fraction of the DNA <ref> [ Futuyma, 1986 ] </ref> and are believed to be backup material for the coding segments. For example, the frog Xenopus laevis has 450 copies of the gene codings for 18S and 28S rRNA 24 25 and 24,000 copies of the gene for 5S rRNA [ Futuyma, 1986 ] . <p> a large fraction of the DNA <ref> [ Futuyma, 1986 ] </ref> and are believed to be backup material for the coding segments. For example, the frog Xenopus laevis has 450 copies of the gene codings for 18S and 28S rRNA 24 25 and 24,000 copies of the gene for 5S rRNA [ Futuyma, 1986 ] . The non-coding sequences might also act as a library for adaptation. During RNA splicing the non-coding sequences are stripped, producing a smaller RNA molecule.
Reference: [ Garey and Johnson, 1979 ] <author> Michael R. Garey and David S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Co., </publisher> <address> San Francisco, CA, </address> <year> 1979. </year>
Reference-contexts: While the results I present are specific to the clique domain, my results hold in general; the theory of NP-completeness states there exists a polynomial time mapping from one NP-complete problem to any other. There are three basic NP-complete problems one can consider while detecting cliques in a graph <ref> [ Garey and Johnson, 1979 ] </ref> (pages 193-194): Partition into cliques: Given that G = (V; E) and a positive integer K V , can the vertices of G can be partitioned into k K disjoint sets V 1 ; V 2 ; : : : ; V k such that, <p> Both finding the maximum and all cliques in a graph are NP-complete <ref> [ Garey and Johnson, 1979 ] </ref> . A brute force algorithm is to build candidate cliques in increasing levels of size, k.
Reference: [ Garland and Alterman, 1995 ] <author> Andrew Garland and Richard Alterman. </author> <title> Preparation of multi-agent knowledge for reuse. </title> <editor> In David W. Aha and Ashwin Ram, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Adaptation of Knowldege for Reuse, </booktitle> <address> Cambridge, MA, </address> <month> November </month> <year> 1995. </year> <note> AAAI. </note>
Reference-contexts: The collective memory can itself be either centralized or distributed (for examples of centralized and distributed blackboard architectures see [ Corkill, 1989 ] and [ Decker et al., 1993 ] ). Garland and Alterman present a distributed collective memory: agents manipulate their own slice of the collective memory <ref> [ Garland and Alterman, 1995; Garland and Alterman, 1996 ] </ref> . 45 4.3 Computational Agent Society As problem spaces increase in complexity, the search for a solution can overwhelm a single computational agent. We can increase the exploratory power during the search process by introducing more agents.
Reference: [ Garland and Alterman, 1996 ] <author> Andrew Garland and Richard Alterman. </author> <title> Multia-gent learning through collective memory. </title> <editor> In Sandip Sen, editor, </editor> <booktitle> Working Notes for the AAAI Symposium on Adaptation, Co-evolution and Learning in Multi-agent Systems, </booktitle> <pages> pages 33-38, </pages> <address> Stanford University, CA, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: The collective memory can itself be either centralized or distributed (for examples of centralized and distributed blackboard architectures see [ Corkill, 1989 ] and [ Decker et al., 1993 ] ). Garland and Alterman present a distributed collective memory: agents manipulate their own slice of the collective memory <ref> [ Garland and Alterman, 1995; Garland and Alterman, 1996 ] </ref> . 45 4.3 Computational Agent Society As problem spaces increase in complexity, the search for a solution can overwhelm a single computational agent. We can increase the exploratory power during the search process by introducing more agents.
Reference: [ Goldberg, 1989 ] <author> David E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization & Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year>
Reference-contexts: Reproduction by itself introduces no new solutions to the population of solutions. The basic GA algorithm employs two other operators, crossover and mutation, to change the solutions which have been selected via reproduction <ref> [ Goldberg, 1989 ] </ref> . Instead of directly creating a population of k chromosomes, selection first chooses a pool of k parents with replacement from the current population. <p> The average fitness of the chromosomes per generation is likely to increase and over time the system converges to a "good", i.e., close to optimal, solution. The repetitive application of evaluation and selection has been shown to efficiently solve a variety of problems in many different domains <ref> [ Davis, 1991; Goldberg, 1989; Goldberg, 1994; Koza, 1992 ] </ref> . The canonical GA chromosome, or string representation, utilizes a binary alphabet: f0; 1g. A schema (plural schemata) is a template describing subsets of strings within the string. <p> Being highly fit, once instantiated in the population, they are more than likely to increase their number of appearances in the population. The Schema Theorem relates how building blocks are combined to form better solutions over time <ref> [ Holland, 1975; Goldberg, 1989 ] </ref> . Genetic programming (GP) is an off-shoot of GA research and the initial "basic theory" describing the operation of GP was borrowed from the GA Schema Theorem [ Koza, 1992 ] . <p> They are integral to the schema theorem, which defines how the implicit parallel search of a GA "builds" better solutions over time <ref> [ Holland, 1975; Goldberg, 1989 ] </ref> . The addition of non-coding segments to chromosomes separates building blocks 26 and protects them from being sliced by crossover [ Levenick, 1991 ] . GA chromosomes are typically of fixed length. <p> GA chromosomes are typically of fixed length. With a string of length l, and a building block of defining length ffi, any crossover operation has a probability P l = l 1 of destroying a building block <ref> [ Goldberg, 1989 ] </ref> . <p> I used linear scaling, with the maximum expected offspring being 2.0 <ref> [ Goldberg, 1989 ] </ref> . The chromosomes for the GA were limited to 256 positions and those for the GP were fixed to a max depth size of 10, i.e., 2047 max nodes. The other heuristics had a probability of 0.01 per bit for mutation. <p> This difficulty is a result of there being too many cliques to explore and an increase of destructive crossover. One mechanism for distributing the search amongst all of the cliques would be to introduce niching via a sharing function <ref> [ Goldberg, 1989 ] </ref> . The heuristic is to reduce the fitness of chromosomes which are similar. The clique domain presents problems in determining both genotypical and phenotypi cal similarities.
Reference: [ Goldberg, 1994 ] <author> David E. Goldberg. </author> <title> Genetic and evolutionary algorithms come of age. </title> <journal> Communications of the ACM, </journal> <volume> 37(3) </volume> <pages> 113-119, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: The average fitness of the chromosomes per generation is likely to increase and over time the system converges to a "good", i.e., close to optimal, solution. The repetitive application of evaluation and selection has been shown to efficiently solve a variety of problems in many different domains <ref> [ Davis, 1991; Goldberg, 1989; Goldberg, 1994; Koza, 1992 ] </ref> . The canonical GA chromosome, or string representation, utilizes a binary alphabet: f0; 1g. A schema (plural schemata) is a template describing subsets of strings within the string.
Reference: [ Guha and Lenat, 1990 ] <author> R. V. Guha and Douglas B. Lenat. </author> <title> Cyc: A midterm report. </title> <journal> AI Magazine, </journal> <volume> 11(3) </volume> <pages> 33-59, </pages> <month> Fall </month> <year> 1990. </year>
Reference-contexts: Indeed, the central 44 thesis of the CYC project is that the inability of computational systems to effectively interact with humans (whether it be in direct communication or by reading encyclopedia articles) is that the computational systems lack the basic common knowledge that humans possess <ref> [ Guha and Lenat, 1990 ] </ref> . Common knowledge models knowledge that each member of the group possesses and not the knowledge that an individual or subgroup possesses.
Reference: [ Halpern and Moses, 1990 ] <author> Joseph Halpern and Yoram Moses. </author> <title> Knowledge and common knowledge in a distributed environment. </title> <journal> Journal of the ACM, </journal> <volume> 37(3) </volume> <pages> 549-587, </pages> <year> 1990. </year> <note> A preliminary version appeared in Proc. 3rd ACM Symposium on Principles of Distributed Computing, </note> <year> 1984. </year>
Reference-contexts: Halpern and Moses point out a problem of a group learning a piece of common knowledge K: how does an individual A i know whether another individual A j has learned K or not <ref> [ Halpern and Moses, 1990 ] </ref> ? Furthermore, even if A i is able to deduce that A j knows K, how does A i know that A j knows A i knows that fact? Without a base condition, this recursive question can stretch on ad infinitum. <p> As my model does not allow inter-agent communication and I am not concerned with the actual dispersal of knowledge through communication (and the resultant problems as reported in <ref> [ Halpern and Moses, 1990 ] </ref> ) all agent communication takes place to and from this collective memory, not between individuals. We can model the collective memory as a blackboard production system [ Fen-nell and Lesser, 1977; Nii, 1986; Corkill et al., 1986 ] .
Reference: [ Hart and Belew, 1996 ] <author> William E. Hart and Richard K. Belew. </author> <title> Optimization with genetic algorithm hybrids that use local search. </title> <editor> In Richard K. Belew and Melanie Mitchell, editors, </editor> <title> Adaptive Individuals in Evolving Populations: </title> <booktitle> Models and Algorithms, </booktitle> <pages> pages 483-496. </pages> <publisher> Addison-Wesley, </publisher> <year> 1996. </year> <note> (SFI Studies in the Sciences of Complexity Vol. 26). </note>
Reference-contexts: Finally, local search heuristics have been applied to improve the population-based search of both genetic algorithms <ref> [ Hart, 1994; Hart and Belew, 1996 ] </ref> and genetic programming [ O'Reilly and Oppacher, 1994; O'Reilly, 1995; O'Reilly and Oppacher, 1995a ] .
Reference: [ Hart, 1994 ] <author> William E. Hart. </author> <title> Adaptive Global Optimization with Local Search. </title> <type> PhD thesis, </type> <institution> University of California, </institution> <address> San Diego, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Finally, local search heuristics have been applied to improve the population-based search of both genetic algorithms <ref> [ Hart, 1994; Hart and Belew, 1996 ] </ref> and genetic programming [ O'Reilly and Oppacher, 1994; O'Reilly, 1995; O'Reilly and Oppacher, 1995a ] .
Reference: [ Haynes and Sen, 1997 ] <author> Thomas Haynes and Sandip Sen. </author> <title> Crossover operators for evolving a team. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fo-gel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference. </booktitle> <publisher> MIT Press, </publisher> <year> 1997. </year>
Reference: [ Haynes and Wainwright, 1995 ] <author> Thomas D. Haynes and Roger L. Wainwright. </author> <title> A simulation of adaptive agents in a hostile environment. </title> <editor> In K. M. George, Jan-ice H. Carroll, Ed Deaton, Dave Oppenheim, and Jim Hightower, editors, </editor> <booktitle> Pro 128 ceedings of the 1995 ACM Symposium on Applied Computing, </booktitle> <pages> pages 318-323. </pages> <publisher> ACM Press, </publisher> <year> 1995. </year>
Reference-contexts: All experiments were conducted with the GPengine package, written by myself for research presented in my master's thesis <ref> [ Haynes, 1994; Haynes and Wainwright, 1995 ] </ref> . In this chapter I will discuss these experiments and their results.
Reference: [ Haynes et al., 1995a ] <author> Thomas Haynes, Sandip Sen, Dale Schoenefeld, and Roger Wainwright. </author> <title> Evolving a team. </title> <editor> In E. V. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <address> Cambridge, MA, </address> <month> November </month> <year> 1995. </year> <note> AAAI. </note>
Reference: [ Haynes et al., 1995b ] <author> Thomas Haynes, Roger Wainwright, Sandip Sen, and Dale Schoenefeld. </author> <title> Strongly typed genetic programming in evolving cooperation strategies. </title> <editor> In Larry Eshelman, editor, </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <pages> pages 271-278, </pages> <address> San Francisco, CA, 1995. </address> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference-contexts: This causes the initialization process and the various genetic operations to only construct syntactically correct trees. A benefit of syntactically correct trees is that the search space is reduced. This has been shown to decrease the search time <ref> [ Mon-tana, 1995; Haynes et al., 1995b ] </ref> . One of the key concepts for STGP is the generic function, which is a mechanism for defining a class of functions, and defining generic data types for these functions. <p> This is shown in both the paper in which Montana introduced STGP [ Montana, 1995 ] and in our research into multiagent behavioral strategies <ref> [ Haynes et al., 1995b ] </ref> . STGP is able to reduce the search space by only allowing syntactically correct programs to be generated and produced by the crossover and mutation operators. <p> It is clearly apparent that the 6 My research is geared to improving the search process while holding the GP control parameters constant. As such, the reported parameters are not optimized for the task at hand and are actually taken from parameters I have used in another domain <ref> [ Haynes et al., 1995b ] </ref> . 79 generation for Active-Active collective adaptation (AA-R10Q7) versus Passive-Active collective memory search with a simple collating agent (PA-R10Q7). The underlying search engine is genetic programming with duplication of coding segments repair of chromosomes with a 10% return rate and 7 duplicates.
Reference: [ Haynes et al., 1996a ] <author> Thomas Haynes, Rose Gamble, Leslie Knight, and Roger Wainwright. </author> <title> Entailment for specification refinement. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 90-97, </pages> <address> Cambridge, MA, 1996. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: I will not explore a Passive-Passive collective memory. The GP chromosomes have the capability of 2 I have previously shown Active-Passive interaction in a theorem proving domain <ref> [ Haynes et al., 1996a ] </ref> . 50 adaption during the search process, which can eventually allow them to become quite complex.
Reference: [ Haynes et al., 1996b ] <author> Thomas Haynes, Dale Schoenefeld, and Roger Wainwright. </author> <title> Type inheritance in strongly typed genetic programming. </title> <editor> In Kenneth E. Kin-near, Jr. and Peter J. Angeline, editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 18. </booktitle> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: The function and terminal sets are F = fExtCon, IntCong and T = f1,. . . ,#verticesg. ExtCon "separates" two candidate maximal cliques, while IntCon "joins" two candidate cliques to create a larger candidate. Strong typing [ Montana, 1995 ] and type inheritance <ref> [ Haynes et al., 1996b ] </ref> are used to ensure that the parent of an ExtCon node is either the root or another ExtCon node. The fitness evaluation rewards for clique size and rewards for the number of cliques in the tree. <p> In Figure 5.1, I present a comparison of three search techniques for clique cover (For all of my experiments, I set ff = 10, fi = 9, and fl = 0 <ref> [ Haynes et al., 1996b ] </ref> .). The noteworthy parameters for the GP system were a max of 600 generations 2 and a population size of 2000. Each curve shown in Figure 5.1 is an average of 10 different runs. Each of the methods extends the previous methods. <p> Each curve shown in Figure 5.1 is an average of 10 different runs. Each of the methods extends the previous methods. The first method (R0) is a strongly typed genetic programming (STGP) [ Montana, 1995 ] system modified with the type inheritance presented in <ref> [ Haynes et al., 1996b ] </ref> . Chromosomes are repaired during the fitness evaluation, but they are not returned into the population. The second search method (R10Q7) replaces the original chromosome with the repaired one with a probability of 0:1.
Reference: [ Haynes, 1994 ] <author> Thomas D. Haynes. </author> <title> A simulation of adaptive agents in a hostile environment. </title> <type> Master's thesis, </type> <institution> University of Tulsa, Tulsa, OK., </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: All experiments were conducted with the GPengine package, written by myself for research presented in my master's thesis <ref> [ Haynes, 1994; Haynes and Wainwright, 1995 ] </ref> . In this chapter I will discuss these experiments and their results.
Reference: [ Haynes, 1996 ] <author> Thomas Haynes. </author> <title> Duplication of coding segments in genetic programming. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence, </booktitle> <address> Portland, OR, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: The candidate cliques are duplicated in the chromosome following the repair strategy presented in Chapter 3 and in <ref> [ Haynes, 1996 ] </ref> . The parameters for the duplication follow that for the duplication of coding segments used while repairing and replacing chromosomes during fitness evaluation; for our purposes this means seven duplicates of the set of k candidate cliques are added to the chromosome. <p> In clique detection, candidate cliques form the building blocks. The identification of building blocks in genetic programming is in general a difficult task <ref> [ O'Reilly, 1995; Rosca and Ballard, 1996; Haynes, 1996 ] </ref> . In part this is due to the domain dependent nature of the alphabet, i.e. the members of the function and terminal sets 7 . <p> As such, GA building blocks are at the structural level, whilst GP building blocks are at the semantical level <ref> [ Haynes, 1996 ] </ref> . 83 duplication of coding segments strategy holds promise in automating the detection of building blocks. <p> Variations of clique detection in a graph, e.g., finding both the max clique [ Soule et al., 1996 ] and the clique cover <ref> [ Haynes, 1996 ] </ref> , have been proposed as naturally occurring Royal Road functions. However, it has been shown that the clique domain does not serve as a Royal Road function for binary encoded GAs [ Soule et al., 1996 ] .
Reference: [ Haynes, 1997a ] <author> Thomas Haynes. </author> <title> Augmenting collective adaptation with a simple process agent. </title> <editor> In Sandip Sen, editor, </editor> <booktitle> AAAI Workshop on Multiagent Learning. </booktitle> <year> 1997. </year>
Reference: [ Haynes, 1997b ] <author> Thomas Haynes. </author> <title> Collective memory search. </title> <booktitle> In Proceedings of the 1997 ACM Symposium on Applied Computing. </booktitle> <publisher> ACM Press, </publisher> <year> 1997. </year>
Reference: [ Haynes, 1997c ] <author> Thomas Haynes. </author> <title> On-line adaptation of search via knowledge reuse. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 156-161, </pages> <year> 1997. </year>
Reference: [ Haynes, 1997d ] <author> Thomas Haynes. </author> <title> Phenotypical building blocks for genetic programming. </title> <editor> In Thomas Back, editor, </editor> <booktitle> Proceedings of the Seventh International Conference on Genetic Algorithms (ICGA97), </booktitle> <address> San Francisco, CA, 1997. </address> <publisher> Morgan Kaufmann. </publisher> <pages> 129 </pages>
Reference: [ Hogg and Williams, 1993 ] <author> Tad Hogg and Colin P. Williams. </author> <title> Solving the really hard problems with cooperative search. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 231-236, </pages> <address> Menlo Park, CA, 1993. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Blackboards have been used by an agent society to solve instances of the graph coloring problem <ref> [ Hogg and Williams, 1993; Hogg and Williams, 1994 ] </ref> . In contrast to our system, information is selected via a triggering mechanism and each agent is executing the same search heuristic.
Reference: [ Hogg and Williams, 1994 ] <author> Tad Hogg and Colin P. Williams. </author> <title> Expected gains from parallelizing constraint solving for hard problems. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <pages> pages 331-336, </pages> <address> Menlo Park, CA, 1994. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Blackboards have been used by an agent society to solve instances of the graph coloring problem <ref> [ Hogg and Williams, 1993; Hogg and Williams, 1994 ] </ref> . In contrast to our system, information is selected via a triggering mechanism and each agent is executing the same search heuristic. <p> Hogg and Williams determined while 51 the exchange of information was useful, if there are a large number of candidate solutions, few of which can be extended to full solutions, then there is a decrease in the ability of the heuristics to effectively prune unproductive branches <ref> [ Hogg and Williams, 1994 ] </ref> . Finally, local search heuristics have been applied to improve the population-based search of both genetic algorithms [ Hart, 1994; Hart and Belew, 1996 ] and genetic programming [ O'Reilly and Oppacher, 1994; O'Reilly, 1995; O'Reilly and Oppacher, 1995a ] .
Reference: [ Holland, 1975 ] <author> John H. Holland. </author> <booktitle> Adpatation in Natural and Artificial Systems. </booktitle> <publisher> University of Michigan Press, </publisher> <address> Ann Arbor, MI, </address> <year> 1975. </year>
Reference-contexts: Being highly fit, once instantiated in the population, they are more than likely to increase their number of appearances in the population. The Schema Theorem relates how building blocks are combined to form better solutions over time <ref> [ Holland, 1975; Goldberg, 1989 ] </ref> . Genetic programming (GP) is an off-shoot of GA research and the initial "basic theory" describing the operation of GP was borrowed from the GA Schema Theorem [ Koza, 1992 ] . <p> and also examines various other search heuristics as engines for collective adaptation. xxx CHAPTER I Genetic Programming 1.1 Introduction Holland's work on adaptive systems produced a class of biologically inspired algorithms known as genetic algorithms (GAs) that can manipulate and develop solutions to optimization, learning, and other types of problems <ref> [ Holland, 1975 ] </ref> . In order for GAs to be effective, the candidate solutions should be represented as n-ary strings. <p> They are integral to the schema theorem, which defines how the implicit parallel search of a GA "builds" better solutions over time <ref> [ Holland, 1975; Goldberg, 1989 ] </ref> . The addition of non-coding segments to chromosomes separates building blocks 26 and protects them from being sliced by crossover [ Levenick, 1991 ] . GA chromosomes are typically of fixed length. <p> Also, the GP can effectively utilize C 7 to search for all candidate cliques of size 8 for 72 which C 7 forms a core set of nodes. With random search, this potential to exploit exploration is lost. The belief in emergent selection and the schema theorem <ref> [ Holland, 1975 ] </ref> , i.e., the building over time of the solution piece by piece from the elementary blocks, shields us from the fact that for cliques of maximum size 4 and parse trees of maximum depth 10, random search will effectively generate candidate cliques.
Reference: [ Holland, 1986 ] <author> John H. Holland. </author> <title> Escaping brittleness: the possibilities of general-purpose learning algorithms applied to parallel rule-based systems. </title> <editor> In R. S. Michalski, J. G. Carbonell, and T. M. Mitchell, editors, </editor> <booktitle> Machine Learning, an artificial intelligence approach: Volume II. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Los Alamos, CA, </address> <year> 1986. </year>
Reference-contexts: The evaluation of one chromosome typically is independent of all others. A notable exception arises in genetic-based machine learning (GBML) systems: both rules and rule-sets 43 must be maintained. In the "Michigan approach" each chromosome is a rule and the population as a whole is the rule-set <ref> [ Holland, 1986 ] </ref> . In these systems, the evaluation of a single chromosome is dependent on that of the population. If a rule is enacted only if the system is in a certain state, then it is dependent on other rules to get the system to that state.
Reference: [ Hwang and Briggs, 1985 ] <author> Kai Hwang and Faye A. Briggs. </author> <title> Computer Architecture and Parallel Processing. </title> <publisher> McGraw-Hill International, </publisher> <year> 1985. </year>
Reference-contexts: Such issues are discussed in basic texts on operating systems [ Tanenbaum, 1987 ] and computer architecture <ref> [ Hwang and Briggs, 1985 ] </ref> .
Reference: [ Johnson and Trick, 1996 ] <editor> David S. Johnson and Michael A. Trick, editors. </editor> <title> Cliques, Coloring, and Satisfiability, </title> <booktitle> volume 26 of DIMACS: Series in Discrete Mathematics and Theoretical Computer Science. </booktitle> <publisher> American Mathematical Society, </publisher> <year> 1996. </year>
Reference-contexts: The search for the optimal solution for this graph is not trivial with either plain GP or STGP systems. In the Second DIMACS Challenge <ref> [ Johnson and Trick, 1996 ] </ref> random graphs were generated as tests for the maximum clique detection problem (ftp://dimacs.rutgers.edu/pub/challenge). While the duplication of coding segments repair process is able to search such graphs, the plain STGP system will prematurely converge. <p> They used graphs from the Center for Discrete Mathematics and Theoretical Computer Science (DIMACS) at Rutgers University. These graphs were generated as part of a DIMACS challenge on graph problems <ref> [ Johnson and Trick, 1996 ] </ref> . Five measures of hardness were employed: 84 85 an epistasis measure [ Davidor, 1991 ] , a fitness distance correlation [ Jones and Forrest, 1995 ] ; graph size, graph density, and, relative clique size.
Reference: [ Jones and Forrest, 1995 ] <editor> Terry Jones and Stephanie Forrest. </editor> <title> Fitness distance correlation as a measure of problem difficulty for genetic algorithms. </title> <editor> In Larry Eshelman, editor, </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <pages> pages 184-192, </pages> <address> San Francisco, CA, 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: These graphs were generated as part of a DIMACS challenge on graph problems [ Johnson and Trick, 1996 ] . Five measures of hardness were employed: 84 85 an epistasis measure [ Davidor, 1991 ] , a fitness distance correlation <ref> [ Jones and Forrest, 1995 ] </ref> ; graph size, graph density, and, relative clique size. They were unable to associate any of these measures with the difficulty of the GA to solve a particular graph. I present a systematic approach to determining the relevant characteristics.
Reference: [ Kinnear, Jr., 1994a ] <editor> Kenneth E. Kinnear, Jr., editor. </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1994. </year>
Reference: [ Kinnear, Jr., 1994b ] <author> Kenneth E. Kinnear, Jr. </author> <title> Alternatives in automatic function definition: A comparision of performance. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, </booktitle> <pages> pages 119-141. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1994. </year>
Reference-contexts: To address this pressing problem, researchers have been investigating various means to reduce the GP state-space size for complex problems. Notable work in this area include Automatically Defined Functions (ADF) <ref> [ Kinnear, Jr., 1994b; Koza, 1994 ] </ref> , module acquisition (MA) [ Angeline, 1994; Kinnear, Jr., 1994b ] , and strongly typed genetic programming (STGP) [ Montana, 1995 ] . The first two methods utilize function decomposition to reduce the state-space. <p> To address this pressing problem, researchers have been investigating various means to reduce the GP state-space size for complex problems. Notable work in this area include Automatically Defined Functions (ADF) [ Kinnear, Jr., 1994b; Koza, 1994 ] , module acquisition (MA) <ref> [ Angeline, 1994; Kinnear, Jr., 1994b ] </ref> , and strongly typed genetic programming (STGP) [ Montana, 1995 ] . The first two methods utilize function decomposition to reduce the state-space. The STGP method utilizes structuring of 4 the GP S-expression to reduce the state-space.
Reference: [ Koza, 1992 ] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: The average fitness of the chromosomes per generation is likely to increase and over time the system converges to a "good", i.e., close to optimal, solution. The repetitive application of evaluation and selection has been shown to efficiently solve a variety of problems in many different domains <ref> [ Davis, 1991; Goldberg, 1989; Goldberg, 1994; Koza, 1992 ] </ref> . The canonical GA chromosome, or string representation, utilizes a binary alphabet: f0; 1g. A schema (plural schemata) is a template describing subsets of strings within the string. <p> The Schema Theorem relates how building blocks are combined to form better solutions over time [ Holland, 1975; Goldberg, 1989 ] . Genetic programming (GP) is an off-shoot of GA research and the initial "basic theory" describing the operation of GP was borrowed from the GA Schema Theorem <ref> [ Koza, 1992 ] </ref> . While GP utilizes the basic GA algorithm and also has the concepts of crossover and mutation, the canonical GP chromosome representation is a parse tree (S-expression) and the alphabet is n-ary. <p> Koza's work on genetic programming (GP) was motivated by the representational constraint, i.e., fixed length encodings, in traditional GAs <ref> [ Koza, 1992 ] </ref> . <p> Koza describes a way to relax the closure constraint using the concept of constrained syntax structures <ref> [ Koza, 1992 ] </ref> . Koza used tree generation routines which only generated legal trees. He also only used operations on the parse trees which maintained legal syntactic structures. Maintaining legal syntactic structures is at the heart of STGP. <p> While the detection of cliques in a graph readily lends itself to the study of building blocks in the GP chromosome, my results are not domain dependent. Analysis shows that this method can work for any GP domain. Simple editing rules for GP chromosomes have been identified <ref> [ Koza, 1992 ] </ref> . The methods used by compiler writers to optimize code are also applicable to "optimizing" the GP chromosome. An example of the repair and duplication process for other domains is shown in Figure 3.10. The parse tree to be evaluated is shown in Figure 3.10 (a).
Reference: [ Koza, 1994 ] <author> John R. Koza. </author> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: To address this pressing problem, researchers have been investigating various means to reduce the GP state-space size for complex problems. Notable work in this area include Automatically Defined Functions (ADF) <ref> [ Kinnear, Jr., 1994b; Koza, 1994 ] </ref> , module acquisition (MA) [ Angeline, 1994; Kinnear, Jr., 1994b ] , and strongly typed genetic programming (STGP) [ Montana, 1995 ] . The first two methods utilize function decomposition to reduce the state-space.
Reference: [ Levenick, 1991 ] <author> James R. Levenick. </author> <title> Inserting introns improves genetic algorithm success rate: Taking a cue from biology. </title> <editor> In Rick Belew and Lashon Booker, 130 editors, </editor> <booktitle> Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <pages> pages 123-127, </pages> <address> San Mateo, CA, 1991. </address> <publisher> Morgan Kaufman. </publisher>
Reference-contexts: CHAPTER III Duplication of Coding Segments 3.1 Introduction Research into the utility of non-coding segments, or introns, in genetic-based encodings has shown that they expedite the evolution of solutions in domains by protecting building blocks against destructive crossover <ref> [ Levenick, 1991 ] </ref> . We consider a genetic programming system where non-coding segments can be removed, and the resultant chromosomes returned into the population. This parsimonious repair leads to premature convergence, since as we remove the naturally occurring non-coding segments, we strip away their protective backup feature. <p> They are integral to the schema theorem, which defines how the implicit parallel search of a GA "builds" better solutions over time [ Holland, 1975; Goldberg, 1989 ] . The addition of non-coding segments to chromosomes separates building blocks 26 and protects them from being sliced by crossover <ref> [ Levenick, 1991 ] </ref> . GA chromosomes are typically of fixed length. With a string of length l, and a building block of defining length ffi, any crossover operation has a probability P l = l 1 of destroying a building block [ Goldberg, 1989 ] .
Reference: [ Mitchell et al., 1992 ] <author> Melanie Mitchell, Stephanie Forrest, and John H. Holland. </author> <title> The royal road for genetic algorithms: Fitness landscapes and GA performance. In Toward a Practice of Autonomous Systems: </title> <booktitle> Proceedings of the First Euro-pean Conference on Artificial Life, </booktitle> <pages> pages 245-254, </pages> <address> Cambridge, MA, 1992. </address> <publisher> MIT Press. </publisher>
Reference-contexts: CHAPTER VI Collective Adaptation in Search Heuristics 6.1 Introduction Royal Road functions manipulate the fitness landscape to provide controlled experiments into genetic algorithm (GA) theory <ref> [ Mitchell et al., 1992 ] </ref> . Variations of clique detection in a graph, e.g., finding both the max clique [ Soule et al., 1996 ] and the clique cover [ Haynes, 1996 ] , have been proposed as naturally occurring Royal Road functions. <p> If I vary the representation used in the chromosome, then the clique domain does satisfy the necessary criteria to be a Royal Road function for GA. Besides allowing a researcher to investigate the formation of building blocks, Royal Road functions can be used to test GAs against other paradigms <ref> [ Mitchell et al., 1992 ] </ref> . Soule and Foster have tried to positively correlate different graph families to various measures of GA hardness [ Soule and Foster, 1997 ] . <p> However, in general the greedy algorithm in Figure 6.1 will not run in polynomial time: the determination of the disjointness of the clique set is itself NP-complete and is actually the problem of Partition into cliques. 88 If examine the characteristics of a Royal Road function as put forth in <ref> [ Mitchell et al., 1992 ] </ref> : 1) All of the desired building blocks are known in advance. 2) The landscape can be varied systematically. 3) The global optimum, and all local optimum, can be enumerated. we see that this family of graphs satisfy the conditions to make it a Royal <p> h s (G) to be the hardness as measured by the graph size, which is simply the 3 An irony of Royal Road functions is while they are designed to facilitate the hierarchical solving of problems via building blocks, in practice they hinder the integration of building blocks, e.g., hitchhiking <ref> [ Mitchell et al., 1992 ] </ref> . With clique detection, the space of partial solutions can become too large for building blocks to be effectively combined. 90 number of vertices in G.
Reference: [ Montana, 1995 ] <author> David J. Montana. </author> <title> Strongly typed genetic programming. </title> <journal> Evolutionary Computation, </journal> <volume> 3(2) </volume> <pages> 199-230, </pages> <year> 1995. </year>
Reference-contexts: A problem with using GP to solve large and complex problems is the considerable size of the state-space to be searched for generating good solutions. Even for small terminal and function sets and tree depths, search spaces of the order of 10 30 10 40 are not uncommon <ref> [ Montana, 1995 ] </ref> . To address this pressing problem, researchers have been investigating various means to reduce the GP state-space size for complex problems. <p> Notable work in this area include Automatically Defined Functions (ADF) [ Kinnear, Jr., 1994b; Koza, 1994 ] , module acquisition (MA) [ Angeline, 1994; Kinnear, Jr., 1994b ] , and strongly typed genetic programming (STGP) <ref> [ Montana, 1995 ] </ref> . The first two methods utilize function decomposition to reduce the state-space. The STGP method utilizes structuring of 4 the GP S-expression to reduce the state-space. We strongly agree with Montana's claim of the relative advantage of STGP over GP for complex problems [ Montana, 1995 ] <p> genetic programming (STGP) <ref> [ Montana, 1995 ] </ref> . The first two methods utilize function decomposition to reduce the state-space. The STGP method utilizes structuring of 4 the GP S-expression to reduce the state-space. We strongly agree with Montana's claim of the relative advantage of STGP over GP for complex problems [ Montana, 1995 ] . 1.2 Strongly Typed Genetic Programming Montana claims that closure is a serious limitation to genetic programming [ Mon-tana, 1995 ] . Koza describes a way to relax the closure constraint using the concept of constrained syntax structures [ Koza, 1992 ] . <p> In the same example when the maximum tree depth was increased to six, the size of the search space for the STGP implementation was 10 11 , while the size of the GP search space was 10 38 <ref> [ Montana, 1995 ] </ref> . It has been shown that STGP can significantly reduce the search space. The STGP variant mainly restricts the construction and reproduction of chromosomes; the basic algorithm is GP. <p> This is shown in both the paper in which Montana introduced STGP <ref> [ Montana, 1995 ] </ref> and in our research into multiagent behavioral strategies [ Haynes et al., 1995b ] . STGP is able to reduce the search space by only allowing syntactically correct programs to be generated and produced by the crossover and mutation operators. <p> Each chromosome in the population represents a set of candidate maximal cliques. The function and terminal sets are F = fExtCon, IntCong and T = f1,. . . ,#verticesg. ExtCon "separates" two candidate maximal cliques, while IntCon "joins" two candidate cliques to create a larger candidate. Strong typing <ref> [ Montana, 1995 ] </ref> and type inheritance [ Haynes et al., 1996b ] are used to ensure that the parent of an ExtCon node is either the root or another ExtCon node. The fitness evaluation rewards for clique size and rewards for the number of cliques in the tree. <p> This is the only way to specify a clique with only one member. Thus, Node is overloaded. To be correct, we should extend the type hierarchy to three levels, as shown in Figure 2.5. 2.3.1 Conclusion The STGP as described by Montana <ref> [ Montana, 1995 ] </ref> deals with genericity but not with other aspects of object oriented methods. We extend STGP to deal with type hierarchies, and in particular, with polymorphism and dynamic binding aspects of the object oriented paradigm. <p> Each curve shown in Figure 5.1 is an average of 10 different runs. Each of the methods extends the previous methods. The first method (R0) is a strongly typed genetic programming (STGP) <ref> [ Montana, 1995 ] </ref> system modified with the type inheritance presented in [ Haynes et al., 1996b ] . Chromosomes are repaired during the fitness evaluation, but they are not returned into the population.
Reference: [ Nii, 1986 ] <author> H. Penny Nii. </author> <title> Blackboard systems: The blackboard model of problem solving and the evolution of blackboard architectures. </title> <journal> AI Magazine, </journal> <volume> 7(2) </volume> <pages> 38-53, </pages> <month> Summer </month> <year> 1986. </year>
Reference: [ Nordin, 1994 ] <author> Peter Nordin. </author> <title> A compiling genetic programming system that directly manipulates the machine code. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: His chromosomes are comprised of linear genomes which are 32 bit strings and are binary code for a SUN-4 <ref> [ Nordin, 1994 ] </ref> . Non-coding bits are defined to be those that when replaced by a NOP instruction do not change the semantics or phenotype of the chromosome. Using this capability, Nordin investigated the effects of non-coding segments on destructive crossover.
Reference: [ Nordin, 1996 ] <author> Peter Nordin. </author> <title> Explictly defined introns and destructive crossover in genetic programming. </title> <editor> In P. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2. </booktitle> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: He highlights a difference between GAs and GPs with regards to non-coding segments: in GAs they are added by design and in GPs they evolve naturally. 29 Nordin investigates the dynamics of non-coding segments in GP evolution <ref> [ Nordin, 1996 ] </ref> . His chromosomes are comprised of linear genomes which are 32 bit strings and are binary code for a SUN-4 [ Nordin, 1994 ] .
Reference: [ O'Reilly and Oppacher, 1994 ] <author> Una-May O'Reilly and Franz Oppacher. </author> <title> Program search with a hierarchical variable length representation: Genetic programming, simulated annealing and hill climbing. </title> <editor> In Yuval Davidor, Hans-Paul Schwefel, and Reinhard Manner, editors, </editor> <booktitle> Parallel Problem Solving from Nature - PPSN III, number 866 in Lecture Notes in Computer Science, </booktitle> <pages> pages 397-406, </pages> <address> Jerusalem, </address> <month> 9-14 October </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference: [ O'Reilly and Oppacher, 1995a ] <author> Una-May O'Reilly and Franz Oppacher. </author> <title> Hybridized crossover-based search techniques for program discovery. </title> <booktitle> In Proceedings of the 1995 World Conference on Evolutionary Computation, </booktitle> <volume> volume 2, </volume> <pages> page 573, </pages> <address> Perth, Australia, </address> <month> 29 November - 1 December </month> <year> 1995. </year>
Reference: [ O'Reilly and Oppacher, 1995b ] <author> Una-May O'Reilly and Franz Oppacher. </author> <title> The troubling aspects of a building block hypothesis for genetic programming. </title> <editor> In L. Darrell Whitley and Michael D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> pages 73-88, </pages> <address> Estes Park, Colorado, USA, 31 July-2 August 1994 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Also, are the following schemata equivalent: f (+ 9 6)g f (+ 6 9)g? The inability of the Schema Theorem to account for the multiple appearance of subtrees, i.e., building blocks, and their hierarchical recombination has led researchers to believe that the Schema Theorem does not hold for GP <ref> [ O'Reilly, 1995; O'Reilly and Oppacher, 1995b ] </ref> . Altenberg believes the Schema Theorem can not account for the proliferation of copies of subtrees and he applies Price's Theorem and introduces a "constructional fitness" to account for such proliferation [ Altenberg, 1994 ] . <p> Soule et al. point out that the arguments provided by O'Reilly and Oppacher against a GP Schema Theorem fail for this domain <ref> [ O'Reilly and Oppacher, 1995b ] </ref> : subtrees do not interact adversely and subtrees represent hyperplanes of the fitness landscape.
Reference: [ O'Reilly, 1995 ] <author> Una-May O'Reilly. </author> <title> An Analysis of Genetic Programming. </title> <type> PhD thesis, </type> <institution> Carelton University, </institution> <address> Ottawa, Ontario, Canada, </address> <month> 22 September </month> <year> 1995. </year>
Reference-contexts: Also, are the following schemata equivalent: f (+ 9 6)g f (+ 6 9)g? The inability of the Schema Theorem to account for the multiple appearance of subtrees, i.e., building blocks, and their hierarchical recombination has led researchers to believe that the Schema Theorem does not hold for GP <ref> [ O'Reilly, 1995; O'Reilly and Oppacher, 1995b ] </ref> . Altenberg believes the Schema Theorem can not account for the proliferation of copies of subtrees and he applies Price's Theorem and introduces a "constructional fitness" to account for such proliferation [ Altenberg, 1994 ] . <p> Due to the difficulties in detecting building blocks in GP chromosomes, research is ongoing into formally connecting the theory as to why GP works with that of why GAs work <ref> [ O'Reilly, 1995; Rosca and Ballard, 1996; Tackett, 1995 ] </ref> . The canonical GP chromosome representation is a parse tree (S-expression). The difference between GA and GP 28 is more than the fixed versus variable genotype representation. <p> In clique detection, candidate cliques form the building blocks. The identification of building blocks in genetic programming is in general a difficult task <ref> [ O'Reilly, 1995; Rosca and Ballard, 1996; Haynes, 1996 ] </ref> . In part this is due to the domain dependent nature of the alphabet, i.e. the members of the function and terminal sets 7 .
Reference: [ Orvosh and Davis, 1993 ] <author> David Orvosh and Lawrence Davis. </author> <title> Shall we repair? Genetic algorithms, combinatorial optimization, and feasibility constraints. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <pages> page 650, </pages> <address> San Mateo, CA, 1993. </address> <publisher> Morgan Kaufman. </publisher> <pages> 131 </pages>
Reference-contexts: With the BCD example, we could use modulo arithmetic to force all combinations to be legal. If we then take the phenotype and map it back into the genotype, we have repaired the chro 30 mosome <ref> [ Davis et al., 1993; Orvosh and Davis, 1993 ] </ref> . Furthermore, repair rate denotes the percentage of repaired chromosomes that are returned into the population, overwriting the original. <p> The 10 node graph (Figure 3.2) is used for clique covering. All chromosomes are repaired, and I investigate repair rates (the percentage of repaired chromosomes returned into the population) of 0%, 0.5%, 1.5%, 3%, 5%, and 10%. Repair rates greater than 0.5% (small repair rates are desirable <ref> [ Orvosh and Davis, 1993 ] </ref> ) 33 either degrade the performance or cause premature convergence, see Figure 3.5. Why does repair work for GA, but not for GP? 3%, 5%, and 10%. <p> This contradicts the earlier findings reported in Orvosh and Davis <ref> [ Orvosh and Davis, 1993 ] </ref> . 3.5.4 Conclusions I utilize the tree structure of GP chromosomes to conduct experimentation into duplication of coding segments.
Reference: [ Poli and Langdon, 1997a ] <author> Riccardo Poli and W. B. Langdon. </author> <title> An experimental analysis of schema creation, propagation and disruption in genetic programming. </title> <editor> In Thomas Back, editor, </editor> <booktitle> Proceedings of the Seventh International Conference on Genetic Algorithms (ICGA97), </booktitle> <address> San Francisco, CA, 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Poli and Langdon, 1997b ] <author> Riccardo Poli and W. B. Langdon. </author> <title> A new schema theory for genetic programming with one-point crossover and point mutation. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 278-285, </pages> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Punch et al., 1996 ] <author> William F. Punch, Douglas Zongker, and Erik D. Goodman. </author> <title> The royal tree problem, a benchmark for single and multiple population genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 15, </booktitle> <pages> pages 299-316. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference: [ Rosca and Ballard, 1996 ] <author> Justinian P. Rosca and Dana H. Ballard. </author> <title> Discovery of subroutines in genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 9, </booktitle> <pages> pages 177-202. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: Due to the difficulties in detecting building blocks in GP chromosomes, research is ongoing into formally connecting the theory as to why GP works with that of why GAs work <ref> [ O'Reilly, 1995; Rosca and Ballard, 1996; Tackett, 1995 ] </ref> . The canonical GP chromosome representation is a parse tree (S-expression). The difference between GA and GP 28 is more than the fixed versus variable genotype representation. <p> Genetic programming researchers have extracted knowledge from chromosomes, building "libraries" or "banks" from which material could be extracted at a later date <ref> [ Tackett, 1995; Rosca and Ballard, 1996 ] </ref> . The knowledge is in the form of a subtree of the chromosome. These subtrees are chosen based on their perceived utility; i.e., they appear often in chromosomes which are highly fit. <p> The collected subtrees are not allowed to return to the population [ Tackett, 1995 ] . Rosca and Ballard consider an adaptive representation approach in which they extract small subtrees and allow them to be added back into the population by extending the alphabet <ref> [ Rosca and Ballard, 1996 ] </ref> . Finally, Seront [ Seront, 1995 ] considers a concept library system in which the knowledge gained from solving one problem, P a , is applied to the solution of similar problems. <p> In clique detection, candidate cliques form the building blocks. The identification of building blocks in genetic programming is in general a difficult task <ref> [ O'Reilly, 1995; Rosca and Ballard, 1996; Haynes, 1996 ] </ref> . In part this is due to the domain dependent nature of the alphabet, i.e. the members of the function and terminal sets 7 .
Reference: [ Rosca, 1997 ] <author> Justinian P. Rosca. </author> <title> Analysis of complexity drift in genetic programming. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 286-294, </pages> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Russell and Norvig, 1995 ] <author> Stuart Russell and Peter Norvig. </author> <title> Artificial Intelligence: A Modern Approach. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference: [ Seront, 1995 ] <author> Gregory Seront. </author> <title> External concepts reuse in genetic programming. </title> <editor> In E. V. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 94-98, </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference-contexts: Rosca and Ballard consider an adaptive representation approach in which they extract small subtrees and allow them to be added back into the population by extending the alphabet [ Rosca and Ballard, 1996 ] . Finally, Seront <ref> [ Seront, 1995 ] </ref> considers a concept library system in which the knowledge gained from solving one problem, P a , is applied to the solution of similar problems.
Reference: [ Soule and Foster, 1997 ] <author> Terence Soule and James A. Foster. </author> <title> Genetic algorithm hardness measures applied to the maximum clique problem. </title> <editor> In Thomas Back, editor, </editor> <booktitle> Proceedings of the Seventh International Conference on Genetic Algorithms (ICGA97), </booktitle> <address> San Francisco, CA, 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Soule and Foster have used the max clique to investigate the relation between graph characteristics and GA hardness <ref> [ Soule and Foster, 1997 ] </ref> , i.e., how hard a particular problem is for a GA to solve. The GA encoding of Bui and Eppley could not maintain several candidate cliques in a single chromosome. <p> Besides allowing a researcher to investigate the formation of building blocks, Royal Road functions can be used to test GAs against other paradigms [ Mitchell et al., 1992 ] . Soule and Foster have tried to positively correlate different graph families to various measures of GA hardness <ref> [ Soule and Foster, 1997 ] </ref> . Soule and Foster have used a GA encoding to investigate the relation between graph characteristics and GA hardness [ Soule and Foster, 1997 ] . They used graphs from the Center for Discrete Mathematics and Theoretical Computer Science (DIMACS) at Rutgers University. <p> Soule and Foster have tried to positively correlate different graph families to various measures of GA hardness <ref> [ Soule and Foster, 1997 ] </ref> . Soule and Foster have used a GA encoding to investigate the relation between graph characteristics and GA hardness [ Soule and Foster, 1997 ] . They used graphs from the Center for Discrete Mathematics and Theoretical Computer Science (DIMACS) at Rutgers University. These graphs were generated as part of a DIMACS challenge on graph problems [ Johnson and Trick, 1996 ] .
Reference: [ Soule et al., 1996 ] <author> Terence Soule, James A. Foster, and John Dickinson. </author> <title> Using genetic programming to approximate maximum clique. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Conference, </booktitle> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Soule et al. point out that such an approach fails to exploit building blocks. If two labels are connected, but not close together on the chromosome, then the defining length will not be short, resulting in a greater chance of disruption of the building block <ref> [ Soule et al., 1996 ] </ref> . GP has also been used to find the max clique [ Soule et al., 1996 ] . <p> If two labels are connected, but not close together on the chromosome, then the defining length will not be short, resulting in a greater chance of disruption of the building block <ref> [ Soule et al., 1996 ] </ref> . GP has also been used to find the max clique [ Soule et al., 1996 ] . <p> CHAPTER VI Collective Adaptation in Search Heuristics 6.1 Introduction Royal Road functions manipulate the fitness landscape to provide controlled experiments into genetic algorithm (GA) theory [ Mitchell et al., 1992 ] . Variations of clique detection in a graph, e.g., finding both the max clique <ref> [ Soule et al., 1996 ] </ref> and the clique cover [ Haynes, 1996 ] , have been proposed as naturally occurring Royal Road functions. However, it has been shown that the clique domain does not serve as a Royal Road function for binary encoded GAs [ Soule et al., 1996 ] <p> finding both the max clique <ref> [ Soule et al., 1996 ] </ref> and the clique cover [ Haynes, 1996 ] , have been proposed as naturally occurring Royal Road functions. However, it has been shown that the clique domain does not serve as a Royal Road function for binary encoded GAs [ Soule et al., 1996 ] . If I vary the representation used in the chromosome, then the clique domain does satisfy the necessary criteria to be a Royal Road function for GA.
Reference: [ Spector, 1996 ] <author> Lee Spector. </author> <title> Simultaneous evolution of programs and their control structures. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 7, </booktitle> <pages> pages 137-154. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference: [ Tackett and Carmi, 1994 ] <author> Walter Alden Tackett and Aviram Carmi. </author> <title> The donut problem: Scalability and generalization in genetic programming. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 7, </booktitle> <pages> pages 143-176. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ Tackett, 1993 ] <author> Walter Alden Tackett. </author> <title> Genetic programming for feature discovery and image discrimination. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 303-309, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <month> 17-21 July </month> <year> 1993. </year> <note> Morgan Kauf-mann. </note>
Reference-contexts: There can also be a duplication of building blocks in a GP chromosome, whereas there may not be any such duplication in a GA chromosome. Tackett compares the difficulty in researching building blocks between GP and GA: different notations of schemata and a non-binary alphabet <ref> [ Tackett, 1993 ] </ref> . He believes that small subtrees which appear frequently in S-expressions are GP's building blocks. These subtrees are prevalent due to their contribution to the fitness of the chromosomes in which they appear. <p> The knowledge is in the form of a subtree of the chromosome. These subtrees are chosen based on their perceived utility; i.e., they appear often in chromosomes which are highly fit. They are also conjectured to be the blocks from which the solution is built <ref> [ Tackett, 1993 ] </ref> . However, the extracted knowledge is not processed; the partial solution contained in one subtree is not combined with the partial solution contained in other chromosomes. Tackett's gene-bank gathers statistical information about these subtrees.
Reference: [ Tackett, 1995 ] <author> Walter A. Tackett. </author> <title> Mining the genetic program. </title> <journal> IEEE Expert, </journal> <volume> 12(3) </volume> <pages> 28-38, </pages> <year> 1995. </year>
Reference-contexts: Due to the difficulties in detecting building blocks in GP chromosomes, research is ongoing into formally connecting the theory as to why GP works with that of why GAs work <ref> [ O'Reilly, 1995; Rosca and Ballard, 1996; Tackett, 1995 ] </ref> . The canonical GP chromosome representation is a parse tree (S-expression). The difference between GA and GP 28 is more than the fixed versus variable genotype representation. <p> Genetic programming researchers have extracted knowledge from chromosomes, building "libraries" or "banks" from which material could be extracted at a later date <ref> [ Tackett, 1995; Rosca and Ballard, 1996 ] </ref> . The knowledge is in the form of a subtree of the chromosome. These subtrees are chosen based on their perceived utility; i.e., they appear often in chromosomes which are highly fit. <p> However, the extracted knowledge is not processed; the partial solution contained in one subtree is not combined with the partial solution contained in other chromosomes. Tackett's gene-bank gathers statistical information about these subtrees. The collected subtrees are not allowed to return to the population <ref> [ Tackett, 1995 ] </ref> . Rosca and Ballard consider an adaptive representation approach in which they extract small subtrees and allow them to be added back into the population by extending the alphabet [ Rosca and Ballard, 1996 ] .
Reference: [ Talukdar et al., 1983 ] <author> S .N. Talukdar, S. S. Pyo, and T. Giras. </author> <title> Asynchronous procedures for parallel processing. </title> <journal> IEEE Transactions on PAS, </journal> <volume> PAS-102(11), </volume> <month> November </month> <year> 1983. </year>
Reference-contexts: Each agent is always executing and there is no triggering of execution via data added to the blackboard, which removes the need for a scheduling mechanism. The A-Teams research employs a shared memory to effect communication between a team of autonomous agents <ref> [ Talukdar et al., 1983; de Souza and Talukdar, 1991 ] </ref> . Each agent is either a constructor or destructor; i.e., they either add or delete knowledge from the shared memory.
Reference: [ Tanenbaum, 1987 ] <author> A. Tanenbaum. </author> <title> Operating Systems: Design and Implementation. </title> <publisher> Prentice Hall, </publisher> <address> Engelwood Cliffs, NJ, </address> <year> 1987. </year>
Reference-contexts: Such issues are discussed in basic texts on operating systems <ref> [ Tanenbaum, 1987 ] </ref> and computer architecture [ Hwang and Briggs, 1985 ] .

References-found: 78

