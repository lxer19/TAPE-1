URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-95-1260/CS-TR-95-1260.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-95-1260/
Root-URL: http://www.cs.wisc.edu
Email: hollings@cs.umd.edu bart@cs.wisc.edu  
Title: Slack: A New Performance Metric for Parallel Programs  
Author: Jeffrey K. Hollingsworth Barton P. Miller 
Address: College Park, MD 20902 1210 W. Dayton Street Madison, Wisconsin 53706  
Affiliation: Computer Science Department Computer Sciences Department University of Maryland University of Wisconsin-Madison  
Abstract: Critical Path Profiling is a technique that provides guidance to help programmers try to improve the running time of their program. However, Critical Path Profiling provides only an upper bound estimate of the improvement possible in a parallel program execution. In this paper, we present a new metric, called Slack , to complement Critical Path and provide additional information to parallel programmers about the potential impact of making improvements along the critical path. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> K. M. Chandy and J. Misra, </author> <title> "Distributed computation on graphs: Shortest path algorithms", </title> <journal> CACM 25(Nov. </journal> <year> 1982), </year> <pages> pp. 833-837. </pages>
Reference-contexts: The arcs are labeled with the elapsed time between events. - -- To find the longest path through the graph, we use a variation on the parallel shortest path algorithm described by Chandy and Misra in <ref> [1] </ref>. Each process in the original program is assigned to a processor for the computation of the longest path. The algorithm passes messages along the arcs of the graph. Each message contains the value of the longest path to the current node.
Reference: 2. <author> S. L. Graham, P. B. Kessler and M. K. McKusick, </author> <title> "gprof: a Call Graph Execution Profiler", </title> <booktitle> SIGPLAN '82 Symposium on Compiler Construction, </booktitle> <address> Boston, </address> <month> June </month> <year> 1982, </year> <pages> pp. 120-126. </pages>
Reference-contexts: 1. Introduction Performance debugging parallel programs is much harder than for sequential programs. For sequential programs, tools such as gprof <ref> [2] </ref> provide sufficient information to guide the programmer to the bottlenecks in their program. Unlike sequential programs, in parallel programs improving the procedure that consumes the largest amount of CPU time will not necessarily improve the program. More sophisticated metrics are required.
Reference: 3. <author> J. K. Hollingsworth and B. P. Miller, </author> <title> "Parallel Program Performance Metrics: A Comparison and Validation", </title> <booktitle> Supercomputing 1992, </booktitle> <address> Minneapolis, MN, </address> <month> November </month> <year> 1992, </year> <pages> pp. 4-13. </pages>
Reference-contexts: A complete case study comparing Critical Path, Slack, and several other parallel performance metrics can be found in <ref> [3] </ref>. - -- 2. Critical Path Critical Path Profiling is based on identifying the path through the program's execution that consumed the most time. To calculate a program's Critical Path, we build a graph of the program's execution, called a Program Activity Graph (PAG).
Reference: 4. <author> B. P. Miller, M. Clark, J. Hollingsworth, S. Kierstead, S. Lim and T. Torzewski, "IPS-2: </author> <title> The Second Generation of a Parallel Program Measurement System", </title> <journal> IEEE Transactions on Parallel and Distributed Systems 1, </journal> <month> 2 (April </month> <year> 1990), </year> <pages> pp. 206-217. </pages>
Reference-contexts: Discussion and Examples To get an idea how well the Slack metric performs in practice, we added an implementation of Slack Profiling to the IPS-2 parallel program measurement system <ref> [4] </ref>. We then used IPS-2 to measure the performance of two programs. The first was a client-server program running on a network of workstations. The second is a numerical application running on a multi-processor. The first program is a simple client-server program running on two workstations.
Reference: 5. <author> C. Yang and B. P. Miller, </author> <title> "Critical Path Analysis for the Execution of Parallel and Distributed Programs", </title> <booktitle> 8th Int'l Conf. on Distributed Computing Systems, </booktitle> <address> San Jose, Calif., </address> <month> June </month> <year> 1988, </year> <pages> pp. 366-375. </pages> - -- 
Reference-contexts: Unlike sequential programs, in parallel programs improving the procedure that consumes the largest amount of CPU time will not necessarily improve the program. More sophisticated metrics are required. Metrics provided by techniques such as Critical Path Profiling <ref> [5] </ref> help to guide parallel programmers to find performance bottlenecks. Critical Path Profiling computes a value for each procedure in the program indicating how much time is spent on the critical path for that procedure.
References-found: 5

