URL: ftp://ftp.cis.ohio-state.edu/pub/anish/papers/maintain-clocks.ps.Z
Refering-URL: http://www.cis.ohio-state.edu/~anish/pub.html
Root-URL: 
Phone: 2.  
Title: Maintaining Digital Clocks In Step  
Author: Anish ARORA Shlomi DOLEV Mohamed GOUDA 
Keyword: stabilization, reliability, distributed algorithms, digital clocks, conver gence.  
Address: Austin, USA  ISRAEL  
Affiliation: 1. Department of Computer Sciences, The University of Texas at  Department of Computer Science, Technion,  
Abstract: A system of simultaneously triggered clocks is designed to be stabilizing: if the clock values ever differ, the system is guaranteed to converge to a state where all clock values are identical, and are subsequently maintained to be identical. For an N -clock system, the design uses N registers of 2 log N bits each and guarantees convergence to identical values within N 2 "triggers". 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.B. Peatman, </author> <title> Digital Hardware Design, </title> <publisher> Addison-Wesley (1980). </publisher>
Reference-contexts: The use of digital clocks in circuit design is frequent; for example, * Synchronization : A circuit may include some parts that need to synchronize with other parts periodically <ref> [1] </ref>. The periods, in this case, can be measured using a digital clock. * Mode Change : A circuit may be designed to operate in several modes. <p> For instance, a mode can be allocated to gate asynchronous inputs into registers, and then the register values can be operated upon in a second mode <ref> [1] </ref>.
Reference: [2] <author> C. Mead and L. Conway, </author> <title> Introduction to VLSI Systems, </title> <publisher> Addison-Wesley (1980). </publisher>
Reference-contexts: This is because using one digital clock may result in long wires which (possibly) traverse multiple chips. It may also result in high fan-out. Consequently, the propagation delay is significant, extra power is needed to drive the signals, and chip space is wasted <ref> [2] </ref>. The problem of using multiple digital clocks, however, is the added obligation on the circuit designer to ensure that all digital clocks maintain identical values. <p> Mplus is a combinational circuit that computes the minimum of two (log m)-bit input operands and increments the result by one modulo m. We assume for correct operation that the delay of the combinational logic exceeds the clock width and is less than the clock period <ref> [2] </ref>. 7 Each intermediate circuit u operates as follows.
Reference: [3] <author> S. Even and S. Rajsbaum, </author> <title> "Lack of a global clock does not slow down the computation in distributed networks", TR522, Computer Science Department, Technion (1988) ; the first part of this paper, "Unison in distributed networks", appeared in Sequences, Combinatorica, Compression, Security, and Transmission, E.M. </title> <editor> Capocelli (ed.), </editor> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Moreover, the design can tolerate the fail-stop failures of individual clocks and interconnecting wires (provided the overall circuit remains connected). The problem of maintaining clocks in step has been studied earlier by Even and Rajsbaum <ref> [3] </ref>. They show how clocks can operate in step in a synchronous system where all clocks have identical values initially, but different clocks start counting at different instants.
Reference: [4] <author> M.G. Gouda and T. Herman, </author> <title> "Stabilizing unison", </title> <journal> Information Processing Letters, </journal> <volume> Vol. 35, No. 4, </volume> <pages> pp. </pages> <month> 171-175 </month> <year> (1990). </year>
Reference-contexts: First, if neighboring clock values ever differ by two or more, e.g., due to a transient failure, in step operation cannot be regained. Second, their design employs clocks whose values range over the natural numbers. More recently, Gouda and 2 Herman have presented a design <ref> [4] </ref> that overcomes the first drawback, but still employs clocks whose values range over an infinite domain. By way of contrast, our design employs finite-state clocks and so can be used in digital circuits.
Reference: [5] <author> E.F. Moore, </author> <title> "The firing squad synchronization problem", in Sequential Machines, </title> <editor> E.F. Moore (ed.), </editor> <publisher> Addison-Wesley (1964). </publisher>
Reference: [6] <author> J.E. Burns and N.A. Lynch, </author> <title> "The byzantine firing squad problem", </title> <booktitle> in Advances in Computing Research: Parallel and Distributed Computing, </booktitle> <volume> Vol. 4, </volume> <publisher> JAI Press, </publisher> <pages> pp. </pages> <month> 147-161 </month> <year> (1987). </year>
Reference: [7] <author> B.A. Coan, D. Dolev, C. Dwork and L. Stockmeyer, </author> <title> "The distributed firing squad problem", </title> <journal> Siam Journal of Computing, </journal> <volume> Vol. 18, No. 5, </volume> <pages> pp. </pages> <month> 990-1012 </month> <year> (1989). </year>
Reference: [8] <author> F. Cristian, </author> <title> "Probabilistic clock synchronization", </title> <journal> Distributed Computing, </journal> <volume> Vol. 3, </volume> <pages> pp. </pages> <month> 146-158 </month> <year> (1989). </year>
Reference: [9] <author> F.B. Schneider, </author> <title> "Understanding protocols for byzantine clock synchronization", </title> <type> Technical Report TR-87-859, </type> <institution> Cornell University, Department of Computer Science, </institution> <address> Ithaca, NY 14853 (1987). </address>
Reference: [10] <author> A. Arora and M.G. Gouda, </author> <title> "Closure and convergence: A formal basis for fault-tolerance", </title> <type> Manuscript (1991). </type>
Reference-contexts: Consequently, the resulting system is self-initializing, does not require global state detection and is robust to transient failures and reconfiguration. More generally, the concepts discussed in this paper can be extended to reason about the correctness of several classes of reliable systems in a formal manner. In <ref> [10] </ref>, Arora and Gouda present such a formalism based on two notions: closure (which is a safety property analogous to unison) and convergence (which is a progress property analogous to stabilization).
Reference: [11] <author> A. Arora, </author> <title> "A foundation for fault-tolerant computing", </title> <publisher> Ph. </publisher> <address> D. </address> <note> Dissertation, in preparation (1991). 9 </note>
Reference-contexts: We omit here the proof of correctness of the catch up design, and refer the interested reader to <ref> [11] </ref>. 5 Linear Arrays of Digital Clocks The fall back design presented in Sections 3 can be easily implemented in hardware. In this section, we describe a hardware implementation of the design for the special case of a linear array of clocks.
References-found: 11

