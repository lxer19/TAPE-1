URL: http://monet.cs.uiuc.edu/~h-chu3/papers/JHSN-98.ps
Refering-URL: http://monet.cs.uiuc.edu/~h-chu3/
Root-URL: http://www.cs.uiuc.edu
Email: klara,h-chu3,srnaraya@cs.uiuc.edu  
Title: QoS-Aware Resource Management for Distributed Multimedia Applications  
Author: Klara Nahrstedt, Hao-hua Chu, Srinivas Narayan 
Note: The work of all authors was supported by the NSF Career Award under the agreement number NSF CCR 96-23867 and the NSF CISE Infrastructure grant under the agreement number NSF CDA 96-24396.  
Address: Urbana Champaign  
Affiliation: Department of Computer Science University of Illinois at  
Abstract: The ability of operating system and network infrastructure to provide end-to-end quality of service (QoS) guarantees in multimedia is a major acceptance factor for various distributed multimedia applications due to the temporal audio-visual and sensory information in these applications. Our constraints on the end-to-end guarantees are (1) QoS should be achieved on a general-purpose platform with a real-time extension support, and (2) QoS should be application-controllable. In order to achieve the users' acceptance requirements and to satisfy our constraints on the multimedia systems, we need a QoS-compliant resource management which supports QoS negotiation, admission and reservation mechanisms in an integrated and accessible way. In this paper we present a new resource model and a time-variant QoS management, which are the major components of the QoS-compliant resource management. The resource model incorporates, the resource scheduler, and a new component, the resource broker, which provides negotiation, admission and reservation capabilities for sharing resources such as CPU, network or memory corresponding to requested QoS. The resource brokers are intermediary resource managers; when combined with the resource schedulers, they provide a more predictable and finer granularity control of resources to the applications during the end-to-end multimedia communication than what is available in current general-purpose networked systems. Furthermore, this paper presents the QoS-aware resource management model called QualMan, as a loadable middleware, its design, implementation, results, tradeoffs, and experiences. There are trade-offs when comparing our QualMan QoS-aware resource management in middleware and other QoS-supporting resource management solutions in kernel space. The advantages of QualMan is that it is flexible and scalable on a general-purpose workstations or PC. The disadvantage is the lack of very fine QoS granularity, which is only possible if supports are built inside the kernel. Our overall experience with QualMan design and experiments show that (1) the resource model in QualMan design is very scalable to different types of shared resources and platforms, and it allows a uniform view to embed the QoS inside distributed resource management, (2) the design and implementation of QualMan is easily portable, (3) the good results for QoS guarantees such as jitter, synchronization skew, and end-to-end delay, can be achieved for various distributed multimedia applications. 
Abstract-found: 1
Intro-found: 1
Reference: [BCSW86] <author> J. Blazewicz, W. Cellary, R. Slowinski, and J. Weglarz. </author> <title> Scheduling under Resource Constraints Deterministic Models, volume 7. </title> <publisher> Baltzer Science Publishers, </publisher> <year> 1986. </year>
Reference-contexts: This general model allows us to provide a uniform view at any shared resource in a distributed multimedia system 6 with QoS requirements 1 . The uniform resource view then allows for development of feasible heuristics algorithms to solve the distributed resource allocation problem which is otherwise NP-complete problem <ref> [BCSW86] </ref>. We provide piecewise solutions at individual resource servers such as algorithms for resource reservation and enforcement, and reservation protocols and coordination within communication protocols integrate the distributed resource servers in an end-to-end computing and communication environment.
Reference: [BFM + 96] <author> A. Banerjea, D. Ferrari, B.A. Mah, M. Moran, D.C. Verma, and H. Zhang. </author> <title> The Tenet Real-Time Protocol Suite: Design, Implementation and Experiences. </title> <journal> ACM Transaction on Networking, </journal> <volume> 4(1) </volume> <pages> 1-10, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: Examples are ST-II [Top90], Tenet Protocol Suite <ref> [BFM + 96, BM91] </ref>, Lancaster Transport Subsystem [CCH93, Cam96], Heidelberg Transport Subsystem [DHH + 93, DHVW93, DHH94, VHN92], Native ATM Protocol Stack [KS95], User Space TCP implementation [GP96], OMEGA architecture [Nah95], and QoS architecture for Internet Integrated Services [BKMS98].
Reference: [BKMS98] <author> T. Barzilai, D. Kandlur, A. Mehra, and D. Saha. </author> <title> Design and Implementation of an RSVP-based QoS architecture for Integrated Services Internet. </title> <note> IEEE JSAC (to appear), </note> <year> 1998. </year>
Reference-contexts: Examples are ST-II [Top90], Tenet Protocol Suite [BFM + 96, BM91], Lancaster Transport Subsystem [CCH93, Cam96], Heidelberg Transport Subsystem [DHH + 93, DHVW93, DHH94, VHN92], Native ATM Protocol Stack [KS95], User Space TCP implementation [GP96], OMEGA architecture [Nah95], and QoS architecture for Internet Integrated Services <ref> [BKMS98] </ref>.
Reference: [BM91] <author> A. Banerjea and B. Mah. </author> <title> The Real-Time Channel Administration Protocol. </title> <booktitle> In 2nd International Workshop on Network and Operating System for Digital Audio and Video, </booktitle> <address> Heidelberg, Germany, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: Examples are ST-II [Top90], Tenet Protocol Suite <ref> [BFM + 96, BM91] </ref>, Lancaster Transport Subsystem [CCH93, Cam96], Heidelberg Transport Subsystem [DHH + 93, DHVW93, DHH94, VHN92], Native ATM Protocol Stack [KS95], User Space TCP implementation [GP96], OMEGA architecture [Nah95], and QoS architecture for Internet Integrated Services [BKMS98].
Reference: [Cam96] <author> A. Campbell. </author> <title> A Quality of Service Architecture. </title> <type> PhD thesis, </type> <institution> Lancaster University, Lancaster, </institution> <address> England, </address> <year> 1996. </year>
Reference-contexts: Examples are ST-II [Top90], Tenet Protocol Suite [BFM + 96, BM91], Lancaster Transport Subsystem <ref> [CCH93, Cam96] </ref>, Heidelberg Transport Subsystem [DHH + 93, DHVW93, DHH94, VHN92], Native ATM Protocol Stack [KS95], User Space TCP implementation [GP96], OMEGA architecture [Nah95], and QoS architecture for Internet Integrated Services [BKMS98].
Reference: [CCH93] <author> A. Campbell, G. Coulson, and D. Hutchison. </author> <title> A Multimedia Enhanced Transport Service in a Quality of Service Architecture. In Workshop on Network and Operating System Support for Digital Audio and Video '93, </title> <address> Lancaster, England, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: Figure 15 (b) shows the synchronization skew with cross traffic. 30 8 Related Work 8.1 QoS Framework The current existing QoS systems either allow to access and control (1) network QoS such as the Lancaster QoS system <ref> [CCH93] </ref>, or OMEGA end-point system [NS96b], or (2) CPU QoS parameters such as Nemesis [LMB + 96], Real-Time Mach `reserve' [LRM96]. 8.2 CPU Scheduling The area of accommodating scheduling of soft RT applications on the current UNIX platforms was addressed by several groups. <p> Examples are ST-II [Top90], Tenet Protocol Suite [BFM + 96, BM91], Lancaster Transport Subsystem <ref> [CCH93, Cam96] </ref>, Heidelberg Transport Subsystem [DHH + 93, DHVW93, DHH94, VHN92], Native ATM Protocol Stack [KS95], User Space TCP implementation [GP96], OMEGA architecture [Nah95], and QoS architecture for Internet Integrated Services [BKMS98].
Reference: [CN97] <author> H. Chu and K. Nahrstedt. </author> <title> A Soft Real Time Server in UNIX Operating System. </title> <booktitle> In IDMS'97(European Workshop on Interactive Distributed Multimedia Systems), </booktitle> <month> September </month> <year> 1997. </year>
Reference-contexts: Each component is described in details in the following subsections. In addition, we describe probing/profiling which is used to provide a good estimate of task processing time used for the 5 Early version of the CPU server was published in IDMS'97 proceeding <ref> [CN97] </ref> 10 reservation. 3.1 Broker The resource broker receives requests from client RT processes (client's broker). It performs the admission control test: P n C i T i 1, where C i is the execution time, and T i is the period (cycle time) of the i th client process. <p> The Riato system [MBJ87] also allows RT processes to specify timing constraints and continuous periodic reservations, and it provides guarantees to them. The soft real time server <ref> [CN97] </ref> supports periodic reservations with guarantees, it is based on the rate monotonic scheduling algorithm and the priority dispatch mechanism proposed by the URsched [KYO96]. 8.3 Memory The SUN Solaris Operating System provides a set of system calls that allow a process to lock certain regions of its address space in
Reference: [DHH + 93] <author> L. Delgrossi, Ch. Halstrick, D. Hehmann, R. G. Herrtwich, O. Krone, J. Sandvoss, and C. Vogt. </author> <title> Media Scaling for Audiovisual Communication with the Heidelberg Transport System. </title> <type> Technical Report 43.9305, </type> <address> IB&lt; ENC Heidelberg, Heidelberg, Germany, </address> <year> 1993. </year>
Reference-contexts: Examples are ST-II [Top90], Tenet Protocol Suite [BFM + 96, BM91], Lancaster Transport Subsystem [CCH93, Cam96], Heidelberg Transport Subsystem <ref> [DHH + 93, DHVW93, DHH94, VHN92] </ref>, Native ATM Protocol Stack [KS95], User Space TCP implementation [GP96], OMEGA architecture [Nah95], and QoS architecture for Internet Integrated Services [BKMS98].
Reference: [DHH94] <author> L. Delgrossi, R. G. Herrtwich, and F. O. Hoffmann. </author> <title> An Implementation of ST-II for the Heidelberg Transport System. </title> <journal> Internetworking Research and Experience, </journal> <volume> 5, </volume> <year> 1994. </year>
Reference-contexts: Examples are ST-II [Top90], Tenet Protocol Suite [BFM + 96, BM91], Lancaster Transport Subsystem [CCH93, Cam96], Heidelberg Transport Subsystem <ref> [DHH + 93, DHVW93, DHH94, VHN92] </ref>, Native ATM Protocol Stack [KS95], User Space TCP implementation [GP96], OMEGA architecture [Nah95], and QoS architecture for Internet Integrated Services [BKMS98].
Reference: [DHVW93] <author> L. Delgrossi, R. G. Herrtwich, C. Vogt, and L. C. Wolf. </author> <title> Reservation Protocols for Internetworks: A Comparison of ST-II and RSVP. </title> <type> Technical Report 43.9315, </type> <institution> IBM European Networking Center, </institution> <address> Heidelberg Germany, </address> <year> 1993. </year>
Reference-contexts: Examples are ST-II [Top90], Tenet Protocol Suite [BFM + 96, BM91], Lancaster Transport Subsystem [CCH93, Cam96], Heidelberg Transport Subsystem <ref> [DHH + 93, DHVW93, DHH94, VHN92] </ref>, Native ATM Protocol Stack [KS95], User Space TCP implementation [GP96], OMEGA architecture [Nah95], and QoS architecture for Internet Integrated Services [BKMS98].
Reference: [Fel90] <author> D. Feldmeier. </author> <title> Multiplexing Issues in Communication System. </title> <booktitle> SIGCOMM, </booktitle> <month> September </month> <year> 1990. </year>
Reference-contexts: The CPU and bandwidth allocation are guaranteed, and the CPU server allows for timely switching among individual connections. Note that the connections are not multiplexed at the METP level because the QoS of individual connections would be lost from the multiplexing <ref> [Fel90] </ref>. Hence each connection has its own CPU reservation. The multiplexing of different connections occurs at the ATM level in the device which is out of the CPU server responsibility.
Reference: [GGV96] <author> P. Goyal, X. Guo, and H. Vin. </author> <title> A Hierarchical CPU Scheduler for Multimedia Operating System. </title> <booktitle> In Second USENIX Symposiun on Operating System Design and Implementation, </booktitle> <year> 1996. </year>
Reference-contexts: Each RT process specifies a reserve rate used in the VC algorithm. The scheduler provides rate adaptation that gradually adjusts the reserve rate of the RT process according to its usage rate. Hierarchical CPU Scheduler <ref> [GGV96] </ref> partitioned the processor resource into hierarchical classes, e.g. RT or Best-Effort classes. Each class is designed a suitable scheduler to meet the class, and the classes are scheduled by the Start-time Fair Queuing algorithm.
Reference: [GP96] <author> R. Gopalakrishnan and G.M. Parulkar. </author> <title> Efficient User Space Protocol Implementation with QoS Guarantees using Real-Time Upcalls. </title> <type> Technical report, </type> <institution> Department of Computer Science, Washington University, St. Louis, </institution> <year> 1996. </year>
Reference-contexts: SMART [NL97] allows RT processes to specify timing constraints, and it uses upcalls to notify the RT processes of constraint violations. It is still based on TS concept of proportional sharing, and offers no guarantees. The real time upcall <ref> [GP96] </ref> contains an event handler that is registered with the kernel and it is invoked for a specified execution time periodically. The Riato system [MBJ87] also allows RT processes to specify timing constraints and continuous periodic reservations, and it provides guarantees to them. <p> Examples are ST-II [Top90], Tenet Protocol Suite [BFM + 96, BM91], Lancaster Transport Subsystem [CCH93, Cam96], Heidelberg Transport Subsystem [DHH + 93, DHVW93, DHH94, VHN92], Native ATM Protocol Stack [KS95], User Space TCP implementation <ref> [GP96] </ref>, OMEGA architecture [Nah95], and QoS architecture for Internet Integrated Services [BKMS98]. <p> However, we applied several lessons learned from this protocol stack, and we expanded its functionality of reliability protocols as mentioned in section 5. The User Space TCP implementation <ref> [GP96] </ref> project is a novel attempt to provide support for multimedia processing using existing protocols instead of designing new protocols. It uses an operating system feature called Real-Time Upcalls to provide QoS guarantees to networked applications.
Reference: [KM97] <author> S. Keshav and S.P. Morgan. SMART Retransmission: </author> <title> Performance with Random Losses and Overload. </title> <booktitle> In INFOCOM'97, </booktitle> <year> 1997. </year>
Reference-contexts: However, if there is no response from the receiver to the first retransmission, the pessimistic scenario is assumed and all unacknowledged timed-out PDUs are retransmitted. This technique of optimized retransmission improves the performance of the transport layer. The idea is similar to the SMART technique <ref> [KM97] </ref> mentioned previously. The difference is that in our scheme there is no concept of a cumulative acknowledgment as in SMART. Also, in SMART retransmission, the selective retransmission is based only on the NACKs sent by the receiver and there is no scheme to perform optimized retransmissions when timeouts occur. <p> work well over an ATM network running on PC platform; (2) attempts to provide QoS independent of the operating system environment, which is possible due to the PC's OS specifics; (3) exploits services of an underlying AAL5 layer; (4) uses a new retransmission scheme SMART (Simple Method to Aid ReTransmissions) <ref> [KM97] </ref>, which performs significantly better; and (5) provides reliable and unreliable data delivery with a choice of feedback and leaky-bucket flow control. This framework is implemented and optimized for a PC environment where part of the transport protocol resides in the kernel.
Reference: [KN97] <author> K. Kim and K. Nahrstedt. </author> <title> QoS Translation and Admission Control for MPEG Video. </title> <booktitle> In 5th IFIP International Workshop on Quality of Service, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: Due to the limit on the length of this paper, we will omit a detailed description of this interface and refer the reader to our papers <ref> [NS95a, NS96b, KN97] </ref>. 9 In summary, the QoS broker provides an integrated and automated translation when accessing QoS-aware resource management. Our final goal is to make the QoS broker together with the underlying QualMan CORBA-compliant.
Reference: [KS95] <author> S. Keshav and H. Saran. </author> <title> Semantics and Implementation of a Native-Mode ATM Protocol Stack. </title> <type> Internal technical memo, </type> <institution> AT&T Bell Laboratories, </institution> <address> Murray Hill, NJ, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: Examples are ST-II [Top90], Tenet Protocol Suite [BFM + 96, BM91], Lancaster Transport Subsystem [CCH93, Cam96], Heidelberg Transport Subsystem [DHH + 93, DHVW93, DHH94, VHN92], Native ATM Protocol Stack <ref> [KS95] </ref>, User Space TCP implementation [GP96], OMEGA architecture [Nah95], and QoS architecture for Internet Integrated Services [BKMS98]. <p> The Native ATM protocol stack <ref> [KS95] </ref> is a novel protocol stack which (1) is optimized specifically to work well over an ATM network running on PC platform; (2) attempts to provide QoS independent of the operating system environment, which is possible due to the PC's OS specifics; (3) exploits services of an underlying AAL5 layer; (4)
Reference: [KYO96] <author> J. Kamada, M. Yuhara, and E. Ono. </author> <title> User-level Realtime Scheduler Exploiting Kernel-level Fixed Priority Scheduler. </title> <booktitle> In Multimedia Japan, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: The length of time to switch from the end of one slot to the start of the next one is called the dispatch latency. The dispatch latency is the scheduling overhead which should be kept at a minimal value. The dispatcher is based on the following priority scheduling <ref> [KYO96] </ref>. The dispatcher runs at the highest possible fixed-priority, the waiting RT process waits its scheduling turn at the lowest possible fixed-priority (called the waiting 12 Priority Process RT class highest Dispatcher 2nd highest Running RT process .. <p> The soft real time server [CN97] supports periodic reservations with guarantees, it is based on the rate monotonic scheduling algorithm and the priority dispatch mechanism proposed by the URsched <ref> [KYO96] </ref>. 8.3 Memory The SUN Solaris Operating System provides a set of system calls that allow a process to lock certain regions of its address space in physical memory [Mic94]. The mlock (addr, len), munlock (addr, len) system calls lock or unlock for the address space region [addr ~ addr+len].
Reference: [LMB + 96] <author> I.M. Leslie, D. McAuley, R. Balc, T. Roscoe, P. Barham, D. Evers, R. Fairbairns, and E. Hyden. </author> <title> The design and Implementation of an Operating System to Support Distributed Multimedia Applications. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 14(7) </volume> <pages> 1280-1297, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: 15 (b) shows the synchronization skew with cross traffic. 30 8 Related Work 8.1 QoS Framework The current existing QoS systems either allow to access and control (1) network QoS such as the Lancaster QoS system [CCH93], or OMEGA end-point system [NS96b], or (2) CPU QoS parameters such as Nemesis <ref> [LMB + 96] </ref>, Real-Time Mach `reserve' [LRM96]. 8.2 CPU Scheduling The area of accommodating scheduling of soft RT applications on the current UNIX platforms was addressed by several groups.
Reference: [LRM96] <author> Ch. Lee, R. Rajkumar, and C. Mercer. </author> <title> Experiences with Processor Reservation and Dynamic QOS in Real-Time Mach. </title> <booktitle> In IEEE Multimedia Systems'96, </booktitle> <address> Hiroshima, Japan, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: with cross traffic. 30 8 Related Work 8.1 QoS Framework The current existing QoS systems either allow to access and control (1) network QoS such as the Lancaster QoS system [CCH93], or OMEGA end-point system [NS96b], or (2) CPU QoS parameters such as Nemesis [LMB + 96], Real-Time Mach `reserve' <ref> [LRM96] </ref>. 8.2 CPU Scheduling The area of accommodating scheduling of soft RT applications on the current UNIX platforms was addressed by several groups. The RT Mach [MT94] implements the Processor Capacity Reserves abstraction for the RT threads, it contains a reservation mechanism and provides guarantees. A recent [LRM96] version supports adaptation <p> Real-Time Mach `reserve' <ref> [LRM96] </ref>. 8.2 CPU Scheduling The area of accommodating scheduling of soft RT applications on the current UNIX platforms was addressed by several groups. The RT Mach [MT94] implements the Processor Capacity Reserves abstraction for the RT threads, it contains a reservation mechanism and provides guarantees. A recent [LRM96] version supports adaptation in the form of dynamic quality and policies. The Adaptive Rate-Controlled Scheduler [YL96] is based on a modification of the virtual clock (VC) algorithm. Each RT process specifies a reserve rate used in the VC algorithm.
Reference: [LS96] <author> Z. Deng J.W.-S. Liu and J. Sun. </author> <title> Dynamic Scheduling of Hard Real-Time Applications in Open System Environment. </title> <booktitle> In Proceedings of the Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: Hierarchical CPU Scheduler [GGV96] partitioned the processor resource into hierarchical classes, e.g. RT or Best-Effort classes. Each class is designed a suitable scheduler to meet the class, and the classes are scheduled by the Start-time Fair Queuing algorithm. Similar concept can be found in <ref> [LS96] </ref> which applies it further to a hard RT system in open system environment. SMART [NL97] allows RT processes to specify timing constraints, and it uses upcalls to notify the RT processes of constraint violations. It is still based on TS concept of proportional sharing, and offers no guarantees.
Reference: [MBJ87] <author> Marcel-Catalin Rosu Michael B. Jones, Daniela Rosu. </author> <title> CPU and Time Constraints: Efficient, Predictable Scheduling of Independent Activities. </title> <booktitle> In Proceedings of the 16th ACM Symposium on Operating Systems Principles (SOSP '97), </booktitle> <month> October </month> <year> 1987. </year>
Reference-contexts: It is still based on TS concept of proportional sharing, and offers no guarantees. The real time upcall [GP96] contains an event handler that is registered with the kernel and it is invoked for a specified execution time periodically. The Riato system <ref> [MBJ87] </ref> also allows RT processes to specify timing constraints and continuous periodic reservations, and it provides guarantees to them.
Reference: [Mic94] <author> Sun Microsystems. </author> <title> Solaris 2.5 manual AnswerBook. Sun Microsystems, </title> <publisher> Inc., </publisher> <year> 1994. </year>
Reference-contexts: reservations with guarantees, it is based on the rate monotonic scheduling algorithm and the priority dispatch mechanism proposed by the URsched [KYO96]. 8.3 Memory The SUN Solaris Operating System provides a set of system calls that allow a process to lock certain regions of its address space in physical memory <ref> [Mic94] </ref>. The mlock (addr, len), munlock (addr, len) system calls lock or unlock for the address space region [addr ~ addr+len]. The mlockall (), munlockall () locks or unlocks all the segments in the address space in physical memory.
Reference: [MIS96] <author> A. Mehra, A. Indiresan, and K. Shin. </author> <title> Structuring Communication Software for Quality-of-Service Guarantees. </title> <booktitle> In Proc. of 17th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: OMEGA consists of the QoS Broker, end-point QoS management entity for handling QoS at the edges of the network, and end-to-end real-time communication protocols using resources according to the deal negotiated by the broker [NS95a] 12 . The Real Time Channel <ref> [MIS96] </ref> is another novel approach in providing a communication subsystem with QoS guarantees. It implements an UDP-like transport protocol using the x kernel on the Motorola 68040 chip. Each RT channel is served by a periodic RT thread (called channel handler) which runs its protocol stack.
Reference: [MT94] <author> C. W. Mercer and S. Savage H. Tokuda. </author> <title> Processor Capacity Reserves: Operating System Support for Multimedia Applications. </title> <booktitle> In IEEE International Conference on Multimedia Computing and Systems, </booktitle> <month> May </month> <year> 1994. </year> <month> 34 </month>
Reference-contexts: When no RT processes exists, the TS processes with dynamic priorities execute using the fair time sharing scheduler of UNIX. This provides a simple mechanism to do RT scheduling in UNIX. It also has many desirable properties which other approaches such as the processor capacity reserves <ref> [MT94] </ref> do not provide: (1) It requires no modification to the existing UNIX/POSIX.4 kernels. <p> The RT Mach <ref> [MT94] </ref> implements the Processor Capacity Reserves abstraction for the RT threads, it contains a reservation mechanism and provides guarantees. A recent [LRM96] version supports adaptation in the form of dynamic quality and policies. The Adaptive Rate-Controlled Scheduler [YL96] is based on a modification of the virtual clock (VC) algorithm.
Reference: [Nah95] <author> K. Nahrstedt. </author> <title> An Architecture for End-to-End Quality of Service Provision and its Experimental Vali--dation. </title> <type> PhD thesis, </type> <institution> University of Pennsylvania, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Examples are ST-II [Top90], Tenet Protocol Suite [BFM + 96, BM91], Lancaster Transport Subsystem [CCH93, Cam96], Heidelberg Transport Subsystem [DHH + 93, DHVW93, DHH94, VHN92], Native ATM Protocol Stack [KS95], User Space TCP implementation [GP96], OMEGA architecture <ref> [Nah95] </ref>, and QoS architecture for Internet Integrated Services [BKMS98].
Reference: [Nar97] <author> Srinivas Narayan. </author> <title> Multimedia Efficient and Qos-Aware Transport Subsystem for ATM Networks. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> August </month> <year> 1997. </year>
Reference-contexts: The connection setup request to the communication server is initiated from the RT client (application). The connection setup protocol is shown in the Figure 8 and includes admission and negotiation services at each node (see <ref> [Nar97] </ref> for details). The communication broker holds a table with connections and reserved/accepted QoS parameters. The number of supported connections at the end system is bounded by the available CPU and network bandwidth. Once the connections are admitted, the CPU server takes over the connection scheduling.
Reference: [NHK96] <author> K. Nahrstedt, A. Hossain, and S. Kang. </author> <title> A Probe-based Algorithm for QoS Specification and Adaptation. </title> <booktitle> In Proceedings of 4th IFIP Workshop on Quality of Service, </booktitle> <pages> pages 89-100, </pages> <address> Paris, France, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: Note that in order for the resource broker to perform admission control, it must have the knowledge about the resource amount requested (e.g., processing time of a process/thread/task). If the client does not know the request amount, then it can acquire this information through the probing service <ref> [NHK96] </ref> done at the beginning of the application negotiation phase. This service determines statistical average of the requested resource amount and stores it in a QoS profile. The client relies and provides these values to the resource broker for admission control.
Reference: [NL97] <author> J. Nieh and M.S. Lam. </author> <title> SMART UNIX SVR4 Support for Multimedia Applications. </title> <booktitle> In Proceedings of the IEEE International Conference on Multimedia Computing and Systems, </booktitle> <address> Ottawa, Canada, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: RT or Best-Effort classes. Each class is designed a suitable scheduler to meet the class, and the classes are scheduled by the Start-time Fair Queuing algorithm. Similar concept can be found in [LS96] which applies it further to a hard RT system in open system environment. SMART <ref> [NL97] </ref> allows RT processes to specify timing constraints, and it uses upcalls to notify the RT processes of constraint violations. It is still based on TS concept of proportional sharing, and offers no guarantees.
Reference: [NS95a] <author> K. Nahrstedt and J. M. Smith. </author> <title> The QoS Broker. </title> <journal> IEEE Multimedia, </journal> <volume> 2(1) </volume> <pages> 53-67, </pages> <month> Spring </month> <year> 1995. </year>
Reference-contexts: Due to the limit on the length of this paper, we will omit a detailed description of this interface and refer the reader to our papers <ref> [NS95a, NS96b, KN97] </ref>. 9 In summary, the QoS broker provides an integrated and automated translation when accessing QoS-aware resource management. Our final goal is to make the QoS broker together with the underlying QualMan CORBA-compliant. <p> OMEGA consists of the QoS Broker, end-point QoS management entity for handling QoS at the edges of the network, and end-to-end real-time communication protocols using resources according to the deal negotiated by the broker <ref> [NS95a] </ref> 12 . The Real Time Channel [MIS96] is another novel approach in providing a communication subsystem with QoS guarantees. It implements an UDP-like transport protocol using the x kernel on the Motorola 68040 chip.
Reference: [NS95b] <author> K. Nahrstedt and R. Steinmetz. </author> <title> Resource management in networked multimedia systems. </title> <booktitle> IEEE COMPUTER, </booktitle> <pages> pages 52-63, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: They can be classified from different aspects. One aspect 5 we are considering is according to the layered multimedia communication architecture which consists of four main layers: users, application, system, and network layers <ref> [NS95b] </ref>. If we assume this type of end-point layering, then we can separate QoS into perceptual QoS (e.g., TV quality of video), application QoS (e.g., 20 frames per second video), system QoS (e.g., 50 ms period cycle) and network QoS (e.g., 16 Mbps bandwidth) classes.
Reference: [NS96a] <author> K. Nahrstedt and J. Smith. </author> <title> End-Point Resource Admission Control for Remote Control Multimedia Applications. </title> <booktitle> In IEEE Multimedia Systems, </booktitle> <address> Hiroshima, Japan, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: To achieve this goal, we utilize and build on our experience, knowledge and lessons learned during the design and experiments with the end-point OMEGA architecture and QoS Brokerage <ref> [NS96a, NS96b] </ref>. OMEGA architecture consisted of the QoS Broker, a centralized end-point entity for handling QoS at the edges of the network, and end-to-end communication protocols using resources negotiated by the broker.
Reference: [NS96b] <author> K. Nahrstedt and J. M. Smith. </author> <title> Design, Implementation and Experiences of the OMEGA End-Point Architecture. </title> <journal> IEEE JSAC, Special Issue on Distributed Multimedia Systems and Technology, </journal> <volume> 14(7) </volume> <pages> 1263-1279, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: To achieve this goal, we utilize and build on our experience, knowledge and lessons learned during the design and experiments with the end-point OMEGA architecture and QoS Brokerage <ref> [NS96a, NS96b] </ref>. OMEGA architecture consisted of the QoS Broker, a centralized end-point entity for handling QoS at the edges of the network, and end-to-end communication protocols using resources negotiated by the broker. <p> This classification allows each layer to specify its own quality parameters. However, this classification also requires translations at the boundaries between individual layers <ref> [NS96b] </ref>. Some examples of application and system QoS parameters for MPEG-compressed video streams are shown in Table 1. <p> Due to the limit on the length of this paper, we will omit a detailed description of this interface and refer the reader to our papers <ref> [NS95a, NS96b, KN97] </ref>. 9 In summary, the QoS broker provides an integrated and automated translation when accessing QoS-aware resource management. Our final goal is to make the QoS broker together with the underlying QualMan CORBA-compliant. <p> Figure 15 (b) shows the synchronization skew with cross traffic. 30 8 Related Work 8.1 QoS Framework The current existing QoS systems either allow to access and control (1) network QoS such as the Lancaster QoS system [CCH93], or OMEGA end-point system <ref> [NS96b] </ref>, or (2) CPU QoS parameters such as Nemesis [LMB + 96], Real-Time Mach `reserve' [LRM96]. 8.2 CPU Scheduling The area of accommodating scheduling of soft RT applications on the current UNIX platforms was addressed by several groups. <p> The changes to support upcalls were done in kernel which again differs from our objective for loadable communication server. Similarly to native ATM protocol stack, we applied their lessons learned to our protocol functions to optimize our performance. The OMEGA architecture <ref> [NS96b] </ref> is an end-point architecture which extends network QoS services towards the applications. OMEGA consists of the QoS Broker, end-point QoS management entity for handling QoS at the edges of the network, and end-to-end real-time communication protocols using resources according to the deal negotiated by the broker [NS95a] 12 .
Reference: [PH96] <author> D. Patterson and H. Hennessy. </author> <title> Computer Architecture: a Qualitative Approach. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1996. </year>
Reference-contexts: The penalty for a cache miss (2nd level) is in the range of 30-200 clock cycles (100s ns) <ref> [PH96] </ref>. As long as the cache miss ratio falls into a consistent range throughout a process execution, it has little impact on the on-time performance of the soft RT processes. Therefore, we do not provide any cache management or guarantee. <p> Therefore, we do not provide any cache management or guarantee. However, the penalty for a virtual memory (physical memory) miss is in the range of 700,000-6,000,000 clock cycles (10s of ms) <ref> [PH96] </ref>. For a software video decoder/encoder running at 30 frames per second (or 33 ms per frame), a few virtual memory misses might lead to the loss of several frames. In UNIX, each process has its own virtual address space.
Reference: [SG94] <author> A. Silberschatz and P.B. Galvin. </author> <title> Operating System Concepts. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: The resource reservation coordination needs to coordinate the reservation of resources so that deadlock can be avoided (apply Banker's algorithm <ref> [SG94] </ref> to request and reservation edges) or it can be detected and resolved.
Reference: [SN95] <author> R. Steinmetz and K. Nahrstedt. Multimedia:Computing, </author> <title> Communications, and Applications. </title> <publisher> Prentice Hall, Inc., </publisher> <year> 1995. </year>
Reference-contexts: The memory server starts with 5M B serving the audio/video client processes. Figure 15 (a) illustrates skew measurements at the client site. The result shows that the skew is not only in the desirable range of lip synchronization (80; 80) ms <ref> [SN95] </ref>, but most (99:3%) of the skew results are in the more limited range (10; 10) ms with an average skew of 3:96ms and standard deviation of 0:003ms.
Reference: [Sys97] <institution> Lynx Real-Time Systems. </institution> <month> LynxOS, </month> <title> Hard Real-Time OS Features and Capabilities. </title> <address> http://www.Lynx.com/products/ds lynxos.html, </address> <year> 1997. </year>
Reference-contexts: The mlockall (), munlockall () locks or unlocks all the segments in the address space in physical memory. The plock (op) system call locks or unlocks the text or data segments in memory. Lynx Operating System <ref> [Sys97] </ref> supports the priority threshold in its Demand-Paged Virtual Memory management.
Reference: [Top90] <author> C. Topolocic. </author> <title> Experimental Internet Stream Protocol, Version 2 (ST II). Internet Network Working Group, </title> <type> RFC 1190, </type> <month> October </month> <year> 1990. </year>
Reference-contexts: Examples are ST-II <ref> [Top90] </ref>, Tenet Protocol Suite [BFM + 96, BM91], Lancaster Transport Subsystem [CCH93, Cam96], Heidelberg Transport Subsystem [DHH + 93, DHVW93, DHH94, VHN92], Native ATM Protocol Stack [KS95], User Space TCP implementation [GP96], OMEGA architecture [Nah95], and QoS architecture for Internet Integrated Services [BKMS98].
Reference: [VHN92] <author> C. Vogt, R. G. Herrtwich, and R. Nagarajan. HeiRAT: </author> <title> The Heidelberg Resource Administration Technique, Design Philosophy and Goals. </title> <booktitle> In Proceedings of Conference on Communication in Distributed Systems, </booktitle> <address> Munchen,Germany, </address> <year> 1992. </year> <note> Also published in Informatik aktuel, Springer. </note>
Reference-contexts: Examples are ST-II [Top90], Tenet Protocol Suite [BFM + 96, BM91], Lancaster Transport Subsystem [CCH93, Cam96], Heidelberg Transport Subsystem <ref> [DHH + 93, DHVW93, DHH94, VHN92] </ref>, Native ATM Protocol Stack [KS95], User Space TCP implementation [GP96], OMEGA architecture [Nah95], and QoS architecture for Internet Integrated Services [BKMS98].
Reference: [YL96] <author> D. Yau and S.S. Lam. </author> <title> Adaptive Rate-controlled Scheduling for Multimedia Applications. </title> <booktitle> In ACM Multimedia Conference'96, </booktitle> <address> Boston, MA, </address> <month> November </month> <year> 1996. </year> <month> 35 </month>
Reference-contexts: The RT Mach [MT94] implements the Processor Capacity Reserves abstraction for the RT threads, it contains a reservation mechanism and provides guarantees. A recent [LRM96] version supports adaptation in the form of dynamic quality and policies. The Adaptive Rate-Controlled Scheduler <ref> [YL96] </ref> is based on a modification of the virtual clock (VC) algorithm. Each RT process specifies a reserve rate used in the VC algorithm. The scheduler provides rate adaptation that gradually adjusts the reserve rate of the RT process according to its usage rate.
References-found: 39

