URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1190/CS-TR-93-1190.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1190/
Root-URL: http://www.cs.wisc.edu
Email: fludwig,tiwarig@cs.wisc.edu  
Title: The Power of Choice in Scheduling Parallel Tasks  
Author: Walter Ludwig Prasoon Tiwari 
Date: November 22, 1993  
Address: Madison WI 53706  
Affiliation: Computer Science Department University of Wisconsin-Madison  
Abstract: A malleable parallel task is one that can be executed on any number of processors, with its execution time being a function of the number of processors allotted to it. A nonmalleable parallel task is one that requires a specific number of processors. Given n independent parallel tasks and m identical processors, we consider the problem of scheduling these tasks to minimize average completion time. Even though this is a classical scheduling problem, the first results in this direction were obtained only recently by Turek, Schwiegelshohn, Wolf, and Yu [Proceedings of the Fifth SIAM Symposium on Discrete Algorithms, 1994]. They presented an algorithm for scheduling nonmalleable parallel tasks with an approximation factor of 32. We give an algorithm for scheduling malleable tasks that has an approximation factor of 2, under the assumption that for each task, work is a nondecreasing function of the number of processors allotted to the task. Our algorithm and analysis incorporate an improved lower bound on average completion time for the nonmalleable problem. We also show that Turek et al.'s algorithm for the nonmalleable problem can be extended to the malleable problem, while preserving the approximation factor. The resulting algorithm does not require any assumptions on the task execution times. The running time of our malleable schedulers is dominated by the cost of determining a minimum weight perfect matching in a bipartite graph. fl Partially supported by National Science Foundation grant CCR-9024516.
Abstract-found: 1
Intro-found: 1
Reference: [AKM + 87] <author> A. Aggarwal, M. Klawe, S. Moran, P. Shor, and R. Wilber. </author> <title> Geometric applica-20 tions of a matrix-searching algorithm. </title> <journal> Algorithmica, </journal> <volume> 2 </volume> <pages> 209-233, </pages> <year> 1987. </year>
Reference-contexts: Under the nondecreasing work assumption, computing the edge weights involves finding the row maxima of certain totally monotone matrices. This is accomplished using the fast matrix-searching algorithm due to Aggarwal et al. <ref> [AKM + 87] </ref>. The running time of ALLOT in this case is O (n 3 + mn). Otherwise, its running time is O (n 3 + mn 2 ). <p> Observe that ` i (k) is the maximum entry in row k of X. Aggarwal et al. <ref> [AKM + 87] </ref> have shown that the row maxima of a totally monotone matrix can be found by querying 15 O (n + m) entries of the matrix.
Reference: [BB90] <author> K. Belkhale and P. Banerjee. </author> <title> Approximate algorithms for the partitionable independent task scheduling problem. </title> <booktitle> In Proceedings of the 1990 International Conference on Parallel Processing, </booktitle> <volume> vol. I, </volume> <pages> pages 72-75, </pages> <year> 1990. </year>
Reference-contexts: Furthermore, several authors have investigated scheduling malleable parallel tasks, and all of them have been concerned about makespan, and not about average completion time. (See, for example, <ref> [TWY92, LT94, BB90, DL89, FKST93, CYW92] </ref>.) Our main result is an algorithm for MACT with an approximation factor of 2, under the assumption that for each task, the work required is nondecreasing with the number of processors allotted to it (Theorem 5). (The work required to complete a malleable task is <p> approximation factors for nonmalleable problems carry over to their malleable counterparts provided that the lower bound used to prove the approximation factor of the nonmalleable algorithm is of a 19 makespan ACT WACT nonmalleable 2 [GG75] 32 [TSWY94] ? malleable 2 [TWY92, LT94] 32 fl ? malleable, nondec. work 2 <ref> [BB90] </ref> 2 fl 2 fl fl this paper Table 1: The best known approximation factors for scheduling parallel tasks certain form. This follows from Theorem 3 in the case of minimizing average completion time, and from previous results [TWY92, LT94] in the case of minimizing makespan.
Reference: [BLK83] <author> J. Blazewicz, J. K. Lenstra, and A. H. G. Rinnooy Kan. </author> <title> Scheduling subject to resource constraints: Classification and complexity. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 5 </volume> <pages> 11-24, </pages> <year> 1983. </year>
Reference-contexts: The nonmalleable average completion time problem (NACT) is the same, except that the number of processors required for each task is specified as part of the problem instance. MACT is a generalization of NACT, and NACT is NP-complete in the strong sense <ref> [BLK83] </ref>. Therefore, we will consider allot approximation algorithms for these problems. We will evaluate these algorithms in terms of approximation factor and running time. Note that we use the term `running time' to refer to the time required by an algorithm to construct a schedule.
Reference: [CYW92] <author> M. Chen, P. Yu, and K. Wu. </author> <title> Scheduling and processor allocation for the execution of multi-join queries in a multiprocessor system. </title> <booktitle> In Proceedings of the 8th International Conference on Data Engineering, </booktitle> <pages> pages 58-67, </pages> <year> 1992. </year>
Reference-contexts: Furthermore, several authors have investigated scheduling malleable parallel tasks, and all of them have been concerned about makespan, and not about average completion time. (See, for example, <ref> [TWY92, LT94, BB90, DL89, FKST93, CYW92] </ref>.) Our main result is an algorithm for MACT with an approximation factor of 2, under the assumption that for each task, the work required is nondecreasing with the number of processors allotted to it (Theorem 5). (The work required to complete a malleable task is
Reference: [DL89] <author> J. Du and J. Leung. </author> <title> Complexity of scheduling parallel task systems. </title> <journal> SIAM Journal on Discrete Mathematics, </journal> <volume> 2(4) </volume> <pages> 473-487, </pages> <year> 1989. </year>
Reference-contexts: Furthermore, several authors have investigated scheduling malleable parallel tasks, and all of them have been concerned about makespan, and not about average completion time. (See, for example, <ref> [TWY92, LT94, BB90, DL89, FKST93, CYW92] </ref>.) Our main result is an algorithm for MACT with an approximation factor of 2, under the assumption that for each task, the work required is nondecreasing with the number of processors allotted to it (Theorem 5). (The work required to complete a malleable task is
Reference: [EEI64] <author> W. L. Eastman, S. Even, and I. M. Isaacs. </author> <title> Bounds for the optimal scheduling of n jobs on m processors. </title> <journal> Management Science, </journal> <volume> 11(2) </volume> <pages> 268-279, </pages> <month> November </month> <year> 1964. </year>
Reference-contexts: The third result is a new lower bound for NACT, on which the previous result depends (Theorem 1). Our bound can be viewed as an extension of the bound due to Eastman, Even, and Isaacs <ref> [EEI64] </ref> for weighted single-processor tasks. It is an improvement of the "squashed area" bound used by Turek et al. [TSWY94] in the analysis of their NACT algorithm. 2 This work was motivated by scheduling problems arising from the Condor distributed batch system [LLM88, LL90].
Reference: [FKST93] <author> A. Feldmann, M.-Y. Kao, J. Sgall, and S.-H. Teng. </author> <title> Optimal online scheduling of parallel jobs with dependencies. </title> <booktitle> In Proceedings of the Twenty-Fifth Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 642-651, </pages> <year> 1993. </year>
Reference-contexts: Furthermore, several authors have investigated scheduling malleable parallel tasks, and all of them have been concerned about makespan, and not about average completion time. (See, for example, <ref> [TWY92, LT94, BB90, DL89, FKST93, CYW92] </ref>.) Our main result is an algorithm for MACT with an approximation factor of 2, under the assumption that for each task, the work required is nondecreasing with the number of processors allotted to it (Theorem 5). (The work required to complete a malleable task is <p> algorithm can be improved to O (n log 2 The second result gives an upper bound on approximation factor for NACT in terms of the maximum processor requirement over all the tasks: a lower maximum processor requirement results in a better upper bound (Theorem 2). (Feldmann, Kao, Sgall, and Teng <ref> [FKST93] </ref> applied this idea to the problem of scheduling parallel tasks on-line to minimize makespan.) In particular, if no task requires more than half of the processors, then an approximation factor of 2 can be achieved. <p> That is, the execution time of task T i is given by t i (j) = p i t i =j for any j 2 [p i ], and t i (j) = t i for j &gt; p i . This is known as virtualization <ref> [FKST93] </ref>. We call the problem of scheduling virtualizable tasks to minimize average completion time VACT. VACT is a special case of MACT with nondecreasing work. In VACT, allotting p i processors to each task minimizes the bound ff (p).
Reference: [GG75] <author> M. Garey and R. Graham. </author> <title> Bounds for multiprocessor scheduling with resource constraints. </title> <journal> SIAM Journal on Computing, </journal> <volume> 4(2) </volume> <pages> 187-200, </pages> <month> June </month> <year> 1975. </year>
Reference-contexts: Contrast this to the problem of scheduling parallel tasks to minimize total schedule length (or makespan), for which it has long been known that a simple list scheduling approach suffices to guarantee an approximation factor of 2 <ref> [GG75] </ref>. <p> In the other direction, improved approximation factors for nonmalleable problems carry over to their malleable counterparts provided that the lower bound used to prove the approximation factor of the nonmalleable algorithm is of a 19 makespan ACT WACT nonmalleable 2 <ref> [GG75] </ref> 32 [TSWY94] ? malleable 2 [TWY92, LT94] 32 fl ? malleable, nondec. work 2 [BB90] 2 fl 2 fl fl this paper Table 1: The best known approximation factors for scheduling parallel tasks certain form.
Reference: [Kuh55] <author> H. W. Kuhn. </author> <title> The Hungarian method for the assignment problem. </title> <journal> Naval Research Logistics Quarterly, </journal> <volume> 2 </volume> <pages> 83-97, </pages> <year> 1955. </year>
Reference-contexts: Then applying the NACT algorithm A gives the desired approximation factor. ALLOT consists primarily of constructing a weighted complete bipartite graph with 2n vertices, and then finding a minimum-weight perfect matching in G using the Hungarian method <ref> [Kuh55] </ref>. Under the nondecreasing work assumption, computing the edge weights involves finding the row maxima of certain totally monotone matrices. This is accomplished using the fast matrix-searching algorithm due to Aggarwal et al. [AKM + 87]. The running time of ALLOT in this case is O (n 3 + mn). <p> m + 1 j 2 , and therefore by the nondecreasing work assumption, w i (m + 1 j 1 ) w i (m + 1 j 2 ), contradicting (44). 2 A minimum-weight matching in G can be found in O (n 3 ) steps using the Hungarian method <ref> [Kuh55] </ref>, which is due to Kuhn. Thus the total running time is O (n 3 + mn) under the nondecreasing work assumption, and O (n 3 + mn 2 ) otherwise.
Reference: [LL90] <author> M. J. Litzkow and M. Livny. </author> <title> Experience with the Condor distributed batch system. </title> <booktitle> In Proceedings of the IEEE Workshop on Experimental Distributed Systems, </booktitle> <year> 1990. </year>
Reference-contexts: It is an improvement of the "squashed area" bound used by Turek et al. [TSWY94] in the analysis of their NACT algorithm. 2 This work was motivated by scheduling problems arising from the Condor distributed batch system <ref> [LLM88, LL90] </ref>. Other problems arising in this context are discussed in Section 7. The rest of the paper is organized as follows. In Section 2, we give an overview of our results, stating the main theorems. In Section 3, we present a new lower bound for NACT. <p> As mentioned in Section 1, this work was motivated by the Condor distributed batch system. Condor is designed to make the best use of the computing power available in a workstation environment. However, under Condor <ref> [LLM88, LL90] </ref>, machines must be relinquished when their owners return to use them. Therefore, schedulers must be able to handle unexpected variations in the number of available processors. In the problems that we have considered, it is assumed that we have complete information on all the tasks.
Reference: [LLKS92] <author> E. Lawler, J. Lenstra, A. Rinnooy Kan, and D. Shmoys. </author> <title> Sequencing and scheduling: Algorithms and complexity. </title> <booktitle> In Handbook of Operations Research and Management Science, Volume IV: Production Planning and Inventory. </booktitle> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: Scheduling to minimize average completion time is well-studied in the case of tasks that each require a single processor, and many variations have been considered. (See <ref> [LLKS92] </ref> for a survey.) However, results for the natural extension from single-processor tasks to parallel tasks have been harder to come by.
Reference: [LLM88] <author> M. J. Litzkow, M. Livny, and M. W. </author> <title> Mutka. Condor|a hunter of idle workstations. </title> <booktitle> In 8th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 104-111, </pages> <year> 1988. </year> <month> 21 </month>
Reference-contexts: It is an improvement of the "squashed area" bound used by Turek et al. [TSWY94] in the analysis of their NACT algorithm. 2 This work was motivated by scheduling problems arising from the Condor distributed batch system <ref> [LLM88, LL90] </ref>. Other problems arising in this context are discussed in Section 7. The rest of the paper is organized as follows. In Section 2, we give an overview of our results, stating the main theorems. In Section 3, we present a new lower bound for NACT. <p> As mentioned in Section 1, this work was motivated by the Condor distributed batch system. Condor is designed to make the best use of the computing power available in a workstation environment. However, under Condor <ref> [LLM88, LL90] </ref>, machines must be relinquished when their owners return to use them. Therefore, schedulers must be able to handle unexpected variations in the number of available processors. In the problems that we have considered, it is assumed that we have complete information on all the tasks.
Reference: [LT94] <author> W. Ludwig and P. Tiwari. </author> <title> Scheduling malleable and nonmalleable parallel tasks. </title> <booktitle> To appear in Proceedings of the 5th SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1994. </year>
Reference-contexts: Furthermore, several authors have investigated scheduling malleable parallel tasks, and all of them have been concerned about makespan, and not about average completion time. (See, for example, <ref> [TWY92, LT94, BB90, DL89, FKST93, CYW92] </ref>.) Our main result is an algorithm for MACT with an approximation factor of 2, under the assumption that for each task, the work required is nondecreasing with the number of processors allotted to it (Theorem 5). (The work required to complete a malleable task is <p> Then an algorithm for the nonmalleable makespan problem is used in conjunction with each of the generated allotments, and the best of the O (mn) schedules is selected. The present authors <ref> [LT94] </ref> improved this result, demonstrating an algorithm with running time O (mn) that finds a single allotment that can be used in conjunction with an algorithm for the nonmalleable makespan problem, preserving the approximation factor of that algorithm. <p> In the other direction, improved approximation factors for nonmalleable problems carry over to their malleable counterparts provided that the lower bound used to prove the approximation factor of the nonmalleable algorithm is of a 19 makespan ACT WACT nonmalleable 2 [GG75] 32 [TSWY94] ? malleable 2 <ref> [TWY92, LT94] </ref> 32 fl ? malleable, nondec. work 2 [BB90] 2 fl 2 fl fl this paper Table 1: The best known approximation factors for scheduling parallel tasks certain form. This follows from Theorem 3 in the case of minimizing average completion time, and from previous results [TWY92, LT94] in the <p> ? malleable 2 <ref> [TWY92, LT94] </ref> 32 fl ? malleable, nondec. work 2 [BB90] 2 fl 2 fl fl this paper Table 1: The best known approximation factors for scheduling parallel tasks certain form. This follows from Theorem 3 in the case of minimizing average completion time, and from previous results [TWY92, LT94] in the case of minimizing makespan. Thus NACT and NWACT appear to be the best places to look for improved results. As mentioned in Section 1, this work was motivated by the Condor distributed batch system.
Reference: [TSWY94] <author> J. Turek, U. Schwiegelshohn, J. L. Wolf, and P. S. Yu. </author> <title> Scheduling parallel tasks to minimize average response time. </title> <booktitle> To appear in Proceedings of the 5th SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1994. </year>
Reference-contexts: It was only recently that Turek, Schwiegelshohn, Wolf, and Yu <ref> [TSWY94] </ref> demonstrated a NACT algorithm with an approximation factor of 32, the first proof of a constant approximation factor for NACT. <p> Our bound can be viewed as an extension of the bound due to Eastman, Even, and Isaacs [EEI64] for weighted single-processor tasks. It is an improvement of the "squashed area" bound used by Turek et al. <ref> [TSWY94] </ref> in the analysis of their NACT algorithm. 2 This work was motivated by scheduling problems arising from the Condor distributed batch system [LLM88, LL90]. Other problems arising in this context are discussed in Section 7. The rest of the paper is organized as follows. <p> Suppose that the tasks are ordered such that p i t i p i+1 t i+1 for all i 2 [n 1], where [n 1] denotes the set of integers f1; 2; : : :; n 1g. Let A = m i=1 Turek et al. <ref> [TSWY94] </ref> call this the "squashed area" bound, and they proved that it is a lower bound on C opt . This bound can be viewed in the following way. <p> requirement, but that has processor requirement m. (Then its execution time requirement is p i t i =m.) If these new tasks are scheduled in order of nondecreasing work, then the sum of their completion times is precisely A. 3 These two lower bounds are used by Turek et al. <ref> [TSWY94] </ref> to prove an approximation factor of 32 for their NACT algorithm. We present a new lower bound for NACT that dominates A, as stated in the following theorem. <p> are both lower bounds on C opt , for any 1 ; 2 0 such that 1 + 2 = 1, we have 1 A + 2 H C opt . (W is also a lower bound on C opt , but W A and W H.) Turek et al. <ref> [TSWY94] </ref> use the lower bound 1 2 A + 1 2 H to prove an approximation factor of 32 for their NACT algorithm, which has running time O (n log n). Therefore, we get the following result. <p> In the other direction, improved approximation factors for nonmalleable problems carry over to their malleable counterparts provided that the lower bound used to prove the approximation factor of the nonmalleable algorithm is of a 19 makespan ACT WACT nonmalleable 2 [GG75] 32 <ref> [TSWY94] </ref> ? malleable 2 [TWY92, LT94] 32 fl ? malleable, nondec. work 2 [BB90] 2 fl 2 fl fl this paper Table 1: The best known approximation factors for scheduling parallel tasks certain form.
Reference: [TWY92] <author> J. Turek, J. Wolf, and P. Yu. </author> <title> Approximate algorithms for scheduling paral-lelizable tasks. </title> <booktitle> In 4th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 323-332, </pages> <year> 1992. </year> <month> 22 </month>
Reference-contexts: Furthermore, several authors have investigated scheduling malleable parallel tasks, and all of them have been concerned about makespan, and not about average completion time. (See, for example, <ref> [TWY92, LT94, BB90, DL89, FKST93, CYW92] </ref>.) Our main result is an algorithm for MACT with an approximation factor of 2, under the assumption that for each task, the work required is nondecreasing with the number of processors allotted to it (Theorem 5). (The work required to complete a malleable task is <p> This MACT algorithm does not require any assumptions on the task execution times. Thus ALLOT can be used to construct a MACT algorithm with approximation factor 32. The two-step approach to malleable task scheduling was introduced by Turek, Wolf, and Yu <ref> [TWY92] </ref> for the problem of minimizing makespan. Their algorithm generates a set of at most mn allotments, one of which is the allotment of an optimal schedule (although it is not known which allotment). <p> In the other direction, improved approximation factors for nonmalleable problems carry over to their malleable counterparts provided that the lower bound used to prove the approximation factor of the nonmalleable algorithm is of a 19 makespan ACT WACT nonmalleable 2 [GG75] 32 [TSWY94] ? malleable 2 <ref> [TWY92, LT94] </ref> 32 fl ? malleable, nondec. work 2 [BB90] 2 fl 2 fl fl this paper Table 1: The best known approximation factors for scheduling parallel tasks certain form. This follows from Theorem 3 in the case of minimizing average completion time, and from previous results [TWY92, LT94] in the <p> ? malleable 2 <ref> [TWY92, LT94] </ref> 32 fl ? malleable, nondec. work 2 [BB90] 2 fl 2 fl fl this paper Table 1: The best known approximation factors for scheduling parallel tasks certain form. This follows from Theorem 3 in the case of minimizing average completion time, and from previous results [TWY92, LT94] in the case of minimizing makespan. Thus NACT and NWACT appear to be the best places to look for improved results. As mentioned in Section 1, this work was motivated by the Condor distributed batch system.
References-found: 15

