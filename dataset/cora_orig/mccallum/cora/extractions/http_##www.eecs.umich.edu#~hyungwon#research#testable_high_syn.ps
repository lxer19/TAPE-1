URL: http://www.eecs.umich.edu/~hyungwon/research/testable_high_syn.ps
Refering-URL: http://www.eecs.umich.edu/~hyungwon/
Root-URL: http://www.cs.umich.edu
Title: High-level Test Synthesis for Deterministic Partial Scan BIST  
Author: Supervisor: Prof. John P. Hayes Student: Hyungwon Kim 
Date: September 5, 1995  
Abstract: Summer Project 1995 Final Report: ABSTRACT A high-level synthesis method to optimize the chip area of data path including deterministic test pattern BIST technology is proposed. The target application is a partial scan method for sequential circuits which can be tested by BIST as well as external ATE with pre-generated deterministic test pattern obtained from combinational circuit ATPG instead of sequential circuit ATPG. While the proposed algorithm allocates registers, it minimizes the number of registers which have loops (including self-loops) formed by the register connection graph (RCG), merges registers which have loops into small number of registers which will be scan registers. It also considers the effect of the functionality and propagation delay of each operator on testability. It introduces the relaxed BALLAST method [R.Gupta90] to reduce the number of test patterns, which largely affects BIST area. The proposed method schedules tests for the allocated data path, so that the number of test patterns can be made much smaller than that of full scan method. In allocating registers to synthesize a more testable design, a clique partitioning method is used with integer linear programming. 
Abstract-found: 1
Intro-found: 1
Reference: [I.Para95 ] <author> Ishwar Parulkar, Sandeep Gupta and Melvin A. Breuer, </author> <title> Data Path Allocation for Synthesizing RTL Designs with Low BIST Area Overhead, </title> <booktitle> Proc. of 32nd DAC, </booktitle> <pages> pp. 395-400, </pages> <year> 1995 </year>
Reference: [S.Dey93 ] <author> Sujit Dey, M. Potkonjak, R. K. Roy, </author> <title> Exploiting Hardware Sharing in High-Level Synthesis for Partial Scan Optimization, </title> <booktitle> Proc. of ICCAD, </booktitle> <pages> pp. 20-25, </pages> <year> 1993 </year>
Reference-contexts: been a lot of research trying to increase fault coverage and to reduce test cost in high-level synthesis, but that work mostly concentrates on reducing either the number of self-loops for concurrent BIST [I.Paru95] [L.Avra91] [C.Papa91] or the number of non-self-loop and sequential depth for sequential partial scan methods [T.Lee93] <ref> [S.Dey93] </ref>, not both. Most concurrent BIST uses the full scan method whose area cost is relatively high and fault coverage is not acceptable for some hard-to-test circuit designs since it relies on random test patterns.
Reference: [T.Lee93 ] <author> Tien-Chien Lee, N. K. Jha, and W. H. Wolf, </author> <title> Behavioral Synthesis of Highly Testable Data Paths under the Non-Scan and Partial Scan Environments, </title> <booktitle> Proc. of 30th DAC, </booktitle> <pages> pp. 292-297, </pages> <year> 1993 </year>
Reference-contexts: Although scheduling can change testability of the final data path, since scheduling stage affects the life time of each variables in CDFG, it is impossible to optimize register allocation together with CDFG scheduling for testability <ref> [T.Lee93] </ref>. So our method takes a scheduled CDFG from an existing scheduler as an input. <p> has been a lot of research trying to increase fault coverage and to reduce test cost in high-level synthesis, but that work mostly concentrates on reducing either the number of self-loops for concurrent BIST [I.Paru95] [L.Avra91] [C.Papa91] or the number of non-self-loop and sequential depth for sequential partial scan methods <ref> [T.Lee93] </ref> [S.Dey93], not both. Most concurrent BIST uses the full scan method whose area cost is relatively high and fault coverage is not acceptable for some hard-to-test circuit designs since it relies on random test patterns.
Reference: [S.Chak94 ] <author> Srimat T. Chakradhar, A. Balakrishnan, V. D. Agrawal, </author> <title> An Exact Algorithm for Selecting Partial Scan Flip-flops, </title> <booktitle> Proc. of 31st DAC, </booktitle> <pages> pp. 81-86, </pages> <year> 1994 </year>
Reference-contexts: The MFVS-finding problem can be solved by an exact algorithm <ref> [S.Chak94] </ref>, the clique generation problem can be solved by fast heuristic method [C.Tseng86] [P.Paul89b] or the exhaustive algorithm, and the last problem, clique covering with weight, can be solved by ILP proposed in this report.
Reference: [R.Gupta90 ] <author> Rajesh Gupta, R. Gupta, and M. A. Breuer, </author> <title> The BALLAST Methodology for Structured Partial Scan Design, </title> <journal> IEEE Trans. on Computers, </journal> <volume> Vol. 39, No. 4, </volume> <pages> pp. 538-544, </pages> <month> April </month> <year> 1990 </year>
Reference: [K.Cheng90 ] <author> Kwang-Ting Cheng and Vishwani D. Agrawal, </author> <title> A Partial Scan Method for Sequential Circuits with Feedback, </title> <journal> IEEE Trans. on Computers, </journal> <volume> Vol. 39, No. 4, </volume> <pages> pp. 544-548, </pages> <month> April </month> <year> 1990 </year>
Reference: [L.Avra91 ] <author> LaNae Avra, </author> <title> Allocation and Assignment in High-level Synthesis for Self-Testable Data Paths, </title> <booktitle> International Test Conf. </booktitle> <pages> pp. 463-472, </pages> <year> 1991 </year>
Reference-contexts: There has been a lot of research trying to increase fault coverage and to reduce test cost in high-level synthesis, but that work mostly concentrates on reducing either the number of self-loops for concurrent BIST [I.Paru95] <ref> [L.Avra91] </ref> [C.Papa91] or the number of non-self-loop and sequential depth for sequential partial scan methods [T.Lee93] [S.Dey93], not both.
Reference: [C.Papa91 ] <author> Christos A. Papachristou, S. Chiu, and H. Harmanani, </author> <title> A Data Path Synthesis Method for Self-Testable Design, </title> <booktitle> Proc. of 28th DAC, </booktitle> <pages> pp. 378-384, </pages> <year> 1991 </year> <month> 22 </month>
Reference-contexts: There has been a lot of research trying to increase fault coverage and to reduce test cost in high-level synthesis, but that work mostly concentrates on reducing either the number of self-loops for concurrent BIST [I.Paru95] [L.Avra91] <ref> [C.Papa91] </ref> or the number of non-self-loop and sequential depth for sequential partial scan methods [T.Lee93] [S.Dey93], not both. Most concurrent BIST uses the full scan method whose area cost is relatively high and fault coverage is not acceptable for some hard-to-test circuit designs since it relies on random test patterns.
Reference: [C.Tseng86 ] <author> Chia-Jeng Tseng and D. P. Siewiorek, </author> <title> Automated Synthesis of Data Path in Digital Systems, </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. CAD-5, No. 3, </volume> <pages> pp. 379-395, </pages> <month> July </month> <year> 1986 </year>
Reference-contexts: 1 Introduction High-level synthesis consists of scheduling a control data flow graph (CDFG) like Fig.1 (a), module and register allocation, and module and register binding <ref> [C.Tseng86] </ref> 1 [P.Paul89a] [P.Paul89b] [C.Hwang90]. If testability is not considered in the early design stage, post-design modification for testability will be much more costly. To design a more testable data path in high-level design stage, a novel register allocation method is proposed. <p> The MFVS-finding problem can be solved by an exact algorithm [S.Chak94], the clique generation problem can be solved by fast heuristic method <ref> [C.Tseng86] </ref> [P.Paul89b] or the exhaustive algorithm, and the last problem, clique covering with weight, can be solved by ILP proposed in this report.
Reference: [P.Paul89a ] <author> Pierre G. Paulin and John P. Knight, </author> <title> Force-Directed Scheduling for the Behavioral Synthesis of ASIC's, </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. 8, No. 6, </volume> <pages> pp. 661-679, </pages> <month> June </month> <year> 1989 </year>
Reference-contexts: 1 Introduction High-level synthesis consists of scheduling a control data flow graph (CDFG) like Fig.1 (a), module and register allocation, and module and register binding [C.Tseng86] 1 <ref> [P.Paul89a] </ref> [P.Paul89b] [C.Hwang90]. If testability is not considered in the early design stage, post-design modification for testability will be much more costly. To design a more testable data path in high-level design stage, a novel register allocation method is proposed. <p> Fig.9 (a) is an CDFG example of Paulin and Fig.9 (b) is the life-time of variables <ref> [P.Paul89a] </ref>. Fig.10 shows the variable connectivity graph, in which all variables are considered to be non-scan variables. In this graph we can easily find the minimum feedback vertex set (MFVS) by inspection. V 3 and V 11 are the only variables which have self-loops, so they should be scan variables.
Reference: [P.Paul89b ] <author> Pierre G. Paulin and John P. Knight, </author> <title> Scheduling and Binding Algorithms for High-Level Synthesis, </title> <booktitle> Proc. 26th DAC, </booktitle> <pages> pp. 1-6, </pages> <year> 1989 </year>
Reference-contexts: 1 Introduction High-level synthesis consists of scheduling a control data flow graph (CDFG) like Fig.1 (a), module and register allocation, and module and register binding [C.Tseng86] 1 [P.Paul89a] <ref> [P.Paul89b] </ref> [C.Hwang90]. If testability is not considered in the early design stage, post-design modification for testability will be much more costly. To design a more testable data path in high-level design stage, a novel register allocation method is proposed. <p> The MFVS-finding problem can be solved by an exact algorithm [S.Chak94], the clique generation problem can be solved by fast heuristic method [C.Tseng86] <ref> [P.Paul89b] </ref> or the exhaustive algorithm, and the last problem, clique covering with weight, can be solved by ILP proposed in this report.
Reference: [C.Hwang90 ] <author> Cheng-Tsung Hwang, Y.-C. Hsu, and Y.-L. Lin, </author> <title> Optimum and Heuristic Data Path Scheduling Under Resource Constraints, </title> <booktitle> Proc. of 27th DAC, </booktitle> <address> pp.65-70, </address> <year> 1990 </year>
Reference-contexts: 1 Introduction High-level synthesis consists of scheduling a control data flow graph (CDFG) like Fig.1 (a), module and register allocation, and module and register binding [C.Tseng86] 1 [P.Paul89a] [P.Paul89b] <ref> [C.Hwang90] </ref>. If testability is not considered in the early design stage, post-design modification for testability will be much more costly. To design a more testable data path in high-level design stage, a novel register allocation method is proposed.
References-found: 12

