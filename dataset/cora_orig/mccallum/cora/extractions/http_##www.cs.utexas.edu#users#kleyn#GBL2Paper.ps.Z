URL: http://www.cs.utexas.edu/users/kleyn/GBL2Paper.ps.Z
Refering-URL: 
Root-URL: 
Email: kleyn@cs.utexas.edu browne@cs.utexas.edu  
Title: A High Level Language for Specifying Graph Based Languages and their Programming Environments (Draft)  
Author: M.F. Kleyn and J.C. Browne 
Address: 930912**  
Affiliation: **inc fixes of 920922** **inc fixes of  
Date: December 17, 1994 1  
Note: GBLE Draft  1.0 Introduction  
Abstract: This paper describes a high level language for specifying programming environments for programming languages that are based on directed attributed graphs. The high level language allows the specifier to describe views of portions of a program written in such a graph-based language, the editing operations used to create the program, animations of the execution of the program, and sufficient detail of the execution semantics to support the animations. We demonstrate the use of the specification language with two simple examples of graph-based languages: Petri Nets, and an extension of Petri Nets which includes the ability to nest nets hierarchically. We further describe how to generate the programming environment for graph-based languages from descriptions made in the specification language. This work is the basis for developing a compiler for generating programming environments for graph-based languages automatically. We wish to remedy the add-hoc re-inventing of such systems by providing the high-level domain-specific set of abstractions for specifying them. The specification language is based on using a grammar to describe the components of the graph-based language and using a first-order logic based language to describe state As the use of graphical user interfaces (GUIs) becomes more prevalent, so is the use of graphical notations for writing programs. Though graphical programming systems vary widely, a great many, if not most, are based on the manipulation of an underlying graph structure [EGF91] 1 . This paper proposes a means of formally describing such systems. We collectively term these programming languages Graph-Based Languages (GBLs), and refer to the languages together with their programming environment as Graph-Based Language and Environments (GBLEs). In GBLs, programs are defined by interconnecting different types of nodes and links, and by filling in values of attributes associated with the nodes and links in the graph. The class of graph used is usually a directed graph, but it may be more general, such as a multigraph or a hyper-graph. GBLs are in very widespread use, across many application domains. The following sample of existing GBLs shows the wide variety of domains in which they are used: 1. We thus make a strong distinction between the a graphical object - something that is displayed that does not involve changes in editing, execution, and animation.
Abstract-found: 1
Intro-found: 1
Reference: [Adi88] <author> Ashok Adiga. </author> <title> Performance Modelling of Parallel Computations. </title> <type> PhD thesis, </type> <institution> Dept. of Comp. Sci., Univ. of Texas at Austin, </institution> <year> 1988. </year>
Reference: [BA88] <author> J.C. Browne and Ashok Adiga. </author> <title> Performance Evaluation of Supercomputers, chapter -Graph Structured Performance Models-. </title> <publisher> Elsevier, </publisher> <year> 1988. </year>
Reference: [Bar86] <author> P. S. Barth. </author> <title> An object-oriented approach to graphical interfaces. </title> <journal> ACM Transactions on Graphics Special Issue on User Interface Software, </journal> <volume> 5(2):142172, </volume> <month> April </month> <year> 1986. </year>
Reference: [BCL90] <author> Duane Bailey, Janice Cuny, and Craig Loomis. Paragraph: </author> <title> Graph editor support for parallel programming environments. </title> <journal> International Journal of Parallel Programming, </journal> <note> 19(2):75110, 1990. </note> + <author> 91] A. Beguelin, J. Dongarra, G. Geist, R. Manchek, and V. Sunderam. </author> <title> Graphical development tools for network-based concurrent supercomputing. </title> <booktitle> In Supercomputing 91, </booktitle> <pages> pages 435444, </pages> <month> Nov </month> <year> 1991. </year>
Reference: [BN91] <author> A. Beguelin and G. Nutt. </author> <title> Collected papers on Phred. </title> <type> Tech Report CU-CS-511-91, </type> <institution> Dept. Comp. Sci. Univ. Colorado at Boulder, </institution> <month> January </month> <year> 1991. </year>
Reference: [Bro85] <author> J. C. Browne. </author> <title> Formulation and programming of parallel computers: A unified approach. </title> <booktitle> In Proc. Intl. Conf. Par. Proc., </booktitle> <pages> pages 624631, </pages> <year> 1985. </year>
Reference: [Bro88] <author> Marc H. Brown. </author> <title> Algorithm Animation. ACM Doctoral Dissertation Award. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass, </address> <year> 1988. </year>
Reference: [Che91] <author> D. Cheng. </author> <title> A survey of parallel programming tools. </title> <type> Technical Report RND-91-005, </type> <institution> NASA Ames, </institution> <month> May </month> <year> 1991. </year>
Reference: [CL88] <author> C. Chow and S. Lam. Prospec: </author> <title> An interactive programming environment for designing and verifying communication protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(3):327338, </volume> <month> March </month> <year> 1988. </year>
Reference: [CS90] <author> L. Chang and B. Smith. </author> <title> Classification and evaluation of parallel programming tools. </title> <institution> Tech Rept CS90-22, Dept. of Comp. Sci. Univ. of New Mexico, </institution> <year> 1990. </year>
Reference: [Dye89] <author> R. Dye. </author> <title> Labview : A visual data-flow programming language and environment. </title> <type> Masters thesis, </type> <institution> Dept. of Elec. and Comp. Eng. University of Texas at Austin, </institution> <year> 1989. </year>
Reference: [ea85] <author> D. Notkin et al. </author> <title> The Gandalf project. </title> <journal> The Journal of Systems and Software, </journal> <year> 1985. </year>
Reference: [ea91] <editor> J. Werth et al. </editor> <title> The interaction of the formal and practical in parallel programming environment development: Code. </title> <type> Tech. Rep. </type> <institution> TR-91-09, Dept. Comp. Sci., Univ. Texas at Austin, </institution> <year> 1991. </year>
Reference: [EGF91] <author> M. Blattner E. Glinert and C. Frerking. </author> <title> Visual tools and languages: Directions for the 90s. </title> <booktitle> In Workshop on Visual Languages, </booktitle> <pages> pages 8995. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference: [FA90] <author> D. Workman F. Arefi, C. Hughes. </author> <title> Automatically generating visual syntax-directed editors. </title> <journal> Communications of the ACM, </journal> <volume> 33(3), </volume> <month> March </month> <year> 1990. </year>
Reference: [FJ86] <author> F. Feldbrugge and K. Jensen. </author> <title> Petri Net tools survey. Petri Nets: Central Models and Properties. </title> <booktitle> In Advances in Petri Nets, pages 2061, </booktitle> <address> Berlin, 1986. </address> <publisher> Springer-Verlag. LNCS 254. </publisher>
Reference: [GNV88] <author> E. Gansner, S. North, and K. Vo. </author> <title> Dag - a program that draws directed graphs. </title> <journal> Software Experience and Practice, </journal> <volume> 18(11):1047106210471062, </volume> <month> November </month> <year> 1988. </year>
Reference: [Got89] <author> H. Gottler. </author> <title> Graph grammars, a new paradigm for implementing visual languages. </title> <booktitle> In Eurographics89, </booktitle> <pages> pages 505516, </pages> <year> 1989. </year>
Reference-contexts: The h-graph selectors used in PFG is similar the dot-addressing scheme we use, though selectors describe a path through a hierarchical graph instance rather than its schema. Work by <ref> [Got89] </ref> describes graph interfaces that use and are specified by graph grammars. An important concept developed in this paper is the use of productions to describe both the graph structures and associated attributes in a uniform way.
Reference: [Har86] <author> D. Harel. </author> <title> On Visual Formalisms. </title> <journal> Communications of ACM, </journal> <volume> 31(5):514529, </volume> <month> May </month> <year> 1988. </year> <note> GBLE Draft December 17, 1994 25 </note>
Reference: [Hil92] <author> D.D. </author> <title> Hills. Visual languages and computing survey: Data flow visual programming languages. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 3:69101, </volume> <month> June? </month> <year> 1992. </year>
Reference: [Hun90] <author> N. Hunt. Idf: </author> <title> A graphical data flow language for image processing and computer vision. </title> <booktitle> In IEEE Conf. on Systems, Man, and Cybernetics. IEEE, </booktitle> <month> Nov </month> <year> 1990. </year>
Reference: [Jac85] <author> R. J. K. Jacob. </author> <title> A state transition diagram language for visual programmingformulation and programming of parallel computers: A unified approach. </title> <booktitle> Computer, </booktitle> <address> 18(8):5159624631, </address> <month> August </month> <year> 1985. </year>
Reference: [JG89] <author> David Jablonowski and Vincent Guarana. </author> <title> Gmb - a tool for manipulating and animating graph structures. </title> <journal> Software Practice and Experience, </journal> <volume> 19(3):283301, </volume> <month> March </month> <year> 1989. </year>
Reference: [JM88] <author> A. Jahanian and A. Mok. Modechart: </author> <title> A specification language for real-time systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <year> 1988. </year>
Reference: [KG88] <author> Michael F. Kleyn and Paul C. Gingrich. </author> <title> GraphTrace - Understanding Object-Oriented Systems Using Concurrently Animated Views. </title> <booktitle> In Proceedings of the Third ACM Conference on Object Oriented Systems, Languages, and Applications, </booktitle> <pages> pages 191205, </pages> <month> September </month> <year> 1988. </year>
Reference: [KS90] <author> A. Karrer and W. Scacchi. </author> <title> Requirements for an extensible object-oriented tree/graph editor. </title> <booktitle> In Proceedings of ACM Third Annual Symposium on User Interface Software and Technology, </booktitle> <pages> pages 8491, </pages> <year> 1990. </year>
Reference: [Lam90] <author> L. Lamport. </author> <title> A temporal logic of actions. </title> <type> Tech. Report 57, </type> <institution> Digital Research Center, </institution> <year> 1990. </year>
Reference: [LER92] <author> T.G. Lewis and H. El-Rewini. </author> <title> Introduction to Parallel Computing, chapter 12. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference: [Mal82] <author> William R. Mallgren. </author> <title> Formal Specification of Interactive Graphics Programming Languages. </title> <type> PhD thesis, </type> <institution> Univ. of Washington, </institution> <year> 1982. </year> <note> ACM Distinguished Dissertation. </note>
Reference: [Mar90] <author> J. Marks. </author> <title> A syntax and semantics for network diagrams. </title> <booktitle> In IEEE Workshop on Visual Languages, </booktitle> <pages> pages 104110, </pages> <address> Skokie Illinois, </address> <year> 1990. </year>
Reference-contexts: There are applications of graph interfaces where location alignment do carry meaning, but in most GBLs this is not the case. The use of graphs in which location and alignment are relevant has been studied by <ref> [Mar90] </ref>. We have intentionally left many issues of appearance of graphical display open. This level of abstraction allows us capture GBLEs in a way that is independent of a particular GUI implementation.
Reference: [Mey90] <author> B. Meyer. </author> <title> Introduction to the Theory of Programming Languages. </title> <publisher> Prentice Hall, </publisher> <year> 1990? </year>
Reference: [MHC89] <author> J. Vlissides M. Hinton and P Calder. </author> <title> Composing user interfaces with interviews. IEEE Compute, </title> <address> 22(2):822, </address> <month> February </month> <year> 1989. </year>
Reference: [MK92] <author> J. Magee and J. Kramer. </author> <title> Mp: A programming environment for multicomputers. </title> <booktitle> In Proc. of Working Conference on Programming Environments for Parallel Computing, </booktitle> <address> Edinburgh, April 1992. </address> <publisher> Springer-Verlag. IFIP WG10.3. </publisher>
Reference: [NB92] <author> P. Newton and J. C. Browne. </author> <title> The code2.0 graphical parallel programming language. </title> <booktitle> In Proc. ACM Intl. Conf on Supercomputing, </booktitle> <month> July </month> <year> 1992. </year>
Reference: [Nut91] <author> G. Nutt. </author> <title> A simulation sytem architecture for graph models. </title> <booktitle> In Advances in Petri Nets, </booktitle> <address> Berlin, 1991. </address> <publisher> Springer-Verlag. LNCS </publisher> ??? 
Reference-contexts: There are existing systems which are similar to ours in that they provide a general graph based programming language which can be refined to specific applications such as the PFG system of [Sto88] and the Olympus system of <ref> [Nut91] </ref>. Both of these systems are however tied to an underlying Petri Net model of computation; we are attempting to be more general. The h-graph selectors used in PFG is similar the dot-addressing scheme we use, though selectors describe a path through a hierarchical graph instance rather than its schema.
Reference: [Pau90] <author> Frances Newberry Paulisch. </author> <title> The Design of an Extendible Graph Editor. </title> <type> PhD thesis, </type> <institution> Institute for Informatics, University of Karlsruhe, </institution> <month> March </month> <year> 1990. </year>
Reference: [Pet81] <author> J. Peterson. </author> <title> Petri net theory and the modeling of systems. </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year>
Reference: [PT90] <author> Frances Newberry Paulisch and Walter F. Tichy. </author> <title> Edge: An extendible graph editor. </title> <journal> Software-Practice and Experience, </journal> <volume> S1(20), </volume> <month> June </month> <year> 1990. </year> <note> [RDM 87] L. </note> <author> Rowe, M. Davis, E. Messinger, C. Meyer, C. Spirakis, and A. Tuan. </author> <title> A browser for directed graphs. </title> <journal> Software Practice and Experience, </journal> <volume> 17(1):6176, </volume> <year> 1987. </year>
Reference-contexts: Since there is still quite a large variation in the level of functionality provided by various GUI packages, we anticipate having a retargetable back-end which can generate code for different ones. We illustrate the compilation process here with examples emitting code of the EDGE graph editing library programming interface <ref> [PT90] </ref>. The main interface functions provided by EDGE are described in the Section 1.1. The compilation of the simple Petri Net specification is illustrated in Sections 4.2-4.3 and summarized in Section 4.4.
Reference: [Rep84] <author> T. Reps. </author> <title> Generating Language-Based Environments. </title> <booktitle> ACM Doctoral Dissertation Award 1983. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass, </address> <year> 1984. </year>
Reference: [Sil92] <institution> Silicon Graphics Inc. </institution> <note> Iris Explorer Users Manual, </note> <month> Jan </month> <year> 1992. </year> <month> 26 December 17, </month> <title> 1994 and their Programming Environments (Draft) </title>
Reference: [Spi88] <author> J. Spivey. </author> <title> Understanding Z - A Specification Language and its Formal Semantics. </title> <publisher> Cambridge Univ. Press, </publisher> <address> 1988. [SSW 92] D. </address> <note> Szafron, </note> <author> J. Schaeffer, P.S. Wong, E. Chan, P. Lu, and C. Smith. </author> <title> The enterprise distributed programming model. </title> <booktitle> In Proc. of Working Conference on Programming Environments for Parallel Computing, </booktitle> <address> Edinburgh, April 1992. </address> <publisher> Springer-Verlag. IFIP WG10.3. </publisher>
Reference: [Sta90] <author> John T. Stasko. </author> <title> The path-transition paradigm: A practical methodology for adding animation to program interfaces. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 1:213236, </volume> <year> 1990. </year>
Reference: [Sta91] <institution> Stardent Computer Inc. </institution> <note> AVS Reference Manual, </note> <year> 1991. </year>
Reference: [Sto88] <author> D.P. Stotts. </author> <title> The PFG Language: Visual Programming for Concurrent Computation Expressing High-Level Visual Concurrency Structures in the PFG Kernel Language. </title> <booktitle> In Int. Conf. on Par. Proc., </booktitle> <pages> pages 7279, </pages> <month> August </month> <year> 1988. </year> <institution> Vol2: Software, Univ Maryland. </institution>
Reference-contexts: There are existing systems which are similar to ours in that they provide a general graph based programming language which can be refined to specific applications such as the PFG system of <ref> [Sto88] </ref> and the Olympus system of [Nut91]. Both of these systems are however tied to an underlying Petri Net model of computation; we are attempting to be more general.
Reference: [Szw87] <author> Gerd Szwillus. </author> <title> Cegs - a system for generating graphical editors. </title> <editor> In H. Bullinger and B. Schakel, editors, </editor> <title> Human-Computer Interaction - Interact 87. </title> <publisher> Elsevier, </publisher> <year> 1987. </year>
Reference-contexts: In contrast to other formalizations of the syntax and semantics of visual programming languages our abstractions do not incorporate positional information. This is because (as noted in <ref> [Szw87] </ref>), in most graph interfaces, its is the interconnection of nodes and links that conveys information, but their locations are immaterial. There are applications of graph interfaces where location alignment do carry meaning, but in most GBLs this is not the case.
Reference: [Tho90] <author> Gregory S. Thomas. </author> <note> Xsim 2.0 users guide. ftp cs.washington.edu, </note> <month> April </month> <year> 1990. </year> <institution> Dept. of Comp Sci. Univ Washington. </institution>
Reference: [TR81] <author> T. Teitelbaum and T. Reps. </author> <title> The cornell program synthesizer. </title> <journal> Communications of the ACM, </journal> <volume> 24(9):563573, </volume> <month> Sept. </month> <year> 1981. </year>

Reference: [Mal82][Pau90] <institution> [Pet81] [Dye89] </institution>
References-found: 48

