URL: http://www.cs.nmsu.edu/lldap/jicslp98/p7.ps.gz
Refering-URL: http://www.cs.nmsu.edu/lldap/jicslp98/accepted.html
Root-URL: http://www.cs.nmsu.edu
Email: refalo@ilog.fr  
Title: Extension of the Revised Simplex Method for Detecting Implicit Equalities in Constraint Logic Programming  
Author: Philippe Refalo 
Address: 9 rue de Verdun BP 85, 94253 Gentilly, France  
Affiliation: ILOG, S.A.  
Abstract: This paper deals with the incremental detection of implicit equalities using the revised simplex method. This algorithm is more efficient and more suitable to practical problems than the tableau method that is usually applied in constraint logic programming. We describe and discuss the adaptation to the revised simplex of three approaches: the CLP(R) approach, the Prolog III approach and the quasi-dual one. All of them have been integrated into the constraint logic programming language Athena based on a revised simplex method over exact-precision rationals. This system is used to compare these methods on a set of typical CLP problems over linear constraints. keywords: constraint logic programming, incremental linear constraint solving, implicit equalities.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Frederic Benhamou and Touraivane. </author> <title> Prolog IV: langage et algorithmes. </title> <booktitle> In JFPL'95: IVemes Journees Francophones de Programmation en Logique, </booktitle> <pages> pages 51-65, </pages> <address> Dijon, France, </address> <year> 1995. </year> <month> Teknea. </month>
Reference-contexts: Implicit equalities are incrementally detected by extensions of the simplex method. Among the first methods developed for this purpose, there are the Prolog III method [8, 5], the CLP (R) method [16, 10] and the CHIP method [18], which is now also used in Prolog IV <ref> [1] </ref>. These methods are implemented with a tableau simplex algorithm over non-negative variables. This work deals with the incremental detection of implicit equalities with the revised simplex method. This method is widely used for solving practical linear optimization problems [4, 3].
Reference: [2] <author> H. Beringer and B. de Backer. </author> <title> Combinatorial problem solving in constraint logic programming with cooperating solvers. In Logic Programming : Formal Methods and Practical Applications. </title> <publisher> Elsevier Science Publishers, </publisher> <year> 1994. </year>
Reference-contexts: The former gives bounds on variables to the latter while the latter maintains a rational solution of linear constraints and gives the former fixed variables <ref> [2, 7] </ref>. For instance in the set fx y + z 0; y z 0; 0 x; x 2; 0 y; y 2x 2 f0; 1; 2g; y 2 f0; 1; 2gg, the inequation x 0 is an implicit equality. <p> The revised simplex method is applied to solving linear constraints in new generation CLP languages like CLAIRE <ref> [2] </ref> or Athena [15, 14]. Detection of implicit equalities is then based on the quasi-dual formulation of a system of inequations introduced by Lassez [11]. In this article we describe how to incrementally detect the presence of implicit equalities. <p> This problem have been studied for some time with the tableau solved form [10, 18, 9] and more recently with the revised solved form <ref> [2, 15, 14] </ref>. <p> The use of this formulation for detecting implicit equalities is suggested in [11] among other possible applications. This approach has been integrated to the CLAIRE language <ref> [2] </ref> and to the Athena language [15]. Let S = fAx bg be a system of m inequations. The quasi-dual formulation of this system is 9 the linear program j = minfyb j yA = 0; y 0; X where y is a row-vector of m variables.
Reference: [3] <author> D. Bertsimas and J. N. Tsitsiklis. </author> <title> Introduction to Linear Optimization. </title> <publisher> Athena Scientific, </publisher> <address> Belmont, Massachusetts, </address> <year> 1997. </year>
Reference-contexts: These methods are implemented with a tableau simplex algorithm over non-negative variables. This work deals with the incremental detection of implicit equalities with the revised simplex method. This method is widely used for solving practical linear optimization problems <ref> [4, 3] </ref>.
Reference: [4] <author> V. Chvatal. </author> <title> Linear Programming. W.H. </title> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1983. </year>
Reference-contexts: These methods are implemented with a tableau simplex algorithm over non-negative variables. This work deals with the incremental detection of implicit equalities with the revised simplex method. This method is widely used for solving practical linear optimization problems <ref> [4, 3] </ref>. <p> It is well known that any solvable system of linear equations and inequations can be mapped to tableau solved form <ref> [4] </ref>. 3 3.2 Revised Solved Form The revised solved form is the basis for the revised simplex method. The main difference from the tableau solved form is the basic variables that are not eliminated in the equations. However eliminating basic variables gives a system in tableau solved form. <p> It computes a solved linear program (i.e. such that a i &gt; 0 and a 0 i &lt; 0). The basic solution of S is then an optimal solution of the linear program (see <ref> [4] </ref>). The revised simplex method first chooses an entering variable x k such that a i &lt; 0 or a 0 i &gt; 0. A variation of the value oe S (x k ) decreases the value of the objective function. <p> The pivot is then degenerated. The efficiency of the revised simplex method hinges around the representation of the matrix A 1 B and the update of this matrix during a pivot. Some of the numerous approaches for this are summarized in <ref> [4] </ref>. The representation used in Athena is an LU factorization of the basis matrix and the update is based on matrix accumulation [15, 14]. 4 Linear Constraint Solving This section briefly presents some fundamental results for incremental solving of equation and inequations and the detection of implicit equalities.
Reference: [5] <author> A. Colmerauer. </author> <title> An introduction to Prolog III. </title> <journal> Communications of the ACM, </journal> <volume> 33(7) </volume> <pages> 69-91, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Detecting implicit equalities is one of the fundamental operations for solving generalized linear constraints [13] that include disequations (6=) and strict inequations (&lt;). This method for solving constraints is integrated into languages like Prolog III <ref> [5] </ref> and Prolog IV [7]. This detection enables the discovering of all variables fixed to a single value. This is applied to the delayed solving of linear constraints [6]. In languages like CLP (R) [10] or Prolog III [5], solving the non linear constraint 2xy + 3z + t = 0 <p> This method for solving constraints is integrated into languages like Prolog III <ref> [5] </ref> and Prolog IV [7]. This detection enables the discovering of all variables fixed to a single value. This is applied to the delayed solving of linear constraints [6]. In languages like CLP (R) [10] or Prolog III [5], solving the non linear constraint 2xy + 3z + t = 0 is delayed until one of the variables x or y is fixed by the linear constraint solver. <p> Linear constraint solving mainly uses a Gaussian elimination method (for equations and dis-equations) and on the simplex method (for inequations 1 ). Implicit equalities are incrementally detected by extensions of the simplex method. Among the first methods developed for this purpose, there are the Prolog III method <ref> [8, 5] </ref>, the CLP (R) method [16, 10] and the CHIP method [18], which is now also used in Prolog IV [1]. These methods are implemented with a tableau simplex algorithm over non-negative variables. This work deals with the incremental detection of implicit equalities with the revised simplex method. <p> Assuming that there is no degeneracy, a single pivot is sufficient to decide. This is often the case in practice. 6 Adaptation of the Prolog III Method The method presented herein was developed for the linear constraint solver of Prolog III <ref> [5] </ref>, with the tableau solved form over non-negative variables. The method is briefly described in [8] ; it has not been detailed nor proven. When the first implicit equalities found as restrictive inequations are replaced by equations, the new system found may contain more implicit equalities. <p> Various examples have been tested with the three approaches. Most of these examples are typical CLP problems over linear constraints that need to detect implicit equalities for handling disequations. The Donald problem is the well-known cryptarithm problem <ref> [5] </ref>. Periodic solves the problem of proving that a mathematical sequence is periodic [5]. It contains a single disequation, however finding implicit equalities reduces the search space. The Square problem [5] is a two dimensional placement problem that is very combinatorial. <p> Most of these examples are typical CLP problems over linear constraints that need to detect implicit equalities for handling disequations. The Donald problem is the well-known cryptarithm problem <ref> [5] </ref>. Periodic solves the problem of proving that a mathematical sequence is periodic [5]. It contains a single disequation, however finding implicit equalities reduces the search space. The Square problem [5] is a two dimensional placement problem that is very combinatorial. It consists of filling a rectangle with squares of different sizes such that no squares overlaps. <p> The Donald problem is the well-known cryptarithm problem <ref> [5] </ref>. Periodic solves the problem of proving that a mathematical sequence is periodic [5]. It contains a single disequation, however finding implicit equalities reduces the search space. The Square problem [5] is a two dimensional placement problem that is very combinatorial. It consists of filling a rectangle with squares of different sizes such that no squares overlaps. All pivoting operations done to solve this problem are for detecting implicit equalities.
Reference: [6] <author> A. Colmerauer. </author> <title> Naive resolution of non-linear constraints. </title> <editor> In Frederic Benhamou and Alain Colmerauer, editors, </editor> <booktitle> Constraint Logic Programming: Selected Research, </booktitle> <pages> pages 89-112. </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: This method for solving constraints is integrated into languages like Prolog III [5] and Prolog IV [7]. This detection enables the discovering of all variables fixed to a single value. This is applied to the delayed solving of linear constraints <ref> [6] </ref>. In languages like CLP (R) [10] or Prolog III [5], solving the non linear constraint 2xy + 3z + t = 0 is delayed until one of the variables x or y is fixed by the linear constraint solver.
Reference: [7] <author> A. Colmerauer. </author> <title> Specifications de Prolog IV. </title> <type> Technical report, </type> <institution> Laboratoire d'Informatique de Marseille, </institution> <year> 1996. </year>
Reference-contexts: Detecting implicit equalities is one of the fundamental operations for solving generalized linear constraints [13] that include disequations (6=) and strict inequations (&lt;). This method for solving constraints is integrated into languages like Prolog III [5] and Prolog IV <ref> [7] </ref>. This detection enables the discovering of all variables fixed to a single value. This is applied to the delayed solving of linear constraints [6]. <p> The former gives bounds on variables to the latter while the latter maintains a rational solution of linear constraints and gives the former fixed variables <ref> [2, 7] </ref>. For instance in the set fx y + z 0; y z 0; 0 x; x 2; 0 y; y 2x 2 f0; 1; 2g; y 2 f0; 1; 2gg, the inequation x 0 is an implicit equality.
Reference: [8] <author> Michel Henrion. </author> <title> Les algorithmes numeriques de Prolog III. </title> <type> Technical report, </type> <institution> Prologia, </institution> <year> 1989. </year> <month> 13 </month>
Reference-contexts: Linear constraint solving mainly uses a Gaussian elimination method (for equations and dis-equations) and on the simplex method (for inequations 1 ). Implicit equalities are incrementally detected by extensions of the simplex method. Among the first methods developed for this purpose, there are the Prolog III method <ref> [8, 5] </ref>, the CLP (R) method [16, 10] and the CHIP method [18], which is now also used in Prolog IV [1]. These methods are implemented with a tableau simplex algorithm over non-negative variables. This work deals with the incremental detection of implicit equalities with the revised simplex method. <p> This is often the case in practice. 6 Adaptation of the Prolog III Method The method presented herein was developed for the linear constraint solver of Prolog III [5], with the tableau solved form over non-negative variables. The method is briefly described in <ref> [8] </ref> ; it has not been detailed nor proven. When the first implicit equalities found as restrictive inequations are replaced by equations, the new system found may contain more implicit equalities. The Prolog III methods identifies some constraints that, once removed from this system, lead assuredly to a regular system.
Reference: [9] <author> J.-L. Imbert and P. van Hentenryck. </author> <title> On the handling of disequations in CLP over linear rational arithmetic. </title> <editor> In Frederic Benhamou and Alain Colmerauer, editors, </editor> <booktitle> Constraint Logic Programming: Selected Research, </booktitle> <pages> pages 49-72. </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: The constraint is added to the system only if fl &lt; fi (we will see later that it is not necessary to add it when fl = fi). This problem have been studied for some time with the tableau solved form <ref> [10, 18, 9] </ref> and more recently with the revised solved form [2, 15, 14].
Reference: [10] <author> J. Jaffar, S. Michaylov, P. Stuckey, and R.H.C. Yap. </author> <title> The CLP(R) language and system. </title> <journal> Transactions on Programming Languages and Systems, </journal> <volume> 14(3), </volume> <month> July </month> <year> 1992. </year>
Reference-contexts: This method for solving constraints is integrated into languages like Prolog III [5] and Prolog IV [7]. This detection enables the discovering of all variables fixed to a single value. This is applied to the delayed solving of linear constraints [6]. In languages like CLP (R) <ref> [10] </ref> or Prolog III [5], solving the non linear constraint 2xy + 3z + t = 0 is delayed until one of the variables x or y is fixed by the linear constraint solver. <p> Implicit equalities are incrementally detected by extensions of the simplex method. Among the first methods developed for this purpose, there are the Prolog III method [8, 5], the CLP (R) method <ref> [16, 10] </ref> and the CHIP method [18], which is now also used in Prolog IV [1]. These methods are implemented with a tableau simplex algorithm over non-negative variables. This work deals with the incremental detection of implicit equalities with the revised simplex method. <p> The constraint is added to the system only if fl &lt; fi (we will see later that it is not necessary to add it when fl = fi). This problem have been studied for some time with the tableau solved form <ref> [10, 18, 9] </ref> and more recently with the revised solved form [2, 15, 14]. <p> It has been integrated to the CLP (R) language <ref> [10] </ref> with the tableau solved form over non-negative variables. 5.1 Method Principles The basic principle of this method is to consider each implicit equality found as an implicit equality in the solved linear program (5) and to add the corresponding equation in the system.
Reference: [11] <author> J-L Lassez. </author> <title> Parametric queries, linear constraints and variable elimination. </title> <booktitle> In DISCO 90, </booktitle> <volume> LNCS 429, </volume> <pages> pages 164-173. </pages> <note> Springer-Verlag Lecture Notes in Computer Science, </note> <year> 1990. </year>
Reference-contexts: The revised simplex method is applied to solving linear constraints in new generation CLP languages like CLAIRE [2] or Athena [15, 14]. Detection of implicit equalities is then based on the quasi-dual formulation of a system of inequations introduced by Lassez <ref> [11] </ref>. In this article we describe how to incrementally detect the presence of implicit equalities. We also detail adaptations to the revised simplex of the Prolog III method, the CLP (R) method and the quasi-dual based method. <p> This is possible with the quasi-dual method. 7 Adaptation of the Quasi-dual Formulation The quasi-dual formulation of a system of linear constraints was introduced by Lassez [12]. The use of this formulation for detecting implicit equalities is suggested in <ref> [11] </ref> among other possible applications. This approach has been integrated to the CLAIRE language [2] and to the Athena language [15]. Let S = fAx bg be a system of m inequations.
Reference: [12] <author> J-L Lassez. </author> <title> Querying constraints. </title> <booktitle> In Proceedings of the ACM Conference on Principles of Database Systems, </booktitle> <address> Nashville, </address> <year> 1990. </year>
Reference-contexts: Both methods are unable to prove in one step the absence of implicit equalities in the system S [ R = . This is possible with the quasi-dual method. 7 Adaptation of the Quasi-dual Formulation The quasi-dual formulation of a system of linear constraints was introduced by Lassez <ref> [12] </ref>. The use of this formulation for detecting implicit equalities is suggested in [11] among other possible applications. This approach has been integrated to the CLAIRE language [2] and to the Athena language [15]. Let S = fAx bg be a system of m inequations.
Reference: [13] <author> J-L Lassez and K. McAloon. </author> <title> A canonical form for generalised linear constraints. </title> <journal> Journal of Symbolic Computation, </journal> (1):1-24, 1992. 
Reference-contexts: Indeed this set can be rewritten to fx 1 + x 2 = 2; x 1 = 1; x 2 = 1g without changing its set of solutions. Detecting implicit equalities is one of the fundamental operations for solving generalized linear constraints <ref> [13] </ref> that include disequations (6=) and strict inequations (&lt;). This method for solving constraints is integrated into languages like Prolog III [5] and Prolog IV [7]. This detection enables the discovering of all variables fixed to a single value. This is applied to the delayed solving of linear constraints [6]. <p> The absence of implicit equalities when fl &lt; fi is proven in <ref> [13] </ref>. This fundamental result leads to efficient incremental methods for detecting implicit equalities. In other words, solving a system that does not contain any implicit equalities does not require anything more than searching for a solution of this system.
Reference: [14] <author> P. Refalo. </author> <title> Resolution et implication de contraintes lineaires en programmation logique par constraintes. </title> <type> Ph.D Thesis. </type> <institution> Laboratoire d'informatique de Marseille, Marseille, </institution> <year> 1997. </year>
Reference-contexts: The revised simplex method is applied to solving linear constraints in new generation CLP languages like CLAIRE [2] or Athena <ref> [15, 14] </ref>. Detection of implicit equalities is then based on the quasi-dual formulation of a system of inequations introduced by Lassez [11]. In this article we describe how to incrementally detect the presence of implicit equalities. <p> Some of the numerous approaches for this are summarized in [4]. The representation used in Athena is an LU factorization of the basis matrix and the update is based on matrix accumulation <ref> [15, 14] </ref>. 4 Linear Constraint Solving This section briefly presents some fundamental results for incremental solving of equation and inequations and the detection of implicit equalities. References containing more details are provided. Linear constraint solving in constraint programming must be incremental. <p> This problem have been studied for some time with the tableau solved form [10, 18, 9] and more recently with the revised solved form <ref> [2, 15, 14] </ref>. <p> They are characterized by the set R = fl i x i j a i 6= 0g [ fx i u i j a 0 As a fundamental result, each restrictive inequation of the solved linear program is an implicit equality in the system S [fex fig (see <ref> [14] </ref>). This result is applied in most of the implementations of CLP languages over linear constraints. It can be proved that the systems S [ fex fig, S [ fex = fig and S [ R = are all equivalent (see [14]). <p> implicit equality in the system S [fex fig (see <ref> [14] </ref>). This result is applied in most of the implementations of CLP languages over linear constraints. It can be proved that the systems S [ fex fig, S [ fex = fig and S [ R = are all equivalent (see [14]). Consequently, adding the constraint ex fi or ex = fi amounts to fixing the variables appearing in R = to one of their bounds. <p> When restrictive inequations are replaced by equations, the resulting system is not necessarily regular. At this point, the removal of bounding inequations leads with certainty to a different but regular system <ref> [14] </ref>. Theorem 1 Let P be a linear program in solved form whose system S is regular. Let R be set of restrictive inequations of P and S B be its set of bounding inequations. The system (S S B ) [ R = is regular.
Reference: [15] <author> P. Refalo and P. van Hentenryck. </author> <title> CLP(R lin ) revised. </title> <booktitle> In Proceedings of the Joint International Conference and Symposium on Logic Programming, </booktitle> <pages> pages 1-14, </pages> <address> Bonn, Germany, </address> <year> 1996. </year>
Reference-contexts: The revised simplex method is applied to solving linear constraints in new generation CLP languages like CLAIRE [2] or Athena <ref> [15, 14] </ref>. Detection of implicit equalities is then based on the quasi-dual formulation of a system of inequations introduced by Lassez [11]. In this article we describe how to incrementally detect the presence of implicit equalities. <p> We also provide the algorithm that identifies all implicit equalities. These algorithms have been integrated to the CLP language Athena. This make quantitative comparison possible. The linear constraint solver of Athena is based on a revised simplex method over exact-precision rationals <ref> [15] </ref>. It includes advanced linear programming techniques such as LU factorization and smart pivoting techniques. This system is used to compare these approaches on a set of typical CLP problems over linear constraints. The rest of this paper is organized as follows. Definitions and notations are given in Section 2. <p> Some of the numerous approaches for this are summarized in [4]. The representation used in Athena is an LU factorization of the basis matrix and the update is based on matrix accumulation <ref> [15, 14] </ref>. 4 Linear Constraint Solving This section briefly presents some fundamental results for incremental solving of equation and inequations and the detection of implicit equalities. References containing more details are provided. Linear constraint solving in constraint programming must be incremental. <p> This problem have been studied for some time with the tableau solved form [10, 18, 9] and more recently with the revised solved form <ref> [2, 15, 14] </ref>. <p> The use of this formulation for detecting implicit equalities is suggested in [11] among other possible applications. This approach has been integrated to the CLAIRE language [2] and to the Athena language <ref> [15] </ref>. Let S = fAx bg be a system of m inequations. The quasi-dual formulation of this system is 9 the linear program j = minfyb j yA = 0; y 0; X where y is a row-vector of m variables. <p> The linear constraint solver of Athena is based on a revised simplex method on exact-precision rationals. It includes advanced linear programming techniques and an efficient procedure for dynamic backtracking <ref> [15] </ref>. Various examples have been tested with the three approaches. Most of these examples are typical CLP problems over linear constraints that need to detect implicit equalities for handling disequations. The Donald problem is the well-known cryptarithm problem [5].
Reference: [16] <author> P. J. Stuckey. </author> <title> Incremental linear constraint solving and implicit equalities. </title> <journal> ORSA Journal of Computing, </journal> <volume> 3(4) </volume> <pages> 269-274, </pages> <year> 1991. </year>
Reference-contexts: Implicit equalities are incrementally detected by extensions of the simplex method. Among the first methods developed for this purpose, there are the Prolog III method [8, 5], the CLP (R) method <ref> [16, 10] </ref> and the CHIP method [18], which is now also used in Prolog IV [1]. These methods are implemented with a tableau simplex algorithm over non-negative variables. This work deals with the incremental detection of implicit equalities with the revised simplex method. <p> The final system is thus built step by step by replacing each variable fixed to a value by this value. 5 Adaptation of the CLP (R) Method The method described here is an adaptation of the incremental method developed in <ref> [16] </ref>. <p> The variable x i is then explicitly fixed in the system S (step 2e). 7 This algorithm has two main advantages for incrementality. Stuckey emphasizes in <ref> [16] </ref> that the number of steps of the algorithm, and thus the number of linear programs solved, is equal to the number of implicit equalities found. So this method is equivalent to the ideal method.
Reference: [17] <author> J. Telgen. </author> <title> Redundancy and Linear Programs. </title> <publisher> Mathematical Centre Tracts, </publisher> <year> 1981. </year> <title> number 137. </title>
Reference-contexts: A naive approach is to solve a linear program for each inequation ffix i ff of the system S 0 to decide if it is an implicit equality or not. In <ref> [17] </ref> Telgen proposes some improvements to this method. He gives some syntactic criteria to identify some implicit equalities in a tableau solved form. For each system obtained by the application of the tableau simplex, the criteria identify additional implicit equalities.
Reference: [18] <author> P. van Hentenryck and T. Graf. </author> <title> Standard forms for rational linear arithmetics in constraint logic programming. </title> <booktitle> In The International Symposium on Artificial Intelligence and Mathematics, </booktitle> <address> Fort Lauderdale, Florida, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: Implicit equalities are incrementally detected by extensions of the simplex method. Among the first methods developed for this purpose, there are the Prolog III method [8, 5], the CLP (R) method [16, 10] and the CHIP method <ref> [18] </ref>, which is now also used in Prolog IV [1]. These methods are implemented with a tableau simplex algorithm over non-negative variables. This work deals with the incremental detection of implicit equalities with the revised simplex method. This method is widely used for solving practical linear optimization problems [4, 3]. <p> In this article we describe how to incrementally detect the presence of implicit equalities. We also detail adaptations to the revised simplex of the Prolog III method, the CLP (R) method and the quasi-dual based method. The method using the lexicographic form <ref> [18] </ref> is not detailed here since it requires the simplex tableau to be applied. For each method, we provide the main theoretical results without providing proofs. They can be found in references which are given instead. We also provide the algorithm that identifies all implicit equalities. <p> The constraint is added to the system only if fl &lt; fi (we will see later that it is not necessary to add it when fl = fi). This problem have been studied for some time with the tableau solved form <ref> [10, 18, 9] </ref> and more recently with the revised solved form [2, 15, 14].
Reference: [19] <author> P. van Hentenryck and V. </author> <title> Ramachandran. </title> <journal> Backtracking without trailling in CLP(R lin ). ACM Transaction on Programming Langages and Systems, </journal> <volume> 1(1) </volume> <pages> 0-0, </pages> <year> 1995. </year> <month> 14 </month>
Reference-contexts: It consists of filling a rectangle with squares of different sizes such that no squares overlaps. All pivoting operations done to solve this problem are for detecting implicit equalities. Two instances of this problem are solved: one with 9 squares, the other with 14 squares. Transport <ref> [19] </ref> is a deterministic problem of assigning providers to customers. At the optimum value all of the 80 variables are fixed showing that there is no other optimal solution. Cut-stock is a cutting stock problem solved to optimality with a branch and bound approach [19]. <p> Transport <ref> [19] </ref> is a deterministic problem of assigning providers to customers. At the optimum value all of the 80 variables are fixed showing that there is no other optimal solution. Cut-stock is a cutting stock problem solved to optimality with a branch and bound approach [19].
References-found: 19

