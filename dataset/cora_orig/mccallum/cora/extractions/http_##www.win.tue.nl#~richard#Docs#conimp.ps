URL: http://www.win.tue.nl/~richard/Docs/conimp.ps
Refering-URL: http://WWWcg.win.tue.nl/~richard/Project/index.html
Root-URL: http://www.win.tue.nl
Email: richard@win.tue.nl  Remco.Veltkamp@cs.ruu.nl  edwin@cs.uct.ac.za  
Title: Constraints on Objects: a Conceptual Model and an Implementation  
Author: Richard H. M. C. Kelleners Remco C. Veltkamp Edwin H. Blake 
Address: Kruislaan 413, 1098 SJ Amsterdam, The Netherlands, and  Den Dolech 2, 5612 AZ, Eindhoven, The Netherlands,  Padualaan 14, 3584 CH Utrecht, The Netherlands,  Rondebosch 7700, South Africa,  
Affiliation: CWI,  University of Eindhoven, Dept. Computing Science  Utrecht University, Dept. Computing Science  University of Cape Town, Dept. Computer Science  
Pubnum: Technical  
Abstract: This paper presents the design and implementation of a model for combining object-oriented programming and constraint programming. This model aims to be an aid in the development of computer graphics applications that use these two programming paradigms. The communication between these two systems is managed through a coordination system. A prototype of the model is implemented, based on a coordination language for managing concurrent, independent processes. 
Abstract-found: 1
Intro-found: 1
Reference: [AHS93] <author> F. Arbab, I. Herman, and P. </author> <title> Spilling. An overview of Manifold and its implementation. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 5(1):23 - 70, </volume> <month> February </month> <year> 1993. </year>
Reference-contexts: an ideal implementation in order to study the behaviour of the model, performance issues such as the efficiency and speed of the system were not considered during the design process. 3.1 Manifold MANIFOLD is a coordination language for managing complex, dynamically changing interconnections among sets of independent, concurrent, cooperating processes <ref> [AHS93] </ref>. The language is based on the IWIM (Idealized Worker Idealized Manager) model of communication [Arb96]. IWIM separates computation from communication concerns and establishes that no process is responsible for its own communication with other processes.
Reference: [Arb96] <author> Farhad Arbab. </author> <title> The IWIM model for coordination of concurrent activities. In Coordination Languages and Models, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> volume 1061, </volume> <pages> pages 34-56. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: The general outline of the Communication Server was inspired by the language MANIFOLD and its underlying concepts (see section 3.1 and <ref> [Arb96] </ref>). The two most important notions are event and data flow. An event is an asynchronous, non-decomposable (atomic) message, broadcasted by the Communication Server or by a constrainable, constraint, solver, or coordinator entity. Raising an event means that it is broadcasted to the environment. <p> The language is based on the IWIM (Idealized Worker Idealized Manager) model of communication <ref> [Arb96] </ref>. IWIM separates computation from communication concerns and establishes that no process is responsible for its own communication with other processes. It describes a communication protocol which discriminates between worker processes, which perform a computational task, and manager processes, which manage communications.
Reference: [Dav91] <author> Jacques Davy. </author> <title> Go, a graphical and interactive C++ toolkit for application data presentation and editing. </title> <booktitle> In Proceedings 5th Annual Technical Conference on the X Window System, </booktitle> <year> 1991. </year>
Reference-contexts: A number of ways have been tried to combine objects and constraints, see for example [LvdB91], <ref> [Dav91, GoP93] </ref>, [Wil91], [HB94]. These systems often cannot solve global constraints, due to the local character of the satisfaction mechanism. More powerful solutions are necessarily global in nature, potentially breaking the information hiding principle.
Reference: [FBB92] <author> Bjorn N. Freeman-Benson and Alan Borning. </author> <title> Integrating constraints with an object-oriented language. </title> <editor> In O. Lehrmann Madsen, editor, </editor> <booktitle> Proceedings ECOOP'92-European Conference on Object-Oriented Programming, Utrecht, 1992, Lecture Notes in Computer Science 615, </booktitle> <pages> pages 268-286. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The use of constraints allows for the declarative modeling of the behaviour of interactions with many components or objects. The power of both approaches justifies for a combination where objects and constraints form a harmonious and coordinated whole. However, integration leads to conflicts in programming methodologies <ref> [FBB92, Lop97] </ref>, which obstructs the application of constraints in the object-oriented approach. We distinguish two incompatibilities between constraints and object-oriented concepts: (i) A constraint solver looks at and sets the internal data of an object. (ii) Object-oriented programming is imperative, constraint programming declarative. <p> Our model is not a language that integrates objects and constraints, such as Siri [Hor91] or Kaleidoscope <ref> [FBB92, Lop97] </ref>. Rather, we separate communication of the two programming paradigms. The power of both is maintained, without sacrificing any of the typical characteristics.
Reference: [GoP93] <author> Bull-Imaging and Office Solutions. </author> <title> GoPATH 1.2.0 | A Path To Object Oriented Graphics, a public domain environment for graphical and interactive application development, </title> <year> 1993. </year>
Reference-contexts: A number of ways have been tried to combine objects and constraints, see for example [LvdB91], <ref> [Dav91, GoP93] </ref>, [Wil91], [HB94]. These systems often cannot solve global constraints, due to the local character of the satisfaction mechanism. More powerful solutions are necessarily global in nature, potentially breaking the information hiding principle.
Reference: [HB94] <author> Quinton Hoole and Edwin Blake. </author> <title> OOCS constraints in an object oriented environment. </title> <booktitle> In Proceedings 4th Eurographics Workshop on Object-Oriented Graphics, Sintra, Portugal, </booktitle> <pages> pages 215-230, </pages> <month> 9 - 11 May </month> <year> 1994. </year>
Reference-contexts: A number of ways have been tried to combine objects and constraints, see for example [LvdB91], [Dav91, GoP93], [Wil91], <ref> [HB94] </ref>. These systems often cannot solve global constraints, due to the local character of the satisfaction mechanism. More powerful solutions are necessarily global in nature, potentially breaking the information hiding principle.
Reference: [Hor91] <author> Bruce Horn. Siri: </author> <title> A constrained-object language for reactive program implementation. </title> <type> Technical Report CMU-CS-91-152, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <month> June </month> <year> 1991. </year> <note> URL http://www.cs.cmu.edu/ Reports/1991.html. </note>
Reference-contexts: Our model is not a language that integrates objects and constraints, such as Siri <ref> [Hor91] </ref> or Kaleidoscope [FBB92, Lop97]. Rather, we separate communication of the two programming paradigms. The power of both is maintained, without sacrificing any of the typical characteristics.
Reference: [LBdMP95] <author> C. Laffra, E. H. Blake, V. de Mey, and X. Pintado, </author> <title> editors. Object Oriented Programming for Graphics, Focus on Computer Graphics. </title> <publisher> Springer, </publisher> <year> 1995. </year>
Reference: [Lop97] <author> Gustavo Lopez. </author> <title> The design and implementation of Kaleidoscope, a constraint imperative programming language. </title> <type> PhD thesis, </type> <institution> University of Wash-ington, Department of Computer Science & Engineering, </institution> <year> 1997. </year> <note> Published as technical report UW-CSE-97-04-08, April 1997. URL ftp://ftp.cs. washington.edu/tr/1997/04/UW-CSE-97-04-08.d/. </note>
Reference-contexts: The use of constraints allows for the declarative modeling of the behaviour of interactions with many components or objects. The power of both approaches justifies for a combination where objects and constraints form a harmonious and coordinated whole. However, integration leads to conflicts in programming methodologies <ref> [FBB92, Lop97] </ref>, which obstructs the application of constraints in the object-oriented approach. We distinguish two incompatibilities between constraints and object-oriented concepts: (i) A constraint solver looks at and sets the internal data of an object. (ii) Object-oriented programming is imperative, constraint programming declarative. <p> Our model is not a language that integrates objects and constraints, such as Siri [Hor91] or Kaleidoscope <ref> [FBB92, Lop97] </ref>. Rather, we separate communication of the two programming paradigms. The power of both is maintained, without sacrificing any of the typical characteristics.
Reference: [LvdB91] <author> Chris Laffra and Jan van den Bos. </author> <title> Propagators and concurrent constraints. </title> <journal> OOPS Messenger, </journal> <volume> 2(2) </volume> <pages> 68-72, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: The second incompatibility identifies a difference in programming methodology: object-oriented programming specifies the actions to be taken (imperative programming), while constraint programming specifies a set of constraints that have to be maintained (declarative programming). A number of ways have been tried to combine objects and constraints, see for example <ref> [LvdB91] </ref>, [Dav91, GoP93], [Wil91], [HB94]. These systems often cannot solve global constraints, due to the local character of the satisfaction mechanism. More powerful solutions are necessarily global in nature, potentially breaking the information hiding principle.
Reference: [Ran91] <author> John R. Rankin. </author> <title> A graphics object oriented constraint solver. </title> <editor> In Laffra et al. </editor> <booktitle> [LBdMP95], </booktitle> <pages> pages 71-91. </pages>
Reference-contexts: More powerful solutions are necessarily global in nature, potentially breaking the information hiding principle. One way to restrict this, is to have an object allow value setting only when its internal constraints remain satisfied (see <ref> [Ran91] </ref>). On the other hand, under strict information hiding, constraint satisfaction on objects cannot be guaranteed [VK95]. If one is to sacrifice strict information hiding in order to facilitate constraint satisfaction, care should be taken not to allow abuse.
Reference: [Sut63] <author> Ivan E. Sutherland. </author> <title> Sketchpad: A man-machine graphical communication system. </title> <booktitle> In Proceedings of the Spring Joint Computer Conference, </booktitle> <address> Detroit, Michigan, </address> <month> May 21-23 </month> <year> 1963, </year> <pages> pages 329-345. </pages> <publisher> AFIPS Press, </publisher> <year> 1963. </year>
Reference-contexts: On the other hand, the usage of constraints and constraint solving techniques is not so widespread in the commercial world, but it has a long history in research and dates back to the first days of interactive graphics <ref> [Sut63] </ref>. Both methodologies are powerful techniques for building computer graphics applications. Object-oriented methods provide sound software engineering principles needed to cope with the design and implementation of large, complex software systems. The use of constraints allows for the declarative modeling of the behaviour of interactions with many components or objects.
Reference: [VB96] <author> Remco C. Veltkamp and Edwin H. Blake. Event-based.constraints: coordinate.satisfaction -&gt; object.state, </author> <month> pages 159-169. </month> <title> Focus on Computer Graphics. </title> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: Secondly, separation of the object-oriented application from the constraint framework creates a decoupling between the imperative and the declarative paradigms. This facilitates the design, implementation and maintenance of the systems, without sacrificing any of the power of both methodologies. See <ref> [VB96] </ref> for a more extensive motivation of our work. In this paper, we present a conceptual model of this separation in order to use both objects and constraints, see Section 2.
Reference: [VK95] <author> Remco C. Veltkamp and Richard H. M. C. Kelleners. </author> <title> Information hiding and the complexity of constraint satisfaction. </title> <editor> In Remco C. Veltkamp and Edwin H. Blake (eds), </editor> <booktitle> Programming Paradigms in Graphics, </booktitle> <pages> pages 49-66. </pages> <publisher> Springer-Verlag, </publisher> <address> ISBN 3-211-82788-9, </address> <year> 1995. </year>
Reference-contexts: One way to restrict this, is to have an object allow value setting only when its internal constraints remain satisfied (see [Ran91]). On the other hand, under strict information hiding, constraint satisfaction on objects cannot be guaranteed <ref> [VK95] </ref>. If one is to sacrifice strict information hiding in order to facilitate constraint satisfaction, care should be taken not to allow abuse.
Reference: [Wil91] <author> Michael Wilk. Equate: </author> <title> an object-oriented constraint solver. </title> <booktitle> In Proceedings OOPSLA'91, </booktitle> <pages> pages 286-298, </pages> <year> 1991. </year>
Reference-contexts: A number of ways have been tried to combine objects and constraints, see for example [LvdB91], [Dav91, GoP93], <ref> [Wil91] </ref>, [HB94]. These systems often cannot solve global constraints, due to the local character of the satisfaction mechanism. More powerful solutions are necessarily global in nature, potentially breaking the information hiding principle.
References-found: 15

