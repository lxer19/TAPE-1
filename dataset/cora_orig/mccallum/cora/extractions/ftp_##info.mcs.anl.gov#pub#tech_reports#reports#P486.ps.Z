URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P486.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts94.htm
Root-URL: http://www.mcs.anl.gov
Title: Random Number Generation in Ada 9X programmer migrating from Fortran and should not require a
Author: K. W. Dritz 
Note: The facility should be easy to use; it should appeal to the application  
Address: Argonne, IL 60439  
Affiliation: Argonne National Laboratory  
Abstract: The generation of random numbers 1 is central to many kinds of scientific study, especially those involving simulation or modeling. Most libraries of mathematical software have one or more random number generators (RNGs), encapsulating the best techniques for random number generation that have been reported in the literature, and at least rudimentary capabilities for generating random numbers are intrinsically provided in particular programming languages (among them, C and Fortran 90). The lack of a predefined RNG in Ada has inhibited the portability of application programs that need random numbers. With Ada 9X, that problem will cease to exist, at least for the vast majority of such applications. The facilities for random number generation can be found in the Predefined Language Environment (Annex A) of Ada 9X [2], where they take the form of a pair of children of the predefined package Ada.Numerics. The package Ada.Numerics.Float_Random defines types and operations for the generation of floating-point random numbers, while the generic package Ada.Numerics.Dis-crete_Random plays a similar role for the generation of random integers (actually, random values of an aribtrary user-specified discrete subtype). The content of these two packages underwent many changes after the initial proposal for an RNG facility, which did not even include the latter package. Perhaps more than for any other mathematical library routine, preconceived opinions about the form that the RNG should take ran strong, and many compromises were made before the final RNG was formulated. Nevertheless, certain goals for the design of the facility remained constant throughout the development process: fl This chapter was written with financial support from Intermetrics, Inc., to Argonne Na tional Laboratory under proposal No. P-91122. 1 Technically, of course, we mean to say pseudo-random numbers, numbers in an algorithmically generated sequence that do not appear to be correlated and that satisfy some of the same statistical properties that truly random numbers satisfy. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Blum, M. Blum, and M. Shub. </author> <title> A Simple Unpredictable Pseudo-Random Number Generator. </title> <journal> SIAM Journal of Computing 15(2) </journal> <pages> 364-383, </pages> <year> 1986. </year>
Reference-contexts: Other algorithms that would be expected to pass, but which have not been explicitly tested, include the combination generators of Wichmann and Hill [6] and L'Ecuyer [3] and the x 2 mod N generators of Blum, Blum, and Shub <ref> [1] </ref>. In order to allow users to assess the suitability of the algorithm for their particular application, the implementation must describe the algorithm it uses and must document some of its properties.
Reference: [2] <editor> ISO/IEC DIS 8652. </editor> <booktitle> Information technology | Programming languages | Ada. </booktitle>
Reference: [3] <author> P. L'Ecuyer. </author> <title> Efficient and Portable Combined Random Number Generators. </title> <journal> Communications of the ACM 31(6) </journal> <volume> 742-749, 774, </volume> <year> 1988. </year>
Reference-contexts: Other algorithms that would be expected to pass, but which have not been explicitly tested, include the combination generators of Wichmann and Hill [6] and L'Ecuyer <ref> [3] </ref> and the x 2 mod N generators of Blum, Blum, and Shub [1]. In order to allow users to assess the suitability of the algorithm for their particular application, the implementation must describe the algorithm it uses and must document some of its properties.
Reference: [4] <author> P. A. Lewis, A. S. Goodman, and J. M. Miller. </author> <title> A Pseudo-Random Number Generator for the System/360. </title> <journal> IBM System Journal 8(2) </journal> <pages> 136-146, </pages> <year> 1969. </year>
Reference-contexts: Several popular RNG algorithms are known to pass the tests, including the venerable multiplicative linear congruential generator with multiplier 7 5 and modulus 2 31 1 of Lewis, Goodman, and Miller <ref> [4] </ref> and both the add-with-carry and subtract-with-borrow Fibonacci generators of Marsaglia and Zaman [5].
Reference: [5] <author> G. Marsaglia and A. Zaman. </author> <title> A New Class of Random Number Generators. </title> <journal> Annals of Applied Probability 1(3) </journal> <pages> 462-480, </pages> <year> 1991. </year>
Reference-contexts: Several popular RNG algorithms are known to pass the tests, including the venerable multiplicative linear congruential generator with multiplier 7 5 and modulus 2 31 1 of Lewis, Goodman, and Miller [4] and both the add-with-carry and subtract-with-borrow Fibonacci generators of Marsaglia and Zaman <ref> [5] </ref>. Other algorithms that would be expected to pass, but which have not been explicitly tested, include the combination generators of Wichmann and Hill [6] and L'Ecuyer [3] and the x 2 mod N generators of Blum, Blum, and Shub [1].
Reference: [6] <author> B. A. Wichmann and I. D. Hill. </author> <title> An Efficient and Portable Pseudo-Random Number Generator. </title> <journal> Applied Statistics 31 </journal> <pages> 188-190, </pages> <year> 1982. </year> <month> 9 </month>
Reference-contexts: Other algorithms that would be expected to pass, but which have not been explicitly tested, include the combination generators of Wichmann and Hill <ref> [6] </ref> and L'Ecuyer [3] and the x 2 mod N generators of Blum, Blum, and Shub [1]. In order to allow users to assess the suitability of the algorithm for their particular application, the implementation must describe the algorithm it uses and must document some of its properties.
References-found: 6

