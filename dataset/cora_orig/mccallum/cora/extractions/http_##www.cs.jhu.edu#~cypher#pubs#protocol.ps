URL: http://www.cs.jhu.edu/~cypher/pubs/protocol.ps
Refering-URL: http://www.cs.jhu.edu/~cypher/pubs/pubs.html
Root-URL: http://www.cs.jhu.edu
Title: Bounds on the Efficiency of Message-Passing Protocols for Parallel Computers  
Author: Robert Cypher Smaragda Konstantinidou 
Address: Baltimore, MD 21218  
Affiliation: Department of Computer Science Johns Hopkins University  
Abstract: This paper considers the problem of creating message-passing protocols for parallel computers. It is assumed that the processors are connected by a network that provides guaranteed delivery of every message, provided that each message delivered by the network is removed by the receiving processor unconditionally and in finite time. Two models of message-passing are considered, namely a selective model in which the receiver specifies the source of the message, and a nonselective model in which the receiver accepts messages from all sources. We consider only space-efficient protocols in which each processor has storage for a constant number of messages and message headers. We present three main results. First, we give a protocol for the selective model that performs a constant amount of communication per send or receive posted by the application. Second, we prove that no such efficient protocol exists for the nonselective model. Third, we present a protocol for the nonselective model that performs a logarithmic amount of communication per send or receive posted by the application. fl A preliminary version of this paper appeared in the Proceedings of the 1993 ACM Symposium on Parallel Algorithms and Architectures. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Afek and E. Gafni. </author> <title> End-to-end communication in unreliable networks. </title> <booktitle> In 7th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 131-148, </pages> <year> 1988. </year>
Reference-contexts: Numerous communication protocols have been proposed and their properties studied, particularly in the context of communication networks [13, 16]. A significant amount of work has also been done in the area of communication protocols for loosely coupled multiprocessors interconnected via a local area network or token ring <ref> [1, 15, 18, 19] </ref>. In the area of message-passing parallel computers, the assumptions regarding the properties of the system can be substantially different from those used in the area of distributed systems [5, 11].
Reference: [2] <author> G.R. Andrews and F.B. Schneider. </author> <title> Concepts and notations for concurrent programming. </title> <journal> ACM Computing Surveys, </journal> <volume> 15(1) </volume> <pages> 3-43, </pages> <year> 1983. </year>
Reference-contexts: 1 Introduction A standard model for communication in both parallel and distributed computers is the message-passing model, in which processes communicate solely by posting matching send and receive commands <ref> [2] </ref>. The implementation of a message-passing model requires a communication protocol that guarantees the delivery of messages between matching send and receive commands. Numerous communication protocols have been proposed and their properties studied, particularly in the context of communication networks [13, 16].
Reference: [3] <author> F.J. Burkowski, G.V. Cormack, and G.D.P. Dueck. </author> <title> Architectural support for synchronous task communication. </title> <booktitle> In 3rd International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 40-53, </pages> <year> 1989. </year>
Reference-contexts: In fact, a protocol requiring constant storage per processor was developed in the context of distributed operating systems <ref> [3] </ref>. In this protocol, each processor maintains a list of the messages that have been sent to the processor but have not yet been received. This list is distributed among the processors sending messages to the given processor in order to reduce the memory requirements. <p> Therefore, the lemma holds for buffer i, which is a contradiction. 2 5.2 Protocol for Nonselective Receives Our protocol for SEND and NRECV is based on the linked list protocol created by Burkowski, Cormack and Dueck <ref> [3] </ref>, which was discussed in Section 1. Recall that the linked list protocol maintains a distributed linked list of the processes attempting to SEND to each process. <p> However, we will show that it can be implemented using just a contant number of virtual networks. We will have to make two minor changes to the linked list protocol. First, the original linked list protocol <ref> [3] </ref> implemented a Reply primitive in addition to the SEND and NRECV primitives. Because we are only implementing SEND and NRECV primitives, we will only utilize the parts of the linked list protocol that correspond to the SEND and NRECV primitives 2 . Second, in the original linked list protocol [3], <p> <ref> [3] </ref> implemented a Reply primitive in addition to the SEND and NRECV primitives. Because we are only implementing SEND and NRECV primitives, we will only utilize the parts of the linked list protocol that correspond to the SEND and NRECV primitives 2 . Second, in the original linked list protocol [3], when a process is waiting in a linked list of senders and it receives a request to send its data to the receiver, it must immediately send a message containing both its data and a pointer to the next process in the linked list 3 . <p> Later, we will show how virtual networks can be used to guarantee that no outgoing FIFO remains full forever. The following properties of the modified linked list protocol are immediate from the complete description of the linked list protocol given by Burkowski et al. <ref> [3] </ref>. Theorem 5.10 If each communication process has one incoming FIFO and one outgoing FIFO, each of constant size, the messages sent by the modified linked list protocol can be divided into three classes 4 such that: 1.
Reference: [4] <editor> G. Chartrand and L. Lesniak. </editor> <title> Graphs & Digraphs. Wadsworth & Brooks/Cole Advanced Books & Software, </title> <address> Monterey, CA, </address> <note> second edition, </note> <year> 1986. </year>
Reference-contexts: Lemma 4.2 and Theorem 4.3 formalize this argument. Theorem 4.1 will be useful in proving Lemma 4.2. The following theorem follows from Turan's Theorem in extremal graph theory <ref> [4] </ref>. Theorem 4.1 For any positive integers n and k, where 2 k n 16 , every graph G with n nodes and n 2 n 2 n 2 16k edges contains a clique of k + 1 nodes as a subgraph.
Reference: [5] <author> I. Cidon and I. S. Gopal. </author> <title> Control mechanisms for high speed networks. </title> <booktitle> In IEEE International Conference on Communications, </booktitle> <pages> pages 259-263, </pages> <year> 1990. </year>
Reference-contexts: In the area of message-passing parallel computers, the assumptions regarding the properties of the system can be substantially different from those used in the area of distributed systems <ref> [5, 11] </ref>. In particular, the interconnection networks of most parallel machines in existence use blocking routing algorithms in which messages that encounter congestion are not discarded by the network. Instead, these messages continue to hold resources until they can be serviced.
Reference: [6] <author> R. Cypher and L. Gravano. </author> <title> Requirements for deadlock-free, adaptive packet routing. </title> <journal> SIAM Journal on Computing, </journal> <volume> 23(6), </volume> <year> 1994. </year>
Reference-contexts: algorithm is deadlock-free is to provide a total ordering of the buffers and to show that every packet that is not 17 in the delivery buffer of its destination node has a waiting set that contains at least one buffer with higher rank than the buffer currently holding the packet <ref> [6, 7, 17] </ref>. We will call a buffer reservation algorithm for which such an ordering of the buffers exists an ordered buffer reservation algorithm. We will prove the following theorem.
Reference: [7] <author> K. D. Gunther. </author> <title> Prevention of deadlocks in packet-switched data transport systems. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 29(4) </volume> <pages> 512-524, </pages> <year> 1981. </year>
Reference-contexts: In addition, other researchers have addressed the deadlock problems that are caused by blocking networks and finite storage at the sending and receiving processors <ref> [7, 8, 10] </ref>. However, these papers do not consider the implementation of message-passing primitives. The remainder of this paper is organized as follows. In Section 2, formal definitions of the model and of the problems being addressed are presented. An efficient protocol for selective receives is given in Section 3. <p> algorithm is deadlock-free is to provide a total ordering of the buffers and to show that every packet that is not 17 in the delivery buffer of its destination node has a waiting set that contains at least one buffer with higher rank than the buffer currently holding the packet <ref> [6, 7, 17] </ref>. We will call a buffer reservation algorithm for which such an ordering of the buffers exists an ordered buffer reservation algorithm. We will prove the following theorem.
Reference: [8] <author> C. Leiserson, Z.S. Abuhamdeh, D. Douglas, C.R. Feynmann, M. Ganmukhi, J. Hill, W.D. Hillis, B. Kuszmaul, M. St. Pierre, D. Wells, M. Wong, S-W Yang, and R. Zak. </author> <title> The network architecture of the Connection Machine CM-5. </title> <booktitle> In 4th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 272-285, </pages> <year> 1992. </year>
Reference-contexts: As a result, the interconnection network is typically guaranteed to be free of deadlock only if the following continuous consumption requirement is met: every message delivered by the network is removed by the receiving processor unconditionally and in finite time <ref> [8] </ref>. Furthermore, it is common for the processors in a parallel machine to have local memory but no disks. As a result, the communication protocol must make efficient use of the limited memory that is available. <p> In addition, other researchers have addressed the deadlock problems that are caused by blocking networks and finite storage at the sending and receiving processors <ref> [7, 8, 10] </ref>. However, these papers do not consider the implementation of message-passing primitives. The remainder of this paper is organized as follows. In Section 2, formal definitions of the model and of the problems being addressed are presented. An efficient protocol for selective receives is given in Section 3.
Reference: [9] <author> P. M. Merlin and P. J. Schweitzer. </author> <title> Deadlock avoidance in store-and-forward networks-I: Store-and-forward deadlock. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 28(3) </volume> <pages> 345-354, </pages> <year> 1980. </year>
Reference-contexts: an oblivious routing algorithm A that 31 requires constant storage per node and uses routes of length O (log n), such as the routing algorithm for a binary tree network in which each node has two buffers, one for moving up the tree and one for moving down the tree <ref> [9] </ref>. However, this approach has the disadvantage of creating a bottleneck near the root of the tree.
Reference: [10] <author> P. M. Merlin and P. J. Schweitzer. </author> <title> Deadlock avoidance in store-and-forward networks-II: Other deadlock types. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 28(3) </volume> <pages> 355-360, </pages> <year> 1980. </year>
Reference-contexts: In addition, other researchers have addressed the deadlock problems that are caused by blocking networks and finite storage at the sending and receiving processors <ref> [7, 8, 10] </ref>. However, these papers do not consider the implementation of message-passing primitives. The remainder of this paper is organized as follows. In Section 2, formal definitions of the model and of the problems being addressed are presented. An efficient protocol for selective receives is given in Section 3.
Reference: [11] <author> Y. Ofek and M. Young. </author> <title> Principles for high speed network control. </title> <booktitle> In 9th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 161-175, </pages> <year> 1990. </year> <month> 32 </month>
Reference-contexts: In the area of message-passing parallel computers, the assumptions regarding the properties of the system can be substantially different from those used in the area of distributed systems <ref> [5, 11] </ref>. In particular, the interconnection networks of most parallel machines in existence use blocking routing algorithms in which messages that encounter congestion are not discarded by the network. Instead, these messages continue to hold resources until they can be serviced.
Reference: [12] <author> G. Pifarre, L. Gravano, S. Felperin, and J. Sanz. </author> <title> Fully-adaptive minimal deadlock-free packet routing in hypercubes, meshes, and other networks. </title> <booktitle> In 3th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 278-290, </pages> <year> 1991. </year>
Reference-contexts: number of packets per SEND or NRECV posted by the application, it follows that A 00 performs only O (f (n)) communication per SEND or NRECV posted by the application. 2 The following theorem follows from a deadlock-free routing algorithm for the shu*e-exchange that was presented by Pifarre et al. <ref> [12] </ref>. Theorem 5.11 There exists an ordered buffer reservation algorithm A for an n-node point-to-point network M such that: 1. M has degree at most 3. 2. Each node in M has at most 4 buffers. 3.
Reference: [13] <author> L. Pouzin. </author> <title> Methods, tools, and observations on flow control in packet-switched data networks. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 29(4) </volume> <pages> 273-286, </pages> <year> 1981. </year>
Reference-contexts: The implementation of a message-passing model requires a communication protocol that guarantees the delivery of messages between matching send and receive commands. Numerous communication protocols have been proposed and their properties studied, particularly in the context of communication networks <ref> [13, 16] </ref>. A significant amount of work has also been done in the area of communication protocols for loosely coupled multiprocessors interconnected via a local area network or token ring [1, 15, 18, 19].
Reference: [14] <author> G. Regnier. </author> <title> Delta message passing protocol. </title> <booktitle> In First Intel Delta Applications Workshop, </booktitle> <pages> pages 173-178, </pages> <year> 1992. </year>
Reference-contexts: The storage in these buckets can be managed with a sliding window protocol in which the receiving processor grants tokens for additional messages to each sending processor. Such protocols have been used in parallel computers <ref> [14] </ref>, but the requirement of n storage buckets per processor limits their scalability. Although it is relatively easy to obtain a protocol that requires only n bits per processor (rather than n buckets), it is natural to ask if protocols exist that have constant storage requirements per processor.
Reference: [15] <author> A.P. Sistla. </author> <title> Distributed algorithms for ensuring fair interprocess communication. </title> <booktitle> In 3rd Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 266-277, </pages> <year> 1984. </year>
Reference-contexts: Numerous communication protocols have been proposed and their properties studied, particularly in the context of communication networks [13, 16]. A significant amount of work has also been done in the area of communication protocols for loosely coupled multiprocessors interconnected via a local area network or token ring <ref> [1, 15, 18, 19] </ref>. In the area of message-passing parallel computers, the assumptions regarding the properties of the system can be substantially different from those used in the area of distributed systems [5, 11].
Reference: [16] <author> A. S. Tanenbaum. </author> <title> Network protocols. </title> <journal> ACM Computing Surveys, </journal> <volume> 13(4) </volume> <pages> 175-211, </pages> <year> 1981. </year>
Reference-contexts: The implementation of a message-passing model requires a communication protocol that guarantees the delivery of messages between matching send and receive commands. Numerous communication protocols have been proposed and their properties studied, particularly in the context of communication networks <ref> [13, 16] </ref>. A significant amount of work has also been done in the area of communication protocols for loosely coupled multiprocessors interconnected via a local area network or token ring [1, 15, 18, 19]. <p> One simple type of communication protocol for n processors requires the static allocation of n storage buckets per processor, where each bucket can store one or more messages <ref> [16] </ref>. The storage in these buckets can be managed with a sliding window protocol in which the receiving processor grants tokens for additional messages to each sending processor. Such protocols have been used in parallel computers [14], but the requirement of n storage buckets per processor limits their scalability.
Reference: [17] <author> S. Toueg and K. Steiglitz. </author> <title> Some complexity results in the design of deadlock-free packet switching networks. </title> <journal> SIAM Journal on Computing, </journal> <volume> 10(4) </volume> <pages> 702-712, </pages> <year> 1981. </year>
Reference-contexts: algorithm is deadlock-free is to provide a total ordering of the buffers and to show that every packet that is not 17 in the delivery buffer of its destination node has a waiting set that contains at least one buffer with higher rank than the buffer currently holding the packet <ref> [6, 7, 17] </ref>. We will call a buffer reservation algorithm for which such an ordering of the buffers exists an ordered buffer reservation algorithm. We will prove the following theorem.
Reference: [18] <author> R.W. Watson. </author> <title> The Delta-t transport protocol: Features and expansions. </title> <booktitle> In 14th Conference on Local Computer Networks, </booktitle> <pages> pages 399-407, </pages> <year> 1989. </year>
Reference-contexts: Numerous communication protocols have been proposed and their properties studied, particularly in the context of communication networks [13, 16]. A significant amount of work has also been done in the area of communication protocols for loosely coupled multiprocessors interconnected via a local area network or token ring <ref> [1, 15, 18, 19] </ref>. In the area of message-passing parallel computers, the assumptions regarding the properties of the system can be substantially different from those used in the area of distributed systems [5, 11].
Reference: [19] <author> C.L. Williamson and D.R. Cheriton. </author> <title> An overview of the VMTP transport protocol. </title> <booktitle> In 14th Conference on Local Computer Networks, </booktitle> <pages> pages 415-420, </pages> <year> 1989. </year> <month> 33 </month>
Reference-contexts: Numerous communication protocols have been proposed and their properties studied, particularly in the context of communication networks [13, 16]. A significant amount of work has also been done in the area of communication protocols for loosely coupled multiprocessors interconnected via a local area network or token ring <ref> [1, 15, 18, 19] </ref>. In the area of message-passing parallel computers, the assumptions regarding the properties of the system can be substantially different from those used in the area of distributed systems [5, 11].
References-found: 19

