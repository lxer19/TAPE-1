URL: http://rakaposhi.eas.asu.edu/ewsp-univplan.ps
Refering-URL: http://rakaposhi.eas.asu.edu/yochan.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: email: frao,biplavg@asu.edu  
Title: Universal Classical Planner: An algorithm for unifying State-space and Plan-space planning  
Author: Subbarao Kambhampati Biplav Srivastava 
Note: Appears in Current Trends in AI Planning: EWSP '95, IOS Press  
Web: WWW: http://rakaposhi.eas.asu.edu:8001/yochan.html  
Address: Tempe AZ 85287-5406  
Affiliation: Department of Computer Science and Engineering Arizona State University,  
Abstract: We present a plan representation and a generalized algorithm template, called UCP, for unifying the classical plan-space and state-space planning approaches within a single framework. UCP models planning as a process of refining a partial plan. The plan-space and state-space planning approaches are cast as complementary refinement strategies operating on the same partial plan representation. UCP has the freedom to arbitrarily and opportunistically interleave plan-space and state-space refinements within a single planning episode. This allows it reap the benefits of both state-space and plan-space planning approaches. We discuss the coverage, completeness and systematicity of UCP. We also present some preliminary empirical results that demonstrate the utility of combining state-space and plan-space approaches.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Barrett and D. Weld. </author> <title> Partial Order Planning: Evaluating Possible Efficiency Gains. </title> <journal> Artificial Intelligence, </journal> <volume> Vol. 67, No. 1, </volume> <year> 1994. </year>
Reference-contexts: 1 Introduction Domain independent classical planning techniques fall into two broad categories-- state space planners which search in the space of states, and plan space planners which search in the space of plans. Although most current research in planning is rooted in plan-space planning <ref> [1, 15, 10] </ref>, it is believed that the ``state'' information provided by the state-space planners could be advantageous in some situations either for improving planning performance (c.f. [18]), or for combining general purpose planners with specialists [13]. <p> Unfortunately, however, there has not been a systematic analysis of when state-space planning could be more advantageous over plan-space planning. This is partly due to the fact that plan-space and state-space planners have been seen as ``competing'' (rather than ``complementary'') approaches involving search in fundamentally different search spaces <ref> [1, 18] </ref>. A more fruitful way of understanding the relative tradeoffs between plan-space and state-space planners would be to develop a unifying planning framework that encompasses them both. fl Authors names are listed in alphabetical order. <p> The traditional question ``when should a plan-space planner be preferred over state space planners?'' <ref> [1, 18] </ref> can now be posed in a more sophisticated form: ``when should a plan-space refinement be preferred over a state-space refinement (or vice versa) within a single planning episode?.'' The rest of this paper is organized as follows. In Section 2, we review the preliminaries of refinement planning. <p> Each point in the plot corresponds to the average over ten problems of a given number of goals. Missing points in a plot signify that the planner could not solve some of the ten problems within the allotted cpu time. <ref> [1] </ref> to demonstrate the advantages of plan space planning over state space planning. In this domain, each top level goal G i can be achieved by either of two actions A 1 i or A 2 i . <p> In other words, even a domain that motivates pure plan-space planning over pure state space planning <ref> [1] </ref>, can benefit from a proper mix of the two types refinements! Finally, Figure 9 compares the performance of pure and hybrid instantiations of UCP in the standard blocks world domain (which, unlike the three artificial domains, is a non-propositional domain).
Reference: [2] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32:333--377, </volume> <year> 1987. </year>
Reference-contexts: Point Truth Constraints: A point truth constraint (PTC) is specified as a 2-tuple: hp; ti. Syntactically, it demands that the condition p be necessarily true <ref> [2] </ref> in the situation before the step t. Semantically, it constrains all solutions of the partial plan to have p in the state in which the operator corresponding to t is executed. <p> In particular, in [10, 8, 9], we showed that the plan space refinement template, given in Figure 5 covers the complete spectrum of plan space planners, including UA, TO [15], SNLP [12], and TWEAK <ref> [2] </ref>. What is more interesting, as shown in Section 4.1, the UCP algorithm also allows hybrid planners that can opportunistically apply plan-space as well as state-space refinements within a single planning episode.
Reference: [3] <author> R. Fikes and N. Nilsson. </author> <title> STRIPS: A new approach to the application of theorem proving to problem solving. In Readings in Planning. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: What is more interesting, as shown in Section 4.1, the UCP algorithm also allows hybrid planners that can opportunistically apply plan-space as well as state-space refinements within a single planning episode. For example, the classical means-ends analysis planners such as STRIPS <ref> [3] </ref>, or their descendents such as PRODIGY [4] can be modeled by a pick-refinement such as the following: If there is a step in 7 the head-fringe of the plan that is applicable to the head-state, pick forward state space refinement. Else, pick plan-space refinement.
Reference: [4] <author> E. Fink and M. Veloso. </author> <title> Formalizing the Prodigy Planning Algorithm. </title> <type> CMU CS Tech. Report, </type> <month> Fall </month> <year> 1994. </year> <title> 5 FSS and BSS refinements can be seen as blocking steps to the prefix and suffix of the plan 12 </title>
Reference-contexts: Since all three refinement strategies operate on the same general partial plan representation, UCP also facilitates opportunistic interleaving of the plan-space and state-space refinements within a single planning episode. Such interleaving could produce a variety of hybrid planners (including the traditional means-ends analysis planners such as STRIPS and PRODIGY <ref> [4] </ref>), and can thus help us reap the benefits of both state-space and plan-space approaches in a principled manner. <p> What is more interesting, as shown in Section 4.1, the UCP algorithm also allows hybrid planners that can opportunistically apply plan-space as well as state-space refinements within a single planning episode. For example, the classical means-ends analysis planners such as STRIPS [3], or their descendents such as PRODIGY <ref> [4] </ref> can be modeled by a pick-refinement such as the following: If there is a step in 7 the head-fringe of the plan that is applicable to the head-state, pick forward state space refinement. Else, pick plan-space refinement. <p> The plan-space refinement in Figure 5 is directly taken from this latter work. To our knowledge, this paper is the first to rationally place the plan-space and state-space refinements in one unifying framework. Fink and Veloso <ref> [4] </ref> describe the PRODIGY 4.0 planner which does an interesting combination of forward state space refinement combined with means-ends analysis. There are several differences between the PRODIGY 4.0 algorithm and the approach presented 4 In this domain, the initial state contains either Q ff or Q fi .
Reference: [5] <author> M. Ginsberg. </author> <title> Approximate Planning. </title> <journal> Artificial Intelligence, Special Issue on Planning, Scheduling and Control. </journal> <year> 1995. </year>
Reference-contexts: We will see that this extension is enough to handle state space refinements. The contiguity constraints are first described by Ginsberg in <ref> [5] </ref>. 2 hr@t 1 i hw@t 1 i t2:o2 t3:o3 t5:o5 t 1 (q) (s) +r, +p :r , +u ht1,q, t2i +w, +v : r, +q the preconditions are shown below the steps in parentheses. The ordering constraints between steps are shown by arrows.
Reference: [6] <author> D. Joslin and M. Pollack. </author> <title> Least-cost flaw repair: A plan refinement strategy for partial order planning. </title> <booktitle> Proceedings of AAAI-94, </booktitle> <year> 1994. </year>
Reference-contexts: Else, pick plan-space refinement. Finally, it is also possible to use a more ambitious pick-refinement strategy: pick the refinement that has the least expected cost (see below) <ref> [6] </ref>. Completeness: It is fairly straightforward to show that the three refinement strategies FSS, BSS are individually complete in that they do not lose any potential solutions. The completeness of PS refinement follows from the results of Pednault [16, 10]. <p> The third one, called UCP-LCFR, estimates the number of refinements generated by each of the three refinement strategies and selects the one that has the least number of refinements. This strategy is inspired by the least cost flaw refinement strategy, that was recently suggested by Joslin and Pollack <ref> [6] </ref>. If a PS refinement is selected, UCP still faces the decision of which goal to achieve (each choice corresponds to a complete PS refinement with respect to that goal). <p> The time limit was increased to 300 seconds in the case of UCP-LCFR as our simple implementation estimates the branching factors of each refinement by actually simulating the refinement (other more efficient approximate estimation methods are of course possible; see <ref> [6] </ref>). Domains and Results: We conducted experiments both in blocks world and in a variety of artificial domains designed by various researchers to showcase the advantages of one planning approach over another. Our intent was to show that appropriate hybrid instantiations of UCP may do well in all such domains.
Reference: [7] <author> S. Kambhampati and B. Srivastava. </author> <title> Universal Classical Planner: </title> <type> The details ASU CSE Tech. Report., </type> <note> 1995 (in preparation). </note>
Reference: [8] <author> S. Kambhampati. </author> <title> Refinement search as a unifying framework for analyzing planning algorithms. </title> <booktitle> In Proc. </booktitle> <address> KR-94, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: We thank Laurie Ihrig and Craig Knoblock for helpful comments. 0 Previously, we have shown that viewing planning as a process of refinement search provides a powerful framework for unifying the large variety of plan-space planning approaches <ref> [10, 8, 9] </ref>. In this paper, we show that the same framework can be extended to unify state-space planning and plan-space planning approaches. In particular, we present UCP, a generalized algorithm for classical planning. <p> Refinement planners <ref> [10, 8, 9] </ref> attempt to solve a planning problem by navigating the space of sets of potential solutions (ground operator sequences). <p> Refinement planning involves repeatedly applying refinement operators to a partial plan until a solution can be picked up from the candidate set 1 For a more formal development of the refinement search semantics of partial plans, see <ref> [8, 10] </ref> 1 of the resulting plan. A refinement operator R is said to be complete if every solution belonging to the candidate set of P belongs to the candidate set of at least one of the children plans. <p> Readers who are familiar with the refinement search view of partial order planning developed in <ref> [10, 8, 9] </ref> may note that the only extension to the plan representation is the addition of the new type of auxiliary constraints called contiguity constraints. We will see that this extension is enough to handle state space refinements. <p> The semantic notion of the candidate set of the partial plan is tightly related to a syntactic notion of safe ground linearization <ref> [10, 8] </ref>. Specifically, safe ground linearizations correspond to minimal length candidates of the partial plan [10]. If a partial plan has no safe ground linearizations, it has an empty candidate set. <p> Finally, the PS refinement, given in Figure 5, is more involved than the two state space refinements. As we showed in <ref> [8, 9, 10] </ref>, a general PS refinement involves an establishment refinement phase, and an optional tractability refinement phase. <p> To make this tractable, the optional tractability refinement phase introduces additional orderings between the steps of the plan. Pre-ordering and conflict resolution are two common strategies used in this regard. For a more elaborate discussion of the details of the PS refinement, the reader is urged to consult <ref> [10, 9, 8] </ref>. Termination Check: At each refinement cycle, the UCP algorithm checks to see if the search can be terminated successfully. As we mentioned earlier, termination can occur on a partial plan whenever we can pick a solution from the candidate set of the partial plan. <p> In particular, in <ref> [10, 8, 9] </ref>, we showed that the plan space refinement template, given in Figure 5 covers the complete spectrum of plan space planners, including UA, TO [15], SNLP [12], and TWEAK [2]. <p> other features that are may be more indicative of the cost of a refinement. 8 Related Work Earlier work on unifying classical planning approaches includes Rosenchien's work [17] on bigression planner, which combines a forward state space search and a backward state space search; and our own more recent work <ref> [10, 8, 9] </ref> unifying a variety of plan-space planning frameworks into one algorithm template. The plan-space refinement in Figure 5 is directly taken from this latter work. To our knowledge, this paper is the first to rationally place the plan-space and state-space refinements in one unifying framework.
Reference: [9] <author> S. Kambhampati. </author> <title> Design Tradeoffs in Partial Order (Plan Space) Planning. </title> <booktitle> In Proc. 2nd Intl. Conf. on AI Planning Systems (AIPS-94), </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: We thank Laurie Ihrig and Craig Knoblock for helpful comments. 0 Previously, we have shown that viewing planning as a process of refinement search provides a powerful framework for unifying the large variety of plan-space planning approaches <ref> [10, 8, 9] </ref>. In this paper, we show that the same framework can be extended to unify state-space planning and plan-space planning approaches. In particular, we present UCP, a generalized algorithm for classical planning. <p> Refinement planners <ref> [10, 8, 9] </ref> attempt to solve a planning problem by navigating the space of sets of potential solutions (ground operator sequences). <p> Readers who are familiar with the refinement search view of partial order planning developed in <ref> [10, 8, 9] </ref> may note that the only extension to the plan representation is the addition of the new type of auxiliary constraints called contiguity constraints. We will see that this extension is enough to handle state space refinements. <p> Finally, the PS refinement, given in Figure 5, is more involved than the two state space refinements. As we showed in <ref> [8, 9, 10] </ref>, a general PS refinement involves an establishment refinement phase, and an optional tractability refinement phase. <p> To make this tractable, the optional tractability refinement phase introduces additional orderings between the steps of the plan. Pre-ordering and conflict resolution are two common strategies used in this regard. For a more elaborate discussion of the details of the PS refinement, the reader is urged to consult <ref> [10, 9, 8] </ref>. Termination Check: At each refinement cycle, the UCP algorithm checks to see if the search can be terminated successfully. As we mentioned earlier, termination can occur on a partial plan whenever we can pick a solution from the candidate set of the partial plan. <p> In particular, in <ref> [10, 8, 9] </ref>, we showed that the plan space refinement template, given in Figure 5 covers the complete spectrum of plan space planners, including UA, TO [15], SNLP [12], and TWEAK [2]. <p> other features that are may be more indicative of the cost of a refinement. 8 Related Work Earlier work on unifying classical planning approaches includes Rosenchien's work [17] on bigression planner, which combines a forward state space search and a backward state space search; and our own more recent work <ref> [10, 8, 9] </ref> unifying a variety of plan-space planning frameworks into one algorithm template. The plan-space refinement in Figure 5 is directly taken from this latter work. To our knowledge, this paper is the first to rationally place the plan-space and state-space refinements in one unifying framework.
Reference: [10] <author> S. Kambhampati, C. Knoblock and Q. Yang. </author> <title> Planning as Refinement Search: A Unified framework for evaluating design tradeoffs in partial order planning. </title> <journal> Artificial Intelligence special issue on Planning and Scheduling. </journal> <volume> Vol. 76. </volume> <year> 1995. </year>
Reference-contexts: 1 Introduction Domain independent classical planning techniques fall into two broad categories-- state space planners which search in the space of states, and plan space planners which search in the space of plans. Although most current research in planning is rooted in plan-space planning <ref> [1, 15, 10] </ref>, it is believed that the ``state'' information provided by the state-space planners could be advantageous in some situations either for improving planning performance (c.f. [18]), or for combining general purpose planners with specialists [13]. <p> We thank Laurie Ihrig and Craig Knoblock for helpful comments. 0 Previously, we have shown that viewing planning as a process of refinement search provides a powerful framework for unifying the large variety of plan-space planning approaches <ref> [10, 8, 9] </ref>. In this paper, we show that the same framework can be extended to unify state-space planning and plan-space planning approaches. In particular, we present UCP, a generalized algorithm for classical planning. <p> Refinement planners <ref> [10, 8, 9] </ref> attempt to solve a planning problem by navigating the space of sets of potential solutions (ground operator sequences). <p> Refinement planning involves repeatedly applying refinement operators to a partial plan until a solution can be picked up from the candidate set 1 For a more formal development of the refinement search semantics of partial plans, see <ref> [8, 10] </ref> 1 of the resulting plan. A refinement operator R is said to be complete if every solution belonging to the candidate set of P belongs to the candidate set of at least one of the children plans. <p> Readers who are familiar with the refinement search view of partial order planning developed in <ref> [10, 8, 9] </ref> may note that the only extension to the plan representation is the addition of the new type of auxiliary constraints called contiguity constraints. We will see that this extension is enough to handle state space refinements. <p> The PTCs are used to specify the goals of the plan Safe Ground Linearizations: A ground linearization is said to be a safe ground linearization if it syntactically satisfies all the contiguity constraints, and the interval preservation constraints <ref> [10] </ref>. The semantic notion of the candidate set of the partial plan is tightly related to a syntactic notion of safe ground linearization [10, 8]. Specifically, safe ground linearizations correspond to minimal length candidates of the partial plan [10]. <p> The semantic notion of the candidate set of the partial plan is tightly related to a syntactic notion of safe ground linearization <ref> [10, 8] </ref>. Specifically, safe ground linearizations correspond to minimal length candidates of the partial plan [10]. If a partial plan has no safe ground linearizations, it has an empty candidate set. <p> it syntactically satisfies all the contiguity constraints, and the interval preservation constraints <ref> [10] </ref>. The semantic notion of the candidate set of the partial plan is tightly related to a syntactic notion of safe ground linearization [10, 8]. Specifically, safe ground linearizations correspond to minimal length candidates of the partial plan [10]. If a partial plan has no safe ground linearizations, it has an empty candidate set. <p> Finally, the PS refinement, given in Figure 5, is more involved than the two state space refinements. As we showed in <ref> [8, 9, 10] </ref>, a general PS refinement involves an establishment refinement phase, and an optional tractability refinement phase. <p> To make this tractable, the optional tractability refinement phase introduces additional orderings between the steps of the plan. Pre-ordering and conflict resolution are two common strategies used in this regard. For a more elaborate discussion of the details of the PS refinement, the reader is urged to consult <ref> [10, 9, 8] </ref>. Termination Check: At each refinement cycle, the UCP algorithm checks to see if the search can be terminated successfully. As we mentioned earlier, termination can occur on a partial plan whenever we can pick a solution from the candidate set of the partial plan. <p> There may of course be more specialized realizations of the termination check that are more efficient for specific instantiations of UCP. For example, pure plan space planners using causal links can use a causal link based termination check used in SNLP <ref> [12, 10] </ref>. Similarly, if we are using only the FSS and BSS refinements, then the plan can terminate as soon as the head step is introduced into the trailer, or vice versa. Consistency Check: At each refinement cycle, UCP uses an optional consistency check to prune out unpromising refinements. <p> In particular, in <ref> [10, 8, 9] </ref>, we showed that the plan space refinement template, given in Figure 5 covers the complete spectrum of plan space planners, including UA, TO [15], SNLP [12], and TWEAK [2]. <p> Completeness: It is fairly straightforward to show that the three refinement strategies FSS, BSS are individually complete in that they do not lose any potential solutions. The completeness of PS refinement follows from the results of Pednault <ref> [16, 10] </ref>. <p> Recall that as pointed out by McAllester (see <ref> [12, 10] </ref>), PS refinement is systematic as long as the book-keeping step uses contributor protections (that is, whenever a precondition p of a step t is established through the effects of another step t 0 , two IPCs ht 0 ; p; ti and ht 0 ; :p; ti are added <p> book-keeping step uses contributor protections (that is, whenever a precondition p of a step t is established through the effects of another step t 0 , two IPCs ht 0 ; p; ti and ht 0 ; :p; ti are added to the list of auxiliary constraints of the plan <ref> [10] </ref>). Since the systematicity claim may not be obvious at first glance, we will provide a proof sketch in Appendix A. 6 Controlling UCP In this section, we will consider the types of control strategies (heuristics, pruning techniques, selection strategies etc.) that are appropriate for UCP. <p> In addition to the 3 This is true as long as UCP uses a termination criterion that effectively checks to see if a safe ground linearization of the plan corresponds to the solution (see <ref> [10] </ref>). 8 goal selection strategies used by pure plan space planners, UCP could also use the head state information. <p> not already true in the head state, or give preference to the preconditions of operators on the head fringe that have least number of unsatisfied preconditions. 7 Preliminary empirical studies on the utility of interleaving refinements We have implemented the UCP algorithm on top of the Refine-Plan implementation described in <ref> [10] </ref>. Since UCP provides a framework to interleave the three different refinements within a single problem episode, we conducted several preliminary experiments to evaluate the advantages of such interleaving. Experimental Setup: We considered six different instantiations of UCP. <p> The other three, UCP-MEA, UCP-MBA and UCP-LCFR correspond to the three hybrid refinement strategies described in the previous section. Although the plan space refinement can have considerable variation <ref> [10] </ref> based on the protection strategies and goal selection strategies used, in our experiments, we kept it constant. We used a simple LIFO strategy for selecting the open-condition to be established, contributor protections for bookkeeping, and conflict resolution for tractability refinements. <p> We used a simple LIFO strategy for selecting the open-condition to be established, contributor protections for bookkeeping, and conflict resolution for tractability refinements. This is equivalent to the refinement strategy used by SNLP <ref> [12, 10] </ref>. (In [10] we discuss the performance tradeoffs offered by the other ways of instantiating the plan-space refinement). <p> We used a simple LIFO strategy for selecting the open-condition to be established, contributor protections for bookkeeping, and conflict resolution for tractability refinements. This is equivalent to the refinement strategy used by SNLP [12, 10]. (In <ref> [10] </ref> we discuss the performance tradeoffs offered by the other ways of instantiating the plan-space refinement). <p> other features that are may be more indicative of the cost of a refinement. 8 Related Work Earlier work on unifying classical planning approaches includes Rosenchien's work [17] on bigression planner, which combines a forward state space search and a backward state space search; and our own more recent work <ref> [10, 8, 9] </ref> unifying a variety of plan-space planning frameworks into one algorithm template. The plan-space refinement in Figure 5 is directly taken from this latter work. To our knowledge, this paper is the first to rationally place the plan-space and state-space refinements in one unifying framework.
Reference: [11] <author> S. Kambhampati. </author> <title> A comparative analysis of partial-order planning and task reduction planning. </title> <journal> ACM SIGART Bulletin, Special Section on Evaluating Plans, Planners and Planning agents, </journal> <volume> Vol. 6., No. 1, </volume> <month> January, </month> <year> 1995. </year>
Reference-contexts: Several other extensions are planned for the long term. First, although we concentrated on unifying state space and plan-space planning approaches in this paper, our framework is powerful enough to also include the task reduction planning approach. In particular, in <ref> [11] </ref>, we describe how task reduction planning and plan-space planning can be put in a common refinement planning framework. That approach can be used to extend UCP in a straightforward way to cover task reduction planners.
Reference: [12] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic Nonlinear Planning. </title> <booktitle> In Proc. 9th AAAI, </booktitle> <year> 1991. </year>
Reference-contexts: Similarly, if all the refinement operators are systematic, the search space of the planner will be systematic in that no ground operator sequence will belong to the candidate sets of plans in more than one branch of the search tree <ref> [12] </ref>. <p> There may of course be more specialized realizations of the termination check that are more efficient for specific instantiations of UCP. For example, pure plan space planners using causal links can use a causal link based termination check used in SNLP <ref> [12, 10] </ref>. Similarly, if we are using only the FSS and BSS refinements, then the plan can terminate as soon as the head step is introduced into the trailer, or vice versa. Consistency Check: At each refinement cycle, UCP uses an optional consistency check to prune out unpromising refinements. <p> In particular, in [10, 8, 9], we showed that the plan space refinement template, given in Figure 5 covers the complete spectrum of plan space planners, including UA, TO [15], SNLP <ref> [12] </ref>, and TWEAK [2]. What is more interesting, as shown in Section 4.1, the UCP algorithm also allows hybrid planners that can opportunistically apply plan-space as well as state-space refinements within a single planning episode. <p> Recall that as pointed out by McAllester (see <ref> [12, 10] </ref>), PS refinement is systematic as long as the book-keeping step uses contributor protections (that is, whenever a precondition p of a step t is established through the effects of another step t 0 , two IPCs ht 0 ; p; ti and ht 0 ; :p; ti are added <p> We used a simple LIFO strategy for selecting the open-condition to be established, contributor protections for bookkeeping, and conflict resolution for tractability refinements. This is equivalent to the refinement strategy used by SNLP <ref> [12, 10] </ref>. (In [10] we discuss the performance tradeoffs offered by the other ways of instantiating the plan-space refinement).
Reference: [13] <author> D. McDermott. </author> <title> Invited talk, </title> <address> AIPS-94, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Although most current research in planning is rooted in plan-space planning [1, 15, 10], it is believed that the ``state'' information provided by the state-space planners could be advantageous in some situations either for improving planning performance (c.f. [18]), or for combining general purpose planners with specialists <ref> [13] </ref>. Unfortunately, however, there has not been a systematic analysis of when state-space planning could be more advantageous over plan-space planning.
Reference: [14] <author> S. Minton. </author> <title> Learning Effective Search Control Knowledge: An Explanation-Based Approach. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1988. </year>
Reference-contexts: The problems were generated using the random blocks world problem generator described in <ref> [14] </ref>. Each data point represents the average over 10 random problems 10 containing a specified number of blocks. The data points in the graph correspond to situations where all 10 random problems were solved by the specific instantiation of UCP.
Reference: [15] <author> S. Minton, J. Bresina and M. Drummond. </author> <title> Total Order and Partial Order Planning: a comparative analysis. </title> <note> Journal of Artificial Intelligence Research 2 (1994) 227-262. </note>
Reference-contexts: 1 Introduction Domain independent classical planning techniques fall into two broad categories-- state space planners which search in the space of states, and plan space planners which search in the space of plans. Although most current research in planning is rooted in plan-space planning <ref> [1, 15, 10] </ref>, it is believed that the ``state'' information provided by the state-space planners could be advantageous in some situations either for improving planning performance (c.f. [18]), or for combining general purpose planners with specialists [13]. <p> In particular, in [10, 8, 9], we showed that the plan space refinement template, given in Figure 5 covers the complete spectrum of plan space planners, including UA, TO <ref> [15] </ref>, SNLP [12], and TWEAK [2]. What is more interesting, as shown in Section 4.1, the UCP algorithm also allows hybrid planners that can opportunistically apply plan-space as well as state-space refinements within a single planning episode.
Reference: [16] <author> E.P.D. Pednault. </author> <title> Generalizing nonlinear planning to handle complex goals and actions with context dependent effects. </title> <booktitle> In Proc. IJCAI-91, </booktitle> <year> 1991. </year>
Reference-contexts: Completeness: It is fairly straightforward to show that the three refinement strategies FSS, BSS are individually complete in that they do not lose any potential solutions. The completeness of PS refinement follows from the results of Pednault <ref> [16, 10] </ref>.
Reference: [17] <author> S. Rosenchien. </author> <title> Plan Synthesis: A logical perspective. </title> <booktitle> Proc. IJCAI-81, </booktitle> <year> 1981. </year>
Reference-contexts: We are currently exploring other features that are may be more indicative of the cost of a refinement. 8 Related Work Earlier work on unifying classical planning approaches includes Rosenchien's work <ref> [17] </ref> on bigression planner, which combines a forward state space search and a backward state space search; and our own more recent work [10, 8, 9] unifying a variety of plan-space planning frameworks into one algorithm template. The plan-space refinement in Figure 5 is directly taken from this latter work.
Reference: [18] <author> M. Veloso and J. Blythe. Linkability: </author> <title> Examining causal link commitments in partial-order planning. </title> <booktitle> Proceedings of AIPS-94, </booktitle> <year> 1994. </year>
Reference-contexts: Although most current research in planning is rooted in plan-space planning [1, 15, 10], it is believed that the ``state'' information provided by the state-space planners could be advantageous in some situations either for improving planning performance (c.f. <ref> [18] </ref>), or for combining general purpose planners with specialists [13]. Unfortunately, however, there has not been a systematic analysis of when state-space planning could be more advantageous over plan-space planning. <p> Unfortunately, however, there has not been a systematic analysis of when state-space planning could be more advantageous over plan-space planning. This is partly due to the fact that plan-space and state-space planners have been seen as ``competing'' (rather than ``complementary'') approaches involving search in fundamentally different search spaces <ref> [1, 18] </ref>. A more fruitful way of understanding the relative tradeoffs between plan-space and state-space planners would be to develop a unifying planning framework that encompasses them both. fl Authors names are listed in alphabetical order. <p> The traditional question ``when should a plan-space planner be preferred over state space planners?'' <ref> [1, 18] </ref> can now be posed in a more sophisticated form: ``when should a plan-space refinement be preferred over a state-space refinement (or vice versa) within a single planning episode?.'' The rest of this paper is organized as follows. In Section 2, we review the preliminaries of refinement planning. <p> Our intent was to show that appropriate hybrid instantiations of UCP may do well in all such domains. The first domain, called link-chain domain, was designed by Veloso & Blythe <ref> [18] </ref> to showcase the advantages of state space means-ends analysis planners over plan-space planners. This domain contains ten actions A 1 to A 10 .
Reference: [19] <author> D. Weld. </author> <title> Introduction to Partial Order Planning. </title> <journal> AI Magazine, </journal> <volume> Vol. 15, No. 4, </volume> <year> 1994. </year>
References-found: 19

