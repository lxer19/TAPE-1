URL: http://dimacs.rutgers.edu/Workshops/Security/program2/quisquater.ps
Refering-URL: http://dimacs.rutgers.edu/Workshops/Security/program2/program.html
Root-URL: http://www.cs.rutgers.edu
Email: Email: jjq@dice.ucl.ac.be  Email: joye@agel.ucl.ac.be  
Phone: 2  
Title: Cautionary note for protocol designers: Security proof is not enough  
Author: Aurore Gillet Marc Joye and Jean-Jacques Quisquater 
Web: URL: http://www.dice.ucl.ac.be/crypto/  
Address: Place du Levant 3, B-1348 Louvain-la-Neuve, Belgium  Chemin du Cyclotron 2, B-1348 Louvain-la-Neuve, Belgium  
Affiliation: 1 UCL Crypto Group, Microelectronics Labs, University of Louvain  UCL Crypto Group, Dept of Mathematics, University of Louvain  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. Abadi and R. Needham. </author> <title> Prudent engineering practice for cryptographic protocols. </title> <booktitle> In 1994 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 122-136. </pages> <publisher> IEEE Press, </publisher> <year> 1994. </year>
Reference-contexts: Some researchers proposed formal techniques for analyzing the soundness of protocols, such as the BAN logic [4] or the three systems presented in [8]. Another approach for the protocol designer is to try to find flaws in his protocol with all his experience of good and bad practice. In <ref> [1] </ref>, Abadi and Needham give general rules helping protocol designers to avoid many of the pitfalls (see also [2]).
Reference: [2] <author> R. Anderson and R. Needham. </author> <title> Robustness principles for public key protocols. </title> <editor> In D. Coppersmith, editor, </editor> <booktitle> Advances in Cryptology - Crypto '95, volume 963 of Lecture Notes in Computer Science, </booktitle> <pages> pages 236-247. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Another approach for the protocol designer is to try to find flaws in his protocol with all his experience of good and bad practice. In [1], Abadi and Needham give general rules helping protocol designers to avoid many of the pitfalls (see also <ref> [2] </ref>). In this paper, we push their work further, and show that the protocol designers must also take care about the hardware and software implementation of the protocol. 2 Cycling attack against faulty hardware We shall illustrate this attack in the RSA signature context.
Reference: [3] <author> D. Boneh, R. A. DeMillo, and R. J. Lipton. </author> <title> On the importance of checking cryptographic protocols for faults. </title> <editor> In W. Fumy, editor, </editor> <booktitle> Advances in Cryptology - Eurocrypt '97, volume 1233 of Lecture Notes in Computer Science, </booktitle> <pages> pages 37-51. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Hence, q = n B =p and Carol can compute the secret decryption key d B [10, 7]. This second attack is more dangerous because it completely breaks the system. This shows clearly the importance of checking cryptographic protocols for faults <ref> [3] </ref>. Note also that if Bob protects his bin, the attack does 2 e B c Alice d B Carol not remain applicable. The two previous attacks show that it is extremely difficult for a protocol designer to determine whether his protocol is sound, even for very simple protocols. <p> The second warning of this paper is that the protocols must be faults resistant, or at least must provide for how to react in the case of faults. The correctness verification cannot always be achieved by doing calculations 8 twice as proposed in <ref> [3] </ref>. Our cycling attack can pass through this test. The verification must be done by another (proved secure) way. For example, the Lenstra's attack (see Fig. 2) can be avoided as follows [14]. We use the same notations as in Section 1 (Introduction).
Reference: [4] <author> M. Burrows, M. Abadi, and R. Needham. </author> <title> A logic of authentication. </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> 8(1) </volume> <pages> 18-36, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: The two previous attacks show that it is extremely difficult for a protocol designer to determine whether his protocol is sound, even for very simple protocols. Some researchers proposed formal techniques for analyzing the soundness of protocols, such as the BAN logic <ref> [4] </ref> or the three systems presented in [8]. Another approach for the protocol designer is to try to find flaws in his protocol with all his experience of good and bad practice.
Reference: [5] <author> G. Davida. </author> <title> Chosen signature cryptanalysis of the RSA (MIT) public key cryptosystem. </title> <type> Technical Report TR-CS-82-2, </type> <institution> Dept. of Electrical Engineering and Computer Science, University of Wisconsin, Milwau-kee, USA, </institution> <month> October </month> <year> 1982. </year>
Reference-contexts: Since m 0 is meaningless, Bob discards it. If Carol can get access to this discard, she finds m = m 0 k 1 mod n B . This failure was first pointed out by Davida <ref> [5] </ref>. Avoiding this attack is easy, the users have to really destroy the discards, or in other words to protect their bins.
Reference: [6] <author> A. Gillet, M. Joye, and J.-J. Quisquater. </author> <title> Cycling attacks against faulty hardware. </title> <type> Technical Report CG-1997/6, </type> <institution> UCL Crypto Group, Louvain-la-Neuve, </institution> <month> June </month> <year> 1997. </year>
Reference: [7] <author> M. Joye, A. K. Lenstra, and J.-J. Quisquater. </author> <title> Chinese remaindering in the presence of faults. </title> <note> Submitted to Journal of Cryptology. </note>
Reference-contexts: Hence, q = n B =p and Carol can compute the secret decryption key d B <ref> [10, 7] </ref>. This second attack is more dangerous because it completely breaks the system. This shows clearly the importance of checking cryptographic protocols for faults [3]. Note also that if Bob protects his bin, the attack does 2 e B c Alice d B Carol not remain applicable.
Reference: [8] <author> R. Kemmerer, C. Meadows, and J. Millen. </author> <title> Three systems for cryptographic protocol analysis. </title> <journal> Journal of Cryptology, </journal> <volume> 7(2) </volume> <pages> 79-130, </pages> <year> 1994. </year> <month> 9 </month>
Reference-contexts: The two previous attacks show that it is extremely difficult for a protocol designer to determine whether his protocol is sound, even for very simple protocols. Some researchers proposed formal techniques for analyzing the soundness of protocols, such as the BAN logic [4] or the three systems presented in <ref> [8] </ref>. Another approach for the protocol designer is to try to find flaws in his protocol with all his experience of good and bad practice. In [1], Abadi and Needham give general rules helping protocol designers to avoid many of the pitfalls (see also [2]).
Reference: [9] <author> D. E. Knuth. </author> <booktitle> The art of computer programming: Volume 2/Seminu--merical algorithms. </booktitle> <publisher> Addison-Wesley, </publisher> <address> 2nd edition, </address> <year> 1981. </year>
Reference-contexts: Since C is finite, the sequence must eventually cycle. The length of the tail and the length of the cycle can efficiently be computed by the Floyd's algorithm <ref> [9, exercise 6 on p. 7] </ref>. This algorithm is also known as the kangaroos' method. It has the advantage of minimizing the storage requirements. Two kangaroos K 1 and K 2 cover the sequence generated by f .
Reference: [10] <author> A. K. Lenstra. </author> <title> Memo on RSA signature generation in the presence of faults, </title> <month> September </month> <year> 1996. </year>
Reference-contexts: Hence, q = n B =p and Carol can compute the secret decryption key d B <ref> [10, 7] </ref>. This second attack is more dangerous because it completely breaks the system. This shows clearly the importance of checking cryptographic protocols for faults [3]. Note also that if Bob protects his bin, the attack does 2 e B c Alice d B Carol not remain applicable.
Reference: [11] <author> J. H. Moore. </author> <title> Protocol failures in cryptosystems. </title> <editor> In G. Simmons, editor, </editor> <booktitle> Contemporary Cryptology, </booktitle> <pages> pages 541-558. </pages> <publisher> IEEE Press, </publisher> <year> 1992. </year>
Reference-contexts: By definition, a protocol designer must suspect everything. The use of strong cryptoalgorithms is not sufficient to guarantee the security of a protocol. In some situations, a protocol may be completely subverted without compromising the security of the underpinning cryptoalgorithm. Such situations are called protocol failures <ref> [11] </ref>. Protocols are for example designed in order to establish a session key, to authenticate a transaction, to sign a document, etc. . . This is usually achieved by exchanging some messages between two or several people.
Reference: [12] <author> J.-J. Quisquater and C. Couvreur. </author> <title> Fast decipherment algorithm for RSA public-key cryptosystem. </title> <journal> Electronics Letters, </journal> <volume> 18(21) </volume> <pages> 905-907, </pages> <year> 1982. </year>
Reference-contexts: From p and q, Bob computes m p = c d B mod p1 mod p and m q = c d B mod q1 mod q, and finally finds m = CRT (m p ; m q ) <ref> [12] </ref>. Suppose that Carol induces an external constraint on the deciphering device of Bob (e.g., ionizing or microwave radiation). Assume that the computation of m p is correctly performed but not computation of m q .
Reference: [13] <author> R. L. Rivest, A. Shamir, and L. Adleman. </author> <title> A method for obtaining digital signatures and public-key cryptosystems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2) </volume> <pages> 120-126, </pages> <month> February </month> <year> 1978. </year>
Reference-contexts: This is usually achieved by exchanging some messages between two or several people. In the sequel, we will show a failure on the most widely used public-key cryptosys-tem, the so-called RSA <ref> [13] </ref>. It may be briefly described as follows. Suppose that Alice wants to send a message m to Bob.
Reference: [14] <author> A. Shamir. </author> <title> How to check modular exponentiation. </title> <note> Presented at the rump session of Eurocrypt '97. 10 </note>
Reference-contexts: The correctness verification cannot always be achieved by doing calculations 8 twice as proposed in [3]. Our cycling attack can pass through this test. The verification must be done by another (proved secure) way. For example, the Lenstra's attack (see Fig. 2) can be avoided as follows <ref> [14] </ref>. We use the same notations as in Section 1 (Introduction). Bob first chooses a (small) random number r relatively prime to n B . Then he computes m rp = c d B mod (rp) mod rp and m rq = c d B mod (rq) mod rq.
References-found: 14

