URL: http://www.csc.ncsu.edu/eos/users/m/mfms/www/sicomp.ps
Refering-URL: http://www.csc.ncsu.edu/eos/users/m/mfms/www/publications.html
Root-URL: http://www.csc.ncsu.edu
Title: OPTIMAL REDUCTION OF TWO-TERMINAL DIRECTED ACYCLIC GRAPHS  
Author: WOLFGANG W. BEIN JERZY KAMBUROWSKI AND MATTHIAS F. M. STALLMANN 
Keyword: Key words. algorithms, complexity, NP-completeness, directed acyclic graph, series-parallel graph, transitive graph, triconnected components, reliability, dynamic programming, PERT network  
Abstract: Algorithms for series-parallel graphs can be extended to arbitrary two-terminal dags if node reductions are used along with series and parallel reductions. A node reduction contracts a vertex with unit in-degree (out-degree) into its sole incoming (outgoing) neighbor. We give an O(n 2:5 ) algorithm for minimizing node reductions, based on vertex cover in a transitive auxiliary graph. Applications include the analysis of PERT networks, dynamic programming approaches to network problems, and network reliability. For NP-hard problems one can obtain algorithms that are exponential only in the minimum number of node reductions rather than the number of vertices. This gives improvements if the underlying graph is nearly series-parallel. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Abdel-Wahab and T. Kameda, </author> <title> Scheduling to minimize maximum cumulative cost subject to series-parallel precedence constraints, </title> <journal> Operations Research, </journal> <volume> 26 (1978), </volume> <pages> pp. </pages> <month> 141 - 158. </month> <title> [2] , On strictly optimal schedules for the cumulative cost-optimal scheduling problem, </title> <journal> Computing, </journal> <volume> 24 (1980), </volume> <pages> pp. 61 - 86. </pages>
Reference-contexts: Bein, Brucker and Tamir [4], for example, show that the minimum cost flow problem is solved by the greedy algorithm if and only if the graph is series-parallel. Other examples include scheduling and sequencing problems <ref> [1, 2, 26, 27] </ref>, location problems [17], as well as many combinatorial problems [21, 35, 34]. All these approaches rely on the decomposition tree (see [6] for a general formulation of this idea) or on Duffin's characterization.
Reference: [3] <author> A. Agrawal and A. Satyanarayana, </author> <title> An O(jEj) time algorithm for computing the reliability of a class of directed networks, </title> <journal> Operations Research, </journal> <volume> 32 (1984), </volume> <pages> pp. 493 - 515. </pages>
Reference-contexts: Determining R (G) is #P-complete even 3 when G is planar with maximum degree 3 and all failure probabilities are the same [28]. If G is series-parallel, R (G) can be computed in linear time using series and parallel reductions <ref> [3] </ref>. For each reduction, the failure probability of the new edge can be computed so that the network has the same reliability before and after the reduction. <p> We extend the result of <ref> [3] </ref> to obtain an O (m2 c ) time algorithm for computing the reliability of complexity-c st-dags. Consider a node reduction replacing fe; f 1 ; : : : ; f k g by fg 1 ; : : : ; g k g.
Reference: [4] <author> W. Bein, P. Brucker, and A. Tamir, </author> <title> Minimum cost flow algorithms for series-parallel networks, </title> <journal> Discrete Applied Mathematics, </journal> <volume> 10 (1985), </volume> <pages> pp. 117 - 124. </pages>
Reference-contexts: Series-parallel st-dags can be efficiently parsed and transformed into a decomposition tree (see [38]). Many graph and network problems that are either intractable or have complicated solutions in the general case are easy in the special case of series-parallel networks. Bein, Brucker and Tamir <ref> [4] </ref>, for example, show that the minimum cost flow problem is solved by the greedy algorithm if and only if the graph is series-parallel. Other examples include scheduling and sequencing problems [1, 2, 26, 27], location problems [17], as well as many combinatorial problems [21, 35, 34].
Reference: [5] <author> W. Bein, J. Kamburowski, and M. Stallmann, </author> <title> Alternate characterizations of the complexity graph, </title> <type> Tech. Rep. 91-21, </type> <institution> Department of Computer Science, North Carolina State University, </institution> <year> 1991. </year>
Reference-contexts: Fig. 6. Four cases with pairwise constraints on v; w. 11 edges common to P (s; w) and P (v; t), if any, form a single path. See <ref> [5] </ref> for a detailed proof. The four dags correspond to four combinations obtained by a) letting P 1 (v; w) and P 2 (v; w) either be disjoint or identical, and b) letting P (s; w) and P (v; t) either be disjoint or intersecting. 4.
Reference: [6] <author> M. Bern, E. Lawler, and A. Wong, </author> <title> Linear-time computation of optimal subgraphs of decomposable graphs, </title> <journal> Journal of Algorithms, </journal> <volume> 8 (1987), </volume> <pages> pp. 216 - 235. </pages>
Reference-contexts: Other examples include scheduling and sequencing problems [1, 2, 26, 27], location problems [17], as well as many combinatorial problems [21, 35, 34]. All these approaches rely on the decomposition tree (see <ref> [6] </ref> for a general formulation of this idea) or on Duffin's characterization. This paper introduces definitions of st-dag complexity, measures that describe how nearly series-parallel an st-dag is.
Reference: [7] <author> A. Colby and S. Elmaghraby, </author> <title> On the complete reduction of directed acyclic graphs, </title> <type> Tech. Rep. 197, </type> <institution> Operations Research Program, North Carolina State University, </institution> <address> Raleigh, NC 27695-7913, </address> <month> May </month> <year> 1984. </year>
Reference-contexts: The two complexities, factoring complexity and reduction complexity, are related (the idea described in the remainder of this paragraph comes from <ref> [7] </ref>). From a sequence of series, parallel, and node reductions reducing G to a single edge, we can obtain a factoring as follows. Initially we label every edge e of G with the label S (e) = e.
Reference: [8] <author> D. Coppersmith and S. Winograd, </author> <title> Matrix multiplication via arithmetic progressions, </title> <booktitle> in Proceedings 19th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1987, </year> <pages> pp. 1-6. </pages>
Reference-contexts: Theorem 5.1. C (G) can be computed in time O (n 2 + M (n)), where M (n) is the time required for computing the transitive closure of a graph of n vertices (a recent upper bound for M (n) is O (n 2:37 ) <ref> [8] </ref>). Since minimum vertex cover in a transitive graph is equivalent to maximum matching in a bipartite graph [14], we have the following (see [18] for the bipartite matching algorithm). Theorem 5.2.
Reference: [9] <author> R. Duffin, </author> <title> Topology of series-parallel networks, </title> <journal> Journal of Mathematical Analysis and Applications, </journal> <volume> 10 (1965), </volume> <pages> pp. 303 - 318. </pages>
Reference-contexts: 1. Introduction. Duffin <ref> [9] </ref> proved that a two-terminal directed acyclic graph (st-dag) is series-parallel if and only if it does not contain a subgraph homeomorphic from the graph pictured in Figure 1, the interdictive graph. Series-parallel st-dags can be efficiently parsed and transformed into a decomposition tree (see [38]). <p> We say that a dag G has an IG (interdictive graph) at v; w if G has a subgraph homeomorphic from the graph in series-parallel if and only if there are no IG's in G <ref> [9] </ref>. 2. Definitions of Dag Complexity. Our primary definition of complexity refers to a sequence of reductions of an st-dag.
Reference: [10] <author> S. Elmaghraby, J. Kamburowski, and M. Stallmann, </author> <title> On the reduction of acyclic digraphs and its applications, </title> <type> Tech. Rep. 233, </type> <institution> Operations Research Program, North Carolina State University, </institution> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: Finding (G) and the corresponding optimal reduction sequence is important in the solution of several problems defined on deterministic and stochastic networks: estimating completion time in PERT networks, travel time in transportation networks, and network reliability. More details and references relating to these applications are given in <ref> [10] </ref>. We illustrate the basic ideas by presenting details of the simplest application, two-terminal reliability. Let G be an st-dag in which each edge e is assigned a failure probability p (e).
Reference: [11] <author> S. E. Elmaghraby, </author> <title> Activity Networks: Project Planning and Control by Network Models, </title> <publisher> John Wiley & Sons, </publisher> <year> 1978. </year>
Reference-contexts: However, these techniques are not suited to most NP-hard scheduling problems. The dag in a scheduling problem defines a precedence relation and is in general not an st-dag. At stake here is the relationship between activity-on-arc and activity-on-node (partial order or precedence) representations of activity networks (see e.g. <ref> [11] </ref>). The techniques of Section 2, when used to solve PERT network problems, assume the input to be an activity-on-arc network. Unfortunately the activity-on-arc representation is not unique: a given project may have many different activity-on-arc representations while having only one activity-on-node representation.
Reference: [12] <author> S. Even and R. Tarjan, </author> <title> Computing an st-numbering, </title> <booktitle> Theoretical Computer Science, 2 (1976), </booktitle> <pages> pp. 339 - 344. </pages>
Reference-contexts: How does the notion of complexity extend to undirected graphs? With the help of an st-numbering, a numbering of the vertices in which vertex 1 is adjacent to vertex n and each other vertex has at least one lower numbered and one higher numbered neighbor <ref> [12, 23] </ref>, each biconnected component of an undirected graph can be treated as an st-dag. Each undirected edge is oriented from a lower to a higher st-number. The complexity of an undirected graph can thus be defined as the minimum complexity given by any st-numbering.
Reference: [13] <author> M. Fellows and M. Langston, </author> <title> Nonconstructive advances in polynomial-time complexity, </title> <journal> Information Processing Letters, </journal> <volume> 26 (1987), </volume> <pages> pp. 157-162. </pages>
Reference-contexts: It is interesting to note that for fixed c, the recognition problem for complexity-c undirected graphs can be shown to be in P via a nonconstructive argument, using the work of Robertson and Seymour [29, 30] (see also <ref> [13] </ref> and [20]). The key observation is that the complexity of an undirected graph never increases when an edge is deleted or contracted.
Reference: [14] <author> L. Ford, Jr. and D. Fulkerson, </author> <title> Flows in Networks, </title> <publisher> Princeton University Press, </publisher> <year> 1962. </year>
Reference-contexts: transitive dag, we can compute a minimum vertex cover in C (G) by reducing the problem to finding a maximum matching in a bipartite graph (the complement of a minimum vertex cover is a maximum independent set, which in a transitive dag corresponds to a Dilworth chain decomposition | see <ref> [14] </ref> for details). 14 The overall time bound for computing (G) is therefore O (n 2:5 ). <p> Since minimum vertex cover in a transitive graph is equivalent to maximum matching in a bipartite graph <ref> [14] </ref>, we have the following (see [18] for the bipartite matching algorithm). Theorem 5.2. The minimum number of node reductions required to reduce an st-dag G to a single edge, (G), can be computed in time O (n 2:5 ).
Reference: [15] <author> F. Harary and R. Norman, </author> <title> Some properties of line digraphs, </title> <address> Rendiconti del Circolo Mathe-matico Palermo, </address> <month> 9 </month> <year> (1960), </year> <pages> pp. 149 - 163. </pages>
Reference-contexts: Optimal translation to activity-on-arc representation is not an issue for vertex series-parallel digraphs, which translate directly to series-parallel st-dags (see [38]), or for line digraphs (see <ref> [15] </ref> for a characterization), which have a unique activity-on-arc representation with no dummy activities.
Reference: [16] <author> D. Harel, </author> <title> A linear time algorithm for finding dominators in flow graphs and related problems (extended abstract), </title> <booktitle> in Proceedings 17th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1985, </year> <pages> pp. 185 - 194. </pages>
Reference-contexts: Suppose T (G), the tree of dominators in G, has been computed. This can be done in time O (m + n), where m is the number of edges in G <ref> [16] </ref>. Recall that v is the parent of w in T (G) if and only if v properly dominates w and there does not exist v 0 such that v properly dominates v 0 and v 0 properly dominates w. Note: s is the root of T (G).
Reference: [17] <author> R. Hassin and A. Tamir, </author> <title> Efficient algorithms for optimization and selection on series-parallel graphs, </title> <journal> SIAM Journal on Algebraic and Discrete Methods, </journal> <volume> 7 (1986), </volume> <pages> pp. 379-389. </pages>
Reference-contexts: Bein, Brucker and Tamir [4], for example, show that the minimum cost flow problem is solved by the greedy algorithm if and only if the graph is series-parallel. Other examples include scheduling and sequencing problems [1, 2, 26, 27], location problems <ref> [17] </ref>, as well as many combinatorial problems [21, 35, 34]. All these approaches rely on the decomposition tree (see [6] for a general formulation of this idea) or on Duffin's characterization. This paper introduces definitions of st-dag complexity, measures that describe how nearly series-parallel an st-dag is.
Reference: [18] <author> J. Hopcroft and R. Karp, </author> <title> An n 5=2 algorithm for maximum matchings in bipartite graphs, </title> <journal> SIAM Journal on Computing, </journal> <volume> 2 (1973), </volume> <pages> pp. 225 - 231. </pages>
Reference-contexts: Since minimum vertex cover in a transitive graph is equivalent to maximum matching in a bipartite graph [14], we have the following (see <ref> [18] </ref> for the bipartite matching algorithm). Theorem 5.2. The minimum number of node reductions required to reduce an st-dag G to a single edge, (G), can be computed in time O (n 2:5 ).
Reference: [19] <author> J. Hopcroft and R. Tarjan, </author> <title> Dividing a graph into triconnected components, </title> <journal> SIAM Journal on Computing, </journal> <volume> 2 (1973), </volume> <pages> pp. 135 - 158. </pages>
Reference-contexts: A decomposition of G into autonomous subdags could therefore be found in linear time using a minor modification of the Hopcroft-Tarjan algorithm <ref> [19] </ref>. Such a decomposition is not required for our algorithms. Finally, in most of our applications it suffices to solve the problem separately for each autonomous subdag, replacing the subdag by a single edge that carries the information about the subdag.
Reference: [20] <author> D. S. Johnson, </author> <title> The NP-completeness column: an ongoing guide, </title> <journal> Journal of Algorithms, </journal> <volume> 8 (1987), </volume> <pages> pp. 285-303. </pages>
Reference-contexts: It is interesting to note that for fixed c, the recognition problem for complexity-c undirected graphs can be shown to be in P via a nonconstructive argument, using the work of Robertson and Seymour [29, 30] (see also [13] and <ref> [20] </ref>). The key observation is that the complexity of an undirected graph never increases when an edge is deleted or contracted.
Reference: [21] <author> T. Kikuno, N. Yoshida, and Y. Kokudo, </author> <title> A linear algorithm for the domination number of a series-parallel graph, </title> <journal> Discrete Applied Mathematics, </journal> <volume> 5 (1983), </volume> <pages> pp. 299 - 311. </pages>
Reference-contexts: Bein, Brucker and Tamir [4], for example, show that the minimum cost flow problem is solved by the greedy algorithm if and only if the graph is series-parallel. Other examples include scheduling and sequencing problems [1, 2, 26, 27], location problems [17], as well as many combinatorial problems <ref> [21, 35, 34] </ref>. All these approaches rely on the decomposition tree (see [6] for a general formulation of this idea) or on Duffin's characterization. This paper introduces definitions of st-dag complexity, measures that describe how nearly series-parallel an st-dag is. <p> problems such as independent set and dominating set, where the object is to find an 16 optimal subset of the vertices, we can simply try out two possibilities for each vertex removed by node reduction (either the vertex is in the optimal solution or it's not), using the techniques of <ref> [21, 35] </ref> to deal with series or parallel reductions. This gives O (m2 c ) time algorithms for maximum independent set, minimum dominating set, and other undirected graph problems when these problems are formulated on st-dags.
Reference: [22] <author> M. Krishnamoorthy and N. Deo, </author> <title> Complexity of the minimum-dummy-activities problem in a PERT network, Networks, </title> <booktitle> 9 (1979), </booktitle> <pages> pp. 189 - 194. </pages>
Reference-contexts: Unfortunately the activity-on-arc representation is not unique: a given project may have many different activity-on-arc representations while having only one activity-on-node representation. Past research has focused on translating from activity-on-node to activity-on-arc representation so as to minimize the number of "dummy activities", a problem that is NP-hard (see <ref> [22] </ref>). We have demonstrated that sometimes minimizing complexity is a more suitable objective than minimizing dummy activities.
Reference: [23] <author> A. Lempel, S. Even, and I. Cederbaum, </author> <title> An algorithm for planarity testing of graphs, in Theory of Graphs: </title> <booktitle> International Symposium, </booktitle> <month> July, </month> <year> 1966, </year> <editor> P. Rosenstiehl, ed., </editor> <address> New York, 1967, </address> <publisher> Gordon and Breach, </publisher> <pages> pp. 215 - 232. </pages>
Reference-contexts: How does the notion of complexity extend to undirected graphs? With the help of an st-numbering, a numbering of the vertices in which vertex 1 is adjacent to vertex n and each other vertex has at least one lower numbered and one higher numbered neighbor <ref> [12, 23] </ref>, each biconnected component of an undirected graph can be treated as an st-dag. Each undirected edge is oriented from a lower to a higher st-number. The complexity of an undirected graph can thus be defined as the minimum complexity given by any st-numbering.
Reference: [24] <author> S. MacLane, </author> <title> A structural characterization of planar combinatorial graphs, </title> <journal> Duke Mathematical Journal, </journal> <volume> 3 (1937), </volume> <pages> pp. 460-472. 19 </pages>
Reference-contexts: (this edge has no effect on our complexity measures), then a recursive decomposition of G into autonomous subdags (decomposing G into G=G (v; w) and G (v; w) at each level) corresponds to a decom 12 position of the underlying undirected graph into triconnected components (using the definition of MacLane <ref> [24] </ref>). A decomposition of G into autonomous subdags could therefore be found in linear time using a minor modification of the Hopcroft-Tarjan algorithm [19]. Such a decomposition is not required for our algorithms.
Reference: [25] <author> D. J. Michael, </author> <title> Optimal Representation of Activity Networks as Directed Acyclic Graphs, </title> <type> PhD thesis, </type> <institution> Operations Research Program, North Carolina State University, </institution> <year> 1991. </year>
Reference-contexts: Past research has focused on translating from activity-on-node to activity-on-arc representation so as to minimize the number of "dummy activities", a problem that is NP-hard (see [22]). We have demonstrated that sometimes minimizing complexity is a more suitable objective than minimizing dummy activities. In this connection Michael <ref> [25] </ref> has recently shown that the translation to a minimum complexity activity-on-arc network can be done in polynomial time if the node set of the output is fixed (minimizing dummy activities is still NP-hard under the same assumption).
Reference: [26] <author> C. Monma, </author> <title> The two-machine maximum flow time problem with series-parallel precedence constraints, </title> <journal> Operations Research, </journal> <volume> 27 (1979), </volume> <pages> pp. 792 - 798. </pages>
Reference-contexts: Bein, Brucker and Tamir [4], for example, show that the minimum cost flow problem is solved by the greedy algorithm if and only if the graph is series-parallel. Other examples include scheduling and sequencing problems <ref> [1, 2, 26, 27] </ref>, location problems [17], as well as many combinatorial problems [21, 35, 34]. All these approaches rely on the decomposition tree (see [6] for a general formulation of this idea) or on Duffin's characterization.
Reference: [27] <author> C. Monma and J. Sidney, </author> <title> Sequencing with series-parallel precedence constraints, </title> <journal> Mathematics of Operations Research, </journal> <volume> 4 (1979), </volume> <pages> pp. 215 - 224. </pages>
Reference-contexts: Bein, Brucker and Tamir [4], for example, show that the minimum cost flow problem is solved by the greedy algorithm if and only if the graph is series-parallel. Other examples include scheduling and sequencing problems <ref> [1, 2, 26, 27] </ref>, location problems [17], as well as many combinatorial problems [21, 35, 34]. All these approaches rely on the decomposition tree (see [6] for a general formulation of this idea) or on Duffin's characterization.
Reference: [28] <author> J. S. Provan, </author> <title> The complexity of reliability computations in planar and acyclic graphs, </title> <journal> SIAM Journal on Computing, </journal> <volume> 15 (1986), </volume> <pages> pp. 694 - 702. </pages>
Reference-contexts: Then R (G), the two-terminal reliability of G, is the probability that there exists at least one source-sink path with no failed edges in G. Determining R (G) is #P-complete even 3 when G is planar with maximum degree 3 and all failure probabilities are the same <ref> [28] </ref>. If G is series-parallel, R (G) can be computed in linear time using series and parallel reductions [3]. For each reduction, the failure probability of the new edge can be computed so that the network has the same reliability before and after the reduction.
Reference: [29] <author> N. Robertson and P. Seymour, </author> <title> Disjoint paths a survey, </title> <journal> SIAM Journal on Algebraic and Discrete Methods, </journal> <volume> 6 (1985), </volume> <pages> pp. </pages> <month> 300 - 305. </month> <title> [30] , Graph minors a survey, in Surveys in Combinatorics, </title> <editor> I. Anderson, ed., </editor> <publisher> Cambridge University Press, </publisher> <year> 1985, </year> <pages> pp. 153 - 171. </pages>
Reference-contexts: It is interesting to note that for fixed c, the recognition problem for complexity-c undirected graphs can be shown to be in P via a nonconstructive argument, using the work of Robertson and Seymour <ref> [29, 30] </ref> (see also [13] and [20]). The key observation is that the complexity of an undirected graph never increases when an edge is deleted or contracted.
Reference: [31] <author> D. Robinson, </author> <title> A dynamic programming solution to cost-time trade-off for CPM, </title> <booktitle> Management Science, 22 (1975), </booktitle> <pages> pp. 158 - 166. </pages>
Reference-contexts: The problem is to find an allocation of R among the activities so that the overall project duration is minimized. Robinson <ref> [31] </ref> observed that if G is series-parallel, the minimum duration over all possible allocations can be found by dynamic programming (the optimum allocation can be derived easily from the computation).
Reference: [32] <author> A. Satyanarayana and R. Wood, </author> <title> A linear-time algorithm for computing K-terminal reliability in series-parallel networks, </title> <journal> SIAM Journal on Computing, </journal> <volume> 14 (1985), </volume> <pages> pp. 818 - 832. </pages>
Reference-contexts: In practice the time is likely to be much better, since G 00 often has lower complexity than G 0 and many series and parallel reductions reduce the size of the st-dag between successive node reductions. (See also <ref> [32] </ref> and [39] for a description of graph reduction techniques used for undirected reliability problems.) We now introduce a second complexity measure, based on a generalization of the decomposition tree to arbitrary dags.
Reference: [33] <author> J. Spinrad, </author> <title> On comparability and permutation graphs, </title> <journal> SIAM J. Comput., </journal> <volume> 14 (1985), </volume> <pages> pp. 658 - 670. </pages>
Reference-contexts: While there does not appear to be any natural analogue of node reduction to complement the series and parallel reductions for vertex series-parallel dags, the decomposition into autonomous subdags used in the proofs of Section 4 corresponds to the modular decomposition of transitive dags defined by Spin-rad <ref> [33] </ref> (modular decomposition is defined for undirected graphs, but extends naturally to dags defining partial orders). The idea of using node reduction to augment series and parallel reduction appears to be most promising for problems traditionally formulated on undirected graphs.
Reference: [34] <author> M. Syslo, </author> <title> NP-complete problems on some tree-structured graphs: A review, </title> <booktitle> in Proceedings WG '83, International Workshop on Graphtheoretic Concepts in Computer Science, </booktitle> <editor> M. Nagl and J. Perl, eds., </editor> <year> 1983, </year> <pages> pp. 342 - 353. </pages>
Reference-contexts: Bein, Brucker and Tamir [4], for example, show that the minimum cost flow problem is solved by the greedy algorithm if and only if the graph is series-parallel. Other examples include scheduling and sequencing problems [1, 2, 26, 27], location problems [17], as well as many combinatorial problems <ref> [21, 35, 34] </ref>. All these approaches rely on the decomposition tree (see [6] for a general formulation of this idea) or on Duffin's characterization. This paper introduces definitions of st-dag complexity, measures that describe how nearly series-parallel an st-dag is. <p> This gives O (m2 c ) time algorithms for maximum independent set, minimum dominating set, and other undirected graph problems when these problems are formulated on st-dags. Similarly, we can obtain an O (mK c ) time algorithm for K-coloring (see <ref> [34] </ref>).
Reference: [35] <author> K. Takamizawa, T. Nishizeki, and N. Saito, </author> <title> Linear-time computatbility of combinatorial problems on series-parallel graphs, </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 29 (1982), </volume> <pages> pp. 623 - 641. </pages>
Reference-contexts: Bein, Brucker and Tamir [4], for example, show that the minimum cost flow problem is solved by the greedy algorithm if and only if the graph is series-parallel. Other examples include scheduling and sequencing problems [1, 2, 26, 27], location problems [17], as well as many combinatorial problems <ref> [21, 35, 34] </ref>. All these approaches rely on the decomposition tree (see [6] for a general formulation of this idea) or on Duffin's characterization. This paper introduces definitions of st-dag complexity, measures that describe how nearly series-parallel an st-dag is. <p> problems such as independent set and dominating set, where the object is to find an 16 optimal subset of the vertices, we can simply try out two possibilities for each vertex removed by node reduction (either the vertex is in the optimal solution or it's not), using the techniques of <ref> [21, 35] </ref> to deal with series or parallel reductions. This gives O (m2 c ) time algorithms for maximum independent set, minimum dominating set, and other undirected graph problems when these problems are formulated on st-dags.
Reference: [36] <author> S. Toida, </author> <title> A graph model for fault diagnosis, Journal of Digital Systems, </title> <booktitle> VI (1982), </booktitle> <pages> pp. 345 - 365. </pages>
Reference-contexts: In Section 2 a series-parallel two-terminal reliability algorithm was extended to run in polynomial time for st-dags of fixed complexity c. Similar techniques can be applied to some NP-hard fault diagnosis problems (see <ref> [36] </ref> for the series-parallel algorithms), and probably many other st-dag problems. However, these techniques are not suited to most NP-hard scheduling problems. The dag in a scheduling problem defines a precedence relation and is in general not an st-dag.
Reference: [37] <author> J. Valdes, </author> <title> Parsing Flowcharts and Series-Parallel Graphs, </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1978. </year>
Reference-contexts: node reduction at v, and let [G] denote the graph that results when all possible series and parallel reductions have been applied to G (this is well defined because series and parallel reductions obey the Church-Rosser property: the order in which reductions are applied does not affect the final outcome <ref> [37] </ref>). An st-dag G is said to be irreducible if [G] = G. Definition 2.1. Let (G), the reduction complexity of G, be the minimum number of node reductions sufficient (along with series and parallel reductions) to reduce G to a single edge.
Reference: [38] <author> J. Valdes, R. Tarjan, and E. Lawler, </author> <title> The recognition of series parallel digraphs, </title> <journal> SIAM Journal on Computing, </journal> <volume> 11 (1982), </volume> <pages> pp. 298 - 313. </pages>
Reference-contexts: 1. Introduction. Duffin [9] proved that a two-terminal directed acyclic graph (st-dag) is series-parallel if and only if it does not contain a subgraph homeomorphic from the graph pictured in Figure 1, the interdictive graph. Series-parallel st-dags can be efficiently parsed and transformed into a decomposition tree (see <ref> [38] </ref>). Many graph and network problems that are either intractable or have complicated solutions in the general case are easy in the special case of series-parallel networks. <p> In our notation, the st-dag G is regarded as a set of edges (multiple edges between the same two vertices are permitted), while V (G) denotes the set of vertices in G. When we say an st-dag is series-parallel we mean that it is two-terminal edge series-parallel (see <ref> [38] </ref> for a description of the relationship between edge and vertex series-parallel). <p> If G is series-parallel, + corresponds to parallel composition and to series composition, and it is possible to obtain a unique factoring (up to applications of associative laws | see <ref> [38] </ref>). The definition of a factoring can be made more formal, as follows. A path expression ff is an algebraic expression for a set of paths between two specific vertices of an st-dag. <p> Optimal translation to activity-on-arc representation is not an issue for vertex series-parallel digraphs, which translate directly to series-parallel st-dags (see <ref> [38] </ref>), or for line digraphs (see [15] for a characterization), which have a unique activity-on-arc representation with no dummy activities.
Reference: [39] <author> R. Wood, </author> <title> Factoring algorithms for computing K-terminal network reliability, </title> <journal> IEEE Transactions on Reliability, R-35 (1986), pp. </journal> <volume> 269 - 278. </volume> <pages> 20 </pages>
Reference-contexts: In practice the time is likely to be much better, since G 00 often has lower complexity than G 0 and many series and parallel reductions reduce the size of the st-dag between successive node reductions. (See also [32] and <ref> [39] </ref> for a description of graph reduction techniques used for undirected reliability problems.) We now introduce a second complexity measure, based on a generalization of the decomposition tree to arbitrary dags.
References-found: 37

