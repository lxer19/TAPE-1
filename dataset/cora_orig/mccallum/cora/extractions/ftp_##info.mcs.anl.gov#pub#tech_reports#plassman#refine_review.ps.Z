URL: ftp://info.mcs.anl.gov/pub/tech_reports/plassman/refine_review.ps.Z
Refering-URL: http://www.mcs.anl.gov/sumaa3d/Papers/papers.html
Root-URL: http://www.mcs.anl.gov
Title: ADAPTIVE REFINEMENT OF UNSTRUCTURED FINITE-ELEMENT MESHES  
Author: MARK T. JONES AND PAUL E. PLASSMANN 
Keyword: Key words. adaptive refinement, finite-element meshes, parallel algorithms, unstructured meshes  
Abstract: The finite element method used in conjunction with adaptive mesh refinement algorithms can be an efficient tool in many scientific and engineering applications. In this paper we review algorithms for the adaptive refinement of unstructured simplicial meshes (triangulations and tetrahedralizations). We discuss bounds on the quality of the meshes resulting from these refinement algorithms. Unrefinement and refinement along curved surfaces are also discussed. Finally, we give an overview of recent developments in parallel refinement algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> I. Babu ska and A. K. Aziz, </author> <title> On the angle condition in the finite element method, </title> <journal> SIAM Journal of Numerical Analysis, </journal> <volume> 13 (1976), </volume> <pages> pp. 214-226. </pages>
Reference-contexts: The mesh on the right is nonconforming. Note the midpoint on the left side of the rightmost triangle. 4 To ensure the quality of a mesh during refinement, it is desirable that no very large or very small angles are generated. In <ref> [1] </ref>, Babuska and Aziz show that the accuracy of the finite-element approximation degrades as the maximum angle approaches .
Reference: [2] <author> I. Babu ska and W. C. Rheinboldt, </author> <title> Error estimates for adaptive finite element computations, </title> <journal> SIAM Journal of Numerical Analysis, </journal> <volume> 15 (1978), </volume> <pages> pp. 736-754. </pages>
Reference-contexts: This test problem is based on problem 1a in [22], which considers a number of error estimators. For a more detailed analysis of error estimates for the finite-element method, we recommend the paper by Babuska and Rheinboldt <ref> [2] </ref>. The refined mesh is given in Figure 5; note the refinement in the region corresponding to the peak in the source function. This selectively refined mesh has 600 triangles.
Reference: [3] <author> R. E. Bank, PLTMG: </author> <title> A Software Package for Solving Elliptic Partial Differential Equations. Users' Guide 6.0, </title> <publisher> SIAM Publications, </publisher> <address> Philadelphia, Penn., </address> <year> 1990. </year>
Reference-contexts: A typical adaptive refinement algorithm nested meshes can be used in conjunction with multigrid solution methods <ref> [3] </ref>, [23]. An alternative refinement approach based on Delaunay triangulations inserts new mesh points in element interiors (Steiner insertion) and is popular for finite-volume methods in computational fluid dynamics and related areas. <p> The modified bisection algorithm of Rivara refinement with selected temporary bisections. This algorithm, given in Figure 14, has been used in the software package PLTMG <ref> [3] </ref>. Triangles initially marked for refinement are refined by using regular refinement. As refinement propagates, any triangle with at least two nonconforming edges is also regularly refined. When only triangles with one or less nonconforming edges remain, the remaining nonconforming edges are bisected.
Reference: [4] <author> R. E. Bank, A. H. Sherman, and A. Weiser, </author> <title> Refinement algorithms and data structures for regular local mesh refinement, in Scientific Computing, </title> <editor> R. Stepleman et al., ed., </editor> <publisher> IMACS/North-Holland Publishing Company, </publisher> <address> Amsterdam, </address> <year> 1983, </year> <pages> pp. 3-17. </pages>
Reference-contexts: Moreover, the angles of M k tend to go toward 3 as k ! 1 [35]. Fig. 8. Triangle X on the left has been bisected into two triangles. At this stage the resulting triangulation is nonconforming. A third means of triangle division is regular refinement <ref> [4] </ref>, as illustrated in on the right of this figure. A conforming mesh can be obtained by temporarily refining triangles with one nonconforming edge through bisection. <p> Fig. 12. The possible children of a triangle for the modified bisection algorithm of Rivara. After the initial longest-edge bisection, the remaining two edges are bisected if they are nonconforming. Note that these edges may not be the longest edges in the bisected triangle. A group led by Bank <ref> [4] </ref> has developed a refinement algorithm based on regular 7 Let T 0 be the set of marked triangles f T will denote triangles not yet refined g V 0 = ; f V will denote children of refined triangles g i = 0 While ((T i [ V i )
Reference: [5] <author> E. B ansch, </author> <title> Local mesh refinement in 2 and 3 dimensions, </title> <booktitle> Impact of Computing in Science and Engineering, 3 (1991), </booktitle> <pages> pp. 181-191. 20 </pages>
Reference-contexts: The major difficulty in proving that the Rivara and Levin algorithm does not continue to degrade mesh quality is that it is not known whether the algorithm 11 generates a finite number of similar tetrahedron. However, a bisection algorithm first introduced by Bansch <ref> [5] </ref> does generate a finite number of similar tetrahedra. Before describing the algorithm in detail, we sketch the proof given by Liu and Joe [19] which motivates the algorithm. 3 v v v v 0 1 02 03 Fig. 18. <p> Liu and Joe show by direct calculation that a finite number of similarity classes of tetrahedra are generated by longest-edge bisection of the canonical tetrahedron. Therefore, if this same bisection order is used in the original space, only a finite number of similar tetrahedra are generated. Both Bansch <ref> [5] </ref> and Liu and Joe [21] give equivalent algorithms that generate this bisection order. The algorithm proposed by Bansch is given in Figure 19. <p> In these figures we have unfolded the faces of the tetrahedron to show the marking of the face edges, as done in <ref> [5] </ref>. <p> A complete proof of this result is given by Liu and Joe [19]. The conclusion of this result is that the angles of all resulting tetrahedra are bounded independently of the number of levels of refinement <ref> [5] </ref>. Liu and Joe have a more detailed description and analysis of this algorithm from a different perspective and prove additional properties of the algorithm [19] [21]. <p> For example, if a shock front is moving across the domain, one might wish to refine around the wave and unrefine in its wake. Reversing the refinement algorithms presented in the preceding sections has been considered <ref> [5] </ref> [31]. 1 2 3 Fig. 23. The triangulation in step 1 is refined to form the triangulation in step 2. However the unrefinement suggested in step 3 does not form a legal triangulation. 3 4 B D Fig. 24.
Reference: [6] <author> T. Barth, </author> <title> Aspects of unstructured grids and finite-volume solvers for the Euler and Navier--Stokes equations. Von Karman Institute for Fluid Dynamics, </title> <booktitle> Lecture Series 1994-05, </booktitle> <institution> NASA Ames Research Center, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: For example, when discretiz-ing fluid flow in a boundary layer, an optimal triangulation may have a high aspect ratio corresponding to steep velocity gradients in directions normal to a surface. Special mesh generation techniques are required in these cases. We refer the reader to <ref> [6] </ref> for a discussion of the construction of accurate control volumes for nonisotropic flows. 2.1. Subdividing Triangles.
Reference: [7] <author> J. Bell, M. Berger, J. Saltzman, and M. </author> <title> Welcome, Three-dimensional adaptive mesh refinement for hyperbolic conservation laws, </title> <journal> SIAM Journal on Scientific Computing, </journal> <volume> 15 (1994), </volume> <pages> pp. 127-138. </pages>
Reference-contexts: Finally, we note that interesting work has been done on the parallelization of alternative adaptive schemes to those discussed in this paper. Devine et al. has considered a parallel p-refinement approach on regular grids [11], and Bell et al. <ref> [7] </ref> have considered parallel adaptive methods for explicit finite-volume schemes on nested orthogonal meshes. Parallel hp-refinement finite-element methods have been considered by Oden and Patra [25]. 6. Summary and Concluding Remarks.
Reference: [8] <author> M. Bern and D. Eppstein, </author> <title> Mesh generation and optimal triangulations, in Computing in Euclidean Geometry, 2nd edition, </title> <editor> D.-Z. Du and K. F. Hwang, ed., </editor> <publisher> World Scientific, </publisher> <address> Singapore, </address> <year> 1995, </year> <pages> pp. 47-123. </pages>
Reference-contexts: We assume that an initial mesh, M 0 , has been generated consistent with the topology of the problem domain; for a survey of the mesh generation problem we recommend the review by Bern and Eppstein <ref> [8] </ref>. We focus on algorithms for which the triangles or tetrahedra in the refined mesh, M i+1 , are nested within the old mesh, M i .
Reference: [9] <author> L. Chew, </author> <title> Guaranteed-quality triangular meshes, </title> <type> Tech. Rep. </type> <institution> TR-89-983, Computer Science Department, Cornell University, </institution> <year> 1989. </year>
Reference-contexts: An alternative refinement approach based on Delaunay triangulations inserts new mesh points in element interiors (Steiner insertion) and is popular for finite-volume methods in computational fluid dynamics and related areas. We recommend the papers by Chew <ref> [9] </ref>, Ruppert [34], and Weatherill et al. [36] for details on this approach. We also note that the h-refinement discussed in this paper can be combined with order refinement of the basis functions; we recommend the papers [10], [24], and [28] for more information on hp-adaptive finite-element methods.
Reference: [10] <author> L. Demkowicz, J. Oden, W. Rachowicz, and O. Hardy, </author> <title> Toward a universal h-p adaptive finite element strategy, part 1. Constrained approximation and data structures, </title> <booktitle> Computer Methods in Applied Mechanics and Engineering, 77 (1989), </booktitle> <pages> pp. 79-112. </pages>
Reference-contexts: We recommend the papers by Chew [9], Ruppert [34], and Weatherill et al. [36] for details on this approach. We also note that the h-refinement discussed in this paper can be combined with order refinement of the basis functions; we recommend the papers <ref> [10] </ref>, [24], and [28] for more information on hp-adaptive finite-element methods. A good overview of a number of research topics in adaptive methods can be found in the book by Flaherty et al. [12]. A typical finite-element adaptive refinement approach is summarized in Figure 4.
Reference: [11] <author> K. D. Devine, J. E. Flaherty, S. R. Wheat, and A. B. Maccabe, </author> <title> A massively parallel adaptive finite element method with dynamic load balancing, </title> <type> Tech. Rep. </type> <institution> SAND 93-0936C, Sandia National Labs; Albuquerque, </institution> <address> N.M., </address> <year> 1993. </year>
Reference-contexts: Finally, we note that interesting work has been done on the parallelization of alternative adaptive schemes to those discussed in this paper. Devine et al. has considered a parallel p-refinement approach on regular grids <ref> [11] </ref>, and Bell et al. [7] have considered parallel adaptive methods for explicit finite-volume schemes on nested orthogonal meshes. Parallel hp-refinement finite-element methods have been considered by Oden and Patra [25]. 6. Summary and Concluding Remarks.
Reference: [12] <author> J. E. Flaherty, P. J. Paslow, M. S. Shephard, and J. D. Vasilakis, </author> <title> Adaptive Methods for Partial Differential Equations, </title> <institution> Society for Industrial and Applied Mathematics, </institution> <address> Philadelphia, </address> <year> 1989. </year>
Reference-contexts: A good overview of a number of research topics in adaptive methods can be found in the book by Flaherty et al. <ref> [12] </ref>. A typical finite-element adaptive refinement approach is summarized in Figure 4. We note that efficiency is the primary reason for selectively, rather than uniformly, refining a mesh. To demonstrate the gain in efficiency, consider solving Poisson's equation on the unit square with Dirichlet boundary conditions.
Reference: [13] <author> I. Fried, </author> <title> Condition of finite element matrices generated from nonuniform meshes, </title> <journal> AIAA Journal, </journal> <volume> 10 (1972), </volume> <pages> pp. 219-221. </pages>
Reference-contexts: Small angles should be avoided because the condition number of the matrices that arise from the finite-element discretization grows as O ( 1 min ), where min is the minimum angle in the triangulation <ref> [13] </ref>. Finally, the mesh should be graded or smooth. In other words, the area of neighboring triangles should not differ dramatically; otherwise the finite element approximation may be quite far from the actual solution.
Reference: [14] <author> M. T. Heath and P. Raghavan, </author> <title> Distributed solution of sparse linear systems, </title> <type> Tech. Rep. </type> <institution> UIUCDCS-R-93-1793, University of Illinois, </institution> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: We do not discuss these other problem aspects here; however, they must be considered in the same context of the refinement algorithm. We note that much work has been done on the parallel solution of linear systems, using both iterative methods [18] and direct methods <ref> [14] </ref> [29]. In this section, we review recent work on algorithms for the parallel refinement of unstructured meshes. We limit our discussion to triangulations; however, both of the methods described apply to tetrahedra as well.
Reference: [15] <author> B. Hendrickson and R. Leland, </author> <note> The Chaco user's guide: Version 2.0, </note> <institution> Sandia Report SAND94-2692, Sandia National Laboratories, </institution> <address> Albuquerque, N.M., </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Thus, the mesh must be dynamically rebalanced to 19 maintain the same load distribution as the initial partitioning, while minimizing the interprocessor communication required to move triangles between processors. Many effective partitioning heuristics have been proposed in the literature <ref> [15] </ref>; Williams compares several partitioning methods [38]. The choice of partitioning methods strongly depends on the sparse solver used. If a direct sparse factorization is used, minimization of the separator size is of primary importance, and spectral methods produce excellent results [27].
Reference: [16] <author> M. T. Jones and P. E. Plassmann, </author> <title> Computational results for parallel unstructured mesh computations, </title> <booktitle> Computing Systems in Engineering, 5 (1994), </booktitle> <pages> pp. </pages> <month> 297-309. </month> <title> [17] , Parallel algorithms for adaptive mesh refinement, </title> <type> Preprint MCS-P421-0394, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Ill., </institution> <year> 1994. </year> <title> [18] , Scalable iterative solution of sparse linear systems, </title> <booktitle> Parallel Computing, 20 (1994), </booktitle> <pages> pp. 753-773. </pages>
Reference-contexts: This bound implies that, in practice, the running time of the algorithm is a slowing growing function of the number of processors. This fact is verified ex 18 perimentally in [17] where scalable performance is demonstrated by the algorithm on the Intel DELTA parallel computer. In <ref> [16] </ref> the performance of the adaptive refinement algorithm is examined in the context of solving problems involving higher-order shell elements. The computational cost of the algorithm is shown to be small relative to the time required for mesh partitioning, matrix assembly, and linear system solution. Fig. 30. <p> The former approach requires interprocessor communication; the latter approach requires no communication, but redundant element evaluation and more processor memory. The latter approach was used for the results given in <ref> [16] </ref>. Note that the efficient parallel performance of the methods discussed in this section rely on good mesh partitions. The initial mesh must be partitioned to equalize the load on each processor and to minimize the number of triangles that share edges but are assigned to different processors.
Reference: [19] <author> A. Liu and B. Joe, </author> <title> On the shape of tetrahedra from bisection, </title> <journal> Mathematics of Computation, </journal> <volume> 63 (1994), </volume> <pages> pp. </pages> <month> 141-154. </month> <title> [20] , Relationship between tetrahedron shape measures, </title> <journal> BIT, </journal> <volume> 34 (1994), </volume> <pages> pp. </pages> <month> 268-287. </month> <title> [21] , Quality local refinement of tetrahedral meshes based on bisection, </title> <journal> SIAM Journal on Scientific Computing, </journal> <volume> 16 (1995), </volume> <pages> pp. 1269-1291. </pages>
Reference-contexts: Another measure is the aspect ratio of the tetrahedron: the ratio of the sphere contained within the tetrahedron to the sphere containing the tetrahedron, divided by three. A third measure, the mean ratio , is defined in <ref> [19] </ref>; this measure is based on the eigenvalues of the transformation of a given tetrahedron to a regular tetrahedron. Joe and Liu show in [20] that each of these measures is equivalent in some sense. Before describing specific refinement algorithms, we review the process of bisection in three dimensions. <p> However, a bisection algorithm first introduced by Bansch [5] does generate a finite number of similar tetrahedra. Before describing the algorithm in detail, we sketch the proof given by Liu and Joe <ref> [19] </ref> which motivates the algorithm. 3 v v v v 0 1 02 03 Fig. 18. The first three levels of longest-edge bisection of the canonical tetrahedron. Note that the tetrahedra generated at each level are similar. <p> He further claims that only a finite number of similar tetrahedra are generated in the refined mesh, although the proof is incomplete. A complete proof of this result is given by Liu and Joe <ref> [19] </ref>. The conclusion of this result is that the angles of all resulting tetrahedra are bounded independently of the number of levels of refinement [5]. Liu and Joe have a more detailed description and analysis of this algorithm from a different perspective and prove additional properties of the algorithm [19] [21]. <p> Joe <ref> [19] </ref>. The conclusion of this result is that the angles of all resulting tetrahedra are bounded independently of the number of levels of refinement [5]. Liu and Joe have a more detailed description and analysis of this algorithm from a different perspective and prove additional properties of the algorithm [19] [21]. They show that the shape measure, , of any child, t i , formed with this algorithm from a tetrahedron t is bounded independently of the number of levels of refinement as (t i ) c (t) ;(3.5) where c 0:0974.
Reference: [22] <author> W. F. Mitchell, </author> <title> A comparison of adaptive refinement techniques for elliptic problems, </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 15 (1989), </volume> <pages> pp. </pages> <month> 326-347. </month> <title> [23] , Adaptive refinement for arbitrary finite element spaces with hierarchical bases, </title> <journal> J. Comp. Appl. Math., </journal> <volume> 36 (1991), </volume> <pages> pp. 65-78. </pages>
Reference-contexts: We seek a discrete solution for which the estimated L 1 error between the linear finite-element approximation and this exact solution is less than some fixed tolerance. This test problem is based on problem 1a in <ref> [22] </ref>, which considers a number of error estimators. For a more detailed analysis of error estimates for the finite-element method, we recommend the paper by Babuska and Rheinboldt [2]. <p> To achieve the same level of accuracy with a uniformly refined mesh, we would have had to refine the mesh to a spacing consistent with the smallest elements used in the adaptive mesh. This uniform mesh would have required approximately 65; 000 triangles. Mitchell <ref> [22] </ref> notes that when he uses the linear 3 Fig. 5. A selectively refined mesh for a test problem on the unit square. <p> The regular refinement algorithm of Bank In the modified version of Sewell's algorithm proposed by Mitchell, triangles are always bisected across the edge opposite the newest node in the triangles <ref> [22] </ref>. Triangles are refined only in compatible pairs; a neighboring pair is compatible if the edge selected by each triangle is the same (see Figure 15). <p> Because an angle is never divided twice, the angles generated by the algorithm are necessarily bounded away from 0 and (see Figure 16). Further, the length of the recursive 8 division of a neighbor is bounded <ref> [22] </ref>. N N N N N N NN 1 2 6 5 5 3 4 8 Fig. 15. An example demonstrating Sewell's newest-node algorithm. In the mesh on the left, only triangles 1 and 2 may be refined. <p> The modified newest-node refinement algorithm of Mitchell Mitchell compared these refinement algorithms in several numerical experiments <ref> [22] </ref>. He found that all these methods performed well. In general, the regular refinement algorithm was preferable when the initial triangles are nearly equilateral, whereas bisection was slightly more efficient otherwise. He also found that the longest-edge bisection algorithm and Rivara's variant that uses simple bisection 9 perform nearly identically.
Reference: [24] <author> J. Oden, L. Demkowicz, W. Rachowicz, and T. Westermann, </author> <title> Toward a universal h-p adaptive finite element strategy, part 2. A posterior error estimation, </title> <booktitle> Computer Methods in Applied Mechanics and Engineering, 77 (1989), </booktitle> <pages> pp. 113-180. </pages>
Reference-contexts: We recommend the papers by Chew [9], Ruppert [34], and Weatherill et al. [36] for details on this approach. We also note that the h-refinement discussed in this paper can be combined with order refinement of the basis functions; we recommend the papers [10], <ref> [24] </ref>, and [28] for more information on hp-adaptive finite-element methods. A good overview of a number of research topics in adaptive methods can be found in the book by Flaherty et al. [12]. A typical finite-element adaptive refinement approach is summarized in Figure 4.
Reference: [25] <author> J. T. Oden and A. Patra, </author> <title> A parallel adaptive strategy for hp finite element computations, </title> <type> Tech. Rep. 94-01, </type> <institution> TICAM, University of Texas; Austin, Texas., </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: Devine et al. has considered a parallel p-refinement approach on regular grids [11], and Bell et al. [7] have considered parallel adaptive methods for explicit finite-volume schemes on nested orthogonal meshes. Parallel hp-refinement finite-element methods have been considered by Oden and Patra <ref> [25] </ref>. 6. Summary and Concluding Remarks. Adaptive refinement of finite-element meshes can significantly improve the computational efficiency of scientific and engineering calculations involving solutions with large gradients, complicated geometries, and other special problem characteristics.
Reference: [26] <author> J. O'Rourke, </author> <title> Computational geometry column 23, </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 4 (1994), </volume> <pages> pp. 239-242. </pages> <note> Also in SIGACT News 25:3 (1994), 24-27. </note>
Reference-contexts: Thus, the bisection of the faces of shared tetrahedra is uniquely defined. Unfortunately, it is an open question whether the tetrahedra resulting from this algorithm have bounded solid angles (or any other measure) <ref> [26] </ref>. Rivara and Levin provide experimental results showing that the minimum angle in the tetrahedralization tends to converge to a fixed point or at least does not drop below a fixed point [32].
Reference: [27] <author> A. Pothen, H. Simon, and K.-P. Liou, </author> <title> Partitioning sparse matrices with eigenvectors of graphs, </title> <journal> SIAM Journal on Matrix Analysis, </journal> <volume> 11 (1990), </volume> <pages> pp. 430-452. </pages>
Reference-contexts: The choice of partitioning methods strongly depends on the sparse solver used. If a direct sparse factorization is used, minimization of the separator size is of primary importance, and spectral methods produce excellent results <ref> [27] </ref>. Finally, we note that interesting work has been done on the parallelization of alternative adaptive schemes to those discussed in this paper.
Reference: [28] <author> W. Rachowicz, J. Oden, and L. Demkowicz, </author> <title> Toward a universal h-p adaptive finite element strategy, part 3. Design of h-p meshes, </title> <booktitle> Computer Methods in Applied Mechanics and Engineering, 77 (1989), </booktitle> <pages> pp. 181-212. 21 </pages>
Reference-contexts: We recommend the papers by Chew [9], Ruppert [34], and Weatherill et al. [36] for details on this approach. We also note that the h-refinement discussed in this paper can be combined with order refinement of the basis functions; we recommend the papers [10], [24], and <ref> [28] </ref> for more information on hp-adaptive finite-element methods. A good overview of a number of research topics in adaptive methods can be found in the book by Flaherty et al. [12]. A typical finite-element adaptive refinement approach is summarized in Figure 4.
Reference: [29] <author> P. Raghavan, </author> <title> Distributed sparse gaussian elimination and orthogonal factorization, </title> <journal> SIAM Journal on Scientific Computing, </journal> <volume> 16 (1995), </volume> <pages> pp. 1462-1477. </pages>
Reference-contexts: We do not discuss these other problem aspects here; however, they must be considered in the same context of the refinement algorithm. We note that much work has been done on the parallel solution of linear systems, using both iterative methods [18] and direct methods [14] <ref> [29] </ref>. In this section, we review recent work on algorithms for the parallel refinement of unstructured meshes. We limit our discussion to triangulations; however, both of the methods described apply to tetrahedra as well.
Reference: [30] <author> M.-C. Rivara, </author> <title> Mesh refinement processes based on the generalized bisection of simplices, </title> <journal> SIAM Journal of Numerical Analysis, </journal> <volume> 21 (1984), </volume> <pages> pp. </pages> <month> 604-613. </month> <title> [31] , Selective refinement/derefinement algorithms for sequences of nested triangulations, International Journal for Numerical Methods in Engineering, </title> <booktitle> 28 (1989), </booktitle> <pages> pp. 2889-2906. </pages>
Reference-contexts: X Fig. 9. Triangle X on the left has been regularly refined into four triangles. At this stage the resulting triangulation is nonconforming. 2.2. Refinement Algorithms. Rivara has described an effective algorithm for mesh refinement based on bisection in <ref> [30] </ref>. The algorithm assumes that an initial set of triangles in M i have been marked for refinement based on error estimates/indicators. As triangles become nonconforming, they are also marked for refinement. The algorithm, given in Figure 10, continues until a conforming mesh, M i+1 , has been constructed. <p> The algorithm, given in Figure 10, continues until a conforming mesh, M i+1 , has been constructed. Rivara shows that this algorithm will terminate; however, no useful bound exists for L, the number of times the while loop is executed <ref> [30] </ref>. In Figure 11, we give an example for which L is O (n), where n is the number of triangles in M i . <p> Note that longest-edge refinement has propagated through every triangle in the mesh but one. Rivara has described variants of this algorithm, including one in which simple bisection is combined with bisection across the longest edge to reduce L <ref> [30] </ref>. By simple bisection, we mean bisection across an edge that may not be the longest. In this algorithm, a triangle is first bisected across its longest edge.
Reference: [32] <author> M.-C. Rivara and C. Levin, </author> <title> A 3-d refinement algorithm suitable for adaptive and multi-grid techniques, Communications in Applied Numerical Methods, </title> <booktitle> 8 (1992), </booktitle> <pages> pp. 281-290. </pages>
Reference-contexts: Rivara and Levin have suggested an extension of the longest-edge Rivara refinement algorithm to tetrahedra <ref> [32] </ref>. This algorithm corresponds to the two-dimensional algorithm for longest-edge bisection given in x2. By splitting the longest edge in the tetrahedron, we have that the longest edge on two shared faces is also split (ties can be broken by vertex labels). <p> Rivara and Levin provide experimental results showing that the minimum angle in the tetrahedralization tends to converge to a fixed point or at least does not drop below a fixed point <ref> [32] </ref>. These results suggest that, at least in practice, this algorithm would not result in tetrahedra that continue to degenerate in quality as a mesh is refined. <p> They further show that any two tetrahedra sharing an edge in such a mesh will differ by at most four levels of refinement. This fact implies that, in some sense, the resulting mesh should be smooth [21]. Liu and Joe experimentally compared meshes formed by longest-edge bisection as in <ref> [32] </ref> with meshes obtained from their algorithm [21]. They found that the longest-edge bisection algorithm often results in meshes with many more tetrahedra than generated by their algorithm. 4. Coarsening and Refinement on Curved Surfaces. <p> These algorithm ensure the generation of meshes whose quality is within a constant factor to the initial mesh quality in two-dimensions. In three dimensions, the theoretical bounds are not as good, and a number of open problems remain. However, good experimental results have been obtained for these algorithms [21], <ref> [32] </ref>. Parallel algorithms for adaptive refinement are encouraging. However, a parallel implementation requires consideration of other aspects of the problems solution, such as the partitioning of elements to processors and linear system solution. Preliminary results indicate that these problems can be solved effectively on large-scale parallel machines.
Reference: [33] <author> I. G. Rosenberg and F. Stenger, </author> <title> A lower bound on the angles of triangles constructed by bisecting the longest side, </title> <journal> Mathematics of Computation, </journal> <volume> 29 (1975), </volume> <pages> pp. 390-395. </pages>
Reference-contexts: If a triangle and its descendants are repeatedly bisected across their longest edges, the smallest resulting angle is bounded by at worst one-half the smallest angle in the original triangle <ref> [33] </ref>. A simple corollary is that the largest 5 resulting angle is also bounded away from . Moreover, the angles of M k tend to go toward 3 as k ! 1 [35]. Fig. 8. Triangle X on the left has been bisected into two triangles.
Reference: [34] <author> J. Ruppert, </author> <title> A new and simple algorithm for quality 2-dimensional mesh generation, </title> <booktitle> in Proc. 4th ACM-SIAM Symp. on Disc. Algorithms, </booktitle> <year> 1993, </year> <pages> pp. 83-92. </pages>
Reference-contexts: An alternative refinement approach based on Delaunay triangulations inserts new mesh points in element interiors (Steiner insertion) and is popular for finite-volume methods in computational fluid dynamics and related areas. We recommend the papers by Chew [9], Ruppert <ref> [34] </ref>, and Weatherill et al. [36] for details on this approach. We also note that the h-refinement discussed in this paper can be combined with order refinement of the basis functions; we recommend the papers [10], [24], and [28] for more information on hp-adaptive finite-element methods.
Reference: [35] <author> M. Stynes, </author> <title> On faster convergence of the bisection method for all triangles, </title> <journal> Mathematics of Computation, </journal> <volume> 35 (1980), </volume> <pages> pp. 1195-1201. </pages>
Reference-contexts: A simple corollary is that the largest 5 resulting angle is also bounded away from . Moreover, the angles of M k tend to go toward 3 as k ! 1 <ref> [35] </ref>. Fig. 8. Triangle X on the left has been bisected into two triangles. At this stage the resulting triangulation is nonconforming. A third means of triangle division is regular refinement [4], as illustrated in on the right of this figure.
Reference: [36] <author> N. Weatherill, O. Hassan, D. Marcum, and M. Marchant, </author> <title> Grid generation by the delaunay triangulation. Von Karman Institute for Fluid Dynamics, </title> <booktitle> 1993-1994 Lecture Series, </booktitle> <institution> NASA Ames Research Center, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: An alternative refinement approach based on Delaunay triangulations inserts new mesh points in element interiors (Steiner insertion) and is popular for finite-volume methods in computational fluid dynamics and related areas. We recommend the papers by Chew [9], Ruppert [34], and Weatherill et al. <ref> [36] </ref> for details on this approach. We also note that the h-refinement discussed in this paper can be combined with order refinement of the basis functions; we recommend the papers [10], [24], and [28] for more information on hp-adaptive finite-element methods.
Reference: [37] <author> R. Williams, DIME: </author> <title> Distributed Irregular Mesh Environment, </title> <institution> California Institute of Technology, </institution> <year> 1990. </year> <title> [38] , Performance of dynamic load balancing algorithms for unstructured mesh calculations, </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 3 (1991), </volume> <pages> pp. </pages> <month> 457-481. </month> <title> [39] , A dynamic solution-adaptive unstructured parallel solver, Report CCSF-21-92, Caltech Concurrent Supercomputing Facilities, </title> <institution> California Institute of Technology, Pasadena, Calif., </institution> <year> 1992. </year> <month> 22 </month>
Reference-contexts: After refinement, we get the triangles on the right, where the new triangle X 2 is now neighboring the new triangle Y 2 . The parallel refinement algorithm must ensure that this neighbor information is maintained correctly during refinement. Williams <ref> [37] </ref> [39] has given an approach for parallel mesh refinement and has implemented it in the parallel software package DIME. To address the two questions above, he maintains a parallel voxel database, using vertex coordinate information to help resolve point identity and triangle neighborhood information.
References-found: 31

