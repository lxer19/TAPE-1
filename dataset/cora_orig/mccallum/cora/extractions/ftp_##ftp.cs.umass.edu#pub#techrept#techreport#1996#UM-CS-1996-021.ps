URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1996/UM-CS-1996-021.ps
Refering-URL: http://laser.cs.umass.edu/abstracts/96-021.html
Root-URL: 
Email: dwyer@cis.ksu.edu clarke@cs.umass.edu  
Phone: (913)532-6350 (413)545-1328  
Title: A Compact Petri Net Representation and Its Implications for Analysis  
Author: Matthew B. Dwyer Lori A. Clarke 
Address: Manhattan, KS 66506 Amherst, MA 01003  
Affiliation: Dept. of Computing and Info. Sciences Dept. of Computer Science Kansas State University University of Massachusetts  
Abstract: This paper explores a property-independent, coarsened, multi-level representation for supporting state reach- ability analysis for a number of different properties. This multi-level representation comprises a reachability graph derived from a highly optimized Petri net representation that is based on task interaction graphs and associated property-specific summary information. This highly optimized representation reduces the size of the reachability graph but may increase the cost of the analysis algorithm for some types of analyses. This paper explores this trade-off. To this end, we have developed a framework for checking a variety of properties of concurrent programs using this optimized representation and present empirical results that compare the cost to an alternative Petri net representation. In addition, we present reduction techniques that can further improve the performance and yet still preserve analysis information. Although worst-case bounds for most concurrency analysis techniques are daunting, we demonstrate that the techniques that we propose significantly broaden the applicability of reachability analyses. 
Abstract-found: 1
Intro-found: 1
Reference: [ABC + 91] <author> G.S. Avrunin, U.A. Buy, J.C. Corbett, L.K. Dillon, and J.C. Wileden. </author> <title> Automated analysis of concurrent systems with the constrained expression toolset. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(11) </volume> <pages> 1204-1222, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: Integer linear programming techniques avoid consideration of the state space entirely. They formulate a set of necessary conditions related to the property of interest and analyze the satisfiability of those conditions by the program <ref> [ABC + 91] </ref>. Unfortunately, in the worst-case, the integer programming algorithm for performing this analysis requires exponential time. Data flow analysis techniques are one of the few concurrency analysis approaches that do not have exponential cost [CK93, DS91, DC94, MR91].
Reference: [And91] <author> G.R. Andrews. </author> <title> Paradigms for process interaction in distributed programs. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(1) </volume> <pages> 49-90, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: Such results are useful as an initial indication of the feasibility of an analysis technique. The cost of 4 an analysis technique can vary greatly from program to program. The control and communication structures that are used in real concurrent programs <ref> [And91] </ref> can also vary greatly. Therefore, a thorough understanding of the practical benefits of an analysis technique requires evaluation of that technique over a wide range of real concurrent programs. To date, there has been little empirical work in evaluating concurrency analysis techniques.
Reference: [ASU85] <author> A.V. Aho, R. Sethi, and J.D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <address> AddisonWesley, </address> <year> 1985. </year>
Reference-contexts: One well-understood technique for reducing the size of the representation is the notion of coarsening the representation to increase the information modeled by each node or edge in the graph. This is precisely the approach taken in constructing basic-block control flow graphs, e.g., <ref> [ASU85] </ref>. Savings accrue from this approach by moving information from those parts of the representation on which complex algorithms operate to those parts of the representation on which simpler algorithms operate.
Reference: [BCM + 90] <author> J.R. Burch, E.M. Clarke, K.L. McMillan, D.L. Dill, and L.J. Hwang. </author> <title> Symbolic model check-ing: 10 20 states and beyond. </title> <booktitle> In Proceedings of the Fifth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 428-439. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: Symbolic model-checking techniques use a fix-point computation over an encoding of the state transition relation to determine reachability of a given state <ref> [BCM + 90] </ref>. For some systems this encoding is very compact, allowing time-efficient analysis. Finding a compact encoding can be difficult, however, and for some systems no compact encoding exists, resulting in a worst case state transition relation that is exponential in size.
Reference: [Ber87] <author> G. Berthelot. </author> <title> Checking properties of nets using transformations. </title> <booktitle> In Advances in Petri nets, volume 222 of Lecture Notes in Computer Science, </booktitle> <pages> pages 19-40. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: This is the approach taken when the reachability graph is derived from a Petri net representation [Pet81]. There has been extensive research on Petri net reduction techniques, e.g., <ref> [Ber87, ST + 94] </ref>. We explore an approach that uses the TIG representation of each task to create a Petri net representation of the concurrent system. The resulting representation, called a TIG-based Petri nets (TPN)s, combines many of the benefits of TIGs and Petri nets. <p> Valmari [Val91] and Godefroid and Wolper [GW91] have developed methods for determining when states are equivalent and avoiding the generation of redundant states. An alternate method of reducing the cost of reachability analysis for Petri net based analyses is termed Petri net reductions. Berthelot <ref> [Ber87] </ref> describes a variety of transformations that can be applied to Petri nets so as to reduce their size yet maintain certain properties. Duri et. al. [DBDS94] have demonstrated the potential of this approach to reduce the cost of analyzing deadlock freedom for selected programs. <p> In this section we discuss ways to combine summary information for analysis of two different properties. In the remainder of this section we discuss three TPN reductions: parallel transitions, serial places, and parallel places. These are adaptations of existing Petri net reductions proposed by Berthelot <ref> [Ber87] </ref> and used by Shatz et. al. [ST + 94] for Ada-net reductions. In defining these reductions we describe: the structural properties of the sub-graph of the Petri net, which determines the applicability of the reduction, and the transformation of that sub-graph.
Reference: [CC96] <author> A.T. Chamillard and L.A. Clarke. </author> <title> Improving the accuracy of petri net-based analysis of con-current programs. </title> <booktitle> In Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis, </booktitle> <pages> pages 24-38, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: TPNs are not just an equivalent representation, however, they have been designed to be a property-independent, coarsened, multi-level representation for which we can easily associate property- specific summary information to facilitate a range of analyses. In addition, Petri net analysis techniques, such as accuracy improving techniques <ref> [CC96] </ref> and net reduction techniques, can be applied to TPNs. Some possible TPN reductions are discussed in Section 6. <p> Second, the existence of a common underlying model allows detailed comparison of TPN-based analyses to other Petri net analyses. Furthermore, this comparison can focus on the essential work required for analysis rather than the time to run an implementation of analysis tools. Third, recent work <ref> [CC96] </ref> has described techniques for encoding additional information in Petri net models so as to increase the precision of analysis results. This work can also be applied to TPN-based analysis. It has been suggested that no single technique is suitable for analysis of all properties of all concurrent programs.
Reference: [CK93] <author> S.C. Cheung and J. Kramer. </author> <title> Tractable flow analysis for anomaly detection in distributed pro-grams. </title> <booktitle> In Proceedings of the European Software Engineering Conference, volume 717 of Lecture Notes in Computer Science, </booktitle> <pages> pages 283-300. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Unfortunately, in the worst-case, the integer programming algorithm for performing this analysis requires exponential time. Data flow analysis techniques are one of the few concurrency analysis approaches that do not have exponential cost <ref> [CK93, DS91, DC94, MR91] </ref>. These techniques formulate a set of conditions, related to the property to be analyzed, as a set of data flow analyses whose solution provides information about the validity or satisfiability of those conditions by the program.
Reference: [Cor94] <author> J.C. Corbett. </author> <title> An empirical evaluation of three methods for deadlock analysis of Ada tasking programs. </title> <booktitle> Software Engineering Notes, </booktitle> <pages> pages 204-215, </pages> <month> August </month> <year> 1994. </year> <booktitle> Proceedings of the International Symposium on Software Testing and Analysis. </booktitle>
Reference-contexts: A recent study <ref> [Cor94] </ref> has compared the cost-effectiveness of state space enumeration, reduction, model-checking, and integer programming analysis techniques for analyzing deadlock freedom. <p> A fair comparison requires that both techniques be equivalent in the kinds of information they model and the kinds of analyses they support. There are a great variety of program models and analysis algorithms. As Corbett discusses <ref> [Cor94] </ref>, different models and algorithms can be sensitive to subtle variations in the input program. Thus, a comparative evaluation can easily lead to unintended biasing of the results. Moreover, 13 program analyses are not useful in the abstract; their worth derives from application to "real" programs.
Reference: [DBDS94] <author> S. Duri, U. Buy, R. Devarapalli, </author> <title> and S.M. Shatz. Application and experimental evaluation of state space reduction methods for deadlock analysis in Ada. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 3(4) </volume> <pages> 340-380, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: An alternate method of reducing the cost of reachability analysis for Petri net based analyses is termed Petri net reductions. Berthelot [Ber87] describes a variety of transformations that can be applied to Petri nets so as to reduce their size yet maintain certain properties. Duri et. al. <ref> [DBDS94] </ref> have demonstrated the potential of this approach to reduce the cost of analyzing deadlock freedom for selected programs. Furthermore, they demonstrate that Petri net reductions and other reduction methods, including those of Valamari and Godefroid and Wolper, can be combined to further decrease analysis cost. <p> despite the rapid growth of the state space, enumeration methods that consider the entire concurrent program can be practical for small to medium size programs of moderate complexity [YTL + 95] and that state space reduction techniques can increase the size of the programs that can be considered still further <ref> [DBDS94] </ref>. A recent study [Cor94] has compared the cost-effectiveness of state space enumeration, reduction, model-checking, and integer programming analysis techniques for analyzing deadlock freedom. <p> We have chosen to compare the performance of the analyses on standard examples from the literature. Analysis data based on Ada-nets is available for four example Ada tasking programs <ref> [DBDS94] </ref>, BDS, versions of Gas-1, Phils and the RW examples. BDS is a simulation of a border defense system. It contains 15 tasks and has entry calls and accept statements nested within complicated control flow structures. <p> Although the maximum capacity of the TOTAL toolset is not stated, programs whose reachability graphs are as large as 200000 states and 750000 arcs have been analyzed <ref> [DBDS94] </ref>. <p> Thus, the reader should view the results not as a reflection on Ada-nets but more as a point of comparison to Petri net analyses that are not reduced for a specific property. Recent data <ref> [DBDS94] </ref> show that when deadlock-freedom 22 reduction techniques are applied to Ada-nets the size of the reachability graph is reduced considerably. Such reductions enabled larger instances of the scalable problems we considered to be analyzed: Gas 1-10, Phils 20, and RW 10/10.
Reference: [DC94] <author> M.B. Dwyer and L.A. Clarke. </author> <title> Data flow analysis for verifying properties of concurrent programs. </title> <journal> Software Engineering Notes, </journal> <volume> 19(5) </volume> <pages> 62-75, </pages> <month> December </month> <year> 1994. </year> <booktitle> Proceedings of the ACM SIGSOFT Symposium on the Foundations of Software Engineering. </booktitle>
Reference-contexts: Unfortunately, in the worst-case, the integer programming algorithm for performing this analysis requires exponential time. Data flow analysis techniques are one of the few concurrency analysis approaches that do not have exponential cost <ref> [CK93, DS91, DC94, MR91] </ref>. These techniques formulate a set of conditions, related to the property to be analyzed, as a set of data flow analyses whose solution provides information about the validity or satisfiability of those conditions by the program. <p> Combining a variety of different sub-analyses provides a flexible method for improving the precision of the analysis results at a cost bounded by a low-order polynomial in the size of the program <ref> [DC94] </ref>. More experimental studies are needed to determine if such flow analysis techniques are capable of producing as precise results as more costly techniques over a broad range of programs.
Reference: [DCN95] <author> M.B. Dwyer, L.A. Clarke, and K.L. Nies. </author> <title> A compact petri net representation for concurrent programs. </title> <booktitle> In Proceedings of the 17th International Conference on Software Engineering, </booktitle> <pages> pages 147-158, </pages> <month> April </month> <year> 1995. </year> <month> 30 </month>
Reference-contexts: We compare our results to recent work using an alternative Petri net representation for Ada programs. Our empirical data suggests that the TPN representation offers reduced analysis cost and enables reachability analysis for larger programs than previously proposed property-independent techniques. Building on our initial work <ref> [DCN95] </ref>, we have also been able to adapt some property-specific Petri net reduction techniques into property-independent TPN reduction techniques, with the potential to further improve performance. In the following section, we briefly overview the major approaches to concurrency analysis. Section 3 describes Petri nets, the TIG model, and reachability graphs. <p> Thus, this sequence of reduction steps has yielded a more efficient analysis with the same precision as an unreduced analysis. 6.5 Discussion A number of interesting observations can be made about our adaptation of Petri net reductions so as to make them property-independent. In earlier work <ref> [DCN95] </ref> we describe a complex deadlock-freedom preserving TPN reduction called forced communication pairs. Using a series of serial place and parallel place reductions we can produce a property- independent version of the forced communication pair reduction.
Reference: [DS91] <author> E. Duesterwald and M.L. Soffa. </author> <title> Concurrency analysis in the presence of procedures using a data flow framework. </title> <booktitle> In Proceedings of the ACM SIGSOFT Symposium on Testing, Analysis and Verification, </booktitle> <pages> pages 36-48, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Unfortunately, in the worst-case, the integer programming algorithm for performing this analysis requires exponential time. Data flow analysis techniques are one of the few concurrency analysis approaches that do not have exponential cost <ref> [CK93, DS91, DC94, MR91] </ref>. These techniques formulate a set of conditions, related to the property to be analyzed, as a set of data flow analyses whose solution provides information about the validity or satisfiability of those conditions by the program.
Reference: [GW91] <author> P. Godefroid and P. Wolper. </author> <title> Using partial orders for the efficient verification of deadlock freedom and safety properties. </title> <booktitle> In Proceedings of the Third Workshop on Computer Aided Verification, </booktitle> <pages> pages 417-428, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Unfortunately, in general, as programs increase in size and complexity, the state space grows exponentially and the space/time requirements of these analysis methods becomes impractical. A variety of methods for reducing the cost of state space enumeration analyses have been explored. Valmari [Val91] and Godefroid and Wolper <ref> [GW91] </ref> have developed methods for determining when states are equivalent and avoiding the generation of redundant states. An alternate method of reducing the cost of reachability analysis for Petri net based analyses is termed Petri net reductions.
Reference: [LC89] <author> D.L. Long and L.A. Clarke. </author> <title> Task interaction graphs for concurrency analysis. </title> <booktitle> In Proceedings of the 11th International Conference on Software Engineering, </booktitle> <pages> pages 44-52, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: Thus, great efforts are taken to reduce the size of the reachability graph. One approach that has been explored is to reduce the representation of each task in isolation before forming the reachability graph from these individual task representations. This was the approach taken in <ref> [LC89] </ref> using task interaction graphs (TIG)s, where the nodes in the task representation represent maximal sequential regions. Another approach is to form a model of the concurrent system that can be optimized or reduced before forming the reachability graph. <p> s place requires a token from the calling place in task T2; however the output transition leading to the b s place requires no such token as it represents a control flow choice that is internal to T1. 3.2 Task Interaction Graphs TIGs have been proposed by Long and Clarke <ref> [LC89] </ref> as a compact flow graph representation for concurrent programs. TIGs divide tasks into maximal sequential regions, where such task regions define all of the possible behaviors between two consecutive task interactions.
Reference: [MR87] <author> E.T. Morgan and R.R. Razouk. </author> <title> Interactive state-space analysis of concurrent systems. </title> <journal> IEEE Transactions of Software Engineering, </journal> <volume> 13(10) </volume> <pages> 1080-1091, </pages> <year> 1987. </year>
Reference-contexts: State space enumeration methods consider each reachable program state to determine whether a program satisfies a given property <ref> [MR87, SMBT90, Tay83b, YTL + 95] </ref>. Unfortunately, in general, as programs increase in size and complexity, the state space grows exponentially and the space/time requirements of these analysis methods becomes impractical. A variety of methods for reducing the cost of state space enumeration analyses have been explored. <p> Petri net models of concurrent programs have existed for some time; they are usually constructed from the set of control flow graphs for the tasks of the program <ref> [MZGT85, MR87, PTY95, SMBT90] </ref>. To illustrate, we consider a Petri net that explicitly represents the possible control flow branch and merge points in each program task. We refer to such a net as a control flow graph Petri net (CFGPN). <p> The start state corresponds to M 0 . Final states of a reachability graph correspond to Petri net markings in which all of the marked places model the termination of a task. Reachability graphs for Petri nets have been used to perform analysis of Ada tasking programs <ref> [MR87, SMBT90] </ref>. <p> The CFGs are then converted to TIGs from which the TPN is constructed. A reachability graph is generated from a TPN using standard Petri net techniques <ref> [MR87] </ref>. A variety of analysis algorithms can then be applied to the TPN-based reachability graph including checking for deadlock freedom, checking for freedom from critical races, and performing data flow analyses to check for event or state sequencing properties.
Reference: [MR91] <author> S.P. Masticola and B.G. Ryder. </author> <title> A model of Ada programs for static deadlock detection in polynomial time. </title> <booktitle> In Proceedings of Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pages 97-107, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Unfortunately, in the worst-case, the integer programming algorithm for performing this analysis requires exponential time. Data flow analysis techniques are one of the few concurrency analysis approaches that do not have exponential cost <ref> [CK93, DS91, DC94, MR91] </ref>. These techniques formulate a set of conditions, related to the property to be analyzed, as a set of data flow analyses whose solution provides information about the validity or satisfiability of those conditions by the program.
Reference: [Mur89] <author> T. Murata. </author> <title> Petri nets: Properties, analysis and applications. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(44) </volume> <pages> 541-580, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: We present these reductions in terms of TPNs but believe they would also be applicable to other Petri net representations, such as Ada-nets. Towards this end, we indicate where differences in the underlying Petri net model will influence the formulation of property-independent reductions. The theory of Petri net reductions <ref> [Mur89] </ref> allows a given net to be replaced by a reduced net that maintains certain properties of the original net. The goal is to produce a Petri net which generates a significantly smaller reachability graph.
Reference: [MZGT85] <author> D. Mandrioli, R. Zicari, C. Ghezzi, and F. Tisato. </author> <title> Modeling the Ada task system by Petri nets. </title> <journal> Computer Languages, </journal> <volume> 10(1) </volume> <pages> 43-61, </pages> <year> 1985. </year>
Reference-contexts: Petri net models of concurrent programs have existed for some time; they are usually constructed from the set of control flow graphs for the tasks of the program <ref> [MZGT85, MR87, PTY95, SMBT90] </ref>. To illustrate, we consider a Petri net that explicitly represents the possible control flow branch and merge points in each program task. We refer to such a net as a control flow graph Petri net (CFGPN).
Reference: [Pet81] <author> J.L. Peterson. </author> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1981. </year>
Reference-contexts: Another approach is to form a model of the concurrent system that can be optimized or reduced before forming the reachability graph. This is the approach taken when the reachability graph is derived from a Petri net representation <ref> [Pet81] </ref>. There has been extensive research on Petri net reduction techniques, e.g., [Ber87, ST + 94]. We explore an approach that uses the TIG representation of each task to create a Petri net representation of the concurrent system.
Reference: [PTY95] <author> M. Pezze, R.N. Taylor, and M. Young. </author> <title> Graph models for reachability analysis of concurrent programs. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 4(2) </volume> <pages> 171-213, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Petri net models of concurrent programs have existed for some time; they are usually constructed from the set of control flow graphs for the tasks of the program <ref> [MZGT85, MR87, PTY95, SMBT90] </ref>. To illustrate, we consider a Petri net that explicitly represents the possible control flow branch and merge points in each program task. We refer to such a net as a control flow graph Petri net (CFGPN). <p> Unlike a forest of TIGs a Petri net explicitly represents the interactions between tasks. We have combined the aggressive coarsening of TIGs and the explicit view of Petri nets to yield TIG-based Petri nets. Pezze et. al. <ref> [PTY95] </ref> have demonstrated how one can construct a Petri net equivalent representation from a graph-based representation of concurrent programs. <p> A similar algorithm developed independently by Pezze et. al. <ref> [PTY95] </ref> can be used to construct a Petri net from a set of task flow graphs. Algorithm 1 constructs a Petri net that overestimates the possible task interactions of the program.
Reference: [SMBT90] <author> S.M. Shatz, K. Mai, C. Black, and S. Tu. </author> <title> Design and implementation of a Petri net based toolkit for Ada tasking analysis. </title> <journal> IEEE Transactions on Parallel and Distributed System, </journal> <volume> 1(4) </volume> <pages> 424-441, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: State space enumeration methods consider each reachable program state to determine whether a program satisfies a given property <ref> [MR87, SMBT90, Tay83b, YTL + 95] </ref>. Unfortunately, in general, as programs increase in size and complexity, the state space grows exponentially and the space/time requirements of these analysis methods becomes impractical. A variety of methods for reducing the cost of state space enumeration analyses have been explored. <p> Petri net models of concurrent programs have existed for some time; they are usually constructed from the set of control flow graphs for the tasks of the program <ref> [MZGT85, MR87, PTY95, SMBT90] </ref>. To illustrate, we consider a Petri net that explicitly represents the possible control flow branch and merge points in each program task. We refer to such a net as a control flow graph Petri net (CFGPN). <p> The start state corresponds to M 0 . Final states of a reachability graph correspond to Petri net markings in which all of the marked places model the termination of a task. Reachability graphs for Petri nets have been used to perform analysis of Ada tasking programs <ref> [MR87, SMBT90] </ref>. <p> This allows us to focus on the essential work that is required to perform the analyses, rather than the details of toolset implementations. We are fortunate to have access to analysis results from the TOTAL toolset <ref> [SMBT90] </ref>. TOTAL performs state space analysis by constructing the reachability graph from a statement level Petri net model of Ada tasking programs, called Ada-nets. Ada-nets explicitly represent control flow decisions in the structure of the Petri net. We compare our empirical findings for TPN-based analyses to those for Ada-net-based analyses. <p> We do this analytically based on Algorithm 3 and descriptions of checking for deadlock in Ada-nets <ref> [SMBT90] </ref>. We assume that each of the following operations has unit cost: bit-vector operations, accessing a Petri net marking, checking for the existence of successor markings, and checking that a given marking corresponds to a terminal program state.
Reference: [ST + 94] <author> S.M. Shatz, S. Tu, , T.Murata, and S. Duri. </author> <title> Theory and application of Petri net reduction for Ada tasking deadlock analysis. </title> <type> Technical report, </type> <institution> Department of Electrical Engineering and Computer Science, University of Illinois, Chicago, </institution> <year> 1994. </year>
Reference-contexts: This is the approach taken when the reachability graph is derived from a Petri net representation [Pet81]. There has been extensive research on Petri net reduction techniques, e.g., <ref> [Ber87, ST + 94] </ref>. We explore an approach that uses the TIG representation of each task to create a Petri net representation of the concurrent system. The resulting representation, called a TIG-based Petri nets (TPN)s, combines many of the benefits of TIGs and Petri nets. <p> In the remainder of this section we discuss three TPN reductions: parallel transitions, serial places, and parallel places. These are adaptations of existing Petri net reductions proposed by Berthelot [Ber87] and used by Shatz et. al. <ref> [ST + 94] </ref> for Ada-net reductions. In defining these reductions we describe: the structural properties of the sub-graph of the Petri net, which determines the applicability of the reduction, and the transformation of that sub-graph. <p> In fact, as illustrated by the deadlock summaries for the parallel place reduction, the property predicate check time can be reduced since combined summaries represent fewer blocking edges. Many of the Petri net reductions defined by Shatz et. al. <ref> [ST + 94] </ref> are specific to the structure of Ada-nets; they serve primarily to coarsen the standard Ada-net representation. Since the TPN is already coarsened by its construction from TIGs, those reductions will be neither applicable nor needed.
Reference: [Tay83a] <author> R.N. Taylor. </author> <title> Complexity of analyzing the synchronization structure of concurrent programs. </title> <journal> Acta Informatica, </journal> <volume> 19 </volume> <pages> 57-84, </pages> <year> 1983. </year>
Reference-contexts: In this paper, we explore some of these decisions for state reachability analysis. The cost of reachability analysis is dominated by the fact that, in general, reachability graphs can grow to be exponential in the size of the source program <ref> [Tay83a] </ref>. Thus, great efforts are taken to reduce the size of the reachability graph. One approach that has been explored is to reduce the representation of each task in isolation before forming the reachability graph from these individual task representations.
Reference: [Tay83b] <author> R.N. Taylor. </author> <title> A general-purpose algorithm for analyzing concurrent programs. </title> <journal> Communications of the ACM, </journal> <volume> 26(5) </volume> <pages> 362-376, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: State space enumeration methods consider each reachable program state to determine whether a program satisfies a given property <ref> [MR87, SMBT90, Tay83b, YTL + 95] </ref>. Unfortunately, in general, as programs increase in size and complexity, the state space grows exponentially and the space/time requirements of these analysis methods becomes impractical. A variety of methods for reducing the cost of state space enumeration analyses have been explored.
Reference: [TBC + 88] <author> Richard N. Taylor, Frank C. Belz, Lori A. Clarke, Leon J. Osterweil, Richard W. Selby, Jack C. Wileden, Alexander L. Wolf, and Michal Young. </author> <title> Foundations for the Arcadia Environment Architecture. </title> <booktitle> In Proceedings of SIGSOFT88: Third Symposium on Software Development Environment, </booktitle> <pages> pages 1-13, </pages> <month> November </month> <year> 1988. </year> <note> Published as ACM SIGPLAN Notices 24(2) and as SIGSOFT Software Engineering Notes, </note> <month> 13(5) November </month> <year> 1988. </year> <month> 31 </month>
Reference-contexts: This data was collected using the TPN toolset. With this toolset, constructing a TPN from Ada source code involves executing the Arcadia <ref> [TBC + 88] </ref> language processing tools to generate a collection of CFGs, one for each program task. The CFGs are then converted to TIGs from which the TPN is constructed. A reachability graph is generated from a TPN using standard Petri net techniques [MR87].
Reference: [Val91] <author> A. Valmari. </author> <title> A stubborn attack on state explosion. </title> <booktitle> In Proceedings of the 2nd Workshop on Computer Aided Verification, volume 531 of Lecture Notes in Computer Science, </booktitle> <pages> pages 156-165. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Unfortunately, in general, as programs increase in size and complexity, the state space grows exponentially and the space/time requirements of these analysis methods becomes impractical. A variety of methods for reducing the cost of state space enumeration analyses have been explored. Valmari <ref> [Val91] </ref> and Godefroid and Wolper [GW91] have developed methods for determining when states are equivalent and avoiding the generation of redundant states. An alternate method of reducing the cost of reachability analysis for Petri net based analyses is termed Petri net reductions.
Reference: [YTL + 95] <author> M. Young, R.N. Taylor, D.L. Levine, K.A. Nies, and D. Brodbeck. </author> <title> A concurrency analysis tool suite: Rationale, design, and preliminary experience. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 4(1) </volume> <pages> 64-106, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: State space enumeration methods consider each reachable program state to determine whether a program satisfies a given property <ref> [MR87, SMBT90, Tay83b, YTL + 95] </ref>. Unfortunately, in general, as programs increase in size and complexity, the state space grows exponentially and the space/time requirements of these analysis methods becomes impractical. A variety of methods for reducing the cost of state space enumeration analyses have been explored. <p> To date, there has been little empirical work in evaluating concurrency analysis techniques. Experimental results suggest that despite the rapid growth of the state space, enumeration methods that consider the entire concurrent program can be practical for small to medium size programs of moderate complexity <ref> [YTL + 95] </ref> and that state space reduction techniques can increase the size of the programs that can be considered still further [DBDS94]. A recent study [Cor94] has compared the cost-effectiveness of state space enumeration, reduction, model-checking, and integer programming analysis techniques for analyzing deadlock freedom. <p> They have been shown to enable significant reduction in the size of reachability graphs in practice <ref> [YTL + 95] </ref>. TIG nodes correspond to regions of sequential program execution and are natural binding points for property-specific information summarizing the effects of a region. Thus, a forest of TIGs could be used to construct a coarsened, multi-level program representation for concurrency analysis. <p> In practice, we group together edges that are branches of the same select statement. These edge groups <ref> [YTL + 95] </ref> are then used to compute choice combinations where each element of the combination may name multiple entries. <p> Thus, the total cost of Algorithm 3 is O (c k ). We note that Young et. al. <ref> [YTL + 95] </ref> showed this problem to be NP-hard, but they have found empirically that for a number of programs, checking this condition is practical. Checking for freedom from deadlock is supported by the TOTAL toolset. For most statement-level Petri net representations, including Ada-nets, the deadlock predicate is very simple.
Reference: [YY91] <author> W.J. Yeh and M. Young. </author> <title> Compositional reachability analysis using process algebra. </title> <booktitle> In Proceedings of the ACM SIGSOFT Symposium on Testing, Analysis and Verification, </booktitle> <pages> pages 49-59, </pages> <month> October </month> <year> 1991. </year> <month> 32 </month>
Reference-contexts: More experimental studies are needed to determine if such flow analysis techniques are capable of producing as precise results as more costly techniques over a broad range of programs. Compositional approaches decompose the original analysis problem into smaller problems on which many of the above techniques can be applied <ref> [YY91] </ref>. This approach relies on finding a decomposition of the original problem that significantly reduces the cost of analysis for the subproblems. For many programs, such a suitable decomposition may be difficult to find, if one exists at all.
References-found: 28

