URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/iccd94.CMS.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu:80/~shiple/publications/index.html
Root-URL: 
Title: Two-phase Logic Design by Hardware Flowcharts  
Author: Kevin Covey Sandra Murdock Thomas Shiple 
Address: Santa Clara, CA  Berkeley CA  
Affiliation: National Semiconductor Corporation,  Department of Electrical Engineering and Computer Sciences, University of California,  
Abstract-found: 0
Intro-found: 1
Reference: [Tre81] <author> N. Trednnick, </author> <title> How to Flowchart for Hardware, Dec. </title> <booktitle> 1981, IEEE Computer, </booktitle> <pages> pp. 87-102. </pages>
Reference-contexts: While not as well known as f lowcharting techniques used for developing computer software, f lowchart methods have been used in the past for hardware development. Trednnick <ref> [Tre81] </ref> described a flowchart method for designing the central processing unit (CPU) of a computer system. The Trednnick flowcharting methodology is targeted for system level applications rather than IC design. Another example of a hardware flowcharting technique is the Daisy Computer Systems Hardware Compiler [Dai86]. <p> The exact clock cycle that this occurs is determined by the enable signal created by the control logic. The control logic tells the [datapath] what to do when <ref> [Tre81] </ref>. Because the control logic is like a software program, flowcharting lends itself particularly well to its design. 2.3 Example To illustrate our design methodology for two-phase logic, we will design the control section for a programmable down counter, often used as a prescaler in embedded controller applications.
Reference: [Dai86] <institution> Daisy Hardware Compiler, Daisy Computer Systems, </institution> <month> Nov. </month> <year> 1986, </year> <pages> pp. </pages> <note> 9-1 to 9-27. </note> <author> [Yam93]R.K. Yamanouchi, S.G. Schneider, D.K. Covey, </author> <title> Structured Logic Design Method Using Figures of Merit and a Flowchart Methodology, </title> <month> Nov. </month> <year> 1993, </year> <title> United States Patent Number 5,258,919. </title>
Reference-contexts: Trednnick [Tre81] described a flowchart method for designing the central processing unit (CPU) of a computer system. The Trednnick flowcharting methodology is targeted for system level applications rather than IC design. Another example of a hardware flowcharting technique is the Daisy Computer Systems Hardware Compiler <ref> [Dai86] </ref>. The Hardware Compiler is a set of software programs that converts a high level logic f lowchart into a truth table. The limitation of the Hardware Compiler owchart procedure is that it can be applied only to single phase or edge-triggered designs.
Reference: [Koh78] <author> Z. Kohavi, </author> <title> Switching and Finite Automata Theory . McGraw-Hill, </title> <booktitle> 1978, </booktitle> <pages> pp. 322-437. </pages>
Reference-contexts: The same will be true of the direct implementation once the machine has successfully cycled through its reset. We assign the binary code of the states by following the same basic algorithms as described in Kohavi <ref> [Koh78] </ref>. Because there are two sub-machines operating, each machine will be coded independently of the other . However, to minimize the next state logic, a good state assignment will consider the previous states coded assignment. <p> As a note however , we have found that an experienced designer using automata theory techniques <ref> [Koh78] </ref> can usually do a better job of state assignment than current synthesis tools. This is because an engineer can utilize his/her knowledge of the desired design functionality and the options of partitioning tradeoffs to decide on the most ef ficient machine implementation for optimal state and I/O assignments.
Reference: [Aziz94] <author> A. Aziz, F. Balarin, R. Brayton, S.-T. Cheng, R. Hojati, T. Kam, S. Krishnan, R. Ranjan, A. Sangiovanni-V in-centelli, T. Shiple, V. Singhal, S. Tasiran, and H.-Y. Wang, "HSIS: </author> <title> A BDD-Based Environment for Formal Verification", </title> <booktitle> In Proc. 31st Design Automat. Conf., </booktitle> <address> San Diego, CA, </address> <month> June </month> <year> 1994, </year> <pages> pp. 454-459. </pages>
Reference-contexts: Our aim is to take advantage of an emer ging technique, known as formal design verification, to catch these sorts of bugs. T o this end, we have adopted HSIS, a formal verification platform from UC Berkeley <ref> [Aziz94] </ref>, to experiment with formal verification. As shown here, our two-phase design methodology is fully compatible with HSIS. G The inputs to HSIS are a description of a design, written in BLIF-MV, and a list of properties that the designer wishes to verify of the design.
Reference: [Cheng93] <author> S.-T. Cheng, G. York, and R. Brayton, "VL2MV: </author> <note> A Compiler from Verilog to BLIF-MV," unpublished, </note> <year> 1993. </year>
Reference-contexts: This is modeled in BLIF-MV by nondeterministically assigning the initial value of each latch to either a 0 or 1. It is possible to translate our textual netlist output from PROGRAPH directly into BLIF-MV. However, a tool known as VL2MV <ref> [Cheng93] </ref> has been created that can compile a subset of Verilog to BLIF-MV. Since the Verilog generated from our designs falls within this subset, using VL2MV is the obvious path to HSIS.
References-found: 5

