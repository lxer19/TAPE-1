URL: ftp://coast.cs.purdue.edu/pub/doc/tools/mogul-screen.psf.ps.Z
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ39.html
Root-URL: http://www.cs.purdue.edu
Title: M A R C H  Simple and Flexible Datagram Access Controls for Unix-based Gateways  
Author: Jeffrey C. Mogul d i g i t a l 
Address: 100 Hamilton Avenue Palo Alto, California 94301 USA  
Affiliation: Western Research Laboratory  
Date: 89/4  
Pubnum: 1 9 8 9 Research Report  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> David R. Boggs, John F. Shoch, Edward A. Taft, and Robert M. Metcalfe. Pup: </author> <title> An Internetwork Architecture. </title> <journal> IEEE Transactions on Communications COM-28(4):612-624, </journal> <month> April, </month> <year> 1980. </year>
Reference-contexts: The ``talk'' daemon could be modified to coexist with screend, but this is not always convenient. Another example where this assumption breaks down, although not directly relevant to the IP-based screend, is found in the ``socket'' mechanism in the Pup byte-stream protocol (BSP) <ref> [1] </ref>. Although the initial BSP connection packet is directed at a well-known socket number, the server listening on that socket immediately creates a new socket for the actual connection. Thus, subsequent packets do not travel to a well-known socket number.
Reference: [2] <institution> Gateway System Manual. cisco Systems, Inc., </institution> <address> Menlo Park, CA, </address> <year> 1988. </year>
Reference-contexts: A more flexible way to control access is to prevent certain packets from entering or leaving an organization through its gateways. This allows greater flexibility than an application-level gateway, although as with any power tool it also requires greater vigilance. Various commercial gateway systems provide such a mechanism <ref> [2, 27] </ref> and it has also been treated in the literature [10]. Although it is not a good idea to use a Unix system as an internetwork gateway, the popularity of 4.2BSD Unix (and its successors and derivatives), coupled with bureaucratic inertia, has led numerous organizations to use Unix-based gateways. <p> For example, the Proteon p4200 gateway [27] allows the manager to specify access based on pairs of IP addresses; each address is combined with a specified mask before comparison, so that the pairs may refer to networks or subnets instead of specific hosts. Gateway products from cisco Systems <ref> [2] </ref> support a more complicated screening scheme, allowing finer control over source or destination addresses. For example, one could deny access to all but one host on a particular network. The cisco gateways also allow discrimination based on IP protocol type, and TCP or UDP port numbers.
Reference: [3] <author> David D. Clark. </author> <title> The Structuring of Systems Using Upcalls. </title> <booktitle> In Proc. 10th Symposium on Operating Systems Principles, </booktitle> <pages> pages 171-180. </pages> <address> Orcas Island, WA, </address> <month> December, </month> <year> 1985. </year>
Reference-contexts: The kernel effectively acts as the ``client'' of a ``server process'' implemented at user level. The user process, however, makes the calls into the kernel, not vice-versa. One may view this as a relationship structured entirely of ``up-calls'' <ref> [3] </ref>, with no ``down-calls'' at all. This structure requires the solution to certain problems (starvation, matching of requests with responses) not present in a more conventional client-server interaction, but it makes use of the synchronization, protection, and control mechanisms already provided by the normal system call implementation.
Reference: [4] <author> David D. Clark. </author> <title> The Design Philosophy of the DARPA Internet Protocols. </title> <booktitle> In Proc. SIGCOMM '88 Symposium on Communications Architectures and Protocols, </booktitle> <pages> pages 106-114. </pages> <address> Stanford, CA, </address> <month> August, </month> <year> 1988. </year>
Reference-contexts: Authorization is done by an ``access control server'' distinct from the gateway; thus, visa protocols employ an additional level of policy/mechanism separation. One subtle (but explicit) aspect of the IP architecture is that gateways are stateless packet switches, not required to maintain any history of previous packets <ref> [4] </ref>. The policy modules described in this paper can accommodate a certain amount of gateway state (see section 4.3), but may not support a protocol requiring significant gateway state.
Reference: [5] <author> Stephen E. Deering. </author> <title> Host Extensions for IP Multicasting. </title> <type> RFC 1054, </type> <institution> Network Information Center, SRI International, </institution> <month> May, </month> <year> 1988. </year> <title> [6] --. Blacker Front End Interface Control Document. DDN Protocol Handbook, </title> <type> Volume 1. </type> <institution> DDN Network Information Center, SRI International, </institution> <address> Menlo Park, CA, </address> <year> 1985. </year>
Reference-contexts: Fortunately, because the RPC packets follow a fixed format, one might extend screend to parse the RPC headers and filter on the RPC program number. IP multicasting is another issue not addressed by screend. A standard for IP multicast addressing has only recently been developed <ref> [5] </ref>, and as yet there is little support for or experience with multicasting. Identifying multicast IP addresses is quite simple, so modifying screend to support the concept of multicast groups should not be difficult. One attractive extension to screend would be to use it for datagram accounting.
Reference: [7] <author> W. Diffie and M. E. Hellman. </author> <title> New Directions in Cryptography. </title> <journal> IEEE Transactions on Information Theory IT-22(11):644-654, </journal> <month> November, </month> <year> 1976. </year>
Reference-contexts: In the second, or ``stateless gateway,'' policy, the ACS accepts some information from the source host, including a secret session key chosen by the source host. The ACS creates a digitally-signed <ref> [7] </ref> and encrypted copy of this information, which is returned to the source host. The source host then attaches this visa to each packet, along with a ``signature'' value computed by a function based on the packet contents and the session key, then transmits the packet to a gateway.
Reference: [8] <author> The Ethernet, </author> <title> A Local Area Network: Data Link Layer and Physical Layer Specifications (Version 2.0). </title> <institution> Digital Equipment Corporation, Intel, Xerox, </institution> <year> 1982. </year>
Reference-contexts: The experimental setup consisted of a gateway, based on a MicroVax 3500 (about 2.7 times as fast as a Vax-11/780), connecting two Ethernets <ref> [8] </ref>, with an echo client host on one Ethernet and an echo server host on the other Ethernet. Packets contained 56 bytes of data, in addition to 42 bytes of Ethernet, IP, and ICMP headers. The measurements reflect average delays over a large number of trials.
Reference: [9] <author> Deborah Estrin, Jeffrey C. Mogul, and Gene Tsudik. </author> <title> Visa Protocols for Controlling Inter-Organization Datagram Flow. </title> <journal> IEEE Journal on Selected Areas in Communication , 1989. </journal> <note> In press (Special Issue on Secure Communications). </note>
Reference-contexts: In spite of the advantages 3 DATAGRAM ACCESS CONTROLS FOR UNIX-BASED GATEWAYS of visa protocols, they require explicit support from host implementations and increase the per-packet effort at gateways, so they are only in experimental use <ref> [9] </ref>. The kernel-resident mechanism described in section 3 owes an intellectual debt to the ``packet filter'' mechanism [21] used to give user processes efficient access to arbitrary datagrams. In the packet filter, the kernel applies user-specified criteria to received packets before demultiplexing the packets to the appropriate process. <p> A visa protocol [10] is a different kind of mechanism for implementing datagram access controls. This section sketches the design of visa-protocol support based on the gateway screen mechanism of section 3. This design has not been implemented; an entirely kernel-resident implementation of the visa protocol already exists <ref> [9] </ref>. 5.1. Overview of visa protocols In a visa protocol, each inter-organization datagram carries an unforgeable mark that proves to a gateway that transmission of the datagram is properly authorized. <p> The algorithms to do this validation are described in detail in <ref> [9] </ref>, and can be treated as ``black boxes'' for the purposes of this paper. 18 DATAGRAM ACCESS CONTROLS FOR UNIX-BASED GATEWAYS The main difference between the screend program and a visa protocol daemon is that screend is entirely synchronous, whereas a visa daemon must process events coming from several sources.
Reference: [10] <author> Deborah Estrin and Gene Tsudik. </author> <title> Visa Scheme for Inter-Organization Network Security. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 174-183. </pages> <publisher> IEEE, </publisher> <month> April, </month> <year> 1987. </year> <title> [11] --. Common Management Information Protocol (CMIP). ISO 9595/2. 20 DATAGRAM ACCESS CONTROLS FOR UNIX-BASED GATEWAYS </title>
Reference-contexts: This allows greater flexibility than an application-level gateway, although as with any power tool it also requires greater vigilance. Various commercial gateway systems provide such a mechanism [2, 27] and it has also been treated in the literature <ref> [10] </ref>. Although it is not a good idea to use a Unix system as an internetwork gateway, the popularity of 4.2BSD Unix (and its successors and derivatives), coupled with bureaucratic inertia, has led numerous organizations to use Unix-based gateways. <p> This program is able to filter based on arbitrary criteria, including transport-level header information. An alternative design is sketched in section 5. In this design, a user-level process would implement a visa protocol <ref> [10] </ref>. In visa protocols, there is no configuration file at the gateway; rather, the source host is required to attach a cryptographically-secured mark to the datagram header, proving to the gateway that this datagram is authorized to be forwarded. <p> For example, one could deny access to all but one host on a particular network. The cisco gateways also allow discrimination based on IP protocol type, and TCP or UDP port numbers. Unlike access controls based on gateway-resident configuration tables, Visa protocols <ref> [10] </ref> control the path between specific pairs of hosts. Moreover, visa protocols provide some protection against forged datagram headers, by proving that the source address of a packet is genuine. <p> Currently, screend simply rejects any packets with IP header options. 5. Implementing Visa mechanisms The implementation described in section 4 uses a configuration file that is stored at the gateway. A visa protocol <ref> [10] </ref> is a different kind of mechanism for implementing datagram access controls. This section sketches the design of visa-protocol support based on the gateway screen mechanism of section 3. This design has not been implemented; an entirely kernel-resident implementation of the visa protocol already exists [9]. 5.1.
Reference: [12] <author> Van Jacobson. </author> <title> Congestion Avoidance and Control. </title> <booktitle> In Proc. SIGCOMM '88 Symposium on Communications Architectures and Protocols, </booktitle> <pages> pages 314-329. </pages> <address> Stanford, CA, </address> <month> August, </month> <year> 1988. </year>
Reference-contexts: as the system call interface library, and this seemed too painful. 1 Nagle implies as much with his statement that, when facing buffer exhaustion, a gateway should ``drop the packet at the end of the longest queue, since it is the one that would be transmitted last.'' [22] Jacobson's work <ref> [12] </ref> implies that gateways should give preference to the earlier packets in a multiple-packet window, since they are more likely to be retransmitted immediately once congestion is detected. 5 DATAGRAM ACCESS CONTROLS FOR UNIX-BASED GATEWAYS The approach actually taken was to define a few new ioctl requests.
Reference: [13] <author> S. C. Johnson. </author> <title> Yacc -- Yet Another Compiler-Compiler. </title> <type> Technical Report 32, </type> <institution> Bell Laboratories, </institution> <address> Murray Hill, New Jersey, </address> <month> July, </month> <year> 1975. </year>
Reference-contexts: Implementation Most of the complexity in the implementation screend is in the code that parses the configuration file and builds the internal data structures. The parser itself is a straightforward application of lex [16] and yacc <ref> [13] </ref>. All translations of symbolic values (such as host names) to numeric values are done during parsing; this is necessary for performance, although it means that if a host changes its address, the internal databases may reflect stale specifications.
Reference: [14] <author> Christopher A. Kent and Jeffrey C. Mogul. </author> <title> Fragmentation Considered Harmful. </title> <booktitle> In Proc. SIGCOMM '87 Workshop on Frontiers in Computer Communications Technology, </booktitle> <pages> pages 390-401. </pages> <address> Stowe, VT, </address> <month> August, </month> <year> 1987. </year>
Reference-contexts: Moreover, IP uses ``internetwork fragmentation''; the fragments are reassembled only at the destination host, and may not necessarily all flow through any given gateway. Fragmentation is already known to lead to performance problems, potentially severe <ref> [14] </ref>, but it is a necessary evil and IP gateways must forward the fragments they receive. The problem for the screend program is that some specifications mention fields, such as TCP or UDP ports, that appear only in the first fragment of a packet. <p> Fortunately, this cost is only invoked when fragments arrive. In general, although screend does support fragmentation to a certain extent, it is better in almost all cases for source hosts to avoid generating datagrams that will be fragmented. Mechanisms for fragmentation avoidance have been proposed <ref> [14, 19] </ref>, although few have been implemented. 4.4. Performance The performance of a gateway based on screend depends on the performance of the underlying gateway implementation, the performance of the kernel gateway screen mechanism, and the performance of the screend program itself.
Reference: [15] <author> B. Leiner, J. Postel, R. Cole, and D. Mills. </author> <title> The DARPA Internet protocol suite. </title> <booktitle> In Proc. </booktitle> <address> INFOCOMM 85. Washington, DC, </address> <month> March, </month> <year> 1985. </year> <note> Also in IEEE Communications Magazine, </note> <month> March, </month> <year> 1985. </year>
Reference-contexts: Sections 4 and 5 then describe two different user-level daemons that make use of this modified kernel to provide packet-level access control. Section 6 discusses how the new mechanism may be used for purposes besides access control. 2. Background and Goals The Internet Protocol (IP) suite <ref> [15] </ref> is today the dominant means of connecting disparate organizations into an internetwork. Virtually all of the practical and experimental work on datagram access controls has been done using IP protocols.
Reference: [16] <author> M. E. Lesk. </author> <title> Lex -- A Lexical Analyzer Generator. </title> <type> Technical Report 39, </type> <institution> Bell Laboratories, </institution> <address> Murray Hill, New Jersey, </address> <month> October, </month> <year> 1975. </year>
Reference-contexts: Implementation Most of the complexity in the implementation screend is in the code that parses the configuration file and builds the internal data structures. The parser itself is a straightforward application of lex <ref> [16] </ref> and yacc [13]. All translations of symbolic values (such as host names) to numeric values are done during parsing; this is necessary for performance, although it means that if a host changes its address, the internal databases may reflect stale specifications.
Reference: [17] <author> R. Levin, E. Cohen, W. Corwin, F. Pollack, and W. Wulf. </author> <title> Policy/mechanism separation in Hydra. </title> <booktitle> In Proc. 5th Symposium on Operating Systems Principles, </booktitle> <pages> pages 132-140. </pages> <publisher> ACM, </publisher> <month> November, </month> <year> 1975. </year>
Reference-contexts: The mechanisms described in this paper allow users of Unix-based gateways to impose packet-level access controls without major changes to existing software. Perhaps more important, by separating mechanism from policy <ref> [17] </ref> so that arbitrarily precise access control policies may be developed as ordinary Unix user processes, these mechanisms support fine-tuning and experimentation that would be difficult using commercial gateway products. <p> In other words, it pays to separate the mechanism for forwarding packets from the policy that decides what should be forwarded. Although the underlying concept has been known for a long time, the term policy/mechanism separation was invented by the designers of the Hydra system <ref> [17] </ref>, who established it as a ``basic design principle ... of a kernel composed (almost) entirely of mechanisms.'' Policies were embodied in user-level processes, thus improving flexibility while keeping the kernel simpler and presumably more reliable.
Reference: [18] <author> Mark Lottor. </author> <title> TCP Port Service Multiplexer (TCPMUX). </title> <type> RFC 1078, </type> <institution> Network Information Center, SRI International, </institution> <month> November, </month> <year> 1988. </year>
Reference-contexts: Although the well-known port mechanism is followed by existing TCP and UDP applications, it has certain disadvantages related to number management. As a response, it has been proposed that this mechanism be replaced by a ``port service multiplexer,'' a mechanism using port names instead of port numbers <ref> [18] </ref>. This would make the port-matching support of screend nearly useless. The Sun RPC system, used with NFS, includes a ``port mapper'' mechanism that follows the same model [29].
Reference: [19] <author> Jeffrey C. Mogul, Christopher A. Kent, Craig Partridge, and Keith McCloghrie. </author> <title> IP MTU Discovery Options. </title> <type> RFC 1063, </type> <institution> Network Information Center, SRI International, </institution> <month> July, </month> <year> 1988. </year>
Reference-contexts: Fortunately, this cost is only invoked when fragments arrive. In general, although screend does support fragmentation to a certain extent, it is better in almost all cases for source hosts to avoid generating datagrams that will be fragmented. Mechanisms for fragmentation avoidance have been proposed <ref> [14, 19] </ref>, although few have been implemented. 4.4. Performance The performance of a gateway based on screend depends on the performance of the underlying gateway implementation, the performance of the kernel gateway screen mechanism, and the performance of the screend program itself.
Reference: [20] <author> Jeffrey Mogul and Jon Postel. </author> <title> Internet Standard Subnetting Procedure. </title> <type> RFC 950, </type> <institution> Network Information Center, SRI International, </institution> <month> August, </month> <year> 1985. </year>
Reference-contexts: First, one can specify a default action (normally rejection). Second, one can specify the network masks for arbitrary networks. This allows subnet specifications for non-local networks. Normally, a gateway is not supposed to know about the subnet structure of a distant network <ref> [20] </ref>, but this information might be useful in deciding whether to forward a packet that originates someplace in an organization with multiple network numbers. 4.2. Implementation Most of the complexity in the implementation screend is in the code that parses the configuration file and builds the internal data structures.
Reference: [21] <author> Jeffrey C. Mogul, Richard F. Rashid, Michael J. Accetta. </author> <title> The Packet Filter: An Efficient Mechanism for User-Level Network Code. </title> <booktitle> In Proc. 11th Symposium on Operating Systems Principles, </booktitle> <pages> pages 39-51. </pages> <address> Austin, Texas, </address> <month> November, </month> <year> 1987. </year>
Reference-contexts: The kernel-resident mechanism described in section 3 owes an intellectual debt to the ``packet filter'' mechanism <ref> [21] </ref> used to give user processes efficient access to arbitrary datagrams. In the packet filter, the kernel applies user-specified criteria to received packets before demultiplexing the packets to the appropriate process. <p> It is also possible to reduce the system call count even further, by batching several packets and decisions together for one system call. Batching has been shown to be profitable in a similar application <ref> [21] </ref>. When the load is low, the pending-packet queue will seldom hold more than one packet, and the batch size will be 1, but at high loads, several packets may arrive before the user-level daemon process can be scheduled (packet interrupts having higher priority than user processes).
Reference: [22] <author> John Nagle. </author> <title> On Packet Switches With Infinite Storage. </title> <journal> IEEE Transactions on Communications COM-35(4):435-438, </journal> <month> April, </month> <year> 1987. </year>
Reference-contexts: kernel, as well as the system call interface library, and this seemed too painful. 1 Nagle implies as much with his statement that, when facing buffer exhaustion, a gateway should ``drop the packet at the end of the longest queue, since it is the one that would be transmitted last.'' <ref> [22] </ref> Jacobson's work [12] implies that gateways should give preference to the earlier packets in a multiple-packet window, since they are more likely to be retransmitted immediately once congestion is detected. 5 DATAGRAM ACCESS CONTROLS FOR UNIX-BASED GATEWAYS The approach actually taken was to define a few new ioctl requests.
Reference: [23] <author> Jon Postel. </author> <title> User Datagram Protocol. </title> <type> RFC 768, </type> <institution> Network Information Center, SRI International, </institution> <month> August, </month> <year> 1980. </year>
Reference-contexts: Primarily, these include TCP [25] for reliable byte-stream applications (mail, file transfer, remote terminal access), and UDP <ref> [23] </ref> for request-response protocols (name service, routing, the NFS file access protocol [28]). Certain control information is carried by the ICMP protocol [26]. One may wish to require or restrict the use of such higher-level protocols, which can be done based on information in the IP header.
Reference: [24] <author> Jon Postel. </author> <title> Internet Protocol. </title> <type> RFC 791, </type> <institution> Network Information Center, SRI International, </institution> <month> September, </month> <year> 1981. </year>
Reference-contexts: Although the examples in this paper 1 DATAGRAM ACCESS CONTROLS FOR UNIX-BASED GATEWAYS do assume the use of IP, much of the mechanism (especially the kernel support) should be applicable to any similar protocol suite, including OSI [30]. All datagrams in an IP internetwork carry an IP header <ref> [24] </ref>, which includes the source and destination host addresses.
Reference: [25] <author> Jon Postel. </author> <title> Transmission Control Protocol. </title> <type> RFC 793, </type> <institution> Network Information Center, SRI International, </institution> <month> September, </month> <year> 1981. </year>
Reference-contexts: Primarily, these include TCP <ref> [25] </ref> for reliable byte-stream applications (mail, file transfer, remote terminal access), and UDP [23] for request-response protocols (name service, routing, the NFS file access protocol [28]). Certain control information is carried by the ICMP protocol [26].
Reference: [26] <author> Jon Postel. </author> <title> Internet Control Message Protocol. </title> <type> RFC 792, </type> <institution> Network Information Center, SRI International, </institution> <month> September, </month> <year> 1981. </year>
Reference-contexts: Primarily, these include TCP [25] for reliable byte-stream applications (mail, file transfer, remote terminal access), and UDP [23] for request-response protocols (name service, routing, the NFS file access protocol [28]). Certain control information is carried by the ICMP protocol <ref> [26] </ref>. One may wish to require or restrict the use of such higher-level protocols, which can be done based on information in the IP header.
Reference: [27] <author> Proteon, Inc. </author> <title> ProNET p4200 Gateway Software User's Guide. </title> <address> Westboro, MA, </address> <year> 1988. </year>
Reference-contexts: A more flexible way to control access is to prevent certain packets from entering or leaving an organization through its gateways. This allows greater flexibility than an application-level gateway, although as with any power tool it also requires greater vigilance. Various commercial gateway systems provide such a mechanism <ref> [2, 27] </ref> and it has also been treated in the literature [10]. Although it is not a good idea to use a Unix system as an internetwork gateway, the popularity of 4.2BSD Unix (and its successors and derivatives), coupled with bureaucratic inertia, has led numerous organizations to use Unix-based gateways. <p> Most (perhaps all) commercially-available gateway systems now provide the ability to screen packets based not only on destinations, but on sources or source-destination pairs. For example, the Proteon p4200 gateway <ref> [27] </ref> allows the manager to specify access based on pairs of IP addresses; each address is combined with a specified mask before comparison, so that the pairs may refer to networks or subnets instead of specific hosts.
Reference: [28] <author> Russel Sandberg, David Goldberg, Steve Kleiman, Dan Walsh, and Bob Lyon. </author> <title> Design and Implementation of the Sun Network Filesystem. </title> <booktitle> In Proc. Summer 1985 USENIX Conference, </booktitle> <pages> pages 119-130. </pages> <address> Portland, OR, </address> <month> June, </month> <year> 1985. </year>
Reference-contexts: Primarily, these include TCP [25] for reliable byte-stream applications (mail, file transfer, remote terminal access), and UDP [23] for request-response protocols (name service, routing, the NFS file access protocol <ref> [28] </ref>). Certain control information is carried by the ICMP protocol [26]. One may wish to require or restrict the use of such higher-level protocols, which can be done based on information in the IP header.
Reference: [29] <institution> Network Programming. Sun Microsystems, Inc., Mountain View, </institution> <address> CA, </address> <year> 1988. </year> <title> 21 DATAGRAM ACCESS CONTROLS FOR UNIX-BASED GATEWAYS </title>
Reference-contexts: This would make the port-matching support of screend nearly useless. The Sun RPC system, used with NFS, includes a ``port mapper'' mechanism that follows the same model <ref> [29] </ref>. Fortunately, because the RPC packets follow a fixed format, one might extend screend to parse the RPC headers and filter on the RPC program number. IP multicasting is another issue not addressed by screend.
Reference: [30] <author> Hubert Zimmermann. </author> <title> OSI Reference Model -- The ISO Model of Architecture for Open Systems Interconnection. </title> <journal> IEEE Transactions on Communications COM-28:425-432, </journal> <month> April, </month> <year> 1980. </year> <title> Unix is a registered trademark of AT&T. Ultrix, MicroVax, and Vax are trademarks of Digital Equipment Corporation. 22 DATAGRAM ACCESS CONTROLS FOR UNIX-BASED GATEWAYS </title>
Reference-contexts: Although the examples in this paper 1 DATAGRAM ACCESS CONTROLS FOR UNIX-BASED GATEWAYS do assume the use of IP, much of the mechanism (especially the kernel support) should be applicable to any similar protocol suite, including OSI <ref> [30] </ref>. All datagrams in an IP internetwork carry an IP header [24], which includes the source and destination host addresses.
References-found: 28

