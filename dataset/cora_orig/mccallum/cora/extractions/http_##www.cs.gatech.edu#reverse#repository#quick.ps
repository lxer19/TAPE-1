URL: http://www.cs.gatech.edu/reverse/repository/quick.ps
Refering-URL: http://www.cs.gatech.edu/reverse/repos.html
Root-URL: 
Title: A Quick Tools Strategy for Program Analysis and Software Maintenance  
Author: Bret Johnson, Steve Ornburn, and Spencer Rugaber 
Address: Atlanta, GA 30332-0280  
Affiliation: College of Computing and Software Research Center Georgia Institute of Technology  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. K. Fjeldstad and W. T. Hamlen. </author> <title> "Application Program Maintenance Study: Report to Our Respondents". Proceedings GUIDE 48, </title> <address> Philadelphia, PA, </address> <year> 1979. </year>
Reference-contexts: Fjeldstad and Hamlen report that 47% and 62% of the time spent on actual enhancement and correction tasks, respectively, are devoted to comprehension activities. These involve reading the documentation, scanning the source code, and understanding the changes to be made <ref> [1] </ref>. The implication is that if we want to improve maintenance, we should facilitate the process of comprehending existing programs. The most desirable approach to maintaining a software system is to devote a significant amount of upfront effort to understanding and documenting the overall purpose and behavior of the software.
Reference: [2] <author> V. M. Markowitz and W. Fang. SDT: </author> <title> A Database Schema Design and Translation Tool Reference Manual. </title> <institution> LBL-27843, Lawrence Berkeley Laboratory, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: The part of the program that understands the structure of the diagram file was encapsulated. By substituting similar modules, we intend to target other diagraming tools, such as EDGE [3] and SDT <ref> [2] </ref>. An example of a NewYacc-generated Structure Chart is given in Figure 5. 2.4 Other examples While reverse engineering the digital subscriber system, we needed to be able to quickly build tools for a variety of purposes.
Reference: [3] <author> Frances Newbery Paulish and Walter Tichy. </author> <title> "EDGE: An Extendible Graph Editor". </title> <journal> Software-Practice and Experience, </journal> <volume> Vol. 20, No. S1, </volume> <pages> pp. 63-88, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: The part of the program that understands the structure of the diagram file was encapsulated. By substituting similar modules, we intend to target other diagraming tools, such as EDGE <ref> [3] </ref> and SDT [2]. An example of a NewYacc-generated Structure Chart is given in Figure 5. 2.4 Other examples While reverse engineering the digital subscriber system, we needed to be able to quickly build tools for a variety of purposes.
Reference: [4] <author> James L. Peterson and Abraham Silberschatz. </author> <title> Operating System Concepts, Second Edition. </title> <publisher> Addison-Wesley, </publisher> <year> 1985. </year>
Reference-contexts: Exception handling proved difficult to untangle until we observed that many of the resources required for a test were shared among several tasks. This observation led us to ask how deadlock was prevented. Of the alternative strategies, it appeared that the system employed a version of the deny-hold-and-wait strategy <ref> [4] </ref>, i.e., if a resource could not be obtained, all resources acquired thus far were released and the test was abandoned. This analysis was not always straightforward, and two resources in particular did not appear at first to fit the hypothesized pattern.
Reference: [5] <author> James J. Purtilo and John R. Callahan. </author> <title> "Parse Tree Annotations". </title> <journal> Communications of the ACM. </journal> <volume> Vol. 32, No. 12, </volume> <pages> pp. 1467-1477, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: The translations typically specify how to construct object code for a specific machine architecture. NewYacc is a preprocessor to yacc developed by Purtilo and Callahan <ref> [5] </ref>. It can be used to analyze and transform programs at the source level rather than at the level of compiled object code.
Reference: [6] <author> W. P. Stevens, G. J. Myers, and L. L. Constantine. </author> <title> "Structured Design". </title> <journal> IBM Systems Journal, </journal> <volume> Vol. 13, No. 2, </volume> <pages> pp. 115-139, </pages> <year> 1974. </year>
Reference-contexts: Software Through Pictures (STP) is a CASE tool developed by Interactive Development Environments, Inc. STP features a variety of graphical editors including one called the Structure Chart Editor that can be used to draw the style of diagrams used with Structured Design <ref> [6] </ref>. Structure Charts include information describing the calling hierarchy of a program. The exercise consisted of using the output of the NewYacc calling tree tool as input to the diagram editor. Fortunately, STP has a very open architecture.
References-found: 6

