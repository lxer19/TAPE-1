URL: file://theory.lcs.mit.edu/pub/people/rosario/DSS.ps.Z
Refering-URL: http://theory.lcs.mit.edu/~rosario/research.html
Root-URL: 
Title: Robust Threshold DSS Signatures  
Author: Rosario Gennaro Stanis law Jarecki Hugo Krawczyk and Tal Rabin 
Date: March 3, 1997  
Abstract: We present threshold DSS (Digital Signature Standard) signatures where the power to sign is shared by n players such that for a given parameter t &lt; n=2 any subset of 2t + 1 signers can collaborate to produce a valid DSS signature on any given message, but no subset of t corrupted players can forge a signature (in particular, cannot learn the signature key). In addition, we present a robust threshold DSS scheme that can also tolerate n=3 players who refuse to participate in the signature protocol. We can also endure n=4 maliciously faulty players that generate incorrect partial signatures at the time of signature computation. This results in a highly secure and resilient DSS signature system applicable to the protection of the secret signature key, the prevention of forgery, and increased system availability. We prove the security of our protocols solely based on the hardness of forging a regular DSS signature.
Abstract-found: 1
Intro-found: 1
Reference: [BB89] <author> J. Bar-Ilan, and D. Beaver. </author> <title> Non-Cryptographic Fault-Tolerant Computing in a Constant Number of Rounds. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Distributed Computation, </booktitle> <address> pp.201-209, </address> <year> 1989. </year>
Reference-contexts: For the second problem, the sharing of a reciprocal, we use a protocol due to Bar-Ilan and Beaver <ref> [BB89] </ref>. In addition to these techniques we use many tools from other works, such as verifiable secret sharing (both computational and information-theoretic versions), shared generation/distribution of secrets, re-randomization of secret shares, and more. <p> Given a 9 secret k mod q which is shared among players P 1 ; :::P n , generate a sharing of the value k 1 mod q, without revealing information on k and k 1 . The solution described below is due to Bar-Ilan and Beaver <ref> [BB89] </ref>. Each player P i holds a share k i corresponding to a (t; n) secret sharing of k, namely, (k 1 ; : : : ; k n ) (t;n) k. The computation of shares for k 1 is accomplished as follows. 1. <p> Each player computes his share u i of k 1 by setting u i 4 We refer to the above protocol as the Reciprocal Protocol. In <ref> [BB89] </ref> it is proven that such protocol is secure, i.e. correctly computes a sharing of k 1 mod q and reveals no extra information (e.g. is simulatable). Intuitively, the value revealed in the protocol gives no information on k since is the product of k with a random element a.
Reference: [BGW88] <author> M. Ben-Or, S. Goldwasser, and A. Wigderson. </author> <title> Completeness Theorems for Noncryp-tographic Fault-Tolerant Distributed Computations. </title> <booktitle> In Proceeding 20th Annual Symposium on the Theory of Computing, </booktitle> <pages> pages 1-10. </pages> <publisher> ACM, </publisher> <year> 1988. </year>
Reference-contexts: In the following we will refer to these protocols as Joint-Shamir-RSS, Joint-Feldman-RSS or Joint-Uncond-Secure-RSS depending which of the secret sharing schemes is used. Joint Zero Secret Sharing. <ref> [BGW88] </ref> This protocol generates a collective sharing of a "secret" whose value is zero. Such a protocol is similar to the above joint random secret sharing protocol but instead of local random secrets each player deals a sharing of the value zero. <p> We note that this solution to the problem of secret multiplication is a simplified version of the the protocols for the same problem presented in <ref> [BGW88, CCD88] </ref>. (In contrast to those works, in our case secrets are multiplied only once, thus saving most of the complexity of the solutions in the above works which mainly deal with the problem of repetitive multiplication.
Reference: [Boy86] <editor> C. Boyd. Digital Multisignatures. In H. Baker and F. Piper, editors, </editor> <booktitle> Cryptography and Coding, </booktitle> <pages> pages 241-246. </pages> <publisher> Claredon Press, </publisher> <year> 1986. </year>
Reference-contexts: In threshold schemes, multiple signatures are produced without an exposure or an explicit reconstruction of the secret key. 1.1 Previous Work Threshold signatures are part of a general approach known as threshold cryptography which was introduced by the works of Boyd <ref> [Boy86] </ref>, Desmedt [Des88], and Desmedt and Frankel [DF90]. This approach has received considerable attention in the literature; we refer the reader to [Des94] for a survey of the work in this area.
Reference: [BW] <author> E. Berlekamp and L. Welch. </author> <title> Error correction of algebraic block codes. </title> <type> US Patent 4,633,470. </type>
Reference-contexts: In particular we make extended use of Pedersen's unconditionally secure VSS protocols [Ped91b] which allows us to reduce the computational assumptions needed in the proofs of our schemes. To achieve the robustness of the t n=4 scheme we apply error correcting techniques due to Berlekamp and Welch <ref> [BW] </ref>. For the t n=3 solution we adapt a clever technique from [CMI93] to our scenario. We prove the security of our schemes assuming the infeasibility of forging DSS signatures. 1.4 Organization Section 2 introduces model and definitions for threshold signatures and their security. <p> Another difference between our protocol and the [CMI93] one is that whenever we reconstruct a secret, in order to detect bad shares contributed by malicious players we perform error-correcting using the Berlekamp and Welch decoder <ref> [BW] </ref>. This will allow us to obtain n1 4 fault-tolerance. Although this is slightly worse than [CMI93] (they obtain n1 3 fault-tolerance), the use of error-correcting codes produces a much more efficient protocol. <p> The polynomial can be computed by using the Berlekamp-Welch decoder <ref> [BW] </ref>. We prove the following theorem: Theorem 2 Under the DSS assumption, Protocol DSS-Thresh-Sig-2 is a secure (unforgeable and robust) threshold signature protocol for DSS resistant to t faults against a Malicious Adversary, when the number of players is n 4t + 1.
Reference: [CCD88] <author> D. Chaum, C. Crepeau, and I. Damgard. </author> <title> Multiparty Unconditionally Secure Protocols. </title> <booktitle> In Proceeding 20th Annual Symposium on the Theory of Computing, </booktitle> <pages> pages 11-19. </pages> <publisher> ACM, </publisher> <year> 1988. </year>
Reference-contexts: We note that this solution to the problem of secret multiplication is a simplified version of the the protocols for the same problem presented in <ref> [BGW88, CCD88] </ref>. (In contrast to those works, in our case secrets are multiplied only once, thus saving most of the complexity of the solutions in the above works which mainly deal with the problem of repetitive multiplication.
Reference: [CMI93] <author> M. Cerecedo, T. Matsumoto, and H. Imai. </author> <title> Efficient and Secure Multiparty Generation of Digital Signatures Based on Discrete Logarithms. </title> <journal> IEICE Trans. Fundamentals, </journal> <volume> E76-A(4):532-545, </volume> <month> April </month> <year> 1993. </year>
Reference-contexts: A complete analysis of threshold techniques applied to various ElGamal-like schemes appears in an earlier paper by Cerecedo, Matsumoto and Imai <ref> [CMI93] </ref>. They present formal definitions of threshold signature schemes and solutions based on the ElGamal signature scheme which occur only a linear increase in the number of signers (compared to quadratic as in [Lan95]). Our work, independently developed, follows an approach similar to [CMI93]. <p> earlier paper by Cerecedo, Matsumoto and Imai <ref> [CMI93] </ref>. They present formal definitions of threshold signature schemes and solutions based on the ElGamal signature scheme which occur only a linear increase in the number of signers (compared to quadratic as in [Lan95]). Our work, independently developed, follows an approach similar to [CMI93]. However, by concentrating on the case of DSS signatures we achieve better properties in our solution. <p> Provable Security: Our work is the first to present a proof of security of the proposed threshold DSS schemes which can be based solely on the unforgeability of regular DSS signatures. Previous work <ref> [CMI93] </ref> required additional cryptographic assumptions. That is, our schemes are secure if and only if the underlying signature algorithm is secure. Clearly, this is the strongest security claim one can hope for for any threshold schemes. We present rigorous proofs of the equivalent security of DSS and our threshold schemes. <p> In this case we have two protocols: a more efficient one based on error-correcting codes which achieves t n=4 and a less efficient one (based on the techniques of <ref> [CMI93] </ref>) which achieves t n=3. Thus, for the latter case, we present an alternative protocol to [CMI93] that although achieving a smaller threshold provides improved efficiency. 3 Assumed trust: Our schemes do not require trusting any particular party at any time, including during the initial secret key generation. <p> In this case we have two protocols: a more efficient one based on error-correcting codes which achieves t n=4 and a less efficient one (based on the techniques of <ref> [CMI93] </ref>) which achieves t n=3. Thus, for the latter case, we present an alternative protocol to [CMI93] that although achieving a smaller threshold provides improved efficiency. 3 Assumed trust: Our schemes do not require trusting any particular party at any time, including during the initial secret key generation. <p> This is an important property achieved by some other 2 The robustness property has been known for some other shared ElGamal-like signature schemes see <ref> [CMI93, Har94] </ref>. As for threshold RSA, robust solutions have been only recently found (see [FGY96, GJKR96]). 3 In [CMI93] a solution that achieves t n=2 is also presented. Such solution makes use of advanced techniques from the area of secure multiparty computation ([BGW88, CCD88]). <p> This is an important property achieved by some other 2 The robustness property has been known for some other shared ElGamal-like signature schemes see [CMI93, Har94]. As for threshold RSA, robust solutions have been only recently found (see [FGY96, GJKR96]). 3 In <ref> [CMI93] </ref> a solution that achieves t n=2 is also presented. Such solution makes use of advanced techniques from the area of secure multiparty computation ([BGW88, CCD88]). <p> Such techniques are applicable to our schemes as well, however due to the great computational overhead involved with their application the resulting schemes lose practical applicability. For this reason we have decided not to discuss them in detail. 3 ElGamal based threshold signature schemes (including the DSS solution in <ref> [Lan95, CMI93] </ref>), but not known for threshold RSA signatures. Proactive signatures: Remarkably, our solutions for robust threshold DSS signatures can be proactivized using the recent techniques of [HJJKY97] (based on proactive secret sharing of the signature key [HJKY95]). <p> To achieve the robustness of the t n=4 scheme we apply error correcting techniques due to Berlekamp and Welch [BW]. For the t n=3 solution we adapt a clever technique from <ref> [CMI93] </ref> to our scenario. We prove the security of our schemes assuming the infeasibility of forging DSS signatures. 1.4 Organization Section 2 introduces model and definitions for threshold signatures and their security. Section 3 recalls the DSS signature scheme. <p> Sections 6, 7 and 8 present our secure threshold DSS signatures. Finally Section 9 discusses the efficiency of our schemes. 2 Model and Definitions In this section we introduce our communication model and provide definitions of secure threshold signature schemes. Similar definitions can be found in <ref> [CMI93] </ref>. Communication Model. We assume that our computation model is composed of a set of n players fP 1 ; : : : ; P n g who can be modeled by polynomial-time randomized Turing machines. They 4 are connected by a complete network of private (i.e. untappable) point-to-point channels. <p> The pair (y; x) is taken to be the public/private key pair. 6 DSS-Thresh-Sig-1: Eavesdropping and Halting Adversary In this section we present our basic protocol for generating a distributed DSS signature. This protocol is based on the one in <ref> [CMI93] </ref>, except that we have removed all the steps needed in order to verify the behavior of the players. <p> The protocol, DSS-Thresh-Sig-2, relies on no assumptions beyond the unforgeability of DSS signatures, and can tolerate n1 4 malicious faults. The <ref> [CMI93] </ref> approach. In [CMI93] the authors add robustness to the basic protocol by turning all the regular Shamir-SS secret sharing protocols into robust Feldman-VSS ones. Although this allows to tolerate malicious faults it also produced an undesired leaking of information. <p> The protocol, DSS-Thresh-Sig-2, relies on no assumptions beyond the unforgeability of DSS signatures, and can tolerate n1 4 malicious faults. The <ref> [CMI93] </ref> approach. In [CMI93] the authors add robustness to the basic protocol by turning all the regular Shamir-SS secret sharing protocols into robust Feldman-VSS ones. Although this allows to tolerate malicious faults it also produced an undesired leaking of information. <p> As before s is computed from the appropriate shares and randomization of polynomials (through the joint zero secret sharing protocols) is added in various places in order to hide possible partial information. Another difference between our protocol and the <ref> [CMI93] </ref> one is that whenever we reconstruct a secret, in order to detect bad shares contributed by malicious players we perform error-correcting using the Berlekamp and Welch decoder [BW]. This will allow us to obtain n1 4 fault-tolerance. Although this is slightly worse than [CMI93] (they obtain n1 3 fault-tolerance), the <p> difference between our protocol and the <ref> [CMI93] </ref> one is that whenever we reconstruct a secret, in order to detect bad shares contributed by malicious players we perform error-correcting using the Berlekamp and Welch decoder [BW]. This will allow us to obtain n1 4 fault-tolerance. Although this is slightly worse than [CMI93] (they obtain n1 3 fault-tolerance), the use of error-correcting codes produces a much more efficient protocol. In the next section we will show how to adapt the techniques of [CMI93] to our protocol in order to obtain n1 3 fault-tolerance as well. <p> This will allow us to obtain n1 4 fault-tolerance. Although this is slightly worse than <ref> [CMI93] </ref> (they obtain n1 3 fault-tolerance), the use of error-correcting codes produces a much more efficient protocol. In the next section we will show how to adapt the techniques of [CMI93] to our protocol in order to obtain n1 3 fault-tolerance as well. The full protocol is exhibited in Figure 3. Notation. <p> However there is also an advantage: at least one of the values muiltiplies is random and has been "recently" shared using a Joint-Feldman-VSS protocol. This observation led to a clever trick employed in <ref> [CMI93] </ref>. They show that in the situation described above it is possible to create "authentication pieces" for the resulting shares of the product. In their case both secrets are shared using Feldman-VSS. <p> Thus such computation can be moved off-line and the computation of the actual on-line signature is very fast and non-interactive. In the case of DSS-Thresh-Sig-3 the computation of s still involves O (nt) modular exponentiations per player. 21 This evidentiates the advantage of our error-correction approach over the <ref> [CMI93] </ref> approach.
Reference: [DDFY94] <author> A. De Santis, Y. Desmedt, Y. Frankel, and M. Yung. </author> <title> How to share a function securely. </title> <booktitle> In Proc. 26th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 522-533, </pages> <address> Santa Fe, 1994. </address> <publisher> IEEE. </publisher>
Reference-contexts: As of today, RSA [RSA78] and DSS [NIST91] appear as the two most used schemes in practice. For the case of RSA signatures particular examples of threshold schemes can be found in <ref> [DF92, DDFY94, FGY96, GJKR96] </ref>. DSS signatures turn out to be less amenable to sharing techniques than RSA or even other ElGamal-type of signatures.
Reference: [Des88] <author> Y. Desmedt. </author> <title> Society and group oriented cryptography: A new concept. </title> <editor> In Carl Pomerance, editor, </editor> <booktitle> Proc. CRYPTO 87, </booktitle> <pages> pages 120-127. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year> <note> Lecture Notes in Computer Science No. 293. </note>
Reference-contexts: In threshold schemes, multiple signatures are produced without an exposure or an explicit reconstruction of the secret key. 1.1 Previous Work Threshold signatures are part of a general approach known as threshold cryptography which was introduced by the works of Boyd [Boy86], Desmedt <ref> [Des88] </ref>, and Desmedt and Frankel [DF90]. This approach has received considerable attention in the literature; we refer the reader to [Des94] for a survey of the work in this area.
Reference: [Des94] <author> Y.G. Desmedt. </author> <title> Threshold cryptography. </title> <journal> European Transactions on Telecommunications, </journal> <volume> 5(4) </volume> <pages> 449-457, </pages> <month> July </month> <year> 1994. </year> <month> 22 </month>
Reference-contexts: This approach has received considerable attention in the literature; we refer the reader to <ref> [Des94] </ref> for a survey of the work in this area. It is very important to provide threshold solutions for signatures schemes used in practice, as those systems are the ones that will be deployed in the real world and hence they are the ones that require real protection.
Reference: [DF90] <author> Y. Desmedt and Y. Frankel. </author> <title> Threshold cryptosystems. </title> <editor> In G. Brassard, editor, </editor> <booktitle> Proc. CRYPTO 89, </booktitle> <pages> pages 307-315. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <note> Lecture Notes in Computer Science No. 435. </note>
Reference-contexts: In threshold schemes, multiple signatures are produced without an exposure or an explicit reconstruction of the secret key. 1.1 Previous Work Threshold signatures are part of a general approach known as threshold cryptography which was introduced by the works of Boyd [Boy86], Desmedt [Des88], and Desmedt and Frankel <ref> [DF90] </ref>. This approach has received considerable attention in the literature; we refer the reader to [Des94] for a survey of the work in this area.
Reference: [DF92] <author> Y. Desmedt and Y. Frankel. </author> <title> Shared generation of authenticators and signatures. </title> <editor> In J. Feigenbaum, editor, </editor> <booktitle> Proc. CRYPTO 91, </booktitle> <pages> pages 457-469. </pages> <publisher> Springer, </publisher> <year> 1992. </year> <note> Lecture Notes in Computer Science No. 576. </note>
Reference-contexts: As of today, RSA [RSA78] and DSS [NIST91] appear as the two most used schemes in practice. For the case of RSA signatures particular examples of threshold schemes can be found in <ref> [DF92, DDFY94, FGY96, GJKR96] </ref>. DSS signatures turn out to be less amenable to sharing techniques than RSA or even other ElGamal-type of signatures.
Reference: [ElG85] <author> T. ElGamal. </author> <title> A public key cryptosystem and a signature scheme based on discrete logarithms. </title> <journal> IEEE Trans. Info. Theory, </journal> <volume> IT 31, </volume> <year> 1985. </year>
Reference-contexts: is (h; c; n)-robust if even in the presence of an adversary who halts h players and corrupts c players (h + c t), both Thresh-Key-Gen and Thresh-Sig complete successfully. 3 The Digital Signature Standard (DSS) The Digital Signature Standard (DSS) [NIST91] is a signature scheme based on the El-Gamal <ref> [ElG85] </ref> and Schnorr's [Sch91] signature schemes, which was adopted as the US standard digital signature algorithm. In our description of the DSS protocol we follow the notation introduced in [Lan95], which differs from the original presentation of [NIST91] by switching k and k 1 .
Reference: [Fel87] <author> P. Feldman. </author> <title> A Practical Scheme for Non-Interactive Verifiable Secret Sharing. </title> <booktitle> In Proceeding 28th Annual Symposium on the Foundations of Computer Science, </booktitle> <pages> pages 427-437. </pages> <publisher> IEEE, </publisher> <year> 1987. </year>
Reference-contexts: By using error-correcting techniques (as first suggested in [MS81]) the protocol can also tolerate f malicious faults (among the players, excluding the dealer) if n t + 2f + 1. In the following we will refer to this protocol by Shamir-SS. Feldman's Verifiable Secret Sharing. <ref> [Fel87] </ref>. This protocol can tolerate up to n1 2 malicious faults including the dealer. <p> The gain in fault-tolerance however comes at the expenses of an increased amount of computation (e.g. modular exponentiations) required to the players in order to compute a single signature. The previous protocol used the Feldman and Pedersen VSS protocols <ref> [Fel87, Ped91b] </ref> only to assure that secrets where shared correctly. When it came to authenticate the shares broadcasted by players in order to reconstruct a value, however we relied on error-correcting codes.
Reference: [FM88] <author> P. Feldman and S. Micali. </author> <title> An Optimal Algorithm for Synchronous Byzantine Agreement. </title> <booktitle> In Proceeding 20th Annual Symposium on the Theory of Computing, </booktitle> <pages> pages 148-161. </pages> <publisher> ACM, </publisher> <year> 1988. </year>
Reference-contexts: Notice that the value of the secret is only computationally secure, e.g., the value g a 0 = g mod p is leaked. In the following we will refer to this protocol by Feldman-VSS. Unconditionally Secure Verifiable Secret Sharing. <ref> [FM88, Ped91b] </ref>. In contrast to Feldman's VSS protocol, this protocol provides information theoretic secrecy for the shared secret. This is required by some of our techniques in order to achieve provable security. There are two possible implementation of this primitive. <p> In contrast to Feldman's VSS protocol, this protocol provides information theoretic secrecy for the shared secret. This is required by some of our techniques in order to achieve provable security. There are two possible implementation of this primitive. One is by Feldman and Micali <ref> [FM88] </ref> and is based on a bivariate polynomial sharing. Each player receives a share as in Shamir's case plus some extra information that will allow him to check (by exchanging messages with the other 8 players) that the shares do define a polynomial. This implementation tolerates n1 3 malicious faults.
Reference: [FGY96] <author> Y. Frankel, P. Gemmell, and M. Yung. </author> <title> Witness-based Cryptographic Program Checking and Robust Function Sharing. </title> <booktitle> In Proceedings of the ACM Symposium on Theory of Computing, </booktitle> <year> 1996. </year>
Reference-contexts: As of today, RSA [RSA78] and DSS [NIST91] appear as the two most used schemes in practice. For the case of RSA signatures particular examples of threshold schemes can be found in <ref> [DF92, DDFY94, FGY96, GJKR96] </ref>. DSS signatures turn out to be less amenable to sharing techniques than RSA or even other ElGamal-type of signatures. <p> This is an important property achieved by some other 2 The robustness property has been known for some other shared ElGamal-like signature schemes see [CMI93, Har94]. As for threshold RSA, robust solutions have been only recently found (see <ref> [FGY96, GJKR96] </ref>). 3 In [CMI93] a solution that achieves t n=2 is also presented. Such solution makes use of advanced techniques from the area of secure multiparty computation ([BGW88, CCD88]).
Reference: [GJKR96] <author> R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin. </author> <title> Robust and Efficient Sharing of RSA Functions. </title> <booktitle> In Advances in Cryptology-CRYPTO'96, Lecture Notes in Computer Science vol.1109, </booktitle> <address> pp.157-172, </address> <publisher> Springer-Verlag, </publisher> <year> 1996 </year>
Reference-contexts: As of today, RSA [RSA78] and DSS [NIST91] appear as the two most used schemes in practice. For the case of RSA signatures particular examples of threshold schemes can be found in <ref> [DF92, DDFY94, FGY96, GJKR96] </ref>. DSS signatures turn out to be less amenable to sharing techniques than RSA or even other ElGamal-type of signatures. <p> This is an important property achieved by some other 2 The robustness property has been known for some other shared ElGamal-like signature schemes see [CMI93, Har94]. As for threshold RSA, robust solutions have been only recently found (see <ref> [FGY96, GJKR96] </ref>). 3 In [CMI93] a solution that achieves t n=2 is also presented. Such solution makes use of advanced techniques from the area of secure multiparty computation ([BGW88, CCD88]).
Reference: [GMR88] <author> S. Goldwasser, S. Micali, and R.L. Rivest. </author> <title> A digital signature scheme secure against adaptive chosen-message attacks. </title> <journal> SIAM J. Computing, </journal> <volume> 17(2) </volume> <pages> 281-308, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: Ver is the verification algorithm. On input a message m, the public key y, and a string sig, it checks whether sig is a proper signature of m. The notion of security for signature schemes was formally defined in <ref> [GMR88] </ref> in various flavors. The following definition captures the strongest of these notions: existential unforgeability against adaptively chosen message attack. <p> This is the analogous to the notion of existential unforgeability under chosen message attack as defined by Goldwasser, Micali, and Rivest <ref> [GMR88] </ref>. Notice that now the adversary does not just see the signatures of k messages adaptively chosen, but also the internal state of the corrupted players and the public part of the protocols. Following [GMR88] one can also define weaker notions of unforgeability. <p> the notion of existential unforgeability under chosen message attack as defined by Goldwasser, Micali, and Rivest <ref> [GMR88] </ref>. Notice that now the adversary does not just see the signatures of k messages adaptively chosen, but also the internal state of the corrupted players and the public part of the protocols. Following [GMR88] one can also define weaker notions of unforgeability. In order to prove unforgeability we use the concept of simulatable adversary view [GMR89, MR92]. <p> In other words, we could allow the adversary to gain knowledge provided that such knowledge is useless for forging. However our stronger definition subsumes this specific goal and provides a proof of security for any of the "flavors" of signature security as listed in <ref> [GMR88] </ref>. Indeed one can prove that if the underlying signature scheme S is unforgeable (in any of the flavors of [GMR88]) and T S is simulatable then T S is unforgeable (with the same flavor of S) Robustness means that the protocol will compute a correct output even in the presence <p> However our stronger definition subsumes this specific goal and provides a proof of security for any of the "flavors" of signature security as listed in <ref> [GMR88] </ref>. Indeed one can prove that if the underlying signature scheme S is unforgeable (in any of the flavors of [GMR88]) and T S is simulatable then T S is unforgeable (with the same flavor of S) Robustness means that the protocol will compute a correct output even in the presence of halting or malicious faults.
Reference: [GMR89] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The knowledge complexity of interactive proof-systems. </title> <journal> SIAM. J. Computing, </journal> <volume> 18(1) </volume> <pages> 186-208, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: Following [GMR88] one can also define weaker notions of unforgeability. In order to prove unforgeability we use the concept of simulatable adversary view <ref> [GMR89, MR92] </ref>. Intuitively, this means that the adversary who sees all the information of the corrupted players and the signature of m, could generate by itself all the other public information produced by the protocol Thresh-Sig.
Reference: [Har94] <author> L. Harn. </author> <title> Group oriented (t; n) digital signature scheme. </title> <journal> IEE Proc.-Comput.Digit.Tech, </journal> <volume> 141(5), </volume> <month> Sept </month> <year> 1994. </year>
Reference-contexts: DSS signatures turn out to be less amenable to sharing techniques than RSA or even other ElGamal-type of signatures. For this reason, many variants of ElGamal-type signatures, have been proposed that are more suitable to being turned into threshold schemes (see for example <ref> [Har94, PK96] </ref>.) The specific case of DSS was studied by Langford in [Lan95]. <p> This is an important property achieved by some other 2 The robustness property has been known for some other shared ElGamal-like signature schemes see <ref> [CMI93, Har94] </ref>. As for threshold RSA, robust solutions have been only recently found (see [FGY96, GJKR96]). 3 In [CMI93] a solution that achieves t n=2 is also presented. Such solution makes use of advanced techniques from the area of secure multiparty computation ([BGW88, CCD88]).
Reference: [HJKY95] <author> A. Herzberg, S. Jarecki, H. Krawczyk, and M. Yung. </author> <title> Proactive secret sharing, or: How to cope with perpetual leakage. </title> <booktitle> In Advances in Cryptology-Crypto'95, Lecture Notes of Computer Science vol.963, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Proactive signatures: Remarkably, our solutions for robust threshold DSS signatures can be proactivized using the recent techniques of [HJJKY97] (based on proactive secret sharing of the signature key <ref> [HJKY95] </ref>). In this way, one can keep the DSS signature key fixed for a long time while its shares can be refreshed periodically.
Reference: [HJJKY97] <author> A. Herzberg, M. Jakobbson, S. Jarecki, H. Krawczyk, and M. Yung. </author> <title> Proactive public-key and signature schemes. </title> <booktitle> In Proceedings of the ACM Conference on Computer and Communication Security, to appear, </booktitle> <year> 1997. </year>
Reference-contexts: Proactive signatures: Remarkably, our solutions for robust threshold DSS signatures can be proactivized using the recent techniques of <ref> [HJJKY97] </ref> (based on proactive secret sharing of the signature key [HJKY95]). In this way, one can keep the DSS signature key fixed for a long time while its shares can be refreshed periodically.
Reference: [Lan95] <author> S. Langford. </author> <title> Threshold DSS signatures without a trusted party. </title> <booktitle> In Crypto'95, </booktitle> <pages> pages 397-409. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <booktitle> Lecture Notes in Computer Science No. </booktitle> <volume> 963. </volume> <pages> 23 </pages>
Reference-contexts: For this reason, many variants of ElGamal-type signatures, have been proposed that are more suitable to being turned into threshold schemes (see for example [Har94, PK96].) The specific case of DSS was studied by Langford in <ref> [Lan95] </ref>. <p> They present formal definitions of threshold signature schemes and solutions based on the ElGamal signature scheme which occur only a linear increase in the number of signers (compared to quadratic as in <ref> [Lan95] </ref>). Our work, independently developed, follows an approach similar to [CMI93]. However, by concentrating on the case of DSS signatures we achieve better properties in our solution. <p> See <ref> [Lan95] </ref> for details. 2 1.2 Our Contribution We present several protocols for threshold DSS signatures which enjoy several attractive properties listed below. <p> This threshold goes down to n1 3 if we allow the possibility of t faulty servers to refuse to participate in the signature protocol (fail-stop faults). In all these cases we improve substantially on the quadratic bound of <ref> [Lan95] </ref>. In addition, we provide a robust threshold signature scheme for DSS which can withstand the participation of dishonest signers during the signature computation operation. Namely, we provide a mechanism that succeeds in constructing a valid signature even if the partial signatures contributed by some of the signers are incorrect. <p> Namely, we provide a mechanism that succeeds in constructing a valid signature even if the partial signatures contributed by some of the signers are incorrect. The solution in <ref> [Lan95] </ref> for DSS does not enjoy this property. <p> Such techniques are applicable to our schemes as well, however due to the great computational overhead involved with their application the resulting schemes lose practical applicability. For this reason we have decided not to discuss them in detail. 3 ElGamal based threshold signature schemes (including the DSS solution in <ref> [Lan95, CMI93] </ref>), but not known for threshold RSA signatures. Proactive signatures: Remarkably, our solutions for robust threshold DSS signatures can be proactivized using the recent techniques of [HJJKY97] (based on proactive secret sharing of the signature key [HJKY95]). <p> In our description of the DSS protocol we follow the notation introduced in <ref> [Lan95] </ref>, which differs from the original presentation of [NIST91] by switching k and k 1 . This change will allow a clearer presentation of our threshold DSS signature protocols. Key Generation.
Reference: [MR92] <author> S. Micali and P. Rogaway. </author> <title> Secure computation. </title> <editor> In J. Feigenbaum, editor, </editor> <booktitle> Proc. CRYPTO 91, </booktitle> <pages> pages 392-404. </pages> <publisher> Springer, </publisher> <year> 1992. </year> <note> Lecture Notes in Computer Science No. 576. </note>
Reference-contexts: Following [GMR88] one can also define weaker notions of unforgeability. In order to prove unforgeability we use the concept of simulatable adversary view <ref> [GMR89, MR92] </ref>. Intuitively, this means that the adversary who sees all the information of the corrupted players and the signature of m, could generate by itself all the other public information produced by the protocol Thresh-Sig.
Reference: [MS81] <author> R. McEliece and D. Sarwate. </author> <title> On Sharing Secrets and Reed-Solomon codes. </title> <journal> Communications of the ACM, </journal> <volume> 24(9) </volume> <pages> 583-584, </pages> <month> September </month> <year> 1981. </year>
Reference-contexts: This protocol generates no public output. It can tolerate t eavesdropping faults if n t + 1 and, additionally, t halting faults if n 2t + 1. By using error-correcting techniques (as first suggested in <ref> [MS81] </ref>) the protocol can also tolerate f malicious faults (among the players, excluding the dealer) if n t + 2f + 1. In the following we will refer to this protocol by Shamir-SS. Feldman's Verifiable Secret Sharing. [Fel87].
Reference: [NIST91] <institution> National Institute for Standards and Technology. Digital Signature Standard (DSS). </institution> <type> Technical Report 169, </type> <month> August 30 </month> <year> 1991. </year>
Reference-contexts: It is very important to provide threshold solutions for signatures schemes used in practice, as those systems are the ones that will be deployed in the real world and hence they are the ones that require real protection. As of today, RSA [RSA78] and DSS <ref> [NIST91] </ref> appear as the two most used schemes in practice. For the case of RSA signatures particular examples of threshold schemes can be found in [DF92, DDFY94, FGY96, GJKR96]. DSS signatures turn out to be less amenable to sharing techniques than RSA or even other ElGamal-type of signatures. <p> Definition 4 A threshold signature scheme T S =(Thresh-Key-Gen,Thresh-Sig) is (h; c; n)-robust if even in the presence of an adversary who halts h players and corrupts c players (h + c t), both Thresh-Key-Gen and Thresh-Sig complete successfully. 3 The Digital Signature Standard (DSS) The Digital Signature Standard (DSS) <ref> [NIST91] </ref> is a signature scheme based on the El-Gamal [ElG85] and Schnorr's [Sch91] signature schemes, which was adopted as the US standard digital signature algorithm. In our description of the DSS protocol we follow the notation introduced in [Lan95], which differs from the original presentation of [NIST91] by switching k and <p> Digital Signature Standard (DSS) <ref> [NIST91] </ref> is a signature scheme based on the El-Gamal [ElG85] and Schnorr's [Sch91] signature schemes, which was adopted as the US standard digital signature algorithm. In our description of the DSS protocol we follow the notation introduced in [Lan95], which differs from the original presentation of [NIST91] by switching k and k 1 . This change will allow a clearer presentation of our threshold DSS signature protocols. Key Generation. <p> Even the simplified version of Rabin [Rab95] for repetitive multiplication involves non-trivial zero-knowledge proofs for verifiability.) 5 DSS Threshold Key-generation without a Trusted Party An instance (p; q; g) of DSS can be generated using a public procedure (e.g., as specified in <ref> [NIST91] </ref>), or using randomness which is jointly provided by the players. To generate a pair of 10 public and private keys in a distributed setting without a trusted party, we use a joint verifiable secret sharing protocol, following the protocol of Pedersen [Ped91a].
Reference: [PK96] <author> C. Park, and K. Kurosawa. </author> <title> New ElGamal Type Threshold Digital Signature Scheme. </title> <journal> IEICE Trans. Fundamentals, </journal> <volume> E79-A(1):86-93, </volume> <month> January </month> <year> 1996. </year>
Reference-contexts: DSS signatures turn out to be less amenable to sharing techniques than RSA or even other ElGamal-type of signatures. For this reason, many variants of ElGamal-type signatures, have been proposed that are more suitable to being turned into threshold schemes (see for example <ref> [Har94, PK96] </ref>.) The specific case of DSS was studied by Langford in [Lan95].
Reference: [Ped91a] <author> T. Pedersen. </author> <title> Distributed provers with applications to undeniable signatures. </title> <booktitle> In Proc. EUROCRYPT 91, </booktitle> <year> 1991. </year>
Reference-contexts: The scheme tolerates n1 2 malicious faults. Both implementations can be used in our main protocol. In the following we will refer to this protocol as Uncond-Secure-VSS. Joint Random Secret Sharing. <ref> [Ped91a, Ped91b] </ref>. In a Joint Random Secret Sharing scheme the players collectively choose shares corresponding to a (t; n)-secret sharing of a random value. <p> To generate a pair of 10 public and private keys in a distributed setting without a trusted party, we use a joint verifiable secret sharing protocol, following the protocol of Pedersen <ref> [Ped91a] </ref>. That is the players run an execution of Joint-Feldman-RSS (Section 4).
Reference: [Ped91b] <author> T. Pedersen. </author> <title> Non-interactive and information-theoretic secure verifiable secret sharing. </title> <booktitle> In Proc. CRYPTO 91, </booktitle> <pages> pages 129-140, </pages> <year> 1991. </year>
Reference-contexts: In addition to these techniques we use many tools from other works, such as verifiable secret sharing (both computational and information-theoretic versions), shared generation/distribution of secrets, re-randomization of secret shares, and more. In particular we make extended use of Pedersen's unconditionally secure VSS protocols <ref> [Ped91b] </ref> which allows us to reduce the computational assumptions needed in the proofs of our schemes. To achieve the robustness of the t n=4 scheme we apply error correcting techniques due to Berlekamp and Welch [BW]. <p> Notice that the value of the secret is only computationally secure, e.g., the value g a 0 = g mod p is leaked. In the following we will refer to this protocol by Feldman-VSS. Unconditionally Secure Verifiable Secret Sharing. <ref> [FM88, Ped91b] </ref>. In contrast to Feldman's VSS protocol, this protocol provides information theoretic secrecy for the shared secret. This is required by some of our techniques in order to achieve provable security. There are two possible implementation of this primitive. <p> Each player receives a share as in Shamir's case plus some extra information that will allow him to check (by exchanging messages with the other 8 players) that the shares do define a polynomial. This implementation tolerates n1 3 malicious faults. Another possible implementation is the one by Pedersen <ref> [Ped91b] </ref>. In this implementation the private information of player P i is the value i such that ( 1 ; : : : ; n ) (t;n) ! mod p, using sharing polynomial f . <p> The scheme tolerates n1 2 malicious faults. Both implementations can be used in our main protocol. In the following we will refer to this protocol as Uncond-Secure-VSS. Joint Random Secret Sharing. <ref> [Ped91a, Ped91b] </ref>. In a Joint Random Secret Sharing scheme the players collectively choose shares corresponding to a (t; n)-secret sharing of a random value. <p> The gain in fault-tolerance however comes at the expenses of an increased amount of computation (e.g. modular exponentiations) required to the players in order to compute a single signature. The previous protocol used the Feldman and Pedersen VSS protocols <ref> [Fel87, Ped91b] </ref> only to assure that secrets where shared correctly. When it came to authenticate the shares broadcasted by players in order to reconstruct a value, however we relied on error-correcting codes.
Reference: [Rab95] <author> M. Rabin. </author> <title> A Simplification Approach to Distributed Multiparty Computations. </title> <type> personal communication, </type> <year> 1995. </year>
Reference-contexts: Even the simplified version of Rabin <ref> [Rab95] </ref> for repetitive multiplication involves non-trivial zero-knowledge proofs for verifiability.) 5 DSS Threshold Key-generation without a Trusted Party An instance (p; q; g) of DSS can be generated using a public procedure (e.g., as specified in [NIST91]), or using randomness which is jointly provided by the players.
Reference: [RSA78] <author> R. Rivest, A. Shamir, and L. Adleman. </author> <title> A method for obtaining digital signatures and public-key cryptosystems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2) </volume> <pages> 120-126, </pages> <month> February </month> <year> 1978. </year>
Reference-contexts: It is very important to provide threshold solutions for signatures schemes used in practice, as those systems are the ones that will be deployed in the real world and hence they are the ones that require real protection. As of today, RSA <ref> [RSA78] </ref> and DSS [NIST91] appear as the two most used schemes in practice. For the case of RSA signatures particular examples of threshold schemes can be found in [DF92, DDFY94, FGY96, GJKR96].
Reference: [Sch91] <author> C. P. Schnorr. </author> <title> Efficient signature generation by smart cards. </title> <journal> Journal of Cryptology, </journal> <volume> 4 </volume> <pages> 161-174, </pages> <year> 1991. </year>
Reference-contexts: n)-robust if even in the presence of an adversary who halts h players and corrupts c players (h + c t), both Thresh-Key-Gen and Thresh-Sig complete successfully. 3 The Digital Signature Standard (DSS) The Digital Signature Standard (DSS) [NIST91] is a signature scheme based on the El-Gamal [ElG85] and Schnorr's <ref> [Sch91] </ref> signature schemes, which was adopted as the US standard digital signature algorithm. In our description of the DSS protocol we follow the notation introduced in [Lan95], which differs from the original presentation of [NIST91] by switching k and k 1 .
Reference: [Sha79] <author> A. Shamir. </author> <title> How to Share a Secret. </title> <journal> Communications of the ACM, </journal> <volume> 22 </volume> <pages> 612-613, </pages> <year> 1979. </year> <month> 24 </month>
Reference-contexts: Shamir's Secret Sharing. <ref> [Sha79] </ref> Given a secret , choose at random a polynomial f (x) of degree t, such that f (0) = .
References-found: 32

