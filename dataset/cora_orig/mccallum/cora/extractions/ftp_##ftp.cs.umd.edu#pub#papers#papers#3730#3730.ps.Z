URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3730/3730.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: Incremental Data Structures and Algorithms for Dynamic Query Interfaces  
Author: Egemen Tanin Richard Beigel Ben Shneiderman 
Keyword: Data Structure, Algorithm, Database, User Interface, Information Visualization, Direct Manipulation, Dynamic Query.  
Address: CS-TR-3730  
Affiliation: U. Maryland  U. Maryland and Yale  U. Maryland  
Abstract: Dynamic query interfaces (DQIs) are a recently developed form of database access that provides continuous realtime feedback to the user during the query formulation process. Previous work shows that DQIs are an elegant and powerful interface to small databases. Unfortunately, when applied to large databases, previous DQI algorithms slow to a crawl. We present a new approach to DQI algorithms that works well with large databases. 1 Our Innovations 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ahlberg, C. and Shneiderman, B., </author> <title> Visual Information Seeking: Tight Coupling of Dynamic Query Filters with Starfield Displays, </title> <booktitle> Proc. ACM Human Factors in Comput. Systems '94, </booktitle> <year> 1994, </year> <pages> pp. 313-317. </pages>
Reference-contexts: Incremental display Slight changes in the query tend to cause only slight changes in the output. By computing and displaying the difference, we can update the display continuously. 2 Background on Dynamic Queries DQIs were developed recently by <ref> [1, 7, 8] </ref> as a mechanism for visualizing multidimensional data. DQIs are graphical (as opposed to textual languages such as SQL) and provide continuous feedback to the user as the query is formulated. <p> Experiments show that querying with DQIs is faster, easier, more pleasant, and less error-prone than with other database interfaces [8]. (See Figure 1 for a sample DQI by <ref> [1] </ref>. Some demos are available from [3, 4].) Queries are made using widgets, such as range sliders (for continuous data attributes), alphanumeric sliders (for textual attributes), toggles (for binary attributes), and check boxes (for discrete multi-valued attributes), to specify each attribute (dimension) of the data. <p> Setup occurs when the query previewer passes control to the DQI. During setup, the widgets, starfield display, bars, and charts are initially drawn on the screen. The DQI reads the active subset. In addition, it makes a copy of the active subset and re-scales each attribute to the range <ref> [1; p] </ref> where p is the number of pixels in the attribute's range slider. Because setup occurs infrequently, we can allow several seconds for it. Selection occurs when the user clicks on a range slider. <p> Experiments have shown that DQIs should process each query in about 0.1 seconds or less in order to give the appearance of a continuous response <ref> [1] </ref>. 4 Data Structures Because of the resolution of the screen we can assume that a range slider is no more than 250 pix els long. <p> It is notable that the querying time is dominated by the starfield update time. When only summary information is displayed, querying takes about 0.02 seconds. In comparison, the pioneering work in the area, the Film Finder program <ref> [1] </ref>, could handle a database of 10,000 records with 10 attributes, and some of the standard data structures analyzed in [5] and tested in [6] demonstrated scalability up to 20,000 records with 10 attributes. 7 Future Directions We plan to: * perform comprehensive experiments to determine the running time for various
Reference: [2] <author> Doan, K., Plaisant, C., and Shneiderman, B., </author> <title> Query Previews in Networked Information Systems, </title> <type> CfAR Tech. Report, </type> <institution> University of Maryland, College Park, CAR-TR-788, </institution> <month> Oct. </month> <year> 1995. </year>
Reference-contexts: Although our auxiliary data structures apply to them as well, the fine granularity of alphanumeric data seems to necessitate additional implementation ideas that are best described in a separate paper. 3 Description of the Algorithm We envision using the DQI algorithm in tandem with a query previewer <ref> [2] </ref> that will allow the user to browse a huge database and select a manageably small subset to scan. Once the user selects such a subset, the query previewer will pass its bounding rectangle to the DQI, which will then take control. <p> By stealing cycles and precomputing, we plan to hide some of the time for selection; however, we will have to experiment with actual users to see how much this helps. Spatial auxiliary data structures may help as well.) * ultimately combine our DQI with a query pre viewer <ref> [2] </ref> developed at the Human-Computer Interaction Laboratory in order to produce a new state of the art in interactive dynamic database access.
Reference: [3] <author> HCIL, ftp://ftp.cs.umd.edu/pub/hcil/Demos/ DQ/dq-home.zip. </author> <title> Downloadable PC demo. </title>
Reference-contexts: Experiments show that querying with DQIs is faster, easier, more pleasant, and less error-prone than with other database interfaces [8]. (See Figure 1 for a sample DQI by [1]. Some demos are available from <ref> [3, 4] </ref>.) Queries are made using widgets, such as range sliders (for continuous data attributes), alphanumeric sliders (for textual attributes), toggles (for binary attributes), and check boxes (for discrete multi-valued attributes), to specify each attribute (dimension) of the data.
Reference: [4] <author> IVEE Development AB, </author> <title> http://www.ivee.com/. Online Java demo and downloadable demos for various platforms. </title>
Reference-contexts: Experiments show that querying with DQIs is faster, easier, more pleasant, and less error-prone than with other database interfaces [8]. (See Figure 1 for a sample DQI by [1]. Some demos are available from <ref> [3, 4] </ref>.) Queries are made using widgets, such as range sliders (for continuous data attributes), alphanumeric sliders (for textual attributes), toggles (for binary attributes), and check boxes (for discrete multi-valued attributes), to specify each attribute (dimension) of the data.
Reference: [5] <author> Jain, V. and Shneiderman, B., </author> <title> Data Structures for Dynamic Queries: An Analytical and Experimental Evaluation, </title> <type> CfAR Tech. Report, </type> <institution> University of Maryland, College Park, CAR-TR-685, </institution> <month> Sep. </month> <year> 1993. </year>
Reference-contexts: When only summary information is displayed, querying takes about 0.02 seconds. In comparison, the pioneering work in the area, the Film Finder program [1], could handle a database of 10,000 records with 10 attributes, and some of the standard data structures analyzed in <ref> [5] </ref> and tested in [6] demonstrated scalability up to 20,000 records with 10 attributes. 7 Future Directions We plan to: * perform comprehensive experiments to determine the running time for various parts of our operation as functions of the database size, screen size, range slider velocity and other parameters. * implement <p> This could be good for selection, because it is sublin-ear. But it could be bad for querying, because it is close to linear, and prior work seems to confirm this doubt <ref> [5, 6] </ref>.
Reference: [6] <author> Pointek, J., </author> <type> personal communication, </type> <year> 1995. </year>
Reference-contexts: When only summary information is displayed, querying takes about 0.02 seconds. In comparison, the pioneering work in the area, the Film Finder program [1], could handle a database of 10,000 records with 10 attributes, and some of the standard data structures analyzed in [5] and tested in <ref> [6] </ref> demonstrated scalability up to 20,000 records with 10 attributes. 7 Future Directions We plan to: * perform comprehensive experiments to determine the running time for various parts of our operation as functions of the database size, screen size, range slider velocity and other parameters. * implement alphanumeric sliders. * try <p> This could be good for selection, because it is sublin-ear. But it could be bad for querying, because it is close to linear, and prior work seems to confirm this doubt <ref> [5, 6] </ref>.
Reference: [7] <author> Shneiderman, B., </author> <title> Dynamic Queries for Visual Information Seeking, </title> <journal> IEEE Software, </journal> <volume> Vol. 11, No. 6, </volume> <year> 1994, </year> <pages> pp. 70-77. </pages>
Reference-contexts: Incremental display Slight changes in the query tend to cause only slight changes in the output. By computing and displaying the difference, we can update the display continuously. 2 Background on Dynamic Queries DQIs were developed recently by <ref> [1, 7, 8] </ref> as a mechanism for visualizing multidimensional data. DQIs are graphical (as opposed to textual languages such as SQL) and provide continuous feedback to the user as the query is formulated.
Reference: [8] <author> Williamson, C. and Shneiderman, B., </author> <title> The Dynamic HomeFinder: Evaluating Dynamic Queries in a Real-Estate Information Exploration System, </title> <booktitle> Proc. ACM SIGIR '92, </booktitle> <year> 1992, </year> <pages> pp. 339-346. </pages>
Reference-contexts: Incremental display Slight changes in the query tend to cause only slight changes in the output. By computing and displaying the difference, we can update the display continuously. 2 Background on Dynamic Queries DQIs were developed recently by <ref> [1, 7, 8] </ref> as a mechanism for visualizing multidimensional data. DQIs are graphical (as opposed to textual languages such as SQL) and provide continuous feedback to the user as the query is formulated. <p> DQIs are graphical (as opposed to textual languages such as SQL) and provide continuous feedback to the user as the query is formulated. Experiments show that querying with DQIs is faster, easier, more pleasant, and less error-prone than with other database interfaces <ref> [8] </ref>. (See Figure 1 for a sample DQI by [1].
References-found: 8

