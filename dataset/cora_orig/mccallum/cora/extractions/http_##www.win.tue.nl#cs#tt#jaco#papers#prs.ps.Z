URL: http://www.win.tue.nl/cs/tt/jaco/papers/prs.ps.Z
Refering-URL: http://www.win.tue.nl/cs/tt/jaco/papers/
Root-URL: http://www.win.tue.nl
Email: E-mail: jaco@win.tue.nl  
Title: Operational Semantics of Rewriting with Priorities  
Author: Jaco van de Pol 
Keyword: Key words: term rewriting systems, rule priorities, structural operational semantics, transition system specification, negative premises.  
Address: P.O. box 513, 5600 MB Eindhoven, The Netherlands.  
Affiliation: Eindhoven University of Technology, Department of Computing Science,  
Abstract: We study the semantics of term rewriting systems with rule priorities (PRS), as introduced in [1]. Three open problems posed in that paper are solved, by giving counter examples. Moreover, a class of executable PRSs is identified. A translation of PRSs into transition system specifications (TSS) is given. This translation introduces negative premises. We prove that the translation preserves the operational semantics. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. C. M. Baeten, J. A. Bergstra, J. W. Klop, and W. P. Weijland. </author> <title> Term-rewriting systems with rule priorities. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 67(2-3):283-302, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Motivation. In <ref> [1] </ref>, term rewriting with rule priorities has been introduced. A priority rewrite system (PRS) extends an ordinary term rewriting system (TRS) with a partial order on the rules. The main idea is to resolve a conflict between two rules by giving priority to the largest rule. <p> The semantics of a PRS is not straightforward. The reason is that the question whether a certain rule may be applied, cannot be answered by syntactically matching the rules of higher priority (cf. Example 3). It is even the case that not every PRS will have a semantics. In <ref> [1] </ref>, a PRS is called meaningful if it has a so called unique sound and complete rewrite set. A certain monotonic operator is associated to a PRS, which reaches its least and greatest fixed points at some closure ordinal ff. <p> We also give a sufficient condition for decidability of the one-step reduction relation. This can be used to identify a subclass of executable PRSs (Section 2.3), addressing another question posed in <ref> [1] </ref>. In particular, the one step reduction relation of the PRS is decidable, if the underlying TRS is strongly normalizing. In Section 3.2, we give a translation of a PRS into a transition system specification (TSS) with negative premises [2,7]. <p> Such definitions are not always meaningful. We show (Theorem 39, 42) that the operational semantics is preserved under this translation. Another application of TSS theory to term rewriting occurs in [3]. This translation relates the semantics of priority rewriting given in <ref> [1] </ref> with 2 general techniques to deal with negation in operational semantics and logic programming (for references to logic programming we refer to [7]). It also explains the negative answer to the third of the open questions. Finally, it opens the way to combining priorities with positive/negative conditions. Acknowledgment. <p> Finally, I am indebted to the anonymous referees for their useful suggestions. 2 Term rewriting with rule priorities In Section 2.1 and 2.2, we shortly recapitulate the definitions and some theory on priority rewrite systems (PRSs). These sections are based on <ref> [1] </ref>; only Example 5 is new. In Section 2.3 we identify a subclass of executable PRSs and Section 2.4 contains counter examples to some open questions posed in [1]. 2.1 Definition and semantics We assume a signature of the form (F; V). <p> These sections are based on <ref> [1] </ref>; only Example 5 is new. In Section 2.3 we identify a subclass of executable PRSs and Section 2.4 contains counter examples to some open questions posed in [1]. 2.1 Definition and semantics We assume a signature of the form (F; V). Here F is a set of function symbols with fixed arities, V is an infinite set of variables. Sets of (open) terms T (F; V) and closed terms T (F) are defined as usual. <p> Sets of (open) terms T (F; V) and closed terms T (F) are defined as usual. Var (s) denotes the variables occurring in term s. A substitution is a finite function from variables to terms. Definition 1 <ref> [1, Definition 2.5] </ref> (1) A rule is a pair of terms, written l 7! r, such that l is not a variable and the variables of r occur in l. (2) A term rewriting system (TRS) is a pair (; R), with R a set of rules. (3) A priority rewrite <p> In this way a conflict between two rules can be resolved. So not every rewrite is enabled. A rewrite is only enabled, if it is not blocked by a rule of higher priority. Let us look at an example before making this formal. Example 3 <ref> [1, Example 2.1] </ref> r1 : P (0) 7! 0 r3 : x + 0 7! x The rewrite x+0 7! r4 S (x+P (0)) is blocked, because r3 takes precedence. <p> The rewrite s + t 7! r4 S (s + P (t)) is enabled only, if t 6i 0. So in the definition of the one step reduction relation, the negation of the more step reduction relation occurs. This explains the following definition. Definition 4 <ref> [1, Definition 2.8, 2.9] </ref> Let PRS P = (R; &gt;) be given, with a rewrite set R. (1) Let x = s 7! r t be a rewrite of P. <p> R. (4) R is complete if it contains all rewrites of P that are correct w.r.t. R. 4 (5) P is meaningful if it has a unique sound and complete rewrite set. This set is the semantics of P. In <ref> [1] </ref> an example of a PRS is given that doesn't have a sound and complete rewrite set (see Example 44), as well as a PRS that has more than one sound and complete rewrite set. Neither of them is meaningful by Definition 4.5. <p> We want of course a method to compute this set by 5 means of successive approximations. This is the aim of this section. Definition 6 <ref> [1, Definition 2.13, 3.2] </ref> (1) Let R be a set of rewrites of PRS P. Then the closure of R, written R P consists of all rewrites that are correct w.r.t. R. (2) Put T P (R) := (R P ) P . <p> Definition 6 [1, Definition 2.13, 3.2] (1) Let R be a set of rewrites of PRS P. Then the closure of R, written R P consists of all rewrites that are correct w.r.t. R. (2) Put T P (R) := (R P ) P . Lemma 7 <ref> [1, Lemma 2.14] </ref> Let R be a set of rewrites for PRS P. (1) R is sound () R R P (2) R is complete () R R P (3) R S ) R P S P Combining 1 and 2 of this lemma, we see that we need a unique <p> Consider the following construction, parameterized by an arbitrary PRS P. (Here and in the sequel, ff ranges over arbitrary ordinals and over limit ordinals; m and n range over finite ordinals.) Definition 8 <ref> [1, Definition 3.3] </ref> T P "0 := ?; T P " := ff&lt; (T P "ff) T P #(ff + 1) := T P (T P #ff) T Proposition 9 [1, Theorem 3.5] For all PRSs P and ordinals ff, (1) (T P "ff) P = T P #ff. <p> the sequel, ff ranges over arbitrary ordinals and over limit ordinals; m and n range over finite ordinals.) Definition 8 [1, Definition 3.3] T P "0 := ?; T P " := ff&lt; (T P "ff) T P #(ff + 1) := T P (T P #ff) T Proposition 9 <ref> [1, Theorem 3.5] </ref> For all PRSs P and ordinals ff, (1) (T P "ff) P = T P #ff. <p> Proposition 10 <ref> [1, Proposition 3.8] </ref> For all PRSs P and ordinals ff, (1) T P "ff is sound. (2) T P #ff is complete. (3) If R is sound and complete, then T P "ff R T P #ff. PROOF. 1 and 2 are proved in [1]. <p> Proposition 10 [1, Proposition 3.8] For all PRSs P and ordinals ff, (1) T P "ff is sound. (2) T P #ff is complete. (3) If R is sound and complete, then T P "ff R T P #ff. PROOF. 1 and 2 are proved in <ref> [1] </ref>. Part 3 is not explicitly mentioned there, although it is needed in the following corollary. 6 Assume that R is sound and complete, then R = R P by Proposition 7 (1 and 2), hence T P (R) = R. <p> Note that for the closure ordinal also T P #ff = T P #(ff + 1). In this way we find the least and the greatest fixed points for the map T P . We now have the following corollary Corollary 11 <ref> [1, Corollary 3.9] </ref> Let ff be the closure ordinal of a PRS P. If T P "ff = T P #ff, then P is meaningful and T P "ff is its semantics. <p> Consequently, given a bounded PRSs with finitely many rules, we can actually compute the finite set of !-successors of each term s. In this sense, the PRS can be executed as a program with input s. This answers a question put in <ref> [1] </ref>, by giving a reasonable class of PRSs that is executable. We first define some relevant properties of PRSs, in terms of the underlying TRS. <p> None of these syntactic conditions is necessary, however. Proposition 13 Let P be a bounded PRS with closure ordinal ff. Then T P "ff = T P #ff. PROOF. This follows immediately from Proposition 3.11 and 3.14 in <ref> [1] </ref>. 2 It will be shown that if the set of rules is finite, then ff is at most ! (Proposition 16). We first need Proposition 14, relating the properties defined above, and the auxiliary Lemma 15. <p> This can be tested by generating all terms reachable from s using i int R (there are only finitely many because P is locally finite), and test whether the used rewrites are in P n , which is decidable by induction hypothesis. 2 2.4 Counter examples to open questions In <ref> [1, p. 297] </ref> three open questions concerning the mapping T P are posed (I) Is the mapping T P always continuous, instead of only monotonic? (II) Is the closure ordinal of each PRS finite? (III) Is the condition of Corollary 11 necessary? That is, does every meaningful PRS P with closure <p> The reason is that a rewrite f (r) 7! s is enabled if a certain reduction r i t is not present. However, one of these steps may involve the original question, whether f (r) 7! s is enabled or not. In <ref> [1] </ref> this problem is solved by asking for a unique sound and complete rewrite set. A fixed point construction was given to compute the semantics. We showed (Example 24) that this is not a complete method. <p> Define TSS (P) = (TSS (); R 0 ), where R 0 = fTSS (r) j r 2 Rg [ F . Example 34 Let P be the following PRS <ref> [1, Example 4] </ref>: Eq (x; x) 7! T The TSS associated to P has the following rules: Eq (x; x) 7! T Eq (x; y) 7! F x ! y Eq (x; z) ! Eq (y; z) Eq (z; x) ! Eq (z; y) hx; zi ! hy; zi x ! <p> The circularity is avoided in the definition of well-supportedness (Definition 30). Indeed, we can find an example of a PRS that has no sound and complete rewrite set, but whose corresponding TSS has a least supported model. In the sequel, P refers to the following example. Example 44 <ref> [1, Example 2.12] </ref> 1 7! A (1) # A (x) 7! 0 In [1] it is shown that this system has no meaning. The problem lies in the fact that the rewrite A (1) 7! 0 is allowed if and only if 1 6i 0. <p> In the sequel, P refers to the following example. Example 44 [1, Example 2.12] 1 7! A (1) # A (x) 7! 0 In <ref> [1] </ref> it is shown that this system has no meaning. The problem lies in the fact that the rewrite A (1) 7! 0 is allowed if and only if 1 6i 0. This however is precisely the case if A (1) 67! 0.
Reference: [2] <author> Roland Bol and Jan Friso Groote. </author> <title> The meaning of negative premises in transition system specifications. </title> <journal> Journal of the ACM, </journal> <volume> 43(5) </volume> <pages> 863-914, </pages> <year> 1996. </year>
Reference: [3] <author> W.J. Fokkink and C. Verhoef. </author> <title> A conservative look at term deduction systems with variable binding. </title> <booktitle> Logic Group Preprint Series 140, </booktitle> <address> Utrecht University, </address> <year> 1995. </year>
Reference-contexts: Such a specification can be seen as an inductive definition with negative premises. Such definitions are not always meaningful. We show (Theorem 39, 42) that the operational semantics is preserved under this translation. Another application of TSS theory to term rewriting occurs in <ref> [3] </ref>. This translation relates the semantics of priority rewriting given in [1] with 2 general techniques to deal with negation in operational semantics and logic programming (for references to logic programming we refer to [7]). It also explains the negative answer to the third of the open questions.
Reference: [4] <author> J.R. Kennaway. </author> <title> The specificity rule for lazy pattern-matching in ambiguous term rewrite systems. </title> <booktitle> In Proc. 3rd European Symposium on Programming, volume 432 of LNCS, </booktitle> <pages> pages 256-270. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: [5] <author> A. Laville. </author> <title> Comparison of priority rules in pattern matching and term rewriting. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 11 </volume> <pages> 321-347, </pages> <year> 1991. </year>
Reference: [6] <author> Chilukuri K. Mohan. </author> <title> Priority rewriting: Semantics, confluence, and conditionals. </title> <editor> In Nachum Dershowitz, editor, </editor> <booktitle> Proc. 3rd Int. Conf. on Rewriting Techniques and Applications, </booktitle> <pages> pages 278-291, </pages> <address> Chapel Hill, NC, April 1989. </address> <publisher> LNCS 355, Springer-Verlag, </publisher> <address> Berlin. </address>
Reference: [7] <author> R. J. van Glabbeek. </author> <title> The meaning of negative premises in transition system specifications II (extended abstract). </title> <editor> In F. Meyer auf der Heide and B. Monien, editors, </editor> <booktitle> Automata, Languages and Programming, 23 rd ICALP, volume 1099 of LNCS, </booktitle> <pages> pages 502-513. </pages> <publisher> Springer, </publisher> <year> 1996. </year> <note> (Full version appeared as technical note STAN-CS-TN-95-16). 27 </note>
Reference-contexts: Another application of TSS theory to term rewriting occurs in [3]. This translation relates the semantics of priority rewriting given in [1] with 2 general techniques to deal with negation in operational semantics and logic programming (for references to logic programming we refer to <ref> [7] </ref>). It also explains the negative answer to the third of the open questions. Finally, it opens the way to combining priorities with positive/negative conditions. Acknowledgment. The research on which this paper is based was carried out at the Philosophy Department of the Utrecht University, The Netherlands. <p> The second rule is enabled if there is no y, such that x reduces to S (y). This falls out of the scope of the usual format for negative literals in TSS theory. In Section 3.1, we recapitulate some TSS-theory, taken from <ref> [7] </ref>. On the fly, the format for negative literals will be generalized slightly. In Section 3.2 the translation of priorities into negative premises will be given. <p> We can now dispose of negative literals of the form s 6! a , because they are subsumed by 8z: s 6! a z. Because 8z: s 6! a t can be thought of as an infinite number of ordinary negative premises, the theorems of <ref> [7] </ref> still apply. Literals, rules and TSSs will be interpreted by transition relations. These are defined as sets of triples, but can alternatively be seen as families of binary relations (for each relation symbol a relation). It is defined below, when a transition relation is a model for a TSS. <p> The relation contains exactly those literals that are provable from T . If T contains negative premises in addition, it is not so clear which transition relation is defined. A TSS may even be refused, because it is meaningless. In the full version of <ref> [7] </ref> up to 11 different solutions for this problem are summarized and compared. Two of these are important for our purpose. The first one gives a minimality criterion that transition relations should sat isfy. The intuition is that positive literals are true only if they are forced somehow. <p> The other method has a proof theoretic flavor. The definition of positive proof is extended with a proof rule for deriving negative literals. In the second 16 approach, a TSS is meaningful, if each positive literal is either provable or refutable. Unfortunately, these solutions don't coincide. Definition 30 cf. <ref> [7, Definition 7] </ref> (Well supported transition relations) A transition relation R is well supported 1 by a TSS T , if for each positive closed L with R * L, there is a set N of negative literals, such that N ` T + L In [7, Proposition 3], it is <p> Definition 30 cf. [7, Definition 7] (Well supported transition relations) A transition relation R is well supported 1 by a TSS T , if for each positive closed L with R * L, there is a set N of negative literals, such that N ` T + L In <ref> [7, Proposition 3] </ref>, it is proved that T has a unique well supported model if and only if it has a least well supported model. In case this exists, it can serve as the semantics of T . <p> We now recapitulate the second method, which adds a new proof rule in order to derive negative information. We dropped the possibility to start with assumptions, because this is not needed. For technical reasons, provability is restricted to closed literals. Definition 31 cf. <ref> [7, Definition 9] </ref> (Well supported proof ) Given a TSS T , well supported provability (` T ws or ` ws for short) is defined inductively by the following two clauses: (1) If H L is a closed instance of a rule from T , and for all K 2 H, <p> Note that in case no rule matches a transition s 7! t, then the condition of the second clause is vacuously true, so ` ws s 67! t holds. Proposition 32 <ref> [7, Proposition 6] </ref> Let T be a TSS. (1) ` T ws is consistent. (2) If ` T ws L then R * L for all well supported models R of T . 1 This use of the phrase "well supported" coincides with the full version of [7]. <p> Proposition 32 [7, Proposition 6] Let T be a TSS. (1) ` T ws is consistent. (2) If ` T ws L then R * L for all well supported models R of T . 1 This use of the phrase "well supported" coincides with the full version of <ref> [7] </ref>. In the extended abstract [7], the same notion is still used to define stability. <p> 6] Let T be a TSS. (1) ` T ws is consistent. (2) If ` T ws L then R * L for all well supported models R of T . 1 This use of the phrase "well supported" coincides with the full version of <ref> [7] </ref>. In the extended abstract [7], the same notion is still used to define stability. <p> Conversely, each well supported model is of the form (R; ! R ; i R ), where R is a sound and complete rewrite set, by Lemma 38, 36 and 37. By <ref> [7, Proposition 3] </ref>, if a least well supported model exists, then this is the unique well supported model. Now the theorem follows. 2 4.2 Fixed points and complete specifications Recall from Section 2.2 the function () P , which assigns to each rewrite set R the set of correct rewrites. <p> The definition of well-supportedness is quite intricate, as it requires that for each transition L in a model M, there exist negative premises N , such that N ` + L and M * N . There exists a much simpler definition of supportedness: Definition 43 <ref> [7, Definition 5] </ref> A transition relation M is supported if for every transition L 2 M, there is a rule instance H L such that M * H.
References-found: 7

