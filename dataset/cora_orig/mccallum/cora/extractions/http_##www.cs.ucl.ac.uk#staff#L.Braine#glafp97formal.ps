URL: http://www.cs.ucl.ac.uk/staff/L.Braine/glafp97formal.ps
Refering-URL: http://www.cs.ucl.ac.uk/staff/L.Braine/researchdocs.html
Root-URL: http://www.cs.ucl.ac.uk
Title: Object-Oriented Functional Spreadsheets  
Author: Chris Clack and Lee Braine 
Address: Gower Street, London WC1E 6BT, UK  
Affiliation: Department of Computer Science, University College London,  
Abstract: The spreadsheet is one of the most successful computer applications. This popularity derives from an intuitive user interface which both closely mimics traditional bookkeeping and allows non-programmers to develop simple numerical applications. Unfortunately, the current user interface is frustrating and limiting: we believe that the computational model can be simplified to improve usability for non-programmers, extended to provide additional functionality, redesigned to facilitate reuse (to improve performance and integrity), and embedded in an environment which supports a spreadsheet inheritance hierarchy. We propose a new spreadsheet paradigm which incorporates many functional programming features such as higher-order functions, a strong type system, curried partial applications, referential transparency and lazy evaluation. It also incorporates many object-oriented programming features such as a class hierarchy, inheritance, overloading, overriding, subsumption, and dynamic despatch on a distinguished object. 
Abstract-found: 1
Intro-found: 1
Reference: [BC96] <author> L. Braine and C. Clack. </author> <title> Introducing CLOVER: an Object-Oriented Functional Language. </title> <editor> In W. Kluge, editor, </editor> <booktitle> Implementation of Functional Languages, 8th International Workshop (IFL'96), Selected Papers, </booktitle> <volume> LNCS 1268, </volume> <pages> 1-20, </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Our approach involves viewing a spreadsheet system as a programming environment and using (a variant of) our new object-oriented functional language CLOVER <ref> [BC96, BC97a, BC97b, BC97c] </ref> to support the new computational model. A naive approach might be merely to replace CLOVER's visual programming interface with a spreadsheet grid to support name bindings. <p> Commercial products such as Excel TM and Quattro Pro T M provide support for viewing spreadsheets as components, but this does not change the computational model of the spreadsheet. The integration of OOP and FP languages has received a lot of attention (see <ref> [BC96] </ref> for a survey of this related work), but most of these systems lose the key feature of referential transparency and none consider the application of the resulting technology to spreadsheets. The use of declarative languages to implement spreadsheets has similarly received considerable attention [DW88, Wra86, HW94]. <p> A cell may now produce a partial application (of function type) and may contain a value that is the name of a parameterised worksheet or of a built-in operation, but note that we do not introduce generalised function abstraction and so cells cannot be -forms (see <ref> [BC96] </ref> for explanation). <p> position (all the other required changes are in the semantics, which we do not present in this paper). 4.3 Adding OOP Functionality We add OOP functionality to the above system in a similar way (and using similar design decisions) as we added OOP to FP to produce the CLOVER language <ref> [BC96] </ref>. We will not repeat the arguments of [BC96] here, but merely observe that it is possible to reconcile FP with the key aspects of OOP except for the issue of object identity, which in CLOVER must have copy-semantics rather than having mutable internal state. <p> the semantics, which we do not present in this paper). 4.3 Adding OOP Functionality We add OOP functionality to the above system in a similar way (and using similar design decisions) as we added OOP to FP to produce the CLOVER language <ref> [BC96] </ref>. We will not repeat the arguments of [BC96] here, but merely observe that it is possible to reconcile FP with the key aspects of OOP except for the issue of object identity, which in CLOVER must have copy-semantics rather than having mutable internal state. <p> The notion of an object-oriented functional spreadsheet is both interesting in its own right and is used as a driving application for the development of our OOFP language, CLOVER <ref> [BC96] </ref>. We are currently implementing a prototype of this design and are collaborating with the University of St.Andrews to take these ideas further.
Reference: [BC97a] <author> L. Braine and C. Clack. </author> <title> An Object-Oriented Functional Approach to Information Systems Engineering. </title> <booktitle> In Proceedings CAiSE'97 4th Doctoral Consortium on Advanced Information Systems Engineering, </booktitle> <year> 1997. </year>
Reference-contexts: Our approach involves viewing a spreadsheet system as a programming environment and using (a variant of) our new object-oriented functional language CLOVER <ref> [BC96, BC97a, BC97b, BC97c] </ref> to support the new computational model. A naive approach might be merely to replace CLOVER's visual programming interface with a spreadsheet grid to support name bindings.
Reference: [BC97b] <author> L. Braine and C. Clack. Object-Flow. </author> <booktitle> In Proceedings 13th IEEE Symposium on Visual Languages (VL'97), </booktitle> <pages> 418-419, </pages> <year> 1997. </year>
Reference-contexts: Our approach involves viewing a spreadsheet system as a programming environment and using (a variant of) our new object-oriented functional language CLOVER <ref> [BC96, BC97a, BC97b, BC97c] </ref> to support the new computational model. A naive approach might be merely to replace CLOVER's visual programming interface with a spreadsheet grid to support name bindings.
Reference: [BC97c] <author> L. Braine and C. Clack. </author> <title> The CLOVER Rewrite Rules: A Translation from OOFP to FP. </title> <booktitle> In Proceedings 9th International Workshop on Implementation of Functional Languages (IFL'97), </booktitle> <pages> 467-488, </pages> <year> 1997. </year>
Reference-contexts: Our approach involves viewing a spreadsheet system as a programming environment and using (a variant of) our new object-oriented functional language CLOVER <ref> [BC96, BC97a, BC97b, BC97c] </ref> to support the new computational model. A naive approach might be merely to replace CLOVER's visual programming interface with a spreadsheet grid to support name bindings.
Reference: [CR92] <author> Casimir and Rommert. </author> <title> Real Programmers Don't Use Spreadsheets. </title> <journal> ACM SIGPLAN Notices 27(6), </journal> <pages> 10-16, </pages> <year> 1992. </year>
Reference-contexts: From the perspective of the advanced spreadsheet user, application development is equally frustrating. Existing commercial spreadsheets such as Excel T M and Lotus 1-2-3 T M are often criticized for the lack of proper abstraction mechanisms and for the shortcomings of their macro facilities <ref> [CR92, Lit90] </ref>. Furthermore, there is a limited type system and poor support for selection and iteration (including recursion). We believe that many benefits can be derived from radically updating the spreadsheet computational model, whilst retaining the essence of the spreadsheet user interface.
Reference: [DH96] <author> A. Davie and K. Hammond. </author> <title> Functional Hypersheets. </title> <booktitle> In Proceedings 8th International Workshop on Implementation of Functional Languages (IFL'96), </booktitle> <pages> 39-48, </pages> <year> 1996. </year>
Reference-contexts: However, FunSheet does not include any OOP features. Simple [Sta93] is an enhanced declarative spreadsheet which provides a constraint-based environment but does not address OOP issues; - Davie and Hammond have investigated persistent hypersheets <ref> [DH96] </ref>, but do not address OOP issues; the Generalised Spreadsheet Model of Yoder and Cohn [YC94, YC95, YC97] and the work of Wack [Wac95] are both discussed below.
Reference: [DRV95] <author> W. De Hoon, L. Rutten, and M. Van Eekelen. </author> <title> Implementing a Functional Spreadsheet in Clean. </title> <journal> Journal of Functional Programming, </journal> <volume> 5(3) </volume> <pages> 383-414, </pages> <year> 1995. </year>
Reference-contexts: The closest pieces of related academic work are: - FunSheet <ref> [DRV95] </ref> is a spreadsheet written in CLEAN. The expression language is also functional and higher-order.
Reference: [DW88] <author> W. Du and W. Wadge. </author> <title> An intensional language as the basis of a 3D spreadsheet design. </title> <booktitle> In Proceedings IEEE International Conference on Computer Languages 1988 (ICCL'88), </booktitle> <pages> 2-9, </pages> <year> 1988. </year>
Reference-contexts: The use of declarative languages to implement spreadsheets has similarly received considerable attention <ref> [DW88, Wra86, HW94] </ref>. However, this is not directly relevant to our research since we are concerned with adding both FP and OOP features to the spreadsheet computational model (rather than merely using FP as an implementation vehicle). Generalised Spreadsheet Model: Yoder and Cohn exploit implicit con-currency of spreadsheet operations.
Reference: [HW94] <author> B.Harvey and M.Wright. </author> <title> Simply Scheme: Introducing Computer Science. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: The use of declarative languages to implement spreadsheets has similarly received considerable attention <ref> [DW88, Wra86, HW94] </ref>. However, this is not directly relevant to our research since we are concerned with adding both FP and OOP features to the spreadsheet computational model (rather than merely using FP as an implementation vehicle). Generalised Spreadsheet Model: Yoder and Cohn exploit implicit con-currency of spreadsheet operations.
Reference: [Hen95] <author> D. Hendry. </author> <title> Display-Based Problems in Spreadsheets: A Critical Incident and a Design Remedy. </title> <booktitle> In Proceedings 11th International IEEE Symposium on Visual Languages (VL'95), </booktitle> <pages> 284-290, </pages> <year> 1995. </year>
Reference-contexts: Furthermore, <ref> [Hen95] </ref> notes that there are many desirable operations on spreadsheets that are easy to specify but difficult to program (and are beyond the grasp of the inexperienced user). <p> We propose a new feature called region-comprehensions which draw their motivation from <ref> [Hen95] </ref> and which also bear some relationship to Scholz's "WITH-loops" [SCH97] (which provide a variant of ZF-expressions over arrays).
Reference: [Lit90] <author> C. Litecky. </author> <title> Spreadsheet Macro Programming: a Critique with Emphasis on Lotus 1-2-3. </title> <journal> Journal of Systems and Software, </journal> <volume> 13(3), </volume> <pages> 197-200, </pages> <year> 1990. </year>
Reference-contexts: From the perspective of the advanced spreadsheet user, application development is equally frustrating. Existing commercial spreadsheets such as Excel T M and Lotus 1-2-3 T M are often criticized for the lack of proper abstraction mechanisms and for the shortcomings of their macro facilities <ref> [CR92, Lit90] </ref>. Furthermore, there is a limited type system and poor support for selection and iteration (including recursion). We believe that many benefits can be derived from radically updating the spreadsheet computational model, whilst retaining the essence of the spreadsheet user interface.
Reference: [SCH97] <author> S. Scholz. </author> <title> With-loop Folding in Sac-Condensing Consecutive Array Operations. </title> <booktitle> In Proceedings Implementation of Functional Languages Workshop IFL'97, </booktitle> <pages> 225-242, </pages> <year> 1997. </year>
Reference-contexts: We propose a new feature called region-comprehensions which draw their motivation from [Hen95] and which also bear some relationship to Scholz's "WITH-loops" <ref> [SCH97] </ref> (which provide a variant of ZF-expressions over arrays).
Reference: [Sta93] <author> M. Stadelmann. </author> <title> A Spreadsheet based on Constraints. </title> <booktitle> In Proceedings 6th Symposium on User Interface Software and Technology (UIST'93), </booktitle> <pages> 217-224, </pages> <year> 1993. </year>
Reference-contexts: An interesting approach is taken in that columns are expressed as functions which are applied to a row index, which (together with higher order functions) provides a better mechanism for abstraction than that of relative addressing. However, FunSheet does not include any OOP features. Simple <ref> [Sta93] </ref> is an enhanced declarative spreadsheet which provides a constraint-based environment but does not address OOP issues; - Davie and Hammond have investigated persistent hypersheets [DH96], but do not address OOP issues; the Generalised Spreadsheet Model of Yoder and Cohn [YC94, YC95, YC97] and the work of Wack [Wac95] are both
Reference: [Tur95] <author> D. Turner. </author> <title> Elementary Strong Functional Programming. </title> <editor> In P. Hartel and M. Plasmeijer, editors, </editor> <booktitle> Proceedings First International Symposium on Functional Programming Languages in Education (FPLE'95), </booktitle> <volume> LNCS 1022, </volume> <pages> 1-13, </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: This restricts the computational power of the system, yet in the next section we add higher-order functions and this combination of primitive recursion plus higher-order functions provides a system of adequate computational power (see <ref> [Tur95] </ref>). <p> In this, we follow the lead of <ref> [Tur95] </ref>.
Reference: [Wac95] <author> A. Wack. </author> <title> Partitioning Dependency Graphs for Concurrent Execution: </title>
Reference-contexts: Simple [Sta93] is an enhanced declarative spreadsheet which provides a constraint-based environment but does not address OOP issues; - Davie and Hammond have investigated persistent hypersheets [DH96], but do not address OOP issues; the Generalised Spreadsheet Model of Yoder and Cohn [YC94, YC95, YC97] and the work of Wack <ref> [Wac95] </ref> are both discussed below. Commercial products such as Excel TM and Quattro Pro T M provide support for viewing spreadsheets as components, but this does not change the computational model of the spreadsheet. <p> Their research is summarised in [YC97] with the definition of a Generalised Spreadsheet Model. Wack: Like Yoder & Cohn, Wack <ref> [Wac95] </ref> is primarily interested in the implicit parallelism of spreadsheets.
References-found: 15

