URL: ftp://ftp.cs.unc.edu/pub/users/manocha/PAPERS/COLLISION/vcol.ps
Refering-URL: http://www.cs.unc.edu/~lin/papers.html
Root-URL: http://www.cs.unc.edu
Title: V-COLLIDE: Accelerated Collision Detection for VRML  
Author: Thomas C. Hudson Ming C. Lin Jonathan Cohen Stefan Gottschalk Dinesh Manocha 
Web: http://www.cs.unc.edu/geom/collide.html  
Affiliation: Department of Computer Science University of North Carolina  
Abstract: Collision detection is essential for many applications involving simulation, behavior and animation. However, it has been regarded as a computationally demanding task and is often treated as an advanced feature. Most commonly used commercial CAD/CAM packages and high performance graphics libraries, such as SGI Performer, provide limited support for collision detection. As users continue to stretch the capabilities of VRML, collision detection will soon become an indispensable capability for many applications. In this paper, we present a system for accelerated and robust collision detection and describe its interface to VRML browsers. We demonstrate that it is possible to perform accurate collision detection at interactive rates in VRML environments composed of large numbers of complex moving objects. CR Categories and Subject Descriptors: D.3.2 [Programming Languages]: Language/Classifications Virtual Reality Modeling Language 2.0; I.3.1 [Computer Graphics]: Graphics Systems Distributed/Network Graphics; I.5.3 [Computer Graphics]: Computational Geometry and Object Modeling Additional Key Words and Phrases: Virtual Reality Modeling Language (VRML), collision detection 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Z. Andersson. </author> <title> VRML Behaviour a proposal. </title> <address> http://www.lysator.liu.se/zap/vr prop1.html. </address>
Reference-contexts: It would be possible to specify which faces of which geometry nodes were involved in the collision, but this would increase the memory footprint of our data structures and would require a more densely scripted environment. With distributed simulation or multiuser use of VRML, distributed protocols come into play <ref> [1, 10, 11] </ref>. In any situation without a globally consistent state at all browsers, collision detection, like any other object-object interaction mechanism, will have to be given a great deal of thought. Most schemes proposed for seamlessly distributing VRML involve a spatial partition.
Reference: [2] <author> G. Bell, R. Carey, and C. Marrin. </author> <title> The Virtual Reality Modeling Language Specification Version 2.0. </title> <note> http://vag.vrml.org/VRML2.0/FINAL/, August 1996. </note>
Reference-contexts: We unify several techniques from previous work in large-scale collision detection and hierarchical data structures [4, 5], and propose a clean integration of the resulting libraries with VRML 2.0 <ref> [2] </ref>. Our system offers a practical toolkit for performing interactive and robust collision detection in VRML environments. Organization: In Section 2 of this paper, we describe the desired characteristics of a collision detection system for VRML applications.
Reference: [3] <author> S. Cameron. </author> <title> Approximation Hierarchies and S-bounds. </title> <booktitle> In Proceedings. Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 129-137, </pages> <year> 1991. </year>
Reference-contexts: The problem of collision detection has been explored in the literature of computer graphics, robotics, computational geometry, computer animation, and physically-based modeling. Numerous approaches based on bounding boxes, spatial partioning, geometric reasoning, numerical methods, and analytical methods have been proposed <ref> [3, 6, 7] </ref>. However, none of these algorithms or systems satisfies the demanding requirements of general-purpose collision detection in VRML browsers. Main Contribution: In this paper, we present a system (V-COLLIDE) for interactive collision detection among arbitrary polygonal models undergoing rigid motion in VRML environments.
Reference: [4] <author> J. Cohen, M. Lin, D. Manocha, and M. Ponamgi. I-COLLIDE: </author> <title> An Interactive and Exact Collision Detection System for Large-Scale Environments. </title> <booktitle> In Proc. of ACM Interactive 3D Graphics Conference, </booktitle> <pages> pages 189-196, </pages> <year> 1995. </year>
Reference-contexts: Main Contribution: In this paper, we present a system (V-COLLIDE) for interactive collision detection among arbitrary polygonal models undergoing rigid motion in VRML environments. We unify several techniques from previous work in large-scale collision detection and hierarchical data structures <ref> [4, 5] </ref>, and propose a clean integration of the resulting libraries with VRML 2.0 [2]. Our system offers a practical toolkit for performing interactive and robust collision detection in VRML environments. <p> 3 System Architecture In this section we describe the architecture of V-COLLIDE and propose a method for the VRML scene graph to control the collision detection library. 3.1 Hierarchical Approach Our proposal takes a multi-level approach to the problem of collision detection, similar to that used in the I-COLLIDE library <ref> [4] </ref>. A quick conservative approximation finds potentially-colliding pairs of objects among the entire database (using the n-body sweep-and-prune algorithm from I-COLLIDE), after which a pairwise test taken from RAPID [5] determines whether two objects marked as overlapping actually collided. Figure 1 shows the architecture of our collision detection library, V-COLLIDE.
Reference: [5] <author> S. Gottschalk, M. Lin, and D. Manocha. </author> <month> OBB-Tree: </month>
Reference-contexts: Main Contribution: In this paper, we present a system (V-COLLIDE) for interactive collision detection among arbitrary polygonal models undergoing rigid motion in VRML environments. We unify several techniques from previous work in large-scale collision detection and hierarchical data structures <ref> [4, 5] </ref>, and propose a clean integration of the resulting libraries with VRML 2.0 [2]. Our system offers a practical toolkit for performing interactive and robust collision detection in VRML environments. <p> A quick conservative approximation finds potentially-colliding pairs of objects among the entire database (using the n-body sweep-and-prune algorithm from I-COLLIDE), after which a pairwise test taken from RAPID <ref> [5] </ref> determines whether two objects marked as overlapping actually collided. Figure 1 shows the architecture of our collision detection library, V-COLLIDE. The first level of V-COLLIDE computes minimal axis-aligned bounding boxes (AABBs) for every object in the scene. <p> To check for collision between a pair of objects, we can descend their OBB hierarchies to find any leaf boxes which overlap, and then perform exact intersection tests between the triangles in the overlapping leaves. For efficient overlap tests of the boxes, we use the separating axis theorem <ref> [5] </ref>. We use the OBB construction method from RAPID. A top-down recursive approach partitions the primitives in a box into two sub-boxes, based on the location of their centers. This partitioning is heuristic, is a lightweight approach suitable for online computation, and gives reasonable results for collision detection.
References-found: 5

