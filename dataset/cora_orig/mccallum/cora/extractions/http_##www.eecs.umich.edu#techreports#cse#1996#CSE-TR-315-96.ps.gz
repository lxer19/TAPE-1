URL: http://www.eecs.umich.edu/techreports/cse/1996/CSE-TR-315-96.ps.gz
Refering-URL: http://www.eecs.umich.edu/home/techreports/cse96.html
Root-URL: http://www.eecs.umich.edu
Email: email: -chaudhry, moyne, rundenst-@eecs.umich.edu  
Title: Extended Aggregation Relationships for Process Specification and Enactment in Active Databases  
Author: Nauman Chaudhry, James Moyne, and Elke A. Rundensteiner 
Keyword: Active database, object modeling, process specification, rule definition, process control.  
Address: Ann Arbor, MI 48109-2122  
Affiliation: Department of Electrical Engineering and Computer Science University of Michigan,  
Abstract: Process specification in a variety of domains, such as experiment modeling, work-ow modeling, and process-ows in semiconductor manufacturing, is typically characterized by recursive specification in terms of sequences and alternatives. A variety of models have been proposed for the specification of such processes. In particular, object-oriented techniques have been used for achieving various desirable features (e.g., reusability, maintainability, etc.) in the process specification and active databases have been suggested as possible platforms for process enactment. However, on the one hand object-oriented models for process specification lack an important feature of object-orientation, namely the ability to organize processes as classes with inheritance support, and on the other hand various problems, such as lack of methodological support for active rule definition, analysis, and maintenance, stand in the way of successfully employing active database technology for process enactment. To take better advantage of both object-oriented techniques and active database technology, we present a comprehensive framework for process specification and enactment, which provides an integrated solution utilizing ideas from both these domains. This is achieved by developing PSOM (Process Specification Object Model) which is an object-oriented model with explicit aggregation constructs and extended sub-typing relationships for these new aggregation constructs. We show the use of PSOM for defining processes using the aggregation constructs and arranging these processes into class hierarchies based on the formal types of the processes. In addition, we establish guidelines for defining active rules for process enactment on PSOM process specifications. We also prove that the rule definition guidelines lead to modularized rule sets which simplify the analysis of termination behavior of active rules defined in a PSOM process database. 
Abstract-found: 1
Intro-found: 1
Reference: [Abiteboul95] <author> S. Abiteboul, R. Hull, V. Vianu, </author> <title> Foundations of Databases, </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: In OODB models for a class B to be a sub-class of another class A, the type associated with B should be a sub-type of the type associated with A <ref> [Abiteboul95] </ref>. Since the processes are defined in terms of the sequenced aggregation relationship, this requires that the process specification model should include the notion of sub-typing for sequenced aggregation relationships. <p> PSOM also includes definition of extended sub-typing relationships for these process aggregations and we show the use of these features for process specification. 3.1 Base Model We use the object-oriented data model presented in <ref> [Abiteboul95] </ref> as the base model for defining PSOM. This data model includes values and objects. A value has a type. This type is recursively definable from atomic types and the set and tuple type constructors. Object identity is one of the atomic types. <p> An object belongs to a class. A value (and thus the corresponding object) can refer to other objects via their identities. Below, we give a brief description of this model, restricting ourselves to the parts of the model that we will use later. For a more detailed discussion see <ref> [Abiteboul95] </ref>. Assume the existence of a number of atomic types and their pair-wise disjoint domains: integer, string, bool, oat. The set dom of atomic values is the union of these domains. The elements of dom are called constants.
Reference: [Aiken95] <author> A. Aiken, J. Hellerstein, and J. Widom, </author> <title> Static Analysis Techniques for Predicting the Behavior of Active Database Rules, </title> <journal> ACM TODS, </journal> <volume> 20, 1, </volume> <pages> 3-41, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: Rule analysis is a difficult problem. Important properties of rule behavior such as termination and conuence can be very difficult or impossible to decide in the general case <ref> [Aiken95] </ref>. To help the application developer with rule programming and maintenance, modularization techniques have been proposed in [Baralis96].
Reference: [Baralis96] <author> E. Baralis, S. Ceri, S. Paraboschi, </author> <title> Modularization Techniques for Active Rule Design, </title> <journal> ACM TODS, </journal> <volume> 21, 1, </volume> <month> March </month> <year> 1996, </year> <pages> 1-29. </pages>
Reference-contexts: Stratification of active rules has been recently proposed as a design principle for modularization of active rules for easier termination analysis <ref> [Baralis96] </ref>. Informally, stratification consists of partitioning rules into disjoint sets or strata. Rule behavior is considered in terms of local interaction within an individual stratum and the global behavior across strata. <p> Rule analysis is a difficult problem. Important properties of rule behavior such as termination and conuence can be very difficult or impossible to decide in the general case [Aiken95]. To help the application developer with rule programming and maintenance, modularization techniques have been proposed in <ref> [Baralis96] </ref>. For the purposes of control rule definition for semiconductor manufacturing, we have used these techniques to develop more specific guidelines and have shown that the resulting rule base can be easily analyzed to check for termination.
Reference: [Bichler94] <author> P. Bichler and M. Schre, </author> <title> Active Object-Oriented Database Design Using Active Object/Behavior Diagrams, </title> <booktitle> Proc. of the Fourth International Workshop on Research Issues in Data Engineering (RIDE-ADS 94), </booktitle> <pages> 163-171, </pages> <address> Houston, Texas, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: There has been some research carried out on the conceptual design of active OODBs <ref> [Bichler94] </ref>, but comprehensive design methodologies still appear to be missing. However, there have been promising recent approaches to help the application developer with rule definition in particular domains.
Reference: [Beck94] <author> B. Beck and S. </author> <title> Hartley, Persistent Storage for a Workow Tool Implemented in Smalltalk, </title> <booktitle> 9th Annual Conference on Object-oriented Programming, Systems, Languages and Applications, OOPSLA 94, </booktitle> <address> October 94, Portland, Oregon. </address>
Reference-contexts: Given the importance of these application domains, a variety of process specification models have been proposed in recent years. Most of these models are based on Petri nets, state charts, weighted and colored graphs, or enhancements of these basic techniques <ref> [Beck94] </ref>, [Hsu96], [Leymann94], [Ellis93]. All of these techniques allow explicit representation of the process sequence structure. This explicit representation can then be directly mapped to an appropriate database schema for persistent storage of the process instances. <p> However, the need for dynamic change and exception handling is noted, both of which we feel are provided by active rules. The use of an object-oriented database for storing work-ow specification is discussed in <ref> [Beck94] </ref>. The specification mechanism is graph-based, however process sub-class/super-class relationships are again not discussed. Increasingly there have also been proposals for specifying processes via rules. In this approach, rules are used to define the ordering of processes, alternative processes, etc., [Kappel95].
Reference: [Bubler94] <author> C. Bubler and S. Jablonski, </author> <title> An Approach to Integrate Workow Modeling and Organization Modeling in an Enterprise, </title> <booktitle> Proc. of 3rd Workshop on Enabling Technologies: Infrastructure for Collaborative Enterprises, </booktitle> <month> April </month> <year> 1994, </year> <institution> Morgantown, West Virginia, </institution> <month> 81-95. </month>
Reference-contexts: The utility of this feature, which is an essential requirement for reuse of processes, has been recognized in the literature [Hsu96], <ref> [Bubler94] </ref>. But, to the best of our knowledge, no work has been reported as of now on developing notions of sub-typing and class inheritance for processes.
Reference: [Cardelli84] <author> L. Cardelli and P. Wegner, </author> <title> On Understanding Types, Data Abstraction, and Polymorphism, </title> <journal> ACM Computing Surveys, </journal> <volume> 17, 4, </volume> <month> December </month> <year> 1984, </year> <pages> 471-522. </pages>
Reference-contexts: Now Photolitho-1 is defined with p-spec SEQ (Spin-coat, Expose, Develop, Post-bake). Thus the super-type/sub-type rela tionship holds between the p-spec attribute of Photolitho and Photliho1. Definition 7: Subtyping for Alternative Types. Following the definition of sub-typing for union types in <ref> [Cardelli84] </ref>, the alternative sub-type can be defined by using the ALT type constructor over valid sub-types of a sub-set of types of the alternative (super) type.
Reference: [Casati 96] <editor> F. Casati, et. al., </editor> <title> Deriving Active Rules for Workow Enactment, </title> <booktitle> to appear in 7th International Conference on Database and Expert Systems Applications, DEXA 96, </booktitle> <month> September </month> <year> 1996, </year> <institution> Zurich, Switzerland. </institution> <note> [Chaudhry95]N. </note> <author> Chaudhry, J. Moyne, E. Rundensteiner, </author> <title> A Generic Framework for Inter-Cell Control of a Semiconductor Manufacturing Facility, </title> <booktitle> 42nd National Symposium of the American Vacuum Society, </booktitle> <address> Minneapolis, </address> <month> October </month> <year> 1995. </year>
Reference: [Chen95] <author> I. Chen and V. Markowitz, </author> <title> Modeling Scientific Experiments with an Object Data Model, </title> <booktitle> Proc. 11th IEEE ICDE, </booktitle> <year> 1995. </year>
Reference-contexts: A fairly comprehensive object model for recursive specification of scientific experiments in terms of alternatives, sequences of and optional experiments is presented in <ref> [Chen95] </ref>. This object model has also been implemented on top of commercial relational database management systems. Though specialization and generalization of experiment models is mentioned, yet sub-typing relationships for experiment models that can be used as means of defining sub-class/super-class relationships are not discussed.
Reference: [Dayal96] <author> U. Dayal, A. Buchmann and S. Chakravarthy, </author> <title> The HiPAC Project, </title> <booktitle> in [Widom96]. </booktitle>
Reference-contexts: Different active OODBs use different approaches for representing rules. These include defining rules as first-class objects as, for example, in HiPAC <ref> [Dayal96] </ref>, defining them within class definitions as in Ode [Lieuwen96], or defining rules as separate entities using special rule languages as in SAMOS [Geppert95]. When rules are defined as part of the schema, these are typically restricted to one class and can only specify intra-object triggers.
Reference: [Durbeck93] <author> D. Durbeck, et. al. </author> <title> A System for Semiconductor Process Specification, </title> <journal> IEEE Transactions on Semiconductor Manufacturing, </journal> <volume> 6, 4, </volume> <month> November </month> <year> 1993, </year> <pages> 297-305. </pages>
Reference-contexts: (related work), we discuss the commonalities and differences between the requirements for this domain and various other domains. 2.1 Process Specification Semiconductor manufacturing processes to fabricate a wafer are specified as sequences and alternatives of other processes and/or steps which need to be executed in order to fabricate that wafer <ref> [Durbeck93] </ref>. The sub-processes in turn may consist of other processes and steps, whereas steps are considered to be non-decomposable. This thus leads to a nested specification of processes with a parent-process at one level decomposable into a sequence of child-processes or child-steps at another level and so on.
Reference: [Ellis93] <author> C. Ellis and G. Nutt, </author> <title> Modeling and Enactment of Workow Systems, </title> <booktitle> 14th International Conference on the Application and Theory of Petri Nets, </booktitle> <address> Chicago, </address> <month> June </month> <year> 1993, </year> <pages> 1-16. </pages>
Reference-contexts: Given the importance of these application domains, a variety of process specification models have been proposed in recent years. Most of these models are based on Petri nets, state charts, weighted and colored graphs, or enhancements of these basic techniques [Beck94], [Hsu96], [Leymann94], <ref> [Ellis93] </ref>. All of these techniques allow explicit representation of the process sequence structure. This explicit representation can then be directly mapped to an appropriate database schema for persistent storage of the process instances. <p> The emphasis is on automatically deriving an executable distributed work-ow from a formal specification and the use of state charts is of exemplary nature. The issue of arranging processes in class hierarchies is not addressed. The same remark is true of <ref> [Ellis93] </ref>, in which Information Control Nets are described for use in work-ow process specification, analysis and implementation. However, the need for dynamic change and exception handling is noted, both of which we feel are provided by active rules.
Reference: [Geppert95] <author> A. Geppert, et. al., </author> <title> Architecture and Implementation of the Active Object-Oriented Database Management System SAMOS, </title> <type> Technical Report 95.29, </type> <institution> Institut fur Informatik, Universitat Zurich, Switzerland. </institution> <month> 17 </month>
Reference-contexts: Different active OODBs use different approaches for representing rules. These include defining rules as first-class objects as, for example, in HiPAC [Dayal96], defining them within class definitions as in Ode [Lieuwen96], or defining rules as separate entities using special rule languages as in SAMOS <ref> [Geppert95] </ref>. When rules are defined as part of the schema, these are typically restricted to one class and can only specify intra-object triggers. Representing rules as first-class objects can give more expressional power, including the ability to define inter-object triggers.
Reference: [Hsu96] <author> M. Hsu and C. Kleissner, ObjectFlow: </author> <title> Towards a Process Management Infrastructure, Distributed and Parallel Databases, </title> <booktitle> 4 (1996), </booktitle> <pages> 169-194. </pages>
Reference-contexts: Given the importance of these application domains, a variety of process specification models have been proposed in recent years. Most of these models are based on Petri nets, state charts, weighted and colored graphs, or enhancements of these basic techniques [Beck94], <ref> [Hsu96] </ref>, [Leymann94], [Ellis93]. All of these techniques allow explicit representation of the process sequence structure. This explicit representation can then be directly mapped to an appropriate database schema for persistent storage of the process instances. <p> We then define sub-typing relationships for PSOM thus providing the capability of organizing processes defined using these type constructors in class hierarchies, and hence enhancing reusability of process specifications. The utility of this feature, which is an essential requirement for reuse of processes, has been recognized in the literature <ref> [Hsu96] </ref>, [Bubler94]. But, to the best of our knowledge, no work has been reported as of now on developing notions of sub-typing and class inheritance for processes. <p> This does not happen in semiconductor manufacturing, where the processing on the wafer can only be carried out sequentially. Various models have been proposed for specifying work-ow processes. These include various graph-based models for process specification, including ow procedures in <ref> [Hsu96] </ref> and colored, weighted graphs in [Leymann94]. The utility of organizing processes in class hierarchies has been recognized in [Hsu96], but the issue is not addressed in either [Hsu96] or [Leymann94]. Both of these approaches allow nested definition of processes with control and data ow specification. <p> Various models have been proposed for specifying work-ow processes. These include various graph-based models for process specification, including ow procedures in <ref> [Hsu96] </ref> and colored, weighted graphs in [Leymann94]. The utility of organizing processes in class hierarchies has been recognized in [Hsu96], but the issue is not addressed in either [Hsu96] or [Leymann94]. Both of these approaches allow nested definition of processes with control and data ow specification. The notion of state for process execution is also defined rigorously. <p> Various models have been proposed for specifying work-ow processes. These include various graph-based models for process specification, including ow procedures in <ref> [Hsu96] </ref> and colored, weighted graphs in [Leymann94]. The utility of organizing processes in class hierarchies has been recognized in [Hsu96], but the issue is not addressed in either [Hsu96] or [Leymann94]. Both of these approaches allow nested definition of processes with control and data ow specification. The notion of state for process execution is also defined rigorously. <p> In this approach, rules are used to define the ordering of processes, alternative processes, etc., [Kappel95]. Note that even in many of the approaches where processes are explicitly specified via graphs, rules are used to represent triggering conditions under which, e.g., one may choose between different alternative processes [Leymann94], <ref> [Hsu96] </ref>. There have also been approaches in which processes are specified via a schema, which are then processed to automatically generate active rules for process enactment according to the specified schema [Casati96]. <p> It has been argued that the specification of processes via rules results in embedding the relationship among activities in action statements of the rules [Casati96] and it is difficult to use these rules to achieve an understanding of the progression of a process <ref> [Hsu96] </ref>. The use of specification mechanisms that explicitly represent the control ow (e.g., process schema or graphs) produces models which not only provide an intuitive understanding of the process structure, but for 15 which notions like progression of the process can be easily defined.
Reference: [Kappel95] <author> G. Kappel, et. al, </author> <title> Workow Management Based on Objects, Rules and Roles, </title> <journal> IEEE Bulletin of TC on Data Engineering, </journal> <month> June </month> <year> 1995, </year> <pages> 11-18. </pages>
Reference-contexts: The specification mechanism is graph-based, however process sub-class/super-class relationships are again not discussed. Increasingly there have also been proposals for specifying processes via rules. In this approach, rules are used to define the ordering of processes, alternative processes, etc., <ref> [Kappel95] </ref>. Note that even in many of the approaches where processes are explicitly specified via graphs, rules are used to represent triggering conditions under which, e.g., one may choose between different alternative processes [Leymann94], [Hsu96].
Reference: [Kappel96] <author> G. Kappel, et. al., </author> <title> From Rules to Rule Patterns, </title> <booktitle> Proceedings of the Conference on Advanced Information Systems Engineering (CAiSE 96), </booktitle> <month> May </month> <year> 1996, </year> <pages> 99-115. </pages>
Reference-contexts: There has been some research carried out on the conceptual design of active OODBs [Bichler94], but comprehensive design methodologies still appear to be missing. However, there have been promising recent approaches to help the application developer with rule definition in particular domains. Rule patterns have been presented in <ref> [Kappel96] </ref> as an abstract means to capture various types of (business) control policies in a generic manner. These patterns can then be parameterized for use in specific applications. For automatically defining rules for work-ows, templated rules have also been introduced in [Casati96].
Reference: [Kemper94] <author> A. Kemper, P. Lockemann, and H-D. Walter, </author> <title> Autonomous Objects: A Natural Model for Complex Applications, </title> <journal> Journal of Intelligent Information Systems, </journal> <volume> 2, </volume> <pages> 133-150, </pages> <year> 1994. </year>
Reference-contexts: When rules are defined as part of the schema, these are typically restricted to one class and can only specify intra-object triggers. Representing rules as first-class objects can give more expressional power, including the ability to define inter-object triggers. However as has been pointed out in <ref> [Kemper94] </ref>, rules spanning multiple classes do not conform to the object-oriented paradigm, since such a definition does not respect encapsulation which is a very basic object-oriented principle. For process control one may frequently need to define rules that carry out control over multiple processes at various nesting levels.
Reference: [Kim89] <author> W. Kim, E. Bertino, and J. Garza, </author> <title> Composite Objects Revisited, </title> <booktitle> Proc. of the ACM SIGMOD International Conference on the Management of Data, </booktitle> <address> Portland, Oregon, May 31-June 2, </address> <year> 1989, </year> <pages> 337-347. </pages>
Reference-contexts: In fact, we say that a parent process is defined via a sequenced aggregation of its child-activities whereas conventionally has-a relationships have the semantics of being unordered <ref> [Kim89] </ref>, [Liu92]. In Figure 1, note that the Wafer-cleaning process can be executed in two ways, either as a sequence of the steps Organic-clean and Water-rinsing or the sequence of steps Inorganic-clean and Water-rinsing.
Reference: [Larrabee91] <author> G. </author> <title> Larrabee, </title> <booktitle> The Intelligent Microelectronics Factory of the Future, Proceedings of the 1991 IEEE/SEMI International Semiconductor Manufacturing Science Symposium, </booktitle> <pages> 30-34. </pages>
Reference-contexts: Examples of such changes are re-work (repeating a part of the processing sequence already carried out on the wafer to correct errors in the processing), and feed-forward control (modifying the processes yet to be carried out on the wafer to correct errors in the processing) <ref> [Larrabee91] </ref>. Thus we need the ability to specify control actions over the process specification.
Reference: [Leymann94] <author> F. Leymann and W. Altenhuber, </author> <title> Managing Business Processes as an Information Resource, </title> <journal> IBM Systems Journal, </journal> <volume> 33, 2, </volume> <year> 1994, </year> <pages> 326-348. </pages>
Reference-contexts: Given the importance of these application domains, a variety of process specification models have been proposed in recent years. Most of these models are based on Petri nets, state charts, weighted and colored graphs, or enhancements of these basic techniques [Beck94], [Hsu96], <ref> [Leymann94] </ref>, [Ellis93]. All of these techniques allow explicit representation of the process sequence structure. This explicit representation can then be directly mapped to an appropriate database schema for persistent storage of the process instances. <p> This does not happen in semiconductor manufacturing, where the processing on the wafer can only be carried out sequentially. Various models have been proposed for specifying work-ow processes. These include various graph-based models for process specification, including ow procedures in [Hsu96] and colored, weighted graphs in <ref> [Leymann94] </ref>. The utility of organizing processes in class hierarchies has been recognized in [Hsu96], but the issue is not addressed in either [Hsu96] or [Leymann94]. Both of these approaches allow nested definition of processes with control and data ow specification. <p> These include various graph-based models for process specification, including ow procedures in [Hsu96] and colored, weighted graphs in <ref> [Leymann94] </ref>. The utility of organizing processes in class hierarchies has been recognized in [Hsu96], but the issue is not addressed in either [Hsu96] or [Leymann94]. Both of these approaches allow nested definition of processes with control and data ow specification. The notion of state for process execution is also defined rigorously. <p> In this approach, rules are used to define the ordering of processes, alternative processes, etc., [Kappel95]. Note that even in many of the approaches where processes are explicitly specified via graphs, rules are used to represent triggering conditions under which, e.g., one may choose between different alternative processes <ref> [Leymann94] </ref>, [Hsu96]. There have also been approaches in which processes are specified via a schema, which are then processed to automatically generate active rules for process enactment according to the specified schema [Casati96].
Reference: [Lieuwen96] <author> D. Lieuwen, N. Gehani, and R. Arlien, </author> <title> The Ode Active Database: Trigger Semantics and Implementation, </title> <booktitle> Proc. of the IEEE ICDE, </booktitle> <address> New Orleans, Louisiana, </address> <year> 1996, </year> <pages> 412-420. </pages>
Reference-contexts: Different active OODBs use different approaches for representing rules. These include defining rules as first-class objects as, for example, in HiPAC [Dayal96], defining them within class definitions as in Ode <ref> [Lieuwen96] </ref>, or defining rules as separate entities using special rule languages as in SAMOS [Geppert95]. When rules are defined as part of the schema, these are typically restricted to one class and can only specify intra-object triggers.
Reference: [Liu92] <author> L. Liu, </author> <title> Exploring Semantics in Aggregation Hierarchies for Object-Oriented Databases, </title> <booktitle> Proc. IEEE ICDE, </booktitle> <address> Phoenix, Arizona, </address> <year> 1992, </year> <pages> 116-125. </pages>
Reference-contexts: In fact, we say that a parent process is defined via a sequenced aggregation of its child-activities whereas conventionally has-a relationships have the semantics of being unordered [Kim89], <ref> [Liu92] </ref>. In Figure 1, note that the Wafer-cleaning process can be executed in two ways, either as a sequence of the steps Organic-clean and Water-rinsing or the sequence of steps Inorganic-clean and Water-rinsing. <p> Det Rules at P Cor Rules at P Cor Rules at Det Rules at child-activities of P the parent of P 14 5 Related Work An extended object-oriented model for exploring semantics in aggregation relationships is presented in <ref> [Liu92] </ref>, [Liu93]. Composite objects are used as a mechanism of object queries, allowing users to remain within the framework of composite objects when querying the database. Aggregation relationships are also used as a means of encapsulation by allowing the aggregate object to freely use the methods defined on constituent objects. <p> In addition, we have presented sub-typing relationships for sequenced aggregations. This represents a partial solution to the problem of defining sub-typing on general aggregate relationships, which is mentioned as a possible extension in <ref> [Liu92] </ref>. Process specification for a variety of others domains, in particular work-ow modeling, shares many features with the specification of process-ows in semiconductor manufacturing. Hence, the results presented in this paper will be applicable and of use to these various domains.
Reference: [Liu93] <author> L. Liu, </author> <title> A Recursive Object Algebra Based on Aggregation Abstraction for Manipulating Complex Objects, </title> <journal> Data and Knowledge Engineering, </journal> <volume> 11, </volume> <year> 1993, </year> <pages> 21-60. </pages>
Reference-contexts: Det Rules at P Cor Rules at P Cor Rules at Det Rules at child-activities of P the parent of P 14 5 Related Work An extended object-oriented model for exploring semantics in aggregation relationships is presented in [Liu92], <ref> [Liu93] </ref>. Composite objects are used as a mechanism of object queries, allowing users to remain within the framework of composite objects when querying the database. Aggregation relationships are also used as a means of encapsulation by allowing the aggregate object to freely use the methods defined on constituent objects.
Reference: [Simon95] <author> E. Simon and A. Kotz-Dittrich, </author> <title> Promises and Realities of Active Database Systems, </title> <booktitle> Proc. of the 21st VLDB Conference, </booktitle> <address> Zurich, Switzerland, </address> <year> 1995, </year> <pages> 642-653. </pages>
Reference-contexts: Some of the key difficulties in developing applications using active databases are the lack of methodological support for active rule definition, and the difficulty in analyzing the behavior of active rule sets <ref> [Simon95] </ref>. In this paper, we propose solutions to these different problems in the context of process enactment by exploiting particular characteristics of PSOM. We present design guidelines for defining active rules for enactment of processes specified using PSOM. <p> However, as has been noted in <ref> [Simon95] </ref>, a number of problems need to be resolved to fulfill the promise of active database technology. These include: insufficient methodological support for designing applications using active rules, difficulty in analyzing interaction of control rules, and difficulty in maintaining such applications as rules are added and deleted.
Reference: [Widom96] <author> J. Widom and S. Ceri, eds., </author> <title> Active Database Systems: Triggers and Rules for Advanced Database Processing, </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1996. </year>
Reference-contexts: It has been noted that one of the hindrances in the acceptance of active database technology is the difficulty in defining and maintaining rule sets whose execution is predictable <ref> [Widom96] </ref>. Therefore, to present active database technology as an attractive vehicle for the implementation of process execution, the rule programmer should be guided towards defining rules that are easy to analyze and whose behavior is predictable. Photolitho-1 is-a FIGURE 2. The Photolitho and Photolitho1 Processes. <p> In case of active OODBs, there are a number of other complicating factors that are not present in relational active databases <ref> [Widom96] </ref>. These include: when to use active rules and when to use methods, since behavior can also be implemented using methods, a lack of consensus on how active rules should be integrated in the object-oriented model. Different active OODBs use different approaches for representing rules.
Reference: [Wodtke96] <author> D. Wodtke, et. al., </author> <title> The Mentor Project: Steps Towards Enterprise-Wide Workow Management, </title> <booktitle> Proc. 12th IEEE ICDE, </booktitle> <pages> 556-565. </pages>
Reference-contexts: This object model has also been implemented on top of commercial relational database management systems. Though specialization and generalization of experiment models is mentioned, yet sub-typing relationships for experiment models that can be used as means of defining sub-class/super-class relationships are not discussed. The Mentor project described in <ref> [Wodtke96] </ref> uses the formalism of state and activity charts for work-ow process specification. The emphasis is on automatically deriving an executable distributed work-ow from a formal specification and the use of state charts is of exemplary nature. The issue of arranging processes in class hierarchies is not addressed.
References-found: 26

