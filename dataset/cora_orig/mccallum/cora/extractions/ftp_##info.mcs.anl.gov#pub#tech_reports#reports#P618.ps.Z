URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P618.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts96.htm
Root-URL: http://www.mcs.anl.gov
Title: 4 33 Basic Test Problems: A Practical Evaluation of Some Paramodulation Strategies  
Author: William McCune 
Note: Contract W-31-109-Eng-38.  
Address: 4.1 Introduction  
Affiliation: Argonne National Laboratory  
Abstract: Many researchers who study the theoretical aspects of inference systems believe that if inference rule A is complete and more restrictive than inference rule B, then the use of A will lead more quickly to proofs than will the use of B. The literature contains statements of the sort "our rule is complete and it heavily prunes the search space; therefore it is efficient". 2 These positions are highly questionable and indicate that the authors have little or no experience with the practical use of automated inference systems. Restrictive rules (1) can block short, easy-to-find proofs, (2) can block proofs involving simple clauses, the type of clause on which many practical searches focus, (3) can require weakening of redundancy control such as subsumption and demodulation, and (4) can require the use of complex checks in deciding whether such rules should be applied. The only way to determine the practical value of inference rules and search strategies is to experiment on problems in which long-term target users are interested. In this chapter we present a new theorem prover for equational logic, a set of 33 equational theorems for evaluating paramodulation strategies, a large set of experiments with several paramodulation strategies, and two equational proofs in Robbins algebra. The new theorem prover, EQP, includes associative-commutative unification and is restricted to equational logic, but in many other ways it is similar to our production theorem prover Otter[10]. The 33 equational theorems, which are mostly about lattice-like and group-like structures, are taken from a recent interdisciplinary study on application of Otter to problems in equational logic [11]. The experiments are with basic paramodulation, blocked paramodulation, ordered-instance paramodulation, functional subsumption, a heuristic for eliminating associative-commutative unifiers, and methods for directing the search. The two Robbins algebra theorems, which involve the hypotheses 9C9D (C + D = C) 2 This is a very general statement. We are not referring in particular to the paramodulation strategies on which we focus in this chapter 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Bachmair, H. Ganzinger, C. Lynch, and W. Snyder. </author> <title> Basic paramodulation and superposition. </title> <editor> In D. Kapur, editor, </editor> <booktitle> Proceedings of the 11th International Conference on Automated Deduction, Lecture Notes in Artificial Intelligence, </booktitle> <volume> Vol. 607, </volume> <pages> pages 462-476. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Basic Paramodulation. This strategy applies to non-AC and to AC experiments. Basic paramodulation <ref> [1, 13] </ref> is a restriction that prevents paramodulation into terms that arise solely by instantiation. One way to view this (and a way to implement it) is to represent clauses as a pair, hskeleton,substitutioni. <p> Demodulation with basic paramodulation is more problematic. The standard definitions of demodulation with basic paramodulation (e.g., <ref> [1] </ref>) do not allow demodulation of nonbasic terms. This restriction seems intuitively unwise, because we wish to simplify wherever possible; some preliminary experiments (not reported here) support our position, so EQP ignores that restriction.
Reference: [2] <author> M. Bonacina and W. McCune. </author> <title> Distributed theorem proving by Peers. </title> <editor> In A. Bundy, editor, </editor> <booktitle> Proceedings of the 12th International Conference on Automated Deduction, Lecture Notes in Artificial Intelligence, </booktitle> <volume> Vol. 814, </volume> <pages> pages 841-845. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <note> Extended abstract. </note>
Reference-contexts: The most important two differences from Otter are that EQP includes AC unification and it applies to equational problems only. Also, EQP is much simpler and easier to extend. An early version of EQP was used for several experiments with algorithms for distributed equational reasoning (see, for example, <ref> [2] </ref>). Similarities between Otter and EQP 1. Design philosophy and the C programming language. 2. The overall structure of the programs. 3. Unification and matching algorithms (excluding AC unification). 4. The term and literal indexing algorithms.
Reference: [3] <author> J. Hsiang and M. Rusinowitch. </author> <title> On word problems in equational theories. </title> <editor> In T. Ottmann, editor, </editor> <booktitle> Proceedings of 14th ICALP, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 267, </volume> <pages> pages 54-71. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: The (unfortunately named) "basic paramodulation" is one of the strategies we evaluate in this chapter. 6 This inference system has been in use at Argonne in various forms since about 1977. It is similar to G. E. Peterson's system [15] and unfailing Knuth-Bendix completion <ref> [3] </ref>. 33 Basic Test Problems: A Practical Evaluation of Some Paramodulation Strategies 5 negative linked superhyperparamodulation, added in 1991, probably not used by anyone, but something I'd like to keep anyway?" In 1992, we started an efficient implementation of AC unification, and that code has grown, very slowly, into the new
Reference: [4] <author> G. Huet. </author> <title> An algorithm to generate the basis of solutions to homogeneous linear Diophantine equations. </title> <journal> Information Processing Letters, </journal> <volume> 7 </volume> <pages> 144-147, </pages> <year> 1978. </year>
Reference-contexts: most of the paramodula-tion strategies we considered, we ran experiments with ratios 1, 4, 8, and 1 (i.e., purely best-first). (We used a value of 4 for almost all of the experiments reported in [11].) 4.5.2 Associative-Commutative (AC) Operations EQP has AC unification (Stickel's AC algorithm [17], with Huet's algorithm <ref> [4] </ref> for finding basis solutions) and AC matching (our own algorithm). The AC unification algorithm is quite complicated, but our implementation is straightforward. AC terms are stored as binary terms in canonical form, and they are flattened into arrays during the unification process.
Reference: [5] <author> D. Kapur, D. Musser, and P Narendran. </author> <title> Only prime superpositions need be considered in the Knuth-Bendix completion procedure. </title> <journal> J. Symbolic Computation, </journal> <volume> 6 </volume> <pages> 19-36, </pages> <year> 1988. </year>
Reference-contexts: Blocked paramodulation does not allow a paramodulation inference if any term in the unifier can be rewritten with the current set of demodulators. The strategy was discussed by Lankford and proved complete in the context of completion by Kapur, Musser, and Narendran <ref> [5] </ref>. The justification is that an unblocked inference is composite and thus can be factored into prime inferences, and that only prime inferences are needed for completion. See [5] for details. <p> The strategy was discussed by Lankford and proved complete in the context of completion by Kapur, Musser, and Narendran <ref> [5] </ref>. The justification is that an unblocked inference is composite and thus can be factored into prime inferences, and that only prime inferences are needed for completion. See [5] for details. <p> Kapur and Zhang report that preventing unblocked inference gives great speedups on ring commutativity problems <ref> [5] </ref>. This is a fairly expensive test in our implementation; in the case of AC unification, we believe the test could be incorporated into the AC unification routines so that one test would apply to more than one unifier, but we have not attempted such a method. Basic Paramodulation. <p> The Robbins problem, whether every 10 A similar observation was made by Kapur, Musser, and Narendran in <ref> [5] </ref>. 33 Basic Test Problems: A Practical Evaluation of Some Paramodulation Strategies 29 associative-commutative algebra satisfying the Robbins axiom is also a Boolean algebra, was posed in the 1930s and is still open.
Reference: [6] <author> D. Kapur and H. Zhang. RRL: </author> <title> Rewrite rule laboratory user's manual. </title> <type> Technical Report 89-03, </type> <institution> Department of Computer Science, University of Iowa, </institution> <year> 1989. </year>
Reference-contexts: EQP's AC matching code is separate from its AC unification code. Our implementation, which does not solve Diophantine equations, uses some ideas from RRL <ref> [6] </ref>. It is a backtracking algorithm that binds variables to all appropriate combinations of terms. The speed of AC matching is extremely important, because we 10 Chapter 4 find that in practice, most of the time is spent rewriting derived clauses. <p> to a potential unifier, then no supersets of S are considered; a value of 1 means to consider supersets of size jSj + 1, and so on. 9 The strategy is obviously incomplete, because it eliminates most-general AC unifiers. 9 A method similar to ac-superset-limit=0 has been used in RRL <ref> [6] </ref>. 33 Basic Test Problems: A Practical Evaluation of Some Paramodulation Strategies 13 Functional Subsumption. This strategy applies to non-AC and to AC experiments. Functional subsumption is a simple extension of ordinary subsumption.
Reference: [7] <author> D. Kapur and H. Zhang. </author> <title> A case study of the completion procedure: Proving ring commu-tativity problems. </title> <editor> In J.-L. Lassez and G. Plotkin, editors, </editor> <booktitle> Computational Logic: Essays in Honor of Alan Robinson, chapter 10, </booktitle> <pages> pages 360-394. </pages> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: AC terms are stored as binary terms in canonical form, and they are flattened into arrays during the unification process. Unifiers are generated incrementally on demand by a backtracking algorithm. We have not implemented Kapur and Zhang's check for symmetry among AC unifiers <ref> [7] </ref>, and we do not use any indexing for finding AC-unifiable terms. Experience continues to show us that the speed of AC unification is not particularly important, because in practice the percentage of time spent there is small, but elimination of unnecessary or undesirable AC unifiers is extremely important. <p> For the AC problems, blocked paramodulation had greater effects, both positive and negative, when compared with the starting strategy. These results were unexpected because Kapur and Zhang <ref> [7] </ref> report excellent results for blocked AC-paramodulation on ring problems. 4.8 Robbins Algebra In this section we present two results in Robbins algebra obtained with EQP's AC unification and matching, then present a small case study on the easier result and one experiment on the more difficult result.
Reference: [8] <author> D. Lankford. </author> <title> Canonical inference. </title> <type> Tech. Report ATP-32, </type> <institution> Dept. of Mathematics, University of Texas at Austin, </institution> <year> 1975. </year>
Reference-contexts: The ordered-instance paramodulation restriction prevents paramodulation in 33 Basic Test Problems: A Practical Evaluation of Some Paramodulation Strategies 11 such cases. Nearly all current theoretical work on paramodulation strategies uses ordered-instance paramodulation, but Otter, for example does not. Early work in this area was in the context of completion <ref> [8] </ref>. Blocked Paramodulation. This strategy applies to non-AC and to AC experiments. Blocked paramodulation does not allow a paramodulation inference if any term in the unifier can be rewritten with the current set of demodulators.
Reference: [9] <author> W. McCune. </author> <title> Experiments with discrimination tree indexing and path indexing for term retrieval. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 9(2) </volume> <pages> 147-167, </pages> <year> 1992. </year> <type> Invited paper. </type>
Reference-contexts: The term and literal indexing algorithms. Both programs (excluding EQP with AC unification) use discrimination tree indexing for retrieval of demodulators and subsuming clauses, and both use FPA-Path indexing for retrieval of unifiable terms during paramodulation and instance terms during back demodulation <ref> [9] </ref>. 5. Input and output languages. 6. Noninteractive use of the programs. 7. Performance of the programs. Differences between Otter and EQP 1. Otter and EQP share very little code. 2. Otter uses extensive structure sharing, which decreases memory consumption but complicates the algorithms and code.
Reference: [10] <author> W. McCune. </author> <title> Otter 3.0 Reference Manual and Guide. </title> <type> Tech. Report ANL-94/6, </type> <institution> Argonne National Laboratory, Argonne, IL, </institution> <year> 1994. </year>
Reference-contexts: The new theorem prover, EQP, includes associative-commutative unification and is restricted to equational logic, but in many other ways it is similar to our production theorem prover Otter <ref> [10] </ref>. The 33 equational theorems, which are mostly about lattice-like and group-like structures, are taken from a recent interdisciplinary study on application of Otter to problems in equational logic [11]. <p> the proofs we present here are the first equational proofs and the first ones found by computer. 4.2 The Test Problems Our 33 test problems are taken from the recent monograph Automated Deduction in Equational Logic and Cubic Curves [11], which contains a collection of first-order theorems proved by Otter <ref> [10] </ref>. The theorems are in a narrow area: from the syntactic view, all are equational, in languages with small sets of symbols, and most have small sets of small equations; from the semantic view, most are about simple lattice-like algebras and simple group-like algebras. <p> However, we have not carefully analyzed for completeness the compatibility of the restrictions with our starting strategy or with each other. Our (extensive) use of the max-weight parameter obviously causes incompleteness. 4.4 EQP: The New Theorem Prover We have been working on Otter <ref> [10] </ref> since 1988. It is a mature and stable program, with perhaps forty serious users. However, it has become difficult to work on because of its size and its many kludges, patches, and extraneous features.
Reference: [11] <author> W. McCune and R. Padmanabhan. </author> <title> Automated Deduction in Equational Logic and Cubic Curves, </title> <booktitle> volume 1095 of Lecture Notes in Computer Science (AI subseries). </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1996. </year>
Reference-contexts: The 33 equational theorems, which are mostly about lattice-like and group-like structures, are taken from a recent interdisciplinary study on application of Otter to problems in equational logic <ref> [11] </ref>. The experiments are with basic paramodulation, blocked paramodulation, ordered-instance paramodulation, functional subsumption, a heuristic for eliminating associative-commutative unifiers, and methods for directing the search. <p> + D) = n (C)), were previously known, but we believe the proofs we present here are the first equational proofs and the first ones found by computer. 4.2 The Test Problems Our 33 test problems are taken from the recent monograph Automated Deduction in Equational Logic and Cubic Curves <ref> [11] </ref>, which contains a collection of first-order theorems proved by Otter [10]. <p> Nevertheless, we believe the theorems are a good set for evaluating paramodulation strategies because they are real and nontrivial theorems that arose in practice when a mathematician (R. Padmanabhan) was studying algebraic structures with equational logic. From the set of theorems in <ref> [11] </ref>, we have excluded those involving the geometry inference rule =(gL)) , those with nonequational hypotheses such as cancellation, those that required extremely specialized strategies to find a proof, and most of those that were proved by Otter in less than a second or two. <p> Also, many of the theorems in <ref> [11] </ref> have multiple goals (nonunit denials), and in those cases we used only the most difficult goal. That left 33 equational theorems 3 (each with a unit goal), of which 13 have at least one associative commutative (AC) operation. The names we use here are similar to those in [11], with <p> in <ref> [11] </ref> have multiple goals (nonunit denials), and in those cases we used only the most difficult goal. That left 33 equational theorems 3 (each with a unit goal), of which 13 have at least one associative commutative (AC) operation. The names we use here are similar to those in [11], with the minor modification that if we use just one goal of a multiple-goal theorem, we append a lower-case letter to the name: "a" means that we use the first goal, "b" the second, and so on. This brings us to a dirty part of these experiments|the max-weight parameter. <p> the 3 The number is a coincidence, really, Larry. 33 Basic Test Problems: A Practical Evaluation of Some Paramodulation Strategies 3 limit is too big), and we iterate a few times to find a limit that results in a well-behaved search. 4 We used this method for the problems in <ref> [11] </ref>, and we simply copy the limits for these experiments. The danger in doing this is that a good limit for one strategy is not necessarily acceptable for another strategy; for example, a paramodulation restriction may require the use of a longer clause. <p> The default symbol order is constants OE high-arity OE OE binary OE unary, and within arity, the lexicographic ascii ordering is used. We override the default order for the same cases and in the same ways as in <ref> [11] </ref>: In two cases (D-BA-2a and SD-2a), the purpose is to unfold defined terms, and in the cases MFL-1, MFL-2, and MFL-3, the purpose is to eliminate intuitively undesirable Skolem functions. For the experiments with AC unification, a different term order was used (see 4.5.2, p. 9). <p> For most of the paramodula-tion strategies we considered, we ran experiments with ratios 1, 4, 8, and 1 (i.e., purely best-first). (We used a value of 4 for almost all of the experiments reported in <ref> [11] </ref>.) 4.5.2 Associative-Commutative (AC) Operations EQP has AC unification (Stickel's AC algorithm [17], with Huet's algorithm [4] for finding basis solutions) and AC matching (our own algorithm). The AC unification algorithm is quite complicated, but our implementation is straightforward. <p> A short description is given for each theorem; see <ref> [11] </ref> for further details. Variables are distinguished from constants by starting with a member of fu; v; w; x; y; zg. If "max-weight" is listed, it was used for all experiments; otherwise no limit was used in any experiment.
Reference: [12] <author> W. McCune and L. Wos. </author> <title> Experiments in automated deduction with condensed detachment. </title> <editor> In D. Kapur, editor, </editor> <booktitle> Proceedings of the 11th International Conference on Automated Deduction, Lecture Notes in Artificial Intelligence, </booktitle> <volume> Vol. 607, </volume> <pages> pages 209-223, </pages> <address> Berlin, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: As a result, he invented demodulation [22] and then paramodulation [16]. Larry's continuous emphasis on experimentation 4 We have attempted to automate the selection of a good limit with Otter's control-memory flag <ref> [12] </ref>. This flag is part of Otter's autonomous mode, which is used when the user has only one chance to prove a theorem, i.e., in automated theorem proving competitions, in demonstrations, for novice users, or when we're too lazy to make any decisions. <p> Our experience with previous experiments tells us that a combination of best-first and breadth-first search, with an emphasis on best-first search, is usually a good choice. The ratio strategy, introduced in <ref> [12] </ref>, allows the user to specify the ratio of the two selection methods.
Reference: [13] <author> R. Niewenhuis and A. Rubio. </author> <title> Basic superposition is complete. </title> <editor> In B. Krieg-Bruckner, editor, </editor> <booktitle> Proceedings of the European Symposium on Programming, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 582, </volume> <pages> pages 371-389, </pages> <address> Berlin, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Basic Paramodulation. This strategy applies to non-AC and to AC experiments. Basic paramodulation <ref> [1, 13] </ref> is a restriction that prevents paramodulation into terms that arise solely by instantiation. One way to view this (and a way to implement it) is to represent clauses as a pair, hskeleton,substitutioni.
Reference: [14] <author> R. Overbeek. </author> <title> A new class of automated theorem-proving algorithms. </title> <type> PhD thesis, </type> <institution> Pennsyl-vania State University, </institution> <year> 1971. </year>
Reference-contexts: Its earliest use in automated deduction appears to have been by Larry Wos et al in 1964 with the unit preference strategy [21]. Perhaps the earliest use of the given clause algorithm was by Ross Overbeek in 1970 in the context of hyperresolution <ref> [14] </ref>. Most automated deduction at Argonne since 1970 has been with the given clause algorithm. 33 Basic Test Problems: A Practical Evaluation of Some Paramodulation Strategies 9 apparently small differences in the order of generated clauses can have a great effect on the character and outcome of the search.
Reference: [15] <author> G. E. Peterson. </author> <title> A technique for establishing completeness results in theorem proving with equality. </title> <journal> SIAM J. Computing, </journal> <volume> 12(1) </volume> <pages> 82-100, </pages> <year> 1983. </year>
Reference-contexts: The (unfortunately named) "basic paramodulation" is one of the strategies we evaluate in this chapter. 6 This inference system has been in use at Argonne in various forms since about 1977. It is similar to G. E. Peterson's system <ref> [15] </ref> and unfailing Knuth-Bendix completion [3]. 33 Basic Test Problems: A Practical Evaluation of Some Paramodulation Strategies 5 negative linked superhyperparamodulation, added in 1991, probably not used by anyone, but something I'd like to keep anyway?" In 1992, we started an efficient implementation of AC unification, and that code has grown,
Reference: [16] <author> G. Robinson and L. Wos. </author> <title> Paramodulation and theorem-proving in first-order theories with equality. </title> <editor> In D. Michie and R. Meltzer, editors, </editor> <booktitle> Machine Intelligence, </booktitle> <volume> Vol. IV, </volume> <pages> pages 135-150. </pages> <publisher> Edinburgh University Press, </publisher> <year> 1969. </year>
Reference-contexts: In the early days of automated theorem proving, Larry Wos recognized the need for special treatment of equality if the field was to be of practical use to mathematicians. As a result, he invented demodulation [22] and then paramodulation <ref> [16] </ref>. Larry's continuous emphasis on experimentation 4 We have attempted to automate the selection of a good limit with Otter's control-memory flag [12].
Reference: [17] <author> M. Stickel. </author> <title> A unification algorithm for associative-commutative functions. </title> <journal> J. ACM, </journal> <volume> 28(3) </volume> <pages> 423-434, </pages> <year> 1981. </year>
Reference-contexts: For most of the paramodula-tion strategies we considered, we ran experiments with ratios 1, 4, 8, and 1 (i.e., purely best-first). (We used a value of 4 for almost all of the experiments reported in [11].) 4.5.2 Associative-Commutative (AC) Operations EQP has AC unification (Stickel's AC algorithm <ref> [17] </ref>, with Huet's algorithm [4] for finding basis solutions) and AC matching (our own algorithm). The AC unification algorithm is quite complicated, but our implementation is straightforward. AC terms are stored as binary terms in canonical form, and they are flattened into arrays during the unification process.
Reference: [18] <author> S. Winker. </author> <title> Robbins algebra: Conditions that make a near-Boolean algebra Boolean. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 6(4) </volume> <pages> 465-489, </pages> <year> 1990. </year>
Reference-contexts: In working on the problem, Steve Winker proved by hand two difficult lemmas <ref> [18] </ref> suggested by Larry Wos.
Reference: [19] <author> L. Wos. </author> <title> Automating the search for elegant proofs. </title> <journal> J. </journal> <note> Automated Reasoning, 1996. To Appear. </note>
Reference-contexts: The smallest time (s) for each problem is set in a box. The proof lengths are listed because there has been recent interest in strategies for finding short proofs <ref> [20, 19] </ref>. The length includes paramodulation inferences and steps to flip equations, but it does not include demodulation steps. Thus, 14 Chapter 4 comparing lengths on the same theorem can be misleading because paramodulation steps in one proof can correspond to demodulation proofs in another. <p> We found substantial variations in proof length, but we have not been able to draw any conclusions about which strategies lead to short proofs. We advise users seeking short proofs to consult Larry Wos's recent work <ref> [20, 19] </ref> and to experiment with a variety of strategies.
Reference: [20] <author> L. Wos. </author> <title> The Automation of Reasoning: An Experimenter's Notebook with Otter Tutorial. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1996. </year>
Reference-contexts: The smallest time (s) for each problem is set in a box. The proof lengths are listed because there has been recent interest in strategies for finding short proofs <ref> [20, 19] </ref>. The length includes paramodulation inferences and steps to flip equations, but it does not include demodulation steps. Thus, 14 Chapter 4 comparing lengths on the same theorem can be misleading because paramodulation steps in one proof can correspond to demodulation proofs in another. <p> We found substantial variations in proof length, but we have not been able to draw any conclusions about which strategies lead to short proofs. We advise users seeking short proofs to consult Larry Wos's recent work <ref> [20, 19] </ref> and to experiment with a variety of strategies.
Reference: [21] <author> L. Wos, D. Carson, and G. Robinson. </author> <title> The unit preference strategy in theorem proving. </title> <booktitle> In AFIPS Proceedings 26, </booktitle> <pages> pages 615-621. </pages> <publisher> Spartan Books, </publisher> <year> 1964. </year>
Reference-contexts: Such 8 The pair algorithm has been used in many Knuth-Bendix completion systems. Its earliest use in automated deduction appears to have been by Larry Wos et al in 1964 with the unit preference strategy <ref> [21] </ref>. Perhaps the earliest use of the given clause algorithm was by Ross Overbeek in 1970 in the context of hyperresolution [14].

References-found: 21

