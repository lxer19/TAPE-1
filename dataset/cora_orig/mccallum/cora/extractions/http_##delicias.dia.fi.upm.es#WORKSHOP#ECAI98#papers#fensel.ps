URL: http://delicias.dia.fi.upm.es/WORKSHOP/ECAI98/papers/fensel.ps
Refering-URL: http://delicias.dia.fi.upm.es/WORKSHOP/ECAI98/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: An Architecture for Reusing Problem-Solving Components Abstract. Developing software by selecting adapting combining integrating existing
Author: Dieter Fensel and V. Richard Benjamins 
Keyword: adapter connectors  
Note: components must be selected. Second, components must be adapted because they neither fit precisely the task that should be performed nor do they necessarily fit well to other selected components. Third, components must be combined and their interaction must be established. Fourth, it may be necessary to decompose complex problems into smaller subtasks for which components can be found. In  methods, some concepts are also applicable to software components in general.  
Address: AIFB, 76128 Karlsruhe, Germany,  Amsterdam, Roetersstraat 15, 1018WB Amsterdam, The Netherlands,  
Affiliation: University of Karlsruhe, Institute  Dept. of Social Science Informatics (SWI), University of  
Email: dieter.fensel@aifb.uni-karlsruhe.de,  richard@swi.psy.uva.nl,  
Web: http://www.aifb.uni-karlsruhe.de/WBS/dfe  http://www.swi.psy.uva.nl/usr/richard/home.html  
Abstract: this case, a general system frame must be established that enables to form an integrated systems out of separate components. In this paper, we present our task structures . Although we discuss our approach in the context of problemsolving 
Abstract-found: 1
Intro-found: 1
Reference: [Arens et al., 1993] <author> Y. Arens, C. Y. Chee, C.-N. Hsu and C. Knoblock: </author> <title> Retrieving and Integrating Data From Multiple Information Sources, </title> <journal> International Journal of Intelligent Cooperative Information Systems </journal>
Reference-contexts: Instead of assuming a global data schema, heterogeneous information and knowledge systems have a mediator [Wiederhold, 1992] that translates user queries into sub-queries on the different information sources and integrates the sub-answers. E.g. in the projects Infomaster [Genesereth et al., 1997], Information Manifold [Levy et al., 1996], SIMS <ref> [Arens et al., 1993] </ref>, and TSIMMIS [Papakonstantinou et al., 1995] mediators are provided to integrate heterogeneous information sources.
Reference: [Benjamins, 1995] <author> V. R. </author> <title> Benjamins: Problem Solving Methods for Diagnosis And Their Role in Knowledge Acquisition, </title> <journal> International Journal of Expert Systems: Research and Application 8(2):93120, </journal> <year> 1995. </year>
Reference: [Benjamins, 1997] <author> R. </author> <title> Benjamins: Problem-Solving Methods in Cyberspace. </title> <booktitle> In Proceedings of the Workshop on Problem-Solving Methods for Knowledge-based Systems (W26) of the Fifteenth International Joint Conference on Artificial Intelligence (IJCAI-97), </booktitle> <address> Nagoya, Japan, </address> <month> August 23-29, </month> <year> 1997. </year>
Reference-contexts: Providing different libraries of problem-solving methods via the net requires a broker that mediates between customers and providers of problem-solving methods (cf. <ref> [Benjamins, 1997] </ref>, [Fensel, 1997a]). The general layered architecture of such a broker is depicted in clients systems . A client is someone that has a complex problem but can provide domain knowledge that describes it and that supports problem-solving. The providers are developer teams of problem-solving methods.
Reference: [Benjamins et al., 1996] <author> R. Benjamins, D. Fensel und R. Straatman: </author> <title> Assumptions of Problem-Solving Methods and Their Role in Knowledge Engineering. </title> <booktitle> In Proceedings of the 12th European Conference on Artificial Intelligence (ECAI-96) , Budapest, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: Most of these information flows can be automated. However, the translation of a domain ontology in an ontology describing problem types has to be done semi-automatically for each new domain. The introduction of assumptions that introduce requirements on domain knowledge or that weaken the task (cf. <ref> [Benjamins et al., 1996] </ref>, [Zaremski & Wing, 1997]) cannot be done without user interaction. The mapping between problem type and problem-solving methods has to be done by the providers of these method libraries. Therefore it is already established before the broker uses these libraries.
Reference: [Benjamins et al., 1998] <author> V. R. Benjamins, Enric Plaza, E. Motta, D. Fensel, R. Studer, B. Wielinga, G. Schreiber, Z. Zdrahal: </author> <title> An Intelligent Brokering Service for Knowledge-Component Reuse on the WorldWideWeb. </title> <booktitle> In Proceedings of the 11th Banff Knowledge Acquisition for Knowledge-Based System Workshop (KAW98) , Banff, </booktitle> <address> Canada, </address> <month> April 18-23, </month> <year> 1998. </year>
Reference-contexts: Finally, conclusions are provided in Section 6. 2 BROKER: COMPONENT SELECTION You must find it before you can reuse it! [Will Tracz] Software and knowledge reuse via networks is becoming an increasingly popular topic. Developing intelligent agents that provide reasoning services based on problem-solving methods (cf. <ref> [Benjamins et al., 1998] </ref>) introduces an interesting application framework and raises interesting research issues. In the following, we will sketch two key issues in designing such reasoning services. First, we discuss the role of ontologies and second we provide the core of a brokering service. <p> Using ontologies to annotate problem-solving methods and problem types is getting increasingly more attention ([Mizoguchi et al., 1995], [Fensel et al., 1997], <ref> [Benjamins et al., 1998] </ref>, [Chandrasekaran & Josephson, 1998]) and establishes reuse of Not all approaches to task structures provide control. Therefore, such approaches miss an important aspect of our needs. problem-solving methods as a special branch of knowledge reuse supported by ontologies (cf. [Fridman Noy & Hafner, 1997]).
Reference: [Benjamins & Fensel, 1998] <author> R. Benjamins and D. Fensel: </author> <title> Community is Knowledge! in (KA) Proceedings of the 11th Banff Knowledge Acquisition for Knowledge-Based System Workshop (KAW98) , Banff, </title> <address> Canada, </address> <month> April 18-23, </month> <year> 1998. </year>
Reference-contexts: The resulting method specification is grounded on a common, shared terminology and its knowledge requirements are conceptualized as ontological commitments [Gruber, 1995]. Currently, ontologies are mainly used to formalize domain or common sense knowledge. However, there are recent proposals and initiatives ([Benjamins et al., 1998], <ref> [Benjamins & Fensel, 1998] </ref>, [Chandrasekaran & Josephson, 1998]) that employ ontologies to formalize problem types and problem-solving knowledge (i.e., methods). For example, the Knowledge Annotation Initiative of the Knowledge Acquisition Community (KA) [Benjamins & Fensel, 1998] aims at building a consensual ontology which can be used to describe the various research <p> However, there are recent proposals and initiatives ([Benjamins et al., 1998], <ref> [Benjamins & Fensel, 1998] </ref>, [Chandrasekaran & Josephson, 1998]) that employ ontologies to formalize problem types and problem-solving knowledge (i.e., methods). For example, the Knowledge Annotation Initiative of the Knowledge Acquisition Community (KA) [Benjamins & Fensel, 1998] aims at building a consensual ontology which can be used to describe the various research groups and their results in knowledge acquisition. Part of this ontology is concerned with problem types (i.e., tasks) and problem-solving methods. <p> The method specifications are grounded on a common, shared terminology and their knowledge requirements are conceptualized as ontological commitments. Therefore, efforts like the Knowledge Annotation Initiative (KA) <ref> [Benjamins & Fensel, 1998] </ref> tackle a major bottleneck of knowledge and problem-solving components reuse.
Reference: [Beys et al., 1996] <author> P. Beys, R. Benjamins, and G. van Heijst: </author> <title> Remedying the Reusability-Usability Trade-off for Problem-solving Methods. </title> <booktitle> In Proceedings of the 10th Banff Knowledge Acquisition for Knowledge-Based System Workshop (KAW96) , Banff, </booktitle> <address> Canada, </address> <month> November 9-14, </month> <year> 1996. </year>
Reference-contexts: Separating the descriptions of search procedures and their refinements provides reusability in two dimensions: search procedures remain available for different tasks and domains, and task- and domain-adaptations remain applicable for different search strategies. In general, different search methods can be applied to the same task, and <ref> [Beys et al., 1996] </ref> conclude that problem-solving methods should be represented in a task-independent way. However, their task-specific (i.e. adapted) versions (for domains and tasks) provide much more support in developing systems and in acquiring the domain knowledge than the task-neutral versions.
Reference: [Breuker & Van de Velde, 1994] <author> J. Breuker and W. Van de Velde (eds.): </author> <title> The CommonKADS Library for Expertise Modeling , IOS Press, </title> <address> Amsterdam, The Netherlands, </address> <year> 1994. </year>
Reference-contexts: Meanwhile, problem-solving methods are used by nearly all frameworks for knowledge engineering. Libraries of problem-solving methods are described in [Benjamins, 5800 words 1995], <ref> [Breuker & Van de Velde, 1994] </ref>, [Chandrasekaran et al., 1992], [Motta, 1997], and [Puppe, 1993]. Some of these libraries provide textbook-style descriptions of reasoning strategies and others provide implemented software components. <p> The adapter concept is therefore essential in preventing combinatorial explosion. Already a textbook style description of problem-solving methods in <ref> [Breuker & Van de Velde, 1994] </ref> provides hundreds of methods. Implementing these methods adds additional level of details and therefore distinctions. Externalizing adaptation is the key factor in component-based development of problem-solving methods. A simple illustration should clarify the point. Assuming search strategies and problem types. <p> In software engineering, each adaptation is viewed as a (nonreusable) application-specific one. Reusable adapters in knowledge engineering are possible because of the amount of work on reusable task problem descriptions (cf. [Chandrasekaran et al., 1992], <ref> [Breuker & Van de Velde, 1994] </ref>). Refining a problem-solving method for a specific type of problems remains reusable for applications that are instances of the same problem or task type. 3.4 Related Approaches on Intelligent Information Integration Adapters manipulate the syntactical structure of the input and output of components.
Reference: [Chandrasekaran et al., 1992] <author> B. Chandrasekaran, T.R. Johnson, and J. W. Smith: </author> <title> Task Structure Analysis for Knowledge Modeling, </title> <journal> Communications of the ACM </journal>
Reference-contexts: Problem-solving methods describe this control knowledge independently from the application domain thus enabling reuse of this knowledge for different domains and applications. It describes which reasoning steps and which types of knowledge are needed to perform a task. Problem-solving methods are used in a number of ways (see e.g. <ref> [Chandrasekaran et al., 1992] </ref>): as a guideline for acquiring problem-solving knowledge from an expert, as a guideline for decomposing complex tasks into subtasks, as a description of the essence of the reasoning process of the expert and knowledge-based system, as a skeletal description of the design model of the knowledge-based system, <p> Meanwhile, problem-solving methods are used by nearly all frameworks for knowledge engineering. Libraries of problem-solving methods are described in [Benjamins, 5800 words 1995], [Breuker & Van de Velde, 1994], <ref> [Chandrasekaran et al., 1992] </ref>, [Motta, 1997], and [Puppe, 1993]. Some of these libraries provide textbook-style descriptions of reasoning strategies and others provide implemented software components. The former support the system development process during conceptual modeling and specification while the latter also provide support during implementation. <p> In software engineering, each adaptation is viewed as a (nonreusable) application-specific one. Reusable adapters in knowledge engineering are possible because of the amount of work on reusable task problem descriptions (cf. <ref> [Chandrasekaran et al., 1992] </ref>, [Breuker & Van de Velde, 1994]). <p> Because we have never encountered any difference in the communication styles of ordinary software components and knowledge-based componentsactually most times the latter assume simple batch mode processingthese connectors of software architectures can immediately be applied to connect knowledge-based components. 5 TASK STRUCTURES: PROBLEM DECOMPOSITION AND SYSTEM INTEGRATION Task structures <ref> [Chandrasekaran et al., 1992] </ref>, Generalized Directive Models (GDM) [Terpstra et al., 1993] and KADS inference structures [Schreiber et al., 1994] are different means to decompose a complex task into more tractable subtasks. Such an approach is necessary when the problem cannot be solved by directly available components.
Reference: [Chandrasekaran & Josephson, 1998] <author> B. Chandrasekaran and J. R. Josephson: </author> <title> The Ontology of Tasks and Methods, </title> <booktitle> In Proceedings of the 11th Banff Knowledge Acquisition for Knowledge-Based System Workshop (KAW98) , Banff, </booktitle> <address> Canada, </address> <month> April 18-23, </month> <year> 1998. </year>
Reference-contexts: The resulting method specification is grounded on a common, shared terminology and its knowledge requirements are conceptualized as ontological commitments [Gruber, 1995]. Currently, ontologies are mainly used to formalize domain or common sense knowledge. However, there are recent proposals and initiatives ([Benjamins et al., 1998], [Benjamins & Fensel, 1998], <ref> [Chandrasekaran & Josephson, 1998] </ref>) that employ ontologies to formalize problem types and problem-solving knowledge (i.e., methods). <p> Using ontologies to annotate problem-solving methods and problem types is getting increasingly more attention ([Mizoguchi et al., 1995], [Fensel et al., 1997], [Benjamins et al., 1998], <ref> [Chandrasekaran & Josephson, 1998] </ref>) and establishes reuse of Not all approaches to task structures provide control. Therefore, such approaches miss an important aspect of our needs. problem-solving methods as a special branch of knowledge reuse supported by ontologies (cf. [Fridman Noy & Hafner, 1997]).
Reference: [Eriksson et al., 1995] <author> H. Eriksson, Y. Shahar, S. W. Tu, A. R. Puerta, and M. A. Musen: </author> <title> Task Modeling with Reusable Problem-Solving Methods, </title> <booktitle> Artificial Intelligence 1995. </booktitle>
Reference-contexts: Interface Ontologist Provider Systems (Problem-solving methods Libraries) Broker negotiation request response query 3.1 Adaptation for Reuse Chronological backtracking defines a very generic problem-solving method (i.e., a search strategy) that does not make any assumptions on the structure of nodes in the search space nor on the elementary transitions between states. <ref> [Eriksson et al., 1995] </ref> describe several adaptations of this generic search procedure for specific tasks. Chronological backtracking is adapted to a method for one-player board games by adding code that refines state transitions and data structures of the method. <p> However, this adaptation of chronological backtracking is not kept separate in <ref> [Eriksson et al., 1995] </ref>. Therefore, the implementation of chronological backtracking is no longer available for defining a problem solver for, e.g., planning problems. Moreover, the adaptation to the boardgame problem cannot be used to adapt, e.g., a local search procedure to board games.
Reference: [Fensel, 1997a] <author> D. Fensel: </author> <title> An Ontology-based Broker: Making Problem-Solving Method Reuse Work. </title> <booktitle> In Proceedings of the Workshop on Problem-Solving Methods for Knowledge-based Systems (W26) of the Fifteenth International Joint Conference on Artificial Intelligence (IJCAI-97), </booktitle> <address> Nagoya, Japan, </address> <month> August 23-29, </month> <year> 1997. </year>
Reference-contexts: Providing different libraries of problem-solving methods via the net requires a broker that mediates between customers and providers of problem-solving methods (cf. [Benjamins, 1997], <ref> [Fensel, 1997a] </ref>). The general layered architecture of such a broker is depicted in clients systems . A client is someone that has a complex problem but can provide domain knowledge that describes it and that supports problem-solving. The providers are developer teams of problem-solving methods.
Reference: [Fensel, 1997b] <author> D. Fensel: </author> <title> The Tower-of-Adapter Method for Developing and Reusing Problem-Solving Methods. </title> <editor> In E. Plaza et al. (eds.), </editor> <title> Knowledge Acquisition, </title> <booktitle> Modeling and Management Lecture Notes in Artificial Intelligence (LNAI), </booktitle> <volume> 1319, </volume> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: design task (cf. [Schreiber & Birmingham, 1996]) can be defined by a design task that is refined to configurational design (where the elements of the artifact are given) and further on to parametric design (where in addition the structure of the artifact, i.e. the selection of the components is given). <ref> [Fensel, 1997b] </ref>, [Fensel & Motta, 1998] discuss the idea of adapter piling to express this refinement process. A core definition of design problems (which is already an adapter for global-optimum problems) is enriched with an adapter for configurational design and another adapter adds commitments for parametric design. <p> Therefore, an adapter also specifies reusable knowledge. It does not only provide some application-specific glue, but specifies refinements relying on a problem type. Adapters could get piled on top of each other to express stepwise refinement of problem-solving methods (cf. <ref> [Fensel, 1997b] </ref>). This refinement may reflect stepwise adaptation to a problem or stepwise refinement of a generic search strategy according to refined requirements on domain knowledge. In software engineering, each adaptation is viewed as a (nonreusable) application-specific one.
Reference: [Fensel & Benjamins, 1996] <author> D. Fensel and R. </author> <title> Benjamins: Assumptions in Model-Based Diagnosis. </title> <booktitle> In Proceedings of the 10th Banff Knowledge Acquisition for Knowledge-Based System Workshop (KAW95) , Banff, </booktitle> <address> Canada, </address> <month> November 9 - 14, </month> <year> 1996. </year>
Reference-contexts: Adapters for problem-solving methods extend this approach in several aspects: Adapters introduce assumptions necessary to close the gap between a problem definition (task) and the competence of a problem-solving methods (cf. <ref> [Fensel & Benjamins, 1996] </ref>, [Fensel & Straatman, to appear]). Adapters express the task-specific refinement s of a problem-solving method (cf. [Fensel & Motta, 1998]). Therefore, an adapter also specifies reusable knowledge. It does not only provide some application-specific glue, but specifies refinements relying on a problem type.
Reference: [Fensel et al., 1997] <author> D. Fensel, E. Motta, S. Decker, and Z. Zdrahal: </author> <title> Using Ontologies For Defining Tasks, Problem-Solving Methods and Their Mappings. </title> <editor> In E. Plaza et al. (eds.), </editor> <title> Knowledge Acquisition, </title> <booktitle> Modeling and Management , Lecture Notes in Artificial Intelligence (LNAI), </booktitle> <volume> 1319, </volume> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: In such initiatives, where consensus is of major importance, choosing appropriate names is essential. Another example is to provide axiomatic descriptions of problem-solving methods to support (semi-) automatic classification and selection of methods. Examples of such efforts include <ref> [Fensel et al., 1997] </ref> where ontologies are used to describe the task parametric design, the problem-solving method propose & revise, and their mapping resulting in a task-specific ontology for the method; and [ten Teije, 1997] who defines a task ontology for diagnostic problems. <p> Using ontologies to annotate problem-solving methods and problem types is getting increasingly more attention ([Mizoguchi et al., 1995], <ref> [Fensel et al., 1997] </ref>, [Benjamins et al., 1998], [Chandrasekaran & Josephson, 1998]) and establishes reuse of Not all approaches to task structures provide control.
Reference: [Fensel & Groenboom, 1997] <author> D. Fensel and R. Groenboom: </author> <title> Specifying Knowledge-Based Systems with Reusable Components. </title> <booktitle> In Proceedings of the 9th International Conference on Software Engineering & Knowledge Engineering (SEKE-97) , Madrid, </booktitle> <address> Spain, </address> <month> June 18-20, </month> <year> 1997. </year>
Reference-contexts: However, their task-specific (i.e. adapted) versions (for domains and tasks) provide much more support in developing systems and in acquiring the domain knowledge than the task-neutral versions. An easy way to overcome this dilemma is to externalize their adaptations through (external) adapters . Adapters were originally proposed in <ref> [Fensel & Groenboom, 1997] </ref> to link problem-solving methods and tasks. However, they can also be used to externalize the specialization of problem-solving methods.
Reference: [Fensel & Motta, 1998] <author> D. Fensel and E. Motta: </author> <title> Dimensions for Method Refinement. </title> <booktitle> In Proceedings of the 11th Banff Knowledge Acquisition for Knowledge-Based System Workshop (KAW98), </booktitle> <address> Banff, Canada, </address> <month> April </month> <year> 1998. </year>
Reference-contexts: (cf. [Schreiber & Birmingham, 1996]) can be defined by a design task that is refined to configurational design (where the elements of the artifact are given) and further on to parametric design (where in addition the structure of the artifact, i.e. the selection of the components is given). [Fensel, 1997b], <ref> [Fensel & Motta, 1998] </ref> discuss the idea of adapter piling to express this refinement process. A core definition of design problems (which is already an adapter for global-optimum problems) is enriched with an adapter for configurational design and another adapter adds commitments for parametric design. <p> Adapters express the task-specific refinement s of a problem-solving method (cf. <ref> [Fensel & Motta, 1998] </ref>). Therefore, an adapter also specifies reusable knowledge. It does not only provide some application-specific glue, but specifies refinements relying on a problem type. Adapters could get piled on top of each other to express stepwise refinement of problem-solving methods (cf. [Fensel, 1997b]).
Reference: [Fensel & Straatman, to appear] <author> D. Fensel and R. Straatman: </author> <title> The Essence of Problem-Solving Methods: Making Assumptions to Gain Efficiency, </title> <note> to appear in International Journal on Human-Computer Studies (IJHCS) </note>
Reference-contexts: Adapters for problem-solving methods extend this approach in several aspects: Adapters introduce assumptions necessary to close the gap between a problem definition (task) and the competence of a problem-solving methods (cf. [Fensel & Benjamins, 1996], <ref> [Fensel & Straatman, to appear] </ref>). Adapters express the task-specific refinement s of a problem-solving method (cf. [Fensel & Motta, 1998]). Therefore, an adapter also specifies reusable knowledge. It does not only provide some application-specific glue, but specifies refinements relying on a problem type.
Reference: [Finin et al., 1994] <author> T. Finin, D. McKay, R. Fritzson, and R. McEntire: </author> <title> KQML: An Information and Knowledge Exchange Protocol. </title> <editor> In Kazuhiro Fuchi and Toshio Yokoi (eds.), </editor> <title> Knowledge Building and Knowledge Sharing , Ohmsha and IOS Press, </title> <year> 1994. </year>
Reference: [Fridman Noy & Hafner, 1997] <author> N.Fridman Noy and C.D. Hafner: </author> <title> The State of the Art in Ontology Design, </title> <journal> AI Magazine </journal>
Reference-contexts: In the following, we will sketch two key issues in designing such reasoning services. First, we discuss the role of ontologies and second we provide the core of a brokering service. Ontologies have been proposed to enhance knowledge sharing and reuse (cf. <ref> [Fridman Noy & Hafner, 1997] </ref>). An ontology provides a conceptualization, which can be shared by multiple reasoning components communicating during a problem solving process. Using ontological engineering for describing problem-solving methods provides two important benefits with respect to reuse. <p> Therefore, such approaches miss an important aspect of our needs. problem-solving methods as a special branch of knowledge reuse supported by ontologies (cf. <ref> [Fridman Noy & Hafner, 1997] </ref>). The method specifications are grounded on a common, shared terminology and their knowledge requirements are conceptualized as ontological commitments. Therefore, efforts like the Knowledge Annotation Initiative (KA) [Benjamins & Fensel, 1998] tackle a major bottleneck of knowledge and problem-solving components reuse.
Reference: [Gamma et al., 1995] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides: </author> <title> Design Patterns , Addison Wesley Pub., </title> <year> 1995. </year>
Reference-contexts: The ontology mapping information (cf. Figure 2) between the ontologist and the adapter is exchanged for this purpose. 3.3 Related Approaches in Software Engineering Adapters are of general importance for component-based software development. <ref> [Gamma et al., 1995] </ref> introduces an adapter pattern in his textbook on design patterns for object-oriented system development. An adapter enables reusable descriptions of objects and allows to combine objects that differ in their syntactical input and output descriptions. <p> These architectures are not specific for a domain like domain architectures in software engineering but are specific for a class of problems and a specific decomposition paradigm that assumes specific types of knowledge for efficiently executing its substeps. Adapters are also present in component-based software engineering (cf. <ref> [Gamma et al., 1995] </ref>). However, the notion of reusable adapters and the use of several adapters to achieve stepwise refinement of components is rather non-standard. In knowledge engineering, problem-solving methods and problem types (i.e., tasks) are well-studied. This enables the reuse of adaptations of reasoning components and of problem-specific refinements.
Reference: [Garlan and D. Perry, 1995] <author> D. Garlan and D. </author> <title> Perry (eds.), </title> <journal> Special Issue on Software Architecture, IEEE Transactions on Software Engineering </journal>
Reference-contexts: Such communication mismatches require additional means that properly implement the communication between components. In software architectures, connectors are introduced to fulfill this purpose (cf. <ref> [Garlan and D. Perry, 1995] </ref>, [Shaw & Garlan, 1996]). Connectors provide intermediate stores for data and organize these data in a way that fulfills the assumptions of the sending and receiving components. A variety of connectors and their according architectural styles is given in [Shaw & Garlan, 1996].
Reference: [Genesereth et al., 1997] <author> M. R. Genesereth, A. M. Keller, and O. M. Duschka: </author> <title> Infomaster Information Integration System. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data , Tucson, </booktitle> <address> AZ, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: Instead of assuming a global data schema, heterogeneous information and knowledge systems have a mediator [Wiederhold, 1992] that translates user queries into sub-queries on the different information sources and integrates the sub-answers. E.g. in the projects Infomaster <ref> [Genesereth et al., 1997] </ref>, Information Manifold [Levy et al., 1996], SIMS [Arens et al., 1993], and TSIMMIS [Papakonstantinou et al., 1995] mediators are provided to integrate heterogeneous information sources.
Reference: [Gennari et al., 1996] <author> J. H. Gennari, A. R. Stein, and M. A. Musen: </author> <title> Reuse for Knowledge-Based Systems and CORBA Components. </title> <booktitle> In Proceedings of the 10th Banff Knowledge Acquisition for Knowledge-Based System Workshop (KAW96) , Banff, </booktitle> <address> Canada, </address> <month> November 9-14, </month> <year> 1996. </year> <note> [Gennari et al., 1998]J. </note> <author> H. Gennari, W. Grosso, and M. Musen: </author> <title> A Method-Description Language: An Initial Ontology with Examples. </title> <booktitle> In Proceedings of the 11th Banff Knowledge Acquisition for Knowledge-Based System Workshop (KAW98), </booktitle> <address> Banff, Canada, </address> <month> April </month> <year> 1998. </year>
Reference-contexts: In a network of several provider of problem-solving components such an integrated system frame may refer to components of different providers. The integrated system only exists virtually in that case. Executing one of its subtasks may imply a call for reasoning service via the network. <ref> [Gennari et al., 1996] </ref> describe the use of the CORBA protocol for this purpose. It allows the distributed execution of reasoning tasks where the substeps may be performed at different servers. 6 CONCLUSIONS In this paper we presented a principled approach to reusing problem-solving components.
Reference: [Graham & Bailor, 1996] <author> R. P. Graham, Jr. and P. D. Bailor: </author> <title> Synthesis of Local Search Algorithms by Algebraic Means. </title> <booktitle> In Proceedings of the 11th Knowledge-Based Software Engineering Conference (KBSE-96) </booktitle>
Reference-contexts: A local search algorithm has four main parameters that determine its search character <ref> [Graham & Bailor, 1996] </ref>: the selection of start nodes, the generation of successors nodes, the selection of better nodes, and the definition of the preference relation. Different values for these parameters distinguish between, e.g., best-first search, hill-climbing and beam search.
Reference: [Gruber, 1995] <author> T. R. Gruber: </author> <title> Toward Principles for the Design of Ontologies Used for Knowledge Sharing, </title> <journal> International Journal of Human-Computer Studies (IJHCS) </journal>
Reference-contexts: Using ontological engineering for describing problem-solving methods provides two important benefits with respect to reuse. The resulting method specification is grounded on a common, shared terminology and its knowledge requirements are conceptualized as ontological commitments <ref> [Gruber, 1995] </ref>. Currently, ontologies are mainly used to formalize domain or common sense knowledge. However, there are recent proposals and initiatives ([Benjamins et al., 1998], [Benjamins & Fensel, 1998], [Chandrasekaran & Josephson, 1998]) that employ ontologies to formalize problem types and problem-solving knowledge (i.e., methods).
Reference: [Levy et al., 1996] <author> A. Y. Levy, A. Rajaraman, and J. J. Ordille: </author> <title> Query-Answering Algorithms for Information Agents. </title> <booktitle> In Proceedings of the AAAI-96 , Portland, </booktitle> <address> Oregon, </address> <year> 1996. </year>
Reference-contexts: Instead of assuming a global data schema, heterogeneous information and knowledge systems have a mediator [Wiederhold, 1992] that translates user queries into sub-queries on the different information sources and integrates the sub-answers. E.g. in the projects Infomaster [Genesereth et al., 1997], Information Manifold <ref> [Levy et al., 1996] </ref>, SIMS [Arens et al., 1993], and TSIMMIS [Papakonstantinou et al., 1995] mediators are provided to integrate heterogeneous information sources.
Reference: [Mizoguchi et al., 1995] <author> R. Mizoguchi, J. Vanwelkenhuysen, and M. Ikeda: </author> <title> Task Ontologies for reuse of Problem Solving Knowledge. </title> <editor> In N. J. I. Mars (ed.), </editor> <title> Towards Very Large Knowledge Bases, </title> <publisher> IOS Press, </publisher> <year> 1995. </year>
Reference: [Motta, 1997] <author> E. Motta: </author> <title> Reusable Components for Knowledge Modeling , Ph.D. </title> <type> Thesis, </type> <institution> Knowledge Media Institute, The Open University, UK, </institution> <year> 1997. </year>
Reference-contexts: Meanwhile, problem-solving methods are used by nearly all frameworks for knowledge engineering. Libraries of problem-solving methods are described in [Benjamins, 5800 words 1995], [Breuker & Van de Velde, 1994], [Chandrasekaran et al., 1992], <ref> [Motta, 1997] </ref>, and [Puppe, 1993]. Some of these libraries provide textbook-style descriptions of reasoning strategies and others provide implemented software components. The former support the system development process during conceptual modeling and specification while the latter also provide support during implementation.
Reference: [Papakonstantinou et al., 1995] <author> Y. Papakonstantinou, H. Garcia Molina, and J. Widom: </author> <title> Object Exchange Across Heterogeneous Information Sources. </title> <booktitle> In Proceedings of the IEEE International Conference on Data Engineering (ICDE) , Taipei, </booktitle> <address> Taiwan, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: E.g. in the projects Infomaster [Genesereth et al., 1997], Information Manifold [Levy et al., 1996], SIMS [Arens et al., 1993], and TSIMMIS <ref> [Papakonstantinou et al., 1995] </ref> mediators are provided to integrate heterogeneous information sources. Therefore, adapters that modify components may be combined with mediators to enable different components to access the same knowledge source in different ways or to provide homogeneous access to distributed and heterogeneous knowledge sources for a component.
Reference: [Puppe, 1993] <author> F. Puppe: </author> <title> Systematic Introduction to Expert Systems: Knowledge Representation and Problem-Solving Methods , Springer-Verlag, </title> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: Meanwhile, problem-solving methods are used by nearly all frameworks for knowledge engineering. Libraries of problem-solving methods are described in [Benjamins, 5800 words 1995], [Breuker & Van de Velde, 1994], [Chandrasekaran et al., 1992], [Motta, 1997], and <ref> [Puppe, 1993] </ref>. Some of these libraries provide textbook-style descriptions of reasoning strategies and others provide implemented software components. The former support the system development process during conceptual modeling and specification while the latter also provide support during implementation.
Reference: [Schreiber & Birmingham, 1996] <author> A. Th. Schreiber and B. </author> <title> Birmingham (eds.): </title> <journal> Special Issue on Sisyphus, The International Journal of Human-Computer Studies (IJHCS) </journal>
Reference-contexts: Keeping the more precise definitions of these parameters externally of the core definition of the method, enables to provide a large variety of search methods with a small number of components. The definition of a task may be less or more specific. A parametric design task (cf. <ref> [Schreiber & Birmingham, 1996] </ref>) can be defined by a design task that is refined to configurational design (where the elements of the artifact are given) and further on to parametric design (where in addition the structure of the artifact, i.e. the selection of the components is given). [Fensel, 1997b], [Fensel &
Reference: [Schreiber et al., 1994] <author> A. TH. Schreiber, B. Wielinga, J. M. Akkermans, W. Van De Velde, and R. de Hoog: CommonKADS. </author> <title> A Comprehensive Methodology for KBS Development, </title> <journal> IEEE Expert 9(6):2837, </journal> <note> 1994. [Schumann & Fischer, 1998]J. </note> <author> Schumann and B. Fischer: NORA/HAMMER: </author> <title> Making Deduction Based Software Component Retrieval Practical. </title> <booktitle> Proceedings of the 12th IEEE International Conference on Automated Software Engineering (ASEC-97) , Incline Village, </booktitle> <address> Nevada, </address> <month> November </month> <year> 1997. </year>
Reference-contexts: and knowledge-based componentsactually most times the latter assume simple batch mode processingthese connectors of software architectures can immediately be applied to connect knowledge-based components. 5 TASK STRUCTURES: PROBLEM DECOMPOSITION AND SYSTEM INTEGRATION Task structures [Chandrasekaran et al., 1992], Generalized Directive Models (GDM) [Terpstra et al., 1993] and KADS inference structures <ref> [Schreiber et al., 1994] </ref> are different means to decompose a complex task into more tractable subtasks. Such an approach is necessary when the problem cannot be solved by directly available components. In this case the task of the broker becomes more complex.
Reference: [Shaw & Garlan, 1996] <author> M. Shaw and D. Garlan: </author> <title> Software Architectures. Perspectives on an Emerging Discipline , Prentice-Hall, </title> <year> 1996. </year>
Reference-contexts: Such communication mismatches require additional means that properly implement the communication between components. In software architectures, connectors are introduced to fulfill this purpose (cf. [Garlan and D. Perry, 1995], <ref> [Shaw & Garlan, 1996] </ref>). Connectors provide intermediate stores for data and organize these data in a way that fulfills the assumptions of the sending and receiving components. A variety of connectors and their according architectural styles is given in [Shaw & Garlan, 1996]. <p> Perry, 1995], <ref> [Shaw & Garlan, 1996] </ref>). Connectors provide intermediate stores for data and organize these data in a way that fulfills the assumptions of the sending and receiving components. A variety of connectors and their according architectural styles is given in [Shaw & Garlan, 1996].
Reference: [ten Teije, 1997] <author> A. ten Teije: </author> <title> Automated Configuration of Problem Solving Methods in Diagnosis Ph.D. </title> <type> thesis, </type> <institution> University of Amsterdam, </institution> <address> the Netherlands, </address> <year> 1997 </year>
Reference-contexts: Examples of such efforts include [Fensel et al., 1997] where ontologies are used to describe the task parametric design, the problem-solving method propose & revise, and their mapping resulting in a task-specific ontology for the method; and <ref> [ten Teije, 1997] </ref> who defines a task ontology for diagnostic problems. Providing different libraries of problem-solving methods via the net requires a broker that mediates between customers and providers of problem-solving methods (cf. [Benjamins, 1997], [Fensel, 1997a]).
Reference: [Terpstra et al., 1993] <author> P. Terpstra, G. van Heijst, B. Wielinga, and N. Shadbolt: </author> <title> Knowledge Acquisition Support Through Generalized Directive Models. </title> <editor> In M. David et al. (eds.): </editor> <booktitle> Second Generation Expert Systems , Springer-Verlag, </booktitle> <year> 1993. </year>
Reference-contexts: in the communication styles of ordinary software components and knowledge-based componentsactually most times the latter assume simple batch mode processingthese connectors of software architectures can immediately be applied to connect knowledge-based components. 5 TASK STRUCTURES: PROBLEM DECOMPOSITION AND SYSTEM INTEGRATION Task structures [Chandrasekaran et al., 1992], Generalized Directive Models (GDM) <ref> [Terpstra et al., 1993] </ref> and KADS inference structures [Schreiber et al., 1994] are different means to decompose a complex task into more tractable subtasks. Such an approach is necessary when the problem cannot be solved by directly available components. In this case the task of the broker becomes more complex.
Reference: [Wiederhold, 1992] <author> G Wiederhold: </author> <title> Mediators in the Architecture of Future Information Systems, </title> <journal> IEEE Computer [Zaremski & Wing, </journal> <note> 1997]A. </note> <author> M. Zaremski and J. M. Wing: </author> <title> Specification Matching of Software Components, </title> <journal> ACM Transactions on Software Engineering and Methodology (TOSEM) 6(4):333 369, </journal> <year> 1997. </year>
Reference-contexts: Note, that input of a component may be case data or more complex domain knowledge. In the latter case, adapters fulfill a similar purpose as mediators for heterogeneous information and knowledge systems. Instead of assuming a global data schema, heterogeneous information and knowledge systems have a mediator <ref> [Wiederhold, 1992] </ref> that translates user queries into sub-queries on the different information sources and integrates the sub-answers.
References-found: 37

