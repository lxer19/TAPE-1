URL: http://www.cs.tamu.edu/research/robotics/Amato/Papers/icra96.ps.gz
Refering-URL: http://www.cs.tamu.edu/seminars/airobotics/fall97.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: amato@cs.tamu.edu yanwu@cs.tamu.edu  
Title: A Randomized Roadmap Method for Path and Manipulation Planning  
Author: NANCY M. AMATO YAN WU 
Address: College Station, TX 77843-3112  
Affiliation: Department of Computer Science, Texas A&M University  
Abstract: This paper presents a new randomized roadmap method for motion planning for many dof robots that can be used to obtain high quality roadmaps even when C-space is crowded. The main novelty in our approach is that roadmap candidate points are chosen on C-obstacle surfaces. As a consequence, the roadmap is likely to contain difficult paths, such as those traversing long, narrow passages in C-space. The approach can be used for both collision-free path planning and for manipulation planning of contact tasks. Experimental results with a planar articulated 6 dof robot show that, after preprocessing, difficult path planning operations can often be carried out in less than a second. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Barraquand, B. Langlois, and J.-C. Latombe. </author> <title> Numerical potential field techniques for robot path planning. </title> <journal> IEEE Trans. Sys., Man, Cybern., </journal> <volume> 22(2) </volume> <pages> 224-241, </pages> <year> 1992. </year>
Reference-contexts: Although this method has been shown to work well for many dof robots, there exist simple situations in which it performs poorly (i.e., does not find a solution) [3, 8]. Researchers have proposed various potential functions (e.g., <ref> [1] </ref>) and other techniques, fl This research supported in part by NSF Grant IRI-9304734. such as learning [6], for escaping local minima. In general, potential field methods can be quite effective when the configuration space (C-space) is relatively uncluttered.
Reference: [2] <author> J. Barraquand and J.-C. Latombe. </author> <title> Robot motion planning: A distributed representation approach. </title> <journal> Internat. J. Robot. Res., </journal> <volume> 10(6) </volume> <pages> 628-649, </pages> <year> 1991. </year>
Reference-contexts: Several promising heuristics for path planning have been proposed, of which we mention a few here. The Randomized Path Planner (RPP) of Barraquand and Latombe <ref> [2] </ref> is a potential field method that uses random walks to attempt to escape local minima. Although this method has been shown to work well for many dof robots, there exist simple situations in which it performs poorly (i.e., does not find a solution) [3, 8].
Reference: [3] <author> D. J. Challou, M. Gini, and V. Kumar. </author> <title> Parallel search algorithms for robot motion planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom., </booktitle> <volume> volume 2, </volume> <pages> pages 46-51, </pages> <year> 1993. </year>
Reference-contexts: Although this method has been shown to work well for many dof robots, there exist simple situations in which it performs poorly (i.e., does not find a solution) <ref> [3, 8] </ref>. Researchers have proposed various potential functions (e.g., [1]) and other techniques, fl This research supported in part by NSF Grant IRI-9304734. such as learning [6], for escaping local minima. In general, potential field methods can be quite effective when the configuration space (C-space) is relatively uncluttered.
Reference: [4] <author> H. Chang and T. Y. Li. </author> <title> Assembly maintainability study with motion planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom., </booktitle> <pages> pages 1012-1019, </pages> <year> 1995. </year>
Reference-contexts: Other methods for favoring certain paths have been proposed that could potentially be integrated into the roadmap (e.g., <ref> [4] </ref>). 4 Implementation Details We implemented a path planner for a fixed-base segmented manipulator in a two-dimensional workspace. Generally, whenever there was a choice between implementation options, we chose the simplest method, which was often also the least efficient.
Reference: [5] <author> B. R. Donald. </author> <title> A search algorithm for motion planning with six degrees of freedom. </title> <journal> Artif. Intell., </journal> <volume> 31(3) </volume> <pages> 295-353, </pages> <year> 1987. </year>
Reference-contexts: Planning can be done very fast in many situations. However, long, narrow passages between C-obstacles might be difficult to find. In [11], it is discussed how this approach can be used in `single shot' mode, i.e., without constructing the entire roadmap first during preprocessing. Earlier, Donald <ref> [5] </ref> proposed the related idea of using free points drawn from a coarse grid in C-space to specify promising subgoals for motion planning. 1.1 Our Results In this paper, we present a new randomized roadmap method for motion planning for many dof robots.
Reference: [6] <author> B. Faverjon and P. Tournassoud. </author> <title> A practical approach to motion-planning for manipulators with many degrees of freedom. </title> <editor> In H. Miura and S. Arimoto, editors, </editor> <booktitle> Robotics Research 5. </booktitle> <publisher> The MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Researchers have proposed various potential functions (e.g., [1]) and other techniques, fl This research supported in part by NSF Grant IRI-9304734. such as learning <ref> [6] </ref>, for escaping local minima. In general, potential field methods can be quite effective when the configuration space (C-space) is relatively uncluttered. However, they have not been as successful for planning in crowded C-space.
Reference: [7] <author> Y. Hwang and N. Ahuja. </author> <title> Gross motion planning a survey. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(3) </volume> <pages> 219-291, </pages> <year> 1992. </year>
Reference-contexts: Although many different motion planning methods have been proposed, most are not used in practice since they are computationally infeasible except for some restricted cases, e.g., when the robot has very few degrees of freedom (dof) <ref> [7, 9] </ref>. In particular, it has become apparent that with existing technology the enormous complexity of the problem can only be overcome through the use of probabilistic or heuristic methods (as opposed to complete methods which are guaranteed to find a solution or determine that none exists).
Reference: [8] <author> L. Kavraki and J. C. Latombe. </author> <title> Randomized preprocessing of configuration space for fast path planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom., </booktitle> <pages> pages 2138-2145, </pages> <year> 1994. </year>
Reference-contexts: Although this method has been shown to work well for many dof robots, there exist simple situations in which it performs poorly (i.e., does not find a solution) <ref> [3, 8] </ref>. Researchers have proposed various potential functions (e.g., [1]) and other techniques, fl This research supported in part by NSF Grant IRI-9304734. such as learning [6], for escaping local minima. In general, potential field methods can be quite effective when the configuration space (C-space) is relatively uncluttered. <p> In general, potential field methods can be quite effective when the configuration space (C-space) is relatively uncluttered. However, they have not been as successful for planning in crowded C-space. Independently, Kavraki and Latombe <ref> [8] </ref> and Overmars and Svestka [10, 11], proposed similar path planning methods which use randomization during preprocessing to construct a graph in C-space (often called a roadmap [9]) whose vertices correspond to collision-free configurations of the robot, and in which two vertices are connected by an edge if a path between <p> The previous approaches most closely related to ours are the path planning methods of Kavraki and Latombe <ref> [8] </ref> and Overmars and Svestka [10, 11] mentioned above. In fact, in [11] the authors describe a technique they call geometric node adding in which roadmap nodes are generated from robot configurations near obstacle boundaries, which is very similar in concept to the idea of generating nodes on C-obstacle boundaries. <p> Thus, a contribution of this paper is to provide methods for generating points on C-obstacle surfaces for general many dof robots. The randomized methods we propose for finding these roadmap candidate nodes are more costly than in the techniques <ref> [8, 11] </ref> where candidate points are randomly selected according to a uniform distribution in C-space. However, our experimental results show that this additional computation in the node generation phase is negligible in comparison to the total preprocessing time, which in all the methods is dominated by the roadmap connection phase. <p> However, our experimental results show that this additional computation in the node generation phase is negligible in comparison to the total preprocessing time, which in all the methods is dominated by the roadmap connection phase. Finally, in some sense, one can view our work as extending the strategy of <ref> [8, 11] </ref> to contact tasks. We describe how the roadmap is constructed in Section 2, and how it is used for planning in Section 3. Implementation details and experimental results are presented in Sections 4 and 5, respectively. <p> In the following, k is a parameter, and distances are measured according the chosen metric in C-space. Many different connection strategies could be used in path planning applications. For example, the method used in <ref> [8] </ref> is to try to connect each node v 2 V to its k nearest neighbors in V . A strategy that could improve the chance of finding connections across wide C-space corridors is as follows. <p> The following approach, proposed in <ref> [8] </ref>, is well suited for our roadmap. First, the simple planner is used to try to connect the start and goal nodes to the roadmap; connections are attempted between x i and the k closest roadmap nodes. <p> The descriptions below are for a planar articulated robot with J joints; in our experiments J 6. C-Space distance metric. We used a simple Euclidean distance metric in C-space (also adopted in <ref> [8] </ref>). Let j i (x) denote the position of the ith joint when the robot is in configuration x, 1 i J . <p> For the two-dimensional workspace, better results might have been obtained if we had used C-space bitmaps for each link of the robot as was done in <ref> [8] </ref>. For a three dimensional workspace or complex objects it is not clear what method is best. Interconnection strategy. In the interconnection phase, we would like to connect all the roadmap candidate nodes into a single connected component.
Reference: [9] <author> J.-C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: Although many different motion planning methods have been proposed, most are not used in practice since they are computationally infeasible except for some restricted cases, e.g., when the robot has very few degrees of freedom (dof) <ref> [7, 9] </ref>. In particular, it has become apparent that with existing technology the enormous complexity of the problem can only be overcome through the use of probabilistic or heuristic methods (as opposed to complete methods which are guaranteed to find a solution or determine that none exists). <p> However, they have not been as successful for planning in crowded C-space. Independently, Kavraki and Latombe [8] and Overmars and Svestka [10, 11], proposed similar path planning methods which use randomization during preprocessing to construct a graph in C-space (often called a roadmap <ref> [9] </ref>) whose vertices correspond to collision-free configurations of the robot, and in which two vertices are connected by an edge if a path between the two corresponding configurations can be found by a simple, local, deterministic planner.
Reference: [10] <author> M. Overmars. </author> <title> A random approach to path planning. </title> <type> Technical Report RUU-CS-92-32, </type> <institution> Computer Science, Utrecht University, </institution> <address> The Netherlands, </address> <year> 1992. </year>
Reference-contexts: In general, potential field methods can be quite effective when the configuration space (C-space) is relatively uncluttered. However, they have not been as successful for planning in crowded C-space. Independently, Kavraki and Latombe [8] and Overmars and Svestka <ref> [10, 11] </ref>, proposed similar path planning methods which use randomization during preprocessing to construct a graph in C-space (often called a roadmap [9]) whose vertices correspond to collision-free configurations of the robot, and in which two vertices are connected by an edge if a path between the two corresponding configurations can <p> The previous approaches most closely related to ours are the path planning methods of Kavraki and Latombe [8] and Overmars and Svestka <ref> [10, 11] </ref> mentioned above. In fact, in [11] the authors describe a technique they call geometric node adding in which roadmap nodes are generated from robot configurations near obstacle boundaries, which is very similar in concept to the idea of generating nodes on C-obstacle boundaries. <p> Another interesting problem is to modify the method for 'single-shot' planning, i.e., without first constructing the roadmap in preprocessing, as is done in <ref> [10, 11] </ref>. Acknowledgement We would like to thank the robotics group at Texas A&M, especially Jeff Trinkle, Peter Stiller, and David Stewart, for their suggestions regarding this work. We are also grateful to Lydia Kavraki and Shane Chang for their comments.
Reference: [11] <author> M. Overmars and P. Svestka. </author> <title> A probabilistic learning approach to motion planning. </title> <booktitle> In Proc. Workshop on Algorithmic Foundations of Robotics, </booktitle> <pages> pages 19-37, </pages> <year> 1994. </year>
Reference-contexts: In general, potential field methods can be quite effective when the configuration space (C-space) is relatively uncluttered. However, they have not been as successful for planning in crowded C-space. Independently, Kavraki and Latombe [8] and Overmars and Svestka <ref> [10, 11] </ref>, proposed similar path planning methods which use randomization during preprocessing to construct a graph in C-space (often called a roadmap [9]) whose vertices correspond to collision-free configurations of the robot, and in which two vertices are connected by an edge if a path between the two corresponding configurations can <p> Planning involves connecting the initial and goal configurations to the roadmap, and then finding a path in the roadmap between these two connection points. Planning can be done very fast in many situations. However, long, narrow passages between C-obstacles might be difficult to find. In <ref> [11] </ref>, it is discussed how this approach can be used in `single shot' mode, i.e., without constructing the entire roadmap first during preprocessing. <p> The previous approaches most closely related to ours are the path planning methods of Kavraki and Latombe [8] and Overmars and Svestka <ref> [10, 11] </ref> mentioned above. In fact, in [11] the authors describe a technique they call geometric node adding in which roadmap nodes are generated from robot configurations near obstacle boundaries, which is very similar in concept to the idea of generating nodes on C-obstacle boundaries. <p> The previous approaches most closely related to ours are the path planning methods of Kavraki and Latombe [8] and Overmars and Svestka [10, 11] mentioned above. In fact, in <ref> [11] </ref> the authors describe a technique they call geometric node adding in which roadmap nodes are generated from robot configurations near obstacle boundaries, which is very similar in concept to the idea of generating nodes on C-obstacle boundaries. <p> Thus, a contribution of this paper is to provide methods for generating points on C-obstacle surfaces for general many dof robots. The randomized methods we propose for finding these roadmap candidate nodes are more costly than in the techniques <ref> [8, 11] </ref> where candidate points are randomly selected according to a uniform distribution in C-space. However, our experimental results show that this additional computation in the node generation phase is negligible in comparison to the total preprocessing time, which in all the methods is dominated by the roadmap connection phase. <p> However, our experimental results show that this additional computation in the node generation phase is negligible in comparison to the total preprocessing time, which in all the methods is dominated by the roadmap connection phase. Finally, in some sense, one can view our work as extending the strategy of <ref> [8, 11] </ref> to contact tasks. We describe how the roadmap is constructed in Section 2, and how it is used for planning in Section 3. Implementation details and experimental results are presented in Sections 4 and 5, respectively. <p> Another interesting problem is to modify the method for 'single-shot' planning, i.e., without first constructing the roadmap in preprocessing, as is done in <ref> [10, 11] </ref>. Acknowledgement We would like to thank the robotics group at Texas A&M, especially Jeff Trinkle, Peter Stiller, and David Stewart, for their suggestions regarding this work. We are also grateful to Lydia Kavraki and Shane Chang for their comments.
References-found: 11

