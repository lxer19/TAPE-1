URL: ftp://rtcl.eecs.umich.edu/outgoing/ppsim/papers/ppsim_paper.ps.Z
Refering-URL: http://www.eecs.umich.edu/RTCL/harts/
Root-URL: http://www.cs.umich.edu
Email: fjrexford, jdolter, wuchang, kgshing@eecs.umich.edu  
Title: PP-MESS-SIM: A Simulator for Evaluating Multicomputer Interconnection Networks  
Author: Jennifer Rexford, James Dolter, Wu-chang Feng, and Kang G. Shin 
Address: Ann Arbor, MI 48109-2122  
Affiliation: Real-Time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: This paper presents pp-mess-sim, an object-oriented discrete-event simulation environment for evaluating multicomputer networks. The simulator provides a toolbox of various network topologies, communication workloads, routing-switching algorithms, and router models. These router models can vary from high-level architectures to low-level specification of actual devices. By decoupling individual parts of the code, pp-mess-sim enables independent code development and creates a flexible and extensible environment for evaluating different aspects of network design. Sample simulation experiments capitalize on this flexibility to compare routing-switching schemes under various application workloads. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. Athas and C. Seitz, </author> <title> "Multicomputers: Message-passing concurrent computers," </title> <booktitle> IEEE Computer, </booktitle> <pages> pp. 9-24, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Message-passing multicomputers have emerged as a cost-effective platform for exploiting parallelism in applications. Multicomputers consist of processors joined by an interconnection network, where fast message exchange enables efficient cooperation between processing elements <ref> [1, 2] </ref>. Router hardware connects an individual processing node to the interconnection fabric and manages traffic flowing through the node en route to other destinations.
Reference: [2] <author> X. Zhang, </author> <title> "System effects of interprocessor communication latency in multicomputers," </title> <booktitle> IEEE Micro, </booktitle> <pages> pp. </pages> <address> 12-15,52-55, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Message-passing multicomputers have emerged as a cost-effective platform for exploiting parallelism in applications. Multicomputers consist of processors joined by an interconnection network, where fast message exchange enables efficient cooperation between processing elements <ref> [1, 2] </ref>. Router hardware connects an individual processing node to the interconnection fabric and manages traffic flowing through the node en route to other destinations. <p> If the outgoing link is busy, virtual cut-through switching buffers the packet, whereas a blocked wormhole packet stalls pending access to the link. While first-generation multicomputers employed packet switching, most contemporary routers utilize cut-through switching for lower latency and reduced buffer space requirements <ref> [2] </ref>. The routing algorithm determines which nodes a packet traverses to reach its destination. Oblivious routing generates a single, deterministic outgoing link for an incoming packet, whereas adaptive schemes can incorporate prevailing network conditions into the routing decision.
Reference: [3] <author> A. M. Law and M. G. McComas, </author> <title> "Simulation software for communications networks: The state of the art," </title> <journal> IEEE Communications Magazine, </journal> <pages> pp. 44-50, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: Instead, an extensible simulation environment can provide an extensible framework for evaluating multi-computer networks. While many simulation toolkits can flexibly model local and wide area networks <ref> [3] </ref>, few simulators sufficiently capture the characteristics of multicomputer networks. In contrast to LANs/WANs, multicomputers typically employ regular network topologies that facilitate efficient, flexible routing schemes. Tighter coupling between nodes enables multicomputer designers to consider more diverse switching schemes and flow-control policies.
Reference: [4] <author> J.-M. Hsu and P. Banerjee, </author> <title> "Performance measurement and trace driven simulation of parallel CAD and numeric applications on a hypercube multicomputer," </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> vol. 3, </volume> <pages> pp. 451-464, </pages> <month> July </month> <year> 1992. </year> <title> 9 (a) Poisson arrival process (b) Bursty arrival process </title>
Reference-contexts: This experiment considers bursty traffic, in contrast to the traditional Poisso-nian packet arrival process in Figure 3 (a). The source nodes generate bursty traffic using a two-stage normal distribution of packet interarrivals <ref> [4] </ref>. Packet interarrivals stem from two independent normal distributions, with different means; sources randomly select 80% of interarrivals from the distribution with the small mean. In Figure 3 (b), the applied traffic load (x-axis) changes by varying the large mean, keeping the small mean fixed at 10 cycles.
Reference: [5] <author> R. Cypher, A. Ho, S. Konstantinidou, and P. Messina, </author> <title> "Architectural requirements of parallel scientific applications with explicit communication," </title> <booktitle> in Proc. Int'l Symposium on Computer Architecture, </booktitle> <pages> pp. 2-13, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: In Figure 1, time-constrained tasks generate periodic, fixed-length packets, while default best-effort tasks create packets according to a Poisson process. Using the discrete distribution of packet lengths, 70% of the best-effort packets are short, while the remaining are long; such bimodal distributions are common in multicomputer applications <ref> [5] </ref>. Application constructs also impact the selection of a target destination node for each packet. Line 28 of Figure 1 assigns a hop-uniform target distribution to the time-constrained task.
Reference: [6] <author> M. G. Norman and P. Thanisch, </author> <title> "Models of machines and computation for mapping in multi-computers," </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 25, </volume> <pages> pp. 263-302, </pages> <month> September </month> <year> 1993. </year>
Reference: [7] <author> J. Dolter, </author> <title> A Programmable Routing Controller Supporting Multi-mode Routing and Switching in Distributed Real-Time Systems. </title> <type> PhD thesis, </type> <institution> University of Michigan, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: Tighter coupling between nodes enables multicomputer designers to consider more diverse switching schemes and flow-control policies. In addition, mapping concurrent applications across multiple nodes generates unique communication patterns and requirements in multicomputer networks [4-6]. This paper presents pp-mess-sim (point-to-point message simulator), a flexible simulation environment for evaluating multicomputer routers <ref> [7] </ref>. Implemented in C++, pp-mess-sim is an object-oriented discrete-event simulator that provides a toolbox of primitives for various network topologies, commu nication workloads, routing algorithms, and router models. Router models may vary from high-level architectures to low-level specification of actual devices, allowing incremental investigation of implementation approaches and design enhancements.
Reference: [8] <author> W. J. Dally, </author> <title> "Performance analysis of k-ary n-cube interconnection networks," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. 39, </volume> <pages> pp. 775-785, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: By defining the connections between processing nodes, the topology determines the number of communication links at each node and how far a packet must travel to reach its destination. This impacts both the complexity of network wiring and the achievable communication bandwidth in the system <ref> [8, 9] </ref>. Many mul-ticomputers employ the k-ary n-cube family of topologies, with k nodes along each of n dimensions [8]. Currently pp-mess-sim supports k-ary n-cube topologies, square meshes, and wrapped hexagonal meshes. <p> This impacts both the complexity of network wiring and the achievable communication bandwidth in the system [8, 9]. Many mul-ticomputers employ the k-ary n-cube family of topologies, with k nodes along each of n dimensions <ref> [8] </ref>. Currently pp-mess-sim supports k-ary n-cube topologies, square meshes, and wrapped hexagonal meshes. Logical topologies can be built on top of the physical network by providing multiple virtual channels on each physical link. These logical resources may be employed to prevent communication deadlocks [10] and improve network throughput [11].
Reference: [9] <author> A. Agarwal, </author> <title> "Limits on interconnection network performance," </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> vol. 2, </volume> <pages> pp. 398-412, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: By defining the connections between processing nodes, the topology determines the number of communication links at each node and how far a packet must travel to reach its destination. This impacts both the complexity of network wiring and the achievable communication bandwidth in the system <ref> [8, 9] </ref>. Many mul-ticomputers employ the k-ary n-cube family of topologies, with k nodes along each of n dimensions [8]. Currently pp-mess-sim supports k-ary n-cube topologies, square meshes, and wrapped hexagonal meshes.
Reference: [10] <author> W. J. Dally and C. L. Seitz, </author> <title> "Deadlock-free message routing in multiprocessor interconnection networks," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. C-36, no. 5, </volume> <pages> pp. 547-553, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: Currently pp-mess-sim supports k-ary n-cube topologies, square meshes, and wrapped hexagonal meshes. Logical topologies can be built on top of the physical network by providing multiple virtual channels on each physical link. These logical resources may be employed to prevent communication deadlocks <ref> [10] </ref> and improve network throughput [11]. Additionally, they can be used to separate traffic with different characteristics or performance requirements. Although virtual channels improve router flexibility, they also affect network speed and implementation complexity [12].
Reference: [11] <author> W. Dally, </author> <title> "Virtual-channel flow control," </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> vol. 3, </volume> <pages> pp. 194-205, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Currently pp-mess-sim supports k-ary n-cube topologies, square meshes, and wrapped hexagonal meshes. Logical topologies can be built on top of the physical network by providing multiple virtual channels on each physical link. These logical resources may be employed to prevent communication deadlocks [10] and improve network throughput <ref> [11] </ref>. Additionally, they can be used to separate traffic with different characteristics or performance requirements. Although virtual channels improve router flexibility, they also affect network speed and implementation complexity [12]. <p> The dimension-order routing algorithm uses the extra virtual channel to reduce contention between packets traveling on the same link <ref> [11] </ref>. Contrary to intuition, static routing consistently outperforms adaptive routing in Figure 3 (a). In an 8 fi 8 square mesh, the bit-complement permutation requires source node (c; d) to communicate with node (7 c; 7 d).
Reference: [12] <author> A. A. Chien, </author> <title> "A cost and speed model for k-ary n-cube wormhole routers," </title> <booktitle> in Proc. Hot Interconnects, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: These logical resources may be employed to prevent communication deadlocks [10] and improve network throughput [11]. Additionally, they can be used to separate traffic with different characteristics or performance requirements. Although virtual channels improve router flexibility, they also affect network speed and implementation complexity <ref> [12] </ref>. Since these trade-offs greatly influence communication performance, pp-mess-sim can vary the number of virtual channels in the network. 2.2 Routing and Switching Switching and routing schemes have significant influence on router performance and implementation complexity.
Reference: [13] <author> P. Kermani and L. Kleinrock, </author> <title> "Virtual cut-through: A new computer communication switching technique," </title> <journal> Computer Networks, </journal> <volume> vol. 3, </volume> <pages> pp. 267-286, </pages> <month> September </month> <year> 1979. </year>
Reference-contexts: The switching scheme impacts performance by determining the link and buffer resources a packet consumes. Traditional packet switching requires incoming packets to buffer completely before transmission to a subsequent node can begin. In contrast, cut-through switching schemes, such as virtual cut-through <ref> [13] </ref> and wormhole [14], try to forward incoming packets directly to an idle output link. If the outgoing link is busy, virtual cut-through switching buffers the packet, whereas a blocked wormhole packet stalls pending access to the link.
Reference: [14] <author> W. J. Dally and C. L. Seitz, </author> <title> "The torus routing chip," </title> <journal> Journal of Distributed Computing, </journal> <volume> vol. 1, no. 3, </volume> <pages> pp. 187-196, </pages> <year> 1986. </year>
Reference-contexts: The switching scheme impacts performance by determining the link and buffer resources a packet consumes. Traditional packet switching requires incoming packets to buffer completely before transmission to a subsequent node can begin. In contrast, cut-through switching schemes, such as virtual cut-through [13] and wormhole <ref> [14] </ref>, try to forward incoming packets directly to an idle output link. If the outgoing link is busy, virtual cut-through switching buffers the packet, whereas a blocked wormhole packet stalls pending access to the link.
Reference: [15] <author> M. G. Hluchyj and M. J. Karol, </author> <title> "Queueing in high-performance packet switching," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 6, </volume> <pages> pp. 1587-1597, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: A particular router design may queue packets at the input links, the output links, and the interface to the local node. Depending on the structure and placement of these buffers, packets may incur significant queueing delay <ref> [15] </ref>. When several queues vie for a resource, the router invokes an arbitration policy, such as round-robin or a priority-based scheme, to select the winner.
Reference: [16] <author> J. Rexford and K. G. Shin, </author> <title> "Support for multiple classes of traffic in multicomputer routers," </title> <booktitle> in Proc. Parallel Computer Routing and Communication Workshop, </booktitle> <pages> pp. 116-130, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: The sample experiment in Figure 1 involves an 8-ary 2-cube (8 fi 8 torus) network that carries a mixture of time-constrained and best-effort traffic, with different traffic characteristics and performance requirements <ref> [16] </ref>.
Reference: [17] <author> J. Duato, </author> <title> "A new theory of deadlock-free adaptive routing in wormhole networks," </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <pages> pp. 1320-1331, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Existing schemes include both oblivious and adaptive shortest-path routing for wormhole, virtual cut-through, and packet switching, with several selection functions. The user can also specify various nonmin-imal routing algorithms for virtual cut-through and wormhole switching. The simulator includes several deadlock-free wormhole routing algorithms, with varying degrees of adaptivity <ref> [17] </ref>. In addition to traditional routing and switching schemes, sequences of routing-switching instructions can generate hybrid algorithms that incorporate both virtual cut-through 5 and wormhole switching, depending on the underly-ing router conditions. <p> These pp-mess-sim experiments evaluate wormhole switch ing under both dimension-order and adaptive routing; virtual cut-through simulations showed the same qualitative trends. The adaptive algorithm is a fully-adaptive minimal routing scheme that requires two virtual channels per link to prevent network deadlocks <ref> [17] </ref>; in these experiments, both routing algorithms employ a pair of virtual channels to enable fair performance comparisons. The dimension-order routing algorithm uses the extra virtual channel to reduce contention between packets traveling on the same link [11].
Reference: [18] <author> J. Dolter, S. Daniel, A. Mehra, J. Rexford, W. Feng, and K. Shin, "SPIDER: </author> <title> Flexible and efficient communication support for point-to-point distributed systems," </title> <booktitle> in Proc. Int'l Conf. on Distributed Computing Systems, </booktitle> <pages> pp. 574-580, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: This extensible framework allows additional Node modules to be developed without changing any of the other modules. In addition, this support enables individual Node models to focus completely on internal policies for queueing, arbitration, and flow control. 6.1 Node Modules The simulator includes a cycle-level model of SPIDER <ref> [18] </ref>, a network router for point-to-point distributed systems. SPIDER coordinates bidirectional communication with up to four neighboring nodes, with three virtual channels on each physical link.
References-found: 18

