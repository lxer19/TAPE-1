URL: ftp://ftp.cs.toronto.edu/pub/eric/CoopIS95.ps.gz
Refering-URL: http://www.cs.toronto.edu/~eric/
Root-URL: 
Email: feric,jmg@cs.toronto.edu  fpdu,edug@info.fundp.ac.be  
Title: From Organization Models to System Requirements A Cooperating Agents Approach  
Author: Eric Yu Philippe Du Bois Eric Dubois and John Mylopoulos 
Address: Toronto, Ontario, M5S 1A4 (Canada)  21 rue Grandgagnage, B-5000 Namur (Belgium)  
Affiliation: Dept. of Computer Science, University of Toronto  Computer Science Dept., University of Namur  
Abstract: Increasingly, information systems development occurs in the context of existing systems and established organizational processes. Viewing organizational and system components as cooperating agents offers a way of understanding their inter-relationships and how these relationships would or should be altered as new systems are introduced. In this paper, we show how two agent-oriented frameworks can be used in combination during requirements engineering for cooperative information systems. The ALBERT language is used to specify requirements, in terms of states and actions, and information and perception. The i fl framework is used to understand and redesign organizational processes, in terms of strategic relationships and rationales. A small banking example is used to illustrate how the requirements process may iterate between the two levels of modelling and analysis towards a requirements specification. 
Abstract-found: 1
Intro-found: 1
Reference: [Blyth et al., 1993] <author> A.J.C. Blyth, J. Chudge, J.E. Dobson, and M.R. Strens. ORDIT: </author> <title> a new methodology to assist in the process of eliciting and modelling organisational requirements. </title> <editor> In Simon Kaplan, editor, </editor> <booktitle> Proc. of the conference on organizational computing systems - COOCS'93, </booktitle> <pages> pages 216-227, </pages> <address> Milpitas CA, </address> <month> November 1-4, </month> <year> 1993. </year> <note> ACM Press. </note>
Reference-contexts: The modelling of agents is specifi-cational and prescriptive. Since agents are assumed to conform to prescribed behaviour, one cannot easily analyze strategic relationships and implications. A number of organization modelling frameworks have been proposed in the organization information systems area, e.g., <ref> [Blyth et al., 1993] </ref>. Dependency concepts have also been used for modelling coordination in organizations, e.g., [Malone et al., 1994]. The i framework differs from these in that it highlights the strategic dimension of agent relationships, and de-emphasizes the operational aspects.
Reference: [Bond et al., 1988] <editor> A.H. Bond and L. Gasser. </editor> <booktitle> Readings in Distributed Artificial Intelligence. </booktitle> <publisher> Morgan Kaufman Publishers, </publisher> <year> 1988. </year>
Reference-contexts: The i framework differs from these in that it highlights the strategic dimension of agent relationships, and de-emphasizes the operational aspects. Similarly, although multi-agent cooperation has received considerable attention in distributed artificial intelligence (DAI) (e.g., <ref> [Bond et al., 1988] </ref>), the emphasis has been on the division of computational work (e.g., the reduction of goals to primitive actions for execution by robots or software programs), and much less on the strategic interests of organizational, social actors [Gasser, 1991].
Reference: [Borgida et al., 1985] <author> Alexander Borgida, Sol Greenspan, and John Mylopoulos. </author> <title> Knowledge representation as the basis for requirements specifications. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 82-91, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: In the past decade, requirements modelling frameworks have been developed to assist in the understanding and specification of systems and their environments (e.g., <ref> [Bubenko, 1980; Borgida et al., 1985; Dubois et al., 1988] </ref>). More recently, goal-oriented frameworks for requirements engineering involving multiple agents have been developed (e.g., [Feather, 1987; Dubois, 1989; Fickas et al., 1992; Dardenne et al., 1993; Bubenko, 1983; Yu, 1995a]).
Reference: [Bo hm et al., 1993] <author> Klemens Bo hm and Amilcar Sernadas. </author> <title> Real-time object specification logic. </title> <type> Technical Report 7/93, </type> <institution> Departamento de Matematica, Instituto Superior Tecnico, </institution> <address> Lisbon (Portugal), </address> <month> March </month> <year> 1993. </year>
Reference: [Bubenko, 1980] <author> J.A. Bubenko. </author> <title> Information modeling in the context of system development. </title> <editor> In S.H. Lavington, editor, </editor> <booktitle> Information Processing 80, </booktitle> <pages> pages 395-411. </pages> <publisher> North-Holland, </publisher> <year> 1980. </year>
Reference-contexts: In the past decade, requirements modelling frameworks have been developed to assist in the understanding and specification of systems and their environments (e.g., <ref> [Bubenko, 1980; Borgida et al., 1985; Dubois et al., 1988] </ref>). More recently, goal-oriented frameworks for requirements engineering involving multiple agents have been developed (e.g., [Feather, 1987; Dubois, 1989; Fickas et al., 1992; Dardenne et al., 1993; Bubenko, 1983; Yu, 1995a]).
Reference: [Bubenko, 1983] <author> Janis A. Bubenko. </author> <title> On concepts and strate-gies for requirements and information analysis. </title> <booktitle> In Information modeling, </booktitle> <pages> pages 125-169. </pages> <address> Chartwell-Bratt, </address> <year> 1983. </year>
Reference: [Bubenko, 1993] <author> Janis A. Bubenko. </author> <title> Extending the scope of information modeling. </title> <booktitle> In Proc. of the 4th International Workshop on the Deductive Approach to Information Systems and Databases, </booktitle> <pages> pages 73-98, </pages> <address> Lloret-Costa Brava (Spain), </address> <month> September 20-22, </month> <year> 1993. </year>
Reference-contexts: Finer-grained modelling concepts such as states, actions, obligations, information, perception and real-time constraints are appropriate. Our approach may be compared to other frameworks for requirements engineering which take a multi-agent or organizational perspective. The framework for enterprise modelling of <ref> [Bubenko, 1993] </ref> is similar in spirit in several ways. It emphasizes the need to model organizations and their actors, their motivations and rationales [Nellborn et al., 1994]. It also uses multiple, inter-linked models. The informal (but structured) organizational models are linked to more formal specification models.
Reference: [Chung, 1993] <author> Lawrence Chung. </author> <title> Representing and using Non-functional Requirements: a Process-Oriented Approach. </title> <type> PhD thesis, </type> <institution> Computer Science Department, University of Toronto, Toronto (Canada), </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Softgoals may be correlated with each other. For example, quick service is considered to have a positive contribution to convenience. In general the softgoals form a graph, and their mutual influences can be evaluated by using a qualitative reasoning scheme (e.g., <ref> [Chung, 1993] </ref>). These relationships provide a representation of the rationales because they explain why the dependencies are arranged in a given configuration. When there are alternatives, the softgoals also serve as evaluation criteria.
Reference: [Cohen et al., 1990] <author> P.R. Cohen and H.J. Levesque. </author> <title> Intention is choice with commitment. </title> <journal> Artificial Intelligence, </journal> <volume> 42(3), </volume> <year> 1990. </year>
Reference: [Dubois et al., 1986] <author> Eric Dubois, Jacques Hagelstein, Eu-gene Lahou, Frank Ponsaert, Andre Rifaut, and Fiona Williams. </author> <title> The ERAE model: a case study. </title> <type> Manuscript M136, </type> <institution> Philips Research Laboratory, </institution> <address> Brussels (Belgium), </address> <month> January </month> <year> 1986. </year>
Reference-contexts: They are constrained in terms of obligations, information and perception. From an ALBERT specification, one can determine whether certain desired properties are satisfied. Agents cooperate by giving each other information about their own state of knowledge. ALBERT offers a higher-level view than earlier requirements languages (such as ERAE <ref> [Dubois et al., 1986] </ref> or RML [Greenspan, 1984]) through the use of agent-oriented concepts such as knowledge and obligation. The i fl framework 2 [Yu, 1995a] is used to obtain an understanding about organizational relationships and the rationales behind them. Agents have wants and abilities.
Reference: [Dubois et al., 1988] <author> Eric Dubois, Jacques Hagelstein, and Andre Rifaut. </author> <title> Formal requirements engineering with ERAE. </title> <journal> Philips Journal of Research, </journal> 43(3/4):393-414, 1988. 
Reference-contexts: In the past decade, requirements modelling frameworks have been developed to assist in the understanding and specification of systems and their environments (e.g., <ref> [Bubenko, 1980; Borgida et al., 1985; Dubois et al., 1988] </ref>). More recently, goal-oriented frameworks for requirements engineering involving multiple agents have been developed (e.g., [Feather, 1987; Dubois, 1989; Fickas et al., 1992; Dardenne et al., 1993; Bubenko, 1983; Yu, 1995a]).
Reference: [Dubois, 1989] <author> Eric Dubois. </author> <title> A logic of action for supporting goal-oriented elaborations of requirements. </title> <booktitle> In Proc. of the 5th International Workshop on Software Specification and Design - IWSSD'89, </booktitle> <pages> pages 160-168, </pages> <address> Pittsburgh PA, May 19-20, 1989. </address> <publisher> IEEE, CS Press. </publisher>
Reference: [Dubois et al., 1991] <author> Eric Dubois, Jacques Hagelstein, and Andre Rifaut. </author> <title> A formal language for the requirements engineering of computer systems. </title> <editor> In Andre Thayse, editor, </editor> <title> From natural language processing to logic for expert systems, chapter 6. </title> <publisher> Wiley, </publisher> <year> 1991. </year>
Reference-contexts: Finally at the specification level, the ALBERT language is very much in the line of recent formal specification languages designed for the purpose of modelling functional requirements (e.g., MAL [Finkelstein et al., 1987], and ERAE <ref> [Dubois et al., 1991] </ref>, DAL [Ryan et al., 1991], LCM [Feenstra et al., 1993] and TROLL [Saake et al., 1993]. The major difference is the application scope of ALBERT related to the modelling of complex real-time cooperative (distributed) systems.
Reference: [Dubois et al., 1993a] <author> Eric Dubois, Philippe Du Bois, and Michael Petit. </author> <title> O-O requirements analysis: an agent perspective. </title> <editor> In O. Nierstrasz, editor, </editor> <booktitle> Proc. of the 7th Eu-ropean Conference on Object-Oriented Programming - ECOOP'93, </booktitle> <pages> pages 458-481, </pages> <address> Kaiserslautern (Germany), July 26-30, 1993. </address> <publisher> LNCS 707, Springer-Verlag. </publisher>
Reference: [Dubois et al., 1993b] <author> E. Dubois, Ph. Du Bois, and J.- M. Zeippen. </author> <booktitle> Object-oriented formal development of cooperative information systems. In Proc. of the ECOOP'93 Workshop on the Application of Object-Oriented Formal Methods, </booktitle> <address> Kaiserslautern (Germany), </address> <month> July 26-30, </month> <year> 1993. </year>
Reference: [Dubois et al., 1994a] <author> Eric Dubois, Philippe Du Bois, and Frederic Dubru. </author> <title> Animating formal requirements specifications of cooperative information systems. </title> <booktitle> In Proc. of the Second International Conference on Cooperative Information Systems - CoopIS-94, </booktitle> <pages> pages 101-112, </pages> <address> Toronto (Canada), </address> <month> May 17-20, </month> <year> 1994. </year> <institution> University of Toronto Press inc. </institution>
Reference: [Dubois et al., 1994b] <author> Eric Dubois, Philippe Du Bois, Frederic Dubru, and Michael Petit. </author> <title> Agent-oriented requirements engineering: A case study using the albert language. </title> <editor> In A. Verbraeck, H.G. Sol, and P.W.G. Bots, editors, </editor> <booktitle> Proc. of the Fourth International Working Conference on Dynamic Modelling and Information System - DYNMOD-IV, </booktitle> <address> Noordwijkerhoud (The Netherlands), </address> <month> September 28-30, </month> <year> 1994. </year> <institution> Delft University Press. </institution>
Reference-contexts: The language has a formal semantics expressed in terms of RT-OSL [Bohm et al., 1993] (a specific real-time temporal logic enriched with the concept of object), and supports the encoding of requirements in both declarative and operational styles <ref> [Dubois et al., 1994b] </ref>. In order to enhance readability, a specification is organized into units called agents. Logical statements are grouped around agents in order to define the set of admissible behaviours (or lives) they may experience. <p> Both have two arguments: the first 3 The usefulness of such patterns was also previously identified in the RML language [Greenspan et al., 1986] built on top of first order logic 4 For a detailed presentation of ALBERT, see <ref> [Dubois et al., 1994b] </ref>. of type ACC and the second of type INT. In addition, the graphical notation also expresses visibility relationships linking agents to the outside.
Reference: [Dardenne et al., 1993] <author> A. Dardenne, A. van Lamsweerde, and S. Fickas. </author> <title> Goal-directed requirements acquisition. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 20 </volume> <pages> 3-50, </pages> <year> 1993. </year>
Reference-contexts: A model of strategic rationales can assist in the search for alternative configurations of organizational relationships that can better address the strategic interests of agents, for example, by introducing information systems. i fl offers a more open and strategic conception of agents than other goal-oriented requirements frameworks (e.g., <ref> [Dardenne et al., 1993] </ref>). We use the i fl models to support the generation and evaluation of organizational alternatives, and the AL-BERT language to produce a requirements specification document for system development. <p> It also uses multiple, inter-linked models. The informal (but structured) organizational models are linked to more formal specification models. Our approach using ALBERT and i fl comparable, but adopts a set of intentional concepts explicitly, with more precise semantics. This will allow more computer-based support. In the KAOS framework <ref> [Dardenne et al., 1993] </ref>, overall goals are explicitly modelled (following the concept of Composite Systems Design [Feather, 1987; Feather, 1994; Fickas et al., 1992]). Goals are reduced through means-ends reasoning to arrive at responsibilities for agents. The modelling of agents is specifi-cational and prescriptive.
Reference: [Feather, 1987] <author> Martin S. Feather. </author> <title> Language support for the specification and development of composite systems. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 9(2) </volume> <pages> 198-234, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: Our approach using ALBERT and i fl comparable, but adopts a set of intentional concepts explicitly, with more precise semantics. This will allow more computer-based support. In the KAOS framework [Dardenne et al., 1993], overall goals are explicitly modelled (following the concept of Composite Systems Design <ref> [Feather, 1987; Feather, 1994; Fickas et al., 1992] </ref>). Goals are reduced through means-ends reasoning to arrive at responsibilities for agents. The modelling of agents is specifi-cational and prescriptive. Since agents are assumed to conform to prescribed behaviour, one cannot easily analyze strategic relationships and implications.
Reference: [Feather, 1994] <author> Martin S. Feather. </author> <title> Composite system design. </title> <booktitle> In Proc. of the ICSE-16 Workshop on Research Issues in the Intersection Between Software Engineering and Artificial Intelligence, </booktitle> <address> Sorrento (Italy), </address> <month> May 16-20, </month> <year> 1994. </year>
Reference-contexts: Our approach using ALBERT and i fl comparable, but adopts a set of intentional concepts explicitly, with more precise semantics. This will allow more computer-based support. In the KAOS framework [Dardenne et al., 1993], overall goals are explicitly modelled (following the concept of Composite Systems Design <ref> [Feather, 1987; Feather, 1994; Fickas et al., 1992] </ref>). Goals are reduced through means-ends reasoning to arrive at responsibilities for agents. The modelling of agents is specifi-cational and prescriptive. Since agents are assumed to conform to prescribed behaviour, one cannot easily analyze strategic relationships and implications.
Reference: [Fickas et al., 1992] <author> Stephen Fickas and Rob Helm. </author> <title> Knowledge representation and reasoning in the design of composite systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-18(6):470-482, </volume> <month> June </month> <year> 1992. </year>
Reference-contexts: Our approach using ALBERT and i fl comparable, but adopts a set of intentional concepts explicitly, with more precise semantics. This will allow more computer-based support. In the KAOS framework [Dardenne et al., 1993], overall goals are explicitly modelled (following the concept of Composite Systems Design <ref> [Feather, 1987; Feather, 1994; Fickas et al., 1992] </ref>). Goals are reduced through means-ends reasoning to arrive at responsibilities for agents. The modelling of agents is specifi-cational and prescriptive. Since agents are assumed to conform to prescribed behaviour, one cannot easily analyze strategic relationships and implications.
Reference: [Finkelstein et al., 1987] <author> Anthony Finkelstein and Colin Potts. </author> <title> Building formal specifications using structured common sense. </title> <booktitle> In Proc. of the 4th International Workshop on Software Specification and Design - IWSSD'87, </booktitle> <pages> pages 108-113, </pages> <address> Monterey CA, April 3-4, 1987. </address> <publisher> IEEE, CS Press. </publisher>
Reference-contexts: Finally at the specification level, the ALBERT language is very much in the line of recent formal specification languages designed for the purpose of modelling functional requirements (e.g., MAL <ref> [Finkelstein et al., 1987] </ref>, and ERAE [Dubois et al., 1991], DAL [Ryan et al., 1991], LCM [Feenstra et al., 1993] and TROLL [Saake et al., 1993]. The major difference is the application scope of ALBERT related to the modelling of complex real-time cooperative (distributed) systems.
Reference: [Feenstra et al., 1993] <author> Remco B. Feenstra and Roel J. Wieringa. </author> <title> LCM 3.0: A language for describing conceptual models syntax definition. </title> <type> Technical Report IR-344, </type> <institution> Faculteit der Wiskunde en Informatica, Vrije Universiteit Amsterdam, </institution> <address> Amsterdam (The Netherlands), </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Finally at the specification level, the ALBERT language is very much in the line of recent formal specification languages designed for the purpose of modelling functional requirements (e.g., MAL [Finkelstein et al., 1987], and ERAE [Dubois et al., 1991], DAL [Ryan et al., 1991], LCM <ref> [Feenstra et al., 1993] </ref> and TROLL [Saake et al., 1993]. The major difference is the application scope of ALBERT related to the modelling of complex real-time cooperative (distributed) systems. In this paper, we have concentrated on showing how i and ALBERT can work together.
Reference: [Gasser, 1991] <author> L. Gasser. </author> <title> Social conceptions of knowledge and action: DAI foundations and open systems semantics. </title> <journal> Artificial Intelligence, </journal> <volume> 47 </volume> <pages> 107-138, </pages> <year> 1991. </year>
Reference-contexts: has received considerable attention in distributed artificial intelligence (DAI) (e.g., [Bond et al., 1988]), the emphasis has been on the division of computational work (e.g., the reduction of goals to primitive actions for execution by robots or software programs), and much less on the strategic interests of organizational, social actors <ref> [Gasser, 1991] </ref>. The DAI community has also developed communication and coordination mechanisms and protocols (such as KQML and KIF) which can serve as alternatives to more conventional implementation techniques for meeting the organizational requirements and specifications at the levels described in this paper.
Reference: [Greenspan et al., 1986] <author> Sol J. Greenspan, Alexander Borgida, and John Mylopoulos. </author> <title> A requirements modeling language. </title> <journal> Information Systems, </journal> <volume> 11(1) </volume> <pages> 9-23, </pages> <year> 1986. </year>
Reference-contexts: The index of the Balances table is of type ACC (ount) and the elements of type INT (eger). The AccHandler may perform two kinds of actions: Credit and Debit. Both have two arguments: the first 3 The usefulness of such patterns was also previously identified in the RML language <ref> [Greenspan et al., 1986] </ref> built on top of first order logic 4 For a detailed presentation of ALBERT, see [Dubois et al., 1994b]. of type ACC and the second of type INT. In addition, the graphical notation also expresses visibility relationships linking agents to the outside.
Reference: [Greenspan, 1984] <author> Sol J. Greenspan. </author> <title> Requirements modeling: a knowledge representation approach to software requirements definition. </title> <type> Technical Report CSRG 155, </type> <institution> Computer Science Department, University of Toronto, Toronto (Canada), </institution> <month> March </month> <year> 1984. </year>
Reference-contexts: From an ALBERT specification, one can determine whether certain desired properties are satisfied. Agents cooperate by giving each other information about their own state of knowledge. ALBERT offers a higher-level view than earlier requirements languages (such as ERAE [Dubois et al., 1986] or RML <ref> [Greenspan, 1984] </ref>) through the use of agent-oriented concepts such as knowledge and obligation. The i fl framework 2 [Yu, 1995a] is used to obtain an understanding about organizational relationships and the rationales behind them. Agents have wants and abilities.
Reference: [Jarke et al., 1992] <author> M. Jarke, J. Mylopoulos, J.W. Schmidt, and Y. Vassiliou. DAIDA: </author> <title> An environment for evolving information systems. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(1) </volume> <pages> 1-50, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: This approach may be seen as an extension of the approach adopted in the DAIDA project <ref> [Jarke et al., 1992] </ref>, where three different sets of concepts were used for representing knowledge about the requirements, design, and implementation phases during system development, and which are linked and managed by a common global knowledge base management system.
Reference: [Jarke, 1994] <author> M. Jarke and K. Pohl. </author> <title> Requirements engineering in the year 2001: On (virtually) managing a changing reality. </title> <booktitle> In Proc. of the Workshopon System Requirements: Analysis, Management, and Exploitation, </booktitle> <address> Shlo Dagstuhl, Saarland (Germany), </address> <month> October 4-7, </month> <year> 1994. </year>
Reference-contexts: On the other hand, new systems are becoming more interconnected, and increasingly interwoven into complex organizational processes. The challenge in information system development will shift towards the understanding of organizational environments and needs, and how to make decisions involving technical systems to address those needs and concerns <ref> [Jarke, 1994] </ref>. To this end, we need a clearer understanding of what it means for systems to be cooperative. Systems that are merely interconnected, but which may have been designed by different groups, at different times, to serve the purposes and interests of different parties, are not necessarily cooperative.
Reference: [Mylopoulos et al., 1990] <author> J. Mylopoulos, A. Borgida, M. Jarke, and M. Koubarakis. </author> <title> Telos: A language for representing knowledge about information systems. </title> <journal> ACM Transansaction on Information Systems, </journal> <volume> 8(4) </volume> <pages> 325-362, </pages> <month> October </month> <year> 1990. </year>
Reference: [Malone et al., 1994] <author> Thomas W. Malone and Kevin Crow--ston. </author> <title> The interdisciplinary study of coordination. </title> <journal> Computing Surveys, </journal> <volume> 26 </volume> <pages> 87-119, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: Since agents are assumed to conform to prescribed behaviour, one cannot easily analyze strategic relationships and implications. A number of organization modelling frameworks have been proposed in the organization information systems area, e.g., [Blyth et al., 1993]. Dependency concepts have also been used for modelling coordination in organizations, e.g., <ref> [Malone et al., 1994] </ref>. The i framework differs from these in that it highlights the strategic dimension of agent relationships, and de-emphasizes the operational aspects.
Reference: [Nellborn et al., 1994] <author> C. Nellborn and P. Holm. </author> <title> Capturing information systems requirements through enterprise and speech act modeling. </title> <editor> In Gerard Wijers, Sjaak Brinkkem-per, and Tony Wasserman, editors, </editor> <booktitle> Proc. of the 6th conference on advanced information systems engineering - CAiSE'94, </booktitle> <pages> pages 172-185, </pages> <address> Utrecht (The Netherlands), June 6-10, 1994. </address> <publisher> LNCS 811, Springer-Verlag. </publisher>
Reference-contexts: Our approach may be compared to other frameworks for requirements engineering which take a multi-agent or organizational perspective. The framework for enterprise modelling of [Bubenko, 1993] is similar in spirit in several ways. It emphasizes the need to model organizations and their actors, their motivations and rationales <ref> [Nellborn et al., 1994] </ref>. It also uses multiple, inter-linked models. The informal (but structured) organizational models are linked to more formal specification models. Our approach using ALBERT and i fl comparable, but adopts a set of intentional concepts explicitly, with more precise semantics. This will allow more computer-based support.
Reference: [Ryan et al., 1991] <author> Mark D. Ryan, Jose Fiadeiro, and Tom Maibaum. </author> <title> Sharing actions and attributes in modal action logic. </title> <editor> In T. Ito and A. Meyer, editors, </editor> <booktitle> Theoretical Aspects of Computer Software. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Finally at the specification level, the ALBERT language is very much in the line of recent formal specification languages designed for the purpose of modelling functional requirements (e.g., MAL [Finkelstein et al., 1987], and ERAE [Dubois et al., 1991], DAL <ref> [Ryan et al., 1991] </ref>, LCM [Feenstra et al., 1993] and TROLL [Saake et al., 1993]. The major difference is the application scope of ALBERT related to the modelling of complex real-time cooperative (distributed) systems. In this paper, we have concentrated on showing how i and ALBERT can work together.
Reference: [Saake et al., 1993] <author> Gunter Saake, Ralf Jungclaus, and Thorsten Hartmann. </author> <title> Application modelling in heteroge-nous environments using an object specification language. </title> <booktitle> In Proc. of the International Conference on Intelligent and Cooperative Systems - ICICIS'93. </booktitle> <publisher> IEEE CS Press, </publisher> <year> 1993. </year>
Reference-contexts: at the specification level, the ALBERT language is very much in the line of recent formal specification languages designed for the purpose of modelling functional requirements (e.g., MAL [Finkelstein et al., 1987], and ERAE [Dubois et al., 1991], DAL [Ryan et al., 1991], LCM [Feenstra et al., 1993] and TROLL <ref> [Saake et al., 1993] </ref>. The major difference is the application scope of ALBERT related to the modelling of complex real-time cooperative (distributed) systems. In this paper, we have concentrated on showing how i and ALBERT can work together.
Reference: [Yu et al., 1994a] <author> Eric S. K. Yu and John Mylopoulos. </author> <title> From E-R to A-R - modelling strategic actor relationships for business process reengineering. </title> <booktitle> In Proc. of the 13th International Conference on the Entity-Relationship Approach - ER'94, </booktitle> <address> Manchester (UK), </address> <month> December 13-16, </month> <year> 1994. </year>
Reference-contexts: The framework has been presented earlier in the context of information systems requirements engineering [Yu, 1993], business process reengineering <ref> [Yu et al., 1994a] </ref>, and software process modelling [Yu et al., 1994b]. 2.2.1 The Strategic Dependency Model the banking-by-teller example. The basic relationship is that a Customer depends on the Bank to have funds transferred from account a1 to a2. <p> In this paper, we have concentrated on showing how i and ALBERT can work together. Comparisons of i fl and ALBERT to their respective related work and more detailed discussions can be found in <ref> [Yu, 1995b; Yu, 1995a; Yu et al., 1994a] </ref> and [Dubois et al., 1993b; Dubois et al., 1994a; Dubois et al., 1994b]. 5 Conclusions As information system development techniques and tools advance, we anticipate that the technical design and implementation stages will occupy a less central place in system development.
Reference: [Yu et al., 1994b] <author> Eric S. K. Yu and John Mylopoulos. </author> <title> Understanding why in software process modelling, analysis, </title> <booktitle> and design. In Proc. of the 16th International Conference on Software Engineering - ICSE'94, </booktitle> <address> Sorrento (Italy), </address> <month> May 16-21, </month> <year> 1994. </year> <note> IEEE & ACM. </note>
Reference-contexts: The framework has been presented earlier in the context of information systems requirements engineering [Yu, 1993], business process reengineering [Yu et al., 1994a], and software process modelling <ref> [Yu et al., 1994b] </ref>. 2.2.1 The Strategic Dependency Model the banking-by-teller example. The basic relationship is that a Customer depends on the Bank to have funds transferred from account a1 to a2.
Reference: [Yu, 1993] <author> Eric S. K. Yu. </author> <title> An organization modelling framework for information systems requirements engineering. </title> <booktitle> In Proc. of the 3rd Workshop on Information Technologies and Systems - WITS'93, </booktitle> <address> Orlando FL, </address> <month> December 4-5, </month> <year> 1993. </year>
Reference-contexts: The framework has been presented earlier in the context of information systems requirements engineering <ref> [Yu, 1993] </ref>, business process reengineering [Yu et al., 1994a], and software process modelling [Yu et al., 1994b]. 2.2.1 The Strategic Dependency Model the banking-by-teller example. The basic relationship is that a Customer depends on the Bank to have funds transferred from account a1 to a2.
Reference: [Yu, 1995a] <author> Eric S. K. Yu. </author> <title> Modelling Strategic Relationships for Process Reengineering. </title> <type> PhD thesis, </type> <institution> Computer Science Department, University of Toronto, Toronto (Canada), </institution> <year> 1995. </year> <note> Also appears as Technical Report DKBS-TR-94-6, </note> <month> December </month> <year> 1994. </year>
Reference-contexts: Agents cooperate by giving each other information about their own state of knowledge. ALBERT offers a higher-level view than earlier requirements languages (such as ERAE [Dubois et al., 1986] or RML [Greenspan, 1984]) through the use of agent-oriented concepts such as knowledge and obligation. The i fl framework 2 <ref> [Yu, 1995a] </ref> is used to obtain an understanding about organizational relationships and the rationales behind them. Agents have wants and abilities. They depend on each other for goals to be achieved, tasks to be performed, and resources to be furnished. <p> What is secure is a matter of interpretation. While the bank may provide measures for security, it is the customer who decides whether they are secure enough for his purposes. The SD model provides for different degrees of strength of dependency: open, committed, and critical <ref> [Yu, 1995a] </ref>. The model can also distinguish agents from the roles that they play and the positions that they occupy. In this paper, we will limit our examples to the basic features. The SD model can be analyzed in terms of opportunities and vulnerabilities. <p> In this paper, we have concentrated on showing how i and ALBERT can work together. Comparisons of i fl and ALBERT to their respective related work and more detailed discussions can be found in <ref> [Yu, 1995b; Yu, 1995a; Yu et al., 1994a] </ref> and [Dubois et al., 1993b; Dubois et al., 1994a; Dubois et al., 1994b]. 5 Conclusions As information system development techniques and tools advance, we anticipate that the technical design and implementation stages will occupy a less central place in system development.
Reference: [Yu, 1995b] <author> Eric S. K. Yu. </author> <title> Models for supporting the redesign of organizational work. </title> <note> Submitted for publication, </note> <year> 1995. </year>
Reference-contexts: Modelling organizational processes in terms of intentional dependencies provides a level of description that acknowledges that organizational actors are often able to cope with open-ended situations (such as exceptions) without fully pre-planned activity steps <ref> [Yu, 1995b] </ref>. The i models are formally represented in the conceptual modelling language Telos [Mylopou-los et al., 1990] and their semantics are characterized by adapting formulations of intentional concepts such as goal, belief, ability, and commitment (e.g., [Co-hen et al., 1990]). <p> In this paper, we have concentrated on showing how i and ALBERT can work together. Comparisons of i fl and ALBERT to their respective related work and more detailed discussions can be found in <ref> [Yu, 1995b; Yu, 1995a; Yu et al., 1994a] </ref> and [Dubois et al., 1993b; Dubois et al., 1994a; Dubois et al., 1994b]. 5 Conclusions As information system development techniques and tools advance, we anticipate that the technical design and implementation stages will occupy a less central place in system development.
References-found: 38

