URL: http://www.cse.psu.edu/~bishop/glvlsi.ps
Refering-URL: http://www.cse.psu.edu/~bishop/
Root-URL: http://www.cse.psu.edu
Email: bishop@cse.psu.edu  
Title: The Design of a Register Renaming Unit  
Author: Benjamin Bishop, Thomas P. Kelliher Mary Jane Irwin 
Address: Park, PA 16802  
Affiliation: Department of Computer Science and Engineering The Pennsylvania State University University  
Abstract: Register renaming is often used to improve performance in many high-ILP processors. However, there is a lack of publications regarding register renaming hardware design. This paper presents a detailed look at one possible implementation of a register renaming unit, as well as some possible optimizations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. V. Aho, R. Sethi, and J. D. Ullman. </author> <booktitle> Compilers Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: In order to remove false data dependencies, these registers can be transparently mapped onto a larger set of registers, which are hidden from the programmer (physical registers). These data dependencies are typically introduced due to the lack of ISA registers and the tendency of compilers to conserve registers <ref> [1] </ref>. The register renaming process can be described as follows: A group of instructions enter the register renaming unit.
Reference: [2] <author> M. Johnson. </author> <title> Superscalar Microprocessor Design. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: 1. Introduction Register renaming is an important technique that is used to increase performance in many high-ILP processors. In fact, Johnson <ref> [2] </ref> states that register renaming alone increased the performance of a specific processor by 36%. Techniques for efficient register renaming are not currently well documented in the literature, however. In this paper, we attempt to fill this gap by presenting an HSPICE-verified design of a register renaming unit.
Reference: [3] <author> R. Katz. </author> <title> Contemporary Logic Design. </title> <publisher> Benjamin Cum-mings/Addison Wesley, </publisher> <year> 1993. </year>
Reference-contexts: The select lines give the binary encoding of the highest priority set input signal. If no signals are set, the select lines are set to 00. The random logic equations and the NAND/NOR mapping was accomplished through misII <ref> [3] </ref>. In order to limit fan-in, all logic was decomposed to 2-input gates. 3. Timing Information Worst case circuit delay can vary dramatically with changes in technology.
Reference: [4] <institution> Meta Software. HSPICE Users's Manual. Meta Software, </institution> <year> 1996. </year>
Reference-contexts: We have generated layout for the timing critical functions of the register renaming unit. This layout 2 was created by hand in Magic [6] and verified in HSPICE <ref> [4] </ref>. Issue widths of 1, 2, 4, and 8 have been considered. The following subsections present details about our implementation. 2.1. Register alias table The RAT hardware was implemented as a specialized SRAM memory.
Reference: [5] <author> R. Nadkarni. </author> <title> Register renaming in dynamically scheduled processors. M.S. </title> <type> Thesis, </type> <institution> Electrical Engineering Department, Penn State University, </institution> <month> May </month> <year> 1998. </year>

References-found: 5

