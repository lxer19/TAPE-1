URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/Web/People/ph/discon.ps.gz
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/Web/People/ph/index.html
Root-URL: 
Title: Discontinuity Meshing for Radiosity  
Author: Paul S. Heckbert 
Keyword: global illumination, diffuse interreflection, adaptive mesh, shadow.  
Address: Julianalaan 132  Netherlands  
Affiliation: Department of Technical Mathematics Informatics Delft University of Technology  BL Delft  
Email: email: ph@duticg.tudelft.nl  
Phone: 2628  
Date: 16 April 1992  
Abstract: The radiosity method is the most popular algorithm for simulating interreflection of light between diffuse surfaces. Most existing radiosity algorithms employ simple meshes and piecewise constant approximations, thereby constraining the radiosity function to be constant across each polygonal element. Much more accurate simulations are possible if linear, quadratic, or higher degree approximations are used. In order to realize the potential accuracy of higher-degree approximations, however, it is necessary for the ra-diosity mesh to resolve discontinuities such as shadow edges in the radiosity function. A discontinuity meshing algorithm is presented that places mesh boundaries directly along discontinuities. Such algorithms offer the potential of faster, more accurate simulations. Results are shown for three-dimensional scenes. 
Abstract-found: 1
Intro-found: 1
Reference: [Atherton et al. 78] <author> Peter R. Atherton, Kevin Weiler, and Donald P. Greenberg. </author> <title> Polygon shadow generation. </title> <booktitle> Computer Graphics (SIGGRAPH '78 Proceedings), </booktitle> <volume> 12(3) </volume> <pages> 275-281, </pages> <month> Aug. </month> <year> 1978. </year>
Reference-contexts: The simplest shadow algorithms simulate only point light sources, computing the shadowed and unshadowed polygons using "cookie cutter" algorithms <ref> [Atherton et al. 78] </ref>, or binary space partitioning (BSP) trees [Chin-Feiner90]. Nishita went further, computing penumbra boundaries from area light sources [Nishita-Nakamae83], thereby producing some amazingly realistic pictures without simulating interreflection. <p> The algorithm used here is a 2-D variant of the Weiler-Atherton visible surface algorithm <ref> [Atherton et al. 78] </ref> that increased crispness of the shadows when edges of the paper are parallel to edges of the light source.
Reference: [Baum et al. 91] <author> Daniel R. Baum, Stephen Mann, Kevin P. Smith, and James M. Winget. </author> <title> Making ra-diosity usable: Automatic preprocessing and meshing techniques for the generation of accurate radiosity solutions. </title> <booktitle> Computer Graphics (SIGGRAPH '91 Proceedings), </booktitle> <volume> 25(4) </volume> <pages> 51-60, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: A later improvement by Campbell found the discontinuities along the boundaries of the penumbra [Campbell91]. Baum split surfaces where they intersected or touched to resolve the most severe discontinuities <ref> [Baum et al. 91] </ref>. Rigorous meshing of 2-D scenes has also been explored [Heckbert91,Heckbert92,Lischinski et al. 91]. <p> The computational requirements for radiosity on complex scenes can be prohibitive: a scene of about 5,000 polygons (broken into 1,000,000 elements) requires about 6 CPU-days on a fast (6 megaflop) computer using some of the best existing software <ref> [Baum et al. 91] </ref>. By comparison, Ward's ray tracing algorithm [Ward et al. 88] renders the same scene in about 2 days on a comparable machine. The relative errors of the two methods are not known, so this comparison is approximate. <p> There are three classes of critical curves to be generated: those due to touching or intersecting surfaces, VE critical lines, and EEE critical curves. We discuss VE lines in this paper. EEE curves are more difficult to handle [Teller92]. Baum discussed touching and intersecting surfaces in <ref> [Baum et al. 91] </ref>. critical segments can be generated by projecting the occluders from each of the vertices of the emitter onto each of the other faces in the scene.
Reference: [Baumgart74] <author> Bruce G. Baumgart. </author> <title> Geometric Modeling for Computer Vision. </title> <type> PhD thesis, </type> <institution> CS Dept, Stanford U., </institution> <month> Oct. </month> <year> 1974. </year> <note> AIM-249, STAN-CS-74-463. </note>
Reference-contexts: The data structure should allow holes, concave polygons, faces with any number of sides, vertices of arbitrary degree, ordering of edges and faces around a vertex, and fast access to adjacent objects. An extended winged edge data structure was used here <ref> [Baumgart74] </ref>. BSP trees could also be used to represent the arrangement of critical lines on each face, but they split polygons unnecessarily, constraining the space of meshes, and lead to poorer quality meshes. Campbell employed BSP trees in his work [Campbell-Fussell90,Campbell91], and went to great lengths to minimize excessive subdivision.
Reference: [Becker et al. 81] <author> Eric B. Becker, Graham F. Cary, and J. Tinsley Oden. </author> <title> Finite Elements: An Introduction, volume 1. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1981. </year>
Reference-contexts: For general references on finite element methods and integral equations, see the texts <ref> [Becker et al. 81] </ref> and [Delves-Mohamed85], respectively. Radiosity obeys the integral equation [Heckbert-Winget91,Kajiya86]: b (x) = e (x) + where b (x) denotes the radiosity at 3-D point x, e (x) is radiant emitted flux density, and is the two-dimensional domain of all surfaces in the scene.
Reference: [Boender92] <author> Edwin Boender. </author> <title> Finite Element Mesh Generation from CSG Models. </title> <type> PhD thesis, </type> <institution> Dept. of Technical Math. & Informatics, Delft U. of Tech., Netherlands, </institution> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: The final step subdivides these regions according to a user-selected maximum element size (figures 10 and 11). Delaunay triangulation and mesh relaxation were used here <ref> [Boender92] </ref>, but it appears that there is considerable flexibility in this last step. Once the mesh is constructed, basis functions are chosen for each element. If constant elements are used, then each element has one degree of freedom, and all elements are independent.
Reference: [Campbell91] <author> A. T. Campbell, III. </author> <title> Modeling Global Diffuse Illumination for Image Synthesis. </title> <type> PhD thesis, </type> <institution> CS Dept, University of Texas at Austin, </institution> <month> Dec. </month> <year> 1991. </year> <note> Tech. Report TR-91-39. </note>
Reference-contexts: A mesh is then constructed accordingly, and a solution found. Campbell's a priori meshing split the scene with planes through light source points and edges of occluding polygons, thereby approximating some shadow edges [Campbell-Fussell90]. A later improvement by Campbell found the discontinuities along the boundaries of the penumbra <ref> [Campbell91] </ref>. Baum split surfaces where they intersected or touched to resolve the most severe discontinuities [Baum et al. 91]. Rigorous meshing of 2-D scenes has also been explored [Heckbert91,Heckbert92,Lischinski et al. 91]. <p> Baum's system resolved the degree 0 discontinuities from touching or intersecting surfaces, but not degree 0 discontinuities from point light sources, or degree 1 or 2 discontinuities. As mentioned previously, the meshes in [Campbell-Fussell90] approximately resolved some discontinuities. Campbell's more recent algorithm, <ref> [Campbell91] </ref>, resolves the discontinuities along the boundaries of the penumbra, but not the discontinuities within the penumbra. 2.3 Discontinuity Meshing Algorithm Discontinuity meshing can be done in a three phase process: first, critical curves are found and stored with the faces on which they lie, then a mesh that follows the
Reference: [Campbell-Fussell90] <author> A. T. Campbell, III and Donald S. Fussell. </author> <title> Adaptive mesh generation for global diffuse illumination. </title> <booktitle> Computer Graphics (SIGGRAPH '90 Proceedings), </booktitle> <volume> 24(4) </volume> <pages> 155-164, </pages> <month> Aug. </month> <year> 1990. </year>
Reference-contexts: A mesh is then constructed accordingly, and a solution found. Campbell's a priori meshing split the scene with planes through light source points and edges of occluding polygons, thereby approximating some shadow edges <ref> [Campbell-Fussell90] </ref>. A later improvement by Campbell found the discontinuities along the boundaries of the penumbra [Campbell91]. Baum split surfaces where they intersected or touched to resolve the most severe discontinuities [Baum et al. 91]. Rigorous meshing of 2-D scenes has also been explored [Heckbert91,Heckbert92,Lischinski et al. 91]. <p> Earlier adaptive meshing schemes have resolved some of the discontinuities in radiosity solutions. Baum's system resolved the degree 0 discontinuities from touching or intersecting surfaces, but not degree 0 discontinuities from point light sources, or degree 1 or 2 discontinuities. As mentioned previously, the meshes in <ref> [Campbell-Fussell90] </ref> approximately resolved some discontinuities. <p> The other half of the critical segments are generated by projecting the emitter from each of the vertices of the occluders onto each of the faces in the scene. (When we say "emitter" here, it could mean a secondary light source). In <ref> [Campbell-Fussell90] </ref>, the first half of these segments are approximated, but not the second half.
Reference: [Chin-Feiner90] <author> Norman Chin and Steven Feiner. </author> <title> Near real-time shadow generation using BSP trees. </title> <booktitle> Computer Graphics (SIGGRAPH '90 Proceedings), </booktitle> <volume> 24(4) </volume> <pages> 99-106, </pages> <month> Aug. </month> <year> 1990. </year>
Reference-contexts: The simplest shadow algorithms simulate only point light sources, computing the shadowed and unshadowed polygons using "cookie cutter" algorithms [Atherton et al. 78], or binary space partitioning (BSP) trees <ref> [Chin-Feiner90] </ref>. Nishita went further, computing penumbra boundaries from area light sources [Nishita-Nakamae83], thereby producing some amazingly realistic pictures without simulating interreflection.
Reference: [Chin-Feiner92] <author> Norman Chin and Steven Feiner. </author> <title> Fast object-precision shadow generation for area light sources using BSP trees. </title> <booktitle> In 1992 Symp. on Interactive 3D Graphics, </booktitle> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: Nishita went further, computing penumbra boundaries from area light sources [Nishita-Nakamae83], thereby producing some amazingly realistic pictures without simulating interreflection. Chin has recently done the same using BSP trees <ref> [Chin-Feiner92] </ref>. 1.2 Motivation Current radiosity algorithms work well for some scenes: the progressive radiosity algorithm [Cohen et al. 88] is relatively fast and its artifacts are often imperceptible. Sometimes, however, existing algorithms are very slow, they exhibit objectionable artifacts, and they are inaccurate.
Reference: [Cohen et al. 86] <author> Michael F. Cohen, Donald P. Greenberg, David S. Immel, and Philip J. Brock. </author> <title> An efficient radiosity approach for realistic image synthesis. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 26-35, </pages> <month> Mar. </month> <year> 1986. </year>
Reference-contexts: Better meshes can be created by user intervention, a posteriori methods, and a priori methods. A posteriori meshing constructs a first approximation using a coarse, uniform mesh, and then refines the mesh where the gradient appears to be large. Refinement can be done using quadtree subdivision <ref> [Cohen et al. 86] </ref>. Such methods help significantly, but they can miss small features (shadows of small objects), and they exhibit jagged shadow edges unless subdivision is extremely fine. A priori meshing employs object-space techniques to predict, before solution, where shadow edges and other discontinuities will occur.
Reference: [Cohen et al. 88] <author> Michael F. Cohen, Shenchang Eric Chen, John R. Wallace, and Donald P. Green-berg. </author> <title> A progressive refinement approach to fast radiosity image generation. </title> <booktitle> Computer Graphics (SIGGRAPH '88 Proceedings), </booktitle> <volume> 22(4) </volume> <pages> 75-84, </pages> <month> Aug. </month> <year> 1988. </year> <note> Discontinuity Meshing for Radiosity 13 </note>
Reference-contexts: Nishita went further, computing penumbra boundaries from area light sources [Nishita-Nakamae83], thereby producing some amazingly realistic pictures without simulating interreflection. Chin has recently done the same using BSP trees [Chin-Feiner92]. 1.2 Motivation Current radiosity algorithms work well for some scenes: the progressive radiosity algorithm <ref> [Cohen et al. 88] </ref> is relatively fast and its artifacts are often imperceptible. Sometimes, however, existing algorithms are very slow, they exhibit objectionable artifacts, and they are inaccurate.
Reference: [Cohen-Greenberg85] <author> Michael F. Cohen and Donald P. Greenberg. </author> <title> The hemi-cube: A radiosity solution for complex environments. </title> <booktitle> Computer Graphics (SIGGRAPH '85 Proceedings), </booktitle> <volume> 19(3) </volume> <pages> 31-40, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: The "form factors" here are the same as those of standard radiosity algorithms, except for the non-constant basis functions. The most difficult factor in these integrations is the visibility function v, but this can be evaluated using a hemicube <ref> [Cohen-Greenberg85] </ref> or ray tracing. Hemicube algorithms can be generalized to evaluate linear basis functions using Gouraud shading [Max-Allison92].
Reference: [Delves-Mohamed85] <author> L. M. Delves and J. L. Mohamed. </author> <title> Computational methods for integral equations. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, U.K., </address> <year> 1985. </year>
Reference-contexts: For general references on finite element methods and integral equations, see the texts [Becker et al. 81] and <ref> [Delves-Mohamed85] </ref>, respectively. Radiosity obeys the integral equation [Heckbert-Winget91,Kajiya86]: b (x) = e (x) + where b (x) denotes the radiosity at 3-D point x, e (x) is radiant emitted flux density, and is the two-dimensional domain of all surfaces in the scene.
Reference: [Gigus-Malik90] <author> Ziv Gigus and Jitendra Malik. </author> <title> Computing the aspect graph for line drawings of polyhedral objects. </title> <journal> IEEE Trans. on Pattern Analysis and Machine Intelligence, </journal> <volume> 12(2) </volume> <pages> 113-122, </pages> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: Changes in visibility occur along critical surfaces, and potential discontinuities occur along critical curves where these surfaces intersect the faces (polygons) of the scene. For a scene of polygons, there are two types of events: vertex-edge (VE) events and edge-edge-edge (EEE) events <ref> [Gigus-Malik90] </ref>. VE events result from an inter-visible vertex v and edge e. The critical surface for this event is a subset of the plane containing the vertex and the edge. <p> EEE events result from three inter-visible, skew edges (figure 4). The critical surface is the set of points simultaneously collinear with one point from each edge but not between any two of these three points. This surface is a subset of a quadric <ref> [Gigus-Malik90] </ref>.
Reference: [Golub-Van Loan89] <author> Gene H. Golub and Charles F. Van Loan. </author> <title> Matrix Computations. </title> <publisher> Johns Hopkins University Press, </publisher> <address> Baltimore, MD, </address> <year> 1989. </year>
Reference-contexts: A matrix radiosity algorithm was used, rather than a progressive radiosity algorithm, so that the errors of progressive radiosity would not mask the errors introduced by the mesh. The linear system was solved by successive overrelaxation, a faster variant of Gauss-Seidel iteration <ref> [Golub-Van Loan89] </ref>. The program was written in C.
Reference: [Hanrahan et al. 91] <author> Pat Hanrahan, David Salzman, and Larry Aupperle. </author> <title> A rapid hierarchical radiosity algorithm. </title> <booktitle> Computer Graphics (SIGGRAPH '91 Proceedings), </booktitle> <volume> 25(4) </volume> <pages> 197-206, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Discontinuity Meshing for Radiosity 3 Another meshing improvement is to vary the mesh resolution according to the range of the interaction: a fine mesh is needed for nearby elements but a coarse mesh suffices for distant elements <ref> [Hanrahan et al. 91] </ref>. Hanrahan found, surprisingly, that many radiosity algorithms waste much of their time computing tiny form factors.
Reference: [Heckbert91] <author> Paul S. Heckbert. </author> <title> Simulating Global Illumination Using Adaptive Meshing. </title> <type> PhD thesis, </type> <institution> CS Division, UC Berkeley, </institution> <month> June </month> <year> 1991. </year> <type> Tech. Report UCB/CSD 91/636. </type>
Reference-contexts: Shadow edges from point, linear, and area light sources are in general of degree 0, 1, and 2, respectively, but when two discontinuities coincide, the degree of the discontinuity can decrease <ref> [Heckbert91] </ref>. The lowest degree discontinuities generally cause the greatest error, if not resolved by an approximation. Many of the characteristics of VE discontinuities are shown in figure 5. A top view of these discontinuities is shown in figure 6.
Reference: [Heckbert92] <author> Paul S. Heckbert. </author> <title> Radiosity in flatland. </title> <journal> Computer Graphics Forum, </journal> <volume> 11(3) </volume> <pages> 181-192, 464, </pages> <month> Sept. </month> <year> 1992. </year>
Reference: [Heckbert-Winget91] <author> Paul S. Heckbert and James M. Winget. </author> <title> Finite element methods for global illumination. </title> <type> Technical report, </type> <institution> CS Division, UC Berkeley, </institution> <month> July </month> <year> 1991. </year> <note> UCB/CSD 91/643. </note>
Reference-contexts: To discuss the few remaining steps, we must review the generalization of radiosity methods to arbitrary basis functions. 2.4 Finite Element Methods for Radiosity There are a variety of finite element methods for solving the integral equation governing radiosity <ref> [Heckbert-Winget91] </ref>. 10 Discontinuity Meshing for Radiosity element approach: one much choose a mesh and basis functions, constraint and integration methods to reduce the problem to a linear system of equations, a system solution method, and a display algorithm.
Reference: [Kajiya86] <author> James T. Kajiya. </author> <title> The rendering equation. </title> <booktitle> Computer Graphics (SIGGRAPH '86 Proceedings), </booktitle> <volume> 20(4) </volume> <pages> 143-150, </pages> <month> Aug. </month> <year> 1986. </year>
Reference-contexts: Ray tracing simulates light transport by tracing the paths of photons through the scene in one of two directions: either from the lights into the scene or from the eye into the scene. With the addition of Monte Carlo techniques, it is possible to simulate diffuse interreflection <ref> [Kajiya86] </ref>.
Reference: [Lischinski et al. 91] <author> Dani Lischinski, Filippo Tampieri, and Donald P. Greenberg. </author> <title> Improving sampling and reconstruction techniques for radiosity. </title> <type> Technical report, </type> <institution> CS Dept., Cornell U., </institution> <month> Aug. </month> <year> 1991. </year> <type> TR 91-1202. </type>
Reference: [Max-Allison92] <author> Nelson L. Max and Michael J. Allison. </author> <title> Linear radiosity approximation using vertex-to-vertex form factors. </title> <editor> In David Kirk, editor, </editor> <booktitle> Graphics Gems III, </booktitle> <pages> pages 318-323. </pages> <publisher> Academic Press, </publisher> <year> 1992. </year>
Reference-contexts: Neither technique, by itself, gives significantly better results than standard methods. The use of higher degree elements in 3-D is straightforward, if no discontinuity meshing is done. In fact, it is possible to compute the form factors for linear element radiosity using a variant of the hemicube algorithm <ref> [Max-Allison92] </ref>. <p> The most difficult factor in these integrations is the visibility function v, but this can be evaluated using a hemicube [Cohen-Greenberg85] or ray tracing. Hemicube algorithms can be generalized to evaluate linear basis functions using Gouraud shading <ref> [Max-Allison92] </ref>. Discontinuity Meshing for Radiosity 11 A variety of system solution methods can be used, as indicated in figure 12, including generic methods such as Gauss-Seidel iteration, its faster variant successive overrelaxation, or specialized methods such as progressive radiosity.
Reference: [Nishita-Nakamae83] <author> Tomoyuki Nishita and Eihachiro Nakamae. </author> <title> Half-tone representation of 3-D objects illuminated by area sources or polyhedron sources. </title> <booktitle> In COMPSAC '83, Proc. IEEE 7th Intl. Comp. Soft. and Applications Conf., </booktitle> <pages> pages 237-242, </pages> <month> Nov. </month> <year> 1983. </year>
Reference-contexts: The simplest shadow algorithms simulate only point light sources, computing the shadowed and unshadowed polygons using "cookie cutter" algorithms [Atherton et al. 78], or binary space partitioning (BSP) trees [Chin-Feiner90]. Nishita went further, computing penumbra boundaries from area light sources <ref> [Nishita-Nakamae83] </ref>, thereby producing some amazingly realistic pictures without simulating interreflection. Chin has recently done the same using BSP trees [Chin-Feiner92]. 1.2 Motivation Current radiosity algorithms work well for some scenes: the progressive radiosity algorithm [Cohen et al. 88] is relatively fast and its artifacts are often imperceptible. <p> they are the face points on the critical surface that are visible to the three edge points on the line. 6 Discontinuity Meshing for Radiosity and edge e. edges at right creates a quadric critical surface and a conic critical curve on face at left. receiver in parallel planes (after <ref> [Nishita-Nakamae83] </ref>). three different rotations of the emitter. When edges of emitter and occluder become coplanar, two degree 2 discontinuity curves coin cide, yielding a degree 1 discontinuity. 2.2 Discontinuities Touching or intersecting surfaces usually yield degree 0 discontinuities along their common curve.
Reference: [Sparrow63] <author> Ephraim M. </author> <title> Sparrow. On the calculation of radiant interchange between surfaces. </title> <editor> In Warren Ibele, editor, </editor> <booktitle> Modern Developments in Heat Transfer, </booktitle> <address> New York, 1963. </address> <publisher> Academic Press. </publisher>
Reference-contexts: With the addition of Monte Carlo techniques, it is possible to simulate diffuse interreflection [Kajiya86]. This can be done efficiently by caching the slowly-varying diffuse component of radiance [Ward et al. 88]. 1.1.1 Radiosity Algorithms Radiosity methods have their roots in the simulation of thermal radiation in mechanical engineering <ref> [Sparrow63] </ref>, and were extended and optimized for the simulation of complex scenes in computer graphics [Cohen-Greenberg85,Cohen et al. 88].
Reference: [Tampieri-Lischinski91] <author> Filippo Tampieri and Dani Lischinski. </author> <title> The constant radiosity assumption syndrome. </title> <booktitle> In Second Eurographics Workshop on Rendering, </booktitle> <address> Barcelona, Spain, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: We call such an approximation a uniform mesh with constant elements. Though Gouraud shading is typically used for display, linear variation in radiosity is not taken into account during form factor calculation, with a few exceptions [Max-Allison92,Heckbert-Winget91]. The true radiosity function is not constant across each element, of course <ref> [Tampieri-Lischinski91] </ref>. Meshes with constant elements result in jaggy shadow boundaries and other artifacts. Better meshes can be created by user intervention, a posteriori methods, and a priori methods.
Reference: [Teller92] <author> Seth J. Teller. </author> <title> Computing the antipenumbra of an area light source. </title> <booktitle> Computer Graphics (SIGGRAPH '92 Proceedings), </booktitle> <volume> 26(2) </volume> <pages> 139-148, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: There are three classes of critical curves to be generated: those due to touching or intersecting surfaces, VE critical lines, and EEE critical curves. We discuss VE lines in this paper. EEE curves are more difficult to handle <ref> [Teller92] </ref>. Baum discussed touching and intersecting surfaces in [Baum et al. 91]. critical segments can be generated by projecting the occluders from each of the vertices of the emitter onto each of the other faces in the scene.
Reference: [Ward et al. 88] <author> Gregory J. Ward, Francis M. Rubinstein, and Robert D. </author> <title> Clear. A ray tracing solution for diffuse interreflection. </title> <booktitle> Computer Graphics (SIGGRAPH '88 Proceedings), </booktitle> <volume> 22(4) </volume> <pages> 85-92, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: With the addition of Monte Carlo techniques, it is possible to simulate diffuse interreflection [Kajiya86]. This can be done efficiently by caching the slowly-varying diffuse component of radiance <ref> [Ward et al. 88] </ref>. 1.1.1 Radiosity Algorithms Radiosity methods have their roots in the simulation of thermal radiation in mechanical engineering [Sparrow63], and were extended and optimized for the simulation of complex scenes in computer graphics [Cohen-Greenberg85,Cohen et al. 88]. <p> The computational requirements for radiosity on complex scenes can be prohibitive: a scene of about 5,000 polygons (broken into 1,000,000 elements) requires about 6 CPU-days on a fast (6 megaflop) computer using some of the best existing software [Baum et al. 91]. By comparison, Ward's ray tracing algorithm <ref> [Ward et al. 88] </ref> renders the same scene in about 2 days on a comparable machine. The relative errors of the two methods are not known, so this comparison is approximate.
Reference: [Weiler80] <author> Kevin Weiler. </author> <title> Polygon comparison using a graph representation. </title> <booktitle> Computer Graphics (SIGGRAPH '80 Proceedings), </booktitle> <volume> 14(3) </volume> <pages> 10-18, </pages> <month> July </month> <year> 1980. </year> <title> 14 Discontinuity Meshing for Radiosity discontinuity mesh solution. Uniform meshing leads to a "light leak" under the triangle, while discontinuity meshing does not. Both solutions use Gouraud elements. a nearby square light source, bottom row: shadow of a triangle from a distant light source. Left column: uniform mesh solution, right column: discontinuity mesh solution. Picture on right: Demonstration of diffuse interreflection. Critical lines shown in red, sight lines connecting vertices in blue. </title>
Reference-contexts: Note that it follows all of the critical lines. intersections between critical lines, and subdividing the polygon into regions of homogeneous visibility bounded by critical lines or edges of the original polygon (figure 9, right). This is done with a 2-D sweepline algorithm similar to a polygon clipping algorithm <ref> [Weiler80] </ref>. This step creates a winged edge data structure. As the sweepline passes across each vertex or intersection point, the order of the emanating edges is found by a radial sort of the geometry. This ordering determines the local topology, which is used to update the winged edge data structure.
References-found: 28

