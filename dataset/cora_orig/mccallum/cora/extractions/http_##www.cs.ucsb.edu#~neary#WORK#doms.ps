URL: http://www.cs.ucsb.edu/~neary/WORK/doms.ps
Refering-URL: http://www.cs.ucsb.edu/~neary/WORK/dir.html
Root-URL: http://www.cs.ucsb.edu
Title: DOMS A Prototype of a Distributed, Object Oriented, Active Database Kernel as a Framework for
Author: Michael O. Neary Dirk Schumacher 
Date: March 10, 1995  
Abstract-found: 0
Intro-found: 1
Reference: [Ber87] <author> P.A. Bernstein. </author> <title> Database System Support for Software Engineering | An Extended Abstract. </title> <booktitle> In Proc. Int'l Conf. on Software Engineering, </booktitle> <pages> pages 166-178, </pages> <month> March </month> <year> 1987. </year>
Reference-contexts: With the advantages of using database technology thus established, a number of projects have tried to integrate a commercial DBMS into their environment. It was soon discovered, however, that a traditional database system cannot meet the needs of advanced applications <ref> [Ber87, KS86] </ref> mainly for one reason: the concurrency control mechanism based on ACID transactions is too restrictive. New concepts for flexible concurrency control are therefore needed. The chapter is organized as follows: To demonstrate the effects of rigid concurrency control in a design environment we will give a motivating example.
Reference: [BK91] <author> N.S. Barghouti and G.E. Kaiser. </author> <title> Concurrency Control in Advanced Database Applications. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(3) </volume> <pages> 271-317, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Therefore, scientists have begun to think about adapting the capabilities of modern database systems to meet the needs of storage intensive computer applications. There are several reasons for design environments to employ database technology <ref> [BK91] </ref>: Data Integration Providing a single data management and retrieval interface for all tools accessing the data. Application Orientation Organizing data items into structures that capture much of the semantics of the intended applications.
Reference: [BKK85] <author> F. Bancilhon, W. Kim, and H.F. Korth. </author> <title> A Model of CAD Transactions. </title> <booktitle> In Proc. 11th Int. Conf. on Very Large Data Bases, </booktitle> <pages> pages 25-33, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: In advanced applications like SDEs it is often possible to define specific semantic consistency constraints that will 22 allow the database system to accept non-serializable schedules, leading to more concurrency. A number of studies have therefore arrived at the following requirements for concurrency control in advanced applications <ref> [BKK85, YEEK87] </ref>. 1. Supporting long transactions. Unlike traditional transactions, operations in design environments are often long-lived. In most cases it is unacceptable to block other transactions until a long transaction commits. Therefore, intelligent support mechanisms have to be found.
Reference: [Boe92] <author> F. Boeke. </author> <title> Realisierung eines optimistischen Concurrency Control-Verfahrens fur die CADLAB-Datenhaltung. </title> <type> Master's thesis, </type> <institution> Universitat-Gesamthochschule Paderborn, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: With no arguments in favour of other methods we obviously did not trouble ourselves with changing the scheduler inside the OM process. 6 Optimistic concurrency control methods for OMS have indeed been investigated in another diploma thesis <ref> [Boe92] </ref> but never been integrated into mainstream development. 10 3.1.3 The DOMS Concurrency Control Strategy According to our concept for distribution that was put down in Section 2, DOMS shall eventually be able to handle classic short-life transactions (see Section 2.4.3) as well as long-life cooperative design transactions (Section 2.4.4).
Reference: [CDKK85] <author> H.-T. Chou, D.J. DeWitt, R.H. Katz, and A.C. Klug. </author> <title> Design and Implementation of the Wisconsin Storage System. </title> <journal> Software-Practice and Experience, </journal> <volume> 15(10) </volume> <pages> 943-962, </pages> <month> October </month> <year> 1985. </year>
Reference-contexts: The storage manager used in OMS is CASH, the CAdlab Storage Handler. It is an extensive adaption of the Wisconsin Storage System (WiSS) <ref> [CDKK85] </ref> that is used in other object-oriented DBMS, too. CASH provides volumes of files that contain records of variable length. IDM object hulls are stored as records, containers are mapped to files and partitions to volumes. Data on physical devices is kept in the so-called BDB (Background Database).
Reference: [COD73] <author> CODASYL Data Description Language Committee. </author> <title> Data Description Language Journal of Development. </title> <booktitle> NBS Handbook 113, </booktitle> <year> 1973. </year>
Reference-contexts: The first steps taken in this field were the ON conditions proposed by the CODASYL Data Description Language Committee in 1973 <ref> [COD73] </ref>. In the following period some relational DBMSs were extended by an active part. One can distinguish triggers and assertions as proposed for System R [EC75, Esw76] to enforce integrity constraints and declarative rules to express relationships between data items. Active rule systems for object-oriented DBMSs have also been developed.
Reference: [DBM88] <author> U. Dayal, A.P. Buchmann, and D.R. McCarthy. </author> <title> Rules are Objects Too. </title> <booktitle> In Proc. 2nd Int. Workshop on Object-Oriented Databases, </booktitle> <pages> pages 129-143, </pages> <year> 1988. </year>
Reference-contexts: One can distinguish triggers and assertions as proposed for System R [EC75, Esw76] to enforce integrity constraints and declarative rules to express relationships between data items. Active rule systems for object-oriented DBMSs have also been developed. Two representatives of this class are SAMOS [GD93] and HiPAC <ref> [DBM88] </ref>. SAMOS supports its own object-oriented data model whereas HiPAC is a prototype rule system for the object-oriented data model PROBE. 15 Conventional DBMSs only manipulate data as a reaction to a request from an application. In this sense these systems can be regarded as passive.
Reference: [EC75] <author> K.P. Eswaran and D.D. Chamgerlain. </author> <title> Functional Specifications of a Subsystem for Data Base Integrity. </title> <booktitle> In Proc. Int. Conf. on Very Large Data Bases, </booktitle> <month> September </month> <year> 1975. </year> <month> 30 </month>
Reference-contexts: The first steps taken in this field were the ON conditions proposed by the CODASYL Data Description Language Committee in 1973 [COD73]. In the following period some relational DBMSs were extended by an active part. One can distinguish triggers and assertions as proposed for System R <ref> [EC75, Esw76] </ref> to enforce integrity constraints and declarative rules to express relationships between data items. Active rule systems for object-oriented DBMSs have also been developed. Two representatives of this class are SAMOS [GD93] and HiPAC [DBM88].
Reference: [Esw76] <author> K.P. Eswaran. </author> <title> Specifications, Implementations, and Interactions of a Trigger Subsystem in an Integrated Data Base System. </title> <type> Technical Report RJ1820, </type> <institution> IBM Research Division, </institution> <month> August </month> <year> 1976. </year>
Reference-contexts: The first steps taken in this field were the ON conditions proposed by the CODASYL Data Description Language Committee in 1973 [COD73]. In the following period some relational DBMSs were extended by an active part. One can distinguish triggers and assertions as proposed for System R <ref> [EC75, Esw76] </ref> to enforce integrity constraints and declarative rules to express relationships between data items. Active rule systems for object-oriented DBMSs have also been developed. Two representatives of this class are SAMOS [GD93] and HiPAC [DBM88].
Reference: [GD93] <author> S. Gatziu and K.R. Dittrich. SAMOS: </author> <title> An Active Object-Oriented Database System. </title> <journal> IEEE Quarterly Bulletin on Data Engineering, </journal> <month> January </month> <year> 1993. </year>
Reference-contexts: One can distinguish triggers and assertions as proposed for System R [EC75, Esw76] to enforce integrity constraints and declarative rules to express relationships between data items. Active rule systems for object-oriented DBMSs have also been developed. Two representatives of this class are SAMOS <ref> [GD93] </ref> and HiPAC [DBM88]. SAMOS supports its own object-oriented data model whereas HiPAC is a prototype rule system for the object-oriented data model PROBE. 15 Conventional DBMSs only manipulate data as a reaction to a request from an application. In this sense these systems can be regarded as passive.
Reference: [HZ87] <author> M.F. Hornick and S.B. Zdonik. </author> <title> A Shared Segmented Memory System for an Object-Oriented Database. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 5(1) </volume> <pages> 70-95, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: A number of alternative concepts exist in this area that also provide good support for long, interactive, and cooperative design processes. Of the two cooperation primitives, notification and groups, most of these approaches seem to focus a lot more on groups than on notification. Especially the transaction groups approach <ref> [SZ89, HZ87] </ref> and the tool kit concept [US92] put considerable effort into structuring transactions in trees. A problem that arises with this type of structure is that it does not model the real world correctly. <p> An appropriate definition language must be developed. 28 System Architecture Distribution Features DOMS multi-server transparently distributed nested transactions object server 2PC object/container locking operation server replication strict 2PL database kernel heterogen. networks event management redo log / event recovery cooperative transactions ObServer single-server N/A nested transactions <ref> [HZ87] </ref> object server object locking two-phase locking (2PL) flexible lock modes cooperative transactions ObjectStore multi-server distributed nested transactions [LLOW91] page server two-phase commit (2PC) page locking heterogen. networks strict 2PL redo log checkin/checkout version handling Objectivity multi-server transparently distributed hierarch. locking [Wad93] 2PC heterogen. networks federated Versant multi-server transparently distributed flat
Reference: [KKN89] <author> G. Kachel, T. Kathofer, and B. Nelke. </author> <title> Die Datenhaltung der CADLAB-Workstation: Konzept und Realisierung. </title> <booktitle> In Proc. Datenbanksysteme in Buro, </booktitle> <publisher> Technik und Wissenschaft, </publisher> <year> 1989. </year>
Reference-contexts: This unusual approach was chosen to create a uniform platform for a multitude of new, demanding applications of database technology, like computer aided design and manufacturing (CAD/CAM), computer aided software engineering (CASE), office automation or multimedia. The underlying data model in DOMS is the object-oriented IDM (Internal Data Model) <ref> [KKN89] </ref>. The conceptual and external layers of a full DBMS must be provided by specific application tools. In contrast to a traditional DBMS 1 which is designed for one purpose only, DOMS can thus be tailored to suit the often contradicting needs of various applications. <p> The operations provided by IDM for object manipulation, navigation, type administration, and so on are defined in an object-oriented C ++ interface that can be used by application tools. For further information on IDM, see <ref> [KKN89] </ref>. 2.2 OMS Architecture OMS is the database kernel that implements the functionality specified by IDM. The OMS architecture is that of a workstation-server system. It consists of two server processes, an object manager (OM) and an event manager (EM).
Reference: [KS86] <author> H.F. Korth and A. Silberschatz. </author> <title> Database System Concepts. </title> <publisher> McGraw-Hill, </publisher> <year> 1986. </year>
Reference-contexts: With the advantages of using database technology thus established, a number of projects have tried to integrate a commercial DBMS into their environment. It was soon discovered, however, that a traditional database system cannot meet the needs of advanced applications <ref> [Ber87, KS86] </ref> mainly for one reason: the concurrency control mechanism based on ACID transactions is too restrictive. New concepts for flexible concurrency control are therefore needed. The chapter is organized as follows: To demonstrate the effects of rigid concurrency control in a design environment we will give a motivating example.
Reference: [LLOW91] <author> C. Lamb, G. Landis, J. Orenstein, and D. Weinreb. </author> <title> The ObjectStore Database System. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 50-63, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: transparently distributed nested transactions object server 2PC object/container locking operation server replication strict 2PL database kernel heterogen. networks event management redo log / event recovery cooperative transactions ObServer single-server N/A nested transactions [HZ87] object server object locking two-phase locking (2PL) flexible lock modes cooperative transactions ObjectStore multi-server distributed nested transactions <ref> [LLOW91] </ref> page server two-phase commit (2PC) page locking heterogen. networks strict 2PL redo log checkin/checkout version handling Objectivity multi-server transparently distributed hierarch. locking [Wad93] 2PC heterogen. networks federated Versant multi-server transparently distributed flat transactions [Ver91] object server 2PC hierarch. object locking data migration various lock modes heterogen. networks 2PL ORION-2/ multi-server
Reference: [MZF + 92] <author> A. Meckenstock, D. Zimmer, W. Fox, Z. Hernath, R. Hopp, T. Kathofer, D. Nolte, K. Pielsticker, G. Reit-meyer, F. Rupprecht, and M. Schrewe. </author> <title> Concept and Architecture of a Distributed Object-Oriented Database Kernel. </title> <type> CADLAB Report 13/92, </type> <month> March </month> <year> 1992. </year>
Reference-contexts: Events will be handled in more detail in Section 4. The availability of this mechanism makes OMS an active system. 4 2.3 A First Approach to Distribution As a first approach to distribute OMS the following concept was invented by our predecessors on the job <ref> [MZF + 92] </ref>. A new process, the so called distribution manager (DM), was introduced. In the process architecture it was placed beneath the OM and EM processes. The architecture is shown in Figure 5. The distribution manager is responsible for the coordination of the distributed architecture. <p> Therefore, our goal is to make communication as efficient as possible. In the previous approach <ref> [MZF + 92] </ref> nothing was said about the actual network topology. 5 In DOMS, a tool process establishes BCM connections to all three servers when it logs in to the system. <p> If a lock cannot be granted the operation is delayed by suspending the corresponding OM thread until the lock is available or a deadlock is detected (see also Section 3.1.5). For more information on OMS concurrency control see <ref> [MZF + 92] </ref>. 3.1.2 Evaluation of Concurrency Control Methods for DOMS One of the first questions we had to answer in this context was whether to change the concurrency control method used in OMS or not. <p> federated Versant multi-server transparently distributed flat transactions [Ver91] object server 2PC hierarch. object locking data migration various lock modes heterogen. networks 2PL ORION-2/ multi-server transparently distributed flat transactions ITASCA object server 2PC object/page locking [Pat90] replication (schema) 2PL object migration dist. query optimizing federated OMS multi-server transparently distributed nested transactions <ref> [MZF + 92] </ref> object server 2PC object/container locking operation server replication strict 2PL database kernel heterogen. networks event management redo log Table 5: Summarized Overview of OODBMS 29 * Persistent Events | In the current version of DOMS, a tool's event definitions are lost when the tool logs out.
Reference: [NS95] <author> Michael O. Neary and Dirk Schumacher. </author> <title> DOMS | A Prototype of a Distributed, Object Oriented, Active Database Kernel as a Framework for Cooperative Transactions. </title> <type> Master's thesis, </type> <institution> Universitat-Gesamthochschule Paderborn, Germany, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Upon commit of this transaction the trigger messages are sent. Again, messages for remote tools are routed through the EM network. For a detailed description of data structures and the search algorithm the interested reader is referred to <ref> [NS95] </ref>. 4.1.4 Callback Functions When an event is detected by EM the tool that set the event must be informed. Therefore, trigger messages are sent to the tools 10 that set the event. <p> If the tool were not logged in anymore there would not be a connection to the local EM and thus, the trigger message could not be delivered. Information about the circumstances of an event occurrence is passed to the callback function by its parameters. For more information, see <ref> [NS95] </ref>. 4.1.5 Event Recovery A new feature of event management in DOMS is event recovery. Events in OMS are lost after a failure as they are not subject to database recovery. <p> Further practical tests under different application tools are needed in order to determine system performance in "real life" conditions. For more information on DOMS including some theoretical background on concurrency control strategies and event management, a more specific discussion of other related work, and implementation details, please see <ref> [NS95] </ref>.
Reference: [Pat90] <author> P.C. Patton. </author> <title> The Itasca Object-Oriented Database Management System, </title> <year> 1990. </year>
Reference-contexts: 2PL redo log checkin/checkout version handling Objectivity multi-server transparently distributed hierarch. locking [Wad93] 2PC heterogen. networks federated Versant multi-server transparently distributed flat transactions [Ver91] object server 2PC hierarch. object locking data migration various lock modes heterogen. networks 2PL ORION-2/ multi-server transparently distributed flat transactions ITASCA object server 2PC object/page locking <ref> [Pat90] </ref> replication (schema) 2PL object migration dist. query optimizing federated OMS multi-server transparently distributed nested transactions [MZF + 92] object server 2PC object/container locking operation server replication strict 2PL database kernel heterogen. networks event management redo log Table 5: Summarized Overview of OODBMS 29 * Persistent Events | In the current
Reference: [POW + 93] <author> N. W. Paton, O.Diaz, M. H. Williams, J. Campin, A. Dinn, and A. Jaime. </author> <title> Dimensions of Active Behaviour. </title> <editor> In N. W. Paton and M H. Williams, editors, </editor> <title> Rules in Database Systems, </title> <booktitle> Edinburgh 1993, </booktitle> <pages> pages 40-57, </pages> <year> 1993. </year>
Reference-contexts: Other systems bind their events to objects, which results in an interconnection between event management and concurrency control. In our system, OM need not be bothered with event management and thus can focus on its specific tasks. To make different active systems comparable, <ref> [POW + 93] </ref> defined five categories describing the fundamental features of these systems. They proposed the following dimensions. * Event Among others the following points are addressed. What event types exist? (Primitive/Composite) What happening can trigger an event? (e.g. <p> In contrast to other systems we have E-A rules instead of E-C-A rules in DOMS. , most of the dimensions can be found in DOMS, too. Table 3 shows DOMS events categorized according to <ref> [POW + 93] </ref>'s scheme. <p> Dimensions in DOMS Event Type: Primitive Source: Structure Operation, Behaviour Invocation, External Action Mode: Immediate, Detached Options: Update-DB, Update-Rules, Inform, Abort Execution Granularity: Instance Model Binding Model: Instance Management Operations: Activate, Deactivate Description: Programming Language Adaptability: Run Time Data Model: Object-Oriented Table 3: Event Management in DOMS active systems in <ref> [POW + 93] </ref> shows that event management in DOMS can compete with those. A task more difficult to solve would be the extension to complex events.
Reference: [SZ89] <author> A.H. Skarra and S.B. Zdonik. </author> <title> Concurrency Control and Object-Oriented Databases. </title> <editor> In W. Kim and F.H. Lochovsky, editors, </editor> <booktitle> Object-Oriented Concepts, Databases, and Applications, </booktitle> <pages> pages 395-421. </pages> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: A number of alternative concepts exist in this area that also provide good support for long, interactive, and cooperative design processes. Of the two cooperation primitives, notification and groups, most of these approaches seem to focus a lot more on groups than on notification. Especially the transaction groups approach <ref> [SZ89, HZ87] </ref> and the tool kit concept [US92] put considerable effort into structuring transactions in trees. A problem that arises with this type of structure is that it does not model the real world correctly.
Reference: [Tic85] <author> W. Tichy. </author> <title> RCS | A System for Version Control. </title> <journal> Software Practice and Experience, </journal> <volume> 15(7) </volume> <pages> 637-654, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Most of these modules hold declarations and methods which are specially designed for one of the servers. Just like many software projects, however, there are some shared data structures which are kept in common header files. Figure 15 depicts the structure of the project. 11 Revision Control System, see <ref> [Tic85] </ref>. 21 Now let us imagine that developer Dirk is working on the EM server whereas Michael is implementing DM routines. As they are working along independently they both need to "reserve" the modules they wish to modify.
Reference: [US92] <author> R. Unland and G. </author> <title> Schlageter. A Transaction Manager Development Facility for Non Standard Database Systems. In A.K. </title> <editor> Elmagarmid, editor, </editor> <booktitle> Database Transaction Models for Advanced Applications, </booktitle> <pages> pages 399-466. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: Of the two cooperation primitives, notification and groups, most of these approaches seem to focus a lot more on groups than on notification. Especially the transaction groups approach [SZ89, HZ87] and the tool kit concept <ref> [US92] </ref> put considerable effort into structuring transactions in trees. A problem that arises with this type of structure is that it does not model the real world correctly. The interactions among designers in a large software project, for example, cannot be expressed by a tree.
Reference: [Ver91] <institution> Versant Object Technology. Product Profile, </institution> <year> 1991. </year>
Reference-contexts: server object locking two-phase locking (2PL) flexible lock modes cooperative transactions ObjectStore multi-server distributed nested transactions [LLOW91] page server two-phase commit (2PC) page locking heterogen. networks strict 2PL redo log checkin/checkout version handling Objectivity multi-server transparently distributed hierarch. locking [Wad93] 2PC heterogen. networks federated Versant multi-server transparently distributed flat transactions <ref> [Ver91] </ref> object server 2PC hierarch. object locking data migration various lock modes heterogen. networks 2PL ORION-2/ multi-server transparently distributed flat transactions ITASCA object server 2PC object/page locking [Pat90] replication (schema) 2PL object migration dist. query optimizing federated OMS multi-server transparently distributed nested transactions [MZF + 92] object server 2PC object/container locking
Reference: [Wad93] <author> A. Wade. </author> <title> Single Logical View over Enterprise-Wide Distributed Databases. </title> <booktitle> In Proc. ACM SIGMOD, </booktitle> <pages> pages 441-444, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: event recovery cooperative transactions ObServer single-server N/A nested transactions [HZ87] object server object locking two-phase locking (2PL) flexible lock modes cooperative transactions ObjectStore multi-server distributed nested transactions [LLOW91] page server two-phase commit (2PC) page locking heterogen. networks strict 2PL redo log checkin/checkout version handling Objectivity multi-server transparently distributed hierarch. locking <ref> [Wad93] </ref> 2PC heterogen. networks federated Versant multi-server transparently distributed flat transactions [Ver91] object server 2PC hierarch. object locking data migration various lock modes heterogen. networks 2PL ORION-2/ multi-server transparently distributed flat transactions ITASCA object server 2PC object/page locking [Pat90] replication (schema) 2PL object migration dist. query optimizing federated OMS multi-server transparently
Reference: [YEEK87] <author> S. Yeh, C. Ellis, A. Ege, and H. Korth. </author> <title> Performance Analysis of Two Concurrency Control Schemas for Design Environments. </title> <type> Technical Report STP-036-87, </type> <institution> MCC, Austin, Texas, </institution> <year> 1987. </year> <month> 31 </month>
Reference-contexts: In advanced applications like SDEs it is often possible to define specific semantic consistency constraints that will 22 allow the database system to accept non-serializable schedules, leading to more concurrency. A number of studies have therefore arrived at the following requirements for concurrency control in advanced applications <ref> [BKK85, YEEK87] </ref>. 1. Supporting long transactions. Unlike traditional transactions, operations in design environments are often long-lived. In most cases it is unacceptable to block other transactions until a long transaction commits. Therefore, intelligent support mechanisms have to be found.
References-found: 24

