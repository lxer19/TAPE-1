URL: http://www.cs.wisc.edu/ZOO/PAPERS/frogturtle.ps
Refering-URL: http://www.cs.wisc.edu/ZOO/papers.html
Root-URL: 
Email: fvaish,yannis,mirong@cs.wisc.edu  
Title: FROG and TURTLE: Visual Bridges Between Files and Object-Oriented Data  
Author: Vaishnavi Anjur Yannis E. Ioannidis Miron Livny 
Address: Wisconsin, Madison, WI 53706  
Affiliation: Department of Computer Sciences, University of  
Abstract: The problem of translating database objects into a flat format to be written out in a flat Ascii file or, conversely, translating the contents of a file into a complex database object arises in several applications. It is especially important in scientific database applications, where file-based communication with external programs (e.g., visualization packages or model simulations) is very common. We introduce Frog, a visual tool that can be used to specify translations between database objects and flat files, requiring no programming by the user. The tool can deal with objects of arbitrary complexity, withoutthe object complexity being directly reflected in the complexity of the corresponding visual interaction. Based on the visual actions of the user, the tool stores enough information in a map-file, whose contents are used at run-time by another tool, Turtle, to translate any chosen database object into the appropriate file layout. The tool has been developed as part of the ZOO desktop Experiment Management Environment and has been used by a few experimental scientists with success. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Chipperfield et al. </author> <title> Growth of data in the genome data base since ccm92 and methods for access. </title> <booktitle> In Proc. Human Genome Mapping, </booktitle> <pages> pages 3-5, </pages> <year> 1993. </year>
Reference-contexts: These are declarative report-writing languages that are tailored towards the requirements of chemistry applications. Chipperfield et al. address the issues of storing genome data into a relational database, migrating data from other sources into that database, and retrieving data from that database <ref> [1] </ref>. The database can be interfaced with applications that process the data in well-defined formats for the genome. Both the above tools were developed to provide interoperability between specific applications, so they work primarily within the specific domains for which they were built.
Reference: [2] <author> J. Cushing et al. </author> <title> Object-oriented database support for computational chemistry. </title> <editor> In H. Hinterberger and J.C. French, editors, </editor> <booktitle> Proc. 6th International Working Conference on Statistical and Scientific Database Management, </booktitle> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: The Computational Chemistry Database project [3] provides inter-operability between computational chemistry applications by encapsulating the applications and data in an object-oriented database. The system is based on the framework developed by Cushing et al. <ref> [2] </ref> for interfacing experiments with a database and has been demonstrated to serve the needs of computational chemists. The system translates data between databases and files that have well defined layouts. The layout of the files is specified using CCIL and CCOL (Computational Chemistry Input/Output Language).
Reference: [3] <author> J. Cushing, D. Maier, M. Rao, D. Abel, D. Feller, and D. DeVaney. </author> <title> Computational proxies: Modeling scientific applications in object databases. </title> <booktitle> In Proc. 7th International Conference on Statistical and Scientific Database Management, </booktitle> <address> Charlottesville, VA, </address> <month> Septem-ber </month> <year> 1994. </year>
Reference-contexts: We first mention such tools that have been developed in the context of scientific databases, as this has been our primary motivation as well. The Computational Chemistry Database project <ref> [3] </ref> provides inter-operability between computational chemistry applications by encapsulating the applications and data in an object-oriented database. The system is based on the framework developed by Cushing et al. [2] for interfacing experiments with a database and has been demonstrated to serve the needs of computational chemists.
Reference: [4] <author> ISO Group. </author> <title> ISO 10303: Guidelines for the development and approval of STEP application protocols, version 1.0. </title> <type> Technical Report ISO TC184/SC4/WG4NS4(P5), ISO, </type> <month> February </month> <year> 1992. </year>
Reference-contexts: The Ontos OODBMS has mechanisms to provide a uni fied view of data residing in different databases. In particu-lar, Ontos allows product descriptions to be transferred between manufacturing systems and Ontos databases. Following the STEP standard, the structure (schema) of product data is specified using the EXPRESS language <ref> [4, 10] </ref>, which is translated into an Ontos schema. Any product data file is an instance of a given EXPRESS schema. Users annotate such a file with path expressions on the corresponding schema, which can then be translated into an Ontos object.
Reference: [5] <author> E. Haber, Y. Ioannidis, and M. Livny. Opossum: </author> <title> Desktop schema management through customizable visualization. </title> <booktitle> In Proc. 21st International VLDB Conference, </booktitle> <pages> pages 527-538, </pages> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: The Moose schema for the experiment concerned is also brought in graph form on another window managed by the Opossum schema manager <ref> [5] </ref>. The entire mapping task proceeds by repeating the following step sequence. 1. The designer chooses an area in the sample file (by high lighting it with the mouse). This signifies that mapping specifications for that part of the file will be given.
Reference: [6] <institution> SAS Institute Inc. </institution> <note> SAS Language Reference Version 6. </note> <year> 1990. </year>
Reference-contexts: Although adequate and/or desirable in manufacturing applications, having the users annotate every single data file with the appropriate schema information would have been a serious problem in the ZOO environment. That's why we followed the Frog/Turtle approach. Finally, SAS <ref> [6] </ref> and SPSS [7] are established statistical tools that allow file structures to be described by FORTRAN-like commands for statistical analyses, report writing, and data-file building. They are more powerful than Frog/Turtle because they can handle arbitrary processing of data as it is translated.
Reference: [7] <institution> SPSS Inc. </institution> <note> SPSS User's guide, 3rd edition. </note> <year> 1988. </year>
Reference-contexts: Although adequate and/or desirable in manufacturing applications, having the users annotate every single data file with the appropriate schema information would have been a serious problem in the ZOO environment. That's why we followed the Frog/Turtle approach. Finally, SAS [6] and SPSS <ref> [7] </ref> are established statistical tools that allow file structures to be described by FORTRAN-like commands for statistical analyses, report writing, and data-file building. They are more powerful than Frog/Turtle because they can handle arbitrary processing of data as it is translated.
Reference: [8] <author> Y. Ioannidis, M. Livny, and S. Gupta. </author> <title> The ZOO desktop experiment management environment, </title> <month> February </month> <year> 1996. </year> <note> Submitted for publication. </note>
Reference-contexts: We describe the contents of the map-file that is generated by Frog and also how Turtle uses them for specific translations. This whole effort has been carried out within the context of the ZOO Desktop Experiment Management Environment that we have been developing <ref> [8] </ref>. <p> We are involved in the development of the ZOO desktop Experiment Management Environment that aspires to bring state-of-the-art management tools to the desk of experimental scientists <ref> [8] </ref>. ZOO is an integrated software package that will enable such scientists to manage their experiments and associated data from their desk via a uniform interface.
Reference: [9] <author> C. Lewerentz and E. Casais. STONE: </author> <title> A short overview. </title> <type> Technical Report FZI.040.1, </type> <institution> Forschungszentrum Infor-matik (FZI), Karlsruhe, Germany, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: Similar efforts exist outside the scientific database realm as well. In some approaches, the contents of an Ascii file are described by means of a grammar. The OBST persistent object management system [11] (developed as part of the STONE <ref> [9] </ref> environment) supports a tool called the Universal Structurer and Flattener (STF). If the structure of a file can be described by a context-free grammar, STF can generate a parser (structurer) and unparser (flattener) for the file.
Reference: [10] <author> D. Schenck. </author> <title> Exchange of product model data part 11: The Express language. </title> <type> Technical Report TC184/SC4 Document NC64, ISO, </type> <month> July </month> <year> 1990. </year>
Reference-contexts: The Ontos OODBMS has mechanisms to provide a uni fied view of data residing in different databases. In particu-lar, Ontos allows product descriptions to be transferred between manufacturing systems and Ontos databases. Following the STEP standard, the structure (schema) of product data is specified using the EXPRESS language <ref> [4, 10] </ref>, which is translated into an Ontos schema. Any product data file is an instance of a given EXPRESS schema. Users annotate such a file with path expressions on the corresponding schema, which can then be translated into an Ontos object.
Reference: [11] <author> J. Uhl et al. </author> <title> The object management system of STONE - OBST release 3.2. </title> <type> Technical Report FZI.027.1, </type> <institution> Forschungszentrum Informatik (FZI), Karlsruhe, Ger-many, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: In addition, it offers a visual user interface that significantly affects usability. Similar efforts exist outside the scientific database realm as well. In some approaches, the contents of an Ascii file are described by means of a grammar. The OBST persistent object management system <ref> [11] </ref> (developed as part of the STONE [9] environment) supports a tool called the Universal Structurer and Flattener (STF). If the structure of a file can be described by a context-free grammar, STF can generate a parser (structurer) and unparser (flattener) for the file.
Reference: [12] <author> J. Wiener and Y. Ioannidis. </author> <title> A Moose and a Fox can aid scientists with data management problems. </title> <booktitle> In Proc. 4th International Workshop on Database Programming Languages, </booktitle> <pages> pages 376-398, </pages> <address> New York, NY, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: In a similar fashion, when the external processing is over, the output file produced is translated into database objects. Turtle and Frog are the focus of this paper, so they are described extensively in subsequent sections. Understanding their operation requires some familiarity with Moose and Fox <ref> [12] </ref>, the data model and query language of the database server of ZOO, which are briefly described below. There are three kinds of object classes in Moose: primitive, tuple, and collection. The primitive classes are integer, real, boolean, and character-string.
References-found: 12

