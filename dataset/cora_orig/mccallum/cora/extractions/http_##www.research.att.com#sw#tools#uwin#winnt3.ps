URL: http://www.research.att.com/sw/tools/uwin/winnt3.ps
Refering-URL: http://www.research.att.com/sw/tools/uwin/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: (dgk@research.att.com)  
Title: UWIN UNIX* for Windows  
Author: David G. Korn 
Address: Florham Park, N. J. 07932  
Affiliation: AT&T Laboratories  
Abstract: This paper describes an effort of trying to build a UNIX interface layer on top of the Windows NT [1] and Windows 95 [2] operating system. The goal was to build an open environment rich enough to be both a good development environment and a suitable execution environment. The result of this effort is a set of libraries, headers, and utilities that we collectively refer to as UWIN. UWIN contains nearly all the X/Open Release 4 [3] headers, interfaces, and commands. An earlier paper on porting to Windows NT [4] , describes alternative porting strategies and presents some performance results for UWIN. In this paper we discuss some of the design decisions behind UWIN and some of the results so far as well as some of the remaining challenges. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <institution> Microsoft Win32 Programmer's Reference, Volume 2 Microsoft Press, </institution> <year> 1993. </year>
Reference: 2. <author> Matt Pietrek, </author> <title> Windows 95 System Programming Secrets, </title> <publisher> IDG Books, </publisher> <year> 1995. </year>
Reference: 3. <author> The X/Open Release 4 CAE Specification, </author> <title> System Interfaces and Headers, </title> <journal> Issue 4, </journal> <volume> Vol. 2, </volume> <publisher> X/Open Co., Ltd., </publisher> <year> 1994. </year>
Reference: 4. <author> David Korn, </author> <title> Porting UNIX to Windows NT, </title> <booktitle> Proceedings of the Anaheim Usenix, </booktitle> <pages> pp. 43-58, </pages> <year> 1997. </year>
Reference: 5. <author> Practical Reusable UNIX Software, </author> <title> Edited by Balanchander Krishnamurthy, </title> <publisher> John Wiley & Sons, </publisher> <year> 1995. </year>
Reference-contexts: Yet, maintaining separate source code versions and development environments creates additional expense and requires more programmer training. The Software Engineering Research department at AT&T Labs writes and distributes several widely used development tools and reusable libraries that are portable across virtually all UNIX platforms. <ref> [5] </ref> To enhance reuse of these tools and libraries, we wanted to make them available on systems running Windows NT and/or Windows 95.
Reference: 6. <institution> The OpenEdition MVS Users Guide,IBM,1996. </institution>
Reference-contexts: In addition, it often limits one to the least common denominator of features of the different operating systems. An alternative is to build a middleware layer based on existing standards. This has been the approach followed by IBM with the introduction of OpenEdition <ref> [6] </ref> for the MVS operating system, URL http://www.s390.ibm.com/products/oe. OpenEdition is X/Open compliant so that a large collection of existing software can be transported at little cost. Windows NT is an operating system developed by Microsoft to fill the needs of the high-end market.
Reference: 7. <author> M. Accetta et al., </author> <title> Mach: A New Kernel Foundation for Unix Development, </title> <booktitle> Usenix Association Proceedings, </booktitle> <month> Summer </month> <year> 1986. </year>
Reference-contexts: Windows NT is an operating system developed by Microsoft to fill the needs of the high-end market. It is a layered architecture, designed from the ground up, built around a microkernel that is similar to Mach. <ref> [7] </ref> One or more subsystems can reside on top of the microkernel which gives Windows NT the ability to run different logical operating systems simultaneously. For example, the OS/2 subsystem allows OS/2 applications to run on Windows NT.
Reference: 8. <author> Jeffrey Richter, </author> <title> Advanced Windows The Developers Guide to the Win32 API for Windows NT 3.5 and Windows 95, </title> <publisher> Microsoft Press, </publisher> <year> 1995. </year>
Reference-contexts: For example, the OS/2 subsystem allows OS/2 applications to run on Windows NT. The most important subsystem that runs on Windows NT is the WIN32 subsystem. The WIN32 subsystem runs all applications that are written to the WIN32 Application Programming Interface (API) <ref> [8] </ref> . The API for the WIN32 subsystem is also provided with Windows 95, although not all of the functions are implemented. In most instances binaries compiled for Windows NT that use the WIN32 API will also run on Windows 95.
Reference: 9. <author> POSIX Part 1: </author> <title> System Application Program Interface, </title> <journal> IEEE Std 1003.1-1990, ISO/IEC 9945-1,1990. </journal>
Reference-contexts: In most instances binaries compiled for Windows NT that use the WIN32 API will also run on Windows 95. The POSIX subsystem allows applications that are strictly conforming to the IEEE POSIX 1003.1 operating system standard <ref> [9] </ref> to run on Windows NT. Since the POSIX standard contains most of the standard UNIX system call interface, many UNIX utilities are simple to port to any POSIX system.
Reference: 10. <author> Richard A. Becker, John M. Chambers, and Alan R. Wilks, </author> <title> The New S Language : A Programming Environment for Data Analysis and Graphics, </title> <publisher> Wadsworth & Brooks/Cole, </publisher> <address> New Jersey, </address> <year> 1988. </year>
Reference-contexts: After the initial set of utilities was running, we wanted to get several socket based tools working. Several projects at AT&T that became interested in using our libraries, required the System V IPC facilities. The S graphics system <ref> [10] </ref> and ksh-93 [11] required runtime dynamic linking. As the project progressed, the need for privileged users, such as root on UNIX systems, surfaced. We decided that it was important to have setuid and setgid capabilities.
Reference: 11. <author> Morris Bolsky and David Korn, </author> <title> The New KornShell Command and Programming Language, </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: After the initial set of utilities was running, we wanted to get several socket based tools working. Several projects at AT&T that became interested in using our libraries, required the System V IPC facilities. The S graphics system [10] and ksh-93 <ref> [11] </ref> required runtime dynamic linking. As the project progressed, the need for privileged users, such as root on UNIX systems, surfaced. We decided that it was important to have setuid and setgid capabilities.
Reference: 12. <author> Glenn S. Fowler, </author> <title> A Case for Make, </title> <journal> Software - Practice and Experience, </journal> <volume> Vol. 20, No. S1, </volume> <pages> pp. 30-46, </pages> <year> 1990. </year>
Reference-contexts: We needed to have a complete set of UNIX development tools since we didn't want to get into the business of rewriting makefiles or changing build scripts. Most code written at AT&T, including our own, uses nmake <ref> [12] </ref> , (no relation to the Microsoft nmake), but we also wanted to be able to support other make variants. We didn't want to do manual configuration on tools that have automatic configuration scripts.
Reference: 13. <author> M. McKusik, W. Joy, S. Leffler, and R. </author> <month> Farbry, </month>
Reference-contexts: There is no distinction between upper and lower case although the case is preserved. HPFS, which stands for High Performance File System, was designed for OS/2. NTFS, the native NT File System, is similar to the Berkeley file system. <ref> [13] </ref> It allows long file names (up to 255 characters) and supports both upper and lower case characters. It stores file names as 16 bit Unicode names. The file system namespace in Win32 is hierarchical as it is in UNIX and DOS.
References-found: 13

