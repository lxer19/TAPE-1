URL: http://www.cs.berkeley.edu/~rmartin/papers/mef-nossdav98.ps
Refering-URL: http://www.cs.berkeley.edu/~rmartin/abstracts.html
Root-URL: 
Title: 1 On Using Intelligent Network Interface Cards to support Multimedia Applications  
Author: Marc E. Fiuczynski Richard P. Martin Tsutomu Owa Brian N. Bershad 
Address: Seattle, WA 98195  Berkeley, Berkeley, CA 94720  Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering, University of Washington,  Department of Electrical Engineering and Computer Science, University of California at  Toshiba, Japan. Visiting Researcher at Dept. of Comp. Sci. and Eng., University of Washington,  
Abstract: The emergence of fast, cheap embedded processors presents the opportunity for inexpensive processing to occur on the network interface. We are investigating how a system design incorporating such an intelligent network interface can be used to support streaming multimedia applications. We are developing an extensible execution environment, called SPINE, that enables applications to compute directly on the network interface and communicate with other applications executing on the host CPU, peer devices, and remote nodes. Using SPINE, we have implemented a video client that executes on the network interface, and transfers video data arriving from the network directly to the region of frame buffer memory representing the applications window. As a result of this system structure the video data is transferred only once over the I/O bus and places no load on the host CPU to display video at aggregate rates exceeding 80 Mbps. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B.N. Bershad, S. Savage, P. Pardyak, E.G. Sirer, M.E. Fiuczynski, D. Becker, S. Eggers, C. Chambers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> Proc. </booktitle> <address> SOSP-15, </address> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Our strategy is to provide an extensible runtime environment, called SPINE [9], for programmable network interface cards. Extensibility is important, as we cannot predict the types of applications that may want to process directly on the network interface. SPINE extends the fundamental ideas in SPIN <ref> [1] </ref> - type safe code (called extensions) downloaded into a trusted execution environment - to the network interface. Specifically, SPINE has three properties that are key to the construction of applicationspecific solutions: Runtime adaptation and Extensibility.
Reference: [2] <author> P. Druschel and B.Gaurav. </author> <title> Lazy Receiver Processing (LRP): A Network Subsystem Architecture for Server Systems. </title> <booktitle> Proc. </booktitle> <address> OSDI96, </address> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: Multimedia applications we believe that will benefit from this architecture range from high-definition video clients, multimedia editors, Video-on-Demand servers (e.g., [6]), and 3D distributed real-time rendering (e.g., [7]). Other applications that may benefit, though not directly related to multimedia, range from packet filtering (e.g., Lazy Receive Processing <ref> [2] </ref>), cluster based storage management (e.g., Petal [3]), to distributed memory management systems (e.g., Global Memory [4]). Our strategy is to provide an extensible runtime environment, called SPINE [9], for programmable network interface cards.
Reference: [3] <author> E.K. Lee and C.A. Thekkath. </author> <title> Petal: Distributed Virtual Disks. </title> <booktitle> Proc. </booktitle> <address> ASPLOS-7, </address> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: Other applications that may benefit, though not directly related to multimedia, range from packet filtering (e.g., Lazy Receive Processing [2]), cluster based storage management (e.g., Petal <ref> [3] </ref>), to distributed memory management systems (e.g., Global Memory [4]). Our strategy is to provide an extensible runtime environment, called SPINE [9], for programmable network interface cards. Extensibility is important, as we cannot predict the types of applications that may want to process directly on the network interface.
Reference: [4] <author> M.J. Feeley, W.E. Morgan, F. Pighin, A. Karlin, and H.M. Levy. </author> <title> Implementing Global Memory Management in a Workstation Cluster. </title> <booktitle> Proc. </booktitle> <address> SOSP-15. </address> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Other applications that may benefit, though not directly related to multimedia, range from packet filtering (e.g., Lazy Receive Processing [2]), cluster based storage management (e.g., Petal [3]), to distributed memory management systems (e.g., Global Memory <ref> [4] </ref>). Our strategy is to provide an extensible runtime environment, called SPINE [9], for programmable network interface cards. Extensibility is important, as we cannot predict the types of applications that may want to process directly on the network interface.
Reference: [5] <author> T. von Eicken, D.E. Culler, S.C. Goldstein, and K.E. Schauser. </author> <title> Active Messages: A Mechanism for Integrated Communication and Computation. </title> <booktitle> Proc. </booktitle> <address> ISCA-19, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: These buffers are accessed using unforgable references (i.e., an extension cannot create an arbitrary memory address as a DMA source or destination address), which may refer to local, peer device, or host-memory. 2.2 SPINE Communication Layer The SPINE communication layer is a variation of Active Messages <ref> [5] </ref> used by the NOW project at UC-Berkeley. It differs from other active message layer implementations in that it can execute shared-memory operations in the context of the network interface. This message layer has the flexibility to execute extension code either on the network interface or the host CPU.
Reference: [6] <author> W.J. Bolosky, J.S. Barrera III, R.P. Draves, R.P. Fitzgerald, G.A. Gibson, </author> <title> M.B. </title> <editor> Jones, S.P. Levi, N.P. Myhrvold, R.F. Rashid. </editor> <booktitle> The Tiger Video Fileserver. Proc. </booktitle> <address> NOSSDAV96, </address> <month> Apr. </month> <year> 1996. </year>
Reference-contexts: The motivation is to move applicationspecific functionality directly to the network interface, thereby reducing I/O related data and control transfers to the host system. Multimedia applications we believe that will benefit from this architecture range from high-definition video clients, multimedia editors, Video-on-Demand servers (e.g., <ref> [6] </ref>), and 3D distributed real-time rendering (e.g., [7]). Other applications that may benefit, though not directly related to multimedia, range from packet filtering (e.g., Lazy Receive Processing [2]), cluster based storage management (e.g., Petal [3]), to distributed memory management systems (e.g., Global Memory [4]).
Reference: [7] <author> Thu D. Nguyen and John Zahorjan. </author> <title> Scheduling Policies to Support Distributed 3D Multimedia Applications. </title> <note> To Appear Proc. SIGMETRICS '98, </note> <month> Jun. </month> <year> 1998. </year>
Reference-contexts: Multimedia applications we believe that will benefit from this architecture range from high-definition video clients, multimedia editors, Video-on-Demand servers (e.g., [6]), and 3D distributed real-time rendering (e.g., <ref> [7] </ref>). Other applications that may benefit, though not directly related to multimedia, range from packet filtering (e.g., Lazy Receive Processing [2]), cluster based storage management (e.g., Petal [3]), to distributed memory management systems (e.g., Global Memory [4]).
Reference: [8] <institution> Alteon Networks. Gigabit Ethernet Technology Brief. </institution> <note> Available from: http://www.alteon.com/techbr.html </note>
Reference-contexts: Therefore, we expect that future intelligent NICs will be fast enough for a variety of applicationspecific extensions. For example, Alteons ACEnic gigabit Ethernet interface has two 100MHz R4000 processors to allow for " the opportunity to implement more intelligent, value-added features <ref> [8] </ref>. Finally, there are various additional issues to be considered when using this type of hardware design and software architecture.
Reference: [9] <author> M.E. Fiuczynski. SPINE: </author> <title> A Safe Programmable and Integrated Network Environment. </title> <note> Overview Information available from: http://www.cs.washington.edu/homes/mef/research/spine </note>
Reference-contexts: Other applications that may benefit, though not directly related to multimedia, range from packet filtering (e.g., Lazy Receive Processing [2]), cluster based storage management (e.g., Petal [3]), to distributed memory management systems (e.g., Global Memory [4]). Our strategy is to provide an extensible runtime environment, called SPINE <ref> [9] </ref>, for programmable network interface cards. Extensibility is important, as we cannot predict the types of applications that may want to process directly on the network interface.
Reference: [10] <author> K. Jeffay, D.L. Stone, F.D. Smith. </author> <title> Transport and Display Mechanisms for Multimedia Conferencing Across PacketSwitched Networks. </title> <booktitle> Computer Networks and ISDN Systems. </booktitle> <month> Jul. </month> <year> 1994. </year>
Reference-contexts: Other applicationspecific techniques, which may not be easily adopted by commercial operating systems (if at all), could be implemented on the NIC as well. For example, the video client could be improved with Jeffays <ref> [10] </ref> buffer management techniques to reduce jitter in a congested network. Intelligent network cards are particularly compelling when the processor used on an intelligent NIC tracks the relative performance of the host processor.
References-found: 10

