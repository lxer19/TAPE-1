URL: http://ptolemy.eecs.berkeley.edu/papers/98/slate/slate.ps.gz
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/98/slate/
Root-URL: 
Email: fjohnr,ealg@eecs.berkeley.edu  
Title: The Tycho Slate: Complex Drawing and Editing in Tcl/Tk  
Author: H. John Reekie and Edward A. Lee 
Date: May 6, 1998  
Note: DRAFT:  
Address: Berkeley CA 94720  
Affiliation: School of Electrical Engineering and Computer Sciences University of California Berkeley  
Abstract: This paper introduces the Slate package, which has been developed as part of the Tycho project at UC Berkeley. The Slate is layered over the Tcl/Tk canvas, and contains features that we believe to be necessary or useful for implementing complex graphical editing and visualization widgets. The first key feature is a hierarchy of graphical items that is, items can be composed recursively of simpler items. The second is an implementation of the concept of interactor, which abstracts low-level mouse events into self-contained objects. The third is access to and modification of items based on their shape, rather than raw coordinates. Combined with a straight-forward implementation of the model-view-controller architecture, the Slate is capable of implementing quite sophisticated graphical editors. We describe our implementation in [incr Tcl] and give our assessment of future directions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Dave Collins. </author> <title> Designing Object-Oriented User Interfaces. </title> <address> Benjamin/Cummings, </address> <year> 1995. </year>
Reference-contexts: Internally, this graphical editor uses a variant of the model-view-controller architecture (see, for example, <ref> [1] </ref>). As the user places icons and connects terminals, the interactors forward events to either an edge 9 controller or a vertex controller see figure 8.
Reference: [2] <author> James D. Foley, Andries van Dam, Steven K. Feiner, and John F. Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice. </booktitle> <address> Addison-Wedley, </address> <year> 1996. </year> <note> Second Edition. </note>
Reference-contexts: After some experimentation, we ended up with an [incr Tcl] package that implements the following: A visual hierarchy The Slate implements a straight-forward visual hierarchy, as is common in many graphics packages (see, for example, <ref> [2] </ref>). We are able to define new kinds of graphical items that are composed of simpler items.
Reference: [3] <author> Michael Gleicher. </author> <title> A Differential Approach to Graphical Manipulation. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1994. </year> <note> Also appears as CMU School of Computer Science Technical Report CMU-CS-94-217. </note>
Reference-contexts: Predefined shapes mimic the primitive canvas item types: point, rectangle, oval, line, and polygon. An item with a given shape has a set of attributes called aspects. Aspects are inspired by Gleicher's work on constraint-based graphics <ref> [3] </ref>. An aspect is typically a point location on the item. An item can be queried to find the value of an aspect, and the aspect can be moved to change the shape of the item.
Reference: [4] <author> Scott E. Hudson. </author> <title> Semantic snapping: A technique for semantic feedback at the lexical level. </title> <booktitle> In Proc 1990 SIGCHI Conference, </booktitle> <pages> pages 65-70, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: When the cursor moves over a terminal, the DragDropper activates a call-back to test if the terminal is a suitable "drop target." If it is, it snaps <ref> [4] </ref> the end of the line to the connection point of the terminal, altering the shape of the line to make it join at the expected angle. Internally, this graphical editor uses a variant of the model-view-controller architecture (see, for example, [1]).
Reference: [5] <author> Brad. </author> <title> A Myers. A new model for handling input. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(3):289320, </volume> <month> July </month> <year> 1990. </year>
Reference-contexts: The visual hierarchy aids more complex item construction without discarding this powerful mechanism. However, the binding mechanism is low-level, and complex user interaction built on this mechanism very quickly mushrooms into spaghetti-like code. 3.2 Interactors The second interaction mechanism is based on interactors, proposed by Myers in 1990 <ref> [5] </ref> and implemented in the Garnet toolkit and its successor, Amulet [6, 7]. Interactors abstract user interaction from the lower-level events upon which they are built, and in the process modularize the code and make it more re-usable.
Reference: [6] <author> Brad A. Myers, Dario Giuse, Roger B. Dannenberg, Brad Vander Zanden, David Kosbie, Ed Pervin, Andrew Mickish, and Philippe Marchal. Garnet: </author> <title> Comprehensive support for graphical, highly-interactive user interfaces. </title> <journal> IEEE Computer, </journal> <volume> 23(1), </volume> <month> November </month> <year> 1990. </year>
Reference-contexts: However, the binding mechanism is low-level, and complex user interaction built on this mechanism very quickly mushrooms into spaghetti-like code. 3.2 Interactors The second interaction mechanism is based on interactors, proposed by Myers in 1990 [5] and implemented in the Garnet toolkit and its successor, Amulet <ref> [6, 7] </ref>. Interactors abstract user interaction from the lower-level events upon which they are built, and in the process modularize the code and make it more re-usable. An interactor is an object that intercepts events and translates them into operations on a target item.
Reference: [7] <author> Brad A. Myers, Richard G. McDaniel, Robert C. Miller, Alan S. Ferrency, Andrew Faulring, Bruce D. Kyle, Andrew Mickish, Alex Klimovitski, and Patrick Doan. </author> <title> The Amulet environment: New models for effective user interface software development. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 23(6):347365, </volume> <month> June </month> <year> 1997. </year>
Reference-contexts: However, the binding mechanism is low-level, and complex user interaction built on this mechanism very quickly mushrooms into spaghetti-like code. 3.2 Interactors The second interaction mechanism is based on interactors, proposed by Myers in 1990 [5] and implemented in the Garnet toolkit and its successor, Amulet <ref> [6, 7] </ref>. Interactors abstract user interaction from the lower-level events upon which they are built, and in the process modularize the code and make it more re-usable. An interactor is an object that intercepts events and translates them into operations on a target item.
Reference: [8] <author> H. John Reekie. </author> <title> Realtime Signal Processing: Dataflow, Visual, and Functional Programming. </title> <type> PhD thesis, </type> <institution> School of Electrical Engineering, University of Technology, </institution> <address> Sydney, Australia, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: To illustrate, figure 1 shows a mock-up visual program of the kind that we were interested in implementing. This is a sample of a language developed in <ref> [8] </ref>. The rectangle marked "let" encloses an expression, and the value of the expression is indicated by the arrow connecting the two triangular "terminals." The let-expression itself is connected to another function box.
Reference: [9] <author> James Rumbaugh, Michael Blaha, William Premerlani, Frederick Eddy, and William Lorenson. </author> <title> ObjectOriented Modeling and Design. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year> <month> 11 </month>
References-found: 9

