URL: ftp://ftp.cs.orst.edu/pub/tgd/papers/tr-tih.ps.gz
Refering-URL: http://www.cs.orst.edu/~tgd/cv/pubs.html
Root-URL: 
Title: The Test Incorporation Hypothesis and the Weak Methods  
Author: James S. Bennett Thomas G. Dietterich 
Note: Submitted to  a The authors have chosen to list their names in alphabetical order.  
Address: 1850 Embarcadero Road Palo Alto, California 94303  Corvallis, Oregon 97331  AAAI-86, Philadelphia, PA  
Affiliation: Teknowledge, Inc.  Department of Computer Science Oregon State University  
Abstract: Test incorporations are program transformations that improve the performance of generate-and-test procedures by moving information out of the "test" and into the "generator." The test information is said to be "incorporated" into the generator so that items produced by the generator are guaranteed to satisfy the incorporated test. This article proposes and investigates the hypothesis that a general theory of AI methods can be constructed using only test incorporations. Starting from an initial generate-and-test algorithm, we attempt to derive the weak methods of heuristic search, hill climbing, and avoiding duplicates via a series of test incorporations. The derivations show that test incorporations are very powerful but that occasionally other program reformulations are required. Nevertheless, we conclude that test incorporation provides a good foundation upon which to construct a general theory of methods. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Amarel, S. </author> <year> 1968. </year> <title> On the representation of problems of reasoning about actions. </title> <editor> In Michie (ed), </editor> <booktitle> Machine Intelligence 3, </booktitle> <publisher> U. of Edinburgh Press. </publisher>
Reference: <author> Amarel, S. </author> <year> 1982. </year> <title> Expert behavior and problem representations. </title> <type> Rep. </type> <institution> No. CBM-TR-126, Department of Computer Science, Rutgers University. </institution>
Reference-contexts: The naive generate-and-test versions of these systems include large amounts of knowledge in their tests. The problem-solving strength of these systems|in comparison to the weak methods|derives from the fact that this knowledge has been incorporated into their (often implicit) generators <ref> (see Amarel, 1982) </ref>. These incorporations are made during system development by the knowledge engineer and the expert. We are also pursuing the design of an automated "incorporation problem solver" (IPS) that performs test incorporations along the lines already investigated by Tappel and Mostow.
Reference: <author> Amarel, S. </author> <year> 1983. </year> <title> Program synthesis as a theory formation task|problem representations and solution methods. </title> <type> Rep. </type> <institution> No. CBM-TR-135, Department of Computer Science, Rutgers University. </institution>
Reference: <author> Kahn, K. M. </author> <year> 1983. </year> <title> A partial evaluator of Lisp written in Prolog. </title> <institution> UPMAIL memo, Department of Computing Science, Uppsala University. </institution> <note> 12 Kant, </note> <author> E. </author> <year> 1979. </year> <title> Efficiency considerations in program synthesis: A knowledge-based approach. Doc--toral dissertation. </title> <type> Rep. </type> <institution> No. STAN-CS-79-755. Department of Computer Science, Stanford University. </institution>
Reference-contexts: The IPS is itself a find best procedure that attempts to find the most efficient version of a given generate-and-test program (c.f. Kant, 1976). This perspective raises the possibility of applying the IPS to itself <ref> (Kahn, 1983) </ref>. The final direction we are pursuing concerns run-time incorporation. Most of the incorporations discussed in this paper have required that all the knowledge in the test is available for incorporation before problem-solving begins.
Reference: <author> Laird, J. E. </author> <year> 1984. </year> <title> Universal subgoaling. </title> <type> Rep. </type> <institution> No. CMU-CS-84-129. Doctoral Dissertation, Department of Computer Science, Carnegie-Mellon University. </institution>
Reference-contexts: Hence, their analysis provides one possible approach to generating the weak methods. The core program and the method increments are represented as sets of production rules in the SOAR architecture <ref> (Laird, 1984) </ref>. The program and the method increments are combined simply by forming the union of the sets of production rules. This modularity is obtained by constraining the production rules to interact only by expressing "preferences" for the future actions of the architecture.
Reference: <author> Laird, J. E., and Newell, A. </author> <year> 1983a. </year> <title> A universal weak method. </title> <type> Rep. </type> <institution> No. CMU-CS-83-141, Department of Computer Science, Carnegie-Mellon University. </institution>
Reference: <author> Laird, J. E., and Newell, A. </author> <year> 1983b. </year> <title> A universal weak method: summary of results. </title> <booktitle> Proceedings of IJCAI-83, </booktitle> <address> Los Altos: </address> <publisher> Morgan-Kaufman. </publisher> <pages> 771-773. </pages>
Reference: <author> Laird, J. E., Rosenbloom, P. S., and Newell, A. </author> <title> In press. Chunking in Soar: The anatomy of a general learning mechanism. </title> <note> To appear in Machine Learning. </note>
Reference: <author> Mostow, D. J. </author> <year> 1983a. </year> <title> Machine transformation of advice into a heuristic search procedure. In Machine Learning, </title> <editor> Michalski, R. S., Carbonell, J. G., and Mitchell, T. M., (eds.), </editor> <address> Palo Alto: </address> <publisher> Tioga. </publisher> <pages> 367-404. </pages>
Reference: <author> Mostow, D. J. </author> <year> 1983b. </year> <title> A problem-solver for making advice operational. </title> <booktitle> In Proceedings of AAAI-83, </booktitle> <address> Los Altos: </address> <publisher> Morgan-Kaufmann. </publisher> <pages> 279-83. </pages>
Reference: <author> Newell, A. </author> <year> 1969. </year> <title> Heuristic programming: ill-structured problems, in Progress in Operations Research, </title> <editor> Arnofsky, J., (ed.), </editor> <address> New York: </address> <publisher> Wiley. </publisher> <pages> 363-414. </pages>
Reference: <author> Newell, A. </author> <year> 1981. </year> <title> The Knowledge Level. </title> <type> AI Magazine 2 (2) 1-20. </type>
Reference-contexts: Part of the attractiveness of generate-and-test problem solvers and of test incorporation is the ease with which they yield to a knowledge-level analysis <ref> (Newell, 1981) </ref>. In a naive generate-and-test procedure, virtually all of the knowledge resides in the "test." The generator merely knows how to generate the elements of some search space. Test incorporation can be understood as moving knowledge from the test to the generator.
Reference: <author> Paige, R., and Koenig, S. </author> <year> 1982. </year> <title> Finite differencing of computable expressions. </title> <journal> ACM Transactions on Programming Languages and Systems. </journal> <volume> 4 (3) 402-454. </volume>
Reference-contexts: The output of T done acts as a gating signal to release c. We have not shown all of the fetch signals going into M sols and M bsf . This incorporation is an example of the finite differencing transformation studied by Paige <ref> (Paige and Koenig, 1982) </ref>. One form of finite differencing converts a function F (S) over a set S into a new function F 0 (el), where el is a new element being added to S.
Reference: <author> Simon, H. A., and Kadane, J. B. </author> <year> 1975. </year> <title> Optimal problem-solving search: all-or-none solutions. </title> <journal> Artificial Intelligence. </journal> <volume> 6 (3) 235-247. </volume>
Reference: <author> Smith, David E., and Genesereth, M. R. </author> <year> 1985. </year> <title> Ordering conjunctive queries. </title> <journal> Artificial Intelligence, </journal> <volume> 26 (2) 171-216. </volume>
Reference: <author> Smith, Douglas R. </author> <title> In press. On the design of generate-and-test algorithms: subspace generators. </title>
Reference: <author> Tappel, S. </author> <year> 1980. </year> <title> Some algorithm design methods. </title> <booktitle> In Proceedings of AAAI-80, </booktitle> <address> Stanford, California. </address> <pages> 64-67. </pages>
References-found: 17

