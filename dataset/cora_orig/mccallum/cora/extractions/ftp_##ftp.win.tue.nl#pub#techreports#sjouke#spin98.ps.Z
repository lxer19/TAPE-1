URL: ftp://ftp.win.tue.nl/pub/techreports/sjouke/spin98.ps.Z
Refering-URL: http://www.win.tue.nl/cs/fm/sjouke/publications.html
Root-URL: http://www.win.tue.nl
Email: W.Janssen@telin.nl, mateescu@cwi.nl, sjouke@win.tue.nl, spring@cwi.nl  
Phone: 2  3  
Title: Verifying Business Processes using SPIN  
Author: Wil Janssen Radu Mateescu y Sjouke Mauw ; Jan Springintveld z 
Address: P.O. Box 589, NL-7500 AN Enschede, The Netherlands  P.O. Box 94079, NL-1090 GB Amsterdam, The Netherlands  P.O. Box 513, NL-5600 MB Eindhoven, The Netherlands  
Affiliation: 1 Telematics Institute,  CWI, Department of Software Engineering,  Eindhoven University of Technology, Department of Mathematics and Computing Science,  
Abstract: We present an application of the Spin model-checker in Testbed, a framework for business process reengineering. Business processes are described by end-users of Testbed in a graphical language with a causality-based semantics, called Amber. The Amber language contains various constructs describing actions, causality relations, disabling, interaction and hierarchical composition. Data entities are modelled as variables that are handled by the business processes. We present a validation methodology for business processes using model-checking techniques. In this approach, an Amber specification is automatically translated into a state machine description in Promela, which is the input language of the Spin model-checker. The correctness properties, concerning both the behavioural aspects and the data entities used in the specification, are checked on the resulting Promela program using Spin. A prototype verification toolset has been developed and successfully applied to various examples inspired from industrial Amber specifications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Harel, H. Lachover, A. Naamad, A. Pnueli, M. Politi, R. Sherman and A. Shtull-Trauring, STATE-MATE: </author> <title> A working environment for the development of complex reactive systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16 (1990), 4, </volume> <pages> p. 403-414. </pages>
Reference-contexts: Based on that semantics automated analysis can be developed. Statecharts and the Statemate environment <ref> [1] </ref> are a good example of such an approach for reactive systems specifications, based on structured automata. Other examples are SDL and MSC [2, 3, 4], often used in the telecommunications industry. In the Testbed Project [5, 6] a systematic approach is developed to handle change of business processes.
Reference: [2] <author> K. Turner, </author> <title> editor. Using Formal Description Techniques. </title> <publisher> John Wiley & Sons, </publisher> <year> 1993. </year>
Reference-contexts: Based on that semantics automated analysis can be developed. Statecharts and the Statemate environment [1] are a good example of such an approach for reactive systems specifications, based on structured automata. Other examples are SDL and MSC <ref> [2, 3, 4] </ref>, often used in the telecommunications industry. In the Testbed Project [5, 6] a systematic approach is developed to handle change of business processes. To support this approach, an environment is built to model and analyse business processes.
Reference: [3] <author> Braek, R., </author> <title> SDL Basics. Computer Networks and ISDN Systems, </title> <booktitle> 28 (1996), p. </booktitle> <pages> 1585-1602. </pages>
Reference-contexts: Based on that semantics automated analysis can be developed. Statecharts and the Statemate environment [1] are a good example of such an approach for reactive systems specifications, based on structured automata. Other examples are SDL and MSC <ref> [2, 3, 4] </ref>, often used in the telecommunications industry. In the Testbed Project [5, 6] a systematic approach is developed to handle change of business processes. To support this approach, an environment is built to model and analyse business processes.
Reference: [4] <author> ITU-TS. </author> <title> ITU-TS Recommendation Z.120: Message Sequence Chart (MSC). </title> <address> ITU-TS, Geneva, </address> <year> 1997. </year>
Reference-contexts: Based on that semantics automated analysis can be developed. Statecharts and the Statemate environment [1] are a good example of such an approach for reactive systems specifications, based on structured automata. Other examples are SDL and MSC <ref> [2, 3, 4] </ref>, often used in the telecommunications industry. In the Testbed Project [5, 6] a systematic approach is developed to handle change of business processes. To support this approach, an environment is built to model and analyse business processes.
Reference: [5] <author> H.M. Franken. </author> <title> A virtual test environment for business processes, </title> <journal> ACM Bulletin of Special interest group on supporting group work, April, </journal> <volume> Vol. 18, </volume> <editor> N. </editor> <volume> 1, </volume> <pages> p. 63-67, </pages> <year> 1997. </year>
Reference-contexts: Statecharts and the Statemate environment [1] are a good example of such an approach for reactive systems specifications, based on structured automata. Other examples are SDL and MSC [2, 3, 4], often used in the telecommunications industry. In the Testbed Project <ref> [5, 6] </ref> a systematic approach is developed to handle change of business processes. To support this approach, an environment is built to model and analyse business processes. The primary users of the environment are business architects which are not trained in formal modelling or computer science. <p> The data entities used in the specification are given below. * A file recording information about customers, modelled by an array variable customerFile: Customer customerFile <ref> [5] </ref>; * A customer, modelled by a variable customerId: byte customerId; 11 * A car, modelled by a variable car: mtype car = Whole; * A decision taken by the process Pro-fit, modelled by a variable decision: mtype decision = None; * A damage assessed by the process Garage, modelled by
Reference: [6] <author> H. Franken and W. Janssen. </author> <title> Get a grip on changing business processes results from the Testbed project. </title> <journal> Knowledge and Process Management, </journal> <volume> Volume 5, Number 3, </volume> <publisher> 1998 (forthcoming). John Wiley & Sons Ltd. </publisher>
Reference-contexts: Statecharts and the Statemate environment [1] are a good example of such an approach for reactive systems specifications, based on structured automata. Other examples are SDL and MSC [2, 3, 4], often used in the telecommunications industry. In the Testbed Project <ref> [5, 6] </ref> a systematic approach is developed to handle change of business processes. To support this approach, an environment is built to model and analyse business processes. The primary users of the environment are business architects which are not trained in formal modelling or computer science.
Reference: [7] <author> W. Janssen, H. Jonkers and J. Verhoosel. </author> <title> What makes business processes special? An evaluation framework for modelling languages and tools in Business Process Redesign, </title> <editor> in Siau, Wand and Parsons (eds.), </editor> <booktitle> Proc. 2nd CAiSE/IFIP 8.1 Int. Workshop on Evaluation of Modelling Methods in Systems Analysis and Design, </booktitle> <address> Barcelona, Spain, </address> <year> 1997. </year> <note> (Available as http://www.telin.nl/publicaties/1997/caise97 final.doc) </note>
Reference-contexts: But, in order to allow for the analysis of complex models, the language should be supported by a formal syntax and semantics. Such properties are not often combined in languages for specifying business processes <ref> [7] </ref>. The Testbed language, called Amber (for Architectural Modelling Box for Enterprise Redesign), is a graphical specification language. Both the behaviour in a business process as well as the agents of the process and the data used are modeled. Behaviour is specified as actions with their enabling relations.
Reference: [8] <author> H. Jonkers, W. Janssen, A. Verschut en E. Wierstra, </author> <title> A unified framework for design and performance analysis of distributed systems, </title> <booktitle> to appear in Proc. 1998 IEEE Int. Computer Performance and Dependability Symposium (IPDS'98), </booktitle> <address> Durham, NC, USA, </address> <month> Sept. </month> <year> 1998. </year>
Reference-contexts: Behaviour is specified as actions with their enabling relations. Also, behaviour can be structured in a sequential fashion (phasing) and using CSP or Lotos style synchronisation (interaction or co-operation). Analysis is possible for both functional properties as well as quantitative (performance) properties. Quantitative analysis is discussed elsewhere <ref> [8] </ref>. This paper discusses how automated functional analysis in the Testbed setting can be realised. We do so by using the language Promela and the tool Spin [9, 10, 11] to perform the analysis. Amber models are translated to Promela on the basis of an operational semantics.
Reference: [9] <author> G.J. Holzmann. </author> <title> Design and Validation of Computer Protocols. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Analysis is possible for both functional properties as well as quantitative (performance) properties. Quantitative analysis is discussed elsewhere [8]. This paper discusses how automated functional analysis in the Testbed setting can be realised. We do so by using the language Promela and the tool Spin <ref> [9, 10, 11] </ref> to perform the analysis. Amber models are translated to Promela on the basis of an operational semantics. <p> Detailed descriptions of Ltl can be found in [12] or <ref> [9] </ref>. For the sake of completeness, we give here only a brief outline of the logic, mainly insisting on the way in which Ltl formulas are related to Amber specifications.
Reference: [10] <author> G.J. Holzmann. </author> <title> Design and Validation of Protocols: A Tutorial. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 25(9) </volume> <pages> 981-1017, </pages> <year> 1993. </year>
Reference-contexts: Analysis is possible for both functional properties as well as quantitative (performance) properties. Quantitative analysis is discussed elsewhere [8]. This paper discusses how automated functional analysis in the Testbed setting can be realised. We do so by using the language Promela and the tool Spin <ref> [9, 10, 11] </ref> to perform the analysis. Amber models are translated to Promela on the basis of an operational semantics.
Reference: [11] <author> G.J. Holzmann. </author> <title> The Model Checker SPIN. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 23(5) </volume> <pages> 279-295, </pages> <year> 1997. </year>
Reference-contexts: Analysis is possible for both functional properties as well as quantitative (performance) properties. Quantitative analysis is discussed elsewhere [8]. This paper discusses how automated functional analysis in the Testbed setting can be realised. We do so by using the language Promela and the tool Spin <ref> [9, 10, 11] </ref> to perform the analysis. Amber models are translated to Promela on the basis of an operational semantics.
Reference: [12] <author> A. Pnueli. </author> <title> The Temporal Logic of Programs. </title> <booktitle> Proceedings of the 18th IEEE Symp. on Foundations of Computer Science, </booktitle> <address> Providence, R.I., p. 46-57, </address> <year> 1977. </year> <month> 16 </month>
Reference-contexts: The execution of c produces no real effect on data, but only outputs the current value of the i variable. 3.3 Specification of temporal properties The temporal properties of Amber specifications are expressed using Ltl <ref> [12] </ref>, which is the property specification formalism accepted as input by Spin. Detailed descriptions of Ltl can be found in [12] or [9]. <p> no real effect on data, but only outputs the current value of the i variable. 3.3 Specification of temporal properties The temporal properties of Amber specifications are expressed using Ltl <ref> [12] </ref>, which is the property specification formalism accepted as input by Spin. Detailed descriptions of Ltl can be found in [12] or [9]. For the sake of completeness, we give here only a brief outline of the logic, mainly insisting on the way in which Ltl formulas are related to Amber specifications.
References-found: 12

