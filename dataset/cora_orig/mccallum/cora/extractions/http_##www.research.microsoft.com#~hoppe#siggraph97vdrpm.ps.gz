URL: http://www.research.microsoft.com/~hoppe/siggraph97vdrpm.ps.gz
Refering-URL: http://www.research.microsoft.com/~hoppe/
Root-URL: http://www.research.microsoft.com
Title: View-Dependent Refinement of Progressive Meshes  
Author: Hugues Hoppe 
Keyword: CR Categories: I.3.3 [Computer Graphics]: Picture/Image Generation Display algorithms; I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling surfaces and object representations. Additional Keywords: mesh simplification, level-of-detail, multiresolution representations, dynamic tessellation, shape interpolation.  
Affiliation: Microsoft Research  
Abstract: Level-of-detail (LOD) representations are an important tool for real-time rendering of complex geometric environments. The previously introduced progressive mesh representation defines for an arbitrary triangle mesh a sequence of approximating meshes optimized for view-independent LOD. In this paper, we introduce a framework for selectively refining an arbitrary progressive mesh according to changing view parameters. We define efficient refinement criteria based on the view frustum, surface orientation, and screen-space geometric error, and develop a real-time algorithm for incrementally refining and coarsening the mesh according to these criteria. The algorithm exploits view coherence, supports frame rate regulation, and is found to require less than 15% of total frame time on a graphics workstation. Moreover, for continuous motions this work can be amortized over consecutive frames. In addition, smooth visual transitions (geomorphs) can be constructed between any two selectively refined meshes. A number of previous schemes create view-dependent LOD meshes for height fields (e.g. terrains) and parametric surfaces (e.g. NURBS). Our framework also performs well for these special cases. Notably, the absence of a rigid subdivision structure allows more accurate approximations than with existing schemes. We include results for these cases as well as for general meshes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abi-Ezzi, S. S., and Subramaniam, S. </author> <title> Fast dynamic tessellation of trimmed NURBS surfaces. </title> <booktitle> Computer Graphics Forum (Proceedings of Eurographics '94) 13, 3 (1994), </booktitle> <pages> 107-126. </pages>
Reference-contexts: In addition, the block boundaries are unlikely to correspond to natural features in the surface, resulting in suboptimal approximations. Similar problems also arise in the adaptive tessellation of smooth parametric surfaces <ref> [1, 13, 18] </ref>. Specialized schemes have been presented to adaptively refine meshes for the cases of height fields and parametric surfaces, as summarized in Section 2.1. In this paper, we offer a general runtime LOD framework for selectively refining arbitrary meshes according to changing view parameters. <p> In this paper we demonstrate real-time modification of highly adaptable TIN's. Moreover, our framework extends to arbitrary meshes. View-dependent tessellation of parametric surfaces such as NURBS requires fairly involved algorithms to deal with parameter step sizes, trimming curves, and stitching of adjacent patches <ref> [1, 13, 18] </ref>. Most real-time schemes sample a regular grid in the parametric domain of each patch to exploit fast forward differencing and to simplify the patch stitching process.
Reference: [2] <author> Bajaj, C., and Schikore, D. </author> <title> Error-bounded reduction of triangle meshes with multivariate data. </title> <booktitle> SPIE 2656 (1996), </booktitle> <pages> 34-45. </pages>
Reference-contexts: Alternatively, other simplification schemes such as <ref> [2, 5, 9] </ref> could be adapted to obtain deviation spaces with guaranteed bounds. Note that the computation of v ; ffi v does not measure parametric distortion. This is appropriate for texture-mapped surfaces if the texture is geometrically projected or wrapped.
Reference: [3] <author> Cignoni, P., Puppo, E., and Scopigno, R. </author> <title> Representation and visualization of terrain surfaces at variable resolution. In Scientific Visualization '95 (1995), </title> <editor> R. Scateni, Ed., </editor> <publisher> World Scientific, </publisher> <pages> pp. 50-68. </pages>
Reference-contexts: Although there exist numerous methods for simplifying height fields, only a subset support efficient view-dependent LOD. These are based on hierarchical representations such as grid quadtrees [14, 23], quaternary triangular subdivisions [15], and more general triangulation hierarchies <ref> [3, 6, 20] </ref>. (The subdivision approach of [15] generalizes to 2-dimensional domains of arbitrary topological type.) Because quadtrees and quaternary subdivisions are based on a regular subdivision structure, the view-dependent meshes created by these schemes have constrained connectivities, and therefore require more polygons for a given accuracy than so-called triangulated irregular <p> Vertex* vertices <ref> [3] </ref>; // ordered counter-clockwise Face* neighbors [3]; // neighbors [i] across from vertices [i] g; struct SRMesh f // Selectively refinable mesh Array&lt;Vertex&gt; vertices; // set V of all vertices Array&lt;Face&gt; faces; // set ^ F of all faces ListNode active vertices; // head of list V V ListNode active faces; <p> Vertex* vertices <ref> [3] </ref>; // ordered counter-clockwise Face* neighbors [3]; // neighbors [i] across from vertices [i] g; struct SRMesh f // Selectively refinable mesh Array&lt;Vertex&gt; vertices; // set V of all vertices Array&lt;Face&gt; faces; // set ^ F of all faces ListNode active vertices; // head of list V V ListNode active faces; // head of list F ^
Reference: [4] <author> Clark, J. </author> <title> Hierarchical geometric models for visible surface algorithms. </title> <journal> Communications of the ACM 19, </journal> <month> 10 (October </month> <year> 1976), </year> <pages> 547-554. </pages>
Reference-contexts: One common heuristic technique is to author several versions of a model at various levels of detail (LOD); a detailed triangle mesh is used when the object is close to the viewer, and coarser approximations are substituted as the object recedes <ref> [4, 8] </ref>. Such LOD meshes can be computed automatically using mesh simplification Email: hhoppe@microsoft.com Web: http://research.microsoft.com/~hoppe/ techniques (e.g. [5, 10, 19, 21]). The recently introduced progressive mesh (PM) representation [10] captures a continuous sequence of meshes optimized for view-independent LOD control, and allows fast traversal of the sequence at runtime. <p> Some of these problems can be addressed by representing a graphics scene as a hierarchy of meshes. Parts of the scene outside the view frustum can then be removed efficiently using hierarchical culling, and LOD can be adjusted independently for each mesh in the hierarchy <ref> [4, 8] </ref>. However, establishing such hierarchies on continuous surfaces is a challenging problem. For instance, if a terrain mesh (Figure 11d) is partitioned into blocks, and these blocks are rendered at different levels of detail, one has to address the problem of cracks between the blocks [14]. <p> Face* fl; // (fr=fl+1) Face* fn <ref> [4] </ref>; // required neighbors f n0 ; f n1 ; f n2 ; f n3 RefineInfo refine info; // defined in Section 4 g; struct Face f ListNode active; // list stringing active faces F int matid; // material identifier // Remaining fields are used if the face is active.
Reference: [5] <author> Cohen, J., Varshney, A., Manocha, D., Turk, G., Weber, H., Agarwal, P., Brooks, F., and Wright, W. </author> <title> Simplification envelopes. </title> <booktitle> Computer Graphics (SIGGRAPH '96 Proceedings) (1996), </booktitle> <pages> 119-128. </pages>
Reference-contexts: Such LOD meshes can be computed automatically using mesh simplification Email: hhoppe@microsoft.com Web: http://research.microsoft.com/~hoppe/ techniques (e.g. <ref> [5, 10, 19, 21] </ref>). The recently introduced progressive mesh (PM) representation [10] captures a continuous sequence of meshes optimized for view-independent LOD control, and allows fast traversal of the sequence at runtime. <p> Alternatively, other simplification schemes such as <ref> [2, 5, 9] </ref> could be adapted to obtain deviation spaces with guaranteed bounds. Note that the computation of v ; ffi v does not measure parametric distortion. This is appropriate for texture-mapped surfaces if the texture is geometrically projected or wrapped.
Reference: [6] <author> De Floriani, L., Marzano, P., and Puppo, E. </author> <title> Multiresolu-tion models for topographic surface description. </title> <booktitle> The Visual Computer 12, 7 (1996), </booktitle> <pages> 317-345. </pages>
Reference-contexts: Although there exist numerous methods for simplifying height fields, only a subset support efficient view-dependent LOD. These are based on hierarchical representations such as grid quadtrees [14, 23], quaternary triangular subdivisions [15], and more general triangulation hierarchies <ref> [3, 6, 20] </ref>. (The subdivision approach of [15] generalizes to 2-dimensional domains of arbitrary topological type.) Because quadtrees and quaternary subdivisions are based on a regular subdivision structure, the view-dependent meshes created by these schemes have constrained connectivities, and therefore require more polygons for a given accuracy than so-called triangulated irregular <p> As noted in Section 2.2, an arbitrary subsequence S may not correspond to a well-defined mesh, since a vsplit transformation is legal only if the current mesh satisfies some preconditions. These preconditions are analogous to the vertex or face dependencies found in most hierarchical representations <ref> [6, 14, 24] </ref>. Several definitions of vsplit legality have been presented (two in [10] and one in [24]); ours is yet another, which we will introduce shortly. Let M be the set of all meshes M S produced from M 0 subsequence S of legal vsplit transformations.
Reference: [7] <author> Evans, F., Skiena, S., and Varshney, A. </author> <title> Optimizing triangle strips for fast rendering. </title> <booktitle> In Visualization '96 Proceedings (1996), IEEE, </booktitle> <pages> pp. 319-326. </pages>
Reference-contexts: Because of view coherence, the number of vertices that require interpolation is generally smaller than the number of active vertices. More research is needed to determine the feasibility and usefulness of generating geomorphs at runtime. 6 RENDERING Many graphics systems require triangle strip representations for optimal rendering performance <ref> [7] </ref>. Because the mesh connectivity in our incremental refinement scheme is dynamic, it is not possible to precompute triangle strips. We use a greedy algorithm to generate triangle strips at every frame, as shown in Figure 12e.
Reference: [8] <author> Funkhouser, T., and S equin, C. </author> <title> Adaptive display algorithm for interactive frame rates during visualization of complex virtual environments. </title> <booktitle> Computer Graphics (SIGGRAPH '93 Proceedings) (1993), </booktitle> <pages> 247-254. </pages>
Reference-contexts: One common heuristic technique is to author several versions of a model at various levels of detail (LOD); a detailed triangle mesh is used when the object is close to the viewer, and coarser approximations are substituted as the object recedes <ref> [4, 8] </ref>. Such LOD meshes can be computed automatically using mesh simplification Email: hhoppe@microsoft.com Web: http://research.microsoft.com/~hoppe/ techniques (e.g. [5, 10, 19, 21]). The recently introduced progressive mesh (PM) representation [10] captures a continuous sequence of meshes optimized for view-independent LOD control, and allows fast traversal of the sequence at runtime. <p> Some of these problems can be addressed by representing a graphics scene as a hierarchy of meshes. Parts of the scene outside the view frustum can then be removed efficiently using hierarchical culling, and LOD can be adjusted independently for each mesh in the hierarchy <ref> [4, 8] </ref>. However, establishing such hierarchies on continuous surfaces is a challenging problem. For instance, if a terrain mesh (Figure 11d) is partitioned into blocks, and these blocks are rendered at different levels of detail, one has to address the problem of cracks between the blocks [14].
Reference: [9] <author> Gu eziec, A. </author> <title> Surface simplification with variable tolerance. </title> <booktitle> In Proceedings of the Second International Symposium on Medical Robotics and Computer Assisted Surgery (November 1995), </booktitle> <pages> pp. 132-139. </pages>
Reference-contexts: Alternatively, other simplification schemes such as <ref> [2, 5, 9] </ref> could be adapted to obtain deviation spaces with guaranteed bounds. Note that the computation of v ; ffi v does not measure parametric distortion. This is appropriate for texture-mapped surfaces if the texture is geometrically projected or wrapped.
Reference: [10] <author> Hoppe, H. </author> <title> Progressive meshes. </title> <booktitle> Computer Graphics (SIGGRAPH '96 Proceedings) (1996), </booktitle> <pages> 99-108. </pages>
Reference-contexts: Such LOD meshes can be computed automatically using mesh simplification Email: hhoppe@microsoft.com Web: http://research.microsoft.com/~hoppe/ techniques (e.g. <ref> [5, 10, 19, 21] </ref>). The recently introduced progressive mesh (PM) representation [10] captures a continuous sequence of meshes optimized for view-independent LOD control, and allows fast traversal of the sequence at runtime. <p> Such LOD meshes can be computed automatically using mesh simplification Email: hhoppe@microsoft.com Web: http://research.microsoft.com/~hoppe/ techniques (e.g. [5, 10, 19, 21]). The recently introduced progressive mesh (PM) representation <ref> [10] </ref> captures a continuous sequence of meshes optimized for view-independent LOD control, and allows fast traversal of the sequence at runtime. <p> Most real-time schemes sample a regular grid in the parametric domain of each patch to exploit fast forward differencing and to simplify the patch stitching process. Our framework allows real-time adaptive tessellations that adapt to surface curvature and view parameters. 2.2 Review of progressive meshes In the PM representation <ref> [10] </ref>, an arbitrary mesh ^ M is simplified through a sequence of n edge collapse transformations (ecol in 0 (see Figure 11): ( ^ M = M ) ecol n1 ! : : : ecol 1 ! M 1 ecol 0 ! M : Because each ecol has an inverse, called <p> The resulting sequence of meshes M 0 ; : : : ; M n = ^ M is effective for view independent LOD control (Figure 11). In addition, smooth visual transitions (geomorphs) can be constructed between any two meshes in this sequence. To create view-dependent approximations, our earlier work <ref> [10] </ref> describes a scheme for selectively refining the mesh based on a user specified query function qrefine (v s ). <p> These preconditions are analogous to the vertex or face dependencies found in most hierarchical representations [6, 14, 24]. Several definitions of vsplit legality have been presented (two in <ref> [10] </ref> and one in [24]); ours is yet another, which we will introduce shortly. Let M be the set of all meshes M S produced from M 0 subsequence S of legal vsplit transformations. <p> A major concern is that a selectively refined mesh should be unique, regardless of the sequence of (legal) transformations that leads to it, and in particular, it should still be a mesh in M. We first sought to extend the selective refinement scheme of <ref> [10] </ref> with a set of legality preconditions for ecol transformations, but were unable to form a consistent framework without overly restricting it. <p> applied, we estimate the deviation between N v s and ^ N v s by examining the residual error vectors E = fe i g from a dense set of points X sampled on ^ M that locally project onto N v s , as explained in more detail in <ref> [10] </ref>. <p> Direct3D DrawIndexedPrimitive and OpenGL glArrayElementAr-rayEXT). Although not used in our current prototype, such interfaces may be ideal for rendering selectively refined meshes. 7 OPTIMIZING PM CONSTRUCTION FOR SELECTIVE REFINEMENT The PM construction algorithm of <ref> [10] </ref> finds a sequence of vsplit refinement transformations optimized for accuracy, without regard to the shape of the resulting vertex hierarchy. We have experimented with introducing a small penalty function to the cost metric of [10] to favor balanced hierarchies in order to minimize unnecessary dependencies. <p> selectively refined meshes. 7 OPTIMIZING PM CONSTRUCTION FOR SELECTIVE REFINEMENT The PM construction algorithm of <ref> [10] </ref> finds a sequence of vsplit refinement transformations optimized for accuracy, without regard to the shape of the resulting vertex hierarchy. We have experimented with introducing a small penalty function to the cost metric of [10] to favor balanced hierarchies in order to minimize unnecessary dependencies. The penalty for ecol (v t ; v u ) is c (n v t +n v u ) where n v is the number of descendants of v (including itself) and c is a user-specified parameter.
Reference: [11] <author> Kirkpatrick, D. </author> <title> Optimal search in planar subdivisions. </title> <journal> SIAM Journal on Computing 12, </journal> <month> 1 (February </month> <year> 1983), </year> <pages> 28-35. </pages>
Reference-contexts: The topmost level of the tree (or more precisely, forest) corresponds to the vertices of a coarse mesh M 0 . (In some respects, this structure is similar to the subdivision hierarchy of <ref> [11] </ref>.) At runtime, selective refinement is achieved by moving a vertex front up and down through the hierarchy.
Reference: [12] <author> Kumar, S., and Manocha, D. </author> <title> Hierarchical visibility culling for spline models. </title> <booktitle> In Proceedings of Graphics Interface '96 (1996), </booktitle> <pages> pp. 142-150. </pages>
Reference-contexts: The semiangles ff v are computed after a PM representation is loaded into memory using a normal space hierarchy <ref> [12] </ref>. As before, we first hierarchically compute at each vertex v a sphere S 0 v that bounds the associated space of normals.
Reference: [13] <author> Kumar, S., Manocha, D., and Lastra, A. </author> <title> Interactive display of large-scale NURBS models. </title> <booktitle> In 1995 Symposium on Interactive 3D Graphics (1995), ACM SIGGRAPH, </booktitle> <pages> pp. 51-58. </pages>
Reference-contexts: In addition, the block boundaries are unlikely to correspond to natural features in the surface, resulting in suboptimal approximations. Similar problems also arise in the adaptive tessellation of smooth parametric surfaces <ref> [1, 13, 18] </ref>. Specialized schemes have been presented to adaptively refine meshes for the cases of height fields and parametric surfaces, as summarized in Section 2.1. In this paper, we offer a general runtime LOD framework for selectively refining arbitrary meshes according to changing view parameters. <p> In this paper we demonstrate real-time modification of highly adaptable TIN's. Moreover, our framework extends to arbitrary meshes. View-dependent tessellation of parametric surfaces such as NURBS requires fairly involved algorithms to deal with parameter step sizes, trimming curves, and stitching of adjacent patches <ref> [1, 13, 18] </ref>. Most real-time schemes sample a regular grid in the parametric domain of each patch to exploit fast forward differencing and to simplify the patch stitching process. <p> However, to improve both space and time efficiency, we approximate a v by v (it amounts to a parallel projection approximation <ref> [13] </ref>), and instead use the test (v e) ^ n v &gt; 0 and ((v e) ^ n v ) &gt; kv ek sin ff v : The effect of this test is seen in Figures 13c, 14, and 16c, where the backfacing regions of the meshes are kept coarse.
Reference: [14] <author> Lindstrom, P., Koller, D., Ribarsky, W., Hodges, L., Faust, N., and Turner, G. </author> <title> Real-time, continuous level of detail rendering of height fields. </title> <booktitle> Computer Graphics (SIGGRAPH '96 Proceedings) (1996), </booktitle> <pages> 109-118. </pages>
Reference-contexts: However, establishing such hierarchies on continuous surfaces is a challenging problem. For instance, if a terrain mesh (Figure 11d) is partitioned into blocks, and these blocks are rendered at different levels of detail, one has to address the problem of cracks between the blocks <ref> [14] </ref>. In addition, the block boundaries are unlikely to correspond to natural features in the surface, resulting in suboptimal approximations. Similar problems also arise in the adaptive tessellation of smooth parametric surfaces [1, 13, 18]. <p> Although there exist numerous methods for simplifying height fields, only a subset support efficient view-dependent LOD. These are based on hierarchical representations such as grid quadtrees <ref> [14, 23] </ref>, quaternary triangular subdivisions [15], and more general triangulation hierarchies [3, 6, 20]. (The subdivision approach of [15] generalizes to 2-dimensional domains of arbitrary topological type.) Because quadtrees and quaternary subdivisions are based on a regular subdivision structure, the view-dependent meshes created by these schemes have constrained connectivities, and therefore <p> It was previously thought that dynamically adapting a TIN at interactive rates would be prohibitively expensive <ref> [14] </ref>. In this paper we demonstrate real-time modification of highly adaptable TIN's. Moreover, our framework extends to arbitrary meshes. View-dependent tessellation of parametric surfaces such as NURBS requires fairly involved algorithms to deal with parameter step sizes, trimming curves, and stitching of adjacent patches [1, 13, 18]. <p> As noted in Section 2.2, an arbitrary subsequence S may not correspond to a well-defined mesh, since a vsplit transformation is legal only if the current mesh satisfies some preconditions. These preconditions are analogous to the vertex or face dependencies found in most hierarchical representations <ref> [6, 14, 24] </ref>. Several definitions of vsplit legality have been presented (two in [10] and one in [24]); ours is yet another, which we will introduce shortly. Let M be the set of all meshes M S produced from M 0 subsequence S of legal vsplit transformations. <p> If N v and ^ N v are similar and approximately planar, a tighter distance bound can be obtained by replacing the ball B (r) in the above definition by a more general deviation space D. For instance, Lind-strom et al. <ref> [14] </ref> record deviation of height fields (graphs of functions over the xy plane) by associating to each vertex a scalar value ffi representing a vertical deviation space D z (ffi) = fh ^ z : ffi h ffig. <p> As shown in Figure 7c, the graph of this radius as a function of view direction has the shape of a sphere of radius unioned with a bialy <ref> [14] </ref> of radius ffi. During the construction of a PM representation, we precompute v ; ffi v for deviation space D n v ( v ; ffi v ) at each vertex v 2 V as follows. <p> Note that the test reduces to that of <ref> [14] </ref> when v = 0 and ^ n v = ^ z, and requires only a few more floating point operations in the general case. <p> Our test provides only an approximate bound on the screen-space projected error, for a number of reasons. First, the test slightly underestimates error away from the viewport center, as pointed out in <ref> [14] </ref>. Second, a parallel projection assumption is made when projecting D n on the screen, as in [14]. <p> Our test provides only an approximate bound on the screen-space projected error, for a number of reasons. First, the test slightly underestimates error away from the viewport center, as pointed out in <ref> [14] </ref>. Second, a parallel projection assumption is made when projecting D n on the screen, as in [14]. Third, the neighborhood about v when evaluating qrefine (v) may be different from that in the PM sequence since M is selectively refined; thus the deviation spaces D n provide strict bounds only at the vertices themselves. Nonetheless, the criterion works well in practice, as demonstrated in Figures 12-16. <p> If space is always allocated for 2 faces per vsplit, the Vertex.fl field can be deleted and instead computed from vt. Scalar values in the RefineInfo record can be quantized to 8 bits with an exponential map as in <ref> [14] </ref>. Coordinates of points and normals can be quantized to 16 bits. Material identifiers are unnecessary if the mesh has only one material. Overall, these changes would reduce memory requirements down to about 140 j ^ Vj bytes. <p> Material identifiers are unnecessary if the mesh has only one material. Overall, these changes would reduce memory requirements down to about 140 j ^ Vj bytes. For the case of height fields, the memory requirement per vertex far exceeds that of regular grid schemes <ref> [14] </ref>. However, the fully detailed mesh ^ M may have arbitrary connectivity, and may therefore be obtained by pre-simplifying a given grid representation, possibly Table 1: Statistics for the various data sets. Model Fully detailed ^ M Disk (MB) Mem. V hier.
Reference: [15] <author> Lounsbery, M., DeRose, T., and Warren, J. </author> <title> Multireso-lution surfaces of arbitrary topological type. </title> <journal> ACM Transactions on Graphics 16, </journal> <month> 1 (January </month> <year> 1997), </year> <pages> 34-73. </pages>
Reference-contexts: Although there exist numerous methods for simplifying height fields, only a subset support efficient view-dependent LOD. These are based on hierarchical representations such as grid quadtrees [14, 23], quaternary triangular subdivisions <ref> [15] </ref>, and more general triangulation hierarchies [3, 6, 20]. (The subdivision approach of [15] generalizes to 2-dimensional domains of arbitrary topological type.) Because quadtrees and quaternary subdivisions are based on a regular subdivision structure, the view-dependent meshes created by these schemes have constrained connectivities, and therefore require more polygons for a <p> Although there exist numerous methods for simplifying height fields, only a subset support efficient view-dependent LOD. These are based on hierarchical representations such as grid quadtrees [14, 23], quaternary triangular subdivisions <ref> [15] </ref>, and more general triangulation hierarchies [3, 6, 20]. (The subdivision approach of [15] generalizes to 2-dimensional domains of arbitrary topological type.) Because quadtrees and quaternary subdivisions are based on a regular subdivision structure, the view-dependent meshes created by these schemes have constrained connectivities, and therefore require more polygons for a given accuracy than so-called triangulated irregular networks (TIN's).
Reference: [16] <author> Luebke, D. </author> <title> Hierarchical structures for dynamic polygonal simplification. </title> <type> TR 96-006, </type> <institution> Department of Computer Science, University of North Carolina at Chapel Hill, </institution> <year> 1996. </year>
Reference-contexts: In this paper we detail three view-dependent criteria. One of these measures screen-space surface approximation error, and therefore yields mesh refinement that naturally adapts to both surface curvature and viewing direction. Another related scheme is that of Luebke <ref> [16] </ref>, which constructs a vertex hierarchy using a clustering octree, and locally adapts the complexity of the scene by selectively coalescing the cluster nodes. 3 SELECTIVE REFINEMENT FRAMEWORK In this section, we show that a real-time selective refinement framework can be built upon an arbitrary PM.
Reference: [17] <author> Ohshima, T., Yamamoto, H., and Tamura, H. </author> <title> Gaze-directed adaptive rendering for interacting with virtual space. </title> <booktitle> In Proc. of IEEE 1996 Virtual Reality Annual Intnl. Symp. </booktitle> <year> (1996), </year> <pages> pp. 103-110. </pages>
Reference-contexts: There are a number of areas for future work, including: * Memory management for large models, particularly terrains. * Experimentation with runtime generation of geomorphs. * Extension of refinement criteria to account for surface shad ing [24], or for surface velocity and proximity to gaze center <ref> [17] </ref>. * Adaptive refinement for animated models. * Applications of selective refinement to collision detection.
Reference: [18] <author> Rockwood, A., Heaton, K., and Davis, T. </author> <title> Real-time rendering of trimmed surfaces. </title> <booktitle> In Computer Graphics (SIGGRAPH '89 Proceedings) (1989), </booktitle> <volume> vol. 23, </volume> <pages> pp. 107-116. </pages>
Reference-contexts: In addition, the block boundaries are unlikely to correspond to natural features in the surface, resulting in suboptimal approximations. Similar problems also arise in the adaptive tessellation of smooth parametric surfaces <ref> [1, 13, 18] </ref>. Specialized schemes have been presented to adaptively refine meshes for the cases of height fields and parametric surfaces, as summarized in Section 2.1. In this paper, we offer a general runtime LOD framework for selectively refining arbitrary meshes according to changing view parameters. <p> In this paper we demonstrate real-time modification of highly adaptable TIN's. Moreover, our framework extends to arbitrary meshes. View-dependent tessellation of parametric surfaces such as NURBS requires fairly involved algorithms to deal with parameter step sizes, trimming curves, and stitching of adjacent patches <ref> [1, 13, 18] </ref>. Most real-time schemes sample a regular grid in the parametric domain of each patch to exploit fast forward differencing and to simplify the patch stitching process.
Reference: [19] <author> Rossignac, J., and Borrel, P. </author> <title> Multi-resolution 3D approximations for rendering complex scenes. In Modeling in Computer Graphics, </title> <editor> B. Falcidieno and T. L. Kunii, Eds. </editor> <publisher> Springer-Verlag, </publisher> <year> 1993, </year> <pages> pp. 455-465. </pages>
Reference-contexts: Such LOD meshes can be computed automatically using mesh simplification Email: hhoppe@microsoft.com Web: http://research.microsoft.com/~hoppe/ techniques (e.g. <ref> [5, 10, 19, 21] </ref>). The recently introduced progressive mesh (PM) representation [10] captures a continuous sequence of meshes optimized for view-independent LOD control, and allows fast traversal of the sequence at runtime.
Reference: [20] <author> Scarlatos, L. L. </author> <title> A refined triangulation hierarchy for multiple levels of terrain detail. </title> <booktitle> In Proceedings, IMAGE V Conference (June 1990), </booktitle> <pages> pp. 115-122. </pages>
Reference-contexts: Although there exist numerous methods for simplifying height fields, only a subset support efficient view-dependent LOD. These are based on hierarchical representations such as grid quadtrees [14, 23], quaternary triangular subdivisions [15], and more general triangulation hierarchies <ref> [3, 6, 20] </ref>. (The subdivision approach of [15] generalizes to 2-dimensional domains of arbitrary topological type.) Because quadtrees and quaternary subdivisions are based on a regular subdivision structure, the view-dependent meshes created by these schemes have constrained connectivities, and therefore require more polygons for a given accuracy than so-called triangulated irregular
Reference: [21] <author> Schroeder, W., Zarge, J., and Lorensen, W. </author> <title> Decimation of triangle meshes. </title> <booktitle> Computer Graphics (SIGGRAPH '92 Proceedings) 26, 2 (1992), </booktitle> <pages> 65-70. </pages>
Reference-contexts: Such LOD meshes can be computed automatically using mesh simplification Email: hhoppe@microsoft.com Web: http://research.microsoft.com/~hoppe/ techniques (e.g. <ref> [5, 10, 19, 21] </ref>). The recently introduced progressive mesh (PM) representation [10] captures a continuous sequence of meshes optimized for view-independent LOD control, and allows fast traversal of the sequence at runtime.
Reference: [22] <author> Shirman, L., and Abi-Ezzi, S. </author> <title> The cone of normals technique for fast processing of curved patches. </title> <booktitle> Computer Graphics Forum (Proceedings of Eurographics '93) 12, 3 (1993), </booktitle> <pages> 261-272. </pages>
Reference-contexts: For each vertex v, we bound the space of normals associated with the region of ^ M supported by v and its descendants, using a cone of normals <ref> [22] </ref> defined by a semiangle ff v about the vector ^ n v = v:normal (Figure 6). The semiangles ff v are computed after a PM representation is loaded into memory using a normal space hierarchy [12]. <p> viewpoint e, it is unnecessary to split v if e lies in the backfacing region of v, that is, if a v e ^ n v &gt; sin ff v ; where a v is a cone anchor point that takes into account the geometric bounding volume S v (see <ref> [22] </ref> for details).
Reference: [23] <author> Taylor, D. C., and Barrett, W. A. </author> <title> An algorithm for continuous resolution polygonalizations of a discrete surface. </title> <booktitle> In Proceedings of Graphics Interface '94 (1994), </booktitle> <pages> pp. 33-42. </pages>
Reference-contexts: Although there exist numerous methods for simplifying height fields, only a subset support efficient view-dependent LOD. These are based on hierarchical representations such as grid quadtrees <ref> [14, 23] </ref>, quaternary triangular subdivisions [15], and more general triangulation hierarchies [3, 6, 20]. (The subdivision approach of [15] generalizes to 2-dimensional domains of arbitrary topological type.) Because quadtrees and quaternary subdivisions are based on a regular subdivision structure, the view-dependent meshes created by these schemes have constrained connectivities, and therefore

References-found: 23

