URL: ftp://ftp.eecs.umich.edu/people/rundenst/papers/r-96-3.ps
Refering-URL: ftp://ftp.eecs.umich.edu/people/rundenst/papers/INDEX.html
Root-URL: http://www.cs.umich.edu
Email: e-mail: kuno@umich.edu, rundenst@eecs.umich.edu  
Title: Augmented Inherited Multi-Index Structure for Maintenance of Materialized Path Query Views  
Author: Harumi A. Kuno Elke A. Rundensteiner 
Keyword: Integration of heterogeneous databases, path views, data warehousing, incremental view maintenance, view materialization, and object-oriented databases.  
Address: Ann Arbor, MI 48109-2122  
Affiliation: Dept. of Elect. Engin. and Computer Science, Software Systems Research Laboratory The University of Michigan,  
Abstract: Materialized complex object-oriented views are a promising technique for the integration of heterogeneous databases and the development of powerful data warehousing systems. Path query views are virtual classes formed from selection queries that specify a predicate upon the value of an aggregation hierarchy path. The primary difference between previous work regarding OODB indexing and the efficient implementation of materialized path query views addressed in this paper lies in the nature of their usage. For OODB indexing, query usage is the primary purpose of index structures. Because the materialized view data itself can be used to answer queries, the primary use of index structures with regard to materialized path query views is for the incremental maintenance of views in the face of updates. We have developed an augmented inherited multi-index (AIM) strategy that is specifically tailored for the maintenance of materialized path query views. We find that we can improve update performance by augmenting traditional inherited multi-indices with structured representations of the path queries that use them. This enables us to use class hierarchy relationships to prune the number of aggregation paths that must be re-instantiated during update propagation and also to support complex path queries that include cycles. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Bancilhon and G. Ferran. </author> <title> The ODMG standard for object databases. </title> <booktitle> Int. Conf. on Database Systems for Advanced Applications (DASFAA), </booktitle> <pages> pages 273-283, </pages> <year> 1995. </year>
Reference-contexts: An inherited multi-index on AP i would create indices for members (as opposed to instances) of classes C 1 : : : C n1 . As demonstrated by Bertino and Foscoli <ref> [1] </ref>, the multi-index typically offers update performance superior to other indexing techniques, such as the nested-index. Since we need an index structure to propagate the effects of updates, this is a key feature in our choice of selecting this technique as our base indexing structure.
Reference: [2] <author> T. Barsalou, N. Siambela, A. M. Keller, and G. Wiederhold. </author> <title> Updating relational databases through object-based views. </title> <booktitle> SIGMOD, </booktitle> <pages> pages 248-257, </pages> <year> 1991. </year>
Reference-contexts: Because the restructuring is virtual, diverse applications can use views to customize shared data objects, even adding new extrinsic properties and behavior without affecting other applications' perceptions of the data. Materialized database views are a recognized means for achieving interoperability among applications <ref> [2, 3, 6, 13, 17, 18] </ref>. View materialization enables a schema designer to include classes from a remote database into a local schema in a customized manner without suffering any penalty for queries upon the imported data [18].
Reference: [3] <author> E. Bertino. </author> <title> Integration of heterogeneous data repositories by using object-oriented views. </title> <booktitle> Int. Workshop on Interoperability in Multidatabase Systems, </booktitle> <pages> pages 22-29, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Because the restructuring is virtual, diverse applications can use views to customize shared data objects, even adding new extrinsic properties and behavior without affecting other applications' perceptions of the data. Materialized database views are a recognized means for achieving interoperability among applications <ref> [2, 3, 6, 13, 17, 18] </ref>. View materialization enables a schema designer to include classes from a remote database into a local schema in a customized manner without suffering any penalty for queries upon the imported data [18].
Reference: [4] <author> E. Bertino and P. Foscoli. </author> <title> Index organizations for object-oriented database systems. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 7(2) </volume> <pages> 193-209, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Our current work regarding path query views, however, focuses on object-preserving selection queries; we thus do not need to address the issue of duplicate view objects at this time. The indexing requirements of the materialized path query view problem are somewhat distinct from traditional indexing <ref> [4] </ref>. The purpose of traditional structural indexing is to speed up queries. However, in the case of path query views, the materialized view data itself is already sufficient for optimized queries. Materialized path query views thus need the index structures for propagating updates to views instead. <p> We do not illustrate our comparison of the cost of updating the index structures in Figure 13 because the AIM structure is equivalent regarding that cost to the multi-index structure; instead we refer readers to the work by Bertino and Foscoli <ref> [4] </ref>. 5.2 Computing Update Effects As illustrated in Figure 13, the cost of updating a path query view using AIM structures is cheaper (in terms of paths instantiated and indices searched) than when using traditional structures if hierarchical pruning can be performed.
Reference: [5] <author> W. Du, S. Peterson, and M.-C. Shan. </author> <title> Enterprise workflow architecture. </title> <booktitle> In IEEE ICDE, </booktitle> <pages> pages 63-64, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Advances in information technology are spurring the development of promising new areas of applications. For example, data warehousing and workflow management systems allow multiple organizational entities to share a single integrated system spanning a collection of distributed, possibly heterogeneous, database systems <ref> [5, 18, 14] </ref>. Such systems require fl This work was supported in part by the NSF RIA grant #IRI-9309076, NSF NYI grant #IRI 94-57609, and the University of Michigan Faculty Award Program, Intel, and AT&T.
Reference: [6] <author> M. Kaul, K. Drosten, and E. J. Neuhold. Viewsystem: </author> <title> Integrating heterogeneous information bases by object-oriented views. </title> <booktitle> In IEEE ICDE, </booktitle> <pages> pages 2-10, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: Because the restructuring is virtual, diverse applications can use views to customize shared data objects, even adding new extrinsic properties and behavior without affecting other applications' perceptions of the data. Materialized database views are a recognized means for achieving interoperability among applications <ref> [2, 3, 6, 13, 17, 18] </ref>. View materialization enables a schema designer to include classes from a remote database into a local schema in a customized manner without suffering any penalty for queries upon the imported data [18].
Reference: [7] <author> A. Kemper, C. Kilger, and G. Moerkotte. </author> <title> Function materialization in object bases. </title> <booktitle> SIGMOD, </booktitle> <pages> pages 258-267, </pages> <year> 1991. </year>
Reference-contexts: Furthermore, while traditional path indices are traversed primarily in a forward direction in order to answer queries, materialized path query views use the index structures for propagating updates, and hence, they traverse the index structures backwards. Similarly, function materialization <ref> [7] </ref> and path query view materialization are closely related, because function materialization uses the index structures to store the materialized functions' results. However, function materialization also depends on indices for queries, with the propagation of updates an auxiliary (if unavoidable) concern [7]. <p> Similarly, function materialization <ref> [7] </ref> and path query view materialization are closely related, because function materialization uses the index structures to store the materialized functions' results. However, function materialization also depends on indices for queries, with the propagation of updates an auxiliary (if unavoidable) concern [7]. In this paper, we present our work towards the support of more powerful view mechanisms, namely, virtual select classes defined using path queries, e.g., queries that are formed using aggregation paths. We first identify a number of limitations of traditional index structures.
Reference: [8] <author> S. Konomi, T. Furukawa, and Y. Kambayashi. </author> <title> Super-key classes for updating materialized derived classes in object bases. </title> <booktitle> In Int. Conf. on Deductive and Object-Oriented Databases, </booktitle> <month> July </month> <year> 1993. </year>
Reference-contexts: We are aware of only one other paper on the topic of maintaining materialized virtual classes formed from object-oriented path queries. Konomi et al. add "su-perkey classes" to schemas in order to maintain consistency for a particular type of join class formed along existing paths in the aggregation graph <ref> [8] </ref>. Because their join views are object-generating, they particularly focus on the elimination of duplicates. Our current work regarding path query views, however, focuses on object-preserving selection queries; we thus do not need to address the issue of duplicate view objects at this time.
Reference: [9] <author> H. A. Kuno, Y. G. Ra, and E. A. Runden-steiner. </author> <title> The object-slicing technique: A flexible object representation and its evaluation. </title> <type> Technical Report CSE-TR-241-95, </type> <institution> University of Michi-gan, </institution> <year> 1995. </year>
Reference-contexts: In the MultiView project, our focus is on the development of object-oriented view technology <ref> [11, 12, 10, 15, 9] </ref>. In previous efforts [12] we have investigated how to exploit object-oriented principles to efficiently maintain materialized views. One of the goals of our project is to increase the ability of view mechanisms to promote interoperability by supporting the materialization of more complex views.
Reference: [10] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> Materialized object-oriented views in MultiView. </title> <booktitle> In ACM Research Issues in Data Engineering Workshop, </booktitle> <pages> pages 78-85, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: In the MultiView project, our focus is on the development of object-oriented view technology <ref> [11, 12, 10, 15, 9] </ref>. In previous efforts [12] we have investigated how to exploit object-oriented principles to efficiently maintain materialized views. One of the goals of our project is to increase the ability of view mechanisms to promote interoperability by supporting the materialization of more complex views. <p> Finally, in Section 6 we discuss conclusions and future work. 2 The MultiView Model and System In this section, we briefly review the basic object model principles of the MultiView system. More details are given in [15] and <ref> [10] </ref>. Let O be an infinite set of object instances. Each object O i 2 O consists of state (instance variables or attributes), behavior (methods to which the object can respond), and a unique object identifier. <p> We have proposed elsewhere [16] the algorithms and techniques used by our view management system's dynamic classification mechanism to automatically maintain the global class hierarchy. Classification offers unique opportunities for optimizing update propagation to materialized views, as discussed in <ref> [10, 12, 11] </ref>. We identify three types of predicates used in virtual-class defining queries. Class membership predicates (intrinsic to hide, union, intersect, refine, and difference queries) are predicate terms that depend upon the classes to which an instance belongs 1 .
Reference: [11] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> The Mul-tiView OODB view system: Design and implementation. </title> <editor> In Harold Ossher and William Harri-son, editors, </editor> <booktitle> Accepted by Theory and Practice of Object Systems (TAPOS), Special Issue on Subjectivity in Object-Oriented Systems. </booktitle> <publisher> John Wiley New York, </publisher> <year> 1996. </year>
Reference-contexts: In the MultiView project, our focus is on the development of object-oriented view technology <ref> [11, 12, 10, 15, 9] </ref>. In previous efforts [12] we have investigated how to exploit object-oriented principles to efficiently maintain materialized views. One of the goals of our project is to increase the ability of view mechanisms to promote interoperability by supporting the materialization of more complex views. <p> We have proposed elsewhere [16] the algorithms and techniques used by our view management system's dynamic classification mechanism to automatically maintain the global class hierarchy. Classification offers unique opportunities for optimizing update propagation to materialized views, as discussed in <ref> [10, 12, 11] </ref>. We identify three types of predicates used in virtual-class defining queries. Class membership predicates (intrinsic to hide, union, intersect, refine, and difference queries) are predicate terms that depend upon the classes to which an instance belongs 1 .
Reference: [12] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> Using object-oriented principles to optimize update propagation to materialized views. </title> <booktitle> In ICDE'96, </booktitle> <year> 1996. </year>
Reference-contexts: In the MultiView project, our focus is on the development of object-oriented view technology <ref> [11, 12, 10, 15, 9] </ref>. In previous efforts [12] we have investigated how to exploit object-oriented principles to efficiently maintain materialized views. One of the goals of our project is to increase the ability of view mechanisms to promote interoperability by supporting the materialization of more complex views. <p> In the MultiView project, our focus is on the development of object-oriented view technology [11, 12, 10, 15, 9]. In previous efforts <ref> [12] </ref> we have investigated how to exploit object-oriented principles to efficiently maintain materialized views. One of the goals of our project is to increase the ability of view mechanisms to promote interoperability by supporting the materialization of more complex views. <p> We have proposed elsewhere [16] the algorithms and techniques used by our view management system's dynamic classification mechanism to automatically maintain the global class hierarchy. Classification offers unique opportunities for optimizing update propagation to materialized views, as discussed in <ref> [10, 12, 11] </ref>. We identify three types of predicates used in virtual-class defining queries. Class membership predicates (intrinsic to hide, union, intersect, refine, and difference queries) are predicate terms that depend upon the classes to which an instance belongs 1 . <p> In addition, the update propagation algorithm presented in this paper uses pruning techniques similar to the distributed registration of simple selection classes proposed in <ref> [12] </ref>. Given n path views that subsume one another, our algorithm can potentially avoid n 1 update evaluations. We therefore expect performance gains paralleling those reported in [12]. <p> addition, the update propagation algorithm presented in this paper uses pruning techniques similar to the distributed registration of simple selection classes proposed in <ref> [12] </ref>. Given n path views that subsume one another, our algorithm can potentially avoid n 1 update evaluations. We therefore expect performance gains paralleling those reported in [12]. Furthermore, the AIM structure facilitates the implementation of path query views in OODB systems in terms of the number of additional data structures that must be created and maintained by the database implementor. 5.3 Storage Cost Storage overhead is the primary limitation of the AIM strategy.
Reference: [13] <author> K. W. Liu and D. Spooner. </author> <title> Object-oriented database views for supporting multidisciplinary concurrent engineering. </title> <booktitle> In IEEE Computer Software and Applications Conf., </booktitle> <pages> pages 19-25, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Because the restructuring is virtual, diverse applications can use views to customize shared data objects, even adding new extrinsic properties and behavior without affecting other applications' perceptions of the data. Materialized database views are a recognized means for achieving interoperability among applications <ref> [2, 3, 6, 13, 17, 18] </ref>. View materialization enables a schema designer to include classes from a remote database into a local schema in a customized manner without suffering any penalty for queries upon the imported data [18].
Reference: [14] <author> C. Mohan, G. Alonso, R. Gunthor, and M. Ka-math. Exotica: </author> <title> A research perspective on work-flow management systems. </title> <journal> In IEEE Bulletin of the Technical Committee on Data Engineering, </journal> <pages> pages 19-26, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Advances in information technology are spurring the development of promising new areas of applications. For example, data warehousing and workflow management systems allow multiple organizational entities to share a single integrated system spanning a collection of distributed, possibly heterogeneous, database systems <ref> [5, 18, 14] </ref>. Such systems require fl This work was supported in part by the NSF RIA grant #IRI-9309076, NSF NYI grant #IRI 94-57609, and the University of Michigan Faculty Award Program, Intel, and AT&T.
Reference: [15] <author> E. A. Rundensteiner. </author> <title> MultiView: A methodology for supporting multiple views in object-oriented databases. </title> <booktitle> In 18th VLDB Conf., </booktitle> <pages> pages 187-198, </pages> <year> 1992. </year>
Reference-contexts: In the MultiView project, our focus is on the development of object-oriented view technology <ref> [11, 12, 10, 15, 9] </ref>. In previous efforts [12] we have investigated how to exploit object-oriented principles to efficiently maintain materialized views. One of the goals of our project is to increase the ability of view mechanisms to promote interoperability by supporting the materialization of more complex views. <p> Finally, in Section 6 we discuss conclusions and future work. 2 The MultiView Model and System In this section, we briefly review the basic object model principles of the MultiView system. More details are given in <ref> [15] </ref> and [10]. Let O be an infinite set of object instances. Each object O i 2 O consists of state (instance variables or attributes), behavior (methods to which the object can respond), and a unique object identifier.
Reference: [16] <author> E. A. Rundensteiner. </author> <title> A classification algorithm for supporting object-oriented views. </title> <booktitle> In Int. Conf. on Information and Knowledge Management, </booktitle> <pages> pages 18-25, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: One important feature of the MultiView object model is that every property in the database has a single point of inheritance. This means that two classes C i ; C j 2 C share a common property iff they inherit it from the same superclass. We have proposed elsewhere <ref> [16] </ref> the algorithms and techniques used by our view management system's dynamic classification mechanism to automatically maintain the global class hierarchy. Classification offers unique opportunities for optimizing update propagation to materialized views, as discussed in [10, 12, 11]. We identify three types of predicates used in virtual-class defining queries.
Reference: [17] <author> A. Segev and J. Park. </author> <title> Maintaining materialized views in distributed databases. </title> <booktitle> In IEEE ICDE, </booktitle> <pages> pages 262-270, </pages> <year> 1989. </year>
Reference-contexts: Because the restructuring is virtual, diverse applications can use views to customize shared data objects, even adding new extrinsic properties and behavior without affecting other applications' perceptions of the data. Materialized database views are a recognized means for achieving interoperability among applications <ref> [2, 3, 6, 13, 17, 18] </ref>. View materialization enables a schema designer to include classes from a remote database into a local schema in a customized manner without suffering any penalty for queries upon the imported data [18].
Reference: [18] <author> Y. Zhuge, H. Garcia-Molina, J. Hammer, and J. Widom. </author> <title> View maintenance in a warehousing environment. </title> <booktitle> In SIGMOD, </booktitle> <year> 1995. </year>
Reference-contexts: 1 Introduction Advances in information technology are spurring the development of promising new areas of applications. For example, data warehousing and workflow management systems allow multiple organizational entities to share a single integrated system spanning a collection of distributed, possibly heterogeneous, database systems <ref> [5, 18, 14] </ref>. Such systems require fl This work was supported in part by the NSF RIA grant #IRI-9309076, NSF NYI grant #IRI 94-57609, and the University of Michigan Faculty Award Program, Intel, and AT&T. <p> Because the restructuring is virtual, diverse applications can use views to customize shared data objects, even adding new extrinsic properties and behavior without affecting other applications' perceptions of the data. Materialized database views are a recognized means for achieving interoperability among applications <ref> [2, 3, 6, 13, 17, 18] </ref>. View materialization enables a schema designer to include classes from a remote database into a local schema in a customized manner without suffering any penalty for queries upon the imported data [18]. <p> Materialized database views are a recognized means for achieving interoperability among applications [2, 3, 6, 13, 17, 18]. View materialization enables a schema designer to include classes from a remote database into a local schema in a customized manner without suffering any penalty for queries upon the imported data <ref> [18] </ref>. The complication of view materialization is that updates must be propagated to affected materialized views. This complication limits the variety of queries that can be used to define materialized views.
References-found: 18

