URL: ftp://ftp.cs.columbia.edu/reports/reports-1992/cucs-047-92.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1992.html
Root-URL: http://www.cs.columbia.edu
Title: Process Evolution for the MARVEL Environment  
Author: Gail E. Kaiser Israel Z. Ben-Shaul George T. Heineman John K. Hinsdale Wilfredo Marrero Gail E. Kaiser et al. 
Keyword: automation, consistency, object-oriented database, process-centered environment, rules, schema evolution  
Note: Copyright 1992  Hinsdale is now employed by JYACC, New York, NY. Marrero is now a PhD candidate in  
Address: 500 West 120th Street New York, NY 10027 212-939-7000/fax:212-666-0140  Pittsburgh, PA.  
Affiliation: Columbia University Department of Computer Science  Computer Science at Carnegie Mellon University,  
Pubnum: CUCS-047-92  
Email: kaiser@cs.columbia.edu  
Date: 8 November 1992  
Abstract: We present a schema and process evolution tool, called the Evolver, for the MARVEL process-centered environment. The Evolver analyzes the differences between the new and installed process models of an existing environment, detecting each case where the notion of consistency defined by the process model has been strengthened or weakened. The Evolver then automatically updates the environment's objectbase to guarantee that the objects are consistent according to the new specifications. The Evolver can be applied while the installed process is in progress, temporarily halting normal operation while it updates the objectbase, after which development continues using the new process. We have had several months of experience using the Evolver to make repeated changes in the process that supports our own further development of MARVEL, and include in this paper one small but practical example of a recent change made to a real MARVEL process. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Ambriola, P. Ciancarini and C. Montangero. </author> <title> Software Process Enactment in Oikos. </title> <editor> In Richard N. Taylor (editor), </editor> <booktitle> SIGSOFT '90 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 183-192. </pages> <address> Irvine CA, </address> <month> December, </month> <year> 1990. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 15(6), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: We do not know how Darwin handles update of existing objectbases to conform to changed processes, if it in fact does so, but whatever works for Darwin would probably also work for other backward chaining environments such as Oikos <ref> [1] </ref>. We expect that our approach could be modified for backward chaining, basically by reversing the direction of source versus destination rules as described in Sections 5 and 6.
Reference: [2] <author> Robert Balzer. </author> <title> Tolerating Inconsistency. </title> <booktitle> In 13th International Conference on Software Engineering, </booktitle> <pages> pages 158-165. </pages> <publisher> IEEE Computer Society Press, </publisher> <address> Austin TX, </address> <month> May, </month> <year> 1991. </year>
Reference-contexts: Coordination modeling seriously complicates both failure recovery and process evolution, because it may introduce commit and abort dependencies among top-level transactions [10] and the possibility of relatively long-lived ``temporary'' inconsistency in the objectbase <ref> [2] </ref>. This is the subject of ongoing research. 4. Data Model Evolver To evolve an objectbase, the administrator simply edits the data model and runs the Evolver tool. One alternative considered in the design phase was to alter classes through an interactive dialog with the Evolver.
Reference: [3] <author> Jay Banerjee and Won Kim. </author> <title> Semantics and Implementation of Schema Evolution in Object-Oriented Databases. </title> <booktitle> In ACM SIGMOD Annual Conference on the Management of Data, </booktitle> <pages> pages 311-322. </pages> <address> San Francisco CA, </address> <month> May, </month> <year> 1987. </year> <journal> Special issue of SIGMOD Record, </journal> <volume> 16(3), </volume> <month> December </month> <year> 1987. </year>
Reference-contexts: We developed the first version of our Evolver tool, which supports certain kinds of changes to the data model. There are based on the schema evolution facilities supported by the Orion object-oriented database management system <ref> [3] </ref>; MARVEL's object management system is very similar to Orion's except in MARVEL's support for file attributes.
Reference: [4] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Modeling Concurrency in Rule-Based Development Environments. </title> <booktitle> IEEE Expert 5(6) </booktitle> <pages> 15-27, </pages> <month> December, </month> <year> 1990. </year>
Reference-contexts: Update status of object. Chain to dirty rules # ---------------------------------------------------------- (and (?c.status = Compiled) # 0.a (?c.object_time_stamp = CurrentTime)); # 0.b (?c.status = ErrorCompile); # 1. rule with the same name and ``closest'' signature to the provided actual parameters considering multiple 3 inheritance <ref> [4] </ref>.
Reference: [5] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Scaling Up Rule-Based Development Environments. </title> <journal> International Journal on Software Engineering and Knowledge Engineering 2(1) </journal> <pages> 59-78, </pages> <month> March, </month> <year> 1992. </year>
Reference-contexts: The next step was a major revision of the Evolver tool, to also support certain changes to the process model (which had previously been done manually) in addition to schema evolution. The new Evolver depends on MARVEL's distinction between two purposes for process enaction, consistency and automation <ref> [5] </ref>, which are determined by special annotations on rules in the process model. In essence, 2 when one rule would forward chain to another rule to maintain consistency, the second rule is considered an implication of the first, and by definition must be fired whenever the first rule is fired. <p> The functionality of P/Marvel, other than the Evolver, is outside the scope of this paper. 2. Contributions The primary goal of a process evolution tool is to guarantee that the objectbase is not inconsistent with respect to the new process. In a previous paper <ref> [5] </ref>, we proposed an approach that rejected changes to the process that might potentially result in inconsistency. The analysis we described was excessively conservative, in essence prohibiting nearly all changes involving consistency chaining (although permitting any changes concerned solely with automation).
Reference: [6] <author> Naser S. Barghouti. </author> <title> Supporting Cooperation in the MARVEL Process-Centered SDE. </title> <booktitle> In Fifth ACM SIGSOFT Symposium on Software Development Environments. </booktitle> <address> Washington DC, </address> <month> December, </month> <year> 1992. </year> <note> In press. </note>
Reference-contexts: The middle layer resolves such conflicts through a semantics-based protocol that understands the distinction between consistency and automation chains indicated by the process model <ref> [6] </ref>. Consistency is all-or-nothing: if a consistency chain cannot be completed due to a lock conflict when a rule attempts to access an object, the entire chain should be aborted (rolled back).
Reference: [7] <author> Naser S. Barghouti. </author> <title> Concurrency Control in Rule-Based Software Development Environments. </title> <type> PhD thesis, </type> <institution> Columbia University, </institution> <month> February, </month> <year> 1992. </year> <month> CUCS-001-92. </month>
Reference-contexts: When the semantics-based protocol above would abort a rule chain, the coordination rule base is inspected to attempt to find an alternative resolution. Each coordination rule specifies a scenario where relaxation of transaction serializability can be tolerated, and corresponding actions that increase concurrency and enable cooperation <ref> [7] </ref>. Coordination modeling seriously complicates both failure recovery and process evolution, because it may introduce commit and abort dependencies among top-level transactions [10] and the possibility of relatively long-lived ``temporary'' inconsistency in the objectbase [2]. This is the subject of ongoing research. 4.
Reference: [8] <author> Noureddine Belkhatir, Jacky Estublier and Walcelio L. Melo. </author> <title> Adele 2: A Support to Large Software Development Process. </title> <editor> In Mark Dowson (editor), </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 159-170. </pages> <publisher> IEEE Computer Society Press, </publisher> <address> Redondo Beach CA, </address> <month> October, </month> <year> 1991. </year>
Reference-contexts: It should also be easily extended to other environments whose process enaction is based primarily on forward chaining or triggers, including Merlin [27], EPOS [12], ALF [22] and Adele2 <ref> [8] </ref>. As far as we know, none of these systems currently provides an automated process evolution tool. The Darwin/1 backward chaining environment includes a sophisticated mechanism for accepting or rejecting process changes [24], where the process (or ``law'') itself specifies the permissible range of future changes.
Reference: [9] <author> Israel Z. Ben-Shaul, Gail E. Kaiser and George T. Heineman. </author> <title> An Architecture for Multi-User Software Development Environments. </title> <booktitle> In 5th ACM SIGSOFT Symposium on Software Development Environments. </booktitle> <address> Washington DC, </address> <month> December, </month> <year> 1992. </year> <note> In press. </note>
Reference-contexts: The process model is augmented by an object-oriented data model (schema), which defines the composition of both product data and process data in an objectbase. In January 1992, we began using the first multi-user version of MARVEL, 3.0 <ref> [9] </ref>, in our own further development of the MARVEL system. We constructed data and process models and a set of tool envelopes, collectively called C/Marvel, based primarily on the previous organization of the MARVEL code in the file system, our manual development process and the corresponding Unix utilities, respectively. <p> In addition to output arguments, each envelope returns a distinguished value to indicate which of the specified effects should be asserted. Further details of activities and envelopes are 5 outside the scope of this paper. Multiple users of a MARVEL environment are supported by a client/server architecture <ref> [9] </ref>. A client provides the user interface, checks the arguments of commands, and forks operating system process to execute tool envelopes.
Reference: [10] <author> Panayiotis K. Chrysanthis and Krithi Ramamritham. </author> <title> ACTA: A Framework for Specifying and Reasoning about Transaction Structure and Behavior. </title> <editor> In Hector Garcia-Molina and H.V. Jagadish (editors), </editor> <booktitle> 1990 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 194-203. </pages> <address> Atlantic City NJ, </address> <month> May, </month> <year> 1990. </year> <journal> Special issue of SIGMOD Record, </journal> <volume> 19(2), </volume> <month> June </month> <year> 1990. </year>
Reference-contexts: Each coordination rule specifies a scenario where relaxation of transaction serializability can be tolerated, and corresponding actions that increase concurrency and enable cooperation [7]. Coordination modeling seriously complicates both failure recovery and process evolution, because it may introduce commit and abort dependencies among top-level transactions <ref> [10] </ref> and the possibility of relatively long-lived ``temporary'' inconsistency in the objectbase [2]. This is the subject of ongoing research. 4. Data Model Evolver To evolve an objectbase, the administrator simply edits the data model and runs the Evolver tool.
Reference: [11] <institution> CLF Project. CLF Manual USC Information Sciences Institute, </institution> <year> 1988. </year>
Reference-contexts: In fact, there may not be any updates at all, but all affected rules must still be attempted on all possible parameters, since this is not known a priori. In addition to MARVEL, our approach should be immediately applicable to the CLF process-centered environment <ref> [11] </ref>, which supports consistency forward chaining conceptually similar to our own. It should also be easily extended to other environments whose process enaction is based primarily on forward chaining or triggers, including Merlin [27], EPOS [12], ALF [22] and Adele2 [8].
Reference: [12] <author> Reidar Conradi, Espen Osjord, Per H. Westby and Chunnian Liu. </author> <title> Initial Software Process Management in EPOS. </title> <journal> Software Engineering Journal 6(5) </journal> <pages> 275-284, </pages> <month> September, </month> <year> 1991. </year> <month> 23 </month>
Reference-contexts: It should also be easily extended to other environments whose process enaction is based primarily on forward chaining or triggers, including Merlin [27], EPOS <ref> [12] </ref>, ALF [22] and Adele2 [8]. As far as we know, none of these systems currently provides an automated process evolution tool.
Reference: [13] <author> Wolfgang Deiters and Volker Gruhn. </author> <title> Managing Software Processes in the Environment MELMAC. </title> <editor> In Richard N. Taylor (editor), </editor> <booktitle> SIGSOFT '90 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 193-205. </pages> <address> Irvine CA, </address> <month> December, </month> <year> 1990. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 15(6), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: We also think that the consideration of consistency that underlies our automated approach might be adaptable to other declarative process modeling formalisms, such as the Petri net-like structures in Melmac <ref> [13] </ref> and the task graphs in the Articulator [23], which currently rely on largely manual mechanisms. But have not yet seriously investigated either possibility. We first present a general overview of the MARVEL system, including how consistency versus automation is specified in the process model.
Reference: [14] <editor> Mark Dowson (editor). </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Redondo Beach CA, </address> <year> 1991. </year>
Reference-contexts: MARVEL Background Our goal in the MARVEL project is to develop a kernel for process-centered environments <ref> [20, 14] </ref> that guide and assist teams of users working on large-scale software development efforts. The generic kernel must be tailored by an administrator who provides the data model, process model, tool envelopes and coordination model for a specific organization or project.
Reference: [15] <author> Mark A. Gisi and Gail E. Kaiser. </author> <title> Extending A Tool Integration Language. </title> <editor> In Mark Dowson (editor), </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 218-227. </pages> <publisher> IEEE Computer Society Press, </publisher> <address> Redondo Beach CA, </address> <month> October, </month> <year> 1991. </year>
Reference-contexts: Further details of the rule language and process engine are explained in Section 7 as part of our process evolution example. Conventional file-oriented tools are integrated into the process without source modifications, or even recompilation, through an enveloping language based on shell scripts <ref> [15] </ref>.
Reference: [16] <author> George T. Heineman, Gail E. Kaiser, Naser S. Barghouti and Israel Z. Ben-Shaul. </author> <title> Rule Chaining in MARVEL: Dynamic Binding of Parameters. </title> <journal> IEEE Expert , December, </journal> <note> 1992. In press. </note>
Reference-contexts: Possible chains are compiled into a network when the kernel is tailored [18]. The process engine chains among rules with different or multiple parameters by ``inverting'' local bindings <ref> [16] </ref>. An automation predicate is enclosed in parentheses "(...)", and may optionally be preceded by one of the chaining directives. A consistency predicate is enclosed in square brackets "[...]", and directives restricting chaining are not valid.
Reference: [17] <author> Gail E. Kaiser, Peter H. Feiler and Steven S. Popovich. </author> <title> Intelligent Assistance for Software Development and Maintenance. </title> <booktitle> IEEE Software 5(3) </booktitle> <pages> 40-49, </pages> <month> May, </month> <year> 1988. </year>
Reference-contexts: 1. Introduction MARVEL <ref> [17] </ref> is a process-centered environment where the process model consists of a set of planning system-style rules and process enaction is implemented by forward and backward chaining over the rule base. <p> CFILE :: superclass COMPILABLE, REFERENCED, FILE; status : (New, NotAnalyzed, ErrorAnalyze, Analyzed, NotCompiled, ErrorCompile, Compiled, NotArchived, ErrorArchive, Archived) = New; contents : text = ".c"; end The process or workflow is specified in a process modeling language <ref> [17] </ref>. Each process step is encapsulated in a rule with a name and typed formal parameters; these are used to generate the command menu available to users. Each rule is composed of a condition, an optional activity, and a set of effects.
Reference: [18] <author> Gail E. Kaiser, Naser S. Barghouti, Peter H. Feiler and Robert W. Schwanke. </author> <title> Database Support for Knowledge-Based Engineering Environments. </title> <booktitle> IEEE Expert 3(2) </booktitle> <pages> 18-32, </pages> <month> Summer, </month> <year> 1988. </year>
Reference-contexts: We discuss in another paper [19] the specification of alternatives, iteration and synchronization through the conditions and effects of rules; the process is not in any sense limited to a deterministic sequence of steps. Possible chains are compiled into a network when the kernel is tailored <ref> [18] </ref>. The process engine chains among rules with different or multiple parameters by ``inverting'' local bindings [16]. An automation predicate is enclosed in parentheses "(...)", and may optionally be preceded by one of the chaining directives.
Reference: [19] <author> Gail E. Kaiser, Steven S. Popovich and Israel Z. Ben-Shaul. </author> <title> A Bi-Level Language for Software Process Modeling. </title> <type> Technical Report CUCS-016-92, </type> <institution> Columbia University Department of Computer Science, </institution> <month> September, </month> <year> 1992. </year> <note> Submitted for publication. </note>
Reference-contexts: It is important to understand that only automation chaining is optional; users are still obliged to follow some legal process step sequence implied by the conditions and effects of rules, whether through manual selection of commands or automation chaining. We discuss in another paper <ref> [19] </ref> the specification of alternatives, iteration and synchronization through the conditions and effects of rules; the process is not in any sense limited to a deterministic sequence of steps. Possible chains are compiled into a network when the kernel is tailored [18].
Reference: [20] <editor> Takuya Katayama (editor). </editor> <booktitle> 6th International Software Process Workshop: Support for the Software Process. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Hakodate, Japan, </address> <year> 1990. </year>
Reference-contexts: MARVEL Background Our goal in the MARVEL project is to develop a kernel for process-centered environments <ref> [20, 14] </ref> that guide and assist teams of users working on large-scale software development efforts. The generic kernel must be tailored by an administrator who provides the data model, process model, tool envelopes and coordination model for a specific organization or project.
Reference: [21] <author> Won Kim, Nat Ballou, Jorge F. Garz and Darrell Woelk. </author> <title> A Distributed Object-Oriented Database System Supporting Shared and Private Databases. </title> <journal> ACM Transactions on Information Systems 9(1) </journal> <pages> 31-51, </pages> <month> January, </month> <year> 1991. </year>
Reference-contexts: We intentionally prohibit automatic deletion of file attributes for safety reasons, since the bulk of the product data resides in file attributes. Schema restructuring is an open problem for object-oriented database research <ref> [28, 21] </ref>. The Evolver works in the context of an existing MARVEL objectbase, with an existing data and process model. It accepts a new data model as input, and compares it to the existing class hierarchy; any renaming of classes or attributes is indicated on the command line.
Reference: [22] <author> Amaury Legait, Flavio Oquendo and Dan Oldfield. MASP: </author> <title> A Model for Assisted Software Processes. </title> <editor> In Fred Long (editor), </editor> <booktitle> Lecture Notes in Computer Science. Number 467: Software Engineering Environments International Workshop on Environments, </booktitle> <pages> pages 57-67. </pages> <publisher> Springer-Verlag, </publisher> <address> Chinon, France, </address> <year> 1989. </year>
Reference-contexts: It should also be easily extended to other environments whose process enaction is based primarily on forward chaining or triggers, including Merlin [27], EPOS [12], ALF <ref> [22] </ref> and Adele2 [8]. As far as we know, none of these systems currently provides an automated process evolution tool. The Darwin/1 backward chaining environment includes a sophisticated mechanism for accepting or rejecting process changes [24], where the process (or ``law'') itself specifies the permissible range of future changes.
Reference: [23] <author> Peiwei Mi and Walt Scacchi. </author> <title> Articulation: Supporting Dynamic Evolution of Software Engineering Processes. </title> <editor> In Ian Thomas (editor), </editor> <booktitle> 7th International Software Process Workshop. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Yountville CA, </address> <month> October, </month> <year> 1991. </year> <pages> Preprints. </pages>
Reference-contexts: We also think that the consideration of consistency that underlies our automated approach might be adaptable to other declarative process modeling formalisms, such as the Petri net-like structures in Melmac [13] and the task graphs in the Articulator <ref> [23] </ref>, which currently rely on largely manual mechanisms. But have not yet seriously investigated either possibility. We first present a general overview of the MARVEL system, including how consistency versus automation is specified in the process model.
Reference: [24] <author> Naftaly H. Minsky. </author> <title> Law-Governed Systems. </title> <journal> Software Engineering Journal 6(5) </journal> <pages> 285-302, </pages> <month> September, </month> <year> 1991. </year>
Reference-contexts: As far as we know, none of these systems currently provides an automated process evolution tool. The Darwin/1 backward chaining environment includes a sophisticated mechanism for accepting or rejecting process changes <ref> [24] </ref>, where the process (or ``law'') itself specifies the permissible range of future changes.
Reference: [25] <author> Randy Pausch. </author> <title> Adding Input and Output to the Transactional Model. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <month> August, </month> <year> 1988. </year> <month> CMU-CS-88-171. </month>
Reference-contexts: We refer the reader to Pausch's analysis of interactive transactions, which pose a similar difficulty <ref> [25] </ref>. 8 Since the MARVEL kernel is entirely generic, and knows nothing about any tools employed in the process, another version management tool such as SCCS [26] could equally well be incorporated. 9 matching old and new versions, which any renaming of classes or attributes specified on the command line. 4.1.
Reference: [26] <author> M. J. Rochkind. </author> <title> The Source Code Control System. </title> <journal> IEEE Transactions on Software Engineering SE-1:364-370, </journal> <year> 1975. </year>
Reference-contexts: We refer the reader to Pausch's analysis of interactive transactions, which pose a similar difficulty [25]. 8 Since the MARVEL kernel is entirely generic, and knows nothing about any tools employed in the process, another version management tool such as SCCS <ref> [26] </ref> could equally well be incorporated. 9 matching old and new versions, which any renaming of classes or attributes specified on the command line. 4.1. Capabilities The following types of changes to the data model are supported: 1. Add an attribute to a class, and (implicitly) to its subclasses. 2.
Reference: [27] <author> Wilhelm Schafer, Burkhard Peuschel and Stefan Wolf. </author> <title> A Knowledge-based Software Development Environment Supporting Cooperative Work. </title> <journal> International Journal on Software Engineering & Knowledge Engineering 2(1) </journal> <pages> 79-106, </pages> <month> March, </month> <year> 1992. </year>
Reference-contexts: In addition to MARVEL, our approach should be immediately applicable to the CLF process-centered environment [11], which supports consistency forward chaining conceptually similar to our own. It should also be easily extended to other environments whose process enaction is based primarily on forward chaining or triggers, including Merlin <ref> [27] </ref>, EPOS [12], ALF [22] and Adele2 [8]. As far as we know, none of these systems currently provides an automated process evolution tool.
Reference: [28] <author> Andrea Skarra and Stanley Zdonik. </author> <title> The Management of Changing Types in an Object-Oriented Database. </title> <editor> In Norman Meyrowitz (editor), </editor> <booktitle> Object-Oriented Programming Systems, Languages and Applications Conference Proceedings, </booktitle> <pages> pages 483-495. </pages> <publisher> ACM, </publisher> <address> Portland OR, </address> <month> September, </month> <year> 1986. </year> <journal> Special issue of SIGPLAN Notices, </journal> <volume> 21(11), </volume> <month> November </month> <year> 1986. </year> <month> 24 </month>
Reference-contexts: We intentionally prohibit automatic deletion of file attributes for safety reasons, since the bulk of the product data resides in file attributes. Schema restructuring is an open problem for object-oriented database research <ref> [28, 21] </ref>. The Evolver works in the context of an existing MARVEL objectbase, with an existing data and process model. It accepts a new data model as input, and compares it to the existing class hierarchy; any renaming of classes or attributes is indicated on the command line.

References-found: 28

