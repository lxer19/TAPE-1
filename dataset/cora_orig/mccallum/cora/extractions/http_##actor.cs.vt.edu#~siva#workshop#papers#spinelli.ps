URL: http://actor.cs.vt.edu/~siva/workshop/papers/spinelli.ps
Refering-URL: http://actor.cs.vt.edu/~siva/workshop/papers.html
Root-URL: http://www.cs.vt.edu
Email: e-mail: fdds,scd,seg@doc.ic.ac.uk  
Title: An Object Model for Multiparadigm Programming  
Author: Diomidis Spinellis, Sophia Drossopoulou, and Susan Eisenbach 
Date: July, 1994  
Address: Gate, London SW7 2BZ  
Affiliation: Department of Computing Imperial College of Science, Technology and Medicine 180 Queen's  
Abstract-found: 0
Intro-found: 1
Reference: [Coo92] <author> William R. Cook. </author> <title> Interfaces and specifications for the Smalltalk-80 collection classes. </title> <journal> ACM SIG-PLAN Notices, </journal> <volume> 27(10) </volume> <pages> 1-15, </pages> <month> October </month> <year> 1992. </year> <booktitle> Sevent Annual Conference on Object-Oriented Programming Systems, Languages and Applications, OOPSLA '92 Conference Proceedings, </booktitle> <month> October 18-22, </month> <institution> Vancouver, British Columbia, Canada. </institution>
Reference-contexts: This is consistent with the recent trend in object-oriented programming of regarding inheritance as a producer's mechanism [Mey90], that has little to do with the end-user's use of the classes <ref> [Coo92] </ref>. Using to our approach a multiparadigm programming environment consists of a set of classes, one for each paradigm. The classes are ordered in a hierarchy whose root is the target architecture.
Reference: [Mee94] <author> Brian L. Meek. </author> <title> Programming languages: Towards greater commonality. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 29(4) </volume> <pages> 49-57, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Additionally, it provides a multiparadigm link editor and support for incorporating existing compilers into multiparadigm programming environments. 5 Proposed Workshop Topics Some topics that are interesting in the context of the work described above are the following: Object Size Granularity Least common denominator systems <ref> [Mee94] </ref> are efficient in their implementation at the cost of limited flexibility in the inter-operation between modules written in different languages. 4 Systems that introduce some sort of translation services such as the ones described in section 3 can allow for more sophisticated transactions between modules at the cost of run-time
Reference: [Mey90] <author> Bertrand Meyer. </author> <title> Lessons from the design of the Eiffel libraries. </title> <journal> Communications of the ACM, </journal> <volume> 33(9) </volume> <pages> 68-88, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: This is consistent with the recent trend in object-oriented programming of regarding inheritance as a producer's mechanism <ref> [Mey90] </ref>, that has little to do with the end-user's use of the classes [Coo92]. Using to our approach a multiparadigm programming environment consists of a set of classes, one for each paradigm. The classes are ordered in a hierarchy whose root is the target architecture.
Reference: [SDE94a] <author> Diomidis Spinellis, Sophia Drossopoulou, and Susan Eisenbach. </author> <title> Language and architecture paradigms as object classes: A unified approach towards multiparadigm programming. </title> <editor> In Jurg Gutknecht, editor, </editor> <booktitle> Programming Languages and System Architectures International Conference, </booktitle> <pages> pages 191-207, </pages> <address> Zurich, Switzerland, </address> <month> March </month> <year> 1994. </year> <note> Springer-Verlag. Lecture Notes in Computer Science 782. </note>
Reference-contexts: 1 Introduction We became interested in multi-language object models while researching problems related to multiparadigm programming <ref> [SDE94a, SDE94b] </ref>. It is widely accepted that different types of tasks can be best implemented in different paradigms. As an example the logic programming paradigm is particularly well suited for implementing expert systems, while many operations on lists can be elegantly described in the functional programming paradigm.
Reference: [SDE94b] <author> Diomidis Spinellis, Sophia Drossopoulou, and Susan Eisenbach. </author> <title> Object-oriented technology in mul-tiparadigm language implementation. </title> <journal> Journal of Object-Oriented Technology, </journal> <note> 1994. Accepted to be published. </note>
Reference-contexts: 1 Introduction We became interested in multi-language object models while researching problems related to multiparadigm programming <ref> [SDE94a, SDE94b] </ref>. It is widely accepted that different types of tasks can be best implemented in different paradigms. As an example the logic programming paradigm is particularly well suited for implementing expert systems, while many operations on lists can be elegantly described in the functional programming paradigm.
Reference: [Spi91] <author> Diomidis Spinellis. </author> <title> Type-safe linkage for variables and functions. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 26(8) </volume> <pages> 74-79, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Thus the object size granularity pays an important role in the efficiency and flexibility tradeoffs of such systems. Design methods, environments, and techniques that affect this granularity can be discussed. Type Systems and Dynamic Typing Although least common denominator approaches together with some sort of type checking link editors <ref> [Spi91] </ref> can solve many of the problems in this area dynamic typing introduces new problems that need be discussed. We propose the use of type gates similar in design to the call gates described in section 3.
Reference: [War83] <author> David H. D. Warren. </author> <title> An abstract Prolog instruction set. </title> <type> Technical Note 309, </type> <institution> SRI International, Artificial Intelligence Center, Computer Science and Technology Division, </institution> <address> 333 Ravenswood Ave., Menlo Park, CA, USA, </address> <month> October </month> <year> 1983. </year>
Reference-contexts: Taking as a paradigm class example, the logic programming paradigm realised as Prolog compiled into Warren abstract machine instructions <ref> [War83] </ref>, the class state variable contains the heap, stack and trail needed by the abstract machine.
Reference: [Wir85] <author> Niklaus Wirth. </author> <title> Programming in Modula-2. </title> <publisher> Springer Verlag, </publisher> <address> third edition, </address> <year> 1985. </year> <month> 5 </month>
Reference-contexts: The instance initialisation method is called once for every object instance when the object is loaded and before program execution begins. It can be used to initialise the module state variable. As an example, given the imperative paradigm and its concrete realisation in the form of Modula-2 <ref> [Wir85] </ref> programs, an object written in the imperative paradigm corresponds to a Modula-2 module. The source code variable of that object contains the source code of the module, the object code variable contains the compiled source, and the module state variable contains the contents of the global variables.
References-found: 8

