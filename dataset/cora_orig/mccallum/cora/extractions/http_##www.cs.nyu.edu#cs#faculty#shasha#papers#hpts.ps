URL: http://www.cs.nyu.edu/cs/faculty/shasha/papers/hpts.ps
Refering-URL: http://www.cs.nyu.edu/cs/faculty/shasha/papers/papers.html
Root-URL: http://www.cs.nyu.edu
Title: High Volume Transaction Processing Without Concurrency Control, Two Phase Commit, SQL or C++  
Author: Arthur Whitney Dennis Shasha Stevan Apter 
Address: 1105 Harker Avenue 251 Mercer Street 299 Park Avenue Palo Alto, CA 94031 New York, NY 10012 New York, NY 10171  
Affiliation: KX Systems Courant Institute, NYU Union Bank of Switzerland  
Abstract: Which engine should one use in such a case? IBM FastPath, Sybase, Oracle, or Object Store? We argue that an unconventional approach is called for: we use a list-based language called K having optimized support for bulk array operators, and that integrates networking, and a graphical user interface. Locking is unnecessary when single-threading such applications because the data fits into memory, obviating the need to go to disk except for logging purposes. Multithreading can be handled for OLTP applications by analyzing the arguments to transactions. The result is a (private, size-reduced) TPC/B benchmark that achieves 25,000 transactions per second with full recoverability and TCP/IP overhead on an (167 Megahertz) UltraSparc I. Further, hot disaster recovery can be done with far less overhead than required by two phase commit by using a sequential state machine approach. We show how to exploit multiple processors without complicating the language or our basic framework. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. A. Bernstein, V. Hadzilacos, and N. </author> <title> Goodman Concurrency Control and Recovery in Database Systems Addison-Wesley, </title> <year> 1987. </year>
Reference-contexts: We are asking for a serializable execution that is equivalent to a particular order of transactions (the arrival order of transactions). The algorithm OBEYORDER makes use of a programmer-provided predicate called CONFLICT that will determine whether two transactions conflict in the normal serializability sense <ref> [1] </ref>. For example, for TPC/B, CONFLICT (t1, t2) will hold if and only if t1 and t2 access the same account, branch or teller (and then only if we are worried about negative balances); all other updates are commutative. OBEYORDER works as follows: 1.
Reference: [2] <institution> Ken Birman "The Process Group Approach to Reliable Distributed Computing" Communications of the ACM 1993, </institution> <note> pp. 37-48 </note>
Reference-contexts: Failure of this processor however could cause the entire system to be unavailable. Handling time server failures requires coordination that is as hard as the consensus problem [8] and is therefore prone to blocking, but can be made safe using ISIS process groups <ref> [2] </ref> and live with high probability. A possible alternative is to choose an application-specific approach which we describe in the appendix. Both schemes entail little overhead during failure-free execution (two messages per server per collection of transactions).
Reference: [3] <author> Philip Bohannon, Dan Lieuwen, Rajeev Rastogi, Avi Silberschatz, S. </author> <title> Sudarshan The Architecture of the Dali Main-memory Storage Manager personal communication, </title> <year> 1996 </year>
Reference-contexts: The reason is that they keep the before-images of all data items. In the Dali project, researchers Jagadish, Dan Lieuwen, Phil Bohannon, Rajeev Rastogi, Avi Silberschatz, and S. Sudarshan have implemented multi-level recovery algorithms (including fuzzy checkpointing) and recoverable T-tree concurrency control algorithms <ref> [13, 4, 3] </ref>. Margaret Eich and her students have also worked on concurrency control and recovery [7]. Hector Garcia-Molina and Ken Salem have been among the first to observe that concurrency control might be unnecessary in a main memory environment [9].
Reference: [4] <author> Philip Bohannon, Rajeev Rastogi, Avi Silberschatz, S. </author> <title> Sudarshan Multi-level Recovery in the Dali Main-memory Storage Manager personal communication, </title> <year> 1996 </year>
Reference-contexts: The reason is that they keep the before-images of all data items. In the Dali project, researchers Jagadish, Dan Lieuwen, Phil Bohannon, Rajeev Rastogi, Avi Silberschatz, and S. Sudarshan have implemented multi-level recovery algorithms (including fuzzy checkpointing) and recoverable T-tree concurrency control algorithms <ref> [13, 4, 3] </ref>. Margaret Eich and her students have also worked on concurrency control and recovery [7]. Hector Garcia-Molina and Ken Salem have been among the first to observe that concurrency control might be unnecessary in a main memory environment [9].
Reference: [5] <editor> S. K. Cha et al. </editor> <booktitle> "Object-Oriented Design of a Main-Memory DBMS for Real-Time Applications" Proc of the Int Workshop on Real-Time Computing Systems and App (RTCSA 1995) </booktitle>
Reference-contexts: Others have already told us that main memory databases are great. You are just rediscovering that fact." Parry: It is indeed true that there has been excellent research in main-memory databases. Telecommunications databases are often main-memory <ref> [6, 5] </ref>. Toby Lehman and Mike Carey have looked at many main memory issues having to do with query processing [15], indexes (small fanout trees known as T-trees work well)[16], concurrency control [18], and recovery [17].
Reference: [6] <author> M. Driouche, Y. Gicquel, Brigitte Kerherv, G. Le Gac, Yann Lepetit, G. Nicaud "Sabrina-RT, </author> <title> A Distributed DBMS for Telecommunications." </title> <booktitle> EDBT 1988: </booktitle> <pages> 594-599 </pages>
Reference-contexts: Others have already told us that main memory databases are great. You are just rediscovering that fact." Parry: It is indeed true that there has been excellent research in main-memory databases. Telecommunications databases are often main-memory <ref> [6, 5] </ref>. Toby Lehman and Mike Carey have looked at many main memory issues having to do with query processing [15], indexes (small fanout trees known as T-trees work well)[16], concurrency control [18], and recovery [17].
Reference: [7] <author> Margaret H. </author> <title> Eich Main Memory Database Research Directions. </title> <booktitle> IWDM 1989: </booktitle> <pages> 251-268 </pages>
Reference-contexts: In the Dali project, researchers Jagadish, Dan Lieuwen, Phil Bohannon, Rajeev Rastogi, Avi Silberschatz, and S. Sudarshan have implemented multi-level recovery algorithms (including fuzzy checkpointing) and recoverable T-tree concurrency control algorithms [13, 4, 3]. Margaret Eich and her students have also worked on concurrency control and recovery <ref> [7] </ref>. Hector Garcia-Molina and Ken Salem have been among the first to observe that concurrency control might be unnecessary in a main memory environment [9]. ISIS [10] takes a complementary approach that ends almost at the same point.
Reference: [8] <author> M. J. Fischer, N. A. Lynch, and M. S. </author> <title> Patterson "Impossibility of Distributed Consensus with One Faulty Process" JACM April 1985 </title>
Reference-contexts: Failure of this processor however could cause the entire system to be unavailable. Handling time server failures requires coordination that is as hard as the consensus problem <ref> [8] </ref> and is therefore prone to blocking, but can be made safe using ISIS process groups [2] and live with high probability. A possible alternative is to choose an application-specific approach which we describe in the appendix.
Reference: [9] <author> Hector Garcia-Molina, </author> <title> Kenneth Salem Main Memory Database Systems: An Overview. </title> <type> TKDE 4(6): </type> <month> 509-516 </month> <year> (1992) </year>
Reference-contexts: Margaret Eich and her students have also worked on concurrency control and recovery [7]. Hector Garcia-Molina and Ken Salem have been among the first to observe that concurrency control might be unnecessary in a main memory environment <ref> [9] </ref>. ISIS [10] takes a complementary approach that ends almost at the same point. The ISIS mechanism delivers messages in order to the primary and backup site (s).
Reference: [10] <author> Richard Gostanian, </author> <type> rg@isis.com personal communication </type>
Reference-contexts: If you admit that you want a sequential machine approach, then you must be concerned about the following fact: SQL isn't deterministic even if executed sequentially as observed by Richard Gostanian of ISIS <ref> [10] </ref>. The basic reason is that set-oriented operations are non-deterministic, e.g. book a 9 am flight from jfk to lax on feb. 4 Which flight is booked and which seat is chosen may depend on record layouts. SQL enforces no order. <p> Margaret Eich and her students have also worked on concurrency control and recovery [7]. Hector Garcia-Molina and Ken Salem have been among the first to observe that concurrency control might be unnecessary in a main memory environment [9]. ISIS <ref> [10] </ref> takes a complementary approach that ends almost at the same point. The ISIS mechanism delivers messages in order to the primary and backup site (s).
Reference: [11] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques San Mateo, Calif.: </title> <publisher> Morgan-Kaufmann, </publisher> <year> 1992. </year>
Reference: [12] <author> Michael Heytens, Sheralyn Listgarten, Marie-Anne Neimat, Kevin Wilkinson Smallbase: </author> <title> A Main-Memory DBMS for High-Performance Applications (release 4.2) Personal communication, </title> <month> September 7, </month> <year> 1995 </year>
Reference-contexts: Some of these ideas found their way into the Starburst main-memory storage manager [20] where the authors find that the overhead of locking can dominate the cost of database accesses. The Smallbase project led by Marie-Anne Neimat also uses T-trees as well as hash indexes <ref> [12] </ref>. The project supports a subset of SQL. As in our approach, Smallbase serializes transactions. Smallbase plans to implement undo/redo recovery through value logging. On their size-reduced TPC/B benchmarks, they achieve 20,000 transactions per second through their storage manager interface without recoverability, serializability, or TCP/IP.
Reference: [13] <author> H. V. Jagadish, Daniel F. Lieuwen, Rajeev Rastogi, Abraham Silberschatz, S. Sudarshan Dali: </author> <title> A High Performance Main Memory Storage Manager. </title> <booktitle> VLDB 1994: </booktitle> <pages> 48-59 </pages>
Reference-contexts: The reason is that they keep the before-images of all data items. In the Dali project, researchers Jagadish, Dan Lieuwen, Phil Bohannon, Rajeev Rastogi, Avi Silberschatz, and S. Sudarshan have implemented multi-level recovery algorithms (including fuzzy checkpointing) and recoverable T-tree concurrency control algorithms <ref> [13, 4, 3] </ref>. Margaret Eich and her students have also worked on concurrency control and recovery [7]. Hector Garcia-Molina and Ken Salem have been among the first to observe that concurrency control might be unnecessary in a main memory environment [9].
Reference: [14] <author> Ralph Kimball "Data Warehouse Architect" DBMS, </author> <month> August </month> <year> 1996, </year> <journal> vol. </journal> <volume> 9, no. 9, </volume> <pages> pp. 14-16 </pages>
Reference-contexts: Queries on the ten most recent events, year-by-year comparisons, cost of goods sold calculations as well as extensions proposed for decision support by Redbrick (http://www.redbrick.com) and in recent issues of DBMS by Ralph Kimball in his "Data Warehouse Architect" column <ref> [14] </ref> require notions of order. Scientific databases [21] also require order. Writing such queries in SQL requires a Joe Celko (editor of DBMS magazine and SQL puzzlist extraordinaire) to do at all and even he may have trouble doing them efficiently.
Reference: [15] <author> Tobin J. Lehman, Michael J. </author> <title> Carey Query Processing in Main Memory Database Manage--ment Systems. </title> <booktitle> SIGMOD Conference 1986: </booktitle> <pages> 239-250 </pages>
Reference-contexts: You are just rediscovering that fact." Parry: It is indeed true that there has been excellent research in main-memory databases. Telecommunications databases are often main-memory [6, 5]. Toby Lehman and Mike Carey have looked at many main memory issues having to do with query processing <ref> [15] </ref>, indexes (small fanout trees known as T-trees work well)[16], concurrency control [18], and recovery [17]. Some of these ideas found their way into the Starburst main-memory storage manager [20] where the authors find that the overhead of locking can dominate the cost of database accesses.
Reference: [16] <author> Tobin J. Lehman, Michael J. Carey: </author> <title> A Study of Index Structures for Main Memory Database Management Systems. </title> <booktitle> VLDB 1986: </booktitle> <pages> 294-303 </pages>
Reference: [17] <author> Tobin J. Lehman, Michael J. Carey: </author> <title> A Recovery Algorithm for A High-Performance Memory-Resident Database System. </title> <booktitle> SIGMOD Conference 1987: </booktitle> <pages> 104-117 </pages>
Reference-contexts: Telecommunications databases are often main-memory [6, 5]. Toby Lehman and Mike Carey have looked at many main memory issues having to do with query processing [15], indexes (small fanout trees known as T-trees work well)[16], concurrency control [18], and recovery <ref> [17] </ref>. Some of these ideas found their way into the Starburst main-memory storage manager [20] where the authors find that the overhead of locking can dominate the cost of database accesses. The Smallbase project led by Marie-Anne Neimat also uses T-trees as well as hash indexes [12].
Reference: [18] <author> Tobin J. Lehman, Michael J. Carey: </author> <title> A Concurrency Control Algorithm for Memory-Resident Database Systems. </title> <booktitle> FODO 1989: </booktitle> <pages> 490-504 </pages>
Reference-contexts: Telecommunications databases are often main-memory [6, 5]. Toby Lehman and Mike Carey have looked at many main memory issues having to do with query processing [15], indexes (small fanout trees known as T-trees work well)[16], concurrency control <ref> [18] </ref>, and recovery [17]. Some of these ideas found their way into the Starburst main-memory storage manager [20] where the authors find that the overhead of locking can dominate the cost of database accesses. The Smallbase project led by Marie-Anne Neimat also uses T-trees as well as hash indexes [12].
Reference: [19] <author> Kai Li, Jeffrey F. </author> <title> Naughton Multiprocessor Main Memory Transaction Processing. </title> <booktitle> DPDS 1988: </booktitle> <pages> 177-187 </pages>
Reference-contexts: In a nice use of the P2 configurable database manager, Thomas and Batory achieved 100,000 transactions per second on an HP 755 (99 MHz)[22] assuming collision-free hashing. Li and Naughton <ref> [19] </ref> proposed a multiprocessor main memory databases. One thread groups input transactions into an input queue, though they don't use that queue for recovery. They write modified records to their log at commit. Their checkpoint thread sniffs the log and applies the changes to a shadow database.
Reference: [20] <author> Tobin J. Lehman, Eugene J. Shekita, </author> <title> Luis-Felipe Cabrera An Evaluation of Starburst's Memory Resident Storage Component. </title> <type> TKDE 4(6): </type> <month> 555-566 </month> <year> (1992) </year>
Reference-contexts: Toby Lehman and Mike Carey have looked at many main memory issues having to do with query processing [15], indexes (small fanout trees known as T-trees work well)[16], concurrency control [18], and recovery [17]. Some of these ideas found their way into the Starburst main-memory storage manager <ref> [20] </ref> where the authors find that the overhead of locking can dominate the cost of database accesses. The Smallbase project led by Marie-Anne Neimat also uses T-trees as well as hash indexes [12]. The project supports a subset of SQL. As in our approach, Smallbase serializes transactions.
Reference: [21] <institution> Joel Richardson "Supporting Lists in a Data Model (A Timely Approach)" VLDB-92, </institution> <note> pp. 127-138 </note>
Reference-contexts: Queries on the ten most recent events, year-by-year comparisons, cost of goods sold calculations as well as extensions proposed for decision support by Redbrick (http://www.redbrick.com) and in recent issues of DBMS by Ralph Kimball in his "Data Warehouse Architect" column [14] require notions of order. Scientific databases <ref> [21] </ref> also require order. Writing such queries in SQL requires a Joe Celko (editor of DBMS magazine and SQL puzzlist extraordinaire) to do at all and even he may have trouble doing them efficiently.

References-found: 21

