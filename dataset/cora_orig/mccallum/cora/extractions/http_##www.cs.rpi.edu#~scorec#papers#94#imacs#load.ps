URL: http://www.cs.rpi.edu/~scorec/papers/94/imacs/load.ps
Refering-URL: http://www.cs.rpi.edu/~scorec/papers/94/papers.html
Root-URL: http://www.cs.rpi.edu
Title: Load Balancing for the Parallel Adaptive Solution of Partial Differential Equa decomposition of a spatial
Author: tions H. L. deCougny, K. D. Devine, J. E. Flaherty, R. M. Loy, C. Ozturan, and M. S. Shephard 
Note: Dedicated to Bob Vichnevetsky on the occasion of his sixty-fifth birthday. Octree  
Address: Troy, New York 12180-3590.  
Affiliation: Scientific Computation Research Center, Rensselaer Polytechnic Institute  
Abstract: An adaptive technique for a partial differential system automatically adjusts a computational mesh or varies the order of a numerical procedure with a goal of obtaining a solution satisfying prescribed accuracy criteria in an optimal fashion. Processor load imbalances will, therefore, be introduced at adaptive enrichment steps during the course of a parallel computation. We develop and describe three procedures for retaining and restoring load balance that have low unit cost and are appropriate for use in an adaptive solution environment. Tiling balances load by using local optimality criteria within overlapping processor neighborhoods. Elemental data are migrated between processors within the same neighborhoods to restore balance. Tiling is restricted to uniform two-dimensional meshes and provides limited control of communications volume by priority-based element-selection criteria. These shortcomings can potentially be overcome by creating a dynamic partition graph connecting processors and their neighboring regions. After coloring the edges of the graph, elemental data are iteratively transferred between processors by pairwise exchange to permit a more global migration. Computational results are reported for two- and three-dimensional problems using nCUBE/2 hypercube, MasPar MP-2, and Thinking Machines CM-5 computers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Adjerid, M. Aiffa, and J. E. Flaherty, </author> <title> High-Order Finite Element Methods for Singularly Perturbed Elliptic and Parabolic Systems, </title> <journal> SIAM J. Appl. Math., </journal> <note> 1994, to appear. </note>
Reference-contexts: Colors in the top figures denote pressure levels while those of the bottom figures denote partition membership. deCougny et. al. / Load Balancing for Parallel Adaptive PDE Solution 29 balancing within overlapping neighborhoods and we demonstrate its effective performance by using it with a local finite element technique <ref> [1, 8, 9, 10, 11] </ref> to solve two-dimensional systems of conservation laws by adaptive hand p-refinement. The next step involves combining the hand p-refinement procedures to develop an hp-refinement algorithm.
Reference: [2] <author> S. Adjerid, J. Flaherty, P. Moore, and Y. Wang, </author> <title> High-Order Adaptive Methods for Parabolic Systems, </title> <journal> Physica-D, </journal> <volume> Vol. 60, </volume> <year> 1992, </year> <pages> pp. 94-111. </pages>
Reference-contexts: High-order methods and the combination of mesh refinement and order variation (hp-refinement) can produce remarkably efficient methods with exponential convergence rates <ref> [2, 4, 5, 11, 12, 27] </ref>. Like adaptivity, parallel computation is making it possible to solve previously intractable problems. With problems continuing to increase in complexity through the inclusion of more realistic effects in models, it seems natural to unite adaptivity and parallelism to achieve the highest gains in efficiency. <p> Adaptivity, however, introduces complications that do not arise when simpler solution strategies are implemented on parallel computers. Adaptive algorithms utilize unstructured <ref> [2] </ref> or hierarchical [3, 7] meshes that make the task of balancing processor loading much more difficult than with uniform structures. A balanced loading will, furthermore, become unbalanced as additional degrees of freedom are introduced or removed by adaptive hand p-refinement.
Reference: [3] <author> D. C. Arney and J. E. Flaherty, </author> <title> An Adaptive Mesh Moving and Local Refinement Method for Time-Dependent Partial Differential Equations, </title> <journal> ACM Trans. Math. Software, </journal> <volume> Vol. 16, </volume> <year> 1990, </year> <pages> pp. 48-71. </pages>
Reference-contexts: Adaptivity, however, introduces complications that do not arise when simpler solution strategies are implemented on parallel computers. Adaptive algorithms utilize unstructured [2] or hierarchical <ref> [3, 7] </ref> meshes that make the task of balancing processor loading much more difficult than with uniform structures. A balanced loading will, furthermore, become unbalanced as additional degrees of freedom are introduced or removed by adaptive hand p-refinement.
Reference: [4] <author> I. Babuska, </author> <title> The p- and hp-Versions of the Finite Element Method. The State of the Art, in Finite Elements: Theory and Applications, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: High-order methods and the combination of mesh refinement and order variation (hp-refinement) can produce remarkably efficient methods with exponential convergence rates <ref> [2, 4, 5, 11, 12, 27] </ref>. Like adaptivity, parallel computation is making it possible to solve previously intractable problems. With problems continuing to increase in complexity through the inclusion of more realistic effects in models, it seems natural to unite adaptivity and parallelism to achieve the highest gains in efficiency.
Reference: [5] <author> R. Biswas, K. D. Devine, and J. E. Flaherty, </author> <title> Parallel, Adaptive Finite Element Methods for Conservation Laws, </title> <journal> Appl. Numer. Math., </journal> <volume> Vol. 14, </volume> <year> 1994, </year> <pages> pp. 255-284. </pages>
Reference-contexts: High-order methods and the combination of mesh refinement and order variation (hp-refinement) can produce remarkably efficient methods with exponential convergence rates <ref> [2, 4, 5, 11, 12, 27] </ref>. Like adaptivity, parallel computation is making it possible to solve previously intractable problems. With problems continuing to increase in complexity through the inclusion of more realistic effects in models, it seems natural to unite adaptivity and parallelism to achieve the highest gains in efficiency. <p> Applied to vector systems of conservation laws, finite element solutions U (x; t) are obtained on a two-dimensional net of rectangular elements using a spatially discontinuous Galerkin method <ref> [5, 8, 9, 10] </ref> and explicit Runge-Kutta integration [5]. A spatial discretization error estimate E (t) in the L 1 norm is obtained by p-refinement [5, 11] and used to control adaptive spatial enrichment so that E (t) *, for a prescribed tolerance *. With adaptive p-refinement (cf. <p> Applied to vector systems of conservation laws, finite element solutions U (x; t) are obtained on a two-dimensional net of rectangular elements using a spatially discontinuous Galerkin method [5, 8, 9, 10] and explicit Runge-Kutta integration <ref> [5] </ref>. A spatial discretization error estimate E (t) in the L 1 norm is obtained by p-refinement [5, 11] and used to control adaptive spatial enrichment so that E (t) *, for a prescribed tolerance *. With adaptive p-refinement (cf. <p> A spatial discretization error estimate E (t) in the L 1 norm is obtained by p-refinement <ref> [5, 11] </ref> and used to control adaptive spatial enrichment so that E (t) *, for a prescribed tolerance *. With adaptive p-refinement (cf. <p> In the adaptive h-refinement algorithm (cf. Figure 2), we locally refine element j if E j &gt; TOL=2 m , where m is the level of refinement. Refinement involves dividing an element into four and initializing the solution through L 2 -projection of the coarse-mesh data <ref> [5] </ref>. Elements neighboring high-error elements are also refined to provide a buffer between high- and low-error regions and maintain a difference of at most one level of refinement across element edges. For each time step, the local finite element method [5] is applied on successively finer meshes. <p> the solution through L 2 -projection of the coarse-mesh data <ref> [5] </ref>. Elements neighboring high-error elements are also refined to provide a buffer between high- and low-error regions and maintain a difference of at most one level of refinement across element edges. For each time step, the local finite element method [5] is applied on successively finer meshes. <p> Example 4.2 In Figure 18, we show the pressure contours of a Mach 2 Eu-ler flow past the "Cone" mesh of Example 4.1. The solution employs the discontinuous finite element scheme <ref> [5, 8, 9, 10] </ref> with van Leer's flux vector splitting [32] and was computed on a Thinking Machines CM-5 computer with 128 processors. Several h-refinement steps were required to yield this mesh.
Reference: [6] <author> M. J. Berger and S. H. Bokhari, </author> <title> A Partitioning Strategy for Nonuniform Problems on Multiprocessors, </title> <journal> IEEE Trans. Comput., </journal> <volume> Vol. C-36, No. 5, </volume> <year> 1987, </year> <pages> pp. 570-580. </pages>
Reference-contexts: Successful load partitioning strategies for unstructured-mesh computation on distributed-memory parallel computers employ recursive bisection to repeatedly split the discretized domain into two subdomains having balanced loading. Specific techniques use geometric <ref> [6] </ref>, connective [15], or spectral [16, 26] information. When applied to the entire mesh, recursive bisection methods require a complete remapping of the elements of the mesh and, thus, involve a substantial overhead. Some methods also require considerable computation [26]. <p> With only local optimization, it can require several time or iterative steps to achieve a global balance. Finally, tiling provides limited capabilities for controlling the shape of partitions to reduce the communications volume. Partition shape control could utilize orthogonal recursive bisection <ref> [6] </ref> in, say, directions of principal axes of inertia of partitions. Redistribution through pairwise exchanges, our second migration strategy, builds upon tiling and can correct some of these deficiencies. Neighborhood adjacency is represented by a dynamic partition graph. <p> Since our applications involve unstructured meshes with curved boundaries, the communication requirements between mapped partitions are irregular. Hence, the slower router communication had to be used. Four test cases involving meshes on square and irregular regions were run. Starting with a coarse mesh, orthogonal recursive Bisection <ref> [6] </ref> was used to get an initial partition. The partitioned mesh was mapped onto the processors and refined selectively in parallel to create imbalanced processor loads. The square mesh was refined in one corner to create a "plateau" of high loading.
Reference: [7] <author> M. J. Berger and J. Oliger, </author> <title> Adaptive Mesh Refinement for Hyperbolic Partial Differential Equations, </title> <journal> J. Comput. Phys., </journal> <volume> Vol. 53, </volume> <year> 1984, </year> <pages> pp. 484-512. </pages>
Reference-contexts: Adaptivity, however, introduces complications that do not arise when simpler solution strategies are implemented on parallel computers. Adaptive algorithms utilize unstructured [2] or hierarchical <ref> [3, 7] </ref> meshes that make the task of balancing processor loading much more difficult than with uniform structures. A balanced loading will, furthermore, become unbalanced as additional degrees of freedom are introduced or removed by adaptive hand p-refinement.
Reference: [8] <author> B. Cockburn, S.-Y. Lin, and C.-W. Shu, </author> <title> TVB Runge-Kutta Local Projection Discontinuous Galerkin Finite Element Method for Conservation Laws III: One-Dimensional Systems, </title> <journal> J. Comput. Phys., </journal> <volume> Vol. 84, </volume> <year> 1989, </year> <pages> pp. 90-113. </pages>
Reference-contexts: Applied to vector systems of conservation laws, finite element solutions U (x; t) are obtained on a two-dimensional net of rectangular elements using a spatially discontinuous Galerkin method <ref> [5, 8, 9, 10] </ref> and explicit Runge-Kutta integration [5]. A spatial discretization error estimate E (t) in the L 1 norm is obtained by p-refinement [5, 11] and used to control adaptive spatial enrichment so that E (t) *, for a prescribed tolerance *. With adaptive p-refinement (cf. <p> Example 4.2 In Figure 18, we show the pressure contours of a Mach 2 Eu-ler flow past the "Cone" mesh of Example 4.1. The solution employs the discontinuous finite element scheme <ref> [5, 8, 9, 10] </ref> with van Leer's flux vector splitting [32] and was computed on a Thinking Machines CM-5 computer with 128 processors. Several h-refinement steps were required to yield this mesh. <p> Colors in the top figures denote pressure levels while those of the bottom figures denote partition membership. deCougny et. al. / Load Balancing for Parallel Adaptive PDE Solution 29 balancing within overlapping neighborhoods and we demonstrate its effective performance by using it with a local finite element technique <ref> [1, 8, 9, 10, 11] </ref> to solve two-dimensional systems of conservation laws by adaptive hand p-refinement. The next step involves combining the hand p-refinement procedures to develop an hp-refinement algorithm.
Reference: [9] <author> B. Cockburn and C.-W. Shu, </author> <title> TVB Runge-Kutta Local Projection Discontinuous Galerkin Finite Element Method for Conservation Laws II: General Framework, </title> <journal> Math. Comp., </journal> <volume> Vol. 52, </volume> <year> 1989, </year> <pages> pp. 411-435. </pages> <editor> deCougny et. al. </editor> / <title> Load Balancing for Parallel Adaptive PDE Solution 31 </title>
Reference-contexts: Applied to vector systems of conservation laws, finite element solutions U (x; t) are obtained on a two-dimensional net of rectangular elements using a spatially discontinuous Galerkin method <ref> [5, 8, 9, 10] </ref> and explicit Runge-Kutta integration [5]. A spatial discretization error estimate E (t) in the L 1 norm is obtained by p-refinement [5, 11] and used to control adaptive spatial enrichment so that E (t) *, for a prescribed tolerance *. With adaptive p-refinement (cf. <p> Example 4.2 In Figure 18, we show the pressure contours of a Mach 2 Eu-ler flow past the "Cone" mesh of Example 4.1. The solution employs the discontinuous finite element scheme <ref> [5, 8, 9, 10] </ref> with van Leer's flux vector splitting [32] and was computed on a Thinking Machines CM-5 computer with 128 processors. Several h-refinement steps were required to yield this mesh. <p> Colors in the top figures denote pressure levels while those of the bottom figures denote partition membership. deCougny et. al. / Load Balancing for Parallel Adaptive PDE Solution 29 balancing within overlapping neighborhoods and we demonstrate its effective performance by using it with a local finite element technique <ref> [1, 8, 9, 10, 11] </ref> to solve two-dimensional systems of conservation laws by adaptive hand p-refinement. The next step involves combining the hand p-refinement procedures to develop an hp-refinement algorithm.
Reference: [10] <author> B. Cockburn, S.-Y. Lin, and C.-W. Shu, </author> <title> TVB Runge-Kutta Local Projection Discontinuous Galerkin Finite Element Method for Conservation Laws IV: The Multidimensional Case, </title> <journal> Math. Comp., </journal> <volume> Vol. 54, </volume> <year> 1990, </year> <pages> pp. 545-581. </pages>
Reference-contexts: Applied to vector systems of conservation laws, finite element solutions U (x; t) are obtained on a two-dimensional net of rectangular elements using a spatially discontinuous Galerkin method <ref> [5, 8, 9, 10] </ref> and explicit Runge-Kutta integration [5]. A spatial discretization error estimate E (t) in the L 1 norm is obtained by p-refinement [5, 11] and used to control adaptive spatial enrichment so that E (t) *, for a prescribed tolerance *. With adaptive p-refinement (cf. <p> Example 4.2 In Figure 18, we show the pressure contours of a Mach 2 Eu-ler flow past the "Cone" mesh of Example 4.1. The solution employs the discontinuous finite element scheme <ref> [5, 8, 9, 10] </ref> with van Leer's flux vector splitting [32] and was computed on a Thinking Machines CM-5 computer with 128 processors. Several h-refinement steps were required to yield this mesh. <p> Colors in the top figures denote pressure levels while those of the bottom figures denote partition membership. deCougny et. al. / Load Balancing for Parallel Adaptive PDE Solution 29 balancing within overlapping neighborhoods and we demonstrate its effective performance by using it with a local finite element technique <ref> [1, 8, 9, 10, 11] </ref> to solve two-dimensional systems of conservation laws by adaptive hand p-refinement. The next step involves combining the hand p-refinement procedures to develop an hp-refinement algorithm.
Reference: [11] <author> K. Devine, J. Flaherty, R. Loy, and S. Wheat, </author> <title> Parallel Partitioning Strategies for the Adaptive Solution of Conservation Laws, </title> <type> Tech. Rep. 94-1, </type> <institution> Dept. of Comp. Sci. Rensselaer Polytechnic Institute, Troy, </institution> <year> 1994. </year>
Reference-contexts: High-order methods and the combination of mesh refinement and order variation (hp-refinement) can produce remarkably efficient methods with exponential convergence rates <ref> [2, 4, 5, 11, 12, 27] </ref>. Like adaptivity, parallel computation is making it possible to solve previously intractable problems. With problems continuing to increase in complexity through the inclusion of more realistic effects in models, it seems natural to unite adaptivity and parallelism to achieve the highest gains in efficiency. <p> A spatial discretization error estimate E (t) in the L 1 norm is obtained by p-refinement <ref> [5, 11] </ref> and used to control adaptive spatial enrichment so that E (t) *, for a prescribed tolerance *. With adaptive p-refinement (cf. <p> Colors in the top figures denote pressure levels while those of the bottom figures denote partition membership. deCougny et. al. / Load Balancing for Parallel Adaptive PDE Solution 29 balancing within overlapping neighborhoods and we demonstrate its effective performance by using it with a local finite element technique <ref> [1, 8, 9, 10, 11] </ref> to solve two-dimensional systems of conservation laws by adaptive hand p-refinement. The next step involves combining the hand p-refinement procedures to develop an hp-refinement algorithm.
Reference: [12] <author> P. Devloo, J. T. Oden, and P. Pattani, </author> <title> An h-p Adaptive Finite Element Method for the Numerical Simulation of Compressible Flow, </title> <journal> Comput. Methods Appl. Mech. Engng., </journal> <volume> Vol. 70, </volume> <year> 1988, </year> <pages> pp. 203-235. </pages>
Reference-contexts: High-order methods and the combination of mesh refinement and order variation (hp-refinement) can produce remarkably efficient methods with exponential convergence rates <ref> [2, 4, 5, 11, 12, 27] </ref>. Like adaptivity, parallel computation is making it possible to solve previously intractable problems. With problems continuing to increase in complexity through the inclusion of more realistic effects in models, it seems natural to unite adaptivity and parallelism to achieve the highest gains in efficiency.
Reference: [13] <author> S. Dey, </author> <type> personal communication, </type> <year> 1993. </year>
Reference-contexts: Example 4.1 Performance results obtained by applying the tree-based partitioning algorithm to various three-dimensional irregular meshes are presented in Figures 15 and 16. The meshes were generated by the finite octree mesh generator [29]. "Airplane" is a 182K-element mesh of the volume surrounding a simple airplane <ref> [13] </ref>. "Copter" is a 242K-element mesh of the body of a helicopter [13]. "Onera," "Onera2," and "Onera3" are 16K-, 70K-, and 293K-element meshes, respectively, of the space surrounding a swept, untwisted Onera-M6 wing which has been refined to resolve a bow shock [14]. "Cone" is a 139K-element mesh of the space <p> The meshes were generated by the finite octree mesh generator [29]. "Airplane" is a 182K-element mesh of the volume surrounding a simple airplane <ref> [13] </ref>. "Copter" is a 242K-element mesh of the body of a helicopter [13]. "Onera," "Onera2," and "Onera3" are 16K-, 70K-, and 293K-element meshes, respectively, of the space surrounding a swept, untwisted Onera-M6 wing which has been refined to resolve a bow shock [14]. "Cone" is a 139K-element mesh of the space around a cone having a 10 ffi half-angle and which also has
Reference: [14] <author> M. Dindar, </author> <type> personal communication, </type> <year> 1993. </year>
Reference-contexts: mesh of the volume surrounding a simple airplane [13]. "Copter" is a 242K-element mesh of the body of a helicopter [13]. "Onera," "Onera2," and "Onera3" are 16K-, 70K-, and 293K-element meshes, respectively, of the space surrounding a swept, untwisted Onera-M6 wing which has been refined to resolve a bow shock <ref> [14] </ref>. "Cone" is a 139K-element mesh of the space around a cone having a 10 ffi half-angle and which also has been refined to resolve a shock.
Reference: [15] <author> C. Farhat, </author> <title> A Simple and Efficient Automatic FEM Domain Decomposer, </title> <journal> Comp. and Struct., </journal> <volume> Vol. 28, No. 5, </volume> <year> 1988, </year> <pages> pp. 579-602. </pages>
Reference-contexts: Successful load partitioning strategies for unstructured-mesh computation on distributed-memory parallel computers employ recursive bisection to repeatedly split the discretized domain into two subdomains having balanced loading. Specific techniques use geometric [6], connective <ref> [15] </ref>, or spectral [16, 26] information. When applied to the entire mesh, recursive bisection methods require a complete remapping of the elements of the mesh and, thus, involve a substantial overhead. Some methods also require considerable computation [26]. <p> As shown (Figure 13 (f)), Node 5 is very expensive, and when the traversal is continued at Node 3, P 1 must be closed and work continues with partition P 2 . Our partitioning algorithm is similar in spirit to that of Farhat's automatic finite element decomposer <ref> [15] </ref>. Farhat essentially performs a breadth-first search of the mesh, accumulating elements into partitions. Subdomains are accumulated during the search, and each is closed in turn when its cardinality reaches the number of elements divided by the number of processors.
Reference: [16] <author> M. Fiedler, </author> <title> Algebraic Connectivity of Graphs, </title> <journal> Czechoslovak Math. J., </journal> <volume> Vol. 23, </volume> <year> 1973, </year> <pages> pp. 298-305. </pages>
Reference-contexts: Successful load partitioning strategies for unstructured-mesh computation on distributed-memory parallel computers employ recursive bisection to repeatedly split the discretized domain into two subdomains having balanced loading. Specific techniques use geometric [6], connective [15], or spectral <ref> [16, 26] </ref> information. When applied to the entire mesh, recursive bisection methods require a complete remapping of the elements of the mesh and, thus, involve a substantial overhead. Some methods also require considerable computation [26].
Reference: [17] <author> W. Gropp and B. Smith, </author> <title> Users Manual for the Chameleon Parallel Programming Tools, </title> <type> Tech. Rep. </type> <institution> ANL-93/23, Argonne National Laboratories, Argonne, </institution> <year> 1993. </year>
Reference-contexts: Software is being developed with portability in mind and, with aims of unifying our research effort and performing explicit comparisons, we find ourselves heading for a message passing environment using the Chameleon protocol <ref> [17] </ref>. 6 Acknowledgements This research was supported by the Air Force Office of Scientific Research under Grant F49620-94-1-0200; the U.S.
Reference: [18] <author> W. Gui and I. Babuska, </author> <title> The h-, p- and hp- Versions of the Finite Element Method in One Dimension. Part I: The Error Analysis of the p Version. Part II: The Error Analysis of the h and hp Versions. Part III: The Adaptive hp Version, in Numerische Mathematik, </title> <note> 1994, to appear. </note>
Reference-contexts: When used with hyperbolic systems, h-refinement would be used near discontinuities while p-refinement would be used in regions of smooth flow. Appropriate combinations of hand p-refinement at discontinuities, such as the 1:15 ratio used with elliptic problems <ref> [18] </ref>, may, however, provide superior performance. Pairwise exchange extends tiling to unstructured meshes and provides a means for controlling communications volume through bidirectional migration. This procedure is being implemented on a MIMD computer and development and testing will continue using three-dimensional problems in biomechanics and compressible flow as examples.
Reference: [19] <author> S. W. Hammond, </author> <title> Mapping Unstructured Grid Computations to Massively Parallel Computers, </title> <type> Ph.D. Dissertation, </type> <institution> Comp. Sci. Dept., Rensselaer Polytechnic Institute, Troy, </institution> <year> 1991. </year>
Reference-contexts: Neighborhood adjacency is represented by a dynamic partition graph. Loading information is used to color edges of the partition graph so that work can be transferred between pairs of processors in a manner similar to a pairwise heuristic strategy introduced by Hammond <ref> [19] </ref>. This strategy, described in Section 3, can be used with local partitioning strategies to provide better shape control when selecting elements for migration. Two-dimensional unstructured-mesh computations performed on a MasPar MP-2 SIMD system, demonstrate some capabilities of this procedure.
Reference: [20] <author> B. Hendrickson and R. Leland, </author> <title> An Improved Spectral Graph Partitioning Algorithm for Mapping Parallel Computations, </title> <type> Tech. Rep. </type> <institution> SAND92-1460, Sandia National Laboratories, </institution> <address> Albuquerque, </address> <year> 1992. </year>
Reference-contexts: The proportion is, in a sense, the total surface area that partitions hold in common. Smaller ratios require less communication relative to the amount of local data access. This measure is closely related to the number of "cuts" that the partition creates <ref> [24, 20, 30] </ref>; however, we have chosen to normalize by the total number of faces in order to compare partition quality over a wide range of mesh sizes and number of partitions.
Reference: [21] <author> B. Hendrickson and R. Leland, </author> <title> Multidimensional Spectral Load Balancing, </title> <type> Tech. Rep. </type> <institution> SAND93-0074, Sandia National Laboratories, Albu-querque, </institution> <year> 1993. </year>
Reference-contexts: Partitioning is based on two tree traversals that (i) calculate the processing costs of subtrees connected to each node and (ii) form the partitions. When used globally, partitions have approximately the same communications volume as other strategies <ref> [21, 24, 26] </ref>, but their cost is far less. We demonstrate the performance of the tree-based partitioning technique on three-dimensional meshes that are associated with flight vehicle flows.
Reference: [22] <author> J. Jaja, </author> <title> An Introduction to Parallel Algorithms, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <year> 1992. </year> <editor> deCougny et. al. </editor> / <title> Load Balancing for Parallel Adaptive PDE Solution 32 </title>
Reference-contexts: Section 3.2). 5. To facilitate efficient parallel scan operations on T i , each tree is linearized by establishing links between neighboring processors. The links can be constructed by either an Euler Tour <ref> [22] </ref> or a depth-first traversal [31] of the tree. 6. The linearized tree is edge-colored by employing a parallel scan operation.
Reference: [23] <author> Z. Johan, </author> <type> personal communication, </type> <year> 1993. </year>
Reference-contexts: This performance is comparable to recursive spectral bisection <ref> [23] </ref> but requires much less computation (O (J) as opposed to O (J 2 ) [26]). The best performance occurred with the helicopter mesh, which was the only mesh of a solid object (as opposed to a flow field surrounding an object). <p> Recursive spectral bisection at terminal tree nodes may be parallelized [24], it costs less than a global application because of the smaller partition domains and its nonlinear complexity, and it is more effective on smaller regions <ref> [23] </ref>. Theoretical issues associated with each algorithm must be investigated. Convergence under iteration of either the tiling or pairwise exchange migration strategies must be established, as must the avoidance of limit cycles.
Reference: [24] <author> Z. Johan, K. Mathur, and S. L. Johnsson, </author> <title> An Efficient Communication Strategy for Finite Element Methods on the Connection Machine CM-5 System, </title> <type> Tech. Rep. No. 256, </type> <institution> Thinking Machines Corp., </institution> <address> Cambridge, </address> <year> 1993. </year>
Reference-contexts: Partitioning is based on two tree traversals that (i) calculate the processing costs of subtrees connected to each node and (ii) form the partitions. When used globally, partitions have approximately the same communications volume as other strategies <ref> [21, 24, 26] </ref>, but their cost is far less. We demonstrate the performance of the tree-based partitioning technique on three-dimensional meshes that are associated with flight vehicle flows. <p> The proportion is, in a sense, the total surface area that partitions hold in common. Smaller ratios require less communication relative to the amount of local data access. This measure is closely related to the number of "cuts" that the partition creates <ref> [24, 20, 30] </ref>; however, we have chosen to normalize by the total number of faces in order to compare partition quality over a wide range of mesh sizes and number of partitions. <p> For example, octree decomposition could be used to provide a course partition that could be continued with recursive spectral bisection [26]. Recursive spectral bisection at terminal tree nodes may be parallelized <ref> [24] </ref>, it costs less than a global application because of the smaller partition domains and its nonlinear complexity, and it is more effective on smaller regions [23]. Theoretical issues associated with each algorithm must be investigated.
Reference: [25] <author> E. Leiss and H. Reddy, </author> <title> Distributed Load Balancing: Design and Performance Analysis, </title> <editor> W. M. </editor> <booktitle> Keck Research Computation Laboratory, </booktitle> <volume> Vol. 5, </volume> <year> 1989, </year> <pages> pp. 205-270. </pages>
Reference-contexts: Our most mature partitioning strategy, tiling [34], is a modification of a dynamic load balancing technique developed by Leiss and Reddy <ref> [25, 28] </ref> who used local optimality criteria within overlapping processor neighborhoods to achieve a global load balance. <p> Additionally, transferring elements between partitions that share only a vertex results in a higher surface to volume ratio which increases communication cost. Figure 6 (b) shows the partition graph obtained from the mesh distribution in Figure 6 (a). Following Leiss and Reddy <ref> [25] </ref>, a workload deficient processor will request work from its most heavily loaded neighbor. As a result, a processor can receive multiple requests but can only request load from one processor. <p> The Leiss and Reddy <ref> [25] </ref> load request process is used to construct the forest of trees T i . An edge of G P is marked when a request has been made to indicate whether or not it is a tree edge. <p> In Figure 8 (b), we show the load requests and grants for a sample subtree. Leiss and Reddy <ref> [25] </ref> investigated convergence of the iterative load-balancing algorithm without limit cycles (indefinite repeated load transfer patterns). Let an H-neighborhood denote the neighbors of a processor within a distance of H and o denote a load threshold value. If elements are taken as load units, then o = 1. <p> In general, choosing H &gt; 1 will increase the communication volume and reduce the efficiency of the iterative balancing algorithm. To avoid this problem with Leiss and Reddy's <ref> [25] </ref> approach while keeping H = 1, two modifications are made to handle the case when the load difference between neighboring processors is o .
Reference: [26] <author> A. Pothen, H. Simon, and K.-P. Liou, </author> <title> Partitioning Sparse Matrices with Eigenvectors of Graphs, </title> <journal> SIAM Journal of Matrix Analysis and Applications, </journal> <volume> Vol. 11, </volume> <year> 1990, </year> <pages> pp. 430-452. </pages>
Reference-contexts: Successful load partitioning strategies for unstructured-mesh computation on distributed-memory parallel computers employ recursive bisection to repeatedly split the discretized domain into two subdomains having balanced loading. Specific techniques use geometric [6], connective [15], or spectral <ref> [16, 26] </ref> information. When applied to the entire mesh, recursive bisection methods require a complete remapping of the elements of the mesh and, thus, involve a substantial overhead. Some methods also require considerable computation [26]. <p> Specific techniques use geometric [6], connective [15], or spectral [16, 26] information. When applied to the entire mesh, recursive bisection methods require a complete remapping of the elements of the mesh and, thus, involve a substantial overhead. Some methods also require considerable computation <ref> [26] </ref>. Thus, global recursive bisection methods are too expensive for use with adaptive methods which, as noted, require repeated element redistribution. Recursive bisection may be of use with an adaptive strategy if applied locally to regions of the domain affected by adaptive enrichment [33]. <p> Partitioning is based on two tree traversals that (i) calculate the processing costs of subtrees connected to each node and (ii) form the partitions. When used globally, partitions have approximately the same communications volume as other strategies <ref> [21, 24, 26] </ref>, but their cost is far less. We demonstrate the performance of the tree-based partitioning technique on three-dimensional meshes that are associated with flight vehicle flows. <p> This performance is comparable to recursive spectral bisection [23] but requires much less computation (O (J) as opposed to O (J 2 ) <ref> [26] </ref>). The best performance occurred with the helicopter mesh, which was the only mesh of a solid object (as opposed to a flow field surrounding an object). The solid can easily be cut along its major axis to produce partitions with small inter-partition boundaries, and was included for generality. <p> It should also be possible to combine octree partitioning with other strategies to provide additional control of communications volume. For example, octree decomposition could be used to provide a course partition that could be continued with recursive spectral bisection <ref> [26] </ref>. Recursive spectral bisection at terminal tree nodes may be parallelized [24], it costs less than a global application because of the smaller partition domains and its nonlinear complexity, and it is more effective on smaller regions [23]. Theoretical issues associated with each algorithm must be investigated.
Reference: [27] <author> E. Rank and I. Babuska, </author> <title> An Expert System for the Optimal Mesh Design in the hp-Version of the Finite Element Method, </title> <journal> Intl. J. Numer. Meths. in Engng., </journal> <volume> Vol. 24, </volume> <year> 1987, </year> <pages> pp. 2087-2106. </pages>
Reference-contexts: High-order methods and the combination of mesh refinement and order variation (hp-refinement) can produce remarkably efficient methods with exponential convergence rates <ref> [2, 4, 5, 11, 12, 27] </ref>. Like adaptivity, parallel computation is making it possible to solve previously intractable problems. With problems continuing to increase in complexity through the inclusion of more realistic effects in models, it seems natural to unite adaptivity and parallelism to achieve the highest gains in efficiency.
Reference: [28] <author> H. N. Reddy, </author> <title> On Load Balancing, </title> <type> Ph.D. Dissertation, </type> <institution> Dept. Comp. Sci., Univ. of Houston, Houston, </institution> <year> 1989. </year>
Reference-contexts: Our most mature partitioning strategy, tiling [34], is a modification of a dynamic load balancing technique developed by Leiss and Reddy <ref> [25, 28] </ref> who used local optimality criteria within overlapping processor neighborhoods to achieve a global load balance.
Reference: [29] <author> M. S. Shephard and M. K. Georges, </author> <title> Automatic Three-Dimensional Mesh Generation by the Finite Octree Technique, </title> <journal> Int. J. Numer. Meths. Engng., </journal> <volume> Vol. 32, No. 4, </volume> <year> 1991, </year> <pages> pp. 709-749. </pages>
Reference-contexts: Two-dimensional unstructured-mesh computations performed on a MasPar MP-2 SIMD system, demonstrate some capabilities of this procedure. Octree decomposition is a successful strategy for generating three-dimensional unstructured meshes <ref> [29] </ref> and we develop (cf. Section 4) a partitioning technique that exploits the properties of the underlying tree structure. Partitioning may be done locally or globally, but, in either case, it is inexpensive and, hence, may be used with adaptive procedures. <p> In particular, we propose a tree-based partitioning algorithm that uses the hierarchical structure of octree-derived unstructured meshes to distribute elemental data while reducing information exchange between processors. An octree-based mesh generator <ref> [29] </ref> deCougny et. al. / Load Balancing for Parallel Adaptive PDE Solution 20 (a) (b) quadtree structure (c). recursively subdivides an embedding of the problem domain in a cubic universe into eight octants wherever more resolution is required. <p> After obtaining adequate resolution, leaf quadrants are subdivided into triangular elements that are pointed to by leaf nodes of the tree (Figures 12 (b,c)). Quadrants containing the object are decomposed using the geometry of the object. Smoothing <ref> [29] </ref>, which normally follows element creation, is not shown. deCougny et. al. / Load Balancing for Parallel Adaptive PDE Solution 21 Our tree-based procedure creates a one-dimensional ordering of the octree and partitions it into nearly equal-sized segments based on tree topology. <p> Example 4.1 Performance results obtained by applying the tree-based partitioning algorithm to various three-dimensional irregular meshes are presented in Figures 15 and 16. The meshes were generated by the finite octree mesh generator <ref> [29] </ref>. "Airplane" is a 182K-element mesh of the volume surrounding a simple airplane [13]. "Copter" is a 242K-element mesh of the body of a helicopter [13]. "Onera," "Onera2," and "Onera3" are 16K-, 70K-, and 293K-element meshes, respectively, of the space surrounding a swept, untwisted Onera-M6 wing which has been refined to <p> This procedure is being implemented on a MIMD computer and development and testing will continue using three-dimensional problems in biomechanics and compressible flow as examples. Octree-based partitioning provides an effective and efficient partitioning strategy that may either be used in conjunction with octree mesh generation <ref> [29] </ref> or on its own, by the inexpensive construction of an octree from an existing mesh. Parallel partitioning techniques and incremental migration strategies for use with adaptivity are being developed. It should also be possible to combine octree partitioning with other strategies to provide additional control of communications volume.
Reference: [30] <author> H. D. Simon, </author> <title> Partitioning of Unstructured Problems for Parallel Processing, </title> <journal> Comput. Systs. Engng., </journal> <volume> Vol. 2, </volume> <year> 1991, </year> <pages> pp. 135-148. </pages>
Reference-contexts: The proportion is, in a sense, the total surface area that partitions hold in common. Smaller ratios require less communication relative to the amount of local data access. This measure is closely related to the number of "cuts" that the partition creates <ref> [24, 20, 30] </ref>; however, we have chosen to normalize by the total number of faces in order to compare partition quality over a wide range of mesh sizes and number of partitions.
Reference: [31] <author> B. K. Szymanski and A. Minczuk, </author> <title> A Representation of a Distribution Power Network Graph, </title> <journal> Archiwum Elektrotechniki, </journal> <volume> Vol. 27, No. 2, </volume> <year> 1978, </year> <pages> pp. 367-380. </pages>
Reference-contexts: Section 3.2). 5. To facilitate efficient parallel scan operations on T i , each tree is linearized by establishing links between neighboring processors. The links can be constructed by either an Euler Tour [22] or a depth-first traversal <ref> [31] </ref> of the tree. 6. The linearized tree is edge-colored by employing a parallel scan operation.
Reference: [32] <author> B. Van Leer, </author> <title> Flux Vector Splitting for the Euler Equations, </title> <type> ICASE Report No. 82-30, </type> <institution> Inst. Comp. Applics. Sci. Engng., NASA Langley Research Center, Hampton, </institution> <year> 1982. </year>
Reference-contexts: Example 4.2 In Figure 18, we show the pressure contours of a Mach 2 Eu-ler flow past the "Cone" mesh of Example 4.1. The solution employs the discontinuous finite element scheme [5, 8, 9, 10] with van Leer's flux vector splitting <ref> [32] </ref> and was computed on a Thinking Machines CM-5 computer with 128 processors. Several h-refinement steps were required to yield this mesh.
Reference: [33] <author> C. Walshaw and M. Berzins, </author> <title> Dynamic Load-Balancing for PDE Solvers on Adaptive Unstructured Meshes, </title> <type> Preprint, </type> <institution> School of Computer Studies Tech. </institution> <type> Rep., </type> <institution> University of Leeds, Leeds, </institution> <year> 1992. </year>
Reference-contexts: Some methods also require considerable computation [26]. Thus, global recursive bisection methods are too expensive for use with adaptive methods which, as noted, require repeated element redistribution. Recursive bisection may be of use with an adaptive strategy if applied locally to regions of the domain affected by adaptive enrichment <ref> [33] </ref>. Two partitioning strategies described herein use local migration to exchange elements between processors associated with neighboring spatial regions in order to achieve a global load balance. Local interchanges propagate incremental changes in the mesh or method between processors without solving an expensive global partitioning problem.
Reference: [34] <author> S. R. Wheat, </author> <title> A Fine Grained Data Migration Approach to Application Load Balancing on MP MIMD Machines, </title> <type> Ph.D. Dissertation, </type> <institution> Dept. Comp. Sci., Univ. of New Mexico, </institution> <address> Albuquerque, </address> <year> 1992. </year> <editor> deCougny et. al. </editor> / <title> Load Balancing for Parallel Adaptive PDE Solution 33 </title>
Reference-contexts: Local computational cost metrics, such as the number of degrees of freedom, can be combined with similar information on partition boundaries to minimize the total workload including both the computational and communications efforts. Our most mature partitioning strategy, tiling <ref> [34] </ref>, is a modification of a dynamic load balancing technique developed by Leiss and Reddy [25, 28] who used local optimality criteria within overlapping processor neighborhoods to achieve a global load balance. <p> Thus, "orphaned" elements are given the highest export priority. Because individual elements' processing costs can vary widely in the adaptive p-refinement method, elemental processing costs are computed and used so that the minimum number of elements satisfying the work request are exported. This approach differs from Wheat <ref> [34] </ref>, who uses average cost per element to determine the number of export elements.
Reference: [35] <author> S. R. Wheat, K. D. Devine, and A. B. Maccabe, </author> <title> Experience with Automatic, Dynamic Load Balancing and Adaptive Finite Element Computation, </title> <editor> In H. El-Rewini and B. D. Shriver, editors, </editor> <booktitle> Proc. of 27th Hawaii International Conference on System Sciences, </booktitle> <volume> Vol. 2, </volume> <pages> pp. 463-472, </pages> <year> 1994. </year>
Reference: [36] <author> V. G. Vizing, </author> <title> On an Estimate of a Chromatic Class of a Multigraph, </title> <booktitle> Proc. Third Siberian Conf. on Mathematics and Mechanics, </booktitle> <address> Tomsk, </address> <year> 1964. </year>
Reference-contexts: (d) (c) 40 30 60 90 60 100 33 0 2 0 P1 P3 P2 P9 P5 P10 request (c), load transfer between pairs in steps 0,. . . ,3 (d). denotes the maximum vertex degree (number of edges incident on a vertex) in a graph G, then Vizing's theorem <ref> [36] </ref> indicates that G can be edge-colored using C colors with (G) C (G) + 1. Special graphs, such as trees, only need (G) colors; therefore, (T i ) colors are required to color T i .
References-found: 36

