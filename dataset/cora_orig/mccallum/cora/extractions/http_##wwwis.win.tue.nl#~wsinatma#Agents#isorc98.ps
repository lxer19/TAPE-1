URL: http://wwwis.win.tue.nl/~wsinatma/Agents/isorc98.ps
Refering-URL: http://wwwis.win.tue.nl/~wsinatma/
Root-URL: http://www.win.tue.nl
Email: mdalmeijer/erietjens/msoede@baan.nl  hammer/wsinatma@win.tue.nl  
Title: A Reliable Mobile Agents Architecture  
Author: Manfred Dalmeijer, Eric Rietjens, Michiel Soede D.K. Hammer, A.T.M. Aerts 
Address: Ede, Netherlands -Email:  Netherlands -Email:  
Affiliation: Baan Technology Labs,  Eindhoven University of Technology,  
Abstract: This paper describes the design of a novel mobile agent system that supports the flexible and reliable interaction of autonomous components in an objectoriented distributed system. It discusses the objectoriented design of the overall system together with a number of important components in terms of the most important design decisions. A detailed description of the reliability model is given in terms of the failure hypothesis and the related recovery protocols. Special emphasis is given to the generality and efficiency of the implementation and a number of preliminary experiences are described. 
Abstract-found: 1
Intro-found: 1
Reference: [Dalmeijer+98a] <author> Manfred Dalmeijer, Dieter K. </author> <title> Hammer and Ad T.M. Aerts, Mobile Software Agents, </title> <note> to be submitted to Int. Journal on Computers in Industry. </note>
Reference-contexts: In addition the architecture defines generic services which can be used by objects in the agent system. The generic services are discussed in <ref> [Dalmeijer+98a] </ref>. The MAF provides the necessary infrastructure to enable mobile agent communication. The most important components in the infrastructure are the docks. Docks serve as entry points to the nodes in a system. Each JVM has at most one dock.
Reference: [Hammer+98] <author> Dieter K. Hammer, Ad T.M. Aerts and Manfred Dalmeijer, </author> <title> Mobile Agent Architectures: What are the Design Issues?, </title> <booktitle> submitted to Int. Conference on Engineering of Computer Based Systems. </booktitle>
Reference-contexts: This paper describes the current status of the design and implementation of the MAF ([Dalmeijer+98a]). It discusses the agent system using the design issues identified in <ref> [Hammer+98] </ref>. Section 2 covers the overall design of the system in terms of the most important components and design decisions. Section 3 focuses on reliability. Implementation issues and preliminary experiences can be found in section 4. The conclusions are presented in section 5. 2.
Reference: [Finin+ 93] <author> Timothy Finin, Jay Weber et al., </author> <title> Specification of the KQML Agent--Communication Language (Draft), The DARPA Knowledge Sharing Initiative, </title> <year> 1993. </year>
Reference-contexts: This is accomplished by using the Knowledge Query and Representation Language (KQML) as a means to formulate agent interactions in terms of API services. KQML supports asynchronous communication and is a container language, specifically designed for agent based systems <ref> [Finin+ 93] </ref>, [Finin 97]. KQML messages (also called performatives) contain sufficient information to allow the dock to route them to the correct destination. The dock does not need to understand the language or the meaning of the content conveyed by a performative.
Reference: [Finin 97] <author> Timothy Finin, </author> <title> Knowledge Query and Manipulation Language, </title> <institution> Dep. Of Computer Science, Univ. of Maryland, </institution> <note> http://www.cs.umbc.edu/kqml/ </note> . . 
Reference-contexts: This is accomplished by using the Knowledge Query and Representation Language (KQML) as a means to formulate agent interactions in terms of API services. KQML supports asynchronous communication and is a container language, specifically designed for agent based systems [Finin+ 93], <ref> [Finin 97] </ref>. KQML messages (also called performatives) contain sufficient information to allow the dock to route them to the correct destination. The dock does not need to understand the language or the meaning of the content conveyed by a performative.
Reference: [Rietjens+ 97] <author> Eric Rietjens, Michiel Soede, </author> <title> Design and Implementation of a Mobile Agent Framework, </title> <institution> Eindhoven University of Technology, </institution> <year> 1997. </year>
Reference: [OMG 97] <institution> Object Management Group, CORBA services: Common Object Request Services Specification, </institution> <month> August </month> <year> 1997. </year> <note> [Javasoft] http://www.javasoft.com </note>
Reference-contexts: The migration-protocol used in the MAF is capable of operating on top of arbitrary transport-mechanisms, like JavaSofts RMI [Javasoft], or OMGs Corba <ref> [OMG 97] </ref>. The only requirement is that the transport-mechanism is capable of transferring bytestreams over a network. This approach has two advantages: The MAF can run on any Virtual Machine: it is not necessary to use RMI in all situations.
Reference: [Rothermel+ 97] <author> Kurt Rothermel, Markus Strasser, </author> <title> A Protocol for Preserving the Exactly-One Property of Mobile Agents, </title> <institution> University of Stuttgart, Faculty of Computing Science. </institution>
Reference-contexts: The only requirement is that the transport-mechanism is capable of transferring bytestreams over a network. This approach has two advantages: The MAF can run on any Virtual Machine: it is not necessary to use RMI in all situations. The MAF can guarantee failure atomic <ref> [Rothermel+ 97] </ref> migration if it uses a transport mechanism, that is failure atomic itself, (transactional message queues, CORBA OTS, etc.). Without such a mechanism, the MAF can only guarantee that at most one instance of an agent is running.
Reference: [Browne+ 95] <author> J. Browne, P.J. Sackett, and J.C. Wortmann. </author> <title> Future manufacturing systems towards the extended enterprise. </title> <journal> Computers and Industry, </journal> <volume> 25 </volume> <pages> 235-254, </pages> <year> 1995. </year> <title> Including references. </title>
Reference-contexts: An EIS supports enterprises that consist of many business units that are geographically distributed (possibly worldwide) over several sites. An EIS must therefore be scalable with respect to both size and performance. It operates in an extended or virtual enterprise <ref> [Browne+ 95] </ref> where business units belong to different, autonomous organizations. An example of a virtual enterprise is a multi-supplier chain in which Baan applications have to be able to interoperate with EISs of other vendors.
References-found: 8

