URL: http://www.csl.sri.com/~qian/oakland97.ps.gz
Refering-URL: http://www.csl.sri.com/~qian/pubs.html
Root-URL: 
Title: Secure Software Architectures  
Author: Mark Moriconi, Xiaolei Qian, R. A. Riemenschneider, Li Gong 
Keyword: secure systems, software architecture, X/Open DTP, formal methods, access control  
Address: Menlo Park, California 94025  
Affiliation: Computer Science Laboratory SRI International  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David Garlan, Robert Allen, and John Ockerbloom. </author> <title> Exploiting style in architectural design environments. </title> <booktitle> In Proceedings of SIGSOFT'94: Foundations of Software Engineering. </booktitle> <publisher> ACM Press, </publisher> <month> December </month> <year> 1994. </year>
Reference-contexts: Our approach is made difficult by the dominance of informal architectures 2 and security theories that are difficult to connect to implementations. Fortunately, we can overcome these difficulties by combining recent results from the software research community <ref> [1, 2, 5, 9, 10] </ref> with well-known results from the security community.
Reference: [2] <author> David Garlan and Dewayne Perry. </author> <title> Introduction to the special issue on software architecture. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4), </volume> <month> April </month> <year> 1995. </year>
Reference-contexts: Our approach is made difficult by the dominance of informal architectures 2 and security theories that are difficult to connect to implementations. Fortunately, we can overcome these difficulties by combining recent results from the software research community <ref> [1, 2, 5, 9, 10] </ref> with well-known results from the security community.
Reference: [3] <author> J.A. Goguen and J. Meseguer. </author> <title> Security Polices and Security Models. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 11-20, </pages> <address> Oakland, California, </address> <month> April </month> <year> 1982. </year>
Reference-contexts: The research community has spent considerable effort on the first of these challenges. The security properties considered include non-interference, information-flow, and composability, with system models built using traces, CSP, and other formal languages <ref> [3, 6, 7, 8] </ref>. These behavioral models are far removed from the actual systems, making it extremely hard, if not impossible, to be convinced that an implementation satisfies the security properties proven about the model.
Reference: [4] <author> C.E. Landwehr. </author> <title> Formal Models for Computer Security. </title> <journal> ACM Computing Survey, </journal> <volume> 13(3) </volume> <pages> 247-278, </pages> <month> September </month> <year> 1981. </year>
Reference-contexts: The next section, which proves the security of alternative DTP architectures, illustrates this kind of rigorous informal reasoning. 5. Secure DTP Architectures Suppose that we want to enforce the multilevel security (MLS) policy in the DTP architecture. A standard model of the MLS policy is the Bell-LaPadula model <ref> [4] </ref>. Given a set of subjects each with an attached clearance level, and a set of objects each with an attached classification level, the model ensures that information does not flow downward in a security lattice by imposing the following requirements. * The Simple Security Property.
Reference: [5] <author> D.C. Luckham, L.M. Augustin, J.J. Kenney, J.S. Vera, D. Bryan, and W. Mann. </author> <title> Specification and analysis of system architecture using Rapide. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4) </volume> <pages> 336-355, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Our approach is made difficult by the dominance of informal architectures 2 and security theories that are difficult to connect to implementations. Fortunately, we can overcome these difficulties by combining recent results from the software research community <ref> [1, 2, 5, 9, 10] </ref> with well-known results from the security community. <p> Distributed transaction processing is ubiqui tous in military and commercial applications, many of which have stringent security requirements. The X/Open DTP standard architecture is described in a series of publications of X/Open Ltd. [16, 17, 18, 19]. An executable prototype of the DTP standard appears in Luckham et al. <ref> [5] </ref>. The standard describes a particular set of component interfaces, and sequences of interactions between the components. Components may be various application programs, resource managers (such as databases, file systems, or mailers) and transaction managers.
Reference: [6] <author> D. McCullough. </author> <title> A Hookup Theorem for Multilevel Security. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(6) </volume> <pages> 563-568, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: The research community has spent considerable effort on the first of these challenges. The security properties considered include non-interference, information-flow, and composability, with system models built using traces, CSP, and other formal languages <ref> [3, 6, 7, 8] </ref>. These behavioral models are far removed from the actual systems, making it extremely hard, if not impossible, to be convinced that an implementation satisfies the security properties proven about the model.
Reference: [7] <author> J. McLean. </author> <title> The Specification and Modeling of Computer Security. </title> <journal> IEEE Computer, </journal> <volume> 23(1) </volume> <pages> 9-16, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: The research community has spent considerable effort on the first of these challenges. The security properties considered include non-interference, information-flow, and composability, with system models built using traces, CSP, and other formal languages <ref> [3, 6, 7, 8] </ref>. These behavioral models are far removed from the actual systems, making it extremely hard, if not impossible, to be convinced that an implementation satisfies the security properties proven about the model.
Reference: [8] <author> J. McLean. </author> <title> A General Theory of Composition for Trace Sets Closed Under Selective Interleaving Functions. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 79-93, </pages> <address> Oakland, California, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The research community has spent considerable effort on the first of these challenges. The security properties considered include non-interference, information-flow, and composability, with system models built using traces, CSP, and other formal languages <ref> [3, 6, 7, 8] </ref>. These behavioral models are far removed from the actual systems, making it extremely hard, if not impossible, to be convinced that an implementation satisfies the security properties proven about the model.
Reference: [9] <author> M. Moriconi and X. Qian. </author> <title> Correctness and composition of software architectures. </title> <booktitle> In Proceedings of ACM SIGSOFT'94: Symposium on Foundations of Software Engineering, </booktitle> <pages> pages 164-174, </pages> <address> New Orleans, Louisiana, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: Our approach is made difficult by the dominance of informal architectures 2 and security theories that are difficult to connect to implementations. Fortunately, we can overcome these difficulties by combining recent results from the software research community <ref> [1, 2, 5, 9, 10] </ref> with well-known results from the security community. <p> A convincing, but not formal, argument is made that the connection preserves security. The argument depends on the use of architectural elements that are very similar to those used in the implementation. Our architecture descriptions <ref> [9, 10, 11] </ref> are more general in three important ways. First, an architecture hierarchy can include both horizontal and vertical decomposition (change in representation), whereas the gateway development involves only horizontal. Second, formal mappings between architectures are used to bridge the gap in vertical hierarchies.
Reference: [10] <author> M. Moriconi, X. Qian, and R. Riemenschneider. </author> <title> Correct architecture refinement. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4) </volume> <pages> 356-372, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Our approach is made difficult by the dominance of informal architectures 2 and security theories that are difficult to connect to implementations. Fortunately, we can overcome these difficulties by combining recent results from the software research community <ref> [1, 2, 5, 9, 10] </ref> with well-known results from the security community. <p> A convincing, but not formal, argument is made that the connection preserves security. The argument depends on the use of architectural elements that are very similar to those used in the implementation. Our architecture descriptions <ref> [9, 10, 11] </ref> are more general in three important ways. First, an architecture hierarchy can include both horizontal and vertical decomposition (change in representation), whereas the gateway development involves only horizontal. Second, formal mappings between architectures are used to bridge the gap in vertical hierarchies. <p> This extended low-level architecture by definition implements the high-level architecture, but the extension clearly violates multilevel security requirements. We have developed a new correctness criterion for architectures in which a concrete architecture implements exactly the abstract architecture, no more and no less <ref> [10] </ref>. In other words, a security hole that does not exist, with respect to a given security policy, in the abstract architecture will not come into existence in any concrete architecture. <p> The faithfulness of I follows, by the model-theoretic result cited in <ref> [10] </ref>. As the definition of I suggests, the only difficulty in inverting the interpretation is handling the equation for Connects.
Reference: [11] <author> Mark Moriconi and R. A. Riemenschneider. </author> <title> Introduction to SADL 1.0: a language for specifying software architecture hierarchies. </title> <type> Technical report, </type> <institution> Computer Science Laboratory, SRI International, </institution> <year> 1996. </year>
Reference-contexts: A convincing, but not formal, argument is made that the connection preserves security. The argument depends on the use of architectural elements that are very similar to those used in the implementation. Our architecture descriptions <ref> [9, 10, 11] </ref> are more general in three important ways. First, an architecture hierarchy can include both horizontal and vertical decomposition (change in representation), whereas the gateway development involves only horizontal. Second, formal mappings between architectures are used to bridge the gap in vertical hierarchies. <p> Much of this activity can be concurrent, and many transactions may take place at once. 4. Formal Model of X/Open DTP We first show how to define the X/Open DTP interfaces, components, and wiring using an architecture definition lan guage called SADL <ref> [11] </ref>. 3 Then, we describe how architectures written in SADL can be translated systematically into logic. All of the proofs in this paper can be fully formalized in terms of the logical theories that result from the translation.
Reference: [12] <author> C.R. Morris and C.H. Ferguson. </author> <title> How architecture wins technology wars. </title> <booktitle> Harvard Business Review, </booktitle> <pages> pages 86-96, </pages> <month> March-April </month> <year> 1993. </year>
Reference-contexts: 1. Introduction In recent years, there has been a growing demand for vendor-neutral, open systems solutions. These solutions take the form of open software architectures that represent a family of systems. Open architectures are critical tools for competitive success in the information technology industry <ref> [12] </ref>. They enable vendors to substantially reduce time-to-market and development costs, since they do not have to provide an integrated solution in the context of a bewildering array of graphical user interfaces, operating systems, and connectivity schemes.
Reference: [13] <author> Richard B. Neely and James W. Freeman. </author> <title> Structuring systems for formal verification. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 2-13, </pages> <address> Oakland, CA, </address> <month> April </month> <year> 1985. </year>
Reference-contexts: However, the proof is with regard to an abstract algorithmic model, which again suffers from the difficulty in relating it to the actual implementation. A successful effort to connect security requirements for a secure gateway to its implementation is described in <ref> [13, 14] </ref>. A convincing, but not formal, argument is made that the connection preserves security. The argument depends on the use of architectural elements that are very similar to those used in the implementation. Our architecture descriptions [9, 10, 11] are more general in three important ways.
Reference: [14] <author> Richard B. Neely, James W. Freeman, and M. D. Kren-zin. </author> <title> Achieving understandable results in a formal design verification. </title> <booktitle> In Proceedings of the Computer Security Foundations Workshop II, </booktitle> <pages> pages 115-124, </pages> <address> Fran-conia, NH, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: However, the proof is with regard to an abstract algorithmic model, which again suffers from the difficulty in relating it to the actual implementation. A successful effort to connect security requirements for a secure gateway to its implementation is described in <ref> [13, 14] </ref>. A convincing, but not formal, argument is made that the connection preserves security. The argument depends on the use of architectural elements that are very similar to those used in the implementation. Our architecture descriptions [9, 10, 11] are more general in three important ways.
Reference: [15] <author> M. Reiter. </author> <title> Secure Agreement Protocols: Reliable and Atomic Group Multicast in Rampart. </title> <booktitle> In Proceedings of the 2nd ACM Conference on Computer and Communications Security, </booktitle> <pages> pages 68-80, </pages> <address> Fairfax, Virginia, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: The same observation applies to uses of the reference monitor concept that was popular in the 1980s. Systems designed around this concept could not reliably be connected to implementations. A middle ground between abstract mathematical modeling and system-level analysis can be seen in connection with the Rampart system <ref> [15] </ref>. Rampart is a distributed system for which an attempt was made to prove that it satisfies certain security and fault-tolerance properties. However, the proof is with regard to an abstract algorithmic model, which again suffers from the difficulty in relating it to the actual implementation.
Reference: [16] <institution> X/Open Company Ltd., </institution> <address> Apex Plaza, Forbury Road, Reading, Berkshire RGI 1AX, U.K. </address> <booktitle> Distributed Transaction Processing: The XA Specification, </booktitle> <month> June </month> <year> 1991. </year>
Reference-contexts: Distributed transaction processing is ubiqui tous in military and commercial applications, many of which have stringent security requirements. The X/Open DTP standard architecture is described in a series of publications of X/Open Ltd. <ref> [16, 17, 18, 19] </ref>. An executable prototype of the DTP standard appears in Luckham et al. [5]. The standard describes a particular set of component interfaces, and sequences of interactions between the components.
Reference: [17] <institution> X/Open Company Ltd., </institution> <address> Apex Plaza, Forbury Road, Reading, Berkshire RGI 1AX, U.K. </address> <booktitle> Distributed Transaction Processing: The TX (Transaction Demarcation) Specification, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: Distributed transaction processing is ubiqui tous in military and commercial applications, many of which have stringent security requirements. The X/Open DTP standard architecture is described in a series of publications of X/Open Ltd. <ref> [16, 17, 18, 19] </ref>. An executable prototype of the DTP standard appears in Luckham et al. [5]. The standard describes a particular set of component interfaces, and sequences of interactions between the components.
Reference: [18] <institution> X/Open Company Ltd., </institution> <address> Apex Plaza, Forbury Road, Reading, Berkshire RGI 1AX, U.K. </address> <booktitle> Distributed Transaction Processing: The Peer-to-Peer Specification, </booktitle> <month> December </month> <year> 1992. </year>
Reference-contexts: Distributed transaction processing is ubiqui tous in military and commercial applications, many of which have stringent security requirements. The X/Open DTP standard architecture is described in a series of publications of X/Open Ltd. <ref> [16, 17, 18, 19] </ref>. An executable prototype of the DTP standard appears in Luckham et al. [5]. The standard describes a particular set of component interfaces, and sequences of interactions between the components.
Reference: [19] <author> X/Open Company Ltd., Apex Plaza, </author> <title> Forbury Road, Reading, Berkshire RGI 1AX, U.K. Distributed Transaction Processing: Reference Model, </title> <type> Version 2, </type> <month> November </month> <year> 1993. </year>
Reference-contexts: Distributed transaction processing is ubiqui tous in military and commercial applications, many of which have stringent security requirements. The X/Open DTP standard architecture is described in a series of publications of X/Open Ltd. <ref> [16, 17, 18, 19] </ref>. An executable prototype of the DTP standard appears in Luckham et al. [5]. The standard describes a particular set of component interfaces, and sequences of interactions between the components.
References-found: 19

