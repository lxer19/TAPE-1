URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3421/3421.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: Generalized Fair Reachability Analysis for Cyclic Protocols  
Author: Hong Liu Raymond E. Miller 
Address: College Park College Park, MD 20742  
Affiliation: Department of Computer Science University of Maryland at  
Abstract: In this paper, the notion of fair reachability is generalized to cyclic protocols with n 2 machines. Substantial state reduction can be achieved via fair progress state exploration. It is shown that the fair reachable state space is exactly the set of reachable states with equal channel length. As a result, deadlock detection is decidable for P, the class of cyclic protocols whose fair reachable state spaces are finite. The concept of simultaneous unboundedness is defined and the lack of it is shown to be a necessary and sufficient condition for a protocol to be in P. Through finite extension of the fair reachable state space, it is also shown that detection of unspecified receptions, unboundedness, and nonexecutable transitions are all decidable for P. Furthermore, it is shown that any protocol P is logically correct if and only if there is no logical error in its fair reachable state space. This study shows that for the class P, our generalized fair reachability analysis technique not only achieves substantial state reduction but also maintains very competitive logical error coverage. Therefore, it is a very useful technique to prove logical correctness for a wide variety of cyclic protocols.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Brand and P. Zafiropulo, </author> <title> "On Communicating Finite-State Machines," </title> <journal> Journal of ACM, </journal> <volume> Vol. 30, No. 2, </volume> <month> April </month> <year> 1983, </year> <pages> pp. 323-342. </pages>
Reference-contexts: Reachability analysis can be employed to systematically explore the entire protocol state space to validate the logical correctness of a protocol against some common errors, such as deadlocks, unspecified receptions, unboundedness, and nonexecutable transitions. However, for general protocols, finding out whether a logical error exists is not always decidable <ref> [1] </ref>. Furthermore, even when decidability is ensured, the explosion of state space during reachability analysis renders its use impractical for most real world protocols. <p> Deadlock, unspecified reception, nonexecutable transition, and unboundedness are called logical errors. P is logically correct iff R is free of logical errors. For protocol validation, we check states in R against logical errors. This state exploration technique is called reachability analysis. However, it was shown in <ref> [1] </ref> that even for n = 2, none of the logical errors is decidable for (cyclic) protocols. As a result, none of the logical errors is decidable for cyclic protocols in general. For completeness, we list this result as a theorem below. <p> It should be clear that for P , if we can solve P-I (P-II), then we can solve unboundedness (unspecified reception) detection, and if we can solve both P-I and P-II, then we can solve detection of nonexecutable transitions. Although neither P-I nor P-II is decidable in general <ref> [1] </ref>, we will show that both of them are decidable for P in the following section. 5 Finite Extension of F In this section, we study the finite extension of F to detect logical errors other than deadlock for P.
Reference: [2] <author> L. Cacciari and O. Rafiq, </author> <title> "On Improving Reduced Reachability Analysis," </title> <address> FORTE'92, Perros-Guirec, France, </address> <month> October 13-16, </month> <year> 1992, </year> <editor> M. Daiz and R. Groz (Ed.), </editor> <year> 1992, </year> <pages> pp. 137-152. </pages>
Reference-contexts: Gouda et al also showed that if one of the channels is bounded, then the protocol has a finite fair reachable state space [4]. Recently, Cacciari and Rafiq extended the above idea to protocols with "internal" transitions using a technique called reduced reachability analysis <ref> [2] </ref>. In their approach, two machines are allowed to proceed at the same time only if the parallelwise condition is satisfied. They showed that detection of deadlock and unspecified reception are decidable for protocols whose reduced reachable state spaces are finite. <p> One important aspect about fair reachability analysis is that in each fair reachable state, the length of each channel is equal [16, 4]. We call this property the equal channel length property of fair reachable state space. A reduced reachable state space generated in <ref> [2] </ref> does not always have this property. This is, we feel, one of the major reasons that makes it more difficult to find a (sufficient) condition for the class of protocols with finite reduced reachable state spaces.
Reference: [3] <author> T.Y. Choi and R.E. Miller, </author> <title> "Protocol Analysis and Synthesis by Structured Partitions," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> Vol. 11, </volume> <year> 1986, </year> <pages> pp. 367-381. </pages>
Reference: [4] <author> M.G. Gouda, C.H. Chow, and S.S. Lam, </author> <title> "Livelock Detection in Networks of Communicating Finite State Machines," </title> <type> Technical Report, </type> <institution> TR-84-10, Dept. of Computer Science, Univ. of Texas at Austin, </institution> <month> April </month> <year> 1984. </year> <month> 17 </month>
Reference-contexts: Gouda et al also showed that if one of the channels is bounded, then the protocol has a finite fair reachable state space <ref> [4] </ref>. Recently, Cacciari and Rafiq extended the above idea to protocols with "internal" transitions using a technique called reduced reachability analysis [2]. In their approach, two machines are allowed to proceed at the same time only if the parallelwise condition is satisfied. <p> However, it is not clear under what conditions a protocol can have a finite reduced reachable state space. One important aspect about fair reachability analysis is that in each fair reachable state, the length of each channel is equal <ref> [16, 4] </ref>. We call this property the equal channel length property of fair reachable state space. A reduced reachable state space generated in [2] does not always have this property. <p> In order for the procedure to terminate, F has to be finite. For n = 2, a sufficient condition has been established for P to have a finite F, namely, one of the channels being bounded <ref> [4] </ref>. However, no necessary and sufficient condition, even for n = 2, has been established so far. On the other hand, it is known that F can be finite even if P has a reachable sending cycle.
Reference: [5] <author> M.G. Gouda and J.Y. Han, </author> <title> "Protocol Validation by Fair Progress State Exploration," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> Vol. 9, </volume> <year> 1985, </year> <pages> pp. 353-361. </pages>
Reference-contexts: For a survey of these methods, please refer to [17]. Fair reachability analysis was proposed as one of the improved reachability analysis techniques for protocols with two machines <ref> [16, 5] </ref>. In fair reachability analysis, two machines are forced to make progress at the same time whenever possible. State reduction is achieved by only generating those fair progress states. <p> NAG 5-2648. 1 of the reduced state space is necessary <ref> [5] </ref>. However, the concept of fair reachability and its effectiveness for general protocols with more than two machines have not yet been studied. To fill this gap, we investigate the generalization of this technique to cyclic protocols with n 2 machines. <p> Based on this observation, they proposed a canonical sequence technique that forces the two machines to progress at the same speed during state exploration. They reported a large percentage reduction in state generation when this technique was incorporated into reachability analysis. In <ref> [5] </ref>, Gouda and Han named this technique fair reachability analysis. For protocols whose fair reachable state spaces are finite, detection of deadlock and unspecified reception were shown to be decidable in [16], while detection of boundedness was proved to be decidable in [5]. <p> In <ref> [5] </ref>, Gouda and Han named this technique fair reachability analysis. For protocols whose fair reachable state spaces are finite, detection of deadlock and unspecified reception were shown to be decidable in [16], while detection of boundedness was proved to be decidable in [5]. Gouda et al also showed that if one of the channels is bounded, then the protocol has a finite fair reachable state space [4]. Recently, Cacciari and Rafiq extended the above idea to protocols with "internal" transitions using a technique called reduced reachability analysis [2]. <p> Fair reachability analysis is of importance not only because it can reduce the number of global states explored, but also because it has the capability to handle some protocols with unbounded channels <ref> [5] </ref>. Although in [16], the authors claimed to extend this technique to protocols with n 2 communicating finite state machines, so far, we have not seen any follow-up reports on this issue. <p> For the first time, the class of cyclic protocols with finite fair reachability graphs can now be exactly characterized. Even for the n = 2 case, this condition is weaker than the one in <ref> [5] </ref>. For completeness, we also show that this condition is undecidable for cyclic protocols. Third, for logical errors other than deadlock, we show how a finite fair reachable state space can be finitely extended so that these errors can be detected effectively and efficiently. <p> During the study, we also discover a complete characterization of fair reachable state space in terms of logical error coverage. Fourth, regarding the class of cyclic protocols whose deadlock and unspecified reception detection are decidable, for n = 2, our result properly includes the ones studied in <ref> [16, 5] </ref>; for n 2, our result properly contains the one examined in [14] and complements the ones investigated in [15, 11, 12]. More importantly, our decision procedure is much more straightforward and efficient for practical analysis, which was lacking in both [14, 15] and [11, 12]. <p> Furthermore, 3 we also show the decidability of unboundedness and nonexecutable transition detection for the class of cyclic protocols with finite fair reachable state spaces, which are not addressed in any previous approaches except the one in <ref> [5] </ref> for unboundedness in the n = 2 case. Generalized fair reachability analysis for cyclic protocols was first reported in [7], along with the decidability result of deadlock detection for the class of cyclic protocols with finite fair reachability graphs. <p> Theorem 4.3 Given a cyclic protocol P without reachable sending cycles. F is finite iff R is finite. A rephrase of this theorem gives us a necessary and sufficient condition for a cyclic protocol with a finite F to be unbounded, a generalization of the result in <ref> [5] </ref> for n = 2 to n 2. Theorem 4.4 Given a cyclic protocol P with a finite F. P is unbounded iff it has a reachable sending cycle. Now we can confirm that simultaneous channel unboundedness is the fundamental factor in causing F to become infinite. <p> However, as expected, the decidabil-ity aspect of this condition is negative, as is stated in the following theorem. The proof of the theorem is based on showing it is true for n = 2, an easy reduction by using the decidability result of boundedness detection established in <ref> [5] </ref>. 9 Theorem 4.6 It is undecidable whether a cyclic protocol P has a finite F. <p> However, the study of logical error coverage of F is crucial to evaluating the usefulness of fair reachability analysis. For n = 2, it was shown that both deadlock and unspecified reception are detectable within F [16], and that unboundedness can be detected via finite extension of F <ref> [5] </ref>. Note that even for n = 2, nonexecutable transition detection has not been studied in the context of F. For n 2, we know that F is exactly the set of reachable states with equal channel length. <p> In this case, the behavior of P 3 and P 4 were not explored during state generation. As we will see in the following section, this is caused by the sending cycle in P 1 , and this is not a coincidence. Following the same formulation as <ref> [5] </ref>, we reduce the detection of logical errors other than deadlock in P to two local state reachability problems as follows: P-I Given a local state s i , decide whether s i is reachable. <p> Using this strategy, considerable space can be saved, especially when n gets larger. This is in contrast to the approach taken in <ref> [5] </ref> for n = 2, which keeps all the extension graphs during unboundedness detection. <p> It is not clear, however, what class of protocols in his model is amendable for his analysis technique. For cyclic protocols, our fair reachability formulation has the following advantages: First, our fair reachability state space maintains the same nice equal channel length property as for n = 2 <ref> [16, 5] </ref>. Second, both concurrency and synchronization vectors in our fair reachability notion allow more than two machines to progress at the same time. As a result, for most cyclic protocols, our analysis achieves greater state reduction than the one in [13].
Reference: [6] <author> M.G. Gouda and Y.T. Yu, </author> <title> "Protocol Validation by Maximal Progress State Exploration," </title> <journal> IEEE Transactions on Communications, </journal> <volume> Vol. COM-32, No. 1, </volume> <year> 1984, </year> <pages> pp. 94-97. </pages>
Reference-contexts: The question is whether the converse is also true. To answer this question, we adopt a technique called maximal progress partial state exploration similar to the ones proposed in <ref> [6, 11] </ref>. Suppose P S [i::j] 7! fl [i::j] P S d [i::j] via local execution sequence set fe i ; e i1 ;: : :; e j g.
Reference: [7] <author> H. Liu and R.E. Miller, </author> <title> "Deadlock Detection for Cyclic Protocols Using Generalized Fair Reachability Analysis," </title> <type> Technical Report CS-TR-3135, </type> <institution> Dept. of Computer Science, Univ. of Maryland at College Park, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: Generalized fair reachability analysis for cyclic protocols was first reported in <ref> [7] </ref>, along with the decidability result of deadlock detection for the class of cyclic protocols with finite fair reachability graphs. Then, the fair reachability notion was revised to achieve further state reduction and allow for easier proofs.
Reference: [8] <author> H. Liu and R.E. Miller, </author> <title> "Generalized Fair Reachability Analysis for Cyclic Protocols: Part 1," </title> <editor> PSTV'94, S.T. Vuong (Ed.), Vancouvor, </editor> <address> B.C. Canada, </address> <month> June </month> <year> 1994, </year> <pages> pp. 271-286. </pages>
Reference-contexts: Then, the fair reachability notion was revised to achieve further state reduction and allow for easier proofs. The results on basic formulation and deadlock detection were given in PSTV'94 <ref> [8] </ref>, while the results on detection of other logical errors were presented in ICNP'94 [9]. This paper is the combination of results in [8] and [9] with a few modifications. 3 The CFSM Model Notation: (1) We use to denote concatenation. Given a set M . <p> The results on basic formulation and deadlock detection were given in PSTV'94 <ref> [8] </ref>, while the results on detection of other logical errors were presented in ICNP'94 [9]. This paper is the combination of results in [8] and [9] with a few modifications. 3 The CFSM Model Notation: (1) We use to denote concatenation. Given a set M . M fl denotes its reflexive and transitive closure under concatenation. jM j denotes its cardinality. <p> Since all deadlock states are of equal channel length zero, we have the following theorem on deadlock detection. Theorem 4.8 Deadlock detection is decidable for P . In fact, we showed in <ref> [8] </ref> that livelock detection is also decidable for P . However, it is not difficult to see that for detection of logical errors other than deadlock, F is not sufficient, and thus finite extension of F is needed.
Reference: [9] <author> H. Liu and R.E. Miller, </author> <title> "Generalized Fair Reachability Analysis for Cyclic Protocols: Decidability for Logical Correctness Problems," </title> <address> ICNP'94, Boston, Massachusetts, </address> <month> October 25-28, </month> <pages> pp. 100-107. </pages>
Reference-contexts: Then, the fair reachability notion was revised to achieve further state reduction and allow for easier proofs. The results on basic formulation and deadlock detection were given in PSTV'94 [8], while the results on detection of other logical errors were presented in ICNP'94 <ref> [9] </ref>. This paper is the combination of results in [8] and [9] with a few modifications. 3 The CFSM Model Notation: (1) We use to denote concatenation. Given a set M . M fl denotes its reflexive and transitive closure under concatenation. jM j denotes its cardinality. <p> The results on basic formulation and deadlock detection were given in PSTV'94 [8], while the results on detection of other logical errors were presented in ICNP'94 <ref> [9] </ref>. This paper is the combination of results in [8] and [9] with a few modifications. 3 The CFSM Model Notation: (1) We use to denote concatenation. Given a set M . M fl denotes its reflexive and transitive closure under concatenation. jM j denotes its cardinality.
Reference: [10] <author> K. Okumura, </author> <title> "Protocol Analysis from Language Structure," </title> <editor> PSTV'88, S. Aggarwal and K. Sabnani (Ed.), </editor> <year> 1988, </year> <pages> pp. 113-124. </pages>
Reference-contexts: For practical analysis, it is highly desirable that the decision procedure be efficient. Moreover, none of these techniques were targeted to the detection of unboundedness and nonexecutable transitions. In addition, all the methods proposed for cyclic protocol validation analyze global states from the channel language perspective <ref> [10] </ref>. Reachability analysis, which has been a main focus in the analysis of protocols with two machines, has not been fully integrated into any of these approaches.
Reference: [11] <author> J. Pachl, </author> <title> "Reachability Problems for Communicating Finite State Machines," </title> <type> Research Report, </type> <institution> CS-82-12, Dept. of Computer Science, Univ. of Waterloo, </institution> <month> May, </month> <year> 1982 </year>
Reference-contexts: It should be noted that for bounded protocols, the classic reachability technique can be used for protocols with n 2 communicating finite state machines. But research in analysis 2 of protocols with unbounded channels has been mostly limited to only cyclic protocols <ref> [11, 12, 14, 15] </ref>. Jan Pachl is probably the first person who formalized and investigated the class of cyclic protocols, though many of his important results are contained in his unpublished research report [11]. His method is based on the channel expression concept. <p> Jan Pachl is probably the first person who formalized and investigated the class of cyclic protocols, though many of his important results are contained in his unpublished research report <ref> [11] </ref>. His method is based on the channel expression concept. In [11], he showed that the detection of deadlock and unspecified reception are decidable for the class of cyclic protocols with one channel whose channel expressions are recognizable. However, he wrote in [11] that the decision procedure is hopelessly inefficient for <p> Jan Pachl is probably the first person who formalized and investigated the class of cyclic protocols, though many of his important results are contained in his unpublished research report <ref> [11] </ref>. His method is based on the channel expression concept. In [11], he showed that the detection of deadlock and unspecified reception are decidable for the class of cyclic protocols with one channel whose channel expressions are recognizable. However, he wrote in [11] that the decision procedure is hopelessly inefficient for any practical purpose. <p> results are contained in his unpublished research report <ref> [11] </ref>. His method is based on the channel expression concept. In [11], he showed that the detection of deadlock and unspecified reception are decidable for the class of cyclic protocols with one channel whose channel expressions are recognizable. However, he wrote in [11] that the decision procedure is hopelessly inefficient for any practical purpose. In [14], Peng and Purushothaman showed that for the class of cyclic protocols with exactly one unbounded channel, deadlock detection problem is decidable. <p> Fourth, regarding the class of cyclic protocols whose deadlock and unspecified reception detection are decidable, for n = 2, our result properly includes the ones studied in [16, 5]; for n 2, our result properly contains the one examined in [14] and complements the ones investigated in <ref> [15, 11, 12] </ref>. More importantly, our decision procedure is much more straightforward and efficient for practical analysis, which was lacking in both [14, 15] and [11, 12]. <p> More importantly, our decision procedure is much more straightforward and efficient for practical analysis, which was lacking in both [14, 15] and <ref> [11, 12] </ref>. Furthermore, 3 we also show the decidability of unboundedness and nonexecutable transition detection for the class of cyclic protocols with finite fair reachable state spaces, which are not addressed in any previous approaches except the one in [5] for unboundedness in the n = 2 case. <p> The question is whether the converse is also true. To answer this question, we adopt a technique called maximal progress partial state exploration similar to the ones proposed in <ref> [6, 11] </ref>. Suppose P S [i::j] 7! fl [i::j] P S d [i::j] via local execution sequence set fe i ; e i1 ;: : :; e j g. <p> The strength of our approach lies in the natural generalization of the existing fair reachability technique and its simple, straightforward, and efficient decision procedures, which were missing in both [14, 15] and <ref> [11, 12] </ref>. This study shows that generalized fair reachability analysis not 16 only achieves substantial state reduction, but also maintains very competitive logical error detection capability. Therefore, it is a very useful technique to prove logical correctness for a wide variety of cyclic protocols.
Reference: [12] <author> J. Pachl, </author> <title> "Protocol Description and Analysis Based on a State Transition Model with Channel Expressions," </title> <note> PSTV'87, </note> <author> J. Rubin and C.H. West (Ed.), </author> <year> 1987, </year> <pages> pp. 207-219. </pages>
Reference-contexts: It should be noted that for bounded protocols, the classic reachability technique can be used for protocols with n 2 communicating finite state machines. But research in analysis 2 of protocols with unbounded channels has been mostly limited to only cyclic protocols <ref> [11, 12, 14, 15] </ref>. Jan Pachl is probably the first person who formalized and investigated the class of cyclic protocols, though many of his important results are contained in his unpublished research report [11]. His method is based on the channel expression concept. <p> Fourth, regarding the class of cyclic protocols whose deadlock and unspecified reception detection are decidable, for n = 2, our result properly includes the ones studied in [16, 5]; for n 2, our result properly contains the one examined in [14] and complements the ones investigated in <ref> [15, 11, 12] </ref>. More importantly, our decision procedure is much more straightforward and efficient for practical analysis, which was lacking in both [14, 15] and [11, 12]. <p> More importantly, our decision procedure is much more straightforward and efficient for practical analysis, which was lacking in both [14, 15] and <ref> [11, 12] </ref>. Furthermore, 3 we also show the decidability of unboundedness and nonexecutable transition detection for the class of cyclic protocols with finite fair reachable state spaces, which are not addressed in any previous approaches except the one in [5] for unboundedness in the n = 2 case. <p> The strength of our approach lies in the natural generalization of the existing fair reachability technique and its simple, straightforward, and efficient decision procedures, which were missing in both [14, 15] and <ref> [11, 12] </ref>. This study shows that generalized fair reachability analysis not 16 only achieves substantial state reduction, but also maintains very competitive logical error detection capability. Therefore, it is a very useful technique to prove logical correctness for a wide variety of cyclic protocols.
Reference: [13] <author> W. Peng, </author> <title> "Single-Link and Time Communicating Finite State Machines," </title> <address> ICNP'94, Boston, Mas sachusetts, </address> <month> October 25-28, </month> <pages> pp. 126-133. </pages>
Reference-contexts: Therefore, it is a very useful technique to prove logical correctness for a wide variety of cyclic protocols. During the write-up of this paper, we were informed of the independent work by Peng on extending fair reachability to a model called "single-link communicating finite state machines" <ref> [13] </ref>. In this model, each process can have multiple output channels but has only one common input channel to store messages from other processes. <p> Although cyclic protocols are included in this model, the notion of fair reachability in this model is quite different from ours in that only two machines are allowed to make progress at one time restricted by the so-called "weight-balance" constraint in <ref> [13] </ref>. It is not clear, however, what class of protocols in his model is amendable for his analysis technique. <p> Second, both concurrency and synchronization vectors in our fair reachability notion allow more than two machines to progress at the same time. As a result, for most cyclic protocols, our analysis achieves greater state reduction than the one in <ref> [13] </ref>. Third, aside from deadlock, our approach can also detect other logical errors such as unspecified reception, nonexecutable transition, and unboundedness, which are not covered in [13]. Many open problems remain concerning our approach. <p> As a result, for most cyclic protocols, our analysis achieves greater state reduction than the one in <ref> [13] </ref>. Third, aside from deadlock, our approach can also detect other logical errors such as unspecified reception, nonexecutable transition, and unboundedness, which are not covered in [13]. Many open problems remain concerning our approach.
Reference: [14] <author> W. Peng and S. Purushothaman, </author> <title> "A Unified Approach to the Deadlock Detection Problem in Networks of Communicating Finite State Machines," </title> <address> CAV'90, New Brunswick, N.J., </address> <month> June, </month> <year> 1990, </year> <title> E.M. </title> <editor> Clarke and R.P.Kurshan (Ed.), </editor> <volume> LNCS Vol. 531, </volume> <pages> pp. 243-252. </pages>
Reference-contexts: It should be noted that for bounded protocols, the classic reachability technique can be used for protocols with n 2 communicating finite state machines. But research in analysis 2 of protocols with unbounded channels has been mostly limited to only cyclic protocols <ref> [11, 12, 14, 15] </ref>. Jan Pachl is probably the first person who formalized and investigated the class of cyclic protocols, though many of his important results are contained in his unpublished research report [11]. His method is based on the channel expression concept. <p> In [11], he showed that the detection of deadlock and unspecified reception are decidable for the class of cyclic protocols with one channel whose channel expressions are recognizable. However, he wrote in [11] that the decision procedure is hopelessly inefficient for any practical purpose. In <ref> [14] </ref>, Peng and Purushothaman showed that for the class of cyclic protocols with exactly one unbounded channel, deadlock detection problem is decidable. Their method relied on the construction of a "stable cover set" and the construction of a finite automaton to recognize the stable cover set. <p> Fourth, regarding the class of cyclic protocols whose deadlock and unspecified reception detection are decidable, for n = 2, our result properly includes the ones studied in [16, 5]; for n 2, our result properly contains the one examined in <ref> [14] </ref> and complements the ones investigated in [15, 11, 12]. More importantly, our decision procedure is much more straightforward and efficient for practical analysis, which was lacking in both [14, 15] and [11, 12]. <p> More importantly, our decision procedure is much more straightforward and efficient for practical analysis, which was lacking in both <ref> [14, 15] </ref> and [11, 12]. <p> The strength of our approach lies in the natural generalization of the existing fair reachability technique and its simple, straightforward, and efficient decision procedures, which were missing in both <ref> [14, 15] </ref> and [11, 12]. This study shows that generalized fair reachability analysis not 16 only achieves substantial state reduction, but also maintains very competitive logical error detection capability. Therefore, it is a very useful technique to prove logical correctness for a wide variety of cyclic protocols.
Reference: [15] <author> W. Peng and S. Purushothaman, </author> <title> "Data Flow Analysis of Communicating Finite State Machines," </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> Vol. 13, No. 3, </volume> <year> 1991, </year> <pages> pp. 399-442. </pages>
Reference-contexts: It should be noted that for bounded protocols, the classic reachability technique can be used for protocols with n 2 communicating finite state machines. But research in analysis 2 of protocols with unbounded channels has been mostly limited to only cyclic protocols <ref> [11, 12, 14, 15] </ref>. Jan Pachl is probably the first person who formalized and investigated the class of cyclic protocols, though many of his important results are contained in his unpublished research report [11]. His method is based on the channel expression concept. <p> Their method relied on the construction of a "stable cover set" and the construction of a finite automaton to recognize the stable cover set. It is not clear, however, whether this procedure can be automated efficiently. In <ref> [15] </ref>, they proposed a data flow approach to analyzing deadlock and unspecified reception for a protocol with n 2 machines by computing a superset of the set of reachable states as an approximate solution for a set of data flow equations. <p> While this approach works for general protocols, the results of the analysis are incomplete. It is unknown for what class of protocols the data flow analysis can yield an exact solution. Furthermore, this approach also suffers from state explosion, as stated by the authors in <ref> [15] </ref>. In summary, for the analysis of cyclic protocols with n 2 communicating finite state machines, only the decidability aspect has been studied. The complexity of decision procedures has been largely ignored. For practical analysis, it is highly desirable that the decision procedure be efficient. <p> Fourth, regarding the class of cyclic protocols whose deadlock and unspecified reception detection are decidable, for n = 2, our result properly includes the ones studied in [16, 5]; for n 2, our result properly contains the one examined in [14] and complements the ones investigated in <ref> [15, 11, 12] </ref>. More importantly, our decision procedure is much more straightforward and efficient for practical analysis, which was lacking in both [14, 15] and [11, 12]. <p> More importantly, our decision procedure is much more straightforward and efficient for practical analysis, which was lacking in both <ref> [14, 15] </ref> and [11, 12]. <p> The strength of our approach lies in the natural generalization of the existing fair reachability technique and its simple, straightforward, and efficient decision procedures, which were missing in both <ref> [14, 15] </ref> and [11, 12]. This study shows that generalized fair reachability analysis not 16 only achieves substantial state reduction, but also maintains very competitive logical error detection capability. Therefore, it is a very useful technique to prove logical correctness for a wide variety of cyclic protocols.
Reference: [16] <author> J. Rubin and C.H. West, </author> <title> "An Improved Protocol Validation Technique," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> Vol. 6, </volume> <year> 1982, </year> <pages> pp. 65-73. </pages>
Reference-contexts: For a survey of these methods, please refer to [17]. Fair reachability analysis was proposed as one of the improved reachability analysis techniques for protocols with two machines <ref> [16, 5] </ref>. In fair reachability analysis, two machines are forced to make progress at the same time whenever possible. State reduction is achieved by only generating those fair progress states. <p> Rubin and West first observed the redundancy of state exploration in reachability analysis due to equivalent sequences of interleaving transitions <ref> [16] </ref>. Based on this observation, they proposed a canonical sequence technique that forces the two machines to progress at the same speed during state exploration. They reported a large percentage reduction in state generation when this technique was incorporated into reachability analysis. <p> They reported a large percentage reduction in state generation when this technique was incorporated into reachability analysis. In [5], Gouda and Han named this technique fair reachability analysis. For protocols whose fair reachable state spaces are finite, detection of deadlock and unspecified reception were shown to be decidable in <ref> [16] </ref>, while detection of boundedness was proved to be decidable in [5]. Gouda et al also showed that if one of the channels is bounded, then the protocol has a finite fair reachable state space [4]. <p> However, it is not clear under what conditions a protocol can have a finite reduced reachable state space. One important aspect about fair reachability analysis is that in each fair reachable state, the length of each channel is equal <ref> [16, 4] </ref>. We call this property the equal channel length property of fair reachable state space. A reduced reachable state space generated in [2] does not always have this property. <p> Fair reachability analysis is of importance not only because it can reduce the number of global states explored, but also because it has the capability to handle some protocols with unbounded channels [5]. Although in <ref> [16] </ref>, the authors claimed to extend this technique to protocols with n 2 communicating finite state machines, so far, we have not seen any follow-up reports on this issue. <p> During the study, we also discover a complete characterization of fair reachable state space in terms of logical error coverage. Fourth, regarding the class of cyclic protocols whose deadlock and unspecified reception detection are decidable, for n = 2, our result properly includes the ones studied in <ref> [16, 5] </ref>; for n 2, our result properly contains the one examined in [14] and complements the ones investigated in [15, 11, 12]. More importantly, our decision procedure is much more straightforward and efficient for practical analysis, which was lacking in both [14, 15] and [11, 12]. <p> In general, F is much smaller than R, thus the saving is substantial. However, the study of logical error coverage of F is crucial to evaluating the usefulness of fair reachability analysis. For n = 2, it was shown that both deadlock and unspecified reception are detectable within F <ref> [16] </ref>, and that unboundedness can be detected via finite extension of F [5]. Note that even for n = 2, nonexecutable transition detection has not been studied in the context of F. For n 2, we know that F is exactly the set of reachable states with equal channel length. <p> More importantly, we discovered a characterization of F in terms of fault coverage, namely P is logically correct iff F is free of logical errors. Fair reachability analysis was originally proposed as a technique to tackle state explosion during reachability analysis <ref> [16] </ref>. The same argument also applies to our work reported in this paper. By forcing the system to progress through a fair execution sequence, we have cut down the redundancy of state exploration due to equivalent execution sequences. <p> It is not clear, however, what class of protocols in his model is amendable for his analysis technique. For cyclic protocols, our fair reachability formulation has the following advantages: First, our fair reachability state space maintains the same nice equal channel length property as for n = 2 <ref> [16, 5] </ref>. Second, both concurrency and synchronization vectors in our fair reachability notion allow more than two machines to progress at the same time. As a result, for most cyclic protocols, our analysis achieves greater state reduction than the one in [13].
Reference: [17] <author> D. Sidhu, A. Chung, </author> <title> and T.P. Blumer, "Experience with Formal Methods in Protocol Development," </title> <journal> ACM SIGCOMM, Computer Communication Review, </journal> <volume> Vol. 21, No. 2, </volume> <month> April, </month> <year> 1991, </year> <pages> pp. 81-101. </pages>
Reference-contexts: As a result, much of the research has been devoted to identifying the class of protocols with decidable logical errors and devising state reduction techniques to overcome the state explosion problem during state space exploration. For a survey of these methods, please refer to <ref> [17] </ref>. Fair reachability analysis was proposed as one of the improved reachability analysis techniques for protocols with two machines [16, 5]. In fair reachability analysis, two machines are forced to make progress at the same time whenever possible. State reduction is achieved by only generating those fair progress states.
References-found: 17

