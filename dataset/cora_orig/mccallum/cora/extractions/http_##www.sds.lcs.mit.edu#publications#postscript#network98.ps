URL: http://www.sds.lcs.mit.edu/publications/postscript/network98.ps
Refering-URL: http://www.sds.lcs.mit.edu/publications/network98.html
Root-URL: 
Title: Introducing New Internet Services: Why and How  
Author: David Wetherall, Ulana Legedza, and John Guttag 
Keyword: active networks, networking protocols, distributed applications, performance.  
Affiliation: Software Devices and Systems Group Laboratory for Computer Science Massachusetts Institute of Technology  
Date: July 1998  
Note: To appear in IEEE NETWORK Magazine Special Issue on Active and Programmable Networks,  
Abstract: Active networks permit applications to inject programs into the nodes of local and, more importantly, wide area networks. This supports faster service innovation by making it easier to deploy new network services. In this paper, we discuss both the potential impact of active network services on applications and how such services can be built and deployed. We explore the impact by suggesting sample uses and arguing how such uses would improve application performance. We explore the design of active networks by presenting a novel architecture, ants, that adds extensibility at the network layer and allows for incremental deployment of active nodes within the Internet. In doing so, ants tackles the challenges of ensuring that the flexibility offered by active networks does not adversely impact performance or security. Finally, we demonstrate how a new network service may be expressed in ants. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Balakrishnan et al. </author> <title> A Comparison of Mechanisms for Improving TCP Performance over Wireless Links. </title> <booktitle> In SIGCOMM '96, </booktitle> <year> 1996. </year>
Reference-contexts: For example, Mobile IP [18] allows a laptop to be reached at different sites without the need to reconfigure address information, and Snoop-TCP <ref> [1] </ref> compensates for the fact that the congestion control mechanisms of TCP were not designed for lossy media.
Reference: [2] <author> B. Braden. </author> <title> Active Signalling Protocols. </title> <note> http://www.isi.edu/active-signal/, June 1997. </note>
Reference-contexts: Research at Georgia Tech [23] is examining the com-posability of services within the network. Finally, research on active signaling at USC ISI <ref> [2] </ref> and NetScript at Columbia University [22] explore alternative models of active networks in which new services are introduced for control rather than data transfer purposes, or by network management agents rather than all users.
Reference: [3] <author> R. Braden et al. </author> <title> Resource ReSerVation Protocol (RSVP) Version 1 Functional Specification. </title> <type> Internet Draft, </type> <month> Nov </month> <year> 1996. </year> <month> 10 </month>
Reference-contexts: This observation is supported by a number of ad hoc efforts to exploit such functionality: * Multimedia applications (such as videoconferencing and Internet telephony) benefit from real-time and multicast services. For example, RSVP <ref> [3] </ref> reserves fl fdjw, ulana, guttagg@lcs.mit.edu. http://www.sds.lcs.mit.edu/. bandwidth to ensure that time-sensitive data is delivered in a timely fashion, and IP Multicast [4] reduces the bandwidth needed to communicate from one sender to multiple receivers.
Reference: [4] <author> S. E. Deering. </author> <title> Host Extensions for IP multicasting. Request For Comments 1112, </title> <month> Aug </month> <year> 1989. </year>
Reference-contexts: For example, RSVP [3] reserves fl fdjw, ulana, guttagg@lcs.mit.edu. http://www.sds.lcs.mit.edu/. bandwidth to ensure that time-sensitive data is delivered in a timely fashion, and IP Multicast <ref> [4] </ref> reduces the bandwidth needed to communicate from one sender to multiple receivers. In the case of RSVP, bandwidth reservation functionality cannot be provided effectively above the network layer.
Reference: [5] <author> P. Deutsch and C. A. Grant. </author> <title> A Flexible Measurement Tool for Software Systems. </title> <booktitle> In Information Processing, </booktitle> <year> 1971. </year> <note> [6] eBay Inc. AuctionWeb server. http://www.ebay.com/. </note>
Reference-contexts: Processing time and link bandwidth are allocated by time and capsule quanta, respectively; node memory is allocated by cached objects, since caching converts memory into a renewable resource. We hope, however, that it will prove feasible to enforce static limits at nodes with a scheme similar to <ref> [5] </ref> or by using proof-carrying code techniques [15]. 4.2.3 Code Distribution The third component of our architecture is a code distribution system. Given a programmable infrastructure, a mechanism is needed for propagating program definitions to where they are needed.
Reference: [7] <author> J. Hartman et al. </author> <title> Liquid Software: A New Paradigm for Networked Systems. </title> <type> Technical Report TR96-11, </type> <institution> Dept. of Computer Science, Univ. of Arizona, </institution> <year> 1996. </year>
Reference-contexts: The use of general-purpose Java bytecodes and virtual machine has allowed us to evolve our architecture quickly, but at the cost of less control over resource usage and lower absolute performance. Research at the University of Arizona on Liquid Software <ref> [7] </ref> and Scout [13] enable a finer granularity of local resource management as well as competitive performance through the construction of a specialized node operating system.
Reference: [8] <author> M. Hicks et al. </author> <title> PLAN: A Programming Language for Active Networks. </title> <address> http://www.cis.upenn.edu/ ~switchware/papers/plan.ps, </address> <month> July </month> <year> 1997. </year>
Reference-contexts: Research at the University of Arizona on Liquid Software [7] and Scout [13] enable a finer granularity of local resource management as well as competitive performance through the construction of a specialized node operating system. Research at the University of Pennsylvania on PLAN <ref> [8] </ref> and BBN on Sprocket [9] enables stronger resource management and security guarantees across the nodes of a network through the use of language design techniques. Research at Georgia Tech [23] is examining the com-posability of services within the network.
Reference: [9] <author> A. Jackson and C. Partridge. </author> <note> Smart Packets. http://www.net-tech.bbn.com/smtpkts/. </note>
Reference-contexts: Research at the University of Arizona on Liquid Software [7] and Scout [13] enable a finer granularity of local resource management as well as competitive performance through the construction of a specialized node operating system. Research at the University of Pennsylvania on PLAN [8] and BBN on Sprocket <ref> [9] </ref> enables stronger resource management and security guarantees across the nodes of a network through the use of language design techniques. Research at Georgia Tech [23] is examining the com-posability of services within the network.
Reference: [10] <author> D. Katz et al. </author> <title> Tag Switching Architecture - Overview. </title> <type> Internet Draft, </type> <month> Aug </month> <year> 1997. </year>
Reference-contexts: Compared with other architectures that incorporate flexibility, such as Cicso's Tag Switching <ref> [10] </ref>, this approach offers a larger degree of flexibility, but at the potential expense of performance and security. We believe that the ability to tailor network service to the application will ultimately justify the overhead necessary to protect the network as a whole.
Reference: [11] <author> U. Legedza, D. Wetherall, and J. Guttag. </author> <title> Improving the Performance of Distributed Applications Using Active Networks. </title> <booktitle> In INFOCOM '98, </booktitle> <year> 1998. </year>
Reference-contexts: Other papers <ref> [20, 11, 12] </ref> contain further technical detail and quantitative results about individual topics. We begin by presenting, in section 2, some sample applications that illustrate the type of new services that we wish to be able to introduce. <p> However, this competing traffic could also benefit from active processing. Because the active processing can reduce the bandwidth utilization in some regions of the network, other traffic will benefit from the resulting reduction in congestion-related loss and delays. This claim is supported in <ref> [11] </ref>, which reports on simulations of a stock quote server, and in [12], which reports on simulations of an active reliable multicast protocol. Sometimes, doing work within the network also reduces the total amount of work that needs to be done by an application. Consider the following example.
Reference: [12] <author> L.-W. Lehman et al. </author> <title> Active Reliable Multicast. </title> <booktitle> In INFOCOM'98, </booktitle> <year> 1998. </year>
Reference-contexts: Other papers <ref> [20, 11, 12] </ref> contain further technical detail and quantitative results about individual topics. We begin by presenting, in section 2, some sample applications that illustrate the type of new services that we wish to be able to introduce. <p> Because the active processing can reduce the bandwidth utilization in some regions of the network, other traffic will benefit from the resulting reduction in congestion-related loss and delays. This claim is supported in [11], which reports on simulations of a stock quote server, and in <ref> [12] </ref>, which reports on simulations of an active reliable multicast protocol. Sometimes, doing work within the network also reduces the total amount of work that needs to be done by an application. Consider the following example.
Reference: [13] <author> D. Mosberger and L. L. Peterson. </author> <title> Making Paths Explicit in the Scout Operating System. </title> <booktitle> In 2nd Symp. on Operating System Design and Implementation, </booktitle> <year> 1996. </year>
Reference-contexts: The use of general-purpose Java bytecodes and virtual machine has allowed us to evolve our architecture quickly, but at the cost of less control over resource usage and lower absolute performance. Research at the University of Arizona on Liquid Software [7] and Scout <ref> [13] </ref> enable a finer granularity of local resource management as well as competitive performance through the construction of a specialized node operating system.
Reference: [14] <author> D. Murphy. </author> <title> Building an Active Node on the Internet. </title> <type> M.Eng Thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> June </month> <year> 1997. </year>
Reference-contexts: When deployed in an IP network with a mix of active and IP-only routers, the format must be compatible with the IP packet format. IP-only routers then appear to be active routers that have elected not to run additional services. Murphy <ref> [14] </ref> describes how this can be accomplished by carrying ants-only fields as IP options. The most important architectural function of the capsule format is to contain an identifier for a protocol and forwarding routine within that protocol. This identifier is based on a fingerprint of the protocol code.
Reference: [15] <author> G. Necula and P. Lee. </author> <title> Safe Kernel Extensions Without Run-Time Checking. </title> <booktitle> In 2nd Symp. on Operating System Design and Implementation, </booktitle> <year> 1996. </year>
Reference-contexts: We hope, however, that it will prove feasible to enforce static limits at nodes with a scheme similar to [5] or by using proof-carrying code techniques <ref> [15] </ref>. 4.2.3 Code Distribution The third component of our architecture is a code distribution system. Given a programmable infrastructure, a mechanism is needed for propagating program definitions to where they are needed.
Reference: [16] <author> E. Nygren. </author> <title> The Design and Implementation of a High-Performance Active Network Node. </title> <type> M.Eng Thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> February </month> <year> 1998. </year>
Reference-contexts: The throughput of a single node was measured to be 1680 capsules/second for capsules with minimal IP-style forwarding. This measurement was taken on a Sun Ultrasparc 1 (167 MHz) running Sun's JDK 1.1 with a just-in-time compiler. Nygren <ref> [16] </ref> provides evidence that the ants model is lightweight enough such that the overhead of implementing it is low. He reports on a Linux-based (PC) implementation of the ants architecture in which capsule code is transported as Intel binary code instead of as Java bytecodes.
Reference: [17] <author> ONSALE Inc. </author> <title> ONSALE web server. </title> <address> http://www.onsale.com/. </address>
Reference-contexts: Thus, unlike auctioneers in traditional auctions, 2 the auction server may receive bids that are too low and must be rejected, especially during periods of high load when there are many concurrent bids. Current implementations of such servers [6] <ref> [17] </ref> perform all bid processing at the server. In an active network, low bids can be filtered out in the network, before they reach the server. This capability can help the server achieve high throughput during periods of heavy load.
Reference: [18] <author> C. Perkins, Ed. </author> <title> IP Mobility Support. Request For Comments 2002, </title> <month> Oct </month> <year> 1996. </year>
Reference-contexts: For example, Mobile IP <ref> [18] </ref> allows a laptop to be reached at different sites without the need to reconfigure address information, and Snoop-TCP [1] compensates for the fact that the congestion control mechanisms of TCP were not designed for lossy media.
Reference: [19] <author> D. Wessels. </author> <title> The Squid Internet Object Cache. </title> <note> http://squid.nlanr.net/Squid/, 1997. </note>
Reference-contexts: Neither is implemented in the network layer today. 2.1 Stock quotes Many people use the Internet to obtain stock quotes. Fast access to up-to-date quotes is crucial, especially during periods of heavy server load (because it usually signifies an important market fluctuation). Web caches (e.g. Squid <ref> [19] </ref>), which are used to reduce latency and increase the throughput of accesses to servers, are not helpful in this context. First, most Web caches do not cache quotes because they are dynamic data.
Reference: [20] <author> D. Wetherall, J. Guttag, and D. Tennenhouse. </author> <title> ANTS: A Toolkit for Building and Dynamically Deploying Network Protocols. </title> <booktitle> In OPENARCH'98, </booktitle> <year> 1998. </year>
Reference-contexts: Other papers <ref> [20, 11, 12] </ref> contain further technical detail and quantitative results about individual topics. We begin by presenting, in section 2, some sample applications that illustrate the type of new services that we wish to be able to introduce. <p> It presents a point in the design space that we believe is a workable starting point for a real active network. Further, it allows for incremental deployment in the Internet. In this section, we outline our architecture; greater detail is provided in <ref> [20] </ref>. We begin with an overview of its goals and service programming model, and then describe the main components of the system.
Reference: [21] <author> D. J. Wetherall and D. L. Tennenhouse. </author> <title> The ACTIVE IP Option. </title> <booktitle> In 7th SIGOPS European Workshop, </booktitle> <year> 1996. </year>
Reference-contexts: They also supply the resources shared between protocols and enforce constraints on how these resources may be used as protocols are executed. We describe our node design along these two lines. Capsule Forwarding API We chose an initial API based on our experience with a predecessor system <ref> [21] </ref>. This work suggests that a relatively small set of operations is sufficient to express a number of different and useful forwarding routines. We currently support the categories of node primitives listed below.
Reference: [22] <author> Y. Yemini and S. da Silva. </author> <title> Towards Programmable Networks. </title> <booktitle> In FIP/IEEE Intl. Workshop on Distributed Systems Operations and Management, </booktitle> <year> 1996. </year>
Reference-contexts: Research at Georgia Tech [23] is examining the com-posability of services within the network. Finally, research on active signaling at USC ISI [2] and NetScript at Columbia University <ref> [22] </ref> explore alternative models of active networks in which new services are introduced for control rather than data transfer purposes, or by network management agents rather than all users.

References-found: 21

