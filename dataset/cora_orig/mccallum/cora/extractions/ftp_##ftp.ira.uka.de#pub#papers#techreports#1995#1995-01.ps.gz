URL: ftp://ftp.ira.uka.de/pub/papers/techreports/1995/1995-01.ps.gz
Refering-URL: http://wwwipd.ira.uka.de/~hopp/cupit.html
Root-URL: 
Title: The CuPit Compiler for the MasPar MP-1 and MP-2 A Literate Programming Document  
Author: Lutz Prechelt 
Address: 76128 Karlsruhe, Germany  
Affiliation: Fakultat fur Informatik Universitat Karlsruhe  
Pubnum: Technical Report  
Email: (prechelt@ira.uka.de)  
Phone: ++49/721/608-4068, Fax: ++49/721/694092  
Date: January 7, 1995  1/95  
Abstract: This document contains the complete source code of the CuPit compiler for the MasPar MP-1/MP-2 SIMD parallel machines. The compiler is presented as a FunnelWeb literate programming document that contains definitions for the various specification files needed by the Eli compiler construction system. The exactly same set of files that enabled FunnelWeb to produce this document also enable Eli to produce the complete executable compiler, run time system, and standard library. In this document the source code is complemented by interspersed documentation text and several larger introduction text blocks and appendices, in particular a description of all errors found in the compiler during its development and use. The compiler takes CuPit source code as input and produces MPL source code as output. CuPit is a special purpose language for neural network algorithms which dynamically change the topology of the neural network. The compiler is designed to optimize the irregular problems that arise when executing such algorithms for both data locality and load balancing. The compiler can produce several different versions of code: (1) a plain do-as-good-as-you-can-without-any-tricks one (unoptimized), (2) one that uses a better data distribution (statically optimized), (3) one that contains additional instructions to collect information about program behavior at run time, also known as the rti version, meaning "run time information version" (dynamically optimized). 
Abstract-found: 1
Intro-found: 1
Reference: <institution> References </institution>
Reference: [GHL + 92] <author> Robert W. Gray, Vincent P. Heuring, Steven P. Levi, Anthony M. Sloane, and William M. Waite. Eli: </author> <title> A complete, flexible compiler construction system. </title> <journal> Communications of the ACM, </journal> <volume> 35(2) </volume> <pages> 121-131, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: Cupit Program [54] 54 f Root: CupitProgram. CupitProgram: CupitParts. CupitParts: /* nothing */ / CupitParts CupitPart ';'. CupitPart: TypeDef / DataObjectDef / ProcedureDef / FunctionDef / ReductionFunctionDef / WtaFunctionDef. g This macro is invoked in definition 55. All these definitions are now put into the Eli <ref> [GHL + 92] </ref> grammar specification file grammar.con: grammar.con [55] 55 f Cupit Program [54] Type Definition [1] Subroutine Definition [13] Data Object Definition [12] 45 Statement [20] Expression [34] g This macro is attached to an output file. 13 Basic syntactic elements All keywords and operators in a CuPit program must
Reference: [Knu89] <author> Donald Ervin Knuth. </author> <title> The errors of T E X. </title> <journal> Software | Practice and Experience, </journal> <volume> 19(7) </volume> <pages> 607-685, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: This list may be useful for anybody who wants to study programmer errors. It was made in the spirit of Knuth's article "The errors of T E X" <ref> [Knu89] </ref>. The error taxonomy used in my list is a partially simplified and partially extended version of the one used by Knuth. There are the following error types: A. Algorithm Awry. An error in the algorithmic program logic. This error accounts for 40% of the 89 errors in the list.
Reference: [Pre94] <author> Lutz Prechelt. </author> <title> CuPit | a parallel language for neural algorithms: Language reference and tutorial. </title> <type> Technical Report 4/94, </type> <institution> Fakultat fur Informatik, Universitat Karlsruhe, D-76128 Karlsruhe, Germany, </institution> <month> January </month> <year> 1994. </year> <note> Anonymous FTP: /pub/papers/techreports/1994/1994-4.ps.Z on ftp.ira.uka.de. </note>
Reference-contexts: semantics of these language constructs (as viewed by a programmer) is embedded into the syntax description; this part of the compiler document is the very same that is used for the core part of the CuPit language reference manual, where you can also find a tutorial example of CuPit programming <ref> [Pre94] </ref>. 5 Type definitions 5.1 Overview There are several categories of types in CuPit: 1. Elementary types, such as Int, Real, Bool, String, and enumerations (SYMBOLIC types). 2. Intervals of Int or Real. 3. Record types. 4. Connection types. 5. Node types. 6. Network types. 7.

References-found: 4

