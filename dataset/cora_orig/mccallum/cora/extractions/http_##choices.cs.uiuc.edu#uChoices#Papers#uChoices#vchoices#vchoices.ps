URL: http://choices.cs.uiuc.edu/uChoices/Papers/uChoices/vchoices/vchoices.ps
Refering-URL: http://choices.cs.uiuc.edu/choices/uChoices.html
Root-URL: http://www.cs.uiuc.edu
Email: fstan,raila,liao,royg@cs.uiuc.edu  
Title: Virtual Hardware for Operating Systems Development  
Author: See-Mong Tan David K. Raila Willy S. Liao Roy H. Campbell 
Address: 1304 W. Springfield Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Abstract: Developing an operating system on bare hardware is difficult due to an inhospitable development environment, long edit-compile-run-debug times, and the need for extra target hardware. This paper contributes general techniques for creating virtual hardware for operating systems development. The virtual machine is realized on top of UNIX and is a close approximation of real hardware, including interrupts, time slicing, virtual memory, devices, multiple processors with separately programmable memory management units, and the ability to run application programs natively. Debugging and testing our operating system in such an environment was considerably quicker and easier compared to developing on bare hardware. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Roy H. Campbell and Nayeem Islam. </author> " <title> Choices: A Parallel Object-Oriented Operating System". </title> <editor> In Gul Agha, Peter Wegner, and Akinori Yonezawa, editors, </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: This approach was used to provide a prototyping environment for the development of the Choices and Choices object-oriented operating systems <ref> [1, 3] </ref>. We call the two systems that run on the UNIX virtual 1 machine VirtualChoices and VirtualChoices respectively. Developing and testing operating system code for VirtualChoices and VirtualChoices resulted in faster edit-compile-run-debug cycles compared to working with the native implementations of the systems.
Reference: [2] <author> Roy H. Campbell, Nayeem Islam, Ralph Johnson, Panos Kougiouris, and Peter Madany. </author> <title> Choices, Frameworks and Refinement. </title> <editor> In Luis-Felipe Cabrera and Vincent Russo, and Marc Shapiro, editor, </editor> <booktitle> 8 Object-Orientation in Operating Systems, </booktitle> <pages> pages 9-15, </pages> <address> Palo Alto, CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The Choices kernel is implemented as a dynamic collection of interacting objects. System resources, policies, and mechanisms are represented by objects organized in class hierarchies [11]. The system architecture consists of a number of subsystem design frameworks <ref> [2] </ref> that implement generalized designs, design constraints, and a skeletal structure for doing customizations. Key classes within the frameworks can be subclassed to achieve portability, customizations, and optimizations without sacrificing performance [10].
Reference: [3] <author> Roy H. Campbell and See-Mong Tan. </author> <title> Choices: An Object-Oriented Multimedia Operating System. </title> <booktitle> In Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <address> Orcas Island, Washington, </address> <month> May </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: This approach was used to provide a prototyping environment for the development of the Choices and Choices object-oriented operating systems <ref> [1, 3] </ref>. We call the two systems that run on the UNIX virtual 1 machine VirtualChoices and VirtualChoices respectively. Developing and testing operating system code for VirtualChoices and VirtualChoices resulted in faster edit-compile-run-debug cycles compared to working with the native implementations of the systems.
Reference: [4] <author> David K. Raila and See-Mong Tan and Roy H. Campbell. </author> <title> Remote Procedure Call Implementations of Microkernel Virtual Memory Services Degrade System Performance. </title> <note> Submitted to USENIX Technical Conference 1996. </note>
Reference-contexts: Booting a virtual kernel takes several seconds, compared to ten minutes for an install-boot cycle on native platforms. Machine independent operating system code in Choices, including network protocols, the virtual memory subsystem <ref> [4] </ref>, and the object invocation layer [8] were developed with the virtual hardware. The code could then be placed into native versions with little change. UNIX is a general purpose operating system. It was not designed as a virtual machine.
Reference: [5] <author> David Raila and Jishnu Mukerji. </author> <title> A Prototyping Environment for the Choices Operating System. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign and Advanced Architecture Department, Unix Systems Laboratories, </institution> <year> 1993. </year>
Reference-contexts: A Linux port is in progress. 1 We used purify, a trademark of Pure Software, Inc. 2 VirtualChoices extended VirtualChoices <ref> [5] </ref> to include multiple processor emulation. 2 3 Hardware Interface The Choices nano-kernel hardware interface provides an idealized machine architecture to the higher levels.
Reference: [6] <institution> International Business Machines. Virtual Machine/System Product. </institution> <address> Endicott, New York, 5th edition, </address> <year> 1986. </year>
Reference-contexts: The virtual disk driver thus does not implement asynchronous write behavior. 6 Conclusion The virtual machine concept was pioneered by IBM in its VM/360 and VM/CMS <ref> [6] </ref> systems. These systems gave the illusion of separate physical machines to each user. Each virtual machine ran a separate copy of the operating system. The core system multiplexed between each user's virtual machine. VM/360 and VM/CMS were designed specifically to support virtual machines.
Reference: [7] <author> Gary Johnston and Roy H. Campbell. </author> <title> "A Multiprocessor Operating System Simulator". </title> <type> Technical Report UIUCDCS-R-88-1460, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, Urbana, Illinois, </institution> <month> September </month> <year> 1988. </year>
Reference-contexts: The expense of such setups contributes to the difficulty of developing operating systems directly on bare hardware. A number of instructional operating systems, such as Nachos [13], its predecessor TOY, and the operating system simulator used at the University of Illinois <ref> [7] </ref>, run as regular UNIX [9] processes. The operating system is simulated within the UNIX process. This removes the impediment of requiring target machines in order to run the system. Students run and debug the instructional system on widely available platforms running a stable operating system with stable development tools.
Reference: [8] <author> Willy S. Liao, David M. Putzolu, and Roy H. Campbell. </author> <title> Building a Secure, Location Transparent Object Invocation System. </title> <booktitle> In Fourth International Workshop on Object-Orientation in Operating Systems, Lund, </booktitle> <address> Sweden, </address> <month> August </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Booting a virtual kernel takes several seconds, compared to ten minutes for an install-boot cycle on native platforms. Machine independent operating system code in Choices, including network protocols, the virtual memory subsystem [4], and the object invocation layer <ref> [8] </ref> were developed with the virtual hardware. The code could then be placed into native versions with little change. UNIX is a general purpose operating system. It was not designed as a virtual machine.
Reference: [9] <author> Dennis M. Ritchie and Kenneth Thompson. </author> <title> The UNIX Time-Sharing System. </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> 57(6):1905, </volume> <year> 1975. </year>
Reference-contexts: The expense of such setups contributes to the difficulty of developing operating systems directly on bare hardware. A number of instructional operating systems, such as Nachos [13], its predecessor TOY, and the operating system simulator used at the University of Illinois [7], run as regular UNIX <ref> [9] </ref> processes. The operating system is simulated within the UNIX process. This removes the impediment of requiring target machines in order to run the system. Students run and debug the instructional system on widely available platforms running a stable operating system with stable development tools.
Reference: [10] <author> Vincent F. Russo, Peter W. Madany, and Roy H. Campbell. </author> <title> C++ and Operating Systems Performance: A Case Study. </title> <booktitle> In Proceedings of the USENIX C++ Conference, </booktitle> <pages> pages 103-114, </pages> <address> San Francisco, California, </address> <month> April </month> <year> 1990. </year>
Reference-contexts: The system architecture consists of a number of subsystem design frameworks [2] that implement generalized designs, design constraints, and a skeletal structure for doing customizations. Key classes within the frameworks can be subclassed to achieve portability, customizations, and optimizations without sacrificing performance <ref> [10] </ref>. The design frameworks are inherited and customized by each hardware specific implementation of the system providing a high degree of re-use and consistency between implementations. Choices is a redesign of the original Choices system as a micro-kernel based operating system.
Reference: [11] <author> Bjarne Stroustrup. </author> <title> What is object-oriented programming. </title> <booktitle> In USENIX '87 C++ Workshop. USENIX Association, </booktitle> <month> November </month> <year> 1987. </year>
Reference-contexts: The Choices kernel is implemented as a dynamic collection of interacting objects. System resources, policies, and mechanisms are represented by objects organized in class hierarchies <ref> [11] </ref>. The system architecture consists of a number of subsystem design frameworks [2] that implement generalized designs, design constraints, and a skeletal structure for doing customizations. Key classes within the frameworks can be subclassed to achieve portability, customizations, and optimizations without sacrificing performance [10].
Reference: [12] <author> See-Mong Tan, David Raila, and Roy H. Campbell. </author> <title> An Object-Oriented Nano-Kernel for Operating System Hardware Support. </title> <booktitle> In Fourth International Workshop on Object-Orientation in Operating Systems, Lund, </booktitle> <address> Sweden, </address> <month> August </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Choices is a redesign of the original Choices system as a micro-kernel based operating system. In Choices, we have split the micro-kernel into two portions (see figure 1. The machine-dependent nano-kernel <ref> [12] </ref> encapsulates the physical hardware and provides hardware support for the rest of the machine-independent micro-kernel. It provides the micro-kernel with the needed mechanisms for implementing higher-level abstractions, such as processes, timers, and virtual memory. The nano-kernel is not a wrapper around assembler routines.
Reference: [13] <author> W. A. Christopher and S. J. Procter and T. E. Anderson. </author> <title> The Nachos Instructional Operating System. </title> <type> Technical Report UCB//CSD-93-739, </type> <institution> University of California, Berkeley, </institution> <month> April </month> <year> 1993. </year> <month> 9 </month>
Reference-contexts: The expense of such setups contributes to the difficulty of developing operating systems directly on bare hardware. A number of instructional operating systems, such as Nachos <ref> [13] </ref>, its predecessor TOY, and the operating system simulator used at the University of Illinois [7], run as regular UNIX [9] processes. The operating system is simulated within the UNIX process. This removes the impediment of requiring target machines in order to run the system.
References-found: 13

