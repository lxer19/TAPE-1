URL: http://www.cs.kun.nl/eita/publications/conferences/Vuurpijl-conf94a.ps.gz
Refering-URL: http://www.cs.kun.nl/eita/publications/
Root-URL: 
Email: email: louis@cs.kun.nl  
Phone: phone: +31 80 652710, fax: +31 80 553450,  
Title: PREENS, a Parallel Research Execution Environment for Neural Systems  
Author: Louis Vuurpijl, Theo Schouten and Jan Vytopil 
Address: Nijmegen, Toernooiveld 1, 6525 ED Nijmegen, The Netherlands  
Affiliation: University of  
Abstract: PREENS a Parallel Research Execution Environment for Neural Systems is a distributed neurosimulator, targeted on networks of workstations and transputer systems. As current applications of neural networks often contain large amounts of data and as the neural networks involved in tasks such as vision are very large, high requirements on memory and computational resources are imposed on the target execution platforms. PREENS can be executed in a distributed environment, i.e. tools and neural network simulation programs can be running on any machine connectable via TCP/IP. Using this approach, larger tasks and more data can be examined using an efficient coarse grained parallelism. Furthermore, the design of PREENS allows for neural networks to be running on any high performance MIMD machine such as a trans-puter system. In this paper, the different features and design concepts of PREENS are discussed. These can also be used for other applications, like image processing.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M. Azema-Barac, M. Hewetson, M. Recce, J. Taylor, P. Treleavan, and M. Vellasco. </author> <title> Pygmalion Neural Network Programming Environment. </title> <editor> In B. Angeniol and B. Widrow, editors, </editor> <booktitle> International Neural Network Conference, </booktitle> <pages> pages 1237-1244, </pages> <address> Paris, July 1990. </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: 1 Introduction A neurosimulator is a toolbox containing tools for monitoring, manipulating, controlling and executing neural network simulation programs. Current neu-rosimulators 1 such as the RCS [3], Pygmalion <ref> [1] </ref> Genesis [13], Planet [8], and others are all based on a general neural network datastructure or some neural network description language (NDL). Using a hierarchical description of its architecture, the neurosimulator is able to access the data associated with the neural network.
Reference: 2. <author> G.A. Carpenter and S. Grossberg. </author> <title> A massively parallel architecture for a self-organizing neural pattern recognition machine. Computer Vision, </title> <journal> Graphics, and Image Processing, </journal> <volume> 37 </volume> <pages> 54-115, </pages> <year> 1987. </year>
Reference-contexts: Using PREENS, they can define a data object, connect it via convis to a dynamic data evaluation tool, mark the object for examination and watch its evolution online. 3 Integrating PREENS with neural network algorithms The current PREENS algorithm library contains implementations of backpropagation [10], Kohonen [6], ART <ref> [2] </ref>, Boltzmann Perceptron [5] and other neural network paradigms. If a new neural network algorithm has to be included in the PREENS algorithm library, its program description has to be specified and each action that is contained in the description has to be implemented.
Reference: 3. <author> N.H. Goddard, K.J. Lynne, T. Mintz, and L. Bukys. </author> <title> Rochester Connectionist Simulator. </title> <type> Technical Report 233 (revised), </type> <institution> University of Rochester, Computer Science Department, Rochester, </institution> <address> New York 14627, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: 1 Introduction A neurosimulator is a toolbox containing tools for monitoring, manipulating, controlling and executing neural network simulation programs. Current neu-rosimulators 1 such as the RCS <ref> [3] </ref>, Pygmalion [1] Genesis [13], Planet [8], and others are all based on a general neural network datastructure or some neural network description language (NDL). Using a hierarchical description of its architecture, the neurosimulator is able to access the data associated with the neural network.
Reference: 4. <author> P. Hoeper. </author> <title> The Neural Network Hyperplane Animator Program V. 2.0 General Description and Applications. </title> <note> ftp: cs.rutgers.edu; get pub/hyperplane.animator/Ver2paper.ps, </note> <month> May </month> <year> 1993. </year>
Reference-contexts: These tools are also contained in the current PREENS toolset. However in many cases also some application specific tools are used, such as a CCD-camera with framegrabber inputting data online to the running simulation program, some special weight monitoring tools (e.g. a U-matrix displayer [11] or the hyperplane animator <ref> [4] </ref>), or high quality data processing tools such as Matlab [7].
Reference: 5. <author> B. Kappen. </author> <title> Using Boltzmann Machines for probability estimation. </title> <editor> In S. Gielen and B. Kappen, editors, </editor> <volume> ICANN '93, </volume> <pages> pages 521-526. </pages> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1993. </year>
Reference-contexts: PREENS, they can define a data object, connect it via convis to a dynamic data evaluation tool, mark the object for examination and watch its evolution online. 3 Integrating PREENS with neural network algorithms The current PREENS algorithm library contains implementations of backpropagation [10], Kohonen [6], ART [2], Boltzmann Perceptron <ref> [5] </ref> and other neural network paradigms. If a new neural network algorithm has to be included in the PREENS algorithm library, its program description has to be specified and each action that is contained in the description has to be implemented.
Reference: 6. <author> T. Kohonen. </author> <title> Self-Organization and Associative Memory. </title> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <note> second edition, </note> <year> 1988. </year>
Reference-contexts: Using PREENS, they can define a data object, connect it via convis to a dynamic data evaluation tool, mark the object for examination and watch its evolution online. 3 Integrating PREENS with neural network algorithms The current PREENS algorithm library contains implementations of backpropagation [10], Kohonen <ref> [6] </ref>, ART [2], Boltzmann Perceptron [5] and other neural network paradigms. If a new neural network algorithm has to be included in the PREENS algorithm library, its program description has to be specified and each action that is contained in the description has to be implemented.
Reference: 7. <author> Mathworks, </author> <title> Cochituate Place 24, Prime Pathway, Natic, Mas 01760. Matlab, High Performance Numeric Computation and Visualization Software, </title> <note> 1992. Version 4.0 User's Guide. </note>
Reference-contexts: However in many cases also some application specific tools are used, such as a CCD-camera with framegrabber inputting data online to the running simulation program, some special weight monitoring tools (e.g. a U-matrix displayer [11] or the hyperplane animator [4]), or high quality data processing tools such as Matlab <ref> [7] </ref>.
Reference: 8. <author> Y. Miyata. </author> <title> A User's Guide to PlaNet Version 5.6, A Tool for Constructing, Running and Looking into a PDP Network. </title> <institution> University of Boulder, Computer Science Department, Boulder, </institution> <month> January </month> <year> 1991. </year>
Reference-contexts: 1 Introduction A neurosimulator is a toolbox containing tools for monitoring, manipulating, controlling and executing neural network simulation programs. Current neu-rosimulators 1 such as the RCS [3], Pygmalion [1] Genesis [13], Planet <ref> [8] </ref>, and others are all based on a general neural network datastructure or some neural network description language (NDL). Using a hierarchical description of its architecture, the neurosimulator is able to access the data associated with the neural network.
Reference: 9. <author> M.L. Recce, P.V. Rocha, </author> <title> and P.C. Treleaven. Neural Network Programming Environments. </title> <editor> In I. Aleksander and J. Taylor, editors, </editor> <booktitle> Artificial Neural Networks 2, </booktitle> <pages> pages 1237-1244. </pages> <publisher> Elsevier Science Publishers, </publisher> <month> September </month> <year> 1992. </year>
Reference-contexts: PREENS is an execution environment that supports the execution, monitoring and control of neural network simulations. The construction of simulation 1 For a taxonomy over neurosimulators, see <ref> [9] </ref> programs is not supported, to develop a simulation program general program-ming tools have to be used. Thus unlike existing neurosimulators, in PREENS neural network programs do not have to be specified following the syntax of some general neural network description datastructure.
Reference: 10. <author> D.E. Rumelhart and J.L. McClelland. </author> <title> Parallel Distributed Processing: </title> <journal> Explorations in the Microstructure of Cognition, </journal> <volume> volume 1. </volume> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: Using PREENS, they can define a data object, connect it via convis to a dynamic data evaluation tool, mark the object for examination and watch its evolution online. 3 Integrating PREENS with neural network algorithms The current PREENS algorithm library contains implementations of backpropagation <ref> [10] </ref>, Kohonen [6], ART [2], Boltzmann Perceptron [5] and other neural network paradigms. If a new neural network algorithm has to be included in the PREENS algorithm library, its program description has to be specified and each action that is contained in the description has to be implemented.
Reference: 11. <author> A. Ultsch and H.P. Siemon. </author> <title> Exploratory Data Analysis: Using Kohonen Networks on Transputers. </title> <type> Technical Report Bericht Nr. 329, </type> <institution> University of Dortmund, Fach-bereich Informatik, </institution> <address> Postfach 500500, D-4600 Dortmund 50, </address> <month> December </month> <year> 1989. </year>
Reference-contexts: These tools are also contained in the current PREENS toolset. However in many cases also some application specific tools are used, such as a CCD-camera with framegrabber inputting data online to the running simulation program, some special weight monitoring tools (e.g. a U-matrix displayer <ref> [11] </ref> or the hyperplane animator [4]), or high quality data processing tools such as Matlab [7].
Reference: 12. <author> L.G. </author> <title> Vuurpijl and Th.E. Schouten. Suitability of Transputers for Neural Network Simulations. </title> <editor> In W. Joosen and E. Milgrom, editors, </editor> <booktitle> Parallel Computing: From Theory to Sound Practice, </booktitle> <pages> pages 528-537. </pages> <publisher> IOS Press, </publisher> <year> 1992. </year>
Reference-contexts: PREENS contains a distributed interface for broadcasting and gathering distributed data objects and commands between convis and a parallel simulation program. The current version supports parallel implementations decomposed via the coarse grained dataset decomposition technique <ref> [12] </ref>. As with this technique each processor hosts the same neural network, there is no problem with gathering and broadcasting distributed information. For applications which use other decomposition techniques, a set of communication routines is being supplied that support gathering and broadcasting of distributed information.
Reference: 13. <author> M.A. Wilson, U.S. Bhalla, J.D. Uhley, and J.M. Bower. </author> <title> Genesis: A System for Simulating Neural Networks. </title> <editor> In D.S. Touretzky, editor, </editor> <booktitle> Advances in Neural and Information Processing Systems, </booktitle> <pages> pages 485-492. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction A neurosimulator is a toolbox containing tools for monitoring, manipulating, controlling and executing neural network simulation programs. Current neu-rosimulators 1 such as the RCS [3], Pygmalion [1] Genesis <ref> [13] </ref>, Planet [8], and others are all based on a general neural network datastructure or some neural network description language (NDL). Using a hierarchical description of its architecture, the neurosimulator is able to access the data associated with the neural network.
References-found: 13

