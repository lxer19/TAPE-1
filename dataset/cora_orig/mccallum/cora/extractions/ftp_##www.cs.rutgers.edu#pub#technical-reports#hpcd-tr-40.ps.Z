URL: ftp://www.cs.rutgers.edu/pub/technical-reports/hpcd-tr-40.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: 
Email: fkeane, ellmang@cs.rutgers.edu  
Title: Intelligent Intercessors in Analysis Models for Automated Design  
Author: John Keane Thomas Ellman 
Note: Acknowledgments The research presented in this document is supported in part by NASA grants NCC-2-802 and NAG2-817. This research is also part of the Rutgers-based HPCD (Hypercomputing and Design) project supported by the Advanced Research Projects Agency of the Department of Defense through contract ARPA-DABT 63-93-C-0064.  
Date: January, 1996  
Address: New Brunswick, NJ  
Affiliation: Department of Computer Science Rutgers University  
Abstract: Systems for automated design optimization of complex real-world objects can, in principle, be constructed by combining domain-independent numerical codes with existing domain-specific analysis and simulation models. Unfortunately, existing "legacy" analysis models are frequently unsuitable for use in automated design. They may crash for large classes of input, be numerically unstable or locally non-smooth, or be highly sensitive to control parameters. Direct modification of legacy codes to correct these problems is often rendered infeasible by the high cost of re-validating the modified code. This paper describes an approach to incorporating knowledge-based handling of failures into design optimization systems that does not require code modification, yet allows for fine-grained control of model execution. We have constructed a toolkit for the development of robust design optimization systems that builds "intelligent intercessors" into existing analysis models. These intercessors are compiled from high-level rules to code that is inserted between discretely callable components of the design system. Intercessors serve to detect failures; take corrective action when possible; and transfer control to an appropriate destination when corrective actions fail. We show that this approach is effective in improving analysis model robustness and design optimization performance in the domain of conceptual design of jet engine nozzles. 
Abstract-found: 1
Intro-found: 1
Reference: [ Gelsey and Smith, 1995 ] <author> Andrew Gelsey and Don Smith. </author> <title> A computational environment for exhaust nozzle design. </title> <booktitle> In Proceedings, Computing in Aerospace 10, </booktitle> <address> San Antonio, TX, </address> <month> March </month> <year> 1995. </year> <note> AIAA. AIAA-95-1016. </note>
Reference-contexts: Our work is more specific to the problems encountered in design automation systems. Our work is closely related to research taking place at Rutgers University, particularly that of Andrew Gelsey and Don Smith <ref> [ Gelsey and Smith, 1995 ] </ref> . In developing our intercessor schema, we have drawn on their experiences in developing the Nozzle Design Associate (NDA), and the Modeling and Simulation Associate (MSA), and used them as a basis for generalization.
Reference: [ Hull and King, 1995 ] <author> R. Hull and R. King. </author> <title> Reference architecture for the intelligent integration of information, </title> <month> May </month> <year> 1995. </year> <note> &lt;URL http://isse.gmu.edu/I3 Arch/X0001 0.TitleTOC.html &gt;. </note>
Reference-contexts: Intercessors can be similarly applied at the level of the optimizer function in an design system, but are general enough to be applied to other classes of function. The ARPA Intelligent Integration of Information (I ^ 3) Reference Architecture <ref> [ Hull and King, 1995 ] </ref> is concerned with similar issues in the use of legacy information sources in new contexts. They define a broad 5-level architecture, with five primary families of services: Coordination, Management, Semantic Integration and Transformation, Functional Extensions, and Wrapping.
Reference: [ Lawrence et al., 1994 ] <author> C.T. Lawrence, Zhou J.L., and Tits A.L. </author> <title> Cfsqp version 2.1 (released november 1994); copyright (c) 1993 | 1994, all rights reserved, </title> <booktitle> 1994. Program. </booktitle> <pages> 14 </pages>
Reference-contexts: The Multimethod optimization was instantiated for a gradient-based, constrained quadratic programming optimizer (CFSQP <ref> [ Lawrence et al., 1994 ] </ref> ); and a non-gradient optimizer, downhill-simplex [ Press et al., 1986 ] . Eighty-one optimizations were run for each method from known valid starting points for eight different mission goals.
Reference: [ AeroHydro, 1992 ] <author> AeroHydro, Inc. </author> <title> Southwest Harbor ME. AHVPP1 Sailing Yacht Per--formance Prediction Program, </title> <booktitle> 1992. Program. </booktitle>
Reference-contexts: The evaluation model for this domain is based on analysis code derived from a commercial racing yacht analysis package, AHVPP1, developed and marketed by AeroHydro, Inc. <ref> [ AeroHydro, 1992 ] </ref> . Of primary importance in constraining the design is the so-called "12-meter rule" which forces the weighted sum of various dimensions of the yacht to total 12 meters.
Reference: [ Minsky, 1991 ] <author> N. Minsky. </author> <title> Law-governed systems. </title> <booktitle> Software Engineering, </booktitle> <pages> pages 285 - 302, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: They define a broad 5-level architecture, with five primary families of services: Coordination, Management, Semantic Integration and Transformation, Functional Extensions, and Wrapping. Our work appears to fit into this architecture as a kind of a Wrapping Service, involving mediation. Naftaly Minsky has written on the concept of "Law-governed Systems" <ref> [ Minsky, 1991 ] </ref> , where global rules can constrain the interactions between components of a system. There are many similarities in in our ideas, including using non-local information in controlling module interactions, and imposing controls by means of an external execution framework.
Reference: [ Orelup et al., 1988 ] <author> M. F. Orelup, J. R. Dixon, P. R. Cohen, and M. K. Simmons. Dominic ii: </author> <title> Meta-level control in iterative redesign. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 25-30, </pages> <address> St. Paul, MN, </address> <year> 1988. </year>
Reference-contexts: It includes the ability to bring in external code as part of an analysis model, and a framework for execution that provides some exception-handling. Our work provides a more robust and general approach to the problem of recognizing and handling exceptions in analysis codes. The DOMINIC II system <ref> [ Orelup et al., 1988 ] </ref> is a design system that applies a strategy of using multiple optimization methods to obtain robust optimization.
Reference: [ Press et al., 1986 ] <author> W. Press, B. Flannery, S. Teukolsky, and W. Vetterling. </author> <title> Numerical Recipes in C, 2d ed. </title> <publisher> Cambridge University Press, </publisher> <address> New York, NY, </address> <year> 1986. </year>
Reference-contexts: The Multimethod optimization was instantiated for a gradient-based, constrained quadratic programming optimizer (CFSQP [ Lawrence et al., 1994 ] ); and a non-gradient optimizer, downhill-simplex <ref> [ Press et al., 1986 ] </ref> . Eighty-one optimizations were run for each method from known valid starting points for eight different mission goals. The quality indicates the average normalized closeness to the best known optimum for each goal. Evaluations were averaged over all successful optimizations.
Reference: [ Tong, 1988 ] <author> S. S. Tong. </author> <title> Coupling symbolic manipulation and numerical simulation for complex engineering designs. </title> <booktitle> In International Association of Mathematics and Computers in Simulation Conference on Expert Systems for Numerical Computing, </booktitle> <institution> Purdue University, </institution> <year> 1988. </year>
Reference-contexts: The evaluation caches could also be used as source of training data to learn failure-prediction functions for analysis program subroutines. 9 Related Work The ENGINEOUS system <ref> [ Tong, 1988 ] </ref> is a system for assisting design engineers in real-world scale problems that was developed for General Electric. It includes the ability to bring in external code as part of an analysis model, and a framework for execution that provides some exception-handling.
References-found: 8

