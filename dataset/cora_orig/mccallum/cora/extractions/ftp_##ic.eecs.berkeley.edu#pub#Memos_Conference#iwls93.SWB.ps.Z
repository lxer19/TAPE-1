URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/iwls93.SWB.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/~vigyan/publications/index.html
Root-URL: http://www.cs.berkeley.edu
Title: Heuristic Minimization for Synchronous Relations  
Author: Vigyan Singhal, Yosinori Watanabe and Robert K. Brayton 
Address: Berkeley, CA 94720, USA  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California,  
Abstract: Optimization for synchronous systems is an important problem in logic synthesis. However, the full utilization of don't care information for sequential synthesis is far from being solved. Synchronous boolean relations can represent sequential don't care information upto in synchronous systems. This allows greater flexibility in expressing don't care information than ordinary boolean relations relating input and output space. Synchronous relations can be used to specify sequential designs both at the finite state machine level as well as at the level of combinational elements and latches. In this paper we also show that the synchronous relation formulation can also be used to find a minimal sum-of-products form which implements a function compatible with an arbitrary set of boolean relations. The main objective of this paper is to present a heuristic approach to find a minimal implementation for a given synchronous relation.
Abstract-found: 1
Intro-found: 1
Reference: [Bry86] <author> R. E. Bryant. </author> <title> Graph-based algorithms for Boolean Function Manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <month> August </month> <year> 1986. </year>
Reference-contexts: We always move in the direction of reducing the cost function and we manipulate only one cube in the representation at a time. The procedure represents and manipulates the synchronous relation and the compatible function implicitly using Binary Decision Diagrams (BDDs) <ref> [Bry86] </ref>. In the section 2 we introduce some preliminaries which are required to understand our formulation for the minimizer and present some theoretical results.
Reference: [BHMS84] <author> R. K. Brayton, G. D. Hachtel, C. McMullen, A. Sangiovanni-Vincentelli. </author> <title> Logic Minimization Algorithms for VLSI Synthesis. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1984. </year>
Reference-contexts: heuristic approach is similar to the approaches used for minimization of incompletely specified 1 A function f : B m ! B n is compatible with boolean relation R B m fi B n if and only if 8x : R (x; f (x)) = 1 [BS89]. 2 functions (espresso) <ref> [BHMS84] </ref> or for minimization of boolean relations (gyocro) [WB91]. Specifically, we start with an initial representation in sum-of-products form and iteratively modify it, always maintaining compatibility with the synchronous relation. <p> We maintain two sets, R and L which 10 respectively denote the literals that have been raised and the literals that have been determined not to be raised. Now we describe the operations used in expand in some detail. For a more detailed description the reader is referred to <ref> [BHMS84, WB91] </ref>. The essential operation finds literals which cannot be raised during the current expansion and adds them to L. Cubes in C which are impossible to be covered now are removed. The key operation in expand is mfc. This determines the directions for the expansion of the cube.
Reference: [BS89] <author> R. K. Brayton, F. Somenzi. </author> <title> Minimization of Boolean Relations. </title> <booktitle> In Proc. of Intl. Symposium on Circuits and Systems, </booktitle> <year> 1989. </year>
Reference-contexts: Using time-shifted variables it is possible to characterize sequences of input-output behavior using these relations. This allows the specification of don't care sequences for sequential designs; such a specification permits a strictly greater expressibility of don't care information than the ordinary boolean relations <ref> [BS89] </ref>. A synchronous relation S is a boolean relation which relates sets (of size d 1 ) of input minterms to sets (of size d 2 ) of output minterms, i.e. <p> The traditional approaches used to find functions compatible with ordinary boolean relations <ref> [BS89, WB91] </ref> cannot be used to find solutions for synchronous relations. This is because, unlike synchronous relations, compatibility of a function with an ordinary boolean relation cannot express constraints among outputs for different inputs 1 . <p> First they extract the prime implicant for a feasible compatible function. Then they express the synchronous constraints in terms of the additional variables, and solve a binate covering step, similar to the procedure in <ref> [BS89] </ref>. We believe with increase in depth d and number of input and output variables such an explicit and exact approach will become infeasible. We will use a heuristic approach and use implicit computation to solve the minimization problem. <p> Our heuristic approach is similar to the approaches used for minimization of incompletely specified 1 A function f : B m ! B n is compatible with boolean relation R B m fi B n if and only if 8x : R (x; f (x)) = 1 <ref> [BS89] </ref>. 2 functions (espresso) [BHMS84] or for minimization of boolean relations (gyocro) [WB91]. Specifically, we start with an initial representation in sum-of-products form and iteratively modify it, always maintaining compatibility with the synchronous relation.
Reference: [DD92a] <author> M. Damiani, G. De Micheli. </author> <title> Synthesis and Optimization of Synchronous Logic Circuits from Recurrence Equations. </title> <booktitle> In Proc. of European Design Automation Conf., </booktitle> <year> 1992. </year>
Reference: [DD92b] <author> M. Damiani, G. De Micheli. </author> <title> Recurrence Equations and the Optimization of Synchronous Logic Circuits. </title> <booktitle> In Proc. of Design Automation Conf., </booktitle> <year> 1992. </year>
Reference: [KF92] <author> Y. Kukimoto, M. Fujita. </author> <title> Rectification Method for Lookup-Table Type FPGA's. </title> <booktitle> In Proc. of Intl. Conf. on Computer-Aided Design, </booktitle> <year> 1992. </year>
Reference-contexts: Besides minimization for sequential circuits, synchronous relations can be used for other applications where one needs to express constraints among sets of input-output minterms, for example <ref> [KF92] </ref>. The relationship between synchronous relations and specifications where such constraints occur has been explored in detail elsewhere ([SSB93]). Once a synchronous relation S is given, the objective is to find a least cost implementation whose functionality satisfies S.
Reference: [RHS91] <author> J-K. Rho, G. Hachtel, F. Somenzi. </author> <title> Don't Care Sequences and the Optimization of Interacting Finite State Machines. </title> <booktitle> In Proc. of Intl. Conf. on Computer-Aided Design, </booktitle> <year> 1991. </year>
Reference-contexts: The input-output sequences will denote the specification for the component machine, and will represent some flexibility in its implementation. Such finite sequences can be expressed by synchronous relations. <ref> [RHS91] </ref> have showed how to obtain such finite behavior sequences for the special case of two cascaded FSMs| one driving machine and the other driven.
Reference: [SSB93] <author> E. M. Sentovich, V. Singhal, R. K. Brayton. </author> <title> Multiple Boolean Relations. </title> <booktitle> In Proc. of Intl. Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1993. </year>
Reference: [SWB93] <author> V. Singhal, Y. Watanabe, R. K. Brayton. </author> <title> Heuristic Minimization for Synchronous Relations. </title> <type> Technical Report UCB/ERL M93/30, </type> <institution> Electronics Research Lab, Univ. of California, Berkeley, </institution> <address> CA 94720, </address> <year> 1993. </year>
Reference-contexts: we can show that if we have a synchronous relation where the input depth is larger than the output depth, we can construct an equivalent synchronous relation with equal input/output depth so that a compatible function with the new synchronous relation corresponds to a compatible function with the old relation <ref> [SWB93] </ref>. However, the resulting implied implementation, unlike the synchronous relations with equal depth, may depend on the values of x at earlier clock cycles. So, in effect, we have a sequential implementation for the synchronous relation. However, the minimization procedure for finding a compatible function f remains unchanged. <p> For the initial representation, we used the initial representation generated by gyocro. For other techniques to obtain the initial representation the reader is referred to <ref> [SWB93] </ref>. We selected the example circuits where gyocro did not give the exact minimum representation to see if chai does better. The purpose of the experiment is to display the computational efficiency of chai. It is not meant to be faster or better than gyocro for solving ordinary boolean relations.
Reference: [WB91] <author> Y. Watanabe, R. K. Brayton. </author> <title> Heuristic Minimization of Boolean Relations. </title> <booktitle> In Proceedings of MCNC Intl. Workshop on Logic Synthesis, </booktitle> <volume> Vol. I, </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: The traditional approaches used to find functions compatible with ordinary boolean relations <ref> [BS89, WB91] </ref> cannot be used to find solutions for synchronous relations. This is because, unlike synchronous relations, compatibility of a function with an ordinary boolean relation cannot express constraints among outputs for different inputs 1 . <p> for minimization of incompletely specified 1 A function f : B m ! B n is compatible with boolean relation R B m fi B n if and only if 8x : R (x; f (x)) = 1 [BS89]. 2 functions (espresso) [BHMS84] or for minimization of boolean relations (gyocro) <ref> [WB91] </ref>. Specifically, we start with an initial representation in sum-of-products form and iteratively modify it, always maintaining compatibility with the synchronous relation. We always move in the direction of reducing the cost function and we manipulate only one cube in the representation at a time. <p> Definition 6 For a given synchronous relation S and a compatible representation F , a cube c fl is said to be a feasible cube for c 2 F if F fcg [ fc fl g is compatible with S. 4 We also borrow the following notation from <ref> [WB91] </ref>. Notation 2 For a given representation F , a function f : B m ! B n is uniquely defined, where the algebraic expression of f is given by F. <p> Since synchronous relations subsume boolean relations (as we showed in Theorem 2.2), the examples which show the non-uniqueness and non-continuity of reduce for output parts in boolean relations <ref> [WB91] </ref> hold for synchronous relations also. The following two examples illustrate the non-uniqueness and non-continuity for the input part. Example 3.1 Consider the two boolean relations R 1 ; R 2 B 2 fiB 1 as shown in Figure 4. <p> This follows from a proof similar to one in <ref> [WB91] </ref>. Maximally decreased cube The formulation described in this section to obtain a maximally reduced cube can be easily extended to obtain a maximally decreased cube. Here we relax the restriction that the replacing cube is contained in the replaced cube. <p> We maintain two sets, R and L which 10 respectively denote the literals that have been raised and the literals that have been determined not to be raised. Now we describe the operations used in expand in some detail. For a more detailed description the reader is referred to <ref> [BHMS84, WB91] </ref>. The essential operation finds literals which cannot be raised during the current expansion and adds them to L. Cubes in C which are impossible to be covered now are removed. The key operation in expand is mfc. This determines the directions for the expansion of the cube.
Reference: [WB93] <author> H-Y. Wang, R. K. Brayton. </author> <title> Permissible Observability Relations in Interacting Finite State Machines. </title> <booktitle> In Proc. of Intl. Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1993. </year> <month> 14 </month>
References-found: 11

