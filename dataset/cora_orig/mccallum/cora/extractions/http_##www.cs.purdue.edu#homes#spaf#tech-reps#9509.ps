URL: http://www.cs.purdue.edu/homes/spaf/tech-reps/9509.ps
Refering-URL: http://www.cs.purdue.edu/coast/coast-library.html
Root-URL: http://www.cs.purdue.edu
Email: fkumar,spafg@cs.purdue.edu  
Title: A Software Architecture to support Misuse Intrusion Detection.  
Author: Sandeep Kumar Eugene H. Spafford 
Date: March 17, 1995  
Address: West Lafayette, IN 47907-1398  
Affiliation: The COAST Project Department of Computer Sciences Purdue University  
Pubnum: Technical Report CSD-TR-95-009  
Abstract: Misuse Intrusion Detection has traditionally been understood in the literature as the detection of specific, precisely representable techniques of computer system abuse. Pattern matching is well disposed to the representation and detection of such abuse. Each specific method of abuse can be represented as a pattern and many of these can be matched simultaneously against the audit logs generated by the OS kernel. Using relatively high level patterns to specify computer system abuse relieves the pattern writer from having to understand and encode the intricacies of pattern matching into a misuse detector. Patterns represent a declarative way of specifying what needs to be detected, instead of specifying how it should be detected. We have devised a model of matching based on Colored Petri Nets specifically targeted for misuse intrusion detection. In this paper we present a software architecture for structuring a pattern matching solution to misuse intrusion detection. In the context of an object oriented prototype implementation we describe the abstract classes encapsulating generic functionality and the inter-relationships between the classes.
Abstract-found: 1
Intro-found: 1
Reference: [BK88] <author> David S. Bauer and Michael E. Koblentz. </author> <title> NIDX An Expert System for Real-Time Network Intrusion Detection. </title> <booktitle> In Proceedings Computer Networking Symposium, </booktitle> <pages> pages 98-106. </pages> <publisher> IEEE, </publisher> <address> New York, NY, </address> <month> April </month> <year> 1988. </year>
Reference-contexts: Several approaches to misuse detection have been tried in the past. They include language based approaches to represent and detect intrusions [HCMM92], developing an API 1 for the same [Sma95], expert systems <ref> [SSHW88, Sma88, BK88] </ref> and high level state machines to encode and match signatures [Ilg92, PK92]. We proposed using a pattern matching approach to the representation and detection of intrusion signatures [KS94c].
Reference: [BN84] <author> Andrew D. Birrell and Bruce Jay Nelson. </author> <title> Implementing Remote Procedure Calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: That is, the patterns, the server and the event sources may all reside on physically different machines. The server can then retrieve events by using any of several well known techniques <ref> [BN84, Par90] </ref> and dispatch them to patterns. Although our current implementation is single host based, a distributed implementation should be straightforward. Our current implementation precludes concurrency of exercising a pattern with several events simultaneously because of order of execution guarantees that can be made in a single threaded architecture.
Reference: [CER] <institution> Available by anonymous ftp from cert.sei.cmu.edu:/pub/cert advisories. </institution>
Reference-contexts: We are currently in the final stages of the implementation of a C2_Server that dispatches C2 audit trail events on a Solaris 2.3 machine running the Basic Security Module. Signatures will be written for vulnerability data drawn from COPS [FS91], CERT advisories <ref> [CER] </ref> and the bugtraq and 8lgm 3 electronic mailing lists. Performance figures for that will be reported in a subsequent paper. 7 Summary This paper described a possible architecture for structuring a misuse intrusion detector based on pattern matching.
Reference: [Com91] <author> Douglas E. Comer. </author> <title> Internetworking with TCP/IP, volume I. </title> <publisher> Prentice Hall, </publisher> <address> 2nd edition, </address> <year> 1991. </year>
Reference-contexts: The example is drawn from a familiar domain and illustrates that the model is independent of the nature of the underlying events. A TCP connection setup between the initiator S and the recipient D involves a three-way handshake <ref> [Com91] </ref>. The first segment of the handshake involves sending an IP datagram from S to D with the SYN bit set in the code field. In response to this SYN packet D sends a datagram that acknowledges the SYN packet and sets the SYN bit to continue the handshake.
Reference: [FS91] <author> Daniel Farmer and Eugene Spafford. </author> <title> The COPS Security Checker System. </title> <type> Technical Report CSD-TR-993, </type> <institution> Purdue University, Department of Computer Sciences, </institution> <month> Septem-ber </month> <year> 1991. </year>
Reference-contexts: We are currently in the final stages of the implementation of a C2_Server that dispatches C2 audit trail events on a Solaris 2.3 machine running the Basic Security Module. Signatures will be written for vulnerability data drawn from COPS <ref> [FS91] </ref>, CERT advisories [CER] and the bugtraq and 8lgm 3 electronic mailing lists. Performance figures for that will be reported in a subsequent paper. 7 Summary This paper described a possible architecture for structuring a misuse intrusion detector based on pattern matching.
Reference: [HCMM92] <author> Naji Habra, B. Le Charlier, A. Mounji, and I. Mathieu. ASAX: </author> <title> Software Architecture and Rule-based Language for Universal Audit Trail Analysis. </title> <booktitle> In Proceedings of ESORICS 92, </booktitle> <address> Toulouse, France, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: For example, the detection of the Internet worm attack by monitoring for its exploitation of the fingerd and sendmail bugs [Spa89] would fall under misuse detection. Several approaches to misuse detection have been tried in the past. They include language based approaches to represent and detect intrusions <ref> [HCMM92] </ref>, developing an API 1 for the same [Sma95], expert systems [SSHW88, Sma88, BK88] and high level state machines to encode and match signatures [Ilg92, PK92]. We proposed using a pattern matching approach to the representation and detection of intrusion signatures [KS94c]. <p> ASAX <ref> [HCMM92] </ref> is the closest to our approach but ASAX is less declarative. In specifying patterns in their rule based language RUSSELL one must explicitly encode the order of rules that are triggered at every step. While [HCMM92] tends to be a mechanism for general purpose audit trail analysis, our effort is <p> ASAX <ref> [HCMM92] </ref> is the closest to our approach but ASAX is less declarative. In specifying patterns in their rule based language RUSSELL one must explicitly encode the order of rules that are triggered at every step. While [HCMM92] tends to be a mechanism for general purpose audit trail analysis, our effort is a combination of mechanism and policy. The features provided in our work are closely tied to the intrusion characteristics we are trying to detect.
Reference: [Hoa74] <author> C. A. R. Hoare. </author> <title> Monitors: An Operating System Structuring Concept. </title> <journal> Communications of the ACM, </journal> <volume> 17(10) </volume> <pages> 549-557, </pages> <year> 1974. </year>
Reference-contexts: This consumes one thread of control as S.run () never returns. The server is responsible for implementing concurrency control methods to ensure that calls to its public member functions do not corrupt its internal state. Our implementation uses the idea of monitors <ref> [Hoa74] </ref> to ensure this.
Reference: [Ilg92] <author> Koral Ilgun. USTAT: </author> <title> A Real-Time Intrusion Detection System for UNIX. </title> <type> Master's thesis, </type> <institution> Computer Science Department, University of California, Santa Barbara, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: Several approaches to misuse detection have been tried in the past. They include language based approaches to represent and detect intrusions [HCMM92], developing an API 1 for the same [Sma95], expert systems [SSHW88, Sma88, BK88] and high level state machines to encode and match signatures <ref> [Ilg92, PK92] </ref>. We proposed using a pattern matching approach to the representation and detection of intrusion signatures [KS94c]. This approach resulted from a study of a large number of common intrusions with the aim of representing them as signatures [KS94a]. <p> Sequencing and partial order constraints on events can be represented in a direct declarative manner. Systems that use expert system rules to encode misuse activity only do so indirectly because it is hard or inefficient to specify temporal relationships between facts in rule antecedents. <ref> [Ilg92, PK92] </ref> permit the specification of state transition diagrams to represent misuse activity but their transition events are high level actions that do not directly correspond to system generated events. ASAX [HCMM92] is the closest to our approach but ASAX is less declarative.
Reference: [Jen92] <author> Kurt Jensen. </author> <title> Coloured Petri Nets Basic Concepts I. </title> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The appendix outlines examples of system vulnerabilities and their representation in this model that would be more suitable for detection using a C2 2 audit trail. These graphs are an adaptation of Colored Petri Nets <ref> [Jen92] </ref> with guards defining the context in which signatures are considered matched. Vertices in the graph represent system states. The pattern represents the sequence of events and its context that forms the core of a successful intrusion or its attempt. Patterns may have pre-conditions and post-actions associated with them.
Reference: [KS94a] <author> Sandeep Kumar and Eugene Spafford. </author> <title> A Taxonomy of Common Computer Security Vulnerabilities based on their Method of Detection. </title> <type> (unpublished), </type> <month> June </month> <year> 1994. </year>
Reference-contexts: We proposed using a pattern matching approach to the representation and detection of intrusion signatures [KS94c]. This approach resulted from a study of a large number of common intrusions with the aim of representing them as signatures <ref> [KS94a] </ref>. The signatures were then classified into categories based on their theoretical tractability of detection. We consider the following to be unique advantages specific to our model of pattern represention and matching. Sequencing and partial order constraints on events can be represented in a direct declarative manner.
Reference: [KS94b] <author> Sandeep Kumar and Eugene Spafford. </author> <title> An Application of Pattern Matching in Intrusion Detection. </title> <type> Technical Report 94-013, </type> <institution> Purdue University, Department of Computer Sciences, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: We use the word class in a generic sense and the corresponding notion from many other languages can be substituted here. 2 Our Approach The model of pattern representation and detection on which the implementation is based, and its theoretical properties were first described in <ref> [KS94b] </ref> and later refined in [KS94c]. Briefly, each intrusion signature is represented as a specialized graph in this model. We have used the example of detecting TCP connections using IP datagrams to illustrate the various elements of our approach [see fig. 1]. <p> RLOGIN_PORT is a global variable defined outside the pattern definition. For a more detailed description of the syntax and use of expressions see <ref> [KS94b] </ref>. This paper assumes the suitability of the model to misuse intrusion detection. That justification was done in [KS95]. Given the premise that patterns conforming to the model need to be represented and matched by applications, the implementation of this model can be broken down into the following sub-problems: 1.
Reference: [KS94c] <author> Sandeep Kumar and Eugene H. Spafford. </author> <title> A Pattern Matching Model for Misuse Intrusion Detection. </title> <booktitle> In Proceedings of the 17th National Computer Security Conference, </booktitle> <pages> pages 11-21, </pages> <month> October </month> <year> 1994. </year> <month> 14 </month>
Reference-contexts: We proposed using a pattern matching approach to the representation and detection of intrusion signatures <ref> [KS94c] </ref>. This approach resulted from a study of a large number of common intrusions with the aim of representing them as signatures [KS94a]. The signatures were then classified into categories based on their theoretical tractability of detection. <p> That is, the pattern is not encoded by the signature writer as code that explicity performs the matching. This cleanly separates the matching from the specification of what needs to be matched. In this paper we describe our implementation of the model in <ref> [KS94c] </ref>. Although we have used a popular object-oriented programming language (C++) for our effort, the technique does not require it. Our implementation is directed at providing a set of integrated classes that can be used in an application program to implement a generic misuse intrusion detector. <p> We use the word class in a generic sense and the corresponding notion from many other languages can be substituted here. 2 Our Approach The model of pattern representation and detection on which the implementation is based, and its theoretical properties were first described in [KS94b] and later refined in <ref> [KS94c] </ref>. Briefly, each intrusion signature is represented as a specialized graph in this model. We have used the example of detecting TCP connections using IP datagrams to illustrate the various elements of our approach [see fig. 1].
Reference: [KS95] <author> Sandeep Kumar and Eugene H. Spafford. </author> <title> Misuse Intrusion Detection Viewed as a Pattern Matching Problem. </title> <note> Journal of Computer Security (to be submitted), </note> <year> 1995. </year>
Reference-contexts: RLOGIN_PORT is a global variable defined outside the pattern definition. For a more detailed description of the syntax and use of expressions see [KS94b]. This paper assumes the suitability of the model to misuse intrusion detection. That justification was done in <ref> [KS95] </ref>. Given the premise that patterns conforming to the model need to be represented and matched by applications, the implementation of this model can be broken down into the following sub-problems: 1. The external representation of patterns.
Reference: [oDS85] <institution> Department of Defense Standard. Department of Defense Trusted Computer System Evaluation Criteria. Number DOD 5200.28-STD. U.S. Government Printing Office, </institution> <month> December </month> <year> 1985. </year>
Reference-contexts: A pattern can have more than one invariant. That 2 A DoD security evaluation criteria class requiring auditing and unavailability of encrypted passwords <ref> [oDS85] </ref>. 3 corresponds to P ^ I 1 ^ ^ I n . For example, a pattern that matches process startups and records all file accesses by the process may require an invariant that ensures that the process has not exited while the principal pattern is being matched.
Reference: [Par90] <author> Graham D. Parrington. </author> <title> Reliable Distributed Programming in C++: The Arjuna Approach. </title> <booktitle> In USENIX 1990 C++ Conference Proceedings, </booktitle> <pages> pages 37-50, </pages> <year> 1990. </year>
Reference-contexts: That is, the patterns, the server and the event sources may all reside on physically different machines. The server can then retrieve events by using any of several well known techniques <ref> [BN84, Par90] </ref> and dispatch them to patterns. Although our current implementation is single host based, a distributed implementation should be straightforward. Our current implementation precludes concurrency of exercising a pattern with several events simultaneously because of order of execution guarantees that can be made in a single threaded architecture.
Reference: [Pet92] <author> Charles Petzold. </author> <title> Programming Windows 3.1. </title> <publisher> Microsoft Press, </publisher> <year> 1992. </year>
Reference-contexts: It then calls the Patproc procedure of each such pattern. Patproc is a procedure associated with every pattern (its member function) that handles events for it. This approach to handling events is similar to the approach taken in Microsoft Windows <ref> [Pet92] </ref>. Events of interest are requested by patterns when they are instantiated by the server. Events are dispatched to patterns based on the priority of the pattern. Patterns are placed in queues at the appropriate priority level, and patterns are serviced in each queue in a round robin fashion.
Reference: [PK92] <author> Phillip A. Porras and Richard A. Kemmerer. </author> <title> Penetration State Transition Analysis </title> - 
Reference-contexts: Several approaches to misuse detection have been tried in the past. They include language based approaches to represent and detect intrusions [HCMM92], developing an API 1 for the same [Sma95], expert systems [SSHW88, Sma88, BK88] and high level state machines to encode and match signatures <ref> [Ilg92, PK92] </ref>. We proposed using a pattern matching approach to the representation and detection of intrusion signatures [KS94c]. This approach resulted from a study of a large number of common intrusions with the aim of representing them as signatures [KS94a]. <p> Sequencing and partial order constraints on events can be represented in a direct declarative manner. Systems that use expert system rules to encode misuse activity only do so indirectly because it is hard or inefficient to specify temporal relationships between facts in rule antecedents. <ref> [Ilg92, PK92] </ref> permit the specification of state transition diagrams to represent misuse activity but their transition events are high level actions that do not directly correspond to system generated events. ASAX [HCMM92] is the closest to our approach but ASAX is less declarative.
References-found: 17

