URL: http://www-ai.ijs.si/DarkoZupanic/pact96.ps.gz
Refering-URL: http://www-ai.ijs.si/DarkoZupanic/home.html
Root-URL: 
Email: E-mail: darko.zupanic@ijs.si  
Phone: Phone: (+386)(61) 1773778, Fax: (+386)(61) 12581038  
Title: Optimal solution for a textile production unit  
Author: Darko Zupanic 
Web: http://www-ai.ijs.si/DarkoZupanic/home.html  
Address: Jamova 39, 61000 Ljubljana, Slovenia  
Affiliation: Jozef Stefan Institute Department for Intelligent Systems  
Abstract: A scheduling problem can be described as a set of constraints within which an optimal schedule solution must be found. Using a Constraint Logic Programming (CLP) approach a difficult real-life example problem of job scheduling was successfully solved. The job scheduling task was aimed at optimizing production unit schedules with respect to energy consumption. The optimal problem solution was obtained by exhaustive search in a substantially constrainted space of admissible solutions.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Project Team. </author> <title> ECL i PS e 3.4, ECRC Common Logic Programming System. User Manual, </title> <month> January </month> <year> 1994, </year> <title> c flInternational Computers Limited and ECRC GmbH 1992. </title>
Reference-contexts: A consumption greater than this available amount of energy is the cost of a schedule which has to be minimized. 3 Solving the scheduling problem with CLP The scheduling problem is formulated and solved in the CLP system ECL i PS e <ref> [1] </ref> and executed on a Sun Sparc 10 workstation. In our problem we have complex relationships that can be represented in a simple way in CLP.
Reference: [2] <author> Filipic, B.: </author> <title> Enhancing genetic search to schedule a production unit. </title> <editor> In B.Neumann, editor, </editor> <booktitle> Proceedings of the 10 th European Conference on Artificial Intelligence ECAI-92, </booktitle> <address> Vienna, Austria, </address> <pages> pp. 603-607, </pages> <year> 1992. </year>
Reference-contexts: The optimal problem solution was obtained by exhaustive search in a substantially constrainted space of admissible solutions. 1 The problem is from the textile company Julon, Ljubljana, Slovenia. 2 The scheduling problem The scheduling problem described in <ref> [2] </ref> is concerned with optimizing energy consumption in a production unit of a textile factory. The problem can be divided into two parts. First, there are work environment constraints that determine the admissible schedule solutions. <p> The execution time of each machine varies. In the textile machines scheduling problem <ref> [2] </ref>, the work process includes 15 machines with the following characteristics: * six machines with two startups and execution time of 10 hours; * two machines with one startup and execution time of 10 hours; * three machines with three startups and execution time of 6 hours 30 minutes; * one <p> The optimal result of 560 kWh energy over the fixed limit is better than the currently best known result obtained by genetic algorithm which was 590 kWh <ref> [2] </ref>. Hand-made schedules are additionally 25% worse than the genetic algorithm solution. In the first place, the enumeration method did not use any additional information. The construction of a solution was stopped only if its cost exceeded the cost of the best solution so far.
Reference: [3] <author> Korf, R. E.: </author> <title> Depth-First Iterative-Deepening: An Optimal Admissible Tree Search. </title> <journal> Artificial Intelligence, </journal> <volume> (27) 1985, </volume> <pages> pp. 97-109. </pages>
Reference-contexts: Instead of comparing only the cost of a partial solution to the cost of the best solution so far, a predicted cost of the rest of the solution is added to the cost of a partial solution. This part of the method is similar to IDA* <ref> [3] </ref>. The main difference is in enlarging the step of the f-limit and therefore the best solution so far is also taken into account. The predicted cost is computed from the costs of each part of the solution gathered in the first phase of the method.
Reference: [4] <author> Smith, D. R.: </author> <title> The Structure and Design of Global Search Algorithms. </title> <type> Technical Report, </type> <institution> KES.U.87.12, Kestrel Institute, </institution> <month> July </month> <year> 1988. </year>
Reference-contexts: As soon as the cost of the partial solution exceeds the cost of the best solution so far the construction of the next solution can take place. Other, more sophisticated techniques for pruning the search space can be based on optimality filters <ref> [4] </ref>. The optimality filters cover techniques that eliminate parts of the search space on the basis of a cost information. Typically, the computation of the cost information is expensive.
Reference: [5] <author> Van Hentenryck, P.: </author> <title> Constraint Satisfaction in Logic Programming. </title> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: The time used for this additional computing is usually insignificant in comparison to the time saved by searching the reduced search space. The variable selection order also greatly influences the reduction of the search space. All such and similar techniques <ref> [5] </ref> try to prevent inconsistency which would come out in later steps of the solution construction. <p> We have seven variables separated into two groups: [[X 1 ; X 2 ; X 3 ]; [X 4 ; X 5 ; X 6 ; X 7 ]] After the gathering phase we got, for instance, the following minimal costs: [[10; 15; 9]; <ref> [38; 42; 17; 5] </ref>] In addition, we got the minimal costs for each group (for instance 37 and 105 respectively).
Reference: [6] <author> Yang, Q.: </author> <title> Solving the Generalized Hitting Set Problem. </title> <booktitle> Proceedings of the 9 th European Conference on Artificial Intelligence, </booktitle> <address> Stockholm, Sweden, </address> <pages> pp. 738-743, </pages> <year> 1990. </year>
Reference-contexts: In other words, the cost contribution of any combination of assigned variables is greater than or equal to the sum of the minimal costs of each variable alone (the property merge <ref> [6] </ref> must hold).
Reference: [7] <author> Zupanic, D.: </author> <title> Job scheduling: A CLP approach. </title> <booktitle> Proceedings of the 16 th International Conference on Information Technology interfaces, Pula, Croatia, </booktitle> <pages> pp. 299-303, </pages> <year> 1994. </year>
Reference-contexts: Depending on the time when cost is taken into account, the reduction of the search space will be more or less successful <ref> [7, 8, 9] </ref>. If the cost function is evaluated after an admissible solution is found, all we can do is to state the fact that the cost of this solution is better or worse than the best solution so far. This is the simplest way to find an optimal solution.
Reference: [8] <author> Zupanic, D.: </author> <title> Solving a job scheduling problem with CLP. </title> <booktitle> Proceedings of the 3 th Elec-trotechnical and Computer Science Conference, Portoroz, Slovenia, </booktitle> <volume> volume B, </volume> <pages> pp. 67-70, </pages> <year> 1994. </year>
Reference-contexts: Depending on the time when cost is taken into account, the reduction of the search space will be more or less successful <ref> [7, 8, 9] </ref>. If the cost function is evaluated after an admissible solution is found, all we can do is to state the fact that the cost of this solution is better or worse than the best solution so far. This is the simplest way to find an optimal solution.
Reference: [9] <author> Zupanic, D.: </author> <title> Optimal solution for a real-life job scheduling problem. </title> <booktitle> Proceedings of the 4 th Electrotechnical and Computer Science Conference, Portoroz, Slovenia, </booktitle> <volume> volume B, </volume> <pages> pp. 11-14, </pages> <year> 1995. </year>
Reference-contexts: Depending on the time when cost is taken into account, the reduction of the search space will be more or less successful <ref> [7, 8, 9] </ref>. If the cost function is evaluated after an admissible solution is found, all we can do is to state the fact that the cost of this solution is better or worse than the best solution so far. This is the simplest way to find an optimal solution. <p> Let us show this with the following example. We have seven variables separated into two groups: [[X 1 ; X 2 ; X 3 ]; [X 4 ; X 5 ; X 6 ; X 7 ]] After the gathering phase we got, for instance, the following minimal costs: <ref> [[10; 15; 9] </ref>; [38; 42; 17; 5]] In addition, we got the minimal costs for each group (for instance 37 and 105 respectively).
References-found: 9

