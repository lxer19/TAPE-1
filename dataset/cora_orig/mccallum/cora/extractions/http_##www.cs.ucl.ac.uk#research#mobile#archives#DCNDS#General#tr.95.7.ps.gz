URL: http://www.cs.ucl.ac.uk/research/mobile/archives/DCNDS/General/tr.95.7.ps.gz
Refering-URL: http://www.cs.ucl.ac.uk/research/mobile/archives/DCNDS/General/
Root-URL: http://www.cs.ucl.ac.uk
Title: Teleporting Mobile X Sessions  
Author: Tristan Richardson 
Abstract: This paper examines issues involved in making an X session mobile. A mobile X session is one which is not fixed to a particular X display, but can be materialised on demand at any suitable display. The Teleporting System developed at Olivetti Research Laboratory (ORL) is a tool for experiencing mobile X sessions. It provides a familiar, personalised way of making temporary use of X displays as the user moves from place to place. When linked to location facilities such as those provided by the Olivetti Active Badge 1 System the traditional log-in process can be almost entirely eliminated, allowing the nomadic user to easily make use of computing resources which are to hand. 
Abstract-found: 1
Intro-found: 1
Reference: [Abdel-Wahab91] <author> Hussein M Abdel-Wahab and Mark A Feit. XTV: </author> <title> A Framework for Sharing X Window Clients in Remote Synchronous Collaboration. </title> <booktitle> Proceedings of IEEE TriComm 91: Communications for Distributed Applications & Systems, </booktitle> <address> Chapel Hill, North Carolina, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: This is to put a level of indirection between the client and the real server, called a proxy server (also called a pseudoserver). Proxy servers are not a new idea. Many have been written in order to duplicate an application's output on to multiple displays <ref> [Abdel-Wahab91] </ref> [Altenhofen90]. However, these are 2 not directly applicable to client mobility. They all use one X server as a "master" server to which the clients must remain connected throughout their lifetime.
Reference: [Altenhofen90] <author> Michael P Altenhofen. </author> <title> Erweiterung eines Fenstersystems fur Tutoring-Funktionen. </title> <type> Diploma Thesis, </type> <institution> Universitat Karlsruhe, Karlsruhe, Germany, </institution> <year> 1990. </year>
Reference-contexts: This is to put a level of indirection between the client and the real server, called a proxy server (also called a pseudoserver). Proxy servers are not a new idea. Many have been written in order to duplicate an application's output on to multiple displays [Abdel-Wahab91] <ref> [Altenhofen90] </ref>. However, these are 2 not directly applicable to client mobility. They all use one X server as a "master" server to which the clients must remain connected throughout their lifetime. There is no way in which this connection for a client can be closed without shutting down the client.
Reference: [Chung91] <author> Goopeel Chung, Kevin Jeffay and Hussein M Abdel-Wahab. </author> <title> Accommodating late-comers in a distributed system for synchronous collaboration. </title> <type> Technical report TR91-038, </type> <institution> Department of Computer Science, University of North Carolina at Chapel Hill, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: When told to materialise the teleport session on a new server, tpproxy can generate requests to the new server to bring up to date the state of each of its clients as seen by the new server. Most of the issues involved in this have been covered elsewhere <ref> [Chung91] </ref> [Richardson94] [Solomita94]. When told to dematerialise, tpproxy disconnects from the real server. It continues to process requests from its clients, and for most requests, simply records any state changes before discarding the request. For some requests, however, the client needs a response from the real server.
Reference: [Harter94] <author> Andy Harter and Andy Hopper. </author> <title> A Distributed Location System for the Active Office. </title> <journal> IEEE Network, Special Issue on Distributed Systems for Telecommunications, </journal> <month> January </month> <year> 1994. </year> <month> 7 </month>
Reference-contexts: However, finding a suitable terminal window in the other user's session may not always be trivial. A preferable approach to controlling the teleport session is not to have to interfere with the underlying session at all. The automated control interface Integration with the Active Badge Location System [Want92] <ref> [Harter94] </ref> has introduced a level of automation to the teleporting procedure, making it much easier to make temporary use of X displays. The Active Badge System provides a means of locating individuals and equipment within a building.
Reference: [Jacobi92] <author> Christian P Jacobi. </author> <title> Migrating Widgets. </title> <booktitle> Proceedings of the 6th Annual X Technical Conference, </booktitle> <month> January </month> <year> 1992. </year>
Reference-contexts: There have been attempts to develop such "mobile applications" in X. Trestle [Manasse93] and XTk <ref> [Jacobi92] </ref> are both toolkits designed for the development of applications whose windows are redirectable between displays. Interesting new applications can be developed using such a toolkit, but clearly this approach cannot be used to add mobility to existing, unaltered applications.
Reference: [Lin92] <author> Jin-Kun Lin. </author> <title> Virtual Screen: A Framework for Task Management. </title> <booktitle> Proceedings of the 6th Annual X Technical Conference, </booktitle> <month> January </month> <year> 1992. </year>
Reference-contexts: Each of tpproxy's clients' windows appear as subwindows of this "pseudo-root window", controlled by the window manager running in the teleport session. This is much like the Virtual Screen program <ref> [Lin92] </ref>. If no window manager is running on the real X server, the teleport session's root window simply covers the whole screen. This most commonly occurs when no-one is logged in and the XDM login window is showing.
Reference: [Manasse93] <author> Mark S Manasse. </author> <title> The Trestle Toolkit. </title> <booktitle> Proceedings of the 7th Annual X Technical Conference, </booktitle> <month> January </month> <year> 1993. </year>
Reference-contexts: There have been attempts to develop such "mobile applications" in X. Trestle <ref> [Manasse93] </ref> and XTk [Jacobi92] are both toolkits designed for the development of applications whose windows are redirectable between displays. Interesting new applications can be developed using such a toolkit, but clearly this approach cannot be used to add mobility to existing, unaltered applications.
Reference: [Richardson94] <author> Tristan Richardson, Frazer Bennett, Glenford Mapp and Andy Hopper. </author> <title> Teleporting in an X Window System Environment. </title> <journal> IEEE Personal Communications Magazine, </journal> <note> Third Quarter 1994. </note>
Reference-contexts: There is no way in which this connection for a client can be closed without shutting down the client. More recently, new proxy servers have been developed specifically for the purpose of application mobility. These include our "teleporting" proxy X server, tpproxy <ref> [Richardson94] </ref>, and xmove [Solomita94]. These two proxy servers are in many ways very similar, but there are some important design goals in xmove which make it unsuitable as a basis for making X sessions mobile. Xmove is designed specifically for moving clients on an individual basis. <p> When told to materialise the teleport session on a new server, tpproxy can generate requests to the new server to bring up to date the state of each of its clients as seen by the new server. Most of the issues involved in this have been covered elsewhere [Chung91] <ref> [Richardson94] </ref> [Solomita94]. When told to dematerialise, tpproxy disconnects from the real server. It continues to process requests from its clients, and for most requests, simply records any state changes before discarding the request. For some requests, however, the client needs a response from the real server.
Reference: [Solomita94] <author> Ethan Solomita, James Kempf and Dan Duchamp. XMOVE: </author> <title> A Pseu-doserver For X Window Movement. The X Resource, Issue 11, </title> <publisher> O'Reilly & Associates Inc, </publisher> <month> July </month> <year> 1994. </year>
Reference-contexts: There is no way in which this connection for a client can be closed without shutting down the client. More recently, new proxy servers have been developed specifically for the purpose of application mobility. These include our "teleporting" proxy X server, tpproxy [Richardson94], and xmove <ref> [Solomita94] </ref>. These two proxy servers are in many ways very similar, but there are some important design goals in xmove which make it unsuitable as a basis for making X sessions mobile. Xmove is designed specifically for moving clients on an individual basis. <p> Most of the issues involved in this have been covered elsewhere [Chung91] [Richardson94] <ref> [Solomita94] </ref>. When told to dematerialise, tpproxy disconnects from the real server. It continues to process requests from its clients, and for most requests, simply records any state changes before discarding the request. For some requests, however, the client needs a response from the real server.
Reference: [Want92] <author> Roy Want, Andy Hopper, Veronica Falcao and Jonathan Gibbons. </author> <title> The Active Badge Location System. </title> <journal> ACM Transactions on Information Systems, </journal> <month> January </month> <year> 1992. </year> <month> 8 </month>
Reference-contexts: However, finding a suitable terminal window in the other user's session may not always be trivial. A preferable approach to controlling the teleport session is not to have to interfere with the underlying session at all. The automated control interface Integration with the Active Badge Location System <ref> [Want92] </ref> [Harter94] has introduced a level of automation to the teleporting procedure, making it much easier to make temporary use of X displays. The Active Badge System provides a means of locating individuals and equipment within a building.
References-found: 10

