URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/phrensy/pub/papers/BornsteinMMR97.ps
Refering-URL: http://www.cs.cmu.edu/~bmm/BornsteinMMR97.html
Root-URL: 
Title: Parallelizing Elimination Orders with Linear Fill  
Author: Claudson Bornstein Bruce Maggs Gary Miller R. Ravi 
Keyword: p  
Note: log n) more fill.  
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science 1;2;3 and Graduate School of Industrial Administration 4 Carnegie Mellon University  
Abstract: This paper presents an algorithm for finding parallel elimination orders for Gaussian elimination. Viewing a system of equations as a graph, the algorithm can be applied directly to interval graphs and chordal graphs. For general graphs, the algorithm can be used to paral-lelize the order produced by some other heuristic such as minimum degree. In this case, the algorithm is applied to the chordal completion that the heuristic generates from the input graph. In general, the input to the algorithm is a chordal graph G with n nodes and m edges. The algorithm produces an order with height at most O(log 3 n) times optimal, fill at most O(m), and work at most O(W fl (G)), where W fl (G) is the minimum possible work over all elimination orders for G. Experimental results show that when applied after some other heuristic, the increase in work and fill is usually small. In some instances the algorithm obtains an order that is actually better, in terms of work and fill, than the original one. We also present an algorithm that produces an order with a factor of log n less height, but with a factor of O(
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Agrawal, P. Klein, and R. Ravi. </author> <title> Cutting down on fill using nested dissection: provably good elimination order-ings. </title> <editor> In A. George, J. Gilbert, and J. W. H. Liu, editors, </editor> <title> Graph Theory and Sparse Matrix Computation, </title> <booktitle> volume 56 of the IMA Volumes in Mathematics and its Applications, </booktitle> <pages> pages 31-55. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1993. </year>
Reference-contexts: Bounds on the fill induced by nested dissection orders are known for planar graphs and arbitrary graphs with bounded degree <ref> [1, 15, 23] </ref>. The minimum-degree heuristic repeatedly finds a vertex of minimum degree and eliminates it. This heuristic originated with the work of Markowitz in the late 50's and has undergone several enhancements in the years since [25]. <p> Thus, we can define the height of a sequential order to be the minimum-height parallel order that is consistent with the partial order. Nested dissection is known to produce low-height orders, in particular, within a polylogarithmic factor of the minimum possible <ref> [1, 31] </ref>. On the other hand, minimum-degree orders can have a polynomial factor more height than the minimum possible (e.g., a path). Trying to achieve fast parallel solutions while keep ing the space overhead minimal corresponds to finding an order that has simultaneously low height and low fill. <p> It is interesting to note that there are n-node planar graphs (square grids in particular) for which any elimination order introduces fill (n log n) [8, 17]. Agrawal, Klein and Ravi <ref> [1] </ref> gave the first approximation algorithms for finding elimination orders that simultaneously minimize the fill, height and the work, all to within a polylogarithmic factor of optimal when the degree of the input graph is bounded. <p> Pan and Reif give one of the first analyses of the parallel height of nested dissection orders and show how nested dissection can be used for solving the shortest path problem in graphs [31, 30]. Bodlaender et al. [5] uses an approach similar to <ref> [1] </ref> to find elimination orders with bounds on the height and several related parameters. Both these papers [1, 5] give elimination orders with height at most O (log 2 times the minimum possible, for any n-node graph. <p> Bodlaender et al. [5] uses an approach similar to [1] to find elimination orders with bounds on the height and several related parameters. Both these papers <ref> [1, 5] </ref> give elimination orders with height at most O (log 2 times the minimum possible, for any n-node graph. Numerous heuristics without performance guarantees are also known for this problem [11, 21, 22, 26, 27]. 1.5 Outline The remainder of this paper is organized as follows. <p> If the depth of the separator tree is d, we get the following lemma, which assures that this unbalance can be at most a logarithmic factor for our nested dissection algorithm. Lemma 1 <ref> [1] </ref> Let G be a graph. A depth d minimal balanced separator tree for G produces an order of depth within a factor of d of the optimal. We now proceed to bound the total number of fill edges introduced by the nested dissection algorithm.
Reference: [2] <author> C. Ashcraft and J. Liu. </author> <title> Robust ordering of sparse matrices using multisection. </title> <type> Technical Report ISSTECH-96-002, </type> <institution> Boeing information and support services, </institution> <year> 1996. </year>
Reference-contexts: Recently, some hybrid algorithms have been experimentally shown to produce orders that compare favorably with those produced by either minimum-degree or nested dissection alone. Hendrickson and Rothberg [16], and independently Liu and Ashcraft <ref> [2] </ref>, proposed algorithms that first find a separator that partitions the graph into small components. The minimum-degree heuristic is then used to order the vertices within each component, and also within the separators. <p> Preliminary experiments show that the overheads in fill and height are much better than predicted by our theoretical analysis. For instance, we observed the following interesting behavior in two-dimensional grids. Minimum-degree performs better than nested dissection in terms of fill and work on grids with high aspect ratio <ref> [2] </ref>. In this case, however, the orders produced by minimum-degree are very sequential in nature and exhibit large height. Our algorithm, applied to the chordal completion obtained from the minimum-degree order generates an order that has good height and low fill and work.
Reference: [3] <author> B. Aspvall. </author> <title> Minimizing elimination tree height can increase fill more than linearly. </title> <journal> Information Processing Letters, </journal> <volume> 56 </volume> <pages> 115-120, </pages> <year> 1995. </year>
Reference-contexts: Gilbert conjectured the existence of a parallel elimination order that has the minimum possible height among all orders and fill that is only a constant factor more than the number of edges in a minimum-fill order (see <ref> [3] </ref>). The hope was that a small increase in fill could be traded for faster parallel solutions. Asp-vall [3] disproved this conjecture, however, by exhibiting a graph for which any order that has the minimum possible height requires a polynomial factor more fill than the minimum possible. <p> a parallel elimination order that has the minimum possible height among all orders and fill that is only a constant factor more than the number of edges in a minimum-fill order (see <ref> [3] </ref>). The hope was that a small increase in fill could be traded for faster parallel solutions. Asp-vall [3] disproved this conjecture, however, by exhibiting a graph for which any order that has the minimum possible height requires a polynomial factor more fill than the minimum possible.
Reference: [4] <author> P. Berman and G. Schnitger. </author> <title> On the performance of the minimum degree ordering for Gaussian elimination. </title> <journal> SIAM Journal of Matrix Analysis and Applications, </journal> <volume> 11(1) </volume> <pages> 83-88, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: In contrast to nested dissection, no performance guarantee is known for the fill induced by this heuristic. In fact, there exist graphs for which the fill induced by the minimum-degree order can be very high <ref> [4] </ref>. Recently, some hybrid algorithms have been experimentally shown to produce orders that compare favorably with those produced by either minimum-degree or nested dissection alone. Hendrickson and Rothberg [16], and independently Liu and Ashcraft [2], proposed algorithms that first find a separator that partitions the graph into small components.
Reference: [5] <author> Hans L. Bodlaender, John R. Gilbert, Hjalmtyr Hafsteins-son, and Ton Kloks. </author> <title> Approximating treewidth, pathwidth, frontsize, and shortest elimination tree. </title> <journal> Journal of Algorithms, </journal> <volume> 18(2) </volume> <pages> 238-255, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: a graph, and focus our efforts on finding parallel elimination orders with linear fill. 1.4 Related work: Height Ignoring fill, computing an elimination order for a given graph with minimum height is NP-hard [33], and remains so even if an additive error in the estimate of the height is allowed <ref> [5] </ref>. Pan and Reif give one of the first analyses of the parallel height of nested dissection orders and show how nested dissection can be used for solving the shortest path problem in graphs [31, 30]. Bodlaender et al. [5] uses an approach similar to [1] to find elimination orders with <p> an additive error in the estimate of the height is allowed <ref> [5] </ref>. Pan and Reif give one of the first analyses of the parallel height of nested dissection orders and show how nested dissection can be used for solving the shortest path problem in graphs [31, 30]. Bodlaender et al. [5] uses an approach similar to [1] to find elimination orders with bounds on the height and several related parameters. Both these papers [1, 5] give elimination orders with height at most O (log 2 times the minimum possible, for any n-node graph. <p> Bodlaender et al. [5] uses an approach similar to [1] to find elimination orders with bounds on the height and several related parameters. Both these papers <ref> [1, 5] </ref> give elimination orders with height at most O (log 2 times the minimum possible, for any n-node graph. Numerous heuristics without performance guarantees are also known for this problem [11, 21, 22, 26, 27]. 1.5 Outline The remainder of this paper is organized as follows.
Reference: [6] <author> C. Bornstein, B. Maggs, G. Miller, and R. Ravi. </author> <title> Parallel Gaussian elimination with linear work and fill. </title> <type> Technical Report CMU-CS-97-133, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: The proofs of the lemmas contained here have been omitted, and can be found in <ref> [6] </ref>. 1.3 Related work: Fill The problem of finding an elimination order that minimizes the fill for arbitrary graphs is known to be NP-hard [35]. <p> total amount of fill in duced by the order specified by the tree is O (m p It is not hard to find examples of interval graphs on which a nested dissection algorithm that is forced to choose (1=2)-balanced separators produces an order ing with fill (m p log n) <ref> [6] </ref>, showing that the bound derived in the previous section is tight. 3.2 A linear-fill O (log 2 n)-depth algorithm In this section we present a recursive algorithm that, given an interval graph, finds an O (log 2 n)-depth separator tree that represents the elimination order for the vertices in the <p> We can obtain similar bounds on the amount of work that is induced by the orders produced by our algorithm. Our results are summarized in the next lemma. The work analysis can be found in <ref> [6] </ref>. Lemma 10 Let I be an interval graph with n vertices and m edges.
Reference: [7] <author> P. Buneman. </author> <title> A characterization of rigid circuit graphs. </title> <journal> Discrete Mathematics, </journal> <volume> 9 </volume> <pages> 205-212, </pages> <year> 1974. </year>
Reference-contexts: Along with the subtrees it forms a tree representation of G. A tree representation of a graph G is said to be minimal if the associated skeleton has the minimum number of nodes possible. Gavril [12] and Buneman <ref> [7] </ref> showed that in a minimal representation there is a one-to-one correspondence between vertices of T and maximal cliques of G.
Reference: [8] <author> F. R. K. Chung and D. Mumford. </author> <title> Chordal completions of planar graphs. </title> <journal> Journal of Combinatorial Theory B, </journal> <volume> 62(1) </volume> <pages> 96-106, </pages> <year> 1994. </year>
Reference-contexts: Both of these papers [15, 23] also show a bound of O (n 2 ) on the work of the orders. It is interesting to note that there are n-node planar graphs (square grids in particular) for which any elimination order introduces fill (n log n) <ref> [8, 17] </ref>. Agrawal, Klein and Ravi [1] gave the first approximation algorithms for finding elimination orders that simultaneously minimize the fill, height and the work, all to within a polylogarithmic factor of optimal when the degree of the input graph is bounded.
Reference: [9] <author> T. Davis, P. Amestoy, and I. Duff. </author> <title> An approximate minimum degree ordering algorithm. </title> <type> Technical Report TR-94-039, </type> <institution> Computer and Information Sciences Department, University of Florida, </institution> <address> Gainesville, FL, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: The G matrices are h fi w grids. The number of vertices and edges in each graph can be found in Table 1. We applied our algorithm as a post processing step to the orders produced by a version of the approximate minimum-degree heuristic (AMD) 2 <ref> [9] </ref>, to the nested dissection orders produced by METIS 3 [19] and to the orders produced by a hybrid of min-degree and nested dissection obtained from Rothberg [16]. Table 2 shows the results we obtained as a function of the numbers obtained for an AMD order.
Reference: [10] <author> G. A. </author> <title> Dirac. On rigid circuit graphs. </title> <journal> Abh. Math. Sem. Univ. Hamburgh, </journal> <volume> 25 </volume> <pages> 71-76, </pages> <year> 1961. </year>
Reference-contexts: A graph is said to be chordal if it has a perfect elimination order. Equivalently, a graph is chordal if every simple cycle with more than three vertices has a chord <ref> [10, 34] </ref>, i.e., no subset of vertices of G induces a subgraph isomorphic to a cycle with more than three vertices.
Reference: [11] <author> K. A. Gallivan et al. </author> <title> Parallel algorithms for matrix computations. </title> <publisher> SIAM, </publisher> <address> Philadelphia, PA, </address> <year> 1990. </year>
Reference-contexts: Both these papers [1, 5] give elimination orders with height at most O (log 2 times the minimum possible, for any n-node graph. Numerous heuristics without performance guarantees are also known for this problem <ref> [11, 21, 22, 26, 27] </ref>. 1.5 Outline The remainder of this paper is organized as follows. In the next section, we introduce some definitions. In Section 3 we present two algorithms for finding parallel elimination orders for interval graphs.
Reference: [12] <author> F. Gavril. </author> <title> The intersection graph of subtrees of a tree are exactly the chordal graphs. </title> <journal> Journal of Combinatorial Theory B, </journal> <volume> 16 </volume> <pages> 47-56, </pages> <year> 1974. </year>
Reference-contexts: We call the tree in question a skeleton of the chordal graph G. Along with the subtrees it forms a tree representation of G. A tree representation of a graph G is said to be minimal if the associated skeleton has the minimum number of nodes possible. Gavril <ref> [12] </ref> and Buneman [7] showed that in a minimal representation there is a one-to-one correspondence between vertices of T and maximal cliques of G.
Reference: [13] <author> J. A. George. </author> <title> Nested dissection of a regular finite element mesh. </title> <journal> SIAM Journal of Numerical Analysis, </journal> <volume> 10 </volume> <pages> 345-367, </pages> <year> 1973. </year>
Reference-contexts: It identifies a balanced separator in the graph and sets the nodes in the separator apart for elimination at the very end. The components resulting from removing the separator are recursively ordered, one after the other, and placed before the separator in the elimination order. George <ref> [13] </ref> first proposed this method for eliminating nodes in a mesh, and later generalized it in a paper with Liu [14] for eliminating the nodes in an arbitrary graph.
Reference: [14] <author> J. A. George and J. W. Liu. </author> <title> An automatic nested dissection algorithm for irregular finite element problems. </title> <journal> SIAM Journal of Numerical Analysis, </journal> <volume> 15 </volume> <pages> 1053-1069, </pages> <year> 1978. </year>
Reference-contexts: The components resulting from removing the separator are recursively ordered, one after the other, and placed before the separator in the elimination order. George [13] first proposed this method for eliminating nodes in a mesh, and later generalized it in a paper with Liu <ref> [14] </ref> for eliminating the nodes in an arbitrary graph. Bounds on the fill induced by nested dissection orders are known for planar graphs and arbitrary graphs with bounded degree [1, 15, 23]. The minimum-degree heuristic repeatedly finds a vertex of minimum degree and eliminates it.
Reference: [15] <author> J. R. Gilbert and R. E. Tarjan. </author> <title> The analysis of a nested dissection algorithm. </title> <journal> Numerische Mathematik, </journal> <volume> 50 </volume> <pages> 377-404, </pages> <year> 1987. </year>
Reference-contexts: Bounds on the fill induced by nested dissection orders are known for planar graphs and arbitrary graphs with bounded degree <ref> [1, 15, 23] </ref>. The minimum-degree heuristic repeatedly finds a vertex of minimum degree and eliminates it. This heuristic originated with the work of Markowitz in the late 50's and has undergone several enhancements in the years since [25]. <p> The first analysis for a variant of nested dissection for graphs with small separators (of size O ( p n-node graph) was given by Lipton, Rose and Tarjan [23]. The fill introduced by this variant is O (n log n) on an n-node graph. Subsequently, Gilbert and Tar-jan <ref> [15] </ref> analyzed the original nested dissection algorithm of George and Liu for planar graphs, and showed that using small separators in the recursive procedure yields a fill of O (n log n) [24]. <p> They also point out that this method does not work in general for graphs with small separators by constructing a counterexample. Both of these papers <ref> [15, 23] </ref> also show a bound of O (n 2 ) on the work of the orders. It is interesting to note that there are n-node planar graphs (square grids in particular) for which any elimination order introduces fill (n log n) [8, 17].
Reference: [16] <author> B. Hendrickson and E. Rothberg. </author> <title> Improving the runtime and quality of nested dissection ordering. </title> <type> Technical Report SAND96-0868, </type> <institution> Sandia National Labs, </institution> <address> Albuquerque, NM, </address> <month> March </month> <year> 1996. </year> <note> To appear in the SIAM Journal on Scientific and Statistical Computing. </note>
Reference-contexts: In fact, there exist graphs for which the fill induced by the minimum-degree order can be very high [4]. Recently, some hybrid algorithms have been experimentally shown to produce orders that compare favorably with those produced by either minimum-degree or nested dissection alone. Hendrickson and Rothberg <ref> [16] </ref>, and independently Liu and Ashcraft [2], proposed algorithms that first find a separator that partitions the graph into small components. The minimum-degree heuristic is then used to order the vertices within each component, and also within the separators. <p> We applied our algorithm as a post processing step to the orders produced by a version of the approximate minimum-degree heuristic (AMD) 2 [9], to the nested dissection orders produced by METIS 3 [19] and to the orders produced by a hybrid of min-degree and nested dissection obtained from Rothberg <ref> [16] </ref>. Table 2 shows the results we obtained as a function of the numbers obtained for an AMD order. The number of non-zeros includes entries that are in the original graph as well as any fill entries, above and including the diagonal.
Reference: [17] <author> A. Hoffmann, M. Martin, and D. Rose. </author> <title> Complexity bounds for regular finite difference and finite element grids. </title> <journal> SIAM Journal of Numerical Analysis, </journal> <volume> 10 </volume> <pages> 364-369, </pages> <year> 1973. </year>
Reference-contexts: Both of these papers [15, 23] also show a bound of O (n 2 ) on the work of the orders. It is interesting to note that there are n-node planar graphs (square grids in particular) for which any elimination order introduces fill (n log n) <ref> [8, 17] </ref>. Agrawal, Klein and Ravi [1] gave the first approximation algorithms for finding elimination orders that simultaneously minimize the fill, height and the work, all to within a polylogarithmic factor of optimal when the degree of the input graph is bounded.
Reference: [18] <author> J. Jess and H. Kees. </author> <title> A data structure for parallel L/U decomposition. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 31 </volume> <pages> 231-239, </pages> <year> 1982. </year>
Reference-contexts: The height entries correspond to the height of a minimum height order whose updated graph is identical to the chordal completion being considered. Given a chordal completion, such a minimum height order and its height can be easily computed (see <ref> [18, 27] </ref>). Table 3 shows the amount of work, that is, floating 2 code from ftp://ftp.cise.ufl.edu/pub/umfpack/AMD/ 3 code from ftp://ftp.cs.umn.edu/dept/users/kumar/metis/ point operations, involved in performing Gaussian elimination according to each of the orders.
Reference: [19] <author> G. Karypis and V. Kumar. Metis. </author> <title> Unstructured graph partitioning and sparse matrix ordering system. </title> <address> http://www.cs.umn.edu/~ karypis/metis/metis/main.html, </address> <year> 1995. </year>
Reference-contexts: The number of vertices and edges in each graph can be found in Table 1. We applied our algorithm as a post processing step to the orders produced by a version of the approximate minimum-degree heuristic (AMD) 2 [9], to the nested dissection orders produced by METIS 3 <ref> [19] </ref> and to the orders produced by a hybrid of min-degree and nested dissection obtained from Rothberg [16]. Table 2 shows the results we obtained as a function of the numbers obtained for an AMD order.
Reference: [20] <author> T. Leighton and S. Rao. </author> <title> An approximate max-flow min-cut theorem for uniform multicommodity flow problems with applications to approximation algorithms. </title> <booktitle> In Proceedings of the 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 422-431, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: Their algorithm is essentially the nested dissection algorithm using approximately minimum-size balanced node separators <ref> [20] </ref> to construct the recursive decomposition. They also analyze the fill and the height of their order when the degree of the graph is not bounded.
Reference: [21] <author> C. Leiserson and J. Lewis. </author> <title> Orderings for parallel sparse symmetric factorization. </title> <editor> In G. Rodriguez, editor, </editor> <booktitle> Parallel Processing for Scientific Computing, </booktitle> <pages> pages 27-32. </pages> <publisher> SIAM, </publisher> <address> Philadelphia, PA, </address> <year> 1987. </year>
Reference-contexts: Both these papers [1, 5] give elimination orders with height at most O (log 2 times the minimum possible, for any n-node graph. Numerous heuristics without performance guarantees are also known for this problem <ref> [11, 21, 22, 26, 27] </ref>. 1.5 Outline The remainder of this paper is organized as follows. In the next section, we introduce some definitions. In Section 3 we present two algorithms for finding parallel elimination orders for interval graphs.
Reference: [22] <author> J. Lewis, B. Peyton, and A. Pothen. </author> <title> A fast algorithm for reordering sparse matrices for parallel factorization. </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <volume> 10 </volume> <pages> 1156-1173, </pages> <year> 1989. </year>
Reference-contexts: Both these papers [1, 5] give elimination orders with height at most O (log 2 times the minimum possible, for any n-node graph. Numerous heuristics without performance guarantees are also known for this problem <ref> [11, 21, 22, 26, 27] </ref>. 1.5 Outline The remainder of this paper is organized as follows. In the next section, we introduce some definitions. In Section 3 we present two algorithms for finding parallel elimination orders for interval graphs.
Reference: [23] <author> R. J. Lipton, D. J. Rose, and R. E. Tarjan. </author> <title> Generalized nested dissection. </title> <journal> SIAM Journal of Numerical Analysis, </journal> <volume> 16 </volume> <pages> 346-358, </pages> <year> 1979. </year>
Reference-contexts: Bounds on the fill induced by nested dissection orders are known for planar graphs and arbitrary graphs with bounded degree <ref> [1, 15, 23] </ref>. The minimum-degree heuristic repeatedly finds a vertex of minimum degree and eliminates it. This heuristic originated with the work of Markowitz in the late 50's and has undergone several enhancements in the years since [25]. <p> The first analysis for a variant of nested dissection for graphs with small separators (of size O ( p n-node graph) was given by Lipton, Rose and Tarjan <ref> [23] </ref>. The fill introduced by this variant is O (n log n) on an n-node graph. <p> They also point out that this method does not work in general for graphs with small separators by constructing a counterexample. Both of these papers <ref> [15, 23] </ref> also show a bound of O (n 2 ) on the work of the orders. It is interesting to note that there are n-node planar graphs (square grids in particular) for which any elimination order introduces fill (n log n) [8, 17].
Reference: [24] <author> R. J. Lipton and R. E. Tarjan. </author> <title> Applications of a planar separator theorem. </title> <journal> SIAM Journal on Computing, </journal> <volume> 9 </volume> <pages> 615-627, </pages> <year> 1980. </year>
Reference-contexts: Subsequently, Gilbert and Tar-jan [15] analyzed the original nested dissection algorithm of George and Liu for planar graphs, and showed that using small separators in the recursive procedure yields a fill of O (n log n) <ref> [24] </ref>. They also point out that this method does not work in general for graphs with small separators by constructing a counterexample. Both of these papers [15, 23] also show a bound of O (n 2 ) on the work of the orders.
Reference: [25] <author> J. W. Liu. </author> <title> Modification of the minimum degree algorithm by multiple elimination. </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 12 </volume> <pages> 141-153, </pages> <year> 1985. </year>
Reference-contexts: The minimum-degree heuristic repeatedly finds a vertex of minimum degree and eliminates it. This heuristic originated with the work of Markowitz in the late 50's and has undergone several enhancements in the years since <ref> [25] </ref>. Its popularity is attested to by its inclusion in various publicly available codes such as MA28, YALESMP, and SPARSPAK. In contrast to nested dissection, no performance guarantee is known for the fill induced by this heuristic.
Reference: [26] <author> J. W. Liu. </author> <title> Reordering sparse matrices for parallel elimination. </title> <journal> Parallel Computing, </journal> <volume> 11 </volume> <pages> 73-91, </pages> <year> 1989. </year>
Reference-contexts: Both these papers [1, 5] give elimination orders with height at most O (log 2 times the minimum possible, for any n-node graph. Numerous heuristics without performance guarantees are also known for this problem <ref> [11, 21, 22, 26, 27] </ref>. 1.5 Outline The remainder of this paper is organized as follows. In the next section, we introduce some definitions. In Section 3 we present two algorithms for finding parallel elimination orders for interval graphs.
Reference: [27] <author> J. W. Liu and A. Mirzaian. </author> <title> A linear reodering algorithm for parallel pivoting of chordal graphs. </title> <journal> SIAM Journal of Discrete Mathematics, </journal> <volume> 2 </volume> <pages> 100-107, </pages> <year> 1989. </year>
Reference-contexts: Both these papers [1, 5] give elimination orders with height at most O (log 2 times the minimum possible, for any n-node graph. Numerous heuristics without performance guarantees are also known for this problem <ref> [11, 21, 22, 26, 27] </ref>. 1.5 Outline The remainder of this paper is organized as follows. In the next section, we introduce some definitions. In Section 3 we present two algorithms for finding parallel elimination orders for interval graphs. <p> The height entries correspond to the height of a minimum height order whose updated graph is identical to the chordal completion being considered. Given a chordal completion, such a minimum height order and its height can be easily computed (see <ref> [18, 27] </ref>). Table 3 shows the amount of work, that is, floating 2 code from ftp://ftp.cise.ufl.edu/pub/umfpack/AMD/ 3 code from ftp://ftp.cs.umn.edu/dept/users/kumar/metis/ point operations, involved in performing Gaussian elimination according to each of the orders.
Reference: [28] <author> J. Naor, M. Naor, and A. A. Schaffer. </author> <title> Fast parallel algorithms for chordal graphs. </title> <booktitle> In Proceedings of the 19th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 355-364, </pages> <year> 1987. </year>
Reference-contexts: This tree-contraction like approach was also used by Naor, Naor and Schaffer <ref> [28] </ref> when developing algorithms for chordal graphs. Using either the algorithm in Section 3.1 or Section 3.2, we can derive an algorithm for chordal graphs. Consider a chordal graph G, and its skeleton tree T .
Reference: [29] <author> D. O'Hallaron and J. Shewchuk. </author> <title> Properties of a family of parallel finite element simulations. </title> <type> Technical Report CMU-CS-96-141, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1996. </year>
Reference-contexts: Roger Grimes, at Boeing.) The nasasrb matrix models the structure of the NASA Langley shuttle rocket booster, while the sf matrices are used in the simulation of an earthquake in the San Fernando Valley <ref> [29] </ref>. The G matrices are h fi w grids. The number of vertices and edges in each graph can be found in Table 1.
Reference: [30] <author> V. Pan. </author> <title> Parallel solutions of sparse linear and path systems. </title> <editor> In John Reif, editor, </editor> <booktitle> Synthesis of Parallel Algorithms, </booktitle> <pages> pages 621-678. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: Pan and Reif give one of the first analyses of the parallel height of nested dissection orders and show how nested dissection can be used for solving the shortest path problem in graphs <ref> [31, 30] </ref>. Bodlaender et al. [5] uses an approach similar to [1] to find elimination orders with bounds on the height and several related parameters. Both these papers [1, 5] give elimination orders with height at most O (log 2 times the minimum possible, for any n-node graph.
Reference: [31] <author> V. Pan and J. Reif. </author> <title> Efficient parallel solution of linear systems. </title> <booktitle> In Proceedings of the 17th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 143-152, </pages> <address> Providence, RI, </address> <month> May </month> <year> 1985. </year> <note> ACM. </note>
Reference-contexts: Thus, we can define the height of a sequential order to be the minimum-height parallel order that is consistent with the partial order. Nested dissection is known to produce low-height orders, in particular, within a polylogarithmic factor of the minimum possible <ref> [1, 31] </ref>. On the other hand, minimum-degree orders can have a polynomial factor more height than the minimum possible (e.g., a path). Trying to achieve fast parallel solutions while keep ing the space overhead minimal corresponds to finding an order that has simultaneously low height and low fill. <p> Pan and Reif give one of the first analyses of the parallel height of nested dissection orders and show how nested dissection can be used for solving the shortest path problem in graphs <ref> [31, 30] </ref>. Bodlaender et al. [5] uses an approach similar to [1] to find elimination orders with bounds on the height and several related parameters. Both these papers [1, 5] give elimination orders with height at most O (log 2 times the minimum possible, for any n-node graph.
Reference: [32] <author> S. Parter. </author> <title> The use of linear graphs in Gaussian elimination. </title> <journal> SIAM Review, </journal> <volume> 3 </volume> <pages> 364-369, </pages> <year> 1961. </year>
Reference-contexts: Gaussian elimination can also be viewed as an algorithm that is performed on the graph whose adjacency matrix is the matrix representing the system of equations <ref> [32, 34] </ref>. Pivoting on a variable corresponds to removing a vertex from the graph and forming a clique of its neighbors. The number of new edges added to the graph in this process constitutes the fill.
Reference: [33] <author> A. Pothen. </author> <title> The complexity of optimal elimination trees. </title> <type> Technical Report CS-88-16, </type> <institution> Department of Computer Science, The Pennsylvania State University, University Park, </institution> <address> PA, </address> <year> 1988. </year>
Reference-contexts: key difference between our work and these results is that we start with a chordal completion of a graph, and focus our efforts on finding parallel elimination orders with linear fill. 1.4 Related work: Height Ignoring fill, computing an elimination order for a given graph with minimum height is NP-hard <ref> [33] </ref>, and remains so even if an additive error in the estimate of the height is allowed [5].
Reference: [34] <author> D. Rose. </author> <title> Triangulated graphs and the elimination process. </title> <journal> Journal of Mathematical Analysis and Applications, </journal> <volume> 32 </volume> <pages> 597-609, </pages> <year> 1970. </year>
Reference-contexts: Gaussian elimination can also be viewed as an algorithm that is performed on the graph whose adjacency matrix is the matrix representing the system of equations <ref> [32, 34] </ref>. Pivoting on a variable corresponds to removing a vertex from the graph and forming a clique of its neighbors. The number of new edges added to the graph in this process constitutes the fill. <p> A graph is said to be chordal if it has a perfect elimination order. Equivalently, a graph is chordal if every simple cycle with more than three vertices has a chord <ref> [10, 34] </ref>, i.e., no subset of vertices of G induces a subgraph isomorphic to a cycle with more than three vertices.
Reference: [35] <author> M. Yannakakis. </author> <title> Computing the minimum fill-in is NP-complete. </title> <journal> SIAM Journal of Algebraic and Discrete Methods, </journal> <volume> 2 </volume> <pages> 77-79, </pages> <year> 1981. </year>
Reference-contexts: The proofs of the lemmas contained here have been omitted, and can be found in [6]. 1.3 Related work: Fill The problem of finding an elimination order that minimizes the fill for arbitrary graphs is known to be NP-hard <ref> [35] </ref>. The first analysis for a variant of nested dissection for graphs with small separators (of size O ( p n-node graph) was given by Lipton, Rose and Tarjan [23]. The fill introduced by this variant is O (n log n) on an n-node graph.
References-found: 35

