URL: http://www.cs.toronto.edu/~csc2532h/AAAIfall97.ps.Z
Refering-URL: http://www.cs.toronto.edu/~csc2532h/
Root-URL: http://www.cs.toronto.edu
Email: steven@ai.toronto.edu  lesperan@yorku.ca  hector@ai.toronto.edu  
Title: Specifying Communicative Multi-Agent Systems with ConGolog  
Author: Steven Shapiro Yves Lesperance Hector J. Levesque 
Address: Toronto, ON, Canada M5S 3G4  Toronto, ON, Canada M4N 3M6  Toronto, ON, Canada M5S 3G4  
Affiliation: Department of Computer Science University of Toronto  Department of Computer Science Glendon College, York University  Department of Computer Science University of Toronto  
Abstract: In this paper, we describe a framework for specifying communicative multi-agent systems, using a theory of action based in the situation calculus to describe the effects of actions on the world and on the mental states of agents; and the concurrent, logic programming language ConGolog to specify the actions performed by each agent. Since ConGolog has a well-defined semantics in the situation calculus, the specifications can be used to reason about the behavior of individual agents and the system as a whole. We extend the work presented in (Lesperance et al. 1996) to allow the specifications to mention agents' goals explicitly. The framework presented here allows the behavior of different agents to be specified at different levels of abstraction, using a rich set of programming language constructs. As an example, we specify a meeting scheduler multi-agent system. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Cohen, P. R., and Levesque, H. J. </author> <year> 1990a. </year> <title> Intention is choice with commitment. </title> <booktitle> Artificial Intelligence 42 </booktitle> <pages> 213-261. </pages>
Reference-contexts: The behavior of agents will be specified, in part, in terms of their own goals and what they know about the goals of other agents. Following <ref> (Cohen & Levesque 1990a) </ref>, we characterize the goals of an agent by specifying the paths in which all its goals (both maintenance goals and achievement goals) are achieved.

Reference: <author> De Giacomo, G.; Lesperance, Y.; and Levesque, H. J. </author> <year> 1997. </year> <title> Reasoning about concurrent execution, prioritized interrupts, and exogenous actions in the situation calculus. </title> <note> To appear in Proceedings of IJCAI-97. </note>
Reference-contexts: We add inform and request actions as primitive situation calculus actions to model inter-agent communication. We then use the notation of the concurrent, logic programming language ConGolog <ref> (De Giacomo, Lesperance, & Levesque 1997) </ref> to specify the behavior of agents. Since ConGolog has a well-defined semantics in the situation calculus, the specifications can be used to reason about the behavior of individual agents and the system as a whole. <p> We specify the behavior of agents with the notation of the logic programming language ConGolog <ref> (De Gi-acomo, Lesperance, & Levesque 1997) </ref>, the concurrent version of Golog (Levesque et al. 1997). While versions of both Golog and ConGolog have been implemented, we are mainly interested here in the potential for using ConGolog as a specification language. <p> Procedures are defined with the following syntax: proc fi (~x) ffi, where fi is the procedure name, ~x are the formal parameters to the procedure, and ffi is a complex action. ConGolog programs are formally defined using the Do predicate (see <ref> (De Giacomo, Lesperance, & Levesque 1997) </ref> for details).
Reference: <author> Fisher, M. </author> <year> 1995. </year> <title> Towards a semantics for Concurrent MetateM. </title> <editor> In Fisher, M., and Owens, R., eds., </editor> <title> Executable Modal and Temporal Logics (LNAI Volume 896). </title> <publisher> Springer-Verlag. </publisher>
Reference: <author> Hoare, C. </author> <year> 1985. </year> <title> Communicating Sequential Processes. </title> <publisher> Prentice Hall Int. </publisher>
Reference: <author> Lesperance, Y.; Levesque, H. J.; Lin, F.; Marcu, D.; Reiter, R.; and Scherl, R. B. </author> <year> 1996. </year> <title> Foundations of a logical approach to agent programming. </title>
Reference-contexts: In the example system presented in section 6, we model the behavior of one agent only in terms of its knowledge and another in terms of its knowledge and goals. This paper extends the work presented in <ref> (Lesperance et al. 1996) </ref>. In that paper, the agents' mental states consisted only of knowledge. We have added the capacity to specify the behavior of agents in terms of their goals. <p> presented in <ref> (Lesperance et al. 1996) </ref>. In that paper, the agents' mental states consisted only of knowledge. We have added the capacity to specify the behavior of agents in terms of their goals. This addition allows us to dispense with the explicit representation of message queues for agents introduced in (Lesperance et al. 1996), yielding a cleaner account of communicative actions. We reformulate the meeting scheduler application described in (Lesperance et al. 1996) in this enhanced framework. 2 Theory of action Our action theory is based on an extended version of the situation calculus (Reiter 1991), a predicate calculus dialect for <p> This addition allows us to dispense with the explicit representation of message queues for agents introduced in <ref> (Lesperance et al. 1996) </ref>, yielding a cleaner account of communicative actions. We reformulate the meeting scheduler application described in (Lesperance et al. 1996) in this enhanced framework. 2 Theory of action Our action theory is based on an extended version of the situation calculus (Reiter 1991), a predicate calculus dialect for representing dynamically changing worlds. In this formalism, the world is taken to be in a certain situation. <p> Note that unlike <ref> (Lesperance et al. 1996) </ref>, we assume that all actions are public, i.e., every agent is aware of the actions performed by all other agents. <p> This is a fairly simple-minded account of communicative interaction; we plan to refine the account in the future. 4.2 Goals We extend the framework described in <ref> (Lesperance et al. 1996) </ref> by modelling the goals of agents. The behavior of agents will be specified, in part, in terms of their own goals and what they know about the goals of other agents.
Reference: <editor> In Wooldridge, M.; Muller, J. P.; and Tambe, M., eds., </editor> <booktitle> Intelligent Agents Volume II | Proceedings of the 1995 Workshop on Agent Theories, Architectures, and Languages (ATAL-95), Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer-Verlag. </publisher> <pages> 331-346. </pages>
Reference: <author> Levesque, H. J.; Reiter, R.; Lesperance, Y.; Lin, F.; and Scherl, R. B. </author> <year> 1997. </year> <title> GOLOG: A logic programming language for dynamic domains. </title> <journal> Journal of Logic Programming 31 </journal> <pages> 59-84. </pages>
Reference-contexts: We add inform and request actions as primitive situation calculus actions to model inter-agent communication. We then use the notation of the concurrent, logic programming language ConGolog <ref> (De Giacomo, Lesperance, & Levesque 1997) </ref> to specify the behavior of agents. Since ConGolog has a well-defined semantics in the situation calculus, the specifications can be used to reason about the behavior of individual agents and the system as a whole. <p> We specify the behavior of agents with the notation of the logic programming language ConGolog <ref> (De Gi-acomo, Lesperance, & Levesque 1997) </ref>, the concurrent version of Golog (Levesque et al. 1997). While versions of both Golog and ConGolog have been implemented, we are mainly interested here in the potential for using ConGolog as a specification language. <p> We specify the behavior of agents with the notation of the logic programming language ConGolog (De Gi-acomo, Lesperance, & Levesque 1997), the concurrent version of Golog <ref> (Levesque et al. 1997) </ref>. While versions of both Golog and ConGolog have been implemented, we are mainly interested here in the potential for using ConGolog as a specification language. A ConGolog program 10 is composed of a sequence of procedure declarations, followed by a complex action. <p> Procedures are defined with the following syntax: proc fi (~x) ffi, where fi is the procedure name, ~x are the formal parameters to the procedure, and ffi is a complex action. ConGolog programs are formally defined using the Do predicate (see <ref> (De Giacomo, Lesperance, & Levesque 1997) </ref> for details).
Reference: <author> Lin, F., and Reiter, R. </author> <year> 1994. </year> <title> State constraints revisited. </title> <journal> Journal of Logic and Computation 4(5) </journal> <pages> 655-678. </pages>
Reference: <author> McCarthy, J., and Hayes, P. </author> <year> 1979. </year> <title> Some philosophical problems from the standpoint of artificial intelligence. </title>
Reference-contexts: They do not allow the specification of agents in terms of their mental states, nor do they explicitly represent actions in terms of their effects on the world. In this paper, we explore a middle ground. We use the situation calculus <ref> (McCarthy & Hayes 1979) </ref> with Reiter's solution to the frame problem (Reiter 1991)| enhanced with predicates to describe agents' knowledge (Scherl & Levesque 1993) and goals|to formally, perspicuously, and systematically describe the effects of actions on the world and the mental states of agents.
Reference: <editor> In Meltzer, B., and Michie, D., eds., </editor> <booktitle> Machine Intelligence, </booktitle> <volume> volume 4. </volume> <publisher> Edinburgh, UK: Edinburgh University Press. </publisher> <pages> 463-502. </pages>
Reference: <author> McIlraith, S. A. </author> <year> 1997. </year> <title> Towards a Formal Account of Diagnostic Problem Solving. </title> <type> Ph.D. Dissertation, </type> <institution> Department of Computer Science, University of Toronto, Toronto, </institution> <note> ON. </note>
Reference: <author> Moore, R. C. </author> <year> 1985. </year> <title> A formal theory of knowledge and action. </title> <editor> In Hobbs, J. R., and Moore, R. C., eds., </editor> <title> Formal Theories of the Common Sense World. </title> <address> Norwood, NJ: </address> <publisher> Ablex Publishing. </publisher> <pages> 319-358. </pages>
Reference-contexts: Note that in this definition and elsewhere, we overload the &lt; and operators, using them to relate times as well as situations. For other approaches to adding time to the situation calculus, see (Pinto & Reiter 1993; Reiter 1996). 4 Mental Attitudes 4.1 Knowledge Moore <ref> (Moore 1985) </ref> showed how agents' knowledge could be modelled in the situation calculus by adapting the possible worlds model of knowledge to the situation calculus. We adopt his approach, using the notation of (Scherl & Levesque 1993). <p> ^ H (agt; oe; s 0 ; s) ) (oe; s 0 )) 7 Since our language contains functions (e.g., inform) and predicates that take a formula as an argument, we assume that we have an axiomatization of formulae as terms of the language, such as the one given in <ref> (Moore 1985) </ref>.
Reference: <author> Pinto, J., and Reiter, R. </author> <year> 1993. </year> <title> Adding a time line to the situation calculus. </title> <booktitle> In The Second Symposium on Logical Formalizations of Commonsense Reasoning, </booktitle> <pages> 172-177. </pages>
Reference: <author> Rao, A. S., and Georgeff, M. P. </author> <year> 1991. </year> <title> Modeling rational agents within a BDI-architecture. </title> <editor> In Fikes, R., and Sandewall, E., eds., </editor> <booktitle> Proceedings of Knowledge Representation and Reasoning (KR&R-91), </booktitle> <pages> 473-484. </pages> <publisher> Morgan Kaufmann Publishers: </publisher> <address> San Mateo, CA. </address>
Reference: <author> Reiter, R. </author> <year> 1991. </year> <title> The frame problem in the situation calculus: A simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In Lifschitz, V., ed., </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy. </booktitle> <address> San Diego, CA: </address> <publisher> Academic Press. </publisher> <pages> 359-380. </pages>
Reference-contexts: In this paper, we explore a middle ground. We use the situation calculus (McCarthy & Hayes 1979) with Reiter's solution to the frame problem <ref> (Reiter 1991) </ref>| enhanced with predicates to describe agents' knowledge (Scherl & Levesque 1993) and goals|to formally, perspicuously, and systematically describe the effects of actions on the world and the mental states of agents. We add inform and request actions as primitive situation calculus actions to model inter-agent communication. <p> We reformulate the meeting scheduler application described in (Lesperance et al. 1996) in this enhanced framework. 2 Theory of action Our action theory is based on an extended version of the situation calculus <ref> (Reiter 1991) </ref>, a predicate calculus dialect for representing dynamically changing worlds. In this formalism, the world is taken to be in a certain situation. That situation can only change as a result of an agent performing an action. <p> We adopt Reiter's <ref> (Reiter 1991) </ref> solution to the frame problem, 2 which shows how one can transform axioms defining the effects of actions on fluents into a set of successor state axioms, one for each fluent, that imply the effect axioms as well as all the frame axioms.

Reference: <author> Singh, M. P. </author> <year> 1994. </year> <title> Multiagent Systems: A Theoretical Framework for Intentions, </title> <booktitle> Know-How, and Communications (LNAI Volume 799). </booktitle> <publisher> Springer-Verlag: </publisher> <address> Heidelberg, Germany. </address>
References-found: 16

