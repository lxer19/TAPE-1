URL: http://www.cse.psu.edu/~ugrain/vlsi-cad/CAD/glsvlsi95.ps
Refering-URL: http://www.cse.psu.edu/~ugrain/publications.html
Root-URL: 
Email: info.pub.permission@ieee.org.  
Title: promotional purposes or for creating new collective works for  
Note: Copyright c fl1995 IEEE. All rights reserved. Personal use of this material is permitted. However, permission to reprint/republish this material for advertising or  resale or redistribution must be obtained from the IEEE. For information on obtaining permission, send a blank email mes sage to  By choosing to view this document, you agree to all provisions of the copyright laws protecting it.  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> C. J. Alpert, T. C. Hu, J. H. Huang, and A. B. Kahng. </author> <title> A Direct Combination of the Prim and Dijkstra Constructions for Improved Performance Driven Global Routing. </title> <booktitle> In Proccedings of IEEE ISCAS, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Cong et al, in [6] and Cohoon et al [5] first proposed performance oriented routing using a linear delay model. Both of these approaches considered the problem of minimizing the radius of the routing tree. Alpert et al <ref> [1] </ref> combined Kruskal's MST construction and Dijkstra's shortest path construction to generate better global performance driven routing which minimizes the radius of the net. In [7] the authors formulate performance driven routing along with wire-sizing for minimizing distributed RC-tree delay.
Reference: [2] <author> K. D. Boese, A. B. Kahng, and G. Robins. </author> <title> High-Performance Routing Trees with Identified Critical Sinks. </title> <booktitle> In Proccedings of DAC, </booktitle> <pages> pages 182-187, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Therefore, instead of minimizing the average delay to all the sinks, a heuristic should fl this work was partially supported by NSF grant no. CDA-8914587 concentrate on minimizing the delay to certain identified critical sinks. Boese et al, in <ref> [2] </ref> developed a routing heuristic for minimizing the the Elmore delay to identified critical sinks. They first find the critical paths in the routing tree and then minimizes the Elmore delay along the critical paths, while minimizing the total length of the tree in other parts. <p> The algorithm based on Dreyfus-Wagner's method has exponential time complexity which makes it impractical for reasonable sized nets. The CFD algorithm has asymptotic complexity fi (n 3 ). The performance oriented routing algorithm described in this paper is based on a similar idea as in <ref> [2] </ref>, i.e., we identify the critical paths in the routing tree and concentrate on minimizing the delay for the critical sinks while minimizing the wire length for the non-critical sinks. Our algorithm has O (n 2 ) implementation using conventional data structures such as linear arrays and adjacency lists. <p> Some issues involved in incorporating the algorithm into a performance driven module generator are discussed along with results from real circuit examples in section 5. Finally, conclusions are drawn in section 6. 2. THE TIMING MODEL AND PROBLEM FORMULATION We use the Elmore delay model used in <ref> [2] </ref> to formulate the performance driven routing problem in this paper. <p> Therefore, the second term of equation 1 is proportional to the square of the length of the wire segment between n 0 and n i <ref> [2] </ref>. This quadratic dependency suggests that in order to minimize the Elmore delay for a given critical sink, the length of the path between the source and the critical sink should be minimized. The capacitance of the subtrees near the sink gets multiplied by a larger resistance. <p> Removing e 2 results in the new Steiner tree of Figure 1 (b) which has a cost smaller than the original tree by gain = cost (e 2 ) cost (e) (2) 1 typically, r d = 100 and r wire = 0:03=m for IC's <ref> [2] </ref> 2 Lewis et al, in [14] also independently proposed a somewhat similar heuristic for Steiner routing and gave an O (n 4 ) algorithm for computing the Steiner tree Different cost criteria may be used depending on the objective. <p> The batched 1-Steiner algo- rithm, which has a faster implementation with O (n 3 ) asymptotic time complexity, produces results comparable to the iterated version of the same heuristic [12]. The approach of <ref> [2] </ref> starts with a 1-Steiner tree and applies Elmore delay optimizations along the critical paths, therefore has the same characteristics as that of 1-Steiner heuristic (both running time and quality of route) when no critical paths are introduced.
Reference: [3] <author> M. Borah, R. M. Owens, and M. J. Irwin. </author> <title> An Edge-Based Heuristic for Steiner Routing. </title> <journal> IEEE Transactions on CAD, </journal> <volume> 13(12) </volume> <pages> 1563-1568, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: THE PERFORMANCE DRIVEN STEINER ROUTING ALGORITHM The basic heuristic of our algorithm considers adding an edge to the existing tree as a replacement for another, costlier edge <ref> [3] </ref>. We call our heuristic the ER-heuristic 2 . Consider the tree fragment in Figure 1. <p> Thus, our ER-Steiner pro duces routes comparable to the best reported heuristic while running an order of magnitude faster than the best reported algorithm. Details of our edge-based algorithm and comparisons are given in <ref> [3] </ref>. 3.2. Timing driven routing for a source-sink pair In this phase the cost criteria is to minimize the source to sink Elmore delay. <p> Since a planar graph has only a linear number of edges, the result follows. Lemma 2: The asymptotic time complexity of the PER-Steiner algorithm is O (n 2 ). Proof: The ER-Steiner algorithm in Figure 2 has O (n 2 ) time complexity <ref> [3] </ref>. Sorting the points along x and y-direction re quires O (n 2 ) time. The walk algorithm takes O (n) time for each sink; the total time required for k such sinks is O (kn); since k &lt; n this is O (n 2 ).
Reference: [4] <author> T. H. Chao and Y. C. Hsu. </author> <title> Rectilinear Steiner Tree Construction by Local and Global Refinement. </title> <booktitle> In Proceedings of ICCAD, </booktitle> <volume> volume 9, </volume> <pages> pages 432-435, </pages> <year> 1990. </year>
Reference-contexts: The advantage of using a Steiner tree is that it minimized the total length of wire required to connect the set of points together. Many algorithms have been published for producing good approximation to a minimum rectilinear Steiner tree <ref> [9, 12, 4, 14, 11, 16] </ref>. As minimum feature size decreases and circuit size and complexity increases, wire delay becomes dominant. Cong et al, in [6] and Cohoon et al [5] first proposed performance oriented routing using a linear delay model.
Reference: [5] <author> J. P. Cohoon and L. J. Randall. </author> <title> Critical Net Routing. </title> <booktitle> Proceedings of ICCD, </booktitle> <pages> pages 174-179, </pages> <year> 1991. </year>
Reference-contexts: Many algorithms have been published for producing good approximation to a minimum rectilinear Steiner tree [9, 12, 4, 14, 11, 16]. As minimum feature size decreases and circuit size and complexity increases, wire delay becomes dominant. Cong et al, in [6] and Cohoon et al <ref> [5] </ref> first proposed performance oriented routing using a linear delay model. Both of these approaches considered the problem of minimizing the radius of the routing tree.
Reference: [6] <author> J. Cong, A. B. Kahng, G. Robins, M. Sarrafzadeh, and C. K. Wong. </author> <title> Performance Driven Global Routing for Cell Based ICs. </title> <booktitle> Proceedings of ICCD, </booktitle> <pages> pages 170-173, </pages> <year> 1991. </year>
Reference-contexts: Many algorithms have been published for producing good approximation to a minimum rectilinear Steiner tree [9, 12, 4, 14, 11, 16]. As minimum feature size decreases and circuit size and complexity increases, wire delay becomes dominant. Cong et al, in <ref> [6] </ref> and Cohoon et al [5] first proposed performance oriented routing using a linear delay model. Both of these approaches considered the problem of minimizing the radius of the routing tree.
Reference: [7] <author> J. Cong, K. S. Leung, and D. Zhou. </author> <title> Performance-driven Interconnect Design Based on Distributed RC Delay Model. </title> <booktitle> In Proccedings of DAC, </booktitle> <pages> pages 606-611, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Both of these approaches considered the problem of minimizing the radius of the routing tree. Alpert et al [1] combined Kruskal's MST construction and Dijkstra's shortest path construction to generate better global performance driven routing which minimizes the radius of the net. In <ref> [7] </ref> the authors formulate performance driven routing along with wire-sizing for minimizing distributed RC-tree delay. Their formulation also revealed the importance of minimizing both the radius and the total length of the tree.
Reference: [8] <author> J. Griffith, G. Robins, J. S. Salowe, and T. Zhang. </author> <title> Closing the Gap: Near-Optimal Steiner Trees in Polynomial Time. </title> <journal> IEEE Transactions on CAD, </journal> <volume> 13(11) </volume> <pages> 1351-1365, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: then call update (p; e 1 ; e 2 ; g) end-if end-while end The pseudo-code of the ER-Steiner algorithm is given in O (n 2 ) complexity and the quality of the route produced is comparable to the batched 1-Steiner heuristic, which is shown to produce very good routes <ref> [12, 8] </ref> and has an implementation with O (n 3 ) running time. Thus, our ER-Steiner pro duces routes comparable to the best reported heuristic while running an order of magnitude faster than the best reported algorithm. Details of our edge-based algorithm and comparisons are given in [3]. 3.2.
Reference: [9] <author> J. M. Ho, G. Vijayan, and C. K. Wong. </author> <title> New Algorithms for the Rectilinear Steiner Tree Problem. </title> <journal> IEEE Transactions on CAD, </journal> <volume> 9(2) </volume> <pages> 185-193, </pages> <year> 1990. </year>
Reference-contexts: The advantage of using a Steiner tree is that it minimized the total length of wire required to connect the set of points together. Many algorithms have been published for producing good approximation to a minimum rectilinear Steiner tree <ref> [9, 12, 4, 14, 11, 16] </ref>. As minimum feature size decreases and circuit size and complexity increases, wire delay becomes dominant. Cong et al, in [6] and Cohoon et al [5] first proposed performance oriented routing using a linear delay model. <p> We generated the layout for a few circuits using Perflex with three different routing algorithms: (1) Simple edge merging <ref> [9] </ref> (2) ER-Steiner algorithm (3) PER-Steiner algorithm A comparison of the total wire length, area and critical path length for the circuits using the three routing schemes are presented in Table 3. For all the circuits reduction in the total wire length is obtained using (2) as compared to (1).
Reference: [10] <author> X. Hong, T. Xue, E. S. Kuh, C. K. Cheng, and J. Huang. </author> <title> Performance-Driven Steiner Tree Algorithm For Global Routing. </title> <booktitle> In Proceedings of DAC, </booktitle> <pages> pages 177-181, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Their approach is incremental, based on Prim's minimum spanning tree algorithm where they consider the criticality of the edges while constructing the tree. Their algorithm has an asymptotic time complexity of fi (n 3 ), where n = jP j, the size of the point-set. Hong et al <ref> [10] </ref> also proposed timing driven routing based on the wire delay model of [18]. They developed two algorithms, one derived from Dreyfus-Wagner's dynamic programming method and the other, the Constructive Force Directed algorithm, based on Kruskal's minimum spanning tree (MST) algorithm.
Reference: [11] <author> F. K. Hwang. </author> <title> On Steiner minimal Trees with Rectilinear Distance. </title> <journal> SIAM Journal of Applied Mathematics, </journal> <volume> 30(1) </volume> <pages> 104-114, </pages> <year> 1976. </year>
Reference-contexts: The advantage of using a Steiner tree is that it minimized the total length of wire required to connect the set of points together. Many algorithms have been published for producing good approximation to a minimum rectilinear Steiner tree <ref> [9, 12, 4, 14, 11, 16] </ref>. As minimum feature size decreases and circuit size and complexity increases, wire delay becomes dominant. Cong et al, in [6] and Cohoon et al [5] first proposed performance oriented routing using a linear delay model.
Reference: [12] <author> A. B. Kahng and G. Robins. </author> <title> A New Class of Steiner Tree Heuristics with Good Performance: the Iterated 1-steiner Approach. </title> <booktitle> In Proceedings of ICCAD, </booktitle> <volume> volume 9, </volume> <pages> pages 428-431, </pages> <year> 1990. </year>
Reference-contexts: The advantage of using a Steiner tree is that it minimized the total length of wire required to connect the set of points together. Many algorithms have been published for producing good approximation to a minimum rectilinear Steiner tree <ref> [9, 12, 4, 14, 11, 16] </ref>. As minimum feature size decreases and circuit size and complexity increases, wire delay becomes dominant. Cong et al, in [6] and Cohoon et al [5] first proposed performance oriented routing using a linear delay model. <p> then call update (p; e 1 ; e 2 ; g) end-if end-while end The pseudo-code of the ER-Steiner algorithm is given in O (n 2 ) complexity and the quality of the route produced is comparable to the batched 1-Steiner heuristic, which is shown to produce very good routes <ref> [12, 8] </ref> and has an implementation with O (n 3 ) running time. Thus, our ER-Steiner pro duces routes comparable to the best reported heuristic while running an order of magnitude faster than the best reported algorithm. Details of our edge-based algorithm and comparisons are given in [3]. 3.2. <p> Since the total number of pairs of nodes to be connected is linear (lemma 1), this step takes O (n 2 ) time. Finally, another iter ation of the edge-based algorithm requires O (n 2 ) time. 4. EXPERIMENTAL RESULTS The iterated 1-Steiner algorithm <ref> [12] </ref> is known to produce the best results in terms of the average improvements over the minimum spanning tree among the algorithms with known polynomial time complexity [17]. <p> The batched 1-Steiner algo- rithm, which has a faster implementation with O (n 3 ) asymptotic time complexity, produces results comparable to the iterated version of the same heuristic <ref> [12] </ref>. The approach of [2] starts with a 1-Steiner tree and applies Elmore delay optimizations along the critical paths, therefore has the same characteristics as that of 1-Steiner heuristic (both running time and quality of route) when no critical paths are introduced. <p> The results are summarized in Table 1. Table 1: Comparison of average improvement over MST and running time net-size Batched ER-Steiner Batched 1-Steiner <ref> [12] </ref> imprv (%) time (s) imprv (%) time (s) 4 8.63 .001 8.63 .002 6 10.03 .0025 10.03 .013 10 10.33 .0064 10.36 .059 30 10.64 .096 10.66 3.65 100 10.84 1.17 10.89 52.3 500 10.96 40.0 11.04 95 min The second and the fourth columns show the percent improvements over
Reference: [13] <author> S. Kim, R. M. Owens, and M. J. Irwin. </author> <title> A Module Generator for High Performance CMOS Circuits. </title> <booktitle> In Proceedings of IEEE ISCAS, </booktitle> <volume> volume 3, </volume> <pages> pages 1266-1269, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: The time required is a constant factor more than that of the ER-Steiner time. When the size of the net increases, the cost increase due to critical path optimization becomes negligible. 5. INCORPORATING PER-STEINER INTO A PERFORMANCE DRIVEN MODULE GENERATOR We incorporated the PER-Steiner algorithm into Perflex <ref> [13] </ref>, a high-performance CMOS module generator tool. Several issues that had to be addressed for this implementation are discussed in brief here. Generating the critical paths: In real circuits the critical paths are to be generated based on actual gate delays, input arrivals times and output requirements. <p> Minimizing `slow' wires: Poly-silicon is more resistive than metal wires while diffusion is the most resistive. Therefore while routing, use of diffusion or poly-silicon should be minimized. The layout style of Perflex <ref> [13] </ref> uses minimal diffusion runs and reduces the use of poly-silicon by placing transistors driven by the same signal closer to one another and using metal-1 to connect the p-block and n-block poly-silicon runs of the same signal in a given row of gates together.
Reference: [14] <author> F. D. Lewis, W. C. Pong, and N. Van-Cleave. </author> <title> Local Improvements on Steiner Trees. </title> <booktitle> In Proceedings of 3rd Great Lakes Symp. on VLSI, </booktitle> <pages> pages 470-476, </pages> <year> 1993. </year>
Reference-contexts: The advantage of using a Steiner tree is that it minimized the total length of wire required to connect the set of points together. Many algorithms have been published for producing good approximation to a minimum rectilinear Steiner tree <ref> [9, 12, 4, 14, 11, 16] </ref>. As minimum feature size decreases and circuit size and complexity increases, wire delay becomes dominant. Cong et al, in [6] and Cohoon et al [5] first proposed performance oriented routing using a linear delay model. <p> e 2 results in the new Steiner tree of Figure 1 (b) which has a cost smaller than the original tree by gain = cost (e 2 ) cost (e) (2) 1 typically, r d = 100 and r wire = 0:03=m for IC's [2] 2 Lewis et al, in <ref> [14] </ref> also independently proposed a somewhat similar heuristic for Steiner routing and gave an O (n 4 ) algorithm for computing the Steiner tree Different cost criteria may be used depending on the objective.
Reference: [15] <author> A. Lim, S. W. Cheng, and C. T. Wu. </author> <title> Performance Oriented Rectilinear Steiner Trees. </title> <booktitle> In Proccedings of DAC, </booktitle> <pages> pages 171-176, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Their algorithm has an asymptotic running time O (n 3 ) where n is the number of nodes in the net. In <ref> [15] </ref> Lim, Cheng and Wu formulated `performance oriented minimum rectilinear Steiner tree' and gave algorithm (POMRST-algorithm) to solve the problem. Their approach is incremental, based on Prim's minimum spanning tree algorithm where they consider the criticality of the edges while constructing the tree. <p> The approach of [2] starts with a 1-Steiner tree and applies Elmore delay optimizations along the critical paths, therefore has the same characteristics as that of 1-Steiner heuristic (both running time and quality of route) when no critical paths are introduced. The authors <ref> [15] </ref> also claimed that their algorithm produced routes comparable to the 1-Steiner heuristic when no critical paths are introduced.
Reference: [16] <author> V. Ramayier and P. Berman. </author> <title> Improved Approximation for the Steiner Tree Problem. </title> <booktitle> Symposium of Discrete Algorithms, </booktitle> <month> Jan </month> <year> 1992. </year>
Reference-contexts: The advantage of using a Steiner tree is that it minimized the total length of wire required to connect the set of points together. Many algorithms have been published for producing good approximation to a minimum rectilinear Steiner tree <ref> [9, 12, 4, 14, 11, 16] </ref>. As minimum feature size decreases and circuit size and complexity increases, wire delay becomes dominant. Cong et al, in [6] and Cohoon et al [5] first proposed performance oriented routing using a linear delay model.
Reference: [17] <author> D. Richards, F. K. Hwang, and W. Winter. </author> <title> Steiner Tree Problems, chapter 2. </title> <publisher> North Holland, </publisher> <year> 1992. </year>
Reference-contexts: Finally, another iter ation of the edge-based algorithm requires O (n 2 ) time. 4. EXPERIMENTAL RESULTS The iterated 1-Steiner algorithm [12] is known to produce the best results in terms of the average improvements over the minimum spanning tree among the algorithms with known polynomial time complexity <ref> [17] </ref>. The batched 1-Steiner algo- rithm, which has a faster implementation with O (n 3 ) asymptotic time complexity, produces results comparable to the iterated version of the same heuristic [12].
Reference: [18] <author> T. Sakurai. </author> <title> Approximation of Wiring Delay in MOSFET LSI. </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> SC-18(4):418-426, </volume> <year> 1983. </year>
Reference-contexts: Their algorithm has an asymptotic time complexity of fi (n 3 ), where n = jP j, the size of the point-set. Hong et al [10] also proposed timing driven routing based on the wire delay model of <ref> [18] </ref>. They developed two algorithms, one derived from Dreyfus-Wagner's dynamic programming method and the other, the Constructive Force Directed algorithm, based on Kruskal's minimum spanning tree (MST) algorithm. The algorithm based on Dreyfus-Wagner's method has exponential time complexity which makes it impractical for reasonable sized nets.
Reference: [19] <author> A. Vittal and M. Marek-Sadowska. </author> <title> Minimal Delay Interconnect Design Using Alphabetic Trees. </title> <booktitle> In Proceedings of DAC, </booktitle> <pages> pages 392-396, </pages> <year> 1994. </year>
Reference-contexts: In [7] the authors formulate performance driven routing along with wire-sizing for minimizing distributed RC-tree delay. Their formulation also revealed the importance of minimizing both the radius and the total length of the tree. Recently Vittal et al <ref> [19] </ref> developed a performance oriented routing algorithm using alphabetic trees which has an O (n 2 ) time complexity. Their approach is based on a global routing strategy that minimizes the average Elmore delay to all the sinks.
References-found: 19

