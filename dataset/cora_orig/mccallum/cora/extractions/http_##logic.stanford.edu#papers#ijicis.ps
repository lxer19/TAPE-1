URL: http://logic.stanford.edu/papers/ijicis.ps
Refering-URL: http://logic.stanford.edu/papers/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A DISTRIBUTED AND ANONYMOUS KNOWLEDGE SHARING APPROACH TO SOFTWARE INTEROPERATION  
Author: NARINDER SINGH MICHAEL GENESERETH and MUSTAFA SYED 
Keyword: agents, knowledge-sharing, software interoperation, specification sharing, declarative interfaces  
Date: Received March 22 Revised June 14, 1995  
Address: Stanford, California 94305, USA  Stanford, California 94305, USA  Stanford, California 94305, USA  
Affiliation: Computer Science Department, Stanford University  Computer Science Department, Stanford University  Computer Science Department, Stanford University  
Abstract: The support for automatic interoperation of software components can reduce cost and provide greater functionality. This paper describes a novel approach to software interoperation based on specification sharing. Software components, called agents, provide machine processable descriptions of their capabilities and needs. Agents can be realized in different programming languages, and they can run in different processes on different machines. In addition, agents can be dynamic at run time agents can join the system or leave. The system uses the declarative agent specifications to automatically coordinate their interoperation. The architecture supports anonymous inter-operation of agents, where each agent has the illusion that the capabilities of all the other agents are provided directly by the system. The distinctive feature of this approach is the expressiveness of the declarative specification language, which enables sophisticated agent interoperation, e.g., decomposing complex requests into a collection of simpler requests, and translating between the interface of a requesting agent and the interface of an agent that can service the request. The agent-based interoperation scheme relies on a shared vocabulary, and it is our thesis that more effective software interoper-ation is made possible by agreeing to a shared declarative vocabulary, than by agreeing to procedural interface specifications that do not address the semantics of the software component (e.g., object interface specifications in an object-oriented programming environment). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Betz, M., </author> <title> "OMG's CORBA," </title> <journal> Dr. </journal> <note> Dobb's Special Report, Winter 1994/95. </note>
Reference-contexts: The CORBA model <ref> [1, 2, 23] </ref> provides a number of system services that enables a client to find a reference to an object at runtime. Each server object publishes its interface to the Interface Repository (IR) using CORBA's Interface Definition Language (IDL).
Reference: [2] <author> The Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <booktitle> Revision 1.1 91.12.1, </booktitle> <month> December, </month> <year> 1991. </year>
Reference-contexts: Before giving an overview of the approach we briefly look at the role of traditional object-oriented systems. A number of object-oriented technologies have been developed to support inter-operation among applications distributed in an enterprise (e.g., CORBA <ref> [2, 18, 17] </ref>). 2 They enable objects residing in one application to be accessed by objects residing in another. They also enable an entire application to be represented as a single object. <p> The CORBA model <ref> [1, 2, 23] </ref> provides a number of system services that enables a client to find a reference to an object at runtime. Each server object publishes its interface to the Interface Repository (IR) using CORBA's Interface Definition Language (IDL).
Reference: [3] <author> Cutkosky, M. et al. </author> <title> "PACT: An Experiment in Integrated Engineering Systems," </title> <journal> Computer 26, </journal> <volume> 1(1993), </volume> <pages> 28-37. </pages>
Reference-contexts: This requires manual coordination between programmers in a standard CORBA-like environment to agree on the meaning of interfaces. In a large setting, no human can have such global knowledge, and the traditional coordination approaches break down. Our PACT (Palo Alto Collaboration Testbed) experiment <ref> [3] </ref> is an example of loosely coupled coordination, where programmers were not aware of the specifics of each programmers interface. PACT included tens of programmers from different departments at Stanford and industry. The multi-mode simulation system for robotic assemblies was quickly realized in a few months. <p> This system has been used in a collection of interopera-tion experiments over the years, including: Designworld [6] (an integrated design, manufacture, and diagnosis system for digital circuits), PACT <ref> [3] </ref> (a multi-domain simulation of a robotic arm), and integrated CAD tools civil engineering [14]. It is being used currently in the CommerceNet project [26], which provides smart search for product information using heterogeneous online catalogs, ordering, billing, etc. <p> Conclusion The agent-based approach to software interoperation described here has been developed into a practical technology and has been put to use in a variety of applications necessitating interoperation (e.g. concurrent engineering <ref> [3] </ref>, database integration, and so forth) and is being used at multiple institutions in the construction of software for the national information infrastructure. 4 In order to provide these capabilities, current implementations of facilitators take advantage of automated reasoning technology developed in the Artificial Intelligence and Database communities.
Reference: [4] <author> Deschrevel, J. P., </author> <title> "The ANSA Model of Trading and Federation," Architecture Projects Management, </title> <address> Cambridge, </address> <year> 1993. </year>
Reference-contexts: Figure 3 illustrates this extension to IDL. In addition to supporting more expressive interface specification, ANSA also provides a system service called a trader <ref> [4] </ref>, that utilizes this information to facilitate interoperation. A server registers an interface specification (along with a collection of properties) with the trader, and clients make requests to the trader to help find a particular instance of a server.
Reference: [5] <author> Finin, T., and Wiederhold, G. </author> <title> "An Overview of KQML: A Knowledge Query and Manipulation Language," </title> <institution> available through the Stanford University Computer Science Department, </institution> <year> 1991. </year>
Reference-contexts: However, credit for these standardization efforts rests with a large group of researchers who have contributed to these efforts. The complete list of contributors can be found in the references <ref> [5, 7, 12] </ref>. 10 ontologies. The ontologies form nodes in a directed acyclic graph, and the NSCG maps the symbols used in one ontology into the symbols used in the other. 4.2. KIF KIF [7] is the content language of ACL. <p> There is no change in the state of the receiver if it already knows the fact being asserted, and therefore asserting a fact twice serves no purpose (if there is no intervening retraction). As used in ACL, each KQML message is a list of components enclosed in matching parentheses <ref> [5] </ref>. The first word in the list indicates the type of communication. The subsequent entries are KIF expressions appropriate to that communication, in effect the "arguments".
Reference: [6] <author> Genesereth, M., "Designworld," </author> <booktitle> in the Proceedings of the 1991 IEEE International Conference on Robotics and Automation, </booktitle> <address> Sacramento, California, </address> <month> April </month> <year> 1991, </year> <pages> pp. 2785-2788. </pages>
Reference-contexts: There may be a limit to the number of facts that a facilitator records it may flush some facts when a space limit is reached. Throwing away information may lead to incompleteness, but this may be unavoidable due to storage limitations. In our experiments with the Designworld system <ref> [6] </ref> the facilitator is told a large number of facts about the decisions made by designers and automated design tools. For example, it is told the location of a chip as decided by the automatic placement and routing tool. <p> Status The Logic Group in the Computer Science Department, in conjunction with the HP Labs in Palo Alto California, has been developing the facilitation architecture over the last five years. This system has been used in a collection of interopera-tion experiments over the years, including: Designworld <ref> [6] </ref> (an integrated design, manufacture, and diagnosis system for digital circuits), PACT [3] (a multi-domain simulation of a robotic arm), and integrated CAD tools civil engineering [14].
Reference: [7] <author> Genesereth, M. R., Fikes, R. E. et al. </author> " <title> Knowledge Interchange Format Version 3 Reference Manual," </title> <institution> Logic-92-1, Stanford University Logic Group, </institution> <year> 1992. </year>
Reference-contexts: However, credit for these standardization efforts rests with a large group of researchers who have contributed to these efforts. The complete list of contributors can be found in the references <ref> [5, 7, 12] </ref>. 10 ontologies. The ontologies form nodes in a directed acyclic graph, and the NSCG maps the symbols used in one ontology into the symbols used in the other. 4.2. KIF KIF [7] is the content language of ACL. <p> The complete list of contributors can be found in the references [5, 7, 12]. 10 ontologies. The ontologies form nodes in a directed acyclic graph, and the NSCG maps the symbols used in one ontology into the symbols used in the other. 4.2. KIF KIF <ref> [7] </ref> is the content language of ACL.
Reference: [8] <author> Genesereth, M. R. and Ketchpel, S. </author> <title> "Software Agents," </title> <journal> Communications of the ACM, </journal> <volume> Vol 37, no. 7, </volume> <month> July </month> <year> 1994, </year> <pages> pp. 48-53. </pages>
Reference: [9] <author> Genesereth, M. R. and Singh, N. </author> <title> "A Knowledge Sharing Approach to Software Interoperation," Logic Group, </title> <institution> Computer Science Department, Stanford University, </institution> <year> 1993. </year>
Reference: [10] <author> Genesereth, M. R., and Singh, N. </author> <title> "Epilog 1.0 for Lisp," </title> <note> available from http://Logic.Stanford.edu/sharing/programs/epilog/documentation/. </note>
Reference-contexts: There are a collection of inference procedures that the facilitator can be configured to use, ranging from simple database lookup to model-elimination. The model-elimination inference procedure is an extension of the familiar backward chaining inference rule used in Prolog <ref> [10, 21] </ref>. The extensions permit model-elimination to be complete for first-order logic. For a request, the facilitator uses backward inference to find an answer.
Reference: [11] <author> Gymtrasiewicz, P. J., Durfee, E. H. and Wehe, D. K. </author> <title> "A Decision-Theoretic Approach to Coordinating Multiagent Interactions," </title> <booktitle> in Proceedings of the Twelfth International Joint Conference On Artificial Intelligence (Sydney, Australia 1991). International Joint Conferences on Artificial Intelligence, </booktitle> <publisher> Inc. </publisher> <pages> pp. 62-68. </pages>
Reference-contexts: These problems mark the intersection of economics and distributed artificial intelligence (DAI). A number of researchers in DAI are using tools developed in economics and game theory to evaluate multi-agent interactions <ref> [25, 11] </ref>. We are currently examining extensions to the Federation Architecture to incorporate some of these capabilities. In this paper, we have taken a brief look at how agent technology can be used to promote software interoperation.
Reference: [12] <author> Gruber, T. "Ontolingua: </author> <title> A Mechanism to Support Portable Ontologies," </title> <institution> KSL-91-66, Stanford Knowledge Systems Laboratory, </institution> <year> 1991. </year>
Reference-contexts: The meaning of words must be unambiguous, i.e., two agents cannot use the same word to refer to different things. The vocabulary of ACL is listed in a large and open-ended dictionary of words appropriate to common application areas <ref> [12] </ref>. Each word in the dictionary has an English description for use by humans in understanding the meaning of the word; and each word has formal annotations (written in KIF) for use by programs. <p> However, in a large setting, this will be impossible. More than likely, different communities will assign different meanings to the same symbols, and such an environment requires the support of multiple vocabularies. We have experimented with two systems to support multiple vocabularies. Initially we used the Ontolingua system <ref> [12] </ref> to define a collection of ontologies, and recently we have developed a system based on a Name Space Context Graph (NSCG) [22], which focuses on the issue of communication between components that use different worked closely with the members of the Ontology Group. <p> However, credit for these standardization efforts rests with a large group of researchers who have contributed to these efforts. The complete list of contributors can be found in the references <ref> [5, 7, 12] </ref>. 10 ontologies. The ontologies form nodes in a directed acyclic graph, and the NSCG maps the symbols used in one ontology into the symbols used in the other. 4.2. KIF KIF [7] is the content language of ACL.
Reference: [13] <author> Herbert, A., </author> <title> "An ANSA Overview," </title> <journal> IEEE Network, </journal> <month> January/February </month> <year> 1994, </year> <pages> pp. 18-23. </pages>
Reference-contexts: Interface PrintServer f void PrintPostscript (in file theFile) Properties: f Building : fA, : : :, Fg Floor : f1, : : :, 5g size8by11 : ftrue, falseg size11by17 : ftrue, falseg color : ftrue, falseg g Interface WordServices f void TranslateWordToPostscript (in file wordFile, out file postscriptFile) g cations <ref> [13] </ref>. ANSA recognized the limited expressiveness of IDL, and therefore, a server can augment its specification with a collection of properties (name/value pairs). Properties provide semantic information that describe different instances of a service.
Reference: [14] <author> Khedro, T., and Genesereth, M., </author> <title> "The Federation Architecture for Interoper-able Agent-Based Concurrent Engineering Systems," </title> <journal> International Journal on Concurrent Engineering, Research and Applications, </journal> <volume> Volume 2, </volume> <pages> pp. 125-131, </pages> <year> 1994. </year>
Reference-contexts: This system has been used in a collection of interopera-tion experiments over the years, including: Designworld [6] (an integrated design, manufacture, and diagnosis system for digital circuits), PACT [3] (a multi-domain simulation of a robotic arm), and integrated CAD tools civil engineering <ref> [14] </ref>. It is being used currently in the CommerceNet project [26], which provides smart search for product information using heterogeneous online catalogs, ordering, billing, etc. There are a collection of papers describing the system details, and their is source code available for the facilitator.
Reference: [15] <author> Korf, R. E. </author> <title> "Linear-space Best-first Search: Summary of Results," </title> <booktitle> in Proceedings of the Tenth National Conference on Artificial Intelligence (AAAI-92), </booktitle> <pages> pages 533-538, </pages> <address> Menlo Park, California, 1992. </address> <publisher> AAAI Press. </publisher> <pages> 28 </pages>
Reference-contexts: In addition, the facilitator controls the inference process by selecting the cheapest agent to handle a request (conjunct and/or disjunct ordering), and avoids infinite loops (with identical-ancestor pruning and/or iterative-deepening) <ref> [20, 15] </ref>.
Reference: [16] <author> Neches, R., Fikes, R., Finin, T., Gruber, T., Patil, R., Senator, T., and Swartout, W. </author> <title> "Enabling Technology for Knowledge Sharing," </title> <journal> AI Magazine 12, </journal> <volume> 3(1991), </volume> <pages> 36-56. </pages> <note> [17] "Object Linking and Embedding," Microsoft Technical Backgrounder OLE 2.0. </note>
Reference-contexts: At the same time, the language must be reasonably compact; it must ensure that communication is possible without excessive growth over specialized languages. As an exploration of this approach to communication, researchers in the ARPA Knowledge Sharing Effort <ref> [16] </ref> have defined the components of ACL that satisfy these needs. 1 1 The authors have worked directly on the standardization efforts for KIF and KQML, and have 9 ACL can best be thought of as consisting of three parts its vocabulary, an "in-ner language" called KIF (short for Knowledge Interchange
Reference: [18] <author> Microsoft Corporation, </author> <title> OLE 2 Programmer's Reference: Creating Programmable Applications with OLE Automation, Volume 2, </title> <publisher> Microsoft Press, </publisher> <address> Red-mond, Wash., </address> <year> 1994. </year> <title> [19] "OpenDoc Technical Summary," The OpenDoc Design Team, Apple Computers, </title> <address> Cupertino, California, </address> <month> October, </month> <year> 1993. </year>
Reference-contexts: Before giving an overview of the approach we briefly look at the role of traditional object-oriented systems. A number of object-oriented technologies have been developed to support inter-operation among applications distributed in an enterprise (e.g., CORBA <ref> [2, 18, 17] </ref>). 2 They enable objects residing in one application to be accessed by objects residing in another. They also enable an entire application to be represented as a single object.
Reference: [20] <author> Smith, D. E., Genesereth, M. R., and Ginsberg, M. L. </author> <title> "Controlling Recursive Inference," </title> <journal> Artificial Intelligence, </journal> <volume> 30 (3): </volume> <pages> 343-389, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: In addition, the facilitator controls the inference process by selecting the cheapest agent to handle a request (conjunct and/or disjunct ordering), and avoids infinite loops (with identical-ancestor pruning and/or iterative-deepening) <ref> [20, 15] </ref>.
Reference: [21] <author> Stickel, M. E. </author> <title> "A Prolog Technology Theorem Prover: A New Exposition and Implementation in Prolog," </title> <type> Technical Note 464, </type> <institution> SRI International, </institution> <month> June </month> <year> 1989. </year>
Reference-contexts: There are a collection of inference procedures that the facilitator can be configured to use, ranging from simple database lookup to model-elimination. The model-elimination inference procedure is an extension of the familiar backward chaining inference rule used in Prolog <ref> [10, 21] </ref>. The extensions permit model-elimination to be complete for first-order logic. For a request, the facilitator uses backward inference to find an answer.
Reference: [22] <author> Tawakol, O., and Singh, N. </author> <title> "A Name Space Context Graph for Multi-Context Systems," </title> <institution> Logic-95-1, Stanford University Logic Group, </institution> <year> 1995. </year>
Reference-contexts: We have experimented with two systems to support multiple vocabularies. Initially we used the Ontolingua system [12] to define a collection of ontologies, and recently we have developed a system based on a Name Space Context Graph (NSCG) <ref> [22] </ref>, which focuses on the issue of communication between components that use different worked closely with the members of the Ontology Group. However, credit for these standardization efforts rests with a large group of researchers who have contributed to these efforts.
Reference: [23] <author> Vinoski, S., </author> <title> "Distributed Object Computing with CORBA," </title> <type> C++ Report, </type> <month> July/August </month> <year> 1993. </year>
Reference-contexts: The CORBA model <ref> [1, 2, 23] </ref> provides a number of system services that enables a client to find a reference to an object at runtime. Each server object publishes its interface to the Interface Repository (IR) using CORBA's Interface Definition Language (IDL).
Reference: [24] <author> Wiederhold, G. </author> <title> "The Architecture of Future Information Systems, </title> <institution> Stanford University Computer Science Department," </institution> <year> 1989. </year>
Reference: [25] <author> Zlotkin, G. </author> <title> "Mechanisms for Automated Negotiation among Autonomous Agents," </title> <type> Ph.D. Dissertation. </type> <institution> Hebrew University. </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: These problems mark the intersection of economics and distributed artificial intelligence (DAI). A number of researchers in DAI are using tools developed in economics and game theory to evaluate multi-agent interactions <ref> [25, 11] </ref>. We are currently examining extensions to the Federation Architecture to incorporate some of these capabilities. In this paper, we have taken a brief look at how agent technology can be used to promote software interoperation.
Reference: [26] <author> Wong, W., and Keller, A., </author> <title> "Developing an Internet Presence with Online Electronic Catalogs," </title> <institution> Stanford Center for Information Technology, </institution> <note> http://www-db.stanford.edu/pub/keller/1994/cnet-online-cat.ps 29 </note>
Reference-contexts: This was made possible by the loosely coupled interaction between programmers, which relied on a shared vocabulary. Each programmer was able to define/modify his own interface, as long as this was related to the shared vocabulary. Our current experiments in the CommerceNet project <ref> [26] </ref> also rely on such loosely coupled interaction between tens of vendors providing information about their catalog of products. In the future we plan to extend the CommerceNet system to handle other services (e.g., simulation, and board layout) using the same loosely coupled interaction. <p> It is being used currently in the CommerceNet project <ref> [26] </ref>, which provides smart search for product information using heterogeneous online catalogs, ordering, billing, etc. There are a collection of papers describing the system details, and their is source code available for the facilitator. In addition there is an API for the system in C and in Common Lisp.
References-found: 24

