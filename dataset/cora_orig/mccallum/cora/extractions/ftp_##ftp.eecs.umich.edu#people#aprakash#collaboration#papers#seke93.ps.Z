URL: ftp://ftp.eecs.umich.edu/people/aprakash/collaboration/papers/seke93.ps.Z
Refering-URL: http://www.eecs.umich.edu/~aprakash/jaegert/pubs.html
Root-URL: http://www.cs.umich.edu
Email: E-MAIL: jaegert@eecs.umich.edu and aprakash@eecs.umich.edu  
Title: BIZSPEC: A BUSINESS-ORIENTED MODEL FOR SPECIFICATION AND ANALYSIS OF OFFICE INFORMATION SYSTEMS  
Author: Trent Jaeger and Atul Prakash 
Address: Ann Arbor, MI 48109  
Affiliation: Software Systems Research Laboratory Department of EECS University of Michigan,  
Abstract: Normally, domain-independent methods, such as structure charts, data flow diagrams, and entity-relationship diagrams, are used to model the requirements of a business. We propose a model, called BizSpec, in which each logical business unit is defined using business-oriented concepts: forms, unit flows, and policy. This model has three advantages over domain-independent methods: 1) it uses business-oriented concepts to improve communication between the end users and the systems analysts, 2) it represents each logical business unit independently to help the end users examine their part of the system, and 3) its specifications are executable, so the end users and systems analysts can rapidly generate and analyze prototype systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Burnett and A. Ambler. </author> <title> Generalizing event detection and response in visual programming languages. </title> <type> Technical report, </type> <institution> Michigan Technological University, </institution> <year> 1991. </year>
Reference-contexts: BizSpec uses forms as the base concept in the model. Forms are used in a wide range of business processes, so they are, by nature, a general representation. Use of forms as a primitive has been proposed in several systems <ref> [1, 14, 4] </ref>. In these systems, the forms are defined in terms of the fields on the form and their derivations. A field is an item on the form for which values are specified. The derivations detail how the value can be computed.
Reference: [2] <author> J. Choobineh, M. Mannino, and V. Tseng. </author> <title> A form-based approach for database analysis and design. </title> <journal> Communications of the ACM, </journal> <volume> 35(2) </volume> <pages> 108-120, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: For example in the Purchase Order Form, the PO No. field will have just one value even though there may be several items on the form. The idea of representing a form as a hierarchy of nodes was used previously in <ref> [2] </ref> as an intermediate point in the derivation of an entity-relationship model from a form. In BizSpec, each form is defined once for the entire business to ensure consistency in completing busi ness flows. <p> Our goal is to define the concept of forms such that a physical data model can be derived. In <ref> [2] </ref>, they demonstrate the issues involved in deriving a data model from specifications. * Specification interface: Higher-level interfaces which support the entry of specifications by both end users and systems analysts is an area of interest.
Reference: [3] <author> T. DeMarco. </author> <title> Structured Analysis and System Specification. </title> <publisher> Yourdon Press, </publisher> <year> 1979. </year>
Reference-contexts: 1 Introduction Businesses rely on their application software to gain a competitive advantage. Thus, the ability to rapidly develop software which meets the needs of the business is a key concern. Usually, business systems are specified using domain-independent modeling tools, such as structure charts [13], data flow diagrams <ref> [3] </ref>, and entity-relationship models [6]. Many systems have been built using these models, but they are difficult for end users to assess in detail. We believe that there are several reasons for this limitation.
Reference: [4] <author> W. Du and W. Wadge. </author> <title> A 3d spreadsheet based on intensional logic. </title> <journal> IEEE Software, </journal> <volume> 7(3) </volume> <pages> 78-89, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: BizSpec uses forms as the base concept in the model. Forms are used in a wide range of business processes, so they are, by nature, a general representation. Use of forms as a primitive has been proposed in several systems <ref> [1, 14, 4] </ref>. In these systems, the forms are defined in terms of the fields on the form and their derivations. A field is an item on the form for which values are specified. The derivations detail how the value can be computed.
Reference: [5] <author> L. Erman, F. Hayes-Roth, V. Lesser, and R. Reddy. </author> <title> The hearsay-ii speech-understanding system: Integrating knowledge to resolve uncertainty. </title> <journal> ACM Computing Surveys, </journal> <volume> 12(2), </volume> <year> 1980. </year>
Reference-contexts: Unit flows identify the work performed by each work unit and each work units' interaction with other work units. The interaction between work units could be performed either by broadcasting techniques, like blackboards <ref> [5] </ref>, or direct techniques, such as message passing [8]. We prefer message passing because we believe that work units will have a good idea who they want to communicate with. Unit flows present a procedural representation of the transaction steps from a work unit's viewpoint.
Reference: [6] <author> M. Flavin. </author> <title> Fundamental Concepts of Information Modeling. </title> <publisher> Yourdon Press, </publisher> <year> 1981. </year>
Reference-contexts: Thus, the ability to rapidly develop software which meets the needs of the business is a key concern. Usually, business systems are specified using domain-independent modeling tools, such as structure charts [13], data flow diagrams [3], and entity-relationship models <ref> [6] </ref>. Many systems have been built using these models, but they are difficult for end users to assess in detail. We believe that there are several reasons for this limitation.
Reference: [7] <author> C. Forgy. </author> <title> Ops5 user's manual. </title> <type> Technical report, </type> <institution> Carnegie-Mellon University, </institution> <month> July </month> <year> 1981. </year>
Reference-contexts: The predicate compares the total price against the total cost of each item. If the total cost is greater than the total price, then the predicate is false and the constraint's response is run. In a production rule system, such as OPS5 <ref> [7] </ref>, the context and the conditions comprise the antecedent (or left-hand side) of the rule.
Reference: [8] <author> L. Gasser, C. Braganza, and N. Herman. </author> <title> Implementing distributed artificial intelligence systems using mace. </title> <booktitle> In Proceedings of the Third IEEE Conference on Artificial Intelligence Applications, </booktitle> <pages> pages 315-320, </pages> <year> 1987. </year>
Reference-contexts: Unit flows identify the work performed by each work unit and each work units' interaction with other work units. The interaction between work units could be performed either by broadcasting techniques, like blackboards [5], or direct techniques, such as message passing <ref> [8] </ref>. We prefer message passing because we believe that work units will have a good idea who they want to communicate with. Unit flows present a procedural representation of the transaction steps from a work unit's viewpoint.
Reference: [9] <author> W. Johnson and M. Feather. </author> <title> Using evolution transformations to construct specifications. </title> <booktitle> In Automating Software Design, chapter 4, </booktitle> <pages> pages 65-91. </pages> <publisher> AAAI Press, </publisher> <year> 1991. </year>
Reference-contexts: One common solution to help ease evaluation of specifications by end users is to improve the user-friendliness of the specification process. Several researchers have investigated the use of high-level interfaces to collect user specifications. An example of this research is the development of knowledge-based specification acquisition systems <ref> [9, 10, 12] </ref>. In these systems, user specifications are captured in natural language statements or context diagrams. Reasoning mechanisms transform the end user specifications into computable specifications. These computable specifications are represented in domain-independent paradigms, such as semantic networks or logic.
Reference: [10] <author> V. Kelly and U. Nonnenmann. </author> <title> Reducing the complexity of formal specification acquisition. </title> <booktitle> In Automating Software Design, chapter 3, </booktitle> <pages> pages 41-64. </pages> <publisher> AAAI Press, </publisher> <year> 1991. </year>
Reference-contexts: One common solution to help ease evaluation of specifications by end users is to improve the user-friendliness of the specification process. Several researchers have investigated the use of high-level interfaces to collect user specifications. An example of this research is the development of knowledge-based specification acquisition systems <ref> [9, 10, 12] </ref>. In these systems, user specifications are captured in natural language statements or context diagrams. Reasoning mechanisms transform the end user specifications into computable specifications. These computable specifications are represented in domain-independent paradigms, such as semantic networks or logic.
Reference: [11] <author> A. M. Law and W. D. </author> <title> Kelton. Simulation Modeling and Analysis. </title> <publisher> McGraw-Hill, </publisher> <year> 1982. </year>
Reference: [12] <author> M. Lubars. </author> <title> The rose-2 strategies for supporting high-level software design reuse. </title> <booktitle> In Automating Software Design, chapter 5, </booktitle> <pages> pages 93-118. </pages> <publisher> AAAI Press, </publisher> <year> 1991. </year>
Reference-contexts: One common solution to help ease evaluation of specifications by end users is to improve the user-friendliness of the specification process. Several researchers have investigated the use of high-level interfaces to collect user specifications. An example of this research is the development of knowledge-based specification acquisition systems <ref> [9, 10, 12] </ref>. In these systems, user specifications are captured in natural language statements or context diagrams. Reasoning mechanisms transform the end user specifications into computable specifications. These computable specifications are represented in domain-independent paradigms, such as semantic networks or logic.
Reference: [13] <author> M. Page-Jones. </author> <title> The Practical Guide to Structured Systems Design. </title> <publisher> Yourdon Press, </publisher> <year> 1980. </year>
Reference-contexts: 1 Introduction Businesses rely on their application software to gain a competitive advantage. Thus, the ability to rapidly develop software which meets the needs of the business is a key concern. Usually, business systems are specified using domain-independent modeling tools, such as structure charts <ref> [13] </ref>, data flow diagrams [3], and entity-relationship models [6]. Many systems have been built using these models, but they are difficult for end users to assess in detail. We believe that there are several reasons for this limitation.
Reference: [14] <author> G. Viehstaedt and A. Ambler. </author> <title> Visual representation and manipulation of matrices. </title> <journal> Journal of Visual Language and Computing, </journal> <volume> 3(3), </volume> <month> Septem-ber </month> <year> 1992. </year>
Reference-contexts: BizSpec uses forms as the base concept in the model. Forms are used in a wide range of business processes, so they are, by nature, a general representation. Use of forms as a primitive has been proposed in several systems <ref> [1, 14, 4] </ref>. In these systems, the forms are defined in terms of the fields on the form and their derivations. A field is an item on the form for which values are specified. The derivations detail how the value can be computed.
References-found: 14

