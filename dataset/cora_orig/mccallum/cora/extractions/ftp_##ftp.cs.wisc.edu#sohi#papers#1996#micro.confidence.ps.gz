URL: ftp://ftp.cs.wisc.edu/sohi/papers/1996/micro.confidence.ps.gz
Refering-URL: http://www.cs.wisc.edu/mscalar/publications.html
Root-URL: 
Email: jacobsen@cae.wisc.edu, ericro@cs.wisc.edu, jes@ece.wisc.edu  
Phone: USA. Telephone:  
Title: Assigning Confidence to Conditional Branch Predictions  
Author: Erik Jacobsen, Eric Rotenberg, and J. E. Smith 
Note: Manager, Copyrights and Permissions IEEE  Intl. 908-562-3966.  
Address: Madison, WI 53706  445 Hoes Lane P.O. Box 1331 Piscataway, NJ 08855-1331,  
Affiliation: Departments of Electrical and Computer Engineering and Computer Sciences University of Wisconsin-Madison  Service Center  
Abstract: Copyright 1996 IEEE. Published in the Proceedings of the 29th Annual International Symposium on Microarchitecture, Dec. 2-4, 1996, Paris, France. Personal use of this material is permitted. How ever, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copy righted component of this work in other works, must be obtained from the IEEE. Contact: 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Evers, P. Chang, and Y. Patt, </author> <title> ``Using Hybrid Branch Predictors to Improve Branch Prediction Accuracy in the Presence of Context Switches,'' </title> <booktitle> International Symposium on Computer Architec ture, </booktitle> <pages> pp. </pages> <month> 3-11 , May </month> <year> 1996. </year>
Reference-contexts: That is, threads predicted with a high confidence should be given priority over those with low confidence. This will reduce the number of wasted instruction fetches caused by following the wrong specu lative path. 3) Dynamic Selector for a hybrid branch predictor: Hybrid branch predictors <ref> [1, 5] </ref> use more than one predic tor and select the prediction made by one of them based on the history of prediction accuracies of the constituent predictors. The methods proposed in [1, 5] are basically ad hoc confidence mechanisms developed for this specific application. <p> by following the wrong specu lative path. 3) Dynamic Selector for a hybrid branch predictor: Hybrid branch predictors <ref> [1, 5] </ref> use more than one predic tor and select the prediction made by one of them based on the history of prediction accuracies of the constituent predictors. The methods proposed in [1, 5] are basically ad hoc confidence mechanisms developed for this specific application.
Reference: [2] <author> Linley Gwennap, </author> <title> ``MIPS R10000 Uses Decoupled Architecture,'' Microprocessor Report, </title> <journal> vol. </journal> <volume> 8, </volume> <pages> pp. 18-22, </pages> <month> October 24, </month> <year> 1994. </year>
Reference-contexts: 1. Introduction It is becoming common practice in high perfor mance processors to predict conditional branches [4, 7, 9, 13] and speculatively execute instructions based on the prediction <ref> [2, 8] </ref>. Typically, when speculation is used, all branch predictions are acted upon because there is low penalty for speculating incorrectly. I.e. most resources available to speculative instructions would be unused anyway. And, on average, a branch prediction will be correct a high percentage of the time.
Reference: [3] <author> B. T. Hailpern and B. L. Hitson, </author> <title> ``S-1 Architecture Manual,'' </title> <type> CSL Report STAN-CS-79-715., </type> <institution> Stan ford University, </institution> <month> January </month> <year> 1979. </year>
Reference-contexts: Multiple threads are forked, with the most prob able being forked first. Because of the difficulties with dynamically computing the probabilities, static profile based probabilities are used in the suggested implementa tion. Regarding the specific application to reversing predictions, some processors have static "prediction reversal" bits. The Livermore S-1 <ref> [3] </ref> made a static branch prediction, but had a dynamic "reverse" bit in the instruction cache that was used to reverse the static pred iction after it was found to be incorrect.
Reference: [4] <author> J. K. F. Lee and A. J. Smith, </author> <title> ``Branch Prediction Strategies and Branch Target Buffer Design,'' </title> <journal> Computer, </journal> <volume> vol. 17, </volume> <pages> pp. 6 - 22, </pages> <month> January </month> <year> 1984. </year>
Reference-contexts: 1. Introduction It is becoming common practice in high perfor mance processors to predict conditional branches <ref> [4, 7, 9, 13] </ref> and speculatively execute instructions based on the prediction [2, 8]. Typically, when speculation is used, all branch predictions are acted upon because there is low penalty for speculating incorrectly. I.e. most resources available to speculative instructions would be unused anyway. <p> This partitioning is done based on dynamic history, and we refer to these as dynamic confidence mechanisms. There are a large number of dynamic confidence mechan isms available. They are first cousins of dynamic branch predictors, and many such branch predictors have been proposed over the years <ref> [4, 7, 9, 13] </ref>. In this paper, we cannot explore the entire design space. But we select some representative confidence methods -- those that preliminary experiments indicated as being more interest ing variations. We begin with generic confidence mechanisms that are somewhat idealized.
Reference: [5] <author> S. McFarling, </author> <title> ``Combining Branch Predictors,'' </title> <institution> Digital Western Research Lab Technical Note TN-36, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: That is, threads predicted with a high confidence should be given priority over those with low confidence. This will reduce the number of wasted instruction fetches caused by following the wrong specu lative path. 3) Dynamic Selector for a hybrid branch predictor: Hybrid branch predictors <ref> [1, 5] </ref> use more than one predic tor and select the prediction made by one of them based on the history of prediction accuracies of the constituent predictors. The methods proposed in [1, 5] are basically ad hoc confidence mechanisms developed for this specific application. <p> by following the wrong specu lative path. 3) Dynamic Selector for a hybrid branch predictor: Hybrid branch predictors <ref> [1, 5] </ref> use more than one predic tor and select the prediction made by one of them based on the history of prediction accuracies of the constituent predictors. The methods proposed in [1, 5] are basically ad hoc confidence mechanisms developed for this specific application. <p> We do this by weighting the results so that each benchmark, in effect, executes the same number of conditional branches. An important part of the study is the underlying branch predictor. In most of our simulations, we use a fairly aggressive predictor. It is the gshare predictor <ref> [5] </ref> with 2 16 entries -- each of which is a saturating 2-bit counter. The counter array is addressed with the exclusive-OR of bits 17 through 2 of the program counter and the most recent 16 branch outcomes held in a branch history register (BHR).
Reference: [6] <author> Motorola, </author> <note> ``PowerPC 601 User's Manual,'' 1993, No. MPC601UM/AD. </note>
Reference-contexts: The Livermore S-1 [3] made a static branch prediction, but had a dynamic "reverse" bit in the instruction cache that was used to reverse the static pred iction after it was found to be incorrect. The more recent PowerPC 601 microprocessor <ref> [6] </ref> makes a prediction based on the opcode and direction of the branch, but allows the compiler to place a "reverse" bit in the instruc tion to change the default prediction. 1.2. Simulation Methodology We collected branch prediction accuracy data using trace-driven simulation.
Reference: [7] <author> S.-T. Pan, K. So, and J. T. Rahmeh, </author> <title> ``Improving the Accuracy of Dynamic Branch Prediction Using Branch Correlation,'' </title> <booktitle> Proc. Architectural Support for Programming Languages and Operating Sys tems (ASPLOS-V), </booktitle> <pages> pp. 76-84, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: 1. Introduction It is becoming common practice in high perfor mance processors to predict conditional branches <ref> [4, 7, 9, 13] </ref> and speculatively execute instructions based on the prediction [2, 8]. Typically, when speculation is used, all branch predictions are acted upon because there is low penalty for speculating incorrectly. I.e. most resources available to speculative instructions would be unused anyway. <p> This partitioning is done based on dynamic history, and we refer to these as dynamic confidence mechanisms. There are a large number of dynamic confidence mechan isms available. They are first cousins of dynamic branch predictors, and many such branch predictors have been proposed over the years <ref> [4, 7, 9, 13] </ref>. In this paper, we cannot explore the entire design space. But we select some representative confidence methods -- those that preliminary experiments indicated as being more interest ing variations. We begin with generic confidence mechanisms that are somewhat idealized.
Reference: [8] <author> Michael Slater, </author> <title> ``AMD's K5 Designed to Outrun Pentium,'' Microprocessor Report, </title> <journal> vol. </journal> <volume> 8, </volume> <pages> pp. </pages> <address> 1,6-11, </address> <month> October 24, </month> <year> 1994. </year>
Reference-contexts: 1. Introduction It is becoming common practice in high perfor mance processors to predict conditional branches [4, 7, 9, 13] and speculatively execute instructions based on the prediction <ref> [2, 8] </ref>. Typically, when speculation is used, all branch predictions are acted upon because there is low penalty for speculating incorrectly. I.e. most resources available to speculative instructions would be unused anyway. And, on average, a branch prediction will be correct a high percentage of the time.
Reference: [9] <author> J. E. Smith, </author> <title> ``A Study of Branch Prediction Stra tegies,'' </title> <booktitle> Proc. Eighth Annual Symposium on Com puter Architecture, </booktitle> <pages> pp. 135-148, </pages> <month> May </month> <year> 1981. </year>
Reference-contexts: 1. Introduction It is becoming common practice in high perfor mance processors to predict conditional branches <ref> [4, 7, 9, 13] </ref> and speculatively execute instructions based on the prediction [2, 8]. Typically, when speculation is used, all branch predictions are acted upon because there is low penalty for speculating incorrectly. I.e. most resources available to speculative instructions would be unused anyway. <p> How ever, once implemented, the confidence logic is used for all programs. That is, to simplify the hardware design, we do not dynamically adjust the criteria for determining the high and low confidence sets. 1.1. Previous Work In <ref> [9] </ref> there is a proposal for assigning confidence levels to different counter values in predictors based on saturating counters. There is also a relatively abstract example of optimizing performance by speculating to dif ferent degrees based on the confidence level. <p> This partitioning is done based on dynamic history, and we refer to these as dynamic confidence mechanisms. There are a large number of dynamic confidence mechan isms available. They are first cousins of dynamic branch predictors, and many such branch predictors have been proposed over the years <ref> [4, 7, 9, 13] </ref>. In this paper, we cannot explore the entire design space. But we select some representative confidence methods -- those that preliminary experiments indicated as being more interest ing variations. We begin with generic confidence mechanisms that are somewhat idealized.
Reference: [10] <author> D. Tullsen, S. Eggers, J. Emer, H. Levy, J. Lo, and R. Stamm, </author> <title> ``Exploiting Choice: Instruction Fetch and Issue on an Implementable Simultaneous Mul tithreading Processor,'' </title> <booktitle> Proc. 23rd Annual Interna tional Symposium on Computer Architecture, </booktitle> <pages> pp. 191-202, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: After most predicted branches only the predicted path would be speculatively followed, but occasionally, both paths would be followed. 2) Guiding instruction fetching in simultaneous mul tithreading (SMT): In SMT, instruction fetching has been identified as a critical resource <ref> [10] </ref>. This resource can be more efficiently used by fetching instructions only down predicted paths that have a high likelihood of being correctly predicted. That is, threads predicted with a high confidence should be given priority over those with low confidence.
Reference: [11] <author> Richard Uhlig, David Nagle, Trevor Mudge, Stuart Sechrest, and Joel Emer, </author> <title> ``Instruction Fetching: Coping with Code Bloat,'' </title> <booktitle> Proc. 22nd Annual Symposium on Computer Architecture, </booktitle> <pages> pp. 345 356, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Simulation Methodology We collected branch prediction accuracy data using trace-driven simulation. For benchmarks, we used the Mach version of the IBS benchmark suite <ref> [11] </ref> -- chosen because they more accurately represent branch charac teristics of real programs than the commonly used SPEC benchmarks, and, because they include kernel code. We arrive at composite data for the collection of benchmarks by averaging.
Reference: [12] <author> A. K. Uht and V. Sindagi, </author> <title> ``Disjoint Eager Execu tion: An Optimal Form of Speculative Execution,'' </title> <booktitle> Proc. 28th Annual International Symposium on Mi croarchitecture, </booktitle> <pages> pp. 313-325, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: Previous Work In [9] there is a proposal for assigning confidence levels to different counter values in predictors based on saturating counters. There is also a relatively abstract example of optimizing performance by speculating to dif ferent degrees based on the confidence level. In <ref> [12] </ref> the authors use branch probability levels to guide disjoint eager execution when forking multiple threads. Multiple threads are forked, with the most prob able being forked first. Because of the difficulties with dynamically computing the probabilities, static profile based probabilities are used in the suggested implementa tion.
Reference: [13] <author> T. Y. Yeh and Y. N. Patt, </author> <title> ``Two-Level Adaptive Branch Prediction,'' </title> <booktitle> Proc. 24th Annual Interna tional Symposium on Microarchitecture, No vember 1991. </booktitle>
Reference-contexts: 1. Introduction It is becoming common practice in high perfor mance processors to predict conditional branches <ref> [4, 7, 9, 13] </ref> and speculatively execute instructions based on the prediction [2, 8]. Typically, when speculation is used, all branch predictions are acted upon because there is low penalty for speculating incorrectly. I.e. most resources available to speculative instructions would be unused anyway. <p> This partitioning is done based on dynamic history, and we refer to these as dynamic confidence mechanisms. There are a large number of dynamic confidence mechan isms available. They are first cousins of dynamic branch predictors, and many such branch predictors have been proposed over the years <ref> [4, 7, 9, 13] </ref>. In this paper, we cannot explore the entire design space. But we select some representative confidence methods -- those that preliminary experiments indicated as being more interest ing variations. We begin with generic confidence mechanisms that are somewhat idealized.
References-found: 13

