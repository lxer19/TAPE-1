URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3546/3546.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: seipel@informatik.uni-tuebingen.de  fminker, cruizcg@cs.umd.edu  
Phone: 2  
Title: Model Generation and State Generation for Disjunctive Logic Programs defined on sets of Herbrand interpretations,
Author: Dietmar Seipel Jack Minker Carolina Ruiz 
Note: P  P that  [3] and the 3-S transformation [16].  
Address: Sand 13, D 72076 Tubingen, Germany  College Park, MD 20742 U.S.A.  
Affiliation: 1 Department of Computer Science. University of Tubingen.  Institute for Advanced Computer Studies and Department of Computer Science. University of Maryland.  
Abstract: This paper investigates two fixpoint approaches for minimal model reasoning with disjunctive logic programs P. The first one, called model generation [4], is based on an operator T INT P based on hyperresolution. It operates on disjunctive Herbrand states and its least fixpoint is the set of logical consequences of P, the so-called minimal model state of the program. We establish a useful relationship between hyperresolution by T s P and model generation by T INT P . Then we investigate the problem of continuity of the two operators T s P and T INT known that the operator T s P is continuous [12], and so it reaches its least fixpoint in at most ! steps. On the other hand, the question of whether T INT P is continuous has been open. We show by a counterexample that T INT P is not continuous. Nevertheless, we prove that it converges towards its least fixpoint in at most ! steps too, as follows from the relationship that we show We define an iterative version of T INT exists between hyperresolution and model generation.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B.A. Davey, H.A. Priestley: </author> <title> Introduction to Lattices and Order, </title> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: This set is called the minimal model state of the logic program [12]. Below, we put together some important notation and results on partial orderings and lattices and on fixpoint theory on complete lattices, cf. e.g. <ref> [9, 1] </ref>. Let O = h S; i, where S is a set and is a binary relation on S. O is called a partial ordering on S, if is reflexive, transitive and antisymmetric.
Reference: [2] <author> J.A. Fernandez: </author> <title> Disjunctive Deductive Databases, </title> <type> Ph.D. Thesis, </type> <institution> University of Maryland, </institution> <year> 1993. </year>
Reference-contexts: This operator was originally introduced by Fernandez and Minker in [4] (see also <ref> [2, 5] </ref>) for the case of disjunctive logic programs without function symbols. The second approach, developed by Minker and Rajasekar [12], is based on a fixpoint operator T s P defined on sets of positive disjunctions called states. <p> Thus, from each interpretation several interpretations may be derived. Furthermore, the result T INT P (I) is expanded. The operator T M P was originally introduced by Fernandez and Minker [4] (see also <ref> [2, 5] </ref>) to compute the minimal Herbrand models of a disjunctive deductive database (i.e. a disjunctive logic program with no function symbols).
Reference: [3] <author> J.A. Fernandez, J. Lobo, J. Minker, </author> <title> V.S. Subrahmanian: Disjunctive LP + Integrity Constrains = Stable Model Semantics, </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <volume> vol. </volume> <pages> 8 (3-4), </pages> <year> 1993, </year> <pages> pp. </pages> <month> 449-474. </month> <title> 7 for a demo version of DisLog visit http://www.informatik.uni-tuebingen.de/dislog.html 8 a disjunction C in MS P is minimal if there is no sub-disjunction C 0 of C in MS P . 17 </title>
Reference-contexts: On each stratum of the program, this operator converges in at most ! steps. Due to the characterizations of the stable and the partial stable (and so the well-founded) semantics respectively presented in <ref> [3] </ref> and [16], this iterative operator can be used to construct the stable models and partial stable models (the well-founded model in particular) of normal disjunctive logic programs. The paper consists of the following sections: Section 2 presents some basic definitions and notation. <p> Notice that, due to Theorem 5.5, each of the closure ordinals ff I i in the previous definition is at most !. Fernandez et al. <ref> [3] </ref> showed how to transform an arbitrary normal disjunctive logic program P into a stratified one, denoted by P E , in such a way that the perfect models of P E that satisfy a given set of integrity constraints correspond to the stable models of P (as defined in [14]).
Reference: [4] <author> J.A. Fernandez and J. Minker: </author> <title> Bottom-up Evaluation of Hierarchical Disjunctive Deductive Databases. </title> <booktitle> Proc. Eighth Intl. Conference on Logic Programming, </booktitle> <publisher> MIT Press, </publisher> <year> 1991, </year> <pages> pp. 660-675. </pages>
Reference-contexts: The first one, denoted here by model generation, relies on a fixpoint operator T M P that operates on sets of Herbrand interpretations and whose least fixpoint is the set of minimal Herbrand models of the program. This operator was originally introduced by Fernandez and Minker in <ref> [4] </ref> (see also [2, 5]) for the case of disjunctive logic programs without function symbols. The second approach, developed by Minker and Rajasekar [12], is based on a fixpoint operator T s P defined on sets of positive disjunctions called states. <p> Thus, from each interpretation several interpretations may be derived. Furthermore, the result T INT P (I) is expanded. The operator T M P was originally introduced by Fernandez and Minker <ref> [4] </ref> (see also [2, 5]) to compute the minimal Herbrand models of a disjunctive deductive database (i.e. a disjunctive logic program with no function symbols).
Reference: [5] <author> J.A. Fernandez and J. Minker: </author> <title> Bottom-up computation of perfect models for disjunctive theories, </title> <journal> Journal of Logic Programming, </journal> <volume> vol. 25(1), </volume> <year> 1995, </year> <pages> pp. 33-51. </pages>
Reference-contexts: This operator was originally introduced by Fernandez and Minker in [4] (see also <ref> [2, 5] </ref>) for the case of disjunctive logic programs without function symbols. The second approach, developed by Minker and Rajasekar [12], is based on a fixpoint operator T s P defined on sets of positive disjunctions called states. <p> Thus, from each interpretation several interpretations may be derived. Furthermore, the result T INT P (I) is expanded. The operator T M P was originally introduced by Fernandez and Minker [4] (see also <ref> [2, 5] </ref>) to compute the minimal Herbrand models of a disjunctive deductive database (i.e. a disjunctive logic program with no function symbols). <p> ) = I 2 = fI 2 ; J 2 g; where I 2 = I 1 [ f path (a; b); path (b; d); path (c; d) g; J 2 = J 1 [ f path (a; c); path (b; d); path (c; d) g: Fernandez and Minker (cf. <ref> [5] </ref>) investigated some of the properties of the consequence operator T M P based on the following subsumption relation v defined for coins I; J 2 2 HI P : I v J iff 8 J 2 J : 9 I 2 I : I J: The pair O = h <p> Thus, this property may not hold for P, since there may exist some I 2 T INT P (I) for which there is no minimal interpretation in T INT P (I) contained in I. 7 Theorem 4.3 (Characterization of MM P <ref> [5] </ref>) Let P be a disjunctive deductive database. <p> that lfp (T INT P ) v MM P : Thus, the operator T INT P is an example of a monotonic operator that is not continuous, but nevertheless reaches its least fixpoint in at most ! steps. 6 Iterative Model Generation of Perfect and (Partial) Stable Se mantics In <ref> [5] </ref>, Minker and Fernandez defined an iterative method to compute the perfect models of a stratified disjunctive deductive database. In this section we extend their method to work with arbitrary stratified disjunctive logic programs by using the operator T INT P defined on Section 4. <p> For the case of function-free logic programs, Minker and Fernandez used an iterative version of their operator T M P to compute this collection of perfect models <ref> [5] </ref>.
Reference: [6] <author> K. Inoue, M. Koshimura, R. Hasegawa: </author> <title> Embedding Negation as Failure into a Model Generation Theorem Prover, </title> <booktitle> Proc. Intl. Conference on Automated Deduction 1992, </booktitle> <pages> pp. 400-415. </pages>
Reference: [7] <author> S.C. Kleene: </author> <title> Introduction to MetaMathematics, </title> <publisher> Van Nostrand, </publisher> <address> New York, </address> <year> 1962. </year>
Reference-contexts: The smallest such ff is called the closure ordinal of T . If T is continuous, then T " ! = lfp (T ) (see <ref> [7] </ref>). 3 State Generation The fixpoint semantics of a disjunctive logic program is based on a disjunctive consequence operator T s P given in [12] (see also [10]).
Reference: [8] <author> B. Knaster: </author> <title> Un theorem sur les fonctions d'ensembles, </title> <journal> Annals Soc. Pol. Math., </journal> <volume> vol. 6, </volume> <year> 1928, </year> <pages> pp. 133-134. </pages>
Reference-contexts: ff g); for a limit ordinal ff: For the important special case of the bottom element ? = glb (L) of O, the ordinal powers T " ff of T are lattice elements given by T " ff = T "ff (?): The well-known theorem of Knaster and Tarski, cf. <ref> [8] </ref> and [20], relates the fixpoints of a monotonic mapping on a complete lattice to the ordinal powers: If T is monotonic, then the collection of fixpoints of T forms a complete lattice and so T has a unique least fixpoint lfp (T ).
Reference: [9] <author> J.W. Lloyd: </author> <booktitle> Foundations of Logic Programming, Springer, second edition, </booktitle> <year> 1987. </year>
Reference-contexts: This set is called the minimal model state of the logic program [12]. Below, we put together some important notation and results on partial orderings and lattices and on fixpoint theory on complete lattices, cf. e.g. <ref> [9, 1] </ref>. Let O = h S; i, where S is a set and is a binary relation on S. O is called a partial ordering on S, if is reflexive, transitive and antisymmetric.
Reference: [10] <author> J. Lobo, J. Minker, A. Rajasekar: </author> <title> Foundations of Disjunctive Logic Programming, </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: If T is continuous, then T " ! = lfp (T ) (see [7]). 3 State Generation The fixpoint semantics of a disjunctive logic program is based on a disjunctive consequence operator T s P given in [12] (see also <ref> [10] </ref>). Definition 3.1 (Consequence Operator T s P ) Let P be a disjunctive logic program and let S DHB P be a disjunctive Herbrand state. <p> According to <ref> [10] </ref>, it holds MM P = MM (MS P ); where the dualization operations are defined by MS (I) = fC 2 DHB P j 8I 2 I : I j= C g; This resembles the duality between the conjunctive and the disjunctive normal form of boolean formulas, since MS P
Reference: [11] <author> J. Minker: </author> <title> On Indefinite Databases and the Closed World Assumption, </title> <booktitle> Proc. Conference on Automated Deduction 1982, </booktitle> <publisher> Springer LNCS 138, </publisher> <year> 1982, </year> <pages> pp. 292-308. </pages>
Reference-contexts: 1 Introduction The semantics of a disjunctive logic program has been characterized by its set of minimal Herbrand models or, equivalently, by the collection of all positive disjunctions that hold in every minimal Herbrand model of the program (see <ref> [11] </ref>). This collection is called the minimal model state of the program. fl The last two authors acknowledge the support of the National Science Foundation under grant number IRI 9300691. These equivalent semantic definitions gave rise to two alternative ways of computing the meaning of a program.
Reference: [12] <author> J. Minker, A. Rajasekar: </author> <title> A Fixpoint Semantics for Disjunctive Logic Programs, </title> <journal> Journal of Logic Programming, </journal> <volume> vol. 9(1), </volume> <year> 1990, </year> <pages> pp. 45-74. </pages>
Reference-contexts: This operator was originally introduced by Fernandez and Minker in [4] (see also [2, 5]) for the case of disjunctive logic programs without function symbols. The second approach, developed by Minker and Rajasekar <ref> [12] </ref>, is based on a fixpoint operator T s P defined on sets of positive disjunctions called states. This operator uses hyperresolution to construct the model state of the program as its least fixpoint. We refer to this approach as state generation. <p> In particular, we investigate the problem of continuity of the two operators T s P and T M P . It is known that the operator T s P is continuous <ref> [12] </ref>, and so it reaches its least fixpoint in at most ! steps. On the other hand, the question of whether T M P is continuous when applied to arbitrary disjunctive logic programs (with function symbols) has been open. <p> This set is called the minimal model state of the logic program <ref> [12] </ref>. Below, we put together some important notation and results on partial orderings and lattices and on fixpoint theory on complete lattices, cf. e.g. [9, 1]. Let O = h S; i, where S is a set and is a binary relation on S. <p> The smallest such ff is called the closure ordinal of T . If T is continuous, then T " ! = lfp (T ) (see [7]). 3 State Generation The fixpoint semantics of a disjunctive logic program is based on a disjunctive consequence operator T s P given in <ref> [12] </ref> (see also [10]). Definition 3.1 (Consequence Operator T s P ) Let P be a disjunctive logic program and let S DHB P be a disjunctive Herbrand state. <p> Minker and Rajasekar show in <ref> [12] </ref> that the disjunctive consequence operator T s P is continuous with respect to the complete lattice O = h 2 DHB P ; i on disjunctive Herbrand states, and hence also monotonic. The bottom element of O is ? = ;. <p> The minimal model state MS P is equivalent to the least fixpoint of the disjunctive consequence operator T s P , and it can be derived as MS P = exp (T s P " !), as was proven by Minker and Rajasekar in <ref> [12] </ref>. Theorem 3.4 (Characterization of MS P [12]) Let P be a disjunctive logic program. <p> minimal model state MS P is equivalent to the least fixpoint of the disjunctive consequence operator T s P , and it can be derived as MS P = exp (T s P " !), as was proven by Minker and Rajasekar in <ref> [12] </ref>. Theorem 3.4 (Characterization of MS P [12]) Let P be a disjunctive logic program. <p> This shows that a 2 MS (I n ) n S n ; I b 2 MOD (S n ) n I n ; i.e., the set inclusions in Corollary 5.3 are strict. Since the operator T s P is continuous (see <ref> [12] </ref>), its ordinal powers converge towards its least fixpoint in at most ! steps, i.e., lfp (T s P ) = T s P " ! fl MS P : Corollary 5.3 helps to show that the ordinal powers of the operator T INT P converge towards its least fixpoint in <p> (i) From Corollary 5.3 we know that T INT P " ! MOD (T s P " !): With T s P " ! fl MS P ; we get P " !: From Lemma 4.7 we know that MM (MS P ) v MOD (MS P ); and from <ref> [12] </ref> we know that MM (MS P ) = MM P : This shows that MM P v T INT (ii) From T INT and T INT P (MM P ) = MM P and the monotonicity of the operator T INT P on the partial ordering O exp = h
Reference: [13] <author> T.C. Przymusinski: </author> <title> On the declarative semantics of Deductive Databases and Logic Programming, in Foundations of Deductive Databases and Logic Programming, </title> <editor> J. Minker ed., </editor> <year> 1988, </year> <pages> pp. 193-216. </pages>
Reference-contexts: A 1 _ : : : _ A k ) contain an atom in which p appears. The definition of an atom A is taken to be the definition of the predicate symbol appearing in A. A normal disjunctive logic program P is called stratified (see <ref> [13] </ref>) if it is possible to partition the set of rules of P into sets fP 1 ; : : : ; P r g, called strata, such that for every rule of the form (2) in P there exists a constant c, 1 c r, such that: (1) the definition <p> Any partition fP 1 ; : : :; P r g of P satisfying the above conditions is called a stratification of P. The intended meaning of a stratified disjunctive logic program P is given by its collection of perfect models as defined in <ref> [13] </ref>. It is well-known (see e.g. [13]) that this collection can be constructed by induction on the strata as follows. <p> The intended meaning of a stratified disjunctive logic program P is given by its collection of perfect models as defined in <ref> [13] </ref>. It is well-known (see e.g. [13]) that this collection can be constructed by induction on the strata as follows.
Reference: [14] <author> T.C. Przymusinski: </author> <title> Extended Stable Semantics for Normal and Disjunctive Programs, </title> <booktitle> Proc. of the Seventh Intl. Conference on Logic Programming, </booktitle> <year> 1990, </year> <pages> 459-477. </pages>
Reference-contexts: [3] showed how to transform an arbitrary normal disjunctive logic program P into a stratified one, denoted by P E , in such a way that the perfect models of P E that satisfy a given set of integrity constraints correspond to the stable models of P (as defined in <ref> [14] </ref>). They called this transformation the evidential transformation. Using this characterization of stable models, the iterative version of T INT P can be used to construct the stable semantics of P.
Reference: [15] <author> T.C. Przymusinski: </author> <title> Stable Semantics for Disjunctive Programs, </title> <journal> New Generation Computing, </journal> <volume> vol. 9, </volume> <year> 1991, </year> <pages> pp. 401-424. </pages>
Reference-contexts: Since the well-founded model ([22]) is a distinct partial stable model of a normal logic program (see <ref> [15] </ref>), then model generation for the well-founded semantics is also achieved using the operator T INT P together with the 3S-transformation. 16 7 Conclusions Given a disjunctive logic program P, there are two approaches for deriving the minimal model state MS P and two approaches for deriving the set MM P
Reference: [16] <author> C. Ruiz, J. Minker: </author> <title> Computing Stable and Partial Stable Models of Extended Disjunctive Logic Programs, in Nonmonotonic Extensions of Logic Programming, 1995, </title> <editor> J. Dix and L.M. Pereira and T.C. Przymusinski eds., </editor> <booktitle> Lecture Notes in Computer Science 927. </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 205-229. </pages>
Reference-contexts: On each stratum of the program, this operator converges in at most ! steps. Due to the characterizations of the stable and the partial stable (and so the well-founded) semantics respectively presented in [3] and <ref> [16] </ref>, this iterative operator can be used to construct the stable models and partial stable models (the well-founded model in particular) of normal disjunctive logic programs. The paper consists of the following sections: Section 2 presents some basic definitions and notation. Section 3 summarizes the main properties of state generation. <p> Similarly, the operator T INT P can be used to generate the collection of partial (or 3-valued) stable models ([15]) of a normal disjunctive logic program P by using a characterization of this collection of models given by Ruiz and Minker in <ref> [16] </ref>. This characterization is based on a transformation called the 3S-transformation which applied to a normal disjunctive logic program P produces a constrained logic program (free of negation-by-default) P 3S , whose minimal (2-valued) consistent models correspond to the partial stable models of the original program P.
Reference: [17] <author> D. Seipel: </author> <title> Efficient Reasoning in Disjunctive Deductive Databases, </title> <type> Habilitation Thesis, </type> <institution> University of Tubingen, </institution> <year> 1995. </year>
Reference: [18] <author> D. Seipel, U. Guntzer: </author> <title> Mixed Fixpoint Theory for Disjunctive Deductive Databases, </title> <booktitle> Proc. Intl. Workshop on Logic Programming 1995, </booktitle> <pages> pp. 227-236. </pages>
Reference-contexts: Based on the theorems of Section 5 it has been shown in <ref> [18] </ref> that during a fixpoint iteration with T s P it is possible to switch to some iterations of model generation. Intermediate information about the size of the ordinal powers T s P " n can be used to decide if this would be advantageous.
Reference: [19] <author> D. Seipel, H. Thone: </author> <title> DisLog A System for Reasoning in Disjunctive Deductive Databases, </title> <booktitle> Proc. Intl. Workshop on the Deductive Approach to Information Systems and Databases 1994, </booktitle> <pages> pp. 325-343. </pages>
Reference-contexts: Similarly, dualization of MM P yields MS P as MS (MM P ). As shown in this paper, both approaches converge in at most ! steps. For the case of disjunctive deductive databases, these approaches have been implemented within the disjunctive deductive database engine DisLog 7 , cf. <ref> [19] </ref>, developed at the University of Tubingen. Experimenting with DisLog, we have observed that the efficiency of each approach depends on the relation between the number n = jcan (MS P )j of minimal 8 disjunctions in MS P and the number m = jMM P j of minimal models.
Reference: [20] <author> A. Tarski: </author> <title> A Lattice-Theoretical Fixpoint Theorem and its Applications, </title> <journal> Pacific Journal of Mathematics, </journal> <volume> vol. 5, </volume> <year> 1955, </year> <pages> pp. 285-309. </pages>
Reference-contexts: for a limit ordinal ff: For the important special case of the bottom element ? = glb (L) of O, the ordinal powers T " ff of T are lattice elements given by T " ff = T "ff (?): The well-known theorem of Knaster and Tarski, cf. [8] and <ref> [20] </ref>, relates the fixpoints of a monotonic mapping on a complete lattice to the ordinal powers: If T is monotonic, then the collection of fixpoints of T forms a complete lattice and so T has a unique least fixpoint lfp (T ).
Reference: [21] <author> M.H. van Emden, R.A. Kowalski: </author> <title> The Semantics of Predicate Logic as a Programming Language, </title> <journal> Journal of the ACM, </journal> <volume> vol. 23(4), </volume> <year> 1976, </year> <pages> pp. 733-742. </pages>
Reference-contexts: For a definite logic program P (without disjunctions) and a given Herbrand interpretation I the classical consequence operator T P of van Emden and Kowalski <ref> [21] </ref> computes the Herbrand interpretation J that consists of the head atoms of all rules in gnd (P), such that the bodies of the rules are satisfied by I. The unique minimal Herbrand model of the program is precisely the least fixpoint of this operator.
Reference: [22] <author> A. Van Gelder, K.A. Ross, J.S. Schlipf:, </author> <title> Unfounded Sets and Well-Founded Semantics for General Logic Programs, </title> <booktitle> Proc. of the Seventh ACM Symposium on Principles of Database Systems, </booktitle> <year> 1988, </year> <pages> pp. 221-230. </pages>
Reference: [23] <author> W. Wechler: </author> <title> Universal Algebra for Computer Scientists, </title> <publisher> Springer, </publisher> <year> 1992. </year> <month> 18 </month>
Reference-contexts: Note that both the intersection and the union of a set X of expanded coins is an expanded coin. 5 We remark that the construction of O exp is similar to the concept of free !-completion of partial orderings, cf. <ref> [23] </ref>. In the domain O exp we can work with the operator T INT P that produces expanded coins.
References-found: 23

