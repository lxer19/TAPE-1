URL: http://www.cs.brown.edu/research/ddg/papers/bdisk.ps.gz
Refering-URL: http://www.cs.brown.edu/research/ddg/publications.html
Root-URL: http://www.cs.brown.edu/
Email: sa@cs.brown.edu  alonso@mitl.research.panasonic.com  franklin@cs.umd.edu  sbz@cs.brown.edu  
Title: Broadcast Disks: Data Management for Asymmetric Communication Environments  
Author: Swarup Acharya Rafael Alonso MITL Michael Franklin Stanley Zdonik 
Affiliation: Brown University  University of Maryland  Brown University  
Date: May 1995  
Note: Appears in Proceedings of the ACM SIGMOD Conference, San Jose, CA,  
Abstract: This paper proposes the use of repetitive broadcast as a way of augmenting the memory hierarchy of clients in an asymmetric communication environment. We describe a new technique called Broadcast Disks for structuring the broadcast in a way that provides improved performance for non-uniformly accessed data. The Broadcast Disk superimposes multiple disks spinning at different speeds on a single broadcast channel in effect creating an arbitrarily fine-grained memory hierarchy. In addition to proposing and defining the mechanism, a main result of this work is that exploiting the potential of the broadcast structure requires a reevaluation of basic cache management policies. We examine several pure cache management policies and develop and measure implementable approximations to these policies. These results and others are presented in a set of simulation studies that substantiates the basic idea and develops some of the intuitions required to design a particular broadcast program. 
Abstract-found: 1
Intro-found: 1
Reference: [Acha94] <author> S. Acharya, R. Alonso, M. Franklin, S. Zdonik, </author> <title> Broadcast Disks: Data Management for Asymmetric Communications Environments, </title> <type> Tech. Report CS-94-43, </type> <institution> Brown Univ.; Tech. Report CS-TR-3369, Univ. of Maryland, </institution> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: As noise increases, P's cache hit rate remains the same, but its 4 It is trivial to implement P in the simulator, as the probability of each page is known from the client access distribution. 5 The impact the Offset parameter is discussed in more detail in <ref> [Acha94] </ref>. cache misses become more expensive, as it has to retrieve some pages from the slower disks.
Reference: [Akyu92] <author> S. Akyurek, K. Salem, </author> <title> Placing Replicated Data to Reduce Seek Delays Proc. </title> <booktitle> USENIX File System Conf., </booktitle> <month> May </month> <year> 1992. </year>
Reference-contexts: Finally, the tradeoff between replication to support access to hot data while making cold data more expensive to access has been investigated for magnetic disks <ref> [Akyu92] </ref>. 7 Summary and Future Work In this paper, we have described our design of a multilevel broadcast disk and cache management policies for this style of memory.
Reference: [Anto93] <author> C. Antonelli, P. Honeyman, </author> <title> Integrating Mass Storage and File Systems, </title> <booktitle> Proc. 12th IEEE Symp on Mass Storage Sys., </booktitle> <year> 1993. </year>
Reference-contexts: The need for cost-based caching and page replacement has been recognized in other domains in which there is a wide variation in the cost of obtaining data from different levels of the storage hierarchy. For example, <ref> [Anto93] </ref> describes the need for considering cost of acquisition for page replacement in deep-store file systems involving tertiary mass storage.
Reference: [Barb94] <author> D. Barbara, T. Imielinski, Sleepers and Workaholics: </author> <title> Caching Strategies in Mobile Environments,Proc. </title> <booktitle> ACM SIG-MOD Conf., </booktitle> <month> May, </month> <year> 1993. </year>
Reference-contexts: However, we are currently investigating ways to integrate indexes with the multilevel disk in order to support broadcast program changes due to client population changes and updates. Caching in a mobile environment has been considered in <ref> [Barb94] </ref>. However, their model was different in that it considered volatile data and clients who could be inactive (and/or disconnected) over long periods of time. Thus, the focus of both broadcasting and caching in this work was to efficiently detect and avoid access to stale data in the cache.
Reference: [Bowe92] <editor> T. Bowen, et al. </editor> <booktitle> The Datacycle Architecture CACM 35,(12), </booktitle> <month> Dec., </month> <year> 1992. </year>
Reference-contexts: This flat approach has been adopted in earlier work on broadcast-based database systems such as Datacycle <ref> [Bowe92] </ref> and [Imie94a]. Alternatively, the server can broadcast different items with differing frequency. Such a broadcast program can emphasize the most popular items and de-emphasize the less popular ones. <p> Second, the randomness of broadcast disallows the use of sleeping to reduce power consumption (as in [Imie94b]). Finally, there is no notion of period for such a broadcast. Periodicity may be important for providing correct semantics for updates (e.g., as was done in Datacycle <ref> [Herm87, Bowe92] </ref>) and for introducing changes to the structure of the broadcast program. <p> As stated previously, the notion of using a repetitive broadcast medium for database storage and query processing was investigated in the Datacycle project at Bellcore <ref> [Herm87, Bowe92] </ref>. Datacycle was intended to exploit high bandwidth, optical communication technology and employed custom VLSI data filters for performing associative searches and continuous queries on the broadcast data.
Reference: [Dan90] <author> A. Dan, D. M. Dias, P. Yu, </author> <title> The Effect of Skewed Access on Buffer Hits and Data Contention in a Data Sharing Environment, </title> <booktitle> Proc. 16th VLDB Conf., </booktitle> <month> Aug., </month> <year> 1990. </year>
Reference-contexts: Similar to earlier models of skewed access <ref> [Dan90] </ref>, we partition the pages into regions of RegionSize pages each, such that the probability of accessing any page within a region is uniform; the Zipf distribution is applied to these regions.
Reference: [Fran92] <author> M. Franklin, M. Carey, M. Livny, </author> <title> Global Memory Management in Client-Server DBMS Architectures", </title> <booktitle> Proc. 18th VLDB Conf., </booktitle> <month> Aug., </month> <year> 1992. </year>
Reference-contexts: This issue is also addressed for client-server database systems in which a global memory hierarchy is created by allowing clients to obtain data from other clients that have that data cached <ref> [Fran92] </ref>. In this work, server page replacement policies are modified to favor pages that are not cached at clients, as they must be obtained from disk, which is more expensive. Recently, a technique called Disk-Directed I/O has been proposed for High Performance Computing applications [Kotz94].
Reference: [Giff90] <author> D. Gifford, </author> <title> Polychannel Systems for Mass Digital Communications,CACM, </title> <type> 33(2), </type> <month> Feb., </month> <year> 1990. </year>
Reference-contexts: In this approach, a server continuously and repeatedly broadcasts data to the clients. In effect, the broadcast channel becomes a disk from which clients can retrieve 1 data as it goes by. Broadcasting data has been proposed previously <ref> [Herm87, Giff90, Imie94b] </ref>. Our technique differs, however, in two ways. First, we superimpose multiple disks of different sizes and speeds on the broadcast medium, in effect, creating an arbitrarily fine-grained memory hierarchy. Second, we exploit client storage resources as an integral part of this extended memory hierarchy. <p> We intend to investigate issues raised by allowing such upstream communication through low-bandwidth links as part of our ongoing work. An early effort in information broadcasting, the Boston Community Information System (BCIS) is described in <ref> [Giff90] </ref>. BCIS broadcast newspapers and information over an FM channel to clients with personal computers specially equipped with radio receivers. Like Datacycle, they too used a flat disk approach. More recently, the mobile computing group at Rutgers has investigated techniques for indexing broadcast data [Imie94b].
Reference: [Gray94] <author> J. Gray, et al., </author> <title> Quickly Generating Billion-Record Synthetic Databases, </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <month> May, </month> <year> 1994. </year>
Reference-contexts: All pages outside of this range have a zero probability of access at the client. Within the range the page access probabilities follow a Zipf distribution <ref> [Knut81, Gray94] </ref>, with page 0 being the most frequently accessed, and page AccessRange1 being the least frequently accessed. The Zipf distribution is typically used to model non-uniform access patterns.
Reference: [Herm87] <author> G. Herman, G. Gopal, K. Lee, A. Weinrib, </author> <title> The Datacycle Architecture for Very High Throughput Database Systems, </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <month> May, </month> <year> 1987. </year>
Reference-contexts: In this approach, a server continuously and repeatedly broadcasts data to the clients. In effect, the broadcast channel becomes a disk from which clients can retrieve 1 data as it goes by. Broadcasting data has been proposed previously <ref> [Herm87, Giff90, Imie94b] </ref>. Our technique differs, however, in two ways. First, we superimpose multiple disks of different sizes and speeds on the broadcast medium, in effect, creating an arbitrarily fine-grained memory hierarchy. Second, we exploit client storage resources as an integral part of this extended memory hierarchy. <p> Second, the randomness of broadcast disallows the use of sleeping to reduce power consumption (as in [Imie94b]). Finally, there is no notion of period for such a broadcast. Periodicity may be important for providing correct semantics for updates (e.g., as was done in Datacycle <ref> [Herm87, Bowe92] </ref>) and for introducing changes to the structure of the broadcast program. <p> As stated previously, the notion of using a repetitive broadcast medium for database storage and query processing was investigated in the Datacycle project at Bellcore <ref> [Herm87, Bowe92] </ref>. Datacycle was intended to exploit high bandwidth, optical communication technology and employed custom VLSI data filters for performing associative searches and continuous queries on the broadcast data.
Reference: [Imie94a] <author> T. Imielinski, B. Badrinath, </author> <title> Mobile Wireless Computing: Challenges in Data Management, </title> <journal> CACM, </journal> <volume> 37(10), </volume> <month> Oct., </month> <year> 1994. </year>
Reference-contexts: This flat approach has been adopted in earlier work on broadcast-based database systems such as Datacycle [Bowe92] and <ref> [Imie94a] </ref>. Alternatively, the server can broadcast different items with differing frequency. Such a broadcast program can emphasize the most popular items and de-emphasize the less popular ones.
Reference: [Imie94b] <author> T. Imielinski, S. Viswanathan, B. Badrinath, </author> <title> Energy Efficient Indexing on Air Proc. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <month> May, </month> <year> 1994. </year>
Reference-contexts: In this approach, a server continuously and repeatedly broadcasts data to the clients. In effect, the broadcast channel becomes a disk from which clients can retrieve 1 data as it goes by. Broadcasting data has been proposed previously <ref> [Herm87, Giff90, Imie94b] </ref>. Our technique differs, however, in two ways. First, we superimpose multiple disks of different sizes and speeds on the broadcast medium, in effect, creating an arbitrarily fine-grained memory hierarchy. Second, we exploit client storage resources as an integral part of this extended memory hierarchy. <p> Thus, we refer to program (c) as a Multi-disk broadcast. 1 This discussion assumes that broadcast items are self-identifying. Another option is to provide an index, as is discussed in <ref> [Imie94b] </ref>. 2 Access Probability Expected Delay (in broadcast units) A B C Flat Skewed Multi-disk (a) (b) (c) 0.50 0.25 0.25 1.50 1.63 1.50 0.90 0.05 0.05 1.50 1.33 1.10 Table 1: Expected Delay For Various Access Probabilities Table 1 shows the expected delay for page requests given various client access <p> First, the randomness in arrivals can reduce the effectiveness of some prefetching techniques that require knowledge of exactly when a particular item will next be broadcast [Zdon94]. Second, the randomness of broadcast disallows the use of sleeping to reduce power consumption (as in <ref> [Imie94b] </ref>). Finally, there is no notion of period for such a broadcast. Periodicity may be important for providing correct semantics for updates (e.g., as was done in Datacycle [Herm87, Bowe92]) and for introducing changes to the structure of the broadcast program. <p> BCIS broadcast newspapers and information over an FM channel to clients with personal computers specially equipped with radio receivers. Like Datacycle, they too used a flat disk approach. More recently, the mobile computing group at Rutgers has investigated techniques for indexing broadcast data <ref> [Imie94b] </ref>. The main thrust of this work has been to investigate ways to reduce power consumption at the clients in order to preserve battery life. Some of the indexing techniques described in [Imie94b] involve the interleaving of index information with data, which forms a restricted type of multilevel disk. <p> More recently, the mobile computing group at Rutgers has investigated techniques for indexing broadcast data <ref> [Imie94b] </ref>. The main thrust of this work has been to investigate ways to reduce power consumption at the clients in order to preserve battery life. Some of the indexing techniques described in [Imie94b] involve the interleaving of index information with data, which forms a restricted type of multilevel disk.
Reference: [John94] <author> T. Johnson, D. Shasha, </author> <title> 2Q: A Low Overhead High Performance Buffer Management Replacement Algorithm, </title> <booktitle> Proc. 20th VLDB Conf., </booktitle> <month> Sept., </month> <year> 1994. </year>
Reference-contexts: LIX is a simple approximation of PIX , yet in spite of this, it performs surprisingly well (as is shown below). Better approximations of PIX , however, might be developed using some of the recently proposed improvements to LRU like 2Q <ref> [John94] </ref> or LRU-k [ONei93]. 5.5.1 Experiment 5: LIX vs. LRU The next set of experiments are similar to those for P and PIX and compare LIX and LRU. However, unlike P, the best performance for LRU isn't at an offset equal to the cache size.
Reference: [Katz94] <author> R. Katz, </author> <title> Adaption and Mobility in Wireless Information Systems, </title> <journal> IEEE Personal Comm., 1st Quarter, </journal> <year> 1994. </year>
Reference: [Knut81] <author> D. Knuth, </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Vol II, </volume> <publisher> Addison Wesley, </publisher> <year> 1981. </year>
Reference-contexts: All pages outside of this range have a zero probability of access at the client. Within the range the page access probabilities follow a Zipf distribution <ref> [Knut81, Gray94] </ref>, with page 0 being the most frequently accessed, and page AccessRange1 being the least frequently accessed. The Zipf distribution is typically used to model non-uniform access patterns.
Reference: [Kotz94] <author> D. Kotz, </author> <title> Disk-directed I/O for MIMD Multiprocessors, </title> <booktitle> 1st Symposium on OS Design and Implementation, USENIX, </booktitle> <month> Nov., </month> <year> 1994. </year>
Reference-contexts: In this work, server page replacement policies are modified to favor pages that are not cached at clients, as they must be obtained from disk, which is more expensive. Recently, a technique called Disk-Directed I/O has been proposed for High Performance Computing applications <ref> [Kotz94] </ref>. Disk-Directed I/O sends large requests to I/O devices and allows the devices to fulfill the requests in a piecemeal fashion in an order that improves the disk bandwidth.
Reference: [ONei93] <author> E. J. O'Neil, P. E. O'Neil, G. Weikum, </author> <title> The LRU-k Page Replacement Algorithm for Database Disk Buffering, </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <month> May, </month> <year> 1993. </year>
Reference-contexts: LIX is a simple approximation of PIX , yet in spite of this, it performs surprisingly well (as is shown below). Better approximations of PIX , however, might be developed using some of the recently proposed improvements to LRU like 2Q [John94] or LRU-k <ref> [ONei93] </ref>. 5.5.1 Experiment 5: LIX vs. LRU The next set of experiments are similar to those for P and PIX and compare LIX and LRU. However, unlike P, the best performance for LRU isn't at an offset equal to the cache size.
Reference: [Schw86] <author> H. D. Schwetman, CSIM: </author> <title> A C-based process oriented simulation language, </title> <booktitle> Proc. 1986 Winter Simulation Conf., </booktitle> <year> 1986. </year>
Reference-contexts: The simulator, which is implemented using CSIM <ref> [Schw86] </ref>, models a single server that continuously broadcasts pages and a single client that continuously accesses pages from the broadcast and from its cache.
Reference: [Vish94] <author> S. Vishwanath, T. Imielinski, </author> <title> Pyramid Broadcasting for Video on Demand Service, </title> <institution> Rutgers Univ. Tech. Report DCS TR-311, </institution> <year> 1994. </year>
Reference-contexts: Thus, the focus of both broadcasting and caching in this work was to efficiently detect and avoid access to stale data in the cache. Very recently, another approach to broadcasting data for video on demand has been taken in <ref> [Vish94] </ref>. The technique, called pyramid broadcasting, splits an object (e.g., a video clip) into a number of segments of increasing sizes. To minimize latency the first segment is broadcast more frequently than the rest.
Reference: [Zdon94] <author> S. Zdonik, M. Franklin, R. Alonso, S. Acharya, </author> <title> Are `Disks in the Air' Just Pie in the Sky?, </title> <booktitle> IEEE Wkshp on Mobile Comp. Sys. and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> Dec., </month> <year> 1994. </year> <month> 12 </month>
Reference-contexts: In addition to performance benefits, a Multi-disk broadcast has several other advantages over a random (skewed) broadcast program. First, the randomness in arrivals can reduce the effectiveness of some prefetching techniques that require knowledge of exactly when a particular item will next be broadcast <ref> [Zdon94] </ref>. Second, the randomness of broadcast disallows the use of sleeping to reduce power consumption (as in [Imie94b]). Finally, there is no notion of period for such a broadcast.
References-found: 20

