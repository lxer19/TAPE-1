URL: http://www.cs.cornell.edu/Info/People/basu/papers/europar.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/basu/papers.html
Root-URL: 
Email: -mdw,basu,tve-@cs.cornell.edu  
Title: Low-Latency Communication over Fast Ethernet  
Author: Matt Welsh, Anindya Basu, and Thorsten von Eicken 
Web: http://www.cs.cornell.edu/Info/Projects/U-Net  
Address: Ithaca, NY 14853  
Affiliation: Department of Computer Science Cornell University,  
Abstract: Fast Ethernet (100Base-TX) can provide a low-cost alternative to more esoteric network technologies for high-performance cluster computing. We use a network architecture based on the U-Net approach to implement low-latency and high-bandwidth communication over Fast Ethernet, with performance rivaling (and in some cases exceeding) that of 155 Mbps ATM. U-Net provides protected, user-level access to the network interface and enables application-level round-trip latencies of less than 60ms over Fast Ethernet. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Blumrich, C. Dubnicki, E. W. Felten and K. Li. </author> <title> Virtual-Memory-Mapped Network Interfaces. </title> <booktitle> IEEE Micro, </booktitle> <month> Feb. </month> <year> 1995, </year> <pages> p 21-28. </pages>
Reference-contexts: 1 Introduction High-performance computing on clusters of workstations requires low-latency communication in order to efficiently implement parallel languages and distributed algorithms. Recent research <ref> [1, 6, 8] </ref> has demonstrated that direct application access to the network interface can provide both low-latency and high-bandwidth communication in such settings and is capable of showing performance comparable to state-of-the-art multiprocessors. <p> The HP Hamlyn [9] network architecture also implements a user-level communication model similar to Active Messages but uses a custom network interface where message sends and receives are implemented in hardware. Shrimp <ref> [1] </ref> allows processes to connect virtual memory pages on two nodes through the use of custom network interfaces; memory accesses to such pages on one side are automatically mirrored on the other side.
Reference: [2] <author> D. E. Culler, A. Dusseau, S. C. Goldstein, A. Krishnamurthy, S. Lumetta, T. von Eicken, and K. Yelick. </author> <title> Introduction to Split-C. </title> <booktitle> In Proc. of Supercomputing '93. </booktitle>
Reference-contexts: Protection is assured through the virtual memory system and kernel control of connection setup and tear-down. A previous implementation of U-Net over ATM [6] demonstrated that this architecture is able to efficiently support low-latency communication protocols such as Active Messages [7] and parallel languages such as Split-C <ref> [2] </ref>. However, two important outstanding questions were whether the U-Net model is only feasible over connection oriented networks such as ATM and whether the use of a programmable coprocessor on the network adaptor (as in the ATM implementation) is a necessary part of the design.
Reference: [3] <author> A. Edwards, G. Watson, J. Lumley, D. Banks, C. Calamvokis and C.Dalton. </author> <title> Userspace protocols deliver high performance to applications on a low-cost Gb/s LAN. </title> <booktitle> Proc. of SIG-COMM-94, </booktitle> <pages> p 14-23, </pages> <month> Aug. </month> <year> 1994 </year>
Reference: [4] <author> S. Pakin, M. Lauria, and A. Chien. </author> <title> High Performance Messaging on Workstations: Illinois Fast Messages (FM) for Myrinet. </title> <booktitle> In Proc. of Supercomputing '95, </booktitle> <address> San Diego, California. </address>
Reference-contexts: Several of these models propose to introduce special-purpose networking hardware. Thek-kath [5] proposes to separate the control and data flow of network access using a shared-memory model; remote-memory operations are implemented as unused opcodes in the MIPS instruction set. The Illinois Fast Messages <ref> [4] </ref> implementation achieves high performance on a Myrinet network using communication primitives similar to Active Messages. The network interface is accessed directly from userspace but without providing support for simultaneous use by multiple applications.
Reference: [5] <author> C. A. Thekkath, H. M. Levy, and E. D. Lazowska. </author> <title> Separating Data and Control Transfer in Distributed Operating Systems. </title> <booktitle> Proc. of the 6th Intl Conf. on ASPLOS, </booktitle> <month> Oct </month> <year> 1994. </year>
Reference-contexts: Several of these models propose to introduce special-purpose networking hardware. Thek-kath <ref> [5] </ref> proposes to separate the control and data flow of network access using a shared-memory model; remote-memory operations are implemented as unused opcodes in the MIPS instruction set. The Illinois Fast Messages [4] implementation achieves high performance on a Myrinet network using communication primitives similar to Active Messages.
Reference: [6] <author> T. von Eicken, A. Basu, V. Buch, and W. Vogels. U-Net: </author> <title> A User-Level Network Interface for Parallel and Distributed Computing. </title> <booktitle> Proc. of the 15th ACM SOSP, </booktitle> <pages> p 40-53, </pages> <month> Dec </month> <year> 1995. </year>
Reference-contexts: 1 Introduction High-performance computing on clusters of workstations requires low-latency communication in order to efficiently implement parallel languages and distributed algorithms. Recent research <ref> [1, 6, 8] </ref> has demonstrated that direct application access to the network interface can provide both low-latency and high-bandwidth communication in such settings and is capable of showing performance comparable to state-of-the-art multiprocessors. <p> This shifts most of the protocol processing to user-level where it can often be specialized and better integrated into the application thus yielding higher performance. Protection is assured through the virtual memory system and kernel control of connection setup and tear-down. A previous implementation of U-Net over ATM <ref> [6] </ref> demonstrated that this architecture is able to efficiently support low-latency communication protocols such as Active Messages [7] and parallel languages such as Split-C [2]. <p> The ParaStation [8] system obtains small-message (4-byte) send and receive processor overheads of about 2.5 m sec using specialized hardware and user-level unprotected access to the network interface; however, this does not include the round-trip latency. 2 U-Net user-level communication architecture The U-Net architecture <ref> [6] </ref> virtualizes the network interface in such a way that a combination of operating system and hardware mechanisms can provide every application the illusion of owning the interface to the network. The U-Net platform is in itself is not dependent on the underlying hardware.
Reference: [7] <author> T. von Eicken, D. E. Culler, S. C. Goldstein, and K. E. Schauser. </author> <title> Active Messages: A Mechanism for Integrated Communication and Computation. </title> <booktitle> Proc. of the 19th ISCA, </booktitle> <pages> p 256-266, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Protection is assured through the virtual memory system and kernel control of connection setup and tear-down. A previous implementation of U-Net over ATM [6] demonstrated that this architecture is able to efficiently support low-latency communication protocols such as Active Messages <ref> [7] </ref> and parallel languages such as Split-C [2].
Reference: [8] <author> T. M. Warschko, W. F. Tichy, and C. H. Herter. </author> <title> Efficient Parallel Computing on Workstation Clusters. </title> <address> http://wwwipd.ira.uka.de/~warschko/parapc/sc95.html </address>
Reference-contexts: 1 Introduction High-performance computing on clusters of workstations requires low-latency communication in order to efficiently implement parallel languages and distributed algorithms. Recent research <ref> [1, 6, 8] </ref> has demonstrated that direct application access to the network interface can provide both low-latency and high-bandwidth communication in such settings and is capable of showing performance comparable to state-of-the-art multiprocessors. <p> Shrimp [1] allows processes to connect virtual memory pages on two nodes through the use of custom network interfaces; memory accesses to such pages on one side are automatically mirrored on the other side. The ParaStation <ref> [8] </ref> system obtains small-message (4-byte) send and receive processor overheads of about 2.5 m sec using specialized hardware and user-level unprotected access to the network interface; however, this does not include the round-trip latency. 2 U-Net user-level communication architecture The U-Net architecture [6] virtualizes the network interface in such a way
Reference: [9] <author> J. Wilkes. </author> <title> An interface for sender-based communication. </title> <type> Tech. Rep. </type> <institution> HPL-OSR-92-13, Hewlett-Packard Research Laboratory, </institution> <month> Nov. </month> <year> 1992. </year> <note> 0 20 40 60 0 64 128 bytes hub Bay28115 Mbits/s ATM 0 40 80 120 bytes Mbits/s hub Bay28115 sw itch ATM </note>
Reference-contexts: The Illinois Fast Messages [4] implementation achieves high performance on a Myrinet network using communication primitives similar to Active Messages. The network interface is accessed directly from userspace but without providing support for simultaneous use by multiple applications. The HP Hamlyn <ref> [9] </ref> network architecture also implements a user-level communication model similar to Active Messages but uses a custom network interface where message sends and receives are implemented in hardware.
References-found: 9

