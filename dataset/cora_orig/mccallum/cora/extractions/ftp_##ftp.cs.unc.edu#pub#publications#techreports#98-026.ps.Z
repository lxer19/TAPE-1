URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/98-026.ps.Z
Refering-URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/FILE.html
Root-URL: http://www.cs.unc.edu
Email: Bastos@cs.unc.edu  
Title: Forward Mapped Planar Mirror Reflections  
Author: Rui Bastos, Wolfgang Strzlinger 
Address: Chapel Hill  
Affiliation: Department of Computer Science University of North Carolina at  
Abstract: This paper presents a new technique, which we call depth-preserving reflection mapping, to render mirrorlike reflections on planar surfaces in constant time. It is a hybrid solution which combines geometry-based rendering and image-based rendering into a two-pass mirror reflection rendering approach. The technique extends the traditional reflection mapping to preserve depth per texel and uses forward warping to approximate the mirrorlike reflections on planar surfaces. For clarity, to distinguish these texels from the ones of traditional reflection mapping, we call them zexels. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> D. Aliaga and A. Lastra. </author> <title> Architectural Walkthroughs using Portal Textures. </title> <booktitle> In IEEE Visualization, </booktitle> <address> Tempe, AZ, </address> <year> 1997. </year>
Reference: 2. <author> D. Aliaga. </author> <title> Visualization of Complex Models Using Dynamic Texture-based Simplification. </title> <booktitle> In IEEE Visualization '96: IEEE, </booktitle> <month> October </month> <year> 1996. </year>
Reference: 3. <author> R. Bastos, M. Goslin, and H. Zhang. </author> <title> Efficient Rendering of Radiosity using Texture and Bicubic Interpolation. </title> <booktitle> In ACM Symposium on Interactive 3D Graphics, </booktitle> <address> Providence, RI, </address> <year> 1997. </year>
Reference-contexts: Unfortunately, interactive walkthrough applications trade photo-realism for frame rate. Local illumination or coarse global illumination solutions are preferred because they are cheaper to render. The usually-adopted global illumination approximations only consider ideally diffuse environments (radiosity) providing only view-independent effects <ref> [3] </ref>. Specular (mirror-like) effects considerably enhance the realism of a scene but require costly computation of view-dependent information on a per frame basis. However, they add non-static shading and visual cues to the scenes, which make them more interesting for walkthroughs.
Reference: 4. <author> Jim Blinn and Martin Newell. </author> <title> Textures and Reflection in Computer Generated Images. </title> <journal> Communication of the ACM. </journal> <volume> Vol. 19, no. 10 (1976), </volume> <pages> pp. 542547. </pages>
Reference-contexts: Although ray tracing can be more efficient in terms of the number of sampled directions, compared to scene re-rendering , it cannot exploit current graphics hardware. This limitation makes ray tracing a slow technique for rendering mirrorlike reflections and not applicable for interactive applications. Reflection maps <ref> [ 4] </ref>[9][13][14] have long been used for rapid rendering of mirror reflections. The scene surrounding specular objects is projected onto the surface of a sphere or cube. The captured scene is then used as a texture map on the specular objects. <p> The artifacts can be severe, due to assumptions about distance from the specular object to the rest of the scene, as described in Section 3. 3 Traditional Reflection M apping Reflection mapping <ref> [ 4] </ref>[9] is the most efficient shading technique to simulate specular reflections for interactive rendering.
Reference: 5. <author> F. Brooks. </author> <title> Walkthrough: A dynamic graphics system for simulating virtual buildings. </title> <booktitle> In ACM Symposium on Interactive 3D Graphics, </booktitle> <address> Chapel Hill, NC, </address> <year> 1986. </year>
Reference-contexts: 1 Introduction Architectural walkthrough applications enable the user to interact in real-time with computersimulated environments <ref> [ 5] </ref>. An important goal is to represent the rich visual complexity of the scenes. Such complexity is usually achieved with realistic illumination and shading models to generate images of the scene. Unfortunately, interactive walkthrough applications trade photo-realism for frame rate.
Reference: 6. <author> Shenchang Eric Chen and Lance Williams. </author> <title> View Interpolation for Image Synthesis. </title> <booktitle> In Computer Graphics (SIGGRAPH '93 Proceedings), </booktitle> <volume> vol. 27, </volume> <editor> J. T. Kajiya, Ed., </editor> <month> August </month> <year> 1993, </year> <pages> pp. 279-288. </pages>
Reference: 7. <author> Paul Diefenbach. </author> <title> Pipeline Rendering: Interaction and Realism Through Hardware-Based Multi-Pass Rendering. </title> <institution> University of Pennsylvania, Department of Computer Science, </institution> <type> Ph.D. dissertation, </type> <year> 1996. </year>
Reference-contexts: We will now review background material for the special case of planar reflections and describe some approaches to their simulation. Planar reflections can be rendered by a multi-pass rendering approach <ref> [ 7] </ref>. If there is a single planar mirror in the scene, a two-pass approach suffices. In the first pass, the reflected image of the scene is rendered. In the second pass, the rest of the scene (non-mirror surfaces) is rendered [12].
Reference: 8. <author> Andrew Glassner. </author> <title> Principles of Digital Image Synthesis . Morgan Kaufmann. </title> <address> San Francisco, </address> <year> 1995. </year>
Reference-contexts: Ray tracing relaxes the limitation of planar mirror reflections. Instead of mirroring the viewpoint and view-direction, and computing an entire image per mirror, ray-tracing tracks rays from the eye to the scene and reflects their direction whenever they hit a mirrorlike surface <ref> [8] </ref>. Although ray tracing can be more efficient in terms of the number of sampled directions, compared to scene re-rendering , it cannot exploit current graphics hardware. This limitation makes ray tracing a slow technique for rendering mirrorlike reflections and not applicable for interactive applications.
Reference: 9. <author> Ned Greene. </author> <title> Environment mapping and other applications of world projections. </title> <booktitle> In IEEE CG&A 6(11), </booktitle> <month> Nov </month> <year> 1986, </year> <pages> pp. 21-29. </pages>
Reference: 10. <author> Leonard McMillan and Gary Bishop. </author> <title> Plenoptic Modeling: An Image-Based Rendering System. </title> <booktitle> In SIGGRAPH 95 Conference Proceedings , Annual Conference Series , R. </booktitle> <editor> Cook, Ed.: </editor> <booktitle> ACM SIGGRAPH, </booktitle> <month> August </month> <year> 1995, </year> <pages> pp. 39-46. </pages>
Reference-contexts: As an alternative for computing mirrorlike reflections for planar surfaces at interactive frame rates, we propose a modified version of reflection mapping that exploits 3D image warping [ 15]. Instead of projecting the scene onto the surface of the reflection cell, we preserve depth (disparity <ref> [ 10] </ref>) at e ach texel of the reflection map ( Figure 4). Both color and depth are stored at each texel. This modification makes texels 3D entities and allows their 3D warping during the rendering stage.
Reference: 11. <author> Leonard McMillan. </author> <title> An Image-Based Approach To Three-Dimensional Computer Graphics. </title> <institution> University of North Carolina at Chapel Hill, Department of Computer Science , Ph.D. dissertation, </institution> <year> 1997. </year>
Reference-contexts: They are floating in space right in front of the object hit by the corresponding solid angles (see Figure 4). At rendering time, zexels are warped from the reference viewpoint space into the reflected viewpoint space. This operation is performed by forward warping <ref> [ 11] </ref>[10] and by taking into account the geometry of the mirror and the current viewpoint ( Figure 5). After warping all zexels of all the mirrors in the scene, the geometry (except the mirror polygons) is rendered on the same buffer. <p> As we can have more than one zexel mapping onto the same pixel in the reflected image, we need to break the ambiguity and take the one closer to the viewpoint. This could be done using z-buffering, but the back-to-front traversing (occlusion preserving) proposed by McMillan <ref> [11] </ref> has been shown to be faster. This approach also allows paralellization of the warping algorithm. <p> Under such a representation, the level of detail in the hierarchy is selected based on the distance from the viewer to the specular object. Alternatively, the application of McMillans <ref> [11] </ref> inverse-warping to mirror reflections is also under investigation. Instead of warping all the zexels from the reflection map into the specular surface, inverse-warping indexes the reflection map similarly to the traditional reflection mapping. Pixels on the specular surface are mapped into zexels in the depth-preserving reflection map.
Reference: 12. <author> Tom McReynolds et. </author> <title> al . Programming with OpenGL: Advanced Techniques. </title> <note> In SIGGRAPH 97 Course Notes, Ed.: ACM SIGGRAPH, </note> <month> August </month> <year> 1997. </year>
Reference-contexts: However, they add non-static shading and visual cues to the scenes, which make them more interesting for walkthroughs. A few approaches exist to render mirrorlike reflections but they are either too slow or inaccurate for practical use in interactive walkthroughs <ref> [ 12] </ref>[8][4][9] [13][14]. Ray tracing is the most accurate technique to compute mirror reflections, but it is also the slowest. Reflection mapping provides quick mirror reflections, but it is inaccurate. <p> If there is a single planar mirror in the scene, a two-pass approach suffices. In the first pass, the reflected image of the scene is rendered. In the second pass, the rest of the scene (non-mirror surfaces) is rendered <ref> [12] </ref>. The first pass takes the eye-point, E p , and the eyedirection, E d , reflects them according to the planar mirror, and renders the scene from that reflected location and reflected view-direction ( M p d in Figure 1).
Reference: 13. <institution> SGI OpenGL Optimizer. </institution> <note> http://www.sgi.com/Technology/openGL/optimizer_wp.html, 1997. </note>
Reference: 14. <author> Douglas Voorhies and Jim Foran. </author> <title> Reflection Vector Shading Hardware. </title> <booktitle> In Proceedings of ACM SIGGRAPH 1994, </booktitle> <pages> pp. 163166. </pages>
Reference-contexts: At rendering time, a reflection vector is computed per pixel ( r 1 2 3 in Figure 3) using equation (2). Texture coordinates are derived from the reflection vector, as explained in <ref> [ 14] </ref>, and index the texture maps captured in 4 the previous phase to give the color of the specular reflection at each pixel ( Figure 3). The reflection on the specular surface reconstructs the color of the surrounding environment but only approximates the geometry of the reflected scene. cell.
Reference: 15. <institution> Wolberg, George. Digital Image Warping . IEEE Computer Science Press, </institution> <address> Los Alamitos, CA, </address> <year> 1990. </year> <title> 11 reflection mapping (right) for a simple model. 12 reflection mapping (right) for a real-world model. </title>
Reference-contexts: We call it depth-preserving reflection mapping. As an alternative for computing mirrorlike reflections for planar surfaces at interactive frame rates, we propose a modified version of reflection mapping that exploits 3D image warping <ref> [ 15] </ref>. Instead of projecting the scene onto the surface of the reflection cell, we preserve depth (disparity [ 10]) at e ach texel of the reflection map ( Figure 4). Both color and depth are stored at each texel.
References-found: 15

