URL: http://www.pdos.lcs.mit.edu/papers/nygren-mengthesis-pan-feb98.ps
Refering-URL: http://www.pdos.lcs.mit.edu/papers/nygren-mengthesis-pan-feb98.html
Root-URL: 
Title: The Design and Implementation of a High-Performance Active Network Node  
Author: by Erik L. Nygren M. Frans Kaashoek Arthur C. Smith 
Degree: Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degree of Master of Engineering in Computer Science and Engineering at the  All rights reserved. Author  Certified by  Associate Professor Thesis Supervisor Accepted by  Chairman, Department Committee on Graduate Theses  
Date: February 1998  February 4, 1998  
Affiliation: MASSACHUSETTS INSTITUTE OF TECHNOLOGY  c Massachusetts Institute of Technology 1998.  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Ali-Reza Adl-Tabatabai, Geoff Langdale, Steven Lucco, and Robert Wahbe. </author> <title> Efficient and Language-Independent Mobile Programs. </title> <booktitle> In PLDI '96, </booktitle> <pages> pages 127-136, </pages> <address> Philadephia, Pennsylvania, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: There are a large number of other possible mobile code systems, such as Juice [13] [18], that might be useful, if only for inspiration. Other mobile code and dynamic code generation technologies that may be useful include OmniWare <ref> [1] </ref>, Proof-Carrying Code [22], Sandboxing [31], and vcode [9]. These are compared in a number of active networking papers including [34] and [29].
Reference: [2] <author> D. Scott Alexander, Marianne Shaw, Scott M. Nettles, and Jonathan M. Smith. </author> <title> Active Bridging. </title> <booktitle> In Proceedings of the ACM SIGCOMM'97 Conference on Communication Architectures, Protocols, and Applications, </booktitle> <address> Cannes, France, </address> <month> Septem-ber </month> <year> 1997. </year>
Reference-contexts: A group at U. Penn and Bell Communications has been working on developing a programmable switch and on developing Caml and SML-based programming language technologies that may be used in future active networks [25]. They have implemented and tested an active bridge <ref> [2] </ref> written in Caml that runs in user-space under Linux. However, their performance measurements are substantially slower that the results measured with the PAN system. The University of Arizona's Liquid Software [15] project is developing technologies for the high-performance compilation of mobile code.
Reference: [3] <author> Michael Beck, Harald Bohme, Mirko Dziadzka, Ulrich Kunitz, Robert Magnus, and Dirk Verworner. </author> <title> Linux Kernel Internals. </title> <publisher> Addison-Wesley, </publisher> <address> Harlow, England, </address> <note> second edition, </note> <year> 1998. </year>
Reference-contexts: The networking layers of most modern UNIX-like operating systems provide some sort of buffer-management system in order to efficiently utilize memory and in order to minimize the number of times data needs to be copied or touched (for example, mbufs within BSD [20] and sk buffs within Linux <ref> [3] </ref>). Software segments provide a buffer management system for PAN that is able to encapsulate the buffer management systems of different operating systems, allowing code objects to run efficiently without knowing anything about the underlying operating system.
Reference: [4] <author> Brian N. Bershad, Stefan Savage, Przemys law Pardyak, Emin Gun Sirer, Marc Fiuczynski, David Becker, Susan Eggers, and Craig Chambers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles (SOSP), </booktitle> <pages> pages 267-284, </pages> <address> Copper Mountain Resort, Colorado, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Chapter 6 discusses future directions which PAN my take. Finally, Chapter 7 presents some conclusions drawn from the results of this thesis. 13 Chapter 2 Related Work The trend towards extensible systems is hardly new. Operating system architectures such as Exokernels [11] and SPIN <ref> [4] </ref> allow user applications to extend the operating system's functionality. Languages environments such as Java [14] allow web browsers and other end applications to be dynamically extended to run applets.
Reference: [5] <author> Samrat Bhattacharjee, Kenneth L. Calvert, and Ellen W. Zegura. </author> <title> Implementation of an Active Networking Architecture. Networking and Telecommunications Group, </title> <institution> College of Computing, Georgia Tech, </institution> <note> White paper presented at Gigabit Switch Technology Workshop, </note> <institution> Washington University, St. Louis, </institution> <month> July </month> <year> 1996. </year>
Reference-contexts: The Netscript system provides a "universal" abstraction of a programmable network device and a "dynamic" "dataflow" language. A project at GeorgiaTech <ref> [5] </ref> is developing a programmable switch approach active network. They are investigating using active networks as a tool for dealing with network congestion problems.
Reference: [6] <author> William Clinger, Jonathan Reese, et al. </author> <title> Revised 4 Report on the Algorithmic Language Scheme. </title> <booktitle> ACM Lisp Pointers IV, </booktitle> <volume> 4(3) </volume> <pages> 1-55, </pages> <month> July-September </month> <year> 1991. </year> <month> 85 </month>
Reference-contexts: Each node configures itself and builds up a routing table from a configuration file written in the Scheme <ref> [6] </ref> programming language and parsed using the SIOD embeddable Scheme interpreter. The routing table is inserted from the configuration file into the node with a single Scheme function call.
Reference: [7] <author> Drew Dean, Edward W. Felten, and Dan S. Wallach. </author> <title> Java Security: From HotJava to Netscape and Beyond. </title> <booktitle> In Proceedings of the 1996 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 190-200, </pages> <address> Oakland, California, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: In addition, it is not as easy to verify as some other systems and it has a number of security problems inherent to its design <ref> [7] </ref>. It may also not be possible to achieve many of the active network performance requirements within Java. On the other hand, using the JavaVM bytecode would not only increase PAN's compatibility with ANTS, but could greatly increase the size of PAN's audience.
Reference: [8] <author> Giovanna DiMarzo, Murhimanya Muhugusa, Christian Tschudin, and Jurgen Harms. </author> <title> The Messenger Paradigm and its Implications on Distributed Systems. </title> <booktitle> In Proceedings of the ICC'95 Workshop on Intelligent Computer Communication, </booktitle> <pages> pages 79-94, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Two somewhat different approaches have been taken to active networking: the capsule-based (or integrated) approach, which is what PAN uses, and the programmable switch (or discrete) approach. The integrated approach revolves around programming in the messenger paradigm <ref> [8] </ref> | capsules containing both code and data move around the network and are executed on the nodes they pass through. In the discrete approach, functionality can be added to nodes out-of-band from the packets being processed by the node.
Reference: [9] <author> Dawson R. Engler. </author> <title> vcode: A Retargetable, Extensible, Very Fast Dynamic Code Generation System. </title> <booktitle> In Proceedings of the 23rd Annual ACM Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 160-170, </pages> <address> Philade-phia, Pennsylvania, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: There are a large number of other possible mobile code systems, such as Juice [13] [18], that might be useful, if only for inspiration. Other mobile code and dynamic code generation technologies that may be useful include OmniWare [1], Proof-Carrying Code [22], Sandboxing [31], and vcode <ref> [9] </ref>. These are compared in a number of active networking papers including [34] and [29].
Reference: [10] <author> Dawson R. Engler and M. Frans Kaashoek. DPF: </author> <title> Fast, Flexible Message De-multiplexing using Dynamic Code Generation. </title> <booktitle> In Proceedings of the ACM SIG-COMM'96 Conference on Communication Architectures, Protocols, and Applications, </booktitle> <pages> pages 53-59, </pages> <address> Stanford, California, </address> <month> August </month> <year> 1996. </year>
Reference: [11] <author> Dawson R. Engler, M. Frans Kaashoek, and James O'Toole, Jr. Exokernel: </author> <title> An Operating System Architecture for Application-Level Resource Management. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles (SOSP), </booktitle> <pages> pages 251-266, </pages> <address> Copper Mountain Resort, Colorado, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Chapter 6 discusses future directions which PAN my take. Finally, Chapter 7 presents some conclusions drawn from the results of this thesis. 13 Chapter 2 Related Work The trend towards extensible systems is hardly new. Operating system architectures such as Exokernels <ref> [11] </ref> and SPIN [4] allow user applications to extend the operating system's functionality. Languages environments such as Java [14] allow web browsers and other end applications to be dynamically extended to run applets. <p> Code objects that did not free up enough persistent state would be punished by the node. This mechanism is similar to those used in the Exokernel <ref> [11] </ref>.
Reference: [12] <editor> FIPS 180-1. </editor> <title> Secure Hash Standard. </title> <type> U.S. </type> <institution> Department of Commerce/N.I.S.T., National Technical Information Service, Springfield, Virgnia, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: This allows code objects to set up and clean up their soft state as appropriate. 32 4.5.1 Code object naming Code objects are named with a cryptographic hash (such as SHA-1 <ref> [12] </ref> or MD5 [23]) of the code object's code. This allows code objects to be uniquely identified.
Reference: [13] <author> Michael Franz. </author> <title> Code-Generation On-the-Fly: A Key for Portable Software. </title> <type> PhD thesis, </type> <institution> Institute for Computer Systems, ETH Zurich, </institution> <year> 1994. </year>
Reference-contexts: There are also a large number of development tools already available for working with JavaVM bytecode. There are a large number of other possible mobile code systems, such as Juice <ref> [13] </ref> [18], that might be useful, if only for inspiration. Other mobile code and dynamic code generation technologies that may be useful include OmniWare [1], Proof-Carrying Code [22], Sandboxing [31], and vcode [9]. These are compared in a number of active networking papers including [34] and [29].
Reference: [14] <author> James Gosling and Henry McGilton. </author> <title> The Java Language Environment (White Paper). </title> <month> October </month> <year> 1995. </year> <month> 86 </month>
Reference-contexts: Operating system architectures such as Exokernels [11] and SPIN [4] allow user applications to extend the operating system's functionality. Languages environments such as Java <ref> [14] </ref> allow web browsers and other end applications to be dynamically extended to run applets. Possibly the first programmable network was a programmable packet radio network called Softnet [39] that was developed in Sweden in the early 1980s. <p> Any executable code designed for use within active network must somehow be mobile, meaning that it does not depend on any specific processor or operating system. Most existing mobile code systems (such as Java <ref> [14] </ref>, Perl, ML and LISP variants, Safe-Tcl, and PCC) are either too general, too specific, or too heavy-weight to be the ideal solution for a practical active networking system [17]. PAN does not yet fully address the code mobility problem.
Reference: [15] <author> John Hartman, Udi Manber, Larry Peterson, and Todd Proebsting. </author> <title> Liquid Soft--ware: A New Paradigm for Networked Systems. </title> <type> Technical Report TR 96-11, </type> <institution> The University of Arizona Department of Computer Science, </institution> <month> November </month> <year> 1996. </year>
Reference-contexts: They have implemented and tested an active bridge [2] written in Caml that runs in user-space under Linux. However, their performance measurements are substantially slower that the results measured with the PAN system. The University of Arizona's Liquid Software <ref> [15] </ref> project is developing technologies for the high-performance compilation of mobile code. The project is also looking at mobile search applications.
Reference: [16] <author> Norman C. Hutchinson and Larry L. Peterson. </author> <title> The x-Kernel: An Architecture for Implementing Network Protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-67, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: However, their performance measurements are substantially slower that the results measured with the PAN system. The University of Arizona's Liquid Software [15] project is developing technologies for the high-performance compilation of mobile code. The project is also looking at mobile search applications. The x-kernel <ref> [16] </ref>, also developed at University of Arizona, is a network-oriented operating system that provides a consistent interface for constructing and composing network protocol stacks that can be configured into the kernel at compile-time. The BBN Smart Packets project [17] is looking into lightweight, but still expressive, capsule-based active networks.
Reference: [17] <author> Alden W. Jackson and Craig Partridge. </author> <title> Smart Packets, A DARPA-Funded Research Project. </title> <booktitle> Slides from 2nd Active Nets Workshop, </booktitle> <month> March </month> <year> 1997. </year>
Reference-contexts: The project is also looking at mobile search applications. The x-kernel [16], also developed at University of Arizona, is a network-oriented operating system that provides a consistent interface for constructing and composing network protocol stacks that can be configured into the kernel at compile-time. The BBN Smart Packets project <ref> [17] </ref> is looking into lightweight, but still expressive, capsule-based active networks. After having evaluated existing languages, they are developing a highly compact bytecode language for their active networking system. Many aspects of their system are similar to what was developed in this thesis project. <p> Most existing mobile code systems (such as Java [14], Perl, ML and LISP variants, Safe-Tcl, and PCC) are either too general, too specific, or too heavy-weight to be the ideal solution for a practical active networking system <ref> [17] </ref>. PAN does not yet fully address the code mobility problem. The current implementation distributes code objects that contain Intel ix86 object code in either an ELF or a.out format.
Reference: [18] <author> T. Kistler and M. Franz. </author> <title> A Tree-Based Alternative to Java Byte-Codes. </title> <booktitle> In Proceedings of the International Workshop on Security and Efficiency Aspects of Java '97, </booktitle> <address> Eilat, Israel, </address> <month> January </month> <year> 1997. </year> <note> Also in UC Irvine Technical Report No. 96-58. </note>
Reference-contexts: There are also a large number of development tools already available for working with JavaVM bytecode. There are a large number of other possible mobile code systems, such as Juice [13] <ref> [18] </ref>, that might be useful, if only for inspiration. Other mobile code and dynamic code generation technologies that may be useful include OmniWare [1], Proof-Carrying Code [22], Sandboxing [31], and vcode [9]. These are compared in a number of active networking papers including [34] and [29].
Reference: [19] <author> Eddie Kohler. Prolac: </author> <title> A Language for Protocol Compilation. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> August </month> <year> 1997. </year>
Reference-contexts: Rather than just writing large monolithic code objects in C, it may make sense to write code objects in a language such as Prolac <ref> [19] </ref> that is designed specifically for the purpose of writing and extending protocols in a modular fashion. Although active networks allow new protocols to be deployed dynamically, the current system is designed around tightly associating applications with a protocol or a small collection of protocols.
Reference: [20] <author> Samuel J. Le*er, Marshall Kirk McKusick, Michael J. Karels, and John S. Quar-terman. </author> <title> The Design and Implementation of the 4.3BSD UNIX Operating System. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1989. </year>
Reference-contexts: The networking layers of most modern UNIX-like operating systems provide some sort of buffer-management system in order to efficiently utilize memory and in order to minimize the number of times data needs to be copied or touched (for example, mbufs within BSD <ref> [20] </ref> and sk buffs within Linux [3]). Software segments provide a buffer management system for PAN that is able to encapsulate the buffer management systems of different operating systems, allowing code objects to run efficiently without knowing anything about the underlying operating system.
Reference: [21] <author> Li-Wei H. Lehman. </author> <title> Active Reliable Multicast. </title> <type> Draft Paper, </type> <institution> Telemedia Networks and Systems Group, MIT Laboratory for Computer Science, </institution> <month> December </month> <year> 1996. </year>
Reference-contexts: The ANTS system [35] allows for the rapid prototyping of active network ideas and applications through a capsule-based active network system written in Java. A number of sample active network applications have been developed using ANTS [35] <ref> [21] </ref>. This thesis project draws heavily on many of the ideas and application ideas developed through the ANTS work. A group at U.
Reference: [22] <author> George C. Necula and Peter Lee. </author> <title> Safe Kernel Extensions Without Run-Time Checking. </title> <booktitle> In Second Symposium on Operating Systems Design and Implementation (OSDI '96), </booktitle> <pages> pages 229-243, </pages> <address> Seattle, Washington, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: There are a large number of other possible mobile code systems, such as Juice [13] [18], that might be useful, if only for inspiration. Other mobile code and dynamic code generation technologies that may be useful include OmniWare [1], Proof-Carrying Code <ref> [22] </ref>, Sandboxing [31], and vcode [9]. These are compared in a number of active networking papers including [34] and [29].
Reference: [23] <author> Ron Rivest. </author> <title> The MD5 Message-Digest Algorithm. Network Working Group Request for Comments, </title> <month> April </month> <year> 1992. </year> <title> Internet RFC 1321. </title>
Reference-contexts: This allows code objects to set up and clean up their soft state as appropriate. 32 4.5.1 Code object naming Code objects are named with a cryptographic hash (such as SHA-1 [12] or MD5 <ref> [23] </ref>) of the code object's code. This allows code objects to be uniquely identified.
Reference: [24] <author> Jerome H. Saltzer, David P. Reed, and David D. Clark. </author> <title> End-to-end Arguments in System Design. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(2) </volume> <pages> 277-286, </pages> <month> Novem-ber </month> <year> 1984. </year> <month> 87 </month>
Reference-contexts: Because new protocols can be written (or existing protocols can be modified) to provide exactly the functionality that is needed by applications, the large bloat associated with monolithic protocols can be avoided. Active networks take the end-to-end argument <ref> [24] </ref> to the extreme by allowing applications and protocols to do exactly what they need to do exactly where they need to do it. <p> Capsule code is also be responsible for generating and verifying checksums of regions that require them, as appropriate. This approach to giving capsules control over how to utilize a uniform data space follows from the end-to-end argument <ref> [24] </ref> and from the extensible systems approach of providing a minimal set of core functionality in order to give maximum flexibility to application developers. 4.6.2 Capsule execution environments When a capsule is received at a node, an environment is created for it.
Reference: [25] <author> J. M. Smith, D. J. Farber, C. A. Gunter, S. M. Nettles, D. C. Feldmeier, and W. D. Sincoskie. SwitchWare: </author> <title> Accelerating Network Evolution (White Paper). </title> <month> June </month> <year> 1996. </year>
Reference-contexts: A group at U. Penn and Bell Communications has been working on developing a programmable switch and on developing Caml and SML-based programming language technologies that may be used in future active networks <ref> [25] </ref>. They have implemented and tested an active bridge [2] written in Caml that runs in user-space under Linux. However, their performance measurements are substantially slower that the results measured with the PAN system.
Reference: [26] <author> W. Richard Stevens. </author> <title> UNIX Network Programming. </title> <editor> P. T. R. </editor> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1990. </year>
Reference-contexts: Abstraction layers hide the implementations from both applications and code objects. Applications communicate to user-space nodes across UNIX domain stream sockets <ref> [26] </ref>. Capsules are sent as a word indicating the length of the capsule followed by the capsule data.
Reference: [27] <editor> W. Richard Stevens. TCP/IP Illustrated, </editor> <volume> Volume 1. </volume> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1994. </year>
Reference-contexts: Although active code may be sent from servers to clients (such as web applets) and from clients to servers (such as OO database queries), internal network nodes (such as routers) passively switch packets. This infrastructure is standardized using monolithic protocols such as IP <ref> [27] </ref>. Adding functionality to these core network protocols is performed by adding complexity to the protocols through a lengthy process of prototyping, standardizing, developing, and deploying.
Reference: [28] <author> D. L. Tennenhouse, S. J. Garland, L. Shrira, and M. F. Kaashoek. </author> <title> From Internet to ActiveNet. </title> <institution> MIT Laboratory for Computer Science, Request for Comments, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: Possibly the first programmable network was a programmable packet radio network called Softnet [39] that was developed in Sweden in the early 1980s. The current wave of active network development is fairly recent, having gotten off in 1996 with [30] and <ref> [28] </ref>. Much of the work in the area has been focused on either developing long term technologies or on developing prototype or proof-of-concept systems. A fairly complete survey of ongoing active network research was recently published [29].
Reference: [29] <author> David L. Tennenhouse, Jonathan M. Smith, W. David Sincoskie, David J. Wetherall, and Gary J. Minden. </author> <title> A Survey of Active Network Research. </title> <journal> IEEE Communications Magazine, </journal> <volume> 35(1) </volume> <pages> 80-86, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: Much of the work in the area has been focused on either developing long term technologies or on developing prototype or proof-of-concept systems. A fairly complete survey of ongoing active network research was recently published <ref> [29] </ref>. Two somewhat different approaches have been taken to active networking: the capsule-based (or integrated) approach, which is what PAN uses, and the programmable switch (or discrete) approach. <p> Other mobile code and dynamic code generation technologies that may be useful include OmniWare [1], Proof-Carrying Code [22], Sandboxing [31], and vcode [9]. These are compared in a number of active networking papers including [34] and <ref> [29] </ref>. In the end, the best solution may be to design a mobile code system designed specifically to be simple, flexible, and fast in an active network environment. 6.3 Safety and security The current implementation of PAN does not yet provide either node or global network safety or security.
Reference: [30] <author> David L. Tennenhouse and David J. Wetherall. </author> <title> Towards an Active Network Architecture. </title> <journal> Computer Communication Review, </journal> <volume> 26(2) </volume> <pages> 5-18, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: Until now, the only solution other than adapting protocols has been to place specialized 9 servers within the network to perform tasks such as multicast tunneling, web caching, and network monitoring. By allowing computation to happen within the network as data passes through nodes, active networks <ref> [30] </ref> provide a different solution to these problems. Rather than standardizing on a protocol that describes how nodes should forward packets, an active network standardizes on an execution environment that is provided to the capsules that pass through network nodes. <p> Possibly the first programmable network was a programmable packet radio network called Softnet [39] that was developed in Sweden in the early 1980s. The current wave of active network development is fairly recent, having gotten off in 1996 with <ref> [30] </ref> and [28]. Much of the work in the area has been focused on either developing long term technologies or on developing prototype or proof-of-concept systems. A fairly complete survey of ongoing active network research was recently published [29].
Reference: [31] <author> Robert Wahbe, Steven Lucco, Thomas E. Anderson, and Susan L. Graham. </author> <title> Efficient Software-Based Fault Isolation. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles (SOSP), </booktitle> <pages> pages 203-216, </pages> <address> Asheville, North Carolina, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: When a capsule finishes execution or a code object is removed from the code cache, they can easily unreference all of their associated software segments by destroying the software segment ring. 4.7.2 Why not just use sandboxing? Some people have suggested that PAN could simply use sandboxing <ref> [31] </ref> (rewriting code to prevent memory accesses outside of a confined region) or create a single protected region of memory for each capsule to execute in. <p> There are a large number of other possible mobile code systems, such as Juice [13] [18], that might be useful, if only for inspiration. Other mobile code and dynamic code generation technologies that may be useful include OmniWare [1], Proof-Carrying Code [22], Sandboxing <ref> [31] </ref>, and vcode [9]. These are compared in a number of active networking papers including [34] and [29].
Reference: [32] <author> Larry Wall, Tom Christiansen, and Randal L. Schwartz. </author> <title> Programming Perl. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Sebastopol, California, </address> <note> second edition, </note> <year> 1996. </year>
Reference-contexts: Given that reference-counting is used by such widely-used languages as Perl <ref> [32] </ref>, it shouldn't place too many constraints on application-writers. In addition, reference-counting reduces the complexity and real-time problems sometimes associated with garbage collectors. However, it may be eventually necessary to have a garbage collector that occasionally runs and attempts to find memory leaks. <p> Written in object-oriented Perl 5 <ref> [32] </ref> and using a Perl version of Berkeley YACC, the serializer generator is a compiler that takes a file containing the description of a structure and outputs one or more files containing C structures and C code to read the structure contents from a panStream (performing any byte-swaps needed) or to
Reference: [33] <author> Deborah A. Wallach, Dawson R. Engler, and M. Frans Kaashoek. ASHs: </author> <title> Application-Specific Handlers for High-Performance Messaging. </title> <booktitle> In Proceedings of the ACM SIGCOMM'96 Conference on Communication Architectures, Protocols, and Applications, </booktitle> <address> Stanford, California, </address> <month> August </month> <year> 1996. </year> <month> 88 </month>
Reference-contexts: It might also be possible to make panSerGen generate code to interleave message processing steps (such as performing checksums) along with the reads or writes <ref> [33] </ref>. 4.7.5 Soft state, persistent software segments, and containers It is often desirable or neccessary for protocols to keep a degree of state within nodes in the network.
Reference: [34] <author> David Wetherall. </author> <title> Safety Mechanisms for Mobile Code. </title> <type> Area Exam Paper, </type> <institution> MIT Laboratory for Computer Science, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: Other mobile code and dynamic code generation technologies that may be useful include OmniWare [1], Proof-Carrying Code [22], Sandboxing [31], and vcode [9]. These are compared in a number of active networking papers including <ref> [34] </ref> and [29].
Reference: [35] <author> David J. Wetherall, John V. Guttag, and David L. Tennenhouse. </author> <title> ANTS: A Toolkit for Building and Dynamically Deploying Network Protocols. </title> <booktitle> In IEEE OPENARCH'98, </booktitle> <address> San Francisco, California, </address> <month> April </month> <year> 1998. </year>
Reference-contexts: A number of projects at MIT have been making good progress towards demonstrating the usefulness of active networks. The active IP Option [36] project embedded small Tcl programs in the option fields of IPv4 packets. The ANTS system <ref> [35] </ref> allows for the rapid prototyping of active network ideas and applications through a capsule-based active network system written in Java. A number of sample active network applications have been developed using ANTS [35] [21]. <p> The ANTS system <ref> [35] </ref> allows for the rapid prototyping of active network ideas and applications through a capsule-based active network system written in Java. A number of sample active network applications have been developed using ANTS [35] [21]. This thesis project draws heavily on many of the ideas and application ideas developed through the ANTS work. A group at U. <p> Many of the active networking ideas used in this 19 project come from the ANTS project <ref> [35] </ref>, a prototype active network that is being used at MIT for experimenting with active networking ideas and applications. In order to allow applications designed on ANTS to be easily implemented on PAN, PAN uses capsule programming paradigms and node interfaces similar to those provided by ANTS. <p> Finally, Section 4.10 describes some miscellaneous utility functions that PAN nodes provide to code objects, and Section 4.11 explains the motivation behind the some of the interface differences between PAN and ANTS. 4.1 Architecture overview The PAN system uses an active network architecture similar to that used in the ANTS <ref> [35] </ref> system. A PAN network consists of a number of nodes interconnected with each other across unreliable network links, such that any node can potentially communicate with any other node (except in the case of network failures) by sending a capsule across one or more network links. <p> If any of the symbols in a code object are unresolvable, the code object fails to load. 4.5.3 Code object distribution and loading Code distribution is performed using a scheme discussed in <ref> [35] </ref>. When a capsule is received by a node that doesn't recognize its code object name, the node sends a capsule requesting the named code object back to the code object home specified in the capsule header. <p> In addition, PAN does not require that a destination address be contained in capsule headers. This is because some protocols, such as those for multicast, may not involve the concept of a single destination. 4.11.3 No unified soft state cache Unlike ANTS <ref> [35] </ref>, PAN has no single, unified soft state cache. This is because of the realization that different code objects have very different needs and requirements for how they store data within a node's soft state.
Reference: [36] <author> David J. Wetherall and David L. Tennenhouse. </author> <title> The active IP Option. </title> <booktitle> In Proceedings of the 7th ACM SIGOPS European Workshop, </booktitle> <address> Connemara, Ireland, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: This is because code is executed for each packet that has associated code. The discrete approach is much better suited to connection-oriented networks than the integrated approach. A number of projects at MIT have been making good progress towards demonstrating the usefulness of active networks. The active IP Option <ref> [36] </ref> project embedded small Tcl programs in the option fields of IPv4 packets. The ANTS system [35] allows for the rapid prototyping of active network ideas and applications through a capsule-based active network system written in Java.
Reference: [37] <author> Edward Wobber, Mart in Abadi, Michael Burrows, and Butler Lampson. </author> <title> Authentication in the Taos Operating System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(1) </volume> <pages> 3-32, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: In the extreme, the only solution to this problem may be to deploy a complicated distributed system security scheme similar to the one used in Taos <ref> [37] </ref>.
Reference: [38] <author> Yechiam Yemini and Sushil da Silva. </author> <title> Towards Programmable Networks (White Paper). </title> <booktitle> In IFIP/IEEE International Workshop on Distributed Systems: Operations and Management, </booktitle> <address> L'Aquila, Italy, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: Many aspects of their system are similar to what was developed in this thesis project. The most significant difference is their focus on network management and diagnosis applications, which have stronger security requirements and weaker performance requirements than PAN. 15 The Netscript <ref> [38] </ref> project at Columbia University is developing a language, pro-gramming model, and run-time environment for a discrete approach active network where agents set up packet dataflow structures and allocate resources. The Netscript system provides a "universal" abstraction of a programmable network device and a "dynamic" "dataflow" language.
Reference: [39] <author> Zander and Forchheimer. Softnet: </author> <title> An Approach to High-Level Packet Communication. </title> <booktitle> In ARRL 2nd Computer Networking Conference, </booktitle> <year> 1983. </year> <month> 89 </month>
Reference-contexts: Languages environments such as Java [14] allow web browsers and other end applications to be dynamically extended to run applets. Possibly the first programmable network was a programmable packet radio network called Softnet <ref> [39] </ref> that was developed in Sweden in the early 1980s. The current wave of active network development is fairly recent, having gotten off in 1996 with [30] and [28].
References-found: 39

