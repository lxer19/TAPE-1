URL: http://www.idt.unit.no/IDT/grupper/DB-grp/tech_papers/BNCOD97_snowplow/bncod.ps
Refering-URL: http://www.idt.unit.no/IDT/grupper/DB-grp/tech_papers/tech_papers.html
Root-URL: 
Email: fkjellb,noervaagg@idt.unit.no  
Title: Improved and Optimized Partitioning Techniques in Database Query Processing  
Author: Kjell Bratbergsengen and Kjetil Ntrv-ag 
Keyword: Relational algebra, partitioning methods, buffer management, query processing  
Address: 7034 Trondheim, Norway  
Affiliation: Department of Computer Science Norwegian University of Science and Technology,  
Abstract: In this paper we present two improvements to the partitioning process: 1) A new dynamic buffer management strategy is employed to increase the average block size of I/O-transfers to temporary files, and 2) An optimal switching between three different variants of the partitioning methods that ensures minimal partitioning cost. The expected performance gain resulting from the new management strategy is about 30% for a reasonable resource configuration. The performance gain decreases with increasing available buffer space. The different partitioning strategies (partial partitioning or hybrid hashing, one pass partitioning, and multipass partitioning) are analyzed, and we present the optimal working range for these, as a function of operand volume and available memory. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> K. Bratbergsengen. </author> <title> Hashing Methods and Relational Algebra Operations. </title> <booktitle> In Pro ceedings of the 10th International Conference on VLDB, </booktitle> <year> 1984. </year>
Reference-contexts: Operand classes and corresponding partitioning strategies. 4 The Circular Track Snow Plow Strategy With the traditional splitting strategy, as described in <ref> [2, 1, 7, 4, 10] </ref>, we have a fixed size of memory for each group. When a new tuple arrive, it is moved to its block buffer. Whenever a block buffer is full, it is written to disk.
Reference: 2. <author> K. Bratbergsengen, R. Larsen, O. Risnes, and T. Aandalen. </author> <title> A Neighbor Con nected Processor Network for Performing Relational Algebra Operations. </title> <booktitle> In Fifth Workshop on Computer Architecture for Non-Numeric Processing, </booktitle> <address> March 11-14, </address> <booktitle> 1980 (SIGIR Vol. </booktitle> <volume> XV No. 2, SIGMOD Vol.X No. 4), </volume> <year> 1980. </year>
Reference-contexts: Operand classes and corresponding partitioning strategies. 4 The Circular Track Snow Plow Strategy With the traditional splitting strategy, as described in <ref> [2, 1, 7, 4, 10] </ref>, we have a fixed size of memory for each group. When a new tuple arrive, it is moved to its block buffer. Whenever a block buffer is full, it is written to disk.
Reference: 3. <author> D. L. Davidson and G. Graefe. </author> <title> Memory-Contention Responsive Hash Joins. </title> <booktitle> In Proceedings of the 20th International Conference on VLDB, </booktitle> <year> 1994. </year> <title> Fig. 5. Performance gain by using the snow plow strategy. </title>
Reference: 4. <author> D. DeWitt, R. Katz, F. Olken, L. Shapiro, M. Stonebraker, and D. Wood. </author> <title> Im plementation Techniques for Main Memory Database Systems. </title> <booktitle> In Proc. ACM SIGMOD Conf., </booktitle> <year> 1984. </year>
Reference-contexts: Operand classes and corresponding partitioning strategies. 4 The Circular Track Snow Plow Strategy With the traditional splitting strategy, as described in <ref> [2, 1, 7, 4, 10] </ref>, we have a fixed size of memory for each group. When a new tuple arrive, it is moved to its block buffer. Whenever a block buffer is full, it is written to disk.
Reference: 5. <author> G. Graefe. </author> <title> Query Evaluation Techniques for Large Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 25(2), </volume> <year> 1993. </year>
Reference: 6. <author> G. Graefe. </author> <title> Volcano | An Extensible and Parallel Query Evaluation System. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 6(1), </volume> <year> 1994. </year>
Reference: 7. <author> M. Kitsuregawa, H. Tanaka, and T. Motooka. </author> <title> Application of Hash to Data Base Machine and its Architecture. </title> <journal> New Generation Computing, </journal> <volume> 1(1), </volume> <year> 1983. </year>
Reference-contexts: Operand classes and corresponding partitioning strategies. 4 The Circular Track Snow Plow Strategy With the traditional splitting strategy, as described in <ref> [2, 1, 7, 4, 10] </ref>, we have a fixed size of memory for each group. When a new tuple arrive, it is moved to its block buffer. Whenever a block buffer is full, it is written to disk.
Reference: 8. <author> D. Knuth. </author> <title> The Art of Computer Programming. Sorting and Searching. </title> <publisher> Addison Wesley Publishing Company Inc., </publisher> <year> 1973. </year>
Reference-contexts: This method is analogous to the replacement selection sort which is used for initial sorting in sort-merge programs. Why the average block size is 2M=p, is well described by Knuth in <ref> [8] </ref>. The situation can be compared to a snow plow on a circular track of length l. The plow is always plowing full depth snow. Just behind the plow, the depth is zero, and the average snow depth on the track is one half the full depth h.
Reference: 9. <author> M. Nakayama, M. Kitsuregawa, and M. Takagi. </author> <title> Hash-Partitioned Join Method Using Dynamic Destaging Strategy. </title> <booktitle> In Proceedings of the 14th International Conference on VLDB, </booktitle> <year> 1988. </year>
Reference: 10. <author> L. D. Shapiro. </author> <title> Join Processing in Database Systems with Large Main Memories. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 11(3), </volume> <year> 1986. </year>
Reference-contexts: Operand classes and corresponding partitioning strategies. 4 The Circular Track Snow Plow Strategy With the traditional splitting strategy, as described in <ref> [2, 1, 7, 4, 10] </ref>, we have a fixed size of memory for each group. When a new tuple arrive, it is moved to its block buffer. Whenever a block buffer is full, it is written to disk.
Reference: 11. <author> H. Zeller and J. Gray. </author> <title> An Adaptive Hash Join Algorithm for Multiuser Environ ments. </title> <booktitle> In Proceedings of the 16th International Conference on VLDB, </booktitle> <year> 1990. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
References-found: 11

