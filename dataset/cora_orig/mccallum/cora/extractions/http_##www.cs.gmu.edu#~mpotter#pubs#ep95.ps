URL: http://www.cs.gmu.edu/~mpotter/pubs/ep95.ps
Refering-URL: http://www.cs.gmu.edu/~mpotter/pubs/ep95.html
Root-URL: 
Title: Evolving Complex Structures via Co- operative Coevolution  
Author: Kenneth A. De Jong and Mitchell A. Potter 
Abstract: A cooperative coevolutionary approach to learning complex structures is presented which, although preliminary in nature, appears to have a number of advantages over non-coevolutionary approaches. The cooperative coevolutionary approach encourages the parallel evolution of substructures which interact in useful ways to form more complex higher level structures. The architecture is designed to be general enough to permit the inclusion, if appropriate, of a priori knowledge in the form of initial biases towards particular kinds of decompositions. A brief summary of initial results obtained from testing this architecture in several problem domains is presented which shows a significant speedup over more traditional non-coevolutionary approaches. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Cohoon, J., S. Hegde, W. Martin, and D. </author> <title> Richards (1987). Punctuated equilibria: A parallel genetic algorithm. </title> <editor> In J. Grefenstette (Ed.), </editor> <booktitle> Proceedings of the Second International Conference on Genetic Algorithms, </booktitle> <pages> pp. 148-154. </pages> <publisher> Lawrence Erlbaum Associates. </publisher>
Reference: <author> Davidor, Y. </author> <year> (1991). </year> <title> A naturally occuring niche & species phenomenon: The model and first results. </title> <editor> In R. Belew and L. Booker (Eds.), </editor> <booktitle> Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <pages> pp. 257-263. </pages> <publisher> Morgan Kaufmann. </publisher> <editor> de Garis, H. </editor> <year> (1990). </year> <title> Building artificial nervous systems using genetically programmed neural network modules. </title> <editor> In B. Porter and R. Mooney (Eds.), </editor> <booktitle> Proceedings of the Seventh International Conference on Machine Learning, </booktitle> <pages> pp. 132-139. </pages>
Reference: <author> Deb, K. and D. </author> <title> Goldberg (1989). An investigation of niche and species formation in genetic function optimization. </title> <editor> In J. Schaf-fer (Ed.), </editor> <booktitle> Proceedings of the Third International Conference on Genetic Algorithms, </booktitle> <pages> pp. 42-50. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> DeJong, K. </author> <year> (1975). </year> <title> Analysis of Behavior of a Class of Genetic Adaptive Systems. </title> <type> Ph. D. thesis, </type> <institution> University of Michigan, </institution> <address> Ann Arbor, MI. </address>
Reference-contexts: function with relatively little interdependency between terms and whose primary characteristic is the existence of many suboptimal peaks whose values increase as the distance from the global optimum point increases (Muhlenbein, Schomisch, and Born 1991; Gordon and Whitley 1993), and the Rosen-brock function from the original De Jong test suite <ref> (DeJong 1975) </ref>, which is a function of two highly interdependent variables and is characterized by an extremely deep parabolic valley that leads to the global minimum. The results from the Rastrigin optimization experiments are shown in figure 2.
Reference: <author> Forrest, S., B. Javornik, R. Smith, and A. </author> <title> Perelson (1993). Using genetic algorithms to explore pattern recognition in the immune system. </title> <booktitle> Evolutionary Computation 1 (3), </booktitle> <pages> 191-211. </pages>
Reference: <author> Giordana, A., L. Saitta, and F. </author> <month> Zini </month> <year> (1994). </year> <title> Learning disjunctive concepts by means of genetic algorithms. </title> <editor> In W. Cohen and H. Hirsh (Eds.), </editor> <booktitle> Proceedings of the Eleventh International Conference on Machine Learning, </booktitle> <pages> pp. 96-104. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Gordon, V. and D. </author> <title> Whitley (1993). Serial and parallel genetic algorithms as function optimizers. </title> <editor> In S. Forrest (Ed.), </editor> <booktitle> Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <pages> pp. 177-183. </pages> <publisher> Morgan Kaufmann. </publisher> <editor> 10 Grefenstette, J., C. Ramsey, and A. </editor> <title> Schultz (1990). Learning se-quential decision rules using simulation models and competition. </title> <booktitle> Machine Learning 5 (4), </booktitle> <pages> 355-381. </pages>
Reference: <author> Grosso, P. </author> <year> (1985). </year> <title> Computer Simulations of Genetic Adaptation: Parallel Subcomponent Interaction in a Multilocus Model. </title> <publisher> Ph. </publisher>
Reference: <author> D. </author> <type> thesis, </type> <institution> University of Michigan, </institution> <address> Ann Arbor, MI. </address>
Reference: <author> Hills, D. </author> <year> (1990). </year> <title> Co-evolving parasites improve simulated evolution as an optimization procedure. </title> <editor> In C. Langton, C. Taylor, J. Farmer, and S. Rasmussen (Eds.), </editor> <booktitle> Artificial Life II, </booktitle> <pages> pp. 313-324. </pages> <publisher> Addison-Wesley. </publisher>
Reference-contexts: The previous work that has looked at cooperating rather than competing subpopulations has involved a user 3 specified decomposition of the problem into species (see, for example, (Husbands and Mill 1991) or <ref> (Hills 1990) </ref>). Cooperative coevolutionary algorithms combine and extend ideas from these earlier systems in several ways. A CCA consists of a collection of independent subpopulations, each attempting to evolve sub-components (species) which are useful as modules for achieving more complex structures.
Reference: <author> Holland, J. and J. </author> <title> Reitman (1978). Cognitive systems based on adaptive algorithms. </title> <editor> In D. Waterman and F. Hayes-Roth (Eds.), </editor> <title> Pattern-Directed Inference Systems. </title> <publisher> Academic Press. </publisher>
Reference-contexts: Classifier systems attempt to accomplish this via a single population of interacting rules whose individual fitnesses are determined by their interactions with other rules via a simulated micro-economy <ref> (Holland and Reitman 1978) </ref>. Other extensions have been proposed to encourage the emergence of niches and species in a single population (DeJong 1975; Deb and Goldberg 1989; Davidor 1991; Forrest, Javornik, Smith, and Perelson 1993; Giordana, Saitta, and Zini 1994) in which individual niches compete for the allocation of trials.
Reference: <author> Husbands, P. and F. </author> <title> Mill (1991). Simulated co-evolution as the mechanism for emergent planning and scheduling. </title> <editor> In R. Belew and L. Booker (Eds.), </editor> <booktitle> Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <pages> pp. 264-270. </pages> <publisher> Morgan Kauf-mann. </publisher>
Reference-contexts: In addition, individuals occasionally migrate from one subpopulation (island) to another, so there is a mixing of genetic material. The previous work that has looked at cooperating rather than competing subpopulations has involved a user 3 specified decomposition of the problem into species (see, for example, <ref> (Husbands and Mill 1991) </ref> or (Hills 1990)). Cooperative coevolutionary algorithms combine and extend ideas from these earlier systems in several ways. A CCA consists of a collection of independent subpopulations, each attempting to evolve sub-components (species) which are useful as modules for achieving more complex structures.
Reference: <author> Muhlenbein, H., M. Schomisch, and J. </author> <title> Born (1991). The parallel genetic algorithm as function optimizer. </title> <editor> In R. Belew and L. Booker (Eds.), </editor> <booktitle> Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <pages> pp. 271-278. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Potter, M. and K. </author> <title> De Jong (1994). A cooperative coevolutionary approach to function optimization. </title> <editor> In Y. Davidor and S. H.-P. (Eds.), </editor> <booktitle> Proceedings of the Third Conference on Parallel Problem Solving from Nature, </booktitle> <pages> pp. 249-257. </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: This allowed us focus on the mechanisms of collaboration and credit assignment, and to defer the more difficult issue of emergent problem decomposition to later studies. In the remainder of this section we briefly summarize the coevolutionary function optimization study. For more detail see <ref> (Potter and De Jong 1994) </ref>. If we think of a solution to a function optimization problem as consisting of specifying the value of N parameters (variables), a natural decomposition is to maintain N subpopulations (species) each of which contains competing values for a particular parameter. <p> The additional exploration provided by this second approach enabled the CCGA to perform well on functions with highly interdependent terms while only performing slightly worse than the more greedy approach on functions with relatively independent terms. The interested reader can see <ref> (Potter and De Jong 1994) </ref> for more detail.
Reference: <author> Potter, M., K. De Jong, and J. </author> <title> Grefenstette (1995). A coevolutionary approach to learning sequential decision rules. </title> <type> Technical Report AIC-95-010, </type> <institution> Navy Center for Applied Research in Artificial Intelligence, </institution> <address> Washington DC. </address>
Reference-contexts: Samuel is designed to evolve sets of sequential 6 on Rosenbrock function decision rules to be used by decision making agents (Grefenstette, Ramsey, and Schultz 1990). The study is described in greater detail in <ref> (Potter, De Jong, and Grefenstette 1995) </ref>. The architecture of Samuel consists of three main components: a domain module, a production system, and a genetic algorithm. The production system and domain module evaluate rule sets while the genetic algorithm evolves new rule sets.
Reference: <author> Tanese, R. </author> <year> (1989). </year> <title> Distributed genetic algorithms. </title> <editor> In J. Schaffer (Ed.), </editor> <booktitle> Proceedings of the Third International Conference on Genetic Algorithms, </booktitle> <pages> pp. 434-439. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Whitley, D. and T. </author> <title> Starkweather (1990). Genitor II: a distributed genetic algorithm. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence 2, </journal> <pages> 189-214. 11 </pages>
References-found: 17

