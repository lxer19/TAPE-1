URL: http://www.cs.wustl.edu/cs/techreports/1995/wucs-95-32.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Title: Load Balance Properties of Distributed Data Layouts for Clustered MOD Servers  
Author: Milind M. Buddhikot, Guru Parulkar wucs-- 
Note: This work was supported in part by the ARPA, National Science Foundation, and an industrial consortium of Ascom Timeplex, Bellcore, BNR,  
Address: Campus Box 1045  One Brookings Drive St. Louis, MO 63130-4899  
Affiliation: Department of Computer Science  Washington University  Goldstar, NEC, NTT, SynOptics, and Tektronix.  
Date: May 95  
Abstract-found: 0
Intro-found: 1
Reference: [1] <editor> M AGIC tm Media Server: </editor> <title> A Scalable and Cost Effective Video Server, Sarnoff Real Time Corporation, </title> <publisher> Princeton, </publisher> <address> NJ 08543. </address>
Reference-contexts: 1. Introduction Large scale storage servers that provide location transparent, interactive access to hundreds or thousands of concurrent, independent clients will be important components of the future information super-highway infrastructure. MIMD and SIMD Multiprocessor supercomputer based machines have been considered as candidate architectures for such high performance servers <ref> [2, 3, 1] </ref>. However, these server architectures tend to be specialized, expensive and may prove to be overkill. An alternate architecture shown in Figure 1, commonly called as Clustered Multimedia Storage (CMS), has been proposed by several research groups including ours [8, 4, 5, 14].
Reference: [2] <institution> W hittaker tm Media Server, Whittaker Communication Corporation, Oregon. </institution>
Reference-contexts: 1. Introduction Large scale storage servers that provide location transparent, interactive access to hundreds or thousands of concurrent, independent clients will be important components of the future information super-highway infrastructure. MIMD and SIMD Multiprocessor supercomputer based machines have been considered as candidate architectures for such high performance servers <ref> [2, 3, 1] </ref>. However, these server architectures tend to be specialized, expensive and may prove to be overkill. An alternate architecture shown in Figure 1, commonly called as Clustered Multimedia Storage (CMS), has been proposed by several research groups including ours [8, 4, 5, 14].
Reference: [3] <author> Hsieh, J., et al., </author> <title> "Performance of a Mass Storage System for Video-On-Demand," </title> <booktitle> Proceedings of IEEE INFOCOM'95, </booktitle> <pages> pp. 771-778, </pages> <month> April, </month> <year> 1995. </year>
Reference-contexts: 1. Introduction Large scale storage servers that provide location transparent, interactive access to hundreds or thousands of concurrent, independent clients will be important components of the future information super-highway infrastructure. MIMD and SIMD Multiprocessor supercomputer based machines have been considered as candidate architectures for such high performance servers <ref> [2, 3, 1] </ref>. However, these server architectures tend to be specialized, expensive and may prove to be overkill. An alternate architecture shown in Figure 1, commonly called as Clustered Multimedia Storage (CMS), has been proposed by several research groups including ours [8, 4, 5, 14].
Reference: [4] <author> Bernhardt, C., and Biersack, E., </author> <title> "A Scalable Video Server: </title> <booktitle> Architecture, Design and Implementation," In Proceedings of the Realtime Systems Conference, </booktitle> <pages> pp. 63-72, </pages> <address> Paris, France, </address> <month> Jan. </month> <year> 1995. </year>
Reference-contexts: However, these server architectures tend to be specialized, expensive and may prove to be overkill. An alternate architecture shown in Figure 1, commonly called as Clustered Multimedia Storage (CMS), has been proposed by several research groups including ours <ref> [8, 4, 5, 14] </ref>. It essentially consists of a set of independent storage nodes that are connected together by a fast packet based interconnect such as a packet switched bus, a ring or even a general purpose multicast switch.
Reference: [5] <author> Bernhardt, C., and Biersack, E., </author> <title> "The Server Array: A Scalable Video Server Architecture," To appear in High-Speed Networks for Multimedia Applications, </title> <editor> editors, Danthine, A., Ferrari, D., Spaniol, O., and Effelsberg, W., </editor> <publisher> Kluwer Academic Press, </publisher> <year> 1996. </year>
Reference-contexts: However, these server architectures tend to be specialized, expensive and may prove to be overkill. An alternate architecture shown in Figure 1, commonly called as Clustered Multimedia Storage (CMS), has been proposed by several research groups including ours <ref> [8, 4, 5, 14] </ref>. It essentially consists of a set of independent storage nodes that are connected together by a fast packet based interconnect such as a packet switched bus, a ring or even a general purpose multicast switch.
Reference: [6] <author> Buddhikot, M., Parulkar, G., M., and Cox, J., R., Jr., </author> <title> "Distributed Layout, Scheduling, and Playout Control in a Multimedia Storage Server," </title> <booktitle> Proceedings of the Sixth International Workshop on Packet Video, Portland, Oregon, </booktitle> <pages> pp. </pages> <note> C1.1 to C1.4, </note> <month> Sept. </month> <pages> 26-27, </pages> <year> 1994. </year>
Reference-contexts: Chen et. al. report data placement and retrieval schemes for an efficient implementation of ff and rw operations in a disk array based video server [12]. Our work is completely independent and concurrent this work and has similarities and differences <ref> [6, 7] </ref>. Chen et. al.'s paper assumes a disk array based small scale server whereas our work assumes a large scale server with multiple storage nodes, each with a disk array.
Reference: [7] <author> Buddhikot, M., and Parulkar, G., M., </author> <title> "Distributed Scheduling, Data Layout and Playout Control in a Large Scale Multimedia Storage Server," </title> <type> Technical Report WUCS94-33, </type> <institution> Department of Computer Science, Washington University in St. Louis, </institution> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: Chen et. al. report data placement and retrieval schemes for an efficient implementation of ff and rw operations in a disk array based video server [12]. Our work is completely independent and concurrent this work and has similarities and differences <ref> [6, 7] </ref>. Chen et. al.'s paper assumes a disk array based small scale server whereas our work assumes a large scale server with multiple storage nodes, each with a disk array.
Reference: [8] <author> Buddhikot, M., Parulkar, G., and Cox, J., R., Jr., </author> <title> "Design of a Large Scale Multimedia Storage Server," </title> <journal> Journal of Computer Networks and ISDN Systems, </journal> <pages> pp. 504-517, </pages> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: However, these server architectures tend to be specialized, expensive and may prove to be overkill. An alternate architecture shown in Figure 1, commonly called as Clustered Multimedia Storage (CMS), has been proposed by several research groups including ours <ref> [8, 4, 5, 14] </ref>. It essentially consists of a set of independent storage nodes that are connected together by a fast packet based interconnect such as a packet switched bus, a ring or even a general purpose multicast switch. <p> This architecture is currently being prototyped at the Washington University in St. Louis under the NSF's National Challenge Award (NCA) grant aimed at deploying a scalable Multimedia-On-Demand (mod) server. Details of this architecture can be found in <ref> [8] </ref>. Two important performance metrics of such any large scale server are parallelism and concur-rency [9]. The parallelism (P f ) metric is defined as the number of storage devices simultaneously participating in supplying data for a document being accessed by a connection.
Reference: [9] <author> Buddhikot, M., and Parulkar, G., M., </author> <title> "Efficient Data Layout, Scheduling and Playout Control in MARS," </title> <note> Invited for publication in the Special Issue of ACM/Springer Multimedia Systems Journal. </note>
Reference-contexts: Louis under the NSF's National Challenge Award (NCA) grant aimed at deploying a scalable Multimedia-On-Demand (mod) server. Details of this architecture can be found in [8]. Two important performance metrics of such any large scale server are parallelism and concur-rency <ref> [9] </ref>. The parallelism (P f ) metric is defined as the number of storage devices simultaneously participating in supplying data for a document being accessed by a connection. Large parallelism increases network and storage throughput and thus, increases scalability.
Reference: [10] <author> Chang, Ed, and Zakhor, A., </author> <title> "Scalable Video Placement on Parallel Disk Arrays," Image and Video Databases II, </title> <booktitle> IS&T/SPIE International Symposium on Electronic Imaging: Science and Technology, </booktitle> <address> San Jose, </address> <month> Feb. </month> <year> 1994. </year>
Reference-contexts: In case of a Variable Bit Rate (vbr) video such as mpeg video, a chunk therefore represents a Constant Time Length (ctl) but a variable data length unit. In case of a Constant Bit Rate (cbr) source, it also has constant size <ref> [10, 13] </ref>. Different documents may have different chunk sizes, ranging from k = 1 to k = F max , where F max is the maximum number of frames in a multimedia document. In case of mpeg compressed streams, the group-of-pictures (gop) is one possible choice of chunk size.
Reference: [11] <author> Chang, Ed, and Zakhor, A., </author> <title> "Variable Bit Rate MPEG Video Storage on Parallel Disk Arrays," </title> <booktitle> First International Workshop on Community Networking, </booktitle> <address> San Francisco, </address> <month> July </month> <year> 1994. </year>
Reference: [12] <author> Chen, M., Kandlur, D., and Yu, S., P., </author> <title> "Support for Fully Interactive Playout in a Disk-Array-Based Video Server," </title> <booktitle> Proceedings of Second International Conference on Multimedia, ACM Multimedia'94, 1994. Distributed Data Layouts 19 </booktitle>
Reference-contexts: An alternate approach to dealing with this problem is to always use a layout with a chunk size of k frames and implement ff and rw by increasing the granularity of skipping to chunks. This kind of chunk skipping is analogous to segment skipping discussed in <ref> [12] </ref>. It has the advantage that during Distributed Data Layouts 17 normal playout as well as ff and rw, chunks are read from the disk in much the same way without any additional seek/rotation penalties. <p> However, this paper does not address issues in the implementation of interactive operations. Chen et. al. report data placement and retrieval schemes for an efficient implementation of ff and rw operations in a disk array based video server <ref> [12] </ref>. Our work is completely independent and concurrent this work and has similarities and differences [6, 7]. Chen et. al.'s paper assumes a disk array based small scale server whereas our work assumes a large scale server with multiple storage nodes, each with a disk array.
Reference: [13] <author> Keeton, K., and Katz, R., </author> <title> "The Evaluation of Video Layout Strategies on a High Bandwidth File Server," </title> <booktitle> Proceedings of International Workshop on Network and Operating Support for Digital Audio and Video (NOSSDAV'93), </booktitle> <editor> Lancaster, U. K., </editor> <month> Nov., </month> <year> 1993. </year>
Reference-contexts: In case of a Variable Bit Rate (vbr) video such as mpeg video, a chunk therefore represents a Constant Time Length (ctl) but a variable data length unit. In case of a Constant Bit Rate (cbr) source, it also has constant size <ref> [10, 13] </ref>. Different documents may have different chunk sizes, ranging from k = 1 to k = F max , where F max is the maximum number of frames in a multimedia document. In case of mpeg compressed streams, the group-of-pictures (gop) is one possible choice of chunk size. <p> Related Work This section briefly presents some of the related work. Keeton et. al. discuss schemes for placement of sub-band encoded video data in units of constant playout length on a two dimensional disk array <ref> [13] </ref>. They report simulation results which conclude that storage of multi-resolution video permits service to more concurrent clients than storage of single resolution video. Similarly, Zakhor et. al. report design of schemes for placing scalable sub-band encoded video data on a disk array.
Reference: [14] <author> Tewari, R., Mukherjee, R., Dias, D., and and Harrick M. Vin. </author> <title> "Real-time Issues for Clustered Multimedia Servers," </title> <note> Submitted for publication, April 1995. (Also available as IBM Research Report RC 20020 (88561)). </note>
Reference-contexts: However, these server architectures tend to be specialized, expensive and may prove to be overkill. An alternate architecture shown in Figure 1, commonly called as Clustered Multimedia Storage (CMS), has been proposed by several research groups including ours <ref> [8, 4, 5, 14] </ref>. It essentially consists of a set of independent storage nodes that are connected together by a fast packet based interconnect such as a packet switched bus, a ring or even a general purpose multicast switch.
Reference: [15] <author> Vin, H., et al., </author> <title> "An Observation-Based Admission Control Algorithm for Multimedia Servers," </title> <booktitle> Proceedings of the IEEE International Conference on Multimedia Computing Systems (ICMCS'94), Boston, </booktitle> <pages> pp. 234-243, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Such penalties can be minimized under heavy load, if prefetch load over multiple connection is randomly distributed over each disk and efficient disk scheduling algorithms such as those reported in <ref> [15] </ref> are used. However, under low or moderate loads, frame skipping may lead to poor disk utilization and cycle overflows. Note that in case of k &gt; 1, frame skipping causes load-imbalance. In other words, frame skipping is suitable for g-sdcl k s (1) layouts.
References-found: 15

