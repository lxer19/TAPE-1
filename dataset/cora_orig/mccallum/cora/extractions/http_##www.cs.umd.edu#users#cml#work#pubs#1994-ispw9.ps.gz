URL: http://www.cs.umd.edu/users/cml/work/pubs/1994-ispw9.ps.gz
Refering-URL: http://www.cs.umd.edu/users/cml/work/pubs/
Root-URL: 
Email: E-mail: lott@informatik.uni-kl.de  
Title: Data Collection in a Process-Sensitive Software Engineering Environment  
Author: P. Giese B. Hoisl C. M. Lott and H. D. Rombach 
Date: 5-7 October 1994  
Note: Position Paper for ISPW9,  
Address: 67653 Kaiserslautern, Germany  
Affiliation: Research Group for Software Engineering Department of Computer Science University of Kaiserslautern  
Abstract: All software projects are experiments in the sense of the scientific method because the outcomes are not known in advance, theories and hypotheses may be tested in the project empirically, and data must be collected and analyzed. Empirical data allows us to characterize projects, gauge improvements in an environment, and reason about the value of new technologies. This paper discusses our ideas about practical support for collecting empirical data using a process-sensitive software engineering environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Victor R. Basili. </author> <title> Software development: A paradigm for the future. </title> <booktitle> In Proceedings of the 13 th Annual International Computer Software and Application Conference (COMPSAC), </booktitle> <pages> pages 471-485, </pages> <address> Orlando, Florida, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: Introduction The scientific method instructs us to improve our understanding of the world around us by formulating theories and hypotheses, running experiments to test the hypotheses empirically, and analyzing the data gathered during the experiments. The Quality Improvement Paradigm <ref> [1] </ref> tailors the scientific method for the software engineering domain and instructs us to treat each software project as an experiment. <p> Deciding what data to collect from a project, analyzing the data, and providing feedback to a project demands a goal-oriented approach towards measurement and a formal integration of project plans, quality models, and metrics <ref> [1, 2] </ref>. Our ultimate goal is providing project guidance by interpreting empirical data according to established quality models [6].
Reference: [2] <author> Andreas Birk and Peter Giese. </author> <title> Integration of met-rics into project plans. </title> <type> Technical report, </type> <institution> Esprit Project PERFECT, Universitat Kaiserslautern, </institution> <address> 67653 Kaisers-lautern, Germany, </address> <year> 1994. </year> <note> In preparation. </note>
Reference-contexts: Deciding what data to collect from a project, analyzing the data, and providing feedback to a project demands a goal-oriented approach towards measurement and a formal integration of project plans, quality models, and metrics <ref> [1, 2] </ref>. Our ultimate goal is providing project guidance by interpreting empirical data according to established quality models [6]. <p> Prototyping our models and requirements We are working on a formal model for integrating measurement into project plans <ref> [2] </ref> and are developing two prototype systems according to that model and our requirements. The goal of both projects is finding suitable support mechanisms for data collection, analysis, and feedback. The first, MVP-S, is a system for enacting MVP-L project plans to provide measurement-based project guidance. <p> Current work on MVP-S involves providing better coupling mechanisms for automatically collecting data by invoking tools and providing project guidance based on empirical data. The second prototype is being developed as part of the Esprit project PERFECT <ref> [2] </ref>. It extends the commercially available Process WEAVER [3] system to incorporate support mechanisms for measurement. Process WEAVER supports software development projects using a Petri-net-like formalism. Current work within the project PERFECT involves incorporating measurement tools and using measurement data for project guidance.
Reference: [3] <author> Christer Fernstrom. </author> <title> Process WEAVER: Adding pro cess support to UNIX. </title> <booktitle> In Proceedings of the 2 nd International Conference on the Software Process, </booktitle> <pages> pages 12-26. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> February </month> <year> 1993. </year>
Reference-contexts: Current work on MVP-S involves providing better coupling mechanisms for automatically collecting data by invoking tools and providing project guidance based on empirical data. The second prototype is being developed as part of the Esprit project PERFECT [2]. It extends the commercially available Process WEAVER <ref> [3] </ref> system to incorporate support mechanisms for measurement. Process WEAVER supports software development projects using a Petri-net-like formalism. Current work within the project PERFECT involves incorporating measurement tools and using measurement data for project guidance.
Reference: [4] <author> C. D. Klingler, M. Neviaser, A. Marmor-Squires, C. M. Lott, and H. D. Rombach. </author> <title> A case study in process rep resentation using MVP-L. </title> <booktitle> In Proceedings of the 7 th Annual Conference on Computer Assurance (COMPASS 92), </booktitle> <pages> pages 137-146, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: The first, MVP-S, is a system for enacting MVP-L project plans to provide measurement-based project guidance. MVP-L is a structured, declarative language for modeling processes, products, and resources in which process entry and exit criteria are specified quantitatively <ref> [4] </ref>. The MVP-S system collects data for the data items specified in the models and evaluates the criteria based on those data. Current work on MVP-S involves providing better coupling mechanisms for automatically collecting data by invoking tools and providing project guidance based on empirical data.
Reference: [5] <author> Balachander Krishnamurthy and Naser S. Barghouti. Provence: </author> <title> a process visualization and enactment environment. </title> <editor> In Ian Sommerville and Manfred Paul, editors, </editor> <booktitle> Proceedings of the 4 th European Software Engineering Conference, </booktitle> <pages> pages 451-465. </pages> <booktitle> Lecture Notes in Computer Science Nr. </booktitle> <volume> 717, </volume> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: We derive the first three requirements from this discussion, and note that work on the Provence environment, especially the component Yeast <ref> [5] </ref>, is at least a partial implementation of these requirements: R1: Specify triggers for data collection. R2: Recognize occurrences of triggers. R3: Invoke tools to collect data. Storage and retrieval of empirical data are not tasks for a SEE but should be left to a special-purpose database system.
Reference: [6] <author> Christopher M. Lott and H. Dieter Rombach. </author> <title> Measurement-based guidance of software projects using explicit project plans. </title> <journal> Information and Software Technology, </journal> 35(6/7):407-419, June/July 1993. 
Reference-contexts: Our ultimate goal is providing project guidance by interpreting empirical data according to established quality models <ref> [6] </ref>.
Reference: [7] <author> H. Dieter Rombach. </author> <title> The role of measurement in ISEEs. </title> <editor> In Carlo Ghezzi and John McDermid, editors, </editor> <booktitle> Proceedings of the 2 nd European Software Engineering Conference, </booktitle> <pages> pages 65-85. </pages> <booktitle> Lecture Notes in Computer Science Nr. </booktitle> <volume> 387, </volume> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1989. </year>
Reference-contexts: The difficulty of using a SEE to collect data by interacting with people and other experience gained while working on two SEE prototypes encouraged us to refine a few of the high-level requirements presented in <ref> [7] </ref> to focus narrowly and deeply on the problems of data collection. In this position paper, we formulate our ideas about practical support for data collection in SEEs as a set of requirements.
References-found: 7

