URL: ftp://ftp.cs.columbia.edu/reports/reports-1996/cucs-027-96.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1996.html
Root-URL: http://www.cs.columbia.edu
Title: Closed Terminologies and Temporal Reasoning in Description Logic for Concept and Plan Recognition  
Author: Robert Anthony Weida 
Degree: in partial fulfillment of the requirements for the degree of Doctor of Philosophy in the Graduate School of Arts and Sciences  
Affiliation: COLUMBIA UNIVERSITY  
Date: Submitted  1996  
Pubnum: Technical Report CUCS-027-96  
Abstract-found: 0
Intro-found: 1
Reference: [ Allen and Perrault, 1980 ] <author> J. F. Allen and C. R. Perrault. </author> <title> Analyzing intention in utterances. </title> <journal> Artificial Intelligence, </journal> <volume> 15(3) </volume> <pages> 143-178, </pages> <year> 1980. </year>
Reference: [ Allen, 1983a ] <author> J. F. Allen. </author> <title> Maintaining knowledge about temporal intervals. </title> <journal> Communications of the ACM, </journal> <volume> 26(11) </volume> <pages> 832-843, </pages> <month> November </month> <year> 1983. </year>
Reference-contexts: Temporal constraints can be applied to time points and/or time intervals. In practice, most research in this area has addressed either systems of binary qualitative constraints between intervals in the tradition of <ref> [ Allen, 1983a ] </ref> or systems of linear inequalities between metric points. Qualitative and metric constraints overlap in their ability to convey temporal relationships. <p> As we shall see in Section 2.3.3, their complementary powers can be integrated profitably. 2.3.1 Qualitative Constraints Allen, in his influential work on maintaining knowledge about temporal intervals, enumerated a total of seven primitive qualitative relationships, plus their inverses, that might hold between any ordered pair of intervals <ref> [ Allen, 1983a ] </ref> . These primitives are illustrated in Figure 2.5. A qualitative constraint records the possible relationships between a particular pair of intervals as a disjunctive subset of these primitive relationships [ Allen, 1983a ] : Definition 4 A qualitative constraint between a pair of intervals i and j <p> of seven primitive qualitative relationships, plus their inverses, that might hold between any ordered pair of intervals <ref> [ Allen, 1983a ] </ref> . These primitives are illustrated in Figure 2.5. A qualitative constraint records the possible relationships between a particular pair of intervals as a disjunctive subset of these primitive relationships [ Allen, 1983a ] : Definition 4 A qualitative constraint between a pair of intervals i and j is a disjunctive subset of Allen's 13 primitive qualitative relations r x , written i (r 1 _ _ r n ) j. <p> Their subset admits complete polynomial-time constraint propagation. 2. Adopt an approximation algorithm such as Allen's, and live with the possible consequence that some relationships will remain undetected. Allen postulates that his algorithm's inferences correspond to those that humans find natural <ref> [ Allen, 1983a ] </ref> . There is a family of variations on Allen's algorithm that produce successively better approximations, but at increasingly onerous cost [ van Beek, 1989 ] . In general, n-consistency can be computed in polynomial time for any specific value of n. 3.
Reference: [ Allen, 1983b ] <author> J. F. Allen. </author> <title> Recognizing intentions from natural language utterances. In Computational Models of Discourse. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1983. </year>
Reference-contexts: A central concern of plan recognition work is to provide users with helpful responses, e.g., <ref> [ Allen, 1983b ] </ref> . t-rex also has a capacity for active 206 plan recognition 20 which enables it to take the initiative and act when the modality of a plan changes.
Reference: [ Allen, 1984 ] <author> J. F. Allen. </author> <title> Towards a general theory of action and time. </title> <journal> Artificial Intelligence, </journal> <volume> 23 </volume> <pages> 123-154, </pages> <year> 1984. </year>
Reference-contexts: For example, when two state descriptions 5 Written equals in Figure 2.5 on page 39. 224 overlap, are they consistent? Limited, yet computationally daunting ideas have been proposed in temporal planning work, e.g., <ref> [ Allen, 1984; Allen, 1991 ] </ref> .
Reference: [ Allen, 1991 ] <author> J. F. Allen. </author> <title> Planning as temporal reasoning. </title> <booktitle> In Second International Conference on Principles of Knowledge Representation and Reasoning (KR'91), </booktitle> <pages> pages 3-14, </pages> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: We have not concentrated on detailed representation of the actions within description logic plans, but a number of authors have done so. clasp [ Devanbu and Litman, 1991 ] uses a strips-like representation [ Fikes and Nilsson, 1971 ] , while Artale and Franconi use an Allen-style <ref> [ Allen, 1991 ] </ref> representation [ Artale and Franconi, 1993; Artale and Franconi, 1994 ] . <p> Although his plans are entirely atemporal, he acknowledges the need for an explicit representation of time. In [ Weida, 1993 ] , we proposed some preliminary ideas for integrating Wellman's idea of a dominance proving planner with an Allen-style temporal planner <ref> [ Allen, 1991 ] </ref> . 215 6.3.2 CLASP (Devanbu and Litman) clasp (CLAssification of Scenarios and Plans) 3 was designed to aid in retrieval of software for telephone switching devices. <p> For example, when two state descriptions 5 Written equals in Figure 2.5 on page 39. 224 overlap, are they consistent? Limited, yet computationally daunting ideas have been proposed in temporal planning work, e.g., <ref> [ Allen, 1984; Allen, 1991 ] </ref> . <p> Instead, conditions can overlap and interleave with actions in arbitrary ways. Similarly, each action might have a set of associated conditions related to it by some temporal structure, as in <ref> [ Allen, 1991 ] </ref> . Then we would be faced with plans that are arbitrary temporal networks of actions and conditions, and each action could have its own temporal network of associated conditions.
Reference: [ Apte et al., 1992 ] <author> C. Apte, R. Dionne, J. Griesmer, M. Karnaugh, J. Kastner, M. Laker, and E. Mays. </author> <title> An experiment in constructing an open expert system using a knowledge substrate. </title> <journal> IBM Journal of Research and Development, </journal> <year> 1992. </year>
Reference: [ Artale and Franconi, 1993 ] <author> A. Artale and E. Franconi. </author> <title> A unified framework for representing time, </title> <booktitle> actions and plans. Workshop on Object-based Representation Systems, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: A node of a constraint network concept (individual) is characterized by a standard description 2 There are advantages to incorporating the plan language directly within the description logic as in <ref> [ Artale and Franconi, 1993; Artale and Franconi, 1994 ] </ref> . k-rep could be extended to do this, largely by incorporating existing t-rex code in a modular way. We will return to this issue in Section 6.3.5. 97 logic concept (individual). <p> not concentrated on detailed representation of the actions within description logic plans, but a number of authors have done so. clasp [ Devanbu and Litman, 1991 ] uses a strips-like representation [ Fikes and Nilsson, 1971 ] , while Artale and Franconi use an Allen-style [ Allen, 1991 ] representation <ref> [ Artale and Franconi, 1993; Artale and Franconi, 1994 ] </ref> . <p> Implemented Plan Subsumption Systems A concise comparison of the implemented systems for plan-based reasoning in description logic that we have described earlier in section 6.3 is found in Table 6.1. 6.3.5 Artale and Franconi Recent theoretical work by Artale and Franconi provides a description logic for actions occurring over time <ref> [ Artale and Franconi, 1993; Artale and Franconi, 1994 ] </ref> . Like t-rex, their language supports both elementary actions and complex actions (i.e., plans) at the concept and individual levels.
Reference: [ Artale and Franconi, 1994 ] <author> A. Artale and E. Franconi. </author> <title> A computational account for a description logic of time and action. </title> <booktitle> In Fourth International Conference on Principles of Knowledge Representation and Reasoning (KR'94), </booktitle> <pages> pages 3-14, </pages> <year> 1994. </year>
Reference-contexts: A node of a constraint network concept (individual) is characterized by a standard description 2 There are advantages to incorporating the plan language directly within the description logic as in <ref> [ Artale and Franconi, 1993; Artale and Franconi, 1994 ] </ref> . k-rep could be extended to do this, largely by incorporating existing t-rex code in a modular way. We will return to this issue in Section 6.3.5. 97 logic concept (individual). <p> After considering each of these systems in turn, we summarize their comparison in Table 6.1. We then discuss an unimplemented description logic of action and time that followed t-rex by proposing a formal semantics for a similar plan language <ref> [ Artale and 214 Franconi, 1993; Artale and Franconi, 1994 ] </ref> . We conclude by comparing several different types of plan subsumption that have been studied. <p> not concentrated on detailed representation of the actions within description logic plans, but a number of authors have done so. clasp [ Devanbu and Litman, 1991 ] uses a strips-like representation [ Fikes and Nilsson, 1971 ] , while Artale and Franconi use an Allen-style [ Allen, 1991 ] representation <ref> [ Artale and Franconi, 1993; Artale and Franconi, 1994 ] </ref> . <p> Implemented Plan Subsumption Systems A concise comparison of the implemented systems for plan-based reasoning in description logic that we have described earlier in section 6.3 is found in Table 6.1. 6.3.5 Artale and Franconi Recent theoretical work by Artale and Franconi provides a description logic for actions occurring over time <ref> [ Artale and Franconi, 1993; Artale and Franconi, 1994 ] </ref> . Like t-rex, their language supports both elementary actions and complex actions (i.e., plans) at the concept and individual levels. <p> One reasonable outcome would contain a single Boil-Spaghetti action. However, because their language does not allow one to specify the unification of temporal variables, the only possible outcome is two unrelated Boil-Spaghetti actions which entail two distinct Boil actions and two distinct Make-Spaghetti actions. While the language of <ref> [ Artale and Franconi, 1994 ] </ref> allows for disjunction, their subsumption algorithm requires normalized descriptions, and their normalization process may cause the size of a description to grow exponentially. <p> Schmiedel's logic is very expressive, and in fact undecidable <ref> [ Artale and Franconi, 1994 ] </ref> .
Reference: [ Baader and Hollunder, 1991 ] <author> F. Baader and B. Hollunder. Kris: </author> <title> Knowledge representation and inference system. </title> <journal> SIGART Bulletin, </journal> <volume> 2(3) </volume> <pages> 8-14, </pages> <month> June </month> <year> 1991. </year> <title> Special Issue on Implemented Knowledge Representation and Reasoning Systems. </title> <type> 261 </type>
Reference: [ Baader and Hollunder, 1992 ] <author> F. Baader and B. </author> <title> Hollunder. Embedding defaults into terminological knowledge representation formalisms. </title> <booktitle> In Principles of Knowledge Representation and Reasoning: Proceedings of the Third International Conference (KR'92), </booktitle> <pages> pages 306-317, </pages> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference: [ Baader et al., 1991 ] <editor> F. Baader, H. J. Burckert, J. Heinsohn, B. Hollunder, J. Muller, B. Nebel, W. Nutt, and H.J. </editor> <title> Profitlich. Terminological knowledge representation: A proposal for a terminological logic, </title> <year> 1991. </year>
Reference: [ Baader et al., 1992 ] <editor> F. Baader, B. Hollunder, B. Nebel, H.J. Profitlich, and E. Franconi. </editor> <title> An empirical analysis of optimization techniques for terminological systems or: Making kris get a move on. </title> <booktitle> In Principles of Knowledge Representation and Reasoning: Proceedings of the Third International Conference (KR'92), </booktitle> <pages> pages 270-281, </pages> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: How well it can be extended for extremely expressive languages is unclear, but see [ Mac-Gregor, 1994 ] for an interesting proposal regarding "a description classifier for the predicate calculus." A completely different approach, found notably in kris, relies on a satisfiability checking algorithm <ref> [ Baader et al., 1992 ] </ref> . Noting that concept C1 subsumes concept C2 just in case :C1 ^ C2 is unsatisfiable, a satisfiability-based algorithm determines subsumption by attempting to generate a model where :C1 ^ C2 is interpreted as a non-empty set. <p> Our experiments are conducted through a performance analysis workbench program composed of a problem generator, an experiment administrator, and an experiment reporter. This is in keeping with a recent study on the performance of standard description logic systems <ref> [ Baader et al., 1992; Heinsohn et al., 1992b ] </ref> , which used machine-generated knowledge bases (as well as several "real world" knowledge bases). Design of Experiment First we describe the design for an empirical study of the performance and scalability of our constraint network subsumption algorithm.
Reference: [ Bettini, 1994 ] <author> C. Bettini. </author> <title> A formalization of interval-based temporal subsumption in first order logic. </title> <booktitle> In Foundations of Knowledge Representation and Reasoning, </booktitle> <pages> pages 53-73. </pages> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Since there are no explicit variables, Bettini's temporal expressions can only relate pairs of implicit temporal variables: a reference interval and a "current" interval. For example, the following expression taken from <ref> [ Bettini, 1994 ] </ref> "denotes individuals that will be engineer in some future interval and that will remain engineer forever," assuming that NOW is its reference interval: 3 (af ter) (engineer u 2 (met by; af ter):engineer) The future interval introduced by the outer 3 becomes the reference interval for the
Reference: [ Borgida and Patel-Schneider, 1994 ] <author> A. Borgida and P. F. Patel-Schneider. </author> <title> A semantics and complete algorithm for subsumption in the classic description logic. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 1 </volume> <pages> 277-308, </pages> <year> 1994. </year>
Reference-contexts: Several subsumption algorithms have been discussed in the literature. The most thorough and modern presentation of a structural subsumption algorithm is found in <ref> [ Borgida and Patel-Schneider, 1994 ] </ref> . <p> The language studied in this thesis and specified in Figure 2.1 falls into the first category. Current description logic systems stake out different positions in this design space. classic approximates the first choice <ref> [ Borgida and Patel-Schneider, 1994 ] </ref> . Subsumption in classic is tractable and also complete with respect to concepts. It is complete with respect to individuals only under a non-standard semantics for individuals. <p> Constraint propagation in t-rex is not strictly complete, so certain caveats are in order with respect to our implementation: * Complete node subsumption relies on the completeness of concept subsump-tion. For example, in classic concept subsumption is only complete under non-standard semantics <ref> [ Borgida and Patel-Schneider, 1994 ] </ref> . k-rep is in complete with respect to some, the existential role restriction. * Subsumption with respect to qualitative arcs depends on complete propagation of qualitative constraints across the network. Qualitative constraint reasoning in mats is incomplete [ Kautz and Ladkin, 1991 ] .
Reference: [ Borgida et al., 1989 ] <author> A. Borgida, R. J. Brachman, D. L. McGuinness, and L. A. Resnick. </author> <title> Classic: A structural data model for objects. </title> <booktitle> In Proc. 1989 ACM SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 58-67, </pages> <address> Portland, OR, </address> <year> 1989. </year>
Reference-contexts: Specifically, it calls upon either k-rep [ Mays et al., 1991a ] or classic <ref> [ Borgida et al., 1989 ] </ref> to manage a knowledge base of actions and related concepts and individuals, along with mats [ Kautz and Ladkin, 1991 ] to propagate qualitative and metric temporal constraints. t-rex contains its own 1 The name derives as follows: Terminological RECognition System ! T-RECS ! T-REX <p> Therefore, t-rex also applies the set of domain-specific rules to plan individuals when they are first defined 117 and whenever they are updated. New instantiation relationships may thus be discovered. Some standard description logic systems, such as classic <ref> [ Borgida et al., 1989 ] </ref> , loom [ MacGregor, 1991b ] , and meson [ Owsnicki-Klewe, 1988 ] , apply forward-chaining rules to standard individuals in this fashion. 4.3.7 Conclusion Section 4.3 has specified the representation of constraint network concepts and individuals, with particular emphasis on plan descriptions. <p> Much of the reasoning in meson is done through forward-chaining rules, which we will discuss in the context of the prose system. 6.1.3 PROSE prose [ Wright et al., 1993 ] is a successfully deployed configurator featuring product knowledge bases written in classic <ref> [ Borgida et al., 1989 ] </ref> . Like prose, our work positions the description logic system as a product knowledge reasoner | a key module in a larger configurator architecture. <p> Plans in clasp are described as possible sequences of actions by means of regular expressions over action concepts. Scenarios, or plan instances, are sequences of action instances. clasp uses classic <ref> [ Borgida et al., 1989 ] </ref> to model action concepts in the style of strips [ Fikes and Nilsson, 1971 ] . Referring to Figure 6.1 on page 216, a generic Action can be specialized to a System-Act whose ACTORs are restricted to System-Agents, and further specialized to a Connect-Dialtone-Act.
Reference: [ Borgida, 1992 ] <author> A. Borgida. </author> <title> Towards the systematic development of terminological reasoners: Clasp reconstructed. </title> <booktitle> In Third International Conference on Principles of Knowledge Representation and Reasoning (KR'92), </booktitle> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: Each component of normalized-and-completed-risc-cpu has an underlined counterpart in normalized-and-completed-ibm-risc-cpu. This structural correspondence establishes the subsumption relationship. Structural subsumption works well for the restricted languages of systems like k-rep, classic, and loom, and its merits are extolled in <ref> [ Borgida, 1992 ] </ref> . <p> In practice, though, clasp achieves considerable leverage from the compact representation afforded by finite state machines 219 corresponding to the regular expressions. Recently, protodl introduced a framework for extending description logic systems with customized language constructs <ref> [ Borgida, 1992 ] </ref> .
Reference: [ Brachman and Levesque, 1984 ] <author> R. J. Brachman and H. J. Levesque. </author> <title> The tractability of subsumption in frame-based description languages. </title> <booktitle> In Proceedings of AAAI-84, </booktitle> <pages> pages 34-37, </pages> <address> Austin, Texas, </address> <year> 1984. </year> <journal> American Association of Artificial Intelligence. </journal>
Reference-contexts: Brachman and Levesque's landmark paper on this phenomenon launched a significant thread in description logic research over the past decade <ref> [ Brachman and Levesque, 1984 ] </ref> . 7 They focused their analysis on one such "crossover point" in the computation of subsumption relationships. First, they examined a typical language for which subsumption can be computed in O (n 2 ) time.
Reference: [ Brachman and Schmolze, 1985 ] <author> R. J. Brachman and J. G. Schmolze. </author> <title> An overview of the kl-one knowledge representation system. </title> <journal> Cognitive Science, </journal> <volume> 9(2) </volume> <pages> 171-216, </pages> <year> 1985. </year>
Reference: [ Brachman, 1985 ] <author> R. J. Brachman. </author> <title> "i lied about the trees" (or, defaults and definitions in a knowledge representation). </title> <journal> AI Magazine, </journal> <volume> 6(3) </volume> <pages> 80-93, </pages> <year> 1985. </year>
Reference: [ Bresciani et al., 1995 ] <author> P. Bresciani, E. Franconi, and S Tessaris. </author> <title> Implementing and testing expressive description logics: a preliminary report. </title> <booktitle> In International 262 Workshop on Description Logics, </booktitle> <address> Rome, Italy, </address> <year> 1995. </year> <booktitle> Also Proceedings of the International KRUSE Symposium, </booktitle> <pages> pp 28-39, </pages> <address> Santa Cruz, </address> <month> August </month> <year> 1995. </year>
Reference: [ Brownston et al., 1985 ] <author> L. Brownston, R. Farrell, E. Kant, and N. Martin. </author> <title> Programming Expert Systems in OPS5. </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1985. </year>
Reference-contexts: One rule is more specific than another just in case its antecedent is subsumed by the other rule's antecedent. This method compares favorably with ad-hoc specificity measures used in popular production systems such as OPS5 <ref> [ Brownston et al., 1985 ] </ref> . We observe that the constraint network subsumption task we face is rather like the one described in [ Yen et al., 1991 ] .
Reference: [ Buchheit et al., 1993 ] <author> M. Buchheit, F. M. Donini, and A. Schaerf. </author> <title> Decidable reasoning in terminological knowledge representation systems. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 1 </volume> <pages> 109-137, </pages> <year> 1993. </year>
Reference-contexts: More recently, Nebel showed that sub-sumption in terminologies, which permit concepts to reference previously defined concepts, is inherently intractable (co-NP-complete) [ Nebel, 1990b ] . Today, a fairly comprehensive view of complexity in description logic has emerged <ref> [ Donini et al., 1991; Buchheit et al., 1993 ] </ref> . Since our predictive concept recognition methodology and our work on constraint network reasoning in description logic both rely on subsumption, classification, and similar inferences, the preceding results are pertinent.
Reference: [ Carberry, 1990 ] <author> S. Carberry. </author> <title> Plan Recognition in Natural Language Dialogue. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: It is more comprehensive, but less formal than our work or that of [ Kautz, 1991b ] , [ Vilain, 1990 ] , and [ Song, 1991 ] . For reference, discussions of intention-based plan recognition are contained in <ref> [ Carberry, 1990; Kautz, 1991b; Song, 1991 ] </ref> . 241 Chapter 7 Conclusion This chapter recaps the major contributions of the thesis and surveys some possible directions for continuing the work in the future. 7.1 Contributions The main contributions of this thesis are as follows. 7.1.1 Predictive Recognition in Description Logic
Reference: [ Charniak and Goldman, 1993 ] <author> E. Charniak and R. P. Goldman. </author> <title> A bayesian model of plan recognition. </title> <journal> Artificial Intelligence, </journal> <volume> 64 </volume> <pages> 53-79, </pages> <year> 1993. </year>
Reference-contexts: In such cases, t-rex currently has no basis for preferring one plan over the others. This ambiguity might be resolved with goal-based reasoning, e.g., [ Litman and Allen, 1987 ] , probabilistic reasoning, e.g., <ref> [ Charniak and Goldman, 1993 ] </ref> , and/or selective querying of the user through clarification 256 dialogues, e.g., [ van Beek and Cohen, 1991 ] .
Reference: [ Cohen and Levesque, 1990 ] <author> P. R. Cohen and H. J. Levesque. </author> <title> Rational interaction as the basis for communication. </title> <editor> In P. R. Cohen, J. Morgan, and M. E. Pollack, editors, </editor> <booktitle> Intentions in Communication, </booktitle> <pages> pages 221-255. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference: [ Cohen et al., 1992 ] <author> W. Cohen, A. Borgida, and H. Hirsh. </author> <title> Computing least common subsumers in description logics. </title> <booktitle> In Proceedings of AAAI-92, </booktitle> <pages> pages 754-760, </pages> <address> San Jose, CA, </address> <year> 1992. </year> <journal> American Association of Artificial Intelligence. </journal>
Reference-contexts: Computing OTA-consistency between an individual and a concept is basically the same as between a pair of concepts. 2.1.8 Least Common Subsumer Cohen, et al., have shown how to compute the least common subsumer (LCS), or most specific generalization, of a set of description logic concepts <ref> [ Cohen et al., 1992 ] </ref> . Their work in machine learning used LCS inferences to learn description 35 logic concepts from sample individuals. Despite its new name, the notion of a least common subsumer will be familiar to computer scientists as the least upper bound. <p> As a simple illustration, the LCS of uniprocessor-system and dual-ibm-processor-system (both defined in (and computer-system (at-least 1 processor) (at-most 2 processor)) For languages such as k-rep and classic, the LCS always exists and is essentially unique; although syntactic variants may exist, they are semantically equivalent <ref> [ Cohen et al., 1992 ] </ref> . Note that the restricted nature of these languages makes the least common subsumer inference interesting: disjunction would allow the LCS of a set of concepts to be specified trivially without revealing anything about their commonality. <p> Therefore, the commonality among MGO concepts constitutes a set of implicit constraints imposed on I by the closed terminology. Recall from Section 2.1.8 that Cohen, et al., showed how to compute the least common subsumer (LCS) of a set of description logic concepts <ref> [ Cohen et al., 1992 ] </ref> . The LCS of the MGOs, written LCS (MGOs), is a concept representing just their commonality (we never use the LCS concept for any other purpose, so it is not permanently installed in the terminology). <p> For example, the MGOs highlight the most general choices available in the current context. * A constraint derivation technique was presented to further exploit the partition of a terminology through novel use of the least common subsumer inference <ref> [ Cohen et al., 1992 ] </ref> . Restrictions common to an appropriate set of optional concepts are propagated to the individual in question, perhaps yielding crucial new restrictions that would not be known otherwise. 244 * The preceding techniques have been incorporated in a version of the k-rep system.
Reference: [ Dechter et al., 1991 ] <author> R. Dechter, I. Meiri, and J. Pearl. </author> <title> Temporal constraint networks. </title> <journal> Artificial Intelligence, </journal> <volume> 49 </volume> <pages> 61-95, </pages> <year> 1991. </year>
Reference-contexts: In a simple temporal problem there is at most one metric constraint between any pair of time points, and each metric constraint denotes a single numeric interval. Sound and complete closure for a simple temporal problem is computable in O (n 3 ) time <ref> [ Dechter et al., 1991 ] </ref> . When the time points are extrema of time intervals as in Section 2.3.1, metric constraints allow us to say much more about how time intervals are related.
Reference: [ Devanbu and Litman, 1991 ] <author> P. T. Devanbu and D. J. Litman. </author> <title> Plan-based terminological reasoning. </title> <booktitle> In Second International Conference on Principles of Knowledge Representation and Reasoning (KR'91), </booktitle> <pages> pages 128-138, </pages> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: Thus, plans can be automatically classified in 118 a strict taxonomy where each plan subsumes its descendants and is subsumed by its ancestors. In this respect, plan subsumption in t-rex resembles previous work on plan subsumption <ref> [ Devanbu and Litman, 1991; Wellman, 1990 ] </ref> , but provides a far richer temporal representation language and adds co-reference constraints. <p> of dependent individuals which must be considered for reclassification. 6.3 Plans in Description Logic Prior work on implemented plan subsumption systems considered atemporal plans in the context of plan generation [ Wellman, 1990 ] , as well as plans restricted to describing temporal sequences for the purpose of information retrieval <ref> [ Devanbu and Litman, 1991 ] </ref> . There is also contemporaneous work on state-based reasoning with plans limited to simple sequences [ Heinsohn et al., 1992a ] . After considering each of these systems in turn, we summarize their comparison in Table 6.1. <p> We conclude by comparing several different types of plan subsumption that have been studied. We have not concentrated on detailed representation of the actions within description logic plans, but a number of authors have done so. clasp <ref> [ Devanbu and Litman, 1991 ] </ref> uses a strips-like representation [ Fikes and Nilsson, 1971 ] , while Artale and Franconi use an Allen-style [ Allen, 1991 ] representation [ Artale and Franconi, 1993; Artale and Franconi, 1994 ] . <p> It is the first description logic-based system to focus on plan library management <ref> [ Devanbu and Litman, 1991; Devanbu and Litman, 1996 ] </ref> . Plans in clasp are described as possible sequences of actions by means of regular expressions over action concepts. <p> Referring to Figure 6.1 on page 216, a generic Action can be specialized to a System-Act whose ACTORs are restricted to System-Agents, and further specialized to a Connect-Dialtone-Act. Devanbu and Litman note that "the system performs a Connect-Dialtone-Act and generates a dialtone after a user picks up a phone" <ref> [ Devanbu and Litman, 1991 ] </ref> . classic is used in a similar manner to model individual actions. Plan bodies are expressed via PLAN-EXPRESSIONs which are extended regular expressions composed from action concepts (rather than mere symbols) using SEQUENCE, LOOP, and OR operators. <p> Plans may include conditional TEST expressions whose alternatives are guarded by state concepts. Macro expansion of subplans is provided via the SUBPLAN operator. REPEAT enables finite repetition of plan expressions. thereof. <ref> [ Devanbu and Litman, 1991 ] </ref> paraphrases the POTS plan as: "Informally, Pots-Plan describes a plan in which the caller picks up a phone, gets a dialtone, 3 Not to be confused with the homonymous clasp system of [ Yen et al., 1991 ] to be discussed in Section 6.5. 216 <p> Results from automata theory are employed to determine plan subsumption and instantiation. One plan subsumes another if the automaton representing the first plan accepts whenever the automaton representing the second one does. Note that transitions are matched via subsumption and instantiation of action concepts. See <ref> [ Devanbu and Litman, 1991; Devanbu and Litman, 1996 ] </ref> for further details. Regular expression subsumption is P-SPACE hard [ Wellman, 1990 ] . <p> if and only if the scenario's individual action sequence constitutes a string recognized by the plan's automaton. clasp's recognition algorithm uses time proportional to the size of the plan's automaton multiplied by the length of the scenario's action sequence. t-rex's plan subsumption is similar in spirit to that of clasp <ref> [ Devanbu and Litman, 1991 ] </ref> . <p> However, by using Allen's temporal logic, t-rex supports concurrent actions that overlap in various ways. t-rex also captures finer sequential relations than clasp, which, for example, makes no distinction between before and meets. clasp has no metric temporal constraints, nor does it have co-reference constraints between actions. In <ref> [ Devanbu and Litman, 1991 ] </ref> , a plan instance with n steps can only instantiate plans with exactly n steps. That is, clasp does not match an individual with a plan description when the individual adds steps not mentioned in the plan. Our system has no such restriction. <p> State information can be handled more effectively when plans are limited to description of action sequences <ref> [ Devanbu and Litman, 1991; Heinsohn et al., 1992a ] </ref> . 6.3.6 Varieties of Plan Subsumption In our work, we have applied constraint network subsumption to plan sub-sumption by means of plan bodies. However, there are other ways to view plan subsumption. <p> Abstraction subsumption is also used in clasp <ref> [ Devanbu and Litman, 1991 ] </ref> and sudo-planner [ Wellman, 1990 ] . Heinsohn, et al., note that abstraction-subsumption is appropriate for maintaining a database of plans at varying levels of abstraction and for conveying operating instructions for devices at varying levels of detail. <p> This criterion is inexact because it ignores the possibility of "protected formulae" such that an incon sistent state occurs in P1 even though P2 can be executed successfully. Another type of subsumption based on goals, called g-subsumption, was identified in <ref> [ Devanbu and Litman, 1991 ] </ref> : the initial and goal conditions of the subsumee must satisfy those of the subsumer. Not surprisingly, the appropriate criterion for plan subsumption depends on the application. 6.4 Temporal Concepts Several authors have proposed concept languages with temporal concepts and individuals. <p> For example, one can describe "a particular version of (an individual named) peter who owns a red car that changes to green and he owns no other cars." There are also plan-forming operators, corresponding to a portion of clasp <ref> [ Devanbu and Litman, 1991 ] </ref> , that can be used to reason about recurrence. <p> Besides being valuable from 9 Not to be confused with the homonymous clasp system of <ref> [ Devanbu and Litman, 1991 ] </ref> that was discussed in Section 6.3.2. 229 a knowledge engineering perspective, the resulting rule taxonomy provides a principled basis for selecting rules to fire under the commonly used specificity criterion. <p> Presumably this could be built on top of the absolute time representation supported by mats. To support even greater temporal expressiveness in plan-subsumption systems, we might extend t-rex's language in the direction of clasp's language <ref> [ Devanbu and Litman, 1991 ] </ref> . Some ideas for introducing limited forms of disjunction and looping in temporal constraint networks were described in [ Weida, 1993 ] . However, general disjunction and loop 254 ing do not seem to fit naturally within the constraint network paradigm. <p> For example, consider the case where act1, which consumes 3 to 5 time units, precedes or follows act2, which consumes 7 to 9 time units: (OR (SEQUENCE f (start act1)g [3,5] f (finish act1)g (0,1) f (start act2)g 2 We adopt the operators of <ref> [ Devanbu and Litman, 1991 ] </ref> to compose regular expressions, as in Section 6.3.2. 255 f (finish act2)g) (SEQUENCE f (start act2)g [7,9] f (finish act2)g (0,1) f (start act1)g [3,5] f (finish act1)g)) Subsumption between regular expressions continues to follow from sub-sumption between elements of the language.
Reference: [ Devanbu and Litman, 1996 ] <author> P. Devanbu and D. Litman. </author> <title> Taxonomic plan reasoning. </title> <journal> Artificial Intelligence Journal, </journal> <note> 1996. Accepted, to appear. </note>
Reference-contexts: It is the first description logic-based system to focus on plan library management <ref> [ Devanbu and Litman, 1991; Devanbu and Litman, 1996 ] </ref> . Plans in clasp are described as possible sequences of actions by means of regular expressions over action concepts. <p> Results from automata theory are employed to determine plan subsumption and instantiation. One plan subsumes another if the automaton representing the first plan accepts whenever the automaton representing the second one does. Note that transitions are matched via subsumption and instantiation of action concepts. See <ref> [ Devanbu and Litman, 1991; Devanbu and Litman, 1996 ] </ref> for further details. Regular expression subsumption is P-SPACE hard [ Wellman, 1990 ] .
Reference: [ Devanbu et al., 1991 ] <author> P. Devanbu, R. J. Brachman, B. W. Ballard, and P. E. Self-ridge. </author> <title> Lassie: A knowledge-based software information system. </title> <journal> Communications of the ACM, </journal> <volume> 34(5), </volume> <month> May </month> <year> 1991. </year>
Reference: [ Di Eugenio, 1994 ] <author> B. Di Eugenio. </author> <title> Action representation for interpreting purpose clauses in natural language instructions. </title> <booktitle> In Fourth International Conference on Principles of Knowledge Representation and Reasoning (KR'94), </booktitle> <pages> pages 158-169, </pages> <year> 1994. </year> <month> 263 </month>
Reference-contexts: There has also been significant work on action representation in description logic for the problem of understanding natural language instructions <ref> [ DiEugenio and Webber, 1992; Di Eugenio, 1994 ] </ref> . 6.3.1 SUDO-PLANNER Wellman studied the formulation of tradeoffs in the context of planning medical therapy under uncertainty [ Wellman, 1990 ] .
Reference: [ DiEugenio and Webber, 1992 ] <author> B. DiEugenio and B. Webber. </author> <title> Plan recognition in understanding instructions. </title> <booktitle> In Artificial Intelligence Planning Systems, </booktitle> <address> College Park, MD, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: There has also been significant work on action representation in description logic for the problem of understanding natural language instructions <ref> [ DiEugenio and Webber, 1992; Di Eugenio, 1994 ] </ref> . 6.3.1 SUDO-PLANNER Wellman studied the formulation of tradeoffs in the context of planning medical therapy under uncertainty [ Wellman, 1990 ] .
Reference: [ Dionne, 1991 ] <author> R. Dionne. </author> <type> personal communication, </type> <year> 1991. </year>
Reference-contexts: Fortunately, because MSN concepts represent necessary constraints on the individual, we know that each MSO concept must be subsumed by every MSN concept (in an augmented terminology). Moreover, we can efficiently identify concepts subsumed by every MSN concept and mark them accordingly <ref> [ Dionne, 1991 ] </ref> . When visiting a concept in this phase, there are three cases: 1. It may have been marked necessary during the MSN phase, 2. it may have become impossible, or 3. it may remain an MSO concept.
Reference: [ Donini et al., 1991 ] <author> F. M. Donini, M. Lenzerini, D. Nardi, and W. Nutt. </author> <title> The complexity of concept languages. </title> <booktitle> In Second International Conference on Principles of Knowledge Representation and Reasoning (KR'91), </booktitle> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: Several subsumption algorithms have been discussed in the literature. The most thorough and modern presentation of a structural subsumption algorithm is found in [ Borgida and Patel-Schneider, 1994 ] . Satisfiability-checking algorithms are given in <ref> [ Hollunder et al., 1990; Donini et al., 1991 ] </ref> . 6 In more expressive description logics, completion includes additional logical deductions. 29 (define-concept normalized-and-completed-risc-cpu (and cpu (at-least 1 technology) (at-most 1 technology) (all technology risc))) (define-concept normalized-and-completed-ibm-risc-cpu (and cpu (at-least 1 vendor) (at-most 1 vendor) (all vendor thing) (fills vendor <p> More recently, Nebel showed that sub-sumption in terminologies, which permit concepts to reference previously defined concepts, is inherently intractable (co-NP-complete) [ Nebel, 1990b ] . Today, a fairly comprehensive view of complexity in description logic has emerged <ref> [ Donini et al., 1991; Buchheit et al., 1993 ] </ref> . Since our predictive concept recognition methodology and our work on constraint network reasoning in description logic both rely on subsumption, classification, and similar inferences, the preceding results are pertinent.
Reference: [ Donini et al., 1992 ] <author> F. Donini, M. Lenzerini, D. Nardi, A. Schaerf, and W. Nutt. </author> <title> Adding epistemic operators to concept languages. </title> <booktitle> In Principles of Knowledge Representation and Reasoning: Proceedings of the Third International Conference (KR'92), </booktitle> <pages> pages 342-354, </pages> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: We neither assume that the set of individuals is closed, nor do we attempt closed world reasoning over individuals (which was treated in a description logic context by <ref> [ Donini et al., 1992 ] </ref> ). CTA is just right for applications like configuration and plan recognition (see Chapter 5), where domain modeling is completed prior to problem solving. 12 By Definition 9, once an individual is finished, it will bijectively instantiate at least one concrete concept.
Reference: [ Doyle and Patil, 1991 ] <author> J. Doyle and R. Patil. </author> <title> Two theses of knowledge representation: Language restrictions, taxonomic classification, and the utility of representation services. </title> <journal> Artificial Intelligence, </journal> <volume> 48(3) </volume> <pages> 261-297, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: While intractability results for the subsumption problem are sobering, it must be emphasized that they are worst-case analyses. Moreover, as discussed in Section 2.1.9, Doyle and Patil have argued that worst-case performance should not be the predominant factor in judging subsumption algorithms <ref> [ Doyle and Patil, 1991 ] </ref> . 2.1.5 Recognition The recognition inference determines whether a given individual instantiates a given concept. We will not go into detail about computing recognition, because it is substantially similar to computing subsumption. <p> Classification is the most expensive operation provided by standard description logic systems. It would follow that description logic languages should be restricted so that tractable and guaranteed correct classification operations can be assured. Doyle and Patil have called this conclusion the restricted language thesis <ref> [ Doyle and Patil, 1991 ] </ref> .
Reference: [ Feiner and McKeown, 1990 ] <author> S. Feiner and K.R. McKeown. </author> <title> Coordinating text and graphics in explanation generation. </title> <booktitle> In Proceedings of AAAI-90, </booktitle> <pages> pages 442-449, </pages> <address> Boston, MA, </address> <year> 1990. </year>
Reference: [ Fikes and Nilsson, 1971 ] <author> R. E. Fikes and N. J. Nilsson. </author> <title> Strips: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-208, </pages> <year> 1971. </year>
Reference-contexts: We conclude by comparing several different types of plan subsumption that have been studied. We have not concentrated on detailed representation of the actions within description logic plans, but a number of authors have done so. clasp [ Devanbu and Litman, 1991 ] uses a strips-like representation <ref> [ Fikes and Nilsson, 1971 ] </ref> , while Artale and Franconi use an Allen-style [ Allen, 1991 ] representation [ Artale and Franconi, 1993; Artale and Franconi, 1994 ] . <p> Plans in clasp are described as possible sequences of actions by means of regular expressions over action concepts. Scenarios, or plan instances, are sequences of action instances. clasp uses classic [ Borgida et al., 1989 ] to model action concepts in the style of strips <ref> [ Fikes and Nilsson, 1971 ] </ref> . Referring to Figure 6.1 on page 216, a generic Action can be specialized to a System-Act whose ACTORs are restricted to System-Agents, and further specialized to a Connect-Dialtone-Act.
Reference: [ Freeman, 1986 ] <author> M. W. Freeman. </author> <title> Case study of the beacon project: </title> <booktitle> The burroughs browser/editor and automated configurator. In Proc. of the IEEE Symposium on Logic Programming, </booktitle> <year> 1986. </year>
Reference-contexts: The overall configuration system also contains other modules that are not shown, such as a user interface. Previous work shows that description logic is well suited to configuration problems. meson was used to address configuration [ Owsnicki-Klewe, 1988 ] , beacon reached the advanced prototype stage at UNISYS 3 <ref> [ Freeman, 1986; Searls and Norton, 1990 ] </ref> , and classic is successfully deployed within a series of configura-tors for telephone switching devices at AT&T [ Wright et al., 1993 ] . <p> It was the first configurator based on a description logic system, knet <ref> [ Freeman, 1986; Searls and Norton, 1990 ] </ref> . beacon's concepts are organized in a subsumption hierarchy, and also in an aggregation hierarchy by means of their roles.
Reference: [ Garey and Johnson, 1979 ] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of Incompleteness. </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> San Francisco, CA, </address> <year> 1979. </year>
Reference-contexts: We therefore looked at a selection of examples that are difficult because they involve large numbers of nodes and/or large numbers of potential images for nodes in the subsumer. * In the worst case, the subsumption problem amounts to subgraph isomor-phism, which is NP-complete <ref> [ Garey and Johnson, 1979 ] </ref> .
Reference: [ Gertner et al., 1995 ] <author> A. Gertner, B. Webber, and J. R. Clark. </author> <title> Recognizing and evaluating plans with diagnostic actions. In The Next Generation of Plan Recognition Systems: Challenges for and Insight from Related Areas of AI, </title> <address> Montreal, Canada, </address> <year> 1995. </year>
Reference-contexts: There is a need for sound principles to control this process. Some positive work in this area was done in the context of multiple-trauma care, which involves both diagnostic and therapeutic plans for different injuries <ref> [ Gertner et al., 1995 ] </ref> . Useful plan recognition systems must be able to respond to recognized plans by taking appropriate action.
Reference: [ Goodman and Litman, 1992 ] <author> Bradley A. Goodman and Diane J. Litman. </author> <title> On the interaction between plan recognition and intelligent interfaces. User Modeling and User-Adapted Interaction, </title> <address> 2(1-2):55-82, </address> <year> 1992. </year>
Reference-contexts: For example, the user interface can present a choice of just those disk drives that are consistent with all previous choices. In a related vein, Goodman and Litman investigated the use of plan-constrained user interaction and applied it to a system for chemical process design <ref> [ Goodman and Litman, 1992 ] </ref> . 49 Stated more generally, the objective of the work presented in this chapter is to exploit the CTA as individuals are incrementally specified. In particular, we infer those concepts that are consistent with an individual at any moment.
Reference: [ Heinsohn et al., 1992a ] <author> J. Heinsohn, D. Kudenko, B. Nebel, and H. J. Profitlich. Rat: </author> <title> Representation of actions using terminological logics. </title> <publisher> DFKI, </publisher> <year> 1992. </year> <month> 264 </month>
Reference-contexts: There is also contemporaneous work on state-based reasoning with plans limited to simple sequences <ref> [ Heinsohn et al., 1992a ] </ref> . After considering each of these systems in turn, we summarize their comparison in Table 6.1. <p> Recently, protodl introduced a framework for extending description logic systems with customized language constructs [ Borgida, 1992 ] . This methodology was demonstrated by reconstructing clasp in protodl. 6.3.3 RAT The rat system <ref> [ Heinsohn et al., 1992a ] </ref> was developed at the German Research Center for Artificial Intelligence (DFKI) as part of the WIP project on automatic generation of multimedia presentations. rat was used to represent plans for assembling, using, maintaining, or repairing a physical device, namely an espresso machine. <p> Both preconditions and postconditions are conjunctions of attribute restrictions, as well as agreements and disagreements (constraints across roles with equality and inequality operators). The following example is given in <ref> [ Heinsohn et al., 1992a ] </ref> , where periods denote role composition in role chains: 220 turn-switch-to-espresso = &lt;(agent: person u machine: espresso-machine), (machine.state: (off u ready) u machine.has-switch.position: off-position), (machine.state: on u machine.has-switch.position: espresso-position)&gt;. <p> These are illustrated in a plan for making espresso taken from <ref> [ Heinsohn et al., 1992a ] </ref> : make-espresso = &lt;(agent:person u object1:cup u object2:espresso-machine), (: : : , A5: put-cup-under-water-outlet, A6: turn-switch-to-espresso, : : : ), (object2 # = A5.machine u object2 # = A6.machine u : : : )&gt;. <p> The mechanism for handling equality and inequality constraints in rat is not discussed <ref> [ Heinsohn et al., 1992a ] </ref> . <p> State information can be handled more effectively when plans are limited to description of action sequences <ref> [ Devanbu and Litman, 1991; Heinsohn et al., 1992a ] </ref> . 6.3.6 Varieties of Plan Subsumption In our work, we have applied constraint network subsumption to plan sub-sumption by means of plan bodies. However, there are other ways to view plan subsumption. <p> However, there are other ways to view plan subsumption. Several different types of plan subsumption relations are identified in <ref> [ Heinsohn et al., 1992a ] </ref> : Abstraction-subsumption: This is defined by [ Heinsohn et al., 1992a ] as "plan P1 subsumes plan P2 iff for each action in P1 there is an action in P2 that is more specialized." It is the type of subsumption computed by t-rex, with the <p> However, there are other ways to view plan subsumption. Several different types of plan subsumption relations are identified in <ref> [ Heinsohn et al., 1992a ] </ref> : Abstraction-subsumption: This is defined by [ Heinsohn et al., 1992a ] as "plan P1 subsumes plan P2 iff for each action in P1 there is an action in P2 that is more specialized." It is the type of subsumption computed by t-rex, with the understanding that P1 's temporal and equality constraints are also respected in
Reference: [ Heinsohn et al., 1992b ] <author> J. Heinsohn, B. Kundeko, D. Nebel, and H-J. Profitlich. </author> <title> An empirical analysis of terminological representation systems. </title> <booktitle> In Proceedings of AAAI-92, </booktitle> <address> San Jose, CA, </address> <year> 1992. </year> <journal> American Association of Artificial Intelligence. </journal>
Reference-contexts: Subsumption in classic is tractable and also complete with respect to concepts. It is complete with respect to individuals only under a non-standard semantics for individuals. The classic algorithm is fast in practice <ref> [ Heinsohn et al., 1992b ] </ref> . loom exemplifies the second choice, with a more expressive language and a fast but incomplete algorithm. k-rep also has an incomplete algorithm which places it somewhere between classic and loom. The third strategy has been pursued by kris. <p> The third strategy has been pursued by kris. Recently, intriguing experimental results suggest that this strategy may not prevent kris from competing on performance with less expressive systems for the subset of the kris language that they have in common <ref> [ Heinsohn et al., 1992b ] </ref> . While intractability results for the subsumption problem are sobering, it must be emphasized that they are worst-case analyses. <p> Our experiments are conducted through a performance analysis workbench program composed of a problem generator, an experiment administrator, and an experiment reporter. This is in keeping with a recent study on the performance of standard description logic systems <ref> [ Baader et al., 1992; Heinsohn et al., 1992b ] </ref> , which used machine-generated knowledge bases (as well as several "real world" knowledge bases). Design of Experiment First we describe the design for an empirical study of the performance and scalability of our constraint network subsumption algorithm.
Reference: [ Hollunder et al., 1990 ] <author> B. Hollunder, Nutt. W., and M. Schmidt-Schau. </author> <title> Sub-sumption algorithms for concept description. </title> <booktitle> In Proceedings of the 9th ECAI, </booktitle> <pages> pages 348-353, </pages> <address> Stockholm, Sweden, </address> <year> 1990. </year>
Reference-contexts: Several subsumption algorithms have been discussed in the literature. The most thorough and modern presentation of a structural subsumption algorithm is found in [ Borgida and Patel-Schneider, 1994 ] . Satisfiability-checking algorithms are given in <ref> [ Hollunder et al., 1990; Donini et al., 1991 ] </ref> . 6 In more expressive description logics, completion includes additional logical deductions. 29 (define-concept normalized-and-completed-risc-cpu (and cpu (at-least 1 technology) (at-most 1 technology) (all technology risc))) (define-concept normalized-and-completed-ibm-risc-cpu (and cpu (at-least 1 vendor) (at-most 1 vendor) (all vendor thing) (fills vendor
Reference: [ Kantrowitz, 1991 ] <author> M. Kantrowitz. </author> <title> Portable utilities for common lisp: User guide & implementation notes. </title> <type> Technical Report CMU-CS-91-143, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Note that the uppermost concepts in the taxonomy are intended only for the internal use of the configurator, and do not represent meaningful choices for an end-user. 27 To measure cost, we instrumented our code with the metering system, a public domain Common Lisp utility described in <ref> [ Kantrowitz, 1991 ] </ref> . metering allows us to count basic operations and gather statistics on timing and storage utilization without modifying the existing code. Moreover, it adjusts timing statistics to discount overhead involved in the monitoring itself. <p> * Number of nodes in each network * Variation among the concepts that label the nodes * Relative generality of concepts associated with nodes (their level in the tax onomy) * Uncertainty (disjunctiveness) of temporal constraints between nodes To measure cost, we again instrumented our code with the metering system <ref> [ Kantrowitz, 1991 ] </ref> . Recall that metering allows us to count basic operations and gather statistics on timing and storage utilization without modifying the existing t-rex code. Moreover, it adjusts timing statistics to discount overhead involved in the monitoring itself.
Reference: [ Kautz and Ladkin, 1991 ] <author> H. A. Kautz and P. B. Ladkin. </author> <title> Integrating metric and qualitative temporal reasoning. </title> <booktitle> In Proceedings of AAAI-91, </booktitle> <pages> pages 241-246, </pages> <address> Ana-heim, CA, </address> <year> 1991. </year>
Reference-contexts: This may be a reasonable option for relatively small problems. Notice how these alternatives parallel the options for dealing with the intractability of subsumption in description logic (Section 2.1.4). Our work on the t-rex system implicitly exercises the second option through its use of the mats temporal reasoner <ref> [ Kautz and Ladkin, 1991 ] </ref> . <p> Kautz and Ladkin designed a constraint reasoner which integrates reasoning over an Allen-style qualitative constraint network for time intervals and a simple metric constraint network for the starting and ending points of those intervals <ref> [ Kautz and Ladkin, 1991 ] </ref> . These ideas were implemented by Kautz in the mats system [ Kautz, 1991a ] . Metric information accounts for durations of intervals and gaps between endpoints of distinct intervals, along with absolute times. <p> those intervals <ref> [ Kautz and Ladkin, 1991 ] </ref> . These ideas were implemented by Kautz in the mats system [ Kautz, 1991a ] . Metric information accounts for durations of intervals and gaps between endpoints of distinct intervals, along with absolute times. Kautz and Ladkin define such metric constraints formally [ Kautz and Ladkin, 1991 ] 11 : 11 We have chosen to write start and finish where they wrote left and right, respectively. 43 Definition 5 A metric constraint on the endpoints of intervals is the conjunction of two difference inequalities: * (i F j G R n) ^ (j <p> Kautz and Ladkin prove that information loss is minimized in their metric-to-qualitative and qualitative-to-metric translation schemes <ref> [ Kautz and Ladkin, 1991 ] </ref> . We chose to use mats in the t-rex prototype because of its superior expressiveness. When necessary or appropriate for some application, we could restrict t-rex 44 to a subset of mats' capabilities. <p> Specifically, it calls upon either k-rep [ Mays et al., 1991a ] or classic [ Borgida et al., 1989 ] to manage a knowledge base of actions and related concepts and individuals, along with mats <ref> [ Kautz and Ladkin, 1991 ] </ref> to propagate qualitative and metric temporal constraints. t-rex contains its own 1 The name derives as follows: Terminological RECognition System ! T-RECS ! T-REX (recall that description logics were formerly known as terminological logics). 96 equality constraint management facility. <p> Our interest in handling a rich variety of temporal information led us to integrate the full temporal expressiveness of mats <ref> [ Kautz and Ladkin, 1991 ] </ref> into our plan language. <p> (define-plan PLAN-D :steps ((step-b plan-b) (step-c plan-c)) :qualitative-constraints ((step-b (before) step-c)) :co-reference-constraints ((agent (step1 (step-b)) = agent (step1 (step-c))))) 115 Any temporal constraint on a step with a macro action can be propagated to each substep within that macro by appropriate use of constraint propagation algorithms such as those in <ref> [ Kautz and Ladkin, 1991 ] </ref> . Song and Cohen have shown how to do this for qualitative constraints [ Song, 1991; Song and Cohen, 1991 ] . Their algorithm is sound, but not complete. <p> Qualitative constraint reasoning in mats is incomplete <ref> [ Kautz and Ladkin, 1991 ] </ref> . In the presence of macro steps, propagation of constraints to their substeps is done via Song and Cohen's incomplete algorithm. * By default, t-rex assumes that nodes and arcs can be considered independently of one another. <p> in n1 's set of potential images, i1 Q1 n1 finish n1 start R1 j1, denoting n1 's duration, must subsume i2 Q2 n2 finish n2 start R2 j2, denoting n2 's duration. (Since an interval's starting point is always before its finishing point, n start n finish &lt; 0: <ref> [ Kautz and Ladkin, 1991 ] </ref> ). The qualitative temporal relationship from a node's interval to itself is trivially equal. The metric temporal relationship from an endpoint of a node's interval to itself is trivially zero.
Reference: [ Kautz, 1991a ] <author> H. Kautz. </author> <title> Metric/allen time system. Documentation, </title> <month> April </month> <year> 1991. </year>
Reference-contexts: These ideas were implemented by Kautz in the mats system <ref> [ Kautz, 1991a ] </ref> . Metric information accounts for durations of intervals and gaps between endpoints of distinct intervals, along with absolute times.
Reference: [ Kautz, 1991b ] <author> H. A. Kautz. </author> <title> A formal theory of plan recognition and its implementation. </title> <editor> In J. Allen, H. Kautz, R. Pelavin, and J. Tenenberg, editors, </editor> <booktitle> Reasoning About Plans, </booktitle> <pages> pages 69-125. </pages> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1991. </year>
Reference-contexts: These systems assume that any conclusion that is not logically derivable from the database is false. This latter notion of a closed world assumption was formalized in artificial intelligence by [ Reiter, 1978 ] . Completeness assumptions have also been common in plan recognition work, e.g., <ref> [ Kautz, 1991b ] </ref> . For example, plan recognition systems often assume that they have at their disposal an explicit representation for every goal and/or plan that might account for observations of the user's activities. <p> A comparison with predictive recognition in standard description logic is made in Section 5.13. Section 5.14 sums up this chapter. 5.2 Plan Recognition Following <ref> [ Kautz, 1991b ] </ref> , we will concentrate on plan recognition via plan bodies, where the bodies describe temporal patterns of actions. In our plan recognition problem, we accept incremental observations about individual actions and 160 their relation to one another. <p> Relationships between nodes taken from different plans are unconstrained. Thus, a multiple plan network allows its constituent plans to be interleaved in any way. As in <ref> [ Kautz, 1991b ] </ref> , observed actions can be shared among plans. A set of plans accounts for all observed actions iff there is a consistency mapping from the observation network to their multiple plan network. t-rex also needs a way to explore the set of possible plan combinations. <p> Following the principle of Occam's razor, Kautz prefers to explain events by the smallest number of plans. His implementation simply considers plans pairwise when a single plan does not suffice to explain the observations, and failing that, three at a time and so on, ad infinitum <ref> [ Kautz, 1991b ] </ref> . t-rex also adopts the minimum cardinality assumption, which is a generalization of the single plan assumption that it uses as long as it can. 19 As a first cut at improvement, t-rex only considers those multiple plan networks that have a consistent action for every observed <p> Our algorithm for QME constraint network subsump-tion is similar in some important respects to the existing algorithm of [ Yen et al., 1991 ] . 6.6 Deductive Plan Recognition This section recounts work in deductive plan recognition, an area of research originated by Kautz <ref> [ Kautz, 1991b ] </ref> . In an effort to identify tractable aspects of deductive plan recognition, Vilain later cast portions of Kautz's work in a parsing framework [ Vilain, 1990 ] . <p> His work boasts an expressive plan representation centered on a hierarchy of event types which are arranged according to abstraction and decomposition relations. Kautz's events include atomic actions as well as composite plans. A sample hierarchy from <ref> [ Kautz, 1991b ] </ref> is diagrammed in Figure 6.3 on page 230, where wide grey arrows indicate abstraction and thin black arrows indicate decomposition. <p> Steps may be shared via inheritance, e.g., MakeFettuciniAlfredo inherits the Boil step of MakePastaDish. Although not shown in Figure 6.3, Kautz's plans have parameters, equality constraints, temporal constraints, preconditions, and effects. A definition for MakePastaDish taken from <ref> [ Kautz, 1991b ] </ref> appears in Figure 6.4. <p> Finally, covering models minimize the cardinality of EndEvent. In addition to Kautz's formal theory of plan recognition, he devised more practical algorithms that approximate his theory. Our plan recognition work is most closely related to that of Kautz <ref> [ Kautz, 1991b ] </ref> . Like Kautz, we make deductive inferences over a plan library that incorporates both a plan abstraction hierarchy and plan decomposition into constituent actions. <p> We also use an underlying description logic system, either k-rep or classic, to represent and reason with the actions and objects that are the building blocks of plans, whereas atomic actions and objects in <ref> [ Kautz, 1991b ] </ref> and many other approaches lack defined semantics. Thus our approach allows the plan recognition system to share the advantages of existing description logic ontologies. <p> For implementation, he suggested a chart-based parser to retain a record of the plan structure presumably reflected in the observations. The primary goal of Vilain's investigation was to identify those portions of Kautz's framework <ref> [ Kautz, 1991b ] </ref> that are amenable to more efficient solution through parsing. By drawing a formal correspondence between Kautz's framework and context free grammars, Vilain indeed found certain portions of Kautz's formalism that admit tractable parsing-based solutions [ Vilain, 1990 ] . <p> This body of work emphasizes plan inference using state information as well as action decomposition. It is more comprehensive, but less formal than our work or that of <ref> [ Kautz, 1991b ] </ref> , [ Vilain, 1990 ] , and [ Song, 1991 ] . <p> It is more comprehensive, but less formal than our work or that of [ Kautz, 1991b ] , [ Vilain, 1990 ] , and [ Song, 1991 ] . For reference, discussions of intention-based plan recognition are contained in <ref> [ Carberry, 1990; Kautz, 1991b; Song, 1991 ] </ref> . 241 Chapter 7 Conclusion This chapter recaps the major contributions of the thesis and surveys some possible directions for continuing the work in the future. 7.1 Contributions The main contributions of this thesis are as follows. 7.1.1 Predictive Recognition in Description Logic <p> Perfect observation permits partial instantiation inferences in lieu of consistency inferences; unrestricted observation requires an ability to undo conclusions about the necessity or impossibility of specific plans. * A deductive theory of plan recognition in the spirit of Kautz's pioneering work <ref> [ Kautz, 1991b ] </ref> was proposed. This framework departs from Kautz's work in several major positive ways: Recognition is guided by the plan taxonomy's subsumption-based orga nization.
Reference: [ Kindermann, 1992 ] <author> C. Kindermann. </author> <title> Retraction in terminological knowledge bases. </title> <booktitle> In Proceedings of the 10th ECAI, </booktitle> <pages> pages 420-424, </pages> <year> 1992. </year>
Reference-contexts: Like all other description logic recognition work prior to this thesis, it only seeks to identify concepts that the individual currently instantiates. Another exception is <ref> [ Kindermann, 1992 ] </ref> : when an individual's description is updated non-monotonically, a data dependency network among individuals is used to reduce the number of dependent individuals which must be considered for reclassification. 6.3 Plans in Description Logic Prior work on implemented plan subsumption systems considered atemporal plans in the context
Reference: [ Kobsa, 1991 ] <author> A. Kobsa. </author> <title> Utilizing knowledge: The components of the sb-one knowledge representation workbench. </title> <editor> In J. Sowa, editor, </editor> <booktitle> Principles of Semantic Networks, </booktitle> <pages> pages 457-486. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1991. </year>
Reference: [ Kramer, 1991 ] <author> B. Kramer. </author> <title> Knowledge-based configuration of computer systems using hierarchical partial choice. </title> <booktitle> In Int. Conf. on Tools for AI, </booktitle> <pages> pages 368-375, </pages> <address> San Jose, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: Performance analysis is considered in Section 3.10, and Section 3.11 concludes. 3.2 Incremental Instantiation To help decide if incremental specification of an individual may be finished, we distinguish between concrete and abstract concepts. A similar distinction was made in configuration work by <ref> [ Kramer, 1991 ] </ref> , but we will formally define the notion of a finished individual. In configuration, only individuals that are instances of concrete concepts can be included per se in a finished system. <p> Candidate elimination 8. Intentional plan recognition This sequence is not intended to reflect the importance of work in these areas. 210 6.1 Configuration via Description Logic Many papers on configuration have appeared in the artificial intelligence literature, and we will not attempt to survey the field. <ref> [ Kramer, 1991 ] </ref> perhaps exemplifies the state of the art. We have argued earlier that description logic offers unique advantages for the representation of conceptual knowledge required by configuration systems.
Reference: [ Kumar, 1992 ] <author> V. Kumar. </author> <title> Algorithms for constraint-satisfaction problems: A survey. </title> <journal> AI Magazine, </journal> <volume> 13(1) </volume> <pages> 32-41, </pages> <year> 1992. </year>
Reference-contexts: Because of the connection with CSP, constraint network subsumption is amenable to a variety of techniques developed by the CSP community, e.g., arc consistency [ Mackworth, 1977 ] , forward checking, etc. Choosing the optimal mix is domain-dependent and largely still a black art <ref> [ Kumar, 1992 ] </ref> . We now introduce an algorithm to decide whether QME network concept N1 subsumes QME network concept N2 . This algorithm combines constraint satisfaction techniques with node and arc subsumption. It can easily be adapted to similar problems.
Reference: [ Lambrix and Ronnquist, 1993 ] <author> P. Lambrix and R. Ronnquist. </author> <title> Tterminological logic involving time and evolution: A preliminary report. </title> <booktitle> In Proceedings of ISMIS-93, </booktitle> <year> 1993. </year>
Reference-contexts: Not surprisingly, the appropriate criterion for plan subsumption depends on the application. 6.4 Temporal Concepts Several authors have proposed concept languages with temporal concepts and individuals. We will review the work of Schmiedel [ Schmiedel, 1990 ] , Bettini [ Bet-tini, 1994 ] , and Lambrix and Ronnquist <ref> [ Lambrix and Ronnquist, 1993 ] </ref> . 6.4.1 Schmiedel Schmiedel [ Schmiedel, 1990 ] has described an ambitious attempt to extend description logic to temporal concepts by integrating both Allen's temporal logic and Shoham's [ Shoham, 1987 ] . <p> Bettini's contributions include formalizing his interval-based temporal concept descriptions by translating them into first order logic. 6.4.3 T-LITE Lambrix and Ronnquist integrated a novel temporal logic called lite (Logic Involving Time and Evolution) [ Ronnquist, 1990 ] with a terminological logic in a framework they named t-lite <ref> [ Lambrix and Ronnquist, 1993 ] </ref> . lite supports time-dependent versions of individuals, and allows concepts to be defined according to the progression of individuals over versions, which are partially ordered.
Reference: [ Lesh and Etzioni, 1995 ] <author> N. Lesh and O. Etzioni. </author> <title> Insights from machine learning for plan recognition. In The Next Generation of Plan Recognition Systems: </title> <booktitle> Challenges for and Insight from Related Areas of AI, </booktitle> <pages> pages 78-83, </pages> <address> Montreal, Canada, </address> <year> 1995. </year> <month> 265 </month>
Reference-contexts: Candidate-elimination operates on sets of different positive and negative instances, while we are concerned with successive descriptions of the same instance. 240 In work closely related to plan recognition, Lesh and Etzioni investigated the problem of recognizing a user's goal from a sequence of actions <ref> [ Lesh and Etzioni, 1995 ] </ref> . Their sound and fast, but incomplete, goal recognizer uses a version space algorithm to track the space of goal schemas that are consistent with the observed actions.
Reference: [ Levesque and Brachman, 1985 ] <author> H. J. Levesque and R. J. Brachman. </author> <title> A fundamental tradeoff in knowledge representation and reasoning. </title> <booktitle> In Readings in Knowledge Representation, </booktitle> <pages> pages 42-70. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1985. </year>
Reference-contexts: They concluded that designers of description logic systems must make careful choices in trading expressiveness for tractability. Moreover, there is no single best choice. Instead, different choices may be appropriate depending on the application. 7 Much of which is included in <ref> [ Levesque and Brachman, 1985 ] </ref> . 30 The result of Brachman and Levesque has practical significance because their co-NP-complete language is a subset of the languages employed by such systems as kl-one.
Reference: [ Levesque and Brachman, 1987 ] <author> H. Levesque and R. J. Brachman. </author> <title> Expressiveness and tractability in knowledge representation and reasoning. </title> <journal> Computational Intelligence, </journal> <volume> 3 </volume> <pages> 78-93, </pages> <year> 1987. </year>
Reference-contexts: will take advantage of the LCS inference to help derive constraints imposed on a partially specified individual by a closed terminology. 2.1.9 Current Limitations Levesque and Brachman have argued that a knowledge representation facility should be correct, i.e., sound and complete, yet dependably quick enough for the most critical applications <ref> [ Levesque and Brachman, 1987 ] </ref> . Classification is the most expensive operation provided by standard description logic systems. It would follow that description logic languages should be restricted so that tractable and guaranteed correct classification operations can be assured.
Reference: [ Litman and Allen, 1987 ] <author> D. J. Litman and J. F. Allen. </author> <title> A plan recognition model for subdialogues in conversation. </title> <journal> Cognitive Science, </journal> <volume> 11 </volume> <pages> 163-200, </pages> <year> 1987. </year>
Reference-contexts: In such cases, t-rex currently has no basis for preferring one plan over the others. This ambiguity might be resolved with goal-based reasoning, e.g., <ref> [ Litman and Allen, 1987 ] </ref> , probabilistic reasoning, e.g., [ Charniak and Goldman, 1993 ] , and/or selective querying of the user through clarification 256 dialogues, e.g., [ van Beek and Cohen, 1991 ] .
Reference: [ MacGregor, 1988 ] <author> R. MacGregor. </author> <title> A deductive pattern matcher. </title> <booktitle> In Proceedings of AAAI-88, </booktitle> <pages> pages 403-408, </pages> <address> Saint Paul, MN, </address> <year> 1988. </year> <journal> American Association of Artificial Intelligence. </journal>
Reference-contexts: Second, we use consistency inferences which exploit certain assumptions, namely the closed terminology and monotonic update assumptions. For the most part, traditional recognition algorithms in description logic are part of the field's unpublished lore. One exception is <ref> [ MacGregor, 1988 ] </ref> , which caches the results of tests made during recognition to avoid unnecessary work while revising results in case the individual's definition changes. Like all other description logic recognition work prior to this thesis, it only seeks to identify concepts that the individual currently instantiates.
Reference: [ MacGregor, 1991a ] <author> R. MacGregor. </author> <title> The evolving technology of classification-based knowledge representation systems. </title> <editor> In J. Sowa, editor, </editor> <booktitle> Principles of Semantic Networks, </booktitle> <pages> pages 385-400. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1991. </year>
Reference: [ MacGregor, 1991b ] <author> R. MacGregor. </author> <title> Using a description classifier to enhance deductive inference. </title> <booktitle> In Proc. of the Seventh Conference on Artificial Intelligence Applications (CAIA-91), </booktitle> <pages> pages 141-147, </pages> <address> Miami Beach, FL, </address> <year> 1991. </year>
Reference-contexts: Therefore, t-rex also applies the set of domain-specific rules to plan individuals when they are first defined 117 and whenever they are updated. New instantiation relationships may thus be discovered. Some standard description logic systems, such as classic [ Borgida et al., 1989 ] , loom <ref> [ MacGregor, 1991b ] </ref> , and meson [ Owsnicki-Klewe, 1988 ] , apply forward-chaining rules to standard individuals in this fashion. 4.3.7 Conclusion Section 4.3 has specified the representation of constraint network concepts and individuals, with particular emphasis on plan descriptions. <p> Lambrix and Ronnquist give a formal semantics for t-lite, but do not address inferences such as subsumption. 6.5 Production Rules in Description Logics The clasp system of [ Yen et al., 1991 ] 9 reasons with production rules whose antecedents are expressed using loom <ref> [ MacGregor, 1991b ] </ref> . In particular, the antecedents of clasp rules are patterns composed of unary predicates (corresponding to concepts) and binary predicates (corresponding to roles). clasp is concerned in part with computing subsumption relationships among the antecedents of a set of production rules and classifying the rules accordingly.
Reference: [ MacGregor, 1994 ] <author> R. M. MacGregor. </author> <title> A description classifier for the predicate calculus. </title> <booktitle> In Proceedings of AAAI-94, </booktitle> <address> Seattle, WA, </address> <year> 1994. </year> <journal> American Association of Artificial Intelligence. </journal>
Reference: [ Mackworth, 1977 ] <author> A. K. Mackworth. </author> <title> Consistency in networks of relations. </title> <journal> Artificial Intelligence, </journal> <volume> 8(1) </volume> <pages> 99-118, </pages> <year> 1977. </year>
Reference-contexts: Allen proposed a simple polynomial-time constraint propagation algorithm to complete (or close) a qualitative temporal network by computing the implicit consequences of explicitly stated constraints, i.e., a transitive closure. Allen's algorithm is an in-stantiation of the path consistency algorithm for constraint satisfaction <ref> [ Montanari, 1974; Mackworth, 1977 ] </ref> . Allen's constraint propagation algorithm is sound, but unfortunately not complete [ Vilain et al., 1989 ] . This is important because in practice, we cannot always expect that all temporal relations will be made explicit in a system's input. <p> For QME networks, there are unary constraints (concepts associated with the nodes) plus binary constraints (relationships described by the arcs). Because of the connection with CSP, constraint network subsumption is amenable to a variety of techniques developed by the CSP community, e.g., arc consistency <ref> [ Mackworth, 1977 ] </ref> , forward checking, etc. Choosing the optimal mix is domain-dependent and largely still a black art [ Kumar, 1992 ] . We now introduce an algorithm to decide whether QME network concept N1 subsumes QME network concept N2 .
Reference: [ Malik and Binford, 1983 ] <author> J. Malik and T. O. Binford. </author> <title> Reasoning in time and space. </title> <booktitle> In Proceedings of AAAI-83, </booktitle> <pages> pages 343-345, </pages> <address> Washington, D.C., </address> <year> 1983. </year> <journal> American Association of Artificial Intelligence. </journal>
Reference: [ Markoff, 1996 ] <author> J. </author> <title> Markoff. New venture plans system on internet for travelers. </title> <address> New York Times, </address> <institution> page D1, </institution> <month> February 6 </month> <year> 1996. </year>
Reference: [ Mays et al., 1991a ] <author> E. Mays, R. Dionne, and R. Weida. </author> <title> K-rep system overview. </title> <journal> SIGART Bulletin, </journal> <volume> 2(3) </volume> <pages> 93-97, </pages> <month> June </month> <year> 1991. </year> <title> Special Issue on Implemented Knowledge Representation and Reasoning Systems. </title>
Reference-contexts: Indeed, all previous work in description logic operates under the OTA. We aim to enhance the utility of description logic for tasks such as configuration through our work with the k-rep system <ref> [ Mays et al., 1991a ] </ref> . For configuration, the OTA is appropriate during knowledge engineering, when we construct a model of systems, components, and related concepts. During the knowledge engineering phase, knowledge engineers may continue to add new concepts. <p> Specifically, it calls upon either k-rep <ref> [ Mays et al., 1991a ] </ref> or classic [ Borgida et al., 1989 ] to manage a knowledge base of actions and related concepts and individuals, along with mats [ Kautz and Ladkin, 1991 ] to propagate qualitative and metric temporal constraints. t-rex contains its own 1 The name derives as
Reference: [ Mays et al., 1991b ] <author> E. Mays, S. Lanka, B. Dionne, and R. Weida. </author> <title> A persistent store for large shared knowledge bases. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 3(1) </volume> <pages> 33-41, </pages> <month> March </month> <year> 1991. </year> <month> 266 </month>
Reference-contexts: Also, since most present day plan libraries are organized by hand, the clerical demands placed on the plan administrator may become burdensome. Our experience with knowledge engineering shows that when confronted with large quantities of information, the enforced semantics of the subsumption-based approach offers significant advantages <ref> [ Mays et al., 1991b ] </ref> . The initial t-rex implementation of classification is entirely unremarkable, so we do not elaborate on it here. However, we will illustrate its results on a sample plan library in the travel domain.
Reference: [ Mays et al., 1996 ] <author> E. Mays, R. Weida, R. Dionne, M. Laker, B. White, C. Liang, and F. Oles. </author> <title> Scalable and expressive medical terminologies. </title> <note> Submitted for publication, </note> <year> 1996. </year>
Reference: [ McCarthy, 1980 ] <author> J. McCarthy. </author> <title> Circumscription a form of non-monotonic reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13 </volume> <pages> 27-39, </pages> <year> 1980. </year>
Reference-contexts: We will consider each of these efforts, in turn. 6.6.1 Kautz Kautz's landmark work produced a formal, deductive theory of plan recognition based on circumscription <ref> [ McCarthy, 1980 ] </ref> . His work boasts an expressive plan representation centered on a hierarchy of event types which are arranged according to abstraction and decomposition relations. Kautz's events include atomic actions as well as composite plans.
Reference: [ McDermott, 1982 ] <author> J. McDermott. </author> <title> R1: A rule-based configurer of computer systems. </title> <journal> Artificial Intelligence, </journal> <volume> 19 </volume> <pages> 39-88, </pages> <year> 1982. </year>
Reference-contexts: In that context, if an intel-cpu is chosen, CTA enables the inference that it is not a risc-cpu. Configuration is an important, traditional application area for artificial intelligence research, e.g. <ref> [ McDermott, 1982 ] </ref> . In our view, description logic is ideal for describing artifacts such as computer systems and their components, and for maintaining the consistency of large configuration knowledge bases as they evolve over time.
Reference: [ McGuinness and Resnick, 1995 ] <author> D. L. McGuinness and L. A. Resnick. </author> <title> Description logic-based configuration for consumers. </title> <booktitle> In International Workshop on Description Logics, </booktitle> <address> Rome, Italy, </address> <year> 1995. </year>
Reference: [ Meiri, 1991 ] <author> I. Meiri. </author> <title> Combining qualitative and quantitative constraints in temporal reasoning. </title> <booktitle> In Proceedings of AAAI-91, </booktitle> <pages> pages 260-267, </pages> <address> Anaheim, CA, </address> <year> 1991. </year>
Reference-contexts: We chose to use mats in the t-rex prototype because of its superior expressiveness. When necessary or appropriate for some application, we could restrict t-rex 44 to a subset of mats' capabilities. Meiri has proposed an alternative model which integrates qualitative and metric constraints in a single constraint network <ref> [ Meiri, 1991 ] </ref> . Finally, a performance evaluation of several temporal reasoners is reported in [ Yampratoom and Allen, 1993 ] . 2.4 Synthesis This chapter began with a review of description logic.
Reference: [ Mitchell, 1982 ] <author> T. M. Mitchell. </author> <title> Generalization as search. </title> <journal> Artificial Intelligence, </journal> <volume> 18 </volume> <pages> 203-226, </pages> <year> 1982. </year>
Reference-contexts: Song and Cohen's plan recognition process only identifies possible plans, not necessary ones. Finally, they have not considered the prospect of simultaneous plans. 238 6.7 Candidate Elimination In the area of machine learning, Mitchell investigated the problem of generalizing from examples <ref> [ Mitchell, 1982 ] </ref> . There are some interesting similarities with our work on predictive recognition. 12 Mitchell summarized a class of generalization problems as follows (taken from [ Mitchell, 1982 ] ): Given: 1. A language in which to describe instances. 2. <p> prospect of simultaneous plans. 238 6.7 Candidate Elimination In the area of machine learning, Mitchell investigated the problem of generalizing from examples <ref> [ Mitchell, 1982 ] </ref> . There are some interesting similarities with our work on predictive recognition. 12 Mitchell summarized a class of generalization problems as follows (taken from [ Mitchell, 1982 ] ): Given: 1. A language in which to describe instances. 2. A language in which to describe generalizations. 3. A matching predicate that matches generalizations to instances. 4. A set of positive and negative training instances of a target gen eralization to be learned. <p> Noting that generality induces a partial order on the hypothesis space, Mitchell proposed a version space strategy to track the hypothesis space as instances are presented to the system. Two sets are used to capture it in a space-efficient manner (taken from <ref> [ Mitchell, 1982 ] </ref> ): S = f s j s is a generalization that is consistent with the observed instances, and there is no generalization which is both more specific than s, and consistent with the observed instances g. 12 Thanks to Bonnie Webber and Ehud Reiter who independently pointed
Reference: [ Montanari, 1974 ] <author> U. Montanari. </author> <title> Networks of constraints: Fundamental properties and applications to picture processing. </title> <journal> Information Science, </journal> <volume> 7 </volume> <pages> 95-132, </pages> <year> 1974. </year>
Reference-contexts: Allen proposed a simple polynomial-time constraint propagation algorithm to complete (or close) a qualitative temporal network by computing the implicit consequences of explicitly stated constraints, i.e., a transitive closure. Allen's algorithm is an in-stantiation of the path consistency algorithm for constraint satisfaction <ref> [ Montanari, 1974; Mackworth, 1977 ] </ref> . Allen's constraint propagation algorithm is sound, but unfortunately not complete [ Vilain et al., 1989 ] . This is important because in practice, we cannot always expect that all temporal relations will be made explicit in a system's input.
Reference: [ Mukerjee and Joe, 1990 ] <author> A. Mukerjee and G. Joe. </author> <title> A qualitative model for space. </title> <booktitle> In Proceedings of AAAI-90, </booktitle> <pages> pages 721-727, </pages> <address> Boston, MA, </address> <year> 1990. </year>
Reference-contexts: While Allen's scheme was designed for the temporal domain, it is equally appropriate for one-dimensional space. Moreover, as pointed out in <ref> [ Mukerjee and Joe, 1990 ] </ref> , relationships in N-dimensional space can be modeled by N-tuples of Allen's constraints. <p> As a first approximation to spatial relationships, we associate objects and locations with rectilinear bounding boxes aligned to the axes, i.e., we consider the projections onto the axes as intervals, and then use Allen's relations on them. The alignment can in fact be varied <ref> [ Mukerjee and Joe, 1990 ] </ref> . The following constraint network specifies a c-square whose bounding box is disjoint from that of a c-polygon in 2-dimensional space 3 : * c-square ((before, after), (before, after)) c-polygon Orthogonal constraint networks maintain relationships along each axis.
Reference: [ Nebel, 1988 ] <author> B. Nebel. </author> <title> Computational complexity of terminological reasoning in back. </title> <journal> Artificial Intelligence, </journal> <volume> 34(3) </volume> <pages> 371-383, </pages> <year> 1988. </year>
Reference-contexts: Nebel later showed that another subset of the languages used in systems like kl-one and back creates an NP-hard subsumption problem <ref> [ Nebel, 1988 ] </ref> . Patel-Schneider then demonstrated that subsumption in nikl, loom, and similar systems is undecidable as well [ Patel-Schneider, 1989 ] . By showing that no complete algorithm for such languages is possible, his result underscored a trend towards sound but consciously incomplete subsumption and classification algorithms.
Reference: [ Nebel, 1990a ] <author> B. Nebel. </author> <title> Reasoning and Revision in Hybrid Representation Systems. </title> <publisher> Springer Verlag, </publisher> <address> Berlin; New York, </address> <year> 1990. </year>
Reference-contexts: Details are beyond the scope of this thesis, but the interested reader is referred to <ref> [ Nebel, 1990a ] </ref> . 3 The stated constraint of (exactly 1 processor) is decomposable into (at-least 1 processor), which is inherited from computer-system, and (at-most 1 processor), which is not inherited. 23 Definition 1 The restricted roles of concept or individual X are the roles R of X for which <p> See <ref> [ Nebel, 1990a ] </ref> for further details on this process. The normalized and completed description comprises a set of structural components. For the language treated in this thesis, structural components include primitives and elementary role restrictions: at-least, at-most, value, and fillers.
Reference: [ Nebel, 1990b ] <author> B. Nebel. </author> <title> Terminological reasoning is inherently intractable. </title> <journal> Artificial Intelligence, </journal> <volume> 43 </volume> <pages> 235-249, </pages> <year> 1990. </year>
Reference-contexts: However there is no problem when the chains are restricted to attributes (functional roles) [ Schmidt-Schau, 1989 ] . More recently, Nebel showed that sub-sumption in terminologies, which permit concepts to reference previously defined concepts, is inherently intractable (co-NP-complete) <ref> [ Nebel, 1990b ] </ref> . Today, a fairly comprehensive view of complexity in description logic has emerged [ Donini et al., 1991; Buchheit et al., 1993 ] .
Reference: [ Owsnicki-Klewe, 1988 ] <author> B. Owsnicki-Klewe. </author> <title> Configuration as a consistency maintenance task. </title> <editor> In W. Hoeppner, editor, </editor> <booktitle> 12th German Workshop on Artificial Intelligence (GWAI-88), </booktitle> <pages> pages 77-87, </pages> <address> Berlin, Germany, 1988. </address> <publisher> Springer. </publisher>
Reference-contexts: The overall configuration system also contains other modules that are not shown, such as a user interface. Previous work shows that description logic is well suited to configuration problems. meson was used to address configuration <ref> [ Owsnicki-Klewe, 1988 ] </ref> , beacon reached the advanced prototype stage at UNISYS 3 [ Freeman, 1986; Searls and Norton, 1990 ] , and classic is successfully deployed within a series of configura-tors for telephone switching devices at AT&T [ Wright et al., 1993 ] . <p> New instantiation relationships may thus be discovered. Some standard description logic systems, such as classic [ Borgida et al., 1989 ] , loom [ MacGregor, 1991b ] , and meson <ref> [ Owsnicki-Klewe, 1988 ] </ref> , apply forward-chaining rules to standard individuals in this fashion. 4.3.7 Conclusion Section 4.3 has specified the representation of constraint network concepts and individuals, with particular emphasis on plan descriptions. <p> We have argued earlier that description logic offers unique advantages for the representation of conceptual knowledge required by configuration systems. This section surveys other research that has pursued this idea, namely beacon [ Searls and Norton, 1990 ] , meson <ref> [ Owsnicki-Klewe, 1988 ] </ref> , and prose [ Wright et al., 1993 ] . 6.1.1 BEACON The beacon system developed at Burroughs 1 was an interactive, logic-based configurator implemented in Prolog. <p> Constraint derivation is complete and consistent just to the extent that the set of constraints attached to concepts are complete and consistent. 6.1.2 MESON An early use of description logic for configuration was reported in <ref> [ Owsnicki-Klewe, 1988 ] </ref> , which cast the entire configuration problem as a matter of maintaining internal knowledge base consistency, i.e., logical contradictions should follow from all invalid configurations but no valid ones. This goal is more ambitious than ours or that of [ Wright et al., 1993 ] . <p> This goal is more ambitious than ours or that of [ Wright et al., 1993 ] . However, <ref> [ Owsnicki-Klewe, 1988 ] </ref> did no closed terminology reasoning.
Reference: [ Patel-Schneider and Swartout, 1993 ] <author> P.F. Patel-Schneider and B. Swartout. </author> <title> Working version (draft): Description logic specification from the krss effort, </title> <month> June </month> <year> 1993. </year>
Reference-contexts: We elaborate on it here for the sake of later comparison; in Chapter 3, we will propose the idea of closed terminology consistency inferences in description logic. As an example, diskless-system is OTA-consistent with uniprocessor-system, even though 8 Some systems may allow explicit assertions of individual equality <ref> [ Patel-Schneider and Swartout, 1993 ] </ref> . 33 neither subsumes the other. This is because an individual can instantiate them both simultaneously.
Reference: [ Patel-Schneider, 1989 ] <author> P. F. Patel-Schneider. </author> <title> Undecidability of subsumption in nikl. </title> <journal> Artificial Intelligence, </journal> <volume> 39(2) </volume> <pages> 263-272, </pages> <year> 1989. </year> <month> 267 </month>
Reference-contexts: Nebel later showed that another subset of the languages used in systems like kl-one and back creates an NP-hard subsumption problem [ Nebel, 1988 ] . Patel-Schneider then demonstrated that subsumption in nikl, loom, and similar systems is undecidable as well <ref> [ Patel-Schneider, 1989 ] </ref> . By showing that no complete algorithm for such languages is possible, his result underscored a trend towards sound but consciously incomplete subsumption and classification algorithms.
Reference: [ Pollack, 1990 ] <author> M. E. Pollack. </author> <title> Plans as complex mental attitudes. </title> <editor> In P. R. Cohen, J. Morgan, and M. E. Pollack, editors, </editor> <booktitle> Intentions in Communication, </booktitle> <pages> pages 77-104. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, </address> <year> 1990. </year>
Reference: [ Quantz and Royer, 1992 ] <author> J. J. Quantz and V. Royer. </author> <title> A preference semantics for defaults in terminological lofics. </title> <booktitle> In Principles of Knowledge Representation and Reasoning: Proceedings of the Third International Conference (KR'92), </booktitle> <pages> pages 294-305, </pages> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference: [ Ronnquist, 1990 ] <author> R. Ronnquist. </author> <title> A logic for propagation based characterisation of process behavior. </title> <booktitle> In Proceedings of the International Symposium on Methodologies for Intelligent Systems, </booktitle> <pages> pages 297-304, </pages> <year> 1990. </year>
Reference-contexts: Bettini's contributions include formalizing his interval-based temporal concept descriptions by translating them into first order logic. 6.4.3 T-LITE Lambrix and Ronnquist integrated a novel temporal logic called lite (Logic Involving Time and Evolution) <ref> [ Ronnquist, 1990 ] </ref> with a terminological logic in a framework they named t-lite [ Lambrix and Ronnquist, 1993 ] . lite supports time-dependent versions of individuals, and allows concepts to be defined according to the progression of individuals over versions, which are partially ordered.
Reference: [ Reiter, 1978 ] <author> R. Reiter. </author> <title> On reasoning by default. </title> <booktitle> In Proceedings of Theoretical Issues in Natural Language Processing-2, </booktitle> <pages> pages 210-218. </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1978. </year> <note> reprinted in Readings in Knowledge Representation. </note>
Reference-contexts: These systems assume that any conclusion that is not logically derivable from the database is false. This latter notion of a closed world assumption was formalized in artificial intelligence by <ref> [ Reiter, 1978 ] </ref> . Completeness assumptions have also been common in plan recognition work, e.g., [ Kautz, 1991b ] .
Reference: [ Schmidt-Schau, 1989 ] <author> M. Schmidt-Schau. </author> <title> Subsumption in kl-one is undecidable. </title> <booktitle> In First International Conference on Principles of Knowledge Representation and Reasoning (KR'89), </booktitle> <pages> pages 421-431, </pages> <address> Toronto, Ontario, Canada, </address> <year> 1989. </year>
Reference-contexts: Schmidt-Schau proved that a very simple concept language limited to conjunction of concepts, restrictions on values of roles, and equality among role chains is undecidable. However there is no problem when the chains are restricted to attributes (functional roles) <ref> [ Schmidt-Schau, 1989 ] </ref> . More recently, Nebel showed that sub-sumption in terminologies, which permit concepts to reference previously defined concepts, is inherently intractable (co-NP-complete) [ Nebel, 1990b ] . <p> We will say that R X and S Y are the operands of the constraint. We do not allow role composition in equality constraint operands, thus avoiding a potential source of undecidability when computing subsumption <ref> [ Schmidt-Schau, 1989 ] </ref> . Now we can formally specify the different types of arcs. In the case of QME networks, all arcs are directed. <p> We might also extend the role portion of co-reference operand specifiers to permit role chains (compositions of role relations). In general, this would render the subsumption problem undecidable, for reasons similar to those in <ref> [ Schmidt-Schau, 1989 ] </ref> , but attribute chains would be fine. Chains would increase the ability of rules to enforce integrity constraints according to a domain theory.
Reference: [ Schmiedel, 1990 ] <author> A. Schmiedel. </author> <title> A temporal terminological logic. </title> <booktitle> In Proceedings of AAAI-90, </booktitle> <pages> pages 640-645, </pages> <address> Boston, MA, </address> <year> 1990. </year>
Reference-contexts: Not surprisingly, the appropriate criterion for plan subsumption depends on the application. 6.4 Temporal Concepts Several authors have proposed concept languages with temporal concepts and individuals. We will review the work of Schmiedel <ref> [ Schmiedel, 1990 ] </ref> , Bettini [ Bet-tini, 1994 ] , and Lambrix and Ronnquist [ Lambrix and Ronnquist, 1993 ] . 6.4.1 Schmiedel Schmiedel [ Schmiedel, 1990 ] has described an ambitious attempt to extend description logic to temporal concepts by integrating both Allen's temporal logic and Shoham's [ Shoham, <p> We will review the work of Schmiedel <ref> [ Schmiedel, 1990 ] </ref> , Bettini [ Bet-tini, 1994 ] , and Lambrix and Ronnquist [ Lambrix and Ronnquist, 1993 ] . 6.4.1 Schmiedel Schmiedel [ Schmiedel, 1990 ] has described an ambitious attempt to extend description logic to temporal concepts by integrating both Allen's temporal logic and Shoham's [ Shoham, 1987 ] . <p> We detailed how description logic and temporal logic can be united in a common framework, in part following initial ideas outlined by <ref> [ Schmiedel, 1990 ] </ref> . In QME networks, nodes associate a standard description with a temporal interval to represent an occurrence in time. Qualitative and metric temporal constraints across intervals, together with equality constraints across standard descriptions, allow us to represent patterns of occurrences 245 over time.
Reference: [ Schmolze and Mark, 1991 ] <author> J. G. Schmolze and W. S. Mark. </author> <title> The nikl experience. </title> <booktitle> Computational Intelligence, </booktitle> <pages> pages 48-69, </pages> <year> 1991. </year>
Reference: [ Searls and Norton, 1990 ] <author> D. B. Searls and L. M. Norton. </author> <title> Logic-based configuration with a semantic network. </title> <journal> Journal of Logic Programming, </journal> <volume> 8 </volume> <pages> 53-73, </pages> <year> 1990. </year>
Reference-contexts: The overall configuration system also contains other modules that are not shown, such as a user interface. Previous work shows that description logic is well suited to configuration problems. meson was used to address configuration [ Owsnicki-Klewe, 1988 ] , beacon reached the advanced prototype stage at UNISYS 3 <ref> [ Freeman, 1986; Searls and Norton, 1990 ] </ref> , and classic is successfully deployed within a series of configura-tors for telephone switching devices at AT&T [ Wright et al., 1993 ] . <p> We have argued earlier that description logic offers unique advantages for the representation of conceptual knowledge required by configuration systems. This section surveys other research that has pursued this idea, namely beacon <ref> [ Searls and Norton, 1990 ] </ref> , meson [ Owsnicki-Klewe, 1988 ] , and prose [ Wright et al., 1993 ] . 6.1.1 BEACON The beacon system developed at Burroughs 1 was an interactive, logic-based configurator implemented in Prolog. <p> It was the first configurator based on a description logic system, knet <ref> [ Freeman, 1986; Searls and Norton, 1990 ] </ref> . beacon's concepts are organized in a subsumption hierarchy, and also in an aggregation hierarchy by means of their roles.
Reference: [ Shieber, 1983 ] <author> S. Shieber. </author> <title> Direct parsing of id/lp grammars. </title> <journal> Linguistics and Philosophy, </journal> <volume> 7(2) </volume> <pages> 135-154, </pages> <year> 1983. </year>
Reference-contexts: Unfortunately, plans with greater temporal expressiveness present problems. Vi-lain suggests that parsing of partially-ordered plans can be handled in practice with a combination of indirect dominance (ID) rules and linear precedence (LP) rules as in Shieber's ID/LP parser <ref> [ Shieber, 1983 ] </ref> .
Reference: [ Shoham and McDermott, 1990 ] <author> Y. Shoham and D. McDermott. </author> <title> Temporal reasoning. </title> <booktitle> In Encyclopedia of Artificial Intelligence, 2nd. </booktitle> <publisher> ed., </publisher> <pages> pages 1334-1338. </pages> <publisher> John Wiley and Sons, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: The representation of temporal knowledge and concomitant reasoning plays an important part in many areas of artificial intelligence, including natural language processing, diagnosis, scheduling, planning, and plan recognition. A useful survey is <ref> [ Shoham and McDermott, 1990 ] </ref> . Here, we focus on constraint-based temporal 38 languages suitable for describing temporal patterns. Broadly speaking, temporal constraints can express qualitative relationships such as (either) before or after and metric relationships such as five hours before.
Reference: [ Shoham, 1987 ] <author> Y. Shoham. </author> <title> Temporal logics in ai: Semantical and ontological considerations. </title> <journal> Artificial Intelligence, </journal> <volume> 33(1) </volume> <pages> 89-104, </pages> <year> 1987. </year>
Reference-contexts: Schmiedel [ Schmiedel, 1990 ] , Bettini [ Bet-tini, 1994 ] , and Lambrix and Ronnquist [ Lambrix and Ronnquist, 1993 ] . 6.4.1 Schmiedel Schmiedel [ Schmiedel, 1990 ] has described an ambitious attempt to extend description logic to temporal concepts by integrating both Allen's temporal logic and Shoham's <ref> [ Shoham, 1987 ] </ref> .
Reference: [ Sidner, 1985 ] <author> C. L. Sidner. </author> <title> Plan parsing for intended response recognition in discourse. </title> <journal> Computational Intelligence, </journal> <volume> 1(1) </volume> <pages> 1-10, </pages> <month> Feb </month> <year> 1985. </year>
Reference-contexts: Of course, our approach, like that of Kautz, is NP-complete. Finally, Kautz does not explicitly distinguish between necessary and optional plans, nor does he provide support for acting on recognition results, as t-rex does with demons. 6.6.2 Vilain Following up on a proposal of earlier authors, e.g., <ref> [ Sidner, 1985 ] </ref> , Vilain carefully examined the idea that plan recognition has much in common with parsing 11 Monotonic update, in the current implementation. 235 of text [ Vilain, 1990 ] .
Reference: [ Song and Cohen, 1991 ] <author> F. Song and R. Cohen. </author> <title> Temporal reasoning during plan recognition. </title> <booktitle> In Proceedings of AAAI-91, </booktitle> <pages> pages 247-252, </pages> <address> Anaheim, CA, </address> <year> 1991. </year> <month> 268 </month>
Reference-contexts: Song and Cohen have shown how to do this for qualitative constraints <ref> [ Song, 1991; Song and Cohen, 1991 ] </ref> . Their algorithm is sound, but not complete. The incompleteness stems from their decision to avoid case reasoning with disjunctive temporal networks. t-rex uses Song and Cohen's algorithm as part of its plan completion process. <p> In an effort to identify tractable aspects of deductive plan recognition, Vilain later cast portions of Kautz's work in a parsing framework [ Vilain, 1990 ] . Song and Cohen studied the use of deductive plan recognition to extract temporal information from natural language discourse <ref> [ Song, 1991; Song and Cohen, 1991 ] </ref> . We will consider each of these efforts, in turn. 6.6.1 Kautz Kautz's landmark work produced a formal, deductive theory of plan recognition based on circumscription [ McCarthy, 1980 ] . <p> sharing and interleaving of steps." His first point is correct, but his second (speculative) point is contradicted by t-rex's approach to simultaneous plans, described in Section 5.11. 6.6.3 Song and Cohen Song and Cohen have considered how to extract the intended temporal relations among situations described in natural language discourse <ref> [ Song, 1991; Song and Cohen, 1991 ] </ref> . They called this the temporal analysis problem. Song and Cohen were motivated by the idea of a natural language interface to a plan recognition system. <p> Song and Cohen also presented an algorithm to infer strong qualitative temporal constraints between a plan and its substeps <ref> [ Song and Cohen, 1991 ] </ref> . Suppose 237 that a plan consists of two unconstrained substeps. Then, we can conclude that the relation of each substep to the plan itself is confined to fstarts, during, finishes, equalsg.
Reference: [ Song, 1991 ] <author> F. Song. </author> <title> A processing model for temporal analysis and its application to plan recognition. </title> <type> Technical Report CS-91-15, </type> <institution> Department of Computer Science, University of Waterloo, Waterloo, </institution> <address> Ontario, </address> <year> 1991. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: Song and Cohen have shown how to do this for qualitative constraints <ref> [ Song, 1991; Song and Cohen, 1991 ] </ref> . Their algorithm is sound, but not complete. The incompleteness stems from their decision to avoid case reasoning with disjunctive temporal networks. t-rex uses Song and Cohen's algorithm as part of its plan completion process. <p> In an effort to identify tractable aspects of deductive plan recognition, Vilain later cast portions of Kautz's work in a parsing framework [ Vilain, 1990 ] . Song and Cohen studied the use of deductive plan recognition to extract temporal information from natural language discourse <ref> [ Song, 1991; Song and Cohen, 1991 ] </ref> . We will consider each of these efforts, in turn. 6.6.1 Kautz Kautz's landmark work produced a formal, deductive theory of plan recognition based on circumscription [ McCarthy, 1980 ] . <p> sharing and interleaving of steps." His first point is correct, but his second (speculative) point is contradicted by t-rex's approach to simultaneous plans, described in Section 5.11. 6.6.3 Song and Cohen Song and Cohen have considered how to extract the intended temporal relations among situations described in natural language discourse <ref> [ Song, 1991; Song and Cohen, 1991 ] </ref> . They called this the temporal analysis problem. Song and Cohen were motivated by the idea of a natural language interface to a plan recognition system. <p> This body of work emphasizes plan inference using state information as well as action decomposition. It is more comprehensive, but less formal than our work or that of [ Kautz, 1991b ] , [ Vilain, 1990 ] , and <ref> [ Song, 1991 ] </ref> . <p> It is more comprehensive, but less formal than our work or that of [ Kautz, 1991b ] , [ Vilain, 1990 ] , and [ Song, 1991 ] . For reference, discussions of intention-based plan recognition are contained in <ref> [ Carberry, 1990; Kautz, 1991b; Song, 1991 ] </ref> . 241 Chapter 7 Conclusion This chapter recaps the major contributions of the thesis and surveys some possible directions for continuing the work in the future. 7.1 Contributions The main contributions of this thesis are as follows. 7.1.1 Predictive Recognition in Description Logic
Reference: [ Steele, 1990 ] <author> G. L. Jr. Steele. </author> <title> Common Lisp: The Language (Second Edition). </title> <publisher> Digital Press, </publisher> <address> Bedford, MA, </address> <year> 1990. </year>
Reference-contexts: Following that, a "for" loop indicates how one of the plan-related knobs is varied 141 during the experiment (the other six knobs are held constant). The syntax of the for loop is standard Common Lisp, as described in Section 26.6, Iteration Control, of <ref> [ Steele, 1990 ] </ref> . In the case of Figure 4.11, the experiment generator produced twenty plan sub-sumption problems for each setting of *SUBSUMER-NODE-COUNT*, i.e., twenty problems where the subsumer has 8 nodes, twenty problems where the subsumer has 16 nodes, and so on.
Reference: [ Swartout and Neches, 1986 ] <author> W. Swartout and R. Neches. </author> <title> The shifting terminological space: An impediment to evolvability. </title> <booktitle> In Proceedings of AAAI-86, </booktitle> <pages> pages 936-941, </pages> <address> Philadelphia, PA, </address> <year> 1986. </year> <journal> American Association of Artificial Intelligence. </journal>
Reference-contexts: Goal-subsumption: Here, plans are ordered by subsumption relations among their goal descriptions. Goal subsumption is appropriate for plan retrieval: to achieve certain conditions, one can seek to execute some plan whose goal is subsumed by those conditions. For example, in <ref> [ Swartout and Neches, 1986 ] </ref> , plans are classified and retrieved according to goals that are represented as standard description logic concepts. Applicability-subsumption: In this case, plan P1 subsumes plan P2 just in case P1 is applicable whenever P2 is.
Reference: [ Valdes-Perez, 1986 ] <author> R. E. Valdes-Perez. </author> <title> Spatio-temporal reasoning and linear inequalities. </title> <type> Technical Report AI Memo No. 875, </type> <institution> MIT/Artificial Intelligence Laboratory, </institution> <address> Cambridge, MA, </address> <year> 1986. </year>
Reference: [ van Beek and Cohen, 1991 ] <author> P. van Beek and R. Cohen. </author> <title> Resolving plan ambiguity for cooperative response generation. </title> <booktitle> In IJCAI 91, </booktitle> <pages> pages 938-944, </pages> <address> Sydney, Australia, </address> <year> 1991. </year>
Reference-contexts: This ambiguity might be resolved with goal-based reasoning, e.g., [ Litman and Allen, 1987 ] , probabilistic reasoning, e.g., [ Charniak and Goldman, 1993 ] , and/or selective querying of the user through clarification 256 dialogues, e.g., <ref> [ van Beek and Cohen, 1991 ] </ref> . In general, opportunities for collaboration between deductive and intentional plan recognition should be explored. * In cases where the assumption of a single plan proves unjustified, we seek improved ways to identify sets of plans that best account for the observations.
Reference: [ van Beek, 1989 ] <author> P. van Beek. </author> <title> Approximation algorithms for temporal reasoning. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1291-1296, </pages> <address> Detroit, </address> <year> 1989. </year>
Reference-contexts: The incompleteness of Allen's algorithm stems from the expressive power of the constraints. Specifically, his algorithm is only guaranteed to produce correct results with respect to subgraphs of three vertices or less <ref> [ van Beek, 1989 ] </ref> . This is called 3-consistency. Sound and complete closure is NP-hard [ Vilain and Kautz, 1986 ] . As a result, we are faced with three standard alternatives: 1. Restrict the expressiveness of the qualitative constraints so that exact solutions can be obtained tractably. <p> Allen postulates that his algorithm's inferences correspond to those that humans find natural [ Allen, 1983a ] . There is a family of variations on Allen's algorithm that produce successively better approximations, but at increasingly onerous cost <ref> [ van Beek, 1989 ] </ref> . In general, n-consistency can be computed in polynomial time for any specific value of n. 3. Use an exact, presumably exponential algorithm, and simply accept the amount of time it takes to finish.
Reference: [ Vilain and Kautz, 1986 ] <author> M. Vilain and H. Kautz. </author> <title> Constraint-propagation algorithms for temporal reasoning. </title> <booktitle> In Proceedings of AAAI-86, </booktitle> <pages> pages 377-382, </pages> <address> Philadelphia, PA, </address> <year> 1986. </year> <journal> American Association of Artificial Intelligence. </journal>
Reference-contexts: For example, the constraint before _ meets _ met-by _ after mandates temporal disjointness. 10 This condition, which is important for planning, cannot be represented using metric constraints limited to a set of simple linear inequalities <ref> [ Vilain and Kautz, 1986 ] </ref> . As more information becomes available, a qualitative constraint may be refined by eliminating disjuncts, e.g., before _ after may be refined to after. <p> The incompleteness of Allen's algorithm stems from the expressive power of the constraints. Specifically, his algorithm is only guaranteed to produce correct results with respect to subgraphs of three vertices or less [ van Beek, 1989 ] . This is called 3-consistency. Sound and complete closure is NP-hard <ref> [ Vilain and Kautz, 1986 ] </ref> . As a result, we are faced with three standard alternatives: 1. Restrict the expressiveness of the qualitative constraints so that exact solutions can be obtained tractably.
Reference: [ Vilain et al., 1989 ] <author> M. Vilain, H. Kautz, and P. van Beek. </author> <title> Constraint propagation algorithms for temporal reasoning: a revised report. </title> <editor> In J. deKleer and D. Weld, editors, </editor> <title> Readings in Qualitative Reasoning About Physical Systems. </title> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1989. </year>
Reference-contexts: Allen's algorithm is an in-stantiation of the path consistency algorithm for constraint satisfaction [ Montanari, 1974; Mackworth, 1977 ] . Allen's constraint propagation algorithm is sound, but unfortunately not complete <ref> [ Vilain et al., 1989 ] </ref> . This is important because in practice, we cannot always expect that all temporal relations will be made explicit in a system's input. <p> This is called 3-consistency. Sound and complete closure is NP-hard [ Vilain and Kautz, 1986 ] . As a result, we are faced with three standard alternatives: 1. Restrict the expressiveness of the qualitative constraints so that exact solutions can be obtained tractably. For example, <ref> [ Vilain et al., 1989 ] </ref> identified a subset of Allen's interval calculus derived from a point-based representation. Their subset admits complete polynomial-time constraint propagation. 2. Adopt an approximation algorithm such as Allen's, and live with the possible consequence that some relationships will remain undetected.
Reference: [ Vilain, 1990 ] <author> M. Vilain. </author> <title> Getting serious about parsing plans: a grammatical analysis of plan recognition. </title> <booktitle> In Proceedings of AAAI-90, </booktitle> <pages> pages 190-196, </pages> <address> Boston, MA, </address> <year> 1990. </year>
Reference-contexts: In an effort to identify tractable aspects of deductive plan recognition, Vilain later cast portions of Kautz's work in a parsing framework <ref> [ Vilain, 1990 ] </ref> . Song and Cohen studied the use of deductive plan recognition to extract temporal information from natural language discourse [ Song, 1991; Song and Cohen, 1991 ] . <p> for acting on recognition results, as t-rex does with demons. 6.6.2 Vilain Following up on a proposal of earlier authors, e.g., [ Sidner, 1985 ] , Vilain carefully examined the idea that plan recognition has much in common with parsing 11 Monotonic update, in the current implementation. 235 of text <ref> [ Vilain, 1990 ] </ref> . The analogy makes these correspondences: Plan Recognition Parsing plan library grammar plan description grammar rule observed steps lexical tokens Just as grammar rules are used to parse sentences, Vilain notes that plan descriptions might be use to "parse" strings of actions. <p> By drawing a formal correspondence between Kautz's framework and context free grammars, Vilain indeed found certain portions of Kautz's formalism that admit tractable parsing-based solutions <ref> [ Vilain, 1990 ] </ref> . Vilain summarized his central result on tractable parsing of plans as follows [ Vilain, 1990 ] : Proposition: There is a O (n 3 )-time plan recognition algorithm for hierarchies with ordered, unshared steps, and for disjunctive or abstract observations. <p> By drawing a formal correspondence between Kautz's framework and context free grammars, Vilain indeed found certain portions of Kautz's formalism that admit tractable parsing-based solutions <ref> [ Vilain, 1990 ] </ref> . Vilain summarized his central result on tractable parsing of plans as follows [ Vilain, 1990 ] : Proposition: There is a O (n 3 )-time plan recognition algorithm for hierarchies with ordered, unshared steps, and for disjunctive or abstract observations. Unfortunately, plans with greater temporal expressiveness present problems. <p> Vi-lain suggests that parsing of partially-ordered plans can be handled in practice with a combination of indirect dominance (ID) rules and linear precedence (LP) rules as in Shieber's ID/LP parser [ Shieber, 1983 ] . However, he was still led to the following conclusion <ref> [ Vilain, 1990 ] </ref> : Proposition: Recognizing plans with abstraction and partial step order is NP-complete, regardless of recognition tactic. 236 Vilain was not able to find a tractable parsing solution for plan parameters, for sharing steps between plans, or for interleaving steps of different plans. <p> This body of work emphasizes plan inference using state information as well as action decomposition. It is more comprehensive, but less formal than our work or that of [ Kautz, 1991b ] , <ref> [ Vilain, 1990 ] </ref> , and [ Song, 1991 ] .
Reference: [ von Luck et al., 1987 ] <author> K. von Luck, B. Nebel, C. Peltason, and A. Schmiedel. </author> <title> The anatomy of the back system. </title> <type> Technical Report KIT- Report 41, </type> <institution> Technische Universitat Berlin, </institution> <address> Berlin, </address> <year> 1987. </year>
Reference: [ Wahlster et al., 1993 ] <author> W. Wahlster, E. Andre, W. Finkler, H.-J. Profitlich, and T. Rist. </author> <title> Plan-based integration of natural language and graphics. </title> <journal> Artificial Intelligence, </journal> <volume> 63(1-2):387-428, </volume> <year> 1993. </year>
Reference: [ Weida and Litman, 1992 ] <author> R. Weida and D. Litman. </author> <title> Terminological reasoning with constraint networks and an application to plan recognition. </title> <booktitle> In Principles 269 of Knowledge Representation and Reasoning: Proceedings of the Third International Conference (KR'92), </booktitle> <pages> pages 282-293, </pages> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: Our approach unifies representation and reasoning work in plan recognition and description logic. This work is implemented in the t-rex system. We have presented examples from the domain of travel plans. Other domains can be addressed as well, including cooking plans (recipes) in <ref> [ Weida and Litman, 1992 ] </ref> and patterns of error conditions in Automated Teller (ATM) machines [ Weida and Litman, 1994 ] . <p> Each temporal variable may be related, directly or indirectly, to a distinguished variable, ], which represents the interval when the concept holds. Their view of when a complex action occurs differs from ours. Consider this simple cooking plan in t-rex <ref> [ Weida and Litman, 1992 ] </ref> : (defplan boil-spaghetti :steps ((s1 c-make-spaghetti) (s2 c-boil)) :qualitative-constraints ((s1 before s2))) In our view, this plan occurs over the interval from the start of step s1 through the end of step s2.
Reference: [ Weida and Litman, 1994 ] <author> R. Weida and D. Litman. </author> <title> Subsumption and recognition of heterogeneous constraint networks. </title> <booktitle> In The Tenth Conference on Artificial Intelligence for Applications, </booktitle> <pages> pages 381-388. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1994. </year>
Reference-contexts: This work is implemented in the t-rex system. We have presented examples from the domain of travel plans. Other domains can be addressed as well, including cooking plans (recipes) in [ Weida and Litman, 1992 ] and patterns of error conditions in Automated Teller (ATM) machines <ref> [ Weida and Litman, 1994 ] </ref> . There are many interesting and challenging directions along which this work can be further developed. 209 Chapter 6 Related Work This chapter places our work in the context of related research.
Reference: [ Weida, 1993 ] <author> R. A. Weida. </author> <title> Terminological constraint network reasoning and its application to plan recognition (ph.d. dissertation proposal). </title> <type> Technical Report CUCS-027-93, </type> <institution> Columbia University Department of Computer Science, </institution> <year> 1993. </year>
Reference-contexts: Then his system is justified in pruning the entire dominated plan class from the search space. Wellman's plans are unorganized collections of actions classified in a subsumption-based hierarchy. Although his plans are entirely atemporal, he acknowledges the need for an explicit representation of time. In <ref> [ Weida, 1993 ] </ref> , we proposed some preliminary ideas for integrating Wellman's idea of a dominance proving planner with an Allen-style temporal planner [ Allen, 1991 ] . 215 6.3.2 CLASP (Devanbu and Litman) clasp (CLAssification of Scenarios and Plans) 3 was designed to aid in retrieval of software for <p> To support even greater temporal expressiveness in plan-subsumption systems, we might extend t-rex's language in the direction of clasp's language [ Devanbu and Litman, 1991 ] . Some ideas for introducing limited forms of disjunction and looping in temporal constraint networks were described in <ref> [ Weida, 1993 ] </ref> . However, general disjunction and loop 254 ing do not seem to fit naturally within the constraint network paradigm. Conversely, we might extend clasp's language in the direction of t-rex's language.
Reference: [ Weida, 1995a ] <author> R. Weida. </author> <title> Closing the terminology. </title> <booktitle> In International Workshop on Description Logics, </booktitle> <address> Rome, Italy, </address> <year> 1995. </year>
Reference-contexts: For example, intel-cpu and risc-cpu concepts might well be defined in such a way 1 This work was introduced in <ref> [ Weida, 1995a ] </ref> , a preliminary version of [ Weida, 1996 ] . 2 The closed terminology assumption is defined more precisely in Section 3.4, after the requisite groundwork has been established. 46 that they are OTA-consistent, but not CTA-consistent in the context of a certain terminology.
Reference: [ Weida, 1995b ] <author> R. Weida. </author> <title> Knowledge representation for plan recognition. In The Next Generation of Plan Recognition Systems: </title> <booktitle> Challenges for and Insight from Related Areas of AI, </booktitle> <pages> pages 119-123, </pages> <address> Montreal, Canada, </address> <year> 1995. </year>
Reference-contexts: Chapter 4 developed a methodology for subsumption-based reasoning with constraint networks. This chapter explores a synthesis of the two methodologies, which yields a predictive recognition methodology for constraint network concepts <ref> [ Weida, 1995b ] </ref> . In Chapter 3, a closed terminology assumption during problem solving permitted us to track the consistency of concepts in a terminology with incrementally specified individuals.
Reference: [ Weida, 1996 ] <author> R. A. Weida. </author> <title> Closed terminologies in description logics. </title> <booktitle> In Proceedings of AAAI-96, </booktitle> <address> Portland, OR, </address> <year> 1996. </year> <journal> American Association of Artificial Intelligence. </journal>
Reference-contexts: For example, intel-cpu and risc-cpu concepts might well be defined in such a way 1 This work was introduced in [ Weida, 1995a ] , a preliminary version of <ref> [ Weida, 1996 ] </ref> . 2 The closed terminology assumption is defined more precisely in Section 3.4, after the requisite groundwork has been established. 46 that they are OTA-consistent, but not CTA-consistent in the context of a certain terminology.
Reference: [ Wellman, 1990 ] <author> M. P. Wellman. </author> <title> Formulation of Tradeoffs in Planning Under Uncertainty. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1990. </year>
Reference-contexts: Thus, plans can be automatically classified in 118 a strict taxonomy where each plan subsumes its descendants and is subsumed by its ancestors. In this respect, plan subsumption in t-rex resembles previous work on plan subsumption <ref> [ Devanbu and Litman, 1991; Wellman, 1990 ] </ref> , but provides a far richer temporal representation language and adds co-reference constraints. <p> : when an individual's description is updated non-monotonically, a data dependency network among individuals is used to reduce the number of dependent individuals which must be considered for reclassification. 6.3 Plans in Description Logic Prior work on implemented plan subsumption systems considered atemporal plans in the context of plan generation <ref> [ Wellman, 1990 ] </ref> , as well as plans restricted to describing temporal sequences for the purpose of information retrieval [ Devanbu and Litman, 1991 ] . There is also contemporaneous work on state-based reasoning with plans limited to simple sequences [ Heinsohn et al., 1992a ] . <p> There has also been significant work on action representation in description logic for the problem of understanding natural language instructions [ DiEugenio and Webber, 1992; Di Eugenio, 1994 ] . 6.3.1 SUDO-PLANNER Wellman studied the formulation of tradeoffs in the context of planning medical therapy under uncertainty <ref> [ Wellman, 1990 ] </ref> . He proposed an architecture for a constraint-posting planner named sudo-planner, which classifies a terminology of partial plan descriptions representing the explored portion of the search space. <p> Note that transitions are matched via subsumption and instantiation of action concepts. See [ Devanbu and Litman, 1991; Devanbu and Litman, 1996 ] for further details. Regular expression subsumption is P-SPACE hard <ref> [ Wellman, 1990 ] </ref> . <p> Abstraction subsumption is also used in clasp [ Devanbu and Litman, 1991 ] and sudo-planner <ref> [ Wellman, 1990 ] </ref> . Heinsohn, et al., note that abstraction-subsumption is appropriate for maintaining a database of plans at varying levels of abstraction and for conveying operating instructions for devices at varying levels of detail. Goal-subsumption: Here, plans are ordered by subsumption relations among their goal descriptions.
Reference: [ Woods and Schmolze, 1992 ] <author> W. A. Woods and J. G. Schmolze. </author> <title> The kl-one family. </title> <journal> Computers and Mathematics with Applications, </journal> <pages> 74(2-5), </pages> <year> 1992. </year>
Reference: [ Woods, 1986 ] <author> W. A. Woods. </author> <title> Important issues in knowledge representation. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 74(10) </volume> <pages> 1322-1334, </pages> <year> 1986. </year>
Reference: [ Woods, 1991 ] <author> W. A. Woods. </author> <title> Understanding subsumption and taxonomy: A framework for progress. </title> <editor> In J. Sowa, editor, </editor> <booktitle> Principles of Semantic Networks: Explorations in the Representation of Knowledge, </booktitle> <pages> pages 45-94. </pages> <publisher> Morgan Kauf-mann, </publisher> <address> Los Altos, CA, </address> <year> 1991. </year>
Reference-contexts: Equivalent concepts share the same location. In practice, classifiers install concepts in the explicit taxonomy one at a time, taking advantage of the relationships among all previously installed concepts. Classification algorithms naturally operate in two phases <ref> [ Woods, 1991 ] </ref> . The first, which Woods calls the MSS search, traverses downward from the root concept, thing, to find the most specific sub-sumers. The second, called the MGS search, proceeds from there to identify the most general subsumees.
Reference: [ Wright et al., 1993 ] <author> J. R. Wright, E. S. Weixelbaum, K. E. Brown, G. T. Veson-der, S. R. Palmer, J. I. Berman, and H. H. Moore. </author> <title> A knowledge-based con-figurator that supports sales, engineering, and manufacturing at at&t network systems. </title> <booktitle> In Proceedings of Fifth Innovative Applications of Artificial Intelligence Conference, </booktitle> <address> Washington, DC, </address> <year> 1993. </year>
Reference-contexts: well suited to configuration problems. meson was used to address configuration [ Owsnicki-Klewe, 1988 ] , beacon reached the advanced prototype stage at UNISYS 3 [ Freeman, 1986; Searls and Norton, 1990 ] , and classic is successfully deployed within a series of configura-tors for telephone switching devices at AT&T <ref> [ Wright et al., 1993 ] </ref> . At AT&T, configuration applications based on description logic have been used to process orders totalling more than two and a half billion dollars since 1990 [ McGuinness 3 Previously Burroughs. 47 and Resnick, 1995 ] . <p> We have argued earlier that description logic offers unique advantages for the representation of conceptual knowledge required by configuration systems. This section surveys other research that has pursued this idea, namely beacon [ Searls and Norton, 1990 ] , meson [ Owsnicki-Klewe, 1988 ] , and prose <ref> [ Wright et al., 1993 ] </ref> . 6.1.1 BEACON The beacon system developed at Burroughs 1 was an interactive, logic-based configurator implemented in Prolog. <p> This goal is more ambitious than ours or that of <ref> [ Wright et al., 1993 ] </ref> . However, [ Owsnicki-Klewe, 1988 ] did no closed terminology reasoning. Much of the reasoning in meson is done through forward-chaining rules, which we will discuss in the context of the prose system. 6.1.3 PROSE prose [ Wright et al., 1993 ] is a successfully <p> is more ambitious than ours or that of <ref> [ Wright et al., 1993 ] </ref> . However, [ Owsnicki-Klewe, 1988 ] did no closed terminology reasoning. Much of the reasoning in meson is done through forward-chaining rules, which we will discuss in the context of the prose system. 6.1.3 PROSE prose [ Wright et al., 1993 ] is a successfully deployed configurator featuring product knowledge bases written in classic [ Borgida et al., 1989 ] . Like prose, our work positions the description logic system as a product knowledge reasoner | a key module in a larger configurator architecture. <p> Offer the user and the configuration engine guidance by suitably restricting future choices. 4. Characterize the most general choices available for refining the description of a particular individual. 5. Formally decide when an individual's description may be considered finished. Little detail on the operation of prose is provided in <ref> [ Wright et al., 1993 ] </ref> , but the configuration process is driven by a search which "appears to be related to iterative deepening." Unlike our work, it seems that prose does not envision an interactive search for a configuration where the user participates in making choices along the way. <p> Importantly, classic has achieved great 1 Personal communication with Frank Oles and Bernhard Nebel, respectively. 250 success in the configuration arena without supporting either disjunction or negation <ref> [ Wright et al., 1993 ] </ref> . * The computational complexity of CTA-consistency inferences should be an alyzed. * Some consequences of the CTA become manifest as soon as the terminology is closed, independent of any problem solving context.
Reference: [ Yampratoom and Allen, 1993 ] <author> E. Yampratoom and L. Allen. </author> <title> Performance of temporal reasoning systems. </title> <type> Technical Report TRAINS Technical Note 93-1, </type> <institution> The University of Rochester, Computer Science Department, Rochester, </institution> <address> NY, </address> <month> March </month> <year> 1993. </year> <month> 270 </month>
Reference-contexts: Meiri has proposed an alternative model which integrates qualitative and metric constraints in a single constraint network [ Meiri, 1991 ] . Finally, a performance evaluation of several temporal reasoners is reported in <ref> [ Yampratoom and Allen, 1993 ] </ref> . 2.4 Synthesis This chapter began with a review of description logic. It then presented relevant aspects of two other threads of artificial intelligence research, closed world reasoning and temporal reasoning, which to date have been mostly unconnected with description logic.
Reference: [ Yen et al., 1991 ] <author> J. Yen, R. Neches, and R. MacGregor. Clasp: </author> <title> Integrating term subsumption systems and production systems. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 3(1) </volume> <pages> 25-31, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: REPEAT enables finite repetition of plan expressions. thereof. [ Devanbu and Litman, 1991 ] paraphrases the POTS plan as: "Informally, Pots-Plan describes a plan in which the caller picks up a phone, gets a dialtone, 3 Not to be confused with the homonymous clasp system of <ref> [ Yen et al., 1991 ] </ref> to be discussed in Section 6.5. 216 (DEFINE-CONCEPT Action (PRIMITIVE (AND Classic-Thing (AT-LEAST 1 ACTOR) (ALL ACTOR Agent) (ALL PRECONDITION State) (ALL ADD-LIST State) (ALL DELETE-LIST State) (ALL GOAL State)))) (DEFINE-CONCEPT System-Act (AND Action (ALL ACTOR System-Agent))) (DEFINE-CONCEPT Connect-Dialtone-Act (AND System-Action (EXACTLY 1 PRECONDITION) (ALL <p> Lambrix and Ronnquist give a formal semantics for t-lite, but do not address inferences such as subsumption. 6.5 Production Rules in Description Logics The clasp system of <ref> [ Yen et al., 1991 ] </ref> 9 reasons with production rules whose antecedents are expressed using loom [ MacGregor, 1991b ] . <p> This method compares favorably with ad-hoc specificity measures used in popular production systems such as OPS5 [ Brownston et al., 1985 ] . We observe that the constraint network subsumption task we face is rather like the one described in <ref> [ Yen et al., 1991 ] </ref> . Antecedents of clasp rules can be viewed as constraint networks, where the unary predicates are nodes and the binary predicates are arcs. <p> one described in <ref> [ Yen et al., 1991 ] </ref> . Antecedents of clasp rules can be viewed as constraint networks, where the unary predicates are nodes and the binary predicates are arcs. Our algorithm for QME constraint network subsump-tion is similar in some important respects to the existing algorithm of [ Yen et al., 1991 ] . 6.6 Deductive Plan Recognition This section recounts work in deductive plan recognition, an area of research originated by Kautz [ Kautz, 1991b ] .
Reference: [ Yen, 1990 ] <author> J. Yen. </author> <title> A principled approach to reasoning about the specificity of rules. </title> <booktitle> In Proceedings of AAAI-90, </booktitle> <pages> pages 701-707, </pages> <address> Boston, MA, </address> <year> 1990. </year> <journal> American Association of Artificial Intelligence. </journal> <volume> 271 </volume>
Reference-contexts: Minimizing redundant tests is a desirable goal. Comparing metric constraints, however, is quite inexpensive so it is unlikely that this strategy would be very worthwhile. The above algorithm puts all available information to effective use. It is similar to an existing algorithm for production rule subsumption due to Yen <ref> [ Yen, 1990 ] </ref> , whose work is reviewed in Section 6.5. Our optimism is reinforced by Yen's normal case analysis for subsumption of production rules composed of description logic concepts. That algorithm's complexity was found to be polynomial in "normal" cases [ Yen, 1990 ] . <p> algorithm for production rule subsumption due to Yen <ref> [ Yen, 1990 ] </ref> , whose work is reviewed in Section 6.5. Our optimism is reinforced by Yen's normal case analysis for subsumption of production rules composed of description logic concepts. That algorithm's complexity was found to be polynomial in "normal" cases [ Yen, 1990 ] . Empirical performance analysis of our algorithm is reported in Section 4.5.
References-found: 119

