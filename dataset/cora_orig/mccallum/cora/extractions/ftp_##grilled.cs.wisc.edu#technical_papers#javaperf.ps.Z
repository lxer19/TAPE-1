URL: ftp://grilled.cs.wisc.edu/technical_papers/javaperf.ps.Z
Refering-URL: http://www.cs.wisc.edu/~newhall/javaperfabstr.html
Root-URL: 
Title: Performance Measurement of Interpreted Programs  
Author: Tia Newhall and Barton P. Miller 
Address: Wisconsin, Madison, WI 53706-1685  
Affiliation: Computer Sciences Department, University of  
Abstract: In an interpreted execution there is an interdependence between the interpreter's execution and the interpreted application's execution; the implementation of the interpreter determines how the application is executed, and the application triggers certain activities in the interpreter. We present a representational model for describing performance data from an interpreted execution that explicitly represents the interaction between the interpreter and the application in terms of both the interpreter and application developer's view of the execution. We present results of a prototype implementation of a performance tool for interpreted Java programs that is based on our model. Our prototype uses two techniques, dynamic instrumentation and transformational instrumentation, to measure Java programs starting with unmodified Java .class files and an unmodified Java virtual machine. We use performance data from our tool to tune a Java program, and as a result, improve its performance by more than a factor of three. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <institution> Intuitive Systems. </institution> <note> Optimize It. http://www.optimizeit.com/. </note>
Reference-contexts: However, these are unable to present performance data in terms of the application program or in terms of the interaction between VM and AP. There are some performance tools that provide performance data in terms of AP's execution <ref> [1, 2] </ref>. These tools provide performance data in terms of Java application code. However, they do not represent performance data in terms of the Java VM's execution or in terms of the interaction between the VM and the Java application.
Reference: 2. <author> KL Group. JProbe. </author> <note> http://www.klg.com/jprobe/. </note>
Reference-contexts: However, these are unable to present performance data in terms of the application program or in terms of the interaction between VM and AP. There are some performance tools that provide performance data in terms of AP's execution <ref> [1, 2] </ref>. These tools provide performance data in terms of Java application code. However, they do not represent performance data in terms of the Java VM's execution or in terms of the interaction between the VM and the Java application.
Reference: 3. <author> A. Malony, B. Mohr, P. Beckman, D. Gannon, S. Yang, and F. Bodin. </author> <title> Performance Analysis of pC++: A Portable Data-Parallel Programming System for Scalable Parallel Computers. </title> <booktitle> Proceedings of the 8th International Parallel Processing Symposium (IPPS), Cancun, Mexico, </booktitle> <pages> pages 75-85, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: With this data, we were easily able to determine what changes to make to the Java application to improve its performance. 5 Related Work There are many general purpose program performance measurement tools <ref> [3, 5, 7, 4] </ref> that can be used to measure the performance of the virtual machine. However, these are unable to present performance data in terms of the application program or in terms of the interaction between VM and AP.
Reference: 4. <author> B. P. Miller, M. D. Callaghan, J. M. Cargille, J. K. Hollingsworth, R. B. Irvin, K. L. Karavanic, K. Kunchithapadam, and T. Newhall. </author> <title> The Paradyn Parallel Performance Measurement Tools. </title> <journal> IEEE Computer 28, </journal> <volume> 11, </volume> <month> November </month> <year> 1995. </year>
Reference-contexts: We present results from a prototype implementation of our model for measuring the performance of interpreted Java applications and applets. Our prototype tool uses Paradyn's dynamic instrumentation <ref> [4] </ref> to dynamically insert and remove instrumentation from the Java virtual machine and Java method byte-codes as the byte-code is interpreted by the Java virtual machine. Our tool requires no modifications to the Java virtual machine nor to the Java source nor class files prior to execution. <p> We parse the VM's internal form of the class to create application program code resources for the class. At this point, instrumentation requests can be made for the class by specifying metric-focus pairs containing the class's resources. We use dynamic instrumentation <ref> [4] </ref> to insert and delete instrumentation into Java method code and Java VM code at any point in the execution. <p> With this data, we were easily able to determine what changes to make to the Java application to improve its performance. 5 Related Work There are many general purpose program performance measurement tools <ref> [3, 5, 7, 4] </ref> that can be used to measure the performance of the virtual machine. However, these are unable to present performance data in terms of the application program or in terms of the interaction between VM and AP.
Reference: 5. <author> D. A. Reed, R. A. Aydt, R. J. Noe, P. C. Roth, K. A. Shields, B. W. Schwartz, and L. F. Tavera. </author> <title> Scalable Performance Analysis: The Pablo Performance Anlysis Environment. </title> <booktitle> Proceedings of the Scalable Parallel Libraries Conference, </booktitle> <pages> pages 104-113. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1993. </year>
Reference-contexts: With this data, we were easily able to determine what changes to make to the Java application to improve its performance. 5 Related Work There are many general purpose program performance measurement tools <ref> [3, 5, 7, 4] </ref> that can be used to measure the performance of the virtual machine. However, these are unable to present performance data in terms of the application program or in terms of the interaction between VM and AP.
Reference: 6. <author> Sun Microsystems Computer Corporation. </author> <title> The Java Virtual Machine Specification, </title> <month> August 21 </month> <year> 1995. </year>
Reference-contexts: measured in one form of an AP object to a logical view of the same object in any of its other forms. 3 Measuring Interpreted Java applications We present a tool for measuring the performance of interpreted Java applications and applets running on Sun's version 1.0.2 of the Java VM <ref> [6] </ref>. The tool is an implementation of our model for representing performance data from an interpreted execution. The Java VM is an abstract stack-based processor architecture. A Java program consists of a set of classes, each compiled into its own .class file.
Reference: 7. <author> J. C. Yan. </author> <title> Performance Tuning with AIMS An Automated Instrumentation and Monitoring System for Multicomputers. </title> <booktitle> 27th Hawaii International Conference on System Sciences, Wailea, Hawaii, </booktitle> <pages> pages 625-633, </pages> <month> January </month> <year> 1994. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: With this data, we were easily able to determine what changes to make to the Java application to improve its performance. 5 Related Work There are many general purpose program performance measurement tools <ref> [3, 5, 7, 4] </ref> that can be used to measure the performance of the virtual machine. However, these are unable to present performance data in terms of the application program or in terms of the interaction between VM and AP.
References-found: 7

