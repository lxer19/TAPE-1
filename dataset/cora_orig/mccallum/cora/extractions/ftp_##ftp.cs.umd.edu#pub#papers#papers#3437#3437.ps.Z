URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3437/3437.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: dybbuk@cs.umd.edu  
Title: A Manual for the CHAOS Runtime Library  
Author: Joel Saltz Ravi Ponnusamy Shamik D. Sharma Bongki Moon Yuan-Shin Hwang Mustafa Uysal Raja Das 
Note: The CHAOS project was sponsored in part by ARPA (NAG-1-1485), NSF (ASC 9213821) and ONR (SC292 1-22913).  
Address: College Park, MD 20742  
Affiliation: UMIACS and Dept. of Computer Science, University of Maryland,  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Das, Y.-S. Hwang, M. Uysal, J. Saltz, and A. Sussman. </author> <title> Applying the CHAOS/PARTI library to irregular problems in computational chemistry and computational aerodynamics. </title> <booktitle> In Proceedings of the Scalable Parallel Libraries Conference, </booktitle> <institution> Mississippi State University, </institution> <address> Starkville, MS, </address> <pages> pages 45-56. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1993. </year>
Reference: [2] <author> Raja Das, Joel Saltz, and Reinhard von Hanxleden. </author> <title> Slicing analysis and indirect access to distributed arrays. </title> <institution> Technical Report CS-TR-3076 and UMIACS-TR-93-42, University of Maryland, Department of Computer Science and UMIACS, </institution> <month> May </month> <year> 1993. </year> <note> Appears in LCPC '93. </note>
Reference-contexts: In the permutation list, the local indices are stored as offsets from the beginning of the ghostarea, instead of being stored as absolute local index values. For the example above, the communication schedule would look as follows: Schedule_P0 - Schedule_P1 - fetch_size : [ 0, 3 ] fetch_size : <ref> [ 2, 0 ] </ref> send_size : [ 0, 2 ] send_size : [ 3, 0 ] send_list : p0 -&gt; NULL send_list : p0 -&gt; 1, 2, 3 p1 -&gt; 1, 2 p1 -&gt; NULL perm_list : p0 -&gt; NULL perm_list : p0 -&gt; 1, 2 p1 -&gt; 1, 3, 2 <p> For the example above, the communication schedule would look as follows: Schedule_P0 - Schedule_P1 - fetch_size : [ 0, 3 ] fetch_size : [ 2, 0 ] send_size : <ref> [ 0, 2 ] </ref> send_size : [ 3, 0 ] send_list : p0 -&gt; NULL send_list : p0 -&gt; 1, 2, 3 p1 -&gt; 1, 2 p1 -&gt; NULL perm_list : p0 -&gt; NULL perm_list : p0 -&gt; 1, 2 p1 -&gt; 1, 3, 2 p1 -&gt; NULL - In the
Reference: [3] <author> Raja Das, Mustafa Uysal, Joel Saltz, and Yuan-Shin Hwang. </author> <title> Communication optimizations for irregular scientific computations on distributed memory architectures. </title> <institution> Technical Report CS-TR-3163 and UMIACS-TR-93-109, University of Maryland, Department of Computer Science and UMIACS, </institution> <month> October </month> <year> 1993. </year> <note> Submitted to Journal of Parallel and Distributed Computing. </note>
Reference-contexts: In the permutation list, the local indices are stored as offsets from the beginning of the ghostarea, instead of being stored as absolute local index values. For the example above, the communication schedule would look as follows: Schedule_P0 - Schedule_P1 - fetch_size : <ref> [ 0, 3 ] </ref> fetch_size : [ 2, 0 ] send_size : [ 0, 2 ] send_size : [ 3, 0 ] send_list : p0 -&gt; NULL send_list : p0 -&gt; 1, 2, 3 p1 -&gt; 1, 2 p1 -&gt; NULL perm_list : p0 -&gt; NULL perm_list : p0 -&gt; 1, <p> For the example above, the communication schedule would look as follows: Schedule_P0 - Schedule_P1 - fetch_size : [ 0, 3 ] fetch_size : [ 2, 0 ] send_size : [ 0, 2 ] send_size : <ref> [ 3, 0 ] </ref> send_list : p0 -&gt; NULL send_list : p0 -&gt; 1, 2, 3 p1 -&gt; 1, 2 p1 -&gt; NULL perm_list : p0 -&gt; NULL perm_list : p0 -&gt; 1, 2 p1 -&gt; 1, 3, 2 p1 -&gt; NULL - In the following sections, CHAOS primitives for performing
Reference: [4] <author> R. v. Hanxleden, K. Kennedy, C. Koelbel, R. Das, and J. Saltz. </author> <title> Compiler analysis for irregular problems in Fortran D. </title> <booktitle> In Proceedings of the 5th Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> New Haven, CT, </address> <month> August </month> <year> 1992. </year> <month> 63 </month>
Reference: [5] <author> Seema Hiranandani, Joel Saltz, Piyush Mehrotra, and Harry Berryman. </author> <title> Performance of hashed cache data migration schemes on multicomputers. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 12(4) </volume> <pages> 415-422, </pages> <month> August </month> <year> 1991. </year>
Reference: [6] <author> R. Mirchandaney, J. H. Saltz, R. M. Smith, D. M. Nicol, and Kay Crowley. </author> <title> Principles of runtime support for parallel processors. </title> <booktitle> In Proceedings of the 1988 ACM International Conference on Supercomputing, </booktitle> <pages> pages 140-152, </pages> <month> July </month> <year> 1988. </year>
Reference: [7] <author> R. Ponnusamy, R. Das, J. Saltz, J. Saltz, and D. Mavriplis. </author> <title> The dybbuk runtime system. </title> <booktitle> In IEEE COMPCON, </booktitle> <address> San Francisco, </address> <month> February </month> <year> 1993. </year>
Reference: [8] <author> Ravi Ponnusamy, Joel Saltz, and Alok Choudhary. </author> <title> Runtime-compilation techniques for data partitioning and communication schedule reuse. </title> <booktitle> In Proceedings Supercomputing '93, </booktitle> <pages> pages 361-370. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1993. </year> <note> Also available as University of Maryland Technical Report CS-TR-3055 and UMIACS-TR-93-32. </note>
Reference: [9] <author> Ravi Ponnusamy, Joel Saltz, Alok Choudhary, Yuan-Shin Hwang, and Geoffrey Fox. </author> <title> Run-time support and compilation methods for user-specified data distributions. </title> <institution> Technical Report CS-TR-3194 and UMIACS-TR-93-135, University of Maryland, Department of Computer Science and UMIACS, </institution> <month> November </month> <year> 1993. </year> <note> Submitted to IEEE Transactions on Parallel and Distributed Systems. </note>
Reference: [10] <author> J. Saltz, H. Berryman, and J. Wu. </author> <title> Runtime compilation for multiprocessors. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 3(6) </volume> <pages> 573-592, </pages> <year> 1991. </year>
Reference: [11] <author> Joel Saltz, Kathleen Crowley, Ravi Mirchandaney, and Harry Berryman. </author> <title> Run-time scheduling and execution of loops on message passing machines. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 8(4) </volume> <pages> 303-312, </pages> <month> April </month> <year> 1990. </year>
Reference: [12] <author> Joel H. Saltz, Ravi Mirchandaney, and Kay Crowley. </author> <title> Run-time parallelization and scheduling of loops. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(5) </volume> <pages> 603-612, </pages> <month> May </month> <year> 1991. </year>
Reference: [13] <author> Shamik D. Sharma, Ravi Ponnusamy, Bongki Moon, Yuan-Shin Hwang, Raja Das, and Joel Saltz. </author> <title> Run-time and compile-time support for adaptive irregular problems. </title> <note> Submitted to Supercomputing 1994, </note> <month> April </month> <year> 1994. </year>
Reference: [14] <author> A. Sussman, J. Saltz, R. Das, S. Gupta, D. Mavriplis, R. Ponnusamy, and K. Crow-ley. </author> <title> PARTI primitives for unstructured and block structured problems. </title> <booktitle> Computing Systems in Engineering, 3(1-4):73-86, 1992. Papers presented at the Symposium on High-Performance Computing for </booktitle>
Reference: [15] <author> J. Wu, J. Saltz, S. Hiranandani, and H. Berryman. </author> <title> Runtime compilation methods for mul-ticomputers. </title> <booktitle> In Proceedings of the 1991 International Conference on Parallel Processing, </booktitle> <volume> volume 2, </volume> <pages> pages 26-30, </pages> <year> 1991. </year> <month> 64 </month>
References-found: 15

