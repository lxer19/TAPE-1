URL: http://www.ai.sri.com/~wilkins/papers/cij-locations.ps
Refering-URL: http://www.ai.sri.com/~wilkins/bib.html
Root-URL: 
Email: myers@ai.sri.com wilkins@ai.sri.com  
Phone: 415-859-4833 415-859-2057  
Title: Reasoning about Locations in Theory and Practice  
Author: Karen L. Myers David E. Wilkins 
Date: February 7, 1997  
Address: 333 Ravenswood Ave. Menlo Park, CA 94025  
Affiliation: Artificial Intelligence Center SRI International  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. M. Agosta and D. E. Wilkins. </author> <title> Using SIPE-2 to plan emergency response to marine oil spills. </title> <journal> IEEE Expert, </journal> <volume> 11(6) </volume> <pages> 6-8, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Much progress has been made in recent years in the development of knowledge-based problem-solving systems that can solve tasks of practical interest. Planners, reactive controllers, and sched-ulers, for example, are being applied successfully to increasingly larger and more sophisticated problems <ref> [1, 11, 23, 34, 29] </ref>. The research contributions in these efforts have emphasized the technologies themselves; for example, developing generalized frameworks and more efficient problem-solving algorithms. In contrast, relatively little effort has been devoted to the development of well-grounded theories for the underlying domain knowledge required by such systems.
Reference: [2] <author> J. F. Allen. </author> <title> Towards a general theory of action and time. </title> <journal> Artificial Intelligence, </journal> <volume> 23, </volume> <year> 1984. </year> <month> 46 </month>
Reference-contexts: There has been success in defining representation theories with good computational properties for other domains of general interest. One example is the development of formalisms, semantics, and algorithms for taxonomic reasoning systems. A second example is the work on temporal reasoning, initally undertaken by Allen <ref> [2] </ref> but extensively developed by others in follow-on efforts. The work on specialist reasoners [27] has examined several domains, including time, colors, and taxonomies. Our work provides comparable theoretical and practical foundations for the task of reasoning about locations, with particular emphasis on applications to planning systems.
Reference: [3] <author> A. Barrett and D. Weld. </author> <title> Partial order planning: Evaluating possible efficiency gains. </title> <type> Technical Report 92-05-01, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <year> 1992. </year>
Reference-contexts: Advocates of the delayed commitment approach argue that unnecessary backtracking can be eliminated by postponing choices until as late as possible. In particular, Yang and Chan cite experimental results (based on an extension to the SNLP planner implemented by Barret and Weld <ref> [3] </ref>) showing that delayed commitment can improve planning performance substantially in certain cases [36].
Reference: [4] <author> S. Borgo, N. Guarino, and C. Masolo. </author> <title> A pointless theory of space based on strong connection and congruence. </title> <editor> In L. C. Aiello, J. Doyle, and S. C. Shapiro, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Fifth International Conference (KR '96). </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1996. </year>
Reference-contexts: In the knowledge representation community, locational reasoning is overshadowed by the more general topic of spatial reasoning (for an overview, consult [8]; more 1 recent work is described by <ref> [4, 26, 17] </ref>). Spatial theories differ from our locational theory in several regards. Theories for spatial reasoning focus on topics such as the articulation and axiomization of notions of shape, spatial occupancy, and qualitative spatial relationships (such as near and somewhere).
Reference: [5] <editor> A. Bundy. </editor> <booktitle> Annual Review of Science. </booktitle> <publisher> Academic Press, </publisher> <year> 1983. </year>
Reference-contexts: Functionality is used frequently in PRS applications. O-Plan2 [30] encodes functional predicates using an explicit functional syntax (for example, AT (Bill) = W hitehouse). The advantages of functional predicates for reasoning about mathematics in O-Plan2 have been described <ref> [5] </ref>. Universal variables Functional predicates are one use of the capabilities that universal variables provided in SIPE-2.
Reference: [6] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 333-378, </pages> <year> 1987. </year>
Reference-contexts: The computational problems of reasoning about locations are particularly severe in planning systems that generate partial-order plans (determining whether a given predicates holds in a world-state of a plan is NP-hard in the worst case <ref> [6] </ref>), yet such plans are often required for interesting problems. Furthermore, in least-commitment planners, a planning variable that represents a location may have a complex set of constraints that can make unifying location variables expensive.
Reference: [7] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 333-378, </pages> <year> 1987. </year>
Reference-contexts: As more complex domains are represented, it is critical to deduce effects that are conditional on the current situation. Most AI planners, including O-Plan2 [30], the SNLP-based planners [18] and TWEAK <ref> [7] </ref>, do not deduce context-dependent effects. SIPE-2, Pednault's ADL [24], and UCPOP [25] (which is based on ADL) are exceptions. <p> Functional predicates in other systems Our results show that functional predicates can make locational reasoning significantly more efficient in partial-order planners. Most formally defined AI planners, including SNLP [18] and TWEAK <ref> [7] </ref>, do not support functional predicates. (UCPOP [25] is an exception | its universally quantified effects can be used to represent functional predicates.) By contrast, problem-solving systems that were built for real-world problems often employ techniques for efficiently reasoning about functional predicates. <p> Conversely, uninstantiated variables increase the computational complexity of any reasoning system, as they introduce the costly problems of general-purpose unification and constraint satisfaction. Uninstantiated variables are particularly expensive for planning systems <ref> [7, 31] </ref>. In the military operations domain, the cost of uninstantiated variables is high: planning variables can have dozens of constraints and hundreds of possible instantiations, particularly for locations to which objects might be moving.
Reference: [8] <author> E. Davis. </author> <title> Representations of Commonsense Knowledge. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, Ca, </address> <year> 1990. </year>
Reference-contexts: There has been no previous work to date of which we are aware on locational theories of the sort described in this paper. In the knowledge representation community, locational reasoning is overshadowed by the more general topic of spatial reasoning (for an overview, consult <ref> [8] </ref>; more 1 recent work is described by [4, 26, 17]). Spatial theories differ from our locational theory in several regards. Theories for spatial reasoning focus on topics such as the articulation and axiomization of notions of shape, spatial occupancy, and qualitative spatial relationships (such as near and somewhere).
Reference: [9] <author> E. Davis. </author> <title> The kinematics of cutting solid objects. </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <volume> 9 </volume> <pages> 253-305, </pages> <year> 1993. </year>
Reference-contexts: Armies with their independent units provides one example; cargo that must be partitioned into independently moved shipments is a second example. We note that in contrast to other models of splitting objects <ref> [9] </ref>, an aggregate in our theory continues to exist when its subparts are not co-located; only the location of the aggregate object ceases to be defined. The co-location requirement is not universal.
Reference: [10] <author> J. J. </author> <title> Finger. Exploiting Constraints in Design Synthesis. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1987. </year>
Reference-contexts: In this section, we extend the theories to include the effects of movement. 3.1 Assumptions As has been well-documented in the literature, formalizing action is a challenging endeavor. Complexity arises in the form of the frame [20], ramification <ref> [10, 13] </ref>, and qualification [19] problems. We employ several assumptions in this paper for simplifying the task of reasoning about move actions. First, we assume that move actions always succeed when their preconditions are satisfied.
Reference: [11] <author> T. Garvey and K. Myers. </author> <title> The intelligent information manager. Final Report SRI Project 8005, </title> <booktitle> Artificial Intelligence Center, SRI International, </booktitle> <address> Menlo Park, CA, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction Much progress has been made in recent years in the development of knowledge-based problem-solving systems that can solve tasks of practical interest. Planners, reactive controllers, and sched-ulers, for example, are being applied successfully to increasingly larger and more sophisticated problems <ref> [1, 11, 23, 34, 29] </ref>. The research contributions in these efforts have emphasized the technologies themselves; for example, developing generalized frameworks and more efficient problem-solving algorithms. In contrast, relatively little effort has been devoted to the development of well-grounded theories for the underlying domain knowledge required by such systems.
Reference: [12] <author> M. P. Georgeff and F. F. Ingrand. </author> <title> Decision-making in an embedded reasoning system. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <address> Detroit, MI, </address> <year> 1989. </year>
Reference-contexts: For instance, the rules can be used by a reactive execution system that operates in dynamic environments to maintain a database of facts that model the current state of the world. Once such system is the Procedural Reasoning System (PRS) <ref> [12] </ref>. 4 The belief revision rules defined above are directly translatable to PRS knowledge areas (called KAs), which correspond to operator representations in traditional planning systems.
Reference: [13] <author> M. L. Ginsberg and D. E. Smith. </author> <title> Reasoning about action I: A possible worlds approach. </title> <journal> Artificial Intelligence, </journal> <volume> 35, </volume> <year> 1988. </year>
Reference-contexts: In this section, we extend the theories to include the effects of movement. 3.1 Assumptions As has been well-documented in the literature, formalizing action is a challenging endeavor. Complexity arises in the form of the frame [20], ramification <ref> [10, 13] </ref>, and qualification [19] problems. We employ several assumptions in this paper for simplifying the task of reasoning about move actions. First, we assume that move actions always succeed when their preconditions are satisfied.
Reference: [14] <author> M. L. Ginsberg and D. E. Smith. </author> <title> Reasoning about action II: the qualification problem. </title> <journal> Arti ficial Intelligence, </journal> <volume> 35, </volume> <year> 1988. </year>
Reference-contexts: First, we assume that move actions always succeed when their preconditions are satisfied. This assumption enables us to focus on the issues of maintaining locational information rather than the many subtle problems that relate to execution failure <ref> [14] </ref>. Second, we assume a single, discrete move action at each time step. We note, however, that it is straightforward to generalize our formalism to support parallel move actions provided that the parallel actions are non-interfering; however, we refrain from doing so in order to keep the presentation simple.
Reference: [15] <author> P. J. Hayes. </author> <title> Naive physics I: Ontology for liquids. </title> <booktitle> In Formal Theories of the Commonsense World, </booktitle> <pages> pages 71-107. </pages> <publisher> Ablex Publishing Corp., </publisher> <address> Norwood, New Jersey, </address> <year> 1985. </year>
Reference-contexts: Our approach deviates from much of the work on commonsense theories in two ways. First, we make no attempt to provide a universal theory that covers all eventualities (as, for example, was the motivation for Hayes' work on liquids <ref> [15] </ref>). Instead, we define a practical theory focused on those aspects of locational reasoning that are necessary and sufficient for a broad class of meaningful applications.
Reference: [16] <author> R. E. Korf. </author> <title> Planning as search: A quantitative approach. </title> <journal> Artificial Intelligence, </journal> <volume> 33(1), </volume> <year> 1987. </year> <month> 47 </month>
Reference-contexts: levels of abstraction have been shown to be valuable in terms of more efficient planning: for example, when planning a trip from Palo Alto to Boston, the search can be greatly constrained by first deciding how to get from California to Massachusetts rather than immediately starting to plan low-level details <ref> [16] </ref>. The following statements characterize a revision of the basic theory of locations to include place abstractions. The first two statements are generalizations of the defining principles from the basic theory.
Reference: [17] <author> O. Lemon. </author> <title> Semantical foundations of spatial logics. </title> <editor> In L. C. Aiello, J. Doyle, and S. C. Shapiro, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Fifth International Conference (KR '96). </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1996. </year>
Reference-contexts: In the knowledge representation community, locational reasoning is overshadowed by the more general topic of spatial reasoning (for an overview, consult [8]; more 1 recent work is described by <ref> [4, 26, 17] </ref>). Spatial theories differ from our locational theory in several regards. Theories for spatial reasoning focus on topics such as the articulation and axiomization of notions of shape, spatial occupancy, and qualitative spatial relationships (such as near and somewhere).
Reference: [18] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proceedings of the 1991 National Conference on Artificial Intelligence, </booktitle> <pages> pages 634-639, </pages> <booktitle> American Association for Artificial Intelligence, </booktitle> <address> Menlo Park, CA, </address> <year> 1991. </year>
Reference-contexts: As more complex domains are represented, it is critical to deduce effects that are conditional on the current situation. Most AI planners, including O-Plan2 [30], the SNLP-based planners <ref> [18] </ref> and TWEAK [7], do not deduce context-dependent effects. SIPE-2, Pednault's ADL [24], and UCPOP [25] (which is based on ADL) are exceptions. <p> Functional predicates in other systems Our results show that functional predicates can make locational reasoning significantly more efficient in partial-order planners. Most formally defined AI planners, including SNLP <ref> [18] </ref> and TWEAK [7], do not support functional predicates. (UCPOP [25] is an exception | its universally quantified effects can be used to represent functional predicates.) By contrast, problem-solving systems that were built for real-world problems often employ techniques for efficiently reasoning about functional predicates.
Reference: [19] <author> J. McCarthy. </author> <booktitle> Epistemological problems of artificial intelligence. In Proceedings of the Fifth International Joint Conference on Artificial Intelligence, </booktitle> <address> Cambridge, MA, </address> <year> 1977. </year>
Reference-contexts: In this section, we extend the theories to include the effects of movement. 3.1 Assumptions As has been well-documented in the literature, formalizing action is a challenging endeavor. Complexity arises in the form of the frame [20], ramification [10, 13], and qualification <ref> [19] </ref> problems. We employ several assumptions in this paper for simplifying the task of reasoning about move actions. First, we assume that move actions always succeed when their preconditions are satisfied.
Reference: [20] <author> J. McCarthy and P. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence 4, </booktitle> <year> 1969. </year>
Reference-contexts: In this section, we extend the theories to include the effects of movement. 3.1 Assumptions As has been well-documented in the literature, formalizing action is a challenging endeavor. Complexity arises in the form of the frame <ref> [20] </ref>, ramification [10, 13], and qualification [19] problems. We employ several assumptions in this paper for simplifying the task of reasoning about move actions. First, we assume that move actions always succeed when their preconditions are satisfied. <p> Unmoved objects remain undisturbed. Our formalization of these principles makes use of the situation calculus <ref> [20] </ref> for the first-order language L M . This language generalizes L from the previous section in that it employs situation variables s; s 1 ; s 2 ; : : : and replaces the predicate AT (x; l) by a fluent of the form AT (x; l; s).
Reference: [21] <author> K. L. Myers. </author> <title> User's Guide for the Procedural Reasoning System. </title> <booktitle> Artificial Intelligence Center, SRI International, </booktitle> <address> Menlo Park, CA, </address> <year> 1993. </year>
Reference-contexts: PRS <ref> [21] </ref>, a reactive control system, allows predicates to be declared functional in certain arguments with the deductive subsystem of PRS enforcing the constraint implicitly. Functionality is used frequently in PRS applications. O-Plan2 [30] encodes functional predicates using an explicit functional syntax (for example, AT (Bill) = W hitehouse).
Reference: [22] <author> K. L. Myers. </author> <title> Hybrid reasoning using universal attachment. </title> <journal> Artificial Intelligence, </journal> <volume> 67 </volume> <pages> 329-375, </pages> <year> 1994. </year>
Reference-contexts: One key reason for doing so is to enable modeling of complex interactions between locational and non-locational predicates, which would be difficult to support with a distinct module for locational reasoning <ref> [22] </ref>. The location of an object at a given state in an evolving plan can be impacted by various operations of the planner. One such operation is the insertion of a new goal or action into a plan.
Reference: [23] <author> K. L. Myers. </author> <title> A procedural knowledge approach to task-level control. </title> <booktitle> In Proceedings of the Third International Conference on AI Planning Systems. </booktitle> <publisher> AAAI Press, </publisher> <year> 1996. </year>
Reference-contexts: 1 Introduction Much progress has been made in recent years in the development of knowledge-based problem-solving systems that can solve tasks of practical interest. Planners, reactive controllers, and sched-ulers, for example, are being applied successfully to increasingly larger and more sophisticated problems <ref> [1, 11, 23, 34, 29] </ref>. The research contributions in these efforts have emphasized the technologies themselves; for example, developing generalized frameworks and more efficient problem-solving algorithms. In contrast, relatively little effort has been devoted to the development of well-grounded theories for the underlying domain knowledge required by such systems.
Reference: [24] <author> E. P. D. Pednault. </author> <title> Synthesizing plans that contain actions with context-dependent effects. </title> <journal> Computational Intelligence, </journal> <volume> 4(4) </volume> <pages> 356-372, </pages> <year> 1988. </year>
Reference-contexts: As more complex domains are represented, it is critical to deduce effects that are conditional on the current situation. Most AI planners, including O-Plan2 [30], the SNLP-based planners [18] and TWEAK [7], do not deduce context-dependent effects. SIPE-2, Pednault's ADL <ref> [24] </ref>, and UCPOP [25] (which is based on ADL) are exceptions. Pednault provides a good description of the complexity of deducing situation-dependent effects in a partial-order planning system [24], and concludes by stating, "Further research is needed to determine the restrictions necessary to produce reasonable levels of performance for applications of <p> Most AI planners, including O-Plan2 [30], the SNLP-based planners [18] and TWEAK [7], do not deduce context-dependent effects. SIPE-2, Pednault's ADL <ref> [24] </ref>, and UCPOP [25] (which is based on ADL) are exceptions. Pednault provides a good description of the complexity of deducing situation-dependent effects in a partial-order planning system [24], and concludes by stating, "Further research is needed to determine the restrictions necessary to produce reasonable levels of performance for applications of interest." Here, we present techniques that produce reasonable levels of performance for applications that involve locational reasoning. 6.3.3 Translating BR-Rules into SIPE-2 Deductive Rules The belief revision rules
Reference: [25] <author> J. S. Penberthy and D. Weld. </author> <title> A sound, complete, partial order planner for ADL. </title> <editor> In B. Nebel, C. Rich, and W. Swartout, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Third International Conference (KR92). </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: As more complex domains are represented, it is critical to deduce effects that are conditional on the current situation. Most AI planners, including O-Plan2 [30], the SNLP-based planners [18] and TWEAK [7], do not deduce context-dependent effects. SIPE-2, Pednault's ADL [24], and UCPOP <ref> [25] </ref> (which is based on ADL) are exceptions. <p> Functional predicates in other systems Our results show that functional predicates can make locational reasoning significantly more efficient in partial-order planners. Most formally defined AI planners, including SNLP [18] and TWEAK [7], do not support functional predicates. (UCPOP <ref> [25] </ref> is an exception | its universally quantified effects can be used to represent functional predicates.) By contrast, problem-solving systems that were built for real-world problems often employ techniques for efficiently reasoning about functional predicates.
Reference: [26] <author> D. A. Randell and A. G. Cohn. </author> <title> A spatial logic based on regions and connections. </title> <editor> In B. Nebel, C. Rich, and W. Swartout, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Third International Conference (KR92). </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: In the knowledge representation community, locational reasoning is overshadowed by the more general topic of spatial reasoning (for an overview, consult [8]; more 1 recent work is described by <ref> [4, 26, 17] </ref>). Spatial theories differ from our locational theory in several regards. Theories for spatial reasoning focus on topics such as the articulation and axiomization of notions of shape, spatial occupancy, and qualitative spatial relationships (such as near and somewhere).
Reference: [27] <author> L. Schubert, M. Papalaskaris, and J. Taugher. </author> <title> Accelerating deductive inference: Special meth ods for taxonomies, colours and times. </title> <editor> In N. Cercone and G. McCalla, editors, </editor> <booktitle> The Knowledge Frontier: Essays in the Representation of Knowledge. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: One example is the development of formalisms, semantics, and algorithms for taxonomic reasoning systems. A second example is the work on temporal reasoning, initally undertaken by Allen [2] but extensively developed by others in follow-on efforts. The work on specialist reasoners <ref> [27] </ref> has examined several domains, including time, colors, and taxonomies. Our work provides comparable theoretical and practical foundations for the task of reasoning about locations, with particular emphasis on applications to planning systems.
Reference: [28] <author> M. Shanahan. </author> <title> Default reasoning about spatial occupancy. </title> <journal> Artificial Intelligence, </journal> <volume> 74(1):147 164, </volume> <year> 1995. </year>
Reference-contexts: Most spatial theories lack notions inherent to our theory of locations, such as partitioning of objects and abstraction hierarchies for locations. There have been few efforts to incorporate reasoning about movement in spatial settings, as noted by <ref> [28] </ref>, whereas movement is integral to our theory. Finally, work on spatial reasoning has for the most part ignored computational issues; thus, while many of the spatial theories are expressively powerful, they are not amenable to efficient reasoning.
Reference: [29] <author> S. F. Smith, O. Lassila, and M. Becker. </author> <title> Configurable, mixed-initiative systems for planning and scheduling. </title> <editor> In A. Tate, editor, </editor> <title> Advanced Planning Technology. </title> <publisher> AAAI Press, </publisher> <address> Menlo Park, CA, </address> <year> 1996. </year>
Reference-contexts: 1 Introduction Much progress has been made in recent years in the development of knowledge-based problem-solving systems that can solve tasks of practical interest. Planners, reactive controllers, and sched-ulers, for example, are being applied successfully to increasingly larger and more sophisticated problems <ref> [1, 11, 23, 34, 29] </ref>. The research contributions in these efforts have emphasized the technologies themselves; for example, developing generalized frameworks and more efficient problem-solving algorithms. In contrast, relatively little effort has been devoted to the development of well-grounded theories for the underlying domain knowledge required by such systems.
Reference: [30] <author> A. Tate, B. Drabble, and R. Kirby. O-Plan2: </author> <title> An open architecture for command, planning and control. </title> <editor> In M. Fox and M. Zweben, editors, </editor> <title> Knowledge Based Scheduling. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: Without deduced effects, N + 1 move operators would be needed: one for moving with no objects, one for moving with one object, etc. As more complex domains are represented, it is critical to deduce effects that are conditional on the current situation. Most AI planners, including O-Plan2 <ref> [30] </ref>, the SNLP-based planners [18] and TWEAK [7], do not deduce context-dependent effects. SIPE-2, Pednault's ADL [24], and UCPOP [25] (which is based on ADL) are exceptions. <p> PRS [21], a reactive control system, allows predicates to be declared functional in certain arguments with the deductive subsystem of PRS enforcing the constraint implicitly. Functionality is used frequently in PRS applications. O-Plan2 <ref> [30] </ref> encodes functional predicates using an explicit functional syntax (for example, AT (Bill) = W hitehouse). The advantages of functional predicates for reasoning about mathematics in O-Plan2 have been described [5]. Universal variables Functional predicates are one use of the capabilities that universal variables provided in SIPE-2.
Reference: [31] <author> D. E. Wilkins. </author> <title> Practical Planning: Extending the Classical AI Planning Paradigm. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference-contexts: The emphasis is on planning systems, although many of the ideas apply more generally to other problem-solving frameworks. For the sake of concreteness, we describe these techniques in the context of a specific planning framework, namely SIPE-2 (System for Interactive Planning and Execution) <ref> [31, 32, 33] </ref>. 1 Experimental results are provided that show how the proposed operationalization improves efficiency substantially over a direct translation of the belief revision rules. <p> The experimental results are based on problems from two domains that make extensive use of locational reasoning, namely planning of military operations [34], and planning the actions of a mobile robot <ref> [31] </ref>. 1 SIPE-2 is a trademark of SRI International. 2 2 Theories of Location The formal theories of location are defined using a first-order language L. <p> Furthermore, there may be additional key-specific deductions that should now be triggered. 6.2 Experimentation Domains We have evaluated our techniques for implementing locational reasoning by generating plans for two domains: mobile robot navigation <ref> [31] </ref> and military operations [34]. This section summarizes the characteristics of these domains that are relevant to the experimental evaluation. A listing of the problems is provided in Table 1, which is further explained below. <p> Without functional predicates, deducing that a moved object is no longer at its previous location can be problematic when different parts of the plan are at different levels of planning abstraction <ref> [31, Chapter 4] </ref>. There are various ways to work around such problems, generally involving modifications to operators to perform book-keeping for coordinating planning abstraction levels. In contrast, the problem never arises with functional predicates since they determine an object's location independent of earlier actions in the plan. <p> Conversely, uninstantiated variables increase the computational complexity of any reasoning system, as they introduce the costly problems of general-purpose unification and constraint satisfaction. Uninstantiated variables are particularly expensive for planning systems <ref> [7, 31] </ref>. In the military operations domain, the cost of uninstantiated variables is high: planning variables can have dozens of constraints and hundreds of possible instantiations, particularly for locations to which objects might be moving.
Reference: [32] <author> D. E. Wilkins. </author> <title> Can AI planners solve practical problems? Computational Intelligence, </title> <booktitle> 6(4) </booktitle> <pages> 232-246, </pages> <year> 1990. </year>
Reference-contexts: The emphasis is on planning systems, although many of the ideas apply more generally to other problem-solving frameworks. For the sake of concreteness, we describe these techniques in the context of a specific planning framework, namely SIPE-2 (System for Interactive Planning and Execution) <ref> [31, 32, 33] </ref>. 1 Experimental results are provided that show how the proposed operationalization improves efficiency substantially over a direct translation of the belief revision rules.
Reference: [33] <author> D. E. Wilkins. </author> <title> Using the SIPE-2 Planning System: A Manual for Version 4.3. </title> <booktitle> Artificial Intelligence Center, </booktitle> <address> Menlo Park, CA, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: The emphasis is on planning systems, although many of the ideas apply more generally to other problem-solving frameworks. For the sake of concreteness, we describe these techniques in the context of a specific planning framework, namely SIPE-2 (System for Interactive Planning and Execution) <ref> [31, 32, 33] </ref>. 1 Experimental results are provided that show how the proposed operationalization improves efficiency substantially over a direct translation of the belief revision rules.
Reference: [34] <author> D. E. Wilkins and R. V. Desimone. </author> <title> Applying an AI planner to military operations planning. </title> <editor> In M. Fox and M. Zweben, editors, </editor> <title> Intelligent Scheduling. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Much progress has been made in recent years in the development of knowledge-based problem-solving systems that can solve tasks of practical interest. Planners, reactive controllers, and sched-ulers, for example, are being applied successfully to increasingly larger and more sophisticated problems <ref> [1, 11, 23, 34, 29] </ref>. The research contributions in these efforts have emphasized the technologies themselves; for example, developing generalized frameworks and more efficient problem-solving algorithms. In contrast, relatively little effort has been devoted to the development of well-grounded theories for the underlying domain knowledge required by such systems. <p> The experimental results are based on problems from two domains that make extensive use of locational reasoning, namely planning of military operations <ref> [34] </ref>, and planning the actions of a mobile robot [31]. 1 SIPE-2 is a trademark of SRI International. 2 2 Theories of Location The formal theories of location are defined using a first-order language L. <p> Furthermore, there may be additional key-specific deductions that should now be triggered. 6.2 Experimentation Domains We have evaluated our techniques for implementing locational reasoning by generating plans for two domains: mobile robot navigation [31] and military operations <ref> [34] </ref>. This section summarizes the characteristics of these domains that are relevant to the experimental evaluation. A listing of the problems is provided in Table 1, which is further explained below.
Reference: [35] <author> L. Wos, R. Overbeek, E. Lusk, and J. Boyle. </author> <title> Automated Reasoning: Introduction and Appli cations. </title> <publisher> Prentice-Hall, </publisher> <year> 1984. </year>
Reference-contexts: 2 ; : : : while object variables are represented using x; y; z; x 1 ; y 1 ; z 1 ; : : : We further assume the use of a predicate = (written using infix notation for the sake of clarity) with the standard interpretation for equality <ref> [35] </ref>. Other predicates will be introduced as required.
Reference: [36] <author> Q. Yang and A. Y. M. Chan. </author> <title> Delaying variable binding commitments in planning. </title> <booktitle> In Proceed ings of the Second International Conference on AI Planning Systems, </booktitle> <pages> pages 182-187, </pages> <year> 1994. </year> <month> 49 </month>
Reference-contexts: In particular, Yang and Chan cite experimental results (based on an extension to the SNLP planner implemented by Barret and Weld [3]) showing that delayed commitment can improve planning performance substantially in certain cases <ref> [36] </ref>. A key issue for determining whether to use eager or delayed variable binding is the density of the solution space: the military problems used for the experiments reported here have dense solution spaces (although the choice of instantiations can affect solution quality). <p> In addition, the computation of bounds on temporal durations of troop movements required for the military problem has a relatively high cost. In contrast, many of the test cases in <ref> [36] </ref> have few solutions. 33 It remains an open question to determine where on the spectrum most real-world problems lie, although in our experiences high-density solution spaces are more common. 6.4.3 Lesson 3: Reasoning Efficiently with Aggregates The belief revision rules for aggregates provide the means to maintain explicit location information
References-found: 36

