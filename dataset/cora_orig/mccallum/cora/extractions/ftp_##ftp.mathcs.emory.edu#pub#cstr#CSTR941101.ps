URL: ftp://ftp.mathcs.emory.edu/pub/cstr/CSTR941101.ps
Refering-URL: http://www.mathcs.emory.edu/pious.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: moyer@mathcs.emory.edu  vss@mathcs.emory.edu  
Title: Parallel I/O as a Parallel Application  
Author: Steven A. Moyer and V. S. Sunderam 
Date: November 1994 (Revised December 1994)  
Address: Atlanta, GA 30322, USA  
Affiliation: Department of Math and Computer Science Emory University,  
Pubnum: Computer Science Technical Report CSTR-941101  
Abstract: fl Research supported by the National Science Foundation, under award CCR-9118787, the U. S. Department of Energy, under grant DE-FG05-91ER25105, and the Office of Naval Research, under grant N00014-93-1-0278. y Revised version of this paper to appear in the International Journal of Supercomputer Applications, 9(2), 1995. 
Abstract-found: 1
Intro-found: 1
Reference: [BHG87] <author> Philip Bernstein, Vassos Hadzilacos, and Nathan Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1987. </year>
Reference-contexts: Furthermore, the architecture is relatively free of assumptions concerning the underlying transport and storage subsystems. 4 Transactions in PIOUS Perhaps the most unique feature of the PIOUS architecture is the use of transaction-based protocols for data access. Parallel I/O operations in PIOUS are performed within the context of transactions <ref> [BHG87] </ref>, transparently to the user, to provide sequential consistency [Lam79] of access and tolerance of system failures. Referring to Figure 1, client library routines act as transaction managers for the data servers participating in a distributed transaction satisfying a user request. <p> Applications requiring fault tolerance can access files in the lower-performance, but guaranteed consistent, stable mode. The current PIOUS implementation does not provide applications with fault tolerance of media failures. Media fault tolerance is achieved by data replication on independent devices, either as multiple file copies <ref> [BHG87] </ref> or as computed parity information [PGK88]. Such techniques are independent of the file system architecture, provided that multiple independent storage devices can be accessed. 5.4 User Transaction Facilities PIOUS files are normally accessed via traditional read and write functions that are guaranteed to be sequentially consistent.
Reference: [BL92] <author> Ralph Butler and Ewing Lusk. </author> <title> User's guide to the p4 programming system. </title> <type> Technical Report ANL-92/17, </type> <institution> Mathematics and Computer Science Division, Ar-gonne National Laboratory, Argonne, IL, </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: By leveraging existing resources, metacomputing environments offer a cost-effective alternative to parallel machines for many classes of parallel applications [CR92]. Common metacomputing environments such as PVM [Sun90] and p4 <ref> [BL92] </ref>, among others [Tur93], provide application programming interfaces with much of the same functionality as those provided for parallel machines, including mechanisms for interprocess communication, synchronization and concurrency control, fault tolerance, and dynamic process management.
Reference: [CFPB93] <author> Peter F. Corbett, Dror G. Feitelson, Jean-Pierre Prost, and Sandra J. Baylor. </author> <title> Parallel access to files in the Vesta file system. </title> <booktitle> In Proceedings of Supercomputing '93, </booktitle> <pages> pages 472-481, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Parallel machines commonly provide a parallel file system interface; familiar examples include the Intel CFS [Pie89] and nCUBE Parallel I/O System [DdR92]. Such systems provide parallel applications with varying degrees of file access coordination and control and often employ data declustering to increase aggregate performance. The IBM Vesta <ref> [CFPB93] </ref> mul-ticomputer file system implements two-dimensional files and a unique stencil-based logical partitioning operator to coordinate parallel file access.
Reference: [CL91] <author> Luis-Felipe Cabrera and Darrell D. E. Long. Swift: </author> <title> Using distributed disk striping to provide high I/O data rates. </title> <journal> Computing Systems, </journal> <volume> 4(4) </volume> <pages> 405-436, </pages> <month> Fall </month> <year> 1991. </year>
Reference-contexts: The Bridge [DSE88] multiprocessor file system incorporates tools directly into the file system protocol to allow such operations as file copy and sorting to be performed in parallel with a minimum of communication. Swift <ref> [CL91] </ref> and Zebra [HO93] are research network file systems that implement data declustering across multiple servers with RAID-4/5 [PGK88] fault tolerance of media failures. Zebra is unique in that it incorporates a log-structured file system that allows striping to be performed on a per client basis.
Reference: [CR92] <author> A. L. Cheung and A. P. Reeves. </author> <title> High performance computing on a cluster of workstations. </title> <booktitle> In Proceedings of the First International Symposium on High Performance Distributed Computing, </booktitle> <address> Syracuse, NY, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Metacomputing is a term often applied to the aggregation of networked computing resources, in particular networks of workstations, to form a logical parallel machine. By leveraging existing resources, metacomputing environments offer a cost-effective alternative to parallel machines for many classes of parallel applications <ref> [CR92] </ref>. Common metacomputing environments such as PVM [Sun90] and p4 [BL92], among others [Tur93], provide application programming interfaces with much of the same functionality as those provided for parallel machines, including mechanisms for interprocess communication, synchronization and concurrency control, fault tolerance, and dynamic process management.
Reference: [Cro89] <author> Thomas W. Crockett. </author> <title> File concepts for parallel I/O. </title> <booktitle> In Proceedings of Supercomputing '89, </booktitle> <pages> pages 574-579, </pages> <year> 1989. </year>
Reference-contexts: However, experience indicates that this file model and interface provides insufficient functionality to effectively implement many parallel computations [KN94]. The current PIOUS interface represents a limited extension of the Unix model designed to support the common parallel file access patterns identified by Crockett <ref> [Cro89] </ref>. However, much work is still needed to define a comprehensive set of file system primitives that will enable the efficient implementation of a wide range of parallel applications. <p> But because control messages are short, and hence consume little network bandwidth, the aggregate data bandwidth of a process group should be only minimally effected. 6.3 File Access Benchmarks Performance measurements are presented below for benchmark applications that implement two common parallel file access patterns identified by Crockett <ref> [Cro89] </ref>: partitioned and self-scheduled. Partitioned access divides a linear file into contiguous blocks, with each block accessed sequentially by a different process. Self-scheduled access results when a linear file is accessed sequentially by a group of processes via a shared file pointer.
Reference: [DdR92] <author> Erik DeBenedictis and Juan Miguel del Rosario. </author> <title> nCUBE parallel I/O software. </title> <booktitle> In Eleventh Annual IEEE International Phoenix Conference on Computers and Communications (IPCCC), </booktitle> <pages> pages 0117-0124, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: A brief overview of this related work is presented below. Parallel machines commonly provide a parallel file system interface; familiar examples include the Intel CFS [Pie89] and nCUBE Parallel I/O System <ref> [DdR92] </ref>. Such systems provide parallel applications with varying degrees of file access coordination and control and often employ data declustering to increase aggregate performance. The IBM Vesta [CFPB93] mul-ticomputer file system implements two-dimensional files and a unique stencil-based logical partitioning operator to coordinate parallel file access.
Reference: [DSE88] <author> Peter Dibble, Michael Scott, and Carla Ellis. </author> <title> Bridge: A high-performance file system for parallel processors. </title> <booktitle> In Proceedings of the Eighth International Conference on Distributed Computer Systems, </booktitle> <pages> pages 154-161, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Such systems provide parallel applications with varying degrees of file access coordination and control and often employ data declustering to increase aggregate performance. The IBM Vesta [CFPB93] mul-ticomputer file system implements two-dimensional files and a unique stencil-based logical partitioning operator to coordinate parallel file access. The Bridge <ref> [DSE88] </ref> multiprocessor file system incorporates tools directly into the file system protocol to allow such operations as file copy and sorting to be performed in parallel with a minimum of communication.
Reference: [FPD91] <author> James C. French, Terrence W. Pratt, and Mriganka Das. </author> <title> Performance measurement of a parallel input/output system for the Intel iPSC/2 hypercube. </title> <booktitle> In Proceedings of the 1991 ACM Sigmetrics Conference on Measurement and Modeling of Computer Systems, </booktitle> <pages> pages 178-187, </pages> <year> 1991. </year>
Reference-contexts: Finally, to asses the benefits of caching in the PDS, file access is arranged such that all accesses in a given trial either cache-hit or cache-miss. Benchmark results are given in terms of the minimum sustained aggregate rate <ref> [FPD91] </ref>, the data rate obtained by all processes as perceived by an outside observer. 6.4 Partitioned Access Performance Because of the relatively high latency of the PVM transport layer, requests from a single client do not saturate even a single data server.
Reference: [HO93] <author> John H. Hartman and John K. Ousterhout. </author> <title> The Zebra striped network file system. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 29-43, </pages> <year> 1993. </year>
Reference-contexts: The Bridge [DSE88] multiprocessor file system incorporates tools directly into the file system protocol to allow such operations as file copy and sorting to be performed in parallel with a minimum of communication. Swift [CL91] and Zebra <ref> [HO93] </ref> are research network file systems that implement data declustering across multiple servers with RAID-4/5 [PGK88] fault tolerance of media failures. Zebra is unique in that it incorporates a log-structured file system that allows striping to be performed on a per client basis.
Reference: [KN94] <author> David Kotz and Nils Nieuwejaar. </author> <title> Dynamic file-access characteristics of a production parallel scientific workload. </title> <booktitle> In Proceedings of Supercomputing '94, </booktitle> <pages> pages 640-649, </pages> <month> November </month> <year> 1994. </year> <institution> 21 Emory University CSTR-941101 </institution>
Reference-contexts: To date, no particular file model or interface has been embraced as being clearly superior. As a result, most commercial parallel file systems implement a traditional Unix model [Kot93]. However, experience indicates that this file model and interface provides insufficient functionality to effectively implement many parallel computations <ref> [KN94] </ref>. The current PIOUS interface represents a limited extension of the Unix model designed to support the common parallel file access patterns identified by Crockett [Cro89].
Reference: [Kot93] <author> David Kotz. </author> <title> Multiprocessor file system interfaces. </title> <booktitle> In Proceedings of the Second International Conference on Parallel and Distributed Information Systems, </booktitle> <pages> pages 194-201, </pages> <year> 1993. </year>
Reference-contexts: Thus developing parallel scientific, database, and sorting applications, among others, should be greatly simplified. PIOUS files are based on a similar segmented file scheme proposed by Kotz and termed multifiles <ref> [Kot93] </ref>. 5.2 File Views and Access Semantics The PIOUS user interface provides a process group with three logical views of a file object: global, independent, and segmented. <p> To date, no particular file model or interface has been embraced as being clearly superior. As a result, most commercial parallel file systems implement a traditional Unix model <ref> [Kot93] </ref>. However, experience indicates that this file model and interface provides insufficient functionality to effectively implement many parallel computations [KN94]. The current PIOUS interface represents a limited extension of the Unix model designed to support the common parallel file access patterns identified by Crockett [Cro89].
Reference: [Lam79] <author> Leslie Lamport. </author> <title> How to make a multiprocessor computer that correctly executes multiprocess programs. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-28(9):690-691, </volume> <month> September </month> <year> 1979. </year>
Reference-contexts: Parallel I/O operations in PIOUS are performed within the context of transactions [BHG87], transparently to the user, to provide sequential consistency <ref> [Lam79] </ref> of access and tolerance of system failures. Referring to Figure 1, client library routines act as transaction managers for the data servers participating in a distributed transaction satisfying a user request. The PIOUS architecture defines two distinct transaction types: stable and volatile. Both transaction types guarantee serializability of access.
Reference: [MS95] <author> Steven A. Moyer and V. S. Sunderam. </author> <title> PIOUS for PVM: </title> <note> User's Guide and Reference Manual Version 1, 1995. Software and documentation available via anonymous ftp from ftp.mathcs.emory.edu in the directory pub/pious1. </note>
Reference-contexts: PIOUS diverges from the traditional Unix model by implementing two-dimensional file objects and sophisticated access coordination mechanisms designed to simplify parallel applications development. These features of the PIOUS file model and interface are discussed in detail below. A complete description of the current PIOUS interface is presented in <ref> [MS95] </ref>. 5.1 File Objects A PIOUS file is a single object composed of one or more physically disjoint data segments. Each data segment is composed of a linear sequence of zero or more bytes.
Reference: [PGK88] <author> David Patterson, Garth Gibson, and Randy Katz. </author> <title> A case for redundant arrays of inexpensive disks (RAID). </title> <booktitle> In ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 109-116, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Data declustering has the economic advantage of employing multiple lower performance, and hence lower cost, storage devices to provide a level of performance associated with much more costly devices; this observation is the impetus behind current RAID <ref> [PGK88] </ref> research. For a network file service application such as PIOUS, the economic benefit of data declustering to achieve high-performance from existing resources is particularly compelling. 2.4 Access Mechanism and Policy Independence Parallel file systems are relatively new and an area of active research. <p> The current PIOUS implementation does not provide applications with fault tolerance of media failures. Media fault tolerance is achieved by data replication on independent devices, either as multiple file copies [BHG87] or as computed parity information <ref> [PGK88] </ref>. Such techniques are independent of the file system architecture, provided that multiple independent storage devices can be accessed. 5.4 User Transaction Facilities PIOUS files are normally accessed via traditional read and write functions that are guaranteed to be sequentially consistent. <p> Swift [CL91] and Zebra [HO93] are research network file systems that implement data declustering across multiple servers with RAID-4/5 <ref> [PGK88] </ref> fault tolerance of media failures. Zebra is unique in that it incorporates a log-structured file system that allows striping to be performed on a per client basis. However, Swift and Zebra are not parallel file systems as they lack support for parallel application development.
Reference: [Pie89] <author> Paul Pierce. </author> <title> A concurrent file system for a highly parallel mass storage system. </title> <booktitle> In Fourth Conference on Hypercube Concurrent Computers and Applications, </booktitle> <pages> pages 155-160, </pages> <year> 1989. </year>
Reference-contexts: A brief overview of this related work is presented below. Parallel machines commonly provide a parallel file system interface; familiar examples include the Intel CFS <ref> [Pie89] </ref> and nCUBE Parallel I/O System [DdR92]. Such systems provide parallel applications with varying degrees of file access coordination and control and often employ data declustering to increase aggregate performance.
Reference: [Sal87] <author> John Salmon. CUBIX: </author> <title> Programming hypercubes without programming hosts. </title> <booktitle> In Proceedings of the Second Conference on Hypercube Multiprocessors, </booktitle> <pages> pages 3-9, </pages> <year> 1987. </year>
Reference-contexts: Zebra is unique in that it incorporates a log-structured file system that allows striping to be performed on a per client basis. However, Swift and Zebra are not parallel file systems as they lack support for parallel application development. Express is a CUBIX-model <ref> [Sal87] </ref> metacomputing environment that implements a parallel file system interface. However, in network environments, Express does not employ data declustering to aggregate the performance of distributed resources. PIOUS extends the work of existing parallel file systems by incorporating transactions as a generalized concurrency control and fault tolerance mechanism.
Reference: [SGM86] <author> Kenneth Salem and Hector Garcia-Molina. </author> <title> Disk striping. </title> <booktitle> In IEEE 1986 Conference on Data Engineering, </booktitle> <pages> pages 336-342, </pages> <year> 1986. </year>
Reference-contexts: All benchmark applications access a PIOUS file with a number of segments equal to the number of data servers. Thus the linear file mapping provided by the independent and global views results in a data distribution pattern that is equivalent to disk striping <ref> [SGM86] </ref>. In disk striping, a linear sequence of fixed size data blocks, called striping units, are distributed in a round-robin fashion across some number of storage devices. A data stripe consists of the set of striping units distributed in a single round.
Reference: [Sun90] <author> V. S. Sunderam. </author> <title> PVM: A framework for parallel distributed computing. </title> <journal> Con-currency: Practice and Experience, </journal> <volume> 2(4) </volume> <pages> 315-339, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: By leveraging existing resources, metacomputing environments offer a cost-effective alternative to parallel machines for many classes of parallel applications [CR92]. Common metacomputing environments such as PVM <ref> [Sun90] </ref> and p4 [BL92], among others [Tur93], provide application programming interfaces with much of the same functionality as those provided for parallel machines, including mechanisms for interprocess communication, synchronization and concurrency control, fault tolerance, and dynamic process management. <p> The PIOUS prototype is implemented as a parallel application within the PVM <ref> [Sun90] </ref> meta-computing environment. Standard PVM message passing services are utilized for all communication between components of the system.
Reference: [Tur93] <author> L. H. Turcotte. </author> <title> A survey of software environments for exploiting networked computing resources. </title> <type> Technical report, </type> <institution> Mississippi State University, </institution> <month> February </month> <year> 1993. </year>
Reference-contexts: By leveraging existing resources, metacomputing environments offer a cost-effective alternative to parallel machines for many classes of parallel applications [CR92]. Common metacomputing environments such as PVM [Sun90] and p4 [BL92], among others <ref> [Tur93] </ref>, provide application programming interfaces with much of the same functionality as those provided for parallel machines, including mechanisms for interprocess communication, synchronization and concurrency control, fault tolerance, and dynamic process management.
References-found: 20

