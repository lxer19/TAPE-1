URL: ftp://ftp.cis.ohio-state.edu/pub/anish/papers/IPL.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~anish/pub.html
Root-URL: 
Title: Multitolerant Barrier Synchronization  
Author: Sandeep S. Kulkarni Anish Arora 
Keyword: fault-tolerance, detectable and undetectable faults, parallel processing, concurrency  
Address: Columbus, OH 43210 USA  
Affiliation: Department of Computer and Information Science 1 The Ohio State University  
Abstract: We design a multitolerant program for synchronizing the phases of concurrent processes. The tolerances of the program enable processes to (i) execute all phases correctly in the presence of faults that corrupt process state in a detectable manner, and (ii) execute only a minimum possible number of phases incorrectly before resuming correct computation in the presence of faults that corrupt process state in an undetectable manner. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Couvreur, N. Francez, and M. Gouda. </author> <title> Asynchronous unison. </title> <booktitle> Proceedings of the Twelveth International Conference on Distributed Computing Systems, </booktitle> <address> Tokyo, </address> <year> 1992. </year>
Reference-contexts: This form of synchronization generalizes a variety of others, such as clock unison <ref> [1] </ref>, phase synchronization [2] and atomic commitment [3], and appears frequently in parallel, distributed, and scientific computation applications. Often the design of barrier synchronization has to accommodate the occurrence of faults. <p> We briefly recall these problems below and discuss how our barrier synchronization program can be used to design fault-tolerant programs for these problems. Asynchronous unison. In the asynchronous unison problem <ref> [1] </ref>, every process maintains a bounded-value clock such that, at all times, the difference between the clock values of two processes is at most 1, and each clock is incremented infinitely often.
Reference: [2] <author> J. Misra. </author> <title> Phase synchronization. </title> <journal> Information Processing Letters, </journal> <volume> 38 </volume> <pages> 101-105, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: This form of synchronization generalizes a variety of others, such as clock unison [1], phase synchronization <ref> [2] </ref> and atomic commitment [3], and appears frequently in parallel, distributed, and scientific computation applications. Often the design of barrier synchronization has to accommodate the occurrence of faults. Commonly considered examples of faults include incorrect initializations; corruption, loss, reordering, and duplication of messages; processor restarts; and performance and timing violations. <p> Since our solution is stabilizing tolerant to undetectable state corruption of phase, it meets the tolerance requirements of asynchronous unison. Phase Synchronization. In the phase synchronization problem <ref> [2] </ref>, each process executes a (potentially infinite) sequence of phases. A process executes a phase only when all processes have completed the previous phase. Traditionally the tolerance requirement in phase synchronization is to mask the fault that corrupts the phase of processes initially in (and not during) the computation.
Reference: [3] <author> P. A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems, chapter 7. </title> <publisher> Addison Wesley, </publisher> <year> 1987. </year>
Reference-contexts: This form of synchronization generalizes a variety of others, such as clock unison [1], phase synchronization [2] and atomic commitment <ref> [3] </ref>, and appears frequently in parallel, distributed, and scientific computation applications. Often the design of barrier synchronization has to accommodate the occurrence of faults. Commonly considered examples of faults include incorrect initializations; corruption, loss, reordering, and duplication of messages; processor restarts; and performance and timing violations. <p> Our solution can be extended so that each process corrects the shared variables of all processes, thereby meeting the tolerance requirements of phase synchronization. Atomic commitment. In the atomic commit problem <ref> [3] </ref>, each process casts one of two votes, Yes or No, and then reaches one of two decisions, Commit or Abort. A process reaches the decision to Commit iff all processes cast Yes votes. The decision reached by all processes must be identical.
Reference: [4] <author> E. W. Dijkstra. </author> <title> Self-stabilizing systems in spite of distributed control. </title> <journal> Communications of the ACM, </journal> <volume> 17(11), </volume> <year> 1974. </year>
Reference-contexts: The state corruption view suggests that one way to accommodate all of the fault-classes is to design the set of processes to be stabilizing <ref> [4] </ref>, i.e., to recover from an arbitrarily corrupted state to one from where the specification of barrier synchronization is (re)satisfied.
Reference: [5] <author> A. Arora and S. S. Kulkarni. </author> <title> Component based design of multitolerance. </title> <journal> Revised for IEEE Transactions on Software Engineering, </journal> <year> 1996. </year>
Reference-contexts: We therefore present in this paper barrier synchronization designs that offer multiple levels of tolerance corresponding to multiple fault-classes, a notion which we refer to as multitolerance <ref> [5] </ref>. Specifically, our designs are able to tolerate all state corruptions, while keeping for each fault-class the number of phases executed incorrectly to be the minimum that is possible for that fault-class. 1 Email: fkulkarni,anishg@cis.ohio-state.edu; Web: http://www.cis.ohio-state.edu/f~ kulkarni,~anish g.

References-found: 5

