URL: http://www.daimi.aau.dk/~bromille/Papers/fusion.ps
Refering-URL: http://www.daimi.aau.dk/~bromille/Papers/index.html
Root-URL: http://www.daimi.aau.dk
Title: can Implemented with  Fusion Trees can be Implemented with AC 0 Instructions only  
Author: Andersson AC Arne Andersson Peter Bro Miltersen 
Affiliation: et Fusion T  Mikkel Thorup  
Web: RS-96-30  
Note: BRICS  Instructions only BRICS Basic Research in Computer Science  
Abstract: BRICS Report Series RS-96-30 ISSN 0909-0878 September 1996 
Abstract-found: 1
Intro-found: 1
Reference: [AFK84] <author> M. Ajtai, M.L. Fredman, and J. Komlos, </author> <title> Hash functions for priority queues, </title> <booktitle> Information and Computation 63 </booktitle> <pages> 217-225, </pages> <year> 1984. </year>
Reference-contexts: 1 Introduction Fredman and Willard [FW93], based on earlier ideas of Ajtai, Fredman, and Komlos <ref> [AFK84] </ref>, introduced the fusion tree.
Reference: [BM72] <author> R. Bayer and E.M. McCreight, </author> <title> Organization and maintenance of large ordered indexes, </title> <journal> Acta Informatica 1(3) </journal> <pages> 173-189, </pages> <year> 1972. </year>
Reference-contexts: Theorem 6 A set can be maintained using linear space under insertion, deletion, predecessor, successor, and rank queries with O (log n= log log n) amortized time per operation on an AC 0 RAM. Proof: The proof proceeds as in [FW93]: Lemma 3 allows us to implement a B-tree <ref> [BM72] </ref> node of degree d p Searching in such a node takes constant time while splitting, merging, and adding/removing keys take O (d) time.
Reference: [FW93] <author> M.L. Fredman and D.E. Willard. </author> <title> Surpassing the information theoretic bound with fusion trees. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 47 </volume> <pages> 424-436, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction Fredman and Willard <ref> [FW93] </ref>, based on earlier ideas of Ajtai, Fredman, and Komlos [AFK84], introduced the fusion tree. <p> In this paper, we solve this problem by showing that, given a small set of non-standard AC 0 instructions in addition to the more standard ones (addition, comparison, bitwise Boolean operations, and shifts), the fusion tree can be implemented, with the same asymptotic space and time bounds as in <ref> [FW93] </ref>. Our presentation can also be seen as an alternative explanation of the basic mechanisms in fusion trees. We believe that our use of special-purpose instructions in place of the ingenious use of multiplication in [FW93] may make our presentation easier to understand for the casual reader. 2 Model of computation <p> fusion tree can be implemented, with the same asymptotic space and time bounds as in <ref> [FW93] </ref>. Our presentation can also be seen as an alternative explanation of the basic mechanisms in fusion trees. We believe that our use of special-purpose instructions in place of the ingenious use of multiplication in [FW93] may make our presentation easier to understand for the casual reader. 2 Model of computation and notation We use a RAM with word size w and we consider n w-bit keys that can be treated as binary strings or (unsigned) integers. <p> Theorem 6 A set can be maintained using linear space under insertion, deletion, predecessor, successor, and rank queries with O (log n= log log n) amortized time per operation on an AC 0 RAM. Proof: The proof proceeds as in <ref> [FW93] </ref>: Lemma 3 allows us to implement a B-tree [BM72] node of degree d p Searching in such a node takes constant time while splitting, merging, and adding/removing keys take O (d) time.

References-found: 3

