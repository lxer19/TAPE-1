URL: http://www.cs.wisc.edu/~zhichen/papers/mascots96.ps.gz
Refering-URL: http://www.cs.wisc.edu/~zhichen/zhichen.html
Root-URL: 
Title: Simulation of Heterogeneous Networks of Workstations  
Author: Zhichen Xu 
Address: Madison, WI 53706  
Affiliation: Computer Sciences Department University of Wisconsin Madison  
Abstract: A Network of Workstations (NOW) has become an important distributed platform for large-scale scientific computations. A practical NOW system is heterogeneous and nondedicated, where computing power varies among the workstations and multiple jobs may interact with each other during execution. In this paper, we present the design and implementation of a simulation system for a nondedicated heterogeneous NOW. This simulator provides many options to users to specify and quantify system architectures, network heterogeneity and time-sharing factors, such as speeds of different processors, memory organizations, network topology, communication structures, and workload distributions. The simulator also supports execution of message-passing parallel programs written in C and the PVM library. The software structure of the simulator is well-modularized and highly extensible, which makes it easy to integrate other existing processor, memory and network simulators. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. E. Anderson, et. al., </author> <title> "A case for NOW (Networks of Workstations)", </title> <booktitle> IEEE Micro, </booktitle> <month> February, </month> <year> 1995. </year>
Reference-contexts: 1 Introduction A Network of Workstations (NOW) has become an important distributed platform for large-scale scientific computations. A NOW system is highly cost effective, and widely available <ref> [1] </ref>. In practice, a NOW system is heterogeneous and time-sharing. There are several important performance and system issues related to parallel and distributed computing on a heterogeneous NOW, which should be investigated systematically.
Reference: [2] <author> R. H. Arpaci, et. al., </author> <title> "The interaction of parallel and sequential workloads on a network of workstations, </title> <booktitle> Proceedings of the 1995 ACM SIGMET-RICS Conference on Measurement and Modeling of Computer Systems, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: All system support schemes should consider the effects of both heterogeneity and timesharing. However, most system research projects on NOW have focused on nondedicated homogeneous systems (see e.g. <ref> [2] </ref>). Parallel computing performance on heterogeneous NOW has been characterized through modeling and experimental case studies in [12], [13]. The last performance issue is the one we will address in this paper | to complement the modeling- and measurement-based performance studies by using simulations.
Reference: [3] <author> R. C. Bedichek, "Talisman: </author> <title> fast and accurate multicomputer simulation", </title> <booktitle> Proceedings of the 1995 ACM SIGMETRICS Conference on Measurement and Modeling of Computer Systems, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: Simulation efficiency, accuracy and generality are major concerns in simulator design and implementation. Many articles have studied the issues of efficiency and accuracy of different simulation methods (e.g. [7]), and presented examples in simulating important components of a computer system, and specific computer architectures (e.g. <ref> [3, 6] </ref>). We emphasize the flexibility of simulating the heterogeneity at different system levels that may exist in a NOW System. We give a simulation framework to integrate other existing uniprocessor, memory and network simulators.
Reference: [4] <institution> CSIM17 TUTORIAL (C Version), Mesquite Software, Inc., </institution> <year> 1994. </year>
Reference-contexts: Computation abstraction may greatly speedup simulation time for large applications, but at the expense of accuracy. In all three cases, a PE model is implemented as a set of unix processes. 3.2 The Network Model The network model is implemented using CSIM17 <ref> [4, 5] </ref>. CSIM17 is a set of library routines for use with C or C++ programs to create process-oriented, discrete-event simulation models. CSIM provides a fairly complete set of objects which can be used to construct models of many systems. The dispatcher and PE agents are implemented as CSIM processes.
Reference: [5] <institution> CSIM17 USERS' GUIDE, Mesquite Software, Inc., </institution> <year> 1994. </year>
Reference-contexts: Computation abstraction may greatly speedup simulation time for large applications, but at the expense of accuracy. In all three cases, a PE model is implemented as a set of unix processes. 3.2 The Network Model The network model is implemented using CSIM17 <ref> [4, 5] </ref>. CSIM17 is a set of library routines for use with C or C++ programs to create process-oriented, discrete-event simulation models. CSIM provides a fairly complete set of objects which can be used to construct models of many systems. The dispatcher and PE agents are implemented as CSIM processes.
Reference: [6] <author> S. Dwarkadas, J. R. Jump, and J.B. Sinclair, </author> <title> "Execution-driven simulation of multiprocessors: address and timing analysis", </title> <journal> ACM Transactions on Modeling and Computer Simulation, </journal> <volume> Vol. 4, No. 4, </volume> <month> October </month> <year> 1994. </year>
Reference-contexts: Simulation efficiency, accuracy and generality are major concerns in simulator design and implementation. Many articles have studied the issues of efficiency and accuracy of different simulation methods (e.g. [7]), and presented examples in simulating important components of a computer system, and specific computer architectures (e.g. <ref> [3, 6] </ref>). We emphasize the flexibility of simulating the heterogeneity at different system levels that may exist in a NOW System. We give a simulation framework to integrate other existing uniprocessor, memory and network simulators.
Reference: [7] <author> H. Davis, S. R. Goldschmidt and J. Hennessy, </author> <title> "Multiprocessor simulation and tracing using tango", </title> <booktitle> Proceedings of 1991 International Conference on Parallel Processing, </booktitle> <volume> Vol. II, </volume> <month> August </month> <year> 1991. </year>
Reference-contexts: A simulator for NOW system should be able to simulate the heterogeneity at different system levels. Simulation efficiency, accuracy and generality are major concerns in simulator design and implementation. Many articles have studied the issues of efficiency and accuracy of different simulation methods (e.g. <ref> [7] </ref>), and presented examples in simulating important components of a computer system, and specific computer architectures (e.g. [3, 6]). We emphasize the flexibility of simulating the heterogeneity at different system levels that may exist in a NOW System.
Reference: [8] <author> A. Geist, et. al., </author> <title> PVM: Parallel Virtual Machine | A Users' Guide and Tutorial for Networked Parallel Computing, </title> <publisher> The MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: The simulator currently supports message-passing parallel programs written in C and the PVM library <ref> [8] </ref>. The software structure of the simulator is well-modularized and highly extensible, which makes it easy to integrate other existing processor, memory and network simulators. Although the simulator is developed for a NOW system.
Reference: [9] <author> J. L. Hennessy and D. A. Patterson, </author> <title> Computer Architecture, A Quantitative Approach, </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1990. </year>
Reference-contexts: Our current version of the processor-memory pair simulation is implemented by the DLXsim-DineroIII pair, where DLXsim [11] is an interactive program that loads DLX assembler programs and simulates the operation of a DLX computer <ref> [9] </ref> | a RISC computer, and DineroIII [10] is a cache simulator that takes reference traces and generates timing performance data regarding memory accesses.
Reference: [10] <author> M. D. Hill, </author> <title> Aspects of Cache Memory and Instruction Buffer Performance, </title> <type> Ph.D. Thesis, </type> <institution> Computer Science Division, University of Cali-fornia at Berkeley, </institution> <month> November </month> <year> 1987. </year>
Reference-contexts: This design structure enables the PE model to be easily built with existing processor and memory simulators. In our current implementation, the DLXsim [11] simulator has been modified to simulate the processing node, and DineroIII <ref> [10] </ref> has been modified to simulate the cache. <p> Our current version of the processor-memory pair simulation is implemented by the DLXsim-DineroIII pair, where DLXsim [11] is an interactive program that loads DLX assembler programs and simulates the operation of a DLX computer [9] | a RISC computer, and DineroIII <ref> [10] </ref> is a cache simulator that takes reference traces and generates timing performance data regarding memory accesses.
Reference: [11] <author> L. B. Hostetler and B. Mirtich, </author> <title> "DLXsim | a simulator for DLX", </title> <note> ftp: max.stanford.edu, /pub/hennessy-patterson.software. </note>
Reference-contexts: This design structure enables the PE model to be easily built with existing processor and memory simulators. In our current implementation, the DLXsim <ref> [11] </ref> simulator has been modified to simulate the processing node, and DineroIII [10] has been modified to simulate the cache. <p> Another disadvantage is that this may not provide flexi bilities of simulating the system heterogeneity at different levels which may exist in one node. Our current version of the processor-memory pair simulation is implemented by the DLXsim-DineroIII pair, where DLXsim <ref> [11] </ref> is an interactive program that loads DLX assembler programs and simulates the operation of a DLX computer [9] | a RISC computer, and DineroIII [10] is a cache simulator that takes reference traces and generates timing performance data regarding memory accesses.
Reference: [12] <author> X. Zhang and Y. Yan, </author> <title> "A framework of performance prediction of parallel computing on nondedicated heterogeneous NOW", </title> <booktitle> Proceedings of the 1995 International Conference of Parallel Processing, </booktitle> <volume> Vol. I, </volume> <month> August, </month> <year> 1995. </year>
Reference-contexts: All system support schemes should consider the effects of both heterogeneity and timesharing. However, most system research projects on NOW have focused on nondedicated homogeneous systems (see e.g. [2]). Parallel computing performance on heterogeneous NOW has been characterized through modeling and experimental case studies in <ref> [12] </ref>, [13]. The last performance issue is the one we will address in this paper | to complement the modeling- and measurement-based performance studies by using simulations.
Reference: [13] <author> X. Zhang and Y. Yan, </author> <title> "Modeling and characterizing parallel computing performance on heterogeneous networks of workstations", </title> <booktitle> Proceedings of the Seventh IEEE Symposium on Parallel and Distributed Processing, </booktitle> <month> October, </month> <year> 1995. </year>
Reference-contexts: All system support schemes should consider the effects of both heterogeneity and timesharing. However, most system research projects on NOW have focused on nondedicated homogeneous systems (see e.g. [2]). Parallel computing performance on heterogeneous NOW has been characterized through modeling and experimental case studies in [12], <ref> [13] </ref>. The last performance issue is the one we will address in this paper | to complement the modeling- and measurement-based performance studies by using simulations.
References-found: 13

