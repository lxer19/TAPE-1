URL: http://www.icsi.berkeley.edu/~tschudin/ps/ma97.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/~tschudin/
Root-URL: http://www.icsi.berkeley.edu
Email: &lt;tschudin@ifi.unizh.ch&gt;  
Title: Open Resource Allocation for Mobile Code  
Author: Christian F. Tschudin 
Keyword: Mobile code, communication messengers, open resource alloca tion, market, computational ecosystems.  
Address: (ICSI), Berkeley, USA  
Affiliation: Computer Science Department, University of Zurich, Switzerland and International Computer Science Institute  
Abstract: Mobile code technology leads to a new type of open systems: instead of applying openness to a standardization process we now require the running systems to become open for foreign code. The question then is how far this technical openness can go for mobile code. The less constraints we impose on hosts running mobile code, the more can the benefits of mobile code be exploited. However, there must necessarily be basic constraints regarding the utilization of resources which are always finite and most of the time will be operated near the saturation point. In this paper we argue in favor of openness even at the level of resource allocation. We link this topic to (open) market models, describe the mechanisms we developed so far for communication messengers and show how they are used to allocate resources in an open way. Finally we present experimental results of validation runs which help us testing these mechanisms. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> D. F. Ferguson, C. Nikolaou, and Y. Yemini. </author> <title> An economy for flow control in computer networks. </title> <booktitle> In Proceedings of the IEEE Infocom-89, </booktitle> <pages> pages 110-118, </pages> <year> 1989. </year>
Reference-contexts: Note that most of the time, centralized markets are considered and mobile code is not taken into account at all. Furthermore, experiments concentrate on processing time and disregard non-preemptible resources. Applying microeconomics to problems in the area of networks is also not a new idea <ref> [1, 6] </ref>, to cite just a few, although this too was not applied to mobile code yet (but this may change: watch Yemeni's Web page on the announced netscript). Distributed systems: Distributed control in general is an old topic, also the question of stability in such a setting.
Reference: 2. <author> B. A. Huberman, </author> <title> editor. The Ecology of Computation. </title> <publisher> Elsevier, </publisher> <year> 1988. </year>
Reference-contexts: The whole system consisting of execution platforms and mobile agents together with the market mechanisms becomes a computational ecosystem <ref> [2] </ref>. 2.3 Working model Before we look in more detail at the practical implication of a market model for our communication messengers, we will sketch a picture about what we think will be the normal mode of operation. <p> We already mentioned lottery scheduling, which in fact belongs to the domain of operating systems research [14] but which stems from more general research on the dynamics of computation and experiments on computational economies [13]. One prominent reference for this concept is <ref> [2] </ref> from 1988, a more recent paper can be found under [3]. Note that most of the time, centralized markets are considered and mobile code is not taken into account at all. Furthermore, experiments concentrate on processing time and disregard non-preemptible resources.
Reference: 3. <author> Bernardo A. Hubermann. </author> <title> Computation as economics. </title> <booktitle> Presentation at the Second International Conference in Economics and Finance. </booktitle> <address> URL: http://www.unige.ch/ce/ce96/ps/ huberman.eps, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: One prominent reference for this concept is [2] from 1988, a more recent paper can be found under <ref> [3] </ref>. Note that most of the time, centralized markets are considered and mobile code is not taken into account at all. Furthermore, experiments concentrate on processing time and disregard non-preemptible resources.
Reference: 4. <author> V. Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> In SIGCOMM'88 Conference on Communications Architectures & Protocols, </booktitle> <pages> pages 314-329, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Just for two arbitrary examples we mention AMOEBA's bullet file server where files which were not referenced by the directory server for some time are automatically removed (touching a file, however, seems to be free). The other example is Jacobson's changes to the TCP/IP retransmission mechanisms <ref> [4] </ref>, thus a modification of local rules that lead to better global performance (congestion avoidance). 6 Summary We presented a novel approach of combining mobile code systems with microeconomics in order to do open resource allocation. Open resource allocation means that resources are granted on a non-discriminatory basis.
Reference: 5. <author> Guy Neuschwander. </author> <title> Execution du code natif dans l'environnement MOS. </title> <type> Diploma thesis, </type> <institution> University of Geneva, </institution> <month> November </month> <year> 1996. </year>
Reference-contexts: Since then, M was further developed and also ported to bare (OS-less) i386 machines for experimenting with native code execution under messenger control i.e., distributed LINUX <ref> [5] </ref>. The UNIX version simulates thread switching in C while the i386 version has true preemptive scheduling.
Reference: 6. <author> J. Sairamesh, D. F. Ferguson, and Y. Yemini. </author> <title> An approach to pricing, optimal allocation and quality of service provisioning in high-speed packet networks. </title> <booktitle> In Proceedings of the IEEE Infocom'95, </booktitle> <pages> pages 1111-1119, </pages> <year> 1995. </year>
Reference-contexts: Note that most of the time, centralized markets are considered and mobile code is not taken into account at all. Furthermore, experiments concentrate on processing time and disregard non-preemptible resources. Applying microeconomics to problems in the area of networks is also not a new idea <ref> [1, 6] </ref>, to cite just a few, although this too was not applied to mobile code yet (but this may change: watch Yemeni's Web page on the announced netscript). Distributed systems: Distributed control in general is an old topic, also the question of stability in such a setting.
Reference: 7. <author> J. W. Stamos and D. K. Gifford. </author> <title> Remote Evaluation. </title> <journal> ACMTPLS, </journal> <volume> 12(4), </volume> <year> 1990, </year> <pages> pages 537-565. </pages>
Reference-contexts: This is true even for precursory work like remote evaluation that has very similar resource allocation problems as mobile software agents have but where this problem is only briefly mentioned in the section on server security <ref> [7] </ref>. (In the following we omit general references to work on mobile agents). Mobile software agents and money: Well known is the teleclick concept of Gen-eralMagic. Also, the concept of energy can be found that would limit the radius of action and the potential harm a mobile agent could do.
Reference: 8. <author> I. E. Sutherland. </author> <title> A futures market in computer time. </title> <journal> CACM, </journal> <volume> 11(6), </volume> <year> 1968. </year>
Reference-contexts: Ecosystems: Markets for processing time were already proposed in 1968 <ref> [8] </ref>. We already mentioned lottery scheduling, which in fact belongs to the domain of operating systems research [14] but which stems from more general research on the dynamics of computation and experiments on computational economies [13].
Reference: 9. <author> Chr. F. Tschudin. </author> <title> Minimality as the Leitmotiv for mobile code. </title> <booktitle> Presentation at the 2nd German Workshop on Mobile Agents (DeMAT-II). </booktitle> <address> http://www.ifi.unizh.ch/groups/bauknecht/ tschudin/research/demat96-eng.ps.gz, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: In this section we give an overview of the concepts behind M and report on the corresponding software. 3.1 Execution Model The aim of the messenger environment M is simplicity and minimality <ref> [9] </ref>: only what we think is essential for mobile code was included (see figure 1). The core of M is the execution platform where incoming messengers are turned into concurrent threads. These threads are anonymous and can therefore not directly communicate with each other.
Reference: 10. <editor> Chr. F. Tschudin, G. Di Marzo, M. Murhimanya, and J. Harms. Welche Sicherheit fur mo-bilen Code? In K. Bauknecht, D. Karangiannis, and S. Teufel, editors, </editor> <booktitle> Proceedings der Fachtagung SIS'96 Sicherheit in Informationssystemen, </booktitle> <pages> pages 291-307, </pages> <address> Vienna, </address> <month> March </month> <year> 1996. </year> <note> English abstract: http://www.ifi.unizh.ch/groups/bauknecht/tschudin/research/sis96-abstract.html. </note>
Reference-contexts: Data exchange has to be done via a shared memory area, synchronization is supported by simple thread queues. The submission and reception of mobile code is not restricted by security protocols as we follow an open security model for mobile code <ref> [10] </ref>. Fig. 1. The logical view of a messenger execution platform. Communication channels link neighboring platforms by a simple and unreliable datagram service (garbled messengers are silently dropped). Because most channels impose limits on the admissible datagram length, messengers must provide their own fragmentation and reassembly logic.
Reference: 11. <author> Christian F. Tschudin. </author> <title> On the Structuring of Computer Communications. </title> <type> PhD thesis, </type> <institution> Uni-versite de Geneve, </institution> <year> 1993. </year> <note> These No 2632. ftp://cui.unige.ch/pub/tschudin/phd-f123g.ps.Z. </note>
Reference-contexts: We are investigating these goals with rather small mobile agents we call communication messengers. 1.1 The Messenger Approach At the heart of messengers is the paradigm of instruction-based communications <ref> [11] </ref>. Based on a very simple communication model, namely the exchange of pure instructions and their mandatory detached execution, we obtain a universal communication environment in which classical communication protocols need not to be known and installed at a remote site. <p> Thread queues are created on demand and can be put into a stopped state, allowing to control the progress of the queued threads. These frugal interaction means are sufficient to implement the classical inter-process communication primitives like read/write or full rendez-vous (see e.g., the appendix in <ref> [11] </ref>). 3.2 Data model The M language resembles very much POSTSCRIPT. Thus, it is a stackbased, high-level (i.e., pointerfree) and not object-oriented language. There are simple data instances and composite ones.
Reference: 12. <author> Christian F. Tschudin. </author> <title> M0 a messenger execution environment. </title> <journal> Usenet newsgroup comp.sources.unix, </journal> <volume> Vol 28, </volume> <pages> Issue 51-62, </pages> <month> June </month> <year> 1994. </year> <month> ftp://cui.unige.ch/pub/m0/m0-manual.ps.Z </month>
Reference-contexts: We envisage specialized arbitrage messengers that try to exploit (i.e., benefit from) asymmetries in exchange rates, leading to accurate exchange rates. 3.5 The M Implementation A first implementation of M was published in 1994 <ref> [12] </ref> for UNIX platforms and is written in ANSI-C. Since then, M was further developed and also ported to bare (OS-less) i386 machines for experimenting with native code execution under messenger control i.e., distributed LINUX [5].
Reference: 13. <author> C. A. Waldspurger, T. Hogg, B. A. Hubermann, J. O. Kephart, and W. S. Stornetta. Spawn: </author> <title> a distributed computational economy. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(2) </volume> <pages> 103-117, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: Ecosystems: Markets for processing time were already proposed in 1968 [8]. We already mentioned lottery scheduling, which in fact belongs to the domain of operating systems research [14] but which stems from more general research on the dynamics of computation and experiments on computational economies <ref> [13] </ref>. One prominent reference for this concept is [2] from 1988, a more recent paper can be found under [3]. Note that most of the time, centralized markets are considered and mobile code is not taken into account at all. Furthermore, experiments concentrate on processing time and disregard non-preemptible resources.
Reference: 14. <author> Carl. A. Waldspurger and William E. Weihl. </author> <title> Lottery scheduling: Flexible proportional-share resource management. </title> <booktitle> In First Symposium on Operating System Design and Implementation (OSDI), USENIX Association, </booktitle> <pages> pages 1-11, </pages> <year> 1994. </year>
Reference-contexts: What we have to test is that resources are allocated according to the (relative) amount of money messengers invests in order to obtain them. 4.1 Lottery Scheduling Lottery scheduling <ref> [14] </ref> is a very simple but effective form of letting messengers choose themselves the intensity at which they want to proceed. Each messenger thread indicates a number of tickets that should participate in a CPU time lottery. <p> Ecosystems: Markets for processing time were already proposed in 1968 [8]. We already mentioned lottery scheduling, which in fact belongs to the domain of operating systems research <ref> [14] </ref> but which stems from more general research on the dynamics of computation and experiments on computational economies [13]. One prominent reference for this concept is [2] from 1988, a more recent paper can be found under [3].
References-found: 14

