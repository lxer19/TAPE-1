URL: http://compgeom.cs.uiuc.edu/~jeffe/pubs/tradeoff.ps.gz
Refering-URL: http://compgeom.cs.uiuc.edu/~jeffe/pubs/tradeoff.html
Root-URL: http://www.cs.uiuc.edu
Email: jeffe@cs.duke.edu  
Title: Space-Time Tradeoffs for Emptiness Queries (Extended abstract)  
Author: Jeff Erickson 
Web: http://www.cs.duke.edu/ jeffe  
Address: Durham, NC 27708-0129  
Affiliation: Center for Geometric Computing Computer Science Department Duke University  
Abstract: We present the first nontrivial space-time tradeoff lower bounds for hyperplane and halfspace emptiness queries. Our lower bounds apply to a general class of geometric range query data structures called partition graphs. Informally, a partition graph is a directed acyclic graph that describes a recursive decomposition of space. We show that any partition graph that supports hyperplane emptiness queries implicitly defines a halfspace range query data structure in the Fredman/Yao semigroup arithmetic model, with the same space and time bounds. Thus, results of Bronnimann, Chazelle, and Pach imply that any partition graph of size s that supports hyperplane emptiness queries in time t must satisfy the inequality st d = ((n= log n) d-(d-1)=(d+1) ). Using different techniques, we show that (n d = polylog n) preprocessing time is required to achieve polylogarithmic query time, and that (n (d-1)=d = polylog n) query time is required if only O(n polylog n) preprocessing time is used. These two lower bounds are optimal up to polylogarithmic factors. For two-dimensional queries, we obtain an optimal continuous tradeoff between these two extremes. Finally, using a reduction argument, we show that the same lower bounds hold for halfspace emptiness queries in IR d(d+3)=2 on a restricted class of partition graphs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal. </author> <title> Range searching. </title> <type> Report CS-1996-05, </type> <institution> Dept. Comput. Sci., Duke Univ., </institution> <year> 1996. </year> <note> http:// www:cs:duke:edu/ ~ pankaj/papers/range-survey:ps:gz. To appear in The CRC Handbook of Discrete and Computational Geometry, </note> <editor> J. E. Goodman and J. O'Rourke, editors, </editor> <publisher> CRC Press. </publisher>
Reference-contexts: For comparison, the best known upper bounds are listed in Table 1. (For a review of range searching techniques and results, see the surveys by Ma-tousek [26] and Agarwal <ref> [1] </ref>.) * s = (n), p = (n log n), and t = (log n). * Any partition graph that supports hyperplane emptiness queries implicitly defines a halfspace range query data structure in the Fredman/Yao semigroup arithmetic model, with the same time and space bounds. <p> For example, if the semi-group is (ZZ; +), then the clusters must be disjoint; on the other hand, if the semigroup is (ZZ; max), then the clusters can overlap arbitrarily. Theorem 2.1 (Bronnimann, Chazelle, Pach). Let P be a uniformly distributed set of points in the d-dimensional unit hypercube <ref> [0; 1] </ref> d . With high probability, any storage scheme of size s that supports half-space queries in P in time t must satisfy the inequality st d = ((n= log n) d-(d-1)=(d+1) ). <p> Theorems 2.1 and 2.2 now immediately imply the following lower bounds. Corollary 4.3. Let P be a uniformly generated set of n points in <ref> [0; 1] </ref> d . With high probability, any partition graph of size s that supports halfspace counting queries for P in time t satisfies the inequality st d = ((n= log n) d-(d-1)=(d+1) ). Corollary 4.4. <p> The following lower bound now follows immediately from Theorem 2.1. Corollary 4.6. Let P be a uniformly generated set of n points in <ref> [0; 1] </ref> d . With high probability, any partition graph of size s that supports hyperplane emptiness queries for P in time t satisfies the inequality st d = ((n= log n) d-(d-1)=(d+1) ). Again, Lemma 3.1 implies that the same lower bound applies to hyperplane counting queries.
Reference: [2] <author> P. K. Agarwal and J. Matousek. </author> <title> Ray shooting and parametric search. </title> <journal> SIAM J. Comput. </journal> <volume> 22(4) </volume> <pages> 794-806, </pages> <year> 1993. </year>
Reference-contexts: This work was also supported by the National Science Foundation under grant DMS-9627683 and by the U. S. Army Research Office under grant DAAH04-96-1-0013. and halfspace emptiness queries. Emptiness query data structures are used to solve several geometric problems, including point location [12], ray shooting <ref> [2, 12, 24, 27] </ref>, nearest and farthest neighbor queries [2], linear programming queries [23, 7], depth ordering [5], collision detection [11], and output-sensitive convex hull construction [23, 8]. <p> S. Army Research Office under grant DAAH04-96-1-0013. and halfspace emptiness queries. Emptiness query data structures are used to solve several geometric problems, including point location [12], ray shooting [2, 12, 24, 27], nearest and farthest neighbor queries <ref> [2] </ref>, linear programming queries [23, 7], depth ordering [5], collision detection [11], and output-sensitive convex hull construction [23, 8]. Most previous range searching lower bounds are presented in the so-called semigroup arithmetic model, originally introduced by Fredman [20] and later refined by Yao [31]. <p> Is there a reduction from hyperplane queries to halfspace queries that only increases the dimension by a constant factor (preferably two)? Finally, can our techniques be applied to other closely related problems, such as linear programming queries [23, 7] and ray shooting queries <ref> [2, 12, 24, 27] </ref>? Acknowledgments I thank Pankaj Agarwal for suggesting this problem for study.
Reference: [3] <author> A. Aggarwal, M. Hansen, and T. Leighton. </author> <title> Solving query-retrieval problems by compacting Voronoi diagrams. </title> <booktitle> Proc. 22nd Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pp. 331-340, </pages> <year> 1990. </year>
Reference-contexts: The best known halfspace counting data structure requires roughly (n d ) space to achieve logarithmic query time [10, 25]; whereas, the same query time can be achieved Space Preprocessing Query Time Source d = 2; 3 O (n) O (n log n) O (log n) <ref> [13, 3, 16] </ref> O (n) O (n 1+" ) O (n 1-1=bd=2c 2 O (log fl n) ) [22] O (n) O (n log n) O (n 1-1=bd=2c polylog n) [27] n s n bd=2c O (s polylog n) O ((n polylog n)=s 1=bd=2c ) [27] Table 2.
Reference: [4] <author> M. Ben-Or. </author> <title> Lower bounds for algebraic computation trees. </title> <booktitle> Proc. 15th Annu. ACM Sympos. Theory Com-put., </booktitle> <pages> pp. 80-86, </pages> <year> 1983. </year>
Reference-contexts: The size of any range searching data structure must be (n), since it must store each of the points, and the query time must be at least (log n) in any reasonable model of computation (such as algebraic computation trees <ref> [4] </ref> or real RAMs [29]).
Reference: [5] <author> M. de Berg, M. Overmars, and O. Schwarzkopf. </author> <title> Computing and verifying depth orders. </title> <journal> SIAM J. Comput. </journal> <volume> 23 </volume> <pages> 437-446, </pages> <year> 1994. </year>
Reference-contexts: S. Army Research Office under grant DAAH04-96-1-0013. and halfspace emptiness queries. Emptiness query data structures are used to solve several geometric problems, including point location [12], ray shooting [2, 12, 24, 27], nearest and farthest neighbor queries [2], linear programming queries [23, 7], depth ordering <ref> [5] </ref>, collision detection [11], and output-sensitive convex hull construction [23, 8]. Most previous range searching lower bounds are presented in the so-called semigroup arithmetic model, originally introduced by Fredman [20] and later refined by Yao [31].
Reference: [6] <author> H. Bronnimann, B. Chazelle, and J. Pach. </author> <title> How hard is halfspace range searching? Discrete Comput. </title> <journal> Geom. </journal> <volume> 10 </volume> <pages> 143-155, </pages> <year> 1993. </year>
Reference-contexts: a data structure is the number of partial sums, and the query time is the number of semigroup additions performed on these partial sums to obtain the answer. (More formal definitions are given in Section 2.) Lower bounds have been established in this model for several types of query ranges <ref> [9, 6] </ref>, in many cases matching the complexities of the corresponding data structures. Unfortunately, the semigroup model cannot be used to study the complexity of emptiness queries. <p> Thus, results of Bronnimann, Chazelle, and Pach <ref> [6] </ref> immediately imply that st d = ((n= log n) d-(d-1)=(d+1) ). <p> The size of a storage scheme is the number of clusters, and the query time for a range q is the minimum number of clusters whose union is P " q. This is the formulation actually used in <ref> [6, 9] </ref> to prove lower bounds. Some of our lower bounds derive from the following result of Bronnimann, Chazelle, and Pach [6]. 2 Whether or not the clusters used to answer a query must be disjoint depends on the semigroup. <p> This is the formulation actually used in [6, 9] to prove lower bounds. Some of our lower bounds derive from the following result of Bronnimann, Chazelle, and Pach <ref> [6] </ref>. 2 Whether or not the clusters used to answer a query must be disjoint depends on the semigroup. For example, if the semi-group is (ZZ; +), then the clusters must be disjoint; on the other hand, if the semigroup is (ZZ; max), then the clusters can overlap arbitrarily. <p> Since these bounds are achieved by current algorithms| exactly for hyperplanes [25], within polylogarithmic factors for halfspaces [27]|the only way to prove our conjecture is to improve the lower bounds. Our space-time tradeoffs derive from lower bounds for halfspace queries in the semigroup arithmetic model <ref> [6] </ref>, and our preprocessing-query tradeoffs follow from lower bounds for o*ine range searching problems such as Hopcroft's problem [19, 18]. Any improvements to those lower bounds would improve our results as well.
Reference: [7] <author> T. M. Chan. </author> <title> Fixed-dimensional linear programming queries made easy. </title> <booktitle> Proc. 12th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pp. 284-290, </pages> <year> 1996. </year>
Reference-contexts: S. Army Research Office under grant DAAH04-96-1-0013. and halfspace emptiness queries. Emptiness query data structures are used to solve several geometric problems, including point location [12], ray shooting [2, 12, 24, 27], nearest and farthest neighbor queries [2], linear programming queries <ref> [23, 7] </ref>, depth ordering [5], collision detection [11], and output-sensitive convex hull construction [23, 8]. Most previous range searching lower bounds are presented in the so-called semigroup arithmetic model, originally introduced by Fredman [20] and later refined by Yao [31]. <p> Is there a reduction from hyperplane queries to halfspace queries that only increases the dimension by a constant factor (preferably two)? Finally, can our techniques be applied to other closely related problems, such as linear programming queries <ref> [23, 7] </ref> and ray shooting queries [2, 12, 24, 27]? Acknowledgments I thank Pankaj Agarwal for suggesting this problem for study.
Reference: [8] <author> T. M. Chan. </author> <title> Output-sensitive results on convex hulls, extreme points, and related problems. </title> <journal> Discrete Com-put. Geom. </journal> <volume> 16 </volume> <pages> 369-387, </pages> <year> 1996. </year>
Reference-contexts: Emptiness query data structures are used to solve several geometric problems, including point location [12], ray shooting [2, 12, 24, 27], nearest and farthest neighbor queries [2], linear programming queries [23, 7], depth ordering [5], collision detection [11], and output-sensitive convex hull construction <ref> [23, 8] </ref>. Most previous range searching lower bounds are presented in the so-called semigroup arithmetic model, originally introduced by Fredman [20] and later refined by Yao [31].
Reference: [9] <author> B. Chazelle. </author> <title> Lower bounds on the complexity of polytope range searching. </title> <journal> J. Amer. Math. Soc. </journal> <volume> 2 </volume> <pages> 637-666, </pages> <year> 1989. </year>
Reference-contexts: a data structure is the number of partial sums, and the query time is the number of semigroup additions performed on these partial sums to obtain the answer. (More formal definitions are given in Section 2.) Lower bounds have been established in this model for several types of query ranges <ref> [9, 6] </ref>, in many cases matching the complexities of the corresponding data structures. Unfortunately, the semigroup model cannot be used to study the complexity of emptiness queries. <p> model do not apply to the problem of counting the number of points in the query range, even though (ZZ; +) is a faithful semigroup, since a storage scheme for that problem only needs to work for the particular weight function w (p) = 1 for all p 2 P <ref> [9] </ref>. For the same reason, even though the semigroup (ftrue; falseg; _) is faithful, the semigroup model cannot be used to prove lower bounds for emptiness queries. <p> The size of a storage scheme is the number of clusters, and the query time for a range q is the minimum number of clusters whose union is P " q. This is the formulation actually used in <ref> [6, 9] </ref> to prove lower bounds. Some of our lower bounds derive from the following result of Bronnimann, Chazelle, and Pach [6]. 2 Whether or not the clusters used to answer a query must be disjoint depends on the semigroup. <p> Although lower bounds are known for o*ine hyper-plane searching in the semigroup model [15, 19], we are unaware of any previous results for online hyperplane queries. In particular, Chazelle's lower bounds for simplex range searching <ref> [9] </ref> do not apply when the ranges are hyperplanes. We easily observe that for a set of points in general position, the smallest possible storage scheme, consisting of n singleton sets, allows hyperplane queries to be answered in constant "time".
Reference: [10] <author> B. Chazelle. </author> <title> Cutting hyperplanes for divide-and-conquer. </title> <journal> Discrete Comput. Geom. </journal> <volume> 9(2) </volume> <pages> 145-158, </pages> <year> 1993. </year>
Reference-contexts: Space Preprocessing Query Time Source O (n d = log d n) O (n d = log d-" n) O (log n) <ref> [10, 25] </ref> O (n) O (n log n) O (n 1-1=d polylog n) [21] n s n d = log d n O (n 1+" + s log " n) O (n=s 1=d ) [10, 25] Table 1. Best known upper bounds for hyperplane emptiness queries. <p> (n d = log d n) O (n d = log d-" n) O (log n) <ref> [10, 25] </ref> O (n) O (n log n) O (n 1-1=d polylog n) [21] n s n d = log d n O (n 1+" + s log " n) O (n=s 1=d ) [10, 25] Table 1. Best known upper bounds for hyperplane emptiness queries. Our new lower bounds apply to a general class of geometric range query data structures called partition graphs. Informally, a partition graph is a directed acyclic graph that describes a recursive decomposition of space. <p> The situation is entirely different for halfspace queries. The best known halfspace counting data structure requires roughly (n d ) space to achieve logarithmic query time <ref> [10, 25] </ref>; whereas, the same query time can be achieved Space Preprocessing Query Time Source d = 2; 3 O (n) O (n log n) O (log n) [13, 3, 16] O (n) O (n 1+" ) O (n 1-1=bd=2c 2 O (log fl n) ) [22] O (n) O (n
Reference: [11] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir. </author> <title> Algorithms for bichromatic line segment problems and polyhedral terrains. </title> <journal> Algorithmica 11 </journal> <pages> 116-132, </pages> <year> 1994. </year>
Reference-contexts: S. Army Research Office under grant DAAH04-96-1-0013. and halfspace emptiness queries. Emptiness query data structures are used to solve several geometric problems, including point location [12], ray shooting [2, 12, 24, 27], nearest and farthest neighbor queries [2], linear programming queries [23, 7], depth ordering [5], collision detection <ref> [11] </ref>, and output-sensitive convex hull construction [23, 8]. Most previous range searching lower bounds are presented in the so-called semigroup arithmetic model, originally introduced by Fredman [20] and later refined by Yao [31].
Reference: [12] <author> B. Chazelle and J. Friedman. </author> <title> Point location among hyperplanes and unidirectional ray-shooting. </title> <journal> Comput. Geom. Theory Appl. </journal> <volume> 4 </volume> <pages> 53-62, </pages> <year> 1994. </year>
Reference-contexts: This work was also supported by the National Science Foundation under grant DMS-9627683 and by the U. S. Army Research Office under grant DAAH04-96-1-0013. and halfspace emptiness queries. Emptiness query data structures are used to solve several geometric problems, including point location <ref> [12] </ref>, ray shooting [2, 12, 24, 27], nearest and farthest neighbor queries [2], linear programming queries [23, 7], depth ordering [5], collision detection [11], and output-sensitive convex hull construction [23, 8]. <p> This work was also supported by the National Science Foundation under grant DMS-9627683 and by the U. S. Army Research Office under grant DAAH04-96-1-0013. and halfspace emptiness queries. Emptiness query data structures are used to solve several geometric problems, including point location [12], ray shooting <ref> [2, 12, 24, 27] </ref>, nearest and farthest neighbor queries [2], linear programming queries [23, 7], depth ordering [5], collision detection [11], and output-sensitive convex hull construction [23, 8]. <p> Is there a reduction from hyperplane queries to halfspace queries that only increases the dimension by a constant factor (preferably two)? Finally, can our techniques be applied to other closely related problems, such as linear programming queries [23, 7] and ray shooting queries <ref> [2, 12, 24, 27] </ref>? Acknowledgments I thank Pankaj Agarwal for suggesting this problem for study.
Reference: [13] <author> B. Chazelle, L. J. Guibas, and D. T. Lee. </author> <title> The power of geometric duality. </title> <journal> BIT 25 </journal> <pages> 76-90, </pages> <year> 1985. </year>
Reference-contexts: The best known halfspace counting data structure requires roughly (n d ) space to achieve logarithmic query time [10, 25]; whereas, the same query time can be achieved Space Preprocessing Query Time Source d = 2; 3 O (n) O (n log n) O (log n) <ref> [13, 3, 16] </ref> O (n) O (n 1+" ) O (n 1-1=bd=2c 2 O (log fl n) ) [22] O (n) O (n log n) O (n 1-1=bd=2c polylog n) [27] n s n bd=2c O (s polylog n) O ((n polylog n)=s 1=bd=2c ) [27] Table 2.
Reference: [14] <author> B. Chazelle and B. Rosenberg. </author> <title> Simplex range reporting on a pointer machine. </title> <journal> Comput. Geom. Theory Appl. </journal> <volume> 5 </volume> <pages> 237-247, </pages> <year> 1996. </year>
Reference-contexts: If the query range is empty, we perform no additions; conversely, if we perform even a single addition, the query range cannot be empty. Similar arguments apply to Tarjan's pointer machine model [30], which has been used to derive output-sensitive lower bounds for range reporting problems <ref> [14] </ref>. In fact, the only lower bounds previously known for emptiness queries are trivial.
Reference: [15] <author> B. Chazelle. </author> <title> Lower bounds for off-line range searching. </title> <journal> Discrete Comput. Geom. </journal> <volume> 17(1) </volume> <pages> 53-66, </pages> <year> 1997. </year>
Reference-contexts: With high probability, any storage scheme of size s that supports half-space queries in P in time t must satisfy the inequality st d = ((n= log n) d-(d-1)=(d+1) ). Although lower bounds are known for o*ine hyper-plane searching in the semigroup model <ref> [15, 19] </ref>, we are unaware of any previous results for online hyperplane queries. In particular, Chazelle's lower bounds for simplex range searching [9] do not apply when the ranges are hyperplanes.
Reference: [16] <author> D. P. Dobkin and D. G. Kirkpatrick. </author> <title> Determining the separation of preprocessed polyhedra a unified approach. </title> <booktitle> Proc. 17th Internat. Colloq. Automata Lang. Program., </booktitle> <pages> pp. 400-413. </pages> <note> Springer-Verlag, Lecture Notes in Computer Science 443, </note> <year> 1990. </year>
Reference-contexts: The best known halfspace counting data structure requires roughly (n d ) space to achieve logarithmic query time [10, 25]; whereas, the same query time can be achieved Space Preprocessing Query Time Source d = 2; 3 O (n) O (n log n) O (log n) <ref> [13, 3, 16] </ref> O (n) O (n 1+" ) O (n 1-1=bd=2c 2 O (log fl n) ) [22] O (n) O (n log n) O (n 1-1=bd=2c polylog n) [27] n s n bd=2c O (s polylog n) O ((n polylog n)=s 1=bd=2c ) [27] Table 2.
Reference: [17] <author> R. Dwyer and W. Eddy. </author> <title> Maximal empty ellipsoids. </title> <journal> Internat. J. Comput. Geom. Appl. </journal> <volume> 6 </volume> <pages> 169-186, </pages> <year> 1996. </year>
Reference-contexts: In this section, we derive lower bounds on the complexity of halfspace emptiness queries. To prove our results, we use the following reduction argument to transform hyperplane queries into halfspace queries in a higher-dimensional space. (A similar transformation is described in <ref> [17] </ref>.) Define the function d : IR d+1 ! IR ( d+2 2 ) as follows: d (x 0 ; x 1 ; : : : ; x d ) = 0 ; x 2 d ; 2 x 0 x 1 ; 2 x 0 x 2 ; : :
Reference: [18] <author> J. Erickson. </author> <title> New lower bounds for halfspace emptiness. </title> <booktitle> Proc. 37th Annu. IEEE Sympos. Found. Com-put. Sci., </booktitle> <pages> pp. 472-481, </pages> <year> 1996. </year>
Reference-contexts: Our model is powerful enough to describe most, if not all 1 , known data structures for these problems. Partition graphs have been previously used to study o*ine range searching problems such as Hopcroft's point-line incidence problem <ref> [19, 18] </ref>. We summarize our results below. In each of these results and throughout the paper, s denotes space, p denotes preprocessing time, and t denotes worst-case query time. <p> Thus, results of Bronnimann, Chazelle, and Pach [6] immediately imply that st d = ((n= log n) d-(d-1)=(d+1) ). This lower bound applies with high probability to a randomly generated set of points. * Lower bounds on the complexity of Hopcroft's point-hyperplane incidence problem <ref> [19, 18] </ref> imply the worst case bounds pt (d+2)(d-1)=2 = (n d ) and pt 2=(d-1) = (n (d+2)=d ). These lower bounds match known upper bounds up to polylogarith-mic factors when d = 2, p = O (n polylog n), or t = O (polylog n) [21, 25]. <p> These tradeoffs follow from o*ine lower bounds for Hopcroft's problem and its generalizations in an o*ine model of computation based on partition graphs <ref> [19, 18] </ref>. A partitioning algorithm, given a set of points and hyper-planes as input, constructs a partition graph, preprocesses the points, and queries all the hyperplanes (or equivalently, preprocesses the hyperplanes and queries the points). Theorem 4.7. <p> When d = 3, these lower bounds hold for arbitrary partition graphs. Proof: The tradeoffs follow from the o*ine lower bound (n 1-2=d (d+1) m 2=(d+1) + n 2=(d+1) m 1-2=d (d+1) ), es tablished in [19] for d = 3 and in <ref> [18] </ref> for d &gt; 3, using exactly the same argument as Theorem 4.7. fl Although in general these bounds are far from optimal, there are two interesting special cases that match known upper bounds up to polylogarithmic factors. Corollary 4.9. <p> Marginally better lower bounds can be obtained in dimensions 14 (!) and higher, using the same arguments as in Theorem 4.8, using the lower bounds for o*ine halfspace emptiness established in <ref> [18] </ref>. However, since these lower bounds are far from optimal, we omit further details. <p> Our space-time tradeoffs derive from lower bounds for halfspace queries in the semigroup arithmetic model [6], and our preprocessing-query tradeoffs follow from lower bounds for o*ine range searching problems such as Hopcroft's problem <ref> [19, 18] </ref>. Any improvements to those lower bounds would improve our results as well. The best known data structures for d-dimensional hyperplane emptiness queries and 2d- or (2d + 1)- dimensional halfspace emptiness queries have the same resource bounds.
Reference: [19] <author> J. Erickson. </author> <title> New lower bounds for Hopcroft's problem. </title> <journal> Discrete Comput. Geom. </journal> <volume> 16 </volume> <pages> 389-418, </pages> <year> 1996. </year>
Reference-contexts: Our model is powerful enough to describe most, if not all 1 , known data structures for these problems. Partition graphs have been previously used to study o*ine range searching problems such as Hopcroft's point-line incidence problem <ref> [19, 18] </ref>. We summarize our results below. In each of these results and throughout the paper, s denotes space, p denotes preprocessing time, and t denotes worst-case query time. <p> Thus, results of Bronnimann, Chazelle, and Pach [6] immediately imply that st d = ((n= log n) d-(d-1)=(d+1) ). This lower bound applies with high probability to a randomly generated set of points. * Lower bounds on the complexity of Hopcroft's point-hyperplane incidence problem <ref> [19, 18] </ref> imply the worst case bounds pt (d+2)(d-1)=2 = (n d ) and pt 2=(d-1) = (n (d+2)=d ). These lower bounds match known upper bounds up to polylogarith-mic factors when d = 2, p = O (n polylog n), or t = O (polylog n) [21, 25]. <p> Lower bounds in the semigroup arithmetic model imply lower bounds for counting queries in the partition graph model. Thus, any partition graph that 1 Difficulties in modeling range searching data structures as partition graphs are discussed in <ref> [19, Section 3.5] </ref>. supports halfspace counting queries satisfies st d = ((n= log n) d-(d-1)=(d+1) ). We also derive the lower bound st d (d+1)=2 = (n d ) for hyperplane queries in the semigroup model, and thus for hyperplane counting queries in the partition graph model as well. <p> With high probability, any storage scheme of size s that supports half-space queries in P in time t must satisfy the inequality st d = ((n= log n) d-(d-1)=(d+1) ). Although lower bounds are known for o*ine hyper-plane searching in the semigroup model <ref> [15, 19] </ref>, we are unaware of any previous results for online hyperplane queries. In particular, Chazelle's lower bounds for simplex range searching [9] do not apply when the ranges are hyperplanes. <p> The two-dimensional lower bound follows from a construction of n points and s + 1 lines with (n 2=3 s 2=3 ) incidences discovered by Erd-os; see [20] or [28, p. 177]. The higher-dimensional results follow from a natural generalization of the Erd-os construction to higher dimensions <ref> [19, Lemmas 3.5 and 3.10] </ref>. We omit further details from this extended abstract. fl 3 Partition Graphs A partition graph is a directed acyclic (multi-)graph, with one source, called the root, and several sinks, called leaves. <p> These tradeoffs follow from o*ine lower bounds for Hopcroft's problem and its generalizations in an o*ine model of computation based on partition graphs <ref> [19, 18] </ref>. A partitioning algorithm, given a set of points and hyper-planes as input, constructs a partition graph, preprocesses the points, and queries all the hyperplanes (or equivalently, preprocesses the hyperplanes and queries the points). Theorem 4.7. <p> There is a set of n points and m lines such that for any partition graph, the total time required to preprocess the n points and correctly answer the m line queries is at least ffn 2=3 m 2=3 = ffc 2=3 p for some positive constant ff <ref> [19] </ref>. If we choose c = (2=ff) 3=2 , the total query time is at least p. Thus, at least one query requires time at least p=m = (n=p 1=2 ). fl Using similar techniques, we can improve this lower bound slightly in three or more dimensions. Theorem 4.8. <p> When d = 3, these lower bounds hold for arbitrary partition graphs. Proof: The tradeoffs follow from the o*ine lower bound (n 1-2=d (d+1) m 2=(d+1) + n 2=(d+1) m 1-2=d (d+1) ), es tablished in <ref> [19] </ref> for d = 3 and in [18] for d &gt; 3, using exactly the same argument as Theorem 4.7. fl Although in general these bounds are far from optimal, there are two interesting special cases that match known upper bounds up to polylogarithmic factors. Corollary 4.9. <p> Our space-time tradeoffs derive from lower bounds for halfspace queries in the semigroup arithmetic model [6], and our preprocessing-query tradeoffs follow from lower bounds for o*ine range searching problems such as Hopcroft's problem <ref> [19, 18] </ref>. Any improvements to those lower bounds would improve our results as well. The best known data structures for d-dimensional hyperplane emptiness queries and 2d- or (2d + 1)- dimensional halfspace emptiness queries have the same resource bounds.
Reference: [20] <author> M. L. Fredman. </author> <title> Lower bounds on the complexity of some optimal data structures. </title> <journal> SIAM J. Comput. </journal> <volume> 10 </volume> <pages> 1-10, </pages> <year> 1981. </year>
Reference-contexts: Most previous range searching lower bounds are presented in the so-called semigroup arithmetic model, originally introduced by Fredman <ref> [20] </ref> and later refined by Yao [31]. In this model, the points are given weights from an additive semigroup, and the goal of a range query is to determine the total weight of the points in a query region. <p> The two-dimensional lower bound follows from a construction of n points and s + 1 lines with (n 2=3 s 2=3 ) incidences discovered by Erd-os; see <ref> [20] </ref> or [28, p. 177]. The higher-dimensional results follow from a natural generalization of the Erd-os construction to higher dimensions [19, Lemmas 3.5 and 3.10].
Reference: [21] <author> J. Matousek. </author> <title> Efficient partition trees. </title> <journal> Discrete Com-put. Geom. </journal> <volume> 8 </volume> <pages> 315-334, </pages> <year> 1992. </year>
Reference-contexts: Space Preprocessing Query Time Source O (n d = log d n) O (n d = log d-" n) O (log n) [10, 25] O (n) O (n log n) O (n 1-1=d polylog n) <ref> [21] </ref> n s n d = log d n O (n 1+" + s log " n) O (n=s 1=d ) [10, 25] Table 1. Best known upper bounds for hyperplane emptiness queries. <p> These lower bounds match known upper bounds up to polylogarith-mic factors when d = 2, p = O (n polylog n), or t = O (polylog n) <ref> [21, 25] </ref>. These results require restrictions on the partition graphs when d 4. All of the previous lower bounds also apply to hy-perplane and halfspace counting queries in IR d , and to halfspace emptiness queries in IR d (d+3)=2 under some restrictions on the partition graphs.
Reference: [22] <author> J. Matousek. </author> <title> Reporting points in halfspaces. </title> <journal> Comput. Geom. Theory Appl. </journal> <volume> 2(3) </volume> <pages> 169-186, </pages> <year> 1992. </year>
Reference-contexts: achieve logarithmic query time [10, 25]; whereas, the same query time can be achieved Space Preprocessing Query Time Source d = 2; 3 O (n) O (n log n) O (log n) [13, 3, 16] O (n) O (n 1+" ) O (n 1-1=bd=2c 2 O (log fl n) ) <ref> [22] </ref> O (n) O (n log n) O (n 1-1=bd=2c polylog n) [27] n s n bd=2c O (s polylog n) O ((n polylog n)=s 1=bd=2c ) [27] Table 2.
Reference: [23] <author> J. Matousek. </author> <title> Linear optimization queries. </title> <journal> J. </journal> <volume> Algorithms 14 </volume> <pages> 432-448, </pages> <year> 1993. </year>
Reference-contexts: S. Army Research Office under grant DAAH04-96-1-0013. and halfspace emptiness queries. Emptiness query data structures are used to solve several geometric problems, including point location [12], ray shooting [2, 12, 24, 27], nearest and farthest neighbor queries [2], linear programming queries <ref> [23, 7] </ref>, depth ordering [5], collision detection [11], and output-sensitive convex hull construction [23, 8]. Most previous range searching lower bounds are presented in the so-called semigroup arithmetic model, originally introduced by Fredman [20] and later refined by Yao [31]. <p> Emptiness query data structures are used to solve several geometric problems, including point location [12], ray shooting [2, 12, 24, 27], nearest and farthest neighbor queries [2], linear programming queries [23, 7], depth ordering [5], collision detection [11], and output-sensitive convex hull construction <ref> [23, 8] </ref>. Most previous range searching lower bounds are presented in the so-called semigroup arithmetic model, originally introduced by Fredman [20] and later refined by Yao [31]. <p> Is there a reduction from hyperplane queries to halfspace queries that only increases the dimension by a constant factor (preferably two)? Finally, can our techniques be applied to other closely related problems, such as linear programming queries <ref> [23, 7] </ref> and ray shooting queries [2, 12, 24, 27]? Acknowledgments I thank Pankaj Agarwal for suggesting this problem for study.
Reference: [24] <author> J. Matousek. </author> <title> On vertical ray shooting in arrangements. </title> <journal> Comput. Geom. Theory Appl. </journal> <volume> 2(5) </volume> <pages> 279-285, </pages> <month> Mar. </month> <year> 1993. </year>
Reference-contexts: This work was also supported by the National Science Foundation under grant DMS-9627683 and by the U. S. Army Research Office under grant DAAH04-96-1-0013. and halfspace emptiness queries. Emptiness query data structures are used to solve several geometric problems, including point location [12], ray shooting <ref> [2, 12, 24, 27] </ref>, nearest and farthest neighbor queries [2], linear programming queries [23, 7], depth ordering [5], collision detection [11], and output-sensitive convex hull construction [23, 8]. <p> Is there a reduction from hyperplane queries to halfspace queries that only increases the dimension by a constant factor (preferably two)? Finally, can our techniques be applied to other closely related problems, such as linear programming queries [23, 7] and ray shooting queries <ref> [2, 12, 24, 27] </ref>? Acknowledgments I thank Pankaj Agarwal for suggesting this problem for study.
Reference: [25] <author> J. Matousek. </author> <title> Range searching with efficient hierarchical cuttings. </title> <journal> Discrete Comput. Geom. </journal> <volume> 10(2) </volume> <pages> 157-182, </pages> <year> 1993. </year>
Reference-contexts: Space Preprocessing Query Time Source O (n d = log d n) O (n d = log d-" n) O (log n) <ref> [10, 25] </ref> O (n) O (n log n) O (n 1-1=d polylog n) [21] n s n d = log d n O (n 1+" + s log " n) O (n=s 1=d ) [10, 25] Table 1. Best known upper bounds for hyperplane emptiness queries. <p> (n d = log d n) O (n d = log d-" n) O (log n) <ref> [10, 25] </ref> O (n) O (n log n) O (n 1-1=d polylog n) [21] n s n d = log d n O (n 1+" + s log " n) O (n=s 1=d ) [10, 25] Table 1. Best known upper bounds for hyperplane emptiness queries. Our new lower bounds apply to a general class of geometric range query data structures called partition graphs. Informally, a partition graph is a directed acyclic graph that describes a recursive decomposition of space. <p> These lower bounds match known upper bounds up to polylogarith-mic factors when d = 2, p = O (n polylog n), or t = O (polylog n) <ref> [21, 25] </ref>. These results require restrictions on the partition graphs when d 4. All of the previous lower bounds also apply to hy-perplane and halfspace counting queries in IR d , and to halfspace emptiness queries in IR d (d+3)=2 under some restrictions on the partition graphs. <p> The situation is entirely different for halfspace queries. The best known halfspace counting data structure requires roughly (n d ) space to achieve logarithmic query time <ref> [10, 25] </ref>; whereas, the same query time can be achieved Space Preprocessing Query Time Source d = 2; 3 O (n) O (n log n) O (log n) [13, 3, 16] O (n) O (n 1+" ) O (n 1-1=bd=2c 2 O (log fl n) ) [22] O (n) O (n <p> The lower bounds we developed for counting queries actually apply to any type of query where the points in the query range are required as the union of several subsets. For example, simplex range searching data structures are typically constructed by composing several levels of halfspace "counting" data structures <ref> [25] </ref>. To answer a query for the intersection of k halfspaces, the points in the first halfspace are extracted as the (typically disjoint) union of several subsets, and then a (k - 1)-halfspace query is performed on each subset. <p> We conjecture that the correct space-time tradeoffs are st d = fi (n d ) for hyper-planes and st bd=2c = fi (n bd=2c ) for halfspaces. Since these bounds are achieved by current algorithms| exactly for hyperplanes <ref> [25] </ref>, within polylogarithmic factors for halfspaces [27]|the only way to prove our conjecture is to improve the lower bounds.
Reference: [26] <author> J. Matousek. </author> <title> Geometric range searching. </title> <journal> ACM Com-put. Surv. </journal> <volume> 26 </volume> <pages> 421-461, </pages> <year> 1994. </year>
Reference-contexts: In each of these results and throughout the paper, s denotes space, p denotes preprocessing time, and t denotes worst-case query time. For comparison, the best known upper bounds are listed in Table 1. (For a review of range searching techniques and results, see the surveys by Ma-tousek <ref> [26] </ref> and Agarwal [1].) * s = (n), p = (n log n), and t = (log n). * Any partition graph that supports hyperplane emptiness queries implicitly defines a halfspace range query data structure in the Fredman/Yao semigroup arithmetic model, with the same time and space bounds.
Reference: [27] <author> J. Matousek and O. Schwarzkopf. </author> <title> On ray shooting in convex polytopes. </title> <journal> Discrete Comput. Geom. </journal> <volume> 10(2) </volume> <pages> 215-232, </pages> <year> 1993. </year>
Reference-contexts: This work was also supported by the National Science Foundation under grant DMS-9627683 and by the U. S. Army Research Office under grant DAAH04-96-1-0013. and halfspace emptiness queries. Emptiness query data structures are used to solve several geometric problems, including point location [12], ray shooting <ref> [2, 12, 24, 27] </ref>, nearest and farthest neighbor queries [2], linear programming queries [23, 7], depth ordering [5], collision detection [11], and output-sensitive convex hull construction [23, 8]. <p> be achieved Space Preprocessing Query Time Source d = 2; 3 O (n) O (n log n) O (log n) [13, 3, 16] O (n) O (n 1+" ) O (n 1-1=bd=2c 2 O (log fl n) ) [22] O (n) O (n log n) O (n 1-1=bd=2c polylog n) <ref> [27] </ref> n s n bd=2c O (s polylog n) O ((n polylog n)=s 1=bd=2c ) [27] Table 2. Best known upper bounds for halfspace emptiness queries. with o (n bd=2c ) space if we only want to know whether the halfspace is empty [27]. <p> log n) O (log n) [13, 3, 16] O (n) O (n 1+" ) O (n 1-1=bd=2c 2 O (log fl n) ) [22] O (n) O (n log n) O (n 1-1=bd=2c polylog n) <ref> [27] </ref> n s n bd=2c O (s polylog n) O ((n polylog n)=s 1=bd=2c ) [27] Table 2. Best known upper bounds for halfspace emptiness queries. with o (n bd=2c ) space if we only want to know whether the halfspace is empty [27]. Table 2 lists the resource requirements for the best known halfspace emptiness data structures. <p> log n) O (n 1-1=bd=2c polylog n) <ref> [27] </ref> n s n bd=2c O (s polylog n) O ((n polylog n)=s 1=bd=2c ) [27] Table 2. Best known upper bounds for halfspace emptiness queries. with o (n bd=2c ) space if we only want to know whether the halfspace is empty [27]. Table 2 lists the resource requirements for the best known halfspace emptiness data structures. In this section, we derive lower bounds on the complexity of halfspace emptiness queries. <p> Is there a reduction from hyperplane queries to halfspace queries that only increases the dimension by a constant factor (preferably two)? Finally, can our techniques be applied to other closely related problems, such as linear programming queries [23, 7] and ray shooting queries <ref> [2, 12, 24, 27] </ref>? Acknowledgments I thank Pankaj Agarwal for suggesting this problem for study.
Reference: [28] <author> J. Pach and P. K. Agarwal. </author> <title> Combinatorial Geometry. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, NY, </address> <year> 1995. </year>
Reference-contexts: The two-dimensional lower bound follows from a construction of n points and s + 1 lines with (n 2=3 s 2=3 ) incidences discovered by Erd-os; see [20] or <ref> [28, p. 177] </ref>. The higher-dimensional results follow from a natural generalization of the Erd-os construction to higher dimensions [19, Lemmas 3.5 and 3.10].
Reference: [29] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: The size of any range searching data structure must be (n), since it must store each of the points, and the query time must be at least (log n) in any reasonable model of computation (such as algebraic computation trees [4] or real RAMs <ref> [29] </ref>).
Reference: [30] <author> R. E. Tarjan. </author> <title> A class of algorithms which require nonlinear time to maintain disjoint sets. </title> <journal> J. Comput. Syst. Sci. </journal> <volume> 18 </volume> <pages> 110-127, </pages> <year> 1979. </year>
Reference-contexts: Unfortunately, the semigroup model cannot be used to study the complexity of emptiness queries. If the query range is empty, we perform no additions; conversely, if we perform even a single addition, the query range cannot be empty. Similar arguments apply to Tarjan's pointer machine model <ref> [30] </ref>, which has been used to derive output-sensitive lower bounds for range reporting problems [14]. In fact, the only lower bounds previously known for emptiness queries are trivial.
Reference: [31] <author> A. C. Yao. </author> <title> On the complexity of maintaining partial sums. </title> <journal> SIAM J. Comput. </journal> <volume> 14 </volume> <pages> 277-288, </pages> <year> 1985. </year>
Reference-contexts: Most previous range searching lower bounds are presented in the so-called semigroup arithmetic model, originally introduced by Fredman [20] and later refined by Yao <ref> [31] </ref>. In this model, the points are given weights from an additive semigroup, and the goal of a range query is to determine the total weight of the points in a query region.
References-found: 31

