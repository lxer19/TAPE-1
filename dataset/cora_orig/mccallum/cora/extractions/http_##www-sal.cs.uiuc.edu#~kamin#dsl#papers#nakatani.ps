URL: http://www-sal.cs.uiuc.edu/~kamin/dsl/papers/nakatani.ps
Refering-URL: http://www-sal.cs.uiuc.edu/~kamin/dsl/index.html
Root-URL: http://www.cs.uiuc.edu
Email: lhn@research.bell-labs.com  jones@research.att.com  
Title: Jargons and Infocentrism  
Author: Lloyd H. Nakatani Mark A. Jones 
Address: Murray Hill, NJ 07974 USA  Murray Hill, NJ 07974 USA  
Affiliation: Bell Labs, Lucent Technologies  AT&T Labs  
Abstract: We have been making and using a new breed of Domain-Specific Languages (DSLs) called jargons for several years, and our experiences foretokens a bright future for DSLs. In our view, the primary issues for achieving greater productivity in software by means of DSLs are abstraction, collaboration, and information reuse. High-level, domain-specific abstractions are expressed with custom-made, information modeling jargons that are easily made by a domain expert with modest programming skills using our InfoWiz technology. Collaboration among DSLs is possible with jargons because their design make them interoperable in principle, and coordinated design make them interoperable in practice. This stands in stark contrast to the Tower of Babel phenomenon experienced with conventional DSLs. Information reuse occurs when information already modeled in a jargon is processed with different definitions of the jargon semantics. Jargons play a central role in a new programming paradigm called infocentrism that realizes synergy between information modeling languages and programming languages. Our success with jargons on a wide variety of real projects in AT&T and Lucent raises many fundamental questions about DSLs and computer languages more generally. What is the role of syntax and semantics in the design of a language? What makes languages interoperable? What is the relationship between different kinds of computer languages? What are the implications of languages with interchangeable semantics? Jargons provide some insight into these issues.
Abstract-found: 1
Intro-found: 1
Reference: <author> Aho, A.V., Kernighan, B.W. & Weinberger, P.J. </author> <title> The AWK Programming Language. </title> <address> New York: </address> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: The application semantics of a jargon are thus expressed as a collection of cooperating actions which carry out domain-specific computations on the information within the scope of the expressions to which they are bound. In some ways, this information driven style of programming is reminiscent of awk's <ref> (Aho, Kernighan & Weinberger, 1988) </ref> pattern-directed actions. InfoWiz, however, is capable of easily processing information with a much richer structure than awk, which has a fairly restricted two-dimensional view of data (newline-separated records and delimiter-separated fields), From a practical point of view, InfoWiz makes jargons and applications easy to create.
Reference: <author> Bentley, J.L. </author> <title> Little Languages for Pictures in Awk. </title> <journal> AT&T Technical Journal. July-August 1989, </journal> <volume> 68, </volume> <pages> pp. 21-32. </pages>
Reference-contexts: Of course, issues of type-compatibility between the actions arise, but the experience is similar to writing spreadsheet formulas using a library of built-in functions. Finally, the value of collaboration through composition should not be underestimated. Reuse of component subjargons "little languages", to use Bentley's term <ref> (Bentley, 1989) </ref> cuts down the time and effort to create full-featured jargons. In particular, we have composed the Flow jargon with a number of other jargons to add a dash of proceduralism where required.
Reference: <author> Goldfarb, </author> <title> C.F. The SGML Handbook. </title> <publisher> Oxford, </publisher> <address> England: </address> <publisher> Clarendon Press, </publisher> <year> 1990. </year>
Reference-contexts: Cut into bars while warm. ;3 Roll in confectioners' sugar if desired. For variety, leave some plain and sugar others. Store in a tightly closed container. Although WizTalk includes many important information modeling features, another language of comparable expressiveness could be substituted. SGML <ref> (Goldfarb, 1990) </ref> is an obvious candidate, especially considering its heritage as a language for representing structured information for different domains.
Reference: <author> Johnson, S.C. & Sethi, R. </author> <title> yacc: A Parser Generator. </title> <editor> Anonymous (Ed.) </editor> <booktitle> Unix Research System Papers, Tenth Edition. </booktitle> <address> Murray Hill, NJ: </address> <institution> AT&T Bell Laboratories, </institution> <year> 1990. </year>
Reference-contexts: With InfoWiz, it isn't necessary to be a specialist in programming language design and implementation to make one, as we would if tools such as lex (Lesk & Schmidt, 1990) and yacc <ref> (Johnson & Sethi, 1990) </ref> were used to make jargons. A domain expert who brings a user's perspective to the task is likely to make a better jargon than a programming language expert who is unskilled in the application domain.
Reference: <author> Lesk, M.E. & Schmidt, E. </author> <title> Lex A Lexical Analyzer Generator. </title> <editor> Anonymous (Ed.) </editor> <booktitle> Unix Research System Papers, Tenth Edition. </booktitle> <address> Murray Hill, NJ: </address> <institution> AT&T Bell Laboratories, </institution> <year> 1990. </year>
Reference-contexts: Jargons are Easy to Make A simple jargon can be made in days, a complex one in weeks. With InfoWiz, it isn't necessary to be a specialist in programming language design and implementation to make one, as we would if tools such as lex <ref> (Lesk & Schmidt, 1990) </ref> and yacc (Johnson & Sethi, 1990) were used to make jargons. A domain expert who brings a user's perspective to the task is likely to make a better jargon than a programming language expert who is unskilled in the application domain.
Reference: <author> Shang, </author> <title> D.L. Internet Programming. </title> <address> http://www.sigs.com/publications/docs/oc/9603/oc9603.c.shang.html, March 1996 Simonyi, C. </address> <note> The Intentional Programming Overview. http://www.research.microsoft.com/research/ip/overview/digiconv.htm, July 16, </note> <year> 1996 </year> <month> Sperberg-McQueen, </month> <title> C.M. & Goldstein, R.F. HTML to the Max: A Manifesto for Adding SGML Intelligence to the World-Wide Web. </title> <note> http://www.ncsa.uiuc.edu/SDG/IT94/Proceedings/Autools/sperberg-mcqueen/sperberg.html, October 1994 </note>
Reference-contexts: Each wizer contains a set of actions that define the application semantics of jargon expressions. The interpreter is like an almost empty vessel into which the application semantics of domain-specific expressions can be poured. This is in sympathy with Shang's minimalist Transframe language <ref> (Shang, 1996) </ref>, which provides a framework for incorporating user-defined extensions. When jargons X and Y have to collaborate, the interpreter integrates the actions of both (for a particular application), effectively and automatically creating a customized interpreter.
References-found: 6

