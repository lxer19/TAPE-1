URL: http://www.cse.ucsc.edu/research/ccrg/publications/shree.asilomar.ps.gz
Refering-URL: http://www.cse.ucsc.edu/research/ccrg/publications.html
Root-URL: http://www.cse.ucsc.edu
Title: A More Efficient Path-Finding Algorithm  
Author: Shree Murthy and J.J. Garcia-Luna-Aceves 
Address: Santa Cruz, CA 95064  
Affiliation: Baskin Center for Computer Engineering and Information Sciences University of California  
Abstract: In this paper, we present a new routing algorithm, which we call path-finding algorithm (PFA). It drastically reduces the possibility of temporary routing loops, which accounts for its fast convergence properties. Like other path-finding algorithms, PFA operates by specifying the second-to-last hop to each destination, in addition to the distance to the destination. A detailed proof of correctness and complexity is presented elsewhere. PFA's performance is compared quantitatively by simulation with DUAL (a loop-free routing algorithm) and an ideal link-state algorithm (ILS). A number of parameters, including the length of the messages and the number of steps required for convergence, are used in the comparison. The simulation results indicate that PFA constitutes a very efficient distance-vector algorithm. It provides about 50% improvement in performance compared to DUAL in terms of the convergence time and the number of updates after single link failures, and provides comparable or better convergence speed and traffic overhead than ILS, with orders of magnitude fewer CPU cycles. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Bertsekas and R. Gallager, </author> <title> Data Networks, Second Ed. </title> <publisher> Prentice Hall, Inc. </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction Routing in today's computer networks and Internet is accomplished by distributed shortest-path routing algorithms. The distributed Bellman-Ford (DBF) algorithm <ref> [1] </ref> has been used in many well known routing protocols. However, DBF takes a long time to converge after link failure or link-cost changes because of bouncing effect and counting-to-infinity problem [5]. Path-finding algorithms can be an attractive alternative to DBF for distributed routing as they eliminate counting-to-infinity problem. <p> In our simulations, packet processing time is kept as zero. Drama's internals ensure that all the packets at a given time are processed before new updates are generated. The performance of PFA has been compared with DUAL and an ideal link state (ILS) algorithm which uses Dijkstra's shortest-path algorithm <ref> [1] </ref> at each node.
Reference: [2] <author> C. Cheng, R. Reley, S. P. R Kumar and J. J. Garcia-Luna-Aceves, </author> <title> "A Loop-Free Extended Bellman-Ford Routing Protocol without Bouncing Effect", </title> <journal> ACM Computer Communications Review, </journal> <volume> 19 (4), </volume> <year> 1989, </year> <month> pp.224-236. </month>
Reference-contexts: In contrast to PFA, which makes a node i check the consistency of predecessor information reported by all its neighbors each time it processes an event involving a neighbor k, all previous path-finding algorithms <ref> [2, 3, 4] </ref> check the consistency of the predecessor only for the neighbor associated with the input event. This unique feature of PFA accounts for its fast con vergence after a single resource failure or recovery as it eliminates more temporary looping situations than previous path-finding algorithms.
Reference: [3] <author> P.A. Humblet, </author> <title> "Another Adaptive Shortest-Path Algorithm", </title> <journal> IEEE Trans. Comm., Vol.39, </journal> <volume> No.6, </volume> <month> June </month> <year> 1991, </year> <month> pp.995-1003. </month>
Reference-contexts: In contrast to PFA, which makes a node i check the consistency of predecessor information reported by all its neighbors each time it processes an event involving a neighbor k, all previous path-finding algorithms <ref> [2, 3, 4] </ref> check the consistency of the predecessor only for the neighbor associated with the input event. This unique feature of PFA accounts for its fast con vergence after a single resource failure or recovery as it eliminates more temporary looping situations than previous path-finding algorithms.
Reference: [4] <author> B. Rajagopalan and M. Faiman, </author> <title> "A Responsive Distributed Shortest-Path Routing Algorithm within Autonomous Systems," </title> <journal> Journal of Inter-networking: Research and Experience, </journal> <volume> Vol. 2, No. 1, </volume> <month> March </month> <year> 1991, </year> <pages> pp. 51-69. </pages>
Reference-contexts: In contrast to PFA, which makes a node i check the consistency of predecessor information reported by all its neighbors each time it processes an event involving a neighbor k, all previous path-finding algorithms <ref> [2, 3, 4] </ref> check the consistency of the predecessor only for the neighbor associated with the input event. This unique feature of PFA accounts for its fast con vergence after a single resource failure or recovery as it eliminates more temporary looping situations than previous path-finding algorithms.
Reference: [5] <author> M.S. Sloman and X. Andriopoulos, </author> <title> "A Routing Algorithm for Interconnected Local Area Networks", </title> <booktitle> Computer Networks and ISDN Systems, </booktitle> <year> 1985, </year> <month> pp.109-130. </month>
Reference-contexts: The distributed Bellman-Ford (DBF) algorithm [1] has been used in many well known routing protocols. However, DBF takes a long time to converge after link failure or link-cost changes because of bouncing effect and counting-to-infinity problem <ref> [5] </ref>. Path-finding algorithms can be an attractive alternative to DBF for distributed routing as they eliminate counting-to-infinity problem. However, the pathfinding algorithms proposed in the past incur substantial temporary loops in the paths specified by the predecessor information before they converge, which leads to slower convergence.
Reference: [6] <author> Shree Murthy, </author> <title> "Design and Analysis of Distributed Routing Algorithms", </title> <type> Masters Thesis, </type> <institution> University of California, Santa Cruz, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: This illustrates how step (2) of PFA helps in the reduction of the formation of temporary loops in the explicit paths. The proofs of correctness, convergence and com plexity of PFA are given elsewhere <ref> [6] </ref>. <p> The simulations were run on several network topologies after a series of tests on smaller topologies for debugging purposes. The results for link and node, failure and recovery for Los-Nettos are presented in Table 1. The results for other network topologies can be found elsewhere <ref> [6] </ref>. PFA has a better overall average performance than ILS after the recovery of a single node or link. The performance of PFA is comparable to ILS after the failure of a single node or a link.
Reference: [7] <author> W. T. Zaumen, </author> <title> "Simulations in Drama", Network Information System Center, </title> <booktitle> SRI International, </booktitle> <address> Menlo Park, California, </address> <month> January </month> <year> 1991. </year>
Reference-contexts: The worst case complexity of PFA has been found to be O (h) for single recovery/failure, h being the height of the tree. 4 Simulation Results To gain insight into the average-case performance of the algorithms, we have developed simulations using an actor-based, discrete-event simulation language called Drama <ref> [7] </ref>, together with a network simulation library. Link failures and recoveries are simulated by sending link status message to the nodes at the end points of the appropriate links.
References-found: 7

