URL: http://www.cs.bu.edu/techreports/93-014-scc-delayed-commit.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: (best@cs.bu.edu)  (bwang@cs.bu.edu)  
Title: Multi-version Speculative Concurrency Control with Delayed Commit  
Author: Azer Bestavros Biao Wang 
Keyword: Real-time systems, Time constraints, Database Management Systems, Concurrency control algorithms, Serializability.  
Date: October 27, 1993  
Address: Boston, MA 02215  
Affiliation: Computer Science Department Boston University  
Abstract: This paper presents an algorithm which extends the relatively new notion of speculative concurrency control by delaying the commitment of transactions, thus allowing other conflicting transactions to continue execution and commit rather than restart. This algorithm propagates uncommitted data to other outstanding transactions thus allowing more speculative schedules to be considered. The algorithm is shown always to find a serializable schedule, and to avoid cascading aborts. Like speculative concurrency control, it considers strictly more schedules than traditional concurrency control algorithms. Further work is needed to determine which of these speculative methods performs better on actual transaction loads. 
Abstract-found: 1
Intro-found: 1
Reference: [Abbo88] <author> Robert Abbott and Hector Garcia-Molina. </author> <title> "Scheduling real-time transactions: A performance evaluation." </title> <booktitle> In Prooceedings of the 14th International Conference on Very Large Data Bases, </booktitle> <address> Los Angeles, Ca, </address> <year> 1988. </year>
Reference-contexts: Thus several versions of the computation can be run, with different time bounds, guaranteeing an upper bound on the time to produce some result. Mena [Mena82] has classified concurrency control algorithms into two classes: optimistic algorithms (e.g. [Hari90b, Hari90a, Huan90, Kim91, Lin90, Son92]) and pessimistic algorithms (e.g. <ref> [Abbo88, Stan88, Huan90, Sha91] </ref>). Bestavros has proposed (in [Best92]) a new approach, Speculative Concurrency Control (SCC), which incorporates redundant computation into concur-rency control algorithms. Speculative concurrency control redundantly executes the same transaction, under different ordering assumptions. The algorithm then determines which ordering to chose, based on the real-time constraints.
Reference: [Abbo92] <author> R. Abbott and H. Garcia-Molina. </author> <title> "Scheduling real-time transaction: A performance evaluation." </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 17(3) </volume> <pages> 513-560, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: 1 Introduction A real-time database management system is a combination of a conventional database management system and a real-time system. Like a database system, it has to process transactions and guarantee database consistency. Furthermore, it has to operate in real-time, satisfying time constraints on each transaction <ref> [Abbo92] </ref>. For example, consider a database system to monitor the stock market. It must contain data such as current stock prices, trading trends, and other economic indices.
Reference: [Agra87] <author> R. Agrawal, M. Carey, and M. Linvy. </author> <title> "Concurency control performance modeling: Alternatives and implications." </title> <journal> ACM Transaction on Database Systems, </journal> <volume> 12(4), </volume> <month> December </month> <year> 1987. </year>
Reference-contexts: In section 4, we prove that MSCC-DC maintains database consistency, avoids unbounded cascading aborts, and show some analysis of the algorithm. Finally, in section 5, we conclude this paper, and describe our future research. 2 Previous Work In a conventional DBMS, Agrawal has concluded in <ref> [Agra87] </ref> that pessimistic locking protocols, due to their conservation of resources, perform better than optimistic techniques. Pessimistic two-phase locking algorithms detect potential conflicts as they occur. However, they may suffer possible unbounded waiting due to blocking.
Reference: [Best92] <author> Azer Bestavros. </author> <title> "Speculative Concurrency Control: A position statement." </title> <type> Technical Report TR-92-016, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: Mena [Mena82] has classified concurrency control algorithms into two classes: optimistic algorithms (e.g. [Hari90b, Hari90a, Huan90, Kim91, Lin90, Son92]) and pessimistic algorithms (e.g. [Abbo88, Stan88, Huan90, Sha91]). Bestavros has proposed (in <ref> [Best92] </ref>) a new approach, Speculative Concurrency Control (SCC), which incorporates redundant computation into concur-rency control algorithms. Speculative concurrency control redundantly executes the same transaction, under different ordering assumptions. The algorithm then determines which ordering to chose, based on the real-time constraints. <p> By comparison, in single threaded implementations, a restart really must begin the entire transaction again with less time remaining before the deadline. Redundant 2 transaction execution has not been very widely used in today's commercial database applications because of the cost factor. Bestavros has argued in <ref> [Best92] </ref> that for many real-time systems this cost is justified by their critical nature. Furthermore, as processors and memory become cheaper, the availability of such resources is more realistic. Hence, redundant computation can be a very powerful technique in real-time DBMSs. <p> Thus, the validating transaction is always guaranteed to commit. The broadcast commit method detects conflicts earlier than the classical OCC algorithm resulting in earlier restart. SCC combines the advantage of both optimistic and pessimistic schemes while avoiding their disadvantages <ref> [Best92] </ref>. It goes one step further in utilizing information about conflicts. Instead of waiting for a potential consistency threat to materialize and then taking a corrective measure, SCC uses redundant resources to start speculating on corrective measures as soon as conflict in question develops.
Reference: [Hari90a] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Linvy. </author> <title> "Dynamic real-time optimistic concurrency control." </title> <booktitle> In Prooceedings of the 11th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: Thus several versions of the computation can be run, with different time bounds, guaranteeing an upper bound on the time to produce some result. Mena [Mena82] has classified concurrency control algorithms into two classes: optimistic algorithms (e.g. <ref> [Hari90b, Hari90a, Huan90, Kim91, Lin90, Son92] </ref>) and pessimistic algorithms (e.g. [Abbo88, Stan88, Huan90, Sha91]). Bestavros has proposed (in [Best92]) a new approach, Speculative Concurrency Control (SCC), which incorporates redundant computation into concur-rency control algorithms. Speculative concurrency control redundantly executes the same transaction, under different ordering assumptions. <p> None of the transaction can proceed (deadlock). Furthermore, the resource conservation nature of pessimistic algorithms becomes a draw back in the real-time environment where meeting the time-constraint has a much higher priority than saving resources. In <ref> [Hari90b, Hari90a] </ref>, Haritsa, Carey and Linvy showed that for a real-time DBMS with firm deadlines (transactions which misses the deadlines are immediately discarded), optimistic algorithms outperforms the pessimistic schemes.
Reference: [Hari90b] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Linvy. </author> <title> "On being optimistic about real-time constraints." </title> <booktitle> In Prooceedings of the 1990 ACM PODS Symposium, </booktitle> <month> April </month> <year> 1990. </year>
Reference-contexts: Thus several versions of the computation can be run, with different time bounds, guaranteeing an upper bound on the time to produce some result. Mena [Mena82] has classified concurrency control algorithms into two classes: optimistic algorithms (e.g. <ref> [Hari90b, Hari90a, Huan90, Kim91, Lin90, Son92] </ref>) and pessimistic algorithms (e.g. [Abbo88, Stan88, Huan90, Sha91]). Bestavros has proposed (in [Best92]) a new approach, Speculative Concurrency Control (SCC), which incorporates redundant computation into concur-rency control algorithms. Speculative concurrency control redundantly executes the same transaction, under different ordering assumptions. <p> None of the transaction can proceed (deadlock). Furthermore, the resource conservation nature of pessimistic algorithms becomes a draw back in the real-time environment where meeting the time-constraint has a much higher priority than saving resources. In <ref> [Hari90b, Hari90a] </ref>, Haritsa, Carey and Linvy showed that for a real-time DBMS with firm deadlines (transactions which misses the deadlines are immediately discarded), optimistic algorithms outperforms the pessimistic schemes. <p> For example, in figure 5, committing T 1 as soon as it finishes validating causes both T 2 and T 3 to abort, and both of them cannot be restarted early enough to meet their deadlines. In <ref> [Hari90b] </ref>, Harista showed that by making a lower priority transaction wait after it finishes validating, the numbers of transaction restarts are reduced, thus increase the number of the transactions meeting their deadlines.
Reference: [Huan90] <author> J. Huang, J. Stankovic, D. Towsley, and K. Ramamritham. </author> <title> "Real-time transaction processing: Design, implementation and performance evaluation." </title> <type> Technical Report COINS TR-90-43, </type> <institution> University of Massachusetts, </institution> <address> Amherst, MA 01003, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: Thus several versions of the computation can be run, with different time bounds, guaranteeing an upper bound on the time to produce some result. Mena [Mena82] has classified concurrency control algorithms into two classes: optimistic algorithms (e.g. <ref> [Hari90b, Hari90a, Huan90, Kim91, Lin90, Son92] </ref>) and pessimistic algorithms (e.g. [Abbo88, Stan88, Huan90, Sha91]). Bestavros has proposed (in [Best92]) a new approach, Speculative Concurrency Control (SCC), which incorporates redundant computation into concur-rency control algorithms. Speculative concurrency control redundantly executes the same transaction, under different ordering assumptions. <p> Thus several versions of the computation can be run, with different time bounds, guaranteeing an upper bound on the time to produce some result. Mena [Mena82] has classified concurrency control algorithms into two classes: optimistic algorithms (e.g. [Hari90b, Hari90a, Huan90, Kim91, Lin90, Son92]) and pessimistic algorithms (e.g. <ref> [Abbo88, Stan88, Huan90, Sha91] </ref>). Bestavros has proposed (in [Best92]) a new approach, Speculative Concurrency Control (SCC), which incorporates redundant computation into concur-rency control algorithms. Speculative concurrency control redundantly executes the same transaction, under different ordering assumptions. The algorithm then determines which ordering to chose, based on the real-time constraints.
Reference: [Kim91] <author> Woosaeng Kim and Jaideep Srivastava. </author> <title> "Enhancing real-time dbms performance with multiver-sion data and priority based disk scheduling." </title> <booktitle> In Prooceedings of the 12th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: Thus several versions of the computation can be run, with different time bounds, guaranteeing an upper bound on the time to produce some result. Mena [Mena82] has classified concurrency control algorithms into two classes: optimistic algorithms (e.g. <ref> [Hari90b, Hari90a, Huan90, Kim91, Lin90, Son92] </ref>) and pessimistic algorithms (e.g. [Abbo88, Stan88, Huan90, Sha91]). Bestavros has proposed (in [Best92]) a new approach, Speculative Concurrency Control (SCC), which incorporates redundant computation into concur-rency control algorithms. Speculative concurrency control redundantly executes the same transaction, under different ordering assumptions.
Reference: [Kung81] <author> H. Kung and John Robinson. </author> <title> "On optimistic methods for concurrency control." </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(2), </volume> <month> June </month> <year> 1981. </year>
Reference-contexts: Thus, optimistic restart-based con-currency control algorithms that allow a higher degree of concurrency become more attractive in real-time DBMS over pessimistic blocking-based algorithms. Classical Optimistic Concurrency Control algorithm <ref> [Kung81] </ref> consists of three stages of execution for a transaction: read, validation, and write. The key stage in the Optimistic Concurrency Control scheme is the validation phase where the fate of the transaction is determined.
Reference: [Lin90] <author> Yi Lin and Sang Son. </author> <title> "Concurrency control in real-time databases by dynamic adjustment of serialization order." </title> <booktitle> In Proceedings of the 11th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: Thus several versions of the computation can be run, with different time bounds, guaranteeing an upper bound on the time to produce some result. Mena [Mena82] has classified concurrency control algorithms into two classes: optimistic algorithms (e.g. <ref> [Hari90b, Hari90a, Huan90, Kim91, Lin90, Son92] </ref>) and pessimistic algorithms (e.g. [Abbo88, Stan88, Huan90, Sha91]). Bestavros has proposed (in [Best92]) a new approach, Speculative Concurrency Control (SCC), which incorporates redundant computation into concur-rency control algorithms. Speculative concurrency control redundantly executes the same transaction, under different ordering assumptions.
Reference: [Mena82] <author> D. Menasce and T. Nakanishi. </author> <title> "Optimistic versus pessimistic concurrency control mechanisms in database management systems." </title> <journal> Information Systems, </journal> <volume> 7(1), </volume> <year> 1982. </year>
Reference-contexts: The major advantage of doing this is that as long as one of the computations finishes successfully, the result is known. Thus several versions of the computation can be run, with different time bounds, guaranteeing an upper bound on the time to produce some result. Mena <ref> [Mena82] </ref> has classified concurrency control algorithms into two classes: optimistic algorithms (e.g. [Hari90b, Hari90a, Huan90, Kim91, Lin90, Son92]) and pessimistic algorithms (e.g. [Abbo88, Stan88, Huan90, Sha91]). Bestavros has proposed (in [Best92]) a new approach, Speculative Concurrency Control (SCC), which incorporates redundant computation into concur-rency control algorithms. <p> One serious problem with optimistic schemes is that conflict resolution is always done by aborting the transaction that is being validated. However, conflicts are not detected until the validation phase, at which time it may be too late to restart. The Broadcast Commit variant (OCC-BC) <ref> [Mena82, Robi82] </ref> of the classical Optimistic Concurrency Control scheme partially remedies this problem. When a transaction commits, it notifies those concurrently running transactions which conflict with it. Those transactions are restarted immediately.
Reference: [Robi82] <author> John Robinson. </author> <title> Design of Concurrency Controls for Transaction Processing Systems. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1982. </year>
Reference-contexts: One serious problem with optimistic schemes is that conflict resolution is always done by aborting the transaction that is being validated. However, conflicts are not detected until the validation phase, at which time it may be too late to restart. The Broadcast Commit variant (OCC-BC) <ref> [Mena82, Robi82] </ref> of the classical Optimistic Concurrency Control scheme partially remedies this problem. When a transaction commits, it notifies those concurrently running transactions which conflict with it. Those transactions are restarted immediately.
Reference: [Sha91] <author> Lui Sha, R. Rajkumar, Sang Son, and Chun-Hyon Chang. </author> <title> "A real-time locking protocol." </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(7) </volume> <pages> 793-800, </pages> <year> 1991. </year>
Reference-contexts: Thus several versions of the computation can be run, with different time bounds, guaranteeing an upper bound on the time to produce some result. Mena [Mena82] has classified concurrency control algorithms into two classes: optimistic algorithms (e.g. [Hari90b, Hari90a, Huan90, Kim91, Lin90, Son92]) and pessimistic algorithms (e.g. <ref> [Abbo88, Stan88, Huan90, Sha91] </ref>). Bestavros has proposed (in [Best92]) a new approach, Speculative Concurrency Control (SCC), which incorporates redundant computation into concur-rency control algorithms. Speculative concurrency control redundantly executes the same transaction, under different ordering assumptions. The algorithm then determines which ordering to chose, based on the real-time constraints.
Reference: [Son92] <author> S. Son, S. Park, and Y. Lin. </author> <title> "An integrated real-time locking protocol." </title> <booktitle> In Prooceedings of the IEEE International Conference on Data Engineering, </booktitle> <address> Tempe, AZ, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: Thus several versions of the computation can be run, with different time bounds, guaranteeing an upper bound on the time to produce some result. Mena [Mena82] has classified concurrency control algorithms into two classes: optimistic algorithms (e.g. <ref> [Hari90b, Hari90a, Huan90, Kim91, Lin90, Son92] </ref>) and pessimistic algorithms (e.g. [Abbo88, Stan88, Huan90, Sha91]). Bestavros has proposed (in [Best92]) a new approach, Speculative Concurrency Control (SCC), which incorporates redundant computation into concur-rency control algorithms. Speculative concurrency control redundantly executes the same transaction, under different ordering assumptions.
Reference: [Stan88] <author> John Stankovic and Wei Zhao. </author> <title> "On real-time transactions." </title> <journal> ACM, SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 4-18, </pages> <year> 1988. </year>
Reference-contexts: Thus several versions of the computation can be run, with different time bounds, guaranteeing an upper bound on the time to produce some result. Mena [Mena82] has classified concurrency control algorithms into two classes: optimistic algorithms (e.g. [Hari90b, Hari90a, Huan90, Kim91, Lin90, Son92]) and pessimistic algorithms (e.g. <ref> [Abbo88, Stan88, Huan90, Sha91] </ref>). Bestavros has proposed (in [Best92]) a new approach, Speculative Concurrency Control (SCC), which incorporates redundant computation into concur-rency control algorithms. Speculative concurrency control redundantly executes the same transaction, under different ordering assumptions. The algorithm then determines which ordering to chose, based on the real-time constraints.
References-found: 15

