URL: http://www.cs.concordia.ca/~faculty/manas/papers/ccece98.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/manas/research/sel-pubs.html
Root-URL: http://www.cs.concordia.ca
Note: IEEE COPYRIGHT NOTICE  
Abstract: c fl1998 IEEE. Personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works must be obtained from the IEEE. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Awad, J. kuusela, and J. Ziegler. </author> <title> Object-Oriented Technology for Real-Time Systems: A Practical Approach using OMT and Fusion. </title> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference-contexts: Unfortunately, in this process, the timeliness aspect is usually disregarded during the development life-cycle. 1.2 Real-Time Design Methods Over the years, many design methods have been proposed for real-time system development, for example, JSD, MASCOT, RTSA, DARTS, CODARTS, HRT-HOOD, and OCTOPUS <ref> [6, 1] </ref>. Most recent design methods (e.g., HRT-HOOD, CODARTS, OCTOPUS) are based on object orientation, for the many advantages it offers in terms of better abstractions, scalability to changes, reuse, etc [4]. <p> Also, as we argue later, the design method provides little guidance in choosing appropriate task-level timing constraints. In contrast to HRT-HOOD, CODARTS and OCTOPUS were designed to handle reactive behavior effectively, and allow an object's behavior to be represented using a finite state machine. Both CODARTS [6] and OCTOPUS <ref> [1] </ref> em-phasise the importance of schedulability analysis and timing predictability, and provide some techniques on how it may be carried out.
Reference: [2] <author> A. Burns and A. Wellings. </author> <title> Real-time Systems: Specification, Verification and Analysis, chapter Advanced Fixed Priority Scheduling, </title> <address> pages 32-65. </address> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference-contexts: to a great extent, and there exist analytical techniques to analyze systems which have (1) aperiodic tasks, albeit with a minimum inter-arrival time, (2) shared resources between tasks, and using a priority inheritance protocol to bound priority inversions, (3) task chains with an end-to-end deadline requirement, and (4) distributed systems <ref> [12, 2] </ref>. The basic technique is to determine the worst-case response time of a task, under the worst case loading scenarios, and then compare it with the deadline. <p> The basic technique is to determine the worst-case response time of a task, under the worst case loading scenarios, and then compare it with the deadline. For many of these models, it is easy to construct the worst-case loading scenario, using the notion of critical instant <ref> [2] </ref>, and using it to determine the worst-case response times. Despite the maturity of real-time scheduling theory, real-time system design typically proceeds independent of the temporal perspective, using various design guidelines such structural cohesion, temporal cohesion, etc. <p> Task Level Timing Attributes: At the lowest level, the timing constraints are expressed in terms of task specific periods, deadlines, and phases. Such constraints are amenable to schedulability analysis, using techniques developed in real-time scheduling theory <ref> [7, 2] </ref>. In general, the performance requirements of a system allow many possibilities for system-level timing constraints (as expressed above), which in-turn allow many possibilities for task-level timing constraints.
Reference: [3] <author> A. Burns and A. J. Wellings. HRT-HOOD: </author> <title> A Design Method for Hard Real-Time. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 6(1) </volume> <pages> 73-114, </pages> <year> 1994. </year>
Reference-contexts: Another recent trend has been that the design methods have started considering the temporal aspects, and incorporating the capability to analyze a design for real-time properties. HRT-HOOD <ref> [3] </ref> was designed for hard real-time systems, and is heavily influenced by the developments in real-time scheduling theory. Its abstractions directly map to the concepts in real-time scheduling theory, thus making the designs analyzable for real-time properties.
Reference: [4] <author> B. Douglass and G. Cernosek. </author> <title> Unified modeling language for real-time systems design. </title> <note> Available at http://www.rational.com. </note>
Reference-contexts: Most recent design methods (e.g., HRT-HOOD, CODARTS, OCTOPUS) are based on object orientation, for the many advantages it offers in terms of better abstractions, scalability to changes, reuse, etc <ref> [4] </ref>. Another recent trend has been that the design methods have started considering the temporal aspects, and incorporating the capability to analyze a design for real-time properties. HRT-HOOD [3] was designed for hard real-time systems, and is heavily influenced by the developments in real-time scheduling theory. <p> One such product is the modeling language "ROOM" (Real-Time Object Oriented Modeling), and its CASE tool "ObjecTime" developed by ObjecTime Inc. The real-time counterpart (UML-RT) of newly emerging standard Unified Modeling Language <ref> [4] </ref> is another effort in the same direction. However, while such tools and methodologies provide extensive support to model and analyze reactive system behavior, they have very limited support for timing and schedulability analysis, required for the hard real-time aspects of a system.
Reference: [5] <author> R. Gerber, S. Hong, and M. Saksena. </author> <title> Guaranteeing real-time requirements with resource-based calibration of periodic processes. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(7) </volume> <pages> 579-592, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: In recent work <ref> [5, 10, 8] </ref>, we have developed a resource-conscious design methodology, which is essentially a set of techniques to systematically allow a designer to reach a set of task-level timing constraints that simultaneously satisfy (1) the performance requirements of the system, and (2) can be implemented, i.e., the set of tasks is <p> Also, given the complexity of the problems, heuristic solutions are often the only choice, allowing for iterations to reach a satisfactory solution. In <ref> [10, 5] </ref>, we proposed a systematic procedure of decomposing system-level end-to-end timing constraints into task-level timing constraints.
Reference: [6] <author> H. Gomaa. </author> <title> Software Design Methods for Concurrent and Real-Time Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1993. </year>
Reference-contexts: Unfortunately, in this process, the timeliness aspect is usually disregarded during the development life-cycle. 1.2 Real-Time Design Methods Over the years, many design methods have been proposed for real-time system development, for example, JSD, MASCOT, RTSA, DARTS, CODARTS, HRT-HOOD, and OCTOPUS <ref> [6, 1] </ref>. Most recent design methods (e.g., HRT-HOOD, CODARTS, OCTOPUS) are based on object orientation, for the many advantages it offers in terms of better abstractions, scalability to changes, reuse, etc [4]. <p> Also, as we argue later, the design method provides little guidance in choosing appropriate task-level timing constraints. In contrast to HRT-HOOD, CODARTS and OCTOPUS were designed to handle reactive behavior effectively, and allow an object's behavior to be represented using a finite state machine. Both CODARTS <ref> [6] </ref> and OCTOPUS [1] em-phasise the importance of schedulability analysis and timing predictability, and provide some techniques on how it may be carried out.
Reference: [7] <author> M. H. Klein, T. Ralya, B. Pollak, R. Obenza, and M. G. Harbour. </author> <title> A Practitioner's Handbook for Real-Time Analysis. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: The timeliness requirements of such time-driven software then correspond to ensuring that given a set of tasks, on a given platform, all tasks can be executed at the specified rates, while meeting the deadlines. In this time-driven context, analytical techniques such as Real-time scheduling theory <ref> [7] </ref> have evolved to provide guidance and assurance that in a given system the timeliness requirements will be met. <p> Task Level Timing Attributes: At the lowest level, the timing constraints are expressed in terms of task specific periods, deadlines, and phases. Such constraints are amenable to schedulability analysis, using techniques developed in real-time scheduling theory <ref> [7, 2] </ref>. In general, the performance requirements of a system allow many possibilities for system-level timing constraints (as expressed above), which in-turn allow many possibilities for task-level timing constraints.
Reference: [8] <author> M. Ryu, S. Hong, and M. Saksena. </author> <title> Streamlining real-time controller design: From performance specifications to end-to-end timing constraints. </title> <booktitle> In Proceedings, IEEE Real-Time Technology and Applications Symposium, </booktitle> <year> 1997. </year>
Reference-contexts: In recent work <ref> [5, 10, 8] </ref>, we have developed a resource-conscious design methodology, which is essentially a set of techniques to systematically allow a designer to reach a set of task-level timing constraints that simultaneously satisfy (1) the performance requirements of the system, and (2) can be implemented, i.e., the set of tasks is <p> However, given a sufficiently accurate mathematical model of the performance requirements and their dependence on task-level timing constraints, it is possible to develop heuristic algorithms that can automate this process. In <ref> [8] </ref>, we presented a heuristic approach that was applied in transforming performance specifications of a CNC control system to task-level timing constraints.
Reference: [9] <author> M. Saksena, P. Freedman, and P. Rodziewicz. </author> <title> Guidelines for automated implementation of executable object oriented models for real-time embedded contol systems. </title> <booktitle> In Proceedings, IEEE Real-Time Systems Symposium, </booktitle> <year> 1997. </year>
Reference-contexts: Often, thus the methods of choice are simulations and testing, an unsatisfactory solution due to the costs and the lack of appropriate feedback when the timeliness requirements are not met. 3.1 Schedulability Analysis of Event-Driven Soft ware In recent work <ref> [9] </ref>, we have developed some results that show that event-driven software can be subjected to schedu-lability analysis as well. There are two key factors that enable this.
Reference: [10] <author> M. Saksena and S. Hong. </author> <title> Resource conscious design of distributed real-time systems: An end-to-end approach. </title> <booktitle> In Proceedings, IEEE International Conference on Engineering of Complex Computer Systems, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: In recent work <ref> [5, 10, 8] </ref>, we have developed a resource-conscious design methodology, which is essentially a set of techniques to systematically allow a designer to reach a set of task-level timing constraints that simultaneously satisfy (1) the performance requirements of the system, and (2) can be implemented, i.e., the set of tasks is <p> Also, given the complexity of the problems, heuristic solutions are often the only choice, allowing for iterations to reach a satisfactory solution. In <ref> [10, 5] </ref>, we proposed a systematic procedure of decomposing system-level end-to-end timing constraints into task-level timing constraints.
Reference: [11] <author> B. Selic and P. Ward. </author> <title> The challenges of real-time software design. </title> <booktitle> Embedded Systems Programming, </booktitle> <pages> pages 66-82, </pages> <month> Oc-tober </month> <year> 1996. </year>
Reference-contexts: The paper highlights the problems with the current design methods, and illustrates some of the recent research work, done by the author in collaboration with various other researchers, aimed at addressing this imbalance. 1.1 Event-Driven and Time-Driven Styles In a recent article entitled The Challenges of Real-Time Software Design <ref> [11] </ref>, Selic and Ward use the words event-driven and time-driven to describe two basic `styles' of real-time software. Time-driven style corresponds to using cyclic activities, triggered by time.
Reference: [12] <author> K. Tindell, A. Burns, and A. Wellings. </author> <title> An extendible approach for analysing fixed priority hard real-time tasks. </title> <journal> The Journal of Real-Time Systems, </journal> <volume> 6(2) </volume> <pages> 133-152, </pages> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: to a great extent, and there exist analytical techniques to analyze systems which have (1) aperiodic tasks, albeit with a minimum inter-arrival time, (2) shared resources between tasks, and using a priority inheritance protocol to bound priority inversions, (3) task chains with an end-to-end deadline requirement, and (4) distributed systems <ref> [12, 2] </ref>. The basic technique is to determine the worst-case response time of a task, under the worst case loading scenarios, and then compare it with the deadline.
References-found: 12

