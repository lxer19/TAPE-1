URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/hudak-dir/nlp-workshop.ps
Refering-URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/hudak-paul.html
Root-URL: http://www.cs.yale.edu
Phone: 2  
Title: Linguistic, Philosophical, and Pragmatic Aspects of Type-Directed Natural Language Parsing  
Author: Sebastian Shaumyan and Paul Hudak 
Address: New Haven CT 06520, USA  New Haven CT 06520, USA  
Affiliation: 1 Yale University, Department of Computer Science,  Yale University, Department of Linguistics,  
Abstract: We describe how type information can be used to infer grammatical structure. This is in contrast to conventional type inference in programming languages where the roles are reversed, structure determining type. Our work is based on Applicative Universal Grammar (AUG), a linguistic theory that views the formation of phrase in a form that is analogous to function application in a programming language. We de-scibe our overall methodology including its linguistic and philosophical underpinnings. The natural language parser that we have constructed should be interesting to computer scientists in the way in which AUG relates to types and combinatory calculus, and to linguists in the way in which a very simple, brute force parsing strategy performs surprisingly well in both performance and accuracy. Both computer scientists and linguists should also be interested in the convergence of the theory of functional programming languages and AUG with regard to their conceptual bases. Both have been motivated by entirely different goals and have developed independently, but they are rooted in a common conceptual system of an applicative calculus.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. Bird and P. Wadler. </author> <title> Introduction to Functional Programming. </title> <publisher> Prentice Hall, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: Tutorial information on Haskell may be found elsewhere <ref> [1, 9] </ref>; in the following discussion we assume basic familiarity with the language. Our use of Haskell is fitting since the language is, in fact, named for the logician Haskell B. Curry whose work on combinatory logic cited above provides much of the foundation for both functional programming and AUG.
Reference: 2. <author> R.S. Bird and O. de Moor. </author> <title> Relational program derivation and context-free language recognition. </title> <editor> In A.W. Roscoe, editor, </editor> <title> A Classical Mind: </title> <booktitle> Essays in Honour of C.A.R. Hoare, </booktitle> <pages> pages 17-35. </pages> <booktitle> Prentice-Hall International Series in Computer Science, </booktitle> <year> 1994. </year>
Reference-contexts: We comment on these parses in more detail in Section 6. For larger sentences, however, the definition of ttrees is not efficient enough. Fortunately, there is a much more efficient algorithm (described in [11]) based on tabulation <ref> [2] </ref>.
Reference: 3. <author> Noam Chomsky. </author> <title> On the notion `rule of grammar'. </title> <booktitle> In Proceedings of Symposium in Applied Mathematics, volume 12 (Structure of Language and Its Mathematical Aspects). </booktitle> <year> 1961. </year>
Reference-contexts: This principle defines the essence of linguistic reality, and is a keystone of the semiotic study of language. The Principle of Semiotic Relevance is a powerful constraint on the theory of grammar, and not all linguistic theories conform well with this principle. For example, generative phonology <ref> [13, 3, 7] </ref> considers only the sound patterns of morphemes, completely disregarding their meanings. As a result, it wrongly identifies certain morphemes by posting fictitious relationships between them.
Reference: 4. <author> H.B. Curry. </author> <title> Some logical aspects of grammatical structure. In Structure of language and its mathematical aspects. </title> <publisher> American Mathematical Society, </publisher> <address> Providence, </address> <year> 1961. </year>
Reference-contexts: The functional language Haskell is named in the memory of Haskell B. Curry, the logician whose work on combinatory logic provides much of the foundation for both functional programming languages and AUG. Indeed, Curry himself was interested in the study of natural language and grammatical structure <ref> [4] </ref>. <p> This means that the obs were thought of not as strings of atoms, but as structures like a genealogical tree. <ref> [4, pp. 64-65] </ref> From this discussion we adopt the premise that the applicative structure is the essential structure of any language|a programming language, a language of mathematics or logic, or a natural language. 3 The Rise of Applicative Universal Grammar Applicative Universal Grammar (AUG) develops the ideas of Ferdinand de Saus-sure <p> Our use of Haskell is fitting since the language is, in fact, named for the logician Haskell B. Curry whose work on combinatory logic cited above provides much of the foundation for both functional programming and AUG. As mentioned earlier, Curry himself was interested in the study of linguistics <ref> [4] </ref>. 5.1 Types, Trees and Sentences Our first task in the implementation of the parser is to choose a representation for types.
Reference: 5. <author> H.B. Curry and R. </author> <title> Feys. </title> <booktitle> Combinatory Logic, </booktitle> <volume> Vol. 1. </volume> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1958. </year>
Reference-contexts: The first complete description of AUG was published in 1965 [16], unifying the categorical calculus of Lesniewski [12] with the combinatory calculus of Curry and Feys <ref> [5] </ref>. The semantic theory of AUG was presented in [17], and its use in the translation of natural languages is given in [19]. A full description of the current state of AUG is given in [18].
Reference: 6. <author> R. Frost and J. Launchbury. </author> <title> Constructing natural language interpreters in a lazy functional language. </title> <journal> The Computer Journal, </journal> <volume> 32(2) </volume> <pages> 108-121, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: Curry, the logician whose work on combinatory logic provides much of the foundation for both functional programming languages and AUG. Indeed, Curry himself was interested in the study of natural language and grammatical structure [4]. Related work on using a functional language for NLP may be found in <ref> [6] </ref>, which differs from ours by being based on principles proposed by Montague [15]. 2 The Rise of Functional Programming Languages The earliest programming languages were developed with one goal in mind: to provide a vehicle through which one could control the behavior of computers.
Reference: 7. <author> Morris Halle. </author> <title> The Sound Pattern of Russian. </title> <publisher> Mouton, </publisher> <address> The Hague, </address> <year> 1959. </year>
Reference-contexts: This principle defines the essence of linguistic reality, and is a keystone of the semiotic study of language. The Principle of Semiotic Relevance is a powerful constraint on the theory of grammar, and not all linguistic theories conform well with this principle. For example, generative phonology <ref> [13, 3, 7] </ref> considers only the sound patterns of morphemes, completely disregarding their meanings. As a result, it wrongly identifies certain morphemes by posting fictitious relationships between them.
Reference: 8. <author> P. Hudak. </author> <title> Conception, evolution, and application of functional programming languages. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3) </volume> <pages> 359-411, </pages> <year> 1989. </year>
Reference-contexts: Functional programming languages are declarative languages whose underlying model of computation is the function (in contrast to the relation that forms the basis for logic programming languages). (See <ref> [8] </ref> for a more thorough discussion of these issues.) The key point here is that higher-level languages are less dependent on the details of the underlying hardware. The earliest programming languages depended on the hardware completely, reflecting fairly accurately the structure of the underlying machine.
Reference: 9. <author> P. Hudak and J. Fasel. </author> <title> A gentle introduction to Haskell. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(5), </volume> <month> May </month> <year> 1992. </year>
Reference-contexts: Tutorial information on Haskell may be found elsewhere <ref> [1, 9] </ref>; in the following discussion we assume basic familiarity with the language. Our use of Haskell is fitting since the language is, in fact, named for the logician Haskell B. Curry whose work on combinatory logic cited above provides much of the foundation for both functional programming and AUG.
Reference: 10. <editor> P. Hudak, S. Peyton Jones, and P. Wadler (editors). </editor> <title> Report on the Programming Language Haskell, A Non-strict Purely Functional Language (Version 1.2). </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(5), </volume> <month> May </month> <year> 1992. </year>
Reference-contexts: A full description of the current state of AUG is given in [18]. A description of the feasibility of natural language parsing using AUG was first given in [11] as a literate Haskell <ref> [10] </ref> program. The functional language Haskell is named in the memory of Haskell B. Curry, the logician whose work on combinatory logic provides much of the foundation for both functional programming languages and AUG. Indeed, Curry himself was interested in the study of natural language and grammatical structure [4]. <p> We will see later how we can take advantage of this, including the possibility of a word having several roles (and types) simultaneously in the same sentence. 5 An NLP Prototype Written in Haskell Our NLP prototype was written in Haskell <ref> [10] </ref>, a standard for non-strict purely functional programming languages. Tutorial information on Haskell may be found elsewhere [1, 9]; in the following discussion we assume basic familiarity with the language. Our use of Haskell is fitting since the language is, in fact, named for the logician Haskell B.
Reference: 11. <author> M.P. Jones, P. Hudak, and S. Shaumyan. </author> <title> Using types to parse natural language. </title> <booktitle> In Proceedings of Glasgow Functional Programming Workshop. IFIP, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1995. </year>
Reference-contexts: A full description of the current state of AUG is given in [18]. A description of the feasibility of natural language parsing using AUG was first given in <ref> [11] </ref> as a literate Haskell [10] program. The functional language Haskell is named in the memory of Haskell B. Curry, the logician whose work on combinatory logic provides much of the foundation for both functional programming languages and AUG. <p> We comment on these parses in more detail in Section 6. For larger sentences, however, the definition of ttrees is not efficient enough. Fortunately, there is a much more efficient algorithm (described in <ref> [11] </ref>) based on tabulation [2].
Reference: 12. <author> Stanislaw Lesniewski. </author> <title> Grundzuge eines neuen Systems der Grundlagen der Math-ematik. </title> <journal> Fundamenta Mathematicae, </journal> <volume> 14 </volume> <pages> 1-81, </pages> <year> 1929. </year>
Reference-contexts: Indeed, our argument leads to the realization of a natural language parser written in the functional language Haskell, and based on the theory of AUG. The first complete description of AUG was published in 1965 [16], unifying the categorical calculus of Lesniewski <ref> [12] </ref> with the combinatory calculus of Curry and Feys [5]. The semantic theory of AUG was presented in [17], and its use in the translation of natural languages is given in [19]. A full description of the current state of AUG is given in [18].
Reference: 13. <author> Theodore M. Lightner. </author> <title> Generative phonology. </title> <editor> In William Orr Dingwall, editor, </editor> <booktitle> Survey of Linguistic Science, </booktitle> <pages> pages 489-574. </pages> <institution> Linguistics Program, University of Maryland, </institution> <year> 1971. </year>
Reference-contexts: This principle defines the essence of linguistic reality, and is a keystone of the semiotic study of language. The Principle of Semiotic Relevance is a powerful constraint on the theory of grammar, and not all linguistic theories conform well with this principle. For example, generative phonology <ref> [13, 3, 7] </ref> considers only the sound patterns of morphemes, completely disregarding their meanings. As a result, it wrongly identifies certain morphemes by posting fictitious relationships between them.
Reference: 14. <author> M. Moortgat. </author> <title> The generalized categorial grammar. </title> <editor> In Flip G. Droste and John E. Joseph, editors, </editor> <booktitle> Linguistic Theory and Grammatical Description, </booktitle> <pages> pages 489-574. </pages> <publisher> John Benjamins Publishing, </publisher> <address> Amsterdam/Philadelphia, </address> <year> 1991. </year>
Reference-contexts: Any combination of linguistic units has a unique construction; in algebraic terms, any combination of linguistic units is non-associative. Being a corollary of the Sign Combination Principle, the Principle of Monotonic Constructions is of paramount importance for linguistics. It excludes systems such as generalized categorial grammar <ref> [14] </ref>, whose associativity means that a sentence can be bracketed in every possible way. <p> of expressions), what type (s) can be derived from the concatenation of the input sentences? It will be clear that the result type S would also be derivable in the transitive verb had been assigned the type N P n (S=N P ) instead of (N P n S)=N P <ref> [14, p. 148] </ref>. Associativity considerably simplifies the construction of mathematical models of language, but it distorts linguistic reality. Associativity is motivated primarily by convenience: an associative calculus is much more convenient for parsing a string of words in a purely mechanical fashion.
Reference: 15. <author> Richard Montague. </author> <title> Formal philosophy. In R.H. Thomason, editor, Selected writings of Richard Montague. </title> <publisher> Yale University Press, </publisher> <address> New Haven, CT, </address> <year> 1974. </year>
Reference-contexts: Indeed, Curry himself was interested in the study of natural language and grammatical structure [4]. Related work on using a functional language for NLP may be found in [6], which differs from ours by being based on principles proposed by Montague <ref> [15] </ref>. 2 The Rise of Functional Programming Languages The earliest programming languages were developed with one goal in mind: to provide a vehicle through which one could control the behavior of computers.
Reference: 16. <author> Sebastian Shaumyan. Strukturnaja lingvistika, </author> <year> 1965. </year>
Reference-contexts: Curry on combinatory logic and its philosophical and linguistic implications. Indeed, our argument leads to the realization of a natural language parser written in the functional language Haskell, and based on the theory of AUG. The first complete description of AUG was published in 1965 <ref> [16] </ref>, unifying the categorical calculus of Lesniewski [12] with the combinatory calculus of Curry and Feys [5]. The semantic theory of AUG was presented in [17], and its use in the translation of natural languages is given in [19].
Reference: 17. <author> Sebastian Shaumyan. </author> <title> Applicative grammar as a semantic theory of natural language. </title> <publisher> University of Chicago Press, </publisher> <year> 1977. </year>
Reference-contexts: The first complete description of AUG was published in 1965 [16], unifying the categorical calculus of Lesniewski [12] with the combinatory calculus of Curry and Feys [5]. The semantic theory of AUG was presented in <ref> [17] </ref>, and its use in the translation of natural languages is given in [19]. A full description of the current state of AUG is given in [18]. A description of the feasibility of natural language parsing using AUG was first given in [11] as a literate Haskell [10] program.
Reference: 18. <author> Sebastian Shaumyan. </author> <title> A Semiotic Theory of Language. </title> <publisher> Indiana University Press, </publisher> <year> 1987. </year>
Reference-contexts: The semantic theory of AUG was presented in [17], and its use in the translation of natural languages is given in [19]. A full description of the current state of AUG is given in <ref> [18] </ref>. A description of the feasibility of natural language parsing using AUG was first given in [11] as a literate Haskell [10] program. The functional language Haskell is named in the memory of Haskell B. <p> This law will become clearer later, although its complete formulation is beyond the scope of this paper, and may be found in <ref> [18] </ref>. We claim that the Law of Passivization|and other laws as well|are universal. But in fact, in some cases a law is simply not applicable to certain languages, and the Law of Passivization is no exception: the active/passive correspondance does not exist in some languages. <p> The fundamental error of generative phonology is that is generates away cognate forms based entirely on formal criteria without regard to the meanings of the forms. For example, disregard of the meanings of the forms of morphemes leads to a confusion between synchrony and diachrony <ref> [18] </ref>. The opposite error is encountered in generative semantics, which fails to support distinctions in meanings with concomitant distinctions in phonic expressions. Consider, for instance, the famous McCawley's analysis of `kill' as a causative verb in English.
Reference: 19. <author> Sebastian Shaumyan. </author> <title> Applicative universal grammar as a linguistic framework of the translation model. </title> <booktitle> In Proceedings of the Fifth International Conference on Symbolic and Logical Computing. </booktitle> <institution> Dakota State University, Madison, Dakota, </institution> <year> 1991. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: The first complete description of AUG was published in 1965 [16], unifying the categorical calculus of Lesniewski [12] with the combinatory calculus of Curry and Feys [5]. The semantic theory of AUG was presented in [17], and its use in the translation of natural languages is given in <ref> [19] </ref>. A full description of the current state of AUG is given in [18]. A description of the feasibility of natural language parsing using AUG was first given in [11] as a literate Haskell [10] program. The functional language Haskell is named in the memory of Haskell B.
References-found: 19

