URL: http://www.ai.univie.ac.at/%7Epaolo/lva/vu-sa/ps/aa97-final.ps.gz
Refering-URL: http://www.ai.univie.ac.at/%7Epaolo/lva/vu-sa/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: decker@cis.udel.edu  (pannu,mikew,sycara)@cs.cmu.edu  
Title: Designing Behaviors for Information Agents  
Author: Keith Decker Anandeep Pannu, Katia Sycara and Mike Williamson 
Address: Delaware  
Affiliation: Computer and Information Sciences University of  The Robotics Institute, Carnegie-Mellon University  
Abstract: To facilitate the rapid development and open system interoperability of autonomous agents we need to carefully specify and effectively implement various classes of agent behaviors. Our current focus is on the behaviors and underlying architecture of WWW-based autonomous software agents that collect and supply information to humans and other computational agents. This paper discusses a set of architectural building blocks that support the specification of behaviors for these information agents in a way that allows periodic actions, interleaving of planning and execution, and the concurrent activation of multiple behaviors with asynchronous components. We present an initial set of information agent behaviors, including responding to repetitive queries, monitoring information sources, advertising capabilities, and self cloning. We have implemented and tested these behaviors on the WWW in the context of WARREN, an open multi-agent organization for financial portfolio management. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Arens, Y., and Knoblock, C. </author> <year> 1994. </year> <title> Intelligent caching: Selecting, representing, and reusing data in an information server. </title> <booktitle> In Proc. 3rd Intl. Conf. on Information and Knowledge Management. </booktitle>
Reference-contexts: This type of caching is not without tradeoffs; it uses more memory, and one must be careful to not introduce inconsistencies between the external source and the cache. A recent discussion of some of these tradeoffs in the context of higher-level multi-source information agent caching can be found in <ref> (Arens & Knoblock 1994) </ref>. Agent Architecture: Building Blocks for Agent Behaviors An information agent's reusable behaviors are facilitated by its reusable agent architecture, i.e. the domain-independent abstraction of the local infobase schema, and a set of generic software components for knowledge representation, agent control, and interaction with other agents. <p> The architecture presented here is consistent with formal BDI agent theory (Cohen & Levesque 1990; Rao & Georgeff 1995). The larger part of the architecture (outside of the local infobase cache) is shared by all of our software agent classes. This differentiates our approach from approaches such as SIMS <ref> (Knoblock, Arens, & Hsu 1994) </ref> that are focused on providing only what we would call multi-source information agent behaviors (discussed later). <p> the agent be provided with a infobase schema definition as described above, and a site-specific function for querying new external information source (s). 2 Everything else is shared and reused between information agent instances (and thus improvements and new functionality are shared as well). 2 This is similar to SIMS <ref> (Knoblock, Arens, & Hsu 1994) </ref>. Reusable Behaviors An information agent behavior is a particular approach to accomplishing a goal. Behavior instances are represented by a task instance, a set of sub-tasks or primitive action instances, and the information-flow relationships between them. <p> These types of new behaviors can be achieved by supplying new reductions to the existing query answering behaviors. More extensive multi-source integration (for example, breaking up queries, making multiple requests, and integrating the results <ref> (Knoblock, Arens, & Hsu 1994) </ref>) might require not only new reductions, but additional new behaviors.
Reference: <author> Cohen, P. R., and Levesque, H. J. </author> <year> 1990. </year> <title> Intention is choice with commitment. </title> <booktitle> Artificial Intelligence 42(3) </booktitle> <pages> 213-261. </pages>
Reference: <author> Collet, C.; Huhns, M.; and Shen, W. </author> <year> 1991. </year> <title> Resource integration using a large knowledge base in Carnot. </title> <note> Computer 55-62. </note>
Reference-contexts: The work described here is focussing on WWW-based information where most of the information is unstructured and where an information agent does not have access to the contents of the whole information source at once but only through an external query interface. Projects such as Carnot <ref> (Collet, Huhns, & Shen 1991) </ref> have shown that different types of traditional databases (e.g. relational, object-oriented) can be mapped via articulation axioms to a shared global context language (in Carnot's case, based on CYC).
Reference: <author> Decker, K. S., and Lesser, V. R. </author> <year> 1995. </year> <title> Designing a family of coordination algorithms. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> 73-80. </pages> <address> San Francisco: </address> <note> AAAI Press. Longer version available as UMass CS-TR 94-14. </note>
Reference-contexts: Thus, these simpler agents can work effectively with one another as well as with more complex agents, such as task agents, that reason about commitments explicitly to produce coordinated behavior <ref> (Decker & Lesser 1995) </ref>. In particular, in the WARREN portfolio management multi-agent system, basic and multi-source information agents work alongside more complex task- and interface-agents. We have used (and reused) the architectural components and agent behaviors for multiple, coordinating agents in various domains.
Reference: <author> Decker, K.; Sycara, K.; and Zeng, D. </author> <year> 1996. </year> <title> Designing a multi-agent portfolio management system. </title> <booktitle> In Proceedings of the AAAI Workshop on Internet Information Systems. </booktitle>
Reference-contexts: We have used (and reused) the architectural components and agent behaviors for multiple, coordinating agents in various domains. These domains span projects such as PLEIADES, in the domain of organizational decision making (Sycara & Zeng 1996) and WARREN, in the financial portfolio management domain <ref> (Decker, Sycara, & Zeng 1996) </ref> A Functional Overview of Information Agents Typically, a single information agent will serve the information needs of many other machine or human agents. An information agent is quite different from a typical WWW service that provides data to multiple users. <p> An action is enabled when all the required inputs have been provided. (See the example reduction in Figure 3, or see <ref> (Williamson, Decker, & Sycara 1996) </ref> for a complete description of our task structure representation.) The task reduction schemas are retrieved and instantiated by the planner to provide task structures that are subsequently scheduled and executed. The execution of the resulting task structures composes the agent's behaviors.
Reference: <author> Decker, K.; Williamson, M.; and Sycara, K. </author> <year> 1996a. </year> <title> Intelligent adaptive information agents. </title> <booktitle> In Proceedings of the AAAI-96 Workshop on Intelligent Adaptive Agents. </booktitle> <publisher> AAAI Press Tech Report WS-96-04. </publisher>
Reference-contexts: In this way, the information agent can make a rational meta-control decision about whether or not it should undertake a cloning behavior. A formal presentation of the cloning criteria and the results of empirical evaluation can be found in <ref> (Decker, Williamson, & Sycara 1996a) </ref>. Multi-Source Information Agents Basic information agents are certainly useful, but there is a great deal of reusable behavior that is involved with manipulating queries themselves, independent of the ultimate sources of data. <p> Our experimental evaluations have included studies of both cloning behaviors <ref> (Decker, Williamson, & Sycara 1996a) </ref>, and matchmaking vs. brokering behaviors (Decker, Williamson, & Sycara 1996b). More information and demos can be found on the WWW at http://www.cs.cmu.edu/softagents /warren/warren.html.
Reference: <author> Decker, K.; Williamson, M.; and Sycara, K. </author> <year> 1996b. </year> <title> Match-making and brokering [poster]. </title> <booktitle> In Proceedings of the 2nd Intl. Conf. on Multi-Agent Systems. </booktitle>
Reference-contexts: A query brokering agent takes a request from a task agent and farms it out to one or more basic information agents, insulating the requesting task agent from certain types of source errors and efficiently balancing the computational load <ref> (Decker, Williamson, & Sycara 1996b) </ref>. A newly instantiated query broker needs only to be provided the names of the basic information agents for which it is responsible. <p> Our experimental evaluations have included studies of both cloning behaviors (Decker, Williamson, & Sycara 1996a), and matchmaking vs. brokering behaviors <ref> (Decker, Williamson, & Sycara 1996b) </ref>. More information and demos can be found on the WWW at http://www.cs.cmu.edu/softagents /warren/warren.html. Conclusions & Future Work This paper has discussed the design and implementation of information agents, a class of autonomous computational agent that is tied closely to a source or sources of data.
Reference: <author> Etzioni, O.; Lesh, N.; and Segal, R. </author> <year> 1992. </year> <title> Building softbots for unix (preliminary report). </title> <type> Technical Report softbots-tr.ps, </type> <institution> University of Washington. </institution>
Reference-contexts: in time and where the next step may be externally, asynchronously enabled. 1 1 While SIMS agents do not have most of these capabilities, it is interesting to note that Etzioni's softbots provide for some of them periodic and externally enabled actionsby adding a programming language layer above the planner <ref> (Etzioni, Lesh, & Segal 1992) </ref>, rather The control process for information agents includes, com-munication of planning goals, planning to achieve internal or external goals, scheduling the actions within these plans, actually carrying out these actions (see Figure 2), and monitoring action execution.
Reference: <author> Finin, T.; Fritzson, R.; McKay, D.; and McEntire, R. </author> <year> 1994. </year> <title> KQML as an agent communication language. </title> <booktitle> In Proceedings of the Third International Conference on Information and Knowledge Management CIKM'94. </booktitle> <publisher> ACM Press. </publisher>
Reference-contexts: One of the reusable behaviors inherited by a matchmaker is the ability to process persistent queries as described in (Kuokka & Harada 1995). The agents in our system communicate using KQML <ref> (Finin et al. 1994) </ref>. Our focus on long-term behaviors, such as periodic queries and information monitoring, has required us to extend the language with performative parameters to allow the specification of deadlines, task frequencies, and other temporal behavioral constraints.
Reference: <author> Genesereth, M., and Katchpel, S. </author> <year> 1994. </year> <title> Software agents. </title> <journal> Communications of the ACM 37(7) 48-53,147. </journal>
Reference: <author> Gruber, T. </author> <year> 1993. </year> <title> Toward principles for the design of ontologies used for knowledge sharing. </title> <type> Technical Report KSL-93-4, </type> <institution> Knowledge Systems Laboratory, Stanford University. </institution>
Reference-contexts: Such an approach is compatible with ours and can be used to add traditional structured database external sources to our basic information agents. The ontological mismatch problem (e.g. <ref> (Gruber 1993) </ref>) is still a difficult one and is outside the scope of this paper. in relation to its environment. An information agent has three conceptual functional parts: the agent's current activity information, the agent's local infobase, and the problem-solving library that includes site-specific external interface code.
Reference: <author> Kim, W., and Seo, J. </author> <year> 1991. </year> <title> Classifying schematic and data heterogeneity in multidatabase systems. </title> <note> Computer 12-18. </note>
Reference-contexts: A large amount of previous work has concentrated on how to access and integrate information from heterogeneous databases (e.g. relational databases) containing structured information. Many problems arise due to semantic schema conflicts and ontological mismatches <ref> (Kim & Seo 1991) </ref>. The work described here is focussing on WWW-based information where most of the information is unstructured and where an information agent does not have access to the contents of the whole information source at once but only through an external query interface.
Reference: <author> Knoblock, C.; Arens, Y.; and Hsu, C. </author> <year> 1994. </year> <title> Cooperating agents for information retrieval. </title> <booktitle> In Proc. 2nd Intl. Conf. on Cooperative Information Systems. </booktitle> <publisher> Univ. of Toronto Press. </publisher>
Reference-contexts: This type of caching is not without tradeoffs; it uses more memory, and one must be careful to not introduce inconsistencies between the external source and the cache. A recent discussion of some of these tradeoffs in the context of higher-level multi-source information agent caching can be found in <ref> (Arens & Knoblock 1994) </ref>. Agent Architecture: Building Blocks for Agent Behaviors An information agent's reusable behaviors are facilitated by its reusable agent architecture, i.e. the domain-independent abstraction of the local infobase schema, and a set of generic software components for knowledge representation, agent control, and interaction with other agents. <p> The architecture presented here is consistent with formal BDI agent theory (Cohen & Levesque 1990; Rao & Georgeff 1995). The larger part of the architecture (outside of the local infobase cache) is shared by all of our software agent classes. This differentiates our approach from approaches such as SIMS <ref> (Knoblock, Arens, & Hsu 1994) </ref> that are focused on providing only what we would call multi-source information agent behaviors (discussed later). <p> the agent be provided with a infobase schema definition as described above, and a site-specific function for querying new external information source (s). 2 Everything else is shared and reused between information agent instances (and thus improvements and new functionality are shared as well). 2 This is similar to SIMS <ref> (Knoblock, Arens, & Hsu 1994) </ref>. Reusable Behaviors An information agent behavior is a particular approach to accomplishing a goal. Behavior instances are represented by a task instance, a set of sub-tasks or primitive action instances, and the information-flow relationships between them. <p> These types of new behaviors can be achieved by supplying new reductions to the existing query answering behaviors. More extensive multi-source integration (for example, breaking up queries, making multiple requests, and integrating the results <ref> (Knoblock, Arens, & Hsu 1994) </ref>) might require not only new reductions, but additional new behaviors.
Reference: <author> Kuokka, D., and Harada, L. </author> <year> 1995. </year> <title> On using KQML for matchmaking. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> 239-245. </pages> <address> San Francisco: </address> <publisher> AAAI Press. </publisher>
Reference-contexts: One of the reusable behaviors inherited by a matchmaker is the ability to process persistent queries as described in <ref> (Kuokka & Harada 1995) </ref>. The agents in our system communicate using KQML (Finin et al. 1994).
Reference: <author> Oates, T.; Prasad, M. V. N.; Lesser, V. R.; and Decker, K. S. </author> <year> 1995. </year> <title> A distributed problem solving approach to cooperative information gathering. </title> <booktitle> In AAAI Spring Symposium on Information Gathering in Distributed Environments. </booktitle>
Reference: <author> Rao, A., and Georgeff, M. </author> <year> 1995. </year> <title> BDI agents: From theory to practice. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> 312-319. </pages> <address> San Francisco: </address> <publisher> AAAI Press. </publisher>
Reference: <author> Sycara, K., and Zeng, D. </author> <year> 1996. </year> <title> Coordination of multiple intelligent software agents. </title> <journal> International Journal of Intelligent and Cooperative Information Systems. </journal>
Reference-contexts: Our framework comprises interface agents interacting with an individual user, task agents involved in the processes associated with arbitrary problem-solving tasks, and information agents that are closely tied to a source or sources of data <ref> (Sycara & Zeng 1996) </ref>. These three broad agent categories share common architectural components but have different sets of agent behaviors. The behaviors in each class of agent are reusable. We have identified the behaviors that would be desirable for an autonomous information agent functioning in the context of the WWW. <p> We have used (and reused) the architectural components and agent behaviors for multiple, coordinating agents in various domains. These domains span projects such as PLEIADES, in the domain of organizational decision making <ref> (Sycara & Zeng 1996) </ref> and WARREN, in the financial portfolio management domain (Decker, Sycara, & Zeng 1996) A Functional Overview of Information Agents Typically, a single information agent will serve the information needs of many other machine or human agents. <p> We have used (and reused) the architectural components and agent behaviors for multiple, coordinating agents in various domains. These domains span projects such as PLEIADES, in the domain of organizational decision making (Sycara & Zeng 1996) and WARREN, in the financial portfolio management domain <ref> (Decker, Sycara, & Zeng 1996) </ref> A Functional Overview of Information Agents Typically, a single information agent will serve the information needs of many other machine or human agents. An information agent is quite different from a typical WWW service that provides data to multiple users. <p> An action is enabled when all the required inputs have been provided. (See the example reduction in Figure 3, or see <ref> (Williamson, Decker, & Sycara 1996) </ref> for a complete description of our task structure representation.) The task reduction schemas are retrieved and instantiated by the planner to provide task structures that are subsequently scheduled and executed. The execution of the resulting task structures composes the agent's behaviors.
Reference: <author> Williamson, M.; Decker, K.; and Sycara, K. </author> <year> 1996. </year> <title> Unified information and control flow in hierarchical task networks. </title> <booktitle> In Proceedings of the AAAI-96 workshop on Theories of Planning, Action, and Control. </booktitle>
Reference-contexts: An action is enabled when all the required inputs have been provided. (See the example reduction in Figure 3, or see <ref> (Williamson, Decker, & Sycara 1996) </ref> for a complete description of our task structure representation.) The task reduction schemas are retrieved and instantiated by the planner to provide task structures that are subsequently scheduled and executed. The execution of the resulting task structures composes the agent's behaviors.
References-found: 18

