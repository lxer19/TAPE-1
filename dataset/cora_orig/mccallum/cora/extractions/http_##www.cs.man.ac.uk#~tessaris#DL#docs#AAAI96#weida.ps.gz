URL: http://www.cs.man.ac.uk/~tessaris/DL/docs/AAAI96/weida.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~tessaris/DL/papers.html
Root-URL: http://www.cs.man.ac.uk
Email: weida@watson.ibm.com  weida@cs.columbia.edu  
Title: Closed Terminologies in Description Logics  
Author: Robert A. Weida P. O. Box 
Address: Heights, NY 10598  New York, NY 10027  
Affiliation: IBM T. J. Watson Research Center  Yorktown  Computer Science Department Columbia University  
Note: In Proceedings of the Thirteenth National Conference on Artificial Intelligence (AAAI-96). Copyright c fl1996, AAAI. 1  
Abstract: We introduce a predictive concept recognition methodology for description logics based on a new closed terminology assumption. During knowledge engineering, our system adopts the standard open terminology assumption as it automatically classifies concept descriptions into a taxonomy via subsumption inferences. However, for applications like configuration, the terminology becomes fixed during problem solving. Then, closed terminology reasoning is more appropriate. In our interactive configuration application, a user incrementally specifies an individual computer system in collaboration with a configuration engine. Choices can be made in any order and at any level of abstraction. We distinguish between abstract and concrete concepts to formally define when an individual's description may be considered finished. We also take advantage of the closed terminology assumption, together with the terminology's subsumption-based organization, to efficiently track the types of systems and components consistent with current choices, infer additional constraints on current choices, and appropriately guide future choices. Thus, we can help focus the efforts of both user and configuration engine.
Abstract-found: 1
Intro-found: 1
Reference: <author> Borgida, A.; Brachman, R. J.; McGuinness, D. L.; and Resnick, L. A. </author> <year> 1989. </year> <title> Classic: A structural data model for objects. </title> <booktitle> In Proc. 1989 ACM SIGMOD, </booktitle> <pages> 58-67. </pages>
Reference-contexts: This goal is more ambitious than ours or that of (Wright et al. 1993). However, (Owsnicki-Klewe 1988) considered only an (admittedly limited) example. PROSE (Wright et al. 1993) is a successfully deployed configurator featuring product KBs written in CLASSIC <ref> (Borgida et al. 1989) </ref>. Like BEACON and PROSE, our work positions the DL system as a product knowledge reasoner a key module in a larger configurator architecture, i.e., the DL system maintains internal KB consistency during configuration but relies on configuration-specific modules for further reasoning.
Reference: <author> Cohen, W.; Borgida, A.; and Hirsh, H. </author> <year> 1992. </year> <title> Computing least common subsumers in description logics. </title> <booktitle> In Proceedings of AAAI-92, </booktitle> <pages> 754-760. </pages>
Reference-contexts: Therefore, the commonality among MGO concepts constitutes a set of implicit constraints imposed on I by the closed terminology. Cohen, et al., showed how to compute the least common subsumer (LCS) of a set of concepts <ref> (Cohen, Borgida, & Hirsh 1992) </ref>. LCS (MGOs) is a concept representing just their commonality (we never use the LCS concept for any other purpose, so it is not permanently installed in the terminology). Any constraint on LCS (MGOs) not reflected in I should be added to I.
Reference: <author> Donini, F.; Lenzerini, M.; Nardi, D.; Schaerf, A.; and Nutt, W. </author> <year> 1992. </year> <title> Adding epistemic operators to concept languages. </title> <booktitle> In KR'92, </booktitle> <pages> 342-354. </pages>
Reference-contexts: CTA is essential for ruling out concepts that an individual cannot instantiate, and thus drawing conclusions from the remainder. CTA applies only at the level of concepts; we neither assume that the set of individuals is closed, nor do we perform closed world reasoning over individuals, as in <ref> (Donini et al. 1992) </ref>. By Definition 6, once an individual is finished, it will bijectively instantiate at least one concrete concept.
Reference: <author> Kautz, H. A. </author> <year> 1991. </year> <title> A formal theory of plan recognition and its implementation. </title> <editor> In Allen, J.; Kautz, H.; Pelavin, R.; and Tenenberg, J., eds., </editor> <title> Reasoning About Plans. </title> <publisher> Morgan Kaufmann. </publisher> <pages> 69-125. </pages>
Reference-contexts: We are investigating a formal semantics for CTA reasoning in DL based on circumscription. There is an interesting analogy with Kautz's use of circumscription to close an event hierarchy for deductive plan recognition <ref> (Kautz 1991) </ref>: Kautz's hierarchy is composed of events related by steps; our concept taxonomy is composed of concepts related by roles. Conclusion This paper presents a predictive concept recognition methodology for DL which demonstrates, for the first time, the value of CTA reasoning.
Reference: <author> Kramer, B. </author> <year> 1991. </year> <title> Knowledge-based configuration of computer systems using hierarchical partial choice. </title> <booktitle> In Int. Conf. on Tools for AI, </booktitle> <pages> 368-375. </pages>
Reference-contexts: Moreover, it helps to guide recognition as we shall see. Incremental Instantiation To help decide if an individual's current description may be finished, we distinguish between concrete and abstract concepts. A similar distinction was made in configuration work by <ref> (Kramer 1991) </ref>, but we will formally define the notion of a finished individual. Abstract concepts represent commonality among a class of concrete concepts, e.g., an actual system's processor may be of type 486DX-33MHZ, which is concrete (fully specific), but not merely of type CPU, which is abstract (too general).
Reference: <author> Mays, E.; Dionne, R.; and Weida, R. </author> <year> 1991. </year> <title> K-rep system overview. </title> <journal> SIGART Bulletin 2(3) </journal> <pages> 93-97. </pages>
Reference-contexts: Thus, we can help focus the efforts of both user and configuration engine. This work evolved from DL-based plan recognition in the T-REX system (Weida & Litman 1994; 1992). It is implemented in the K-REP DL system <ref> (Mays, Dionne, & Weida 1991) </ref>. Further details, including proofs of theorems, are provided in (Weida 1996). Configuration System Configuration Engine Description Logic System Configuration KB In Proceedings of the Thirteenth National Conference on Artificial Intelligence (AAAI-96).
Reference: <author> Mitchell, T. M. </author> <year> 1982. </year> <title> Generalization as search. </title> <booktitle> Artificial Intelligence 18 </booktitle> <pages> 203-226. </pages>
Reference-contexts: However, no previous work has pursued CTA reasoning in DL. This work draws on a predictive recognition methodology for constraint networks representing rich temporal patterns, e.g., plans (Weida & Litman 1992; 1994; Weida 1996). Our terminology partitioning algorithm bears some resemblance to the candidate-elimination algorithm of <ref> (Mitchell 1982) </ref>, however candidate-elimination uses explicit negative examples to exclude concepts, while we derive the concepts to be excluded using CTA. Also, candidate-elimination operates on sets of different positive and negative examples, while we are concerned with successive descriptions of the same (positive) instance.
Reference: <author> Owsnicki-Klewe, B. </author> <year> 1988. </year> <title> Configuration as a consistency maintenance task. </title> <booktitle> In GWAI-88, </booktitle> <pages> 77-87. </pages>
Reference: <author> Searls, D. B., and Norton, L. M. </author> <year> 1990. </year> <title> Logic-based configuration with a semantic network. </title> <journal> Journal of Logic Programming 8 </journal> <pages> 53-73. </pages>
Reference-contexts: Consequently, taking the LCS of optional known concepts in order to derive constraints on an individual would be entirely unjustified. Related and Future Work Previous work shows that DL is well suited to configuration problems. The BEACON configurator based on KNET reached the advanced prototype stage <ref> (Searls & Norton 1990) </ref>. In (Owsnicki-Klewe 1988), the entire configuration problem was cast as a matter of maintaining internal KB consistency, i.e., logical contradictions should follow from all invalid configurations but no valid ones. This goal is more ambitious than ours or that of (Wright et al. 1993).
Reference: <author> Weida, R., and Litman, D. </author> <year> 1992. </year> <title> Terminological reasoning with constraint networks and an application to plan recognition. </title> <booktitle> In KR'92, </booktitle> <pages> 282-293. </pages>
Reference: <author> Weida, R., and Litman, D. </author> <year> 1994. </year> <title> Subsumption and recognition of heterogeneous constraint networks. </title> <booktitle> In CAIA-94, </booktitle> <pages> 381-388. </pages>
Reference: <author> Weida, R. A. </author> <year> 1996. </year> <title> Closed Terminologies and Temporal Reasoning in Description Logic for Concept and Plan Recognition. </title> <type> Ph.D. Dissertation, </type> <institution> Columbia University. </institution>
Reference-contexts: This work evolved from DL-based plan recognition in the T-REX system (Weida & Litman 1994; 1992). It is implemented in the K-REP DL system (Mays, Dionne, & Weida 1991). Further details, including proofs of theorems, are provided in <ref> (Weida 1996) </ref>. Configuration System Configuration Engine Description Logic System Configuration KB In Proceedings of the Thirteenth National Conference on Artificial Intelligence (AAAI-96). <p> The first phase discovers all newly necessary concepts, the second all newly impossible ones. The third simply prepares the new MGOs for the MSN phase of the next round of incremental recognition. Due to limited space, readers are referred to <ref> (Weida 1996) </ref> for further details of the algorithm. As an example, an initial configuration description might be: (create-individual COMPUTER-SYSTEM89 (and COMPUTER-SYSTEM (at-least 2 processor) (at-least 1 secondary-storage))) For this example, suppose that IBM-PROCESSOR-DEVICE is omitted from the terminology of Figure 2. Then, the necessary concepts are THING, SYSTEM and COMPUTER-SYSTEM. <p> Hence, K-REP discovers that COMPUTER-SYSTEM89's processors must be of type RISC-CPU. This conclusion can only come from CTA reasoning. Thus, future choices regarding the processors will be suitably constrained. The preceding was simplified for clarity; we can often do better. For details and further examples, see <ref> (Weida 1996) </ref>. Open vs. Closed Terminologies CTA limits the concepts that an individual can instantiate, perhaps after monotonic update, since ultimately it must bi-jectively instantiate an explicitly defined concrete concept. <p> Furthermore, all CTA-consistency relationships must hold under OTA, but the converse is not true. For example, IBM-PROCESSOR-DEVICE and UNIX-RISC-SYSTEM are OTA-consistent. Without the presence of IBM-RISC-CPU, they would not be CTA-consistent, because their processor roles would not have CTA-consistent value restrictions. For further examples and discussion, see <ref> (Weida 1996) </ref>. Finally, constraint derivation via the LCS inference depends crucially on CTA. Without CTA, the optional concepts might include any number of concepts not explicitly defined in the terminology. Consequently, taking the LCS of optional known concepts in order to derive constraints on an individual would be entirely unjustified.
Reference: <author> Woods, W. A., and Schmolze, J. G. </author> <year> 1992. </year> <title> The kl-one family. Computers and Mathematics with Applications 74(2-5). </title>
Reference-contexts: Introduction In a description logic (DL), a knowledge base (KB) includes a terminology composed of concept descriptions, plus descriptions of individuals in terms of those concepts <ref> (Woods & Schmolze 1992) </ref>. Previous work in DL has not distinguished between knowledge engineering and problem solving phases of terminology usage. This paper pursues the idea of closing the terminology after it is developed and before problem solving begins.
Reference: <author> Wright, J. R.; Weixelbaum, E. S.; Brown, K. E.; Vesonder, G. T.; Palmer, S. R.; Berman, J. I.; and Moore, H. H. </author> <year> 1993. </year> <title> A knowledge-based configurator that supports sales, engineering, and manufacturing at at&t network systems. </title> <booktitle> In Proceedings of the Fifth IAAI. </booktitle>
Reference-contexts: Consider system configuration, where DL has already found practical success <ref> (Wright et al. 1993) </ref>. DL is ideal for describing artifacts such as computer systems, and for maintaining the consistency of large configuration terminologies as they evolve over time. <p> In (Owsnicki-Klewe 1988), the entire configuration problem was cast as a matter of maintaining internal KB consistency, i.e., logical contradictions should follow from all invalid configurations but no valid ones. This goal is more ambitious than ours or that of <ref> (Wright et al. 1993) </ref>. However, (Owsnicki-Klewe 1988) considered only an (admittedly limited) example. PROSE (Wright et al. 1993) is a successfully deployed configurator featuring product KBs written in CLASSIC (Borgida et al. 1989). <p> This goal is more ambitious than ours or that of <ref> (Wright et al. 1993) </ref>. However, (Owsnicki-Klewe 1988) considered only an (admittedly limited) example. PROSE (Wright et al. 1993) is a successfully deployed configurator featuring product KBs written in CLASSIC (Borgida et al. 1989). <p> Some inferences described above are syntactic in nature, thus dependent on the DL language under consideration. Our framework appears extensible for the remaining DL operators used in PROSE <ref> (Wright et al. 1993) </ref>, among others. We are not yet concerned with disjunction and negation operators because K-REP does not support them, but it is admittedly unclear how efficiently they can be incorporated in the present framework. <p> We are not yet concerned with disjunction and negation operators because K-REP does not support them, but it is admittedly unclear how efficiently they can be incorporated in the present framework. Importantly, CLASSIC has achieved great success in the configuration arena without supporting either disjunction or negation <ref> (Wright et al. 1993) </ref>. We are investigating a formal semantics for CTA reasoning in DL based on circumscription.
References-found: 14

