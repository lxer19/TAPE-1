URL: http://www.cs.man.ac.uk/~kung-kiu/pub/iclp94tutabs.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~kung-kiu/pub/
Root-URL: http://www.cs.man.ac.uk
Email: kung-kiu@cs.man.ac.uk  geraint@aisb.ed.ac.uk  
Title: A Tutorial on Synthesis of Logic Programs from Specifications  
Author: Kung-Kiu Lau Geraint Wiggins 
Address: Oxford Road, Manchester M13 9PL, United Kingdom  80 South Bridge, Edinburgh EH1 1HN, Scotland  
Affiliation: Department of Computer Science, University of Manchester  Department of Artificial Intelligence, University of Edinburgh  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Bundy, A. Smaill, and G. Wiggins. </author> <title> The synthesis of logic programs from inductive proofs. </title> <editor> In J.W. Lloyd, editor, </editor> <booktitle> Proc. ESPRIT Symposium on Computational Logic, </booktitle> <pages> pages 135-149. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: In this tutorial, we shall follow their style, and for each approach, we shall explain it with an example: * For constructive synthesis, we shall base our description on the work by Bundy and Wiggins <ref> [1] </ref>. * For deductive synthesis, we follow that of Lau and Ornaghi [8]. For transformational synthesis by fold-unfold, we will describe the work of Sato and Tamaki [11]. For transformational synthesis by partial deduction, we will describe the work of Komorowski [7].
Reference: [2] <author> K.L. Clark. </author> <title> The synthesis and verification of logic programs. </title> <type> Technical Report DOC 81/36, </type> <institution> Imperial College, </institution> <address> London, </address> <month> September </month> <year> 1981. </year>
Reference-contexts: Logic programming provides a uniquely uniform framework for specifications, programs and program synthesis. It is small wonder that in the early days of logic programming, program synthesis was one of the first topics that received attention. Most notable among this early work is that of Clark <ref> [2] </ref>, Hansson [4], Hogger [6], and Tarnlund [5]. Although Hansson and Tarnlund and their colleagues at Uppsala implemented a derivation editor, the early work was not particularly geared towards automated synthesis. For some reason, work on logic program synthesis dwindled considerably in the Eighties.
Reference: [3] <author> Y. Deville and K.K. Lau. </author> <title> Logic program synthesis. </title> <journal> J. Logic Programming. </journal> <note> To appear in Special Issue on "Ten Years of Logic Programming". </note>
Reference-contexts: In this tutorial, we shall concentrate on synthesis, but we shall also see its relationship with transformation. 2 A Taxonomy The first attempt at a taxonomy of logic program synthesis methods can be found in Deville and Lau <ref> [3] </ref>. This classifies methods as follows: * Formal methods: Constructive synthesis. The specification of a program P is a conjecture that for all inputs to P there exists an output that satisfies the input-output relation that P computes. <p> Owing to lack of space, we shall concentrate on formal methods, in particular constructive and deductive synthesis. Inductive synthesis, or Inductive Logic Programming, is now a research area in its own right, and is therefore best left outside the scope of this tutorial. 3 A Survey Deville and Lau <ref> [3] </ref> also contains a brief survey of logic program synthesis methods.
Reference: [4] <author> A. Hansson. </author> <title> A Formal Development of Programs. </title> <type> PhD thesis, </type> <institution> Dept of Information Processing and Computer Science, The Royal Institute of Technology and The University of Stockholm, </institution> <year> 1980. </year>
Reference-contexts: Logic programming provides a uniquely uniform framework for specifications, programs and program synthesis. It is small wonder that in the early days of logic programming, program synthesis was one of the first topics that received attention. Most notable among this early work is that of Clark [2], Hansson <ref> [4] </ref>, Hogger [6], and Tarnlund [5]. Although Hansson and Tarnlund and their colleagues at Uppsala implemented a derivation editor, the early work was not particularly geared towards automated synthesis. For some reason, work on logic program synthesis dwindled considerably in the Eighties.
Reference: [5] <author> A. Hansson and S.- A. </author> <title> Tarnlund. A natural programming calculus. </title> <booktitle> In Proc. </booktitle> <pages> IJCAI-79 , pages 348-355, </pages> <year> 1979. </year>
Reference-contexts: It is small wonder that in the early days of logic programming, program synthesis was one of the first topics that received attention. Most notable among this early work is that of Clark [2], Hansson [4], Hogger [6], and Tarnlund <ref> [5] </ref>. Although Hansson and Tarnlund and their colleagues at Uppsala implemented a derivation editor, the early work was not particularly geared towards automated synthesis. For some reason, work on logic program synthesis dwindled considerably in the Eighties.
Reference: [6] <author> C.J. </author> <title> Hogger. Derivation of logic programs. </title> <editor> J. </editor> <booktitle> ACM , 28(2) </booktitle> <pages> 372-392, </pages> <month> April </month> <year> 1981. </year>
Reference-contexts: It is small wonder that in the early days of logic programming, program synthesis was one of the first topics that received attention. Most notable among this early work is that of Clark [2], Hansson [4], Hogger <ref> [6] </ref>, and Tarnlund [5]. Although Hansson and Tarnlund and their colleagues at Uppsala implemented a derivation editor, the early work was not particularly geared towards automated synthesis. For some reason, work on logic program synthesis dwindled considerably in the Eighties.
Reference: [7] <author> J.H. Komorowski. </author> <title> Synthesis of Programs in the Framework of Partial Deduction. Report Ser. A, </title> <type> No 81, </type> <institution> Dept of Computer Science, Abo Akademi, </institution> <year> 1989. </year>
Reference-contexts: For transformational synthesis by fold-unfold, we will describe the work of Sato and Tamaki [11]. For transformational synthesis by partial deduction, we will describe the work of Komorowski <ref> [7] </ref>. Transformational synthesis exemplifies the intricate relationship between synthesis and transformation.
Reference: [8] <author> K.K. Lau and M. Ornaghi. </author> <title> An incompleteness result for deductive synthesis of logic programs. </title> <editor> In D.S. Warren, editor, </editor> <booktitle> Proc. 10 th International Conference on Logic Programming, </booktitle> <pages> pages 456-477. </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: In this tutorial, we shall follow their style, and for each approach, we shall explain it with an example: * For constructive synthesis, we shall base our description on the work by Bundy and Wiggins [1]. * For deductive synthesis, we follow that of Lau and Ornaghi <ref> [8] </ref>. For transformational synthesis by fold-unfold, we will describe the work of Sato and Tamaki [11]. For transformational synthesis by partial deduction, we will describe the work of Komorowski [7]. Transformational synthesis exemplifies the intricate relationship between synthesis and transformation.
Reference: [9] <author> S. Muggleton and L. De Raedt. </author> <title> Inductive logic programming. </title> <journal> J. Logic Programming. </journal> <note> To appear in Special Issue on "Ten Years of Logic Programming". </note>
Reference-contexts: Here we shall discuss this relationship, and explain the precise distinction and similarities between the two. * For inductive synthesis, we can only briefly mention the work by Shapiro [10], and refer the readers to a comprehensive survey by Muggleton and De Raedt <ref> [9] </ref>. For each approach, we shall also survey other existing work and relate it to the chosen central example. Furthermore, we shall also discuss the inter-relationships between the three approaches.
Reference: [10] <author> E.Y. Shapiro. </author> <title> Algorithmic Program Debugging. </title> <publisher> MIT Press, </publisher> <year> 1983. </year>
Reference-contexts: Transformational synthesis exemplifies the intricate relationship between synthesis and transformation. Here we shall discuss this relationship, and explain the precise distinction and similarities between the two. * For inductive synthesis, we can only briefly mention the work by Shapiro <ref> [10] </ref>, and refer the readers to a comprehensive survey by Muggleton and De Raedt [9]. For each approach, we shall also survey other existing work and relate it to the chosen central example. Furthermore, we shall also discuss the inter-relationships between the three approaches.
Reference: [11] <author> T. Sato and H. Tamaki. </author> <title> Transformational Logic Program Synthesis. </title> <booktitle> In Proc. International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 195-201, </pages> <year> 1984. </year>
Reference-contexts: For transformational synthesis by fold-unfold, we will describe the work of Sato and Tamaki <ref> [11] </ref>. For transformational synthesis by partial deduction, we will describe the work of Komorowski [7]. Transformational synthesis exemplifies the intricate relationship between synthesis and transformation.
References-found: 11

