URL: ftp://garovix.ijs.si/pub/papers/bz/caia94.ps.gz
Refering-URL: http://www-ai.ijs.si/BlazZupan/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: (blaz,cheng)@cs.uh.edu  
Title: Optimization of Rule-Based Expert Systems Via State Transition System Construction  
Author: Blaz Zupan Albert Mo Kim Cheng 
Address: Houston, Texas 77204-3475  
Affiliation: Department of Computer Science University of Houston  
Abstract: Embedded rule-based expert systems must satisfy stringent timing constraints when applied to real-time environments. The paper describes a novel approach to reduce the response time of rule-based expert systems. Our optimization method is based on a construction of the reduced cycle-free finite state transition system corresponding to the input rule-based system. The method makes use of rule-base system decomposition, concurrency and state-equivalency. The new and optimized system is synthesized from the derived transition system. Compared with the original system, the synthesized system has (1) fewer number of rule firings to reach the fixed point, (2) is inherently stable and (3) has no redundant rules. The synthesis method also determines the tight response time bound of the new system. The optimized system is guaranteed to compute correct results independent of the scheduling strategy and execution environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Bouajjani, J.-C. Fernandez, and N. Halb-wachs. </author> <title> Minimal model generation. </title> <editor> In E. M. Clarke and R. P. Kurshan, editors, </editor> <booktitle> Proc. 2nd Int'l Conference on on Computer-Aided Verification, </booktitle> <pages> pages 197-203, </pages> <address> New Brunswick, NJ, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: Our method is based on the identification of the finite state transition system for the original rule-based program. Due to the nontrivial nature of expert systems, the combinatorial explosion of states may threaten the implementability of such an approach. Bouajjani et al. <ref> [1] </ref> proposes an algorithm for minimal model generation that can be used for building a state graph of transition systems.
Reference: [2] <author> J. C. Browne, A. M. K. Cheng, and A. K. Mok. </author> <title> Computer-aided design of real-time rule-based decision systems. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Texas at Austin, </institution> <year> 1988. </year> <note> Also to appear in IEEE Transactions on Software Engineering. </note>
Reference-contexts: With respect to the analysis, there has been little work in the field of synthesis of rule-based real-time expert systems. The method presented in this paper has been developed for the EQL rule-based language introduced by Browne et al. <ref> [2] </ref> and Cheng et al. [6]. They define the response time of a rule-based program as a fixed point convergence time. Efficient algorithms for analyzing the time bounds for rule sets with bounded response time have been developed [5] for this class of programs. <p> The method for EQL program optimization is then introduced in Section 3 and an attempt to evaluate its performance is given by Section 4. Section 5 is the conclusion. 2 Introductory Definitions The class of real-time programs considered in this paper are called equational rule-based EQL programs <ref> [2] </ref>. <p> The above decomposition method was evaluated in [3] and the results encourage us to use this method to substantially reduce the complexity of the optimization process. 3 Method We designed an optimization method (see <ref> [2] </ref>) which takes an original rule-based expert system as input and derives a new optimized expert system.
Reference: [3] <author> A. M. K. Cheng. </author> <title> Parallel execution of real-time rule-based systems. </title> <booktitle> In Proc. IEEE Int. Parallel Processing Symposium, </booktitle> <pages> pages 779-789, </pages> <address> Newport Beach, CA, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: He claims that it would be sufficient to simulate the process in one arbitrarily chosen order and thus reducing the number of states. Cheng <ref> [3] </ref> uses parallel rule execution to achieve higher execution speed in rule-based systems. He defines inter- and intra-rule-set parallelism. The rule-based program is decomposed into inter-dependent sets, rule-sets which do not depend on each other can be executed in parallel. <p> The new rule-based expert system is derived from the constructed transition system. Unlike the methods that use only parallel execution of rules as a means of increasing the performance <ref> [3] </ref>, we also guarantee stability of the synthesized system. Another advantage of the method is that by using the transition system, it can determine the exact upper bound of rule firings. Thus, the analysis of the constructed rule based system by tools described in [5] is no longer needed. <p> Note that in general the transition system of an EQL program can contain cycles and redundant rules, and the fixed point may be unreachable from some of the launch states. 2.3 Decomposition of an EQL Program We refer to decomposition techniques for EQL programs as given in <ref> [3] </ref>, which are based on rule independency. Rule b is said to be independent from rule a if the following conditions hold: I1. L a " L b = ;. I2. rule a does not potentially enable rule b. I3. R b " L a = ;. <p> If the EQL program is guaranteed to reach the fixed point from every launch state, the above uniprocessor rule schedule will guarantee the program will reach a fixed point as well <ref> [3] </ref>. If the optimization technique maintains the assertion about fixed-point reachability for every indepen dent rule-set, each rule-set can be optimized indepen dently. The above decomposition method was evaluated in [3] and the results encourage us to use this method to substantially reduce the complexity of the optimization process. 3 Method <p> from every launch state, the above uniprocessor rule schedule will guarantee the program will reach a fixed point as well <ref> [3] </ref>. If the optimization technique maintains the assertion about fixed-point reachability for every indepen dent rule-set, each rule-set can be optimized indepen dently. The above decomposition method was evaluated in [3] and the results encourage us to use this method to substantially reduce the complexity of the optimization process. 3 Method We designed an optimization method (see [2]) which takes an original rule-based expert system as input and derives a new optimized expert system. <p> Each transition corresponds to the firing of a single rule. To further reduce the number of the states in the transition system, we use the technique that originates from the notion of intra-rule-set parallelism <ref> [3] </ref> and from the idea of utilizing the concurrency for preventing the state explosion [9]. We will allow transitions to be labeled with a set of rules c rather than with single rule r. <p> D3. L r i " R r j = ; and L r j " R r i = ;. D1 follows the idea of intra-ruleset parallelism <ref> [3] </ref>. D2 and D3 guarantee the cycle-free firing of the two rules at primitive states in the expansion state s 0 s;c (for a detailed proof, see [10]).
Reference: [4] <author> A. M. K. Cheng, J. C. Browne, A. K. Mok, and R.-H. Wang. </author> <title> Analysis of real-time rule-based system with behavioral constraint assertions specified in Estella. </title> <journal> IEEE Transactions on Software Engineering, </journal> 19(19) 863-885, September 1993. 
Reference-contexts: The met-rics used are the number of rules fired to reach the fixed point and the complexity of the rules (enabling conditions) before and after the optimization. To evaluate the performance of the non-optimized EQL program, we used the Estella General Analysis Tool <ref> [4] </ref>. Estella determines the upper-bound on the number of rule firings for a cycle-free (stable) EQL program. The complexity of an enabling condition was determined by counting the number of operations (conjunctions, disjunctions and negations) that are to be performed to evaluate the conditions.
Reference: [5] <author> A. M. K. Cheng and C.-H. Chen. </author> <title> Efficient response time bound analysis of real-time rule-based systems. </title> <booktitle> In Proc. 7th Annual IEEE Conf. on Computer Assurance, </booktitle> <pages> pages 63-76, </pages> <publisher> NIST, </publisher> <address> Gaithersburg, Maryland, </address> <year> 1992. </year>
Reference-contexts: They define the response time of a rule-based program as a fixed point convergence time. Efficient algorithms for analyzing the time bounds for rule sets with bounded response time have been developed <ref> [5] </ref> for this class of programs. Our method is based on the identification of the finite state transition system for the original rule-based program. Due to the nontrivial nature of expert systems, the combinatorial explosion of states may threaten the implementability of such an approach. <p> Another advantage of the method is that by using the transition system, it can determine the exact upper bound of rule firings. Thus, the analysis of the constructed rule based system by tools described in <ref> [5] </ref> is no longer needed. The rest of the paper is organized as follows. The next section briefly describes the syntax and semantics of the EQL rule-based language, the concept of finite state transition system, and EQL program decomposition techniques.
Reference: [6] <author> A. M. K. Cheng and C.-K. Wang. </author> <title> Fast static analysis of real-time rule-based systems to verify their fixed point convergence. </title> <booktitle> In Proc. 5th Annual IEEE Conf. on Computer Assurance, </booktitle> <pages> pages 197-203, </pages> <publisher> NIST, </publisher> <address> Gaithersburg, Maryland, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: With respect to the analysis, there has been little work in the field of synthesis of rule-based real-time expert systems. The method presented in this paper has been developed for the EQL rule-based language introduced by Browne et al. [2] and Cheng et al. <ref> [6] </ref>. They define the response time of a rule-based program as a fixed point convergence time. Efficient algorithms for analyzing the time bounds for rule sets with bounded response time have been developed [5] for this class of programs. <p> The optimization does not alter the action part of the rules. For this reason, the complexity of the action part has not been considered in this analysis. In <ref> [6] </ref>, Estella was used to analyze the Integrated Status Assessment Expert System (ISA) and the Fuel Cell Monitoring Expert System (FCE). For both expert systems Estella identifies the cycles of rule-firings and therefore is not able to determine the number of rules to be fired to reach a fixed point.
Reference: [7] <author> L. B. Eliot. </author> <title> If it works, is it good? AI Expert, </title> <booktitle> 7(6) </booktitle> <pages> 9-11, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Validation and verification is becoming a very important phase in the life cycle of an expert system <ref> [7] </ref>. This is particularly true for real-time expert systems. Apart from functional correctness, a real-time expert system must also satisfy stringent timing constraints. Rule-based real-time expert systems are investigated herein.
Reference: [8] <author> S. Kirkpatrick, C. D. Gelatt, and M. P. Vecchi. </author> <title> Optimization by simulated annealing. </title> <journal> Science, </journal> <volume> 220 </volume> <pages> 671-680, </pages> <year> 1983. </year>
Reference-contexts: The problem of enabling condition complexity can be solved by iteratively changing the generated T R s and observing the impact of the changes by synthesizing the output EQL program. We are considering simulated annealing <ref> [8] </ref> to be an appropriate method to be used for the optimization. 4 Experimental Results To demonstrate the applicability of our method, we used it to optimize several EQL programs.
Reference: [9] <author> A. A. Valmari. </author> <title> A stubborn attack on state explosion. </title> <editor> In E. M. Clarke and R. P. Kur-shan, editors, </editor> <booktitle> Proc. 2nd Int'l Conference on on Computer-Aided Verification, </booktitle> <pages> pages 156-165, </pages> <address> New Brunswick, NJ, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: The final states in such a graph are called stable states and may represent more than one basic state of an entirely generated graph. A stubborn attack on state explosion by Valmari is another method for state reduction. In <ref> [9] </ref> he argues that con-currency is the major contributor to state explosion. <p> Each transition corresponds to the firing of a single rule. To further reduce the number of the states in the transition system, we use the technique that originates from the notion of intra-rule-set parallelism [3] and from the idea of utilizing the concurrency for preventing the state explosion <ref> [9] </ref>. We will allow transitions to be labeled with a set of rules c rather than with single rule r.
Reference: [10] <author> B. Zupan. </author> <title> Optimization of real-time rule-based systems using state-space diagrams. </title> <type> Master's thesis, </type> <institution> University of Houston, Department of Computer Science, </institution> <year> 1993. </year>
Reference-contexts: D1 follows the idea of intra-ruleset parallelism [3]. D2 and D3 guarantee the cycle-free firing of the two rules at primitive states in the expansion state s 0 s;c (for a detailed proof, see <ref> [10] </ref>). While the introduction of multiple-rule transitions minimizes the number of states in the transition system, we can not determine the tight response time (maximum number of rules to be fired to reach the fixed point) for such system directly.
References-found: 10

