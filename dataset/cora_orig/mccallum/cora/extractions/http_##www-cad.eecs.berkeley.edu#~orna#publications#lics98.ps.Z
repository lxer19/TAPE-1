URL: http://www-cad.eecs.berkeley.edu/~orna/publications/lics98.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/~orna/pub.html
Root-URL: 
Email: Email: vardi@cs.rice.edu,  
Title: Freedom, Weakness, and Determinism: From Linear-time to Branching-time  
Author: Orna Kupferman Moshe Y. Vardi 
Web: URL: http://www.cs.rice.edu/  
Address: Hous-ton TX 77005-1892, U.S.A.  
Note: Address:  vardi. Supported in part by NSF grants CCR-9628400 and CCR-9700061, and by a grant from the Intel Corporation.  
Affiliation: UC Berkeley  Rice University  CS Department, Rice University,  
Abstract: Model checking is a method for the verification of systems with respect to their specifications. Symbolic model-checking, which enables the verification of large systems, proceeds by calculating fixed-point expressions over the system's set of states. The -calculus is a branching-time temporal logic with fixed-point operators. As such, it is a convenient logic for symbolic model-checking tools. In particular, the alternation-free fragment of -calculus has a restricted syntax, making the symbolic evaluation of its formulas computationally easy. Formally, it takes time that is linear in the size of the system. On the other hand, specifiers find the -calculus inconvenient. In addition, specifiers often prefer to use linear-time formalisms. Such formalisms, however, cannot in general be translated to the alternation-free -calculus, and their symbolic evaluation involves nesting of fixed-points, resulting in time complexity that is quadratic in the size of the system. In this paper we characterize linear-time properties that can be specified in the alternation-free -calculus. We show that a linear-time property can be specified in the alternation-free -calculus iff it can be recognized fl Address: EECS Department, UC Berkeley, Berkeley CA 94720-1770, U.S.A. Email: orna@eecs.berkeley.edu, URL: http://www.eecs.berkeley.edu/ ~ orna. Supported in part by ONR YIP award N00014-95-1-0520, by NSF CAREER award CCR-9501708, by NSF grant CCR-9504469, by AFOSR contract F49620-93-1-0056, by ARO MURI grant DAAH-04-96-1-0341, by ARPA grant NAG2-892, and by the SRC contract 95-DC-324.036. by a deterministic Buchi automaton. We study the problem of deciding whether a linear-time property, specified by either an automaton or an LTL formula, can be translated to an alternation-free -calculus formula, and describe the translation, when exists. 
Abstract-found: 1
Intro-found: 1
Reference: [AN92] <author> A. Arnold and D. Niwinski. </author> <title> Fixed point characterization of weak monadic logic definable sets of trees. </title> <booktitle> In Tree Automata and Languages, </booktitle> <pages> pp. 159-188, </pages> <address> Amster-dam, 1992. </address> <publisher> Elsevier. </publisher>
Reference-contexts: Weak alternating tree automata were first introduced in [MSS86], where they were related to weakly definable sets [Rab70]. The relevance of weak alternating automata to model checking was demonstrated in [BVW94]. The equivalence of AFMC and weak alternating automata is proved also in <ref> [AN92] </ref>, where both formalisms are shown to be equivalent to the weak monadic second-order theory of trees [Rab70, MSS86]. Our proof is simpler and direct, and we describe linear translations between the two formalisms. <p> This is a doubly exponential improvement of the translations that follow from <ref> [AN92] </ref> and [VW94]. We now characterize !-regular languages L for which der (L) can be characterized by an AFMC formula. Since trees in der (L) are defined by means of a universal requirement on their paths, we do not need directed AFMC.
Reference: [BC96] <author> G. Bhat and R. Cleavland. </author> <title> Efficient model checking via the equational - calculus. </title> <booktitle> In Proc. 11th IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pp. 304-312, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Proof: A linear translation of AFMC (d) formulas to AWT (d) is given in [BVW94]. For the other direction, we describe a linear translation of AWT (d) to AFMC (d) formulas. The translation is similar to the one described in <ref> [BC96] </ref>, where ABT are translated to -calculus formulas of alternation depth 2. Consider an AWT (d) A = h; d; Q; q 0 ; ffi; ffi. Let Q 0 Q 1 Q n be the partition of Q into sets.
Reference: [BCM + 92] <author> J.R. Burch, E.M. Clarke, K.L. McMil-lan, D.L. Dill, and L.J. Hwang. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <journal> Information and Computation, </journal> <volume> 98(2) </volume> <pages> 142-170, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Commercial model-checking tools need to cope with the exceedingly large state-spaces that are present in real-life designs, making the so-called state-explosion problem one of the most challenging areas in computer-aided verification. One of the most important developments in this area is the discovery of symbolic model-checking methods <ref> [BCM + 92, McM93] </ref>. In particular, the use of BDDs [Bry86] for model representation has yielded model-checking tools that can handle sys-tems with 10 120 states and beyond [CGL93]. Typically, symbolic model-checking tools proceed by computing fixed-point expressions over the model's set of states.
Reference: [BHSS + 96] <author> R.K. Brayton, G.D. Hachtel, A. Sangiovanni-Vincentelli, F. Somenzi, A. Aziz, S. Cheng, S. Edwards, S. Khatri, T. Kukimoto, A. Pardo, S. Qadeer, R. Ranjan, S. Sarwary, T. Shiple, G. Swamy, and T. Villa. </author> <title> VIS: a system for verification and synthesis. </title> <booktitle> In Computer Aided Verification, Proc. 8th Int. Conference, </booktitle> <volume> LNCS 1102, </volume> <pages> pp. 428-432, </pages> <year> 1996. </year>
Reference-contexts: Consequently, model-checking tools often offer as their user interface a temporal logic that includes explicit temporal operators. The evaluation of these formulas by means of fixed points is then transparent to the user. When, as in the model-checking tools SMV and VIS <ref> [McM93, BHSS + 96] </ref>, the interface logic is the branching-time temporal logic CTL, the transition from the input formulas to fixed-point expressions is simple: each operator of CTL can be expressed also be means of fixed points. <p> For example, the CTL formula 8293p is equivalent to the AFMC formula -X:(Y:p _ 9 f Y ) ^ 8 f X. Designers, however, often prefer to specify their systems using linear-time formalisms. Indeed, model-checking tools such as COSPAN, SPIN, and VIS <ref> [Kur94, HHK96, Hol97, BHSS + 96] </ref> han dle specifications that are given as automata on infinite words or LTL formulas.
Reference: [Bry86] <author> R.E. Bryant. </author> <title> Graph-based algorithms for boolean-function manipulation. </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-35(8), </volume> <year> 1986. </year>
Reference-contexts: One of the most important developments in this area is the discovery of symbolic model-checking methods [BCM + 92, McM93]. In particular, the use of BDDs <ref> [Bry86] </ref> for model representation has yielded model-checking tools that can handle sys-tems with 10 120 states and beyond [CGL93]. Typically, symbolic model-checking tools proceed by computing fixed-point expressions over the model's set of states.
Reference: [Buc62] <author> J.R. Buchi. </author> <title> On a decision method in restricted second order arithmetic. </title> <booktitle> In Proc. Internat. Congr. Logic, Method and Phi-los. Sci. </booktitle> <year> 1960, </year> <pages> pp. 1-12, </pages> <address> Stanford, 1962. </address> <publisher> Stanford University Press. </publisher>
Reference-contexts: We then use known relations between automata on infinite words and trees [KSV96] in order to show that an !-regular language L can be translated to an AFMC formula iff L can be recognized by a deterministic Buchi word automaton <ref> [Buc62] </ref>. It follows from our results that deciding whether a linear-time property P can be translated to an AFMC formula can be reduced to the problem of deciding whether P can be recognized by a deterministic Buchi word automaton.
Reference: [BVW94] <author> O. Bernholtz, M.Y. Vardi, and P. Wolper. </author> <title> An automata-theoretic approach to branching-time model checking. </title> <booktitle> Computer Aided Verification, Proc. 6th Int. Conference, </booktitle> <volume> LNCS 818, </volume> <pages> pp. 142-155, </pages> <year> 1994. </year>
Reference-contexts: Since linear-time formalisms such as LTL can express properties that are not expressible in AFMC (e.g., it follows from the results in <ref> [Rab70, MSS86, BVW94] </ref>, that the LTL formula 32p is not expressible in AFMC), symbolic model-checking methods become more complicated. For example, symbolic model checking of LTL involves a translation of LTL formulas to -calculus formulas of alternation depth 2, where nesting of fixed-point operators is allowed [EL86]. <p> Weak alternating tree automata were first introduced in [MSS86], where they were related to weakly definable sets [Rab70]. The relevance of weak alternating automata to model checking was demonstrated in <ref> [BVW94] </ref>. The equivalence of AFMC and weak alternating automata is proved also in [AN92], where both formalisms are shown to be equivalent to the weak monadic second-order theory of trees [Rab70, MSS86]. Our proof is simpler and direct, and we describe linear translations between the two formalisms. <p> Proof: A linear translation of AFMC (d) formulas to AWT (d) is given in <ref> [BVW94] </ref>. For the other direction, we describe a linear translation of AWT (d) to AFMC (d) formulas. The translation is similar to the one described in [BC96], where ABT are translated to -calculus formulas of alternation depth 2. <p> For the lower bound, consider again the language L n from Theorem 5.2. We prove that an NBT for the language der 2 (L n ) needs to have at least 2 2 n states. Then, since AFMC formulas have a linear translation to AWT <ref> [BVW94] </ref>, and therefore also an exponential translation to NBT [MSS86], we are done. Let S = f0; 1g n be the set of all words over f0; 1g of length n.
Reference: [CD88] <author> E.M. Clarke and I.A. Draghicescu. </author> <title> Ex-pressibility results for linear-time and branching-time logics. In Proc. Workshop on Linear Time, Branching Time, and Partial Order in Logics and Models for Concurrency, </title> <publisher> LNCS 354, </publisher> <pages> pp. 428-437, </pages> <year> 1988. </year>
Reference-contexts: Beyond the relevance of this problem to symbolic model checking, the study of the relationship between linear-time and branching-time formalisms goes back to the 1980's. In <ref> [CD88] </ref>, Clarke and Draghicescu characterized CTL formulas that can be translated to LTL. The opposite direction, of characterizing LTL formulas that can be translated to CTL, turned out to be much harder and the problem has stayed open since then.
Reference: [CE81] <author> E.M. Clarke and E.A. Emerson. </author> <title> Design and synthesis of synchronization skeletons using branching time temporal logic. </title> <booktitle> In Proc. Workshop on Logic of Programs, </booktitle> <volume> LNCS 131, </volume> <pages> pp. 52-71, </pages> <year> 1981. </year>
Reference-contexts: While testing has once been considered a satisfying method for detecting bugs, today's rapid development of complex and safety-critical systems requires more reliable methods. Model checking is such a more reliable method. In model checking <ref> [CE81, CES86, QS81, LP85, VW86] </ref>, we check that a system meets a desired requirement by checking that a mathematical model of the system satisfies a formal specification that describes the requirement. The algorithmic nature of model checking makes it fully automatic, convenient to use, and very attractive to practitioners.
Reference: [CES86] <author> E.M. Clarke, </author> <title> E.A. Emerson, and A.P. Sistla. Automatic verification of finite-state concurrent systems using temporal logic specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <month> January </month> <year> 1986. </year>
Reference-contexts: While testing has once been considered a satisfying method for detecting bugs, today's rapid development of complex and safety-critical systems requires more reliable methods. Model checking is such a more reliable method. In model checking <ref> [CE81, CES86, QS81, LP85, VW86] </ref>, we check that a system meets a desired requirement by checking that a mathematical model of the system satisfies a formal specification that describes the requirement. The algorithmic nature of model checking makes it fully automatic, convenient to use, and very attractive to practitioners.
Reference: [CGL93] <author> E.M. Clarke, O. Grumberg, and D. </author> <title> Long. Verification tools for finite-state concurrent systems. </title> <editor> In J.W. de Bakker, W.- P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Decade of Concurrency - Reflections and Perspectives (Proceedings of REX School), </booktitle> <volume> LNCS 803, </volume> <pages> pp. 124-175, </pages> <year> 1993. </year>
Reference-contexts: One of the most important developments in this area is the discovery of symbolic model-checking methods [BCM + 92, McM93]. In particular, the use of BDDs [Bry86] for model representation has yielded model-checking tools that can handle sys-tems with 10 120 states and beyond <ref> [CGL93] </ref>. Typically, symbolic model-checking tools proceed by computing fixed-point expressions over the model's set of states.
Reference: [CKS81] <author> A.K. Chandra, D.C. Kozen, and L.J. Stockmeyer. </author> <title> Alternation. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 28(1) </volume> <pages> 114-133, </pages> <month> January </month> <year> 1981. </year>
Reference-contexts: By <ref> [CKS81] </ref>, the smallest deterministic automaton on finite words that accepts L n has at least 2 2 n states (reaching the $, the automaton should remember the possible set of words in f0; 1g n that have appeared before).
Reference: [CS91] <author> R. Cleaveland and B. Steffen. </author> <title> A linear-time model-checking algorithm for the alternation-free modal -calculus. </title> <booktitle> In Proc. 3rd Conference on Computer Aided Verification, </booktitle> <volume> volume LNCS 575, </volume> <pages> pp. 48-58, </pages> <year> 1991. </year>
Reference-contexts: Formally, the model-checking problem for AFMC can be solved in time that is linear in both the size of the model and the length of the formula <ref> [CS91] </ref>. The -calculus, however, is less ideal for specifiers. For them, logics with explicit temporal operators, such as 2 ("always") and 3 ("eventually") are much more readable and convenient. Consequently, model-checking tools often offer as their user interface a temporal logic that includes explicit temporal operators. <p> For the full definition of LTL see [Pnu81]. The alternation-free -calculus (AFMC, for short) is a fragment of the modal logics -calculus [Koz83]. We define the AFMC by means of equational blocks, as in <ref> [CS91] </ref>. Formulas of AFMC are defined with respect to a set P of atomic propositions and a set Var of atomic variables. <p> For a set of blocks, evaluation proceeds so that whenever a block B is evaluated, all the blocks B 0 for which B depends on B 0 are already evaluated, thus all the free variables in B have values in V. For the full definition see <ref> [CS91] </ref>. Given a system S and an LTL formula ', the model-checking problem for S and ' is to deter mine whether all the initial computations of S satisfy '.
Reference: [EL85] <author> E.A. Emerson and C.-L. Lei. </author> <title> Temporal model checking under generalized fairness constraints. </title> <booktitle> In Proc. 18th Hawaii International Conference on System Sciences, North Holywood, 1985. </booktitle> <publisher> Western Periodicals Company. </publisher>
Reference-contexts: The lower bound for parity automata follows by an easy reduction from the graph reachability problem. We prove here the lower bound for Ra-bin and Streett automata. For Streett automata, we do a reduction from DSW emptiness, proved to be PTIME-complete in <ref> [EL85] </ref>. Given a DSW S, we define another DSW A such that S is empty iff A is in DBW. Let S = h; Q; q 0 ; ffi; ffi, and let 0 ; ffi 0 ; ff 0 i be a DSW for L fm .
Reference: [EL86] <author> E.A. Emerson and C.-L. Lei. </author> <title> Efficient model checking in fragments of the pro-posoitional Mu-calculus. </title> <booktitle> In Proc. 1st Symposium on Logic in Computer Science, </booktitle> <pages> pp. 267-278, </pages> <year> 1986. </year>
Reference-contexts: The -calculus is a logic that contains the modal operators 9 f and 8 f , and the fixed-point operators and - [Koz83]. As such, it describes fixed-point computations in a natural form. In particular, the alternation-free frage-ment of -calculus (AFMC, for short) <ref> [EL86] </ref> has a restricted syntax that does not allow nesting of fixed-point operators, making the evaluation of expressions very simple. Formally, the model-checking problem for AFMC can be solved in time that is linear in both the size of the model and the length of the formula [CS91]. <p> For example, symbolic model checking of LTL involves a translation of LTL formulas to -calculus formulas of alternation depth 2, where nesting of fixed-point operators is allowed <ref> [EL86] </ref>. The evaluation of such -calculus formulas takes time that is quadratic in the size of the model. Since the models are very large, the difference with the linear complexity of AFMC is very significant [HKSV97]. <p> It should be noted that the translation of LTL formulas to -calculus formulas of alternation depth 2 involves only a single exponential blow up <ref> [EL86] </ref>. Typically, however, the computational complexity of model checking is dominated by the size of the model, rather than the size of the specification.
Reference: [ES84] <author> A.E. Emerson and A.P. Sistla. </author> <title> Deciding full branching time logics. </title> <journal> Information and Control, </journal> <volume> 61(3) </volume> <pages> 175-201, </pages> <year> 1984. </year>
Reference-contexts: The formula A is has as its 1 Alternatively, we could give up the directions and assume that the language of the AWT is symmetric <ref> [ES84] </ref>. Then, however, the translation described in Theorem 3.1 requires the formulas in the transition function of the AWT to be in DNF, and may therefore involve an exponential blow up. set of atomic propositions. Each state q 2 Q induces an atomic variable X q .
Reference: [HHK96] <author> R.H. Hardin, Z. Har'el, and R.P. Kur-shan. COSPAN. </author> <booktitle> In Computer Aided Verification, Proc. 8th Int. Conference, </booktitle> <volume> LNCS 1102, </volume> <pages> pp. 423-427, </pages> <year> 1996. </year>
Reference-contexts: For example, the CTL formula 8293p is equivalent to the AFMC formula -X:(Y:p _ 9 f Y ) ^ 8 f X. Designers, however, often prefer to specify their systems using linear-time formalisms. Indeed, model-checking tools such as COSPAN, SPIN, and VIS <ref> [Kur94, HHK96, Hol97, BHSS + 96] </ref> han dle specifications that are given as automata on infinite words or LTL formulas.
Reference: [HKSV97] <author> R.H. Hardin, R.P. Kurshan, S.K. Shukla, and M.Y. Vardi. </author> <title> A new heuristic for bad cycle detection using BDDs. </title> <booktitle> In Computer Aided Verification, Proc. 9th Int. Conference, </booktitle> <volume> LNCS 1254, </volume> <pages> pp. 268-278, </pages> <year> 1997. </year>
Reference-contexts: The evaluation of such -calculus formulas takes time that is quadratic in the size of the model. Since the models are very large, the difference with the linear complexity of AFMC is very significant <ref> [HKSV97] </ref>. In this paper we consider the problem of translating linear-time formalisms to AFMC; formally, we characterize !-regular languages for which there exist equivalent AFMC formulas. Note that while each !-regular language L describes a set of infinite words, each AFMC formula describes a set of infinite trees.
Reference: [Hol97] <author> G.J. Holzmann. </author> <title> The model checker SPIN. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 23(5) </volume> <pages> 279-295, </pages> <month> May </month> <year> 1997. </year> <note> Special issue on Formal Methods in Software Practice. </note>
Reference-contexts: For example, the CTL formula 8293p is equivalent to the AFMC formula -X:(Y:p _ 9 f Y ) ^ 8 f X. Designers, however, often prefer to specify their systems using linear-time formalisms. Indeed, model-checking tools such as COSPAN, SPIN, and VIS <ref> [Kur94, HHK96, Hol97, BHSS + 96] </ref> han dle specifications that are given as automata on infinite words or LTL formulas.
Reference: [HT87] <author> Th. Hafer and W. Thomas. </author> <title> Computation tree logic CTL ? and path quantifiers in the monadic theory of the binary tree. </title> <booktitle> In Proc. 14th International Coll. on Automata, Languages, and Programming, </booktitle> <volume> LNCS 267, </volume> <pages> pp. 269-279, </pages> <year> 1987. </year>
Reference-contexts: Accordingly, discussion is restricted to trees over some fixed branching degree and the AFMC is directed (that is, the next-time operator is annotated with an explicit direction) <ref> [HT87] </ref>.
Reference: [KG96] <author> O. Kupferman and O. Grumberg. </author> <title> Buy one, get one free!!! Journal of Logic and Computation, </title> <booktitle> 6(4) </booktitle> <pages> 523-539, </pages> <year> 1996. </year>
Reference-contexts: Indeed, a translation of LTL formulas to CTL formulas could be used in order to model check linear-time properties using CTL model-checking tools. A partial success for the above approach is presented in <ref> [KG96, Sch97] </ref>, which identify certain fragments of LTL that can be easily translated to CTL. By characterizing LTL formulas that can be translated to AFMC, we solve a closely related problem.
Reference: [Koz83] <author> D. Kozen. </author> <title> Results on the propositional - calculus. </title> <journal> Theoretical Computer Science, </journal> <volume> 27 </volume> <pages> 333-354, </pages> <year> 1983. </year>
Reference-contexts: Formally, the model checker calculates the least fixed-point of the expression S = p _ 9 f S. The -calculus is a logic that contains the modal operators 9 f and 8 f , and the fixed-point operators and - <ref> [Koz83] </ref>. As such, it describes fixed-point computations in a natural form. In particular, the alternation-free frage-ment of -calculus (AFMC, for short) [EL86] has a restricted syntax that does not allow nesting of fixed-point operators, making the evaluation of expressions very simple. <p> For example, the LTL formula 2 (request ! 3grant) states that every request is followed by a grant. For the full definition of LTL see [Pnu81]. The alternation-free -calculus (AFMC, for short) is a fragment of the modal logics -calculus <ref> [Koz83] </ref>. We define the AFMC by means of equational blocks, as in [CS91]. Formulas of AFMC are defined with respect to a set P of atomic propositions and a set Var of atomic variables.
Reference: [KPB94] <author> S.C. Krishnan, A. Puri, and R.K. Bray-ton. </author> <title> Deterministic !-automata vis-a-vis deterministic Buchi automata. In Algorithms and Computations, </title> <publisher> LNCS 834, </publisher> <pages> pp. 378-386, </pages> <year> 1994. </year>
Reference-contexts: Theorem 4.1 (1) Deciding DPW 7! DBW is NLOGSPACE complete. (2) Deciding fDRW,DSWg 7! DBW is PTIME complete. Proof: We start with the upper bounds. The proof for Rabin and Streett automata is given in <ref> [KPB94] </ref>. Consider a DPW A = h; Q; q 0 ; ffi; ffi. A state q 2 Q is called final iff all the cycles that visit q are accepting. <p> According to Landweber [Lan69], a deterministic automaton A recognizes a language that is in DBW iff for every accepting strongly connected component C of A, all the strongly connected component C 0 with C 0 C are also accepting. This condition is used in <ref> [KPB94] </ref> in order to prove that A is in DBW iff the automaton A 0 obtained from A by changing ff to be the set of final states is equivalent to A. <p> Theorem 4.3 When exists, the translation (1) fDBW,DPW,DRWg 7! AFMC is linear. (2) DSW 7! AFMC is polynomial. (3) fNBW,NPW,NRW,NSWg 7! AFMC is ex ponential. Proof: A linear translation of DBW to AFMC is described in the proof of Theorem 3.3. It is proved in <ref> [KPB94] </ref>, that if a DRW A is in DBW, then it has a DBW of the same size. When A is in DSW, its translation to DBW, when exists, involves a polynomial blow up [KPB95]. Hence the bounds for DPW, DRW, and DSW.
Reference: [KPB95] <author> S.C. Krishnan, A. Puri, and R.K. Brayton. </author> <title> Structural complexity of !- automata. </title> <booktitle> In Symposium on Theoretical Aspects of Computer Science, LNCS 900, </booktitle> <year> 1995. </year>
Reference-contexts: It is proved in [KPB94], that if a DRW A is in DBW, then it has a DBW of the same size. When A is in DSW, its translation to DBW, when exists, involves a polynomial blow up <ref> [KPB95] </ref>. Hence the bounds for DPW, DRW, and DSW. All the types of nondeterministic automata A in (3) have an exponential translation to DRW [Saf88, Saf92]. Therefore, by (1), if A is in DBW, it has an exponential equivalent AFMC formula.
Reference: [KPBV95] <author> S.C. Krishnan, A. Puri, R.K. Brayton, </author> <title> and P.P. Varaiya. The Rabin index and chain automata, with applications to automata and games. </title> <booktitle> In Computer Aided Verification, Proc. 7th Int. Conference, </booktitle> <volume> LNCS 939, </volume> <pages> pp. 253-266, </pages> <year> 1995. </year>
Reference-contexts: Let N be either a NRW or a NSW with n states and h pairs. By [Saf88, Saf89], in both cases we can translate N to a DRW with 2 O (nh log nh) states and nh pairs. It is shown in <ref> [KPBV95] </ref> that a DRW with m states and k pairs can be translated to a DPW with at most m 2 k log k states and k sets. Accordingly, we can translate N also to a DPW with 2 O (nh log nh) states and nh sets.
Reference: [KSV96] <author> O. Kupferman, S. Safra, and M.Y. Vardi. </author> <title> Relating word and tree automata. </title> <booktitle> In Proc. 11th IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pp. 322-333, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Our proof is simpler and direct, and we describe linear translations between the two formalisms. We then use known relations between automata on infinite words and trees <ref> [KSV96] </ref> in order to show that an !-regular language L can be translated to an AFMC formula iff L can be recognized by a deterministic Buchi word automaton [Buc62]. <p> It is proved in [MSS86] that if a language of trees can be recognized by an AWT (2), then it can also be recognized by an NBT (2). It follows that der 2 (L) can be recognized by an NBT (2). It is proved in <ref> [KSV96] </ref> that for every !-regular language R, if der 2 (R) can be recognized by an NBT (2), then R can be recognized by a DBW. It follows that L can be recognized by a DBW. Assume now that L can be recognized by a DBW.
Reference: [Kur94] <author> R.P. Kurshan. </author> <title> Computer Aided Verification of Coordinating Processes. </title> <publisher> Princeton Univ. Press, </publisher> <year> 1994. </year>
Reference-contexts: For example, the CTL formula 8293p is equivalent to the AFMC formula -X:(Y:p _ 9 f Y ) ^ 8 f X. Designers, however, often prefer to specify their systems using linear-time formalisms. Indeed, model-checking tools such as COSPAN, SPIN, and VIS <ref> [Kur94, HHK96, Hol97, BHSS + 96] </ref> han dle specifications that are given as automata on infinite words or LTL formulas.
Reference: [KV97] <author> O. Kupferman and M.Y. Vardi. </author> <title> Weak alternating automata are not that weak. </title> <booktitle> In Proc. 5th Israeli Symposium on Theory of Computing and Systems, </booktitle> <pages> pp. 147-158. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1997. </year>
Reference-contexts: Accepting sets induce greatest fixed-point blocks and rejecting blocks induce least fixed-point blocks. Since A is weak, the structure of the blocks in A satisfies the syntactic restrictions of the AFMC. Remark 3.2 It is proved in <ref> [KV97] </ref> that alternating Buchi word automata can be translated to weak alternating word automata with a quadratic blow up.
Reference: [Lan69] <author> L.H. </author> <title> Landweber. Decision problems for !-automata. </title> <journal> Mathematical Systems Theory, </journal> <volume> 3 </volume> <pages> 376-384, </pages> <year> 1969. </year>
Reference-contexts: The proof for Rabin and Streett automata is given in [KPB94]. Consider a DPW A = h; Q; q 0 ; ffi; ffi. A state q 2 Q is called final iff all the cycles that visit q are accepting. According to Landweber <ref> [Lan69] </ref>, a deterministic automaton A recognizes a language that is in DBW iff for every accepting strongly connected component C of A, all the strongly connected component C 0 with C 0 C are also accepting. <p> The proof is very similar to the one showing that L fm is not in DBW (c.f., [Tho90]), only that we have to accompany the words in f0; 1g ! with some word accepted by S. Assume, by way of contradiction, that L (A) is in DBW. Then, by <ref> [Lan69] </ref>, there exists a regular language F such that L (A) = lim (F ); that is L (A) = fw : w has infinitely many prefixes in F g. Let w be a word accepted by S.
Reference: [LP85] <author> O. Lichtenstein and A. Pnueli. </author> <title> Checking that finite state concurrent programs satisfy their linear specification. </title> <booktitle> In Proc. 12th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 97-107, </pages> <address> New Orleans, </address> <month> January </month> <year> 1985. </year>
Reference-contexts: While testing has once been considered a satisfying method for detecting bugs, today's rapid development of complex and safety-critical systems requires more reliable methods. Model checking is such a more reliable method. In model checking <ref> [CE81, CES86, QS81, LP85, VW86] </ref>, we check that a system meets a desired requirement by checking that a mathematical model of the system satisfies a formal specification that describes the requirement. The algorithmic nature of model checking makes it fully automatic, convenient to use, and very attractive to practitioners.
Reference: [McM93] <author> K.L. McMillan. </author> <title> Symbolic model checking. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: Commercial model-checking tools need to cope with the exceedingly large state-spaces that are present in real-life designs, making the so-called state-explosion problem one of the most challenging areas in computer-aided verification. One of the most important developments in this area is the discovery of symbolic model-checking methods <ref> [BCM + 92, McM93] </ref>. In particular, the use of BDDs [Bry86] for model representation has yielded model-checking tools that can handle sys-tems with 10 120 states and beyond [CGL93]. Typically, symbolic model-checking tools proceed by computing fixed-point expressions over the model's set of states. <p> Consequently, model-checking tools often offer as their user interface a temporal logic that includes explicit temporal operators. The evaluation of these formulas by means of fixed points is then transparent to the user. When, as in the model-checking tools SMV and VIS <ref> [McM93, BHSS + 96] </ref>, the interface logic is the branching-time temporal logic CTL, the transition from the input formulas to fixed-point expressions is simple: each operator of CTL can be expressed also be means of fixed points.
Reference: [Mic88] <author> M. Michel. </author> <title> Complementation is more difficult with automata on infinite words. </title> <address> CNET, Paris, </address> <year> 1988. </year>
Reference-contexts: Hence the bounds for DPW, DRW, and DSW. All the types of nondeterministic automata A in (3) have an exponential translation to DRW [Saf88, Saf92]. Therefore, by (1), if A is in DBW, it has an exponential equivalent AFMC formula. It follows from <ref> [Mic88] </ref> that the exponential translation from nondeterministic automata to DBW cannot be improved. This, however, does not imply an exponential lower bound for the translation to the AFMC. 5 From LTL to AFMC In this section we consider the case where specifications are given by LTL formulas.
Reference: [MS72] <author> A.R. Meyer and L.J. Stockmeyer. </author> <title> The equivalence problem for regular expressions with squaring requires exponential time. </title> <booktitle> In Proc. 13th IEEE Symp. on Switching and Automata Theory, </booktitle> <pages> pp. 125-129, </pages> <year> 1972. </year>
Reference-contexts: We now prove the lower bound. Since Buchi automata are a special case of parity, Rabin, and Streett automata, we describe the proof for NBW. We do a reduction from NBW universality, proved to be PSPACE-hard in <ref> [MS72, Wol82] </ref>. Given an NBW B, we define another NBW A such that B is universal iff A is in DBW.
Reference: [MS87] <author> D.E. Muller and P.E. Schupp. </author> <title> Alternating automata on infinite trees. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 54,:267-276, </address> <year> 1987. </year>
Reference-contexts: For d 2, we denote by der d (L) the set of -labeled d-trees in der (L). For a system S with branching degrees in d, we denote by tree (S) the 2 P -labeled d-tree obtained by unwinding S from its initial state. An alternating tree automaton <ref> [MS87] </ref> A = h; d; Q; q 0 ; ffi; ffi runs on -labeled d-trees. It consists of a finite set Q of states, an initial state q 0 2 Q, a transition function ffi, and an acceptance condition ff (a condition that defines a subset of Q ! ).
Reference: [MSS86] <author> D.E. Muller, A. Saoudi, and P.E. Schupp. </author> <title> Alternating automata, the weak monadic theory of the tree and its complexity. </title> <booktitle> In Proc. 13th Int. Colloquium on Automata, Languages and Programming, </booktitle> <year> 1986. </year>
Reference-contexts: Since linear-time formalisms such as LTL can express properties that are not expressible in AFMC (e.g., it follows from the results in <ref> [Rab70, MSS86, BVW94] </ref>, that the LTL formula 32p is not expressible in AFMC), symbolic model-checking methods become more complicated. For example, symbolic model checking of LTL involves a translation of LTL formulas to -calculus formulas of alternation depth 2, where nesting of fixed-point operators is allowed [EL86]. <p> We show that a branching-time property can be specified in AFMC iff it can be specified by a weak alternating tree automaton. Weak alternating tree automata were first introduced in <ref> [MSS86] </ref>, where they were related to weakly definable sets [Rab70]. The relevance of weak alternating automata to model checking was demonstrated in [BVW94]. <p> The relevance of weak alternating automata to model checking was demonstrated in [BVW94]. The equivalence of AFMC and weak alternating automata is proved also in [AN92], where both formalisms are shown to be equivalent to the weak monadic second-order theory of trees <ref> [Rab70, MSS86] </ref>. Our proof is simpler and direct, and we describe linear translations between the two formalisms. <p> For example, DBW denotes deterministic Buchi word automata, as well as the set of !-regular languages that can be recognized by a deterministic word automaton. Which interpretation we refer to would be clear from the context. In <ref> [MSS86] </ref>, Muller et al. introduce weak alternating tree automata (AWT). <p> L can be characterized by a DBW. Proof: Assume first that der (L) has an equiv-alent AFMC formula. Then, der 2 (L) has an equivalent AFMC (2) formula and therefore, by Theorem 3.1, der 2 (L) can be recognized by an AWT (2). It is proved in <ref> [MSS86] </ref> that if a language of trees can be recognized by an AWT (2), then it can also be recognized by an NBT (2). It follows that der 2 (L) can be recognized by an NBT (2). <p> We prove that an NBT for the language der 2 (L n ) needs to have at least 2 2 n states. Then, since AFMC formulas have a linear translation to AWT [BVW94], and therefore also an exponential translation to NBT <ref> [MSS86] </ref>, we are done. Let S = f0; 1g n be the set of all words over f0; 1g of length n.
Reference: [Pnu81] <author> A. Pnueli. </author> <title> The temporal semantics of concurrent programs. </title> <journal> Theoretical Computer Science, </journal> <volume> 13 </volume> <pages> 45-60, </pages> <year> 1981. </year>
Reference-contexts: The temporal operators 2 ("always"), 3 ("eventually"), f ("next"), and U ("until") enable convenient description of time-dependent events. For example, the LTL formula 2 (request ! 3grant) states that every request is followed by a grant. For the full definition of LTL see <ref> [Pnu81] </ref>. The alternation-free -calculus (AFMC, for short) is a fragment of the modal logics -calculus [Koz83]. We define the AFMC by means of equational blocks, as in [CS91]. Formulas of AFMC are defined with respect to a set P of atomic propositions and a set Var of atomic variables.
Reference: [QS81] <author> J.P. Queille and J. Sifakis. </author> <title> Specification and verification of concurrent systems in Cesar. </title> <booktitle> In Proc. 5th International Symp. on Programming, </booktitle> <volume> LNCS 137, </volume> <pages> pp. 337-351, </pages> <year> 1981. </year>
Reference-contexts: While testing has once been considered a satisfying method for detecting bugs, today's rapid development of complex and safety-critical systems requires more reliable methods. Model checking is such a more reliable method. In model checking <ref> [CE81, CES86, QS81, LP85, VW86] </ref>, we check that a system meets a desired requirement by checking that a mathematical model of the system satisfies a formal specification that describes the requirement. The algorithmic nature of model checking makes it fully automatic, convenient to use, and very attractive to practitioners.
Reference: [Rab70] <author> M.O. Rabin. </author> <title> Weakly definable relations and special automata. </title> <booktitle> In Proc. Symp. Math. Logic and Foundations of Set Theory, </booktitle> <pages> pp. 1-23. </pages> <publisher> North Holland, </publisher> <year> 1970. </year>
Reference-contexts: Since linear-time formalisms such as LTL can express properties that are not expressible in AFMC (e.g., it follows from the results in <ref> [Rab70, MSS86, BVW94] </ref>, that the LTL formula 32p is not expressible in AFMC), symbolic model-checking methods become more complicated. For example, symbolic model checking of LTL involves a translation of LTL formulas to -calculus formulas of alternation depth 2, where nesting of fixed-point operators is allowed [EL86]. <p> We show that a branching-time property can be specified in AFMC iff it can be specified by a weak alternating tree automaton. Weak alternating tree automata were first introduced in [MSS86], where they were related to weakly definable sets <ref> [Rab70] </ref>. The relevance of weak alternating automata to model checking was demonstrated in [BVW94]. The equivalence of AFMC and weak alternating automata is proved also in [AN92], where both formalisms are shown to be equivalent to the weak monadic second-order theory of trees [Rab70, MSS86]. <p> The relevance of weak alternating automata to model checking was demonstrated in [BVW94]. The equivalence of AFMC and weak alternating automata is proved also in [AN92], where both formalisms are shown to be equivalent to the weak monadic second-order theory of trees <ref> [Rab70, MSS86] </ref>. Our proof is simpler and direct, and we describe linear translations between the two formalisms.
Reference: [Saf88] <author> S. Safra. </author> <title> On the complexity of !- automata. </title> <booktitle> In Proc. 29th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pp. 319-327, </pages> <address> White Plains, </address> <month> October </month> <year> 1988. </year>
Reference-contexts: Since Buchi and parity automata are special cases of Rabin and Streett automata, we describe the translation for NRW and NSW. Let N be either a NRW or a NSW with n states and h pairs. By <ref> [Saf88, Saf89] </ref>, in both cases we can translate N to a DRW with 2 O (nh log nh) states and nh pairs. <p> When A is in DSW, its translation to DBW, when exists, involves a polynomial blow up [KPB95]. Hence the bounds for DPW, DRW, and DSW. All the types of nondeterministic automata A in (3) have an exponential translation to DRW <ref> [Saf88, Saf92] </ref>. Therefore, by (1), if A is in DBW, it has an exponential equivalent AFMC formula. It follows from [Mic88] that the exponential translation from nondeterministic automata to DBW cannot be improved.
Reference: [Saf89] <author> S. Safra. </author> <title> Complexity of automata on infinite objects. </title> <type> PhD thesis, </type> <institution> Weizmann Institute of Science, Rehovot, Israel, </institution> <year> 1989. </year>
Reference-contexts: Since Buchi and parity automata are special cases of Rabin and Streett automata, we describe the translation for NRW and NSW. Let N be either a NRW or a NSW with n states and h pairs. By <ref> [Saf88, Saf89] </ref>, in both cases we can translate N to a DRW with 2 O (nh log nh) states and nh pairs.
Reference: [Saf92] <author> S. Safra. </author> <title> Exponential determinization for !-automata with strong-fairness acceptance condition. </title> <booktitle> In Proc. 24th ACM Symposium on Theory of Computing, </booktitle> <year> 1992. </year>
Reference-contexts: When A is in DSW, its translation to DBW, when exists, involves a polynomial blow up [KPB95]. Hence the bounds for DPW, DRW, and DSW. All the types of nondeterministic automata A in (3) have an exponential translation to DRW <ref> [Saf88, Saf92] </ref>. Therefore, by (1), if A is in DBW, it has an exponential equivalent AFMC formula. It follows from [Mic88] that the exponential translation from nondeterministic automata to DBW cannot be improved.
Reference: [Sch97] <author> K. Schneider. </author> <booktitle> CTL and equivalent sub-languages of CTL ? . In Proceedings of IFIP Conference on Computer Hardware Description Languages and Applications, </booktitle> <pages> pp. 40-59, </pages> <address> 1997. </address> <publisher> Chapman and Hall. </publisher>
Reference-contexts: Indeed, a translation of LTL formulas to CTL formulas could be used in order to model check linear-time properties using CTL model-checking tools. A partial success for the above approach is presented in <ref> [KG96, Sch97] </ref>, which identify certain fragments of LTL that can be easily translated to CTL. By characterizing LTL formulas that can be translated to AFMC, we solve a closely related problem.
Reference: [Tho90] <author> W. Thomas. </author> <title> Automata on infinite objects. </title> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <pages> pp. 165-191, </pages> <year> 1990. </year>
Reference-contexts: First, if S is empty, so is A, and hence it is clearly in DBW. Assume now that S is not empty, we show that L (A) is not in DBW. The proof is very similar to the one showing that L fm is not in DBW (c.f., <ref> [Tho90] </ref>), only that we have to accompany the words in f0; 1g ! with some word accepted by S. Assume, by way of contradiction, that L (A) is in DBW.
Reference: [VW86] <author> M.Y. Vardi and P. Wolper. </author> <title> An automata-theoretic approach to automatic program verification. </title> <booktitle> In Proc. First Symposium on Logic in Computer Science, </booktitle> <pages> pp. 322-331, </pages> <year> 1986. </year>
Reference-contexts: While testing has once been considered a satisfying method for detecting bugs, today's rapid development of complex and safety-critical systems requires more reliable methods. Model checking is such a more reliable method. In model checking <ref> [CE81, CES86, QS81, LP85, VW86] </ref>, we check that a system meets a desired requirement by checking that a mathematical model of the system satisfies a formal specification that describes the requirement. The algorithmic nature of model checking makes it fully automatic, convenient to use, and very attractive to practitioners.
Reference: [VW94] <author> M.Y. Vardi and P. Wolper. </author> <title> Reasoning about infinite computations. </title> <journal> Information and Computation, </journal> <volume> 115(1) </volume> <pages> 1-37, </pages> <month> Novem-ber </month> <year> 1994. </year>
Reference-contexts: This is a doubly exponential improvement of the translations that follow from [AN92] and <ref> [VW94] </ref>. We now characterize !-regular languages L for which der (L) can be characterized by an AFMC formula. Since trees in der (L) are defined by means of a universal requirement on their paths, we do not need directed AFMC. <p> Theorem 5.1 Deciding LTL 7! DBW is in EX-PSPACE and is PSPACE-hard. Proof: Given an LTL formula of length n, let B be an NBW that recognizes . By <ref> [VW94] </ref>, B has 2 O (n) states. Membership in EXPSPACE then follows from Theorem 4.2. For the lower bound, we do a reduction from LTL satisfiabil-ity. Given an LTL formula over some set P of propositions, let p be a proposition not in P . <p> One possibility is to first translate to a DBW. Below we show that such an approach is inherently doubly exponential. Theorem 5.2 When exists, the translation LTL 7! DBW is doubly exponential. Proof: The upper bound follows from the exponential translation of LTL formulas to NBW <ref> [VW94] </ref>, and Theorem 4.3.
Reference: [Wol82] <author> P. Wolper. </author> <title> Synthesis of Communicating Processes from Temporal Logic Specifications. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1982. </year>
Reference-contexts: We now prove the lower bound. Since Buchi automata are a special case of parity, Rabin, and Streett automata, we describe the proof for NBW. We do a reduction from NBW universality, proved to be PSPACE-hard in <ref> [MS72, Wol82] </ref>. Given an NBW B, we define another NBW A such that B is universal iff A is in DBW.
References-found: 46

