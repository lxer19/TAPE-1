URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/garnet/www/pbd-group/papers/concur.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/fmm/public/www/publications.html
Root-URL: 
Email: merritt@research.att.com  fmm@cs.cmu.edu  tuttle@crl.dec.com  
Title: Time-Constrained Automata (Extended Abstract)  
Author: Michael Merritt Francesmary Modugno Mark R. Tuttle 
Address: 600 Mountain Avenue Murray Hill, NJ 07974  Pittsburgh, PA 15213  One Kendall Sq., Bldg. 700 Cambridge, MA 02139  
Affiliation: AT&T Bell Laboratories  School of Computer Science Carnegie Mellon University  DEC Cambridge Research Lab  
Abstract: In this paper, we augment the input-output automaton model in order to reason about time in concurrent systems, and we prove simple properties of this augmentation. The input-output automata model is a useful model for reasoning about computation in concurrent and distributed systems because it allows fundamental properties such as fairness and compositionality to be expressed easily and naturally. A unique property of the model is that systems are modeled as the composition of autonomous components. This paper describes a way to add a notion of time to the model in a way that preserves these properties. The result is a simple, compositional model for real-time computation that provides a convenient notation for expressing timing properties such as bounded fairness.
Abstract-found: 1
Intro-found: 1
Reference: [ACD90] <author> Rajeev Alur, Costas Courcoubetis, and David Dill. </author> <title> Model-checking for real-time systems. </title> <booktitle> In Proceedings of the 5th Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 414-425. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1990. </year> <month> 15 </month>
Reference-contexts: It appears, however, that our model is a suitable semantic model for most logics and proofs systems appearing in the literature (such as <ref> [HLP90, AH90, ACD90] </ref>). However, simple proof techniques for timed automata have already been investigated [LA90].
Reference: [AH90] <author> Rajeev Alur and Thomas A. Henzinger. </author> <title> Real-time logics: Complexity and expres-siveness. </title> <booktitle> In Proceedings of the 5th Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 390-401. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: This approach is adopted here. A timed execution is essentially an ordered pair (e; t), where e is the execution of an input-output automaton, and t is a function assigning times to the events occurring in e (cf. <ref> [AH90, Lam91] </ref>). A timed automaton is a pair (A; P ) consisting of an input-output automaton A and a predicate P on the timed executions of A. Separating time from the local state makes it easy to define a clean notion of automaton composition. <p> It appears, however, that our model is a suitable semantic model for most logics and proofs systems appearing in the literature (such as <ref> [HLP90, AH90, ACD90] </ref>). However, simple proof techniques for timed automata have already been investigated [LA90].
Reference: [AL89] <author> Hagit Attiya and Nancy Lynch. </author> <title> Time bounds for real-time process control in the presence of timing uncertainty. </title> <type> Technical Memo MIT/LCS/TM-403, </type> <institution> MIT Laboratory for Computer Science, </institution> <month> July </month> <year> 1989. </year>
Reference-contexts: This model has been used to study problems in real-time systems, and simple proof rules have been developed for it <ref> [LA90, AL89] </ref>. The input-output automaton model is unique in that it is especially well-suited for modeling concurrent systems as the composition of autonomous components. A system component is autonomous if it has complete control over its generation of output. <p> Due to space limitations, we have omitted the proofs of our results. We have also omitted any significant examples of how to use our framework, but examples do appear in <ref> [LA90, AL89] </ref>. <p> In fact, when t (0) = 0, it is convenient to represent the timed execution e t by s 0 ( 1 ; t 1 )s 1 ( 2 ; t 2 )s 2 : : : ; where t i = t (i) (see <ref> [AL89] </ref>). Timed schedules and behaviors of A are defined in a similar way. A timed sequence ff t consists of a sequence ff of actions of A and a timing t of the same length, giving an initial time t (0) and a time for each action in ff.
Reference: [Blo87] <author> Bard Bloom. </author> <title> Constructing two-writer atomic registers. </title> <booktitle> In Proceedings of the 6th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 249-259. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1987. </year>
Reference-contexts: The model has been used extensively to model concurrency control and recovery in transaction systems, resource allocation, concurrent data structures, network communication, and other problems (e.g., <ref> [LT89, LM88, LMWF88, Blo87, WLL88, LMF88, Her88] </ref>). It has been used to specify these problems, to describe and analyze algorithmic solutions, and to prove lower bounds and impossibility results.
Reference: [CM84] <author> K. Mani Chandy and Jayadev Misra. </author> <title> The drinking philosophers problem. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 6(4) </volume> <pages> 632-646, </pages> <year> 1984. </year>
Reference-contexts: The philosophers have no autonomy over their actions, and deadlock can be avoided by composing with any process whose definition is simply a description of the desired behaviors (cf. <ref> [CM84] </ref>). Because of the powerful operators in CSP, specifying an acceptable solution to a problem can also require more than specifying the desired external behavior (or traces).
Reference: [Dil88] <author> David L. Dill. </author> <title> Trace Theory for Automatic Hierarchical Verification of SpeedIndependent Circuits. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Carnegie Mellon University, </institution> <month> February </month> <year> 1988. </year> <note> Available as Technical Report CMU-CS-88-119. </note>
Reference-contexts: Early work involving continually enabled inputs appears in [LF81], and more recently in <ref> [Dil88] </ref>. A second difference is that fairness plays an important role in the input-output automaton model. A system computation is fair if every system component is given the chance to take a step infinitely often.
Reference: [Fra86] <author> Nissim Francez. </author> <title> Fairness. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1986. </year>
Reference-contexts: In this model automata generate fair behaviors, and when automata are composed, the fair behaviors of the composition are a composition of the fair behaviors of the components. Definitions of fairness in the same spirit appear in <ref> [LF81, Fra86, Jon87] </ref>. There are two natural approaches to extending the input-output automaton model to include timing information. The first is to record time and timing constraints directly in the automaton states and transition relation.
Reference: [GL90] <author> Richard Gerber and Insup Lee. CCSR: </author> <title> A calculus for communicating shared re-sources. </title> <editor> In J. C. M. Baeten and J. W. Klop, editors, </editor> <booktitle> Lecture Notes in Computer Science, volume 458, Proceedings of Concur '90, </booktitle> <pages> pages 263-277. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1990. </year>
Reference-contexts: In contrast, in the input-output automaton model, it is natural to accept as a solution to a problem any system with the desired external behavior that can be expressed in the model. Input-output automata can be viewed as a restriction of CSP and related models <ref> [Mil80, Yi90, MT90, GL90] </ref> to a simple submodel, with a simple semantics, that captures the notion of autonomy. A primary difference between the input-output automaton model and these models is that the former makes a clear distinction between input and output actions.
Reference: [Her88] <author> Maurice Herlihy. </author> <title> Impossibility and universality results for wait-free synchronization. </title> <booktitle> In Proceedings of the 7th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 276-290. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1988. </year>
Reference-contexts: The model has been used extensively to model concurrency control and recovery in transaction systems, resource allocation, concurrent data structures, network communication, and other problems (e.g., <ref> [LT89, LM88, LMWF88, Blo87, WLL88, LMF88, Her88] </ref>). It has been used to specify these problems, to describe and analyze algorithmic solutions, and to prove lower bounds and impossibility results.
Reference: [HLP90] <author> Eyal Harel, Orna Lichtenstein, and Amir Pnueli. </author> <title> Explicit clock temporal logic. </title> <booktitle> In Proceedings of the 5th Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 401-413. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: There are two natural approaches to extending the input-output automaton model to include timing information. The first is to record time and timing constraints directly in the automaton states and transition relation. This approach is exemplified by the work of Shankar and Lam [SL87] (and also <ref> [HLP90] </ref>), in which time is modeled as a component of the system state, and predicates on the time control system executions. The second approach is to model time and timing constraints as external conditions imposed on the executions of standard input-output automata. This approach is adopted here. <p> It appears, however, that our model is a suitable semantic model for most logics and proofs systems appearing in the literature (such as <ref> [HLP90, AH90, ACD90] </ref>). However, simple proof techniques for timed automata have already been investigated [LA90].
Reference: [Hoa85] <author> C. A. R. Hoare. </author> <title> Communicating Sequential Processes. </title> <booktitle> Prentice-Hall International, </booktitle> <address> Englewood Cliffs, New Jersey, </address> <year> 1985. </year>
Reference-contexts: While most models contain a submodel that supports such descriptions, these models are so expressive that they include notions of composition that have no correspondence to physical reality, and this unwanted expressive power complicates the models' semantics considerably. One example is CSP <ref> [Hoa85, KSdR + 88] </ref>. <p> Thinking of Q as P 's environment, this means that any action the environment can observe is an action the environment can synchronize with and block. This makes some problems almost too easy to solve. For example, consider the solution to the Dining Philosopher's problem in <ref> [Hoa85] </ref>. Here the philosophers are described in terms of actions like picking up and setting down forks, and the philosophers are placed in an environment (the definitions of the forks) that can simply block a philosopher when it tries to pick up a fork.
Reference: [Jon87] <author> Bengt Jonsson. </author> <title> Compositional Verification of Distributed Systems. </title> <type> PhD thesis, </type> <institution> Uppsala University, Uppsala, Sweden, </institution> <year> 1987. </year> <note> Published by Direkt Offset, </note> <institution> Nystrom & Co AB, Uppsala. </institution>
Reference-contexts: In this model automata generate fair behaviors, and when automata are composed, the fair behaviors of the composition are a composition of the fair behaviors of the components. Definitions of fairness in the same spirit appear in <ref> [LF81, Fra86, Jon87] </ref>. There are two natural approaches to extending the input-output automaton model to include timing information. The first is to record time and timing constraints directly in the automaton states and transition relation.
Reference: [KSdR + 88] <author> R. Koymans, R. K. Shyamasundar, W. P. de Roever, R. Gerth, and S. ArunKumar. </author> <title> Compositional semantics for real-time distributed computing. </title> <journal> Information and Computation, </journal> <volume> 79 </volume> <pages> 210-256, </pages> <year> 1988. </year>
Reference-contexts: While most models contain a submodel that supports such descriptions, these models are so expressive that they include notions of composition that have no correspondence to physical reality, and this unwanted expressive power complicates the models' semantics considerably. One example is CSP <ref> [Hoa85, KSdR + 88] </ref>.
Reference: [LA90] <author> Nancy A. Lynch and Hagit Attiya. </author> <title> Using mappings to prove timing properties. </title> <booktitle> In Proceedings of the 9th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 265-280. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1990. </year>
Reference-contexts: This model has been used to study problems in real-time systems, and simple proof rules have been developed for it <ref> [LA90, AL89] </ref>. The input-output automaton model is unique in that it is especially well-suited for modeling concurrent systems as the composition of autonomous components. A system component is autonomous if it has complete control over its generation of output. <p> Due to space limitations, we have omitted the proofs of our results. We have also omitted any significant examples of how to use our framework, but examples do appear in <ref> [LA90, AL89] </ref>. <p> This means that hierarchical proof strategies are possible in this model, where each (A i ; P i ) is a model of the system at increasingly higher levels of conceptual abstraction. Elsewhere <ref> [LA90] </ref>, refinement mappings have been used to construct this sort of hierarchical proof in this model. Notice that if P is in some sense a stronger timing property than P 0 , then is should immediately follow that (A; P ) solves (A; P 0 ). <p> It appears, however, that our model is a suitable semantic model for most logics and proofs systems appearing in the literature (such as [HLP90, AH90, ACD90]). However, simple proof techniques for timed automata have already been investigated <ref> [LA90] </ref>.
Reference: [Lam91] <author> Leslie Lamport. </author> <title> A temporal logic of actions. </title> <type> Research Report 57, </type> <institution> DEC Systems Research Center, </institution> <month> January </month> <year> 1991. </year>
Reference-contexts: This approach is adopted here. A timed execution is essentially an ordered pair (e; t), where e is the execution of an input-output automaton, and t is a function assigning times to the events occurring in e (cf. <ref> [AH90, Lam91] </ref>). A timed automaton is a pair (A; P ) consisting of an input-output automaton A and a predicate P on the timed executions of A. Separating time from the local state makes it easy to define a clean notion of automaton composition.
Reference: [Lew90] <author> Harry R. Lewis. </author> <title> A logic of concrete time intervals. </title> <booktitle> In Proceedings of the 5th Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 380-389. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1990. </year> <note> Also available at Harvard Technical Report TR-07-90. 16 </note>
Reference-contexts: The fact that it is a compositional model for fair computation now follows as a special case. This modularity is one of the primary advantages of our work. The rest of this paper is organized as follows. In Section 2 we review the input-output 1 Lewis <ref> [Lew90] </ref> also assigns bounds to state transitions. His motivation is quite different from ours, but we can generalize boundmaps slightly and capture his assignments. 4 automaton model. In Section 3 we augment the model to include time, and in Section 4 we define the composition of timed automata.
Reference: [LF81] <author> Nancy A. Lynch and Michael J. Fischer. </author> <title> On describing the behavior and implemen-tation of distributed systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 13(1) </volume> <pages> 17-43, </pages> <month> January </month> <year> 1981. </year>
Reference-contexts: Early work involving continually enabled inputs appears in <ref> [LF81] </ref>, and more recently in [Dil88]. A second difference is that fairness plays an important role in the input-output automaton model. A system computation is fair if every system component is given the chance to take a step infinitely often. <p> In this model automata generate fair behaviors, and when automata are composed, the fair behaviors of the composition are a composition of the fair behaviors of the components. Definitions of fairness in the same spirit appear in <ref> [LF81, Fra86, Jon87] </ref>. There are two natural approaches to extending the input-output automaton model to include timing information. The first is to record time and timing constraints directly in the automaton states and transition relation.
Reference: [LM88] <author> Nancy A. Lynch and Michael Merritt. </author> <title> Introduction to the theory of nested transac-tions. </title> <journal> Theoretical Computer Science, </journal> <volume> 62 </volume> <pages> 123-185, </pages> <year> 1988. </year> <note> Earlier versions appeared in Proceedings of the International Conference on Database Theory, 1986, and as MIT Technical Report MIT/LCS/TR-367. </note>
Reference-contexts: The model has been used extensively to model concurrency control and recovery in transaction systems, resource allocation, concurrent data structures, network communication, and other problems (e.g., <ref> [LT89, LM88, LMWF88, Blo87, WLL88, LMF88, Her88] </ref>). It has been used to specify these problems, to describe and analyze algorithmic solutions, and to prove lower bounds and impossibility results.
Reference: [LMF88] <author> Nancy A. Lynch, Yishay Mansour, and Alan Fekete. </author> <title> Data link layer: Two impos-sibility results. </title> <booktitle> In Proceedings of the 7th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 149-170. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1988. </year> <note> Also available as MIT Technical Report MIT/LCS/TM-355. </note>
Reference-contexts: The model has been used extensively to model concurrency control and recovery in transaction systems, resource allocation, concurrent data structures, network communication, and other problems (e.g., <ref> [LT89, LM88, LMWF88, Blo87, WLL88, LMF88, Her88] </ref>). It has been used to specify these problems, to describe and analyze algorithmic solutions, and to prove lower bounds and impossibility results.
Reference: [LMWF88] <author> Nancy A. Lynch, Michael Merritt, William E. Weihl, and Alan Fekete. </author> <title> A theory of atomic transactions. </title> <booktitle> In Proceedings of the International Conference on Database Theory, </booktitle> <year> 1988. </year> <note> Also available as MIT Technical Memo MIT/LCS/TM-362. </note>
Reference-contexts: The model has been used extensively to model concurrency control and recovery in transaction systems, resource allocation, concurrent data structures, network communication, and other problems (e.g., <ref> [LT89, LM88, LMWF88, Blo87, WLL88, LMF88, Her88] </ref>). It has been used to specify these problems, to describe and analyze algorithmic solutions, and to prove lower bounds and impossibility results.
Reference: [LT87] <author> Nancy A. Lynch and Mark R. Tuttle. </author> <title> Hierarchical correctness proofs for distributed algorithms. </title> <booktitle> In Proceedings of the 6th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 137-151. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1987. </year> <note> A full version is available as MIT Technical Report MIT/LCS/TR-387. </note>
Reference-contexts: 1 Introduction This paper augments the input-output automaton model <ref> [LT87] </ref> with a notion of time that allows us to reason about timed behaviors, especially behaviors in real-time systems where real-time constraints on systems' reaction times must be satisfied. The (untimed) input- output automaton model is a natural model of computation that has been used extensively to study concurrent systems. <p> Notice that all output actions of an automaton A i (some representing communication with other automata A j ) become output actions of the composition, and not internal actions. The definition of an operation internalizing output actions is straightforward. See <ref> [LT87, Tut87] </ref> for a more complete exposition of the model that includes such extensions. 3 Timed Automata We introduce time into the model by introducing function t assigning times t i to the states s i appearing in executions e = s 0 1 s 1 : : :; actually, t <p> If P C enabled (A i ; C) b i (C) ; C, then P A C enabled (A; C) b (C) ; C. 7 Solvability In addition to describing implementations of concurrent systems, input-output automata are useful for expressing specifications of such systems <ref> [LT87] </ref>.
Reference: [LT89] <author> Nancy A. Lynch and Mark R. Tuttle. </author> <title> An introduction to input/output automata. </title> <journal> CWI-Quarterly, </journal> <volume> 2(3), </volume> <year> 1989. </year> <note> Also available as MIT Technical Memo MIT/LCS/TM373. </note>
Reference-contexts: The model has been used extensively to model concurrency control and recovery in transaction systems, resource allocation, concurrent data structures, network communication, and other problems (e.g., <ref> [LT89, LM88, LMWF88, Blo87, WLL88, LMF88, Her88] </ref>). It has been used to specify these problems, to describe and analyze algorithmic solutions, and to prove lower bounds and impossibility results.
Reference: [Mil80] <author> Robin Milner. </author> <title> A Calculus of Communicating Systems. </title> <booktitle> Lecture Notes in Computer Science 92. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1980. </year>
Reference-contexts: In contrast, in the input-output automaton model, it is natural to accept as a solution to a problem any system with the desired external behavior that can be expressed in the model. Input-output automata can be viewed as a restriction of CSP and related models <ref> [Mil80, Yi90, MT90, GL90] </ref> to a simple submodel, with a simple semantics, that captures the notion of autonomy. A primary difference between the input-output automaton model and these models is that the former makes a clear distinction between input and output actions.
Reference: [MT90] <author> Faron Moller and Chris Tofts. </author> <title> A temporal calculus of communicating systems. </title> <editor> In J. C. M. Baeten and J. W. Klop, editors, </editor> <booktitle> Lecture Notes in Computer Science, volume 458, Proceedings of Concur '90, </booktitle> <pages> pages 401-415. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1990. </year>
Reference-contexts: In contrast, in the input-output automaton model, it is natural to accept as a solution to a problem any system with the desired external behavior that can be expressed in the model. Input-output automata can be viewed as a restriction of CSP and related models <ref> [Mil80, Yi90, MT90, GL90] </ref> to a simple submodel, with a simple semantics, that captures the notion of autonomy. A primary difference between the input-output automaton model and these models is that the former makes a clear distinction between input and output actions.
Reference: [SL87] <author> A. Udaya Shankar and Simon S. Lam. </author> <title> Time-dependent distributed systems: Proving safety, liveness and real-time properties. </title> <booktitle> Distributed Computing, </booktitle> <pages> pages 61-79, </pages> <year> 1987. </year>
Reference-contexts: There are two natural approaches to extending the input-output automaton model to include timing information. The first is to record time and timing constraints directly in the automaton states and transition relation. This approach is exemplified by the work of Shankar and Lam <ref> [SL87] </ref> (and also [HLP90]), in which time is modeled as a component of the system state, and predicates on the time control system executions. The second approach is to model time and timing constraints as external conditions imposed on the executions of standard input-output automata. This approach is adopted here.
Reference: [Tut87] <author> Mark R. Tuttle. </author> <title> Hierarchical correctness proofs for distributed algorithms. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, Laboratory for Computer Science, </institution> <month> April </month> <year> 1987. </year> <note> Available as MIT Technical Report MIT/LCS/TR-387. </note>
Reference-contexts: Notice that all output actions of an automaton A i (some representing communication with other automata A j ) become output actions of the composition, and not internal actions. The definition of an operation internalizing output actions is straightforward. See <ref> [LT87, Tut87] </ref> for a more complete exposition of the model that includes such extensions. 3 Timed Automata We introduce time into the model by introducing function t assigning times t i to the states s i appearing in executions e = s 0 1 s 1 : : :; actually, t
Reference: [WLL88] <author> Jennifer L. Welch, Leslie Lamport, and Nancy A. Lynch. </author> <title> A lattice-structured proof of a minimum spanning tree algorithm. </title> <booktitle> In Proceedings of the 7th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 28-43. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1988. </year>
Reference-contexts: The model has been used extensively to model concurrency control and recovery in transaction systems, resource allocation, concurrent data structures, network communication, and other problems (e.g., <ref> [LT89, LM88, LMWF88, Blo87, WLL88, LMF88, Her88] </ref>). It has been used to specify these problems, to describe and analyze algorithmic solutions, and to prove lower bounds and impossibility results.
Reference: [Yi90] <author> Wang Yi. </author> <title> Real-time behaviour of asynchronous agents. </title> <editor> In J. C. M. Baeten and J. W. Klop, editors, </editor> <booktitle> Lecture Notes in Computer Science, volume 458, Proceedings of Concur '90, </booktitle> <pages> pages 502-520. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1990. </year>
Reference-contexts: In contrast, in the input-output automaton model, it is natural to accept as a solution to a problem any system with the desired external behavior that can be expressed in the model. Input-output automata can be viewed as a restriction of CSP and related models <ref> [Mil80, Yi90, MT90, GL90] </ref> to a simple submodel, with a simple semantics, that captures the notion of autonomy. A primary difference between the input-output automaton model and these models is that the former makes a clear distinction between input and output actions.
References-found: 28

