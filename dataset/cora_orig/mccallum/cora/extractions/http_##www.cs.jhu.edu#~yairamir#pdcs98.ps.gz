URL: http://www.cs.jhu.edu/~yairamir/pdcs98.ps.gz
Refering-URL: http://www.cs.jhu.edu/~yairamir/
Root-URL: http://www.cs.jhu.edu
Title: An Opportunity Cost Approach for Job Assignment and Reassignment in a Scalable Computing Cluster  
Author: Yair Amir, Baruch Awerbuch, Amnon Barak, R. Sean Borgstrom and Arie Keren 
Abstract: A new method is presented for job assignment to and reassignment between machines in a computing cluster. Our method is based on a theoretical framework that has been experimentally tested and shown to be useful in practice. This opportunity cost method converts the usage of several heterogeneous resources in a machine to a single homogeneous cost. Assignment and reassignment is then performed based on that cost. This is in contrast to previous methods for job assignment and reassignment, which treat each resource as an independent entity with its own constraints. These previous methods were intrinsically ad hoc, as there was no clean way to balance one resource against another. 
Abstract-found: 1
Intro-found: 1
Reference: [AAF96] <author> B. Awerbuch, Y. Azar and A. Fiat. </author> <title> Packet Routing via Min-Cost Circuit Routing. </title> <booktitle> In Proceedings of the Israeli Symposium on Theory of Computing and Systems, </booktitle> <year> 1996. </year>
Reference-contexts: One algorithm for doing so, described in <ref> [AAF96] </ref>, proves useful in practice even when our goal is to minimize the average slowdown instead, which corresponds to minimizing the sum of the squares of the loads.
Reference: [AAFPW93] <author> J. Aspnes, Y. Azar, A. Fiat, S. Plotkin and O. Waarts. </author> <title> OnLine Machine Scheduling with Applications to Load Balancing and Virtual Circuit Routing. </title> <booktitle> In Proceedings of the ACM Symposium on Theory Of Computing (STOC), </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: If the machines are identical, and no other resources are relevant, the greedy algorithm has a competitive ratio of 2 1/n (see [BFKV92]). When the machines are related, the jobs are permanent, and no other resources are relevant, the ASSIGN-R algorithm by Aspnes et al <ref> [AAFPW93] </ref> is effective. Define OPT to be the load of the optimal offline algorithm; an approximation to OPT is given in [AAFPW93]. This algorithm assigns each arriving job to the slowest machine with a resulting load below 2 * OPT. <p> When the machines are related, the jobs are permanent, and no other resources are relevant, the ASSIGN-R algorithm by Aspnes et al <ref> [AAFPW93] </ref> is effective. Define OPT to be the load of the optimal offline algorithm; an approximation to OPT is given in [AAFPW93]. This algorithm assigns each arriving job to the slowest machine with a resulting load below 2 * OPT. If OPT is known, this algorithm has a competitive ratio of 2. A doubling technique can be used to approximate OPT. <p> The maximum link congestion is the larger of the maximum CPU load and the maximum memory (over)usage. ASSIGN-U is extended in <ref> [AAFPW93] </ref> to address the online routing problem. The algorithm computes the marginal cost for each possible path P from s j to t j as follows: -= + eee ljpl P aajH )( and assigns request j to a path P that yields a minimum marginal cost. <p> The algorithm computes the marginal cost for each possible path P from s j to t j as follows: -= + eee ljpl P aajH )( and assigns request j to a path P that yields a minimum marginal cost. This algorithm is O (log n) competitive <ref> [AAFPW93] </ref>. By reduction, it produces an algorithm for managing heterogeneous resources that is O (log n) competitive in its maximum usage of each resource. 4.
Reference: [AAPW94] <author> B. Awerbuch, Y. Azar, S. Plotkin and O. Waarts. </author> <title> Competitive Routing of Virtual Circuits with Unknown Duration. </title> <booktitle> In ACM-SIAM Symposium on Discrete Algorithms (SODA), </booktitle> <month> January </month> <year> 1994. </year>
Reference-contexts: The online algorithm will assign j to the machine i that minimizes the marginal cost )()()( jljpjl i iii aajH -= + This algorithm is O (log n) competitive for unrelated machines and permanent jobs. The work presented in <ref> [AAPW94] </ref> extends this algorithm and competitive ratio to temporary jobs, using up to O (log n) reassignments per job. A reassignment moves a job from its previously assigned machine to a new machine. <p> A reassignment moves a job from its previously assigned machine to a new machine. In the presence of reassignments, let h i (j) be the load of machine i just before j was last assigned to i. When any job is terminated, the algorithm of <ref> [AAPW94] </ref> checks a stability condition for each job j and each machine M.
Reference: [BFKV92] <author> Y. Bartal, A. Fiat, H. Karloff and R. Vohra. </author> <title> New algorithms for an ancient scheduling problem. </title> <booktitle> In Proceedings of the ACM Symposium on Theory of Algorithms, </booktitle> <year> 1992. </year>
Reference-contexts: This algorithm for job assignment assigns the next job to the machine with the minimum current CPU load. If the machines are identical, and no other resources are relevant, the greedy algorithm has a competitive ratio of 2 1/n (see <ref> [BFKV92] </ref>). When the machines are related, the jobs are permanent, and no other resources are relevant, the ASSIGN-R algorithm by Aspnes et al [AAFPW93] is effective. Define OPT to be the load of the optimal offline algorithm; an approximation to OPT is given in [AAFPW93].
Reference: [BGW93] <author> A. Barak, S. Guday and R. Wheeler. </author> <title> The Mosix distributed operating system, load balancing for Unix, </title> <booktitle> Volume 672, </booktitle> <month> May </month> <year> 1993. </year> <month> 13 </month>
Reference-contexts: It is intuitively clear that the ability to migrate jobs could lead to better performance that is, faster completion times for the average job. Unless it is known where a job should be at any given time, however, the reassignment strategy could also make mistakes. The Mosix <ref> [BGW93, BL97] </ref> kernel enhancements to the BSD/OS Unix-like operating system [Bsdi], for example, allow this kind of transparent job migration. Determining the optimal location for a job is a complicated problem. The most important complication is that the resources available on a cluster of workstations are heterogeneous.
Reference: [BL97] <author> A. Barak and O. La'adan, </author> <title> The MOSIX Multicomputer Operating System for High Performance Cluster Computing, </title> <journal> Journal of Future Generation Computer Systems, </journal> <month> April </month> <year> 1998, </year> <note> to appear. </note>
Reference-contexts: It is intuitively clear that the ability to migrate jobs could lead to better performance that is, faster completion times for the average job. Unless it is known where a job should be at any given time, however, the reassignment strategy could also make mistakes. The Mosix <ref> [BGW93, BL97] </ref> kernel enhancements to the BSD/OS Unix-like operating system [Bsdi], for example, allow this kind of transparent job migration. Determining the optimal location for a job is a complicated problem. The most important complication is that the resources available on a cluster of workstations are heterogeneous.
Reference: [Bsdi] <institution> Berkeley Software Design, Inc. </institution> <note> http://www.bsdi.com. </note>
Reference-contexts: Unless it is known where a job should be at any given time, however, the reassignment strategy could also make mistakes. The Mosix [BGW93, BL97] kernel enhancements to the BSD/OS Unix-like operating system <ref> [Bsdi] </ref>, for example, allow this kind of transparent job migration. Determining the optimal location for a job is a complicated problem. The most important complication is that the resources available on a cluster of workstations are heterogeneous.
Reference: [HD96] <author> M. Harchol-Balter and A. Downey. </author> <title> Exploiting Process Lifetime Distributions for Dynamic Load Balancing. </title> <booktitle> In Proceedings of ACM Sigmetrics Conference on Measurement and Modeling of Computer Systems, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: For each incoming job, let r and m be independently-generated random numbers between 0 and 1. A typical process will require 2/r seconds of CPU time and (1/m)% of a Pentium Pros memory. (The distribution is based on the observations of real-life processes described in <ref> [HD96] </ref>.) Approximately 95% of all jobs are single-process jobs matching this profile; because this is a metacomputing system, 5% of all jobs are assumed to be large parallel jobs utilizing the metacomputers power.
References-found: 8

