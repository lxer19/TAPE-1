URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3458/3458.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: fcruizc, minkerg@cs.umd.edu  
Title: Computing Stable and Partial Stable Models of Extended Disjunctive Logic Programs  
Author: Carolina Ruiz Jack Minker S. A. 
Note: U.  
Address: College Park, MD 20742  
Affiliation: Institute for Advanced Computer Studies and Department of Computer Science University of Maryland.  
Abstract: In [Prz91], Przymusinski introduced the partial (or 3-valued) stable model semantics which extends the (2-valued) stable model semantics defined originally by Gelfond and Lifschitz [GL88]. In this paper we describe a procedure to compute the collection of all partial stable models of an extended disjunctive logic program. This procedure consists in transforming an extended disjunctive logic program into a constrained disjunctive program free of negation-by-default whose set of 2-valued minimal models corresponds to the set of partial stable models of the original program.
Abstract-found: 1
Intro-found: 1
Reference: [AHU83] <author> A. Aho, J. Hopcroft, and J. Ullman. </author> <title> Data Structures and Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: Checking if this graph is acyclic can be done in time O (j ^ Lj + jCj) (see e.g. <ref> [AHU83] </ref>). We illustrate how the algorithm works for different edlps. Example 4.4. Let P = fa not b; b not ag.
Reference: [BNNS93] <author> C. Bell, A. Nerode, R. Ng, </author> <title> and V.S. Subrahmanian. Implementing stable model semantics by linear programming. </title> <booktitle> In Proceedings of the 1993 International Workshop on Logic Programming and Non-monotonic Reasoning, </booktitle> <month> June </month> <year> 1993. </year>
Reference: [EG93] <author> T. Eiter and G. Gottlob. </author> <title> Complexity aspects of various semantics for disjunctive databases. </title> <booktitle> In Proceedings of the Twelfth ACM SIGART-SIGMOD-SIGART Symposium on Principles of Database Systems (PODS-93), </booktitle> <pages> pages 158-167. </pages> <publisher> ACM Press, </publisher> <month> May </month> <year> 1993. </year>
Reference-contexts: the problem of constructing the collection of partial stable models of an edlp is not tractable. 1 This is a consequence of the fact that skeptical reasoning in this semantics (i.e. determining if a literal is true in every partial stable model of the program) is P 2 -complete (see <ref> [EG93] </ref>).
Reference: [Fag91] <author> F. Fages. </author> <title> A new fixpoint semantics for general logic programs compared with the well-founded and the stable model semantics. </title> <journal> New Generation Computing, </journal> <volume> 9 </volume> <pages> 425-443, </pages> <year> 1991. </year>
Reference-contexts: As stated in the introduction, the notion of well-supported 2-valued models was introduce by Fages (<ref> [Fag91] </ref>) for the class of normal logic programs. In section 3.2 we summarize the relevant definitions in [Fag91] and extend that notion to edlps and to the 3-valued case. We show that the notions of partial stability and 3-valued well-supportedness are equivalent. The proof of this characterization is based in the existence of a fixpoint operator that computes the t -minimal 3-valued models of a positive edlp. <p> (2-valued) models of P , and so, for this case the least fixed point of ~ T P coincides with the least fixed point of the Minker/Rajasekar fixpoint operator ([MR90]). 3.2 Well-Supported 3-valued Models We start this section by briefly surveying the definition of 2-valued well-supported models given by Fages <ref> [Fag91] </ref> and his characterization of the 2-valued stable model semantics. Then we introduce our extended definition and characterization for the disjunctive 3-valued case. Definition 3.4 (Well-supported 2-valued interpretations [Fag91]). <p> operator ([MR90]). 3.2 Well-Supported 3-valued Models We start this section by briefly surveying the definition of 2-valued well-supported models given by Fages <ref> [Fag91] </ref> and his characterization of the 2-valued stable model semantics. Then we introduce our extended definition and characterization for the disjunctive 3-valued case. Definition 3.4 (Well-supported 2-valued interpretations [Fag91]).
Reference: [Fit85] <author> M. </author> <title> Fitting. A Kripke-Kleene semantics of logic programs. </title> <journal> Journal of Logic Programming, </journal> <volume> 2(4) </volume> <pages> 295-312, </pages> <month> December </month> <year> 1985. </year>
Reference: [Fit93] <author> M. </author> <title> Fitting. The family of stable models. </title> <journal> Journal of Logic Programming, </journal> <volume> 17(2, 3 </volume> & 4):197-226, 1993. 
Reference-contexts: An implementation of that procedure has been completed and we expect to experiment with it. We believe that the approach can be adapted to compute the 2-valued as well as the 4-valued stable models <ref> [Fit93] </ref> of the program. We plan to investigate these topics.
Reference: [FLMS93] <author> J.A. Fernandez, J. Lobo, J. Minker, </author> <title> and V.S. Subrahmanian. Disjunctive lp + integrity constrains = stable model semantics. </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <volume> 8(3-4):449-474, </volume> <year> 1993. </year>
Reference-contexts: A global improvement to the process of computing the partial stable models of P is to partition P into several connected components using the notion of semi-stratification described in <ref> [FLMS93] </ref> and to apply the 3S-transformation and the algorithm in Figure 1 just to each component of the program. 23 . ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ .
Reference: [GL88] <author> M. Gelfond and V. Lifschitz. </author> <title> The stable model semantics for logic programming. </title> <editor> In R. Kowalski and K. Bowen, editors, </editor> <booktitle> Proceedings of the Fifth Inter 25 national Conference and Symposium on Logic Programming, pages 1070--1080, </booktitle> <address> Seattle, WA, USA, Aug. 1988. </address> <publisher> The MIT Press. </publisher>
Reference: [IKH92] <author> K. Inoue, M. Koshimura, and R. Hasegawa. </author> <title> Embedding negation as failure into a model generation theorem prover. </title> <editor> In D. Kapur, editor, </editor> <booktitle> Proceedings of the Eleventh International Conference on Automated Deduction, </booktitle> <pages> pages 400-415, </pages> <address> Saratoga Springs NY, USA, June 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference: [MR90] <author> J. Minker and A. Rajasekar. </author> <title> A fixpoint semantics for disjunctive logic programs. </title> <journal> Journal of Logic Programming, </journal> <volume> 9(1) </volume> <pages> 45-74, </pages> <month> July </month> <year> 1990. </year>
Reference: [MR93] <author> J. Minker and C. Ruiz. </author> <title> On extended disjunctive logic programs. </title> <editor> In J. Ko-morowski and Z.W. Ras, editors, </editor> <booktitle> Proceedings of the Seventh International Symposium on Methodologies for Intelligent Systems, </booktitle> <pages> pages 1-18. </pages> <booktitle> Lecture Notes in AI. </booktitle> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1993. </year> <type> (Invited Paper). </type>
Reference: [MR94] <author> J. Minker and C. Ruiz. </author> <title> Semantics for disjunctive logic programs with explicit and default negation. </title> <journal> Fundamenta Informaticae, </journal> 20(3/4):145-192, 1994. Anniversary Issue edited by H. Rasiowa. 
Reference: [Prz91] <author> T. C. Przymusinski. </author> <title> Stable semantics for disjunctive programs. </title> <journal> New Generation Computing, </journal> <volume> 9 </volume> <pages> 401-424, </pages> <year> 1991. </year> <month> 26 </month>
Reference-contexts: 1 Introduction The partial (or 3-valued) stable model semantics defined by Przymusinski in <ref> [Prz91] </ref> is a three-valued semantics for the class of extended disjunctive logic programs (edlps). This class of programs consists of disjunctive logic programs that may contain two kinds of negations: negation-by-default and explicit negation. <p> Knowledge Ordering ( k ) on 3-valued interpretations: I k J iff V I (a) k V J (a) for all a 2 L. Equivalent definitions of these orderings that appear frequently in the liter-ature (see e.g <ref> [Prz91] </ref>) are I t J iff I + J + and I J ; and I k J iff I + J + and I J . As usual, a model of an edlp is an interpretation that satisfies all the clauses of the program. Definition 2.5 (3-valued (minimal) models). <p> A semantics of an edlp is captured by a subcollection of its set of models. In particular, the 3-valued stable model semantics of an edlp is given by the set of its 3-valued stable models as defined below. Definition 2.6 (3-valued (or Partial) Stable Model <ref> [Prz91] </ref>). Let P be an edlp and let M be any 3-valued model of P . 1.
References-found: 13

