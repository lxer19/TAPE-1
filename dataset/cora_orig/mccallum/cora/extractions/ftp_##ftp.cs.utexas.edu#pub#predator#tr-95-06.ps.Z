URL: ftp://ftp.cs.utexas.edu/pub/predator/tr-95-06.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/schwartz/pub.htm
Root-URL: 
Email: -unicron, batory-@cs.utexas.edu  
Title: Page 1 Automated Software Evolution via Design Pattern Transformations  
Author: Lance Tokuda and Don Batory 
Keyword: object-oriented design patterns, program transformations, software evolution.  
Address: Austin, Texas 78712-1188  
Affiliation: Department of Computer Sciences University of Texas at Austin  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [App89] <author> Apple Computer Inc. </author> <title> Macintosh Programmers Page 13 Workshop Pascal 3.0 Reference. </title> <address> Cupertino, California, </address> <year> 1992. </year>
Reference-contexts: Patterns have been discovered in a wide variety of applications and toolkits including Smalltalk Collections [Gol84], ET++ [Wei88], MacApp <ref> [App89] </ref>, InterViews [Lin92], etc. Page 2 In this section, we present a design pattern and explain how it can be viewed as a program transformation. The notation we use for displaying class diagrams is adopted from Rumbaugh [Rum91] with extensions for representing code fragments [Gam92] and general class dependencies.
Reference: [Coa92] <author> P. Coad. </author> <title> Object-Oriented Patterns. </title> <booktitle> In Communications of the ACM, V35 N9, </booktitle> <pages> pages 152-159, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Recent work has recognized an important kind of design reuse: object-oriented design patterns, i.e., recurring patterns of relationships between classes, objects, methods, etc. that define preferred solutions to common object-oriented design problems <ref> [Gam92, Coa92, Joh92, Gam94] </ref>. While design patterns are useful when included in an initial software design, they are often applied in the maintenance phase of the software lifecycle [Gam93].
Reference: [Gam92] <author> E. Gamma et. al. </author> <title> A Catalog of Object-Oriented Design Patterns. </title> <note> Technical Report in preparation, </note> <institution> IBM Research Division, </institution> <year> 1992. </year>
Reference-contexts: Recent work has recognized an important kind of design reuse: object-oriented design patterns, i.e., recurring patterns of relationships between classes, objects, methods, etc. that define preferred solutions to common object-oriented design problems <ref> [Gam92, Coa92, Joh92, Gam94] </ref>. While design patterns are useful when included in an initial software design, they are often applied in the maintenance phase of the software lifecycle [Gam93]. <p> Page 2 In this section, we present a design pattern and explain how it can be viewed as a program transformation. The notation we use for displaying class diagrams is adopted from Rumbaugh [Rum91] with extensions for representing code fragments <ref> [Gam92] </ref> and general class dependencies. A summary of the notation is given in Appendix A. 2.1 A Design Pattern Example Subclasses are often designed for use specifically with other subclasses.
Reference: [Gam93] <author> E. Gamma et. al. </author> <title> Design Patterns: Abstraction and Reuse of Object-Oriented Design. </title> <booktitle> In Proceedings, ECOOP 93, </booktitle> <pages> pages 406-421, </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: While design patterns are useful when included in an initial software design, they are often applied in the maintenance phase of the software lifecycle <ref> [Gam93] </ref>. For example, the original designer may have been unaware of a pattern or additional system enhancements may arise that require unanticipated flexibility. Alternatively, patterns may lead to extra levels of indirection and complexity inappropriate for the first software release. <p> A summary of the notation is given in Appendix A. 2.1 A Design Pattern Example Subclasses are often designed for use specifically with other subclasses. The Abstract Factory design pattern employed by InterViews [Lin92] and ET++ [Wei88] and documented in <ref> [Gam93] </ref> ensures that compatible objects are created. For example, consider the classes in Figure 2.1. The superclass ScrollBar has two subclasses: MotifScrollBar and OpenLookScrollBar. Window also has two subclasses: MotifWindow and OpenLookWindow. Motif scrollbars are intended to work with Motif windows.
Reference: [Gam94] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides, </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software, </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Recent work has recognized an important kind of design reuse: object-oriented design patterns, i.e., recurring patterns of relationships between classes, objects, methods, etc. that define preferred solutions to common object-oriented design problems <ref> [Gam92, Coa92, Joh92, Gam94] </ref>. While design patterns are useful when included in an initial software design, they are often applied in the maintenance phase of the software lifecycle [Gam93]. <p> ConcreteSubclass1 and ConcreteSubclass2 are concrete subclasses of AbstractClass. ConcreteSubclass2 has one instance variables and one method. 9 Appendix B - Design Patterns Object-oriented transformations could provide support for the following patterns from <ref> [Gam94] </ref>: Abstract Factory: Abstract Factory supports the creation of coordinated components. Adapter - Object: A class adapter allows an adapter object to exhibit state and behavior of another object by storing a pointer to an instance of the object.
Reference: [Gol84] <author> Adele J. Goldberg, </author> <title> Smalltalk-80: The Interactive Programming Environment. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1984. </year>
Reference-contexts: Patterns have been discovered in a wide variety of applications and toolkits including Smalltalk Collections <ref> [Gol84] </ref>, ET++ [Wei88], MacApp [App89], InterViews [Lin92], etc. Page 2 In this section, we present a design pattern and explain how it can be viewed as a program transformation.
Reference: [Joh88] <author> R. Johnson and B. Foote. </author> <title> Designing Reusable Classes. </title> <booktitle> In Journal of Object-Oriented Programming, </booktitle> <pages> pages 22-35, </pages> <month> June/July </month> <year> 1988. </year>
Reference-contexts: For example, a transformation might directly implement the Abstract Factory design pattern given the classes involved in the pattern. The design patterns in Appendix B would be candidates for these advanced transformations. 6.2 Expected Benefits Designing frameworks requires a great deal of experience and experimentation <ref> [Joh88] </ref>. Design patterns capture object-oriented design experience. Object-oriented transformations provide an evolutionary means for employing design patterns in current systems.
Reference: [Joh92] <author> R. Johnson. </author> <title> Documenting Frameworks with Patterns. </title> <booktitle> In OOPSLA 92 Proceedings, SIGPLAN Notices, </booktitle> <volume> 27(10), </volume> <pages> pages 63-76, </pages> <address> Vancouver BC, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: Recent work has recognized an important kind of design reuse: object-oriented design patterns, i.e., recurring patterns of relationships between classes, objects, methods, etc. that define preferred solutions to common object-oriented design problems <ref> [Gam92, Coa92, Joh92, Gam94] </ref>. While design patterns are useful when included in an initial software design, they are often applied in the maintenance phase of the software lifecycle [Gam93].
Reference: [Kra88] <author> Glenn E. Krasner and Stephen T. Pope. </author> <title> A cookbook for using the model-view-controller user interface paradigm in Smalltalk-80. </title> <booktitle> In Journal of Object-Oriented Programming, </booktitle> <pages> pages 26-49, </pages> <month> August </month> <year> 1988. </year>
Reference: [LaL91] <author> W. LaLonde and J. Pugh. </author> <title> Subclassing != Subtyping != Is-a. </title> <booktitle> In Journal of Object-Oriented Programming, </booktitle> <pages> pages 57-62, </pages> <month> January </month> <year> 1991. </year>
Reference: [Lin92] <author> M. Linton. </author> <title> Encapsulating a C++ Library. </title> <booktitle> In Proceedings of the 1992 USENIX C++ Conference, </booktitle> <pages> pages 57-66, </pages> <address> Portland, Oregon, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: Patterns have been discovered in a wide variety of applications and toolkits including Smalltalk Collections [Gol84], ET++ [Wei88], MacApp [App89], InterViews <ref> [Lin92] </ref>, etc. Page 2 In this section, we present a design pattern and explain how it can be viewed as a program transformation. The notation we use for displaying class diagrams is adopted from Rumbaugh [Rum91] with extensions for representing code fragments [Gam92] and general class dependencies. <p> A summary of the notation is given in Appendix A. 2.1 A Design Pattern Example Subclasses are often designed for use specifically with other subclasses. The Abstract Factory design pattern employed by InterViews <ref> [Lin92] </ref> and ET++ [Wei88] and documented in [Gam93] ensures that compatible objects are created. For example, consider the classes in Figure 2.1. The superclass ScrollBar has two subclasses: MotifScrollBar and OpenLookScrollBar. Window also has two subclasses: MotifWindow and OpenLookWindow. Motif scrollbars are intended to work with Motif windows.
Reference: [Mey88] <author> Ware Meyers. </author> <title> Interview with Wilma Osborne. </title> <booktitle> In IEEE Software 5 (3), </booktitle> <pages> pages 104-105, </pages> <year> 1988. </year>
Reference: [Rum91] <author> J. Rumbaugh et. al. </author> <title> Object-Oriented Modelling and Design. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1991. </year>
Reference-contexts: Page 2 In this section, we present a design pattern and explain how it can be viewed as a program transformation. The notation we use for displaying class diagrams is adopted from Rumbaugh <ref> [Rum91] </ref> with extensions for representing code fragments [Gam92] and general class dependencies. A summary of the notation is given in Appendix A. 2.1 A Design Pattern Example Subclasses are often designed for use specifically with other subclasses.
Reference: [Wei88] <author> A. Weinand, E. Gamma, and R. Marty. </author> <title> ET++ -- An Object-Oriented Application Framework in C++. </title> <booktitle> In Object-Oriented Programming Systems, Languages, and Applications Conference, </booktitle> <pages> pages 46-57, </pages> <address> San Diego, California, </address> <month> September </month> <year> 1988. </year>
Reference-contexts: Patterns have been discovered in a wide variety of applications and toolkits including Smalltalk Collections [Gol84], ET++ <ref> [Wei88] </ref>, MacApp [App89], InterViews [Lin92], etc. Page 2 In this section, we present a design pattern and explain how it can be viewed as a program transformation. <p> A summary of the notation is given in Appendix A. 2.1 A Design Pattern Example Subclasses are often designed for use specifically with other subclasses. The Abstract Factory design pattern employed by InterViews [Lin92] and ET++ <ref> [Wei88] </ref> and documented in [Gam93] ensures that compatible objects are created. For example, consider the classes in Figure 2.1. The superclass ScrollBar has two subclasses: MotifScrollBar and OpenLookScrollBar. Window also has two subclasses: MotifWindow and OpenLookWindow. Motif scrollbars are intended to work with Motif windows.
References-found: 14

