URL: http://www.daimi.aau.dk/~daniel/texts/open.ps.gz
Refering-URL: http://www.daimi.aau.dk/~daniel/texts/
Root-URL: http://www.daimi.aau.dk
Title: A proof of Higman's lemma by structural induction  
Author: Thierry Coquand, Daniel Fridlender 
Date: November 1993  
Affiliation: Chalmers University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> L. Augustsson and T. Johnsson. </author> <title> "Lazy ML User's Manual." Programming Methodology Group, </title> <institution> Department of Computer Sciences, Chalmers, </institution> <note> Distributed with the LML compiler, </note> <year> 1993 </year>
Reference-contexts: Our computational model will be a lazy language with one global exception mechanism (like in lml <ref> [1] </ref>). We call raise this exception.
Reference: [2] <author> R.M. Burstall. </author> <title> "Proving properties of programs by structural induction." </title> <journal> Computer Journal 12(1), p. </journal> <volume> 41 - 48, </volume> <year> 1969. </year>
Reference-contexts: All objects in this proof are presented inductively, and proofs are done by the so-called "proof induction" or "rule induction", that is by induction over the structure of an hypothetical proof 2 . The power and elegance of this kind of arguments has been recognized in computing science <ref> [2, 5] </ref>. This paper gives an example of such an inductive proof for a combinatorial problem. While there exist other constructive proofs of Higman's lemma (see for instance [10, 14]), the present argument has been recorded for its extreme formal simplicity. <p> 1 See [10] for a general discussion on the problem of finding a constructive proof of Higman's lemma. 2 The first systematic presentation of such an induction rule seems to be [4], under the name of "deduction induction." The importance of this proof method for computing science is stressed in <ref> [2] </ref>. 1 1 Formalisation The words on a two letters alphabet, denoted by x; y; : : : are introduced by: 0 : Bin S 0 (x) : Bin S 1 (x) : Bin Finite sequences of such words, denoted by A; B; C; : : : are introduced by: Nil
Reference: [3] <author> Th. Coquand. </author> <title> "Constructive Topology and Combinatorics." </title> <booktitle> Constructivity in Computer Science, </booktitle> <volume> LNCS 613, </volume> <pages> pp. 159 - 164, </pages> <year> 1991. </year>
Reference-contexts: This inductive proof was actually found from the usual non constructive argument by using the technique described in <ref> [3] </ref>.
Reference: [4] <author> H. Curry and R. </author> <title> Feys. </title> <booktitle> Combinatory Logic, </booktitle> <volume> Vol. 1. </volume> <publisher> North-Holland Publishing Company </publisher>
Reference-contexts: two facts give strong indication that this algorithm can be considered as the computational content of the Nash-Williams argument. 1 See [10] for a general discussion on the problem of finding a constructive proof of Higman's lemma. 2 The first systematic presentation of such an induction rule seems to be <ref> [4] </ref>, under the name of "deduction induction." The importance of this proof method for computing science is stressed in [2]. 1 1 Formalisation The words on a two letters alphabet, denoted by x; y; : : : are introduced by: 0 : Bin S 0 (x) : Bin S 1 (x)
Reference: [5] <author> J. Despeyroux. </author> <title> "Proof of Translation in Natural Semantics." </title> <booktitle> Proceedings of the First ACM Conference on Logic in Computer Science, </booktitle> <pages> pp. </pages> <note> 193 - 205, LICS, </note> <year> 1986. </year>
Reference-contexts: All objects in this proof are presented inductively, and proofs are done by the so-called "proof induction" or "rule induction", that is by induction over the structure of an hypothetical proof 2 . The power and elegance of this kind of arguments has been recognized in computing science <ref> [2, 5] </ref>. This paper gives an example of such an inductive proof for a combinatorial problem. While there exist other constructive proofs of Higman's lemma (see for instance [10, 14]), the present argument has been recorded for its extreme formal simplicity.
Reference: [6] <author> P. Dybjer. </author> <title> "Comparing Integrated and External Logics of Functional Programs." </title> <booktitle> Science of Computer Programming 14, </booktitle> <pages> pp. 59-79, </pages> <year> 1990. </year>
Reference-contexts: Another direction may be to "reverse" the present analysis. Given a program about streams, is it possible to look at this program as an extracted program from an inductive proof? This question may be important for an "integrated approach" <ref> [6] </ref> of programs with streams. Acknowledgement Thanks to Chet Murthy for pointing to us that a precise connection between the functional program and the program with states can probably be done via a first-order partial interpretation, and to John Hugues for explaining the meaning of this remark.
Reference: [7] <author> G. Higman. </author> <title> "Ordering by divisibility in abstract algebras." </title> <journal> Proc. London Math. Soc., </journal> <volume> volume 2, </volume> <pages> pp. </pages> <address> 326 -366, </address> <year> 1952. </year>
Reference-contexts: Higman's lemma <ref> [7] </ref> says that for any infinite sequence x 1 ; x 2 ; : : : of such binary words, there exists p &lt; q such that x p x q : Nash-Williams has discovered a beautiful argument for proving this lemma [11].
Reference: [8] <author> K. Larsen. </author> <title> "Proof Systems for Henessy-Milner Logic with Recursion." </title> <booktitle> in LNCS 299, CAAP'88, </booktitle> <pages> pp. 215 - 230, </pages> <year> 1988. </year>
Reference-contexts: Higman's lemma is formulated inductively as Bar (Nil). This follows the usual definition of the "eventuality" operator in modal logic (see for instance <ref> [8] </ref>): Bar (Nil) expresses that any "growing" sequence of binary words x 1 !x 1 x 2 !x 1 x 2 x 3 : : : is eventually good. 2 A proof by structural induction We introduce four binary relations R 0 ; R 1 ; T 0 and T 1
Reference: [9] <author> Murthy, C. </author> <title> (1990) "Extracting Constructive Content From Classical Proofs." </title> <type> Ph.D. Thesis, </type> <institution> Cornell University. </institution>
Reference: [10] <author> C. Murthy, J. R. Russell. </author> <title> "A Constructive Proof of Higman's Lemma." </title> <booktitle> Proceedings of the Fifth ACM Conference on Logic in Computer Science, </booktitle> <pages> pp. </pages> <note> 257 - 267, LICS, </note> <year> 1990. </year>
Reference-contexts: The power and elegance of this kind of arguments has been recognized in computing science [2, 5]. This paper gives an example of such an inductive proof for a combinatorial problem. While there exist other constructive proofs of Higman's lemma (see for instance <ref> [10, 14] </ref>), the present argument has been recorded for its extreme formal simplicity. <p> This inductive proof was actually found from the usual non constructive argument by using the technique described in [3]. These two facts give strong indication that this algorithm can be considered as the computational content of the Nash-Williams argument. 1 See <ref> [10] </ref> for a general discussion on the problem of finding a constructive proof of Higman's lemma. 2 The first systematic presentation of such an induction rule seems to be [4], under the name of "deduction induction." The importance of this proof method for computing science is stressed in [2]. 1 1 <p> Conclusion We have presented a direct constructive proof of Higman's lemma. Furthermore this proof uses only the principle of structural induction. As such, the formal structure of the proof is much simpler and transparent than the arguments in the literature <ref> [11, 10, 14] </ref>, and it can be, and has been, directly mechanized.
Reference: [11] <author> C. Nash-Williams. </author> <title> "On well-quasi-ordering finite trees." </title> <journal> in Proc. Cambridge Phil. Soc. </journal> <volume> 59, </volume> <pages> pp. 833 - 835, </pages> <year> 1963. </year> <title> 6 It can be shown that this algorithm is different from the one we get by the A-translation method [9], which tends to prove that this method changes some intensional aspect of the proof 9 </title>
Reference-contexts: Higman's lemma [7] says that for any infinite sequence x 1 ; x 2 ; : : : of such binary words, there exists p &lt; q such that x p x q : Nash-Williams has discovered a beautiful argument for proving this lemma <ref> [11] </ref>. We present here a proof by structural induction of Higman's lemma; this proof can be seen as a constructive version of Nash-Williams' proof 1 . The proof illustrates the use of inductively defined relations and proofs by rule inductions (or inductions on the structure of proofs). <p> Conclusion We have presented a direct constructive proof of Higman's lemma. Furthermore this proof uses only the principle of structural induction. As such, the formal structure of the proof is much simpler and transparent than the arguments in the literature <ref> [11, 10, 14] </ref>, and it can be, and has been, directly mechanized.
Reference: [12] <author> J.C. Raoult. </author> <title> "Proving open properties by induction." </title> <journal> Information Processing Letters 29, pp. </journal> <volume> 19 - 23, </volume> <year> 1988. </year>
Reference-contexts: This termination can be extracted however from the "open induction principle" of J.C. Raoult <ref> [12] </ref>.
Reference: [13] <author> D. Scott. </author> <title> "A type-theoretical alternative to CUCH, </title> <booktitle> ISWIM and OWHY." Theoretical Computer Science, </booktitle> <year> 1993. </year>
Reference-contexts: We can make this argument completely precise. We claim that if we consider the computation of OE on an incomplete element (see <ref> [13] </ref>) OE (x 1 :x 2 : : : x n : ?); it is equal to raise iff the element insert (: : : (insert (insert empty x 1 ) x 2 ) : : :) x n is equal to raise: In particular, this gives another proof that this
Reference: [14] <author> F. Richman and G. Stolzenberg. </author> <title> "Well Quasi-Ordered Sets." </title> <booktitle> Advances in Mathematics, 1993. </booktitle> <volume> Vol 97, </volume> <pages> pages 145-153. 10 </pages>
Reference-contexts: The power and elegance of this kind of arguments has been recognized in computing science [2, 5]. This paper gives an example of such an inductive proof for a combinatorial problem. While there exist other constructive proofs of Higman's lemma (see for instance <ref> [10, 14] </ref>), the present argument has been recorded for its extreme formal simplicity. <p> Conclusion We have presented a direct constructive proof of Higman's lemma. Furthermore this proof uses only the principle of structural induction. As such, the formal structure of the proof is much simpler and transparent than the arguments in the literature <ref> [11, 10, 14] </ref>, and it can be, and has been, directly mechanized.
References-found: 14

