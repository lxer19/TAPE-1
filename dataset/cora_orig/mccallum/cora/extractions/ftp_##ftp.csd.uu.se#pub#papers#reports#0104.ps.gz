URL: ftp://ftp.csd.uu.se/pub/papers/reports/0104.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Email: email anatoli@csd.uu.se  email yumat@pdmi.ras.ru  email voronkov@csd.uu.se  
Title: Simple  
Author: Anatoli Degtyarev Yuri Matiyasevich Andrei Voronkov 
Keyword: Simultaneous Rigid E-Unification  
Address: Box 311, S-751 05 Uppsala, Sweden  St. Petersburg Division 27 Fontanka St.Petersburg, 191011 Russia  Box 311, S-751 05 Uppsala, Sweden  
Affiliation: Computing Science Department Uppsala University  Steklov Institute of Mathematics  Computing Science Department Uppsala University  
Note: is not so  Supported by a grant from the Swedish Institute Partially supported by a grant from the Swedish Royal Academy of Sciences Supported by a TFR grant  
Abstract: UPMAIL Technical Report No. 104 April 26, 1995 
Abstract-found: 1
Intro-found: 1
Reference: [Andrews 81] <author> P.B. Andrews. </author> <title> Theorem proving via general matings. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 28(2) </volume> <pages> 193-214, </pages> <year> 1981. </year>
Reference: [BecPet 94] <author> G. Becher and U. Petermann. </author> <title> Rigid unification by completion and rigid paramod-ulation. </title> <editor> In B. Nebel and L. Dreschler-Fischer, editors, </editor> <booktitle> KI-94: Advances in Artificial Intelligence. 18th German Annual Conference on Artificial Intelligence, volume 861 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 319-330, </pages> <address> Saarbrucken, Germany, September 1994. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: The proof of [GNRS 92] used an assumption that one can restrict oneself to substitutions which are minimal for each problem. In <ref> [BecPet 94] </ref> there is a counterexample to this assumption. In a series of faulty articles [Goubault 93c, Goubault 93d, Goubault 94] a simultaneous rigid E-unification algorithm is given with no proof of completeness. There are many simple examples when this algorithm cannot find a solution of a solvable system.
Reference: [Beltyukov 76] <author> A.P. Beltyukov. </author> <title> Decidability of the universal theory of natural numbers with addition and divisibility (in Russian). </title> <journal> Zapiski Nauchnyh Seminarov LOMI, </journal> <volume> 60 </volume> <pages> 15-28, </pages> <year> 1976. </year> <title> English translation in: </title> <journal> Journal of Soviet Mathematics. </journal>
Reference-contexts: The proof is by reduction to the Diophantine problem for addition and divisibility that was proven decidable in <ref> [Beltyukov 76] </ref>, [Lipshitz 78] and [Mart'janov 77]. While the proof of the decidability of this problem is not trivial, it is much simpler than the Makanin's proof of the decidability of word equations.
Reference: [BeKaNa 87] <author> D. Benanav, D. Kapur, and P. Narendran. </author> <title> Complexity of matching problems. </title> <journal> Journal of Symbolic Computations, </journal> <volume> 3 </volume> <pages> 203-216, </pages> <year> 1987. </year>
Reference-contexts: Almost no essential improvements have been made since 1977 despite the numerous attempts by other researchers 1 . No interesting upper bounds for complexity of this problem are yet known 2 . It is known that the problem is NP-hard <ref> [BeKaNa 87] </ref>. The Makanin's algorithm gives several exponents. It has not been properly investigated how many exponents there are, maybe because it is far from the known lower bound. 2.1 Definitions Let F = ff 1 ; : : : ; f n g be a finite alphabet of symbols.
Reference: [Bibel 87] <author> W. Bibel. </author> <title> Automated theorem proving. </title> <publisher> Vieweg Verlag, </publisher> <year> 1987. </year> <note> 2nd edition. </note>
Reference: [DegVor 94a] <author> A. Degtyarev and A. Voronkov. </author> <title> A new procedural interpretation of Horn clauses with equality. </title> <type> UPMAIL Technical Report 89, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: It takes advantage of ordering strategies and gives a hint on how to search for a suitable quantifier duplication due to the possibility of the incremental use of equation solutions. Equality elimination was used for equational logic programming <ref> [DegVor 94a] </ref>, the tableau method [DegVor 94b], the inverse method [DegVor 94c] and the connection method [DegVor 95a]. In [DeKoVo 95b] equality elimination is combined with basic folding, in order to transform equational logic programs into logic programs without equality. This paper is organized as follows.
Reference: [DegVor 94b] <author> A. Degtyarev and A. Voronkov. </author> <title> Equality elimination for semantic tableaux. </title> <type> UP-MAIL Technical Report 90, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: These results suggest that theorem proving with equality based on the matrix methods should look for foundations different from simultaneous rigid E-unification. In <ref> [DegVor 94b, DegVor 95a] </ref> the first and the third authors proposed an alternative solution based on equality elimination. The equality elimination method is based on a combination of a top-down matrix rule with the bottom-up equation solving. <p> It takes advantage of ordering strategies and gives a hint on how to search for a suitable quantifier duplication due to the possibility of the incremental use of equation solutions. Equality elimination was used for equational logic programming [DegVor 94a], the tableau method <ref> [DegVor 94b] </ref>, the inverse method [DegVor 94c] and the connection method [DegVor 95a]. In [DeKoVo 95b] equality elimination is combined with basic folding, in order to transform equational logic programs into logic programs without equality. This paper is organized as follows.
Reference: [DegVor 94c] <author> A. Degtyarev and A. Voronkov. </author> <title> Equality elimination for the inverse method and extension procedures. </title> <type> UPMAIL Technical Report 92, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: It takes advantage of ordering strategies and gives a hint on how to search for a suitable quantifier duplication due to the possibility of the incremental use of equation solutions. Equality elimination was used for equational logic programming [DegVor 94a], the tableau method [DegVor 94b], the inverse method <ref> [DegVor 94c] </ref> and the connection method [DegVor 95a]. In [DeKoVo 95b] equality elimination is combined with basic folding, in order to transform equational logic programs into logic programs without equality. This paper is organized as follows. In Section 1.1 we introduce main definitions concerning equations and substitutions.
Reference: [DegVor 95a] <author> A. Degtyarev and A. Voronkov. </author> <title> General connections via equality elimination. </title> <type> UP-MAIL Technical Report 93, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: These results suggest that theorem proving with equality based on the matrix methods should look for foundations different from simultaneous rigid E-unification. In <ref> [DegVor 94b, DegVor 95a] </ref> the first and the third authors proposed an alternative solution based on equality elimination. The equality elimination method is based on a combination of a top-down matrix rule with the bottom-up equation solving. <p> Equality elimination was used for equational logic programming [DegVor 94a], the tableau method [DegVor 94b], the inverse method [DegVor 94c] and the connection method <ref> [DegVor 95a] </ref>. In [DeKoVo 95b] equality elimination is combined with basic folding, in order to transform equational logic programs into logic programs without equality. This paper is organized as follows. In Section 1.1 we introduce main definitions concerning equations and substitutions. In Section 1.2 we define simultaneous rigid E-unification.
Reference: [DeKoVo 95b] <author> A. Degtyarev, Yu. Koval, and A. Voronkov. </author> <title> Handling equality in logic programming via basic folding. </title> <type> UPMAIL Technical Report 101, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Equality elimination was used for equational logic programming [DegVor 94a], the tableau method [DegVor 94b], the inverse method [DegVor 94c] and the connection method [DegVor 95a]. In <ref> [DeKoVo 95b] </ref> equality elimination is combined with basic folding, in order to transform equational logic programs into logic programs without equality. This paper is organized as follows. In Section 1.1 we introduce main definitions concerning equations and substitutions. In Section 1.2 we define simultaneous rigid E-unification.
Reference: [DerJou 90] <author> N. Dershowitz and J.-P. Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. Van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Methods and Semantics, chapter 6, </booktitle> <pages> pages 243-309. </pages> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year> <month> 24 </month>
Reference-contexts: The proof is done by reduction to the Diophantine problem for addition and divisibility whose (non-trivial) decidability was known. 1.1 Equations and substitutions The notion of terms, substitutions, equations and rewrite rules are standard and may be found e.g. in <ref> [DerJou 90] </ref>. A term, equation or rewrite rule is ground iff it has no variables. The set of all terms of a signature with variables in the set X is denoted by T (X), the set of all ground terms of the signature by T .
Reference: [Fitting 88] <author> M. </author> <title> Fitting. First-order modal tableaux. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 4:191--213, </volume> <year> 1988. </year>
Reference: [GNPS 88] <author> J.H. Gallier, P. Narendran, D. Plaisted, and W. Snyder. </author> <title> Rigid E-unification is NP-complete. </title> <booktitle> In Logic in Computer Science (LICS'88) (Edinburgh, Scotland), </booktitle> <pages> pages 338-346. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1988. </year>
Reference: [GNRS 92] <author> J. Gallier, P. Narendran, S. Raatz, and W. Snyder. </author> <title> Theorem proving using equational matings and rigid E-unification. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 39(2) </volume> <pages> 377-429, </pages> <year> 1992. </year>
Reference-contexts: 1 It has been proven NP-complete in <ref> [GNRS 92] </ref>, twice proven to be NEXPTIME-complete [Goubault 93c, Goubault 93d] and once DEXPTIME-complete [Goubault 94]. The monadic case was proven PSPACE-complete in [Goubault 93c, Goubault 93d, Goubault 94]. <p> It is easy to see that the set of all such t is exactly the set of all ground terms of . 2 There were two kinds of mistaken proofs of the decidability of simultaneous rigid E-unification. The proof of <ref> [GNRS 92] </ref> used an assumption that one can restrict oneself to substitutions which are minimal for each problem. In [BecPet 94] there is a counterexample to this assumption.
Reference: [GRS 87] <author> J.H. Gallier, S. Raatz, and W. Snyder. </author> <title> Theorem proving using rigid E-unification: Equational matings. </title> <booktitle> In Logic in Computer Science (LICS'87) (Ithaca, </booktitle> <address> N.Y.), </address> <pages> pages 338-346. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1987. </year>
Reference-contexts: Note that when E; s; t are ground, we have E j= 8 s = t iff E ` s = t. It is known that the problem of solvability of a (non-simultaneous) rigid E-unification problem is NP-complete <ref> [GRS 87] </ref>. Lemma 1.2 If a simultaneous rigid E-unification problem E is solvable then it has a ground so lution. 3 Proof.
Reference: [Goubault 93a] <author> J. Goubault. </author> <title> Demonstration Automatique en Logique Classique: Complexite et Methodes. </title> <type> PhD thesis, </type> <institution> Laboratoire d'informatique de l'ecole polytechnique, </institution> <year> 1993. </year>
Reference-contexts: 1 It has been proven NP-complete in [GNRS 92], twice proven to be NEXPTIME-complete [Goubault 93c, Goubault 93d] and once DEXPTIME-complete [Goubault 94]. The monadic case was proven PSPACE-complete in [Goubault 93c, Goubault 93d, Goubault 94]. Proofs of these papers contained irrecoverable errors. (According to [Goubault 93b], <ref> [Goubault 93a] </ref> also proved the monadic case to be outside of PSPACE.) 1 used so far. These results suggest that theorem proving with equality based on the matrix methods should look for foundations different from simultaneous rigid E-unification.
Reference: [Goubault 93b] <author> J. Goubault. </author> <title> A rule-based algorithm for rigid E-unification. </title> <editor> In Georg Gottlob, Alexander Leitsch, and Daniele Mundici, editors, </editor> <booktitle> Computational Logic and Proof Theory. Proceedings of the Third Kurt Godel Colloquium, KGC'93, volume 713 of Lecture Notes in Computer Science, </booktitle> <pages> pages 202-210, </pages> <address> Brno, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: 1 It has been proven NP-complete in [GNRS 92], twice proven to be NEXPTIME-complete [Goubault 93c, Goubault 93d] and once DEXPTIME-complete [Goubault 94]. The monadic case was proven PSPACE-complete in [Goubault 93c, Goubault 93d, Goubault 94]. Proofs of these papers contained irrecoverable errors. (According to <ref> [Goubault 93b] </ref>, [Goubault 93a] also proved the monadic case to be outside of PSPACE.) 1 used so far. These results suggest that theorem proving with equality based on the matrix methods should look for foundations different from simultaneous rigid E-unification.
Reference: [Goubault 93c] <author> J. Goubault. </author> <title> Simultaneous rigid E-unification is NEXPTIME-complete. </title> <type> Technical Report 93045, Bull, </type> <year> 1993. </year>
Reference-contexts: 1 It has been proven NP-complete in [GNRS 92], twice proven to be NEXPTIME-complete <ref> [Goubault 93c, Goubault 93d] </ref> and once DEXPTIME-complete [Goubault 94]. The monadic case was proven PSPACE-complete in [Goubault 93c, Goubault 93d, Goubault 94]. Proofs of these papers contained irrecoverable errors. (According to [Goubault 93b], [Goubault 93a] also proved the monadic case to be outside of PSPACE.) 1 used so far. <p> 1 It has been proven NP-complete in [GNRS 92], twice proven to be NEXPTIME-complete [Goubault 93c, Goubault 93d] and once DEXPTIME-complete [Goubault 94]. The monadic case was proven PSPACE-complete in <ref> [Goubault 93c, Goubault 93d, Goubault 94] </ref>. Proofs of these papers contained irrecoverable errors. (According to [Goubault 93b], [Goubault 93a] also proved the monadic case to be outside of PSPACE.) 1 used so far. <p> The proof of [GNRS 92] used an assumption that one can restrict oneself to substitutions which are minimal for each problem. In [BecPet 94] there is a counterexample to this assumption. In a series of faulty articles <ref> [Goubault 93c, Goubault 93d, Goubault 94] </ref> a simultaneous rigid E-unification algorithm is given with no proof of completeness. There are many simple examples when this algorithm cannot find a solution of a solvable system.
Reference: [Goubault 93d] <author> J. Goubault. </author> <title> Simultaneous rigid E-unification is NEXPTIME-complete (correction). </title> <type> Technical Report 93047, Bull, </type> <year> 1993. </year>
Reference-contexts: 1 It has been proven NP-complete in [GNRS 92], twice proven to be NEXPTIME-complete <ref> [Goubault 93c, Goubault 93d] </ref> and once DEXPTIME-complete [Goubault 94]. The monadic case was proven PSPACE-complete in [Goubault 93c, Goubault 93d, Goubault 94]. Proofs of these papers contained irrecoverable errors. (According to [Goubault 93b], [Goubault 93a] also proved the monadic case to be outside of PSPACE.) 1 used so far. <p> 1 It has been proven NP-complete in [GNRS 92], twice proven to be NEXPTIME-complete [Goubault 93c, Goubault 93d] and once DEXPTIME-complete [Goubault 94]. The monadic case was proven PSPACE-complete in <ref> [Goubault 93c, Goubault 93d, Goubault 94] </ref>. Proofs of these papers contained irrecoverable errors. (According to [Goubault 93b], [Goubault 93a] also proved the monadic case to be outside of PSPACE.) 1 used so far. <p> The proof of [GNRS 92] used an assumption that one can restrict oneself to substitutions which are minimal for each problem. In [BecPet 94] there is a counterexample to this assumption. In a series of faulty articles <ref> [Goubault 93c, Goubault 93d, Goubault 94] </ref> a simultaneous rigid E-unification algorithm is given with no proof of completeness. There are many simple examples when this algorithm cannot find a solution of a solvable system.
Reference: [Goubault 94] <author> J. Goubault. </author> <title> Rigid ~ E-unifiability is DEXPTIME-complete. </title> <booktitle> In Logic in Computer Science (LICS'94). </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: 1 It has been proven NP-complete in [GNRS 92], twice proven to be NEXPTIME-complete [Goubault 93c, Goubault 93d] and once DEXPTIME-complete <ref> [Goubault 94] </ref>. The monadic case was proven PSPACE-complete in [Goubault 93c, Goubault 93d, Goubault 94]. Proofs of these papers contained irrecoverable errors. (According to [Goubault 93b], [Goubault 93a] also proved the monadic case to be outside of PSPACE.) 1 used so far. <p> 1 It has been proven NP-complete in [GNRS 92], twice proven to be NEXPTIME-complete [Goubault 93c, Goubault 93d] and once DEXPTIME-complete [Goubault 94]. The monadic case was proven PSPACE-complete in <ref> [Goubault 93c, Goubault 93d, Goubault 94] </ref>. Proofs of these papers contained irrecoverable errors. (According to [Goubault 93b], [Goubault 93a] also proved the monadic case to be outside of PSPACE.) 1 used so far. <p> The proof of [GNRS 92] used an assumption that one can restrict oneself to substitutions which are minimal for each problem. In [BecPet 94] there is a counterexample to this assumption. In a series of faulty articles <ref> [Goubault 93c, Goubault 93d, Goubault 94] </ref> a simultaneous rigid E-unification algorithm is given with no proof of completeness. There are many simple examples when this algorithm cannot find a solution of a solvable system. <p> Consider the following example which does not even use function symbols: a = b ` 8 x = y ` 8 y = b It has one obvious solution fa=x; b=yg. However, this solution is not found by the Goubault's algorithm from <ref> [Goubault 94] </ref>. The reductions introduced in subsequent sections show that the decidability of simultaneous rigid E-unification can hardly have a simple proof. 4 Section 2 Word equations The problem of solvability of word equations belongs to the classics of the computability theory.
Reference: [Henglein 88] <author> F. Henglein. </author> <title> Type inference and semi-unification. </title> <booktitle> In Proceedings of the 1988 ACM Conference on LISP and Functional Programming, </booktitle> <pages> pages 184-197, </pages> <address> Snow-bird, Utah, USA, </address> <month> July 25-27 </month> <year> 1988. </year>
Reference: [HueOpe 80] <author> G. Huet and D.C. Oppen. </author> <title> Equations and rewrite rules. In Book, editor, Formal Languages: Perspectives and Open Problems. </title> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference: [Kanger 63] <author> S. Kanger. </author> <title> A simplified proof method for elementary logic. </title> <editor> In J. Siekmann and G. Wrightson, editors, </editor> <booktitle> Automation of Reasoning. Classical Papers on Computational Logic, </booktitle> <volume> volume 1, </volume> <pages> pages 364-371. </pages> <publisher> Springer Verlag, </publisher> <year> 1983. </year> <note> Originally appeared in 1963. </note>
Reference: [KMNS 88] <author> D. Kapur, D. Musser, P. Narendran, and J. Stillman. </author> <title> Semi-unification. </title> <booktitle> In Proceedings of the 8th Conference on Foundations of Software Technology and Theoretical Computer Science, volume 338 of Lecture Notes in Computer Science, </booktitle> <pages> pages 435-454, </pages> <address> Pune, India, December 21-23 1988. </address> <publisher> Springer Verlag. </publisher>
Reference: [KfTiUr 89] <author> A.J. Kfoury, J. Tiuryn, and P. Urzyczyn. </author> <title> Computational consequences and partial solutions of a generalized unification problem. </title> <booktitle> In Fourth IEEE Symposium on Logic in Computer Science, Asilomar, </booktitle> <address> CA, </address> <month> June 5-8 </month> <year> 1989. </year> <month> 25 </month>
Reference: [KfTiUr 93] <author> A.J. Kfoury, J. Tiuryn, and P. Urzyczyn. </author> <title> The undecidability of the semi--unification problem. </title> <journal> Information and Computation, </journal> <volume> 102 </volume> <pages> 83-101, </pages> <year> 1993. </year>
Reference-contexts: After several faulty proofs of the decidability of semi-unification, the undecidability of this problem was proven in <ref> [KfTiUr 93] </ref>. First we introduce ordinary semi-unification, following [KfTiUr 93]. Definition 3.1 A semi-unification problem is a finite set of expressions s 1 t 1 s n t n where s i ; t i are terms in a signature . <p> After several faulty proofs of the decidability of semi-unification, the undecidability of this problem was proven in <ref> [KfTiUr 93] </ref>. First we introduce ordinary semi-unification, following [KfTiUr 93]. Definition 3.1 A semi-unification problem is a finite set of expressions s 1 t 1 s n t n where s i ; t i are terms in a signature . <p> Semi-unification is undecidable <ref> [KfTiUr 93] </ref>.
Reference: [LanMus 78] <author> D.S. Lankford and D.R. Musser. </author> <title> A finite termination criterion. </title> <type> Technical report, </type> <institution> USC Information Sciences Institute, Marina del Rey, </institution> <address> CA, </address> <year> 1978. </year>
Reference: [Lei 89] <author> H. Lei. </author> <title> Semi-unification and type inference for polymorphic recursion. </title> <type> Technical Report INF2-ASE-5-89, </type> <institution> Siemens AG, Munich, </institution> <month> May </month> <year> 1989. </year>
Reference: [Lei 90] <author> H. Lei. </author> <title> Polymorphic recursion and semi-unification. </title> <editor> In E. Borger, G. Jager, H. Kleine Buning, and M.M. Richter, editors, </editor> <booktitle> CSL'89 (Proc. 3rd Workshop on Computer Science Logic), volume 440 of Lecture Notes in Computer Science, </booktitle> <pages> pages 211-224, </pages> <address> Kaiserslautern, Germany, 1990. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: reducible to monadic simultaneous rigid E-unification. 8 Section 3 The variable-bounded semi-unification Semi-unification has been introduced in several areas of logic and computer science [LanMus 78, Henglein 88, KMNS 88, Pudlak 88, KfTiUr 89, Lei 89], most notably because of its relation to the typability problem for polymorphic recursive definitions <ref> [Lei 90] </ref>. After several faulty proofs of the decidability of semi-unification, the undecidability of this problem was proven in [KfTiUr 93]. First we introduce ordinary semi-unification, following [KfTiUr 93].
Reference: [Lipshitz 78] <author> L. Lipshitz. </author> <title> The Diophantine problem for addition and divisibility. </title> <journal> Transactions of the American Mathematical Society, </journal> <volume> 235 </volume> <pages> 271-283, </pages> <month> January </month> <year> 1978. </year>
Reference-contexts: The proof is by reduction to the Diophantine problem for addition and divisibility that was proven decidable in [Beltyukov 76], <ref> [Lipshitz 78] </ref> and [Mart'janov 77]. While the proof of the decidability of this problem is not trivial, it is much simpler than the Makanin's proof of the decidability of word equations.
Reference: [Lipshitz 81] <author> L. Lipshitz. </author> <title> Some remarks on the Diophantine problem for addition and divisibility. </title> <journal> Bull. Soc. Math. Belg. Ser. B, </journal> <volume> 33(1) </volume> <pages> 41-52, </pages> <year> 1981. </year>
Reference-contexts: However, it is not known whether the Diophantine problem for addition and divisibility is in NP <ref> [Lipshitz 81] </ref>. The above reduction shows that there can hardly be a simple direct decidability proof even for the case with one unary function symbol because proofs of the decidability of the Diophantine problem for addition and divisibility use deep number-theoretic facts.
Reference: [Loveland 68] <author> D.W. Loveland. </author> <title> Mechanical theorem proving by model elimination. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 15 </volume> <pages> 236-251, </pages> <year> 1968. </year>
Reference: [Makanin 77] <author> G.S. Makanin. </author> <title> The problem of solvability of equations in free semigroups. </title> <journal> Mat. Sbornik (in Russian), </journal> <volume> 103(2) </volume> <pages> 147-236, </pages> <year> 1977. </year> <title> English Translation in Math. </title> <journal> USSR Sbornik, </journal> <volume> 32, </volume> <year> 1977. </year>
Reference-contexts: The study of the word equation solving was initiated by Markov in the 1950s after his example of a finitely presented semigroup with the undecidable word problem. The decidability of the word equations has been proven only in 1977 by Makanin <ref> [Makanin 77] </ref>. Despite the very simple formulation, the problem happened to be extremely hard (the mathematically dense proof in [Makanin 77] occupies 88 journal pages). Almost no essential improvements have been made since 1977 despite the numerous attempts by other researchers 1 . <p> The decidability of the word equations has been proven only in 1977 by Makanin <ref> [Makanin 77] </ref>. Despite the very simple formulation, the problem happened to be extremely hard (the mathematically dense proof in [Makanin 77] occupies 88 journal pages). Almost no essential improvements have been made since 1977 despite the numerous attempts by other researchers 1 . No interesting upper bounds for complexity of this problem are yet known 2 . It is known that the problem is NP-hard [BeKaNa 87].
Reference: [Mart'janov 77] <author> V.I. Mart'janov. </author> <title> Universal extended theories of integers. </title> <journal> Algebra i Logika, </journal> <volume> 16(5) </volume> <pages> 588-602, </pages> <year> 1977. </year>
Reference-contexts: The proof is by reduction to the Diophantine problem for addition and divisibility that was proven decidable in [Beltyukov 76], [Lipshitz 78] and <ref> [Mart'janov 77] </ref>. While the proof of the decidability of this problem is not trivial, it is much simpler than the Makanin's proof of the decidability of word equations.
Reference: [Maslov 67] <author> S.Yu. Maslov. </author> <title> An invertible sequential variant of intuitionistic predicate calculus (in Russian). </title> <journal> Zapiski Nauchnyh Seminarov LOMI, </journal> <volume> 4 </volume> <pages> 96-111, </pages> <year> 1967. </year>
Reference: [Matiyasevic 68] <author> Yu.V. Matiyasevic. </author> <title> A connection between systems of word and length equations and Hilbert's tenth problem (in Russian). </title> <journal> Zap. Nauchn. Sem. Leningrad. Otdel. Mat. Inst. Steklov. (LOMI), </journal> <volume> 8 </volume> <pages> 132-144, </pages> <year> 1968. </year> <title> English Translation in: </title> <type> Sem. </type> <institution> Math. V.A. Steklov Math. Inst. </institution> <address> Leningrad 8 (1968). </address>
Reference: [Prawitz 60] <author> D. Prawitz. </author> <title> An improved proof procedure. </title> <editor> In J. Siekmann and G. Wrightson, editors, </editor> <booktitle> Automation of Reasoning. Classical Papers on Computational Logic, </booktitle> <volume> volume 1, </volume> <pages> pages 162-201. </pages> <publisher> Springer Verlag, </publisher> <year> 1983. </year> <note> Originally appeared in 1960. </note>
Reference: [Pudlak 88] <author> P. Pudlak. </author> <title> On a unification problem related to Kreisel's conjecture. </title> <journal> Mathematicae Universitatis Carolinae, </journal> <volume> 29(3) </volume> <pages> 551-556, </pages> <year> 1988. </year>
Reference: [Schulz 90] <author> K.U. Schulz, </author> <title> editor, Word Equations and Related Topics, </title> <booktitle> volume 572 of Lecture Notes in Computer Science, </booktitle> <pages> pages 1-12, </pages> <address> Tubingen, Germany, </address> <month> October </month> <year> 1990. </year> <month> 26 </month>
Reference-contexts: A word substitution of the form (2.2) is a solution of the word equation V 1 = V 2 iff 1 There are even workshops dedicated to the word equations solving <ref> [Schulz 90] </ref>. 2 A.Koscielski, G.Makanin, L.Pacholski, K.Schulz, J.Siekmann, (private communications). 5 1. var (V 1 = V 2 ) fx 1 ; : : : ; x n g; A word substitution is a solution of a set of equations iff it is a solution of each equation in this set.
References-found: 39

