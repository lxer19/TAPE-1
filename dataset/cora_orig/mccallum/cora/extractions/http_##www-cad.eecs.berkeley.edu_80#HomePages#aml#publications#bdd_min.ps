URL: http://www-cad.eecs.berkeley.edu:80/HomePages/aml/publications/bdd_min.ps
Refering-URL: http://www-cad.eecs.berkeley.edu:80/HomePages/aml/publications/index.html
Root-URL: 
Title: Exact Minimization of Boolean Decision Diagrams Using Implicit Techniques  
Abstract: This paper addresses the problem of Boolean decision diagram (BDD) minimization in the presence of don't care sets. Specifically, given an incompletely specified function g and a fixed ordering of the variables, we propose an exact algorithm for selecting f such that f is a cover for g and the Boolean decision diagram for f is of minimum size. The approach described is the only known exact algorithm for this problem not based on explicit enumeration of all possible assignments for the points in the don't care set. We show that the BDD minimization problem can be formulated as a binate covering problem and solved using implicit enumeration techniques. In particular, we show that the minimum-sized Boolean decision diagram compatible with the specification can be found by solving a problem that is very similar to the problem of reducing incompletely specified finite state machines. We report experiments of an implicit implementation of our algorithm, by means of which a class of interesting examples was solved exactly.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Blumer, A. Ehrenfeucht, D. Haussler, and M. K. Warmuth. </author> <title> Occam's razor. </title> <journal> Inform. Proc. Lett., </journal> <volume> 24 </volume> <pages> 377-380, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: This requires an exact algorithm to find those solutions or at least to validate the quality of heuristic algorithms. For instance, in inductive learning applications, the accuracy of the inferred hypotheses is strongly dependent on the complexity of the result <ref> [1] </ref>. One possible and very effective representation scheme for inferred hypotheses are BDDs.
Reference: [2] <author> K. Brace, R. Rudell, and R. Bryant. </author> <title> Efficient implementation of a BDD package. </title> <booktitle> In The Proceedings of the Design Automation Conference, </booktitle> <pages> pages 40-45, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: This similarity makes it possible to use implicit enumeration techniques developed for the purpose of ISFSM reduction [9] to solve efficiently the BDD minimization problem. The manipulation of the characteristic functions of the sets of compatibles and prime compatibles, represented with ROBDDs <ref> [2] </ref>, allows the generation of very large sets that cannot be enumerated explicitly, as it is demonstrated in the experiments. The transformation presented in this paper and the algorithms developed for the solution are important for practical and theoretical reasons.
Reference: [3] <author> R. Brayton, G. Hachtel, C. McMullen, and A. Sangiovanni-Vincentelli. </author> <title> Logic Minimization Algorithms for VLSI Synthesis. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1984. </year>
Reference-contexts: Under certain conditions, these upper bounds tend to become tight, with high probability, as the size of the problem increases, providing a welcome check for the results obtained. 15 The second set of problems was obtained by selecting a subset of the problems that are distributed with Espresso <ref> [3] </ref>, a well known two-level minimizer. More specifically, we included in this set of problems the functions that are the first output from each of the PLAs that are included in the industry subset of the Espresso benchmark suite.
Reference: [4] <author> R. Bryant. </author> <title> Graph based algorithm for Boolean function manipulation. </title> <journal> In IEEE Transactions on Computers, </journal> <pages> pages C-35(8):667-691, </pages> <year> 1986. </year> <title> 3 Notice that for the heuristic algorithms the sizes of the BDD have been measured without considering complement edges. </title> <type> 17 </type>
Reference-contexts: For a given ordering of the variables, the BDD for f is unique <ref> [4] </ref> and the problem addressed has a well defined solution. We show that this minimization problem can be solved by selecting a minimum sized cover for a graph that satisfies some additional closure conditions. <p> Implicit techniques are based on the idea of operating on discrete sets by their characteristic functions represented by binary decision diagrams (BDDs) <ref> [4] </ref>. To perform state minimization, one needs to represent and manipulate efficiently sets of sets of states. With n states, each subset of states is represented in positional-set form, using a set of n Boolean variables, x = x 1 x 2 : : : x n .
Reference: [5] <author> S.-C. Chang, D.I. Cheng, and M. Marek-Sadowska. </author> <title> Minimizing ROBDD size of incompletely specified multiple output functions. </title> <booktitle> In The Proceedings of the European Design and Test Conference, </booktitle> <pages> pages 620-624, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: The restrict operator [7] and the constrain operator [6] (also known as generalized cofactor [19]) are two heuristics used to assign the don't cares of a BDD. A comprehensive study of heuristic BDD minimization has been presented in [16]. Another heuristic algorithm has been reported in <ref> [5] </ref>. We are aware also of work for an exact algorithm [17] based on the enumeration of the different covers that can be obtained by all possible assignments of the don't care points.
Reference: [6] <author> O. Coudert, C. Berthet, and J. C. Madre. </author> <title> Verification of sequential machines using functional Boolean vectors. </title> <booktitle> Proceedings of the IFIP International Workshop, Applied Formal Methods for Correct VLSI Design, </booktitle> <month> November </month> <year> 1989. </year>
Reference-contexts: Several heuristic algorithms for the problem addressed here have been proposed. These algorithms are important in applications where the available degrees of freedom in the functions represented can be used to reduce the memory requirements of BDD based algorithms. The restrict operator [7] and the constrain operator <ref> [6] </ref> (also known as generalized cofactor [19]) are two heuristics used to assign the don't cares of a BDD. A comprehensive study of heuristic BDD minimization has been presented in [16]. Another heuristic algorithm has been reported in [5]. <p> Instead, the column denoted with the label "heuristic" presented the solutions which can be obtained using the restrict operator [7], a well-known heuristic algorithm for BDD minimization; the same numbers 3 , can be obtained also using the constrain operator <ref> [6] </ref> (also known as generalized cofactor [19]). Therefore, it is clear that imagem represent effectively the first exact algorithm which can be used to measure the quality of the heuristics for BDD minimization.
Reference: [7] <author> O. Coudert, C. Berthet, and J. C. Madre. </author> <title> Verification of synchronous sequential machines based on symbolic execution. Proceedings of the Workshop on Automatic Verification Methods for Finite State Systems, </title> <booktitle> vol. 407 of Lecture Notes in Computer Science, </booktitle> <pages> pages 365-373, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Several heuristic algorithms for the problem addressed here have been proposed. These algorithms are important in applications where the available degrees of freedom in the functions represented can be used to reduce the memory requirements of BDD based algorithms. The restrict operator <ref> [7] </ref> and the constrain operator [6] (also known as generalized cofactor [19]) are two heuristics used to assign the don't cares of a BDD. A comprehensive study of heuristic BDD minimization has been presented in [16]. Another heuristic algorithm has been reported in [5]. <p> This number coincides with the number of nodes of the final BDD and represents the exact solution of the BDD minimization problem. Instead, the column denoted with the label "heuristic" presented the solutions which can be obtained using the restrict operator <ref> [7] </ref>, a well-known heuristic algorithm for BDD minimization; the same numbers 3 , can be obtained also using the constrain operator [6] (also known as generalized cofactor [19]).
Reference: [8] <author> A. Grasselli and F. Luccio. </author> <title> A method for minimizing the number of internal states in incompletely specified sequential networks. </title> <journal> IRE Transactions on Electronic Computers, </journal> <volume> EC-14(3):350-359, </volume> <month> June </month> <year> 1965. </year>
Reference-contexts: In particular, we show that the minimum sized Boolean decision diagram compatible with the specification can be found by solving a covering problem that is very similar to the covering problem obtained using exact algorithms for the reduction of incompletely specified finite state machines (ISFSM) <ref> [8] </ref>. This similarity makes it possible to use implicit enumeration techniques developed for the purpose of ISFSM reduction [9] to solve efficiently the BDD minimization problem.
Reference: [9] <author> T. Kam, T. Villa, R. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> A fully implicit algorithm for exact state minimization. </title> <booktitle> In The Proceedings of the Design Automation Conference, </booktitle> <pages> pages 684-690, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: This similarity makes it possible to use implicit enumeration techniques developed for the purpose of ISFSM reduction <ref> [9] </ref> to solve efficiently the BDD minimization problem. The manipulation of the characteristic functions of the sets of compatibles and prime compatibles, represented with ROBDDs [2], allows the generation of very large sets that cannot be enumerated explicitly, as it is demonstrated in the experiments. <p> Proof: Since the compatibles that can be part of the cover are the same in both G 0 and G, this result follows directly from theorem 6.1. 8 Implicit Computation of a Minimum Closed Cover We will use the unified implicit framework proposed in <ref> [9] </ref> 2 . Implicit techniques are based on the idea of operating on discrete sets by their characteristic functions represented by binary decision diagrams (BDDs) [4]. To perform state minimization, one needs to represent and manipulate efficiently sets of sets of states. <p> Our starting point is the fully implicit algorithm for exact state minimization reported in <ref> [9] </ref>, to which we refer for a complete description of the implicit computations. In the sequel we discuss the modifications needed to generate closed clique covers of the BDD. 8.2 Implicit Computation of L-closure We compute as in [9] the set of compatibles C (c), where C (c) = 1 iff <p> point is the fully implicit algorithm for exact state minimization reported in <ref> [9] </ref>, to which we refer for a complete description of the implicit computations. In the sequel we discuss the modifications needed to generate closed clique covers of the BDD. 8.2 Implicit Computation of L-closure We compute as in [9] the set of compatibles C (c), where C (c) = 1 iff c is the positional set representing a compatible of the companion FSM. <p> R is an exact solution of the BDD minimization problem. 9 Results Starting from the program ism for implicit state minimization <ref> [9] </ref> we developed imagem, a new program based on the theory described in this paper for exact BDD minimization.
Reference: [10] <author> L. Lavagno, P. McGeer, A. Saldanha, and A. L. Sangiovanni-Vincentelli. </author> <title> Timed Shannon Circuits: </title>
Reference-contexts: The selection of the minimum BDD consistent with an incompletely specified function is important also in logic synthesis applications that use BDDs not only as a tool for representing discrete functions but also to derive implementations that minimize some cost function. For instance, timed Shannon circuits <ref> [10] </ref> use 1 the structure of the BDD to derive low power implementations and stand to gain from algorithms for the reduction of BDDs. The same holds for DCVS trees and multiplexer-based FPGAs.
References-found: 10

