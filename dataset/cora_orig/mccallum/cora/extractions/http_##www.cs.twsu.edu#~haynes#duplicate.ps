URL: http://www.cs.twsu.edu/~haynes/duplicate.ps
Refering-URL: http://adept.cs.twsu.edu/~thomas/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: haynes@euler.mcs.utulsa.edu  
Title: Duplication of Coding Segments in Genetic Programming  
Author: Thomas Haynes 
Address: 600 South College Avenue Tulsa, OK 74104-3189  
Affiliation: The University of Tulsa  
Note: preprint from AAAI'96 1  
Abstract: Research into the utility of non-coding segments, or introns, in genetic-based encodings has shown that they expedite the evolution of solutions in domains by protecting building blocks against destructive crossover. We consider a genetic programming system where non-coding segments can be removed, and the resultant chromosomes returned into the population. This parsimonious repair leads to premature convergence, since as we remove the naturally occurring non-coding segments, we strip away their protective backup feature. We then duplicate the coding segments in the repaired chromosomes, and place the modified chromosomes into the population. The duplication method significantly improves the learning rate in the domain we have considered. We also show that this method can be applied to other domains. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Alberts, B.; Bray, D.; Lewis, J.; Raff, M.; Roberts, K.; and Watson, J. D. </author> <year> 1989. </year> <title> Molecular Biology of the Cell. </title> <publisher> Garland Publishing, Inc. </publisher>
Reference-contexts: The non-coding sequences might also act as a library for adaptation. During RNA splicing the non-coding sequences are stripped, producing a smaller RNA molecule. As the gene can be spliced in a variety of ways, the non-coding sequence for one mRNA could be a coding sequence for another <ref> (Alberts et al. 1989) </ref>. As a protein evolves to meet changes in the environment, it can also resort to the non-coding segments instead of evolving entirely new genetic material.
Reference: <author> Altenberg, L. </author> <year> 1994. </year> <title> The evolution of evolvability in genetic programming. </title> <editor> In Kinnear, Jr., K. E., ed., </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: He believes that small subtrees which appear frequently in S-expressions are GP's building blocks. These sub-trees are prevalent due to their contribution to the fitness of the chromosomes in which they appear. Altenberg <ref> (Altenberg 1994) </ref> believes duplications appear inside GP chromosomes due to two selection forces adding blocks of code to the population. The genetic operators spread a block to different chromosomes, and an emergent selection pressure causes the formation of duplication within a chromosome.
Reference: <author> Angeline, P. J. </author> <year> 1994. </year> <title> Genetic programming and emergent intelligence. </title> <editor> In Kinnear, Jr., K. E., ed., </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: The genetic operators spread a block to different chromosomes, and an emergent selection pressure causes the formation of duplication within a chromosome. The duplication is a result of the fitness of the block being replicated. Angeline <ref> (Angeline 1994) </ref> reports while there is redundancy in chromosomes, the benefit of these semantically extraneous components is in the prevention of destructive crossover. He highlights a difference between GAs and GPs with regards to non-coding segments: in GAs they are added by design and in GPs they evolve naturally.
Reference: <author> Futuyma, D. J. </author> <year> 1986. </year> <title> Evolutionary Biology. </title> <address> Sunder-land, MA: </address> <publisher> Sinauer Associate. </publisher>
Reference-contexts: Non-coding segments Non-coding segments model the intragenic regions reported in the biological literature and are the intron segments seen in the GBE literature. They account for a large fraction of the DNA <ref> (Futuyma 1986) </ref> and are believed to be backup material for the coding segments. For example, the frog Xenopus laevis has 450 copies of the gene codings for 18S and 28S rRNA and 24,000 copies of the gene for 5S rRNA (Futuyma 1986). <p> They account for a large fraction of the DNA <ref> (Futuyma 1986) </ref> and are believed to be backup material for the coding segments. For example, the frog Xenopus laevis has 450 copies of the gene codings for 18S and 28S rRNA and 24,000 copies of the gene for 5S rRNA (Futuyma 1986). The non-coding sequences might also act as a library for adaptation. During RNA splicing the non-coding sequences are stripped, producing a smaller RNA molecule.
Reference: <author> Goldberg, D. E. </author> <year> 1989. </year> <title> Genetic Algorithms in Search, </title> <journal> Optimization & Machine Learning. </journal>
Reference-contexts: GA chromosomes are typically of fixed length. With a string of length l, and a building block of defining length ffi, any crossover operation has a probability P l = l 1 of destroying a building block <ref> (Goldberg 1989) </ref>.
Reference: <author> Haynes, T. D.; Schoenefeld, D. A.; and Wainwright, R. L. </author> <year> 1996. </year> <title> Type inheritence in strongly typed genetic programming. </title> <editor> In Angeline, P., and Kinnear, Jr., K. E., eds., </editor> <booktitle> Advances in Genetic Programming 2. </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: STGP allows for an additional level of typing to be added. We have extended STGP by adding type inheritance to allow for more than two levels of typing <ref> (Haynes, Schoenefeld, & Wainwright 1996) </ref>. In the context of the clique detection domain, we are forcing the chromosome to evolve "lists" of nodes. The fitness function for the clique detector pares the chromosome down to the coding segments.
Reference: <author> Kalmanson, K. </author> <year> 1986. </year> <title> An Introduction to Discrete Mathematics and its Applications. </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: The goal is to find all cliques of G. Since the subgraph of G induced by any subset of the vertices of a complete subgraph of G is also complete, it is sufficient to find all maximal complete subgraphs of G <ref> (Kalmanson 1986) </ref>. A maximal complete subgraph of G is referred to as a maximal clique.
Reference: <author> Koza, J. R. </author> <year> 1992. </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <publisher> MIT Press. </publisher>
Reference-contexts: While the clique detection domain readily lends itself to the study of building blocks in the GP chromosome, our results are not domain dependent. Analysis shows that this method can work for any GP domain. Simple editing rules for GP chromosomes 5 have been identified <ref> (Koza 1992) </ref>. The methods used by compiler writers to optimize code are also applicable to "optimizing" the GP chromosome. An example of the repair and duplication process for other domains is shown in Figure 10. The parse tree to be evaluated is shown in Figure 10 (a).
Reference: <author> Levenick, J. R. </author> <year> 1991. </year> <title> Inserting introns improves genetic algorithm success rate: Taking a clue from biology. </title> <booktitle> In Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <pages> 123-127. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: They are integral to the schema the orem, which defines how the implicit parallel search of a GA "builds" better solutions over time. The addition of non-coding segments to chromosomes separates building blocks and protects them from being sliced by crossover <ref> (Levenick 1991) </ref>. GA chromosomes are typically of fixed length. With a string of length l, and a building block of defining length ffi, any crossover operation has a probability P l = l 1 of destroying a building block (Goldberg 1989).
Reference: <author> Montana, D. J. </author> <year> 1995. </year> <title> Strongly typed genetic programming. </title> <booktitle> Evolutionary Computation 3(2) </booktitle> <pages> 199-230. </pages>
Reference-contexts: ff and fi are constants which are configurable by the user, c = # of valid candidate maximal cliques, and n i = # nodes in clique i ; then the formula for measuring the fitness is: F = ffc + i=1 Approach We utilize a strongly typed GP (STGP) <ref> (Montana 1995) </ref> system instead of a canonical GP system to force type inheritance. A serious constraint on the user-defined terminals and functions in GP systems is closure, i.e. all of the functions must accept arguments of a single data type and return values of that type.
Reference: <author> Nordin, P. </author> <year> 1996. </year> <title> Explictly defined introns and destructive crossover in genetic programming. </title> <editor> In An-geline, P., and Kinnear, Jr., K. E., eds., </editor> <booktitle> Advances in Genetic Programming 2. </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: He highlights a difference between GAs and GPs with regards to non-coding segments: in GAs they are added by design and in GPs they evolve naturally. Nordin <ref> (Nordin 1996) </ref> investigates the dynamics of non-coding segments in GP evolution. His chromosomes are comprised of linear genomes which are 32 2 bit strings and are binary code for a SUN-4.
Reference: <author> O'Reilly, U.-M. </author> <year> 1995. </year> <title> An Analysis of Genetic Programming. </title> <type> Ph.D. Dissertation, </type> <institution> Carelton University, </institution> <address> Ottawa, Ontario, Canada. </address>
Reference: <author> Orvosh, D., and Davis, L. </author> <year> 1993. </year> <title> Shall we repair? Genetic algorithms, combinatorial optimization, and feasibilty constraints. </title> <booktitle> In Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <volume> 650. </volume> <publisher> Morgan Kaufman. </publisher>
Reference-contexts: Issues are whether or not to return the repaired chromosome into the population and at what rate of return <ref> (Orvosh & Davis 1993) </ref>. Repair is done at chromosome evaluation, not during the reproduction stage; there is no assurance that the repaired chromosome will even be selected for reproduction. The evaluation function maps chromosomes from GP space to clique set space, i.e. genotype to phenotype. <p> We find that in general: complete removal of non-coding segments causes premature convergence; increasing duplicates of the coding segment improves the learning; and, as the repair rate increases, and more than one duplicate of the coding segment is added to the chromosome, the learning increases. This contradicts earlier findings <ref> (Orvosh & Davis 1993) </ref>. Conclusions We utilize the tree structure of GP chromosomes to conduct experimentation into duplication of coding segments. We see that the duplication of three or more copies of the coding segments significantly speeds up the learning process for the clique detection problem.
Reference: <author> Rosca, J. </author> <year> 1995. </year> <title> Towards automatic discovery of building blocks in genetic programming. </title> <editor> In Siegel, E. S., and Koza, J. R., eds., </editor> <booktitle> AAAI Symposium on Genetic Programming, </booktitle> <pages> 78-85. </pages> <publisher> AAAI. </publisher>
Reference: <author> Tackett, W. A. </author> <year> 1993. </year> <title> Genetic programming for feature discovery and image discrimination. </title> <booktitle> In Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93. </booktitle> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: They facilitate the evolution of solutions in domains by guarding against destructive crossover by providing bits where the exchange of genetic material will not effect the fitness of the chromosome. Duplication of coding segments is found in GP chromosomes, and is believed to be the building blocks for GP <ref> (Tackett 1993) </ref>. Multiple appearances of a building block increases the probability that it will survive reproduction. GP research has a difficulty in identifying building blocks for a domain (O'Reilly 1995; Rosca 1995). <p> With the GP, building blocks are at the phenotype or semantical level, and are difficult to represent, detect, and capture. There can also be a duplication of building blocks in a GP chromosome, whereas there may not be any such duplication in a GA chromosome. Tackett <ref> (Tackett 1993) </ref> compares the difficulty in researching building blocks between GP and GA: different notations of schemata and a non-binary alphabet. He believes that small subtrees which appear frequently in S-expressions are GP's building blocks.
Reference: <author> Wu, A. S., and Lindsay, R. K. </author> <year> 1995. </year> <title> Empirical studies of the genetic algorithm with non-coding segments. </title> <booktitle> Evolutionary Computation 3(2). </booktitle> <pages> 6 </pages>
Reference-contexts: Adding the non-coding segment to the chromosome's tail reduces the probability of destructive crossover, but does not aid the recombination of building blocks as much as placing the non-coding segments between the building blocks <ref> (Wu & Lindsay 1995) </ref>. prevent destructive crossover. (a) Without the non-coding segment. (b) With the non-coding segment. The key to inserting non-coding segments into the GA chromosome is that they reduce the chance of destructive crossover. <p> Therefore material within a non-coding segment cannot be mixed with that within the coding segment. Thus the non-coding segment material is meaningless, and selection pressure does not drive it to be backup material. Wu and Lindsay <ref> (Wu & Lindsay 1995) </ref> point out that there is a drawback to inserting non-coding segments: they retard the growth of building blocks. It is hard for evolution to recombine the building blocks if non-coding segments are there to prevent destructive crossover.
References-found: 16

