URL: http://www.cs.umn.edu/research/shashi-group/paper_ps/ijait93.dynamic.ps
Refering-URL: http://www.cs.umn.edu/Research/shashi-group/abstract/ijait93.dynamic.abs.html
Root-URL: http://www.cs.umn.edu
Title: Evaluation of Real-Time Problem Solvers in Dynamic Environments  
Author: Shashi Shekhar Babak Hamidzadeh 
Address: Minneapolis, MN 55455 Clear Water Bay, Kowloon, Hong Kong  
Affiliation: Computer Science Dept. Computer Science Dept. University of Minnesota University of Science and Technology  
Abstract: There are many real-time application domains in which the world changes during the problem solving process. Several real-time search algorithms have been proposed for problem solving in dynamic environments. However, there has not been any s ystematic evaluation and comparison of these algorithms. This paper provides a classification of different dynamic worlds. It then provides a detailed model of a dynamic world where changes occur in edge costs around a zero mean. A formal analysis of the model suggests that the static rank ordering of solution paths is preserved in the proposed dynamic model. The paper provides analysis of two real-time search algorithms, namely DYNORAII and RTA*, for the real-time path planning problem. DYNORAII addresses response-time constraints and dynamic world issues simultaneously. We provide new results on the path planning problem in the proposed dynamic model of graphs. We also provide experimental evaluation of DYNORAII and RTA* in their ability to minimize response-times in dynamic environments. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. A. Brooks, </author> <title> ``A Robust Layered Control System for a Mobile Robot,'' </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> vol. RA-2, no. 1, </volume> <pages> pp. 14-23, </pages> <month> March, </month> <year> 1986. </year>
Reference: 2. <author> L. P. Kaelbling, </author> <title> ``An A rchitecture for Intelligent Reactive System,'' Reasoning about actions and plans: </title> <booktitle> Proc. 1986 Workshop, </booktitle> <pages> pp. 395-410, </pages> <publisher> Morgan Kauffman, </publisher> <year> 1987. </year>
Reference: 3. <author> R.E. Korf, </author> <title> ``Real-Time Heuristic Search: First Results,'' </title> <booktitle> Proc. AAAI Conference, </booktitle> <year> 1987. </year>
Reference-contexts: They search for a complete - 2 - execution plan, using the state of the world at the beginning of the planning process, before making their first move tow ards execution. In a dynamic situation, actions must be committed before their ultimate consequences are known <ref> [3] </ref>. The amount of planning before each move is limited by resources available and by the changes that occur in the environment. A class of response-time constraints impose optimality constraints on the total response-time of the system. <p> RTA*, which is an instance of such algorithms, has been proven correct and complete in the static world <ref> [3] </ref>. The theorems in this section are stated for an instance of these algorithms, namely DYNORAII. The results, however, can easily be generalized to instances of the class of algorithms that use the above paradigm to handle dynamic worlds.
Reference: 4. <author> R. E. Korf, </author> <title> ``Search: a survey of r ecent results,'' Exploring artificial intelligence ( Ed. </title> <editor> H. Shrobe), </editor> <publisher> Morgan Kauffman, </publisher> <year> 1988. </year>
Reference-contexts: Section 4 provides analysis of two real-time path planners in both static and dynamic environments. 2. Survey of Scheduling Algorithms for Real-Time tasks and Dynamic environments Simple blind search algorithms like depth first search, breadth first search and depth first iterative deepening <ref> [4] </ref> are useful for problem solving in small search spaces and situations where tight deadlines are non-existent. Most real-world applications, however, face very large search spaces and, often times, constraints on response time.
Reference: 5. <author> P. E. Hart, N. J. Nilsson, and B. Raphael, </author> <title> ``A Formal Basis For the Heuristic Determination of Minimum Cost Paths,'' </title> <journal> IEEE Transactions on Systems Science and Cybernetics, </journal> <volume> vol. SSC-4, no. 2, </volume> <pages> pp. 100-107, </pages> <year> 1968. </year>
Reference-contexts: Most real-world applications, however, face very large search spaces and, often times, constraints on response time. Classical search algorithms, such as A* <ref> [5] </ref> and IDA* [6] which guarantee optimal solutions in terms of execution times, do not guarantee meeting any constraints on response time.
Reference: 6. <author> R. E. Korf, </author> <title> ``Depth-First Iterative Deepening : An Optimal Admissible Tree Search,'' </title> <journal> Artificial Intelligence, </journal> <volume> vol. 27, </volume> <pages> pp. 97-109, </pages> <publisher> North-Holland, </publisher> <year> 1985. </year>
Reference-contexts: Most real-world applications, however, face very large search spaces and, often times, constraints on response time. Classical search algorithms, such as A* [5] and IDA* <ref> [6] </ref> which guarantee optimal solutions in terms of execution times, do not guarantee meeting any constraints on response time. Furthermore, such algorithms, due to the fact that they devise a complete solution plan before executing their first move, are not suitable to operate in - 3 - dynamic environments.
Reference: 7. <author> T. Dean and M. Boddy, </author> <title> ``An Analysis of Time Dependent Planning,'' </title> <booktitle> Proc. AAAI, </booktitle> <pages> pp. 49-54, </pages> <year> 1988. </year>
Reference-contexts: The world may have changed by the time a plan is generated, making the plan obsolete at the time of execution. These search techniques are also incapable of handling the on-line problems. Anytime algorithms characterize the requirements of decision procedures capable of meeting deadline constraints on planning time <ref> [7] </ref>. The utility of solutions planned via these algorithms increases over time. The algorithms can be terminated at any time and will return some answer at the time of termination. The answer returned improves if more time is available for planning.
Reference: 8. <author> S. Russell and E. H. Wefald, </author> <title> ``Decision Theoretic Control of Reasoning: General Theory and an Algorithm to Game Playing,'' </title> <note> Report No. UCB/CSD 88/435, p. </note> <institution> Computer Science Division, U.C.Berkeley, </institution> <year> 1988. </year>
Reference-contexts: The answer returned improves if more time is available for planning. These algorithms lend themselves to preemptive scheduling characteristic of the deadline constraints on response time. They are particularly useful in the case of variable deadlines and on-line problems. Meta-Greedy algorithm <ref> [8] </ref> is an anytime algorithm. It uses a sequence of evaluation functions to evaluate the promise of a node during search. A greedy approach is used to order the multiple evaluation functions. Negative local benefit from a step of planning terminates the search in that direction.
Reference: 9. <author> S. Shekhar and S. Dutta, </author> <title> ``Minimizing Response Times In Real Time Planning And Search,'' </title> <booktitle> Proceedings of 11th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 238-242, IJCAI, </pages> <year> 1989. </year>
Reference-contexts: A greedy approach is used to order the multiple evaluation functions. Negative local benefit from a step of planning terminates the search in that direction. The algorithm may be terminated at any time and it will produce a solution at that time. NORA <ref> [9] </ref> uses hierarchical planning to improve the solution at hand via the set of semantic information for database query planning. Like anytime algorithms, NORA improves the solution quality, giv en longer time. The algorithm may be terminated at any time and it will yield a solution. <p> The specification of real-time problem solvers is amenable to a variety of other analyses, including response time minimization. Response-time minimization is the ability to plan and execute a solution in minimum time. Response-time minimization is seldom infeasible <ref> [9] </ref>. We can evaluate real-time problem solvers for their total response time of finding and executing a solution for a class of graphs. For example, a pair of path planners can be analyzed to find the path planner producing smaller response times over a large number of graphs.
Reference: 10. <author> E. J. Horvitz, G. F. Cooper, and D. E. Heckerman, </author> <title> ``Reection and Action Under Scarce Resources: Theoretical Principles and Empirical Study,'' </title> <booktitle> Proceedings of 11th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 1121-1127, IJCAI, </pages> <year> 1989. </year>
Reference: 11. <author> M. Boddy, </author> <title> ``Anytime Problem Solving Using Dynamic Programming,'' </title> <booktitle> Proc. Ninth National Conference on Artificial Intelligence, AAAI, </booktitle> <year> 1991. </year>
Reference: 12. <author> R.E. Korf, </author> <title> ``Real-Time Heuristic Search: New Results,'' </title> <booktitle> Proc. AAAI Conference, </booktitle> <year> 1988. </year>
Reference: 13. <author> C. E. Shannon, </author> <title> ``Programming a Computer For Playing Chess,'' </title> <journal> Philosophical Magazine, </journal> <volume> vol. 41, </volume> <pages> pp. 256-275, </pages> <year> 1950. </year>
Reference-contexts: The complete plan to reach the goal is not worked out if planning takes a long time. The agent executes a partial plan without exploring all the consequences of this commitment. RTA* uses a variation of minmax search <ref> [ 13] </ref>, called minmin look-ahead search for partial planning. Minmin search looks forward from the current state to a fixed depth horizon and applies the heuristic evaluation function (f=g+h) of A* to the nodes at the depth frontier. The best f value is then sent back to the current node.
Reference: 14. <author> R. Sharma, </author> <title> ``Locally Efficient Path Planning in an Uncertain, Dynamic Environment using a Probabilistic Model,'' </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <note> (in Press), </note> <month> February, </month> <year> 1992. </year>
Reference: 15. <author> R. Sharma, </author> <title> ``Safe Motion Planning for a Robot in a Dynamic, Uncertain Environment,'' </title> <booktitle> Proc. of the 1991 International Conference on Robotics an Automation, IEEE, </booktitle> <year> 1991. </year>
Reference: 16. <author> B. Hamidzadeh and S. Shekhar, ``DYNORA: </author> <title> A Real-Time Planning Algorithm to Meet Response Time Constraints in Dynamic Environments,'' </title> <booktitle> Proc. of IEEE Conference on Tools - 20 - for Artificial Intelligence, </booktitle> <year> 1991. </year>
Reference-contexts: The sample should be unbiased, should represent population distribution, and should be large enough for significance tests. Problem size, n, needs to span a wide range of values, including large, n in order to reveal the asymptotic behavior of the algorithms. Tw o algorithms, namely RTA*[3] and DYNORAII <ref> [16] </ref>. Both of these algorithms work in cycles of partial search followed by execution. The paradigm of partial search followed by execution helps these algorithms to cope with changes in the environment. Both algorithms use a heuristic function to guide the partial search.
Reference: 17. <author> B. Hamidzadeh and S. Shekhar, </author> <title> ``Specification and Analysis of Real-Time Problem Solvers,'' </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 19, no. 8, </volume> <month> August, </month> <year> 1993. </year>
Reference-contexts: The total response time for a solution path is calculated by adding up the cost of planning the path and the cost of traversing that path, namely C p + C e . We hav e shown <ref> [17] </ref> that the problem of finding and traversing the optimal path (i.e., Min (C e )) in the minimum time possible (i.e., Min (C p + C e )) in a static environment is NP-complete.
Reference: 18. <author> F. L. Mannering and W. P. Kiloreski, </author> <title> Principles of Highway Engineering and Traffic Analysis, </title> <publisher> John Wiley and Sons, </publisher> <year> 1990. </year>
Reference-contexts: In modeling the environment, some knowledge about the nature of the change facilitates the design of search algorithms. We consider a zero-mean Markov process as the model of change in the environment. This model has been used in many applications <ref> [18] </ref>. For example, traffic volume in a freeway corridor is normally distributed. The delay to traverse freeway segments can be considered as a random variable that is normally distributed. Consider the situation in figure 1.
Reference: 19. <author> Sheldon Ross, </author> <title> ``Stochastic Processes,'' </title> <publisher> John Wiley and Sons, vol. EX. </publisher> <address> 8.11, </address> <year> 1983. </year>
Reference-contexts: Let us consider an arbitrary value x of a random variable X and an arbitrary value y of a random variable Y. There is a finite probability of the ev ent (x&gt;y). At the same time, there is a finite probability of the event (x&lt;y). Stochastic comparison <ref> [19] </ref> is one way to compare random variables. The following is a definition of a stochastically larger random variable. Definition: A random variable X is stochastically larger than the random variable Y, written X st Y , if: E [P- X &gt; y-] &gt; 2 for all Y .
Reference: 20. <author> P. G. Hoel, S. C. Port, and C. J. Stone, </author> <title> ``Introduction to Probability Theory,'' </title> <publisher> Houghton Mif-in Company, </publisher> <address> Boston, p. 159, </address> <year> 1971. </year>
Reference-contexts: Then X + Y has the normal density: n m 1 + m 2 , s 1 + s 2 proof of this theorem see <ref> [20] </ref>. Theorem 2 can be extended to more than two independent random variables. Using this the orem, we deduce the following theorem.
Reference: 21. <author> B. Hamidzadeh and S. Shekhar, </author> <title> ``Can Real-Time Search Algorithms Meet Deadlines?,'' </title> <booktitle> Proc. of the Tenth National Conference on Artificial Intelligence, AAAI, </booktitle> <year> 1992. </year>
Reference-contexts: Lemma 4.: DYNORAII and RTA* are probabilistically complete in a bounded Markov model of dynamic world. PROOF: The proof of this lemma follows from lemmas 2 and 3 and from the completeness of DYNORAII in a static environment <ref> [21] </ref>. Since DYNORAII is complete in the static world, and the expected performance of this algorithm in the Markov model remains stochastically the same as its performance in the static case, we conclude that DYNORAII is complete, in the average case, in the Markov model of dynamic world.
References-found: 21

