URL: http://www.pdos.lcs.mit.edu/papers/JoshThesis.ps
Refering-URL: http://www.pdos.lcs.mit.edu/PDOS-papers.html
Root-URL: 
Title: Issues in Building Mobile-Aware Applications with the Rover Toolkit  
Author: by Joshua A. Tauber M. Frans Kaashoek 
Degree: Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degree of Master of Science in Computer Science and Engineering at the  All rights reserved. Author  Certified by  Assistant Professor of Computer Science and Engineering Thesis Supervisor Accepted by Frederic R. Morgenthaler Chairman, Department Committee on Graduate Theses  
Date: (1991)  June 1996  May 28, 1996  
Note: (1991) B.A., Government  
Affiliation: B.S., Computer Science  Cornell University  MASSACHUSETTS INSTITUTE OF TECHNOLOGY  c Massachusetts Institute of Technology 1996.  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Adobe Systems. </author> <title> Programming the Display PostScript System with X. </title> <publisher> Addison-Wesley Pub. Co., </publisher> <address> Reading, MA, </address> <year> 1993. </year>
Reference-contexts: RDOs can be viewed as simple Agents [40] or as a light-weight form of process migration [9, 38, 43, 48]. Other forms of code shipping include Display Postscript <ref> [1] </ref>, Safe-Tcl [5], Active Pages [17], Dynamic Documents [23], and LISP Hypermedia [33]. RDOs are probably closest to Telescript [53], Ousterhout's Tcl agents [35], and Java [13].
Reference: [2] <author> M.G. Baker. </author> <title> Changing communication environments in MosquitoNet. </title> <booktitle> In Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 64-68, </pages> <address> Santa Cruz, CA, </address> <year> 1994. </year>
Reference-contexts: A number of proposals have been made for dealing with the limited communication environments for mobile computers. Katz surveys many of the challenges [24]. Baker describes MosquitoNet, which shares similar goals with Rover, but has not been implemented yet <ref> [2] </ref>. Oracle recently released a 60 product for mobile computers that provides asynchronous communication [10]; unfortunately, details and performance analysis are not available. A number of successful commercial applications have been developed for mobile hosts and limited-bandwidth channels.
Reference: [3] <author> J. Bartlett. </author> <title> W4|the Wireless World-Wide Web. </title> <booktitle> In Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 176-178, </pages> <address> Santa Cruz, CA, </address> <year> 1994. </year>
Reference-contexts: The key difference between Rover and other code shipping systems is that Rover provides RDOs with a well-defined object-based execution environment that provides a uniform naming scheme, an application-specific replication model, and QRPC. The InfoPad project [29] and W4 <ref> [3] </ref> focus on mobile wireless information access. The InfoPad project employs a dumb terminal, and o*oads all functionality from the client to the server. W4 employs a similar approach for accessing the Web from a small PDA. Rover, is designed to be more flexible.
Reference: [4] <author> A.D. Birrell and B.J. Nelson. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Trans. Comp. Syst., </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> Feb. </month> <year> 1984. </year>
Reference-contexts: Unlike simple message passing, QRPC incorporates stub generation, marshaling and unmarshal-ing of arguments, and at-most-once delivery semantics. QRPC differs from traditional asynchronous RPC in its failure semantics. [10] A traditional RPC fails when a network link is unavailable or when a host crashes <ref> [4] </ref>. QRPCs are stored in a stable log so that if links become unavailable or the sender or receiver crashes, they can be replayed upon recovery. They are deleted from the log only after a response has been received from the server.
Reference: [5] <author> N. S. Borenstein. </author> <title> EMail with a mind of its own: The Safe-Tcl language for enabled mail. </title> <booktitle> In IFIP Transactions C, </booktitle> <pages> pages 389-415, </pages> <address> Barcelona, Spain, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: RDOs can be viewed as simple Agents [40] or as a light-weight form of process migration [9, 38, 43, 48]. Other forms of code shipping include Display Postscript [1], Safe-Tcl <ref> [5] </ref>, Active Pages [17], Dynamic Documents [23], and LISP Hypermedia [33]. RDOs are probably closest to Telescript [53], Ousterhout's Tcl agents [35], and Java [13].
Reference: [6] <author> M. H. Brown and R. A. Schillner. DeckScape: </author> <title> An experimental web browser. </title> <type> Technical Report 135a, </type> <institution> Digital Equipment Corporation Systems Research Center, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Unfortunately, all use proprietary technology, and it is difficult to tell from the literature what semantics are implemented. The proliferation of proprietary "standards" provides all the more support to the argument that a common toolkit would be useful to application builders. The DeckScape WWW browser <ref> [6] </ref> is a "click-ahead" browser that was developed simultaneously with the Rover web browser proxy. However, their approach was to implement a browser from scratch; as such, their approach is not compatible with existing browsers.
Reference: [7] <author> A. F. deLespinasse. </author> <title> Rover mosaic: E-mail communication for a full-function web browser. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: The proxy on the mobile host cooperates with a mobile-aware server on a well-connected, stationary host. We have shown elsewhere that Rover can be used for either approach <ref> [21, 7] </ref>. The Rover Web 16 browser proxy is an example of the mobile-transparent approach. The Rover exmh mail reader and the Rover Webcal calendar tool are examples of the mobile-aware approach. <p> This same application uses notifications about network connectivity to attempt to schedule communication with the server. The application only enqueues server polling operations while the network is connected. Thus, information about the network state enables the application to reduce future network usage. Similarly, the Rover Web browser proxy <ref> [21, 7] </ref> can use information about the available network bandwidth to decide whether to "inline" images in Web pages. Using knowledge about the state of the host allows Rover applications to be dynamically extended. Rover starts as a minimalistic "kernel" that imports functionality on demand. <p> The use of relocatable dynamic objects for dealing with the constraints of mobile computing|intermittent communication, varying bandwidth, and resource poor clients|is also unique to the Rover architecture. deLespinasse studied the mobile-transparent Rover Web proxy <ref> [7] </ref>. Recent work has leveraged QRPC logs and RDOs to create fault-tolerant applications. [22] The Coda project pioneered the provision of distributed services for mobile clients. In particular, it investigated how to make file systems run well on mobile computers by using optimistic concurrency control and prefetching [26, 42].
Reference: [8] <author> A. Demers, K. Petersen, M. Spreitzer, D. Terry, M. Theimer, and B. Welch. </author> <title> The Bayou architecture: Support for data sharing among mobile users. </title> <booktitle> In Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 2-7, </pages> <address> Santa Cruz, CA, </address> <year> 1994. </year>
Reference-contexts: Conflicts are detected and reported to the user. Little Work is also able to use low bandwidth networks [18]. These projects, as weel as Coda, are focused on hiding mobility from the application. The Bayou project <ref> [8, 45] </ref> defines an architecture for sharing data among mobile users. Bayou addresses the issues of tentative data values [47] and session guarantees for weakly-consistent replicated data [44]. To illustrate these concepts, the authors have built a calendar tool and a bibliographic database.
Reference: [9] <author> F. Douglis and J. Ousterhout. </author> <title> Process migration in the Sprite operating system. </title> <booktitle> In Proc. of the 7th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 18-25, </pages> <address> Berlin, West Germany, </address> <month> September </month> <year> 1987. </year> <note> IEEE. </note>
Reference-contexts: A follow-up project, Wit, addresses some of these shortcomings and shares many of the goals of Rover, but employs different solutions [51]. RDOs can be viewed as simple Agents [40] or as a light-weight form of process migration <ref> [9, 38, 43, 48] </ref>. Other forms of code shipping include Display Postscript [1], Safe-Tcl [5], Active Pages [17], Dynamic Documents [23], and LISP Hypermedia [33]. RDOs are probably closest to Telescript [53], Ousterhout's Tcl agents [35], and Java [13].
Reference: [10] <author> A. Downing, D. Daniels, G. Hallmark, K. Jacobs, and S. Jain. </author> <title> Oracle 7, symmetric replication: Asynchronous distributed technology, </title> <month> September </month> <year> 1993. </year>
Reference-contexts: During disconnected operation, the network simply appears to be very slow. Unlike simple message passing, QRPC incorporates stub generation, marshaling and unmarshal-ing of arguments, and at-most-once delivery semantics. QRPC differs from traditional asynchronous RPC in its failure semantics. <ref> [10] </ref> A traditional RPC fails when a network link is unavailable or when a host crashes [4]. QRPCs are stored in a stable log so that if links become unavailable or the sender or receiver crashes, they can be replayed upon recovery. <p> Katz surveys many of the challenges [24]. Baker describes MosquitoNet, which shares similar goals with Rover, but has not been implemented yet [2]. Oracle recently released a 60 product for mobile computers that provides asynchronous communication <ref> [10] </ref>; unfortunately, details and performance analysis are not available. A number of successful commercial applications have been developed for mobile hosts and limited-bandwidth channels. For example, Qualcomm's Eudora is a mail browser that allows efficient remote access over low-bandwidth links.
Reference: [11] <author> Sanjay Ghemawat. Ical, </author> <year> 1993. </year> <note> http://www.pmg.lcs.edu/ sanjay/ical .html. 69 </note>
Reference-contexts: Section 4.3 explains how the design of Webcal addresses these weaknesses. Section 4.4 discusses the implementation of Webcal. 4.1 Ical basics The Ical calendar program, written by Sanjay Ghemawat, provides an X interface for displaying and maintaining appointment calendars <ref> [11] </ref>. Calendars may contain other calendars and include items displayed to the user. An item is either an appointment or a notice. Appointments start and finish at particular times of the day. Notices do not have any starting or ending time. Notices are useful for marking certain days as special.
Reference: [12] <author> D. K. Gifford, R. M. Needham, and M. D. Schroeder. </author> <title> The Cedar file system. </title> <journal> Communications of the ACM, </journal> <volume> 31(3) </volume> <pages> 288-298, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: This application is a centralized, client-server system with one server at DEC SRC that automatically dispatches tasks and collects results. The research described in this thesis borrows from early work on replication for non-mobile distributed systems. In particular, we borrow from Locus [50] (type-specific conflict resolving) and Cedar <ref> [12] </ref> (check-in, check-out model of data sharing). 61 62 Chapter 7 Conclusion Mobile-aware applications are best suited to face the unique set of challenges faced by mobile computers. Mobile-aware applications can excel even in the absence of high speed network connections.
Reference: [13] <author> J. Gosling and H. McGilton. </author> <title> The Java language environment: </title> <note> A white paper, 1995. http://- java.sun.com/whitePaper/javawhitepaper 1.html. </note>
Reference-contexts: Other forms of code shipping include Display Postscript [1], Safe-Tcl [5], Active Pages [17], Dynamic Documents [23], and LISP Hypermedia [33]. RDOs are probably closest to Telescript [53], Ousterhout's Tcl agents [35], and Java <ref> [13] </ref>. Most differences between RDOs and these other forms of code shipping are immaterial because the particular form of code shipping is orthogonal to the Rover architecture.
Reference: [14] <author> J. Gray, P. Helland, P. O'Neil, and D. Shasha. </author> <title> The dangers of replication and a solution. </title> <booktitle> In To appear in Proc. of the 1996 SIGMOD Conference, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: However, nothing prevents applications from always accepting client updates. Application designers create operations to support whichever consistency paradigm they select. Only a limited number of schemes seem particularly appropriate to mobile computing. (See <ref> [14] </ref> for a full analysis of the alternatives.) The simplest scheme is simply no consistency control, or hand-edited control. This trivial approach is appropriate for some applications. Applications can take advantage of other aspects of the Rover Toolkit without imposing a consistency control scheme. <p> Optimistic, or lazy, concurrency control schemes allow updates by any host on any local data. Any conflicts caused by this policy are settled later by reconciliation. This property makes optimistic concurrency control attractive for mobile computing. However, <ref> [14] </ref> predicts that the number of conflicts (and therefore, the number of reconciliations) in an optimistic concurrency control scheme grows quadratically with the rate of transactions and the number of hosts in the system. <p> In concurrent work, Gray et. al. performs a thorough analysis of the options for database replication in a mobile environment and concludes that primary copy replication with tentative updates is the most appropriate approach for mobile environments <ref> [14] </ref>. One alternative to the Rover object model is the Thor object model [31]. In Thor, objects are updated within transactions that execute entirely within a client cache. However, Thor does not support disconnected operation: clients have to be connected to the server before they can commit.
Reference: [15] <author> R. Gruber, M. F. Kaashoek, B. Liskov, and L. Shira. </author> <title> Disconnected operation in the Thor object-oriented database system. </title> <booktitle> In Proceeding of the Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 51-56, </pages> <address> Santa Cruz, CA, </address> <year> 1994. </year>
Reference-contexts: In Thor, objects are updated within transactions that execute entirely within a client cache. However, Thor does not support disconnected operation: clients have to be connected to the server before they can commit. An extension for disconnected operation in Thor has been proposed by Gruber and others <ref> [15] </ref>, but it has not yet been implemented. Furthermore, it does not provide a mechanism for non-blocking communication, and their proposed object model does not support method execution at the servers. The BNU project implements an RPC-driven application framework on mobile computers.
Reference: [16] <editor> P. Honeyman, L. Huston, J. Rees, et al. </editor> <title> The LITTLE WORK project. </title> <booktitle> In Proc. of the 3rd Workshop on Workstations Operating Systems. IEEE, </booktitle> <month> April </month> <year> 1992. </year>
Reference-contexts: To avoid blocking during disconnection, there is an increased emphasis on optimistic schemes. 1.2 The Argument for Mobile-Aware Computing Fundamentally, there are two approaches to building mobile-computing applications: mobile-aware and mobile-transparent. Previous mobile-computing systems, such as Coda [26] and Little Work <ref> [16] </ref>, have promoted the mobile-transparent approach. The objective of the mobile-transparent approach is to hide entirely the mobile characteristics of the environment so that applications may be used without alteration. This is accomplished by creating a mobile-aware proxy for some service (in the above cases, the file system). <p> Another advantage of application-level control over generic data-level replication is that methods can use application-specific knowledge to make efficient use of resources. This is clearly the case in deciding the proper size of objects for replication. For example, file-based mobile computing systems such as Coda [26] and Little Work <ref> [16] </ref> replicate the entire file. Any update to the file causes the entire file to be written back to the primary file server. However, when working across a slow or intermittent link, a small update size is key to efficient network usage and low latency.
Reference: [17] <author> H. Houh, C. Lindblad, and D. Wetherall. </author> <title> Active pages. </title> <booktitle> In Proc. First International World-Wide Web Conference, </booktitle> <pages> pages 265-270, </pages> <address> Geneva, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: RDOs can be viewed as simple Agents [40] or as a light-weight form of process migration [9, 38, 43, 48]. Other forms of code shipping include Display Postscript [1], Safe-Tcl [5], Active Pages <ref> [17] </ref>, Dynamic Documents [23], and LISP Hypermedia [33]. RDOs are probably closest to Telescript [53], Ousterhout's Tcl agents [35], and Java [13]. Most differences between RDOs and these other forms of code shipping are immaterial because the particular form of code shipping is orthogonal to the Rover architecture.
Reference: [18] <author> L. Huston and P. Honeyman. </author> <title> Partially connected operation. </title> <booktitle> In Proc. of the Second USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <pages> pages 91-97, </pages> <address> Ann Arbor, MI, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: The Little Work Project caches files to smooth disconnection from an AFS file system [19]. Conflicts are detected and reported to the user. Little Work is also able to use low bandwidth networks <ref> [18] </ref>. These projects, as weel as Coda, are focused on hiding mobility from the application. The Bayou project [8, 45] defines an architecture for sharing data among mobile users. Bayou addresses the issues of tentative data values [47] and session guarantees for weakly-consistent replicated data [44].
Reference: [19] <author> L. B. Huston and P. Honeyman. </author> <title> Disconnected operation for AFS. </title> <booktitle> In Proc. USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <pages> pages 1-10, </pages> <address> Cambridge, MA, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: A newer version of Coda also supports low bandwidth networks, as well as intermittent communication [34]. The Ficus file system also supports disconnected operation, but relies on version vectors to detect conflicts [39]. The Little Work Project caches files to smooth disconnection from an AFS file system <ref> [19] </ref>. Conflicts are detected and reported to the user. Little Work is also able to use low bandwidth networks [18]. These projects, as weel as Coda, are focused on hiding mobility from the application. The Bayou project [8, 45] defines an architecture for sharing data among mobile users.
Reference: [20] <author> V. Jacobson. </author> <title> Compressing TCP/IP Headers for Low-Speed Serial Links. Internet RFC 1144, </title> <month> February </month> <year> 1990. </year>
Reference-contexts: The clients were IBM ThinkPad 701C laptops (25/75MHz i80486DX4) running Linux 1.2.8. All of the machines were otherwise idle during the tests. The network options consisted of switched 10 Mbit/s Ethernet, 2 Mbit/s wireless AT&T WaveLAN, and Serial Line IP with Van Jacobson TCP/IP header compression (CSLIP) <ref> [20] </ref> over 19.2 Kbit/s V.32turbo wired and 9.6 Kbit/s ETC cellular dial-up links 1 .
Reference: [21] <author> A. Joseph, A. F. deLespinasse, J. A. Tauber, D. K. Gifford, and F. Kaashoek. </author> <title> Rover: A toolkit for mobile information access. </title> <booktitle> In Proc. of the Fifteenth Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain Resort, CO, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: The proxy on the mobile host cooperates with a mobile-aware server on a well-connected, stationary host. We have shown elsewhere that Rover can be used for either approach <ref> [21, 7] </ref>. The Rover Web 16 browser proxy is an example of the mobile-transparent approach. The Rover exmh mail reader and the Rover Webcal calendar tool are examples of the mobile-aware approach. <p> First, I describe the key communication and programming abstractions of the Toolkit. Second, I describe the structure of the Toolkit, defining the function of each component. Finally, I describe the functioning of the Toolkit in managing an RDO. For further insight into the Rover Toolkit, see <ref> [21, 22] </ref>. 21 2.1 Rover Abstractions 2.1.1 Relocatable Dynamic Objects (RDOs) Relocatable dynamic objects (or, simply, Rover objects) are objects with well-defined interfaces that can be dynamically relocated from the server to the client, or vice versa. RDOs are named by unique object identifiers and stored on servers. <p> This same application uses notifications about network connectivity to attempt to schedule communication with the server. The application only enqueues server polling operations while the network is connected. Thus, information about the network state enables the application to reduce future network usage. Similarly, the Rover Web browser proxy <ref> [21, 7] </ref> can use information about the available network bandwidth to decide whether to "inline" images in Web pages. Using knowledge about the state of the host allows Rover applications to be dynamically extended. Rover starts as a minimalistic "kernel" that imports functionality on demand. <p> Again, the time for Webcal to verify its data includes 50 round trips to validate the calendar items. In addition, Webcal loads approximately 20 separate RDOs to create its interface. While validations of these RDO are allowed to overlap, a substantial benefit would be gained from group validations. In <ref> [21] </ref>, a previous implementation of Webcal is compared to Ical. That implementation used one RDO for the whole calendar and one RDO for the entire application. We can use this as an approximation of the performance of Webcal over Rover with batched operations. <p> as Ical over NFS using wired CSLIP and 20 times as fast as Ical over X using cellular CSLIP. 57 and read one week's appointments from the medium calendar. 58 Chapter 6 Related Work Earlier work on Rover introduced the Rover architecture, including both queued RPC and relocatable dynamic objects <ref> [21] </ref> . Queued RPC is unique in that it provides support for asynchronous fetching of information, as well as for lazily queuing updates.
Reference: [22] <author> A. Joseph and F. Kaashoek. </author> <title> Building fault-tolerant mobile-aware applications using the rover toolkit. </title> <note> Submitted for Publication, </note> <month> May </month> <year> 1996. </year>
Reference-contexts: First, I describe the key communication and programming abstractions of the Toolkit. Second, I describe the structure of the Toolkit, defining the function of each component. Finally, I describe the functioning of the Toolkit in managing an RDO. For further insight into the Rover Toolkit, see <ref> [21, 22] </ref>. 21 2.1 Rover Abstractions 2.1.1 Relocatable Dynamic Objects (RDOs) Relocatable dynamic objects (or, simply, Rover objects) are objects with well-defined interfaces that can be dynamically relocated from the server to the client, or vice versa. RDOs are named by unique object identifiers and stored on servers. <p> The use of relocatable dynamic objects for dealing with the constraints of mobile computing|intermittent communication, varying bandwidth, and resource poor clients|is also unique to the Rover architecture. deLespinasse studied the mobile-transparent Rover Web proxy [7]. Recent work has leveraged QRPC logs and RDOs to create fault-tolerant applications. <ref> [22] </ref> The Coda project pioneered the provision of distributed services for mobile clients. In particular, it investigated how to make file systems run well on mobile computers by using optimistic concurrency control and prefetching [26, 42].
Reference: [23] <author> F. Kaashoek, T. Pinckney, and J. A. Tauber. </author> <title> Dynamic documents: </title> <booktitle> Mobile wireless access to the WWW. In Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 179-184, </pages> <address> Santa Cruz, CA, </address> <year> 1994. </year>
Reference-contexts: This feature is particularly important for mobile hosts with limited resources. Small memory or small screen versions of applications may be loaded by default. However, if the application finds more hardware and network resources available|say if the mobile host is docked|further RDOs may be loaded to handle these cases <ref> [23] </ref>. 3.4 Replication Data and code replication is the chief technique Rover employs to enable client applications to achieve high availability, concurrency, and reliability. Since each host has a copy of all relevant code and data, applications can continue to operate in the absence of network connections. <p> RDOs can be viewed as simple Agents [40] or as a light-weight form of process migration [9, 38, 43, 48]. Other forms of code shipping include Display Postscript [1], Safe-Tcl [5], Active Pages [17], Dynamic Documents <ref> [23] </ref>, and LISP Hypermedia [33]. RDOs are probably closest to Telescript [53], Ousterhout's Tcl agents [35], and Java [13]. Most differences between RDOs and these other forms of code shipping are immaterial because the particular form of code shipping is orthogonal to the Rover architecture.
Reference: [24] <author> R. H. Katz. </author> <title> Adaptation and mobility in wireless information systems. </title> <journal> IEEE Personal Communications, </journal> <volume> 1 </volume> <pages> 6-17, </pages> <year> 1994. </year> <month> 70 </month>
Reference-contexts: Depending on the power of the mobile host and the available bandwidth, Rover dynamically adapts and moves functionality between the client and the server. A number of proposals have been made for dealing with the limited communication environments for mobile computers. Katz surveys many of the challenges <ref> [24] </ref>. Baker describes MosquitoNet, which shares similar goals with Rover, but has not been implemented yet [2]. Oracle recently released a 60 product for mobile computers that provides asynchronous communication [10]; unfortunately, details and performance analysis are not available.
Reference: [25] <author> L. Kawell Jr., S. Beckhardt, T. Halvorsen, R. Ozzie, and I. Greif. </author> <title> Replicated document man-agement in a group communication system. </title> <booktitle> Presented at the Second Conference on Computer-Supported Cooperative Work, </booktitle> <address> Portland, OR, </address> <month> September </month> <year> 1988. </year>
Reference-contexts: This trivial approach is appropriate for some applications. Applications can take advantage of other aspects of the Rover Toolkit without imposing a consistency control scheme. One common ad hoc approach taken by Lotus Notes <ref> [25] </ref>, mail systems [37], and the Internet name service [36] among others, is to require all replicas of the data store to converge to the same values. Three techniques can be used to obtain convergence without serializing updates: append, replace-with-value, and commutative updates. <p> A number of successful commercial applications have been developed for mobile hosts and limited-bandwidth channels. For example, Qualcomm's Eudora is a mail browser that allows efficient remote access over low-bandwidth links. Lotus Notes <ref> [25] </ref> is a groupware application that allows users to share data in a weakly-connected environment. Notes supports two forms of update operations discussed in Section 3.5: append and time-stamped.
Reference: [26] <author> J. J. Kistler and M. Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10 </volume> <pages> 3-25, </pages> <year> 1992. </year>
Reference-contexts: To avoid blocking during disconnection, there is an increased emphasis on optimistic schemes. 1.2 The Argument for Mobile-Aware Computing Fundamentally, there are two approaches to building mobile-computing applications: mobile-aware and mobile-transparent. Previous mobile-computing systems, such as Coda <ref> [26] </ref> and Little Work [16], have promoted the mobile-transparent approach. The objective of the mobile-transparent approach is to hide entirely the mobile characteristics of the environment so that applications may be used without alteration. <p> Another advantage of application-level control over generic data-level replication is that methods can use application-specific knowledge to make efficient use of resources. This is clearly the case in deciding the proper size of objects for replication. For example, file-based mobile computing systems such as Coda <ref> [26] </ref> and Little Work [16] replicate the entire file. Any update to the file causes the entire file to be written back to the primary file server. However, when working across a slow or intermittent link, a small update size is key to efficient network usage and low latency. <p> Recent work has leveraged QRPC logs and RDOs to create fault-tolerant applications. [22] The Coda project pioneered the provision of distributed services for mobile clients. In particular, it investigated how to make file systems run well on mobile computers by using optimistic concurrency control and prefetching <ref> [26, 42] </ref>. Coda logs all updates to the file system during disconnection and replays the log on reconnection. Coda provides automatic conflict resolution mechanisms for directories, and uses Unix file naming semantics to invoke application-specific conflict resolution programs at the file system level [27].
Reference: [27] <author> P. Kumar. </author> <title> Mitigating the Effects of Optimistic Replication in a Distributed File System. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: Coda logs all updates to the file system during disconnection and replays the log on reconnection. Coda provides automatic conflict resolution mechanisms for directories, and uses Unix file naming semantics to invoke application-specific conflict resolution programs at the file system level <ref> [27] </ref>. A manual repair tool is provided for conflicts of either type that cannot be resolved automatically. A newer version of Coda also supports low bandwidth networks, as well as intermittent communication [34]. The Ficus file system also supports disconnected operation, but relies on version vectors to detect conflicts [39].
Reference: [28] <editor> J. Landay. </editor> <booktitle> User interface issues in mobile computing. In Proc. of the Fourth Workshop on Workstation Operating Systems (WWOS-IV), </booktitle> <pages> pages 40-47. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1993. </year>
Reference-contexts: The BNU project implements an RPC-driven application framework on mobile computers. It allows for function shipping by downloading Scheme functions for interpretation [52]. Application designers for BNU noted that the workload characterizing mobile platforms is different from workstation environments and will entail distinct approaches to user interfaces <ref> [28] </ref>. The BNU environment includes proxies on stationary hosts for hiding the mobility of the system. No additional support for disconnected operation, such as Rover's queued RPC, is included in BNU.
Reference: [29] <author> M.T. Le, F. Burghardt, S. Seshan, and J. Rabaey. InfoNet: </author> <booktitle> the networking infrastructure of InfoPad. In Compcon '95, </booktitle> <pages> pages 163-168, </pages> <year> 1995. </year>
Reference-contexts: The key difference between Rover and other code shipping systems is that Rover provides RDOs with a well-defined object-based execution environment that provides a uniform naming scheme, an application-specific replication model, and QRPC. The InfoPad project <ref> [29] </ref> and W4 [3] focus on mobile wireless information access. The InfoPad project employs a dumb terminal, and o*oads all functionality from the client to the server. W4 employs a similar approach for accessing the Web from a small PDA. Rover, is designed to be more flexible.
Reference: [30] <author> A. K. Lenstra and M. S. Manasse. </author> <title> Factoring by electronic mail. </title> <booktitle> In Advances in Cryptology | Eurocrypt '89, </booktitle> <pages> pages 355-371, </pages> <address> Berlin, 1989. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: As another example, researchers at DEC SRC used E-mail messages as the transport layer of a project that coordinated more than a thousand independently administered and geographically dispersed nodes to factor integers of more than 100 digits <ref> [30] </ref>. This application is a centralized, client-server system with one server at DEC SRC that automatically dispatches tasks and collects results. The research described in this thesis borrows from early work on replication for non-mobile distributed systems.
Reference: [31] <author> B. Liskov, M. Day, and L. Shrira. </author> <title> Distributed object management in Thor. </title> <editor> In M. Tamer Ozsu, Umesh Dayal, and Patrick Valduriez, editors, </editor> <booktitle> Distributed Object Management. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: One alternative to the Rover object model is the Thor object model <ref> [31] </ref>. In Thor, objects are updated within transactions that execute entirely within a client cache. However, Thor does not support disconnected operation: clients have to be connected to the server before they can commit.
Reference: [32] <author> L.Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 32(7), </volume> <year> 1978. </year>
Reference-contexts: In the first two, each update is time-stamped or version-vectored. Time-stamps require a notion of eternal global time and some level of clock synchronization. Version-vectors increase with each system "event" and may produce a logical notion of "happens before" <ref> [32] </ref>. Some implementations of version-vectors consider each update at the local-host an "event". Thus, logical time increases faster at more actively writing hosts. For append, available updates are stored in time-stamp order.
Reference: [33] <author> J.C. Mallery. </author> <title> A Common LISP hypermedia server. </title> <booktitle> In Proc. First International World-Wide Web Conference, </booktitle> <pages> pages 239-247, </pages> <address> Geneva, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: RDOs can be viewed as simple Agents [40] or as a light-weight form of process migration [9, 38, 43, 48]. Other forms of code shipping include Display Postscript [1], Safe-Tcl [5], Active Pages [17], Dynamic Documents [23], and LISP Hypermedia <ref> [33] </ref>. RDOs are probably closest to Telescript [53], Ousterhout's Tcl agents [35], and Java [13]. Most differences between RDOs and these other forms of code shipping are immaterial because the particular form of code shipping is orthogonal to the Rover architecture.
Reference: [34] <author> L. B. Mummert, M. R. Ebling, and M. Satyanarayanan. </author> <title> Exploiting weak connectivity for mobile file access. </title> <booktitle> In Proc. of the Fifteenth Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain Resort, CO, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: A manual repair tool is provided for conflicts of either type that cannot be resolved automatically. A newer version of Coda also supports low bandwidth networks, as well as intermittent communication <ref> [34] </ref>. The Ficus file system also supports disconnected operation, but relies on version vectors to detect conflicts [39]. The Little Work Project caches files to smooth disconnection from an AFS file system [19]. Conflicts are detected and reported to the user.
Reference: [35] <institution> J.K. Ousterhout. The Tcl/Tk project at Sun Labs, </institution> <year> 1995. </year> <note> http://www.sunlabs.com/research/tcl. </note>
Reference-contexts: Other forms of code shipping include Display Postscript [1], Safe-Tcl [5], Active Pages [17], Dynamic Documents [23], and LISP Hypermedia [33]. RDOs are probably closest to Telescript [53], Ousterhout's Tcl agents <ref> [35] </ref>, and Java [13]. Most differences between RDOs and these other forms of code shipping are immaterial because the particular form of code shipping is orthogonal to the Rover architecture.
Reference: [36] <author> J. Postel. </author> <title> Internet Name Server. </title> <address> IEN-116, </address> <month> August </month> <year> 1979. </year>
Reference-contexts: This trivial approach is appropriate for some applications. Applications can take advantage of other aspects of the Rover Toolkit without imposing a consistency control scheme. One common ad hoc approach taken by Lotus Notes [25], mail systems [37], and the Internet name service <ref> [36] </ref> among others, is to require all replicas of the data store to converge to the same values. Three techniques can be used to obtain convergence without serializing updates: append, replace-with-value, and commutative updates. In the first two, each update is time-stamped or version-vectored.
Reference: [37] <author> J. B. Postel. </author> <title> Simple Mail Transfer Protocol. Internet RFC 821, </title> <month> August </month> <year> 1982. </year>
Reference-contexts: This trivial approach is appropriate for some applications. Applications can take advantage of other aspects of the Rover Toolkit without imposing a consistency control scheme. One common ad hoc approach taken by Lotus Notes [25], mail systems <ref> [37] </ref>, and the Internet name service [36] among others, is to require all replicas of the data store to converge to the same values. Three techniques can be used to obtain convergence without serializing updates: append, replace-with-value, and commutative updates. In the first two, each update is time-stamped or version-vectored.
Reference: [38] <author> M. L. Powell and B. P. Miller. </author> <title> Process migration in DEMOS/MP. </title> <booktitle> In Proc. of the Ninth Symposium on Operating Systems Principles (SOSP), </booktitle> <pages> pages 110-119, </pages> <month> October </month> <year> 1983. </year>
Reference-contexts: A follow-up project, Wit, addresses some of these shortcomings and shares many of the goals of Rover, but employs different solutions [51]. RDOs can be viewed as simple Agents [40] or as a light-weight form of process migration <ref> [9, 38, 43, 48] </ref>. Other forms of code shipping include Display Postscript [1], Safe-Tcl [5], Active Pages [17], Dynamic Documents [23], and LISP Hypermedia [33]. RDOs are probably closest to Telescript [53], Ousterhout's Tcl agents [35], and Java [13].
Reference: [39] <author> P. Reiher, J. Heidemann, D. Ratner, G. Skinner, and G. J. Popek. </author> <title> Resolving file conflicts in the Ficus file system. </title> <booktitle> In USENIX Summer 1994 Technical Conference, </booktitle> <pages> pages 183-195, </pages> <address> Boston, MA, </address> <year> 1994. </year>
Reference-contexts: A manual repair tool is provided for conflicts of either type that cannot be resolved automatically. A newer version of Coda also supports low bandwidth networks, as well as intermittent communication [34]. The Ficus file system also supports disconnected operation, but relies on version vectors to detect conflicts <ref> [39] </ref>. The Little Work Project caches files to smooth disconnection from an AFS file system [19]. Conflicts are detected and reported to the user. Little Work is also able to use low bandwidth networks [18]. These projects, as weel as Coda, are focused on hiding mobility from the application.
Reference: [40] <editor> D. Riecken, editor. </editor> <booktitle> Intelligent Agents, volume 37. Communications of the ACM, </booktitle> <month> July </month> <year> 1994. </year>
Reference-contexts: No additional support for disconnected operation, such as Rover's queued RPC, is included in BNU. A follow-up project, Wit, addresses some of these shortcomings and shares many of the goals of Rover, but employs different solutions [51]. RDOs can be viewed as simple Agents <ref> [40] </ref> or as a light-weight form of process migration [9, 38, 43, 48]. Other forms of code shipping include Display Postscript [1], Safe-Tcl [5], Active Pages [17], Dynamic Documents [23], and LISP Hypermedia [33]. RDOs are probably closest to Telescript [53], Ousterhout's Tcl agents [35], and Java [13].
Reference: [41] <author> J. H. Saltzer, D. P. Reed, and D. D. Clark. </author> <title> End-to-end arguments in system design. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(4) </volume> <pages> 277-28, </pages> <month> November </month> <year> 1984. </year>
Reference-contexts: Therefore, providing that questioned function as a feature of the communication system itself is not possible <ref> [41] </ref>. The functionality needed to create correct, well-performing applications in an intermittently-connected environment requires the cooperation of the application. For example, it is not possible to maintain an entirely consistent, well-performing, mobile file system without cooperation from the applications mutating the file system.
Reference: [42] <author> M. Satyanarayanan, J. J. Kistler, L. B. M., M. R. Ebling, P. Kumar, and Q. Lu. </author> <title> Experience with disconnected operation in a mobile environment. </title> <booktitle> In Proc. USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <pages> pages 11-28, </pages> <address> Cambridge, MA, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Recent work has leveraged QRPC logs and RDOs to create fault-tolerant applications. [22] The Coda project pioneered the provision of distributed services for mobile clients. In particular, it investigated how to make file systems run well on mobile computers by using optimistic concurrency control and prefetching <ref> [26, 42] </ref>. Coda logs all updates to the file system during disconnection and replays the log on reconnection. Coda provides automatic conflict resolution mechanisms for directories, and uses Unix file naming semantics to invoke application-specific conflict resolution programs at the file system level [27].
Reference: [43] <author> J. M. Smith. </author> <title> A survey of process migration mechanisms. </title> <journal> Operating Systems Review, </journal> <volume> 22(3) </volume> <pages> 28-40, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: A follow-up project, Wit, addresses some of these shortcomings and shares many of the goals of Rover, but employs different solutions [51]. RDOs can be viewed as simple Agents [40] or as a light-weight form of process migration <ref> [9, 38, 43, 48] </ref>. Other forms of code shipping include Display Postscript [1], Safe-Tcl [5], Active Pages [17], Dynamic Documents [23], and LISP Hypermedia [33]. RDOs are probably closest to Telescript [53], Ousterhout's Tcl agents [35], and Java [13].
Reference: [44] <author> D. B. Terry, A. J. Demers, K. Petersen, M. J. Spreitzer, M. M. Theimer, and B. B. Welch. </author> <title> Session guarantees for weakly consistent replicated data. </title> <booktitle> In Proc. of the 1994 Symposium on Parallel and Distributed Information Systems, </booktitle> <pages> pages 140-149, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: These projects, as weel as Coda, are focused on hiding mobility from the application. The Bayou project [8, 45] defines an architecture for sharing data among mobile users. Bayou addresses the issues of tentative data values [47] and session guarantees for weakly-consistent replicated data <ref> [44] </ref>. To illustrate these concepts, the authors have built a calendar tool and a bibliographic database. Rover borrows the notions of tentative data, log replay, session guarantees, and the cal 59 endar tool example from the Bayou project.
Reference: [45] <author> D. B. Terry, M. M. Theimer, K. Petersen, A. J. Demers, M. J. Spreitzer, and C. H. Hauser. </author> <title> Managing update conflicts in a weakly connected replicated storage system. </title> <booktitle> In Proc. of the Fifteenth Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain Resort, CO, </address> <year> 1995. </year>
Reference-contexts: Conflicts are detected and reported to the user. Little Work is also able to use low bandwidth networks [18]. These projects, as weel as Coda, are focused on hiding mobility from the application. The Bayou project <ref> [8, 45] </ref> defines an architecture for sharing data among mobile users. Bayou addresses the issues of tentative data values [47] and session guarantees for weakly-consistent replicated data [44]. To illustrate these concepts, the authors have built a calendar tool and a bibliographic database.
Reference: [46] <author> D. B. Terry et. al.. </author> <title> Managing update conflicts in a weakly connected replicated storage system. </title> <booktitle> In Proc. of the Fifteenth Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain Resort, CO, </address> <year> 1995. </year>
Reference: [47] <author> M. Theimer, A. Demers, K. Petersen, M. Spreitzer, D. Terry, and B. Welch. </author> <title> Dealing with tentative data values in disconnected work groups. </title> <booktitle> In Proc. of the Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 192-195, </pages> <address> Santa Cruz, CA, </address> <year> 1994. </year>
Reference-contexts: Little Work is also able to use low bandwidth networks [18]. These projects, as weel as Coda, are focused on hiding mobility from the application. The Bayou project [8, 45] defines an architecture for sharing data among mobile users. Bayou addresses the issues of tentative data values <ref> [47] </ref> and session guarantees for weakly-consistent replicated data [44]. To illustrate these concepts, the authors have built a calendar tool and a bibliographic database. Rover borrows the notions of tentative data, log replay, session guarantees, and the cal 59 endar tool example from the Bayou project.
Reference: [48] <author> M. Theimer, K. Lantz, and D. Cheriton. </author> <title> Preemptable remote execution facilities for the V-System. </title> <booktitle> In Proc. of the Tenth Symposium on Operating Systems Principles (SOSP), </booktitle> <pages> pages 2-12, </pages> <address> Orcas Island, WA, </address> <month> December </month> <year> 1985. </year>
Reference-contexts: A follow-up project, Wit, addresses some of these shortcomings and shares many of the goals of Rover, but employs different solutions [51]. RDOs can be viewed as simple Agents [40] or as a light-weight form of process migration <ref> [9, 38, 43, 48] </ref>. Other forms of code shipping include Display Postscript [1], Safe-Tcl [5], Active Pages [17], Dynamic Documents [23], and LISP Hypermedia [33]. RDOs are probably closest to Telescript [53], Ousterhout's Tcl agents [35], and Java [13].
Reference: [49] <author> J. Vittal. </author> <title> Active message processing: Messages as messengers. </title> <booktitle> In Proc. of IFIP TC-6 International Symposium on Computer Message Systems, </booktitle> <pages> pages 175-195, </pages> <address> Ottawa, Canada, </address> <month> April </month> <year> 1981. </year>
Reference-contexts: However, their approach was to implement a browser from scratch; as such, their approach is not compatible with existing browsers. Several systems use E-mail messages as a transport medium, and obtain similar benefits as we obtain by using QRPC. The Active Message Processing project <ref> [49] </ref> has developed various applications, including a distributed calendar, which use E-mail messages as a transport medium.
Reference: [50] <author> B. Walker, G. Popek, R. English, C. Kline, and G. Thiel. </author> <title> The LOCUS distributed operating system. </title> <booktitle> In Proc. of the Ninth Symposium on Operating Systems Principles (SOSP), </booktitle> <pages> pages 49-70, </pages> <address> Bretton Woods, NH, </address> <year> 1983. </year>
Reference-contexts: This application is a centralized, client-server system with one server at DEC SRC that automatically dispatches tasks and collects results. The research described in this thesis borrows from early work on replication for non-mobile distributed systems. In particular, we borrow from Locus <ref> [50] </ref> (type-specific conflict resolving) and Cedar [12] (check-in, check-out model of data sharing). 61 62 Chapter 7 Conclusion Mobile-aware applications are best suited to face the unique set of challenges faced by mobile computers. Mobile-aware applications can excel even in the absence of high speed network connections.
Reference: [51] <author> T. Watson. </author> <title> Application design for wireless computing. </title> <booktitle> In Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 91-94, </pages> <address> Santa Cruz, CA, </address> <year> 1994. </year> <month> 72 </month>
Reference-contexts: No additional support for disconnected operation, such as Rover's queued RPC, is included in BNU. A follow-up project, Wit, addresses some of these shortcomings and shares many of the goals of Rover, but employs different solutions <ref> [51] </ref>. RDOs can be viewed as simple Agents [40] or as a light-weight form of process migration [9, 38, 43, 48]. Other forms of code shipping include Display Postscript [1], Safe-Tcl [5], Active Pages [17], Dynamic Documents [23], and LISP Hypermedia [33].
Reference: [52] <author> T. Watson and B. Bershad. </author> <title> Local area mobile computing on stock hardware and mostly stock software. </title> <booktitle> In Proc. USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <pages> pages 109-116, </pages> <address> Cambridge, MA, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Furthermore, it does not provide a mechanism for non-blocking communication, and their proposed object model does not support method execution at the servers. The BNU project implements an RPC-driven application framework on mobile computers. It allows for function shipping by downloading Scheme functions for interpretation <ref> [52] </ref>. Application designers for BNU noted that the workload characterizing mobile platforms is different from workstation environments and will entail distinct approaches to user interfaces [28]. The BNU environment includes proxies on stationary hosts for hiding the mobility of the system.
Reference: [53] <author> J. E. White. </author> <title> Telescript technology: The foundation for the electronic marketplace, </title> <booktitle> 1994. </booktitle> <pages> 73 </pages>
Reference-contexts: RDOs can be viewed as simple Agents [40] or as a light-weight form of process migration [9, 38, 43, 48]. Other forms of code shipping include Display Postscript [1], Safe-Tcl [5], Active Pages [17], Dynamic Documents [23], and LISP Hypermedia [33]. RDOs are probably closest to Telescript <ref> [53] </ref>, Ousterhout's Tcl agents [35], and Java [13]. Most differences between RDOs and these other forms of code shipping are immaterial because the particular form of code shipping is orthogonal to the Rover architecture.
References-found: 53

