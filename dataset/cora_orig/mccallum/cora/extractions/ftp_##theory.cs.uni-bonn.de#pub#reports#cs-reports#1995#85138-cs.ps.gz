URL: ftp://theory.cs.uni-bonn.de/pub/reports/cs-reports/1995/85138-cs.ps.gz
Refering-URL: http://cs.uni-bonn.de/info5/publications/CS-1995-en.html
Root-URL: http://cs.uni-bonn.de
Email: Email:marek@cs.uni-bonn.de  Email:larmore@cs.unlv.edu  Email:rytter@mimuw.edu.pl  
Phone: 56/142-1.  
Title: Parallel Subquadratic Work Algorithms for Constructing Approximately Optimal Binary Search Trees given. New parallel and
Author: Marek Karpinski Lawrence L. Larmore Wojciech Rytter 
Address: Bonn, 53117 Bonn.  Nevada, Las Vegas, NV 89154-4019, USA.  02-097 Warszawa.  
Affiliation: Dept. of Computer Science, University of  Department of Computer Science, University of  Institute of Informatics, Warsaw University,  
Note: A new version of the sequential subquadratic time algorithms for the same problems is also  This research was partially supported by DFG Grant KA 673/4-1, and by ESPRIT BR Grant 7097 and ECUS 030.  Partially supported by National Science Foundation grants CCR-9112067 and CCR-9503441.  Partially supported by DFG Grant Bo  
Abstract: A sublinear time sub-quadratic work parallel algorithm for construction of an optimal binary search tree, in a special case of practical interest, namely where the frequencies of items to be stored are not too small, is given. A sublinear time sub-quadratic work parallel algorithm for construction of an approximately optimal binary search tree in the general case is also given. Sub-quadratic work and sublinear time are achieved using a fast parallel algorithm for the column minima problem for Monge matrices developed by Atallah and Kosaraju. The algorithms given in this paper take O(n 0:6 ) time with n processors in the CREW PRAM model. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aggarwal, M. Klawe, S. Moran, P. Shor, and R. Wilber, </author> <title> Geometric applications of a matrix-searching algorithm, </title> <booktitle> Algorithmica 2 (1987), </booktitle> <pages> pp. 195-208. </pages>
Reference-contexts: The following result is by Aggarwal, Klawe, Morey, Shor, and Wilber <ref> [1] </ref>. The algorithm developed in that paper is whimsically known as the "SMAWK" algorithm, using a permutation of the authors' initials. Lemma 1.4 If M is an n fi m Monge matrix, all column minima of M can be found in O (n + m) sequential time.
Reference: [2] <author> B. Allen, </author> <title> Optimal and near-optimal binary search trees, </title> <journal> Acta Inform. </journal> <volume> 18 (1982), </volume> <pages> pp. 255-263. </pages>
Reference-contexts: The problem of developing a sub-quadratic time sequential algorithm for the general OBST problem appears to be very hard. Algorithm for finding approximately optimal binary search trees have been found by Allen, Mehlhorn and Unterauer <ref> [2, 13, 14] </ref>. The results of this paper are largely based on the algorithm for approximately optimal binary search trees given by Larmore [10]. In this paper we consider the problem in a parallel setting, using the CREW PRAM model of computation.
Reference: [3] <author> M. J. Atallah, S. R. Kosaraju, </author> <title> Parallel computation of row minima for monotone matrices, </title> <booktitle> Journal of Algorithms 13 (1992), </booktitle> <pages> pp. 394-413. </pages>
Reference-contexts: Lemma 1.4 If M is an n fi m Monge matrix, all column minima of M can be found in O (n + m) sequential time. In the parallel case, we have the following result by <ref> [3] </ref>. <p> of the tree T d are listed in in-order v 1 ; : : : ; v m . for k = 1 to m do for each i = 1 : : : n do in parallel compute partial cost (v k ; i) using the parallel algorithm of <ref> [3] </ref> for the corresponding column minima problem.
Reference: [4] <author> M. J. Atallah, S. R. Kosaraju, L. L. Larmore, G. L. Miller, and S-H. Teng, </author> <title> Constructing trees in parallel, </title> <booktitle> Proc. 1 st ACM Symposium on Parallel Algorithms and Architectures (1989), </booktitle> <pages> pp. 499-533. 10 </pages>
Reference-contexts: 1 Introduction The problem of computing optimal binary search trees (the OBST problem) is especially interesting in a parallel setting, since there is no known N C algorithm which solves that problem efficiently, and the problem of finding such a parallel algorithm appears to be very hard <ref> [4] </ref>. There is an N C algorithm for the special case of alphabetic trees using n 2 processors [12]. The best known N C algorithms require O (n 6 ) work for optimal binary search trees and O (n 2 ) work for approximately optimal binary search trees [4, 15]. <p> There is an N C algorithm for the special case of alphabetic trees using n 2 processors [12]. The best known N C algorithms require O (n 6 ) work for optimal binary search trees and O (n 2 ) work for approximately optimal binary search trees <ref> [4, 15] </ref>. Sublinear time parallel algorithms sometimes have much lower total work than N C algorithms. In [7] a sublinear time algorithm for the OBST problem whose work is very close to quadratic is given.
Reference: [5] <author> R. Guttler, K. Mehlhorn, and W. Schneider, </author> <title> Binary search trees: average and worst case behavior, </title> <booktitle> Elektr. Informationsverarb Kybernetik 16 (1980), </booktitle> <pages> pp. 579-591. </pages>
Reference-contexts: This proves the following claim: Claim 1. Assume the costs of all optimal subtrees rooted below level d are computed. Then an optimal binary search tree can be constructed in O (2 d log n) time with n processors. We next use a combinatorial fact shown in <ref> [5] </ref> and [6] and expressed by the following claim: 7 Claim 2. Let OE be the golden ratio (OE = p 2 1:62) and let T 2 OP T (q 0 ; p 1 ; q 1 ; : : : ; p n ; q n ).
Reference: [6] <author> D. S. Hirschberg, L. L. Larmore, and M. Molodowitch, </author> <title> Subtree weight ratios for optimal binary search trees, </title> <type> TR 86-02, </type> <institution> ICS Department, University of California, </institution> <address> Irvine (1986). </address>
Reference-contexts: This proves the following claim: Claim 1. Assume the costs of all optimal subtrees rooted below level d are computed. Then an optimal binary search tree can be constructed in O (2 d log n) time with n processors. We next use a combinatorial fact shown in [5] and <ref> [6] </ref> and expressed by the following claim: 7 Claim 2. Let OE be the golden ratio (OE = p 2 1:62) and let T 2 OP T (q 0 ; p 1 ; q 1 ; : : : ; p n ; q n ). <p> Proof. (of Claim 2). Let F 1 = 1, F 2 = 1, F 3 = 2, etc., be the Fibonacci numbers. By <ref> [6] </ref>, a subtree whose root is at level h can have weight at most 2=F h+2 . Since F n &gt; 2OE n4 (see [8] exercise 4, pg 18) we are done. The structure of the computation is shown in Figure 4.
Reference: [7] <author> M. Karpinski and W. Rytter, </author> <title> On a sublinear time parallel construction of optimal binary search trees, </title> <booktitle> Proceedings of the 19 t h International Symposium on Mathematical Foundations of Computer Science, </booktitle> <publisher> LNCS 841 (ed. </publisher> <editor> I. Privara, B. Rovan, P. </editor> <month> Ruzicka) </month> <year> (1994), </year> <pages> pp. 453-461. </pages>
Reference-contexts: The best known N C algorithms require O (n 6 ) work for optimal binary search trees and O (n 2 ) work for approximately optimal binary search trees [4, 15]. Sublinear time parallel algorithms sometimes have much lower total work than N C algorithms. In <ref> [7] </ref> a sublinear time algorithm for the OBST problem whose work is very close to quadratic is given. The fastest known sequential algorithm for the OBST problem is the classical algorithm by Knuth [9], which takes quadratic time. <p> Knuth's algorithm can be easily parallelized by computing all entries on a given diagonal of the array in parallel. The following lemma was essentially shown in <ref> [7] </ref>. It says that costs of all optimal subtrees of width at most ` can be efficiently computed in parallel. Lemma 1.2 (Parallelization of Knuth's algorithm) All values cost (i; j) for jj ij ` can be computed in O (` log (`)) time with O (n= log (`)) processors.
Reference: [8] <author> D. E. Knuth, </author> <booktitle> The Art of Computer Programming, </booktitle> <publisher> Addison-Wesley (1973). </publisher>
Reference-contexts: Furthermore, there exists an O (n 0:6 )-time parallel algorithm using n processors which computes an *-approximately optimal binary search tree for a general sequence, where * = o (1). We use terminology from <ref> [8] </ref>, pages 434-435. Let K 1 ; : : : K n be a sequence of n weighted items (keys), which are to be placed in a binary search tree. <p> Proof. (of Claim 2). Let F 1 = 1, F 2 = 1, F 3 = 2, etc., be the Fibonacci numbers. By [6], a subtree whose root is at level h can have weight at most 2=F h+2 . Since F n &gt; 2OE n4 (see <ref> [8] </ref> exercise 4, pg 18) we are done. The structure of the computation is shown in Figure 4. First the optimal costs of subtrees of width ` are computed. Then (in Basic-Phase) the partial costs are computed in O (2 d log n) time with n processors (see Claim 1).
Reference: [9] <author> D. E. Knuth, </author> <title> Optimum binary search trees, </title> <journal> Acta Informatica 1 (1971), </journal> <pages> pp. 14-25. </pages>
Reference-contexts: Sublinear time parallel algorithms sometimes have much lower total work than N C algorithms. In [7] a sublinear time algorithm for the OBST problem whose work is very close to quadratic is given. The fastest known sequential algorithm for the OBST problem is the classical algorithm by Knuth <ref> [9] </ref>, which takes quadratic time. The main theorem of [9] uses, without stating it those terms, the Monge property of the matrix of subtree costs. <p> In [7] a sublinear time algorithm for the OBST problem whose work is very close to quadratic is given. The fastest known sequential algorithm for the OBST problem is the classical algorithm by Knuth <ref> [9] </ref>, which takes quadratic time. The main theorem of [9] uses, without stating it those terms, the Monge property of the matrix of subtree costs. <p> Let cost (i; i) = weight (i; i) = q i . The values of cost (i; j) are tabulated in an array. The time to compute all values of cost is O (n 2 ), using Knuth's Theorem <ref> [9] </ref>, essentially making use of the Monge property of cost, considered as a matrix. Knuth's algorithm can be easily parallelized by computing all entries on a given diagonal of the array in parallel. The following lemma was essentially shown in [7].
Reference: [10] <author> L. L. Larmore, </author> <title> A sub-quadratic algorithm for constructing approximately optimal binary search trees, </title> <booktitle> Journal of Algorithms 8 (1987), </booktitle> <pages> pp. 579-591. </pages>
Reference-contexts: Algorithm for finding approximately optimal binary search trees have been found by Allen, Mehlhorn and Unterauer [2, 13, 14]. The results of this paper are largely based on the algorithm for approximately optimal binary search trees given by Larmore <ref> [10] </ref>. In this paper we consider the problem in a parallel setting, using the CREW PRAM model of computation. We present sublinear time subquadratic work parallel algorithms for certain special instances of the OBST problem, We shall define an instance to be "special" if the item weights are sufficiently large. <p> The matrix M v satisfies the Monge condition. 2. For a given v, the values ColMin (M v ; i), for all 1 i n, can be computed in O (log 2 n) time with n= log n processors. Proof. (1) By Lemma 2.1 of <ref> [10] </ref>, the matrix fcost (i 1; j)g has the Monge property. It is simple to verify that fweight (i 1; j)g is also Monge. The other two terms are trivially Monge since they depend on only one component.
Reference: [11] <author> L. L. Larmore and W. Rytter, </author> <title> Efficient sublinear time parallel algorithms for dynamic programming problems and context-free recognition. </title> <booktitle> STACS'92, 9 th Symposium on Theoretical Aspects of Computer Science, Lect. Notes in Comp. Science, </booktitle> <editor> Edited by A. Finkel and M. Jantzen, </editor> <publisher> Springer Verlag (1992), </publisher> <pages> pp. 121-132. </pages>
Reference: [12] <author> L. L. Larmore, T. M. Przytycka, and W. Rytter, </author> <title> Parallel construction of optimal alphabetic trees, </title> <booktitle> Proceedings of the 5 th ACM Symposium on Parallel Algorithms and Architectures (1993), </booktitle> <pages> pp. 214-223. </pages>
Reference-contexts: There is an N C algorithm for the special case of alphabetic trees using n 2 processors <ref> [12] </ref>. The best known N C algorithms require O (n 6 ) work for optimal binary search trees and O (n 2 ) work for approximately optimal binary search trees [4, 15]. Sublinear time parallel algorithms sometimes have much lower total work than N C algorithms.
Reference: [13] <author> K. Mehlhorn, </author> <title> Nearly optimal binary search trees, </title> <journal> Acta Informatica 5 (1975), </journal> <pages> pp. 287-295. </pages>
Reference-contexts: The problem of developing a sub-quadratic time sequential algorithm for the general OBST problem appears to be very hard. Algorithm for finding approximately optimal binary search trees have been found by Allen, Mehlhorn and Unterauer <ref> [2, 13, 14] </ref>. The results of this paper are largely based on the algorithm for approximately optimal binary search trees given by Larmore [10]. In this paper we consider the problem in a parallel setting, using the CREW PRAM model of computation.
Reference: [14] <author> K. Unterauer, </author> <title> Dynamic weighted binary search trees, </title> <journal> Acta Informatica 11 (1979), </journal> <pages> pp. 341-362. </pages>
Reference-contexts: The problem of developing a sub-quadratic time sequential algorithm for the general OBST problem appears to be very hard. Algorithm for finding approximately optimal binary search trees have been found by Allen, Mehlhorn and Unterauer <ref> [2, 13, 14] </ref>. The results of this paper are largely based on the algorithm for approximately optimal binary search trees given by Larmore [10]. In this paper we consider the problem in a parallel setting, using the CREW PRAM model of computation.
Reference: [15] <author> W. Rytter, </author> <title> Efficient parallel computations for some dynamic programming problems, </title> <journal> Theoretical Comp. Sci. </journal> <volume> 59 (1988), </volume> <pages> pp. 297-307. </pages>
Reference-contexts: There is an N C algorithm for the special case of alphabetic trees using n 2 processors [12]. The best known N C algorithms require O (n 6 ) work for optimal binary search trees and O (n 2 ) work for approximately optimal binary search trees <ref> [4, 15] </ref>. Sublinear time parallel algorithms sometimes have much lower total work than N C algorithms. In [7] a sublinear time algorithm for the OBST problem whose work is very close to quadratic is given.
Reference: [16] <author> F. F. Yao, </author> <title> Efficient dynamic programming using quadrangle inequalities, </title> <booktitle> Proceedings of the 12 th ACM Symposium on Theory of Computing (1980), </booktitle> <pages> pp. 429-435. 11 </pages>
Reference-contexts: This is essentially the same as the quadrangle inequality introduced by Yao <ref> [16] </ref> which allowed speedup of certain dynamic programming algorithms. The problem of developing a sub-quadratic time sequential algorithm for the general OBST problem appears to be very hard. Algorithm for finding approximately optimal binary search trees have been found by Allen, Mehlhorn and Unterauer [2, 13, 14].
References-found: 16

