URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1135/CS-TR-93-1135.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1135/
Root-URL: http://www.cs.wisc.edu
Email: rbi@cs.wisc.edu bart@cs.wisc.edu  
Title: Multi-Application Support in a Parallel Program Performance Tool  
Author: R. Bruce Irvin Barton P. Miller 
Address: 1210 W. Dayton Street Madison, Wisconsin 53706  
Affiliation: Computer Sciences Department University of Wisconsin-Madison  
Abstract: Program performance measurement tools have proven to be useful for tuning single, isolated, parallel and distributed applications. However, large-scale parallel machines and heterogeneous networks often do not allow for such isolated execution, much less isolated measurement. Performance measurement tools should allow users to study workload scheduling policies, resource competition among application programs, client/server interactions in distributed systems, and comparisons of application programs running on multiple hardware platforms. To enable and encourage such studies, we have extended the IPS-2 parallel program measurement tools to support the analysis of multiple applications (and multiple runs of the same application) in a single measurement session. This multi-application support allows the user to study each application as a logically separate entity, study groupings of the applications based on their physical location, or study the entire collection of applications. We used the new multi-application support in three case studies. In these studies we examined (1) the effects of clock precision on the quality of performance data, (2) the effects of gang scheduling on competing parallel applications, and (3) the performance interaction of client processes and server in a database system. The multi-application support allowed quick comparison of different versions of a program, with a concrete visual and numeric comparison. Also, it directly showed performance dependences between parallel applications. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> T. E. Anderson and E. D. Lazowska, "Quartz: </author> <title> A Tool for Tuning Parallel Program Performance", </title> <booktitle> SIGMETRICS 1990, </booktitle> <address> Boston, </address> <month> May </month> <year> 1990, </year> <pages> pp. 115-125. </pages>
Reference-contexts: Metric tables display performance metrics for individual tree nodes, and profile tables display a metric for each node at a given level of the program tree. NPT profiles display a process time metric that is normalized by the number of concurrently executing processes <ref> [1] </ref>. Gprof tables display process and procedure performance data in the style of the Unix utility gprof [7]. IPS-2 allows the user to define time periods, called phases, and any of the metrics and analyses may be constrained to any phase of execution.
Reference: 2. <author> T. </author> <title> Bemmerl, </title> <booktitle> "The TOPSYS Architecture", </booktitle> <month> CONPAR </month> <year> 1990, 1990, </year> <pages> pp. 732-743. </pages>
Reference-contexts: We began our analysis by examining the overall performance of the EXODUS server. The process-level Intra-Application Critical Path profile in Figure 10 shows the cumulative time that each thread contributed to the isolated critical path of the server. The profile indicates that thread sm_server <ref> [2] </ref> was responsible for over 30% of the server's critical path with the remainder divided among the other threads, each accounting for a small percent. After the critical path profile identified sm_server [2] as an important thread, we refined our analysis to the procedure level. <p> The profile indicates that thread sm_server <ref> [2] </ref> was responsible for over 30% of the server's critical path with the remainder divided among the other threads, each accounting for a small percent. After the critical path profile identified sm_server [2] as an important thread, we refined our analysis to the procedure level. IPS-2 gprof profiles organize the procedures of a particular process or thread into a hierarchical dynamic call graph format. We used IPS-2 gprof to analyze sm_server [2] from the main procedure down to the procedures that accounted for <p> After the critical path profile identified sm_server <ref> [2] </ref> as an important thread, we refined our analysis to the procedure level. IPS-2 gprof profiles organize the procedures of a particular process or thread into a hierarchical dynamic call graph format. We used IPS-2 gprof to analyze sm_server [2] from the main procedure down to the procedures that accounted for most of the thread's CPU time. <p> It is interesting to see that message delays from the producer client to the server are responsible for a noticeable portion of the producer's Inter-Application Critical Path, but that message delays back to the producer are not listed. The imbalance appears because a single server thread (sm_server <ref> [2] </ref>) handled all message receives from the producer, while replies to the producer were performed by many threads. <p> The physical view allows the user to study the performance of an entire workload. We feel that this organization is well suited to the types of analysis supported in IPS-2 and other tools that encourage a hierarchical top-down performance analysis methodology <ref> [2, 10] </ref>. Most of the IPS-2 displays and analyses have remained unchanged, but we have made two novel extensions to critical path analysis.
Reference: 3. <author> B. Bershad, E. D. Lazowska and H. Levy, </author> <title> "Presto: A System for Object-Oriented Parallel Programming", </title> <journal> Software: Practice and Experience 18, </journal> <month> 8 (August </month> <year> 1988), </year> <pages> pp. 713-732. </pages>
Reference-contexts: The problems with this type of always-spin barrier are well understood [16], and several solutions have been proposed to fix them. One solution is to use barriers that block after only a small amount of spinning <ref> [3] </ref>, and the other is to co-schedule the processes of each application [11].
Reference: 4. <author> D. Black, </author> <title> "The Mach Timing Facility: An Implementation of Accurate Low-Overhead Usage Timing", </title> <booktitle> USENIX Mach Workshop, </booktitle> <month> October 4-5, </month> <year> 1990, </year> <pages> pp. 53-71. </pages>
Reference-contexts: This study explores the effects of imprecise clocks on time histograms and critical path analysis. - -- Providing precise clocks should not be a problem since computers are generally synchronous devices controlled by system clocks running at very high frequencies <ref> [4] </ref>. The system clock defines the highest frequency at which events can occur, and therefore it should be possible to provide a register that is incremented each time the system clock ticks.
Reference: 5. <author> M. Carey, D. DeWitt, J. Richardson and E. Shekita, </author> <title> "Object and File Management in the EXODUS Extensible Database System", </title> <booktitle> Proc. of the 1986 VLDB Conference , Kyoto, </booktitle> <address> Japan, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: Client/Server Database Storage Manager Our third case study examines the performance of the EXODUS Storage Manager, a system that supports the storage of persistent objects, files, and indices for use by database systems <ref> [5, 6] </ref>. EXODUS uses a client/server model to allow simultaneous access to objects by multiple applications in a distributed environment. The server is the main repository for objects and provides support for lock management, transaction logging, page allocation and deallocation, and recovery/rollback.
Reference: 6. <author> M. Carey, D. DeWitt and E. Shekita, </author> <title> Storage Management for Objects in EXODUS, in Object-Oriented Concepts, Databases, and Applications, </title> <editor> W. Kim and F. Lochovsky (ed.), </editor> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Client/Server Database Storage Manager Our third case study examines the performance of the EXODUS Storage Manager, a system that supports the storage of persistent objects, files, and indices for use by database systems <ref> [5, 6] </ref>. EXODUS uses a client/server model to allow simultaneous access to objects by multiple applications in a distributed environment. The server is the main repository for objects and provides support for lock management, transaction logging, page allocation and deallocation, and recovery/rollback.
Reference: 7. <author> S. L. Graham, P. B. Kessler and M. K. McKusick, </author> <title> "gprof: a Call Graph Execution Profiler", </title> <booktitle> SIGPLAN '82 Symposium on Compiler Construction, </booktitle> <address> Boston, </address> <month> June </month> <year> 1982, </year> <pages> pp. 120-126. </pages>
Reference-contexts: NPT profiles display a process time metric that is normalized by the number of concurrently executing processes [1]. Gprof tables display process and procedure performance data in the style of the Unix utility gprof <ref> [7] </ref>. IPS-2 allows the user to define time periods, called phases, and any of the metrics and analyses may be constrained to any phase of execution. The primary method of program visualization in IPS-2 is the time histogram, which plots performance metrics over the duration of a program's execution.
Reference: 8. <author> J. K. Hollingsworth, R. B. Irvin and B. P. Miller, </author> <title> "The Integration of Application and System Based Metrics in </title>
Reference-contexts: The user can also study the effect of the workload on various parts of the system. IPS-2 includes a simple, open interface for the incorporation of external data from hardware, network, or operating system monitors <ref> [8] </ref>. If the computing environment already includes such performance monitors then their output can be directed into IPS-2 through the external data interface. <p> Critical Path with 10 msec clock. Critical Path with 1 usec clock. 5.2. Scheduling, Synchronization Policies, and Workload Performance This case study examines a widely studied application [14] that was previously tuned in isolation using IPS-2 <ref> [8] </ref>. The application, called psim, simulates an indirect k-ary, n-cube processor-memory interconnection network. Over the course of a simulation several memory request packets are issued from each simulated cpu. <p> To continue our study of the system we could refine our view of specific threads and - -- processes with procedure-level critical path and profile analyses. Procedure-level analyses identify specific procedures to be tuned and have led to performance improvements during past studies <ref> [8, 9] </ref>. However, for the present study we were primarily interested in identifying which applications affected each other, and process-level analysis was sufficient. 6.
References-found: 8

