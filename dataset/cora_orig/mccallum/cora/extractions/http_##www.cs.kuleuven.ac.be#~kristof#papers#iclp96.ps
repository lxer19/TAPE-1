URL: http://www.cs.kuleuven.ac.be/~kristof/papers/iclp96.ps
Refering-URL: http://www.cs.kuleuven.ac.be/~kristof/publications.html
Root-URL: 
Email: e-mail fmarcd, kristof, frank, dannydg@cs.kuleuven.ac.be, gudu@telinfo.be  
Phone: Phone: ++32 16 327544 Fax: ++32 16 327996  
Title: A Realistic Experiment in Knowledge Representation in Open Event Calculus Protocol Specification Keywords Knowledge Representation,
Author: Marc Denecker Kristof Van Belleghem Guy Duchatelet Frank Piessens Danny De Schreye 
Note: 1 supported by the K.U.Leuven research coordination 2 supported by the Belgian IWT 3 Telindus Distribution 4 supported by the Belgian National Fund for Scientific Research 5 senior research associate of the Belgian National Fund for Scientific Research  
Address: Celestijnenlaan 200A, 3001 Heverlee, Belgium  
Affiliation: K.U.Leuven, Department of Computing Science  
Abstract: This paper presents one of the first realistic experiments in the use of Event Calculus in Open Logic Programming: the specification of a process protocol. The specification task involves most of the common complications of temporal reasoning: the representation of context dependent actions, of preconditions and ramifications of actions, the modelling of system faults, and most of all, the representation of uncertainty of actions. As the underlying language, the Open Logic Programming formalism, an extension of Logic Programming, is used. The experiment shows that Event Calculus is a promising candidate for the specification of dynamic systems. A comparison between specification of process protocols in Event Calculus and in the more commonly used process algebras shows fundamental differences between the two approaches. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Bolognesi and E. Brinksma. </author> <title> Introduction to the ISO Specification Language LOTOS. </title> <journal> Computer Networks and ISDN systems, </journal> <volume> 14 </volume> <pages> 25-59, </pages> <year> 1987. </year>
Reference-contexts: The sliding window protocol with go-back-n [22] is a well-known process protocol in the area of communication protocols. Currently, the most important formal languages for the specification of process protocols are the process algebras: CSP [12], CCS [18] and their descendants such as LOTOS <ref> [1] </ref>, etc.. These languages are based on a mathematical abstraction of a process as an algebraic entity which can be constructed by combining more basic processes using a class of pre-defined operators.
Reference: [2] <author> T. Bolognesi, J. van de Lagemaat, and C. Vissers. LOTOSphere: </author> <title> Software Development with LOTOS. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1984. </year>
Reference-contexts: Obviously, specifications are to be used in several ways, i.e. several kinds of reasoning on them are required. For Lotos specifications, software tools have been developed for different computational tasks, including testing and simulation, verification and compilation of the specification in executable programs (for an overview see <ref> [2] </ref>). Similar tools can or are being developed for event calculus. In [19], a general purpose approach to simulation in event calculus is proposed. We plan to implement an interpreter for event calculus which uses an event calculus protocol specification to run the protocol specification.
Reference: [3] <author> K.L. Clark. </author> <title> Negation as failure. </title> <editor> In H. Gallaire and J. Minker, editors, </editor> <booktitle> Logic and Databases, </booktitle> <pages> pages 293-322. </pages> <publisher> Plenum Press, </publisher> <year> 1978. </year>
Reference: [4] <author> L. Console, D. Theseider Dupre, and P. Torasso. </author> <title> On the relationship between abduction and deduction. </title> <journal> Journal of Logic and Computation, </journal> <volume> 1(5) </volume> <pages> 661-690, </pages> <year> 1991. </year>
Reference: [5] <author> M. Denecker. </author> <title> A Terminological Interpretation of (Abductive) Logic Programming. </title> <editor> In V.W. Marek, A. Nerode, and M. Truszczynski, editors, </editor> <booktitle> International Conference on Logic Programming and Nonmonotonic Reasoning, </booktitle> <pages> pages 15-29. </pages> <booktitle> Springer, Lecture notes in Artificial Intelligence 928, </booktitle> <year> 1995. </year>
Reference-contexts: Since the beginning of the decade, this problem is gradually being solved in Situation and Event calculus [14]. In <ref> [5] </ref>, we presented a simple but expressive form of event calculus and showed its use for representing various forms of uncertainty, including uncertainty on the events, indeterminate actions, unknown initial state, etc. Event Calculus has been developed as a universal theory to describe actions and change.
Reference: [6] <author> M. Denecker and D. De Schreye. </author> <title> SLDNFA; an abductive procedure for normal abductive pro-grams. </title> <editor> In K.R. Apt, editor, </editor> <booktitle> Proc. of the International Joint Conference and Symposium on Logic Programming, </booktitle> <pages> pages 686-700, </pages> <year> 1992. </year>
Reference-contexts: In [8], we have shown how abductive extensions of SLDNF resolution, currently under development in the area of abductive logic programming, can be used for deduction, satisfiability checking and abduction in the context of open logic programming. We currently experimenting with the use of SLDNFA <ref> [6] </ref> for the above sorts of verification. The general applicability of Event Calculus to a wide range of tasks involving dynamic systems allows for an integration of protocol specifications with other systems. For example, in this paper we have specified a communication protocol.
Reference: [7] <author> M. Denecker and D. De Schreye. </author> <title> Representing incomplete knowledge in abductive logic programming. </title> <booktitle> In Proc. of the International Symposium on Logic Programming, </booktitle> <pages> pages 147-163, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction In the past a number of experiments have been carried out to study the usefullness of extensions of logic programming for specification and reasoning on temporal domains ([11], [14], [21], [9], [10], <ref> [7] </ref>, [20],[23],[24]). Although successful, many of these experiments have a fairly academic flavour. In this paper, we conduct a more realistic experiment, using open logic programming and Event Calculus for the specification of a non-trivial temporal domain.
Reference: [8] <author> M. Denecker and D. De Schreye. </author> <title> Reasoning in an integration of Classical Logic and Logic Programming. </title> <type> Draft, </type> <institution> K.U.Leuven, </institution> <year> 1995. </year>
Reference-contexts: One may observe that this type of problem is formally equivalent to a planning problem in Event Calculus ([21]). In <ref> [8] </ref>, we have shown how abductive extensions of SLDNF resolution, currently under development in the area of abductive logic programming, can be used for deduction, satisfiability checking and abduction in the context of open logic programming.
Reference: [9] <author> M. Denecker, L. Missiaen, and M. Bruynooghe. </author> <title> Temporal reasoning with abductive event calculus. </title> <booktitle> In Proc. of the European Conference on Artificial Intelligence, </booktitle> <year> 1992. </year>
Reference-contexts: 1 Introduction In the past a number of experiments have been carried out to study the usefullness of extensions of logic programming for specification and reasoning on temporal domains ([11], [14], [21], <ref> [9] </ref>, [10], [7], [20],[23],[24]). Although successful, many of these experiments have a fairly academic flavour. In this paper, we conduct a more realistic experiment, using open logic programming and Event Calculus for the specification of a non-trivial temporal domain.
Reference: [10] <author> P.M. Dung. </author> <title> Representing Actions in Logic Programming and its Applications in Database Updates. </title> <booktitle> In Proc. of the International Conference on Logic Programming, </booktitle> <year> 1993. </year>
Reference-contexts: 1 Introduction In the past a number of experiments have been carried out to study the usefullness of extensions of logic programming for specification and reasoning on temporal domains ([11], [14], [21], [9], <ref> [10] </ref>, [7], [20],[23],[24]). Although successful, many of these experiments have a fairly academic flavour. In this paper, we conduct a more realistic experiment, using open logic programming and Event Calculus for the specification of a non-trivial temporal domain.
Reference: [11] <author> M. Gelfond and V. Lifschitz. </author> <title> Representing Action and Change by Logic Programs. </title> <journal> Journal of Logic Programming, </journal> <volume> 17(2,3,4):301-322, </volume> <year> 1993. </year>
Reference: [12] <author> C. A. R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference-contexts: The sliding window protocol with go-back-n [22] is a well-known process protocol in the area of communication protocols. Currently, the most important formal languages for the specification of process protocols are the process algebras: CSP <ref> [12] </ref>, CCS [18] and their descendants such as LOTOS [1], etc.. These languages are based on a mathematical abstraction of a process as an algebraic entity which can be constructed by combining more basic processes using a class of pre-defined operators.
Reference: [13] <author> G. Karjoth. </author> <title> Stepwise specification of a sliding-window protocol by means of process algebra. Switzerland Chapter on Digital Communication Systems, </title> <year> 1988. </year>
Reference-contexts: Our specification contains about 30 main domain dependent clauses (not counting e.g. the initialisation clauses and the definition of cnext) with an average of 3-4 literals in the head. The specification in section 3 and the specification of the same protocol in a process algebra in <ref> [13] </ref>, have about the same length. In general, our specification models directly and naturally the different states in which a process may be and the effects of actions. The control in the specification is mode-based: modes, represented by the mode attribute, are used to control the order of events.
Reference: [14] <author> R.A. Kowalski and M. Sergot. </author> <title> A logic-based calculus of events. </title> <journal> New Generation Computing, </journal> <volume> 4(4) </volume> <pages> 319-340, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction In the past a number of experiments have been carried out to study the usefullness of extensions of logic programming for specification and reasoning on temporal domains ([11], <ref> [14] </ref>, [21], [9], [10], [7], [20],[23],[24]). Although successful, many of these experiments have a fairly academic flavour. In this paper, we conduct a more realistic experiment, using open logic programming and Event Calculus for the specification of a non-trivial temporal domain. <p> Since the beginning of the decade, this problem is gradually being solved in Situation and Event calculus <ref> [14] </ref>. In [5], we presented a simple but expressive form of event calculus and showed its use for representing various forms of uncertainty, including uncertainty on the events, indeterminate actions, unknown initial state, etc. Event Calculus has been developed as a universal theory to describe actions and change.
Reference: [15] <author> Y. Leserance, H. J. Levesque, F. Lin, D. Marcu, R. Reiter, and R. B. Scherl. </author> <title> A Logical Approach to High-Level Robot Programming- A Progress Report. In Control of the Physical World by Intelligent Systems, </title> <booktitle> Work Notes of the 1994 AAAI Fall Symposium, </booktitle> <year> 1994. </year>
Reference-contexts: An alternative for this mode-based control would be to allow compound actions in Event Calculus. Such compound actions are described by pieces of imperative code and have been introduced already in <ref> [15] </ref> in the context of situation calculus. In the near future, we will investigate how to introduce such compound actions in event calculus. Comparing our specification with a specification in a process algebra approach, we find an important difference on the level of the conceptualisation of the process concept. <p> The system is similar to the simulation system but runs one process in the protocol and communicates with the other process in the distant location via an interface. A similar system has been developed for situation calculus in <ref> [15] </ref>. Different forms of verification can be done in event calculus and Open Logic Programming.
Reference: [16] <author> J.W. Lloyd. </author> <title> Foundations of Logic Programming. </title> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference: [17] <author> J. McCarthy and P.J. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence 4, </booktitle> <pages> pages 463-502. </pages> <publisher> Edinburgh University Press, </publisher> <year> 1969. </year>
Reference-contexts: Until fairly recently, the major obstacle in specifying dynamic systems and temporal domains in logic was the frame problem: the problem of giving a precise description of the effects of an action on the state of the world <ref> [17] </ref>. Since the beginning of the decade, this problem is gradually being solved in Situation and Event calculus [14].
Reference: [18] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: The sliding window protocol with go-back-n [22] is a well-known process protocol in the area of communication protocols. Currently, the most important formal languages for the specification of process protocols are the process algebras: CSP [12], CCS <ref> [18] </ref> and their descendants such as LOTOS [1], etc.. These languages are based on a mathematical abstraction of a process as an algebraic entity which can be constructed by combining more basic processes using a class of pre-defined operators.
Reference: [19] <author> L.R. Missiaen. ECSIM: </author> <title> Discrete event simulation using event calculus. </title> <journal> International Journal on Artificial Intelligence Tools, </journal> <note> 1995. Submitted (by invitation). </note>
Reference-contexts: For Lotos specifications, software tools have been developed for different computational tasks, including testing and simulation, verification and compilation of the specification in executable programs (for an overview see [2]). Similar tools can or are being developed for event calculus. In <ref> [19] </ref>, a general purpose approach to simulation in event calculus is proposed. We plan to implement an interpreter for event calculus which uses an event calculus protocol specification to run the protocol specification.
Reference: [20] <author> J. Pinto and R.Reiter. </author> <title> Temporal Reasoning in Logic Programming: A Case for the Situation Calculus. </title> <booktitle> In Proc. of the International Conference on Logic Programming, </booktitle> <pages> pages 203-221, </pages> <year> 1993. </year>
Reference: [21] <author> M. Shanahan. </author> <title> Prediction is deduction but explanation is abduction. </title> <booktitle> In Proc. of the IJCAI89, </booktitle> <pages> page 1055, </pages> <year> 1989. </year>
Reference-contexts: 1 Introduction In the past a number of experiments have been carried out to study the usefullness of extensions of logic programming for specification and reasoning on temporal domains ([11], [14], <ref> [21] </ref>, [9], [10], [7], [20],[23],[24]). Although successful, many of these experiments have a fairly academic flavour. In this paper, we conduct a more realistic experiment, using open logic programming and Event Calculus for the specification of a non-trivial temporal domain.
Reference: [22] <author> A. S. Tanenbaum. </author> <title> Computer networks, 2nd ed. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: Although successful, many of these experiments have a fairly academic flavour. In this paper, we conduct a more realistic experiment, using open logic programming and Event Calculus for the specification of a non-trivial temporal domain. The sliding window protocol with go-back-n <ref> [22] </ref> is a well-known process protocol in the area of communication protocols. Currently, the most important formal languages for the specification of process protocols are the process algebras: CSP [12], CCS [18] and their descendants such as LOTOS [1], etc.. <p> This is a well-known communication protocol, described in <ref> [22] </ref>, which is situated in the OSI datalink-layer. The protocol provides a reliable and quite efficient connection to be used by the higher OSI layer, the network layer. <p> In fact, it must be disabled even sooner, when there is only one free buffer slot left (see <ref> [22] </ref> for more details). There is only one buffer slot left when f ts points to the predecessor of xpa.
Reference: [23] <author> K. Van Belleghem, M. Denecker, and D. De Schreye. </author> <title> Representing continuous change in the abductive event calculus. </title> <booktitle> In Proc. of the International Conference on Logic Programming, </booktitle> <year> 1994. </year>
Reference: [24] <author> K. Van Belleghem, M. Denecker, and D. De Schreye. </author> <title> The abductive event calculus as a general framework for temporal databases. </title> <booktitle> In Proc. of the International Conference on Temporal Logic, </booktitle> <year> 1994. </year>
References-found: 24

