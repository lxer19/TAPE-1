URL: http://www-ccs.cs.umass.edu/~jitu/publications/ipps.ps
Refering-URL: http://www-ccs.cs.umass.edu/~jitu/publications.html
Root-URL: 
Phone: 2  
Title: Dynamic versus Adaptive Processor Allocation Policies for Message Passing Parallel Computers: An Empirical Comparison  
Author: Jitendra Padhye and Lawrence Dowdy 
Address: Amherst, MA 01003.  Nashville, TN 37235.  
Affiliation: 1 Department of Computer Science, University of Massachusetts at Amherst,  Department of Computer Science, Vanderbilt University,  
Abstract: When a job arrives at a space-sharing multiprocessor system, a decision has to be made regarding the number and the specific identities of the processors to be allocated to it. An adaptive policy may consider the state of the system at arrival time but it does not allow preemption of any of the running jobs. A dynamic partitioning policy may preempt one or more of the currently running jobs to accommodate the new arrival. In this paper performance of dynamic and adaptive policies is investigated experimentally on a message passing architecture (Intel Paragon). The workload model is based on matrix computation applications commonly found on large systems used for scientific programming. Results are reported for single and multiclass cases. A sensitivity analysis with respect to workload speedup characteristics is presented. Our results show that if the preemption overheads are kept low, dynamic polices result in noticeable improvement in overall performance of the system.
Abstract-found: 1
Intro-found: 1
Reference: [BMSD95] <author> J. Brehm, M. Madhukar, E. Smirni, L. W. Dowdy, </author> <title> "PerPreT A performance prediction tool for massively parallel systems," </title> <booktitle> Int. Conf. on Modeling Techniques and Tools for Computer Performance Evaluation, </booktitle> <month> September </month> <year> 1995. </year>
Reference-contexts: The other workload program is based on a parallel, preemptible, distributed memory version of a matrix conjugate gradient program. This program is representative of typical scientific workloads and has been used for similar purposes in the past <ref> [BMSD95] </ref>. Our results show that if the preemption overheads are kept low, dynamic polices result in noticeable improvement in the performance of the system. This result is not surprising theoretically, however, experimental validation studies have been lacking. This study is an effort to fill that gap. <p> Number of computations, amount of communication and preemption overheads are all easily adjustable. The second workload is based on the Conjugate Gradient method for matrices. The program is a representative example of the scientific workload and has been used for similar purposes in other studies <ref> [BMSD95] </ref>. 8 The Synthetic Workload. The synthetic workload is designed to be flexible enough to generate various speedup curves by varying workload parameters. The workload is capable of spawning as many tasks as the number of allocated processors. <p> Fig. 1. Speedup Curves for the Synthetic Workload Conjugate Gradient Workload. The program implements the conjugate gradient method for matrices. The task graph of the program is similar to many scientific and engineering applications found on large multiprocessor systems. More details about the program can be found in <ref> [BMSD95] </ref>. The program executes a specified number of iterations or until a user specified accuracy is achieved. For test purposes, the accuracy testing feature is disabled and the program continues for a specified number of iterations.
Reference: [CMV94] <author> S.-H. Chiang, R.K. Mansharamani, </author> <title> M.K. Vernon, "Use of application characteristics and limited preemption for run-to-completion parallel processor scheduling policies," </title> <booktitle> Proc. ACM SIGMETRICS, </booktitle> <year> 1994, </year> <pages> pp. 33-44. </pages>
Reference: [DCDP90] <author> K. Dussa, B.M. Carlson, L.W. Dowdy, K.-H. Park, </author> <title> "Dynamic partitioning in a transputer environment," </title> <booktitle> Proc. ACM SIGMETRICS, </booktitle> <year> 1990, </year> <pages> pp. 203-213. </pages>
Reference-contexts: Also, validation of the simulation models is difficult. Detailed Markovian analysis of complex scheduling policies to verify simulation models is possible only for small systems (e.g. less than 10 processors) <ref> [SRSDS94, DCDP90, MEB88] </ref>. For larger systems, simplifying assumptions have to be made, resulting in a loss of accuracy. Experimental studies on dynamic processor partitioning policies have been done mainly for shared memory architectures [GTU91, TG89].
Reference: [GTU91] <author> A. Gupta, A. Tucker, S. Urushibara, </author> <title> "The impact of operating system scheduling policies and synchronization methods on the performance of parallel applications," </title> <booktitle> Proc. ACM SIGMETRICS, </booktitle> <year> 1991, </year> <pages> pp. 120-132. </pages>
Reference-contexts: In such cases, performance can be improved by sharing the multiprocessor among all or some of the waiting jobs. This can be achieved via either space sharing [SRSDS94] or time sharing <ref> [GTU91] </ref>. Under space sharing scheduling polices, an incoming job is assigned to a subset of the total available processors. Thus, multiple jobs can be active within the multiprocessor at the same time. Space sharing policies can either be dynamic or adaptive. <p> For larger systems, simplifying assumptions have to be made, resulting in a loss of accuracy. Experimental studies on dynamic processor partitioning policies have been done mainly for shared memory architectures <ref> [GTU91, TG89] </ref>. In this paper, experimental analysis of dynamic processor partitioning policies for a message passing architecture is presented. To this end, two dynamic processor partitioning policies based on those discussed in [MZ94] and one adaptive policy presented in [RSDSC94] are implemented on the Intel Paragon.
Reference: [INT93] <author> Intel Corporation, </author> <title> Paragon OSF/1 User's Guide, </title> <year> 1993. </year>
Reference-contexts: The operating system conforms to OSF/1 standards. Although the machine is capable of supporting MIMD (or MPMD) computing model, most applications use the SPMD model for computing. The workloads for this study use the SPMD model. A detailed description of the Paragon architecture may be found in <ref> [INT93] </ref>. 2.2 The Adaptive Scheduling Policy The adaptive scheduling policy chosen for this study is the Robust Adaptive (RA) scheduling policy described in [RSDSC94]. This policy has been shown to have better performance than several other non-preemptive scheduling policies.
Reference: [IPS96] <author> N. Islam, A. Prodormidis and M. Squillante, </author> <title> "Dynamic Partitioning in Different Distributed-Memory Environments," </title> <booktitle> In this volume. </booktitle>
Reference-contexts: This lowers the execution time relative to the scheduling overhead. In this case, RA outperforms Folding. It may also be possible for Equipartitioning to perform better than Folding under certain circumstances. Some pertinent results are presented in <ref> [IPS96] </ref>. Mary Vernon has suggested [V96] that on parallel systems of the future, the job arrival rates would be very low (30 jobs/hour) and at such low arrival rates, Folding and Equipartitioning may have similar performance.
Reference: [LV90] <author> S.T. </author> <title> Leutenegger, M.K. Vernon, "The performance of multiprogrammed multiprocessor scheduling policies," </title> <booktitle> Proc. ACM SIGMETRICS, </booktitle> <year> 1990, </year> <pages> pp. 226-236. </pages>
Reference: [MEB88] <author> S. Majumdar, D.L. Eager, R.B. Bunt, </author> <title> "Scheduling in multiprogrammed parallel systems," </title> <booktitle> Proc. ACM SIGMETRICS, </booktitle> <year> 1988, </year> <pages> pp. 104-113. </pages>
Reference-contexts: Also, validation of the simulation models is difficult. Detailed Markovian analysis of complex scheduling policies to verify simulation models is possible only for small systems (e.g. less than 10 processors) <ref> [SRSDS94, DCDP90, MEB88] </ref>. For larger systems, simplifying assumptions have to be made, resulting in a loss of accuracy. Experimental studies on dynamic processor partitioning policies have been done mainly for shared memory architectures [GTU91, TG89].
Reference: [MVZ93] <author> C. McCann, R. Vaswani, J. Zahorjan, </author> <title> "A dynamic processor allocation policy for multiprogrammed shared memory multiprocessors," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol 11(2), </volume> <month> February </month> <year> 1993, </year> <pages> pp. 146-178. </pages>
Reference: [MZ94] <author> C. McCann, J. Zahorjan, </author> <title> "Processor allocation policies for message-passing parallel computers," </title> <booktitle> Proc. ACM SIGMETRICS, </booktitle> <year> 1994, </year> <pages> pp. 19-32. </pages>
Reference-contexts: Experimental studies on dynamic processor partitioning policies have been done mainly for shared memory architectures [GTU91, TG89]. In this paper, experimental analysis of dynamic processor partitioning policies for a message passing architecture is presented. To this end, two dynamic processor partitioning policies based on those discussed in <ref> [MZ94] </ref> and one adaptive policy presented in [RSDSC94] are implemented on the Intel Paragon. Two workload programs are used to compare behavior of the implemented scheduling policies. One is a synthetic workload program designed to emulate various speedup curves and other characteristics of common scientific applications. <p> Thus, dynamic scheduling policies can quickly adapt to transient changes in the workload flow. The two dynamic processor partitioning policies considered in this study are based on policies discussed in <ref> [MZ94] </ref>. Implementing preemption on a message passing architecture is a non-trivial task. The steps taken to ensure "safe" preemption of jobs while keeping the preemption overhead low, are briefly described in Section 2.4. Equipartitioning.
Reference: [P96] <author> J. Padhye, </author> <title> "Preemptive versus non-preemptive processor allocation policies: an empirical comparison", </title> <type> Technical Report, </type> <institution> Department of Computer Science, Vanderbilt University, </institution> <year> 1996. </year>
Reference-contexts: Due to space constraints, this section provides only a brief overview of the actual implementation. More details may be found in <ref> [P96] </ref>. 2.1 The Intel Paragon The Intel Paragon supercomputer consists of several nodes connected in a mesh configuration. The computer used for this study has 66 nodes connected in a 11x6 matrix. Several nodes are dedicated to special tasks such as disk and network control.
Reference: [PD89] <author> K.-H. Park, L.W. Dowdy, </author> <title> "Dynamic partitioning of multiprocessor systems," </title> <journal> International Journal of Parallel Programming, </journal> <volume> Vol 18(2), </volume> <year> 1989, </year> <pages> pp. 91-120. </pages>
Reference: [RSDSC94] <author> E. Rosti, E. Smirni, L.W. Dowdy, G. Serazzi, B.M. Carlson, </author> <title> "Robust partitioning policies for multiprocessor systems," </title> <journal> Performance Evaluation, </journal> <volume> Vol 19(2-3), </volume> <month> March </month> <year> 1994, </year> <pages> pp. 141-165. </pages>
Reference-contexts: In this paper, experimental analysis of dynamic processor partitioning policies for a message passing architecture is presented. To this end, two dynamic processor partitioning policies based on those discussed in [MZ94] and one adaptive policy presented in <ref> [RSDSC94] </ref> are implemented on the Intel Paragon. Two workload programs are used to compare behavior of the implemented scheduling policies. One is a synthetic workload program designed to emulate various speedup curves and other characteristics of common scientific applications. <p> The workloads for this study use the SPMD model. A detailed description of the Paragon architecture may be found in [INT93]. 2.2 The Adaptive Scheduling Policy The adaptive scheduling policy chosen for this study is the Robust Adaptive (RA) scheduling policy described in <ref> [RSDSC94] </ref>. This policy has been shown to have better performance than several other non-preemptive scheduling policies. The RA scheme actually represents a suite of scheduling policies rather than a single scheduling algorithm. The version chosen here is a representative one and has been used in subsequent studies [SRSDS94].
Reference: [SEV94] <author> K.C. Sevcik, </author> <title> "Application scheduling and processor allocation in mul-tiprogrammed multiprocessors," </title> <journal> Performance Evaluation, </journal> <volume> Vol 19(2-3), </volume> <month> March </month> <year> 1994, </year> <pages> pp. 107-140. </pages>
Reference: [SRSDS94] <author> E. Smirni, E. Rosti, G. Serazzi, L. W. Dowdy, K. C. </author> <title> Sevcik "Performance gains from leaving idle processors in multiprocessor systems" Proc. </title> <booktitle> International Conference on Parallel Processing, </booktitle> <year> 1995. </year>
Reference-contexts: For a heavily used system it is not uncommon to have several parallel jobs waiting to use the multiprocessor. In such cases, performance can be improved by sharing the multiprocessor among all or some of the waiting jobs. This can be achieved via either space sharing <ref> [SRSDS94] </ref> or time sharing [GTU91]. Under space sharing scheduling polices, an incoming job is assigned to a subset of the total available processors. Thus, multiple jobs can be active within the multiprocessor at the same time. Space sharing policies can either be dynamic or adaptive. <p> Also, validation of the simulation models is difficult. Detailed Markovian analysis of complex scheduling policies to verify simulation models is possible only for small systems (e.g. less than 10 processors) <ref> [SRSDS94, DCDP90, MEB88] </ref>. For larger systems, simplifying assumptions have to be made, resulting in a loss of accuracy. Experimental studies on dynamic processor partitioning policies have been done mainly for shared memory architectures [GTU91, TG89]. <p> This policy has been shown to have better performance than several other non-preemptive scheduling policies. The RA scheme actually represents a suite of scheduling policies rather than a single scheduling algorithm. The version chosen here is a representative one and has been used in subsequent studies <ref> [SRSDS94] </ref>. The main feature of the RA policy is that it adapts to load changes over a period of time. Two identical jobs may be allocated different sized partitions, depending upon the system state when each job arrives.
Reference: [SST93] <author> S.K. Setia, </author> <title> M.S. Squillante, S.K. Tripathi, "Processor scheduling in mul-tiprogrammed, distributed memory parallel computers," </title> <booktitle> Proc. ACM SIGMETRICS, </booktitle> <year> 1993, </year> <pages> pp. 158-170. </pages>
Reference: [TG89] <author> A. Tucker, A. Gupta, </author> <title> "Process control and scheduling issues for multi-programmed shared-memory multiprocessors," </title> <booktitle> Proc. of the 12th ACM Symposium on Operating Systems Principles, </booktitle> <year> 1989, </year> <pages> pp. 159-166. </pages>
Reference-contexts: For larger systems, simplifying assumptions have to be made, resulting in a loss of accuracy. Experimental studies on dynamic processor partitioning policies have been done mainly for shared memory architectures <ref> [GTU91, TG89] </ref>. In this paper, experimental analysis of dynamic processor partitioning policies for a message passing architecture is presented. To this end, two dynamic processor partitioning policies based on those discussed in [MZ94] and one adaptive policy presented in [RSDSC94] are implemented on the Intel Paragon.
Reference: [V96] <author> Mary Vernon, </author> <type> Personal Communication. </type>
Reference-contexts: This lowers the execution time relative to the scheduling overhead. In this case, RA outperforms Folding. It may also be possible for Equipartitioning to perform better than Folding under certain circumstances. Some pertinent results are presented in [IPS96]. Mary Vernon has suggested <ref> [V96] </ref> that on parallel systems of the future, the job arrival rates would be very low (30 jobs/hour) and at such low arrival rates, Folding and Equipartitioning may have similar performance.
Reference: [ZB91] <author> S. Zhou, T. Brecht, </author> <title> "Processor pool-based scheduling for large-scale NUMA multiprocessors," </title> <booktitle> Proc. ACM SIGMETRICS, </booktitle> <year> 1991, </year> <pages> pp. 133-142. </pages>
Reference: [ZM90] <author> J. Zahorjan, C. McCann, </author> <title> "Processor scheduling in shared memory multiprocessors," </title> <booktitle> Proc. ACM SIGMETRICS, </booktitle> <year> 1990, </year> <pages> pp. </pages> <month> 214-225. </month> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
References-found: 20

