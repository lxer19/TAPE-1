URL: ftp://softlib.rice.edu/pub/CRPC-TRs/reports/CRPC-TR98738.ps.gz
Refering-URL: http://www.crpc.rice.edu/CRPC/softlib/TRs_online.html
Root-URL: 
Title: Construction and Evaluation of an Incremental Iterative Version of a Parallel Multigrid CFD Code via
Author: Alan Carle and Mike Fagan 
Date: February 4, 1998  
Abstract: Automatic differentiation (AD) is a technique for augmenting computer codes to compute derivatives of a subset of their outputs with respect to a subset of their inputs. AD has been shown to provide accurate, but inefficient, sensitivity-enhanced CFD codes for use in aerodynamic shape optimization. To address the inefficiency problem, several special purpose techniques have been suggested. One such technique is the incremental iterative (II) method. This report describes and evaluates the use of the II method in AD-augmented code for OVERFLOW, a parallel, multigrid CFD code.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Bischof, T. Knauff, L. Green, and K. Haigler. </author> <title> Parallel calculation of sensitivity derivatives for aircraft design using automatic differentiation. </title> <booktitle> In 5th AIAA/NASA/USAF/ISSMO Symposium on Multidisciplinary Analysis and Optimization, </booktitle> <pages> pages 73-86, </pages> <year> 1994. </year> <month> AIAA-94-4261-CP. </month>
Reference-contexts: In contrast with finite differences, automatic differentiation (AD), a technique for augmenting computer codes to compute derivatives of a subset of their outputs with respect to a subset of their inputs (see [4]), has been shown to deliver accurate derivatives of CFD codes <ref> [1, 7, 6] </ref>. Unfortunately, CFD codes augmented by AD using the simple "black box" (BB) approach, tend to take about the same or more time as two-sided finite differences to compute derivatives. Fortunately, it is often possible to combine AD with mathematical insight to generate efficient derivative codes.
Reference: [2] <author> Christian Bischof, Alan Carle, Peyvand Khademi, and Andrew Mauer. Adifor 2.0: </author> <title> Automatic differentiation of Fortran 77 programs. </title> <journal> IEEE Computational Science and Engineering, </journal> <volume> 3(3) </volume> <pages> 18-32, </pages> <month> Fall </month> <year> 1996. </year>
Reference-contexts: The challenge for multigrid is to identify the f n updates and interpolation steps for each level of the grid. The loop invokes the original solver on each component of R 0 n to compute the derivative update component. We used Adifor 2.0 <ref> [2] </ref> to differentiate OVERFLOW to create ADBB, and then modified the source code for the ADBB iteration to create the code for the II iteration.
Reference: [3] <author> Pieter C. Buning, Dennis Jespersen, Thomas Pulliam, William M. Chan, Jeffery P. Slotnick, Steven E. Krist, and Kevin J. Renze. </author> <note> OVERFLOW User's Manual, version 1.7r, </note> <month> October </month> <year> 1996. </year>
Reference-contexts: computations that are not required for well-converged CFD solutions, and that the methods can be implemented through a combination of AD and a small amount of human intervention. 1 In light of these considerations, the task presented to us by NASA was to construct an II version of OVERFLOW 1.7r <ref> [3] </ref> and to compare its accuracy and efficiency to finite differences and to the BB version of OVERFLOW. OVERFLOW 1.7r is a parallel, multizone, multigrid flow solver being used for shape optimization at NASA.
Reference: [4] <author> A. Griewank. </author> <title> On automatic differentiation. </title> <editor> In M. Iri and K. Tanabe, editors, </editor> <booktitle> Mathematical Programming: Recent Developments and Applications, </booktitle> <pages> pages 83-108. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1989. </year>
Reference-contexts: In contrast with finite differences, automatic differentiation (AD), a technique for augmenting computer codes to compute derivatives of a subset of their outputs with respect to a subset of their inputs (see <ref> [4] </ref>), has been shown to deliver accurate derivatives of CFD codes [1, 7, 6]. Unfortunately, CFD codes augmented by AD using the simple "black box" (BB) approach, tend to take about the same or more time as two-sided finite differences to compute derivatives.
Reference: [5] <author> Andreas Griewank, Christian Bischof, George Corliss, Alan Carle, and Karen Williamson. </author> <title> Derivative convergence for iterative equation solvers. </title> <journal> Optimization Methods and Software, </journal> <volume> 2 </volume> <pages> 321-355, </pages> <year> 1993. </year>
Reference-contexts: Fortunately, it is often possible to combine AD with mathematical insight to generate efficient derivative codes. For CFD, one such mathematically-motivated technique is the incremental iterative (II) method. The details of the II method appear elsewhere in the literature <ref> [5, 7] </ref>. <p> In the following discussion, we give an overview of the II method. A more complete (and rigorous) discussion can be found in <ref> [5] </ref> or [7]. A prototypical recurrence iteration, expressed mathematically is L n f n = R n where f n is a current solution estimate, R n is a residual difference between current and desired aspects of the solution, and L n is the current linearization of the problem operator.
Reference: [6] <author> J. Issac and R. Kapania. </author> <title> Aeroelastic sensitivity analysis of wings using automatic differentiation. </title> <booktitle> In 6th AIAA/NASA/ISSMO Symposium on Multidisciplinary Analysis and Optimization, </booktitle> <pages> pages 1176-1186, </pages> <year> 1996. </year> <month> AIAA-96-4119-CP. </month>
Reference-contexts: In contrast with finite differences, automatic differentiation (AD), a technique for augmenting computer codes to compute derivatives of a subset of their outputs with respect to a subset of their inputs (see [4]), has been shown to deliver accurate derivatives of CFD codes <ref> [1, 7, 6] </ref>. Unfortunately, CFD codes augmented by AD using the simple "black box" (BB) approach, tend to take about the same or more time as two-sided finite differences to compute derivatives. Fortunately, it is often possible to combine AD with mathematical insight to generate efficient derivative codes.
Reference: [7] <author> V. Korivi, L. Sherman, A. Taylor, G. Hou, L. Green, and P. Newman. </author> <title> First- and second-order aerodynamic sensitivity derivatves via automatic differentiation with incremental iterative methods. </title> <booktitle> In 5th AIAA/NASA/USAF/ISSMO Symposium on Multidisciplinary Analysis and Optimization, </booktitle> <pages> pages 87-120, </pages> <year> 1994. </year> <note> AIAA-94-4262-CP. 7 2Z. 8 9 FMG=50,50, NSTEPS=200, 2Z. 10 FMG=50,50, NSTEPS=600, 2Z. FMG=50,50, NSTEPS=600, 2Z. 11 2Z. 3Z. </note>
Reference-contexts: In contrast with finite differences, automatic differentiation (AD), a technique for augmenting computer codes to compute derivatives of a subset of their outputs with respect to a subset of their inputs (see [4]), has been shown to deliver accurate derivatives of CFD codes <ref> [1, 7, 6] </ref>. Unfortunately, CFD codes augmented by AD using the simple "black box" (BB) approach, tend to take about the same or more time as two-sided finite differences to compute derivatives. Fortunately, it is often possible to combine AD with mathematical insight to generate efficient derivative codes. <p> Fortunately, it is often possible to combine AD with mathematical insight to generate efficient derivative codes. For CFD, one such mathematically-motivated technique is the incremental iterative (II) method. The details of the II method appear elsewhere in the literature <ref> [5, 7] </ref>. <p> In the following discussion, we give an overview of the II method. A more complete (and rigorous) discussion can be found in [5] or <ref> [7] </ref>. A prototypical recurrence iteration, expressed mathematically is L n f n = R n where f n is a current solution estimate, R n is a residual difference between current and desired aspects of the solution, and L n is the current linearization of the problem operator.
References-found: 7

