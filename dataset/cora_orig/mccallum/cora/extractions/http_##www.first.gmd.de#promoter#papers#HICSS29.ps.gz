URL: http://www.first.gmd.de/promoter/papers/HICSS29.ps.gz
Refering-URL: http://www.first.gmd.de/promoter/papers/index.html
Root-URL: 
Email: wosch@rz.uni-potsdam.de fsam,tg,uteg@first.gmd.de  
Title: Experiences made with the Design and Development of a Message-Passing Kernel for a Dual-Processor-Node Parallel Computer  
Author: Th. Garnatz, U. Haack, M. Sander, W. Schroder-Preikschat 
Address: FIRST Am Neuen Palais 10 Rudower Chaussee 5 D-14469 Potsdam, Germany D-12489 Berlin, Germany  
Affiliation: RWCP Massively Parallel Systems GMD Laboratory yUniversity of Potsdam GMD  
Date: January 3-6, 1996  
Note: To be presented at the 29th Hawaii International Conference on System Sciences (HICSS), Maui, Hawaii, USA,  
Abstract: The paper presents the experiences made with the design and implementation of the Peace message-passing kernel. Peace is the object-oriented parallel operating system developed for the Manna parallel computer. Manna is a dual-processor-node distributed-memory machine using crossbar technology for node interconnection. Performance figures of the Peace kernel configurations are presented and their implications with respect to communication latency hiding are discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. M. Behr, W. K. Giloi, and W. K. Muhlenbein. </author> <title> Rationale and Concepts for the SUPRENUM Supercomputer Architecture. </title> <booktitle> In Proceedings of the IFIP Working Conference on Highly Parallel Computers for Numerical and Signal Processing Applications, </booktitle> <address> Nice, France, March 24-26, </address> <year> 1986. </year>
Reference-contexts: Peace [10] served as the starting point for the implementation of a system software platform for Manna. Reflecting early experiences made with the 320-node Suprenum system <ref> [1] </ref>, two fundamental changes concerning Peace were made. The first change was the decision to exploit object-oriented design principles similar to Choices [2]. In contrast to fl This Work is partially supported by the Real World Computing Partnership (RWCP), Japan.
Reference: [2] <author> R. Campbell, G. Johnston, and V. Russo. </author> <title> Choices (Class Hierarchical Open Interface for Custom Embedded Systems). </title> <journal> Operating Systems Review, </journal> <volume> 21(3) </volume> <pages> 9-17, </pages> <year> 1987. </year>
Reference-contexts: Peace [10] served as the starting point for the implementation of a system software platform for Manna. Reflecting early experiences made with the 320-node Suprenum system [1], two fundamental changes concerning Peace were made. The first change was the decision to exploit object-oriented design principles similar to Choices <ref> [2] </ref>. In contrast to fl This Work is partially supported by the Real World Computing Partnership (RWCP), Japan. Choices, a microkernel was no longer used as the minimal basis for a family of parallel operating systems.
Reference: [3] <author> D. D. Clark. </author> <title> The Structuring of Systems Using Upcalls. </title> <journal> Operating Systems Review, </journal> <volume> 19(5) </volume> <pages> 171-180, </pages> <year> 1985. </year>
Reference-contexts: A communication system emerges that comprises three problem-oriented protocol layers (Figure 2). Interactions between the layers happen via down-calls and upcalls <ref> [3] </ref>. Queues are used where possible to decouple the different flows of control. Calls in either direction are virtually asynchronous, since it depends on the actual load whether message transfer requests must be queued or can be immediately carried out. The layers implement the N C 2 protocol suite.
Reference: [4] <author> R. Esser and R. Knecht. </author> <title> Intel Paragon XP/S| Architecture and Software Environment. </title> <booktitle> In Proceedings of Supercomputer '93, Lecture Notes in Computer Science, Mannheim, </booktitle> <address> Germany, June 24-26 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The main concern of this technology is to provide architectural support for the minimization of (1) the message startup time and (2) the message latency. However, all these measures are of little value if the operating-system architecture for such a hardware organization is inappropriate. For example, OSF/1 AD <ref> [4] </ref> and Puma [13] both are parallel operating systems for the Paragon machine.
Reference: [5] <author> W. K. Giloi and U. Bruning. </author> <booktitle> Architectural Trends in Parallel Supercomputers. In Proceedings of the Second NEC International Symposium on Systems and Computer Architectures, </booktitle> <address> Tokyo, </address> <month> August </month> <year> 1991. </year> <institution> Nippon Electric Corp. </institution>
Reference-contexts: 1 Introduction Between 1990 and 1994, the Manna project was conducted to design and develop a scalable distributed-memory parallel computer aimed at supporting the execution of parallel numerical and nonnumerical applications <ref> [5] </ref>. One of the Manna research systems is used as a testbed for Promoter [6]. The task of Promoter is the development of an integrated system consisting of an object-oriented programming language, a compiler and a runtime system particularly suited for the programming of massively parallel computers.
Reference: [6] <author> W. K. Giloi and A. Schramm. </author> <title> PROMOTER: Making Parallel Programming Easier. </title> <booktitle> In Proceedings of the 8th German-Japanese Forum for Information Technology, </booktitle> <address> Oita, Japan, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Between 1990 and 1994, the Manna project was conducted to design and develop a scalable distributed-memory parallel computer aimed at supporting the execution of parallel numerical and nonnumerical applications [5]. One of the Manna research systems is used as a testbed for Promoter <ref> [6] </ref>. The task of Promoter is the development of an integrated system consisting of an object-oriented programming language, a compiler and a runtime system particularly suited for the programming of massively parallel computers. Peace [10] served as the starting point for the implementation of a system software platform for Manna.
Reference: [7] <author> A. N. Habermann, L. Flon, and L. Cooprider. </author> <title> Modularization and Hierarchy in a Family of Operating Systems. </title> <journal> Communications of the ACM, </journal> <volume> 19(5) </volume> <pages> 266-272, </pages> <year> 1976. </year>
Reference-contexts: In the family concept, a minimal subset of system functions defines the platform of fundamental abstractions for the implementation of minimal system extensions. These extensions, then, are made on the basis of an incremental system design <ref> [7] </ref>, with each new level being a new minimal basis (i.e., abstract machine) for additional higher-level system extensions. A true application-oriented system evolves, since extensions are only made on demand, namely, when needed to implement a specific system feature that supports a specific application.
Reference: [8] <author> B. J. Nelson. </author> <title> Remote Procedure Call. </title> <type> Technical Report CMU-81-119, </type> <institution> Carnegie-Mellon University, </institution> <year> 1982. </year>
Reference-contexts: Application-oriented services such as naming, process and memory management, file handling, I/O, load balancing and (inter-) networking to provide some host access are performed by Pose. The kernel and Pose services are built by active objects implemented by lightweight processes. Service access happens on RPC basis <ref> [8] </ref>. In contrast, the nucleus is an ensemble of passive objects that schedule active objects. Kernel and Pose are multithreaded entities, and thus support concurrent service processing.
Reference: [9] <author> W. Schroder-Preikschat. </author> <title> Overcoming the Startup Time Problem in Distributed Memory Architectures. </title> <booktitle> In Proceedings of the Twenty-Fourth Annual Hawaii International Conference on System Sciences, </booktitle> <volume> volume 1, </volume> <pages> pages 551-559, </pages> <address> Kauai, Hawaii, </address> <month> January 8-11, </month> <title> 1991. </title> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: With mapping application tasks in a one-to-one correspondence with the nodes, the performance|in particular the message startup time|was not satisfactory <ref> [9] </ref>. The outstanding feature of Manna is its dual-processor-node architecture. As the name suggests, a dual-processor node consists of two software-programmable processors.
Reference: [10] <author> W. Schroder-Preikschat. </author> <title> The Logical Design of Parallel Operating Systems. </title> <publisher> Prentice Hall International, </publisher> <year> 1994. </year> <note> ISBN 0-13-183369-3. </note>
Reference-contexts: One of the Manna research systems is used as a testbed for Promoter [6]. The task of Promoter is the development of an integrated system consisting of an object-oriented programming language, a compiler and a runtime system particularly suited for the programming of massively parallel computers. Peace <ref> [10] </ref> served as the starting point for the implementation of a system software platform for Manna. Reflecting early experiences made with the 320-node Suprenum system [1], two fundamental changes concerning Peace were made. The first change was the decision to exploit object-oriented design principles similar to Choices [2].
Reference: [11] <author> T. von Eicken, D. E. Culler, S. C. Goldstein, and K. E. Schauser. </author> <title> Active Messages: A Mechanism for Integrated Communication and Computation. </title> <type> Technical Report UCB/CSD 92/675, </type> <institution> University of California, Berkeley, </institution> <address> CA, </address> <year> 1992. </year>
Reference-contexts: Threads executing on the AP will never be preempted. Thus, in the AP/AP CP configuration, the AP actually becomes a computation coprocessor. The AP/AP CP configuration ensures an efficient execution of reactive objects. Basically, reactive objects are the object-oriented variant of active messages <ref> [11] </ref>. They are "unscheduled active objects", i.e., ignored by the scheduler, and immediately dispatched upon message arrival. Like an active object, a reactive object is controlled by a private thread. Reactive objects are processed by the AP CP .
Reference: [12] <author> P. Wegner. </author> <title> Classification in Object-Oriented Systems. </title> <journal> SIGPLAN Notices, </journal> <volume> 21(10) </volume> <pages> 173-182, </pages> <year> 1986. </year>
Reference-contexts: Design decisions are postponed as long as possible. In this process, system construction takes place bottom-up but is controlled in a top-down (application-driven) fashion. An elegant implementation of the family concept can be achieved on the basis of object orientation <ref> [12] </ref>. The minimal subset of system functions in the family concept has its counterpart in the superclass of the object-oriented approach. Minimal system extensions are thus introduced by means of subclassing. Inheritance and polymorphism are the proper mechanisms to allow different implementations of the same interface to coexist.
Reference: [13] <author> S. R. Wheat, A. B. Maccabe, R. Riesen, D. W. van Dresser, and T. M. Stallcup. Puma: </author> <title> An Operating System for Massively Parallel Systems. </title> <booktitle> In Proceedings of the Twenty-Seventh Annual Hawaii International Conference on System Sciences, </booktitle> <address> Maui, Hawaii, January 4-7 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: However, all these measures are of little value if the operating-system architecture for such a hardware organization is inappropriate. For example, OSF/1 AD [4] and Puma <ref> [13] </ref> both are parallel operating systems for the Paragon machine. One of the main reason that Puma outperforms OSF/1 AD is that the former has been specifically designed to operate in a distributed-memory parallel computer environment, while the latter is mainly a port of a microkernel-based distributed (timesharing) operating system.
References-found: 13

