URL: http://www.isi.edu/~shen/tkde.ps
Refering-URL: http://www.isi.edu/~shen/kdd.html
Root-URL: 
Email: shen@isi.edu  leng@inference.com  
Title: A Metapattern-Based Automated Discovery Loop for Integrated Data Mining Unsupervised Learning of Relational Patterns  
Author: Wei-Min Shen Bing Leng 
Keyword: Index Terms: Induction, Deduction, Human Interaction, Integration, Unsupervised Learning, Rela tional Concepts, Metaquery, Metapattern.  
Address: 4676 Admiralty Way Marina del Rey, CA 90292  4th Floor, 8410 W Bryn Mawr Ave Chicago, IL 60631  
Affiliation: Information Sciences Institute and Computer Science Department University of Southern California  Inference Corporation  
Note: IEEE Trans. on Knowledge and Data Engineering, 8(6),898-910.  
Abstract: Metapattern (also known as metaquery) is a new approach for integrated data mining systems. Different from a typical "tool-box" like integration, where components must be picked and chosen by users without much help, metapatterns provide a common representation for inter-component communication as well as a human interface for hypothesis development and search control. One weakness of this approach, however, is that the task of generating fruitful metapatterns is still a heavy burden for human users. In this paper, we describe a metapattern generator and an integrated discovery loop that can automatically generate metapatterns. Experiments in both artificial and real-world databases have shown that this new system goes beyond the existing machine learning technologies, and can discover relational patterns without requiring humans to pre-label the data as positive or negative examples for some given target concepts. With this technology, future data mining systems could discover high-quality, human comprehensible knowledge in a much more efficient and focused manner, and data mining could be managed easily by both expert and less expert users. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.V. Aho, J.E. Hopcroft, and J.D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1974. </year>
Reference-contexts: Finding cycles in a graph can be accomplished by using a standard transitive closure algorithm (see for example <ref> [1] </ref>) with some simple augmentation to enforce the alternating edge constraint. A graph G cannot have more than jGj! cycles because a cycle, without duplicated nodes, cannot be longer than the size of the graph.
Reference: [2] <author> J.M. Aronis and Provost F.J. </author> <title> Efficiently constructing relational features from background knowledge for inductive machine learning. </title> <booktitle> In Proceedings of 1994 AAAI Workshop on Knowledge Discovery in Databases, </booktitle> <year> 1994. </year>
Reference-contexts: These algorithms represent the efforts to integrate static domain knowledge with induction. The researchers in inductive logical programming have also addressed the problem of learning relation-based patterns. Different from the algorithms described above, these programs (see for example <ref> [2, 15, 18] </ref>) are focused on inventing new predicates from positive and negative training examples. Some of them (for example [17]) also use semantic knowledge as guidance. Our research in this area is focused on discovering relation-based patterns from data that are commonly found in databases.
Reference: [3] <author> G. Bisson. </author> <title> Conceptual clustering in a first order logic representation. </title> <booktitle> In The Proceedings of the 10th European Conference on AI, </booktitle> <pages> pages 458-462, </pages> <year> 1992. </year>
Reference-contexts: On one hand, most algorithms that learn relational patterns (see, for example, [18, 20]) require humans to label the data as positive and negative examples for a given target concept. On the other hand, most unsupervised algorithms (see, for example, <ref> [3, 14, 28, 29, 31] </ref>) hardly go beyond learning attribute-based concepts. This paper describes recent progress towards automatic generation of metapatterns in an integrated discovery loop that is both interactive and autonomous. <p> Furthermore, due to the nature of data mining, the domain and semantic knowledge must be incorporated interactively as the discovery loop iterates; they cannot be predetermined at the offset of the application. Although there are existing systems (see for example <ref> [3, 14, 28, 29, 31] </ref>) in the literature that can perform unsupervised learning, most of them are not targeted to learning relation-based patterns directly from databases. <p> Although RDT can learn concepts, it needs pre-labeled examples. LABYRINTH [29] incrementally forms concepts on composite objects, while KLUSTER [14] constructively induces structural knowledge on term-subsumption formalisms. Both systems produce concept hierarchy which is a different representation from function-free Horn clauses. Finally, KBG <ref> [3] </ref> is a knowledge based generalizer in a first order logic representation. It forms generalization tree, rather than implication rules, from a set of examples, each of which is a collection of tuples, by iterative use of clustering and generalization.
Reference: [4] <author> Simoudis E., Livezey B., and Kerber R. </author> <title> Integrating inductive and deductive reasoning for database mining. In Advances in Knowledge Discovery and Data Mining, chapter 14. </title> <publisher> MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: Many existing systems indeed contain some or all of these components. For example, systems such as INLEN [12] and IMACS [21] concentrate on inductive learning methods and the use of human knowledge. Systems such as KDW [7], RECON <ref> [4] </ref>, DBMiner [8] connect tightly with databases and provide a set of inductive and deductive tools for humans to choose from.
Reference: [5] <author> D.H. Fisher. </author> <title> Knowledge acquisition via incremental conceptual clustering. </title> <journal> Machine Learning, </journal> <volume> 2 </volume> <pages> 139-172, </pages> <year> 1987. </year>
Reference-contexts: At present, the action classify is a high-performance incremental algorithm called CDL2 [24] for learning decision lists from data. The action cluster is a Bayesian-based Cobweb clustering algorithm <ref> [5, 27] </ref>. The action ComputeStrength is an LDL++ procedure, the Plot action is a powerful GnuPlot tool, and the regression action is a standard polynomial interpolation method augmented with a stopping criterion based on the priciple of Minimal Descrition Length (MDL).
Reference: [6] <author> Y.J. Fu and J.W. Han. </author> <title> Meta-rule-guided mining of association rules in relational databases. In DOOD95 Workshop on the Integration of Knowlege Discovery with Deductive and Object Oriented Databases, </title> <address> Singapore, </address> <year> 1995. </year> <month> 22 </month>
Reference-contexts: The system will then instantiate the metapattern to a set of appropriate database queries, prepare the data sets based on the query results, and invoke the necessary analysis tools to generate final patterns that satisfy the format and content of the given metapattern. In several existing systems (for example <ref> [6, 13, 25, 26, 27] </ref>), human-generated metapatterns have been used in an interactive discovery loop to integrate inductive machine learning algorithms, statistic analysis tools, and deductive database technologies. <p> include discovering regularities in a large, common-sense knowledge base [23], finding circuit patterns from a telecommunication database [26], building prediction models from a chemical research database [27], constructing fault detection rules from a database that contains sequences of control data for semiconduct chip manufacture [25], discovering association rules in databases <ref> [6] </ref>, and detecting consuming patterns in retail [13]. Interested readers are refered to these papers for details. 3 The Metapattern Generator Although metapatterns are powerful tools for data mining, designing the right metapatterns for a given application is not an easy task.
Reference: [7] <author> Piatetsky-Shapiro G. and Matheus C. </author> <title> Knowledge discovery workbench for exploring business databases. </title> <journal> International Journal of Intelligent Systems, </journal> <volume> 7, </volume> <year> 1992. </year>
Reference-contexts: Many existing systems indeed contain some or all of these components. For example, systems such as INLEN [12] and IMACS [21] concentrate on inductive learning methods and the use of human knowledge. Systems such as KDW <ref> [7] </ref>, RECON [4], DBMiner [8] connect tightly with databases and provide a set of inductive and deductive tools for humans to choose from.
Reference: [8] <author> J.W. Han and Y.J. Fu. </author> <title> Exploration of the power of the attribute-oriented induction in data mining. In Advances in Knowledge Discovery and Data Mining, chapter 16. </title> <publisher> MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: Many existing systems indeed contain some or all of these components. For example, systems such as INLEN [12] and IMACS [21] concentrate on inductive learning methods and the use of human knowledge. Systems such as KDW [7], RECON [4], DBMiner <ref> [8] </ref> connect tightly with databases and provide a set of inductive and deductive tools for humans to choose from.
Reference: [9] <author> G.E. Hinton. </author> <title> Learning distributed representations of concepts. </title> <booktitle> In Proceedings of the 8th Annual Conference of the Cognitive Science Society, </booktitle> <year> 1986. </year>
Reference-contexts: Similarly, the third pattern is about two paths that have the same ending node. 8.2 A Family Tree Example The second illustration of the automated discovery loop is a family tree example. It was first used by Hinton in his neural network system <ref> [9] </ref>, and then used by Quinlan in his FOIL system. Again, using this example, Quinlan shown that given a concept and its positive and negative examples, FOIL can learn its relational definition. Here, we show that the concept can be learned without supervision 2 .
Reference: [10] <editor> E.T. Jaynes. </editor> <booktitle> Probability Theory | The Logic of Science. </booktitle> <address> Cambridge University Press, </address> <note> (To Appear) 1996. (Contact etj@howdy.wustl.edu for an online version). </note>
Reference-contexts: Intuitively, this p s value is the probability of seeing a tuple that satisfies RHS given the condition that the tuple satisfies LHS. Interested readers may find the complete derivation of Laplace's Rule of Succession in Chapter 6 of <ref> [10] </ref>.
Reference: [11] <author> Ali K. and Pazzani M. </author> <title> Learning multiple relational rule-based models. </title> <editor> In Fisher D. and Lenz H., editors, </editor> <title> Learning from Data: </title> <journal> Artificial Intelligence and Statistics, </journal> <volume> Vol. 5. </volume> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Humans will not need to specify which hypotheses and examples to learn; nor will it be necessary to preclassify the items in databases as positive or negative. Furthermore, just like the latest developments in this field (see for example, <ref> [11] </ref>), our patterns have estimated statistical significance for reflecting the characteristics of the data (such as exceptions and noise); and our mechanism has built-in connections to real databases and can accept human guidance interactively during the discovery process. This research has also revealed several important directions for future research.
Reference: [12] <author> K. Kaufman, Michalski R., and Kerschberg L. </author> <title> Mining for knowledge in databases: Goals and general description of the inlen system. </title> <booktitle> In Proceedings of the 1991 AAAI Workshop on Knowledge Discovery in Databases, </booktitle> <pages> pages 35-51. </pages> <publisher> AAAI Press, </publisher> <year> 1991. </year>
Reference-contexts: Many existing systems indeed contain some or all of these components. For example, systems such as INLEN <ref> [12] </ref> and IMACS [21] concentrate on inductive learning methods and the use of human knowledge. Systems such as KDW [7], RECON [4], DBMiner [8] connect tightly with databases and provide a set of inductive and deductive tools for humans to choose from.
Reference: [13] <author> B. Kero, L. Russell, S. Tsur, and W.M. Shen. </author> <title> An overview of data mining technologies. In DOOD95 Workshop on the Integration of Knowlege Discovery with Deductive and Object Oriented Databases, </title> <address> Singapore, </address> <year> 1995. </year>
Reference-contexts: The system will then instantiate the metapattern to a set of appropriate database queries, prepare the data sets based on the query results, and invoke the necessary analysis tools to generate final patterns that satisfy the format and content of the given metapattern. In several existing systems (for example <ref> [6, 13, 25, 26, 27] </ref>), human-generated metapatterns have been used in an interactive discovery loop to integrate inductive machine learning algorithms, statistic analysis tools, and deductive database technologies. <p> knowledge base [23], finding circuit patterns from a telecommunication database [26], building prediction models from a chemical research database [27], constructing fault detection rules from a database that contains sequences of control data for semiconduct chip manufacture [25], discovering association rules in databases [6], and detecting consuming patterns in retail <ref> [13] </ref>. Interested readers are refered to these papers for details. 3 The Metapattern Generator Although metapatterns are powerful tools for data mining, designing the right metapatterns for a given application is not an easy task. If a metapattern is too specific, then it may miss the interesting patterns.
Reference: [14] <author> J.U. Kietz and K. Morik. </author> <title> A polynomial approach to the constructive induction of structural knowledge. </title> <journal> Machine Learning, </journal> <volume> 14(2), </volume> <year> 1994. </year>
Reference-contexts: On one hand, most algorithms that learn relational patterns (see, for example, [18, 20]) require humans to label the data as positive and negative examples for a given target concept. On the other hand, most unsupervised algorithms (see, for example, <ref> [3, 14, 28, 29, 31] </ref>) hardly go beyond learning attribute-based concepts. This paper describes recent progress towards automatic generation of metapatterns in an integrated discovery loop that is both interactive and autonomous. <p> Furthermore, due to the nature of data mining, the domain and semantic knowledge must be incorporated interactively as the discovery loop iterates; they cannot be predetermined at the offset of the application. Although there are existing systems (see for example <ref> [3, 14, 28, 29, 31] </ref>) in the literature that can perform unsupervised learning, most of them are not targeted to learning relation-based patterns directly from databases. <p> MOBAL requires some rules to start with which are not available in a database. Although RDT can learn concepts, it needs pre-labeled examples. LABYRINTH [29] incrementally forms concepts on composite objects, while KLUSTER <ref> [14] </ref> constructively induces structural knowledge on term-subsumption formalisms. Both systems produce concept hierarchy which is a different representation from function-free Horn clauses. Finally, KBG [3] is a knowledge based generalizer in a first order logic representation.
Reference: [15] <author> Wim Van Laer, Luc Dehaspe, and Luc De Raedt. </author> <title> Applications of a logical discovery engine. </title> <booktitle> In Proceedings of 1994 AAAI Workshop on Knowledge Discovery in Databases, </booktitle> <year> 1994. </year>
Reference-contexts: These algorithms represent the efforts to integrate static domain knowledge with induction. The researchers in inductive logical programming have also addressed the problem of learning relation-based patterns. Different from the algorithms described above, these programs (see for example <ref> [2, 15, 18] </ref>) are focused on inventing new predicates from positive and negative training examples. Some of them (for example [17]) also use semantic knowledge as guidance. Our research in this area is focused on discovering relation-based patterns from data that are commonly found in databases.
Reference: [16] <author> Pazzani M. and Kibler D. </author> <title> The utility of knowledge in inductive learning. </title> <journal> Machine Learning, </journal> <volume> 9(1) </volume> <pages> 57-94, </pages> <year> 1991. </year>
Reference-contexts: FOIL [20] is a machine learning algorithm that can induce a set of logical Horn rules for a given concept from a set of positive and negative examples of that concept. Based on this algorithm, many algorithms, for example FOCL <ref> [16] </ref>, have used semantic knowledge to enhance the performance of selecting candidate terms for building definitions. These algorithms represent the efforts to integrate static domain knowledge with induction. The researchers in inductive logical programming have also addressed the problem of learning relation-based patterns.
Reference: [17] <author> R.J. Mooney and M.E. Califf. </author> <title> Induction of first-order decision lists: Results on learning the past tense of english verbs. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 3 </volume> <pages> 1-24, </pages> <year> 1995. </year>
Reference-contexts: The researchers in inductive logical programming have also addressed the problem of learning relation-based patterns. Different from the algorithms described above, these programs (see for example [2, 15, 18]) are focused on inventing new predicates from positive and negative training examples. Some of them (for example <ref> [17] </ref>) also use semantic knowledge as guidance. Our research in this area is focused on discovering relation-based patterns from data that are commonly found in databases. These data have no labels to indicate whether they are positive or negative examples of some concepts, and they unavoidably include errors and noise.
Reference: [18] <author> S. Muggleton and C. Feng. </author> <title> Efficient induction of logic programs. </title> <booktitle> In Proceedings of the 1st Conference on Algorithmic Learning Theory, </booktitle> <address> Tokyo, Japan, 1990. </address> <publisher> Ohmsha. </publisher>
Reference-contexts: The current machine learning technologies do not provide a satisfactory solution for the task because algorithms for learning relational patterns have severe limitations when applied to databases directly. On one hand, most algorithms that learn relational patterns (see, for example, <ref> [18, 20] </ref>) require humans to label the data as positive and negative examples for a given target concept. On the other hand, most unsupervised algorithms (see, for example, [3, 14, 28, 29, 31]) hardly go beyond learning attribute-based concepts. <p> These algorithms represent the efforts to integrate static domain knowledge with induction. The researchers in inductive logical programming have also addressed the problem of learning relation-based patterns. Different from the algorithms described above, these programs (see for example <ref> [2, 15, 18] </ref>) are focused on inventing new predicates from positive and negative training examples. Some of them (for example [17]) also use semantic knowledge as guidance. Our research in this area is focused on discovering relation-based patterns from data that are commonly found in databases.
Reference: [19] <author> Naqvi and D. Tsur. </author> <title> A Logical Language for Data and Knowledge Bases. </title> <editor> W. H. </editor> <publisher> Freeman Company, </publisher> <year> 1989. </year>
Reference-contexts: The deductive part of DataCrystal contains a metapattern instantiator and a deductive database technology called LDL++ <ref> [19, 30] </ref>. The instantiator generates a set of LDL++ rules from a metapattern. These rules are then used by LDL++ to access various types of relational databases. The inductive part of DataCrystal includes a set of inductive data analysis tools that implement the above metapattern actions and a pattern constructor.
Reference: [20] <author> R. J. Quinlan. </author> <title> Learning logical definitions from relations. </title> <journal> Machine Learning, </journal> <volume> 5(3) </volume> <pages> 239-266, </pages> <year> 1990. </year> <month> 23 </month>
Reference-contexts: The current machine learning technologies do not provide a satisfactory solution for the task because algorithms for learning relational patterns have severe limitations when applied to databases directly. On one hand, most algorithms that learn relational patterns (see, for example, <ref> [18, 20] </ref>) require humans to label the data as positive and negative examples for a given target concept. On the other hand, most unsupervised algorithms (see, for example, [3, 14, 28, 29, 31]) hardly go beyond learning attribute-based concepts. <p> FOIL <ref> [20] </ref> is a machine learning algorithm that can induce a set of logical Horn rules for a given concept from a set of positive and negative examples of that concept. <p> this section, we demonstrate this capability of the automated discovery loop by showing that some of the well-known examples in the relational concept learning literature can be learned without supervision. 8.1 A Small Network Example The first example is a small network example used by Quinlan in his FOIL system <ref> [20] </ref>. Using this example, Quinlan has shown that given a concept "canReach", and its positive and negative examples, FOIL can learn recursive definition for the concept.
Reference: [21] <author> Brachman R., Selfridge P., Terveen L., Altman B., Halper F., Kirk T., Lazar T., McGuiness D., Resnick L., and Borgida A. </author> <title> Integrated support for data archaelogy. </title> <journal> International Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 2(2) </volume> <pages> 159-185, </pages> <year> 1993. </year>
Reference-contexts: Many existing systems indeed contain some or all of these components. For example, systems such as INLEN [12] and IMACS <ref> [21] </ref> concentrate on inductive learning methods and the use of human knowledge. Systems such as KDW [7], RECON [4], DBMiner [8] connect tightly with databases and provide a set of inductive and deductive tools for humans to choose from.
Reference: [22] <author> Brachman R. and Anand T. </author> <title> The process of knowledge discovery in databases: A first sketch. </title> <booktitle> In Proceedings of AAAI Workshop on Knowledge Discovery in Databases, </booktitle> <year> 1994. </year>
Reference-contexts: 1 Introduction It has been commonly recognized that integration is an essential aspect of building effective data mining systems <ref> [22] </ref>. However, the existing approaches for integration are still quite primitive. A system may provide a collection of data mining techniques for humans to pick and choose, yet offer little assistance in important activities such as creating hypotheses, preparing relevant data sets, and selecting appropriate analysis tools. <p> represent recursive concepts, its examples need pre-grouped from database tables. 2.2 Integrated Knowledge Discovery Systems It has been commonly recognized that the integration of different data mining techniques, such as induction, deduction, and human guidance, is a necessary and crucial step in building an effective discovery system (see for example <ref> [22] </ref>). Many existing systems indeed contain some or all of these components. For example, systems such as INLEN [12] and IMACS [21] concentrate on inductive learning methods and the use of human knowledge.
Reference: [23] <author> W.M. Shen. </author> <title> Discovering regularities from knowledge bases. </title> <journal> International Journal of Intelligent Systems, </journal> <volume> 7(7) </volume> <pages> 623-636, </pages> <year> 1992. </year>
Reference-contexts: All these dependencies must be supported by a common representation so that sharing knowledge, hypotheses, and tasks will be possible. In order to exploit these interdependencies, new technologies have been developed to link induction, deduction, and human guidance via a notion called metapatterns (also known as metaqueries) <ref> [23, 26, 27] </ref>. <p> Currently, the discovery loop in DataCrystal is only human-directed; it takes metapatterns directly from human experts. The metapattern-based, human-directed discovery loop has already been successfully applied to several real-world applications. These include discovering regularities in a large, common-sense knowledge base <ref> [23] </ref>, finding circuit patterns from a telecommunication database [26], building prediction models from a chemical research database [27], constructing fault detection rules from a database that contains sequences of control data for semiconduct chip manufacture [25], discovering association rules in databases [6], and detecting consuming patterns in retail [13]. <p> Among all the general metapatterns, the transitivity metapattern (see MP-1 in Section 3.1) is the most interesting. In essence, it subsumes many other types of metapatterns, such as implication, inheritance, transfers through, and functional dependency (see <ref> [23] </ref> for details). In this section, we describe an algorithm to generate the set of all possible transitivity metapatterns for a given database. We believe that similar algorithms can be designed to generate other types of general metapatterns such as MP-2 or MP-3 in Section 3.1.
Reference: [24] <author> W.M. Shen. </author> <title> Autonomous Learning from the Environment. </title> <editor> W. H. </editor> <publisher> Freeman, Computer Science Press, </publisher> <year> 1994. </year>
Reference-contexts: These rules are then used by LDL++ to access various types of relational databases. The inductive part of DataCrystal includes a set of inductive data analysis tools that implement the above metapattern actions and a pattern constructor. At present, the action classify is a high-performance incremental algorithm called CDL2 <ref> [24] </ref> for learning decision lists from data. The action cluster is a Bayesian-based Cobweb clustering algorithm [5, 27].
Reference: [25] <author> W.M. Shen, B. Leng, and A. Chatterjee. </author> <title> Applying the metaquery framework to time sequence analysis. </title> <type> Technical report, </type> <institution> USC-ISI-95-117, </institution> <year> 1995. </year>
Reference-contexts: The system will then instantiate the metapattern to a set of appropriate database queries, prepare the data sets based on the query results, and invoke the necessary analysis tools to generate final patterns that satisfy the format and content of the given metapattern. In several existing systems (for example <ref> [6, 13, 25, 26, 27] </ref>), human-generated metapatterns have been used in an interactive discovery loop to integrate inductive machine learning algorithms, statistic analysis tools, and deductive database technologies. <p> The result of executing a metapattern is a set of patterns whose left-hand sides are instantiated forms of the left-hand side of the metapattern, and whose right-hand sides are the results of the corresponding metapattern action. As reported in <ref> [25, 26, 27] </ref>, the supported actions for metapatterns are as follows: * ComputeStrength (R; [X; :::; Z]), where R is a predicate variable and [X; :::; Z] is a tuple of object variables. <p> These include discovering regularities in a large, common-sense knowledge base [23], finding circuit patterns from a telecommunication database [26], building prediction models from a chemical research database [27], constructing fault detection rules from a database that contains sequences of control data for semiconduct chip manufacture <ref> [25] </ref>, discovering association rules in databases [6], and detecting consuming patterns in retail [13]. Interested readers are refered to these papers for details. 3 The Metapattern Generator Although metapatterns are powerful tools for data mining, designing the right metapatterns for a given application is not an easy task.
Reference: [26] <author> W.M. Shen, K. Ong, B. Mitbander, and C. Zaniolo. </author> <title> Using metaqueries to integrate and inductive learning and deductive database technology. </title> <booktitle> In Proceedings of AAAI Workshop on Knowledge Discovery in Databases. </booktitle> <publisher> AAAI Press, </publisher> <year> 1994. </year>
Reference-contexts: The system will then instantiate the metapattern to a set of appropriate database queries, prepare the data sets based on the query results, and invoke the necessary analysis tools to generate final patterns that satisfy the format and content of the given metapattern. In several existing systems (for example <ref> [6, 13, 25, 26, 27] </ref>), human-generated metapatterns have been used in an interactive discovery loop to integrate inductive machine learning algorithms, statistic analysis tools, and deductive database technologies. <p> All these dependencies must be supported by a common representation so that sharing knowledge, hypotheses, and tasks will be possible. In order to exploit these interdependencies, new technologies have been developed to link induction, deduction, and human guidance via a notion called metapatterns (also known as metaqueries) <ref> [23, 26, 27] </ref>. <p> invoking inductive actions (such as constructing relational 4 patterns, supervised classification, unsupervised clustering, regression, and visualization), for instructing the construction of discovered patterns, and for accepting human guidance as part of the iterative discovery loop. 2.3 Metapatterns and the Human-Directed Discovery Loop The notion of a metapattern is proposed in <ref> [26, 27] </ref> as a template or a second-order expression in a language L that describes a type of pattern to be discovered. <p> The result of executing a metapattern is a set of patterns whose left-hand sides are instantiated forms of the left-hand side of the metapattern, and whose right-hand sides are the results of the corresponding metapattern action. As reported in <ref> [25, 26, 27] </ref>, the supported actions for metapatterns are as follows: * ComputeStrength (R; [X; :::; Z]), where R is a predicate variable and [X; :::; Z] is a tuple of object variables. <p> They will also serve as the evolutionary basis for the development of more fruitful metapatterns. 6 Metapatterns and the human-directed discovery loop are currently implemented in a system called Dat--aCrystal, described in <ref> [26, 27] </ref>. The deductive part of DataCrystal contains a metapattern instantiator and a deductive database technology called LDL++ [19, 30]. The instantiator generates a set of LDL++ rules from a metapattern. These rules are then used by LDL++ to access various types of relational databases. <p> Currently, the discovery loop in DataCrystal is only human-directed; it takes metapatterns directly from human experts. The metapattern-based, human-directed discovery loop has already been successfully applied to several real-world applications. These include discovering regularities in a large, common-sense knowledge base [23], finding circuit patterns from a telecommunication database <ref> [26] </ref>, building prediction models from a chemical research database [27], constructing fault detection rules from a database that contains sequences of control data for semiconduct chip manufacture [25], discovering association rules in databases [6], and detecting consuming patterns in retail [13].
Reference: [27] <author> W.M. Shen, K. Ong, B. Mitbander, and C. Zaniolo. </author> <title> Metaqueries for data mining. In Advances in Knowledge Discovery and Data Mining, chapter 15. </title> <publisher> MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: The system will then instantiate the metapattern to a set of appropriate database queries, prepare the data sets based on the query results, and invoke the necessary analysis tools to generate final patterns that satisfy the format and content of the given metapattern. In several existing systems (for example <ref> [6, 13, 25, 26, 27] </ref>), human-generated metapatterns have been used in an interactive discovery loop to integrate inductive machine learning algorithms, statistic analysis tools, and deductive database technologies. <p> All these dependencies must be supported by a common representation so that sharing knowledge, hypotheses, and tasks will be possible. In order to exploit these interdependencies, new technologies have been developed to link induction, deduction, and human guidance via a notion called metapatterns (also known as metaqueries) <ref> [23, 26, 27] </ref>. <p> invoking inductive actions (such as constructing relational 4 patterns, supervised classification, unsupervised clustering, regression, and visualization), for instructing the construction of discovered patterns, and for accepting human guidance as part of the iterative discovery loop. 2.3 Metapatterns and the Human-Directed Discovery Loop The notion of a metapattern is proposed in <ref> [26, 27] </ref> as a template or a second-order expression in a language L that describes a type of pattern to be discovered. <p> The result of executing a metapattern is a set of patterns whose left-hand sides are instantiated forms of the left-hand side of the metapattern, and whose right-hand sides are the results of the corresponding metapattern action. As reported in <ref> [25, 26, 27] </ref>, the supported actions for metapatterns are as follows: * ComputeStrength (R; [X; :::; Z]), where R is a predicate variable and [X; :::; Z] is a tuple of object variables. <p> They will also serve as the evolutionary basis for the development of more fruitful metapatterns. 6 Metapatterns and the human-directed discovery loop are currently implemented in a system called Dat--aCrystal, described in <ref> [26, 27] </ref>. The deductive part of DataCrystal contains a metapattern instantiator and a deductive database technology called LDL++ [19, 30]. The instantiator generates a set of LDL++ rules from a metapattern. These rules are then used by LDL++ to access various types of relational databases. <p> At present, the action classify is a high-performance incremental algorithm called CDL2 [24] for learning decision lists from data. The action cluster is a Bayesian-based Cobweb clustering algorithm <ref> [5, 27] </ref>. The action ComputeStrength is an LDL++ procedure, the Plot action is a powerful GnuPlot tool, and the regression action is a standard polynomial interpolation method augmented with a stopping criterion based on the priciple of Minimal Descrition Length (MDL). <p> The metapattern-based, human-directed discovery loop has already been successfully applied to several real-world applications. These include discovering regularities in a large, common-sense knowledge base [23], finding circuit patterns from a telecommunication database [26], building prediction models from a chemical research database <ref> [27] </ref>, constructing fault detection rules from a database that contains sequences of control data for semiconduct chip manufacture [25], discovering association rules in databases [6], and detecting consuming patterns in retail [13].
Reference: [28] <author> R. Stepp and R.S. Michalski. </author> <title> Inventing goal-oriented classifications of structured objects. </title> <booktitle> In Machine Learning: An Artificial Intelligence Approach, </booktitle> <volume> vol. II, </volume> <pages> pages 471-498. </pages> <publisher> Tioga, </publisher> <year> 1986. </year>
Reference-contexts: On one hand, most algorithms that learn relational patterns (see, for example, [18, 20]) require humans to label the data as positive and negative examples for a given target concept. On the other hand, most unsupervised algorithms (see, for example, <ref> [3, 14, 28, 29, 31] </ref>) hardly go beyond learning attribute-based concepts. This paper describes recent progress towards automatic generation of metapatterns in an integrated discovery loop that is both interactive and autonomous. <p> Furthermore, due to the nature of data mining, the domain and semantic knowledge must be incorporated interactively as the discovery loop iterates; they cannot be predetermined at the offset of the application. Although there are existing systems (see for example <ref> [3, 14, 28, 29, 31] </ref>) in the literature that can perform unsupervised learning, most of them are not targeted to learning relation-based patterns directly from databases. <p> These systems differ from ours in several aspects, including the goal and context of learning, ways of learning (incremental or constructive), and the form of the final concepts. CLUSTER/S <ref> [28] </ref> performs goal-oriented classification on structured objects by using two methods. The first is concept formation by repeated discrimination which requires both positive and negative examples. The second is concept formation by finding classifying attributes.
Reference: [29] <author> K. Thompson and P. Langley. </author> <title> Incremental concept formation with composite objects. </title> <booktitle> In Proceedings of the 6th International Workshop on Machine Learning, </booktitle> <pages> pages 373-374. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1989. </year>
Reference-contexts: On one hand, most algorithms that learn relational patterns (see, for example, [18, 20]) require humans to label the data as positive and negative examples for a given target concept. On the other hand, most unsupervised algorithms (see, for example, <ref> [3, 14, 28, 29, 31] </ref>) hardly go beyond learning attribute-based concepts. This paper describes recent progress towards automatic generation of metapatterns in an integrated discovery loop that is both interactive and autonomous. <p> Furthermore, due to the nature of data mining, the domain and semantic knowledge must be incorporated interactively as the discovery loop iterates; they cannot be predetermined at the offset of the application. Although there are existing systems (see for example <ref> [3, 14, 28, 29, 31] </ref>) in the literature that can perform unsupervised learning, most of them are not targeted to learning relation-based patterns directly from databases. <p> These examples are then passed to its concept learning tool (CLT) which uses a model-driven, most-general learner (RDT) to induce the concept definition. MOBAL requires some rules to start with which are not available in a database. Although RDT can learn concepts, it needs pre-labeled examples. LABYRINTH <ref> [29] </ref> incrementally forms concepts on composite objects, while KLUSTER [14] constructively induces structural knowledge on term-subsumption formalisms. Both systems produce concept hierarchy which is a different representation from function-free Horn clauses. Finally, KBG [3] is a knowledge based generalizer in a first order logic representation.
Reference: [30] <author> S. Tsur, N. Arni, and K. Ong. </author> <title> The ldl++ user's guide. </title> <type> Technical report, MCC Technical Report Carnot-012-93(P), </type> <month> January </month> <year> 1993. </year>
Reference-contexts: The deductive part of DataCrystal contains a metapattern instantiator and a deductive database technology called LDL++ <ref> [19, 30] </ref>. The instantiator generates a set of LDL++ rules from a metapattern. These rules are then used by LDL++ to access various types of relational databases. The inductive part of DataCrystal includes a set of inductive data analysis tools that implement the above metapattern actions and a pattern constructor.
Reference: [31] <author> S. Wrobe. </author> <title> Concept formation during interactive theory revision. </title> <journal> Machine Learning, </journal> <volume> 14(2) </volume> <pages> 169-192, </pages> <year> 1994. </year>
Reference-contexts: On one hand, most algorithms that learn relational patterns (see, for example, [18, 20]) require humans to label the data as positive and negative examples for a given target concept. On the other hand, most unsupervised algorithms (see, for example, <ref> [3, 14, 28, 29, 31] </ref>) hardly go beyond learning attribute-based concepts. This paper describes recent progress towards automatic generation of metapatterns in an integrated discovery loop that is both interactive and autonomous. <p> Furthermore, due to the nature of data mining, the domain and semantic knowledge must be incorporated interactively as the discovery loop iterates; they cannot be predetermined at the offset of the application. Although there are existing systems (see for example <ref> [3, 14, 28, 29, 31] </ref>) in the literature that can perform unsupervised learning, most of them are not targeted to learning relation-based patterns directly from databases. <p> The second is concept formation by finding classifying attributes. This method attempts to find one or more classifying attributes whose value sets can be split into ranges that define individual classes. It is not clear how this method could learn the relationships among the given attributes. 3 MOBAL <ref> [31] </ref> regards concept formation as a process of forming extensional aggregates of objects and then characterizing these aggregates with an intentional definition. Given a knowledge base of facts and rules that may be overly general, MOBAL uses its knowledge revision tool (KRT) to correct those overly general rules.
References-found: 31

