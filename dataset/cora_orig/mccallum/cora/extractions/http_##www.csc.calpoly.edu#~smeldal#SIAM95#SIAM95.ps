URL: http://www.csc.calpoly.edu/~smeldal/SIAM95/SIAM95.ps
Refering-URL: http://www.csc.calpoly.edu/~smeldal/tidbits.html
Root-URL: http://www.csc.calpoly.edu
Title: Singular and Plural Nondeterministic Parameters  
Author: Michal Walicki Sigurd Meldal 
Keyword: algebraic specification, many-sorted algebra, nondeterminism, sequent calculus.  
Note: AMS classifications: 68Q65, 68Q60, 68Q10, 68Q55, 03B60, 08A70.  
Abstract: The article defines algebraic semantics of singular (call-time-choice) and plural (run-time-choice) nondeterministic parameter passing and presents a specification language in which operations with both kinds of parameters simultaneously can be defined. Sound and complete calculi for both semantics are introduced. We study the relations between the two semantics and point out that axioms for operations with plural arguments may be considered as axiom schemata for operations with singular arguments. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bergstra, J.A., Klop, J.W., </author> <title> Algebra of communicating processes, </title> <booktitle> Proceedings of CWI Symposium on Mathematics and CS, </booktitle> <volume> 89 - 138, </volume> <month> Oct. 6-7 </month> <year> 1986. </year>
Reference-contexts: 1. Introduction The notion of nondeterminismarises naturally in describing concurrent systems. Various approaches to the theory and specification of such systems, for instance, CCS [16], CSP [9], process algebras <ref> [1] </ref>, event structures [26], include the phenomenon of nondeterminism.
Reference: [2] <author> Clinger, W., </author> <title> Nondeterministic call by need is neither lazy nor by name, </title> <booktitle> Proc. ACM Symp. LISP and Functional Programming, </booktitle> <pages> 226-234, </pages> <year> 1982. </year>
Reference-contexts: Singular and Plural Nondeterministic Parameters 2 Following [20], we call the nondeterministic counterparts of these two notions singular (call-by-value) and plural (call-by-name) parameter passing. Other names applied to this, or closely related distinction, are call-time-choice vs. runtime-choice <ref> [2, 8] </ref>, or inside-out (IO) vs . outside-in (OI) which reflect the substitution order corresponding to the respective semantics [5, 6]. In the context where one allows nondeterministic parameters the difference between the two semantics becomes quite apparent even without looking at their termination properties. <p> variables, on the other hand, will refer to sets and not individuals, and so the axiom 599. x * a0t1 a x * =0, x * =1 would have a completely different meaning.) The singular semantics is the most common in the literature on algebraic semantics of nondeterministic specification languages <ref> [2, 8, 11] </ref>, in spite of the fact that it prohibits unrestricted substitution of terms for variables. A n y substitution must now be guarded by the check that the substituted term yields a unique value, i.e., is deterministic.
Reference: [3] <author> Dijkstra, </author> <title> E.W., A Discipline of Programming, </title> <publisher> Prentice-Hall, </publisher> <year> 1976. </year>
Reference-contexts: But nondeterminism is also a natural concept in describing sequential programs, either as a means of indicating a dont care attitude as to which among a number of computational paths will actually be utilized in a particular computation (e.g., <ref> [3] </ref>) or as a means of increasing the level of abstraction [14,25]. The present work proceeds from the theory of algebraic specifications [4, 27] and generalizes it so that it can be applied to describing nondeterministic operations.
Reference: [4] <editor> Ehrig, H., Mahr, B., </editor> <booktitle> Fundamentals of Algebraic Specification, </booktitle> <volume> vol. 1, </volume> <publisher> Springer, </publisher> <year> 1985. </year> <title> Singular and Plural Nondeterministic Parameters 18 </title>
Reference-contexts: The present work proceeds from the theory of algebraic specifications <ref> [4, 27] </ref> and generalizes it so that it can be applied to describing nondeterministic operations. In deterministic programming the distinction between call-by-value and call-by-name semantics of parameter passing is well known. The former corresponds to the situation where the actual parameters to function calls are evaluated and passed as values.
Reference: [5] <author> Engelfriet, J., Schmidt, </author> <title> E.M., IO and OI. 1, </title> <journal> Journal of Computer and System Sciences, </journal> <volume> vol. 15, </volume> <pages> 328-353, </pages> <year> 1977. </year>
Reference-contexts: Other names applied to this, or closely related distinction, are call-time-choice vs. runtime-choice [2, 8], or inside-out (IO) vs . outside-in (OI) which reflect the substitution order corresponding to the respective semantics <ref> [5, 6] </ref>. In the context where one allows nondeterministic parameters the difference between the two semantics becomes quite apparent even without looking at their termination properties. <p> Nevertheless, the plural semanticshas also received some attention. In the denotational tradition most approaches considered both possibilities [18, 19, 20, 22]. Engelfriet and Schmidt gave a detailed study of both in their language, IO and OI semantics based on tree languages <ref> [5] </ref>, and continuous algebras of relations and power sets [6]. The unified algebras of Mosses and the rewriting logic of Meseguer [15] represent other algebraic approaches distinguishing these aspects. We will define the semantics for specifications where operations may have both singular and plural arguments.
Reference: [6] <author> Engelfriet, J., Schmidt, </author> <title> E.M., IO and OI. 2, </title> <journal> Journal of Computer and System Sciences, </journal> <volume> vol. 16, </volume> <pages> 67-99, </pages> <year> 1978. </year>
Reference-contexts: Other names applied to this, or closely related distinction, are call-time-choice vs. runtime-choice [2, 8], or inside-out (IO) vs . outside-in (OI) which reflect the substitution order corresponding to the respective semantics <ref> [5, 6] </ref>. In the context where one allows nondeterministic parameters the difference between the two semantics becomes quite apparent even without looking at their termination properties. <p> In the denotational tradition most approaches considered both possibilities [18, 19, 20, 22]. Engelfriet and Schmidt gave a detailed study of both in their language, IO and OI semantics based on tree languages [5], and continuous algebras of relations and power sets <ref> [6] </ref>. The unified algebras of Mosses and the rewriting logic of Meseguer [15] represent other algebraic approaches distinguishing these aspects. We will define the semantics for specifications where operations may have both singular and plural arguments.
Reference: [7] <author> Goguen, J.A., Meseguer, J., </author> <title> Completeness of Many-Sorted Equational Logic, </title> <journal> SIGPLAN Notices, </journal> <volume> vol. 16, no. 7, </volume> <year> 1981. </year>
Reference-contexts: A sequent with exactly one formula in the consequent (m=1) is called a Horn formula, and a Horn formula with empty antecedent (n=0) is a simple formula (or a simple sequent). 1 This restriction is motivated by the fact (pointed out in <ref> [7] </ref>) that admitting empty carriers requires additional mechanisms (explicit quantification) in order to obtain sound logic. We conjecture that similar solution can be applied in our case. Singular and Plural Nondeterministic Parameters 4 All variables occurring in a sequent are implicitly universally quantified over the whole sequent.
Reference: [8] <author> Hennessy, M.C.B., </author> <title> The semantics of call-by-value and call-by-name in a nondeterministic environment, </title> <journal> SIAM J. Comput., </journal> <volume> vol. 9, no. 1, </volume> <year> 1980. </year>
Reference-contexts: Singular and Plural Nondeterministic Parameters 2 Following [20], we call the nondeterministic counterparts of these two notions singular (call-by-value) and plural (call-by-name) parameter passing. Other names applied to this, or closely related distinction, are call-time-choice vs. runtime-choice <ref> [2, 8] </ref>, or inside-out (IO) vs . outside-in (OI) which reflect the substitution order corresponding to the respective semantics [5, 6]. In the context where one allows nondeterministic parameters the difference between the two semantics becomes quite apparent even without looking at their termination properties. <p> variables, on the other hand, will refer to sets and not individuals, and so the axiom 599. x * a0t1 a x * =0, x * =1 would have a completely different meaning.) The singular semantics is the most common in the literature on algebraic semantics of nondeterministic specification languages <ref> [2, 8, 11] </ref>, in spite of the fact that it prohibits unrestricted substitution of terms for variables. A n y substitution must now be guarded by the check that the substituted term yields a unique value, i.e., is deterministic.
Reference: [9] <author> Hoare, </author> <title> C.A.R., Communicating Sequential Processes, </title> <publisher> Prentice-Hall International Ltd., </publisher> <year> 1985. </year>
Reference-contexts: 1. Introduction The notion of nondeterminismarises naturally in describing concurrent systems. Various approaches to the theory and specification of such systems, for instance, CCS [16], CSP <ref> [9] </ref>, process algebras [1], event structures [26], include the phenomenon of nondeterminism.
Reference: [10] <author> Humann, H., </author> <title> Nondeterministic Algebraic Specifications, </title> <type> Ph.D. thesis, </type> <institution> Fakultt fr Mathematik und Informatik, Universitt Passau, </institution> <year> 1990. </year>
Reference-contexts: A note on the intuitive interpretation Multialgebraic semantics <ref> [10, 13] </ref> interprets specifications in some form of power structures where the (nondeterministic) operations correspond to set-valued functions. This means that a (ground) term is interpreted as a set of possibilities it denotes the set of possible results of the corresponding operation.
Reference: [11] <author> Humann, H., </author> <title> Nondeterminism in Algebraic Specifications and Algebraic Programs, </title> <address> Birkhuser, </address> <year> 1993. </year>
Reference-contexts: variables, on the other hand, will refer to sets and not individuals, and so the axiom 599. x * a0t1 a x * =0, x * =1 would have a completely different meaning.) The singular semantics is the most common in the literature on algebraic semantics of nondeterministic specification languages <ref> [2, 8, 11] </ref>, in spite of the fact that it prohibits unrestricted substitution of terms for variables. A n y substitution must now be guarded by the check that the substituted term yields a unique value, i.e., is deterministic. <p> MW ( is not an initial (-structure since it is deterministic and there can exist several homomorphisms from it to a given multistructure. We do not focus on the aspect of initiality and merely register the useful fact from <ref> [11] </ref>: Lemma 4.3.
Reference: [12] <author> Kaplan, S., </author> <title> Rewriting with a Nondeterministic Choice Operator, </title> <journal> Theoretical Computer Science, </journal> <volume> vol. 56, </volume> <pages> 37-57, </pages> <year> 1988. </year>
Reference-contexts: Every two syntactic occurrences of a term t will refer to possibly distinct applications of t. For nondeterministic terms this means that they may denote two distinct values. Typically, equality is interpreted in a multialgebra as set equality <ref> [13, 23, 12] </ref>. For instance, the formula a t=s means that the sets corresponding to all possible results of the operations t and s are equal. This gives a model which is mathematically plausible, but which does not correspond to our operational intuition.
Reference: [13] <author> Kapur, D., </author> <title> Towards a theory of abstract data types, </title> <type> Ph.D. thesis, </type> <institution> Laboratory for CS, MIT, </institution> <year> 1980. </year>
Reference-contexts: A note on the intuitive interpretation Multialgebraic semantics <ref> [10, 13] </ref> interprets specifications in some form of power structures where the (nondeterministic) operations correspond to set-valued functions. This means that a (ground) term is interpreted as a set of possibilities it denotes the set of possible results of the corresponding operation. <p> Every two syntactic occurrences of a term t will refer to possibly distinct applications of t. For nondeterministic terms this means that they may denote two distinct values. Typically, equality is interpreted in a multialgebra as set equality <ref> [13, 23, 12] </ref>. For instance, the formula a t=s means that the sets corresponding to all possible results of the operations t and s are equal. This gives a model which is mathematically plausible, but which does not correspond to our operational intuition.
Reference: [14] <author> Meldal, S., </author> <title> An Abstract Axiomatization of Pointer Types, </title> <booktitle> in Proceedings of The 22nd Annual Hawaii International Conference on System Sciences, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1989. </year>
Reference: [15] <author> Meseguer, J., </author> <title> Conditional rewriting logic as a unified model of concurrency, </title> <journal> TCS, </journal> <volume> no. 96, </volume> <pages> 73-155, </pages> <year> 1992. </year>
Reference-contexts: Engelfriet and Schmidt gave a detailed study of both in their language, IO and OI semantics based on tree languages [5], and continuous algebras of relations and power sets [6]. The unified algebras of Mosses and the rewriting logic of Meseguer <ref> [15] </ref> represent other algebraic approaches distinguishing these aspects. We will define the semantics for specifications where operations may have both singular and plural arguments. The next subsection gives the necessary extension of the calculus NEQ to handle this generalized situation. 5.1.
Reference: [16] <author> Milner, R., </author> <title> Calculi for Communicating Systems, </title> <publisher> LNCS vol. 92, Springer, </publisher> <year> 1980. </year>
Reference-contexts: 1. Introduction The notion of nondeterminismarises naturally in describing concurrent systems. Various approaches to the theory and specification of such systems, for instance, CCS <ref> [16] </ref>, CSP [9], process algebras [1], event structures [26], include the phenomenon of nondeterminism.
Reference: [17] <author> Mosses, </author> <title> P.D., Unified Algebras and Institutions, </title> <booktitle> in Proceedings of LICS89, Fourth Annual Symposium on Logic in Computer Science, </booktitle> <year> 1989. </year>
Reference-contexts: On the other hand, plural variables allow us to specify the upper bound of nondeterministic choice without using disjunction. The choice operation can be specified as the join which under the partial ordering interpreted as set inclusion will correspond to set union (cf. <ref> [17] </ref>).
Reference: [18] <author> Ore, C.E.S., </author> <title> Introducing Girard's quantitative domains; the quantitative domains as a model for nondeterminism, </title> <type> Ph.D. thesis, </type> <institution> Dept. of Informatics, University of Oslo, </institution> <year> 1988. </year>
Reference-contexts: The plural case: semantics and calculus The singular semantics for passing nondeterminate arguments is the most common notion to be found in the literature. Nevertheless, the plural semanticshas also received some attention. In the denotational tradition most approaches considered both possibilities <ref> [18, 19, 20, 22] </ref>. Engelfriet and Schmidt gave a detailed study of both in their language, IO and OI semantics based on tree languages [5], and continuous algebras of relations and power sets [6].
Reference: [19] <author> Plotkin, G., </author> <title> Domains, </title> <booktitle> 1983, lecture notes, </booktitle> <institution> Dept. of Computer Science, University of Edinburgh. </institution>
Reference-contexts: The plural case: semantics and calculus The singular semantics for passing nondeterminate arguments is the most common notion to be found in the literature. Nevertheless, the plural semanticshas also received some attention. In the denotational tradition most approaches considered both possibilities <ref> [18, 19, 20, 22] </ref>. Engelfriet and Schmidt gave a detailed study of both in their language, IO and OI semantics based on tree languages [5], and continuous algebras of relations and power sets [6].
Reference: [20] <author> Sndergaard, H., Sestoft, P., </author> <title> Non-Determinacy and Its Semantics, </title> <type> Tech. Rep. 86/12, </type> <institution> DatalogiskInstitut, Kbenhavns Universitet, </institution> <month> January </month> <year> 1987. </year>
Reference-contexts: Singular and Plural Nondeterministic Parameters 2 Following <ref> [20] </ref>, we call the nondeterministic counterparts of these two notions singular (call-by-value) and plural (call-by-name) parameter passing. <p> The plural case: semantics and calculus The singular semantics for passing nondeterminate arguments is the most common notion to be found in the literature. Nevertheless, the plural semanticshas also received some attention. In the denotational tradition most approaches considered both possibilities <ref> [18, 19, 20, 22] </ref>. Engelfriet and Schmidt gave a detailed study of both in their language, IO and OI semantics based on tree languages [5], and continuous algebras of relations and power sets [6].
Reference: [21] <author> Schwartz, </author> <title> R.L., An axiomatic treatment of ALGOL 68 routines, </title> <booktitle> in Proceedings of Sixth Colloquium on Automata, Languages and Programming, </booktitle> <volume> vol. 71, </volume> <publisher> Springer, </publisher> <year> 1979. </year>
Reference-contexts: The former corresponds to the situation where the actual parameters to function calls are evaluated and passed as values. The latter allows parameters which are function expressions, passed by a kind of Algol copy rule <ref> [21] </ref>, and which are evaluated whenever a need for their value arises. Thus call-by-name will terminate in many cases when the value of a function may be determined without looking at (some of) the actual parameters, i.e., even if these parameters are undefined.
Reference: [22] <author> Smyth, </author> <title> M.B., Power domains, </title> <journal> J. of Computer and System Sciences, </journal> <volume> vol. 16, </volume> <year> 1978. </year>
Reference-contexts: The plural case: semantics and calculus The singular semantics for passing nondeterminate arguments is the most common notion to be found in the literature. Nevertheless, the plural semanticshas also received some attention. In the denotational tradition most approaches considered both possibilities <ref> [18, 19, 20, 22] </ref>. Engelfriet and Schmidt gave a detailed study of both in their language, IO and OI semantics based on tree languages [5], and continuous algebras of relations and power sets [6].
Reference: [23] <author> Subrahmanyam, </author> <title> P.A., Nondeterminism in Abstract Data Types, </title> <booktitle> in Automata, Languages and Programming, LNCS, </booktitle> <volume> vol. 115, </volume> <publisher> Springer, </publisher> <year> 1981. </year>
Reference-contexts: Every two syntactic occurrences of a term t will refer to possibly distinct applications of t. For nondeterministic terms this means that they may denote two distinct values. Typically, equality is interpreted in a multialgebra as set equality <ref> [13, 23, 12] </ref>. For instance, the formula a t=s means that the sets corresponding to all possible results of the operations t and s are equal. This gives a model which is mathematically plausible, but which does not correspond to our operational intuition.
Reference: [24] <author> Walicki, M., </author> <title> Algebraic Specifications of Nondeterminism, </title> <type> Ph.D. thesis, </type> <institution> University of Bergen, Department of Informatics, </institution> <year> 1993. </year>
Reference-contexts: We also highlight the increased complexity of the power algebra semantics reflecting the problems with intuitive understanding of plural arguments. Proofs of the theorems are merely indicated in this presentation. It reports some of the results from <ref> [24] </ref> where the full proofs and other details can be found. 2. The specification language A specification is a pair ((,P) where the signature ( is a pair (S,F) of sorts S and operation symbols F (with argument and result sorts in S). <p> For a justification of this, as well as other choices we have made here, the reader is referred to <ref> [24] </ref>. 4.2. The calculus for singular semantics In [24] we have introduced the calculus NEQ which is sound and complete with respect to the class MMod (SP). <p> For a justification of this, as well as other choices we have made here, the reader is referred to <ref> [24] </ref>. 4.2. The calculus for singular semantics In [24] we have introduced the calculus NEQ which is sound and complete with respect to the class MMod (SP). <p> When we need to write the sequent p explicitly this notation becomes sometimes awkward, and so we will optionally write it as P CAL . The counterpart of soundness/completeness of the equational calculus is <ref> [24] </ref>: Theorem 4.5. NEQ is sound and complete wrt. MMod (SP): MMod (SP) p iff P ` NEQ p. Proof idea: Soundness is proved by induction on the length of the proof P ` NEQ p. The proof of the completeness part is a standard, albeit rather involved, Henkin-style argument.
Reference: [25] <author> Walicki, M., Meldal, S., Multialgebras, </author> <title> Power Algebras and Complete Calculi of Identities and Inclusions, in Recent Trends in Data Type Specification, </title> <booktitle> LNCS, </booktitle> <volume> vol. 906, </volume> <publisher> Springer, </publisher> <year> 1994. </year>
Reference: [26] <author> Winskel, G., </author> <title> An introduction to event structures, </title> <booktitle> LNCS, </booktitle> <volume> vol. 354, </volume> <publisher> Springer, </publisher> <year> 1988. </year>
Reference-contexts: 1. Introduction The notion of nondeterminismarises naturally in describing concurrent systems. Various approaches to the theory and specification of such systems, for instance, CCS [16], CSP [9], process algebras [1], event structures <ref> [26] </ref>, include the phenomenon of nondeterminism.
Reference: [27] <author> Wirsing, M., </author> <title> Algebraic Specification, </title> <booktitle> in Handbook of Theoretical Computer Science, </booktitle> <volume> vol. </volume> <editor> B, </editor> <publisher> The M I T Press, </publisher> <year> 1990. </year>
Reference-contexts: The present work proceeds from the theory of algebraic specifications <ref> [4, 27] </ref> and generalizes it so that it can be applied to describing nondeterministic operations. In deterministic programming the distinction between call-by-value and call-by-name semantics of parameter passing is well known. The former corresponds to the situation where the actual parameters to function calls are evaluated and passed as values.
References-found: 27

