URL: ftp://ftp.eecs.umich.edu/groups/gasm/montages.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.cs.umich.edu
Email: kutter@tik.ee.ethz.ch)  alfonso@univaq.it)  
Title: Montages Specifications of Realistic Programming Languages  
Author: Philipp W. Kutter Alfonso Pierantonio 
Address: Switzerland  L'Aquila, Italy  
Affiliation: (Eidgenossische Technische Hochschule,  (Universita di  
Abstract: Montages are a new way of describing all aspects of programming languages formally. Such specifications are intelligible for a broad range of people involved in programming language design and use. In order to enhance readability we combine visual and textual elements to yield specifications similar in structure, length, and complexity to those in common language manuals, but with a formal semantics. The formal semantics is based on Gurevich's Abstract State Machines (formerly called Evolving Algebras). Key Words: abstract state machines, language design, Montages, programming languages specifications, visual formalisms, modular specifications Category: F.3.2, D.2.1, D.3.1 
Abstract-found: 1
Intro-found: 1
Reference: [Anl97a] <author> M. Anlauff. </author> <title> GEM a Graphical Editor for Montages, User Manual. </title> <type> ICSI, </type> <institution> Berkeley, </institution> <year> 1997. </year>
Reference-contexts: The details are given in section 3.2. We need also an auxiliary function Up : Node ! Node, which links the descendants to their parents. In our approach we assumed the initial state to contain the parse tree. The GEM Tool <ref> [Anl97a] </ref> is a static structure generator generator, i.e. starting from a Montage specification it generates a parser which creates for each program source the initial state for the ASM associated with the language. 2.2.2 Tree Traversal The static parts of a Montage specification describes the static analysis and semantics by transition
Reference: [Anl97b] <author> M. Anlauff. </author> <title> The Semantics of the Object-Oriented Programming Language Sather. </title> <type> Technical report, </type> <institution> International Computer Science Institute, Berke-ley, </institution> <year> 1997. </year> <note> In preparation. </note>
Reference: [BCD + 87] <author> P. Borra, D. Clement, T. Despeyroux, J. Incerpi, G. Kahn, B. Lang, and V. Pascual. </author> <title> CENTAUR: The System. </title> <type> Technical Report 777, </type> <institution> INRIA, Sophia Antipolis, </institution> <note> 1987. </note> <author> 441Kutter Ph. W., Pierantonio A.: </author> <title> Montages Specifications of Realistic </title> ... 
Reference-contexts: This tool is not an implementation but executes a natural semantics version of the Montage's formal semantics. 5 Related Work We have used Kahn's Natural Semantics [Kah87] for the dynamic semantics of Oberon [Kut96]. Although we succeeded due to the excellent tool support by Centaur <ref> [BCD + 87] </ref>, the result was much longer and more complex then the ASM counterpart given in [Kut97], since one has to carry around all the state information in the case of Natural Semantics.
Reference: [BD96] <author> E. Borger and I. Durdanovic. </author> <title> Correctness of Compiling Occam to Trans--puter Code. </title> <journal> Computer Journal, </journal> <volume> 39(1):52 - 92, </volume> <year> 1996. </year>
Reference-contexts: The restriction of the computation to direct descendent's attributes causes a lack of expressiveness and use of attribute grammars. Moreover, they tend to be very long if applied to realistic languages ([Ode89]). Static analysis has been already modelled by means of ASMs in previous works. In <ref> [BD96] </ref> the static analysis and the dynamic semantics of Occam have been specified. The static analysis is performed while building the parse tree in a top-down fashion.
Reference: [BDR94] <author> E. Borger, I. Durdanovic, and D. Rosenzweig. </author> <title> Occam: Specification and Compiler Correctness. Part I: The Primary Model. </title> <booktitle> In IFIP 13th World Computer Congress, </booktitle> <volume> Volume I: Technology/Foundations, </volume> <pages> pages 489 - 508. </pages> <publisher> Elsevier, </publisher> <address> Amsterdam, </address> <year> 1994. </year>
Reference: [BGM95] <author> E. Borger, U. Glasser, and W. Muller. </author> <title> Formal Definition of an Abstract VHDL'93 Simulator by EA-machines. In Semantics of VHDL, </title> <booktitle> volume 307 of The Kluwer International Series in Engineering and Computer Science. </booktitle> <publisher> Kluwer, </publisher> <year> 1995. </year>
Reference: [BR95] <author> E. Borger and D. Rosenzweig. </author> <title> The WAM Definition and Compiler Correctness, </title> <booktitle> chapter 2, pages 20 - 90. Series in Computer Science and Artificial Intelligence. </booktitle> <publisher> Elsevier Science B.V.North Holland, </publisher> <year> 1995. </year>
Reference: [DCIG93] <author> G. Del Castillo, Durdanovic I., and U. Glasser. </author> <title> An Evolving Algebra Abstract Machine, </title> <booktitle> volume 1092 of LNCS, </booktitle> <pages> pages 191 - 214. </pages> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference: [DGKP97] <author> T. Despeyroux, M. Gaieb, P.W. Kutter, and A. Pierantonio. </author> <title> Natural Semantics of Static Aspects of Montages and Generated Tool Support using Centaur. </title> <type> Technical report, </type> <institution> INRIA Sophia-Antipolis, </institution> <year> 1997. </year> <note> In preparation. </note>
Reference-contexts: From the specification it generates a static structure generator, i.e. a parser able to build the initial states for the ASM defined by the Montage specification. High-quality hyper-textual presentation of the specification can also be generated automatically. Another tool is being realized at INRIA in Sophia-Antipolis <ref> [DGKP97] </ref>. By using the symbolic representation of the specification generated by GEM, it realizes the static part of Montages using Centaur.
Reference: [DiF97] <author> B. DiFranco. </author> <title> Semantica Statica e Dinamica di SQL diretto (ISO 9075) mediante i Montaggi. </title> <type> Master's thesis, </type> <institution> Universita di L'Aquila, </institution> <year> 1997. </year> <note> In preparation (in italian). </note>
Reference: [GH93] <author> Y. Gurevich and J.K. Huggins. </author> <title> The Semantics of the C Programming Language, </title> <booktitle> volume 702 of LNCS, </booktitle> <pages> pages 274 - 308. </pages> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference: [Gur95] <author> Y. Gurevich. </author> <title> Evolving Algebras 1993: Lipari Guide. </title> <editor> In E. Borger, editor, </editor> <title> Specification and Validation Methods. </title> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: Section 2.2.2 describes a declarative tree traversal, which is necessary for the static analysis. In section 2.2.3 the Montage notation is illustrated. In the last section, we define the formal semantics of Montages. We assume the basics of the ASM framework and refer the reader for the definitions in <ref> [Gur95] </ref>. 2.2.1 Tree Representation The generation of a string S by a grammar can be described as usual by means of a derivation tree.
Reference: [Kah87] <author> G. Kahn. </author> <title> Natural Semantics. </title> <booktitle> In Proceedings of the Symp. on Theoretical Aspects of Computer Science, </booktitle> <address> Passau, Germany, </address> <year> 1987. </year>
Reference-contexts: By using the symbolic representation of the specification generated by GEM, it realizes the static part of Montages using Centaur. This tool is not an implementation but executes a natural semantics version of the Montage's formal semantics. 5 Related Work We have used Kahn's Natural Semantics <ref> [Kah87] </ref> for the dynamic semantics of Oberon [Kut96].
Reference: [KH97] <author> P.W. Kutter and J.K. Huggins. </author> <title> Abstraction from Evaluation Order and Sequentiality. </title> <note> in preparation, </note> <year> 1997. </year>
Reference-contexts: Detailed solutions to the problems related with parallelism, e.g. concurrent recursive procedure calls, and a discussion why it is important to abstract from a concrete evaluation order are given in <ref> [KH97] </ref>. 4 Tool Support At the moment, different endeavors are being carried out to provide Montages with an adequate tool support. The GEM Tool 1 has been implemented at ICSI in the Sather project.
Reference: [Knu68] <author> D.E. Knuth. </author> <title> Semantics of Context-Free Languages. </title> <journal> Math. Systems Theory, </journal> <volume> 2(2):127 - 146, </volume> <year> 1968. </year>
Reference-contexts: Natural Semantics and many other settings have the problem of the scattering of the knowledge, i.e. the specification of a construct does not refer to a local piece of formal description, but rather to the whole specification causing a certain combinatorial explosion. The major similarity between attribute grammars <ref> [Knu68] </ref> and Montages is that both have a nice natural structural decomposition that corresponds to the syntactic structures of the language. Attribute grammars decorate a tree with 1 The GEM Tool is available on the world wide web at the location http://www.icsi.berkeley.edu/~maffy/gem 440 Kutter Ph.
Reference: [KP97] <author> P.W. Kutter and A. Pierantonio. </author> <title> The formal specification of oberon. </title> <journal> J.UCS, </journal> <volume> 3(5), </volume> <year> 1997. </year> <note> This volume. </note>
Reference-contexts: Such arrows are called inter-level arrows. Section 3.2 presents a convenient aid to list processing. Both these features enhance expressiveness without compromising the readability and the manageability of the overall specification (see <ref> [KP97] </ref>). In section 3.3, we sketch how parallel and non-deterministic evaluation can be modeled with Montages. 3.1 Inter-level arrows In the previous section, we have seen arrows between nodes and their meaning in terms of ASM. Control and data flow may require more complex arrows than just those relating siblings. <p> Moreover not necessarily the control flow order defined by the NextTask function in (14), must be the same as the static one in (13). Nonetheless, the case-study in <ref> [KP97] </ref> showed that this solution works fine with the most complex cases we had to cope with in the specification of Oberon. 3.2.2 Semantics As mentioned, lists have a graphic counterpart.
Reference: [Kut96] <author> P.W. Kutter. </author> <title> Executable Specification of Oberon Using Natural Semantics. Term Work, ETH Zurich, implementation on the Centaur System [BCD + 87], </title> <year> 1996. </year>
Reference-contexts: This tool is not an implementation but executes a natural semantics version of the Montage's formal semantics. 5 Related Work We have used Kahn's Natural Semantics [Kah87] for the dynamic semantics of Oberon <ref> [Kut96] </ref>. Although we succeeded due to the excellent tool support by Centaur [BCD + 87], the result was much longer and more complex then the ASM counterpart given in [Kut97], since one has to carry around all the state information in the case of Natural Semantics.
Reference: [Kut97] <author> P.W. Kutter. </author> <title> Dynamic Semantics of the Programming Language Oberon. </title> <type> TIK-Report 25, </type> <institution> ETH Zurich, </institution> <year> 1997. </year>
Reference-contexts: Although we succeeded due to the excellent tool support by Centaur [BCD + 87], the result was much longer and more complex then the ASM counterpart given in <ref> [Kut97] </ref>, since one has to carry around all the state information in the case of Natural Semantics.
Reference: [MJ94] <author> L.S. Moss and D.E. Johnson. </author> <title> Grammar Formalisms Viewed As Evolving Algebras. </title> <journal> Linguistics and Philosophy, </journal> <volume> 17 </volume> <pages> 537-560, </pages> <year> 1994. </year>
Reference-contexts: The static analysis is performed while building the parse tree in a top-down fashion. The experience with Montages shows that static semantics can only be checked while traversing the tree in a bottom-up fashion taking advantage of the static analysis of the lower levels. <ref> [MJ94] </ref> gives a characterization of a number of grammar formalisms, including attribute grammars, by means of ASMs building the parse tree. Our work assumes that the parse tree is given in the initial state. Using ASMs for dynamic semantics, the work in [PH94] defines a framework comparable to ours.
Reference: [Ode89] <author> M. Odersky. </author> <title> A New Approach to Formal Language Definition and its Application to Oberon. </title> <type> PhD thesis, </type> <institution> ETH Zurich, </institution> <year> 1989. </year>
Reference-contexts: A derivation tree can be made more compact by putting multiple labels in the case of synonym productions <ref> [Ode89] </ref>, i.e. rules of the form n ::= s 1 js 2 j : : : js m , which give place to nodes with only one child.
Reference: [PH94] <author> A. Poetzsch-Heffter. </author> <title> Developing Efficient Interpreters Based on Formal Language Specifications. </title> <booktitle> In Compiler Construction, volume 786 of Lecture Notes in Computer Science, </booktitle> <pages> pages 233 - 247. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Our work assumes that the parse tree is given in the initial state. Using ASMs for dynamic semantics, the work in <ref> [PH94] </ref> defines a framework comparable to ours. Although it has different aims, namely efficient execution. For the static part, it proposes occurrence algebras which integrate term algebras and context free grammars by providing terms for all nodes of all possible derivation trees.
Reference: [Wal94] <author> C. Wallace. </author> <title> The Semantics of the C++ Programming Language. </title> <editor> In E. Borger, editor, </editor> <booktitle> Specification and Validation Methods, </booktitle> <pages> pages 131 - 164. </pages> <publisher> Oxford University Press, </publisher> <year> 1994. </year> <note> 442 Kutter Ph. </note> <author> W., Pierantonio A.: </author> <title> Montages Specifications of Realistic </title> ...
References-found: 22

