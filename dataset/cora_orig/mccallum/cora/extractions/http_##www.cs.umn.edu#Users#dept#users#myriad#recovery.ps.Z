URL: http://www.cs.umn.edu/Users/dept/users/myriad/recovery.ps.Z
Refering-URL: http://www.cs.umn.edu/Users/dept/users/myriad/
Root-URL: http://www.cs.umn.edu
Title: Transaction Recovery in Federated Database Systems  
Author: San-Yih Hwang Jaideep Srivastava Jianzhong Li 
Note: This work was supported in part by sub-contract #B09530013 from Honeywell SSDC, under contract #F30602 91-C-0128 from Rome Laboratory of the US Air Force.  
Address: 4-192 EE/CS Bldg, 200 Union St. S.E.  Minneapolis, MN55455  Harbin, 15080, People's Republic of China  
Affiliation: Department of Computer Science  University of Minnesota  Department of Computer Science Heilongjiang University  
Abstract: Transaction management for federated database systems (FDBSs), where each participating DBMS is autonomous, supports global transactions that can access more than one database. A number of concurrency control algorithms exist for the failure-free environment. Handling transaction failure, due to concurrency control or site related reasons, becomes especially difficult in the presence of autonomy. Due to local autonomy, carrying out 2-phase commit may not be possible. This can be simulated by providing a server on top of the pre-existing DBMS at each site, which is responsible for submitting the local operations to the associated DBMS and communicating with the transaction's originating site. In this paper we formalize the problem of ensuring transaction consistency in an FDBS environment in the presence of failure. The key problem is that due to autonomy, the local DBMS and FDBS may have different views of an execution sequence generated at a site. Local recoverability is identified as the property of local execution sequences necessary for correctness. The other main problem is of guaranteeing that the various locally recoverable histories are consistent with each other. These identified properties are necessary and sufficient conditions for the correctness of FDBS recovery algorithms, and can be used to evaluate the correctness of the proposed algorithms. This paper also presents an FDBS recovery algorithm that has been proved to be correct. Formal proofs of all properties and a comparison of different algorithms are provided. 
Abstract-found: 1
Intro-found: 1
Reference: [BGMS92] <author> Y. Breitbart, H. Garcia-Molina, and A. Silberschatz. </author> <title> Overview of multidatabase transaction management. </title> <journal> VLDB Journal, </journal> <volume> 1(2), </volume> <year> 1992. </year>
Reference-contexts: If each site generates cascadeless histories, when the GTM decides to commit a global transaction, all the transactions that this global transaction reads data from must have committed, and the above anomaly cannot occur. The requirement for cascadelessness was observed in <ref> [BGMS92] </ref>. 16 repeat wait (event); case event of A subquery (T, s, o) received from GQP: Send (T, s, o) to the GTA at site s; Result of the subquery (T, s, o) is received from the GTA at site s: Send the result to GQP; 'COMMIT T' received from GQP:
Reference: [BGRS91] <author> Y. Breibart, D. Georgakopoulos, M. Rusinkiewicz, and A. Silberschatz. </author> <title> On rigorous transaction scheduling. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(9), </volume> <year> 1991. </year>
Reference-contexts: Similarly, T k2 , ... T 1 must all commit before site failure. However, this implies that the cycle exists if site failure does not occur, which violates our assumption that each local site can guarantee serializable execution. 2 In <ref> [BGRS91] </ref>, a property of histories called rigorousness has been defined. A history h is rigorous if whenever operation o 1 of transaction T 1 conflicts with and precedes o 2 of transaction T 2 in h, commit or abort of T 1 must precede o 2 . <p> Strict 2PL [BHG87] permits all rigorous histories. A rigorous history h can also ensure serializable RmWC (h), as shown by Lemma 3: Lemma 3 If a local history h is rigorous <ref> [BGRS91] </ref> (therefore, h is serializable), then RmWC (h) is serializable Proof: Suppose RmWC (h) is not serializable. For any cycle in SG (RmWC (h)) there must exist a failed subtransaction F i whose read transaction F i;r is involved in the cycle. <p> Therefore, the algorithm can ensure the union of GTA's serialization graphs of all local histories to be acyclic, i.e., it can achieve global serializability. 2 6.2 Breibart's Algorithm Since strict 2PL is used by most of the existing DBMSs, Breibart and Silberschatz <ref> [BGRS91] </ref> proposed a recovery algorithm that assumes each participating DBMS enforces a rigorous schedule. In order to prevent the anomalies caused by global transactions after failure, global locks are maintained at the federated level to coordinate the execution of global transactions.
Reference: [BHG87] <author> P. A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison Wesley, </publisher> <address> MA, </address> <year> 1987. </year>
Reference-contexts: This process will be repeated until the re-execution is successful. Because of the need for resubmission of write operations of the aborted (but considered committed) transactions, traditional (conflict) serializability [EGLT76] does not work well in a failure-prone FDBS environment. Traditional serializability <ref> [BHG87] </ref> only considers the relative order of operations from non-aborted transactions. However, in a failure-prone FDBS environment, the order of read operations from aborted but considered committed subtransactions should also be taken into account. We therefore modify the definition of global serializability accordingly. <p> This class of histories enjoys the nice property that if each local DBMS enforces rigorous history, global serializability can be achieved in a failure-free environment by just using the 2PC protocol. Strict 2PL <ref> [BHG87] </ref> permits all rigorous histories. A rigorous history h can also ensure serializable RmWC (h), as shown by Lemma 3: Lemma 3 If a local history h is rigorous [BGRS91] (therefore, h is serializable), then RmWC (h) is serializable Proof: Suppose RmWC (h) is not serializable. <p> Global transactions are a new class of transactions that read the local data and create a new set of data global data. 3 To achieve recoverability <ref> [BHG87] </ref>, a transaction T cannot commit before all transactions T reads data from commit. If any of these transactions is aborted, the commit of T cannot succeed. <p> To avoid this anomaly, a read operation cannot proceed until the transaction from which this operation reads data commits (this property is called cascadelessness <ref> [BHG87] </ref>). If each site generates cascadeless histories, when the GTM decides to commit a global transaction, all the transactions that this global transaction reads data from must have committed, and the above anomaly cannot occur.
Reference: [BO91] <author> K. </author> <title> Barker and M.T. Ozsu. Reliable transaction execution in multidatabase systems. </title> <booktitle> In The 1st Int'l Workshop on Interoperability in Multidatabase Systems, </booktitle> <year> 1991. </year>
Reference-contexts: A number of FDBS transaction management algorithms have been proposed for a failure-free environment [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93]. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made <ref> [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92] </ref>. Each proposed recovery algorithm imposes some restrictions, which affect different aspects of local autonomy. These restrictions include: * limiting the types of concurrency control mechanisms used by local DBMSs. <p> Simultaneously, there is ongoing research to develop mechanisms to ensure serializability in the FDBS environment. Our approach falls in the second category. 2 * modifying restart process of each local DBMS to allow exclusive use by the FDBS immediately after site failure <ref> [BO91, Geo91] </ref>. * prohibiting local DBMSs from aborting a transaction after all operations of the transaction are completed [Geo91] * giving up control autonomy, i.e., no local transactions can be executed without involving the FDBS [NSS91, MR91]. <p> The same argument as in the proof of local recoverability can be used to show that this set of paths cannot occur. Therefore our algorithm always generates global serializable histories. 2 6 Related Work Many FDBS recovery algorithms have been proposed in the literature <ref> [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92] </ref>. Due to space limitation, in this section we describe three of the prominent recovery algorithms in detail.
Reference: [BRG92] <author> R. K. Batra, M. Rusinkiewicz, and D. Georgakopoulos. </author> <title> Decentralized deadlock-free concurrency control method for multidatabase transactions. </title> <booktitle> In Proc. of the 12'th Int'l Conf. on Distributed Computing Systems, </booktitle> <year> 1992. </year>
Reference-contexts: The transaction management problem in FDBS has attracted a lot of interest from the database community. A number of FDBS transaction management algorithms have been proposed for a failure-free environment <ref> [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93] </ref>. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92].
Reference: [BS88] <author> Y. Breitbart and A. Silberschatz. </author> <title> Multidatabase update issues. </title> <booktitle> In Proc. of ACM SIGMOD Int'l. Conf. on Management of Data, </booktitle> <year> 1988. </year>
Reference-contexts: The transaction management problem in FDBS has attracted a lot of interest from the database community. A number of FDBS transaction management algorithms have been proposed for a failure-free environment <ref> [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93] </ref>. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92]. <p> Furthermore, our approach does not require expensive commit order enforcing mechanism such as global locks/commit graph or global timestamp ordering. In addition, our approach is flexible in the sense that any FDBS concurrency control algorithm designed for a failure-free environment <ref> [Pu88, ED90, LE90, BS88, GRS91, MRKS92] </ref> can be easily incorporated with our recovery algorithm to achieve fault-tolerant transaction management.
Reference: [BS92] <author> Y. Breitbart and A. Silberschatz. </author> <title> Strong recoverability in multidatabase systems. </title> <booktitle> In Proc. of the 1st Workshop on Transaction and Query Processing, </booktitle> <year> 1992. </year>
Reference-contexts: A number of FDBS transaction management algorithms have been proposed for a failure-free environment [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93]. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made <ref> [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92] </ref>. Each proposed recovery algorithm imposes some restrictions, which affect different aspects of local autonomy. These restrictions include: * limiting the types of concurrency control mechanisms used by local DBMSs. <p> FDBS recovery algorithms in the literature have some limitation on the types of applicable concurrency control methods. * partitioning the data in each local database into two exclusive sets that are updatable by local users and global users respectively, and limiting the global users from reading the local updatable data <ref> [BST90, WV90, BS92, VW92] </ref>. 1 While serializability [EGLT76] is a well-accepted correctness criterion for centralized and distributed databases, the debate on the appropriate criterion for FDBS's is ongoing. <p> The same argument as in the proof of local recoverability can be used to show that this set of paths cannot occur. Therefore our algorithm always generates global serializable histories. 2 6 Related Work Many FDBS recovery algorithms have been proposed in the literature <ref> [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92] </ref>. Due to space limitation, in this section we describe three of the prominent recovery algorithms in detail.
Reference: [BST87] <author> Y. Breitbart, A. Silberschatz, and G. Thompson. </author> <title> Update mechanism for multidatabase systems. </title> <journal> IEEE Data Engineering, </journal> <volume> 10(3), </volume> <year> 1987. </year>
Reference-contexts: The transaction management problem in FDBS has attracted a lot of interest from the database community. A number of FDBS transaction management algorithms have been proposed for a failure-free environment <ref> [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93] </ref>. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92].
Reference: [BST90] <author> Y. Breitbart, A. Silberschatz, and G. R. Thompson. </author> <title> Reliable transaction management in a multidatabase system. </title> <booktitle> In Proc. of ACM SIGMOD Int'l. Conf. on Management of Data, </booktitle> <year> 1990. </year>
Reference-contexts: A number of FDBS transaction management algorithms have been proposed for a failure-free environment [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93]. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made <ref> [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92] </ref>. Each proposed recovery algorithm imposes some restrictions, which affect different aspects of local autonomy. These restrictions include: * limiting the types of concurrency control mechanisms used by local DBMSs. <p> FDBS recovery algorithms in the literature have some limitation on the types of applicable concurrency control methods. * partitioning the data in each local database into two exclusive sets that are updatable by local users and global users respectively, and limiting the global users from reading the local updatable data <ref> [BST90, WV90, BS92, VW92] </ref>. 1 While serializability [EGLT76] is a well-accepted correctness criterion for centralized and distributed databases, the debate on the appropriate criterion for FDBS's is ongoing. <p> It can be shown that an algorithm can achieve global serializability if and only if it always generates locally recoverable histories and the union of the GTA's serialization graphs of all local histories is acyclic. Based on this property, we prove the correctness of three prominent recovery algorithms <ref> [BST90, Geo91, VW92] </ref>. We also propose a new algorithm. Although our algorithm also imposes some restrictions, these are not as strong as other algorithms [BST90, Geo91, VW92]. <p> Based on this property, we prove the correctness of three prominent recovery algorithms <ref> [BST90, Geo91, VW92] </ref>. We also propose a new algorithm. Although our algorithm also imposes some restrictions, these are not as strong as other algorithms [BST90, Geo91, VW92]. Besides, since our algorithm has simpler mechanisms and puts fewer restrictions on transaction execution, it is easier to implement and should have better performance. The organization of this paper is as follows. <p> The same argument as in the proof of local recoverability can be used to show that this set of paths cannot occur. Therefore our algorithm always generates global serializable histories. 2 6 Related Work Many FDBS recovery algorithms have been proposed in the literature <ref> [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92] </ref>. Due to space limitation, in this section we describe three of the prominent recovery algorithms in detail.
Reference: [DE89] <author> W. Du and A. Elmagarmid. </author> <title> Quasi serializability: A correctness criterion for global concurrency control in interbase. </title> <booktitle> In Proc. of the 15th Int'l Conf. on Very Large Data Bases, </booktitle> <year> 1989. </year> <month> 32 </month>
Reference-contexts: Quasi-serializability <ref> [DE89] </ref> and Epsilon-serializability [PL91] have been proposed as potential criterion, while others are proposing the use of semantics based criterion [GM91, MRKS91]. Simultaneously, there is ongoing research to develop mechanisms to ensure serializability in the FDBS environment. <p> This is in contrast to <ref> [DE89] </ref> who assume subtransactions to be independent. A typical transaction has the following structure: BEGIN TRANSACTION read operations j code j write operations COMMIT Based on the data read from "read operations", "code" decides the "write operations" to execute.
Reference: [ED90] <author> A. K. Elmagarmid and W. Du. </author> <title> A paradigm for concurrency control in heterogeneous distributed database system. </title> <booktitle> In Proc. of the 6th Int'l. Conf. on Data Engineering, </booktitle> <year> 1990. </year>
Reference-contexts: The transaction management problem in FDBS has attracted a lot of interest from the database community. A number of FDBS transaction management algorithms have been proposed for a failure-free environment <ref> [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93] </ref>. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92]. <p> Furthermore, our approach does not require expensive commit order enforcing mechanism such as global locks/commit graph or global timestamp ordering. In addition, our approach is flexible in the sense that any FDBS concurrency control algorithm designed for a failure-free environment <ref> [Pu88, ED90, LE90, BS88, GRS91, MRKS92] </ref> can be easily incorporated with our recovery algorithm to achieve fault-tolerant transaction management.
Reference: [EGLT76] <author> K. P. Eswaran, J. N. Gray, R. A. Lorie, and I. L. Traiger. </author> <title> The notions of consistency and predicate locks in a database systems. </title> <journal> Communications of ACM, </journal> <month> 19(11), </month> <year> 1976. </year>
Reference-contexts: some limitation on the types of applicable concurrency control methods. * partitioning the data in each local database into two exclusive sets that are updatable by local users and global users respectively, and limiting the global users from reading the local updatable data [BST90, WV90, BS92, VW92]. 1 While serializability <ref> [EGLT76] </ref> is a well-accepted correctness criterion for centralized and distributed databases, the debate on the appropriate criterion for FDBS's is ongoing. Quasi-serializability [DE89] and Epsilon-serializability [PL91] have been proposed as potential criterion, while others are proposing the use of semantics based criterion [GM91, MRKS91]. <p> The objective of transaction execution in centralized or distributed database systems is to achieve serializability <ref> [EGLT76] </ref>. However, transaction execution in a failure-prone FDBS environment is different from that in centralized or distributed database systems. <p> This process will be repeated until the re-execution is successful. Because of the need for resubmission of write operations of the aborted (but considered committed) transactions, traditional (conflict) serializability <ref> [EGLT76] </ref> does not work well in a failure-prone FDBS environment. Traditional serializability [BHG87] only considers the relative order of operations from non-aborted transactions. However, in a failure-prone FDBS environment, the order of read operations from aborted but considered committed subtransactions should also be taken into account.
Reference: [Geo91] <author> D. Georgakopoulos. </author> <title> Multidatabase recoverability and recovery. </title> <booktitle> In The 1st Int'l Workshop on Interoperability in Multidatabase Systems, </booktitle> <year> 1991. </year>
Reference-contexts: A number of FDBS transaction management algorithms have been proposed for a failure-free environment [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93]. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made <ref> [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92] </ref>. Each proposed recovery algorithm imposes some restrictions, which affect different aspects of local autonomy. These restrictions include: * limiting the types of concurrency control mechanisms used by local DBMSs. <p> Simultaneously, there is ongoing research to develop mechanisms to ensure serializability in the FDBS environment. Our approach falls in the second category. 2 * modifying restart process of each local DBMS to allow exclusive use by the FDBS immediately after site failure <ref> [BO91, Geo91] </ref>. * prohibiting local DBMSs from aborting a transaction after all operations of the transaction are completed [Geo91] * giving up control autonomy, i.e., no local transactions can be executed without involving the FDBS [NSS91, MR91]. <p> Our approach falls in the second category. 2 * modifying restart process of each local DBMS to allow exclusive use by the FDBS immediately after site failure [BO91, Geo91]. * prohibiting local DBMSs from aborting a transaction after all operations of the transaction are completed <ref> [Geo91] </ref> * giving up control autonomy, i.e., no local transactions can be executed without involving the FDBS [NSS91, MR91]. The objective of transaction execution in centralized or distributed database systems is to achieve serializability [EGLT76]. <p> It can be shown that an algorithm can achieve global serializability if and only if it always generates locally recoverable histories and the union of the GTA's serialization graphs of all local histories is acyclic. Based on this property, we prove the correctness of three prominent recovery algorithms <ref> [BST90, Geo91, VW92] </ref>. We also propose a new algorithm. Although our algorithm also imposes some restrictions, these are not as strong as other algorithms [BST90, Geo91, VW92]. <p> Based on this property, we prove the correctness of three prominent recovery algorithms <ref> [BST90, Geo91, VW92] </ref>. We also propose a new algorithm. Although our algorithm also imposes some restrictions, these are not as strong as other algorithms [BST90, Geo91, VW92]. Besides, since our algorithm has simpler mechanisms and puts fewer restrictions on transaction execution, it is easier to implement and should have better performance. The organization of this paper is as follows. <p> This is caused by the fact that from the point of view of the local DBMS, the resubmitted transactions have no connection to the failed transactions <ref> [Geo91] </ref>. Example 1 Let G be a global subtransaction at a site. Suppose all the operations in G are finished and the GTM decides to commit G. However, before the local DBMS finishes the commit operation of G, site failure occurs. <p> The same argument as in the proof of local recoverability can be used to show that this set of paths cannot occur. Therefore our algorithm always generates global serializable histories. 2 6 Related Work Many FDBS recovery algorithms have been proposed in the literature <ref> [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92] </ref>. Due to space limitation, in this section we describe three of the prominent recovery algorithms in detail.
Reference: [GM91] <author> H. Garcia-Molina. </author> <title> Global consistency constraints considered harmful in heterogeneous distributed database systems. </title> <booktitle> In The 1st Int'l. Workshop on Interoperability in Multi-database Systems, </booktitle> <year> 1991. </year>
Reference-contexts: Quasi-serializability [DE89] and Epsilon-serializability [PL91] have been proposed as potential criterion, while others are proposing the use of semantics based criterion <ref> [GM91, MRKS91] </ref>. Simultaneously, there is ongoing research to develop mechanisms to ensure serializability in the FDBS environment.
Reference: [GPZ86] <author> Virgil Gligor and Radu Popescu-Zeletin. </author> <title> Transaction management in distributed heterogeneous database management systems. </title> <journal> Information Systems, </journal> <volume> 11(4), </volume> <year> 1986. </year>
Reference-contexts: In the environment being considered, we make the following assumptions. * For each global transaction, there is at most one subtransaction per site. This is a standard assumption in the FDBS transaction management environment <ref> [GPZ86] </ref>, since if a global transaction T has two subtransactions T 1 and T 2 at the same site, the dependency relationship between T and some local transaction that is executed between T 1 and T 2 is not well defined (it is not sensible to have the dependency relationship as
Reference: [GRS91] <author> D. Georgakopoulos, M. Rusinkiewicz, and A. Sheth. </author> <title> Serializability of multidatabase transactions through forced local conflicts. </title> <booktitle> In Proc. of the 7th Int'l. Conf. on Data Engineering, </booktitle> <year> 1991. </year>
Reference-contexts: The transaction management problem in FDBS has attracted a lot of interest from the database community. A number of FDBS transaction management algorithms have been proposed for a failure-free environment <ref> [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93] </ref>. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92]. <p> Furthermore, our approach does not require expensive commit order enforcing mechanism such as global locks/commit graph or global timestamp ordering. In addition, our approach is flexible in the sense that any FDBS concurrency control algorithm designed for a failure-free environment <ref> [Pu88, ED90, LE90, BS88, GRS91, MRKS92] </ref> can be easily incorporated with our recovery algorithm to achieve fault-tolerant transaction management.
Reference: [HHS93] <author> S.-Y. Hwang, J. Huang, and J. Srivastava. </author> <title> Concurrency control in federated databases: A dynamic approach. </title> <booktitle> In Proc. of the 2nd Int'l Conf. on Information and Knowledge Management, </booktitle> <year> 1993. </year>
Reference-contexts: The transaction management problem in FDBS has attracted a lot of interest from the database community. A number of FDBS transaction management algorithms have been proposed for a failure-free environment <ref> [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93] </ref>. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92].
Reference: [LE90] <author> Y. Leu and A. K. Elmagarmid. </author> <title> A hierarchical approach to concurrency control for multidatabases. </title> <booktitle> In Proc. of the 2nd Int'l Symposium on Databases in Parallel and Distributed Systems, </booktitle> <year> 1990. </year>
Reference-contexts: The transaction management problem in FDBS has attracted a lot of interest from the database community. A number of FDBS transaction management algorithms have been proposed for a failure-free environment <ref> [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93] </ref>. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92]. <p> the GTM or the underlying DBMS. repeat wait (event); case event of 4 Since 2PL is used at the local site, by assumption 1, when Prepare-To-Commit of T is received, all the required locks of T have been obtained at the local DBMS, which marks the serialization point of T <ref> [LE90] </ref>. 18 'PREPARE TO COMMIT T' received from GTM: if T 's state is aborted then /* T has been aborted by local DBMS */ Send 'ABORT T' to GTM; else /* T 's state is active */ Assign the current time as the serialization order of T ; Send 'RELEASE <p> Furthermore, our approach does not require expensive commit order enforcing mechanism such as global locks/commit graph or global timestamp ordering. In addition, our approach is flexible in the sense that any FDBS concurrency control algorithm designed for a failure-free environment <ref> [Pu88, ED90, LE90, BS88, GRS91, MRKS92] </ref> can be easily incorporated with our recovery algorithm to achieve fault-tolerant transaction management.
Reference: [MR91] <author> P. Muth and T. C. Rakow. </author> <title> Atomic commitment for integrated database systems. </title> <booktitle> In Proc. of the 7th Int'l Conf. on Data Engineering, </booktitle> <year> 1991. </year>
Reference-contexts: A number of FDBS transaction management algorithms have been proposed for a failure-free environment [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93]. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made <ref> [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92] </ref>. Each proposed recovery algorithm imposes some restrictions, which affect different aspects of local autonomy. These restrictions include: * limiting the types of concurrency control mechanisms used by local DBMSs. <p> of each local DBMS to allow exclusive use by the FDBS immediately after site failure [BO91, Geo91]. * prohibiting local DBMSs from aborting a transaction after all operations of the transaction are completed [Geo91] * giving up control autonomy, i.e., no local transactions can be executed without involving the FDBS <ref> [NSS91, MR91] </ref>. The objective of transaction execution in centralized or distributed database systems is to achieve serializability [EGLT76]. However, transaction execution in a failure-prone FDBS environment is different from that in centralized or distributed database systems. <p> The same argument as in the proof of local recoverability can be used to show that this set of paths cannot occur. Therefore our algorithm always generates global serializable histories. 2 6 Related Work Many FDBS recovery algorithms have been proposed in the literature <ref> [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92] </ref>. Due to space limitation, in this section we describe three of the prominent recovery algorithms in detail.
Reference: [MRB + 92] <author> S. Mehrotra, R. Rastogi, Y. Breibart, H. F. Korth, and A. Silberschatz. </author> <title> Ensuring transaction atomicity in multidatabase systems. </title> <booktitle> In Proc. of the 11'th Symposium on Principal of Database Systems, </booktitle> <year> 1992. </year>
Reference-contexts: This revised global serializability must be satisfied by any FDBS concurrency control algorithm to work correctly under a failure-prone environment. Formal modeling of the FDBS recovery problem is in its nascent stages <ref> [MRB + 92] </ref>. Thus, some proposed FDBS recovery algorithms do not handle all cases. In this paper, we analyze the failure problem in FDBS transaction management and modify the definition of global serializability for transaction execution in a failure-prone FDBS environment.
Reference: [MRKS91] <author> S. Mehrotra, R. Rastogi, H. F. Korth, and A. Silberschatz. </author> <title> Relaxing serializability in multidatabase system. </title> <booktitle> In Proc. of the 2nd Int'l Workshop on Research Issues on Data Engineering: Transaction and Query Processing, </booktitle> <year> 1991. </year>
Reference-contexts: Quasi-serializability [DE89] and Epsilon-serializability [PL91] have been proposed as potential criterion, while others are proposing the use of semantics based criterion <ref> [GM91, MRKS91] </ref>. Simultaneously, there is ongoing research to develop mechanisms to ensure serializability in the FDBS environment.
Reference: [MRKS92] <author> S. Mehrotra, R. Rastogi, H. F. Korth, and A. Silberschatz. </author> <title> The concurrency control problem in multidatabases: Characteristics and solutions. </title> <booktitle> In Proc. of ACM SIGMOD Int'l. Conf. on Management of Data, </booktitle> <year> 1992. </year> <month> 33 </month>
Reference-contexts: The transaction management problem in FDBS has attracted a lot of interest from the database community. A number of FDBS transaction management algorithms have been proposed for a failure-free environment <ref> [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93] </ref>. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92]. <p> Furthermore, our approach does not require expensive commit order enforcing mechanism such as global locks/commit graph or global timestamp ordering. In addition, our approach is flexible in the sense that any FDBS concurrency control algorithm designed for a failure-free environment <ref> [Pu88, ED90, LE90, BS88, GRS91, MRKS92] </ref> can be easily incorporated with our recovery algorithm to achieve fault-tolerant transaction management.
Reference: [NSS91] <author> H. F. Korth N. Soparkar and A. Silberschatz. </author> <title> Failure-resilient transaction management in multidatabases. </title> <journal> IEEE Computer, </journal> <volume> 24(12), </volume> <year> 1991. </year>
Reference-contexts: A number of FDBS transaction management algorithms have been proposed for a failure-free environment [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93]. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made <ref> [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92] </ref>. Each proposed recovery algorithm imposes some restrictions, which affect different aspects of local autonomy. These restrictions include: * limiting the types of concurrency control mechanisms used by local DBMSs. <p> of each local DBMS to allow exclusive use by the FDBS immediately after site failure [BO91, Geo91]. * prohibiting local DBMSs from aborting a transaction after all operations of the transaction are completed [Geo91] * giving up control autonomy, i.e., no local transactions can be executed without involving the FDBS <ref> [NSS91, MR91] </ref>. The objective of transaction execution in centralized or distributed database systems is to achieve serializability [EGLT76]. However, transaction execution in a failure-prone FDBS environment is different from that in centralized or distributed database systems. <p> The same argument as in the proof of local recoverability can be used to show that this set of paths cannot occur. Therefore our algorithm always generates global serializable histories. 2 6 Related Work Many FDBS recovery algorithms have been proposed in the literature <ref> [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92] </ref>. Due to space limitation, in this section we describe three of the prominent recovery algorithms in detail.
Reference: [PL91] <author> C. Pu and A. Leff. </author> <title> Replica control in distributed systems: An asynchronous approach. </title> <booktitle> In Proc. of ACM SIGMOD Int'l. Conf. on Management of Data, </booktitle> <year> 1991. </year>
Reference-contexts: Quasi-serializability [DE89] and Epsilon-serializability <ref> [PL91] </ref> have been proposed as potential criterion, while others are proposing the use of semantics based criterion [GM91, MRKS91]. Simultaneously, there is ongoing research to develop mechanisms to ensure serializability in the FDBS environment.
Reference: [Pu87] <author> C. Pu. Superdatabases: </author> <title> Transactions across database boundaries. </title> <journal> IEEE Data Engineering, </journal> <volume> 10(3), </volume> <year> 1987. </year>
Reference-contexts: The transaction management problem in FDBS has attracted a lot of interest from the database community. A number of FDBS transaction management algorithms have been proposed for a failure-free environment <ref> [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93] </ref>. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92].
Reference: [Pu88] <author> C. Pu. </author> <title> Superdatabases for composition of heterogeneous databases. </title> <booktitle> In Proc. of the 4th Int'l Conf. on Data Engineering, </booktitle> <year> 1988. </year>
Reference-contexts: The transaction management problem in FDBS has attracted a lot of interest from the database community. A number of FDBS transaction management algorithms have been proposed for a failure-free environment <ref> [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93] </ref>. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92]. <p> Furthermore, our approach does not require expensive commit order enforcing mechanism such as global locks/commit graph or global timestamp ordering. In addition, our approach is flexible in the sense that any FDBS concurrency control algorithm designed for a failure-free environment <ref> [Pu88, ED90, LE90, BS88, GRS91, MRKS92] </ref> can be easily incorporated with our recovery algorithm to achieve fault-tolerant transaction management.
Reference: [SL90] <author> A. P. Sheth and J. A. Larson. </author> <title> Federated database systems for managing distributed, heterogeneous multidatabase. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3), </volume> <year> 1990. </year>
Reference-contexts: 1 Introduction A federated database system (FDBS), which is also called a multidatabase system (DBMS) or heterogeneous distributed database system (HDDS), integrates pre-existing DBMSs to support applications which span multiple databases, without sacrificing the autonomy of each participating DBMS <ref> [SL90] </ref>. In contrast to traditional homogeneous distributed database systems, there are two kinds of transactions in FDBSs, namely local transactions and global transactions. A local transaction is submitted to and executed by the local participating DBMS without involving the FDBS.
Reference: [VW92] <author> J. Veijalainen and A. Wolski. </author> <title> Prepared and commit certification for decentralized transaction management in rigorous heterogeneous multidatabases. </title> <booktitle> In Proc. of the 8th Int'l. Conf. on Data Engineering, </booktitle> <year> 1992. </year>
Reference-contexts: A number of FDBS transaction management algorithms have been proposed for a failure-free environment [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93]. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made <ref> [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92] </ref>. Each proposed recovery algorithm imposes some restrictions, which affect different aspects of local autonomy. These restrictions include: * limiting the types of concurrency control mechanisms used by local DBMSs. <p> FDBS recovery algorithms in the literature have some limitation on the types of applicable concurrency control methods. * partitioning the data in each local database into two exclusive sets that are updatable by local users and global users respectively, and limiting the global users from reading the local updatable data <ref> [BST90, WV90, BS92, VW92] </ref>. 1 While serializability [EGLT76] is a well-accepted correctness criterion for centralized and distributed databases, the debate on the appropriate criterion for FDBS's is ongoing. <p> It can be shown that an algorithm can achieve global serializability if and only if it always generates locally recoverable histories and the union of the GTA's serialization graphs of all local histories is acyclic. Based on this property, we prove the correctness of three prominent recovery algorithms <ref> [BST90, Geo91, VW92] </ref>. We also propose a new algorithm. Although our algorithm also imposes some restrictions, these are not as strong as other algorithms [BST90, Geo91, VW92]. <p> Based on this property, we prove the correctness of three prominent recovery algorithms <ref> [BST90, Geo91, VW92] </ref>. We also propose a new algorithm. Although our algorithm also imposes some restrictions, these are not as strong as other algorithms [BST90, Geo91, VW92]. Besides, since our algorithm has simpler mechanisms and puts fewer restrictions on transaction execution, it is easier to implement and should have better performance. The organization of this paper is as follows. <p> The same argument as in the proof of local recoverability can be used to show that this set of paths cannot occur. Therefore our algorithm always generates global serializable histories. 2 6 Related Work Many FDBS recovery algorithms have been proposed in the literature <ref> [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92] </ref>. Due to space limitation, in this section we describe three of the prominent recovery algorithms in detail. <p> Therefore, the above paths cannot exist. 2 6.3 Veijalainen's Algorithm Veijalainen and Wolski proposed a recovery algorithm based on the same assumptions as Breibart's algorithm, i.e., each local DBMS produces rigorous schedules <ref> [VW92] </ref>. Data in each local database is also partitioned into locally updatable data and globally updatable data. Furthermore, global transactions are prohibited from reading locally updatable data to prevent local transactions from conflicting with the read transactions of failed subtransactions.
Reference: [WV90] <author> A. Wolski and J. Veijalainen. </author> <title> Achieving serializability in presence of failures in a heterogeneous multidatabase. </title> <booktitle> In Proc. of the 6th Int'l. Conf. on Data Engineering, </booktitle> <year> 1990. </year> <month> 34 </month>
Reference-contexts: A number of FDBS transaction management algorithms have been proposed for a failure-free environment [BST87, BS88, Pu87, Pu88, ED90, LE90, GRS91, MRKS92, BRG92, HHS93]. Recently, researchers have addressed the issue of transaction management in a failure-prone environment and a number of proposal have been made <ref> [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92] </ref>. Each proposed recovery algorithm imposes some restrictions, which affect different aspects of local autonomy. These restrictions include: * limiting the types of concurrency control mechanisms used by local DBMSs. <p> FDBS recovery algorithms in the literature have some limitation on the types of applicable concurrency control methods. * partitioning the data in each local database into two exclusive sets that are updatable by local users and global users respectively, and limiting the global users from reading the local updatable data <ref> [BST90, WV90, BS92, VW92] </ref>. 1 While serializability [EGLT76] is a well-accepted correctness criterion for centralized and distributed databases, the debate on the appropriate criterion for FDBS's is ongoing. <p> One is of the Concurrency Control Agent, which is to act on behalf of the GTM to control the submission of operations to the local DBMS, and if necessary communicate with the GTM to achieve globally serializable execution. The other is of the 2PC agent <ref> [WV90] </ref>, which monitors the status of each subtransaction to guarantee atomic execution. In a failure prone environment, a two phase commit (2PC) protocol is needed to guarantee atomic commitment of subtransactions of a multi-site global transaction. <p> The same argument as in the proof of local recoverability can be used to show that this set of paths cannot occur. Therefore our algorithm always generates global serializable histories. 2 6 Related Work Many FDBS recovery algorithms have been proposed in the literature <ref> [BST90, WV90, BO91, Geo91, NSS91, MR91, BS92, VW92] </ref>. Due to space limitation, in this section we describe three of the prominent recovery algorithms in detail.
References-found: 29

