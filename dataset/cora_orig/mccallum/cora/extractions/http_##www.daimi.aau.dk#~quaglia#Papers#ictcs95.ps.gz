URL: http://www.daimi.aau.dk/~quaglia/Papers/ictcs95.ps.gz
Refering-URL: http://www.daimi.aau.dk/~quaglia/papers.html
Root-URL: http://www.daimi.aau.dk
Title: Towards a Semantic-Based Verification Environment for the -calculus  
Author: GianLuigi Ferrari Gianfranco Modoni Paola Quaglia 
Date: 1995  
Note: In: Proc. 5th Italian Conf. on Theoretical Comp. Sc.,  
Address: Pisa  
Affiliation: Dipartimento di Informatica, Universita di  
Abstract: A prototype version of a semantic-based verification environment for manipulating and analyzing mobile systems specified in the -calculus is presented. In the current version, the -environment provides two main facilities: a -calculus interpreter equipped with a graphical interface, and a verification tool which is used to decide (strong and weak) early and late bisimulation equivalences for finite -calculus processes. The -environment is built on top of existing verification systems, and the re-use of software modules, based on semantical considerations, is the key feature of our proposal. 
Abstract-found: 1
Intro-found: 1
Reference: [ABV94] <author> L. Aceto, B. Bloom, and F. Vaandrager. </author> <title> Turning SOS Rules into Equations, </title> <journal> Information and Computation, </journal> <volume> 111, </volume> <pages> pp 1-52, </pages> <year> 1994. </year>
Reference-contexts: CCS-like) transition system semantics. Moreover, the explicit handling of name substitutions permits to take advantage of the SOS meta-theory. For instance, it has been showed that equational characterizations of behavioural equivalences can be automatically derived by analyzing the syntactic structure of the SOS inference rules in the style of <ref> [ABV94] </ref>. This paper addresses the issue of program verification in the -calculus. In particular, our long term goal is to provide a general verification environment for manipulating and analyzing mobile systems specified in the -calculus.
Reference: [BS95] <author> K. Bernstein, E. Stark. </author> <title> Operational Semantics of a Focussing Debugger. </title> <booktitle> In MFPS'95, </booktitle> <volume> ENTCS (1), </volume> <year> 1995. </year>
Reference-contexts: Another area of investigation would involve the development of techniques to debug -processes. One means to cope with this issue is to design the debugger on top of the conceptual implementation model of the -calculus. Bernstein and Stark <ref> [BS95] </ref> have recently proposed the idea of viewing a debugger as an extension of both the syntax and the semantics of the underlying language.
Reference: [BGL94] <author> A. Bouali, S. Gnesi, S. Larosa. </author> <title> The Integration Project for the JACK Environment. </title> <booktitle> Bullettin of the EATCS 54, </booktitle> <year> 1994. </year>
Reference-contexts: The -environment is built on top of the JACK system <ref> [BGL94] </ref> which integrates several specification and verification tools into a single environment. In the JACK system the integration among the various tools is obtained by exploiting the FC2 format [MS93] which acts as the `gluing' entity among the tools.
Reference: [CPS93] <author> R. Cleaveland, J. Parrow, and B. Steffen. </author> <title> The Concurrency Workbench: A Semantics-Based Tool for the Verification of Concurrent Systems. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 15(1) </volume> <pages> 36-72, </pages> <year> 1993. </year>
Reference-contexts: More specifically, even if the -calculus generalizes CCS [Mil89] (and related "static" process calculi), the semantic-based verification tools developed for static process calculi (e.g. <ref> [CPS93] </ref>, we refer to [IP91, Mad92] for a survey) cannot be directly "re-used" for the -calculus, and, up to now, the only available verification tool [VM94] decides a bisimulation equivalence which is rather strong [San93]. In [FMQ94, FMQ95] an alternative formulation the -calculus operational semantics has been proposed.
Reference: [Dam95] <author> M. Dam. </author> <title> On the Decidability of Process Equivalences for the -calculus. </title> <booktitle> In AMAST'95 volume 936 of , LNCS, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: In the case of the -calculus, the issues related to program verification are under investigation. Decidability results for -calculus bisimulations were recently presented <ref> [Dam95, MP95] </ref> and the development of automated verification tools is at a beginning stage. The MWB (Mobility Workbench) [VM94] is, to our knowledge, the only automated tool for the -calculus.
Reference: [FM91] <author> J. Fernandez, L. Mounier. </author> <title> "On the fly" Verification of Behavioural Equivalences and Preorders. In CAV'91, </title> <publisher> LNCS. Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The MWB (Mobility Workbench) [VM94] is, to our knowledge, the only automated tool for the -calculus. The basic functionality of the MWB is checking open bisimulation equivalence [San93], which is stronger than both late and early equivalences. The MWB algorithm for checking bisimilarity follows the "on the fly" style <ref> [FM91] </ref> which requires the generation of the state spaces of the two processes during the construction of the bisimulation. Our work, which aims to decide late and early equivalences, differs from the Mobility Workbench on the approach.
Reference: [FMQ94] <author> G.-L. Ferrari, U. Montanari, and P. Quaglia. </author> <title> A -calculus with Explicit Substitutions: the Late Semantics. </title> <note> In MFCS'94, volume 841 of LNCS, Springer-Verlag, 1994 (full version to appear Theoretical Computer Science). </note>
Reference-contexts: In <ref> [FMQ94, FMQ95] </ref> an alternative formulation the -calculus operational semantics has been proposed. There, contrary to the original definition, name substitutions are explicitly handled via the introduction of a suitable state operator. This allowed the characterization of -calculus operational semantics as ordinary (i.e. CCS-like) transition system semantics. <p> This paper addresses the issue of program verification in the -calculus. In particular, our long term goal is to provide a general verification environment for manipulating and analyzing mobile systems specified in the -calculus. To this purpose, we explore the ideas and the techniques of <ref> [FMQ94, FMQ95] </ref> to develop a semantic-based verification environment for the -calculus. <p> In the current prototype version, the -environment provides two main facilities: a -calculus interpreter equipped with a graphical interface, and a verification tool which is used to decide (strong and weak) early and late bisimulation equivalences [MPW92, MPW93, Mil90] (see also <ref> [FMQ94, FMQ95, Lin95] </ref>) for finite -calculus processes. The -environment is built on top of the JACK system [BGL94] which integrates several specification and verification tools into a single environment. <p> More precisely, the JACK system includes a general facility to manage any tool which has an input or an output based on the FC2 format. The -environment takes a direct advantage of the formal definition of the operational semantics presented in <ref> [FMQ94, FMQ95] </ref>. In fact, that approach yields a virtual implementation model of the -calculus, where the notion of evaluation step has an intuitive and explicit meaning. <p> The result function ffi, which do not include obligations anymore, yields either o or the constant (s) associated with the relevant name (s). In <ref> [FMQ94, FMQ95] </ref> it has been proved that strong (resp. weak) late bisimu-lation semantics can be characterized as ordinary strong (resp. weak) bisimulation over the specialized transition system of the -calculus, and that strong (resp. weak) early bisimulation can be defined on top of the -calculus in a straightforward way. 3 The <p> Beyond the -calculus parser and some interface management modules, the main module added to JACK is the jffi semantic package which defines the semantics of -processes. Following <ref> [FMQ94, FMQ95] </ref> a -processes is interpreted as a specialized labelled transition system where the states of the transition system keeps track of the association between names. The jffi package provides several commands to interactively compute transitions of -processes. <p> We have shown that it is possible to re-use a variety of verification tools already developed (and tested) for static process calculi by adopting the conceptual implementation model underlying the approach of <ref> [FMQ94, FMQ95] </ref>. There are a number of directions for future works on the -environment. The main shortcoming of the current version of the -environment is its inefficiency (the jffi package is implemented in Standard ML running on Sun SPARK stations). More efficient implementations are planned.
Reference: [FMQ95] <author> G.-L. Ferrari, U. Montanari, and P. Quaglia. </author> <title> The Weak Late -calculus Semantics as Observation Equivalence. </title> <booktitle> In CONCUR '95, volume 962 of LNCS, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: In <ref> [FMQ94, FMQ95] </ref> an alternative formulation the -calculus operational semantics has been proposed. There, contrary to the original definition, name substitutions are explicitly handled via the introduction of a suitable state operator. This allowed the characterization of -calculus operational semantics as ordinary (i.e. CCS-like) transition system semantics. <p> This paper addresses the issue of program verification in the -calculus. In particular, our long term goal is to provide a general verification environment for manipulating and analyzing mobile systems specified in the -calculus. To this purpose, we explore the ideas and the techniques of <ref> [FMQ94, FMQ95] </ref> to develop a semantic-based verification environment for the -calculus. <p> In the current prototype version, the -environment provides two main facilities: a -calculus interpreter equipped with a graphical interface, and a verification tool which is used to decide (strong and weak) early and late bisimulation equivalences [MPW92, MPW93, Mil90] (see also <ref> [FMQ94, FMQ95, Lin95] </ref>) for finite -calculus processes. The -environment is built on top of the JACK system [BGL94] which integrates several specification and verification tools into a single environment. <p> More precisely, the JACK system includes a general facility to manage any tool which has an input or an output based on the FC2 format. The -environment takes a direct advantage of the formal definition of the operational semantics presented in <ref> [FMQ94, FMQ95] </ref>. In fact, that approach yields a virtual implementation model of the -calculus, where the notion of evaluation step has an intuitive and explicit meaning. <p> The result function ffi, which do not include obligations anymore, yields either o or the constant (s) associated with the relevant name (s). In <ref> [FMQ94, FMQ95] </ref> it has been proved that strong (resp. weak) late bisimu-lation semantics can be characterized as ordinary strong (resp. weak) bisimulation over the specialized transition system of the -calculus, and that strong (resp. weak) early bisimulation can be defined on top of the -calculus in a straightforward way. 3 The <p> Beyond the -calculus parser and some interface management modules, the main module added to JACK is the jffi semantic package which defines the semantics of -processes. Following <ref> [FMQ94, FMQ95] </ref> a -processes is interpreted as a specialized labelled transition system where the states of the transition system keeps track of the association between names. The jffi package provides several commands to interactively compute transitions of -processes. <p> We have shown that it is possible to re-use a variety of verification tools already developed (and tested) for static process calculi by adopting the conceptual implementation model underlying the approach of <ref> [FMQ94, FMQ95] </ref>. There are a number of directions for future works on the -environment. The main shortcoming of the current version of the -environment is its inefficiency (the jffi package is implemented in Standard ML running on Sun SPARK stations). More efficient implementations are planned.
Reference: [IP91] <author> P. Inverardi and C. Priami. </author> <title> Evaluation of tools for the analysis of communicating systems. </title> <journal> Bulletin EATCS 45, </journal> <year> 1991. </year>
Reference-contexts: More specifically, even if the -calculus generalizes CCS [Mil89] (and related "static" process calculi), the semantic-based verification tools developed for static process calculi (e.g. [CPS93], we refer to <ref> [IP91, Mad92] </ref> for a survey) cannot be directly "re-used" for the -calculus, and, up to now, the only available verification tool [VM94] decides a bisimulation equivalence which is rather strong [San93]. In [FMQ94, FMQ95] an alternative formulation the -calculus operational semantics has been proposed.
Reference: [Lin95] <author> H. Lin. </author> <title> Complete Inference Systems for Weak Bisimulation Equivalences in the -Calculus. </title> <booktitle> In TAPSOFT'95, volume 915 of LNCS, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: In the current prototype version, the -environment provides two main facilities: a -calculus interpreter equipped with a graphical interface, and a verification tool which is used to decide (strong and weak) early and late bisimulation equivalences [MPW92, MPW93, Mil90] (see also <ref> [FMQ94, FMQ95, Lin95] </ref>) for finite -calculus processes. The -environment is built on top of the JACK system [BGL94] which integrates several specification and verification tools into a single environment.
Reference: [Mad92] <author> E. Madelaine. </author> <title> Verification Tools from the CONCUR Project. </title> <journal> Bulletin EATCS 47, </journal> <year> 1992. </year>
Reference-contexts: More specifically, even if the -calculus generalizes CCS [Mil89] (and related "static" process calculi), the semantic-based verification tools developed for static process calculi (e.g. [CPS93], we refer to <ref> [IP91, Mad92] </ref> for a survey) cannot be directly "re-used" for the -calculus, and, up to now, the only available verification tool [VM94] decides a bisimulation equivalence which is rather strong [San93]. In [FMQ94, FMQ95] an alternative formulation the -calculus operational semantics has been proposed.
Reference: [MS93] <author> E. Madelaine, R. De Simone. </author> <title> The FC2 Reference Manual, </title> <type> Technical Report INRIA, </type> <year> 1993. </year>
Reference-contexts: The -environment is built on top of the JACK system [BGL94] which integrates several specification and verification tools into a single environment. In the JACK system the integration among the various tools is obtained by exploiting the FC2 format <ref> [MS93] </ref> which acts as the `gluing' entity among the tools. More precisely, the JACK system includes a general facility to manage any tool which has an input or an output based on the FC2 format.
Reference: [MV90] <author> E. Madelaine, D. Vergamini. </author> <title> AUTO: A Verification Tool for Distributed Systems Using Reductions to Finite Automata Networks. In FORTE'90, </title> <publisher> North Holland, </publisher> <year> 1990. </year>
Reference-contexts: The equivalence checker is the (M)AUTO tool <ref> [MV90] </ref> which takes as input the FC2 files of the two processes to check (these files are generated by invoking the jffi semantic package). The command eq is invoked to call the (M)AUTO tool to check strong bisimulation, while the command weq is invoked to check weak bisimulation.
Reference: [Mil89] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: This has a strong impact either in the definition of operational semantics (e.g. the underlying labelled transition system is not finitely branching), or in the definition of behavioural equivalences, or in the design of automated tools for checking bisimilarity. More specifically, even if the -calculus generalizes CCS <ref> [Mil89] </ref> (and related "static" process calculi), the semantic-based verification tools developed for static process calculi (e.g. [CPS93], we refer to [IP91, Mad92] for a survey) cannot be directly "re-used" for the -calculus, and, up to now, the only available verification tool [VM94] decides a bisimulation equivalence which is rather strong [San93].
Reference: [Mil90] <author> R. Milner. </author> <title> Weak bisimilarity: congruences and equivalences. </title> <booktitle> Unpublished notes, </booktitle> <year> 1990. </year>
Reference-contexts: In the current prototype version, the -environment provides two main facilities: a -calculus interpreter equipped with a graphical interface, and a verification tool which is used to decide (strong and weak) early and late bisimulation equivalences <ref> [MPW92, MPW93, Mil90] </ref> (see also [FMQ94, FMQ95, Lin95]) for finite -calculus processes. The -environment is built on top of the JACK system [BGL94] which integrates several specification and verification tools into a single environment.
Reference: [Mil91] <author> R. Milner. </author> <title> The Polyadic -calculus: a Tutorial Technical Report, </title> <address> ECS-LFCS-91-180, </address> <year> 1991 </year>
Reference-contexts: be a denumerably infinite set of names (ranged over by x, y, z, : : :), then P ::= 0 j o:P j x (y):P j y:P j xy:P j [x = y]P j P + P j P jP j (y)P The prefix y, which resembles Milner's abstraction operator <ref> [Mil91] </ref>, calls for an actual instantiation of the name y. It is the only novelty w.r.t. standard -calculus syntax, and it acts as a formal binder for the name y. For all the rest the notions of free and the bound names of processes are defined as usual.
Reference: [MPW92] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A Calculus of Mobile Processes, Part I and II. </title> <journal> Information and Computation, </journal> <volume> 100(1) </volume> <pages> 1-77, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction The -calculus <ref> [MPW92] </ref> has become the best representative example of mobile process calculi, namely calculi in which the communication topology among processes can dynamically evolve when computation progresses. <p> In the -calculus mobility is achieved via the communication of names rather than communication of processes as happens in so called higher order process calculi (e.g. [Tho93]). Many issues of concurrent programming languages (e.g. the encoding of complex data structures as processes <ref> [MPW92] </ref>, higher order processes [San92]) can be profitably analyzed by considering them in the abstract setting provided by the -calculus. Moreover, the -calculus has been adopted as a design tool for the development of a concurrent object oriented programming language [Pie94]. <p> In the current prototype version, the -environment provides two main facilities: a -calculus interpreter equipped with a graphical interface, and a verification tool which is used to decide (strong and weak) early and late bisimulation equivalences <ref> [MPW92, MPW93, Mil90] </ref> (see also [FMQ94, FMQ95, Lin95]) for finite -calculus processes. The -environment is built on top of the JACK system [BGL94] which integrates several specification and verification tools into a single environment.
Reference: [MPW93] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> Modal logics for mobile processes. </title> <journal> Theoretical Computer Science, </journal> <volume> 114(1) </volume> <pages> 149-171, </pages> <year> 1993. </year>
Reference-contexts: In the current prototype version, the -environment provides two main facilities: a -calculus interpreter equipped with a graphical interface, and a verification tool which is used to decide (strong and weak) early and late bisimulation equivalences <ref> [MPW92, MPW93, Mil90] </ref> (see also [FMQ94, FMQ95, Lin95]) for finite -calculus processes. The -environment is built on top of the JACK system [BGL94] which integrates several specification and verification tools into a single environment.
Reference: [MP95] <author> U. Montanari, M. Pistore. </author> <title> Checking Bisimilarity for Finitary -calculus. </title> <booktitle> In CONCUR '95, volume 962 of LNCS, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: In the case of the -calculus, the issues related to program verification are under investigation. Decidability results for -calculus bisimulations were recently presented <ref> [Dam95, MP95] </ref> and the development of automated verification tools is at a beginning stage. The MWB (Mobility Workbench) [VM94] is, to our knowledge, the only automated tool for the -calculus. <p> A graphical interface is under development. The prototype version of the -environment checks early and late bisimulations only for finite processes. The extension to suitable classes of infinite -processes is being under investigation. One promising approach is to apply the techniques developed in <ref> [MP95] </ref> during the generation of the labelled transition system associated to -processes by the jffi package. In [MP95], it is shown that for the class of finitary (processes where the degree of parallelism is bound) -processes without matching early and late bisimulation equivalences can be decided by using Paige and Tarjan <p> The extension to suitable classes of infinite -processes is being under investigation. One promising approach is to apply the techniques developed in <ref> [MP95] </ref> during the generation of the labelled transition system associated to -processes by the jffi package. In [MP95], it is shown that for the class of finitary (processes where the degree of parallelism is bound) -processes without matching early and late bisimulation equivalences can be decided by using Paige and Tarjan partition refinement algorithm [PT87].
Reference: [PT87] <author> R. Page, R. Tarjan. </author> <title> Three Partition Refinement Algorithms. </title> <journal> SIAM J. Computing, </journal> <volume> 16(6), </volume> <year> 1987. </year>
Reference-contexts: In [MP95], it is shown that for the class of finitary (processes where the degree of parallelism is bound) -processes without matching early and late bisimulation equivalences can be decided by using Paige and Tarjan partition refinement algorithm <ref> [PT87] </ref>. Another area of investigation would involve the development of techniques to debug -processes. One means to cope with this issue is to design the debugger on top of the conceptual implementation model of the -calculus.
Reference: [Par81] <author> D. Park. </author> <title> Concurrency and automata on infinite sequences. </title> <booktitle> In 5th GI--Conference, volume 104 of LNCS, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference: [Pie94] <author> B. Pierce. </author> <title> Programming in the -calculus: An Experiment in Concurrent Language Design. </title> <type> Technical Report, </type> <institution> University of Edinburgh 1994. </institution>
Reference-contexts: Moreover, the -calculus has been adopted as a design tool for the development of a concurrent object oriented programming language <ref> [Pie94] </ref>.
Reference: [Plo81] <author> G. D. Plotkin. </author> <title> A Structural Approach to Operational Semantics. </title> <type> Technical Report DAIMI-FN-19, </type> <institution> Computer Science Department, Aarhus University, </institution> <year> 1981. </year>
Reference-contexts: It is the only novelty w.r.t. standard -calculus syntax, and it acts as a formal binder for the name y. For all the rest the notions of free and the bound names of processes are defined as usual. The operational semantics of the -calculus follows the SOS style <ref> [Plo81] </ref> but differently from traditional formulations is based on a two-stage approach. The first stage consists of the definition of a symbolic semantics where transition labels records requirements on names.
Reference: [RS90] <author> V. Roy, R. de Simone. </author> <title> Auto and Autograph. </title> <booktitle> In Workshop on Computer Aided Verification, volume 531 of LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: By default the initial environment is the environment where each free name is associated with a distinct natural number. FC2 files can be given as input to the Autograph graphical tool <ref> [RS90] </ref>.
Reference: [San92] <author> D. Sangiorgi. </author> <title> Expressing Mobility in Process Algebras: First Order and Higher-Order Paradigms. </title> <type> PhD Thesis, </type> <institution> Department of Computer Science, University of Edinburgh, </institution> <year> 1992. </year>
Reference-contexts: In the -calculus mobility is achieved via the communication of names rather than communication of processes as happens in so called higher order process calculi (e.g. [Tho93]). Many issues of concurrent programming languages (e.g. the encoding of complex data structures as processes [MPW92], higher order processes <ref> [San92] </ref>) can be profitably analyzed by considering them in the abstract setting provided by the -calculus. Moreover, the -calculus has been adopted as a design tool for the development of a concurrent object oriented programming language [Pie94].
Reference: [San93] <author> D. Sangiorgi. </author> <title> A Theory of Bisimulation for the -calculus. </title> <booktitle> In CONCUR'93, volume 715 of LNCS, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: [Mil89] (and related "static" process calculi), the semantic-based verification tools developed for static process calculi (e.g. [CPS93], we refer to [IP91, Mad92] for a survey) cannot be directly "re-used" for the -calculus, and, up to now, the only available verification tool [VM94] decides a bisimulation equivalence which is rather strong <ref> [San93] </ref>. In [FMQ94, FMQ95] an alternative formulation the -calculus operational semantics has been proposed. There, contrary to the original definition, name substitutions are explicitly handled via the introduction of a suitable state operator. This allowed the characterization of -calculus operational semantics as ordinary (i.e. CCS-like) transition system semantics. <p> Decidability results for -calculus bisimulations were recently presented [Dam95, MP95] and the development of automated verification tools is at a beginning stage. The MWB (Mobility Workbench) [VM94] is, to our knowledge, the only automated tool for the -calculus. The basic functionality of the MWB is checking open bisimulation equivalence <ref> [San93] </ref>, which is stronger than both late and early equivalences. The MWB algorithm for checking bisimilarity follows the "on the fly" style [FM91] which requires the generation of the state spaces of the two processes during the construction of the bisimulation.
Reference: [Tho93] <author> B. Thomsen. </author> <title> Plain Chocs. </title> <journal> Acta Informatica, </journal> <volume> 30, </volume> <year> 1993. </year>
Reference-contexts: In the -calculus mobility is achieved via the communication of names rather than communication of processes as happens in so called higher order process calculi (e.g. <ref> [Tho93] </ref>). Many issues of concurrent programming languages (e.g. the encoding of complex data structures as processes [MPW92], higher order processes [San92]) can be profitably analyzed by considering them in the abstract setting provided by the -calculus.
Reference: [VM94] <author> B. Victor, F. Moller. </author> <title> The Mobility Workbench: A Tool for the - calculus. In CAV'94, </title> <publisher> LNCS, Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: More specifically, even if the -calculus generalizes CCS [Mil89] (and related "static" process calculi), the semantic-based verification tools developed for static process calculi (e.g. [CPS93], we refer to [IP91, Mad92] for a survey) cannot be directly "re-used" for the -calculus, and, up to now, the only available verification tool <ref> [VM94] </ref> decides a bisimulation equivalence which is rather strong [San93]. In [FMQ94, FMQ95] an alternative formulation the -calculus operational semantics has been proposed. There, contrary to the original definition, name substitutions are explicitly handled via the introduction of a suitable state operator. <p> In the case of the -calculus, the issues related to program verification are under investigation. Decidability results for -calculus bisimulations were recently presented [Dam95, MP95] and the development of automated verification tools is at a beginning stage. The MWB (Mobility Workbench) <ref> [VM94] </ref> is, to our knowledge, the only automated tool for the -calculus. The basic functionality of the MWB is checking open bisimulation equivalence [San93], which is stronger than both late and early equivalences.
References-found: 28

