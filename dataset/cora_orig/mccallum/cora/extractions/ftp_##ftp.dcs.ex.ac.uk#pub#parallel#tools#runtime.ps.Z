URL: ftp://ftp.dcs.ex.ac.uk/pub/parallel/tools/runtime.ps.Z
Refering-URL: http://www.dcs.ex.ac.uk/reports/reports.html
Root-URL: 
Email: Email: steve@dcs.exeter.ac.uk  
Phone: Fax: +44 392 264067  
Title: An Approach to the Run-Time Monitoring of Parallel Programs  Running Title: Run-Time Monitoring Corresponding Author:  
Author: Wentong Cai Stephen J. Turner Name: Dr Stephen J. Turner 
Note: Address: Parallel Systems Research  currently with the  
Date: February 26, 1994  
Address: Ontario, Canada K7L 3N6  Exeter, EX4 4PT, England  Road, Exeter EX4 4PT England  Telex: 42894 EXUNIV G  Singapore 2263  
Affiliation: Department of Computing and Information Science Queen's University at Kingston  Department of Computer Science University of Exeter  Group, Department of Computer Science, University of Exeter, Prince of Wales  School of Applied Science, Nanyang Technological University,  
Abstract-found: 0
Intro-found: 1
Reference: <author> Aspnas, M. and L-angbacka, T. </author> <title> (1991) A Monitoring System for a Transputer-based Multiprocessor. </title> <editor> In Welch, P. et al., (eds), </editor> <booktitle> Proceedings of Transputing '91, </booktitle> <volume> Vol. 1, </volume> <pages> pp. 78-93, </pages> <publisher> IOS Press. </publisher>
Reference-contexts: The degree to which the probe-effect is intrusive will depend on the monitoring approach adopted. There are some monitoring methods, relying on extensive hardware support, which do not affect, in a noticeable way, the behaviour of the programs being observed <ref> (Aspnas and L-angbacka 1991, Wybranietz and Haban 1988) </ref>. However, such hardware support can be an expensive addition to the machine and is not always feasible. The alternative is to use a software approach, which obtains information using software only hooks.
Reference: <author> Cai, W. </author> <title> (1991) Parallel Program Monitoring | the Logical Clock Approach and its Deadlock Avoidance. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, University of Exeter. </institution>
Reference-contexts: Sending of requests and waiting for permissions could be implemented either by occam channel communication (high level) or by transputer instructions (low level). The low level implementation <ref> (Cai 1991) </ref> makes it possible to insert monitoring hooks either into the object code by the compiler (e.g., as in Harter and Heimbigner (1985)), or into the executable code by the monitor when it is running together with the monitored program (e.g., as in d'Acierno et al. (1990)).
Reference: <author> Cai, W., Milne, W.J. and Turner, S.J. </author> <title> (1993) Graphical Views of the Behaviour of Parallel Programs. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18, </volume> <pages> 223-230. </pages>
Reference-contexts: Therefore, the logical clock approach can be used to construct a run-time and interactive debugger or performance analyzer. As a result, sequential debugging techniques such as break-points can be used, and program behaviour can be graphically displayed during monitoring <ref> (Cai et al. 1993) </ref>. The logical clock approach can support performance analysis in the following two ways: first, although the execution of the monitored program is slowed down (perhaps significantly), there is very little disturbance of the execution time as measured using logical time. <p> However, the experience has also shown that in order to achieve higher transparency, the design of the logical clock communication control policies should be consistent with the implementation of the programming language in which the monitored programs are written (e.g., as in the monitoring of ALT communication in occam <ref> (Cai and Turner 1993) </ref>). 22 The transputer and occam are representative of many message passing systems and the logical clock approach described in this paper can be similarly applied to other distributed memory architectures.
Reference: <author> Cai, W. and Turner, S.J. </author> <title> (1989) Highly Transparent Monitoring of Real-time occam Programs. </title>
Reference-contexts: Moreover, sometimes software errors may only manifest themselves when running with the real-time data. The second approach is therefore adopted in the implementation <ref> (Cai and Turner 1989) </ref>. 5 Operational Study In this study, an analysis of transparency is conducted by comparing the logical clock approach with the probe approach (West 1987), a software approach for monitoring occam programs on transputers.
Reference: <editor> In Board, J.A. (ed), </editor> <booktitle> Transputer Research and Applications 2, Proceedings of the 2nd North American Transputer User Group Meeting, </booktitle> <pages> pp. 42-53, </pages> <publisher> IOS Press. </publisher>
Reference: <author> Cai, W. and Turner, S.J. </author> <title> (1990) An Algorithm for Distributed Discrete-event Simulation | the `Carrier-Null Message' Approach. </title> <editor> In Nicol, D. (ed), </editor> <booktitle> Proceedings of SCS Multiconference on Distributed Simulation 1990, </booktitle> <pages> pp. 3-8, </pages> <publisher> SCS. </publisher>
Reference: <author> Cai, W. and Turner, S.J. </author> <title> (1993) Process Scheduling and Program Monitoring on Transputers. </title>
Reference-contexts: Therefore, the logical clock approach can be used to construct a run-time and interactive debugger or performance analyzer. As a result, sequential debugging techniques such as break-points can be used, and program behaviour can be graphically displayed during monitoring <ref> (Cai et al. 1993) </ref>. The logical clock approach can support performance analysis in the following two ways: first, although the execution of the monitored program is slowed down (perhaps significantly), there is very little disturbance of the execution time as measured using logical time. <p> However, the experience has also shown that in order to achieve higher transparency, the design of the logical clock communication control policies should be consistent with the implementation of the programming language in which the monitored programs are written (e.g., as in the monitoring of ALT communication in occam <ref> (Cai and Turner 1993) </ref>). 22 The transputer and occam are representative of many message passing systems and the logical clock approach described in this paper can be similarly applied to other distributed memory architectures.
Reference: <editor> In Atkins, S. and Wagner, A.S. (eds), </editor> <booktitle> Transputer Research and Applications 6, Proceedings of the 6th North American Transputer User Group Meeting, </booktitle> <pages> pp. 290-305, </pages> <publisher> IOS Press. </publisher>
Reference: <author> Chandy, K.M. and Misra, J. </author> <title> (1979) Distributed Simulation: A Case Study in Design and Verification of Distributed Programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-5, </volume> <pages> 440-452. </pages> <note> d'Acierno, </note> <author> A., De Pietro, G., and Villano, U. </author> <title> (1990) A Method for Monitoring occam Internal Channels. </title> <editor> In Turner, S.J. (ed), </editor> <booktitle> Tools and Techniques for Transputer Applications, Proceedings of 12th Occam User Group Meeting, </booktitle> <pages> pp. 190-197, </pages> <publisher> IOS Press. </publisher>
Reference: <author> Dowsing, R.D. </author> <title> (1988) Introduction to Concurrency Using Occam. </title> <publisher> Van Nostrand Reinhold. </publisher>
Reference-contexts: By contrast, the transparency of the probe approach decreases dramatically as the time of operation required by the monitor increases. Thus, without decreasing transparency, the logical clock approach can be used to display graphically the execution information at run-time. 5.2 Monitoring a Real-Time Application This system <ref> (Dowsing 1988) </ref>, which consists of multiple readers and writers (MRW), is shown in figure 12. Several writers compete for sending their books (or whatever) to the readers, and several readers also compete for receiving these books.
Reference: <author> Gait, J. </author> <title> (1985) A Debugger for Concurrent Programs. </title> <journal> Software Practice and Experience, </journal> <volume> 15, </volume> <pages> 539-554. </pages>
Reference-contexts: The alternative is to use a software approach, which obtains information using software only hooks. To reduce the intrusiveness of this method, a fast call is normally necessary: that is, as few operations as possible must be executed for each action which extracts information <ref> (Gait 1985, West 1987) </ref>. Consequently, for both hardware and software approaches, the analysis of a program is usually two-folded: a monitoring phase followed by a post-mortem analysis. During monitoring, information about the program's execution is recorded only.
Reference: <author> Harter, P.K. Jr and Heimbigner, D.M. </author> <year> (1985) </year> <month> IDD: </month> <title> An Interactive Distributed Debugger. </title> <booktitle> In Proceedings of 5th International Conference on Distributed Computing Systems, </booktitle> <pages> pp. 498-506, </pages> <editor> IEEE. </editor> <title> 23 Inmos. (1988a) Transputer Instruction Set | A Compiler Writer's Guide. </title> <publisher> Prentice Hall. </publisher> <editor> Inmos. </editor> <title> (1988b) Transputer Reference Manual. </title> <publisher> Prentice Hall. </publisher>
Reference: <author> Kerridge, J. </author> <title> (1987) Occam Programming: A Practical Approach. </title> <publisher> Blackwell. </publisher>
Reference-contexts: difficult to ensure the transparency of monitoring; * It is generally believed that it is very difficult to monitor a real-time distributed system because of the intrusive nature of monitoring and the real-time system's time critical requirements. 5.1 Monitoring a Communication Race System The multiple producers and consumer (MPC) program <ref> (Kerridge 1987) </ref> is shown in figure 11.
Reference: <author> Lamport, L. </author> <title> (1978) Time, Clocks, and the Ordering of Events in a Distributed System. </title> <journal> Communications of the ACM, </journal> <volume> 21, </volume> <pages> 558-565. </pages>
Reference-contexts: In the next section, the theoretical background to this approach is introduced, based on Lam-port's temporal ordering of distributed systems <ref> (Lamport 1978) </ref>, together with the interpretation of this theory in transparently monitoring parallel programs. Sections 3 to 5 then describe respectively the logical clock approach, its implementation, and an operational study.
Reference: <author> Leblanc, T.J. and Mellor-Crummey, J.M. </author> <title> (1987) Debugging Parallel Programs with Instant Replay. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36, </volume> <pages> 471-482. </pages>
Reference-contexts: During monitoring, information about the program's execution is recorded only. In the post-mortem phase, debugging or performance analysis can be conducted either by analyzing the information collected (Snodgrass 1988) or by replaying the program's execution according to this information <ref> (LeBlanc and Mellor-Crummey 1987) </ref>. However, none of the current hardware or software approaches can easily support the run-time and interactive analysis frequently employed by sequential debugging techniques. Such tools that do exist usually fail to preserve the scheduling semantics of the program.
Reference: <author> Mitchell, D.A.P., Thompson, J.A., Manson, G.A. and Brookes, </author> <title> G.R. </title> <booktitle> (1990) Inside the Trans-puter. </booktitle> <publisher> Blackwell Scientific Publications. </publisher>
Reference: <author> Plattner, B. </author> <title> (1984) Real-time Execution Monitoring. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10, </volume> <pages> 756-776. </pages>
Reference-contexts: The test data supply can be slowed down to couple properly with the execution of the monitored application. An alternative is to introduce a virtual target <ref> (Plattner 1984) </ref> which can lag behind the real-time target by inserting buffers between them. Data acquisition is then achieved by the virtual target and the monitored application 17 (b)(a) To Monitor C2 QPQP Probe cooperating in the same way as the real-time target and the unmonitored application.
Reference: <author> Pountain, R. and May, D. </author> <title> (1987) A Tutorial Introduction to occam Programming. </title> <publisher> Blackwell. </publisher>
Reference-contexts: Since the occam language concerns itself with the time dimension in a far more profound way than do most conventional programming languages, with the issues of concurrency and synchronization tackled in its deep structure <ref> (Pountain and May 1987) </ref>, this makes it a real challenge to apply the logical clock approach. We have therefore implemented the logical clock approach in monitoring occam programs on transputer networks (Inmos 1988b).
Reference: <author> Schiffenbauer, R.D. </author> <title> (1981) Interactive Debugging in a Distributed Computational Environment. MIT/LCS/Tech. </title> <type> Rep. 264., </type> <institution> Computer Science Division, Dept. EECS, Massachusetts Institute of Technology, Cambridge, Massachusetts, USA. </institution>
Reference: <author> Snodgrass, R. </author> <title> (1988) A Relational Approach to Monitoring Complex Systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6, </volume> <pages> 157-196. </pages>
Reference-contexts: During monitoring, information about the program's execution is recorded only. In the post-mortem phase, debugging or performance analysis can be conducted either by analyzing the information collected <ref> (Snodgrass 1988) </ref> or by replaying the program's execution according to this information (LeBlanc and Mellor-Crummey 1987). However, none of the current hardware or software approaches can easily support the run-time and interactive analysis frequently employed by sequential debugging techniques.
Reference: <author> West, A.J. </author> <title> (1987) Monitoring occam Processes. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, University of Manchester. </institution>
Reference-contexts: Moreover, sometimes software errors may only manifest themselves when running with the real-time data. The second approach is therefore adopted in the implementation (Cai and Turner 1989). 5 Operational Study In this study, an analysis of transparency is conducted by comparing the logical clock approach with the probe approach <ref> (West 1987) </ref>, a software approach for monitoring occam programs on transputers. The general idea of the probe approach is to insert a probe process between any two communicating processes in order to trap any inter-process communication.
Reference: <author> Wybranietz, D. and Haban, D. </author> <title> (1988) Monitoring and Performance Measuring Distributed Systems during operation. </title> <booktitle> In Proceedings of the 1988 ACM SIGMETRICS Conference on Measurement and Modeling of Computer Systems, </booktitle> <pages> pp. 197-206, </pages> <publisher> ACM. </publisher> <pages> 24 </pages>
References-found: 22

