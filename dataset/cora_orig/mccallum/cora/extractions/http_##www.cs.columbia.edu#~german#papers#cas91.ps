URL: http://www.cs.columbia.edu/~german/papers/cas91.ps
Refering-URL: http://www.cs.columbia.edu/~german/papers.html
Root-URL: http://www.cs.columbia.edu
Title: Network Management by Delegation The MAD Approach  German  
Author: Goldszmidt, Yechiam Yemini Shaula Yemini 
Affiliation: Computer Science Dept., Columbia University  IBM T. J. Watson Research Center  
Date: October 1991.  
Note: In Proceedings of the IBM/CAS Conference, Toronto, Canada,  
Abstract: Network management systems built on a client/server model centralize responsibilities in client manager processes, with server agents playing restrictive support roles. As a result, managers must micro-manage agents through primitive steps, resulting in ineffective distribution of management responsibilities, failure-prone management bottlenecks, and limitations for real time responsiveness. We present a more flexible paradigm, the Manager-Agent Delegation (MAD) framework. It supports the ability to extend the functionality of servers (agents) at execution time, allowing flexible distribution of management responsibilities in a distributed environment. MAD can store and instantiate delegated scripts, and provides a concurrent runtime environment, where they can execute asynchronously without requiring the manager's intervention. A delegation protocol allows a manager to transfer programs, create process instances, and control their execution. We describe the delegation model, its application to network management, and the design of a prototype implementation. 
Abstract-found: 1
Intro-found: 1
Reference: [Ada82] <institution> Reference Manual for the Ada Programming Language, D.O.D, Ada, Joint Program Office, </institution> <month> July </month> <year> 1982. </year>
Reference: [BN84] <author> Birrell A. and Nelson P., </author> <title> "Implementing Remote Procedure Calls", </title> <journal> ACM TOCS, </journal> <pages> 2-1, </pages> <month> Feb. 84. </month>
Reference-contexts: For example, they could provide the ability to specify management operations as temporal operators over traces [GKY90]. 6 Models for Manager/Agent Interaction In this section we review existing models of process interactions, and evaluate their suitability for resolving the micro-management problem. The remote procedure call (RPC) interaction paradigm <ref> [BN84] </ref> is widely used for structuring distributed systems. In this model, a server exports a number of fixed procedures that can be invoked by remote clients.
Reference: [CMIS89] <author> ISO, </author> <title> Information Processing systems, Open System Interconnection, Management Information Service Definition Part 2: Common Management Information Service Element, </title> <month> December </month> <year> 1989. </year>
Reference-contexts: To compute an error rate or determine its variation or its relationship with other counters, managers need to frequently query the agent to obtain the value. Standardization efforts have focused primarily on management protocols and the structure of management information <ref> [Rose91, CMIS89] </ref>. The management model that they are based on, however, is only partially elaborated: the management needs and styles to be used are tacitly assumed, and the software architecture required to support the model is left unspecified. <p> The manger must thus use the management protocol to transfer execution responsibilities to the agent to process the script. What does it take to accomplish execution of this script using a network management protocol such as CMIP? The OSI CMIS management model <ref> [CMIS89] </ref>, for example, distributes management responsibilities through the following manager-agent interaction primitives: creation (M-CREATE) and deletion (M-DELETE) of managed object instances; retrieval (M-GET) and setting (M-SET) of managed objects attributes; reporting of events (M-EVENT-REPORT); and invocation of actions (M-ACTION).
Reference: [GKY90] <author> Goldszmidt G., Katz S. and Yemini S., </author> <title> "High-Level Language Debugging for Concurrent Programs", </title> <journal> ACM Trans. on Computer Systems, </journal> <month> November </month> <year> 1990. </year>
Reference-contexts: From an implementation perspective, these new primitives can be considered macro-extensions that can be compiled into any general-purpose programming language (e.g. C), or they can be interpreted by the agent. For example, they could provide the ability to specify management operations as temporal operators over traces <ref> [GKY90] </ref>. 6 Models for Manager/Agent Interaction In this section we review existing models of process interactions, and evaluate their suitability for resolving the micro-management problem. The remote procedure call (RPC) interaction paradigm [BN84] is widely used for structuring distributed systems.
Reference: [GT91] <author> Goldszmidt G., and Tuller J., </author> <title> The Design and Implementation of the MAD System: </title> <type> Project Report", </type> <institution> Computer Science Dept., Columbia University, </institution> <note> Working Draft, </note> <year> 1991 </year>
Reference-contexts: Delegated Management Process Instances (DMPIs), and Observation and Control Points (OCPs), execute as independent processes inside the agent. A prototype MAD Agent supporting all the above functionality has been implemented <ref> [GT91] </ref>. Most of the above components are implemented as one or more independent threads, and full address space processes. 4.1 Controller The controller contains the main logic of the Mad agent, that is, a specific algorithm that the particular agent should execute. <p> OCPs can locally store the values of attributes, caching frequently used information. Finally, OCPs provide granularity of access control, e.g. a given DMP can obtain bindings to a specific OCP but not to others. A sample OCP implemented with the Mad prototype <ref> [GT91] </ref> uses the SNMP protocol to access network objects. It also provides a translation facility between SNMP and manager-defined name spaces, and it provides concurrent access to the DMPIs. 4.6 Delegated Management Processes Instances A process DMPI is instantiated from a DMP template, via the Mad Instantiate call. <p> The object code generated by the compilation is then stored in the agent's repository. Thus, a Mad agent can use a combination of compile time pre-processing and runtime authentication to enforce specific sub-language constraints. The MSL used in the current prototype <ref> [GT91] </ref> is a subset of C, which restricts the capability to invoke arbitrary external functions. Thus, a DMP can only invoke external functions made available in a Mad Application Programming Interface (MADAPI) library. <p> However, both models involve synchronous procedure-call interactions whereby the agent executes the management program upon invocation, while the caller is blocked until completion. Thus neither technique proves to be adequate for management in a distributed environment. 7 Status The MAD prototype <ref> [GT91] </ref>, has successfully demonstrated the delegation model of network management. It can receive, compile, link, and execute complex management scripts from remote manager processes. The scripts can execute asynchronously from their delegating manager and take independent action, eliminating the micro-management problem.
Reference: [GY91] <author> Goldszmidt G. and Yemini Y., </author> <title> "The Design of a Management Delegation Engine", </title> <booktitle> Proceedings of the IFIP/IEEE International Workshop on Distributed Systems: </booktitle> <institution> Operations and Management, Santa Barbara, California, </institution> <month> October </month> <year> 1991. </year> <title> [IEEE90] "Working Implementation Agreements for Open Systems Interconnection Protocols", Boland, F.E., Editor, </title> <journal> IEEE Computer Society Press,Vol. </journal> <volume> 2, Number 2., </volume> <booktitle> 1990. [IFIP89] "Proceedings of the IFIP TC6/WG 6.6 Symposium on Integrated Network Management", </booktitle> <publisher> North-Holland, </publisher> <editor> B. Meandzija and J. Westcott (eds.), </editor> <month> May </month> <year> 1989. </year>
Reference: [ISO89] <author> Information Processing Systems, </author> <title> Open Systems Interconnection, Systems Management Overview, December 1989 [KMW90] "Network Management and Control", </title> <publisher> 1990 Plenum Press, </publisher> <editor> Kershenbaum A., Malek M. and Wall M., editors, </editor> <booktitle> proceedings of the Network Management and Control Workshop, </booktitle> <month> September </month> <year> 1989. </year>
Reference-contexts: The management problem presents fl Part of the work of the first author was done while at IBM T.J. Watson Research Center 1 a broad range of non-trivial technical challenges (see [DSYBC89] for sample problems). There are growing efforts by vendors, standards committees <ref> [ISO89] </ref> and the research community [IFIP89, KMW90], to establish manageable systems. The technical problems involved in accomplishing manageability are not yet fully understood and so their research is still in an embryonic stage.
Reference: [Rose90] <author> Rose M.T., </author> <title> "The Open Book, A Practical Perspective on OSI", </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: The prototype includes the following components: 1. The MAD Kernel: Includes a preemptive scheduler, a message-passing IPC service over shared memory, a name service, and a DMPI process manager. 2. A simple Mad Agent Controller 3. An implementation of the delegation protocol, using ASN.1 presentation services <ref> [Rose90] </ref> and TCP/IP transport services. 4. A DMP repository: A storage and retrieval facility for delegated programs. 5. A Translator supporting DMPs written in C and C++. 6.
Reference: [Rose91] <author> Rose M.T., </author> <title> "The Simple Book, An introduction to Management of TCP/IP--based Internets", </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: There are growing efforts by vendors, standards committees [ISO89] and the research community [IFIP89, KMW90], to establish manageable systems. The technical problems involved in accomplishing manageability are not yet fully understood and so their research is still in an embryonic stage. A typical network management system, <ref> [Rose91] </ref> involves agents, which are responsible for monitoring and controlling managed-objects of the network, and managers, which have the responsibility for collecting dynamic status data from the agents, interpreting that data, and directing the agents (e.g., how to handle fault scenarios). <p> To compute an error rate or determine its variation or its relationship with other counters, managers need to frequently query the agent to obtain the value. Standardization efforts have focused primarily on management protocols and the structure of management information <ref> [Rose91, CMIS89] </ref>. The management model that they are based on, however, is only partially elaborated: the management needs and styles to be used are tacitly assumed, and the software architecture required to support the model is left unspecified.
Reference: [SG90] <author> Stamos J.W. and Gifford D.K., </author> <title> "Implementing Remote Evaluation", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol 16, No 7, </volume> <pages> pp 710-722, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Furthermore, coding such scripts into the agent would significantly increase its complexity and costs. Remote evaluation (REV) <ref> [SG90] </ref> is another interaction paradigm for processes in distributed systems. It allows a procedure (written in a LISP [A dialect) to be trasfered from a client to a server where an interpreter will execute it.
Reference: [Sun88] <author> Sun MicroSystems, </author> <title> "Systems Services Overview", Part Number: </title> <address> 800-1753-10, </address> <month> May </month> <year> 1988 </year>
Reference: [TR88] <author> Tanembaum, A.S. and van Renesse, R., </author> <title> "A critique of the Remote Procedure Call Paradigm", Research into Networks and Distributed Applications (Edt. by R. </title> <publisher> Speth), Elsevier Science Publishers B.V. (North Holland), </publisher> <month> Apr </month> <year> 1988. </year>
Reference: [YGY91] <author> Yemini Y., Goldszmidt G. and Yemini S., </author> <title> "Network Management by Delegation", </title> <booktitle> The Second IFIP International Symposium on Integrated Network Management, </booktitle> <address> Washington, D.C., </address> <month> April </month> <year> 1991. </year>
References-found: 13

