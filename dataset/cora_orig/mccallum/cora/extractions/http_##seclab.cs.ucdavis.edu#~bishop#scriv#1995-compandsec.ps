URL: http://seclab.cs.ucdavis.edu/~bishop/scriv/1995-compandsec.ps
Refering-URL: http://seclab.cs.ucdavis.edu/~bishop/scriv/index.html
Root-URL: http://www.cs.ucdavis.edu
Email: bishop@cs.ucdavis.edu  dvk@lonewolf.com  
Phone: +1 916 752 8060  +1 412 242 5245  
Title: Improving System Security via Proactive Password Checking  
Author: Matt Bishop Daniel V. Klein 
Address: Davis, CA 95616-8562  133 Lanford Drive Pittsburgh, PA 15235-1856  
Affiliation: Department of Computer Science University of California at Davis  LoneWolf Systems, Inc.  
Abstract: As the Internet has grown, its user community has changed from a small tight knit group of researchers to a loose gathering of people on a global network. The amazing and constantly growing numbers of machines and users ensures that untrustworthy individuals have full access to that network. High speed inter-machine communication and even higher speed computational processors have made the threats of system ``crackers'', data theft, data corruption very real. This paper outlines some of the problems of current password security by demonstrating the ease by which individual accounts may be broken. Various techniques used by crackers are outlined, and finally one solution to this point of system vulnerability, a proactive password checker, is documented.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Robert T. Morris and Ken Thompson, </author> <title> ``Password Security: A Case History,'' </title> <journal> Communications of the ACM, </journal> <volume> vol. 22, no. 11, </volume> <pages> pp. 594-597, </pages> <month> November </month> <year> 1979. </year> <title> [2] ``Proposed Federal Information Processing Data Encryption Standard,'' Federal Register (40FR12134), </title> <address> March 17, </address> <year> 1975. </year>
Reference-contexts: 1. Introduction The security of accounts and passwords has always been a concern for the developers and users of UNIX systems. When UNIX was younger, the password encryption algorithm was a simulation of the M-209 cipher machine used by the U.S. Army during World War II <ref> [1] </ref>. This was a fair encryption mechanism in that it was difficult to invert under the proper circumstances, but suffered in that it was too fast an algo rithm.
Reference: [3] <author> Matt Bishop, </author> <title> ``An Application of a Fast Data Encryption Standard Implementation,'' </title> <journal> Computing Systems, </journal> <volume> vol. 1, no. 3, </volume> <pages> pp. 221-254, </pages> <month> Summer </month> <year> 1988. </year>
Reference-contexts: Computers and Security 14 (3) pp. 233-249 (1995) - 3 - 2) New implementations of the DES encryption algorithm have been developed, so that the time it takes to encrypt a password and compare the encryption against the value stored in the password file has dropped below the 1ms mark <ref> [3, 4] </ref>. On a single workstation, the dictionary of 250,000 words can once again be cracked in well under five minutes. By dividing the work across multiple workstations, the time required to encrypt these words against all 4096 salt values could be no more than an hour or so.
Reference: [4] <author> David C. Feldmeier and Philip R. Karn, </author> <title> ``UNIX Password Security - Ten Years Later,'' </title> <booktitle> CRYPTO Proceedings, </booktitle> <month> Summer </month> <year> 1989. </year>
Reference-contexts: Computers and Security 14 (3) pp. 233-249 (1995) - 3 - 2) New implementations of the DES encryption algorithm have been developed, so that the time it takes to encrypt a password and compare the encryption against the value stored in the password file has dropped below the 1ms mark <ref> [3, 4] </ref>. On a single workstation, the dictionary of 250,000 words can once again be cracked in well under five minutes. By dividing the work across multiple workstations, the time required to encrypt these words against all 4096 salt values could be no more than an hour or so.
Reference: [5] <author> Philip Leong and Chris Tham, </author> <title> ``UNIX Password Encryption Considered Insecure,'' </title> <booktitle> USENIX Winter Conference Proceedings, </booktitle> <month> January </month> <year> 1991. </year>
Reference-contexts: With a recently described hardware implementation of the DES algorithm, the time for each encryption can be reduced to approximately 6 ms <ref> [5] </ref>. This means that this same dictionary could be cracked in only 1.5 seconds. 3) Users are rarely educated as to what are wise choices for passwords.
Reference: [6] <author> Daniel V. Klein, </author> <title> ````Foiling the Cracker'' ASurvey of and Improvements to UNIX Password Security,'' </title> <booktitle> Proceedings of the USENIX Security Workshop, </booktitle> <month> Summer </month> <year> 1990. </year>
Reference-contexts: If a match is found (and usually at least one will be) <ref> [6] </ref>, the cracker has access to the targeted machine. Appeared in Computers and Security 14 (3) pp. 233-249 (1995) - 5 - This mode of attack has been known for some time [Morris1979] [7], and the defenses against this attack have also long been known.
Reference: [7] <author> Eugene H. Spafford, </author> <title> ``The Internet Worm Program: An Analysis,'' </title> <type> Purdue Technical Report CSD-TR-823, </type> <institution> Purdue University, </institution> <month> November 29, </month> <year> 1988. </year>
Reference-contexts: If a match is found (and usually at least one will be) [6], the cracker has access to the targeted machine. Appeared in Computers and Security 14 (3) pp. 233-249 (1995) - 5 - This mode of attack has been known for some time [Morris1979] <ref> [7] </ref>, and the defenses against this attack have also long been known. How well sites protect themselves from the various modes of attack varies greatly from site to site.
Reference: [8] <author> Bruce L. Riddle, Murray S. Miron, and Judith A. Semo, </author> <title> ``Passwords in Use in a University Timesharing Environment,'' </title> <journal> Computers & Security, </journal> <volume> vol. 8, no. 7, </volume> <pages> pp. 569-579, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: It should be noted that the results of this testing do not give us any indication as to what the uncracked passwords are. Rather, it only tells us what was essentially already known - that users are likely to use words that are familiar to them as their passwords <ref> [8] </ref>.
Reference: [9] <author> Ana Marie De Alvare and E. Eugene Schultz, Jr., </author> <title> ``A Framework for Password Selection,'' </title> <booktitle> USENIX UNIX Security Workshop Proceedings, </booktitle> <month> August </month> <year> 1988. </year>
Reference-contexts: Passwords which can be derived from a dictionary are clearly a bad idea <ref> [9] </ref>, and users should be prevented from using them. Of course, as part of this censoring process, users should also be told why their proposed password is not good, and what a good class of password would be. 2.2.
Reference: [10] <author> T. Raleigh and R. Underwood, </author> <title> ``CRACK: A Distributed Password Advisor,'' </title> <booktitle> USENIX UNIX Security Workshop Proceedings, </booktitle> <month> August </month> <year> 1988. </year>
Reference-contexts: One approach to eliminating easy-to-guess passwords is to periodically run a password checker - a program which scans /etc/passwd and tries to break the passwords in it <ref> [10, 11] </ref>. This approach has two major drawbacks. The first is that the checking is very time consuming. Even a system with only 100 accounts can take over a month to diligently check.
Reference: [11] <author> Alec Muffett, Crack, </author> <year> 1992. </year> <note> Available via anonymous ftp from cert.org. </note>
Reference-contexts: One approach to eliminating easy-to-guess passwords is to periodically run a password checker - a program which scans /etc/passwd and tries to break the passwords in it <ref> [10, 11] </ref>. This approach has two major drawbacks. The first is that the checking is very time consuming. Even a system with only 100 accounts can take over a month to diligently check.
Reference: [12] <author> Dr. Brian K Reid, </author> <note> DEC Western Research Laboratory, </note> <year> 1989. </year> <type> Personal communication. </type>
Reference-contexts: Experience has shown that even when this type of password cycling is precluded, users are easily able to circumvent simple tests by using easily remembered (and easily guessed) passwords such as ``dvkJanuary'', ``dvkFebruary'', etc. <ref> [12] </ref> A good password is one that is easily remembered, yet difficult to guess.
Reference: [13] <institution> UNIX User's Reference Manual, 4.3 Berkeley Software Distribution -11 Version, Computer Science Research Group, Department of Electrical Engineering and Computer Science, University of Califor-nia, Berkeley, </institution> <address> CA, </address> <month> April </month> <year> 1986. </year>
Reference-contexts: Otherwise, the tests may be bypassed and a weak password installed on the system. (Most UNIX system password changing programs fail this test, as after three tries weak passwords are allowed <ref> [13] </ref>). 2) The checker must be able to reject any password in a set of common passwords, or which is a transformation of common passwords.
Reference: [14] <author> Jerome Saltzer and Michael Schroeder, </author> <title> ``The Protection of Information in Computer Systems,'' </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 63, no. 9, </volume> <pages> pp. 1278-1308, </pages> <month> September </month> <year> 1975. </year>
Reference-contexts: Appeared in Computers and Security 14 (3) pp. 233-249 (1995) - 12 - 4) The checker must allow per-site discrimination in its tests. In some sense, any checker allows this as it can be modified and recompiled. However, the principle of psychological acceptability <ref> [14] </ref> implies that modifying a set of tests be less cumbersome; so, a configuration file best implements this requirement.
Reference: [15] <author> Harold Joseph Highland, </author> <title> ``Random Bits and Bytes: Testing a Password System,'' </title> <journal> Computers and Security, </journal> <volume> vol. 11, no. 2, </volume> <pages> pp. 110-113, </pages> <month> April </month> <year> 1992. </year>
Reference: [16] <author> Alec Muffett, Crack, </author> <year> 1992. </year> <note> Available for anonymous ftp from cert.org. </note>
Reference: [17] <author> Aeleen Frisch, </author> <title> Essential System Administration, </title> <publisher> O'Reilly and Associates, </publisher> <address> Sebastopol, CA, </address> <year> 1991. </year> <note> Appeared in Computers and Security 14(3) pp. </note> <month> 233-249 </month> <year> (1995) </year>
References-found: 16

