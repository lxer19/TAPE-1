URL: http://www.cs.mu.oz.au/tr_db/mu_94_15.ps.gz
Refering-URL: http://www.cs.mu.oz.au/tr_db/TR.html
Root-URL: 
Title: Dynamic Queries: Interface issues for text databases  
Author: Alexander M c Cooke, Lorraine Johnston, and Liz Sonenberg 
Abstract: Technical Report 94/15 Dept. of Computer Science The University of Melbourne Parkville, Victoria 3052, Australia Email:famccooke,ljj,easg@cs.mu.oz.au March 11, 1994 Abstract We present an interface model for supporting dynamic queries over text databases. The main objective is to support the user in browsing the database, in particular to facilitate the formulation of queries which have a recognisable result, but where the values for the query parameters required to produce this result are not easily predicted by the user. We describe two prototype implementations within this framework, one for accessing a bibliographic database, the other to view archived network news articles. Both implementations build a new interface to existing data, leading to a discussion of issues concerning coupling between the interface and the database. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Christopher Ahlberg, Christopher Williamson, and Ben Shneiderman. </author> <title> "Dynamic queries for information exploration: An implementation and evaluation". </title> <editor> In Penny Bauersfeld, John Bennett, and Gene Lynch, editors, </editor> <booktitle> CHI Conference Proceedings: Striking a Balance, </booktitle> <pages> pages 619-626, </pages> <address> New York, </address> <month> May </month> <year> 1992. </year> <note> ACM. </note>
Reference-contexts: The output may be presented graphically, to aid interpretation by the user. The user is able to change the query parameters quickly and hence sees an `animated display' of the changing results. As defined by Ahlberg et. al. <ref> [1] </ref>, dynamic queries: represent the query graphically, provide visible limits on the query range, provide graphical representation of the result during every query adjustment, and allow novice users to begin working with little training, but still provide expert users with powerful features. <p> Chemical table viewer: An interface was created for the exploration of trends in the periodic table of elements, displayed on screen graphically. Queries were entered using sliders for parameters such as atomic number and mass. <ref> [1] </ref> DC Dynamic HomeFinder: A real estate system showing houses for sale in the DC area. Sliders and buttons are used to change parameters, such as the number of bedrooms or the presence of a garage.
Reference: [2] <author> Erran Carmel, Stephen Crawford, and Hsinchun Chen. </author> <title> "Browsing in hypertext: A cognitive study". </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 22(5) </volume> <pages> 865-883, </pages> <month> September/October </month> <year> 1992. </year>
Reference-contexts: Agents: These are autonomous programs that "know" how to find data [14]. Some argue that such interfaces take control from the user, and that direct manipulation is more effective [11, 22]. A model by Salomon, cited in Carmel et. al. <ref> [2] </ref>, suggests three types of browsing: "goal-directed search" (users looking for information on a defined goal); "goal-directed browsing" (users discover a goal during browsing); and "casual browsing" (no fixed goal).
Reference: [3] <author> Gene Golovchinsky and Mark Chignell. "Queries-R-Links: </author> <title> Graphical markup for text navigation". </title> <editor> In Stacey Ashlund, Kevin Mullet, Austin Henderson, Erik Hollnagel, and Ted White, editors, </editor> <booktitle> INTERCHI Conference Proceedings: Bridges Between Worlds, </booktitle> <pages> pages 454-460, </pages> <address> New York, </address> <month> April </month> <year> 1993. </year> <note> ACM. </note>
Reference-contexts: Boolean queries: A traditional querying method, but one which may be confusing for non-scientists due to the ambiguity of the words "and" and "or" in English. A number of graphical representations for boolean queries have been proposed to make them more user-friendly e.g., <ref> [3, 10, 23] </ref>. 3 VISUALISATION OPTIONS FOR TEXT OUTPUT DISPLAY 4 Approximate matching or ranking: Queries consist of a list of words; documents are ranked based on a heuristic of similarity with the query [26].
Reference: [4] <author> William C. Hill and James D. Hollan. "Edit wear and read wear". In Penny Bauersfeld, John Bennett, and Gene Lynch, </author> <title> editors, </title> <booktitle> CHI Conference Proceedings: Striking a Balance, </booktitle> <pages> pages 3-9, </pages> <address> New York, </address> <month> May </month> <year> 1992. </year> <note> ACM. </note>
Reference-contexts: The second shows additional information|a section of the bar is shown darker to represent the number of records retrieved by the current query that were also displayed by the previous one. New records are shown lighter in colour. Read-wear techniques: Hill et. al. <ref> [4] </ref> introduce the concepts of edit wear and read wear. In the real world, using an object leaves wear.
Reference: [5] <author> Brian Johnson. "TreeViz: </author> <title> Treemap visualization of hierarchically structured information". </title> <editor> In Penny Bauersfeld, John Bennett, and Gene Lynch, editors, </editor> <booktitle> CHI Conference Proceedings: Striking a Balance, </booktitle> <pages> pages 369-370, </pages> <address> New York, </address> <month> May </month> <year> 1992. </year> <note> ACM. </note>
Reference-contexts: An attribute mapped scroll bar could be used for the output list box. Longer bars representing records that have been seen many times. Tree-maps: A tree-map is a compact way to represent a hierarchical tree as a series of nested rectangles <ref> [5, 6] </ref>. Using and-or trees, tree-maps may represent boolean queries as shown in Figure 2 (a).
Reference: [6] <author> Brian Johnson and Ben Shneiderman. </author> <title> "Tree-maps: A space-filling approach to the visualization of hierarchical information structures". </title> <booktitle> In Proceedings of IEEE Visualization, </booktitle> <pages> pages 284-291, </pages> <year> 1991. </year>
Reference-contexts: An attribute mapped scroll bar could be used for the output list box. Longer bars representing records that have been seen many times. Tree-maps: A tree-map is a compact way to represent a hierarchical tree as a series of nested rectangles <ref> [5, 6] </ref>. Using and-or trees, tree-maps may represent boolean queries as shown in Figure 2 (a).
Reference: [7] <author> Jyoung-Joo Kim, Hentry F. Korth, and Avi Silberschatz. "PICASSO: </author> <title> A graphical Query Language". </title> <journal> Software|Practise and Experience, </journal> <volume> 18(3) </volume> <pages> 169-203, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Formal query languages: Languages such as SQL offer powerful querying but are not suitable for novice or occasional users. Graphical query languages: Numerous graphical languages have been developed. While easier to use than formal languages they still tend to require knowledge of the database structure, e.g., <ref> [8, 7, 18] </ref>. Agents: These are autonomous programs that "know" how to find data [14]. Some argue that such interfaces take control from the user, and that direct manipulation is more effective [11, 22].
Reference: [8] <author> James A. Larson. </author> <title> "A visual approach to browsing in a database environment". </title> <booktitle> IEEE Computer, </booktitle> <month> June </month> <year> 1986. </year>
Reference-contexts: Formal query languages: Languages such as SQL offer powerful querying but are not suitable for novice or occasional users. Graphical query languages: Numerous graphical languages have been developed. While easier to use than formal languages they still tend to require knowledge of the database structure, e.g., <ref> [8, 7, 18] </ref>. Agents: These are autonomous programs that "know" how to find data [14]. Some argue that such interfaces take control from the user, and that direct manipulation is more effective [11, 22].
Reference: [9] <author> Holmes S. Liao, Masakazu Osada, and Ben Shneiderman. </author> <title> "A formative evaluation of three interfaces for browsing directories using dynamic queries". </title> <type> Technical Report CAR REFERENCES 21 TR-605, </type> <institution> CS-TR-2841, Department of Computer Science, Human-Computer Interaction Laboratory, University of Maryland, College Park, MD, </institution> <year> 1992. </year>
Reference-contexts: 1 Introduction Dynamic queries have been proposed as a way to support browsing. They combine direct manipulation and visualisation, and facilitate fast iteration over similar queries, so that the user remains in control of the query process <ref> [9, 23] </ref>. Results are updated and displayed as the query is entered, and edited. The query parameters are usually controlled by manipulating graphical widgets, such as sliders and buttons, with a mouse. The output may be presented graphically, to aid interpretation by the user. <p> As sliders are changed a text box is updated to list the matching files. <ref> [9] </ref> Some existing applications can also be interpreted as using dynamic queries. <p> For text output, the overhead in retrieving data and rewriting the display may make this impractical. Rewriting a text display may also be confusing or distracting for the user <ref> [9, 23] </ref>. If the time taken to perform an update is noticeable to the user, the interface should remain active allowing the user to enter a new query or to start browsing the results before the update is completed.
Reference: [10] <author> A. Michard. </author> <title> "Graphical presentation of boolean expressions in a database query language: design notes and an ergonomic evaluation". </title> <journal> Behaviour and Information Technology, </journal> <volume> 1(3) </volume> <pages> 279-288, </pages> <year> 1982. </year>
Reference-contexts: Boolean queries: A traditional querying method, but one which may be confusing for non-scientists due to the ambiguity of the words "and" and "or" in English. A number of graphical representations for boolean queries have been proposed to make them more user-friendly e.g., <ref> [3, 10, 23] </ref>. 3 VISUALISATION OPTIONS FOR TEXT OUTPUT DISPLAY 4 Approximate matching or ranking: Queries consist of a list of words; documents are ranked based on a heuristic of similarity with the query [26].
Reference: [11] <author> Abbe Don (moderator), Susan Brennan, Renda Laurel, and Ben Shneiderman. </author> <title> "Panel: </title> <journal> Anthropomorphism: </journal> <note> From Eliza to Terminator 2". In Penny Bauersfeld, </note> <editor> John Bennett, and Gene Lynch, editors, </editor> <booktitle> CHI Conference Proceedings: Striking a Balance, </booktitle> <pages> pages 67-70, </pages> <address> New York, </address> <month> May </month> <year> 1992. </year> <note> ACM. </note>
Reference-contexts: Agents: These are autonomous programs that "know" how to find data [14]. Some argue that such interfaces take control from the user, and that direct manipulation is more effective <ref> [11, 22] </ref>. A model by Salomon, cited in Carmel et. al. [2], suggests three types of browsing: "goal-directed search" (users looking for information on a defined goal); "goal-directed browsing" (users discover a goal during browsing); and "casual browsing" (no fixed goal).
Reference: [12] <author> Alexander M c Cooke. DynamicBibQuery: </author> <title> User Manual. </title> <institution> Computer Science Department, The University of Melbourne, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: It includes a curses interface (biblook) as well as the standard I/O interface used in DynamicBibQuery (bibfind) [24]. 7 DYNAMIC QUERY INTERFACES 14 A sample query is shown in Figure 6. More detailed information is in the user manual <ref> [12] </ref>. GNUbib was designed to have a simple and fast interface, and support for a range of browsing options was not a primary design consideration. GNUbib supports only conjunctive queries so the disjunctive part of the interface model was not implemented in DynamicBib-Query.
Reference: [13] <author> E. Nygren, M. Lind, M. Johnston, and B. Sandblad. </author> <title> "The art of the obvious: Automatically processed components of the task of reading frequently used documents". </title> <editor> In Penny Bauersfeld, John Bennett, and Gene Lynch, editors, </editor> <booktitle> CHI Conference Proceedings: Striking a Balance, </booktitle> <pages> pages 235-239, </pages> <address> New York, </address> <month> May </month> <year> 1992. </year> <note> ACM. </note>
Reference-contexts: The simplest statistic is the total number of matches; other information may be appropriate depending on the application. In the simplest case such statistics are displayed as a numeric counter, updated as the query is performed. For quick perception of this data, a graphical display may be preferable <ref> [13, 21] </ref>. Simple graphical display: in the simplest case, a bar graph may show the total number of matches relative to the database size. Problems may arise if the total size is very large relative to the number of matches.
Reference: [14] <author> Vicki L. O'Day. </author> <title> "Orienteering in an information landscape: How information seekers get from here to there". </title> <editor> In Stacey Ashlund, Kevin Mullet, Austin Henderson, Erik Hollnagel, and Ted White, editors, </editor> <booktitle> INTERCHI Conference Proceedings: Bridges Between Worlds, </booktitle> <pages> pages 438-445, </pages> <address> New York, </address> <month> April </month> <year> 1993. </year> <note> ACM. </note>
Reference-contexts: Graphical query languages: Numerous graphical languages have been developed. While easier to use than formal languages they still tend to require knowledge of the database structure, e.g., [8, 7, 18]. Agents: These are autonomous programs that "know" how to find data <ref> [14] </ref>. Some argue that such interfaces take control from the user, and that direct manipulation is more effective [11, 22].
Reference: [15] <author> John K. Ousterhout. </author> <title> "Tcl: An embeddable command language". </title> <booktitle> In Winter USENIX Conference Proceedings, </booktitle> <year> 1990. </year> <note> Available for FTP; URL: ftp://sprite.berkeley.edu/tcl/tclUsenix90.ps. </note>
Reference-contexts: Both interfaces were coded in the Tcl script language with the Tk widget set, a Motif-like widget set, <ref> [15, 16, 17] </ref>, plus a small amount of C. They run under UNIX and the X-Windows System.
Reference: [16] <author> John K. Ousterhout. </author> <title> "An X11 toolkit based on the Tcl language". </title> <booktitle> In Winter USENIX Conference Proceedings, </booktitle> <year> 1991. </year> <note> Available for FTP; URL: ftp://sprite.berkeley.edu/tcl/tkUsenix91.ps. </note>
Reference-contexts: Both interfaces were coded in the Tcl script language with the Tk widget set, a Motif-like widget set, <ref> [15, 16, 17] </ref>, plus a small amount of C. They run under UNIX and the X-Windows System.
Reference: [17] <author> John K. Ousterhout. </author> <title> An Introduction to Tcl and Tk. </title> <publisher> Addison-Wesley, </publisher> <month> forthcoming. </month> <note> Available for FTP; URL: ftp://sprite.berkeley.edu/tcl/book.p?.ps.Z. REFERENCES 22 </note>
Reference-contexts: Both interfaces were coded in the Tcl script language with the Tk widget set, a Motif-like widget set, <ref> [15, 16, 17] </ref>, plus a small amount of C. They run under UNIX and the X-Windows System.
Reference: [18] <author> Gultekin Ozsoyoglu and Huaqing Wang. </author> <title> "Example-based graphical database query languages". </title> <journal> IEEE Computer, </journal> <volume> 26(5) </volume> <pages> 25-38, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Formal query languages: Languages such as SQL offer powerful querying but are not suitable for novice or occasional users. Graphical query languages: Numerous graphical languages have been developed. While easier to use than formal languages they still tend to require knowledge of the database structure, e.g., <ref> [8, 7, 18] </ref>. Agents: These are autonomous programs that "know" how to find data [14]. Some argue that such interfaces take control from the user, and that direct manipulation is more effective [11, 22].
Reference: [19] <author> Catherine Plaisant. </author> <title> "Facilitating data exploration: dynamic queries on a health statistics map". </title> <journal> In American Statistics Association Conference Proceedings. American Statistics Association, </journal> <month> August </month> <year> 1993. </year>
Reference-contexts: As parameters are changed points on a map of the region are updated in real time. [25] Health statistics atlas: A system for showing American health statistics in graphical form. Sliders are used to set parameters which are represented on a colour coded map. <ref> [19] </ref> 2 APPLICATIONS|WITH A VIEW TOWARDS TEXT DATABASES 3 Unix directory browser: An interface to explore Unix directories using sliders for file size and age.
Reference: [20] <author> Ben Shneiderman. </author> <title> "Direct manipulation: A step beyond programming languages". </title> <journal> IEEE Computer, </journal> <volume> 16(8) </volume> <pages> 57-68, </pages> <month> August </month> <year> 1983. </year>
Reference-contexts: Direct manipulation: By using widgets that represent input parameters, the user is freed from concerns about syntax and can concentrate on the output from the database <ref> [20] </ref>. In our approach, the screen is broken up into a series of panels, each representing a class of input, such as `name' or `price'. Panels are laid out horizontally across either the top or bottom of the screen. The rest of the screen remains free for displaying the output.
Reference: [21] <author> Ben Shneiderman. </author> <title> Designing the User Interface: Strategies for Effective Human-Computer Interaction. </title> <publisher> Addison-Wesley, </publisher> <address> second edition, </address> <year> 1992. </year>
Reference-contexts: Additionally, setting up these links can be very time consuming. A further problem with hypertext is getting `lost in hyperspace' <ref> [21] </ref>. Boolean queries: A traditional querying method, but one which may be confusing for non-scientists due to the ambiguity of the words "and" and "or" in English. <p> The simplest statistic is the total number of matches; other information may be appropriate depending on the application. In the simplest case such statistics are displayed as a numeric counter, updated as the query is performed. For quick perception of this data, a graphical display may be preferable <ref> [13, 21] </ref>. Simple graphical display: in the simplest case, a bar graph may show the total number of matches relative to the database size. Problems may arise if the total size is very large relative to the number of matches. <p> The relative sizes of the rectangles represent the proportion of the matches due to each subquery. (This representation may, however, be intuitive only to those familiar with such trees.) Filter-flow model: The filter/flow model allows a query to be represented by a graph. <ref> [21, 23] </ref>. Nodes represent query parameters which `filter' non-matching information. Changes in the thickness of the lines represent the filtering of non-matching information.
Reference: [22] <author> Ben Shneiderman. </author> <title> "Beyond intelligent interfaces: just do it!". </title> <journal> IEEE Software, </journal> <volume> 10(1), </volume> <month> January </month> <year> 1993. </year>
Reference-contexts: Agents: These are autonomous programs that "know" how to find data [14]. Some argue that such interfaces take control from the user, and that direct manipulation is more effective <ref> [11, 22] </ref>. A model by Salomon, cited in Carmel et. al. [2], suggests three types of browsing: "goal-directed search" (users looking for information on a defined goal); "goal-directed browsing" (users discover a goal during browsing); and "casual browsing" (no fixed goal).
Reference: [23] <author> Ben Shneiderman. </author> <title> "Dynamic queries: A step beyond database languages". </title> <type> Technical Report CS-TR-3022, </type> <institution> Center for Automation Research, University of Maryland, College Park, MD, </institution> <year> 1993. </year>
Reference-contexts: 1 Introduction Dynamic queries have been proposed as a way to support browsing. They combine direct manipulation and visualisation, and facilitate fast iteration over similar queries, so that the user remains in control of the query process <ref> [9, 23] </ref>. Results are updated and displayed as the query is entered, and edited. The query parameters are usually controlled by manipulating graphical widgets, such as sliders and buttons, with a mouse. The output may be presented graphically, to aid interpretation by the user. <p> We are especially interested in the case of text data, which does not lend itself 2 APPLICATIONS|WITH A VIEW TOWARDS TEXT DATABASES 2 as naturally to graphical display of answers as was available for some of the earlier work on dynamic queries <ref> [23] </ref>, and we describe options for the display of text output in a dynamic queries framework. Visualisation aids have been developed to help the user understand what they are seeing as quickly as possible, allowing greater use of the iterative support provided by the interface. <p> We briefly discuss some of the issues involved in separating the interface from the underlying database. 2 Applications|with a view towards text databases Several applications exploiting dynamic queries have been constructed at the Human-Computer Interaction Laboratory at the University of Maryland <ref> [23] </ref>. Chemical table viewer: An interface was created for the exploration of trends in the periodic table of elements, displayed on screen graphically. <p> Boolean queries: A traditional querying method, but one which may be confusing for non-scientists due to the ambiguity of the words "and" and "or" in English. A number of graphical representations for boolean queries have been proposed to make them more user-friendly e.g., <ref> [3, 10, 23] </ref>. 3 VISUALISATION OPTIONS FOR TEXT OUTPUT DISPLAY 4 Approximate matching or ranking: Queries consist of a list of words; documents are ranked based on a heuristic of similarity with the query [26]. <p> The relative sizes of the rectangles represent the proportion of the matches due to each subquery. (This representation may, however, be intuitive only to those familiar with such trees.) Filter-flow model: The filter/flow model allows a query to be represented by a graph. <ref> [21, 23] </ref>. Nodes represent query parameters which `filter' non-matching information. Changes in the thickness of the lines represent the filtering of non-matching information. <p> For text output, the overhead in retrieving data and rewriting the display may make this impractical. Rewriting a text display may also be confusing or distracting for the user <ref> [9, 23] </ref>. If the time taken to perform an update is noticeable to the user, the interface should remain active allowing the user to enter a new query or to start browsing the results before the update is completed.
Reference: [24] <author> Zoltan Somogyi. </author> <title> "The Melbourne University bibliography system". </title> <editor> In Isaac Balbin and Kotagiri Ramamohanarao, editors, </editor> <booktitle> Proceedings of the First Far-East Workshop on Future Database Systems, </booktitle> <pages> pages 173-191, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: It is a partial implementation of the model described above. It performs queries on a 20 megabyte database called GNUbib <ref> [24] </ref>. GNUbib is based on an inverted index, and provides conjunctive querying consisting of exact matches and prefixes. In the existing software, queries may be performed on any indexed field, and options to limit the search to specific fields are provided. Queries consist of words separated by spaces. <p> Menus are provided for loading, storing and printing queries and results. 2 The interface to GNUbib was flexibly designed, with a range of applications in mind. It includes a curses interface (biblook) as well as the standard I/O interface used in DynamicBibQuery (bibfind) <ref> [24] </ref>. 7 DYNAMIC QUERY INTERFACES 14 A sample query is shown in Figure 6. More detailed information is in the user manual [12]. GNUbib was designed to have a simple and fast interface, and support for a range of browsing options was not a primary design consideration.
Reference: [25] <author> Christopher Williamson and Ben Shneiderman. </author> <title> "The Dynamic HomeFinder: Evaluating dynamic queries in a real-estate information exploration system". </title> <type> Technical Report CS-TR-2819, </type> <institution> Department of Computer Science, Human-Computer Interaction Laboratory, University of Maryland, College Park, MD, </institution> <year> 1991. </year>
Reference-contexts: Sliders and buttons are used to change parameters, such as the number of bedrooms or the presence of a garage. As parameters are changed points on a map of the region are updated in real time. <ref> [25] </ref> Health statistics atlas: A system for showing American health statistics in graphical form.
Reference: [26] <author> I.H. Witten, A. Moffat, </author> <title> and T.C. Bell. Managing Gigabytes: Compressing and Indexing Documents and Images. </title> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: number of graphical representations for boolean queries have been proposed to make them more user-friendly e.g., [3, 10, 23]. 3 VISUALISATION OPTIONS FOR TEXT OUTPUT DISPLAY 4 Approximate matching or ranking: Queries consist of a list of words; documents are ranked based on a heuristic of similarity with the query <ref> [26] </ref>. Formal query languages: Languages such as SQL offer powerful querying but are not suitable for novice or occasional users. Graphical query languages: Numerous graphical languages have been developed. While easier to use than formal languages they still tend to require knowledge of the database structure, e.g., [8, 7, 18]. <p> The choice of output display method may have a significant impact on the time taken to evaluate queries. For example, using the filter-flow model, although it only displays information about certain subqueries, and similar information would be calculated during normal processing of boolean queries <ref> [26] </ref>, the order of processing is now controlled by the user, which precludes optimisations such as processing terms in reverse order of frequency. <p> This arrangement allows queries to be entered in a limited conjunctive normal form. For many applications this limitation is not significant. Moffat points out the usefulness of boolean queries in the form of a conjunction with disjunction used to supply alternative words <ref> [26] </ref>. <p> An existing database system, mg <ref> [26] </ref>, was chosen as a back-end for DynamicNewsQuery. It uses an inverted index to support fast full-text searching on compressed files, and is designed to work with databases of up to several gigabytes. The interface is similar to DynamicBibQuery, and permits the following types of searches: 1.
References-found: 26

