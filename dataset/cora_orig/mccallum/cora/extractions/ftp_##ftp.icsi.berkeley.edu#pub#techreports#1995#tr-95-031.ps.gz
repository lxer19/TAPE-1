URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1995/tr-95-031.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1995.html
Root-URL: http://www.icsi.berkeley.edu
Title: Parallel Sorting With Limited Bandwidth  
Author: Micah Adler John W Byers Richard M Karp 
Keyword: algorithms for sorting rely strongly on high communication bandwidth.  
Note: Supported by a Schlumberger Foundation Graduate Fellowship. Supported by a GAANN Graduate Fellowship. Supported by NSF grant number CCR-9005448  
Date: July 1995  
Pubnum: TR-TR-95-031  
Abstract: We study the problem of sorting on a parallel computer with limited communication bandwidth. By using the recently proposed PRAM(m) model, where p processors communicate through a small, globally shared memory consisting of m bits, we focus on the trade-off between the amount of local computation and the amount of inter-processor communication required for parallel sorting algorithms. We prove a lower bound of ( n log m m ) on the time to sort n numbers in an exclusive-read variant of the PRAM(m) model. We show that Leighton's Columnsort can be used to give an asymptotically matching upper bound in the case where m grows as a fractional power of n. The bounds are of a surprising form, in that they have little dependence on the parameter p. This implies that attempting to distribute the workload across more processors while holding the problem size and the size of the shared memory fixed will not improve the optimal running time of sorting in this model. We also show that both the upper and the lower bound can be adapted to bridging models that address the issue of limited communication bandwidth: the LogP model and the BSP model. The lower bounds provide convincing evidence that efficient parallel 
Abstract-found: 1
Intro-found: 1
Reference: [ACS90] <author> A. Aggarwal, A. Chandra, and M. Snir. </author> <title> Communication Complexity of PRAMs. </title> <booktitle> Theoretical Computer Science 71: </booktitle> <pages> pp 3-28, </pages> <year> 1990. </year>
Reference-contexts: Other related work on parallel sorting includes [BC82], where Borodin and Cook prove that sorting requires TIME SPACE = ( n 2 log n ). Aggarwal, Chandra and Snir show in <ref> [ACS90] </ref> that any parallel comparison-based algorithm that sorts n words requires ( n log n p log ( n p ) ) communication steps.
Reference: [ACS87] <author> A. Aggarwal, A. Chandra and M. Snir. </author> <title> Hierarchical Memory with Block Transfer. </title> <booktitle> In Proc. 28 th IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pp. 204-216, </pages> <year> 1987. </year>
Reference: [ACS89] <author> A. Aggarwal, A. Chandra and M. Snir. </author> <title> On Communication Latency in PRAM Computations. </title> <booktitle> In Proc. 1st ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <year> 1989. </year>
Reference-contexts: Aggarwal, Chandra and Snir show in [ACS90] that any parallel comparison-based algorithm that sorts n words requires ( n log n p log ( n p ) ) communication steps. Also, the same authors show in <ref> [ACS89] </ref> that sorting requires ( n log n p + l log p) in a model where reading or writing a block of size b from memory takes time l + b.
Reference: [AHU74] <author> A. Aho, J. Hopcroft, and J. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley: </publisher> <address> Reading, MA, </address> <year> 1974. </year>
Reference-contexts: Sorting the columns can be performed by each of the m active processors locally in time O ( n log n m ) by any of a variety of known serial algorithms (see for example <ref> [AHU74] </ref>). Routing the fixed permutation on the matrix elements requires each processor to send an identical number of keys to every other processor, and thus can be done with a single pass through all the entries.
Reference: [AKS83] <author> M. Ajtai, J. Komlos and E. Szemeredi. </author> <title> An O(n log n) sorting network. </title> <journal> Combinatorica 3: pp. </journal> <volume> 1 - 19, </volume> <year> 1983. </year>
Reference: [BC82] <author> A. Borodin and S. Cook. </author> <title> A Time-Space Tradeoff for Sorting on a General Sequential Model of Computation. </title> <journal> SIAM J. of Computing, </journal> <volume> 11(2): </volume> <pages> pp. 287 - 297, </pages> <year> 1982. </year>
Reference-contexts: Indeed, an interesting question would be to determine whether we could apply our lower bound technique to a non-standard VLSI model in which the chip could receive each input in more than one location and at more than one time. Other related work on parallel sorting includes <ref> [BC82] </ref>, where Borodin and Cook prove that sorting requires TIME SPACE = ( n 2 log n ). Aggarwal, Chandra and Snir show in [ACS90] that any parallel comparison-based algorithm that sorts n words requires ( n log n p log ( n p ) ) communication steps.
Reference: [C88] <author> R. Cole. </author> <title> Parallel Merge Sort. </title> <journal> SIAM J. of Computing, </journal> <volume> 17(4): </volume> <pages> pp. 770 - 785, </pages> <year> 1988. </year> <month> 12 </month>
Reference: [CD82] <author> S. Cook, C. Dwork, and R. Reischuk. </author> <title> Upper and Lower Bounds for Parallel Random Access Machines Without Simultaneous Writes. </title> <journal> SIAM J. of Computing 15: </journal> <pages> pp. 87-97, </pages> <year> 1985. </year>
Reference: [CKP+93] <author> D. Culler, R. M. Karp, D. Patterson, A. Sahay, K. E. Schauser, E. Santos, R. Subra-monian and T. von Eicken. </author> <title> LogP: Towards a Realistic Model of Parallel Computation. </title> <booktitle> In Proc. 4th ACM SIGPLAN Symp. on Principles and Practice of Parallel Programming, </booktitle> <pages> pp. 1-12, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: This leaves unresolved the question of how to implement algorithms designed for a PRAM on machines which have limited inter-processor communication bandwidth. Addressing this limitation has motivated the development of other models of parallel computation: the BSP model [V90a], the LogP model <ref> [CKP+93] </ref>, and recently the PRAM (m) model [MNV94]. Provably efficient algorithms in the PRAM model are not necessarily the most efficient algorithms for these new models, so a host of problems need to be re-evaluated in this new framework. <p> We give a brief discussion of the complexity of sorting in the LogP model <ref> [CKP+93] </ref> and the BSP model [V90a]. 6.1 The LogP model In the LogP model, limited communication bandwidth in a parallel machine is enforced by requiring that each processor must wait for a gap of at least g cycles between the transmission of consecutive point-to-point messages.
Reference: [CS92] <author> R. Cypher and J. Sanz. Cubesort: </author> <title> A Parallel Algorithm for Sorting N Data Items with S-Sorters. </title> <journal> Journal of Algorithms 13: </journal> <pages> pp. 211-234, </pages> <year> 1992. </year>
Reference-contexts: Ralph Werchner has pointed out similar work by Cypher and Sanz. In <ref> [CS92] </ref> they allude to a recursive version of Columnsort, and introduce Cubesort, which can be used to obtain a running time of O ( n log n m (1 fi) 2 )25 log fl nlog fl (n=m) for sorting on the PRAM (m).
Reference: [D94] <author> A. Dusseau. </author> <title> Modeling Parallel Sorts with LogP on the CM-5. </title> <type> Technical Report: </type> <institution> UCB/CSD-94-829, </institution> <month> May </month> <year> 1994. </year>
Reference: [KR90] <author> R. M. Karp and V. Ramachandran. </author> <title> Parallel Algorithms for Shared-Memory Machines. </title> <booktitle> In Handbook of Theoretical Computer Science, </booktitle> <editor> J. van Leeuwen, </editor> <publisher> Ed., </publisher> <pages> pp. 869-941. </pages> <publisher> Elsevier Science Publishers: </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1990. </year>
Reference: [L85] <author> T. Leighton. </author> <title> Tight Bounds on the Complexity of Parallel Sorting. </title> <journal> IEEE Trans. on Computers, </journal> <volume> c-34(4): </volume> <pages> pp. 344-354, </pages> <year> 1985. </year>
Reference-contexts: When m grows no faster than some function of n of the form m = O (n fi ), fi &lt; 1 we show that a version of Columnsort <ref> [L85] </ref> provides us with an upper bound of O m For n m, the case of greatest interest, the final term becomes a small constant and so in this setting the discrepancy between the upper and lower bounds is fi ( log n log m ). <p> Perhaps the result most similar to ours is Leighton's in <ref> [L85] </ref>. Using Thompson's VLSI model [T80], he proves a lower bound of AT 2 = (n 2 log 2 n) for sorting n keys of size fi (log n), where A is the area of a VLSI chip and T is the running time of the chip. <p> The lemma follows from the fact that on each of the n (S; A; H i ) input configurations consistent with S and H i , the algorithm must answer correctly with probability &gt; 1 2 . 5 The Upper Bound We show that a version of Leighton's Columnsort <ref> [L85] </ref>, can match the lower bound. In the case where the keys are of size O (log m), this gives us an asymptotically optimal algorithm where all processors only read from distinct portions of the ROM of size n p .
Reference: [MNV94] <author> Y. Mansour, N. Nisan and U. Vishkin. </author> <title> Trade-offs Between Communication Throughput and Parallel Time. </title> <booktitle> In Proceedings of the 26 th Annual ACM Symposium on Theory of Computing: </booktitle> <pages> pp. 372-381, </pages> <year> 1994. </year>
Reference-contexts: This leaves unresolved the question of how to implement algorithms designed for a PRAM on machines which have limited inter-processor communication bandwidth. Addressing this limitation has motivated the development of other models of parallel computation: the BSP model [V90a], the LogP model [CKP+93], and recently the PRAM (m) model <ref> [MNV94] </ref>. Provably efficient algorithms in the PRAM model are not necessarily the most efficient algorithms for these new models, so a host of problems need to be re-evaluated in this new framework. <p> Also, the same authors show in [ACS89] that sorting requires ( n log n p + l log p) in a model where reading or writing a block of size b from memory takes time l + b. When introducing the PRAM (m) model in <ref> [MNV94] </ref>, Mansour, Nisan and Vishkin prove a lower bound of ( n p mp ) for several problems, including sorting, in a concurrent read version of the PRAM (m), which implies the same bound in the ER PRAM (m). <p> A complete and detailed justification of the PRAM (m) model is provided in <ref> [MNV94] </ref>. We assume for the purpose of simplifying our exposition that each cell of the shared memory consists of only one bit. <p> The lower bound, however, does not apply to the concurrent read version of the PRAM (m) originally introduced by Mansour, Nisan and Vishkin in <ref> [MNV94] </ref>, and thus the asymptotic complexity of sorting in this model remains an open question.
Reference: [T80] <author> C. Thompson. </author> <title> A Complexity Theory for VLSI. </title> <type> PhD Thesis. </type> <institution> Carnegie-Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1980. </year>
Reference-contexts: Perhaps the result most similar to ours is Leighton's in [L85]. Using Thompson's VLSI model <ref> [T80] </ref>, he proves a lower bound of AT 2 = (n 2 log 2 n) for sorting n keys of size fi (log n), where A is the area of a VLSI chip and T is the running time of the chip.
Reference: [V90a] <author> L. Valiant. </author> <title> A Bridging Model for Parallel Computation. </title> <journal> Communications of the ACM, </journal> <volume> 33(8): </volume> <pages> pp 103-111, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: This leaves unresolved the question of how to implement algorithms designed for a PRAM on machines which have limited inter-processor communication bandwidth. Addressing this limitation has motivated the development of other models of parallel computation: the BSP model <ref> [V90a] </ref>, the LogP model [CKP+93], and recently the PRAM (m) model [MNV94]. Provably efficient algorithms in the PRAM model are not necessarily the most efficient algorithms for these new models, so a host of problems need to be re-evaluated in this new framework. <p> We give a brief discussion of the complexity of sorting in the LogP model [CKP+93] and the BSP model <ref> [V90a] </ref>. 6.1 The LogP model In the LogP model, limited communication bandwidth in a parallel machine is enforced by requiring that each processor must wait for a gap of at least g cycles between the transmission of consecutive point-to-point messages.
Reference: [V90b] <author> L. Valiant. </author> <title> General Purpose Parallel Architectures. </title> <booktitle> In Handbook of Theoretical Computer Science, </booktitle> <editor> J. van Leeuwen, </editor> <publisher> Ed., </publisher> <pages> pp. 943-971. </pages> <publisher> Elsevier Science Publishers: </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1990. </year>
Reference-contexts: some fi &lt; 1 also allows us to recurse until the columns are small enough that a local sort of each column can be performed in the stated time as well. 6.2 The BSP model We briefly describe bounds on sorting for a variant of the BSP model, the XPRAM <ref> [V90b] </ref>. In this model, P processors perform computation in supersteps, where each superstep consists of each processor executing local computation followed by reads and writes to a globally shared memory. The globally shared memory is akin to that of the PRAM and consists of memory cells of size w.
Reference: [VW85] <author> U. Vishkin and A. Wigderson. </author> <title> Trade-Offs between Depth and Width in Parallel Computation. </title> <journal> SIAM Journal of Computing, </journal> <volume> 14(2): </volume> <pages> pp. 303 - 314, </pages> <year> 1985. </year> <month> 13 </month>
References-found: 18

