URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-95-7-1.ps.Z
Refering-URL: http://www.cs.man.ac.uk/cstechrep/Abstracts/UMCS-95-7-1.html
Root-URL: http://www.cs.man.ac.uk
Title: The State Evolution Method for Verifying Hardware Systems  
Author: Howard Barringer, Graham Gough, Brian Monahan, Alan Williams 
Affiliation: Computer Science University of Manchester  
Pubnum: Technical Report UMCS-95-7-1  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction One approach commonly used for establishing the behavioural equivalence of hardware systems uses state-space exploration to establish a bisimulation relation between the systems, modelled as labelled transition systems <ref> [1] </ref>. It has the distinct advantage of being automatic, and can produce counter-example information when a verification fails, although this is usually in low level terms of traces leading to divergence. <p> Although the approach can be automated to varying degrees, it currently requires significant user input in order to be able to establish design equivalence. We introduce a novel verification approach which effectively merges the above techniques. We take Park and Milner's standard (strong) bisimulation equivalence <ref> [1] </ref> as our basic notion of equivalence between labelled transition systems. We present the transition systems abstractly as deterministic machines so that each system is expressed as a pair of (response and evolution) functions, together with an initial state. <p> The methods described in this paper fulfil many of these requirements. An overview of work from the project appears in [5] 2 . Background to the work presented here is found in Milner's work on CCS and bisimilarity <ref> [1] </ref>. More recently, Hennessy [6] has developed techniques for modelling infinite data-spaces and constructing their bisimulations; the VPAM system [7] is somewhat similar to our approach of proving conditions which are generated when constructing a state bisimulation. Other work related to these include CIRCAL [8]. <p> Definition 2.2 : (Strong) Bisimilarity We take equivalence on processes to be the strong bisimilarity of Park and Milner <ref> [1] </ref>.
Reference: [2] <author> N. Shankar, S. Owre, and J. M. Rushby. </author> <title> The PVS Proof Checker: A Reference Manual (Beta Release). </title> <type> Technical report, </type> <institution> Computer Science Laboratory, SRI International, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: Each VC has a regular form, which significantly eases the task of establishing its validity, using a standard theorem-prover/proof assistant currently we use the PVS proof system <ref> [2] </ref>, which includes decision procedures for equalities and linear arithmetic reasoning, with the potential for a high degree of automation. The problem of checking for bisimilarity has therefore been broken down, via the state evolution rule, into one of validating sets of smaller, regularly structured VCs. <p> The VCG also performs extensive simplification, discarding those VCs which is can determine to be true. The remaining set of VCs is then converted into a format suitable for the PVS theorem prover <ref> [2] </ref>, which can be used to establish the validity of the VCs. If the VCs are satisfiable, but not valid, then the VCG may be re-run for a larger number of state evolution steps. <p> First, the axiom div ax is installed as a rewrite rule, and then the automated PVS simplification routines and arithmetic decision procedures <ref> [2] </ref> are invoked to complete the proof, without further user intervention. So the two latch designs are therefore equivalent, as claimed in x2.4. Here the VCG has already automatically discarded two VCs during merging, because the constraints were contradictory.
Reference: [3] <author> R. Kurshan. </author> <title> Reducibility in Analysis of Coordination. </title> <booktitle> In Lecture Notes in Control and Information Sciences, </booktitle> <volume> volume 103, </volume> <pages> pages 19-39. </pages> <publisher> Springer, </publisher> <year> 1987. </year>
Reference-contexts: Indeed it offers the possibility of verifying bounded diameter systems, which may have unbounded state-spaces; such systems cannot of course be analysed by state-based verification methods, even using state-space encodings, without first applying transformations to the systems, such as data-set reduction <ref> [3] </ref> this essentially comes for free with our method. Viewed as a state-based approach, the method establishes bisimulation in a truly symbolic way, thus avoiding many aspects of combinatorial explosion. The logical expressions for the state evolution rule effectively characterise the bisimulation relation between the two systems.
Reference: [4] <author> J. D. Morison and A. S. Clarke. ELLA2000: </author> <title> A Language for Electronic System Design. </title> <publisher> McGraw-Hill, </publisher> <year> 1993. </year> <month> 14 </month>
Reference-contexts: In this we have developed a hardware design and verification environment to support the commercial hardware description language (HDL) ELLA <ref> [4] </ref>. A formal process algebra semantics has been developed for ELLA, and a compiler based on this translates ELLA expressions into process terms representing their behaviour. The process terms can in turn be translated into deterministic machine representations.
Reference: [5] <author> H. Barringer, G. Gough, B. Monahan, and A. Williams. </author> <title> A Process Algebra Foundation for Reasoning about Core ELLA. </title> <type> Technical Report UMCS-94-12-1, </type> <institution> University of Manchester, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: A second requirement is that the verification tool can provide structured debugging information at the ELLA level, when designs are found to be different. The methods described in this paper fulfil many of these requirements. An overview of work from the project appears in <ref> [5] </ref> 2 . Background to the work presented here is found in Milner's work on CCS and bisimilarity [1]. <p> To check the equivalence of ELLA designs, they are first compiled into deterministic machines, according to the formal semantics of ELLA <ref> [5] </ref>.
Reference: [6] <author> M. Hennessy and H. Lin. </author> <title> Proof Systems for Message-Passing Process Algebras. </title> <type> Technical Report 5/93, </type> <institution> University of Sussex, </institution> <year> 1993. </year>
Reference-contexts: The methods described in this paper fulfil many of these requirements. An overview of work from the project appears in [5] 2 . Background to the work presented here is found in Milner's work on CCS and bisimilarity [1]. More recently, Hennessy <ref> [6] </ref> has developed techniques for modelling infinite data-spaces and constructing their bisimulations; the VPAM system [7] is somewhat similar to our approach of proving conditions which are generated when constructing a state bisimulation. Other work related to these include CIRCAL [8].
Reference: [7] <author> H. Lin. </author> <title> A Verification Tool for Value-Passing Processes. </title> <type> Technical Report 8/93, </type> <institution> University of Sussex, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: An overview of work from the project appears in [5] 2 . Background to the work presented here is found in Milner's work on CCS and bisimilarity [1]. More recently, Hennessy [6] has developed techniques for modelling infinite data-spaces and constructing their bisimulations; the VPAM system <ref> [7] </ref> is somewhat similar to our approach of proving conditions which are generated when constructing a state bisimulation. Other work related to these include CIRCAL [8]. There has been extensive research into state-based verification methods such as model-checking [9, 10].
Reference: [8] <author> G. A. McCaskill and G. Milne. </author> <title> Hardware Description and Verification Using the Circal-System. </title> <type> Technical Report HDV-24-92, </type> <institution> Department of Computer Science, University of Strathclyde, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: More recently, Hennessy [6] has developed techniques for modelling infinite data-spaces and constructing their bisimulations; the VPAM system [7] is somewhat similar to our approach of proving conditions which are generated when constructing a state bisimulation. Other work related to these include CIRCAL <ref> [8] </ref>. There has been extensive research into state-based verification methods such as model-checking [9, 10].
Reference: [9] <author> E.M. Clarke, </author> <title> E.A. Emerson, and A.P. Sistla. Automatic Verification of finite state concurrent systems using Temporal Logic Specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2), </volume> <year> 1986. </year>
Reference-contexts: Other work related to these include CIRCAL [8]. There has been extensive research into state-based verification methods such as model-checking <ref> [9, 10] </ref>. Although these have been traditionally restricted by the problem of `state-explosion', the capabilities of these techniques have been enhanced by the introduction of compact state-space encodings, namely 2 The ELLA Project World-Wide Web page is at URL: http://www.cs.man.ac.uk/fmethods/projects/ella-project.html 2 BDDs see [11, 12, 13] for key expositions.
Reference: [10] <author> H. Barringer, M. Fisher, and G.D. Gough. </author> <title> Fair SMG and Linear Time Model Checking. </title> <booktitle> In Sifakis [23]. </booktitle>
Reference-contexts: Other work related to these include CIRCAL [8]. There has been extensive research into state-based verification methods such as model-checking <ref> [9, 10] </ref>. Although these have been traditionally restricted by the problem of `state-explosion', the capabilities of these techniques have been enhanced by the introduction of compact state-space encodings, namely 2 The ELLA Project World-Wide Web page is at URL: http://www.cs.man.ac.uk/fmethods/projects/ella-project.html 2 BDDs see [11, 12, 13] for key expositions.
Reference: [11] <author> R.E. Bryant. </author> <title> Graph-Based Algorithms for Boolean Function Manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(8):677-691, </volume> <year> 1986. </year>
Reference-contexts: Although these have been traditionally restricted by the problem of `state-explosion', the capabilities of these techniques have been enhanced by the introduction of compact state-space encodings, namely 2 The ELLA Project World-Wide Web page is at URL: http://www.cs.man.ac.uk/fmethods/projects/ella-project.html 2 BDDs see <ref> [11, 12, 13] </ref> for key expositions. Commercial verification systems are now emerging, based on such techniques; for example the VFORMAL system (COMPASS) checks equivalence for synchronous systems described using VHDL. However, the state-spaces of the systems under analysis must be identical here.
Reference: [12] <author> J.R. Burch, E.M. Clarke, and D.E. </author> <title> Long. Representing Circuits More Efficiently in Symbolic Model Checking. </title> <booktitle> In DAC91, </booktitle> <year> 1991. </year>
Reference-contexts: Although these have been traditionally restricted by the problem of `state-explosion', the capabilities of these techniques have been enhanced by the introduction of compact state-space encodings, namely 2 The ELLA Project World-Wide Web page is at URL: http://www.cs.man.ac.uk/fmethods/projects/ella-project.html 2 BDDs see <ref> [11, 12, 13] </ref> for key expositions. Commercial verification systems are now emerging, based on such techniques; for example the VFORMAL system (COMPASS) checks equivalence for synchronous systems described using VHDL. However, the state-spaces of the systems under analysis must be identical here.
Reference: [13] <author> O. Coudert, C. Berthet, and J-C. Madre. </author> <title> Verification of Synchronous Sequential Machines based on Symbolic Execution. </title> <booktitle> In Sifakis [23]. </booktitle>
Reference-contexts: Although these have been traditionally restricted by the problem of `state-explosion', the capabilities of these techniques have been enhanced by the introduction of compact state-space encodings, namely 2 The ELLA Project World-Wide Web page is at URL: http://www.cs.man.ac.uk/fmethods/projects/ella-project.html 2 BDDs see <ref> [11, 12, 13] </ref> for key expositions. Commercial verification systems are now emerging, based on such techniques; for example the VFORMAL system (COMPASS) checks equivalence for synchronous systems described using VHDL. However, the state-spaces of the systems under analysis must be identical here.
Reference: [14] <author> M. Gordon and A. Pitts. </author> <title> The HOL logic and system (Chapter 3). </title> <editor> In J. Bowen, editor, </editor> <booktitle> Towards Verified Systems, </booktitle> <pages> pages 49-70. </pages> <publisher> Elsevier, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: However, the state-spaces of the systems under analysis must be identical here. Our work is clearly related to that of theorem-proving, sharing many of the benefits of this approach, although our method has additional advantages in terms of potential ease of (automated) proof. The HOL system <ref> [14] </ref> is an extensive example of theorem-proving tools development, which can be applied to design verification. The work also includes a system for semantically embedding HDLs, including ELLA, into HOL [15].
Reference: [15] <author> R. Boulton, M. Gordon, J. Herbert, and J. Van Tassel. </author> <title> The HOL Verification of ELLA Designs. </title> <type> Technical report, </type> <institution> University of Cambridge Computer Laboratory, </institution> <year> 1990. </year>
Reference-contexts: The HOL system [14] is an extensive example of theorem-proving tools development, which can be applied to design verification. The work also includes a system for semantically embedding HDLs, including ELLA, into HOL <ref> [15] </ref>. The related MEPHISTO tool [16] is embedded within HOL, and has been incorporated into a hardware design framework, offering partially automated verification via the development of proof tactics suitable for hardware systems.
Reference: [16] <author> K. Schneider, R. Kumar, and T. Kropf. </author> <title> Automating Most Parts of Hardware Proofs in HOL. </title> <editor> In K. Larsen, editor, </editor> <booktitle> Computer Aided Verification, (CAV '91), LNCS, volume 575, </booktitle> <address> Aarlborg, Denmark, July 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The HOL system [14] is an extensive example of theorem-proving tools development, which can be applied to design verification. The work also includes a system for semantically embedding HDLs, including ELLA, into HOL [15]. The related MEPHISTO tool <ref> [16] </ref> is embedded within HOL, and has been incorporated into a hardware design framework, offering partially automated verification via the development of proof tactics suitable for hardware systems.
Reference: [17] <author> K.G.W. Goossens. </author> <title> Embedding Hardware Description Languages in Proof Systems. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <year> 1992. </year>
Reference-contexts: The related MEPHISTO tool [16] is embedded within HOL, and has been incorporated into a hardware design framework, offering partially automated verification via the development of proof tactics suitable for hardware systems. At Edinburgh, operational semantics are provided for simplified versions of ELLA, and embedded into the LAMBDA system <ref> [17] </ref>, which supports the semi-automated synthesis of circuits from logical constraints. The PVS proof system utilised here, can be employed to model systems directly, and then to support the required proof task [18]. Currently these tools based on theorem-proving require formal methods expertise in order to operate them.
Reference: [18] <author> N. Shankar. </author> <title> Verification of Real-Time Systems Using PVS. </title> <editor> In C. Courcoubetis, editor, </editor> <booktitle> Computer Aided Verification, (CAV '93), LNCS, volume 697, </booktitle> <address> Elounda, Greece, June 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: At Edinburgh, operational semantics are provided for simplified versions of ELLA, and embedded into the LAMBDA system [17], which supports the semi-automated synthesis of circuits from logical constraints. The PVS proof system utilised here, can be employed to model systems directly, and then to support the required proof task <ref> [18] </ref>. Currently these tools based on theorem-proving require formal methods expertise in order to operate them. In [19], a symbolic simulation technique for high-level processor verification is described, which performs symbolic reachability analysis on the product state machine of the two designs.
Reference: [19] <author> F. Corella. </author> <title> Automated High-Level Verification against Clocked Algorithmic Specifications. </title> <editor> In D. Agnew, L. Claesen, and R. Camposano, editors, </editor> <address> CHDL '93, Canada, 1993. </address> <publisher> North-Holland. </publisher>
Reference-contexts: The PVS proof system utilised here, can be employed to model systems directly, and then to support the required proof task [18]. Currently these tools based on theorem-proving require formal methods expertise in order to operate them. In <ref> [19] </ref>, a symbolic simulation technique for high-level processor verification is described, which performs symbolic reachability analysis on the product state machine of the two designs.
Reference: [20] <author> H. Barringer, G. Gough, B. Monahan, and A. Williams. </author> <title> The ELLA Verification Environment: A Tutorial Introduction. </title> <type> Technical Report UMCS-94-12-2, </type> <institution> University of Manchester, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: This can be observed with the latch example, in x4.3. 4.2 Implementation A verification condition generation (VCG) tool has been implemented in Common Lisp, and installed into a design and verification environment <ref> [20] </ref> developed 4 for the commercial hardware description language ELLA. To check the equivalence of ELLA designs, they are first compiled into deterministic machines, according to the formal semantics of ELLA [5].
Reference: [21] <institution> Harlequin Ltd, </institution> <address> Cambridge UK. </address> <note> Information about LispWorks is available on the World-Wide Web, URL: http://www.harlequin.co.uk/full/products/sp/lispworks.html. </note>
Reference-contexts: the initial premise (a) from the state evolution rule contains the antecedents from above, with m 0 = low 0 = high 0 = 0, i.e. it is given by R 1 (0; h0; 0i), 4 The design and verification environment is built on top of the LispWorks programming environment <ref> [21] </ref>, which is a trademark of, and produced by, Harlequin Ltd. (Cambridge, UK). 12 Functional Normal Form Each equality from above can be translated into functional normal form.
Reference: [22] <author> H. Barringer, G. Gough, B. Monahan, and A. Williams. </author> <title> Formal Verification Support for the ELLA Hardware Description Language: A Review. </title> <note> To appear in CHARME95, </note> <institution> Frankfurt, Germany, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: If the VCs are satisfiable, but not valid, then the VCG may be re-run for a larger number of state evolution steps. For further details of the implementation of the VCG, together with several examples of design verification, see <ref> [22] </ref>. 4.3 Latch Example: Verification For the latch example, described in x2.4, the state evolution rule (Definition 3.1) needs to be applied for a single step, i.e. N = 1.
Reference: [23] <author> J. Sifakis, </author> <title> editor. Automatic Verification Methods for Finite State Systems, </title> <booktitle> LNCS, volume 407, </booktitle> <address> Grenoble, France, 1989. </address> <publisher> Springer-Verlag. </publisher> <pages> 15 </pages>
References-found: 23

