URL: http://www.cs.umr.edu/techreports/92-04.ps
Refering-URL: http://www.cs.umr.edu/techreports/
Root-URL: 
Email: ff@cs.umr.edu  
Title: FAULT-TOLERANT DISTRIBUTED DEADLOCK  
Author: DETECTION/RESOLUTION Pei-yu Li and Bruce McMillin 
Note: This work was supported in part by the National Science Foundation under Grant Number MSS-9216479, and, in part, from the Air Force Office of Scientific Research under contract number F49620-92-J-0546.  
Address: Rolla, Missouri 65401  
Affiliation: Department of Computer Science University of Missouri at Rolla  
Date: October 15, 1992  
Pubnum: CSC-92-04  
Abstract-found: 0
Intro-found: 1
Reference: [BrTo87] <author> Bracha, G. and Toueg, S., </author> <title> ``Distributed deadlock detection,'' </title> <journal> Distributed Computing, </journal> <volume> 2 </volume> <pages> 127-138, </pages> <year> 1987. </year>
Reference: [ChKo89] <author> Choudhary, A. N., Kohler, W. H., Stankovic, J. A. and Towsley, D., </author> <title> ``A modified priority based probe algorithm for distributed deadlock detection and resolution,'' </title> <journal> IEEE Trans. Software Eng., </journal> <volume> vol. SE-15, </volume> <pages> pp. 10-17, </pages> <month> Jan. </month> <year> 1989. </year>
Reference: [ChMi83] <author> Chandy, K. M., Misra, J. and Haas, L. M., </author> <title> ``Distributed deadlock detection,'' </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> vol. 1, </volume> <pages> pp. 144-156, </pages> <month> May </month> <year> 1983. </year>
Reference: [CoEl71] <author> Coffman, E. G., Elphick, M. J. and Shoshani, A., </author> <title> ``System deadlocks,'' </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 3, </volume> <pages> pp. 67-78, </pages> <month> June. </month> <year> 1971. </year>
Reference-contexts: Lemma 1: If a deadlock occurs, there exists a cycle in the WFG. Proof: This follows from four necessary conditions for a deadlock in <ref> [CoEl71] </ref>. Lemma 2: In the absence of processor failure, only the probes with a priority lower than or equal to the lowest one in the deadlock cycle propagates around this cycle.
Reference: [ElLi85] <author> Elmagarmid, A. K. and Liu, M. T., </author> <title> ``Fault tolerant deadlock detection in distributed database systems,'' </title> <booktitle> IEEE 15th Int'l Symp. Fault-Tolerant Computing, </booktitle> <pages> pp. 240-245, </pages> <year> 1985. </year> <month> - 25 </month> - 
Reference: [GrHo81] <author> Gray, J., Homan, P., Obermack, R. and Korth, H., </author> <title> ``A straw man analysis of the probability of waiting and deadlock in a database system,'' </title> <type> Tech. Rep. </type> <institution> RJ3066, IBM Research Lab., </institution> <address> San Jose, CA, </address> <month> Feb. </month> <year> 1981. </year>
Reference-contexts: However, since the size of most deadlock cycles is small <ref> [GrHo81] </ref>, the probability of more than one failure in a cycle is also small, hence this limitation is not a problem.
Reference: [KsSi91] <author> Kshemkalyani, A. D. and Singhal, M., </author> <title> ``Invariant-based verification of a distributed deadlock detection algorithm,'' </title> <journal> IEEE Trans. Software Eng., </journal> <volume> vol. 17, </volume> <pages> pp. 789-799, </pages> <month> Aug. </month> <year> 1991. </year>
Reference: [KuRe80] <author> Kuhl, J. G. and Reddy, S. M., </author> <title> ``Distributed fault-tolerance for large multiprocessor systems,'' </title> <booktitle> Proc. IEEE Symp. Comput. Architecture, </booktitle> <pages> pp. 23-30, </pages> <month> May </month> <year> 1980. </year>
Reference: [Lamp78] <author> Lamport, L., </author> <title> ``Time, clock, and the ordering of events in a distributed system,'' </title> <journal> Commun. ACM, </journal> <volume> vol. 21, </volume> <pages> pp. 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference: [MiMe84] <author> Mitchell, D. P. and Merrit, M. J., </author> <title> ``A distributed algorithm for deadlock detection and resolution,'' </title> <booktitle> Proc. 3rd ACM Symp. Principles of Distributed Computing, </booktitle> <address> Vancouver, Canada, </address> <pages> pp. 282-284, </pages> <month> Aug. </month> <year> 1984. </year>
Reference: [Nata86] <author> Natarajan, N., </author> <title> ``A distributed scheme for detecting communication deadlocks,'' </title> <journal> IEEE Trans. Software Eng., </journal> <volume> vol. SE-12, </volume> <pages> pp. 531-537, </pages> <month> Apr. </month> <year> 1986. </year>
Reference: [Ober82] <author> Obermarck, R., </author> <title> ``Distributed deadlock detection algorithm,'' </title> <journal> ACM Trans. Database Syst., </journal> <volume> vol. 7, </volume> <pages> pp. 187-208, </pages> <month> June </month> <year> 1982. </year>
Reference: [PrMe67] <author> Preparata, F. P., Metze, G. and Chien, R. T., </author> <title> ``On the connection assignment problem of diagnosable systems,'' </title> <journal> IEEE Trans. Electron. Comput., </journal> <volume> vol. EC-16, </volume> <pages> pp. 848-854, </pages> <month> Dec. </month> <year> 1967. </year>
Reference-contexts: Theorem 4: In a deadlock cycle of size two, the process failure is not identifiable. Proof: The reason for this comes from the theory of structured system diagnosis <ref> [PrMe67] </ref>, we need 2t+1 processors for a one-step t-fault diagnosable system. In a deadlock cycle consisting of a non-faulty process, i, and a faulty process, j, either one is the successor and the predecessor of the other. Process i's test on process j will indicate that process j is faulty. <p> evaluated by counting the number of probe messages generated in the best and worst configurations of a deadlock cycle, which respectively are O (n) and O (n 2 - 19 - We cannot extend this result to more than one process failure in each deadlock cycle as the result of <ref> [PrMe67] </ref> shows. However, since the size of most deadlock cycles is small [GrHo81], the probability of more than one failure in a cycle is also small, hence this limitation is not a problem.
Reference: [RoBu88] <author> Roesler, M., Burkhard, W. A. and Cooper, K. B., </author> <title> ``Efficient deadlock resolution for lock-based concurrency control schemes,'' </title> <booktitle> IEEE 8th Int'l Conf. Distributed Computing Systems, </booktitle> <pages> pp. 224-233, </pages> <year> 1988. </year>
Reference: [SiNa85] <author> Sinha, M. K. and Natarajan, N., </author> <title> ``A priority based distributed deadlock detection algorithm,'' </title> <journal> IEEE Trans. Software Eng., </journal> <volume> vol. SE-11, </volume> <pages> pp. 67-80, </pages> <month> Jan. </month> <year> 1985. </year>
Reference-contexts: APPENDIX In this appendix we first calculate the probability of more than one process failure in a deadlock cycle and then analyze the communication cost between deadlock occurrence and deadlock detection by counting the number of probe messages generated in two kinds of configurations of a deadlock cycle <ref> [SiNa85] </ref>. The priority order of processes in the deadlock cycle is pri (i) &lt; pri ( j) if i &lt; j. It is assumed that each process is equally likely to fail, with a failure rate p.
References-found: 15

