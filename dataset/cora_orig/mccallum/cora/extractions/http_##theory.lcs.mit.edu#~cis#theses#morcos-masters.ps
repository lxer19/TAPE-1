URL: http://theory.lcs.mit.edu/~cis/theses/morcos-masters.ps
Refering-URL: http://theory.lcs.mit.edu/~cis/theses.html
Root-URL: 
Title: A Java Implementation of Simple Distributed Security Infrastructure  
Author: by Alexander Morcos Ronald L. Rivest Arthur C. Smith 
Degree: Submitted to the Department of Electrical Engineering and Computer Science in Partial Fulfillment of the Requirements for the Degrees of Bachelor of Science in Electrical Engineering and Computer Science and Master of Engineering in Electrical Engineering and Computer Science  All rights reserved. The author hereby grants to M.I.T. permission to reproduce and distribute publicly paper and electronic copies of this thesis and to grant others the right to do so. Author  Certified by  Thesis Supervisor Accepted by  Chairman, Department Committee on Graduate Theses  
Date: May 22, 1998 1998  May 22, 1998  
Affiliation: at the Massachusetts Institute of Technology  Massachusetts Institute of Technology.  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Carl M. Ellison et al. </author> <title> Simple Public Key Certificate. </title> <address> http://www.ietf.org/internet-drafts/draft-ietf-spki-cert-structure-05.txt </address>
Reference: [2] <institution> Sexpressions home page. </institution> <note> http://theory.lcs.mit.edu/~rivest/sexp.html </note>
Reference-contexts: This document describes an implementation of SDSI in Java. Three packages were built for this implementation. These packages together constitute a library of code, which implements the SDSI 2.0 specification. SDSI is built on top of the language of Sexpressions <ref> [ 2] </ref>. Sexpressions are a structure used to represent data. This implementation also contains classes that provide for the parsing and creation of Sexpressions. Users of a public-key infrastructure issue digital certificates and sign them. These certificates usually contain a statement about another user in the system.
Reference: [3] <author> R.Housley et al. </author> <title> Internet Public Key Infrastructure X.509 Certificate and CRL Profile. </title> <address> http://www.ietf.org/internet-drafts/draft-ietf-pkix-ipki-part1-07.txt </address>
Reference-contexts: This certificate is an identity certificate. If Alice trusts Bobs judgement, she can now add to her trusted knowledge the fact that K c belongs to Carl. This is secure because Alice can use K b to verify Bobs signature on the certificate. Many public-key infrastructure, such as X.509 <ref> [ 3] </ref>, deal with this concept of identity certificates and trust. They include such features as specifying rules for creating identity certificates and rules that establish how trust transfers.
Reference: [4] <author> Cryptix download page. </author> <note> http://www.systemics.com/software/cryptix-java/ </note>
Reference-contexts: As of JDK 1.1.4, which was used for this implementation, there were still many features missing from the java.security package. However, specifications were available, in an early-access release, for the 33 improvements to the Java Cryptography Architecture that would be included in the release of JDK 1.2. Cryptix <ref> [4] </ref> provides a suite of class which implement the International Java Cryptographic Extension in early release form. These classes are heavily depended on by this implementation for signature creation and verification. <p> The user must be able to maintain a database of certificates, issue new certificates, and construct a chain of certificates that authorize a specific request. The last of these tasks is the problem of 53 Certificate Discovery and is the subject of Jean-Emile Eliens thesis. See <ref> [4] </ref>. The remaining three jobs are implemented by the Certificate Utility. To perform one of these tasks the user selects a menu item from the menu bar. <p> The standard Sun security provider supports the MD5 and SHA-1 hashes. The RSA signature algorithms however must be implemented by another security provider. Cryptix provides implementations of these algorithms. The Cryptix classes can be found at <ref> [ 4] </ref> along with documentation and installation instructions. In addition to supporting the RSA algorithms, the Cryptix code defines the java.security.interfaces.RSAPublicKey and RSAPrivateKey interfaces. These interfaces are part of the early access specification for Java 1.2 and are used for the RSA code in Cryptix.
Reference: [5] <author> Jean-Emile Elien. </author> <title> Certificate Discovery Using SPKI/SDSI 2.0 Certificates. </title> <type> Masters thesis, </type> <institution> M.I.T., </institution> <month> May </month> <year> 1998. </year>
Reference-contexts: The chain proves that authority passes from the subject of the acl entry to the prover. This aspect of SDSI was not implemented by this Java implementation. Jean-Emile Elien has implemented a certificate discovery system, which from a database of certificates constructs such a chain if possible <ref> [ 5] </ref>. The code in this library should eventually interface with his work so that user of the SDSI Certificate Utility, discussed in Chapter 5, can create such chains. Verification complements the task of proving.
Reference: [6] <author> Matthew Fredette. </author> <title> The SDSI 2.0 Library and Tools. </title> <address> http://theory.lcs.mit.edu/~cis/sdsi/sdsi2/sdsi20_toc.html </address>
Reference-contexts: Another implementation of the SDSI 2.0 specification was done by Matthew Fredette. He designed a library in C to implement SDSI objects and functionality and has built a web-based user interface. Information on that implementation is available at <ref> [ 6] </ref>. The C implementation is interoperable with this implementation. The classes and source for this SDSI implementation can be found at [ 7], and the documentation can be found at [8]. The code is available as compiled classes or as source files.
Reference: [7] <author> SDSI 2.0 Java Implementation. </author> <note> http://theory.lcs.mit.edu/~cis/sdsi/sdsi2/java/SDSI_Java_Intro.html </note>
Reference-contexts: He designed a library in C to implement SDSI objects and functionality and has built a web-based user interface. Information on that implementation is available at [ 6]. The C implementation is interoperable with this implementation. The classes and source for this SDSI implementation can be found at <ref> [ 7] </ref>, and the documentation can be found at [8]. The code is available as compiled classes or as source files. The class files were compiled using the Sun Java compiler from the JDK.
Reference: [8] <author> SDSI 2.0 Java Documentation. </author> <note> http://theory.lcs.mit.edu/~cis/sdsi/sdsi2/java/packages.html </note>
Reference-contexts: Information on that implementation is available at [ 6]. The C implementation is interoperable with this implementation. The classes and source for this SDSI implementation can be found at [ 7], and the documentation can be found at <ref> [8] </ref>. The code is available as compiled classes or as source files. The class files were compiled using the Sun Java compiler from the JDK. The source code can be compiled again if needed, and it should compile without any deprecation warnings under a Java 1.1.4 compiler.
References-found: 8

