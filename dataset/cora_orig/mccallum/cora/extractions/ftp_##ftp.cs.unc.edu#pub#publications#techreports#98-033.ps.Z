URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/98-033.ps.Z
Refering-URL: http://www.cs.unc.edu/~eriksonc/Research/Paper/Index.html
Root-URL: http://www.cs.unc.edu
Title: GAPS: General and Automatic Polygonal Simplification  
Author: Carl Erikson, Dinesh Manocha 
Address: Chapel Hill  
Affiliation: Department of Computer Science University of North Carolina at  
Abstract: We present a new approach for simplifying polygonal objects. Our method is general in that it accepts models that contain both non-manifold geometry and surface attributes. It is automatic since it requires no user input to execute and returns approximate error bounds used to calculate switching distances between levels of detail, or LODs. Our algorithm, called General and Automatic Polygonal Simplification, or GAPS for short, uses an adaptive distance threshold and surface area preservation along with a quadric error metric to join unconnected regions of an object. Its name comes from this ability to fill in the gaps of an object. Our algorithm combines approximations of geometric and surface attribute error to produce a unified object space error metric. GAPS can efficiently produce high quality and drastic approximations of a wide variety of objects, including complicated pipe structures. This ability to perform drastic simplification allows us to create levels of detail to accelerate the rendering of large polygonal environments, consisting of hundreds of objects. When viewing these models with LODs created by GAPS, we achieve a 3.5 to 5 times average speedup with little loss in image quality. 
Abstract-found: 1
Intro-found: 1
Reference: [Clark76] <author> Clark, J. </author> <title> Hierarchical Geometric Models for Visible Surface Algorithms, </title> <journal> Communications of the ACM, </journal> <pages> 547-554, </pages> <year> 1976. </year>
Reference: [Cohen96] <author> Cohen, J., Varshney, A., Manocha, D., Turk, G., Weber, H., Agarwal, P., Brooks, F., and Wright, W. </author> <title> Simplification Envelopes, </title> <booktitle> Computer Graphics (SIGGRAPH 96 Proceedings), </booktitle> <pages> 119-128, </pages> <year> 1996. </year>
Reference-contexts: Many of the earlier algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis [Eck95], simplification envelopes <ref> [Cohen96] </ref>, and progressive meshes [Hoppe96]. All of these algorithms have been designed for manifold surfaces. For general polygonal models, algorithms based on vertex clustering have been proposed by [Low97, Luebke97, Rossignac93, and Schaufler95].
Reference: [Cohen97] <author> Cohen, J., Manocha, D., and Olano, M. </author> <title> Simplifying Polygonal Models Using Successive Mappings, </title> <booktitle> IEEE Visualization 97 Proceedings, </booktitle> <pages> 395-402, </pages> <year> 1997. </year>
Reference-contexts: Different algorithms vary in terms of quality of approximation, efficiency, simplification operations, and assumptions on the input model. The common set of geometric operations correspond to vertex removal and retriangulating holes [Bajaj96, Kalvin94, Schroeder92, Soucy96, and Turk92], edge collapses <ref> [Cohen97, Cohen98, Guziec95, Hoppe93, Hoppe96, Kobbelt98, Lindstrom98, and Ronfard96] </ref>, and triangle removal [Hamann94]. Many of the earlier algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis [Eck95], simplification envelopes [Cohen96], and progressive meshes [Hoppe96].
Reference: [Cohen98] <author> Cohen, J., Olano, M., and Manocha, D. </author> <title> Appearance-Preserving Simplification, </title> <booktitle> Computer Graphics (SIGGRAPH 98 Proceedings), </booktitle> <pages> 115-122. </pages>
Reference-contexts: Different algorithms vary in terms of quality of approximation, efficiency, simplification operations, and assumptions on the input model. The common set of geometric operations correspond to vertex removal and retriangulating holes [Bajaj96, Kalvin94, Schroeder92, Soucy96, and Turk92], edge collapses <ref> [Cohen97, Cohen98, Guziec95, Hoppe93, Hoppe96, Kobbelt98, Lindstrom98, and Ronfard96] </ref>, and triangle removal [Hamann94]. Many of the earlier algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis [Eck95], simplification envelopes [Cohen96], and progressive meshes [Hoppe96]. <p> Increasingly more algorithms are addressing surface attributes during the simplification process. [Hoppe96] includes scalar and discrete attributes in the energy function the algorithm tries to minimize. However, this method is too slow for our purposes. <ref> [Cohen98] </ref> uses texture and normal maps for appearance preserving simplification. Although this algorithm is elegant, it requires a surface parameterization and uses normal mapping that is not widely available in hardware.
Reference: [Cignoni98] <author> Cignoni, P., Montani, C., Rocchini, C., and Scopigno, R. </author> <title> A General Method for Preserving Attribute Values on Simplified Meshes, </title> <booktitle> IEEE Visualization 98 Proceedings, </booktitle> <pages> 59-66, </pages> <year> 1998. </year>
Reference-contexts: We efficiently decouple surface attributes from geometry and use a unified error metric that aids automatic selection of switching distances for LODs of an object. <ref> [Cignoni98] </ref> propose an efficient algorithm that creates surface attributes for a simplified mesh by sampling the original object. However, this method requires the storage of potentially large texture maps for each level of detail desired. objects.
Reference: [Eck95] <author> Eck, M., DeRose, T., Duchamp, T., Hoppe, H., Lounsbery, M., and Stuetzle, W. </author> <title> Multiresolution Analysis of Arbitrary Meshes, </title> <booktitle> Computer Graphics (SIGGRAPH 95 Proceedings), </booktitle> <pages> 173-182, </pages> <year> 1995. </year>
Reference-contexts: Many of the earlier algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis <ref> [Eck95] </ref>, simplification envelopes [Cohen96], and progressive meshes [Hoppe96]. All of these algorithms have been designed for manifold surfaces. For general polygonal models, algorithms based on vertex clustering have been proposed by [Low97, Luebke97, Rossignac93, and Schaufler95].
Reference: [El-Sana97] <author> El-Sana, J., and Varshney, A. </author> <title> Controlled Simplification of Genus for Polygonal Models, </title> <booktitle> IEEE Visualization 97 Proceedings, </booktitle> <pages> 403-410, </pages> <year> 1997. </year>
Reference-contexts: Although these algorithms are extremely quick, the quality of their approximations is too low for our purposes. [He95] uses a voxel-based approach but control over the degree of simplification is difficult. <ref> [El-Sana97] </ref> controls the genus of an object and [Schroeder97] simplifies to any target number of faces quickly, but both are unable to join unconnected regions of an object.
Reference: [Garland97] <author> Garland, M., and Heckbert, P. </author> <title> Surface Simplification Using Quadric Error Metrics, </title> <booktitle> Computer Graphics (SIGGRAPH 97 Proceedings), </booktitle> <pages> 209-216, </pages> <year> 1997. </year>
Reference-contexts: For a more thorough survey of simplification algorithms, consult [Heckbert97]. 2.1 Surface Simplification Using Quadric Error Metrics <ref> [Garland97] </ref> This algorithm, similar to [Ronfard96], tracks an error bound by associating each vertex with a set of planes. However, this method approximates the set of planes using a symmetric matrix called an error quadric. <p> Surface attributes are updated during the simplification process and are incorporated into an object space error metric. Like other algorithms, GAPS triangulates input objects before starting to simplify. 4.1 Automatic and Adaptive Selection of Distance Threshold As stated in Section 2, <ref> [Garland97] </ref> allows the user to specify a distance threshold t that determines all virtual edge pairs for the rest of its execution. If two vertices are within this distance t, then the virtual edge between them is inserted into the heap of candidate edges. <p> Vertices consist of a three-dimensional point plus a list of pointers to adjacent faces. Almost any polygonal model can be described with this representation. In practice, we have applied our algorithm to large CAD models composed of non-manifold and degenerate geometry. 5.2 Discontinuities As in <ref> [Garland97] </ref>, additional perpendicular constraint planes are added to the error quadrics of vertices that lie on boundary edges, or places where there is a geometric discontinuity. Unlike [Garland97] which assigns a large penalty to these planes, we weight them using the surface area of the face that contains the boundary edge. <p> In practice, we have applied our algorithm to large CAD models composed of non-manifold and degenerate geometry. 5.2 Discontinuities As in <ref> [Garland97] </ref>, additional perpendicular constraint planes are added to the error quadrics of vertices that lie on boundary edges, or places where there is a geometric discontinuity. Unlike [Garland97] which assigns a large penalty to these planes, we weight them using the surface area of the face that contains the boundary edge. Similarly, if there is a vertex or face attribute discontinuity occurring at an edge, constraint planes are inserted as if the edge were a boundary edge. <p> Update or delete pairs affected by the vertex merge. Repeat until a specified number of vertices or faces remain, or an error threshold has been reached. 6 Results When designing GAPS, we had goals of increasing the apparent visual quality of simplifications as compared to <ref> [Garland97] </ref>, while not slowing the algorithm down significantly. 6.1 Execution Speed All of our timing results were generated on an SGI with 195 MHz R10000 processors and 2 gigabytes of main memory. Table 2 shows timing comparisons between QSlim and GAPS.
Reference: [Garland98] <author> Garland, M., and Heckbert, P., </author> <title> Simplifying Surfaces with Color and Texture using Quadric Error Metrics, </title> <booktitle> IEEE Visualization 98 Proceedings, </booktitle> <pages> 263-269, </pages> <year> 1998. </year>
Reference-contexts: However, this method is too slow for our purposes. [Cohen98] uses texture and normal maps for appearance preserving simplification. Although this algorithm is elegant, it requires a surface parameterization and uses normal mapping that is not widely available in hardware. Garland and Heckbert extend their original algorithm in <ref> [Garland98] </ref> to handle surface attributes, but ignore topological simplification and use a higher dimensional error quadric metric that has little intuitive meaning.
Reference: [Guziec95] <author> Guziec, A. </author> <title> Surface Simplification with Variable Tolerance, </title> <booktitle> Second Annual Intl. Symp. On Medical Robotics and Computer Assisted Surgery (MRCAS 95), </booktitle> <pages> 132-139, </pages> <year> 1995. </year>
Reference-contexts: Different algorithms vary in terms of quality of approximation, efficiency, simplification operations, and assumptions on the input model. The common set of geometric operations correspond to vertex removal and retriangulating holes [Bajaj96, Kalvin94, Schroeder92, Soucy96, and Turk92], edge collapses <ref> [Cohen97, Cohen98, Guziec95, Hoppe93, Hoppe96, Kobbelt98, Lindstrom98, and Ronfard96] </ref>, and triangle removal [Hamann94]. Many of the earlier algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis [Eck95], simplification envelopes [Cohen96], and progressive meshes [Hoppe96].
Reference: [Hamann94] <author> Hamann, B. </author> <title> A Data Reduction Scheme for Triangulated Surfaces, </title> <booktitle> Computer-Aided Geometric Design, </booktitle> <pages> 197-214, </pages> <year> 1994. </year>
Reference-contexts: The common set of geometric operations correspond to vertex removal and retriangulating holes [Bajaj96, Kalvin94, Schroeder92, Soucy96, and Turk92], edge collapses [Cohen97, Cohen98, Guziec95, Hoppe93, Hoppe96, Kobbelt98, Lindstrom98, and Ronfard96], and triangle removal <ref> [Hamann94] </ref>. Many of the earlier algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis [Eck95], simplification envelopes [Cohen96], and progressive meshes [Hoppe96]. All of these algorithms have been designed for manifold surfaces.
Reference: [He95] <author> He, T., Hong, L., Kaufman, A., Varshney, A., and Wang, S. </author> <title> Voxel-Based Object Simplification, </title> <booktitle> IEEE Visualization 95 Proceedings, </booktitle> <pages> 296-303, </pages> <year> 1995. </year>
Reference-contexts: For general polygonal models, algorithms based on vertex clustering have been proposed by [Low97, Luebke97, Rossignac93, and Schaufler95]. These algorithms allow topological changes as the model is simplified. [Schroeder97] present a topology modifying decimation algorithm that can guarantee a requested reduction level. <ref> [He95] </ref> and [El-Sana96] demonstrate algorithms for controlled simplification of genus of polyhedral objects. For a more thorough survey of simplification algorithms, consult [Heckbert97]. 2.1 Surface Simplification Using Quadric Error Metrics [Garland97] This algorithm, similar to [Ronfard96], tracks an error bound by associating each vertex with a set of planes. <p> This method is elegant, but is too slow for our needs and uses primitives other than polygons. [Rossignac93] and [Low97] use vertex clustering to topologically simplify models efficiently and robustly. Although these algorithms are extremely quick, the quality of their approximations is too low for our purposes. <ref> [He95] </ref> uses a voxel-based approach but control over the degree of simplification is difficult. [El-Sana97] controls the genus of an object and [Schroeder97] simplifies to any target number of faces quickly, but both are unable to join unconnected regions of an object.
Reference: [Heckbert94] <author> Heckbert, P., and Garland, M. </author> <title> Multiresolution Modeling for Fast Rendering, </title> <booktitle> Graphics Interface 94 Proceedings, </booktitle> <pages> 43-50, </pages> <year> 1994. </year>
Reference: [Heckbert97] <author> Heckbert, P., and Garland, M. </author> <title> Survey of Polygonal Surface Simplification Algorithms, </title> <institution> Draft of Carnegie Mellon University Computer Science Technical Report, </institution> <year> 1997. </year>
Reference-contexts: These algorithms allow topological changes as the model is simplified. [Schroeder97] present a topology modifying decimation algorithm that can guarantee a requested reduction level. [He95] and [El-Sana96] demonstrate algorithms for controlled simplification of genus of polyhedral objects. For a more thorough survey of simplification algorithms, consult <ref> [Heckbert97] </ref>. 2.1 Surface Simplification Using Quadric Error Metrics [Garland97] This algorithm, similar to [Ronfard96], tracks an error bound by associating each vertex with a set of planes. However, this method approximates the set of planes using a symmetric matrix called an error quadric.
Reference: [Hoppe93] <author> Hoppe, H., DeRose, T., Duchamp, T., McDonald, J., and Stuetzle, W. </author> <title> Mesh Optimization, </title> <booktitle> Computer Graphics (SIGGRAPH 93 Proceedings), </booktitle> <pages> 19-26, </pages> <year> 1993. </year>
Reference-contexts: Different algorithms vary in terms of quality of approximation, efficiency, simplification operations, and assumptions on the input model. The common set of geometric operations correspond to vertex removal and retriangulating holes [Bajaj96, Kalvin94, Schroeder92, Soucy96, and Turk92], edge collapses <ref> [Cohen97, Cohen98, Guziec95, Hoppe93, Hoppe96, Kobbelt98, Lindstrom98, and Ronfard96] </ref>, and triangle removal [Hamann94]. Many of the earlier algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis [Eck95], simplification envelopes [Cohen96], and progressive meshes [Hoppe96].
Reference: [Hoppe96] <author> Hoppe, H. </author> <title> Progressive Meshes, </title> <booktitle> Computer Graphics (SIGGRAPH 96 Proceedings), </booktitle> <pages> 99-108, </pages> <year> 1996. </year>
Reference-contexts: Different algorithms vary in terms of quality of approximation, efficiency, simplification operations, and assumptions on the input model. The common set of geometric operations correspond to vertex removal and retriangulating holes [Bajaj96, Kalvin94, Schroeder92, Soucy96, and Turk92], edge collapses <ref> [Cohen97, Cohen98, Guziec95, Hoppe93, Hoppe96, Kobbelt98, Lindstrom98, and Ronfard96] </ref>, and triangle removal [Hamann94]. Many of the earlier algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis [Eck95], simplification envelopes [Cohen96], and progressive meshes [Hoppe96]. <p> Many of the earlier algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis [Eck95], simplification envelopes [Cohen96], and progressive meshes <ref> [Hoppe96] </ref>. All of these algorithms have been designed for manifold surfaces. For general polygonal models, algorithms based on vertex clustering have been proposed by [Low97, Luebke97, Rossignac93, and Schaufler95]. <p> Objects consist of vertices, triangular faces, vertex attributes, and face attributes. Vertex attributes are colors, normals, and texture coordinates. Face attributes are colors, materials, and textures. This categorization is equivalent to the one described in <ref> [Hoppe96] </ref> and [Hoppe98], except that Hoppe names them scalar and discrete attributes respectively. We use a simple internal representation for objects where faces consist of three corners. Each corner has a pointer to a vertex and a vertex attribute. <p> Increasingly more algorithms are addressing surface attributes during the simplification process. <ref> [Hoppe96] </ref> includes scalar and discrete attributes in the energy function the algorithm tries to minimize. However, this method is too slow for our purposes. [Cohen98] uses texture and normal maps for appearance preserving simplification. <p> Our approach for attribute handling is very approximate and could be improved. We would like to see if the work of [Lindstrom98] could be used to lessen the memory consumption of GAPS. Furthermore, it would be interesting to integrate the progressive mesh work of <ref> [Hoppe96] </ref> with the topological simplifications produced by GAPS. Now that more simplification algorithms are handling surface attributes, it would be nice to have a comparison tool that measures the quality of each algorithms output.
Reference: [Hoppe97] <author> Hoppe, H. </author> <title> View-Dependent Refinement of Progressive Meshes, </title> <booktitle> Computer Graphics (SIGGRAPH 97 Proceedings), </booktitle> <pages> 189-198, </pages> <year> 1997. </year>
Reference: [Hoppe98] <author> Hoppe, H. </author> <title> Efficient Implementation of Progressive Meshes, </title> <journal> Computers & Graphics Vol. </journal> <volume> 22 No. 1, </volume> <pages> 27-36, </pages> <year> 1998. </year>
Reference-contexts: Objects consist of vertices, triangular faces, vertex attributes, and face attributes. Vertex attributes are colors, normals, and texture coordinates. Face attributes are colors, materials, and textures. This categorization is equivalent to the one described in [Hoppe96] and <ref> [Hoppe98] </ref>, except that Hoppe names them scalar and discrete attributes respectively. We use a simple internal representation for objects where faces consist of three corners. Each corner has a pointer to a vertex and a vertex attribute.
Reference: [Lindstrom98] <author> Lindstrom, P., and Turk,G. </author> <title> Fast and Memory Efficient Polygonal Simplification, </title> <booktitle> IEEE Visualization 98 Proceedings, </booktitle> <pages> 279-286, </pages> <year> 1998. </year>
Reference-contexts: Different algorithms vary in terms of quality of approximation, efficiency, simplification operations, and assumptions on the input model. The common set of geometric operations correspond to vertex removal and retriangulating holes [Bajaj96, Kalvin94, Schroeder92, Soucy96, and Turk92], edge collapses <ref> [Cohen97, Cohen98, Guziec95, Hoppe93, Hoppe96, Kobbelt98, Lindstrom98, and Ronfard96] </ref>, and triangle removal [Hamann94]. Many of the earlier algorithms assume that the input model is a manifold and represented as a valid mesh. Other algorithms include those based on multi-resolution wavelet analysis [Eck95], simplification envelopes [Cohen96], and progressive meshes [Hoppe96]. <p> The algorithm appears to work well on all types of models, ranging from smooth surfaces to disjoint pipes. There are many avenues for future work. Our approach for attribute handling is very approximate and could be improved. We would like to see if the work of <ref> [Lindstrom98] </ref> could be used to lessen the memory consumption of GAPS. Furthermore, it would be interesting to integrate the progressive mesh work of [Hoppe96] with the topological simplifications produced by GAPS.
Reference: [Low97] <author> Low, K., and Tan, T. </author> <title> Model Simplification Using Vertex-Clustering, </title> <booktitle> Symposium on Interactive 3D Graphics 97 Proceedings, </booktitle> <pages> 75-82, </pages> <year> 1997. </year>
Reference-contexts: Other algorithms include those based on multi-resolution wavelet analysis [Eck95], simplification envelopes [Cohen96], and progressive meshes [Hoppe96]. All of these algorithms have been designed for manifold surfaces. For general polygonal models, algorithms based on vertex clustering have been proposed by <ref> [Low97, Luebke97, Rossignac93, and Schaufler95] </ref>. These algorithms allow topological changes as the model is simplified. [Schroeder97] present a topology modifying decimation algorithm that can guarantee a requested reduction level. [He95] and [El-Sana96] demonstrate algorithms for controlled simplification of genus of polyhedral objects. <p> This method is elegant, but is too slow for our needs and uses primitives other than polygons. [Rossignac93] and <ref> [Low97] </ref> use vertex clustering to topologically simplify models efficiently and robustly.
Reference: [Luebke97] <author> Luebke, D., and Erikson, C. </author> <title> View-Dependent Simplification of Arbitrary Polygonal Environments, </title> <booktitle> Computer Graphics (SIGGRAPH 97 Proceedings), </booktitle> <pages> 199-208, </pages> <year> 1997. </year>
Reference-contexts: Other algorithms include those based on multi-resolution wavelet analysis [Eck95], simplification envelopes [Cohen96], and progressive meshes [Hoppe96]. All of these algorithms have been designed for manifold surfaces. For general polygonal models, algorithms based on vertex clustering have been proposed by <ref> [Low97, Luebke97, Rossignac93, and Schaufler95] </ref>. These algorithms allow topological changes as the model is simplified. [Schroeder97] present a topology modifying decimation algorithm that can guarantee a requested reduction level. [He95] and [El-Sana96] demonstrate algorithms for controlled simplification of genus of polyhedral objects.
Reference: [Popovic97] <author> Popovic, J., and Hoppe, H. </author> <title> Progressive Simplicial Complexes, </title> <booktitle> Computer Graphics (SIGGRAPH 97 Proceedings), </booktitle> <pages> 217-224, </pages> <year> 1997. </year>
Reference-contexts: To better illustrate this speedup, we recommend watching this papers accompanying video. 7 Comparison In this section, we first compare simplification algorithms that lie in the domain of topological simplification followed by ones that handle surface attributes. <ref> [Popovic97] </ref> presents an interesting Object Verts Tris QSlim time (secs.) QSlim time using t (secs.) GAPS not using t (secs.) GAPS (secs.) Rotor 2328 4736 1.45 1.59 1.56 2.19 Head 4925 9580 2.89 3.63 3.51 4.63 Chamber 5685 10423 9.48 17.09 3.50 6.98 Econ 10032 23556 7.61 68.60 7.72 25.22 Bunny
Reference: [Ronfard96] <author> Ronfard, R., and Rossignac, J. </author> <title> Full-range Approximation of Triangulated Polyhedra, </title> <booktitle> Computer Graphics Forum (Eurographics 96 Proceedings), </booktitle> <pages> 67-76, </pages> <year> 1996. </year>
Reference-contexts: For a more thorough survey of simplification algorithms, consult [Heckbert97]. 2.1 Surface Simplification Using Quadric Error Metrics [Garland97] This algorithm, similar to <ref> [Ronfard96] </ref>, tracks an error bound by associating each vertex with a set of planes. However, this method approximates the set of planes using a symmetric matrix called an error quadric. It uses the vertex merge operation to simplify, so it is able to join unconnected regions of an object.
Reference: [Rossignac93] <author> Rossignac, J., and Borrel, P. </author> <title> Multi-Resolution 3D Approximations for Rendering Complex Scenes, </title> <booktitle> Geometric Modeling in Computer Graphics, </booktitle> <pages> 455-465, </pages> <year> 1993. </year>
Reference-contexts: Other algorithms include those based on multi-resolution wavelet analysis [Eck95], simplification envelopes [Cohen96], and progressive meshes [Hoppe96]. All of these algorithms have been designed for manifold surfaces. For general polygonal models, algorithms based on vertex clustering have been proposed by <ref> [Low97, Luebke97, Rossignac93, and Schaufler95] </ref>. These algorithms allow topological changes as the model is simplified. [Schroeder97] present a topology modifying decimation algorithm that can guarantee a requested reduction level. [He95] and [El-Sana96] demonstrate algorithms for controlled simplification of genus of polyhedral objects. <p> This method is elegant, but is too slow for our needs and uses primitives other than polygons. <ref> [Rossignac93] </ref> and [Low97] use vertex clustering to topologically simplify models efficiently and robustly.
Reference: [Schroeder92] <author> Schroeder, W., Zarge, J., and Lorensen, W. </author> <title> Decimation of Triangle Meshes, </title> <booktitle> Computer Graphics (SIGGRAPH 92 Proceedings), </booktitle> <pages> 65-70, </pages> <year> 1992. </year>
Reference-contexts: Different algorithms vary in terms of quality of approximation, efficiency, simplification operations, and assumptions on the input model. The common set of geometric operations correspond to vertex removal and retriangulating holes <ref> [Bajaj96, Kalvin94, Schroeder92, Soucy96, and Turk92] </ref>, edge collapses [Cohen97, Cohen98, Guziec95, Hoppe93, Hoppe96, Kobbelt98, Lindstrom98, and Ronfard96], and triangle removal [Hamann94]. Many of the earlier algorithms assume that the input model is a manifold and represented as a valid mesh.
Reference: [Schroeder97] <author> Schroeder, W. </author> <title> A Topology Modifying Progressive Decimation Algorithm, </title> <booktitle> IEEE Visualization 97 Proceedings, </booktitle> <pages> 205-212, </pages> <year> 1997. </year>
Reference-contexts: All of these algorithms have been designed for manifold surfaces. For general polygonal models, algorithms based on vertex clustering have been proposed by [Low97, Luebke97, Rossignac93, and Schaufler95]. These algorithms allow topological changes as the model is simplified. <ref> [Schroeder97] </ref> present a topology modifying decimation algorithm that can guarantee a requested reduction level. [He95] and [El-Sana96] demonstrate algorithms for controlled simplification of genus of polyhedral objects. <p> Although these algorithms are extremely quick, the quality of their approximations is too low for our purposes. [He95] uses a voxel-based approach but control over the degree of simplification is difficult. [El-Sana97] controls the genus of an object and <ref> [Schroeder97] </ref> simplifies to any target number of faces quickly, but both are unable to join unconnected regions of an object. Increasingly more algorithms are addressing surface attributes during the simplification process. [Hoppe96] includes scalar and discrete attributes in the energy function the algorithm tries to minimize.

References-found: 26

