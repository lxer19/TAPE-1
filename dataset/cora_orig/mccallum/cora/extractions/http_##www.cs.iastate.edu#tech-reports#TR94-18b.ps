URL: http://www.cs.iastate.edu/tech-reports/TR94-18b.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: http://www.cs.iastate.edu
Title: The Behavior-Realization Adjunction and Generalized Homomorphic Relations  
Author: Gary T. Leavens and Don Pigozzi TR #-b Gary T. Leavens and Don Pigozzi, 
Keyword: behavior, realization, observable equivalence, simulation, generalized relation, abstract data type, model theory. 1994 CR Categories: D.3.3 [Programming Languages] Language Constructs Abstract data types; F.3.2 [Logics and Meanings of Programs] Semantics of Programming Languages algebraic approaches to semantics; F.3.2 [Mathematical Logic and Formal Languages] Mathematical Logic model theory.  
Address: 226 Atanasoff Hall  Ames, Iowa 50011-1040, USA  
Affiliation: Department of Computer Science  Iowa State University  M S-T E X  
Note: 1996  1991 Mathematics Subject Classification. Primary: 68Q65 Secondary: 68N05, 68N15, 68Q60. A slightly abbreviated version will appear in Theoretical Computer Science. Copyright c  1994, 1996. This copyright will be transferred to the journal.  Typeset by A  
Date: September 1994, revised September 1994, July  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> P. </author> <title> America, Designing an Object-Oriented Programming Language with Behavioural Subtyp-ing, </title> <booktitle> Foundations of Object-Oriented Languages, </booktitle> <address> REX School/Workshop, Noordwijkerhout, The Netherlands, </address> <note> May/June 1990 (J. </note> <editor> W. de Bakker and W. P. de Roever and G. Rozen-berg, eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 489, </volume> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1991, </year> <pages> pp. 60-90. </pages>
Reference-contexts: Future work. The main work we plan to do in the future is to use our results to study behavioral subtyping <ref> [1, 11] </ref>. In earlier work [12] we gave a sufficient algebraic condition for legal behavioral subtyping by using standard homomorphic relations. Using the techniques in this paper, we believe that we can prove a necessary and 28 GARY T.
Reference: 2. <author> G. Birkhoff, </author> <title> Lattice theory, Third Edition, </title> <journal> American Mathematical Societ Colloquium Publications, </journal> <volume> vol. 25, </volume> <publisher> American Mathematical Society, </publisher> <address> New York, </address> <year> 1967. </year>
Reference-contexts: Thm. 3.8 says that BE and RE @ form a Galois connection when viewed as mappings between the poset of standard relations and the dual poset of generalized relations (see e.g. Birkhoff <ref> [2] </ref>, p.124). The basic adjunction. Like all posets, the standard and generalized relations between A and B can be viewed as simple categories, i.e., categories in which there is at most one arrow between any pair of objects.
Reference: 3. <author> K. K. Dhara and G. T. Leavens, </author> <title> Forcing behavioral subtyping through specification inheritance., </title> <booktitle> Proceedings 18th International Conference on Software Engineering (Berlin, </booktitle> <address> Germany), </address> <publisher> IEEE, </publisher> <year> 1996, </year> <pages> pp. 258-267. </pages>
Reference-contexts: We also plan to consider higher-order terms in the presence of nondeterminism and subtyping, as was done in [12]. Another extension planned is to adapt our results to the study of ADTs with mutable objects (i.e., objects with time-varying state) <ref> [3, 13] </ref>. Additional questions to investigate are proof-theoretic conditions for behavioral reduction and equivalence, especially for subtyping. The results of this paper suggest that the general categorical theory of modules presented in [6, 7] might have a useful generalization.
Reference: 4. <author> V. Giarratana, F. Gimona and U. Montanari, </author> <title> Observability Concepts in Abstract Data Type Specifications, </title> <booktitle> Mathematical Foundations of Computer Science 1976, Proceedings 5th Symposium, </booktitle> <editor> Gdansk (A. Mazurkiewicz, ed.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 45, </volume> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1976, </year> <pages> pp. 576-587. </pages>
Reference-contexts: This paper concentrates, therefore, on how to compare an implementation algebra to a paradigm, once a paradigm is selected. Several authors have studied such notions previously (including <ref> [4, 7, 17, 18] </ref> | see Section 8 of [23] for a survey). For our purposes the most important technique is that of Schoett [18].
Reference: 5. <author> J. A. Goguen, </author> <title> Realization is Universal, Math. </title> <booktitle> Systems Theory 6 (1973), </booktitle> <pages> 359-374. </pages>
Reference-contexts: We have found it useful to adapt the concepts of "behavior" and "realization" as they are developed in Goguen and Meseguer <ref> [5, 6] </ref> for the formalism in which to present our results. Formally we think of standard relations as the "behavior" of generalized relations and generalized relations as the "realization" of standard ones. <p> The rest of the paper is organized as follows. Sec. 1 quickly reviews basic ter 1 The term realization is intended to suggest the realization of a specification in the sense of a correct implementation of the specification <ref> [5, 6] </ref>. We think of a standard relation as specifying the behavior of a pair of environments and the environment pairs realizing the behavior as the correct implementation of the specification. BEHAVIOR-REALIZATION ADJUNCTION 5 minology. Sec. 2 defines relations between environments (generalized relations). <p> Here we want to make some brief remarks about its connection with the more distantly related, but nevertheless influential, work of Goguen and Meseguer. The decision to formulate our results as a behavior-realization adjunction was inspired by Goguen's <ref> [5] </ref> categorical theory of automata [5] and its subsequent extension to general modules by Goguen and Meseguer [6, 7]. But the relationship between our theory of behavior, realization, and the associated adjunction and the corresponding theory of Goguen and Meseguer is not straightforward. <p> Here we want to make some brief remarks about its connection with the more distantly related, but nevertheless influential, work of Goguen and Meseguer. The decision to formulate our results as a behavior-realization adjunction was inspired by Goguen's <ref> [5] </ref> categorical theory of automata [5] and its subsequent extension to general modules by Goguen and Meseguer [6, 7]. But the relationship between our theory of behavior, realization, and the associated adjunction and the corresponding theory of Goguen and Meseguer is not straightforward.
Reference: 6. <author> J. Goguen and J. Meseguer, </author> <title> Universal Realization, Persistent Interconnection and Implementation of Abstract Modules, </title> <booktitle> Proceedings, 9th International Conference on Automata, Languages and Programming (M. </booktitle> <editor> Nielsen and E. M. Schmidt, eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 140, </volume> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1982, </year> <pages> pp. 265-281. </pages> <note> 32 GARY T. LEAVENS AND DON PIGOZZI </note>
Reference-contexts: We have found it useful to adapt the concepts of "behavior" and "realization" as they are developed in Goguen and Meseguer <ref> [5, 6] </ref> for the formalism in which to present our results. Formally we think of standard relations as the "behavior" of generalized relations and generalized relations as the "realization" of standard ones. <p> The rest of the paper is organized as follows. Sec. 1 quickly reviews basic ter 1 The term realization is intended to suggest the realization of a specification in the sense of a correct implementation of the specification <ref> [5, 6] </ref>. We think of a standard relation as specifying the behavior of a pair of environments and the environment pairs realizing the behavior as the correct implementation of the specification. BEHAVIOR-REALIZATION ADJUNCTION 5 minology. Sec. 2 defines relations between environments (generalized relations). <p> The decision to formulate our results as a behavior-realization adjunction was inspired by Goguen's [5] categorical theory of automata [5] and its subsequent extension to general modules by Goguen and Meseguer <ref> [6, 7] </ref>. But the relationship between our theory of behavior, realization, and the associated adjunction and the corresponding theory of Goguen and Meseguer is not straightforward. Roughly speaking, in [6, 7] the behavior of an algebra A is defined pretty much the way Schoett does, namely, as the abstract function from <p> was inspired by Goguen's [5] categorical theory of automata [5] and its subsequent extension to general modules by Goguen and Meseguer <ref> [6, 7] </ref>. But the relationship between our theory of behavior, realization, and the associated adjunction and the corresponding theory of Goguen and Meseguer is not straightforward. Roughly speaking, in [6, 7] the behavior of an algebra A is defined pretty much the way Schoett does, namely, as the abstract function from the set of ground programs to the set of visible data elements that maps each program to its output, when run in A. (By a ground program we mean <p> 2 TCONi where PROC H is the set of all H-procedures. (Note that PROC is much wider than the class of ground programs because, not only can a procedure return a nonvisible data element, but nonvisible input variables are admitted.) While the algebra A is treated as a variable in <ref> [6, 7] </ref>, in effect we fix two comparable algebras A and B and consider their Cartesian product A fi B. <p> Additional questions to investigate are proof-theoretic conditions for behavioral reduction and equivalence, especially for subtyping. The results of this paper suggest that the general categorical theory of modules presented in <ref> [6, 7] </ref> might have a useful generalization. It is not clear at this point however what form it should take. As a generalization of the construction of the minimal automata, the functor N of (5.3) gives in some sense the simplest algebra that realizes a given visible behavior.
Reference: 7. <author> J. Goguen and J. Meseguer, Initiality, </author> <title> Induction and Computability, Algebraic Methods in Semantics (M. </title> <editor> Nivat and J. Reynolds, eds.), </editor> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1985, </year> <pages> pp. 459-541. </pages>
Reference-contexts: This paper concentrates, therefore, on how to compare an implementation algebra to a paradigm, once a paradigm is selected. Several authors have studied such notions previously (including <ref> [4, 7, 17, 18] </ref> | see Section 8 of [23] for a survey). For our purposes the most important technique is that of Schoett [18]. <p> The decision to formulate our results as a behavior-realization adjunction was inspired by Goguen's [5] categorical theory of automata [5] and its subsequent extension to general modules by Goguen and Meseguer <ref> [6, 7] </ref>. But the relationship between our theory of behavior, realization, and the associated adjunction and the corresponding theory of Goguen and Meseguer is not straightforward. Roughly speaking, in [6, 7] the behavior of an algebra A is defined pretty much the way Schoett does, namely, as the abstract function from <p> was inspired by Goguen's [5] categorical theory of automata [5] and its subsequent extension to general modules by Goguen and Meseguer <ref> [6, 7] </ref>. But the relationship between our theory of behavior, realization, and the associated adjunction and the corresponding theory of Goguen and Meseguer is not straightforward. Roughly speaking, in [6, 7] the behavior of an algebra A is defined pretty much the way Schoett does, namely, as the abstract function from the set of ground programs to the set of visible data elements that maps each program to its output, when run in A. (By a ground program we mean <p> 2 TCONi where PROC H is the set of all H-procedures. (Note that PROC is much wider than the class of ground programs because, not only can a procedure return a nonvisible data element, but nonvisible input variables are admitted.) While the algebra A is treated as a variable in <ref> [6, 7] </ref>, in effect we fix two comparable algebras A and B and consider their Cartesian product A fi B. <p> Additional questions to investigate are proof-theoretic conditions for behavioral reduction and equivalence, especially for subtyping. The results of this paper suggest that the general categorical theory of modules presented in <ref> [6, 7] </ref> might have a useful generalization. It is not clear at this point however what form it should take. As a generalization of the construction of the minimal automata, the functor N of (5.3) gives in some sense the simplest algebra that realizes a given visible behavior.
Reference: 8. <author> J. A. Goguen and J. W. Thatcher and E. G. Wagner, </author> <title> An Initial Algebra Approach to the Specification, Correctness and Implementation of Abstract Data Types, Current Trends in Programming Methodology (R. </title> <editor> T. Yeh, ed.), </editor> <volume> vol. 4, </volume> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1978, </year> <pages> pp. 80-149. </pages>
Reference-contexts: We shall also assume that a candidate implementation has already been adapted to the interface (signature) required ("derived" in the sense of Section 5.5 of <ref> [8] </ref>). What is known about the soundness and completeness of techniques for proving that a candidate implementation of an ADT is correct? We shall restrict ourselves here to model-theoretic methods.
Reference: 9. <author> J. Guttag and J. J. Horning, </author> <title> The Algebraic Specification of Abstract Data Types, </title> <journal> Acta Infor-matica 10 (1978), </journal> <volume> no. 1, </volume> <pages> 27-52. </pages>
Reference: 10. <author> A. Jung and J. Tiuryn, </author> <title> A new characterization of lambda definability, Typed lambda calculus and applications. </title> <booktitle> International Conference on Typed Lambda Calculus and Applications, TLCA '93 March 1993, Utrecht, The Netherlands Proceedings. </booktitle> <editor> (M. Bezem and J. F. Groote, eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 598, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1993, </year> <pages> pp. 245-257. </pages>
Reference-contexts: An independent generalization of logical relations that appears to be closely related to our notion of homomorphic generalized relations is considered in <ref> [10] </ref>. BEHAVIOR-REALIZATION ADJUNCTION 11 Definition 2.6 (standard homomorphic relation). Let A and B be (not necessarily comparable) -algebras and let R be a standard relation between A and B. <p> We should also be able to characterize the exact circumstances under which our earlier definition of legal behavioral subtyping is necessary and sufficient. It should be relatively straightforward to extend the results in this paper to higher-order terms using the appropriate notion of generalized logical relation. Jung and Tiuryn <ref> [10] </ref> use what appears to be a closely related notion they call "Kripke logical relations of varying arity" to study lambda definabilty in Henkin models of the simply typed lambda calculus; the idea of such logical relations originated with Sieber [19].
Reference: 11. <author> G. T. Leavens, </author> <title> Modular Specification and Verification of Object-Oriented Programs, </title> <journal> IEEE Software 8 (July, 1991), </journal> <volume> no. 4, </volume> <pages> 72-80. </pages>
Reference-contexts: Future work. The main work we plan to do in the future is to use our results to study behavioral subtyping <ref> [1, 11] </ref>. In earlier work [12] we gave a sufficient algebraic condition for legal behavioral subtyping by using standard homomorphic relations. Using the techniques in this paper, we believe that we can prove a necessary and 28 GARY T.
Reference: 12. <author> G. T. Leavens and D. </author> <title> Pigozzi, Typed Homomorphic Relations Extended with Subtypes, Mathematical Foundations of Programming Semantics '91 (S. </title> <editor> Brookes, ed.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 598, </volume> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1992, </year> <pages> pp. 144-167. </pages>
Reference-contexts: Future work. The main work we plan to do in the future is to use our results to study behavioral subtyping [1, 11]. In earlier work <ref> [12] </ref> we gave a sufficient algebraic condition for legal behavioral subtyping by using standard homomorphic relations. Using the techniques in this paper, we believe that we can prove a necessary and 28 GARY T. <p> We also plan to consider higher-order terms in the presence of nondeterminism and subtyping, as was done in <ref> [12] </ref>. Another extension planned is to adapt our results to the study of ADTs with mutable objects (i.e., objects with time-varying state) [3, 13]. Additional questions to investigate are proof-theoretic conditions for behavioral reduction and equivalence, especially for subtyping.
Reference: 13. <author> B. Liskov and J. Wing, </author> <title> A behavioral notion of subtyping, </title> <journal> TOPLAS, </journal> <volume> 16 (1994), </volume> <pages> 1811-1841. </pages>
Reference-contexts: We also plan to consider higher-order terms in the presence of nondeterminism and subtyping, as was done in [12]. Another extension planned is to adapt our results to the study of ADTs with mutable objects (i.e., objects with time-varying state) <ref> [3, 13] </ref>. Additional questions to investigate are proof-theoretic conditions for behavioral reduction and equivalence, especially for subtyping. The results of this paper suggest that the general categorical theory of modules presented in [6, 7] might have a useful generalization.
Reference: 14. <author> S. Mac Lane, </author> <title> Categories for the Working Mathematician, Graduate Texts in Mathematics, </title> <journal> vol. </journal> <volume> 5, </volume> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1971. </year>
Reference: 15. <author> T. Nipkow, </author> <title> Non-deterministic Data Types: Models and Implementations, </title> <journal> Acta Informatica 22 (March, 1986), </journal> <volume> no. 6, </volume> <pages> 629-661. </pages>
Reference: 16. <author> J. C. Reynolds, </author> <title> Using Category Theory to Design Implicit Conversions and Generic Operators, Semantics-Directed Compiler Generation, </title> <booktitle> Proceedings of a Workshop, Aarhus, </booktitle> <editor> Denmark (N. D. Jones, ed.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 94, </volume> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1980, </year> <pages> pp. 211-258. </pages>
Reference-contexts: Signatures are hierarchical over a set of visible types and allow for the overloading of operations <ref> [16] </ref>. Let N = f 0; 1; 2; 3; : : :g be the set of natural numbers. Definition 1.1 (signature).
Reference: 17. <author> D. Sannella and A. Tarlecki, </author> <title> On Observational Equivalence and Algebraic Specification, </title> <journal> Journal of Computer and System Sciences 34 (April/June, 1987), </journal> <volume> no. 2/3, </volume> <pages> 150-178. </pages>
Reference-contexts: This paper concentrates, therefore, on how to compare an implementation algebra to a paradigm, once a paradigm is selected. Several authors have studied such notions previously (including <ref> [4, 7, 17, 18] </ref> | see Section 8 of [23] for a survey). For our purposes the most important technique is that of Schoett [18].
Reference: 18. <author> O. Schoett, </author> <title> Behavioural Correctness of Data Representations, </title> <booktitle> Science of Computer Programming 14 (June, 1990), </booktitle> <volume> no. 1, </volume> <pages> 43-57. </pages>
Reference-contexts: This paper concentrates, therefore, on how to compare an implementation algebra to a paradigm, once a paradigm is selected. Several authors have studied such notions previously (including <ref> [4, 7, 17, 18] </ref> | see Section 8 of [23] for a survey). For our purposes the most important technique is that of Schoett [18]. <p> Several authors have studied such notions previously (including [4, 7, 17, 18] | see Section 8 of [23] for a survey). For our purposes the most important technique is that of Schoett <ref> [18] </ref>. Schoett casts the problem as one of showing that a partial algebra A can be used in place of the paradigm, a partial algebra B, without exhibiting surprising behavior. <p> Let H 2 TCON and h; i 2 ENV AfiB H . Then and are VIS-behaviorally equivalent iff BE (; ) is VIS-identical, i.e., BE (; )j VIS = I. fl By Cor. 3.13, and are VIS-behaviorally equivalent iff RE @ (I fl ) . According Schoett <ref> [18] </ref>, comparable algebras A and B are behaviorally equivalent if every visible environment is VIS-behaviorally equivalent to itself when viewed as an environment of A and then of B; that is, if for every visible type context H (see Def. 1.4) the following holds for every H-environment of Aj VIS = <p> We note that the condition (ii) of Def. 3.15 is essentially identical to Schoett's weaker notion of behavioral equivalence. We formalize it as follows. 20 GARY T. LEAVENS AND DON PIGOZZI Definition 3.16 (weak VIS-behavioral equivalence <ref> [18] </ref>). Algebras A and B are weakly VIS-behaviorally equivalent iff the behavior of I + is VIS-identical, i.e., BE (I + )j VIS = I. fl Weak VIS-behavioral equivalence refers only to the behavior of visible environments. <p> We now have the machinery in place to prove Schoett's algebraic characterization of weak VIS-behavioral equivalence (Def. 3.16). Theorem 4.9 (Schoett <ref> [18] </ref>). Algebras A and B are weakly VIS-behaviorally equivalent iff there exists a weak bisimulation between A and B. Proof. Assume A and B are weakly VIS-behaviorally equivalent, i.e., assume that BE (I + ) j VIS = I. <p> Discussion In this section we discuss related work, future work, and offer some conclusions. Related work. In the main body of the paper we have discussed in some detail how our work relates to the work of Schoett <ref> [18] </ref>. Here we want to make some brief remarks about its connection with the more distantly related, but nevertheless influential, work of Goguen and Meseguer.
Reference: 19. <author> K. Sieber, </author> <title> Reasoning about sequential functions via logical relations, </title> <booktitle> Applications of Categories in Computer Science. Proceedings of the LMS Symposium, Durham 1991 (M. </booktitle> <editor> P. Four-man, P. T. Johnstone, and A. M. Pitts, eds.), </editor> <booktitle> London Mathematical Society Lecture Note Series, </booktitle> <volume> vol. 177, </volume> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1992, </year> <pages> pp. 258-269. </pages>
Reference-contexts: Jung and Tiuryn [10] use what appears to be a closely related notion they call "Kripke logical relations of varying arity" to study lambda definabilty in Henkin models of the simply typed lambda calculus; the idea of such logical relations originated with Sieber <ref> [19] </ref>. We also plan to consider higher-order terms in the presence of nondeterminism and subtyping, as was done in [12]. Another extension planned is to adapt our results to the study of ADTs with mutable objects (i.e., objects with time-varying state) [3, 13].
Reference: 20. <author> R. Statman, </author> <title> Logical Relations and the typed -calculus, </title> <journal> Information and Control 65 (May/- June, 1985), </journal> <volume> no. 2/3, </volume> <pages> 85-97. </pages>
Reference-contexts: under the operations of an algebra, in a sense made precise in the following definitions, are called homomorphic relations. 2 The various notions of one data structure simulating another are defined in terms of relations of this kind. 2 Homomorphic relations are called logical relations when extended to higher types <ref> [20] </ref>. An independent generalization of logical relations that appears to be closely related to our notion of homomorphic generalized relations is considered in [10]. BEHAVIOR-REALIZATION ADJUNCTION 11 Definition 2.6 (standard homomorphic relation).
Reference: 21. <author> P. Wadler and S. Blott, </author> <title> How to make ad-hoc Polymorphism less ad hoc, </title> <booktitle> Conference Record of the Sixteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> Austin, Texas, </address> <publisher> ACM, </publisher> <address> New York, </address> <year> 1989, </year> <pages> pp. 60-76. </pages>
Reference-contexts: Existing objects of one of these subtypes can be treated as if they were collections. This is analogous to the way BEHAVIOR-REALIZATION ADJUNCTION 3 that objects having the type of a formal type parameter, such as PO, are treated in parameterized code <ref> [21] </ref>. It is also apparent from this example why it is important to be able to compare nonvisible data.
Reference: 22. <author> M. Wand, </author> <title> Final Algebra Semantics and Data Type Extensions, </title> <journal> Journal of Computer and System Sciences 19 (1979), </journal> <volume> no. 1, </volume> <pages> 27-44. </pages>
Reference: 23. <author> M. Wirsing, </author> <title> Algebraic Specification, </title> <booktitle> Handbook of Theoretical Computer Science (J. </booktitle> <editor> van Leewen, ed.), </editor> <volume> vol. </volume> <editor> B: </editor> <title> Formal Models and Semantics, </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990, </year> <pages> pp. 675-788. </pages>
Reference-contexts: This paper concentrates, therefore, on how to compare an implementation algebra to a paradigm, once a paradigm is selected. Several authors have studied such notions previously (including [4, 7, 17, 18] | see Section 8 of <ref> [23] </ref> for a survey). For our purposes the most important technique is that of Schoett [18]. Schoett casts the problem as one of showing that a partial algebra A can be used in place of the paradigm, a partial algebra B, without exhibiting surprising behavior.
Reference: 24. <author> M. Wirsing, P. Pepper, H. Partsch, W. Dosch and M. Broy, </author> <title> On Hierarchies of Abstract Data Types, </title> <journal> Acta Informatica 20 (1983), </journal> <volume> no. 1, </volume> <pages> 1-33. </pages> <institution> Department of Computer Science, Iowa State University, Ames, Iowa 50011-1040 USA E-mail address: leavens@cs.iastate.edu Department of Mathematics, Iowa State University, Ames, Iowa 50011 USA E-mail address: dpigozzi@iastate.edu </institution>
References-found: 24

