URL: http://www.csl.sri.com/cyrluk/dp.ps.gz
Refering-URL: http://www.csl.sri.com/cyrluk/cyrluk-papers.html
Root-URL: 
Email: shankarg@csl.sri.com  
Phone: Phone: +1 (415) 859-f2560, 5454, 5272g Fax: +1 (415) 859-2844  
Title: On Shostak's Decision Procedure for Combinations of Theories  
Author: David Cyrluk, Patrick Lincoln, and Natarajan Shankar 
Address: Menlo Park CA 94025 USA fcyrluk, lincoln,  
Affiliation: Computer Science Laboratory SRI International  
Abstract: Decision procedures are increasingly being employed for deciding or simplifying propositional combinations of ground equalities involving uninterpreted function symbols, linear arithmetic, arrays, and other theories. Two approaches for constructing decision procedures for combinations of ground theories were pioneered in the late seventies. In the approach of Nelson and Oppen, decision procedures for two disjoint theories are combined by introducing variables to name subterms and iteratively propagating any deduced equalities between variables from one theory to another. Shostak employs a different approach that works far more efficiently in practice. He uses an optimized implementation of the congruence closure procedure for ground equality over uninterpreted function symbols to combine theories that are canonizable and algebraically solvable. Many useful theories have these properties. Shostak's algorithm is subtle and complex and his description of this procedure is lacking in rigor. We present, for the first time, a careful development and clarification of Shostak's procedure that corrects several mistakes in Shostak's original presentation. Our analysis serves as a useful basis for the implementation, extension, and further optimization of Shostak's decision procedure. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. S. Boyer and J S. Moore. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1988. </year>
Reference-contexts: We are indebted to Rob Shostak for the original ideas studied in this paper. We thank John Rushby, Sam Owre, Deepak Kapur, Harald Ruess, Oliver Moller, and Tomas Uribe, and the anony mous referees for valuable feedback and comments. as Eves [4], Nqthm <ref> [1] </ref>, Ehdm [2], Ontic [9], PVS [13], the Stanford Pascal Verifier [8], and SDVS [3]. <p> that each term x i is a leaf node (i.e., has no successors), and each term f n i (a 1 ; : : : ; a n ) is represented by a node v such that (v) = f i , ffi (v) = n, and the nodes v <ref> [1] </ref>; : : : ; v [n] represent the terms a 1 ; : : : ; a n , respectively. If G is a graph representing S, and a is a term in S, let -(a) be the vertex in G representing a.
Reference: 2. <institution> User Guide for the Ehdm Specification Language and Verification System, </institution> <note> Version 6.1. </note> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> February </month> <year> 1993. </year> <title> Three volumes. </title>
Reference-contexts: We are indebted to Rob Shostak for the original ideas studied in this paper. We thank John Rushby, Sam Owre, Deepak Kapur, Harald Ruess, Oliver Moller, and Tomas Uribe, and the anony mous referees for valuable feedback and comments. as Eves [4], Nqthm [1], Ehdm <ref> [2] </ref>, Ontic [9], PVS [13], the Stanford Pascal Verifier [8], and SDVS [3]. <p> Shostak [15] used a different approach that merges the simplifiers for individual theories into a single procedure based on congruence closure. Shostak's decision procedure is at the core of systems such as PVS and Ehdm <ref> [12, 2] </ref>. In practice, Shostak's procedure is more efficient than that of Nelson and Oppen (see Crocker [5]). Despite its significance, a rigorous analysis of Shostak's procedure has been lacking. <p> This holds over a wide class of examples including propositional, arithmetic, and equality reasoning. These results match those obtained by Crocker <ref> [2, 8, 5] </ref>. 5 Conclusion The addition of decision procedures to automatic and semi-automatic theorem provers and proof checkers has clear advantages. Most of the major proof checking systems available today contain implementations of decision procedures for propositional logic, equality, and linear arithmetic.
Reference: 3. <author> Jeffrey V. Cook, Ivan V. Filippenko, Beth H. Levy, Leo G. Marcus, and Telis K. Menas. </author> <title> Formal computer verification in the state delta verification system (SDVS). </title> <booktitle> In AIAA Computing in Aerospace VIII, </booktitle> <pages> pages 77-87, </pages> <address> Baltimore, MD, </address> <month> October </month> <year> 1991. </year> <note> AIAA paper 91-3715. </note>
Reference-contexts: We thank John Rushby, Sam Owre, Deepak Kapur, Harald Ruess, Oliver Moller, and Tomas Uribe, and the anony mous referees for valuable feedback and comments. as Eves [4], Nqthm [1], Ehdm [2], Ontic [9], PVS [13], the Stanford Pascal Verifier [8], and SDVS <ref> [3] </ref>. In the mid-to-late seventies, Downey, Sethi, and Tarjan [6], Kozen [7], Nelson and Oppen [11], and Shostak [14] gave efficient algorithms for deciding such formulas by computing the congruence closure relation on the graph representing the terms in the formula. <p> The Nelson-Oppen procedure is used in Eves [4], the Stanford Pascal Verifier [8], and SDVS <ref> [3] </ref>. Shostak [15] used a different approach that merges the simplifiers for individual theories into a single procedure based on congruence closure. Shostak's decision procedure is at the core of systems such as PVS and Ehdm [12, 2].
Reference: 4. <author> Dan Craigen, Sentot Kromodimoeljo, Irwin Meisels, Bill Pase, and Mark Saaltink. </author> <title> EVES: An overview. </title> <editor> In S. Prehn and W. J. Toetenel, editors, </editor> <booktitle> VDM '91: Formal Software Development Methods, volume 551 of Lecture Notes in Computer Science, </booktitle> <pages> pages 389-405, </pages> <address> Noordwijkerhout, The Netherlands, </address> <month> October </month> <year> 1991. </year> <journal> Springer-Verlag. </journal> <volume> Volume 1: </volume> <booktitle> Conference Contributions. </booktitle>
Reference-contexts: N00014-95-C-0168, NSF Grant CCR-9224858, and ARPA contract A721. We are indebted to Rob Shostak for the original ideas studied in this paper. We thank John Rushby, Sam Owre, Deepak Kapur, Harald Ruess, Oliver Moller, and Tomas Uribe, and the anony mous referees for valuable feedback and comments. as Eves <ref> [4] </ref>, Nqthm [1], Ehdm [2], Ontic [9], PVS [13], the Stanford Pascal Verifier [8], and SDVS [3]. <p> Given decision procedures for the component theories (such as linear arithmetic and arrays), Nelson and Oppen [10] gave a technique for combining such decision procedures to decide the combination of these theories by simply propagating equalities between the different decision procedures. The Nelson-Oppen procedure is used in Eves <ref> [4] </ref>, the Stanford Pascal Verifier [8], and SDVS [3]. Shostak [15] used a different approach that merges the simplifiers for individual theories into a single procedure based on congruence closure. Shostak's decision procedure is at the core of systems such as PVS and Ehdm [12, 2].
Reference: 5. <author> S. Crocker. </author> <title> Comparison of Shostak's and Oppen's solvers. </title> <type> Unpublished manuscript, </type> <year> 1988. </year>
Reference-contexts: Shostak's decision procedure is at the core of systems such as PVS and Ehdm [12, 2]. In practice, Shostak's procedure is more efficient than that of Nelson and Oppen (see Crocker <ref> [5] </ref>). Despite its significance, a rigorous analysis of Shostak's procedure has been lacking. <p> Shostak [15] states that the use data structure is maintained so that the sig's are unique. This is incorrect and such an "optimization" can result in an incompleteness. The solver for cons, car , and cdr given by Shostak is also buggy. Performance Comparisons. Crocker <ref> [5] </ref> has carried out an empirical comparison of Shostak's algorithm as implemented by Shostak himself against Nelson and Oppen's implementation of their procedure. Crocker's results indicate a considerable efficiency advantage for Shostak's approach. <p> This holds over a wide class of examples including propositional, arithmetic, and equality reasoning. These results match those obtained by Crocker <ref> [2, 8, 5] </ref>. 5 Conclusion The addition of decision procedures to automatic and semi-automatic theorem provers and proof checkers has clear advantages. Most of the major proof checking systems available today contain implementations of decision procedures for propositional logic, equality, and linear arithmetic.
Reference: 6. <author> P. J. Downey, R. Sethi, and R. E. Tarjan. </author> <title> Variations on the common subexpres-sions problem. </title> <journal> Journal of the ACM, </journal> <volume> 27(4) </volume> <pages> 758-771, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: In the mid-to-late seventies, Downey, Sethi, and Tarjan <ref> [6] </ref>, Kozen [7], Nelson and Oppen [11], and Shostak [14] gave efficient algorithms for deciding such formulas by computing the congruence closure relation on the graph representing the terms in the formula.
Reference: 7. <author> D. Kozen. </author> <title> Complexity of finitely represented algebras. </title> <booktitle> In Proc. 9th ACM STOC, </booktitle> <pages> pages 164-177, </pages> <year> 1988. </year>
Reference-contexts: In the mid-to-late seventies, Downey, Sethi, and Tarjan [6], Kozen <ref> [7] </ref>, Nelson and Oppen [11], and Shostak [14] gave efficient algorithms for deciding such formulas by computing the congruence closure relation on the graph representing the terms in the formula.
Reference: 8. <author> D. C. Luckham, S. M. German, F. W. von Henke, R. A. Karp, P. W. Milne, D. C. Oppen, W. Polak, and W. L. Scherlis. </author> <title> Stanford Pascal Verifier user manual. </title> <type> CSD Report STAN-CS-79-731, </type> <institution> Stanford University, Stanford, </institution> <address> CA, </address> <month> March </month> <year> 1979. </year>
Reference-contexts: We thank John Rushby, Sam Owre, Deepak Kapur, Harald Ruess, Oliver Moller, and Tomas Uribe, and the anony mous referees for valuable feedback and comments. as Eves [4], Nqthm [1], Ehdm [2], Ontic [9], PVS [13], the Stanford Pascal Verifier <ref> [8] </ref>, and SDVS [3]. In the mid-to-late seventies, Downey, Sethi, and Tarjan [6], Kozen [7], Nelson and Oppen [11], and Shostak [14] gave efficient algorithms for deciding such formulas by computing the congruence closure relation on the graph representing the terms in the formula. <p> The Nelson-Oppen procedure is used in Eves [4], the Stanford Pascal Verifier <ref> [8] </ref>, and SDVS [3]. Shostak [15] used a different approach that merges the simplifiers for individual theories into a single procedure based on congruence closure. Shostak's decision procedure is at the core of systems such as PVS and Ehdm [12, 2]. <p> This holds over a wide class of examples including propositional, arithmetic, and equality reasoning. These results match those obtained by Crocker <ref> [2, 8, 5] </ref>. 5 Conclusion The addition of decision procedures to automatic and semi-automatic theorem provers and proof checkers has clear advantages. Most of the major proof checking systems available today contain implementations of decision procedures for propositional logic, equality, and linear arithmetic.
Reference: 9. <author> David A. McAllester. ONTIC: </author> <title> A Knowledge Representation System for Mathematics. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1989. </year>
Reference-contexts: We are indebted to Rob Shostak for the original ideas studied in this paper. We thank John Rushby, Sam Owre, Deepak Kapur, Harald Ruess, Oliver Moller, and Tomas Uribe, and the anony mous referees for valuable feedback and comments. as Eves [4], Nqthm [1], Ehdm [2], Ontic <ref> [9] </ref>, PVS [13], the Stanford Pascal Verifier [8], and SDVS [3].
Reference: 10. <author> G. Nelson and D. C. Oppen. </author> <title> Simplification by cooperating decision procedures. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 1(2) </volume> <pages> 245-257, </pages> <year> 1979. </year>
Reference-contexts: Given decision procedures for the component theories (such as linear arithmetic and arrays), Nelson and Oppen <ref> [10] </ref> gave a technique for combining such decision procedures to decide the combination of these theories by simply propagating equalities between the different decision procedures. The Nelson-Oppen procedure is used in Eves [4], the Stanford Pascal Verifier [8], and SDVS [3]. <p> CASES T OF nil : RETURN [a = b : T'] : NO (T'); IF find (a) = find (b) THEN RETURN ELSE merge (a, b) ENDIF; ENDCASES We state the theorem but omit the proof that NO constructs a congruence closed collection of equivalence classes of terms (see Nelson-Oppen <ref> [10] </ref>). Let f ind T represent the f ind operation following N O (T ). <p> for a; b in S Congruent T NO (a; b) f ind T NO (b): 4 Combinations of Theories The Nelson-Oppen approach to combining two decision procedures is to have each theory rename any uninterpreted subterms by variables, and to iteratively propagate any newly deduced equalities between variables across theories <ref> [10] </ref>. The main efficiency drawback to Nelson-Oppen's approach is that each theory has much of the same notion of equality resulting in duplicated effort. Shostak [15] takes a different approach by restricting his attention to can--onizable and algebraically solvable theories.
Reference: 11. <author> G. Nelson and D. C. Oppen. </author> <title> Fast decision procedures based on congruence closure. </title> <journal> Journal of the ACM, </journal> <volume> 27(2) </volume> <pages> 356-364, </pages> <year> 1980. </year>
Reference-contexts: In the mid-to-late seventies, Downey, Sethi, and Tarjan [6], Kozen [7], Nelson and Oppen <ref> [11] </ref>, and Shostak [14] gave efficient algorithms for deciding such formulas by computing the congruence closure relation on the graph representing the terms in the formula. <p> We say that T deduces a = b or T ` a = b if there is a proof from the equations in T using the rules of reflexivity, symmetry, transitivity, and substitutivity. Following the terminology of Nelson and Oppen <ref> [11] </ref>, let G = (V; E) be a labelled directed graph where (v) and ffi (v) give the label and out-degree, respectively, of vertex v in V . Let v [i] be the vertex u such that (v; u) is the ith edge with source v.
Reference: 12. <author> S. Owre, J. M. Rushby, and N. Shankar. PVS: </author> <title> A prototype verification system. </title> <editor> In Deepak Kapur, editor, </editor> <booktitle> 11th International Conference on Automated Deduction (CADE), volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 748-752, </pages> <address> Saratoga, NY, June 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Shostak [15] used a different approach that merges the simplifiers for individual theories into a single procedure based on congruence closure. Shostak's decision procedure is at the core of systems such as PVS and Ehdm <ref> [12, 2] </ref>. In practice, Shostak's procedure is more efficient than that of Nelson and Oppen (see Crocker [5]). Despite its significance, a rigorous analysis of Shostak's procedure has been lacking. <p> In future work we also hope to describe in some detail the myriad uses made of our decision procedures in the implementation of the state-of-the-art proof checker PVS <ref> [12] </ref>.
Reference: 13. <author> Sam Owre, John Rushby, Natarajan Shankar, and Friedrich von Henke. </author> <title> Formal verification for fault-tolerant architectures: Prolegomena to the design of PVS. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(2) </volume> <pages> 107-125, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: We are indebted to Rob Shostak for the original ideas studied in this paper. We thank John Rushby, Sam Owre, Deepak Kapur, Harald Ruess, Oliver Moller, and Tomas Uribe, and the anony mous referees for valuable feedback and comments. as Eves [4], Nqthm [1], Ehdm [2], Ontic [9], PVS <ref> [13] </ref>, the Stanford Pascal Verifier [8], and SDVS [3]. In the mid-to-late seventies, Downey, Sethi, and Tarjan [6], Kozen [7], Nelson and Oppen [11], and Shostak [14] gave efficient algorithms for deciding such formulas by computing the congruence closure relation on the graph representing the terms in the formula.
Reference: 14. <author> Robert E. Shostak. </author> <title> An algorithm for reasoning about equality. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 583-585, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: In the mid-to-late seventies, Downey, Sethi, and Tarjan [6], Kozen [7], Nelson and Oppen [11], and Shostak <ref> [14] </ref> gave efficient algorithms for deciding such formulas by computing the congruence closure relation on the graph representing the terms in the formula.
Reference: 15. <author> Robert E. Shostak. </author> <title> Deciding combinations of theories. </title> <journal> Journal of the ACM, </journal> <volume> 31(1) </volume> <pages> 1-12, </pages> <month> January </month> <year> 1984. </year>
Reference-contexts: The Nelson-Oppen procedure is used in Eves [4], the Stanford Pascal Verifier [8], and SDVS [3]. Shostak <ref> [15] </ref> used a different approach that merges the simplifiers for individual theories into a single procedure based on congruence closure. Shostak's decision procedure is at the core of systems such as PVS and Ehdm [12, 2]. <p> In practice, Shostak's procedure is more efficient than that of Nelson and Oppen (see Crocker [5]). Despite its significance, a rigorous analysis of Shostak's procedure has been lacking. Further, all published accounts of Shostak's method are flawed: the most often-cited paper <ref> [15] </ref> contains two important flaws in the description of the algorithm, while other sources, such as technical reports, contain the same as well as other flaws. <p> The main efficiency drawback to Nelson-Oppen's approach is that each theory has much of the same notion of equality resulting in duplicated effort. Shostak <ref> [15] </ref> takes a different approach by restricting his attention to can--onizable and algebraically solvable theories. A theory is canonizable if there is a canonizer such that for any pure equality a = b, it is the case that ` a = b if and only if (a) = (b). <p> Shostak shows how real and integer linear arithmetic, the convex theory of lists, and monadic set theory are some examples of canonizable and algebraically solvable theories. Shostak <ref> [15] </ref> also shows how the canonizers and solvers for several pairwise disjoint theories can be combined into a single canonizer and solver for the combined theory. <p> In the presence of uninterpreted 3 Much of the theory and notation in this section comes from <ref> [15] </ref> function symbols, each arithmetic term obtained by replacing uninterpreted sub--terms (i.e., subterms where the topmost function symbol is uninterpreted) by variables, must be in canonical form. To construct a decision procedure for equality in a -theory Shostak requires that a -theory have the additional property of algebraic solvability. <p> The set of equations will have a model iff solve never returns false for a processed equation. Thus whenever an equation is equivalent to false solve must report the contradiction. We now give pseudocode for Shostak's procedure for combining decision procedures <ref> [15] </ref> with the flaws corrected. The main differences with the procedure in Section 3 are that: 1. In Sh, Process1 is used to apply Merge to a list of pairs of terms returned by solve. 2. In Process1 , equalities are solved using solve before Merge is invoked. <p> Discrepancies in Shostak's Original Procedure. There are two actual bugs in the pseudocode presented in the paper <ref> [15] </ref>. The most egregious is in the procedure Merge. The condition f ind (u) 6= u should actually be f ind (u) = u. Shostak's earlier technical report [16] does not contain this bug but has other discrepancies. <p> Shostak's earlier technical report [16] does not contain this bug but has other discrepancies. The second bug is that the output to solve needs to be canonized just in case solve creates new variables and new terms that need to be introduced into the use data structure. Shostak <ref> [15] </ref> states that the use data structure is maintained so that the sig's are unique. This is incorrect and such an "optimization" can result in an incompleteness. The solver for cons, car , and cdr given by Shostak is also buggy. Performance Comparisons.
Reference: 16. <author> Robert E. Shostak. </author> <title> Deciding combinations of theories. </title> <type> Technical Report 132, </type> <address> SRI-CSL, Menlo Park, CA, </address> <month> January </month> <year> 1984. </year>
Reference-contexts: Discrepancies in Shostak's Original Procedure. There are two actual bugs in the pseudocode presented in the paper [15]. The most egregious is in the procedure Merge. The condition f ind (u) 6= u should actually be f ind (u) = u. Shostak's earlier technical report <ref> [16] </ref> does not contain this bug but has other discrepancies. The second bug is that the output to solve needs to be canonized just in case solve creates new variables and new terms that need to be introduced into the use data structure.
References-found: 16

