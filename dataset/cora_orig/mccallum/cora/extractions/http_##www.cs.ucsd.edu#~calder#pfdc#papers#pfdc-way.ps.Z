URL: http://www.cs.ucsd.edu/~calder/pfdc/papers/pfdc-way.ps.Z
Refering-URL: http://www.cs.ucsd.edu/~calder/pfdc/program.html
Root-URL: http://www.cs.ucsd.edu
Email: fway,pollockg@cis.udel.edu  
Phone: (302) 831-1953 (302) 831-8458 (Fax)  
Title: Way Pollock 1 Using Path Spectra to Direct Function Cloning  
Author: Tom Way Lori Pollock 
Keyword: function cloning, path spectra, profile-guided optimization  
Address: 19716  
Affiliation: Department of Computer and Information Sciences University of Delaware, Newark, DE  
Abstract: While function cloning can improve the precision of in-terprocedural analysis and thus the opportunity for optimization by changing the structure of the call graph, its successful application relies on the cloning decisions. This paper explores the use of program spectra comparisons for guiding cloning decisions. Our hypothesis is that this approach provides a good heuristic for determining which calls contribute different dynamic interprocedural information and thus suggest good candidates for cloning for the purpose of improving optimization. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Ammons and J. R. Larus. </author> <title> Improving data-flow analysis with path profiles. </title> <booktitle> In ACM SIGPLAN Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 7284, </pages> <month> June </month> <year> 1998. </year>
Reference-contexts: For a particular program run, the path spectrum is the set of paths executed along with their execution frequencies [14]. As an indication of program behavior, path spectra have been used successfully for program optimization <ref> [1, 8, 9, 10] </ref> as well as software maintenance and testing [14]. Our approach to making cloning decisions is based on comparing the program spectra for the execution of the same function by different calls to that function. <p> In dynamic compilation environments, cloning is sometimes performed on the fly as a statement is executed the first time [13]. To our knowledge, none of these techniques has used path spectra comparison in their cloning decisions. Path profiling has been used successfully in compiler optimization <ref> [1, 9, 10] </ref>. Other basic types of control flow profiling are edge profiling, which measures the execution frequency of each individual flow graph edge, and basic block profiling, which measures how many times each basic block is executed.
Reference: [2] <author> T. Ball and J. R. Larus. </author> <title> Efficient path profiling. </title> <booktitle> In IEEE/ACM International Symposium on Microar-chitecture (MICRO), </booktitle> <address> Paris, France, </address> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: This paper explores the use of path spectra to guide cloning decisions. By instrumenting the program, a profiler can report the frequency of execution of individual paths executed during a program run <ref> [2] </ref> 1 . For a particular program run, the path spectrum is the set of paths executed along with their execution frequencies [14]. As an indication of program behavior, path spectra have been used successfully for program optimization [1, 8, 9, 10] as well as software maintenance and testing [14]. <p> Path profiles can be collected efficiently and provide more accurate information than edge profiling <ref> [2] </ref>. In particular, different path profiles can result in the same edge profile, making it impossible to accurately compute the execution frequency of paths based on edge profile information.
Reference: [3] <author> T. Ball, P. Mataga, and M. Sagiv. </author> <title> Edge profiling versus path profiling: The showdown. </title> <booktitle> In ACM SIGPLAN Symposium on the Principles of Programming Languages, </booktitle> <pages> pages 134148, </pages> <year> 1998. </year>
Reference-contexts: Edge profiles are good predictors of frequently executed paths (hot paths) for programs with a large amount of definite flow relative to total flow, while path profiles are better when there is less definite flow <ref> [3] </ref>. Path profiles can be collected efficiently and provide more accurate information than edge profiling [2]. In particular, different path profiles can result in the same edge profile, making it impossible to accurately compute the execution frequency of paths based on edge profile information.
Reference: [4] <author> B. Calder, P. Feller, and A. Eustace. </author> <title> Value profiling. </title> <booktitle> In Micro-30, </booktitle> <month> December </month> <year> 1997. </year>
Reference-contexts: Edge or basic block profiling could be used, but comparisons of spectra created from path profiles generally will give better predictions of differences in run-time behavior. When variables cannot be conservatively identified as constants at compile time, value profiling <ref> [4] </ref> can be used to determine whether they exhibit a high degree of invariant behavior at run-time. Value profiling records information about the invariance of a variable, typically the top N values for an instruction and the number of occurrences for each of those values.
Reference: [5] <author> C. Chambers and D. Ungar. </author> <title> Customization: Optimizing compiler technology for Self, a dynamically-typed object-oriented programming language. </title> <booktitle> In ACM SIGPLAN Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 146160, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: This goal-directed technique helps to reduce the number of expensive dy namic dispatches, providing significant improvements in performance and reduced code growth over customization <ref> [5] </ref>, the previous state-of-the-art specialization technique. In dynamic compilation environments, cloning is sometimes performed on the fly as a statement is executed the first time [13]. To our knowledge, none of these techniques has used path spectra comparison in their cloning decisions.
Reference: [6] <author> K. D. Cooper, M. W. Hall, and K. Kennedy. </author> <title> A methodology for procedure cloning. </title> <booktitle> Computer Languages, </booktitle> <pages> pages 105117, </pages> <year> 1993. </year>
Reference-contexts: We describe our path spectra comparison technique which is used to partition call sites for cloning. Finally, this method is compared to goal-directed cloning decisions on an example code, and we make some concluding remarks and summarize our future work. 2 Related Work Goal-directed cloning <ref> [6, 11] </ref> first solves a forward in-terprocedural data flow problem with slight modification in order to compute a set of cloning vectors for the particular data flow problem of interest at each call graph node. <p> Cloning vectors which produce equivalent effects on the optimization of interest are merged, and finally the cloning is performed until the program size reaches some threshold. Cooper et al. <ref> [6] </ref> presented an experiment on the matrix300 code from release one of the SPEC benchmark suite, in which they showed that significant improvement in code quality could be attained by using this method to expose sufficient information to perform inlining and unroll and jam. <p> It is also discovered that each call site passes a different one of these two values, causing a different path from the branch to be executed. By basing cloning decisions on a goal-directed approach with constant propagation <ref> [6] </ref>, two clones of P are produced. One clone is produced for each call site, since an important constant can be discovered and propagated. <p> This step is bounded by O (E 2 *A 2 ) where E = the number of call sites in the program and A = the length of the longest acyclic path in a function. In goal-directed cloning <ref> [6] </ref>, the most expensive step is the forward data flow analysis step to create cloning vectors.
Reference: [7] <author> J. Dean, C. Chambers, and D. Grove. </author> <title> Selective specialization for object-oriented languages. </title> <booktitle> In ACM SIGPLAN Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 93 102, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: A general framework for selective specialization, the equivalent of cloning for object-oriented languages, combines static analysis and profile data to identify the most profitable specializations <ref> [7] </ref>. This goal-directed technique helps to reduce the number of expensive dy namic dispatches, providing significant improvements in performance and reduced code growth over customization [5], the previous state-of-the-art specialization technique.
Reference: [8] <author> J. A. Fisher. </author> <title> Trace scheduling: A technique for global microcode compaction. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 30(7):478490, </volume> <year> 1981. </year>
Reference-contexts: For a particular program run, the path spectrum is the set of paths executed along with their execution frequencies [14]. As an indication of program behavior, path spectra have been used successfully for program optimization <ref> [1, 8, 9, 10] </ref> as well as software maintenance and testing [14]. Our approach to making cloning decisions is based on comparing the program spectra for the execution of the same function by different calls to that function.
Reference: [9] <author> R. Gupta, D. A. Berson, and J. Z. Fang. </author> <title> Path profile guided partial dead code elimination using predication. </title> <booktitle> In International Conference on Parallel Architectures and Compilation Techniques (PACT), </booktitle> <pages> pages 102115, </pages> <address> San Francisco, Califor-nia, </address> <month> Nov. </month> <year> 1997. </year>
Reference-contexts: For a particular program run, the path spectrum is the set of paths executed along with their execution frequencies [14]. As an indication of program behavior, path spectra have been used successfully for program optimization <ref> [1, 8, 9, 10] </ref> as well as software maintenance and testing [14]. Our approach to making cloning decisions is based on comparing the program spectra for the execution of the same function by different calls to that function. <p> In dynamic compilation environments, cloning is sometimes performed on the fly as a statement is executed the first time [13]. To our knowledge, none of these techniques has used path spectra comparison in their cloning decisions. Path profiling has been used successfully in compiler optimization <ref> [1, 9, 10] </ref>. Other basic types of control flow profiling are edge profiling, which measures the execution frequency of each individual flow graph edge, and basic block profiling, which measures how many times each basic block is executed.
Reference: [10] <author> R. Gupta, D. A. Berson, and J. Z. Fang. </author> <title> Path profile guided partial redudancy elimination using speculation. </title> <booktitle> In IEEE International Conference on Computer Languages, </booktitle> <pages> pages 230239, </pages> <month> May </month> <year> 1998. </year>
Reference-contexts: For a particular program run, the path spectrum is the set of paths executed along with their execution frequencies [14]. As an indication of program behavior, path spectra have been used successfully for program optimization <ref> [1, 8, 9, 10] </ref> as well as software maintenance and testing [14]. Our approach to making cloning decisions is based on comparing the program spectra for the execution of the same function by different calls to that function. <p> In dynamic compilation environments, cloning is sometimes performed on the fly as a statement is executed the first time [13]. To our knowledge, none of these techniques has used path spectra comparison in their cloning decisions. Path profiling has been used successfully in compiler optimization <ref> [1, 9, 10] </ref>. Other basic types of control flow profiling are edge profiling, which measures the execution frequency of each individual flow graph edge, and basic block profiling, which measures how many times each basic block is executed. <p> We profile only acyclic paths in order to limit the length and number of paths profiled. Acyclic paths can be created by ignoring nodes and edges within loop bodies <ref> [10] </ref>, by restructuring the control flow graph to replace each backedge by an entry-to-loop header edge and a backedge source-to-function exit edge [14], or by only recording the first visit to each node during a path profile. 4 Way & Pollock 2.
Reference: [11] <author> M. W. Hall. </author> <title> Managing Interprocedural Optimization. </title> <type> Ph.d. thesis, </type> <institution> Rice University, </institution> <month> Apr. </month> <year> 1991. </year>
Reference-contexts: that are profiled must be limited, as there can be an unbounded number of paths for general flow graphs and an exponential number for directed acyclic graphs (i.e., flow graphs without loop backedges included). 2 Way & Pollock Our preliminary experiments have focused on comparing this approach to goal-directed cloning <ref> [11] </ref> which is based on static interprocedural data flow analysis, directed toward particular optimizations. <p> We describe our path spectra comparison technique which is used to partition call sites for cloning. Finally, this method is compared to goal-directed cloning decisions on an example code, and we make some concluding remarks and summarize our future work. 2 Related Work Goal-directed cloning <ref> [6, 11] </ref> first solves a forward in-terprocedural data flow problem with slight modification in order to compute a set of cloning vectors for the particular data flow problem of interest at each call graph node. <p> In this study, we were interested in comparing our technique to goal-directed cloning, and thus focused on linpackd as a current benchmark that was closest to the matrix300 benchmark used in evaluating goal-directed cloning <ref> [11] </ref>.
Reference: [12] <author> M. J. Harrold, G. Rothermel, R. Wu, and L. Yi. </author> <title> An empirical investigation of program spectra. </title> <booktitle> In ACM SIGPLAN/SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, </booktitle> <pages> pages 8390, </pages> <month> June </month> <year> 1998. </year>
Reference-contexts: For each site s where f is called, merge the path profiles for each call made from s into a path spectrum, including frequency information per path through f from this call site s. This gives a path count spectrum <ref> [12] </ref> per call site s. 3. Perform path spectra comparison among the path spectra of the different call sites where f is called. Various comparison algorithms could be used for this step. <p> The techniques for comparing path spectra for purposes of software maintenance and testing <ref> [12, 14] </ref> focus on locating the potential causes of dynamic behavioral changes in program execution due to changes in program input.
Reference: [13] <author> R. L. Johnston. </author> <title> The dynamic incremental compiler of APL/3000. </title> <booktitle> In APL'79 Conference, </booktitle> <pages> pages 8287, </pages> <year> 1979. </year>
Reference-contexts: This goal-directed technique helps to reduce the number of expensive dy namic dispatches, providing significant improvements in performance and reduced code growth over customization [5], the previous state-of-the-art specialization technique. In dynamic compilation environments, cloning is sometimes performed on the fly as a statement is executed the first time <ref> [13] </ref>. To our knowledge, none of these techniques has used path spectra comparison in their cloning decisions. Path profiling has been used successfully in compiler optimization [1, 9, 10].
Reference: [14] <author> T. Reps, T. Ball, M. Das, and J. Larus. </author> <title> The use of program profiling for software maintenance with applications to the year 2000 problem. </title> <booktitle> In ESEC/FSE 97. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: By instrumenting the program, a profiler can report the frequency of execution of individual paths executed during a program run [2] 1 . For a particular program run, the path spectrum is the set of paths executed along with their execution frequencies <ref> [14] </ref>. As an indication of program behavior, path spectra have been used successfully for program optimization [1, 8, 9, 10] as well as software maintenance and testing [14]. <p> For a particular program run, the path spectrum is the set of paths executed along with their execution frequencies <ref> [14] </ref>. As an indication of program behavior, path spectra have been used successfully for program optimization [1, 8, 9, 10] as well as software maintenance and testing [14]. Our approach to making cloning decisions is based on comparing the program spectra for the execution of the same function by different calls to that function. <p> Acyclic paths can be created by ignoring nodes and edges within loop bodies [10], by restructuring the control flow graph to replace each backedge by an entry-to-loop header edge and a backedge source-to-function exit edge <ref> [14] </ref>, or by only recording the first visit to each node during a path profile. 4 Way & Pollock 2. <p> The techniques for comparing path spectra for purposes of software maintenance and testing <ref> [12, 14] </ref> focus on locating the potential causes of dynamic behavioral changes in program execution due to changes in program input. <p> The techniques for comparing path spectra for purposes of software maintenance and testing [12, 14] focus on locating the potential causes of dynamic behavioral changes in program execution due to changes in program input. In <ref> [14] </ref>, they identify paths that occur in the spectrum of one run, but not the other run, and use the shortest prefix of these paths that does not occur in paths of the other run as starting points for locating potential behavioral changes.
Reference: [15] <author> S. Wu and U. Manber. </author> <title> AGREP a fast approximate pattern-matching tool. </title> <booktitle> In Proceedings of the Winter 1992 USENIX Conference, </booktitle> <pages> pages 152 162, </pages> <address> Berkeley, California, </address> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: This expresses the distance as closer to 1.0 for similar frequencies, and closer to 0.0 for less similar frequencies. Comparison of path profiles is accomplished using an adaptation of an edit-distance or Levenshtein measure algorithm. This algorithm is widely used for approximate string matching <ref> [15, 16] </ref>, and other approximate pattern matching tasks. Our method includes a frequency-distance measure as a second point of comparison. Experimentation is needed to determine the quality of this comparison technique for our purposes, and to discover appropriate threshold values for quantifying similarity of edit-distance and frequency-distance.
Reference: [16] <author> S. Wu and U. Manber. </author> <title> Fast text searching allowing errors. </title> <journal> Communications of the ACM, </journal> <volume> 35(10):8391, </volume> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: This expresses the distance as closer to 1.0 for similar frequencies, and closer to 0.0 for less similar frequencies. Comparison of path profiles is accomplished using an adaptation of an edit-distance or Levenshtein measure algorithm. This algorithm is widely used for approximate string matching <ref> [15, 16] </ref>, and other approximate pattern matching tasks. Our method includes a frequency-distance measure as a second point of comparison. Experimentation is needed to determine the quality of this comparison technique for our purposes, and to discover appropriate threshold values for quantifying similarity of edit-distance and frequency-distance.
References-found: 16

