URL: http://www.research.microsoft.com/~gurevich/Opera/76.ps
Refering-URL: http://www.research.microsoft.com/~gurevich/annotated.html
Root-URL: http://www.research.microsoft.com
Title: Average Case Completeness  
Author: Yuri Gurevich 
Date: 1989  
Address: Ann Arbor, MI 48109-2122  
Affiliation: Electrical Engineering and Computer Science Department The University of Michigan,  
Abstract: We explain and advance Levin's theory of average case completeness. In particular, we exhibit examples of problems complete in the average case and prove a limitation on the power of deterministic reductions. 
Abstract-found: 1
Intro-found: 1
Reference: [BCGL] <author> Shai Ben-David, Benny Chor, Oded Goldreich and Michael Luby, </author> <title> On the Theory of Average Case Complexity, </title> <booktitle> Proc. 21st Annual ACM Symposium on Theory of Computing, ACM, </booktitle> <year> 1989, </year> <pages> 204-216. 47 </pages>
Reference-contexts: Ramarathnam Venkatesan and his advisor Leonid Levin found [VL] a natural randomized graph-coloring problem, which is flat and complete with respect to coin-flipping polynomial-time reductions; such reductions are considered in Section 9. Rich additional information on the theory of average case complexity can be found in <ref> [BCGL] </ref>; see also [Gu2]. An important question is whether the current state of RNP theory is sufficient to identify problems that are difficult on average. <p> Remark at the time of proof-reading. In the meantime the reduction theory for average case complexity was substantially advanced and cleaned up somewhat; see <ref> [BCGL, IL] </ref> and also [Gu2, BG]. 1. Polynomiality on average; Classes AP and RNP The main purpose of this section is to define the analogs for P and NP in the case of randomized decision problems. Some definitions will be revised later in Section 9. <p> That maximal probability function is not Ptime computable and is not dominated by any Ptime computable probability function. An important generalization of Ptime computable probability distributions was introduced recently in <ref> [BCGL] </ref>; they are so called samplable distributions. See the discussion in [Gu2] in this connection. Lemma 1.6. <p> The following theorem of Ben-David and Michael Luby [BL] shows that the question DEXPtime =? NEXPtime is related to the question whether AP includes RNP. See <ref> [BCGL] </ref> in this connection. Theorem 8.2. If AP includes RNP then DEXPtime = NEXPtime. Proof. Let E be the decision problem for some NEXPtime language L (E). Let x range over instances of E and n be the number of x in the lexicographical order of instances of E.
Reference: [Bl] <author> Andreas Blass, </author> <title> Private communication. </title>
Reference-contexts: Thus, computing the first digit of h (after the binary point) would separate the inseparable sets. By Lemma 1.3, a probability function is Ptime computable if the corresponding probability distribution fl is Ptime computable. The converse is not necessarily true: Lemma 1.4. <ref> [Bl] </ref> There exists a Ptime computable probability function such that the probability distribution fl is not Ptime computable unless P = NP. Proof. <p> For example, the restriction of Randomized Tiling to inputs hT; 1 n ; k; i such that is of length n 1=r for some fixed r is flat. The following theorem of Ben-David and Michael Luby <ref> [BL] </ref> shows that the question DEXPtime =? NEXPtime is related to the question whether AP includes RNP. See [BCGL] in this connection. Theorem 8.2. If AP includes RNP then DEXPtime = NEXPtime. Proof. Let E be the decision problem for some NEXPtime language L (E).
Reference: [BG] <author> Andreas Blass and Yuri Gurevich, </author> <title> "On the reduction theory for average case completeness", </title> <booktitle> 4th Workshop on Computer Science Logic, </booktitle> <editor> Ed. E. Borger et. </editor> <address> al., </address> <note> Springer Lecture Notes in Computer Science, to appear. </note>
Reference-contexts: Remark at the time of proof-reading. In the meantime the reduction theory for average case complexity was substantially advanced and cleaned up somewhat; see [BCGL, IL] and also <ref> [Gu2, BG] </ref>. 1. Polynomiality on average; Classes AP and RNP The main purpose of this section is to define the analogs for P and NP in the case of randomized decision problems. Some definitions will be revised later in Section 9. We start with terminology and notation.
Reference: [BFF] <author> B. Bollobas, T. I. Fenner, and A. M. Frieze, </author> <title> An Algorithm for Finding Hamilton Cycles in a Random Graph, </title> <booktitle> Proc. 17th Annual ACM Symposium on Theory of Computing, ACM, </booktitle> <year> 1985, </year> <pages> 430-439. </pages>
Reference-contexts: Powerful algorithms of that kind were devised for Hamiltonian Circuit Problem; see <ref> [BFF] </ref> and references there. Another approach is to seek algorithms whose expected running time is polynomial. An algorithm of that kind for Hamiltonian Circuit Problem with a fixed edge probability has been devised in [GS]. <p> There is a decision algorithm for Randomized Hamiltonian Circuits with expected run time O (n) for each fixed edge probability p [GS]. The fact that Randomized Hamiltonian Circuits with edge probability 1/2 is AP is proved in <ref> [BFF] </ref>. Randomized Tiling Problem over an alphabet . Some definitions are needed. A tile is a quadruple v x of -strings.
Reference: [BL] <author> Shai Ben-David and Michael Luby, </author> <title> Private communication. </title>
Reference-contexts: Thus, computing the first digit of h (after the binary point) would separate the inseparable sets. By Lemma 1.3, a probability function is Ptime computable if the corresponding probability distribution fl is Ptime computable. The converse is not necessarily true: Lemma 1.4. <ref> [Bl] </ref> There exists a Ptime computable probability function such that the probability distribution fl is not Ptime computable unless P = NP. Proof. <p> For example, the restriction of Randomized Tiling to inputs hT; 1 n ; k; i such that is of length n 1=r for some fixed r is flat. The following theorem of Ben-David and Michael Luby <ref> [BL] </ref> shows that the question DEXPtime =? NEXPtime is related to the question whether AP includes RNP. See [BCGL] in this connection. Theorem 8.2. If AP includes RNP then DEXPtime = NEXPtime. Proof. Let E be the decision problem for some NEXPtime language L (E).
Reference: [CHS] <author> Robert L. Constable, Harry B. Hunt, III, and Sartaj K. Sahni, </author> <title> On the Computational Complexity of Scheme Equivalences, </title> <type> Report No. </type> <pages> 74-201, </pages> <year> 1974, </year> <institution> Dept. of Computer Science, Cornell University, </institution> <address> Ithaca, NY. </address>
Reference-contexts: According to Garey and Johnson [G], a bounded version of PCP has been proved NP complete by Constable, Hunt and Sahni <ref> [CHS] </ref>. For brevity, we omit the adjective "bounded" in the following definition.
Reference: [GJ] <author> Michael R. Garey and David S. Johnson, </author> <title> Computers and Intractability, </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: The incompleteness theorem seems to hint that Ptime and even APtime reductions are not sufficiently strong. It is natural at this point to raise the question of polynomial-time (or average polynomial-time) Turing reductions <ref> [GJ] </ref>. However, the incompleteness theorem survives the transition from many-one to Turing reductions; we omit the proof. Levin found a way to deal with the phenomenon of flatness [Le2]. He proposed the use of randomizing (coin-flipping) Ptime reductions (RPtime reductions).
Reference: [Gu1] <author> Yuri Gurevich, </author> <title> Complete and Incomplete Randomized NP Problems, </title> <booktitle> Proc. 28th Annual Symp. on Found. of Computer Science, IEEE, </booktitle> <year> 1987, </year> <pages> 111-117. </pages>
Reference: [Gu2] <author> Yuri Gurevich, </author> <title> The Challenger-Solver game: Variations on the Theme of P=?NP, </title> <journal> Bulletin of European Association for Theoretical Computer Science, </journal> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: Ramarathnam Venkatesan and his advisor Leonid Levin found [VL] a natural randomized graph-coloring problem, which is flat and complete with respect to coin-flipping polynomial-time reductions; such reductions are considered in Section 9. Rich additional information on the theory of average case complexity can be found in [BCGL]; see also <ref> [Gu2] </ref>. An important question is whether the current state of RNP theory is sufficient to identify problems that are difficult on average. <p> Remark at the time of proof-reading. In the meantime the reduction theory for average case complexity was substantially advanced and cleaned up somewhat; see [BCGL, IL] and also <ref> [Gu2, BG] </ref>. 1. Polynomiality on average; Classes AP and RNP The main purpose of this section is to define the analogs for P and NP in the case of randomized decision problems. Some definitions will be revised later in Section 9. We start with terminology and notation. <p> gives rise to the following relaxation of condition (i): 5 (ii) There exists " &gt; 0 such that P or (ii 0 ) There exists " &gt; 0 such that P (For simplicity, we ignore the empty string.) Additional arguments in favor of (ii) vs. (i) may be found in <ref> [Gu2] </ref>. Condition (ii) may be too restrictive as well. Consider, for example, a function f such that f (x) = 2 jxj if jxj is even, and f (x) = jxj otherwise. Suppose that, for each even n, the [H n 2 2jxj . <p> Then a fast-growing function f (x) = jxj jxj satisfies (v). Also, Proposition 1.1 fails if polynomiality on average is defined with respect to (v). This ends our discussion on the correct definition of polynomiality on average. A continuation of this discussion may be found in <ref> [Gu2] </ref>. Next we give a useful criterion of polynomiality on average [VL]. Definition. A function from some fl to nonnegative reals is a rarity function for a probability function on fl if the expectation of is finite. Proposition 1.2. <p> That maximal probability function is not Ptime computable and is not dominated by any Ptime computable probability function. An important generalization of Ptime computable probability distributions was introduced recently in [BCGL]; they are so called samplable distributions. See the discussion in <ref> [Gu2] </ref> in this connection. Lemma 1.6. For every probability function with a Ptime computable probability distribution fl there is a positive probability function 1 such that fl 1 is Ptime computable and every value of 1 is a finite binary fraction and (x) = O ( 1 (x)). Proof.
Reference: [GM] <author> Yuri Gurevich and David McCauley, </author> <title> Average Case Complete Problems, </title> <type> Unpublished Manuscript, </type> <month> April </month> <year> 1987. </year>
Reference-contexts: Finally, use Lemma 10.1 to check that 1 dominates 0 with respect to F . QED Some NEXPtime complete problems can be found in [KV] and [Lew]. 39 Appendix. Perfect Rounding and Randomized Tiling This is a recast of report <ref> [GM] </ref> with a reconstruction of Levin's completeness proof [Le1] for Randomized Tiling. When an undergrad David McCauley asked me for a challenge, he was invited to share the hard work of deciphering the exceedingly terse paper of Levin.
Reference: [GS] <author> Y. Gurevich and S. Shelah, </author> <title> Expected Computation Time for Hamiltonian Path Problem, </title> <note> SIAM J. on Computing 16:3 (1987) 486-502. </note>
Reference-contexts: Powerful algorithms of that kind were devised for Hamiltonian Circuit Problem; see [BFF] and references there. Another approach is to seek algorithms whose expected running time is polynomial. An algorithm of that kind for Hamiltonian Circuit Problem with a fixed edge probability has been devised in <ref> [GS] </ref>. Leonid Levin suggested [Le1] a natural liberalization of the second approach where an algorithm is considered fast if the expectation of some fixed root of the running time is polynomial. Algorithms that almost always run in Ptime (i.e. fl J. <p> There is a decision algorithm for Randomized Hamiltonian Circuits with expected run time O (n) for each fixed edge probability p <ref> [GS] </ref>. The fact that Randomized Hamiltonian Circuits with edge probability 1/2 is AP is proved in [BFF]. Randomized Tiling Problem over an alphabet . Some definitions are needed. A tile is a quadruple v x of -strings.
Reference: [HU] <author> John E. Hopcroft and Jeffrey D. Ullman, </author> <title> Introduction to automata theory, languages and computation, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1979. </year>
Reference-contexts: QED 21 5. Randomized Post Correspondence Problem In this section, a randomized version of the bounded Post Correspondence Problem (PCP) is defined and proved Ptime complete for RNP. PCP is a well-known undecidable decision problem <ref> [HU] </ref>; it can be stated as follows. Post Correspondence Problem: Instance A nonempty list L = h (u 1 ; v 1 ); : : : ; (u s ; v s )i of pairs of strings. <p> Let RRPCP be the restriction of RPCP to robust instances. Theorem 5.1. RRPCP is Ptime hard for RNP. Proof. The proof is an adaptation of the standard undecidability proof for PCP <ref> [HU] </ref>; the difficulty is that the desired reduction should have the domination property. Suppose that M is an arbitrary Ptime guarded NTM and g is a longevity guard for M . By Theorem 4.1, it suffices to reduce RH (M; g) to RRPCP. <p> Theorem 5.1 remains true and the particular reduction, described in the proof of Theorem 5.1, is fine. Lemma 5.7 should be strengthened by asserting that longer derivation correspond to longer computations. Remark 5.2. In the classical reduction of the halting problem to PCP <ref> [HU] </ref>, an input w of the given Turing machine appears in a coded form in the corresponding instance of PCP. We have to use an essentially uncoded form of w in order to take care about probabilities. Rules L2 are used to rewrite w in a coded form.
Reference: [IL] <author> Russel Impagliazzo and Leonid Levin, </author> <title> "No better ways to generate hard instances than picking at random", </title> <booktitle> FOCS 1990, </booktitle> <pages> 812-821. </pages>
Reference-contexts: Remark at the time of proof-reading. In the meantime the reduction theory for average case complexity was substantially advanced and cleaned up somewhat; see <ref> [BCGL, IL] </ref> and also [Gu2, BG]. 1. Polynomiality on average; Classes AP and RNP The main purpose of this section is to define the analogs for P and NP in the case of randomized decision problems. Some definitions will be revised later in Section 9.
Reference: [Jo] <author> David S. Johnson, </author> <title> "The NP-Completeness Column", </title> <booktitle> Journal of Algorithms 5 (1984), </booktitle> <pages> 284-299. </pages>
Reference-contexts: One contribution of this paper is a direct and simple proof of the Ptime completeness of Randomized Halting (Section 4). David Johnson <ref> [Jo] </ref> provided some intuition behind Levin's definitions and proofs; he challenged readers to find additional complete RNP problems. The first additional Ptime complete RNP problems are presented in Sections 5 and 6 below. <p> Notice that the Ptime computability of a probability distribution requires the Ptime computability of the probabilities of only very special events fy : y &lt; xg. Levin hypothesizes <ref> [Jo] </ref> that any natural probability function either has a polynomial time computable distribution, or else is dominated by a function that does. Johnson writes that it is not difficult to devise encodings that make "each of the distributions we have discussed in this column" polynomial time computable.
Reference: [Ko] <author> Ker-I Ko, </author> <title> On the definition of some complexity classes of real numbers, Math. </title> <booktitle> Systems Theory 16 (1983), </booktitle> <pages> 95-109. </pages>
Reference-contexts: But it seems to us more appropriate to extend the notion of Ptime computability to real-valued functions. For simplicity, we restrict attention to functions with values in the real interval [0,1]. Definition. (cf. <ref> [Ko] </ref>) A function f from some fl to the interval [0; 1] of reals is computable in polynomial time if there exists a polynomial time algorithm A (x; 1 k ) such that, for every - string x and every positive integer k, A (x; 1 k ) is a binary
Reference: [KV] <author> Phokion G. Kolaitis and Moshe Y. Vardi, </author> <title> The Decision Problem for the Probabilities of Higher-Order Properties, </title> <note> STOC 1987. </note>
Reference-contexts: Finally, use Lemma 10.1 to check that 1 dominates 0 with respect to F . QED Some NEXPtime complete problems can be found in <ref> [KV] </ref> and [Lew]. 39 Appendix. Perfect Rounding and Randomized Tiling This is a recast of report [GM] with a reconstruction of Levin's completeness proof [Le1] for Randomized Tiling.
Reference: [Le1] <author> Leonid Levin, </author> <title> Average Case Complete Problems, </title> <journal> SIAM Journal of Computing 15 1986, </journal> <pages> 285-286. </pages>
Reference-contexts: Another approach is to seek algorithms whose expected running time is polynomial. An algorithm of that kind for Hamiltonian Circuit Problem with a fixed edge probability has been devised in [GS]. Leonid Levin suggested <ref> [Le1] </ref> a natural liberalization of the second approach where an algorithm is considered fast if the expectation of some fixed root of the running time is polynomial. Algorithms that almost always run in Ptime (i.e. fl J. <p> The role of NP is played by a class RNP of randomized decision problems (D; ) such that D is NP and the probability function satisfies a certain technical condition (see Section 1) that is usually satisfied in practice. In his exceedingly terse paper <ref> [Le1] </ref>, Levin generalized polynomial time reductions to fit RNP problems and found a natural RNP complete problem, Randomized Tiling. To work correctly, a reduction should not diminish too much the probability of a given instance. As a result, reducing RNP problems is much more difficult than reducing NP problems. <p> The choice of a default probability function on positive integers is not so obvious. We follow Levin <ref> [Le1] </ref> : Definition. The standard probability of a positive integer n is proportional to n 2 . Discussion. If the desired standard probability function (n) decreases too quickly then too much weight is given to small instances. <p> 2 k n to any strings of length n. (It corresponds to the following experiment: choose randomly a natural number n, and then choose randomly a string of length n.) An alternative natural approach is to identify strings with natural numbers and use the standard probability function for natural numbers <ref> [Le1] </ref>. One should be a little careful though. Suppose, for example, that the alphabet in question is binary and assign to a binary string w the probability proportional to the inverse of the square of the number of w in the lexicographical order of binary strings. <p> If (i) has been chosen, i &lt; k 1 and the set T i = ft : t 2 T and left [t] = right [(i)]g is not empty, then choose (i + 1) randomly from T i . Randomized Tiling is complete for RNP in an appropriate sense <ref> [Le1] </ref>; a reconstruction of Levin's proof can be found in the Appendix. 3. Ptime reducibility If P = NP then AP includes RNP. Hence it is hard to demonstrate an RNP problem which is not AP. <p> Finally, use Lemma 10.1 to check that 1 dominates 0 with respect to F . QED Some NEXPtime complete problems can be found in [KV] and [Lew]. 39 Appendix. Perfect Rounding and Randomized Tiling This is a recast of report [GM] with a reconstruction of Levin's completeness proof <ref> [Le1] </ref> for Randomized Tiling. When an undergrad David McCauley asked me for a challenge, he was invited to share the hard work of deciphering the exceedingly terse paper of Levin.
Reference: [Le2] <author> Leonid Levin, </author> <title> Private communication. </title> <type> 48 </type>
Reference-contexts: We know that g (y) is computable in time T (y) polynomial on 2 -average. Now use (1). QED For a technical reason, we will be interested in probability distributions that are Ptime computable. It is possible, as Levin did in <ref> [Le2] </ref>, to restrict attention to probability distributions with rational values; such approach will be justified later in this section. But it seems to us more appropriate to extend the notion of Ptime computability to real-valued functions. For simplicity, we restrict attention to functions with values in the real interval [0,1]. <p> It is natural at this point to raise the question of polynomial-time (or average polynomial-time) Turing reductions [GJ]. However, the incompleteness theorem survives the transition from many-one to Turing reductions; we omit the proof. Levin found a way to deal with the phenomenon of flatness <ref> [Le2] </ref>. He proposed the use of randomizing (coin-flipping) Ptime reductions (RPtime reductions). A flat problem RPtime complete for RNP can be found in [VL].
Reference: [Lew] <author> Harry R. Lewis, </author> <title> Complexity Results for Classes of Quantificational Formulas, </title> <editor> J. </editor> <booktitle> Com--puter and System Sciences 21 (1980), </booktitle> <pages> 317-353. </pages>
Reference-contexts: A function f from some fl 1 to some fl 2 is EXPtime computable if some exponential-time Turing machine computes f . The decision problem D for some language L (D) is DEXPtime (resp. NEXPtime) if some exponential-time Turing machine (resp. nondeterministic Turing machine) decides D. Definition. <ref> [Lew] </ref> A decision problem D EXPtime reduces to a decision problem E if there exist an EXPtime computable function f and a constant c such that f reduces D to E and jf xj c jxj. <p> Finally, use Lemma 10.1 to check that 1 dominates 0 with respect to F . QED Some NEXPtime complete problems can be found in [KV] and <ref> [Lew] </ref>. 39 Appendix. Perfect Rounding and Randomized Tiling This is a recast of report [GM] with a reconstruction of Levin's completeness proof [Le1] for Randomized Tiling.
Reference: [MV] <author> Nimrod Megiddo and Uzi Vishkin, </author> <title> On Finding a Minimum Dominating Set in a Tournament, </title> <type> IBM Research Report RJ 5745, </type> <month> July, </month> <year> 1987. </year>
Reference-contexts: In this connection, NP problems with small (log-size or, alternatively, polylog-size) witnesses cry for attention. The worst-case complexity for problems with small witnesses was a subject of study recently <ref> [MV, Me] </ref>. But the case of statistically small witnesses is even more interesting. Notice, for example, that in the case of uniform probability distribution over graphs with n vertices, the expected maximal clique size is about 2 log n.
Reference: [Me] <author> Nimrod Megiddo, </author> <title> Are the Vertex Cover and the Dominating Set Problems Equally Hard? IBM Research Report RJ 5783, </title> <month> August, </month> <year> 1987. </year>
Reference-contexts: In this connection, NP problems with small (log-size or, alternatively, polylog-size) witnesses cry for attention. The worst-case complexity for problems with small witnesses was a subject of study recently <ref> [MV, Me] </ref>. But the case of statistically small witnesses is even more interesting. Notice, for example, that in the case of uniform probability distribution over graphs with n vertices, the expected maximal clique size is about 2 log n.
Reference: [PLL] <author> Phan Dinh Dieu, Le Cong Thanh and Le Tuan Hoa, </author> <title> Average Polynomial Time Complexity of some NP-Complete Problems, </title> <booktitle> Theoretical Computer Science 46 (1986), </booktitle> <pages> 219-237. </pages>
Reference-contexts: Question Is there a clique of size &gt; k in the graph? Probability Randomly choose a positive integer n, and then randomly choose a graph on [0::(n 1)]. It is an open problem whether Randomized Clique Problem is AP. See <ref> [PLL] </ref> in this connection. It is not difficult to devise a backtracking algorithm that inspects all cliques in lexicographical order and this way finds a clique of the maximal size.
Reference: [VL] <author> Ramarathnam Venkatesan and Leonid Levin, </author> <title> Random Instances of a Graph Coloring Problem are Hard, </title> <booktitle> Proc. 20th Symp. on Theory of Computing, ACM, </booktitle> <year> 1988. </year>
Reference-contexts: The proof fails because, instead of producing one instance f (x) of a high probability and a small size, a randomizing reduction produces a multitude of instances of a small probability and a large size. Ramarathnam Venkatesan and his advisor Leonid Levin found <ref> [VL] </ref> a natural randomized graph-coloring problem, which is flat and complete with respect to coin-flipping polynomial-time reductions; such reductions are considered in Section 9. Rich additional information on the theory of average case complexity can be found in [BCGL]; see also [Gu2]. <p> Also, Proposition 1.1 fails if polynomiality on average is defined with respect to (v). This ends our discussion on the correct definition of polynomiality on average. A continuation of this discussion may be found in [Gu2]. Next we give a useful criterion of polynomiality on average <ref> [VL] </ref>. Definition. A function from some fl to nonnegative reals is a rarity function for a probability function on fl if the expectation of is finite. Proposition 1.2. Let f be a function from some fl to nonnegative reals and be a probability function on fl . <p> Levin found a way to deal with the phenomenon of flatness [Le2]. He proposed the use of randomizing (coin-flipping) Ptime reductions (RPtime reductions). A flat problem RPtime complete for RNP can be found in <ref> [VL] </ref>. In this section, we give a possible formalization of a simple version of RPtime reductions and then prove RPtime completeness of a flat version of Randomized Halting Problem for RNP. For simplicity, we restrict attention to decision problems in the binary alphabet.
Reference: [Wi] <author> Herbert S. Wilf, </author> <title> Some Examples of Combinatorial Averaging, </title> <journal> American Math. </journal> <volume> Monthly 92 (1985), </volume> <pages> 250-261. </pages>
Reference-contexts: Question Is the graph 3-colorable? Probability Randomly choose a positive integer n, and then randomly choose a graph on [0::(n 1)]. Randomized 3-Coloring Problem happens to be AP. The usual backtracking solves it in about, surprise!, 197 steps on average <ref> [Wi] </ref>. The reason is that there are very simple and probable witnesses to non-colorability, like a clique of 4. The average time can be further cut down if the algorithm starts with a direct search for such witnesses. Definition.
Reference: [ZL] <author> A. K. Zvonkin and L. Levin, </author> <title> The Complexity of Finite Objects and the Algorithmic Concepts of Information and Randomness", </title> <journal> Russian Math. Surveys 25/6 (1970), </journal> <pages> 83-124. </pages>
Reference-contexts: Our experience supports Levin's hypothesis as well. However, there exist important probability functions that are not Ptime computable. In particular, information complexity (i.e., Kolmogorov complexity) gives rise to a recursively enumerable 11 (in appropriate sense) probability function (say, on binary strings) that dominates any other recursively enumerable probability function <ref> [ZL] </ref>. That maximal probability function is not Ptime computable and is not dominated by any Ptime computable probability function. An important generalization of Ptime computable probability distributions was introduced recently in [BCGL]; they are so called samplable distributions. See the discussion in [Gu2] in this connection. Lemma 1.6. <p> There is no such thing as the slowest growing probability function. The situation changes however if one restricts attention to recursively enumerable (in an appropriate sense <ref> [ZL] </ref>) probability functions and does not distinguish between probability function and such that (n) = O (-(n)) and -(n) = O ((n)). Then there is the slowed growing probability function; however it is not dominated or weakly dominated by any Ptime computable probability function. End of discussion. Definition.
References-found: 25

