URL: ftp://ftp.comlab.ox.ac.uk/pub/Documents/techpapers/Jonathan.Bowen/sess93.ps.Z
Refering-URL: http://www.comlab.ox.ac.uk/archive/safety.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: Jonathan.Bowen@comlab.ox.ac.uk  
Title: Formal Methods in Safety-Critical Standards thing about standards is that you have so many to
Author: Jonathan Bowen Andrew Tanenbaum 
Note: "The nice  
Address: 11 Keble Road, Oxford OX1 3QD, UK  
Affiliation: Oxford University Computing Laboratory  
Abstract: There is great interest in ensuring correctness of safety-critical embedded systems since on the one hand the use of software gives greatly increased functionality and flexibility and on the other hand it provides unprecedented possibilities for errors. Formal methods are one technique that could improve the situation. Their use is now being suggested by an increasing number of standards in the safety-critical area. This paper compares the recommendations given by a number of important existing and emerging standards and tries to identify future trends in this area. A bibliography of standards and related publications is included. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Standards, </author> <title> draft standards and guidelines </title>
Reference: [AECB91] <institution> Proposed Standard for Software for Computers in the Safety Systems of Nuclear Power Stations. Final Report for contract 2.117.1 for the Atomic Energy Control Board, Canada, March 1991 (By David L. Parnas, now at Communications Research Laboratory, Department of Electrical and Computer Engineering, McMaster University, Hamilton, </institution> <address> Ontario L8S 4K1, Canada. </address> <note> Based on IEC Standard 880 [IEC86].) </note>
Reference-contexts: Overviews of standards concerned with software safety from an American point of view are provided by [2, 45, 48]. The US and Europe are the major sources of software safety standards, guidelines and research in this area. In Canada, <ref> [AECB91, AECB92, OH90, OH93] </ref> (amongst others) have been produced in relation to the nuclear industry. <p> AECB, Canada The Atomic Energy Control Board (AECB) in Canada commissioned a proposed standard for software for computers in the safety systems of nuclear power stations <ref> [AECB91] </ref>. This was prepared by David Parnas who is well known in the fields of both software safety and formal methods. His report formalizes the notions of the environment (`nature'), the behavioural system requirements, and their feasibility with respect to the environment.
Reference: [AECB92] <institution> Documentation of Computerised Safety Systems of Nuclear Power Stations. AECB Project No. 2.234.1, </institution> <note> December 1992 (By David L. Parnas, </note> <institution> Communications Research Laboratory, Department of Electrical and Computer Engineering, McMaster University, Hamilton, </institution> <address> Ontario L8S 4K1, Canada. </address> <note> To be published by the Atomic Energy Control Board as an INFO report.) </note>
Reference-contexts: Overviews of standards concerned with software safety from an American point of view are provided by [2, 45, 48]. The US and Europe are the major sources of software safety standards, guidelines and research in this area. In Canada, <ref> [AECB91, AECB92, OH90, OH93] </ref> (amongst others) have been produced in relation to the nuclear industry. <p> It is based on the IEC Standard 880 [IEC86]. Since then, a new report which is much further from IEC880 and more focused on documentation has been prepared by Parnas <ref> [AECB92] </ref> and is due to appear as an AECB "INFO" report shortly. This report is not used as a standard itself by AECB, but is used in the evaluation of standards and procedures submitted by Canadian licensees.
Reference: [DoD84] <author> Military Standard: </author> <title> System Safety Program Requirements. </title> <institution> MIL-STD-882B, Department of Defense, </institution> <address> Washington DC 20301, USA, </address> <month> 30 March </month> <year> 1984 </year>
Reference: [DTI93] <institution> Product Standards: Machinery. Department of Trade and Industry, </institution> <note> 3rd floor, 151 Buckingham Palace Road, </note> <author> London SW1W 9SS, </author> <title> UK, April 1993 (Covers The Supply of Machinery (Safety) Regulations 1992 (S.I. </title> <publisher> 1992/3073). HMSO Publications Centre, </publisher> <address> PO Box 276, London SW8 5DT, UK.) </address>
Reference-contexts: For example, a new piece of European Commission legislation, the Machine Safety Directive, came into effect on 1st January 1993 <ref> [DTI93] </ref>. This encompasses software and if there is an error in the machine's logic that results in injury then a claim can be made under civil law against the supplier. <p> There is a maximum penalty of three months in jail or a large fine [30]. Suppliers have to demonstrate that they are using best working practice. This could include, for example, the use of formal methods. However the explicit mention of software in <ref> [DTI93] </ref> is very scant.
Reference: [ESA91] <institution> ESA Software Engineering Standards. European Space Agency, </institution> <address> 8-10 rue Mario-Nikis, 75738 Paris Cedex, France, </address> <note> ESA PSS-05-0 Issue 2, </note> <month> February </month> <year> 1991 </year>
Reference-contexts: The next drafts are planned to be available by the end of 1993. ESA The European Space Agency has issued guidelines for software engineering standards <ref> [ESA91] </ref>. This suggests that "Formal methods [such as Z or VDM] should be considered for the specification of safety-critical systems" in the Software Requirement Document (p. 1-27). The emphasised word "should " in dicates strongly recommended practices in the doc-ument whereas "shall " is used for mandatory practices.
Reference: [EWICS88/89] <editor> Redmill, F. (Ed.): </editor> <booktitle> Dependability of Critical Computer Systems 1 & 2. European Workshop on Industrial Computer Systems Technical Committee 7 (EWICS TC7), </booktitle> <publisher> Elsevier Applied Science, Lon-don, 1988/1989 </publisher>
Reference: [HSE87a] <institution> Programmable Electronic Systems in Safety Related Applications: </institution> <month> 1. </month> <title> An Introductory Guide. Health and Safety Executive, </title> <publisher> HMSO, Publications Centre, </publisher> <address> PO Box 276, London SW8 5DT, UK, </address> <year> 1987 </year>
Reference-contexts: UK HSE The UK Health and Safety Executive issued an introductory guide <ref> [HSE87a] </ref> and some general technical guidelines [HSE87b] concerning Programmable Electronic Systems (PES) in safety related applications in 1987. Two pages are devoted to software development (pp. 31-32) and a further two to software change procedures (pp. 32-33).
Reference: [HSE87b] <institution> Programmable Electronic Systems in Safety Related Applications: </institution> <month> 2. </month> <title> General Technical Guidelines. Health and Safety Executive, </title> <publisher> HMSO, Publications Centre, </publisher> <address> PO Box 276, London SW8 5DT, UK, </address> <year> 1987 </year>
Reference-contexts: UK HSE The UK Health and Safety Executive issued an introductory guide [HSE87a] and some general technical guidelines <ref> [HSE87b] </ref> concerning Programmable Electronic Systems (PES) in safety related applications in 1987. Two pages are devoted to software development (pp. 31-32) and a further two to software change procedures (pp. 32-33).
Reference: [IEC86] <institution> Software for Computers in the Safety Systems of Nuclear Power Stations. International Electrotechni-cal Commission, IEC 880, </institution> <year> 1986 </year>
Reference-contexts: This was prepared by David Parnas who is well known in the fields of both software safety and formal methods. His report formalizes the notions of the environment (`nature'), the behavioural system requirements, and their feasibility with respect to the environment. It is based on the IEC Standard 880 <ref> [IEC86] </ref>. Since then, a new report which is much further from IEC880 and more focused on documentation has been prepared by Parnas [AECB92] and is due to appear as an AECB "INFO" report shortly.
Reference: [IEC91] <institution> Software for Computers in the Application of Industrial Safety Related Systems. </institution> <note> International Elec-trotechnical Commission, Technical Committee no. 65, Working Group 9 (WG9), IEC 65A (Secretariat) 122, Version 1.0, </note> <month> 1 August </month> <year> 1991 </year>
Reference-contexts: The US and Europe are the major sources of software safety standards, guidelines and research in this area. In Canada, [AECB91, AECB92, OH90, OH93] (amongst others) have been produced in relation to the nuclear industry. Standards Australia is recommending adoption of the IEC Draft Document 65A <ref> [IEC91] </ref>. [29] gives a rare overview of dependability and safety issues in Japan, including details of an abortive attempt to produce their own JIS standard sponsored by MITI in this area, although guideline reports exist. <p> It goes on to state that modifications to the software should be strictly controlled. The efforts of HSE are now mainly concentrated on the IEC standards mentioned below. IEC The International Electrotechnical Commission has issued two standards in the area of safety-critical system development <ref> [IEC91, IEC92] </ref>. These documents were originally issued in 1989, but have subsequently been updated and reissued. The former deals specif ically with software for computers in the application of industrial safety related systems, while the latter is concerned with the functional safety of programmable electronic systems in general. <p> These are generic international standards designed to be applied in many different industrial sectors. An example of a particular instantiation of the IEC65-WG9 standard is the proposed RIA standard [RIA91] included below. The "formal methods" CCS, CSP, HOL, LOTOS, OBJ, Temporal Logic, VDM and Z are specifically mentioned in <ref> [IEC91] </ref> (with a brief description and bibliography for each) as possible techniques to be applied in the development of safety-critical systems in an extensive section (B.30, pp. B-14-18) under a Bibliography of Techniques. A shorter section on "formal proof" (B.30, p. B-18) is also included. <p> It is a draft proposal for an industry specific standard that has yet to be ratified. It makes extensive reference to the IEC65-WG9 standard <ref> [IEC91] </ref>. Formal methods are mentioned briefly in several places in the document. Rigorous correctness argument is mentioned as a less detailed and formal proof method to demonstrate the correctness of a program by simply outlining the main steps of the proof. <p> The trend for the future is more standards in this area, given the number that are at the discussion stage now. Many are likely to be industry specific standards, often based on more generic standards like <ref> [IEC91, IEC92] </ref>. A significant number are mentioning formal methods now, and more are likely to do so in the future.
Reference: [IEC92] <institution> Functional Safety of Programmable Electronic Systems: </institution> <note> Generic Aspects. International Electrotech-nical Commission, Technical Committee no. 65, Working Group 10 (WG10), IEC 65A (Secretariat) 123, </note> <month> February </month> <year> 1992 </year>
Reference-contexts: It goes on to state that modifications to the software should be strictly controlled. The efforts of HSE are now mainly concentrated on the IEC standards mentioned below. IEC The International Electrotechnical Commission has issued two standards in the area of safety-critical system development <ref> [IEC91, IEC92] </ref>. These documents were originally issued in 1989, but have subsequently been updated and reissued. The former deals specif ically with software for computers in the application of industrial safety related systems, while the latter is concerned with the functional safety of programmable electronic systems in general. <p> The trend for the future is more standards in this area, given the number that are at the discussion stage now. Many are likely to be industry specific standards, often based on more generic standards like <ref> [IEC91, IEC92] </ref>. A significant number are mentioning formal methods now, and more are likely to do so in the future.
Reference: [IEEE91] <institution> IEEE standard glossary of software engineering terminology, in IEEE Software Engineering Standards Collection, Elsevier Applied Science, </institution> <year> 1991 </year>
Reference: [IEEE93] <institution> Standard for Software Safety Plans. Draft J, P1228, Software Safety Plans Working Group, Software Engineering Standards Subcommittee, IEEE Computer Society, </institution> <address> 345 East 47th Street, New York, NY 10017, USA, </address> <note> 11 February 1993 (Unapproved IEEE Standards Draft, subject to change) </note>
Reference-contexts: A guideline, based on Parnas' and other ideas is in preparation by AECB. IEEE P1228 The P1228 Software Safety Plans Working Group, under the Software Engineering Standards Subcommittee of the IEEE Computer Society, is preparing a standard for software safety plans <ref> [IEEE93] </ref>. This is an unapproved draft that is subject to change. The appendix of an early draft dated July 1991 includes headings of "Formal/Informal Proofs" and "Mathematical Specification Verification" under techniques being discussed for inclusion.
Reference: [ISO87] <institution> JTC1 Statement of Policy on Formal Description Techniques. ISO/IEC JTC1 N145 and ISO/IEC JTC1/SC18 N13333, International Standards Organization, Geneva, Switzerland, </institution> <year> 1987 </year>
Reference: [ISO89] <author> ISO 8807: </author> <title> Information Processing Systems - Open Systems Interconnection - LOTOS A Formal Description Technique Based on the Temporal Ordering of Observational Behaviour. First edition, International Organization for Standardization, </title> <address> Geneva, Switzerland, </address> <month> 15 February </month> <year> 1989 </year>
Reference: [ISO91] <institution> VDM Specification Language Proto-Standard. </institution> <note> Draft, ISO/IEC JTC1/SC22/WG19 IN9, 1991 (Available from D. </note> <institution> Andrews, Dept. of Computing Studies, University of Leicester, University Road, Leicester LE1 7RH, UK.) </institution>
Reference: [ISO92] <institution> Draft Prolog standard, ISO/JTC1/SC22/WG17 N92, International Standards Organization, Geneva, Switzerland, </institution> <year> 1992 </year>
Reference: [ISO93] <editor> Nicholls, J.E., and Brien, S.M. (Eds.): </editor> <title> Z Base Standard. </title> <address> ISO/IEC JTC1/SC22, </address> <year> 1993, </year> <note> ZIP Project Technical Report ZIP/PRG/92/121, SRC Document: 132, Version 1.0, 30 November 1992 (Available from the Secretary, </note> <institution> ZIP Project, Oxford University Computing Laboratory, PRG, </institution> <address> 11 Keble Road, Oxford OX1 3QD, UK.) </address>
Reference: [MoD91a] <institution> The Procurement of Safety Critical Software in Defence Equipment (Part 1: </institution> <type> Requirements, Part 2: Guidance). Interim Defence Standard 00-55, Issue 1, </type> <institution> Ministry of Defence, Directorate of Standardization, </institution> <address> Kentigern House, 65 Brown Street, Glasgow G2 8EX, UK, </address> <month> 5 April </month> <year> 1991 </year>
Reference-contexts: introduction of the UK MoD Def Stan 00-55 <ref> [MoD91a] </ref> which will be commented upon later. Although the debate on the exact formal methods content of standards like 00-55 is bound to continue, there are certain aspects such as formal specification which cannot sensibly be ignored by standardizing bodies. <p> A1 of [RIA91]). The UK Ministry of Defence have published two interim standards concerning safety. 00-55 <ref> [MoD91a] </ref>, on the procurement of safety-critical software in defence equipment, is split into two parts, on requirements (Part 1) and guidance (Part 2). Issue 1 was made available in 1991. 00-55 may be revised in 1994, although only Part 2 is likely to change.
Reference: [MoD91b] <institution> Hazard Analysis and Safety Classification of the Computer and Programmable Electronic System Elements of Defence Equipment. </institution> <note> Interim Defence Standard 00-56, Issue 1, </note> <institution> Ministry of Defence, Directorate of Standardization, </institution> <address> Kentigern House, 65 Brown Street, Glasgow G2 8EX, UK, </address> <month> 5 April </month> <year> 1991 </year>
Reference-contexts: Issue 1 was made available in 1991. 00-55 may be revised in 1994, although only Part 2 is likely to change. The 00-56 standard <ref> [MoD91b] </ref> is concerned with hazard analysis and safety classification of the computer and programmable electronic system elements of defence equipment. The latest draft version of Issue 2 [MoD93] is divided into two parts like 00-55, on requirements and guidance.
Reference: [MoD93] <institution> Safety Management Requirements for Defence Systems Containing Programmable Electronics (Part 1: </institution> <month> Requirements, </month> <title> Part 2: General Application Guidance). </title> <type> Draft. Interim Defence Standard 00-56, Issue 2, </type> <institution> Ministry of Defence, Directorate of Standardization, </institution> <address> Kentigern House, 65 Brown Street, Glasgow G2 8EX, UK, </address> <month> 18 February </month> <year> 1993 </year>
Reference-contexts: The 00-56 standard [MoD91b] is concerned with hazard analysis and safety classification of the computer and programmable electronic system elements of defence equipment. The latest draft version of Issue 2 <ref> [MoD93] </ref> is divided into two parts like 00-55, on requirements and guidance. Comments are requested and meetings are held to discuss such revisions (e.g., see page 4 of [36]). Annex C of Part 2 provides a Z specification of some of the tables in Part 1.
Reference: [OH90] <institution> Standard for Software Engineering of Safety Critical Software. </institution> <note> Doc. 982 C-H 69002-0001, rev. 0, </note> <institution> On-tario Hydro, 700 University Avenue, Toronto, </institution> <address> Ontario M5G 1X6, Canada, </address> <note> 21 December 1990 (Issued for one year trial use.) </note>
Reference-contexts: Overviews of standards concerned with software safety from an American point of view are provided by [2, 45, 48]. The US and Europe are the major sources of software safety standards, guidelines and research in this area. In Canada, <ref> [AECB91, AECB92, OH90, OH93] </ref> (amongst others) have been produced in relation to the nuclear industry. <p> This report is not used as a standard itself by AECB, but is used in the evaluation of standards and procedures submitted by Canadian licensees. In particular, Ontario-Hydro have developed a number of such standards and procedures (e.g., <ref> [OH90, OH93] </ref>) and further procedures are under development. Standards and procedures developed by Canadian licensees mandate the use of formal methods, and apart from 00-55 are still some of the few to do so. A guideline, based on Parnas' and other ideas is in preparation by AECB.
Reference: [OH93] <institution> Procedure for the Systematic Design Verification of Safety Critical Software. Doc. </institution> <address> 982 C-H 69002-0006, rev. 0, Ontario Hydro, 700 University Avenue, Toronto, Ontario M5G 1X6, Canada, </address> <note> 5 April 1993 (Issued for one year trial use.) </note>
Reference-contexts: Overviews of standards concerned with software safety from an American point of view are provided by [2, 45, 48]. The US and Europe are the major sources of software safety standards, guidelines and research in this area. In Canada, <ref> [AECB91, AECB92, OH90, OH93] </ref> (amongst others) have been produced in relation to the nuclear industry. <p> This report is not used as a standard itself by AECB, but is used in the evaluation of standards and procedures submitted by Canadian licensees. In particular, Ontario-Hydro have developed a number of such standards and procedures (e.g., <ref> [OH90, OH93] </ref>) and further procedures are under development. Standards and procedures developed by Canadian licensees mandate the use of formal methods, and apart from 00-55 are still some of the few to do so. A guideline, based on Parnas' and other ideas is in preparation by AECB.
Reference: [RIA91] <institution> Safety Related Software for Railway Signalling. BRB/LU Ltd/RIA technical specification no. </institution> <month> 23, </month> <title> Consultative Document, Railway Industry Association, </title> <type> 6 Buckingham Gate, </type> <address> London SW1E 6JP, UK, </address> <year> 1991 </year>
Reference-contexts: These are generic international standards designed to be applied in many different industrial sectors. An example of a particular instantiation of the IEC65-WG9 standard is the proposed RIA standard <ref> [RIA91] </ref> included below. The "formal methods" CCS, CSP, HOL, LOTOS, OBJ, Temporal Logic, VDM and Z are specifically mentioned in [IEC91] (with a brief description and bibliography for each) as possible techniques to be applied in the development of safety-critical systems in an extensive section (B.30, pp. <p> Thus the use of formal methods is strongly recommended, but not mandated by the document. UK RIA The Railway Industry Association consisting of a number of interested organizations and industrial companies in the UK have produced a consultative document on safety-related software for railway signaling <ref> [RIA91] </ref>. It is a draft proposal for an industry specific standard that has yet to be ratified. It makes extensive reference to the IEC65-WG9 standard [IEC91]. Formal methods are mentioned briefly in several places in the document. <p> A1 of <ref> [RIA91] </ref>). The UK Ministry of Defence have published two interim standards concerning safety. 00-55 [MoD91a], on the procurement of safety-critical software in defence equipment, is split into two parts, on requirements (Part 1) and guidance (Part 2).
Reference: [RTCA92] <institution> Software Considerations in Airborne Systems and Equipment Certification. DO-178B, RTCA Inc., </institution> <address> Suite 1020, 1140 Connecticut Avenue NW, Washing-ton DC 20036, USA, </address> <note> 1 December 1992 (Prepared by RTCA SC-167 and EUROCAE WG-12. Also available as document ED-12B from EUROCAE, 17 Rue Hamelin, Paris Cedex 75783, </note> <institution> France.) </institution>
Reference-contexts: This does not explicitly recognize formal methods as part of accepted practice. However a completely rewritten guideline for the newly named Requirements and Technical Concepts for Aviation still RTCA - (DO-178B) <ref> [RTCA92] </ref> has now been approved since 1st December 1992. This includes a very brief subsection 12.3.1 on pp. 61-62 entitled Formal Methods under a section entitled Alternative Methods.
Reference: [RTCA90] <institution> Minimum Operational Performance Standards for Traffic Alert and Collision Avoidance System (TCAS) Airborne Equipment Consolidated Edition. DO-185, RTCA, One McPherson Square, </institution> <address> 1425 K Street N.W., Suite 500, Washington DC 20005, USA, </address> <month> 6 September </month> <year> 1990 </year>
Reference: [SafeIT90a] <author> Bloomfield, R.E. (Ed.): </author> <title> SafeIT1 The Safety of Programmable Electronic Systems. </title> <institution> Safety-Related Working Group (SRS-WG), Interdepartmental Committee on Software Engineering (ICSE), Department of Trade and Industry, ITD7a Room 840, </institution> <address> Kingsgate House, 66-74 Victoria Street, London SW1E 6SW, UK, </address> <month> June </month> <year> 1990 </year>
Reference-contexts: This is gradually being alleviated as the necessary mathematics (typically set theory and predicate calculus) is being taught increasingly in computing science curricula and on industrial courses [18]. Educational concerns in the UK are reflected in the SafeIT strategy document <ref> [SafeIT90a] </ref>. The UK Department of Trade and Industry has commissioned a special study to stimulate the development of education and training in the area [11]. <p> The UK Department of Trade and Industry (DTI) has provided a lead by instituting the `SafeIT' initiative in 1991 to establish a unified approach to the assurance of software-based safety-critical systems by encouraging and financing collaborative projects in the area <ref> [SafeIT90a] </ref>. This sponsors industrial (and to a lesser extent academic) organizations to undertake collaborative projects in this area, and a second phase of the initiative has been started.
Reference: [SafeIT90b] <author> Bloomfield, R.E., and Brazendale, J. (Eds.): </author> <title> SafeIT2 A Framework for Safety Standards. </title> <institution> Safety-Related Working Group (SRS-WG), Interdepartmental Committee on Software Engineering (ICSE), Department of Trade and Industry, ITD7a Room 840, </institution> <address> Kingsgate House, 66-74 Victoria Street, London SW1E 6SW, UK, June 1990 References </address>
Reference-contexts: A regular club newsletter includes articles on the application of mathematical methods to safety-critical systems as well as information relevant to standards (e.g., on pages 4 and 8 of [36]). The SafeIT initiative is particularly interested in safety standards and has produced a framework for them <ref> [SafeIT90b] </ref>. Other regular meetings such as COMPASS [23], SAFECOMP [16], FME [47] and ZUM [5] also discuss issues relevant to this area.
Reference: [1] <author> Austin, S., and Parkin, </author> <title> G.I.: Formal methods: A survey, </title> <institution> National Physical Laboratory, Queens Road, Teddington, </institution> <address> Middlesex TW11 0LW, UK, </address> <month> March </month> <year> 1993 </year>
Reference: [2] <author> Bhansali, P.V.: </author> <title> Survey of software safety standards shows diversity, </title> <booktitle> Computer, </booktitle> <month> January </month> <year> 1993, </year> <pages> pp. 88-89 </pages>
Reference-contexts: The selection, which is summarized in Table 1, is somewhat eclectic, but demonstrates the range of areas and organizational bodies that are involved. Overviews of standards concerned with software safety from an American point of view are provided by <ref> [2, 45, 48] </ref>. The US and Europe are the major sources of software safety standards, guidelines and research in this area. In Canada, [AECB91, AECB92, OH90, OH93] (amongst others) have been produced in relation to the nuclear industry.
Reference: [3] <author> Blyth, D., Bolddyreff, C., Ruggles, C., and Tetteh-Lartey, N.: </author> <title> The case for formal methods in standards, </title> <journal> IEEE Software, </journal> <month> September </month> <year> 1990, </year> <pages> pp. 65-67 </pages>
Reference: [4] <editor> Bowen, J.P. (Ed.): </editor> <title> Towards verified systems (Else-vier, Real-Time Safety Critical Systems series, </title> <note> 1993) In preparation </note>
Reference: [5] <editor> Bowen, J.P., and Nicholls, J.E. (Eds.): </editor> <booktitle> Z User Workshop, London 1992 (Springer-Verlag, Workshops in Computing, </booktitle> <year> 1993) </year>
Reference-contexts: The SafeIT initiative is particularly interested in safety standards and has produced a framework for them [SafeIT90b]. Other regular meetings such as COMPASS [23], SAFECOMP [16], FME [47] and ZUM <ref> [5] </ref> also discuss issues relevant to this area.
Reference: [6] <author> Bowen, J.P., and Stavridou, V.: </author> <title> Safety-critical systems, formal methods and standards, </title> <institution> Programming Research Group Technical Report PRG-TR-5-92, Oxford University Computing Laboratory, </institution> <note> 1992 (Revised versions to appear in [4] and the BCS/IEE Software Engineering Journal) </note>
Reference-contexts: Hopefully this will eventually lead to some improvement in the safety of people and resources that depend upon computer software. Acknowledgements I am particularly indebted to Victoria Stavridou, Royal Holloway College, University of London, who co-authored a technical report on which part of this paper is based <ref> [6] </ref>. Many other people have supplied information and standards used as input to this original survey; a list is included in [6]. <p> Acknowledgements I am particularly indebted to Victoria Stavridou, Royal Holloway College, University of London, who co-authored a technical report on which part of this paper is based <ref> [6] </ref>. Many other people have supplied information and standards used as input to this original survey; a list is included in [6]. Victor Carre~no, Ben Di Vito, John Elliott, Paul Gardiner, Kevin Geary, Don Good, David Levan, David Parnas, Victo-ria Stavridou, Martyn Thomas, Lyne Tougas and Tony Zawilski, as well as the anonymous reviewers, supplied information and advice which specifically aided this paper.
Reference: [7] <author> Bowen, J.P., and Stavridou, V.: </author> <title> Formal methods and software safety, </title> <booktitle> in [16], </booktitle> <year> 1992, </year> <pages> pp. 93-98 </pages>
Reference: [8] <author> Bowen, J.P., and Stavridou, V.: </author> <title> The industrial take-up of formal methods in safety-critical and other areas: A perspective, </title> <booktitle> in [47], </booktitle> <year> 1993, </year> <pages> pp. 183-195 </pages>
Reference: [9] <author> Brown, M.J.D.: </author> <title> Rationale for the development of the UK defence standards for safety-critical computer software, </title> <booktitle> Proc. 5th Annual Conference on Computer Assurance (COMPASS '90), </booktitle> <address> Washington DC, USA, </address> <month> June </month> <year> 1990 </year>
Reference-contexts: The standards are currently in interim form. The MoD set 1995 as the goal date for the introduction of fully mandatory standards <ref> [9] </ref>, but has now withdrawn a specific introduction date. 00-55 mandates the production of safety-critical module specifications in a formal language notation. Such specifications must be analyzed to establish their consistency and completeness in respect of all potentially hazardous data and control flow domains.
Reference: [10] <author> Buxton, J.N., and Malcolm, R.: </author> <title> Software technology transfer, </title> <journal> Software Engineering Journal, January 1991, </journal> <volume> 6, (1), </volume> <pages> pp. 17-23 </pages>
Reference-contexts: However technology transfer is a delicate process that takes time and effort which can easily fail at any stage <ref> [10] </ref>. The UK Department of Trade and Industry (DTI) has provided a lead by instituting the `SafeIT' initiative in 1991 to establish a unified approach to the assurance of software-based safety-critical systems by encouraging and financing collaborative projects in the area [SafeIT90a].
Reference: [11] <author> Coopers & Lybrand: </author> <title> Safety related computer controlled systems market study, A review for the Department of Trade and Industry by Coopers & Ly-brand in association with SRD-AEA Technology and Benchmark Research (HMSO, </title> <address> London, </address> <year> 1992) </year>
Reference-contexts: Educational concerns in the UK are reflected in the SafeIT strategy document [SafeIT90a]. The UK Department of Trade and Industry has commissioned a special study to stimulate the development of education and training in the area <ref> [11] </ref>. In addition, the British Computer Society (BCS) and the Institute of Electrical Engineers (IEE) have established working groups which are aiming to produce proposals on the content of courses aimed at safety--critical systems engineers.
Reference: [12] <author> Craigen, D., Gerhart, S., and Ralston, T.J.: </author> <title> An international survey of industrial applications of formal methods, Atomic Energy Control Board of Canada, </title> <type> U.S. </type> <institution> National Institute of Standards and Technology, and U.S. Naval Research Laboratories, </institution> <year> 1993 </year>
Reference: [13] <author> Craigen, D., Gerhart, S., and Ralston, T.J.: </author> <title> Formal methods reality check: Industrial usage, </title> <booktitle> in [47], </booktitle> <year> 1993, </year> <pages> pp. 250-267 </pages>
Reference: [14] <author> Deransart, P.: </author> <title> Prolog standardisation: the usefulness of a formal specification, </title> <booktitle> on usenet comp.lang.prolog, comp.software-eng and comp.- specification electronic newsgroups, </booktitle> <month> October </month> <year> 1992 </year>
Reference: [15] <author> Devine, C., Fenton, N., and Page, S.: </author> <title> Deficiencies in existing software engineering standards as exposed by SMARTIE, </title> <booktitle> in [37], </booktitle> <year> 1993 </year>
Reference-contexts: Moreover, research is needed in order to establish precisely what standards should contain and how various sector specific standards interact when they are used simultaneously on a system. Work in this direction is being investigated by the SMARTIE project <ref> [15] </ref>. It is important that standards should not be over-prescriptive, or that prescriptive sections are clearly separated and identified as such (perhaps as an appendix or even as a separate document).
Reference: [16] <editor> Frey, H.H. (Ed.): </editor> <booktitle> Safety of computer control systems 1992 (SAFECOMP'92), Computer Systems in Safety-critical Applications, Proc. IFAC Symposium, </booktitle> <address> Zurich, Switzerland, </address> <note> 28-30 October 1992 (Pergamon Press, </note> <year> 1992) </year>
Reference-contexts: The SafeIT initiative is particularly interested in safety standards and has produced a framework for them [SafeIT90b]. Other regular meetings such as COMPASS [23], SAFECOMP <ref> [16] </ref>, FME [47] and ZUM [5] also discuss issues relevant to this area.
Reference: [17] <author> Gardiner, P.H.B.: </author> <title> Defence Standard 00-56: Development and support Project formal specification of procedural elements, </title> <type> Draft, </type> <note> FSEL/SRC/RDS-PRC/1 Version 3.2, Formal Systems (Europe) Ltd, 17 May 1993 (Available from John Elliott, </note> <institution> Safety and Reliability Consultants Ltd (SRC), 89 High Street, Alton, Hampshire GU34 1LG, UK.) </institution>
Reference-contexts: Annex C of Part 2 provides a Z specification of some of the tables in Part 1. Most of the procedural elements of this revised standard are also being specified in Z by Formal Systems (Europe) Ltd <ref> [17] </ref>, subcontracted by Safety and Reliability Consultants Ltd, but this has not (yet) been included in the standard itself.
Reference: [18] <author> Garlan, D.: </author> <title> Formal methods for software engineers: Tradeoffs in curriculum design, </title> <editor> in Sledge, C. (Ed.): </editor> <booktitle> Software Engineering Education, SEI Conference, </booktitle> <address> San Diego, California, USA, </address> <note> October 1992 (Springer-Verlag, Lecture Notes in Computer Science 640, 1992) pp. 131-142 </note>
Reference-contexts: This is gradually being alleviated as the necessary mathematics (typically set theory and predicate calculus) is being taught increasingly in computing science curricula and on industrial courses <ref> [18] </ref>. Educational concerns in the UK are reflected in the SafeIT strategy document [SafeIT90a]. The UK Department of Trade and Industry has commissioned a special study to stimulate the development of education and training in the area [11].
Reference: [19] <author> Guiho, G., and Hennebert, C.: </author> <booktitle> SACEM software val-idation, Proc. 12th International Conference on Software Engineering (ICSE) (IEEE Computer Society Press, March 1990) pp. </booktitle> <pages> 186-191 </pages>
Reference: [20] <author> Hall, J.A.: </author> <title> Seven myths of formal methods, </title> <journal> IEEE Software, </journal> <month> September </month> <year> 1990, </year> <pages> pp. 11-19 </pages>
Reference-contexts: However there is significant market resistance to the use of formal methods, even in the area of safety-critical systems, perhaps due to many preconceived ideas about the difficulty of using such methods, whether founded or not <ref> [20] </ref>. Most standards are recommending formal methods rather than mandating them, with the notable except of 00-55. Standards have the dual effect of reflecting current best practice and normalizing procedures to the highest commonly acceptable denominator.
Reference: [21] <author> Hall, P.A.V., and Resnick, M.: </author> <title> Standards, </title> <editor> in McDer-mid, J.A. (Ed.): </editor> <title> Software Engineer's Reference Book, part II, </title> <note> chapter 50 (Butterworth-Heinmann, </note> <year> 1991) </year>
Reference: [22] <editor> IEE: </editor> <title> Safety-related systems: A professional brief for the engineer, The Institution of Electrical Engineers, Savoy Place, </title> <address> London WB2R 0BR, UK, </address> <month> January </month> <year> 1992 </year>
Reference: [23] <author> IEEE: </author> <title> Software Safety Standards session, </title> <booktitle> Proc. 7th Annual Conference on Computer Assurance (COMPASS '92), </booktitle> <address> Gaithersburg, Maryland, USA, </address> <month> 15-18 June </month> <year> 1992 </year>
Reference-contexts: The SafeIT initiative is particularly interested in safety standards and has produced a framework for them [SafeIT90b]. Other regular meetings such as COMPASS <ref> [23] </ref>, SAFECOMP [16], FME [47] and ZUM [5] also discuss issues relevant to this area.
Reference: [24] <author> Jacky, J.: </author> <title> Safety-critical computing: Hazards, practices, standards and regulation, </title> <editor> in Dunlop, C., and Kling, R. (Eds.): Computerization and controversy, </editor> <publisher> chapter 5 (Academic Press, </publisher> <pages> 1991) pp. 612-631 </pages>
Reference: [25] <author> Laprie, J.C. (Ed.): </author> <title> Dependability: Basic concepts and terminology (Springer-Verlag, </title> <year> 1991) </year>
Reference: [26] <author> Larsen, P.G., and Plat, N.: </author> <title> Standards for non-executable specification languages, </title> <journal> The Computer Journal, </journal> <month> December </month> <year> 1992, </year> <pages> 35, (6), pp. 567-573 </pages>
Reference: [27] <author> Leveson, N.G.: </author> <title> Software safety in embedded computer systems, </title> <journal> Communications of the ACM, Febru-ary 1991, </journal> <volume> 34, (2), </volume> <pages> pp. 34-46 </pages>
Reference: [28] <author> MacKenzie, D.: </author> <title> Computers, formal proof, and the law courts, </title> <journal> Notices of the American Mathematical Society, November 1992, </journal> <volume> 39, (9), </volume> <pages> pp. 1066-1069 </pages>
Reference-contexts: In particular, the term formal proof has been used quite loosely sometimes, and this has even led to litigation in the law courts over the VIPER microprocessor, although the case was ended before a court ruling was pronounced <ref> [28] </ref>. If extravagant claims are made, it is quite possible that a similar case could occur again. 00-55 differentiates between formal proof and rigorous argument (informal proof), preferring the former, but sometimes accepting the latter with a correspondingly lower level of design assurance.
Reference: [29] <author> Natsume, T., and Hasegawa, Y.: </author> <title> A view on computer systems and their safety in Japan, </title> <booktitle> in [16], </booktitle> <year> 1992, </year> <pages> pp. 45-49 </pages>
Reference-contexts: The US and Europe are the major sources of software safety standards, guidelines and research in this area. In Canada, [AECB91, AECB92, OH90, OH93] (amongst others) have been produced in relation to the nuclear industry. Standards Australia is recommending adoption of the IEC Draft Document 65A [IEC91]. <ref> [29] </ref> gives a rare overview of dependability and safety issues in Japan, including details of an abortive attempt to produce their own JIS standard sponsored by MITI in this area, although guideline reports exist.
Reference: [30] <author> Neesham, C.: </author> <title> Safe conduct, </title> <booktitle> Computing, </booktitle> <month> 12 November </month> <year> 1992, </year> <pages> pp. 18-20 </pages>
Reference-contexts: If negligence can be proved during the product's design or manufacture then criminal proceedings may be taken against the director or manager in charge. There is a maximum penalty of three months in jail or a large fine <ref> [30] </ref>. Suppliers have to demonstrate that they are using best working practice. This could include, for example, the use of formal methods. However the explicit mention of software in [DTI93] is very scant.
Reference: [31] <editor> Neumann, P.G. (Ed.): </editor> <booktitle> Subsection on certification of professionals, ACM SIGSOFT Software Engineering Notes, </booktitle> <month> January </month> <year> 1991, </year> <pages> 16, (1), pp. 24-32 </pages>
Reference-contexts: Some standards and draft standards are now recognizing the problems and recommending that appropriate personnel should be used on safety-critical projects. There are suggestions that some sort of certification of developers should be introduced. This is still an active topic of discussion <ref> [31] </ref>, but there are possible drawbacks as well as benefits by introducing such a `closed shop' since suitable able engineers may be inappropriately excluded (and vice versa). The education/accreditation debate has been particularly active in the UK, in the wake of Def Stan 00-55.
Reference: [32] <author> Neumann, P.G.: </author> <title> Illustrative risks to the public in the use of computer systems and related technology, </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <month> January </month> <year> 1992, </year> <pages> 17, (1), pp. 23-32 </pages>
Reference: [33] <author> Parkin, G.I., and Wichmann, B.: </author> <title> Conformity clause for VDM-SL, </title> <booktitle> in [47], </booktitle> <year> 1993, </year> <pages> pp. 501-520 </pages>
Reference: [34] <institution> Potocki de Montalk, J.P.: Computer software in civil aircraft, Microprocessors and Microsystems, </institution> <note> in Cul-lyer, W.J. (Ed.): Special Issue on Safety Critical Systems, January 1993, 17, (1) </note>
Reference-contexts: Other regular meetings such as COMPASS [23], SAFECOMP [16], FME [47] and ZUM [5] also discuss issues relevant to this area. The debate concerning the use of software in safety-critical applications, the appropriate techniques for development, and even whether the use of software increases or decreases safety <ref> [34] </ref>, are set to continue for some time. 4 A survey of some standards This section introduces the recommendations concerning the use of formal methods in a number of software safety standards.
Reference: [35] <author> Rata, J.M.: </author> <title> Standardization efforts worldwide, </title> <editor> in Bennett, P.: </editor> <title> Safety aspects of computer control, </title> <note> chapter 4 (Butterworth-Heinmann, 1993) pp. 56-75 </note>
Reference: [36] <editor> Redmill, F. (Ed.): </editor> <title> Safety Systems: The Safety-Critical Systems Club Newsletter, Centre for Software Reliability, </title> <institution> University of Newcastle upon Tyne, New-castle NE1 7RU, UK, </institution> <month> May </month> <year> 1993, </year> <pages> 2, (3) </pages>
Reference-contexts: A regular club newsletter includes articles on the application of mathematical methods to safety-critical systems as well as information relevant to standards (e.g., on pages 4 and 8 of <ref> [36] </ref>). The SafeIT initiative is particularly interested in safety standards and has produced a framework for them [SafeIT90b]. Other regular meetings such as COMPASS [23], SAFECOMP [16], FME [47] and ZUM [5] also discuss issues relevant to this area. <p> B-14-18) under a Bibliography of Techniques. A shorter section on "formal proof" (B.30, p. B-18) is also included. It is currently proposed that three IEC standards on Functional Safety of Safety-Related Systems will be developed (see page 8 of <ref> [36] </ref>): (1) Generic requirements; (2) Requirements for electron-ical/electronic/programmable systems; and (3) Software requirements. The next drafts are planned to be available by the end of 1993. ESA The European Space Agency has issued guidelines for software engineering standards [ESA91]. <p> The latest draft version of Issue 2 [MoD93] is divided into two parts like 00-55, on requirements and guidance. Comments are requested and meetings are held to discuss such revisions (e.g., see page 4 of <ref> [36] </ref>). Annex C of Part 2 provides a Z specification of some of the tables in Part 1.
Reference: [37] <author> Redmill, F., and Anderson, T.: </author> <title> Safety-critical systems current issues, </title> <publisher> techniques and standards (Chapman and Hall, </publisher> <year> 1993) </year>
Reference-contexts: An associated Safety Critical Systems Club (SCSC) has been formed and interest is very strong, with around 1,600 members, and several meetings each year, including issues concerning standards <ref> [37] </ref>. A regular club newsletter includes articles on the application of mathematical methods to safety-critical systems as well as information relevant to standards (e.g., on pages 4 and 8 of [36]). The SafeIT initiative is particularly interested in safety standards and has produced a framework for them [SafeIT90b].
Reference: [38] <author> Smith, D.J., and Wood, </author> <title> K.B.: Engineering quality software: a review of current practices, standards and guidelines including new methods and development tools, </title> <publisher> 2nd edition (Elsevier Applied Science, </publisher> <year> 1989) </year>
Reference: [39] <author> Sommerville, I.: </author> <title> Software engineering, </title> <publisher> 4th edition (Addison Wesley, </publisher> <year> 1992) </year>
Reference: [40] <author> Thomas, </author> <title> M.C.: The industrial use of formal methods, Microprocessors and Microsystems, </title> <editor> in Cullyer, W.J. (Ed.): </editor> <title> Special Issue on Safety Critical Systems, </title> <journal> Jan-uary 1993, </journal> <volume> 17, </volume> <pages> (1) </pages>
Reference: [41] <author> Tierney, M.: </author> <title> The evolution of Def Stan 00-55 and 00-56: An intensification of the "formal methods debate" in the UK, </title> <booktitle> Proc. Workshop on Policy Issues in Systems and Software Development, </booktitle> <institution> Science Policy Research Unit, </institution> <address> Brighton, UK, </address> <month> July </month> <year> 1991 </year>
Reference-contexts: These standards, and particularly 00-55, mention and mandate formal methods extensively and have, therefore, caused much discussion and argument in the defence software industry as well as the software engineering community in the UK. <ref> [41] </ref> gives an interesting account of the evolution of 00-55 and the associated debate in the UK. The standards are currently in interim form. <p> For example, the MoD Def Stan 00-55 has had a great impact both in terms of research and development, and education in the United Kingdom <ref> [41, 42] </ref>. The current level of standardization activity is encouraging. It should be noted, however, that the proliferation of standards is not in itself sufficient to ensure the production of safer software. These standards need to be used and their impact on software safety assessed and quantified.
Reference: [42] <author> Tierney, M.: </author> <title> Some implications of Def Stan 00-55 on the software engineering labour process in safety critical developments, </title> <institution> Research Centre for Social Sciences, Edinburgh University, </institution> <year> 1991 </year>
Reference-contexts: Perhaps the central issue here is not formal methods education per se, but the identity of the whole software engineering profession; in other words, what precisely is a software engineer is a question that will no doubt be debated for some time to come. <ref> [42] </ref> includes a discussion on the drift of many kinds of professionals into software engineering. 3.3 Technology transfer Industrial awareness of applicable techniques and relevant standards is very important, particularly in an area like safety-critical systems where the reduction of errors by any means is especially important. <p> For example, the MoD Def Stan 00-55 has had a great impact both in terms of research and development, and education in the United Kingdom <ref> [41, 42] </ref>. The current level of standardization activity is encouraging. It should be noted, however, that the proliferation of standards is not in itself sufficient to ensure the production of safer software. These standards need to be used and their impact on software safety assessed and quantified.
Reference: [43] <author> Tripp, </author> <title> L.L.: Future of software engineering standards, </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <month> January </month> <year> 1992, </year> <pages> 17, (1), pp. 58-61 </pages>
Reference: [44] <author> Wallace, D.R., Kuhn, D.R., and Cherniavsky, </author> <title> J.C.: Report of the NIST workshop of standards for the assurance of high integrity software, </title> <note> NIST Special Publication 500-190, </note> <institution> Computer Systems Laboratory, National Institute of Standards and Technology, Gaithersburg, MD 20899, USA, </institution> <note> August 1991 (Available from the Superintendent of Documents, </note> <institution> Government, U.S. Printing Office, </institution> <address> Washington, DC 20402, USA.) </address>
Reference: [45] <author> Wallace, D.R., Kuhn, D.R., and Ippolito, L.M.: </author> <title> An analysis of selected software safety standards, </title> <journal> IEEE AES Magazine, </journal> <month> August </month> <year> 1992, </year> <pages> pp. </pages> <note> 3-14 (Also presented in [23].) </note>
Reference-contexts: The selection, which is summarized in Table 1, is somewhat eclectic, but demonstrates the range of areas and organizational bodies that are involved. Overviews of standards concerned with software safety from an American point of view are provided by <ref> [2, 45, 48] </ref>. The US and Europe are the major sources of software safety standards, guidelines and research in this area. In Canada, [AECB91, AECB92, OH90, OH93] (amongst others) have been produced in relation to the nuclear industry.
Reference: [46] <author> Wichmann, B.A. (Ed.): </author> <note> Software in safety-related systems (Wiley, 1992) Also published by BCS (Includes a copy of the 00-55 standard [MoD91a].) </note>
Reference-contexts: Another complementary force that could be seen to push industry is the education of engineers in the proper techniques that should be applied to such systems. <ref> [46] </ref> includes a report on education and training with respect to safety-related software.
Reference: [47] <editor> Woodcock, J.C.P., and Larsen, P.G. (Eds.): </editor> <booktitle> FME '93: Industrial-strength formal methods, First International Symposium of Formal Methods Europe, </booktitle> <address> Odense, Denmark, </address> <note> 19-23 April 1993 (Springer-Verlag, Lecture Notes in Computer Science 670, </note> <year> 1993) </year>
Reference-contexts: The SafeIT initiative is particularly interested in safety standards and has produced a framework for them [SafeIT90b]. Other regular meetings such as COMPASS [23], SAFECOMP [16], FME <ref> [47] </ref> and ZUM [5] also discuss issues relevant to this area.
Reference: [48] <author> Wright, C.L., and Zawilski, A.J.: </author> <title> Existing and emerging standards for software safety. The MITRE Corporation, Center for Advanced Aviation System Development, </title> <address> 7525 Colshire Drive, McLean, Virginia 22102-3481, USA, MP-91W00028, </address> <booktitle> June 1991 (Presented at the IEEE Fourth Software Engineering Standards Application Workshop, </booktitle> <address> San Diego, Cali-fornia, USA, </address> <month> 20-24 May </month> <year> 1991.) </year>
Reference-contexts: The selection, which is summarized in Table 1, is somewhat eclectic, but demonstrates the range of areas and organizational bodies that are involved. Overviews of standards concerned with software safety from an American point of view are provided by <ref> [2, 45, 48] </ref>. The US and Europe are the major sources of software safety standards, guidelines and research in this area. In Canada, [AECB91, AECB92, OH90, OH93] (amongst others) have been produced in relation to the nuclear industry.
Reference: [49] <author> Youll, </author> <title> D.P.: Study of the training and education needed in support of Def Stan 00-55. </title> <institution> Cranfield IT Institute Ltd, UK, </institution> <note> September 1988 (Also included as an </note>
Reference-contexts: The education/accreditation debate has been particularly active in the UK, in the wake of Def Stan 00-55. The MoD, having commissioned a report on training and education to support 00-55 <ref> [49] </ref>, has chosen to withdraw from the consequent controversy stating that it is beyond the remit of the standard to set a national training agenda.
References-found: 78

