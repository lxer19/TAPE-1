URL: http://theory.lcs.mit.edu/tds/papers/DePrisco/WDAG97.ps
Refering-URL: http://theory.lcs.mit.edu/tds/paxos.html
Root-URL: 
Title: Revisiting the Paxos algorithm  
Author: Roberto De Prisco Butler Lampson, Nancy Lynch 
Keyword: I/O automata models, formal verification, distributed con sensus, partially synchronous systems, fault-tolerance  
Address: 545 Technology Square NE43, Cambridge, MA 02139, USA.  
Affiliation: MIT Laboratory for Computer Science  
Abstract: This paper develops a new I/O automaton model called the Clock General Timed Automaton (Clock GTA) model. The Clock GTA is based on the General Timed Automaton (GTA) of Lynch and Vaan- drager. The Clock GTA provides a systematic way of describing timing- based systems in which there is a notion of "normal" timing behavior, but that do not necessarily always exhibit this "normal" behavior. It can be used for practical time performance analysis based on the stabilization of the physical system. We use the Clock GTA automaton to model, verify and analyze the paxos algorithm. The paxos algorithm is an efficient and highly fault- tolerant algorithm, devised by Lamport, for reaching consensus in a distributed system. Although it appears to be practical, it is not widely known or understood. This paper contains a new presentation of the paxos algorithm, based on a formal decomposition into several interacting components. It also contains a correctness proof and a time performance and fault-tolerance analysis. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> T.D. Chandra, V. Hadzilacos, S. Toueg, </author> <title> The weakest failure detector for solving consensus, </title> <booktitle> in Proceedings of the 11 th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 147-158, </pages> <address> Vancouver, British Columbia, Canada, </address> <month> August </month> <year> 1992. </year>
Reference: 2. <author> T.D. Chandra, S. Toueg, </author> <title> Unreliable failure detector for asynchronous distributed systems, </title> <journal> Journal of the ACM, </journal> <volume> Vol. 43 (2), </volume> <pages> pp. 225-267. </pages> <booktitle> A preliminary version appeared in the Proceedings of the 10 th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 325-340, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: We also discuss the mul- tipaxos protocol and provide a data replication algorithm using multipaxos. With multipaxos the high availability of the replicated data is combined with high fault tolerance. Related work. The consensus algorithms of Dwork et al. [5] and of Chandra and Toueg <ref> [2] </ref> bear some similarities with paxos. The algorithm of [5] also uses rounds conducted by a leader, but the rounds are conducted sequentially, whereas in paxos a leader can start a round at anytime and multiple leaders are allowed. <p> The algorithm of Chandra and Toueg is based on the idea of an abstract failure detector. It turns out that failure detectors provide an abstract and modular way of incorporating partial synchrony assumptions in the model of computation. One of the algorithms in <ref> [2] </ref> uses the failure detector S which incorporates the partial synchrony considered in this paper. That algorithm is based on the rotating coordinator paradigm and as paxos uses majorities to achieve consistency. The performances of the Toueg and Chandra algorithm and of the paxos algorithm seem to be comparable.
Reference: 3. <author> F. Cristian and C. </author> <title> Fetzer, The timed asynchronous system model, </title> <institution> Dept. of Computer Science, UCSD, La Jolla, CA. </institution> <note> Technical Report CSE97-519. </note>
Reference-contexts: However the standard commit protocol requires a fixed leader while paxos does not. In [9] Lampson provides a brief overview of the paxos algorithm together with key ideas for proving the correctness of the algorithm. Cristian's timed asynchronous model <ref> [3] </ref> is very similar to the distributed setting considered in this paper. Our Clock GTA provides a formal way of modelling the stability property of the timed asynchronous model. In [16] Patt-Shamir introduces a special type of GTA used for the clock synchronization problem.
Reference: 4. <author> R. De Prisco, </author> <title> Revisiting the Paxos algorithm, M.S. </title> <type> Thesis, </type> <institution> Massachusetts Institute of Technology, Laboratory for Computer Science, </institution> <address> Cambridge, MA, </address> <month> June </month> <year> 1997. </year> <type> Technical Report MIT-LCS-TR-717, </type> <institution> Lab. for Computer Science, MIT, </institution> <address> Cambridge, MA, USA, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: The full code can be found in <ref> [4] </ref>. Signature of channel i;j Input: Send (m) i;j , Lose i;j , Duplicate i;j Output: Receive (m) i;j Time-passage: -(t) Fig. 1. Automaton channel i;j . The code is deferred to the full paper. Definition 3.
Reference: 5. <author> C. Dwork, N. Lynch, L. Stockmeyer, </author> <title> Consensus in the presence of partial syn-chrony, </title> <journal> J. of the ACM, </journal> <volume> vol. 35 (2), </volume> <pages> pp. 288-323, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: This performance is for a worst-case scenario. We also discuss the mul- tipaxos protocol and provide a data replication algorithm using multipaxos. With multipaxos the high availability of the replicated data is combined with high fault tolerance. Related work. The consensus algorithms of Dwork et al. <ref> [5] </ref> and of Chandra and Toueg [2] bear some similarities with paxos. The algorithm of [5] also uses rounds conducted by a leader, but the rounds are conducted sequentially, whereas in paxos a leader can start a round at anytime and multiple leaders are allowed. <p> With multipaxos the high availability of the replicated data is combined with high fault tolerance. Related work. The consensus algorithms of Dwork et al. <ref> [5] </ref> and of Chandra and Toueg [2] bear some similarities with paxos. The algorithm of [5] also uses rounds conducted by a leader, but the rounds are conducted sequentially, whereas in paxos a leader can start a round at anytime and multiple leaders are allowed. The strategy used in each round by the algorithm of [5] is different from the one used by paxos. <p> The algorithm of <ref> [5] </ref> also uses rounds conducted by a leader, but the rounds are conducted sequentially, whereas in paxos a leader can start a round at anytime and multiple leaders are allowed. The strategy used in each round by the algorithm of [5] is different from the one used by paxos. The time analysis provided in [5] is conditional on a "global stabilization time" after which process response times and message delivery times satisfy the time assumptions. This is similar to our stabilized analysis. <p> The strategy used in each round by the algorithm of <ref> [5] </ref> is different from the one used by paxos. The time analysis provided in [5] is conditional on a "global stabilization time" after which process response times and message delivery times satisfy the time assumptions. This is similar to our stabilized analysis. A similar time analysis, applied to the problem of reliable group communication, can be found in [6].
Reference: 6. <author> A. Fekete, N. Lynch, A. Shvartsman, </author> <title> Specifying and using a partitionable group communication service, </title> <booktitle> to appear in Proceedings of the 16 th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1997. </year>
Reference-contexts: The time analysis provided in [5] is conditional on a "global stabilization time" after which process response times and message delivery times satisfy the time assumptions. This is similar to our stabilized analysis. A similar time analysis, applied to the problem of reliable group communication, can be found in <ref> [6] </ref>. The algorithm of Chandra and Toueg is based on the idea of an abstract failure detector. It turns out that failure detectors provide an abstract and modular way of incorporating partial synchrony assumptions in the model of computation.
Reference: 7. <author> M.J. Fischer, </author> <title> The consensus problem in unreliable distributed systems (a brief survey). </title> <type> Rep. </type> <institution> YALEU/DSC/RR-273. Dept. of Computer Science, Yale Univ., </institution> <address> New Have, Conn., </address> <month> June </month> <year> 1983. </year>
Reference-contexts: There are different definitions of the problem depending on what these conditions require. Distributed consensus has been extensively studied. A good survey of early results is provided in <ref> [7] </ref>. We refer the reader to [11] for a more recent treatment of consensus problems. Real distributed systems are often partially synchronous systems subject to process, channel and timing failures and process recoveries. Any practical consensus algorithm needs to consider the above practical setting.
Reference: 8. <author> L. Lamport, </author> <note> The part-time parliament, Research Report 49, </note> <institution> Digital Equipment Corporation Systems Research Center, </institution> <address> Palo Alto, CA, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: The model is intended to be used for performance and fault-tolerance ? Contact author. E-mail: robdep@theory.lcs.mit.edu analysis of practical distributed systems based upon the stabilization of the system. We use the Clock GTA to formally describe and analyze the paxos algorithm, devised by Lamport <ref> [8] </ref> to solve the consensus problem. Reaching consensus is a fundamental problem in distributed systems. <p> When the distributed system stabilizes, meaning that there are no failures, nor process recoveries, and a majority of the processes are not stopped, for a sufficiently long time, termination is also achieved and the performance of the algorithm is good. In <ref> [8] </ref> a variation of paxos that considers multiple concurrent runs of paxos for reaching consensus on a sequence of values is also presented. <p> We call this variation the multipaxos algorithm 2 . paxos has good fault-tolerance properties and when the system is stable it combines those fault-tolerance properties with the performance of an efficient algorithm, so that it can be useful in practice. In the original paper <ref> [8] </ref>, the paxos algorithm is described as the result of discoveries of archaeological studies of an ancient Greek civilization. That paper contains also a proof of correctness and a discussion of the performance analysis. The style used for the description of the algorithm often diverts the reader's attention. <p> Indeed the paxos algorithm, even though it appears to be a practical and elegant algorithm, seems not widely known or understood. 2 paxos is the name of the ancient civilization studied in <ref> [8] </ref>. The actual algorithm is called the "single-decree synod" protocol and its variation for multiple consensus is called the "multi-decree parliament" protocol. We use the name paxos for the single-decree protocol and the name multipaxos for the multi-decree parliament protocol. <p> state s and in all the states after s there is a unique leader. 5 The paxos algorithm paxos was devised a very long time ago (the most accurate information dates it back to the beginning of this millennium) but its discovery, due to Lamport, dates back only to 1989 <ref> [8] </ref>. In this section we provide a new and detailed description of paxos. The core part of the algorithm is basicpaxos i . In basicpaxos i processes try to reach a decision by leading what we call a round.
Reference: 9. <author> B. Lampson, </author> <title> How to build a highly available system using consensus, </title> <booktitle> in Proceedings of the 10 th International Workshop on Distributed Algorithms WDAG 96, Bologna, Italy, </booktitle> <pages> pages 1-15, </pages> <year> 1996. </year>
Reference-contexts: In [10, 15] Liskov and Oki provide a data replication algorithm. It incorporates ideas similar to the ones used in paxos. paxos bears some similarities with the standard three-phase commit protocol [17]. However the standard commit protocol requires a fixed leader while paxos does not. In <ref> [9] </ref> Lampson provides a brief overview of the paxos algorithm together with key ideas for proving the correctness of the algorithm. Cristian's timed asynchronous model [3] is very similar to the distributed setting considered in this paper.
Reference: 10. <author> B. Liskov, B. </author> <title> Oki, Viewstamped replication: A new primary copy method to sup-port highly-available distributed systems, </title> <booktitle> in Proceedings of the 7 th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 8-17, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: The paxos algorithm tolerates process restarts and channel failures; this makes paxos more suitable in practice. multipaxos can be easily used to implement a data replication algorithm. In <ref> [10, 15] </ref> Liskov and Oki provide a data replication algorithm. It incorporates ideas similar to the ones used in paxos. paxos bears some similarities with the standard three-phase commit protocol [17]. However the standard commit protocol requires a fixed leader while paxos does not.
Reference: 11. <author> N. Lynch, </author> <title> Distributed Algorithms, </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, </address> <year> 1996. </year>
Reference-contexts: There are different definitions of the problem depending on what these conditions require. Distributed consensus has been extensively studied. A good survey of early results is provided in [7]. We refer the reader to <ref> [11] </ref> for a more recent treatment of consensus problems. Real distributed systems are often partially synchronous systems subject to process, channel and timing failures and process recoveries. Any practical consensus algorithm needs to consider the above practical setting. <p> I/O automata models are simple type of state machines suitable for describing asynchronous and partially synchronous distributed systems. We use the general timed automaton (GTA), model (see <ref> [11] </ref>, Section 23.2). We introduce a new type of GTA, called Clock GTA.
Reference: 12. <author> N. Lynch, F. Vaandrager, </author> <title> Forward and backward simulations for timing-based systems. </title> <booktitle> in Real-Time: Theory in Practice, Vol. 600 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 397-446, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction I/O automata are simple state machines with transitions labelled with named actions. They are suitable for describing asynchronous and partially synchronous distributed systems. The general timed automaton (GTA) model, introduced by Lynch and Vaandrager <ref> [12, 13, 14] </ref>, has formal mechanisms to represent the passage of time and is suitable for modelling partially synchronous distributed systems. In a partially synchronous distributed system, processes take actions within ` time and messages are delivered within d time, for given constants ` and d.
Reference: 13. <author> N. Lynch, F. Vaandrager, </author> <title> Forward and backward simulations|Part II: </title> <journal> Timingbased systems. </journal> <note> Technical Memo MIT-LCS-TM-487.b, </note> <institution> Lab. for Computer Science, MIT, </institution> <address> Cambridge, MA, USA, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: 1 Introduction I/O automata are simple state machines with transitions labelled with named actions. They are suitable for describing asynchronous and partially synchronous distributed systems. The general timed automaton (GTA) model, introduced by Lynch and Vaandrager <ref> [12, 13, 14] </ref>, has formal mechanisms to represent the passage of time and is suitable for modelling partially synchronous distributed systems. In a partially synchronous distributed system, processes take actions within ` time and messages are delivered within d time, for given constants ` and d.
Reference: 14. <author> N. Lynch, F. Vaandrager. </author> <title> Actions transducers and timed automata. </title> <type> Technical Memo MIT-LCS-TM-480.b, </type> <institution> Lab. for Computer Science, MIT, </institution> <address> Cambridge, MA, USA, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: 1 Introduction I/O automata are simple state machines with transitions labelled with named actions. They are suitable for describing asynchronous and partially synchronous distributed systems. The general timed automaton (GTA) model, introduced by Lynch and Vaandrager <ref> [12, 13, 14] </ref>, has formal mechanisms to represent the passage of time and is suitable for modelling partially synchronous distributed systems. In a partially synchronous distributed system, processes take actions within ` time and messages are delivered within d time, for given constants ` and d.
Reference: 15. <author> B. </author> <title> Oki, Viewstamped replication for highly-available distributed systems, </title> <type> Ph.D. Thesis, </type> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <address> Cambridge, MA 02139, </address> <year> 1988. </year>
Reference-contexts: The paxos algorithm tolerates process restarts and channel failures; this makes paxos more suitable in practice. multipaxos can be easily used to implement a data replication algorithm. In <ref> [10, 15] </ref> Liskov and Oki provide a data replication algorithm. It incorporates ideas similar to the ones used in paxos. paxos bears some similarities with the standard three-phase commit protocol [17]. However the standard commit protocol requires a fixed leader while paxos does not.
Reference: 16. <author> B. Patt-Shamir, </author> <title> A theory of clock synchronization, </title> <type> Ph.D. Thesis, </type> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <address> Cambridge, MA 02139, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Cristian's timed asynchronous model [3] is very similar to the distributed setting considered in this paper. Our Clock GTA provides a formal way of modelling the stability property of the timed asynchronous model. In <ref> [16] </ref> Patt-Shamir introduces a special type of GTA used for the clock synchronization problem.
Reference: 17. <author> D. Skeen, </author> <title> Nonblocking Commit Protocols, </title> <booktitle> Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pp. 133-142, </pages> <month> May </month> <year> 1981. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: In [10, 15] Liskov and Oki provide a data replication algorithm. It incorporates ideas similar to the ones used in paxos. paxos bears some similarities with the standard three-phase commit protocol <ref> [17] </ref>. However the standard commit protocol requires a fixed leader while paxos does not. In [9] Lampson provides a brief overview of the paxos algorithm together with key ideas for proving the correctness of the algorithm.
References-found: 17

