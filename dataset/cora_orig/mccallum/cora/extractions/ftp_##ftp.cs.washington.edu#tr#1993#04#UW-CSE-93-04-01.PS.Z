URL: ftp://ftp.cs.washington.edu/tr/1993/04/UW-CSE-93-04-01.PS.Z
Refering-URL: http://www.cs.washington.edu/homes/zahorjan/homepage/listof.htm
Root-URL: 
Title: Adhara: Runtime Support for Dynamic Space-Based Applications on Distributed Memory MIMD Multiprocessors  
Author: Immaneni Ashok and John Zahorjan 
Date: May 1994  
Note: To appear in the proceedings of the Scalable High Performance Computing Conference,  
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: Technical Report # 93-04-01 April 1993 (Revised March 1994) 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gagan Agrawal, Alan Sussman and Joel Saltz. </author> <title> Compiler and Runtime Support for Structured and Block Structured Applications. </title> <booktitle> Proceedings of the Supercomputing Conference, </booktitle> <month> pp.578-587 (November </month> <year> 1993). </year>
Reference-contexts: PARTI [6] is a runtime system that has been developed primarily to support compilers for languages such as HPF. PARTI addresses a broader class of applications that includes unstructured mesh codes. Support for the class of space-based applications is limited to irregularly coupled regular mesh computations <ref> [1] </ref>. There is no convenient way of expressing computations that involve dynamically moving particles, such as plasma physics, molecular dynamics and N-body simulations. The only other specialized runtime system for space-based applications that we are aware of is LPAR [5] (which is based on genMP [4]).
Reference: [2] <author> M.P.Allen and D.J.Tildesley. </author> <title> Computer Simulation of Liquids. </title> <publisher> Clarendon Press, </publisher> <address> Oxford (1987). </address>
Reference-contexts: CGV CGV is a chemistry application that simulates Crystal Growth from Vapor, which can be used to study the formation of crystals of metals such as platinum and copper <ref> [2] </ref>. Atoms are dropped, one by one, onto the existing crystal. When a new atom collides with the stable crystal, the existing atoms are disturbed, settling down after a while.
Reference: [3] <author> Immaneni Ashok and John Zahorjan. </author> <title> Data Partitioning and Dynamic Load Balancing for Dynamic Space-Based Applications. </title> <note> In Preparation. </note>
Reference-contexts: In the above fragment of the program, in between the computation of SolveRoutine and PushRoutine, the data elements of ElectricField and MagneticField are automatically redistributed, if the space partitioning in PushPhase is different from that in GridPhase. Adhara uses predictive <ref> [3] </ref> and monitoring [14] schemes for determining when to balance the load. The goal is to minimize the sum of the overheads due to load imbalance and load balancing. <p> The details of the load balancing scheme are covered in another paper <ref> [3] </ref>. 4 Results We give the results of parallelizing a specific three-dimensional electromagnetic particle-in-cell (EMPIC) application using the Adhara runtime system.
Reference: [4] <author> Scott Baden. </author> <title> Programming Abstractions for Dynamically Partitioning and Coordinating Localized Scientific Calculations Running on Multiprocessors. </title> <journal> SIAM Journal of Science and Statistical Computation, </journal> <volume> Volume 12, Number 1, </volume> <month> pp.145-157 (January </month> <year> 1991). </year>
Reference-contexts: There is no convenient way of expressing computations that involve dynamically moving particles, such as plasma physics, molecular dynamics and N-body simulations. The only other specialized runtime system for space-based applications that we are aware of is LPAR [5] (which is based on genMP <ref> [4] </ref>). LPAR provides mechanisms for expressing sharing of data along partition boundaries. However, dynamic space-based data objects, such as particles, cannot be conveniently ex pressed in LPAR. The user needs to keep track of the data relationships by partially sorting the particles into slots.
Reference: [5] <author> Scott Baden and Scott Kohn. </author> <title> Lattice Parallelism: A Parallel Programming Model for Manipulating NonUniform, Structured Scientific Data Structures. </title> <booktitle> SIG-PLAN Notices (1992 Workshop on Languages, Compilers, and Runtime Environments for Distributed Memory Multiprocessors) (January 1993). </booktitle>
Reference-contexts: There is no convenient way of expressing computations that involve dynamically moving particles, such as plasma physics, molecular dynamics and N-body simulations. The only other specialized runtime system for space-based applications that we are aware of is LPAR <ref> [5] </ref> (which is based on genMP [4]). LPAR provides mechanisms for expressing sharing of data along partition boundaries. However, dynamic space-based data objects, such as particles, cannot be conveniently ex pressed in LPAR. The user needs to keep track of the data relationships by partially sorting the particles into slots.
Reference: [6] <author> Harry Berryman, Joel Saltz and Jeffrey Scroggs. </author> <title> Execution Time Support for Adaptive Scientific Algorithms on Distributed Memory Machines. </title> <journal> Con-currency: Practice and Experience, </journal> <volume> Volume 3(3), </volume> <month> pp.159-178 (June </month> <year> 1991). </year>
Reference-contexts: There is no convenient way of expressing dynamic space-based data objects and their spatial relationships. The user is responsible for deciding on the partitioning scheme, and when and how to perform dynamic load balancing. PARTI <ref> [6] </ref> is a runtime system that has been developed primarily to support compilers for languages such as HPF. PARTI addresses a broader class of applications that includes unstructured mesh codes. Support for the class of space-based applications is limited to irregularly coupled regular mesh computations [1].
Reference: [7] <author> Charles K. Birdsall and A. Bruce Langdon. </author> <title> Plasma Physics via Computer Simulation. </title> <publisher> McGraw-Hill International, </publisher> <address> New York (1985). </address>
Reference-contexts: EMPIC The EMPIC (plasma physics) application simulates movement of charged particles that interact by exerting electric and magnetic field forces on each other <ref> [7, 13, 15] </ref>. The force experienced by a particle depends on the current position and velocity of all the particles, and this changes continuously with time.
Reference: [8] <author> Philip M. Campbell, Edward A. Carmona and David W. Walker. </author> <title> Hierarchical Domain Decomposition With Unitary Load Balancing for Electromagnetic Particle-In-Cell Codes. </title> <booktitle> Proceedings of the Fifth Distributed Memory Computing Conference, </booktitle> <month> pp.943-950 (April </month> <year> 1990). </year>
Reference-contexts: Each node maintains a portion of this grid and com municates the local information with the other nodes to globally repartition the grid. Adhara alters this grid dynamically depending on the load density and movement, and uses a hierarchical scheme <ref> [8] </ref> for globally repartioning the grid. This scheme incurs very little overhead, and exploits the information about load movement and distribution. (Traditional orthogonal recursive bisection schemes do not exploit this information.) In this paper we focus only on the runtime support and the programming interface provided by Adhara.
Reference: [9] <author> Barbara Chapman, Piyush Mehrotra, Hans Moritsch and Hans Zima. </author> <title> Dynamic Data Distributions in Vienna Fortran. </title> <booktitle> Proceedings of the Supercomputing Conference, </booktitle> <month> pp.284-293 (November </month> <year> 1993). </year>
Reference-contexts: Clearly, implementing this feature in each application would be a significant burden on the application developers. Adhara supports all the above features. Details are given in the next section. High-level languages such as Fortran-D [12], Vi-enna Fortran <ref> [9] </ref> and HPF [10] provide annotations for controlling data partitioning. The compiler and its associated runtime environment take care of the communication.
Reference: [10] <author> B. Chapman, P. Mehrotra and H.Zima. </author> <title> High Performance Fortran Without Templates: An Alternative Model for Distribution and Alignment. </title> <booktitle> Proceedings of the Fourth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (PPoPP) (May 1993). </booktitle>
Reference-contexts: Clearly, implementing this feature in each application would be a significant burden on the application developers. Adhara supports all the above features. Details are given in the next section. High-level languages such as Fortran-D [12], Vi-enna Fortran [9] and HPF <ref> [10] </ref> provide annotations for controlling data partitioning. The compiler and its associated runtime environment take care of the communication. This type of high-level environment reduces program development time, but may not of fer good performance, since not all characteristics of the application can be exploited by a general purpose compiler.
Reference: [11] <author> William G. Griswold, Gail A. Harrison, David Notkin and Lawrence Snyder. </author> <title> Scalable Abstractions for Parallel Programming. </title> <booktitle> Proceedings of the 5th Distributed Memory Computing Conference (April 1990). </booktitle>
Reference-contexts: The computation is divided into phases, where each phase computes on a particular data structure called its primary data structure. (It often corresponds to the computation in a do-loop of a sequential algorithm.) This phase, in concept, is similar to the phase defined in the Phase Abstractions Model <ref> [11] </ref>. The compute load in a phase is assumed to be proportional to the sum of the computation (measured in terms of iterations) on the objects in the corresponding primary data structure.
Reference: [12] <author> Seema Hiranandani, Ken Kennedy, Charles Koelbel, Ulrich Kremer and Chau-Wen Tseng. </author> <title> An Overview of the Fortran D Programming System. </title> <booktitle> Proceedings of the Fourth Workshop on Languages and Compilers for Parallel Computing (August 1991). </booktitle>
Reference-contexts: The load balancing cost depends on the algorithm as well as the machine architecture. Clearly, implementing this feature in each application would be a significant burden on the application developers. Adhara supports all the above features. Details are given in the next section. High-level languages such as Fortran-D <ref> [12] </ref>, Vi-enna Fortran [9] and HPF [10] provide annotations for controlling data partitioning. The compiler and its associated runtime environment take care of the communication.
Reference: [13] <author> Roger W. Hockney and James W. Eastwood. </author> <title> Computer Simulation Using Particles. Adam Hilger, </title> <address> Bris-tol, England (1988). </address>
Reference-contexts: EMPIC The EMPIC (plasma physics) application simulates movement of charged particles that interact by exerting electric and magnetic field forces on each other <ref> [7, 13, 15] </ref>. The force experienced by a particle depends on the current position and velocity of all the particles, and this changes continuously with time.
Reference: [14] <author> David M. Nicol and Joel H. Saltz. </author> <title> Dynamic Remapping of Parallel Computations with Varying Resource Demands. </title> <journal> IEEE Transactions on Computers, </journal> <volume> Volume 37, Number 9, </volume> <month> pp.1073-1087 </month> <year> (1988). </year>
Reference-contexts: In the above fragment of the program, in between the computation of SolveRoutine and PushRoutine, the data elements of ElectricField and MagneticField are automatically redistributed, if the space partitioning in PushPhase is different from that in GridPhase. Adhara uses predictive [3] and monitoring <ref> [14] </ref> schemes for determining when to balance the load. The goal is to minimize the sum of the overheads due to load imbalance and load balancing. Adhara does not attempt to find an optimal partitioning every time it load balances, but instead uses heuristics to find a reasonably good one.
Reference: [15] <author> David W. Walker. </author> <title> Characterizing the Parallel Performance of a large-scale Particle-In-Cell Plasma Simulation Code. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> volume 2, </volume> <month> pp.257-288 </month> <year> (1990). </year> <month> 7 </month>
Reference-contexts: Adhara partitions the data using a computation space (the closed physical space that is modelled by the application) as the basis. To exploit spatial locality, Adhara partitions the data using domain decomposition <ref> [15] </ref>, where the computation space is partitioned into contiguous regions and each region is assigned to a processor. Each region is a rectangular block and forms the basis for exploiting data locality and for balancing the load. Load balance is maintained by balancing the load across the regions. <p> EMPIC The EMPIC (plasma physics) application simulates movement of charged particles that interact by exerting electric and magnetic field forces on each other <ref> [7, 13, 15] </ref>. The force experienced by a particle depends on the current position and velocity of all the particles, and this changes continuously with time.
References-found: 15

