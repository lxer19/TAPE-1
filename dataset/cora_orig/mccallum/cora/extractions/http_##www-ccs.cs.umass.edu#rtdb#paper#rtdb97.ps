URL: http://www-ccs.cs.umass.edu/rtdb/paper/rtdb97.ps
Refering-URL: http://www-ccs.cs.umass.edu/rtdb/publications.html
Root-URL: 
Email: e-mail: -xiong, krithi-@cs.umass.edu  
Phone: Tel: (413)545-4753  
Title: Towards the Specification and Analysis of Transactions in Real-Time Active Databases  
Author: Ming Xiong Krithi Ramamritham 
Address: Amherst, MA 01003  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: We build a framework that facilitates the formal description and analysis of properties of transactions in real-time active databases. This framework, named Real-Time ACTA, which is an extension of ACTA, can not only specify and reason about the effects of transactions on objects and the interactions between transactions, but also formalize the transaction and data timing constraints in real-time active databases to support the analysis and verification of real-time software. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Snodgrass and I. </author> <title> Ahn A taxonomy of time in databases, </title> <booktitle> In Proceedings of ACM SIGMOD International conference on Management of Data, </booktitle> <pages> pages 236-246, </pages> <address> Austin, TX, </address> <month> May </month> <year> 1985. </year>
Reference: [2] <author> Chrysanthis, P. K., and K. Ramamritham, </author> <title> Synthesis of Extended Transaction Models using ACTA, </title> <journal> ACM TODS, </journal> <year> 1994. </year>
Reference-contexts: The reliability of such software systems has been of much concern to designers and users. But there has been no work to formalize the properties of transactions in real-time active databases. In this paper, we attempt to address this lacuna. ACTA <ref> [2] </ref> is a tool to specify and reason about the effects of transactions on objects and the interactions between transactions. <p> In section 9 we give applications of the real-time ACTA. We conclude this paper in section 10. 2 Related Work A great deal of ACTA work deals with the formal description of properties of extended transaction models, such as nested transactions <ref> [2] </ref>, Sagas [3], transactions in active databases [14], and the synthesis of extended transaction models [2]. Basically, transaction models in non real-time databases are the major concern of the past work. <p> We conclude this paper in section 10. 2 Related Work A great deal of ACTA work deals with the formal description of properties of extended transaction models, such as nested transactions <ref> [2] </ref>, Sagas [3], transactions in active databases [14], and the synthesis of extended transaction models [2]. Basically, transaction models in non real-time databases are the major concern of the past work. Recently, a lot of work has been done in real-time databases which investigates transaction scheduling in real-time database systems with transaction and data timing constraints ([17], [18], [10] and [11]). <p> Inprogress (p t i [ob]) ) ((p t i [ob] 2 H ct ) ^ ((Commit [p t i [ob]] 62 H ct ) ^ (Abort [p t i [ob]] 62 H ct ))). 5 Examples of ACTA Specifications In this section, we introduce the basic building framework of ACTA <ref> [2] </ref>. We introduce the notion of visibility that refers to the ability of one transaction to see the effects of another transaction on objects while they are 5 executing.
Reference: [3] <author> Chrysanthis, P. K., and K. Ramamritham, </author> <title> ACTA: The SAGA Continues, Transaction Models for Advanced Database Application, edited by A.K. </title> <editor> Elmagarmid, </editor> <publisher> Morgan Kaufmann(1992). </publisher>
Reference-contexts: In section 9 we give applications of the real-time ACTA. We conclude this paper in section 10. 2 Related Work A great deal of ACTA work deals with the formal description of properties of extended transaction models, such as nested transactions [2], Sagas <ref> [3] </ref>, transactions in active databases [14], and the synthesis of extended transaction models [2]. Basically, transaction models in non real-time databases are the major concern of the past work.
Reference: [4] <editor> A. K. Elmagarmid, Editor, </editor> <title> Database Transaction Models for Advanced Applications, </title> <publisher> Morgan Kaffman Publishers, </publisher> <year> 1993. </year>
Reference: [5] <author> K. Ramamritham, </author> <title> Real-Time Databases, </title> <journal> International Journal of Distributed and Parallel Databases, </journal> <year> 1993. </year>
Reference-contexts: Basically, transaction models in non real-time databases are the major concern of the past work. Recently, a lot of work has been done in real-time databases which investigates transaction scheduling in real-time database systems with transaction and data timing constraints ([17], [18], [10] and [11]). Also <ref> [5] </ref> and [6] introduce the need for active models in real-time databases. One of the main components of active databases is the concept of Event-Condition-Action (ECA) rule [15] [16]. <p> For some real-time applications, it is desirable to have real-time databases that provide a data model, satisfy integrity constraints, and permit only serializable transaction executions. Such databases are said to be logically consistent <ref> [5] </ref>. Obviously, for those applications, the database has to maintain the traditionally accepted transaction correctness properties known as ACID properties (atomicity, consistency, isolation, and durability). For real-time databases in safety-critical real-time systems, the data stored in the real-time database must reflect the environment correctly and timely. <p> Assume that each data value also has a validity interval, the length of the time following the absolute valid (or transaction) time during which the value is considered valid. Real-time temporal data constraints have two components <ref> [5] </ref>: 1. Absolute data consistency states that the validity interval of the most recent value of a data item is always longer than the time interval between its absolute valid (or transaction) time and now. This indicates that the data has absolute validity. 2. Relative data consistency.
Reference: [6] <author> K. Ramamritham, </author> <title> Where Do Deadlines Come from and Where Do They Go?, invited paper, </title> <journal> Journal Of Database Management, </journal> <volume> Vol 7, No. 2, </volume> <pages> pp. 4-10, </pages> <month> Spring </month> <year> 1996. 1996. </year>
Reference-contexts: Basically, transaction models in non real-time databases are the major concern of the past work. Recently, a lot of work has been done in real-time databases which investigates transaction scheduling in real-time database systems with transaction and data timing constraints ([17], [18], [10] and [11]). Also [5] and <ref> [6] </ref> introduce the need for active models in real-time databases. One of the main components of active databases is the concept of Event-Condition-Action (ECA) rule [15] [16]. <p> Because of this, certain types of timing constraints on transactions are inherited from the events that trigger those transactions. Such timing constraints include maximum delay between two events, minimum delay between two events and durational length of an event <ref> [6] </ref>: 1. If event * 1 occurs, event * 2 must occur within time p. 8i8k ((* i j 2.
Reference: [7] <author> F. Jahanian and A. Mok, </author> <title> Safety Analysis of Timing Properties in Real-Time Systems, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> VOL. SE-12, NO. 9, </volume> <pages> Pages 890-904, </pages> <year> 1986. </year>
Reference-contexts: An action is the transaction that is executed in reaction to the specific situation which is the combination 1 of events and the conditions. Much work has also been done in the formalization of real-time systems, such as the safety analysis in <ref> [7] </ref>. A formal specification can be used to show the correctness of a particular software system. <p> To distinguish read and write operations of transactions, hereafter we use r to denote read and w to denote write. 7.1 Occurrence Function For the simplicity of description, we use an occurrence function similar to the one in <ref> [7] </ref> instead of referring to time stamp explicitly. The occurrence function, denoted by , is introduced to capture the notion of occurrence time. A particular event can happen periodically, aperiodically, or not at all.
Reference: [8] <author> A. P. Sistla and O. Wolfson, </author> <title> Temporal Conditions and Integrity Constraints in Active Database, </title> <journal> ACM SIGMOD, </journal> <volume> VOL 24, No 2, </volume> <pages> Pages 269-280, </pages> <year> 1995. </year>
Reference: [9] <author> Richard Gerber, Seongsoo Hong and Manas Saksena, </author> <title> Guaranteeing Real-Time Requirements With Resource-Based Caliberation of Periodic Processes, </title> <journal> IEEE Transactions on Software Engineering VOL 21, </journal> <volume> NO 7, </volume> <pages> Pages 579-592, </pages> <month> JULY </month> <year> 1995. </year>
Reference: [10] <author> X. Song and J.W.S. Liu, </author> <title> How Well Can Data Temporal Consistency be Maintained? IEEE Symposium on Computer-Aided Control Systems Design, </title> <year> 1992. </year>
Reference-contexts: Basically, transaction models in non real-time databases are the major concern of the past work. Recently, a lot of work has been done in real-time databases which investigates transaction scheduling in real-time database systems with transaction and data timing constraints ([17], [18], <ref> [10] </ref> and [11]). Also [5] and [6] introduce the need for active models in real-time databases. One of the main components of active databases is the concept of Event-Condition-Action (ECA) rule [15] [16].
Reference: [11] <author> X. Song, </author> <title> Data Temporal Consistency in Hard Real-Time Systems Technical Report No. </title> <address> UIUCDCS-R-92-1753, </address> <year> 1992. </year>
Reference-contexts: Basically, transaction models in non real-time databases are the major concern of the past work. Recently, a lot of work has been done in real-time databases which investigates transaction scheduling in real-time database systems with transaction and data timing constraints ([17], [18], [10] and <ref> [11] </ref>). Also [5] and [6] introduce the need for active models in real-time databases. One of the main components of active databases is the concept of Event-Condition-Action (ECA) rule [15] [16].
Reference: [12] <author> G. Ozsoyoglu and R. Snodgrass, </author> <title> Temporal and Real-Time Databases: A Survey, </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> VOL 7, NO 4, </volume> <pages> Pages 513-532, </pages> <month> AUGUST </month> <year> 1995. </year>
Reference: [13] <author> B. Purimetla, R. M. Sivasankaran, K. Ramamritham and J. A. Stankovic, </author> <title> Real-Time Databases: Issues and Applications, in Principles of Real-Time Systems, Sang Son, </title> <editor> Ed. </editor> <publisher> Prentice-Hall, </publisher> <year> 1994. </year>
Reference-contexts: Missing deadlines or using stale data may cause disastrous results in safety critical real-time applications. Examples of such applications include network services databases <ref> [13] </ref>, autopilot systems, industrial plant control and robot navigation. The reliability of such software systems has been of much concern to designers and users. But there has been no work to formalize the properties of transactions in real-time active databases. In this paper, we attempt to address this lacuna.
Reference: [14] <author> Rajendra M. Sivasankaran, </author> <title> Specification of Active Databases using ACTA Formalism, Synthesis Project Report, </title> <institution> Computer Science Dept, UMASS, </institution> <year> 1994. </year> <month> 22 </month>
Reference-contexts: In section 9 we give applications of the real-time ACTA. We conclude this paper in section 10. 2 Related Work A great deal of ACTA work deals with the formal description of properties of extended transaction models, such as nested transactions [2], Sagas [3], transactions in active databases <ref> [14] </ref>, and the synthesis of extended transaction models [2]. Basically, transaction models in non real-time databases are the major concern of the past work. <p> If the checker returns true, the corresponding action a i in the rule is executed. 11 The notion of checker, which is very important in our framework, differentiates our work in active databases from <ref> [14] </ref>. Basically, the framework of active databases in [14] is very similar to that of nested transaction model because it only specifies triggering and triggered transactions and their relationships. <p> If the checker returns true, the corresponding action a i in the rule is executed. 11 The notion of checker, which is very important in our framework, differentiates our work in active databases from <ref> [14] </ref>. Basically, the framework of active databases in [14] is very similar to that of nested transaction model because it only specifies triggering and triggered transactions and their relationships.
Reference: [15] <author> U. Dayal, et. al., </author> <title> The HIPAC Project: Combining Active Databases and Timing Constraints, </title> <booktitle> SIGMOD Record, </booktitle> <volume> 17, 1, </volume> <month> March </month> <year> 1988. </year>
Reference-contexts: Also [5] and [6] introduce the need for active models in real-time databases. One of the main components of active databases is the concept of Event-Condition-Action (ECA) rule <ref> [15] </ref> [16]. The semantics of the ECA rule is that if the specified event (E) occurs and if the condition (C) is true then the specified action (A) is to be executed. <p> Note that each relatively consistent set is associated with a interval, called relative validity interval. 9 6.2 Active Transaction Model An active database consists of two parts: one is a set of data objects, the other is a knowledge base which is composed of a set of Event-Condition-Action (ECA) rules <ref> [15] </ref> [16]. The semantics of the ECA rule is that if the specified event (E) occurs and if the condition (C) is true then the specified action (A) is to be executed (or triggered). The program that checks whether condition (C) is satisfied is called a checker for the rule.
Reference: [16] <author> U. Dayal, M. Hsu, and R. Ladin, </author> <title> Organizing Long-Running Activities with Triggers and Transactions, </title> <booktitle> ACM 1990. </booktitle>
Reference-contexts: Also [5] and [6] introduce the need for active models in real-time databases. One of the main components of active databases is the concept of Event-Condition-Action (ECA) rule [15] <ref> [16] </ref>. The semantics of the ECA rule is that if the specified event (E) occurs and if the condition (C) is true then the specified action (A) is to be executed. <p> that each relatively consistent set is associated with a interval, called relative validity interval. 9 6.2 Active Transaction Model An active database consists of two parts: one is a set of data objects, the other is a knowledge base which is composed of a set of Event-Condition-Action (ECA) rules [15] <ref> [16] </ref>. The semantics of the ECA rule is that if the specified event (E) occurs and if the condition (C) is true then the specified action (A) is to be executed (or triggered). The program that checks whether condition (C) is satisfied is called a checker for the rule.
Reference: [17] <author> Robert Abbott and Hector Garcia-Molina, </author> <title> Scheduling Real-Time Transactions: A Performance Evaluation, </title> <journal> ACM TODS 1992. </journal>
Reference: [18] <author> Jiangdong Huang, </author> <title> Real-Time Transaction Processing: Design, Implementation, and Performance Evaluation, </title> <type> Ph.D Thesis, COINS Tech. Report 91-41, </type> <year> 1992. </year>
Reference-contexts: Basically, transaction models in non real-time databases are the major concern of the past work. Recently, a lot of work has been done in real-time databases which investigates transaction scheduling in real-time database systems with transaction and data timing constraints ([17], <ref> [18] </ref>, [10] and [11]). Also [5] and [6] introduce the need for active models in real-time databases. One of the main components of active databases is the concept of Event-Condition-Action (ECA) rule [15] [16].
Reference: [19] <author> A. Mok, </author> <title> Towards Mechanization of Real-Time System Design, in Foundations Of Real-Time Computing(Formal Specifications and Methods), edited by A. </title> <editor> Tiborg et al, </editor> <year> 1991. </year> <month> 23 </month>
References-found: 19

