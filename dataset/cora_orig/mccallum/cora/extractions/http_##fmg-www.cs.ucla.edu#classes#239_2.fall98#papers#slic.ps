URL: http://fmg-www.cs.ucla.edu/classes/239_2.fall98/papers/slic.ps
Refering-URL: http://fmg-www.cs.ucla.edu/classes/239_2.fall98/weekly.html
Root-URL: http://www.cs.ucla.edu
Email: fghorm,steverod,dpetrou,teag@cs.berkeley.edu  
Title: SLIC: An Extensibility System for Commodity Operating Systems  
Author: Douglas P. Ghormley Steven H. Rodrigues David Petrou Thomas E. Anderson 
Date: February 11, 1998  
Address: Berkeley, CA 94720  
Affiliation: Computer Science Division University of California at Berkeley  
Abstract: Modern commodity operating systems are large and complex systems developed over many years by large teams of programmers, containing many hundreds of thousands of lines of code. Consequently, it is extremely difficult to add significant new functionality to these systems [15, 1, 40]. In response to this problem, a number of recent research projects have explored novel operating system architectures to support untrusted extensions; these include SPIN [7, 5], VINO [43, 39], Exokernel [19], Lipto [16], and Fluke [20]. Unfortunately, the architectures employed by these projects required substantial implementation effort and are not generally available in commodity systems. In contrast, by leveraging the technique of interposition, our extension mechanism requires only trivial operating system changes to enable a large class of trusted extensions for existing commodity operating systems such as Solaris and Linux, while retaining full compatibility with existing application binaries. By interposing trusted extensions on existing kernel interfaces, our solution enables extensions which are protected from malicious applications, enforced upon non-cooperating applications, composable with extensions from other third-party sources, and significantly easier to develop than traditional kernel modifications. We have designed and implemented a prototype extension mechanism called SLIC which utilizes interposition to efficiently insert trusted extension code into a commodity operating system kernel. We have used SLIC to implement a number of useful operating system extensions: a patch to fix a security hole described in a CERT advisory, a simple encryption file system, and a restricted execution environment for arbitrary untrusted binaries. Performance measurements of the SLIC prototype show that interposition on existing kernel interfaces can be accomplished efficiently. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Accetta, R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevanian, and M. Young. </author> <title> Mach: A New Kernel Foundation For UNIX Development. </title> <booktitle> In Proceedings of the 1986 USENIX Summer Conference, </booktitle> <pages> pages 93-112, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: Compounding these problems, the development and debugging environments for operating system kernels are considerably behind the state-of-the-art. Consequently, it is extremely difficult in practice to add significant new functionality to modern commodity operating systems <ref> [15, 1, 40] </ref>. Although modifying commodity operating systems is complex and difficult, the need to do so remains. <p> The first approach of re-engineering the operating system has been taken by a number of systems over the years which have attempted to reduce the cost of adding new operating system functionality by restructuring the operating system to be extensible. Systems built using this approach include Hydra [50], Mach <ref> [1] </ref>, SPIN [7, 5], VINO [43, 39], Exokernel [19], Lipto [16], and Fluke [20]. <p> We believe that no other system provides this powerful combination of features for extending existing commodity operating systems. Prior attempts to use interposition as an extension mechanism suffer from significant limitations. Interposition Agents [25] leverages the Mach <ref> [1] </ref> system call redirection facility to transparently insert user-level extensions at the system call interface. However, extensions require application cooperation and are run unprotected in the application's address space. Interposition Agents therefore cannot enforce security guarantees or manage shared resources for competing applications. <p> The disadvantage of this approach is that invoking the extension from the dispatcher requires costly context switches and kernel-user boundary crossings. This organization is similar to that employed by micro-kernels such as Mach <ref> [1] </ref> and /proc systems. An in-kernel extension is loaded directly into the kernel and is invoked directly from the dispatcher by a procedure call. When events are frequent, this organization has considerably better performance than the user-level approach.
Reference: [2] <author> C. Amza, Alan L. Cox, Sandhya Dwarkadas, Peter Keleher, H. Lu, R. Rajamony, Weimin Yu, and Willy Zwaenepoel. TreadMarks: </author> <title> Shared memory computing on networks of workstations. </title> <journal> IEEE Computer, </journal> <volume> 29(2) </volume> <pages> 18-28, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: Forms of interposition can be found in the `pipe' construct used in Unix shells, in the extensibility mechanisms of programming language systems [27], in distributed file systems such as NFS [38], in distributed shared memory systems such as TreadMarks <ref> [2] </ref>, in World Wide Web proxy caches [8], and in MS-DOS terminate-and-stay-resident utilities and Macintosh toolbox extensions. 3 SLIC Design and Implementation To investigate the suitability of interposition for adding new functionality to existing operating systems, we have designed and implemented SLIC, an interposition system for commodity Unix operating systems.
Reference: [3] <author> Thomas Anderson, Brian Bershad, Edward Lazowska, and Henry Levy. </author> <title> Scheduler Activations: Effective Kernel Support for the User-Level Management of Parallelism. </title> <journal> In ACM Transactions on Computer Systems, </journal> <pages> pages 53-79, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: We are also exploring the design space of useful extensions to be built with SLIC. Among these are transparent remote execution, a single system image in a network of workstations, extending the semantics of NFS to include full cache-coherency for simultaneous access [44] and supporting scheduler activations <ref> [3] </ref> through interposition on signals or directly on the scheduler. 8 Conclusion This paper has examined the utility of interposition as a mechanism for adding extensibility to production operating systems.
Reference: [4] <author> Arindam Banerji, John M. Tracey, and David L. Cohn. </author> <title> Protected Shared Libraries a new approach to modularity and sharing. </title> <booktitle> In Proceedings of the 1997 USENIX Technical Conference, </booktitle> <pages> pages 59-76, </pages> <address> Anaheim, CA, </address> <month> January </month> <year> 1997. </year>
Reference-contexts: Software Fault Isolation (SFI) [47] can be used to rewrite application binaries to protect extensions running at user level from the application; unfortunately, it is difficult to apply SFI to arbitrary application binaries without prohibitive implementation complexity. Protected Shared Libraries <ref> [4] </ref> has the same capability as SFI with less software effort, but requires specialized hardware support that is not available on most architectures. <p> COLA [29] enables interposition at the system call interface, but without any modification of the operating system kernel. It operates through interposition at the library level and consequently suffers from the same security drawbacks as the interposition technology used in [25]. Protected Shared Libraries (PSL) <ref> [4] </ref> enables extensions to be securely loaded into an application's address space, so that user programs cannot access or modify extension code 11 or data.
Reference: [5] <author> B. N. Bershad, S. Savage, E. G. Sirer P. Pardyak, M. Fiuczyn-ski, D. Becker, C. Chambers, and S. Eggers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Systems built using this approach include Hydra [50], Mach [1], SPIN <ref> [7, 5] </ref>, VINO [43, 39], Exokernel [19], Lipto [16], and Fluke [20]. While many of these systems have successfully demonstrated greatly reduced costs of adding new functionality, the cost of wholesale replacement of existing commodity operating systems prohibitive; for example, Microsoft has spent over $300M developing Windows NT [52]. <p> This enables extensions which manage shared resources, such as file systems, and extensions which enforce security guarantees. Note that SLIC assumes that extensions are trusted. Other research efforts have addressed the issues involved with supporting untrusted extensions <ref> [47, 5, 39, 31] </ref>. 3 are captured by a dispatcher and forwarded to one or more extensions. Ease of Development: During development, extension writers should be able to use state-of-the-art programming tools such as symbolic debuggers and performance analysis tools. <p> Finally, a simple method should be provided to enable dispatchers to write to the kernel code image. This is necessary to enable interposition on procedural interfaces using binary patching. 6 Related Work There has been a considerable amount of recent work <ref> [16, 43, 5, 19, 20] </ref> that has focused on building highly-extensible operating systems. Because these systems have built new operating systems kernels and new kernel structures, they have not focused on the problem of extensibility for existing systems. <p> Because these systems have built new operating systems kernels and new kernel structures, they have not focused on the problem of extensibility for existing systems. Of these systems, SPIN <ref> [5] </ref> and VINO [43, 39] are the closest in concept to our work. Both offer extensibility through interposition on a number of kernel interfaces, but have explicitly crafted those interfaces for extensibility, rather than enabling SLIC-style extensibility on existing interfaces.
Reference: [6] <author> Brian Bershad, Thomas Anderson, Edward Lazowska, and Henry Levy. </author> <title> Lightweight Remote Procedure Calls. </title> <journal> In ACM Transactions on Computer Systems, </journal> <pages> pages 37-54, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: For example, there is a large catalog of value-add functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [53], process migration [45, 15], fast communication primitives <ref> [6, 46] </ref>, upcalls [13], distributed shared memory [30], user-level pagers [51], and novel schedulers [48, 17, 32]. In addition, security flaws are routinely discovered and reported by organizations such as Carnegie-Mellon's Computer Emergency Response Team (CERT) and the Department of Energy's Computer Incident Advisory Capability (CIAC).
Reference: [7] <author> Brian N. Bershad, Craig Chambers, Susan Eggers, Chris Maeda, Dylan McNamee, Przemysaw Pardyak, Stefan Savage, and Emin G. Sirer. </author> <title> SPINAn Extensible Microkernel 12 for Application-Specific Operating System Services. </title> <type> Techni--cal report, </type> <institution> University of Washingtion, </institution> <year> 1994. </year>
Reference-contexts: Systems built using this approach include Hydra [50], Mach [1], SPIN <ref> [7, 5] </ref>, VINO [43, 39], Exokernel [19], Lipto [16], and Fluke [20]. While many of these systems have successfully demonstrated greatly reduced costs of adding new functionality, the cost of wholesale replacement of existing commodity operating systems prohibitive; for example, Microsoft has spent over $300M developing Windows NT [52].
Reference: [8] <author> C. Mic Bowman, Peter B. Danzig, Darren R. Hardy, Udi Man-ber, and Michael F. Schwartz. </author> <title> The Harvest information discovery and access system. </title> <booktitle> In Proceedings of the Second International World Wide Web Conference, </booktitle> <pages> pages 763-771, </pages> <month> Oc-tober </month> <year> 1994. </year>
Reference-contexts: Forms of interposition can be found in the `pipe' construct used in Unix shells, in the extensibility mechanisms of programming language systems [27], in distributed file systems such as NFS [38], in distributed shared memory systems such as TreadMarks [2], in World Wide Web proxy caches <ref> [8] </ref>, and in MS-DOS terminate-and-stay-resident utilities and Macintosh toolbox extensions. 3 SLIC Design and Implementation To investigate the suitability of interposition for adding new functionality to existing operating systems, we have designed and implemented SLIC, an interposition system for commodity Unix operating systems.
Reference: [9] <editor> Vulnerability in expreserve. CERT Advisory CA-96.19, CERT, </editor> <month> August </month> <year> 1996. </year>
Reference-contexts: Whenever possible, these advisories include information on how to resolve the problem reported. However, due to the lack of extensibility in existing systems, frequently this advice is to completely disable the insecure feature <ref> [10, 9, 11] </ref>. Though operating system vendors do respond to these advisories by supplying patches, those patches can take weeks to become available [12]. Since CERT does not have access to source code for many systems, they are unable to directly provide patches for these problems.
Reference: [10] <editor> Vulnerability in Solaris admintool. CERT Advisory CA-96.16, CERT, </editor> <month> August </month> <year> 1996. </year>
Reference-contexts: The prototype currently runs on Solaris 2.5.1 and a Linux 2.0 port is in progress. We have used the SLIC prototype to implement a number of extensions that would have been significantly more difficult to accomplish by other means. One extension patches a security flaw publicized by CERT <ref> [10] </ref>. A second provides a configurable restricted process execution environment, while a third demonstrates the necessary hooks for an encrypting file system. The rest of this paper is organized as follows. Section 2 provides background on interposition. <p> Whenever possible, these advisories include information on how to resolve the problem reported. However, due to the lack of extensibility in existing systems, frequently this advice is to completely disable the insecure feature <ref> [10, 9, 11] </ref>. Though operating system vendors do respond to these advisories by supplying patches, those patches can take weeks to become available [12]. Since CERT does not have access to source code for many systems, they are unable to directly provide patches for these problems. <p> However, using SLIC, many of these advisories could be accompanied by small extensions which would resolve the problem. To demonstrate this, we have implemented an extension to patch a recent security hole discovered in the Solaris admintool <ref> [10] </ref> which allowed unprivileged users to delete arbitrary files in the system in certain circumstances. Our 25 line extension monitors file operations, denying the operations which cause the problem.
Reference: [11] <editor> Vulnerability in WorkMan. CERT Advisory CA-96.23, CERT, </editor> <month> October </month> <year> 1996. </year>
Reference-contexts: Whenever possible, these advisories include information on how to resolve the problem reported. However, due to the lack of extensibility in existing systems, frequently this advice is to completely disable the insecure feature <ref> [10, 9, 11] </ref>. Though operating system vendors do respond to these advisories by supplying patches, those patches can take weeks to become available [12]. Since CERT does not have access to source code for many systems, they are unable to directly provide patches for these problems.
Reference: [12] <editor> Vulnerability in talkd. CERT Advisory CA-97.04, CERT, </editor> <month> January </month> <year> 1997. </year>
Reference-contexts: Despite the need for immediate repair to prevent wide exploitation of these flaws, the required patches can take weeks to become available <ref> [12] </ref>. The goal of this work is to significantly simplify the process of evolving and extending existing commodity operating systems by enabling a large class of extensionsin particular, extensions which can manage global resources or enforce security guarantees. <p> However, due to the lack of extensibility in existing systems, frequently this advice is to completely disable the insecure feature [10, 9, 11]. Though operating system vendors do respond to these advisories by supplying patches, those patches can take weeks to become available <ref> [12] </ref>. Since CERT does not have access to source code for many systems, they are unable to directly provide patches for these problems. However, using SLIC, many of these advisories could be accompanied by small extensions which would resolve the problem.
Reference: [13] <author> David D. Clark. </author> <title> The Structuring of Systems Using Upcalls. </title> <booktitle> In Proceedings of the 10th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 171-180, </pages> <month> December 1-4 </month> <year> 1985. </year>
Reference-contexts: For example, there is a large catalog of value-add functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [53], process migration [45, 15], fast communication primitives [6, 46], upcalls <ref> [13] </ref>, distributed shared memory [30], user-level pagers [51], and novel schedulers [48, 17, 32]. In addition, security flaws are routinely discovered and reported by organizations such as Carnegie-Mellon's Computer Emergency Response Team (CERT) and the Department of Energy's Computer Incident Advisory Capability (CIAC).
Reference: [14] <institution> Chaos Computer Club. CCC: Microsoft security alert. </institution> <address> http://berlin.ccc.de/radioactivex.html, March 1997. </address>
Reference-contexts: There are many cases, however, in which the user does not trust the program being run. For example, programs downloaded from untrusted sources such as the Internet may actually be Trojan horses designed to steal or destroy information <ref> [49, 14] </ref>. In addition, there are cases in which the user trusts the program, but not the data being processed, as in the case of helper applications used by web browsers to display various data formats.
Reference: [15] <author> Fred Douglis and John Ousterhout. </author> <title> Transparent Process Migration: Design Alternatives and the Sprite Implementation. </title> <journal> SoftwarePractice and Experience, </journal> <volume> 21(8) </volume> <pages> 757-85, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Compounding these problems, the development and debugging environments for operating system kernels are considerably behind the state-of-the-art. Consequently, it is extremely difficult in practice to add significant new functionality to modern commodity operating systems <ref> [15, 1, 40] </ref>. Although modifying commodity operating systems is complex and difficult, the need to do so remains. <p> Although modifying commodity operating systems is complex and difficult, the need to do so remains. For example, there is a large catalog of value-add functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [53], process migration <ref> [45, 15] </ref>, fast communication primitives [6, 46], upcalls [13], distributed shared memory [30], user-level pagers [51], and novel schedulers [48, 17, 32].
Reference: [16] <author> Peter Druschel, Larry L. Peterson, and Norman Hutchinson. </author> <title> Beyond Micro-Kernel Design: Decoupling Modularity and Protection in Lipto. </title> <booktitle> In Proceedings of the 12th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 512-520, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Systems built using this approach include Hydra [50], Mach [1], SPIN [7, 5], VINO [43, 39], Exokernel [19], Lipto <ref> [16] </ref>, and Fluke [20]. While many of these systems have successfully demonstrated greatly reduced costs of adding new functionality, the cost of wholesale replacement of existing commodity operating systems prohibitive; for example, Microsoft has spent over $300M developing Windows NT [52]. <p> Finally, a simple method should be provided to enable dispatchers to write to the kernel code image. This is necessary to enable interposition on procedural interfaces using binary patching. 6 Related Work There has been a considerable amount of recent work <ref> [16, 43, 5, 19, 20] </ref> that has focused on building highly-extensible operating systems. Because these systems have built new operating systems kernels and new kernel structures, they have not focused on the problem of extensibility for existing systems.
Reference: [17] <author> Andrea C. Dusseau, Remzi H. Arpaci, and David E. Culler. </author> <title> Effective Distributed Scheduling of Parallel Workloads. </title> <booktitle> In Proceedings of the 1996 ACM SIGMETRICS Conference, </booktitle> <year> 1996. </year>
Reference-contexts: For example, there is a large catalog of value-add functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [53], process migration [45, 15], fast communication primitives [6, 46], upcalls [13], distributed shared memory [30], user-level pagers [51], and novel schedulers <ref> [48, 17, 32] </ref>. In addition, security flaws are routinely discovered and reported by organizations such as Carnegie-Mellon's Computer Emergency Response Team (CERT) and the Department of Energy's Computer Incident Advisory Capability (CIAC).
Reference: [18] <author> Mark W. Eichin and Jon A. Rochlis. </author> <title> With Microscope and Tweezers: An Analysis of the Internet Virus of November 1988. </title> <booktitle> In Proceedings of the 1989 IEEE Symposium on Research in Security and Privacy, </booktitle> <year> 1989. </year>
Reference-contexts: Input data could potentially exploit bugs in helper applications to insert viruses into the system, a process similar to that used by the Internet Worm fingerd attack <ref> [18] </ref>. The tracing facility of the standard /proc file system is one method that is commonly used to construct a restricted execution environment. Potentially insecure system calls are captured and then selectively denied or altered [22]. The /proc approach suffers from a number of shortcomings.
Reference: [19] <author> D. R. Engler, M. F. Kaashoek, and Jr J. O'Toole. Exokernel: </author> <title> An Operating System Architecture for Application-Level Resource Management. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Systems built using this approach include Hydra [50], Mach [1], SPIN [7, 5], VINO [43, 39], Exokernel <ref> [19] </ref>, Lipto [16], and Fluke [20]. While many of these systems have successfully demonstrated greatly reduced costs of adding new functionality, the cost of wholesale replacement of existing commodity operating systems prohibitive; for example, Microsoft has spent over $300M developing Windows NT [52]. <p> Finally, a simple method should be provided to enable dispatchers to write to the kernel code image. This is necessary to enable interposition on procedural interfaces using binary patching. 6 Related Work There has been a considerable amount of recent work <ref> [16, 43, 5, 19, 20] </ref> that has focused on building highly-extensible operating systems. Because these systems have built new operating systems kernels and new kernel structures, they have not focused on the problem of extensibility for existing systems.
Reference: [20] <author> Bryan Ford, Mike Hibler, Jay Lepreau, Patrick Tullman, God-mar Back, and Steven Clawson. </author> <title> Microkernels Meet Recursive Virtual Machines. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Operating Systems Design and Implementation, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: Systems built using this approach include Hydra [50], Mach [1], SPIN [7, 5], VINO [43, 39], Exokernel [19], Lipto [16], and Fluke <ref> [20] </ref>. While many of these systems have successfully demonstrated greatly reduced costs of adding new functionality, the cost of wholesale replacement of existing commodity operating systems prohibitive; for example, Microsoft has spent over $300M developing Windows NT [52]. <p> Finally, a simple method should be provided to enable dispatchers to write to the kernel code image. This is necessary to enable interposition on procedural interfaces using binary patching. 6 Related Work There has been a considerable amount of recent work <ref> [16, 43, 5, 19, 20] </ref> that has focused on building highly-extensible operating systems. Because these systems have built new operating systems kernels and new kernel structures, they have not focused on the problem of extensibility for existing systems.
Reference: [21] <author> Simon Garfinkel. PGP: </author> <title> Pretty Good Privacy. </title> <publisher> O'Reilly and Associates, </publisher> <address> Sebastopol, CA, first edition, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: In a networked environment with a central file server, traditional Unix file protections can be easily circumvented by monitoring network traffic. To protect sensitive files, users may use encryption tools such as PGP <ref> [21] </ref>. However, stand-alone encryption tools and libraries can be time consuming or cumbersome to use and are not easily integrated with existing application binaries.
Reference: [22] <author> Ian Goldberg, David Wagner, Randy Thomas, and Eric Brewer. </author> <title> A Secure Environment for Untrusted Helper Applications. </title> <booktitle> In Proceedings of the Sixth USENIX Security Symposium, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: The tracing facility of the standard /proc file system is one method that is commonly used to construct a restricted execution environment. Potentially insecure system calls are captured and then selectively denied or altered <ref> [22] </ref>. The /proc approach suffers from a number of shortcomings. First, the Solaris /proc file system (as of version 2.5.1) only allows system calls to be denied with EINTR as the error code, a code normally used to indicate that the attempted operation was interrupted and should be retried. <p> This is especially problematic for system-call intensive applications. Using SLIC we have implemented a restricted execution environment extension that does not have these limitations. This extension is a modified version of the Janus system <ref> [22] </ref> and provides the user with a configurable security environment. For example, applications can be given a subset of read/write/execute access to any number of directory subtrees. The ability to fork () can be disabled.
Reference: [23] <author> J. Howard, M. Kazar, S. Menees, D. Nichols, M. Satya-narayanan, R. Sidebotham, and M. West. </author> <title> Scale and performance in a distributed file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-81, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: as checking the path or file access permissions (for example rmdir ()), for 21 additional system 2 Xnest is part of the standard X11R6 distribution. 8 calls. 4.4 Performance To evaluate the impact of these extensions on system performance, we ran the extensions under three benchmarks: the Modified Andrew Benchmark <ref> [23, 33] </ref>, a T E X compilation of a 262-page (760KB) document, and a gcc compilation of emacs-19.34 without support for X Windows.
Reference: [24] <author> Wilson Hsieh, Marc Fiuczynski, Charles Garrett, Stefan Savage, David Becker, and Brian N. Bershad. </author> <title> Language support for extensible operating systems. </title> <booktitle> In Proceedings of the Workshop on Compiler Support for System Software, </booktitle> <month> Febru-ary </month> <year> 1996. </year>
Reference-contexts: There are a number of limitations to this approach: the kernel is not protected from malicious or faulty extension code and there is no support for user-level development tools. A number of methods of protecting the kernel from extensions have been explored by others <ref> [34, 24, 41, 39, 31] </ref>. By supplying extensions with the same interface, whether at the user level or in the kernel, extensions can be safely developed at the user level and then inserted into the kernel. This enables development in a safe environment without sacrificing the potential for good performance. <p> Both offer extensibility through interposition on a number of kernel interfaces, but have explicitly crafted those interfaces for extensibility, rather than enabling SLIC-style extensibility on existing interfaces. SPIN and VINO also aggressively focus on ensuring kernel protection from untrusted extensions, SPIN by using a type-safe language <ref> [42, 24] </ref>, and VINO through software fault isolation [47] and in-kernel transactions [39]. SLIC assumes trusted extensions. Interposition Agents [25] demonstrated that it is useful to construct interposition extensions in terms of the high-level abstractions of the interposed interface, rather than in terms of the low-level events crossing that interface.
Reference: [25] <author> Michael B. Jones. </author> <title> Interposition Agents: Transparently Interposing User Code at the System Interface. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 80-93, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: We believe that no other system provides this powerful combination of features for extending existing commodity operating systems. Prior attempts to use interposition as an extension mechanism suffer from significant limitations. Interposition Agents <ref> [25] </ref> leverages the Mach [1] system call redirection facility to transparently insert user-level extensions at the system call interface. However, extensions require application cooperation and are run unprotected in the application's address space. Interposition Agents therefore cannot enforce security guarantees or manage shared resources for competing applications. <p> SPIN and VINO also aggressively focus on ensuring kernel protection from untrusted extensions, SPIN by using a type-safe language [42, 24], and VINO through software fault isolation [47] and in-kernel transactions [39]. SLIC assumes trusted extensions. Interposition Agents <ref> [25] </ref> demonstrated that it is useful to construct interposition extensions in terms of the high-level abstractions of the interposed interface, rather than in terms of the low-level events crossing that interface. The interposition technology used in [25] was the standard Mach system call redirection facility which bounces system calls to extensions <p> SLIC assumes trusted extensions. Interposition Agents <ref> [25] </ref> demonstrated that it is useful to construct interposition extensions in terms of the high-level abstractions of the interposed interface, rather than in terms of the low-level events crossing that interface. The interposition technology used in [25] was the standard Mach system call redirection facility which bounces system calls to extensions linked into an application's address space. This mechanism has two disadvantages relative to SLIC. First, extensions are not protected from applications and thus cannot implement security extensions or share data between distrustful applications. <p> Second, the multiple protection boundary crossings limit the performance of the system. Our interposition technology enables high-performance interposition that is both enforced upon, and protected from applications, enabling a significantly larger class of extensions. In principle, the toolkit presented in <ref> [25] </ref> could ported to our interposition platform and could further simplify the process of extension development. COLA [29] enables interposition at the system call interface, but without any modification of the operating system kernel. <p> COLA [29] enables interposition at the system call interface, but without any modification of the operating system kernel. It operates through interposition at the library level and consequently suffers from the same security drawbacks as the interposition technology used in <ref> [25] </ref>. Protected Shared Libraries (PSL) [4] enables extensions to be securely loaded into an application's address space, so that user programs cannot access or modify extension code 11 or data.
Reference: [26] <author> Yousef Khalidi and Michael Nelson. </author> <title> Extensible File Systems in Spring. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 1-14, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Second, new functionality can only be implemented in terms of existing functionality. This can limit extension functionality; for example, a cache-coherent file system can only be constructed through interposition if underlying layers expose a cache management mechanism in the file system interface <ref> [26] </ref>. Despite these limitations, the power and flexibility of interposition has led to its wide-spread use throughout modern computing systems.
Reference: [27] <author> Gregor Kiczales, Jim des Rivieres, and Daniel G. Bobrow. </author> <title> The Art of the Metaobject Protocol. </title> <publisher> The MIT Press, </publisher> <address> Cam-bridge, MA, </address> <year> 1991. </year>
Reference-contexts: Despite these limitations, the power and flexibility of interposition has led to its wide-spread use throughout modern computing systems. Forms of interposition can be found in the `pipe' construct used in Unix shells, in the extensibility mechanisms of programming language systems <ref> [27] </ref>, in distributed file systems such as NFS [38], in distributed shared memory systems such as TreadMarks [2], in World Wide Web proxy caches [8], and in MS-DOS terminate-and-stay-resident utilities and Macintosh toolbox extensions. 3 SLIC Design and Implementation To investigate the suitability of interposition for adding new functionality to existing
Reference: [28] <author> Steven R. Kleiman. Vnodes: </author> <title> An architecture for multiple file system types in Sun UNIX. </title> <booktitle> In Proceedings of the 1986 Summer USENIX Technical Conference, </booktitle> <pages> pages 238-247, </pages> <address> Atlanta, GA, </address> <year> 1986. </year> <institution> Sun Microsystems. </institution>
Reference-contexts: A small number of projects have taken the second approach of re-engineering certain kernel interfaces to reduce the complexity of adding new functionality at those interfaces. The vnode interface <ref> [28, 37] </ref> is a prime example of this approach. However, applying this technique to make existing commodity operating systems more extensible would require substantially modifying and exposing all interfaces where additional functionality is desired, effectively re-engineering the majority of the operating system.
Reference: [29] <author> Eduardo Krell and Balachander Krishnamurthy. COLA: </author> <title> Customized overlaying. </title> <booktitle> In Proceedings of the Winter 1992 USENIX Technical Conference, </booktitle> <address> San Francisco, CA, </address> <month> January </month> <year> 1992. </year> <institution> AT&T Bell Laboratories, USENIX Association. </institution>
Reference-contexts: Our interposition technology enables high-performance interposition that is both enforced upon, and protected from applications, enabling a significantly larger class of extensions. In principle, the toolkit presented in [25] could ported to our interposition platform and could further simplify the process of extension development. COLA <ref> [29] </ref> enables interposition at the system call interface, but without any modification of the operating system kernel. It operates through interposition at the library level and consequently suffers from the same security drawbacks as the interposition technology used in [25].
Reference: [30] <author> Kai Li and Paul Hudak. </author> <title> Memory Coherence in Shared Virtual Memory Systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(4) </volume> <pages> 321-359, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: For example, there is a large catalog of value-add functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [53], process migration [45, 15], fast communication primitives [6, 46], upcalls [13], distributed shared memory <ref> [30] </ref>, user-level pagers [51], and novel schedulers [48, 17, 32]. In addition, security flaws are routinely discovered and reported by organizations such as Carnegie-Mellon's Computer Emergency Response Team (CERT) and the Department of Energy's Computer Incident Advisory Capability (CIAC).
Reference: [31] <author> George C. Necula and Peter Lee. </author> <title> Safe Kernel Extensions Without Run-Time Checking. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 229-243, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: This enables extensions which manage shared resources, such as file systems, and extensions which enforce security guarantees. Note that SLIC assumes that extensions are trusted. Other research efforts have addressed the issues involved with supporting untrusted extensions <ref> [47, 5, 39, 31] </ref>. 3 are captured by a dispatcher and forwarded to one or more extensions. Ease of Development: During development, extension writers should be able to use state-of-the-art programming tools such as symbolic debuggers and performance analysis tools. <p> There are a number of limitations to this approach: the kernel is not protected from malicious or faulty extension code and there is no support for user-level development tools. A number of methods of protecting the kernel from extensions have been explored by others <ref> [34, 24, 41, 39, 31] </ref>. By supplying extensions with the same interface, whether at the user level or in the kernel, extensions can be safely developed at the user level and then inserted into the kernel. This enables development in a safe environment without sacrificing the potential for good performance.
Reference: [32] <author> Jason Nieh and Monica S. Lam. </author> <title> The Design, Implementation and Evaluation of SMART: A Scheduler for Multimedia Applications. </title> <booktitle> In Proceedings of the 16th ACM Symposium on Operating Systems Principles, </booktitle> <month> October </month> <year> 1997. </year>
Reference-contexts: For example, there is a large catalog of value-add functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [53], process migration [45, 15], fast communication primitives [6, 46], upcalls [13], distributed shared memory [30], user-level pagers [51], and novel schedulers <ref> [48, 17, 32] </ref>. In addition, security flaws are routinely discovered and reported by organizations such as Carnegie-Mellon's Computer Emergency Response Team (CERT) and the Department of Energy's Computer Incident Advisory Capability (CIAC).
Reference: [33] <author> John Ousterhout. </author> <booktitle> Why Aren't Operating Systems Getting Faster As Fast As Hardware? In Proceedings of the 1990 Summer USENIX Conference, </booktitle> <pages> pages 247-256, </pages> <address> Anaheim, CA, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: as checking the path or file access permissions (for example rmdir ()), for 21 additional system 2 Xnest is part of the standard X11R6 distribution. 8 calls. 4.4 Performance To evaluate the impact of these extensions on system performance, we ran the extensions under three benchmarks: the Modified Andrew Benchmark <ref> [23, 33] </ref>, a T E X compilation of a 262-page (760KB) document, and a gcc compilation of emacs-19.34 without support for X Windows.
Reference: [34] <author> Przemysaw Pardyak and Brian N. Bershad. </author> <title> Dynamic binding in an extensible system. </title> <booktitle> In Proceedings of the Second Symposium on Operating Systems Design and Implementation (OSDI '96), </booktitle> <pages> pages 201-212, </pages> <address> Seattle, WA, </address> <month> October </month> <year> 1996. </year> <institution> University of Washington, USENIX Association. </institution>
Reference-contexts: There are a number of limitations to this approach: the kernel is not protected from malicious or faulty extension code and there is no support for user-level development tools. A number of methods of protecting the kernel from extensions have been explored by others <ref> [34, 24, 41, 39, 31] </ref>. By supplying extensions with the same interface, whether at the user level or in the kernel, extensions can be safely developed at the user level and then inserted into the kernel. This enables development in a safe environment without sacrificing the potential for good performance.
Reference: [35] <institution> Pure Software, Inc. </institution> <note> Purify User's Guide, </note> <year> 1996. </year>
Reference-contexts: Executing extension code as a user-level server enables development to proceed just like standard user applications, with access to user-level libraries (e.g., communication libraries) and state-of-the-art development tools (e.g., symbolic debuggers and performance analysis tools such as Purify <ref> [35] </ref> and Quantify [36]). The extension is protected against modification by user programs by virtue of running in a separate address space and is enforced on system applications by the dispatcher.
Reference: [36] <institution> Pure Software, Inc. </institution> <note> Quantify User's Guide, </note> <year> 1996. </year>
Reference-contexts: Executing extension code as a user-level server enables development to proceed just like standard user applications, with access to user-level libraries (e.g., communication libraries) and state-of-the-art development tools (e.g., symbolic debuggers and performance analysis tools such as Purify [35] and Quantify <ref> [36] </ref>). The extension is protected against modification by user programs by virtue of running in a separate address space and is enforced on system applications by the dispatcher. The disadvantage of this approach is that invoking the extension from the dispatcher requires costly context switches and kernel-user boundary crossings.
Reference: [37] <author> David S. H. Rosenthal. </author> <title> Evolving the vnode interface. </title> <booktitle> In Proceedings of the 1990 Summer USENIX Technical Conference, </booktitle> <pages> pages 107-117, </pages> <address> Anaheim, CA, </address> <month> June </month> <year> 1990. </year> <institution> Sun Microsystems. </institution>
Reference-contexts: A small number of projects have taken the second approach of re-engineering certain kernel interfaces to reduce the complexity of adding new functionality at those interfaces. The vnode interface <ref> [28, 37] </ref> is a prime example of this approach. However, applying this technique to make existing commodity operating systems more extensible would require substantially modifying and exposing all interfaces where additional functionality is desired, effectively re-engineering the majority of the operating system.
Reference: [38] <author> R. Sandberg, D. Goldberg, Steven Kleiman, D. Walsh, and B. Lyon. </author> <title> Design and implementation of the Sun network 13 filesystem. </title> <booktitle> In Proceedingsof the Summer 1985 USENIX Tech--nical Conference, </booktitle> <pages> pages 119-130, </pages> <address> Dallas, TX, </address> <month> June </month> <year> 1985. </year> <institution> Sun Microsystems. </institution>
Reference-contexts: Despite these limitations, the power and flexibility of interposition has led to its wide-spread use throughout modern computing systems. Forms of interposition can be found in the `pipe' construct used in Unix shells, in the extensibility mechanisms of programming language systems [27], in distributed file systems such as NFS <ref> [38] </ref>, in distributed shared memory systems such as TreadMarks [2], in World Wide Web proxy caches [8], and in MS-DOS terminate-and-stay-resident utilities and Macintosh toolbox extensions. 3 SLIC Design and Implementation To investigate the suitability of interposition for adding new functionality to existing operating systems, we have designed and implemented SLIC,
Reference: [39] <author> Margo I. Seltzer, Yasuhiro Endo, Christoper Small, and Keith A. Smith. </author> <title> Dealing With Disaster: Surviving Misbehaved Kernel Extensions. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Operating Systems Design and Implementation, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: Systems built using this approach include Hydra [50], Mach [1], SPIN [7, 5], VINO <ref> [43, 39] </ref>, Exokernel [19], Lipto [16], and Fluke [20]. While many of these systems have successfully demonstrated greatly reduced costs of adding new functionality, the cost of wholesale replacement of existing commodity operating systems prohibitive; for example, Microsoft has spent over $300M developing Windows NT [52]. <p> This enables extensions which manage shared resources, such as file systems, and extensions which enforce security guarantees. Note that SLIC assumes that extensions are trusted. Other research efforts have addressed the issues involved with supporting untrusted extensions <ref> [47, 5, 39, 31] </ref>. 3 are captured by a dispatcher and forwarded to one or more extensions. Ease of Development: During development, extension writers should be able to use state-of-the-art programming tools such as symbolic debuggers and performance analysis tools. <p> There are a number of limitations to this approach: the kernel is not protected from malicious or faulty extension code and there is no support for user-level development tools. A number of methods of protecting the kernel from extensions have been explored by others <ref> [34, 24, 41, 39, 31] </ref>. By supplying extensions with the same interface, whether at the user level or in the kernel, extensions can be safely developed at the user level and then inserted into the kernel. This enables development in a safe environment without sacrificing the potential for good performance. <p> We have implemented a simple extension to demonstrate the feasibility of file system encryption using SLIC. This extension implements a trivial exclusive-or encryption algorithm similar to that used to test VINO <ref> [39] </ref>. The extension watches for open () and creat () system calls of files with a particular suffix and then records the process id and the file descriptor returned to the application. <p> Because these systems have built new operating systems kernels and new kernel structures, they have not focused on the problem of extensibility for existing systems. Of these systems, SPIN [5] and VINO <ref> [43, 39] </ref> are the closest in concept to our work. Both offer extensibility through interposition on a number of kernel interfaces, but have explicitly crafted those interfaces for extensibility, rather than enabling SLIC-style extensibility on existing interfaces. <p> SPIN and VINO also aggressively focus on ensuring kernel protection from untrusted extensions, SPIN by using a type-safe language [42, 24], and VINO through software fault isolation [47] and in-kernel transactions <ref> [39] </ref>. SLIC assumes trusted extensions. Interposition Agents [25] demonstrated that it is useful to construct interposition extensions in terms of the high-level abstractions of the interposed interface, rather than in terms of the low-level events crossing that interface.
Reference: [40] <author> Margo I. Seltzer, Yasuhiro Endo, Christopher Small, and Keith A. Smith. </author> <title> Issues in extensible operating systems. </title> <note> Publication pending from IEEE Press, 1997. Available from http://www.eecs.harvard.edu/ ~vino/vino/papers/acm-96.ps. </note>
Reference-contexts: Compounding these problems, the development and debugging environments for operating system kernels are considerably behind the state-of-the-art. Consequently, it is extremely difficult in practice to add significant new functionality to modern commodity operating systems <ref> [15, 1, 40] </ref>. Although modifying commodity operating systems is complex and difficult, the need to do so remains.
Reference: [41] <author> Emin Gun Sirer, Marc Fiuczynski, Przemysaw Pardyak, and Brian N. Bershad. </author> <title> Safe dynamic linking in an extensible operating system. </title> <booktitle> In Proceedings of the Workshop on Compiler Support for System Software. </booktitle> <institution> University of Washington, </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: There are a number of limitations to this approach: the kernel is not protected from malicious or faulty extension code and there is no support for user-level development tools. A number of methods of protecting the kernel from extensions have been explored by others <ref> [34, 24, 41, 39, 31] </ref>. By supplying extensions with the same interface, whether at the user level or in the kernel, extensions can be safely developed at the user level and then inserted into the kernel. This enables development in a safe environment without sacrificing the potential for good performance.
Reference: [42] <author> Emin Gun Sirer, Stefan Savage, Przemysaw Pardyak, Greg DeFouw, Mary Ann Alapat, and Brian N. Bershad. </author> <title> Writing an operating system using Modula-3. </title> <booktitle> In Proceedings of the Workshop on Compiler Support for System Software. </booktitle> <institution> University of Washington, </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: Both offer extensibility through interposition on a number of kernel interfaces, but have explicitly crafted those interfaces for extensibility, rather than enabling SLIC-style extensibility on existing interfaces. SPIN and VINO also aggressively focus on ensuring kernel protection from untrusted extensions, SPIN by using a type-safe language <ref> [42, 24] </ref>, and VINO through software fault isolation [47] and in-kernel transactions [39]. SLIC assumes trusted extensions. Interposition Agents [25] demonstrated that it is useful to construct interposition extensions in terms of the high-level abstractions of the interposed interface, rather than in terms of the low-level events crossing that interface.
Reference: [43] <author> Christopher Small and Margo Seltzer. VINO: </author> <title> An Integrated Platform for Operating System and Database Research. </title> <type> Technical Report TR-30-94, </type> <institution> Harvard, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: Systems built using this approach include Hydra [50], Mach [1], SPIN [7, 5], VINO <ref> [43, 39] </ref>, Exokernel [19], Lipto [16], and Fluke [20]. While many of these systems have successfully demonstrated greatly reduced costs of adding new functionality, the cost of wholesale replacement of existing commodity operating systems prohibitive; for example, Microsoft has spent over $300M developing Windows NT [52]. <p> Finally, a simple method should be provided to enable dispatchers to write to the kernel code image. This is necessary to enable interposition on procedural interfaces using binary patching. 6 Related Work There has been a considerable amount of recent work <ref> [16, 43, 5, 19, 20] </ref> that has focused on building highly-extensible operating systems. Because these systems have built new operating systems kernels and new kernel structures, they have not focused on the problem of extensibility for existing systems. <p> Because these systems have built new operating systems kernels and new kernel structures, they have not focused on the problem of extensibility for existing systems. Of these systems, SPIN [5] and VINO <ref> [43, 39] </ref> are the closest in concept to our work. Both offer extensibility through interposition on a number of kernel interfaces, but have explicitly crafted those interfaces for extensibility, rather than enabling SLIC-style extensibility on existing interfaces.
Reference: [44] <author> V. Srinivasan and Jeffrey C. Mogul. Spritely NFS: </author> <title> Experiments with cache-consistency protocols. </title> <booktitle> In Proceedings of the 12th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 45-57, </pages> <address> Litchfield Park, AZ, </address> <month> December </month> <year> 1989. </year> <note> ACM. </note>
Reference-contexts: We are also exploring the design space of useful extensions to be built with SLIC. Among these are transparent remote execution, a single system image in a network of workstations, extending the semantics of NFS to include full cache-coherency for simultaneous access <ref> [44] </ref> and supporting scheduler activations [3] through interposition on signals or directly on the scheduler. 8 Conclusion This paper has examined the utility of interposition as a mechanism for adding extensibility to production operating systems.
Reference: [45] <author> Marvin Theimer, K. Landtz, and David Cheriton. </author> <title> Preempt-able Remote Execution Facilities for the V System. </title> <booktitle> In Proceedings of the 10th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 2-12, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: Although modifying commodity operating systems is complex and difficult, the need to do so remains. For example, there is a large catalog of value-add functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [53], process migration <ref> [45, 15] </ref>, fast communication primitives [6, 46], upcalls [13], distributed shared memory [30], user-level pagers [51], and novel schedulers [48, 17, 32].
Reference: [46] <author> Thorsten von Eicken, David E. Culler, Steh C. Goldstein, and Klaus Erik Schauser. </author> <title> Active Messages: a Mechanism for Integrated Communication and Computation. </title> <booktitle> In Proc. of the 19th Int'l Symposium on Computer Architecture, </booktitle> <month> May </month> <year> 1992. </year>
Reference-contexts: For example, there is a large catalog of value-add functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [53], process migration [45, 15], fast communication primitives <ref> [6, 46] </ref>, upcalls [13], distributed shared memory [30], user-level pagers [51], and novel schedulers [48, 17, 32]. In addition, security flaws are routinely discovered and reported by organizations such as Carnegie-Mellon's Computer Emergency Response Team (CERT) and the Department of Energy's Computer Incident Advisory Capability (CIAC).
Reference: [47] <author> Robert Wahbe, Steven Lucco, Thomas Anderson, and Susan Graham. </author> <title> Efficient Software-Based Fault Isolation. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 203-216, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: However, extensions require application cooperation and are run unprotected in the application's address space. Interposition Agents therefore cannot enforce security guarantees or manage shared resources for competing applications. Software Fault Isolation (SFI) <ref> [47] </ref> can be used to rewrite application binaries to protect extensions running at user level from the application; unfortunately, it is difficult to apply SFI to arbitrary application binaries without prohibitive implementation complexity. <p> This enables extensions which manage shared resources, such as file systems, and extensions which enforce security guarantees. Note that SLIC assumes that extensions are trusted. Other research efforts have addressed the issues involved with supporting untrusted extensions <ref> [47, 5, 39, 31] </ref>. 3 are captured by a dispatcher and forwarded to one or more extensions. Ease of Development: During development, extension writers should be able to use state-of-the-art programming tools such as symbolic debuggers and performance analysis tools. <p> SPIN and VINO also aggressively focus on ensuring kernel protection from untrusted extensions, SPIN by using a type-safe language [42, 24], and VINO through software fault isolation <ref> [47] </ref> and in-kernel transactions [39]. SLIC assumes trusted extensions. Interposition Agents [25] demonstrated that it is useful to construct interposition extensions in terms of the high-level abstractions of the interposed interface, rather than in terms of the low-level events crossing that interface.
Reference: [48] <author> Carl A. Waldspurger and William E. Weihl. </author> <title> Lottery Scheduling: Flexible Proportional-Share Resource Management. </title> <booktitle> In Proceedings of the 1st USENIX Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 1-11, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: For example, there is a large catalog of value-add functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [53], process migration [45, 15], fast communication primitives [6, 46], upcalls [13], distributed shared memory [30], user-level pagers [51], and novel schedulers <ref> [48, 17, 32] </ref>. In addition, security flaws are routinely discovered and reported by organizations such as Carnegie-Mellon's Computer Emergency Response Team (CERT) and the Department of Energy's Computer Incident Advisory Capability (CIAC).
Reference: [49] <author> Nick Wingfield. </author> <title> ActiveX used as hacking tool. </title> <address> http://www.news.com/ News/Item/ 0%2C4%2C7761%2C00.html, </address> <month> February </month> <year> 1997. </year>
Reference-contexts: There are many cases, however, in which the user does not trust the program being run. For example, programs downloaded from untrusted sources such as the Internet may actually be Trojan horses designed to steal or destroy information <ref> [49, 14] </ref>. In addition, there are cases in which the user trusts the program, but not the data being processed, as in the case of helper applications used by web browsers to display various data formats.
Reference: [50] <author> W. Wulf, E. Cohen, W. Corwin, A. Jones, R. Levin, C. Pier-son, and F. Pollack. HYDRA: </author> <title> The Kernel of a Multiprocessor Operating System. </title> <journal> Communications of the ACM, </journal> <volume> 17(6) </volume> <pages> 337-344, </pages> <month> June </month> <year> 1974. </year>
Reference-contexts: The first approach of re-engineering the operating system has been taken by a number of systems over the years which have attempted to reduce the cost of adding new operating system functionality by restructuring the operating system to be extensible. Systems built using this approach include Hydra <ref> [50] </ref>, Mach [1], SPIN [7, 5], VINO [43, 39], Exokernel [19], Lipto [16], and Fluke [20].
Reference: [51] <author> M. Young, A. Tevanian, R. Rashid, D. Golub, J. Eppinger, J. Chew, W. Bolosky, D. Black, and R. Baron. </author> <title> The Duality of Memory and Communication in the Implementation of a Multiprocessor Operating System. </title> <booktitle> In Proceedings of the 11th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 63-76, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: For example, there is a large catalog of value-add functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [53], process migration [45, 15], fast communication primitives [6, 46], upcalls [13], distributed shared memory [30], user-level pagers <ref> [51] </ref>, and novel schedulers [48, 17, 32]. In addition, security flaws are routinely discovered and reported by organizations such as Carnegie-Mellon's Computer Emergency Response Team (CERT) and the Department of Energy's Computer Incident Advisory Capability (CIAC).
Reference: [52] <author> G. Pascal Zachary. </author> <title> Showstopper! The Breakneck Race to Create Windows NT and the Next Generation at Microsoft. </title> <publisher> Macmillan, Inc., </publisher> <year> 1994. </year>
Reference-contexts: While many of these systems have successfully demonstrated greatly reduced costs of adding new functionality, the cost of wholesale replacement of existing commodity operating systems prohibitive; for example, Microsoft has spent over $300M developing Windows NT <ref> [52] </ref>. Consequently, for the foreseeable future, it is unlikely that existing commodity operating systems will be re-engineered for extensibility in this manner. A small number of projects have taken the second approach of re-engineering certain kernel interfaces to reduce the complexity of adding new functionality at those interfaces.
Reference: [53] <author> Sognian Zhou, Jingwen Wang, Xiaohn Zheng, and Pierre Delisle. </author> <title> Utopia: A Load Sharing Facility for Large, Heterogeneous Distributed Computing Systems. </title> <type> Technical Report CSRI-257, </type> <institution> University of Toronto, </institution> <year> 1992. </year> <month> 14 </month>
Reference-contexts: Although modifying commodity operating systems is complex and difficult, the need to do so remains. For example, there is a large catalog of value-add functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing <ref> [53] </ref>, process migration [45, 15], fast communication primitives [6, 46], upcalls [13], distributed shared memory [30], user-level pagers [51], and novel schedulers [48, 17, 32].
References-found: 53

