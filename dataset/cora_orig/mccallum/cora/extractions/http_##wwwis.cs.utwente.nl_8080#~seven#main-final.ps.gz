URL: http://wwwis.cs.utwente.nl:8080/~seven/main-final.ps.gz
Refering-URL: http://wwwis.cs.utwente.nl:8080/~seven/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: neuholdg@darmstadt.gmd.de  fseven, faase, apersg@cs.utwente.nl  ojpg@hemuli.tte.vtt.fi  
Title: Transaction Support for Cooperative Work: An Overview of the TRANSCOOP Project TRANSCOOP transaction model and
Author: Karl Aberer, Justus Klingemann, Thomas Tesch, Jurgen Wasch, Erich Neuhold faberer, klingem, tesch, waesch, Susan Even, Frans Faase, Peter Apers Hannu Kaijanranta, Aarno Lehtola, Olli Pihlajamaa 
Note: fhka, all,  The  
Address: Dolivostrae 15, D-64293 Darmstadt, Germany  P.O. Box 217, 7500 AE Enschede, The Netherlands  P.O. Box 1201, FIN-02044 VTT, Finland  
Affiliation: GMD German National Research Center for Information Technology  Department of Computer Science, University of Twente  VTT Information Technology  
Abstract: Cooperative work on shared information requires different kinds of computing system support to coordinate the work of multiple users, to establish mutual awareness among users, and to ensure the consistency of user results. These issues are currently tackled separately in various loosely related areas, such as workflow systems, groupware, and advanced transactional models. In the TRANSCOOP project, we have developed a transaction model and a specification language that provide a core functionality for information sharing in cooperative systems. The core functionality includes explicit work coordination facilities, which at the same time ensure the consistency of results. fl This document gives an overview of the work done in the ESPRIT III BRA project TRANSCOOP (EP8012); it has been prepared for distribution at the TRANSCOOP Workshop on Extending Data Management for Cooperative Work, held in Darmstadt, on June 6, 1997. This document is based on [AKT + 96]. The TRANSCOOP project has been partially funded by the Commission of the European Communities. The partners in the project are GMD (Germany), University of Twente (The Netherlands), and VTT (Finland). ated for a cooperative document authoring application.
Abstract-found: 1
Intro-found: 1
Reference: [AKT + 96] <author> K. Aberer, J. Klingemann, T. Tesch, J. Wasch, and E. J. Neuhold. </author> <title> Transactional Models Supporting Cooperative work The TRANSCOOP Experiences. </title> <booktitle> In Proceedings of the International Symposium on Cooperative Database Systems for Advanced Applications (CODAS), </booktitle> <pages> pages 467476, </pages> <month> December </month> <year> 1996. </year> <title> Kyoto, </title> <address> Japan. </address>
Reference: [ARSS93] <author> P. C. Attie, M. Rusinkiewicz, A. Sheth, and M. P. Singh. </author> <title> Specifying and enforcing intertask dependencies. </title> <booktitle> In Proc. of the 19th Int. Conference on Very Large Databases, </booktitle> <pages> pages 134145, </pages> <address> Dublin, Ire-land, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Transactional workflow approaches [RS95] usually include specification languages to express various execution constraints for a set of tasks. This can be done either by supporting a script language (as in the ConTract model [WR92]), by a declarative specification of the execution structure in terms of externally visible execution states <ref> [ARSS93] </ref>, or by ECA rules [DHL90]. Cooperation is characterised in these models by passing results between workflow tasks in a predefined manner. 3 The TRANSCOOP Model As described in Section 2, cooperative work has several dimensions, and the requirements for a cooperative system largely vary depending on the application.
Reference: [BB89] <author> T. Bolognesi and E. Brinksma. </author> <title> Introduction to the ISO specification language LOTOS. Computer Networks and ISDN Systems, </title> <address> 14:2559, </address> <year> 1989. </year>
Reference-contexts: The specification language is designed on top of the formal specification language LOTOS/TM [dBEV95, EFdB96], which in turn is based on the specification language LOTOS <ref> [BB89] </ref>, and the TM database specification language and design tools, developed at the University of Twente [FB96, BBdB + 96, vKSA + 95, FvKS94, BdBZ93]. Within the TRANSCOOP project, the COACT transaction model has been implemented as an extension of the object-oriented database management system VO-DAK [GI95] (developed at GMD-IPSI).
Reference: [BBdB + 96] <author> Rene Bal, Herman Balsters, Rolf A. de By, Alexander Bosschaart, Jan Flokstra, Maurice van Keulen, Jacek Skowronek, and Bart Termorshuizen. </author> <title> The TM Manual, version 2.0, revision f. </title> <type> Technical Report IMPRESS/UT-TECH-T79-001-R2, </type> <institution> Univer-siteit Twente, </institution> <address> The Netherlands, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: The specification language is designed on top of the formal specification language LOTOS/TM [dBEV95, EFdB96], which in turn is based on the specification language LOTOS [BB89], and the TM database specification language and design tools, developed at the University of Twente <ref> [FB96, BBdB + 96, vKSA + 95, FvKS94, BdBZ93] </ref>. Within the TRANSCOOP project, the COACT transaction model has been implemented as an extension of the object-oriented database management system VO-DAK [GI95] (developed at GMD-IPSI). <p> Facilities to define data operations, data exchange operations, and the forward and backward commutativity relations required by the COACT transaction model are available in the COCOA specification language for cooperative scenarios [FEdB96, FEdBA97]. COCOA extends the object-oriented database schema specification language TM <ref> [BBdB + 96] </ref>.
Reference: [BC91] <author> K.P. Birman and R. Cooper. </author> <title> The ISIS project: Real experience with a fault-tolerant programming system. </title> <journal> ACM Operating System Review, </journal> <volume> 21(2):103 107, </volume> <year> 1991. </year>
Reference-contexts: Other approaches in the CSCW area (e.g., [EG89]) are only applicable to real-time groupware systems, such as shared whiteboards and synchronous group editors. Most of these systems are based on replication of data and use multicast protocols like ISIS <ref> [BC91, BSS91] </ref> for synchronisation purposes. Real-time groupware systems do not address the issues of persistency of data and recovery to ensure fault-tolerant processing. Workflow systems. Workflow management is gaining popularity, although the current generation of work-flow management systems (WFMS) has several limitations [GHS95, JLP + 95].
Reference: [BdBZ93] <author> H. Balsters, R. A. de By, and R. Zicari. </author> <title> Typed sets as a basis for object-oriented database schemas. </title> <editor> In Oscar M. Nierstrasz, editor, </editor> <booktitle> Proceedings of the Seventh European Conference on Object-Oriented Programming, volume 707 of LNCS, </booktitle> <pages> pages 161 184, </pages> <address> Kaiserslautern, Germany, 1993. </address> <publisher> Springer. </publisher>
Reference-contexts: The specification language is designed on top of the formal specification language LOTOS/TM [dBEV95, EFdB96], which in turn is based on the specification language LOTOS [BB89], and the TM database specification language and design tools, developed at the University of Twente <ref> [FB96, BBdB + 96, vKSA + 95, FvKS94, BdBZ93] </ref>. Within the TRANSCOOP project, the COACT transaction model has been implemented as an extension of the object-oriented database management system VO-DAK [GI95] (developed at GMD-IPSI).
Reference: [BKK85] <author> F. Bancilhon, W. Kim, and H. Korth. </author> <title> A model of CAD transactions. </title> <booktitle> In Proc. of the 11th Int. Conference on Very Large Databases, </booktitle> <pages> pages 2533, </pages> <address> Stockholm, Sweden, </address> <month> August </month> <year> 1985. </year>
Reference-contexts: Objects are then copied from the public database by check-out into private areas. When a transaction is finished, the modified objects are checked-in into the public database. Check-out models often appear in tandem with versions and configurations [Kat90]. CAD transactions <ref> [BKK85, KSUW85] </ref> enhance the basic check-out model by introducing a hierarchy of public, semi-public, and private databases.
Reference: [BSS91] <author> K.P. Birman, A. Schiper, and P. Stephenson. </author> <title> Leightweight causal and atomic group multi-cast. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3):272314, </volume> <year> 1991. </year>
Reference-contexts: Other approaches in the CSCW area (e.g., [EG89]) are only applicable to real-time groupware systems, such as shared whiteboards and synchronous group editors. Most of these systems are based on replication of data and use multicast protocols like ISIS <ref> [BC91, BSS91] </ref> for synchronisation purposes. Real-time groupware systems do not address the issues of persistency of data and recovery to ensure fault-tolerant processing. Workflow systems. Workflow management is gaining popularity, although the current generation of work-flow management systems (WFMS) has several limitations [GHS95, JLP + 95].
Reference: [BWAH96] <author> A. Bapat, J. Wasch, K. Aberer, and J.M. Haake. HyperStorM: </author> <title> An extensible object-oriented hyper-media engine. </title> <booktitle> In Proceedings of the Seventh ACM Conference on Hypertext (HYPERTEXT'96), pages 203214, </booktitle> <address> March 16-20 1996. Washington, D.C. </address> <month> 8 </month>
Reference-contexts: An operation is considered to be atomic and transfers a consistent workspace state to another consistent state. The COACT model assumes an environment where the sequence of operations executed in a workspace is composed interactively, by the user at run-time (as in the hypermedia authoring system SEPIA <ref> [SHH + 92, WA95, BWAH96] </ref>). A user selects a next operation from the predefined operation set associated with the cooperative activity. The actual input parameters to the operation are given explicitly by the user. Information exchange among workspaces in COACT is based on the exchange of operations instead of data. <p> The SEPIA hierarchical hypertext document structure 7 and the corresponding operations for the creation and ma-nipulation of SEPIA document structures are modelled explicitly by means of the VODAK Manipulation Language (VML) in the database schema <ref> [WA95, BWAH96] </ref>. The TRANSCOOP demonstrator system provides information about the current participants and their work progress to establish group awareness. For example, when a delegation is performed, the delegatee is notified in order to control the integration of the respective piece of work into his or her workspace.
Reference: [dBEV95] <author> R. A. de By, S. J. Even, and P. A. C. Verkoulen. </author> <title> Functionally specified distributed transactions in co-operative scenarios. </title> <booktitle> In Proceedings of RIDE-DOMS, </booktitle> <pages> pages 116121, </pages> <address> Taipei, Taiwan, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: The specification language is designed on top of the formal specification language LOTOS/TM <ref> [dBEV95, EFdB96] </ref>, which in turn is based on the specification language LOTOS [BB89], and the TM database specification language and design tools, developed at the University of Twente [FB96, BBdB + 96, vKSA + 95, FvKS94, BdBZ93].
Reference: [dBLP + 95] <author> R. de By, A. Lehtola, O. Pihlajamaa, J. Veijalainen, and J. Wasch. </author> <title> A reference architecture for cooperative transaction processing systems. </title> <booktitle> VTT Research Notes 1694, </booktitle> <institution> VTT Technical Research Cen-tre of Finland, </institution> <year> 1995. </year>
Reference-contexts: Due to time limitations, the execution rule enforcement mechanism has not been implemented. The TRANSCOOP reference architecture <ref> [dBLP + 95] </ref> identifies two fundamental components: the specification environment, which provides a means for the specification and verification of a cooperative scenario, and the runtime environment, which offers support for the execution of a cooperative scenario.
Reference: [dBLP + 96] <author> R. de By, A. Lehtola, O. Pihlajamaa, J. Veijalainen, and J. Wasch. </author> <title> Deliverable III.2: Specification of the Demonstrator. Report TC/REP/VTT/D3-2/960425, Esprit Project No. </title> <type> 8012, </type> <year> 1996. </year>
Reference-contexts: When the current step allows the scenario to terminate, the results in the common workspace represent the commonly agreed upon result. The final history is then applied to the Application DB. 4.3 The TRANSCOOP demonstrator scenario The selected application for the TRANSCOOP demonstrator system <ref> [dBLP + 96] </ref> is the cooperative hypermedia authoring system SEPIA [SHH + 92], developed at GMD-IPSI.
Reference: [DHL90] <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> Organizing long running activities with triggers and transactions. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, pages 204214, </booktitle> <address> Atlantic City, NJ, USA, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: This can be done either by supporting a script language (as in the ConTract model [WR92]), by a declarative specification of the execution structure in terms of externally visible execution states [ARSS93], or by ECA rules <ref> [DHL90] </ref>. Cooperation is characterised in these models by passing results between workflow tasks in a predefined manner. 3 The TRANSCOOP Model As described in Section 2, cooperative work has several dimensions, and the requirements for a cooperative system largely vary depending on the application.
Reference: [EFdB96] <author> Susan J. Even, Frans J. Faase, and Rolf A. </author> <title> de By. Language features for cooperation in an object-oriented database environment. </title> <journal> International Journal of Cooperative Information Systems, Special Issue on Formal Methods, </journal> <volume> 5(4):469500, </volume> <month> December </month> <year> 1996. </year>
Reference-contexts: The specification language is designed on top of the formal specification language LOTOS/TM <ref> [dBEV95, EFdB96] </ref>, which in turn is based on the specification language LOTOS [BB89], and the TM database specification language and design tools, developed at the University of Twente [FB96, BBdB + 96, vKSA + 95, FvKS94, BdBZ93].
Reference: [EFPdB96] <author> Susan J. Even, Frans J. Faase, Olli Pihlajamaa, and Rolf A. </author> <title> de By. Deliverable IV.4: Design of the TransCoop Specification Environment. Report TC/REP/UT/D4-4/032, Esprit Project No. </title> <type> 8012, </type> <year> 1996. </year>
Reference-contexts: These are described in the following sections. 4.1 The specification environment The components of the TRANSCOOP specification environment are intended to help the specifier of a cooperative application work with the COCOA language in the early (conceptual), as well as the late (testing) phases of the application design <ref> [EFPdB96] </ref>. The TRANSCOOP specification environment includes a graphical specification editor, a static analysis tool, a dynamic analysis tool, and compilers to the run-time environment. The static analysis tool includes a parser/type-checker, which also performs well-formedness checks on the steps and transitions.
Reference: [EG89] <author> C. A. Ellis and S. J. Gibbs. </author> <title> Concurrency control in groupware systems. </title> <booktitle> In Proc. of the ACM SIG-MOD Conference on Management of Data, </booktitle> <pages> pages 399407. </pages> <address> MCC, Austin, Texas, </address> <month> May </month> <year> 1989. </year> <institution> Port-land, Oregon. </institution>
Reference-contexts: Some systems use floor passing protocols [GS87] to syn-chronise concurrent operations on shared data, thereby limiting the availability of data. Some systems do not provide any concurrency control at all, but rely on social protocols [EGR91]. Other approaches in the CSCW area (e.g., <ref> [EG89] </ref>) are only applicable to real-time groupware systems, such as shared whiteboards and synchronous group editors. Most of these systems are based on replication of data and use multicast protocols like ISIS [BC91, BSS91] for synchronisation purposes.
Reference: [EGR91] <author> C. A. Ellis, S. J. Gibbs, and G. L. Rein. </author> <title> Groupware: Some issues and experiences. </title> <journal> Communications of the ACM, </journal> <volume> 34(1):3858, </volume> <month> January </month> <year> 1991. </year>
Reference-contexts: The above cooperative application scenarios (CDA, DfM, and Workflow) can be classified by emphasising different 2 aspects of the communication, collaboration and coordina-tion properties of CSCW systems <ref> [EGR91] </ref>. <p> Groupware. Most groupware systems <ref> [EGR91] </ref> synchro-nise cooperative access to shared data in a more or less ad hoc manner. Concurrency control in most cooperative hypertext systems is based on mechanisms like explicit user-controlled locking of objects, different lock modes, extended lock semantics, and notifications [WL93, GS87]. <p> Some systems use floor passing protocols [GS87] to syn-chronise concurrent operations on shared data, thereby limiting the availability of data. Some systems do not provide any concurrency control at all, but rely on social protocols <ref> [EGR91] </ref>. Other approaches in the CSCW area (e.g., [EG89]) are only applicable to real-time groupware systems, such as shared whiteboards and synchronous group editors. Most of these systems are based on replication of data and use multicast protocols like ISIS [BC91, BSS91] for synchronisation purposes.
Reference: [Elm92] <editor> A. K. Elmagarmid, editor. </editor> <title> Database Transaction Models for Advanced Applications. </title> <publisher> ACM Press. Morgan Kaufmann Publishers, Inc., </publisher> <year> 1992. </year>
Reference-contexts: Advanced transaction models. Transaction models guarantee fault tolerance and synchronise concurrent access to shared persistent data. To support cooperative applications, several advanced transaction models have been proposed in the recent years. For an overview of these models we refer the reader to <ref> [Elm92, Hsu93, Kai95] </ref>. A general approach to supporting cooperation is to divide the database into public and private areas [KW84, LP83]. Objects are then copied from the public database by check-out into private areas. When a transaction is finished, the modified objects are checked-in into the public database.
Reference: [FB96] <author> Jan Flokstra and Reinier Boon. </author> <title> The TM Abstract Machine (TAM). Internal working document, </title> <address> Uni-versiteit Twente, The Netherlands, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: The specification language is designed on top of the formal specification language LOTOS/TM [dBEV95, EFdB96], which in turn is based on the specification language LOTOS [BB89], and the TM database specification language and design tools, developed at the University of Twente <ref> [FB96, BBdB + 96, vKSA + 95, FvKS94, BdBZ93] </ref>. Within the TRANSCOOP project, the COACT transaction model has been implemented as an extension of the object-oriented database management system VO-DAK [GI95] (developed at GMD-IPSI).
Reference: [FEdB96] <author> Frans J. Faase, Susan J. Even, and Rolf A. </author> <title> de By. Deliverable IV.3: An introduction to CoCoA. Report TC/REP/UT/D4-3/033, Esprit Project No. </title> <type> 8012, </type> <year> 1996. </year>
Reference-contexts: To provide this flexibly, we take an operation-oriented view: the consistency of shared work results is determined, based on the semantics of the operations performed to obtain these results. To specify cooperative scenarios in TRANSCOOP, we designed the specification language COCOA <ref> [FEdB96, FEdBA97] </ref>, which allows the description of organisational and transactional aspects of a cooperative scenario, using declarative language constructs that extend a given database schema. <p> The merge mechanism and its properties are discussed in detail in [KTW96b, WK96]. Facilities to define data operations, data exchange operations, and the forward and backward commutativity relations required by the COACT transaction model are available in the COCOA specification language for cooperative scenarios <ref> [FEdB96, FEdBA97] </ref>. COCOA extends the object-oriented database schema specification language TM [BBdB + 96]. <p> To specify this language, multiple grammars can be used. Their combination results in the desired restrictions on sequences of operations that are allowed by the cooperative scenario. In contrast to [Ska89, NRZ92], our mechanism avoids dead ends caused by interdependencies of different grammars. For details see <ref> [KTW + 96c, FEdB96] </ref>. To structure the overall work process, and to specify restrictions that must be obeyed across all workspaces, CO COA provides a step definition mechanism [FEdB96]. The step mechanism controls whether a user is allowed to execute an operation at a particular point in the scenario. <p> In contrast to [Ska89, NRZ92], our mechanism avoids dead ends caused by interdependencies of different grammars. For details see [KTW + 96c, FEdB96]. To structure the overall work process, and to specify restrictions that must be obeyed across all workspaces, CO COA provides a step definition mechanism <ref> [FEdB96] </ref>. The step mechanism controls whether a user is allowed to execute an operation at a particular point in the scenario. This is performed by explicitly enabling the allowed operations. <p> Steps can be combined in various ways to form the organ-isational structure of the work process. The constructs to group steps range from sequential and repetitive execution of steps, to nested and parallel steps. For more details on scenario organisation facilities in COCOA, see <ref> [FEdB96] </ref>. 4 The TRANSCOOP System To demonstrate the applicability of the results of the TRANSCOOP project, an important goal was to implement a prototype system that realises the most important concepts introduced in the model. Due to time limitations, the execution rule enforcement mechanism has not been implemented.
Reference: [FEdBA97] <author> Frans J. Faase, Susan J. Even, Rolf A. de By, and Peter M. G. Apers. </author> <title> Integrating organisational and transactional aspects of cooperative activities. Accepted for publication, </title> <booktitle> Workshop on Database Programming Languages (DBPL), </booktitle> <year> 1997. </year>
Reference-contexts: The goal of the ESPRIT TRANSCOOP project has been the development of a cooperative transaction model and a corresponding specification language that are applicable to a wide spectrum of cooperative scenarios. The TRANSCOOP specification language COCOA allows the declarative specification of workflow-like cooperative scenarios <ref> [FEdBA97] </ref>. The TRANSCOOP cooperative transaction model COACT [RKT + 95, WK96, KTW96b] provides the basic transactional support to ensure consistent management of shared data in cooperative applications. <p> To provide this flexibly, we take an operation-oriented view: the consistency of shared work results is determined, based on the semantics of the operations performed to obtain these results. To specify cooperative scenarios in TRANSCOOP, we designed the specification language COCOA <ref> [FEdB96, FEdBA97] </ref>, which allows the description of organisational and transactional aspects of a cooperative scenario, using declarative language constructs that extend a given database schema. <p> The merge mechanism and its properties are discussed in detail in [KTW96b, WK96]. Facilities to define data operations, data exchange operations, and the forward and backward commutativity relations required by the COACT transaction model are available in the COCOA specification language for cooperative scenarios <ref> [FEdB96, FEdBA97] </ref>. COCOA extends the object-oriented database schema specification language TM [BBdB + 96].
Reference: [FvKS94] <author> Jan Flokstra, Maurice van Keulen, and Jacek Skowronek. </author> <title> The IMPRESS DDT: A database design toolbox based on a formal specification language. </title> <booktitle> In Proc. of ACM-SIGMOD '94, </booktitle> <address> Minneapo-lis, Minnesota, </address> <year> 1994. </year>
Reference-contexts: The specification language is designed on top of the formal specification language LOTOS/TM [dBEV95, EFdB96], which in turn is based on the specification language LOTOS [BB89], and the TM database specification language and design tools, developed at the University of Twente <ref> [FB96, BBdB + 96, vKSA + 95, FvKS94, BdBZ93] </ref>. Within the TRANSCOOP project, the COACT transaction model has been implemented as an extension of the object-oriented database management system VO-DAK [GI95] (developed at GMD-IPSI).
Reference: [GHS95] <author> D. Georgakopoulos, M. Hornick, and A. Sheth. </author> <title> An overview of workflow management: From process modeling to workflow automation infrastructure. Distributed and Parallel Databases, </title> <address> 3:119 153, </address> <year> 1995. </year>
Reference-contexts: Real-time groupware systems do not address the issues of persistency of data and recovery to ensure fault-tolerant processing. Workflow systems. Workflow management is gaining popularity, although the current generation of work-flow management systems (WFMS) has several limitations <ref> [GHS95, JLP + 95] </ref>. Most of these arise because the purely process-centric approach of WFMS neglects data-centric issues. This results in the lack of support for correctness and data consistency (in the case of concurrent work-flow tasks), and insufficient recovery mechanisms.
Reference: [GI95] <author> GMD-IPSI. </author> <title> VODAK V4.0 User Manual. Ar-beitspapiere der GMD 910, </title> <type> Technical Report, </type> <institution> GMD, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: Within the TRANSCOOP project, the COACT transaction model has been implemented as an extension of the object-oriented database management system VO-DAK <ref> [GI95] </ref> (developed at GMD-IPSI). A TRANSCOOP demonstrator architecture has been implemented within the project to evaluate the transaction model and specification language for a particular application scenario, that of cooperative document authoring. <p> The compilers generate the input for the cooperation manager and the cooperative transaction manager of the run-time environment. 4.2 The run-time environment The TRANSCOOP runtime environment has been implemented as an extension of the object-oriented DBMS VO-DAK, developed at GMD-IPSI <ref> [GI95] </ref>. In the implementation architecture, all cooperation facilities are supported as DBMS services.
Reference: [GS87] <author> I. Greif and S. Sarin. </author> <title> Data sharing in group work. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 5(2):187211, </volume> <month> April </month> <year> 1987. </year>
Reference-contexts: Groupware. Most groupware systems [EGR91] synchro-nise cooperative access to shared data in a more or less ad hoc manner. Concurrency control in most cooperative hypertext systems is based on mechanisms like explicit user-controlled locking of objects, different lock modes, extended lock semantics, and notifications <ref> [WL93, GS87] </ref>. Some systems use floor passing protocols [GS87] to syn-chronise concurrent operations on shared data, thereby limiting the availability of data. Some systems do not provide any concurrency control at all, but rely on social protocols [EGR91]. <p> Concurrency control in most cooperative hypertext systems is based on mechanisms like explicit user-controlled locking of objects, different lock modes, extended lock semantics, and notifications [WL93, GS87]. Some systems use floor passing protocols <ref> [GS87] </ref> to syn-chronise concurrent operations on shared data, thereby limiting the availability of data. Some systems do not provide any concurrency control at all, but rely on social protocols [EGR91].
Reference: [HF86] <author> J.R. Hayes and L. Flowers. </author> <title> Writing research and the writer. </title> <journal> American Psychologist, </journal> <volume> 41(10):1106 1113, </volume> <year> 1986. </year>
Reference-contexts: Cooperative Hypermedia Document Authoring [TW95]. CDA is characterised by multiple authors interactively working on shared hypermedia documents. Hypermedia document authoring can be considered as a design problem solving process <ref> [HF86] </ref>, mainly charac-terised by the decomposition into smaller subproblems and their solution by interacting activities. An important characteristic of these processes is that the documents to be produced can be described only vaguely in advance.
Reference: [Hon88] <author> M. Honda. </author> <title> Support for parallel development in the Sun network software environment. </title> <booktitle> In Proc. of the second Int. Workshop on Computer-Aided Software Engineering, </booktitle> <pages> pages 55 57, </pages> <address> Cambridge, Mas-sachusetts, USA, </address> <month> July </month> <year> 1988. </year>
Reference-contexts: CAD transactions [BKK85, KSUW85] enhance the basic check-out model by introducing a hierarchy of public, semi-public, and private databases. For CASE applications, several extensions of the basic checkout model have been developed, which take advantage of the opportunity for generic software consistency checking <ref> [Hon88, KPS89] </ref>, but these models are not generally applicable to other domains. The split/join transaction model [PKH88, KP92] supports the dynamic restructuring of ongoing transactions.
Reference: [Hsu93] <author> M. Hsu, </author> <title> editor. </title> <journal> Data Engineering Bulletin, Special Issue on Workflow and Extended Transaction Systems. IEEE Press, 1993. </journal> <volume> Vol. 16, No. </volume> <pages> 2. </pages>
Reference-contexts: Advanced transaction models. Transaction models guarantee fault tolerance and synchronise concurrent access to shared persistent data. To support cooperative applications, several advanced transaction models have been proposed in the recent years. For an overview of these models we refer the reader to <ref> [Elm92, Hsu93, Kai95] </ref>. A general approach to supporting cooperation is to divide the database into public and private areas [KW84, LP83]. Objects are then copied from the public database by check-out into private areas. When a transaction is finished, the modified objects are checked-in into the public database.
Reference: [JLP + 95] <author> J. Juopperi, A. Lehtola, O. Pihlajamaa, A. Sladek, and J. Veijalainen. </author> <title> Usability of some workflow products in an inter-organizational setting. </title> <booktitle> In Proc. of IFIP WG8.1 Working Conference on Information Systems for Decentralized Organizations, </booktitle> <address> Trond-heim, Norway, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: The research activities in TRANSCOOP began with an analysis of different cooperative application scenarios, namely cooperative authoring [TW95], Design for Manufacturing [VFSE95] and workflow applications <ref> [JLP + 95] </ref>, and an analysis of existing approaches to support cooperative work. These analyses, together with the requirements derived from them, are presented in Section 2. Section 3 describes the fundamentals of the TRANSCOOP cooperative transaction model COACT, and our assumptions about the structure of cooperative scenarios. <p> Thus, the strengthening of the design process by overlapping design phases requires extensive cooperation and coordination facilities. In comparison to cooperative authoring, more detailed knowledge of the engineering processes in different phases, as well as of the sequence of processing is available. Workflow applications <ref> [JLP + 95] </ref>. Workflows are used to define complicated business processes, e.g., to accomplish the production of goods or services. A workflow consists of a collection of tasks that are partially ordered by control and data flow dependencies. <p> The above cooperative application scenarios (CDA, DfM, and Workflow) can be classified by emphasising different 2 aspects of the communication, collaboration and coordina-tion properties of CSCW systems [EGR91]. In our investigation, we recognised the following characteristics (for details, refer to <ref> [TV95, VT95, TW95, VFSE95, JLP + 95] </ref>): * Multiple concurrent users are involved in multiple activities to satisfy a common goal, or to produce a com mon product or artifact. * Activities are processed interactively by humans and are usually of long duration. * Cooperative work is characterised by alternating peri <p> Real-time groupware systems do not address the issues of persistency of data and recovery to ensure fault-tolerant processing. Workflow systems. Workflow management is gaining popularity, although the current generation of work-flow management systems (WFMS) has several limitations <ref> [GHS95, JLP + 95] </ref>. Most of these arise because the purely process-centric approach of WFMS neglects data-centric issues. This results in the lack of support for correctness and data consistency (in the case of concurrent work-flow tasks), and insufficient recovery mechanisms.
Reference: [Kai95] <author> G. E. Kaiser. </author> <title> Cooperative transactions for multiuser environments. </title> <editor> In Kim [Kim95], </editor> <volume> chapter 20, </volume> <pages> pages 409433. </pages>
Reference-contexts: Advanced transaction models. Transaction models guarantee fault tolerance and synchronise concurrent access to shared persistent data. To support cooperative applications, several advanced transaction models have been proposed in the recent years. For an overview of these models we refer the reader to <ref> [Elm92, Hsu93, Kai95] </ref>. A general approach to supporting cooperation is to divide the database into public and private areas [KW84, LP83]. Objects are then copied from the public database by check-out into private areas. When a transaction is finished, the modified objects are checked-in into the public database. <p> The model builds on the observation stated in Section 2 that cooperative work is char-acterised by alternating periods of individual and joint work <ref> [TV95, TW95, Kai95] </ref>. During individual work periods, users try out alternative problem solutions while coworkers may work simultaneously on the same subject. Access to and use of shared data should neither block other users, nor should it affect co-workers unintendedly.
Reference: [Kat90] <author> R. H. Katz. </author> <title> Towards a unified framework for version modelling in engineering databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4), </volume> <year> 1990. </year>
Reference-contexts: Objects are then copied from the public database by check-out into private areas. When a transaction is finished, the modified objects are checked-in into the public database. Check-out models often appear in tandem with versions and configurations <ref> [Kat90] </ref>. CAD transactions [BKK85, KSUW85] enhance the basic check-out model by introducing a hierarchy of public, semi-public, and private databases.
Reference: [Kim95] <author> W. Kim, </author> <title> editor. Modern Database Systems: The Object Model, Interoperability, and beyond. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1995. </year>
Reference: [KP92] <author> G. E. Kaiser and C. Pu. </author> <title> Dynamic restructuring of transactions. </title> <editor> In Elmagarmid [Elm92], </editor> <volume> chapter 8, </volume> <pages> pages 265295. </pages>
Reference-contexts: For CASE applications, several extensions of the basic checkout model have been developed, which take advantage of the opportunity for generic software consistency checking [Hon88, KPS89], but these models are not generally applicable to other domains. The split/join transaction model <ref> [PKH88, KP92] </ref> supports the dynamic restructuring of ongoing transactions. A split-operation allows to split a running transaction into two new (serial or independent) transactions while a join-operations allows to incorporate two transactions into a new transaction. These mechanisms enable a cooperative behaviour by exchanging parts of transactions between concurrent users.
Reference: [KPS89] <author> G. E. Kaiser, D. E. Perry, and W. M. Schell. Infuse: </author> <title> Fusing integration test management with change management. </title> <booktitle> In Proc. of the 13th IEEE Computer Software and Applications Conference, </booktitle> <pages> pages 552 558, </pages> <address> Orlando, Florida, USA, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: CAD transactions [BKK85, KSUW85] enhance the basic check-out model by introducing a hierarchy of public, semi-public, and private databases. For CASE applications, several extensions of the basic checkout model have been developed, which take advantage of the opportunity for generic software consistency checking <ref> [Hon88, KPS89] </ref>, but these models are not generally applicable to other domains. The split/join transaction model [PKH88, KP92] supports the dynamic restructuring of ongoing transactions.
Reference: [KSUW85] <author> P. Klahold, G. Schlageter, R. Unland, and W. Wilkes. </author> <title> A transaction model supporting complex applications in integrated information systems. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 388401, </pages> <address> Austin, Texas, USA, </address> <month> May </month> <year> 1985. </year>
Reference-contexts: Objects are then copied from the public database by check-out into private areas. When a transaction is finished, the modified objects are checked-in into the public database. Check-out models often appear in tandem with versions and configurations [Kat90]. CAD transactions <ref> [BKK85, KSUW85] </ref> enhance the basic check-out model by introducing a hierarchy of public, semi-public, and private databases.
Reference: [KTW96a] <author> J. Klingemann, T. Tesch, and J. Wasch. </author> <title> Deliverable V.3: Design of the TransCoop Cooperative Transaction Manager. Report TC/REP/GMD/D5-3/512, Esprit Project No. </title> <type> 8012, </type> <year> 1996. </year> <month> 9 </month>
Reference-contexts: In the implementation architecture, all cooperation facilities are supported as DBMS services. The design of the TRANSCOOP runtime environment required an extension of the traditional, cen-tralised OODBMS architecture (e.g., as used for VODAK) in order to meet the architectural and conceptual requirements posed by the TRANSCOOP cooperative transaction manager <ref> [KTW96a] </ref>. The following issues were addressed: * Workspaces. The desired workspace functionality requires the maintenance of multiple private versions of an object, instead of a single shared version.
Reference: [KTW96b] <author> J. Klingemann, T. Tesch, and J. Wasch. </author> <title> Semantics--based transaction management for cooperative applications. </title> <booktitle> In Proc. of the Int. Workshop on Advanced Transaction Models and Architectures, </booktitle> <address> Goa, India, </address> <month> August 31 September 2 </month> <year> 1996. </year>
Reference-contexts: The TRANSCOOP specification language COCOA allows the declarative specification of workflow-like cooperative scenarios [FEdBA97]. The TRANSCOOP cooperative transaction model COACT <ref> [RKT + 95, WK96, KTW96b] </ref> provides the basic transactional support to ensure consistent management of shared data in cooperative applications. <p> In the following, we describe the building blocks of the TRANSCOOP transaction model and specification language, together with the aspects of cooperative work that they support. 3.1 Workspaces and exchange facilities The Cooperative Activity Model (COACT) comprises the core of the TRANSCOOP transaction model <ref> [RKT + 95, WK96, KTW96b] </ref>. The model builds on the observation stated in Section 2 that cooperative work is char-acterised by alternating periods of individual and joint work [TV95, TW95, Kai95]. During individual work periods, users try out alternative problem solutions while coworkers may work simultaneously on the same subject. <p> Each cooperative activity is described by (1) a set of operations that can be invoked by a user in the user's private workspace, and (2) a set of type-specific merging rules that exploit the semantics of operations to guide the process of information exchange (history merging) <ref> [WK96, KTW96b] </ref>. Operations are the smallest units of work within a cooperative activity. An operation is considered to be atomic and transfers a consistent workspace state to another consistent state. <p> The TRANSCOOP run-time system offers facilities to the user to support this selection process. Merging may result in reverting previous decisions. This is done by compensation in COACT. In <ref> [KTW96b] </ref>, we have shown that this approach produces correct merged histories. If an operation has been successfully incorporated into another workspace, it is conceptually the same operation 5 that is present in more than one workspace. <p> It is assumed that all users integrate their relevant contributions into the common workspace to produce a single result of the cooperative activity. The merge mechanism and its properties are discussed in detail in <ref> [KTW96b, WK96] </ref>. Facilities to define data operations, data exchange operations, and the forward and backward commutativity relations required by the COACT transaction model are available in the COCOA specification language for cooperative scenarios [FEdB96, FEdBA97]. COCOA extends the object-oriented database schema specification language TM [BBdB + 96].
Reference: [KTW + 96c] <author> J. Klingemann, T. Tesch, J. Wasch, J. Puustjarvi, and J. Veijalainen. </author> <title> Deliverable V.2: Definition of the TransCoop Cooperative Transaction Model. Report TC/REP/GMD/D5-2/511, Esprit Project No. </title> <type> 8012, </type> <year> 1996. </year>
Reference-contexts: To specify this language, multiple grammars can be used. Their combination results in the desired restrictions on sequences of operations that are allowed by the cooperative scenario. In contrast to [Ska89, NRZ92], our mechanism avoids dead ends caused by interdependencies of different grammars. For details see <ref> [KTW + 96c, FEdB96] </ref>. To structure the overall work process, and to specify restrictions that must be obeyed across all workspaces, CO COA provides a step definition mechanism [FEdB96]. The step mechanism controls whether a user is allowed to execute an operation at a particular point in the scenario.
Reference: [KTW97] <author> J. Klingemann, T. Tesch, and J. Wasch. </author> <title> Enabling cooperation among disconnected mobile users. </title> <booktitle> In Proc. of the second IFCIS Int. Conference on Cooperative Information Systems (CoopIS), </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: The TRANSCOOP approach fits various application areas and provides directions for solving open research problems in related fields like mobile wireless computing <ref> [KTW97] </ref> or versioning.
Reference: [KW84] <author> R. Katz and S. Weiss. </author> <title> Design transaction management. </title> <booktitle> In Proceedings of the 19th Design Automation Conference, </booktitle> <month> June </month> <year> 1984. </year>
Reference-contexts: To support cooperative applications, several advanced transaction models have been proposed in the recent years. For an overview of these models we refer the reader to [Elm92, Hsu93, Kai95]. A general approach to supporting cooperation is to divide the database into public and private areas <ref> [KW84, LP83] </ref>. Objects are then copied from the public database by check-out into private areas. When a transaction is finished, the modified objects are checked-in into the public database. Check-out models often appear in tandem with versions and configurations [Kat90].
Reference: [LMWF94] <author> N. Lynch, M. Merrit, W. Weihl, and A. Fekete. </author> <title> Atomic Transactions. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1994. </year>
Reference-contexts: Other co-workers can then retrieve the saved information using the import operation de scribed above. The COACT history merge mechanism ensures that only consistent parts of workspaces are exchanged. Consistent units of work are identified by examining the backward commutativity relation <ref> [Wei88, LMWF94] </ref> between operations contained in a workspace history. The incorporation of operations into a workspace is then realised by the re-execution of the operations in the destination workspace. <p> Hence, the behaviour of a re-executed operation in terms of output results is indistinguishable from its initial execution. We use the forward commutativity relation <ref> [Wei88, LMWF94] </ref> to check this. If the merge process cannot be performed without violating the semantical correctness, the merge algorithm identifies different consistent sets of operations; one of these solutions can then be used in the merge instead.
Reference: [LP83] <author> R. Lorie and W. Plouffe. </author> <title> Complex objects and their use in design transactions. </title> <booktitle> In Proceedings on Database for Engineering Applications, </booktitle> <pages> pages 115121. </pages> <publisher> ACM, </publisher> <month> May </month> <year> 1983. </year>
Reference-contexts: To support cooperative applications, several advanced transaction models have been proposed in the recent years. For an overview of these models we refer the reader to [Elm92, Hsu93, Kai95]. A general approach to supporting cooperation is to divide the database into public and private areas <ref> [KW84, LP83] </ref>. Objects are then copied from the public database by check-out into private areas. When a transaction is finished, the modified objects are checked-in into the public database. Check-out models often appear in tandem with versions and configurations [Kat90].
Reference: [NRZ92] <author> M. H. Nodine, S. Ramaswamy, and S. B. Zdonik. </author> <title> A cooperative transaction model for design databases. </title> <editor> In Elmagarmid [Elm92], </editor> <volume> chapter 3, </volume> <pages> pages 5385. </pages>
Reference-contexts: To specify this language, multiple grammars can be used. Their combination results in the desired restrictions on sequences of operations that are allowed by the cooperative scenario. In contrast to <ref> [Ska89, NRZ92] </ref>, our mechanism avoids dead ends caused by interdependencies of different grammars. For details see [KTW + 96c, FEdB96]. To structure the overall work process, and to specify restrictions that must be obeyed across all workspaces, CO COA provides a step definition mechanism [FEdB96].
Reference: [Pau90] <author> Lawrence C. Paulson. </author> <title> Isabelle: The next 700 theorem provers. </title> <editor> In P. Odifreddi, editor, </editor> <booktitle> Logic and Computer Science, </booktitle> <pages> pages 361386. </pages> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: This investigation involves mapping a TM schema to higher order logic (HOL) [Spe95]. Commutativity analysis requirements are formulated as proof goals in HOL and given, along with the HOL representations of the data operations, to the Isabelle theorem prover for proof assistance <ref> [Pau90, Pau94] </ref>. The TRANSCOOP approach fits various application areas and provides directions for solving open research problems in related fields like mobile wireless computing [KTW97] or versioning.
Reference: [Pau94] <author> Lawrence C. Paulson. </author> <title> Isabelle: A Generic Theorem Prover, </title> <booktitle> volume 828 of LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: This investigation involves mapping a TM schema to higher order logic (HOL) [Spe95]. Commutativity analysis requirements are formulated as proof goals in HOL and given, along with the HOL representations of the data operations, to the Isabelle theorem prover for proof assistance <ref> [Pau90, Pau94] </ref>. The TRANSCOOP approach fits various application areas and provides directions for solving open research problems in related fields like mobile wireless computing [KTW97] or versioning.
Reference: [PKH88] <author> C. Pu, G. E. Kaiser, and N. Hutchinson. </author> <title> Split transactions for openended activities. </title> <booktitle> In Proc. of the 14th Int. Conference on Very Large Databases, </booktitle> <pages> pages 2637, </pages> <address> Los Angeles, California, USA, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: For CASE applications, several extensions of the basic checkout model have been developed, which take advantage of the opportunity for generic software consistency checking [Hon88, KPS89], but these models are not generally applicable to other domains. The split/join transaction model <ref> [PKH88, KP92] </ref> supports the dynamic restructuring of ongoing transactions. A split-operation allows to split a running transaction into two new (serial or independent) transactions while a join-operations allows to incorporate two transactions into a new transaction. These mechanisms enable a cooperative behaviour by exchanging parts of transactions between concurrent users.
Reference: [RKT + 95] <author> M. Rusinkiewicz, W. Klas, T. Tesch, J. Wasch, and P. Muth. </author> <title> Towards a cooperative transaction model: The cooperative activity model. </title> <booktitle> In Proc. of the 21st Int. Conference on Very Large Databases, </booktitle> <pages> pages 194205, </pages> <month> September </month> <year> 1995. </year> <institution> Zurich, Switzerland. </institution>
Reference-contexts: The TRANSCOOP specification language COCOA allows the declarative specification of workflow-like cooperative scenarios [FEdBA97]. The TRANSCOOP cooperative transaction model COACT <ref> [RKT + 95, WK96, KTW96b] </ref> provides the basic transactional support to ensure consistent management of shared data in cooperative applications. <p> In the following, we describe the building blocks of the TRANSCOOP transaction model and specification language, together with the aspects of cooperative work that they support. 3.1 Workspaces and exchange facilities The Cooperative Activity Model (COACT) comprises the core of the TRANSCOOP transaction model <ref> [RKT + 95, WK96, KTW96b] </ref>. The model builds on the observation stated in Section 2 that cooperative work is char-acterised by alternating periods of individual and joint work [TV95, TW95, Kai95]. During individual work periods, users try out alternative problem solutions while coworkers may work simultaneously on the same subject.
Reference: [RS95] <author> M. Rusinkiewicz and A. Sheth. </author> <title> Specification and execution of transactional workflows. </title> <editor> In Kim [Kim95], </editor> <volume> chapter 29, </volume> <pages> pages 592620. </pages>
Reference-contexts: A split-operation allows to split a running transaction into two new (serial or independent) transactions while a join-operations allows to incorporate two transactions into a new transaction. These mechanisms enable a cooperative behaviour by exchanging parts of transactions between concurrent users. Transactional workflow approaches <ref> [RS95] </ref> usually include specification languages to express various execution constraints for a set of tasks.
Reference: [SHH + 92] <author> N. Streitz, J. Haake, J. Hannemann, A. Lemke, W. Schuler, H. Schutt, and M. Thuring. SEPIA: </author> <title> A cooperative hypermedia authoring environment. </title> <booktitle> In Proc. of the fourth ACM Conference on Hypertext, </booktitle> <pages> pages 1122, </pages> <year> 1992. </year> <institution> Milano, Italy, </institution> <month> Nov. 30 Dec. 4. </month>
Reference-contexts: An operation is considered to be atomic and transfers a consistent workspace state to another consistent state. The COACT model assumes an environment where the sequence of operations executed in a workspace is composed interactively, by the user at run-time (as in the hypermedia authoring system SEPIA <ref> [SHH + 92, WA95, BWAH96] </ref>). A user selects a next operation from the predefined operation set associated with the cooperative activity. The actual input parameters to the operation are given explicitly by the user. Information exchange among workspaces in COACT is based on the exchange of operations instead of data. <p> The final history is then applied to the Application DB. 4.3 The TRANSCOOP demonstrator scenario The selected application for the TRANSCOOP demonstrator system [dBLP + 96] is the cooperative hypermedia authoring system SEPIA <ref> [SHH + 92] </ref>, developed at GMD-IPSI. Because we treat the authoring process from a database point of view, we assume a scenario in which multiple authors are manipulating a collection of shared hypermedia documents that are stored in a database management system.
Reference: [Ska89] <author> A.H. Skarra. </author> <title> Concurrency control for cooperating transactions in an object-oriented database. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 24(4):145147, </volume> <month> April </month> <year> 1989. </year>
Reference-contexts: To specify this language, multiple grammars can be used. Their combination results in the desired restrictions on sequences of operations that are allowed by the cooperative scenario. In contrast to <ref> [Ska89, NRZ92] </ref>, our mechanism avoids dead ends caused by interdependencies of different grammars. For details see [KTW + 96c, FEdB96]. To structure the overall work process, and to specify restrictions that must be obeyed across all workspaces, CO COA provides a step definition mechanism [FEdB96].
Reference: [Spe95] <author> David Spelt. </author> <title> A Proof Tool for TM. M.Sc. </title> <type> Thesis, </type> <institution> Universiteit Twente, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: Specification tools that compute commutativity information automatically from a formal specification of data operations will improve the practical applicability of the TRANSCOOP approach. Within the TRANSCOOP project, we have made preliminary investigations in this direction. This investigation involves mapping a TM schema to higher order logic (HOL) <ref> [Spe95] </ref>. Commutativity analysis requirements are formulated as proof goals in HOL and given, along with the HOL representations of the data operations, to the Isabelle theorem prover for proof assistance [Pau90, Pau94].
Reference: [SRN93] <author> A. Storr, U. Rembold, and B.O. Nnaji. </author> <title> Computer Integrated Manufacturing and Engineering. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1993. </year>
Reference-contexts: Design for Manufacturing [VFSE95]. DfM can be seen as a variant of Concurrent Engineering. The scope of DfM is the engineering process of discrete complex industrial artifacts, usually separated into upstream processes (product design) and downstream processes (production realisa-tion, including engineering, planning, and manufacturing) <ref> [SRN93] </ref>. The essential part of DfM is the early involvement of specialists from downstream processes in the upstream design process. Thus, the strengthening of the design process by overlapping design phases requires extensive cooperation and coordination facilities.
Reference: [TV95] <author> T. Tesch and P. Verkoulen. </author> <title> Deliverable II.2: Requirements for the TransCoop Transaction Model. Report TC/REP/GMD/D2-2/207, Esprit Project No. </title> <type> 8012, </type> <year> 1995. </year>
Reference-contexts: analysis and related approaches 2.1 Cooperative application domains investi gated in TRANSCOOP In the TRANSCOOP project, we investigated three kinds of cooperative application scenarios with respect to requirements for a cooperative transaction model and its specification language, namely Cooperative Hypermedia Document Authoring (CDA), Design for Manufacturing (DfM), and Workflow applications <ref> [TV95, VT95] </ref>. Cooperative Hypermedia Document Authoring [TW95]. CDA is characterised by multiple authors interactively working on shared hypermedia documents. Hypermedia document authoring can be considered as a design problem solving process [HF86], mainly charac-terised by the decomposition into smaller subproblems and their solution by interacting activities. <p> The above cooperative application scenarios (CDA, DfM, and Workflow) can be classified by emphasising different 2 aspects of the communication, collaboration and coordina-tion properties of CSCW systems [EGR91]. In our investigation, we recognised the following characteristics (for details, refer to <ref> [TV95, VT95, TW95, VFSE95, JLP + 95] </ref>): * Multiple concurrent users are involved in multiple activities to satisfy a common goal, or to produce a com mon product or artifact. * Activities are processed interactively by humans and are usually of long duration. * Cooperative work is characterised by alternating peri <p> The model builds on the observation stated in Section 2 that cooperative work is char-acterised by alternating periods of individual and joint work <ref> [TV95, TW95, Kai95] </ref>. During individual work periods, users try out alternative problem solutions while coworkers may work simultaneously on the same subject. Access to and use of shared data should neither block other users, nor should it affect co-workers unintendedly.
Reference: [TW95] <author> T. Tesch and J. Wasch. </author> <title> Transaction support for cooperative hypermedia document authoring: A study on requirements. </title> <booktitle> In Proc. of 8th ERCIM Database Research Group Workshop on Database Issues and Infrastructure in Cooperative Information Systems, </booktitle> <pages> pages 3142, </pages> <address> Trondheim, Norway, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: The TRANSCOOP cooperative transaction model COACT [RKT + 95, WK96, KTW96b] provides the basic transactional support to ensure consistent management of shared data in cooperative applications. The research activities in TRANSCOOP began with an analysis of different cooperative application scenarios, namely cooperative authoring <ref> [TW95] </ref>, Design for Manufacturing [VFSE95] and workflow applications [JLP + 95], and an analysis of existing approaches to support cooperative work. These analyses, together with the requirements derived from them, are presented in Section 2. <p> Cooperative Hypermedia Document Authoring <ref> [TW95] </ref>. CDA is characterised by multiple authors interactively working on shared hypermedia documents. Hypermedia document authoring can be considered as a design problem solving process [HF86], mainly charac-terised by the decomposition into smaller subproblems and their solution by interacting activities. <p> The above cooperative application scenarios (CDA, DfM, and Workflow) can be classified by emphasising different 2 aspects of the communication, collaboration and coordina-tion properties of CSCW systems [EGR91]. In our investigation, we recognised the following characteristics (for details, refer to <ref> [TV95, VT95, TW95, VFSE95, JLP + 95] </ref>): * Multiple concurrent users are involved in multiple activities to satisfy a common goal, or to produce a com mon product or artifact. * Activities are processed interactively by humans and are usually of long duration. * Cooperative work is characterised by alternating peri <p> The model builds on the observation stated in Section 2 that cooperative work is char-acterised by alternating periods of individual and joint work <ref> [TV95, TW95, Kai95] </ref>. During individual work periods, users try out alternative problem solutions while coworkers may work simultaneously on the same subject. Access to and use of shared data should neither block other users, nor should it affect co-workers unintendedly.
Reference: [VFSE95] <author> P. A. C. Verkoulen, F. J. Faase, A. W. Selders, and P. J. J. Oude Egberink. </author> <title> Requirements for an advanced database transaction model to support Design for Manufacturing. </title> <booktitle> In Proceedings of the Flexible Automation and Intelligent Manufacturing Conference, </booktitle> <pages> pages 102113. </pages> <publisher> Begell House, Inc. </publisher> <address> New York - Wallingtord (U.K.), June 1995. Stuttgart, Germany. </address>
Reference-contexts: The TRANSCOOP cooperative transaction model COACT [RKT + 95, WK96, KTW96b] provides the basic transactional support to ensure consistent management of shared data in cooperative applications. The research activities in TRANSCOOP began with an analysis of different cooperative application scenarios, namely cooperative authoring [TW95], Design for Manufacturing <ref> [VFSE95] </ref> and workflow applications [JLP + 95], and an analysis of existing approaches to support cooperative work. These analyses, together with the requirements derived from them, are presented in Section 2. <p> An important characteristic of these processes is that the documents to be produced can be described only vaguely in advance. Authoring activities require a high degree of flexibility in choosing the next actions to end up with the aimed document. Design for Manufacturing <ref> [VFSE95] </ref>. DfM can be seen as a variant of Concurrent Engineering. The scope of DfM is the engineering process of discrete complex industrial artifacts, usually separated into upstream processes (product design) and downstream processes (production realisa-tion, including engineering, planning, and manufacturing) [SRN93]. <p> The above cooperative application scenarios (CDA, DfM, and Workflow) can be classified by emphasising different 2 aspects of the communication, collaboration and coordina-tion properties of CSCW systems [EGR91]. In our investigation, we recognised the following characteristics (for details, refer to <ref> [TV95, VT95, TW95, VFSE95, JLP + 95] </ref>): * Multiple concurrent users are involved in multiple activities to satisfy a common goal, or to produce a com mon product or artifact. * Activities are processed interactively by humans and are usually of long duration. * Cooperative work is characterised by alternating peri
Reference: [vKSA + 95] <author> M. van Keulen, J. Skowronek, P.M.G. Apers, H. Balsters, H.M. Blanken, R.A. de By, and J. Flok-stra. </author> <title> A framework for representation, validation and implementation of database application semantics. </title> <booktitle> In Proc. of the sixth IFIP Conference on Database Semantics, </booktitle> <month> May 30 June 2 </month> <year> 1995. </year> <institution> At-lanta, Georgia. </institution>
Reference-contexts: The specification language is designed on top of the formal specification language LOTOS/TM [dBEV95, EFdB96], which in turn is based on the specification language LOTOS [BB89], and the TM database specification language and design tools, developed at the University of Twente <ref> [FB96, BBdB + 96, vKSA + 95, FvKS94, BdBZ93] </ref>. Within the TRANSCOOP project, the COACT transaction model has been implemented as an extension of the object-oriented database management system VO-DAK [GI95] (developed at GMD-IPSI).
Reference: [VT95] <author> P. Verkoulen and T. Tesch. </author> <title> Deliverable II.1: Requirements for the TransCoop Specification Language. Report TC/REP/UT/D2-1/014, Esprit Project No. </title> <type> 8012, </type> <year> 1995. </year>
Reference-contexts: analysis and related approaches 2.1 Cooperative application domains investi gated in TRANSCOOP In the TRANSCOOP project, we investigated three kinds of cooperative application scenarios with respect to requirements for a cooperative transaction model and its specification language, namely Cooperative Hypermedia Document Authoring (CDA), Design for Manufacturing (DfM), and Workflow applications <ref> [TV95, VT95] </ref>. Cooperative Hypermedia Document Authoring [TW95]. CDA is characterised by multiple authors interactively working on shared hypermedia documents. Hypermedia document authoring can be considered as a design problem solving process [HF86], mainly charac-terised by the decomposition into smaller subproblems and their solution by interacting activities. <p> The above cooperative application scenarios (CDA, DfM, and Workflow) can be classified by emphasising different 2 aspects of the communication, collaboration and coordina-tion properties of CSCW systems [EGR91]. In our investigation, we recognised the following characteristics (for details, refer to <ref> [TV95, VT95, TW95, VFSE95, JLP + 95] </ref>): * Multiple concurrent users are involved in multiple activities to satisfy a common goal, or to produce a com mon product or artifact. * Activities are processed interactively by humans and are usually of long duration. * Cooperative work is characterised by alternating peri
Reference: [WA95] <author> J. Wasch and K. Aberer. </author> <title> Flexible design and efficient implementation of a hypermedia document database system by tailoring semantic relationships. </title> <booktitle> In Proc. of the sixth IFIP Conference on Database Semantics, </booktitle> <month> May 30 June 2 </month> <year> 1995. </year> <institution> At-lanta, Georgia. </institution>
Reference-contexts: An operation is considered to be atomic and transfers a consistent workspace state to another consistent state. The COACT model assumes an environment where the sequence of operations executed in a workspace is composed interactively, by the user at run-time (as in the hypermedia authoring system SEPIA <ref> [SHH + 92, WA95, BWAH96] </ref>). A user selects a next operation from the predefined operation set associated with the cooperative activity. The actual input parameters to the operation are given explicitly by the user. Information exchange among workspaces in COACT is based on the exchange of operations instead of data. <p> The SEPIA hierarchical hypertext document structure 7 and the corresponding operations for the creation and ma-nipulation of SEPIA document structures are modelled explicitly by means of the VODAK Manipulation Language (VML) in the database schema <ref> [WA95, BWAH96] </ref>. The TRANSCOOP demonstrator system provides information about the current participants and their work progress to establish group awareness. For example, when a delegation is performed, the delegatee is notified in order to control the integration of the respective piece of work into his or her workspace.
Reference: [Wei88] <author> W. E. Weihl. </author> <title> Commutativity-based concurrency control for abstract data types. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(12):14881505, </volume> <year> 1988. </year>
Reference-contexts: Other co-workers can then retrieve the saved information using the import operation de scribed above. The COACT history merge mechanism ensures that only consistent parts of workspaces are exchanged. Consistent units of work are identified by examining the backward commutativity relation <ref> [Wei88, LMWF94] </ref> between operations contained in a workspace history. The incorporation of operations into a workspace is then realised by the re-execution of the operations in the destination workspace. <p> Hence, the behaviour of a re-executed operation in terms of output results is indistinguishable from its initial execution. We use the forward commutativity relation <ref> [Wei88, LMWF94] </ref> to check this. If the merge process cannot be performed without violating the semantical correctness, the merge algorithm identifies different consistent sets of operations; one of these solutions can then be used in the merge instead.
Reference: [WK96] <author> J. Wasch and W. Klas. </author> <title> History merging as a mechanism for concurrency control in cooperative environments. </title> <booktitle> In Proceedings of RIDE-Interoperability of Nontraditional Database Systems, </booktitle> <pages> pages 7685, </pages> <address> New Orleans, USA, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: The TRANSCOOP specification language COCOA allows the declarative specification of workflow-like cooperative scenarios [FEdBA97]. The TRANSCOOP cooperative transaction model COACT <ref> [RKT + 95, WK96, KTW96b] </ref> provides the basic transactional support to ensure consistent management of shared data in cooperative applications. <p> In the following, we describe the building blocks of the TRANSCOOP transaction model and specification language, together with the aspects of cooperative work that they support. 3.1 Workspaces and exchange facilities The Cooperative Activity Model (COACT) comprises the core of the TRANSCOOP transaction model <ref> [RKT + 95, WK96, KTW96b] </ref>. The model builds on the observation stated in Section 2 that cooperative work is char-acterised by alternating periods of individual and joint work [TV95, TW95, Kai95]. During individual work periods, users try out alternative problem solutions while coworkers may work simultaneously on the same subject. <p> Each cooperative activity is described by (1) a set of operations that can be invoked by a user in the user's private workspace, and (2) a set of type-specific merging rules that exploit the semantics of operations to guide the process of information exchange (history merging) <ref> [WK96, KTW96b] </ref>. Operations are the smallest units of work within a cooperative activity. An operation is considered to be atomic and transfers a consistent workspace state to another consistent state. <p> It is assumed that all users integrate their relevant contributions into the common workspace to produce a single result of the cooperative activity. The merge mechanism and its properties are discussed in detail in <ref> [KTW96b, WK96] </ref>. Facilities to define data operations, data exchange operations, and the forward and backward commutativity relations required by the COACT transaction model are available in the COCOA specification language for cooperative scenarios [FEdB96, FEdBA97]. COCOA extends the object-oriented database schema specification language TM [BBdB + 96].
Reference: [WL93] <author> U. K. Wiil and J. J. Leggett. </author> <title> Concurrency control in collaborative hypertext systems. </title> <booktitle> In Proc. of the fifth ACM Conference on Hypertext, </booktitle> <pages> pages 1418, </pages> <month> November </month> <year> 1993. </year> <institution> Seattle, </institution> <address> Washington. </address>
Reference-contexts: Groupware. Most groupware systems [EGR91] synchro-nise cooperative access to shared data in a more or less ad hoc manner. Concurrency control in most cooperative hypertext systems is based on mechanisms like explicit user-controlled locking of objects, different lock modes, extended lock semantics, and notifications <ref> [WL93, GS87] </ref>. Some systems use floor passing protocols [GS87] to syn-chronise concurrent operations on shared data, thereby limiting the availability of data. Some systems do not provide any concurrency control at all, but rely on social protocols [EGR91].
Reference: [WR92] <author> H. Wachter and A. Reuter. </author> <title> The ConTract model. </title> <editor> In Elmagarmid [Elm92], </editor> <volume> chapter 7, </volume> <pages> pages 219264. 10 </pages>
Reference-contexts: These mechanisms enable a cooperative behaviour by exchanging parts of transactions between concurrent users. Transactional workflow approaches [RS95] usually include specification languages to express various execution constraints for a set of tasks. This can be done either by supporting a script language (as in the ConTract model <ref> [WR92] </ref>), by a declarative specification of the execution structure in terms of externally visible execution states [ARSS93], or by ECA rules [DHL90].
References-found: 62

