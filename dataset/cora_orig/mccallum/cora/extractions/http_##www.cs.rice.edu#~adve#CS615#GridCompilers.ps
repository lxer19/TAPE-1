URL: http://www.cs.rice.edu/~adve/CS615/GridCompilers.ps
Refering-URL: http://www.cs.rice.edu/~adve/comp615.html
Root-URL: 
Title: a a g g a a  a a  a a i i  a a i i  
Author: e e o o p p l l r r d d e e L s s o o C C m m n n l l r r d d Ken Kennedy 
Address: i i  
Affiliation: u u  b b  u u  Center for Research on Parallel Computation Rice University  
Note: 1 of 26  
Date: December 8, 1997  
Abstract: Computational grids will pose new challenges for application developers. These challenges go far beyond the similar challenges of programming for scalable parallelism. As a result, powerful new application development support strategies are needed to make the process more accessible to ordinary scientists and engineers. This paper reviews the technologies developed for support of application development for scalable parallel computers and discusses how these might be extended to support development for heterogeneous distributed systems. It then considers three paradigms that might be used for application development on such systems and analyzes the component technologies that will be needed to support these paradigms. 1.0 Introduction High performance distributed computing presents significant new problems and opportunities for programming language designers and implementers and runtime system developers. These problems go well beyond those of homogeneous parallel computing because distributed systems are likely to exhibit the following qualities: 1. Distributed systems will be heterogeneousthat is the components will vary in both power 
Abstract-found: 1
Intro-found: 1
Reference: <author> Languages, </author> <title> Compilers and RunTime Libraries for Computational Grids 22 of 26 management, and problem decomposition. Although many of the key technologies developed for scalable parallel computation can be used here, they will need to be extended and augmented to handle the new challenges presented by heterogeneous distributed computing configurations. Beyond the baseline of message-passing across nodes, three general approaches seem promising for computational grids: </title>
Reference: 1. <institution> Environments for task or application composition based on scripting language or graphical user interfaces; </institution>
Reference: 2. <editor> Application development for a global shared memory over the grid, </editor> <title> provided by a combina tion of hardware and software distributed shared memory; and </title>

References-found: 3

