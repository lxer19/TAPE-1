URL: http://www.idt.unit.no/~epos/Papers/jicae-epos.ps
Refering-URL: http://www.idt.unit.no/~epos/bibliografia.html
Root-URL: 
Title: Integrated Product and Process Management in EPOS bottom-level EPOSDB offers a traditional ER data model
Author: Bjtrn P. Munch Reidar Conradi, Jens-Otto Larsen, Minh N. Nguyen, Per H. Westby, fconradi, jensotto, nguyen, phwg 
Note: Published in special issue of JICAE  The  Detailed address:  
Address: (NTH), Trondheim, Norway  Telematics, NTH, N-7034 Trondheim, Nor-way.  
Affiliation: Norwegian Institute of Technology  Dept. of Computer Systems and  
Email: Email: bjornmu@idt.unit.no. Email co-authors:  @idt.unit.no  
Phone: Phone: +47 73 594484, Fax: +47 73 594466,  
Date: June 26, 1995  1996  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: <author> Barghouti, N. S. and Kaiser, G. E. </author> <year> (1992). </year> <title> Scaling Up Rule-Based Development Environments. </title> <journal> International Journal on Software Engineering and Knowledge Engineering, World Scientific, </journal> <volume> 2(1) </volume> <pages> 59-78. </pages>
Reference-contexts: Process modeling (PM) assumes suitable modeling language (s), methods and tools, and has become a discipline in its own right. Many process support environments were initially single-user, but are now being upgraded to multi-user, like MARVEL <ref> (Barghouti and Kaiser, 1992) </ref>, and with full DBMS support (Deux et al., 1991) and partly with versioning and cooperative transactions. There is also a trend to explicitly express the process dimension in CAE environments (Penedo and Riddle, 1992).
Reference: <author> Belady, L. A. and Lehman, M. M. </author> <year> (1979). </year> <title> Characteristics of Large Systems. </title> <editor> In Peter Wegner, editor, </editor> <booktitle> Research directions in Software Technology. </booktitle> <publisher> MIT Press. </publisher>
Reference: <author> Belkhatir, N., Estublier, J., and Melo, W. </author> <year> (1993). </year> <title> Software Process Model and Work Space Control in the Adele System. </title> <booktitle> In (Osterweil, </booktitle> <year> 1993), </year> <pages> pages 2-11. </pages>
Reference-contexts: The same goes for the emergence of object-oriented databases (Kim and Lochovsky, 1989), and more sophisticated transaction models (Korth et al., 1988; Kaiser, 1990). There are also configuration management (CM) systems (Tichy, 1994), and versioned databases like ADELE <ref> (Belkhatir et al., 1993) </ref> and ClearCase (Leblang, 1994), being utilized by commercial CAE tools, e.g. in software engineering. Such CM systems have gradually been extended with facilities for activity or process control (ADELE, EPOS). Almost all CM systems support versioning in some form. <p> We also emphasize the integration of CM and PM into a consistent, common environment, by using the same underlying formalisms (data model, versioning etc.) for both. Our customizable product model is inspired by the family concept in ADELE <ref> (Belkhatir et al., 1993) </ref>. It is not oriented towards any specific development method or programming language, though it is oriented towards software development. On the other hand, our basic PM formalisms and tools are independent of particular product models. <p> This binding is called a version-choice, and will select the visible version of the entire database. Then a selection in the product space can be done. This is the inverse binding sequence of that in most other CM systems, although ADELE <ref> (Belkhatir et al., 1993) </ref> has an intermixed product/version binding sequence. Changes are carried out in a long transaction (see below). A transaction is characterized by an ambition which may have unbound value-settings for options, thus specifying a set of potential versions to be affected.
Reference: <author> Boudier, G., Gallo, F., Minot, R., and Thomas, I. </author> <year> (1988). </year> <title> An Overview of PCTE and PCTE+. </title> <booktitle> In Proc. of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <address> Boston, Massachusetts, </address> <month> November 28-30, </month> <pages> pages 248-257. </pages>
Reference-contexts: The above-mentioned projects and cooperative activities constitute part of this process. 1.2 State of the Art In recent years, many computerized CAE tools and environments have been developed to support the human constructors of such artifacts. This include CASE tools (Fuggetta, 1993), software engineering environments (e.g. PCTE <ref> (Boudier et al., 1988) </ref>, EAST (Bourguignon, 1989) etc.) and CAE environments (Quester, 1992). Both the product and process dimension must be modeled. Below, we will comment these two dimensions: Product 1 The product is normally supported by a logically centralized database, but perhaps with physically distributed product (or project) sub-databases. <p> Attributes are inherited by subtypes. There is a predefined type longfield. Instances of this type (or subtypes) have additional operations for checkin/checkout of the file contents. This is similar to the contents attribute of the File type in PCTE <ref> (Boudier et al., 1988) </ref>. A relationship type is an association between two entity types. A relationship instance is a particular link between two entities, and has no identity of its own. A relationship subtype may add attributes, and also restrict one or both roles, or restrict cardinalities.
Reference: <author> Bourguignon, J. P. </author> <year> (1989). </year> <title> The EAST Eureka project: </title> <booktitle> European Software Advanced Technology. In Software Engineering Environments: Research and Practice. </booktitle> <publisher> Ellis Horwood Limited, </publisher> <address> ISBN 0-7458-0665-1. </address>
Reference-contexts: This include CASE tools (Fuggetta, 1993), software engineering environments (e.g. PCTE (Boudier et al., 1988), EAST <ref> (Bourguignon, 1989) </ref> etc.) and CAE environments (Quester, 1992). Both the product and process dimension must be modeled. Below, we will comment these two dimensions: Product 1 The product is normally supported by a logically centralized database, but perhaps with physically distributed product (or project) sub-databases.
Reference: <author> Conradi, R., Aarsten, A., Jaccheri, M. L., Larsen, J., Mazzi, C., Nguyen, N. M., and H.Westby, P. </author> <year> (1991a). </year> <title> The EPOS approach to the ISPW7 software process modeling example problem. </title> <booktitle> In Proc. 7th International Software Process Workshop, </booktitle> <year> 1991. </year> <note> 40 p. </note>
Reference-contexts: However, the entire EPOS PSE is now being used for medium-scale experiments on top of the multi-user EPOSDB. We have made a canonical demo example, that exists in a single and multi-user version, with about 20 activities covering design and coding. The ISPW7 example <ref> (Conradi et al., 1991a) </ref> was done in a few days, and caused no serious problems. We are now proceeding with ISPW9. We have also conducted xperiments with converting actual, RCS based software archives to COV.
Reference: <author> Conradi, R. et al. </author> <year> (1992a). </year> <title> Design, Use, and Implementation of SPELL, A Language for Software Process Modeling and Evolution. </title> <booktitle> In (Derniame, </booktitle> <year> 1992), </year> <pages> pages 167-177. </pages>
Reference-contexts: It supports several levels of abstraction and composition to model the external process elements including activities, tools, products, human, projects and meta-processes. <ref> (Conradi et al., 1992a) </ref>. Types and Model Structuring 8 the same layering as given at the end of the EPOS Summary. The underlying EPOSDB has a data model providing an EntityTypeDesc meta-type, to which SPELL augments two subtypes TaskDescriptor and DataDescriptor representing two process components: activity and product dimensions respectively.
Reference: <author> Conradi, R., Fernstrom, C., Fuggetta, A., and Snowdon, R. </author> <year> (1992b). </year> <title> Towards a Reference Framework for Process Concepts. </title> <booktitle> In (Derniame, </booktitle> <year> 1992), </year> <pages> pages 3-17. </pages>
Reference: <author> Conradi, R., Liu, C., and Hagaseth, M. </author> <year> (1995). </year> <title> Planning Support for Cooperating Transactions in EPOS. </title> <journal> Information Systems (forthcoming). </journal>
Reference-contexts: This tool is described in <ref> (Conradi et al., 1995) </ref>. The Workspace Manager is responsible for synchronizing the database contents with the workspace and to make files available for the production tools when needed. The previously mentioned ECM tool is used for this.
Reference: <author> Conradi, R., Osjord, E., Westby, P. H., and Liu, C. </author> <year> (1991b). </year> <title> Initial Software Process Management in EPOS. </title> <journal> Software Engineering Journal (Special Issue on Software process and its support), </journal> <volume> 6(5) </volume> <pages> 275-284. </pages>
Reference-contexts: Similarly, PM captured only the pure activities (Innovation, 1992) with the product as "place-holders". There is a trend to move towards integration of the concepts. 1.3 EPOS Rationale Our goal in EPOS <ref> (Conradi et al., 1991b) </ref> has been a generic, flexible, system-interpretable formalism to describe the five common process elements activities, products, tools, humans, and organizations (projects) with sufficient ease and precision.
Reference: <author> Derniame, J.-C., </author> <title> editor (1992). </title> <booktitle> Proc. Second European Workshop on Software Process Technology (EWSPT'92), </booktitle> <address> Trondheim, Norway. 253 p. </address> <publisher> Springer Verlag LNCS 635. </publisher>
Reference: <editor> Deux et al. </editor> <year> (1991). </year> <title> The O 2 System. </title> <journal> Comm. of the ACM, </journal> <volume> 34(10) </volume> <pages> 34-48. </pages>
Reference-contexts: Process modeling (PM) assumes suitable modeling language (s), methods and tools, and has become a discipline in its own right. Many process support environments were initially single-user, but are now being upgraded to multi-user, like MARVEL (Barghouti and Kaiser, 1992), and with full DBMS support <ref> (Deux et al., 1991) </ref> and partly with versioning and cooperative transactions. There is also a trend to explicitly express the process dimension in CAE environments (Penedo and Riddle, 1992). This is done through an explicit process model, having an associated process engine interacting with CAE tools and their human users.
Reference: <author> Feiler, P. H. and Humphrey, W. S. </author> <year> (1993). </year> <title> Software Process Development and Enactment: Concepts and Definitions. </title> <booktitle> In (Osterweil, </booktitle> <year> 1993), </year> <pages> pages 28-40. </pages>
Reference: <author> Feldman, S. I., </author> <title> editor (1993). </title> <booktitle> Proceedings of the Fourth International Workshop on Software Configuration Management (SCM-4), </booktitle> <address> Baltimore, Maryland, </address> <month> May 21-22. </month>
Reference: <author> Fuggetta, A. </author> <year> (1993). </year> <title> A Classification of CASE Technology. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 25-38. </pages> <note> 1 Gregersen, </note> <author> F., Kvernevik, I. A., Skeide, S., Skoglund, T. R., Stokke, F., Wilhelmsen, T. I., and Zhu, W. </author> <year> (1992). </year> <title> BEAtE | Type Browser, Editor and Analyzer for ("til") EPOS PM. 394 p. incl. Appendices (Student Project Work). </title>
Reference-contexts: The above-mentioned projects and cooperative activities constitute part of this process. 1.2 State of the Art In recent years, many computerized CAE tools and environments have been developed to support the human constructors of such artifacts. This include CASE tools <ref> (Fuggetta, 1993) </ref>, software engineering environments (e.g. PCTE (Boudier et al., 1988), EAST (Bourguignon, 1989) etc.) and CAE environments (Quester, 1992). Both the product and process dimension must be modeled.
Reference: <author> Holager, P. </author> <year> (1988). </year> <title> Elements of the Design of a Change Oriented Configuration Management Tool. </title> <type> Technical Report STF44-A88023, 95 p., </type> <institution> ELAB, SINTEF, Trondheim, Norway. Informix (1991). C-ISAM Programmer's Manual. Informix Software, Inc., </institution> <address> Menlo Park, Cali-fornia, 5.0 edition. </address>
Reference: <author> Innovation, C. G. </author> <year> (1992). </year> <title> Process WEAVER General Information Manual. </title>
Reference-contexts: In short, we can say that CM and PM systems are moving towards each other: Early product models captured only the passive product without any behavior. Similarly, PM captured only the pure activities <ref> (Innovation, 1992) </ref> with the product as "place-holders".
Reference: <author> Jaccheri, M. L. and Conradi, R. </author> <year> (1993). </year> <title> Techniques for Process Model Evolution in EPOS. </title> <journal> IEEE Trans. on Software Engineering, </journal> <pages> pages 1145-1156. </pages> <note> (special issue on Process Model Evolution). </note>
Reference-contexts: Support for customization and evolution For a summary on how some of the previously mentioned PSEs manage evolution and customization of their PM support, see <ref> (Jaccheri and Conradi, 1993) </ref>. In EPOS, vertical evolution is done by object-oriented subtyping, and subproject refinement. Horizontal evolution is done by customization and versioning between projects, and by incremental (re)construction of task networks by a Planner. Since evolution of practically all process fragments is pervasive, a reflective PML is required. <p> The type-level procedures t create, t change, and t delete defined in meta-types are used to manipulate the Process Schema. During type evolution, three levels of consistency/impact are analyzed: internal-type, mutual-type, and type-instance. A set of consistency constraints in the local Project type will be consulted <ref> (Jaccheri and Conradi, 1993) </ref>, e.g. all the "required-types" must exist. Type changes may also have a profound impact on its instances, and on instances of "affected-types". The feasibility of a requested type change must be evaluated against its possible impact on the whole Process Schema and its instances.
Reference: <author> Kaiser, G. E. </author> <year> (1990). </year> <title> A flexible transaction model for software engineering. </title> <booktitle> In Proc. 6th International Conference on Data Engineering, </booktitle> <pages> pages 560-567, </pages> <address> Los Angeles, CA. </address> <institution> IEEE Computer Society. </institution> <type> Invited paper. </type>
Reference: <editor> Kim, W. and Lochovsky, F. H., editors (1989). </editor> <title> Object-Oriented Concepts, Databases and Applications. </title> <publisher> ACM Press Frontier Series. Addison-Wesley. </publisher>
Reference-contexts: The emergence of standard formats and protocols for data exchange, such as CORBA (OMG, 1992), must be judged on this background. The same goes for the emergence of object-oriented databases <ref> (Kim and Lochovsky, 1989) </ref>, and more sophisticated transaction models (Korth et al., 1988; Kaiser, 1990). There are also configuration management (CM) systems (Tichy, 1994), and versioned databases like ADELE (Belkhatir et al., 1993) and ClearCase (Leblang, 1994), being utilized by commercial CAE tools, e.g. in software engineering.
Reference: <author> Korth, H., Kim, W., and Bancilhon, F. </author> <year> (1988). </year> <note> On Long-Duration CAD Transactions. Information Science. Also in (Zdonik and (Eds.), </note> <year> 1990). </year>
Reference: <author> Leblang, D. B. </author> <year> (1994). </year> <title> The CM Challenge: Configuration Management that Works. </title> <booktitle> In (Tichy, 1994), chapter 1, </booktitle> <pages> pages 1-37. </pages> <publisher> John Wiley. </publisher>
Reference-contexts: The same goes for the emergence of object-oriented databases (Kim and Lochovsky, 1989), and more sophisticated transaction models (Korth et al., 1988; Kaiser, 1990). There are also configuration management (CM) systems (Tichy, 1994), and versioned databases like ADELE (Belkhatir et al., 1993) and ClearCase <ref> (Leblang, 1994) </ref>, being utilized by commercial CAE tools, e.g. in software engineering. Such CM systems have gradually been extended with facilities for activity or process control (ADELE, EPOS). Almost all CM systems support versioning in some form.
Reference: <author> Lie, A. et al. </author> <year> (1989). </year> <title> Change Oriented Versioning in a Software Engineering Database. </title> <editor> In Walter F. Tichy (Ed.): </editor> <booktitle> Proc. 2nd International Workshop on Software Configuration Management, </booktitle> <address> Princeton, USA, 25-27 Oct. </address> <year> 1989, </year> <title> 178 p. </title> <booktitle> In ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 14 (7), </volume> <pages> pages 56-65. </pages>
Reference: <author> Liu, C. and Conradi, R. </author> <year> (1993). </year> <title> Automatic Replanning of Task Networks for Process Model Evolution in EPOS. </title> <editor> In (Sommerville and Paul, </editor> <year> 1993), </year> <pages> pages 434-450. </pages>
Reference-contexts: The BMS is working closely with the Execution Manager to facilitate communication and integration between external tools. Planner The Planner meta-tool <ref> (Liu and Conradi, 1993) </ref> is technically a procedure implicitly and incrementally invoked by the Execution Manager to detail composite tasks, as indicated 11 above. That is, the Planner will automatically generate a new subtask network for such tasks and so on in due time. <p> It applies backward chaining and hierarchical decomposition, combined with domain-specific knowledge, to build a proper subtask network (a plan in AI terms). The planning is based on the Process Schema as a knowledge base, and a representation/model of the Product Structure as a world state description <ref> (Liu and Conradi, 1993) </ref>. The Planner utilizes four additional type-level attributes: * PRE STATIC and POST STATIC express necessary conditions that must hold, respectively, before and after execution of a task of the given task type. <p> Note: An empty CODE assumes a non-empty DECOMPOSITION . None of the above attributes are supposed to have any side-effects upon (re)evaluation, thus facilitating goal-oriented reasoning. Clearly, changes to these schema attributes and to the product structure imply replanning. An incremental algorithm for replanning is presented in <ref> (Liu and Conradi, 1993) </ref>. Schema Manager The Schema Manager (Gregersen et al., 1992) meta-tool is responsible for browsing, editing, defining, analyzing, translating and evolving the Process Schema. It consists of a Type Navigator, a Textual/Graphical Editor, a Consistency Checker, and an Impact Analyst.
Reference: <author> Lonchamp, J. </author> <year> (1993). </year> <title> A Structured Conceptual and Terminological Framework for Software Process Engineering. </title> <booktitle> In (Osterweil, </booktitle> <year> 1993), </year> <pages> pages 41-53. </pages>
Reference: <author> Munch, B. P. </author> <year> (1993). </year> <title> Versioning in a Software Engineering Database | the Change Oriented Way. </title> <type> PhD thesis, </type> <institution> DCST, NTH, Trondheim, Norway. </institution> <type> 265 p. (PhD thesis NTH 1993:78). </type>
Reference-contexts: The overall architecture is shown together with the EPOSDB architecture in Figure 1. 3 Product Support This section discusses the EPOS product support and product model, as well as various aspects of the supporting EPOSDB <ref> (Munch, 1993) </ref>. The main task of the product support is to manage storage of, and access to, an evolving, complex product. The product may consist of files and/or database objects. <p> For example, it should be possible for Mary to automatically have John's changes checked out into her workspace as soon as he is finished. 7 EPOS Implementation and Experience EPOS runs on Unix-based workstations, p.t. Sun-4, and using the X Window System. EPOSDB <ref> (Munch, 1993) </ref> is built on top of C-ISAM (Informix, 1991), an index-sequential file system, and is based on client-server protocols using Sun RPC. It is implemented by 30,000 lines in C and 500 in Prolog, and offers a Prolog based DDL/DML interface built upon the internal C interface.
Reference: <author> Munch, B. P., Larsen, J.-O., Gulla, B., Conradi, R., and Karlsson, E.-A. </author> <year> (1993). </year> <title> Uniform Versioning: The Change-Oriented Model. </title> <editor> In (Feldman, </editor> <year> 1993), </year> <pages> pages 188-196. </pages> <month> OMG </month> <year> (1992). </year> <title> OMG CORBA Common Object Request Broker Architecture Specification. Object Management Group, 492 Old Connecticut Path, Framingham, </title> <address> MA 01701, USA. </address>
Reference-contexts: The overall architecture is shown together with the EPOSDB architecture in Figure 1. 3 Product Support This section discusses the EPOS product support and product model, as well as various aspects of the supporting EPOSDB <ref> (Munch, 1993) </ref>. The main task of the product support is to manage storage of, and access to, an evolving, complex product. The product may consist of files and/or database objects. <p> For example, it should be possible for Mary to automatically have John's changes checked out into her workspace as soon as he is finished. 7 EPOS Implementation and Experience EPOS runs on Unix-based workstations, p.t. Sun-4, and using the X Window System. EPOSDB <ref> (Munch, 1993) </ref> is built on top of C-ISAM (Informix, 1991), an index-sequential file system, and is based on client-server protocols using Sun RPC. It is implemented by 30,000 lines in C and 500 in Prolog, and offers a Prolog based DDL/DML interface built upon the internal C interface.
Reference: <author> Osterweil, L., </author> <title> editor (1993). </title> <booktitle> Proc. 2nd Int'l Conference on Software Process (ICSP'2), </booktitle> <address> Berlin. </address> <note> 170 p. IEEE-CS Press. 2 Paulk, </note> <author> M. C., Curtis, B., Chrissis, M. B., and Weber, C. V. </author> <year> (1993). </year> <title> Capability Maturity Model for Software, Version 1.1. </title> <type> Technical Report CMU/SEI-93-TR-24, </type> <institution> Software Engineering Institute, Pittsburgh. </institution>
Reference: <author> Penedo, M. H. and Riddle, W., </author> <title> editors (1992). </title> <booktitle> Materials from Process-sensitive Software Engineering Environment Architecture Workshop, </booktitle> <address> Denver, CO, USA. </address> <institution> Rocky Mountain Institute of Software Engineering, </institution> <address> 1113 Spruce Street, Boulder, CO, 80302 USA. </address>
Reference-contexts: There is also a trend to explicitly express the process dimension in CAE environments <ref> (Penedo and Riddle, 1992) </ref>. This is done through an explicit process model, having an associated process engine interacting with CAE tools and their human users.
Reference: <author> Penedo, M. H. and Shu, C. </author> <year> (1991). </year> <title> Acquiring Experiences with the modelling and implementation of the project life-cycle process: the PMDB work. </title> <journal> Software Engineering Journal (Special Issue on Software process and its support), </journal> <volume> 6(5) </volume> <pages> 259-274. </pages>
Reference-contexts: EPOS is implemented by standard technologies such as Unix, the X Window System, C, and Prolog. The Layered EPOS Architecture CAE environments and PSEEs that rely on an object-oriented database, e.g. PMDB <ref> (Penedo and Shu, 1991) </ref> and ADELE, often have a PML as a layer around the underlying database. EPOS extends this by having three layers around the database. The EPOS layers are: 4 1. EPOSDB: a client-server DBMS offering uniform, change-oriented versioning and a structurally object-oriented data model.
Reference: <author> Quester, R. </author> <year> (1992). </year> <title> obTIOS: A CAx-Framework Service for Building Concurrent Engineering Environments. </title> <booktitle> In Proc. of the 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <address> Washington, USA. </address> <booktitle> In ACM SIGSOFT Software Engineering Notes, </booktitle> <pages> pages 32-40. </pages>
Reference-contexts: This include CASE tools (Fuggetta, 1993), software engineering environments (e.g. PCTE (Boudier et al., 1988), EAST (Bourguignon, 1989) etc.) and CAE environments <ref> (Quester, 1992) </ref>. Both the product and process dimension must be modeled. Below, we will comment these two dimensions: Product 1 The product is normally supported by a logically centralized database, but perhaps with physically distributed product (or project) sub-databases. There are many technological trends and solutions pertaining to CAE.
Reference: <author> Rochkind, M. J. </author> <year> (1975). </year> <title> The Source Code Control System. </title> <journal> IEEE Trans. on Software Engineering, SE-1(4):364-370. </journal>
Reference-contexts: Such CM systems have gradually been extended with facilities for activity or process control (ADELE, EPOS). Almost all CM systems support versioning in some form. There are also versioning systems which are not full-fledged CM systems, the most well-known of these being RCS (Tichy, 1985) and SCCS <ref> (Rochkind, 1975) </ref>. Both of these are based on numbered revisions of the individual files, with some support for branching.
Reference: <author> Rumbaugh, J. </author> <year> (1987). </year> <title> Relations as semantics constructs in an object-oriented language. </title> <booktitle> In Proc. ACM SIGPLAN Conference on Object-Oriented Programming Systems, Languages and Applications (OOPSLA'87), </booktitle> <pages> pages 466-481, </pages> <address> Kissimmee, Florida. </address> <booktitle> In ACM SIGPLAN Notices 22(12), </booktitle> <month> Dec. </month> <year> 1987. </year> <month> SMDS </month> <year> (1990). </year> <title> Aide-de-Camp, Product Overview. </title> <booktitle> Software Maintenance & Development Systems, Incorporated, </booktitle> <address> Concord Massachusetts, 7.2 edition. </address>
Reference-contexts: The "cylinder" represents the EPOSDB proper; the rest belongs to EPOS-PM. The numbers on the far left refer to the layers listed at the end of The EPOS Summary section. Data model The EPOSDB provides an extended ER data model <ref> (Rumbaugh, 1987) </ref> with single subtyping. Named attributes can be defined, with the usual simple domains supported. Attributes are inherited by subtypes. There is a predefined type longfield. Instances of this type (or subtypes) have additional operations for checkin/checkout of the file contents.
Reference: <author> Sommerville, I. and Paul, M., </author> <title> editors (1993). </title> <booktitle> Proc. 4th European Software Engineering Conference (Garmisch-Partenkirchen, </booktitle> <address> FRG), </address> <publisher> Springer Verlag LNCS 717. </publisher>
Reference: <author> Tichy, W. F. </author> <year> (1985). </year> <title> RCS | A System for Version Control. </title> <journal> Software | Practice and Experience, </journal> <volume> 15(7) </volume> <pages> 637-654. </pages>
Reference-contexts: Such CM systems have gradually been extended with facilities for activity or process control (ADELE, EPOS). Almost all CM systems support versioning in some form. There are also versioning systems which are not full-fledged CM systems, the most well-known of these being RCS <ref> (Tichy, 1985) </ref> and SCCS (Rochkind, 1975). Both of these are based on numbered revisions of the individual files, with some support for branching. <p> strongly related to product support; these topics are discussed in the Project Support section. 3.1 The ECM Product Tool ECM ("Epos CM") is a command-line or Prolog interface to the EPOSDB, which manages the user's files and checks them into and out of the database, with commands similar to RCS <ref> (Tichy, 1985) </ref>. Checked-out configurations are stored in workspaces, which are directory hierarchies matching the product structure (see below on product model). Files can be checked in and out incrementally, or as block check-out or check-in.
Reference: <author> Tichy, W. F., </author> <title> editor (1994). Configuration Management. </title> <booktitle> (Trends in software). </booktitle> <publisher> John Wiley. </publisher> <address> ISBN 0-471-94245-6. </address>
Reference-contexts: The same goes for the emergence of object-oriented databases (Kim and Lochovsky, 1989), and more sophisticated transaction models (Korth et al., 1988; Kaiser, 1990). There are also configuration management (CM) systems <ref> (Tichy, 1994) </ref>, and versioned databases like ADELE (Belkhatir et al., 1993) and ClearCase (Leblang, 1994), being utilized by commercial CAE tools, e.g. in software engineering. Such CM systems have gradually been extended with facilities for activity or process control (ADELE, EPOS). Almost all CM systems support versioning in some form.
Reference: <author> Zdonik, S. B. and (Eds.), D. M. </author> <year> (1990). </year> <title> Readings in Object-Oriented Database Systems (collected articles). The Morgan Kaufman series in Data Management Systems. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> Los Altos, CA. ISBN 0-55860-000-0, ISSN 1046-1698. 3 1 2 3 </address>
References-found: 37

