URL: http://www.cs.vt.edu/~irchen/ps/tse99.ps
Refering-URL: http://www.cs.vt.edu/~irchen/
Root-URL: http://www.cs.vt.edu
Title: Performance and Stability Analysis of Multilevel Data Structures with Deferred Reorganization  
Author: Ing-Ray Chen and Sayed A. Banawan 
Keyword: Index Terms queueing servers, multilevel data structures, atomic operations, open and closed systems, modeling, deferred maintenance, periodic maintenance, performance analysis, stability analysis.  
Abstract: We develop a methodology for analyzing the performance and stability of a server that maintains a multilevel data structure to service a set of access operations for (key,value) records. A subset of the operations executed by the server (e.g., insert and delete) require the multilevel data structure be reorganized so that the server can execute all subsequent requests efficiently. We study how often the server should carry out data reorganization (i.e., maintenance) to maximize its performance. If the server is frequently idle then there is no need to impose the reorganization overhead on the operation requests. The reorganization overhead may be completely eliminated by utilizing server-idling periods. If the server is frequently busy, then the reorganization overhead can be minimized by performing a complete reorganization only after the server has served a sufficient number of insert/delete operations so that the amortized cost per operation is small. Therefore, the issue of how often one should perform data reorganization to minimize the average service time depends not only on the multilevel data structure maintained by the server but also on the type and intensity of the system workload. The proposed methodology is exemplified with a two-level sorted file with deferred maintenance. The performance and stability results are compared with those of a single-level binary tree data structure with on-the-fly maintenance. It is shown that deferred maintenance of the two-level sorted file outperforms on-the-fly maintenance of the single-level binary tree in both open and closed systems. Furthermore, deferred maintenance can sustain higher workload intensities without risking system stability. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W.H. Bahaa-El-Din, F.B. Bastani, and J.-E. Teng, </author> <title> "Performance analysis of periodic and concurrent data structure maintenance strategies for network servers," </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. 15, No. 12, </volume> <month> Dec. </month> <year> 1989, </year> <pages> pp. 1526-1536. </pages>
Reference-contexts: Background maintenance processes [6] were proposed to reorganize multilevel data structures concurrently with the server's foreground process [14]. Here, we study deferred maintenance [13] as a design alternative. The reason is that some experimental results <ref> [1] </ref> indicated deferred maintenance in the context of garbage collection can perform better than concurrent maintenance at high traffic situations because of the large context-switch overhead associated with concurrent maintenance, especially when there is no deterioration bound on concurrent maintenance (which makes it just a variant of deferred 2 maintenance). <p> The server supports four standard operations that may be invoked by clients: lookup or update (key: KeyType, var info: InfoType), insert (key: KeyType, info: InfoType), and delete (key: KeyType). To execute a lookup or an update operation, the server performs a binary search on the sorted array from A <ref> [1] </ref> to A [SizeA]. If the record is not found and SizeB is greater than zero, then it performs a linear search from B [1] to B [SizeB]. If the record is found, the server reads or updates the array element accordingly. <p> To execute a lookup or an update operation, the server performs a binary search on the sorted array from A <ref> [1] </ref> to A [SizeA]. If the record is not found and SizeB is greater than zero, then it performs a linear search from B [1] to B [SizeB]. If the record is found, the server reads or updates the array element accordingly. <p> Thus, array A always stores only SizeA records before the next maintenance starts, although some of which may have been marked deleted. As in <ref> [1, 8, 14] </ref>, we assume that the server system is designed to run for an infinitely long period of time, thus making it necessary that the "average" probability of deleting an existing record be equal to the "average" probability of adding a new record in the steady state.
Reference: [2] <author> F.B. Bastani, I.R. Chen, and W. Hilal, </author> <title> "A model for the stability analysis of maintenance strategies for linear list," </title> <journal> The Computer Journal, </journal> <volume> Vol. 34, No. 1, </volume> <year> 1991, </year> <pages> pp. 80-87. </pages>
Reference-contexts: We have previously modeled and studied the stability and optimality conditions of a queueing server that maintains a single-level data structure (e.g., a linear list) with deferred maintenance <ref> [2, 4] </ref>. In this paper, we extend our previous work to model and analyze servers that use multilevel data structures, where the data is organized into a hierarchy of structures in order to provide efficient implementations for all access operations [14].
Reference: [3] <author> P.A. Bernstein, V. Hadzilacos, and N. Goodman, </author> <title> Concurrency Control and Recovery in Database Systems, </title> <publisher> Addison Wesley, </publisher> <year> 1987, </year> <pages> pp. 202-203. </pages>
Reference-contexts: must wait in the queue; (b) attempt to reorganize the data structure whenever it becomes idle, i.e., when the server's queue is empty; however, if a customer arrives before the maintenance is completed, the maintenance is aborted (i.e., by discarding the scratch copy that would otherwise replace the data structure <ref> [3] </ref>) and the server resumes service immediately. Our goal is to first model this queueing system and then apply the model to uncover the stability and optimality conditions as a function of the system workload. The paper is organized as follows.
Reference: [4] <author> I.R. Chen and S.A. Banawan, </author> <title> "A reduced Markov model for the performance analysis of data structure servers with periodic maintenance," </title> <journal> The Computer Journal, </journal> <volume> Vol. 35, </volume> <year> 1992, </year> <pages> pp. </pages> <month> A363-A368. </month>
Reference-contexts: We have previously modeled and studied the stability and optimality conditions of a queueing server that maintains a single-level data structure (e.g., a linear list) with deferred maintenance <ref> [2, 4] </ref>. In this paper, we extend our previous work to model and analyze servers that use multilevel data structures, where the data is organized into a hierarchy of structures in order to provide efficient implementations for all access operations [14].
Reference: [5] <author> D.E. Denning, </author> <title> Cryptography and Data Security, </title> <publisher> Addison Wesley, </publisher> <year> 1982, </year> <pages> pp. 161-164. </pages>
Reference-contexts: Email address: irchen@cs.vt.edu. y S.A. Banawan is with Department of Computer Science, Faculty of Science, University of Qatar, P.O. Box 2713, Doha, State of Qatar. Email: banawan@qu.edu.qa. 1 that maintains a password file <ref> [5, 15] </ref>, a database server that maintains bank account or employee information with the bank account or employee name being the search key [7], a name server that maintains object location information [18], a switch in a high speed computer network that maintains routing information for active virtual circuits [16], etc.
Reference: [6] <author> E.W. Dijkstra et al., </author> <title> "On-the-fly garbage collection: An exercise in cooperation", </title> <journal> Comm. ACM, </journal> <volume> Vol. 21, No. 11, </volume> <month> Nov. </month> <year> 1978, </year> <pages> pp. 966-975. </pages>
Reference-contexts: This approach requires the use of some maintenance methods to reorganize the multilevel data structure to achieve its goal. Background maintenance processes <ref> [6] </ref> were proposed to reorganize multilevel data structures concurrently with the server's foreground process [14]. Here, we study deferred maintenance [13] as a design alternative.
Reference: [7] <author> R. Elmasri and S.B. Navathe, </author> <title> Fundamentals of database systems, </title> <booktitle> 2nd Edition, </booktitle> <address> Ben-jamin/Cummings, </address> <year> 1994, </year> <pages> pp. 84-86. </pages>
Reference-contexts: Box 2713, Doha, State of Qatar. Email: banawan@qu.edu.qa. 1 that maintains a password file [5, 15], a database server that maintains bank account or employee information with the bank account or employee name being the search key <ref> [7] </ref>, a name server that maintains object location information [18], a switch in a high speed computer network that maintains routing information for active virtual circuits [16], etc. <p> This section demonstrates the utility of the closed-form solution by considering a detailed case study. Other instances can be treated similarly. 4.1 Example: A Database Server Maintaining a Two-level Sorted File The case study under consideration is a database server that maintains a sorted disk file <ref> [7] </ref>. Records in the file are accessed given a key such as the employee's social security number. There are no duplicate keys.
Reference: [8] <author> T. Hickey, and J. Cohen, </author> <title> "Performance analysis of on-the-fly garbage collection," </title> <journal> Comm. ACM, </journal> <volume> Vol. 27, No. 11, </volume> <month> Nov. </month> <year> 1984, </year> <pages> pp. 1143-1154. </pages>
Reference-contexts: Thus, array A always stores only SizeA records before the next maintenance starts, although some of which may have been marked deleted. As in <ref> [1, 8, 14] </ref>, we assume that the server system is designed to run for an infinitely long period of time, thus making it necessary that the "average" probability of deleting an existing record be equal to the "average" probability of adding a new record in the steady state.
Reference: [9] <author> R. Jain, </author> <title> The Art of Computer Systems Performance Analysis, </title> <publisher> John Wiley and Sons, </publisher> <year> 1991, </year> <pages> pp. 555-556. </pages>
Reference-contexts: Requests arrive at rate and are served at rate q i , where q is the probability of a non-degrading operation and i is the corresponding service rate 1 . Using the utilization law of operational analysis <ref> [9] </ref>, i is given by: i = 1 otherwise and i = 1 i . The above result has two implications.
Reference: [10] <author> L. Kleinrock, </author> <title> Queueing Systems, Vol. 1: Theory, </title> <publisher> John Wiley and Sons, </publisher> <year> 1975, </year> <pages> pp. 30-31. </pages>
Reference-contexts: It is similar to Figure 1 except that it has a finite number of states and the arrival rates vary with the queue length. Here, we approximate i by the utilization of an M/M/1//N queuing system <ref> [10] </ref>. An M/M/1//N system is always ergodic 2 . Thus, for all degradation levels, the probability that the server is busy is strictly less than 1, i.e., 8i; 0 i &lt; d p ; i &lt; 1.
Reference: [11] <author> S.S. Lavenberg, </author> <title> Computer Performance Modeling Handbook., </title> <publisher> Academic Press, </publisher> <year> 1983. </year>
Reference: [12] <author> E.D. Lazowska, J. Zahorjan, G.S. Graham, and K. C. Sevcik, </author> <title> Quantitative System Performance: Computer System Analysis Using Queueing Network Models., </title> <publisher> Prentice Hall, </publisher> <year> 1984, </year> <pages> pp. 58-62 and 162-169. 25 </pages>
Reference-contexts: The paper develops a modeling methodology that can be applied to both open (e.g., transaction) and closed (e.g., batch and terminal) systems <ref> [12] </ref> for a queueing server maintaining a multilevel data structure with deferred maintenance. It does not make any assumptions regarding the workload intensity. Earlier work [14] dealt with concurrent maintenance only and made the stringent assumption that there is only a single terminal user in the whole system. <p> The customer population describes the queuing behavior of the system while the degradation level determines both the service and maintenance rates of the server in a maintenance period. The steady state solution of the underlying Markov model can be obtained using the global balance technique <ref> [12] </ref> which yields one equation per state; therefore, it is important to reduce the number of dimensions in the state representation, or the number of equations tends to grow combinatorially. <p> Below, we shall see that the same equation can be modified to determine the average service rate for closed systems as well. 3.2 Closed Systems Closed systems include both batch and terminal systems <ref> [12] </ref>. They differ from open systems in that their population cannot be arbitrarily large. The workload intensity in a batch system is specified by N , the average multiprogramming level.
Reference: [13] <author> U. Maruyama, and S. Smith, </author> <title> "Optimal reorganization of distributed space disk files" Comm. </title> <journal> ACM, </journal> <volume> Vol. 19, No. 11, </volume> <month> Nov. </month> <year> 1976, </year> <pages> pp. 245-247. </pages>
Reference-contexts: This approach requires the use of some maintenance methods to reorganize the multilevel data structure to achieve its goal. Background maintenance processes [6] were proposed to reorganize multilevel data structures concurrently with the server's foreground process [14]. Here, we study deferred maintenance <ref> [13] </ref> as a design alternative.
Reference: [14] <author> A. Moitra, S.S. Iyengar, </author> <title> F.B. Bastani, and I.L. Yen, "Multilevel data structures: models and performance," </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> Vol. 14, No. 6, </volume> <month> June </month> <year> 1988, </year> <pages> pp. 858-867. </pages>
Reference-contexts: In this paper, we extend our previous work to model and analyze servers that use multilevel data structures, where the data is organized into a hierarchy of structures in order to provide efficient implementations for all access operations <ref> [14] </ref>. This approach requires the use of some maintenance methods to reorganize the multilevel data structure to achieve its goal. Background maintenance processes [6] were proposed to reorganize multilevel data structures concurrently with the server's foreground process [14]. Here, we study deferred maintenance [13] as a design alternative. <p> hierarchy of structures in order to provide efficient implementations for all access operations <ref> [14] </ref>. This approach requires the use of some maintenance methods to reorganize the multilevel data structure to achieve its goal. Background maintenance processes [6] were proposed to reorganize multilevel data structures concurrently with the server's foreground process [14]. Here, we study deferred maintenance [13] as a design alternative. <p> The paper develops a modeling methodology that can be applied to both open (e.g., transaction) and closed (e.g., batch and terminal) systems [12] for a queueing server maintaining a multilevel data structure with deferred maintenance. It does not make any assumptions regarding the workload intensity. Earlier work <ref> [14] </ref> dealt with concurrent maintenance only and made the stringent assumption that there is only a single terminal user in the whole system. Therefore, there was no need to consider the stability issue under high traffic situations. <p> An interpretation of the dependency of the optimal deferred maintenance period on the type and intensity of the system workload is given. Finally, Section 5 summarizes the paper and outlines some future research areas. 3 2 Background and Notation Following the original definition in <ref> [14] </ref>, a multilevel data structure is a hierarchy of data structures. <p> Thus, array A always stores only SizeA records before the next maintenance starts, although some of which may have been marked deleted. As in <ref> [1, 8, 14] </ref>, we assume that the server system is designed to run for an infinitely long period of time, thus making it necessary that the "average" probability of deleting an existing record be equal to the "average" probability of adding a new record in the steady state. <p> We are interested in developing analytic models to assess the performance and stability of such designs and compare them with single-level designs that perform data reorganization on-the-fly. As mentioned before, the original work in <ref> [14] </ref> dealt only with concurrent data reorganization and made the assumption that there is only a single terminal user in the system. This paper studies deferred maintenance as a design alternative and makes no assumption regarding the workload intensity. <p> This is a classical trade-off between the accuracy of a model and its solution complexity. Fortunately, a multilevel data structure with n &gt; 2 is rarely used in practice (see <ref> [14] </ref>) and therefore in most cases, our model describes the system behavior accurately. 4 Application of the Model and Result Interpretation Equations (4) and (6) derived above coupled with Equations (5), (7) and (8) for open, batch and terminal workload systems, respectively, are a general closed-form solution for X.
Reference: [15] <author> R. Morris and K. Thompson, </author> <title> "Password security: a case study," </title> <journal> Communications of ACM, 1979, </journal> <volume> Vol. 22, </volume> <month> Nov. </month> <year> 1979, </year> <pages> pp. 594-597. </pages>
Reference-contexts: Email address: irchen@cs.vt.edu. y S.A. Banawan is with Department of Computer Science, Faculty of Science, University of Qatar, P.O. Box 2713, Doha, State of Qatar. Email: banawan@qu.edu.qa. 1 that maintains a password file <ref> [5, 15] </ref>, a database server that maintains bank account or employee information with the bank account or employee name being the search key [7], a name server that maintains object location information [18], a switch in a high speed computer network that maintains routing information for active virtual circuits [16], etc.
Reference: [16] <author> C. Patridge, </author> <title> Gigabit Networking, </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: file [5, 15], a database server that maintains bank account or employee information with the bank account or employee name being the search key [7], a name server that maintains object location information [18], a switch in a high speed computer network that maintains routing information for active virtual circuits <ref> [16] </ref>, etc. An issue that needs to be considered in the design of such servers is that after some insert/delete operations are executed, a data reorganization may be required.
Reference: [17] <author> R.Y. Rubinstein, </author> <title> Simulation and the Monte Carlo Method, </title> <publisher> John Wiley and Sons, </publisher> <year> 1981. </year>
Reference-contexts: The above two-dimensional model is too large to be solved directly for the performance metrics of interest. Numerical solutions are possible, but they are often laborious (e.g., a few hours of computation time using Monte Carlo simulation <ref> [17] </ref>). In addition, because of limited memory capacity, states with large queue sizes must be truncated, especially when d p has a large value. This makes numerical solutions inefficient and sometimes even inaccurate. Below, we apply a state reduction technique through which a closed-form solution can be derived.

References-found: 17

