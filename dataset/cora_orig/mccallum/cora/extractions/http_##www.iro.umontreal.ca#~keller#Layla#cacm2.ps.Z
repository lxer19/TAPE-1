URL: http://www.iro.umontreal.ca/~keller/Layla/cacm2.ps.Z
Refering-URL: http://www.iro.umontreal.ca/~keller/Layla/index.html
Root-URL: http://www.iro.umontreal.ca
Title: A Pattern System for Network Management Interfaces web site (containing complete template descriptions of the
Author: Jean Tessier Rudolf K. Keller Jean Tessier Rudolf K. Keller 
Keyword: Design Pattern, Pattern System, Application Framework, Network Management Interface, API (Application Programming Interface), OSI (Open Systems Interconnection), Manager-Agent pattern, Managed Object pattern, Remote Operation pattern.  
Address: Rm. 1M-317, 101 Crawfords Corner Rd., Holmdel, NJ 07733, USA  C.P. 6128, succursale Centre-ville, Montral (Qubec) H3C 3J7, Canada  
Affiliation: Applied Technologies Organization, AT&T Labs.  Dpartement dinformatique et de recherche oprationnelle Universit de Montral  
Note: Layla  Point of Contact: Ruedi Keller  
Email: e-mail: Jean.Tessier@att.com  email: keller@iro.umontreal.ca  
Phone: voice: (908) 949-7631, fax: (908) 949-8569  voice: (514) 343-6782, fax: (514) 343-5834  
Web: web: http://www.iro.umontreal.ca/~keller  
Abstract: The development of network management interfaces (NMIs) involves a variety of software layers, application programming interfaces (APIs), specification languages and tools. In order to make NMI development easier and more efficient, we have developed Layla, a prototype application framework supporting Open Systems Interconnection (OSI) NMIs. Layla is based on a heterogeneous yet coherent system of design patterns that comprises previously published patterns, several new and domain-specific patterns taken from NMI standards, as well as a couple of basic patterns relevant in Laylas API. Our research indicates that pattern-based frameworks can indeed be built for a domain as complex as NMIs, and that they have a positive impact on both the development process and the resulting NMI products. In this paper, we discuss APIs for NMIs and the need for application frameworks, describe and illustrate the pattern system underlying the Layla framework, detail three of its key patterns, and put the pattern system into perspective. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> AT&T Bell Laboratories. </author> <title> BaseWorX Application Platform (AP): Application Management Reference Guide, </title> <year> 1994. </year>
Reference-contexts: For our framework development, Teleglobe supplied us with two different APIs, both geared towards OSI NMIs as defined by the CMIS standards [12], and providing the low-level functionality required. One of them, used at the beginning of our project, is BaseWorX from AT&T <ref> [1] </ref>, the other one, on top of which the current version 1.1 of Layla is built, is DM from Hewlett Packard [4].
Reference: [2] <author> Frank Buschmann, Regine Meunier, Hans Rohnert, Peter Sommerlad, and Michael Stal. </author> <title> Pattern-Oriented Software Architecture - A System of Patterns. </title> <publisher> John Wiley and Sons, </publisher> <year> 1996. </year>
Reference-contexts: At an early stage in the development of Layla, we decided to take an approach based on design patterns. Aware of their potential of making architectures easier to modify, maintain, and reuse and of their documentation value <ref> [2, 3, 8, 11] </ref>, we wanted to verify whether these qualities also hold in a domain as complex as NMIs, and in which way domain-specific aspects would come into play. <p> Instead, the Mediator [3] pattern may be used to maintain all these relationships. Alternatively, the Remote Operation pattern may be used Agent1 Manager1 MIB1 Agent2 Manager2 MIB2 Agent3 MIB3 11 / 20 to provide location transparency. Yet another approach is to use the Broker pattern discussed in <ref> [2] </ref>. In this article, we will only cover the Remote Operation pattern, the solution we adopted in Layla for its simplicity of implementation. But before, we shall take a closer look at the Managed Object pattern governing the MIBs.
Reference: [3] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns. Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: At an early stage in the development of Layla, we decided to take an approach based on design patterns. Aware of their potential of making architectures easier to modify, maintain, and reuse and of their documentation value <ref> [2, 3, 8, 11] </ref>, we wanted to verify whether these qualities also hold in a domain as complex as NMIs, and in which way domain-specific aspects would come into play. <p> In Figure 3, patterns are grouped into strategic and tactical according to their role in Layla. 7 / 20 Each major task in Layla is described by a design pattern, many of which come from the literature <ref> [3, 10] </ref>. This indicates that the published design patterns are indeed expressive and generic enough to be easily applied to a new application domain. Several tasks and design solutions that were not already design patterns originated from the constraints imposed by the underlying network management standards. <p> The Manager is thus able to communicate with any and all the resources in the system, regardless of their origin or nature. In this capacity, the Agent acts as a large application of the Adapter pattern <ref> [3] </ref>. Furthermore, the hierarchy of the system is expressed through the organization of the Agents. This means that the Manager does not need to maintain its own map of the system, but can rely on the encapsulation provided by the Agents. <p> Note that the relationships between Managers and Agents must be maintained adequately. One approach is to have each Manager and Agent maintain their own list of collaborating opposites, resulting in a rather inflexible update scheme. Instead, the Mediator <ref> [3] </ref> pattern may be used to maintain all these relationships. Alternatively, the Remote Operation pattern may be used Agent1 Manager1 MIB1 Agent2 Manager2 MIB2 Agent3 MIB3 11 / 20 to provide location transparency. Yet another approach is to use the Broker pattern discussed in [2]. <p> Although the resources may have diverging interfaces, they need to be controlled in a uniform way, and the relationships amongst them should be taken into account. The proposed solution is to use an instance of the Adapter pattern <ref> [3] </ref> for each individual Resource, in order to translate its particular interface into one shared by all Resource instances. We call this Adapter a Managed Object. It enables management operations to be performed using a single interface. The Managed Object instances can then be aggregated using the Composite pattern [3]. <p> pattern <ref> [3] </ref> for each individual Resource, in order to translate its particular interface into one shared by all Resource instances. We call this Adapter a Managed Object. It enables management operations to be performed using a single interface. The Managed Object instances can then be aggregated using the Composite pattern [3]. The composition is called a MIB (Management Information Base). It is sensitive to all the relationships that usually exist among the Resource instances, such as hierarchy and containment. <p> The result is a flexible structure that appropriately mirrors the organization of the Resource instances and that uses a single interface for the management of these instances. An individual 12 / 20 Resource can be located by traversing the MIB (with the Iterator pattern and/or the Visitor pattern <ref> [3] </ref>) and by applying operations on the Managed Objects interface. It will in turn apply the corresponding operations to the Resource using the appropriate interface. <p> The result is a system where the invocation of a remote operation is decoupled from the network interactions needed to carry it out. This solution, referred to as Remote Operation pattern, can be seen as a refinement of the Proxy pattern <ref> [3] </ref>. It further decouples the network interactions from the Invoker and the Performer of the operation. The Remote Operation pattern brings with it a number of benefits, but also some liabilities. On the positive side, the Invoker and the Performer are shielded from the network.
Reference: [4] <author> Hewlett Packard. </author> <title> HP OpenView Distributed Management Developers Guide, </title> <month> September </month> <year> 1994. </year>
Reference-contexts: One of them, used at the beginning of our project, is BaseWorX from AT&T [1], the other one, on top of which the current version 1.1 of Layla is built, is DM from Hewlett Packard <ref> [4] </ref>. We have strived for complete encapsulation of the API into the framework, so that the classes defined for a given NMI can be compiled with one API or the other, thus making the NMI independent of the API that is actually used.
Reference: [5] <author> Hermann Hni, Ralph Johnson, and Robert Engel. </author> <title> A framework for network protocol software. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming: Systems, Languages and Applications (OOPSLA95), </booktitle> <pages> pages 358369, </pages> <address> Austin, TX, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Our pattern mining was definitely influenced by the NMI domain in that the numerous standards and tools of this domain inspired, and sometimes impeded, our work. And we can but confirm the lessons learned from framework development based on design patterns as reported elsewhere, for instance in <ref> [5, 11] </ref>. Layla is conceived as a pattern-based application framework. Its development demonstrates that pattern-based frameworks can be built for the demanding NMI domain.
Reference: [6] <institution> Javasoft (Sun Microsystems Inc.), Mountain View, CA. Java Management API, </institution> <month> May </month> <year> 1997. </year> <title> Alpha Release Documentation. </title>
Reference-contexts: The Remote Operation pattern, finally, is being used in a number of interprocess protocols, such as CMIP and the protocol suite for X.400 electronic mail. Other implementations include Suns and HPs remote procedure call libraries. Future object-oriented frameworks in the NMI domain such as JMAPI <ref> [6] </ref> are likely to leverage these patterns, in case they implement CMIS or SNMP. So far, Layla has been used by our industrial partner in several applications. Yet, a broader implementation base is needed for further validating the genericity of the framework and its pattern solutions.
Reference: [7] <author> George Pavlou, Graham Knight, Kevin McCarthy, and Saleem Bhatti. </author> <title> The OSIMIS platform: Making OSI management simple. </title> <editor> In Adarshpal Sethi, Yves Raynaud, and Fabienne Faure-Vincent, editors, </editor> <booktitle> Integrated Network Management IV, </booktitle> <pages> pages 480493. </pages> <publisher> Chapman and Hall, </publisher> <year> 1995. </year> <pages> 17 / 20 </pages>
Reference-contexts: We believe, however, that the general structure of the pattern system is now stable. The three key patterns presented in this paper have been used in various contexts beyond Layla. The Manager-Agent pattern can be found in both CMIS and SNMP, and has been implemented in the OSIMIS <ref> [7] </ref> framework. The Managed Object pattern is used in CMIS as well, whereas in SNMP it occurs but in a diluted form. The Remote Operation pattern, finally, is being used in a number of interprocess protocols, such as CMIP and the protocol suite for X.400 electronic mail.
Reference: [8] <author> Wolfgang Pree. </author> <title> Design Patterns for Object-Oriented Software Development. </title> <address> Addison-Wes-ley, </address> <year> 1994. </year>
Reference-contexts: At an early stage in the development of Layla, we decided to take an approach based on design patterns. Aware of their potential of making architectures easier to modify, maintain, and reuse and of their documentation value <ref> [2, 3, 8, 11] </ref>, we wanted to verify whether these qualities also hold in a domain as complex as NMIs, and in which way domain-specific aspects would come into play.
Reference: [9] <author> Marshall T. Rose. </author> <title> The Simple Book: An Introduction to Management of TCP/IP-based Inter-nets. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1991. </year>
Reference: [10] <author> Douglas C. Schmidt. </author> <title> Reactor: An object behavioral pattern for concurrent event demulti-plexing and event handler dispatching. </title> <editor> In James O. Coplien and Douglas C. Schmidt, editors, </editor> <booktitle> Pattern Languages of Program Design, chapter 9, </booktitle> <pages> pages 529545. </pages> <publisher> Addison-Wesley, </publisher> <year> 1995. </year> <booktitle> (Reviewed Proceedings of the First International Conference on Pattern Languages of Programming (PLoP95), </booktitle> <address> Monticello, IL, </address> <year> 1994). </year>
Reference-contexts: In Figure 3, patterns are grouped into strategic and tactical according to their role in Layla. 7 / 20 Each major task in Layla is described by a design pattern, many of which come from the literature <ref> [3, 10] </ref>. This indicates that the published design patterns are indeed expressive and generic enough to be easily applied to a new application domain. Several tasks and design solutions that were not already design patterns originated from the constraints imposed by the underlying network management standards.
Reference: [11] <author> Douglas C. Schmidt. </author> <title> Using design patterns to develop reusable object-oriented communication software. </title> <journal> Communications of the ACM, </journal> <volume> 38(10):6574, </volume> <month> October </month> <year> 1995. </year>
Reference-contexts: At an early stage in the development of Layla, we decided to take an approach based on design patterns. Aware of their potential of making architectures easier to modify, maintain, and reuse and of their documentation value <ref> [2, 3, 8, 11] </ref>, we wanted to verify whether these qualities also hold in a domain as complex as NMIs, and in which way domain-specific aspects would come into play. <p> However, since the NMI is dependent on the structures generated by the specification compiler that comes with the API (see Figure 2), this encapsulation can never be complete. THE PATTERN SYSTEM OF LAYLA Strategic patterns <ref> [11] </ref> are placed at the top, and the more generic but less critical tactical patterns are shown in the region below the separator line. 2 Arrows stand for use-relationships, indicating that the originating pattern uses the destination pattern for the functionality mentioned on the label of the arrow. (Further information addressing <p> mentioned on the label of the arrow. (Further information addressing pattern documentation and, specifically, the documentation of Layla, can be found in Box 2 Documenting patterns and pattern systems.) 2 Note that the distinction between strategic and tactical pattern refers to the role of a pattern in a particular context <ref> [11] </ref>. In Figure 3, patterns are grouped into strategic and tactical according to their role in Layla. 7 / 20 Each major task in Layla is described by a design pattern, many of which come from the literature [3, 10]. <p> Our pattern mining was definitely influenced by the NMI domain in that the numerous standards and tools of this domain inspired, and sometimes impeded, our work. And we can but confirm the lessons learned from framework development based on design patterns as reported elsewhere, for instance in <ref> [5, 11] </ref>. Layla is conceived as a pattern-based application framework. Its development demonstrates that pattern-based frameworks can be built for the demanding NMI domain.

Reference: [1] <author> European ATM Pilot project. </author> <title> Xcoop Interface Specification for the ATM Pilot, </title> <month> May </month> <year> 1994. </year> <title> Mapper Xcoop Manager Agent Xcoop MIB (15 managed objects) </title>
Reference-contexts: For our framework development, Teleglobe supplied us with two different APIs, both geared towards OSI NMIs as defined by the CMIS standards [12], and providing the low-level functionality required. One of them, used at the beginning of our project, is BaseWorX from AT&T <ref> [1] </ref>, the other one, on top of which the current version 1.1 of Layla is built, is DM from Hewlett Packard [4].
References-found: 12

