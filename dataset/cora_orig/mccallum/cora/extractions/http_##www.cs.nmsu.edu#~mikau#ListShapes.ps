URL: http://www.cs.nmsu.edu/~mikau/ListShapes.ps
Refering-URL: http://www.cs.nmsu.edu/Rsch/fac_pubs.html
Root-URL: http://www.cs.nmsu.edu
Email: email: -mikau, mhon-@cs.nmsu.edu  
Title: Assertions for Dynamic Shape Analysis of List Data Structures  
Author: Mikhail Auguston, Miu Har Hon 
Note: 1.0 Introduction  
Address: Las Cruces, NM 88003, USA  
Affiliation: Computer Science Department New Mexico State University  
Abstract: We introduce an assertion language for run-time checking of linked list data structure shapes. The assertion language is expressive enough to define characteristic predicates for data structures created with the use of pointers and dynamic memory allocation. Examples of such data structures include singly linked list, binary tree, doubly linked list, and cyclic list. These characteristic predicates may be used for automatic run-time detection of data constraint violations. Some results of experiments with a prototype assertion checker implementation for the PASCAL programming language are presented. Assertions about run-time behavior of program are practically useful and efficient means for program testing and debugging automation. There exists a large number of publications describing different formalisms for specifying program run-time properties, e.g. [Luckham 90], [Auguston 94]. Complex data structures, such as lists and trees created with the use of pointers and dynamic memory allocation are intrinsic components of almost every nontrivial program. The aim of this paper is to introduce a formalism appropriate for specifying different typical shapes of linked list data structures with the intent to check at run-time the compliance of a particular data structure with its formal specification. Violations of the data structure constraints indicate the presence of a bug in the program. A significant amount of research has been done on the static analysis of heap-allocated data structures. Although the complete static analysis is undecidable [Landi 92], there are several approximate algorithms presented, for instance, in [Ghiya, Hendren 96], [Pande et al. 94], [Sagiv, Reps 96], [Fradet, Le Metayer 97] that can recognize such linked list data structure shapes as trees, DAGs, or cyclic graphs for an important group of applications. Formalisms, such as multisets and context-free graph grammars are typically suggested for the specification of appropriate data types and for static shape checking algorithms. Nevertheless, static analysis methods in principle can not guarantee correct results in all cases. In contrast, dynamic analysis may provide methods for guaranteed data constraint checking at the run-time. Our aim in this paper is to present a formalism for run-time assertion checking that can detect anomalies in linked list data structure shapes and is expressive enough to define characteristic predicates for such data structures as singly linked lists, binary trees, doubly linked lists, and cyclic lists. 
Abstract-found: 1
Intro-found: 0
Reference: [Auguston 90] <author> M.Auguston, </author> <title> Programming language RIGAL as a compiler writing tool, </title> <journal> ACM SIGPLAN Notices, </journal> <volume> Vol. 25, </volume> <month> December </month> <year> 1990, </year> <month> pp.61-69. </month>
Reference-contexts: Assertion compiler is implemented in the RIGAL compiler writing language <ref> [Auguston 90] </ref>. For the debugging rule above it generates 133 lines of PASCAL code. We have run the assertion checker on some of the examples given in the previous section for various list data structures.The test program creates a linked list data structure and then checks an assertion for it.
Reference: [Auguston 94] <author> M.Auguston, </author> <title> A Language for Debugging Automation, </title> <booktitle> in the Proceedings of the 6th International Conference on Software Engineering and Knowledge Engineering SEKE94, Knowledge Systems Institute, </booktitle> <year> 1994, </year> <note> pp.108-115. </note> <author> [Fradet, Le Metayer 97]P.Fradet, D. Le Metayer, </author> <title> Shape Types, </title> <booktitle> in the Proceedings of the 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages POPL97, </booktitle> <publisher> ACM Press, </publisher> <year> 1997, </year> <note> pp.27-37. </note> <author> [Ghiya, Hendren 96]R.Ghiya, L.Hendren, </author> <title> Is it a Tree, a DAG, or a Cyclic Graph? A Shape Anal ysis for Heap-Directed Pointers in C, </title> <booktitle> in the Proceedings of the 23rd ACM SIGPLAN SIGACT Symposium on Principles of Programming Languages POPL96, </booktitle> <publisher> ACM Press, </publisher> <year> 1996, </year> <month> pp.1-15. </month>
Reference-contexts: 1.0 Introduction Assertions about run-time behavior of program are practically useful and efficient means for program testing and debugging automation. There exists a large number of publications describing different formalisms for specifying program run-time properties, e.g. [Luckham 90], <ref> [Auguston 94] </ref>. Complex data structures, such as lists and trees created with the use of pointers and dynamic memory allocation are intrinsic components of almost every nontrivial program. <p> In this prototype implementation each rule refers to a label in the original PASCAL program to set the checking point where the assertion checking function is called. An approach based on event grammars <ref> [Auguston 94] </ref> provides a general framework for defining assertions associated with multiple events in the program execution trace. A rule also contains message texts to be printed when the assertion is violated.
Reference: [Landi 92] <author> W.Landi, </author> <title> Undecidabilty of static analysis, </title> <journal> ACM Letters on Programming Lan guages and Systems, </journal> <volume> Vol 1, No 4, </volume> <year> 1992. </year>
Reference-contexts: Violations of the data structure constraints indicate the presence of a bug in the program. A significant amount of research has been done on the static analysis of heap-allocated data structures. Although the complete static analysis is undecidable <ref> [Landi 92] </ref>, there are several approximate algorithms presented, for instance, in [Ghiya, Hendren 96], [Pande et al. 94], [Sagiv, Reps 96], [Fradet, Le Metayer 97] that can recognize such linked list data structure shapes as trees, DAGs, or cyclic graphs for an important group of applications.

References-found: 3

