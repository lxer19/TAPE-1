URL: http://www.cs.wustl.edu/~schmidt/dynamic.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/tri-dove.html
Root-URL: 
Email: fcdgill,levine,schmidtg@cs.wustl.edu  
Title: Evaluating Strategies for Real-Time CORBA Dynamic Scheduling  
Author: Christopher D. Gill, David L. Levine, and Douglas C. Schmidt 
Keyword: Middleware and APIs, Quality of Service Issues, Mission Critical/Safety Critical Systems, Dynamic Scheduling Algorithms and Analysis, Distributed Systems.  
Note: This work was supported in part by Boeing, GDIS, DARPA contract 9701516, Lucent, Motorola, NSF grant NCR-9628218, Siemens, and US Sprint.  
Address: St. Louis, MO 63130, USA  
Affiliation: Department of Computer Science, Washington University  
Abstract: A subset of this paper has been submitted to the 19th IEEE Real-Time Systems Symposium, Madrid, Spain, December 2 4, 1998. Abstract There is increasing demand to extend CORBA middleware to support applications with stringent quality of service (QoS) requirements. However, conventional CORBA middleware does not define standard features to dynamically schedule operations for applications that possess deterministic and/or statistical real-time requirements. This paper presents two contributions to the study of real-time CORBA operation scheduling strategies. First, we document our progression from static to dynamic scheduling for avionics applications with deterministic real-time requirements. We present our approach to dynamic scheduling, based on the Maximum Urgency First algorithm (MUF), which has both static and dynamic components. This approach provides scheduling assurance for critical tasks, while offering the flexibility to optimize the use of scarce computing resources. Second, we show how we have implemented MUF in the scheduling service of TAO, which is a real-time implementation of CORBA. TAO's scheduling service framework provides applications the flexibility to specify and use different scheduling strategies, which can be customized for specific requirements and available OS features. It generates timelines to show the dispatch and preemption order of operations under worst case conditions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. H. Harrison, D. L. Levine, and D. C. Schmidt, </author> <title> The Design and Performance of a Real-time CORBA Event Service, </title> <booktitle> in Proceedings of OOPSLA '97, </booktitle> <address> (Atlanta, GA), </address> <publisher> ACM, </publisher> <month> October </month> <year> 1997. </year>
Reference-contexts: To meet these requirements, we have developed a real-time CORBA Object Request Broker (ORB) called TAO [9], which supports efficient and predictable real-time, distributed computing. Our prior work on TAO has explored several dimensions of real-time ORB design and performance, including real-time event processing <ref> [1] </ref>, real-time request demultiplexing [10], real-time I/O subsystem integration [11], and real-time con-currency and connection architectures [12]. This paper extends our previous work on a real-time CORBA static scheduling service [9] by incorporating dynamic scheduling strategies. <p> Because these types of applications are relatively static, it is possible to minimize run-time overhead that would otherwise stem from mechanisms used to enforce operation execution time limits <ref> [1] </ref> or to perform dynamic admission control. Within these constraints, we provide a framework that allows applications to flexibly specify scheduling and dispatching strategies. <p> ACE runs on a wide range of OS platforms, including Win32, most versions of UNIX, and real-time operating systems like Sun ClassiX, LynxOS, and VxWorks. 3.2 Design Goals of TAO's Scheduling Service For the real-time systems to which TAO has been applied <ref> [1, 9, 11, 12] </ref>, it has been possible to identify a core set of operations whose execution before deadlines is critical to the integrity of the system. <p> The dispatching subpriority determines the order in which operations are dispatched within a single dispatching priority level. pending dispatches. Operations are dispatched from the queue with the highest dispatching priority, preempting any operations executing in a lower priority thread <ref> [1] </ref>. There is no preemption within a given priority queue. Operations are inserted into dispatch queues in the ORB according to their assigned dispatching priority. Operations within a dispatch queue are ordered by dispatching subpriority. <p> Rajkumar et al., [34] at the Carnegie Mellon University Software Engineering Institute, developed a real-time Publisher/Subscriber model. It is functionally similar to the TAO's Real-time Event Channel <ref> [1] </ref>, e.g., it uses real-time threads to prevent priority inversion within the communication framework. The CMU model does not utilize any QoS specifications from publishers (event suppliers) or subscribers (event consumers). Therefore, scheduling is based on the assignment of request priorities, which is not addressed by the CMU model.
Reference: [2] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <editor> 2.2 ed., </editor> <month> Feb. </month> <year> 1998. </year>
Reference-contexts: Likewise, support for statistical real-time requirements is desirable for tasks like built-in-test and low-priority display queues, which can tolerate minor fluctuations in scheduling and reliability guarantees, but nonetheless require QoS support. 1.2 Design and Implementation Challenges middleware components and services based on CORBA <ref> [2] </ref>. CORBA Object Request Brokers (ORB)s allow clients to invoke operations on target object implementations without concern for where the object resides, what language the object is written in, the OS/hardware platform, or the type of communication protocols and networks used to interconnect distributed objects [3]. <p> The TAO ORB endsystem contains the network interface, operating system, communication protocol, and CORBA middleware components and features shown in Figure 3. TAO supports the standard OMG CORBA reference model <ref> [2] </ref>, with the following enhancements designed to overcome the shortcomings of conventional ORBs [12] for high-performance and real-time applications: Real-time IDL Stubs and Skeletons: TAO's IDL stubs and skeletons efficiently marshal and demarshal operation parameters, respectively [18].
Reference: [3] <author> S. Vinoski, </author> <title> CORBA: Integrating Diverse Applications Within Distributed Heterogeneous Environments, </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 14, </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: CORBA Object Request Brokers (ORB)s allow clients to invoke operations on target object implementations without concern for where the object resides, what language the object is written in, the OS/hardware platform, or the type of communication protocols and networks used to interconnect distributed objects <ref> [3] </ref>. To achieve these benefits for avionics applications, however, requires the resolution of the following design and implementation challenges: Scheduling assurance prior to run-time: In avionics applications, the consequences of missing a deadline at run-time can be catastrophic. <p> Moreover, CORBA addresses issues of distributed processing and adaptation across product families by promoting the separation of interfaces from implementations and supporting component reuse <ref> [3] </ref>. However, standard CORBA is not yet ideally suited for real-time avionics applications since it does not define standard features for dynamically scheduling operations that require deterministic and/or statistical real-time QoS [9].
Reference: [4] <author> N. Audsley and A. Wellings, </author> <title> Analysing APEX Applications, </title> <booktitle> in Proceedings of the 16th Real-Time Systems Symposium, </booktitle> <pages> pp. 3944, </pages> <month> Dec. </month> <year> 1996. </year>
Reference-contexts: Therefore, it is essential to validate that all critical processing deadlines will be met prior to run-time. Historically, validating stringent timing requirements has implied the use of static, off-line scheduling. For instance, the ARINC Avionics Application Software Standard Interface (APEX) for Integrated Modular Avionics (IMA) relies on two-level scheduling <ref> [4, 5] </ref>. One level consists of partitions, which are executed cyclically and scheduled statically and off-line. Within each partition, application processes are scheduled using potentially more flexible approaches. Severe resource limitations: Processing must be minimized due to limited resource availability, such as weight and power consumption restrictions.
Reference: [5] <institution> ARINC Incorporated, Annapolis, Maryland, USA, </institution> <note> Document No. 653: Avionics Application Software Standard Inteface (Draft 15), </note> <month> Jan. </month> <year> 1997. </year>
Reference-contexts: Therefore, it is essential to validate that all critical processing deadlines will be met prior to run-time. Historically, validating stringent timing requirements has implied the use of static, off-line scheduling. For instance, the ARINC Avionics Application Software Standard Interface (APEX) for Integrated Modular Avionics (IMA) relies on two-level scheduling <ref> [4, 5] </ref>. One level consists of partitions, which are executed cyclically and scheduled statically and off-line. Within each partition, application processes are scheduled using potentially more flexible approaches. Severe resource limitations: Processing must be minimized due to limited resource availability, such as weight and power consumption restrictions.
Reference: [6] <author> J. R. </author> <title> Newport, Avionics Systems Design. </title> <address> Boca Raton, Florida: </address> <publisher> CRC Press, </publisher> <year> 1994. </year>
Reference-contexts: Likewise, the allocation of operations to processors should be flexible. For instance, it should be transparent whether a given operation resides on the same processor as the client that invokes it. Testability: Avionics software is complex, critical, and long-lived. Therefore, maintenance is particularly problematic and expensive <ref> [6] </ref>. A large percentage of software maintenance involves testing. Current scheduling approaches are validated by extensive testing, which is tedious and non-comprehensive. Therefore, analytical assurance is essential to help reduce validation costs by focusing the requisite testing on the most strategic system components.
Reference: [7] <author> D. C. Schmidt, </author> <title> A Family of Design Patterns for Application-level Gateways, </title> <journal> The Theory and Practice of Object Systems (Special Issue on Patterns and Pattern Languages), </journal> <volume> vol. 2, no. 1, </volume> <year> 1996. </year>
Reference-contexts: Development and testing costs can be reduced if large, common portions can be factored out. In addition, validation and certification of components can be shared across product families, potentially reducing development time and effort. 1.3 Applying CORBA to Real-Time Applica tions Our experience using CORBA on telecommunication <ref> [7] </ref> and medical imaging projects [8] indicates that it is well-suited for conventional request/response applications with best-effort QoS requirements. Moreover, CORBA addresses issues of distributed processing and adaptation across product families by promoting the separation of interfaces from implementations and supporting component reuse [3].
Reference: [8] <author> I. Pyarali, T. H. Harrison, and D. C. Schmidt, </author> <title> Design and Performance of an Object-Oriented Framework for High-Performance Electronic Medical Imaging, </title> <booktitle> USENIX Computing Systems, </booktitle> <volume> vol. 9, </volume> <month> November/December </month> <year> 1996. </year>
Reference-contexts: In addition, validation and certification of components can be shared across product families, potentially reducing development time and effort. 1.3 Applying CORBA to Real-Time Applica tions Our experience using CORBA on telecommunication [7] and medical imaging projects <ref> [8] </ref> indicates that it is well-suited for conventional request/response applications with best-effort QoS requirements. Moreover, CORBA addresses issues of distributed processing and adaptation across product families by promoting the separation of interfaces from implementations and supporting component reuse [3].
Reference: [9] <author> D. C. Schmidt, D. L. Levine, and S. Mungee, </author> <title> The Design and Performance of Real-Time Object Request Brokers, </title> <journal> Computer Communications, </journal> <volume> vol. 21, </volume> <pages> pp. 294324, </pages> <month> Apr. </month> <year> 1998. </year>
Reference-contexts: However, standard CORBA is not yet ideally suited for real-time avionics applications since it does not define standard features for dynamically scheduling operations that require deterministic and/or statistical real-time QoS <ref> [9] </ref>. To meet these requirements, we have developed a real-time CORBA Object Request Broker (ORB) called TAO [9], which supports efficient and predictable real-time, distributed computing. <p> However, standard CORBA is not yet ideally suited for real-time avionics applications since it does not define standard features for dynamically scheduling operations that require deterministic and/or statistical real-time QoS <ref> [9] </ref>. To meet these requirements, we have developed a real-time CORBA Object Request Broker (ORB) called TAO [9], which supports efficient and predictable real-time, distributed computing. Our prior work on TAO has explored several dimensions of real-time ORB design and performance, including real-time event processing [1], real-time request demultiplexing [10], real-time I/O subsystem integration [11], and real-time con-currency and connection architectures [12]. <p> Our prior work on TAO has explored several dimensions of real-time ORB design and performance, including real-time event processing [1], real-time request demultiplexing [10], real-time I/O subsystem integration [11], and real-time con-currency and connection architectures [12]. This paper extends our previous work on a real-time CORBA static scheduling service <ref> [9] </ref> by incorporating dynamic scheduling strategies. In addition, we describe how our strategized scheduling service design readily allows the configuration of multiple scheduling algorithms. To maintain scheduling guarantees and simplify testing, we have extended our prior work on TAO incrementally. <p> Static scheduling provides assurance of schedulability prior to run-time and can be implemented with low run-time overhead <ref> [9] </ref>. However, static scheduling has the following disadvantages: Inefficient handling of non-periodic processing: Static scheduling treats aperiodic processing as if it was periodic, i.e., occurring at its maximum possible rate. Resources are allocated to aperiodic operations either directly or through a sporadic server 1 to reduce latency. <p> Key terms are defined briefly below. RT Operation and RT Info: In TAO, an RT Operation is a scheduled CORBA operation <ref> [9] </ref>. In this paper, we usually use operation interchangeably with RT Operation. An RT Info struct is associated with each operation and contains its QoS parameters. The RT Info structure is described in Section 3.5.1. <p> The variant of MUF used in TAO's strategized scheduling service enforces a complete dispatching ordering by providing an importance field in the TAO RT Info CORBA operation QoS description struct <ref> [9] </ref>, which is outlined in Section 3.5.1. TAO's scheduling service uses importance, as well as a topological ordering of operations, to assign a unique static subpriority for each operation within a given criticality level. <p> TAO's Object Adapter uses perfect hashing and active demultiplexing [10] optimizations to dispatch servant operations in constant O (1) time. ORB QoS Interface: TAO's QoS interface is designed to map real-time processing requirements to ORB endsys-tem/network resources <ref> [9] </ref>. Common real-time processing requirements include bounding end-to-end latency and meeting periodic scheduling deadlines. Common ORB endsys-tem/network resources include CPU, memory, network connections and storage devices. Real-time ORB Core: The ORB Core delivers client requests to the Object Adapter and returns responses (if any) to clients. <p> ACE runs on a wide range of OS platforms, including Win32, most versions of UNIX, and real-time operating systems like Sun ClassiX, LynxOS, and VxWorks. 3.2 Design Goals of TAO's Scheduling Service For the real-time systems to which TAO has been applied <ref> [1, 9, 11, 12] </ref>, it has been possible to identify a core set of operations whose execution before deadlines is critical to the integrity of the system. <p> The remainder of this section reviews the architecture of TAO's strategized scheduling service framework. The architecture and behavior of TAO's strategized scheduling service is illustrated in Figure 5. This architecture has evolved from earlier work on a CORBA scheduling service 8 <ref> [9] </ref> that supported purely static rate monotonic scheduling. The steps involved in configuring and processing requests are described below. Steps 1-5 occur off-line during the (static) schedule configuration process, whereas steps 6-8 occur online. <p> These characteristics are represented by the RT Info descriptor <ref> [9] </ref> shown in Figure 6. * Worst-case execution time (worstcase exec time ) is the maximum time a single operation dispatch requires. * Period is the interval between operation arrivals. <p> The system supports expression and enforcement of dynamic end-to-end timing constraints through timed distributed operation invocations (TDMIs) [28]. A TDMI corresponds to TAO's RT Operation <ref> [9] </ref>. Likewise, an RT Environment structure contains QoS parameters similar to those in TAO's RT Info. One difference between TAO and the URI approaches is that TDMIs express required timing constraints, e.g., deadlines relative to the current time, whereas RT Operations publish their resource, e.g., CPU time, requirements.
Reference: [10] <author> A. Gokhale and D. C. Schmidt, </author> <title> Evaluating the Performance of Demultiplexing Strategies for Real-time CORBA, </title> <booktitle> in Proceedings of GLOBECOM '97, </booktitle> <address> (Phoenix, AZ), </address> <publisher> IEEE, </publisher> <month> November </month> <year> 1997. </year>
Reference-contexts: To meet these requirements, we have developed a real-time CORBA Object Request Broker (ORB) called TAO [9], which supports efficient and predictable real-time, distributed computing. Our prior work on TAO has explored several dimensions of real-time ORB design and performance, including real-time event processing [1], real-time request demultiplexing <ref> [10] </ref>, real-time I/O subsystem integration [11], and real-time con-currency and connection architectures [12]. This paper extends our previous work on a real-time CORBA static scheduling service [9] by incorporating dynamic scheduling strategies. In addition, we describe how our strategized scheduling service design readily allows the configuration of multiple scheduling algorithms. <p> Real-time Object Adapter: An Object Adapter associates servants with the ORB and demultiplexes incoming requests to servants. TAO's Object Adapter uses perfect hashing and active demultiplexing <ref> [10] </ref> optimizations to dispatch servant operations in constant O (1) time. ORB QoS Interface: TAO's QoS interface is designed to map real-time processing requirements to ORB endsys-tem/network resources [9]. Common real-time processing requirements include bounding end-to-end latency and meeting periodic scheduling deadlines.
Reference: [11] <author> D. C. Schmidt, R. Bector, D. Levine, S. Mungee, and G. Parulkar, </author> <title> An ORB Endsystem Architecture for Statically Scheduled Real-time Applications, </title> <booktitle> in Proceedings of the Workshop on Middleware for Real-Time Systems and Services, </booktitle> <address> (San Francisco, CA), </address> <publisher> IEEE, </publisher> <month> December </month> <year> 1997. </year>
Reference-contexts: Our prior work on TAO has explored several dimensions of real-time ORB design and performance, including real-time event processing [1], real-time request demultiplexing [10], real-time I/O subsystem integration <ref> [11] </ref>, and real-time con-currency and connection architectures [12]. This paper extends our previous work on a real-time CORBA static scheduling service [9] by incorporating dynamic scheduling strategies. In addition, we describe how our strategized scheduling service design readily allows the configuration of multiple scheduling algorithms. <p> TAO's real-time ORB Core uses a multi-threaded, preemptive, priority-based connection and concurrency architecture [12] to provide an efficient and predictable CORBA inter-ORB protocol engine. Real-time I/O subsystem: TAO's real-time I/O subsystem <ref> [11] </ref> extends the CORBA reference model into the OS. TAO's I/O subsystem performs admission control and assigns priorities to real-time I/O threads so that the schedulability of ap 7 plication components and ORB endsystem resources can be guaranteed. <p> ACE runs on a wide range of OS platforms, including Win32, most versions of UNIX, and real-time operating systems like Sun ClassiX, LynxOS, and VxWorks. 3.2 Design Goals of TAO's Scheduling Service For the real-time systems to which TAO has been applied <ref> [1, 9, 11, 12] </ref>, it has been possible to identify a core set of operations whose execution before deadlines is critical to the integrity of the system.
Reference: [12] <author> D. C. Schmidt, S. Mungee, S. Flores-Gaitan, and A. Gokhale, </author> <title> Alleviating Priority Inversion and Non-determinism in Real-time CORBA ORB Core Architectures, </title> <booktitle> in Proceedings of the Fourth IEEE Real-Time Technology and Applications Symposium, </booktitle> <address> (San Francisco, CA), </address> <publisher> IEEE, </publisher> <month> December </month> <year> 1997. </year>
Reference-contexts: Our prior work on TAO has explored several dimensions of real-time ORB design and performance, including real-time event processing [1], real-time request demultiplexing [10], real-time I/O subsystem integration [11], and real-time con-currency and connection architectures <ref> [12] </ref>. This paper extends our previous work on a real-time CORBA static scheduling service [9] by incorporating dynamic scheduling strategies. In addition, we describe how our strategized scheduling service design readily allows the configuration of multiple scheduling algorithms. <p> The TAO ORB endsystem contains the network interface, operating system, communication protocol, and CORBA middleware components and features shown in Figure 3. TAO supports the standard OMG CORBA reference model [2], with the following enhancements designed to overcome the shortcomings of conventional ORBs <ref> [12] </ref> for high-performance and real-time applications: Real-time IDL Stubs and Skeletons: TAO's IDL stubs and skeletons efficiently marshal and demarshal operation parameters, respectively [18]. In addition, TAO's Real-time IDL (RIDL) stubs and skeletons extend the OMG IDL specifications to ensure that application timing requirements are specified and enforced end-to-end [19]. <p> Common ORB endsys-tem/network resources include CPU, memory, network connections and storage devices. Real-time ORB Core: The ORB Core delivers client requests to the Object Adapter and returns responses (if any) to clients. TAO's real-time ORB Core uses a multi-threaded, preemptive, priority-based connection and concurrency architecture <ref> [12] </ref> to provide an efficient and predictable CORBA inter-ORB protocol engine. Real-time I/O subsystem: TAO's real-time I/O subsystem [11] extends the CORBA reference model into the OS. <p> ACE runs on a wide range of OS platforms, including Win32, most versions of UNIX, and real-time operating systems like Sun ClassiX, LynxOS, and VxWorks. 3.2 Design Goals of TAO's Scheduling Service For the real-time systems to which TAO has been applied <ref> [1, 9, 11, 12] </ref>, it has been possible to identify a core set of operations whose execution before deadlines is critical to the integrity of the system.
Reference: [13] <author> D. B. Stewart, D. E. Schmitz, and P. K. Khosla, </author> <title> Implementing Real-Time Robotic Systems using CHIMERA II, </title> <booktitle> in Proceedings of 1990 IEEE International Conference on Robotics and Automation, </booktitle> <address> (Cincinnatti, OH), </address> <year> 1992. </year>
Reference-contexts: preserving the rigorous scheduling guarantees and testability offered by our previous work on statically scheduled systems. 1.4 Paper Organization The remainder of this paper is organized as follows: Section 2 reviews the drawbacks of off-line, static scheduling and introduces the dynamic scheduling strategy we are evaluating, Maximum Urgency First (MUF) <ref> [13] </ref>. Section 3 discusses the design and implementation of TAO's scheduling service framework, which supports various static, dynamic, or hybrid static/dynamic real-time scheduling strategies. <p> MUF is the default sched-uler for the Chimera real-time operating system (RTOS) <ref> [13] </ref>. TAO uses a variant of MUF in its strategized CORBA scheduling service framework, as discussed in Section 3. RMS assigns all priority components statically and EDF/MLF assign all priority components dynamically.
Reference: [14] <author> J. P. Lehoczky, L. Sha, and J. K. Strosnider, </author> <title> Enhanced Aperiodic Scheduling in Hard Real-Time Environments, </title> <booktitle> in Proceedings of the IEEE Real-Time Systems Symposium, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1987. </year>
Reference-contexts: In addition, static scheduling compromises resource utilization in order to guarantee access to resources at run-time. To overcome the limitations of static scheduling, therefore, we are investigating the use of dynamic strategies to schedule CORBA operations for applications with real-time QoS requirements. 1 A sporadic server <ref> [14] </ref> reserves a portion of the schedule and allocates its reservation to aperiodic events when they arrive. 2 Priorities can be changed via mode changes, but that is too coarse to capture invocation-to-invocation variations in the resource requirements of com plex applications. 3 2.2 Overcoming Static Scheduling Limitations with Dynamic Scheduling
Reference: [15] <author> C. Liu and J. Layland, </author> <title> Scheduling Algorithms for Multiprogramming in a Hard-Real-Time Environment, </title> <journal> JACM, </journal> <volume> vol. 20, </volume> <pages> pp. 4661, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: When periods are not harmonic, the phasing of the operations produces unscheduled gaps of time. This reduces the maximum schedulable percentage of the CPU, i.e., the schedulable bound, to n (2 1=n 1) <ref> [15] </ref>, where n is the number of distinct non-harmonic operation periods in the system. For very large n, the schedulable bound is just over 69 percent. With harmonically related periods, the schedulable bound can be 100 percent. <p> These scheduling strategies include purely dynamic techniques, such as EDF, Minimum Laxity First (MLF), as well as the hybrid Maximum Urgency First (MUF) strategy. 2.2.2 Purely Dynamic Scheduling Strategies Earliest Deadline First (EDF): EDF <ref> [15, 17] </ref> is a dynamic scheduling algorithm that orders dispatches 3 of operations based on time-to-deadline. Operation executions with closer deadlines are dispatched before those with more distant deadlines. The EDF scheduling algorithm is invoked whenever a dispatch of an operation is requested. <p> In particular, the utilization phasing penalty described in Section 2.1 that can occur in RMS is not a factor. This is because EDF and MLF prioritize operations according to their dynamic run-time characteristics. Thus, they can produce schedules that are optimal in terms of CPU utilization <ref> [15] </ref>. Moreover, both EDF and MLF can dispatch operations within a single static priority level and do not prioritize operations by rate [15, 16]. * Disadvantages: Purely dynamic scheduling approaches like MLF and EDF potentially relieve the utilization limitations of the static RMS approach. <p> This is because EDF and MLF prioritize operations according to their dynamic run-time characteristics. Thus, they can produce schedules that are optimal in terms of CPU utilization [15]. Moreover, both EDF and MLF can dispatch operations within a single static priority level and do not prioritize operations by rate <ref> [15, 16] </ref>. * Disadvantages: Purely dynamic scheduling approaches like MLF and EDF potentially relieve the utilization limitations of the static RMS approach. However, they have a higher cost to evaluate the scheduling algorithm at run-time. <p> This section presents the results of a simulation that visualizes the behavior of TAO's scheduling service under overload conditions, focusing on the critical instant. The critical instant for a preemptive schedule occurs when all operations arrive simultaneously <ref> [15] </ref>. Simulating TAO's scheduling service's behavior after this critical instant illustrates how it performs for a given set of periodic operations under the worst-case pattern of dispatch requests. <p> Also, the canonical definition of EDF is that it is dispatched in a fully preemptive manner <ref> [15] </ref>. For these reasons, we constructed an idealized simulation, with no overhead or jitter for preemption. In the experiments described below, we used a set of operations spanning a range of criticality and period values. The combined utilization of these operations exceeded the maxi mum schedulable bound.
Reference: [16] <author> D. B. Stewart and P. K. Khosla, </author> <title> Real-Time Scheduling of Sensor-Based Control Systems, in Real-Time Programming (W. </title> <editor> Halang and K. Ramamritham, eds.), Tarrytown, </editor> <address> NY: </address> <publisher> Perg-amon Press, </publisher> <year> 1992. </year>
Reference-contexts: An example is a subpriority that is based on nearest deadline, which must be computed dynamically. * Static subpriority: Static subpriority values are determined prior to run-time. Static subpriority acts as a tie-breaker when both static priority and dynamic subpriority are equal. * Urgency: Urgency <ref> [16] </ref> is an ordered tuple consisting of (1) static priority, (2) dynamic subpriority, and (3) static subpriority. Static priority is the highest ranking priority component in the urgency tuple, above dynamic subpriority and static subpriority. Dynamic subpriority is intermediate in this ranking, below static priority and above static subpriority. <p> Therefore, the fact that an operation cannot meet its deadline will not be detected until after the deadline has passed. Minimum Laxity First (MLF): MLF <ref> [16] </ref> refines the EDF strategy by taking into account operation execution time. It dispatches the operation whose laxity is least. Laxity is defined as the time-to-deadline minus the remaining execution time. <p> This is because EDF and MLF prioritize operations according to their dynamic run-time characteristics. Thus, they can produce schedules that are optimal in terms of CPU utilization [15]. Moreover, both EDF and MLF can dispatch operations within a single static priority level and do not prioritize operations by rate <ref> [15, 16] </ref>. * Disadvantages: Purely dynamic scheduling approaches like MLF and EDF potentially relieve the utilization limitations of the static RMS approach. However, they have a higher cost to evaluate the scheduling algorithm at run-time. <p> As operations are added to the schedule to achieve higher utilization, the margin of safety for all operations decreases. Therefore, the risk of missing a deadline increases for every operation as the system become overloaded. 2.2.3 Maximum Urgency First The Maximum Urgency First (MUF) <ref> [16] </ref> scheduling algorithm supports both the deterministic rigor of the static RMS scheduling approach and the flexibility of dynamic scheduling approaches such as EDF and MLF. MUF is the default sched-uler for the Chimera real-time operating system (RTOS) [13]. <p> For the class of applications targeted by TAO, however, we restrict the range to two values: critical or non-critical. This restriction appears to be sufficient for avionics applications. In addition, it provides greater control over which operations miss deadlines during overload conditions. To assign criticalities, Stewart and Khosla <ref> [16] </ref> suggest initially ordering operations by rate. Ordering operations by rate reduces the risk that non-critical operations will miss their deadlines. Next, all tasks whose executions fall entirely within 100 percent CPU utilization are designated as critical and all other tasks non-critical. <p> In MUF, deadline failures can be detected before they actually occur because MUF uses laxity rather than time-to-deadline to determine scheduling order. Moreover, MUF can apply some form of error handling policy when deadlines are missed <ref> [16] </ref>. For example, the operation that will miss its deadline could be preempted and the remaining time allocated to it can be reallocated appropriately. <p> TAO's scheduling service uses importance, as well as a topological ordering of operations, to assign a unique static subpriority for each operation within a given criticality level. Incidentally, the canonical definition of MUF <ref> [16] </ref> uses the terms dynamic priority and user priority where we use the term dynamic subpriority and static subpriority. We selected different terminology to indicate the subordination to static priority. <p> One way to implement the RMS, EDF, and MLF algorithms in TAO's scheduling service framework would be to implement them as variants of the MUF algorithm by manipulating the values of the operation characteristics <ref> [16] </ref>. However, this approach would tightly couple de 9 velopers to the MUF scheduling algorithm and the algorithm being emulated. There is a significant drawback to tightly coupling the behavior of a scheduling service to the characteristics of the operations. <p> These features are now present in many operating systems. For platforms that do not support these features, an alternative is to assign all operations the same constant dispatching priority and map the entire urgency tuple directly into the dispatching subpriority <ref> [16] </ref>. This mapping correctly assigns dispatching priorities and dispatching subpriorities for a non-preemptive dispatching model. Where thread preemption and a very large number of thread priorities are supported, another alternative is to assign dispatching priorities and dispatching subpriorities for a dispatching model that is preemptive by urgency.
Reference: [17] <author> M. H. Klein, T. Ralya, B. Pollak, R. Obenza, and M. G. Har-bour, </author> <title> A Practitioner's Handbook for Real-Time Analysis: Guide to Rate Monotonic Analysis for Real-Time Systems. </title> <publisher> Norwell, </publisher> <address> Massachusetts: </address> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: These scheduling strategies include purely dynamic techniques, such as EDF, Minimum Laxity First (MLF), as well as the hybrid Maximum Urgency First (MUF) strategy. 2.2.2 Purely Dynamic Scheduling Strategies Earliest Deadline First (EDF): EDF <ref> [15, 17] </ref> is a dynamic scheduling algorithm that orders dispatches 3 of operations based on time-to-deadline. Operation executions with closer deadlines are dispatched before those with more distant deadlines. The EDF scheduling algorithm is invoked whenever a dispatch of an operation is requested.
Reference: [18] <author> A. Gokhale and D. C. Schmidt, </author> <title> Optimizing a CORBA IIOP Protocol Engine for Minimal Footprint Multimedia Systems, </title> <note> submitted to the Journal on Selected Areas in Communications special issue on Service Enabling Platforms for Networked Multimedia Systems, </note> <year> 1998. </year>
Reference-contexts: TAO supports the standard OMG CORBA reference model [2], with the following enhancements designed to overcome the shortcomings of conventional ORBs [12] for high-performance and real-time applications: Real-time IDL Stubs and Skeletons: TAO's IDL stubs and skeletons efficiently marshal and demarshal operation parameters, respectively <ref> [18] </ref>. In addition, TAO's Real-time IDL (RIDL) stubs and skeletons extend the OMG IDL specifications to ensure that application timing requirements are specified and enforced end-to-end [19]. Real-time Object Adapter: An Object Adapter associates servants with the ORB and demultiplexes incoming requests to servants.
Reference: [19] <author> V. F. Wolfe, L. C. DiPippo, R. Ginis, M. Squadrito, S. Wohlever, I. Zykh, and R. Johnston, </author> <title> Real-Time CORBA, </title> <booktitle> in Proceedings of the Third IEEE Real-Time Technology and Applications Symposium, </booktitle> <address> (Montreal, Canada), </address> <month> June </month> <year> 1997. </year>
Reference-contexts: In addition, TAO's Real-time IDL (RIDL) stubs and skeletons extend the OMG IDL specifications to ensure that application timing requirements are specified and enforced end-to-end <ref> [19] </ref>. Real-time Object Adapter: An Object Adapter associates servants with the ORB and demultiplexes incoming requests to servants. TAO's Object Adapter uses perfect hashing and active demultiplexing [10] optimizations to dispatch servant operations in constant O (1) time. <p> Wolfe, et al, are developing a real-time CORBA system at the US Navy Research and Development Laboratories (NRaD) and the University of Rhode Island (URI) <ref> [19] </ref>. The system supports expression and enforcement of dynamic end-to-end timing constraints through timed distributed operation invocations (TDMIs) [28]. A TDMI corresponds to TAO's RT Operation [9]. Likewise, an RT Environment structure contains QoS parameters similar to those in TAO's RT Info.
Reference: [20] <author> Z. D. Dittia, G. M. Parulkar, and J. Jerome R. Cox, </author> <title> The APIC Approach to High Performance Network Interface Design: Protected DMA and Other Techniques, </title> <booktitle> in Proceedings of INFO-COM '97, </booktitle> <address> (Kobe, Japan), </address> <publisher> IEEE, </publisher> <month> April </month> <year> 1997. </year>
Reference-contexts: High-speed network adapters: At the core of TAO's I/O subsystem is a daisy-chained interconnect comprising a number of ATM Port Interconnect Controller (APIC) chips <ref> [20] </ref>. APIC is designed to sustain an aggregate bidirectional data rate of 2.4 Gbps. In addition, TAO runs on conventional real-time interconnects, such as VME back-planes, multi-processor shared memory environments, and Internet protocols like TCP/IP.
Reference: [21] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides, </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: In addition, TAO runs on conventional real-time interconnects, such as VME back-planes, multi-processor shared memory environments, and Internet protocols like TCP/IP. The TAO ORB is developed atop an OO framework called ACE, which implements core concurrency and distribution patterns <ref> [21] </ref> for communication software. ACE provides reusable C++ wrapper facades and framework components that support the QoS requirements of high-performance, real-time applications. <p> This flexibility is achieved in TAO via the Strategy design pattern <ref> [21] </ref>, which encapsulates a related family of scheduling algorithms within a fixed interface. Within TAO's strategized scheduling service, the scheduling algorithms themselves are interchangeable and can be varied independently. The remainder of this section reviews the architecture of TAO's strategized scheduling service framework.
Reference: [22] <author> S. Rago, </author> <title> UNIX System V Network Programming. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1993. </year> <month> 18 </month>
Reference-contexts: Operations in the queue are ordered by a subpriority function based on urgency. Preemptive-by-priority-band: This model divides the range of all possible urgencies into fixed priority bands. It is similar to the non-preemptive dispatching model used by message queues in the UNIX System V STREAMS subsystem <ref> [22] </ref>. This dispatching model maintains a slightly weaker invariant than the preemption-by-urgency model. At any given instant, an operation from the highest fixed-priority band that has operations able to execute is executing.
Reference: [23] <author> K. Ramamritham, C. Shen, O. Gonzales, S. Sen, and S. Shir--gurkar, </author> <title> Using Windows NT for Real-time Applications: Experimental Observations and Recommendations, </title> <booktitle> in Proceedings of the Fourth IEEE Real-Time Technology and Applications Symposium, </booktitle> <address> (San Francisco, CA), </address> <publisher> IEEE, </publisher> <month> December </month> <year> 1997. </year>
Reference-contexts: The preemption-by-priority-band model is a reasonable choice when it is desirable or necessary to restrain the number of distinct preemption levels. For example, a dynamic scheduling algorithm can produce a large number of distinct urgency values, which must be constrained on an OS like Windows NT <ref> [23] </ref>, which supports only a small number of distinct thread priorities. Operations in the queue are ordered by a subpriority function based on urgency. The strategies implemented TAO's strategized scheduling service use a form of this variation, as described in Section 3.5.4.
Reference: [24] <author> D. C. Schmidt, GPERF: </author> <title> A Perfect Hash Function Generator, </title> <booktitle> in Proceedings of the 2 nd C++ Conference, </booktitle> <address> (San Francisco, California), </address> <pages> pp. 87102, </pages> <publisher> USENIX, </publisher> <month> April </month> <year> 1990. </year>
Reference-contexts: Preemption-by-urgency achieves its precision at a cost of increased time and space overhead. In addition, its dispatching mechanism is also more complex. This overhead can be reduced somewhat for applications whose operations are known in advance, through techniques such as perfect hashing <ref> [24] </ref>. There will still be overhead from the additional thread context switches, however. 4 Simulating TAO's Critical Instant Behavior One of our research goals is to identify scheduling strategies that increase effective CPU utilization, while preserving scheduling guarantees for critical operations.
Reference: [25] <author> B. Thuraisingham, P. Krupp, A. Schafer, and V. Wolfe, </author> <title> On Real-Time Extensions to the Common Object Request Broker Architecture, </title> <booktitle> in Proceedings of the Object Oriented Programming, Systems, Languages, and Applications (OOPSLA) Workshop on Experiences with CORBA, ACM, </booktitle> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: This subsection compares our work in TAO with related QoS middleware integration efforts. CORBA-related QoS research: Krupp, et al., <ref> [25] </ref> at MITRE Corporation were among the first to elucidate the needs of real-time CORBA systems. A system consisting of a commercial off-the-shelf RTOS, a CORBA-compliant ORB, and a real-time object-oriented database management system is under development [26].
Reference: [26] <institution> Statement of Work for the Extend Sentry Program, CPFF Project, ECSP Replacement Phase II, </institution> <month> Feb. </month> <year> 1997. </year> <note> Submitted to OMG in response to RFI ORBOS/96-09-02. </note>
Reference-contexts: CORBA-related QoS research: Krupp, et al., [25] at MITRE Corporation were among the first to elucidate the needs of real-time CORBA systems. A system consisting of a commercial off-the-shelf RTOS, a CORBA-compliant ORB, and a real-time object-oriented database management system is under development <ref> [26] </ref>. Similar to the initial approach provided by TAO, their initial static scheduling approach is rate monotonic, but a strategy for dynamic deadline monotonic scheduling support has been designed [27].
Reference: [27] <author> G. Cooper, L. C. DiPippo, L. Esibov, R. Ginis, R. Johnston, P. Kortman, P. Krupp, J. Mauer, M. Squadrito, B. Thuraising-ham, S. Wohlever, and V. F. Wolfe, </author> <title> Real-Time CORBA Development at MITRE, </title> <editor> NRaD, Tri-Pacific and URI, </editor> <booktitle> in Proceedings of the Workshop on Middleware for Real-Time Systems and Services, </booktitle> <address> (San Francisco, CA), </address> <publisher> IEEE, </publisher> <month> December </month> <year> 1997. </year>
Reference-contexts: Similar to the initial approach provided by TAO, their initial static scheduling approach is rate monotonic, but a strategy for dynamic deadline monotonic scheduling support has been designed <ref> [27] </ref>. Wolfe, et al, are developing a real-time CORBA system at the US Navy Research and Development Laboratories (NRaD) and the University of Rhode Island (URI) [19]. The system supports expression and enforcement of dynamic end-to-end timing constraints through timed distributed operation invocations (TDMIs) [28].
Reference: [28] <author> V. Fay-Wolfe, J. K. Black, B. Thuraisingham, and P. Krupp, </author> <title> Real-time Method Invocations in Distributed Environments, </title> <type> Tech. Rep. 95-244, </type> <institution> University of Rhode Island, Department of Computer Science and Statistics, </institution> <year> 1995. </year>
Reference-contexts: Wolfe, et al, are developing a real-time CORBA system at the US Navy Research and Development Laboratories (NRaD) and the University of Rhode Island (URI) [19]. The system supports expression and enforcement of dynamic end-to-end timing constraints through timed distributed operation invocations (TDMIs) <ref> [28] </ref>. A TDMI corresponds to TAO's RT Operation [9]. Likewise, an RT Environment structure contains QoS parameters similar to those in TAO's RT Info.
Reference: [29] <author> J. A. Zinky, D. E. Bakken, and R. Schantz, </author> <title> Architectural Support for Quality of Service for CORBA Objects, </title> <journal> Theory and Practice of Object Systems, </journal> <volume> vol. 3, no. 1, </volume> <year> 1997. </year>
Reference-contexts: Both NRaD/URI and TAO readily support changing scheduling policy by encapsulating it in their respective CORBA Global Priority and Scheduling Services. The QuO project at BBN <ref> [29] </ref> has defined a model for communicating changes in QoS characteristics between applications, middleware, and the underlying endsystems and network. The QuO model uses the concept of a connection between a client and an object to define QoS characteristics, and treats these characteristics as first-class objects.
Reference: [30] <author> G. Kiczales, </author> <booktitle> Aspect-Oriented Programming, in Proceedings of the 11th European Conference on Object-Oriented Programming, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: Furthermore, the QuO programming model involves the use of several QDL specifications, in addition to OMG IDL, based on the separation of concerns advocated by Aspect-Oriented Programming (AoP) <ref> [30] </ref>. We believe that while the AOP paradigm is quite powerful, the proliferation of definition languages may be overly complex for common application use-cases. Therefore, the TAO programming model focuses on the RT Operation and RT Info QoS specifiers, which can be expressed in standard OMG IDL.
Reference: [31] <author> V. Kalogeraki, P. Melliar-Smith, and L. Moser, </author> <title> Soft Real-Time Resource Management in CORBA Distributed Systems, </title> <booktitle> in Proceedings of the Workshop on Middleware for Real-Time Systems and Services, </booktitle> <address> (San Francisco, CA), </address> <publisher> IEEE, </publisher> <month> December </month> <year> 1997. </year>
Reference-contexts: Therefore, the TAO programming model focuses on the RT Operation and RT Info QoS specifiers, which can be expressed in standard OMG IDL. The Realize project at UCSB <ref> [31] </ref> supports soft real-time resource management of CORBA distributed systems. Realize aims to reduce the difficulty of developing real-time systems and to permit distributed real-time programs to be programmed, tested, and debugged as easily as single sequential programs. <p> The key innovations in Realize are its integration of distributed real-time scheduling with fault-tolerance, of fault-tolerance with totally-ordered multicasting, and of totally-ordered multicasting with distributed real-time scheduling, within the context of object-oriented programming and existing standard operating systems. Realize can be hosted on top of TAO <ref> [31] </ref>. The Epiq project [32] defines an open real-time CORBA scheme that provides QoS guarantees and runtime scheduling flexibility. Epiq extends TAO's off-line scheduling model to provide on-line scheduling. In addition, Epiq allows clients to be added and removed dynamically via an admission test at runtime.
Reference: [32] <author> W. Feng, U. Syyid, and J.-S. Liu, </author> <title> Providing for an Open, Real-Time CORBA, </title> <booktitle> in Proceedings of the Workshop on Middle-ware for Real-Time Systems and Services, </booktitle> <address> (San Francisco, CA), </address> <publisher> IEEE, </publisher> <month> December </month> <year> 1997. </year>
Reference-contexts: Realize can be hosted on top of TAO [31]. The Epiq project <ref> [32] </ref> defines an open real-time CORBA scheme that provides QoS guarantees and runtime scheduling flexibility. Epiq extends TAO's off-line scheduling model to provide on-line scheduling. In addition, Epiq allows clients to be added and removed dynamically via an admission test at runtime.
Reference: [33] <author> T. Abdelzaher, S. Dawson, W.-C.Feng, F.Jahanian, S. Johnson, A. Mehra, T. Mitton, A. Shaikh, K. Shin, Z. Wang, and H. Zou, </author> <title> ARMADA Middleware Suite, </title> <booktitle> in Proceedings of the Workshop on Middleware for Real-Time Systems and Services, </booktitle> <address> (San Fran-cisco, CA), </address> <publisher> IEEE, </publisher> <month> December </month> <year> 1997. </year>
Reference-contexts: Epiq extends TAO's off-line scheduling model to provide on-line scheduling. In addition, Epiq allows clients to be added and removed dynamically via an admission test at runtime. The Epiq project is work-in-progress and empirical results are not yet available. The ARMADA project <ref> [33] </ref> defines a set of communication and middleware services that supports fault-tolerant and end-to-end guarantees for real-time distributed applications. ARMADA provides real-time communication services based on the X-kernel and the Open Group's MK microkernel. This infrastructure serves as a foundation for constructing higher-level real-time middleware services.
Reference: [34] <author> R. Rajkumar, M. Gagliardi, and L. Sha, </author> <title> The Real-Time Publisher/Subscriber Inter-Process Communication Model for Distributed Real-Time Systems: </title> <booktitle> Design and Implementation, in First IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: Thus, the real-time services provided by ARMADA's communication system can be utilized by TAO's ORB Core to support a vertically integrated real-time system. Rajkumar et al., <ref> [34] </ref> at the Carnegie Mellon University Software Engineering Institute, developed a real-time Publisher/Subscriber model. It is functionally similar to the TAO's Real-time Event Channel [1], e.g., it uses real-time threads to prevent priority inversion within the communication framework.
Reference: [35] <author> E. Eide, K. Frei, B. Ford, J. Lepreau, and G. Lindstrom, </author> <month> Flick: </month>
References-found: 35

