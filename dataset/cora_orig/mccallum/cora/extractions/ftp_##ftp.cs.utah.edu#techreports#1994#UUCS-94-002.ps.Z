URL: ftp://ftp.cs.utah.edu/techreports/1994/UUCS-94-002.ps.Z
Refering-URL: ftp://mancos.cs.utah.edu/papers/UUCS-94-002.abst.html
Root-URL: 
Title: A Dossier Driven Persistent Objects Facility  
Author: Robert Mecklenburg Charles Clark Gary Lindstrom Benny Yih 
Date: January 10, 1994  
Address: Salt Lake City, UT 84112 USA  
Affiliation: Department of Computer Science University of Utah  
Pubnum: UUCS-94-002  
Abstract: We describe the design and implementation of a persistent object storage facility based on a dossier driven approach. Objects are characterized by dossiers which describe both their language defined and "extra-linguistic" properties. These dossiers are generated by a C++ preprocessor in concert with an augmented, but completely C++ compatible, class description language. The design places very few burdens on the application programmer and can be used without altering the data member layout of application objects or inheriting from special classes. The storage format is kept simple to allow the use of a variety of data storage backends. Finally, by providing a generic object to byte stream conversion the persistent object facility can also be used in conjunction with an interprocess communication facility to provide object-level communication between processes. 1 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Rakesh Agrawal, Shaul Dar, and Narain H. Gehani. </author> <title> The o++ database programming language: Implementation and experience. </title> <booktitle> In Proceedings of the IEEE 9th International Conference on Data Engineering. </booktitle> <publisher> IEEE Computer Press, </publisher> <year> 1993. </year>
Reference-contexts: pointer swizzling yes [19, 21, 20] none no modified g++ parallel class hierarchy vm and pointer swizzling n/a EC++ [24] Restricted C++ no yes named object, special base class rpc inline code in r/w NIHCL [12] none no no special base class, r/w functions ASCII files inline code in r/w <ref> [11, 7, 1] </ref> Augmented C++ yes compiler overloaded new, special base class tagged byte stream yes ObjectStore [14] DB schema yes yes overloaded new vm and pointer swizzling no OBST [6, 30, 23] Augmented C++ no yes create in container object copied on container commit names as roots SOS Augmented C++
Reference: [2] <author> Alpha 1 Project. </author> <title> Integrated computer aided design and manufacturing: An overview of Alpha 1. </title> <type> Technical report, </type> <institution> University of Utah, Dept. of Computer Science, </institution> <month> March 5, </month> <year> 1992. </year>
Reference-contexts: In addition to supporting object persistence, our approach provides a fully general means for transporting object graphs in address space independent form (i.e., "pickled", with "unswizzled" pointers). Our design has been motivated by the stringent demands of a large (750,000 line) C++ CAD/CAM/visualization application <ref> [2] </ref>. 2 What Is An Ob ject? We begin by defining our unit of persistence, which we term an object.
Reference: [3] <author> Vinny Cahill, Chris Horn, Andre Kramer, Maurice Martin, and Gradimir Starovic. </author> <title> C** and eiffel**: languages for distribution and persistence. </title> <booktitle> In Proceedings of the 1990 OSF Microkernel Applications Workshop, </booktitle> <address> Grenoble, France, </address> <year> 1990. </year>
Reference-contexts: four representative systems is provided in the full paper. 7 System Description Language Dossiers Preprocessor Invocation Implementation Graph Traversal Arjuna [8, 28] Restricted C++ no yes special base class rpc no Avalon [10] Augmented C++ no yes special base class, stable keyword rpc w/ transactions inline code in r/w C** <ref> [3, 17] </ref> none yes, not user visible yes object register method vm and pointer swizzling yes [19, 21, 20] none no modified g++ parallel class hierarchy vm and pointer swizzling n/a EC++ [24] Restricted C++ no yes named object, special base class rpc inline code in r/w NIHCL [12] none no
Reference: [4] <author> Michael J. Carey, David J. DeWitt, Joel E. Richardson, and Eugene J. Shekita. </author> <title> Storage manage ment for objects in EXODUS. </title> <editor> In Won Kim and Frederick H. Lochovsky, editors, </editor> <booktitle> Object-Oriented Concepts, Databases, and Applications, </booktitle> <pages> pages 341-369. </pages> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: The first uses a version of DBM supporting transaction semantics. The other converts objects to a serial byte stream for use across interprocess communication channels. We plan to add an interface to the EXODUS storage manager <ref> [4] </ref> shortly. Although the design described here is quite general there are a number of limitations in the current system. Most important, we do not support pointers to the interior of objects (although the load store hooks allow crude handling of some cases).
Reference: [5] <author> John B. Carter, Bryan Ford, Mike Hibler, Ravindra Kuramkote, Jeffrey Law, Jay Lepreau, Dou glas B. Orr, Leigh Stoller, and Mark Swanson. </author> <title> FLEX: A tool for building efficient and flexible systems. </title> <booktitle> In Proc. Fourth Workshop on Workstation Operating Systems, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: A portable, comprehensive dossier facility has applications in a variety of areas. Two applications related to our research are inter-language object transmission [16] and dynamic reconfiguration of software systems <ref> [5] </ref>. 11 Related Work Persistent objects has been an area of intense research over the last few years and there are a large number of approaches. Table 1 provides a brief summary of some of these systems.
Reference: [6] <author> Eduardo Casais, Michael Ranft, Bernhard Schiefer, Dietmar Theobald, and Walter Zimmer. </author> <title> OBST an overview. </title> <type> Technical report, </type> <institution> Forschungszentrum Informatik (FZI), D-76131 Karlsruhe, Germany, </institution> <year> 1993. </year>
Reference-contexts: inline code in r/w NIHCL [12] none no no special base class, r/w functions ASCII files inline code in r/w [11, 7, 1] Augmented C++ yes compiler overloaded new, special base class tagged byte stream yes ObjectStore [14] DB schema yes yes overloaded new vm and pointer swizzling no OBST <ref> [6, 30, 23] </ref> Augmented C++ no yes create in container object copied on container commit names as roots SOS Augmented C++ no modified g++ special base class, overloaded new object fault on special pointer class special pointer class Texas [29, 31] a.out yes, packed in 2 tables tdesc overloaded new vm
Reference: [7] <author> S. Dar, N. H. Gehani, and H. V. Jagadish. CQL++: </author> <title> A SQL for a c++ based object-oriented DBMS. </title> <editor> In A. Pirotte, C. Delobel, and G. Gottlob, editors, </editor> <booktitle> Advances in Database Technology -EDBT '92: Proceedings of the 3rd International Conference on Extending Database Technology, </booktitle> <address> Vienna, Austria, March, 1992, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: pointer swizzling yes [19, 21, 20] none no modified g++ parallel class hierarchy vm and pointer swizzling n/a EC++ [24] Restricted C++ no yes named object, special base class rpc inline code in r/w NIHCL [12] none no no special base class, r/w functions ASCII files inline code in r/w <ref> [11, 7, 1] </ref> Augmented C++ yes compiler overloaded new, special base class tagged byte stream yes ObjectStore [14] DB schema yes yes overloaded new vm and pointer swizzling no OBST [6, 30, 23] Augmented C++ no yes create in container object copied on container commit names as roots SOS Augmented C++
Reference: [8] <author> G.N. Dixon, G.D. Parrington, S.K. Shrivastava, and S.M. Wheater. </author> <title> The treatment of persistent objects in Arjuna. </title> <editor> In Stephen Cook, editor, </editor> <booktitle> Proceedings of the 1989 European Conference on Object-Oriented Programming, </booktitle> <pages> pages 169-189, </pages> <institution> University of Nottingham, </institution> <address> July 10-14, 1989. </address> <publisher> Cambridge University Press. </publisher>
Reference-contexts: Table 1 provides a brief summary of some of these systems. A more in depth discussion of four representative systems is provided in the full paper. 7 System Description Language Dossiers Preprocessor Invocation Implementation Graph Traversal Arjuna <ref> [8, 28] </ref> Restricted C++ no yes special base class rpc no Avalon [10] Augmented C++ no yes special base class, stable keyword rpc w/ transactions inline code in r/w C** [3, 17] none yes, not user visible yes object register method vm and pointer swizzling yes [19, 21, 20] none no
Reference: [9] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference: [10] <author> Jeffrey L. Eppinger, Lily B. Mummert, and Alfred Z. Spector, </author> <title> editors. Camelot and Avalon: A Distributed Transaction Facility. Data Management Systems. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> Menlo Park, CA, </address> <year> 1991. </year>
Reference-contexts: Table 1 provides a brief summary of some of these systems. A more in depth discussion of four representative systems is provided in the full paper. 7 System Description Language Dossiers Preprocessor Invocation Implementation Graph Traversal Arjuna [8, 28] Restricted C++ no yes special base class rpc no Avalon <ref> [10] </ref> Augmented C++ no yes special base class, stable keyword rpc w/ transactions inline code in r/w C** [3, 17] none yes, not user visible yes object register method vm and pointer swizzling yes [19, 21, 20] none no modified g++ parallel class hierarchy vm and pointer swizzling n/a EC++ [24]
Reference: [11] <author> N. H. Gehani. OdeFS: </author> <title> A file system interface to an object-oriented database. </title> <type> Technical report, </type> <institution> AT&T Bell Laboratories, </institution> <address> Murray Hill, New Jersey 07974, </address> <year> 1989. </year> <month> 9 </month>
Reference-contexts: pointer swizzling yes [19, 21, 20] none no modified g++ parallel class hierarchy vm and pointer swizzling n/a EC++ [24] Restricted C++ no yes named object, special base class rpc inline code in r/w NIHCL [12] none no no special base class, r/w functions ASCII files inline code in r/w <ref> [11, 7, 1] </ref> Augmented C++ yes compiler overloaded new, special base class tagged byte stream yes ObjectStore [14] DB schema yes yes overloaded new vm and pointer swizzling no OBST [6, 30, 23] Augmented C++ no yes create in container object copied on container commit names as roots SOS Augmented C++
Reference: [12] <author> Keith E. Gorlen, Sanford M. Orlow, and Perry S. Plexico. </author> <title> Data Abstraction and Object-Oriented Programming in C++. </title> <publisher> John Wiley & Sons, </publisher> <year> 1990. </year>
Reference-contexts: r/w C** [3, 17] none yes, not user visible yes object register method vm and pointer swizzling yes [19, 21, 20] none no modified g++ parallel class hierarchy vm and pointer swizzling n/a EC++ [24] Restricted C++ no yes named object, special base class rpc inline code in r/w NIHCL <ref> [12] </ref> none no no special base class, r/w functions ASCII files inline code in r/w [11, 7, 1] Augmented C++ yes compiler overloaded new, special base class tagged byte stream yes ObjectStore [14] DB schema yes yes overloaded new vm and pointer swizzling no OBST [6, 30, 23] Augmented C++ no
Reference: [13] <author> John A. Interrante and Mark A. Linton. </author> <title> Runtime access to type information in C++. </title> <booktitle> In USENIX Proceedings C++ Conference, </booktitle> <pages> pages 233-240. </pages> <publisher> USENIX Association, </publisher> <year> 1990. </year>
Reference-contexts: We describe a new approach which poses no constraints in (i) - (v), and minor client obligations in (vi). Our approach is based on preprocessor-generated dossier objects <ref> [13] </ref>, which drive fully polymorphic (i.e., applicable to all types) load and store functions. In addition to supporting object persistence, our approach provides a fully general means for transporting object graphs in address space independent form (i.e., "pickled", with "unswizzled" pointers).
Reference: [14] <author> Charles Lamb, Gordon Landis, Jack Orenstein, and Dan Weinreb. </author> <title> The ObjectStore database system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 50-63, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: n/a EC++ [24] Restricted C++ no yes named object, special base class rpc inline code in r/w NIHCL [12] none no no special base class, r/w functions ASCII files inline code in r/w [11, 7, 1] Augmented C++ yes compiler overloaded new, special base class tagged byte stream yes ObjectStore <ref> [14] </ref> DB schema yes yes overloaded new vm and pointer swizzling no OBST [6, 30, 23] Augmented C++ no yes create in container object copied on container commit names as roots SOS Augmented C++ no modified g++ special base class, overloaded new object fault on special pointer class special pointer class
Reference: [15] <author> Robert W. Mecklenburg. </author> <title> The specification for a binary file format for alpha 1 models. </title> <type> Alpha 1 technical report 88-6, </type> <institution> University of Utah, </institution> <year> 1988. </year>
Reference-contexts: New data members may be initialized to some default value (e.g., zero). Experience with one large project indicates that this is a useful evolution technique for many simple object transformations <ref> [15] </ref>. Nevertheless, it is insufficient as the only (or even primary) type evolution mechanism. The final technique allows the application programmer to provide a function to translate an object from one version of a class to another.
Reference: [16] <author> Robert W. Mecklenburg. </author> <title> Towards a Language Independent Object System. </title> <type> PhD thesis, </type> <institution> University of Utah, </institution> <address> Salt Lake City, Utah, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: In addition, dynamically loading class definitions in the form of dossiers and member functions is possible through the use of our object/meta-object server [18]. A portable, comprehensive dossier facility has applications in a variety of areas. Two applications related to our research are inter-language object transmission <ref> [16] </ref> and dynamic reconfiguration of software systems [5]. 11 Related Work Persistent objects has been an area of intense research over the last few years and there are a large number of approaches. Table 1 provides a brief summary of some of these systems.
Reference: [17] <author> Michael Mock, Reinhold Kroeger, and Vinny Cahill. </author> <title> Implementing atomic objects with the RelaX transaction facility. </title> <journal> Computing Systems, </journal> <volume> 5(3) </volume> <pages> 259-304, </pages> <month> Summer </month> <year> 1992. </year>
Reference-contexts: four representative systems is provided in the full paper. 7 System Description Language Dossiers Preprocessor Invocation Implementation Graph Traversal Arjuna [8, 28] Restricted C++ no yes special base class rpc no Avalon [10] Augmented C++ no yes special base class, stable keyword rpc w/ transactions inline code in r/w C** <ref> [3, 17] </ref> none yes, not user visible yes object register method vm and pointer swizzling yes [19, 21, 20] none no modified g++ parallel class hierarchy vm and pointer swizzling n/a EC++ [24] Restricted C++ no yes named object, special base class rpc inline code in r/w NIHCL [12] none no
Reference: [18] <author> Douglas B. Orr and Robert W. Mecklenburg. </author> <title> OMOS | an object server for program execution. </title> <booktitle> In Proc. International Workshop on Object Oriented Operating Systems, </booktitle> <pages> pages 200-209, </pages> <address> Paris, </address> <month> September </month> <year> 1992. </year> <journal> IEEE Computer Society. </journal> <note> Also available as technical report UUCS-92-033. </note>
Reference-contexts: Given our current implementation constraints this will probably require complete object encapsulation. In addition, dynamically loading class definitions in the form of dossiers and member functions is possible through the use of our object/meta-object server <ref> [18] </ref>. A portable, comprehensive dossier facility has applications in a variety of areas.
Reference: [19] <author> Joel E. Richardson and Michael J. Carey. </author> <title> Persistence in the E language: Issues and implementation. </title> <journal> Software-Practice and Experience, </journal> 19(12) 1115-1150, December 1989. 
Reference-contexts: Implementation Graph Traversal Arjuna [8, 28] Restricted C++ no yes special base class rpc no Avalon [10] Augmented C++ no yes special base class, stable keyword rpc w/ transactions inline code in r/w C** [3, 17] none yes, not user visible yes object register method vm and pointer swizzling yes <ref> [19, 21, 20] </ref> none no modified g++ parallel class hierarchy vm and pointer swizzling n/a EC++ [24] Restricted C++ no yes named object, special base class rpc inline code in r/w NIHCL [12] none no no special base class, r/w functions ASCII files inline code in r/w [11, 7, 1] Augmented
Reference: [20] <author> Joel E. Richardson and Michael J. Carey. </author> <title> Implementing persistence in E. </title> <editor> In John Rosenberg and David Koch, editors, </editor> <booktitle> Persistent Object Systems: Proceedings of the Third International Workshop, Workshops in Computing, </booktitle> <pages> pages 175-199. </pages> <publisher> Springer-Verlag, Newcastle, </publisher> <address> Australia, </address> <month> January 10-13, </month> <year> 1989, 1990. </year>
Reference-contexts: Implementation Graph Traversal Arjuna [8, 28] Restricted C++ no yes special base class rpc no Avalon [10] Augmented C++ no yes special base class, stable keyword rpc w/ transactions inline code in r/w C** [3, 17] none yes, not user visible yes object register method vm and pointer swizzling yes <ref> [19, 21, 20] </ref> none no modified g++ parallel class hierarchy vm and pointer swizzling n/a EC++ [24] Restricted C++ no yes named object, special base class rpc inline code in r/w NIHCL [12] none no no special base class, r/w functions ASCII files inline code in r/w [11, 7, 1] Augmented
Reference: [21] <author> Joel E. Richardson, Michael J. Carey, and Daniel T. Schuh. </author> <title> The design of the E programming language. </title> <type> Technical Report 814, </type> <institution> Computer Science Department, University of Wisconsin, Madison, WI, </institution> <month> February </month> <year> 1989. </year>
Reference-contexts: Implementation Graph Traversal Arjuna [8, 28] Restricted C++ no yes special base class rpc no Avalon [10] Augmented C++ no yes special base class, stable keyword rpc w/ transactions inline code in r/w C** [3, 17] none yes, not user visible yes object register method vm and pointer swizzling yes <ref> [19, 21, 20] </ref> none no modified g++ parallel class hierarchy vm and pointer swizzling n/a EC++ [24] Restricted C++ no yes named object, special base class rpc inline code in r/w NIHCL [12] none no no special base class, r/w functions ASCII files inline code in r/w [11, 7, 1] Augmented
Reference: [22] <author> Jim Roskind. </author> <title> A yacc-able c++ 2.1 grammar, and the resulting ambiguities. </title> <month> July </month> <year> 1991. </year>
Reference-contexts: Once an application's class declarations (e.g., .h files) have been adapted to express these extra-linguistic features, they become the application's class description. These files are read and analyzed by a preprocessor based on the C++ grammar (written by James Roskind <ref> [22] </ref>). The preprocessor emits auxiliary C++ files which construct instances of class dossiers embodying the class descriptions, including associated annotations. These emitted files are compiled and linked, along with a support library, into an application to implement the client side of the POS.
Reference: [23] <author> Bernhard Schiefer, Dietmar Theobald, and Jurgen Uhl. </author> <title> User's guide: OBST release 3.3. </title> <type> Technical report, </type> <institution> Forschungszentrum Informatik (FZI), D-76131 Karlsruhe, Germany, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: inline code in r/w NIHCL [12] none no no special base class, r/w functions ASCII files inline code in r/w [11, 7, 1] Augmented C++ yes compiler overloaded new, special base class tagged byte stream yes ObjectStore [14] DB schema yes yes overloaded new vm and pointer swizzling no OBST <ref> [6, 30, 23] </ref> Augmented C++ no yes create in container object copied on container commit names as roots SOS Augmented C++ no modified g++ special base class, overloaded new object fault on special pointer class special pointer class Texas [29, 31] a.out yes, packed in 2 tables tdesc overloaded new vm
Reference: [24] <author> Manuel Sequeira and Jose Alves Marques. </author> <booktitle> Can c++ be used for programming distributed and persistent objects? In Proceedings 1991 International Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pages 173-176, </pages> <address> Palo Alto, CA, </address> <month> October 17-18, </month> <title> 1991. </title> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: [10] Augmented C++ no yes special base class, stable keyword rpc w/ transactions inline code in r/w C** [3, 17] none yes, not user visible yes object register method vm and pointer swizzling yes [19, 21, 20] none no modified g++ parallel class hierarchy vm and pointer swizzling n/a EC++ <ref> [24] </ref> Restricted C++ no yes named object, special base class rpc inline code in r/w NIHCL [12] none no no special base class, r/w functions ASCII files inline code in r/w [11, 7, 1] Augmented C++ yes compiler overloaded new, special base class tagged byte stream yes ObjectStore [14] DB schema
Reference: [25] <author> Marc Shapiro. </author> <title> Prototyping a distributed object-oriented operating system on Unix. </title> <booktitle> In Proceedings of the First USENIX/SERC Workshop on Experiences with Distributed and Multiprocesor Systems, </booktitle> <pages> pages 311-331, </pages> <address> Fort Lauderdale, FL, </address> <month> October 5-6, </month> <year> 1989. </year> <institution> Usenix Association. </institution>
Reference: [26] <author> Marc Shapiro, Yvon Gourhant, Sabine Habert, Laurence Mosseri, Michel Ruffin, and Celine Valot. </author> <title> SOS: An object-oriented operating systems|assessment and perspectives. </title> <journal> Computing Systems, </journal> <volume> 2(4) </volume> <pages> 287-337, </pages> <month> Fall </month> <year> 1989. </year>
Reference: [27] <author> Marc Shapiro and Laurence Mosseri. </author> <title> A simple object storage system. </title> <editor> In John Rosenberg and David Koch, editors, </editor> <booktitle> Persistent Object Systems: Proceedings of the Third International Workshop, Workshops in Computing, </booktitle> <pages> pages 272-276. </pages> <publisher> Springer-Verlag, Newcastle, </publisher> <address> Australia, </address> <month> January 10-13, </month> <year> 1989, 1990. </year>
Reference: [28] <author> Santosh K. Shrivastava et al. </author> <title> The Arjuna System Programmer's Guide. </title> <institution> Arjuna Research Group, Computing Laboratory, University of Newcastle upon Tyne, UK, </institution> <month> February </month> <year> 1992. </year> <note> Public Release 1.0. </note>
Reference-contexts: Table 1 provides a brief summary of some of these systems. A more in depth discussion of four representative systems is provided in the full paper. 7 System Description Language Dossiers Preprocessor Invocation Implementation Graph Traversal Arjuna <ref> [8, 28] </ref> Restricted C++ no yes special base class rpc no Avalon [10] Augmented C++ no yes special base class, stable keyword rpc w/ transactions inline code in r/w C** [3, 17] none yes, not user visible yes object register method vm and pointer swizzling yes [19, 21, 20] none no
Reference: [29] <author> Vivek Singhal, Sheetal V. Kakkad, and Paul R. Wilson. </author> <title> Texas: An efficient, portable persistent store. </title> <booktitle> In Proceedings of The Fifth International Workshop on Persistent Object Systems (POS-V), </booktitle> <address> San Miniato, Italy, </address> <month> September, </month> <year> 1992, 1992. </year>
Reference-contexts: schema yes yes overloaded new vm and pointer swizzling no OBST [6, 30, 23] Augmented C++ no yes create in container object copied on container commit names as roots SOS Augmented C++ no modified g++ special base class, overloaded new object fault on special pointer class special pointer class Texas <ref> [29, 31] </ref> a.out yes, packed in 2 tables tdesc overloaded new vm and pointer swizzling n/a? Utah Dossiers Augmented C++ yes, persistent objects Roskind grammar-based (fufu) r/w functions distributed rpc w/ tagged byte stream dossier driven Table 1: Summary of persistent objects systems and their approach. 8 12 Conclusions By using
Reference: [30] <author> Jurgen Uhl, Dietmar Theobald, Bernhard Schiefer, Michael Ranft, Walter Zimmer, and Jochen Alt. </author> <title> The object management system of STONE: OBST release 3.3. </title> <type> Technical report, </type> <institution> Forschungszentrum Informatik (FZI), D-76131 Karlsruhe, Germany, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: inline code in r/w NIHCL [12] none no no special base class, r/w functions ASCII files inline code in r/w [11, 7, 1] Augmented C++ yes compiler overloaded new, special base class tagged byte stream yes ObjectStore [14] DB schema yes yes overloaded new vm and pointer swizzling no OBST <ref> [6, 30, 23] </ref> Augmented C++ no yes create in container object copied on container commit names as roots SOS Augmented C++ no modified g++ special base class, overloaded new object fault on special pointer class special pointer class Texas [29, 31] a.out yes, packed in 2 tables tdesc overloaded new vm
Reference: [31] <author> Paul R. Wilson and Sheetal V. Kakkad. </author> <title> Pointer swizzling at page fault time: Efficiently and compatibly supporting huge address spaces on standard hardware. </title> <booktitle> In Proceedings of the Second International Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pages 364-377, </pages> <address> Dourdan, France, September 24-25, 1992. </address> <publisher> IEEE Computer Society Press. </publisher> <pages> 11 </pages>
Reference-contexts: schema yes yes overloaded new vm and pointer swizzling no OBST [6, 30, 23] Augmented C++ no yes create in container object copied on container commit names as roots SOS Augmented C++ no modified g++ special base class, overloaded new object fault on special pointer class special pointer class Texas <ref> [29, 31] </ref> a.out yes, packed in 2 tables tdesc overloaded new vm and pointer swizzling n/a? Utah Dossiers Augmented C++ yes, persistent objects Roskind grammar-based (fufu) r/w functions distributed rpc w/ tagged byte stream dossier driven Table 1: Summary of persistent objects systems and their approach. 8 12 Conclusions By using
References-found: 31

