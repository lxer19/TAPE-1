URL: http://polaris.cs.uiuc.edu/reports/1157.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/tech_reports.html
Root-URL: http://www.cs.uiuc.edu
Title: Cedar Fortran Programmer's Manual  
Author: Jay Hoeflinger 
Note: 1 This work was supported by the U.S. Department of Energy under Grant No. DOE DE FG02-85ER25001.  
Date: June 14, 1993  
Address: Urbana, Illinois 61801  
Affiliation: Center for Supercomputing Research and Development University of Illinois at Urbana-Champaign  
Abstract-found: 0
Intro-found: 1
Reference: [All85] <institution> Alliant Computer Systems Corporation, One Monarch Drive, Littleton, </institution> <month> Mas-sachusetts 01460. </month> <title> FX/Series Architecture Manual Concurrency Supplement, 1985. Part Number: </title> <publisher> 300-10001-A. </publisher>
Reference-contexts: The stride of the vector instruction produced through the use of this function is always 1. This function causes the use of the Alliant vov instruction <ref> [All85] </ref>, which calculates the value offset = l origlength numberofprocessors m in which vpn is "virtual processor number", and origlength is "original length of the vector instruction". * length = vlv$( origlength ) vector length vertical INTEGER length, origlength For vertically stripmining 8 vector work inside a cluster: The length of <p> The stride of the vector instruction produced through the use of this function is always 1. This function causes the use of the Alliant vlv instruction <ref> [All85] </ref>, which calculates the value length = min ( l origlength numberofprocessors m ; origlength vpn fi l origlength numberofprocessors m in which vpn is "virtual processor number", and origlength is "original length of the vector instruction". 8 See Figure 11 45 An example using vov$ and vlv$: Work to be <p> This function causes the use of the Alliant voh instruction <ref> [All85] </ref>, which calculates the value offset = origincrement fi vpn in which vpn is "virtual processor number", and origincrement is "original increment of the vector instruction". * length = vlh$( origlength ) vector length horizontal INTEGER length, origlength For horizontally stripmining 9 vector work inside a cluster: The length of a <p> This function causes the use of the Alliant vlh instruction <ref> [All85] </ref>, which calculates the value length = l origlengthvpn numberofprocessors m in which vpn is "virtual processor number", and origlength is "original length of the vector instruction". * increment = vih$( origincrement ) vector increment horizontal INTEGER increment, origincrement 9 See Figure 11 46 For horizontally stripmining 9 vector work inside <p> This function causes the use of the Alliant vih instruction <ref> [All85] </ref>, which calculates the value increment = origincrement fi numberof processors in which origincrement is "original increment of the vector instruction".
Reference: [All86] <institution> Alliant Computer Systems Corporation, 42 Nagog Park, Acton, Massachusetts 01720. FX/Series Architecture Manual, </institution> <year> 1986. </year> <title> Part Number: </title> <publisher> 300-00001-B. </publisher>
Reference-contexts: All processors have access to a large global memory. Additionally, each cluster has its own cluster memory that can only be accessed by the processors in that cluster. There are four clusters, each containing eight processors. Cedar clusters are CSRD-modified Alliant Computer Systems FX/8 multiprocessors <ref> [All86] </ref> that are connected through a network to a global memory. The operating system for Cedar is called Xylem [Sta91][Emr85]. It is derived from the Alliant Concentrix operating system which itself is derived from Berkeley 4.2 Unix TM . <p> If the error that happens is a floating point exception, the program will halt with a message similar to the following: *** Entering Debugger *** Task 1 : Floating Point Exception (FP exception code 0x20) mdb&gt; The floating point exception code numbers and their meanings (from the FX/Series Architecture Manual <ref> [All86] </ref>, section 2.3.4.2, page 2-16) follow. * FPE INEX2 EXCP= '02'X inex2 (Inexact result) Set if the operands are in-range non-zero values and the result does not equal the infinitely precise result. The result is rounded according to the rounding mode.
Reference: [All87] <institution> Alliant Computer Systems Corporation, One Monarch Drive, Littleton, </institution> <note> Mas-sachusetts 01460. FX/Fortran Language Manual, </note> <month> May </month> <year> 1987. </year>
Reference-contexts: The Cedar Restructurer is derived from a 1988 version of the KAP restructurer [Kuc88] 4 from Kuck and Associates. Extensive modifications were made to it to allow it to generate code for the Cedar. Cedar Fortran is derived from Alliant FX/Fortran 1 <ref> [All87] </ref> with extensions for parallel loops, placing data in the memory hierarchy, multitasking and synchronization. FX/Fortran is a subset of the Fortran90 standard [Ame91] and a superset of the For-tran77 standard [Ame78]. <p> Another routine, hrcdelta, is provided to return the time difference (in seconds) between two 64-bit high-resolution counter values. Both routines are documented in the Alliant Fortran manual <ref> [All87] </ref>.
Reference: [Ame78] <institution> American National Standards Institute. Programming Language Fortran ANSI (X3.9-1978), </institution> <year> 1978. </year>
Reference-contexts: Cedar Fortran is derived from Alliant FX/Fortran 1 [All87] with extensions for parallel loops, placing data in the memory hierarchy, multitasking and synchronization. FX/Fortran is a subset of the Fortran90 standard [Ame91] and a superset of the For-tran77 standard <ref> [Ame78] </ref>. Cedar Fortran has been specifically designed and implemented to give the user access to the full power of Cedar. The Cedar system supports three levels of parallelism: vector parallelism, loop parallelism, and task parallelism. A Cedar Fortran program is executed as a process running under the Xylem operating system.
Reference: [Ame91] <institution> American National Standards Institute. Fortran 90, </institution> <year> 1991. </year> <note> ANSI X3.198-199x. </note>
Reference-contexts: Extensive modifications were made to it to allow it to generate code for the Cedar. Cedar Fortran is derived from Alliant FX/Fortran 1 [All87] with extensions for parallel loops, placing data in the memory hierarchy, multitasking and synchronization. FX/Fortran is a subset of the Fortran90 standard <ref> [Ame91] </ref> and a superset of the For-tran77 standard [Ame78]. Cedar Fortran has been specifically designed and implemented to give the user access to the full power of Cedar. The Cedar system supports three levels of parallelism: vector parallelism, loop parallelism, and task parallelism.
Reference: [BM86] <author> M. Booth and K. Misegades. </author> <title> Microtasking: A New Way to Harness Multiprocessors. </title> <journal> Cray Channels, </journal> <pages> pages 24-27, </pages> <year> 1986. </year>
Reference-contexts: The Cedar global memory provides some synchronization hardware and a communication path between clusters, but no iteration-scheduling support. Runtime library routines are necessary to coordinate the execution of a spread loop. 4.3 Runtime Support for Spread Loops The execution of spread loops involves a technique called microtasking <ref> [BM86] </ref>. The original task of a program starts running on the original cluster. As part of its startup code, it starts several Xylem tasks (called helper tasks), which will assist in the execution of spread loops.
Reference: [Cra85] <author> Cray Research Inc. </author> <title> Multitasking User Guide, </title> <month> January </month> <year> 1985. </year>
Reference-contexts: Routines are provided in Cedar Fortran with the same syntax and semantics as the Cray-XMP synchronization routines. They are lock-asgn, lockon, lockoff, lockrel, evasgn, evwait, evpost, evclear, and evrel. These routines are discussed briefly in Section 5.5. A full description may be found in <ref> [Cra85] </ref>. d) Cross-cluster spin-locking. This facility is provided through the qlock routines. 5.3 CDOACROSS Loop Synchronization Up to eight regions within a CDOACROSS loop may be serialized through the use of the routines advance and await. There are eight concurrency registers within the Alliant CCU. <p> The original value of int1 is returned by the function. The result of the operation is stored into int1. In the function name, xxx may be add, sub, or set. 5.5 Cray-XMP Synchronization Routines The Cray-XMP synchronization routines provided in Cedar Fortran are described fully in <ref> [Cra85] </ref>. There are two sets of routines, locking routines and event routines. The locking routines are lockasgn, lockon, lockoff, and lockrel. The event routines are evasgn, evwait, evpost, evclear, and evrel. The locking routines take an integer variable as an argument.
Reference: [Emr85] <author> Perry A. Emrath. </author> <title> Xylem: An Operating System for the Cedar Multiprocessor. </title> <journal> IEEE Software, </journal> <volume> 2(4) </volume> <pages> 30-37, </pages> <month> July </month> <year> 1985. </year>
Reference: [KDLS86] <author> David Kuck, Edward Davidson, Duncan Lawrie, and Ahmed Sameh. </author> <title> Parallel supercomputing today and the cedar approach. </title> <booktitle> Science, </booktitle> <pages> pages 967-974, </pages> <month> February </month> <year> 1986. </year>
Reference: [Kuc88] <author> Kuck and Associates, Inc., </author> <title> 1906 Fox Drive, </title> <address> Champaign, IL 61820. </address> <note> KAP: KAP/CAF, KAP/CF, KAP/AF, KAP/DD User's Guide, Version 5, 1988. Document Number 8803013. </note>
Reference-contexts: It is derived from the Alliant Concentrix operating system which itself is derived from Berkeley 4.2 Unix TM . Xylem provides the facilities for multitasking and task synchronization necessary to fully exploit the power of Cedar. The Cedar Restructurer is derived from a 1988 version of the KAP restructurer <ref> [Kuc88] </ref> 4 from Kuck and Associates. Extensive modifications were made to it to allow it to generate code for the Cedar. Cedar Fortran is derived from Alliant FX/Fortran 1 [All87] with extensions for parallel loops, placing data in the memory hierarchy, multitasking and synchronization.
Reference: [Met85] <author> Michael Metcalf. </author> <title> Effective Fortran 77. </title> <publisher> Oxford Science Publications, </publisher> <year> 1985. </year>
Reference-contexts: This manual will assume that the reader is already familiar with Fortran77 and will only describe the differences between Cedar Fortran and Fortran77 in detail. Many resources exist for those who need to learn or review Fortran77, one of them being <ref> [Met85] </ref>. 1 Alliant, FX/8, FX/Fortran, and Concentrix are all trademarks of Alliant Computer Systems Corporation. 5 2 Memory Allocation and Control The concept of memory in Cedar Fortran departs from the traditional view of a linear memory space. Memory in the Cedar multiprocessor is hierarchical.
Reference: [Sta91] <author> CSRD Staff. </author> <title> The Cedar Project. </title> <type> Technical Report 1122, </type> <institution> Center for Supercomputing Research and Development, </institution> <month> May </month> <year> 1991. </year>
Reference: [ZY87] <author> Chuan-Qi Zhu and Pen-Chung Yew. </author> <title> A scheme to enforce data dependence on large multiprocessor systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(6) </volume> <pages> 726-739, </pages> <month> June </month> <year> 1987. </year> <month> 77 </month>
Reference-contexts: CDOACROSS loops allow synchronization between iterations. The await and advance routines provide this synchronization between processors on a single cluster. b) Zhu-Yew synchronization primitives <ref> [ZY87] </ref>. These primitives are implemented through the routines ifetch and xxx. c) Cray-XMP synchronization. Routines are provided in Cedar Fortran with the same syntax and semantics as the Cray-XMP synchronization routines. They are lock-asgn, lockon, lockoff, lockrel, evasgn, evwait, evpost, evclear, and evrel.
References-found: 13

