URL: http://www.cs.umn.edu/Ajanta/papers/nmk_thesis.ps
Refering-URL: http://www.cs.umn.edu/Ajanta/
Root-URL: http://www.cs.umn.edu
Note: Contents  
Abstract-found: 0
Intro-found: 1
Reference: [Abadi and Needham 1996] <author> Martin Abadi and Roger Needham. </author> <title> Prudent Engineering Practice for Cryptographic Protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(1), </volume> <month> January </month> <year> 1996. </year>
Reference-contexts: While the underlying mathematics is usually sound, there are several ways in which these proto cols may leave loopholes that can be exploited to render the system insecure [Moore 1988]. Thus, care must be taken in the design of such protocols <ref> [Abadi and Needham 1996] </ref>. 3 This is a somewhat vague term which basically means that while it is not impossible, it would take an inordinately long time to compute hundreds of years, for example. <p> The DSA key and algorithm is used to securely authenticate a client to a server, and vice versa. The protocol for this authentication was developed using a challenge-response mechanism, with randomly generated nonces to prevent replay attacks <ref> [Abadi and Needham 1996] </ref>. It operates at the application level, i.e., it is not a network-level protocol for creating authenticated network connections wherein the endpoints know each other's host names securely.
Reference: [Ames et al. 1983] <author> Stanley R. Ames, Morrie Gasser, and Roger Schell. </author> <title> Security Kernel Design and Implementation: An Introduction. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 14-22, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: Therefore, only trusted classes should be put on the classpath, and these classes must be designed carefully | all accesses to sensitive resources should be screened by the security manager. Thus the security manager acts as a reference monitor <ref> [Ames et al. 1983] </ref>. The Java security model however is designed specifically for applets. Applets resemble mobile agents in that they are transported to remote hosts before execution. However, applets are neither autonomous nor mobile, and therefore far less general than mobile agents.
Reference: [Banino 1986] <author> J.S. Banino. </author> <title> Parallelism and Fault Tolerance in Chorus. </title> <journal> Journal of Systems and Software, </journal> <pages> pages 205-211, </pages> <year> 1986. </year>
Reference-contexts: In REV the client, instead of invoking a remote procedure, sends its own procedure code to a server, and requests the server to execute it and return the results. Earlier systems like R2D2 [Vittal 1981] and Chorus <ref> [Banino 1986] </ref> introduced the concept of active messages that could migrate from node to node, carrying program code to be executed at these nodes. A more generic concept is a mobile object, which encapsulates data along with the set of CHAPTER 1.
Reference: [Bic et al. 1996] <author> Lubomir F. Bic, Munehiro Fukuda, and Michael B. Dillencourt. </author> <title> Distributed Computing using Autonomous Objects. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 55-61, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: Such systems offer the natural advantages of object-orientation in building agent-based applications. Complex agent programs are easier to write and maintain using object-oriented languages. Some systems have also used interpreted versions of traditional procedural languages like C, for agent programming <ref> [Bic et al. 1996] </ref>. Mobile agent systems can differ significantly in the programming model used for coding agents. In some cases, the agent program is merely a script, often with little or no need for control flow. In others, the script language (e.g.
Reference: [Burrows et al. 1990] <author> Michael Burrows, Martin Abadi, and Roger Needham. </author> <title> A Logic of Authentication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 8(1) </volume> <pages> 18-36, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: For example, using the BAN logic <ref> [Burrows et al. 1990] </ref>, the trust and belief relationships between entities in the system can be modelled.
Reference: [Cardelli 1995] <author> Luca Cardelli. </author> <title> A Language with Distributed Scope. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Programming Languages (POPL '95), </booktitle> <pages> pages 286-297, </pages> <year> 1995. </year>
Reference-contexts: We have developed a Java-based mobile agent system called Ajanta [Karnik and Tripathi 1998a] that incorporates the results of this dissertation. Systems have also been developed around other object-oriented languages and environments such as Obliq <ref> [Cardelli 1995] </ref>.
Reference: [Chaum et al. 1990] <author> D. Chaum, A. Fiat, and M. Naor. </author> <title> Untraceable Electronic Cash. </title> <booktitle> In Advances in Cryptology Proceedings of CRYPTO '88, </booktitle> <pages> pages 319-327. </pages> <note> Springer-Verlag, Lecture Notes in Computer Science #403, </note> <year> 1990. </year>
Reference-contexts: This would allow for dynamic discovery of resources, an especially important feature on the constantly changing Internet. Another feature that may be necessary for many electronic commerce applications is the use of digital cash <ref> [Chaum et al. 1990] </ref>. The agent infrastructure could incorporate mechanisms for resource usage metering and payment using such online mechanisms. Protocols for negotiating the terms of hosting an agent or providing a service, could also be defined.
Reference: [Diffie and Hellman 1976] <author> Whitfield Diffie and Martin E. Hellman. </author> <title> New Directions in Cryptography. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 22(6) </volume> <pages> 644-654, </pages> <month> November </month> <year> 1976. </year>
Reference-contexts: It can only be converted back to readable form using the same secret key and a complementary decryption algorithm (see decipher the message since she does not possess the shared secret key, whereas Bob can do so. In public-key cryptosystems <ref> [Diffie and Hellman 1976] </ref>, each principal has two keys | a public key which is shared with all other principals (by posting it on a directory service, for example) and a corresponding private key which is kept secret.
Reference: [Diffie et al. 1992] <author> Whitfield Diffie, Paul C. van Oorschot, and Michael J. Weiner. </author> <title> Authentication and Authenticated Key Exchanges. In Designs, Codes and Cryptography, vol.2, </title> <journal> no.2, </journal> <pages> pages 107-125. </pages> <publisher> Kluwer Academic Publishers, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: Thus the encryption serves the purpose of binding Alice's identity to her agent, just as a signature on paper binds the signer's identity to the document. Extensions of the same concept have been used to develop mutual authentication protocols <ref> [Diffie et al. 1992] </ref> | i.e., at the end of the protocol run, both the sender and receiver know each other's identities reliably.
Reference: [ElGamal 1985] <author> Taher ElGamal. </author> <title> A Public Key Cryptosystem and a Signature Scheme based on Discrete Logarithms. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> IT-31(4):469-472, </volume> <month> July </month> <year> 1985. </year> <note> 119 BIBLIOGRAPHY 120 </note>
Reference-contexts: Since this was necessary for some of the security mechanisms we needed, we implemented the ElGamal cryptosystem <ref> [ElGamal 1985] </ref>. This is an asymmetric cryptosystem whose security is predicated upon the difficulty of computing discrete logarithms in a finite field. It is reversible, i.e., it can be used for encryption as well as digital signature generation and verification.
Reference: [Farmer et al. 1996a] <author> William M. Farmer, Joshua D. Guttman, and Vipin Swarup. </author> <title> Security for Mobile Agents: Issues and Requirements. </title> <booktitle> In Proceedings of the 19th National Information Systems Security Conference, </booktitle> <pages> pages 591-597, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: Parts of state in fact must usually change, in order to store the results of computations or queries. Thus it is not possible to provide a general guarantee that the agent will not be maliciously modified <ref> [Farmer et al. 1996a] </ref>. However, the parent application must have some mechanism for detecting such modifications.
Reference: [Farmer et al. 1996b] <author> William M. Farmer, Joshua D. Guttman, and Vipin Swarup. </author> <title> Security for Mobile Agents: Authentication and State Appraisal. </title> <booktitle> In ESORICS '96: 4th European Symposium on Research in Computer Security, </booktitle> <pages> pages 118-130, </pages> <month> September </month> <year> 1996. </year>
Reference: [Ford 1994] <author> Warwick Ford. </author> <title> Computer Communications Security | Principles, Standard Protocols and Techniques. </title> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference-contexts: As a mobile agent traverses the network, its code and data are vulnerable to various types of security threats. We consider the following types of attacks on communication links, that the system needs to protect against <ref> [Ford 1994] </ref>: Passive attacks: In passive attacks, the adversary does not interfere with the message traffic, but only attempts to extract useful information from it. The simplest such attack is eavesdropping, which can result in the leakage of sensitive information stored in the message (agent) being transmitted. <p> Passive attacks are difficult to detect, but can usually be protected against using cryptographic mechanisms <ref> [Ford 1994] </ref>. In contrast, active attacks are relatively easy to detect cryptographically, but given our general threat model, they are difficult to prevent altogether. <p> Class loaders and the security manager are the two basic mechanisms we use for creating protection domains for mobile agents, and for providing agents with protected access to host resources. 3.4 Cryptographic mechanisms Rapid advancements in cryptography <ref> [Schneier 1996, Ford 1994, Stinson 1995] </ref> in recent years have provided us with the foundation for addressing the security needs of our system. For example, cryptographic algorithms can be used for encryption of messages before they traverse an insecure communication link. In symmetric cryptosystems (also called CHAPTER 3.
Reference: [Fritzinger and Mueller 1996] <author> J. Steven Fritzinger and Marianne Mueller. </author> <title> Java Security. </title> <type> Technical report, </type> <institution> Sun Microsystems, Inc., </institution> <year> 1996. </year> <note> Available at URL http://www.javasoft.com/security/whitepaper.ps. </note>
Reference-contexts: Java's abstract windowing toolkit can be useful for developing portable graphical user interfaces for agent applications. Further, the Java environment has a security-aware design <ref> [Fritzinger and Mueller 1996, McGraw and Felten 1996] </ref>, which is elaborated on in Section 3.3. Java also includes a basic security infrastructure [JavaSoft 1997] that can assist in providing security for agents. <p> BACKGROUND AND FOUNDATIONS 37 is usually based on considerations such as performance tradeoffs and the trustworthiness of the server. 3.3 Java security Java is currently widely used for programming applets, which are mini-applications downloaded from web servers to client machines for execution. The Java environment has a security-aware design <ref> [Fritzinger and Mueller 1996, McGraw and Felten 1996] </ref>. Its security model has three major components: 1. A byte-code verifier tests programs to ensure that they do not violate type-safety or cause run-time errors that result in security vulnerabilities (e.g. stack overflows). 2.
Reference: [General Magic, Inc. 1997] <institution> General Magic, Inc. </institution> <note> Odyssey web page. Available at URL http://www.genmagic.com/technology/odyssey.html, 1997. </note>
Reference-contexts: The system terminates agents that exceed their quotas, and raises exceptions when they attempt unauthorized operations. Telescript was not commercially successful, primarily because it required programmers to learn a completely new language. General Magic has now shelved the Telescript project and embarked on a similar, Java-based system called Odyssey <ref> [General Magic, Inc. 1997] </ref> that uses the same design framework. In common with most other Java-based systems however, it lacks thread-level execution state capture. 2.4.2 Tacoma Tacoma [Johansen et al. 1995b] is a joint project of the University of Tromst (Norway), and Cornell University.
Reference: [Gong 1989] <author> Li Gong. </author> <title> A Secure Identity-Based Capability System. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 56-63, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: Even though the reference to a proxy is like a capability, we can limit its propagation from one agent to another by checking whether the invoker of the proxy belongs to the protection domain to which it was originally granted. Thus, a proxy acts as an identity-based capability <ref> [Gong 1989] </ref>. This requires extending the proxy by including in its state, the identifier of the protection domain to which it was assigned. Further, each method must first ensure that this same domain has attempted to invoke it.
Reference: [Gosling et al. 1996] <author> James Gosling, Bill Joy, and Guy Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison-Wesley, </publisher> <month> August </month> <year> 1996. </year>
Reference-contexts: Telescript was followed by several research systems such as Tacoma [Johansen et al. 1995a] and Agent Tcl [Gray 1996], in which agents are written using script languages. The emergence of the Java language and programming environment <ref> [Gosling et al. 1996, Lindholm and Yellin 1996] </ref> with its support for mobile code, led to heightened research activity in this area. It especially spurred the development of object-oriented agent systems, which represent the amalgamation of mobile object systems with mobile agent concepts. <p> An object-oriented, type-safe language is also more resistant to security threats than more permissive languages like C. 34 CHAPTER 3. BACKGROUND AND FOUNDATIONS 35 The Java language <ref> [Gosling et al. 1996] </ref> is uniquely suited for our purposes. It is object-oriented, interpreted and portable | Java virtual machines [Lindholm and Yellin 1996] are available on a wide range of hardware platforms.
Reference: [Gray 1996] <author> Robert S. Gray. </author> <title> Agent Tcl: A flexible and secure mobile-agent system. </title> <booktitle> In Proceedings of the Fourth Annual Tcl/Tk Workshop (TCL '96), </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: Although it was commercially unsuccessful and is no longer available, it retains its historical importance since it was a pioneer in the field. Telescript was followed by several research systems such as Tacoma [Johansen et al. 1995a] and Agent Tcl <ref> [Gray 1996] </ref>, in which agents are written using script languages. The emergence of the Java language and programming environment [Gosling et al. 1996, Lindholm and Yellin 1996] with its support for mobile code, led to heightened research activity in this area. <p> Next, the system must provide a mechanism to find the current location of an entity, given its name. This process is called name resolution. The names assigned to entities may be location-dependent, which allows easier implementation of name resolution. Systems like Agent Tcl <ref> [Gray 1996] </ref>, Aglets [IBM, Inc. 1998] and Tacoma [Johansen et al. 1995b] use such names, based on hostnames and port numbers, and resolve them using the Domain Name System (DNS) [Mockapetris 1987]. In such systems, when an agent migrates, its name changes to reflect its new location. <p> Agents can store application-specific data in cabinets, which can then be accessed by other agents. No security mechanisms are implemented. For fault tolerance, Tacoma uses checkpointing and provides rear-guard agents for tracking mobile agents as they migrate [Johansen et al. 1995a]. 2.4.3 Agent Tcl Agent Tcl <ref> [Gray 1996, Kotz et al. 1997] </ref>, developed at Dartmouth College, allows Tcl scripts to migrate between servers that support agent execution, communication, status queries and non-volatile storage. A modified Tcl interpreter is used to execute the scripts, and it allows the capture of execution state at the thread level.
Reference: [Harrison et al. 1995] <author> Colin G. Harrison, David M. Chess, and Aaron Kershen-baum. </author> <title> Mobile Agents: Are they a good idea? Technical report, </title> <institution> IBM Research Division, T.J.Watson Research Center, </institution> <month> March </month> <year> 1995. </year> <note> Available at URL http://www.research.ibm.com/massdist/mobag.ps. </note>
Reference-contexts: A client can decompose its task among multiple agents for providing parallelism or fault tolerance. The mobile agent paradigm can be exploited in a variety of ways, ranging from low-level system administration tasks to middleware to user-level applications. An example of a system-level application is in real-time control <ref> [Harrison et al. 1995] </ref>. If the application uses remote procedure calls to control a device, it may be difficult (if not impossible) to guarantee that it will meet the real-time deadlines associated with the device.
Reference: [IBM, Inc. 1998] <institution> IBM, Inc. IBM Aglets Documentation web page. </institution> <note> Available at URL http://aglets.trl.ibm.co.jp/documentation.html, 1998. </note>
Reference-contexts: Next, the system must provide a mechanism to find the current location of an entity, given its name. This process is called name resolution. The names assigned to entities may be location-dependent, which allows easier implementation of name resolution. Systems like Agent Tcl [Gray 1996], Aglets <ref> [IBM, Inc. 1998] </ref> and Tacoma [Johansen et al. 1995b] use such names, based on hostnames and port numbers, and resolve them using the Domain Name System (DNS) [Mockapetris 1987]. In such systems, when an agent migrates, its name changes to reflect its new location. <p> Agent Tcl calls upon an external program (PGP [Zimmermann 1995]) to perform authentication checks when necessary, and for encrypting data in transit. However, CHAPTER 2. DESIGN ISSUES IN MOBILE AGENT SYSTEMS 24 cryptographic primitives are not available to agent programmers. 2.4.4 Aglets Aglets <ref> [IBM, Inc. 1998] </ref> is a Java-based system developed by IBM. Agents | which are called aglets in this system | migrate between agent servers (called aglet contexts) located on different network hosts. A distinguishing feature of Aglets is its callback-based programming model.
Reference: [JavaSoft 1997] <author> JavaSoft. </author> <title> Java Cryptography Architecture, API Specification and Reference. </title> <note> Available at URL http://www.javasoft.com/products/jdk/1.1/docs/guide/security/CryptoSpec.html, December 1997. </note>
Reference-contexts: Java's abstract windowing toolkit can be useful for developing portable graphical user interfaces for agent applications. Further, the Java environment has a security-aware design [Fritzinger and Mueller 1996, McGraw and Felten 1996], which is elaborated on in Section 3.3. Java also includes a basic security infrastructure <ref> [JavaSoft 1997] </ref> that can assist in providing security for agents. This includes implementations of a few cryptographic algorithms that serve as building blocks for constructing the protocols we need. <p> A variant, one-way hash functions can map arbitrary-sized pre-images to fixed-size images. These are useful in protecting agents from tampering, since any tampering renders the hashed value incorrect. Java's security libraries include the implementations of a limited set of these cryptographic primitives <ref> [JavaSoft 1997] </ref>. For example, one-way hashing using the Secure Hash Algorithm (SHA) is supported, as is public-key based digital signing using the Digital Signature Algorithm (DSA).
Reference: [JavaSoft 1998] <author> JavaSoft. </author> <title> Java RMI Specification. </title> <note> Available at URL http://www.javasoft.com/products/jdk/1.1/docs/guide/rmi/spec/rmiTOC.doc.html, 1998. </note>
Reference-contexts: The parameter types are required because Java allows method overloading, i.e., having two or more methods with the same name in the same class, as long as their parameter types differ. Objects running on remote machines can be accessed using Java's remote method invocation (RMI) facility <ref> [JavaSoft 1998] </ref>. An agent's creator can, for example, call a method of the agent object even if the agent has migrated to a remote host. Communication between agents, and between agent server processes can be implemented using RMI too. <p> The identities being authenticated here are the URNs of the entities, such as agents, their owners, agent servers, name resolvers, etc. The protocol is sufficiently generic as to allow any client-server interaction to use it for mutual authentication. We first describe the protocol and its implementation for RMI <ref> [JavaSoft 1998] </ref> servers, i.e. servers that present a remote method invocation interface to clients. 5.2.1 Authentication of RMI interactions In order to protect its security-sensitive interface methods, a server can require that each such method invocation include a ticket identifying the caller.
Reference: [Johansen et al. 1995a] <author> Dag Johansen, Robbert van Renesse, and Fred B. Schneider. </author> <title> Operating System Support for Mobile Agents. </title> <booktitle> In Proceedings of the 5th IEEE Workshop on Hot Topics in Operating Systems (HotOS-V), </booktitle> <pages> pages 42-45, </pages> <month> May </month> <year> 1995. </year> <note> BIBLIOGRAPHY 121 </note>
Reference-contexts: Although it was commercially unsuccessful and is no longer available, it retains its historical importance since it was a pioneer in the field. Telescript was followed by several research systems such as Tacoma <ref> [Johansen et al. 1995a] </ref> and Agent Tcl [Gray 1996], in which agents are written using script languages. The emergence of the Java language and programming environment [Gosling et al. 1996, Lindholm and Yellin 1996] with its support for mobile code, led to heightened research activity in this area. <p> Agents can store application-specific data in cabinets, which can then be accessed by other agents. No security mechanisms are implemented. For fault tolerance, Tacoma uses checkpointing and provides rear-guard agents for tracking mobile agents as they migrate <ref> [Johansen et al. 1995a] </ref>. 2.4.3 Agent Tcl Agent Tcl [Gray 1996, Kotz et al. 1997], developed at Dartmouth College, allows Tcl scripts to migrate between servers that support agent execution, communication, status queries and non-volatile storage.
Reference: [Johansen et al. 1995b] <author> Dag Johansen, Robbert van Renesse, and Fred B. Schneider. </author> <title> An Introduction to the TACOMA Distributed System. </title> <type> Technical Report 95-23, </type> <institution> Department of Computer Science, University of Tromst, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: This process is called name resolution. The names assigned to entities may be location-dependent, which allows easier implementation of name resolution. Systems like Agent Tcl [Gray 1996], Aglets [IBM, Inc. 1998] and Tacoma <ref> [Johansen et al. 1995b] </ref> use such names, based on hostnames and port numbers, and resolve them using the Domain Name System (DNS) [Mockapetris 1987]. In such systems, when an agent migrates, its name changes to reflect its new location. This makes the application's task of tracking its agents more cumbersome. <p> General Magic has now shelved the Telescript project and embarked on a similar, Java-based system called Odyssey [General Magic, Inc. 1997] that uses the same design framework. In common with most other Java-based systems however, it lacks thread-level execution state capture. 2.4.2 Tacoma Tacoma <ref> [Johansen et al. 1995b] </ref> is a joint project of the University of Tromst (Norway), and Cornell University. Agents are written in Tcl, although they can technically carry scripts written in other languages too. An agent's state must be explicitly stored in folders, which CHAPTER 2.
Reference: [Jul et al. 1988] <author> Eric Jul, Henry Levy, Norman Hutchinson, and Andrew Black. </author> <title> Fine-Grained Mobility in the Emerald System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 109-133, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: A more generic concept is a mobile object, which encapsulates data along with the set of CHAPTER 1. INTRODUCTION 3 operations on that data, and which can be transported from one network node to another. Emerald <ref> [Jul et al. 1988] </ref> was an early example of a system that provided object mobility, but it was limited to homogeneous local area networks. The mobile agent paradigm has evolved from these antecedents. Figure 1.1 illustrates how it differs from RPC and REV.
Reference: [Karjoth et al. 1997] <author> Gunter Karjoth, Danny Lange, and Mitsuru Oshima. </author> <title> A Security Model for Aglets. </title> <booktitle> IEEE Internet Computing, </booktitle> <pages> pages 68-77, </pages> <month> July-August </month> <year> 1997. </year>
Reference-contexts: It especially spurred the development of object-oriented agent systems, which represent the amalgamation of mobile object systems with mobile agent concepts. Aglets <ref> [Karjoth et al. 1997] </ref>, Voyager [ObjectSpace, Inc. 1997] and Concordia [Mitsubishi Electric 1997] are examples of Java-based mobile agent systems. We have developed a Java-based mobile agent system called Ajanta [Karnik and Tripathi 1998a] that incorporates the results of this dissertation. <p> The system provides a retract primitive that recalls an aglet to the caller's server. There is however no access control on this primitive, and it is possible for one user to retract another user's agent! Aglets currently have limited security support; a more comprehensive authorization framework has been described <ref> [Karjoth et al. 1997] </ref>, but has not yet been made available. 2.4.5 Voyager This is a Java-based agent system developed by ObjectSpace [ObjectSpace, Inc. 1997]. A novel feature of Voyager is a utility called vcc which takes any Java class and creates a remotely-accessible equivalent, called a virtual class.
Reference: [Karnik and Tripathi 1998a] <author> Neeran Karnik and Anand Tripathi. </author> <title> Agent Server Architecture for the Ajanta Mobile-Agent System. </title> <booktitle> In Proceedings of the 1998 International Conference on Parallel and Distributed Processing Techniques and Applications (PDPTA'98), </booktitle> <pages> pages 66-73, </pages> <month> July </month> <year> 1998. </year>
Reference-contexts: Aglets [Karjoth et al. 1997], Voyager [ObjectSpace, Inc. 1997] and Concordia [Mitsubishi Electric 1997] are examples of Java-based mobile agent systems. We have developed a Java-based mobile agent system called Ajanta <ref> [Karnik and Tripathi 1998a] </ref> that incorporates the results of this dissertation. Systems have also been developed around other object-oriented languages and environments such as Obliq [Cardelli 1995]. <p> The other alternative is to use global, location-independent names that do not change when the entity is relocated. This requires the provision of a name service, which maps a symbolic name to the current location of the named entity. In Ajanta <ref> [Karnik and Tripathi 1998a] </ref>, we use such global names uniformly for referring to all types of entities. 2.2.3 Security The introduction of mobile code in a network raises several security issues. <p> Authorization and access control: Servers must be provided with a mechanism for pro tecting their resources, by specifying their access control policies and enforcing them. 2.6 Research contributions This dissertation addresses the research challenges identified in the previous section. We developed the Ajanta system <ref> [Tripathi et al. 1998, Karnik and Tripathi 1998a] </ref>, a Java-based mobile agent infrastructure, and integrated several security mechanisms into its design. CHAPTER 2. DESIGN ISSUES IN MOBILE AGENT SYSTEMS 31 Most existing mobile agent systems were designed without having security as a basic requirement.
Reference: [Karnik and Tripathi 1998b] <author> Neeran M. Karnik and Anand R. Tripathi. </author> <title> Design Issues in Mobile Agent Programming Systems. </title> <journal> IEEE Concurrency, </journal> <volume> 6(6) </volume> <pages> 52-61, </pages> <month> July-September </month> <year> 1998. </year>
Reference-contexts: DESIGN ISSUES IN MOBILE AGENT SYSTEMS 22 2.4 A survey of mobile agent systems Several academic and industrial research groups are currently investigating and building mobile agent systems. We now present an overview of a representative subset of these, listed approximately in chronological order of development <ref> [Karnik and Tripathi 1998b] </ref>. 2.4.1 Telescript Telescript [White 1995], developed by General Magic, includes an object-oriented, type-safe language for agent programming. Telescript servers (which are called places) offer services, usually by installing stationary agents to interact with visiting agents.
Reference: [Kotz et al. 1997] <author> David Kotz, Robert Gray, Saurab Nog, and Daniela Rus. </author> <title> Agent Tcl: </title> <booktitle> Targeting the Needs of Mobile Computers. IEEE Internet Computing, </booktitle> <pages> pages 58-67, </pages> <month> July-August </month> <year> 1997. </year>
Reference-contexts: Agents can store application-specific data in cabinets, which can then be accessed by other agents. No security mechanisms are implemented. For fault tolerance, Tacoma uses checkpointing and provides rear-guard agents for tracking mobile agents as they migrate [Johansen et al. 1995a]. 2.4.3 Agent Tcl Agent Tcl <ref> [Gray 1996, Kotz et al. 1997] </ref>, developed at Dartmouth College, allows Tcl scripts to migrate between servers that support agent execution, communication, status queries and non-volatile storage. A modified Tcl interpreter is used to execute the scripts, and it allows the capture of execution state at the thread level.
Reference: [Levy and Ousterhout 1995] <author> Jacob Y. Levy and John K. Ousterhout. </author> <title> A Safe Tcl Toolkit for Electronic Meeting Places. </title> <booktitle> In Proceedings of the First USENIX Workshop on Electronic Commerce, </booktitle> <pages> pages 133-135, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Agents have location-dependent identifiers based on DNS hostnames, which therefore change upon migration. Inter-agent communication is accomplished either by exchanging messages or setting up a stream connection. Event signalling primitives are available, but events are currently identical to messages. Agent Tcl uses the Safe Tcl execution environment <ref> [Levy and Ousterhout 1995] </ref> to provide restricted resource access. It ensures that agents cannot execute dangerous operations without the appropriate security mediation. The system maintains access control lists at a coarse granularity | all agents arriving from a particular machine are subjected to the same access rules. <p> The capability contains the agent's access restrictions, if any. Whenever the agent needs to access the resource object, it must first present the capability to prove that it has the requisite authorization. Another approach, exemplified by Safe Tcl <ref> [Levy and Ousterhout 1995] </ref>, is to use two execution environments | a safe one which hosts the agent, and a more powerful trusted one which provides access to resources.
Reference: [Lindholm and Yellin 1996] <author> Tim Lindholm and Frank Yellin. </author> <title> The Java Virtual Machine Specification. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: Telescript was followed by several research systems such as Tacoma [Johansen et al. 1995a] and Agent Tcl [Gray 1996], in which agents are written using script languages. The emergence of the Java language and programming environment <ref> [Gosling et al. 1996, Lindholm and Yellin 1996] </ref> with its support for mobile code, led to heightened research activity in this area. It especially spurred the development of object-oriented agent systems, which represent the amalgamation of mobile object systems with mobile agent concepts. <p> An object-oriented, type-safe language is also more resistant to security threats than more permissive languages like C. 34 CHAPTER 3. BACKGROUND AND FOUNDATIONS 35 The Java language [Gosling et al. 1996] is uniquely suited for our purposes. It is object-oriented, interpreted and portable | Java virtual machines <ref> [Lindholm and Yellin 1996] </ref> are available on a wide range of hardware platforms. It provides good support for distributed programming in the form of remote invocation of methods, and object serialization (using a machine-independent representation of objects that can be transmitted across a network).
Reference: [McGraw and Felten 1996] <author> Gary McGraw and Edward Felten. </author> <title> Java Security. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1996. </year>
Reference-contexts: Java's abstract windowing toolkit can be useful for developing portable graphical user interfaces for agent applications. Further, the Java environment has a security-aware design <ref> [Fritzinger and Mueller 1996, McGraw and Felten 1996] </ref>, which is elaborated on in Section 3.3. Java also includes a basic security infrastructure [JavaSoft 1997] that can assist in providing security for agents. <p> BACKGROUND AND FOUNDATIONS 37 is usually based on considerations such as performance tradeoffs and the trustworthiness of the server. 3.3 Java security Java is currently widely used for programming applets, which are mini-applications downloaded from web servers to client machines for execution. The Java environment has a security-aware design <ref> [Fritzinger and Mueller 1996, McGraw and Felten 1996] </ref>. Its security model has three major components: 1. A byte-code verifier tests programs to ensure that they do not violate type-safety or cause run-time errors that result in security vulnerabilities (e.g. stack overflows). 2. <p> The Java security model however is designed specifically for applets. Applets resemble mobile agents in that they are transported to remote hosts before execution. However, applets are neither autonomous nor mobile, and therefore far less general than mobile agents. The security problems raised by applets <ref> [McGraw and Felten 1996] </ref> also apply to mobile agents; however, there are other problems that only arise in the context of mobile CHAPTER 3. BACKGROUND AND FOUNDATIONS 38 agents.
Reference: [Mitsubishi Electric 1997] <author> Mitsubishi Electric. </author> <title> Concordia: An Infrastructure for Collaborating Mobile Agents. </title> <booktitle> In Proceedings of the 1st International Workshop on Mobile Agents (MA '97), </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: It especially spurred the development of object-oriented agent systems, which represent the amalgamation of mobile object systems with mobile agent concepts. Aglets [Karjoth et al. 1997], Voyager [ObjectSpace, Inc. 1997] and Concordia <ref> [Mitsubishi Electric 1997] </ref> are examples of Java-based mobile agent systems. We have developed a Java-based mobile agent system called Ajanta [Karnik and Tripathi 1998a] that incorporates the results of this dissertation. Systems have also been developed around other object-oriented languages and environments such as Obliq [Cardelli 1995]. <p> Collective communication primitives can be useful in applications that use groups of agents for collaborative tasks. Such primitives can be used to communicate with or within an agent group. Other group coordination mechanisms such as barriers can be built upon these primitives. Concordia <ref> [Mitsubishi Electric 1997] </ref> supports group communication that is limited to event delivery. Voyager uses a hierarchical object grouping mechanism for the delivery of invocation messages to groups. Most other systems however do not support agent grouping. Communication can also be implemented using shared data.
Reference: [Moats 1997] <author> R. Moats. </author> <title> RFC 2141: URN Syntax. </title> <note> Available at URL http://www.cis.ohio-state.edu/htbin/rfc/rfc2141.html, May 1997. </note>
Reference-contexts: Impersonation of the agent by way of misusing its credentials can also be prevented, under certain assumptions. These mechanisms are detailed in Chapter 8. Ajanta also includes a location-independent naming scheme based on Uniform Resource Names (URNs) <ref> [Moats 1997, Sollins and Masinter 1994] </ref>, and the associated name service which resolves URNs. A public-key repository is also integrated into the name service. <p> Each agent also carries a set of credentials as part of its state. The credentials help identify the agent for access control purposes. The agent has a global name, assigned in the CHAPTER 4. SYSTEM ARCHITECTURE 46 URN format <ref> [Moats 1997] </ref>. Apart from this name, the credentials also contain the identities (URNs) of the agent's owner, creator, and guardian. The owner is the human user whom the agent represents. Access control policies are usually specified in terms of the owner's authority and privileges. <p> A URN is a persistent, CHAPTER 4. SYSTEM ARCHITECTURE 47 location-independent identifier which can be used for accessing an entity or for querying its characteristics. The URN syntax is defined in <ref> [Moats 1997] </ref>. Each URN consists of a namespace identifier (NID) followed by a namespace specific string (NSS). We define an NID called ans, i.e., the Ajanta namespace. All Ajanta entities are assigned URNs within this namespace. Therefore, all these URNs have the form urn:ans:&lt;NSS&gt;.
Reference: [Mockapetris 1987] <author> P. Mockapetris. </author> <title> RFC 1034: Domain Names Concepts and Facilities. </title> <note> Available at URL http://www.cis.ohio-state.edu/htbin/rfc/rfc1034.html, November 1987. </note>
Reference-contexts: The names assigned to entities may be location-dependent, which allows easier implementation of name resolution. Systems like Agent Tcl [Gray 1996], Aglets [IBM, Inc. 1998] and Tacoma [Johansen et al. 1995b] use such names, based on hostnames and port numbers, and resolve them using the Domain Name System (DNS) <ref> [Mockapetris 1987] </ref>. In such systems, when an agent migrates, its name changes to reflect its new location. This makes the application's task of tracking its agents more cumbersome. Therefore, it is desirable to provide location-transparent names at the application level. This can be done in two ways.
Reference: [Moore 1988] <author> J.H. Moore. </author> <title> Protocol Failures in Cryptosystems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 76, </volume> <year> 1988. </year> <note> BIBLIOGRAPHY 122 </note>
Reference-contexts: These cryptographic mechanisms can be used (often in combination) for designing the secure protocols necessary in a mobile agent system. While the underlying mathematics is usually sound, there are several ways in which these proto cols may leave loopholes that can be exploited to render the system insecure <ref> [Moore 1988] </ref>. Thus, care must be taken in the design of such protocols [Abadi and Needham 1996]. 3 This is a somewhat vague term which basically means that while it is not impossible, it would take an inordinately long time to compute hundreds of years, for example.
Reference: [Neuman 1993] <author> B.C. Neuman. </author> <title> Proxy-based authorization and accounting for distributed systems. </title> <booktitle> In Proceedings of the Thirteenth International Conference on Distributed Computing Systems, </booktitle> <pages> pages 283-291, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Once a safe proxy is made available to an agent, access control checks only require a minimal amount of computation since the security policy need not be consulted. Further, proxies can perform accounting functions as well <ref> [Neuman 1993] </ref>. Capability mechanisms are attractive for similar reasons as proxies | security policy checks are performed only once at the time of issuing a capability. Resource access only involves checking the submitted capability for tampering. <p> The following features can be added by a resource provider by suitably implementing the getProxy method, and extending the proxy class. One can embed usage-metering and accounting mechanisms in a proxy <ref> [Neuman 1993] </ref>. This can be done either by counting the invocations of each method, possibly assigning different costs to different methods, or by metering the elapsed time for method execution and then calculating the charges based on it.
Reference: [ObjectSpace, Inc. 1997] <author> ObjectSpace, Inc. </author> <title> ObjectSpace Voyager Core Package Technical Overview. </title> <type> Technical report, ObjectSpace, </type> <institution> Inc., </institution> <month> July </month> <year> 1997. </year> <note> Available at URL http://www.objectspace.com/voyager/VoyagerTechOverview.pdf. </note>
Reference-contexts: It especially spurred the development of object-oriented agent systems, which represent the amalgamation of mobile object systems with mobile agent concepts. Aglets [Karjoth et al. 1997], Voyager <ref> [ObjectSpace, Inc. 1997] </ref> and Concordia [Mitsubishi Electric 1997] are examples of Java-based mobile agent systems. We have developed a Java-based mobile agent system called Ajanta [Karnik and Tripathi 1998a] that incorporates the results of this dissertation. <p> This can be done in two ways. The first is to provide local proxies for remote entities, which encapsulate their current location. The system updates the location information in the proxy when the entity moves, thus providing location-transparency at the application level. For example, Voyager <ref> [ObjectSpace, Inc. 1997] </ref> uses this approach for agent names, although its agent servers are identified using location-dependent DNS names. The other alternative is to use global, location-independent names that do not change when the entity is relocated. <p> this primitive, and it is possible for one user to retract another user's agent! Aglets currently have limited security support; a more comprehensive authorization framework has been described [Karjoth et al. 1997], but has not yet been made available. 2.4.5 Voyager This is a Java-based agent system developed by ObjectSpace <ref> [ObjectSpace, Inc. 1997] </ref>. A novel feature of Voyager is a utility called vcc which takes any Java class and creates a remotely-accessible equivalent, called a virtual class.
Reference: [Pfitzmann 1996] <author> Birgit Pfitzmann. </author> <title> Digital Signature Schemes. Springer-Verlag, </title> <booktitle> Lecture Notes in Computer Science #1100, </booktitle> <year> 1996. </year>
Reference-contexts: CHAPTER 3. BACKGROUND AND FOUNDATIONS 40 Public-key systems also serve another important function. We can reverse the cryp-tosystem to obtain a digital signature <ref> [Rivest et al. 1978, Pfitzmann 1996] </ref> facility. Alice can encrypt her agent with her own private key, K A . When Bob receives the agent, he can decrypt it using Alice's public key, K + A .
Reference: [Rivest et al. 1978] <author> R. L. Rivest, A. Shamir, and L. Adleman. </author> <title> A Method for Obtaining Digital Signatures and Public-Key Cryptosystems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2) </volume> <pages> 120-126, </pages> <month> February </month> <year> 1978. </year>
Reference-contexts: CHAPTER 3. BACKGROUND AND FOUNDATIONS 40 Public-key systems also serve another important function. We can reverse the cryp-tosystem to obtain a digital signature <ref> [Rivest et al. 1978, Pfitzmann 1996] </ref> facility. Alice can encrypt her agent with her own private key, K A . When Bob receives the agent, he can decrypt it using Alice's public key, K + A .
Reference: [Sander and Tschudin 1997] <author> Tomas Sander and Christian F. Tschudin. </author> <title> Towards Mobile Cryptography. </title> <type> Technical Report TR-97-049, </type> <institution> International Computer Science Institute, Berkeley, California, </institution> <month> November </month> <year> 1997. </year>
Reference: [Sander and Tschudin 1998] <author> Tomas Sander and Christian F. Tschudin. </author> <title> Mobile Agents and Security, chapter titled "Protecting Mobile Agents Against Malicious Hosts". Springer-Verlag, </title> <booktitle> Lecture Notes in Computer Science #1419, </booktitle> <month> June </month> <year> 1998. </year>
Reference: [Schneier 1996] <author> Bruce Schneier. </author> <title> Applied Cryptography. </title> <publisher> John Wiley, </publisher> <address> 2nd edition, </address> <year> 1996. </year>
Reference-contexts: Class loaders and the security manager are the two basic mechanisms we use for creating protection domains for mobile agents, and for providing agents with protected access to host resources. 3.4 Cryptographic mechanisms Rapid advancements in cryptography <ref> [Schneier 1996, Ford 1994, Stinson 1995] </ref> in recent years have provided us with the foundation for addressing the security needs of our system. For example, cryptographic algorithms can be used for encryption of messages before they traverse an insecure communication link. In symmetric cryptosystems (also called CHAPTER 3.
Reference: [Shapiro 1986] <author> Marc Shapiro. </author> <title> Structure and Encapsulation in Distributed Systems: The Proxy Principle. </title> <booktitle> In Proceedings of the 6th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 198-204. </pages> <publisher> IEEE, </publisher> <year> 1986. </year>
Reference-contexts: CHAPTER 7. CONTROLLED ACCESS TO SERVER RESOURCES 71 Another approach for establishing controlled access is to use proxy <ref> [Shapiro 1986] </ref> objects. When an agent first makes a request to access a resource, the server consults the security policy and constructs a resource proxy, which is an object with a safe interface to the resource. If the agent is not trusted, certain operations on the resource may be disabled. <p> After evaluating these options, we chose the proxy approach, which we shall describe next. 7.2 Design of a proxy-based approach In Ajanta, agents are not provided with direct references to resources | we interpose a proxy <ref> [Shapiro 1986] </ref> between a resource and its clients (i.e., agents). When an agent makes a request to access a resource, the server returns a proxy object in its stead, which contains a private reference to the actual resource.
Reference: [Sollins and Masinter 1994] <author> Karen Sollins and Larry Masinter. </author> <title> RFC 1737: Functional Requirements for Uniform Resource Names. </title> <note> Available at URL http://www.cis.ohio-state.edu/htbin/rfc/rfc1737.html, December 1994. </note>
Reference-contexts: Impersonation of the agent by way of misusing its credentials can also be prevented, under certain assumptions. These mechanisms are detailed in Chapter 8. Ajanta also includes a location-independent naming scheme based on Uniform Resource Names (URNs) <ref> [Moats 1997, Sollins and Masinter 1994] </ref>, and the associated name service which resolves URNs. A public-key repository is also integrated into the name service. <p> It merely supports a migration primitive, which can be invoked either directly by the agent in its code, or indirectly via the itinerary. 4.4 Global naming and name resolution To comply with our requirement of location-independent names, we adopted the Uniform Resource Naming (URN) <ref> [Sollins and Masinter 1994] </ref> scheme. A URN is a persistent, CHAPTER 4. SYSTEM ARCHITECTURE 47 location-independent identifier which can be used for accessing an entity or for querying its characteristics. The URN syntax is defined in [Moats 1997].
Reference: [Stamos and Gifford 1990] <author> James W. Stamos and David K. Gifford. </author> <title> Remote Evaluation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 537-565, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: This communications model is usually synchronous, i.e., the client suspends itself after sending a request to the server, waiting for the results of the call. An alternative architecture called Remote Evaluation (REV) was proposed by Stamos and Gifford <ref> [Stamos and Gifford 1990] </ref>. In REV the client, instead of invoking a remote procedure, sends its own procedure code to a server, and requests the server to execute it and return the results.
Reference: [Stinson 1995] <author> Douglas R. Stinson. </author> <title> Cryptography Theory and Practice. </title> <publisher> CRC Press, </publisher> <year> 1995. </year>
Reference-contexts: Class loaders and the security manager are the two basic mechanisms we use for creating protection domains for mobile agents, and for providing agents with protected access to host resources. 3.4 Cryptographic mechanisms Rapid advancements in cryptography <ref> [Schneier 1996, Ford 1994, Stinson 1995] </ref> in recent years have provided us with the foundation for addressing the security needs of our system. For example, cryptographic algorithms can be used for encryption of messages before they traverse an insecure communication link. In symmetric cryptosystems (also called CHAPTER 3.
Reference: [Tanenbaum et al. 1986] <author> Andrew S. Tanenbaum, Sape J. Mullender, and Robbert van Re-nesse. </author> <title> Using Sparse Capabilities in a Distributed Operating System. </title> <booktitle> In Proceedings of the 6th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 558-563, </pages> <year> 1986. </year>
Reference-contexts: Another alternative is to use traditional capabilities, which have been used in several distributed systems in the past (e.g. Amoeba <ref> [Tanenbaum et al. 1986] </ref>). If an agent needs to access a resource object, it must first obtain a capability from the server that controls the resource. The server authenticates the agent identity and after consulting its security policy, hands out a cryptographically secured, unforgeable capability to the agent.
Reference: [Tardo and Valente 1996] <author> Joseph Tardo and Luis Valente. </author> <title> Mobile Agent Security and Tele-script. </title> <booktitle> In Proceedings of IEEE COMPCON Spring '96, </booktitle> <pages> pages 58-63, </pages> <year> 1996. </year>
Reference-contexts: Relative migration is also possible using the meet primitive. Co-located agents can invoke each other's methods for communication. An event-signalling facility is also available. Telescript has significant support for security <ref> [Tardo and Valente 1996] </ref>, including an access control mechanism similar to capabilities. Each agent and place has an associated authority, which is the principal responsible for it. A place can query an incoming agent's authority, and potentially deny entry to the agent or restrict its access rights.
Reference: [Tay and Ananda 1990] <author> B.H. Tay and A.L. Ananda. </author> <title> A Survey of Remote Procedure Calls. </title> <journal> Operating Systems Review, </journal> <volume> 24(3) </volume> <pages> 68-79, </pages> <month> July </month> <year> 1990. </year> <note> BIBLIOGRAPHY 123 </note>
Reference-contexts: the agents may either terminate or return to their "home site" in order to report their results to the user. 1.2 Historical perspective Traditionally, applications in distributed systems have been structured using the client-server paradigm, in which client and server processes communicate either through message-passing or remote procedure calls (RPC) <ref> [Tay and Ananda 1990] </ref>. This communications model is usually synchronous, i.e., the client suspends itself after sending a request to the server, waiting for the results of the call. An alternative architecture called Remote Evaluation (REV) was proposed by Stamos and Gifford [Stamos and Gifford 1990].
Reference: [Thorn 1997] <author> Tommy Thorn. </author> <title> Programming Languages for Mobile Code. </title> <journal> ACM Computing Surveys, </journal> <volume> 29(3) </volume> <pages> 213-239, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: Therefore, most agent systems are based on interpreted programming languages <ref> [Thorn 1997] </ref>, which provide portable virtual machines for executing agent code. Another important criterion in selecting an agent language is safety. Languages that support type checking, encapsulation, and restricted memory access are particularly suitable for implementing protected server environments CHAPTER 2. <p> However, script programs often suffer from poor modularization, encapsulation, and performance. It is also difficult to create and maintain large applications using script languages. Some agent systems therefore use object-oriented languages such as Java, Tele-script or Obliq <ref> [Thorn 1997] </ref>. Agents are defined as objects which encapsulate their state as well as code, and the system provides support for object migration in the network. Such systems offer the natural advantages of object-orientation in building agent-based applications. Complex agent programs are easier to write and maintain using object-oriented languages.
Reference: [Tripathi and Karnik 1998] <author> Anand R. Tripathi and Neeran M. Karnik. </author> <title> Protected Resource Access for Mobile Agent-based Distributed Computing. </title> <editor> In Chita R. Das, editor, </editor> <booktitle> Proceedings of the 1998 ICPP Workshop on Wireless Networks and Mobile Computing, </booktitle> <pages> pages 144-153. </pages> <publisher> IEEE Computer Society, </publisher> <month> August </month> <year> 1998. </year>
Reference-contexts: In the next chapter, we will discuss mechanisms for establishing a secure binding between an agent and application-level resources. Chapter 7 Controlled Access to Server Resources This chapter focuses on the problem of protecting an agent server's resources against attack by malicious agents <ref> [Tripathi and Karnik 1998] </ref>. By allowing the execution of agents originating from unknown and untrusted sources, the host node's resources are exposed to the risk of various types of attacks.
Reference: [Tripathi et al. 1992] <author> Anand Tripathi, Khaled Day, Surya Koneru, and Murthy Yenaman-dra. </author> <title> Design and Evaluation of a Fault-Tolerant Protocol for Managing Replicated Data with Weak Consistency. </title> <type> Technical Report TR92-06, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: Each creation domain has a name registry, a server process that is responsible for maintaining the resolution data for all URNs created in that domain. The name registries in different domains communicate with each other in order to implement replication <ref> [Tripathi et al. 1992] </ref> and/or caching of the URN entries, thus providing the illusion of a single, global name service to applications.
Reference: [Tripathi et al. 1998] <author> Anand R. Tripathi, Neeran M. Karnik, Manish K. Vora, and Tanvir Ahmed. </author> <title> Ajanta | A System for Mobile Agent Programming. </title> <type> Technical Report TR98-016, </type> <institution> Department of Computer Science, University of Minnesota, Minneapolis, Minnesota, </institution> <month> April </month> <year> 1998. </year>
Reference-contexts: The agent can specify either an absolute destination, i.e., the name of the server it needs to migrate to, or a relative destination, i.e., the name of another agent or resource it needs to co-locate with. Most systems provide absolute migration primitives. Systems like Telescript, Tacoma and Ajanta <ref> [Tripathi et al. 1998] </ref> support relative migration as well. Some systems build upon their migration primitives to provide higher-level abstractions, such as an itinerary, which contains a list of servers to visit, and the corresponding code to execute at those locations. <p> Authorization and access control: Servers must be provided with a mechanism for pro tecting their resources, by specifying their access control policies and enforcing them. 2.6 Research contributions This dissertation addresses the research challenges identified in the previous section. We developed the Ajanta system <ref> [Tripathi et al. 1998, Karnik and Tripathi 1998a] </ref>, a Java-based mobile agent infrastructure, and integrated several security mechanisms into its design. CHAPTER 2. DESIGN ISSUES IN MOBILE AGENT SYSTEMS 31 Most existing mobile agent systems were designed without having security as a basic requirement.
Reference: [Vittal 1981] <author> John Vittal. </author> <title> Active Message Processing: Messages as Messengers. In R.P. Uhlig, editor, </title> <booktitle> Computer Message System, </booktitle> <pages> pages 175-195. </pages> <publisher> North-Holland, </publisher> <year> 1981. </year>
Reference-contexts: In REV the client, instead of invoking a remote procedure, sends its own procedure code to a server, and requests the server to execute it and return the results. Earlier systems like R2D2 <ref> [Vittal 1981] </ref> and Chorus [Banino 1986] introduced the concept of active messages that could migrate from node to node, carrying program code to be executed at these nodes. A more generic concept is a mobile object, which encapsulates data along with the set of CHAPTER 1.
Reference: [Vora 1998] <author> Manish K. Vora. </author> <title> Mobile Agent Programming Techniques in Ajanta. </title> <type> Master's thesis, </type> <institution> University of Minnesota, Minneapolis, </institution> <month> June </month> <year> 1998. </year>
Reference-contexts: We describe the application programming interfaces for creating mobile agent-based applications, as well as for programming the agents themselves. The travel path of an agent can often be concisely expressed using the itinerary construct. We describe a set of templates that Ajanta provides <ref> [Vora 1998] </ref>, which allow the programmer to compose a complex agent itinerary using simpler units. <p> A convenient means of specifying the itineraries of such agents can help make the programmer's task easier. We therefore created a set of patterns, or templates using which an agent's itinerary can be composed <ref> [Vora 1998] </ref>. The ItinAgent class: Ajanta provides this subclass of the base class Agent, which defines an agent carrying an object itin of type Itinerary.
Reference: [White 1995] <author> James E. White. </author> <title> Mobile Agents. </title> <type> Technical report, </type> <institution> General Magic, Inc., </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: Unlike a procedure call, it does not have to return its results to the client. It could migrate to other servers, transmit information back to its origin, or migrate back to the client if appropriate. It thus has more autonomy than a simple procedure call. Telescript <ref> [White 1995] </ref>, which was developed by General Magic in the early 1990s, was the first system expressly designed for programming mobile agents. Although it was commercially unsuccessful and is no longer available, it retains its historical importance since it was a pioneer in the field. <p> We now present an overview of a representative subset of these, listed approximately in chronological order of development [Karnik and Tripathi 1998b]. 2.4.1 Telescript Telescript <ref> [White 1995] </ref>, developed by General Magic, includes an object-oriented, type-safe language for agent programming. Telescript servers (which are called places) offer services, usually by installing stationary agents to interact with visiting agents. Agents use the go primitive for absolute migration to places, specified using DNS-based hostnames.
Reference: [Zimmermann 1995] <author> Philip R. Zimmermann. </author> <title> The Official PGP User's Guide. </title> <publisher> The MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: It ensures that agents cannot execute dangerous operations without the appropriate security mediation. The system maintains access control lists at a coarse granularity | all agents arriving from a particular machine are subjected to the same access rules. Agent Tcl calls upon an external program (PGP <ref> [Zimmermann 1995] </ref>) to perform authentication checks when necessary, and for encrypting data in transit. However, CHAPTER 2. DESIGN ISSUES IN MOBILE AGENT SYSTEMS 24 cryptographic primitives are not available to agent programmers. 2.4.4 Aglets Aglets [IBM, Inc. 1998] is a Java-based system developed by IBM.
References-found: 58

