URL: http://www.cs.umd.edu/~nau/planning/modal-aij95.ps
Refering-URL: http://www.cs.umd.edu/~nau/publications.html
Root-URL: 
Title: On the Nature and Role of Modal Truth Criteria in Planning modal duality is a
Author: Subbarao Kambhampati a; and Dana S. Nau b 
Note: (i) Even though  i.e., ``necessarily p'' is not equivalent to ``not possibly :p.''  
Address: Tempe, AZ 85287-5406  College Park, Maryland 20742  
Affiliation: a Department of Computer Science and Engineering, Arizona State University  b Department of Computer Science, Institute for Systems Research, and Institute for Advanced Computer Studies. University of Maryland,  
Abstract: Chapman's paper, ``Planning for Conjunctive Goals,'' has been widely acknowledged for its contribution toward understanding the nature of partial-order planning, and it has been one of the bases of later work by others---but it is not free of problems. This paper addresses some problems involving modal truth and the Modal Truth Criterion (MTC). Our results are as follows: (iii) If we rewrite the MTC to talk about modal conditional truth (i.e., modal truth conditional on executability) rather than modal truth, then both the MTC for necessary conditional truth and the MTC for possible conditional truth are correct; and both can be computed in polynomial time. (iv) The MTC plays a different role in plan generation than it does in checking the correctness of plans, and this has led to several misconceptions about the MTC. Several researchers have mistakenly attempted to simplify the MTC by eliminating the white-knight declobbering clause from it; and others have used Chapman's results to conjecture that partial-order planning will not scale up to more expressive action representations. We point out that these ideas are misconceptions, and explain why. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Backstrom. </author> <title> Finding least-constrained plans and optimal parallel executions is harder than we thought. </title> <booktitle> In Proc. 2nd European Workshop on Planning, </booktitle> <year> 1993.n </year>
Reference-contexts: Unlike tweak, Nonlin did not deal with partially instantiated plans (however, O-PLAN [3], a successor of Nonlin, does deal with such plans). 23 Note that this involves removing existing orderings, without adding any new orderings. Backstrom <ref> [1] </ref> shows that if we also allow arbitrary addition and deletion of orderings, then the problem of finding the least constrained plan is NP-hard. 21 a 1 b 1 b 2 a 2 init p; q; r p; q t 1 , :p t 2 Fig. 4.
Reference: [2] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32:333--379, </volume> <year> 1987. </year>
Reference-contexts: 1 Introduction Chapman's paper, ``Planning for Conjunctive Goals,'' <ref> [2] </ref> has been widely acknowledged as an important step towards formalizing partial-order planning, 2 and it has been one of the bases of later work by others (for example, [7,10,8,11,16,30,33]). <p> Chapman also makes the following definitions <ref> [2, p. 338] </ref>: A plan has an initial situation, which is a set of [literals] describing the world at the time that the plan is to be executed, and a final situation, which describes the state of the world after the whole plan has been executed. <p> We defined truth and conditional truth only for complete plans, because for incomplete plans, what is true or conditionally true will vary depending on which completion we choose. In incomplete plans, we instead need to talk about modal truth, which Chapman defines as follows <ref> [2, p. 336] </ref>: I will say ``necessarily p'' if p is true of all completions of an incomplete plan, and ``possibly p'' if p is true of some completion. <p> Above, Chapman apparently means p to be nearly any statement about a plan: examples in his paper include not only statements about specific literals and situations in the plan, but also statements about the entire plan (e.g., the statement <ref> [2, p. 341] </ref> that a plan ``necessarily solves the problem''). However, unless we place some restrictions on the nature of p, this has some dubious results---for example, if P is an incomplete plan, then all completions of P are complete, and therefore P itself is necessarily complete. <p> This can be done in polynomial time using the same technique Chapman suggests for computing the MTC in <ref> [2] </ref>. In particular, computing the necessary conditional truth of a literal in a situation (which involves checking whether the MTC's establishment and declobbering clauses are consistent with the plan's ordering and codesignation/non-codesignation constraints) can be done in time polynomial (O (n 3 )) in the plan length. <p> In Section 3.2.2, we discuss some planning situations where this occurs. 11 3.2 Comparison with Other Work 3.2.1 The Modal Truth Criterion Chapman states the MTC as follows <ref> [2, p. 340] </ref>: Modal Truth Criterion. <p> look at Chapman's proof of necessity and sufficiency of his MTC reveals that his proof deals with necessary conditional truth rather than necessary truth. 18 In proving that any literal with an establisher and no clobberer must be necessarily true, Chapman's proof refers to white-knight steps for every potential clobberer, <ref> [2, p. 370] </ref>, without checking that the white knights are in fact executable. 19 For the ``necessary truth'' version of the MTC, this does not affect the validity of Chapman's proof, since executability occurs naturally as a consequence of applying necessary conditional truth recursively to prerequisites of all preceding steps. <p> This alternative interpretation is not as far-fetched as it might sound. To see this, note that Chapman defines the notion of truth of a literal in a situation as follows <ref> [2, p. 338] </ref>: A [literal] is true in a situation if it codesignates with a [literal] that is a member of the situation. A step asserts a [literal] in its output situation if the [literal] codesignates with a postcondition of the step. <p> Here, there is no explicit requirement that the step be executable. This suggests that the MTC does not require that P be modally executable, and thus suggests that Chapman was talking about modal conditional truth. This interpretation is also consistent with his ``nondeterministic achievement procedure'' <ref> [2, Fig. 7] </ref>, where to make a literal necessarily true in a situation, he only ensures establishment and declobbering without explicitly stating that the establisher needs to be executable. (As explained above, for the case of necessary truth, executability follows from making every prerequisite of every action necessarily conditionally true.) The <p> Conditional Steps. Chapman uses universally executable actions (he calls them conditional steps) in proving his intractability theorem for actions containing conditional effects. Specifically, Chapman defines a conditional step as follows <ref> [2, p. 371] </ref>: A conditional step is always applicable, but has two sets of postconditions, the if-true and the if-false postconditions. The if-true postconditions hold in the output situation if all the preconditions were satisfied in the input situation; otherwise the if-false postconditions hold. <p> In this case, as the following theorem shows, checking necessary truth will be co-NP-hard, even with unconditional steps. Theorem 4 If the language L contains only finitely many constant symbols, then necessary truth is co-NP-hard. Notice that this result is related to Chapman's observation <ref> [2, p. 356] </ref> that restricting the range of a variable to a finite set will defeat the MTC, and make constraint computations NP-complete. Coherent Plans. Nebel and Backstrom [24] have recently studied the computational complexity of plan validation and temporal projection. <p> For example, Chapman describes tweak, a planner based on his MTC, as follows <ref> [2] </ref>: ``[The planner] enters a loop in which some goal not yet achieved is chosen and the [goal achievement] procedure is applied'' (p. 344; emphasis ours) ``The goal achievement procedure is derived by interpreting the necessary truth criterion as a nondeterministic procedure. <p> a ``nondeletion'' condition similar to that we discussed in Section 2.2. 20 Although the necessity of the white-knight declobbering clause does depend on whether or not the plan is totally ordered, it does not depend on whether or not the plan is ground. (Chapman's use of a partially instantiated plan <ref> [2, Fig. 5, p. 339] </ref> to motivate white-knight declobbering seems to have caused this misimpression.) The following example, due to Mark Drummond [6], illustrates this point. <p> In fact, Chapman's own implementation of tweak <ref> [2, p. 361] </ref>, as well as many later partial order planners such as SNLP [21] do not use white-knight 22 Historical Note: Although the term ``white knight'' became popular after Chapman's work on tweak [2], Tate's Nonlin was the first planner to use a white-knight clause to specify weakest conditions for <p> In fact, Chapman's own implementation of tweak [2, p. 361], as well as many later partial order planners such as SNLP [21] do not use white-knight 22 Historical Note: Although the term ``white knight'' became popular after Chapman's work on tweak <ref> [2] </ref>, Tate's Nonlin was the first planner to use a white-knight clause to specify weakest conditions for establishment and declobbering. <p> Each step's name is in a box, with its preconditions and postconditions above and below the box. fin is the final situation, and init is the initial situation. declobbering clause in the goal-achievement procedure. However, as Chapman remarks <ref> [2, p. 359] </ref>, avoiding the white-knight declobbering clause during planning means that the planner may terminate with somewhat more constrained plans.
Reference: [3] <author> K. Currie and A. Tate. O-Plan: </author> <title> The Open Planning Architecture. </title> <journal> Artificial Intelligence, </journal> <volume> 51(1), </volume> <year> 1991. </year>
Reference-contexts: Unlike tweak, Nonlin did not deal with partially instantiated plans (however, O-PLAN <ref> [3] </ref>, a successor of Nonlin, does deal with such plans). 23 Note that this involves removing existing orderings, without adding any new orderings.
Reference: [4] <editor> E. Davis. </editor> <publisher> Representations of Commonsense Knowledge Morgan Kaufmann Publishers, Inc. </publisher> <address> San Mateo, California, USA, </address> <month> 94403. </month>
Reference-contexts: Thus possible truth and necessary truth are not duals. 2 9 Thus, unlike necessary conditional truth and possible conditional truth, necessary truth and possible truth do not obey the modal duality that is obeyed by all classical modal logics <ref> [4, p. 62] </ref>, and thus do not define a well-formed modal logic. It is easy to understand why this is so. The semantics of modal logics are based on Kripke structures (a.k.a. possible worlds).
Reference: [5] <author> T. Dean and M. Boddy. </author> <title> Reasoning about partially ordered events. </title> <journal> Artificial Intelligence, </journal> <volume> 36 </volume> <pages> 375-399, </pages> <year> 1988. </year>
Reference-contexts: Complexity relations among decision problems for plans containing actions that have executability preconditions, and plans containing universally executable actions. 15 Temporal Projection. A very similar idea is used in Dean and Boddy's work on temporal projection <ref> [5] </ref>. Specifically, they use actions that have ground preconditions and effects. <p> While our investigation was initially motivated by the apparent lack of modal duality in Chap-man's MTC, Nebel and Backstrom's work is motivated by the apparent asymmetry between the complexity of plan validation as studied by Chapman, and temporal projection as studied by Dean and Boddy <ref> [5] </ref>. Although Nebel and Backstrom's results are related to ours, there are several significant differences. <p> This is important because checking possible truth has several applications in plan projection <ref> [5] </ref> as well as plan generalization [15]. (iii) As stated by Chapman, the MTC is correct only as a criterion for necessary truth (not as a criterion for possible truth).
Reference: [6] <author> M. </author> <title> Drummond. </title> <type> Private Communication. </type> <year> 1991 </year> . 
Reference-contexts: on whether or not the plan is totally ordered, it does not depend on whether or not the plan is ground. (Chapman's use of a partially instantiated plan [2, Fig. 5, p. 339] to motivate white-knight declobbering seems to have caused this misimpression.) The following example, due to Mark Drummond <ref> [6] </ref>, illustrates this point.
Reference: [7] <author> K. Erol, D. Nau, and V. S. Subrahmanian. </author> <title> Complexity, decidability and undecidability results for domain-independent planning. </title> <journal> Artificial Intelligence, </journal> <note> 1994. To appear. </note>
Reference-contexts: In [17,18], we systematically classify the types of operations (called ``tractability refinements'') used by various planners to ensure tractable plan evaluation and analyze the tradeoffs offered by them. Finally, it is also wrong to believe that planning itself is more difficult if conditional operators are allowed. Erol et al. <ref> [7] </ref> have analyzed how the complexity of planning varies under a wide variety of conditions, including whether or not function symbols, negative preconditions, or delete lists (i.e., negative postconditions) are allowed, whether or not the predicates are propositional (i.e., 0-ary), and whether the planning operators are part of the input or
Reference: [8] <author> K. Erol, D. Nau, and V. S. Subrahmanian. </author> <title> When is planning decidable? In Proc. </title> <booktitle> First Internat. Conf. AI Planning Systems, </booktitle> <pages> pp. </pages> <address> 222--227, </address> <month> June </month> <year> 1992. </year>
Reference: [9] <author> M.R. Garey and D.S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness W.H. </title> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: Thus, necessary truth and possible truth have different levels of complexity. If modal duality held, then this would not be so, for each would be reducible to the other's complement via an equivalence of the form 3M (p; s) :2:M (p; s). Thus it would follow <ref> [9, p. 29] </ref> that either possible truth would be polynomial like necessary truth, or else necessary truth would be co-NP-hard.
Reference: [10] <author> M. L. Ginsberg. </author> <title> What is a modal truth criterion? Unpublished manuscript, </title> <month> November </month> <year> 1990. </year>
Reference: [11] <author> S. Hanks and D. S. Weld. </author> <title> Systematic adaptation for case-based planning. </title> <booktitle> In Proc. First Internat. Conf. AI Planning Systems, </booktitle> <pages> pp. </pages> <address> 96--105, </address> <month> June </month> <year> 1992. </year> <month> 26 </month>
Reference: [12] <author> E. Jacopin and C. Le Pape and J.F. Puget. </author> <title> A Theoretical Analysis of the ``uselessness'' of white-knights. Intitut Blaise Pascal, </title> <type> Technical Report 92/27. </type>
Reference-contexts: Thus using the white-knight declobbering clause does not ipso facto make planning inefficient, as has been conjectured by some researchers (c.f. <ref> [12] </ref>). An important issue is whether the planner implements white-knight declobbering only through steps that already exist in the plan, or whether it also allows new steps to be introduced as white-knights into the plan.
Reference: [13] <author> S. Kambhampati. </author> <title> On the utility of systematicity: Understanding tradeoffs between redundancy and commitment in partial ordering planning. </title> <booktitle> In Proc. 13th Intl. Joint Conf. on Artificial Intelligence, </booktitle> <month> August </month> <year> 1993. </year>
Reference: [14] <author> S. Kambhampati. </author> <title> Multi-Contributor causal structures for Planning: A Formalization and Evaluation. </title> <journal> Artificial Intelligence, </journal> <volume> Vol. 69, </volume> <year> 1994. </year> <pages> pp. 235-278. </pages>
Reference-contexts: An important issue is whether the planner implements white-knight declobbering only through steps that already exist in the plan, or whether it also allows new steps to be introduced as white-knights into the plan. In <ref> [14] </ref>, we describe a planner called MP-I, which allows white-knight declobbering only via already existing steps.
Reference: [15] <author> S. Kambhampati and S. Kedar. </author> <title> A unified framework for explanation-based generalization of partially ordered and partially instantiated plans. </title> <journal> Artificial Intelligence, </journal> <volume> Vol. 67, No. 1, </volume> <pages> pp. 29-70, </pages> <year> 1994. </year>
Reference-contexts: This is important because checking possible truth has several applications in plan projection [5] as well as plan generalization <ref> [15] </ref>. (iii) As stated by Chapman, the MTC is correct only as a criterion for necessary truth (not as a criterion for possible truth).
Reference: [16] <author> S. Kambhampati and S. Kedar. </author> <title> Explanation-based generalization of partially ordered plans. </title> <booktitle> In AAAI-91, </booktitle> <pages> pp. </pages> <address> 679--685, </address> <month> July </month> <year> 1991. </year>
Reference: [17] <author> S. Kambhampati. </author> <title> Refinement search as a unifying framework for analyzing planning algorithms. </title> <booktitle> In Proc. 4th Intl. Conf. on Ppls. of KR & R (KR-94), </booktitle> <month> May </month> <year> 1994. </year>
Reference: [18] <author> S. Kambhampati, C. Knoblock and Q. Yang. </author> <title> Planning as Refinement Search: A unified framework for evaluating design tradeoffs in partial-order planning. </title> <journal> Artificial Intelligence, Special Issue on Planning and Scheduling. </journal> <note> 1995. To appear. </note>
Reference: [19] <author> S. Kambhampati and J. Chen. </author> <title> Relative utility of EBG based plan reuse in total ordering vs. partial ordering planning. </title> <booktitle> In Proc. AAAI-93, </booktitle> <month> July </month> <year> 1993. </year>
Reference-contexts: It could also be useful when one wants to separate independent subparts of the plan to facilitate storage compactions in case-based approaches (c.f. <ref> [19] </ref>). 4.2.2 White-Knight Declobbering in Goal Achievement Although the white-knight declobbering clause is needed in the MTC, we pointed out in Section 4.1.3 that white-knight declobbering is not required to guide plan generation.
Reference: [20] <author> C.A. Knoblock. </author> <title> Generating parallel execution plans with a partial-order planner. </title> <booktitle> In Proc. </booktitle> <address> AIPS-94, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: be considered in more than one search branch of the 24 A related question is whether the MTC, and in particular the white-knight declobbering clause, would be necessary in the goal achievement procedure if one wants to find optimal partially ordered plans (for example, to ensure optimal execution time, c.f. <ref> [20] </ref>). At first glance, it might seem that we must search in the space of all partially ordered plans to find the optimal partially ordered plan, and thus the white-knight declobbering clause would be necessary.
Reference: [21] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In AAAI-91, </booktitle> <pages> pp. </pages> <address> 634--639, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: Chapman's definition of a step actually omits name (a) completely---but as pointed out by McAllester and Rosenblitt <ref> [21] </ref>, unless we give unique names to steps, it is impossible for a plan to contain two distinct steps that have the same preconditions and postconditions. 3 a 4-tuple P = (s 0 ; A; D; O), where s 0 is a state called P 's initial state, A is a <p> In fact, Chapman's own implementation of tweak [2, p. 361], as well as many later partial order planners such as SNLP <ref> [21] </ref> do not use white-knight 22 Historical Note: Although the term ``white knight'' became popular after Chapman's work on tweak [2], Tate's Nonlin was the first planner to use a white-knight clause to specify weakest conditions for establishment and declobbering. <p> In particular, suppose we defined the cost of each plan P to be the execution time that would be needed for P if all unnecessary ordering constraints were removed. If this cost were used as part of an admissible search strategy in a planner like SNLP <ref> [21] </ref> or even a total-order planner, then the planner would terminate with some plan P c such that P c is a constrainment of an optimal partially ordered plan P s .
Reference: [22] <author> D. McDermott. </author> <title> Regression Planning. </title> <journal> Internat. Jour. Intelligent Systems, </journal> <volume> 6 </volume> <pages> 357-416, </pages> <year> 1991. </year>
Reference: [23] <author> S. Minton, M. Drummond, J. Bresina, and A. Philips. </author> <title> Total order vs. partial order planning: Factors influencing performance. </title> <booktitle> In Proc. </booktitle> <address> KR-92, </address> <year> 1992. </year>
Reference-contexts: One extreme example of this would be a planner that generates only ground linear plans, but there are however other types of constrainments in which the plans are partially ordered---for example, unambiguous constrainments (c.f. <ref> [23] </ref>), and safe constrainments (c.f. [21,17])---which avoid the extreme of searching with totally ordered plans. All of these attempt to reduce the cost of plan evaluation and refinement by possibly increasing the search space size.
Reference: [24] <author> B. Nebel and C. Backstrom. </author> <title> On the computational complexity of temporal projection, planning and plan validation. </title> <journal> Artificial Intelligence, </journal> <volume> Vol. 56, No. 1, </volume> <year> 1994. </year>
Reference-contexts: We prefer not to use the more common term ``nonlinear planning,'' because it appears to mean different things to different people. 3 There are some difficulties with Chapman's proof of this, but these difficulties have been cleared up by Nebel and Backstrom <ref> [24] </ref>. 4 If modal duality held, then both necessary truth and possible would be at similar levels of complexity: either both would be polynomial, or one would be NP-hard and the other co-NP-hard. <p> Notice that this result is related to Chapman's observation [2, p. 356] that restricting the range of a variable to a finite set will defeat the MTC, and make constraint computations NP-complete. Coherent Plans. Nebel and Backstrom <ref> [24] </ref> have recently studied the computational complexity of plan validation and temporal projection.
Reference: [25] <author> E.P.D. Pednault. </author> <title> Synthesizing Plans that contain actions with Context-Dependent Effects Computational Intelligence, </title> <journal> Vol. </journal> <volume> 4, </volume> <month> 356-372 </month> <year> (1988). </year>
Reference: [26] <author> E.P.D. Pednault. </author> <title> Generalizing nonlinear planning to handle complex goals and actions with context-dependent effects. </title> <booktitle> In Proc. IJCAI-91, </booktitle> <year> 1991. </year>
Reference-contexts: Although the MTC is sufficient for serving these roles, it is not required for either of them---it is possible to provide a formal basis for partial-order planning without recourse to the MTC (c.f. <ref> [26] </ref>). To see this, we must start with a clear understanding of the objectives of partial-order planning. For both partial-order and total-order planning, the objective is to find a ground operator sequence which when executed 18 in the initial state produces a desired goal state.
Reference: [27] <author> V. Pratt. </author> <title> Semantical considerations on Floyd-Hoare Logic. </title> <booktitle> In Proc. 17th FOCS, </booktitle> <pages> 109-121. </pages>
Reference-contexts: Propositional Dynamic Logic. To our knowledge, the above approach was first used in Rosenchein's work [31] on providing semantics to plans based on first-order propositional dynamic logic. Propositional Dynamic Logic (PDL) is a variant of modal logic, which was originally designed to provide semantics to computer programs <ref> [27] </ref>. In PDL, the semantics of a program are described in terms of what will be necessarily and possibly true after the execution of that program.
Reference: [28] <author> D. Nau. </author> <title> On the complexity of possible truth. </title> <booktitle> In AAAI Spring Symposium, </booktitle> <month> April </month> <year> 1993. </year>

Reference: [30] <author> M. A. Peot. </author> <title> Conditional nonlinear planning. </title> <booktitle> In Proc. First International Conference on AI Planning Systems, </booktitle> <pages> pp. </pages> <address> 189--197, </address> <year> 1992. </year>
Reference: [31] <author> S. Rosenchein. </author> <title> Plan Synthesis: A logical perspective. </title> <booktitle> In Proc. IJCAI-81, </booktitle> <pages> pp. 331-337, </pages> <year> 1981. </year>
Reference-contexts: that all the preconditions of the preceding actions are possibly conditionally true, this only implies that each of them is individually 14 Although tweak plans cannot be modeled using the semantics of classical modal logics, they can be modeled in a variant of modal logics, called first order dynamic logic <ref> [31] </ref>. Dynamic logic, which has been used to provide semantics for programs and plans, provides a clean way to separate executability/termination conditions from goal satisfaction conditions. <p> Fig. 3 summarizes the complexity relations among the various decision problems. As discussed below, this approach has been used in different forms by several different researchers. Propositional Dynamic Logic. To our knowledge, the above approach was first used in Rosenchein's work <ref> [31] </ref> on providing semantics to plans based on first-order propositional dynamic logic. Propositional Dynamic Logic (PDL) is a variant of modal logic, which was originally designed to provide semantics to computer programs [27].
Reference: [32] <author> A. Tate. </author> <title> Generating project networks. </title> <booktitle> In Proc. 5th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. </pages> <address> 888--893, </address> <year> 1977. </year>
Reference-contexts: Nonlin's Q&A procedure <ref> [32] </ref> says that a literal p is true at a step s in a partially ordered plan, if and only if (1) there exists a step n 0 such that n 0 n, and n 0 asserts p, and (2) there does not exist a step n 00 such that n
Reference: [33] <author> Q. Yang and J. D. Tenenberg. Abtweak: </author> <title> Abstracting a nonlinear, least commitment planner. </title> <booktitle> In AAAI-90, </booktitle> <pages> pp. </pages> <address> 204--209, </address> <year> 1990. </year>
Reference-contexts: It is illegal for a [literal] to be both denied and asserted in a situation. This approach leads to several difficulties: (i) As pointed out by Yang and Tenenberg <ref> [33] </ref>, if a plan P is not complete, then its situations are ill-defined. For example, suppose P consists of two unordered steps a and b, such that a asserts p and denies q, and b asserts q and denies p.
Reference: [34] <author> M. M. Veloso, M. A. Perez, and J. G. Carbonell. </author> <title> Nonlinear planning with parallel resource allocation. </title> <booktitle> In Proceedings of the Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. </pages> <address> 207--212, </address> <month> November </month> <year> 1990. </year>
Reference: [35] <author> M. M. Veloso. </author> <title> Learning by Analogical Reasoning in General Problem Solving. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <year> 1992. </year> <month> (CMU-CS-92-174). </month>
References-found: 34

