URL: http://www.eecs.umich.edu/~anica/papers/edbt98.ps
Refering-URL: http://www.eecs.umich.edu/~anica/
Root-URL: http://www.cs.umich.edu
Phone: 2  
Title: The CVS Algorithm for View Synchronization in Evolvable Large-Scale Information Systems  
Author: Anisoara Nica Amy J. Lee and Elke A. Rundensteiner 
Address: Ann Arbor, MI 48109-2122  Worcester, MA 01609-2280  
Affiliation: 1 Department of EECS, University of Michigan  Department of Computer Science Worcester Polytechnic Institute,  
Abstract: Current view technology supports only static views in the sense that views become undefined and hence obsolete as soon as the underlying information sources (ISs) undergo capability changes. We propose to address this new view evolution problem which we call view synchronization by a novel solution approach that allows affected view definitions to be dynamically evolved to keep them in synch with evolving ISs. We present in this paper a general strategy for the view synchronization process that guided by constraints imposed by the view evolution preferences embedded in the view definition achieves view preservation (i.e., view redefinition). We present the formal correctness, the CVS algo rithm, as well as numerous examples to demonstrate the main concepts.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Y. Arens, C. A. Knoblock, and W.-M. Shen. </author> <title> Query Reformulation for Dynamic Information Integration. </title> <journal> J. of Intelligent Information Systems, </journal> <volume> 6 </volume> <pages> 99-130, </pages> <year> 1996. </year>
Reference-contexts: The EVE system can be seen as an information integration system using view technology to gather and customize data across heterogeneous ISs [4, 12, 5, 8]. On this venue, related work that addresses the problem of information integration are among others the SIMS <ref> [1] </ref> and SoftBot [2] projects. In the SIMS project, the user interaction with the system is via queries posed against a unified schema. The SoftBot project has a very different approach to query processing as the system discovers the "link" among data sources.
Reference: 2. <author> O. Etzioni and D. Weld. </author> <title> A Softbot-Based Interface to the Internet. </title> <journal> Communication of ACM, </journal> <year> 1994. </year>
Reference-contexts: The EVE system can be seen as an information integration system using view technology to gather and customize data across heterogeneous ISs [4, 12, 5, 8]. On this venue, related work that addresses the problem of information integration are among others the SIMS [1] and SoftBot <ref> [2] </ref> projects. In the SIMS project, the user interaction with the system is via queries posed against a unified schema. The SoftBot project has a very different approach to query processing as the system discovers the "link" among data sources.
Reference: 3. <author> A. Gupta, I.S. Mumick, and K.A. Ross. </author> <title> Adapting Materialized Views after Redefinition. </title> <booktitle> In Proc. of ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <year> 1995. </year>
Reference-contexts: While the evolution of views is assumed to be implicitly triggered by capability changes of (autonomous) ISs in our work, previous work <ref> [3, 7] </ref> assumed that view redefinition was explicitly requested by the view developer at the view site, while the ISs remained unchanged. They [3, 7] thus focused on the maintenance of the materialized views after such view redefinition and not on the modification of the view definitions themselves as done in <p> While the evolution of views is assumed to be implicitly triggered by capability changes of (autonomous) ISs in our work, previous work <ref> [3, 7] </ref> assumed that view redefinition was explicitly requested by the view developer at the view site, while the ISs remained unchanged. They [3, 7] thus focused on the maintenance of the materialized views after such view redefinition and not on the modification of the view definitions themselves as done in our work. <p> Gupta et al. <ref> [3] </ref> and Mohania et al. [7] address the problem of materialized view maintenance after a view redefinition explicitly initiated by the user takes place. They study under which conditions this view maintenance can take place without requiring access to base relations, i.e., the self-maintainability issue.
Reference: 4. <author> A. J. Lee, A. Nica, and E. A. Rundensteiner. </author> <title> Keeping Virtual Information Resources Up and Running. </title> <booktitle> In Proc. </booktitle> <institution> of IBM Centre for Advanced Studies Conf. CASCON97, </institution> <type> Best Paper Award, </type> <pages> pages 1-14, </pages> <month> November </month> <year> 1997. </year>
Reference-contexts: The ISs in such environments are however dynamic, updating not only their content but also their capabilities, and joining or leaving the environment frequently. Views in such environments thus introduce new challenges to the database community [14]. In our prior work <ref> [12, 4] </ref>, we have identified view evolution caused by capability changes of one or several of the underlying ISs as a critical new problem faced by these applications. Current view technology is insufficient for supporting flexible view definitions. <p> Our algorithm, called CVS (Complex View Synchronization), finds valid replacements for affected (deleted) components of the existing view definitions based on the semantic constraints captured in the MKB. For this, rather than just providing simple so-called `one-step-away' view rewritings <ref> [4, 12] </ref>, our solution succeeds in determining possibly complex view rewrites through multiple join constraints given in the MKB. To demonstrate our approach, we present algorithms for handling the most difficult capability change operator, namely, the delete-relation operator, in depth in this paper. <p> The proposed strategy is shown to find a new valid definition of a view in many cases where current view technology (as well as our initial simple solution <ref> [4, 12] </ref>) would have simply disabled the view. The remainder of the paper is structured as follows. In Sections 2 and 3 we present the IS description language and E-SQL, respectively. <p> A part of relevant IS descriptions is summarized in Fig. 2 in MISD format described below. We introduce below MISD constraints that are used in the remainder of this paper. All MISD constraints are summarized in Fig. 1 <ref> [4, 8] </ref>. A relation R is described by specifying its information source and its set of attributes as IS:R (A 1 ; : : : ; A n ). Each attribute A i is given a name and a data type to specify its domain of values. <p> They study under which conditions this view maintenance can take place without requiring access to base relations, i.e., the self-maintainability issue. The EVE system can be seen as an information integration system using view technology to gather and customize data across heterogeneous ISs <ref> [4, 12, 5, 8] </ref>. On this venue, related work that addresses the problem of information integration are among others the SIMS [1] and SoftBot [2] projects. In the SIMS project, the user interaction with the system is via queries posed against a unified schema. <p> In [12], we establish a taxonomy of view adaptation problems which distinguishes our new view synchronization problem, while in <ref> [4, 5] </ref> we lay the basis for the EVE solution framework. Formal criteria of correctness for view synchronization as well as actual algorithms for achieving view synchronization are the key contributions of this current work.
Reference: 5. <author> A. J. Lee, A. Nica, and E. A. Rundensteiner. </author> <title> The EVE Framework: View Evolution in an Evolving Environment. </title> <type> Technical Report WPI-CS-TR-97-4, </type> <institution> Worcester Polytechnic Institute, Dept. of Computer Science, </institution> <year> 1997. </year>
Reference-contexts: That is views are static, meaning views are assumed to be specified on top of a fixed environment and once the underlying ISs change their capabilities, the views defined upon them become undefined. In our prior work, we have proposed a novel approach to solve this view inflexibility problem <ref> [12, 5, 8] </ref>, called EVE (Evolveable View Environment). EVE ? This work was supported in part by the NSF NYI grant #IRI 94-57609. <p> The descriptions of the ISs are stored in the meta knowledge base (MKB) and are used in the process of view evolution <ref> [5] </ref>. <p> The example below demonstrates the integrated usage of these evolution parameters (a detailed description of E-SQL can be found in <ref> [5] </ref>). <p> They study under which conditions this view maintenance can take place without requiring access to base relations, i.e., the self-maintainability issue. The EVE system can be seen as an information integration system using view technology to gather and customize data across heterogeneous ISs <ref> [4, 12, 5, 8] </ref>. On this venue, related work that addresses the problem of information integration are among others the SIMS [1] and SoftBot [2] projects. In the SIMS project, the user interaction with the system is via queries posed against a unified schema. <p> In [12], we establish a taxonomy of view adaptation problems which distinguishes our new view synchronization problem, while in <ref> [4, 5] </ref> we lay the basis for the EVE solution framework. Formal criteria of correctness for view synchronization as well as actual algorithms for achieving view synchronization are the key contributions of this current work.
Reference: 6. <author> Alon Y. Levy, Anand Rajaraman, and Jeffrey D. Ullman. </author> <title> Answering queries using limited external processors. </title> <booktitle> In Proc. of the Fifteenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 227-237, </pages> <year> 1996. </year>
Reference-contexts: step, we have to check for which rewriting V 0 obtained in Step 4 the extent parameter VE V of the view V is satisfied (property P3 from Def. 1) This problem is similar to the problem of answering queries using views which was extensively studied in the database community <ref> [6, 13] </ref>. However, our rewritings are not necessarily equivalent to the initial view, the relationship among them being imposed by the view-extent evolution parameter. We use the partial/complete information constraints defined in MKB' to com pare the extents of the initial view V and the evolved view V 0 . <p> None of the two projects addresses the particular problem of evolution under IS changes. Much research has been done on query reformulation using materialized views. For example, Levy et. al. <ref> [6, 13] </ref> consider the problem of replacing a query with a new query expression containing view definitions such that the new query is equivalent to the old one.
Reference: 7. <author> M. Mohania and G. Dong. </author> <title> Algorithms for Adapting Materialized Views in Data Warehouses. </title> <booktitle> Int. Symposium on Cooperative Database Systems for Advanced Applications, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: While the evolution of views is assumed to be implicitly triggered by capability changes of (autonomous) ISs in our work, previous work <ref> [3, 7] </ref> assumed that view redefinition was explicitly requested by the view developer at the view site, while the ISs remained unchanged. They [3, 7] thus focused on the maintenance of the materialized views after such view redefinition and not on the modification of the view definitions themselves as done in <p> While the evolution of views is assumed to be implicitly triggered by capability changes of (autonomous) ISs in our work, previous work <ref> [3, 7] </ref> assumed that view redefinition was explicitly requested by the view developer at the view site, while the ISs remained unchanged. They [3, 7] thus focused on the maintenance of the materialized views after such view redefinition and not on the modification of the view definitions themselves as done in our work. <p> Gupta et al. [3] and Mohania et al. <ref> [7] </ref> address the problem of materialized view maintenance after a view redefinition explicitly initiated by the user takes place. They study under which conditions this view maintenance can take place without requiring access to base relations, i.e., the self-maintainability issue.
Reference: 8. <author> A. Nica, A.J . Lee, and E. A. Rundensteiner. </author> <title> View Synchronization with Complex Substitution Algorithms. </title> <type> Technical Report WPI-CS-TR-97-8, </type> <institution> Worcester Polytechnic Institute, Dept. of Computer Science, </institution> <year> 1997. </year>
Reference-contexts: That is views are static, meaning views are assumed to be specified on top of a fixed environment and once the underlying ISs change their capabilities, the views defined upon them become undefined. In our prior work, we have proposed a novel approach to solve this view inflexibility problem <ref> [12, 5, 8] </ref>, called EVE (Evolveable View Environment). EVE ? This work was supported in part by the NSF NYI grant #IRI 94-57609. <p> A part of relevant IS descriptions is summarized in Fig. 2 in MISD format described below. We introduce below MISD constraints that are used in the remainder of this paper. All MISD constraints are summarized in Fig. 1 <ref> [4, 8] </ref>. A relation R is described by specifying its information source and its set of attributes as IS:R (A 1 ; : : : ; A n ). Each attribute A i is given a name and a data type to specify its domain of values. <p> CREATE VIEW Asia-Customer (VE =)AS SELECT C.Name (AR = true), C.Addr (AR = true), C.Phone (AD = true, AR = false) FROM Customer C (RR = true); FlightRes F WHERE (C.Name = F.PName)AND (F.Dest = 'Asia') (CD = true) (1) 4 Formal Foundation for View Synchronization We propose in <ref> [8] </ref> a three-step strategy for the view synchronization: Step 1. Given a capability change ch, EVE system will first evolve the meta knowledge base MKB into MKB' by detecting and modifying the affected MISD descriptions found in the MKB. Step 2. <p> Example 4. Let an E-SQL view be defined as in Eq. (3) and the change ch is "delete attribute Customer.Addr". 3 See <ref> [8] </ref> for a discussion of how evolution parameters are set for new components CREATE VIEW Asia-Customer (AName, AAddr, APh) (VE =)AS SELECT C.Name, C.Addr (AD = false; AR = true); C.Phone FROM Customer C, FlightRes F WHERE (C.Name = F.PName) AND (F.Dest = 'Asia') (3) CREATE VIEW Asia-Customer' (AName, AAddr, APh) <p> The algorithm for computing the R-mapping is straightforward and it is omitted here (see <ref> [8] </ref>). Intuitively, we now have found the maximal part of the view definition that "relates" to our MKB (Def. 2). So now we can ask how this part (i.e., M ax (V R )) is affected by the relation R being dropped. <p> If relations left in M in (H 0 R ) are in a connected component of H 0 R (M KB 0 ), the construction algorithm of the set fM ax (V 1;R ); : : : ; M ax (V k;R )g is following directly from Def. 3 (see <ref> [8] </ref>). Example 9. In Fig. 4, the expression M in (H 0 Customer ) defined by Eq. (11) is marked with bold lines: M in (H 0 Customer ) = (FlightRes). We give now an example of R-replacements for the view defined by Eq. (5) and R = Customer. <p> They study under which conditions this view maintenance can take place without requiring access to base relations, i.e., the self-maintainability issue. The EVE system can be seen as an information integration system using view technology to gather and customize data across heterogeneous ISs <ref> [4, 12, 5, 8] </ref>. On this venue, related work that addresses the problem of information integration are among others the SIMS [1] and SoftBot [2] projects. In the SIMS project, the user interaction with the system is via queries posed against a unified schema.
Reference: 9. <author> A. Nica and E. A. Rundensteiner. </author> <title> On Translating Loosely-Specified Queries into Executable Plans in Large-Scale Information Systems. </title> <booktitle> In Proc. of Second IFCIS Int. Conf. on Cooperative Information Systems CoopIS, </booktitle> <pages> pages 213-222, </pages> <year> 1997. </year>
Reference: 10. <author> A. Nica and E. A. Rundensteiner. </author> <title> Loosely-Specified Query Processing in Large-Scale Information Systems. </title> <journal> Int. Journal of Cooperative Information Systems, </journal> <year> 1998. </year>
Reference: 11. <author> Y. G. Ra and E. A. Rundensteiner. </author> <title> A transparent schema-evolution system based on object-oriented view technology. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> September </month> <year> 1997. </year>
Reference: 12. <author> E. A. Rundensteiner, A. J. Lee, and A. </author> <title> Nica. On Preserving Views in Evolving Environments. </title> <booktitle> In Proc. of 4th Int. Workshop on Knowledge Representation Meets Databases (KRDB'97): Intelligent Access to Heterogeneous Information, pages 13.1-13.11, </booktitle> <address> Athens, Greece, </address> <month> August </month> <year> 1997. </year>
Reference-contexts: The ISs in such environments are however dynamic, updating not only their content but also their capabilities, and joining or leaving the environment frequently. Views in such environments thus introduce new challenges to the database community [14]. In our prior work <ref> [12, 4] </ref>, we have identified view evolution caused by capability changes of one or several of the underlying ISs as a critical new problem faced by these applications. Current view technology is insufficient for supporting flexible view definitions. <p> That is views are static, meaning views are assumed to be specified on top of a fixed environment and once the underlying ISs change their capabilities, the views defined upon them become undefined. In our prior work, we have proposed a novel approach to solve this view inflexibility problem <ref> [12, 5, 8] </ref>, called EVE (Evolveable View Environment). EVE ? This work was supported in part by the NSF NYI grant #IRI 94-57609. <p> Our algorithm, called CVS (Complex View Synchronization), finds valid replacements for affected (deleted) components of the existing view definitions based on the semantic constraints captured in the MKB. For this, rather than just providing simple so-called `one-step-away' view rewritings <ref> [4, 12] </ref>, our solution succeeds in determining possibly complex view rewrites through multiple join constraints given in the MKB. To demonstrate our approach, we present algorithms for handling the most difficult capability change operator, namely, the delete-relation operator, in depth in this paper. <p> The proposed strategy is shown to find a new valid definition of a view in many cases where current view technology (as well as our initial simple solution <ref> [4, 12] </ref>) would have simply disabled the view. The remainder of the paper is structured as follows. In Sections 2 and 3 we present the IS description language and E-SQL, respectively. <p> They study under which conditions this view maintenance can take place without requiring access to base relations, i.e., the self-maintainability issue. The EVE system can be seen as an information integration system using view technology to gather and customize data across heterogeneous ISs <ref> [4, 12, 5, 8] </ref>. On this venue, related work that addresses the problem of information integration are among others the SIMS [1] and SoftBot [2] projects. In the SIMS project, the user interaction with the system is via queries posed against a unified schema. <p> Thus, when in compliance to those constraints, we allow the view redefinitions to be a subset or a superset of the original view. 7 Conclusion To our knowledge, we are the first to study the problem of view synchronization caused by capability changes of participating ISs. In <ref> [12] </ref>, we establish a taxonomy of view adaptation problems which distinguishes our new view synchronization problem, while in [4, 5] we lay the basis for the EVE solution framework.
Reference: 13. <author> D. Srivastava, S. Dar, H.V. Jagadish, and A.Y. Levy. </author> <title> Answering Queries with Aggregation Using Views. </title> <booktitle> In Proc. of Int. Conf. on Very Large Data Bases, </booktitle> <year> 1996. </year>
Reference-contexts: step, we have to check for which rewriting V 0 obtained in Step 4 the extent parameter VE V of the view V is satisfied (property P3 from Def. 1) This problem is similar to the problem of answering queries using views which was extensively studied in the database community <ref> [6, 13] </ref>. However, our rewritings are not necessarily equivalent to the initial view, the relationship among them being imposed by the view-extent evolution parameter. We use the partial/complete information constraints defined in MKB' to com pare the extents of the initial view V and the evolved view V 0 . <p> None of the two projects addresses the particular problem of evolution under IS changes. Much research has been done on query reformulation using materialized views. For example, Levy et. al. <ref> [6, 13] </ref> consider the problem of replacing a query with a new query expression containing view definitions such that the new query is equivalent to the old one.
Reference: 14. <author> J. Widom. </author> <title> Research Problems in Data Warehousing. </title> <booktitle> In Proc. of Int. Conf. on Information and Knowledge Management, </booktitle> <pages> pages 25-30, </pages> <month> November </month> <year> 1995. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: 1 Introduction Advanced applications such as web-based information services, digital libraries, and data mining typically operate in an information space populated with a large number of dynamic information sources (ISs) such as the WWW <ref> [14] </ref>. In order to provide easy access to information in such environments, relevant data is often retrieved from several sources, integrated as necessary, and then materialized at the user site as what's called a view (or data warehouse). <p> The ISs in such environments are however dynamic, updating not only their content but also their capabilities, and joining or leaving the environment frequently. Views in such environments thus introduce new challenges to the database community <ref> [14] </ref>. In our prior work [12, 4], we have identified view evolution caused by capability changes of one or several of the underlying ISs as a critical new problem faced by these applications. Current view technology is insufficient for supporting flexible view definitions.
References-found: 14

