URL: http://www.eecs.umich.edu/~nelsonr/postscript-docs/ecscw95.ps
Refering-URL: http://www.eecs.umich.edu/~nelsonr/publications.html
Root-URL: http://www.cs.umich.edu
Email: E-mail: fnelsonr,aprakashg@eecs.umich.edu  
Title: The Session Capture and Replay Paradigm for Asynchronous Collaboration  
Author: Nelson R. Manohar and Atul Prakash 
Address: Ann Arbor, MI 48109-2122, USA.  
Affiliation: Department of Electrical Engineering and Computer Science University of Michigan,  
Abstract: In this paper, we describe a paradigm and its associated collaboration artifact to allow flexible support for asynchronous collaboration. Under this paradigm, a user session with an application's user interface is encapsulated into a data artifact, referred to as a session object. Users collaborate by annotating, by modifying, and by a back-and-forth exchange of these session objects. Each session object is composed of several data streams that encapsulate audio annotations and user interactions with the application. The replay of a session object is accomplished by dispatching these data streams to the application for re-execution. Re-execution of these streams is kept synchronized to maintain faithfulness to the original recording. The basic mechanisms allow a participant who misses a session with an application to catch up on the activities that occurred during the session. This paper presents the paradigm, its applications, its design, and our preliminary experience with its use. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H.M. Abdel-Wahab, S. Guan, and J. Nievergelt. </author> <title> Shared workspaces for group collaboration: An experiment using Internet and Unix inter-process communication. </title> <journal> IEEE Communications Magazine, </journal> <pages> pages 10-16, </pages> <month> Nov. </month> <year> 1988. </year>
Reference-contexts: However, these approaches are limited to reproducing and maintaining the external look of the interface. Consequently, interactions with a previously recorded session, are not possible. X pseudo-servers such as SharedX and Xtv <ref> [1] </ref> intercept events sent by applications being shared to the window server. These systems are primarily targeted for synchronous work. However, if these events are recorded and the state of the window server captured, this approach, in principle, allows the events to be replayed for specific applications.
Reference: [2] <author> L. Brothers, V. Sembugamoorthy, and M. Muller. ICICLE: </author> <title> Groupware for code inspection. </title> <booktitle> In Proceedings of the Second Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 169-181, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Often, reviewers have different areas of expertise. In fact, most of the time, a synchronous collaboration of reviewers with disjoint areas of expertise is both unnecessary and, in some cases, impractical. The feasibility of a synchronous collaboration approach was shown in the Icicle system <ref> [2] </ref>. Although, there are some benefits to holding such a meeting, providing an asynchronous collaboration mode also seems appropriate. Under our paradigm, the reader role becomes a baseline recording. Each reviewer independently walkthroughs over the code.
Reference: [3] <author> R. Clauer and et. al. UARC: </author> <title> A prototype upper atmostpheric research collaboratory. </title> <journal> EOS Trans. American Geophys. Union, </journal> <volume> 267(74), </volume> <year> 1993. </year>
Reference-contexts: Examples The next examples illustrate how different asynchronous collaboration scenarios could benefit from both the paradigm and its artifact. Using the paradigm to support synchronous collaboration Our work was originally motivated by the uarc 1 project, a collaboratory experiment among domain scientists in a wide-area network <ref> [3] </ref>. The domain of research among the scientists is space science.
Reference: [4] <author> C. Ellis, S.J. Gibbs, and G. Rein. </author> <title> Design and use of a group editor. </title> <editor> In G. Cockton, editor, </editor> <booktitle> Engineering for Human-Computer Interaction, </booktitle> <pages> pages 13-25. </pages> <publisher> North-Holland, </publisher> <address> Am-sterdam, </address> <month> September </month> <year> 1988. </year>
Reference-contexts: Introduction Many approaches to computer supported collaboration have been centered around synchronous collaboration <ref> [4, 5, 9] </ref>. In synchronous collaboration, users of a multi-user application first find a common time and then work in a WYSIWIS (What You See Is What I See) collaborative session. However, a synchronous mode of collaboration can often be too imposing on the schedule of the participants.
Reference: [5] <author> C.A. Ellis, S.J. Gibbs, and G.L. Rein. </author> <title> Groupware: Some issues and experiences. </title> <journal> Communications of the ACM, </journal> <pages> pages 38-51, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Introduction Many approaches to computer supported collaboration have been centered around synchronous collaboration <ref> [4, 5, 9] </ref>. In synchronous collaboration, users of a multi-user application first find a common time and then work in a WYSIWIS (What You See Is What I See) collaborative session. However, a synchronous mode of collaboration can often be too imposing on the schedule of the participants.
Reference: [6] <author> R. Fish, R. Kraut, M. Leland, and M. Cohen. Quilt: </author> <title> A collaborative tool for cooperative writing. </title> <booktitle> In Proceedings of ACM SIGOIS Conference, </booktitle> <pages> pages 30-37, </pages> <year> 1988. </year>
Reference-contexts: In both cases, the shared object is an argumentative tree. In these systems, interactions are usually in reference to some data artifacts. Our paradigm introduces a new data artifact, which can be used to enrich intra-task descriptions on these systems. Collaborative writing systems such as Quilt <ref> [6] </ref> and Prep [13] support the idea of allowing users to work asynchronously through annotations added to a document. Our approach builds on those ideas, but in our case, the artifact being annotated is a software-based recording of interactions with an application.
Reference: [7] <author> V. Goldberg, M. Safran, and E. Shapiro. </author> <title> Active Mail: A framework for implementing groupware. </title> <booktitle> In Proceedings of the Fourth Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 75-83, </pages> <address> Toronto, Canada, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: It requires that users be able to find a common time to work together but, in many cases, that is not easy. Several systems for the support of asynchronous collaboration provide ways to model the interactions among users and the evolution of collaboration repositories <ref> [7, 10, 14] </ref>. In this paper, we present a complimentary paradigm for asynchronous collaboration that allows users to record and replay an interactive session with an application. We refer to this paradigm as WYSNIWIST (What You See Now, Is What I Saw Then) [11].
Reference: [8] <author> S. Kaplan, W. Tolone, D. Bogia, and C. Bignoli. </author> <title> Flexible, active support for collaborative work with ConversationBuilder. </title> <booktitle> In Proceedings of the Fourth Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 378-385, </pages> <address> Toronto, Canada, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: Furthermore, replay is limited to only those events that go through the Window Server. Our approach is based on the an exchange and refinement of a work-in-progress by group members. Several other systems also support this paradigm, such as ConversationBuilder <ref> [8] </ref> and Strudel [15]. These systems work by first defining a shared object and then formalizing a protocol that defines and limits the transactions that modify this object. In both cases, the shared object is an argumentative tree. In these systems, interactions are usually in reference to some data artifacts.
Reference: [9] <author> M. Knister and A. Prakash. DistEdit: </author> <title> A distributed toolkit for supporting multiple group editors. </title> <booktitle> In Proceedings of the Third Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 343-355, </pages> <address> Los Angeles, California, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: Introduction Many approaches to computer supported collaboration have been centered around synchronous collaboration <ref> [4, 5, 9] </ref>. In synchronous collaboration, users of a multi-user application first find a common time and then work in a WYSIWIS (What You See Is What I See) collaborative session. However, a synchronous mode of collaboration can often be too imposing on the schedule of the participants.
Reference: [10] <author> T. Malone, K. R. Grant, and et. al. ObjectLens: </author> <title> Intelligent information sharing systems. </title> <journal> Communications of the ACM, </journal> <pages> pages 390-402, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: It requires that users be able to find a common time to work together but, in many cases, that is not easy. Several systems for the support of asynchronous collaboration provide ways to model the interactions among users and the evolution of collaboration repositories <ref> [7, 10, 14] </ref>. In this paper, we present a complimentary paradigm for asynchronous collaboration that allows users to record and replay an interactive session with an application. We refer to this paradigm as WYSNIWIST (What You See Now, Is What I Saw Then) [11].
Reference: [11] <author> N.R. Manohar and A. Prakash. </author> <title> Replay by re-execution: a paradigm for asynchronous collaboration via record and replay of interactive multimedia streams. </title> <journal> ACM SIGOIS Bulletin, </journal> <volume> 15(2) </volume> <pages> 32-34, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: In this paper, we present a complimentary paradigm for asynchronous collaboration that allows users to record and replay an interactive session with an application. We refer to this paradigm as WYSNIWIST (What You See Now, Is What I Saw Then) <ref> [11] </ref>. The paradigm introduces an associated data artifact, the session object, used to capture the collaborative session. Figure 1 shows a high level view of the capture and replay of an interactive session with an application.
Reference: [12] <author> N.R. Manohar and A. Prakash. </author> <title> Synchronization infrastructure for the support of the session capture and replay paradigm for asynchronous collaboration. In submitted to: Network and Operating Systems Support for Digital Audio and Video, </title> <publisher> N.H., </publisher> <address> USA., </address> <month> May </month> <year> 1995. </year>
Reference-contexts: The variances due to cpu availability, dma access, thread overheads, disk access, reliability of timing services, etc., affected the scheduling of both window and audio streams. Our results in <ref> [12] </ref> showed that an adaptive protocol that attempts to compensate for varying load generally performs better across all load conditions. Streams execute as cooperating thread tasks in a single cpu. The infrastructure provides two generic thread models. Figure 4 (a) shows the thread model used to replay window events. <p> While users tolerated some inter-stream asynchrony | up to 1 or even 2 seconds was acceptable | most users did not tolerate audio discontinuities. We found that our adaptive synchronization protocol <ref> [12] </ref> provided acceptable performance across all load conditions. The maximum magnitude of the asynchrony jmax async j was bounded across all load conditions to the duration of an audio frame (2 seconds). Maintaining data as separate streams was a good design choice for record, storage, and access.
Reference: [13] <editor> C.M. Neuwirth, D.S. Kaufer, R. Chandhok, and J.H. Morris. </editor> <booktitle> Issues in the design of computer support for co-authoring and commenting. In Proceedings of the Third Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 183-195, </pages> <address> Los Angeles, California, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: In both cases, the shared object is an argumentative tree. In these systems, interactions are usually in reference to some data artifacts. Our paradigm introduces a new data artifact, which can be used to enrich intra-task descriptions on these systems. Collaborative writing systems such as Quilt [6] and Prep <ref> [13] </ref> support the idea of allowing users to work asynchronously through annotations added to a document. Our approach builds on those ideas, but in our case, the artifact being annotated is a software-based recording of interactions with an application. Annotations can be made by gesturing (e.g., telepointing), text, and audio.
Reference: [14] <author> C.M. Neuwirth, D.S. Kaufer, J. Morris, and R. Chandhok. </author> <title> Flexible diff-ing in a collaborative writing system. </title> <booktitle> In Proceedings of the Fourth Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 147-154, </pages> <address> Toronto, Canada, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: It requires that users be able to find a common time to work together but, in many cases, that is not easy. Several systems for the support of asynchronous collaboration provide ways to model the interactions among users and the evolution of collaboration repositories <ref> [7, 10, 14] </ref>. In this paper, we present a complimentary paradigm for asynchronous collaboration that allows users to record and replay an interactive session with an application. We refer to this paradigm as WYSNIWIST (What You See Now, Is What I Saw Then) [11].
Reference: [15] <author> A. Sheperd, N. Mayer, and A. Kuchinsky. Strudel: </author> <title> An extensible electronic conversation toolkit. </title> <booktitle> In Proceedings of the Second Conference on Computer-Supported Cooperative Work, </booktitle> <month> October </month> <year> 1990. </year>
Reference-contexts: Furthermore, replay is limited to only those events that go through the Window Server. Our approach is based on the an exchange and refinement of a work-in-progress by group members. Several other systems also support this paradigm, such as ConversationBuilder [8] and Strudel <ref> [15] </ref>. These systems work by first defining a shared object and then formalizing a protocol that defines and limits the transactions that modify this object. In both cases, the shared object is an argumentative tree. In these systems, interactions are usually in reference to some data artifacts.
References-found: 15

