URL: http://www.cs.unc.edu/~raskar/thesis/thesis.ps.Z
Refering-URL: http://www.cs.unc.edu/~raskar/thesis/thesisDesc.html
Root-URL: http://www.cs.unc.edu
Title: EDGE-BASED CORRESPONDENCE USING THE VITERBI ALGORITHM  
Author: by Ramesh Raskar 
Degree: A thesis submitted in partial fulfillment of the requirements for the Master of Science degree in Computer Science in the Graduate College of  Thesis supervisor: Assistant Professor  
Note: Margaret M. Fleck  
Date: August 1995  
Affiliation: The University of Iowa  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Baker, H. H. </author> <title> "Depth from edge and intensity based stereo," </title> <institution> In Stanford Artificial Intelligence Laboratory Tech. Report AIM-347. Stanford University, </institution> <year> 1982. </year>
Reference-contexts: The underlying Markov process is characterized as follows: Consider the state space X = 1; 2; ; N , i.e. state x m at time m. Assume the process runs in time domain T where t 2 <ref> [1; M ] </ref>, and the initial and final states x 1 and x M are known. The state sequence mapping (which we are interested in finding) T ! X, can be represented as a vector S = (x 1 ; x 2 ; :::; x M ). <p> The solution for the pairing (i; j) is the best assignment of edges from Edgeset l;p , where p 2 <ref> [1; i] </ref> and Edgeset r;q , where q 2 [1; j]. A scoring (support) function is defined for the various transitions possible in the processing. To compute the scoring function we always move either vertically up or to the right in the array. <p> The solution for the pairing (i; j) is the best assignment of edges from Edgeset l;p , where p 2 [1; i] and Edgeset r;q , where q 2 <ref> [1; j] </ref>. A scoring (support) function is defined for the various transitions possible in the processing. To compute the scoring function we always move either vertically up or to the right in the array. <p> We chain back from this entry to get all other entries that are part of the global optimum solution. 3.2 Modified Viterbi Algorithm The Viterbi algorithm primarily deals with discrete-time finite-state processes. Applying it to correspondence analysis necessitates the following change <ref> [1] </ref>. The Viterbi algorithm was not designed with time domain skipping in mind, although having a particular state unused would present no problem. This creates a problem while processing unassignable edges. A real edge can be visible in one image but obscured in the other image. <p> In the original Viterbi algorithm, the probabilities are treated multiplicatively. If one of the left image edges L i , has no correlate in the right image, then the optimal solution should have P robability (L i ; R j match) = 0; 8j 2 <ref> [1; N ] </ref>. But even a single probability will take the total probability product to zero giving an impression that a solution for that image line doesn't exist. We would like to leave edges from either image that are spurious or occluded, 24 unassigned by the matching process. <p> The totalscore at each P [m; n] array location is influenced by P [m 1; n]:totalscore, P [m; n 1]:totalscore and P [m; n]:localscore. The totalscore needs to be computed at each (m; n); m 2 <ref> [1; M ] </ref>; n 2 [1; N ]. This a M fl N step process. The computation of global solution starts in the M 'th column. We take the highest totalscore in P [M; n]; 1 n N . <p> The totalscore at each P [m; n] array location is influenced by P [m 1; n]:totalscore, P [m; n 1]:totalscore and P [m; n]:localscore. The totalscore needs to be computed at each (m; n); m 2 [1; M ]; n 2 <ref> [1; N ] </ref>. This a M fl N step process. The computation of global solution starts in the M 'th column. We take the highest totalscore in P [M; n]; 1 n N . If say row number n s ; n s 2 [1; N ] has the highest totalscore <p> 2 [1; M ]; n 2 <ref> [1; N ] </ref>. This a M fl N step process. The computation of global solution starts in the M 'th column. We take the highest totalscore in P [M; n]; 1 n N . If say row number n s ; n s 2 [1; N ] has the highest totalscore then we say (M; n s ) is a match. The global optimum solution is the chain of localscores that contributed to P [M; n s ]:totalscore. <p> Let's first consider how this compares to the binocular matching algorithm. The correspondence problem is to find the best matching combination between the set of points (x i ; y l ); i 2 <ref> [1; W ] </ref>; l 2 [1; H] and (x j ; y r ); j 2 [1; W ]; r 2 [1; H], where H is the height and W is the width (in pixels) of the left and right image. <p> Let's first consider how this compares to the binocular matching algorithm. The correspondence problem is to find the best matching combination between the set of points (x i ; y l ); i 2 [1; W ]; l 2 <ref> [1; H] </ref> and (x j ; y r ); j 2 [1; W ]; r 2 [1; H], where H is the height and W is the width (in pixels) of the left and right image. However, using the epipolar constraint, we break this down into H separate problems. <p> The correspondence problem is to find the best matching combination between the set of points (x i ; y l ); i 2 <ref> [1; W ] </ref>; l 2 [1; H] and (x j ; y r ); j 2 [1; W ]; r 2 [1; H], where H is the height and W is the width (in pixels) of the left and right image. However, using the epipolar constraint, we break this down into H separate problems. <p> The correspondence problem is to find the best matching combination between the set of points (x i ; y l ); i 2 [1; W ]; l 2 <ref> [1; H] </ref> and (x j ; y r ); j 2 [1; W ]; r 2 [1; H], where H is the height and W is the width (in pixels) of the left and right image. However, using the epipolar constraint, we break this down into H separate problems. <p> However, using the epipolar constraint, we break this down into H separate problems. Thus, as discussed earlier, each problem is reduced to matching two sets of points, (x i ; y); i 2 <ref> [1; M ] </ref> and (x j ; y); j 2 [1; N ]. This we reduced further to a two-dimensional problem of matching x i ; i 2 [1; M ] and x j ; j 2 [1; N ] in the last chapter. <p> However, using the epipolar constraint, we break this down into H separate problems. Thus, as discussed earlier, each problem is reduced to matching two sets of points, (x i ; y); i 2 [1; M ] and (x j ; y); j 2 <ref> [1; N ] </ref>. This we reduced further to a two-dimensional problem of matching x i ; i 2 [1; M ] and x j ; j 2 [1; N ] in the last chapter. <p> Thus, as discussed earlier, each problem is reduced to matching two sets of points, (x i ; y); i 2 <ref> [1; M ] </ref> and (x j ; y); j 2 [1; N ]. This we reduced further to a two-dimensional problem of matching x i ; i 2 [1; M ] and x j ; j 2 [1; N ] in the last chapter. <p> reduced to matching two sets of points, (x i ; y); i 2 [1; M ] and (x j ; y); j 2 <ref> [1; N ] </ref>. This we reduced further to a two-dimensional problem of matching x i ; i 2 [1; M ] and x j ; j 2 [1; N ] in the last chapter. <p> However, when we try to find the best matching combination between the sets of points (x i ; y l ); i 2 <ref> [1; W ] </ref>; l 2 [1; H](left) and (x j ; y r ); j 2 [1; W ]; r 2 [1; H](right) and (x k ; y t ); k 2 [1; W ]; t 2 [1; H](top), we cannot use epipolar constraint to flatten this eight dimensional problem to <p> However, when we try to find the best matching combination between the sets of points (x i ; y l ); i 2 [1; W ]; l 2 <ref> [1; H] </ref>(left) and (x j ; y r ); j 2 [1; W ]; r 2 [1; H](right) and (x k ; y t ); k 2 [1; W ]; t 2 [1; H](top), we cannot use epipolar constraint to flatten this eight dimensional problem to a two-dimensional search. <p> However, when we try to find the best matching combination between the sets of points (x i ; y l ); i 2 <ref> [1; W ] </ref>; l 2 [1; H](left) and (x j ; y r ); j 2 [1; W ]; r 2 [1; H](right) and (x k ; y t ); k 2 [1; W ]; t 2 [1; H](top), we cannot use epipolar constraint to flatten this eight dimensional problem to a two-dimensional search. <p> However, when we try to find the best matching combination between the sets of points (x i ; y l ); i 2 [1; W ]; l 2 <ref> [1; H] </ref>(left) and (x j ; y r ); j 2 [1; W ]; r 2 [1; H](right) and (x k ; y t ); k 2 [1; W ]; t 2 [1; H](top), we cannot use epipolar constraint to flatten this eight dimensional problem to a two-dimensional search. <p> find the best matching combination between the sets of points (x i ; y l ); i 2 <ref> [1; W ] </ref>; l 2 [1; H](left) and (x j ; y r ); j 2 [1; W ]; r 2 [1; H](right) and (x k ; y t ); k 2 [1; W ]; t 2 [1; H](top), we cannot use epipolar constraint to flatten this eight dimensional problem to a two-dimensional search. <p> between the sets of points (x i ; y l ); i 2 [1; W ]; l 2 <ref> [1; H] </ref>(left) and (x j ; y r ); j 2 [1; W ]; r 2 [1; H](right) and (x k ; y t ); k 2 [1; W ]; t 2 [1; H](top), we cannot use epipolar constraint to flatten this eight dimensional problem to a two-dimensional search. <p> The propagated strength accumulates in the top right corner of the left (bottom) image i.e. at (x W ; y H ; x r ; y t ); r 2 <ref> [1; W ] </ref>; t 2 [1; H]. Let's say P [x W ; y H ; x rs ; y ts ] has the maximum totalscore among all totalscores in the two dimensional "column" at (x W ; y H ). <p> The propagated strength accumulates in the top right corner of the left (bottom) image i.e. at (x W ; y H ; x r ; y t ); r 2 [1; W ]; t 2 <ref> [1; H] </ref>. Let's say P [x W ; y H ; x rs ; y ts ] has the maximum totalscore among all totalscores in the two dimensional "column" at (x W ; y H ). We need to find the chain of matches that supported this totalscore. <p> Edges are powerful abstractions of image content, and are used to greatly reduces the combinatorics of the correspondence process. They provide higher precision disparity measures than intensity matching techniques <ref> [1] </ref>, and through their mutual connectivity, enable explicit use of global information for reducing the ambiguity at matching level. <p> The output of an edge-based matcher is a sparse disparity map because the computations are performed only at edge pixels. The performance of the algorithm is also highly dependent on existence of well defined edges in the input images. To improve in these two areas, Baker <ref> [1] </ref> and others, e.g. [16] have used intensity based matching of edge-delimited intervals on scanline pair. Future work in trinocular algorithm will also involve some type of intensity based matching.
Reference: [2] <author> Stewart, C.V., and Dyer, C.R., </author> <title> "The Trinocular General Support Algorithm: </title>
Reference-contexts: To enforce this constraint, we must keep only one match per left or right edge. In case of conflict we should either reject the correspondence or use other constraints to choose the correct match. 2.2.2.3 Trinocular uniqueness constraint This refers to the three camera setup. The trinocular uniqueness constraint <ref> [2] </ref> is based on the same assumptions as binocular uniqueness. In the trinocular uniqueness constraint we assume that the valid matches found both vertically and horizontally for a given edge should correspond to a single scene feature (i.e. a point).
References-found: 2

