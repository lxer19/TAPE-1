URL: http://www.cs.umn.edu/Users/dept/users/CS8199/TclProp.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/CS8199/
Root-URL: http://www.cs.umn.edu
Title: Abstract  
Abstract: TclProp is a data propagation formula manager for Tcl and Tk. It supports and enforces one-way declarative relationships among variables. If, for example, we enter the formula A = B + C, whenever B or C changes, A is also updated to reect the new sum. TclProp also supports triggers -- code to be executed when one of a set of variables changes. And, TclProp includes a mechanism for linking variables to object attributes (e.g., the enabled/disabled status of a button) so these attributes can be used in formulas and triggers. This paper presents an example of how data propagation formulas can simplify programming and presents the design and implementation of TclProp 1.0, an implementation built in Tcl. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> B. A. Myers, et.al., </author> <title> Comprehensive Support for Graphical, Highly-Interactive User Interfaces: The Garnet User Interface Development Environment, </title> <booktitle> IEEE Computer, </booktitle> <month> November </month> <year> 1990. </year>
Reference-contexts: Whenever a variable or attribute changes, the system automatically re-evaluates the appropriate functions to update dependent values. This style of declarative programming has proven to be extremely useful in Lisp-based systems such as Garnet <ref> [1] </ref> and Picasso [2], but has generally not existed in C-based systems. This paper presents the design and implementation of TclProp, a data-propagation formula manager for Tcl and Tk [3].
Reference: 2. <author> L.A. Rowe, et. al. </author> <title> The Picasso Application Framework, </title> <booktitle> Proceedings of ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <address> Hilton Head, SC, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: Whenever a variable or attribute changes, the system automatically re-evaluates the appropriate functions to update dependent values. This style of declarative programming has proven to be extremely useful in Lisp-based systems such as Garnet [1] and Picasso <ref> [2] </ref>, but has generally not existed in C-based systems. This paper presents the design and implementation of TclProp, a data-propagation formula manager for Tcl and Tk [3].
Reference: 3. <author> J.K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: This style of declarative programming has proven to be extremely useful in Lisp-based systems such as Garnet [1] and Picasso [2], but has generally not existed in C-based systems. This paper presents the design and implementation of TclProp, a data-propagation formula manager for Tcl and Tk <ref> [3] </ref>. The popularity of Tcl and Tk has grown tremendously since their introduction, in a large part because of the ease with which applications can be constructed using Tcl scripts and Tk widgets.
Reference: 4. <author> I. E. Sutherland. </author> <title> Sketchpad: a Man-Machine Graphical Communication System, </title> <booktitle> AFIPS Summer Joint Computer Conference, </booktitle> <year> 1963. </year>
Reference-contexts: The remaining sections discuss our experiences with TclProp 1.0, including performance results, and present our plans for future work in this area. Background and Motivation There has been a long history of constraint-based programming starting with Sutherlands Sketchpad in the early 1960s <ref> [4] </ref> and stretching through Thinglab and Thinglab II [5, 6] and later systems with more advanced constraint models [7]. These systems define a network of constraints, i.e., relationships among values, that would be solved to find a set of values that satisfied the constraints.
Reference: 5. <author> A. H. Boring and R. Duisberg. </author> <title> Constraint-Based Tools for Building User Interfaces, </title> <journal> ACM Transac tions on Graphics, </journal> <month> October </month> <year> 1986. </year>
Reference-contexts: Background and Motivation There has been a long history of constraint-based programming starting with Sutherlands Sketchpad in the early 1960s [4] and stretching through Thinglab and Thinglab II <ref> [5, 6] </ref> and later systems with more advanced constraint models [7]. These systems define a network of constraints, i.e., relationships among values, that would be solved to find a set of values that satisfied the constraints.
Reference: 6. <author> J. Maloney, et.al. </author> <title> Constraint technology for user interface construction in Thinglab II, </title> <booktitle> Proceedings of the 1989 ACM Conference on Object Oriented Programming systems, Languages, and Applications, </booktitle> <address> New Orleans, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: Background and Motivation There has been a long history of constraint-based programming starting with Sutherlands Sketchpad in the early 1960s [4] and stretching through Thinglab and Thinglab II <ref> [5, 6] </ref> and later systems with more advanced constraint models [7]. These systems define a network of constraints, i.e., relationships among values, that would be solved to find a set of values that satisfied the constraints.
Reference: 7. <author> M. Sannella. </author> <title> Sky Blue: A Multi-Way Local Propagation Constraint Solver for User Interface Construction Proceedings ACM SIGGRAPH Symposium on User Interface Software and Technology, </title> <month> November </month> <year> 1994. </year>
Reference-contexts: Tk directly provides all of the features needed to implement many application * This work was supported in part by grants from the National Science Foundation <ref> (IRI-9410470) </ref> and the Graduate School of the University of Minnesota. interfaces through its widgets, geometry managers, event binding mechanism, and event handling loop. <p> Background and Motivation There has been a long history of constraint-based programming starting with Sutherlands Sketchpad in the early 1960s [4] and stretching through Thinglab and Thinglab II [5, 6] and later systems with more advanced constraint models <ref> [7] </ref>. These systems define a network of constraints, i.e., relationships among values, that would be solved to find a set of values that satisfied the constraints. If no such set of values exists, the constraint solver TclProp: A Data-Propagation Formula Manager for Tcl and Tk * Sunanda Iyengar Joseph A.
Reference: 8. <author> B. C. Smith, </author> <title> et.al. </title> <booktitle> Tcl Distributed Programming, Proc. of the 1993 Tcl/TK Workshop, </booktitle> <address> Berkeley, CA, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: To this end, we are also implementing formulas involving slots of Tcl-DP shared objects <ref> [8] </ref>. We are also actively monitoring the progress of object extensions to Tcl to determine whether they warrant and can support an implementation of TclProp. Second, we are investigating the performance benefits of moving the main implementation to C.
Reference: 9. <author> B. Vander Zanden, et.al. </author> <title> The importance of Pointer Variables in Constraint Models, </title> <booktitle> Proceedings of ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <address> Hilton Head, SC, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: Finally, we plan to explore adding more advanced constraint-handling techniques to TclProp. The simple model implemented here can be extended in many ways including support for indirect constraints through pointer variables <ref> [9] </ref>, support for locking variables, and support for multi-way inequality constraints. We do not expect all of these to apply to Tcl variables in general (particularly global variables), but they may apply to objects constructed in Tcl. TclProp 1.0 is available for public use.
References-found: 9

