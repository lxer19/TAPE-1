URL: http://www.cs.tamu.edu/research/robotics/Amato/Papers/3dhull-logn.algor.preprint.ps.gz
Refering-URL: http://www.cs.tamu.edu/faculty/amato/dsmft/publications.html
Root-URL: http://www.cs.tamu.edu
Email: email: franco@cs.brown.edu email: amato@cs.uiuc.edu  
Title: A Time-Optimal Parallel Algorithm for 3D Convex Hulls  
Author: Nancy M. Amato Franco P. Preparata 
Note: a parallel algorithm for this problem that does not follow the traditional paradigm.  
Address: Box 1910 1308 W. Main St. Providence, RI 02912 Urbana, IL 61801  
Affiliation: Coordinated Science Laboratory and Department of Computer Science Department of Computer Science Brown University University of Illinois  
Abstract: In this paper we present an O( 1 ff log n) time parallel algorithm for computing the convex hull of n points in &lt; 3 . This algorithm uses O(n 1+ff ) processors on a CREW PRAM, for any constant 0 &lt; ff 1. So far, all adequately documented parallel algorithms proposed for this problem use time at least O(log 2 n). In addition, the algorithm presented here is the first parallel algorithm for the three-dimensional convex hull problem that is not based on the serial divide-and-conquer algorithm of Preparata and Hong, whose crucial operation is the merging of the convex hulls of two linearly separated point sets. The contributions of this paper are therefore (i) an O(log n) time parallel algorithm for the three-dimensional convex hull problem, and (ii) 
Abstract-found: 1
Intro-found: 1
Reference: [ACG + 88] <author> A. Aggarwal, B. Chazelle, L. Guibas, C. O'Dunlaing, and C. Yap. </author> <title> Parallel computational geometry. </title> <journal> Algorithmica, </journal> <volume> 3 </volume> <pages> 293-327, </pages> <year> 1988. </year>
Reference-contexts: Although there exist several optimal serial algorithms for this problem when d = 2 (refer, e.g., to [Gra72, And79]) and d = 3 [PH77], optimal parallel algorithms are known only for d = 2 <ref> [AG86, ACG + 88, AG88, MS88, Che90] </ref>. <p> When working in &lt; 3 , several parallel algorithms have been proposed: the first due to Chow [Cho80] required O (log 3 n) time and O (n) processors, Aggarwal et al. <ref> [ACG + 88] </ref> proposed a new algorithm with these same time and processor bounds, Dadoun and Kirkpatrick [DK89] implemented the algorithm of Aggarwal et al. more efficiently, and Amato and Preparata [AP92] gave an algorithm using O (log 2 n) time and O (n) processors. <p> reported in [PDW92], which outlines a (substantially different) technique claimed to achieve the same time and processor complexities as the one we present here. 3 parallel algorithms (see, e.g., [JaJ92, Rei93]), and is sometimes referred to as many-way divide--and-conquer; for example, the optimal parallel planar convex hull algorithms mentioned above <ref> [AG86, ACG + 88, AG88, MS88] </ref> employ this technique. Our approach greatly alters the overall strategy of the merging phase of the algorithm as follows. <p> The optimal O (log m) time parallel planar convex hull algorithms <ref> [AG86, ACG + 88, AG88, MS88] </ref> can be adapted to construct the spherical polygon (R v ). <p> For the sake of completeness, we sketch the adapted version of the optimal CREW PRAM planar convex hull algorithm that was discovered independently by Atallah and Goodrich [AG86] and Aggarwal et al. <ref> [ACG + 88] </ref>. <p> Although the optimal EREW PRAM planar convex hull algorithm of Miller and Stout [MS88] can easily be adapted to the present scenario, we omit the details since it is slightly more complicated than the CREW algorithms <ref> [AG86, ACG + 88] </ref> and because the algorithm described in the next section also requires a CREW PRAM version of CLASSIFY. The computation of (R v ), and thus of CH (R v ), is now described. <p> CLASSIFY (v; S) can be implemented in O (log n) time using O (n) processors on a CREW PRAM (adapted from the optimal O (log n) time CREW PRAM planar convex hull algorithm due to Atallah and Goodrich [AG86] and Aggarwal et al. <ref> [ACG + 88] </ref>). <p> All other deterministic parallel algorithms for this problem (i.e., <ref> [Cho80, ACG + 88, DK89, AP92, Goo93] </ref>) have time bounds of at least O (log 2 n).
Reference: [AG86] <author> M. J. Atallah and M. T. Goodrich. </author> <title> Efficient parallel solutions to some geometric problems. </title> <journal> J. Parallel Distrib. Comput., </journal> <volume> 3 </volume> <pages> 492-507, </pages> <year> 1986. </year>
Reference-contexts: Although there exist several optimal serial algorithms for this problem when d = 2 (refer, e.g., to [Gra72, And79]) and d = 3 [PH77], optimal parallel algorithms are known only for d = 2 <ref> [AG86, ACG + 88, AG88, MS88, Che90] </ref>. <p> reported in [PDW92], which outlines a (substantially different) technique claimed to achieve the same time and processor complexities as the one we present here. 3 parallel algorithms (see, e.g., [JaJ92, Rei93]), and is sometimes referred to as many-way divide--and-conquer; for example, the optimal parallel planar convex hull algorithms mentioned above <ref> [AG86, ACG + 88, AG88, MS88] </ref> employ this technique. Our approach greatly alters the overall strategy of the merging phase of the algorithm as follows. <p> The optimal O (log m) time parallel planar convex hull algorithms <ref> [AG86, ACG + 88, AG88, MS88] </ref> can be adapted to construct the spherical polygon (R v ). <p> For the sake of completeness, we sketch the adapted version of the optimal CREW PRAM planar convex hull algorithm that was discovered independently by Atallah and Goodrich <ref> [AG86] </ref> and Aggarwal et al. [ACG + 88]. <p> Although the optimal EREW PRAM planar convex hull algorithm of Miller and Stout [MS88] can easily be adapted to the present scenario, we omit the details since it is slightly more complicated than the CREW algorithms <ref> [AG86, ACG + 88] </ref> and because the algorithm described in the next section also requires a CREW PRAM version of CLASSIFY. The computation of (R v ), and thus of CH (R v ), is now described. <p> CLASSIFY (v; S) can be implemented in O (log n) time using O (n) processors on a CREW PRAM (adapted from the optimal O (log n) time CREW PRAM planar convex hull algorithm due to Atallah and Goodrich <ref> [AG86] </ref> and Aggarwal et al. [ACG + 88]).
Reference: [AG88] <author> M. J. Atallah and M. T. Goodrich. </author> <title> Parallel algorithms for some functions of two convex polygons. </title> <journal> Algorithmica, </journal> <volume> 3 </volume> <pages> 535-548, </pages> <year> 1988. </year>
Reference-contexts: Although there exist several optimal serial algorithms for this problem when d = 2 (refer, e.g., to [Gra72, And79]) and d = 3 [PH77], optimal parallel algorithms are known only for d = 2 <ref> [AG86, ACG + 88, AG88, MS88, Che90] </ref>. <p> reported in [PDW92], which outlines a (substantially different) technique claimed to achieve the same time and processor complexities as the one we present here. 3 parallel algorithms (see, e.g., [JaJ92, Rei93]), and is sometimes referred to as many-way divide--and-conquer; for example, the optimal parallel planar convex hull algorithms mentioned above <ref> [AG86, ACG + 88, AG88, MS88] </ref> employ this technique. Our approach greatly alters the overall strategy of the merging phase of the algorithm as follows. <p> The optimal O (log m) time parallel planar convex hull algorithms <ref> [AG86, ACG + 88, AG88, MS88] </ref> can be adapted to construct the spherical polygon (R v ).
Reference: [And79] <author> A. M. Andrew. </author> <title> Another efficient algorithm for convex hulls in two dimensions. </title> <journal> Inform. Process. Lett., </journal> <volume> 9(5) </volume> <pages> 216-219, </pages> <year> 1979. </year>
Reference-contexts: The sequential complexity of computing the convex hull of a set S of n points in &lt; d , d 2, is known to be (n log n) (see, e.g., [PS85]). Although there exist several optimal serial algorithms for this problem when d = 2 (refer, e.g., to <ref> [Gra72, And79] </ref>) and d = 3 [PH77], optimal parallel algorithms are known only for d = 2 [AG86, ACG + 88, AG88, MS88, Che90].
Reference: [AP92] <author> N. M. Amato and F. P. Preparata. </author> <title> The parallel 3D convex hull problem revisited. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 2(2) </volume> <pages> 163-173, </pages> <year> 1992. </year>
Reference-contexts: the first due to Chow [Cho80] required O (log 3 n) time and O (n) processors, Aggarwal et al. [ACG + 88] proposed a new algorithm with these same time and processor bounds, Dadoun and Kirkpatrick [DK89] implemented the algorithm of Aggarwal et al. more efficiently, and Amato and Preparata <ref> [AP92] </ref> gave an algorithm using O (log 2 n) time and O (n) processors. It is only recently that an optimal O (log 2 n) time parallel algorithm for the three-dimensional convex hull problem was obtained by Goodrich [Goo93]. <p> Lemma 3.1 establishes the correctness of MERGE, and thus, we now turn our attention to its complexity. We recall that the O (log 2 n) time, O (n) processor CREW PRAM algorithm of <ref> [AP92] </ref> for computing the convex hull of an arbitrary point set in &lt; 3 , uses a bisect-and-conquer strategy in which, at each of O (log n) stages, two separable convex hulls, CH (P ) and CH (Q), are merged in O (log n) time to form CH (S) = CH <p> There are a couple data structures which meet these requirements: the three-dimensional extension of the bridged separator tree [LP77, EGS86] introduced by Tamassia and Vitter [TV91, TV90], and the hierarchical representation [DK90] as optimized by Cole and Zajicek [CZ90]. The technique used to accomplish the merging process in <ref> [AP92] </ref> determines, for each edge e 2 CH (P ) [ CH (Q), whether or not e is an internal, external, or seam edge of CH (CH (P ) [ CH (Q)); these classifications can clearly be used to determine whether or not a vertex is internal, e-external or s-external to <p> Thus, the merging process of <ref> [AP92] </ref> can be used to implement Step 1 of MERGE; since there are O (n 2ff ) pairwise merges of convex hulls each of size O (n 1ff ), Step 1 requires O (log n 1ff ) time using O (n 2ff n 1ff ) = O (n 1+ff ) processors. <p> We note that although we can afford to make n ff copies of the point set, we cannot implement this algorithm on an EREW PRAM because the algorithm <ref> [AP92] </ref> used for the pairwise merges in Step 1 requires concurrent reads. <p> All other deterministic parallel algorithms for this problem (i.e., <ref> [Cho80, ACG + 88, DK89, AP92, Goo93] </ref>) have time bounds of at least O (log 2 n).
Reference: [AP93] <author> N. M. Amato and F. P. Preparata. </author> <title> An NC 1 parallel 3D convex hull algorithm. </title> <booktitle> In Proc. 9th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 289-297, </pages> <year> 1993. </year>
Reference: [CDR86] <author> S. A. Cook, C. Dwork, and R. Reischuk. </author> <title> Upper and lower time bounds for parallel random access machines without simultaneous writes. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 87-97, </pages> <year> 1986. </year>
Reference-contexts: This follows from (i) the fact that computing the convex hull of a planar point point set, even if the points are sorted by x-coordinate, is at least as hard as computing the "OR" function, and (ii) the work of Cook, Dwork, and Reischuk <ref> [CDR86] </ref> which established that computing the "OR" of n bits on an ideal CREW PRAM requires (log n) time regardless of the number of processors used.
Reference: [Che90] <author> D. Z. Chen. </author> <title> Efficient geometric algorithms in the EREW-PRAM. </title> <booktitle> In Proc. 28th Allerton Conf. Commun. Control Comput., </booktitle> <pages> pages 818-827, </pages> <year> 1990. </year> <month> 12 </month>
Reference-contexts: Although there exist several optimal serial algorithms for this problem when d = 2 (refer, e.g., to [Gra72, And79]) and d = 3 [PH77], optimal parallel algorithms are known only for d = 2 <ref> [AG86, ACG + 88, AG88, MS88, Che90] </ref>.
Reference: [Cho80] <author> A. L. Chow. </author> <title> Parallel algorithms for geometric problems. </title> <type> Ph.D. thesis, </type> <institution> Dept. Comput. Sci., Univ. Illinois, Urbana, IL, </institution> <year> 1980. </year>
Reference-contexts: When working in &lt; 3 , several parallel algorithms have been proposed: the first due to Chow <ref> [Cho80] </ref> required O (log 3 n) time and O (n) processors, Aggarwal et al. [ACG + 88] proposed a new algorithm with these same time and processor bounds, Dadoun and Kirkpatrick [DK89] implemented the algorithm of Aggarwal et al. more efficiently, and Amato and Preparata [AP92] gave an algorithm using O <p> All other deterministic parallel algorithms for this problem (i.e., <ref> [Cho80, ACG + 88, DK89, AP92, Goo93] </ref>) have time bounds of at least O (log 2 n).
Reference: [CM92] <author> B. Chazelle and J. Matousek. </author> <title> Derandomizing an output-sensitive convex hull algorithm in three dimensions. </title> <type> Technical report, </type> <institution> Dept. Comput. Sci., Princeton Univ., </institution> <year> 1992. </year>
Reference-contexts: Sequential output-sensitive convex hull algorithms are known. Kirkpatrick and Seidel [KS86] give an optimal O (n log h) planar convex hull algorithm. Edelsbrunner and Shi [ES91] established that O (n log 2 h) time is sufficient to find the convex hull in &lt; 3 . Subsequently, Chazelle and Matousek <ref> [CM92] </ref> have given an algorithm for the three-dimensional case that achieves optimal O (n log h) time; their algorithm is obtained by derandomizing the optimal O (n log h) algorithm of Clarkson and Shor [CS89].
Reference: [Col88] <author> R. Cole. </author> <title> Parallel merge sort. </title> <journal> SIAM J. Comput., </journal> <volume> 17(4) </volume> <pages> 770-785, </pages> <year> 1988. </year>
Reference-contexts: r m ) denote the cyclic list of rays in R v (ordered by polar angle around l v ); this ordered list can be constructed by sorting the m rays in R v by angular order in O (log m) time using O (m) processors on an EREW PRAM <ref> [Col88] </ref>. We partition this list into p m sublists, R 1 ; R 2 ; : : : ; R p m , each of size p m, so that R 1 follows R p m in the chosen order. <p> If all rays are found to be internal, then v is also internal. If v is external, then, as in the planar algorithm, a standard list ranking operation constructs the neighborhood of v. The sorting <ref> [Col88] </ref> and list ranking [KR90] operations of this step can be implemented on an EREW PRAM in O (log m) time using O (m) processors for each point of S. <p> It is not difficult to analyze the complexity of Algorithm 3.1. Recall that we can sort all points in S in O (log n) time with O (n) processors on an EREW PRAM using Cole's parallel merge sort <ref> [Col88] </ref>. <p> [ v2S fl A v can be as large as O (n 1+ff ), where the sets A v are as defined in Step 2; the sets A v can be formed by a simple sorting process in time O (log n 1+ff ) using O (n 1+ff ) processors <ref> [Col88] </ref>. Although a single set A v can be of size O (n), the CLASSIFY operations of Step 3 will require O (log n) time and O (n 1+ff ) processors in the aggregate because jAj = O (n 1+ff ).
Reference: [CS89] <author> K. L. Clarkson and P. W. Shor. </author> <title> Applications of random sampling in computational geometry, II. </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 </volume> <pages> 387-421, </pages> <year> 1989. </year>
Reference-contexts: Subsequently, Chazelle and Matousek [CM92] have given an algorithm for the three-dimensional case that achieves optimal O (n log h) time; their algorithm is obtained by derandomizing the optimal O (n log h) algorithm of Clarkson and Shor <ref> [CS89] </ref>.
Reference: [CZ90] <author> R. Cole and O. Zajicek. </author> <title> An optimal parallel algorithm for building a data structure for planar point location. </title> <journal> J. Parallel Distrib. Comput., </journal> <volume> 8 </volume> <pages> 280-285, </pages> <year> 1990. </year>
Reference-contexts: There are a couple data structures which meet these requirements: the three-dimensional extension of the bridged separator tree [LP77, EGS86] introduced by Tamassia and Vitter [TV91, TV90], and the hierarchical representation [DK90] as optimized by Cole and Zajicek <ref> [CZ90] </ref>.
Reference: [DK89] <author> N. Dadoun and D. G. Kirkpatrick. </author> <title> Parallel construction of subdivision hierarchies. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 39 </volume> <pages> 153-165, </pages> <year> 1989. </year>
Reference-contexts: When working in &lt; 3 , several parallel algorithms have been proposed: the first due to Chow [Cho80] required O (log 3 n) time and O (n) processors, Aggarwal et al. [ACG + 88] proposed a new algorithm with these same time and processor bounds, Dadoun and Kirkpatrick <ref> [DK89] </ref> implemented the algorithm of Aggarwal et al. more efficiently, and Amato and Preparata [AP92] gave an algorithm using O (log 2 n) time and O (n) processors. <p> All other deterministic parallel algorithms for this problem (i.e., <ref> [Cho80, ACG + 88, DK89, AP92, Goo93] </ref>) have time bounds of at least O (log 2 n).
Reference: [DK90] <author> D. P. Dobkin and D. G. Kirkpatrick. </author> <title> Determining the separation of preprocessed polyhedra a unified approach. </title> <booktitle> In Proc. 17th Internat. Colloq. Automata Lang. Program., volume 443 of Lecture Notes in Computer Science, </booktitle> <pages> pages 400-413. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Otherwise, as in the plane case, two supporting arcs (and two great circles) are needed to complete the merge. The sequential O (log p m) time technique of Dobkin and Kirkpatrick <ref> [DK90] </ref> for computing the common supporting lines to two convex polygons (each of size O ( p m)) can easily be adopted to perform the pairwise merges. <p> It is readily shown that v is external if and only if P (1) " P (2) 0 = ;, where P (2) 0 is the projection, through v, of P (2) on T 1 . This can be determined in time O (log n) with a single processor <ref> [DK90] </ref>. If v is external, then CH (R v ) can be constructed as follows. <p> There are a couple data structures which meet these requirements: the three-dimensional extension of the bridged separator tree [LP77, EGS86] introduced by Tamassia and Vitter [TV91, TV90], and the hierarchical representation <ref> [DK90] </ref> as optimized by Cole and Zajicek [CZ90].
Reference: [EGS86] <author> H. Edelsbrunner, L. J. Guibas, and J. Stolfi. </author> <title> Optimal point location in a monotone subdivision. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 317-340, </pages> <year> 1986. </year>
Reference-contexts: There are a couple data structures which meet these requirements: the three-dimensional extension of the bridged separator tree <ref> [LP77, EGS86] </ref> introduced by Tamassia and Vitter [TV91, TV90], and the hierarchical representation [DK90] as optimized by Cole and Zajicek [CZ90].
Reference: [ES91] <author> H. Edelsbrunner and W. Shi. </author> <title> An O(n log 2 h) time algorithm for the three-dimensional convex hull problem. </title> <journal> SIAM J. Comput., </journal> <volume> 20 </volume> <pages> 259-277, </pages> <year> 1991. </year>
Reference-contexts: Sequential output-sensitive convex hull algorithms are known. Kirkpatrick and Seidel [KS86] give an optimal O (n log h) planar convex hull algorithm. Edelsbrunner and Shi <ref> [ES91] </ref> established that O (n log 2 h) time is sufficient to find the convex hull in &lt; 3 .
Reference: [GG91] <author> M. Ghouse and M. T. Goodrich. </author> <title> In-place techniques for parallel convex hull algorithms. </title> <booktitle> In Proc. 3rd ACM Sympos. Parallel Algorithms Architect., </booktitle> <pages> pages 192-203, </pages> <year> 1991. </year>
Reference-contexts: Goodrich and Ghouse <ref> [GG91] </ref> give randomized algorithms for the CRCW PRAM that solve the two-dimensional convex hull problem in O (log n) time while performing O (n log h) work, and the three-dimensional version in O (log 2 n) time while performing O (minfn log 2 h; n log ng) work; for both algorithms
Reference: [Goo93] <author> M. T. Goodrich. </author> <title> Geometric partitioning made easier, even in parallel. </title> <booktitle> In Proc. 9th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 73-82, </pages> <year> 1993. </year>
Reference-contexts: It is only recently that an optimal O (log 2 n) time parallel algorithm for the three-dimensional convex hull problem was obtained by Goodrich <ref> [Goo93] </ref>. To date, there is no known efficient deterministic parallel algorithm for computing the convex hull of a three-dimensional point set in O (log n) time. <p> problem use at least O (log 2 n) time. 1 All traditional parallel algorithms for the three-dimensional convex hull problem are based on the serial divide-and-conquer algorithm of Preparata and Hong [PH77]. (Recent exceptions are the randomized algorithm of Reif and Sen [RS92], and its derandomized version due to Goodrich <ref> [Goo93] </ref>.) Let CH (S) denote the convex hull of the point set S. The serial algorithm for computing the convex hull of a point set S is outlined in Algorithm 1.1. Algorithm 1.1 Sequential-3D-Convex-Hull (S) Step 1. <p> All other deterministic parallel algorithms for this problem (i.e., <ref> [Cho80, ACG + 88, DK89, AP92, Goo93] </ref>) have time bounds of at least O (log 2 n). <p> In addition, this is the first deterministic parallel algorithm for the three-dimensional convex hull problem that does not employ the bisect-and-conquer paradigm of the optimal sequential algorithm of Preparata and Hong [PH77]; a recent exception is the work-optimal, O (log 2 n) time, algorithm due to Goodrich <ref> [Goo93] </ref>, which is obtained by derandomizing the time- and work-optimal randomized algorithm of Reif and Sen [RS92]. Our algorithm uses a many-way divide-and-conquer strategy to achieve optimal O (log n) time on an exclusive write PRAM.
Reference: [Gra72] <author> R. L. Graham. </author> <title> An efficient algorithm for determining the convex hull of a finite planar set. </title> <journal> Inform. Process. Lett., </journal> <volume> 1 </volume> <pages> 132-133, </pages> <year> 1972. </year>
Reference-contexts: The sequential complexity of computing the convex hull of a set S of n points in &lt; d , d 2, is known to be (n log n) (see, e.g., [PS85]). Although there exist several optimal serial algorithms for this problem when d = 2 (refer, e.g., to <ref> [Gra72, And79] </ref>) and d = 3 [PH77], optimal parallel algorithms are known only for d = 2 [AG86, ACG + 88, AG88, MS88, Che90].
Reference: [JaJ92] <author> J. JaJa. </author> <title> An Introduction to Parallel Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1992. </year>
Reference-contexts: This multi-partitioning scheme is a technique used in many 1 Related independent and concomitant research has been reported in [PDW92], which outlines a (substantially different) technique claimed to achieve the same time and processor complexities as the one we present here. 3 parallel algorithms (see, e.g., <ref> [JaJ92, Rei93] </ref>), and is sometimes referred to as many-way divide--and-conquer; for example, the optimal parallel planar convex hull algorithms mentioned above [AG86, ACG + 88, AG88, MS88] employ this technique. Our approach greatly alters the overall strategy of the merging phase of the algorithm as follows.
Reference: [KR90] <author> R. M. Karp and V. Ramachandran. </author> <title> Parallel algorithms for shared memory machines. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <pages> pages 869-941. </pages> <publisher> Elsevier/The MIT Press, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: the CREW PRAM model of parallel computation; the CREW PRAM is a shared memory model in which each shared memory location can be accessed in unit time and concurrent reads from (but not writes to) the same shared memory location are allowed (for details of the various PRAM models consult <ref> [KR90] </ref>). We note here that (log n) time is required to compute the convex hull of a d-dimensional point set, d 2, on an exclusive write PRAM, i.e., an EREW PRAM (no concurrent reads or writes) or a CREW PRAM. <p> If all rays are found to be internal, then v is also internal. If v is external, then, as in the planar algorithm, a standard list ranking operation constructs the neighborhood of v. The sorting [Col88] and list ranking <ref> [KR90] </ref> operations of this step can be implemented on an EREW PRAM in O (log m) time using O (m) processors for each point of S. From the preceding discussion, we conclude that the final merge step is implementable in O (log m) time with O (m) CREW PRAM processors.
Reference: [KS86] <author> D. G. Kirkpatrick and R. Seidel. </author> <title> The ultimate planar convex hull algorithm? SIAM J. </title> <journal> Comput., </journal> <volume> 15 </volume> <pages> 287-299, </pages> <year> 1986. </year>
Reference-contexts: Sequential output-sensitive convex hull algorithms are known. Kirkpatrick and Seidel <ref> [KS86] </ref> give an optimal O (n log h) planar convex hull algorithm. Edelsbrunner and Shi [ES91] established that O (n log 2 h) time is sufficient to find the convex hull in &lt; 3 .
Reference: [LP77] <author> D. T. Lee and F. P. Preparata. </author> <title> Location of a point in a planar subdivision and its applications. </title> <journal> SIAM J. Comput., </journal> <volume> 6 </volume> <pages> 594-606, </pages> <year> 1977. </year>
Reference-contexts: There are a couple data structures which meet these requirements: the three-dimensional extension of the bridged separator tree <ref> [LP77, EGS86] </ref> introduced by Tamassia and Vitter [TV91, TV90], and the hierarchical representation [DK90] as optimized by Cole and Zajicek [CZ90].
Reference: [MS88] <author> R. Miller and Q. F. Stout. </author> <title> Efficient parallel convex hull algorithms. </title> <journal> IEEE Trans. Comput., </journal> <volume> C-37(12):1605-1618, </volume> <year> 1988. </year> <month> 13 </month>
Reference-contexts: Although there exist several optimal serial algorithms for this problem when d = 2 (refer, e.g., to [Gra72, And79]) and d = 3 [PH77], optimal parallel algorithms are known only for d = 2 <ref> [AG86, ACG + 88, AG88, MS88, Che90] </ref>. <p> reported in [PDW92], which outlines a (substantially different) technique claimed to achieve the same time and processor complexities as the one we present here. 3 parallel algorithms (see, e.g., [JaJ92, Rei93]), and is sometimes referred to as many-way divide--and-conquer; for example, the optimal parallel planar convex hull algorithms mentioned above <ref> [AG86, ACG + 88, AG88, MS88] </ref> employ this technique. Our approach greatly alters the overall strategy of the merging phase of the algorithm as follows. <p> The optimal O (log m) time parallel planar convex hull algorithms <ref> [AG86, ACG + 88, AG88, MS88] </ref> can be adapted to construct the spherical polygon (R v ). <p> For the sake of completeness, we sketch the adapted version of the optimal CREW PRAM planar convex hull algorithm that was discovered independently by Atallah and Goodrich [AG86] and Aggarwal et al. [ACG + 88]. Although the optimal EREW PRAM planar convex hull algorithm of Miller and Stout <ref> [MS88] </ref> can easily be adapted to the present scenario, we omit the details since it is slightly more complicated than the CREW algorithms [AG86, ACG + 88] and because the algorithm described in the next section also requires a CREW PRAM version of CLASSIFY. <p> From the preceding discussion, we conclude that the final merge step is implementable in O (log m) time with O (m) CREW PRAM processors. The optimal O (log n) time EREW PRAM planar convex hull algorithm of Miller and Stout <ref> [MS88] </ref> is similar in flavor to the above sketched algorithm, but in order to avoid the concurrent accesses the point set is initially partitioned into n 1=4 groups each of size n 3=4 and the pairwise merges are accomplished in O (1) stages with a simple sampling process. <p> then first n copies of the point set S are made, and then each point is classified using one of the available copies of S and the EREW PRAM version of CLASSIFY (adapted from the optimal O (log n) time EREW PRAM planar convex hull algorithm of Miller and Stout <ref> [MS88] </ref>). <p> We let R (j) j = 1; 2. Using the algorithm of <ref> [MS88] </ref> we construct, in time O (log n) with O (n) processors on an EREW PRAM, the convex polygons P (j) = CH (R (j) v " T j ), j = 1; 2.
Reference: [PDW92] <author> W. Preilowski, E. Dahlhaus, and G. Wechsung. </author> <title> New parallel algorithms for convex hull and triangulation in 3-dimensional space. </title> <booktitle> In Proc. Internat. Sympos. Math. Found. Comput. Sci. (MFCS 1992), volume 629 of Lecture Notes in Computer Science, </booktitle> <pages> pages 442-450. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: This multi-partitioning scheme is a technique used in many 1 Related independent and concomitant research has been reported in <ref> [PDW92] </ref>, which outlines a (substantially different) technique claimed to achieve the same time and processor complexities as the one we present here. 3 parallel algorithms (see, e.g., [JaJ92, Rei93]), and is sometimes referred to as many-way divide--and-conquer; for example, the optimal parallel planar convex hull algorithms mentioned above [AG86, ACG +
Reference: [PH77] <author> F. P. Preparata and S. J. Hong. </author> <title> Convex hulls of finite sets of points in two and three dimensions. </title> <journal> Commun. ACM, </journal> <volume> 20 </volume> <pages> 87-93, </pages> <year> 1977. </year>
Reference-contexts: Although there exist several optimal serial algorithms for this problem when d = 2 (refer, e.g., to [Gra72, And79]) and d = 3 <ref> [PH77] </ref>, optimal parallel algorithms are known only for d = 2 [AG86, ACG + 88, AG88, MS88, Che90]. <p> on a CREW PRAM for the three-dimensional convex hull problem, whereas all prior deterministic 2 parallel algorithms for this problem use at least O (log 2 n) time. 1 All traditional parallel algorithms for the three-dimensional convex hull problem are based on the serial divide-and-conquer algorithm of Preparata and Hong <ref> [PH77] </ref>. (Recent exceptions are the randomized algorithm of Reif and Sen [RS92], and its derandomized version due to Goodrich [Goo93].) Let CH (S) denote the convex hull of the point set S. The serial algorithm for computing the convex hull of a point set S is outlined in Algorithm 1.1. <p> In addition, this is the first deterministic parallel algorithm for the three-dimensional convex hull problem that does not employ the bisect-and-conquer paradigm of the optimal sequential algorithm of Preparata and Hong <ref> [PH77] </ref>; a recent exception is the work-optimal, O (log 2 n) time, algorithm due to Goodrich [Goo93], which is obtained by derandomizing the time- and work-optimal randomized algorithm of Reif and Sen [RS92].
Reference: [PS85] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: an Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: Therefore, considerable research effort has focused on developing algorithms, both serial and parallel, for computing convex hulls. The sequential complexity of computing the convex hull of a set S of n points in &lt; d , d 2, is known to be (n log n) (see, e.g., <ref> [PS85] </ref>). Although there exist several optimal serial algorithms for this problem when d = 2 (refer, e.g., to [Gra72, And79]) and d = 3 [PH77], optimal parallel algorithms are known only for d = 2 [AG86, ACG + 88, AG88, MS88, Che90]. <p> Once we have determined the convex hull vertices, and their neighborhoods, it is a simple matter to form the standard doubly-connected-edge-list (DCEL) <ref> [PS85] </ref> representation of the convex hull; recall that in a DCEL we record, for each edge, its two endpoints v 1 and v 2 , the two faces incident to it, and the edges which follow it in a clockwise traversal around the edges incident to v 1 and v 2
Reference: [Rei93] <author> J. H. Reif, </author> <title> editor. Synthesis of Parallel Algorithms. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: This multi-partitioning scheme is a technique used in many 1 Related independent and concomitant research has been reported in [PDW92], which outlines a (substantially different) technique claimed to achieve the same time and processor complexities as the one we present here. 3 parallel algorithms (see, e.g., <ref> [JaJ92, Rei93] </ref>), and is sometimes referred to as many-way divide--and-conquer; for example, the optimal parallel planar convex hull algorithms mentioned above [AG86, ACG + 88, AG88, MS88] employ this technique. Our approach greatly alters the overall strategy of the merging phase of the algorithm as follows.
Reference: [RS92] <author> J. H. Reif and S. Sen. </author> <title> Optimal parallel randomized algorithms for three-dimensional convex hulls and related problems. </title> <journal> SIAM J. Comput, </journal> <volume> 21(3) </volume> <pages> 466-485, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: To date, there is no known efficient deterministic parallel algorithm for computing the convex hull of a three-dimensional point set in O (log n) time. However, Reif and Sen <ref> [RS92] </ref> give an optimal randomized algorithm that achieves O (log n) running time with probability 1 n c , where c 1 is a constant; Goodrich's optimal O (log 2 n) time deterministic parallel algorithm is obtained by using his new geometric partitioning technique to derandomize Reif and Sen's algorithm. <p> all prior deterministic 2 parallel algorithms for this problem use at least O (log 2 n) time. 1 All traditional parallel algorithms for the three-dimensional convex hull problem are based on the serial divide-and-conquer algorithm of Preparata and Hong [PH77]. (Recent exceptions are the randomized algorithm of Reif and Sen <ref> [RS92] </ref>, and its derandomized version due to Goodrich [Goo93].) Let CH (S) denote the convex hull of the point set S. The serial algorithm for computing the convex hull of a point set S is outlined in Algorithm 1.1. Algorithm 1.1 Sequential-3D-Convex-Hull (S) Step 1. <p> hull problem that does not employ the bisect-and-conquer paradigm of the optimal sequential algorithm of Preparata and Hong [PH77]; a recent exception is the work-optimal, O (log 2 n) time, algorithm due to Goodrich [Goo93], which is obtained by derandomizing the time- and work-optimal randomized algorithm of Reif and Sen <ref> [RS92] </ref>. Our algorithm uses a many-way divide-and-conquer strategy to achieve optimal O (log n) time on an exclusive write PRAM. Such an objective appears difficult to obtain using the bisect-and-conquer paradigm since it requires O (log n) merging phases. However, although time-optimal, the described algorithm is not work-optimal.
Reference: [TV90] <author> R. Tamassia and J. S. Vitter. </author> <title> Optimal cooperative search in fractional cascaded data structures. </title> <booktitle> In Proc. 2nd ACM Sympos. Parallel Algorithms Architect., </booktitle> <pages> pages 307-316, </pages> <year> 1990. </year> <note> To appear in Algorithmica. </note>
Reference-contexts: There are a couple data structures which meet these requirements: the three-dimensional extension of the bridged separator tree [LP77, EGS86] introduced by Tamassia and Vitter <ref> [TV91, TV90] </ref>, and the hierarchical representation [DK90] as optimized by Cole and Zajicek [CZ90].
Reference: [TV91] <author> R. Tamassia and J. S. Vitter. </author> <title> Parallel transitive closure and point location in planar structures. </title> <journal> SIAM J. Comput., </journal> <volume> 20(4) </volume> <pages> 708-725, </pages> <year> 1991. </year> <month> 14 </month>
Reference-contexts: There are a couple data structures which meet these requirements: the three-dimensional extension of the bridged separator tree [LP77, EGS86] introduced by Tamassia and Vitter <ref> [TV91, TV90] </ref>, and the hierarchical representation [DK90] as optimized by Cole and Zajicek [CZ90].
References-found: 32

