URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/ExprConMod.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Title: Expressiveness in Conceptual Data Modelling  Expressiveness in conceptual data modelling. Data Knowledge Engineering,  
Author: A.H.M. ter Hofstede Th.P. van der Weide A.H.M. ter Hofstede and Th.P. van der Weide. 
Date: February 1993.  
Note: Published as:  
Pubnum: 10(1):65-100,  
Abstract: Conceptual data modelling techniques aim at the representation of data at a high level of abstraction. The Conceptualisation Principle states that only those aspects are to be represented that deal with the meaning of the Universe of Discourse. Conventional conceptual data modelling techniques, as e.g. ER or NIAM, have to violate the Conceptualisation Principle when dealing with objects with a complex structure. In order to represent these objects conceptually irrelevant choices have to made. It is even worse: sometimes the Universe of Discourse has to be adapted to suit the modelling technique. These objects typically occur in domains as meta-modelling, hypermedia and CAD/CAM. In this paper extensions to an existing data modelling technique (NIAM) will be discussed and formally defined, that make it possible to naturally represent objects with complex structures without having to violate the Conceptualisation Principle. These extensions will be motivated from a practical point of view by examples and from a theoretical point of view by a comparison with the expressive power of formal set theory and grammar theory. Keywords. Conceptual data modelling, hypertext, object-role models, ER, NIAM, identifi cation.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul and R. Hull. </author> <title> IFO: A Formal Semantic Database Model. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(4) </volume> <pages> 525-565, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: There is no need to explicitly represent this subtype as a fact type since this can be derived from the supertype. Consequently, fact types and power types always act as pater familias. Our approach is in correspondence with the requirements as stated in <ref> [1] </ref>. ~ Carni vore ~ Omni vore ~ Herbi vore ~ Flesh-eater ~ Plant eater ~ Animal is-of has r r Type-of animal fcarnivore, omnivore, herbivoreg @ @I @ @I @ Example 2.1 In figure 10 we have the following specialisation hierarchy: Flesh-eater Spec Animal Plant-eater Spec Animal Carnivore Spec Flesh-eater <p> Therefore, a decision criterion as in the case of specialisation (the subtype defining rule) is not necessary. Furthermore, properties are inherited "upward" in a generalisation hierarchy instead of "downward", which is the case for specialisation (see also <ref> [1] </ref>). 7 This also implies that the identification of a generalised object type depends on the identification of its specifiers.
Reference: [2] <author> R. Bird and P. Wadler. </author> <title> Introduction to functional programming. </title> <publisher> Prentice Hall, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: An example of a virtual object would be an infinite list. In figure 26 a PSM schema modelling an infinite list is shown. ~ Base ~ ~ Infinite List 6 Virtual objects could be introduced as fruitful elements of computing (see for example <ref> [2] </ref>). In this paper however we restrict ourselves to non-virtual objects. A - & % Example 4.1 Figure 27 shows an example of an object type that is not structurally identifiable. In this figure A Gen B and Elt (B) = A.
Reference: [3] <author> P. van Bommel, A.H.M. ter Hofstede, and Th.P. van der Weide. </author> <title> Semantics and Verification of Object-Role Models. </title> <journal> Information Systems, </journal> <volume> 16(5) </volume> <pages> 471-495, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: For proper specialisation, it is required that subtypes be defined in terms of one or more of their supertypes. Such a decision criterion is referred to as the Subtype Defining Rule (see e.g. <ref> [3] </ref>). In figure 9 the subtype defining rule for Adult would be: Adult = Person has Age 18 Identification of subtypes is derived from their supertypes. Therefore if, in the ongoing example, Persons would be identified by a name, then Adults are also identified by the same name. <p> The signature of Spec implies that if a =2 A, then :a Spec b for any b. The definition of Spec therefore implies that only atomic object types can occur as subtypes. Specialisation as presented here is an extension of the concept of subtyping as presented in <ref> [3] </ref>, where only atomic object types can be specialised. <p> For their definition, which makes use of relational operators, such as projection, selection and unnesting, that are part of a relational algebra that has been introduced for PM, we refer to <ref> [3] </ref>. Appendix A contains a complete list of all types of constraints and their graphical representations. 2.4.1 Exclusion Constraint A power type may have the property that in any population all its instances are disjunct. This property can be expressed using the exclusion constraint. <p> The properties of an entity are recorded by the facts in which it plays a role. A population is weakly identified if all entity values with the same properties are equal. For a formal definition, we refer to <ref> [3] </ref>. Composite objects were introduced as tuples, and are identified by their components. This means that instances of fact types are equal if their components are equal. Power type instances are sets, which are identified by their elements. <p> If x is not pater familias (u (x) 6= x) then x takes (inherits) its identification from its pater familias (Identifiable (Pop (x))), provided that the subtype membership is decidable from the properties (constraints) of the schema. This latter is expressed in the schema by subtype defining rules (see <ref> [3] </ref>). A second case of identification inheritance arises from object generalisation. In this case the object type inherits its identification from some of its specifiers. <p> The following theorem demonstrates that we attained our purpose of guaranteeing weak identification from structural identification. The proof is straightforward, and analogous to the proof of the corresponding theorem in <ref> [3] </ref>. 23 Theorem 4.1 identifiable ) each population weakly identified Identifiability for power types or fact types, expresses whether they can be populated with non-virtual objects. An example of a virtual object would be an infinite list.
Reference: [4] <author> P.D. Bruza and Th.P. van der Weide. </author> <title> Two Level Hypermedia An Improved Architecture for Hypertext. </title> <editor> In A.M.Tjoa and R.Wagner, editors, </editor> <booktitle> Proceedings of the Data Base and Expert System Applications Conference (DEXA 90), </booktitle> <pages> pages 76-83. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: [5] <author> P.P. Chen. </author> <title> The Entity-Relationship Model: Toward a Unified View of Data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference: [6] <author> E.F. Codd. </author> <title> A Relational Model of Data for Large Shared Data Banks. </title> <journal> Communications ACM, </journal> <volume> 13(6):377 - 387, </volume> <year> 1970. </year>
Reference: [7] <author> J.N. Crossley, C.J. Ash, C.J. Brickhill, J.C. Stillwell, and N.H. Williams. </author> <note> What is mathematical logic? Oxford University Press, </note> <year> 1972. </year>
Reference-contexts: The approach is to compare the model with the axioms from formal set theory, the so-called Zermelo-Fraenkel system of axioms (see for example <ref> [7] </ref>). 3.1 Extensionality First we consider the Axiom of Extensionality, which states that a set is characterised by its elements: 8 z [z 2 x , z 2 y] ) x = y The axiom states that two sets, having the same elements, are equal. <p> The graphical constraints are, in general, not powerful enough for this purpose. 3.4 Power Type A special notion in formal set theory is the notion of power set. By applying a clever numbering schema for subsets (see <ref> [7] </ref>) it is easily shown that this concept is not derivable. The powerset is defined as: -(x) = y j y x The Power Set Axiom enforces the existence of this operator. This notion of power set corresponds to the notion of power type in PSM.
Reference: [8] <editor> E.D. Falkenberg. </editor> <title> Deterministic Entity-Relationship Modelling. </title> <type> Technical Report 88-13, </type> <institution> Department of Information Systems, University of Nijmegen, Nijmegen, </institution> <address> The Netherlands, </address> <year> 1988. </year>
Reference-contexts: The notion of power typing is the same as the notion of grouping as introduced in the IFO data model ([1]). This notion provides for a considerable extension of expressiveness. As an illustration of the expressive power of power types the chemical reactions example from <ref> [8] </ref> is discussed. The considered Universe of Discourse deals with simple chemical reactions.
Reference: [9] <author> E.D. Falkenberg and Th.P. van der Weide. </author> <title> Formal Description of the TOP Model. </title> <type> Technical Report 88-01, </type> <institution> Department of Information Systems, University of Nijmegen, Nijmegen, </institution> <address> The Netherlands, </address> <year> 1988. </year>
Reference: [10] <author> A.L. Furtado and E.J. Neuhold. </author> <title> Formal Techniques for Data Base Design. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: A state of the UffiD then corresponds to a so-called instantiation or population of the information structure, and vice versa. The idea of states was previously mentioned in <ref> [10] </ref>, [35], [31]. Furthermore, a state transition of the UffiD has a corresponding transition on populations of the information structure. This can be formulated as: The Universe of Discourse is isomorphic with the set of possible populations of the information structure and a transition relation hereupon.
Reference: [11] <editor> J.J. van Griethuysen, editor. </editor> <title> Concepts and Terminology for the Conceptual Schema and the Information Base. </title> <publisher> Publ. nr. </publisher> <address> ISO/TC97/SC5-N695, </address> <year> 1982. </year>
Reference: [12] <author> M. Harrison. </author> <title> Introduction to Formal Language Theory. </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1978. </year>
Reference-contexts: In the sequel we restrict ourselves to production rules with a non-empty right-hand side. This restriction is not very severe, as only the possibility of generating the empty string is lost (see for example <ref> [12] </ref>). The empty string would correspond to an information structure without object types. We describe the translation of a context-free grammar G into a PSM schema (G). Each symbol of G is interpreted as an atomic object type.
Reference: [13] <author> W.S. Hatcher. </author> <title> The Logical Foundations of Mathematics. </title> <publisher> Pergamon Press, </publisher> <year> 1982. </year>
Reference-contexts: No problems occur however, if A has another specifier C, which is identifiable. Note that B Gen A is not possible, as Gen is a relation over A fi O, while B 2 G. The problem of structural identification can also be related to predictive type theory (see <ref> [13] </ref>). Considering figure 27 it is clear that instances from object type B cannot be properly typed. Their types would have to be cyclic structures, while predictive type theory enforces types to be hierarchical structures.
Reference: [14] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Formalisation of techniques: chopping down the methodology jungle. </title> <journal> Information and Software Technology, </journal> <volume> 34(1) </volume> <pages> 57-65, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: In a later section, we will however see, that such cyclic structures are excluded if one requires structural identification. Structural identification is then considered a rule for well formedness of object types (see <ref> [14] </ref>). Fact types and power types are considered to be different concepts: (PSM1) F " G = ; due to the different interpretation that will be given to these concepts. There are two different sorts of atomic object types: entity types (E = A n L) and label types (L). <p> This technique is used in cases where a precise desciption is cumbersome. One then looks for an easy way to describe a superset, and exclude invalid elements by imposing constraints on the elements of the superset. For more information about formalisation, see <ref> [14] </ref>. In this section, we will restrict ourselves to some typical static constraints in relation to power typing. It should be noted that the constraints that were introduced for PM, including well-known constraints as e.g. the total role and the uniqueness constraint, are also applicable here.
Reference: [15] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Expressiveness in conceptual data modelling. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 10(1) </volume> <pages> 65-100, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: In the translation, generalised object types will play a crucial role. The reverse translation, describing how a PSM schema can be translated into a context-free grammar, can be found in <ref> [15] </ref>. We conclude with a larger example in which the syntactical description of path expressions, which form the basis of more advanced languages for data manipulation in the style of NIAM, is given. 6.1 Embedding Context-Free Grammars We start with the well-known definition of a context-free grammar.
Reference: [16] <author> R. Hull and R. King. </author> <title> Semantic Database Modelling: Survey, Applications and Research Issues. </title> <journal> Computing Surveys, </journal> <volume> 19(3) </volume> <pages> 201-260, </pages> <month> September </month> <year> 1987. </year>
Reference: [17] <author> R. Hunter, P. Kaijses, and F. Nielsen. </author> <title> ODA: a document architecture for open systems. </title> <journal> Computer Communications, </journal> <volume> 12(2) </volume> <pages> 69-79, </pages> <month> April </month> <year> 1989. </year>
Reference: [18] <author> ISO. </author> <title> Information Processing Text and Office Systems Standard General MarkUp Language (SGML). </title> <address> ISO8879, </address> <year> 1986. </year>
Reference: [19] <author> ISO. </author> <title> Information Processing Text and Office Systems Office Document Architecture (ODA) and interchange format, </title> <booktitle> Part 1,2,4,5,6,7,8. </booktitle> <address> ISO8613, </address> <year> 1989. </year>
Reference: [20] <author> D.E. Knuth. </author> <title> Fundamental Algorithms, </title> <booktitle> volume 1 of The Art of Computer Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1975. </year> <month> 37 </month>
Reference-contexts: Their types would have to be cyclic structures, while predictive type theory enforces types to be hierarchical structures. In some cases it may be difficult to establish whether object types fulfil the conditions of the predicate Identifiable. The following lemma, based upon topological sort (see <ref> [20] </ref>), may then be useful.
Reference: [21] <author> G.M. Kuper and M. Vardi. </author> <title> On the Expressive Power of the Logical Data Model. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 180-187, </pages> <address> Austin, Texas, 1985. </address> <publisher> ACM. </publisher>
Reference-contexts: The above example shows that generalisation can be used to define recursive object types. This is not possible in the IFO data model, where object types are hierarchical structures. In the Logical Data Model (see <ref> [21] </ref>) however, object types are directed graphs, which may contain cycles. As stated before, generalisation and specialisation are entirely different notions.
Reference: [22] <author> D. Maier. </author> <title> The Theory of Relational Databases. </title> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference: [23] <author> R. Meersman. </author> <title> The RIDL Conceptual Language. Research report, International Centre for Information Analysis Services, Control Data Belgium, </title> <publisher> Inc., </publisher> <address> Brussels, </address> <year> 1982. </year>
Reference-contexts: This derivation is a frame for the identification of x. 2 6.2 An Extended Example We conclude with an example that describes a relevant subset of the language RIDL, dealing with path expressions. This language was introduced as an "almost natural language" for the manipulation of NIAM schemata ([32], <ref> [23] </ref>). ~ P & % & % & % & % path expres sion and or - @ predi cator expres sion In object role models the concept of path expressions is introduced as a means for conveniently selecting specific sets of information.
Reference: [24] <author> B. Meyer. </author> <title> Introduction to the Theory of Programming Languages. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1990. </year>
Reference: [25] <author> G.M. Nijssen and T.A. Halpin. </author> <title> Conceptual Schema and Relational Database Design: a fact oriented approach. </title> <publisher> Prentice-Hall, </publisher> <address> Sydney, Australia, </address> <year> 1989. </year>
Reference: [26] <author> H.J. Schek and M.H. Scholl. </author> <title> The relational model with relation-valued attributes. </title> <journal> Information Systems, </journal> <volume> 11(2) </volume> <pages> 137-147, </pages> <year> 1986. </year>
Reference-contexts: This schema is better understood by studying a sample population (see figure 8). This sample population is in the style of nested relations as, encountered in the NF 2 datamodel <ref> [26] </ref>. The main difference is that NF 2 uses a nested table heading (and thus nested tuples). The solution of figure 8 also solves the update problem which was mentioned before. In this model a chemical reaction is denoted as a single object instance.
Reference: [27] <editor> G. Scheschonk. Eine auf Petri-Netzen basierende Konstruktions, </editor> <title> Analyse und (Teil)Verifica-tionsmethode zur Modellierungsunterstutzung bei der Entwicklung von Informationssystemen. </title> <type> PhD thesis, </type> <institution> Berlin University of Technology, </institution> <address> Berlin, Germany, </address> <year> 1984. </year>
Reference: [28] <author> J.M. Smith. </author> <title> Standard Generalized Markup Language and related standards. </title> <journal> Computer Communications, </journal> <volume> 12(2) </volume> <pages> 80-84, </pages> <month> April </month> <year> 1989. </year>
Reference: [29] <author> P.L. van der Spiegel, J.T.W. Driessen, P.D. Bruza, and Th.P. van der Weide. </author> <title> A Transaction Model for Hypertext. </title> <editor> In D. Karagiannis, editor, </editor> <booktitle> Proceedings of the Data Base and Expert System Applications Conference (DEXA 91), </booktitle> <pages> pages 281-286. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [30] <author> B. Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1987. </year>
Reference: [31] <author> O.M.F. de Troyer. </author> <title> On Rule-Based Generation of Conceptual Database Updates. </title> <booktitle> In Proceedings of the IFIP TC 2 Working Conference on Knowledge and Data, </booktitle> <year> 1986. </year>
Reference-contexts: A state of the UffiD then corresponds to a so-called instantiation or population of the information structure, and vice versa. The idea of states was previously mentioned in [10], [35], <ref> [31] </ref>. Furthermore, a state transition of the UffiD has a corresponding transition on populations of the information structure. This can be formulated as: The Universe of Discourse is isomorphic with the set of possible populations of the information structure and a transition relation hereupon.
Reference: [32] <author> O.M.F. de Troyer, R. Meersman, and F. Ponsaert. </author> <title> RIDL User Guide. Research report, International Centre for Information Analysis Services, Control Data Belgium, </title> <publisher> Inc., </publisher> <address> Brussels, </address> <year> 1984. </year>
Reference: [33] <author> O.M.F. de Troyer, R. Meersman, and P. Verlinden. </author> <title> RIDL* on the CRIS Case: A Workbench for NIAM. </title> <editor> In T.W. Olle, A.A. Verrijn-Stuart, and L. Bhabuta, editors, </editor> <booktitle> Computerized Assistance during the Information Systems Life Cycle, </booktitle> <pages> pages 375 - 459, </pages> <address> Amsterdam, The Netherlands, </address> <year> 1988. </year> <month> North-Holland/IFIP. </month>
Reference-contexts: Specialisation relations are organised in so-called specialisation "hierarchies". A specialisation hierarchy is in fact not a hierarchy in the strict sense, but an acyclic directed graph with a unique top. This top is referred to as the pater familias (see <ref> [33] </ref>). Objects inherit all properties from their ancestors in the specialisation hierarchy. This characteristic of specialisation excludes fact types and power types occurring as subtypes. Consider for 6 example the case that a ternary fact type is a subtype of a binary fact type. Clearly this leads to a contradiction.
Reference: [34] <author> T.F. Verhoef, A.H.M. ter Hofstede, and G.M. Wijers. </author> <title> Structuring modelling knowledge for CASE shells. </title> <editor> In R. Andersen, J.A. Bubenko, and A. Stlvberg, editors, </editor> <booktitle> Proceedings of the Third International Conference CAiSE'91 on Advanced Information Systems Engineering, volume 498 of Lecture Notes in Computer Science, </booktitle> <pages> pages 502-524, </pages> <address> Trondheim, Norway, </address> <month> May </month> <year> 1991. </year>
Reference: [35] <author> Y. Wand and R. Weber. </author> <title> An Ontological Analysis of some fundamental Information Systems Concepts. </title> <booktitle> In Proceedings of the Ninth International Conference on Information Systems, </booktitle> <pages> pages 213-226, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: A state of the UffiD then corresponds to a so-called instantiation or population of the information structure, and vice versa. The idea of states was previously mentioned in [10], <ref> [35] </ref>, [31]. Furthermore, a state transition of the UffiD has a corresponding transition on populations of the information structure. This can be formulated as: The Universe of Discourse is isomorphic with the set of possible populations of the information structure and a transition relation hereupon.
Reference: [36] <author> Th.P. van der Weide, A.H.M. ter Hofstede, and P. van Bommel. Uniquest: </author> <title> Determining the Semantics of Complex Uniqueness Constraints. </title> <journal> The Computer Journal, </journal> <volume> 35(2) </volume> <pages> 148-156, </pages> <month> April </month> <year> 1992. </year>
Reference: [37] <author> R.J. Welke. </author> <title> The CASE Repository: More than another database application. </title> <booktitle> In Proceedings of 1988 INTEC Symposium Systems Analysis and Design: A Research Strategy, </booktitle> <address> Atlanta, Georgia, </address> <year> 1988. </year>
Reference: [38] <author> J.J.V.R. Wintraecken. </author> <title> The NIAM Information Analysis Method: Theory and Practice. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1990. </year> <month> 39 </month>
Reference-contexts: A well accepted method for describing sets is the use of (formal) grammars. In fact, the information structure is sometimes also denoted as the grammar in terms of which the communication with the information system is formulated (see <ref> [38] </ref>). For information systems the description more closely follows the style of abstract datatypes. The information structure is described as a set of (elementary) fact types over a set of object types. A state then is a population (or instantiation) of these fact types.
References-found: 38

