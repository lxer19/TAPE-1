URL: http://www.win.tue.nl/cs/fm/Herman.Geuvers/OiOaanvraag.ps.gz
Refering-URL: http://www.win.tue.nl/cs/fm/Herman.Geuvers/
Root-URL: http://www.win.tue.nl
Title: Use and Meaning of Open Terms in Interactive Formal Problem Solving  
Author: . Applicants Dr. J.H. Geuvers 
Address: (Project Leader) P.O.Box 513, 5600 MB Eindhoven,  P.O.Box 513, 5600 MB Eindhoven,  
Affiliation: of Mathematics and Computer Science, TUE,  Faculty of Mathematics and Computer Science, TUE,  
Note: 1 Title, summary 1.1 Title  1.3 Institute where the research will take place 1.4 Summary of the Proposal  
Email: e-mail wsinrpn@win.tue.nl,  e-mail herman@win.tue.nl.  
Phone: tel. 040 2472718,  tel. 040 2472999  
Degree: Dr. R.P. Nederpelt Faculty  
Abstract: The AiO will be working in the Formal Methods group, in close cooperation with members of the Programming Methodology group, of the Faculty of Mathematics and Computer Science of the Eindhoven University of Technology. (Address see above.) The Formal Methods group is headed by Prof.dr. J.C.M. Baeten, who will also act as the first promotor. Abstract By formal problem solving, we mean problem solving where the problem and the possible solutions are stated in a precise way, and so is the notion of correctness, stating whether a solution solves a problem. Formal problem solving occurs in many places in computer science, like a program editor (where a program has to meet a specification), a structure editor (where syntactically correct expressions have to be built), verification (of protocols), testing, theorem proving and data bases (where information is extracted using queries). An important aspect of computer systems for problem solving is that they are interactive. The machine will in general not be able to solve our problems by itself; solving problems requires human-machine interaction. Ideally, one would let the computer construct a part of the solution, returning a `solution-with-holes', and then the user provides information on how to proceed to refine the holes. Such a hole in a `solution-with-holes' is also known as an open term: a term containing (a special kind of) variables, for which instantiations have to be found. In general, the formal meaning of these open terms is not very clear, but they work for the purpose of the human-machine interaction. We will investigate these open terms both from the perspective of usability, as from their meaning (in the underlying formal theory). Type Theory and Theorem Proving Fully automated theorem proving works only for specific classes of problems. A general purpose theorem prover is, almost by definition, an interactive program: the user constructs a proof for a certain theorem in an iterative process, together with the machine. Of course, one would like to get as much assistance as possible from the computer, not only in the automatization of the proof-search, but also in the administration of the problem. In practice this interaction with the formal problem solver works via so called goals that have to be fulfilled, using data from a specific context. In general, goals are of the following kind. * To prove a specific formula. * To construct an object (of a specific type) satisfying some specific property. In formal problem solving based on type theory, these two kinds of goals coincide: to solve a goal is to fill a hole in an expression (satisfying some side conditions). For example, if one wants to 
Abstract-found: 1
Intro-found: 1
Reference: [Barendregt 1992] <author> H.P. Barendregt, </author> <title> Lambda Calculi with Types. </title> <booktitle> In Handbook of Logic in Computer Science, </booktitle> <volume> Volume 2, </volume> <editor> eds. Abramsky et al., </editor> <publisher> Oxford Univ. Press, </publisher> <pages> pp. 117-309. </pages>
Reference: [Barthe and Geuvers 1996] <author> G. Barthe and J.H. </author> <title> Geuvers, Congruence Types, </title> <booktitle> in Computer Science Logic'95 , Paderborn, </booktitle> <address> Germany, </address> <year> 1995, </year> <title> Selected Papers, </title> <editor> ed. H. Kleine Buhning, </editor> <publisher> LNCS 1092, Springer, </publisher> <year> 1996, </year> <pages> pp. 36-51. </pages>
Reference-contexts: At this moment, research in automated theorem proving and type systems is still performed at both the practical and the theoretical level. For example, Geuvers studied possible extensions of type systems to make them more geared towards mathematical reasoning <ref> [Barthe and Geuvers 1996] </ref>, while Zwanenburg implemented his own (small) interactive theorem prover based on type theory. Oostdijk is studying the use of type systems and theorem provers for interactive mathematical documents. The research group consists of Dr. J.H. Geuvers, Dr. R.P. Nederpelt, Dr.ir. C. Hemerik, Dr. V.A.J.
Reference: [ALF 1994] <author> L. Magnusson, B. Nordstrom, </author> <title> The ALF proof editor and its proof engine, in Proceedings of the ESPRIT-BRA Workshop Types for Proofs and Programs, Nijmegen NL, </title> <editor> eds. H. Barendregt and T. Nipkow, </editor> <volume> LNCS 806, </volume> <year> 1994, </year> <pages> pp. 213-237. </pages>
Reference-contexts: In the system ALF <ref> [ALF 1994] </ref>, one proposes to bridge the gap between the implementation and the formal theory by designing a formal calculus that contains open terms. Then, a type checking algorithm should be able to operate on open terms, also in the types, which is not yet very well understood.
Reference: [Bloo 1997] <author> R. Bloo, </author> <title> Preservation of Termination for Explicit Substitution, </title> <type> Ph.D. thesis, </type> <institution> Eind-hoven University of Technology, Netherlands, </institution> <year> 1997. </year>
Reference-contexts: Typed calculi with explicit substitution appear in the literature at several places, e.g. in [Magnusson 1995] and [Mu~noz 1997]. Also at the TUE, some work has been done, notably by <ref> [Bloo 1997, Bloo and Geuvers 1997, Kamareddine and Nederpelt 1993] </ref>. All calculi of explicit substitution lack some technical properties that are necessary for adequately representing proofs with holes, so no definite answers have been given yet.
Reference: [Bloo and Geuvers 1997] <author> R. Bloo and H. </author> <title> Geuvers, Explicit Substitution: On the edge of Strong Normalization, </title> <note> to appear in Theoretical Computer Science, </note> <year> 1997. </year>
Reference-contexts: Typed calculi with explicit substitution appear in the literature at several places, e.g. in [Magnusson 1995] and [Mu~noz 1997]. Also at the TUE, some work has been done, notably by <ref> [Bloo 1997, Bloo and Geuvers 1997, Kamareddine and Nederpelt 1993] </ref>. All calculi of explicit substitution lack some technical properties that are necessary for adequately representing proofs with holes, so no definite answers have been given yet.
Reference: [de Bruijn 1980] <author> N.G. de Bruijn, </author> <title> A survey of the project Automath, In To H.B. Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism, </title> <editor> eds. J.P. Seldin, J.R. Hindley, </editor> <publisher> Academic Press, </publisher> <address> New York, </address> <pages> pp. 580-606. </pages>
Reference-contexts: an implementation of this formal system; publications on the formal system and the implementation. 6 2.6 Available Expertise TUE: The research group in Eindhoven has a long history in the study of interactive theorem provers based on type theory, starting from the work of De Bruijn on the Automath project <ref> [de Bruijn 1980, Nederpelt et al. 1994] </ref>. At this moment, research in automated theorem proving and type systems is still performed at both the practical and the theoretical level.
Reference: [COQ 1995] <author> C. Cornes, J. Courant, J.-C. Filliatre, G. Huet, P. Mannoury, C. Munoz, C. Murthy, C. Parent, C. Paulin-Mohring, A. Saibi, B. Werner, </author> <title> The Coq Proof Assistant Reference manual, </title> <note> Version 5.10, INRIA Rapport Technique 0177, </note> <month> July </month> <year> 1995. </year>
Reference-contexts: However, the underlying formal system does not talk about open terms and hence the connection between the implementation and the formal theory is not always clear. See 2.1.1 for a worked out example. At present this is solved in the systems Coq <ref> [COQ 1995] </ref> and Lego [LEGO 1992] by first constructing a closed term, using the tactics, and then type checking this closed term to make 3 sure it is indeed a term (proof) of the given type (formula).
Reference: [Coquand and Huet 1985] <author> Th. Coquand and G. Huet, </author> <title> Constructions: a higher order proof system for mechanizing mathematics. </title> <booktitle> Proceedings of EUROCAL '85, </booktitle> <address> Linz, </address> <publisher> LNCS 203. </publisher>
Reference: [Coscoy et al. 1995] <author> Y. Coscoy, G.Kahn and L.Thery, </author> <title> Extracting text from proofs, in Typed Lambda Calculus and Applications, </title> <editor> ed. M. Dezani-Ciancaglini, </editor> <publisher> LNCS 902, Springer, </publisher> <pages> pp. 109-123. </pages>
Reference: [Kamareddine and Nederpelt 1993] <author> F. Kamareddine and R. </author> <title> Nederpelt, On stepwise explicit substitution, </title> <booktitle> in Int. J. of Foundations of Computer Science, </booktitle> <volume> 4, </volume> <pages> pp. pp. 197-240. </pages>
Reference-contexts: Typed calculi with explicit substitution appear in the literature at several places, e.g. in [Magnusson 1995] and [Mu~noz 1997]. Also at the TUE, some work has been done, notably by <ref> [Bloo 1997, Bloo and Geuvers 1997, Kamareddine and Nederpelt 1993] </ref>. All calculi of explicit substitution lack some technical properties that are necessary for adequately representing proofs with holes, so no definite answers have been given yet.
Reference: [Geuvers 1995] <author> J.H. </author> <title> Geuvers, The Calculus of Constructions and Higher Order Logic, in The Curry-Howard isomorphism, ed. </title> <type> Ph. de Groote, </type> <institution> Volume 8 of the `Cahiers du Centre de logique' (Universite catholique de Louvain), Academia, </institution> <address> Louvain-la-Neuve (Belgium), </address> <pages> pp. 139-191. </pages>
Reference: [LEGO 1992] <author> Z. Luo and R. Pollack, </author> <title> The LEGO proof development system: user's manual, </title> <type> Tech--nical report, </type> <institution> University of Edinburgh, </institution> <year> 1992. </year>
Reference-contexts: However, the underlying formal system does not talk about open terms and hence the connection between the implementation and the formal theory is not always clear. See 2.1.1 for a worked out example. At present this is solved in the systems Coq [COQ 1995] and Lego <ref> [LEGO 1992] </ref> by first constructing a closed term, using the tactics, and then type checking this closed term to make 3 sure it is indeed a term (proof) of the given type (formula).
Reference: [Magnusson 1995] <author> L. Magnusson, </author> <title> The implementation of ALF A proof editor based on Martin-Lof's Monomorphic Type Theory with Explicit Substitutions, </title> <type> Ph.D. thesis, </type> <institution> Chalmers University, Goteborg, </institution> <year> 1995. </year>
Reference-contexts: Then, a type checking algorithm should be able to operate on open terms, also in the types, which is not yet very well understood. Typed calculi with explicit substitution appear in the literature at several places, e.g. in <ref> [Magnusson 1995] </ref> and [Mu~noz 1997]. Also at the TUE, some work has been done, notably by [Bloo 1997, Bloo and Geuvers 1997, Kamareddine and Nederpelt 1993].
Reference: [Mu~noz 1997] <author> C. Mu~noz, </author> <title> Un calcul de Substitutions pour la Representation de preuves Partielles en Theorie de Types, </title> <type> Ph.D. Thesis, </type> <institution> Univ. Paris VII, </institution> <year> 1997. </year>
Reference-contexts: Then, a type checking algorithm should be able to operate on open terms, also in the types, which is not yet very well understood. Typed calculi with explicit substitution appear in the literature at several places, e.g. in [Magnusson 1995] and <ref> [Mu~noz 1997] </ref>. Also at the TUE, some work has been done, notably by [Bloo 1997, Bloo and Geuvers 1997, Kamareddine and Nederpelt 1993]. All calculi of explicit substitution lack some technical properties that are necessary for adequately representing proofs with holes, so no definite answers have been given yet.
Reference: [Nederpelt et al. 1994] <editor> R.P. Nederpelt, J.H. Geuvers and R.C. de Vrijer (editors), </editor> <booktitle> Selected Papers on Automath, Volume 133 in Studies in Logic and the Foundations of Mathematics, </booktitle> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1994, </year> <pages> pp. 1024. </pages>
Reference-contexts: an implementation of this formal system; publications on the formal system and the implementation. 6 2.6 Available Expertise TUE: The research group in Eindhoven has a long history in the study of interactive theorem provers based on type theory, starting from the work of De Bruijn on the Automath project <ref> [de Bruijn 1980, Nederpelt et al. 1994] </ref>. At this moment, research in automated theorem proving and type systems is still performed at both the practical and the theoretical level.
Reference: [Nordstrom et al. 1990] <author> B. Nordstrom, K. Petersson, J.M. Smith, </author> <title> Programming in Martin-Lof's Type Theory, </title> <publisher> Oxford University Press. </publisher>
Reference: [NUPRL 1986] <author> R.L. Constable et.al., </author> <title> Implementing Mathematics with the Nuprl Proof Development System, </title> <publisher> Prentice-Hall. </publisher>
Reference: [Thery et al. 1992] <author> L. Thery, Y. Bertot and G. Kahn, </author> <title> Real Theorem Provers Deserve Real User-Interfaces, </title> <booktitle> The Fifth ACM Symposium on Software Development Environments (SDE5), </booktitle> <address> Washington D.C., </address> <year> 1992. </year> <month> 8 </month>
References-found: 18

