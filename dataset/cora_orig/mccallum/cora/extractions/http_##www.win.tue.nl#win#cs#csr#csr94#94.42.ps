URL: http://www.win.tue.nl/win/cs/csr/csr94/94.42.ps
Refering-URL: http://www.win.tue.nl/win/cs/csr/csr94.html
Root-URL: http://www.win.tue.nl
Email: email: engelfriet@rulwinw.leidenuniv.nl  email: janjoris@acm.org  
Title: Concatenation of Graphs  
Author: Joost Engelfriet Jan Joris Vereijken 
Date: September 27, 1994  
Address: P.O. Box 9512, NL-2300 RA Leiden, The Netherlands  P.O. Box 513, NL-5600 MB Eindhoven, The Netherlands  
Affiliation: Department of Computer Science, Leiden University,  Department of Computing Science, Eindhoven University of Technology,  
Abstract: An operation of concatenation is introduced for graphs. Then strings are viewed as expressions denoting graphs, and string languages are interpreted as graph languages. For a class K of string languages, IntK is the class of all graph languages that are interpretations of languages from K. For the class REG of regular languages, IntREG might be called the class of regular graph languages; it equals the class of graph languages generated by linear Hyperedge Replacement Systems. Two characterizations are given of the largest class K 0 such that IntK 0 IntK. Context-free graph languages are generated by context-free graph grammars, which are graph replacement systems. One of the most popular types of context-free graph grammar is the Hyperedge Replacement System, or HR grammar (see, e.g., [9]). A completely different way of generating graphs (introduced in [1]) is to select a number of graph operations, to generate a set of expressions (built from these operations), and to interpret the expressions as graphs. The set of expressions is generated by a classical context-free grammar generating strings (or a regular tree grammar). It is shown in [1] that, for a particular collection of graph operations, this new way of generating graphs is equivalent with the HR grammar. Other work on the generation of graphs through graph expressions is in, e.g., [2, 3, 4, 5, 11]. We introduce a new, natural operation on graphs (which is a simple variation of the graph operations in [1]). Due to its similarity to concatenation of strings, it is called concatenation of graphs. Together with the sum operation of graphs (as defined in [1]) and all constant graphs, a collection of graph operations is obtained that is simpler than the one in [1], but also has the power of the HR grammar (which is our first result). Let us be a bit more precise. We consider the multi-pointed graphs (or multi-pointed hypergraphs) of [9]. For simplicity we will restrict ourselves in this paper to graphs, but all arguments also hold for hypergraphs. A multi-pointed graph is a directed, edge-labeled graph g with a designated sequence beging of begin nodes and a designated 
Abstract-found: 1
Intro-found: 0
Reference: [1] <author> M. Bauderon, B. </author> <title> Courcelle; Graph expressions and graph rewritings, Math. </title> <booktitle> Syst. Theory 20 (1987), </booktitle> <pages> 83-127. </pages>
Reference: [2] <author> B. </author> <title> Courcelle; Graph rewriting: an algebraic and logic approach, </title> <booktitle> in Handbook of Theoretical Computer Science, </booktitle> <volume> Vol. </volume> <editor> B (J. van Leeuwen, ed.), </editor> <publisher> Elsevier, </publisher> <year> 1990, </year> <pages> pp. 193-242. </pages>
Reference: [3] <author> B. Courcelle, J. Engelfriet, G. </author> <title> Rozenberg; Handle-rewriting hypergraph languages, </title> <booktitle> JCSS 46 (1993), </booktitle> <pages> 218-270. 6 </pages>
Reference: [4] <author> F. </author> <note> Drewes; Transducibility symbolic computation by tree-transductions, University of Bremen, Bericht Nr. 2/93, </note> <year> 1993. </year>
Reference: [5] <author> J. </author> <title> Engelfriet; Graph grammars and tree transducers, </title> <booktitle> Proc. </booktitle> <editor> CAAP'94 (S. Tison, ed.), </editor> <booktitle> Lecture Notes in Computer Science 787, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994, </year> <pages> pp. 15-36. </pages>
Reference: [6] <author> J. Engelfriet, L.M. </author> <title> Heyker; The string generating power of context-free hypergraph grammars, </title> <booktitle> JCSS 43 (1991), </booktitle> <pages> 328-360. </pages>
Reference: [7] <author> J. Engelfriet, G. Rozenberg, G. </author> <title> Slutzki; Tree transducers, L systems, and two-way machines, </title> <booktitle> JCSS 20 (1980), </booktitle> <pages> 150-202. </pages>
Reference: [8] <author> S. </author> <title> Greibach; One-way finite visit automata, </title> <institution> Theor. Comput. Sci. </institution> <month> 6 </month> <year> (1978), </year> <pages> 175-221. </pages>
Reference: [9] <author> A. </author> <title> Habel; Hyperedge replacement: grammars and languages, </title> <booktitle> Lecture Notes in Computer Science 643, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference: [10] <author> V. </author> <title> Rajlich; Absolutely parallel grammars and two-way finite state transducers, </title> <booktitle> JCSS 6 (1972), </booktitle> <pages> 324-342. </pages>
Reference: [11] <author> J.J. </author> <title> Vereijken; Graph Grammars and Operations on Graphs, </title> <type> Master's Thesis, </type> <institution> Leiden University, </institution> <year> 1993. </year> <month> 7 </month>
References-found: 11

