URL: http://www.csc.calpoly.edu/~smeldal/adt94/adt.ps
Refering-URL: http://www.csc.calpoly.edu/~smeldal/tidbits.html
Root-URL: http://www.csc.calpoly.edu
Email: michal,sigurd-@ii.uib.no  
Title: Multialgebras, Power Algebras and Complete Calculi of Identities and Inclusions a slight modification of L
Author: Michal Walicki, Sigurd Meldal 
Note: is obtained by  
Affiliation: Department of Informatics, University of Bergen  
Abstract: After motivating the introduction of nondeterministic operators into algebraic specifications, a language L with two primitive predicates, identity and inclusion, for specifying nondeterministic operations is introduced. It is given a multialgebraic semantics which captures the singular (call-time-choice) strategy of passing nondeterministic parameters. A calculus NEQ, with restricted substitutivity rules, is introduced. NEQ is sound and complete wrt. the multialgebraic semantics. A language L + 
Abstract-found: 1
Intro-found: 1
Reference: <institution> 14 </institution>
Reference-contexts: This is expressed by the axiom: zxty a z=x, z=y. 4. Two examples Consider the problem of generating a depth-first traversal tree of nodes reachable from a particular node in a directed graph. The algorithm is found in standard algorithms textbooks (e.g. <ref> [14] </ref>), and is often given imperatively along the following lines (G is the graph, v is the start node, T is traversal tree being created and edges are ordered pairs of nodes): Example 4.1.a DFS (G,v) = begin T := fl; trav (G,v,T); return T; end; trav (G,v,T) = begin mark
Reference: [1] <author> Brock, J.D., Ackermann, W.B., </author> <title> Scenarios: A model of non-determinate computation, in Formalization of Programming Concepts, </title> <booktitle> LNCS, </booktitle> <volume> vol. 107, </volume> <publisher> Springer, </publisher> <year> 1981. </year>
Reference: [2] <author> Clinger, W., </author> <title> Nondeterministic call by need is neither lazy nor by name, </title> <booktitle> Proc. ACM Symp. LISP and Functional Programming, </booktitle> <pages> 226-234, </pages> <year> 1982. </year>
Reference: [3] <author> Engelfriet, J., Schmidt, </author> <title> E.M., IO and OI. 1, </title> <journal> Journal of Computer and System Sciences, </journal> <volume> vol. 15, </volume> <pages> 328-353, </pages> <year> 1977. </year>
Reference: [4] <author> Engelfriet, J., Schmidt, </author> <title> E.M., IO and OI. 2, </title> <journal> Journal of Computer and System Sciences, </journal> <volume> vol. 16, </volume> <pages> 67-99, </pages> <year> 1978. </year>
Reference: [5] <author> Goguen, J.A., Meseguer, J., </author> <title> Completeness of Many-Sorted Equational Logic, </title> <journal> SIGPLAN Notices, </journal> <volume> vol. 16, no. 7, </volume> <year> 1981. </year>
Reference: [6] <author> Goguen, J.A., Meseguer, J., </author> <title> Remarks on Remarks on Many-Sorted Equational Logic, </title> <journal> SIGPLAN Notices, </journal> <volume> vol. 22, no. 4, </volume> <pages> 41-48, </pages> <month> April </month> <year> 1987. </year>
Reference: [7] <author> Hennessy, M.C.B., </author> <title> The sema ntics of call-by-value and call-by-name in a nondeterministic environment, </title> <journal> SIAM J. Comput., </journal> <volume> vol. 9, no. 1, </volume> <year> 1980. </year>
Reference: [8] <author> Hesselink, </author> <title> W.H., A Mathematical Approach to Nondeterminism in Data Types, </title> <journal> ACM: Transactions on Programming Languages and Systems, </journal> <volume> vol. 10, </volume> <year> 1988. </year>
Reference: [9] <author> Hoare, </author> <title> C.A.R., Communicating Sequential Processes, </title> <publisher> Prentice-Hall International Ltd., </publisher> <year> 1985. </year>
Reference: [10] <author> Humann, H., </author> <title> Nondeterminism in Algebraic Specifications and Algebraic Programs, </title> <address> Birkhuser, </address> <year> 1993. </year>
Reference-contexts: Humann <ref> [10] </ref> has shown that even if we restrict L to simple for mulae such multimodels may not exist.
Reference: [11] <author> Huet, G., Oppen, D., </author> <title> Equations and Rewrit e Rules: A Survey, in Formal Language Theory: Perspectives and Open Problems, </title> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference: [12] <author> Kapur, D., </author> <title> Towards a theory of abstract data types , Ph.D. </title> <type> thesis, </type> <institution> Laboratory for CS, MIT, </institution> <year> 1980. </year>
Reference: [13] <author> Keller, </author> <title> R.M., Denotational models for parallel programs with indeterminate operators, in Formal Descriptions of Programming Concepts, </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1978. </year>
Reference: [14] <author> Manber, U., </author> <title> Introduction to Algorithms, </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: This is expressed by the axiom: zxty a z=x, z=y. 4. Two examples Consider the problem of generating a depth-first traversal tree of nodes reachable from a particular node in a directed graph. The algorithm is found in standard algorithms textbooks (e.g. <ref> [14] </ref>), and is often given imperatively along the following lines (G is the graph, v is the start node, T is traversal tree being created and edges are ordered pairs of nodes): Example 4.1.a DFS (G,v) = begin T := fl; trav (G,v,T); return T; end; trav (G,v,T) = begin mark
Reference: [15] <author> Meseguer, J., </author> <title> Conditional Rewriting Logic: Deduction, Models and Concurrency, </title> <booktitle> in Proceedings of CTRS'90, </booktitle> <volume> LNCS vol. 516, </volume> <year> 1990. </year>
Reference: [16] <author> Meseguer, J., </author> <title> Conditional rewriting logic as a unified model of concurrency, </title> <journal> TCS , no. </journal> <volume> 96, </volume> <pages> 73-155, </pages> <year> 1992. </year>
Reference: [17] <author> Milner, R., </author> <title> Communication and Concurrency, </title> <publisher> Prentice Hall International, </publisher> <year> 1989. </year>
Reference: [18] <author> Mosses, </author> <title> P.D., Unified Algebras and Action Semantics, </title> <booktitle> in STACS89, LNCS, </booktitle> <volume> vol. 349, </volume> <publisher> Springer, </publisher> <year> 1989. </year>
Reference: [19] <author> Mosses, </author> <title> P.D., Unified Algebras and Institutions, </title> <booktitle> in Proceedings of LICS89, Fourth Annual Symposium on Logic in Computer Science, </booktitle> <year> 1989. </year>
Reference: [20] <author> Nipkow, T., </author> <title> Nondeterministic Data Types: Models and Implementations, </title> <journal> Acta Informatica, </journal> <volume> vol. 22, 629 - 661, </volume> <year> 1986. </year>
Reference: [21] <author> Sndergaard, H., Sestoft, P., </author> <title> Non-Determinacy and Its Semantics , Tech. </title> <type> Rep. 86/12, </type> <institution> DatalogiskInstitut, Kbenhavns Universitet, </institution> <month> January </month> <year> 1987. </year>
Reference: [22] <author> Schwartz, </author> <title> R.L., An axiomatic treatment of ALGOL 68 routines, </title> <booktitle> in Proceedings of Sixth Colloquium on Automata, Languages and Programming, </booktitle> <volume> vol. 71, </volume> <publisher> Springer, </publisher> <year> 1979. </year>
Reference-contexts: In deterministic programming this distinction is well known. The former corresponds to the situation where the actual parameters to function calls are evaluated and passed as values. The latter allows parameters which are function expressions, passed by a kind of Algol copy rule <ref> [22] </ref>, and which are evaluated whenever a need for their value arises. Thus call-by-name will terminate in many cases when the value of a function may be determined without looking at (some of) the actual parameters, i.e., even if these parameters are unde fined.
Reference: [23] <author> Walicki, M., </author> <title> Algebraic Specifications of Nondeterminism , Ph.D. </title> <type> thesis, </type> <institution> University of Bergen, Department of Informatics, </institution> <year> 1993. </year>
Reference-contexts: Plural parameters, on the other hand, admit unrestricted substitution rules and, although semanti cally more complex, lead to simpler reasoning systems <ref> [23] </ref>. The above observations, together with the fact that the distinction has not received a thorough algebraic treatment, 1 motivate our investigation. In section 2 we give a general motivation for intro ducing nondeterministic operators as specification tools. <p> Again, the abstraction shows up as nondeterminism. It may be an interesting excercise for the reader to convince himself that the above specification yields the intended meaning for the M operator and does not lead to the classical merge-anomalies [1,13]. The example is discussed in more detail in <ref> [23] </ref>. Finally, we can mention that the close relation between nondeterministic terms and sets makes it possible to use the former to define and handle subsorting directly at the term level.
Reference: [24] <author> Walicki, M., </author> <title> Singular and Plural Nondeterministic Parameters: Multialgebras, Power Algebras and Complete Reasoning Systems, </title> <type> Tech. Rep. 96, </type> <institution> Institutt for Informatikk, Universitetet i Bergen, </institution> <year> 1994. </year> <month> 15 </month>
Reference-contexts: We also point out that plural variables can be used meaningfully to increase expressibility of the specification formalism even if all operations have only singular arguments. Because of the space limitations all proofs have been omitted from this presentation they can be found in <ref> [24] </ref>. 2. Nondeterministic operators as specification tools There are essentially two reasons why one might want to include the concept of nondeter-minism in the traditional algebraic specification methods: (1) Real nondeterminism.
References-found: 25

