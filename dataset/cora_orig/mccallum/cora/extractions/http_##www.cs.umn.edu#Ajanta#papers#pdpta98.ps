URL: http://www.cs.umn.edu/Ajanta/papers/pdpta98.ps
Refering-URL: http://www.cs.umn.edu/Ajanta/
Root-URL: http://www.cs.umn.edu
Title: Agent Server Architecture for the Ajanta Mobile-Agent System  
Author: Neeran M. Karnik and Anand R. Tripathi 
Keyword: Mobile agents, Distributed computing, Java, Security  
Address: Minneapolis, MN 55455  
Affiliation: Department of Computer Science, University of Minnesota  
Abstract: This paper provides an overview of Ajanta, a Java-based mobile-agent system, and focuses in particular on the architecture of the agent server - the process which hosts agents and enables them to access resources, communicate, migrate etc. The agent server's main components include an agent execution environment, an agent transfer protocol, a resource access protocol, and an agent monitoring service. Security is a major concern in the design of each of these services. The paper describes how a security architecture is integrated into the agent server design, and informally argues about its correctness based upon Java's security model. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Harrison, D. Chess, and A. Kershen-baum. </author> <title> Mobile Agents: Are they a good idea? Technical report, </title> <institution> IBM Research Division, T.J.Watson Research Center, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: It also helps optimize network bandwidth, by moving client code to network resources when appropriate, and permits increased asynchrony in client-server interactions <ref> [1] </ref>. Agents can provide value addition to existing services by dynamically extending their functionality. They can be used for electronic commerce, information search and filtering, network maintenance, testing, fault diagnosis and for software installation and upgrades on remote machines.
Reference: [2] <author> J. Gosling, W. Joy, and G. Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison-Wesley, </publisher> <month> August </month> <year> 1996. </year>
Reference-contexts: A set of such agent servers cooperatively implements the agent programming environment. Application programs can then create and dispatch agents to these servers, in order to access their resources. Agents are implemented in Ajanta as Java <ref> [2] </ref> objects which are active and mobile. An agent is active in the sense that it is assigned a thread which executes its code.
Reference: [3] <author> K. Sollins and L. Masinter. </author> <title> RFC 1737: Functional Requirements for Uniform Resource Names. </title> <note> http://www.cis.ohio-state.edu/htbin/rfc/rfc1737.html, Decem-ber 1994. </note>
Reference-contexts: These credentials are protected cryptographically, and are used by agent servers for access control. Each principal in Ajanta needs a globally unique name which allows location-independent access. We have adopted the Uniform Resource Name (URN) framework <ref> [3] </ref> for object naming and we are developing a name resolution service to suit our needs. 2.1 Agent Server Structure agent currently resident on it. Each agent server has an agent environment object, which acts as the interface between visiting agents and the server.
Reference: [4] <author> M. Shapiro. </author> <title> Structure and Encapsulation in Distributed Systems: The Proxy Principle. </title> <booktitle> In Proceedings of the 6th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 198-204, </pages> <year> 1986. </year>
Reference-contexts: Each resource must be allowed to define its own security policy, and control its implementation. Proxy-based Resource Access: In Ajanta, agents are not provided with direct references to resources we interpose a proxy <ref> [4] </ref> between a resource and its clients (i.e., agents). When an agent makes a request to access a resource, the server returns a proxy object, which contains a private reference to the actual resource. <p> In Ara [11], agent servers use access control lists (called "allowances") to impose restrictions on visiting agents. For protecting access to resources, our approach is based on the concept of proxies, which was first developed by Shapiro <ref> [4] </ref>. We use proxies to act as capabilities. A proxy may include the identity of the client, and thus act as an identity-based capability [6]. One of the contributions of our work lies in supporting proxy-based capabilities whose integrity can be assured based on Java's security model.
Reference: [5] <author> B.C. Neuman. </author> <title> Proxy-based authorization and accounting for distributed systems. </title> <booktitle> In Proceedings of the Thirteenth International Conference on Distributed Computing Systems, </booktitle> <pages> pages 283-291, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: A separate proxy is created for each agent, although the embedded resource may be shared if appropriate. This approach offers other advantages. One can embed usage-metering and accounting mechanisms <ref> [5] </ref> in a proxy. Also, even though the proxy is like a capability, we can limit its propagation from one agent to another by checking each invocation of the proxy to verify the protection domain to which it was originally granted.
Reference: [6] <author> Li Gong. </author> <title> A Secure Identity-Based Capability System. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 56-63, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: Also, even though the proxy is like a capability, we can limit its propagation from one agent to another by checking each invocation of the proxy to verify the protection domain to which it was originally granted. Thus, a proxy can act as an identity-based capability <ref> [6] </ref>. public interface Resource - // generic methods, common to all resources - public class ResourceImpl implements Resource - // implementations of the generic methods - public interface AccessProtocol - public Resource getProxy (Credentials cred); - Resource Access Protocol: Ajanta defines a Resource interface, and provides a ResourceImpl class which implements <p> For protecting access to resources, our approach is based on the concept of proxies, which was first developed by Shapiro [4]. We use proxies to act as capabilities. A proxy may include the identity of the client, and thus act as an identity-based capability <ref> [6] </ref>. One of the contributions of our work lies in supporting proxy-based capabilities whose integrity can be assured based on Java's security model. The protection scheme described in [12] has some conceptual similarities to our approach. Both schemes use proxy objects acting as capabilities, instead of direct access to resources.
Reference: [7] <author> R. Needham and M. Schroeder. </author> <title> Using Encryption for Authentication in Large Networks of Computers. </title> <journal> Communications of the ACM, </journal> <volume> 21(12) </volume> <pages> 993-999, </pages> <month> December </month> <year> 1978. </year>
Reference-contexts: If authentication of the caller is necessary, the proxy delivers an exception to the caller, which is expected to make another RMI call supplying its identity. Authentication then proceeds using a challenge-response mechanism using a random nonce <ref> [7] </ref>. 4.4 Potential Threats The scheme presented above is now examined against potential threats of various kinds of attacks. We introduce some additional rules, based on Java's security model, to guard against these threats and ensure the integrity of the scheme.
Reference: [8] <author> J. Tardo and L. Valente. </author> <title> Mobile Agent Security and Telescript. </title> <booktitle> In Proceedings of COMPCON Spring '96, </booktitle> <pages> pages 58-63, </pages> <year> 1996. </year>
Reference-contexts: Java does not allow the cloning of any object which does not implement this interface. 5 Related Work Most existing mobile-agent systems do not pay particular attention to security and robustness in their designs. Telescript <ref> [8] </ref> however has language-level mechanisms for security. It uses different types of permits for access control and for imposing quotas on resource use. Security mix-in classes can be used to protect objects from unauthorized modification, copying or migration. The Aglets Workbench [9] has only primitive security functionality.
Reference: [9] <author> G. Karjoth, D. Lange, and M. Oshima. </author> <title> A Security Model for Aglets. </title> <booktitle> IEEE Internet Computing, </booktitle> <pages> pages 68-77, </pages> <month> July-August </month> <year> 1997. </year>
Reference-contexts: Telescript [8] however has language-level mechanisms for security. It uses different types of permits for access control and for imposing quotas on resource use. Security mix-in classes can be used to protect objects from unauthorized modification, copying or migration. The Aglets Workbench <ref> [9] </ref> has only primitive security functionality. However a security architecture for this system has recently been proposed [9]. Agent Tcl [10] supports access control lists based on host names and uses PGP for encryption and authentication. <p> Security mix-in classes can be used to protect objects from unauthorized modification, copying or migration. The Aglets Workbench <ref> [9] </ref> has only primitive security functionality. However a security architecture for this system has recently been proposed [9]. Agent Tcl [10] supports access control lists based on host names and uses PGP for encryption and authentication. In Ara [11], agent servers use access control lists (called "allowances") to impose restrictions on visiting agents.
Reference: [10] <author> R. Gray. </author> <title> Agent Tcl: A flexible and secure mobile-agent system. </title> <booktitle> In Proceedings of the 4th Tcl/Tk Workshop, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: Security mix-in classes can be used to protect objects from unauthorized modification, copying or migration. The Aglets Workbench [9] has only primitive security functionality. However a security architecture for this system has recently been proposed [9]. Agent Tcl <ref> [10] </ref> supports access control lists based on host names and uses PGP for encryption and authentication. In Ara [11], agent servers use access control lists (called "allowances") to impose restrictions on visiting agents.
Reference: [11] <author> H. Peine and T. Stolpmann. </author> <title> The Architecture of the Ara Platform for Mobile Agents. </title> <booktitle> In Proceedings of the 1st International Workshop on Mobile Agents. </booktitle> <publisher> Springer Verlag, LNCS #1219, </publisher> <month> April </month> <year> 1997. </year>
Reference-contexts: The Aglets Workbench [9] has only primitive security functionality. However a security architecture for this system has recently been proposed [9]. Agent Tcl [10] supports access control lists based on host names and uses PGP for encryption and authentication. In Ara <ref> [11] </ref>, agent servers use access control lists (called "allowances") to impose restrictions on visiting agents. For protecting access to resources, our approach is based on the concept of proxies, which was first developed by Shapiro [4]. We use proxies to act as capabilities.
Reference: [12] <author> D. Hagimont and L. Ismail. </author> <title> A Protection Scheme for Mobile Agents on Java. </title> <booktitle> In Proceedings of the 3rd International Conference on Mobile Computing and Networking, </booktitle> <month> September </month> <year> 1997. </year>
Reference-contexts: A proxy may include the identity of the client, and thus act as an identity-based capability [6]. One of the contributions of our work lies in supporting proxy-based capabilities whose integrity can be assured based on Java's security model. The protection scheme described in <ref> [12] </ref> has some conceptual similarities to our approach. Both schemes use proxy objects acting as capabilities, instead of direct access to resources. In [12], the restricted interfaces of such proxy classes (called filters) are statically defined, independently by clients and servers. <p> The protection scheme described in <ref> [12] </ref> has some conceptual similarities to our approach. Both schemes use proxy objects acting as capabilities, instead of direct access to resources. In [12], the restricted interfaces of such proxy classes (called filters) are statically defined, independently by clients and servers. These filters are integrated with the resource interface definitions; this allows the system to automatically create and interpose appropriate filter objects in client-server interactions.
References-found: 12

