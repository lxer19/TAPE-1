URL: http://www.cms.dmu.ac.uk/~drs/public_fp/papers/backward-abstraction.ps
Refering-URL: http://www.cms.dmu.ac.uk/~drs/public_fp/papers/
Root-URL: 
Title: Analysing Functions by Projection-Based Backward Abstraction  
Author: Kei Davis 
Address: Glasgow G12 8QQ, UK  
Affiliation: Department of Computing Science, University of Glasgow  
Abstract: Various techniques for strictness analysis by non-standard interpretation have been proposed in which the basic non-standard values are projections. We show that continuous functions can be completely characterised by appropriate forward and backward abstractions.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Wray, S. </author> <title> "A new strictness detection algorithm." </title> <booktitle> In Proceedings of the Workshop in Imple mentation of Functional Languages (Aspenas, Sweden). </booktitle> <editor> L. Augustsson et. al., eds. </editor> <title> Report 17, Programming Methodology Group, </title> <institution> Department of Computer Sciences, Chalmers University of Technology and University of Goteborg, Goteborg, Sweden. </institution>
Reference: [2] <author> Augustsson, L. and Johnson, T. </author> <title> "The Chalmers Lazy ML Compiler." </title> <institution> Department of Com puter Science, Chalmers University of Technology, Goteborg, Sweden, </institution> <year> 1988. </year>
Reference-contexts: 1 Introduction Strictness analysis by non-standard (or abstract) interpretation allows significant optimisation by compilers for lazy functional languages ([1], <ref> [2] </ref>, [3]). Research continues in both the development of strictness analysis techniques and their practical exploitation.
Reference: [3] <author> Burn, G.L., </author> <title> "Using Projection Analysis in Compiling Lazy Functional Programs", </title> <booktitle> Pro ceedings of the 1990 ACM Conference on Lisp and Function al Programming, ACM, </booktitle> <year> 1990. </year>
Reference-contexts: 1 Introduction Strictness analysis by non-standard (or abstract) interpretation allows significant optimisation by compilers for lazy functional languages ([1], [2], <ref> [3] </ref>). Research continues in both the development of strictness analysis techniques and their practical exploitation. <p> Though it is possible to formalise the operational interpretation <ref> [3] </ref>, here it is used only as an informal source of intuition. We give three examples. Let f denote f 2 U ! V such that f = f ffi BOT .
Reference: [4] <author> Wadler, P., and Hughes, J. </author> <title> "Projections for Strictness Analysis." </title> <booktitle> In Proceedings of Func tional Programming Languages and Computer Architecture (Portland, Oregon). </booktitle> <editor> G. Kahn, ed. </editor> <publisher> LNCS 274. Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1987. </year>
Reference-contexts: This works brings together and expands on ideas from several sources, most notably <ref> [4] </ref>, [5], and [6]. 2 Projections A projection is a continuous idempotent function that approximates the identity. <p> Interestingly, if a function is head strict, then this fact is determined by some backward abstraction: the function that maps every projection to H is a backward abstraction of a head-strict function. As shown in <ref> [4] </ref>, by defining the projection STR on every lifted domain U ? by STR ? = ? ; STR (lift ?) = ? ; STR (lift v ) = lift v ; if v 6= ? ; we have that f is strict if and only if STR ffi f ? <p> Since every monotonic backward abstraction of a continuous function is approximated by a strict continuous backward abstraction, we restrict our attention to the strict continuous projection transformers, which form a sublattice of the lattice of projection transformers. The following proposition and its proof come from <ref> [4] </ref>. Proposition 3.13 If fl ? ffi f ? v f ? ffi ffi then fl ? ffi f ? v f ? ffi (ffi t BOT ? ). <p> Not only is this safe, but as we show, it is the right choice. Let a projection transformer t have the guard property if when t fl ? = ffi, then t fl ? = ffi t BOT ? . (In <ref> [4] </ref>, an operator "guard" is defined to facilitate definition of strict projection transformers with the guard property. <p> top as defined before we have bot &lt; s id , bot &lt; s top , but id 6v s top and top 6v s id . 5 Two Implications for Real Analyses We identify two sources of imprecision in the first-order projection-based backward strictness analysis of Wadler and Hughes <ref> [4] </ref> and show how they can be eliminated by making the analysis relational. In essence, given a function definition denoting a function f in the standard semantics, their analysis determines a projection transformer that is (isomorphic to) a backward abstraction of f ? .
Reference: [5] <author> Hunt, S. </author> <title> Projection analysis and stable functions. </title> <type> Unfinished manuscript. </type>
Reference-contexts: This works brings together and expands on ideas from several sources, most notably [4], <ref> [5] </ref>, and [6]. 2 Projections A projection is a continuous idempotent function that approximates the identity.
Reference: [6] <author> Davis, K. </author> <title> "A Note on the Choice of Domains for Projection-Based Program Analysis." </title> <booktitle> In Functional Programming: Proceedings of the 1991 Glasgow Workshop, </booktitle> <month> 13-15 August </month> <year> 1991, </year> <title> Isle of Skye, Scotland. </title> <editor> P. Wadler et al., eds. </editor> <publisher> Springer Workshops in Computing. Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: This works brings together and expands on ideas from several sources, most notably [4], [5], and <ref> [6] </ref>. 2 Projections A projection is a continuous idempotent function that approximates the identity. <p> Projection-based forward analysis is interesting in its own right, for example, Launchbury uses it in his study and implementation of partial evaluation [7]. Some further details on the power of forward analysis may be found in <ref> [6] </ref>. A projection transformer t is a forward abstraction of f if for all ffi we have (t ffi) ffi f v f ffi ffi. Then Proposition 3.6 Every continuous function has a greatest forward abstraction, and it is continuous. Proof Let f and ffi be fixed. <p> In fact we can do better than this; the construction of least backward abstractions of stable functions in <ref> [6] </ref> shows that every stable, strict, bottom-reflecting functions is determined by a function from a domain of independent projections to a powerdomain of independent projections, and every continuous, strict, bottom-reflecting functions is determined by a function from a domain of independent projections to a power-power domain of independent projections.
Reference: [7] <author> Launchbury, J. </author> <title> Projection Factorisations in Partial Evaluation. </title> <type> PhD Thesis, </type> <institution> Glasgow Uni versity, </institution> <note> Nov 89. Distinguished Dissertation in Computer Science, Vol 1, CUP, </note> <year> 1991. </year>
Reference-contexts: Projection-based forward analysis is interesting in its own right, for example, Launchbury uses it in his study and implementation of partial evaluation <ref> [7] </ref>. Some further details on the power of forward analysis may be found in [6]. A projection transformer t is a forward abstraction of f if for all ffi we have (t ffi) ffi f v f ffi ffi.
Reference: [8] <author> Berry, G. </author> <title> "Stable models of typed lambda-calculi." </title> <booktitle> In Proceedings of the 5th ICALP pp 375-387, </booktitle> <publisher> LNCS 62. Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1978. </year>
Reference-contexts: However, least backward abstractions always exist for stable functions. The theory of stability was developed by Berry <ref> [8] </ref> in an attempt to extend the characterisation of sequential functions to include higher order functions. At first order the stable functions are a superset of the sequential functions, and this is hypothesised to be the case at higher order.
Reference: [9] <author> Hughes, R.J.M. and Launchbury, J. </author> <title> "Relational Reversal of Abstract Interpretation." </title> <booktitle> In </booktitle> ??. 
Reference-contexts: We now briefly relate this to reversal of abstract interpretations <ref> [9] </ref>. If t 0 is any forward abstraction of a continuous function f then any t such that t 0 ffi t w id is a backward abstraction of f . <p> Though this might greatly increase the sizes of the domains involved, it is conceivable that these ideas could be practically exploited in a restricted form, e.g. in a locally relational analysis <ref> [9] </ref>.
References-found: 9

