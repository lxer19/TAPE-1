URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR456.ps.Z
Refering-URL: http://www.cs.indiana.edu/trindex.html
Root-URL: 
Title: DDD-FM9001: Derivation of a Verified Microprocessor  
Author: Bhaskar Bose 
Degree: Submitted to the faculty of the Graduate School in partial fulfillment of the requirements for the degree Doctor of Philosophy in the  
Date: December 1994  
Affiliation: Department of Computer Science Indiana University  
Abstract: y Research reported herein was supported, in part, by NASA: The National Aeronautics and Space Administration under grant number NGT-50861, and by NSF: The National Science Foundation, under grants numbered DCR 85-21497, MIP 87-07067 and MIP 89 21842. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Actel Corporation, </author> <title> Sunnyvale, CA. ACT Family Field Programmable Gate Array Databook, </title> <year> 1991. </year>
Reference-contexts: The DDD system has been integrated with the Berkeley OCT Tools [69] to generate VLSI layouts, the Altera APLUS software [4] to generate MSI-level components, and the ACTEL Action Logic System <ref> [1] </ref> to generate FPGA (Field Programmable Gate Array) implementations. For the purpose of developing prototypes, the DDD system has been integrated with the Logic Engine Hardware Development Platform [78]. This hardware prototyping environment incorporates a transparent hardware/software interface written in Scheme which allows for the execution of DDD 16 3.2.
Reference: [2] <author> D. Agnew, L. Claesen, and R. Camposano, </author> <title> editors. Computer Hardware Description Languages. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1993. </year>
Reference: [3] <author> S. B. Akers. </author> <title> Binary decision diagrams. </title> <journal> IEEE Trans. on Comput., </journal> <volume> C-27:pages 509-516, </volume> <month> June </month> <year> 1978. </year>
Reference-contexts: First, the derivation was upgraded in conjunction with Hunt's refinements to representation. Second, much more of the algebra was mechanized; in fact, the entire gate-level hardware description was generated either by mechanical derivation or verified using boolean equivalence methods <ref> [3, 14] </ref>. Finally, the DDD-FM9001 was realized in hardware and subjected to side-by-side functional tests with Hunt's chip. the DDD-FM9001 are fully operational. Details are given in Chapter 5. 1.2. <p> Binary decision diagrams (BDDs) <ref> [3] </ref> have emerged as an effective data representation for digital systems. One variation of BDDs, called Ordered BDDs (OBDDs) [14] has the special property that for a given ordering of the variables the representations are 7 2.1. FORMAL VERIFICATION SYSTEMS 8 canonical.
Reference: [4] <author> Altera. </author> <title> Altera Programmable Logic User System User Guide. </title> <address> Santa Clara, CA, </address> <year> 1985. </year>
Reference-contexts: DDD is used interactively to transform higher level behavioral specifications into hierarchical boolean systems [76, 75] to which logic synthesis tools are then applied. The DDD system has been integrated with the Berkeley OCT Tools [69] to generate VLSI layouts, the Altera APLUS software <ref> [4] </ref> to generate MSI-level components, and the ACTEL Action Logic System [1] to generate FPGA (Field Programmable Gate Array) implementations. For the purpose of developing prototypes, the DDD system has been integrated with the Logic Engine Hardware Development Platform [78].
Reference: [5] <editor> Graham Birtwistle and P.A. Subrahmanyan, editors. </editor> <title> VLSI Specification, Verification and Synthesis. </title> <publisher> Kluwer, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference: [6] <author> Bhaskar Bose. </author> <title> DDD a transformation system for digital design derivation reference manual. </title> <type> Technical Report 331, </type> <institution> Computer Science Dept., Indiana University, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: The DDD-FM9001 is a 32-bit general purpose microprocessor formally derived from Hunt's Boyer-Moore Logic FM9001 microprocessor specification [35, 36]. The derivation involved the use of three mechanical verification tools: the DDD digital design derivation system <ref> [42, 40, 6, 41] </ref> , the Nqthm theorem prover [11], and the COSMOS boolean tautology checker [14, 15]. The project was undertaken to explore the nature of integration between derivation and verification. <p> Chapter 3 DDD Design Derivation System 3.1 Introduction DDD (Digital Design Derivation System) is a transformation system that implements a basic design algebra for synthesizing digital circuit descriptions from high-level functional specifications <ref> [42, 40, 6] </ref>. The system is a formalization of digital design based on a functional algebra. DDD is much like a proof checker in the sense that it automates the transformations needed for circuit synthesis, but requires substantial guidance to perform a derivation.
Reference: [7] <author> Bhaskar Bose and Steven D. Johnson. DDD-FM9001: </author> <title> Derivation of a verified microprocessor. an exercise in integrating verification with formal derivation. </title> <editor> In George J. Milne and Laurence Pierre, editors, </editor> <title> Correct Hardware Design and Verification Methods, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> volume 683, </volume> <pages> pages 191-202. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1993. </year> <note> 112 BIBLIOGRAPHY 113 </note>
Reference: [8] <author> Bhaskar Bose, Steven D. Johnson, and Shyamsundar Pullela. </author> <title> Integrating boolean verification with formal derivation. </title> <editor> In D. Agnew, L. Claesen, and R. Cam-posano, editors, </editor> <booktitle> Computer Hardware Description Languages and their Applications, </booktitle> <pages> pages 139-146. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1993. </year>
Reference-contexts: Derivation aims at deriving a "correct by construction" design. Verification aims at constructing a post factum "proof of correctness" for a design. However, as researchers and engineers gain design experience in a formal framework, both approaches are emerging as interdependent facets of design <ref> [44, 8, 54] </ref>. The thesis of this work is that alternate forms of formal reasoning must be integrated if formal methods are to support the natural analytical and generative reasoning that takes place in engineering practice.
Reference: [9] <author> Bhaskar Bose, M. Esen Tuna, and Steven D. Johnson. </author> <title> System factorization in codesign: A case study of the use of formal techniques to achieve hardware-software decomposition. </title> <booktitle> In 1993 IEEE International Conference on Computer Design, </booktitle> <pages> pages 458-461. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1993. </year>
Reference: [10] <author> C. David Boyer and Steven D. Johnson. </author> <title> Using the digital design derivation system: Case study of a VLSI garbage collector. </title> <editor> In John A. Darringer and Franz J. Rammig, editors, </editor> <booktitle> Computer Hardware Description Languages and their Applications, </booktitle> <pages> pages 235-246. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: The implementation was realized in MSI level EPAL (Erasable Pro 2.2. INTEGRATING FORMAL SYSTEMS 12 grammable Array Logics) technology and demonstrated a derivation path from an abstract behavior specification to a hardware realization. Boyer subsequently re-derived this design in a multi-chip VLSI implementation <ref> [10] </ref>. Wehrmeister used DDD to derive the control and architecture of a computer based on Landin's SECD machine [73]. The initial specification was derived from Henderson's Lisp specification [33].
Reference: [11] <author> Robert S. Boyer and J. Strother Moore. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: The DDD-FM9001 is a 32-bit general purpose microprocessor formally derived from Hunt's Boyer-Moore Logic FM9001 microprocessor specification [35, 36]. The derivation involved the use of three mechanical verification tools: the DDD digital design derivation system [42, 40, 6, 41] , the Nqthm theorem prover <ref> [11] </ref>, and the COSMOS boolean tautology checker [14, 15]. The project was undertaken to explore the nature of integration between derivation and verification. <p> The design is based on early hardware verification efforts by Gordon on the design and verification of a simple computer [30] using a precursor to HOL, the LCF-LSM theorem prover [29]. Nqthm is a quantifier free, first order logic theorem prover based on the Boyer-Moore Logic <ref> [11] </ref>. The logic is mechanized by a collection of Lisp programs that permit the user to axiomatize inductively constructed data types, define recursive functions, and prove theorems about them. In 1985, Hunt used the Nqthm theorem prover to verify a 16-bit general purpose microprocessor called the FM8501 [34].
Reference: [12] <author> Bishop Brock and Warren A. Hunt, Jr. </author> <title> Report on the formal specification and partial verification of the VIPER microprocessor. </title> <type> Technical Report 46, </type> <institution> Computational Logic Inc., </institution> <month> January </month> <year> 1990. </year>
Reference-contexts: The complete HOL proof of the VIPER processor was not completed at the time the processor was fabricated <ref> [12] </ref>. The only formal proof in the VIPER design effort was Cohn's HOL proof of the Top 2.2. INTEGRATING FORMAL SYSTEMS 14 Level and Major State specifications. Cohn gives a detailed account of the difficulties in completing the proof in [24].
Reference: [13] <author> Bishop Brock, Warren A. Hunt, Jr., Matt Kaufmann, and William D. Young. </author> <title> The formal specification and verification of the FM9001 microprocessor. </title> <type> Technical Report 86, </type> <institution> Computational Logic Inc., </institution> <month> October </month> <year> 1994. </year>
Reference: [14] <author> Randal E. Bryant. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> IEEE Trans. on Comput., </journal> <volume> C-35:pages 677-691, </volume> <month> August </month> <year> 1986. </year>
Reference-contexts: The derivation involved the use of three mechanical verification tools: the DDD digital design derivation system [42, 40, 6, 41] , the Nqthm theorem prover [11], and the COSMOS boolean tautology checker <ref> [14, 15] </ref>. The project was undertaken to explore the nature of integration between derivation and verification. The DDD digital design derivation system is a first-order transformation system that implements a basic design algebra for synthesizing digital circuit descriptions 1 2 from high-level functional specifications. <p> First, the derivation was upgraded in conjunction with Hunt's refinements to representation. Second, much more of the algebra was mechanized; in fact, the entire gate-level hardware description was generated either by mechanical derivation or verified using boolean equivalence methods <ref> [3, 14] </ref>. Finally, the DDD-FM9001 was realized in hardware and subjected to side-by-side functional tests with Hunt's chip. the DDD-FM9001 are fully operational. Details are given in Chapter 5. 1.2. <p> Binary decision diagrams (BDDs) [3] have emerged as an effective data representation for digital systems. One variation of BDDs, called Ordered BDDs (OBDDs) <ref> [14] </ref> has the special property that for a given ordering of the variables the representations are 7 2.1. FORMAL VERIFICATION SYSTEMS 8 canonical. Thus OBDDs are used frequently to solve problems in the areas of boolean verification and finite-state machine equivalence [16, 49]. <p> Although in the worst case the size of the OBDDs can be exponential in the number of variables, there is substantial empirical evidence that OBDDs are of reasonable space and time complexity for most of the boolean expressions in digital design <ref> [14] </ref>.
Reference: [15] <author> Randal E. Bryant. COSMOS: </author> <title> A Compiled Simulator for MOS Circuits. </title> <booktitle> In 24th ACM/IEEE Design Automation Conference, </booktitle> <year> 1987. </year> <note> BIBLIOGRAPHY 114 </note>
Reference-contexts: The derivation involved the use of three mechanical verification tools: the DDD digital design derivation system [42, 40, 6, 41] , the Nqthm theorem prover [11], and the COSMOS boolean tautology checker <ref> [14, 15] </ref>. The project was undertaken to explore the nature of integration between derivation and verification. The DDD digital design derivation system is a first-order transformation system that implements a basic design algebra for synthesizing digital circuit descriptions 1 2 from high-level functional specifications. <p> FORMAL VERIFICATION SYSTEMS 8 canonical. Thus OBDDs are used frequently to solve problems in the areas of boolean verification and finite-state machine equivalence [16, 49]. The "bdd" program <ref> [15] </ref>, used to verify the arithmetic components of the DDD-FM9001, is a boolean formula manipulation tool integrated with the COSMOS symbolic simulator which constructs OBDDs from boolean terms. The system is used to establish equivalence of boolean expressions.
Reference: [16] <author> J.R. Burch, E.M. Clarke, and K.L. McMillan. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <booktitle> In International Workshop on Formal methods in VLSI Design, </booktitle> <month> January </month> <year> 1991. </year>
Reference-contexts: One variation of BDDs, called Ordered BDDs (OBDDs) [14] has the special property that for a given ordering of the variables the representations are 7 2.1. FORMAL VERIFICATION SYSTEMS 8 canonical. Thus OBDDs are used frequently to solve problems in the areas of boolean verification and finite-state machine equivalence <ref> [16, 49] </ref>. The "bdd" program [15], used to verify the arithmetic components of the DDD-FM9001, is a boolean formula manipulation tool integrated with the COSMOS symbolic simulator which constructs OBDDs from boolean terms. The system is used to establish equivalence of boolean expressions.
Reference: [17] <author> R.M. Burstall and John Darlington. </author> <title> A transformation system for developing recursive programs. </title> <journal> Comm. ACM, </journal> <volume> 24(1):pages 44-67, </volume> <month> January </month> <year> 1977. </year>
Reference: [18] <author> A. Church. </author> <title> A formulation of the simple theory of types. </title> <journal> Symbolic Logic, </journal> <volume> 5(1), </volume> <year> 1940. </year>
Reference-contexts: Theorem provers and proof checkers provide a powerful framework for verification and have been used to verify significant designs. HOL is a general theorem-proving system developed at the University of Cam 2.1. FORMAL VERIFICATION SYSTEMS 9 bridge [31] based on higher-order logic <ref> [18] </ref>. Higher-order logic is predicate logic that allows quantification over predicates and functions. HOL is based on five primitive axioms and eight primitive inference rules. All proofs reduce to the primitive axioms and rules. The system has been used to verify several microprocessor designs.
Reference: [19] <editor> Luc J.M. Claesen, editor. </editor> <title> Formal VLSI Correctness Verification. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference: [20] <editor> Luc J.M. Claesen, editor. </editor> <title> Formal VLSI Specification and Synthesis. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference: [21] <author> Edmund M. Clarke, Orna Grumberg, Hiromi Hiraishi, Somesh Jha, David E. Long, and Linda A. Ness. </author> <title> Verification of the futurebus+ cache coherence protocol. </title> <editor> In D. Agnew, L. Claesen, and R. Camposano, editors, </editor> <booktitle> Computer Hardware Description Languages and their Applications, </booktitle> <pages> pages 15-30. </pages> <publisher> North-Holland, </publisher> <address> Am-sterdam, </address> <year> 1993. </year>
Reference-contexts: Although, the techniques in model checking are completely automatic and have been used to verify some very large systems <ref> [21] </ref>, they are limited in their ability to verify many properties of a given specification. 2.1.2 Theorem Proving and Proof Checking A mechanical theorem prover for a given formal logic is a computer program that, when given a formula of that logic, attempts to determine whether there is a proof of
Reference: [22] <author> William Clinger and Jonathan Rees. </author> <title> The revised 4 report on the algorithmic language scheme. </title> <booktitle> ACM Lisp Pointers, </booktitle> <address> 4(3):pages 1-55, </address> <year> 1991. </year>
Reference-contexts: The system is a formalization of digital design based on a functional algebra. DDD is much like a proof checker in the sense that it automates the transformations needed for circuit synthesis, but requires substantial guidance to perform a derivation. The system is implemented in the Lisp dialect Scheme <ref> [26, 22] </ref> as a collection of transformations that operate on s-expressions. The system is intended to provide a mechanized algebraic tool set for design derivation. DDD is used interactively to transform higher level behavioral specifications into hierarchical boolean systems [76, 75] to which logic synthesis tools are then applied. <p> A construction from behavior to structure establishes the equivalence between the two classes of specification. In this section an informal introduction to a subset of Scheme syntax, used in DDD specifications, is presented. A complete language definition and formal semantics for Scheme can be found in <ref> [22] </ref>. This introduction is followed by a description of the DDD behavioral and structural specifications. 3.4.1 Scheme Syntax Scheme, a dialect of Lisp, is a statically scoped, applicative order, functional language that is well suited for symbolic manipulation.
Reference: [23] <author> Avra Cohn. </author> <title> A proof of correctness of the VIPER microprocessor: The first level. </title> <type> Technical Report 104, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <month> January </month> <year> 1987. </year>
Reference-contexts: The design is realized in an ACTEL FPGA and an external register-file. Experience shows that derivation systems impose restrictions on the design, and verification systems result in design descriptions that are impractical for implemen 1.1. DISSERTATION CONTRIBUTIONS 4 tation [34] or proofs too difficult to construct <ref> [23] </ref>. This research sets out to address these deficiencies by integrating derivation and verification in a unified framework. It seems appropriate that algebraic transformations would provide a reasonable approach to this problem since the massive restructuring and decomposition necessary in reorganizing the design represent purely syntactical manipulations. <p> Higher-order logic is predicate logic that allows quantification over predicates and functions. HOL is based on five primitive axioms and eight primitive inference rules. All proofs reduce to the primitive axioms and rules. The system has been used to verify several microprocessor designs. Cohn <ref> [23, 24] </ref> verified parts of the VIPER microprocessor in the HOL theorem prover. VIPER was designed by Britain's Royal Signals and Radar Establishment (RSRE) at Malvern to provide a high-integrity, formally verified microprocessor for use in safety-critical systems. <p> The investigation grew out of recognition that although powerful verification systems, such as Nqthm and HOL, have been used to successfully verify non-trivial designs, hardware verification efforts such as Cohn's VIPER proof <ref> [23] </ref>, Joyce's TAMARACK proof, and Hunt's FM8501 proof [34], were facing the same class of design problem. A design description structured for the purpose of mechanical proof may have to be 2.2. INTEGRATING FORMAL SYSTEMS 13 restructured for the purpose of physical implementation.
Reference: [24] <author> Avra Cohn. </author> <title> Correctness properties of the VIPER block model: The second level. In preliminary papers for the Banff Hardware Verification Workshop, </title> <month> June </month> <year> 1988. </year> <note> BIBLIOGRAPHY 115 </note>
Reference-contexts: Higher-order logic is predicate logic that allows quantification over predicates and functions. HOL is based on five primitive axioms and eight primitive inference rules. All proofs reduce to the primitive axioms and rules. The system has been used to verify several microprocessor designs. Cohn <ref> [23, 24] </ref> verified parts of the VIPER microprocessor in the HOL theorem prover. VIPER was designed by Britain's Royal Signals and Radar Establishment (RSRE) at Malvern to provide a high-integrity, formally verified microprocessor for use in safety-critical systems. <p> The only formal proof in the VIPER design effort was Cohn's HOL proof of the Top 2.2. INTEGRATING FORMAL SYSTEMS 14 Level and Major State specifications. Cohn gives a detailed account of the difficulties in completing the proof in <ref> [24] </ref>. Early experiments with Hunt's FM850x series of verified processors [44] began to explore the interdependence of both approaches. In the FM8501 proof [34], Hunt established an equivalence relation between specifications of an abstract programmer's model, called soft, and an implementation, a hardware interpreter model, called big-machine.
Reference: [25] <author> John A. Darringer. </author> <title> The application of program verification techniques to hardware verification. </title> <booktitle> In 16th ACM/IEEE Design Automation Conference, </booktitle> <year> 1979. </year>
Reference-contexts: This method is similar to symbolic evaluation that is discussed by Darringer <ref> [25] </ref>, in which the base operators are extended to return symbolic values and symbols are introduced as input values in place of real data objects, For example, suppose the symbolic inputs a and b are supplied as actual data to a procedure with formal parameters A and B.
Reference: [26] <author> R. Kent Dybvig. </author> <title> The SCHEME Programming Language. </title> <publisher> Prentice-Hall, </publisher> <address> Engle-wood Cliffs, </address> <year> 1987. </year>
Reference-contexts: The system is a formalization of digital design based on a functional algebra. DDD is much like a proof checker in the sense that it automates the transformations needed for circuit synthesis, but requires substantial guidance to perform a derivation. The system is implemented in the Lisp dialect Scheme <ref> [26, 22] </ref> as a collection of transformations that operate on s-expressions. The system is intended to provide a mechanized algebraic tool set for design derivation. DDD is used interactively to transform higher level behavioral specifications into hierarchical boolean systems [76, 75] to which logic synthesis tools are then applied.
Reference: [27] <author> P. Gaboury and M.I. Elmasry. </author> <title> Using program transformation for VLSI design automation. </title> <editor> In Luc J.M. Claesen, editor, </editor> <booktitle> Formal VLSI Specification and Synthesis, </booktitle> <pages> pages 43-59. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: The algebra has been implemented in a rewriting tool called T-Ruby [65]. Vemuri defines a set of transformations [71, 72] based on a free algebra for register transfer level designs. Gaboury and M.I. Elmasry's PLUSH (Predicate Logic Used for Synthesis Hardware) system <ref> [27] </ref> is a transformational approach based on the Prolog language. Johnson's work provides the theoretical foundation for the body of work surrounding the DDD system and serves as a context for several non-trivial design derivation exercises.
Reference: [28] <author> Fausto Giunchiglia, Paolo Pecchiari, and Carolyn Talcott. </author> <title> Reasoning structures an architecture for open mechanized reasoning systems. </title> <note> Working Draft. </note>
Reference-contexts: Schneider et al. [63] have also integrated boolean verification. Some preliminary work in this area, defining possible directions is Giunchiglia's work on Reasoning Structures <ref> [28] </ref>. In this work Giunchiglia et al. propose a graph based reasoning structure that provide a basis for interaction and sharing of information among inference procedures and with other reasoning systems.
Reference: [29] <author> Michael J.C. Gordon. LCF-LSM, </author> <title> a system for specifying and verifying hardware. </title> <type> Technical Report 41, </type> <institution> Computer Laboratory, The University of Cambridge, </institution> <month> September </month> <year> 1983. </year>
Reference-contexts: Joyce verified TAMARACK at the transistor level and fabricated an 8-bit version in CMOS. The design is based on early hardware verification efforts by Gordon on the design and verification of a simple computer [30] using a precursor to HOL, the LCF-LSM theorem prover <ref> [29] </ref>. Nqthm is a quantifier free, first order logic theorem prover based on the Boyer-Moore Logic [11]. The logic is mechanized by a collection of Lisp programs that permit the user to axiomatize inductively constructed data types, define recursive functions, and prove theorems about them.
Reference: [30] <author> Michael J.C. Gordon. </author> <title> Proving a computer correct using the LCF-LSM hardware verification system. </title> <type> Technical Report 42, </type> <institution> Computer Laboratory, The University of Cambridge, </institution> <month> September </month> <year> 1983. </year>
Reference-contexts: Joyce verified the TAMARACK [45], a 16-bit micro-coded microprocessor, in HOL. Joyce verified TAMARACK at the transistor level and fabricated an 8-bit version in CMOS. The design is based on early hardware verification efforts by Gordon on the design and verification of a simple computer <ref> [30] </ref> using a precursor to HOL, the LCF-LSM theorem prover [29]. Nqthm is a quantifier free, first order logic theorem prover based on the Boyer-Moore Logic [11].
Reference: [31] <author> Michael J.C. Gordon. </author> <title> HOL: a proof generating system for higher-order logic. </title> <editor> In Graham Birtwistle and P.A. Subrahmanyam, editors, </editor> <booktitle> VLSI Specification, Verification and Synthesis, </booktitle> <pages> pages 73-128. </pages> <publisher> Kluwer, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: Theorem provers and proof checkers provide a powerful framework for verification and have been used to verify significant designs. HOL is a general theorem-proving system developed at the University of Cam 2.1. FORMAL VERIFICATION SYSTEMS 9 bridge <ref> [31] </ref> based on higher-order logic [18]. Higher-order logic is predicate logic that allows quantification over predicates and functions. HOL is based on five primitive axioms and eight primitive inference rules. All proofs reduce to the primitive axioms and rules. The system has been used to verify several microprocessor designs. <p> This gave Hunt a real implementation language that he could manipulate formally. The VIPER project involved an attempt to verify the specification at three levels of abstraction (Top Level, Major State, and Block), using Gordon's HOL theorem prover <ref> [31] </ref>, an attempt to verify a corresponding set of specifications written in LCF LCM, a translation of the Block level LCF LSM specification into the simulation language ELLA [55], and a translation of the gate-level ELLA specification into the logic synthesis tools HILO and FDL for fabrication.
Reference: [32] <author> Brian T. Graham. </author> <title> The SECD Microprocessor. </title> <booktitle> Kluwer International Series in Engineering and Computer Science. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1992. </year>
Reference-contexts: More recently, Levitt et al. [48], applying Windley's generic interpreter theory [74], used HOL to verify the VIPER instruction set. Brian Graham et al. at the University of Calgary verified an implementation of an SECD machine <ref> [32] </ref> in HOL. The SECD is a specialized microprocessor for Lisp, first specified by Peter Landin [46] in the 1960s. Joyce verified the TAMARACK [45], a 16-bit micro-coded microprocessor, in HOL. Joyce verified TAMARACK at the transistor level and fabricated an 8-bit version in CMOS.
Reference: [33] <author> Peter Henderson. </author> <title> Functional Programming, Application and Implementation. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1980. </year> <editor> C. A. R. </editor> <booktitle> Hoare, Series Editor (international series in computer science). </booktitle> <address> BIBLIOGRAPHY 116 </address>
Reference-contexts: Boyer subsequently re-derived this design in a multi-chip VLSI implementation [10]. Wehrmeister used DDD to derive the control and architecture of a computer based on Landin's SECD machine [73]. The initial specification was derived from Henderson's Lisp specification <ref> [33] </ref>. Another derivation exercise was to derive an implementation of Winkel and Prosser's state machine for playing the dealers hand in a game of Black Jack [41].
Reference: [34] <author> Warren A. Hunt, Jr. FM8501: </author> <title> A Verified Microprocessor. </title> <type> PhD thesis, </type> <institution> University of Texas at Austin, </institution> <month> December </month> <year> 1985. </year>
Reference-contexts: Equivalence checking is used to verify various arithmetic components. The design is realized in an ACTEL FPGA and an external register-file. Experience shows that derivation systems impose restrictions on the design, and verification systems result in design descriptions that are impractical for implemen 1.1. DISSERTATION CONTRIBUTIONS 4 tation <ref> [34] </ref> or proofs too difficult to construct [23]. This research sets out to address these deficiencies by integrating derivation and verification in a unified framework. <p> To this end, the DDD digital design derivation system has been developed as a research vehicle for engineers and scientists. This work extends the experimentation on the interplay between derivation and verification reported in [44]. Previous work applied the DDD system to Hunt's FM8501 description <ref> [34] </ref>. The FM8501 is a 16-bit microprocessor verified by Hunt in the Nqthm theorem prover. Results of the DDD/FM8501 experiment exposed the need to take a broader view of formal reasoning in design. The experiment illustrated how alternative modes of reasoning could be applied to a single design. <p> The logic is mechanized by a collection of Lisp programs that permit the user to axiomatize inductively constructed data types, define recursive functions, and prove theorems about them. In 1985, Hunt used the Nqthm theorem prover to verify a 16-bit general purpose microprocessor called the FM8501 <ref> [34] </ref>. The architecture has eight 16-bit registers, a 16-bit address space, 26 instructions, and four memory addressing modes. In the FM8501 proof, Hunt established an equivalence relation between specifications of an abstract programmer's model, called soft, and an implementation, a hardware interpreter model, called big-machine. <p> The experiences gained from these derivation exercises have been invaluable to the understanding of hardware design in a formal framework and begin to demonstrate the need to integrate formal systems. Recent designs have included other formal systems in the derivation process. Early experiments with Hunt's FM850x <ref> [34] </ref> series of verified microprocessor designs were initiated to study the interplay of derivation and verification [44]. Details of this experimentation is discussed in the next section. <p> The investigation grew out of recognition that although powerful verification systems, such as Nqthm and HOL, have been used to successfully verify non-trivial designs, hardware verification efforts such as Cohn's VIPER proof [23], Joyce's TAMARACK proof, and Hunt's FM8501 proof <ref> [34] </ref>, were facing the same class of design problem. A design description structured for the purpose of mechanical proof may have to be 2.2. INTEGRATING FORMAL SYSTEMS 13 restructured for the purpose of physical implementation. <p> INTEGRATING FORMAL SYSTEMS 14 Level and Major State specifications. Cohn gives a detailed account of the difficulties in completing the proof in [24]. Early experiments with Hunt's FM850x series of verified processors [44] began to explore the interdependence of both approaches. In the FM8501 proof <ref> [34] </ref>, Hunt established an equivalence relation between specifications of an abstract programmer's model, called soft, and an implementation, a hardware interpreter model, called big-machine. DDD was applied to both soft and big-machine.
Reference: [35] <author> Warren A. Hunt, Jr. </author> <title> Theorem provers in circuit design. </title> <editor> In V. Stavridou, T.F. Melham, and R.T. Boute, editors, </editor> <booktitle> International Conference on Theorem Provers in Circuit Design Theory, Practice, and Experience. </booktitle> <publisher> North-Holland, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: The DDD-FM9001 is a 32-bit general purpose microprocessor formally derived from Hunt's Boyer-Moore Logic FM9001 microprocessor specification <ref> [35, 36] </ref>. The derivation involved the use of three mechanical verification tools: the DDD digital design derivation system [42, 40, 6, 41] , the Nqthm theorem prover [11], and the COSMOS boolean tautology checker [14, 15]. The project was undertaken to explore the nature of integration between derivation and verification. <p> Subsequent work by Hunt scaled this proof effort to a 32-bit version called FM8502. 2.1. FORMAL VERIFICATION SYSTEMS 10 Recent work by Hunt is the verification of the FM9001 <ref> [35] </ref>, a 32-bit general purpose microprocessor. The FM9001 is defined in the Boyer-Moore logic and is mechanically verified using the Nqthm theorem prover. The proof establishes an equivalence relation between four levels of specification ranging from an instruction-level programmer's model interpreter to an optimized gate-level description.
Reference: [36] <author> Warren A. Hunt, Jr. and Bishop Brock. </author> <title> A formal HDL and its use in the FM9001 verification. In C.A.R. </title> <editor> Hoare and M.J.C. Gordon, editors, </editor> <booktitle> Mechanized Reasoning in Hardware Design, </booktitle> <pages> pages 35-48. </pages> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1992. </year>
Reference-contexts: The DDD-FM9001 is a 32-bit general purpose microprocessor formally derived from Hunt's Boyer-Moore Logic FM9001 microprocessor specification <ref> [35, 36] </ref>. The derivation involved the use of three mechanical verification tools: the DDD digital design derivation system [42, 40, 6, 41] , the Nqthm theorem prover [11], and the COSMOS boolean tautology checker [14, 15]. The project was undertaken to explore the nature of integration between derivation and verification. <p> As a solution to this problem, In the FM9001 verification, Hunt embedded a formal hardware description language (HDL) within the Boyer-Moore logic to describe the structure of the target specification <ref> [36] </ref>. This gave Hunt a real implementation language that he could manipulate formally.
Reference: [37] <author> Steven D. Johnson. </author> <title> Synthesis of Digital Designs from Recursion Equations. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, </address> <year> 1984. </year>
Reference-contexts: This combination, makes it a powerful and effective tool. Miner has used PVS in a series of hardware verification experiments [54]. 2.1.3 Design by Algebraic Transformation In"Synthesis of Digital Designs from Recursion Equations" <ref> [37] </ref>, Johnson defines a formal approach to hardware design based on the algebraic manipulation of purely functional forms. The design methodology supports fundamental aspects of design in a unified framework. In this framework, the discipline of applicative programming is adapted to hardware verification. <p> These boolean subsystems are then passed to logic synthesis tools to generate hardware realizations. 3.3 An Example: Fibonacci This section introduces the phases of derivation in the DDD system in the context of an example. The example is derived from Johnson's construction of the recursive Fibonacci specification <ref> [37] </ref> f ib (x) = lt?(x; 2) ! add (f ib (dec (dec (x))); f ib (dec (x))) to an iterative form. The "!" denotes the conditional operator.
Reference: [38] <author> Steven D. Johnson. </author> <title> Digital design in a functional calculus. </title> <editor> In G.J. Milne and P.A. Subrahmanyam, editors, </editor> <booktitle> Formal Aspects of VLSI Design, </booktitle> <pages> pages 45-58. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1986. </year>
Reference: [39] <author> Steven D. Johnson. </author> <title> Manipulating logical organization with system factorizations. </title> <editor> In M. Leeser and G. Brown, editors, </editor> <title> Hardware Specification, Verification and Sythesis: </title> <booktitle> Mathematical Aspects, Lecture Notes in Computer Science, </booktitle> <volume> volume 408, </volume> <pages> pages 260-281. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1989. </year>
Reference: [40] <author> Steven D. Johnson and Bhaskar Bose. </author> <title> A system for digital design derivation. </title> <type> Technical Report 289, </type> <institution> Computer Science Dept., Indiana University, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: The DDD-FM9001 is a 32-bit general purpose microprocessor formally derived from Hunt's Boyer-Moore Logic FM9001 microprocessor specification [35, 36]. The derivation involved the use of three mechanical verification tools: the DDD digital design derivation system <ref> [42, 40, 6, 41] </ref> , the Nqthm theorem prover [11], and the COSMOS boolean tautology checker [14, 15]. The project was undertaken to explore the nature of integration between derivation and verification. <p> Chapter 3 DDD Design Derivation System 3.1 Introduction DDD (Digital Design Derivation System) is a transformation system that implements a basic design algebra for synthesizing digital circuit descriptions from high-level functional specifications <ref> [42, 40, 6] </ref>. The system is a formalization of digital design based on a functional algebra. DDD is much like a proof checker in the sense that it automates the transformations needed for circuit synthesis, but requires substantial guidance to perform a derivation.
Reference: [41] <author> Steven D. Johnson and Bhaskar Bose. </author> <title> A system for mechanized digital design derivation. </title> <editor> In Subramanyam, editor, </editor> <booktitle> Proceedings of ACM International Workshop on Formal Methods in VLSI Design, </booktitle> <month> January </month> <year> 1991. </year> <note> BIBLIOGRAPHY 117 </note>
Reference-contexts: The DDD-FM9001 is a 32-bit general purpose microprocessor formally derived from Hunt's Boyer-Moore Logic FM9001 microprocessor specification [35, 36]. The derivation involved the use of three mechanical verification tools: the DDD digital design derivation system <ref> [42, 40, 6, 41] </ref> , the Nqthm theorem prover [11], and the COSMOS boolean tautology checker [14, 15]. The project was undertaken to explore the nature of integration between derivation and verification. <p> The initial specification was derived from Henderson's Lisp specification [33]. Another derivation exercise was to derive an implementation of Winkel and Prosser's state machine for playing the dealers hand in a game of Black Jack <ref> [41] </ref>. The experiences gained from these derivation exercises have been invaluable to the understanding of hardware design in a formal framework and begin to demonstrate the need to integrate formal systems. Recent designs have included other formal systems in the derivation process.
Reference: [42] <author> Steven D. Johnson, Bhaskar Bose, and C. David Boyer. </author> <title> A tactical framework for digital design. </title> <editor> In Graham Birtwistle and P.A. Subrahmanyam, editors, </editor> <booktitle> VLSI Specification, Verification and Synthesis, </booktitle> <pages> pages 349-383. </pages> <publisher> Kluwer, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: The DDD-FM9001 is a 32-bit general purpose microprocessor formally derived from Hunt's Boyer-Moore Logic FM9001 microprocessor specification [35, 36]. The derivation involved the use of three mechanical verification tools: the DDD digital design derivation system <ref> [42, 40, 6, 41] </ref> , the Nqthm theorem prover [11], and the COSMOS boolean tautology checker [14, 15]. The project was undertaken to explore the nature of integration between derivation and verification. <p> These derivation exercises provide a rich test bed for the development of the DDD system as researchers investigate an algebraic approach to digital design. Boyer used the DDD system to derive a stop-and-copy garbage collector for Scheme <ref> [42] </ref>. The implementation was realized in MSI level EPAL (Erasable Pro 2.2. INTEGRATING FORMAL SYSTEMS 12 grammable Array Logics) technology and demonstrated a derivation path from an abstract behavior specification to a hardware realization. Boyer subsequently re-derived this design in a multi-chip VLSI implementation [10]. <p> Chapter 3 DDD Design Derivation System 3.1 Introduction DDD (Digital Design Derivation System) is a transformation system that implements a basic design algebra for synthesizing digital circuit descriptions from high-level functional specifications <ref> [42, 40, 6] </ref>. The system is a formalization of digital design based on a functional algebra. DDD is much like a proof checker in the sense that it automates the transformations needed for circuit synthesis, but requires substantial guidance to perform a derivation.
Reference: [43] <editor> Steven D. Johnson and C. David Boyer. Modelling transistors applicatively. In George J. Milne, editor, </editor> <booktitle> The Fusion of Hardware Design and Verification, </booktitle> <pages> pages 397-420. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1988. </year>
Reference: [44] <author> Steven D. Johnson, Robert M. Wehrmeister, and Bhaskar Bose. </author> <title> On the interplay of synthesis and verification: Experiments with the FM8501 processor description. </title> <editor> In Luc J.M. Claesen, editor, </editor> <booktitle> Formal VLSI Specification and Synthesis, </booktitle> <pages> pages 117-136. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: Derivation aims at deriving a "correct by construction" design. Verification aims at constructing a post factum "proof of correctness" for a design. However, as researchers and engineers gain design experience in a formal framework, both approaches are emerging as interdependent facets of design <ref> [44, 8, 54] </ref>. The thesis of this work is that alternate forms of formal reasoning must be integrated if formal methods are to support the natural analytical and generative reasoning that takes place in engineering practice. <p> To this end, the DDD digital design derivation system has been developed as a research vehicle for engineers and scientists. This work extends the experimentation on the interplay between derivation and verification reported in <ref> [44] </ref>. Previous work applied the DDD system to Hunt's FM8501 description [34]. The FM8501 is a 16-bit microprocessor verified by Hunt in the Nqthm theorem prover. Results of the DDD/FM8501 experiment exposed the need to take a broader view of formal reasoning in design. <p> Recent designs have included other formal systems in the derivation process. Early experiments with Hunt's FM850x [34] series of verified microprocessor designs were initiated to study the interplay of derivation and verification <ref> [44] </ref>. Details of this experimentation is discussed in the next section. Miner derived a fault-tolerant clock synchronization circuit for life-critical systems [54] integrating the DDD system, the PVS theorem prover [57], and the COSMOS boolean verifier. <p> The only formal proof in the VIPER design effort was Cohn's HOL proof of the Top 2.2. INTEGRATING FORMAL SYSTEMS 14 Level and Major State specifications. Cohn gives a detailed account of the difficulties in completing the proof in [24]. Early experiments with Hunt's FM850x series of verified processors <ref> [44] </ref> began to explore the interdependence of both approaches. In the FM8501 proof [34], Hunt established an equivalence relation between specifications of an abstract programmer's model, called soft, and an implementation, a hardware interpreter model, called big-machine. DDD was applied to both soft and big-machine.
Reference: [45] <author> Jeffrey J. Joyce. </author> <title> Multi-level verification of a simple microprocessor. </title> <type> Technical report, </type> <institution> Computer Laboratory, University of Cambridge, </institution> <year> 1987. </year> <type> Progress Report. </type>
Reference-contexts: Brian Graham et al. at the University of Calgary verified an implementation of an SECD machine [32] in HOL. The SECD is a specialized microprocessor for Lisp, first specified by Peter Landin [46] in the 1960s. Joyce verified the TAMARACK <ref> [45] </ref>, a 16-bit micro-coded microprocessor, in HOL. Joyce verified TAMARACK at the transistor level and fabricated an 8-bit version in CMOS.
Reference: [46] <author> P.J. Landin. </author> <title> The mechanical evaluation of expressions. </title> <journal> Computer Journal, </journal> <volume> 6(4):pages 308-320, </volume> <year> 1964. </year>
Reference-contexts: Brian Graham et al. at the University of Calgary verified an implementation of an SECD machine [32] in HOL. The SECD is a specialized microprocessor for Lisp, first specified by Peter Landin <ref> [46] </ref> in the 1960s. Joyce verified the TAMARACK [45], a 16-bit micro-coded microprocessor, in HOL. Joyce verified TAMARACK at the transistor level and fabricated an 8-bit version in CMOS.
Reference: [47] <author> M. Leeser and G. Brown, </author> <title> editors. Hardware Specification, Verification and Sythe-sis: </title> <booktitle> Mathematical Aspects, Lecture Notes in Computer Science, </booktitle> <volume> volume 408. </volume> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1989. </year>
Reference: [48] <author> Karl Levitt, Tejkumar Arora, Tony Leung, Sara Kalvala, E. Thomas Schubert, Philip Windley, Mark Heckman, and Gerald C. Cohen. </author> <title> Formal Verification of a Microcoded VIPER Microprocessor using HOL. </title> <type> NASA Contractor Report 4489, </type> <year> 1993. </year>
Reference-contexts: Cohn [23, 24] verified parts of the VIPER microprocessor in the HOL theorem prover. VIPER was designed by Britain's Royal Signals and Radar Establishment (RSRE) at Malvern to provide a high-integrity, formally verified microprocessor for use in safety-critical systems. More recently, Levitt et al. <ref> [48] </ref>, applying Windley's generic interpreter theory [74], used HOL to verify the VIPER instruction set. Brian Graham et al. at the University of Calgary verified an implementation of an SECD machine [32] in HOL.
Reference: [49] <author> J.C. Madre and J.P. Billon. </author> <title> Proving circuit correctness using formal comparison between expected and extracted behaviour. </title> <booktitle> In 25th ACM/IEEE Design Automation Conference, </booktitle> <month> June </month> <year> 1988. </year> <note> BIBLIOGRAPHY 118 </note>
Reference-contexts: One variation of BDDs, called Ordered BDDs (OBDDs) [14] has the special property that for a given ordering of the variables the representations are 7 2.1. FORMAL VERIFICATION SYSTEMS 8 canonical. Thus OBDDs are used frequently to solve problems in the areas of boolean verification and finite-state machine equivalence <ref> [16, 49] </ref>. The "bdd" program [15], used to verify the arithmetic components of the DDD-FM9001, is a boolean formula manipulation tool integrated with the COSMOS symbolic simulator which constructs OBDDs from boolean terms. The system is used to establish equivalence of boolean expressions.
Reference: [50] <author> Michael C. McFarland, Alice C. Parker, and Raul Camposano. </author> <title> Tutorial on high-level synthesis. </title> <booktitle> In 25th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 330-336, </pages> <year> 1988. </year>
Reference-contexts: In this example, the term if* is not simply being replaced with if, but the formal parameters are being instantiated with the actual parameters in the application of if* with the body of if*. 4.2.3 Scheduling mem-write and mem-read In a process analogous to scheduling in high-level synthesis <ref> [50] </ref>, the DDD system is guided through a series of folding and unfolding transformations in order to im 4.2. TRANSFORMATIONS ON BEHAVIOR 56 pose a desired scheduling of the memory and register-file operations, mem-read and mem-write. The goal is to reduce the parallelism in the original specification.
Reference: [51] <author> George J. Milne, </author> <title> editor. The Fusion of Hardware Design and Verification. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1988. </year>
Reference: [52] <author> George J. Milne and Laurence Pierre, </author> <title> editors. Correct Hardware Design and Verification Methods, volume 683. </title> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference: [53] <author> George J. </author> <title> Milne and P.A. Subrahmanyam, editors. Formal Aspects of VLSI Design. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1986. </year>
Reference: [54] <author> Paul S. Miner, Shyamsundar Pullela, and Steven D. Johnson. </author> <title> Interaction of formal design systems in the development of a fault-tolerant clock synchronization circuit. </title> <booktitle> In 13th Symp. on Reliable Distributed Systems, </booktitle> <pages> pages 128-137, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Derivation aims at deriving a "correct by construction" design. Verification aims at constructing a post factum "proof of correctness" for a design. However, as researchers and engineers gain design experience in a formal framework, both approaches are emerging as interdependent facets of design <ref> [44, 8, 54] </ref>. The thesis of this work is that alternate forms of formal reasoning must be integrated if formal methods are to support the natural analytical and generative reasoning that takes place in engineering practice. <p> PVS provides a combination of direct control by the user for the higher levels of proof development, and powerful automation for the lower levels. This combination, makes it a powerful and effective tool. Miner has used PVS in a series of hardware verification experiments <ref> [54] </ref>. 2.1.3 Design by Algebraic Transformation In"Synthesis of Digital Designs from Recursion Equations" [37], Johnson defines a formal approach to hardware design based on the algebraic manipulation of purely functional forms. The design methodology supports fundamental aspects of design in a unified framework. <p> Early experiments with Hunt's FM850x [34] series of verified microprocessor designs were initiated to study the interplay of derivation and verification [44]. Details of this experimentation is discussed in the next section. Miner derived a fault-tolerant clock synchronization circuit for life-critical systems <ref> [54] </ref> integrating the DDD system, the PVS theorem prover [57], and the COSMOS boolean verifier. Burger derived a hardware prototype for the execution of compiled Scheme using DDD and boolean verification [70]. 2.2 Integrating Formal Systems The integration of formal systems has been an emerging thesis of this work.
Reference: [55] <author> J.D. Morison, N.E. Peeling, and T.L. Thorp. </author> <title> The design rationale of ELLA, a hardware design and description language. </title> <booktitle> In CHDL'85, </booktitle> <year> 1985. </year>
Reference-contexts: an attempt to verify the specification at three levels of abstraction (Top Level, Major State, and Block), using Gordon's HOL theorem prover [31], an attempt to verify a corresponding set of specifications written in LCF LCM, a translation of the Block level LCF LSM specification into the simulation language ELLA <ref> [55] </ref>, and a translation of the gate-level ELLA specification into the logic synthesis tools HILO and FDL for fabrication. The complete HOL proof of the VIPER processor was not completed at the time the processor was fabricated [12].
Reference: [56] <author> John T. O'Donnell. Hydra: </author> <title> Hardware description in a functional language using recursion equations and high order combining forms. </title> <editor> In George J. Milne, editor, </editor> <booktitle> The Fusion of Hardware Design and Verification, </booktitle> <pages> pages 309-328. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1988. </year>
Reference: [57] <author> S. Owre, J.M. Rushby, and N. Shankar. PVS: </author> <title> A prototype verification system. </title> <editor> In Deepak Kapur, editor, </editor> <booktitle> 11th International Conference on Automated Deduction (CADE), volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 748-752, </pages> <address> Saratoga, NY, June 1992. </address> <publisher> Springer-Verlag. BIBLIOGRAPHY 119 </publisher>
Reference-contexts: The FM9001 is packaged in a 121-pin gate-array fabricated by LSI Logic, Inc. The chip has a 32-bit ALU, a 16fi32-bit register-file, a 32-bit data I/O bus, a 32-bit address bus, a programmable program counter, a memory interface, clock, reset, and a scan path. PVS (Prototype Verification System) <ref> [57] </ref> is a theorem prover for specification and verification for simply typed higher-order logic. The system incorporates a fairly rich set of built-in types and type constructors, and integrates a powerful proof checker with the type system. <p> Details of this experimentation is discussed in the next section. Miner derived a fault-tolerant clock synchronization circuit for life-critical systems [54] integrating the DDD system, the PVS theorem prover <ref> [57] </ref>, and the COSMOS boolean verifier. Burger derived a hardware prototype for the execution of compiled Scheme using DDD and boolean verification [70]. 2.2 Integrating Formal Systems The integration of formal systems has been an emerging thesis of this work.
Reference: [58] <author> Kamlesh Rath, Bhaskar Bose, and Steven D. Johnson. </author> <title> Derivation of a DRAM memory interface by sequential decomposition. </title> <booktitle> In Proceedings of the International Conference on Computer Design (ICCD), </booktitle> <pages> pages 438-441. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1993. </year>
Reference: [59] <author> Kamlesh Rath, Ignacio Celis, and Robert M. Wehrmeister. RTBA: </author> <title> A generic bit-sliced bus architecture for datapath synthesis. </title> <type> Technical Report 321, </type> <institution> Computer Science Dept., Indiana University, </institution> <month> December </month> <year> 1990. </year>
Reference: [60] <author> Kamlesh Rath and Steven D. Johnson. </author> <title> Toward a basis for protocol specification and process decomposition. </title> <editor> In D. Agnew, L. Claesen, and R. Camposano, editors, </editor> <booktitle> Computer Hardware Description Languages and their Applications, </booktitle> <pages> pages 169-186. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1993. </year>
Reference-contexts: This difference isolates an aspect of the verification of the FM9001 that could not be derived since it did not exist in the original specification. A formalism for process decomposition to address this issue has been developed by Rath <ref> [60] </ref>, however, at the time of this derivation exercise, the function was not integrated with DDD.
Reference: [61] <author> Kamlesh Rath, M. Esen Tuna, and Steven D. Johnson. </author> <title> Behavior tables: A basis for system representation and transformational system synthesis. </title> <booktitle> In Proceedings of the International Conference on Computer Aided Design (ICCAD), </booktitle> <pages> pages 736-740. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1993. </year>
Reference: [62] <author> Kamlesh Rath, M. Esen Tuna, and Steven D. Johnson. </author> <title> Specification and synthesis of bounded indirection. </title> <type> Technical Report 398, </type> <institution> Computer Science Dept., Indiana University, </institution> <month> February </month> <year> 1994. </year>
Reference: [63] <author> Klaus Schneider, Ramayya Kumar, and Thomas Kropf. </author> <title> Hardware verification using first order BDDs. </title> <editor> In D. Agnew, L. Claesen, and R. Camposano, editors, </editor> <booktitle> Computer Hardware Description Languages and their Applications, </booktitle> <pages> pages 45-62. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1993. </year>
Reference-contexts: INTEGRATING FORMAL SYSTEMS 15 verification methodology, where the HOL theorem prover is used for the ingenious aspects of system verification and the COSMOS automatic BDD based methods are used for other verification tasks [64]. Schneider et al. <ref> [63] </ref> have also integrated boolean verification. Some preliminary work in this area, defining possible directions is Giunchiglia's work on Reasoning Structures [28].
Reference: [64] <author> Carl-Johan Seger and Jeffrey J. Joyce. </author> <title> A two-level formal verification methodology using HOL and COSMOS. </title> <editor> In K.G. Larsen and A. Skou, editors, </editor> <booktitle> Computer BIBLIOGRAPHY 120 Aided Verification, Lecture Notes in Computer Science, </booktitle> <volume> volume 575, </volume> <pages> pages 299-309. </pages> <publisher> Springer, </publisher> <year> 1991. </year>
Reference-contexts: Other works to integrate various formal systems include Joyce's work in two-level 2.2. INTEGRATING FORMAL SYSTEMS 15 verification methodology, where the HOL theorem prover is used for the ingenious aspects of system verification and the COSMOS automatic BDD based methods are used for other verification tasks <ref> [64] </ref>. Schneider et al. [63] have also integrated boolean verification. Some preliminary work in this area, defining possible directions is Giunchiglia's work on Reasoning Structures [28].
Reference: [65] <author> Robin Sharp and Ole Rasmussen. </author> <title> Rewriting and constraints in T-Ruby. </title> <editor> In George J. Milne and Laurence Pierre, editors, </editor> <title> Correct Hardware Design and Verification Methods, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> volume 683, </volume> <pages> pages 226-241. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: In this method, a circuit is described by a binary relation, and the language permits simple relations to be composed into more complex ones by using a variety of combining forms. The algebra has been implemented in a rewriting tool called T-Ruby <ref> [65] </ref>. Vemuri defines a set of transformations [71, 72] based on a free algebra for register transfer level designs. Gaboury and M.I. Elmasry's PLUSH (Predicate Logic Used for Synthesis Hardware) system [27] is a transformational approach based on the Prolog language.
Reference: [66] <author> Mary Sheeran. uFP, </author> <title> a Language for VLSI Design. </title> <type> PhD thesis, </type> <institution> Programming Research Group, Oxford University, </institution> <year> 1983. </year>
Reference-contexts: A design is determined by an initial specification E 0 , and a sequence of transformations &lt; t 0 ; ; t k1 &gt;. The DDD digital design derivation system is a mechanization of this theory. Other approaches that follow closely to this methodology, include Sheeran's Ruby relational algebra <ref> [66, 67, 68] </ref> that supports a transformational approach to verification. In this method, a circuit is described by a binary relation, and the language permits simple relations to be composed into more complex ones by using a variety of combining forms.
Reference: [67] <author> Mary Sheeran. muFP, </author> <title> an algebraic VLSI design language. </title> <booktitle> In Proceedings of the ACM Symp. on LISP and Functional Programming, </booktitle> <year> 1984. </year>
Reference-contexts: A design is determined by an initial specification E 0 , and a sequence of transformations &lt; t 0 ; ; t k1 &gt;. The DDD digital design derivation system is a mechanization of this theory. Other approaches that follow closely to this methodology, include Sheeran's Ruby relational algebra <ref> [66, 67, 68] </ref> that supports a transformational approach to verification. In this method, a circuit is described by a binary relation, and the language permits simple relations to be composed into more complex ones by using a variety of combining forms.
Reference: [68] <editor> Mary Sheeran. Retiming and slowdown in Ruby. In George J. Milne, editor, </editor> <booktitle> The Fusion of Hardware Design and Verification, </booktitle> <pages> pages 289-308. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1988. </year>
Reference-contexts: A design is determined by an initial specification E 0 , and a sequence of transformations &lt; t 0 ; ; t k1 &gt;. The DDD digital design derivation system is a mechanization of this theory. Other approaches that follow closely to this methodology, include Sheeran's Ruby relational algebra <ref> [66, 67, 68] </ref> that supports a transformational approach to verification. In this method, a circuit is described by a binary relation, and the language permits simple relations to be composed into more complex ones by using a variety of combining forms.
Reference: [69] <author> Rick L. Spickelmier. </author> <title> Release Notes for Oct Tools Distribution 5.1. </title> <institution> Electronics Research Laboratory, University of California, Berkeley, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: The system is intended to provide a mechanized algebraic tool set for design derivation. DDD is used interactively to transform higher level behavioral specifications into hierarchical boolean systems [76, 75] to which logic synthesis tools are then applied. The DDD system has been integrated with the Berkeley OCT Tools <ref> [69] </ref> to generate VLSI layouts, the Altera APLUS software [4] to generate MSI-level components, and the ACTEL Action Logic System [1] to generate FPGA (Field Programmable Gate Array) implementations. For the purpose of developing prototypes, the DDD system has been integrated with the Logic Engine Hardware Development Platform [78].
Reference: [70] <author> M. Esen Tuna, Steven D. Johnson, and Bob Burger. </author> <title> Continuations in hardware-software codesign. </title> <booktitle> In 1994 IEEE International Conference on Computer Design, </booktitle> <pages> pages 264-269. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: Miner derived a fault-tolerant clock synchronization circuit for life-critical systems [54] integrating the DDD system, the PVS theorem prover [57], and the COSMOS boolean verifier. Burger derived a hardware prototype for the execution of compiled Scheme using DDD and boolean verification <ref> [70] </ref>. 2.2 Integrating Formal Systems The integration of formal systems has been an emerging thesis of this work.
Reference: [71] <author> Ranganadha R. Vemuri. </author> <title> A Transformational Approach to Register-Transfer-Level Design-Space Exploration. </title> <type> PhD thesis, </type> <institution> Case Western Reserve University, </institution> <month> January </month> <year> 1989. </year>
Reference-contexts: In this method, a circuit is described by a binary relation, and the language permits simple relations to be composed into more complex ones by using a variety of combining forms. The algebra has been implemented in a rewriting tool called T-Ruby [65]. Vemuri defines a set of transformations <ref> [71, 72] </ref> based on a free algebra for register transfer level designs. Gaboury and M.I. Elmasry's PLUSH (Predicate Logic Used for Synthesis Hardware) system [27] is a transformational approach based on the Prolog language.
Reference: [72] <author> Ranganadha R. Vemuri and Christos A. Papachristou. </author> <title> On control-step assignment in a transformational synthesis system: c-expressions and their algebra. </title> <editor> BIBLIOGRAPHY 121 In Gabriele Saucier and Paul Michael McLellan, editors, </editor> <booktitle> Logic and Architecture Synthesis for Silicon Compilers, </booktitle> <pages> pages 177-199. </pages> <publisher> North-Holland, </publisher> <year> 1989. </year>
Reference-contexts: In this method, a circuit is described by a binary relation, and the language permits simple relations to be composed into more complex ones by using a variety of combining forms. The algebra has been implemented in a rewriting tool called T-Ruby [65]. Vemuri defines a set of transformations <ref> [71, 72] </ref> based on a free algebra for register transfer level designs. Gaboury and M.I. Elmasry's PLUSH (Predicate Logic Used for Synthesis Hardware) system [27] is a transformational approach based on the Prolog language.
Reference: [73] <author> Robert M. Wehrmeister. </author> <title> Derivation of an SECD machine: Experience with a transformational approach to synthesis. </title> <type> Technical Report 290, </type> <institution> Computer Science Dept., Indiana University, </institution> <month> September </month> <year> 1989. </year>
Reference-contexts: Boyer subsequently re-derived this design in a multi-chip VLSI implementation [10]. Wehrmeister used DDD to derive the control and architecture of a computer based on Landin's SECD machine <ref> [73] </ref>. The initial specification was derived from Henderson's Lisp specification [33]. Another derivation exercise was to derive an implementation of Winkel and Prosser's state machine for playing the dealers hand in a game of Black Jack [41].
Reference: [74] <author> P.J. Windley. </author> <title> The Formal Verification of Generic Interpreters. </title> <type> PhD thesis, </type> <institution> University of California, Davis, </institution> <year> 1990. </year>
Reference-contexts: VIPER was designed by Britain's Royal Signals and Radar Establishment (RSRE) at Malvern to provide a high-integrity, formally verified microprocessor for use in safety-critical systems. More recently, Levitt et al. [48], applying Windley's generic interpreter theory <ref> [74] </ref>, used HOL to verify the VIPER instruction set. Brian Graham et al. at the University of Calgary verified an implementation of an SECD machine [32] in HOL. The SECD is a specialized microprocessor for Lisp, first specified by Peter Landin [46] in the 1960s.
Reference: [75] <author> David Winkel. </author> <title> The use of PALs in CPU design. </title> <type> Technical Report 204, </type> <institution> Computer Science Dept., Indiana University, </institution> <month> October </month> <year> 1986. </year>
Reference-contexts: The system is implemented in the Lisp dialect Scheme [26, 22] as a collection of transformations that operate on s-expressions. The system is intended to provide a mechanized algebraic tool set for design derivation. DDD is used interactively to transform higher level behavioral specifications into hierarchical boolean systems <ref> [76, 75] </ref> to which logic synthesis tools are then applied. The DDD system has been integrated with the Berkeley OCT Tools [69] to generate VLSI layouts, the Altera APLUS software [4] to generate MSI-level components, and the ACTEL Action Logic System [1] to generate FPGA (Field Programmable Gate Array) implementations.
Reference: [76] <author> David Winkel. </author> <title> What next for PAL-DEVICES the second generation challenge. </title> <type> Technical Report 188, </type> <institution> Computer Science Dept., Indiana University, </institution> <month> May </month> <year> 1986. </year>
Reference-contexts: The system is implemented in the Lisp dialect Scheme [26, 22] as a collection of transformations that operate on s-expressions. The system is intended to provide a mechanized algebraic tool set for design derivation. DDD is used interactively to transform higher level behavioral specifications into hierarchical boolean systems <ref> [76, 75] </ref> to which logic synthesis tools are then applied. The DDD system has been integrated with the Berkeley OCT Tools [69] to generate VLSI layouts, the Altera APLUS software [4] to generate MSI-level components, and the ACTEL Action Logic System [1] to generate FPGA (Field Programmable Gate Array) implementations.
Reference: [77] <author> David Winkel and Frank Prosser. </author> <title> The Art of Digital Design. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1980. </year>
Reference: [78] <author> David Winkel, Franklin Prosser, Robert Wehrmeister, William C. Hunt, and Caleb Hess. </author> <title> A student VLSI hardware tester. </title> <booktitle> In Proceedings of the Microelectronic Systems Education Conference and Exposition, </booktitle> <pages> pages 15-24, </pages> <year> 1990. </year>
Reference-contexts: For the purpose of developing prototypes, the DDD system has been integrated with the Logic Engine Hardware Development Platform <ref> [78] </ref>. This hardware prototyping environment incorporates a transparent hardware/software interface written in Scheme which allows for the execution of DDD 16 3.2.
Reference: [79] <author> Zheng Zhu. </author> <title> Structured Hardware Design Transformations. </title> <type> PhD thesis, </type> <institution> Computer Science Dept., Indiana University, </institution> <year> 1992. </year>
Reference: [80] <author> Zheng Zhu and Steven D. Johnson. </author> <title> An algebraic characterization of structural synthesis for hardware. </title> <editor> In Luc J.M. Claesen, editor, </editor> <booktitle> Formal VLSI Specification and Synthesis, </booktitle> <pages> pages 261-270. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year> <note> BIBLIOGRAPHY 122 </note>
Reference: [81] <author> Zheng Zhu and Steven D. Johnson. </author> <title> An algebraic framework for data abstraction in hardware description. </title> <editor> In Geraint Jones and Mary Sheeran, editors, </editor> <booktitle> Designing Correct Circuits, </booktitle> <pages> pages 50-67. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: A class of transformations, called behavioral transformations, manipulates the behavioral specification. These transformations usually involve manipulating control and architecture in a tightly integrated relation. Some examples include folding and unfolding transformations to achieve a proper scheduling of operations and transformations to move operations between control and architecture <ref> [81] </ref>. From a suitable behavior description, DDD automatically builds an abstract sequential system description (B 0 hT;Ai ! C * S hT;Ai ) composed of a decision combinator, C, representing control, and a structural component, S hT;Ai , representing an initial estimation of architecture.
Reference: [82] <author> Zheng Zhu and Steven D. Johnson. </author> <title> An example of interactive hardware transformation. </title> <editor> In Subramanyam, editor, </editor> <booktitle> Proceedings of ACM International Workshop on Formal Methods in VLSI Design, </booktitle> <month> January </month> <year> 1991. </year>
Reference: [83] <author> Zheng Zhu and Steven D. Johnson. </author> <title> Capturing synchronization specifications for sequential compositions. </title> <booktitle> In 1994 IEEE International Conference on Computer Design, </booktitle> <pages> pages 117-121. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1994. </year>
References-found: 83

