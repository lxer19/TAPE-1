URL: http://www.cs.wustl.edu/cs/techreports/1994/wucs-94-31.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Title: Practical Methods for Approximating Shortest Paths on a Convex Polytope in R 3  
Author: John Hershberger Subhash Suri 
Address: 1001 Ridder Park Drive San Jose, CA 95131.  St. Louis, MO 63130.  
Affiliation: Mentor Graphics  Department of Computer Science Washington University  
Abstract: We propose an extremely simple approximation scheme for computing shortest paths on the surface of a convex polytope in three dimensions. Given a convex polytope P with n vertices and two points p; q on its surface, let d P (p; q) denote the shortest path distance between p and q on the surface of P . Our algorithm produces a path of length at most 2 fi d P (p; q) in time O(n). Extending this result, we can also compute an approximation of the shortest path tree rooted at an arbitrary point x 2 P in time O(n log n). In the approximate tree, the distance between a vertex v 2 P and x is at most c fi d P (x; v), where c = 2:38(1 + ") for any fixed " &gt; 0. The best algorithms for computing an exact shortest path on a convex polytope take (n 2 ) time in the worst case; in addition, they are too complicated to be suitable in practice. We can also get a weak approximation result in the general case of k disjoint convex polyhedra: in O(n) time our algorithm gives a path of length at most 2k times the optimal.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, B. Aronov, J. O'Rourke, and C. Schevon. </author> <title> Star unfolding of a polytope with applications. </title> <type> Technical Report 031, </type> <institution> Dept. Comput. Sci., Smith College, </institution> <address> Northampton, MA, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: As a result, this special case of the shortest path problem has received considerable attention in computational geometry. (Within mathematics as well, the unfolding of convex polyhedra is a rich topic with a distinguished history|see for instance <ref> [1] </ref>.) Our main result is a very simple and practical algorithm for computing an approximation to the shortest path.
Reference: [2] <author> F. Aurenhammer. </author> <title> Voronoi diagrams: a survey of a fundamental geometric data structure. </title> <journal> ACM Comput. Surv., </journal> <volume> 23 </volume> <pages> 345-405, </pages> <year> 1991. </year>
Reference-contexts: The dot-product of i with p ; q gives p i = q i = sin fi sin : As varies in <ref> [0; 2] </ref>, this dot product varies in the range [ sin fi; + sin fi]. <p> The running time of the algorithm is bounded by O (n log n): the dominant steps are 5 and 6, in which an additive-weight, planar Voronoi diagram is computed and O (n) point location queries are performed. (A good reference on Voronoi diagrams is the survey paper by Aurenhammer <ref> [2] </ref>. The point location algorithms are described in [8, 10, 15].) We have proved the following theorem.
Reference: [3] <author> C. Bajaj. </author> <title> The algebraic complexity of shortest paths in polyhedral spaces. </title> <booktitle> In Proc. 23rd Allerton Conf. Commun. Control Comput., </booktitle> <pages> pages 510-517, </pages> <year> 1985. </year>
Reference-contexts: In 1986, Bajaj <ref> [3] </ref> showed the difficulty of the algebraic subproblem by proving that, in the worst case, the contact points are defined by high-degree irreducible polynomials.
Reference: [4] <author> J. Canny and J. H. Reif. </author> <title> New lower bound techniques for robot motion planning problems. </title> <booktitle> In Proc. 28th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 49-60, </pages> <year> 1987. </year>
Reference-contexts: In 1986, Bajaj [3] showed the difficulty of the algebraic subproblem by proving that, in the worst case, the contact points are defined by high-degree irreducible polynomials. A little later, Canny and Reif <ref> [4] </ref> proved that the combinatorial subproblem is N P -Hard, and thus even computing the edge-sequence of a shortest path is intractably difficult. 1 It is therefore natural to consider approximation algorithms for the three-dimensional short-est path problem.
Reference: [5] <author> J. Chen and Y. Han. </author> <title> Shortest paths on a polyhedron. </title> <booktitle> In Proc. 6th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 360-369, </pages> <year> 1990. </year>
Reference-contexts: Our approximation methods are an order of magnitude faster than the best exact algorithms. More importantly, they are vastly simpler. The best exact algorithms for geodesic paths on a convex polytope take at least (n 2 ) time <ref> [5, 12, 13] </ref>. The O (n 2 log n) time algorithm in [12], like its O (n 3 log n) time predecessor in [16], computes a Voronoi diagram-like subdivision of the surface of the polytope, and it depends on rather complicated constructions. <p> A slightly improved algorithm with O (n 2 ) running time is presented in <ref> [5] </ref>. This paper has five sections. In Section 2 we show that the bounding box, a common practical device, is a bad approximation tool for shortest paths in the worst case. Sections 3 and 4 describe our algorithms for approximating a single path and a shortest path tree, respectively.
Reference: [6] <author> J. Choi, J. Sellen, and Ch. K. Yap. </author> <title> Approximate Euclidean shortest path in 3-space. </title> <booktitle> In Proc. 10th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1994. </year>
Reference-contexts: Another algorithm due to Clarkson [7] computes a (1 + ")-optimal path in roughly O (n 2 polylog n=" 4 ) time. Recently, Choi, Sellen, and Yap <ref> [6] </ref> tightened the analysis of Papadimitriou's algorithm, removing several gaps and inconsistencies in the process. In this paper, we address the problem of finding a shortest path on the surface of a convex polytope in three dimensions. <p> This is an order of magnitude faster than the general approximation algorithms of Choi et al. and Clarkson, although our approximation bound is much worse than the (1 + ") factor achieved by <ref> [6] </ref> and [7]. In summary, we have presented fast, simple, and quite practical methods for approximating shortest paths on a convex polyhedron.
Reference: [7] <author> K. L. Clarkson. </author> <title> Approximation algorithms for shortest path motion planning. </title> <booktitle> In Proc. 19th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 56-65, </pages> <year> 1987. </year>
Reference-contexts: Another algorithm due to Clarkson <ref> [7] </ref> computes a (1 + ")-optimal path in roughly O (n 2 polylog n=" 4 ) time. Recently, Choi, Sellen, and Yap [6] tightened the analysis of Papadimitriou's algorithm, removing several gaps and inconsistencies in the process. <p> This is an order of magnitude faster than the general approximation algorithms of Choi et al. and Clarkson, although our approximation bound is much worse than the (1 + ") factor achieved by [6] and <ref> [7] </ref>. In summary, we have presented fast, simple, and quite practical methods for approximating shortest paths on a convex polyhedron.
Reference: [8] <author> H. Edelsbrunner, L. J. Guibas, and J. Stolfi. </author> <title> Optimal point location in a monotone subdivision. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 317-340, </pages> <year> 1986. </year> <month> 15 </month>
Reference-contexts: The point location algorithms are described in <ref> [8, 10, 15] </ref>.) We have proved the following theorem.
Reference: [9] <author> J. Hershberger and S. Suri. </author> <title> Efficient computation of Euclidean shortest paths in the plane. </title> <booktitle> In Proc. 34th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 508-517, </pages> <year> 1993. </year>
Reference-contexts: Despite numerous attempts to improve the worst-case time complexity, the problem was not solved until very recently, when Hershberger and Suri <ref> [9] </ref> obtained an optimal O (n log n) time algorithm. The three-dimensional version of the shortest path problem turns out to be much more difficult.
Reference: [10] <author> D. G. Kirkpatrick. </author> <title> Optimal search in planar subdivisions. </title> <journal> SIAM J. Comput., </journal> <volume> 12 </volume> <pages> 28-35, </pages> <year> 1983. </year>
Reference-contexts: The point location algorithms are described in <ref> [8, 10, 15] </ref>.) We have proved the following theorem.
Reference: [11] <author> T. Lozano-Perez and M. A. Wesley. </author> <title> An algorithm for planning collision-free paths among polyhedral obstacles. </title> <journal> Commun. ACM, </journal> <volume> 22 </volume> <pages> 560-570, </pages> <year> 1979. </year>
Reference-contexts: One of the best-studied problems in this area is to compute Euclidean shortest paths in an environment containing polyhedral obstacles. In two dimensions, an algorithm with time complexity O (n 2 log n) has been known since the late seventies <ref> [11, 16] </ref>, based on the notion of a "visibility graph"; n is the total number of vertices in all the obstacles.
Reference: [12] <author> J. S. B. Mitchell, D. M. Mount, and C. H. Papadimitriou. </author> <title> The discrete geodesic problem. </title> <journal> SIAM J. Comput., </journal> <volume> 16 </volume> <pages> 647-668, </pages> <year> 1987. </year>
Reference-contexts: Our approximation methods are an order of magnitude faster than the best exact algorithms. More importantly, they are vastly simpler. The best exact algorithms for geodesic paths on a convex polytope take at least (n 2 ) time <ref> [5, 12, 13] </ref>. The O (n 2 log n) time algorithm in [12], like its O (n 3 log n) time predecessor in [16], computes a Voronoi diagram-like subdivision of the surface of the polytope, and it depends on rather complicated constructions. <p> More importantly, they are vastly simpler. The best exact algorithms for geodesic paths on a convex polytope take at least (n 2 ) time [5, 12, 13]. The O (n 2 log n) time algorithm in <ref> [12] </ref>, like its O (n 3 log n) time predecessor in [16], computes a Voronoi diagram-like subdivision of the surface of the polytope, and it depends on rather complicated constructions. A slightly improved algorithm with O (n 2 ) running time is presented in [5]. This paper has five sections.
Reference: [13] <author> D. Mount. </author> <title> On finding shortest paths on convex polyhedra. </title> <type> Technical Report 1495, </type> <institution> Department of Computer Science, University of Maryland, </institution> <year> 1985. </year>
Reference-contexts: Our approximation methods are an order of magnitude faster than the best exact algorithms. More importantly, they are vastly simpler. The best exact algorithms for geodesic paths on a convex polytope take at least (n 2 ) time <ref> [5, 12, 13] </ref>. The O (n 2 log n) time algorithm in [12], like its O (n 3 log n) time predecessor in [16], computes a Voronoi diagram-like subdivision of the surface of the polytope, and it depends on rather complicated constructions.
Reference: [14] <author> C. H. Papadimitriou. </author> <title> An algorithm for shortest-path motion in three dimensions. </title> <journal> Inform. Process. Lett., </journal> <volume> 20 </volume> <pages> 259-263, </pages> <year> 1985. </year>
Reference-contexts: The first general result in this direction is due to Papadimitriou <ref> [14] </ref>, who gave an O (n 4 (L + log ( n " )) 2 =" 2 ) time algorithm for computing a path of length (1 + ") times the optimal; L is the number of bits of precision in the model of computation.
Reference: [15] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: an Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: The point location algorithms are described in <ref> [8, 10, 15] </ref>.) We have proved the following theorem.
Reference: [16] <author> M. Sharir and A. Schorr. </author> <title> On shortest paths in polyhedral spaces. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 193-215, </pages> <year> 1986. </year>
Reference-contexts: One of the best-studied problems in this area is to compute Euclidean shortest paths in an environment containing polyhedral obstacles. In two dimensions, an algorithm with time complexity O (n 2 log n) has been known since the late seventies <ref> [11, 16] </ref>, based on the notion of a "visibility graph"; n is the total number of vertices in all the obstacles. <p> More importantly, they are vastly simpler. The best exact algorithms for geodesic paths on a convex polytope take at least (n 2 ) time [5, 12, 13]. The O (n 2 log n) time algorithm in [12], like its O (n 3 log n) time predecessor in <ref> [16] </ref>, computes a Voronoi diagram-like subdivision of the surface of the polytope, and it depends on rather complicated constructions. A slightly improved algorithm with O (n 2 ) running time is presented in [5]. This paper has five sections. <p> The following lemma states this fact more formally; a proof may be found in <ref> [16] </ref>. Lemma 3.7 (Unfolding Rule) Let P be a polyhedron in 3-space, and let p; q be two points on the surface of P .
References-found: 16

