URL: ftp://ftp.cs.utexas.edu/pub/predator/tr-95-26.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/jthomas/publications.html
Root-URL: 
Email: -batory, jthomas-@cs.utexas.edu  
Title: P2: A Lightweight DBMS Generator  
Author: Don Batory and Jeff Thomas 
Address: Austin, Texas 78712  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract: A lightweight database system (LWDB) is a high-performance, application-specific DBMS. It differs from a general-purpose (heavyweight) DBMS in that it omits one or more features and specializes the implementation of its features to maximize performance. Although heavyweight monolithic and extensible DBMSs might be able to emulate LWDB capabilities, they cannot match LWDB performance. In this paper, we describe P2, a generator of lightweight DBMSs, and explain how it was used to reengineer a hand-coded, highly-tuned LWDB used in a production system compiler (LEAPS). We present results that show P2-generated LWDBs reduced the development time and code size of LEAPS by a factor of three and that the generated LWDBs executed substantially faster than versions built by hand or using an extensible heavy weight DBMS.
Abstract-found: 1
Intro-found: 1
Reference: [Bat88] <author> D. Batory, J. Barnett, J. Garza, K. Smith, K. Tsukuda, B. Twichell, and T. Wise, </author> <title> Genesis: An Extensible Database Management System, </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> November </month> <year> 1988, </year> <pages> 1711-1730. </pages>
Reference-contexts: We used the GenVoca model to express our domain model of LWDBs [Bat92]. As a brief overview, the GenVoca model of software system generation was distilled from the experiences of building generators for the disparate domains of database management systems, communication protocols, avionics, file systems, and data structures <ref> [Bat88, Hut91, Bat93, Cog93, Hei94] </ref>. The motivation for these generators was the scalability problem outlined in Section 1: customized software systems implement m features out of a possible n features. <p> The LEAPS development team also provided us with two versions of LEAPS: OPS5.c (a version that generates programs whose databases are main-memory resident [Mir90-91]) and DATEX (a version that generates programs whose databases are disk-resident [Bra93]). DATEX databases are stored by Jupiter, the (heavyweight) Genesis file management system <ref> [Bat88] </ref>. Thus, OPS5.c and DATEX provided us with an ideal opportunity to evaluate the scalability of P2: we could compare P2-generated LWDBs with both hand-coded main-memory LWDBs and a heavyweight extensible disk-resident DBMS.
Reference: [Bat92] <author> D. Batory and S. OMalley, </author> <title> The Design and Implementation of Hierarchical Software Systems with Reusable Components, </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> Vol. 1, No. 4, </volume> <month> October </month> <year> 1992, </year> <pages> 355-398. </pages>
Reference-contexts: We used the GenVoca model to express our domain model of LWDBs <ref> [Bat92] </ref>. As a brief overview, the GenVoca model of software system generation was distilled from the experiences of building generators for the disparate domains of database management systems, communication protocols, avionics, file systems, and data structures [Bat88, Hut91, Bat93, Cog93, Hei94].
Reference: [Bat93] <author> D. Batory, V. Singhal, M. Sirkin, and J. Thomas, </author> <title> Scalable Software Libraries, </title> <booktitle> ACM SIGSOFT, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: We used the GenVoca model to express our domain model of LWDBs [Bat92]. As a brief overview, the GenVoca model of software system generation was distilled from the experiences of building generators for the disparate domains of database management systems, communication protocols, avionics, file systems, and data structures <ref> [Bat88, Hut91, Bat93, Cog93, Hei94] </ref>. The motivation for these generators was the scalability problem outlined in Section 1: customized software systems implement m features out of a possible n features. <p> This powerful feature allows P2 users to explore different LWDBs implementations easily by altering just a containers type equation and recompiling; no other source code modifications are needed. Further details about type equations and P2 components are discussed in <ref> [Bat93, Bat94b-c] </ref>. 3 The LEAPS Lightweight Database Application The LEAPS production system compiler is a classical lightweight database application. LEAPS (Lazy Evaluation Algorithm for Production Systems) produces the fastest sequential executables of OPS5 rule sets [Mir90-91].
Reference: [Bat94a] <author> D. Batory, </author> <title> The LEAPS Algorithms, </title> <institution> Department of Computer Sciences, University of Texas at Austin, </institution> <type> Technical Report 94-28. </type>
Reference-contexts: As another example, LEAPS reduces string matching time by maintaining a symbol table (i.e., a container) so that element address comparisons can be used in place of expensive string comparisons. Other details are explained in <ref> [Bat94a] </ref>. 3.2 Phase 2: Feature Specification LEAPS algorithms require containers to be searched in timestamp order. Thus, all container storage structures used by LEAPS maintain timestamp ordering. <p> P2 was being written at the time of our RL work; the remainder of the two months included the time spent waiting for P2 to be debugged and the time needed to add the myriad optimizations to RL that LEAPS uses <ref> [Bat94a] </ref>. 11 descending order), manners (8 rules that find seating arrangements with constraints), waltz (33 rules that define a 2-D line labeling program), and waltzdb (38 rules that define a more complex version of waltz).
Reference: [Bat94c] <author> D. Batory, J. Thomas, and M. Sirkin, </author> <title> Reengineering a Complex Application Using a Scalable Data Structure Compiler, </title> <booktitle> ACM SIGSOFT, </booktitle> <month> December </month> <year> 1994. </year>
Reference: [Big94] <author> T. Biggerstaff, </author> <title> The Library Scaling Problem and the Limits of Concrete Component Reuse, </title> <booktitle> Proceedings of the Third International Conference on Reuse, </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: The challenge in building LWDBs stems from scalability: a lean and mean LWDB by definition supports m features out of a set of n features, where m is application-dependent and n is constantly growing <ref> [Big94] </ref>. Clearly, the number of unique combinations of features is exponential, and thus, building a library of LWDBs that implement unique combinations is both impractical and unscalable. We believe that the only way of economically producing LWDBs that exactly match application needs is via generation.
Reference: [Boo87] <author> G. Booch, </author> <title> Software Components with Ada, </title> <address> Benjamin/Cummings, </address> <year> 1987. </year>
Reference-contexts: Examples include main memory DBMSs (e.g., Smallbase [Hey94]), persistent stores (e.g., Texas [Sin92]), and primitive code libraries (e.g., Booch Components <ref> [Boo87] </ref>). Each of these examples strip features from a general-purpose DBMS (e.g., Smallbase removes the disk-resident database feature, Texas removes client-server architectures, and the Booch Components further strip checkpoints and recovery) and demonstrate the performance advantages gained by doing so.
Reference: [Bra91] <author> D. Brant, T. Grose, B Lofaso, and D. Miranker, </author> <title> Effects of Database Size on Rule System Performance: Five Case Studies, </title> <booktitle> Proceedings of the 17th International Conference on Very Large Data Bases (VLDB), </booktitle> <year> 1991. </year>
Reference: [Bra93] <author> D. Brant and D. Miranker, </author> <title> Index Support for Rule Activation, </title> <booktitle> ACM SIGMOD, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: The LEAPS development team also provided us with two versions of LEAPS: OPS5.c (a version that generates programs whose databases are main-memory resident [Mir90-91]) and DATEX (a version that generates programs whose databases are disk-resident <ref> [Bra93] </ref>). DATEX databases are stored by Jupiter, the (heavyweight) Genesis file management system [Bat88]. Thus, OPS5.c and DATEX provided us with an ideal opportunity to evaluate the scalability of P2: we could compare P2-generated LWDBs with both hand-coded main-memory LWDBs and a heavyweight extensible disk-resident DBMS.
Reference: [Car90] <author> M. J. Carey, D. J. DeWitt, G. Graefe, D. M. Haight, J. E. Richardson, D. T. Schuh, E. J. Shekita, and S. Vandenberg, </author> <title> The Exodus Extensible DBMS Project: An Overview, </title> <editor> in D. Maier and S. Zdonik (editors), </editor> <booktitle> Readings on Object-Oriented Database Systems, </booktitle> <publisher> Morgan-Kaufmann, </publisher> <year> 1990. </year>
Reference: [Cog93] <author> L. Coglianese and R. Szymanski, </author> <title> DSSA-ADAGE: An Environment for Architecture-based Avionics Development, </title> <booktitle> Proceedings of AGARD 1993. </booktitle>
Reference-contexts: We used the GenVoca model to express our domain model of LWDBs [Bat92]. As a brief overview, the GenVoca model of software system generation was distilled from the experiences of building generators for the disparate domains of database management systems, communication protocols, avionics, file systems, and data structures <ref> [Bat88, Hut91, Bat93, Cog93, Hei94] </ref>. The motivation for these generators was the scalability problem outlined in Section 1: customized software systems implement m features out of a possible n features.
Reference: [Coo88] <author> T. Cooper and Nancy Wogrin, </author> <title> Rule-based Programming with OPS5, </title> <publisher> Morgan-Kaufmann, </publisher> <year> 1988. </year>
Reference-contexts: As a brief overview, OPS5 is a forward-chaining rule programming language <ref> [Coo88] </ref>. An OPS5 program is a set of rules; an OPS5 rule named done is shown below.
Reference: [Haa90] <author> L. Haas, W. Chang, G. Lohman, J. McPherson, P. Wilms, G. Lapis, B. Lindsay, H. Pirahesh, M. Carey, and E. Shekita, </author> <title> Starburst Mid-Flight: As the Dust Clears, </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> March </month> <year> 1990, </year> <pages> 143-161. 14 </pages>
Reference: [Hey94] <author> M. Heytens, S. Listgarten, M. Neimat, K. Wilkinson, Smallbase: </author> <title> A Main-Memory DBMS for High-Performance Applications, </title> <type> HP Labs Technical Report, </type> <month> December </month> <year> 1994. </year>
Reference-contexts: Examples include main memory DBMSs (e.g., Smallbase <ref> [Hey94] </ref>), persistent stores (e.g., Texas [Sin92]), and primitive code libraries (e.g., Booch Components [Boo87]).
Reference: [Hei94] <author> J.S. Heideman and G.J. Popek, </author> <title> File-System Development with Stackable Layers, </title> <journal> ACM Transactions on Computer Systems, </journal> <month> February </month> <year> 1994. </year>
Reference-contexts: We used the GenVoca model to express our domain model of LWDBs [Bat92]. As a brief overview, the GenVoca model of software system generation was distilled from the experiences of building generators for the disparate domains of database management systems, communication protocols, avionics, file systems, and data structures <ref> [Bat88, Hut91, Bat93, Cog93, Hei94] </ref>. The motivation for these generators was the scalability problem outlined in Section 1: customized software systems implement m features out of a possible n features.
Reference: [Hut91] <author> N. Hutchinson and L. Peterson, </author> <title> The x-kernel: an Architecture for Implementing Network Protocols, </title> <journal> IEEE Trans. Software Engineering, </journal> <month> January </month> <year> 1991. </year>
Reference-contexts: We used the GenVoca model to express our domain model of LWDBs [Bat92]. As a brief overview, the GenVoca model of software system generation was distilled from the experiences of building generators for the disparate domains of database management systems, communication protocols, avionics, file systems, and data structures <ref> [Bat88, Hut91, Bat93, Cog93, Hei94] </ref>. The motivation for these generators was the scalability problem outlined in Section 1: customized software systems implement m features out of a possible n features.
Reference: [Kel82] <author> A. Keller, </author> <title> Updates to Relational Database Through Views Involving Joins, </title> <editor> in P. Scheuermann (editor), </editor> <title> Improving Database Usability and Responsiveness, </title> <publisher> Academic Press, </publisher> <year> 1982. </year>
Reference-contexts: Unlike view updates (where changes are restricted <ref> [Kel82] </ref>), updates are unrestricted, but they may effect the tuples that are subsequently retrieved. For instance, once an element of a tuple is deleted, that element should not belong to any subsequently retrieved tuple.
Reference: [Leh86] <author> T. Lehman and M. Carey, </author> <title> Query Processing in Main Memory Database Management Systems, </title> <booktitle> ACM SIGMOD, </booktitle> <month> June </month> <year> 1986. </year>
Reference-contexts: We are currently extending the capabilities of P2. New components will offer additional DBMS features (e.g., concurrency control, client/server architecture, set-oriented queries) as well as a greater variety of 13 implementations of existing features (e.g., t-trees <ref> [Leh86] </ref> and sort-merge joins). This will allow us to use P2 to generate LWDBs for a broader range of applications. We believe lightweight DBMSs have a wide applicability and practical importance. We feel that our work with the P2 demonstrates that generating lightweight DBMSs is feasible.
Reference: [Mir90] <author> D. Miranker, D. Brant, B. Lofaso, and D. Gadbois, </author> <title> On the Performance of Lazy Matching in Production Systems, </title> <booktitle> Proc. National Conference on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference: [Mir91] <author> D. Miranker and B. Lofaso, </author> <title> The Organization and Performance of a TREAT Based Production System Compiler, </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> March </month> <year> 1991. </year>
Reference: [Pri91] <author> R. Prieto-Diaz and G. Arango, </author> <title> Domain Analysis and Software Systems Modeling, </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: The key to any generative approach is to create a domain model of families of P2 data type implementations (i.e., families of LWDBs), where individual members of this family have a precise and unique specification in the model <ref> [Pri91] </ref>. We used the GenVoca model to express our domain model of LWDBs [Bat92].
Reference: [Sin92] <author> V. Singhal, S. Kakkad, and P. Wilson, </author> <title> Texas: An Efficient, Portable Persistent Store, Persistent Object Systems: </title> <booktitle> Proc. Fifth International Workshop on Persistent Object Systems (San Miniato, </booktitle> <address> Italy), </address> <month> September </month> <year> 1992, </year> <pages> 11-33. </pages>
Reference-contexts: Examples include main memory DBMSs (e.g., Smallbase [Hey94]), persistent stores (e.g., Texas <ref> [Sin92] </ref>), and primitive code libraries (e.g., Booch Components [Boo87]). Each of these examples strip features from a general-purpose DBMS (e.g., Smallbase removes the disk-resident database feature, Texas removes client-server architectures, and the Booch Components further strip checkpoints and recovery) and demonstrate the performance advantages gained by doing so.
Reference: [Sto91] <author> M. Stonebraker and G. Kemnitz, </author> <title> The Postgres Next-Generation Database Management System, </title> <journal> Communications of the ACM, </journal> <month> October </month> <year> 1991, </year> <pages> 78-92. </pages>
Reference: [Sto93] <author> M. Stonebraker, </author> <title> The Miro DBMS, </title> <booktitle> ACM SIGMOD, </booktitle> <year> 1993. </year>
Reference: [Wel92] <author> D. Wells, J. Blakeley, C. Thompson, </author> <title> Architecture of an Open Object-Oriented Database Management System, </title> <booktitle> IEEE Computer, </booktitle> <month> October </month> <year> 1992, </year> <pages> 74-82. </pages>
References-found: 25

