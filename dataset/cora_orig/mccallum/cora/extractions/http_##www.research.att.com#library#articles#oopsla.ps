URL: http://www.research.att.com/library/articles/oopsla.ps
Refering-URL: http://www.research.att.com/library/articles/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Why C is not just an Object-Oriented Programming Language  
Author: Bjarne Stroustrup 
Address: Murray Hill, New Jersey 07974  
Affiliation: AT&T Bell Laboratories  
Abstract: C ++ directly supports a variety of programming styles. In this, C ++ deliberately differs from languages designed to support a single way of writing programs. This paper briefly presents key programming styles directly supported by C ++ and argues that the support for multiple styles is one of its major strengths. The styles presented include: traditional C-style, concrete classes, abstract classes, traditional class hierarchies, abstract classes and class hierarchies, and generic programming. To provide a context for this overview, I discuss criteria for a reasonable and useful definition of ``object-oriented programming.''
Abstract-found: 1
Intro-found: 1
Reference: [Koenig,1995] <author> Andrew Koenig (editor): </author> <title> Draft Proposed International Standard for Information Systems Programming Language C ++ . ANSI Standards Secretariat. CBEMA, </title> <address> 1250 Eye Street NW, Suite 200, Washington DC20005, USA. </address> <year> 1995. </year>
Reference-contexts: For example, the C ++ standard library algorithm, sort () is for many simple and realistic examples several times faster than the C standard library qsort () function. For more information about the C ++ standard library and the principles underlying its design see <ref> [Koenig,1995] </ref> [Stepanov,1994]. 7 Closing Remarks Are the various facilities presented above object-oriented or not? Which ones? Using what definition of object-oriented? In most contexts, I think these are the wrong questions.
Reference: [Koenig,1995b] <author> Andrew Koenig and Bjarne Stroustrup: </author> <title> A Foundation for Native C ++ Styles. </title> <journal> Software Practice & Experience. </journal> <note> To appear 1995. </note>
Reference-contexts: In addition to facilities that support object-oriented programming, I want and C ++ provides features that go beyond those in their support for direct expression of concepts and relationships. Several of the themes related to C ++ programming style in this paper have been developed further in <ref> [Koenig,1995b] </ref>.
Reference: [Stepanov,1994] <author> Alexander Stepanov and Meng Lee: </author> <title> The Standard Template Library. ISO Programming language C ++ project. Doc No: </title> <address> X3J16/94-0095, WG21/N0482. </address> <month> May </month> <year> 1994. </year>
Reference-contexts: For example, the C ++ standard library algorithm, sort () is for many simple and realistic examples several times faster than the C standard library qsort () function. For more information about the C ++ standard library and the principles underlying its design see [Koenig,1995] <ref> [Stepanov,1994] </ref>. 7 Closing Remarks Are the various facilities presented above object-oriented or not? Which ones? Using what definition of object-oriented? In most contexts, I think these are the wrong questions.
Reference: [Stroustrup,1991] <author> Bjarne Stroustrup: </author> <title> The C ++ Programming Language. </title> <publisher> Addison-Wesley. </publisher> <year> 1991. </year>
Reference-contexts: Over the years, we have seen spectacular improvements both in hardware performance and in compilation techniques. However, run-time efficiency and compact representation is still absolutely essential to many people. Static type safety is an essential part in my view of both design and implementation (see, for example <ref> [Stroustrup,1991] </ref>). The guarantees provided and the discipline of design imposed have been found extremely valuable by many people working in a wide range of application areas. Static type checking is of course not a panacea, but it is something I would not attempt major projects without.
Reference: [Stroustrup,1994] <author> Bjarne Stroustrup: </author> <title> The Design and Evolution of C ++ . Addison-Wesley. </title> <year> 1994. </year>
Reference-contexts: in the context of another class it can be declared a member of that class exactly the way a function can be: class Date - public: enum Month - jan, feb, mar, jul, aug, sep, -; -; Date::Month m = Date::nov; More generally, C ++ provides namespaces for grouping declarations <ref> [Stroustrup,1994] </ref>. For example, many operations on Dates shouldn't be members of class Date because they don't need direct access to the representation of a Date. <p> Several of the themes related to C ++ programming style in this paper have been developed further in [Koenig,1995b]. The design and evolution of C ++ , including its most recent features, is discussed in <ref> [Stroustrup,1994] </ref>. 8 Acknowledgements Thanks to the OOPSLA'95 program committee for inviting me to give the talk upon which this paper is based, and especially to May Loomis for encouraging me to get this paper written.
References-found: 5

