URL: http://simon.cs.vt.edu/~begolej/Papers/Prelim/FlexibleCollabTrans.ps
Refering-URL: http://simon.cs.vt.edu/~begolej/Papers/Prelim/
Root-URL: http://www.cs.vt.edu
Title: Flexible Collaboration Transparency  
Author: James "Bo" Begole 
Keyword: computer-supported cooperative work, workspace awareness, collaboration transparency, multi-user interface components, Java  
Note: 0 Copyright c 1997 James "Bo" Begole. All rights reserved.  
Date: May 12, 1997  
Address: 24061  
Affiliation: Department of Computer Science Virginia Tech Blacksburg, Virginia  
Abstract: We work together in all aspects of life, and as computers have become prevalent people seek computer support for their collaborations. When collaboration occurs in real-time, two approaches to collaborative applications are available: collaboration transparent and collaboration aware. A collaboration-transparency system allows the shared use of familiar single-user applications. Unfortunately, collaboration transparency supports only an inflexible style of collaboration where participants share exactly the same view of the application and may not work in parallel. Alternatively, applications designed specifically to support collaborative work allow flexible collaboration styles. Participants may simultaneously view and manipulate independent portions of the shared application. I propose to explore the limits of collaboration transparency with the goal of supporting more flexible collaborations. I will analyze the needs of collaboration and determine what features of collaboration awareness can and cannot be provided transparently. Continuing ongoing research in Java-based replicated collaboration transparency, I will implement the key features that can be supported in a collaboration-transparency system. I have already identified several collaborative features that can be provided with multi-user interface components. My approach is to dynamically replace standard single-user interface objects with multi-user equivalents that conform to the original object interface, yet provide collaborative functionality that is transparent to the shared single-user application. I will perform an evaluation of this system to determine if the goal of flexible collaboration is met. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Abdel-Wahab, B. Kvande, S. Nanjangud, O. Kim, J.P. Favreau, </author> <title> "Using Java for Multimedia Collaborative Applications," </title> <address> PROMS'96, Madrid, Spain. </address>
Reference-contexts: Aware A collaboration-aware application may be developed ad hoc or with a groupware toolkit such as Bellcore's Rendezvous [21], the University of Calgary's GroupKit [37], the University of Michigan's Collaboratory Builder's Environment (CBE) [26], the National Center for Supercomputing Application's Habanero [51], or Old Dominion University's Java Collaborator Toolset (JCT) <ref> [1] </ref>. The goal of these toolkits is to facilitate the development of collaboration-aware applications so that they are only "slightly more difficult" to develop than otherwise functionally equivalent single-user applications [37, 26]. <p> Taking advantage of Java's platform-independence and its widespread availability through the WWW, developers have created many applets. If Java applets could be shared, then users of the WWW would be able to collaborate synchronously. Although there are Java-based groupware toolkits <ref> [1, 26, 51] </ref>, no collaboration-transparency system exists for Java. In prior work, Struble, Shaffer, Smith and I investigated an approach to sharing single-user Java applets [8, 9]. Our prototype system, called JAMM (Java Applets Made Multi-user), demonstrates the feasibility of event broadcasting.
Reference: [2] <author> H. Abdel-Wahab and K. Jeffay, </author> <title> "Issues, Problems and Solutions in Sharing X Clients on Multiple Displays," </title> <journal> Internetworking - Research and Practice, </journal> <volume> vol 5, no 1, </volume> <month> March </month> <year> 1994, </year> <pages> pp. 1-15. </pages>
Reference-contexts: The two that did not crash were not as fully featured as the less robust systems. In the end, they only grudgingly recommended one system, SharedX-DFKI. Abdel-Wahab, Menges and Jeffay <ref> [2, 28] </ref> report that collaboration-transparency systems are difficult to implement correctly in general and particularly on the X Window System, because of the X client-server architecture. 2.4 Improving Collaboration Transparency Some of the shortcomings described in Section 2.3 are being addressed by researchers. 12 2.4.1 Improving Flexibility Menges and Jeffay attribute
Reference: [3] <author> H. Abdel-Wahab and M. Feit, "XTV: </author> <title> A Framework for Sharing X Window Clients in Remote Synchronous Collaboration," </title> <booktitle> Proc. IEEE TriComm, </booktitle> <address> Chapel Hill, North Carolina, </address> <year> 1991, </year> <pages> pp 159-167. </pages>
Reference-contexts: They introduced the term collaboration transparency to encompass all types of single-user application sharing, screen sharing and window sharing. Many collaboration-transparency systems have been implemented, particularly on the X Window System, such as Old Dominion University's XTV <ref> [3] </ref>, Hewlett Packard's SharedX [14] and Sun Microsystem's ShowMe SharedApp [52]. Commercial collaboration-transparency systems exist on Microsoft Windows and Macintosh platforms, as well, including Microsoft's NetMeeting [50], Intel's ProShare [47] and Faral-lon's Timbuktu [46].
Reference: [4] <author> K. Arnold, and J. Gosling, </author> <title> "The Java Programming Language," </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1996. </year>
Reference-contexts: during the task and to explore responses to the questionnaire. 5 Preliminary Results Prior work I have done indicates that this proposal represents a promising approach. 5.1 JAMM The Java programming language and libraries provide a platform-independent environment for creating interactive programs (applets) delivered via the World Wide Web (WWW) <ref> [4] </ref>. Taking advantage of Java's platform-independence and its widespread availability through the WWW, developers have created many applets. If Java applets could be shared, then users of the WWW would be able to collaborate synchronously. Although there are Java-based groupware toolkits [1, 26, 51], no collaboration-transparency system exists for Java.
Reference: [5] <author> R.M. Baecker, D. Nastos, I.R. Posner, and K.L. Mawby, </author> <title> "The User-centered Iterative Design Of Collaborative Writing Software," </title> <publisher> INTERCHI'93, ACM Press, </publisher> <address> New York, </address> <year> 1993, </year> <pages> pp. 399-405. </pages>
Reference-contexts: However, because CSCW is a relatively new field, few studies of the collaborative usability of multi-user widgets have been performed and the effectiveness of particular techniques remains in question <ref> [20, 5] </ref>. The proposed evaluation will aim to validate the effectiveness of multi-user aware widgets and inform the design of new multi-user interface techniques in this system and others. Following an iterative design-build-evaluate process, I propose a two-phase evaluation.
Reference: [6] <author> J.E. Baldeschwieler, T. Gutekunst and B. Plattner, </author> <title> "A Survey of X Protocol Multiplexors," </title> <journal> Computer Communication Review, </journal> <month> April, </month> <year> 1993, </year> <pages> pp. 16-24. </pages>
Reference-contexts: as discussed in Section 2.1.3 and illustrated by the multi-user text widget in Figure 2. 2.3.5 Difficult to Implement In a review of seven then-available X-based application sharing systems, Baldeschwieler et al. found that five of the seven crashed at least once during its best run through their test suite <ref> [6] </ref>. The two that did not crash were not as fully featured as the less robust systems. In the end, they only grudgingly recommended one system, SharedX-DFKI.
Reference: [7] <author> J. Begole and C.A. Shaffer, </author> <title> "Internet Based Real-Time Multiuser Simulation: </title> <institution> Ppong!," Department of Computer Science, Virginia Tech, TR-97-01. </institution> <note> http://simon.cs.vt.edu/ begolej/Papers/Ppong/ 26 </note>
Reference-contexts: JSDA provides programming abstractions to route messages to participants in a collaboration. As a test site for JSDA, I have been active in its design, testing and debugging. 5.2.2 Ppong! Ppong! is a Java two-player network game based on the classic Atari Pong <ref> [7] </ref>. My development of Ppong! exposed many issues related to the development of collaborative software on the WWW. First, security restrictions for Java applets impose centralized architectures. Second, in order to optimize local application processing, an asynchronous communications protocol should send only the minimum information needed for consistency.
Reference: [8] <editor> J. Begole, </editor> <address> C.A. Struble and C.A. </address> <month> Shaffer, </month> <title> "Leveraging Java Ap--plets: Toward Collaboration Transparency in Java," </title> <journal> IEEE Internet Computing, </journal> <volume> (1)2, </volume> <month> March-April </month> <year> 1997, </year> <pages> pp. 57-64. </pages>
Reference-contexts: Researchers have identified several difficulties that must be addressed to maintain consistency among the replicas: heterogeneous computer environments; access to application executables; apparently nondeterministic application behavior; and distributing inputs other than user input events (files, sockets, etc.). These critiques and solutions to them are elaborated in prior work <ref> [8] </ref>. In addition, accommodating late-comers by replaying events is time consuming. Past implementors of collaboration 9 transparency systems have generally used centralized display broadcasting, because maintaining data consistency among the collaborators is relatively easy, as there is only one physical copy of the data. <p> Perhaps more important is that display broadcasting fits naturally in a distributed windowing system, such as the X Window System, that separates display from computation. In prior work <ref> [8, 9] </ref>, we found that current technology can support a replicated architecture and that it is preferred for a Web-based collaboration-transparency system. Lacking knowledge of application semantics Another reason collaboration-transparency systems may require higher network bandwidth than collaboration-aware is that they are unable to optimize the communications updates. <p> If Java applets could be shared, then users of the WWW would be able to collaborate synchronously. Although there are Java-based groupware toolkits [1, 26, 51], no collaboration-transparency system exists for Java. In prior work, Struble, Shaffer, Smith and I investigated an approach to sharing single-user Java applets <ref> [8, 9] </ref>. Our prototype system, called JAMM (Java Applets Made Multi-user), demonstrates the feasibility of event broadcasting. Figure 9 shows a single-user applet being shared under JAMM.
Reference: [9] <author> J. Begole, C.A. Struble, R.B. Smith and C.A. Shaffer, </author> <title> "Transparent Sharing of Java Applets: A Replicated Approach," </title> <booktitle> submitted to the 1997 Conference on User Interface Software and Technology (UIST '97), currently under review. </booktitle>
Reference-contexts: Perhaps more important is that display broadcasting fits naturally in a distributed windowing system, such as the X Window System, that separates display from computation. In prior work <ref> [8, 9] </ref>, we found that current technology can support a replicated architecture and that it is preferred for a Web-based collaboration-transparency system. Lacking knowledge of application semantics Another reason collaboration-transparency systems may require higher network bandwidth than collaboration-aware is that they are unable to optimize the communications updates. <p> If Java applets could be shared, then users of the WWW would be able to collaborate synchronously. Although there are Java-based groupware toolkits [1, 26, 51], no collaboration-transparency system exists for Java. In prior work, Struble, Shaffer, Smith and I investigated an approach to sharing single-user Java applets <ref> [8, 9] </ref>. Our prototype system, called JAMM (Java Applets Made Multi-user), demonstrates the feasibility of event broadcasting. Figure 9 shows a single-user applet being shared under JAMM.
Reference: [10] <author> T. Crowley, P. Miazzo, E. Baker, H. Forsdick, and R. Tomlinson, "MMConf: </author> <title> An Infrastructure for Building Shared Multimedia Applications," </title> <booktitle> Proc. Conf. Computer-Supported Cooperative Work, </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1990, </year> <pages> pp. 329-342. </pages>
Reference-contexts: Distributed software architectures fall in a range from centralized, where the shared application is maintained in one physical location, to replicated, where the shared application is copied to each collaborator <ref> [18, 10] </ref>. Hybrid architectures also exist, such as Patterson et al.'s centralized notification server, where only the shared data are centralized and views are replicated [33]. <p> Comparison of Architectures Replicated or semi-replicated architectures are common in collaboration-aware groupware toolkits, such as Groupkit and DistView [37, 34], primarily because of their lower network bandwidth requirement, as discussed in Section 2.1.2. Despite this advantage, replication has previously been deemed unsuitable for collaboration transparency <ref> [10, 25, 30] </ref>. Researchers have identified several difficulties that must be addressed to maintain consistency among the replicas: heterogeneous computer environments; access to application executables; apparently nondeterministic application behavior; and distributing inputs other than user input events (files, sockets, etc.). <p> This is an unexpected result for most users. To prevent event collision and related consistency problems, collaboration-transparency systems use floor control policies (Section 2.1.2) to 11 ensure that only one user's input at a time is delivered to the shared application <ref> [10] </ref>.
Reference: [11] <author> P. Dourish, </author> <title> "Consistency Guarantees: Exploiting Application Semantics for Consistency Management in a Collaboration Toolkit," </title> <booktitle> Proc. Conf. Computer-Supported Cooperative Work, </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <month> November, </month> <year> 1996, </year> <pages> pp. 268-77. </pages>
Reference-contexts: Developers of collaboration-aware applications, on the other hand, can take advantage of their knowledge of the application's semantics, transmitting only the information needed to maintain consistency and provide acceptable performance <ref> [11] </ref>. 10 sions 2.3.2 Strict WYSIWIS Application sharing systems provide participants with the same view of the application in a manner referred to as strict WYSIWIS, because the participants see exactly the same image of the application [41].
Reference: [12] <author> W.K. Edwards, </author> <title> "Session management for collaborative applications," </title> <booktitle> Proc. Conf. Computer-Supported Cooperative Work, </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1994, </year> <pages> pp. 323-330. </pages>
Reference-contexts: embedded in a multi-user text widget: workspace awareness through split scrollbars, locking state information through graphical feedback, and edit history through author-unique colored text (not shown) [32]. 2.1.4 Session Managers Finally, a groupware toolkit must provide some means by which users may start, find, join and leave a collaborative session <ref> [12, 18] </ref>. Group-ware toolkits provide developers with default session management facilities and the ability to implement new policies.
Reference: [13] <institution> D.C. Englebart, "NLS teleconferencing features: </institution> <note> The Journal, </note> <editor> and shared-screen telephoning, </editor> <booktitle> Proc. Fall COMPCON, IEEE, </booktitle> <address> Septem-ber, </address> <year> 1975, </year> <pages> pp. 173-76. </pages>
Reference-contexts: Another benefit of collaboration transparency is that application developers make no extra effort whatsoever for their applications to be shared. 7 Collaboration transparency has received much prior research, be-ginning with Englebart's NLS with which users worked collaboratively by sharing the view of their entire screen, referred to as screen sharing <ref> [13] </ref>. In 1990, Lauwers et al. advanced single-user application sharing to the granularity of individual windows, referred to as window sharing [24, 25]. They introduced the term collaboration transparency to encompass all types of single-user application sharing, screen sharing and window sharing.
Reference: [14] <author> D. Garfinkel, B.C. Welti and T.W. Yip, </author> <title> "HP SharedX: A Tool for Real-Time Collaboration," </title> <journal> HP Journal, </journal> <month> April </month> <year> 1994, </year> <pages> pp. 23-26. </pages>
Reference-contexts: They introduced the term collaboration transparency to encompass all types of single-user application sharing, screen sharing and window sharing. Many collaboration-transparency systems have been implemented, particularly on the X Window System, such as Old Dominion University's XTV [3], Hewlett Packard's SharedX <ref> [14] </ref> and Sun Microsystem's ShowMe SharedApp [52]. Commercial collaboration-transparency systems exist on Microsoft Windows and Macintosh platforms, as well, including Microsoft's NetMeeting [50], Intel's ProShare [47] and Faral-lon's Timbuktu [46].
Reference: [15] <author> T.C.N. Graham, T. Urnes and R. Nejabi, </author> <title> "Efficient Distributed Implementation of Semi-Replicated Synchronous Groupware," </title> <booktitle> Proc. UIST 96, </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1996, </year> <pages> pp. 1-10. </pages>
Reference-contexts: The Clock groupware system of Graham et al. uses a conceptually centralized model-view-control paradigm where the shared data are held in the centralized model, but updates are cached, pre-sent, or pre-fetched, essentially replicating the data <ref> [15] </ref>. Centralized architectures guarantee consistency of the data among participants, but require high network bandwidth to distribute displays, suffer from latency as each user interaction must travel to and from the central location, and are not fault tolerant when the central host crashes.
Reference: [16] <author> S. Greenberg and D. Marwood, </author> <title> "Real Time Groupware as a Distributed System: Concurrency Control and its Effect on the Interface," </title> <booktitle> Proc. Conf. on Computer-Supported Cooperative Work 1994, </booktitle> <publisher> ACM Press, </publisher> <year> 1994, </year> <pages> pp. 207-217, </pages>
Reference-contexts: By definition, floor control prohibits participants from working simultaneously in the application, limiting participants' ability to collaborate in parallel. To allow concurrent work in a replicated environment, two approaches are commonly used in collaboration-aware applications: serialization and locking <ref> [16, 32] </ref>. One way to ensure that all replicas of data are consistent is to impose a total ordering on events which change the data so that each copy receives events in the same order. This process is known as serializa 4 tion.
Reference: [17] <author> S. Greenberg and M. Roseman, "GroupWeb: </author> <title> A Groupware Web Browser," Proc. Computer-Supported Cooperative Work, Video Program, </title> <publisher> ACM Press, </publisher> <address> New York, </address> <month> November, </month> <year> 1996, </year> <note> p. 7. </note>
Reference-contexts: However, G. Smith as well as Greenberg and Roseman demonstrate that simple telepointers are not sufficient in location-relaxed WYSIWIS environments, where users are not necessarily simultaneously viewing the same location in the shared application <ref> [39, 17] </ref>. To provide more detailed workspace awareness information in addition to telepointers, collaboration-aware applications often use multi-user versions of standard single-user widgets that indicate remote participants' locations.
Reference: [18] <author> S. Greenberg and M. Roseman, </author> <title> "Groupware Toolkits for Synchronous Work," </title> <editor> in M. Beaudouin-Lafon (ed.), </editor> <booktitle> Trends in CSCW, </booktitle> <publisher> John Wiley & Sons, (in press). </publisher>
Reference-contexts: The goal of these toolkits is to facilitate the development of collaboration-aware applications so that they are only "slightly more difficult" to develop than otherwise functionally equivalent single-user applications [37, 26]. Greenberg and Roseman state that groupware toolkits should provide four major components <ref> [18] </ref>: programming abstractions, run-time architecture, session managers, and groupware interface components. 2.1.1 Groupware Programming Abstractions Groupware application toolkits must provide the programmer with the tools necessary to develop distributed systems. These tools facilitate the development of distributed systems, so that the developer need not be concerned with implementation details. <p> Distributed software architectures fall in a range from centralized, where the shared application is maintained in one physical location, to replicated, where the shared application is copied to each collaborator <ref> [18, 10] </ref>. Hybrid architectures also exist, such as Patterson et al.'s centralized notification server, where only the shared data are centralized and views are replicated [33]. <p> There are two classes of multi-user widgets: 1) collaboration specific widgets, such as the telepointers shown in Figure 1, as well as participant information lists and session browsers, and 2) multi-user versions of standard single-user widgets, such as the multiuser text widget shown in Figure 2 <ref> [18] </ref>. Telepointers are representations of remote users' cursor positions and thus provide location awareness. When collaborators share precisely the same view of the application, a groupware principle known as strict WYSIWIS (What You See Is What I See) [41], telepoint-ers provide substantial workspace awareness information. However, G. <p> embedded in a multi-user text widget: workspace awareness through split scrollbars, locking state information through graphical feedback, and edit history through author-unique colored text (not shown) [32]. 2.1.4 Session Managers Finally, a groupware toolkit must provide some means by which users may start, find, join and leave a collaborative session <ref> [12, 18] </ref>. Group-ware toolkits provide developers with default session management facilities and the ability to implement new policies.
Reference: [19] <author> J. Grudin, </author> <title> "Computer-Supported Cooperative Work: History and Focus," </title> <journal> IEEE Computer, </journal> <volume> (27)5, </volume> <month> May, </month> <year> 1994, </year> <pages> pp. 19-26. </pages>
Reference-contexts: Collaborative interactions fall in a range from asynchronous, where the points of interaction are separated by relatively long periods of time, to synchronous, where the interactions are simultaneous or separated by short periods of time <ref> [19] </ref>. The systems I am exploring primarily support synchronous collaborations. Applications of synchronous collaborative software include shared whiteboards, text chat, multi-user text editors, distributed presentation systems, data visualizations, and computer-aided design. A collaborative application is either collaboration aware or collaboration unaware.
Reference: [20] <author> C. Gutwin, S. Greenberg and M. Roseman, </author> <title> "A Usability Study of Awareness Widgets in a Shared Workspace Groupware System," </title> <booktitle> Proc. Computer-Supported Cooperative Work, </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <month> November, </month> <year> 1996, </year> <pages> pp. 258-67. 27 </pages>
Reference-contexts: In both serialization and locking, optimistic policies allow local interactions to be processed quickly. 2.1.3 Groupware Widgets Workspace awareness is the up-to-the-minute knowledge of remote participants' interactions and locations within an application <ref> [20] </ref>. Collaborative applications use multi-user interface widgets to provide workspace awareness. <p> These have been shown to enhance the usability of collaborative ap 5 names may also be used to distinguish users. is indicated with a colored scrollbar. The lock icon indicates that a participant holds a lock on the selected text. 6 plications <ref> [20] </ref>. <p> In contrast, collaboration-aware applications support relaxed WYSI-WIS, where participants can view different portions of shared data simultaneously, permitting more flexible collaboration styles <ref> [20, 40] </ref>. 2.3.3 Concurrent Work A concern for collaboration transparency is maintaining the intended behavior of the shared application. If events are naively broadcast between collaborators, event streams for non-atomic events such as mouse drags become confused, and conflicts between collaborators arise. <p> However, because CSCW is a relatively new field, few studies of the collaborative usability of multi-user widgets have been performed and the effectiveness of particular techniques remains in question <ref> [20, 5] </ref>. The proposed evaluation will aim to validate the effectiveness of multi-user aware widgets and inform the design of new multi-user interface techniques in this system and others. Following an iterative design-build-evaluate process, I propose a two-phase evaluation.
Reference: [21] <author> R.D. Hill, T. Brinck, S.L. Rohall, J.F. Patterson, and W. Wilner, </author> <title> "The Rendezvous architecture and language for constructing multi-user applications," </title> <journal> ACM Transactions on Computer-Human Interaction, </journal> <volume> 1(2), </volume> <month> June, </month> <year> 1994, </year> <month> p81-125. </month>
Reference-contexts: In this section, I describe the relevant research, highlighting the distinct collaboration features offered by each approach. 2.1 Collaboration Aware A collaboration-aware application may be developed ad hoc or with a groupware toolkit such as Bellcore's Rendezvous <ref> [21] </ref>, the University of Calgary's GroupKit [37], the University of Michigan's Collaboratory Builder's Environment (CBE) [26], the National Center for Supercomputing Application's Habanero [51], or Old Dominion University's Java Collaborator Toolset (JCT) [1]. <p> However, the complexity of maintaining consistency among shared data replicas makes the centralized approach attractive. Centralized versus replicated architectures are further discussed in the context of collaboration transparency in Section 2.3.1. Groupware toolkits generally support a replicated or semi-replicated architecture (with the notable exception of Rendezvous <ref> [21] </ref>), and provide the developer with mechanisms necessary for maintaining data consistency within that environment while removing the burden of the implementation details. Concurrency Control Replicated architectures require care to ensure data consistency.
Reference: [22] <author> P. Isenhour, C.A. Shaffer, J. Begole, J. Nielsen, and M. Abrams, "Sluice: </author> <title> A Java-Based Framework for Collaborative Interactive Modular Visualization Environments," </title> <note> submitted to IEEE Visualization'97, currently under review. </note>
Reference-contexts: Our virtual school prototype is a collaborative virtual environment (CVE) in which students can work together simultaneously [48]. One of the unique aspects of this environment is that we are implementing a data-flow model by which students can link the output of one application to the input of another <ref> [22] </ref>. The prototype, developed in Java, uses the Java Remote Method Invocation (RMI) package, and an experimental multi-point communications package from JavaSoft, called Java Shared Data API (JSDA) [45]. JSDA provides programming abstractions to route messages to participants in a collaboration.
Reference: [23] <author> O. Jones, </author> <title> "Multidisplay Software in X: A Survey of Architectures," The X Resource (6), </title> <booktitle> Spring 1993, </booktitle> <pages> pp. 97-113. </pages>
Reference-contexts: In Figure 3, a central conference agent receives all user input and serializes the events so that a single instance of an application receives a single stream of events <ref> [23, 25] </ref>. The conference agent then distributes display updates to the participants' windowing systems. In a replicated collaboration-transparency architecture, also called event broadcasting, each participant has a copy of the application and user inputs are distributed to each copy.
Reference: [24] <author> J.C. Lauwers and K.A. Lantz, </author> <title> "Collaboration Awareness in Support of Collaboration Transparency: Requirements for the Next Generation of Shared-Window Systems," </title> <booktitle> Proc. Human Factors in Computing Systems, </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1990, </year> <pages> pp. 303-311. </pages>
Reference-contexts: After modification, multiple workers may share the view and interact with the application. This is called collaboration transparency, because the fact that more than one user is providing inputs is transparent to the application <ref> [24] </ref>. The primary advantage of collaboration transparency is that an application programmer need not write any new code to make an application collaborative. <p> In 1990, Lauwers et al. advanced single-user application sharing to the granularity of individual windows, referred to as window sharing <ref> [24, 25] </ref>. They introduced the term collaboration transparency to encompass all types of single-user application sharing, screen sharing and window sharing. Many collaboration-transparency systems have been implemented, particularly on the X Window System, such as Old Dominion University's XTV [3], Hewlett Packard's SharedX [14] and Sun Microsystem's ShowMe SharedApp [52]. <p> In addition to alleviating some problems of collaboration transparency, they contend that this architecture will facilitate the implementation of collaboration-aware applications. 2.4.2 System Support for Collaboration Lauwers and Lantz propose that the underlying window system provide collaboration-aware features to support collaboration transparency <ref> [24] </ref>. They enumerated several desirable features of application-sharing systems that can only be implemented by the underlying system, such as transparent windows for telepointers and having distinct visual representations of shared windows.
Reference: [25] <author> J.C. Lauwers, T.A. Joseph, K.A. Lantz and A.L. Romanow, </author> <title> "Replicated Architectures for Shared Windows Systems: A Critique," </title> <booktitle> Proceedings of Office Information Systems 1990; SIGOIS Bulletin vol 11, issues 2,3, </booktitle> <pages> pp. 249-60. </pages>
Reference-contexts: In 1990, Lauwers et al. advanced single-user application sharing to the granularity of individual windows, referred to as window sharing <ref> [24, 25] </ref>. They introduced the term collaboration transparency to encompass all types of single-user application sharing, screen sharing and window sharing. Many collaboration-transparency systems have been implemented, particularly on the X Window System, such as Old Dominion University's XTV [3], Hewlett Packard's SharedX [14] and Sun Microsystem's ShowMe SharedApp [52]. <p> In Figure 3, a central conference agent receives all user input and serializes the events so that a single instance of an application receives a single stream of events <ref> [23, 25] </ref>. The conference agent then distributes display updates to the participants' windowing systems. In a replicated collaboration-transparency architecture, also called event broadcasting, each participant has a copy of the application and user inputs are distributed to each copy. <p> Consistency among the separate instances of the application is assured because each deterministic application receives the same input stream. Lauwers et al. demonstrated that the replicated architecture has lower network traffic requirements than the centralized approach, because only the inputs from each participant must be transmitted to the others <ref> [25] </ref>. The lower network demand is apparent when we note that inputs are transmitted in both replicated and centralized architectures, but the centralized approach must also distribute display information. This savings is especially relevant when sharing applications over wide area networks (WAN), like the Internet. <p> Comparison of Architectures Replicated or semi-replicated architectures are common in collaboration-aware groupware toolkits, such as Groupkit and DistView [37, 34], primarily because of their lower network bandwidth requirement, as discussed in Section 2.1.2. Despite this advantage, replication has previously been deemed unsuitable for collaboration transparency <ref> [10, 25, 30] </ref>. Researchers have identified several difficulties that must be addressed to maintain consistency among the replicas: heterogeneous computer environments; access to application executables; apparently nondeterministic application behavior; and distributing inputs other than user input events (files, sockets, etc.). <p> To further support flexible sharing, Lauwers et al. postulated that a replicated architecture, as described in this section and illustrated in Figure 4, would support greater flexibility in the collaboration by allowing participants to modify their application replicas individually <ref> [25] </ref>. However, they did not report results relating to this. 2.5 A New Approach to Improving Transparency Collaboration-awareness and collaboration transparency are at the ends of the range of support for synchronous collaborative software. Figure 6 summarizes the characteristics of each approach. <p> This is a result of the philosophies of minimizing the difference in individual versus group use of the application and the desire to minimize modifications to existing software <ref> [25] </ref>. 4.1.2 Extending Transparency to Include Awareness Today, the user interface of an application is often developed by combining graphical user interface (GUI) toolkit objects, or widgets. As useful widgets become popular, application platform vendors provide these widgets as standard components of their Application Program Interface (API). <p> Implementing a replicated architecture for collaboration transparency is a first step in bringing to it the benefits of collaboration awareness. Lauwers et al. postulated that a replicated architecture might support greater flexibility in the collaboration by allowing participants to modify their application replicas individually <ref> [25] </ref>. JAMM demonstrates some promise of this.
Reference: [26] <author> J. Lee, A. Prakash, T. Jaeger and G. Wu, </author> <title> "Supporting Multi-User, </title> <booktitle> Multi-Applet Workspaces in CBE," Proc. Computer-Supported Cooperative Work, </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1996, </year> <pages> pp. 344-53. </pages>
Reference-contexts: section, I describe the relevant research, highlighting the distinct collaboration features offered by each approach. 2.1 Collaboration Aware A collaboration-aware application may be developed ad hoc or with a groupware toolkit such as Bellcore's Rendezvous [21], the University of Calgary's GroupKit [37], the University of Michigan's Collaboratory Builder's Environment (CBE) <ref> [26] </ref>, the National Center for Supercomputing Application's Habanero [51], or Old Dominion University's Java Collaborator Toolset (JCT) [1]. The goal of these toolkits is to facilitate the development of collaboration-aware applications so that they are only "slightly more difficult" to develop than otherwise functionally equivalent single-user applications [37, 26]. <p> The goal of these toolkits is to facilitate the development of collaboration-aware applications so that they are only "slightly more difficult" to develop than otherwise functionally equivalent single-user applications <ref> [37, 26] </ref>. Greenberg and Roseman state that groupware toolkits should provide four major components [18]: programming abstractions, run-time architecture, session managers, and groupware interface components. 2.1.1 Groupware Programming Abstractions Groupware application toolkits must provide the programmer with the tools necessary to develop distributed systems. <p> Taking advantage of Java's platform-independence and its widespread availability through the WWW, developers have created many applets. If Java applets could be shared, then users of the WWW would be able to collaborate synchronously. Although there are Java-based groupware toolkits <ref> [1, 26, 51] </ref>, no collaboration-transparency system exists for Java. In prior work, Struble, Shaffer, Smith and I investigated an approach to sharing single-user Java applets [8, 9]. Our prototype system, called JAMM (Java Applets Made Multi-user), demonstrates the feasibility of event broadcasting. <p> Difficult to implement It is premature to say how difficult a fully featured implementation of this approach will be. 6.2 Collaboration Transparency in a CVE Collaborative environments, such as Teamrooms [36] and CBE <ref> [26] </ref>, allow participants to work together with collaboration-aware applications in the environment. However, only collaboration-aware applications written for the particular environment may be used collabora-tively. Although users can add single-user applications to the shared environment, these may only be used individually.
Reference: [27] <author> L. McGuffin and G.M. Olson, ShrEdit, </author> <title> a Shared Electronic Workspace, </title> <institution> Cognitive Science and Machine Intelligence Laboratory, University of Michigan, </institution> <year> 1992. </year>
Reference-contexts: At the coarsest granularity, floor control is a locking approach, but it disallows concurrent work. However, collaboration-aware applications that use locking, such as DistView, DistEdit [34], Calliope [32], and ShrEdit <ref> [27] </ref>, provide finer grained locking, allowing collaborators to safely manipulate different portions of the shared data concurrently, such as paragraphs, sentences or words in a text editor.
Reference: [28] <author> J. Menges and K. Jeffay, </author> <title> "Inverting X: An Architecture for a Shared Distributed Window System," </title> <booktitle> Proc., Third Workshop on Enabling Technologies: Infrastructure for Collaborative Enterprises, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1994, </year> <pages> pp. 53-64. </pages>
Reference-contexts: This forces a tightly-coupled collaboration, since participants must view the same portions of the shared data simultaneously. However, group work is not always so tightly coupled and many researchers have found this restriction to be the most serious problem with collaboration transparency <ref> [28, 34, 35, 38, 43] </ref>. In contrast, collaboration-aware applications support relaxed WYSI-WIS, where participants can view different portions of shared data simultaneously, permitting more flexible collaboration styles [20, 40]. 2.3.3 Concurrent Work A concern for collaboration transparency is maintaining the intended behavior of the shared application. <p> The two that did not crash were not as fully featured as the less robust systems. In the end, they only grudgingly recommended one system, SharedX-DFKI. Abdel-Wahab, Menges and Jeffay <ref> [2, 28] </ref> report that collaboration-transparency systems are difficult to implement correctly in general and particularly on the X Window System, because of the X client-server architecture. 2.4 Improving Collaboration Transparency Some of the shortcomings described in Section 2.3 are being addressed by researchers. 12 2.4.1 Improving Flexibility Menges and Jeffay attribute <p> of the shortcomings described in Section 2.3 are being addressed by researchers. 12 2.4.1 Improving Flexibility Menges and Jeffay attribute the inflexibility and implementation difficulty of X-based collaboration-transparency systems to the "inverted nature" of the client-server architecture of X, where the user is "nearer" the server than the application client <ref> [28] </ref>. This architecture, they argue, does not allow efficient window sharing, because the physical representation of windows on the display and their abstract representation in memory are tightly coupled in the X server.
Reference: [29] <author> J. Menges, </author> <type> Personal communication, </type> <month> March 4, </month> <year> 1997. </year>
Reference-contexts: Menges reports that his prototype SDWS, 13 teristics. called Concur, supports "basic window sharing," but whether and to what extent the proposed SDWS architecture will solve or alleviate the problems of inflexible sharing and difficult implementation requires further investigation <ref> [29] </ref>. Whereas Lauwers and Lantz propose system-level support for collaboration transparency, the level and details of that support have not been enumerated or tested.
Reference: [30] <author> W. Minenko, </author> <title> "The Application Sharing Technology," The X Advisor, </title> <type> 1(1), </type> <month> June </month> <year> 1995. </year> <note> URL: http://www.unx.com/DD/advisor/ </note>
Reference-contexts: Comparison of Architectures Replicated or semi-replicated architectures are common in collaboration-aware groupware toolkits, such as Groupkit and DistView [37, 34], primarily because of their lower network bandwidth requirement, as discussed in Section 2.1.2. Despite this advantage, replication has previously been deemed unsuitable for collaboration transparency <ref> [10, 25, 30] </ref>. Researchers have identified several difficulties that must be addressed to maintain consistency among the replicas: heterogeneous computer environments; access to application executables; apparently nondeterministic application behavior; and distributing inputs other than user input events (files, sockets, etc.).
Reference: [31] <author> W. Minenko and J. Schweitzer, </author> <title> "An Advanced Application Sharing System for Synchronous Collaboration in Heterogeneous Environments," </title> <journal> SIGOIS Bulletin, </journal> <volume> (15)2, </volume> <month> December </month> <year> 1994, </year> <pages> pp. 40-44. </pages>
Reference-contexts: Thus, it is apparent that developing collaboration-aware applications is at least somewhat more difficult than collaboration-unaware applications. Another disadvantage, cited by Minenko and Schweitzer, is that using a collaboration-aware application requires the user to learn a different application than the corresponding single-user application, with which they are already familiar <ref> [31] </ref>. Although, it is possible to build a collaboration-aware version of an existing system, such enhancement has not yet been made to any well-known system. <p> Minenko and Schweitzer claim that collaboration transparency eases a user's transition from individual to group work, because they collaborate within their well-known applications <ref> [31] </ref>.
Reference: [32] <author> A. Mitchell, </author> <title> "Communication and Shared Understanding in Collaborative Writing," </title> <type> MS Thesis, </type> <institution> University of Toronto, Department of Computer Science, </institution> <year> 1996. </year>
Reference-contexts: By definition, floor control prohibits participants from working simultaneously in the application, limiting participants' ability to collaborate in parallel. To allow concurrent work in a replicated environment, two approaches are commonly used in collaboration-aware applications: serialization and locking <ref> [16, 32] </ref>. One way to ensure that all replicas of data are consistent is to impose a total ordering on events which change the data so that each copy receives events in the same order. This process is known as serializa 4 tion. <p> At the coarsest granularity, floor control is a locking approach, but it disallows concurrent work. However, collaboration-aware applications that use locking, such as DistView, DistEdit [34], Calliope <ref> [32] </ref>, and ShrEdit [27], provide finer grained locking, allowing collaborators to safely manipulate different portions of the shared data concurrently, such as paragraphs, sentences or words in a text editor. <p> Mitchell's multi-user text editor, Calliope (Figure 2), demonstrates some of the features that can be embedded in a multi-user text widget: workspace awareness through split scrollbars, locking state information through graphical feedback, and edit history through author-unique colored text (not shown) <ref> [32] </ref>. 2.1.4 Session Managers Finally, a groupware toolkit must provide some means by which users may start, find, join and leave a collaborative session [12, 18]. Group-ware toolkits provide developers with default session management facilities and the ability to implement new policies.
Reference: [33] <author> J.F. Patterson, M. Day and J. Kucan, </author> <title> "Notification servers for synchronous groupware," </title> <booktitle> Proc. Computer-Supported Cooperative Work, </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <month> November, </month> <year> 1996, </year> <pages> pp. 122-29. </pages>
Reference-contexts: Hybrid architectures also exist, such as Patterson et al.'s centralized notification server, where only the shared data are centralized and views are replicated <ref> [33] </ref>. The Clock groupware system of Graham et al. uses a conceptually centralized model-view-control paradigm where the shared data are held in the centralized model, but updates are cached, pre-sent, or pre-fetched, essentially replicating the data [15].
Reference: [34] <author> A. Prakash and H.S. Shim, "DistView: </author> <title> Support for Building Efficient Collaborative Applications using Replicated Objects," </title> <booktitle> Proc. Computer-Supported Cooperative Work, </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1994, </year> <pages> pp. 153-64. </pages>
Reference-contexts: At the coarsest granularity, floor control is a locking approach, but it disallows concurrent work. However, collaboration-aware applications that use locking, such as DistView, DistEdit <ref> [34] </ref>, Calliope [32], and ShrEdit [27], provide finer grained locking, allowing collaborators to safely manipulate different portions of the shared data concurrently, such as paragraphs, sentences or words in a text editor. <p> In the following sections, I detail these critiques and contrast them with collaboration-aware applications. 2.3.1 High Network Bandwidth Prakash et al. complain that application-sharing systems require higher network bandwidth than collaboration-aware applications <ref> [34] </ref>. Competing Architectures The high bandwidth requirement is true of the most common approach to implementing collaboration transparency, centralized display broadcasting, where participants receive only a graphical depiction of the shared application. <p> This savings is especially relevant when sharing applications over wide area networks (WAN), like the Internet. Comparison of Architectures Replicated or semi-replicated architectures are common in collaboration-aware groupware toolkits, such as Groupkit and DistView <ref> [37, 34] </ref>, primarily because of their lower network bandwidth requirement, as discussed in Section 2.1.2. Despite this advantage, replication has previously been deemed unsuitable for collaboration transparency [10, 25, 30]. <p> This forces a tightly-coupled collaboration, since participants must view the same portions of the shared data simultaneously. However, group work is not always so tightly coupled and many researchers have found this restriction to be the most serious problem with collaboration transparency <ref> [28, 34, 35, 38, 43] </ref>. In contrast, collaboration-aware applications support relaxed WYSI-WIS, where participants can view different portions of shared data simultaneously, permitting more flexible collaboration styles [20, 40]. 2.3.3 Concurrent Work A concern for collaboration transparency is maintaining the intended behavior of the shared application.
Reference: [35] <author> W. Reinhard, J. Schweitzer, G. Volksen and M. Weber, </author> <title> "CSCW Tools: Concepts and Architectures," </title> <journal> IEEE Computer, </journal> <volume> (27)5, </volume> <month> May, </month> <year> 1994, </year> <pages> pp. 28-36. </pages>
Reference-contexts: This forces a tightly-coupled collaboration, since participants must view the same portions of the shared data simultaneously. However, group work is not always so tightly coupled and many researchers have found this restriction to be the most serious problem with collaboration transparency <ref> [28, 34, 35, 38, 43] </ref>. In contrast, collaboration-aware applications support relaxed WYSI-WIS, where participants can view different portions of shared data simultaneously, permitting more flexible collaboration styles [20, 40]. 2.3.3 Concurrent Work A concern for collaboration transparency is maintaining the intended behavior of the shared application.
Reference: [36] <author> M. Roseman and S. Greenberg, "Teamrooms: </author> <title> Network Places for Collaboration," </title> <booktitle> Proc. Computer-Supported Cooperative Work, </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <month> November, </month> <year> 1996, </year> <pages> pp. 325-33. </pages>
Reference-contexts: Difficult to implement It is premature to say how difficult a fully featured implementation of this approach will be. 6.2 Collaboration Transparency in a CVE Collaborative environments, such as Teamrooms <ref> [36] </ref> and CBE [26], allow participants to work together with collaboration-aware applications in the environment. However, only collaboration-aware applications written for the particular environment may be used collabora-tively. Although users can add single-user applications to the shared environment, these may only be used individually.
Reference: [37] <author> M. Roseman and S. Greenberg, </author> <title> "Building Real Time Groupware with GroupKit, A Groupware Toolkit," Transactions on Computer Human Interaction, </title> <publisher> ACM Press, </publisher> <address> New York, </address> <month> March </month> <year> 1996, </year> <note> 3(1), p66-106. </note>
Reference-contexts: In this section, I describe the relevant research, highlighting the distinct collaboration features offered by each approach. 2.1 Collaboration Aware A collaboration-aware application may be developed ad hoc or with a groupware toolkit such as Bellcore's Rendezvous [21], the University of Calgary's GroupKit <ref> [37] </ref>, the University of Michigan's Collaboratory Builder's Environment (CBE) [26], the National Center for Supercomputing Application's Habanero [51], or Old Dominion University's Java Collaborator Toolset (JCT) [1]. <p> The goal of these toolkits is to facilitate the development of collaboration-aware applications so that they are only "slightly more difficult" to develop than otherwise functionally equivalent single-user applications <ref> [37, 26] </ref>. Greenberg and Roseman state that groupware toolkits should provide four major components [18]: programming abstractions, run-time architecture, session managers, and groupware interface components. 2.1.1 Groupware Programming Abstractions Groupware application toolkits must provide the programmer with the tools necessary to develop distributed systems. <p> Schuckmann et al. claim that despite recent advances in groupware toolkits, architectures and frameworks, "building groupware applications is still a complex task." [38] The developers of collaborative application toolkits, like GroupKit and COAST, hope to make the development of collaboration-aware applications only "slightly more difficult" than equivalent single-user applications <ref> [37] </ref>. Thus, it is apparent that developing collaboration-aware applications is at least somewhat more difficult than collaboration-unaware applications. <p> This savings is especially relevant when sharing applications over wide area networks (WAN), like the Internet. Comparison of Architectures Replicated or semi-replicated architectures are common in collaboration-aware groupware toolkits, such as Groupkit and DistView <ref> [37, 34] </ref>, primarily because of their lower network bandwidth requirement, as discussed in Section 2.1.2. Despite this advantage, replication has previously been deemed unsuitable for collaboration transparency [10, 25, 30].
Reference: [38] <author> C. Schuckmann, L. Kirchner, J. Schummer, and J. Haake, </author> <title> "Designing object-oriented synchronous groupware with COAST," </title> <booktitle> Proc. Computer-Supported Cooperative Work, </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <month> November </month> <year> 1996, </year> <pages> pp. 30-38. </pages>
Reference-contexts: Schuckmann et al. claim that despite recent advances in groupware toolkits, architectures and frameworks, "building groupware applications is still a complex task." <ref> [38] </ref> The developers of collaborative application toolkits, like GroupKit and COAST, hope to make the development of collaboration-aware applications only "slightly more difficult" than equivalent single-user applications [37]. Thus, it is apparent that developing collaboration-aware applications is at least somewhat more difficult than collaboration-unaware applications. <p> This forces a tightly-coupled collaboration, since participants must view the same portions of the shared data simultaneously. However, group work is not always so tightly coupled and many researchers have found this restriction to be the most serious problem with collaboration transparency <ref> [28, 34, 35, 38, 43] </ref>. In contrast, collaboration-aware applications support relaxed WYSI-WIS, where participants can view different portions of shared data simultaneously, permitting more flexible collaboration styles [20, 40]. 2.3.3 Concurrent Work A concern for collaboration transparency is maintaining the intended behavior of the shared application. <p> This flexibility supports a more loosely-coupled collaboration than allowed under current implementations of collaboration transparency. 2.3.4 Detailed Group Awareness Schuckmann et al. point out that collaboration transparency does not provide detailed information concerning participants' actions and locations <ref> [38] </ref>. Because the participants of a collaboration-transparency system share a strict WYSIWIS view of the application, telepointers (Section 2.1.3) provide substantial workspace awareness information. However, as previously discussed, telepointers are insufficient in a relaxed WYSIWIS environment, such as I propose to introduce into collaboration transparency.
Reference: [39] <author> G. Smith, </author> <title> "Cooperative Virtual Environments: lessons from 2D multi user interfaces," </title> <booktitle> Proc. Computer-Supported Cooperative Work, </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <month> November, </month> <year> 1996, </year> <pages> pp. 390-98. </pages>
Reference-contexts: However, G. Smith as well as Greenberg and Roseman demonstrate that simple telepointers are not sufficient in location-relaxed WYSIWIS environments, where users are not necessarily simultaneously viewing the same location in the shared application <ref> [39, 17] </ref>. To provide more detailed workspace awareness information in addition to telepointers, collaboration-aware applications often use multi-user versions of standard single-user widgets that indicate remote participants' locations.
Reference: [40] <author> R.B. Smith, </author> <title> "What You See Is What I Think You See," </title> <booktitle> Spring '92 ACM Conf. on Computer Supported Collaborative Learning, SIGCUE Outlook, </booktitle> <volume> 21(3), </volume> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1992, </year> <pages> pp. 18-23. </pages>
Reference-contexts: In contrast, collaboration-aware applications support relaxed WYSI-WIS, where participants can view different portions of shared data simultaneously, permitting more flexible collaboration styles <ref> [20, 40] </ref>. 2.3.3 Concurrent Work A concern for collaboration transparency is maintaining the intended behavior of the shared application. If events are naively broadcast between collaborators, event streams for non-atomic events such as mouse drags become confused, and conflicts between collaborators arise. <p> The radar view will provide awareness information by which each participant can know what the others are viewing, supporting WYSIWITYS (What You See Is What I Think You See), a group-ware principle under which collaborators are aware of each other's field of view <ref> [40] </ref>. Users will be able to align their views, if desired. In a text area widget, edit-history awareness will be indicated by using unique colors or fonts for the text of each author.
Reference: [41] <author> M. Stefik, D.G. Bobrow, S.Lanning and D.Tatar, </author> <title> "WYSIWIS revised: Early experiences with multiuser interfaces," </title> <booktitle> Proceedings of the Conference on Computer Supported Collaborative Work, </booktitle> <address> Austin Texas, </address> <month> December </month> <year> 1986, </year> <pages> pp. 276-290. </pages>
Reference-contexts: Telepointers are representations of remote users' cursor positions and thus provide location awareness. When collaborators share precisely the same view of the application, a groupware principle known as strict WYSIWIS (What You See Is What I See) <ref> [41] </ref>, telepoint-ers provide substantial workspace awareness information. However, G. Smith as well as Greenberg and Roseman demonstrate that simple telepointers are not sufficient in location-relaxed WYSIWIS environments, where users are not necessarily simultaneously viewing the same location in the shared application [39, 17]. <p> semantics, transmitting only the information needed to maintain consistency and provide acceptable performance [11]. 10 sions 2.3.2 Strict WYSIWIS Application sharing systems provide participants with the same view of the application in a manner referred to as strict WYSIWIS, because the participants see exactly the same image of the application <ref> [41] </ref>. This forces a tightly-coupled collaboration, since participants must view the same portions of the shared data simultaneously. However, group work is not always so tightly coupled and many researchers have found this restriction to be the most serious problem with collaboration transparency [28, 34, 35, 38, 43].
Reference: [42] <author> J. Trevor, T. Rodden and J. Mariani, </author> <title> "The Use of Adapters to Support Cooperative Sharing," </title> <booktitle> Proc. Computer-Supported Cooperative Work, </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1994, </year> <month> p219-30. </month>
Reference-contexts: Extending single-user object functionality to multi-user is related to the work of Trevor, Rodden and Mariani in object interface adaptors. An adaptor provides different object functionality depending on the context of the object <ref> [42] </ref>. That is, the interface adapter provides different services for the same object method, depending on what object is making the method call. Their proposal is to layer adapters over objects, extending functionality with each layer, whereas I propose to replace the object entirely.
Reference: [43] <author> S. Zabele, </author> <title> S.L. Rohall and R.L. Vinciguerra, "High Performance Infrastructure for Visually-intensive CSCW Applications," </title> <booktitle> Proc. Computer-Supported Cooperative Work, </booktitle> <publisher> ACM Press, </publisher> <address> New York, </address> <month> October, </month> <year> 1994, </year> <pages> pp. 395-403. </pages> <address> URLs Referenced </address>
Reference-contexts: This forces a tightly-coupled collaboration, since participants must view the same portions of the shared data simultaneously. However, group work is not always so tightly coupled and many researchers have found this restriction to be the most serious problem with collaboration transparency <ref> [28, 34, 35, 38, 43] </ref>. In contrast, collaboration-aware applications support relaxed WYSI-WIS, where participants can view different portions of shared data simultaneously, permitting more flexible collaboration styles [20, 40]. 2.3.3 Concurrent Work A concern for collaboration transparency is maintaining the intended behavior of the shared application.
Reference: [44] <author> J. Begole, RadarPane, </author> <month> February </month> <year> 1997. </year> <note> http://simon.cs.vt.- edu/~begolej/javadocs/vt.cs.widgets.RadarPane.html </note>
Reference-contexts: The simulations are not synchronized, but in practice players do not notice the inconsistency. 5.3 Awareness Widgets I will need to implement some multi-user widgets. The multi-user scrollable panel displayed in Figure 8 is based on vt.cs.widgets.- RadarPane, which I developed, seen in Figure 10 <ref> [44] </ref>. RadarPane implements the same class interface as java.awt.ScrollPane (Figure 7), but does not extend it. This is because it is difficult to extend an AWT component that is bound to a platform-specific interface component, called a peer.
Reference: [45] <author> R. Burridge, </author> <title> A Shared Data Multi-point Delivery Service for Java, </title> <month> March </month> <year> 1997. </year> <note> www.javasoft.com/people/richb/jsda/ </note>
Reference-contexts: The prototype, developed in Java, uses the Java Remote Method Invocation (RMI) package, and an experimental multi-point communications package from JavaSoft, called Java Shared Data API (JSDA) <ref> [45] </ref>. JSDA provides programming abstractions to route messages to participants in a collaboration. As a test site for JSDA, I have been active in its design, testing and debugging. 5.2.2 Ppong! Ppong! is a Java two-player network game based on the classic Atari Pong [7].
Reference: [46] <author> Farallon's Timbuktu, </author> <month> February </month> <year> 1997. </year> <note> www.farallon.com/product/- tb2/tb2winover.html </note>
Reference-contexts: Commercial collaboration-transparency systems exist on Microsoft Windows and Macintosh platforms, as well, including Microsoft's NetMeeting [50], Intel's ProShare [47] and Faral-lon's Timbuktu <ref> [46] </ref>. Yet despite the availability of such systems, they are not commonly used. 2.3 Recognized Shortcomings There are several commonly cited critiques of collaboration transparency which may account for the lack of acceptance of these systems.
Reference: [47] <author> Intel Proshare, </author> <month> February </month> <year> 1997. </year> <note> www.intel.com/proshare/ </note>
Reference-contexts: Many collaboration-transparency systems have been implemented, particularly on the X Window System, such as Old Dominion University's XTV [3], Hewlett Packard's SharedX [14] and Sun Microsystem's ShowMe SharedApp [52]. Commercial collaboration-transparency systems exist on Microsoft Windows and Macintosh platforms, as well, including Microsoft's NetMeeting [50], Intel's ProShare <ref> [47] </ref> and Faral-lon's Timbuktu [46]. Yet despite the availability of such systems, they are not commonly used. 2.3 Recognized Shortcomings There are several commonly cited critiques of collaboration transparency which may account for the lack of acceptance of these systems.
Reference: [48] <author> P. Isenhour, </author> <title> LiNC Virtual School Prototype Documentation, </title> <month> March </month> <year> 1997. </year> <note> http://simon.cs.vt.edu/~nie/docs/ 29 </note>
Reference-contexts: Our virtual school prototype is a collaborative virtual environment (CVE) in which students can work together simultaneously <ref> [48] </ref>. One of the unique aspects of this environment is that we are implementing a data-flow model by which students can link the output of one application to the input of another [22].
Reference: [49] <author> D. Kang, </author> <note> Edit Draw, JavaCup International Winners, 1996, http://sunsite.utk.edu/winners circle/productivity tools/PRM-JATGT/draw.html </note>
Reference-contexts: Our prototype system, called JAMM (Java Applets Made Multi-user), demonstrates the feasibility of event broadcasting. Figure 9 shows a single-user applet being shared under JAMM. This drawing applet, called Edit Draw, was developed by Daewoong Kang and was one of the winners of the Java Cup International contest <ref> [49] </ref>. 21 under JAMM. 22 JAMM uses a replicated architecture, which has been shown to re-quire less network bandwidth than a centralized model, as described in Section 2.3.1. Whereas other current collaboration-transparency systems use a centralized architecture, most current collaboration-aware toolkits provide replicated architectures.
Reference: [50] <author> Microsoft NetMeeting, </author> <month> February </month> <year> 1997. </year> <note> www.microsoft.com/- netmeeting/ </note>
Reference-contexts: Many collaboration-transparency systems have been implemented, particularly on the X Window System, such as Old Dominion University's XTV [3], Hewlett Packard's SharedX [14] and Sun Microsystem's ShowMe SharedApp [52]. Commercial collaboration-transparency systems exist on Microsoft Windows and Macintosh platforms, as well, including Microsoft's NetMeeting <ref> [50] </ref>, Intel's ProShare [47] and Faral-lon's Timbuktu [46]. Yet despite the availability of such systems, they are not commonly used. 2.3 Recognized Shortcomings There are several commonly cited critiques of collaboration transparency which may account for the lack of acceptance of these systems.
Reference: [51] <institution> National Center for Supercomputing Applications, Habanero, </institution> <month> June </month> <year> 1996. </year> <note> www.ncsa.uiuc.edu/SDG/Software/Habanero/ </note>
Reference-contexts: distinct collaboration features offered by each approach. 2.1 Collaboration Aware A collaboration-aware application may be developed ad hoc or with a groupware toolkit such as Bellcore's Rendezvous [21], the University of Calgary's GroupKit [37], the University of Michigan's Collaboratory Builder's Environment (CBE) [26], the National Center for Supercomputing Application's Habanero <ref> [51] </ref>, or Old Dominion University's Java Collaborator Toolset (JCT) [1]. The goal of these toolkits is to facilitate the development of collaboration-aware applications so that they are only "slightly more difficult" to develop than otherwise functionally equivalent single-user applications [37, 26]. <p> Taking advantage of Java's platform-independence and its widespread availability through the WWW, developers have created many applets. If Java applets could be shared, then users of the WWW would be able to collaborate synchronously. Although there are Java-based groupware toolkits <ref> [1, 26, 51] </ref>, no collaboration-transparency system exists for Java. In prior work, Struble, Shaffer, Smith and I investigated an approach to sharing single-user Java applets [8, 9]. Our prototype system, called JAMM (Java Applets Made Multi-user), demonstrates the feasibility of event broadcasting.
Reference: [52] <author> SunSolutions, </author> <title> The Complete Guide to ShowMe 2.0.1, Sun Technology Enterprises, </title> <publisher> Inc., </publisher> <address> Mountain View, CA, </address> <month> June </month> <year> 1994. </year> <note> www.sun.com/products-n-solutions/sw/ShowMe/products/- ShowMe SharedApp.html 30 </note>
Reference-contexts: They introduced the term collaboration transparency to encompass all types of single-user application sharing, screen sharing and window sharing. Many collaboration-transparency systems have been implemented, particularly on the X Window System, such as Old Dominion University's XTV [3], Hewlett Packard's SharedX [14] and Sun Microsystem's ShowMe SharedApp <ref> [52] </ref>. Commercial collaboration-transparency systems exist on Microsoft Windows and Macintosh platforms, as well, including Microsoft's NetMeeting [50], Intel's ProShare [47] and Faral-lon's Timbuktu [46].
References-found: 52

