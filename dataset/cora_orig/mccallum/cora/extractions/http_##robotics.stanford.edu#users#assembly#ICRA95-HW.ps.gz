URL: http://robotics.stanford.edu/users/assembly/ICRA95-HW.ps.gz
Refering-URL: http://robotics.stanford.edu/users/assembly/pubs.html
Root-URL: http://www.cs.stanford.edu
Title: Assembly Partitioning  along Simple Paths: the Case of Multiple Translations  
Author: Dan Halperin Randall H. Wilson 
Address: Stanford, CA 94305  Albuquerque, NM 87185  
Affiliation: Robotics Laboratory Department of Computer Science Stanford University  Intelligent Systems and Robotics Center Sandia National Laboratories  
Note: To appear in Proc. IEEE ICRA '95  
Abstract: We consider the following problem that arises in assembly planning: given an assembly, identify a subassembly that can be removed as a rigid object without disturbing the rest of the assembly. This is the assembly partitioning problem. Specifically, we consider planar assemblies of simple polygons and subassembly removal paths consisting of a single finite translation followed by a translation to infinity. Such paths are typical of the capabilities of simple actuators in fixed automation and other high-volume assembly machines. We present a polynomial-time algorithm to identify such a subassembly and removal path. We discuss extending the algorithm to 3D, other types of motions typical in non-robotic automated assembly, and motions consisting of more than two translations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. M. Arkin, R. Connelly, and J. S. B. Mitchell. </author> <title> On monotone paths among obstacles, with applications to planning assemblies. </title> <booktitle> In Proc. of the 5th ACM Symp. on Computational Geometry, </booktitle> <pages> pages 334-343, </pages> <year> 1989. </year>
Reference-contexts: On the other hand, polynomial-time partitioning is possible when the motions are limited to single translations to infinity: Arkin et al. <ref> [1] </ref> present an algorithm for planar assemblies of polygons, and [12, 13] consider assemblies of polyhedra. This paper generalizes the non-directional blocking graph (or NDBG) of [13] to motions consisting of multiple translations.
Reference: [2] <author> M. de Berg, L. J. Guibas, and D. Halperin. </author> <title> Vertical decompositions for triangles in 3-space (the full version). </title> <type> Technical Report RUU-CS-94-29, </type> <institution> Utrecht University, </institution> <year> 1994. </year> <booktitle> Also in Proc. of the 10th ACM Symp. on Computational Geometry, </booktitle> <year> 1994, </year> <pages> pp. 1-10. </pages>
Reference-contexts: This can be done in time very close to linear in the number of cells in the arrangement, i.e. roughly O (n 6 ) time, with a simple spatial sweep algorithm <ref> [2] </ref> (the algorithm in [2] incurs an extra polylog-arithmic factor, which is negligible here due to other steps of our algorithm). <p> This can be done in time very close to linear in the number of cells in the arrangement, i.e. roughly O (n 6 ) time, with a simple spatial sweep algorithm <ref> [2] </ref> (the algorithm in [2] incurs an extra polylog-arithmic factor, which is negligible here due to other steps of our algorithm).
Reference: [3] <author> E. Dunn, </author> <title> Sales Engineer, Bodine Assembly and Test Systems. </title> <type> Personal communication, </type> <month> April </month> <year> 1994. </year>
Reference-contexts: For this reason, they are often chosen over general-purpose robots for assembly of high-volume products. However, designing such an assembly system for a given product is a complex process, often requiring eight months or more from the time prototype parts are available <ref> [3] </ref>. Reducing this lead time would allow faster time-to-market with lower cost for many high-volume products. fl Work on this paper by the first author has been supported by a grant from the Stanford Integrated Manufacturing Association (SIMA), by NSF/ARPA Grant IRI-9306544, and by NSF Grant CCR-9215219.
Reference: [4] <author> L. Guibas and M. Sharir. </author> <title> Combinatorics and algorithms of arrangements. </title> <editor> In J. Pach, editor, </editor> <booktitle> New Trends in Discrete and Computational Geometry, </booktitle> <pages> pages 9-36. </pages> <publisher> Springer, </publisher> <year> 1993. </year>
Reference-contexts: The surfaces (or more precisely, surface patches) in S 1 and S 2 are clearly algebraic of bounded degree. It is well known that the maximum number of cells in a 3D arrangement induced by m such surfaces is O (m 3 ) (see, e.g., <ref> [4, 5, 11] </ref>). Since there are O (n 2 ) surfaces in each of S 1 and S 2 , the maximum number of cells in the subdivision of (x; y; )-space is O (n 6 ).
Reference: [5] <author> D. Halperin. </author> <title> Algorithmic motion planning via arrangements of curves and of surfaces. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, Tel-Aviv Univ., </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: The surfaces (or more precisely, surface patches) in S 1 and S 2 are clearly algebraic of bounded degree. It is well known that the maximum number of cells in a 3D arrangement induced by m such surfaces is O (m 3 ) (see, e.g., <ref> [4, 5, 11] </ref>). Since there are O (n 2 ) surfaces in each of S 1 and S 2 , the maximum number of cells in the subdivision of (x; y; )-space is O (n 6 ).
Reference: [6] <author> D. Halperin and R. H. Wilson. </author> <title> Assembly partitioning with a constant number of translations. </title> <type> Technical Report SAND94-1819, </type> <institution> Sandia National Labs, </institution> <year> 1994. </year>
Reference-contexts: We have extended this algorithm to partitioning assemblies with a small number k &gt; 2 of translations. For lack of space, we do not present the latter algorithm here; see <ref> [6] </ref> for more detail. The rest of the paper is organized as follows. In Section 2 we describe the NDBG and give other background. Section 3 gives the algorithm to partition an assembly of polygons with two translations, and Section 4 analyzes its computational complexity. <p> add or remove the constraint corresponding to that surface, depending on whether we are entering a shadow or leaving it. 4 shadows (solid), and the arrangement for the first translation 4 Computational Complexity What is the time complexity of this algorithm? We present here a summary of the analysis; see <ref> [6] </ref> for a more detailed discussion. To simplify the presentation, we first assume that each part has at most some fixed number of vertices. We then give a refined analysis below. 4.1 Initial Analysis Let the assembly A have n polygonal parts, each of constant maximum complexity. <p> They group the sequence of graphs into phases and pre-process the common sub-graph for each phase. The method applies directly to checking the long se quence of blocking graphs in the above algorithm, thus reducing the running time to O (n 1:38 N 6 ). 5 Multiple Translations In <ref> [6] </ref> we consider partitioning an assembly along a path consisting of a small number k of translations m 1 ; m 2 ; : : : ; m k . There are 2k 1 degrees of freedom in specifying the path t. <p> The resulting partitioning algorithm is polynomial in the complexity of the as sembly, but exponential in the number of translations k allowed. We refer the reader to <ref> [6] </ref> for details. 4 For practical use, one may gain a lot from computing only the boundary rather than using all the segments. <p> Hence this paper is a step in showing the full generality of the NDBG approach. The major open problem that this paper raises is to improve the running time of the algorithms presented in it. Some possible directions for improvement are suggested in <ref> [6] </ref>. A related question, which applies to other instances of the NDBG framework as well, is the following: We compute a collection of n (n 1) C-obstacles. However, this collection of C-obstacles is induced by only n parts.
Reference: [7] <author> L. Kavraki, J.-C. Latombe, and R. H. Wilson. </author> <title> On the complexity of assembly partitioning. </title> <journal> Information Processing Letters, </journal> <volume> 48(5) </volume> <pages> 229-235, </pages> <year> 1993. </year>
Reference-contexts: Recursing on the resulting two subassemblies generates an assembly sequence. Past work has shown that when a disassembly motion may consist of any number of translations, the assembly while (b) is not. partitioning problem (and thus sequencing itself) is NP-complete <ref> [7] </ref>. On the other hand, polynomial-time partitioning is possible when the motions are limited to single translations to infinity: Arkin et al. [1] present an algorithm for planar assemblies of polygons, and [12, 13] consider assemblies of polyhedra.
Reference: [8] <author> S. Khanna, R. Motwani, and R. H. Wilson. </author> <title> Graph Certificates, Lookahead in Dynamic Graph Problems, and Assembly Planning in Robotics. </title> <note> In preparation, </note> <year> 1994. </year>
Reference-contexts: work Khanna, Motwani, and Wil-son have shown the following: given a directed graph with n nodes, and a "long" (compared to n) sequence of edge insertions and deletions to that graph, the strong connectedness of all resulting graphs can be determined in amortized time O (n 1:38 ) per graph <ref> [8] </ref>. They group the sequence of graphs into phases and pre-process the common sub-graph for each phase.
Reference: [9] <author> J.-C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: The set of offsets of a part Q that collide with part P is given by the configuration-obstacle (or C-obstacle) P Q, i.e., the Minkowski sum of P and Q <ref> [9] </ref>. Hence part P blocks Q along a path t exactly when t intersects P Q. To find the collisions between all pairs of parts for a single motion, all pairwise C-obstacles P Q can be computed.
Reference: [10] <author> T. Lozano-Perez and R. H. Wilson. </author> <title> Assembly sequencing for arbitrary motions. </title> <booktitle> In Proc. of the IEEE Intl. Conf. on Robotics and Automation, </booktitle> <volume> volume 2, </volume> <pages> pages 527-532, </pages> <year> 1993. </year>
Reference-contexts: A path t causes the subassembly to move through a sequence of regions, collecting constraints on the blocking graph of t. For further discussion see <ref> [10] </ref>. 3 Partitioning with Two Translations Given an assembly A of simple polygons, we wish to determine whether any subassembly S of A can be completely separated from the subassembly A n S by a finite translation of S followed by an infinite translation of S. <p> This may affect the constant factor in our analysis. 7 6 Discussion The above result builds on two existing concepts: the concept of the NDBG [13] and the "interference diagram" <ref> [10] </ref>. Previously, NDBGs were studied only for simple types of motions, and thus yielded either a subset or superset of the possible assembly operations, while it was not clear how to use the interference diagram efficiently in order to solve the partitioning problem.
Reference: [11] <author> R. Pollack and M. Roy. </author> <title> On the number of cells defined by a set of polynomials. </title> <type> C.R. </type> <institution> Acad. Sci. Paris, (t. </institution> <address> 316, Serie I):573-577, </address> <year> 1993. </year>
Reference-contexts: The surfaces (or more precisely, surface patches) in S 1 and S 2 are clearly algebraic of bounded degree. It is well known that the maximum number of cells in a 3D arrangement induced by m such surfaces is O (m 3 ) (see, e.g., <ref> [4, 5, 11] </ref>). Since there are O (n 2 ) surfaces in each of S 1 and S 2 , the maximum number of cells in the subdivision of (x; y; )-space is O (n 6 ).
Reference: [12] <author> A. Schweikard and R. H. Wilson. </author> <title> Assembly Sequences for Polyhedra. </title> <note> To appear in Algorithmica. </note>
Reference-contexts: On the other hand, polynomial-time partitioning is possible when the motions are limited to single translations to infinity: Arkin et al. [1] present an algorithm for planar assemblies of polygons, and <ref> [12, 13] </ref> consider assemblies of polyhedra. This paper generalizes the non-directional blocking graph (or NDBG) of [13] to motions consisting of multiple translations.
Reference: [13] <author> R. H. Wilson and J.-C. Latombe. </author> <title> Geometric reasoning about mechanical assembly. </title> <journal> Artificial Intelligence, </journal> <volume> 71(2), </volume> <year> 1994. </year>
Reference-contexts: On the other hand, polynomial-time partitioning is possible when the motions are limited to single translations to infinity: Arkin et al. [1] present an algorithm for planar assemblies of polygons, and <ref> [12, 13] </ref> consider assemblies of polyhedra. This paper generalizes the non-directional blocking graph (or NDBG) of [13] to motions consisting of multiple translations. <p> On the other hand, polynomial-time partitioning is possible when the motions are limited to single translations to infinity: Arkin et al. [1] present an algorithm for planar assemblies of polygons, and [12, 13] consider assemblies of polyhedra. This paper generalizes the non-directional blocking graph (or NDBG) of <ref> [13] </ref> to motions consisting of multiple translations. We consider the following problem: given a planar assembly of simple polygons, identify a subassembly that can be removed as a rigid object by a motion consisting of a finite translation followed by a translation to infinity. <p> If P blocks Q, then either P must be in the moved subassembly S or Q must not be in S. The set of constraints on membership in S can be represented with a blocking graph <ref> [13] </ref>. The blocking graph of A for motion t, written G A (t), is a directed graph with a node for each part of A and an arc from node Q to node P exactly when Q is blocked by P along t. <p> This may affect the constant factor in our analysis. 7 6 Discussion The above result builds on two existing concepts: the concept of the NDBG <ref> [13] </ref> and the "interference diagram" [10]. Previously, NDBGs were studied only for simple types of motions, and thus yielded either a subset or superset of the possible assembly operations, while it was not clear how to use the interference diagram efficiently in order to solve the partitioning problem.
References-found: 13

