URL: http://www.cs.umn.edu/Users/dept/users/coyle/papers/de94.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/coyle/papers/
Root-URL: http://www.cs.umn.edu
Email: coyle]@cs.umn.edu  
Title: Disk Allocation Methods for Parallelizing Grid Files  
Author: Yvonne Zhou, Shashi Shekhar, and Mark Coyle [yyz, shekhar, 
Keyword: Areas: Performance evaluation, spatial databases, parallel databases.  
Address: Minneapolis, MN 55455  
Affiliation: Department of Computer Science, University of Minnesota,  
Abstract: The grid file [1] is a well known access method for multi-dimensional and spatial data. The response time needed to process path and range queries on the grid file access method can be improved significantly by distributing the data pages over multiple disks. This paper explores the disk allocation methods used to allocate the data pages of grid file among a set of disks, which can be accessed in parallel. Given N disks, a perfect allocation will speed up the processing of each query by a factor of N in this environment. The paper shows that no disk allocation is perfect for the set of all orthogonal range queries, even on uniformly distributed read-only data. We then introduce two families of allocation methods, namely the Linear allocation method and the Lattice allocation method, which are perfect for a large collection of interesting path queries (rows, columns, diagonals, anti-diagonals) and range queries (small rectangles), on an interesting set of data distributions. We address the issues in extending disk allocation methods to general data distributions with random updates. Finally, we provide experimental results on the performance of the proposed methods and other well known disk allocation methods on different query sets, data distributions and data set sizes. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J. Nievergelt, H. Hinteberger, and K.D. Sevcik, </author> <title> The Grid File: An Adaptable, Symmetric Multi-Key File Structure, </title> <journal> ACM Transactions on Database Systems 9(1) pp. </journal> <pages> 38-71. </pages> <year> (1984). </year>
Reference-contexts: Cell size may be chosen on the basis of the capacity of the disk blocks, and the data contained in each cell may be mapped to distinct disk blocks. For many nonuniform distributions, multiple cells may share a disk block <ref> [1] </ref>. Queries on multi-dimensional data represent various subsets of the data. To process a query, the database manager has to retrieve the data points continued inside each cell which intersects with the query. Two queries are similar if these intersect the same set of cells.
Reference: 2. <author> A. Kemper and M. Wallrath, </author> <title> An Analysis of Geometric Modelling in Databases, </title> <journal> Computing Surveys 19(1) pp. </journal> <month> 47-91 (March </month> <year> 1987). </year>
Reference-contexts: 1. INTRODUCTION Spatial databases are designed for a wide variety of observational spatial data such as cartography data <ref> [2] </ref>. The last decade has seen great progress in the design of spatial databases and access methods [3-9] for single disk systems. However, designing a multi-disk database to process general spatial queries is not well explored.
Reference: 3. <author> A. Buchmann, O. Guenther, T.R. Smith, and Y.-F. Wang (Eds),, </author> <title> Design and Implementation of Large Spatial Databases,, </title> <booktitle> Proc. 1st Symp. Design and Implementation of Large Spatial Database (SSD'90), </booktitle> <publisher> Springer-Verlag, </publisher> <address> (1990.). Santa Barbara, CA. </address>
Reference: 4. <author> R.A. Finkel and J.L. Bentley, </author> <title> Quad trees -- a data structure for retrieval on composite keys, </title> <journal> Acta Inf. </journal> <pages> 4 pp. 1-9. </pages> <year> (1974). </year>
Reference: 5. <author> O. Guenther, </author> <title> The design of the cell tree: An object-oriented index structure for geometric databases, </title> <booktitle> Proc. 5th Int. Conf. on Data Engineering, </booktitle> <month> (Feb. </month> <year> 1989). </year>
Reference: 6. <author> K. Hinrichs, </author> <title> The grid file system: implementation and case studies for applications, Dissertation No. </title> <type> 7734, </type> <institution> Eidgenossische Technische Hochschule (ETH), </institution> <address> Zurich, </address> <year> (1985). </year>
Reference: 7. <author> D.B. Lomet and B. Salzberg, </author> <title> The hB-Tree: A multiattri-bute Indexing Method with good guaranteed performance, </title> <journal> ACM Transactions on Database Systems 15(4)(Dec. 1990.). </journal>
Reference: 8. <author> A. Guttman, R-Trees: </author> <title> A Dynamic Index Structure for Spatial Searching, </title> <booktitle> Proc. SIGMOD International Conf on Management of Data, </booktitle> <pages> pp. 47-57 ACM, </pages> <year> (1984). </year>
Reference: 9. <author> J.T. Robinson, </author> <title> The K-D-B-tree: a Search Structure for large multidimensional dynamic indexes, </title> <booktitle> Proc. SIG-MOD, </booktitle> <pages> pp. 10-18. </pages> <publisher> ACM, </publisher> <year> (1981). </year>
Reference: 10. <author> H. C. Du, </author> <title> Disk allocation for product files on multiple disk systems, </title> <journal> Trans. on Database Systems 7ACM, </journal> <month> (March </month> <year> 1982). </year>
Reference-contexts: This parallelism can provide up to N-times speedups in processing large spatial queries. Several methods of allocating data over multiple disks have been proposed that use the values of the key attributes or of the coordinate space of embedding <ref> [10, 15, 17, 18] </ref>. The disk allocation methods based on key values include hashed-declustering, round-robin, and parallel R-Trees [13, 19]. The coordinate space-partioning techniques include the Disk Modulo method [10] and the Coordinate Modulo Declustering Method (CMD)[17]. <p> The disk allocation methods based on key values include hashed-declustering, round-robin, and parallel R-Trees [13, 19]. The coordinate space-partioning techniques include the Disk Modulo method <ref> [10] </ref> and the Coordinate Modulo Declustering Method (CMD)[17]. In CMD, data along the two dimensions is distributed to the multiple disks by the In general, the disk-memory-CPU interconnection may impose additional constraints on maximum possible speed-ups in I/O.
Reference: 11. <author> C. Faloutsos and D. Metaxas, </author> <title> Disk Allocation methods using error correcting codes, </title> <journal> Trans. on Computers 40(8)IEEE, </journal> <month> (August </month> <year> 1991). </year>
Reference: 12. <author> D.J. DeWitt and S. Ghandeharizadeh, </author> <title> Hybrid-range partitioning strategy: A new declustering strategy for multiprocessor database machine, </title> <booktitle> Proc. Intl. Conf. on Very Large Databases, VLDB, </booktitle> <year> (1990). </year>
Reference: 13. <author> I. Kamel and C. Faloutsos, </author> <title> Parallel R-Trees, </title> <booktitle> Intl. Conf. on Management of Data, ACM SIGMOD, </booktitle> <year> (1992). </year>
Reference-contexts: The allocation method should be designed to satisfy the goals of a database manager in processing various queries. One of the important goals of the database is to maximize throughput. This imposes two constraints on the allocation methods, namely fairness and efficiency <ref> [13] </ref>. A fair allocation method distributes the data pages that qualifies under the same query as uniformly as possible among the various disks. An efficient allocation method imposes a light load on the database system by activating as few disks as possible for small queries. <p> Several methods of allocating data over multiple disks have been proposed that use the values of the key attributes or of the coordinate space of embedding [10, 15, 17, 18]. The disk allocation methods based on key values include hashed-declustering, round-robin, and parallel R-Trees <ref> [13, 19] </ref>. The coordinate space-partioning techniques include the Disk Modulo method [10] and the Coordinate Modulo Declustering Method (CMD)[17]. In CMD, data along the two dimensions is distributed to the multiple disks by the In general, the disk-memory-CPU interconnection may impose additional constraints on maximum possible speed-ups in I/O. <p> The allocation method should be designed to satisfy the goals of a database manager in processing various queries. One of the important goals of the database is to maximize throughput, which imposes two constraints on the allocation methods, namely, fairness and efficiency <ref> [13] </ref>. A fair allocation method distributes the cells that qualifies under the same query as uniformly as possible among the various disks. An efficient allocation method imposes a light load on the database system by activating as few disks as possible for small queries.
Reference: 14. <author> K. Salem and H. Garcia-Molina, </author> <title> Disk Atriping, </title> <booktitle> IEEE Conference on Data Engineering, </booktitle> <year> (1986). </year>
Reference-contexts: Disk striping [14-16] has been studied extensively as a disk allocation method in the context of disk interleaving and improving I/O bandwidth. Disk striping is a general purpose facility for achieving parallel data I/O and for achieving fault tolerance <ref> [14] </ref>. A striping unit (e.g. the number of consecutive units of data allocated to each disk) is used to distribute data among the disks. <p> Range queries over this dimension may be processed efficiently, but many range queries over the other dimension may exhibit poor speed-ups. We note that the allocation methods of disk striping at bit or byte level <ref> [14] </ref> are fair, but not efficient, for one-dimensional data. Furthermore, the choice of a data unit imposes a hard limit on the maximum possible parallelism via striping. Many multi-disk systems with N disks provide an opportunity for N-way parallelism in disk operations. <p> Therefore, it is important to classify the interesting query sets in an application domain to determine if an allocation method is perfect for the interesting query set. Interesting query sets on traditional one-dimensional data have been explored in <ref> [14] </ref>. We examine interesting query sets on 2-dimensional data typical of geographical applications. The queries on multi-dimensional data can be classified into three classes: point queries, range queries and path queries.
Reference: 15. <author> M. Y. Kim, </author> <title> Synchronized disk interleaving, </title> <journal> Trans. on COmputers 35(11)IEEE, </journal> <year> (1986). </year>
Reference-contexts: This parallelism can provide up to N-times speedups in processing large spatial queries. Several methods of allocating data over multiple disks have been proposed that use the values of the key attributes or of the coordinate space of embedding <ref> [10, 15, 17, 18] </ref>. The disk allocation methods based on key values include hashed-declustering, round-robin, and parallel R-Trees [13, 19]. The coordinate space-partioning techniques include the Disk Modulo method [10] and the Coordinate Modulo Declustering Method (CMD)[17].
Reference: 16. <author> P.M. Chen and D.A. Patterson, </author> <title> Maximizing performance in a Striped Disk Array, </title> <booktitle> IEEE Conference on Computer Architecture, </booktitle> <year> (1990). </year>
Reference: 17. <author> J. Li, J. Srivastava, and D. Rotem, CMD: </author> <title> A Multidimensional Declustering Method for Parallel Database Systems, </title> <type> Tech. Report, </type> <institution> Univ. of Minnesota, </institution> <year> (1991). </year>
Reference-contexts: This parallelism can provide up to N-times speedups in processing large spatial queries. Several methods of allocating data over multiple disks have been proposed that use the values of the key attributes or of the coordinate space of embedding <ref> [10, 15, 17, 18] </ref>. The disk allocation methods based on key values include hashed-declustering, round-robin, and parallel R-Trees [13, 19]. The coordinate space-partioning techniques include the Disk Modulo method [10] and the Coordinate Modulo Declustering Method (CMD)[17].
Reference: 18. <author> C. T. Wu and W. A. Burkmard, </author> <title> Associative Searching in Multiple Storage Units, </title> <journal> Trans. on Database Systems 12ACM, </journal> <month> (January </month> <year> 1987). </year>
Reference-contexts: This parallelism can provide up to N-times speedups in processing large spatial queries. Several methods of allocating data over multiple disks have been proposed that use the values of the key attributes or of the coordinate space of embedding <ref> [10, 15, 17, 18] </ref>. The disk allocation methods based on key values include hashed-declustering, round-robin, and parallel R-Trees [13, 19]. The coordinate space-partioning techniques include the Disk Modulo method [10] and the Coordinate Modulo Declustering Method (CMD)[17].
Reference: 19. <author> Teradata Corporation, </author> <title> DBC/1012 Data Base Computer Concepts and Facilities, Terradata Document c02-001-05, </title> <year> (1988). </year>
Reference-contexts: Several methods of allocating data over multiple disks have been proposed that use the values of the key attributes or of the coordinate space of embedding [10, 15, 17, 18]. The disk allocation methods based on key values include hashed-declustering, round-robin, and parallel R-Trees <ref> [13, 19] </ref>. The coordinate space-partioning techniques include the Disk Modulo method [10] and the Coordinate Modulo Declustering Method (CMD)[17]. In CMD, data along the two dimensions is distributed to the multiple disks by the In general, the disk-memory-CPU interconnection may impose additional constraints on maximum possible speed-ups in I/O.
Reference: 20. <author> C. Faloutsos and P. Bhagwat, </author> <title> Declustering Using Fractals, </title> <booktitle> International Symposium on Databases in Parallel and Distributed Systems, </booktitle> <pages> pp. 18-25 IEEE, </pages> <year> (1993). </year>
Reference-contexts: These methods are based on space-filling curves, and they provide reasonable parallelization of square-shaped range queries <ref> [20] </ref>. These methods, however, provide less than adequate parallelism for path queries such as rows and columns. The performance of existing disk allocation methods depends on the query set. No method is perfect for all query sets.
Reference: 21. <author> H.V. Jagadish, </author> <title> Linear Clustering of Objects with Multiple Attributes, </title> <booktitle> Proc. Intl. Conf. on Management of Data, </booktitle> <pages> pp. </pages> <note> 332-342 ACM SIGMOD, </note> <year> (1990). </year>
Reference: 22. <author> D. Abel and D. Mark, </author> <title> A comparative analysis of some two-dimensional orderings, </title> <note> Int. Journal of GIS 4(1) pp. </note> <month> 21-31 </month> <year> (1990). </year>
Reference: 23. <author> R. Krishnamurthy and K.-Y. Whang, </author> <title> Multilevel Grid Files, IBM Research Report, </title> <booktitle> (1985). </booktitle> <address> Yorktown Heights </address>
Reference-contexts: We generate and insert 3K/4 other points from the NN distribution, with a small standard deviation. We note that the hot-spot data-set is not factorizable and has been used in literature <ref> [23] </ref> to simulate skewed distributions. Uniformly distributed data are generated with a maximum value of 1.00 and minimum value of 0.00, nor-maly distributed data are generated with mean of 0.50 and standard deviation of 0.20. Data sets with 500, 1000, 2000 and 4000 data points are used here.
References-found: 23

