URL: http://www.cs.mtu.edu/~shene/report/rotate.ps
Refering-URL: http://www.cs.mtu.edu/~shene/report/report.html
Root-URL: http://www.cs.mtu.edu
Email: Email: shene@mtu.edu  
Title: An Analysis of Two In-Place Array Rotation Algorithms  
Author: Ching-Kuang Shene 
Address: Houghton, MI 49931-1295  
Affiliation: Department of Computer Science, Michigan Technological University,  
Abstract: This paper presents a complexity analysis of two STL in-place rotation algorithms. If an array of n elements is rotated to the right positions, the first STL version, which uses forward iterators, requires n gcd(n; ) swaps, while the second version, which uses random access iterators, uses only n + gcd(n; ) array element movements. This paper also proves the optimality of the second version. A performance comparison is included. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Artin, M. </author> <title> (1991) Algebra, </title> <publisher> Prentice-Hall. </publisher>
Reference-contexts: Thus, a rotation is a special permutation on Z n . Since every permutation can be decomposed into disjoint cycles <ref> [1] </ref>, a rotation can also be decomposed into disjoint and shorter rotations, and our problem is reduced to finding these disjoint cycles. Consider an arbitrary element i 2 Z n . <p> Remark 1 There is an interesting and different derivation of this algorithm. Consider the cyclic subgroup H generated by 2 Z n . It can be shown with the technique in Lemma 1 that H is of order n=gcd (n; ). Hence, by the Counting Lemma <ref> [1] </ref>, the number of cosets with respect to H is gcd (n; ) and each coset is of order n=gcd (n; ). The coset of i 2 Z n contains elements of form i + p (modulo n), where 0 p &lt; n=gcd (n; ).
Reference: [2] <author> Bach, E. and Shallit, </author> <title> J (1996) Algorithmic Number Theory: Volume 1, Efficient Algorithms, </title> <publisher> MIT Press. </publisher>
Reference-contexts: For each pair of n and , the rotation function is called 10000 times and the user time of one call is recorded. Although there are other methods for computing the GCD of two positive integers <ref> [2] </ref>, the Euclid's division method is used in STL 2 . other algorithms except for = n=2 in the STL 1 case. It is because STL 1 only uses n gcd (n; ) = n=2 swaps (1:5n movements) if = n=2 (Section 2). <p> Note that STL 3 's timing increases very slowly as increases. Perhaps some other optimization techniques could be used to accelerate STL 3 . Remark 2 It is well-known that Euclid's algorithm iterates O (log 2 n) times to compute the GCD of n and <ref> [2] </ref>. Each iteration needs one division. On the other hand, in STL 3 , the computation of GCD is incorporated into the algorithm with the help of variable Bound, 11 which is maintained n times.
Reference: [3] <author> Musser, D. R. and Saini, A. </author> <title> (1996) STL Tutorial and Reference Guide, </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: 1 Introduction Rotating an array is a popular exercise of array/string processing in CS1 and CS2 classes and it is also part of many commonly seen libraries such as STL <ref> [3, 4] </ref>. Two types of solutions are available, one requiring an auxiliary array and the other being in-place. We shall present an analysis of two in-place rotation algorithms available in the STL distribution. <p> It is known that the number of swaps is no more than n <ref> [3] </ref>. The aim of this section is to show that the number of swaps is actually n gcd (n; ). This algorithm is based on two types of section-swapping.
Reference: [4] <author> Stepanov, A. A. and Lee, M. </author> <title> (1995) The Standard Template Library, </title> <type> Technical Report HPL-94-34, </type> <month> April </month> <year> 1994, </year> <note> revised July 7, 1995. 13 </note>
Reference-contexts: 1 Introduction Rotating an array is a popular exercise of array/string processing in CS1 and CS2 classes and it is also part of many commonly seen libraries such as STL <ref> [3, 4] </ref>. Two types of solutions are available, one requiring an auxiliary array and the other being in-place. We shall present an analysis of two in-place rotation algorithms available in the STL distribution.
References-found: 4

