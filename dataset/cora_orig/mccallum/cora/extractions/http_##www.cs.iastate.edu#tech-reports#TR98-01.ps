URL: http://www.cs.iastate.edu/tech-reports/TR98-01.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: http://www.cs.iastate.edu
Title: Draft Safety Checklist for Four-Variable Requirements Methods  
Author: Guy Helmer 
Date: January 22, 1998  
Address: Ames, IA 50011  
Affiliation: Iowa State University Department of Computer Science  
Abstract: This paper organizes safety criteria, as given by Leveson, Jaffe, Heimdahl, Melhart, and Lutz, as a safety checklist for use on four-variable requirements models for real-time process-control systems. Special attention is given to the Software Productivity Consortium CoRE and Naval Research Laboratory SCR requirements specifications built on the four-variable model. The criteria are presented in English text and may be applied during the requirements engineering phase of software development to reduce safety-related software errors. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Stuart Faulk, John Brackett, Paul Ward, and James Kirby, Jr. </author> <title> The Core method for real-time requirements. </title> <journal> IEEE Software, </journal> <pages> pages 22-33, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: This document organizes and applies the safety criteria defined by Software Requirements Analysis for Real-Time Process-Control Systems [3], Targeting Safety-Related Errors During Software Requirements Analysis [5] and Leveson's book Safeware [4] to four-variable models such as that used by Software Cost Reduction (SCR) [2] and the Software Productivity Consortium's CoRE <ref> [1] </ref>. 1.1 Four-Variable Model The four-variable model was defined by Parnas and Madey [6] to organize software design documentation in a way that is analogous to the design methods used by professional engineers in fields like electrical or chemical engineering. <p> Parnas notes that an early version of this model was used in 1977 for the A-7E aircraft, so this model has been used successfully for a number of years. The SCR [2] and CoRE <ref> [1] </ref> methodologies build on the Parnas and Madey foundation by providing either software tools or requirements development guidelines to develop a requirements model of a system in the four-variable format. 1.2 Safety Criteria Background The criteria given here should be easily applied to any of the methodologies that build on the
Reference: [2] <author> IEEE. SCR*: </author> <title> A Toolset for Specifying and Analyzing Requirements, </title> <booktitle> 1995. </booktitle> <pages> 9 </pages>
Reference-contexts: 1 Introduction This document organizes and applies the safety criteria defined by Software Requirements Analysis for Real-Time Process-Control Systems [3], Targeting Safety-Related Errors During Software Requirements Analysis [5] and Leveson's book Safeware [4] to four-variable models such as that used by Software Cost Reduction (SCR) <ref> [2] </ref> and the Software Productivity Consortium's CoRE [1]. 1.1 Four-Variable Model The four-variable model was defined by Parnas and Madey [6] to organize software design documentation in a way that is analogous to the design methods used by professional engineers in fields like electrical or chemical engineering. <p> Parnas notes that an early version of this model was used in 1977 for the A-7E aircraft, so this model has been used successfully for a number of years. The SCR <ref> [2] </ref> and CoRE [1] methodologies build on the Parnas and Madey foundation by providing either software tools or requirements development guidelines to develop a requirements model of a system in the four-variable format. 1.2 Safety Criteria Background The criteria given here should be easily applied to any of the methodologies that
Reference: [3] <author> Matthew S. Jaffe, Nancy G. Leveson, Mats P.E. Heimdahl, and Bonnie E. Melhart. </author> <title> Software requirements analysis for real-time process-control systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(3) </volume> <pages> 241-257, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: 1 Introduction This document organizes and applies the safety criteria defined by Software Requirements Analysis for Real-Time Process-Control Systems <ref> [3] </ref>, Targeting Safety-Related Errors During Software Requirements Analysis [5] and Leveson's book Safeware [4] to four-variable models such as that used by Software Cost Reduction (SCR) [2] and the Software Productivity Consortium's CoRE [1]. 1.1 Four-Variable Model The four-variable model was defined by Parnas and Madey [6] to organize software design <p> The criteria are given in plain English, and are meant to be applied during the requirements phase of a software development project. If formal specifications are required, one may use the original predicate calculus given in the "Software Requirements" <ref> [3] </ref> article. 2 "Targeting Safety-Related Errors" [5] provides a similar English-text list of criteria in the form of a checklist to be applied to requirements for spacecraft systems. <p> Chapter 15 expands on the list of criteria from "Software Requirements" <ref> [3] </ref> in a few places, and those additions are included in the lists below. <p> The definition of states as used in "Software Requirements" <ref> [3] </ref> applies to a requirements state machine model using Mealy machines with logical of inputs and corresponding outputs on the transitions between states. This seems to match with the CoRE model's use of mode machines to define the states of CoRE environmental variables [9, section 4.1.5]. <p> A critera that is not stated separately by Jaffe and Leveson <ref> [3] </ref> (though it is mentioned in the text after criteria 6.6) is: all timing bounds must not be tighter than the precision of the reference clock. 3 IN IN relations define the correspondence between physical system inputs and the monitored variables over time, perhaps such as the translation of an analog
Reference: [4] <author> Nancy G. </author> <title> Leveson. </title> <publisher> Safeware. Addison-Wesley Publishing Company, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction This document organizes and applies the safety criteria defined by Software Requirements Analysis for Real-Time Process-Control Systems [3], Targeting Safety-Related Errors During Software Requirements Analysis [5] and Leveson's book Safeware <ref> [4] </ref> to four-variable models such as that used by Software Cost Reduction (SCR) [2] and the Software Productivity Consortium's CoRE [1]. 1.1 Four-Variable Model The four-variable model was defined by Parnas and Madey [6] to organize software design documentation in a way that is analogous to the design methods used by <p> If these requirements are used as a checklist, they may be integrated into formal software engineering requirements review procedures as were Lutz's "Safety Checklist." [5] Safeware <ref> [4] </ref> is a comprehensive discussion on safety and computers which goes far beyond the safety criteria. Chapter 15 expands on the list of criteria from "Software Requirements" [3] in a few places, and those additions are included in the lists below. <p> Likewise, SCR defines modes whose transitions are triggered by events. So, for at least the CoRE and SCR requirements specifications, the criteria that apply to "states" can be thought of as applying to "modes". 2 REQ Criteria are grouped by categories as they are in Safeware <ref> [4] </ref>. Criteria marked with an asterisk (*) are satisfied by the CoRE and SCR implementations of the four-variable requirements model, as explained in section 5. 3 2.1 Startup and State Completeness Leveson 15.4.2-1 The system and software must start in a safe mode.
Reference: [5] <author> Robyn R. Lutz. </author> <title> Targeting safety-related errors during software requirements analysis. </title> <journal> Journal of Systems and Software, </journal> <volume> 34 </volume> <pages> 223-230, </pages> <year> 1996. </year>
Reference-contexts: 1 Introduction This document organizes and applies the safety criteria defined by Software Requirements Analysis for Real-Time Process-Control Systems [3], Targeting Safety-Related Errors During Software Requirements Analysis <ref> [5] </ref> and Leveson's book Safeware [4] to four-variable models such as that used by Software Cost Reduction (SCR) [2] and the Software Productivity Consortium's CoRE [1]. 1.1 Four-Variable Model The four-variable model was defined by Parnas and Madey [6] to organize software design documentation in a way that is analogous to <p> The criteria are given in plain English, and are meant to be applied during the requirements phase of a software development project. If formal specifications are required, one may use the original predicate calculus given in the "Software Requirements" [3] article. 2 "Targeting Safety-Related Errors" <ref> [5] </ref> provides a similar English-text list of criteria in the form of a checklist to be applied to requirements for spacecraft systems. <p> If these requirements are used as a checklist, they may be integrated into formal software engineering requirements review procedures as were Lutz's "Safety Checklist." <ref> [5] </ref> Safeware [4] is a comprehensive discussion on safety and computers which goes far beyond the safety criteria. Chapter 15 expands on the list of criteria from "Software Requirements" [3] in a few places, and those additions are included in the lists below. <p> John Rushby points out in "Formal Methods and their Role in the Certification of Critical Systems" [7] that the Jaffe and Leveson criteria are not exhaustive, but serve as a starting point that may be modified or extended as was done by Lutz <ref> [5] </ref>. 1.3 Modes versus States Since the criteria so often refer to states, the question arises as to whether states correspond to CoRE/SCR modes.
Reference: [6] <author> David Lorge Parnas and Jan Madey. </author> <title> Functional documents for computer systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 25(1) </volume> <pages> 41-61, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: for Real-Time Process-Control Systems [3], Targeting Safety-Related Errors During Software Requirements Analysis [5] and Leveson's book Safeware [4] to four-variable models such as that used by Software Cost Reduction (SCR) [2] and the Software Productivity Consortium's CoRE [1]. 1.1 Four-Variable Model The four-variable model was defined by Parnas and Madey <ref> [6] </ref> to organize software design documentation in a way that is analogous to the design methods used by professional engineers in fields like electrical or chemical engineering. <p> This contrasts with typical software design documentation that describes how the system works. These four-variable methods state the requirements of a system in terms of the input, monitored, controlled, and output variables. More thoroughly stated, with help from Steve Tockey and Parnas' article <ref> [6] </ref>: 0 This work was supported by Rockwell Collins Commercial Avionics, Cedar Rapids, Iowa. 1 Input The hardware input to the computer's input registers provided by sensors, switches, and such. For example, an input from a thermometer may be a 16-bit unsigned quantity directly from the input hardware. <p> NAT Maps monitored variables to controlled variables; NAT defines the environmental context of the system that is being controlled. The interactions in the four-variable model are as shown in figure 1. As a final note on the background of the four-variable model, Parnas' article <ref> [6] </ref> gives the mathematical foundation for the four-variable software engineering method as well as a list of required documents for a complete set of documentation that would fully define a computer system.
Reference: [7] <author> John Rushby. </author> <title> Formal methods and their role in the certification of critical systems. </title> <type> Technical Report SRI-CSL-95-1, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> March </month> <year> 1995. </year> <note> Also available as NASA Contractor Report 4673, </note> <month> August </month> <year> 1995, </year> <title> and to be issued as part of the FAA Digital Systems Validation Handbook (the guide for aircraft certification). </title> <booktitle> Reprinted in [8, </booktitle> <pages> pp. 1-42]. </pages>
Reference-contexts: Chapter 15 expands on the list of criteria from "Software Requirements" [3] in a few places, and those additions are included in the lists below. John Rushby points out in "Formal Methods and their Role in the Certification of Critical Systems" <ref> [7] </ref> that the Jaffe and Leveson criteria are not exhaustive, but serve as a starting point that may be modified or extended as was done by Lutz [5]. 1.3 Modes versus States Since the criteria so often refer to states, the question arises as to whether states correspond to CoRE/SCR modes.
Reference: [8] <editor> Roger Shaw, editor. </editor> <booktitle> Safety and Reliability of Software Based Systems (Twelfth Annual CSR Workshop), </booktitle> <address> Bruges, Belgium, September 1995. </address> <publisher> Springer. </publisher>
Reference: [9] <institution> Software Productivity Consortium Services Corporation, </institution> <address> SPC Building, 2214 Rock Hill Road, Herndon, VA 22070. </address> <institution> Consortium Requirements Engineering Guidebook, </institution> <month> December </month> <year> 1993. </year> <month> 10 </month>
Reference-contexts: This seems to match with the CoRE model's use of mode machines to define the states of CoRE environmental variables <ref> [9, section 4.1.5] </ref>. Likewise, SCR defines modes whose transitions are triggered by events. So, for at least the CoRE and SCR requirements specifications, the criteria that apply to "states" can be thought of as applying to "modes". 2 REQ Criteria are grouped by categories as they are in Safeware [4]. <p> In CoRE, tolerance is given for each monitored variable. 5.2 IN Jaffe 4.1, 6.1, 6.2, Lutz 9 Each physical input should have an IN relation defining its relationship to monitored variables, and out-of-bounds values should be noted in other monitored variables. The CoRE Guidebook <ref> [9] </ref> suggests in section 4.3.3 that in some cases additional monitored variables are created to denote undesired events. Leveson 15.4.3-1 All inputs from the sensors should be transformed to a monitored variable. CoRE requires that each variable has at least one relation defined on it.
References-found: 9

