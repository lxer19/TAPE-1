URL: http://www.cs.dartmouth.edu/~cliff/papers/JobShop.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~cliff/papers/
Root-URL: http://www.cs.dartmouth.edu
Title: Improved Approximation Algorithms for Shop Scheduling Problems  
Author: David B. Shmoys Clifford Stein Joel Wein 
Keyword: Key Words: scheduling, approximation algorithms  
Address: Ithaca, NY 14853.  6188 Bradley Hall, Dartmouth College, Hanover, NH 03755-3551. Electronic mail:  NY 11201,  
Note: AMS(MOS) subject classifications:  Address:  Electronic mail: shmoys@cs.cornell.edu Additional support provided by an AT&T graduate fellowship. Address:  Additional support provided by an ARO graduate fellowship. Address:  Electronic mail: wein@mem.poly.edu  
Affiliation: Cornell University  Dartmouth College  Polytechnic University  School of Operations Research and Industrial Engineering, Cornell University,  Department of Mathematics and Computer Science,  Department of Computer Science, Polytechnic University, Five MetroTech Center, Brooklyn,  
Email: cliff@bondcliff.dartmouth.edu  
Web: 68A10, 68Q25, 90B35, 68R99  
Abstract: In the job shop scheduling problem we are given m machines and n jobs; a job consists of a sequence of operations, each of which must be processed on a specified machine; the objective is to complete all jobs as quickly as possible. This problem is strongly N P-hard even for very restrictive special cases. We give the first randomized and deterministic polynomial-time algorithms that yield polylogarithmic approximations to the optimal length schedule. Our algorithms also extend to the more general case where a job is given not by a linear ordering of the machines on which it must be processed but by an arbitrary partial order. Comparable bounds can also be obtained when there are m 0 types of machines, a specified number of machines of each type, and each operation must be processed on one of the machines of a specified type, as well as for the problem of scheduling unrelated parallel machines subject to chain precedence constraints. fl Research partially supported by NSF PYI Award CCR-89-96272 with matching support from UPS and Sun, by the National Science Foundation, the Air Force Office of Scientific Research, and the Office of Naval Research, through NSF grant DMS89-20550, and by DARPA Contract N00014-89-J-1988. A preliminary version of this paper appeared in the proceedings of the Second Annual ACM-SIAM Symposium on Discrete Algorithms, January 1991. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Applegate and B. Cook. </author> <title> A computational study of the job-shop scheduling problem. </title> <journal> ORSA Journal of Computing, </journal> <volume> 3 </volume> <pages> 149-156, </pages> <year> 1991. </year>
Reference-contexts: Furthermore, several benchmark instances with 15 jobs, 15 machines and 225 operations are too hard to be solved by known methods and were posed as open problems by Applegate and Cook <ref> [1] </ref>. In this paper we will focus on obtaining approximation algorithms for the job shop problem, and will evaluate these algorithms in terms of their performance guarantee, or in other words, their worst-case relative error.
Reference: [2] <editor> I. Barany and T. Fiala. Tobbgepes utemezesi problemak kozel optimalis megoldasa. Szigma-Mat.-Kozgazdasagi Folyoirat, </editor> <volume> 15 </volume> <pages> 177-191, </pages> <year> 1982. </year> <month> 14 </month>
Reference-contexts: Consider the simple greedy algorithm that, whenever a machine is idle, assigns to it any job that has not yet been processed on that machine and is not currently being processed on another machine. Anna Racsmany <ref> [2] </ref> has observed that the greedy algorithm delivers a schedule of length at most max + (m 1)p max . We can adapt her proof to show that, in fact, the greedy algorithm delivers a schedule that is of length less than max + P max 2C fl max .
Reference: [3] <author> I.S. Belov and Ya. N. Stolin. </author> <title> An algorithm in a single path operations scheduling problem. </title> <booktitle> In Mathematical Economics and Functional Analysis [In Russian], </booktitle> <pages> pages 248-257. </pages> <publisher> Nauka, </publisher> <address> Moscow, </address> <year> 1974. </year>
Reference-contexts: We briefly review both approaches here. The best approximation algorithms to date for job shop scheduling have primarily appeared in the Soviet literature and are based on a beautiful connection to geometric arguments. This approach was independently discovered by Belov and Stolin <ref> [3] </ref> and Sevast'yanov [16] as well as by Fiala [4]. This approach typically produces schedules for which the length can be bounded by max + q (m; )p max , where q (; ) is a polynomial, and p max = max ij p ij is the maximum operation length.
Reference: [4] <author> T. </author> <title> Fiala. </title> <journal> Kozelt-o algorithmus a harom gep problemara. Alkalmazott Matematikai Lapok, </journal> <volume> 3 </volume> <pages> 389-398, </pages> <year> 1977. </year>
Reference-contexts: The best approximation algorithms to date for job shop scheduling have primarily appeared in the Soviet literature and are based on a beautiful connection to geometric arguments. This approach was independently discovered by Belov and Stolin [3] and Sevast'yanov [16] as well as by Fiala <ref> [4] </ref>. This approach typically produces schedules for which the length can be bounded by max + q (m; )p max , where q (; ) is a polynomial, and p max = max ij p ij is the maximum operation length.
Reference: [5] <author> T. Fiala. </author> <title> An algorithm for the open-shop problem. </title> <journal> Mathematics of Operations Research, </journal> <volume> 8(1) </volume> <pages> 100-109, </pages> <year> 1983. </year>
Reference-contexts: Thus, machine M k is processing for at most max units of time and is idle for less than P max units of time; hence C max &lt; max + P max . Fiala <ref> [5] </ref> has also shown that if max (16m log m + 21m)p max , then C fl max is just max , and there is a polynomial-time algorithm to find an optimal schedule.
Reference: [6] <author> M.R. Garey and D.S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of N P -Completeness. W.H. </title> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: This problem is strongly N P-hard; furthermore, except for the cases when there are two jobs or when there are two machines and each job has at most two operations, essentially all special cases of this problem are N P-hard, and typically strongly N P-hard <ref> [6, 7] </ref>. For example, it is N P -hard even if there are 3 machines, 3 jobs and each operation is of unit length; note that in this case we can think of the input length as , the maximum number of operations in a job.
Reference: [7] <author> E.L. Lawler, J.K. Lenstra, A.H.G. Rinooy Kan, </author> <title> and D.B. Shmoys. Sequencing and scheduling: Algorithms and complexity. In S.C. Graves, </title> <editor> A.H.G. Rinnooy Kan, and P.H. Zipkin, editors, </editor> <booktitle> Handbooks in Operations Research and Management Science, </booktitle> <volume> Vol 4., </volume> <booktitle> Logistics of Production and Inventory, </booktitle> <pages> pages 445-522. </pages> <publisher> North-Holland, </publisher> <year> 1993. </year>
Reference-contexts: This problem is strongly N P-hard; furthermore, except for the cases when there are two jobs or when there are two machines and each job has at most two operations, essentially all special cases of this problem are N P-hard, and typically strongly N P-hard <ref> [6, 7] </ref>. For example, it is N P -hard even if there are 3 machines, 3 jobs and each operation is of unit length; note that in this case we can think of the input length as , the maximum number of operations in a job. <p> A classic single instance of this problem involving only 10 jobs, 10 machines and 100 operations which was published in 1963, remained unsolved for 23 years despite repeated attempts to find an optimal solution <ref> [7] </ref>. Furthermore, several benchmark instances with 15 jobs, 15 machines and 225 operations are too hard to be solved by known methods and were posed as open problems by Applegate and Cook [1]. <p> length at most O ( log 2 (n) max ). 4.3 Unrelated parallel machines with chain precedence constraints A further generalization of the job shop problem is the problem of scheduling jobs on unrelated parallel machines subject to chain precedence constraints, which is denoted RjchainjC max in the notation of <ref> [7] </ref>.
Reference: [8] <author> T. Leighton, B. Maggs, and S. Rao. </author> <title> Universal packet routing algorithms. </title> <booktitle> In Proceedings of the 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 256-269, </pages> <year> 1988. </year>
Reference-contexts: In a different vein, Leighton, Maggs and Rao <ref> [8] </ref> have proposed the following model for the routing of packets in a network: find paths for the packets and then schedule the transmission of the packets along these paths so that no two packets traverse the same edge simultaneously. <p> Furthermore, the deterministic versions rely on linear programming algorithms. As a result, we will not refer explicitly to running times throughout the remainder of this paper. 2 The Basic Algorithm In this section we extend the technique due to Leighton, Maggs and Rao <ref> [8] </ref> of assigning random delays to jobs to the general case of non-preemptive job shop scheduling. A valid schedule assigns at most one job to a particular machine at any time, and schedules each job on at most one machine at any time.
Reference: [9] <author> J.K. Lenstra, D.B. Shmoys, and E. Tardos. </author> <title> Approximation algorithms for scheduling unrelated parallel machines. </title> <journal> Mathematical Programming, </journal> <volume> 46 </volume> <pages> 259-271, </pages> <year> 1990. </year>
Reference-contexts: The algorithm that tests a given threshold is based on results of Lenstra, Shmoys, & Tardos <ref> [9] </ref> and Lin & Vitter [10]. <p> Therefore, ~x satisfies n X p ij ~x ij 2d; i = 1; : : :; m; i=1 ~x ij = 0; if p ij &gt; 2p j ; i = 1; : : :; m; j = 1; : : :; n; A result of Lenstra, Shmoys, & Tardos <ref> [9] </ref> states that, in polynomial-time, any extreme point of such a linear program can be rounded to an integer solution x fl such that n X p ij x fl m X x fl x fl x fl Furthermore, since P j2C l p j d, l = 1; : :
Reference: [10] <author> J.H. Lin and J.S. Vitter. </author> <title> *-approximation with minimum packing constraint violation. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 771-782, </pages> <year> 1992. </year>
Reference-contexts: The algorithm that tests a given threshold is based on results of Lenstra, Shmoys, & Tardos [9] and Lin & Vitter <ref> [10] </ref>. <p> To make sure that this does not occur, we first apply the filtering technique of Lin & Vitter <ref> [10] </ref>, and round x ij to x ij by setting x ij = x ij ; if p ij 2p j ; 0; otherwise. (1) Of course, for each job J j , only a fraction t j = P m i=1 x ij of it is now assigned.
Reference: [11] <author> S. Plotkin, D. B. Shmoys, and E. Tardos. </author> <title> Fast approximation algorithms for fractional packing and covering problems. </title> <note> To appear in Math of Operations Research, </note> <year> 1995. </year>
Reference-contexts: Are there significantly more efficient algorithms which have the same performance guarantees? Stein [19] has given an algorithm that directly finds a good approximate solution to the integer program (IP ) by using the framework of Plotkin, Shmoys, and Tardos <ref> [11] </ref>. This yields an implementation of our algorithm that runs in O (n 2 m 2 2 + n 3 2 log (m)( + log (m))) time. Although this represents a dramatic improvement over the previously known bound, it remains an interesting question to give substantially more efficient algorithms.
Reference: [12] <author> P. Raghavan. </author> <title> Probabilistic construction of deterministic algorithms: approximating packing integer programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 37 </volume> <pages> 130-143, </pages> <year> 1988. </year>
Reference-contexts: As a corollary, we also obtain a deterministic version of the randomized algorithm of Leighton, Maggs and Rao. Our results rely on results of Raghavan and Thompson [14] and Raghavan <ref> [12] </ref> to approximate certain integer packing problems. In contrast to this, the only "negative" result previously known for any shop scheduling problem is that the existence of a fully polynomial approximation scheme would imply that P = N P, due to the fact that these problems are strongly N P-hard. <p> Our approach to the problem of selecting good delays is to frame it as a vector selection problem and then apply techniques developed by Raghavan and Thompson [13, 14] and Ragha-van <ref> [12] </ref> which find constant factor approximations to certain "packing" integer programs. The approach is to formulate the problem as a f0; 1g-integer program, solve the linear programming relaxation, and then randomly round the solution to an integer solution. <p> For certain types of problems this yields provably good approximations with high probability [13, 14]. Furthermore, for many of the problems for which there are approximations with high probability, the algorithm can be derandomized. Raghavan <ref> [12] </ref> has shown how to do this by essentially setting the random bits one at a time. <p> As in <ref> [12] </ref>, we can reformulate this as a f0; 1g-integer program. Let x j;k be the indicator variable used to indicate whether V j;k is selected from j . <p> We already know, by Lemma 2.1, that W OPT = O (log (m)), and so an optimal solution to this integer program would solve Problem 5.1. However, the problem is N P-hard. Instead, we rely on the following theorem which is immediate from the results in <ref> [12] </ref> and [14]. Theorem 5.3 [12, 14] A feasible solution to (IP ) with W = O (W OPT + log (m)) can be found in polynomial time. <p> However, the problem is N P-hard. Instead, we rely on the following theorem which is immediate from the results in [12] and [14]. Theorem 5.3 <ref> [12, 14] </ref> A feasible solution to (IP ) with W = O (W OPT + log (m)) can be found in polynomial time.
Reference: [13] <author> P. Raghavan and C. D. Thompson. </author> <title> Provably good routing in graphs: regular arrays. </title> <booktitle> In Proceedings of the 17th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 79-87, </pages> <year> 1985. </year>
Reference-contexts: Our approach to the problem of selecting good delays is to frame it as a vector selection problem and then apply techniques developed by Raghavan and Thompson <ref> [13, 14] </ref> and Ragha-van [12] which find constant factor approximations to certain "packing" integer programs. The approach is to formulate the problem as a f0; 1g-integer program, solve the linear programming relaxation, and then randomly round the solution to an integer solution. <p> The approach is to formulate the problem as a f0; 1g-integer program, solve the linear programming relaxation, and then randomly round the solution to an integer solution. For certain types of problems this yields provably good approximations with high probability <ref> [13, 14] </ref>. Furthermore, for many of the problems for which there are approximations with high probability, the algorithm can be derandomized. Raghavan [12] has shown how to do this by essentially setting the random bits one at a time.
Reference: [14] <author> P. Raghavan and C. D. Thompson. </author> <title> Randomized rounding: a technique for provably good algorithms and algorithmic proofs. </title> <journal> Combinatorica, </journal> <volume> 7 </volume> <pages> 365-374, </pages> <year> 1987. </year>
Reference-contexts: As a corollary, we also obtain a deterministic version of the randomized algorithm of Leighton, Maggs and Rao. Our results rely on results of Raghavan and Thompson <ref> [14] </ref> and Raghavan [12] to approximate certain integer packing problems. <p> Our approach to the problem of selecting good delays is to frame it as a vector selection problem and then apply techniques developed by Raghavan and Thompson <ref> [13, 14] </ref> and Ragha-van [12] which find constant factor approximations to certain "packing" integer programs. The approach is to formulate the problem as a f0; 1g-integer program, solve the linear programming relaxation, and then randomly round the solution to an integer solution. <p> The approach is to formulate the problem as a f0; 1g-integer program, solve the linear programming relaxation, and then randomly round the solution to an integer solution. For certain types of problems this yields provably good approximations with high probability <ref> [13, 14] </ref>. Furthermore, for many of the problems for which there are approximations with high probability, the algorithm can be derandomized. Raghavan [12] has shown how to do this by essentially setting the random bits one at a time. <p> We already know, by Lemma 2.1, that W OPT = O (log (m)), and so an optimal solution to this integer program would solve Problem 5.1. However, the problem is N P-hard. Instead, we rely on the following theorem which is immediate from the results in [12] and <ref> [14] </ref>. Theorem 5.3 [12, 14] A feasible solution to (IP ) with W = O (W OPT + log (m)) can be found in polynomial time. <p> However, the problem is N P-hard. Instead, we rely on the following theorem which is immediate from the results in [12] and [14]. Theorem 5.3 <ref> [12, 14] </ref> A feasible solution to (IP ) with W = O (W OPT + log (m)) can be found in polynomial time.
Reference: [15] <author> J.P. Schmidt, A. Siegel, and A. Srinivasan. </author> <title> Chernoff-Hoeffding bounds for applications with limited independence. </title> <booktitle> In Proceedings of the 4th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 331-340, </pages> <year> 1993. </year>
Reference-contexts: We then apply Lemma 2.2 to produce a schedule of length O (log 2 (m)C fl max ). Note that the O (log (m)) jobs per machine is not as good as the probabilistic bound of O ( log (m) log log (m) ). Recently, Schmidt, Siegel, and Srinivasan <ref> [15] </ref> have given a different derandomizing strategy for this problem that yields delays that match the performance of the randomized algorithm.
Reference: [16] <author> S. V. Sevast'yanov. </author> <title> On an asymptotic approach to some problems in scheduling theory. </title> <booktitle> In Abstracts of papers at 3rd All-Union Conf. of Problems of Theoretical Cybernetics [in Russian], </booktitle> <pages> pages 67-69. </pages> <publisher> Inst. Mat. Sibirsk. Otdel. Akad. Nauk SSSR, </publisher> <address> Novosibirsk, </address> <year> 1974. </year>
Reference-contexts: We briefly review both approaches here. The best approximation algorithms to date for job shop scheduling have primarily appeared in the Soviet literature and are based on a beautiful connection to geometric arguments. This approach was independently discovered by Belov and Stolin [3] and Sevast'yanov <ref> [16] </ref> as well as by Fiala [4]. This approach typically produces schedules for which the length can be bounded by max + q (m; )p max , where q (; ) is a polynomial, and p max = max ij p ij is the maximum operation length.
Reference: [17] <author> S.V. Sevast'yanov. </author> <title> Efficient construction of schedules close to optimal for the cases of arbitrary and alternative routes of parts. </title> <journal> Soviet Math. Dokl., </journal> <volume> 29(3) </volume> <pages> 447-450, </pages> <year> 1984. </year> <month> 15 </month>
Reference-contexts: This approach typically produces schedules for which the length can be bounded by max + q (m; )p max , where q (; ) is a polynomial, and p max = max ij p ij is the maximum operation length. For the job shop problem, Sevast'yanov <ref> [17, 18] </ref> gave a polynomial-time algorithm that delivered a schedule of length at most max + O (m 3 )p max . The bounds obtained in this way do not give good worst-case relative error bounds.
Reference: [18] <author> S.V. Sevast'yanov. </author> <title> Bounding algorithm for the routing problem with arbitrary paths and alternative servers. </title> <journal> Kibernetika, </journal> <volume> 22(6) </volume> <pages> 74-79, </pages> <year> 1986. </year> <booktitle> Translation in Cybernetics 22, </booktitle> <pages> pages 773-780. </pages>
Reference-contexts: This approach typically produces schedules for which the length can be bounded by max + q (m; )p max , where q (; ) is a polynomial, and p max = max ij p ij is the maximum operation length. For the job shop problem, Sevast'yanov <ref> [17, 18] </ref> gave a polynomial-time algorithm that delivered a schedule of length at most max + O (m 3 )p max . The bounds obtained in this way do not give good worst-case relative error bounds. <p> For the instance consisting of just the short jobs, let 0 max and p 0 max denote the maximum machine load and operation length, respectively. Using the algorithm of <ref> [18] </ref> described in the introduction, we can, in time polynomial in the input size, produce a schedule of length 0 max + 2m 3 p 0 this instance. <p> A schedule for the resulting job shop problem of length ( max + P max ) yields a solution for the more general problem of length O ( ( avg + P max )). Sevast'yanov <ref> [18] </ref> used a somewhat more complicated reduction to handle a slightly more general setting. For each operation O ij to be processed by a machine in S k , if p ij (S k )=jS k j, assign O ij to one machine in S k .
Reference: [19] <author> C. Stein. </author> <title> Approximation algorithms for multicommodity flow and shop scheduling problems. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <address> Cambridge, MA, </address> <month> August </month> <year> 1992. </year> <note> Also appears as MIT/LCS/TR-550. </note>
Reference-contexts: It remains an interesting open problem to close this gap. * Our algorithms, while polynomial-time algorithms, are inefficient. Are there significantly more efficient algorithms which have the same performance guarantees? Stein <ref> [19] </ref> has given an algorithm that directly finds a good approximate solution to the integer program (IP ) by using the framework of Plotkin, Shmoys, and Tardos [11].
Reference: [20] <author> D. P. Williamson, L. Hall, J. A. Hoogeven, C. A. J. Hurkens, J. K. Lenstra, and D. B. Shmoys. </author> <title> Short shop schedules. </title> <type> Unpublished Manuscript, </type> <year> 1993. </year> <title> 16 max = 4. (b) The first level of spreading. All jobs of length 4 have been put in the final fragments. We must now recurse on B 1 and B 2 with p 0 max = 2. (c) The final schedule of length 8 log 2 8 = 24. </title> <type> 17 </type>
Reference-contexts: Subsequent to our work, Williamson, Hall, Hoogeveen, Hurkens, Lenstra, and Shmoys <ref> [20] </ref> showed that the existence of a -approximation algorithm for any shop scheduling problem with &lt; 5=4 would imply that 2 P = N P. Our techniques can also be made to apply to three important generalizations of the job shop problem. <p> would need to do is to produce any greedy schedule. * Are there simple variants of the greedy algorithm for open shop scheduling that achieve better performance guarantees? For instance, how good is the algorithm that always selects the job with the maximum total (remaining) processing time? Williamson et al. <ref> [20] </ref> have shown that the existence of a -approximation algorithm with &lt; 5=4 would imply that P = N P. It remains an interesting open problem to close this gap. * Our algorithms, while polynomial-time algorithms, are inefficient.
References-found: 20

