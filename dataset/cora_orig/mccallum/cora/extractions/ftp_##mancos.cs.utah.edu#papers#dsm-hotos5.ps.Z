URL: ftp://mancos.cs.utah.edu/papers/dsm-hotos5.ps.Z
Refering-URL: ftp://mancos.cs.utah.edu/papers/dsm-hotos5.html
Root-URL: 
Title: Distributed Shared Memory:  
Keyword: Dilip Khandekar Linus Kamb  
Affiliation: Computer Systems Laboratory University of Utah  
Abstract: Where We Are and Where We Should Be Headed Abstract It has been almost ten years since the birth of the first distributed shared memory (DSM) system, Ivy. While significant progress has been made in the area of improving the performance of DSM and DSM has been the focus of several dozen PhD theses, its overall impact on "real" users and applications has been small. The goal of this paper is to present our position on what remains to be done before DSM will have a significant impact on real applications. More specifically, we reflect on what we believe have been the major advances in the area, what the important outstanding problems are, and what work needs to be done. Finally, we describe a modest step towards solving these problems, the Quarks DSM system. 1 How We Got to Where We Are 
Abstract-found: 1
Intro-found: 1
Reference: <institution> References </institution>
Reference: [1] <author> H.E. Bal, M.F. Kaashoek, </author> <title> and A.S. Tanenbaum. Orca: A language for parallel programming of distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <pages> pages 190-205, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Since this work, there has been a huge amount of work done to extend the idea to other areas (e.g., distributed object based systems <ref> [14, 5, 1, 20, 10] </ref> and operating systems [23, 7, 2]) and to improve its performance [11, 4, 24, 15].
Reference: [2] <author> J.S. Barrera. </author> <title> A fast Mach network IPC implementation. </title> <booktitle> In Proceedings of the Mach USENIX Symposium, </booktitle> <pages> pages 1-12, </pages> <year> 1991. </year>
Reference-contexts: Since this work, there has been a huge amount of work done to extend the idea to other areas (e.g., distributed object based systems [14, 5, 1, 20, 10] and operating systems <ref> [23, 7, 2] </ref>) and to improve its performance [11, 4, 24, 15]. However, the impact of This research was supported in part by the National Science Foundation under Grant CCR-9308879 and by the Advanced Research Projects Agency (ARPA), monitored by the Department of the Army, under Contract DABT63-94-C-0058. <p> Quarks consists of a user-level 2 Mach's XMM <ref> [2] </ref> interface is a step in the right direction, but it is based on dated technology. 3 The name is derived from our hope that Quarks will be the basic building block on which more sophisticated DSM systems and applications are developed once it has been released into the research universe. <p> It is our hope that by placing a relatively sophisticated DSM system in the public domain we will increase the number of users and make DSM research easier to perform. On a separate note, one facet of the ongoing Flex/Mach project at Utah is the replacement of the XMM <ref> [2] </ref> implementation with a more modern DSM variant to make DSM a basic, efficient system service for Mach applications and servers.
Reference: [3] <author> J.B. Carter, J.K. Bennett, and W. Zwaenepoel. </author> <title> Techniques for reducing consistency-related communication in distributed shared memory systems. </title> <journal> ACM Transactions on Computer Systems. </journal> <note> To appear. </note>
Reference-contexts: This effort will be integrated with Quarks to support DSM for applications other than parallel scientific programs on top of Mach. 4 Conclusions The performance of software DSM systems has improved dramatically by addressing the problems of false sharing and excessive DSM-related communication <ref> [3, 6, 24] </ref>. Efficient DSM systems can now perform as well as hardware shared memory for moderate grained programs [6], but the overhead associated with software implementations of DSM limits its value for fine-grained computations.
Reference: [4] <author> J.B. Carter, J.K. Bennett, and W. Zwaenepoel. </author> <title> Implementation and performance of Munin. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 152-164, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Since this work, there has been a huge amount of work done to extend the idea to other areas (e.g., distributed object based systems [14, 5, 1, 20, 10] and operating systems [23, 7, 2]) and to improve its performance <ref> [11, 4, 24, 15] </ref>. However, the impact of This research was supported in part by the National Science Foundation under Grant CCR-9308879 and by the Advanced Research Projects Agency (ARPA), monitored by the Department of the Army, under Contract DABT63-94-C-0058. <p> The second major leap in DSM research came when researchers adopted the relaxed consistency models developed for shared memory hardware and began to take advantage of the greater flexibility possible in a software implementation of coherence <ref> [4, 15, 24, 20] </ref>. The major contributions of Munin [4], TreadMarks [15], Midway [24] and DiSOM [20] were a dramatic reduction in the amount of coherence messages required to maintain consistency [4, 15] and a reduction in the overhead of the basic DSM mechanisms [24]. <p> The second major leap in DSM research came when researchers adopted the relaxed consistency models developed for shared memory hardware and began to take advantage of the greater flexibility possible in a software implementation of coherence [4, 15, 24, 20]. The major contributions of Munin <ref> [4] </ref>, TreadMarks [15], Midway [24] and DiSOM [20] were a dramatic reduction in the amount of coherence messages required to maintain consistency [4, 15] and a reduction in the overhead of the basic DSM mechanisms [24]. <p> The major contributions of Munin [4], TreadMarks [15], Midway [24] and DiSOM [20] were a dramatic reduction in the amount of coherence messages required to maintain consistency <ref> [4, 15] </ref> and a reduction in the overhead of the basic DSM mechanisms [24].
Reference: [5] <author> J.S. Chase, F.G. Amador, E.D. Lazowska, H.M. Levy, and R.J. Littlefield. </author> <title> The Amber system: Parallel programming on a network of multiprocessors. </title> <booktitle> In Proceedings of the 12th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 147-158, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: Since this work, there has been a huge amount of work done to extend the idea to other areas (e.g., distributed object based systems <ref> [14, 5, 1, 20, 10] </ref> and operating systems [23, 7, 2]) and to improve its performance [11, 4, 24, 15].
Reference: [6] <author> A.L. Cox, S. Dwarkadas, P. Keleher, H. Lu, R. Raja-mony, and W. Zwaenepoel. </author> <title> Software versus hardware shared-memory implementation: A case study. </title> <booktitle> In Proceedings of the 21st Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 106-117, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: This effort will be integrated with Quarks to support DSM for applications other than parallel scientific programs on top of Mach. 4 Conclusions The performance of software DSM systems has improved dramatically by addressing the problems of false sharing and excessive DSM-related communication <ref> [3, 6, 24] </ref>. Efficient DSM systems can now perform as well as hardware shared memory for moderate grained programs [6], but the overhead associated with software implementations of DSM limits its value for fine-grained computations. <p> Efficient DSM systems can now perform as well as hardware shared memory for moderate grained programs <ref> [6] </ref>, but the overhead associated with software implementations of DSM limits its value for fine-grained computations.
Reference: [7] <author> P. Dasgupta, R.C. Chen, S. Menon, M. Pearson, R. Ananthanarayanan, U. Ramachandran, M. Aha-mad, R. LeBlanc Jr., W. Applebe, J.M. Bernabeu-Auban, P.W. Hutto, M.Y.A. Khalidi, and C.J. Wileknloh. </author> <title> The design and implementation of the Clouds distributed operating system. </title> <journal> Computing Systems Journal, </journal> <volume> 3, </volume> <month> Winter </month> <year> 1990. </year>
Reference-contexts: Since this work, there has been a huge amount of work done to extend the idea to other areas (e.g., distributed object based systems [14, 5, 1, 20, 10] and operating systems <ref> [23, 7, 2] </ref>) and to improve its performance [11, 4, 24, 15]. However, the impact of This research was supported in part by the National Science Foundation under Grant CCR-9308879 and by the Advanced Research Projects Agency (ARPA), monitored by the Department of the Army, under Contract DABT63-94-C-0058. <p> Government, or the University of Utah. DSM on non-research users and applications has been very small. Why is that? The earliest DSM systems <ref> [17, 11, 14, 7] </ref> provided the basic functionality of a virtually shared address space spanning a network of machines, but their use of the same coherence protocols as shared memory hardware resulted in poor performance for applications with even a moderate amount of fine-grained sharing. <p> The reasons for this were that the unit of coherence tended to be large (pages in the case of Ivy [17] and Mirage [11] and objects in the case of Emerald [14] and Clouds <ref> [7] </ref>), the mechanisms used to maintain coherence were heavy weight (page faulting in the case of Ivy, Mirage, and Clouds; object migration in the case of Emerald), and the number of coherence actions, and thus the amount of communication, was excessive (due to the frequent read misses induced by sequentially consistent
Reference: [8] <author> S. Dwarkadas, P. Keleher, A.L. Cox, and W. Zwae-nepoel. </author> <title> Evaluation of release consistent software distributed shared memory on emerging network technology. </title> <booktitle> In Proceedings of the 20th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 144-155, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Suddenly a far wider spectrum of programs could be usefully solved using DSM, even to the point where moderate-grained programs could be solved as quickly using a software DSM system as using dedicated shared mem-ory hardware <ref> [8] </ref>.
Reference: [9] <author> M.J. Feeley, J.S. Chase, V.R. Narasaya, and H.M. Levy. </author> <title> Integrating coherency and recovery in distributed systems. </title> <booktitle> In Proceedings of the First Symposium on Operating System Design and Implementation, </booktitle> <pages> pages 215-229, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: This fundamental improvement in DSM performance brought with it another rush of research efforts aimed at overcoming the new bottlenecks that were exposed and extending DSM into yet new areas <ref> [16, 12, 9, 10] </ref>, but it is our opinion that despite the recent flurry of research published in the area, DSM is once again about to hit a lull.
Reference: [10] <author> P. Ferreira and M. Shapiro. </author> <title> Garbage collection and dsm consistency. </title> <booktitle> In Proceedings of the First Symposium on Operating System Design and Implementation, </booktitle> <pages> pages 229-241, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Since this work, there has been a huge amount of work done to extend the idea to other areas (e.g., distributed object based systems <ref> [14, 5, 1, 20, 10] </ref> and operating systems [23, 7, 2]) and to improve its performance [11, 4, 24, 15]. <p> This fundamental improvement in DSM performance brought with it another rush of research efforts aimed at overcoming the new bottlenecks that were exposed and extending DSM into yet new areas <ref> [16, 12, 9, 10] </ref>, but it is our opinion that despite the recent flurry of research published in the area, DSM is once again about to hit a lull.
Reference: [11] <author> B. Fleisch and G. Popek. </author> <title> Mirage: A coherent distributed shared memory design. </title> <booktitle> In Proceedings of the 12th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 211-223, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: Since this work, there has been a huge amount of work done to extend the idea to other areas (e.g., distributed object based systems [14, 5, 1, 20, 10] and operating systems [23, 7, 2]) and to improve its performance <ref> [11, 4, 24, 15] </ref>. However, the impact of This research was supported in part by the National Science Foundation under Grant CCR-9308879 and by the Advanced Research Projects Agency (ARPA), monitored by the Department of the Army, under Contract DABT63-94-C-0058. <p> Government, or the University of Utah. DSM on non-research users and applications has been very small. Why is that? The earliest DSM systems <ref> [17, 11, 14, 7] </ref> provided the basic functionality of a virtually shared address space spanning a network of machines, but their use of the same coherence protocols as shared memory hardware resulted in poor performance for applications with even a moderate amount of fine-grained sharing. <p> The reasons for this were that the unit of coherence tended to be large (pages in the case of Ivy [17] and Mirage <ref> [11] </ref> and objects in the case of Emerald [14] and Clouds [7]), the mechanisms used to maintain coherence were heavy weight (page faulting in the case of Ivy, Mirage, and Clouds; object migration in the case of Emerald), and the number of coherence actions, and thus the amount of communication, was
Reference: [12] <author> V.W. Freeh, D.K. Lowenthal, and G.R. Andrews. </author> <title> Distributed filaments: Efficient fine-grained parallelism on a cluster of workstations. </title> <booktitle> In Proceedings of the First Symposium on Operating System Design and Implementation, </booktitle> <address> page 201=214, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: This fundamental improvement in DSM performance brought with it another rush of research efforts aimed at overcoming the new bottlenecks that were exposed and extending DSM into yet new areas <ref> [16, 12, 9, 10] </ref>, but it is our opinion that despite the recent flurry of research published in the area, DSM is once again about to hit a lull.
Reference: [13] <author> G.A. Geist and V.S. Sunderam. </author> <title> The PVM system: Supercomputer level concurrent computation on a heterogenous network of workstations. </title> <booktitle> In Sixth Annual Distributed-Memory Computer Conference, </booktitle> <pages> pages 258-261, </pages> <year> 1991. </year>
Reference-contexts: applications, a niche too small to drive significant adoption of DSM technology into the mainstream. * No DSM systems are freely available 1 , so even the scientific programmers who might be able to exploit the power of current DSM systems are left using burdensome message passing systems like PVM <ref> [13] </ref>. * Existing systems are not well integrated with the rest of the software environment such as the compiler (with the notable but limited exceptions of Midway [24], SAM [21], and Blizzard [22]), and thus do not exploit the power of the existing soft ware infrastructure. * There is a dearth
Reference: [14] <author> E. Jul, H. Levy, N. Hutchinson, and A. Black. </author> <title> Fine-grained mobility in the Emerald system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 109-133, </pages> <month> Febru-ary </month> <year> 1988. </year>
Reference-contexts: Since this work, there has been a huge amount of work done to extend the idea to other areas (e.g., distributed object based systems <ref> [14, 5, 1, 20, 10] </ref> and operating systems [23, 7, 2]) and to improve its performance [11, 4, 24, 15]. <p> Government, or the University of Utah. DSM on non-research users and applications has been very small. Why is that? The earliest DSM systems <ref> [17, 11, 14, 7] </ref> provided the basic functionality of a virtually shared address space spanning a network of machines, but their use of the same coherence protocols as shared memory hardware resulted in poor performance for applications with even a moderate amount of fine-grained sharing. <p> The reasons for this were that the unit of coherence tended to be large (pages in the case of Ivy [17] and Mirage [11] and objects in the case of Emerald <ref> [14] </ref> and Clouds [7]), the mechanisms used to maintain coherence were heavy weight (page faulting in the case of Ivy, Mirage, and Clouds; object migration in the case of Emerald), and the number of coherence actions, and thus the amount of communication, was excessive (due to the frequent read misses induced
Reference: [15] <author> P. Keleher, S. Dwarkadas, A. Cox, and W. Zwaene-poel. Treadmarks: </author> <title> Distributed shared memory on standard workstations and operating systems. </title> <booktitle> In Proceedings of the 1994 Winter Usenix Conference, </booktitle> <pages> pages 115-131, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Since this work, there has been a huge amount of work done to extend the idea to other areas (e.g., distributed object based systems [14, 5, 1, 20, 10] and operating systems [23, 7, 2]) and to improve its performance <ref> [11, 4, 24, 15] </ref>. However, the impact of This research was supported in part by the National Science Foundation under Grant CCR-9308879 and by the Advanced Research Projects Agency (ARPA), monitored by the Department of the Army, under Contract DABT63-94-C-0058. <p> The second major leap in DSM research came when researchers adopted the relaxed consistency models developed for shared memory hardware and began to take advantage of the greater flexibility possible in a software implementation of coherence <ref> [4, 15, 24, 20] </ref>. The major contributions of Munin [4], TreadMarks [15], Midway [24] and DiSOM [20] were a dramatic reduction in the amount of coherence messages required to maintain consistency [4, 15] and a reduction in the overhead of the basic DSM mechanisms [24]. <p> The second major leap in DSM research came when researchers adopted the relaxed consistency models developed for shared memory hardware and began to take advantage of the greater flexibility possible in a software implementation of coherence [4, 15, 24, 20]. The major contributions of Munin [4], TreadMarks <ref> [15] </ref>, Midway [24] and DiSOM [20] were a dramatic reduction in the amount of coherence messages required to maintain consistency [4, 15] and a reduction in the overhead of the basic DSM mechanisms [24]. <p> The major contributions of Munin [4], TreadMarks [15], Midway [24] and DiSOM [20] were a dramatic reduction in the amount of coherence messages required to maintain consistency <ref> [4, 15] </ref> and a reduction in the overhead of the basic DSM mechanisms [24]. <p> Even worse, the net commercial impact of DSM remains limited to a small number of commercial operations <ref> [15, 19] </ref> and internal research projects at a number of workstation vendors (e.g., SGI and IBM).
Reference: [16] <author> P.T. Koch, R.J. Fowler, and E. </author> <month> Jul. </month> <title> Message-driven relaxed consistency in a software distributed shared memory system. </title> <booktitle> In Proceedings of the First Symposium on Operating System Design and Implementation, </booktitle> <pages> pages 75-86, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: This fundamental improvement in DSM performance brought with it another rush of research efforts aimed at overcoming the new bottlenecks that were exposed and extending DSM into yet new areas <ref> [16, 12, 9, 10] </ref>, but it is our opinion that despite the recent flurry of research published in the area, DSM is once again about to hit a lull. <p> In conjunction with the Quarks design effort, we have modified the gcc compiler to generate DSM-specific code, including embedded support for mixed DSM and RPC programs (as in Carlos <ref> [16] </ref>), support for static shared data, and (soon) support for software write detection and fine-grained access tracing, which we anticipate using for performance tuning and debugging. In an effort to increase Quarks' impact, we have strived to provide a simple user interface.
Reference: [17] <author> K. Li and P. Hudak. </author> <title> Memory coherence in shared virtual memory systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(4) </volume> <pages> 321-359, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: Government, or the University of Utah. DSM on non-research users and applications has been very small. Why is that? The earliest DSM systems <ref> [17, 11, 14, 7] </ref> provided the basic functionality of a virtually shared address space spanning a network of machines, but their use of the same coherence protocols as shared memory hardware resulted in poor performance for applications with even a moderate amount of fine-grained sharing. <p> The reasons for this were that the unit of coherence tended to be large (pages in the case of Ivy <ref> [17] </ref> and Mirage [11] and objects in the case of Emerald [14] and Clouds [7]), the mechanisms used to maintain coherence were heavy weight (page faulting in the case of Ivy, Mirage, and Clouds; object migration in the case of Emerald), and the number of coherence actions, and thus the amount
Reference: [18] <author> R.G. Minnich and D.J. Farber. </author> <title> The Mether system: A distributed shared memory for SunOS 4.0. </title> <booktitle> In Proceedings of the Summer 1989 USENIX Conference, </booktitle> <pages> pages 51-60, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: (with the notable but limited exceptions of Midway [24], SAM [21], and Blizzard [22]), and thus do not exploit the power of the existing soft ware infrastructure. * There is a dearth of tools for debugging and tun ing the performance of DSM programs. 1 With the exception of Mether <ref> [18] </ref>, which is a first generation DSM system. * The performance of existing systems for fine grained programs is still relatively poor.
Reference: [19] <author> Myrias Corporation. </author> <title> Pams: A distributed shared memory system for unix workstations, </title> <year> 1994. </year>
Reference-contexts: Even worse, the net commercial impact of DSM remains limited to a small number of commercial operations <ref> [15, 19] </ref> and internal research projects at a number of workstation vendors (e.g., SGI and IBM).
Reference: [20] <author> N. Neves, M. Castro, and P. Guedes. </author> <title> A checkpoint protocol for an entry consistent shared memory system. </title> <booktitle> In Proceedings of the 13th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: Since this work, there has been a huge amount of work done to extend the idea to other areas (e.g., distributed object based systems <ref> [14, 5, 1, 20, 10] </ref> and operating systems [23, 7, 2]) and to improve its performance [11, 4, 24, 15]. <p> The second major leap in DSM research came when researchers adopted the relaxed consistency models developed for shared memory hardware and began to take advantage of the greater flexibility possible in a software implementation of coherence <ref> [4, 15, 24, 20] </ref>. The major contributions of Munin [4], TreadMarks [15], Midway [24] and DiSOM [20] were a dramatic reduction in the amount of coherence messages required to maintain consistency [4, 15] and a reduction in the overhead of the basic DSM mechanisms [24]. <p> The major contributions of Munin [4], TreadMarks [15], Midway [24] and DiSOM <ref> [20] </ref> were a dramatic reduction in the amount of coherence messages required to maintain consistency [4, 15] and a reduction in the overhead of the basic DSM mechanisms [24].
Reference: [21] <author> D.J. Scales and M.S. Lam. </author> <title> The design and evaluation of a shared object system for distributed memory machines. </title> <booktitle> In Proceedings of the First Symposium on Operating System Design and Implementation, </booktitle> <pages> pages 101-114, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: who might be able to exploit the power of current DSM systems are left using burdensome message passing systems like PVM [13]. * Existing systems are not well integrated with the rest of the software environment such as the compiler (with the notable but limited exceptions of Midway [24], SAM <ref> [21] </ref>, and Blizzard [22]), and thus do not exploit the power of the existing soft ware infrastructure. * There is a dearth of tools for debugging and tun ing the performance of DSM programs. 1 With the exception of Mether [18], which is a first generation DSM system. * The performance <p> DSM needs to be made a basic system service so that applications other than homogeneous scientific programs can use it (e.g., to support sharing between distributed file buffer caches or nameservers) 2 . * Work must be done to add compiler support for DSM, as is being explored in SAM <ref> [21] </ref>, Midway [24], and Blizzard [22]. * Tools to debug and tune the performance of DSM systems must be developed.
Reference: [22] <author> I. Schoinas, B. Falsafi, A.R. Lebeck, S.K. Reinhardt, J.R. Larus, and D.A. Wood. </author> <title> Fine-grain access control for distributed shared memory. </title> <booktitle> In Proceedings of the 6th Symposium on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 297-306, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: able to exploit the power of current DSM systems are left using burdensome message passing systems like PVM [13]. * Existing systems are not well integrated with the rest of the software environment such as the compiler (with the notable but limited exceptions of Midway [24], SAM [21], and Blizzard <ref> [22] </ref>), and thus do not exploit the power of the existing soft ware infrastructure. * There is a dearth of tools for debugging and tun ing the performance of DSM programs. 1 With the exception of Mether [18], which is a first generation DSM system. * The performance of existing systems <p> a basic system service so that applications other than homogeneous scientific programs can use it (e.g., to support sharing between distributed file buffer caches or nameservers) 2 . * Work must be done to add compiler support for DSM, as is being explored in SAM [21], Midway [24], and Blizzard <ref> [22] </ref>. * Tools to debug and tune the performance of DSM systems must be developed. <p> An effort has been made to make adding new protocols easy, allowing the research community to experiment with new protocols and compiler writers to develop specialized protocols (as in Blizzard <ref> [22] </ref>). Currently Quarks is aimed primarily at the traditional shared memory parallel programming niche, with built-in support for remote thread forking and synchronization, but we are working to redesign it to target a more general application mix (e.g., cooperating servers or programs that monitor the internal state of other programs).
Reference: [23] <author> M. Young, A. Tevanian, R. Rashid, D. Golub, J. Ep-pinger, J. Chew, W. Bolosky, D. Black, and R. Baron. </author> <title> The duality of memory and communication in the implementation of a multiprocessor operating system. </title> <booktitle> In Proceedings of the 11th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 63-76, </pages> <month> October </month> <year> 1987. </year>
Reference-contexts: Since this work, there has been a huge amount of work done to extend the idea to other areas (e.g., distributed object based systems [14, 5, 1, 20, 10] and operating systems <ref> [23, 7, 2] </ref>) and to improve its performance [11, 4, 24, 15]. However, the impact of This research was supported in part by the National Science Foundation under Grant CCR-9308879 and by the Advanced Research Projects Agency (ARPA), monitored by the Department of the Army, under Contract DABT63-94-C-0058.
Reference: [24] <author> M.J. Zekauskas, </author> <title> W.A. Sawdon, and B.N. Bershad. Software write detection for distributed shared memory. </title> <booktitle> In Proceedings of the First Symposium on Operating System Design and Implementation, </booktitle> <pages> pages 87-100, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Since this work, there has been a huge amount of work done to extend the idea to other areas (e.g., distributed object based systems [14, 5, 1, 20, 10] and operating systems [23, 7, 2]) and to improve its performance <ref> [11, 4, 24, 15] </ref>. However, the impact of This research was supported in part by the National Science Foundation under Grant CCR-9308879 and by the Advanced Research Projects Agency (ARPA), monitored by the Department of the Army, under Contract DABT63-94-C-0058. <p> The second major leap in DSM research came when researchers adopted the relaxed consistency models developed for shared memory hardware and began to take advantage of the greater flexibility possible in a software implementation of coherence <ref> [4, 15, 24, 20] </ref>. The major contributions of Munin [4], TreadMarks [15], Midway [24] and DiSOM [20] were a dramatic reduction in the amount of coherence messages required to maintain consistency [4, 15] and a reduction in the overhead of the basic DSM mechanisms [24]. <p> The second major leap in DSM research came when researchers adopted the relaxed consistency models developed for shared memory hardware and began to take advantage of the greater flexibility possible in a software implementation of coherence [4, 15, 24, 20]. The major contributions of Munin [4], TreadMarks [15], Midway <ref> [24] </ref> and DiSOM [20] were a dramatic reduction in the amount of coherence messages required to maintain consistency [4, 15] and a reduction in the overhead of the basic DSM mechanisms [24]. <p> The major contributions of Munin [4], TreadMarks [15], Midway <ref> [24] </ref> and DiSOM [20] were a dramatic reduction in the amount of coherence messages required to maintain consistency [4, 15] and a reduction in the overhead of the basic DSM mechanisms [24]. Suddenly a far wider spectrum of programs could be usefully solved using DSM, even to the point where moderate-grained programs could be solved as quickly using a software DSM system as using dedicated shared mem-ory hardware [8]. <p> scientific programmers who might be able to exploit the power of current DSM systems are left using burdensome message passing systems like PVM [13]. * Existing systems are not well integrated with the rest of the software environment such as the compiler (with the notable but limited exceptions of Midway <ref> [24] </ref>, SAM [21], and Blizzard [22]), and thus do not exploit the power of the existing soft ware infrastructure. * There is a dearth of tools for debugging and tun ing the performance of DSM programs. 1 With the exception of Mether [18], which is a first generation DSM system. * <p> to be made a basic system service so that applications other than homogeneous scientific programs can use it (e.g., to support sharing between distributed file buffer caches or nameservers) 2 . * Work must be done to add compiler support for DSM, as is being explored in SAM [21], Midway <ref> [24] </ref>, and Blizzard [22]. * Tools to debug and tune the performance of DSM systems must be developed. <p> This effort will be integrated with Quarks to support DSM for applications other than parallel scientific programs on top of Mach. 4 Conclusions The performance of software DSM systems has improved dramatically by addressing the problems of false sharing and excessive DSM-related communication <ref> [3, 6, 24] </ref>. Efficient DSM systems can now perform as well as hardware shared memory for moderate grained programs [6], but the overhead associated with software implementations of DSM limits its value for fine-grained computations.
References-found: 25

