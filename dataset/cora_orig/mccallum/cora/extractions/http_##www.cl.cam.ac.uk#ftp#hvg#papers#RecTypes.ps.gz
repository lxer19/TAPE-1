URL: http://www.cl.cam.ac.uk/ftp/hvg/papers/RecTypes.ps.gz
Refering-URL: http://www.cl.cam.ac.uk/Research/HVG/FTP/FTP.html
Root-URL: 
Title: Using Recursive Types to Reason about Hardware in Higher Order Logic  
Author: Thomas F. Melham 
Address: New Museums Site, Pembroke Street Cambridge, CB2 3QG, England.  
Affiliation: University of Cambridge Computer Laboratory  
Abstract: T. Melham, `Using Recursive Types to Reason about Hardware in Higher Order Logic', Technical Report No. 135, University of Cambridge Computer Laboratory (May 1988). Abstract: The expressive power of higher order logic makes it possible to define a wide variety of data types within the logic and to prove theorems that state the properties of these types concisely and abstractly. This paper describes how such defined data types can be used to support formal reasoning in higher order logic about the behaviour of hardware designs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Camilleri, A., M. Gordon, and T. Melham, </author> <title> `Hardware Verification using Higher-Order Logic', in: From HDL Descriptions to Guaranteed Correct Circuit Designs: </title> <booktitle> Proceedings of the IFIP WG 10.2 Working Conference, </booktitle> <address> Grenoble, </address> <month> September </month> <year> 1986, </year> <title> edited by D. </title> <publisher> Borrione (North-Holland, </publisher> <year> 1987), </year> <pages> pp. 43-67. </pages>
Reference-contexts: Recursive types are used in both examples to model the structure of circuits independently of their behaviour. 1 Hardware Verification using Higher Order Logic The basic techniques for specifying and proving the correctness of hardware using higher order logic are well established and are documented in several recent papers <ref> [1, 6, 9, 12] </ref>. To make this paper self-contained, a brief review is given in this section of these techniques. The version of higher order logic used is based on Church's type theory [3], extended with the type discipline of the LCF logic PP [7]. <p> to the value on b. 1.3 Specifying Hardware Structure The behaviour of devices constructed by wiring together smaller devices can be represented in logic by conjoining the predicates that specify the behaviours of their components with the logical connective `^' and using the existential quantifier `9' to hide internal signals <ref> [1, 6] </ref>. <p> between these two transistor models is then formalized by a theorem which describes a condition under which the two models are effectively equivalent. 4.1 A Switch Model of Transistors One model of transistor behaviour treats a transistor as an ideal bidirectional switch controlled by the boolean value on its gate <ref> [1, 6] </ref>. In this simple model the behaviour of a n-type transistor is specified formally as follows: Ntran (g; s; d) (g (s = d)) In this specification the signals on the gate (g), source (s) and drain (d) of a transistor are modelled by values of type bool. <p> But it is in fact composed of an incorrect exclusive-or gate (the subcircuit on the left) connected to an inverter by the internal wire flwfl. The exclusive-or circuit shown in this diagram is given in <ref> [1] </ref> as an example of a CMOS design which can be proved correct using the switch model of transistors, but which is in fact incorrect due to the threshold switching behaviour of its transistors.
Reference: [2] <author> Cardelli, L., </author> <title> `An Algebraic Approach to Hardware Description and Verification', </title> <type> Ph.D. dissertation, </type> <institution> University of Edinburgh (April 1982). </institution>
Reference-contexts: In the sections that follow, a recursive type circ of MOS circuits is used to express formally the assertion that the two models are equivalent for a certain class of circuit designs. 4.3 A Recursive Type for the Syntax of MOS Circuits Following the approach of Cardelli <ref> [2] </ref> and Winskel [16], a language is defined in this section whose expressions are circuit terms which describe how circuits are constructed from subcircuits.
Reference: [3] <author> Church, A., </author> <title> `A Formulation of the Simple Theory of Types', </title> <journal> The Journal of Symbolic Logic, </journal> <volume> Vol. 5 (1940), </volume> <pages> pp. 56-68. </pages>
Reference-contexts: To make this paper self-contained, a brief review is given in this section of these techniques. The version of higher order logic used is based on Church's type theory <ref> [3] </ref>, extended with the type discipline of the LCF logic PP [7].
Reference: [4] <author> Gordon, M., </author> <title> `HOL: A Machine Oriented Formulation of Higher Order Logic', </title> <type> Technical Report no. 68, </type> <institution> Computer Laboratory, University of Cambridge, </institution> <note> revised version (July 1985). </note>
Reference-contexts: The version of higher order logic used is based on Church's type theory [3], extended with the type discipline of the LCF logic PP [7]. This formulation of higher order logic was developed by Mike Gordon for the HOL theorem prover [5] and is described in detail in <ref> [4] </ref>. 1.1 Notation The formulation of higher order logic used in this paper includes terms that correspond to the conventional notation of predicate calculus. <p> Section 2.3 describes a class of recursive types which can be added to the logic using such type definitions. 2.1 Type Definitions The type definition mechanism described in this section is based on a suggestion by Mike Fourman, which has been formalized by Mike Gordon in <ref> [4] </ref>. <p> Since (2) asserts that (ff fi fi) is isomorphic to this subset, adding this axiom to the logic defines `fi' to be the Cartesian product operation on types. See <ref> [4] </ref> for details. 11 2.2 Deriving Abstract Axioms for New Types Type definition axioms of the form described above merely state that a new type is isomorphic to a particular subset of an existing type.
Reference: [5] <author> Gordon, M.J.C., </author> <title> `HOL: A Proof Generating System for Higher-Order Logic', in: VLSI Specification, Verification and Synthesis, edited by G. Birtwistle and P.A. </title> <publisher> Subrahmanyam (Kluwer Academic Publishers, </publisher> <year> 1988), </year> <pages> pp. 73-128. </pages>
Reference-contexts: The version of higher order logic used is based on Church's type theory [3], extended with the type discipline of the LCF logic PP [7]. This formulation of higher order logic was developed by Mike Gordon for the HOL theorem prover <ref> [5] </ref> and is described in detail in [4]. 1.1 Notation The formulation of higher order logic used in this paper includes terms that correspond to the conventional notation of predicate calculus.
Reference: [6] <author> Gordon, M., </author> <title> `Why higher-order logic is a good formalism for specifying and verifying hardware', in: Formal Aspects of VLSI Design: </title> <booktitle> Proceedings of the 1985 Edinburgh Workshop on VLSI, edited by G.J. Milne and P.A. </booktitle> <publisher> Subrahmanyam (North-Holland, </publisher> <year> 1986), </year> <pages> pp. 153-177. </pages>
Reference-contexts: Recursive types are used in both examples to model the structure of circuits independently of their behaviour. 1 Hardware Verification using Higher Order Logic The basic techniques for specifying and proving the correctness of hardware using higher order logic are well established and are documented in several recent papers <ref> [1, 6, 9, 12] </ref>. To make this paper self-contained, a brief review is given in this section of these techniques. The version of higher order logic used is based on Church's type theory [3], extended with the type discipline of the LCF logic PP [7]. <p> to the value on b. 1.3 Specifying Hardware Structure The behaviour of devices constructed by wiring together smaller devices can be represented in logic by conjoining the predicates that specify the behaviours of their components with the logical connective `^' and using the existential quantifier `9' to hide internal signals <ref> [1, 6] </ref>. <p> between these two transistor models is then formalized by a theorem which describes a condition under which the two models are effectively equivalent. 4.1 A Switch Model of Transistors One model of transistor behaviour treats a transistor as an ideal bidirectional switch controlled by the boolean value on its gate <ref> [1, 6] </ref>. In this simple model the behaviour of a n-type transistor is specified formally as follows: Ntran (g; s; d) (g (s = d)) In this specification the signals on the gate (g), source (s) and drain (d) of a transistor are modelled by values of type bool.
Reference: [7] <author> Gordon, M.J., A.J. Milner, </author> <title> and C.P. Wadsworth, `Edinburgh LCF: A Mechanised Logic of Computation', </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. </volume> <publisher> 78 (Springer-Verlag, </publisher> <year> 1979). </year>
Reference-contexts: To make this paper self-contained, a brief review is given in this section of these techniques. The version of higher order logic used is based on Church's type theory [3], extended with the type discipline of the LCF logic PP <ref> [7] </ref>. This formulation of higher order logic was developed by Mike Gordon for the HOL theorem prover [5] and is described in detail in [4]. 1.1 Notation The formulation of higher order logic used in this paper includes terms that correspond to the conventional notation of predicate calculus.
Reference: [8] <editor> Gordon, M., et al., </editor> <title> The HOL System: </title> <booktitle> DESCRIPTION (DSTO and SRI International, </booktitle> <year> 1989). </year>
Reference-contexts: The package also includes tools for deriving structural induction and for automating primitive recursive definitions. A full description of this package appears in <ref> [8, 13] </ref>. 15 3 Reasoning about Tree-Shaped Devices Many hardware devices can be built by wiring basic components together to make tree-shaped structures.
Reference: [9] <author> Hanna, F.K. and N. Daeche, </author> <title> `Specification and Verification using Higher-Order Logic: A Case Study', in: Formal Aspects of VLSI Design: </title> <booktitle> Proceedings of the 1985 Edinburgh Workshop on VLSI, edited by G.J. Milne and P.A. </booktitle> <publisher> Subrahmanyam (North-Holland, </publisher> <year> 1986), </year> <pages> pp. 179-213. </pages>
Reference-contexts: Recursive types are used in both examples to model the structure of circuits independently of their behaviour. 1 Hardware Verification using Higher Order Logic The basic techniques for specifying and proving the correctness of hardware using higher order logic are well established and are documented in several recent papers <ref> [1, 6, 9, 12] </ref>. To make this paper self-contained, a brief review is given in this section of these techniques. The version of higher order logic used is based on Church's type theory [3], extended with the type discipline of the LCF logic PP [7].
Reference: [10] <author> Harper, R., D. MacQueen, and R. Milner, </author> <title> `Standard ML', </title> <type> Report no. </type> <institution> ECS-LFCS-86-2, Laboratory for Foundations of Computer Science, Department of Computer Science, University of Edinburgh (March 1986). </institution>
Reference-contexts: Section 2.1 below contains a brief explanation of how the syntax of types in higher order logic can be consistently extended using type definitions. These are analogous to abstract type definitions in programming languages like ML <ref> [10] </ref>; they define a new type by representing it by a set of values of an already existing type. <p> An expression of this form is similar to a `datatype' declaration in Standard ML <ref> [10] </ref>. It simply states the names of the constructors for a new type rty and the types of their arguments.
Reference: [11] <author> Hunt, </author> <title> W.A., `The Mechanical Verification of a Microprocessor Design', in: From HDL Descriptions to Guaranteed Correct Circuit Designs: </title> <booktitle> Proceedings of the IFIP WG 10.2 Working Conference, </booktitle> <address> Grenoble, </address> <month> September </month> <year> 1986, </year> <title> edited by D. </title> <publisher> Borrione (North-Holland, </publisher> <year> 1987), </year> <pages> pp. 89-129. </pages>
Reference-contexts: The actual width of the device specified by Tfz is implicitly determined by the size of the n-bit word represented by in. A similar technique for specifying n-bit wide devices is used by Hunt in <ref> [11] </ref>. 17 3.2 Alternative Implementations of the Device An n-bit test-for-zero device can be implemented by a tree of 2-input OR-gates connected to an inverter. Figure 1 shows two correct implementations of this kind for a 6-bit test-for-zero device.
Reference: [12] <author> Melham, T.F., </author> <title> `Abstraction Mechanisms for Hardware Verification', in: VLSI Specification, Verification and Synthesis, edited by G. Birtwistle and P.A. </title> <publisher> Subrahmanyam (Kluwer Academic Publishers, </publisher> <year> 1988), </year> <pages> pp. 267-291. </pages>
Reference-contexts: Recursive types are used in both examples to model the structure of circuits independently of their behaviour. 1 Hardware Verification using Higher Order Logic The basic techniques for specifying and proving the correctness of hardware using higher order logic are well established and are documented in several recent papers <ref> [1, 6, 9, 12] </ref>. To make this paper self-contained, a brief review is given in this section of these techniques. The version of higher order logic used is based on Church's type theory [3], extended with the type discipline of the LCF logic PP [7]. <p> For a discussion of various ways in which the correctness of circuits can be formulated using such abstraction functions see <ref> [12] </ref>. 2 Recursive Types in Higher Order Logic Higher order logic is a typed logic; every syntactically well-formed term of the logic must have a type that is consistent with the types of its subterms.
Reference: [13] <author> Melham, T.F., </author> <title> `Formalizing Abstraction Mechanisms for Hardware Verification in Higher Order Logic', </title> <type> Ph.D. dissertation, </type> <institution> Computer Laboratory, University of Cambridge (August 1989). </institution>
Reference-contexts: The process of defining these types and deriving abstract axioms for them has been automated using the HOL theorem prover for higher order logic. The details appear in <ref> [13] </ref>. 12 2.3.1 An Example: the Type of Lists Lists are a simple example of a recursive type. The abstract syntax of lists can be specified by the little grammar shown below: list : = Nil j Cons ff list Here, Nil and Cons are the usual constructors for lists. <p> The package also includes tools for deriving structural induction and for automating primitive recursive definitions. A full description of this package appears in <ref> [8, 13] </ref>. 15 3 Reasoning about Tree-Shaped Devices Many hardware devices can be built by wiring basic components together to make tree-shaped structures.
Reference: [14] <author> Weste, N.H.E. and K. Eshraghian, </author> <title> Principles of CMOS VLSI Design: A Systems Perspective, VLSI Systems Series (Addison-Wesley, </title> <year> 1985). </year>
Reference-contexts: It may be possible to adopt a circuit design style for which a simpler model will do. For example, the functional correctness of a fully complementary CMOS circuit does not critically depend on transistor size ratios <ref> [14, pp 160-61] </ref>. A very accurate transistor model, which took into account transistor sizes, would therefore be inappropriate for this conservative circuit design style. Assertions about the relationship between an accurate transistor model and a simpler one can be formulated naturally and concisely in higher order logic using recursive types.
Reference: [15] <author> Winskel, G., </author> <title> `Models and logic of MOS circuits', in: Logic of Programming and Calculi of Discrete Design: International Summer School Directed by F.L. </title> <editor> Bauer, M. Broy, </editor> <title> E.W. Dijkstra, C.A.R. Hoare, edited by M. Broy, NATO ASI Series, Series F, </title> <journal> Computer and Systems Sciences, </journal> <volume> Vol. </volume> <publisher> 36 (Springer-Verlag, </publisher> <year> 1987), </year> <pages> pp. 367-413. 39 </pages>
Reference-contexts: For a better model, see <ref> [15] </ref>. 27 The syntax of circuit terms is represented in logic by the recursive type circ, informally described by: circ : = Pwr str j Gnd str j Ntran str str str j Ptran str str str j Join circ circ j Hide str circ where str is an appropriately-defined (recursive)
Reference: [16] <author> Winskel, G., </author> <title> `Relating two models of hardware', in: Category Theory and Computer Science, edited by D.H. </title> <editor> Pitt, A. Poigne, and D.E. Rydeheard, </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. </volume> <publisher> 283 (Springer-Verlag, </publisher> <year> 1987), </year> <pages> pp. 98-113. </pages>
Reference-contexts: In the sections that follow, a recursive type circ of MOS circuits is used to express formally the assertion that the two models are equivalent for a certain class of circuit designs. 4.3 A Recursive Type for the Syntax of MOS Circuits Following the approach of Cardelli [2] and Winskel <ref> [16] </ref>, a language is defined in this section whose expressions are circuit terms which describe how circuits are constructed from subcircuits. <p> Thanks are also due to Glynn Winskel for useful discussions about relating transistor models; the approach used in Section 4 is based on his paper <ref> [16] </ref>, in which categorical concepts are used to reason about relationships between models of hardware. I am grateful to Gonville and Caius College for support in the form of an unofficial fellowship, during which the work described here was done.
References-found: 16

