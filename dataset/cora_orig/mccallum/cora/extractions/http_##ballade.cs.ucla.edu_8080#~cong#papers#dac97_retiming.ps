URL: http://ballade.cs.ucla.edu:8080/~cong/papers/dac97_retiming.ps
Refering-URL: http://ballade.cs.ucla.edu/~cong/publications.html
Root-URL: http://www.cs.ucla.edu
Title: FPGA Synthesis with Retiming and Pipelining for Clock Period Minimization of Sequential Circuits  
Author: Jason Cong and Chang Wu 
Address: Los Angeles, CA 90095  
Affiliation: Department of Computer Science University of California,  
Abstract: In this paper, we present a new algorithm, named TurboSYN, for FPGA synthesis with retiming and pipelining to minimize the clock period for sequential circuits. For a target clock period, since pipelining can eliminate all critical I/O paths, but not critical loops, we concentrate on FPGA synthesis to eliminate the critical loops. We combine the combinational functional decomposition technique with retiming to perform the sequential functional decomposition, and incorporate it in the label computation of TurboMap [11] to eliminate all critical loops. The results show a significant improvement over the state-of-the-art FPGA mapping and resynthesis algorithms (1:7 ~2 times reduction on the clock period). Moreover, we develop a novel approach for positive loop detection which leads to over 10 ~ 50 times speedup of the algorithm. As a result, TurboSYN can optimize sequential circuits of over 10 4 gates and 10 3 flipflops in reasonable time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Altera. </author> <title> Flex 8000 and Flex 10000 Programmable Logic Device Family Data Sheets. </title> <year> 1995. </year>
Reference-contexts: In this paper, we consider lookup table (LUT) based FPGAs. A lookup table with K inputs and one output, denoted K-LUT, can implement any combinational function of up to K inputs. It is the most widely used PLB in current FPGAs <ref> [1, 18, 27] </ref>. There have been many research results on K-LUT mapping and synthesis for combinational circuits. A comprehensive survey can be found in [7].
Reference: [2] <author> R. K. Brayton, R. Rudell, A. L. Sangiovanni-Vincentelli, and A. R. Wang. </author> <title> Mis: A multiple-level logic optimization system. </title> <journal> IEEE Tans. on Computer-Aided Desing, </journal> <volume> 6(6) </volume> <pages> 1062-1081, </pages> <year> 1987. </year>
Reference-contexts: As in [6, 11, 19], this paper assumes that the initial circuits are K-bounded. (When a circuit is not K-bounded, we can use gate decomposition algorithms, such as balanced tree decomposition <ref> [2] </ref>, DMIG [4] or DOGMA [9], to decompose the gates with more than K fanins.) To solve Problem 1, our algorithm, named TurboSYN, works in three steps: (1) label computation (to be explained later) with sequential functional decomposition to search for a mapping solution with the minimum MDR ratio, (2) mapping
Reference: [3] <author> S. T. Chakradhar, S. Dey, M. Potkonjak, and S. G. Rothweiler. </author> <title> Sequential Circuit Delay Optimization Using Global Path Delays. </title> <booktitle> In 30th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 408-489, </pages> <year> 1993. </year>
Reference-contexts: It is natural to expect better results by considering resynthesis, retiming and pipelining at the same time for sequential circuits. For general logic synthesis with retiming, Malik et. al. [17] proposed an approach of peripheral retiming with resynthesis and, Dey et. al. <ref> [3] </ref> proposed a logic resynthesis approach based on global path delays for retiming. However, peripheral retiming applies to only pipelined circuits which are a special class of sequential circuits. For the approach in [3], it is difficult to choose global path delays without exact information of whether it can be realized <p> retiming, Malik et. al. [17] proposed an approach of peripheral retiming with resynthesis and, Dey et. al. <ref> [3] </ref> proposed a logic resynthesis approach based on global path delays for retiming. However, peripheral retiming applies to only pipelined circuits which are a special class of sequential circuits. For the approach in [3], it is difficult to choose global path delays without exact information of whether it can be realized with resynthesis. Note that both approaches depend somewhat on the circuit structure or the initial positions of the FFs.
Reference: [4] <author> K. C. Chen, J. Cong, Y. Ding, A. B. Kahng, and P. Tra-jmar. DAG-Map: </author> <title> Graph-based FPGA Technology Mapping for Delay Optimization. </title> <booktitle> In IEEE Design and Test of Computers, </booktitle> <pages> pages 7-20, </pages> <year> 1992. </year>
Reference-contexts: As in [6, 11, 19], this paper assumes that the initial circuits are K-bounded. (When a circuit is not K-bounded, we can use gate decomposition algorithms, such as balanced tree decomposition [2], DMIG <ref> [4] </ref> or DOGMA [9], to decompose the gates with more than K fanins.) To solve Problem 1, our algorithm, named TurboSYN, works in three steps: (1) label computation (to be explained later) with sequential functional decomposition to search for a mapping solution with the minimum MDR ratio, (2) mapping generation and <p> Second, efficient low-cost K-cut computation (similar to the min-cost K-cut computation in [8], but much more efficient) is performed to maximize the sharings of inputs of different LUTs, thus, to reduce the number of LUTs. At last, mpack <ref> [4] </ref> and flow-pack [6] is performed to further reduce the number of LUTs. The flipflop minimization is left for retiming [16]. Our algorithm, named TurboSYN, can be summarized as follows. First, it runs TurboMap [11] to get an upper-bound UB of the minimum MDR ratio. <p> The test set consists of 12 MCNC FSM benchmarks and 4 ISCAS'89 benchmarks. SIS sequential synthesis commands and dmig <ref> [4] </ref> are performed to generate the initial circuits which are shown in the first three columns in Table 1. Columns GATE and FF list the number of gates and FFs in each circuit, respectively. Our experiment was performed on a SUN ULTRA 1 workstation with 192MB memory. <p> Columns list the minimum clock periods (or MDR ratios) under retiming and pipelin-ing. Columns CPU list the CPU time for all the three algorithms. Note that we did not list the postprocessing time of mpack <ref> [4] </ref>, flowpack [6], pipelining and retiming for the three approaches, because it is usually small compared to the label computation time, and the postprocessings are not our contribution. The results show that TurboSYN can reduce the clock period by 1.72 and 1.96 times as compared with FlowSYN-s and TurboMap, respectively.
Reference: [5] <author> J. Cong and Y. Ding. </author> <title> Beyond the Combinatorial Limit in Depth Minimization for LUT-Based FPGA Designs. </title> <booktitle> In IEEE International Conference on CAD, </booktitle> <pages> pages 110-114, </pages> <year> 1993. </year>
Reference-contexts: It is the most widely used PLB in current FPGAs [1, 18, 27]. There have been many research results on K-LUT mapping and synthesis for combinational circuits. A comprehensive survey can be found in [7]. In particular, FlowMap [6] produces depth-optimal mapping solutions without resynthesis while FlowSYN <ref> [5] </ref> and BoolMap-D [15] can produce mapping solutions with even smaller depth using resynthesis techniques by exploiting Boolean optimization. <p> Although the results of these algorithms are better than those of FlowMap [6] based approach, they are not as good as those of FlowSYN <ref> [5] </ref> based approach in general, because FlowSYN exploits Boolean optimization. It is natural to expect better results by considering resynthesis, retiming and pipelining at the same time for sequential circuits. <p> We combine the label computation of TurboMap [11] with OBDD based functional decomposition, which has been shown to be very effective for the FPGA mapping problem <ref> [5, 14] </ref>, to search for a mapping solution with the minimum MDR ratio. To further speed up the algorithm, we propose an efficient positive loop detection algorithm which can speed up the label computation by over 10 ~ 50 times. <p> In order to satisfy those conditions, we resynthesize cone X (or equivalently, function f (V (X; X))) using the OBDD based functional decomposition technique, since it shows to be very effective for FPGA mapping problem <ref> [5, 14] </ref>. <p> in E v of height L (v) h 6 if cut-size &gt; Cmax, return L (v) + 1 7 else decompose the corresponding function f (v) 8 if (l s (v) L (v)), return L (v) constant to bound the cut-sizes, which is set to be 15 in TurboSYN. algorithm <ref> [5] </ref>, we sort the inputs u i w i of f (V (X; X)) in increasing order of (l (u i ) w i ). <p> Our experiment was performed on a SUN ULTRA 1 workstation with 192MB memory. K is set to be 5. In Table 1, we compared TurboSYN with TurboMap [11] and FlowSYN-s. FlowSYN-s is based on the FlowSYN algorithm <ref> [5] </ref>. It first partitions the sequential circuits into a set of combinational subcircuits by cutting at all FFs, then maps every subcircuits independently with the FlowSYN algorithm, and finally, merges the mapped LUT circuits with the original FFs. The PLD technique has been used in both TurboSYN and TurboMap.
Reference: [6] <author> J. Cong and Y. Ding. FlowMap: </author> <title> An Optimal Technology Mapping Algorithm for Delay Optimization in Lookup-Table Based FPGA Designs. </title> <journal> IEEE Trans. on Computer-Aided Design of Integrated Circuits And Systems, </journal> <volume> 13(1) </volume> <pages> 1-12, </pages> <year> 1994. </year>
Reference-contexts: It is the most widely used PLB in current FPGAs [1, 18, 27]. There have been many research results on K-LUT mapping and synthesis for combinational circuits. A comprehensive survey can be found in [7]. In particular, FlowMap <ref> [6] </ref> produces depth-optimal mapping solutions without resynthesis while FlowSYN [5] and BoolMap-D [15] can produce mapping solutions with even smaller depth using resynthesis techniques by exploiting Boolean optimization. <p> It reduces the runtime of SeqMapII by 2 fi 10 4 times on average and can optimize circuits of 10 4 gates efficiently with optimal clock periods. Although the results of these algorithms are better than those of FlowMap <ref> [6] </ref> based approach, they are not as good as those of FlowSYN [5] based approach in general, because FlowSYN exploits Boolean optimization. It is natural to expect better results by considering resynthesis, retiming and pipelining at the same time for sequential circuits. <p> The decision formulation is: Problem 2 For a sequential circuit and target clock period , decide if there exists a functionally equivalent LUT circuit with the MDR ratio of no more than . As in <ref> [6, 11, 19] </ref>, this paper assumes that the initial circuits are K-bounded. (When a circuit is not K-bounded, we can use gate decomposition algorithms, such as balanced tree decomposition [2], DMIG [4] or DOGMA [9], to decompose the gates with more than K fanins.) To solve Problem 1, our algorithm, named <p> For Steps 2 and 3, we propose a label relaxation method and low-cost K-cut computation for area minimization and use the methods similar to those in <ref> [6, 11, 16, 19] </ref>. and the target MDR ratio 1. To illustrate our approach, let us consider the example shown in Figure 1 (a) for a target MDR ratio of 1. <p> Second, efficient low-cost K-cut computation (similar to the min-cost K-cut computation in [8], but much more efficient) is performed to maximize the sharings of inputs of different LUTs, thus, to reduce the number of LUTs. At last, mpack [4] and flow-pack <ref> [6] </ref> is performed to further reduce the number of LUTs. The flipflop minimization is left for retiming [16]. Our algorithm, named TurboSYN, can be summarized as follows. First, it runs TurboMap [11] to get an upper-bound UB of the minimum MDR ratio. <p> Columns list the minimum clock periods (or MDR ratios) under retiming and pipelin-ing. Columns CPU list the CPU time for all the three algorithms. Note that we did not list the postprocessing time of mpack [4], flowpack <ref> [6] </ref>, pipelining and retiming for the three approaches, because it is usually small compared to the label computation time, and the postprocessings are not our contribution. The results show that TurboSYN can reduce the clock period by 1.72 and 1.96 times as compared with FlowSYN-s and TurboMap, respectively.
Reference: [7] <author> J. Cong and Y. Ding. </author> <title> Combinational Logic Synthesis for SRAM Based Field Programmable Gate Arrays. </title> <journal> ACM Transactions on Design Automation of Electronic Systems, </journal> <volume> 1(2) </volume> <pages> 145-204, </pages> <year> 1996. </year>
Reference-contexts: It is the most widely used PLB in current FPGAs [1, 18, 27]. There have been many research results on K-LUT mapping and synthesis for combinational circuits. A comprehensive survey can be found in <ref> [7] </ref>. In particular, FlowMap [6] produces depth-optimal mapping solutions without resynthesis while FlowSYN [5] and BoolMap-D [15] can produce mapping solutions with even smaller depth using resynthesis techniques by exploiting Boolean optimization.
Reference: [8] <author> J. Cong and Y.-Y. Hwang. </author> <title> Simultaneous Depth and Area Minimization in LUT-Based FPGA Mapping. </title> <booktitle> In ACM 3rd Int'l Symp. on Field Programmable Gate Arrays, </booktitle> <pages> pages 68-74, </pages> <year> 1995. </year>
Reference-contexts: First, we try to reduce the number of nodes which need resynthesis by label relaxation, i.e., not using the resynthesized results of some nodes and increasing their labels if no positive loops will occur. Second, efficient low-cost K-cut computation (similar to the min-cost K-cut computation in <ref> [8] </ref>, but much more efficient) is performed to maximize the sharings of inputs of different LUTs, thus, to reduce the number of LUTs. At last, mpack [4] and flow-pack [6] is performed to further reduce the number of LUTs. The flipflop minimization is left for retiming [16].
Reference: [9] <author> J. Cong and Y.-Y. Hwang. </author> <title> Structural Gate Decomposition for Depth-Optimal Technology Mapping in LUT-based FPGA Design. </title> <booktitle> In 33rd ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 726-729, </pages> <year> 1996. </year>
Reference-contexts: As in [6, 11, 19], this paper assumes that the initial circuits are K-bounded. (When a circuit is not K-bounded, we can use gate decomposition algorithms, such as balanced tree decomposition [2], DMIG [4] or DOGMA <ref> [9] </ref>, to decompose the gates with more than K fanins.) To solve Problem 1, our algorithm, named TurboSYN, works in three steps: (1) label computation (to be explained later) with sequential functional decomposition to search for a mapping solution with the minimum MDR ratio, (2) mapping generation and area reduction, (3)
Reference: [10] <author> J. Cong, J. Peck, and Y. Ding. RASP: </author> <title> A General Logic Synthesis System for SRAM-based FPGAs. </title> <booktitle> In Proc. ACM 4th Int'l Symp. on FPGA, </booktitle> <pages> pages 137-143, </pages> <year> 1996. </year>
Reference-contexts: The pseudo code of the TurboSYN algorithm is shown in Figure 4. 5 Experimental Results The TurboSYN algorithm has been implemented in C language on Sun SPARC workstations and incorporated into the SIS package [23] and the RASP System <ref> [10] </ref>. The test set consists of 12 MCNC FSM benchmarks and 4 ISCAS'89 benchmarks. SIS sequential synthesis commands and dmig [4] are performed to generate the initial circuits which are shown in the first three columns in Table 1.
Reference: [11] <author> J. Cong and C. Wu. </author> <title> An Improved Algorithm for Performance Optimal Technology Mapping with Retiming in LUT-Based FPGA Design. </title> <booktitle> In IEEE International Conference on Computer Design, </booktitle> <pages> pages 572-578, </pages> <year> 1996. </year>
Reference-contexts: Although their algorithm runs in polynomial time, the time complexity is too high to be used directly in practical designs. The recent work of TurboMap by Cong and Wu <ref> [11] </ref> leads to a significant speedup of the SeqMapII algorithm. It reduces the runtime of SeqMapII by 2 fi 10 4 times on average and can optimize circuits of 10 4 gates efficiently with optimal clock periods. <p> The decision formulation is: Problem 2 For a sequential circuit and target clock period , decide if there exists a functionally equivalent LUT circuit with the MDR ratio of no more than . As in <ref> [6, 11, 19] </ref>, this paper assumes that the initial circuits are K-bounded. (When a circuit is not K-bounded, we can use gate decomposition algorithms, such as balanced tree decomposition [2], DMIG [4] or DOGMA [9], to decompose the gates with more than K fanins.) To solve Problem 1, our algorithm, named <p> In this paper, we concentrate on the first step of label computation for solving Problem 2 which is the most critical step among the three steps, since the label computation determines the minimum possible MDR ratio after Steps 2 and 3. We combine the label computation of TurboMap <ref> [11] </ref> with OBDD based functional decomposition, which has been shown to be very effective for the FPGA mapping problem [5, 14], to search for a mapping solution with the minimum MDR ratio. <p> For Steps 2 and 3, we propose a label relaxation method and low-cost K-cut computation for area minimization and use the methods similar to those in <ref> [6, 11, 16, 19] </ref>. and the target MDR ratio 1. To illustrate our approach, let us consider the example shown in Figure 1 (a) for a target MDR ratio of 1. <p> With binary search one can compute the minimum MDR ratio of all possible mapping solutions to solve Problem 1. In this section, we present a novel iterative label computation method to meet a given MDR ratio . First, we review the label computation of TurboMap <ref> [11] </ref> and explain how it can be expanded for solving Problem 2. Then, we introduce a sequential functional decomposition technique and combine it with the label computation of TurboMap [11] to form the label computation of our TurboSYN algorithm. 3.1 Definitions For a mapping solution with a target clock period , <p> First, we review the label computation of TurboMap <ref> [11] </ref> and explain how it can be expanded for solving Problem 2. Then, we introduce a sequential functional decomposition technique and combine it with the label computation of TurboMap [11] to form the label computation of our TurboSYN algorithm. 3.1 Definitions For a mapping solution with a target clock period , the length of an edge e (u; v), denoted length (e), is defined to be w (e) + d (v), where w (e) is the edge weight and d <p> A recent improvement was proposed by Cong and Wu <ref> [11] </ref>, which leads to significant reduction in runtime (over 10 4 times) and space requirement (over 800 times). Our label computation algorithm is based on that of [11]. <p> A recent improvement was proposed by Cong and Wu <ref> [11] </ref>, which leads to significant reduction in runtime (over 10 4 times) and space requirement (over 800 times). Our label computation algorithm is based on that of [11]. One important concept is the expanded circuit for a node v, denoted E v , proposed by Pan and Liu [19] to represent all possible LUTs rooted at v under retiming and node replication. The expanded circuit E v is a directed acyclic graph rooted at v. <p> The node cut-set V (X; X) is the set of nodes in X which have connections to nodes in X. A cut is called a K-cut if j V (X; X) j K. To compute the node labels, the TurboMap algorithm <ref> [11] </ref> assigns a set of lower-bounds of node labels and iteratively update them until all of them converge to the node labels. The initial lower-bounds for internal nodes and POs are 1. The labels of PIs is 0. <p> To update the lower-bound for node v, we examine the lower-bounds l (u) of all fanin nodes u of v and compute L (v) = maxfl (u)w (e) j 8e (u; v) 2 Gg. The new lower-bound l new (v) for node v is computed as follows <ref> [11] </ref>: l new (v) = L (v) if 9K-cut with h (X; X) L (v) L (v)+1 otherwise, 1 Originally, the label computation in SeqMapII was stated as O (K 3 n 4 log (Kn 2 )). <p> Instead, they proved a bound of O (n 2 ). The O (log (Kn 2 )) speedup is due to the result in <ref> [11] </ref>. where the height h (X; X) of a K-cut (X; X) on E v is defined to be maxfl (u) w + 1 j 8u w 2 V (X; X)g. <p> To decide whether l new (v) = L (v), the max-flow computation is performed on a partial flow network to check if there exists a K-cut on the expanded circuit E v with height L (v) <ref> [11] </ref>. If such a K-cut exists, l new (v) is set to be L (v). Otherwise, l new (v) is set to be L (v) + 1. The procedure of updating the lower-bound of every node label once is called one iteration of label computation. <p> The iterative label computation is repeated until there is no more improvement of the lower-bounds (in this case, the current lower-bounds are the node labels), or stopped after performing n 2 iterations (in this case, there is no solution for the target MDR ratio) <ref> [19, 11] </ref>. It was showed that the above label computation guarantees to find the optimal solutions if no resynthesis is allowed [11]. With resynthesis, however, the node label l opt (v) can be further reduced as a much larger solution space is explored. <p> It was showed that the above label computation guarantees to find the optimal solutions if no resynthesis is allowed <ref> [11] </ref>. With resynthesis, however, the node label l opt (v) can be further reduced as a much larger solution space is explored. <p> Based on the above discussions, the label update algorithm in TurboSYN works in three steps. First, we compute L (v) based on the lower-bounds of node labels. Then, we decide the existence of a K-cut in E v with the height L (v) using the flow-based K-cut computation of <ref> [11] </ref>. If such a K-cut is found, l new (v) is set to be L (v). Otherwise, we compute a sequence of min-cuts (X h ; X h ) with the height of (L (v)h) for h starting 0 and increasing one by one. <p> A node v is isolated from node u in G if there does not exist any path from u to v in G . Based on the topological order of SCCs (strongly connected components) for the label computation proposed in <ref> [11] </ref>, we have the following important theorem: Theorem 2 For a sequential circuit G (V; E; W ) and one SCC with n nodes, there exists a positive loop in this SCC in all possible mapping solutions, if and only if after 6n iterations of label computation, all nodes of the <p> This procedure guarantees to determine exactly the existence of positive loops (if there is any) within 6n iterations for a SCC of n nodes. It is a significant improvement over the upper-bound of n 2 iterations proposed in [21]. We incorporated this approach into both the Tur-boMap <ref> [11] </ref> and our TurboSYN algorithms to compute the minimum MDR ratio and obtained 10 ~ 50 times speedup in runtime. <p> At last, mpack [4] and flow-pack [6] is performed to further reduce the number of LUTs. The flipflop minimization is left for retiming [16]. Our algorithm, named TurboSYN, can be summarized as follows. First, it runs TurboMap <ref> [11] </ref> to get an upper-bound UB of the minimum MDR ratio. Then, TurboSYN uses binary search over all values in the range of 1 to UB to get the minimum MDR ratio. <p> The runtime were recorded on a SUN ULTRA 1 with 192MB memory. TurboSYN (G (V; E; W )) 1 upper bound UB of the MDR ratio TurboMap <ref> [11] </ref> 2 binary search of from 1 to UB 3 l (P I) 0 and l (u) 1 4 while (no positive loops by PLD checking) 5 converge 1 6 for each node v 2 V 7 l new (v) = LabelUpdateSYN (v; ) 8 if (l new (v) &gt; l <p> Columns GATE and FF list the number of gates and FFs in each circuit, respectively. Our experiment was performed on a SUN ULTRA 1 workstation with 192MB memory. K is set to be 5. In Table 1, we compared TurboSYN with TurboMap <ref> [11] </ref> and FlowSYN-s. FlowSYN-s is based on the FlowSYN algorithm [5]. It first partitions the sequential circuits into a set of combinational subcircuits by cutting at all FFs, then maps every subcircuits independently with the FlowSYN algorithm, and finally, merges the mapped LUT circuits with the original FFs. <p> Instead of minimizing the clock period directly, we propose to minimize the MDR ratio and use pipeline to eliminate all critical I/O paths. We propose a novel positive loop detection technique to enhance the label computation of both the TurboMap <ref> [11] </ref> and TurboSYN algorithms. The results show significant improvement over existing FPGA mapping and resynthesis algorithms (1.7 to 2 times reduction on the clock periods). TurboSYN loses on area as compared to TurboMap and FlowSYN-s due to shortcomings of the single-output functional decomposition.
Reference: [12] <author> J. Cong and C. Wu. </author> <title> FPGA Synthesis with Retiming and Pipelining for Clock Period Minimization of Sequential Circuits. </title> <type> UCLA-CSD 970011, Technique Report, </type> <month> March </month> <year> 1997. </year>
Reference-contexts: Due to the page limitation, the proof is left out in <ref> [12] </ref>. According to this result, our PLD procedure for each SCC works as follows after every labeling iteration: 1) constructing G , 2) checking whether this SCC is totally isolated from the PIs in G . <p> As a result, our algorithm can compute mapping solutions with the minimal MDR ratio for circuits with over 10 4 gates and 10 3 FFs in reasonable time. A number of LUT reduction techniques are considered in TurboSYN <ref> [12] </ref>. First, we try to reduce the number of nodes which need resynthesis by label relaxation, i.e., not using the resynthesized results of some nodes and increasing their labels if no positive loops will occur.
Reference: [13] <author> T. H. Cormen, C. H. Leiserson, and R. L. Rivest. </author> <title> Introduction To Algorithms. </title> <publisher> The MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: To reduce the iteration number for the second case, we propose a novel positive loop detection technique, called PLD. Our PLD technique is based on the idea of predecessor graphs which are similar to those used in the shortest path theory <ref> [13] </ref>. The set of predecessors [v] of node v is defined to be [v] = fu j 8e (u; v) 2 G; l (u) w (e) + 1 l (v)g if l (v) &gt; 1, or otherwise, [v] = ;, for the current lower-bounds l (u) of labels.
Reference: [14] <author> Y. Lai, K. R. Pan, and M. Pedram. </author> <title> FPGA Synthesis using Function Decomposition. </title> <booktitle> In International Conference on Computer Design, </booktitle> <pages> pages 30-35, </pages> <year> 1994. </year>
Reference-contexts: We combine the label computation of TurboMap [11] with OBDD based functional decomposition, which has been shown to be very effective for the FPGA mapping problem <ref> [5, 14] </ref>, to search for a mapping solution with the minimum MDR ratio. To further speed up the algorithm, we propose an efficient positive loop detection algorithm which can speed up the label computation by over 10 ~ 50 times. <p> In order to satisfy those conditions, we resynthesize cone X (or equivalently, function f (V (X; X))) using the OBDD based functional decomposition technique, since it shows to be very effective for FPGA mapping problem <ref> [5, 14] </ref>.
Reference: [15] <author> C. Legl, B. Wurth, and K Eckl. </author> <title> A Boolean Approach to Performance-Directed Technology Mapping for LUT-Based FPGA Designs. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conference., </booktitle> <pages> pages 730-733, </pages> <year> 1996. </year>
Reference-contexts: There have been many research results on K-LUT mapping and synthesis for combinational circuits. A comprehensive survey can be found in [7]. In particular, FlowMap [6] produces depth-optimal mapping solutions without resynthesis while FlowSYN [5] and BoolMap-D <ref> [15] </ref> can produce mapping solutions with even smaller depth using resynthesis techniques by exploiting Boolean optimization.
Reference: [16] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Retiming Synchronous Circuitry. </title> <journal> Algorithmica, </journal> <volume> 6 </volume> <pages> 5-35, </pages> <year> 1991. </year>
Reference-contexts: However, delay-optimal mapping solutions to all combinational subcircuits may not lead to a cycle-optimal mapping solution for the sequential circuit, since they do not consider retiming which allows FFs to be moved without changing the circuit behavior <ref> [16] </ref>, Several heuristics have been proposed for technology mapping of sequential circuits with consideration of retiming [20, 24, 25]. Recently, a significant advancement was made by Pan and Liu [19]. <p> The retiming graph G (V; E; W ) of a sequential circuit is a directed graph, where V is the set of nodes, E is the set of edges and W is the set of weights of edges <ref> [16] </ref>. Each node in V represents a gate or a PI/PO in the original circuit. Each edge e (u; v) in E represents a directed connection from node u to node v. <p> Pipelining is one way to insert FFs followed by retiming to reduce the clock period. With both retiming and pipelining, the clock period of a circuit is bounded only by the MDR ratio of the circuit, based on the theories in <ref> [16, 22] </ref>. Therefore, to find a mapping solution with the minimum clock period under retiming and pipelining, we propose to solve the following problem: Problem 1 For a sequential circuit, find a functionally equivalent LUT circuit with the minimum MDR ratio. <p> For Steps 2 and 3, we propose a label relaxation method and low-cost K-cut computation for area minimization and use the methods similar to those in <ref> [6, 11, 16, 19] </ref>. and the target MDR ratio 1. To illustrate our approach, let us consider the example shown in Figure 1 (a) for a target MDR ratio of 1. <p> At last, mpack [4] and flow-pack [6] is performed to further reduce the number of LUTs. The flipflop minimization is left for retiming <ref> [16] </ref>. Our algorithm, named TurboSYN, can be summarized as follows. First, it runs TurboMap [11] to get an upper-bound UB of the minimum MDR ratio. Then, TurboSYN uses binary search over all values in the range of 1 to UB to get the minimum MDR ratio.
Reference: [17] <author> S. Malik, K. J. Singh, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Performance Optimization of Pipelined Logic Circuits Using Peripheral Retiming and Resynthesis. </title> <journal> IEEE Trans. on Computer-Aided Design of Integrated Circuits And Systems, </journal> <volume> 12(5) </volume> <pages> 568-578, </pages> <year> 1993. </year>
Reference-contexts: It is natural to expect better results by considering resynthesis, retiming and pipelining at the same time for sequential circuits. For general logic synthesis with retiming, Malik et. al. <ref> [17] </ref> proposed an approach of peripheral retiming with resynthesis and, Dey et. al. [3] proposed a logic resynthesis approach based on global path delays for retiming. However, peripheral retiming applies to only pipelined circuits which are a special class of sequential circuits.
Reference: [18] <institution> AT&T Microelectronics. AT&T Field-Programmable Gate Arrays Data Book. </institution> <year> 1995. </year>
Reference-contexts: In this paper, we consider lookup table (LUT) based FPGAs. A lookup table with K inputs and one output, denoted K-LUT, can implement any combinational function of up to K inputs. It is the most widely used PLB in current FPGAs <ref> [1, 18, 27] </ref>. There have been many research results on K-LUT mapping and synthesis for combinational circuits. A comprehensive survey can be found in [7].
Reference: [19] <author> P. Pan and C. L. Liu. </author> <title> Optimal Clock Period FPGA Technology Mapping for Sequential Circuits. </title> <booktitle> In 33th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 720-725, </pages> <year> 1996. </year>
Reference-contexts: Recently, a significant advancement was made by Pan and Liu <ref> [19] </ref>. They proposed a novel algorithm, named SeqMapII, to find mapping solutions with the minimum clock periods under retiming for sequential circuits. Although their algorithm runs in polynomial time, the time complexity is too high to be used directly in practical designs. <p> The decision formulation is: Problem 2 For a sequential circuit and target clock period , decide if there exists a functionally equivalent LUT circuit with the MDR ratio of no more than . As in <ref> [6, 11, 19] </ref>, this paper assumes that the initial circuits are K-bounded. (When a circuit is not K-bounded, we can use gate decomposition algorithms, such as balanced tree decomposition [2], DMIG [4] or DOGMA [9], to decompose the gates with more than K fanins.) To solve Problem 1, our algorithm, named <p> For Steps 2 and 3, we propose a label relaxation method and low-cost K-cut computation for area minimization and use the methods similar to those in <ref> [6, 11, 16, 19] </ref>. and the target MDR ratio 1. To illustrate our approach, let us consider the example shown in Figure 1 (a) for a target MDR ratio of 1. <p> Based on Theorem 1, Problem 2 can be solved by computing all node labels and checking whether all of them are finite. 3.2 Label Computation and Review of Tur boMap Pan and Liu <ref> [19, 21] </ref> proposed an iterative labeling process in SeqMapII to compute the node labels in O (K 3 n 5 ) time and O (K 2 n 2 ) space for a circuit with n gates 1 . <p> Our label computation algorithm is based on that of [11]. One important concept is the expanded circuit for a node v, denoted E v , proposed by Pan and Liu <ref> [19] </ref> to represent all possible LUTs rooted at v under retiming and node replication. The expanded circuit E v is a directed acyclic graph rooted at v. <p> The iterative label computation is repeated until there is no more improvement of the lower-bounds (in this case, the current lower-bounds are the node labels), or stopped after performing n 2 iterations (in this case, there is no solution for the target MDR ratio) <ref> [19, 11] </ref>. It was showed that the above label computation guarantees to find the optimal solutions if no resynthesis is allowed [11]. With resynthesis, however, the node label l opt (v) can be further reduced as a much larger solution space is explored. <p> Based on the property of expanded circuits E v that every path to the root v 0 from a given node u w passes w FFs <ref> [19] </ref>, every cut (X; X) on E v corresponds to a sequential function f (V (X; X)) = f (u w 1 w 2 m ), as shown in Figure 2, where u w i i are the nodes in the node cut-set V (X; X).
Reference: [20] <author> P. Pan and C. L. Liu. </author> <title> Technology Mapping of Sequential Circuits for LUT-based FPGAs for Performance. </title> <booktitle> In ACM/SIGDA International Symposium on FPGAs, </booktitle> <pages> pages 58-64, </pages> <year> 1996. </year>
Reference-contexts: solutions to all combinational subcircuits may not lead to a cycle-optimal mapping solution for the sequential circuit, since they do not consider retiming which allows FFs to be moved without changing the circuit behavior [16], Several heuristics have been proposed for technology mapping of sequential circuits with consideration of retiming <ref> [20, 24, 25] </ref>. Recently, a significant advancement was made by Pan and Liu [19]. They proposed a novel algorithm, named SeqMapII, to find mapping solutions with the minimum clock periods under retiming for sequential circuits.
Reference: [21] <author> P. Pan and C. L. Liu. </author> <title> Optimal Clock Period FPGA Technology Mapping for Sequential Circuits with Re-timing. </title> <journal> ACM Transactions on Design Automation of Electronic Systems, </journal> <note> to appear. </note>
Reference-contexts: Based on Theorem 1, Problem 2 can be solved by computing all node labels and checking whether all of them are finite. 3.2 Label Computation and Review of Tur boMap Pan and Liu <ref> [19, 21] </ref> proposed an iterative labeling process in SeqMapII to compute the node labels in O (K 3 n 5 ) time and O (K 2 n 2 ) space for a circuit with n gates 1 . <p> Later on, however, the authors revised the complexity to O (K 3 n 5 ) due to the difficulty to prove the convergency of label computation in O (n) iterations <ref> [21] </ref>. Instead, they proved a bound of O (n 2 ). <p> Our experimental results show that, though the iteration number is far less than n in the first case, it goes to n 2 in the second case due to the lack of a better stopping criterion other than the very conservative upper-bound of n 2 in <ref> [21] </ref>. Clearly the reduction of the iteration number for the second case is critical to the speedup of the algorithm. To reduce the iteration number for the second case, we propose a novel positive loop detection technique, called PLD. <p> This procedure guarantees to determine exactly the existence of positive loops (if there is any) within 6n iterations for a SCC of n nodes. It is a significant improvement over the upper-bound of n 2 iterations proposed in <ref> [21] </ref>. We incorporated this approach into both the Tur-boMap [11] and our TurboSYN algorithms to compute the minimum MDR ratio and obtained 10 ~ 50 times speedup in runtime.
Reference: [22] <author> M. C. Papaefthymiou. </author> <title> Understanding Retiming Through Maximum Average-Delay Cycles. </title> <journal> Mathematical Systems Theory, </journal> <volume> 27 </volume> <pages> 65-84, </pages> <year> 1994. </year>
Reference-contexts: It can be done by inserting the same number of FFs on the fanout edges of every PI and retiming for the minimum clock period. If both retiming and pipelining are allowed, the clock period, however, is only limited by the maximum DR ratio of all loops <ref> [22] </ref>, since the maximum DR ratio of I/O paths can be reduced by pipelining. This implies that it is more important to generate a mapping solution for loop's DR ratio minimization rather than I/O path's DR ratio minimization. <p> Pipelining is one way to insert FFs followed by retiming to reduce the clock period. With both retiming and pipelining, the clock period of a circuit is bounded only by the MDR ratio of the circuit, based on the theories in <ref> [16, 22] </ref>. Therefore, to find a mapping solution with the minimum clock period under retiming and pipelining, we propose to solve the following problem: Problem 1 For a sequential circuit, find a functionally equivalent LUT circuit with the minimum MDR ratio.
Reference: [23] <author> E. Sentovich, K. Singh, L. Lavagno, C. Moon, R. Mur-gai, A. Saldanha, H. Savoj, P. Stephan, R. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> SIS: A System for Sequential Circuit Synthesis. </title> <note> Electronics Research Laboratory, Memorandum No. UCB/ERL M92/41, </note> <year> 1992. </year>
Reference-contexts: The pseudo code of the TurboSYN algorithm is shown in Figure 4. 5 Experimental Results The TurboSYN algorithm has been implemented in C language on Sun SPARC workstations and incorporated into the SIS package <ref> [23] </ref> and the RASP System [10]. The test set consists of 12 MCNC FSM benchmarks and 4 ISCAS'89 benchmarks. SIS sequential synthesis commands and dmig [4] are performed to generate the initial circuits which are shown in the first three columns in Table 1.
Reference: [24] <author> H. Touati, N. Shenoy, and A. Sangiovanni-Vincentelli. </author> <title> Retiming for Table-Lookup Field-Programmable Gate Arrays. </title> <booktitle> In FPGA'92, </booktitle> <pages> pages 89-94, </pages> <year> 1992. </year>
Reference-contexts: solutions to all combinational subcircuits may not lead to a cycle-optimal mapping solution for the sequential circuit, since they do not consider retiming which allows FFs to be moved without changing the circuit behavior [16], Several heuristics have been proposed for technology mapping of sequential circuits with consideration of retiming <ref> [20, 24, 25] </ref>. Recently, a significant advancement was made by Pan and Liu [19]. They proposed a novel algorithm, named SeqMapII, to find mapping solutions with the minimum clock periods under retiming for sequential circuits.
Reference: [25] <author> U. Weinmann and W. Rosenstiel. </author> <title> Technology Mapping For Sequential Circuits Based On Retiming Techniques. </title> <booktitle> In Proceedings of European Design Automation Conference, </booktitle> <pages> pages 318-323, </pages> <year> 1993. </year>
Reference-contexts: solutions to all combinational subcircuits may not lead to a cycle-optimal mapping solution for the sequential circuit, since they do not consider retiming which allows FFs to be moved without changing the circuit behavior [16], Several heuristics have been proposed for technology mapping of sequential circuits with consideration of retiming <ref> [20, 24, 25] </ref>. Recently, a significant advancement was made by Pan and Liu [19]. They proposed a novel algorithm, named SeqMapII, to find mapping solutions with the minimum clock periods under retiming for sequential circuits.
Reference: [26] <author> B. Wurth, K. Eckl, and K. Antreich. </author> <title> Functional Multiple-Output Decomposition: Theory and an Implicit Algorithm. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conference., </booktitle> <pages> pages 54-59, </pages> <year> 1995. </year>
Reference-contexts: Since no sharings of inputs between different LUTs are considered, the more functional decompo sitions we perform to reduce the MDR ratio, the more LUTs we may generate. Though the single-output functional decomposition is powerful enough for MDR ratio minimization, the multi-output functional decomposition <ref> [26] </ref> will be useful for area minimization. However, multi-output functional decomposition is more difficult and takes much longer time. We are going to incorporate new logic synthesis methods into our TurboSYN algorithm for area minimization. 7 Acknowledgements The authors would like to thank Professors Peichan Pan and C. L.
Reference: [27] <author> Xilinx. </author> <title> The Programmable Logic Data Book. </title> <year> 1994. </year>
Reference-contexts: In this paper, we consider lookup table (LUT) based FPGAs. A lookup table with K inputs and one output, denoted K-LUT, can implement any combinational function of up to K inputs. It is the most widely used PLB in current FPGAs <ref> [1, 18, 27] </ref>. There have been many research results on K-LUT mapping and synthesis for combinational circuits. A comprehensive survey can be found in [7].
References-found: 27

