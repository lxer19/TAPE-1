URL: http://osl.cs.uiuc.edu/Papers/srds94.ps
Refering-URL: http://osl.cs.uiuc.edu/ExMembers/sturman/
Root-URL: http://www.cs.uiuc.edu
Email: fsturman aghag@cs.uiuc.edu  
Title: A Protocol Description Language for Customizing Failure Semantics  
Author: Daniel C. Sturman and Gul A. Agha 
Address: Urbana, IL 61801  
Affiliation: Department of Computer Science, University of Illinois at Urbana-Champaign,  
Abstract: To optimize performance in a fault-tolerant distributed system, it is often necessary to enforce different failure semantics for different components. By choosing a custom set of failure semantics for each component and then by enforcing the semantics with a minimal set of protocols for a particular architecture, performance may be maximized while ensuring the desired system behavior. We have developed DIL, a language for specifying, on a per-component basis, protocols that transparently enforce failure semantics. These protocols may be reused with arbitrary components, allowing the development of a library of protocols. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Agha. </author> <title> Actors: A Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: Section 6 discusses the run-time support necessary for supporting our protocols. The final section provides a detailed comparison of our approach with other systems. 2 Model of Distributed Computing We develop our approach using the Actor model <ref> [1, 2] </ref>. The model provides an abstract representation of distributed systems. An actor is an encapsulated object that communicates with other actors using asynchronous point-to-point message passing. Specifically, an actor language provides three primitive operators: send is used to communicate to a given actor.
Reference: [2] <author> G. Agha. </author> <title> Concurrent Object-Oriented Programming. </title> <journal> Communications of the ACM, </journal> <volume> 33(9) </volume> <pages> 125-141, </pages> <month> Septem-ber </month> <year> 1990. </year>
Reference-contexts: Section 6 discusses the run-time support necessary for supporting our protocols. The final section provides a detailed comparison of our approach with other systems. 2 Model of Distributed Computing We develop our approach using the Actor model <ref> [1, 2] </ref>. The model provides an abstract representation of distributed systems. An actor is an encapsulated object that communicates with other actors using asynchronous point-to-point message passing. Specifically, an actor language provides three primitive operators: send is used to communicate to a given actor.
Reference: [3] <author> G. Agha, S. Frtlund, R. Panwar, and D. </author> <month> Sturman. </month>
Reference-contexts: This model may be implemented efficiently and safely since it consists only of compiled actors which are bound at run-time to a single actor by a pointer. Our meta-level architecture maud 1 allows the customization of the transmission and reception behavior of a component in this manner <ref> [3, 4] </ref>. Specifically, the behavior is modified in terms of a communication meta-level actor which provides a representation of both the dispatch and reception behaviors of an actor.
References-found: 3

