URL: http://www.cs.wustl.edu/~schmidt/C++-report-col10.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/resume.html
Root-URL: http://www.cs.wustl.edu
Email: schmidt@cs.wustl.edu vinoski@iona.com  
Title: Object Interconnections Overcoming Drawbacks in the OMG Events Service (Column 10)  
Author: Douglas C. Schmidt Steve Vinoski 
Note: This column will appear in the June 1997 issue of the SIGS C++ Report magazine.  
Address: St. Louis, MO 63130 60 Aberdeen Ave., Cambridge, MA 02138  
Affiliation: Department of Computer Science IONA Technologies, Inc. Washington University,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <institution> Object Management Group, </institution> <month> CORBAServices: </month> <title> Common Object Services Specification, </title> <note> Revised Edition, </note> <editor> 95-3-31 ed., </editor> <month> Mar. </month> <year> 1995. </year> <title> 6 CONSUMERCONSUMER SUPPLIERSUPPLIER CONSUMERCONSUMER CONSUMERCONSUMER CONSUMERCONSUMER SUPPLIERSUPPLIER FILTERS FILTERS FILTERS FILTERS Event Channel </title>
Reference-contexts: Our last column investigated how to use the OMG Events Service to implement a stock quote callback mechanism. The OMG Events Service is defined in Volume 1 of the OMG Common Object Services (COS) Specification <ref> [1] </ref>.
Reference: [2] <institution> Object Management Group, Notification Service Request For Proposal, OMG Document telecom/97-01-03 ed., </institution> <month> January </month> <year> 1997. </year>
Reference-contexts: Although adding these features can significantly improve performance, it can be difficult to accomplish this in practice due to the long lead times required by the OMG standardization process. Fortunately, the OMG is already working on a new Notification Service <ref> [2] </ref> that will augment the existing Events Service to help address these concerns. * Changes to implementations of the COS Events Service specification: The COS Events Service is intentionally vague, to avoid over-constraining the innovation and opportunity for optimization of implementors.
Reference: [3] <author> D. Schmidt and S. Vinoski, </author> <title> Distributed Callbacks and Decou-pled Communication in CORBA, </title> <journal> C++ Report, </journal> <volume> vol. 8, </volume> <month> October </month> <year> 1996. </year>
Reference-contexts: Since object references can be changed into string form by the ORB, the Event Channel only needs to utilize a suitable persistent store in which to write stringified object references for Consumers and Suppliers as they register. 1 Our September 1996 column <ref> [3] </ref> discusses the reason for these nonintuitive semantics in more detail. SupplierSupplier ProxyProxy SupplierSupplier ProxyProxy SupplierSupplier ProxyProxy CONNECTIONSCONNECTIONS TO CONSUMERSTO CONSUMERS EventEvent ChannelChannel ConsumerConsumer ProxyProxy ConsumerConsumer ProxyProxy ConsumerConsumer ProxyProxy EventsEvents CONNECTIONSCONNECTIONS TO SUPPLIERSTO SUPPLIERS NONNON-PERSISTENTPERSISTENT EVENT DATAEVENT DATA Storing undelivered event data is more difficult, however.
Reference: [4] <author> D. C. Schmidt, </author> <title> High-Performance Event Filtering for Dynamic Multi-point Applications, in 1 st Workshop on High Performance Protocol Architectures(HIPPARCH), </title> <institution> (Sophia Antipolis, France), INRIA, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: Solution 2: A potentially more efficient and scalable solution is to extend the COS Events Service specification to explicitly support event filtering. There are a number of techniques for accomplishing this, such as parallel processing of composite filters, trie-based filter composition, and context-free grammar-based filter composition using skip-ahead parsing <ref> [4] </ref>. It is very likely that the submissions to the OMG Notification Service RFP mentioned above will standardize one or more filtering solutions. [5] describes a filtering mechanism for a real-time implementation of the COS Events Service.
Reference: [5] <author> T. Harrison, D. Levine, and D. C. Schmidt, </author> <title> The Design and Performance of a Real-time Event Service, </title> <booktitle> in Submitted to OOPSLA '97, </booktitle> <address> (Atlanta, GA), </address> <publisher> ACM, </publisher> <month> October </month> <year> 1997. </year> <note> http://www.cs.wustl.edu/schmidt/oopsla.html. </note>
Reference-contexts: It is very likely that the submissions to the OMG Notification Service RFP mentioned above will standardize one or more filtering solutions. <ref> [5] </ref> describes a filtering mechanism for a real-time implementation of the COS Events Service. This implementation provides filtering and correlation mechanisms that allow consumers to specify logical OR and AND event dependencies.
References-found: 5

