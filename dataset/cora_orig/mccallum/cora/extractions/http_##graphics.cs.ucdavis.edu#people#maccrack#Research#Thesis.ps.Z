URL: http://graphics.cs.ucdavis.edu/people/maccrack/Research/Thesis.ps.Z
Refering-URL: http://graphics.cs.ucdavis.edu/people/maccrack/Profile.html
Root-URL: http://www.cs.ucdavis.edu
Title: Free-Form Deformations with Lattices of Arbitrary Topology  
Author: By Ronald Andrew MacCracken DAVIS 
Degree: THESIS Submitted in partial satisfaction of the requirements for the degree of MASTER OF SCIENCE in Computer Science in the  Approved: Committee in Charge  
Date: 1993  1996  
Address: Santa Cruz)  
Affiliation: B.A. (University of California,  OFFICE OF GRADUATE STUDIES of the UNIVERSITY OF CALIFORNIA  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Alan H. Barr. </author> <title> Global and local deformations of solid primitives. </title> <booktitle> In Computer Graphics (SIGGRAPH '84 Proceedings), </booktitle> <volume> volume 18, </volume> <pages> pages 21-30, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: The process grew more difficult when local changes, such as adding arbitrarily shaped bumps, or global changes, such as bending, twisting, or tapering were necessary. The axial deformations <ref> [1, 4, 13] </ref> and free-form deformations [5, 6, 8, 17] were designed to deal with some of these problems. These methods embed an object in a deformable region of space such that each point of the object has a unique parameterization that defines its position in the region. <p> Previously, modifying individual control points of complex objects was tedious, and smooth modifications such as twisting, tapering, or bending were nearly impossible. Barr <ref> [1] </ref> was the first to introduce space deformations to perform such operations. These operations embed an object in space about a central axis (x, y, or z) and deform the object with the modification of as little as one parameter.
Reference: [2] <author> Bruce G. Baumgart. </author> <title> A polyhedron representation for computer vision. </title> <booktitle> In Proceedings of the National Computer Conference, </booktitle> <pages> pages 589-596, </pages> <year> 1975. </year>
Reference-contexts: The pseudo code for the deformation algorithm, developed in Chapter 5, is presented in Section 6.3. 6.1 The Lattice Data Structure Edge-based data structures are most commonly used for two-dimensional meshes of arbitrary topology, such as the split-edge, half-edge, and winged-edge data structures <ref> [2, 15, 19, 18, 20] </ref>. These data structures are ideally suited for Catmull-Clark subdivision surfaces because they store data using the three categories used in the subdivision method (faces, edges, and vertices), as well as providing quick access to adjacent information necessary for surface refinement.
Reference: [3] <author> E. Catmull and J. Clark. </author> <title> Recursively generated B-spline surfaces on arbitrary topological meshes. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 10 </volume> <pages> 350-355, </pages> <month> September </month> <year> 1978. </year>
Reference-contexts: The subdivision method used in this work is an extension of Catmull-Clark subdivision surfaces <ref> [3] </ref> to subdivide three-dimensional lattices of arbitrary topology. Subdividing the deformation lattice yields a sequence of lattices that converge uniformly to a region of three-dimensional space. The parameterization of a point in space can then be defined within the individual cells of a subdivided lattice using numerical techniques. <p> The subdivision surface methodology described here was first developed by Catmull and Clark <ref> [3] </ref>. 3.2 Univariate Case The refinement rules for the univariate case are developed directly from the methods for binary subdivision of the cubic uniform B-spline curve. First, the refinement rules for a uniform cubic B-spline curve defined by four control points are developed. <p> To reconnect the control polygon after each subdivision step, simply connect each edge point to the two vertex points of the vertices making up the original edge. 14 15 3.3 Bivariate Case Catmull and Clark <ref> [3] </ref> developed the refinement rules for the bivariate case directly from the methods for binary subdivision of the bicubic uniform B-spline surface. In the following section, the refinement rules for a bicubic uniform B-spline surface defined by sixteen control points are developed. <p> All 25 of the new control points can actually be calculated in this manner, 20 as for example P 1 4;4 is a face point and can be calculated as the average of the four points bounding the face. 3.3.2 Arbitrary Topology Subdivision Surfaces Catmull and Clark <ref> [3] </ref> further generalized their subdivision methodology to work with surfaces of arbitrary topology. These surfaces allow n-sided faces and vertices with k adjacent edges. 2 The subdivision method is now defined as follows: * For each face in the original mesh, generate a face point. <p> The purpose of the subdivision method is to generate a partitioning of the deformable space by its cells, and for this purpose, this calculation appears to work very well. A detailed theoretical analysis of the continuity of the derivatives 72 of these volumes at the extraordinary points <ref> [3, 7] </ref>. will have to be addressed in a future paper. This work only discusses positional data of the embedded object in this paper. It is clear that the lattice could hold additional parameters, such as those needed to define a solid texture.
Reference: [4] <author> Yu-Kuang Chang and Alyn P. Rockwood. </author> <title> A generalized de Casteljau approach to 3D free-Form deformation. </title> <booktitle> In Proceedings of SIGGRAPH '94 (Orlando, </booktitle> <address> Florida, </address> <month> July 24-29, </month> <year> 1994), </year> <booktitle> Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pages 257-260. </pages>
Reference-contexts: The process grew more difficult when local changes, such as adding arbitrarily shaped bumps, or global changes, such as bending, twisting, or tapering were necessary. The axial deformations <ref> [1, 4, 13] </ref> and free-form deformations [5, 6, 8, 17] were designed to deal with some of these problems. These methods embed an object in a deformable region of space such that each point of the object has a unique parameterization that defines its position in the region.
Reference: [5] <author> Sabine Coquillart. </author> <title> Extended free-form deformation: A sculpturing tool for 3D geometric modeling. </title> <booktitle> In Computer Graphics (SIGGRAPH '90 Proceedings), </booktitle> <volume> volume 24, </volume> <pages> pages 187-196, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: The process grew more difficult when local changes, such as adding arbitrarily shaped bumps, or global changes, such as bending, twisting, or tapering were necessary. The axial deformations [1, 4, 13] and free-form deformations <ref> [5, 6, 8, 17] </ref> were designed to deal with some of these problems. These methods embed an object in a deformable region of space such that each point of the object has a unique parameterization that defines its position in the region. <p> These deformations led the way to the more general Free-Form Deformations (FFDs) of Sederberg and Parry [17] and Extended Free-Form Deformations (EFFDs) of Coquillart <ref> [5] </ref>, which base their deformations on the modification of the control points of a three-dimensional lattice placed around the object. Two possible lattices are shown for the two deformation techniques in Figure 2.1. The basic deformation algorithm contains four distinct parts, as outlined by Coquillart in [5]. <p> Deformations (EFFDs) of Coquillart <ref> [5] </ref>, which base their deformations on the modification of the control points of a three-dimensional lattice placed around the object. Two possible lattices are shown for the two deformation techniques in Figure 2.1. The basic deformation algorithm contains four distinct parts, as outlined by Coquillart in [5]. First, the user must construct the lattice. This is normally done by utilizing an inventory of lattices and a set of tools to merge and build new lattices from this inventory. <p> The location of the point under the deformation was calculated by substituting these local coordinate values into the defining equation for the trivariate Bezier volume. Coquillart <ref> [5] </ref> used a similar method, but numerical iteration was required to calculate the local coordinate, as her initial lattices were not formed as parallelpipeds. However, in both these cases, the cells of the lattice are hexa-hedral. <p> the cell is not hexahedral, use the tetrahedral interpolation function described in Section 5.4.2 to project u to obtain P . 61 Chapter 7 Results The primary motivation for moving from the parallelepiped lattices of the trivariate Bezier and B-spline representations of [8, 17] and the modified parallelepiped lattices of <ref> [5] </ref> was to increase the inventory of available lattices and thus the number of possible deformations. Figures 7.1 through 7.9 show the results of this algorithm with a variety of meshes and shapes.
Reference: [6] <author> Sabine Coquillart and Pierre Jancene. </author> <title> Animated free-form deformation: An interactive animation technique. </title> <booktitle> In Computer Graphics (SIGGRAPH '91 Proceedings), </booktitle> <volume> volume 25, </volume> <pages> pages 23-26, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: The process grew more difficult when local changes, such as adding arbitrarily shaped bumps, or global changes, such as bending, twisting, or tapering were necessary. The axial deformations [1, 4, 13] and free-form deformations <ref> [5, 6, 8, 17] </ref> were designed to deal with some of these problems. These methods embed an object in a deformable region of space such that each point of the object has a unique parameterization that defines its position in the region.
Reference: [7] <author> D. Doo and M. Sabin. </author> <title> Behaviour of recursive division surfaces near extraordinary points. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 10 </volume> <pages> 356-360, </pages> <month> September </month> <year> 1978. </year>
Reference-contexts: The purpose of the subdivision method is to generate a partitioning of the deformable space by its cells, and for this purpose, this calculation appears to work very well. A detailed theoretical analysis of the continuity of the derivatives 72 of these volumes at the extraordinary points <ref> [3, 7] </ref>. will have to be addressed in a future paper. This work only discusses positional data of the embedded object in this paper. It is clear that the lattice could hold additional parameters, such as those needed to define a solid texture.
Reference: [8] <author> Josef Griessmair and Werner Purgathofer. </author> <title> Deformation of solids with trivariate B-splines. </title> <booktitle> In Eurographics '89, </booktitle> <pages> pages 137-148. </pages> <publisher> North-Holland, </publisher> <month> September </month> <year> 1989. </year> <month> 74 </month>
Reference-contexts: The process grew more difficult when local changes, such as adding arbitrarily shaped bumps, or global changes, such as bending, twisting, or tapering were necessary. The axial deformations [1, 4, 13] and free-form deformations <ref> [5, 6, 8, 17] </ref> were designed to deal with some of these problems. These methods embed an object in a deformable region of space such that each point of the object has a unique parameterization that defines its position in the region. <p> The region inside the parallelpipedical lattice is defined by a tensor product trivariate Bernstein polynomial about a local coordinate system (X 0 ; ~ S; ~ T; ~ U) imposed on the parallelpiped (Griessmair and Purgathofer <ref> [8] </ref> adapted this technique to use a trivariate B-spline polynomial). <p> If the cell is not hexahedral, use the tetrahedral interpolation function described in Section 5.4.2 to project u to obtain P . 61 Chapter 7 Results The primary motivation for moving from the parallelepiped lattices of the trivariate Bezier and B-spline representations of <ref> [8, 17] </ref> and the modified parallelepiped lattices of [5] was to increase the inventory of available lattices and thus the number of possible deformations. Figures 7.1 through 7.9 show the results of this algorithm with a variety of meshes and shapes.
Reference: [9] <author> Bernd Hamann, Donghua Wu, and Robert J. </author> <title> Moorhead II. On particle path generation based on quadrilinear interpolation and Bernstein-Bezier polynomials. </title> <journal> IEEE Transactions on Visualization and Computer Graphics, </journal> <volume> 1(3) </volume> <pages> 210-217, </pages> <year> 1995. </year>
Reference-contexts: The search algorithm is described in detail in Section 6.3.1. 43 5.4.1 Parametrizing Hexahedral Cells Many numerical algorithms exist to generate the trilinear approximation of a point in a type-3 cell. This work utilizes an adaptation of an iterative algorithm presented by Hamann, et al. <ref> [9] </ref> and works as follows: given a point P in a cell, generate a point P 0 as the trilinear approximation of P defined by (u 0 ; v 0 ; w 0 ) = ( 1 2 ; 1 2 ).
Reference: [10] <author> Hugues Hoppe, Tony DeRose, Tom Duchamp, Mark Halstead, Hubert Jin, John Mc-Donald, Jean Schweitzer, and Werner Stuetzle. </author> <title> Piecewise smooth surface reconstruction. </title> <booktitle> In Proceedings of SIGGRAPH '94 (Orlando, </booktitle> <address> Florida, </address> <month> July 24-29, </month> <year> 1994), </year> <booktitle> Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pages 295-302. </pages>
Reference-contexts: These examples are shown in Figure 5.1. are yellow, the sharp edges are red, the boundary edges are green and the internal edges are blue. 41 These techniques have been previously used by Nasri [16] for Doo-Sabin surfaces, and are similar to the techniques used by Hoppe et al. <ref> [10] </ref> in defining edges, creases, corners and darts on Loop Surfaces [14].
Reference: [11] <author> Kenneth I. Joy and Ron MacCracken. </author> <title> The refinement rules for Catmull-Clark solids. </title> <type> Technical Report CSE-96-1, </type> <institution> Department of Computer Science, University of California, Davis, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: In the following section, the refinement rules for a bicubic uniform B-spline surface defined by sixteen control points are developed. They are then extended to work with meshes of arbitrary topology. A geometric construction of the bivariate subdivision method is shown in <ref> [11] </ref>. A mesh M is defined as a set of vertices P 0 ; P 1 ; : : : ; P n and as associated simplicial complex which specifies the connectivity of the vertices. The connectivity of the mesh gives two components: edges and faces. <p> This chapter will first show the derivation of the subdivision method for a tricubic uniform B-spline volume, and then extend that method to apply to lattices of arbitrary topology. A geometric construction of the trivariate subdivision method is shown in <ref> [11] </ref>. 24 4.2 Uniform Cubic B-spline Volume Subdivision Consider the tricubic uniform B-spline volume V (u; v; w) = 1 u u 2 u 3 M C (w)M T 6 6 4 v v 3 7 7 5 where M is the same 4 fi 4 cubic uniform B-spline matrix as
Reference: [12] <author> David N. Kenwright and Davis A. Lane. </author> <title> Optimization of time-dependent particle tracing using tetrahedral decomposition. </title> <booktitle> In Proceedings of Visualization '95, </booktitle> <pages> pages 321-328. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1985. </year>
Reference-contexts: This equation can be put into matrix form and solved directly <ref> [12] </ref>.
Reference: [13] <author> Francis Lazarus, Sabine Coquillart, and Pierre Jancene. </author> <title> Interactive axial deformations. </title> <editor> In B. Falcidieno and T.L. Kunii, editors, </editor> <booktitle> Modeling in Computer Graphics, </booktitle> <pages> pages 241-254. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The process grew more difficult when local changes, such as adding arbitrarily shaped bumps, or global changes, such as bending, twisting, or tapering were necessary. The axial deformations <ref> [1, 4, 13] </ref> and free-form deformations [5, 6, 8, 17] were designed to deal with some of these problems. These methods embed an object in a deformable region of space such that each point of the object has a unique parameterization that defines its position in the region.
Reference: [14] <author> Charles Loop. </author> <title> Smooth subdivision surfaces based on triangles. </title> <type> Master's thesis, </type> <institution> Department of Mathematics, University of Utah, </institution> <month> August </month> <year> 1987. </year>
Reference-contexts: sharp edges are red, the boundary edges are green and the internal edges are blue. 41 These techniques have been previously used by Nasri [16] for Doo-Sabin surfaces, and are similar to the techniques used by Hoppe et al. [10] in defining edges, creases, corners and darts on Loop Surfaces <ref> [14] </ref>.
Reference: [15] <author> M. Mantyla. </author> <title> An Introduction to Solid Modeling. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Md, </address> <year> 1988. </year>
Reference-contexts: The pseudo code for the deformation algorithm, developed in Chapter 5, is presented in Section 6.3. 6.1 The Lattice Data Structure Edge-based data structures are most commonly used for two-dimensional meshes of arbitrary topology, such as the split-edge, half-edge, and winged-edge data structures <ref> [2, 15, 19, 18, 20] </ref>. These data structures are ideally suited for Catmull-Clark subdivision surfaces because they store data using the three categories used in the subdivision method (faces, edges, and vertices), as well as providing quick access to adjacent information necessary for surface refinement.
Reference: [16] <author> A. Nasri. </author> <title> Polyhedral subdivision methods for free-form surfaces. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 6 </volume> <pages> 29-73, </pages> <year> 1987. </year>
Reference-contexts: These examples are shown in Figure 5.1. are yellow, the sharp edges are red, the boundary edges are green and the internal edges are blue. 41 These techniques have been previously used by Nasri <ref> [16] </ref> for Doo-Sabin surfaces, and are similar to the techniques used by Hoppe et al. [10] in defining edges, creases, corners and darts on Loop Surfaces [14].
Reference: [17] <author> Thomas W. Sederberg and Scott R. Parry. </author> <title> Free-form deformation of solid geometric models. </title> <booktitle> In Computer Graphics (SIGGRAPH '86 Proceedings), </booktitle> <volume> volume 20, </volume> <pages> pages 151-160, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: The process grew more difficult when local changes, such as adding arbitrarily shaped bumps, or global changes, such as bending, twisting, or tapering were necessary. The axial deformations [1, 4, 13] and free-form deformations <ref> [5, 6, 8, 17] </ref> were designed to deal with some of these problems. These methods embed an object in a deformable region of space such that each point of the object has a unique parameterization that defines its position in the region. <p> These operations embed an object in space about a central axis (x, y, or z) and deform the object with the modification of as little as one parameter. These deformations led the way to the more general Free-Form Deformations (FFDs) of Sederberg and Parry <ref> [17] </ref> and Extended Free-Form Deformations (EFFDs) of Coquillart [5], which base their deformations on the modification of the control points of a three-dimensional lattice placed around the object. Two possible lattices are shown for the two deformation techniques in Figure 2.1. <p> Parameterizing the lattice is then discussed in Section 5.4. 5.2 Boundary Control of the Subdivision Volume Designing a lattice that represents a particular region of space is a difficult task. The freeform deformations of Sederberg and Parry <ref> [17] </ref> were based upon an initial lattice that was formed as a parallelepiped, with the deformable space filling the lattice completely. <p> The deformations shown in Section 7 were calculated using choice 2. The memory usage and speed of the deformation were not a major factor on the machine being used. 42 5.4 Parameterizing the Lattice Sederberg and Parry <ref> [17] </ref> imposed the initial lattice on a parallelepiped in space and calculated the parameterization of a point within the deformable space by using the local coordinates of a point within the parallelepiped. <p> If the cell is not hexahedral, use the tetrahedral interpolation function described in Section 5.4.2 to project u to obtain P . 61 Chapter 7 Results The primary motivation for moving from the parallelepiped lattices of the trivariate Bezier and B-spline representations of <ref> [8, 17] </ref> and the modified parallelepiped lattices of [5] was to increase the inventory of available lattices and thus the number of possible deformations. Figures 7.1 through 7.9 show the results of this algorithm with a variety of meshes and shapes.
Reference: [18] <author> K. Weiler. </author> <title> The Radial Edge Structure: A Topological Representation for Non-Manifold Geometric Boundary Modeling, </title> <address> pages 3-36. </address> <publisher> North-Holland, </publisher> <year> 1988. </year> <month> 75 </month>
Reference-contexts: The pseudo code for the deformation algorithm, developed in Chapter 5, is presented in Section 6.3. 6.1 The Lattice Data Structure Edge-based data structures are most commonly used for two-dimensional meshes of arbitrary topology, such as the split-edge, half-edge, and winged-edge data structures <ref> [2, 15, 19, 18, 20] </ref>. These data structures are ideally suited for Catmull-Clark subdivision surfaces because they store data using the three categories used in the subdivision method (faces, edges, and vertices), as well as providing quick access to adjacent information necessary for surface refinement.
Reference: [19] <author> Kevin J. Weiler. </author> <title> Topological structures for geometric modeling. </title> <type> Ph.d. thesis, </type> <institution> Rensselaer Polytechnic Institute, </institution> <month> August </month> <year> 1986. </year>
Reference-contexts: The pseudo code for the deformation algorithm, developed in Chapter 5, is presented in Section 6.3. 6.1 The Lattice Data Structure Edge-based data structures are most commonly used for two-dimensional meshes of arbitrary topology, such as the split-edge, half-edge, and winged-edge data structures <ref> [2, 15, 19, 18, 20] </ref>. These data structures are ideally suited for Catmull-Clark subdivision surfaces because they store data using the three categories used in the subdivision method (faces, edges, and vertices), as well as providing quick access to adjacent information necessary for surface refinement.
Reference: [20] <author> Y. Yamaguchi and F. Kimura. </author> <title> Nonmanifold topology based on coupling entries. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 15(1) </volume> <pages> 42-50, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: The pseudo code for the deformation algorithm, developed in Chapter 5, is presented in Section 6.3. 6.1 The Lattice Data Structure Edge-based data structures are most commonly used for two-dimensional meshes of arbitrary topology, such as the split-edge, half-edge, and winged-edge data structures <ref> [2, 15, 19, 18, 20] </ref>. These data structures are ideally suited for Catmull-Clark subdivision surfaces because they store data using the three categories used in the subdivision method (faces, edges, and vertices), as well as providing quick access to adjacent information necessary for surface refinement.
References-found: 20

