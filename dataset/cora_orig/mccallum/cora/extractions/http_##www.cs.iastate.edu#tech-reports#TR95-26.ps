URL: http://www.cs.iastate.edu/tech-reports/TR95-26.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: http://www.cs.iastate.edu
Email: mstrauss@cs.iastate.edu  
Title: Measure on P: Strength of the Notion  
Author: Martin Strauss 
Date: January 22, 1996  
Address: Ames, IA 50011-1040  
Affiliation: Department of Computer Science Iowa State University  
Abstract: We give a notion of measure on P that overcomes some limitations of earlier formulations. In the process, we investigate the significance for resource-bounded measure of the choice of the lexicographic ordering of the words. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Allender and M. Strauss. </author> <title> Measure on small complexity classes, with applications for BPP. </title> <note> Journal version; in preparation. </note>
Reference-contexts: Unfortunately, Lutz's formulation only works directly for C E. Generalizing Lutz's notion, in <ref> [1] </ref> the authors introduced a notion of measure on P, PSPACE, and other subexponential classes. This notion satisfies many nice theoretical properties, and has some applications to BPP, but provides too few measurable sets for some purposes. <p> In Section 3 we discuss the significance for measure of the choice of the standard lexicographic ordering of fl . In Section 4 we give a formulation, stronger than that of <ref> [1] </ref>, that covers more sets that "ought" to be small. This formulation is then shown to be too strong, since it violates a measure axiom. <p> Finally, in Section 6 we show that our notion of measure on PSPACE is incom parable to the notion of measure in [10]. 1 2 Preliminaries First we sketch the formulation of resource-bounded measure at E from [8], then review the weak generalization to measure at P from <ref> [1] </ref>. Finally, we give a simple counting argument that will be used in many proofs of this paper. 2.1 Measure at E Fix an enumeration s i of fl . <p> Lutz's formulation works for other classes at least as big as E, notably E 2 = 2 polynomial and the space analogs ESPACE and E 2 SPACE, by considering supermartingales that run with the appropriate resource bounds. 2.2 Previous Measure at P In this paper as well as in <ref> [1] </ref>, we generalize Lutz's work to subexponential time classes. This means that we will consider supermartingales d (w) whose runtime is less than their input length jwj. <p> There are self-reducible languages that are hard for E [6], and in general we don't see how, with present knowlege, to prove that such a diagonal language is in P. To define measure in P, in <ref> [1] </ref> we considered not all polytime supermartingales, but only those requiring at most polynomially many recursive calls to perform this diagonalization. <p> With the additional restriction that d (w) 2 be satisfied with equality, i.e., considering only martingales, one gets a notion of measure that satisfies many closure and robustness properties, but, unfortunately, this notion of measure appears to be too weak for many desired results <ref> [1] </ref>. It is shown in [1] that these martingales can equivalently be defined by martingales that look at bits of w from a particular SPARSE set S (having n c words of length n). <p> With the additional restriction that d (w) 2 be satisfied with equality, i.e., considering only martingales, one gets a notion of measure that satisfies many closure and robustness properties, but, unfortunately, this notion of measure appears to be too weak for many desired results <ref> [1] </ref>. It is shown in [1] that these martingales can equivalently be defined by martingales that look at bits of w from a particular SPARSE set S (having n c words of length n). <p> It is far less natural, but nevertheless one could decide ahead of time which are the allowable dependency sets, and consider only such super 12 martingales. The resulting notion of measure would be awkward, but it would include more null sets than the martingale notion of <ref> [1] </ref>, and in fact include some sets not measurable by the notion of measure to be presented in Section 5. A particular drawback is this awkward notion would not satisfy M 5 in a reasonable way, i.e., the resulting notion of resource-bounded pseudoran-domness would be unnatural. <p> With high probability, a (Lebesgue-) random language has (1=2 o (1))2 n words of length n, and this property is captured by supermartingales in Theorem 11. At the other extreme, no martingale (satisfying an exact average law) covers even the set of all polynomially sparse languages <ref> [1] </ref>. The 14 quotient formulation is much better than the mar-tingale formulation in this regard, but not quite so good as the supermartingales. Theorem 22 The set A of languages having o (2 n ) words of length n has measure zero at P by the quotient formulation. <p> A similar scaled property holds for the weak martingale notion of measure in <ref> [1] </ref>, but as we now observe, this is not the case for the supermartingale measure of this paper. In the following, L 0 has an infinite set of easy instances in an intuitive sense, but is not measure zero. Proposition 23 Let L be E-pseudorandom.
Reference: [2] <author> E. Allender and M. Strauss. </author> <title> Measure on small complexity classes, with applications for BPP. </title> <booktitle> In Proceedings 35th FOCS Conference, </booktitle> <pages> pages 807-818, </pages> <year> 1994. </year> <month> 18 </month>
Reference-contexts: We will denote the collection of such supermartingales (E). There are some issues regarding the representation of real numbers, but these have largely been solved <ref> [8, 2] </ref>, and in this paper we simply assume that all reasonable arithmetic is allowed. <p> Most of the results of this section concerning E and ESPACE scale down to the subexponen-tial measure of <ref> [2] </ref> formulated via martingales. First consider measure on PSPACE. Recall that a martingale d 0 working in some ordering bets on each word x given the memberships of some predetermined jxj O (1) predecessors of x in .
Reference: [3] <author> E. Allender and M. Strauss. </author> <title> Measure in P: Robustness of the notion. </title> <booktitle> In Proc. 20th Mathematical Foundations of Computer Science Conference, volume 969 of Lecture Notes in Computer Science, </booktitle> <pages> pages 129-138. </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: In this section we are considering measure on P, so the supermartingales d (w) have n O (1) time and dependency set bound, where n = js jwj j log jwj. 4.1 Strength To make more sets measurable, another notion of measure was attempted in <ref> [3] </ref>, by removing the equality requirement from (1). We now recall from [3] an example of a set that is covered by a supermartingale but not by a martingale. Theorem 11 The set of languages with density less than * &lt; 1=2 is covered by a dependency-set bounded supermartingale. Proof. <p> on P, so the supermartingales d (w) have n O (1) time and dependency set bound, where n = js jwj j log jwj. 4.1 Strength To make more sets measurable, another notion of measure was attempted in <ref> [3] </ref>, by removing the equality requirement from (1). We now recall from [3] an example of a set that is covered by a supermartingale but not by a martingale. Theorem 11 The set of languages with density less than * &lt; 1=2 is covered by a dependency-set bounded supermartingale. Proof. <p> One would therefore hope to define a notion of measure via supermartingales. Unfortunately, coverage by supermartingales does not satisfy the Union Axiom M 3 (despite claims in <ref> [3] </ref>). Here we present two covered sets A and B whose union is not covered. But first we need to examine the structure of dependency sets and betting strategies in more detail. <p> This needs to be investigated. Acknowledgments Section 3 is joint work with D. Sivakumar, and Section 6 is joint work with Eric Allender (the latter essentially appeared in <ref> [3] </ref>). I thank these researchers for permitting the inclusion of this work. I thank Allender, Wolfgang Merkle, Ken Regan, and Sivakumar for helpful discussions about other parts of the work.
Reference: [4] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verification and hardness of approximation problems. </title> <booktitle> In Proc. 33rd FOCS Conference, </booktitle> <pages> pages 14-23, </pages> <year> 1992. </year>
Reference-contexts: In this setting it is especially convenient to report the runtime of the supermartingales in terms of n = jxj = fi fi s jwj fi fi log jwj, instead of in terms of jwj. We follow [12] in using notation from the probabilistically-checkable proofs literature <ref> [4, 5] </ref>. A martingale is a function d : fl ! R. To define measure on P, say, we require that this function be computable by a polynomial time oracle machine, given jwj as input and w as oracle.
Reference: [5] <author> L. Babai, L. Fortnow, L. Levin, and M. Szegedy. </author> <title> Checking computations in poly-logarithmic time. </title> <booktitle> In Proc, 23rd STOC Conference, </booktitle> <pages> pages 21-31, </pages> <year> 1991. </year>
Reference-contexts: In this setting it is especially convenient to report the runtime of the supermartingales in terms of n = jxj = fi fi s jwj fi fi log jwj, instead of in terms of jwj. We follow [12] in using notation from the probabilistically-checkable proofs literature <ref> [4, 5] </ref>. A martingale is a function d : fl ! R. To define measure on P, say, we require that this function be computable by a polynomial time oracle machine, given jwj as input and w as oracle.
Reference: [6] <author> J. Balcazar. </author> <title> Self-reducibility. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 41 </volume> <pages> 367-388, </pages> <year> 1990. </year>
Reference-contexts: There are self-reducible languages that are hard for E <ref> [6] </ref>, and in general we don't see how, with present knowlege, to prove that such a diagonal language is in P. To define measure in P, in [1] we considered not all polytime supermartingales, but only those requiring at most polynomially many recursive calls to perform this diagonalization.
Reference: [7] <author> Boppana and Hirschfeld. </author> <title> Pseudorandom generators and complexity classes. </title> <booktitle> Advances in Computing Research, </booktitle> <volume> 5, </volume> <year> 1989. </year>
Reference-contexts: A supermartingale need not exactly compute a conditional probability. Next we show how to convert to lexicographic order in classes smaller than exponential space, by just approximating the conditional expectation of d 0 . To perform the approximation we first use pseudorandom generators (see <ref> [7] </ref>), and afterwards we instead the use approximate counting of [13, 14].
Reference: [8] <author> J. Lutz. </author> <title> Almost everywhere high nonuniform complexity. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 44 </volume> <pages> 220-258, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Resource-bounded measure was introduced by Lutz in <ref> [8] </ref>. Intuitively, this theory gives a notion of big and small to sets of languages. In recent years this tool has been used with many successes to illuminate the structure of complexity classes, notably E and E 2 = EXP [9]. The theory of resource-bounded measure is a parametrized tool. <p> Finally, in Section 6 we show that our notion of measure on PSPACE is incom parable to the notion of measure in [10]. 1 2 Preliminaries First we sketch the formulation of resource-bounded measure at E from <ref> [8] </ref>, then review the weak generalization to measure at P from [1]. Finally, we give a simple counting argument that will be used in many proofs of this paper. 2.1 Measure at E Fix an enumeration s i of fl . For now we follow [8] in arbitrarily using the standard <p> resource-bounded measure at E from <ref> [8] </ref>, then review the weak generalization to measure at P from [1]. Finally, we give a simple counting argument that will be used in many proofs of this paper. 2.1 Measure at E Fix an enumeration s i of fl . For now we follow [8] in arbitrarily using the standard lexicographic order, but in subsequent sections we will discuss the significance of this choice. <p> We will denote the collection of such supermartingales (E). There are some issues regarding the representation of real numbers, but these have largely been solved <ref> [8, 2] </ref>, and in this paper we simply assume that all reasonable arithmetic is allowed. <p> Note that M runs in time polynomial in the length of w and the value of i. With these interpretations, Lutz has shown <ref> [8] </ref> that Definition 2 satisfies the above axioms derived from Lebesgue measure. As hinted above, a singleton set of language L may not have measure zero in E if L =2 E. Such languages L are intuitively random, in a weak sense.
Reference: [9] <author> J. Lutz. </author> <title> The quantitative structure of exponential time. </title> <booktitle> In Proc. 8th Structure in Complexity Theory Conference, </booktitle> <pages> pages 158-175, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction Resource-bounded measure was introduced by Lutz in [8]. Intuitively, this theory gives a notion of big and small to sets of languages. In recent years this tool has been used with many successes to illuminate the structure of complexity classes, notably E and E 2 = EXP <ref> [9] </ref>. The theory of resource-bounded measure is a parametrized tool. For many complexity classes C, one plugs C into the general theory, and one gets out a notion of measure at C, in which each singleton set of a C langauge is small, but C itself is not small.
Reference: [10] <author> E. Mayordomo. </author> <title> Contributions to the Study of Resource-Bounded Measure. </title> <type> PhD thesis, </type> <institution> Universitat Politecnica de Catalunya, Barcelona, </institution> <year> 1994. </year>
Reference-contexts: In Section 5 we provide a new, satisfactory notion of measure on P, that preserves many of the small sets covered by the notion of Section 4. Finally, in Section 6 we show that our notion of measure on PSPACE is incom parable to the notion of measure in <ref> [10] </ref>. 1 2 Preliminaries First we sketch the formulation of resource-bounded measure at E from [8], then review the weak generalization to measure at P from [1]. <p> is clearly not covered, and L is in E since the straightforward decision procedure for x 2 L makes 2 jxj recursive calls to an algorithm in exponential time (in jxj.) If one applies Lutz's diagonalization argument against a poly-time martingale, apparently the most one can say (as noted in <ref> [10] </ref>) about the resulting L is that L is word-decreasing self-reducible, i.e., that there's a polytime reduction from L to L that on input x queries only strings y that precede x lexicographically. <p> We show in Section 6 that this argument does not scale down to the measure on PSPACE of <ref> [10] </ref>. 4 A Stronger Notion In this Section we describe an attempt at a stronger notion of measure on P. First we show that the new notion covers more intuitively null sets than the previous notion. <p> We then compare our PSPACE measure, denoted (PSPACE), to that of <ref> [10] </ref>, which we denote by (PSPACE). A set is (PSPACE)-null if it is covered by a supermartingale that works in poly-log space, reads its input once from left to right, and is given the allowable workspace (but not the input length). <p> Definition 25 Let ODD denote the set of languages L such that for each n; L has an odd num ber of words of length n. Note that ODD has Lebesgue measure zero. Theorem 26 The set ODD has (PSPACE)- measure zero. Proof. Immediate; also see <ref> [10] </ref>. Theorem 27 The set ODD " PSPACE does not have (PSPACE)-measure zero. Proof. To show that no enumeration covers ODD, let d i be an enumeration of supermartin-gales. For each i, form a langauge L i+1 that defeats d i (leaving L 1 unspecified). <p> It is also possible to construct a single language L that is itself both ODD and uncovered. We now present a set measurable in our measure on PSPACE but not in the sense of <ref> [10] </ref>. Partition n into blocks of n 2 words. <p> A configuration will mean a configuration of the machine after reading through the R's and before reading the S's. We are given a supermartingale d computed by a log k (n)-space-bounded online Turing machine, which we may assume works in the limit (see <ref> [10] </ref>): ! will is covered by d if lim n!1 ![1::n] exists and is infinite. Therefore, for a counterexample it suffices to construct a sequence ! with fd (![0::2 n ]) : n 2 Ng bounded.
Reference: [11] <author> W. Merkle, </author> <year> 1995. </year> <type> Personal Communication. </type>
Reference-contexts: Wolfgang Merkle <ref> [11] </ref> observed that this can be solved by having the supermartingales return the amount of the next bet rather than the current capital. Above we mentioned that the choice of lexicographic is a minor issue for measure at E. <p> The unbounded supermartingale would divide this among jJ 0 n j T 's, betting 2 n=2 and winning 2 n=2 2 3n=4 = 2 n=4 on each. In <ref> [11] </ref>, Merkle suggests that the supermartin-gales return the signed amount bet (i.e., if w 0 denotes w with the last bit flipped, b (w) = d (w)d (w 0 ) 2 ) instead of their current capital d (w).
Reference: [12] <author> K. Regan, D. Sivakumar, and J.-Y. Cai. </author> <title> Pseudorandom generators, measure theory, and natural proofs. </title> <type> Technical Report UB-CS-TR 95-02, </type> <institution> Computer Science Dept., University at Buffalo, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: In this setting it is especially convenient to report the runtime of the supermartingales in terms of n = jxj = fi fi s jwj fi fi log jwj, instead of in terms of jwj. We follow <ref> [12] </ref> in using notation from the probabilistically-checkable proofs literature [4, 5]. A martingale is a function d : fl ! R. To define measure on P, say, we require that this function be computable by a polynomial time oracle machine, given jwj as input and w as oracle.
Reference: [13] <author> M. Sipser. </author> <title> A complexity theoretic approach to randomness. </title> <booktitle> In Proc. 15th Symposium on Theory of Computation, </booktitle> <pages> pages 330-335. </pages> <publisher> ACM, </publisher> <year> 1983. </year>
Reference-contexts: Next we show how to convert to lexicographic order in classes smaller than exponential space, by just approximating the conditional expectation of d 0 . To perform the approximation we first use pseudorandom generators (see [7]), and afterwards we instead the use approximate counting of <ref> [13, 14] </ref>. <p> Proof. If P = NP then P = P 3 so approximate counting can be done in P. For d 0 bounded by 2 n and subintervals I as above, we make use of the approximate counting of <ref> [13, 14] </ref> to estimate the number g (w) of W w w such that d 0 (W ) 2 I. Note this is a #P function of w. By [13, 14], there's a function f computable in P 3 of w such that fi fi f (w) fi fi (note that <p> For d 0 bounded by 2 n and subintervals I as above, we make use of the approximate counting of <ref> [13, 14] </ref> to estimate the number g (w) of W w w such that d 0 (W ) 2 I. Note this is a #P function of w. By [13, 14], there's a function f computable in P 3 of w such that fi fi f (w) fi fi (note that 2 6n is at most a polynomial in jwj).
Reference: [14] <author> L. Stockmeyer. </author> <title> On approximation algorithms for #P. </title> <journal> SIAM Journal on Computing, </journal> <volume> 14, </volume> <year> 1985. </year> <month> 19 </month>
Reference-contexts: Next we show how to convert to lexicographic order in classes smaller than exponential space, by just approximating the conditional expectation of d 0 . To perform the approximation we first use pseudorandom generators (see [7]), and afterwards we instead the use approximate counting of <ref> [13, 14] </ref>. <p> Proof. If P = NP then P = P 3 so approximate counting can be done in P. For d 0 bounded by 2 n and subintervals I as above, we make use of the approximate counting of <ref> [13, 14] </ref> to estimate the number g (w) of W w w such that d 0 (W ) 2 I. Note this is a #P function of w. By [13, 14], there's a function f computable in P 3 of w such that fi fi f (w) fi fi (note that <p> For d 0 bounded by 2 n and subintervals I as above, we make use of the approximate counting of <ref> [13, 14] </ref> to estimate the number g (w) of W w w such that d 0 (W ) 2 I. Note this is a #P function of w. By [13, 14], there's a function f computable in P 3 of w such that fi fi f (w) fi fi (note that 2 6n is at most a polynomial in jwj).
References-found: 14

