URL: ftp://ftp.cs.huji.ac.il/users/transis/JCSS.ps.gz
Refering-URL: http://www.cs.huji.ac.il/labs/transis/Abstracts/jcss.html
Root-URL: http://www.cs.huji.ac.il
Email: E-mail: fidish,dolevg@cs.huji.ac.il  
Title: Increasing the Resilience of Distributed and Replicated Database Systems  
Author: Idit Keidar Danny Dolev 
Web: Url: http://www.cs.huji.ac.il/f~idish,~dolevg  
Address: Jerusalem, Israel, 91904  
Affiliation: Institute of Computer Science, The Hebrew University of Jerusalem,  
Abstract: This paper presents a new atomic commitment protocol, enhanced three phase commit (E3PC ), that always allows a quorum in the system to make progress. Previously suggested quorum-based protocols (e.g., the quorum-based three phase commit (3PC) [Ske82]) allow a quorum to make progress in case of one failure. If failures cascade, however, and the quorum in the system is "lost" (i.e., at a given time no quorum component exists), a quorum can later become connected and still remain blocked. With our protocol, a connected quorum never blocks. E3PC is based on the quorum-based 3PC [Ske82], and it does not require more time or communication than 3PC. We describe how this protocol can be exploited in a replicated database setting, making the database always available to a majority of the sites.
Abstract-found: 1
Intro-found: 1
Reference: [BHG87] <author> P. A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1987. </year>
Reference-contexts: In order to ensure that all the subtransactions are consistently committed or aborted, the sites run an atomic commitment protocol such as two phase commit. The requirements of atomic commitment (as defined in Chapter 7 of <ref> [BHG87] </ref>) are as follows: AC1: Uniform Agreement: All the sites that reach a decision reach the same one. AC2: A site cannot reverse its decision after it has reached one. <p> Acknowledgment We thank the referees that reviewed this paper for their helpful comments. A Correctness Proof of E3PC In this section we prove the correctness of E3PC; we show that E3PC and its recovery procedure fulfill the requirements of atomic commitment (as defined in Chapter 7 of <ref> [BHG87] </ref>) described in Section 3.1. The proof follows: AC1: Uniform Agreement: In Theorem 1 below we will prove that all the sites that reach a decision reach the same one. AC2: In our protocol, a site cannot reverse its decision after it has reached one.
Reference: [CHT92] <author> T. D. Chandra, V. Hadzilacos, and S. Toueg. </author> <title> The Weakest Failure Detector for Solving Consensus. </title> <booktitle> In ACM Symposium on Principles of Distributed Computing (PODC), </booktitle> <pages> pages 147-158, </pages> <year> 1992. </year>
Reference-contexts: E3PC terminates once a quorum of sites becomes connected and no failures or suspicions occur for sufficiently long. In a practical system, this assumption is likely to be fulfilled. Similarly, [CT96] and [DFKM96] define weaker classes of failure detectors; Chandra et al. <ref> [CHT92] </ref> prove that the weakest possible failure detector to solve consensus is the eventual weak failure detector.
Reference: [CK85] <author> D. Cheung and T. Kameda. </author> <title> Site Optimal Termination Protocols for a Distributed Database under Network Partitioning. </title> <booktitle> In 4th ACM Symposium on Principles of Distributed Computing (PODC), </booktitle> <pages> pages 111-121, </pages> <month> August </month> <year> 1985. </year> <month> 23 </month>
Reference-contexts: If failures cascade, however, and the quorum in the system is "lost" (i.e., at a certain time no quorum component exists), a quorum of sites can become connected and still remain blocked. Other previously suggested quorum-based protocols (e.g., <ref> [CR83, CK85] </ref>) also allow a quorum to make progress in case of one failure, while if failures cascade, a quorum can later become connected and still remain blocked.
Reference: [CR83] <author> F. Chin and K. V. S. Ramarao. </author> <title> Optimal Termination Protocols for Network Parti--tioning. </title> <booktitle> In ACM SIGACT-SIGMOD Symposium on Principles of Database Systems (PODS), </booktitle> <pages> pages 25-35, </pages> <month> March </month> <year> 1983. </year>
Reference-contexts: If failures cascade, however, and the quorum in the system is "lost" (i.e., at a certain time no quorum component exists), a quorum of sites can become connected and still remain blocked. Other previously suggested quorum-based protocols (e.g., <ref> [CR83, CK85] </ref>) also allow a quorum to make progress in case of one failure, while if failures cascade, a quorum can later become connected and still remain blocked. <p> Skeen's quorum-based commit protocol is described in Section 4. Since completely non-blocking recovery is impossible to achieve, further research in this area concentrated on minimizing the number of blocked sites when partitions occur. Chin et al. <ref> [CR83] </ref> define optimal termination protocols (recovery procedures) in terms of the average number of sites that are blocked when a partition occurs. The average is over all the possible partitions, and all the possible states in the protocol in which the partitions occurs.
Reference: [CT96] <author> T. D. Chandra and S. Toueg. </author> <title> Unreliable Failure Detectors for Reliable Distributed Systems. </title> <journal> J. Assoc. Comput. Mach. (JACM), </journal> <volume> 43(2) </volume> <pages> 225-267, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Other protocols that use two counters in order to allow a majority to make progress are given in <ref> [MHS89, CT96, KD96, Lam89, DLS88] </ref>. Numerous database replication schemes that are based on quorums have been suggested [Gif79, Her86, Her87, EASC85, EAT89]. These algorithms use quorum systems to determine when data objects are accessible. <p> In our terminology, a partition splits the network into several components. 2 E3PC uses a perfect fault detector: Every site has accurate information regarding which sites are connected to it. In Section 7 we discuss unreliable failure detectors <ref> [CT96, DFKM96] </ref> and the ability of our protocol to work with such failure detectors. In this case, the protocol solves the weak atomic commit problem [Gue95]. The rest of this paper is organized as follows: Section 2 presents the computation model. <p> However, when the protocol does terminate, the rest of the requirements of weak atomic commit are preserved. 7.1 Failure Detector Classes We have seen that in order to solve weak atomic commit, the model must be augmented with some failure detector. Chandra and Toueg <ref> [CT96] </ref> classify failure detectors with different levels of reliability. These failure detector classes are defined in a crash-failure asynchronous environment. In [DFKM96] these definitions are extended to the model where network partitions may occur. An eventual perfect failure detector (formally defined in [CT96] and [DFKM96]) may suspect correct sites, but there <p> Chandra and Toueg <ref> [CT96] </ref> classify failure detectors with different levels of reliability. These failure detector classes are defined in a crash-failure asynchronous environment. In [DFKM96] these definitions are extended to the model where network partitions may occur. An eventual perfect failure detector (formally defined in [CT96] and [DFKM96]) may suspect correct sites, but there is a time after which correct sites are no longer suspected. Using such a failure detector, E3PC solves the weak atomic commit problem. E3PC terminates once a quorum of sites becomes connected and no failures or suspicions occur for sufficiently long. <p> Using such a failure detector, E3PC solves the weak atomic commit problem. E3PC terminates once a quorum of sites becomes connected and no failures or suspicions occur for sufficiently long. In a practical system, this assumption is likely to be fulfilled. Similarly, <ref> [CT96] </ref> and [DFKM96] define weaker classes of failure detectors; Chandra et al. [CHT92] prove that the weakest possible failure detector to solve consensus is the eventual weak failure detector.
Reference: [DFKM96] <author> D. Dolev, R. Friedman, I. Keidar, and D. Malki. </author> <title> Failure Detectors in Omission Failure Environments. </title> <type> TR 96-13, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Jerusalem, Israel, </institution> <month> September </month> <year> 1996. </year> <type> Also Technical Report 96-1608, </type> <institution> Department of Computer Science, Cornell University. </institution>
Reference-contexts: In our terminology, a partition splits the network into several components. 2 E3PC uses a perfect fault detector: Every site has accurate information regarding which sites are connected to it. In Section 7 we discuss unreliable failure detectors <ref> [CT96, DFKM96] </ref> and the ability of our protocol to work with such failure detectors. In this case, the protocol solves the weak atomic commit problem [Gue95]. The rest of this paper is organized as follows: Section 2 presents the computation model. <p> Chandra and Toueg [CT96] classify failure detectors with different levels of reliability. These failure detector classes are defined in a crash-failure asynchronous environment. In <ref> [DFKM96] </ref> these definitions are extended to the model where network partitions may occur. An eventual perfect failure detector (formally defined in [CT96] and [DFKM96]) may suspect correct sites, but there is a time after which correct sites are no longer suspected. <p> Chandra and Toueg [CT96] classify failure detectors with different levels of reliability. These failure detector classes are defined in a crash-failure asynchronous environment. In <ref> [DFKM96] </ref> these definitions are extended to the model where network partitions may occur. An eventual perfect failure detector (formally defined in [CT96] and [DFKM96]) may suspect correct sites, but there is a time after which correct sites are no longer suspected. Using such a failure detector, E3PC solves the weak atomic commit problem. E3PC terminates once a quorum of sites becomes connected and no failures or suspicions occur for sufficiently long. <p> Using such a failure detector, E3PC solves the weak atomic commit problem. E3PC terminates once a quorum of sites becomes connected and no failures or suspicions occur for sufficiently long. In a practical system, this assumption is likely to be fulfilled. Similarly, [CT96] and <ref> [DFKM96] </ref> define weaker classes of failure detectors; Chandra et al. [CHT92] prove that the weakest possible failure detector to solve consensus is the eventual weak failure detector. <p> Guerraoui and Schiper [GS95] present a solution to the weak atomic commit problem in an environment without network partitions, using an eventual weak failure detector. Their protocol may be adapted to work in an environment with network partitions, using the technique presented in <ref> [DFKM96] </ref>. This technique yields a protocol that is less efficient (requiring more communication) than E3PC. 8 Conclusions In this paper we demonstrated how the three phase commit [Ske82] protocol can be made more resilient simply by maintaining two additional counters and by changing the decision rule.
Reference: [DKYL96] <author> D. Dolev, I. Keidar, and E. Yeger Lotem. </author> <title> Dynamic Voting for Consistent Primary Components. </title> <type> TR 96-7, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Jerusalem, Israel, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: The technique demonstrated here may be used to make other algorithms more resilient, e.g., an algorithm for maintaining a primary component in the network, to support processing of sequences of distributed transactions, as well as for ordering of messages [KD96] and replication [Kei94]. In <ref> [YLKD97, DKYL96] </ref> we exploit this technique in a dynamic voting scheme for maintaining the primary component in the network. Acknowledgment We thank the referees that reviewed this paper for their helpful comments.
Reference: [DLS88] <author> Cynthia Dwork, Nancy Lynch, and Larry Stockmeyer. </author> <title> Consensus in the Presence of Partial Synchrony. </title> <journal> J. Assoc. Comput. Mach. (JACM), </journal> <volume> 35(2) </volume> <pages> 288-323, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: Other protocols that use two counters in order to allow a majority to make progress are given in <ref> [MHS89, CT96, KD96, Lam89, DLS88] </ref>. Numerous database replication schemes that are based on quorums have been suggested [Gif79, Her86, Her87, EASC85, EAT89]. These algorithms use quorum systems to determine when data objects are accessible.
Reference: [EASC85] <author> A. El Abbadi, D. Skeen, and F. Christian. </author> <title> An Efficient Fault-Tolerant Algorithm for Replicated Data Management. </title> <booktitle> In ACM SIGACT-SIGMOD Symposium on Principles of Database Systems (PODS), </booktitle> <pages> pages 215-229, </pages> <month> March </month> <year> 1985. </year>
Reference-contexts: Other protocols that use two counters in order to allow a majority to make progress are given in [MHS89, CT96, KD96, Lam89, DLS88]. Numerous database replication schemes that are based on quorums have been suggested <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>. These algorithms use quorum systems to determine when data objects are accessible. In order to guarantee the atomicity of transactions, these algorithms use an ACP and therefore are bound to block when the ACP they use blocks. <p> Thus, with previously suggested ACPs, these approaches do not always allow a connected majority to update the database. Using E3PC these protocols can be made more resilient. In Section 6 we describe in detail how E3PC may be incorporated into accessible copies protocols <ref> [EASC85, EAT89] </ref>, in order to make the database always available to a quorum. 1 A component is sometimes called a partition. <p> When the network partitions, it is often desirable to allow a quorum of the sites to access the database, but it is usually undesirable to allow sites in two disjoint network components to concurrently update the same data. Numerous replication schemes that are based on quorums have been suggested <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>. In order to guarantee the atomicity of transactions, these algorithms use an ACP and therefore are bound to block when the ACP they use blocks. <p> Therefore, these sites need to recover the database state from other sites during the merge and before taking part in the recovery procedure. In the accessible copies protocols <ref> [EASC85, EAT89] </ref>, this is done every time the view changes. In this case, we suggest using the view change as the "fault detector" for E3PC; thus, the recovery procedure is always invoked following a view change, after all the participating sites have reached an up-to-date state. <p> Below, we describe in detail how E3PC may be incorporated into accessible copies protocols. 6.1 Using E3PC with Accessible Copies Protocols Accessible copies protocols <ref> [EASC85, EAT89] </ref> maintain a view of the system to determine when data are accessible: A data item can be read/written within a view (component) only if a majority of its read/write votes are assigned to copies that reside on sites that are members of this view. <p> We discussed how E3PC can be extended to work in an environment with unreliable failure detectors. In this case, the protocol solves the weak atomic commitment problem. E3PC may be used in conjunction with quorum-based replication protocols, such as <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>, in order to make the database always available to a quorum. We demonstrated how E3PC may be incorporated in accessible copies protocols [EASC85, EAT89]; with the new protocol, the database is always available to a quorum of connected sites. <p> E3PC may be used in conjunction with quorum-based replication protocols, such as [Gif79, Her86, Her87, EASC85, EAT89], in order to make the database always available to a quorum. We demonstrated how E3PC may be incorporated in accessible copies protocols <ref> [EASC85, EAT89] </ref>; with the new protocol, the database is always available to a quorum of connected sites.
Reference: [EAT89] <author> A. El Abbadi and S. Toueg. </author> <title> Maintaining Availability in Partitioned Replicated Databases. </title> <journal> ACM Trans. Database Systems, </journal> <volume> 14(2) </volume> <pages> 264-290, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Other protocols that use two counters in order to allow a majority to make progress are given in [MHS89, CT96, KD96, Lam89, DLS88]. Numerous database replication schemes that are based on quorums have been suggested <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>. These algorithms use quorum systems to determine when data objects are accessible. In order to guarantee the atomicity of transactions, these algorithms use an ACP and therefore are bound to block when the ACP they use blocks. <p> Thus, with previously suggested ACPs, these approaches do not always allow a connected majority to update the database. Using E3PC these protocols can be made more resilient. In Section 6 we describe in detail how E3PC may be incorporated into accessible copies protocols <ref> [EASC85, EAT89] </ref>, in order to make the database always available to a quorum. 1 A component is sometimes called a partition. <p> When the network partitions, it is often desirable to allow a quorum of the sites to access the database, but it is usually undesirable to allow sites in two disjoint network components to concurrently update the same data. Numerous replication schemes that are based on quorums have been suggested <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>. In order to guarantee the atomicity of transactions, these algorithms use an ACP and therefore are bound to block when the ACP they use blocks. <p> Therefore, these sites need to recover the database state from other sites during the merge and before taking part in the recovery procedure. In the accessible copies protocols <ref> [EASC85, EAT89] </ref>, this is done every time the view changes. In this case, we suggest using the view change as the "fault detector" for E3PC; thus, the recovery procedure is always invoked following a view change, after all the participating sites have reached an up-to-date state. <p> Below, we describe in detail how E3PC may be incorporated into accessible copies protocols. 6.1 Using E3PC with Accessible Copies Protocols Accessible copies protocols <ref> [EASC85, EAT89] </ref> maintain a view of the system to determine when data are accessible: A data item can be read/written within a view (component) only if a majority of its read/write votes are assigned to copies that reside on sites that are members of this view. <p> We discussed how E3PC can be extended to work in an environment with unreliable failure detectors. In this case, the protocol solves the weak atomic commitment problem. E3PC may be used in conjunction with quorum-based replication protocols, such as <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>, in order to make the database always available to a quorum. We demonstrated how E3PC may be incorporated in accessible copies protocols [EASC85, EAT89]; with the new protocol, the database is always available to a quorum of connected sites. <p> E3PC may be used in conjunction with quorum-based replication protocols, such as [Gif79, Her86, Her87, EASC85, EAT89], in order to make the database always available to a quorum. We demonstrated how E3PC may be incorporated in accessible copies protocols <ref> [EASC85, EAT89] </ref>; with the new protocol, the database is always available to a quorum of connected sites.
Reference: [FLP85] <author> M. Fischer, N. Lynch, and M. Paterson. </author> <title> Impossibility of Distributed Consensus with One Faulty Process. </title> <journal> J. Assoc. Comput. Mach. (JACM), </journal> <volume> 32 </volume> <pages> 374-382, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: In a fully asynchronous environment, reaching consensus 4 is impossible <ref> [FLP85] </ref>, in the sense that every protocol that reaches agreement is bound to have an infinite run. In particular, using any failure detector that can be implemented in such an environment, e.g., a time-out mechanism, E3PC does not fulfill the termination (AC5) requirement.
Reference: [Gif79] <author> D.K Gifford. </author> <title> Weighted Voting for Replicated Data. </title> <booktitle> In ACM SIGOPS Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1979. </year>
Reference-contexts: Other protocols that use two counters in order to allow a majority to make progress are given in [MHS89, CT96, KD96, Lam89, DLS88]. Numerous database replication schemes that are based on quorums have been suggested <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>. These algorithms use quorum systems to determine when data objects are accessible. In order to guarantee the atomicity of transactions, these algorithms use an ACP and therefore are bound to block when the ACP they use blocks. <p> E3PC, like Skeen's quorum-based three phase commit protocol [Ske82], uses a quorum system to decide when a group of connected sites may resolve the transaction. To enable maximum flexibility the quorum system may be elected in a variety of ways (e.g., weighted voting <ref> [Gif79] </ref>). The quorum system is static; it does not change in the course of the protocol. The predicate Q (S) is true for a given subset S of the sites iff S is a quorum. <p> When the network partitions, it is often desirable to allow a quorum of the sites to access the database, but it is usually undesirable to allow sites in two disjoint network components to concurrently update the same data. Numerous replication schemes that are based on quorums have been suggested <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>. In order to guarantee the atomicity of transactions, these algorithms use an ACP and therefore are bound to block when the ACP they use blocks. <p> We discussed how E3PC can be extended to work in an environment with unreliable failure detectors. In this case, the protocol solves the weak atomic commitment problem. E3PC may be used in conjunction with quorum-based replication protocols, such as <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>, in order to make the database always available to a quorum. We demonstrated how E3PC may be incorporated in accessible copies protocols [EASC85, EAT89]; with the new protocol, the database is always available to a quorum of connected sites.
Reference: [GM82] <author> H. Garcia-Molina. </author> <title> Elections in a Distributed Computing System. </title> <journal> IEEE Trans. Com-put., </journal> <volume> C-31, NO.1:48-59, </volume> <month> Jan. </month> <year> 1982. </year>
Reference-contexts: The recovery procedure consists of two phases: first elect a new coordinator, and next attempt to form a quorum that can resolve the transaction. A new coordinator may be elected in different ways (e.g., <ref> [GM82] </ref>). In the course of the election, the coordinator hears from all the other participating sites.
Reference: [Gra78] <editor> J.N. Gray. </editor> <booktitle> Notes on Database Operating Systems. In Operating Systems: An Advanced Course, Lecture Notes in Computer Science, </booktitle> <volume> volume 60, </volume> <pages> pages 393-481. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1978. </year>
Reference-contexts: A mixed decision results in an inconsistent database, while a unani-mous decision guarantees the atomicity of the transaction (provided that the local server at each site can guarantee local atomicity of transactions). To this end an atomic commitment protocol, such as two phase commit (2PC ) <ref> [Gra78] </ref> is invoked. The atomic commit problem and the two phase commit protocol are described in Section 3. Two phase commit is a blocking protocol: if the coordinator fails, all the sites may remain blocked indefinitely, unable to resolve the transaction. <p> AC5: Termination: At any point in the execution of the protocol, if all existing failures are repaired and no new failures occur for sufficiently long, then all sites will eventually reach a decision. 3.2 Two Phase Commit The simplest and most renowned ACP is two phase commit <ref> [Gra78] </ref>. Several variations of 2PC have been suggested (e.g., presume abort and presume commit [MLO86]), the simplest version is centralized one of the sites is designated as the coordinator. The coordinator sends a transaction (or request to prepare to commit) to all the participants.
Reference: [GS95] <author> R. Guerraoui and A. Schiper. </author> <title> The Decentralized Non-Blocking Atomic Commitment Protocol. </title> <booktitle> In IEEE International Symposium on Parallel and Distributed Processing (SPDP), </booktitle> <month> October </month> <year> 1995. </year>
Reference-contexts: Intuitively, an eventual weak failure detector may make mistakes and suspect correct sites, but there is a time after which there is some correct site that is not suspected by any other site that is connected to it. Guerraoui and Schiper <ref> [GS95] </ref> present a solution to the weak atomic commit problem in an environment without network partitions, using an eventual weak failure detector. Their protocol may be adapted to work in an environment with network partitions, using the technique presented in [DFKM96].
Reference: [Gue95] <author> R. Guerraoui. </author> <title> Revisiting the Relationship between non-blocking Atomic Commitment and Consensus. </title> <booktitle> In International Workshop on Distributed Algorithms (WDAG), </booktitle> <pages> pages 87-100, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: In Section 7 we discuss unreliable failure detectors [CT96, DFKM96] and the ability of our protocol to work with such failure detectors. In this case, the protocol solves the weak atomic commit problem <ref> [Gue95] </ref>. The rest of this paper is organized as follows: Section 2 presents the computation model. Section 3 provides general background on the atomic commitment problem. The quorum-based three phase commit protocol [Ske82] is described in Section 4, and enhanced three phase commit is described in Section 5. <p> In practice, systems use unreliable mechanisms, e.g., timeout, in order to detect faults. Such mechanisms may make mistakes and suspect that a correct (connected) site is faulty (disconnected). Can we relax the perfect failure detection assumption? Guerraoui <ref> [Gue95] </ref> proves that the Atomic Commit Problem, as defined in Section 3.1, cannot be solved without a perfect failure detector; the non-triviality requirement (AC4) is too strong. <p> E3PC does not require more communication or time than 3PC; the improved resilience is achieved simply by maintaining two additional counters. The information needed to maintain 4 Guerraoui <ref> [Gue95] </ref> proves that the Weak Atomic Commit problem is reducible to consensus. 18 the counters is piggybacked on messages that are sent in 3PC as well as in E3PC: the values of Last Elected and Last Attempt are attached to messages used to elect a new coordinator. <p> If all sites voted Yes, then the decision is commit. Since we assume a perfect failure detector, if there are no failures, there are no suspicions. Without a perfect failure detector, the weak non-triviality requirement (defined in <ref> [Gue95] </ref> and Section 7) is fulfilled. 19 AC5: Termination: At any point in the execution of the protocol, if all existing failures are repaired and no new failures occur for sufficiently long, then all sites will eventually reach a decision.
Reference: [Her86] <author> M. Herlihy. </author> <title> A Quorum-Consensus Replication Method for Abstract Data Types. </title> <journal> ACM Trans. Comput. Systems, </journal> <volume> 4(1) </volume> <pages> 32-53, </pages> <month> February </month> <year> 1986. </year> <month> 24 </month>
Reference-contexts: Other protocols that use two counters in order to allow a majority to make progress are given in [MHS89, CT96, KD96, Lam89, DLS88]. Numerous database replication schemes that are based on quorums have been suggested <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>. These algorithms use quorum systems to determine when data objects are accessible. In order to guarantee the atomicity of transactions, these algorithms use an ACP and therefore are bound to block when the ACP they use blocks. <p> When the network partitions, it is often desirable to allow a quorum of the sites to access the database, but it is usually undesirable to allow sites in two disjoint network components to concurrently update the same data. Numerous replication schemes that are based on quorums have been suggested <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>. In order to guarantee the atomicity of transactions, these algorithms use an ACP and therefore are bound to block when the ACP they use blocks. <p> We discussed how E3PC can be extended to work in an environment with unreliable failure detectors. In this case, the protocol solves the weak atomic commitment problem. E3PC may be used in conjunction with quorum-based replication protocols, such as <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>, in order to make the database always available to a quorum. We demonstrated how E3PC may be incorporated in accessible copies protocols [EASC85, EAT89]; with the new protocol, the database is always available to a quorum of connected sites.
Reference: [Her87] <author> M. Herlihy. </author> <title> Concurrency versus Availability: Atomicity Mechanisms for Replicated Data. </title> <journal> ACM Trans. Comput. Systems, </journal> <volume> 5(3) </volume> <pages> 249-274, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: Other protocols that use two counters in order to allow a majority to make progress are given in [MHS89, CT96, KD96, Lam89, DLS88]. Numerous database replication schemes that are based on quorums have been suggested <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>. These algorithms use quorum systems to determine when data objects are accessible. In order to guarantee the atomicity of transactions, these algorithms use an ACP and therefore are bound to block when the ACP they use blocks. <p> When the network partitions, it is often desirable to allow a quorum of the sites to access the database, but it is usually undesirable to allow sites in two disjoint network components to concurrently update the same data. Numerous replication schemes that are based on quorums have been suggested <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>. In order to guarantee the atomicity of transactions, these algorithms use an ACP and therefore are bound to block when the ACP they use blocks. <p> We discussed how E3PC can be extended to work in an environment with unreliable failure detectors. In this case, the protocol solves the weak atomic commitment problem. E3PC may be used in conjunction with quorum-based replication protocols, such as <ref> [Gif79, Her86, Her87, EASC85, EAT89] </ref>, in order to make the database always available to a quorum. We demonstrated how E3PC may be incorporated in accessible copies protocols [EASC85, EAT89]; with the new protocol, the database is always available to a quorum of connected sites.
Reference: [KD94] <author> I. Keidar and D. Dolev. </author> <title> Increasing the Resilience of Atomic Commit, at No Additional Cost. </title> <type> Technical Report CS94-18, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Jerusalem, Israel, </institution> <year> 1994. </year>
Reference-contexts: The formal proof may be found in <ref> [KD94] </ref>. 6 Replicated Database Systems In replicated database systems, the sites continuously execute transactions.
Reference: [KD96] <author> I. Keidar and D. Dolev. </author> <title> Efficient Message Ordering in Dynamic Networks. </title> <booktitle> In 15th ACM Symposium on Principles of Distributed Computing (PODC), </booktitle> <pages> pages 68-76, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: Other protocols that use two counters in order to allow a majority to make progress are given in <ref> [MHS89, CT96, KD96, Lam89, DLS88] </ref>. Numerous database replication schemes that are based on quorums have been suggested [Gif79, Her86, Her87, EASC85, EAT89]. These algorithms use quorum systems to determine when data objects are accessible. <p> The technique demonstrated here may be used to make other algorithms more resilient, e.g., an algorithm for maintaining a primary component in the network, to support processing of sequences of distributed transactions, as well as for ordering of messages <ref> [KD96] </ref> and replication [Kei94]. In [YLKD97, DKYL96] we exploit this technique in a dynamic voting scheme for maintaining the primary component in the network. Acknowledgment We thank the referees that reviewed this paper for their helpful comments.
Reference: [Kei94] <author> I. Keidar. </author> <title> A Highly Available Paradigm for Consistent Object Replication. </title> <type> Master's thesis, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Jerusalem, Israel, </institution> <year> 1994. </year> <note> Also available as Technical Report CS95-5, and via anonymous ftp at cs.huji.ac.il (132.65.16.10) in users/transis/thesis/keidar-msc.ps.gz. </note>
Reference-contexts: To our knowledge, the only previously suggested ACP that always allows a quorum to make progress is the ACP that we construct in <ref> [Kei94] </ref>. The protocol in [Kei94] is not straightforward; it uses a replication service as a building block, while the protocol presented in this paper is easy to follow and self-contained. <p> To our knowledge, the only previously suggested ACP that always allows a quorum to make progress is the ACP that we construct in <ref> [Kei94] </ref>. The protocol in [Kei94] is not straightforward; it uses a replication service as a building block, while the protocol presented in this paper is easy to follow and self-contained. In this paper we present the enhanced three phase commit (E3PC ) protocol, which is an enhancement of the quorum-based 3PC [Ske82]. <p> The analysis deals only with states in the basic commit protocol and ignores the possibility for cascading failures (failures that occur during the recovery procedure). It is proved that any ACP with optimal recovery procedures takes at least three phases and that the quorum-based recovery procedures are optimal. In <ref> [Kei94] </ref> we construct an ACP that always allows a connected majority to proceed, regardless of past failures. To our knowledge, no other ACP with this feature was suggested. The ACP suggested in [Kei94] uses a reliable replication service as a building block and is mainly suitable for replicated database systems. <p> In <ref> [Kei94] </ref> we construct an ACP that always allows a connected majority to proceed, regardless of past failures. To our knowledge, no other ACP with this feature was suggested. The ACP suggested in [Kei94] uses a reliable replication service as a building block and is mainly suitable for replicated database systems. In this paper, we present a novel commitment protocol, enhanced three phase commit, which always allows a connected majority to resolve the transaction (if it remains connected for sufficiently long). <p> In this paper, we present a novel commitment protocol, enhanced three phase commit, which always allows a connected majority to resolve the transaction (if it remains connected for sufficiently long). E3PC does not require complex building blocks, such as the one in <ref> [Kei94] </ref>, and is more adequate for partially replicated or non-replicated distributed database systems; it is based on the quorum-based three phase commit [Ske82]. 4 Quorum-Based Three Phase Commit In this section we describe Skeen's quorum-based commit protocol [Ske82]. <p> The technique demonstrated here may be used to make other algorithms more resilient, e.g., an algorithm for maintaining a primary component in the network, to support processing of sequences of distributed transactions, as well as for ordering of messages [KD96] and replication <ref> [Kei94] </ref>. In [YLKD97, DKYL96] we exploit this technique in a dynamic voting scheme for maintaining the primary component in the network. Acknowledgment We thank the referees that reviewed this paper for their helpful comments.
Reference: [Lam89] <author> L. Lamport. </author> <title> The part-time parliament. </title> <type> TR 49, </type> <institution> Systems Research Center, DEC, Palo Alto, </institution> <month> September </month> <year> 1989. </year>
Reference-contexts: Other protocols that use two counters in order to allow a majority to make progress are given in <ref> [MHS89, CT96, KD96, Lam89, DLS88] </ref>. Numerous database replication schemes that are based on quorums have been suggested [Gif79, Her86, Her87, EASC85, EAT89]. These algorithms use quorum systems to determine when data objects are accessible.
Reference: [MHS89] <author> Tim Mann, Andy Hisgen, and Garret Swart. </author> <title> An Algorithm for Data Replication. </title> <type> Technical Report 46, </type> <institution> DEC Systems Research Center, </institution> <month> June </month> <year> 1989. </year>
Reference-contexts: Other protocols that use two counters in order to allow a majority to make progress are given in <ref> [MHS89, CT96, KD96, Lam89, DLS88] </ref>. Numerous database replication schemes that are based on quorums have been suggested [Gif79, Her86, Her87, EASC85, EAT89]. These algorithms use quorum systems to determine when data objects are accessible.
Reference: [MLO86] <author> C. Mohan, B. Lindsay, and R. Obermark. </author> <title> Transaction Management in the R* Distributed Database Management System. </title> <journal> ACM Trans. Database Systems, </journal> <volume> 11(4), </volume> <month> Febru-ary </month> <year> 1986. </year>
Reference-contexts: Several variations of 2PC have been suggested (e.g., presume abort and presume commit <ref> [MLO86] </ref>), the simplest version is centralized one of the sites is designated as the coordinator. The coordinator sends a transaction (or request to prepare to commit) to all the participants. Each site answers by a Yes ("ready to commit") or by a No ("abort") message.
Reference: [PW95] <author> D. Peleg and A. Wool. </author> <title> Availability of Quorum Systems. </title> <journal> Inform. Comput., </journal> <volume> 123(2) </volume> <pages> 210-223, </pages> <year> 1995. </year>
Reference-contexts: For example, in the simple majority quorum system Q (S) is true iff jSj &gt; n=2, where n is the total number of sites running the protocol. Numerous quorum systems that fulfill these criteria were suggested. An analysis of the availability of different quorum systems may be found in <ref> [PW95] </ref>. For further flexibility, it is possible to set different quorums for commit and abort (this idea was presented in [Ske82]). In this case, a commit quorum of connected sites is required in order to commit a transaction, and an abort quorum is required to abort.
Reference: [Ske82] <author> D. Skeen. </author> <title> A Quorum-Based Commit Protocol. </title> <booktitle> In 6th Berkeley Workshop on Distributed Data Management and Computer Networks, </booktitle> <pages> pages 69-80, </pages> <month> Feb. </month> <year> 1982. </year>
Reference-contexts: Two phase commit is a blocking protocol: if the coordinator fails, all the sites may remain blocked indefinitely, unable to resolve the transaction. To reduce the extent of blocking, Skeen suggested the quorum-based three phase commit (3PC) protocol, which maintains consistency in spite of network partitions <ref> [Ske82] </ref>. In case of failures, the algorithm uses a quorum (or majority)-based recovery procedure that allows a quorum to resolve the transaction. <p> In this paper we present the enhanced three phase commit (E3PC ) protocol, which is an enhancement of the quorum-based 3PC <ref> [Ske82] </ref>. E3PC maintains consistency in the face of site failures and network partitions: sites may crash and recover, and the network may partition into several components 1 and remerge. <p> In this case, the protocol solves the weak atomic commit problem [Gue95]. The rest of this paper is organized as follows: Section 2 presents the computation model. Section 3 provides general background on the atomic commitment problem. The quorum-based three phase commit protocol <ref> [Ske82] </ref> is described in Section 4, and enhanced three phase commit is described in Section 5. In Section 6 we describe how E3PC can be exploited in replicated database systems. In Section 7 we describe the protocol's behavior with an unreliable failure detector. Section 8 concludes the paper. <p> A quorum system is a generalization of the majority concept. E3PC, like Skeen's quorum-based three phase commit protocol <ref> [Ske82] </ref>, uses a quorum system to decide when a group of connected sites may resolve the transaction. To enable maximum flexibility the quorum system may be elected in a variety of ways (e.g., weighted voting [Gif79]). <p> Numerous quorum systems that fulfill these criteria were suggested. An analysis of the availability of different quorum systems may be found in [PW95]. For further flexibility, it is possible to set different quorums for commit and abort (this idea was presented in <ref> [Ske82] </ref>). In this case, a commit quorum of connected sites is required in order to commit a transaction, and an abort quorum is required to abort. For example, to increase the probability of commit in the system, one can assign smaller quorums for commit and larger ones for abort. <p> When a partition occurs, the best protocols allow no more than one group of sites to 5 continue while the remaining groups block. Skeen suggested the quorum-based three phase com-mit protocol, which maintains consistency in spite of network partitions <ref> [Ske82] </ref>. This protocol is blocking in case of partitions; it is possible for an operational site to be blocked until a failure is mended. In case of failures, the algorithm uses a quorum (or majority)-based recovery procedure that allows a quorum to resolve the transaction. <p> E3PC does not require complex building blocks, such as the one in [Kei94], and is more adequate for partially replicated or non-replicated distributed database systems; it is based on the quorum-based three phase commit <ref> [Ske82] </ref>. 4 Quorum-Based Three Phase Commit In this section we describe Skeen's quorum-based commit protocol [Ske82]. E3PC is a refinement of 3PC, and therefore we elaborate on 3PC before presenting E3PC. The basic three phase commit is described in Section 4.1, and the recovery procedure is described in Section 4.2. <p> E3PC does not require complex building blocks, such as the one in [Kei94], and is more adequate for partially replicated or non-replicated distributed database systems; it is based on the quorum-based three phase commit <ref> [Ske82] </ref>. 4 Quorum-Based Three Phase Commit In this section we describe Skeen's quorum-based commit protocol [Ske82]. E3PC is a refinement of 3PC, and therefore we elaborate on 3PC before presenting E3PC. The basic three phase commit is described in Section 4.1, and the recovery procedure is described in Section 4.2. <p> The protocol is based on the quorum-based three phase 9 commit protocol <ref> [Ske82] </ref>. E3PC does not require more communication or time than 3PC; the improved resilience is achieved simply by maintaining two additional counters, which impose a linear order on quorums formed in the system. Initially, the basic E3PC is invoked. <p> Their protocol may be adapted to work in an environment with network partitions, using the technique presented in [DFKM96]. This technique yields a protocol that is less efficient (requiring more communication) than E3PC. 8 Conclusions In this paper we demonstrated how the three phase commit <ref> [Ske82] </ref> protocol can be made more resilient simply by maintaining two additional counters and by changing the decision rule.
Reference: [SS83] <author> D. Skeen and M. Stonebraker. </author> <title> A Formal Model of Crash Recovery in a Distributed System. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> SE-9 NO.3, </volume> <month> May </month> <year> 1983. </year>
Reference-contexts: This is undesirable but cannot be avoided; Skeen proved that every protocol that tolerates network partitions is bound to be blocking in certain scenarios <ref> [SS83] </ref>. E3PC achieves higher availability than 3PC simply by carefully maintaining two additional counters and with no additional communication. <p> Coordinator Participant Transaction is received: Send sub-transactions. Sub-transaction is received: Send reply Yes or No. If all sites respond Yes: Send commit. If some site voted No: Send abort. commit or abort is received: Process accordingly. Commit protocols may also be described using state diagrams <ref> [SS83] </ref>. The state diagram for 2PC is shown in Figure 1. The circles denote states; final states are double-circled. The arcs represent state transitions, and the action taken (e.g., message sent) by the site is indicated next to each arc. <p> Consequently, the availability of data stored in reliable sites can be limited by the availability of the weakest component in the distributed system. Skeen et al. <ref> [SS83] </ref> proved that there exists no non-blocking protocol resilient to network partitioning. When a partition occurs, the best protocols allow no more than one group of sites to 5 continue while the remaining groups block.
Reference: [YLKD97] <author> E. Yeger Lotem, I. Keidar, and D. Dolev. </author> <title> Dynamic Voting for Consistent Primary Components. </title> <booktitle> In 16th ACM Symposium on Principles of Distributed Computing (PODC), </booktitle> <month> August </month> <year> 1997. </year> <month> 25 </month>
Reference-contexts: The technique demonstrated here may be used to make other algorithms more resilient, e.g., an algorithm for maintaining a primary component in the network, to support processing of sequences of distributed transactions, as well as for ordering of messages [KD96] and replication [Kei94]. In <ref> [YLKD97, DKYL96] </ref> we exploit this technique in a dynamic voting scheme for maintaining the primary component in the network. Acknowledgment We thank the referees that reviewed this paper for their helpful comments.
References-found: 28

