URL: ftp://ftp.cs.berkeley.edu/ucb/CASTLE/Mantis/tech_report/csd-94-828.ps
Refering-URL: http://www.cs.berkeley.edu/Research/Projects/parallel/castle/mantis/
Root-URL: 
Title: Mantis User's Guide, Version 1.0  
Author: Steven S. Lumetta and David E. Culler 
Date: August 31, 1994  
Abstract: This report describes Mantis, a graphical debugger for the Split-C language. Split-C is a parallel extension of C which retains the straightforward translation from source code to executable code necessary for high performance programming of parallel machines. Mantis supports the bulk synchronous and individual node viewpoints which together dominate the design of Split-C programs. Execution can be managed for all nodes as a group or for each node individually. Finally, state and invariants can be checked with a variety of methods, each capable of understanding the abstractions which define Split-C. The graphical interface is simple enough for new users to understand with minimal effort yet powerful enough to allow experienced users to work effectively. Using a straightforward example, we illustrate the process of using Mantis to find both simple and more subtle bugs. We then summarize the important features of Mantis by topic. Mantis currently runs on the Thinking Machines Corp. CM-5 and is built using a Tcl/Tk graphical user interface linked to a modified version of the Free Software Foundation's gdb debugger. Mantis made its debut at U. C. Berkeley during the Spring 1994 semester and was used heavily by the parallel computation course. fl This material is based upon work supported under a National Science Foundation Presidential Faculty Fellowship Award, a Graduate Research Fellowship, and Infrastructure Grant number CDA-8722788, as well as Lawrence Livermore National Laboratories Inst. for Scientific Research Grants #UCB-ERL-92/69 and #UCB-ERL-92/172. Any opinions, findings, conclusions, or recommendations expressed in this publication are those of the authors and do not necessarily reflect the views of either organization. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. E. Culler, A. Dusseau, S. C. Goldstein, A. Krishnamurthy, S. Lumetta, T. von Eicken, K. Yelick, </author> <title> "Parallel Programming in Split-C," </title> <booktitle> Proceedings of Supercomputing '93, </booktitle> <address> Port-land, Oregon, </address> <month> November </month> <year> 1993, </year> <pages> pp. 262-273. </pages>
Reference-contexts: 1 Introduction This report describes Mantis, a graphical debugger for the Split-C language. Split-C <ref> [1] </ref> is a parallel extension of C which retains the straightforward translation from source code to executable code necessary for high performance programming of parallel machines. <p> The address of a spread array section, for example, will be a spread pointer if the section consists of one or more of the blocks on each processor, and will be a global pointer if the section is part of a block: int a [PROCS*2]::[2]; &a <ref> [1] </ref> has type int (*spread)[2], while &a [1][1] has type int *global. <p> time in which the first implementation of Mantis was developed, Split-C has been ported to several other platforms [5], including the Intel Paragon and networks of Hewlett-Packard workstations. 6 For those interested in examples of Split-C applications, we suggest [2], which analyzes several sorting codes using the LogP model, and <ref> [1] </ref>, which explains the language by example. 6 Work is also currently underway to provide Split-C for arbitrary networks of homogeneous workstations as well as the Meiko CS-2. 19 A Code for Fish and Gravity 1 #include &lt;split-c/split-c.h&gt; 2 #include &lt;split-c/control.h&gt; 3 #include &lt;split-c/com.h&gt; 4 #include &lt;math.h&gt; 5 #include &lt;malloc.h&gt; 6
Reference: [2] <author> D. E. Culler, A. C. Dusseau, K. E. Schauser, R. P. Martin, </author> <title> "Fast Parallel Sorting under LogP: from Theory to Practice," in "Portability and Performance for Parallel Processing," </title> <editor> A. J. G. Hey and J. Ferrante, </editor> <booktitle> eds., </booktitle> <pages> pp. 71-98, </pages> <publisher> John Wiley & Sons, Ltd., </publisher> <year> 1994. </year>
Reference-contexts: During the time in which the first implementation of Mantis was developed, Split-C has been ported to several other platforms [5], including the Intel Paragon and networks of Hewlett-Packard workstations. 6 For those interested in examples of Split-C applications, we suggest <ref> [2] </ref>, which analyzes several sorting codes using the LogP model, and [1], which explains the language by example. 6 Work is also currently underway to provide Split-C for arbitrary networks of homogeneous workstations as well as the Meiko CS-2. 19 A Code for Fish and Gravity 1 #include &lt;split-c/split-c.h&gt; 2 #include
Reference: [3] <author> K. Dewdney, </author> <title> "Computer Recreations: Sharks and fish wage an ecological war on the toroidal planet Wa-Tor," </title> <publisher> Scientific American, </publisher> <month> December </month> <year> 1984. </year>
Reference-contexts: For the example, we shall draw on code to simulate the world of WaTor, introduced by A. K. Dewdney in 1984 <ref> [3] </ref> and documented further by Fox et. al. [4], which has become a valuable tool for teaching parallel programming at Berkeley (in the CS267 course). In the original WaTor, sharks and fish share a world of water and interact through a small set of rules.
Reference: [4] <author> G. Fox, M. Johnson, G. Lyzenga, S. Otto, J. Salmon, D. Walker, </author> <title> "Solving Problems on Concurrent Processors," Vol. I, </title> <journal> Ch. </journal> <volume> 17, </volume> <pages> pp. 307-325, </pages> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey. </address>
Reference-contexts: For the example, we shall draw on code to simulate the world of WaTor, introduced by A. K. Dewdney in 1984 [3] and documented further by Fox et. al. <ref> [4] </ref>, which has become a valuable tool for teaching parallel programming at Berkeley (in the CS267 course). In the original WaTor, sharks and fish share a world of water and interact through a small set of rules.
Reference: [5] <author> S. Luna, </author> <title> "Implementing an Efficient Portable Global Memory Layer on Distributed Memory Multiprocessors," </title> <editor> U. </editor> <address> C. </address> <institution> Berkeley Technical Report #CSD-94-810, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: During the time in which the first implementation of Mantis was developed, Split-C has been ported to several other platforms <ref> [5] </ref>, including the Intel Paragon and networks of Hewlett-Packard workstations. 6 For those interested in examples of Split-C applications, we suggest [2], which analyzes several sorting codes using the LogP model, and [1], which explains the language by example. 6 Work is also currently underway to provide Split-C for arbitrary networks
Reference: [6] <author> J. K. Ousterhout, </author> <title> "Tcl: An Embeddable Command Language," </title> <booktitle> Proc. USENIX Winter Conference, </booktitle> <pages> pp. 133-146, </pages> <year> 1990. </year>
Reference-contexts: The child process performs the actual debugging, handling all typical debugging tasks, while the user interface attempts to present the information in a more accessible and automatic fashion than that provided by most command line debuggers. The user interface is written using the Tool Command Language (Tcl) <ref> [6] </ref> and X11 toolkit (Tk) [7] developed by Ousterhout, which greatly simplified the task. 5 The interface required about seven thousand lines of code, which divide roughly equally into script code and C code.
Reference: [7] <author> J. K. Ousterhout, </author> <title> "An X11 Toolkit Based on the Tcl Language," </title> <booktitle> Proc. USENIX Winter Conference, </booktitle> <pages> pp. 105-115, </pages> <year> 1991. </year>
Reference-contexts: The user interface is written using the Tool Command Language (Tcl) [6] and X11 toolkit (Tk) <ref> [7] </ref> developed by Ousterhout, which greatly simplified the task. 5 The interface required about seven thousand lines of code, which divide roughly equally into script code and C code.
Reference: [8] <author> T. von Eicken, D. E. Culler, S. C. Goldstein, K. E. Schauser, </author> <title> "Active Messages: a Mechanism for Integrated Communication and Computation," </title> <booktitle> Proceedings of the International Symposium on Computer Architecture, </booktitle> <year> 1992 </year> <month> 24 </month>
Reference-contexts: By creating a simple programming model which supports aspects of the shared memory, message passing, and data parallel paradigms, Split-C offers the programmer a clear cost model for programs. Split-C was first implemented on the Thinking Machines Corp. CM-5, building from GCC and Active Messages <ref> [8] </ref>, and the first version of Mantis has been implemented on that same platform.
References-found: 8

