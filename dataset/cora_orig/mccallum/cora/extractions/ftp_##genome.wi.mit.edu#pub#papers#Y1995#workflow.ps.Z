URL: ftp://genome.wi.mit.edu/pub/papers/Y1995/workflow.ps.Z
Refering-URL: ftp://ftp.cs.toronto.edu/pub/bonner/papers/workflow/nsf96.html
Root-URL: 
Email: flstein,steve,natg@genome.wi.mit.edu  
Title: MANAGING LABORATORY WORKFLOW WITH LABBASE usefulness over a period of seven months of heavy usage
Author: Lincoln Stein, Steve Rozen, Nathan Goodman 
Keyword: Laboratory Workflow Management, Laboratory Process Management,  
Note: The system has proven to be of great  is also required.  Laboratory Databases, Genome  
Address: Building 300, One Kendall Square Cambridge, MA 02139, U.S.A  
Affiliation: Whitehead Institute/MIT Center for Genome Research  Informatics, Laboratory Informatics, Laboratory  
Abstract: We have designed and implemented a system for managing workflow in large semi-automated laboratory projects. This system sits on top of LabBase, a database management system specialized for representing complex biological data types and experimental steps. The workflow manager uses a simple state/transition model to represent laboratory protocols and offers a perl-based API for interaction with LabBase. In order to accommodate the need to modify the protocols frequently, the workflow management has been decoupled from data management, allowing the database schema to change without affecting the workflow protocols and vice versa. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> I-Min A. Chen and Victor M. Markowitz. </author> <title> The Object-Protocol Model, version 2.3. </title> <type> Technical Report LBL-32738, </type> <institution> Lawrence Berkeley Laboratory, </institution> <address> 1 Cyclotron Road, Berkeley, CA, 94720, USA, </address> <month> May </month> <year> 1994. </year> <note> This document and others on OPM available at ftp://gizmo.lbl.gov/ pub/DM TOOLS/OPM/opm.html. </note>
Reference-contexts: Example Laboratory Protocol A simplified laboratory protocol is shown in Figure <ref> [1] </ref>. Its steps are as follows: 1. Schedule an STS (a short DNA fragment that can be detected by PCR) for characterization on whole human DNA. 2. Perform the characterization experiment. 3. Interpret the characterization results according to certain criteria. <p> These programs take the form of short perl [13] scripts, a language chosen for its ease of use, its support for shell-like system integration, and its powerful string matching and manipulation functions. To support the workflow shown in Figure <ref> [1] </ref> we have one perl script to handle STS scheduling, another to record the STS characterization results, another to interpret the results of the characterization, and so on. Some of these scripts are run as a result of user intervention. <p> Efforts are underway to provide explicit support for workflow management tasks by adding workflow steps to ACeDB schemas [8], and by adding client/server support to the ACeDB software [12]. A contrasting, tightly-coupled approach is taken by the Object-Protocol Model (OPM) <ref> [1] </ref>, in which knowledge of the laboratory protocol (workflow) is an integral part of the database schema. In this object-oriented modeling language, each laboratory protocol is a database object with explicitly defined inputs and outputs.
Reference: 2. <author> William F. Clocksin and Christopher S. Mellish. </author> <title> Programming in Prolog. </title> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: The query language provides support for inserting and deleting materials from value sets, as well as for querying a value set's membership. The LabBase query language [9, 10] uses a declarative datalog syntax similar to Prolog's <ref> [2] </ref>. For example, the query STS (S) will cause LabBase to successively bind the variable S to each STS material it finds in the database. <p> Once a material enters a workflow, it is constrained to be in one of a limited number of states, and the legal transitions between states are explicitly enumerated. The protocol description file for the example STS characterization workflow has the contents shown in Figure <ref> [2] </ref>. The protocol description files use a tabular format that is easily understood by novice programmers.
Reference: 3. <author> Richard Durbin and Jean Thierry-Mieg. A C. </author> <note> elegans database, 1991. Documentation, code and data available from anonymous ftp servers at lirmm.lirmm.fr, cele.mrc-lmb.cam.ac.uk and ncbi.nlm.nih.gov. </note>
Reference-contexts: It should also be feasible to design graphical browsers to inspect the contents of laboratory protocols, although we have not done so yet. The approach of decoupling the workflow management from the data could work with other data managers. For example, in the C. elegans database ACeDB <ref> [3] </ref> there is no built-in special-purpose workflow management support, but the status of a laboratory material could be stored in a "workflow-state" attribute, and step histories could be stored in a multivalued attribute.
Reference: 4. <author> Nathan Goodman. </author> <title> An object oriented DBMS war story: Developing a genome mapping database in C++. </title> <editor> In Won Kim, editor, </editor> <title> Modern Database Management: Object-Oriented and Multidatabase Technologies. </title> <publisher> ACM Press, </publisher> <year> 1994. </year>
Reference-contexts: Rapid protocol evolution is common. Minor protocol changes occur on a weekly basis, while a major protocol change (defined as the addition or deletion of one or more experimental steps) occurs almost monthly. In previous papers <ref> [4, 11, 5] </ref> we described the design and implementation of the LabBase database management system (DBMS), a system tailored to the needs of laboratory information systems. <p> Our rationale for adopting this decoupled approach arises from our experience with the predecessor to LabBase, an object-oriented database for the management of genetic mapping projects <ref> [4] </ref> called MapBase. In MapBase, the status of a laboratory material within the genetic mapping protocol was derived when needed by examining all the experimental steps that had been performed on that material and determining the outcomes for each of those steps.
Reference: 5. <author> Nathan Goodman, Steve Rozen, and Lincoln Stein. </author> <title> Building a laboratory information system around a C++-based object-oriented dbms. </title> <booktitle> In Proceedings of the 20th International Conference on Very Large Data Bases, </booktitle> <month> September </month> <year> 1994. </year> <note> Available at ftp://genome.wi.mit.edu/ pub/papers/Y1994/building.ps.Z. </note>
Reference-contexts: Rapid protocol evolution is common. Minor protocol changes occur on a weekly basis, while a major protocol change (defined as the addition or deletion of one or more experimental steps) occurs almost monthly. In previous papers <ref> [4, 11, 5] </ref> we described the design and implementation of the LabBase database management system (DBMS), a system tailored to the needs of laboratory information systems.
Reference: 6. <author> Richard Hull and Roger King. </author> <title> Semantic database modeling: Survey, applica-tions, and research issues. </title> <journal> ACM Computing Surveys, </journal> <volume> 19 </volume> <pages> 201-260, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: For example, a DNA sequencing step can associate a sequence tag and the DNA sequence data itself with a genetic marker material. Materials roughly correspond to the "object types" of semantic data models, while the tags correspond to attributes <ref> [6] </ref>. The main difference is that the tags are, strictly speaking, attached to the steps themselves rather than to the materials.
Reference: 7. <author> John K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1994. </year>
Reference-contexts: It has not been a problem at the Genome Center because perl is essentially the only language that we use for system integration. However, it could become troublesome if we were to find the need to incorporate workflow management functions into data analysis programs written in C++ or Tcl <ref> [7] </ref>. We are confident that we could produce a C++ library with the same functionality. 4. Conclusions and Future Directions The workflow manager complements LabBase's built-in experimental step history facilities by adding a simple state/transition model to describe the steps of a laboratory protocol.
Reference: 8. <author> Otto Ritter. </author> <title> Integrated genome database schema, 1994. </title> <publisher> Deutsches Krebs-forschungszentrum, </publisher> <address> Heidelberg, </address> <note> This and other IGD-related documents available at http://genome.dkfz-heidelberg.de/igd-docs/. </note>
Reference-contexts: From a material's state and implicit knowledge of the laboratory protocols, external programs could determine what experiments to perform next, just as they do when operating on LabBase data. Efforts are underway to provide explicit support for workflow management tasks by adding workflow steps to ACeDB schemas <ref> [8] </ref>, and by adding client/server support to the ACeDB software [12]. A contrasting, tightly-coupled approach is taken by the Object-Protocol Model (OPM) [1], in which knowledge of the laboratory protocol (workflow) is an integral part of the database schema.
Reference: 9. <author> Steve Rozen, Lincoln Stein, and Nathan Goodman. </author> <title> LabBase User Manual. </title> <note> Available at ftp://genome.wi.mit.edu/pub/papers/Y1994/ labbase-manual.ps. </note>
Reference-contexts: In addition to materials, steps and tags, LabBase provides value sets, providing storage for sets of arbitrary values, including material references. The query language provides support for inserting and deleting materials from value sets, as well as for querying a value set's membership. The LabBase query language <ref> [9, 10] </ref> uses a declarative datalog syntax similar to Prolog's [2]. For example, the query STS (S) will cause LabBase to successively bind the variable S to each STS material it finds in the database.
Reference: 10. <author> Steve Rozen, Lincoln Stein, and Nathan Goodman. </author> <title> Constructing a domain-specific DBMS using a persistent object system. </title> <booktitle> In Sixth International Workshop on Persistent Object Systems, </booktitle> <month> September </month> <year> 1994. </year> <note> In press. Available at ftp://genome.wi.mit.edu/pub/papers/Y1994/labbase-design.ps.Z. </note>
Reference-contexts: In addition to materials, steps and tags, LabBase provides value sets, providing storage for sets of arbitrary values, including material references. The query language provides support for inserting and deleting materials from value sets, as well as for querying a value set's membership. The LabBase query language <ref> [9, 10] </ref> uses a declarative datalog syntax similar to Prolog's [2]. For example, the query STS (S) will cause LabBase to successively bind the variable S to each STS material it finds in the database.
Reference: 11. <author> Lincoln Stein, Andre Marquis, Ert Dredge, Mary Pat Reeve, Mark Daly, Steve Rozen, and Nathan Goodman. </author> <title> Splicing UNIX into a genome mapping laboratory. </title> <booktitle> In USENIX Summer 1994 Technical Conference, </booktitle> <pages> pages 221-229, </pages> <month> June </month> <year> 1994. </year> <note> Available at ftp://genome.wi.mit.edu/pub/papers/Y1994/ Summer94 Usenix.ps.Z. </note>
Reference-contexts: Rapid protocol evolution is common. Minor protocol changes occur on a weekly basis, while a major protocol change (defined as the addition or deletion of one or more experimental steps) occurs almost monthly. In previous papers <ref> [4, 11, 5] </ref> we described the design and implementation of the LabBase database management system (DBMS), a system tailored to the needs of laboratory information systems. <p> The next sections describe how the LabBase workflow manager functions as a layer on top of LabBase to constrain and manage workflow-related transactions. 2. Workflow Manager Our design of the LabBase workflow manager was strongly influenced by our style of laboratory software design <ref> [11] </ref>. For each step in the laboratory work-flow there is a corresponding small program responsible for handling the database transactions and data analysis requirements of that step.
Reference: 12. <author> Jean Thierry-Mieg, </author> <month> October </month> <year> 1994. </year> <type> Personal communication. </type>
Reference-contexts: Efforts are underway to provide explicit support for workflow management tasks by adding workflow steps to ACeDB schemas [8], and by adding client/server support to the ACeDB software <ref> [12] </ref>. A contrasting, tightly-coupled approach is taken by the Object-Protocol Model (OPM) [1], in which knowledge of the laboratory protocol (workflow) is an integral part of the database schema. In this object-oriented modeling language, each laboratory protocol is a database object with explicitly defined inputs and outputs.
Reference: 13. <author> Larry Wall and Randal L. Schwartz. </author> <title> Programming perl. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1990. </year>
Reference-contexts: For each step in the laboratory work-flow there is a corresponding small program responsible for handling the database transactions and data analysis requirements of that step. These programs take the form of short perl <ref> [13] </ref> scripts, a language chosen for its ease of use, its support for shell-like system integration, and its powerful string matching and manipulation functions.
References-found: 13

