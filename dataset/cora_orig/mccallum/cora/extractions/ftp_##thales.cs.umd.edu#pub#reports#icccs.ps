URL: ftp://thales.cs.umd.edu/pub/reports/icccs.ps
Refering-URL: ftp://thales.cs.umd.edu/pub/biographical/xmat.html
Root-URL: 
Title: Incremental Condition Calculation and Column Selection  
Author: G. W. Stewart 
Address: College Park, MD  
Affiliation: Department of Computer Science and Institute for Advanced Computer Studies, University of Maryland,  
Date: 90-87 July 1990  2495  
Note: UMIACS TR  20742. This work was supported in part by the Air Force Office of Sponsored Research under Contract AFOSR-87-0188.  
Pubnum: CS TR  
Abstract: This paper describes a method for calculating the condition number of a matrix in the Frobenius norm that can be used to select columns in the course of computing a QR decomposition. When the number of rows of the matrix is much greater than the number of columns, the additional overhead is negligible. Limited numerical experiments suggest that the method is quite good at finding gaps in the singular values of the matrix. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. H. </author> <title> Bischof (1990). "Incremental Condition Estimation." </title> <journal> SIAM Journal on Matrix Analysis and Applications, </journal> <volume> 11, </volume> <pages> 312-322. </pages>
Reference-contexts: Other methods work with a precomputed decomposition. For example, the method of Golub, Klema, and Stewart [7] starts with a singular value decomposition, and the rank revealing method of Chan [3] starts with a QR decomposition. Recently Bischof <ref> [1] </ref> has proposed an incremental condition estimator and shown how it can be used to drive a selection method. Since the condition calculator proposed here is incremental, it also yields a selection method.
Reference: [2] <author> C. H. Bischof and P. C. </author> <title> Hansen (1989). "Structure-Preserving and Rank-Revealing QR-Factorizations." </title> <type> Preprint MCS-P100-0989, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory. </institution>
Reference-contexts: However, one should not make too much of this, since empirical studies [11, 9] have shown approximate condition estimators to be quite good in practice. The condition calculator is most effective for dense matrices many more rows than columns. For sparse matrices the technique of Bischof and Hansen <ref> [2] </ref>, which combines restricted forward selection with a backward rank-revealing pass [3]. Other combinations will be suggested by the application at hand.
Reference: [3] <author> T. F. </author> <title> Chan (1987). "Rank Revealing QR Factorizations." </title> <journal> Linear Algebra and Its Applications, </journal> <volume> 88/89, </volume> <pages> 67-82. </pages>
Reference-contexts: Other methods work with a precomputed decomposition. For example, the method of Golub, Klema, and Stewart [7] starts with a singular value decomposition, and the rank revealing method of Chan <ref> [3] </ref> starts with a QR decomposition. Recently Bischof [1] has proposed an incremental condition estimator and shown how it can be used to drive a selection method. Since the condition calculator proposed here is incremental, it also yields a selection method. <p> The condition calculator is most effective for dense matrices many more rows than columns. For sparse matrices the technique of Bischof and Hansen [2], which combines restricted forward selection with a backward rank-revealing pass <ref> [3] </ref>. Other combinations will be suggested by the application at hand.
Reference: [4] <author> A. K. Cline, C. B. Moler, G. W. Stewart, and J. H. </author> <title> Wilkinson (1979). "An Estimate for the Condition Number of a Matrix." </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> 16, </volume> <pages> 368-375. </pages>
Reference-contexts: The matrix is typically a triangular matrix R | often the result of computing a QR or LR factorization. The first condition estimator was devised by Gragg and Stewart [8], and was later improved by Cline, Moler, Stewart, and Wilkinson <ref> [4] </ref> for incorporation into linpack [5]. Other condition estimators have since been proposed, many of which are treated in a survey by Higham [9]. Condition estimators typically trade precision for speed.
Reference: [5] <author> J. J. Dongarra, J. R. Bunch, C. B. Moler, and G. W. </author> <note> Stewart (1979). LIN-PACK User's Guide. SIAM, Philadelphia. 12 Condition Calculator </note>
Reference-contexts: The matrix is typically a triangular matrix R | often the result of computing a QR or LR factorization. The first condition estimator was devised by Gragg and Stewart [8], and was later improved by Cline, Moler, Stewart, and Wilkinson [4] for incorporation into linpack <ref> [5] </ref>. Other condition estimators have since been proposed, many of which are treated in a survey by Higham [9]. Condition estimators typically trade precision for speed. <p> Specifically, let the singular values of R be 1 2 : and suppose that for some integer p p p+1 : 2 Some care must be taken in updating the ff i , since cancellation can make them meaningless. See the program sqrdc in <ref> [5] </ref> for details.
Reference: [6] <author> G. H. </author> <title> Golub (1965). "Numerical Methods for Solving Least Squares Problems." </title> <journal> Numerische Mathematik, </journal> <volume> 7, </volume> <pages> 206-216. </pages>
Reference-contexts: Although no one has proven that the problem can be solved | at least for large n | there are a number of effective strategies. Perhaps the oldest of these is to compute the QR decomposition with column pivoting, as suggested by Golub <ref> [6] </ref>. This method is an example of an incremental selection algorithm, since it can select columns as the QR decomposition is computed. Other methods work with a precomputed decomposition.
Reference: [7] <author> G. H. Golub, V. Klema, and G. W. </author> <title> Stewart (1976). "Rank Degeneracy and Least Squares Problems." </title> <type> Technical Report TR-751, </type> <institution> Department of Computer Science, University of Maryland. </institution>
Reference-contexts: This method is an example of an incremental selection algorithm, since it can select columns as the QR decomposition is computed. Other methods work with a precomputed decomposition. For example, the method of Golub, Klema, and Stewart <ref> [7] </ref> starts with a singular value decomposition, and the rank revealing method of Chan [3] starts with a QR decomposition. Recently Bischof [1] has proposed an incremental condition estimator and shown how it can be used to drive a selection method.
Reference: [8] <author> W. B. Gragg and G. W. </author> <title> Stewart (1976). "A Stable Variant of the Secant Method for Solving Nonlinear Equations." </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> 13, </volume> <pages> 880-903. </pages>
Reference-contexts: 1. Introduction The problem of condition estimation is to approximate the norm of an inverse or pseudo-inverse of a matrix. The matrix is typically a triangular matrix R | often the result of computing a QR or LR factorization. The first condition estimator was devised by Gragg and Stewart <ref> [8] </ref>, and was later improved by Cline, Moler, Stewart, and Wilkinson [4] for incorporation into linpack [5]. Other condition estimators have since been proposed, many of which are treated in a survey by Higham [9]. Condition estimators typically trade precision for speed.
Reference: [9] <author> N. J. </author> <title> Higham (1987). "A Survey of Condition Number Estimation for Triangular Matrices." </title> <journal> SIAM Review, </journal> <volume> 29, </volume> <pages> 575-596. </pages>
Reference-contexts: The first condition estimator was devised by Gragg and Stewart [8], and was later improved by Cline, Moler, Stewart, and Wilkinson [4] for incorporation into linpack [5]. Other condition estimators have since been proposed, many of which are treated in a survey by Higham <ref> [9] </ref>. Condition estimators typically trade precision for speed. They produce an approximation to the norm of the inverse, usually a lower bound, in O (n 2 ) time, where n is the order of R. <p> The condition calculator should not be regarded as a rival of other methods; rather it is another tool with which the numerical analyst can probe rank. Its strong point is that it calculates the condition exactly. However, one should not make too much of this, since empirical studies <ref> [11, 9] </ref> have shown approximate condition estimators to be quite good in practice. The condition calculator is most effective for dense matrices many more rows than columns. For sparse matrices the technique of Bischof and Hansen [2], which combines restricted forward selection with a backward rank-revealing pass [3].
Reference: [10] <author> W. </author> <title> Kahan (1966). "Numerical Linear Algebra." </title> <journal> Canadian Mathematical Bulletin, </journal> <volume> 9, </volume> <pages> 757-801. </pages>
Reference-contexts: Since the condition calculator proposed here is incremental, it also yields a selection method. Unfortunately, this method (as well as Bischof's method and column pivoting) fails on a matrix devised by Kahan <ref> [10] </ref>. However, the quantities computed by the condition calculator not only detect the failure but they point to a cure. In the next section the condition calculator and its use as a column selection strategy will be described. <p> Unfortunately, the selection strategy of the last section, along with most others, fails on the following example due to Kahan <ref> [10] </ref>.
Reference: [11] <author> G. W. </author> <title> Stewart (1980). "The Efficient Generation of Random Orthogonal Matrices with an Application to Condition Estimators." </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> 17, </volume> <pages> 403-404. </pages>
Reference-contexts: Thus, rotations can be pulled out of the factorization at the cost of updating the vectors that determine the Householder transformations. 10 Condition Calculator were generated by the technique described in <ref> [11] </ref>. The singular values have a gap of ratio fi 1 between the tenth and eleventh and otherwise show a gentle decrease in size. The selection strategy was run on two-hundred such matrices, once for fi = 0:1 and again for fi = 0:01. <p> The condition calculator should not be regarded as a rival of other methods; rather it is another tool with which the numerical analyst can probe rank. Its strong point is that it calculates the condition exactly. However, one should not make too much of this, since empirical studies <ref> [11, 9] </ref> have shown approximate condition estimators to be quite good in practice. The condition calculator is most effective for dense matrices many more rows than columns. For sparse matrices the technique of Bischof and Hansen [2], which combines restricted forward selection with a backward rank-revealing pass [3].
References-found: 11

