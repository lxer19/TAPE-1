URL: ftp://ftp.cs.dartmouth.edu/TR/TR98-334.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/reports/abstracts/TR98-334/
Root-URL: http://www.cs.dartmouth.edu
Title: C Compiler Targeting the Java Virtual Machine intimately familiar with compiler construction, the use of
Author: Jack Pien 
Degree: Senior Honors Thesis (Advisor: Javed A. Aslam)  
Note: The reader is assumed to be  
Date: May 30, 1998  
Affiliation: Dartmouth College Computer Science  
Pubnum: Technical Report PCS-TR98-334  
Abstract: One of the major drawbacks in the field of computer software development has been the inability for applications to compile once and execute across many different platforms. With the emergence of the Internet and the networking of many different platforms, the Java programming language and the Java Platform was created by Sun Microsystems to address this "Write Once, Run Anywhere" problem. What sets a compiled Java program apart from programs compiled from other high level languages is the ability of a Java Virtual Machine to execute the compiled Java program on any platform, as long as the Java Virtual Machine is running on top of that platform. Java's cross platform capabilities can be extended to other high level languages such as C. The main objective of our project is to implement a compiler targeting the Java Platform for a subset of the C language. This will allow code written in that subset of C to be compiled into Java Virtual Machine instructions, also known as JVM bytecode, which can then be executed on a Java Virtual Machine running on any platform. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Louden, Kenneth C. </author> <title> Compiler Construction: </title> <booktitle> Principles and Practice. </booktitle> <publisher> PWS Publishing Company, </publisher> <address> Boston MA. </address> <year> 1997. </year>
Reference-contexts: The only types of arguments that can be passed into a function call are int's or a reference to an int array. The exact grammar that was implemented is indicated as follows: 1 For more information on compiler construction and the use of flex and bison refer to <ref> [1] </ref>. 2 Program : DeclarationList DeclarationList : Declaration DeclarationList j Declaration Declaration : VariableDeclaration j FunctionDeclaration VariableDeclaration : TypeSpec ID ; j TypeSpec ID [ NUM ] ; TypeSpec : INT j VOID FunctionDeclaration : TypeSpec ID ( Params ) CompoundStatement Params : ParamList j VOID ParamList : Param , ParamList
Reference: [2] <author> Meyer, Jon and Downing, </author> <title> Troy Java Virtual Machine. </title> <publisher> O'Reilly and Associates, Inc., </publisher> <address> Sebastopol, CA. </address> <year> 1997 </year>
Reference: [3] <author> Lindholm, Tim and Yellin, </author> <title> Frank The Java Virtual Machine Specification AddisonWesley, </title> <address> Mountain View, CA. </address> <year> 1997 </year> <month> 14 </month>
Reference-contexts: Constant Pool entries are added as the code generator parses through syntactical parse tree given by the parser. Each entry is added to the end of the Constant Pool table. The format of each entry depends on the type of the entry <ref> [3, pages 92-101] </ref>. The Constant Pool data structure is accessed whenever the code generator comes across a function call or a global variable access. <p> Therefore, unlike other stack-based machine platforms, the code generator first virtually encloses the sourceFile 2 This is assuming that the JVM method is declared static. For more information on local variables, refer to <ref> [3, pages 66] </ref>. 8 code within a class, which it names the targetFile class. All functions and global variables declared within sourceFile thus becomes publically and statically declared methods and fields of the class targetFile. <p> code generation is complete, the four temporary files for the Constant Pool, global variable declarations, function declarations, and the constructor for our targetFile class are combined in the respective order into the complete targetFile.class Java Virtual Machine .class file. 4 For more information on bytecode counting and jumping, refer to <ref> [3, pages 348-349] </ref>. 11 3 Conclusion With the number of different machine platforms in existence and the increasing influence of the Internet, it becomes more and more important to write applications that has the ability to run on all platforms.
References-found: 3

