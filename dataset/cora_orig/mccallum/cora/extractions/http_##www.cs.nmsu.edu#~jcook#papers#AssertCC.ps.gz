URL: http://www.cs.nmsu.edu/~jcook/papers/AssertCC.ps.gz
Refering-URL: http://www.cs.nmsu.edu/~jcook/papers/
Root-URL: http://www.cs.nmsu.edu
Title: Assertions for C++  
Author: Jonathan E. Cook 
Date: June 19, 1994  
Abstract: In this report I describe types of program annotations that could be used in C++ to enhance the testability, assurance, and overall quality of the code being developed. These annotations are formal, processable assertions which capture constraints and specifications which cannot be discerned from the program code itself. I first describe in some depth previous work in this area, and then try to apply this work to the C++ programming language. 
Abstract-found: 1
Intro-found: 1
Reference: [CW85] <author> Luca Cardelli and Peter Wegner. </author> <title> On understanding types, data abstraction, and polymorphism. </title> <journal> ACM Computing Surveys, </journal> <volume> 17(4) </volume> <pages> 471-522, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: To specify these types of assertions, additional extra-language constructs must be provided to access type properties, such as the range of an array. A full type expression sublanguage would be useful here in reasoning about types <ref> [CW85] </ref>. Preconditions and postconditions for statements and statement blocks provide assertions about the state of the program at specific execution points. These are usually specified as expressions involving program variables, and might need to involve previous values of program variables.
Reference: [DHBBO87] <author> D.Luckham, F.W.von Henke, B.Krieg-Bruckner, and O.Owe. Anna: </author> <title> A Language for Annotating Ada Programs. </title> <booktitle> Lecture Notes in Computer Science: </booktitle> <volume> 260. </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1987. </year>
Reference-contexts: It does not target fully provable assertions (and thus static analysis), but rather dynamic checking, and is meant as an extra-language program verification tool and not to be used to modify or control the correct execution of a program. 3.2 Anna Anna (Annotated ADA) <ref> [Luc90, DHBBO87] </ref> is a system similar to APP, but with the ADA programming language, and with a larger scope than APP. Anna is meant to encompass both dynamic and static analysis of assertions, and has tools for both of these tasks.
Reference: [Lip91] <author> Stanley B. Lippman. </author> <title> C++ Primer. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <note> second edition, </note> <year> 1991. </year>
Reference-contexts: In this report, I look at the current state of the work being done in the area of formal program annotations to imperative programming languages, and then look at how this work might be applied to the C++ programming language <ref> [Str86, Lip91] </ref>, and the issues that arise. 2 What are program assertions? Program assertions are any statements of constraints or conditions about the program which do not directly affect its (correct) execution. This is a "catch-all" definition, and includes many things we might not readily consider assertions.
Reference: [Luc90] <author> David Luckham. </author> <title> Programming with Specifications: An introduction to Anna, a language for specifying Ada programs. Texts and Monographs in Computer Science. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: By defining a structured comment annotation language, and building tools which understand it, one can add assertions to a language without changing the language or inhibiting portability to environments which support the base language but not the assertion capability. This is the approach taken in both Anna <ref> [Luc90] </ref> and APP [Ros92]. The following sections briefly describe APP, Anna, and Eiffel; how they define and use assertions; and their contributions to assertions and how they should be used. 3.1 APP APP (Annotation PreProcessor) is an assertion language and corresponding tool for the C programming language [Ros92, Ros94]. <p> It does not target fully provable assertions (and thus static analysis), but rather dynamic checking, and is meant as an extra-language program verification tool and not to be used to modify or control the correct execution of a program. 3.2 Anna Anna (Annotated ADA) <ref> [Luc90, DHBBO87] </ref> is a system similar to APP, but with the ADA programming language, and with a larger scope than APP. Anna is meant to encompass both dynamic and static analysis of assertions, and has tools for both of these tasks. <p> Since C++ is based on C and has a strong procedural foundation, basically all of the work done in APP [Ros92] can be directly applied to C++. Then, with the work of Anna <ref> [Luc90] </ref> and Eiffel [Mey88], we saw assertion constructs which were defined for specifying assertions about modules and objects, the most important being the class invariant idea and axioms which reason over the states of objects.
Reference: [Mey88] <author> Bertrand Meyer. </author> <title> Object-Oriented Software Construction. </title> <publisher> Prentice Hall, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: If one is defining a new language, then annotations can be built into the language specification, and have a strict and consistent definition and interpretation. This is the approach taken in Eiffel, for example <ref> [Mey88] </ref>. There are certain advantages to this approach, namely that one can provide precise action semantics for when assertions are violated. One might want to just log the occurence for debugging purposes, or perhaps raise an exception for recovery processing. <p> Underlying this is also full statement-level assertions, type and variable assertions, and exception condition assertions which allow Anna to very thoroughly cover the needs of using assertions in the context of the Ada programming language. 3.3 Eiffel Eiffel is an object-oriented language created "because no satisfactory one existed" <ref> [Mey88] </ref>. In creating Effiel, Meyer had the opportunity to put assertions directly into the underlying language, and did just that. He wanted to put forth the notion of "programming by contract", and that the assertions would model the contract that the sub-program, in this case objects, would fulfill. <p> Since C++ is based on C and has a strong procedural foundation, basically all of the work done in APP [Ros92] can be directly applied to C++. Then, with the work of Anna [Luc90] and Eiffel <ref> [Mey88] </ref>, we saw assertion constructs which were defined for specifying assertions about modules and objects, the most important being the class invariant idea and axioms which reason over the states of objects.
Reference: [Ros92] <author> David S. Rosenblum. </author> <title> Towards a method of programming with assertions. </title> <booktitle> In Proc. 14th International Conference on Software Engineering. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: This is the approach taken in both Anna [Luc90] and APP <ref> [Ros92] </ref>. The following sections briefly describe APP, Anna, and Eiffel; how they define and use assertions; and their contributions to assertions and how they should be used. 3.1 APP APP (Annotation PreProcessor) is an assertion language and corresponding tool for the C programming language [Ros92, Ros94]. <p> The following sections briefly describe APP, Anna, and Eiffel; how they define and use assertions; and their contributions to assertions and how they should be used. 3.1 APP APP (Annotation PreProcessor) is an assertion language and corresponding tool for the C programming language <ref> [Ros92, Ros94] </ref>. As a tool, APP is a full replacement of cpp, the C preprocessor, but with the added capability of understanding and using assertions inside a special comment form, bracketed by /*@ and @*/. <p> Since C++ is based on C and has a strong procedural foundation, basically all of the work done in APP <ref> [Ros92] </ref> can be directly applied to C++. Then, with the work of Anna [Luc90] and Eiffel [Mey88], we saw assertion constructs which were defined for specifying assertions about modules and objects, the most important being the class invariant idea and axioms which reason over the states of objects.
Reference: [Ros94] <author> David S. Rosenblum. </author> <title> A practical approach to programming with assertions. </title> <note> submitted to IEEE Transactions on Software Engineering, </note> <year> 1994. </year>
Reference-contexts: The following sections briefly describe APP, Anna, and Eiffel; how they define and use assertions; and their contributions to assertions and how they should be used. 3.1 APP APP (Annotation PreProcessor) is an assertion language and corresponding tool for the C programming language <ref> [Ros92, Ros94] </ref>. As a tool, APP is a full replacement of cpp, the C preprocessor, but with the added capability of understanding and using assertions inside a special comment form, bracketed by /*@ and @*/.
Reference: [Str86] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1986. </year>
Reference-contexts: In this report, I look at the current state of the work being done in the area of formal program annotations to imperative programming languages, and then look at how this work might be applied to the C++ programming language <ref> [Str86, Lip91] </ref>, and the issues that arise. 2 What are program assertions? Program assertions are any statements of constraints or conditions about the program which do not directly affect its (correct) execution. This is a "catch-all" definition, and includes many things we might not readily consider assertions.
References-found: 8

