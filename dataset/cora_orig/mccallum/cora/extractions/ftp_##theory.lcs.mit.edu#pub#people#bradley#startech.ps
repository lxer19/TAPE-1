URL: ftp://theory.lcs.mit.edu/pub/people/bradley/startech.ps
Refering-URL: http://theory.lcs.mit.edu/~cilk/starsoc.html
Root-URL: 
Email: bradley@lcs.mit.edu  
Title: The StarTech Massively Parallel Chess Program  
Author: Bradley C. Kuszmaul 
Date: January 11, 1995  
Address: NE43-247, 545 Technology Square Cambridge, MA 02139  
Affiliation: Laboratory for Computer Science Massachusetts Institute of Technology  
Web: http://theory.lcs.mit.edu/bradley  
Abstract: The StarTech massively parallel chess program, running on a 512-processor Connection Machine CM-5 supercomputer, tied for third place at the 1993 ACM International Computer Chess Championship. StarTech employs the Jamboree search algorithm, a natural extension of J. Pearl's Scout search algorithm, to find parallelism in game-tree searches. StarTech's work-stealing scheduler distributes the work specified by the search algorithm across the processors of the CM-5. StarTech uses a global transposition table shared among the processors. StarTech has an informally estimated rating of over 2400 USCF. Two performance measures help in understanding the performance of the StarTech program: the work, W , and the critical path length, C. The Jamboree search algorithm used in StarTech seems to perform about 2 to 3 times more work than does our best serial implementation. The critical path length, under tournament conditions, is less than 0.1% of the total work, yielding an average parallelism of over 1000. The StarTech scheduler achieves actual performance of approximately T 1:02W=P + 1:5C on P processors. The critical path and work can be used to tune performance by allowing development of the program on a small, readily accessable, machine while predicting the performance on a big, tournament-sized, machine. 
Abstract-found: 1
Intro-found: 1
Reference: [ABD82] <author> Selim G. Akl, David T. Barnard, and Ralph J. Doran. </author> <title> Design and implementation of a parallel tree search algorithm. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> PAMI-4 (2), </volume> <pages> pages 192-203, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: This approach to parallel search is quite natural, and variants of it have been used by several other parallel chess programs, such as Cray Blitz [HSN89] and Zugzwang [FMM93]. Still others have proposed or analyzed variations of this style of game tree search <ref> [ABD82, MC82, Fis84, Hsu90] </ref>. My Ph.D. thesis [Kus94] provides a more complete discussion of how Jamboree search is related to other search algorithms.
Reference: [Ber79] <author> Hans Berliner. </author> <title> The B* tree search algorithm: a best-first proof procedure. </title> <journal> Artificial Intelligence, </journal> <volume> 12, </volume> <pages> pages 23-40, </pages> <year> 1979. </year>
Reference-contexts: There are several other approaches to game tree search that are not based on ff-fi search, several of which might be applicable to parallel search. For example, H. Berliner's B* search algorithm <ref> [Ber79] </ref> tries to prove that one of the moves is better with respect to a pessimistic evaluation than any of the other moves with respect to an optimistic evaluation. D.
Reference: [BE89] <author> Hans Berliner and Carl Ebeling. </author> <title> Pattern knowledge and search: the SUPREM architecture. </title> <journal> Artificial Intelligence, </journal> <volume> 38 (2), </volume> <pages> pages 161-198, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: This paper explains how StarTech works and how it performs. The chess knowledge of StarTechwhich includes the opening book of precomputed moves at the beginning of the game, the endgame databases, the static position-evaluation function, and the time-control strategyis based on H. Berliner's Hitech program <ref> [BE89] </ref>. Hitech runs on special-purpose hardware built in the mid 1980's and searches in the range of 100,000 to 200,000 positions per second.
Reference: [Ber93] <author> Hans Berliner. </author> <type> Personal communication. </type> <month> October </month> <year> 1993. </year>
Reference-contexts: Truscott's unpublished checkers program in the early 1980's [Tru92], and was briefly explored for the Hitech program by H. Berliner and his students in the late 1980's <ref> [Ber93] </ref>.) Without recursive iterative deepening, StarTech chooses the right first move 85%-95% of the time. With recursive iterative deepening, a few percent more of the positions are searched in best-first order. Recursive iterative deepending is worth about a 20% performance improvement in StarTech.
Reference: [BL94] <author> Robert D. Blumofe and Charles E. Leiserson. </author> <title> Scheduling multithreaded computations by work stealing. </title> <booktitle> In Proceedings of the 35th Annual Symposium on Foundations of Computer Science (FOCS '94), </booktitle> <address> Santa Fe, New Mexico, </address> <month> November </month> <year> 1994. </year> <note> (To appear.) </note>
Reference-contexts: The CM-5 has sufficient interprocessor communications performance that there is no appreciable advantage in trying to steal locally rather than from a random processor, and the randomized approach to scheduling is provably efficient <ref> [BL94] </ref>. Scout Search Before delving into the details of Jamboree search, let us review the serial Scout search algorithm. For a parallel chess program, one needs an algorithm that both effectively prunes the tree and can be parallelized.
Reference: [BJK*94] <author> Robert D. Blumofe, Christopher F. Joerg, Bradley C. Kuszmaul, Charles E. Leiserson, Keith H. Randall, Andrew Shaw, and Yuli Zhou. Cilk: </author> <title> an efficient multithreaded run-time system. </title> <month> December </month> <year> 1994. </year> <note> Submitted for publication. (Available via anonymous FTP from theory.lcs.mit.edu in /pub/cilk/cilkpaper.ps.Z.) </note>
Reference-contexts: Kaufman, C. F. Joerg, C. E. Leiserson, R. D. Blumofe, M. Halbherr, and Y. Zhou [JK94]. ?Socrates uses more sophisticated search extensions and seems to have even greater average parallelism than StarTech. ?Socrates uses a new programming language and run-time system being developed at MIT called Cilk (pronounced `Silk') <ref> [BJK*94] </ref>. Cilk provides a language and run-time system to separate the application program from the problems of scheduling and load balanc 13 ing on a parallel computer. Cilk hopes to make it possible for ordinary C programmers to write multithreaded applications without having to be experts in parallel computing.
Reference: [Dai94] <author> Don Dailey. </author> <type> Personal communication. </type> <month> June </month> <year> 1994. </year>
Reference-contexts: By so doing, StarTech greatly improves the probability that the best move is searched first. Recent experiments performed by D. Dailey on his Socrates program suggest that recursive iterative deepen 11 ing may actually slow down programs that already have good move-ordering heuristics <ref> [Dai94] </ref>. (Recursive iterative deepening was used in T. Truscott's unpublished checkers program in the early 1980's [Tru92], and was briefly explored for the Hitech program by H. Berliner and his students in the late 1980's [Ber93].) Without recursive iterative deepening, StarTech chooses the right first move 85%-95% of the time.
Reference: [Elo78] <author> Arpad E. Elo. </author> <title> The Rating of Chessplayers Past and Present. </title> <publisher> Arco Publishers, </publisher> <address> New York, </address> <year> 1978. </year>
Reference-contexts: The standard way to determine the rating of a chess player is to play lots of games. Since playing games is very time consuming, I use a set of benchmark problems designed by I.M. L. Kaufman [Kau92, Kau93] to estimate StarTech's performance using the Elo rating system <ref> [Elo78] </ref>. Kaufman cautions against misuse of his ratings estimator, for example by tuning a program to do well against only the benchmark problems. Since StarTech has not been tuned against Kaufman's benchmark, we can get some idea of StarTech's rating by using Kaufman's estimator.
Reference: [FMM93] <author> R. Feldmann, P. Mysliwietz, and B. Monien. </author> <title> Game tree search on a massively parallel system. </title> <booktitle> In Advances in Computer Chess 7, </booktitle> <year> 1993. </year>
Reference-contexts: This approach to parallel search is quite natural, and variants of it have been used by several other parallel chess programs, such as Cray Blitz [HSN89] and Zugzwang <ref> [FMM93] </ref>. Still others have proposed or analyzed variations of this style of game tree search [ABD82, MC82, Fis84, Hsu90]. My Ph.D. thesis [Kus94] provides a more complete discussion of how Jamboree search is related to other search algorithms. <p> The table element contains the depth to which the tree was searched, the best move, a lower bound to the value of the position, and an upper bound to the value of the position. ilar transposition table scheme is used by the Zugzwang parallel chess program <ref> [FMM93] </ref>.) Historically parallel chess programs have often avoided global transposition tables. F. Popowich and T. Marsland concluded that local transposition tables are better than global transposition tables [PM83]. <p> The Bratko-Kopec set [KB82], one of the earliest test sets published for computers, was designed to show the deficiencies of a program rather than to estimate the program's strength. Feldmann et al. <ref> [FMM93] </ref> found that the Bratko-Kopec test set could not differentiate between master-level chess programs, and so they picked a collection of positions from actual games they had played to measure the performance 6 of their program. <p> Under such conditions, StarTech seems to achieve a factor of between 50 and 100 speedup on 512 processors. The authors of the Zugzwang chess program <ref> [FMM93] </ref> encountered similar problems, finding that when searching `easy' positions to a very deep depth, more speedup is achieved than can realistically be expected under tournament conditions. On the other hand, searching the easy problems to a shallow depth does not give the program an opportunity to find parallelism. <p> By measuring average parallelism we can understand the impact of our algorithm design decisions. In contrast, one recent enhancement to the Zugzwang program <ref> [FMM93] </ref> is to explicitly compute the number of critical children of a position, and when searching a position with exactly one critical child, and several promising moves, Zugzwang searches all the promising moves sequentially before starting the parallel search of the other children.
Reference: [Fis84] <author> J. P. Fishburn. </author> <title> Analysis of Speedup in Distributed Algorithms. </title> <publisher> UMI Research Press, </publisher> <address> Ann Arbor, MI, </address> <year> 1984. </year>
Reference-contexts: This approach to parallel search is quite natural, and variants of it have been used by several other parallel chess programs, such as Cray Blitz [HSN89] and Zugzwang [FMM93]. Still others have proposed or analyzed variations of this style of game tree search <ref> [ABD82, MC82, Fis84, Hsu90] </ref>. My Ph.D. thesis [Kus94] provides a more complete discussion of how Jamboree search is related to other search algorithms. <p> That is, Jamboree search is worse than serial ff-fi search, even on an ideal machine with no overhead for communications or scheduling. For comparison, paral-lelized negamax search achieves linear speedup on worst-ordered trees, and Fishburn's MWF algorithm achieves nearly linear speedup on worst-ordered trees <ref> [Fis84] </ref>. In summary, critical path and work are the important parameters for understanding the performance of StarTech.
Reference: [GEC67] <author> Richard D. Greenblatt, Donald E. Eastlake, III, and Stephen D. Crocker. </author> <title> The Greenblatt chess pgoram. </title> <booktitle> In Fall Joint Computer Conference, </booktitle> <pages> pages 801-810, </pages> <year> 1967. </year>
Reference-contexts: The first strategy for improving performance is to perform recursive iterative deepening in order to improve move ordering. StarTech uses its global transposition table to improve move ordering. Most other programs use additional move-ordering mechanisms such as the killer table <ref> [GEC67] </ref> and the history table [MOS86]. StarTech does not use any such additional move-ordering heuristics. Recursive iterative deepening works as follows.
Reference: [Hsu90] <author> Feng-hsiung Hsu. </author> <title> Large Scale Parallelization of Alpha-Beta Search: An Algorithmic and Architectural Study with Computer Chess. </title> <type> Technical report CMU-CS-90-108, </type> <institution> Computer Science Department, Carnegie-Mellon University, </institution> <address> Pitts-burgh, PA 15213, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: This approach to parallel search is quite natural, and variants of it have been used by several other parallel chess programs, such as Cray Blitz [HSN89] and Zugzwang [FMM93]. Still others have proposed or analyzed variations of this style of game tree search <ref> [ABD82, MC82, Fis84, Hsu90] </ref>. My Ph.D. thesis [Kus94] provides a more complete discussion of how Jamboree search is related to other search algorithms. <p> I wanted to measure the improved rating of StarTech as a function of the number of processors, but first I had to isolate other factors. The biggest other factor is the effect of the transposition-table size which varies with the number of processors. Hsu argues <ref> [Hsu90] </ref> that if one increases the size of the transposition table along with the number of processors, then the results are suspect. Hsu states that increasing the transposition table size by a factor of 256 can easily improve the performance by a factor of 2 to 5.
Reference: [HSN89] <author> Robert M. Hyatt, Bruce W. Suter, and Harry L. Nel-son. </author> <title> A parallel alpha/beta tree searching algorithm. </title> <journal> Parallel Computing, </journal> <volume> 10 (3), </volume> <pages> pages 299-308, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: We expect that the tests usually succeed, because the move ordering is often best-first due to the application of several chess-specific move-ordering heuristics. This approach to parallel search is quite natural, and variants of it have been used by several other parallel chess programs, such as Cray Blitz <ref> [HSN89] </ref> and Zugzwang [FMM93]. Still others have proposed or analyzed variations of this style of game tree search [ABD82, MC82, Fis84, Hsu90]. My Ph.D. thesis [Kus94] provides a more complete discussion of how Jamboree search is related to other search algorithms. <p> The decision is much easier for StarTech, which uses low-overhead (10 microsecond) messages on the CM-5. (Similarly, Cray Blitz uses a global transposition table because accessing global memory is also inexpensive on a Cray supercomputer <ref> [HSN89] </ref>.) 3 The Performance of StarTech The previous section explained how StarTech works. This section explores the performance of StarTech. We start by estimating StarTech's rating using a ratings estimation benchmark.
Reference: [JK94] <author> Christopher F. Joerg and Bradley C. Kuszmaul. </author> <title> Massively parallel chess. </title> <booktitle> In Third DIMACS Parallel Implementation Challenge Workshop, </booktitle> <institution> Rutgers University, </institution> <month> October </month> <year> 1994. </year> <note> (Available via anonymous FTP from theory.lcs.mit.edu in /pub/cilk/dimacs94.ps.Z.) </note>
Reference-contexts: Most state-of-the-art chess programs employ search extensions and forward pruning to improve the quality of their tree search. I have been working on a newer program, called ?Socrates, with D. Dailey, L. Kaufman, C. F. Joerg, C. E. Leiserson, R. D. Blumofe, M. Halbherr, and Y. Zhou <ref> [JK94] </ref>. ?Socrates uses more sophisticated search extensions and seems to have even greater average parallelism than StarTech. ?Socrates uses a new programming language and run-time system being developed at MIT called Cilk (pronounced `Silk') [BJK*94].
Reference: [Kau92] <author> Larry Kaufman. </author> <title> Rate your own computer. </title> <journal> Computer Chess Reports, </journal> <volume> 3 (1), </volume> <pages> pages 17-19, </pages> <year> 1992. </year> <note> (Published by ICD, 21 Walt Whitman Rd., </note> <institution> Huntington Station, </institution> <address> NY 11746, 1-800-645-4710.) </address>
Reference-contexts: The standard way to determine the rating of a chess player is to play lots of games. Since playing games is very time consuming, I use a set of benchmark problems designed by I.M. L. Kaufman <ref> [Kau92, Kau93] </ref> to estimate StarTech's performance using the Elo rating system [Elo78]. Kaufman cautions against misuse of his ratings estimator, for example by tuning a program to do well against only the benchmark problems.
Reference: [Kau93] <author> Larry Kaufman. </author> <title> Rate your own computer part II. </title> <journal> Computer Chess Reports, </journal> <volume> 3 (2), </volume> <pages> pages 13-15, 1992-93. </pages>
Reference-contexts: The standard way to determine the rating of a chess player is to play lots of games. Since playing games is very time consuming, I use a set of benchmark problems designed by I.M. L. Kaufman <ref> [Kau92, Kau93] </ref> to estimate StarTech's performance using the Elo rating system [Elo78]. Kaufman cautions against misuse of his ratings estimator, for example by tuning a program to do well against only the benchmark problems.
Reference: [KM75] <author> Donald E. Knuth and Ronald W. Moore. </author> <title> An analysis of alpha-beta pruning. </title> <journal> Artificial Intelligence, </journal> <volume> 6 (4), </volume> <pages> pages 293-326, </pages> <month> Winter </month> <year> 1975. </year>
Reference-contexts: Pearl's Scout terminology takes precedence [Pea80].) Procedure scout is similar to the familiar ff-fi search algorithm which takes paramaters ff and fi used to prune the search <ref> [KM75] </ref>. The Scout algorithm, however, when considering any child that is not the first child, first performs a test of the child to determine if the child is no better a move than the best move seen so far. <p> The third strategy is to serialize Jamboree search slightly. Instead of searching one child serially and then the rest in parallel, as basic Jamboree search does, our variation sometimes searches two children serially. The precise conditions for searching two children serially are that the node be of Knuth-Moore type-2 <ref> [KM75] </ref>, that recursive iterative search of the node had a value greater than the ff parameter of the subtree, and that the search of the first child yielded a score that is less than or equal to the ff parameter.
Reference: [KB82] <author> D. Kopec and I. Bratko. </author> <title> The Bratko-Kopec experiment: a comparison of human and computer performance in chess. </title> <editor> In M. R. B. Clarke, ed., </editor> <booktitle> Advances in Computer Chess 3, </booktitle> <pages> pages 57-72, </pages> <publisher> Pergamon Press, </publisher> <year> 1982. </year> <institution> (Meeting held at the Imperial College of Science and Technology, University of London, </institution> <month> April, </month> <year> 1981.) </year>
Reference-contexts: If we consider the time to solve all 25 problems, however, there are still significant performance gains being made even when moving from a 256-node CM-5 to 512-nodes. Several other chess problem sets have appeared in the literature to test the skill of a chess program. The Bratko-Kopec set <ref> [KB82] </ref>, one of the earliest test sets published for computers, was designed to show the deficiencies of a program rather than to estimate the program's strength.
Reference: [Kus94] <author> Bradley C. Kuszmaul. </author> <title> Synchronized MIMD Computing. </title> <type> Ph.D. thesis, </type> <institution> Massachusetts Institute of Technology, Department of Electrical Engineering and Computer Science, </institution> <month> May </month> <year> 1994. </year> <note> (Available via anonymous FTP from theory.lcs.mit.edu in /pub/bradley/phd.ps.Z.) </note>
Reference-contexts: Still others have proposed or analyzed variations of this style of game tree search [ABD82, MC82, Fis84, Hsu90]. My Ph.D. thesis <ref> [Kus94] </ref> provides a more complete discussion of how Jamboree search is related to other search algorithms. I do not claim that Jamboree search is an entirely novel search algorithm, although some of the details of my algorithm are quite different from the details of related algorithms. <p> It turns out that I have two analytical results, one for best ordered trees and one for worst ordered trees. The complete statement of the theorems and proofs can be found in my Ph.D. thesis <ref> [Kus94] </ref>. Theorem 1 states how Jamboree search behaves on best-ordered trees. A best-ordered tree is one in which it turns out that the first move considered is always the best move, and thus the tests in the jamboree search algorithm always succeed.
Reference: [MC82] <author> T. A. Marsland and M. S. Campbell. </author> <title> Parallel search of strongly ordered game trees. </title> <journal> ACM Computing Surveys, </journal> <volume> 14 (4), </volume> <pages> pages 533-552, </pages> <month> December </month> <year> 1982. </year>
Reference-contexts: This approach to parallel search is quite natural, and variants of it have been used by several other parallel chess programs, such as Cray Blitz [HSN89] and Zugzwang [FMM93]. Still others have proposed or analyzed variations of this style of game tree search <ref> [ABD82, MC82, Fis84, Hsu90] </ref>. My Ph.D. thesis [Kus94] provides a more complete discussion of how Jamboree search is related to other search algorithms.
Reference: [MOS86] <author> T. A. Marsland, M. Olafsson, and J. Schaeffer. </author> <title> Multiprocessor tree-search experiments. </title> <editor> In D. F. Beal, ed., </editor> <booktitle> Advances in Computer Chess 4, </booktitle> <pages> pages 37-51, </pages> <publisher> Pergamon Press, </publisher> <address> Meeting held at Brunel University, London, </address> <month> April, </month> <year> 1984, 1986. </year>
Reference-contexts: The first strategy for improving performance is to perform recursive iterative deepening in order to improve move ordering. StarTech uses its global transposition table to improve move ordering. Most other programs use additional move-ordering mechanisms such as the killer table [GEC67] and the history table <ref> [MOS86] </ref>. StarTech does not use any such additional move-ordering heuristics. Recursive iterative deepening works as follows. When searching a chess position to depth k, the first thing Star-Tech does is to lookup the position in the global transposition table to determine if anything from a previous search has been saved.
Reference: [McA88] <author> David Allen McAllester. </author> <title> Conspiracy numbers for min-max search. </title> <journal> Artificial Intelligence, </journal> <volume> 35, </volume> <pages> pages 287-310, </pages> <year> 1988. </year>
Reference-contexts: For example, H. Berliner's B* search algorithm [Ber79] tries to prove that one of the moves is better with respect to a pessimistic evaluation than any of the other moves with respect to an optimistic evaluation. D. McAllester's Conspiracy search <ref> [McA88] </ref> expands the tree in such a way that to change the value of the root will require changing the values of many of the leaves of the tree. The SSS* algorithm [Sto79] applies branch and bound techniques to game tree search.
Reference: [Pea80] <author> Judea Pearl. </author> <title> Asymptotic properties of minimax trees and game-searching procedures. </title> <journal> Artificial Intelligence, </journal> <volume> 14 (2), </volume> <pages> pages 113-138, </pages> <month> September </month> <year> 1980. </year>
Reference-contexts: I started with a variant on serial ff-fi search, called Scout search, and modified it to be a parallel algorithm. chess researchers refer to the Scout algorithm as PV Search, but it appears that J. Pearl's Scout terminology takes precedence <ref> [Pea80] </ref>.) Procedure scout is similar to the familiar ff-fi search algorithm which takes paramaters ff and fi used to prune the search [KM75]. <p> If the test fails, then scout searches the node twice and has squandered some work. Algorithm scout bets that the tests will succeed often enough to outweigh the extra cost of any nodes that must be searched twice, and empirical evidence <ref> [Pea80] </ref> justifies its dominance as the search algorithm of choice in modern serial chess-playing programs. Jamboree Search The Jamboree algorithm, shown in Figure 2, is a paral-lelized version of the Scout search algorithm.
Reference: [PM83] <author> F. Popowich and T. A. Marsland. Parabelle: </author> <title> Experience with a Parallel Chess Program. </title> <type> Technical Report 83-7, </type> <institution> Computing Science Department, University of Alberta, Edmonton, Canada, </institution> <year> 1983. </year> <month> 14 </month>
Reference-contexts: F. Popowich and T. Marsland concluded that local transposition tables are better than global transposition tables <ref> [PM83] </ref>. Local transposition tables do not incur any message-passing overhead, but local transposition tables have a much lower hit rate than global transposition tables.
Reference: [Sto79] <author> G. C. Stockman. </author> <title> A minimax algorithm better than alpha--beta? Artificial Intelligence, </title> <type> 12 (2), </type> <pages> pages 179-196, </pages> <month> August </month> <year> 1979. </year>
Reference-contexts: D. McAllester's Conspiracy search [McA88] expands the tree in such a way that to change the value of the root will require changing the values of many of the leaves of the tree. The SSS* algorithm <ref> [Sto79] </ref> applies branch and bound techniques to game tree search. These algorithms all require space which is nearly proportional to the run time of the algorithm, but the the constant of proportionality may be small enough to be feasible.
Reference: [Tru92] <author> Tom Truscott. </author> <type> Personal communication. </type> <month> September 23, </month> <year> 1992. </year>
Reference-contexts: Recent experiments performed by D. Dailey on his Socrates program suggest that recursive iterative deepen 11 ing may actually slow down programs that already have good move-ordering heuristics [Dai94]. (Recursive iterative deepening was used in T. Truscott's unpublished checkers program in the early 1980's <ref> [Tru92] </ref>, and was briefly explored for the Hitech program by H. Berliner and his students in the late 1980's [Ber93].) Without recursive iterative deepening, StarTech chooses the right first move 85%-95% of the time. With recursive iterative deepening, a few percent more of the positions are searched in best-first order.
References-found: 26

