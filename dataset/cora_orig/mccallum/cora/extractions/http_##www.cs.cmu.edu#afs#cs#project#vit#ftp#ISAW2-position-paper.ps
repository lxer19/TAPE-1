URL: http://www.cs.cmu.edu/afs/cs/project/vit/ftp/ISAW2-position-paper.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs/project/vit/www/paper_abstracts/ISAW2-position-paper.html
Root-URL: 
Title: design of an architectural description language to be used as part of a software developers
Author: exible componentry. 
Note: When considering the  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Brockschmidt. Inside OLE . Microsoft Press, </author> <year> 1995. </year>
Reference: [2] <author> D. Garlan, R. Allen, and J. Ockerbloom. </author> <title> Exploiting style in architectural design environments, </title> <booktitle> in Proc. ACM SIGSOFT '94: Symp. </booktitle> <institution> Foundations of Software Eng ., Dec. </institution> <year> 1994. </year>
Reference-contexts: Here too the description of such a component needs to capture its envelope of possible behaviors. Several research projects have begun to work toward the two goals mentioned above. Aesop <ref> [2] </ref> allows new element types and architectural styles to be defined as subclasses of existing types and styles stored in an object-oriented database; refinements are made by overriding the methods that govern that type or style.
Reference: [3] <author> M. Jackson. </author> <title> Software requirements and specifications: A lexicon of practice, </title> <booktitle> principles, </booktitle> <publisher> and prejudices . Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: The world is populated with a diversity of software architectures both across and within software systems. This diversity is not a historical accident or a practice to be denigrated: certain architectural styles are simply better suited than others to solve certain problems <ref> [3] </ref>. As long as there is a variety of problems to solve, there will be a variety of architectural styles. To support this diversity, an should allow architects to define their own architectural styles, along with the new types of components and connectors that are a part of that style.
Reference: [4] <author> G. Kiczales. </author> <title> Beyond the black box: Open Implementation, </title> <journal> IEEE Software </journal>
Reference-contexts: Current inadequate to describe architectural styles that have this kind of prescribed envelope of variability. Further, a cousin of the family of systems problem is the problem of describing exible componentry, for example, a component that features an Open Implementation <ref> [4] </ref>. Here too the description of such a component needs to capture its envelope of possible behaviors. Several research projects have begun to work toward the two goals mentioned above.
Reference: [5] <author> M. Moriconi, X. Qian, R. A. Reimenschneider. </author> <title> Correct architecture refinement, </title> <journal> IEEE Trans. on Software Eng 21(4), </journal> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: Aesop [2] allows new element types and architectural styles to be defined as subclasses of existing types and styles stored in an object-oriented database; refinements are made by overriding the methods that govern that type or style. Moriconi et al <ref> [5] </ref> allow user defined types and styles whose emphasis is on provably correct architectural refinement; hence, their type and style definitions require mathematical skills absent in many current practitioners. Neither of these works place an emphasis on system construction. One with this emphasis is UniCon [6].
Reference: [6] <author> M. Shaw, R. DeLine, D. V. Klein, T. L. Ross, D. M. Young, G. Zelesnik. </author> <title> Abstractions for software architecture and tools to support them, </title> <journal> IEEE Trans. on Software Eng 21(4), </journal> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: Moriconi et al [5] allow user defined types and styles whose emphasis is on provably correct architectural refinement; hence, their type and style definitions require mathematical skills absent in many current practitioners. Neither of these works place an emphasis on system construction. One with this emphasis is UniCon <ref> [6] </ref>. However, the current version of UniCon presents a closed set of element types and architectural styles, although we have recently taken steps towards user-defined connectors with the notion of connector experts [7].
Reference: [7] <author> M. Shaw, R. DeLine, G. Zelesnik. </author> <title> Abstractions and implementations for architectural connections, </title> <booktitle> Proc. 3rd Int. Conf. on Configurable Distributed Systems , May 1996. </booktitle>
Reference-contexts: Neither of these works place an emphasis on system construction. One with this emphasis is UniCon [6]. However, the current version of UniCon presents a closed set of element types and architectural styles, although we have recently taken steps towards user-defined connectors with the notion of connector experts <ref> [7] </ref>. Toward User-Defined Element Types and Architectural Styles Robert DeLine Computer Science Department Carnegie Mellon University 5000 Forbes Ave. <p> This expert is made up of a set of code fragments, literals, and table entries that are injected into the interface duty Strict-Filter includes Filter requires (Stream-In player (Stream-Out player closes player Strict-Filter UniCon compilers source code before compilation <ref> [7] </ref>. The UniCon-2 compiler design improves on this, not only by adding component and style experts, but by using encapsulate the expertise.
References-found: 7

