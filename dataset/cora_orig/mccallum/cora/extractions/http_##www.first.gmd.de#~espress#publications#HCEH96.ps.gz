URL: http://www.first.gmd.de/~espress/publications/HCEH96.ps.gz
Refering-URL: http://www.first.gmd.de/~espress/gesamt_public.html
Root-URL: 
Email: e-mail: reiko@cs.tu-berlin.de  e-mail: fconradjeggerjhiemerg@DBresearch-berlin.de  
Phone: 2  
Title: Automatic Integration of Safety Invariants into Z Specifications Extended Abstract  
Author: Reiko Heckel Mirko Conrad Gottfried Egger and Jan-Juan Hiemer 
Address: FR 6-1 Franklinstr. 28/29, D-10587 Berlin, Germany  F3S/K Alt-Moabit 96a, D-10559 Berlin, Germany  
Affiliation: University Berlin, Computer Science Department,  Daimler-Benz AG Research and Technology,  
Pubnum: 1 Technical  
Abstract: This extended abstract describes a mechanism to automatically incorporate safety requirements into operational specifications written in Z. For every individual operation the global (i.e. operation independent) safety invariants are transformed into a predicate which is used to extend the original precondition of the operation. The operation constructed this way shows the same behavior as the original one whenever its post state satisfies the invariant. Otherwise it refuses to do anything. The construction of the precondition can be carried out automatically and a corresponding tool development is in progress.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J. Bowen, V. Stavridou: </author> <title> Safety-Critical Systems, Formal Methods and Standards. </title> <journal> Software Engineering Journal, </journal> <month> July </month> <year> 1995, </year> <pages> pp. 189-209 </pages>
Reference-contexts: Software used in such embedded systems already controls safety-critical parts of the systems. As a way of increasing confidence in the development process of such systems and their software, the use of formal methods becomes more and more important (cf. <ref> [1, 10] </ref>). Furthermore, design, specification, and verification of safety properties have to be integrated into an overall development method and have to be supported by tools for the reason of efficiency.
Reference: 2. <author> I. Claen, H. Ehrig, D.Wolz: </author> <title> Algebraic Specification Techniques and Tools for Software Development The ACT Approach. </title> <booktitle> AMAST Series in Computing Vol. 1, World Scientific, </booktitle> <year> 1993 </year>
Reference-contexts: Therefore, invariants and preconditions should be restricted to propositional expressions over equations, i.e., equations using variables of the state schema combined by the usual connectives ^, _, and :. Then the simplification could be realized by extending the entailment on equations, which is implemented by term rewriting tools like <ref> [2] </ref>, to our propositional expressions. Another possibility for simplification is to use standard algorithms which are implemented in theorem provers like Isabelle [7]. In both cases the question arises, which operations are to be regarded as "simple".
Reference: 3. <author> E.W. Dijkstra: </author> <title> A Discipline of Programming. </title> <publisher> Prentice-Hall, </publisher> <year> 1976 </year>
Reference-contexts: The weakest precondition OP with respect to INV' ensures that this predicate holds after the operation has been applied. The computation of the weakest precondition, well-known from the assertional approach to program verification <ref> [3] </ref>, is therefore applied to Z operation schemas. The basic idea is to consider state variables as stores (as in imperative programming) and the operation as a concurrent assignment, defining the new values of the state variables in terms of their old ones.
Reference: 4. <author> G. Egger: ESPRESS: </author> <title> Ingenieurmaige Entwicklung sicherheitsrelevanter eingebetteter Systeme (in german). </title> <booktitle> Proc. of Statuseminar Softwaretechnologie des BMBF, </booktitle> <pages> pp. 321-336, </pages> <institution> Deutsche Forschungsanstalt fur Luft- und Raumfahrt e.V., </institution> <address> Berlin 1996 </address>
Reference-contexts: Besides, the order of invariants has no effect on the semantics of the final operation. 2.2 Tool Support The implementation of the proposed approach as a part of the tools to be developed in the ESPRESS project <ref> [4] </ref> has begun. The tool is being written in the functional programming language OPAL [9]. It extends the type checker ESZ [5] for Z specifications. The current version uses a very restricted simplification method. A more powerful procedure will be added in the near future.
Reference: 5. <author> W. Grieskamp: </author> <title> User's Guide to Editing, Typesetting and Type-Checking Z Specifications with the ESZ Toolkit, </title> <institution> Technical University Berlin, </institution> <year> 1996, </year> <note> cf. ftp://ftp.cs.tu-berlin.de/pub/local/uebb/esz/* </note>
Reference-contexts: The tool is being written in the functional programming language OPAL [9]. It extends the type checker ESZ <ref> [5] </ref> for Z specifications. The current version uses a very restricted simplification method. A more powerful procedure will be added in the near future.
Reference: 6. <author> R. Heckel, A. Wagner: </author> <title> Ensuring Consistency of Conditional Graph Grammars A Constructive Approach. To appear in: </title> <booktitle> Electronic Notes in Theoretical Computer Science 1 1995. Proc. of SEGRAGRA'95 "Graph Rewriting and Computation", Electronic Notes of TCS Vol.2 1995, </booktitle> <address> http://www.elsevier.nl/locate/entcs/volume2.html </address>
Reference-contexts: Traceability: It should be possible to distinguish in OP INV between those parts originating from OP and those constructed from the invariant INV. The solution we propose is motivated by a verification technique <ref> [6] </ref> for algebraic graph rewriting systems which provide a semantical basis for the specification and analysis of state-oriented systems, including concurrent and distributed ones. In the following section we explain the integration of safety invariants into Z specifications in some more detail and sketch an ongoing implementation of this construction.
Reference: 7. <author> Kolyang, T. Santen, B. Wolff: </author> <title> A Structure Preserving Encoding of Z in Isabelle/HOL. </title> <note> To appear in J. </note> <editor> von Wright, J. Grundy, J. Harrison (Eds.): </editor> <title> Theorem Proving in Higher-Order Logics, </title> <booktitle> Lecture Notes in Computer Science Vol. </booktitle> <volume> 1125, </volume> <publisher> Springer, </publisher> <year> 1996, </year> <pages> pp. 283-298 </pages>
Reference-contexts: Then the simplification could be realized by extending the entailment on equations, which is implemented by term rewriting tools like [2], to our propositional expressions. Another possibility for simplification is to use standard algorithms which are implemented in theorem provers like Isabelle <ref> [7] </ref>. In both cases the question arises, which operations are to be regarded as "simple". In our case, the preconditions resulting from the construction have to be easily understandable for humans.
Reference: 8. <author> N. Nissanke, N. Robinson: </author> <title> Formal Methods in Safety Analysis. </title> <booktitle> In: Proc. 13th International Conference on Computer Safety, Reliability, and Security 1994 (SAFECOMP'94), </booktitle> <pages> pp. 239-248 </pages>
Reference: 9. <author> P. Pepper (Ed.): </author> <title> The Programming Language OPAL. </title> <type> Technical Report 91-10, </type> <institution> Computer Science Department, Technical University Berlin, </institution> <year> 1991, </year> <note> cf. http://uebb.cs.tu-berlin.de/~opal/opal-language.html </note>
Reference-contexts: The tool is being written in the functional programming language OPAL <ref> [9] </ref>. It extends the type checker ESZ [5] for Z specifications. The current version uses a very restricted simplification method. A more powerful procedure will be added in the near future.
Reference: 10. <author> M. Spivey: </author> <title> The Z Notation A Reference Manual. </title> <booktitle> International Series in Computer Science, </booktitle> <publisher> Prentice Hall, </publisher> <year> 1992 </year>
Reference-contexts: Software used in such embedded systems already controls safety-critical parts of the systems. As a way of increasing confidence in the development process of such systems and their software, the use of formal methods becomes more and more important (cf. <ref> [1, 10] </ref>). Furthermore, design, specification, and verification of safety properties have to be integrated into an overall development method and have to be supported by tools for the reason of efficiency. <p> 2.1 Extending the Precondition and Simplifying the Result The extension of the precondition by an invariant is carried out in three steps, the specialization of the invariant to a (part of the) postcondition, the computation of 1 We adopt the conventions for the description of sequential systems in Z (cf. <ref> [10] </ref>) by considering interface variables as state variables (without input=output decoration) because we reference them in invariants. the corresponding weakest precondition, and its simplification (see Figure 1 for an overview).
References-found: 10

