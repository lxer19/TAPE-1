URL: ftp://ftpipr.ira.uka.de/pub/papers/1993/icam93xc.ps.gz
Refering-URL: ftp://ftpipr.ira.uka.de/.public_html/papersna.html
Root-URL: 
Title: Executing Elementary Assembly Operations by a Two-Arm Robot  
Author: X. Cheng Prof. Dr.-Ing. U. Rembold, Prof. Dr.-Ing. R. Dillmann 
Address: Kaiserstr.12, D-7500 Karlsruhe, Germany  
Affiliation: Institute for Real-time Computer Systems and Robotics IPR  University of Karlsruhe,  
Note: International Conference on Advanced Mechatronics August 2-4, 1993, Tokyo, Japan. pp. 396-401  
Abstract: This paper presents a component of the online task-level planning system of the mobile, two-arm robot KAMRO, which is being developed at our Institute. This component generates sequences of explicit robot motions for achieving the goals of elementary assembly operations, and supervises their execution by the real-time robot control system, according to implicitly specified pick-and-place operations scheduled on higher levels of the online planning system. This paper addresses the online path planning of the two-arm manipulator system for both independent tasks and two-arm cooperations. For parallel execution of independent tasks, collision-free paths are planned using a 2D geometric model and are based on a scheduling concept in consideration of the swept regions by the robot arms during their motions. The online path planning for two-arm cooperations for exchanging and regrasping assembly parts incorporates an offline connectivity analysis, avoiding both collisions and kinematic restrictions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Cheng, X.; Kappey, D.; Schloen, J.: </author> <title> Elements of an advanced robot control system for assembly tasks, </title> <booktitle> 5th Int. Conf. on Advanced Robotics (1991) </booktitle>
Reference-contexts: For carrying out these IEOs, sequences of explicit robot motion commands, called Explicit Elementary Operations (EEOs), are generated and their execution by the real-time robot control system is monitored <ref> [1] </ref>: set_gripper (M: Manipulator; d: Distance); grasp (M: Manipulator; d: Distance; f: Force); detach (M: Manipulator; d: Distance); fine_motion (M: Manipulator; v: Target); join (M: Manipulator; v: Target); disjoin (M: Manipulator; v: Target); transfer (M: Manipulator; t: Path). <p> The real-time robot control system is also able to perform sensor-guided fine motions and part mating operations. For monitoring the execution of the planned sequences of EEOs, a concept for managing operation queues using waiting points is applied <ref> [1] </ref>. Operation queues are FIFO memory for EEOs and waiting points. There is one operation queue for each system agent, i.e. the manipulators and the vehicle. A waiting point specifies a condition and will be removed from the operation queue when the specified condition has been satisfied.
Reference: [2] <author> Chochon, H.; Alami, R.: NNS, </author> <title> A knowledge-based online system for an assembly workcell, </title> <booktitle> IEEE Int. Conf. on Robotics and Automation (1986) </booktitle>
Reference-contexts: INTRODUCTION In the domain of autonomous assembly, intelligent control architectures have been proposed <ref> [2, 6, 10] </ref>. They consist of several functional levels, including planning, interpretation, execution and reaction, and incorporating sensor information. From the highest level, abstract assembly task descriptions are transformed stepwise into robot motion commands which are executed at the lowest level.
Reference: [3] <author> Erdmann, M.; Lozano-Perez, T.: </author> <title> On multiple moving obstacles, </title> <booktitle> IEEE Int. Conf. on Robotics and Automation (1986) </booktitle>
Reference-contexts: Local approaches [5, 9] fulfill the real-time requirements very well, but in the general case they can not guarantee that each manipulator will reach its goal because of the problem of local minima. Global approaches <ref> [3, 4] </ref> are based on Configuration/Time-Space. Due to their extremely high complexity, they are not suitable for online operation. Moreover, all of the global approaches assume that the motions of both manipulators are completely known for a period of time and the paths will be planned at once.
Reference: [4] <author> ODonnel, P. A.; Lozano-Perez, T.: </author> <title> Deadlock-free and collision-free coordination of two robot manipulators, </title> <booktitle> IEEE Int. Conf. on Robotics and Automation (1989) </booktitle>
Reference-contexts: Local approaches [5, 9] fulfill the real-time requirements very well, but in the general case they can not guarantee that each manipulator will reach its goal because of the problem of local minima. Global approaches <ref> [3, 4] </ref> are based on Configuration/Time-Space. Due to their extremely high complexity, they are not suitable for online operation. Moreover, all of the global approaches assume that the motions of both manipulators are completely known for a period of time and the paths will be planned at once.
Reference: [5] <author> Freund, E.; Hoyer, H.: </author> <title> Real-time pathfinding in multi-robot system including obstacle avoidance, </title> <journal> The Int. Journal of Robotics Research, </journal> <volume> Vol. 7, No. 1, </volume> <year> 1988 </year>
Reference-contexts: Previous works related to path planning and coordination of multiple manipulators for independent tasks can be classified into local and global approaches. Local approaches <ref> [5, 9] </ref> fulfill the real-time requirements very well, but in the general case they can not guarantee that each manipulator will reach its goal because of the problem of local minima. Global approaches [3, 4] are based on Configuration/Time-Space.
Reference: [6] <author> Hrmann, A.; Rembold, U.: </author> <title> Development of an advanced robot for autonomous assembly, </title> <booktitle> IEEE Int. Conf. on Robotics and Automation (1991) </booktitle>
Reference-contexts: INTRODUCTION In the domain of autonomous assembly, intelligent control architectures have been proposed <ref> [2, 6, 10] </ref>. They consist of several functional levels, including planning, interpretation, execution and reaction, and incorporating sensor information. From the highest level, abstract assembly task descriptions are transformed stepwise into robot motion commands which are executed at the lowest level. <p> The robot control system of KAMRO consists of two main parts: the online task-level planning system and the real-time robot control system which are located in different computer systems connected by a local area network <ref> [6] </ref>. The main function of the online task-level planning system is to interpret an implicit action plan of an assembly task and to generate sequences of explicit robot motion commands which are sent to and carried out by the real-time robot control system [7].
Reference: [7] <author> Hrmann, A.: </author> <title> Online planning of action sequences for a two-arm manipulator system, </title> <booktitle> IEEE Int. Conf. on Robotics and Automation (1992) </booktitle>
Reference-contexts: The main function of the online task-level planning system is to interpret an implicit action plan of an assembly task and to generate sequences of explicit robot motion commands which are sent to and carried out by the real-time robot control system <ref> [7] </ref>. An action plan is a precedence graph, represented in a Condition/Event-Petri net, which describes an assembly task by specifying a set of pick-and place operations and their precedence relations. <p> Fig. 3 Exchanging / regrasping an assembly part using two cooperating manipulators. An algorithm of online scheduling of these two-arm operations is given in <ref> [7] </ref>. For planning explicit robot motions to carry out such implicitly specified two-arm operations, not only the paths of the manipulators, but also the nominal working trajectory must be planned automatically online. A nominal working trajectory defines the trajectory of a work piece during a cooperation task.
Reference: [8] <author> Preparata, F. P.; Shamos, M. I.: </author> <title> Computational geometry, </title> <publisher> Springer Verlag, </publisher> <address> New York, </address> <year> 1985 </year>
Reference-contexts: N = 12. In the case of a single point path, the swept region SR (M , PayLoad, (P)) is calculated using Grahams convex hull algorithm <ref> [8] </ref>, which finds the convex hull polygon for a given set of points, i.e. the support points and the N vertices. <p> In the general case, the swept regions need not be convex polygons. They need not be simple, i.e. the edges of a polygon can intersect with each other. Because we use an intersection test algorithm based on testing edge intersections of two polygons <ref> [8] </ref>, these properties do not effect the result of the intersection test of the swept regions of the manipulators. Planning Collision-Free Paths Suppose the manipulators are set up properly, i.e. their swept regions do not intersect at any point in time. <p> The intersection test for two swept regions, "", is done by using a line segments intersection test algorithm presented in <ref> [8] </ref>.
Reference: [9] <author> Kathib, O.: </author> <title> Real-time obstacle avoidance for manipulators and mobile robots, </title> <journal> The Int. Journal of Robotics Research, </journal> <volume> 5(1) </volume> <pages> 90-98, </pages> <month> Spring </month> <year> 1986 </year>
Reference-contexts: Previous works related to path planning and coordination of multiple manipulators for independent tasks can be classified into local and global approaches. Local approaches <ref> [5, 9] </ref> fulfill the real-time requirements very well, but in the general case they can not guarantee that each manipulator will reach its goal because of the problem of local minima. Global approaches [3, 4] are based on Configuration/Time-Space.
Reference: [10] <author> Kelley, R. B.: </author> <title> Vertical integration for robot assembly cells, </title> <booktitle> IEEE Int. Conf. on Robotics and Automation (1986) </booktitle>
Reference-contexts: INTRODUCTION In the domain of autonomous assembly, intelligent control architectures have been proposed <ref> [2, 6, 10] </ref>. They consist of several functional levels, including planning, interpretation, execution and reaction, and incorporating sensor information. From the highest level, abstract assembly task descriptions are transformed stepwise into robot motion commands which are executed at the lowest level.
References-found: 10

