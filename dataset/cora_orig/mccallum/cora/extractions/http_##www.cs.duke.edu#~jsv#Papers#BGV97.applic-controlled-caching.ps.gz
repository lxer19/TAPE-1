URL: http://www.cs.duke.edu/~jsv/Papers/BGV97.applic-controlled-caching.ps.gz
Refering-URL: http://www.cs.duke.edu/~jsv/Papers/catalog/node55.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Application-Controlled Paging for a Shared Cache  
Author: Rakesh D. Barve Edward F. Grove Jeffrey Scott Vitter 
Note: 3 Support was provided in part by Army Research Office grant  
Address: Durham, NC 27708-0129  
Affiliation: Department of Computer Science Duke University  
Email: Email: efg@cs.duke.edu  
Date: June 1997  
Web: DAAH04-93-G-0076.  
Abstract: 1 An extended abstract of the results in this paper appeared in Proceedings of the 36th Annual Symposium on Foundations of Computer Science, October 1995, 204-213. 2 Support was provided in part by an IBM Graduate Fellowship. Email: rbarve@cs.duke.edu 4 Supported in part by the National Science Foundation under grants CCR-9007851 and CCR-9522047, and by the Air Force Office of Scientific Research grants F49620-92-J-0515 and F49620-94-1-0217. Part of this work was done while the author was visiting Lucent Technologies, Bell Laboratories, Murray Hill, NJ. Email: jsv@cs.duke.edu 
Abstract-found: 1
Intro-found: 1
Reference: [Bel66] <author> A. L. Belady. </author> <title> A study of replacement algorithms for virtual storage computers. </title> <journal> IBM Systems Journal, </journal> <volume> 5 </volume> <pages> 78-101, </pages> <year> 1966. </year>
Reference-contexts: The caching (or paging) problem is to decide which page must be evicted from the cache. The cost to be minimized is the number of page faults incurred over the course of servicing the page requests. Belady <ref> [Bel66] </ref> gives a simple optimum o*ine algorithm for the caching problem; the page chosen for eviction is the one in cache whose next request is furthest in the future.
Reference: [BIRS91] <author> A. Borodin, S. Irani, P. Raghavan, and B. Schieber. </author> <title> Competitive pag </title>
Reference-contexts: Each page in cache and memory belongs to 4 ONLINE ALGORITHM FOR MULTI-APPLICATION CACHING 3 exactly one process. The individual request sequences of the processes may be interleaved in an arbitrary (worst-case) manner. Worst-case measure is often criticized when used for evaluating caching algorithms for individual application request sequences <ref> [BIRS91, KPR92] </ref>, but we feel that the worst-case measure is appropriate for considering a global paging strategy for a cache shared by concurrent application processes that have knowledge of their individual page request sequences.
References-found: 2

