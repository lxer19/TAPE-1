URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/Web/Groups/xavier/www/papers/simmons97a.ps.gz
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/Web/Groups/xavier/www/papers.html
Root-URL: 
Email: josullvng@cs.cmu.edu  
Title: A Layered Architecture for Office Delivery Robots  
Author: Reid Simmons Richard Goodwin, Karen Zita Haigh, Sven Koenig, Joseph O'Sullivan freids, rich, khaigh, skoenig, 
Address: Pittsburgh, PA 15213-3891  
Affiliation: School of Computer Science, Carnegie Mellon University  
Abstract: Office delivery robots have to perform many tasks. They have to determine the order in which to visit offices, plan paths to those offices, follow paths reliably, and avoid static and dynamic obstacles in the process. Reliability and efficiency are key issues in the design of such autonomous robot systems. They must deal reliably with noisy sensors and actuators and with incomplete knowledge of the environment. They must also act efficiently, in real time, to deal with dynamic situations. Our architecture is composed of four abstraction layers: obstacle avoidance, navigation, path planning, and task scheduling. The layers are independent, communicating processes that are always active, processing sensory data and status information to update their decisions and actions. A version of our robot architecture has been in nearly daily use in our building since December 1995. As of July 1996, the robot has traveled more than 75 kilometers in service of over 1800 navigation requests that were specified using our World Wide Web interface. 
Abstract-found: 1
Intro-found: 1
Reference: [Agre & Chapman 1987] <author> Agre, P., and Chapman, D. </author> <year> 1987. </year> <title> Pengi: An implementation of a theory of activity. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI), </booktitle> <pages> 268-272. </pages>
Reference-contexts: For instance, the obstacle avoidance module can keep the robot wandering safely, even without any "desired heading" input from the navigation module. In addition, lower layers are free (within some bounds) to ignore the input received by higher layers, essentially treating higher level plans and commands as "advice" <ref> [Agre & Chapman 1987] </ref>. For example, the local obstacle avoidance module can ignore the current goal heading to steer the robot around obstacles.
Reference: [Arkin 1989] <author> Arkin, R. </author> <year> 1989. </year> <title> Motor schema-based mobile robot navigation. </title> <journal> International Journal of Robotics Research 8(4) </journal> <pages> 92-112. </pages>
Reference-contexts: Without an explicit goal, the robot wanders while avoiding obstacles. If it gets stuck (trapped in local minima), the obstacle avoidance module will signal the other modules with a description of the problem encountered. Previous obstacle avoidance schemes <ref> [Arkin 1989; Borenstein & Koren 1991] </ref> neglected dynamics by assuming the robot could turn instantaneously. While this assumption is reasonable for low-speed travel, for higher speeds one must take current velocities and feasible accelerations into account.
Reference: [Borenstein & Koren 1991] <author> Borenstein, J., and Koren, Y. </author> <year> 1991. </year> <title> The vector field histogram fast obstacle avoidance for mobile robots. </title> <journal> IEEE Transactions on Robotics and Automation 7(3) </journal> <pages> 278-288. </pages>
Reference-contexts: Without an explicit goal, the robot wanders while avoiding obstacles. If it gets stuck (trapped in local minima), the obstacle avoidance module will signal the other modules with a description of the problem encountered. Previous obstacle avoidance schemes <ref> [Arkin 1989; Borenstein & Koren 1991] </ref> neglected dynamics by assuming the robot could turn instantaneously. While this assumption is reasonable for low-speed travel, for higher speeds one must take current velocities and feasible accelerations into account.
Reference: [Brooks 1986] <author> Brooks, R. </author> <year> 1986. </year> <title> A robust layered control system for a mobile robot. </title> <journal> IEEE Journal of Robotics and Automation RA-2(1):14-23. </journal>
Reference-contexts: By "failing cognizantly" [Gat 1992], the lower layers can provide information that enables higher layers to determine how to handle the situation [Simmons 1994a]. In character, our architecture has many similarities to behavior-based approaches advocated in the literature <ref> [Brooks 1986; Connell 1989; Mataric 1992] </ref>. Lower layers are always running, even when higher layers are inactive, or not present. For instance, the obstacle avoidance module can keep the robot wandering safely, even without any "desired heading" input from the navigation module.
Reference: [Cassandra, Kaelbling, & Kurien 1996] <author> Cassandra, A.; Kaelbling, L.; and Kurien, J. </author> <year> 1996. </year> <title> Acting under uncertainty: Discrete Bayesian models for mobile-robot navigation. </title> <booktitle> In Proceedings of the International Conference on Intelligent Robots and Systems (IROS). </booktitle>
Reference-contexts: We currently choose the heading that has the highest total probability mass [Simmons & Koenig 1995], but choosing the heading associated with the most likely location is also a good strategy <ref> [Cassandra, Kaelbling, & Kurien 1996] </ref>. The navigation module is very reactive to unexpected sensor reports, since desired headings are maintained for all possible poses, not just the most likely pose. Thus, if the robot strays from the nominal path, it will automatically execute corrective actions once it realizes its mistake.
Reference: [Cassandra, Kaelbling, & Littman 1994] <author> Cassandra, A.; Kaelbling, L.; and Littman, M. </author> <year> 1994. </year> <title> Acting optimally in partially observable stochastic domains. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI), </booktitle> <pages> 1023-1028. </pages>
Reference: [Connell 1989] <author> Connell, J. </author> <year> 1989. </year> <title> A behavior-based arm controller. </title> <journal> IEEE Journal of Robotics and Automation 5(6) </journal> <pages> 784-791. </pages>
Reference-contexts: By "failing cognizantly" [Gat 1992], the lower layers can provide information that enables higher layers to determine how to handle the situation [Simmons 1994a]. In character, our architecture has many similarities to behavior-based approaches advocated in the literature <ref> [Brooks 1986; Connell 1989; Mataric 1992] </ref>. Lower layers are always running, even when higher layers are inactive, or not present. For instance, the obstacle avoidance module can keep the robot wandering safely, even without any "desired heading" input from the navigation module.
Reference: [Dellafera et al. 1988] <author> Dellafera, A.; Eichin, M.; French, R.; Jedlinsky, D.; Kohl, J.; and Som-merfeld, W. </author> <year> 1988. </year> <title> The Zephyr notification service. </title> <booktitle> In Proceedings of the USENIX Winter Conference, </booktitle> <pages> 213-219. </pages>
Reference-contexts: One such interface uses Zephyr, an asynchronous rapid communication mechanism with secure verification of sender <ref> [Dellafera et al. 1988] </ref>. With this interface, a remote user sends a textual task description to Xavier, such as: % zwrite xavier -m Come to my office at 3pm.
Reference: [Gat 1992] <author> Gat, E. </author> <year> 1992. </year> <title> Integrating planning and reacting in a heterogeneous asynchronous architecture for controlling real-world mobile robots. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI), </booktitle> <pages> 809-815. </pages>
Reference-contexts: For example, the obstacle avoidance module can indicate when it thinks it is stuck in a local minimum. By "failing cognizantly" <ref> [Gat 1992] </ref>, the lower layers can provide information that enables higher layers to determine how to handle the situation [Simmons 1994a]. In character, our architecture has many similarities to behavior-based approaches advocated in the literature [Brooks 1986; Connell 1989; Mataric 1992].
Reference: [Goodwin & Simmons 1992] <author> Goodwin, R., and Sim-mons, R. </author> <year> 1992. </year> <title> Rational handling of multiple goals for mobile robots. </title> <booktitle> In Proceedings of the International Conference on Artificial Intelligence Planning Systems (AIPS), </booktitle> <pages> 86-91. </pages>
Reference-contexts: The simple approach to handle tasks in a first-come, first-served manner leads to inefficiencies and lost opportunities for combined execution of compatible tasks <ref> [Goodwin & Simmons 1992] </ref>. In addition, the task scheduler must also know when actions fail and replan to achieve them since the robot operates in a dynamic world that is not completely known.
Reference: [Haigh & Veloso 1996] <author> Haigh, K., and Veloso, M. </author> <year> 1996. </year> <title> Interleaving planning and robot execution for asynchronous user requests. </title> <booktitle> In Proceedings of the International Conference on Intelligent Robots and Systems (IROS). </booktitle>
Reference-contexts: Navigation is done using Partially Observable Markov Decision Process models (POMDPs) [Simmons & Koenig 1995]. Path Planning uses our decision-theoretic generate, evaluate and refine strategy that is based on ideas from sensitivity analysis [Koenig, Goodwin, & Simmons 1996]. Task scheduling is performed using our symbolic planning architecture <ref> [Haigh & Veloso 1996; 1997] </ref>. Interpro-cess communication and synchronization is provided by our Task Control Architecture (TCA) [Simmons 1994b]. The user interface uses both the World Wide Web and Zephyr. We illustrate the modules of our navigation architecture using a typical delivery scenario. <p> The task scheduler processes incoming navigation requests, prioritizes them, and identifies when different navigation requests can be achieved opportunistically. It is able to temporarily suspend lower priority tasks, resuming them when the opportunity arises, and to successfully interleave compatible requests <ref> [Haigh & Veloso 1996] </ref>. The task scheduler can also monitor the execution of the requests and compensate for failures [Haigh & Veloso 1997].
Reference: [Haigh & Veloso 1997] <author> Haigh, K., and Veloso, M. </author> <year> 1997. </year> <title> High-level planning and low-level execution: Towards a complete robotic agent. </title> <booktitle> In Proceedings of the International Conference on Autonomous Agents (AA). </booktitle>
Reference-contexts: It is able to temporarily suspend lower priority tasks, resuming them when the opportunity arises, and to successfully interleave compatible requests [Haigh & Veloso 1996]. The task scheduler can also monitor the execution of the requests and compensate for failures <ref> [Haigh & Veloso 1997] </ref>. By abstracting away the details of how each request is achieved (e.g. which path the robot takes to a specified goal location), the task scheduler can more fully address issues arising from multiple interacting tasks, such as efficiency, resource contention, and reliability.
Reference: [Hills & Johnson 1996] <author> Hills, A., and Johnson, D. </author> <year> 1996. </year> <title> A wireless data network infrastructure at Carnegie Mellon University. </title> <journal> IEEE Personal Communications 3(1) </journal> <pages> 56-63. </pages>
Reference-contexts: Control, perception, and planning are carried out on three on-board 486 computers. The computers are connected to each other via thin-wire Ethernet and to the outside world via a Wavelan wireless Ethernet system <ref> [Hills & Johnson 1996] </ref>. Section 2 presents an overview of our architecture and a scenario that illustrates how the various parts of the architecture work. Section 3 discusses each layer in de tail, including its functionality and its interface to the other layers.
Reference: [Koenig & Simmons 1996] <author> Koenig, S., and Simmons, R. </author> <year> 1996. </year> <title> Passive distance learning for robot navigation. </title> <booktitle> In Proceedings of the International Conference on Machine Learning (ICML), </booktitle> <pages> 266-274. </pages> <note> [Koenig, Goodwin, & Simmons 1996] Koenig, </note> <author> S.; Goodwin, R.; and Simmons, R. </author> <year> 1996. </year> <title> Robot navigation with Markov models: A framework for path planning and learning with limited compu-tational resources. </title> <editor> In Dorst, L.; van Lambalgen, M.; and Voorbraak, R., eds., </editor> <booktitle> Reasoning with Uncertainty in Robotics, volume 1093 of Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer. </publisher> <pages> 322-337. </pages>
Reference-contexts: While algorithms that explicitly deal with uncertainty tend to be more complex, they have great advantage in their ability to produce reliable behavior. (Although not described in this paper, our architecture also incorporates learning, both on a low level <ref> [Koenig & Simmons 1996; O'Sullivan, Mitchell, & Thrun 1996] </ref> and high level, to further increase component reliability.) Layering increases reliability Layered systems can be more reliable than the sum of their parts, since lower level components can deal with problems abstracted away at higher layers, while higher level components can try
Reference: [Lovejoy 1991] <author> Lovejoy, W. </author> <year> 1991. </year> <title> A survey of algorithmic methods for partially observed Markov decision processes. </title> <journal> Annals of Operations Research 28(1) </journal> <pages> 47-65. </pages>
Reference-contexts: At present, however, it is infeasible to determine optimal POMDP solutions given our real-time constraints and the size of our state spaces (over 3000 states for one floor of our building) <ref> [Cassandra, Kael-bling, & Littman 1994; Lovejoy 1991] </ref>. Instead, our planner generates a nominal path to the goal location. Paths are generated using a modified A* search algorithm that creates a sequence of paths from shortest to longest.
Reference: [Mataric 1992] <author> Mataric, M. </author> <year> 1992. </year> <title> Integration of representation into goal-driven behavior-based robots. </title> <journal> IEEE Transactions on Robotics and Automation 8(3) </journal> <pages> 304-312. </pages>
Reference-contexts: By "failing cognizantly" [Gat 1992], the lower layers can provide information that enables higher layers to determine how to handle the situation [Simmons 1994a]. In character, our architecture has many similarities to behavior-based approaches advocated in the literature <ref> [Brooks 1986; Connell 1989; Mataric 1992] </ref>. Lower layers are always running, even when higher layers are inactive, or not present. For instance, the obstacle avoidance module can keep the robot wandering safely, even without any "desired heading" input from the navigation module.
Reference: [Moravec 1988] <author> Moravec, H. </author> <year> 1988. </year> <title> Sensor fusion in certainty grids for mobile robots. </title> <journal> AI Magazine 9(2) </journal> <pages> 61-74. </pages>
Reference-contexts: The virtual movements abstract away low level control aspects, such as circumnavigating obstacles, by reporting the straight-line distance in the desired heading. Similarly, an evidence grid, which integrates raw sonar data over time <ref> [Moravec 1988] </ref>, is used to derive virtual sensors that report on the environment. For example, we model three sensors (a front, left, and right sensor) that report features such as walls and openings of various sizes (small, medium, and large).
Reference: [Nourbakhsh et al. 1993] <author> Nourbakhsh, I.; Morse, S.; Becker, C.; Balabanovic, M.; Gat, E.; Simmons, R.; Goodridge, S.; Potlapalli, H.; Hinkle, D.; Jung, K.; and Vactor, D. V. </author> <year> 1993. </year> <title> The winning robots from the 1993 robot competition. </title> <journal> AI Magazine 14(4) </journal> <pages> 51-62. </pages>
Reference: [O'Sullivan & Haigh 1994] <author> O'Sullivan, J., and Haigh, K. </author> <year> 1994. </year> <note> Xavier Manual (Version 0.2). </note> <institution> School of Computer Science, Carnegie Mellon University, Pittsburgh (Pennsylvania). </institution> <note> Unpublished Internal Manual. [O'Sullivan, Mitchell, & Thrun 1996] O'Sullivan, </note> <author> J.; Mitchell, T.; and Thrun, S. </author> <year> 1996. </year> <title> Explanation based learning for mobile robot perception. </title> <editor> In Ikeuchi, K., and Veloso, M., eds., </editor> <title> Symbolic Visual Learning. </title> <publisher> Oxford University Press. </publisher>
Reference-contexts: The robot's travel speed is currently limited only by the cycle time of its sonar sensors, and tasks fail mainly due to problems with the wireless network at CMU both problems are unrelated to the robot architecture. Xavier, the robot used in these experiments <ref> [Nour-bakhsh et al. 1993; O'Sullivan & Haigh 1994] </ref>, is built on top of a 24 inch diameter RWI B24 base, which is a four-wheeled synchro-drive mechanism that allows for independent control of the translational and rotational velocities (Figure 1).
Reference: [Simmons & Koenig 1995] <author> Simmons, R., and Koenig, S. </author> <year> 1995. </year> <title> Probabilistic robot navigation in partially observable environments. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <pages> 1080-1087. </pages>
Reference-contexts: While this division of functionality is certainly not novel, each module offers novel approaches with solid theoretical foundations. Obstacle avoidance is performed by our Curvature-Velocity Method (CVM) [Simmons 1996]. Navigation is done using Partially Observable Markov Decision Process models (POMDPs) <ref> [Simmons & Koenig 1995] </ref>. Path Planning uses our decision-theoretic generate, evaluate and refine strategy that is based on ideas from sensitivity analysis [Koenig, Goodwin, & Simmons 1996]. Task scheduling is performed using our symbolic planning architecture [Haigh & Veloso 1996; 1997]. <p> Whenever the navigation module updates the probability distribution, it determines which heading is most likely to lead to the goal, and passes that information to the obstacle avoidance module. We currently choose the heading that has the highest total probability mass <ref> [Simmons & Koenig 1995] </ref>, but choosing the heading associated with the most likely location is also a good strategy [Cassandra, Kaelbling, & Kurien 1996]. The navigation module is very reactive to unexpected sensor reports, since desired headings are maintained for all possible poses, not just the most likely pose.
Reference: [Simmons 1994a] <author> Simmons, R. </author> <year> 1994a. </year> <title> Becoming increasingly reliable. </title> <booktitle> In Proceedings of the International Conference on Artificial Intelligence Planning Systems (AIPS), </booktitle> <pages> 152-157. </pages>
Reference-contexts: For example, the obstacle avoidance module can indicate when it thinks it is stuck in a local minimum. By "failing cognizantly" [Gat 1992], the lower layers can provide information that enables higher layers to determine how to handle the situation <ref> [Simmons 1994a] </ref>. In character, our architecture has many similarities to behavior-based approaches advocated in the literature [Brooks 1986; Connell 1989; Mataric 1992]. Lower layers are always running, even when higher layers are inactive, or not present.
Reference: [Simmons 1994b] <author> Simmons, R. </author> <year> 1994b. </year> <title> Structured control for autonomous robots. </title> <journal> IEEE Transactions on Robotics and Automation 10(1) </journal> <pages> 34-43. </pages>
Reference-contexts: Path Planning uses our decision-theoretic generate, evaluate and refine strategy that is based on ideas from sensitivity analysis [Koenig, Goodwin, & Simmons 1996]. Task scheduling is performed using our symbolic planning architecture [Haigh & Veloso 1996; 1997]. Interpro-cess communication and synchronization is provided by our Task Control Architecture (TCA) <ref> [Simmons 1994b] </ref>. The user interface uses both the World Wide Web and Zephyr. We illustrate the modules of our navigation architecture using a typical delivery scenario. The user interface module allows users, such as secretaries, to enter delivery requests (including desired delivery times and priorities). <p> The processes are integrated using the Task Control Architecture (TCA) <ref> [Simmons 1994b] </ref>, a general-purpose framework for task-level control, by which we mean the coordination of planning, sensing and execution to achieve high level goals. TCA provides message passing facilities and facilities to support task decomposition, task sequencing, execution monitoring, and exception handling.
Reference: [Simmons 1996] <author> Simmons, R. </author> <year> 1996. </year> <title> The curvature-velocity method for local obstacle avoidance. </title> <booktitle> In Proceedings of the International Conference on Robotics and Automation (ICRA), </booktitle> <pages> 3375-3382. </pages>
Reference-contexts: While this division of functionality is certainly not novel, each module offers novel approaches with solid theoretical foundations. Obstacle avoidance is performed by our Curvature-Velocity Method (CVM) <ref> [Simmons 1996] </ref>. Navigation is done using Partially Observable Markov Decision Process models (POMDPs) [Simmons & Koenig 1995]. Path Planning uses our decision-theoretic generate, evaluate and refine strategy that is based on ideas from sensitivity analysis [Koenig, Goodwin, & Simmons 1996]. <p> Previous obstacle avoidance schemes [Arkin 1989; Borenstein & Koren 1991] neglected dynamics by assuming the robot could turn instantaneously. While this assumption is reasonable for low-speed travel, for higher speeds one must take current velocities and feasible accelerations into account. Our curvature-velocity method (CVM) <ref> [Simmons 1996] </ref> poses the obstacle avoidance problem as one of constrained optimization in the velocity space of the robot. The velocity space is the space of all feasible translational and rotational velocities of the robot. Constraints are added to this space that limit the allowable velocities that can be commanded.
Reference: [Veloso et al. 1995] <author> Veloso, M.; Carbonell, J.; Perez, M.; Borrajo, D.; Fink, E.; and Blythe, J. </author> <year> 1995. </year> <title> Integrating planning and learning: The prodigy architecture. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence 7(1) </journal> <pages> 81-120. </pages>
Reference-contexts: The task scheduling module is based on prodigy4.1 <ref> [Veloso et al. 1995] </ref>. Prodigy is a domain-independent nonlinear problem solver that uses means-ends analysis and backward chaining to reason about multiple goals and multiple alternatives of achieving them. It has been extended to support real-world execution of its symbolic actions.
References-found: 24

