URL: http://www.cse.psu.edu/~furer/Papers/Duh.ps
Refering-URL: http://www.cse.psu.edu/~furer/Papers/bib.html
Root-URL: http://www.cse.psu.edu
Email: Email address :duh,furer@cse.psu.edu  
Title: Approximation of k-Set Cover by Semi-Local Optimization  
Author: Rong-chii Duh, Martin Furer 
Note: 289  
Address: Park, PA16802  
Affiliation: Dept. of Computer Science and Engineering Pennsylvania State University University  
Abstract: We define a powerful new approximation technique called semi-local optimization. It provides very natural heuristics that are distinctly more powerful than those based on local optimization. With an appropriate metric, semi-local optimization can still be viewed as a local optimization, but it has the advantage of making global changes to an approximate solution. Semi-local optimization generalizes recent heuristics of Halldorsson for 3-Set Cover, Color Saving, and k-Set Cover. Greatly improved performance ratios of 4=3 for 3-Set Cover and 6=5 for Color Saving in graphs without independent sets of size 4 are obtained and shown to be the best possible with semi-local optimization. Also, based on the result for 3-Set Cover and a restricted greedy phase for big sets, we can improve the performance ratio for k-Set Cover to H k 1=2. In Color Saving, when larger independent sets exist, we can improve the performance ratio to 360 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Berman and M. F urer, </author> <title> Approximating maximum independent set in bounded degree graphs, </title> <booktitle> Proc. of the Fifth ACM-SIAM Symp. on Discrete Algorithms, SODA, </booktitle> <year> 1994, </year> <pages> pp. 365371. </pages>
Reference-contexts: Then semi-local improvements are done as long as possible. To investigate the performance of an approximation algorithm, we apply the Berman-Furer <ref> [1] </ref> comparison method. This means that for the purpose of analysis, we consider a graph that compares the solution chosen by the algorithm with some optimal solution. It does not matter, that we don't actually know an optimal solution in the sense that the algorithm does not find it.
Reference: [2] <author> V. Chvatal, </author> <title> A greedy heuristic for the set-covering problem, </title> <journal> Mathematics Of Operations Research (1979), </journal> <volume> no. 3, </volume> <pages> 233235. </pages>
Reference-contexts: Proof : We want to minimize the number of chosen sets covering the universe. Therefore we charge a cost of 1 for each set chosen by the algorithm. The cost is uniformly distributed to the elements of a chosen set. <ref> [2, 11, 14] </ref> We consider any fixed k-set S from an optimal solution B. If this optimal solution also contains k 0 -sets for some k 0 &lt; k, then the same investigation can be carried out with an even better result.
Reference: [3] <author> P. Crescenzi and V. Kann, </author> <title> A compendium of NP optimization problems, </title> <year> 1995. </year>
Reference-contexts: For k = 2, k-Set Cover can be solved in polynomial time by matching techniques. For k 3, k-Set Cover problem remains NP-complete [12] and is MAX SNP-hard fl Research supported in part by NSF Grant CCR-9218309. <ref> [3, 13, 15] </ref>. And the main technique for k-Set Cover is the greedy algorithm starting with a maximal independent set of size k (we will call them k-sets) and successively adding smaller sets [11]. This results in a performance ratio of H k = ln k +fi (1).
Reference: [4] <author> M. Demange, P. Grisoni, and V. P. Paschos, </author> <title> Approximation results for the minimum graph coloring problem, </title> <note> Information Processing Letters 50 (1994), </note> <year> 1923. </year>
Reference-contexts: Therefore, the total virtual cost for this fixed 4-set will be 1 4 + 4 12 = H 4 1 4 Color Saving Color Saving is the problem of coloring a graph with a minimal number of colors using the complementary objective function <ref> [4, 9, 7, 8] </ref>. Here, it is assumed that we have n colors available to color a graph with n vertices and we count how many colors are not used. Hence, the objective function is n minus the number of colors used. <p> In terms of the monochromatic sets A j of size j, the objective function is n X (j 1)a j Halldorsson [8] has recently established a performance ratio of 4=3 for Color Saving on graphs, improving previous results with ratios 2 <ref> [4] </ref>, 3=2 [9] and 7=5 [7]. Theorem 4.1 The semi-local (2; 1)-optimization algorithm produces a solution to the Color Saving problem with performance ratio 6=5 for graphs with maximum independent sets of size 3. Proof : We can easily reduce the Color Saving problem to the 3-Set Cover problem.
Reference: [5] <author> U. Feige, </author> <title> A threshold of ln n for approximating set cover, </title> <booktitle> Proc. of the Twenty-Eighth Annual ACM Symposium on Theory of Computing, STOC, </booktitle> <year> 1996, </year> <pages> pp. 312318. </pages>
Reference-contexts: This results in a performance ratio of H k = ln k +fi (1). A new hardness result of Feige <ref> [5] </ref> shows that Set Cover is not approximable within (1*) ln n for any fixed * &gt; 0 unless NP DTIME (n log log n ), where n = jU j.
Reference: [6] <author> O. Goldschmidt, D. S. Hochbaum, and G. Yu, </author> <title> A modified greedy heuristic for the set covering problem with improved worst case bound, </title> <note> Information Processing Letters 48 (1993), 305310. </note>
Reference-contexts: For 3-Set Cover, the traditional method besides linear programming techniques (fractional covers) [14] is local approximation. The performance ratios obtained are 11=6 [11, 14], 10=6 <ref> [6] </ref>, 11/7 [7] and 7=5 [8]. The last result actually goes beyond pure local optimization by allowing some special global steps involving augmenting paths and lassos, as well as some steps (lassos and fat singletons) not improving the objective function but showing the preference of the approximate solution. <p> For semi-local improvements, we observe that once the sets of size 3 have been selected for a partial cover, the task of covering the remainder by 2-sets and 1-sets can be done optimally in polynomial time by computing a maximum matching <ref> [6] </ref>. The vertices are the elements of U still to cover and the edges are the admissible 2-sets. The 2-sets corresponding to the maximum matching edges and the 1-sets corresponding to the vertices not covered by the maximum matching edges form a optimum covering of the 2-Set Cover.
Reference: [7] <author> M. M. Halld orsson, </author> <title> Approximating discrete collections via local improvements, </title> <booktitle> Proc. of the Sixth ACM-SIAM Symp. on Discrete Algorithms, SODA, </booktitle> <year> 1995, </year> <pages> pp. </pages> <month> 160 169. </month> <title> [8] , Approximating k-set cover and complementary graph coloring, </title> <booktitle> Proc. of the 5th IPCO Conf. on Integer Programming and Comb. </booktitle> <publisher> Opt., </publisher> <month> June </month> <year> 1996. </year>
Reference-contexts: For 3-Set Cover, the traditional method besides linear programming techniques (fractional covers) [14] is local approximation. The performance ratios obtained are 11=6 [11, 14], 10=6 [6], 11/7 <ref> [7] </ref> and 7=5 [8]. The last result actually goes beyond pure local optimization by allowing some special global steps involving augmenting paths and lassos, as well as some steps (lassos and fat singletons) not improving the objective function but showing the preference of the approximate solution. <p> Therefore, the total virtual cost for this fixed 4-set will be 1 4 + 4 12 = H 4 1 4 Color Saving Color Saving is the problem of coloring a graph with a minimal number of colors using the complementary objective function <ref> [4, 9, 7, 8] </ref>. Here, it is assumed that we have n colors available to color a graph with n vertices and we count how many colors are not used. Hence, the objective function is n minus the number of colors used. <p> In terms of the monochromatic sets A j of size j, the objective function is n X (j 1)a j Halldorsson [8] has recently established a performance ratio of 4=3 for Color Saving on graphs, improving previous results with ratios 2 [4], 3=2 [9] and 7=5 <ref> [7] </ref>. Theorem 4.1 The semi-local (2; 1)-optimization algorithm produces a solution to the Color Saving problem with performance ratio 6=5 for graphs with maximum independent sets of size 3. Proof : We can easily reduce the Color Saving problem to the 3-Set Cover problem.
Reference: [9] <author> R. Hassin and S. Lahav, </author> <title> Maximizing the number of unused colors in the vertex coloring problem, </title> <note> Information Processing Letters 52 (1994), 8790. </note>
Reference-contexts: Therefore, the total virtual cost for this fixed 4-set will be 1 4 + 4 12 = H 4 1 4 Color Saving Color Saving is the problem of coloring a graph with a minimal number of colors using the complementary objective function <ref> [4, 9, 7, 8] </ref>. Here, it is assumed that we have n colors available to color a graph with n vertices and we count how many colors are not used. Hence, the objective function is n minus the number of colors used. <p> In terms of the monochromatic sets A j of size j, the objective function is n X (j 1)a j Halldorsson [8] has recently established a performance ratio of 4=3 for Color Saving on graphs, improving previous results with ratios 2 [4], 3=2 <ref> [9] </ref> and 7=5 [7]. Theorem 4.1 The semi-local (2; 1)-optimization algorithm produces a solution to the Color Saving problem with performance ratio 6=5 for graphs with maximum independent sets of size 3. Proof : We can easily reduce the Color Saving problem to the 3-Set Cover problem.
Reference: [10] <author> C. A. J. Hurkens and A. Schrijver, </author> <title> On the size of systems of sets every t of which have an sdr, with an application to the worst-case ratio of heuristics for packing problems, </title> <journal> SIAM J. Disc. Math. </journal> <volume> 2 (1989), </volume> <pages> 6872. </pages>
Reference-contexts: For larger s; t, we can still base on the counterexamples for set packing <ref> [10] </ref> to construct our lower bound examples, our constructions are based on regular graphs with large girths. The comparison graph of our counterexample for 3-Set Cover is constructed as follows. It has two parts. The first part starts with a d-regular graph G of a given girth g.
Reference: [11] <author> D. S. Johnson, </author> <title> Approximation algorithms for combinatorial problems, </title> <journal> Journal Comput. Syst. Sci. </journal> <volume> 9 (1974), </volume> <pages> 256278. </pages>
Reference-contexts: And the main technique for k-Set Cover is the greedy algorithm starting with a maximal independent set of size k (we will call them k-sets) and successively adding smaller sets <ref> [11] </ref>. This results in a performance ratio of H k = ln k +fi (1). <p> For 3-Set Cover, the traditional method besides linear programming techniques (fractional covers) [14] is local approximation. The performance ratios obtained are 11=6 <ref> [11, 14] </ref>, 10=6 [6], 11/7 [7] and 7=5 [8]. <p> Proof : We want to minimize the number of chosen sets covering the universe. Therefore we charge a cost of 1 for each set chosen by the algorithm. The cost is uniformly distributed to the elements of a chosen set. <ref> [2, 11, 14] </ref> We consider any fixed k-set S from an optimal solution B. If this optimal solution also contains k 0 -sets for some k 0 &lt; k, then the same investigation can be carried out with an even better result.

Reference: [13] <author> Sanjeev Khanna, Rajeev Motwani, Madhu Sudan, and Umesh Vazirani, </author> <title> On syntactic versus computational views of approximability, </title> <booktitle> Proceedings of the 35th An nual Symposium on Foundations of Computer Science, </booktitle> <year> 1994, </year> <pages> pp. 819830. </pages>
Reference-contexts: For k = 2, k-Set Cover can be solved in polynomial time by matching techniques. For k 3, k-Set Cover problem remains NP-complete [12] and is MAX SNP-hard fl Research supported in part by NSF Grant CCR-9218309. <ref> [3, 13, 15] </ref>. And the main technique for k-Set Cover is the greedy algorithm starting with a maximal independent set of size k (we will call them k-sets) and successively adding smaller sets [11]. This results in a performance ratio of H k = ln k +fi (1). <p> The global steps of Halldorsson are just some special cases of our semi-local improvements. The use of alternative objective functions (or weight function in local improvement scheme) has been investigated before in a more general setting by <ref> [13] </ref>. In our semi-local optimizations we may choose an alternative objective function to match our intentional preference. Semi-local optimization can easily be explained in the context of 3-Set Cover.
Reference: [14] <author> L. Lovasz, </author> <title> On the ratio of optimal integral and frac tional covers, </title> <note> Discrete Mathematics (1975), 383390. </note>
Reference-contexts: This suggests that a drastic improvement in this performance ratio is very unlikely, but additive constant improvements are possible by an improved handling of the base case k = 3 [8]. For 3-Set Cover, the traditional method besides linear programming techniques (fractional covers) <ref> [14] </ref> is local approximation. The performance ratios obtained are 11=6 [11, 14], 10=6 [6], 11/7 [7] and 7=5 [8]. <p> For 3-Set Cover, the traditional method besides linear programming techniques (fractional covers) [14] is local approximation. The performance ratios obtained are 11=6 <ref> [11, 14] </ref>, 10=6 [6], 11/7 [7] and 7=5 [8]. <p> Proof : We want to minimize the number of chosen sets covering the universe. Therefore we charge a cost of 1 for each set chosen by the algorithm. The cost is uniformly distributed to the elements of a chosen set. <ref> [2, 11, 14] </ref> We consider any fixed k-set S from an optimal solution B. If this optimal solution also contains k 0 -sets for some k 0 &lt; k, then the same investigation can be carried out with an even better result.

References-found: 12

