URL: http://www.cs.bu.edu/techreports/95-005-scc-dc.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: (best@cs.bu.edu)  (sb@cs.bu.edu)  
Title: Value-cognizant Speculative Concurrency Control  
Author: Azer Bestavros Spyridon Braoudakis 
Date: February 20, 1995  
Address: Boston, MA 02215  
Affiliation: Computer Science Department Boston University  
Abstract: A problem with Speculative Concurrency Control algorithms and other common concur- rency control schemes using forward validation is that committing a transaction as soon as it finishes validating, may result in a value loss to the system. Haritsa showed that by making a lower priority transaction wait after it is validated, the number of transactions meeting their deadlines is increased, which may result in a higher value-added to the system. SCC-based protocols can benefit from the introduction of such delays by giving optimistic shadows with high value-added to the system more time to execute and commit instead of being aborted in favor of other validating transactions, whose value-added to the system is lower. In this paper we present and evaluate an extension to SCC algorithms that allows for commit deferments. fl This work has been partially supported by NSF (grant CCR-9308344).
Abstract-found: 1
Intro-found: 1
Reference: [Abbo88] <author> Robert Abbott and Hector Garcia-Molina. </author> <title> "Scheduling real-time transactions: A performance evalu-ation." </title> <booktitle> In Prooceedings of the 14th International Conference on Very Large Data Bases, </booktitle> <address> Los Angeles, Ca, </address> <year> 1988. </year>
Reference-contexts: Real-time concurrency control schemes considered in the literature could be viewed as extensions of either PCC-based or OCC-based protocols. In particular, transactions are assigned priorities that reflect the urgency of their timing constraints. These priorities are used in conjunction with PCC-based techniques <ref> [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] </ref> to make it possible for more urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used in conjunction with OCC-based techniques [Kort90, Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] to favor more urgent transactions when conflicting, less urgent <p> In particular, we evaluate the performance of the following protocols: 2PL with Priority Abort (2PL-PA) <ref> [Abbo88] </ref> as a representative of PCC-based protocols, OCC-BC [Hari90b] and WAIT-50 [Hari90a] as representatives of OCC-based protocols, and SCC-2S and SCC-VW as representatives of SCC-based protocols. The RTDBS model that we used in our experiments consists of a multiprocessor DBMS operating on disk resident data.
Reference: [Agra87] <author> R. Agrawal, M. Carey, and M. Linvy. </author> <title> "Concurency control performance modeling: Alternatives and implications." </title> <journal> ACM Transaction on Database Systems, </journal> <volume> 12(4), </volume> <month> December </month> <year> 1987. </year>
Reference-contexts: Optimistic Concurrency Control (OCC) protocols [Boks87, Kung81] detect conflicts at transaction commit time and resolve them using rollbacks. For a conventional DataBase Management System (DBMS) with limited resources, performance studies of concurrency control methods (e.g. <ref> [Agra87] </ref>) have concluded that PCC locking protocols perform better than OCC techniques. The main reason for this good performance is that PCC's blocking-based conflict resolution policies result in resource conservation, whereas OCC's restart-based conflict resolution policies waste more resources. <p> Real-time concurrency control schemes considered in the literature could be viewed as extensions of either PCC-based or OCC-based protocols. In particular, transactions are assigned priorities that reflect the urgency of their timing constraints. These priorities are used in conjunction with PCC-based techniques <ref> [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] </ref> to make it possible for more urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used in conjunction with OCC-based techniques [Kort90, Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] to favor more urgent transactions when conflicting, less urgent
Reference: [Agra92] <author> D. Agrawal, A. El Abbadi, and R. Jeffers. </author> <title> "Using delayed commitment in locking protocols for realtime databases." </title> <booktitle> In Proceedings of the 1992 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> San Diego, Ca, </address> <year> 1992. </year>
Reference-contexts: Our approach is similar 5 The notion of transaction value as an integral part of a transaction's priority was not used in that study. 10 (a) (b) to those proposed in <ref> [Agra92, Hari90a, Son92] </ref>. Whenever a transaction shadow T o u (executing on behalf of transaction T u ) finishes its execution, we evaluate if it is advantageous to defer T o u 's commitment for a later point in time.
Reference: [Best92] <author> Azer Bestavros. </author> <title> "Speculative Concurrency Control: A position statement." </title> <type> Technical Report TR92-016, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: In a recent study <ref> [Best92] </ref>, we proposed a categorically different approach to concurrency control that combines the advantages of both OCC and PCC protocols while avoiding their disadvantages. <p> A transaction is aborted immediately if any of its conflicts with other transactions in the system becomes a materialized consistency threat. This is illustrated in figure 1 (b). (a) Under basic OCC (b) Under OCC-BC The SCC approach proposed in <ref> [Best92] </ref> goes one step further in utilizing information about conflicts. Instead of waiting for a potential consistency threat to materialize and then taking a corrective measure, an 2 SCC algorithm uses additional (redundant) resources to start on speculative corrective measures as soon as the conflict in question develops.
Reference: [Best94] <author> Azer Bestavros and Spyridon Braoudakis. </author> <title> "Timeliness via speculation for real-time databases." </title> <booktitle> In Proceedings of RTSS'94: The 14 th IEEE Real-Time System Symposium, </booktitle> <address> San Juan, Puerto Rico, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: SCC protocols are particularly suitable for RTDBS because they reduce the negative impact of blockages and rollbacks, which are characteristics of PCC and OCC techniques. In our previous SCC studies, we did not make any use of transaction deadline or criticalness information. Nevertheless, our performance studies <ref> [Best94] </ref> demonstrated the superiority of SCC-based protocols to OCC-based and PCC- based real-time concurrency control protocols, which use such information. 1 In this paper, we argue that SCC protocols provide for a very natural (and elegant) way of incorporat-ing transaction deadline and criticalness information into concurrency control for RTDBS. <p> Every extra hazard that develops after this limit is reached will be accounted for only suboptimally 3 (since no such speculative shadow will be available). The selection of the conflicts to be accounted for by speculative shadows is an interesting problem with many possible solutions. In <ref> [Best94] </ref> we have adopted a particular solution that requires the speculative shadows of SCC-kS to account for the first l k 1 conflicts (whether read-after-write or write-after-read) encountered by a transaction.
Reference: [Biya88] <author> Sara Biyabani, John Stankovic, and Krithi Ramamritham. </author> <title> "The integration of deadline and criti-calness in hard real-time scheduling." </title> <booktitle> In Prooceedings of the 9th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1988. </year>
Reference-contexts: For such systems the attention shifts to maximizing the value-added to the system by the transactions' commitment. Minimizing tardiness and the number of missed deadlines become of secondary importance. Notice that a transaction's value and its deadline are two orthogonal properties <ref> [Biya88, Huan89] </ref>. The fact that a transaction has a tight deadline does not in any way imply that it has a high value, nor does the fact that it has a loose deadline imply that it has a low value.
Reference: [Boks87] <author> C. Boksenbaum, M. Cart, J. Ferrie, and J. Francois. </author> <title> "Concurrent certifications by intervals of timestamps in distributed database systems." </title> <journal> IEEE Transactions on Software Engineering, </journal> <pages> pages 409-419, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Various concurrency control algorithms differ in the time when conflicts are detected, and in the way they are resolved. Pessimistic Concurrency Control (PCC) protocols [Eswa76, Gray76] detect conflicts as soon as they occur and resolve them using blocking. Optimistic Concurrency Control (OCC) protocols <ref> [Boks87, Kung81] </ref> detect conflicts at transaction commit time and resolve them using rollbacks. For a conventional DataBase Management System (DBMS) with limited resources, performance studies of concurrency control methods (e.g. [Agra87]) have concluded that PCC locking protocols perform better than OCC techniques.
Reference: [Brao94] <author> Spyridon Braoudakis. </author> <title> Concurrency Control Protocols for Real-Time Databases. </title> <type> PhD thesis, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA 02215, expected June 1994. </address>
Reference-contexts: This leads to what we have termed the Order-Based SCC (SCC-OB). A SCC-OB algorithm may require a large amount of redundancy. In particular, if transaction T r is one of n pairwise conflicting transactions, then SCC-OB may require T r to fork an exponential number of shadows <ref> [Brao94] </ref>, namely: P n (n1)! As an illustration of the relationship between shadows and SOS, consider figure 3, which shows a schedule for three, pairwise conflicting transactions T 1 , T 2 , and T 3 . <p> Such an optimized algorithm, called Conflict-Based SCC (SCC-CB) is detailed in <ref> [Brao94] </ref>. <p> r will be unblocked and promoted to become T r 's optimistic shadow, replacing the old optimistic shadow which will have to be aborted, since it made the wrong assumption with respect to the serialization order. 1 A thorough description of SCC-kS and proof of its correctness are detailed in <ref> [Brao94] </ref>. 4 In our protocol, k (the upper limit on the number of shadows allowed per transaction) does not have to be the same for all transactions. <p> The Latest-Blocked-First-Out (LBFO) shadow replacement 3 We can still use the presense of other speculative shadows to improve those decisions. 6 policy implements this by replacing the shadow with the latest blocking point. LBFO is one of several policies that could be adopted. In <ref> [Brao94] </ref> some alternatives to this policy are discussed and evaluated. In particular, information about deadlines and priorities of the conflicting transactions can be utilized so as to account for the most probable serialization orders. <p> The simulations were performed under a wide range of workloads to enable us to characterize the behavior of the protocols under the various conditions that may arise in a real-world RTDBS. For a comprehensive analysis of these simulations, we refer the reader to <ref> [Brao94] </ref>. The database consists of 1; 000 pages from which each transaction accesses 16 randomly selected pages. The probability of a page being updated is set at 25%.
Reference: [Buch89] <author> A. P. Buchmann, D. C. McCarthy, M. Hsu, and U. Dayal. </author> <title> "Time-critical database scheduling: A framework for integrating real-time scheduling and concurrency controls." </title> <booktitle> In Proceedings of the 5th International Conference on Data Engineering, </booktitle> <address> Los Angeles, California, </address> <month> February </month> <year> 1989. </year>
Reference-contexts: For example, Real-Time DataBase Systems (RTDBS) are engineered not to guarantee a particular throughput, but to ensure that in the rare event of a highly-loaded system, transactions (critical ones in particular) complete before their set deadlines <ref> [Buch89] </ref>. This often leads to a computing environment with far more resources than what would be necessary to sustain average loads. In such environments, the advantage that PCC blocking-based algorithms have over OCC restart-based algorithms vanishes.
Reference: [Eswa76] <author> K. P. Eswaran, J. N. Gray, R. A. Lorie, and I. L. Traiger. </author> <title> "The notions of consistency and predicate locks in a database system." </title> <journal> Communications of the ACM, </journal> 19(11) 624-633, November 1976. 
Reference-contexts: 1 Introduction Various concurrency control algorithms differ in the time when conflicts are detected, and in the way they are resolved. Pessimistic Concurrency Control (PCC) protocols <ref> [Eswa76, Gray76] </ref> detect conflicts as soon as they occur and resolve them using blocking. Optimistic Concurrency Control (OCC) protocols [Boks87, Kung81] detect conflicts at transaction commit time and resolve them using rollbacks.
Reference: [Fran85] <author> Peter Franaszek and John Robinson. </author> <title> "Limitations of concurrency in transaction processing." </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 10(1), </volume> <month> March </month> <year> 1985. </year>
Reference-contexts: The main reason for this good performance is that PCC's blocking-based conflict resolution policies result in resource conservation, whereas OCC's restart-based conflict resolution policies waste more resources. While abundant resources are usually not to be expected in conventional database systems, they are more common in real-time environments <ref> [Fran85] </ref>, which are engineered to cope with rare high-load conditions, rather than normal average-load conditions.
Reference: [Gray76] <author> J. N. Gray, R. A. Lorie, G. R. Putzolu, and I. L. Traiger. </author> <title> "Granularity of locks and degrees of consistensy in a shared data base." </title> <editor> In G. M. Nijssen, editor, </editor> <booktitle> Modeling in Data Base Management Systems, </booktitle> <pages> pages 365-395. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1976. </year>
Reference-contexts: 1 Introduction Various concurrency control algorithms differ in the time when conflicts are detected, and in the way they are resolved. Pessimistic Concurrency Control (PCC) protocols <ref> [Eswa76, Gray76] </ref> detect conflicts as soon as they occur and resolve them using blocking. Optimistic Concurrency Control (OCC) protocols [Boks87, Kung81] detect conflicts at transaction commit time and resolve them using rollbacks.
Reference: [Hari90a] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Linvy. </author> <title> "Dynamic real-time optimistic concurrency control." </title> <booktitle> In Prooceedings of the 11th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: These priorities are used in conjunction with PCC-based techniques [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] to make it possible for more urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used in conjunction with OCC-based techniques <ref> [Kort90, Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] </ref> to favor more urgent transactions when conflicting, less urgent ones attempt to validate and commit (thus avoiding the hazards of restarts). <p> Our approach is similar 5 The notion of transaction value as an integral part of a transaction's priority was not used in that study. 10 (a) (b) to those proposed in <ref> [Agra92, Hari90a, Son92] </ref>. Whenever a transaction shadow T o u (executing on behalf of transaction T u ) finishes its execution, we evaluate if it is advantageous to defer T o u 's commitment for a later point in time. <p> In particular, we evaluate the performance of the following protocols: 2PL with Priority Abort (2PL-PA) [Abbo88] as a representative of PCC-based protocols, OCC-BC [Hari90b] and WAIT-50 <ref> [Hari90a] </ref> as representatives of OCC-based protocols, and SCC-2S and SCC-VW as representatives of SCC-based protocols. The RTDBS model that we used in our experiments consists of a multiprocessor DBMS operating on disk resident data. We assume an environment with infinite resources.
Reference: [Hari90b] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Linvy. </author> <title> "On being optimistic about real-time con-straints." </title> <booktitle> In Prooceedings of the 1990 ACM PODS Symposium, </booktitle> <month> April </month> <year> 1990. </year>
Reference-contexts: These priorities are used in conjunction with PCC-based techniques [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] to make it possible for more urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used in conjunction with OCC-based techniques <ref> [Kort90, Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] </ref> to favor more urgent transactions when conflicting, less urgent ones attempt to validate and commit (thus avoiding the hazards of restarts). <p> For example, in figure 10 (a), committing T 1 as soon as it is validated causes T 2 to miss its deadline and a value penalty to be assessed to the system. In <ref> [Hari90b] </ref>, Haritsa showed that by making a lower priority 5 transaction wait after it is validated, the number of transactions meeting their deadlines is increased, which results in a higher value-added to the system. <p> In particular, we evaluate the performance of the following protocols: 2PL with Priority Abort (2PL-PA) [Abbo88] as a representative of PCC-based protocols, OCC-BC <ref> [Hari90b] </ref> and WAIT-50 [Hari90a] as representatives of OCC-based protocols, and SCC-2S and SCC-VW as representatives of SCC-based protocols. The RTDBS model that we used in our experiments consists of a multiprocessor DBMS operating on disk resident data. We assume an environment with infinite resources.
Reference: [Hari91] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Linvy. </author> <title> "Value-based scheduling in real-time database systems." </title> <type> Technical Report Computer Sciences Technical Report #1024, </type> <institution> University of WisconsinMadison, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: This work is extended in [Huan91] to include OCC-based methods. Both consider a soft RTDBS where transaction values, after missing their deadlines, decrease at a rate inversely proportional to the values that these transactions had before their deadlines. In <ref> [Hari91] </ref> the special case in which all transactions have step-shaped value functions|the system is operating under a firm deadlines assumption|is investigated.
Reference: [Hari92] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Linvy. </author> <title> "Data access scehduling in firm real-time database systems." </title> <journal> The Journal of Real-Time Systems, </journal> <volume> 4 </volume> <pages> 203-241, </pages> <year> 1992. </year>
Reference-contexts: The slack factor for the computation of transaction deadlines is set up at 2, and the EDF policy to assign transaction priorities (for 2PL-PA and Wait-50) is adopted. These parameter settings are comparable to those used in similar studies <ref> [Hari92] </ref>. Our experiments assumed that transaction deadlines are soft. This entails that late transactions (those missing their deadlines) must complete|nevertheless|with the minimum possible delay. Each simulation runs until at least 4000 transactions had completed their operations (committed or aborted). Enough runs to guarantee a 90% confidence interval were performed.
Reference: [Huan89] <author> J. Huang, J. A. Stankovic, D. Towsley, and K. Ramamritham. </author> <title> "Experimental evaluation of real-time transaction processing." </title> <booktitle> In Proceedings of the 10th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1989. </year> <month> 22 </month>
Reference-contexts: Real-time concurrency control schemes considered in the literature could be viewed as extensions of either PCC-based or OCC-based protocols. In particular, transactions are assigned priorities that reflect the urgency of their timing constraints. These priorities are used in conjunction with PCC-based techniques <ref> [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] </ref> to make it possible for more urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used in conjunction with OCC-based techniques [Kort90, Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] to favor more urgent transactions when conflicting, less urgent <p> Their major performance objectives were to minimize the number of missed firm deadlines or minimize tardiness|the time by which late transactions miss their soft deadlines. Under this approach all system transactions are assigned the same value. However, there exist real-time applications where different transactions may be assigned different values <ref> [Stan88, Huan89] </ref> to reflect their relative worth to the system upon their successful completion. For such systems the attention shifts to maximizing the value-added to the system by the transactions' commitment. Minimizing tardiness and the number of missed deadlines become of secondary importance. <p> For such systems the attention shifts to maximizing the value-added to the system by the transactions' commitment. Minimizing tardiness and the number of missed deadlines become of secondary importance. Notice that a transaction's value and its deadline are two orthogonal properties <ref> [Biya88, Huan89] </ref>. The fact that a transaction has a tight deadline does not in any way imply that it has a high value, nor does the fact that it has a loose deadline imply that it has a low value. <p> Transactions with similar values may have different deadlines, while those with similar deadlines may have different values. Performance analysis studies that incorporated transaction values include those of Huang et al.[Huan89, Huan91] and Haritsa et al.[Hari91]. In <ref> [Huan89] </ref> several PCC-based algorithms are investigated for resource scheduling and data conflict resolution. This work is extended in [Huan91] to include OCC-based methods.
Reference: [Huan91] <author> Jiandong Huang, John A. Stankovic, Krithi Ramamritham, and Don Towslwy. </author> <title> "Experimental evalu--ation of real-time optimistic concurrency control schemes." </title> <booktitle> In Prooceedings of the 17th International Conference on Very Large Data Bases, </booktitle> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: These priorities are used in conjunction with PCC-based techniques [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] to make it possible for more urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used in conjunction with OCC-based techniques <ref> [Kort90, Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] </ref> to favor more urgent transactions when conflicting, less urgent ones attempt to validate and commit (thus avoiding the hazards of restarts). <p> Performance analysis studies that incorporated transaction values include those of Huang et al.[Huan89, Huan91] and Haritsa et al.[Hari91]. In [Huan89] several PCC-based algorithms are investigated for resource scheduling and data conflict resolution. This work is extended in <ref> [Huan91] </ref> to include OCC-based methods. Both consider a soft RTDBS where transaction values, after missing their deadlines, decrease at a rate inversely proportional to the values that these transactions had before their deadlines.
Reference: [Jens85] <author> E. Jensen, C. Locke, and H. Tokuda. </author> <title> "A time-driven scheduling model for real-time operating sys-tems." </title> <booktitle> In Proceedings of the 6th Real-Time Systems Symbosium, </booktitle> <month> December </month> <year> 1985. </year>
Reference-contexts: transactions are penalized for missing their deadlines are an integral part of the transaction's value functions. 3.1 Transaction Value The relationship between a transaction's value and the value-added to the system can be captured by the notion of the value function introduced in the work of Jensen, Locke, and Tokuda <ref> [Jens85, Lock86] </ref>. Each system transaction T u is associated with a value function V u (t), which represents the value of transaction T u as a function of its completion (commit) time. A real-time application cashes on the full value of a transaction if it is committed on time.
Reference: [Kim91] <author> Woosaeng Kim and Jaideep Srivastava. </author> <title> "Enhancing real-time dbms performance with multiversion data and priority based disk scheduling." </title> <booktitle> In Prooceedings of the 12th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: These priorities are used in conjunction with PCC-based techniques [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] to make it possible for more urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used in conjunction with OCC-based techniques <ref> [Kort90, Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] </ref> to favor more urgent transactions when conflicting, less urgent ones attempt to validate and commit (thus avoiding the hazards of restarts).
Reference: [Kort90] <author> Henry Korth. </author> <title> "Triggered real-time databases with consistency constraints." </title> <booktitle> In Proceedings of the 16th International Conference on Very Large Data Bases, </booktitle> <address> Brisbane, Australia, </address> <year> 1990. </year>
Reference-contexts: These priorities are used in conjunction with PCC-based techniques [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] to make it possible for more urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used in conjunction with OCC-based techniques <ref> [Kort90, Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] </ref> to favor more urgent transactions when conflicting, less urgent ones attempt to validate and commit (thus avoiding the hazards of restarts).
Reference: [Kung81] <author> H. Kung and John Robinson. </author> <title> "On optimistic methods for concurrency control." </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(2), </volume> <month> June </month> <year> 1981. </year>
Reference-contexts: 1 Introduction Various concurrency control algorithms differ in the time when conflicts are detected, and in the way they are resolved. Pessimistic Concurrency Control (PCC) protocols [Eswa76, Gray76] detect conflicts as soon as they occur and resolve them using blocking. Optimistic Concurrency Control (OCC) protocols <ref> [Boks87, Kung81] </ref> detect conflicts at transaction commit time and resolve them using rollbacks. For a conventional DataBase Management System (DBMS) with limited resources, performance studies of concurrency control methods (e.g. [Agra87]) have concluded that PCC locking protocols perform better than OCC techniques. <p> Also, SCC-VW, a simplified, efficient version of the SCC-DC protocol is presented. In section 4, we present our simulation results, which show that SCC-based algorithms provide significant performance gains over other widely used protocols. 2 Speculative Concurrency Control A major disadvantage of the classical OCC <ref> [Kung81] </ref> when used in RTDBS is that transaction conflicts are not detected until the validation phase, at which time it may be too late to restart. The Broadcast Commit variant of the classical OCC (OCC-BC) [Mena82, Robi82] attempts to solve this problem by a notification process.
Reference: [Lin90] <author> Yi Lin and Sang Son. </author> <title> "Concurrency control in real-time databases by dynamic adjustment of serial-ization order." </title> <booktitle> In Proceedings of the 11th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: These priorities are used in conjunction with PCC-based techniques [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] to make it possible for more urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used in conjunction with OCC-based techniques <ref> [Kort90, Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] </ref> to favor more urgent transactions when conflicting, less urgent ones attempt to validate and commit (thus avoiding the hazards of restarts).
Reference: [Lock86] <author> C. Locke. </author> <title> Best Effort Decision Making for Real-Time Scheduling. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, Department of Computer Science, </institution> <month> May </month> <year> 1986. </year>
Reference-contexts: transactions are penalized for missing their deadlines are an integral part of the transaction's value functions. 3.1 Transaction Value The relationship between a transaction's value and the value-added to the system can be captured by the notion of the value function introduced in the work of Jensen, Locke, and Tokuda <ref> [Jens85, Lock86] </ref>. Each system transaction T u is associated with a value function V u (t), which represents the value of transaction T u as a function of its completion (commit) time. A real-time application cashes on the full value of a transaction if it is committed on time.
Reference: [Mena82] <author> D. Menasce and T. Nakanishi. </author> <title> "Optimistic versus pessimistic concurrency control mechanisms in database management systems." </title> <journal> Information Systems, </journal> <volume> 7(1), </volume> <year> 1982. </year>
Reference-contexts: The Broadcast Commit variant of the classical OCC (OCC-BC) <ref> [Mena82, Robi82] </ref> attempts to solve this problem by a notification process. When a transaction commits, it notifies all concurrently running, conflicting transactions about its commitment. All those conflicting transactions are immediately restarted.
Reference: [Robi82] <author> John Robinson. </author> <title> Design of Concurrency Controls for Transaction Processing Systems. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1982. </year>
Reference-contexts: The Broadcast Commit variant of the classical OCC (OCC-BC) <ref> [Mena82, Robi82] </ref> attempts to solve this problem by a notification process. When a transaction commits, it notifies all concurrently running, conflicting transactions about its commitment. All those conflicting transactions are immediately restarted.
Reference: [Sha88] <author> Lui Sha, R. Rajkumar, and J. Lehoczky. </author> <title> "Concurrency control for distributed real-time databases." </title> <journal> ACM, SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 82-98, </pages> <year> 1988. </year>
Reference-contexts: Real-time concurrency control schemes considered in the literature could be viewed as extensions of either PCC-based or OCC-based protocols. In particular, transactions are assigned priorities that reflect the urgency of their timing constraints. These priorities are used in conjunction with PCC-based techniques <ref> [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] </ref> to make it possible for more urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used in conjunction with OCC-based techniques [Kort90, Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] to favor more urgent transactions when conflicting, less urgent
Reference: [Sha90] <author> L. Sha, R. Rajkumar, and J. Lojoczky. </author> <title> "Priority inheritence protocols: An approach to real-time syncronization." </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(9) </volume> <pages> 1175-1185, </pages> <year> 1990. </year>
Reference-contexts: Nevertheless, these algorithms are not value-cognizant algorithms because they do not make any use of deadline or criticalness information in resolving data conflicts or in making other scheduling decisions. While this protects them from problems related to priority dynamics (e.g. priority inversion and starvation <ref> [Sha90] </ref>), it also prevents them from making better scheduling decisions. In this section, we discuss one way of incorporating deadline and criticalness information within the SCC methodology.
Reference: [Sha91] <author> Lui Sha, R. Rajkumar, Sang Son, and Chun-Hyon Chang. </author> <title> "A real-time locking protocol." </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(7) </volume> <pages> 793-800, </pages> <year> 1991. </year>
Reference-contexts: Real-time concurrency control schemes considered in the literature could be viewed as extensions of either PCC-based or OCC-based protocols. In particular, transactions are assigned priorities that reflect the urgency of their timing constraints. These priorities are used in conjunction with PCC-based techniques <ref> [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] </ref> to make it possible for more urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used in conjunction with OCC-based techniques [Kort90, Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] to favor more urgent transactions when conflicting, less urgent
Reference: [Sing88] <author> Mukesh Singhal. </author> <title> "Issues and approaches to design real-time database systems." </title> <journal> ACM, SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 19-33, </pages> <year> 1988. </year>
Reference-contexts: Real-time concurrency control schemes considered in the literature could be viewed as extensions of either PCC-based or OCC-based protocols. In particular, transactions are assigned priorities that reflect the urgency of their timing constraints. These priorities are used in conjunction with PCC-based techniques <ref> [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] </ref> to make it possible for more urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used in conjunction with OCC-based techniques [Kort90, Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] to favor more urgent transactions when conflicting, less urgent
Reference: [Son92] <author> S. Son, S. Park, and Y. Lin. </author> <title> "An integrated real-time locking protocol." </title> <booktitle> In Prooceedings of the IEEE International Conference on Data Engineering, </booktitle> <address> Tempe, AZ, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: These priorities are used in conjunction with PCC-based techniques [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] to make it possible for more urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used in conjunction with OCC-based techniques <ref> [Kort90, Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] </ref> to favor more urgent transactions when conflicting, less urgent ones attempt to validate and commit (thus avoiding the hazards of restarts). <p> Our approach is similar 5 The notion of transaction value as an integral part of a transaction's priority was not used in that study. 10 (a) (b) to those proposed in <ref> [Agra92, Hari90a, Son92] </ref>. Whenever a transaction shadow T o u (executing on behalf of transaction T u ) finishes its execution, we evaluate if it is advantageous to defer T o u 's commitment for a later point in time.
Reference: [Stan88] <author> John Stankovic and Wei Zhao. </author> <title> "On real-time transactions." </title> <journal> ACM, SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 4-18, </pages> <year> 1988. </year>
Reference-contexts: Real-time concurrency control schemes considered in the literature could be viewed as extensions of either PCC-based or OCC-based protocols. In particular, transactions are assigned priorities that reflect the urgency of their timing constraints. These priorities are used in conjunction with PCC-based techniques <ref> [Abbo88, Agra87, Stan88, Huan89, Sing88, Sha88, Sha91] </ref> to make it possible for more urgent transactions to abort conflicting, less urgent ones (thus avoiding the hazards of blockages); and are used in conjunction with OCC-based techniques [Kort90, Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] to favor more urgent transactions when conflicting, less urgent <p> Their major performance objectives were to minimize the number of missed firm deadlines or minimize tardiness|the time by which late transactions miss their soft deadlines. Under this approach all system transactions are assigned the same value. However, there exist real-time applications where different transactions may be assigned different values <ref> [Stan88, Huan89] </ref> to reflect their relative worth to the system upon their successful completion. For such systems the attention shifts to maximizing the value-added to the system by the transactions' commitment. Minimizing tardiness and the number of missed deadlines become of secondary importance.
References-found: 32

