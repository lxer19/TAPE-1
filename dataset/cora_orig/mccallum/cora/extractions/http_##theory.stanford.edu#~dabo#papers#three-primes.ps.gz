URL: http://theory.stanford.edu/~dabo/papers/three-primes.ps.gz
Refering-URL: http://theory.stanford.edu/~dabo/publications.html
Root-URL: 
Email: dabo@cs.stanford.edu horwitz@cs.stanford.edu  
Title: Generating a Product of Three Primes With an Unknown Factorization  
Author: Dan Boneh Jeremy Horwitz 
Address: Stanford, CA, 94305-9045  
Affiliation: Computer Science Department, Stanford University,  
Abstract: We describe protocols for three or more parties to jointly generate a composite N = pqr which is the product of three primes. After our protocols terminate N is publicly known, but neither party knows the factorization of N . Our protocols require the design of a new type of distributed primality test for testing that a given number is a product of three primes. We explain the cryptographic motivation and origin of this problem.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ben-Or, S. Goldwasser, A. Wigderson, </author> <title> "Completeness theorems for non-cryptographic fault tolerant distributed computation", </title> <booktitle> STOC 1988, </booktitle> <pages> pp. 1-10. </pages>
Reference-contexts: The methods of [2] do not generalize to generate a modulus with three prime factors and new techniques had to be developed for this purpose. We remark that techniques of secure circuit evaluation <ref> [1, 5, 17] </ref> can also be used to solve this problem. However, these protocols are mostly theoretical resulting in extremely inefficient algorithms. 2 Motivation The problem discussed in the paper is a natural one and thus our solution is of independent interest. <p> As before, this step provably reveals no information about the private shares. 2 Step (3), the distributed primality test, is a new type of probabilistic primality test which is one of the main contributions of [2]. Step (2) is achieved using an efficient variation of the BGW <ref> [1] </ref> protocol. A drawback of the above approach is that both factors of N are simultaneously tested for primality. Hence, the expected number of times step (3) is executed is O (n 2 ). <p> To compute N without revealing any other information about the private shares we use the BGW protocol <ref> [1] </ref>. For the particular function above the protocol is quite efficient requiring three rounds of communication and a total of 6 messages. The protocol is information theoretically secure, i.e. other than the value of N party i has no information about the shares held by other parties.
Reference: [2] <author> D. Boneh, M. Franklin, </author> <title> "Efficient generation of shared RSA keys", </title> <booktitle> in Proceedings Crypto' 97, </booktitle> <pages> pp. 425-439. </pages>
Reference-contexts: Clearly this solution is undesirable since it introduces a new single point of failure the trusted dealer. It knows the factorization of N and the secret key d. If it is compromised the secret key is revealed. Recently Boneh and Franklin <ref> [2] </ref> designed a protocol that enables three (or more) parties to jointly generate an RSA modulus N = pq and shares d 1 ; d 2 ; d 3 of a private key. <p> In this paper we design an efficient protocol enabling three (or more) parties to generate a modulus N = pqr such that neither party knows the factorization of N . Once N is generated the same techniques used in <ref> [2] </ref> can be used to generate shares d 1 ; d 2 ; d 3 of a private exponent. For this reason throughout the paper we focus on the generation of the modulus N = pqr and ignore the generation of the private key. The methods of [2] do not generalize <p> techniques used in <ref> [2] </ref> can be used to generate shares d 1 ; d 2 ; d 3 of a private exponent. For this reason throughout the paper we focus on the generation of the modulus N = pqr and ignore the generation of the private key. The methods of [2] do not generalize to generate a modulus with three prime factors and new techniques had to be developed for this purpose. We remark that techniques of secure circuit evaluation [1, 5, 17] can also be used to solve this problem. <p> Nonetheless, the problem is well motivated by a method for improving the efficiency of shared generation of RSA keys. To understand this we must briefly recall the method used by Boneh and Franklin <ref> [2] </ref>. We refer to the three parties involved as Alice, Bob and Carol. <p> As before, this step provably reveals no information about the private shares. 2 Step (3), the distributed primality test, is a new type of probabilistic primality test which is one of the main contributions of <ref> [2] </ref>. Step (2) is achieved using an efficient variation of the BGW [1] protocol. A drawback of the above approach is that both factors of N are simultaneously tested for primality. Hence, the expected number of times step (3) is executed is O (n 2 ). <p> Honest parties We assume all parties are honestly following the protocol. This is indeed the case when they are truly trying to create a shared key. This assumption is used by both <ref> [2] </ref> and [6]. We note that some recent work [9] makes the protocol of [2] robust against cheating adversaries at the cost of some slowdown in performance (roughly a factor of 100). These robustness results apply to the protocols described in this paper as well. Collusion Our protocol is 1-private. <p> Honest parties We assume all parties are honestly following the protocol. This is indeed the case when they are truly trying to create a shared key. This assumption is used by both <ref> [2] </ref> and [6]. We note that some recent work [9] makes the protocol of [2] robust against cheating adversaries at the cost of some slowdown in performance (roughly a factor of 100). These robustness results apply to the protocols described in this paper as well. Collusion Our protocol is 1-private. <p> The BGW protocol can be used to compute the value pq; however, instead of making the final result public the BGW variant shares the result additively among the three parties. The details of this variant can be found in <ref> [2, Section 6.2] </ref>. As before, we do not give the full details of the protocol for converting pq + pr + qr into an additive sharing.
Reference: [3] <author> D. Boneh, M. Franklin, </author> <title> "A heuristic for two party generation of shared RSA keys", </title> <type> unpub-lished manuscript. </type>
Reference-contexts: The answer appears to be yes although the protocols cannot be information theoretically secure. Essentially one needs to replace the BGW protocol for computing N with a two party private multiplication protocol. This appears to be possible using results of <ref> [6, 3] </ref>. 6 Conclusions and open problems Our main contribution is the design of a probabilistic primality test that enables three (or more) parties to generate a number N with an unknown factorization and test that N is the product of three distinct primes.
Reference: [4] <author> M. Blum, S. Goldwasser, </author> <title> "An efficient probabilistic public key encryption scheme that hides all partial information", </title> <booktitle> in Proceedings Crypto 84, </booktitle> <pages> pp. 289-302. </pages>
Reference-contexts: In case N is not of this form the protocol may leak some information; however in this case N is discarded and is of no interest. To prove that the protocol leaks no information we rely on a classic cryptographic assumption <ref> [4] </ref> called Quadratic Residue Indistinguishability or QRI for short. This cryptographic assumption states that when N = pq with p = q = 3 mod 4 no polynomial time algorithm can distinguish between the groups J and Q defined above.
Reference: [5] <author> D. Chaum, C. Crepeau, and I. Damg-ard, </author> <title> "Multiparty unconditionally secure protocols," </title> <booktitle> ACM STOC 1988, </booktitle> <pages> 11-19. </pages>
Reference-contexts: The methods of [2] do not generalize to generate a modulus with three prime factors and new techniques had to be developed for this purpose. We remark that techniques of secure circuit evaluation <ref> [1, 5, 17] </ref> can also be used to solve this problem. However, these protocols are mostly theoretical resulting in extremely inefficient algorithms. 2 Motivation The problem discussed in the paper is a natural one and thus our solution is of independent interest.
Reference: [6] <author> C. Cocks, </author> <title> "Split knowledge generation of RSA parameters", </title> <note> Available from the author cliff cocks@cesg.gov.uk. </note>
Reference-contexts: In addition each party learns exactly one of d 1 ; d 2 ; d 3 and has no computational information about the other shares. Thus, there is no need for a trusted dealer. We note that Cocks <ref> [6] </ref> introduced a heuristic protocol enabling two parties to generate a shared RSA key. In this paper we design an efficient protocol enabling three (or more) parties to generate a modulus N = pqr such that neither party knows the factorization of N . <p> Honest parties We assume all parties are honestly following the protocol. This is indeed the case when they are truly trying to create a shared key. This assumption is used by both [2] and <ref> [6] </ref>. We note that some recent work [9] makes the protocol of [2] robust against cheating adversaries at the cost of some slowdown in performance (roughly a factor of 100). These robustness results apply to the protocols described in this paper as well. Collusion Our protocol is 1-private. <p> The answer appears to be yes although the protocols cannot be information theoretically secure. Essentially one needs to replace the BGW protocol for computing N with a two party private multiplication protocol. This appears to be possible using results of <ref> [6, 3] </ref>. 6 Conclusions and open problems Our main contribution is the design of a probabilistic primality test that enables three (or more) parties to generate a number N with an unknown factorization and test that N is the product of three distinct primes.
Reference: [7] <author> R. Fagin, M. Naor, P. Winkler, </author> <title> "Comparing information without leaking it", </title> <journal> CACM, </journal> <volume> Vol 39, No. 5, </volume> <month> May </month> <year> 1996, </year> <pages> pp. 77-85. </pages>
Reference: [8] <author> Y. Frankel, </author> <title> "A practical protocol for large group oriented networks", </title> <booktitle> Eurocrypt 89, </booktitle> <pages> pp. 56-61. </pages>
Reference-contexts: Splitting the key d into a number of pieces and storing each piece at a different location avoids this single point of failure. One approach (due to Frenkel <ref> [8] </ref>) is to pick three random numbers satisfying d = d 1 + d 2 + d 3 mod '(N ) and store each of the shares d 1 ; d 2 ; d 3 at one of three different sites. <p> Under QRI the resulting distribution on g 1 ; : : : ; g 8 ; b 1;1 ; : : : ; b 8;8 is computationally indistinguishable from Alice's true view of the protocol. We note that the value a 1 2 <ref> [0; 8] </ref> Alice sends Bob in Step (0) is a uniform random element of Z 8 . Hence, it is trivially simulatable by Bob. Similarly a 2 2 [0; 8] is simulatable by Carol. fl 4.2 Implementing a Fermat test with no information leakage We briefly show how to implement a <p> We note that the value a 1 2 <ref> [0; 8] </ref> Alice sends Bob in Step (0) is a uniform random element of Z 8 . Hence, it is trivially simulatable by Bob. Similarly a 2 2 [0; 8] is simulatable by Carol. fl 4.2 Implementing a Fermat test with no information leakage We briefly show how to implement a Fermat test in Z fl N without leaking any extra information about the private shares.
Reference: [9] <author> Y. Frankel, P. MacKenzie, M. Yung, </author> <title> "Robust efficient distributed RSA key generation", </title> <type> Preprint. </type>
Reference-contexts: Honest parties We assume all parties are honestly following the protocol. This is indeed the case when they are truly trying to create a shared key. This assumption is used by both [2] and [6]. We note that some recent work <ref> [9] </ref> makes the protocol of [2] robust against cheating adversaries at the cost of some slowdown in performance (roughly a factor of 100). These robustness results apply to the protocols described in this paper as well. Collusion Our protocol is 1-private.
Reference: [10] <author> P. Gemmel, </author> <title> "An introduction to threshold cryptography", in CryptoBytes, </title> <journal> a technical newsletter of RSA Laboratories, </journal> <volume> Vol. 2, No. 7, </volume> <year> 1997. </year>
Reference-contexts: The technique described above of sharing the secret key such that it can be used without reconstruction at a single location is known as Threshold Cryptography. See <ref> [10] </ref> for a succinct survey of these ideas and nontrivial problems associated with them. An important question left out of the above discussion is key generation.
Reference: [11] <author> J. Grantham, </author> <title> "A probable prime test with high confidence", </title> <address> http://www.clark.net/pub/grantham/pseudo/ </address>
Reference-contexts: The assumption plays a crucial role in the proof of Lemma 4.3. A natural question is whether more advanced primality testing techniques can be used to improve the efficiency of our test. For instance, recent elegant techniques due to Grantham <ref> [11] </ref> may be applicable in our scenario as well.
Reference: [12] <author> J. van de Graaf, Rene Peralta, </author> <title> "A simple and secure way to show the validity of your public key", </title> <booktitle> in Proc. Crypto 87, </booktitle> <pages> pp. 128-134. </pages>
Reference-contexts: pass steps 1-3 even though it is not a product of three distinct primes. 4.1 Step 3: Testing that N = p ff q fi r fl Our protocol for testing that N is a product of three prime powers borrows from a result of van de Graaf and Peralta <ref> [12] </ref>. Our protocol works as follows: Step 0 By definition of ^' we know it is divisible by 8. However, the individual shares ' a ; ' b ; ' c which sum to ^' may not be.
Reference: [13] <author> A. Lenstra, H.W. Lenstra ed., </author> <title> "The development of the number field sieve", </title> <publisher> Springer-Verlag, LNCS 1554, </publisher> <year> 1994. </year>
Reference-contexts: When N = pqr the attack is reduced to d &lt; N 1=6 and hence it may be possible to use smaller values of d as the secret key. Finally, we note that the fastest factoring methods <ref> [13] </ref> cannot take advantage of the fact that the factors of N = pqr are smaller than those of a standard RSA modulus N = pq. 3 3 Preliminaries In this section, we explain the initial setup for our new probabilistic primality test and how it is obtained.
Reference: [14] <author> H. W. Lenstra, </author> <title> "Factoring integers with elliptic curves", </title> <journal> Annals of Math., </journal> <volume> Vol. 126, </volume> <year> 1987, </year> <pages> pp. 649-673. </pages>
Reference: [15] <author> A. Shamir, </author> <title> "How to share a secret", </title> <journal> Comm. of the ACM, </journal> <volume> Vol. 22, No. 11, </volume> <month> Nov. </month> <year> 1979, </year> <pages> pp. 612-613. </pages>
Reference-contexts: This way if one of the sites is temporarily unavailable the Certification 1 Authority can still generate signatures using the remaining two sites. If the key was only distributed among two sites the system would be highly vulnerable to faults. We point out that classic techniques of secret sharing <ref> [15] </ref> are inadequate in this scenario. Secret sharing requires one to reconstruct the secret at a single location before it can be used, hence introducing a single point of failure.
Reference: [16] <author> M. Wiener, </author> <title> "Cryptanalysis of short RSA secret exponents", </title> <journal> IEEE Transactions on Info. Th., </journal> <volume> Vol. 36, No. 3, </volume> <year> 1990, </year> <pages> pp. 553-558. </pages>
Reference-contexts: Since the numbers (and exponents) are smaller signature generation is about twice as fast as using CRT with N = pq. Another advantage is that an attack on RSA due to Wiener <ref> [16] </ref> becomes less effective when using N = pqr. Wiener showed that for N = pq if d &lt; N 1=4 one can recover the secret key d from the public key.
Reference: [17] <author> A. Yao, </author> <title> "How to generate and exchange secrets", </title> <booktitle> FOCS 1986, </booktitle> <pages> pp. 162-167. 13 </pages>
Reference-contexts: The methods of [2] do not generalize to generate a modulus with three prime factors and new techniques had to be developed for this purpose. We remark that techniques of secure circuit evaluation <ref> [1, 5, 17] </ref> can also be used to solve this problem. However, these protocols are mostly theoretical resulting in extremely inefficient algorithms. 2 Motivation The problem discussed in the paper is a natural one and thus our solution is of independent interest.
References-found: 17

