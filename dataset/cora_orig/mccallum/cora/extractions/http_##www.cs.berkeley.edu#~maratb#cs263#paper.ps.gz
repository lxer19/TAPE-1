URL: http://www.cs.berkeley.edu/~maratb/cs263/paper.ps.gz
Refering-URL: http://www.cs.berkeley.edu/~maratb/cs263/
Root-URL: 
Title: Visual Programming Languages: A Survey  
Author: Marat Boshernitsan Michael Downes 
Date: December 16, 1997  
Address: Berkeley, CA 94720  
Affiliation: Computer Science Division University of California, Berkeley  
Pubnum: CS 263 Final Project  
Abstract: Over the past ten years, frequent increases in computer processing speed and graphics display capabilities have made possible a great deal of research and experimentation in the field of visual programming languages. A variety of different design methodologies have arisen from these research efforts, and numerous visual programming systems have been developed to address both specific application areas, such as user interface design and physical simulation, and more general programming tasks. We present a survey of the field of visual programming languages beginning with an historical overview of some of the pioneering efforts in the field. In addition, we present different classifications of visual programming languages, touch on implementation and design issues, and discuss efforts to formalize the theoretical basis for visual languages. We also discuss and examine a variety of the more important projects in the field over the last few years. 0 The authors can be reached at: fmdownes,maratbg@CS.Berkeley.EDU. An on-line version of this paper can be found on the WWW page: http://www.cs.berkeley.edu/~maratb/cs263/paper.html. 
Abstract-found: 1
Intro-found: 1
Reference: [Borning 1981] <author> Borning, A. H. </author> <title> The programming language aspects of thinglab, a constraint oriented simulation laboratory. </title> <journal> ACM Trans. Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 353-387, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: Constraint-oriented systems have also found application in the development of graphical user interfaces. Thinglab and ARK, both primarily simulation VPLs, stand out as quintessential examples of constraint-based languages <ref> [Smith 1986, Borning 1981] </ref>. A few VPLs have borrowed their visualization and programming metaphors from spreadsheets. These languages can be classified as form-based VPLs.
Reference: [Brown & Sedgewick 1984] <author> Brown, M. and Sedgewick, R. </author> <title> A system for algorithm animation. </title> <booktitle> In Proc. of SIGGRAPH '84, </booktitle> <pages> pp. 177-186, </pages> <year> 1984. </year>
Reference-contexts: These VPL orphans, so to speak, include algorithm animation systems, such as BALSA <ref> [Brown & Sedgewick 1984] </ref>, which provide interactive graphical displays of executing programs and graphical user interface development tools, like those provided with many modern compilers including Microsoft Visual C++.
Reference: [Burnett & Ambler 1992] <author> Burnett, M. M. and Ambler, A. L. </author> <title> A declarative approach to event-handling in visual programming languages. </title> <booktitle> In Proc. 1993 IEEE Symposium Visual Languages, </booktitle> <pages> pp. 34-40, </pages> <address> Seattle, Washington, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: These languages can be classified as form-based VPLs. They represent programming as altering a group of interconnected cells over time and often allow the programmer to visualize the execution of a program as a sequence of different cell states which progress through time <ref> [Burnett & Ambler 1992] </ref>. Forms/3 is the current incarnation of the progenitor of this type of VPL, and it will be covered in detail below.
Reference: [Burnett & Baker 1994] <author> Burnett, M. M. and Baker, M. J. </author> <title> A classification system for visual programming languages. </title> <editor> J. </editor> <booktitle> Visual Languages and Computing, </booktitle> <pages> pp. 287-300, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: Some of the most important names in the field, including Chang, Shu, and Burnett, have worked on identifying the defining characteristics of the major categories of VPLs <ref> [Chang 1987, Shu 1986, Burnett & Baker 1994] </ref>. The following presents a summary of the classification scheme discussed below: 1. Purely visual languages 2. Hybrid text and visual systems 3. Programming-by-example systems 4. Constraint-oriented systems 5. Form-based systems Note that the categories are by no means mutually exclusive. <p> Examples of such completely visual systems include VIPR, Prograph, and PICT, the first two of which will be discussed in more detail below. In much of the literature in the field, this category is further subdivided into sections like iconic and non-iconic languages, object-oriented, functional, and imperative languages <ref> [Chang 1987, Burnett & Baker 1994] </ref>. However, for our purposes a slightly larger granularity helps to emphasize the major visually-oriented differences between various VPLs. One important subset of VPLs attempts to combine both visual and textual elements.
Reference: [Burnett 1994] <author> Burnett, M. M. </author> <title> Seven programming language issues. </title> <editor> In Burnett, M. M., Goldberg, A., and Lewis, T. G., editors, </editor> <title> Visual Object-Oriented Programming. </title> <publisher> Prentice Hall and Manning, </publisher> <address> Greenwich, CT, </address> <year> 1994. </year>
Reference-contexts: work on formalization of visual languages is still in its infancy (published within last 2-3 years) and so we do not survey it here in any detail. 5 Visual Language Issues We now discuss some common language issues in light of which the following presentation of visual languages is cast <ref> [Burnett 1994] </ref>. <p> we conclude our discussion of Prograph, we should mention that the foremost achievement of this language is its ability to free the programmer from tedious chores with the unnecessary level of detail provided by conventional languages, which, in part, is responsible for the language's commercial success. 22 6.4 Forms/3 Forms/3 <ref> [Burnett 1994] </ref> is another general-purpose object-oriented visual programming language whose features emphasize data abstraction. However, unlike Prograph (Section 6.3) and VIPR (Section 6.2), no inheritance or explicit message-passing is supported. Forms/3 borrows the spreadsheet metaphor of cells and formulas to represent data and computation respectively.
Reference: [Chang 1987] <author> Chang, S. </author> <title> Visual languages: A tutorial and survey. </title> <journal> IEEE Software, </journal> <volume> 4(1) </volume> <pages> 29-39, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: Some of the most important names in the field, including Chang, Shu, and Burnett, have worked on identifying the defining characteristics of the major categories of VPLs <ref> [Chang 1987, Shu 1986, Burnett & Baker 1994] </ref>. The following presents a summary of the classification scheme discussed below: 1. Purely visual languages 2. Hybrid text and visual systems 3. Programming-by-example systems 4. Constraint-oriented systems 5. Form-based systems Note that the categories are by no means mutually exclusive. <p> Examples of such completely visual systems include VIPR, Prograph, and PICT, the first two of which will be discussed in more detail below. In much of the literature in the field, this category is further subdivided into sections like iconic and non-iconic languages, object-oriented, functional, and imperative languages <ref> [Chang 1987, Burnett & Baker 1994] </ref>. However, for our purposes a slightly larger granularity helps to emphasize the major visually-oriented differences between various VPLs. One important subset of VPLs attempts to combine both visual and textual elements.
Reference: [Chang 1990] <editor> Chang, S.-K., editor. </editor> <booktitle> Principles of Visual Programming Systems. </booktitle> <publisher> Prentice Hall, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: Chang on generalized icon theory. To set up the framework for the discussion which follows, we put forth some definitions from <ref> [Chang 1990] </ref>: icon (generalized icon) An object with the dual representation of a logical part (the meaning) and a physical part (the image). iconic system A structured set of related icons. iconic sentence (visual sentence) A spatial arrangement of icons from iconic system. 4 visual language A set of iconic sentences <p> The syntactic analysis of visual sentences (also known as spatial parsing [Lakin 1986]) is based upon a number of approaches <ref> [Chang 1990] </ref>. Here, we present a partial listing of such approaches. Picture-processing grammars Originally designed to parse digital pictures on a square grid, these grammars are based on 5 and (b) a selected character. Process icons: (c) insertion operation, and (d) deletion operation.
Reference: [Citrin et al. 1994] <author> Citrin, W., Doherty, M., and Zorn, B. </author> <title> Design of a completely visual object-oriented programming language. </title> <editor> In Burnett, M., Goldberg, A., and Lewis, T., editors, </editor> <title> Visual Object-Oriented Programming. </title> <publisher> Prentice-Hall, </publisher> <address> New York, </address> <year> 1994. </year> <note> Not published yet. </note>
Reference-contexts: One can visualize program execution as walking down a network of pipes which branches off in different directions while changing the state based on actions written on the inside of the pipes <ref> [Citrin et al. 1994] </ref>. The ongoing development of VIPR has been motivated, in part by a desire to create an object-oriented language which is relatively easy to learn and use. As a result, VIPR includes most of the common attributes of object-oriented languages, including inheritance, polymorphism, and dynamic dispatch. <p> Note that variables which have been declared to be pointers to a particular class but have not yet been initialized point to shaded instances of the class. These are referred to as pseudo-instances <ref> [Citrin et al. 1994] </ref>. The instances become unshaded after the variables are initialized. The only other important aspect of the example to note is the appearance of the self variable in the state upon entry into the "xDistance" method.
Reference: [Citrin et al. 1995] <author> Citrin, W., Hall, R., and Zorn, B. </author> <title> Programming with visual expressions. </title> <booktitle> In Proc. 1995 IEEE Symposium Visual Languages, </booktitle> <pages> pp. 294-301, </pages> <year> 1995. </year>
Reference-contexts: The VIPR group has also developed a visual representation for the lambda calculus which they refer to as VEX for Visual EXpressions. VEX is intended to become an expression-oriented component of VIPR <ref> [Citrin et al. 1995] </ref>. We will only take a brief look at its major features. Figure 11 shows the textual and visual representations for the Y combinator.
Reference: [Citrin et al. 1996] <author> Citrin, W., Hall, R., and Zorn, B. </author> <title> Addressing the scalability problem in visual programming. </title> <booktitle> In Proc. of CHI '96, </booktitle> <year> 1996. </year>
Reference-contexts: In order to improve program visualization for large-scale projects, Citrin et. al have begun work on a variety of new display methods for the VIPR environment, including zooming and fisheyeing <ref> [Citrin et al. 1996] </ref>. The VIPR group has also developed a visual representation for the lambda calculus which they refer to as VEX for Visual EXpressions. VEX is intended to become an expression-oriented component of VIPR [Citrin et al. 1995].
Reference: [Cox & Pietryzkowsky 1990] <author> Cox, P. T. and Pietryzkowsky, T. </author> <title> Using a pictorial representation to combine dataflow and object-orientation in a language-independent programming mechanism. </title> <editor> In Glinert, E. P., editor, </editor> <title> Visual Programming Environments: Paradigms and Systems. </title> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1990. </year>
Reference-contexts: Graphical equivalents have been devised for ff-conversion, fi-reduction, and -reduction, but a detailed discussion of these is beyond the scope of this paper. 6.3 Prograph In this section we describe the Prograph language which is considered to be the most (commercially) successful of the general-purpose visual languages <ref> [Cox & Pietryzkowsky 1990] </ref>. The research on Prograph originated in 1982 at the Technical University of Nova Scotia. Since then, several versions of the language have been released, with the most recent (Prograph/CPX) being commercialized by Pictorius, Inc. Prograph is a visual object-oriented language.
Reference: [Erwig & Meyer 1995] <author> Erwig, M. and Meyer, B. </author> <title> Heterogeneous visual languages : Integrating visual and textual programming. </title> <booktitle> In Proc. 1995 IEEE Symposium Visual Languages, </booktitle> <pages> pp. 318-325, </pages> <year> 1995. </year>
Reference-contexts: The latter involves work on developing extensions to languages like C and C++ which allow programmers to intersperse their text code with diagrams <ref> [Erwig & Meyer 1995] </ref>. For instance, one can define a linked list data structure textually and then perform an operation like deletion of a node by drawing the steps in the process. In addition to these two major categories, many VPLs fall into a variety of smaller classifications.
Reference: [Finzer & Gould 1984] <author> Finzer, W. and Gould, L. </author> <title> Programming by Rehearsal. </title> <journal> BYTE, </journal> <volume> 9(6) </volume> <pages> 187-210, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: Examples in this category include Rehearsal World 3 and work by Erwig et. al. In the former, the user trains the system to solve a particular prob-lem by manipulating graphical "actors," and then the systems generates a Smalltalk program to implement the solution <ref> [Finzer & Gould 1984] </ref>. The latter involves work on developing extensions to languages like C and C++ which allow programmers to intersperse their text code with diagrams [Erwig & Meyer 1995].
Reference: [Golin 1990] <author> Golin, E. J. </author> <title> A method for the specification and parsing of visual languages. </title> <type> PhD dissertation, </type> <institution> Brown University, </institution> <year> 1990. </year> <month> 28 </month>
Reference-contexts: Visual sentence denoting replacement of a substring in a string. 6 the fact that digital pictures are composed of pixels. These grammars discover the structure of visual sentence by composing individual pixels into recognizable visual elements (lines, arks, etc.) <ref> [Golin 1990] </ref>. This approach is useful when an iconic system needs to be able to recognize icons with a certain level of error tolerance (e.g. handwritten digits). Precedence grammars This spatial parsing grammar can be used for two-dimensional mathematical expression analysis and printed-page analysis.
Reference: [Lakin 1986] <author> Lakin, F. </author> <title> Spatial parsing for visual languages. </title> <editor> In Chang, S.-K., Ichikawa, T., and Ligomenides, P., editors, </editor> <booktitle> Visual Languages, </booktitle> <pages> pp. 35-85. </pages> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1986. </year>
Reference-contexts: It contains information regarding event names, conceptual relations, names of resulting objects, and references to the resulting objects. 4.2 Analysis of Visual Programming Languages As discussed above, visual sentences are constructed from elementary icons using iconic operators. The syntactic analysis of visual sentences (also known as spatial parsing <ref> [Lakin 1986] </ref>) is based upon a number of approaches [Chang 1990]. Here, we present a partial listing of such approaches. Picture-processing grammars Originally designed to parse digital pictures on a square grid, these grammars are based on 5 and (b) a selected character.
Reference: [Najork & Kaplan 1991] <author> Najork, M. and Kaplan, S. </author> <title> The cube language. </title> <booktitle> In Proc. 1991 IEEE Workshop Visual Languages, </booktitle> <pages> pp. 218-224, </pages> <address> Kobe, Japan, </address> <year> 1991. </year>
Reference-contexts: Working in 3D provides a number of important benefits over more traditional 2D VPLs. For example, working in three dimensions allows the system to display more information in an environment which is easier to interact with than a 2D representation which uses the same screen size <ref> [Najork & Kaplan 1991] </ref>. In the 3D display, the programmer is free to move his or her viewpoint anywhere inside the virtual world in order to look at any particular section of a program from any viewpoint.
Reference: [Najork 1995] <author> Najork, M. </author> <title> Visual programming in 3-d. </title> <journal> Dr. Dobb's Journal, </journal> 20(12) 18-31, Decem-ber 1995. 
Reference-contexts: Ivan Sutherland's brother, William, also made an important early contribution to visual programming in 1965, when he used the TX-2 to develop a simple visual dataflow language. The system allowed users to create, debug, and execute dataflow diagrams in a unified visual environment <ref> [Najork 1995] </ref>. The next major milestone in the genesis of VPLs came in 1975 with the publication of David Canfield Smith's PhD dissertation entitled "Pygmalion: A Creative Programming Envi 2 ronment" [Smith 1975]. <p> This sort of flexibility is not available in most 2D VPLs. to compute the factorial of a given number <ref> [Najork 1995] </ref>. Cube programs are composed primarily of holder cubes, predicate cubes, definition cubes, ports, pipes, and planes. The entire structure in within the cube. The definition cube has two ports connected to it, one on the left and on the right.
Reference: [Rekers & Schurr 1995] <author> Rekers, J. and Schurr, A. </author> <title> A graph grammar approach to graphical parsing. </title> <booktitle> In Proc. 1995 IEEE Symposium Visual Languages, </booktitle> <address> Darmstadt, Germany, </address> <year> 1995. </year>
Reference-contexts: Graph grammars These are by far the most powerful (albeit least efficient) specifications of visual languages. These formalisms provide for the most means for establishing context relationships and much recent work has been devoted to making parsing with graph grammars computationally feasible <ref> [Rekers & Schurr 1995] </ref>. A parse tree produced by one of the above parsing methods is subsequently analyzed using traditional approaches to semantic analysis (e.g. attribute grammars, ad-hoc tree computations, etc.).
Reference: [Rhor 1986] <author> Rhor, G. </author> <title> Using visual concepts. </title> <editor> In Chang, S.-K., Ichikawa, T., and Ligomenides, P., editors, </editor> <booktitle> Visual Languages. </booktitle> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1986. </year>
Reference-contexts: Since a picture (or, icon, in our case) is worth a thousand words, we attempt to illustrate all of the above concepts in Figure 1 which demonstrates a few icons from the Heidelber icons set <ref> [Rhor 1986] </ref> and a complete visual sentence. A visual programming language is specified by a triple (ID; G 0 ; B), where ID is the icon dictionary, G 0 is a grammar, and B is a domain-specific knowledge base [Tortora 1990].
Reference: [Shu 1986] <author> Shu, N. C. </author> <title> Visual Programming Languages: A Perspective and a Dimensional Analysis, </title> <journal> pp. </journal> <pages> 11-34. </pages> <publisher> Plenum Press, </publisher> <year> 1986. </year>
Reference-contexts: Some of the most important names in the field, including Chang, Shu, and Burnett, have worked on identifying the defining characteristics of the major categories of VPLs <ref> [Chang 1987, Shu 1986, Burnett & Baker 1994] </ref>. The following presents a summary of the classification scheme discussed below: 1. Purely visual languages 2. Hybrid text and visual systems 3. Programming-by-example systems 4. Constraint-oriented systems 5. Form-based systems Note that the categories are by no means mutually exclusive.
Reference: [Smith 1975] <author> Smith, D. C. PYGMALION: </author> <title> A Creative Programming Environment. </title> <type> PhD dissertation, </type> <institution> Stanford University, </institution> <year> 1975. </year>
Reference-contexts: The questions above highlight the primary motivations for most research into VPLs. First, many people think and remember things in terms of pictures. They relate to the world in an inherently graphical way and use imagery as a primary component of creative thought <ref> [Smith 1975] </ref>. In addition, textual programming languages have proven to be rather difficult for many creative and intelligent people to learn to use effectively. Reducing or removing entirely the necessity of translating visual ideas into somewhat artificial textual representations can help to mitigate this steep learning curve problem. <p> The system allowed users to create, debug, and execute dataflow diagrams in a unified visual environment [Najork 1995]. The next major milestone in the genesis of VPLs came in 1975 with the publication of David Canfield Smith's PhD dissertation entitled "Pygmalion: A Creative Programming Envi 2 ronment" <ref> [Smith 1975] </ref>. Smith's work marks the starting point for a number of threads of research in the field which continue to this day.
Reference: [Smith 1986] <author> Smith, R. </author> <title> The alternate reality kit : An animated environment for creating interactive simulations. </title> <booktitle> In Proc. 1986 IEEE Workshop Visual Languages, </booktitle> <pages> pp. 99-106, </pages> <year> 1986. </year>
Reference-contexts: Constraint-oriented systems have also found application in the development of graphical user interfaces. Thinglab and ARK, both primarily simulation VPLs, stand out as quintessential examples of constraint-based languages <ref> [Smith 1986, Borning 1981] </ref>. A few VPLs have borrowed their visualization and programming metaphors from spreadsheets. These languages can be classified as form-based VPLs. <p> order to help users to understand the fundamental laws of nature, ARK uses a highly literal metaphor in which the user controls an on-screen hand which can interact with physical objects, like balls and blocks, which possess masses and velocities and with objects, called interactors, representing physical laws, like gravity <ref> [Smith 1986] </ref>. By giving a kind of physical reality to abstract laws, the system attempts 8 9 to remove some of the mystery surrounding the ways in which such laws interact with objects and each other.
Reference: [Smith 1987] <author> Smith, R. B. </author> <title> Experiences with the alternate reality kit: An example of the tension between literalism and magic. </title> <journal> IEEE CG & A, </journal> <volume> 7(9) </volume> <pages> 42-50, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: Smith refers to this issue as the tension between magic and literalism in ARK <ref> [Smith 1987] </ref>. <p> A programmer can generate new interactors by creating networks of message boxes. As a simple 10 11 example, consider developing a frictional force interactor by creating a message box which adds a force to an object proportional to the negative of its velocity <ref> [Smith 1987] </ref>.
Reference: [Sutherland 1963] <author> Sutherland, I. B. </author> <title> SKETCHPAD, a man-machine graphical communication system. </title> <booktitle> In Proceedings of the Spring Joint Computer Conference, </booktitle> <pages> pp. 329-346, </pages> <year> 1963. </year>
Reference-contexts: It should come as no surprise, then, that much of the seminal work in the field is also viewed as pioneering work in one of the other disciplines. Ivan Sutherland's groundbreaking Sketchpad system stands out as the best example of this trend <ref> [Sutherland 1963] </ref>. Sketchpad, designed in 1963 on the TX-2 computer at MIT, has been called the first computer graphics application.
Reference: [Tortora 1990] <author> Tortora, G. </author> <title> Structure and interpretation of visual languages. </title> <editor> In Chang, S.-K., editor, </editor> <booktitle> Visual Languages and Visual Programming, </booktitle> <pages> pp. 3-30. </pages> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: A visual programming language is specified by a triple (ID; G 0 ; B), where ID is the icon dictionary, G 0 is a grammar, and B is a domain-specific knowledge base <ref> [Tortora 1990] </ref>. The icon dictionary is the set of generalized icons each of which is represented by a pair (X m ; X i ), with a logical art X m (the meaning) and a physical part X i (the image).
References-found: 25

