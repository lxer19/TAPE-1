URL: http://www.cs.cornell.edu/Info/People/kreitz/PS-files/96-disco.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/kreitz/Abstracts/96-disco.html
Root-URL: 
Title: Problem-Oriented Applications of Automated Theorem Proving  
Author: W. Bibel, D. Korn, C. Kreitz, and S. Schmitt 
Address: Alexanderstr. 10, 64283 Darmstadt, Germany  
Affiliation: Fachgebiet Intellektik, Fachbereich Informatik Technische Hochschule Darmstadt  
Note: In J. Calmet C. Limongelli,, ed. 4 th International Symposium on Design and Implementation of Symbolic Computation Systems, 1128, pp. 1-21, 1996.  
Abstract: fbibel,korn,kreitz,stephg@intellektik.informatik.th-darmstadt.de Abstract. This paper provides an overall view of an approach to developing a coherent ATP-system which can deal with a variety of logics and with different applications in a tailored way. The paper also summarizes research results achieved in the course of this development. 
Abstract-found: 1
Intro-found: 1
Reference: [And80] <author> P. Andrews. </author> <title> Transforming matings into natural deduction proofs. </title> <booktitle> In CADE-5, </booktitle> <volume> LNCS 87, </volume> <pages> pp. 281-292. </pages> <publisher> Springer, </publisher> <year> 1980. </year>
Reference-contexts: Special care has to be taken in order to re-incorporate the necessary information which has been processed during possible input transformations. Examples for such techniques can be found in <ref> [And80, Wos90, And91, Pfe87] </ref> and [Lin89, Lin90, Gen95]. They try to present resolution- or connection-based proofs within natural calculi such as LK or N K [Gen35]. Other approaches try to present them even in natural language [DGH94]. Similar approaches have been developed for non-classical logics as well [SK95, SK96].
Reference: [And91] <author> P. Andrews. </author> <title> More on the problem of finding a mapping between clause representation and natural-deduction representation. </title> <journal> Journal of Automated Reasoning, </journal> <volume> Vol. 7, </volume> <pages> pp 285-286, </pages> <year> 1991. </year>
Reference-contexts: Special care has to be taken in order to re-incorporate the necessary information which has been processed during possible input transformations. Examples for such techniques can be found in <ref> [And80, Wos90, And91, Pfe87] </ref> and [Lin89, Lin90, Gen95]. They try to present resolution- or connection-based proofs within natural calculi such as LK or N K [Gen35]. Other approaches try to present them even in natural language [DGH94]. Similar approaches have been developed for non-classical logics as well [SK95, SK96].
Reference: [BC85] <author> J. L. Bates, R. L. Constable. </author> <title> Proofs as programs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(1) </volume> <pages> 113-136, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: To mention a few of these applications, finding proofs for mathematical theorems as done in mathematics is of course one of them. A slightly less obvious one is the use of ATP to automatically synthesize computer programs from a given specification. Following the "proofs-as-programs" paradigm <ref> [BC85] </ref> this task amounts to finding a constructive proof for the existence of a function which maps input elements to output elements of the specified program. A related but more general task is the automated control of the behavior of intelligent agents within a given environment.
Reference: [Bib87] <author> W. Bibel. </author> <title> Automated Theorem Proving. </title> <publisher> Vieweg Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Usually they consist of a small set of inference rules which are applied to the given formula according to a certain strategy. Popular examples are the various resolution-based strategies [Rob65] as well as the connection-based methods like the extension-procedure <ref> [Bib87] </ref>. 3. proof presentation: this is the interface between the logical calculus of the inference machine and the one of the given application. <p> This characterization can be seen as a generalization of Bibel's connection method <ref> [Bib87] </ref> to capture also non-classical logics which do not have a normal form. This is achieved by introducing the syntactical concept of prefixes to encode the Kripke semantics of the logics explicitly into the proof search. <p> The proof procedure working on these compactly represented matrix characterizations has been developed in [OK96b] involving extended concepts of paths, (open) subgoals, and multiplicities for non-normal form matrices. The basic mechanism for proof search is similar to Bibel's extension procedure <ref> [Bib87] </ref>. It consists of a short and uniform (invariant) algorithm for connection driven path checking of a formula F .
Reference: [BBE94] <editor> W. Bibel, S. Brning, U. Egly, T. Rath. Komet . In CADE-12, </editor> <volume> LNAI 814, </volume> <pages> pp. 783-787. </pages> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: Another example for input transformation is the logic morphism for propositional intuitionistic logic [Kor96] which will be described in detail later on. Below this layer we have three inference machines: the KoMeT-system <ref> [BBE94] </ref> which implements various strategic variants of the extension procedure, a non-normal form Davis-Putnam prover for classical propositional logic as well as an inference machine which implements the non-normal form version of the extension procedure thereby allowing for the use of various co-processors for first order non-classical logics [OK96b]. <p> The last topic of future research mentioned here in the context of the material presented in this paper concerns the enhancement of efficiency of the resulting system. We plan to investigate how the techniques, used in systems like Setheo [LBB92] and KoMeT <ref> [BBE94] </ref> and resulting in the high performance of these systems, can be imported into our combined system. Examples of the kind of techniques we have in mind are preprocessing techniques and the use of typing information during unification.
Reference: [Bra75] <author> D. </author> <title> Brand Proving theorems with the modification method . In J. </title> <editor> Hopcroft e. a., </editor> <title> eds. </title> <journal> SIAM Journal of Computing Vol. </journal> <volume> 4, </volume> <pages> pp. 412-430. </pages> <address> Philadelphia, </address> <year> 1975. </year>
Reference-contexts: Take, for instance, a classical first order formula which contains equality predicates. Then on the one hand we can deal with the theory of equality by a preprocessing step which generates lemmata that follow from the given formula w.r.t. equality theory <ref> [Bra75] </ref>. Thus, we would do part of the proof work already within the input transformation layer. On the other hand, we may reason about the equalities by equipping our inference machine with an additional mechanism which allows for reasoning about equality.
Reference: [C86] <author> R. L. Constable et. al. </author> <title> Implementing Mathematics with the NuPRL proof development system. </title> <publisher> Prentice Hall, </publisher> <year> 1986. </year>
Reference-contexts: Currently, we are developing a C-implementation of our connection-based proof procedure for intuitionistic logic [OK95, OK96b] and of our method for converting matrix proofs into intuitionistic sequent proofs [SK95, SK96]. We also implement an interface which integrates the resulting software with the interactive proof/program development system NuPRL <ref> [C86] </ref>. This will enable to use an efficient proof procedure interactively [KOS95] as a tactic within the NuPRL system for solving sub-problems from first order logic, the need for which arises during the process of deriving programs with the NuPRL system.
Reference: [DGH94] <author> B. I. Dahn, J. Gehne, T. Honigmann, L. Walther, A. Wolf. </author> <title> Integrating Logical Functions with ILF , Preprint 94-10, </title> <address> Humboldt University Berlin, </address> <year> 1994. </year>
Reference-contexts: Examples for such techniques can be found in [And80, Wos90, And91, Pfe87] and [Lin89, Lin90, Gen95]. They try to present resolution- or connection-based proofs within natural calculi such as LK or N K [Gen35]. Other approaches try to present them even in natural language <ref> [DGH94] </ref>. Similar approaches have been developed for non-classical logics as well [SK95, SK96]. Structuring the proof process in this way provides flexibility for the design of problem-specific ATP-systems. Up to a certain extent, one is given the freedom to distribute the proof process between input transformation and the inference machine.
Reference: [ER96] <author> U. Egly, T. Rath. </author> <title> On the practical value of different definitional translation to normal form. </title> <note> To appear in CADE-13, Springer, </note> <year> 1996. </year>
Reference-contexts: Among these mechanisms we find the NFT-module providing different techniques for normal form transformation. Practical evaluations have shown that the duration of the proof search strongly depends on the appropriate choice of such a NFT-technique <ref> [ER96] </ref>. Another example for input transformation is the logic morphism for propositional intuitionistic logic [Kor96] which will be described in detail later on.
Reference: [Fit69] <author> M. C. </author> <title> Fitting. Intuitionistic logic, model theory and forcing. </title> <booktitle> Studies in logic and the foundations of mathematics. </booktitle> <publisher> North-Holland, </publisher> <year> 1969. </year>
Reference-contexts: These may again depend on the underlying logic and force us to insert wait-labels to certain nodes in order to keep them from being reduced too early. Prefixed sequent systems. Because of a strong similarity between the matrix characterizations and Fitting's prefixed tableaux systems <ref> [Fit69] </ref> we have developed our algorithm in a first phase to convert a matrix proof into a prefixed sequent proof. From the prefixes computed during proof search via string unification we obtain the prefixes for the sequent proof in a direct way.
Reference: [Fit83] <author> M. C. </author> <title> Fitting. Proof Methods for Modal and Intuitionistic Logic. </title> <address> D. </address> <publisher> Reidel, </publisher> <year> 1983. </year>
Reference-contexts: Using the well-known tableaux classification of sub b 0 a 3 a 5 : C (a 4 ) 1 b 0 a 7 : B 1 fl b 0 a 9 : B 0 Fig. 4. Matrix representation of the formula from Example 1 formulae <ref> [Wal90, Fit83] </ref> we obtain the corresponding matrix (two-dimensional representation) shown in figure 4 where each atom is represented next to its prefix. The vertically arranged atoms correspond to a branching at some -formula in an analytic tableau. <p> use a 4 for the quantifier reduction 9r with Q (a 13 ) = a 4 satisfying the cumulative domain condition on the semantics of the considered logics, i.e. b 0 a 7 R 0 b 0 a 7 a 5 (where R 0 denotes the accessibility relation on prefixes <ref> [Fit83] </ref>). The sequent proof can be extended to T; S4 for varying domains by extending the modal substitution L (a 5 ) = ;. Conventional sequent calculi. The transformation algorithm TOTAL developed in the first phase realizes conversion into prefixed sequent systems only.
Reference: [Gen95] <author> K. Genther. </author> <title> Reprsentation von Konnektionsbeweisen in Gentzen-Kalklen durch Transformation und Strukturierung. </title> <type> Tech. Rep. </type> <institution> AIDA-95-12, TH Darmstadt, </institution> <year> 1995. </year>
Reference-contexts: Special care has to be taken in order to re-incorporate the necessary information which has been processed during possible input transformations. Examples for such techniques can be found in [And80, Wos90, And91, Pfe87] and <ref> [Lin89, Lin90, Gen95] </ref>. They try to present resolution- or connection-based proofs within natural calculi such as LK or N K [Gen35]. Other approaches try to present them even in natural language [DGH94]. Similar approaches have been developed for non-classical logics as well [SK95, SK96].
Reference: [Gen35] <author> G. </author> <title> Gentzen. Untersuchungen ber das logische Schlieen. </title> <journal> Mathematische Zeitschrift, </journal> <volume> 39 </volume> <pages> 176-210, 405-431, </pages> <year> 1935. </year>
Reference-contexts: Examples for such techniques can be found in [And80, Wos90, And91, Pfe87] and [Lin89, Lin90, Gen95]. They try to present resolution- or connection-based proofs within natural calculi such as LK or N K <ref> [Gen35] </ref>. Other approaches try to present them even in natural language [DGH94]. Similar approaches have been developed for non-classical logics as well [SK95, SK96]. Structuring the proof process in this way provides flexibility for the design of problem-specific ATP-systems. <p> The latter fact leads to the second phase of developing a uniform conversion procedure, i.e. to extend the algorithm TOTAL into TOTAL ? which transforms non-normal form matrix proofs into conventional sequent calculi <ref> [Gen35, Wal90] </ref>. For non-classical logics we have to consider the fact that prefixes cannot be used explicitly. The non-permutabilities of inference rules are now encoded by the structure of the rules themselves which may delete sequent formulae during a reduction.
Reference: [Hey71] <author> A. Heyting. </author> <title> Intuitionism | An Introduction. </title> <publisher> North Holland Publishing Company, </publisher> <address> Amsterdam, </address> <year> 1971. </year>
Reference-contexts: Rather, the usual logical connectives are interpreted in an epistemological way. For instance, an implicative formula of the form A ) B is read as "we possess a construction which gives us a construction for B, provided we possess a construction for A" <ref> [Hey71] </ref>. This notion of already "possessing" a construction can be viewed as being independent of any additional information that might be available somewhere in the future.
Reference: [Kor93] <author> D. Korn. KonSequenz | ein Konnektionsmethoden-gesteuertes Sequen-zenbeweisverfahren. Master-thesis, TH Darmstadt, </author> <year> 1993. </year>
Reference-contexts: Another approach, the KonSequenz-system <ref> [Kor93] </ref>, was designed to present a classical connection proof for the given formula within an intuitionistic sequent calculus whenever this is possible.
Reference: [Kor96] <author> D. Korn. </author> <title> Efficiently Deciding Intuitionistic Propositional Logic via Translation into Classical Logic. </title> <type> Tech. Rep. </type> <institution> AIDA-96-09, TH Darmstadt, </institution> <year> 1996. </year>
Reference-contexts: Among these mechanisms we find the NFT-module providing different techniques for normal form transformation. Practical evaluations have shown that the duration of the proof search strongly depends on the appropriate choice of such a NFT-technique [ER96]. Another example for input transformation is the logic morphism for propositional intuitionistic logic <ref> [Kor96] </ref> which will be described in detail later on. <p> Examples of the kind of techniques we have in mind are preprocessing techniques and the use of typing information during unification. As mentioned in Section 3.1 we also aim at using these classical proof systems directly as inference machines via semantics-based translation techniques <ref> [Kor96] </ref>. We plan to lift the existing approach to full in-tuitionistic predicate logic. In order to re-integrate the generated proofs into the NuPRL-environment we are currently developing an appropriate postprocessing mechanism.
Reference: [Kre96] <author> C. </author> <title> Kreitz. Formal Mathematics for Verifiably Correct Program Synthesis. </title> <journal> Journal of the Interest Group in Pure and Applied Logics (IGPL), </journal> <volume> 4(1) </volume> <pages> 75-94, </pages> <year> 1996. </year>
Reference-contexts: Further research focuses on providing a rigorous formalization of the meta-theory of programming in order to raise the level of formal reasoning in formal program synthesis from low level calculi to one comprehensible for programmers and to implement program development strategies on this level <ref> [Kre96] </ref>. These are considered to be steps on the way towards enabling a user of a program development system to focus on the key ideas in program design while being freed from formal details which in addition are needed to ensure correctness.
Reference: [KOS95] <editor> C. Kreitz, J. Otten, S. Schmitt. </editor> <title> Guiding Program Development Systems by a Connection Based Proof Strategy. </title> <editor> In M. Proietti, editor, </editor> <booktitle> 5 th International Workshop on Logic Program Synthesis and Transformation, </booktitle> <volume> LNCS 1048, </volume> <pages> pp. 137-151, </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Both parts, the proof search and the transformation procedure can be integrated into an application system (like a proof development system) by providing appropriate interfaces similar to the ones described in <ref> [KOS95] </ref>. We hope that this general methodology will make ATP useful in a rich variety of application domains. 4 Future Work This paper has provided an overall view of the development of an ATP-system which is able to handle three different types of applications in a tailored way. <p> We also implement an interface which integrates the resulting software with the interactive proof/program development system NuPRL [C86]. This will enable to use an efficient proof procedure interactively <ref> [KOS95] </ref> as a tactic within the NuPRL system for solving sub-problems from first order logic, the need for which arises during the process of deriving programs with the NuPRL system.
Reference: [Kri63] <author> S. A. Kripke. </author> <title> Semantical analysis of modal logic I. Normal modal propositional calculi. </title> <journal> Zeitschrift f. mathematische Logik u. Grundlagen d. </journal> <volume> Mathematik 9, </volume> <pages> pp 67-96, </pages> <year> 1963. </year> <month> 20 </month>
Reference-contexts: The semantical properties for the logics we have dealt with can be formalized in terms of Kripke-Semantics <ref> [Kri63] </ref>. The basic idea behind these semantics is the notion of possible worlds. Roughly spoken, they represent different interpretations of the predicate symbols and terms within the logical language. Between these worlds an accessibility relation R is defined in order to describe how the possible worlds interact.
Reference: [LBB92] <author> R. Letz, J. Schumann, S. Bayerl, W. Bibel. </author> <title> Setheo: A high--performance theorem prover. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 8 </volume> <pages> 183-212, </pages> <year> 1992. </year>
Reference-contexts: The last topic of future research mentioned here in the context of the material presented in this paper concerns the enhancement of efficiency of the resulting system. We plan to investigate how the techniques, used in systems like Setheo <ref> [LBB92] </ref> and KoMeT [BBE94] and resulting in the high performance of these systems, can be imported into our combined system. Examples of the kind of techniques we have in mind are preprocessing techniques and the use of typing information during unification.
Reference: [Lin89] <author> C. Lingenfelder. </author> <title> Structuring computer generated proofs. </title> <booktitle> IJCAI-89, </booktitle> <year> 1989. </year>
Reference-contexts: Special care has to be taken in order to re-incorporate the necessary information which has been processed during possible input transformations. Examples for such techniques can be found in [And80, Wos90, And91, Pfe87] and <ref> [Lin89, Lin90, Gen95] </ref>. They try to present resolution- or connection-based proofs within natural calculi such as LK or N K [Gen35]. Other approaches try to present them even in natural language [DGH94]. Similar approaches have been developed for non-classical logics as well [SK95, SK96].
Reference: [Lin90] <author> C. Lingenfelder. </author> <title> Transformation and Structuring of Computer Generated Proofs. </title> <type> PhD thesis, </type> <institution> Universitt Kaiserslautern, </institution> <year> 1990. </year>
Reference-contexts: Special care has to be taken in order to re-incorporate the necessary information which has been processed during possible input transformations. Examples for such techniques can be found in [And80, Wos90, And91, Pfe87] and <ref> [Lin89, Lin90, Gen95] </ref>. They try to present resolution- or connection-based proofs within natural calculi such as LK or N K [Gen35]. Other approaches try to present them even in natural language [DGH94]. Similar approaches have been developed for non-classical logics as well [SK95, SK96].
Reference: [Moo77] <author> R. C. Moore. </author> <booktitle> Reasoning about Knowledge and Action IJCAI-77, </booktitle> <pages> pp 223-227, </pages> <address> Stanford, California 94305, </address> <year> 1977. </year>
Reference-contexts: Likewise, w k `A ) B would become 8v:(wRv ) A (v) ) B (v)). This technique is known as the relational translation <ref> [Moo77, Ohl91, vBe84] </ref>. Of course, to obtain completeness one has to add some axiom-formulae which encode the properties of R like, for instance, reflexivity (8w:wRw).
Reference: [Ohl91] <author> H. J. Ohlbach. </author> <title> Semantics-Based Translation Methods for Modal Logics. </title> <journal> Journal of Logic and Computation, </journal> <volume> Vol. 1, no. 6, </volume> <pages> pp 691-746, </pages> <year> 1991. </year>
Reference-contexts: An application-oriented ATP-system 3 2 Structuring the Process of Theorem Proving The core of each ATP-system is the inference machine which amounts to sort of a "microprocessor" for theorem proving <ref> [Ohl91] </ref>. A formula to be proved usually is preprocessed by some input layer in order to transform it into the "machine language" of the inference machine. <p> A popular example is the normal form transformation (NFT) which serves to translate arbitrary first order formulae into clause-form which is the preferred language of most inference machines. Another important field of translation is formed by the so-called "logic morphisms" <ref> [Ohl91] </ref>. They basically aim at encoding seman-tical meta-knowledge for non-classical logics within the language of classical logic. 2. inference machines: they do the actual exploration of the search space which is spanned by the given formula w.r.t. the underlying logic. <p> Likewise, w k `A ) B would become 8v:(wRv ) A (v) ) B (v)). This technique is known as the relational translation <ref> [Moo77, Ohl91, vBe84] </ref>. Of course, to obtain completeness one has to add some axiom-formulae which encode the properties of R like, for instance, reflexivity (8w:wRw).
Reference: [OK95] <author> J. Otten, C. </author> <title> Kreitz. A connection based proof method for intuitionistic logic. </title> <journal> TABLEAUX-95, </journal> <volume> LNAI 918, </volume> <pages> pp. 122-137, </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Currently, we are developing a C-implementation of our connection-based proof procedure for intuitionistic logic <ref> [OK95, OK96b] </ref> and of our method for converting matrix proofs into intuitionistic sequent proofs [SK95, SK96]. We also implement an interface which integrates the resulting software with the interactive proof/program development system NuPRL [C86].
Reference: [OK96a] <author> J. Otten, C. </author> <title> Kreitz. T-string-unification: unifying prefixes in nonclassical proof methods. </title> <journal> TABLEAUX-96, </journal> <volume> LNAI 1071, </volume> <pages> pp. 244-260, </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: Thus in addition to the conventional unification algorithms our procedure requires a special string-unification procedure <ref> [OK96a] </ref> for making two prefixes identical. <p> The variant component of the procedure determining the complementarity of the connections strongly depends on the underlying logic L. It has been successfully realized using the string-unification procedure <ref> [OK96a, OK96b] </ref> on the corresponding prefixes of the connected atoms. The modular design of this unification procedure and its integration into the search algorithm allows us to treat a rich variety of logics in a uniform, efficient, and simple way.
Reference: [OK96b] <author> J. Otten, C. </author> <title> Kreitz. A Uniform Proof Procedure for Classical and Non-Classical Logics. </title> <note> To appear in KI-96, Springer, </note> <year> 1996. </year>
Reference-contexts: the KoMeT-system [BBE94] which implements various strategic variants of the extension procedure, a non-normal form Davis-Putnam prover for classical propositional logic as well as an inference machine which implements the non-normal form version of the extension procedure thereby allowing for the use of various co-processors for first order non-classical logics <ref> [OK96b] </ref>. The output layer consists of various techniques which present the generated proofs within natural and logistic calculi for the respective input logic. Obviously their application depends on the way the input-formula was processed. <p> For this purpose we have developed a uniform framework for non-normal form theorem proving. The resulting method basically consists of a two step algorithm, i.e. a uniform procedure finding the proofs <ref> [OK96b] </ref> and a uniform transformation procedure converting these proofs into sequent-style systems [SK96]. During the development of the algorithm we have put particular emphasis on the uniformity of our environment. <p> For T; S4 we must add L (a 5 ) = ;, and for S5 L (a 5 ) = a 7 satisfying the corresponding condition. A uniform and compact presentation of Wallen's matrix characterizations for classical, intuitionistic, and various modal logics can be found in <ref> [OK96b] </ref> or [SK96]. The proof procedure working on these compactly represented matrix characterizations has been developed in [OK96b] involving extended concepts of paths, (open) subgoals, and multiplicities for non-normal form matrices. The basic mechanism for proof search is similar to Bibel's extension procedure [Bib87]. <p> A uniform and compact presentation of Wallen's matrix characterizations for classical, intuitionistic, and various modal logics can be found in <ref> [OK96b] </ref> or [SK96]. The proof procedure working on these compactly represented matrix characterizations has been developed in [OK96b] involving extended concepts of paths, (open) subgoals, and multiplicities for non-normal form matrices. The basic mechanism for proof search is similar to Bibel's extension procedure [Bib87]. It consists of a short and uniform (invariant) algorithm for connection driven path checking of a formula F . <p> The variant component of the procedure determining the complementarity of the connections strongly depends on the underlying logic L. It has been successfully realized using the string-unification procedure <ref> [OK96a, OK96b] </ref> on the corresponding prefixes of the connected atoms. The modular design of this unification procedure and its integration into the search algorithm allows us to treat a rich variety of logics in a uniform, efficient, and simple way. <p> Currently, we are developing a C-implementation of our connection-based proof procedure for intuitionistic logic <ref> [OK95, OK96b] </ref> and of our method for converting matrix proofs into intuitionistic sequent proofs [SK95, SK96]. We also implement an interface which integrates the resulting software with the interactive proof/program development system NuPRL [C86].
Reference: [Pfe87] <author> F. Pfenning. </author> <title> Proof Transformations in Higher-Order Logic. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <month> January </month> <year> 1987. </year>
Reference-contexts: Special care has to be taken in order to re-incorporate the necessary information which has been processed during possible input transformations. Examples for such techniques can be found in <ref> [And80, Wos90, And91, Pfe87] </ref> and [Lin89, Lin90, Gen95]. They try to present resolution- or connection-based proofs within natural calculi such as LK or N K [Gen35]. Other approaches try to present them even in natural language [DGH94]. Similar approaches have been developed for non-classical logics as well [SK95, SK96].
Reference: [Rob65] <author> J. A. Robinson. </author> , <title> A machine-oriented logic based on the resolution principle Journal of ACM, </title> <journal> Vol. </journal> <volume> 12, </volume> <pages> pp 23-41, </pages> <year> 1965. </year>
Reference-contexts: Usually they consist of a small set of inference rules which are applied to the given formula according to a certain strategy. Popular examples are the various resolution-based strategies <ref> [Rob65] </ref> as well as the connection-based methods like the extension-procedure [Bib87]. 3. proof presentation: this is the interface between the logical calculus of the inference machine and the one of the given application.
Reference: [RW69] <author> G. Robinson and L. Wos. </author> , <title> Paramodulation and theorem proving in first order theories with equality. </title> <editor> In B. Meltzer and D. Michie, eds., </editor> <booktitle> Machine Intelligence 4 , pp. </booktitle> <pages> 135-150, </pages> <publisher> Edinburgh University Press, </publisher> <year> 1969. </year>
Reference-contexts: On the other hand, we may reason about the equalities by equipping our inference machine with an additional mechanism which allows for reasoning about equality. This amounts to leaving all of the proof work to the inference machine <ref> [RW69] </ref>. 4 NFT ath,Egly) NNF form ula tuitionistic Input T ransfor mation pro cess NF of form ula pro KoMeT (R output Uniform transformation pro cedure (Schmitt) KonSequenz (Korn) Logic morphism (Korn) In erse logic morphism (Korn) form ula Classical form ula dal form ula (Genther) Pro Uniform extension pro cedure
Reference: [Sch95] <author> S. Schmitt. </author> <title> Ein erweiterter intuitionistischer Sequenzenkalkl und dessen Anwendung im intuitionis-tischen Konnektionsbeweisen. </title> <type> Tech. Rep. </type> <institution> AIDA-95-01, TH Darmstadt, </institution> <year> 1995. </year>
Reference-contexts: Thus the reduction ordering has to be extended by additional ordering constraints (called wait-labels) which cause deletion of sub-relations after -splits to be more than an optimization feature. Now these operations will be essential for preserving the completeness of our transformation procedure. In <ref> [Sch95] </ref> we have developed a concept of reductions on non-normal form matrix proofs for intuitionistic logic which respects these optimization- and completeness features. In [SK96] we have extended this concept to modal logics, especially the definitions of required wait-labels for making the reduction ordering complete.
Reference: [SK95] <author> S. Schmitt, C. </author> <title> Kreitz. On transforming intuitionistic matrix proofs into standard-sequent proofs. </title> <journal> TABLEAUX-95, </journal> <volume> LNAI 918, </volume> <pages> pp. 106-121, </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: They try to present resolution- or connection-based proofs within natural calculi such as LK or N K [Gen35]. Other approaches try to present them even in natural language [DGH94]. Similar approaches have been developed for non-classical logics as well <ref> [SK95, SK96] </ref>. Structuring the proof process in this way provides flexibility for the design of problem-specific ATP-systems. Up to a certain extent, one is given the freedom to distribute the proof process between input transformation and the inference machine. <p> Currently, we are developing a C-implementation of our connection-based proof procedure for intuitionistic logic [OK95, OK96b] and of our method for converting matrix proofs into intuitionistic sequent proofs <ref> [SK95, SK96] </ref>. We also implement an interface which integrates the resulting software with the interactive proof/program development system NuPRL [C86].
Reference: [SK96] <author> S. Schmitt, C. </author> <title> Kreitz. Converting Non-Classical Matrix Proofs into Sequent-Style Systems. </title> <note> To appear in CADE-13, Springer, </note> <year> 1996. </year>
Reference-contexts: They try to present resolution- or connection-based proofs within natural calculi such as LK or N K [Gen35]. Other approaches try to present them even in natural language [DGH94]. Similar approaches have been developed for non-classical logics as well <ref> [SK95, SK96] </ref>. Structuring the proof process in this way provides flexibility for the design of problem-specific ATP-systems. Up to a certain extent, one is given the freedom to distribute the proof process between input transformation and the inference machine. <p> Obviously their application depends on the way the input-formula was processed. If, for instance, the formula was transformed by a logic morphism then the encoding of the semantical meta-knowledge has to be re-compiled in order to obtain a suitable input for the uniform proof construction mechanism <ref> [SK96] </ref> shown at the right hand side of the bottom layer. Another approach, the KonSequenz-system [Kor93], was designed to present a classical connection proof for the given formula within an intuitionistic sequent calculus whenever this is possible. <p> For this purpose we have developed a uniform framework for non-normal form theorem proving. The resulting method basically consists of a two step algorithm, i.e. a uniform procedure finding the proofs [OK96b] and a uniform transformation procedure converting these proofs into sequent-style systems <ref> [SK96] </ref>. During the development of the algorithm we have put particular emphasis on the uniformity of our environment. <p> For T; S4 we must add L (a 5 ) = ;, and for S5 L (a 5 ) = a 7 satisfying the corresponding condition. A uniform and compact presentation of Wallen's matrix characterizations for classical, intuitionistic, and various modal logics can be found in [OK96b] or <ref> [SK96] </ref>. The proof procedure working on these compactly represented matrix characterizations has been developed in [OK96b] involving extended concepts of paths, (open) subgoals, and multiplicities for non-normal form matrices. The basic mechanism for proof search is similar to Bibel's extension procedure [Bib87]. <p> For non-classical logics this easy approach becomes rather complicated since semantical information (also contained in the output "proof code") has to be integrated. In <ref> [SK96] </ref> unified and compact representations of the matrix characterizations [Wal90], conventional sequent calculi, and prefixed sequent calculi have been presented for all logics under consideration. For the representation of the sequent calculi we use a uniform system of tables to specify the variant parts of the logics. <p> For this reason these tables can be seen as the counterpart to the string unification procedure, i.e. variant parts in the matrix characterizations. The invariant parts of the sequent systems are given by one basic system of inference rules for the logical connectives. In <ref> [SK96] </ref> we have developed a transformation procedure working on this uniform framework of logical calculi. <p> The correct application of sequent rules and construction of prefixes will be guaranteed by using our table system according to the selected logic L. For the details we refer again to <ref> [SK96] </ref>. Example 2. (Conversion into prefixed sequent systems) From Example 1 we take the formula F 29x:2C (x)^3B ) 3 (B^39x:C (x)), the substitutions L ; Q , and the reduction ordering generated from the matrix proof. <p> We make up the reduction 3r : b 0 a 7 at a 8 and afterwards, the application of ^l : b 0 a 7 at -position a 9 forces a split of the reduction ordering into two independent suborderings 1 ; 2 (detailed definitions given in <ref> [SK96] </ref>). For 1 , we solve a 10 having the atom B 0 : b 0 a 7 , and hence an axiom rule with B 1 : b 0 a 7 (a 7 already solved). <p> Now these operations will be essential for preserving the completeness of our transformation procedure. In [Sch95] we have developed a concept of reductions on non-normal form matrix proofs for intuitionistic logic which respects these optimization- and completeness features. In <ref> [SK96] </ref> we have extended this concept to modal logics, especially the definitions of required wait-labels for making the reduction ordering complete. These wait-labels depend on the selected logic L and, hence can be seen as an additional variant part for conversion in conventional sequent calculi. <p> Currently, we are developing a C-implementation of our connection-based proof procedure for intuitionistic logic [OK95, OK96b] and of our method for converting matrix proofs into intuitionistic sequent proofs <ref> [SK95, SK96] </ref>. We also implement an interface which integrates the resulting software with the interactive proof/program development system NuPRL [C86].
Reference: [Sch77] <author> K. Schtte. </author> <title> Proof theory. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: In order to obtain a suitable encoding of a potential intuitionistic counter-model for a given input formula F we first of all associate a unique function symbol w i to each implicative or negated subformula of F which has polarity 0 (i.e. is a positive part in the terminology of <ref> [Sch77] </ref>). Then, beginning with a "root" possible world w 0 , we construct a set W of terms that are obtained by applying a proper choice of concatenations of the w i to w 0 .
Reference: [vBe84] <author> J. Van Benthem. </author> <title> Correspondence Theory. </title> <editor> In: D. Gabbay and F. Guenther (eds.): </editor> <booktitle> Handbook of Philosophical Logic, </booktitle> <volume> Vol. II, </volume> <pages> pp. 167-247, </pages> <address> D. </address> <publisher> Reidel Publishing Company, </publisher> <address> Dordrecht, </address> <year> 1984. </year>
Reference-contexts: Likewise, w k `A ) B would become 8v:(wRv ) A (v) ) B (v)). This technique is known as the relational translation <ref> [Moo77, Ohl91, vBe84] </ref>. Of course, to obtain completeness one has to add some axiom-formulae which encode the properties of R like, for instance, reflexivity (8w:wRw).
Reference: [Wal90] <author> L. Wallen. </author> <title> Automated deduction in non-classical logics. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Furthermore this approach realizes a great degree of flexibility and can be extended to other logics in an easy way. Non-normal form Automated Theorem Proving The theoretical foundation for our proof procedure is a matrix characterization of logical validity developed in <ref> [Wal90] </ref> where a given formula F is logically L-valid iff each path through F has at least one complementary connection according to the selected logic L. <p> Using the well-known tableaux classification of sub b 0 a 3 a 5 : C (a 4 ) 1 b 0 a 7 : B 1 fl b 0 a 9 : B 0 Fig. 4. Matrix representation of the formula from Example 1 formulae <ref> [Wal90, Fit83] </ref> we obtain the corresponding matrix (two-dimensional representation) shown in figure 4 where each atom is represented next to its prefix. The vertically arranged atoms correspond to a branching at some -formula in an analytic tableau. <p> The irreflexivity of is one required condition for to be L-admissible. Furthermore L respects semantical conditions w.r.t. the L-accessibility relation R 0 for the modal logics D; D4; T; S4; S5. The interaction between Q and L satisfies the cumulative and constant domain conditions for these logics, too (see <ref> [Wal90] </ref> for detailed definitions). Summarizing all these conditions we obtain being L-admissible for these cases. It is easy to verify that makes the two connections -complementary and hence the corresponding paths as well. Thus F is shown to be L-valid. <p> For non-classical logics this easy approach becomes rather complicated since semantical information (also contained in the output "proof code") has to be integrated. In [SK96] unified and compact representations of the matrix characterizations <ref> [Wal90] </ref>, conventional sequent calculi, and prefixed sequent calculi have been presented for all logics under consideration. For the representation of the sequent calculi we use a uniform system of tables to specify the variant parts of the logics. <p> The latter fact leads to the second phase of developing a uniform conversion procedure, i.e. to extend the algorithm TOTAL into TOTAL ? which transforms non-normal form matrix proofs into conventional sequent calculi <ref> [Gen35, Wal90] </ref>. For non-classical logics we have to consider the fact that prefixes cannot be used explicitly. The non-permutabilities of inference rules are now encoded by the structure of the rules themselves which may delete sequent formulae during a reduction.
Reference: [Wos90] <author> L. Wos. </author> <title> The problem of finding a mapping between clause representation and natural-deduction representation. </title> <journal> Journal of Automated Reasoning, </journal> <volume> Vol. 6, </volume> <pages> pp 211-212, </pages> <year> 1990. </year> <title> This article was processed using the L a T E X macro package with LLNCS style 21 </title>
Reference-contexts: Special care has to be taken in order to re-incorporate the necessary information which has been processed during possible input transformations. Examples for such techniques can be found in <ref> [And80, Wos90, And91, Pfe87] </ref> and [Lin89, Lin90, Gen95]. They try to present resolution- or connection-based proofs within natural calculi such as LK or N K [Gen35]. Other approaches try to present them even in natural language [DGH94]. Similar approaches have been developed for non-classical logics as well [SK95, SK96].
References-found: 37

