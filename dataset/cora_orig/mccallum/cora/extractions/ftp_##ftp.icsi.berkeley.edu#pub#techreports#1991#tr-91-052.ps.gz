URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1991/tr-91-052.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1991.html
Root-URL: http://www.icsi.berkeley.edu
Email: xiisshoe@ddathd21.bitnet kurfess@icsi.Berkeley.edu  
Title: CHCL A Connectionist Inference System  
Author: Steffen Holldobler Franz Kurfess 
Date: September 1991  
Address: 1947 Center Street Alexanderstrae 10 Suite 600 D-6100 Darmstadt Berkeley, CA 94704 Germany USA  
Affiliation: FG Intellektik, FB Informatik International Computer Science Institute TH Darmstadt  
Pubnum: TR-91-052  
Abstract: Chcl is a connectionist inference system for H orn logic which is based on the connection method and uses l imited resources. This paper gives an overview of the system and its implementation. 
Abstract-found: 1
Intro-found: 1
Reference: [Aho and Ullman, 1972] <author> A. V. Aho and J. D. Ullman. </author> <title> The Theory of Parsing, Translation, and Compiling, volume I: Parsing. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N. J., </address> <year> 1972. </year>
Reference-contexts: In context-free grammars a non-terminal symbol is said to be useless if it does not occur in a sen-tenial form or cannot generate a terminal string (cf. <ref> [Aho and Ullman, 1972] </ref>). Correspondingly, we will call the head of a clause (viz. each connection of the head) useless if it does not occur in an SLD-resolvent of the initial clause or if the conditions of the clause cannot be solved. <p> The important property of useless non-terminal symbols and connections is that they can be determined statically by analyzing the set of productions and clauses, respectively. Algorithms for context-free grammars can be found in <ref> [Aho and Ullman, 1972] </ref>.
Reference: [Ballard, 1986] <author> D. H. Ballard. </author> <title> Parallel logic inference and energy minimization. </title> <booktitle> In Proceedings of the AAAI National Conference on Artificial Intelligence, </booktitle> <pages> pages 203 - 208, </pages> <year> 1986. </year>
Reference-contexts: One particular problem with respect to logic is the treatment of variable bindings; although some proposals to solve this problem have been made (see eg. <ref> [Ballard, 1986; Touretzky and Hinton, 1988; Shastri and Ajjanagadde, 1990b] </ref>), their integration into a logical framework is not fully satisfying. The approach proposed within Chcl relies on a full-fledged, distributed unification algorithm which computes the most general unifier for a set of terms [Holldobler, 1990b].
Reference: [Bibel et al., 1991] <author> W. Bibel, S. Holldobler, and J. Wurtz. </author> <title> Cycle unification. </title> <type> Technical Report AIDA-91-15, </type> <institution> FG Intellektik, FB Informatik, TH Darmstadt, </institution> <year> 1991. </year>
Reference-contexts: The latter basically is an analysis of the graph given by the logical connections of the formula, and to some degree can be applied statically at compile 19 time <ref> [Bibel et al., 1991] </ref>.
Reference: [Bibel, 1987] <author> W. Bibel. </author> <title> Automated Theorem Proving. </title> <publisher> Vieweg Verlag, </publisher> <address> Braunschweig, </address> <note> second edition, </note> <year> 1987. </year>
Reference-contexts: Section 8 gives an account of this implementation. Finally, we conclude by outlining future work in section 9. 2 The Connection Method The connection method is a formalism to compute the relations between different statements in a first-order language <ref> [Bibel, 1987] </ref>. It employs the propositional structure of a formula, which is defined by the various connections of the formula. A connection consists of a positive and a negative literal having the same predicate symbol.
Reference: [Bibel, 1988] <author> W. Bibel. </author> <booktitle> Advanced topics in automated deduction. In Nossum, editor, Fundamentals of Artificial Intelligence II. </booktitle> <publisher> Springer, </publisher> <year> 1988. </year>
Reference-contexts: As soon as a mating is selected all unification problems are solved in parallel. Section 6 presents the reduction techniques built into Chcl . These include the evaluation of isolated connections <ref> [Bibel, 1988] </ref> as well as the removal of non-unifiable or useless connections. In section 7 we modify Chcl such that binary constraint satisfaction problems can be solved efficiently. Chcl is currently been implemented at the International Computer Science Institute in Berkeley. Section 8 gives an account of this implementation. <p> One might expect that this defines a worst case situation for the computation of the spanning mating. However, if the AND-OR-tree degenerates to a chain, then all connections are isolated <ref> [Bibel, 1988] </ref> and the respective reduction techniques presented in the following subsection 6.3 will generate the corresponding spanning mating in one step. <p> However, besides the simple test in subsection 6.1 there is another exception which is due to <ref> [Bibel, 1988] </ref>.
Reference: [Colmerauer, 1982] <author> A. Colmerauer. </author> <title> Prolog and infinite trees. </title> <editor> In Clark and Tarnlund, editors, </editor> <booktitle> Logic Programming, </booktitle> <pages> pages 231-251. </pages> <publisher> Academic Press, </publisher> <year> 1982. </year> <month> 21 </month>
Reference-contexts: Consequently, activation from the spanning set layer will spread through the connection layer and into the unification layer, where the connected atoms (viz. the corresponding terms) are simultaneously unified. More precisely, they are unified over the domain of rational trees <ref> [Colmerauer, 1982] </ref>. If the user wants to unify the terms over the domain of finite trees, then she or he has to activate the occur check request unit OCR, which will cause an occur check to be performed in the occur check layer.
Reference: [Cooper and Swain, 1988] <author> P. R. Cooper and M. J. Swain. </author> <title> Parallelism and domain dependence in constraint satisfaction. </title> <type> Technical Report 255, </type> <institution> Computer Science Department, Univ. of Rochester, </institution> <year> 1988. </year>
Reference: [Diederich, 1988] <author> J. Diederich. </author> <title> Connectionist recruitment learning. </title> <booktitle> In Proceedings of the Euro-pean Conference on Artificial Intelligence, </booktitle> <pages> pages 351-356, </pages> <year> 1988. </year>
Reference-contexts: This is an instance of a more general problem encountered in almost all connectionist systems developed so far. It is the problem of how to recruit new units if the units used so far are incapable of representing additional knowledge. Techniques like recruitment learning <ref> [Feldman, 1982; Diederich, 1988] </ref> are promising, but the structures recruited so far using this technique are much simpler than the structures used in Chcl.
Reference: [Dowling and Gallier, 1984] <author> W. F. Dowling and J. H. Gallier. </author> <title> Linear-time algorithms for testing the satisfiability of propositional Horn formulae. </title> <journal> Journal of Logic Programming, </journal> <year> 1984. </year>
Reference-contexts: Since all clauses are Horn, a sequential algorithm may find a spanning mating in time linear to the number C of connections in the formula <ref> [Dowling and Gallier, 1984] </ref> 1 . In the spanning layer the connections of a formula are encoded as an AND-OR-tree, where the AND-branches correspond to the various conditions of a rule and the OR-branches correspond to the various alternatives to solve a condition. <p> This simplified test for the unifiability of connected atoms takes four steps and is performed for all connected atoms in parallel. 6.2 Removal of Useless Connections The technique to remove useless connections is based on the close correspondence between propositional Horn formulas and context-free grammars (cf. <ref> [Dowling and Gallier, 1984] </ref>). In context-free grammars a non-terminal symbol is said to be useless if it does not occur in a sen-tenial form or cannot generate a terminal string (cf. [Aho and Ullman, 1972]).
Reference: [Dwork et al., 1984] <author> C. Dwork, P. C. Kannelakis, and J. C. Mitchell. </author> <title> On the sequential nature of unification. </title> <journal> Journal of Logic Programming, </journal> <volume> 1 </volume> <pages> 35-50, </pages> <year> 1984. </year>
Reference-contexts: The complete network for solving the unification problem requires O (N 2 ) units and takes O (N) time in the worst case to settle down, where N is the number of positions in the unification problem. This behavior is not surprising since unification is known to be logspace-complete <ref> [Dwork et al., 1984] </ref>. However, for important special cases such as the word or the matching problem, the network computes the solution in two steps and this behaviour is independent of the size of the unification problem.
Reference: [Elman, 1989] <author> J. L. Elman. </author> <title> Structured representations and connectionist models. </title> <booktitle> In Proceedings of the Annual Conference of the Cognitive Science Society, </booktitle> <pages> pages 17-25, </pages> <year> 1989. </year>
Reference: [Feldman and Ballard, 1982] <author> J. A. Feldman and D. H. Ballard. </author> <title> Connectionist models and their properties. </title> <journal> Cognitive Science, </journal> <volume> 6(3) </volume> <pages> 205-254, </pages> <year> 1982. </year>
Reference-contexts: He or she will find that the formula eventually collapses to the empty clause generating the substitution fX 7! a; Y 7! b; Z 7! bg. To implement the arc consistency condition we need an additional OR-of-AND unit in the sense of <ref> [Feldman and Ballard, 1982] </ref> for each domain fact. Such a unit will be activated if there is a variable which does not support the value anymore. This solution is very similar to the encoding described by Cooper and Swain [1988] and used by Gusgen [1990]. <p> Gusgen's system may also handle global constraint satisfaction problems. But his units transmit Godel numbers and compute greatest lower bounds and least common multiples. These messages and operations are fairly complex and usually not allowed in truly connectionist systems (cf. <ref> [Feldman and Ballard, 1982] </ref>).
Reference: [Feldman et al., 1990] <author> J. A. Feldman, G. Lakoff, A. Stolcke, and S. H. Weber. </author> <title> Miniature language acquisition: A touchstone for cognitive science. </title> <booktitle> In Proceedings of the Annual Conference of the Cognitive Science Society, </booktitle> <pages> pages 686-693, </pages> <year> 1990. </year>
Reference-contexts: One currently pursued is spatial reasoning in the context of the L 0 project at the International Computer Science Institute <ref> [Feldman et al., 1990] </ref>. The intention of this project is to associate sentences describing spatial relations between objects and the corresponding scenes. Chcl is particularly suited for such a task: sentences can be represented as logical formulae, whereas the representation of scenes can be based on a connectionist representation.
Reference: [Feldman, 1982] <author> J. A. Feldman. </author> <title> Dynamic connections in neural networks. </title> <journal> Biological Cybernetics, </journal> <volume> 46 </volume> <pages> 27-39, </pages> <year> 1982. </year>
Reference-contexts: This is an instance of a more general problem encountered in almost all connectionist systems developed so far. It is the problem of how to recruit new units if the units used so far are incapable of representing additional knowledge. Techniques like recruitment learning <ref> [Feldman, 1982; Diederich, 1988] </ref> are promising, but the structures recruited so far using this technique are much simpler than the structures used in Chcl.
Reference: [Gusgen and Holldobler, 1991] <author> H.-W. Gusgen and S. Holldobler. </author> <title> Connectionist inference systems. </title> <editor> In B. Fronhofer and G. Wrightson, editors, </editor> <title> Parallelization in Inference Systems. </title> <publisher> Springer, </publisher> <year> 1991. </year> <note> (to appear). </note>
Reference-contexts: The ease and elegance with which symbolic manipulation techniques are applied to dynamically changing data structures in conventional processing paradigms has not yet been matched with connectionist means (see <ref> [Gusgen and Holldobler, 1991] </ref> in this book).
Reference: [Gusgen, 1990] <author> H. W. Gusgen. </author> <title> A connectionist approach to symbolic constraint satisfaction. </title> <type> Technical Report TR-90-018, </type> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA, </address> <year> 1990. </year>
Reference: [Holldobler and Hower, 1991] <author> S. Holldobler and W. Hower. </author> <title> Constraint satisfaction in a connectionist inference system. </title> <booktitle> In Proceedings of the International Symposium on Artificial Intelligence, </booktitle> <year> 1991. </year> <note> (to appear). </note>
Reference-contexts: However, Chcl is not especially adapted for constraint satisfaction problems and will not handle them efficiently. In particular, Chcl does not perform a check for arc consistency. In <ref> [Holldobler and Hower, 1991] </ref> it was shown how a slight modification of Chcl achieves arc consistency. This section contains a brief account of this modification.
Reference: [Holldobler, 1990a] <author> S. Holldobler. </author> <title> CHCL A connectionist inference system for a limited class of Horn clauses based on the connection method. </title> <type> Technical Report TR-90-042, </type> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA, </address> <year> 1990. </year>
Reference-contexts: In order to really constitute a solution, the terms in these candidate matings have to be unifiable. This article gives an overview of Chcl and its implementation. It is not concerned with technical details. They can be found in <ref> [Holldobler, 1990a] </ref> and [Kurfe, 1991b]. Chcl is based on Bibel's [1987] connection method and determines whether a set of Horn clauses is unsatisfi-able. Therefore, we introduce the connection method for sets of Horn clauses in the following section 2. <p> However, if the AND-OR-tree degenerates to a chain, then all connections are isolated [Bibel, 1988] and the respective reduction techniques presented in the following subsection 6.3 will generate the corresponding spanning mating in one step. For more details the reader is referred to <ref> [Holldobler, 1990a] </ref>, where all units together with their thresholds and weighted links in the spanning layer are defined. 6 Reduction Techniques As the name indicates reduction techniques are used to reduce the search space. <p> Several of these techniques are built into Chcl and they are presented in this section. However, we can give only an informal account of the various techniques and their realization in Chcl. All details can be found in <ref> [Holldobler, 1990a] </ref>. 1 See also [Scutella, 1990] for a correction of a bug in Dowling's and Gallier's algorithm. 8 6.1 Removal of Non-unifiable Connections A connection cannot participate in any proof if the connected atoms are not unifiable. Hence, the obvious technique would be to test all connections in advance. <p> The structure and behavior of the unification network are derived in a straightforward way from the algorithm described in Section 4, or in more detail in <ref> [Holldobler, 1990a] </ref>. Structure of the Network The unification network is modeled according to the representation of terms as position-label pairs. These pairs are arranged as a matrix, with positions as rows and symbols as columns. <p> The remaining layers can easily be implemented in very much the same way. The units and links are precisely specified in <ref> [Holldobler, 1990a] </ref>. 9 Future Work The current status of Chcl shows the correctness of the approach through its formal description as well as its feasibility through its implementation.
Reference: [Holldobler, 1990b] <author> S. Holldobler. </author> <title> A structured connectionist unification algorithm. </title> <booktitle> In Proceedings of the AAAI National Conference on Artificial Intelligence, </booktitle> <pages> pages 587-593, </pages> <year> 1990. </year> <note> A long version appeared as Technical Report TR-90-012, </note> <institution> International Computer Science Institute, Berkeley, California. </institution>
Reference-contexts: The approach proposed within Chcl relies on a full-fledged, distributed unification algorithm which computes the most general unifier for a set of terms <ref> [Holldobler, 1990b] </ref>. The time required is linear to the size of the terms in the worst case, and constant (two steps) for important special cases like the word or the matching problem. <p> As shown in <ref> [Holldobler, 1990b] </ref> this congruence relation is the closure of the operations Singularity if h 1 ; Xi, h 2 ; Xi, and h 1 ; si are active then activate h 2 ; si and Decomposition if h 1 ; Xi, h 2 ; Xi, and h 1 :; si are <p> The unification algorithm within Chcl ignores this problem unless the user has activated the OCR unit shown in figure 2. In this case the occur check layer will eventually detect the problem and activate the NO unit. <ref> [Holldobler, 1990b] </ref> contains a formal definition of the term, unification, and occur check layer as well as a proof that the network computes the finest valid congruence relation for a unification problem if such a relation exists.
Reference: [Jordan, 1986] <author> M. I. Jordan. </author> <title> Attractor dynamics and parallelism in a connectionist sequential machine. </title> <booktitle> In Proceedings of the Annual Conference of the Cognitive Science Society, </booktitle> <year> 1986. </year>
Reference: [Kurfe, 1991a] <author> F. Kurfe. </author> <title> Unification on a connectionist simulator. </title> <booktitle> In Proceedings of the International Conference on Artificial Neural Networks, 1991. ICSI. </booktitle> <pages> 22 </pages>
Reference-contexts: The modular construction of Icsim also allows an easy portation to dedicated hardware, eg. the neural network coprocessor Rap [Morgan, 1990]. 8.2 Unification The first step in the implementation of Chcl was a realization of the unification algorithm <ref> [Kurfe, 1991a] </ref>. The structure and behavior of the unification network are derived in a straightforward way from the algorithm described in Section 4, or in more detail in [Holldobler, 1990a]. Structure of the Network The unification network is modeled according to the representation of terms as position-label pairs.
Reference: [Kurfe, 1991b] <author> F. Kurfe. </author> <title> Unification with icsim. </title> <type> Technical report, </type> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA, </address> <year> 1991. </year>
Reference-contexts: In order to really constitute a solution, the terms in these candidate matings have to be unifiable. This article gives an overview of Chcl and its implementation. It is not concerned with technical details. They can be found in [Holldobler, 1990a] and <ref> [Kurfe, 1991b] </ref>. Chcl is based on Bibel's [1987] connection method and determines whether a set of Horn clauses is unsatisfi-able. Therefore, we introduce the connection method for sets of Horn clauses in the following section 2.
Reference: [Mackworth, 1987] <author> A. Mackworth. </author> <title> Constraint satisfaction. </title> <editor> In Shapiro, editor, </editor> <booktitle> Encyclopedia of Artificial Intelligence, </booktitle> <pages> pages 205-211. </pages> <publisher> John Wiley & Sons, </publisher> <year> 1987. </year>
Reference-contexts: The goal is to find bindings for the variables X, Y, and Z such that all unary and binary constraints are simultaneously fulfilled. This problem can be expressed by the following formula, where the D-clauses express the domain facts and the C-clauses express the binary constraints. 2 See <ref> [Mackworth, 1987] </ref> for an introduction to constraint satisfaction. 11 ?- CXY (X,Y), CXZ (X,Z), CYZ (Y,Z) CXY (a,b) :- DX (a), DY (b) CXZ (a,c) :- DX (a), DZ (c) CYZ (c,c) :- DY (c), DZ (c) All connections between domain facts and the conditions of the constraint rules are isolated
Reference: [Meyer, 1988] <author> B. Meyer. </author> <title> Object-Oriented Software Construction. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: Schmidt [1990]. Icsim provides a set of basic building blocks for connectionist networks as a collection of library classes. It is implemented in Eiffel <ref> [Meyer, 1988] </ref>, an object-oriented language and development environment.
Reference: [Morgan, 1990] <author> N. Morgan. </author> <title> The ring array processor (RAP): Algorithms and architecture. </title> <type> Technical Report TR-90-47, </type> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA, </address> <year> 1990. </year>
Reference-contexts: Icsim currently is being ported to Sather, an offspring of Eiffel aimed at simplification and more efficient execution [Omohundro, 1991]. The modular construction of Icsim also allows an easy portation to dedicated hardware, eg. the neural network coprocessor Rap <ref> [Morgan, 1990] </ref>. 8.2 Unification The first step in the implementation of Chcl was a realization of the unification algorithm [Kurfe, 1991a]. The structure and behavior of the unification network are derived in a straightforward way from the algorithm described in Section 4, or in more detail in [Holldobler, 1990a]. <p> This implementation certainly will not rival logic programming systems or theorem provers with respect to speed and functionality; it is meant to demonstrate the feasibility of the approach, and for experimentation. Mid-term goals are the portation to dedicated connectionist architectures like ICSI's Rap <ref> [Morgan, 1990] </ref>, or to massively parallel systems like the connection machine [Thi, 1987]. Representation An important goal for future implementations will be to overcome the quadratic number of units.
Reference: [Omohundro, 1991] <author> S. Omohundro. </author> <title> Differences between Sather and Eiffel. </title> <type> Eiffel Outlook, </type> <year> 1991. </year>
Reference-contexts: Icsim currently is being ported to Sather, an offspring of Eiffel aimed at simplification and more efficient execution <ref> [Omohundro, 1991] </ref>. The modular construction of Icsim also allows an easy portation to dedicated hardware, eg. the neural network coprocessor Rap [Morgan, 1990]. 8.2 Unification The first step in the implementation of Chcl was a realization of the unification algorithm [Kurfe, 1991a].
Reference: [Paterson and Wegman, 1978] <author> M. S. Paterson and M. N. Wegman. </author> <title> Linear unification. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 16 </volume> <pages> 158-167, </pages> <year> 1978. </year>
Reference-contexts: For each position and for each symbol s occurring in a term the term layer contains a unit h; si. A term like obj (X,circle,dark) can now be represented by externally activating the units h0; obji, h0:1; Xi, h0:2; circlei, and h0:3; darki. &gt;From <ref> [Paterson and Wegman, 1978] </ref> we know that the most general unifier of two terms can be obtained by computing a finest valid congruence relation on the representation of the terms.
Reference: [Pollack, 1988] <author> J. B. Pollack. </author> <title> Recursive auto-associative memory: Devising compositional distributed representations. </title> <booktitle> In Proceedings of the Annual Conference of the Cognitive Science Society, </booktitle> <year> 1988. </year>
Reference-contexts: In addition, one may argue that this is a clever implementation maneuver, but not really a fundamental solution to the problem how to represent multiple instances of a clause. Another possibility is the use of an recursive auto-associative memory <ref> [Pollack, 1988; Pollack, 1990] </ref>, which provides a way to store variable-sized recursive data structures in patterns of a fixed width.
Reference: [Pollack, 1990] <author> J. B. Pollack. </author> <title> Recursive distributed representations. </title> <journal> Artificial Intelligence, </journal> <volume> 46 </volume> <pages> 77-105, </pages> <year> 1990. </year>
Reference-contexts: In addition, one may argue that this is a clever implementation maneuver, but not really a fundamental solution to the problem how to represent multiple instances of a clause. Another possibility is the use of an recursive auto-associative memory <ref> [Pollack, 1988; Pollack, 1990] </ref>, which provides a way to store variable-sized recursive data structures in patterns of a fixed width.
Reference: [Robinson, 1965] <author> J. A. Robinson. </author> <title> A machine-oriented logic based on the resolution principle. </title> <journal> Journal of the ACM, </journal> <volume> 12 </volume> <pages> 23-41, </pages> <year> 1965. </year>
Reference: [Schmidt, 1990] <author> H. W. Schmidt. ICSIM: </author> <title> Initial design of an object-oriented net simulator. </title> <type> Technical Report TR-90-055, </type> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA, </address> <year> 1990. </year>
Reference: [Schumann et al., 1989] <author> J. Schumann, W. Ertel, and C. Suttner. </author> <title> Learning heuristics for a theorem prover using back propagation. </title> <booktitle> In Osterreichische AI Tagung, </booktitle> <year> 1989. </year>
Reference-contexts: This can be enhanced by learning semantic strategies based on experience gathered from the solution process of previously solved formulae <ref> [Suttner, 1989; Schumann et al., 1989; Ultsch et al., 1990] </ref>. Learning can be useful in different stages of the execution, and on different levels in the network.
Reference: [Scutella, 1990] <author> M. G. Scutella. </author> <title> A note on Dowling and Gallier's top-down algorithm for propositional Horn satisfiability. </title> <journal> Journal of Logic Programming, </journal> <pages> 8(265-273), </pages> <year> 1990. </year>
Reference-contexts: Several of these techniques are built into Chcl and they are presented in this section. However, we can give only an informal account of the various techniques and their realization in Chcl. All details can be found in [Holldobler, 1990a]. 1 See also <ref> [Scutella, 1990] </ref> for a correction of a bug in Dowling's and Gallier's algorithm. 8 6.1 Removal of Non-unifiable Connections A connection cannot participate in any proof if the connected atoms are not unifiable. Hence, the obvious technique would be to test all connections in advance.
Reference: [Shastri and Ajjanagadde, 1990a] <author> L. Shastri and V. Ajjanagadde. </author> <title> From associations to systematic reasoning: A connectionist representation of rules, variables and dynamic bindings. </title> <type> Technical Report MS-CIS-90-05, </type> <institution> Department of Computer and Information Science, University of Pennsylvania, Philadelphia, School of Engineering and Applied Science, </institution> <address> PA 19104-6389, </address> <year> 1990. </year>
Reference-contexts: In fact, for the purpose of this paper Chcl can handle only the original clause, where we assume that all clauses are standardized apart (ie. do not share common variables). Techniques for handling a fixed number of copies can be found in <ref> [Shastri and Ajjanagadde, 1990a] </ref>. Since there are now only finitely many different spanning matings, the logic is decidable. The alert reader may have observed that finding a spanning mating now corresponds to deciding the satisfiability of the propositional structure of the given formula. <p> Copies An extension to handling a finite number of clause copies can be based on the use of different phases in the execution for the different copies as described in <ref> [Shastri and Ajjanagadde, 1990a] </ref>. It is not clear, however, if this approach can handle an arbitrary number of clauses at runtime, which would be necessary in the case of recursive formulae.
Reference: [Shastri and Ajjanagadde, 1990b] <author> L. Shastri and V. Ajjanagadde. </author> <title> An optimally efficient limited inference system. </title> <booktitle> In Proceedings of the AAAI National Conference on Artificial Intelligence, </booktitle> <pages> pages 563-570, </pages> <year> 1990. </year>
Reference-contexts: One particular problem with respect to logic is the treatment of variable bindings; although some proposals to solve this problem have been made (see eg. <ref> [Ballard, 1986; Touretzky and Hinton, 1988; Shastri and Ajjanagadde, 1990b] </ref>), their integration into a logical framework is not fully satisfying. The approach proposed within Chcl relies on a full-fledged, distributed unification algorithm which computes the most general unifier for a set of terms [Holldobler, 1990b].
Reference: [Smolensky, 1987] <author> P. Smolensky. </author> <title> On variable binding and the representation of symbolic structures in connectionist systems. </title> <type> Technical Report CU-CS-355-87, </type> <institution> Department of Computer Science & Institute of Cognitive Science, University of Colorado, Boulder, </institution> <address> CO 80309-0430, </address> <year> 1987. </year>
Reference: [Stickel, 1987] <author> M. E. Stickel. </author> <title> An introduction to automated deduction. </title> <editor> In W. Bibel and P. Jor-rand, editors, </editor> <booktitle> Fundamentals of Artificial Intelligence, </booktitle> <pages> pages 75 - 132. </pages> <publisher> Springer, </publisher> <year> 1987. </year> <month> 23 </month>
Reference-contexts: Hence, the structured connectionist unification algorithm built into Chcl must be able to unify 1 arbitrary first-order terms. This algorithm is presented in section 4. To prove the unsatisfiability of a given formula, we have to identify an appropriate set of connections (eg. <ref> [Stickel, 1987] </ref>). Bibel [1987] calls such sets of connections spanning matings. A spanning mating defines a proof iff all connected literals are simultaneously unifiable. In Chcl the spanning matings are computed one at a time and this process is described in section 5.
Reference: [Stolcke and Wu, 1991] <author> A. Stolcke and D. Wu. </author> <title> Tree matching with recursive distributed repre-sentations. </title> <booktitle> International Computer Science Institute, </booktitle> <address> Berkeley, CA, </address> <year> 1991. </year> <note> submitted to NIPS 91. </note>
Reference-contexts: As mentioned before, possible solutions for this problem are the use of phases, indices or signatures or the use of a recursive auto-associative memory. Promising first experiments using a recursive auto-associative memory to learn a restricted version of the unification problem have been performed by <ref> [Stolcke and Wu, 1991] </ref>. Execution As a result of the enormous number of units and connections, execution times at the moment are rather slow even on relatively fast workstations. In addition to the use of dedicated or massively parallel machinery, optimizations are pursued in the implementation of 20 Icsim .
Reference: [Suttner, 1989] <author> C. Suttner. </author> <title> Learning heuristics for automated theorem proving. </title> <type> Master's thesis, </type> <institution> Institut fur Informatik, Technische Universitat Munchen, </institution> <year> 1989. </year>
Reference-contexts: This can be enhanced by learning semantic strategies based on experience gathered from the solution process of previously solved formulae <ref> [Suttner, 1989; Schumann et al., 1989; Ultsch et al., 1990] </ref>. Learning can be useful in different stages of the execution, and on different levels in the network.
Reference: [Thi, 1987] <author> Thinking Machines Corporation. </author> <title> Connection Machine Model CM-2 Technical Summary. </title> <type> Technical Report HA87-4, </type> <year> 1987. </year>
Reference-contexts: Mid-term goals are the portation to dedicated connectionist architectures like ICSI's Rap [Morgan, 1990], or to massively parallel systems like the connection machine <ref> [Thi, 1987] </ref>. Representation An important goal for future implementations will be to overcome the quadratic number of units.
Reference: [Touretzky and Hinton, 1988] <author> D. S. Touretzky and G. E. Hinton. </author> <title> A distributed connectionist production system. </title> <journal> Cognitive Science, </journal> <volume> 12:423 - 466, </volume> <year> 1988. </year>
Reference-contexts: One particular problem with respect to logic is the treatment of variable bindings; although some proposals to solve this problem have been made (see eg. <ref> [Ballard, 1986; Touretzky and Hinton, 1988; Shastri and Ajjanagadde, 1990b] </ref>), their integration into a logical framework is not fully satisfying. The approach proposed within Chcl relies on a full-fledged, distributed unification algorithm which computes the most general unifier for a set of terms [Holldobler, 1990b].
Reference: [Ultsch et al., 1990] <author> A. Ultsch, R. Hannuschka, U. Hartmann, and V. Weber. </author> <title> Learning of control knowledge for symbolic proofs with backpropagation networks. </title> <editor> In R. Eckmiller, G. Hartmann, and G. Hauske, editors, </editor> <booktitle> Parallel Processing in Neural Systems and Computers, </booktitle> <pages> pages 499-502. </pages> <publisher> Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: This can be enhanced by learning semantic strategies based on experience gathered from the solution process of previously solved formulae <ref> [Suttner, 1989; Schumann et al., 1989; Ultsch et al., 1990] </ref>. Learning can be useful in different stages of the execution, and on different levels in the network.
Reference: [Weber and Stolcke, 1990] <author> S. H. Weber and A. Stolcke. </author> <title> L 0 : A testbed for miniature language aquisition. </title> <type> Technical Report TR-90-010, </type> <institution> International Computer Science Institute, Berkeley, </institution> <address> CA, </address> <year> 1990. </year>
Reference-contexts: To illustrate the connection method (and its connectionist realization in the following sections) we consider a (simplified) program segment taken from the L 0 project at the International Computer Science Institute <ref> [Weber and Stolcke, 1990] </ref>. This project constitutes a recent effort in Cognitive Science to build a natural language aquisition system for a limited visual domain. <p> To keep the example small we simply assume that r 1 is the region above the object b and that object a is in the striped region r 1 as well as in the dotted region r 2 , whereas the simulation in <ref> [Weber and Stolcke, 1990] </ref> provides further rules for the predicates rAbove and in to describe these regions. The structure of the formula is given by the connections I to VIII.
References-found: 43

