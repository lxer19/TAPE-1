URL: http://www.cs.uni-bonn.de/~ralf/IFPL/simplifier.ps.gz
Refering-URL: http://www.cs.uni-bonn.de/~ralf/index.body.html
Root-URL: http://cs.uni-bonn.de
Title: Compilation by Transformation in the Glasgow Haskell Compiler  
Author: Simon Peyton Jones Andre Santos 
Affiliation: University of Glasgow  
Abstract: In this paper we describe the full set of local program transformations implemented in the Glasgow Haskell Compiler. The transformations are presented as source to source transformations in a simple functional language. The idea is that by composing these simple and small high level transformations one can achieve most of the benefits of more complicated and specialised transformations, many of which are often implemented as code generation optimisations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Appel. </author> <title> Compiling with Continuations. </title> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference: [2] <author> A. Appel and T. Jim. </author> <title> Continuation-passing, closure-passing style. </title> <booktitle> In ACM Conference on Principles of Programming Languages, </booktitle> <pages> pages 293-302, </pages> <month> January </month> <year> 1989. </year>
Reference: [3] <author> W. N. Chin. </author> <title> Automatic Methods for Program Transformation. </title> <type> PhD thesis, </type> <institution> Imperial College, </institution> <address> London, </address> <month> March </month> <year> 1990. </year>
Reference: [4] <author> A. Gill, J. Launchbury, and S. Peyton Jones. </author> <title> A short cut to deforestation. </title> <booktitle> In Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 223-232, </pages> <address> Copenhagen, June 1993. </address> <publisher> ACM Press. </publisher>
Reference: [5] <author> R. J. M. Hughes. </author> <title> The Design and Implementation of Programming Languages. </title> <type> PhD thesis, </type> <institution> Programming Research Group, Oxford University, </institution> <month> July </month> <year> 1983. </year>
Reference: [6] <author> T. Johnsson. </author> <title> Lambda lifting: Transforming programs to recursive equations. </title> <booktitle> In Functional Programming Languages and Computer Architecture, number 201 in LNCS, </booktitle> <pages> pages 190-203, </pages> <address> Nancy, </address> <month> September </month> <year> 1985. </year> <note> Springer-Verlag. </note>
Reference: [7] <author> R. Kelsey and P. Hudak. </author> <title> Realistic compilation by program transformation. </title> <booktitle> In ACM Conference on Principles of Programming Languages, </booktitle> <pages> pages 281-292, </pages> <month> January </month> <year> 1989. </year>
Reference: [8] <author> R. A. Kelsey. </author> <title> Compilation by Program Transformation. </title> <type> PhD thesis, </type> <institution> Yale University, Department of Computer Science, </institution> <month> May </month> <year> 1989. </year> <month> YALEU/DCS/RR-702. </month>
Reference: [9] <author> D. A. Kranz. </author> <title> ORBIT an optimising compiler for Scheme. </title> <type> PhD thesis, </type> <institution> Yale University, Department of Computer Science, </institution> <month> May </month> <year> 1988. </year>
Reference: [10] <author> J. Launchbury and P. M. </author> <title> Sansom, </title> <editor> editors. </editor> <booktitle> Functional Programming, Glas-gow 1992, </booktitle> <address> Ayr, Scotland, 1992. </address> <publisher> Springer Verlag, Workshops in Computing. </publisher>
Reference: [11] <author> S. Marlow and P. Wadler. </author> <title> Deforestation for higher-order functions. </title> <booktitle> In Launchbury and Sansom [10], </booktitle> <pages> pages 154-165. </pages>
Reference: [12] <author> B. Matthews. MERILL: </author> <title> An equational reasoning system in Standard ML. </title> <booktitle> In 5th International Conference on Rewriting Techniques and Applications, number 690 in LNCS, </booktitle> <pages> pages 414-445. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: In [13] a proof of confluence and termination of a subset of the rules was obtained, using the order-sorted equational theorem proving system MERILL <ref> [12] </ref>, developed at Glasgow University. Initially the system was used to prove confluence and termination for the subset of the rules containing the let and case floating rules.
Reference: [13] <author> B. Matthews. </author> <title> Analysing a set of transformation rules using completion. </title> <year> 1994. </year>
Reference-contexts: As the transformations are in a very simple left to rigth form with very few side conditions they are good candidates to be treated as rewrite rules in a term rewriting system. In <ref> [13] </ref> a proof of confluence and termination of a subset of the rules was obtained, using the order-sorted equational theorem proving system MERILL [12], developed at Glasgow University.
Reference: [14] <author> W. Partain. </author> <title> The nofib benchmarking suite. </title> <note> In Launchbury and Sansom [10]. </note>
Reference: [15] <author> S. Peyton Jones, C. Hall, K. Hammond, W. Partain, and P. Wadler. </author> <title> The Glasgow Haskell compiler: a technical overview. </title> <booktitle> In UK Joint Framework for Information Technology (JFIT) Technical Conference, </booktitle> <address> Keele, </address> <month> March </month> <year> 1993. </year>
Reference: [16] <author> S. Peyton Jones and J. Launchbury. </author> <title> Unboxed values as first class citizens. </title> <booktitle> In Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 636-666, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: of known constructor transformation can eliminate the second evaluation of x and generate the code we expect: case x of I# x# -&gt; case x# +# x# of r# -&gt; I# r# The transformations in this case are making use of the notion of unboxed data types, as presented in <ref> [16] </ref>. 4.2 Lazy pattern matching Lazy pattern matching is very inefficient.
Reference: [17] <author> S. Peyton Jones and D. Lester. </author> <title> A modular fully-lazy lambda lifter in Haskell. </title> <journal> Software Practice and Experience, </journal> <volume> 21(5) </volume> <pages> 479-506, </pages> <month> May </month> <year> 1991. </year>
Reference: [18] <author> S. Peyton Jones and W. Partain. </author> <title> On the effectiveness of a simple strictness analyser. </title> <booktitle> In Functional Programming, </booktitle> <address> Glasgow 1993, Ayr, Scotland, 1993. </address> <publisher> Springer Verlag, Workshops in Computing. </publisher>
Reference-contexts: These numbers also exclude any benefits from strictness analysis, which is exploited by the compiler using the let-to-case and case floating from let transformations, therefore their effect (which is essentially the effect of strictness analysis as presented in <ref> [18] </ref>) is not reflected in these measurements.
Reference: [19] <author> P. Wadler. </author> <title> Deforestation: Transforming programs to eliminate trees. </title> <journal> Theoretical Computer Science, </journal> <volume> 73 </volume> <pages> 231-248, </pages> <year> 1990. </year>
References-found: 19

