URL: ftp://theory.lcs.mit.edu/pub/people/danar/test-bd.ps.gz
Refering-URL: http://theory.lcs.mit.edu/~danar/papers.html
Root-URL: 
Title: Property Testing in Bounded Degree Graphs  
Author: Oded Goldreich Dana Ron 
Keyword: query complexity of testing algorithms for the Bipartite and Expander properties.  
Abstract: We further develop the study of testing graph properties as initiated by Goldreich, Goldwasser and Ron. Whereas they view graphs as represented by their adjacency matrix and measure distance between graphs as a fraction of all possible vertex pairs, we view graphs as represented by bounded-length incidence lists and measure distance between graphs as a fraction of the maximum possible number of edges. Thus, while the previous model is most appropriate for the study of dense graphs, our model is most appropriate for the study of bounded-degree graphs. In particular, we present randomized algorithms for testing whether an unknown bounded-degree graph is connected, k-connected (for k &gt; 1), planar, etc. Our algorithms work in time polynomial in 1=*, always accept the graph when it has the tested property, and reject with high probability if the graph is *-away from having the property. For example, the 2-Connectivity algorithm rejects (w.h.p.) any N -vertex d-degree graph for which more than * (dN ) edges need to be added to make the graph 2-edge-connected. In addition we prove lower bounds of ( p
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verification and intractability of approximation problems. </title> <booktitle> In 33rd FOCS, </booktitle> <pages> pages 14-23, </pages> <year> 1992. </year>
Reference-contexts: E-mail: danar@theory.lcs.mit.edu. Supported by an NSF postdoctoral fellowship. be of a qualitative nature; for example, being a connected graph (in case the instances are graphs), or being a linear function (in case the instances are functions). The latter approach underlines all work on testing low-degree polynomials <ref> [7, 21, 13, 4, 3, 11, 1] </ref> and codes [3, 1, 5, 16], and its relevance to the construction of probabilistically checkable proofs [4, 3, 11, 2, 1] is well known. <p> The latter approach underlines all work on testing low-degree polynomials [7, 21, 13, 4, 3, 11, 1] and codes <ref> [3, 1, 5, 16] </ref>, and its relevance to the construction of probabilistically checkable proofs [4, 3, 11, 2, 1] is well known. Recently, a general formulation of property testing has been presented in [14], and its connection to the former approach to approximation have been demonstrated. <p> The latter approach underlines all work on testing low-degree polynomials [7, 21, 13, 4, 3, 11, 1] and codes [3, 1, 5, 16], and its relevance to the construction of probabilistically checkable proofs <ref> [4, 3, 11, 2, 1] </ref> is well known. Recently, a general formulation of property testing has been presented in [14], and its connection to the former approach to approximation have been demonstrated. <p> Finally, we observe that the known results on inapprox-imability of Minimum Vertex Cover (and Dominating Set) for bounded-degree graphs <ref> [1, 20] </ref>, rule out the possibility of efficient testing algorithms for these properties in our model. 1.2 What does this type of approximation mean? To make the discussion less abstract, let us consider the k-(edge)-connectivity tester. <p> The cut edge chosen is the one having the smallest cost, where edges are assigned random costs as follows. Whenever a new vertex is added to S, its incident edges which were not yet assigned costs are each as signed a random cost uniformly in <ref> [0; 1] </ref>. Note that, as in the case of k = 1, the algorithm never rejects a k-connected graph (simply since a k-connected graph does not have any cut of size less than k). <p> An alternative presentation is to assign all edges uniformly chosen costs in <ref> [0; 1] </ref> and to contract the cheapest edge at each step. Karger shows that the probability that the algorithm never contracts a min-cut edge is at least 2n 2 .
Reference: [2] <author> S. Arora and S. Safra. </author> <title> Probabilistic checkable proofs: A new characterization of NP. </title> <booktitle> In 33rd FOCS, </booktitle> <pages> pages 1-13, </pages> <year> 1992. </year>
Reference-contexts: The latter approach underlines all work on testing low-degree polynomials [7, 21, 13, 4, 3, 11, 1] and codes [3, 1, 5, 16], and its relevance to the construction of probabilistically checkable proofs <ref> [4, 3, 11, 2, 1] </ref> is well known. Recently, a general formulation of property testing has been presented in [14], and its connection to the former approach to approximation have been demonstrated.
Reference: [3] <author> L. Babai, L. Fortnow, L. Levin, and M. Szegedy. </author> <title> Checking computations in polylogarithmic time. </title> <booktitle> In 23nd STOC, </booktitle> <pages> pages 21-31, </pages> <year> 1991. </year>
Reference-contexts: E-mail: danar@theory.lcs.mit.edu. Supported by an NSF postdoctoral fellowship. be of a qualitative nature; for example, being a connected graph (in case the instances are graphs), or being a linear function (in case the instances are functions). The latter approach underlines all work on testing low-degree polynomials <ref> [7, 21, 13, 4, 3, 11, 1] </ref> and codes [3, 1, 5, 16], and its relevance to the construction of probabilistically checkable proofs [4, 3, 11, 2, 1] is well known. <p> The latter approach underlines all work on testing low-degree polynomials [7, 21, 13, 4, 3, 11, 1] and codes <ref> [3, 1, 5, 16] </ref>, and its relevance to the construction of probabilistically checkable proofs [4, 3, 11, 2, 1] is well known. Recently, a general formulation of property testing has been presented in [14], and its connection to the former approach to approximation have been demonstrated. <p> The latter approach underlines all work on testing low-degree polynomials [7, 21, 13, 4, 3, 11, 1] and codes [3, 1, 5, 16], and its relevance to the construction of probabilistically checkable proofs <ref> [4, 3, 11, 2, 1] </ref> is well known. Recently, a general formulation of property testing has been presented in [14], and its connection to the former approach to approximation have been demonstrated.
Reference: [4] <author> L. Babai, L. Fortnow, and C. Lund. </author> <title> Non-deterministic exponential time has two-prover interactive protocols. </title> <journal> Computational Complexity, </journal> <volume> 1(1) </volume> <pages> 3-40, </pages> <year> 1991. </year>
Reference-contexts: E-mail: danar@theory.lcs.mit.edu. Supported by an NSF postdoctoral fellowship. be of a qualitative nature; for example, being a connected graph (in case the instances are graphs), or being a linear function (in case the instances are functions). The latter approach underlines all work on testing low-degree polynomials <ref> [7, 21, 13, 4, 3, 11, 1] </ref> and codes [3, 1, 5, 16], and its relevance to the construction of probabilistically checkable proofs [4, 3, 11, 2, 1] is well known. <p> The latter approach underlines all work on testing low-degree polynomials [7, 21, 13, 4, 3, 11, 1] and codes [3, 1, 5, 16], and its relevance to the construction of probabilistically checkable proofs <ref> [4, 3, 11, 2, 1] </ref> is well known. Recently, a general formulation of property testing has been presented in [14], and its connection to the former approach to approximation have been demonstrated.
Reference: [5] <author> M. Bellare, O. Goldreich, and M. Sudan. </author> <title> Free bits, pcps and non-approximability towards tight results. </title> <booktitle> In 36th FOCS, </booktitle> <pages> pages 422-431, </pages> <year> 1995. </year> <note> Full version available from ECCC, http://www.eccc.uni-trier.de/eccc/. </note>
Reference-contexts: The latter approach underlines all work on testing low-degree polynomials [7, 21, 13, 4, 3, 11, 1] and codes <ref> [3, 1, 5, 16] </ref>, and its relevance to the construction of probabilistically checkable proofs [4, 3, 11, 2, 1] is well known. Recently, a general formulation of property testing has been presented in [14], and its connection to the former approach to approximation have been demonstrated.
Reference: [6] <author> A. Benczur. </author> <title> A representation of cuts within 6/5 times the edge connectivity with applications. </title> <booktitle> In 36th FOCS, </booktitle> <pages> pages 92-101, </pages> <year> 1995. </year>
Reference-contexts: In this respect we mention the existence of efficient algorithms for determining a minimum set of edges to be added to a graph in order to make it k-connected <ref> [22, 19, 12, 6, 18] </ref>. 1.3 Testing connectivity to the rest of the graph Our algorithm for testing k-edge-connectivity, for k 2, uses a subroutine which may be of independent interest.
Reference: [7] <author> M. Blum, M. Luby, and R. Rubinfeld. </author> <title> Self-testing/correcting with applications to numerical problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 47 </volume> <pages> 549-595, </pages> <year> 1993. </year>
Reference-contexts: E-mail: danar@theory.lcs.mit.edu. Supported by an NSF postdoctoral fellowship. be of a qualitative nature; for example, being a connected graph (in case the instances are graphs), or being a linear function (in case the instances are functions). The latter approach underlines all work on testing low-degree polynomials <ref> [7, 21, 13, 4, 3, 11, 1] </ref> and codes [3, 1, 5, 16], and its relevance to the construction of probabilistically checkable proofs [4, 3, 11, 2, 1] is well known.
Reference: [8] <author> E. A. Dinic, A. V. Karazanov, and M. V. Lomonosov. </author> <title> On the structure of the system of minimum edge cuts in a graph. </title> <booktitle> Studies in Discrete Optimizations, </booktitle> <pages> pages 290-306, </pages> <year> 1976. </year> <note> In Russian. </note>
Reference-contexts: We later (in Sec. 3.2.5) remove this assumption. We next state some facts, necessary for our algorithms, concerning the structure of (k 1)-connected graphs. Let G be a (k 1)-connected graph. Then we can define an auxiliary graph T G [9] (based on the cactus struc-ture of <ref> [8] </ref>), which is a tree, such that for every k-class in G there is a corresponding (unique) node in T G . The tree T G might include additional auxiliary nodes, but they are not leaves and we shall not be interested in them here.
Reference: [9] <author> Y. Dinitz and J. Westbrook. </author> <title> Maintaining the classes of 4-edge-connectivity in a graph on-line. </title> <type> Technical Report #871, </type> <institution> Technion, Department of Computer Science, </institution> <year> 1995. </year>
Reference-contexts: We later (in Sec. 3.2.5) remove this assumption. We next state some facts, necessary for our algorithms, concerning the structure of (k 1)-connected graphs. Let G be a (k 1)-connected graph. Then we can define an auxiliary graph T G <ref> [9] </ref> (based on the cactus struc-ture of [8]), which is a tree, such that for every k-class in G there is a corresponding (unique) node in T G .
Reference: [10] <author> S. </author> <title> Even. Graph Algorithms. </title> <publisher> Computer Science Press, </publisher> <year> 1979. </year>
Reference: [11] <author> U. Feige, S. Goldwasser, L. Lovasz, S. Safra, and M. Szegedy. </author> <title> Approximating clique is almost NP-complete. </title> <booktitle> In 32nd FOCS, </booktitle> <pages> pages 2-12, </pages> <year> 1991. </year>
Reference-contexts: E-mail: danar@theory.lcs.mit.edu. Supported by an NSF postdoctoral fellowship. be of a qualitative nature; for example, being a connected graph (in case the instances are graphs), or being a linear function (in case the instances are functions). The latter approach underlines all work on testing low-degree polynomials <ref> [7, 21, 13, 4, 3, 11, 1] </ref> and codes [3, 1, 5, 16], and its relevance to the construction of probabilistically checkable proofs [4, 3, 11, 2, 1] is well known. <p> The latter approach underlines all work on testing low-degree polynomials [7, 21, 13, 4, 3, 11, 1] and codes [3, 1, 5, 16], and its relevance to the construction of probabilistically checkable proofs <ref> [4, 3, 11, 2, 1] </ref> is well known. Recently, a general formulation of property testing has been presented in [14], and its connection to the former approach to approximation have been demonstrated.
Reference: [12] <author> H. Gabow. </author> <title> Applications of a poset representation to edge connectivity and graph rigidity. </title> <booktitle> In 32nd FOCS, </booktitle> <pages> pages 812-821, </pages> <year> 1991. </year>
Reference-contexts: In this respect we mention the existence of efficient algorithms for determining a minimum set of edges to be added to a graph in order to make it k-connected <ref> [22, 19, 12, 6, 18] </ref>. 1.3 Testing connectivity to the rest of the graph Our algorithm for testing k-edge-connectivity, for k 2, uses a subroutine which may be of independent interest.
Reference: [13] <author> P. Gemmell, R. Lipton, R. Rubinfeld, M. Sudan, and A. Wigderson. </author> <title> Self-testing/correcting for polynomials and for approximate functions. </title> <booktitle> In 23nd STOC, </booktitle> <pages> pages 32-42, </pages> <year> 1991. </year>
Reference-contexts: E-mail: danar@theory.lcs.mit.edu. Supported by an NSF postdoctoral fellowship. be of a qualitative nature; for example, being a connected graph (in case the instances are graphs), or being a linear function (in case the instances are functions). The latter approach underlines all work on testing low-degree polynomials <ref> [7, 21, 13, 4, 3, 11, 1] </ref> and codes [3, 1, 5, 16], and its relevance to the construction of probabilistically checkable proofs [4, 3, 11, 2, 1] is well known.
Reference: [14] <author> O. Goldreich, S. Goldwasser, and D. Ron. </author> <title> Property testing and its connection to learning and approximation. </title> <booktitle> In 37th FOCS, </booktitle> <pages> pages 339-348, </pages> <year> 1996. </year>
Reference-contexts: Recently, a general formulation of property testing has been presented in <ref> [14] </ref>, and its connection to the former approach to approximation have been demonstrated. Still the two approaches do differ, and the question of meaningfulness has to be addressed (as we do below). Another general point is that approximation is applicable not only when the optimization problems are intractable. <p> In particular, in a RAM model of computation, an approximation algorithm may even run in sub-linear time and still provide valuable information. For example, the testing algorithms of <ref> [14] </ref> run in constant time and provide "constant error approximations" (e.g., one can approximate the value of the maximum cut in a dense graph to within a constant factor in constant time). 1.1 Testing graph properties Recently, a study of testing graph properties was initiated by Goldreich, Goldwasser and Ron, as <p> approximations" (e.g., one can approximate the value of the maximum cut in a dense graph to within a constant factor in constant time). 1.1 Testing graph properties Recently, a study of testing graph properties was initiated by Goldreich, Goldwasser and Ron, as part of a general study of Property Testing <ref> [14] </ref>. In the general model, the algorithm is given oracle access 1 to a function and has to decide whether the function has some specified property or is "far" from having that property. <p> This model is most appropriate for the study of dense graphs, and indeed the graph algorithms in <ref> [14] </ref> refer mainly to dense graphs. <p> In particular, it is no longer true that every (degree-d) graph is 0.1-close to being connected and so an algorithm for testing connectivity cannot be trivial (i.e., always accept). On the other hand, the techniques in <ref> [14] </ref> do not apply to our model and the analogies of most of the results in [14] do not hold: For example, we show that no constant time (Monte Carlo) algorithm can test whether a graph is Bipartite or is 0:1-far from Bipartite, where distance is as defined here. <p> On the other hand, the techniques in <ref> [14] </ref> do not apply to our model and the analogies of most of the results in [14] do not hold: For example, we show that no constant time (Monte Carlo) algorithm can test whether a graph is Bipartite or is 0:1-far from Bipartite, where distance is as defined here. <p> In addition, we establish ( p N ) lower bounds on the query complexity of testing algorithms for the Bipartite and Expander properties. The first lower bound stands in sharp contrast to a result on testing bipartiteness which is described in <ref> [14] </ref>. Recall that in [14] graphs are represented by their N fi N adjacency matrices, and the distance between two graphs is defined to be the fraction of entries on which their respective adjacency matrices differ. The Bipartite tester of [14] works in time poly (1=*) and distinguishes Bipartite graphs from <p> In addition, we establish ( p N ) lower bounds on the query complexity of testing algorithms for the Bipartite and Expander properties. The first lower bound stands in sharp contrast to a result on testing bipartiteness which is described in <ref> [14] </ref>. Recall that in [14] graphs are represented by their N fi N adjacency matrices, and the distance between two graphs is defined to be the fraction of entries on which their respective adjacency matrices differ. The Bipartite tester of [14] works in time poly (1=*) and distinguishes Bipartite graphs from graphs in which at <p> to a result on testing bipartiteness which is described in <ref> [14] </ref>. Recall that in [14] graphs are represented by their N fi N adjacency matrices, and the distance between two graphs is defined to be the fraction of entries on which their respective adjacency matrices differ. The Bipartite tester of [14] works in time poly (1=*) and distinguishes Bipartite graphs from graphs in which at least *N 2 edges must be omitted in order to be bipartite.
Reference: [15] <author> O. Goldreich and D. Ron. </author> <title> Property testing in bounded degree graphs. </title> <note> Available from http://theory.lcs.mit.edu/~danar, 1997. </note>
Reference-contexts: Our algorithms for testing k-vertex-connectivity (for k = 2; 3) and other testing algorithms (e.g., for Planarity) as well as further details concerning claims presented in this extended abstract can be found in the full version of this paper <ref> [15] </ref>. 2 Definitions and Notation We consider undirected graphs of bounded degree. We allow multiple edges but no self-loops. For a graph G, we denote by V (G) its vertex set and by E (G) its edge set. <p> Therefore a discrepancy of substantially more than t between the esti mates (for P t P t i=1 m i ) indicates a big distance from cycle-freeness. This leads to the following (for details see <ref> [15] </ref>). Theorem 4.1 There exists a testing algorithm for the Cycle-Free property whose query complexity and running time are O ( 1 Remark: The tester referred to in the theorem has two-sided error probability. This is unavoidable if one allows only o ( N) many queries. <p> We then show that for every given testing algorithm which performs ff p N queries, the statistical difference between the distributions induced by the two processes on query-answer sequences, is small (i.e., 4ff 2 ). For details see <ref> [15] </ref>. 5.2 Testing Whether a Graph is an Expander The neighbor set of a set A of vertices of a graph G = (V; E), denoted (A), is defined as follows: (A) def E; v 2 Ag. <p> We then describe two processes which interact with a testing algorithm while constructing a random graph in one of the families, and show that the distributions induced on the query-answer sequences are very similar. For details see <ref> [15] </ref>. Acknowledgments We thank Yefim Dinitz, Shimon Even and David Karger for helpful discussions.
Reference: [16] <author> J. H-astad. </author> <title> Testing of the long code and hardness for clique. </title> <booktitle> In 28th STOC, </booktitle> <pages> pages 11-19, </pages> <year> 1996. </year>
Reference-contexts: The latter approach underlines all work on testing low-degree polynomials [7, 21, 13, 4, 3, 11, 1] and codes <ref> [3, 1, 5, 16] </ref>, and its relevance to the construction of probabilistically checkable proofs [4, 3, 11, 2, 1] is well known. Recently, a general formulation of property testing has been presented in [14], and its connection to the former approach to approximation have been demonstrated.
Reference: [17] <author> D. Karger. </author> <title> Global min-cuts in RN C and other ramifications of a simple mincut algorithm. </title> <booktitle> In 4th SODA, </booktitle> <pages> pages 21-30, </pages> <year> 1993. </year>
Reference-contexts: Our algorithm finds the component containing the input vertex, within time cubic in the size of the component (independent of k and of the size of the entire graph). It is based on the underlying idea of the min-cut algorithm of Karger <ref> [17] </ref>. For k = 2 (resp. k = 3), we have an alternative algorithm which works in time linear (resp. quadratic) in the size of the component. We suggest the improvement of the complexity of the above task, for k 3, as an open problem. <p> Our algorithm for finding k-class leaves is based on Karger's Contraction Algorithm <ref> [17] </ref> which is a randomized algorithm for finding a minimum cut in a graph. <p> Proof of Claim 3.8.1: By induction on the size of S. 2 Thus, all we need is to lower bound the probability that C contains a cheaper-than-the-cut spanning tree. This is done by using Karger's analysis of his contraction algorithm (for finding a minimum cut) <ref> [17] </ref>. Details follow. We start by considering an auxiliary graph G 0 , in which all of C is represented by an auxiliary vertex, denoted x. <p> To obtain the better bound claimed in the lemma, we reproduce Karger's analysis <ref> [17] </ref>. He considers an n-vertex graph with min-cut of size c and such that the degree of every vertex in the residual graph at any step of the Contraction Algorithm is at least D c.
Reference: [18] <author> H. Nagamochi and T. Ibaraki. </author> <title> Deterministic ~ O(nm) time edge-splitting in undirected graphs. </title> <booktitle> In 28th STOC, </booktitle> <pages> pages 64-73, </pages> <year> 1996. </year>
Reference-contexts: In this respect we mention the existence of efficient algorithms for determining a minimum set of edges to be added to a graph in order to make it k-connected <ref> [22, 19, 12, 6, 18] </ref>. 1.3 Testing connectivity to the rest of the graph Our algorithm for testing k-edge-connectivity, for k 2, uses a subroutine which may be of independent interest.
Reference: [19] <author> D. Naor, D. Gusfield, and C. Martel. </author> <title> A fast algorithm for optimally increasing the edge-connectivity. </title> <booktitle> In 31st FOCS, </booktitle> <pages> pages 698-707, </pages> <year> 1990. </year>
Reference-contexts: In this respect we mention the existence of efficient algorithms for determining a minimum set of edges to be added to a graph in order to make it k-connected <ref> [22, 19, 12, 6, 18] </ref>. 1.3 Testing connectivity to the rest of the graph Our algorithm for testing k-edge-connectivity, for k 2, uses a subroutine which may be of independent interest.
Reference: [20] <author> C.H. Papadimitriou and M. Yanakakis. </author> <title> Optimization, approximation and complexity classes. </title> <journal> JCSS, </journal> <volume> 43 </volume> <pages> 425-440, </pages> <year> 1991. </year>
Reference-contexts: Finally, we observe that the known results on inapprox-imability of Minimum Vertex Cover (and Dominating Set) for bounded-degree graphs <ref> [1, 20] </ref>, rule out the possibility of efficient testing algorithms for these properties in our model. 1.2 What does this type of approximation mean? To make the discussion less abstract, let us consider the k-(edge)-connectivity tester.
Reference: [21] <author> R. Rubinfeld and M. Sudan. </author> <title> Robust characterization of polynomials with applications to program testing. </title> <journal> SIAM Journal on Computing, </journal> <volume> 25(2) </volume> <pages> 252-271, </pages> <year> 1996. </year>
Reference-contexts: E-mail: danar@theory.lcs.mit.edu. Supported by an NSF postdoctoral fellowship. be of a qualitative nature; for example, being a connected graph (in case the instances are graphs), or being a linear function (in case the instances are functions). The latter approach underlines all work on testing low-degree polynomials <ref> [7, 21, 13, 4, 3, 11, 1] </ref> and codes [3, 1, 5, 16], and its relevance to the construction of probabilistically checkable proofs [4, 3, 11, 2, 1] is well known.
Reference: [22] <author> T. Watanabe and A. Nakamura. </author> <title> Edge-connectivity augmentation problems. </title> <journal> JCSS, </journal> <volume> 35 </volume> <pages> 96-144, </pages> <year> 1987. </year>
Reference-contexts: In this respect we mention the existence of efficient algorithms for determining a minimum set of edges to be added to a graph in order to make it k-connected <ref> [22, 19, 12, 6, 18] </ref>. 1.3 Testing connectivity to the rest of the graph Our algorithm for testing k-edge-connectivity, for k 2, uses a subroutine which may be of independent interest.
References-found: 22

