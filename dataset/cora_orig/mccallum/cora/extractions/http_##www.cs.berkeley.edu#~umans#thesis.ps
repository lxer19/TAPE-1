URL: http://www.cs.berkeley.edu/~umans/thesis.ps
Refering-URL: http://www.cs.berkeley.edu/~umans/selected.html
Root-URL: http://www.cs.berkeley.edu
Title: An Algorithm for Finding Hamiltonian Cycles in Grid Graphs Without Holes  
Author: by Christopher M. Umans WILLIAMS 
Degree: A Thesis Submitted in partial fulfillment of the requirements for the Degree of Bachelor of Arts with Honors in Computer Science  
Date: May 19, 1996  
Affiliation: COLLEGE Williamstown, Massachusetts  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Bridgeman. </author> <title> Finding hamiltonian cycles in grid graphs without holes. </title> <type> Honors thesis, </type> <institution> Williams College, </institution> <year> 1995. </year>
Reference-contexts: The Hamiltonian cycle problem for grid graphs without holes remains an open problem; an algorithm has been proposed by Bridgeman, but its putative correctness and polynomial complexity remain conjectural <ref> [1] </ref>. This algorithm attempts to repeatedly "improve" a 2-factor by reducing its number of components through two cycle merging operations: sliding and gluing. A sequence of slides rearranges a single cycle to include a parallel edge necessary for a glue. <p> Chapter 8 uses these results to give a polynomial time algorithm. Chapter 9 briefly summarizes the major results of this thesis, and discusses directions for future work. Appendix A discusses some of the implications of the results in this thesis on prior work by Bridgeman in <ref> [1] </ref>. Chapter 2 Preliminaries In this chapter, formal definitions of the objects treated in this thesis are introduced, along with some elementary properties of these objects. <p> edges not used in a Hamiltonian cycle that makes the problem of designing an algorithm to identify one difficult there are too many "wrong" choices to make. 2.2 2-Factors The 2-factor is the starting point for both the algorithm presented in Chapter 8 and the algorithm proposed by Bridgeman in <ref> [1] </ref> for finding Hamiltonian cycles in grid graphs without holes. In this section, 2-factors are defined and two methods for finding 2-factors are presented, one in detail. CHAPTER 2. <p> Fortunately, such a property holds for this particular linear programming problem; for a proof and more detailed discussion of this method of finding 2-factors, see <ref> [1] </ref>. A polynomial time algorithm for solving linear programming problems exists but is slow in practice; other algorithms, such as the simplex method, are faster but are not guaranteed to complete in polynomial time. <p> Thus the edges of the cells in B must be crossed by dependency graph edges that form an alternating parity path as shown in Figure 5.3 (a). 1 This lemma is originally due to Bridgeman <ref> [1] </ref> but is restated here with a substantially different proof based on the alternating structures developed in this thesis. CHAPTER 5. ALTERNATING STRIPS 30 Now, suppose G is Hamiltonian. <p> I would also like to thank my second reader, Andrea Danyluk, for her thoughtful comments on the draft of this thesis. Appendix A Some Notes on Bridgeman's Work Many of the results of this thesis bear on Bridgeman's work in <ref> [1] </ref>; a number of the most important implications on her work are gathered in this appendix. <p> Lemma 5.2 restates this fact with a different proof. The stairstep and combination cases were left as conjectures, but the work in this thesis resolves these; the proof that these conjectures are true follows from the existence of reduced alternating strip sequences. In <ref> [1] </ref>, an alternate edge is the edge opposite the dark edge in a Type II border cell. Bridgeman conjectured that if a 2-factor F in G contains exactly two components that meet APPENDIX A. <p> This led to a number of lemmas concerning the structure of the odd-parity union. By Observation A.1, sliding is not sufficient, but the counterexample itself would appear to contradict a number of the lemmas stated in <ref> [1] </ref>. This is due to an error in Lemma 4.2 concerning the possible arrangements of I and O vertices around a dual vertex, which propagates to Lemma 4.7, 4.9 and 4.12, the final lemma being the one contradicted by the counterexample.
Reference: [2] <author> D. Briggs. </author> <title> Hamiltonian cycles in grid graphs without holes. </title> <type> Honors thesis, </type> <institution> Williams College, </institution> <year> 1994. </year>
Reference-contexts: Briggs applied a similar strategy to the Hamiltonian cycle problem for certain grid graphs that are decomposable into two or three rectangular grid graphs <ref> [2] </ref>. 1.3.2 Grid Graphs Without Holes One restriction on grid graphs that was used by Everett in two of the cases she solved was the restriction to certain grid graphs without holes.
Reference: [3] <author> H. Everett. </author> <title> Hamiltonian paths in non-rectangular grid graphs. </title> <type> Master's thesis, </type> <institution> University of Saskatchewan, </institution> <year> 1986. </year>
Reference-contexts: Itai et al. also showed that the Hamiltonian cycle problem for rectangular grid graphs can be solved in polynomial time. In 1986, Everett used this result to give polynomial algorithms for the related problem of Hamiltonian paths in certain non-rectangular grid graphs <ref> [3] </ref>. Her strategy involves decomposing the graph into a series of rectangular subgraphs, solving the problem for these smaller problems, and then "gluing" the paths into one large path.
Reference: [4] <author> A. Itai, C. H. Papadimitriou, and J. L. Szwarcfiter. </author> <title> Hamilton paths in grid graphs. </title> <journal> SIAM Journal of Computing, </journal> <volume> 11(4) </volume> <pages> 676-686, </pages> <year> 1982. </year>
Reference-contexts: Unfortunately, for the Hamiltonian cycle problem, these features are not likely to simplify the problem enough to permit an efficient algorithm. 1.3.1 General Grid Graphs In 1982, Itai, Papadimitriou, and Szwarcfiter showed that the Hamiltonian cycle problem for general grid graphs remains N P-complete <ref> [4] </ref>. Itai et al. also showed that the Hamiltonian cycle problem for rectangular grid graphs can be solved in polynomial time. In 1986, Everett used this result to give polynomial algorithms for the related problem of Hamiltonian paths in certain non-rectangular grid graphs [3].
Reference: [5] <author> David S. Johnson. </author> <title> The np-completeness column: an ongoing guide. </title> <journal> Journal of Algorithms, </journal> <volume> 6 </volume> <pages> 434-451, </pages> <year> 1985. </year>
Reference-contexts: A number of restricted classes of graphs have been shown to be either in P or N P-complete. developments in the theory of N P-completeness <ref> [5] </ref>. The distinction between P and N P is sometimes surprising it is not always the case that what seem to be the most restricted classes of graphs are in P while the least restricted ones remain N P-complete. <p> A. Bertossi Claw-Free N P -complete A. A. Bertossi Degree-k N P -complete M. R. Garey and D. S. Johnson Planar N P -complete M. R. Garey and D. S. Johnson Hamiltonian cycle problem. For definitions of these graph classes, and complete references to the published results, see <ref> [5] </ref>. of understanding will be reached at which a proof that P 6= N P is evident.
Reference: [6] <author> E. L. Lawler, J. K. Lenstra, A. H. G. Rinnooy Kan, and D. B. Shmoys, </author> <title> editors. The Traveling Salesman Problem. </title> <publisher> John Wiley & Sons, </publisher> <year> 1985. </year>
Reference-contexts: get Commissions and to be Successful in his Business." His admonishment to "cover as many locations as possible without visiting a location twice" is sound advice and also likely the first reference to what is in essence the Traveling Salesman Problem (TSP), one of the most famous combinatorial optimization problems <ref> [6] </ref>. The TSP is the problem of identifying a minimum total length tour of a list of cities beginning and ending with the same city. It is commonly modeled as a graph, with vertices representing cities, and edges between adjacent cities that are weighted with pairwise distances. <p> The graph was a representation of an icosahedron, and had a mathematical interpretation related to Hamilton's invention in 1856 of a system of noncommutative algebra he called the "Icosian Calculus." <ref> [6] </ref> Hamilton was not the first to study Hamiltonian cycles; a special case known as the "knight's tour," in which a knight must visit all 64 squares of a chessboard moving only in the usual way, was studied by Euler and Vandermonde in the middle to late 1700's [6]. <p> "Icosian Calculus." <ref> [6] </ref> Hamilton was not the first to study Hamiltonian cycles; a special case known as the "knight's tour," in which a knight must visit all 64 squares of a chessboard moving only in the usual way, was studied by Euler and Vandermonde in the middle to late 1700's [6]. Even the general case was likely investigated prior to Hamilton's work by the Reverend T. P. Kirkman, who had the misfortune of studying Steiner triple systems before Steiner as well [7]. 1 CHAPTER 1. INTRODUCTION 2 But the Hamiltonian cycle problem is far from a mathematical oddity.
Reference: [7] <author> E. L. Lawler, J. K. Lenstra, A. H. G. Rinnooy Kan, and D. B. Shmoys, </author> <title> editors. The Traveling Salesman Problem, chapter 11. </title> <publisher> John Wiley & Sons, </publisher> <year> 1985. </year>
Reference-contexts: Even the general case was likely investigated prior to Hamilton's work by the Reverend T. P. Kirkman, who had the misfortune of studying Steiner triple systems before Steiner as well <ref> [7] </ref>. 1 CHAPTER 1. INTRODUCTION 2 But the Hamiltonian cycle problem is far from a mathematical oddity. With the advent of the computer, such graph-theoretic problems have attained practical significance, as many real-world problems phrased in general terms are equivalent to problems in graph theory.
Reference: [8] <author> Laszlo Lovasz. </author> <title> Combinatorial Problems and Excercises, page 333. </title> <publisher> North Holland Publishing Company, </publisher> <year> 1979. </year>
Reference-contexts: CHAPTER 2. PRELIMINARIES 10 2.2.2 Reduction to Matching This section describes a reduction of the 2-factor problem to the problem of finding a maximum matching, suggested by an exercise 1 in <ref> [8] </ref>. A relatively simple algorithm is described that solves the maximum matching problem for bipartite graphs. Definition 2.8 A matching of a graph G is the subgraph induced by a subset of the edges of G that contains no adjacent edges.
Reference: [9] <author> James A. McHugh. </author> <title> Algorithmic Graph Theory. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1990. </year> <month> 70 </month>
Reference-contexts: The alternating path method will be described here as it introduces a major theme (alternating structures) that recurs throughout this thesis. Alternating Path Method The description of this algorithm and the relevant terminology are based heavily on the presentation in <ref> [9] </ref> 2 See [9] for a description of Edmonds' algorithm. CHAPTER 2. PRELIMINARIES 13 Definition 2.11 A free vertex with respect to a matching M of G is a vertex in G with no incident edge in M . <p> The alternating path method will be described here as it introduces a major theme (alternating structures) that recurs throughout this thesis. Alternating Path Method The description of this algorithm and the relevant terminology are based heavily on the presentation in <ref> [9] </ref> 2 See [9] for a description of Edmonds' algorithm. CHAPTER 2. PRELIMINARIES 13 Definition 2.11 A free vertex with respect to a matching M of G is a vertex in G with no incident edge in M . <p> Definition 2.15 An alternating search tree is blocked if it is maximal and does not reach a free vertex at a leaf. The following theorems form the basis of the algorithm. They are stated here without proof; consult <ref> [9] </ref> for a more thorough treatment. Theorem 2.1 A matching M in G is maximal if and only if there exists no augmenting path with respect to M . <p> If the tree is blocked, then its vertices and edges are removed from G and the next free vertex is tried. The performance of this algorithm on a graph G (V; E) is shown in <ref> [9] </ref> to be O (jV jjEj).
References-found: 9

