URL: http://www.cs.purdue.edu/homes/spaf/tech-reps/9522.ps
Refering-URL: http://www.cs.purdue.edu/coast/coast-library.html
Root-URL: http://www.cs.purdue.edu
Email: fmcrosbie, spafg@cs.purdue.edu  
Phone: (317) 494-7825  
Title: Defending a Computer System using Autonomous Agents  
Author: Mark Crosbie, Gene Spafford 
Date: 11 March, 1994  
Address: West Lafayette IN 47907-1398  
Affiliation: COAST Laboratory Dept. of Computer Sciences Purdue University  
Pubnum: Technical Report No. 95-022  
Abstract: This report presents a prototype architecture of a defense mechanism for computer systems. The intrusion detection problem is introduced and some of the key aspects of any solution are explained. Standard intrusion detection systems are built as a single monolithic module. A finer-grained approach is proposed, where small, independent agents monitor the system. These agents are taught how to recognise intrusive behaviour. The learning mechanism in the agents is built using Genetic Programming. This is explained, and some sample agents are described. The flexibility, scalability and resilience of the agent approach are discussed. Future issues are also outlined.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Heady, G. Luger, A. Maccabe, M. Servilla. </author> <title> The architecture of a network level intrusion detection system. </title> <type> Technical Report, </type> <institution> University of New Mexico, Department of Computer Science, </institution> <month> August </month> <year> 1990. </year>
Reference-contexts: Each process (or agent) operates independently of the other agents, but they all cooperate in monitoring the system. This approach has significant advantages in terms of overhead, scalability and flexibility. 2 Intrusions and Intrusion Detection An intrusion can be defined as <ref> [1] </ref>: 1 any set of actions that attempt to compromise the integrity, confidentiality or availability of a resource. and they can be catagorised into two main classes: * Misuse intrusions are well defined attacks on known weak points of a system.
Reference: [2] <author> B. Mukherjee, L. Todd Heberline, Karl Levitt, </author> <title> Network Intrusion Detection. </title> <journal> IEEE Network, </journal> <month> May/June </month> <year> 1994, </year> <pages> pages 26-41. </pages>
Reference-contexts: However heuristics will not always guarantee perfect accuracy, so another goal is to minimise the probability of incorrect classification. 2.1 Intrusion Detection An intrusion detection system (IDS) must <ref> [2] </ref> identify, preferably in real time, unauthorized use, misuse, and abuse of computer systems. An intrusion detection system does not attempt to stop an intrusion as it occurs. Its role is to alert a system security officer that a potential security violation is occurring.
Reference: [3] <author> Sandeep Kumar, Gene Spafford. </author> <title> A Pattern Matching model for Misuse Intrusion Detection, </title> <booktitle> Proceedings of the 17th National Computer Security Conference, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: As misuse intrusions follow well-defined patterns they can be detected by doing pattern matching on audit-trail information. For example, an attempt to create a setuid file can be caught by examining log messages resulting from system calls. This can be done using a pattern matching approach such as in <ref> [3] </ref>. However, anomaly intrusions are harder to detect. There are no fixed patterns that can be monitored for and so a more "fuzzy" approach must be taken. Ideally we would like a system that combined human-like pattern matching capabilities with the vigilance of a computer program.
Reference: [4] <author> David Goldberg. </author> <title> Genetic Algorithms in Search, </title> <journal> Optimization and Machine Learning. </journal> <volume> Addision-Wesley, </volume> <year> 1989. </year>
Reference-contexts: As another example, this shows how agents can detect if a packet arrives that is destined for a subnet outside the firewall. Not only that, if the packet is of type UDP, and destined to port 520 (the RIP update port), then 2 See Goldberg <ref> [4] </ref> for more on Classifier Systems. generate an additional suspicion message. This illustrates some of the flexibility in encoding the activity patterns as parse trees.
Reference: [5] <author> John Koza. </author> <title> Genetic Programming: On the Programming of Computers by means of Natural Selection. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: A more flexible scheme still could use a dynamic learning system, such as a neural network or classifier system 2 . Another approach would be to use Genetic Programming <ref> [5] </ref> to evolve small programs which detected very simple activities on the system. 5 Prototype Solution To illustrate how we envision such a system operating, consider a small local-area network of workstations running Solaris 2. <p> Once the training phase has been complete, they will be allowed to run continually on the system, observing activities and cooperating to decide whether these activities form part of an intrusion attempt. They will report their suspicions to a human operator. We propose using the Genetic Programming (GP) <ref> [5] </ref> paradigm as a basis for the internal design of the agents. This is a powerful machine-learning paradigm which allows both feedback learning (i.e. human-guided learning) and discovery (i.e. finding new combinations of activities to monitor for).
Reference: [6] <author> T. Lunt, H. Javitz, A. Valdes et al. </author> <title> A Real-time Intrusion-Detection Expert System (IDES), </title> <type> SRI International Technical Report, </type> <institution> SRI Project 6784, </institution> <month> February 28, </month> <year> 1992. </year>
Reference-contexts: A simple static pattern matching system could be used | this could detect known misuse anomalies. Or a rule-based system could match observed events and have trigger actions for every matched rule. Instead of having all the rules encoded in one large rulebase (see, for example, the IDES system <ref> [6] </ref>), a small subset of rules pertaining to a single event could be encoded. A more flexible scheme still could use a dynamic learning system, such as a neural network or classifier system 2 .
Reference: [7] <author> Neal Nuckolls, </author> <title> How to use DLPI, </title> <institution> Internet Engineering, SUN Microsystems. </institution>
Reference-contexts: If a single IDS was hosted on the firewall machine, then a network partition could leave machines behind the partition with little or no intrusion detection defenses. itself. In this prototype implementation, this is the Sun DLPI interface <ref> [7] </ref>. It provides an interface to allow programs to transmit and receive raw datalink-level frames. This system does not generate any new network data, so only the receive capabilities are used.
Reference: [8] <editor> Pattie Maes Modeling Adaptive Autonomous Agents, </editor> <booktitle> Artificial Life, </booktitle> <volume> Vol 1 No. 1/2, </volume> <editor> Ed: Christopher Langton, </editor> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: As they encode their behaviour internally as actual code, restarting the agents would leave them in exactly the same state as before. They can resume monitoring the system without any degradation in performance. 1 See the article by Maes <ref> [8] </ref> for an introduction to autonomous agents. * Graceful degradation Similarly, if some agents are compromised, the system's defenses don't disappear.
References-found: 8

