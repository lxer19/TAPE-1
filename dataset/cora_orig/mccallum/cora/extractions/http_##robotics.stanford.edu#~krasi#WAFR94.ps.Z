URL: http://robotics.stanford.edu/~krasi/WAFR94.ps.Z
Refering-URL: http://robotics.stanford.edu/~krasi/
Root-URL: http://www.cs.stanford.edu
Phone: 02181  
Title: Editorial, Sales and Customer Service Office, A  Algorithms for Optimal Design of Robots in Complex Environments  
Author: K Peters, Ltd., Linden Street, Krasimir Kolarov 
Address: MA  1801-C Page Mill Road Palo Alto, CA 94304  
Affiliation: Wellesley,  Interval Research Corp.  
Note: Copyright 1995 A K Peters, Ltd., Published in Algorithmic Foundation of Robotics, 1995.  
Abstract: The goal of our work is to find the optimal design of a robot that can reach everywhere in an environment with obstacles without collisions. The main questions we are concerned with are: what is the most appropriate type for the links of the robot? what is the minimum number of links that are needed to cover every point in the environment? and what is the best placement for the robot? We describe some algorithms for finding the set of points in the environment that can reach all other points with a minimum number of links. Initially the obstacles are modeled as convex polygons and subsequently we discuss extensively the modifications that those algorithms require to cover curvilinear, non-convex and three-dimensional obstacles. We derive several theorems that establish upper and lower bounds on the number of links for both planar and spatial cases. We describe some algorithms for minimizing the upper bounds to the optimal number of links for the environment. We generalize the basic problem for the cases when both the robot and the environment are designed simultaneously, when we deal with moving robots and obstacles, and when we have multiple robots or robots with variable structure. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David Bennett and John Hollerbach, </author> <title> "Identifying the Kinematics of Robots and their Tasks," </title> <booktitle> Proceedings of the IEEE International Conference on Robotics and Automation , 1989, </booktitle> <address> pp.580-586. </address>
Reference-contexts: One can try to use a design optimization approach for the planning of a robot path which avoids the obstacles (see [21]), or to identify the kinematics of the robots with respect to their tasks <ref> [1] </ref>. However these approaches still do not guarantee the best fit between the environment and the robot operating in it, because they are both given appriori.
Reference: [2] <author> Bernard Chazelle and Leonidas Palios, </author> <title> "Triangulating a Nonconvex Polytope," Copyright 1995 A K Peters, Ltd., </title> <booktitle> Published in Algorithmic Foundation of Robotics, 1995. 20 Proceedings 5 th ACM Symposium on Computational Geometry , 1989, </booktitle> <address> pp.393-400. </address>
Reference-contexts: To derive another estimate of the number of links necessary to cover the free space in 3D, we can use the approach in <ref> [2] </ref>.
Reference: [3] <author> P.Chedmail and Ph.Wenger, </author> <title> "Design and Positioning of a Robot in an Environment with Obstacles using Optimal Research," </title> <booktitle> Proceedings of the IEEE International Conference on Robotics and Automation , 1989, </booktitle> <address> pp.1069-1074. </address>
Reference-contexts: Furthermore, we will also consider the problem when both the environment and the robot are allowed to vary in order to achieve more efficient operation of the robot. The different aspects of optimal design of robots have been considered in the literature (see <ref> [3] </ref>, [16] and [17]). We will concentrate in this paper on finding the best structure for a robot working in an environment with obstacles, and the best Copyright 1995 A K Peters, Ltd., Published in Algorithmic Foundation of Robotics, 1995. 2 place for this robot in the environment.
Reference: [4] <author> Yao-Chon Chen and Mathukumalli Vidyasagar, </author> <title> "Optimal Trajectory Planning for Planar n-Link Revolute Manipulators in the Presence of Obstacles," </title> <booktitle> Proceedings of the IEEE International Conference on Robotics and Automation , 1988, </booktitle> <address> pp.202-208. </address>
Reference-contexts: This operation is to be done in an optimal fashion (see <ref> [4] </ref>). Often this proves to be a difficult task, especially when the structure and the kinematics of the robot are not appropriate for the layout of the environment and the activities performed in it.
Reference: [5] <author> Gregory Chirikjian and Joel Burdick, </author> <title> "Parallel Formulation of the Inverse Kinematics of Modular Hyper-Redundant Manipulators," </title> <booktitle> Proceedings of the IEEE International Conference on Robotics and Automation , 1991, </booktitle> <address> pp.708-713. </address>
Reference-contexts: These structures can also be easily generalized to three dimensional spaces. In the limit, when the number of telescoping links goes to infinity, we can use these structures to consider problems similar to the ones discussed in <ref> [5] </ref>. Links with adjustable length are used in the "Adjustable Robotic Mechanisms" for low-cost automation, considered in [11] as well as in most of the walking robotic devices. Telescoping structures are especially popular in construction and building automation.
Reference: [6] <author> Marc Keil, </author> <title> Decomposing a Polygon into Simpler Components," </title> <journal> SIAM Journal on Computing , Vol.14, </journal> <volume> No.4, </volume> <year> 1985, </year> <month> pp.789-817. </month>
Reference-contexts: We are looking for a subdivision where the polygon is partitioned into the minimum possible number of convex components. There are two basic methods of minimum decomposition in convex polygons: 1) If we do not want to add new vertices to the partitioning, we can use the algorithm in <ref> [6] </ref> for decomposing a simple polygon with n sides into minimum number of convex pieces in time O (n 3 .log n) . 2) If we do add additional vertices in the decomposition, we can sometimes achieve even a smaller number of convex components.
Reference: [7] <author> Kolarov, K. </author> <title> Optimal geometric Design of Robots for Environments with Obstacles , PhD Thesis, </title> <institution> Stanford University, </institution> <year> 1992. </year>
Reference-contexts: A brief discussion of moving robots and obstacles, multiple robots and reconfigurable structures can be found in <ref> [7] </ref>. Finally Section 6 summarizes our r esults and makes some suggestions for future research in this area. 2. Convex Environment and Obstacles In this section all obstacles will be represented by convex polygons in a two-dimensional environment. <p> This will be the maximal link distance between any two points in the polygon. In our notations we will also use VMAX (from maximal visibility) as a term for the link diameter in an environment with obstacles. In Chapter 2 of <ref> [7] </ref> and in [8] we have described in detail an algorithm that builds all visibility polygons from a given fixed base point B in an environment with obstacles. <p> In addition, for completeness of the algorithm, we include generating points and triangles created by the mutual tangents between the obstacles. The algorithm terminates when the union of the visibility regions V i covers the whole free space with a minimal link distance k . Theorem 2.1 in <ref> [7] </ref> shows that this is equivalent to have the entire length of all the edges of the environment be reached from point B with k links. The worst case complexity of our algorithm is O (m.n.log n) where m is the number of obstacles. <p> The algorithm for building the link center of the environment (the set of points that can reach all other points with minimal number of links) is based again on Theorem 2.1 from <ref> [7] </ref> Theorem 2.1. If the entire length of all the edges of the environment E can be reached from some point B with k revolute-jointed telescopic links, then all points in E can be reached from B with k revolute-jointed telescopic links. <p> Then this point A belongs to the intersection of the k -th visibility regions of all those points of the edges. As we show in Theorem 2.3 in <ref> [7] </ref> this k is necessarily the minimal one for which this event occurs. <p> P 04 P 02 P 03 12 P P 14 P 31 P 32 P 35 P 24 P 23 Fig.2.4 Visibility polygon of edge P 13 14 This property is formally proved in <ref> [7] </ref> in Theorem 2.4. There, a detailed algorithm is explained of how to actually build such visibility region of an edge by going around clockwise along the visibility triangles defined by the two end points and merging them in a correct order. <p> To deal with this theoretically we introduce a construction called "X-form" (see <ref> [7] </ref>, [10]). The terminology for the X-form is illustrated in Figure 2.6. The part of the edge that we want to see will be called the ''base'' of the X-form and the opposite side of the form will be called the ''top''. <p> X 11 X 1 X 2 e P 02 P 03 12 P P 15 P 22 31 P P 32 P 41 42 43 X 11 F Fig.2.7 Three-visible polygons of an edge. More details on the actual implementation of X-forms can be found in <ref> [7] </ref>. We can use the procedure above for finding third, fourth, etc. level visibility polygons of an edge (if necessary) and the criterion for termination is the same as for discrete points. In our example the maximum number of links necessary is 3. <p> The algorithms for visibility from a point and building of an ALC are implemented in Think Pascal and running in real time on a Macintosh computer. Very detailed description of the procedures for building of the exact link center can be found in <ref> [7] </ref>. In the next section we will extend our analysis to general types of obstacles and environments. 3. <p> While the equation of the tangent in the case of convex polygons follows simply from the fact that the line passes through two known points, for generalized polygons this equation is a little more difficult to obtain. The corresponding equations, for this case, are derived in <ref> [7] </ref>. G 14 P 13 P 12 P 15 P 31 P 33 P 34 P 21 P 22 P 24 P 03 P 02 G 13 Fig.3.1 Visibility for generalized polygons. <p> The complexity of the algorithm for visibility from a point is the same as the one for convex polygons because the only differences are in calculating the tangents, which takes constant time. In building an ALC for convex polygons we used a property (Theorem 2.2 in <ref> [7] </ref>) that if we can reach all the vertices of the polygons with k links than we need maximum k+1 links to reach all points in the free space. <p> However this is not true in this case because hat the points on an arc of circle cannot be seen with a straight line from the arc's vertices. In <ref> [7] </ref> we have outlined a procedure of dealing with this difficulty where using the tangents to the arc at its vertices, we search for an area in free space that contains a point or a set of points that can see the whole arc with one link only. <p> This procedure does not affect the overall complexity because it is done once in the beginning of the main algorithm. As a criteria for "end", in the algorithm for the visibility from a point, for the edges that are arcs of circles we use Lemma 3.1 from <ref> [7] </ref> Lemma 3.1 If at level k all points D ij for every arc have been reached, than the next level is necessarily the last, i.e. the visibility is maximum k+1 . <p> We have to add some conditions that reflect the specifics of the circular edges, explained in detail in <ref> [7] </ref>. visibility regions for edge e 24 . In this the unshaded area represents V 2 (e 24 ) . <p> Of course we need to tradeoff between the closeness of the approximation and the number of edges that are introduced, because we want the program to run in reasonable time. Thus using the considerations above and the detailed formulae in <ref> [7] </ref> we can conclude the description of our algorithm for general convex obstacles and environment. <p> Both methods above cause more computations than if we deal with the non-convex obstacles directly - the third method described in <ref> [7] </ref>. P 04 P 01 B' 12 P P 19 P 16 P 18 1313 P Fig.3.6 'Inside visible' or 'not visible' reflex vertices. In terms of the algorithm in Section 2.1 for visibility polygons from a point, the presence of reflex vertices does not introduce new generating points. <p> If another obstacle is obstructing this view, the convex vertices of the obstructing obstacle will be able to see those reflex edges of the original obstacle. These situations are illustrated and analyzed in detail in <ref> [7] </ref>. As it is shown there and from the discussion so far it is clear that the results in Section 2 for visibility polygons from a point are also valid for non-convex polygonal obstacles. <p> We say "sub-optimal", because we approximate the objects as being quite uniform vertically. In <ref> [7] </ref> we discuss in detail this algorithm as well as the questions of: how do we choose the heights of the slices for each object, how many slices are going to be used for the overall environment with obstacles, how do we find the intersection of the link centers. <p> In fact the mutual tangents between two polyhedral obstacles can also define a whole plane if the corresponding edges are intersecting lines (see <ref> [7] </ref>). The actual implementation of the visibility algorithm in 3D requires a lot of work and depends strongly on the method of representation of the 3D objects in the algorithm. CAD software packages have been built for ray tracing of 3D objects. In [7] we have outlined few ideas for extending <p> the corresponding edges are intersecting lines (see <ref> [7] </ref>). The actual implementation of the visibility algorithm in 3D requires a lot of work and depends strongly on the method of representation of the 3D objects in the algorithm. CAD software packages have been built for ray tracing of 3D objects. In [7] we have outlined few ideas for extending of the algorithms, described so far in this paper, to 3D environments. <p> This follows from the basic theorem in [19], the Chvatal's Art Gallery Theorem, which states that [n/3] guards are occasionally necessary and always sufficient to see the entire interior of a polygon of n edges. Here the italic square brackets, <ref> [7] </ref> denote the largest integer less than or equal to x . The term polygon with holes in [19] corresponds to our term environment with obstacles. as we have shown in [9] and [7], a polygon with holes can be triangulated and the triangulation will have n+2m-2 triangles. <p> Here the italic square brackets, <ref> [7] </ref> denote the largest integer less than or equal to x . The term polygon with holes in [19] corresponds to our term environment with obstacles. as we have shown in [9] and [7], a polygon with holes can be triangulated and the triangulation will have n+2m-2 triangles. <p> We remember that all points in the link center have visibility of the environment equal to VMIN and naturally always VMIN VMAX . In [9] and <ref> [7] </ref> we have proven a theorem that establish the connection we are looking for: Theorem 4.1 In the worst case, VMIN of the free space E is equal to the number of guards covering E . <p> The longest possible chain of edges is one that connects all the guards. We can think of it as one big obstacle. For example if the edges A, B and C in Figure 4.3 did not exist, we would have had one long chain visiting all the guards. In <ref> [7] </ref> we actually show an example, where the distance between two guards is s-1 , where s is the number of guards. Thus we can show that there is always a guard Q in this conectivity graph that can reach all the rest of the guards with maximum [(s-1)/2] edges. <p> Consequently if we can enclose the obstacles in polygons with less edges that can be placed in E without overlapping, we will get better results. This is the basis for yet another approach extensively discussed in [9] and <ref> [7] </ref>. In that we first enclose all obstacles in minimal bounding triangles. We use the fact that if we can reach all vertices of the triangles with k links, then we can reach all edges of the original convex obstacles with at most k + 1 links (Lemma 4.1 in [7]). <p> <ref> [7] </ref>. In that we first enclose all obstacles in minimal bounding triangles. We use the fact that if we can reach all vertices of the triangles with k links, then we can reach all edges of the original convex obstacles with at most k + 1 links (Lemma 4.1 in [7]). <p> general convex or non convex curve, we can formulate: Theorem 4.4 For a general outside boundary shape we can reach all the vertices of the m triangular obstacles with: VMAX m+1+2 * [(n-3m-1)/3] and VMIN min (max (m+1,2 [(n-3m-1)/3]),[(4n 9m+5)/6]) The detailed proof of this theorem can be found in <ref> [7] </ref>. It is based on analysis of the worst case situation where the environment can be subdivided into a big non-convex part S with almost no obstacles and another part with obstacles (see Figure 4.4). <p> We can not always find the optimal numbers exactly, because that would be equivalent to finding the optimal number of guards in an art gallery, which was proven to be NP-hard in [20]. However we describe in <ref> [7] </ref> and [8] an algorithm that can find a sub optimal solution which in the majority of the cases is equal to the optimal one. This algorithm uses triangulation of the environment to find the minimal visibility k for all edges. <p> We can optimize the running time by arranging all vertices and edges in E in a "visibility table" that can be processed in parallel to find the overall number of links. The method for building and analyzing this table is explained in detail in <ref> [7] </ref>. In addition the table allows for lookup estimates for the values of VMIN and VMAX . Although this procedure is faster than the method in Section 2, it is not a constructive one. <p> This is the optimal number of guards because, by using arguments similar to those above we can show that it is not possible to reduce the number of guards by moving them around. Detailed description of this algorithm is given in <ref> [7] </ref>. We would like to point out that although we found the minimum possible number of guards for this environment, the visibility here is actually even smaller - it is two. <p> Extensions of the Basic Design Problem There are several directions in which we can extend our analysis. Those including allowing the robot and/or obstacles to change their shape and/or position in the environment. The case of moving robots and obstacles as well as reconfigurable robots is discussed in <ref> [7] </ref> We will briefly mention here that all estimates in Section 4 are valid for both moving and stationary obstacles. <p> Sometimes it is also convenient to place the obstacles along the whole boundary of the environment. In that case we can use rectangular layers instead of horizontal ones. If we can place the obstacles in p rectangular layers, Theorem 5.2 in <ref> [7] </ref> shows that VMIN [(p+1)/2]+3 and VMAX p+3 . There is a very important difference between the estimates in Chapter 4 and Theorem 5.1. In our discussion we have used the term "links" to denote "telescoping links", i.e. links with two degrees of freedom (one revolute and one prismatic).
Reference: [8] <author> Kolarov, K. and Roth, B. </author> <title> "On the Number of Links and Placement of Telescoping Manipulators in an Environment with Obstacles", </title> <booktitle> Proc. 5 th International Conference on Advanced Robotics , Pisa, </booktitle> <address> Italy, </address> <year> 1991, </year> <month> pp.988-993. </month>
Reference-contexts: This will be the maximal link distance between any two points in the polygon. In our notations we will also use VMAX (from maximal visibility) as a term for the link diameter in an environment with obstacles. In Chapter 2 of [7] and in <ref> [8] </ref> we have described in detail an algorithm that builds all visibility polygons from a given fixed base point B in an environment with obstacles. <p> We can not always find the optimal numbers exactly, because that would be equivalent to finding the optimal number of guards in an art gallery, which was proven to be NP-hard in [20]. However we describe in [7] and <ref> [8] </ref> an algorithm that can find a sub optimal solution which in the majority of the cases is equal to the optimal one. This algorithm uses triangulation of the environment to find the minimal visibility k for all edges.
Reference: [9] <author> Kolarov, K. and Roth, B. </author> <title> "Best Estimates for the Construction of Robots in Environments with Obstacles", </title> <booktitle> IEEE International Conference on Robotics and Automation , Nice, </booktitle> <address> France, </address> <year> 1992. </year>
Reference-contexts: Here the italic square brackets, [7] denote the largest integer less than or equal to x . The term polygon with holes in [19] corresponds to our term environment with obstacles. as we have shown in <ref> [9] </ref> and [7], a polygon with holes can be triangulated and the triangulation will have n+2m-2 triangles. <p> We remember that all points in the link center have visibility of the environment equal to VMIN and naturally always VMIN VMAX . In <ref> [9] </ref> and [7] we have proven a theorem that establish the connection we are looking for: Theorem 4.1 In the worst case, VMIN of the free space E is equal to the number of guards covering E . <p> Consequently if we can enclose the obstacles in polygons with less edges that can be placed in E without overlapping, we will get better results. This is the basis for yet another approach extensively discussed in <ref> [9] </ref> and [7]. In that we first enclose all obstacles in minimal bounding triangles.
Reference: [10] <author> Kolarov, K. and Roth, B. </author> <title> Best Placement of Telescoping Robots in Environments with Obstacles", </title> <address> Bangalore, India, </address> <year> 1993. </year>
Reference-contexts: To deal with this theoretically we introduce a construction called "X-form" (see [7], <ref> [10] </ref>). The terminology for the X-form is illustrated in Figure 2.6. The part of the edge that we want to see will be called the ''base'' of the X-form and the opposite side of the form will be called the ''top''.
Reference: [11] <author> Sridhar Kota and Tushchai Chuenchom, </author> <title> "Adjustable Robotic Mechanisms for Low-Cost Automation," Cams, Gears, Robot and Mechanism Design , ASME 1990, </title> <publisher> pp.297-306. </publisher>
Reference-contexts: In the limit, when the number of telescoping links goes to infinity, we can use these structures to consider problems similar to the ones discussed in [5]. Links with adjustable length are used in the "Adjustable Robotic Mechanisms" for low-cost automation, considered in <ref> [11] </ref> as well as in most of the walking robotic devices. Telescoping structures are especially popular in construction and building automation.
Reference: [12] <editor> Jean-Claude Latombe, </editor> <publisher> Robot Motion Planning , Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: In doing so we will introduce techniques similar to the ones used in "robot motion planning" and "computational geometry". Researchers in the area of robot motion planning are aiming at providing robots with good reasoning capabilities (see <ref> [12] </ref>). Given a robot working in some given environment, they are trying to come up with some good algorithms and techniques that will allow the robot to grasp an object from one place and transfer it to another without colliding with the other moving or stationery objects in the environment. <p> A convex two-dimensional object, whose edges are either straight segments or arcs of circles is called a "generalized polygon" and is extensively discussed in [13].The significance of generalized polygons comes from the notion of "Configuration space" (or C-space) in motion planning (see <ref> [12] </ref>). We can approximate the shape of a moving robot in a 2D environment with its minimal bounding circle.
Reference: [13] <author> Jean-Paul Laumond, </author> <title> Obstacle Growing in a Non-Polygonal World," </title> <journal> Information Processing Letters 25, </journal> <month> April 20, </month> <year> 1987, </year> <month> pp.41-50. </month>
Reference: [14] <author> D.Lee, I.Chen, </author> <title> "Display of Visible Edges of a Set of Convex Polygons," </title> <note> Computational Geometry , G.Toussaint (Ed.),1985, pp.249-265. </note>
Reference-contexts: Suri and ORourke [22] consider visibility polygons with holes, and show (theoretically) an algorithm that runs in O (n.logn) time which they prove optimal by reduction from the problem of sorting n positive integers. Lee and Chen <ref> [14] </ref> present an algorithm for computing the visible edges of a set of m nonoverlapping convex polygons that computes only the first visibility region from a given point. We want an algorithm that builds all the visibility polygons from a given point.
Reference: [15] <author> W.Lenhart, R.Pollack, J.Sack, R.Seidel, M.Sharir, S.Suri, G.Toussaint, S.Whitesides and C.Yap, </author> <title> "Computing the Link Center of a Simple Polygon," </title> <booktitle> Proceedings of the 63rd ACM Symposium on Computational Geometry , 1987, </booktitle> <address> pp.1-10. </address>
Reference-contexts: Another important characteristic for non-convex polygons is that it is sufficient to be able to see the convex edges of the environment in order to see all points in E . The reasoning behind this is similar to the one in <ref> [15] </ref>, where it is proven that the link center of a simple polygon P is built by considering the visibility regions only for the convex vertices of P .
Reference: [16] <author> O.Ma and J.Angeles, </author> <title> "Optimum Architecture Design of Platform Manipulators," </title> <booktitle> Proceedings of the 4 th International Conference on Advanced Robotics , 1991, </booktitle> <address> pp.1130-1135. </address>
Reference-contexts: Furthermore, we will also consider the problem when both the environment and the robot are allowed to vary in order to achieve more efficient operation of the robot. The different aspects of optimal design of robots have been considered in the literature (see [3], <ref> [16] </ref> and [17]). We will concentrate in this paper on finding the best structure for a robot working in an environment with obstacles, and the best Copyright 1995 A K Peters, Ltd., Published in Algorithmic Foundation of Robotics, 1995. 2 place for this robot in the environment.
Reference: [17] <author> J.A. Pamanes and Said Zeghloul, </author> <title> "Optimal Placement of Robotic Manipulators Using Multiple Kinematic Criteria," </title> <booktitle> Proceedings of the IEEE International Conference on Robotics and Automation , 1991, </booktitle> <address> pp.933-938. </address>
Reference-contexts: Furthermore, we will also consider the problem when both the environment and the robot are allowed to vary in order to achieve more efficient operation of the robot. The different aspects of optimal design of robots have been considered in the literature (see [3], [16] and <ref> [17] </ref>). We will concentrate in this paper on finding the best structure for a robot working in an environment with obstacles, and the best Copyright 1995 A K Peters, Ltd., Published in Algorithmic Foundation of Robotics, 1995. 2 place for this robot in the environment.
Reference: [18] <author> John Reif and James Storer, </author> <title> Shortest Paths in Euclidean Space with Polyhedral Obstacles," </title> <institution> Technical Report CS-85-12 , Computer Science Department, Brandeis University, </institution> <year> 1985. </year>
Reference-contexts: Those additional vertices are called "Steiner" points, and if we allow them, we can use the algorithm in <ref> [18] </ref> for partitioning into the minimum number of convex pieces, which requires O (n 3 ) time. After the partition we can use all the algorithms described so far to build visibility polygons and link center for this convex pieces.
Reference: [19] <editor> Joseph ORourke, </editor> <publisher> Art Gallery Theorems and Algorithms , Oxford University Press, </publisher> <year> 1987. </year>
Reference-contexts: This approach is closely related to the problem of guard placement in an art gallery. 4.1 The Planar Case As described in <ref> [19] </ref>, the art gallery is a simple polygon, with or without holes, and we want to find how many guards are needed and where they should be placed so that they can see the entire inside of the gallery. <p> In Figure 4.1 the vertices of the gallery are P 1 , P 2 ,..., P 10 . B G B R R P 2 P 4 P 6 P 8 P 10 Fig.4.1 Triangulation and three-coloring of an object. The basic approach taken in <ref> [19 ] </ref> is first to triangulate the free space E , i.e. to connect all vertices of E with straight edges, so that they form triangles that cover E . <p> Finally the guard at P 10 sees triangle P 10 P 1 P 3 . The union of all these triangles covers the polygon completely. Using this procedure we can estimate the number of guards needed to cover the whole polygon. This follows from the basic theorem in <ref> [19] </ref>, the Chvatal's Art Gallery Theorem, which states that [n/3] guards are occasionally necessary and always sufficient to see the entire interior of a polygon of n edges. Here the italic square brackets, [7] denote the largest integer less than or equal to x . <p> Here the italic square brackets, [7] denote the largest integer less than or equal to x . The term polygon with holes in <ref> [19] </ref> corresponds to our term environment with obstacles. as we have shown in [9] and [7], a polygon with holes can be triangulated and the triangulation will have n+2m-2 triangles. <p> In Figure 4.2 we illustrate an environment with 3 obstacles and 18 vertices overall. It is triangulated in 22 triangles. After three-coloring we have chosen the 6 red vertices and placed guards there. The main result for polygons with hol es, proved in <ref> [19] </ref>, is Theorem 5.1 that states that [(n+2h)/3] vertex guards are sufficient to cover the whole free space E . <p> However it is clear that this is not a necessary condition because for example everything that the guard at P 25 can see, can also be seen by the guard at P 14 , thus the guard at P 25 is not needed. Conjecture 5.1 in <ref> [19] </ref> states that [(n+h)/3] vertex guards will be actually sufficient, however this has not been proven in general. In what follows, we will connect our visibility of the environment and the minimum number of links covering an environment with obstacles to the guard placement theory. <p> We can also use similar arguments as above to prove that VMAX = 2s . From Theorem 4.1 it follows that all results that are proven in <ref> [19] </ref> for polygons with holes can be directly transformed to results for VMIN . In particular we can prove: Theorem 4.2 For planar environments VMAX 2 * [(n+2m)/3] and VMIN [(n+2m)/3] . <p> The part without obstacles can be treated as a general polygon with p vertices and no holes. Such polygon can be covered by [p/3] guards (see <ref> [19] </ref>). For the part with holes we can use Theorem 4.3. Sometimes triangular enclosures in 2D take a lot of space and it might happen that the resulting triangles intersect each other or the outside boundary. <p> In the next section we will discuss the extension of this analysis to 3D environments. 4.2 The Spatial Case The 3D equivalent to triangulation is tetrahedralization. However as opposed to the 2D case, <ref> [19] </ref> shows that for the same polyhedron we can have tetrahedralizations with different numbers of tetrahedra. Moreover there exist non- tetrahedralizable polyhedra. In fact deciding whether or not a polyhedron can be tetrahedralized is NP-complete. <p> Consequently we cannot readily use tetrahedralization to estimate the number of links that we need in three-dimensional environments. However to obtain some estimates on the number of links needed to cover a 3D free space, we can use Theorem 10.1 in <ref> [19] </ref> which states that [(2 * F-4)/3] vertex guards are sometimes necessary and always sufficient to see the exterior of a convex polyhedron of F faces for F 10 . The necessity holds for F 5 , and it is conjectured in [19] that the sufficiency also holds for that range. <p> free space, we can use Theorem 10.1 in <ref> [19] </ref> which states that [(2 * F-4)/3] vertex guards are sometimes necessary and always sufficient to see the exterior of a convex polyhedron of F faces for F 10 . The necessity holds for F 5 , and it is conjectured in [19] that the sufficiency also holds for that range.
Reference: [20] <author> Joseph O'Rourke and Kenneth Supowit, </author> <title> "Some NP-Hard Polygon Decomposition Problems," </title> <journal> IEEE Transactions on Information Theory , Vol. IT-29, No.2, </journal> <month> March </month> <year> 1983, </year> <month> pp.181-190. </month>
Reference-contexts: We can not always find the optimal numbers exactly, because that would be equivalent to finding the optimal number of guards in an art gallery, which was proven to be NP-hard in <ref> [20] </ref>. However we describe in [7] and [8] an algorithm that can find a sub optimal solution which in the majority of the cases is equal to the optimal one. This algorithm uses triangulation of the environment to find the minimal visibility k for all edges.
Reference: [21] <author> E.Sandgren and S.Venkataraman, </author> <title> "Robot Path Planning and Obstacle Avoidance: A Design Optimization Approach," </title> <booktitle> 15th Design Automation Conference 1989, </booktitle> <address> pp.169-175. </address>
Reference-contexts: One can try to use a design optimization approach for the planning of a robot path which avoids the obstacles (see <ref> [21] </ref>), or to identify the kinematics of the robots with respect to their tasks [1]. However these approaches still do not guarantee the best fit between the environment and the robot operating in it, because they are both given appriori.
Reference: [22] <author> Subhash Suri and Joseph O'Rourke, </author> <title> "Worst-Case Optimal Algorithms For Constructing Visibility Polygons with Holes," </title> <booktitle> Proceedings of the 2nd ACM Symposium on Computational Geometry , 1986, </booktitle> <address> pp.14-23. </address>
Reference-contexts: If we consider the obstacles in our environment as holes we can formulate our problem as a visibility problem for polygons with holes. Suri and ORourke <ref> [22] </ref> consider visibility polygons with holes, and show (theoretically) an algorithm that runs in O (n.logn) time which they prove optimal by reduction from the problem of sorting n positive integers.
Reference: [23] <author> T.Toussaint, </author> <title> "Solving Geometric Problems with the 'Rotating Calipers'," </title> <booktitle> Proceedings IEEE MELECOM '83 , Greece. </booktitle>
Reference-contexts: The reason we are using rectangles is because they are easy to build and rectangular shapes are easier to place and analyze, especially if we think of the outside boundary of the environment as a rectangle. In fact we can use rotating calipers (see <ref> [23] </ref>) to find in linear time the smallest area rectangle enclosing given polygon.
References-found: 23

