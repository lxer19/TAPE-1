URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-95-12-2.ps.Z
Refering-URL: http://www.cs.man.ac.uk/cstechrep/Abstracts/UMCS-95-12-2.html
Root-URL: http://www.cs.man.ac.uk
Title: Process Structures  
Author: Kohei Honda 
Note: Notes on P-Algebra (1):  
Address: Manchester  
Affiliation: Computer Science University of  
Pubnum: ISSN 1361 6161  
Abstract: Department of Computer Science University of Manchester Technical Report Series UMCS-95-12-2 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abramsky, S., </author> <title> Interaction Categories, Theory and Formal Methods 1993, </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <month> 24 </month>
Reference-contexts: The subsequent expositions will hopefully clarify what can be done in this vein. Discussions on other related theories including Abramsky's Interaction Categories <ref> [1] </ref>, Berry and Boudol's Chemical Abstract Machine [2], Girard's Linear Logic [5], Meseguer's Concurrent Term Rewriting Systems [10], and Milner's Action Structures [14] will also be given in the future expositions, both in terms of their general orientation and, if possible, in terms of their concrete mathematical relationship to the present
Reference: [2] <author> Berry, G. and Boudol, G., </author> <title> The Chemical Abstract Machine. </title> <journal> Theoretical Computer Science, </journal> <volume> vol 96, </volume> <pages> pp. 217-248, </pages> <year> 1992. </year>
Reference-contexts: The subsequent expositions will hopefully clarify what can be done in this vein. Discussions on other related theories including Abramsky's Interaction Categories [1], Berry and Boudol's Chemical Abstract Machine <ref> [2] </ref>, Girard's Linear Logic [5], Meseguer's Concurrent Term Rewriting Systems [10], and Milner's Action Structures [14] will also be given in the future expositions, both in terms of their general orientation and, if possible, in terms of their concrete mathematical relationship to the present work. <p> Similar comments apply to terms of CSP [?]. 3 (ii) Terms of -calculus [15] or -calculus [6] modulo ff-convertibility, or better, modulo structural equality <ref> [2, 13] </ref>, augmented with [oe] and F N (P ). <p> As seen, symmetry in processes typically occurs when an agent contains a subterm of the form P j (P oe) modulo commutative monoid law, cf. Berry and Boudol <ref> [2] </ref>. In contrast, -terms (viewed as processes, cf. Examples 2.3) only own trivial symmetry; the non-commutative nature of applicative structure is well known. (3) Not being mentioned explicitly as such, the significance of symmetry in reasoning about processes has indeed been perceived in the literature. See e.g.
Reference: [3] <author> Cohn, </author> <title> P.M., Universal Algebra, </title> <address> D.Reidel, </address> <year> 1981. </year>
Reference-contexts: Here a and b are significant precisely because they specify how these two processes are structurally related. So as far as the same correspondence is maintained, we can permute names freely, e.g. l:m:0 + m:l:0 l:0jm:0 holds again. As in usual algebra (cf. <ref> [3] </ref>), compatible relations and quotient sets can be considered as assuming the same structure as the underlying object. 2.8 Proposition. (i) Given a compatible relation R def = fhP; Qig, take R itself as the set of processes and define: (a) hP; Qi [oe] def Then R forms a rooted process
Reference: [4] <author> Freyd, P.J. and Scedrov, A., </author> <title> Categories and Allegories, </title> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: When dealing with relations, we also would like to preserve essential relational operations, thus mapping not only relations themselves but also relational reasoning to another domain. 2.21 Definition. A complete boolean allegory (cf. <ref> [4] </ref>) is a category in which, for each pair of objects A and B, we have: (i) hom (A; B) forms a complete boolean algebra, with operations S T ; ( ) C , the first two of which are compatible with categorical composition ffi, i.e. ( S i (R i
Reference: [5] <author> Girard, J.-Y., </author> <title> Linear Logic, </title> <journal> Theoretical Computer Science, </journal> <volume> Vol. 50, pp.1-102, </volume> <year> 1987. </year>
Reference-contexts: The subsequent expositions will hopefully clarify what can be done in this vein. Discussions on other related theories including Abramsky's Interaction Categories [1], Berry and Boudol's Chemical Abstract Machine [2], Girard's Linear Logic <ref> [5] </ref>, Meseguer's Concurrent Term Rewriting Systems [10], and Milner's Action Structures [14] will also be given in the future expositions, both in terms of their general orientation and, if possible, in terms of their concrete mathematical relationship to the present work. <p> The aim of the the overall framework lies in finding a clean mathematical abstraction for structural and dynamic aspects of computation. The relationship to the works by Girard starting from his Linear Logic <ref> [5] </ref> in this context will also be discussed in future occasions. In terms of general orientation, it should be recorded that Cliff Jones strongly suggested to the author that names could be abstracted away from concurrent combinators [7, 8]. <p> We can think of a process as a geometric object with multiple discrete points of connection and interaction: P While such an object seems not to have been studied as such so far, some examples inducing similar structures can nevertheless be found. 3.2 Examples. (1) Girard's Proof Nets <ref> [5] </ref>, as well as Lafont's Interaction Nets [9], can be considered as forming process structures, regarding their "free edges" as handles. 12 (2) An important example is process graphs in [16], a graphical presentation of concur-rent combinators [7, 8] (discussed in 2.3).
Reference: [6] <author> Hoare, C. A. R., </author> <title> Communicating Sequential Processes, </title> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference-contexts: Similar comments apply to terms of CSP [?]. 3 (ii) Terms of -calculus [15] or -calculus <ref> [6] </ref> modulo ff-convertibility, or better, modulo structural equality [2, 13], augmented with [oe] and F N (P ).
Reference: [7] <author> Honda, K. and Yoshida, N., </author> <title> On Reduction-Based Process Semantics, </title> <booktitle> 13th. FST/TCS, </booktitle> <publisher> LNCS 761, pp.371-387, Springer-Verlag, </publisher> <year> 1993. </year> <note> The full version to appear in Theoretical Computer Science. </note>
Reference-contexts: The relationship to the works by Girard starting from his Linear Logic [5] in this context will also be discussed in future occasions. In terms of general orientation, it should be recorded that Cliff Jones strongly suggested to the author that names could be abstracted away from concurrent combinators <ref> [7, 8] </ref>. While the major part of the present theory, together with Yoshida's construction in [16], had already been developed at the time, his comment surely accelerated its formulation. 1 In the rest of the paper, Chapter 2 studies "rooted" process structures, i.e. the presentation which use names. <p> In fact a prototypical example of a rooted process structure is the combinatory representation of these calculi studied in <ref> [7, 8] </ref>. (iii) Another example is the set of terms in the pure -calculus modulo ff-convertibility, where we understand the variables occurring free in a term as its free names. We now present some immediate consequences of Definition 2.1. 2.4 Notations. <p> inducing similar structures can nevertheless be found. 3.2 Examples. (1) Girard's Proof Nets [5], as well as Lafont's Interaction Nets [9], can be considered as forming process structures, regarding their "free edges" as handles. 12 (2) An important example is process graphs in [16], a graphical presentation of concur-rent combinators <ref> [7, 8] </ref> (discussed in 2.3). In fact process graphs are the prototypical example of process structures, and form certain free objects in the universe of name less processes. Symmetries come from those inherent in graphs.
Reference: [8] <author> Honda, K. and Yoshida, N., </author> <title> Combinatory Representation of Mobile Processes, </title> <publisher> POPL'94, pp.348-360, ACM press, </publisher> <year> 1994. </year>
Reference-contexts: The relationship to the works by Girard starting from his Linear Logic [5] in this context will also be discussed in future occasions. In terms of general orientation, it should be recorded that Cliff Jones strongly suggested to the author that names could be abstracted away from concurrent combinators <ref> [7, 8] </ref>. While the major part of the present theory, together with Yoshida's construction in [16], had already been developed at the time, his comment surely accelerated its formulation. 1 In the rest of the paper, Chapter 2 studies "rooted" process structures, i.e. the presentation which use names. <p> In fact a prototypical example of a rooted process structure is the combinatory representation of these calculi studied in <ref> [7, 8] </ref>. (iii) Another example is the set of terms in the pure -calculus modulo ff-convertibility, where we understand the variables occurring free in a term as its free names. We now present some immediate consequences of Definition 2.1. 2.4 Notations. <p> inducing similar structures can nevertheless be found. 3.2 Examples. (1) Girard's Proof Nets [5], as well as Lafont's Interaction Nets [9], can be considered as forming process structures, regarding their "free edges" as handles. 12 (2) An important example is process graphs in [16], a graphical presentation of concur-rent combinators <ref> [7, 8] </ref> (discussed in 2.3). In fact process graphs are the prototypical example of process structures, and form certain free objects in the universe of name less processes. Symmetries come from those inherent in graphs.
Reference: [9] <author> Honda, K. and Yoshida, N., </author> <title> Replication in Concurrent Combinators, </title> <publisher> TACS'94, LNCS 789, pp.786-805, Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: process as a geometric object with multiple discrete points of connection and interaction: P While such an object seems not to have been studied as such so far, some examples inducing similar structures can nevertheless be found. 3.2 Examples. (1) Girard's Proof Nets [5], as well as Lafont's Interaction Nets <ref> [9] </ref>, can be considered as forming process structures, regarding their "free edges" as handles. 12 (2) An important example is process graphs in [16], a graphical presentation of concur-rent combinators [7, 8] (discussed in 2.3).
Reference: [10] <author> Lafont, Y., </author> <title> Interaction Nets, </title> <booktitle> POPL'90, </booktitle> <pages> pp. 95-108, </pages> <publisher> ACM press, </publisher> <year> 1990. </year>
Reference-contexts: The subsequent expositions will hopefully clarify what can be done in this vein. Discussions on other related theories including Abramsky's Interaction Categories [1], Berry and Boudol's Chemical Abstract Machine [2], Girard's Linear Logic [5], Meseguer's Concurrent Term Rewriting Systems <ref> [10] </ref>, and Milner's Action Structures [14] will also be given in the future expositions, both in terms of their general orientation and, if possible, in terms of their concrete mathematical relationship to the present work.
Reference: [11] <author> Meseguer, J., </author> <title> Conditional Rewriting Logic as a Unified Model of Concurrency, </title> <journal> Theoretical Computer Science, </journal> <volume> vol 92, </volume> <year> 1992. </year>
Reference-contexts: This has a far reaching consequence in representation of rooted processes as will be studied in this section. We note that other formulations of the idea are possible, cf. 2.5 (iii). 2.3 Examples. (i) Terms of CCS <ref> [11] </ref>, possibly modulo strong bisimilarity, give such a structure, forgetting various constructors for process composition and augmented with [oe] (defined syntactically) and F N (P ) (using the static/dynamic sorts).
Reference: [12] <author> Milner, R., </author> <title> A Calculus of Communicating Systems, </title> <publisher> LNCS 76, Springer-Verlag, </publisher> <year> 1980. </year>
Reference-contexts: In contrast, -terms (viewed as processes, cf. Examples 2.3) only own trivial symmetry; the non-commutative nature of applicative structure is well known. (3) Not being mentioned explicitly as such, the significance of symmetry in reasoning about processes has indeed been perceived in the literature. See e.g. Chapter 4 of <ref> [12] </ref> where it is used to reduce the size of a bisimulation. One useful fact about isotropy and symmetry follows. 2.17 Proposition.
Reference: [13] <author> Milner, R., </author> <title> Communication and Concurrency, </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: Similar comments apply to terms of CSP [?]. 3 (ii) Terms of -calculus [15] or -calculus [6] modulo ff-convertibility, or better, modulo structural equality <ref> [2, 13] </ref>, augmented with [oe] and F N (P ).
Reference: [14] <author> Milner, R., </author> <title> Functions as Processes. </title> <booktitle> Mathematical Structure in Computer Science, 2(2), </booktitle> <address> pp.119-146, </address> <year> 1992. </year>
Reference-contexts: The subsequent expositions will hopefully clarify what can be done in this vein. Discussions on other related theories including Abramsky's Interaction Categories [1], Berry and Boudol's Chemical Abstract Machine [2], Girard's Linear Logic [5], Meseguer's Concurrent Term Rewriting Systems [10], and Milner's Action Structures <ref> [14] </ref> will also be given in the future expositions, both in terms of their general orientation and, if possible, in terms of their concrete mathematical relationship to the present work.
Reference: [15] <author> Milner, R., </author> <title> Action Structures. </title> <institution> Research Report LFCS-92-249, Computer Science Department, Edinburgh University, </institution> <year> 1992. </year>
Reference-contexts: Similar comments apply to terms of CSP [?]. 3 (ii) Terms of -calculus <ref> [15] </ref> or -calculus [6] modulo ff-convertibility, or better, modulo structural equality [2, 13], augmented with [oe] and F N (P ).
Reference: [16] <author> Milner, R., Parrow, J.G. and Walker, </author> <title> D.J., A Calculus of Mobile Processes, </title> <booktitle> Information and Computation 100(1), </booktitle> <address> pp.1-77, </address> <year> 1992. </year>
Reference-contexts: In terms of general orientation, it should be recorded that Cliff Jones strongly suggested to the author that names could be abstracted away from concurrent combinators [7, 8]. While the major part of the present theory, together with Yoshida's construction in <ref> [16] </ref>, had already been developed at the time, his comment surely accelerated its formulation. 1 In the rest of the paper, Chapter 2 studies "rooted" process structures, i.e. the presentation which use names. <p> studied as such so far, some examples inducing similar structures can nevertheless be found. 3.2 Examples. (1) Girard's Proof Nets [5], as well as Lafont's Interaction Nets [9], can be considered as forming process structures, regarding their "free edges" as handles. 12 (2) An important example is process graphs in <ref> [16] </ref>, a graphical presentation of concur-rent combinators [7, 8] (discussed in 2.3). In fact process graphs are the prototypical example of process structures, and form certain free objects in the universe of name less processes. Symmetries come from those inherent in graphs.
Reference: [17] <author> Yoshida, N., </author> <title> Graph Notation for Concurrent Combinators, </title> <note> to appear in Proc.TPPP'94, LNCS, Spinger-Verlag, 1995. 25 </note>
References-found: 17

