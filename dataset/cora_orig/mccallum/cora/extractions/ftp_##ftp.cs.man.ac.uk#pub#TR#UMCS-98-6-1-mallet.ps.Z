URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-98-6-1-mallet.ps.Z
Refering-URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-98-6-1.html
Root-URL: http://www.cs.man.ac.uk
Email: fsmallet, ducasseg@irisa.fr  
Title: A set-oriented meta-interpreter driven by a "re- lational" trace for deductive databases debug  
Author: ging Sarah Mallet and Mireille Ducasse IRISA/INSA 
Address: 14315 F 35042 Rennes Cedex, France  
Affiliation: Campus Universitaire de Beaulieu CS  
Abstract: The development of deductive databases requires tools, in particular for debugging. Deductive databases manage large quantity of data and, in general, in a set-oriented way. The existing systems of explanation for deductive databases do not take these constraints into account. We propose a tracing technique which consists of integrating a "relational" trace and an instrumented meta-interpreter using substitution sets. The relational trace efficiently gives precise information about data extraction from the relational database. The meta-interpreter manages substitution sets and gives explanation on the deduction. The expensive aspects of meta-interpretation are reduced by the use of the trace which avoids many calculations. The flexibility of meta-interpretation is preserved. It allows traces of different profiles to be easily produced. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Arora, R. Ramakrishnan, W.G. Roth, P. Seshadri, and D. Srivastava. </author> <title> Explaining program execution in deductive systems. </title> <editor> In S. Ceri, K. Tanaka, and S. Tsur, editors, </editor> <booktitle> Proceedings of the Deductive and Object-Oriented Databases Conference, </booktitle> <publisher> LNCS 760. </publisher>
Reference-contexts: The execution of the initial system is not exploited since Wieland redefines another parallel system which generates information dedicated 6 to the construction of the proof tree. This method involves a slow explanation system, disconnected from the initial system and a fixed type of trace. The system Explain <ref> [1] </ref> was developed for CORAL [8]. Like the preceding system, the selected structure is the proof tree. The implementation of the system Explain consists in adding in CORAL a program which stores information on derivations during the evaluation of the query.
Reference: [2] <author> P. Bayer, A. Lefebvre, and L. Vieille. </author> <title> Architecture and design of the EKS deductive database system. </title> <journal> VLDB Journal, </journal> <year> 1993. </year>
Reference-contexts: In addition, the advantages of meta-interpretation are preserved. In particular, the flexibility of the technique enables different traces to be easily produced, as illustrated at the end of the article. We developped this technique for the Validity system, based on EKS <ref> [2] </ref>, which uses the SLD-AL technique to ensure termination [15]. The main contribution of this article is the integration of a relational trace and a meta-interpreter, which is, to our knowledge, totally original. The practical impact of such a technique is important.
Reference: [3] <author> L. Byrd. </author> <title> Understanding the control flow of Prolog programs. </title> <editor> In S.-A. Tarnlund, editor, </editor> <booktitle> Logic Programming Workshop, </booktitle> <address> Debrecen, Hungary, </address> <year> 1980. </year>
Reference-contexts: The meta-interpreter creates a description file of the tree. The graph description language used is GML (Graph Modeling Language). The procedures of creation of node and edge generate GML data. Box-oriented trace A box-oriented trace gives a sequence of events inspired by those proposed in <ref> [3] </ref>. The meta-interpreter is instrumented following the tracing methods of Prolog programs described in [14, 18]. The trace format that we chose contains eight ports including four for the non admissible sub-goals. These ports are call, fail, exit, redo, call na, fail na, exit na, redo na.
Reference: [4] <author> M. Ducasse. Opium: </author> <title> An extendable trace analyser for prolog. </title> <journal> The Journal of Logic programming, </journal> <note> 1999. To appear in the special issue on Synthesis, Transformation and Analysis of Logic Programs, </note> <author> A. Bossi and Y. </author> <title> Deville (eds). </title>
Reference-contexts: The trace format that we chose contains eight ports including four for the non admissible sub-goals. These ports are call, fail, exit, redo, call na, fail na, exit na, redo na. The na suffixe relates to non admissible goals. A tool such as Opium <ref> [4] </ref> can be used to filter and analyze this trace. 7 Related work The first explanation system for deductive databases was developed for Dedex [7] by Wieland [17]. The suggested explanations are based on proof trees which can be visualized completely or partially.
Reference: [5] <author> M. Ducasse and J. </author> <title> Noye. Logic programming environments: Dynamic program analysis and debugging. </title> <journal> The Journal of Logic Programming, </journal> 19/20:351-384, May/July 1994. 
Reference-contexts: Although proof trees are often useful, this representation is not sufficient. Proof trees do not take into account the set-oriented aspect, they present results as if they were obtained a tuple at a time. Furthermore, in Prolog more varied techniques of debugging exist <ref> [5] </ref>. In particular, a very flexible technique to produce deduction explanation consists in instrumenting meta-interpreters. This instrumentation can be easily adapted to users' needs. However, this technique is in general too inefficient. This is especially true in deductive database due to the large quantity of data.
Reference: [6] <author> A. Lefebvre. </author> <title> Evaluation de requ^etes dans les bases de donnees deductives : aspects theoriques et pratiques. </title> <type> PhD thesis, </type> <institution> Universite Rene Descartes of Paris V, France, </institution> <month> juin </month> <year> 1991. </year>
Reference-contexts: Indeed, the technique is theoretically grounded. Firstly, in order to take into account the set-oriented aspects and the SLD-AL strategy, we adapt the multi-SLD operational semantics of Smith [10] and specify the multi-SLD-AL operational semantics. Secondly, we extend the meta-interpreters proposed by Lefebvre <ref> [6] </ref> to implement at the same time the SLD-AL method and the substitution sets. In the following we first present the multi-SLD-AL operational semantics. We then describe the set-oriented meta-interpreter. The relational trace is briefly described, followed by its integration with the meta-interpreter. <p> : ; A i1 ; B 1 ; : : : ; B k ; A i+1 ; : : : ; A n 3R (C) 3 A Multi-SLD-AL meta-interpreter The Prolog meta-interpreter, which we propose to fully implement the multi-SLD-AL resolution, is an extension of SLD-AL meta-interpreters introduced in <ref> [6] </ref> which did not take substitution sets into account. The meta-interpreter can be divided in two parts: the search tree traversal and the resolution which builds the substitutions sets. These two parts are briefly described in the remaining of this section. The full paper will describe the meta-interpreter in detail.
Reference: [7] <author> R. Marti, C. Wieland, and B. Wuthrich. </author> <title> Adding inferencing to a relational database management system. </title> <editor> In T. Harder, editor, Datenbanksysteme in Buro, </editor> <publisher> Technik und Wis-senschaft, </publisher> <pages> pages 266-270. </pages> <publisher> Springer Verlag, </publisher> <year> 1989. </year>
Reference-contexts: The na suffixe relates to non admissible goals. A tool such as Opium [4] can be used to filter and analyze this trace. 7 Related work The first explanation system for deductive databases was developed for Dedex <ref> [7] </ref> by Wieland [17]. The suggested explanations are based on proof trees which can be visualized completely or partially. The execution of the initial system is not exploited since Wieland redefines another parallel system which generates information dedicated 6 to the construction of the proof tree.
Reference: [8] <author> R. Ramakrishnan, D. Srivastava, and P. Sheshadri. </author> <title> Coral : Control, relations and logic. </title> <editor> In Li-Yan Yuan, editor, </editor> <booktitle> Proceedings of the 18th International Conference on Very Large Databases, </booktitle> <year> 1992. </year>
Reference-contexts: Technical Report Series, Department of Computer Science, University of Manchester, ISSN 1361-6161. Report number UMCS-98-6-1. http://www.cs.man.ac.uk/cstechrep/titles98.html 1 The existing explanation systems for deductive databases <ref> [17, 12, 8] </ref> give information in the shape of proof trees. Although proof trees are often useful, this representation is not sufficient. Proof trees do not take into account the set-oriented aspect, they present results as if they were obtained a tuple at a time. <p> This method involves a slow explanation system, disconnected from the initial system and a fixed type of trace. The system Explain [1] was developed for CORAL <ref> [8] </ref>. Like the preceding system, the selected structure is the proof tree. The implementation of the system Explain consists in adding in CORAL a program which stores information on derivations during the evaluation of the query.
Reference: [9] <author> R. Ramakrishnan and J. D. Ullman. </author> <title> A survey of deductive database systems. </title> <journal> Journal of logic programming, </journal> <pages> pages 125-149, </pages> <year> 1995. </year>
Reference-contexts: Hence, substitutions are managed in a set-oriented way. Lastly, dedicated search strategies ensure that a request on a deductive database always terminates <ref> [9] </ref>. 1 Extended Abstracts of LOPSTR'98, Eighth International Workshop on Logic-based Program Synthesis and Transformation, 15-19 June 1998, Manchester, UK. Technical Report Series, Department of Computer Science, University of Manchester, ISSN 1361-6161.
Reference: [10] <author> Donald A. Smith. MultiLog: </author> <title> Data Or-Parallel Logic Programming. </title> <journal> Journal of Logic Programming, </journal> <volume> 29 </volume> <pages> 195-244, </pages> <year> 1996. </year>
Reference-contexts: Another merit of this paper is to show a practical application of theoretical results. Indeed, the technique is theoretically grounded. Firstly, in order to take into account the set-oriented aspects and the SLD-AL strategy, we adapt the multi-SLD operational semantics of Smith <ref> [10] </ref> and specify the multi-SLD-AL operational semantics. Secondly, we extend the meta-interpreters proposed by Lefebvre [6] to implement at the same time the SLD-AL method and the substitution sets. In the following we first present the multi-SLD-AL operational semantics. We then describe the set-oriented meta-interpreter. <p> This resolution is an optimization of SLD resolution which cuts infinite branches from the search tree. At present there is no formalization of the SLD-AL operational semantics. On the other hand, the multi-SLD resolution presented by Smith <ref> [10] </ref> takes into account data parallelism, similar to the database one, but formalizes an unrestricted search. We therefore extend the multi-SLD operational semantics to take the test of admissibility and resolution on lemmas into account. Moreover, evaluation of built-in predicates is added. The new semantics is called multi-SLD-AL.
Reference: [11] <author> G. Specht. </author> <title> Source-to-source Transformationen zur Erklarung des Programmverhaltens bei deduktiven Datenbanken. </title> <type> PhD thesis, </type> <institution> Technische Universitat Munchen, </institution> <month> Juni </month> <year> 1992. </year>
Reference-contexts: This technique of generation of trace can be compared with that practised in Validity except that the information stored for Explain is completely dedicated to the construction of proof trees and does not keep any data on the operational semantics used. The third system, designed by Specht <ref> [11] </ref> for LOLA [13], uses also the proof trees as explanations. The principle of implementation is a transformation of the user's program to insert trace generation. In opposition to other systems it does not modify the deductive engine. The transformed program is queried as usual using the deductive engine.
Reference: [12] <author> G. Specht. </author> <title> Generating explanation trees even for negations in deductive database systems. </title> <editor> In M. Ducasse, B. Le Charlier, Y.-J. Lin, and U. Yalcinalp, editors, </editor> <booktitle> Proceedings of ILPS'93 Workshop on Logic Programming Environments, </booktitle> <year> 1993. </year> <note> Publication IRISA. </note>
Reference-contexts: Technical Report Series, Department of Computer Science, University of Manchester, ISSN 1361-6161. Report number UMCS-98-6-1. http://www.cs.man.ac.uk/cstechrep/titles98.html 1 The existing explanation systems for deductive databases <ref> [17, 12, 8] </ref> give information in the shape of proof trees. Although proof trees are often useful, this representation is not sufficient. Proof trees do not take into account the set-oriented aspect, they present results as if they were obtained a tuple at a time.
Reference: [13] <author> G. Specht and B. Freitag. </author> <title> Amos : a natural language parser implemented as a deductive database in LOLA. </title> <editor> In R. Ramakrishnan, editor, </editor> <booktitle> Applications of logic databases, </booktitle> <pages> pages 197-214. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1995. </year>
Reference-contexts: The third system, designed by Specht [11] for LOLA <ref> [13] </ref>, uses also the proof trees as explanations. The principle of implementation is a transformation of the user's program to insert trace generation. In opposition to other systems it does not modify the deductive engine. The transformed program is queried as usual using the deductive engine.
Reference: [14] <author> L. Sterling and E. Shapiro. </author> <title> The Art of Prolog, second edition. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1994. </year> <note> ISBN 0-262-19338-8. </note>
Reference-contexts: The procedures of creation of node and edge generate GML data. Box-oriented trace A box-oriented trace gives a sequence of events inspired by those proposed in [3]. The meta-interpreter is instrumented following the tracing methods of Prolog programs described in <ref> [14, 18] </ref>. The trace format that we chose contains eight ports including four for the non admissible sub-goals. These ports are call, fail, exit, redo, call na, fail na, exit na, redo na. The na suffixe relates to non admissible goals.
Reference: [15] <author> L. Vieille. </author> <title> Bases de donnees deductives : evaluation et optimisation de programmes logiques recursifs. </title> <type> PhD thesis, </type> <institution> Universite Paris 6, </institution> <month> septembre </month> <year> 1988. </year>
Reference-contexts: In particular, the flexibility of the technique enables different traces to be easily produced, as illustrated at the end of the article. We developped this technique for the Validity system, based on EKS [2], which uses the SLD-AL technique to ensure termination <ref> [15] </ref>. The main contribution of this article is the integration of a relational trace and a meta-interpreter, which is, to our knowledge, totally original. The practical impact of such a technique is important. As already mentioned, users of deductive databases have many different profiles. <p> A comparison with related work finishes the article. 2 2 The multi-SLD-AL operational semantics The Validity system is based on SLD-AL resolution (SLD with test of Admissibility and resolution on Lemmas) <ref> [15] </ref>. This resolution is an optimization of SLD resolution which cuts infinite branches from the search tree. At present there is no formalization of the SLD-AL operational semantics.
Reference: [16] <author> L. Vieille, P. Bayer, V. Kuchenhoff, and A. Lefebvre. EKS-V1, </author> <title> a short overview. </title> <booktitle> In Workshop on Knowledge Base Management System, </booktitle> <address> Boston, USA, </address> <month> July </month> <year> 1990. </year> <pages> AAAI-90. </pages>
Reference-contexts: It is based on the EKS system <ref> [16] </ref>. It uses a relational database to handle facts. At compilation time, each rule is transformed into a dataflow sequence which defines the flow of the data inside a rule via relations and operations on these relations (projection, joint).
Reference: [17] <author> C. Wieland. </author> <title> Two explanation facilities for the deductive database management system DeDex. </title> <editor> In H. Kangassalo, editor, </editor> <booktitle> Proceedings of the 9th Conference on Entity-Relationship Approach, </booktitle> <pages> pages 189-203, </pages> <year> 1990. </year> <institution> ETH Zurich. </institution>
Reference-contexts: Technical Report Series, Department of Computer Science, University of Manchester, ISSN 1361-6161. Report number UMCS-98-6-1. http://www.cs.man.ac.uk/cstechrep/titles98.html 1 The existing explanation systems for deductive databases <ref> [17, 12, 8] </ref> give information in the shape of proof trees. Although proof trees are often useful, this representation is not sufficient. Proof trees do not take into account the set-oriented aspect, they present results as if they were obtained a tuple at a time. <p> The na suffixe relates to non admissible goals. A tool such as Opium [4] can be used to filter and analyze this trace. 7 Related work The first explanation system for deductive databases was developed for Dedex [7] by Wieland <ref> [17] </ref>. The suggested explanations are based on proof trees which can be visualized completely or partially. The execution of the initial system is not exploited since Wieland redefines another parallel system which generates information dedicated 6 to the construction of the proof tree.
Reference: [18] <author> L. U. Yalcinalp. </author> <title> Meta-programming for knowledge based systems in Prolog. </title> <type> PhD thesis, </type> <institution> Case Western Reserve University, Cleveland, Ohio 44106, </institution> <month> August </month> <year> 1991. </year> <type> Technical Report TR 91-141. </type>
Reference-contexts: The procedures of creation of node and edge generate GML data. Box-oriented trace A box-oriented trace gives a sequence of events inspired by those proposed in [3]. The meta-interpreter is instrumented following the tracing methods of Prolog programs described in <ref> [14, 18] </ref>. The trace format that we chose contains eight ports including four for the non admissible sub-goals. These ports are call, fail, exit, redo, call na, fail na, exit na, redo na. The na suffixe relates to non admissible goals.
References-found: 18

