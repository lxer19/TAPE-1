URL: http://www.cs.uoregon.edu/~chundhau/research/tr-94-27.ps.Z
Refering-URL: http://www.cs.gatech.edu/computing/classes/cs7390_98_winter/talks/cogn/slide18.html
Root-URL: 
Email: douglas@cs.uoregon.edu  
Phone: (503) 346-3974  
Title: Exploring Human Visualization of Computer Algorithms  
Author: Sarah Douglas Donna McKeown Christopher Hundhausen 
Keyword: visualization, algorithm visualization, mental models, empirical studies, individual differences  
Address: Eugene, OR 97403  
Affiliation: 1 Computer Information Science Dept. 2 Psychology Dept. University of Oregon  
Abstract: Many educators have used Algorithm Visualization (AV) to teach students of computer science about how computer algorithms work. Our study sheds light on two important questions: (a) How do people conceptualize algorithm animations in the first place; and (b) To what extent do such visualizations accord with AV software. In the first half of this study, pairs of graduate students in computer science were asked to construct animations for a simple sort (bubble sort) using ordinary art materials. In the second half, they implemented a bubble sort visualization using an interactive AV program called LENS [1], which allows one to construct and view an animation of any C program. The way in which pairs visualized the same sort differed tremendously from each other and did not accord completely with the animation language provided by LENS. This paper analyzes those differences by a detailed examination of the semantics of the human visualizations, the algorithm code, and the LENS AV language. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Mukherjea, S., & Stasko, J.T. </author> <title> Applying algorithm animation techniques for program tracing, debugging, </title> <booktitle> and understanding. Proc. 15th IEEE International Conference on Software Engineering (Baltimore, </booktitle> <address> MD, </address> <year> 1993), </year> <pages> pp. 456 465. </pages>
Reference-contexts: Since we are also interested in gaining a better understanding of the usability of AV software which allows users to construct their own algorithm animations, we continued our study with participants learning and using an experimental prototype of a highly interactive version of XTango called LENS <ref> [1] </ref> to produce animations. Our study sheds light on two important questions: (a) How do people conceptualize algorithm animations in the first place; and (b) To what extent do such visualizations accord with AV software. <p> In targeting the activities of high-level debugging, program testing, and refinement, not low-level debugging <ref> (Mukherjea & Stasko, 1993, p. 3) </ref>, the LENS system purports to provide direct-manipulation support for activity (c) noted above. The user interface to LENS offers a menu of animation primitives (flash, move, exchange, change color, change fill, create/delete image) which animate rectangles.
Reference: 2. <author> Van Dam, A. </author> <title> The electronic classroom: Workstations for teaching. </title> <journal> International Journal of Man-Machine Studies 21 , 4 (1984), </journal> <volume> 353363. </volume>
Reference-contexts: In AV the algorithms dynamic procedural behavior is represented as state changes to graphic entities. This illumination of the logic that underlies algorithm behavior has been used for communicating concepts about the algorithm and for testing correct implementation. Pioneered by Brown Universitys Electronic Classroom project <ref> [2] </ref>, and formalized by Marc Browns seminal dissertation Algorithm Animation [3], AV has gained an enthusiastic following among undergraduate computer science educators who have come to see it as an effective and innovative method for teaching algorithms.
Reference: 3. <author> Brown, M. </author> <title> Algorithm Animation . Cambridge, </title> <address> MA: </address> <publisher> The MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: This illumination of the logic that underlies algorithm behavior has been used for communicating concepts about the algorithm and for testing correct implementation. Pioneered by Brown Universitys Electronic Classroom project [2], and formalized by Marc Browns seminal dissertation Algorithm Animation <ref> [3] </ref>, AV has gained an enthusiastic following among undergraduate computer science educators who have come to see it as an effective and innovative method for teaching algorithms. <p> The second sort animation task is not reported in this paper since its usability details are beyond the scope of this paper. The major difference between LENS and traditional AV software (see, for example, <ref> [3, 5,12] </ref>) is that it provides the user with a set of graphic objects and transformation processes which allows the user to construct the visualization for an algorithm interactively , and at runtime . <p> Written for XWindows, LENS allows users to load the source code of their C programs into an interactive environment, in which they occupy a scrollable source code window. Using the interesting events paradigm established by Brown <ref> [3] </ref>, users can interactively annotate their algorithms by (a) identifying points in their programs at which interesting events occur; (b) determining what graphical sequence would appropriately characterize those events; and (c) mapping the interesting events to graphics by manipulating the user interface.
Reference: 4. <author> Stasko, J., Badre, A., & Lewis, C. </author> <title> Do algorithm animations assist learning? An empirical study and analysis. </title> <booktitle> Proceedings of the INTERCHI 93 Conference on Human Factors in Computing Systems (Amsterdam, </booktitle> <address> The Netherlands, </address> <year> 1993), </year> <pages> pp. 6166. </pages>
Reference-contexts: Despite this enthusiasm, AVs effectiveness in learning algorithms has not been demonstrated empirically. For example, in one of the few experimental studies to date Stasko, Badre, and Lewis <ref> [4] </ref> published disappointing results. In the Stasko et al. study computer science graduate students taking an advanced algorithms course were presented with information about a pairing heap algorithm in two different media: text-only versus text-and-animation. The text-and-animation condition was presented on the XTango animation system. <p> Students had difficulty understanding this predefined graphical representation even though they demonstrated knowledge of the process being illustrated. That is, a graphical representation as a language per se must be understood before it can aid in explanation. Stasko et al. <ref> [4] </ref> describe this as a mapping from the abstract computational algorithm domain to the animated computer graphics domain. For example, in the movie Sorting Out Sorting [7] the magnitude of the elements being sorted are represented by different length and color of rods. <p> Our research suggests that visualizations aim at a very high level of functionality and thus do not provide the detailed procedural information of 8 algorithm pseudocode. This might account for the prior findings of Stasko et al. <ref> [4] </ref> that AV provides no advantage over text-only teaching material. Our research also deomonstrates that human visualization of algorithms can be quite creative and can vary significantly from one group to another.
Reference: 5. <author> Stasko, J.T. </author> <title> Tango: A framework and system for algorithm animation. </title> <booktitle> IEEE Computer (September 1990), </booktitle> <pages> pp. 27-39. </pages>
Reference-contexts: In the Stasko et al. study computer science graduate students taking an advanced algorithms course were presented with information about a pairing heap algorithm in two different media: text-only versus text-and-animation. The text-and-animation condition was presented on the XTango animation system. XTango is derived from Tango <ref> [5] </ref> and provides minimal interactivity by allowing speed control, but not rewind or replay capability. Learning was measured by a test of 24 questions. These questions reflected three different types of knowledge and thinking: declarative, analytical, and procedural. <p> The user interface to LENS offers a menu of animation primitives (flash, move, exchange, change color, change fill, create/delete image) which animate rectangles. These primitives map interesting events in the code to the underlying Tango AV language <ref> [5] </ref> on which LENS is based. The spatial extent (either height or width) of rectangles is automatically determined by the value of elements in C code arrays. Procedure Participants were given a three page description of procedural instructions for implementing a predefined animation for bubble sort defined by the authors.
Reference: 6. <author> Douglas, S.A. and Liu, Z-Y. </author> <title> Qualitative simulation and causal explanation in an intelligent tutor. </title> <booktitle> Proceedings of the International Conference on Artificial Intelligence , (Detroit, </booktitle> <address> MI, </address> <month> August, </month> <year> 1989). </year>
Reference-contexts: In addition to understanding the underlying concepts of the dynamic process, students also must understand the relationship between those concepts and the graphical 4/9/95 2 18:35 PM representation. For example, in an AI tutoring system for teaching about the cardiovascular system <ref> [6] </ref>, we generated a dynamic graphical network of cause and effect relations between variables such as pressure, flow and resistance to create visual explanations of simulation behavior. Students had difficulty understanding this predefined graphical representation even though they demonstrated knowledge of the process being illustrated.
Reference: 7. <author> Baecker, R.M, & Sherman, </author> <title> R.M. Sorting out sorting. 16mm color sound film shown at SIGGRAPH 81 (Dallas, </title> <address> TX, </address> <year> 1981). </year>
Reference-contexts: That is, a graphical representation as a language per se must be understood before it can aid in explanation. Stasko et al. [4] describe this as a mapping from the abstract computational algorithm domain to the animated computer graphics domain. For example, in the movie Sorting Out Sorting <ref> [7] </ref> the magnitude of the elements being sorted are represented by different length and color of rods. Our prior research suggests that both the graphical language elements and the mapping may not be self-evident. The trick, then, for an AV system is to get the graphical representation right. <p> Two pairs had no prior experience with AV, and one pairs experience was limited to a knowledge of the sorting animations pioneered by the film Sorting Out Sorting <ref> [7] </ref>.
Reference: 8. <author> Paivio, A. </author> <title> Mental representations: A dual coding approach. </title> <address> New York: </address> <publisher> Oxford University Press, </publisher> <year> 1990. </year>
Reference-contexts: Indeed, the psychologist Paivio argues that we have more than one kind of code for representing constructs <ref> [8] </ref>. Specifically he proposes both a verbal and visual code. The more codes we can relate the material to, the better we can remember it.
Reference: 9. <author> Miyake, N. </author> <title> Constructive interaction and the iterative process of understanding. </title> <booktitle> Cognitive Science 10 , (1986), </booktitle> <pages> 151177. </pages>
Reference: 10. <author> Suchman, L. </author> <title> Plans and situated actions: The problem of humanmachine communication . Cambridge: </title> <publisher> Cambridge University Press, </publisher> <year> 1987. </year>
Reference: 11. <author> Douglas, S.A. </author> <title> Conversational analysis and human-computer interaction design. </title> <editor> P.Thomas (Ed.) </editor> <title> The Social and Interactional Dimensions of Human-Computer Interfaces Cambridge University Press, </title> <publisher> (in press). </publisher>
Reference-contexts: In this study, we used constructive interaction to collect the data which we then reviewed using conversational analysis techniques developed by Douglas <ref> [11] </ref>. This provided an interpretation of participants intentions, expectations and strategies. Observations As it turned out, in explaining bubble sort to a hypothetical novice, all participants made extensive and intriguing use of the art supplies with which we supplied them.
Reference: 12. <author> Naps, </author> <title> T.L, & Hundhausen, C.D. The evolution of an algorithm visualization system. </title> <booktitle> Proc. 24th Annual Small college Computing Symposium (Morris, </booktitle> <address> MN, </address> <year> 1991), </year> <pages> pp. 259-263. </pages>
References-found: 12

