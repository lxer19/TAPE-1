URL: ftp://ftphost.comp.vuw.ac.nz/doc/vuw-publications/Staff/Eric-Jones/AAAI-94.ps.gz
Refering-URL: http://www.comp.vuw.ac.nz/~jones/publications/publications_1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Eric.Jones@comp.vuw.ac.nz Linton.Miller@comp.vuw.ac.nz  
Title: Lfl Parsing: A General Framework for Syntactic Analysis of Natural Language  
Author: Eric K. Jones and Linton M. Miller 
Address: P.O. Box 600, Wellington, New Zealand  
Affiliation: Department of Computer Science Victoria University of Wellington  
Abstract: We describe a new algorithm for table-driven parsing with context-free grammars designed to support efficient syntactic analysis of natural language. The algorithm provides a general framework in which a variety of parser control strategies can be freely specified: bottom-up strategies, top-down strategies, and strategies that strike a balance between the two. The framework permits better sharing of parse forest substructure than other table-driven approaches, and facilitates the early termination of semantically ill-formed partial parses. The algorithm should thus find ready application to large-scale natural language processing. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Abney, S. P., and Johnson, M. </author> <title> Memory requirements and local ambiguity of parsing strategies. </title> <type> Unpublished manuscript. </type>
Reference: <author> Aho, A. V., and Ullman, J. D. </author> <year> 1977. </year> <title> Principles of Compiler Design. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> Billot, S., and Lang, B. </author> <year> 1989. </year> <title> The structure of shared forests in ambiguous parsing. </title> <booktitle> In Proc. 27th Annual Meeting of the ACL, </booktitle> <pages> 143-151. </pages> <address> Vancouver, British Columbia: </address> <publisher> ACL. </publisher>
Reference-contexts: For example, Billot and Lang found that for k &gt; 0, Lang's parser with an LR (k) driver often produces worse sharing than an LR (0) driver <ref> (Billot & Lang 1989) </ref>. Indeed, for k &gt; 1, the consequent loss of efficiency is usually so great that the overall performance of the parser degrades, even though it has a larger deterministic domain.
Reference: <author> Jones, E. K., and Miller, L. M. </author> <year> 1992. </year> <title> Eager GLR parsing. </title> <booktitle> In First Australian Workshop on Natural Language Processing and Information Retrieval. </booktitle>
Reference: <author> Jones, E. K., and Miller, L. M. </author> <year> 1993. </year> <title> The Lfl parsing algorithm. </title> <type> Technical Report CS-TR-93/9, </type> <institution> Victoria University of Wellington. </institution>
Reference: <author> Kaplan, R. M. </author> <year> 1973. </year> <title> A general syntactic processor. </title> <editor> In Rustin, R., ed., </editor> <booktitle> Natural Language Processing. </booktitle> <publisher> Algorithmic Press. </publisher> <pages> 193-241. </pages>
Reference-contexts: Efficiency: Even in the best of circumstances, a parser has to consider large numbers of partial parses, so it must be able to produce these parses efficiently. The general framework of chart parsing <ref> (Kaplan 1973) </ref> allows users to freely specify a range of parser control strategies, but inefficiently encodes the dynamic state of the parser as a large set of edges or items in a data structure called a chart (Kay 1986; Aho & Ullman 1977).
Reference: <author> Kay, M. </author> <year> 1986. </year> <title> Algorithm schemata and data structures in syntactic processing. </title> <editor> In Grosz, B. J.; Jones, K. S.; and Webber, B. L., eds., </editor> <booktitle> Readings in Natural Language Processing. </booktitle> <publisher> Morgan Kaufmann. </publisher> <pages> 35-70. </pages>
Reference: <author> Lang, B. </author> <year> 1974. </year> <title> Deterministic techniques for efficient nondeterministic parsers. </title> <editor> In Loeck, J., ed., </editor> <booktitle> Proc. 2nd Colloquium on Automata, Languages and Programming, volume 14 of Lecture Notes in Computer Science, </booktitle> <pages> 255-269. </pages> <publisher> Saarbrucken: Springer-Verlag. </publisher>
Reference: <author> Leermakers, R. </author> <year> 1989. </year> <title> How to cover a grammar. </title> <booktitle> In Proc. 27th Annual Meeting of the ACL, </booktitle> <pages> 135-142. </pages> <address> Vancouver, British Columbia: </address> <publisher> ACL. </publisher>
Reference: <author> Miller, L. M. </author> <year> 1994. </year> <title> Flexible table-driven parsing for natural language understanding. </title> <type> Master's thesis, </type> <institution> Victoria University of Wellington. Forthcoming. </institution>
Reference-contexts: In general, a stack top can only be rejected once every partial derivation that can conceivably use its forest node has itself been rejected. It turns out to be easy to compute the number of such partial derivations <ref> (Miller 1994) </ref>; each stack top contains a counter that is initialized to this number. Every time a derivation is rejected by the oracle, the parser follows kill pointers to locate stack tops at which associated combine actions may occur, and decrements their counters.
Reference: <author> Nederhof, M.-J. </author> <year> 1993. </year> <title> Generalised left-corner parsing. </title> <booktitle> In Proc. 6th Conference of the European Chapter of the ACL, </booktitle> <pages> 305-314. </pages> <address> Utrecht, The Netherlands: </address> <publisher> ACL. </publisher>
Reference-contexts: than chart parsers in practical applications, even though their time complexity may be worse in some cases. 1 Such algorithms, however, are inflexible: their con 1 If the length of the right-hand side of the longest rule is p, then a GLR parser has time complexity O (n p+1 ) <ref> (Nederhof 1993) </ref>. trol strategies are fixed and cannot be altered in any way by the user. In this paper, we present a new framework for table-driven parsing called Lfl parsing that attempts to get the best of both worlds. Our algorithm extends the algorithm for GLR parsing.
Reference: <author> Schabes, Y. </author> <year> 1991. </year> <title> Polynomial time and space shift-reduce parsing of arbitrary context-free grammars. </title> <booktitle> In Proc. 29th Annual Meeting of the ACL, </booktitle> <pages> 106-113. </pages> <address> Berkeley, California: </address> <publisher> ACL. </publisher>
Reference: <author> Steel, S., and De Roeck, A. N. </author> <year> 1987. </year> <title> Bidirectional chart parsing. </title>
Reference-contexts: For example, Steel and De Roeck claim that certain phenomena such as traces are most efficiently analyzed top down, while others such as coordinate conjunctions should be parsed bottom up <ref> (Steel & De Roeck 1987) </ref>. The Lfl algorithm provides a convenient uniform framework for comparing the relative efficiency of different approaches. We also plan to change the search within the parser from a breadth-first to a best-first mechanism, and extend the oracle to allow graded judgements that can inform this search.
Reference: <editor> In Mellish, C. S., and Hallam, J., eds., </editor> <booktitle> Advances in Artificial Intelligence (Proc. AISB-87), </booktitle> <pages> 223-235. </pages> <editor> J. </editor> <publisher> Wiley and Sons. </publisher>
Reference: <author> Tomita, M., and Ng, S. </author> <year> 1991. </year> <title> The generalized LR parsing algorithm. </title> <editor> In Tomita, M., ed., </editor> <title> Generalized LR Parsing. </title> <publisher> Kluwer Academic Publishers. </publisher> <pages> 1-16. </pages>
Reference: <author> Tomita, M. </author> <year> 1986. </year> <title> Efficient Parsing for Natural Language. </title> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: Constructing and maintaining these edges requires a high constant-factor overhead at each stage of the parse. Table-driven algorithms such as generalized LR (GLR) parsing <ref> (Tomita 1986) </ref> or the method of Schabes (1991) aim for better efficiency by performing much of this computation off line, when the parse table is constructed.
References-found: 16

