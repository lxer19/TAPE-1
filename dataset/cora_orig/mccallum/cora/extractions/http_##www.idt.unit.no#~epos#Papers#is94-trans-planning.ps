URL: http://www.idt.unit.no/~epos/Papers/is94-trans-planning.ps
Refering-URL: http://www.idt.unit.no/~epos/bibliografia.html
Root-URL: 
Title: PLANNING SUPPORT FOR COOPERATING TRANSACTIONS IN EPOS  
Author: Reidar Conradi Chunnian Liu and Marianne Hagaseth 
Keyword: Key words: Software Process Modelling, Planning, Cooperating Transactions  
Address: (NTH), Trondheim, Norway  P.R. China  
Affiliation: 1 Norwegian Institute of Technology  Beijing Polytechnic University, Beijing,  
Note: Pergamon Information Systems Vol. 20, No. 4, pp. 317-336, 1995 Copyright c 1995 Elsevier Science Ltd Printed in Great Britain. All rights reserved  in final revised form  
Phone: 0306-4379/95 $9.50 0.00  2  
Date: (Received August 1994;  23 February 1995)  
Abstract: The paper observes that current transaction models in databases are too strict for cooperative and long transactions in software engineering. On the other hand, unrestricted concur-rency and data sharing is not desirable either. The paper describes a way to reduce the number of conflicts that may arise when several users cooperate to solve a task using a common database. Manual interaction among the users are made easier by helping a project manager to better partition, schedule and connect the users' local activities as part of a common task. Given a proposed project division, we can assess the connections between subprojects through impact analysis. Based on this analysis, the project manager can choose to adjust the initial partitioning to reduce the dependencies between subprojects. The impact analysis can further help the project manager to schedule the identified subprojects. Lastly, such analysis can be used to suggest suitable cooperation protocols between subprojects, being scheduled in parallel. Such protocols will guide mutual propagation and sharing of temporary results, and associated negotiation. The paper also reports the preliminary implementation status of this work in the EPOS kernel software engineering environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Evan Adams and John Treacy. </author> <title> Simplicity in software configuration management. </title> <booktitle> In [25], </booktitle> <pages> pp. </pages> <month> 1-2 </month> <year> (1993). </year>
Reference-contexts: Planning Cooperating Transactions 319 fine-grained cooperation control are rather strict. Experience from NSE indicates that there are very few direct Write-Write conflicts (1 per 3000 updates) <ref> [1] </ref>. Simple versioning and rebuild systems, like SCCS [61] and Make [24], offer marginal help for cooperating transactions. Even more advanced versioning systems like DSEE [49], its ClearCase [48] successor and Adele [5] all with high-level configuration descriptions, have very crude transaction and cooperation facilities.
Reference: [2] <author> Jose A. Ambros-Ingerson and Sam Steel. </author> <title> Integrating planning, execution and monitoring. </title> <booktitle> In Proc. of AAAI'88, </booktitle> <pages> pp. </pages> <month> 83-88 </month> <year> (1988). </year>
Reference-contexts: However, there is no easy way to operationalise such constraints. See also work by [62]. For general software engineering activities, domain-independent and non-linear planning algorithms can be found in IPEM <ref> [2] </ref> and TWEAK [9]. TWEAK gives a formal treatment to the subject of non-linear planning. IPEM tries to integrate planning, execution and monitoring in fine granularity, mainly for exception handling.
Reference: [3] <author> Tim Andrews, Craig Harris, and Kiril Sinkel. ONTOS: </author> <title> A persistent database for C++. </title> <booktitle> In In [30], chapter 21, </booktitle> <pages> pp. 387-406. </pages> <publisher> Prentice-Hall (1991). </publisher>
Reference-contexts: Most of the new transaction models propose nested transactions, cf. the ones by [54] at MIT, by Gandalf [58], by [43] for CAD, and by Marvel [38]. Some commercial DBMSes also provide such transactions, e.g. DAMOKLES [19], ORION [40], ObjectStore [45], ONTOS <ref> [3] </ref>, Adele [5], and DEC's Object/DB [15]. Cooperation is however limited to parent-children. User-controllable consistency rules can sometimes be applied upon commit, e.g. in DAMOKLES and Adele. Grouping of related transactions to better handle update and commit conflicts is reported in [26] and [64].
Reference: [4] <author> Naser S. Barghouti and Gail E. Kaiser. </author> <title> Concurrency control in advanced database applications. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(3) </volume> <month> 269-317 </month> <year> (1991). </year> <note> 334 Reidar Conradi et al. </note>
Reference-contexts: However, we must also consider inter-version propagation and that side-effect propagation can be very time-consuming and assume unobtainable access rights. Classic DBMS triggers inside short transactions are therefore insufficient, and more general notifiers are needed to handle free-standing or delayed actions. Some newer database transaction models are treated in <ref> [4, 22, 39, 7, 41] </ref>. However, little fundamental work on new transaction models has been reported since 1992, so the area seems hard in spite of its relevance.
Reference: [5] <author> Noureddine Belkhatir, Jacky Estublier, and Walcelio Melo. </author> <title> Software process model and work space control in the Adele system. </title> <booktitle> In [59], </booktitle> <pages> pp. </pages> <month> 2-11 </month> <year> (1993). </year>
Reference-contexts: Most of the new transaction models propose nested transactions, cf. the ones by [54] at MIT, by Gandalf [58], by [43] for CAD, and by Marvel [38]. Some commercial DBMSes also provide such transactions, e.g. DAMOKLES [19], ORION [40], ObjectStore [45], ONTOS [3], Adele <ref> [5] </ref>, and DEC's Object/DB [15]. Cooperation is however limited to parent-children. User-controllable consistency rules can sometimes be applied upon commit, e.g. in DAMOKLES and Adele. Grouping of related transactions to better handle update and commit conflicts is reported in [26] and [64]. <p> Experience from NSE indicates that there are very few direct Write-Write conflicts (1 per 3000 updates) [1]. Simple versioning and rebuild systems, like SCCS [61] and Make [24], offer marginal help for cooperating transactions. Even more advanced versioning systems like DSEE [49], its ClearCase [48] successor and Adele <ref> [5] </ref> all with high-level configuration descriptions, have very crude transaction and cooperation facilities. Digression: When all transactions in an unversioned DBMS commit, there is one canonical and consistent version of the database.
Reference: [6] <author> Noureddine Belkhatir, Jacky Estublier, and Walcelio L. Melo. Adele2: </author> <title> A support to large software development process. </title> <booktitle> In Proc. 1st Conference on Software Process (ICSP1), </booktitle> <address> Redondo Beach, CA, </address> <pages> pp. </pages> <month> 159-170 </month> <year> (1991). </year>
Reference-contexts: It is important to be able to delay the effect of other's (pre-committed) updates to a later time, cf. copy-on-read, although we eventually have to incorporate such changes. y Adapted after Adele's proposed design for workspace coordination <ref> [6] </ref>. Planning Cooperating Transactions 327 * Acceptance Rule, being either Auto-ack or Manual-ack. Auto-ack requires that a notification always is sent, but no answer expected. This is followed by Auto-copy, if there are no conflicting textual updates, otherwise a merging must be performed.
Reference: [7] <editor> M. Brodie, M. Jarke, and M. Papazoglou, editors. </editor> <booktitle> Proc. of the 2nd International Conference of Cooperative Information Systems, </booktitle> <address> Toronto, Canada (1994). </address>
Reference-contexts: However, we must also consider inter-version propagation and that side-effect propagation can be very time-consuming and assume unobtainable access rights. Classic DBMS triggers inside short transactions are therefore insufficient, and more general notifiers are needed to handle free-standing or delayed actions. Some newer database transaction models are treated in <ref> [4, 22, 39, 7, 41] </ref>. However, little fundamental work on new transaction models has been reported since 1992, so the area seems hard in spite of its relevance.
Reference: [8] <author> D.E. Carter and B.S. Baker. </author> <title> Concurrent Engineering | The Product Development Environment for the 1990's. </title> <publisher> Addison-Wesley, </publisher> <address> 175 p. </address> <year> (1992). </year>
Reference-contexts: In contrast, a versioned database maintains and controls permanently and mutually separate (sub)databases! Workflow systems [71] are relevant to transaction planning, by exploiting scripts and constraints (PRE/POST-conditions) attached to networked activities. Concurrent engineering <ref> [8] </ref> is also relevant, e.g. DICE (DARPA Initiative in Concurrent Engineering) [60] which uses a simple transaction model based on communication/negotiation. We can further mention groupware (often synonymous with CSCW) [21] and distributed agents [50], both with focus on team organisation, user roles and communication patterns, see e.g. [17].
Reference: [9] <author> David Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <month> 333-377 </month> <year> (1987). </year>
Reference-contexts: However, there is no easy way to operationalise such constraints. See also work by [62]. For general software engineering activities, domain-independent and non-linear planning algorithms can be found in IPEM [2] and TWEAK <ref> [9] </ref>. TWEAK gives a formal treatment to the subject of non-linear planning. IPEM tries to integrate planning, execution and monitoring in fine granularity, mainly for exception handling. Both TWEAK and IPEM address the non-linear planning problem in a domain-independent way, with examples mainly from the Block World domain (robot applications).
Reference: [10] <author> Elliot J. Chikofsky et al. </author> <title> Reverse reengineering and design recovery: A taxonomy. </title> <journal> IEEE Software, </journal> <volume> 7(1) </volume> <month> 13-17 </month> <year> (1990). </year>
Reference-contexts: Among CASE tools, ISTAR [20] has subcontracts, but little formal cooperation among these. A design tool like StP [70] has also marginal support for cooperation. More comprehensive environments like IEF [68] are still weak on groupware functionality. Structuring and planning of cooperative work is related to reengineering <ref> [10] </ref> and complexity metrics. That is, how to identify clusters of software with high internal cohesion and few interdependencies. See also recent work on software architectures [63]. We can also mention general project management [53] (not considered in this paper).
Reference: [11] <author> Reidar Conradi, Tor M. </author> <title> Didriksen, </title> <editor> and Dag H. Wanvik, editors. </editor> <booktitle> Proc. IFIP WG-2.4 International Workshop on Advanced Programming Environments, </booktitle> <address> 16-18 June 1986, Trondheim, Norway. </address> <publisher> Springer Verlag LNCS 244, </publisher> <address> 604 p. </address> <year> (1987). </year>
Reference: [12] <author> Reidar Conradi et al. </author> <title> Design, use, and implementation of SPELL, A language for software process modeling and evolution. </title> <booktitle> In [18], </booktitle> <pages> pp. </pages> <month> 167-177 </month> <year> (1992). </year>
Reference-contexts: Each task (activity) has data inputs/ outputs regulated by formal parameters, a script to call tools, and PRE/POST-conditions to express constraints. The process model is defined by an object-oriented and reflective process modelling language, called SPELL <ref> [12] </ref> [36]. The task networks and all associated model information reside in a subdatabase under the versioned EPOSDB [51] [55], under the control of a special project task. See subsection 3.2. 3.1.
Reference: [13] <author> Reidar Conradi and Carl Chr. Malm. </author> <title> Cooperating transactions and workspaces in EPOS: Design and preliminary implementation. </title> <editor> In Rudolf Andersen, Janis A. Bubenko jr., and Arne Stlvberg, editors, </editor> <booktitle> Proc. of CAiSE'91, the 3rd International Conference on Advanced Information Systems, </booktitle> <address> Trondheim, Norway, </address> <month> 13-15 May </month> <year> 1991, </year> <pages> pp. 375-392. </pages> <publisher> LNCS 498, Springer Verlag, </publisher> <address> 578 p. </address> <year> (1991). </year>
Reference-contexts: The existing Planner is used to (re)generate such networks, using domain knowledge in form of task types, product structures etc. [52]. Early work on cooperating transactions in EPOS was reported in <ref> [13] </ref> and [56]. Later the EPOS transaction model has been extended both wrt. functionality and instrumentability [31] [46] [47] and through the TDL. However, the TDL is still rather low-level, thus motivating the current work. 4.
Reference: [14] <author> Reidar Conradi, Espen Osjord, Per H. Westby, and Chunnian Liu. </author> <title> Initial software process management in EPOS. </title> <journal> Software Engineering Journal (Special Issue on Software process and its support), </journal> <volume> 6(5) </volume> <month> 275-284 </month> <year> (1991). </year>
Reference-contexts: On the other hand, unrestricted concurrency and data sharing is not desirable either. We need some high-level transaction planning facilities which can help the project manager in various ways, and which can be translated into low-level protocols. EPOS is a kernel Software Process Environment <ref> [14] </ref>, supporting nested, cooperative and long transactions. This paper reports work on more high-level planning support to: 1. Partition transactions or projects, to limit interconnections between the resulting subtrans actions. 2. Schedule the above subtransactions, to ensure a reasonably good performance of the overall software process; and 3. <p> In this subsection, we describe the main data structure relevant to impact analysis. 4.1.1. Two Extensions of EPOS Data Model to Support Impact Analysis The EPOSDB data model is an Object-Oriented ERA model <ref> [14] </ref>. In order to support the impact analysis, we need two semantic extensions: 1. A direction specification (a type attribute) is added to each relation type relevant to read-set and impact-set evaluation. That is, instances of these relations will be traversed during such evaluations in the given direction. 2.
Reference: [15] <institution> Digital Equipment Corp. </institution> <note> DEC Object/DB System Overview and Glossary (ULTRIX), Version 1.0 (1992). </note>
Reference-contexts: Most of the new transaction models propose nested transactions, cf. the ones by [54] at MIT, by Gandalf [58], by [43] for CAD, and by Marvel [38]. Some commercial DBMSes also provide such transactions, e.g. DAMOKLES [19], ORION [40], ObjectStore [45], ONTOS [3], Adele [5], and DEC's Object/DB <ref> [15] </ref>. Cooperation is however limited to parent-children. User-controllable consistency rules can sometimes be applied upon commit, e.g. in DAMOKLES and Adele. Grouping of related transactions to better handle update and commit conflicts is reported in [26] and [64].
Reference: [16] <author> Lotus Development Corp. </author> <title> Lotus Notes The Groupware Standard. Administrator's Guide, </title> <note> Release 3 (1994). </note>
Reference-contexts: We can mention NSE from Sun [67] (now abandoned and a simpler TeamWare product is available), the Andrew file system at CMU [34] (with transparent access), and Lotus Notes <ref> [16] </ref> - all with a central server and local file copies, but where policies for sharing, synchronisation and y Many database people will not accept the term "transaction" to be used on anything else. Planning Cooperating Transactions 319 fine-grained cooperation control are rather strict.
Reference: [17] <author> Flavio DePaoli and Francesco Tisato. </author> <title> Language constructs for cooperative systems design. </title> <booktitle> In [65], </booktitle> <pages> pp. </pages> <month> 329-343 </month> <year> (1993). </year>
Reference-contexts: DICE (DARPA Initiative in Concurrent Engineering) [60] which uses a simple transaction model based on communication/negotiation. We can further mention groupware (often synonymous with CSCW) [21] and distributed agents [50], both with focus on team organisation, user roles and communication patterns, see e.g. <ref> [17] </ref>. Rather simple transaction models are employed using a persistent and shared blackboard, with temporary and local workspaces. Concrete product/version structures are rarely considered, except in concurrent text editors. Among CASE tools, ISTAR [20] has subcontracts, but little formal cooperation among these.
Reference: [18] <editor> Jean-Claude Derniame, editor. </editor> <booktitle> Proc. Second European Workshop on Software Process Technology (EWSPT'92), </booktitle> <address> Trondheim, Norway. 253 p. </address> <publisher> Springer Verlag LNCS 635 (1992). </publisher>
Reference: [19] <author> Klaus Dittrich, Willi Gotthard, and Peter C. Lockemann. </author> <title> DAMOKLES | a database system for software engineering Environments. </title> <booktitle> In [11], </booktitle> <pages> pp. </pages> <month> 353-371 </month> <year> (1986). </year>
Reference-contexts: Most of the new transaction models propose nested transactions, cf. the ones by [54] at MIT, by Gandalf [58], by [43] for CAD, and by Marvel [38]. Some commercial DBMSes also provide such transactions, e.g. DAMOKLES <ref> [19] </ref>, ORION [40], ObjectStore [45], ONTOS [3], Adele [5], and DEC's Object/DB [15]. Cooperation is however limited to parent-children. User-controllable consistency rules can sometimes be applied upon commit, e.g. in DAMOKLES and Adele. Grouping of related transactions to better handle update and commit conflicts is reported in [26] and [64].
Reference: [20] <author> Mark Dowson. </author> <title> ISTAR | An integrated project support environment. </title> <booktitle> In [32], </booktitle> <pages> pp. </pages> <month> 27-33 </month> <year> (1986). </year>
Reference-contexts: Rather simple transaction models are employed using a persistent and shared blackboard, with temporary and local workspaces. Concrete product/version structures are rarely considered, except in concurrent text editors. Among CASE tools, ISTAR <ref> [20] </ref> has subcontracts, but little formal cooperation among these. A design tool like StP [70] has also marginal support for cooperation. More comprehensive environments like IEF [68] are still weak on groupware functionality. Structuring and planning of cooperative work is related to reengineering [10] and complexity metrics.
Reference: [21] <author> Clarence A. Ellis, S. J. Gibbs, and G. L. Rein. </author> <title> Groupware some issues and experiences. </title> <journal> Comm. of the ACM, </journal> <volume> 34 </volume> <month> 39-58 </month> <year> (1991). </year>
Reference-contexts: Concurrent engineering [8] is also relevant, e.g. DICE (DARPA Initiative in Concurrent Engineering) [60] which uses a simple transaction model based on communication/negotiation. We can further mention groupware (often synonymous with CSCW) <ref> [21] </ref> and distributed agents [50], both with focus on team organisation, user roles and communication patterns, see e.g. [17]. Rather simple transaction models are employed using a persistent and shared blackboard, with temporary and local workspaces. Concrete product/version structures are rarely considered, except in concurrent text editors.
Reference: [22] <editor> Ahmed K. Elmagarmid, editor. </editor> <title> Database Transaction Models For Advanced Applications. </title> <publisher> Morgan Kaufmann, </publisher> <address> 650 p. </address> <year> (1992). </year>
Reference-contexts: However, we must also consider inter-version propagation and that side-effect propagation can be very time-consuming and assume unobtainable access rights. Classic DBMS triggers inside short transactions are therefore insufficient, and more general notifiers are needed to handle free-standing or delayed actions. Some newer database transaction models are treated in <ref> [4, 22, 39, 7, 41] </ref>. However, little fundamental work on new transaction models has been reported since 1992, so the area seems hard in spite of its relevance.
Reference: [23] <author> A. Farrag and M. Ozsu. </author> <title> Using semantic knowledge of transactions to increase concurrency. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 14(4) </volume> <month> 503-525 </month> <year> (1989). </year>
Reference-contexts: Traditional DBMSes have a strict consistency (or integrity) concept, related to the data model and requiring explicit, serializable ACID transactions y [29], being short, programmable and server executable. This means that analysis of application programs can be used to increase concurrency <ref> [23] </ref>. For distributed or medium-length transactions, there may be a two-phase lock-unlock-commit protocol. Software engineering involves large data sets at client sites and long update times. Since the scope and sequence of updates are hard to predict and may involve overlapping/versioned subsystems, traditional locking procedures may cause intolerable delays.
Reference: [24] <author> Stuart I. Feldman. </author> <title> Make | a program for maintaining computer programs. </title> <journal> Software | Practice and Experience, </journal> <volume> 9(3) </volume> <month> 255-265 </month> <year> (1979). </year>
Reference-contexts: Planning Cooperating Transactions 319 fine-grained cooperation control are rather strict. Experience from NSE indicates that there are very few direct Write-Write conflicts (1 per 3000 updates) [1]. Simple versioning and rebuild systems, like SCCS [61] and Make <ref> [24] </ref>, offer marginal help for cooperating transactions. Even more advanced versioning systems like DSEE [49], its ClearCase [48] successor and Adele [5] all with high-level configuration descriptions, have very crude transaction and cooperation facilities.
Reference: [25] <editor> Stuart I. Feldman, editor. </editor> <booktitle> Proceedings of the Fourth International Workshop on Software Configuration Management (SCM-4), </booktitle> <address> Baltimore, Maryland, </address> <month> May 21-22 </month> <year> (1993). </year>
Reference: [26] <author> Mary F. Fernandez and Stanley B. Zdonik. </author> <title> Transaction groups: A model for controlling cooperative work. </title> <booktitle> In 3rd International Workshop on Persistent Object Systems, Their Design, Implementation and Use., </booktitle> <pages> pp. </pages> <month> 341-350 </month> <year> (1989). </year>
Reference-contexts: DAMOKLES [19], ORION [40], ObjectStore [45], ONTOS [3], Adele [5], and DEC's Object/DB [15]. Cooperation is however limited to parent-children. User-controllable consistency rules can sometimes be applied upon commit, e.g. in DAMOKLES and Adele. Grouping of related transactions to better handle update and commit conflicts is reported in <ref> [26] </ref> and [64]. To better handle user-defined consistency conflicts among parent and child or among several children, special compensating child transactions can be started, as a part of sagas [27]. The most advanced models allow pre-commit cooperation between sibling transactions, with special semantics to handle above conflicts.
Reference: [27] <author> H. Garcia-Molina and K. Salem. Sagas. </author> <booktitle> In ACM Conference on Management of Data, </booktitle> <pages> pp. </pages> <month> 249-259 </month> <year> (1987). </year>
Reference-contexts: Grouping of related transactions to better handle update and commit conflicts is reported in [26] and [64]. To better handle user-defined consistency conflicts among parent and child or among several children, special compensating child transactions can be started, as a part of sagas <ref> [27] </ref>. The most advanced models allow pre-commit cooperation between sibling transactions, with special semantics to handle above conflicts. Marvel [37], [57], COO [28] and EPOS fall into this category. Marvel uses split-join transactions to regulate the cooperation. COO uses a temporary, shared subdatabase (scratch-pad) for data exchange and integration work.
Reference: [28] <author> Claude Godart. COO: </author> <title> A transaction model to support COOperating software developers COOrdination. </title> <booktitle> In [65], </booktitle> <pages> pp. </pages> <month> 361-379 </month> <year> (1993). </year>
Reference-contexts: To better handle user-defined consistency conflicts among parent and child or among several children, special compensating child transactions can be started, as a part of sagas [27]. The most advanced models allow pre-commit cooperation between sibling transactions, with special semantics to handle above conflicts. Marvel [37], [57], COO <ref> [28] </ref> and EPOS fall into this category. Marvel uses split-join transactions to regulate the cooperation. COO uses a temporary, shared subdatabase (scratch-pad) for data exchange and integration work. <p> Note that optimal scheduling of serial or cooperative transactions, based on more detailed read/ write patterns, is a NP-complete problem <ref> [28] </ref>. So, there will be a strong interaction between the human project manager and the automatic scheduling tool, to produce a reasonably good schedule. 4.4.
Reference: [29] <author> Jim N. Gray. </author> <title> The transaction concept: Virtues and limitations. </title> <booktitle> In Proceedings of the Seventh International Conference on Very Large Databases, </booktitle> <pages> pp. </pages> <month> 144-154 </month> <year> (1981). </year>
Reference-contexts: Traditional DBMSes have a strict consistency (or integrity) concept, related to the data model and requiring explicit, serializable ACID transactions y <ref> [29] </ref>, being short, programmable and server executable. This means that analysis of application programs can be used to increase concurrency [23]. For distributed or medium-length transactions, there may be a two-phase lock-unlock-commit protocol. Software engineering involves large data sets at client sites and long update times.
Reference: [30] <author> Rajiv Gupta and Ellis Horowitz, </author> <title> editors. Object-oriented databases with applications to CASE, networks and VLSI CAD. Prentice-Hall series in Data and Knowledge Base Systems. </title> <publisher> Prentice-Hall, </publisher> <address> ISBN 0-13-629833-8 (1991). </address>
Reference: [31] <author> Marianne Hagaseth. </author> <title> Conflicting access in cooperating transactions. </title> <booktitle> In Proc. International Symposium on Next Generation Database Systems and Their Applications, Fukoka, Japan, </booktitle> <pages> pp. </pages> <month> 301-308 </month> <year> (1993). </year>
Reference-contexts: The existing Planner is used to (re)generate such networks, using domain knowledge in form of task types, product structures etc. [52]. Early work on cooperating transactions in EPOS was reported in [13] and [56]. Later the EPOS transaction model has been extended both wrt. functionality and instrumentability <ref> [31] </ref> [46] [47] and through the TDL. However, the TDL is still rather low-level, thus motivating the current work. 4. HIGH-LEVEL TRANSACTION PLANNING IN EPOS The paper presents a transaction planning facility, to be implemented by the TRAPLAS meta-process tool.
Reference: [32] <editor> Peter B. Henderson, editor. </editor> <booktitle> Proc. 2nd ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments (Palo Alto), 227 p., In ACM SIGPLAN Notices 22(1), </booktitle> <month> Jan </month> <year> 1987 (1986). </year> <note> Planning Cooperating Transactions 335 </note>
Reference: [33] <author> P. Van Hentenryck. </author> <title> Constraint Satisfaction in Logic Programming. </title> <publisher> MIT Press (1989). </publisher>
Reference-contexts: See also recent work on software architectures [63]. We can also mention general project management [53] (not considered in this paper). This involves planning of projects and their resources, e.g. using PERT diagrams. Such planning can partly be formulated as constraint-based reasoning <ref> [33] </ref>. For transaction planning, both COO and the Extended Transaction model by [35] use activity scripts and PRE/POST-conditions expressed in temporal logic. However, there is no easy way to operationalise such constraints. See also work by [62].
Reference: [34] <author> John H. Howard et al. </author> <title> Scale and performance in a distributed file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <month> 51-81 </month> <year> (1988). </year>
Reference-contexts: Algorithms to ensure consistency in multi-layer storage systems (cache coherence, synchrony between local and global databases) resemble those used for data exchange between long transactions. We can mention NSE from Sun [67] (now abandoned and a simpler TeamWare product is available), the Andrew file system at CMU <ref> [34] </ref> (with transparent access), and Lotus Notes [16] - all with a central server and local file copies, but where policies for sharing, synchronisation and y Many database people will not accept the term "transaction" to be used on anything else.
Reference: [35] <author> Stefan Jablonski. </author> <title> Transaction support for activity management. </title> <booktitle> In Proc. of International Workshop on High Performance Transaction Systems (HPTS'93), </booktitle> <pages> page 10, </pages> <address> Asilomar, CA (1993). </address>
Reference-contexts: We can also mention general project management [53] (not considered in this paper). This involves planning of projects and their resources, e.g. using PERT diagrams. Such planning can partly be formulated as constraint-based reasoning [33]. For transaction planning, both COO and the Extended Transaction model by <ref> [35] </ref> use activity scripts and PRE/POST-conditions expressed in temporal logic. However, there is no easy way to operationalise such constraints. See also work by [62]. For general software engineering activities, domain-independent and non-linear planning algorithms can be found in IPEM [2] and TWEAK [9].
Reference: [36] <author> M. Letizia Jaccheri and Reidar Conradi. </author> <title> Techniques for process model evolution in EPOS. </title> <journal> IEEE Trans. on Software Engineering, </journal> <pages> pp. 1145-1156, </pages> <note> (special issue on Process Model Evolution) (1993). </note>
Reference-contexts: Each task (activity) has data inputs/ outputs regulated by formal parameters, a script to call tools, and PRE/POST-conditions to express constraints. The process model is defined by an object-oriented and reflective process modelling language, called SPELL [12] <ref> [36] </ref>. The task networks and all associated model information reside in a subdatabase under the versioned EPOSDB [51] [55], under the control of a special project task. See subsection 3.2. 3.1.
Reference: [37] <author> Gail E. Kaiser. </author> <title> A flexible transaction model for software engineering. </title> <booktitle> In Proc. 6th International Conference on Data Engineering, </booktitle> <pages> pp. 560-567, </pages> <address> Los Angeles, CA. </address> <institution> IEEE Computer Society, </institution> <note> Invited paper (1990). </note>
Reference-contexts: To better handle user-defined consistency conflicts among parent and child or among several children, special compensating child transactions can be started, as a part of sagas [27]. The most advanced models allow pre-commit cooperation between sibling transactions, with special semantics to handle above conflicts. Marvel <ref> [37] </ref>, [57], COO [28] and EPOS fall into this category. Marvel uses split-join transactions to regulate the cooperation. COO uses a temporary, shared subdatabase (scratch-pad) for data exchange and integration work.
Reference: [38] <author> Gail E. Kaiser and Calton Pu. </author> <title> Dynamic restructuring of transactions. </title> <booktitle> In [22], </booktitle> <pages> pp. 265-295. </pages> <publisher> Morgan Kaufmann (1991). </publisher>
Reference-contexts: However, little fundamental work on new transaction models has been reported since 1992, so the area seems hard in spite of its relevance. Most of the new transaction models propose nested transactions, cf. the ones by [54] at MIT, by Gandalf [58], by [43] for CAD, and by Marvel <ref> [38] </ref>. Some commercial DBMSes also provide such transactions, e.g. DAMOKLES [19], ORION [40], ObjectStore [45], ONTOS [3], Adele [5], and DEC's Object/DB [15]. Cooperation is however limited to parent-children. User-controllable consistency rules can sometimes be applied upon commit, e.g. in DAMOKLES and Adele.
Reference: [39] <author> S. Khoshafian. </author> <title> Object-Oriented Databases. </title> <publisher> John Wiley & Sons, Inc. </publisher> <year> (1993). </year>
Reference-contexts: However, we must also consider inter-version propagation and that side-effect propagation can be very time-consuming and assume unobtainable access rights. Classic DBMS triggers inside short transactions are therefore insufficient, and more general notifiers are needed to handle free-standing or delayed actions. Some newer database transaction models are treated in <ref> [4, 22, 39, 7, 41] </ref>. However, little fundamental work on new transaction models has been reported since 1992, so the area seems hard in spite of its relevance.
Reference: [40] <author> W. Kim, J. F. Garza, N. Ballou, and D. Woelk. </author> <title> Architecture of the ORION next-generation database system. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> 2(1) </month> <year> (1990). </year>
Reference-contexts: Most of the new transaction models propose nested transactions, cf. the ones by [54] at MIT, by Gandalf [58], by [43] for CAD, and by Marvel [38]. Some commercial DBMSes also provide such transactions, e.g. DAMOKLES [19], ORION <ref> [40] </ref>, ObjectStore [45], ONTOS [3], Adele [5], and DEC's Object/DB [15]. Cooperation is however limited to parent-children. User-controllable consistency rules can sometimes be applied upon commit, e.g. in DAMOKLES and Adele. Grouping of related transactions to better handle update and commit conflicts is reported in [26] and [64].
Reference: [41] <author> Won Kim, </author> <title> editor. Modern Database Systems: The Object Model, Interoperability, ands Beyond. </title> <publisher> Addison-Wesley and ACM Press, </publisher> <address> 705 p. </address> <year> (1995). </year>
Reference-contexts: However, we must also consider inter-version propagation and that side-effect propagation can be very time-consuming and assume unobtainable access rights. Classic DBMS triggers inside short transactions are therefore insufficient, and more general notifiers are needed to handle free-standing or delayed actions. Some newer database transaction models are treated in <ref> [4, 22, 39, 7, 41] </ref>. However, little fundamental work on new transaction models has been reported since 1992, so the area seems hard in spite of its relevance.
Reference: [42] <author> H. Korth, W. Kim, and F. Bancilhon. </author> <title> A model of CAD transactions. </title> <booktitle> In Proceedings of the 11th International Conference on Very Large Databases, </booktitle> <pages> pp. </pages> <month> 25-33 </month> <year> (1985). </year>
Reference-contexts: Since the scope and sequence of updates are hard to predict and may involve overlapping/versioned subsystems, traditional locking procedures may cause intolerable delays. Thus, software engineering like concurrent engineering in CAD/CAM and VLSI also needs non-serializable transactions, often called design transactions <ref> [42] </ref>, being long and user-executed. A standard trick, when mutual two-phase locking is not applicable, is to check-out copies (i.e. temporary versions) of shared data at project start, perform the updates locally, then check-in, and perform final merging/reconciliation/integration. User-defined consistency constraints are often applied and should be explicitly expressed.
Reference: [43] <author> H. Korth, W. Kim, and F. Bancilhon. </author> <note> On long-duration CAD transactions. Information Science, Also in [72] (1988). </note>
Reference-contexts: However, little fundamental work on new transaction models has been reported since 1992, so the area seems hard in spite of its relevance. Most of the new transaction models propose nested transactions, cf. the ones by [54] at MIT, by Gandalf [58], by <ref> [43] </ref> for CAD, and by Marvel [38]. Some commercial DBMSes also provide such transactions, e.g. DAMOKLES [19], ORION [40], ObjectStore [45], ONTOS [3], Adele [5], and DEC's Object/DB [15]. Cooperation is however limited to parent-children. User-controllable consistency rules can sometimes be applied upon commit, e.g. in DAMOKLES and Adele.
Reference: [44] <author> Patricia Lago. TiDL: </author> <booktitle> Transaction-intention description language (1994). </booktitle>
Reference-contexts: The above version- and product-space information are part of the workorder for the associated project task. In addition comes process-related information (tools, humans, time-constraints) and given cooperation protocols. All this is described by a textual Transaction Description Language (TDL) <ref> [44] </ref>, harmonised with SPELL. A typical product structure is described in section 5. Then some words on transaction handling and overlaps: Let us first say, that there are short ACID transactions, serving as critical regions within the below, long transactions.
Reference: [45] <author> Charles Lamb, Gordon Landis, Jack Orenstein, and Dan Weinreb. </author> <title> The ObjectStore database system. </title> <journal> Comm. of the ACM, </journal> <volume> 34(10) </volume> <month> 50-63 </month> <year> (1991). </year>
Reference-contexts: Most of the new transaction models propose nested transactions, cf. the ones by [54] at MIT, by Gandalf [58], by [43] for CAD, and by Marvel [38]. Some commercial DBMSes also provide such transactions, e.g. DAMOKLES [19], ORION [40], ObjectStore <ref> [45] </ref>, ONTOS [3], Adele [5], and DEC's Object/DB [15]. Cooperation is however limited to parent-children. User-controllable consistency rules can sometimes be applied upon commit, e.g. in DAMOKLES and Adele. Grouping of related transactions to better handle update and commit conflicts is reported in [26] and [64].
Reference: [46] <author> Jens-Otto Larsen. </author> <title> A transaction model for cooperating transactions. In Proc. ICSE-16 Workshop on Databases and Software Engineering and Databases, </title> <type> Sorrento. 4 p., (See forthcoming PhD thesis, NTH, </type> <address> Trondheim, Norway) (1994). </address>
Reference-contexts: The existing Planner is used to (re)generate such networks, using domain knowledge in form of task types, product structures etc. [52]. Early work on cooperating transactions in EPOS was reported in [13] and [56]. Later the EPOS transaction model has been extended both wrt. functionality and instrumentability [31] <ref> [46] </ref> [47] and through the TDL. However, the TDL is still rather low-level, thus motivating the current work. 4. HIGH-LEVEL TRANSACTION PLANNING IN EPOS The paper presents a transaction planning facility, to be implemented by the TRAPLAS meta-process tool.
Reference: [47] <author> Jens-Otto Larsen and Patricia Lago. </author> <title> Transaction technology for process modeling. In Forthcoming position paper (3 p.) </title> <booktitle> in Proc. of the 4th European Workshop on Software Process Technology (EWSPT'95), </booktitle> <publisher> issued as a Springer LNCS, </publisher> <address> Leiden, The Netherlands (1995). </address>
Reference-contexts: The existing Planner is used to (re)generate such networks, using domain knowledge in form of task types, product structures etc. [52]. Early work on cooperating transactions in EPOS was reported in [13] and [56]. Later the EPOS transaction model has been extended both wrt. functionality and instrumentability [31] [46] <ref> [47] </ref> and through the TDL. However, the TDL is still rather low-level, thus motivating the current work. 4. HIGH-LEVEL TRANSACTION PLANNING IN EPOS The paper presents a transaction planning facility, to be implemented by the TRAPLAS meta-process tool.
Reference: [48] <author> David B. Leblang. </author> <title> The CM challenge: Configuration management that works. </title> <booktitle> In In [69], chapter 1, </booktitle> <pages> pp. 1-37. </pages> <publisher> John Wiley (1994). </publisher>
Reference-contexts: Experience from NSE indicates that there are very few direct Write-Write conflicts (1 per 3000 updates) [1]. Simple versioning and rebuild systems, like SCCS [61] and Make [24], offer marginal help for cooperating transactions. Even more advanced versioning systems like DSEE [49], its ClearCase <ref> [48] </ref> successor and Adele [5] all with high-level configuration descriptions, have very crude transaction and cooperation facilities. Digression: When all transactions in an unversioned DBMS commit, there is one canonical and consistent version of the database.
Reference: [49] <author> David B. Leblang and G. McLean. DSEE: </author> <title> Overview and configuration management. </title> <editor> In J. McDermid, editor, </editor> <booktitle> Integrated Project Support Environments, </booktitle> <pages> pp. 10-31. </pages> <publisher> Peter Peregrinus Ltd., </publisher> <address> London (1985). </address>
Reference-contexts: Experience from NSE indicates that there are very few direct Write-Write conflicts (1 per 3000 updates) [1]. Simple versioning and rebuild systems, like SCCS [61] and Make [24], offer marginal help for cooperating transactions. Even more advanced versioning systems like DSEE <ref> [49] </ref>, its ClearCase [48] successor and Adele [5] all with high-level configuration descriptions, have very crude transaction and cooperation facilities. Digression: When all transactions in an unversioned DBMS commit, there is one canonical and consistent version of the database.
Reference: [50] <author> Kuo-Chu Lee, William H. Mansfield, and Amit P. Sheth. </author> <title> A framework for controling cooperative agents. </title> <booktitle> IEEE Computer, </booktitle> <pages> pp. </pages> <month> 8-16 </month> <year> (1993). </year>
Reference-contexts: Concurrent engineering [8] is also relevant, e.g. DICE (DARPA Initiative in Concurrent Engineering) [60] which uses a simple transaction model based on communication/negotiation. We can further mention groupware (often synonymous with CSCW) [21] and distributed agents <ref> [50] </ref>, both with focus on team organisation, user roles and communication patterns, see e.g. [17]. Rather simple transaction models are employed using a persistent and shared blackboard, with temporary and local workspaces. Concrete product/version structures are rarely considered, except in concurrent text editors.
Reference: [51] <author> Anund Lie et al. </author> <title> Change Oriented Versioning in a Software Engineering Database. </title> <editor> In Walter F. Tichy (Ed.): </editor> <booktitle> Proc. 2nd International Workshop on Software Configuration Management, </booktitle> <address> Princeton, USA, 25-27 Oct. </address> <year> 1989, </year> <title> 178 p. </title> <booktitle> In ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 14 (7), </volume> <pages> pp. </pages> <month> 56-65 </month> <year> (1989). </year>
Reference-contexts: The process model is defined by an object-oriented and reflective process modelling language, called SPELL [12] [36]. The task networks and all associated model information reside in a subdatabase under the versioned EPOSDB <ref> [51] </ref> [55], under the control of a special project task. See subsection 3.2. 3.1. Consistency Model for Products The EPOS consistency model is minimally defined by the EPOSDB data model, being a structurally object-oriented data model with explicit relations.
Reference: [52] <author> Chunnian Liu and Reidar Conradi. </author> <title> Automatic replanning of task networks for process model evolution in EPOS. </title> <booktitle> In [65], </booktitle> <pages> pp. </pages> <month> 434-450 </month> <year> (1993). </year>
Reference-contexts: The Planner exploits formal Input/Output specifications in each task rule (type). Such specifications are usually not found in AI planners, yet essential for software production tasks. Furthermore, project customisation can be done by simple rule grouping and substitution. Process model evolution can be supported by replanning and re-execution <ref> [52] </ref>. 3. THE EPOS CONTEXT AND ITS COOPERATING TRANSACTIONS In the EPOS Software Process Environment, a process model is a typed network of decomposed and chained tasks, being mostly automatically (re)generated. <p> Then, there is conventional intra-transaction change propagation regulated by normal task networks, regardless of the source and nature of the change. The existing Planner is used to (re)generate such networks, using domain knowledge in form of task types, product structures etc. <ref> [52] </ref>. Early work on cooperating transactions in EPOS was reported in [13] and [56]. Later the EPOS transaction model has been extended both wrt. functionality and instrumentability [31] [46] [47] and through the TDL. However, the TDL is still rather low-level, thus motivating the current work. 4.
Reference: [53] <author> Dennis Lock. </author> <title> Project Managment Fifth Edition. </title> <publisher> Gower Publishing (1993). </publisher>
Reference-contexts: Structuring and planning of cooperative work is related to reengineering [10] and complexity metrics. That is, how to identify clusters of software with high internal cohesion and few interdependencies. See also recent work on software architectures [63]. We can also mention general project management <ref> [53] </ref> (not considered in this paper). This involves planning of projects and their resources, e.g. using PERT diagrams. Such planning can partly be formulated as constraint-based reasoning [33]. For transaction planning, both COO and the Extended Transaction model by [35] use activity scripts and PRE/POST-conditions expressed in temporal logic.
Reference: [54] <author> J.E. Moss. </author> <title> Nested transactions: An approach to reliable distributed computing. Information Systems Series. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <note> (PhD thesis from 1981 at MIT) (1985). </note>
Reference-contexts: Some newer database transaction models are treated in [4, 22, 39, 7, 41]. However, little fundamental work on new transaction models has been reported since 1992, so the area seems hard in spite of its relevance. Most of the new transaction models propose nested transactions, cf. the ones by <ref> [54] </ref> at MIT, by Gandalf [58], by [43] for CAD, and by Marvel [38]. Some commercial DBMSes also provide such transactions, e.g. DAMOKLES [19], ORION [40], ObjectStore [45], ONTOS [3], Adele [5], and DEC's Object/DB [15]. Cooperation is however limited to parent-children.
Reference: [55] <author> Bjtrn P. Munch, Jens-Otto Larsen, Bjtrn Gulla, Reidar Conradi, and Even-Andre Karlsson. </author> <title> Uniform version-ing: The change-oriented model. </title> <booktitle> In [25], </booktitle> <pages> pp. </pages> <month> 188-196 </month> <year> (1993). </year>
Reference-contexts: The process model is defined by an object-oriented and reflective process modelling language, called SPELL [12] [36]. The task networks and all associated model information reside in a subdatabase under the versioned EPOSDB [51] <ref> [55] </ref>, under the control of a special project task. See subsection 3.2. 3.1. Consistency Model for Products The EPOS consistency model is minimally defined by the EPOSDB data model, being a structurally object-oriented data model with explicit relations.
Reference: [56] <author> Minh N. Nguyen and Reidar Conradi. </author> <title> Cooperating transactions in a versioned database. </title> <editor> In M. Huhns, M. P. Papazoglou, and G. Schlageter, editors, </editor> <title> Proceedings of ICICIS'93, </title> <journal> International Conference on Intelligent and Cooperative Information Systems, </journal> <note> May 12-14 Also as EPOS TR 165, </note> <institution> Rotterdam, </institution> <address> The Netherlands. </address> <publisher> IEEE Computer Society (1993). </publisher>
Reference-contexts: The existing Planner is used to (re)generate such networks, using domain knowledge in form of task types, product structures etc. [52]. Early work on cooperating transactions in EPOS was reported in [13] and <ref> [56] </ref>. Later the EPOS transaction model has been extended both wrt. functionality and instrumentability [31] [46] [47] and through the TDL. However, the TDL is still rather low-level, thus motivating the current work. 4.
Reference: [57] <author> M.H. Nodine, S. Ramoswamy, and S. Zdonik. </author> <title> A cooperative transaction model for design databases. </title> <booktitle> In [22], </booktitle> <pages> pp. 59-86. </pages> <publisher> Morgan Kaufmann (1992). </publisher>
Reference-contexts: To better handle user-defined consistency conflicts among parent and child or among several children, special compensating child transactions can be started, as a part of sagas [27]. The most advanced models allow pre-commit cooperation between sibling transactions, with special semantics to handle above conflicts. Marvel [37], <ref> [57] </ref>, COO [28] and EPOS fall into this category. Marvel uses split-join transactions to regulate the cooperation. COO uses a temporary, shared subdatabase (scratch-pad) for data exchange and integration work.
Reference: [58] <author> David Notkin. </author> <title> The GANDALF project. </title> <journal> The Journal of Systems and Software, </journal> <volume> 5(2) </volume> <month> 91-105 </month> <year> (1985). </year>
Reference-contexts: However, little fundamental work on new transaction models has been reported since 1992, so the area seems hard in spite of its relevance. Most of the new transaction models propose nested transactions, cf. the ones by [54] at MIT, by Gandalf <ref> [58] </ref>, by [43] for CAD, and by Marvel [38]. Some commercial DBMSes also provide such transactions, e.g. DAMOKLES [19], ORION [40], ObjectStore [45], ONTOS [3], Adele [5], and DEC's Object/DB [15]. Cooperation is however limited to parent-children.
Reference: [59] <editor> Leon Osterweil, editor. </editor> <booktitle> Proc. 2nd Int'l Conference on Software Process (ICSP'2), </booktitle> <address> Berlin. 170 p. </address> <publisher> IEEE-CS Press (1993). </publisher>
Reference: [60] <author> J.D. Palmer and N.A. </author> <title> Fields. Computer support for concurrent engineering. </title> <journal> IEEE Computer, </journal> <volume> 26(1) </volume> <month> 12-17 </month> <year> (1993). </year>
Reference-contexts: In contrast, a versioned database maintains and controls permanently and mutually separate (sub)databases! Workflow systems [71] are relevant to transaction planning, by exploiting scripts and constraints (PRE/POST-conditions) attached to networked activities. Concurrent engineering [8] is also relevant, e.g. DICE (DARPA Initiative in Concurrent Engineering) <ref> [60] </ref> which uses a simple transaction model based on communication/negotiation. We can further mention groupware (often synonymous with CSCW) [21] and distributed agents [50], both with focus on team organisation, user roles and communication patterns, see e.g. [17].
Reference: [61] <author> Mark J. Rochkind. </author> <title> The source code control system. </title> <journal> IEEE Trans. on Software Engineering, </journal> <note> SE-1(4):364-370 (1975). 336 Reidar Conradi et al. </note>
Reference-contexts: Planning Cooperating Transactions 319 fine-grained cooperation control are rather strict. Experience from NSE indicates that there are very few direct Write-Write conflicts (1 per 3000 updates) [1]. Simple versioning and rebuild systems, like SCCS <ref> [61] </ref> and Make [24], offer marginal help for cooperating transactions. Even more advanced versioning systems like DSEE [49], its ClearCase [48] successor and Adele [5] all with high-level configuration descriptions, have very crude transaction and cooperation facilities.
Reference: [62] <author> Marek Rusinkiewicz and Amit Sheth. </author> <title> Specification and Execution of Transactional Workflows, </title> <booktitle> chapter 29, </booktitle> <pages> pp. 592-620. </pages> <publisher> Addison-Wesley and ACM Press (1995). </publisher>
Reference-contexts: Such planning can partly be formulated as constraint-based reasoning [33]. For transaction planning, both COO and the Extended Transaction model by [35] use activity scripts and PRE/POST-conditions expressed in temporal logic. However, there is no easy way to operationalise such constraints. See also work by <ref> [62] </ref>. For general software engineering activities, domain-independent and non-linear planning algorithms can be found in IPEM [2] and TWEAK [9]. TWEAK gives a formal treatment to the subject of non-linear planning. IPEM tries to integrate planning, execution and monitoring in fine granularity, mainly for exception handling.
Reference: [63] <author> Mary Shaw. </author> <title> Heterogeneous design idioms for software architectures. </title> <booktitle> In Proceedings of the 6th International Workshop of Software Specification and Design, Como, Italy, </booktitle> <pages> pp. 1-8. </pages> <publisher> IEEE-CS Press, Los Alamitos, </publisher> <address> CA (1990). </address>
Reference-contexts: More comprehensive environments like IEF [68] are still weak on groupware functionality. Structuring and planning of cooperative work is related to reengineering [10] and complexity metrics. That is, how to identify clusters of software with high internal cohesion and few interdependencies. See also recent work on software architectures <ref> [63] </ref>. We can also mention general project management [53] (not considered in this paper). This involves planning of projects and their resources, e.g. using PERT diagrams. Such planning can partly be formulated as constraint-based reasoning [33].
Reference: [64] <author> Andrea Skarra. </author> <title> Concurrency control for cooperating transactions in an object-oriented database. </title> <journal> SIGPLAN Notices, </journal> <volume> 24(4) </volume> <month> 466-473 </month> <year> (1989). </year>
Reference-contexts: Cooperation is however limited to parent-children. User-controllable consistency rules can sometimes be applied upon commit, e.g. in DAMOKLES and Adele. Grouping of related transactions to better handle update and commit conflicts is reported in [26] and <ref> [64] </ref>. To better handle user-defined consistency conflicts among parent and child or among several children, special compensating child transactions can be started, as a part of sagas [27]. The most advanced models allow pre-commit cooperation between sibling transactions, with special semantics to handle above conflicts.
Reference: [65] <author> Ian Sommerville and Manfred Paul, </author> <title> editors. </title> <booktitle> Proc. 4th European Software Engineering Conference (Garmisch-Partenkirchen, </booktitle> <address> FRG), </address> <publisher> Springer Verlag LNCS 717. </publisher> <year> (1993). </year>
Reference: [66] <author> Michael Stonebraker. </author> <title> Triggers and inference in database systems. </title> <editor> In Michael Brodie and John Mylopoulus, editors, </editor> <booktitle> On Knowledge Base Management Systems: Integrating Artifical intelligence and Database Technologies, </booktitle> <pages> pp. 297-314. </pages> <publisher> Springer Verlag (1986). </publisher>
Reference-contexts: User-defined consistency constraints are often applied and should be explicitly expressed. Soft locks are another solution, meaning that access locks can be broken in a controlled way. This often involves triggers <ref> [66] </ref> upon locked objects or copies thereof. That is, to have an active DBMS, that automatically performs side-effect propagation according to stated event-condition-action rules. However, we must also consider inter-version propagation and that side-effect propagation can be very time-consuming and assume unobtainable access rights.
Reference: [67] <author> Sun Microsystems, Inc., </author> <title> 2550 Garcia Avenue, Mountain View, CA 94043, USA. Network Software Environment: Reference Manual, part no: </title> <note> 800-2095 (draft) edition (1988). </note>
Reference-contexts: COO uses a temporary, shared subdatabase (scratch-pad) for data exchange and integration work. Algorithms to ensure consistency in multi-layer storage systems (cache coherence, synchrony between local and global databases) resemble those used for data exchange between long transactions. We can mention NSE from Sun <ref> [67] </ref> (now abandoned and a simpler TeamWare product is available), the Andrew file system at CMU [34] (with transparent access), and Lotus Notes [16] - all with a central server and local file copies, but where policies for sharing, synchronisation and y Many database people will not accept the term "transaction"
Reference: [68] <institution> Texas Instruments Inc. Information Engineering Facility Central Encyclopedia Guide (1989). </institution>
Reference-contexts: Concrete product/version structures are rarely considered, except in concurrent text editors. Among CASE tools, ISTAR [20] has subcontracts, but little formal cooperation among these. A design tool like StP [70] has also marginal support for cooperation. More comprehensive environments like IEF <ref> [68] </ref> are still weak on groupware functionality. Structuring and planning of cooperative work is related to reengineering [10] and complexity metrics. That is, how to identify clusters of software with high internal cohesion and few interdependencies. See also recent work on software architectures [63].
Reference: [69] <author> Walter F. Tichy, </author> <title> editor. Configuration management. </title> <booktitle> (Trends in software). </booktitle> <publisher> John Wiley (1994). </publisher>
Reference: [70] <author> Anthony I. Wasserman and P. Pircher. </author> <title> A graphical, extensible integrated environment for software development. </title> <booktitle> In [32], </booktitle> <pages> pp. </pages> <month> 131-142 </month> <year> (1986). </year>
Reference-contexts: Rather simple transaction models are employed using a persistent and shared blackboard, with temporary and local workspaces. Concrete product/version structures are rarely considered, except in concurrent text editors. Among CASE tools, ISTAR [20] has subcontracts, but little formal cooperation among these. A design tool like StP <ref> [70] </ref> has also marginal support for cooperation. More comprehensive environments like IEF [68] are still weak on groupware functionality. Structuring and planning of cooperative work is related to reengineering [10] and complexity metrics. That is, how to identify clusters of software with high internal cohesion and few interdependencies.
Reference: [71] <editor> T. E. White and L. Fischer (Eds.). </editor> <title> New tools for new times The workflow paradigm. Future Strategies Inc., Book Division, </title> <address> Alameda, CA, USA (1994). </address>
Reference-contexts: Digression: When all transactions in an unversioned DBMS commit, there is one canonical and consistent version of the database. In contrast, a versioned database maintains and controls permanently and mutually separate (sub)databases! Workflow systems <ref> [71] </ref> are relevant to transaction planning, by exploiting scripts and constraints (PRE/POST-conditions) attached to networked activities. Concurrent engineering [8] is also relevant, e.g. DICE (DARPA Initiative in Concurrent Engineering) [60] which uses a simple transaction model based on communication/negotiation.
Reference: [72] <editor> Stanley B. Zdonik and David Maier (Eds.). </editor> <booktitle> Readings in Object-Oriented Database Systems (collected articles). The Morgan Kaufman series in Data Management Systems. </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <address> Los Altos, CA. </address> <year> (1990). </year>
References-found: 72

