URL: ftp://ftp.cs.umass.edu/pub/lesser/lander-94-32.ps
Refering-URL: http://dis.cs.umass.edu/research/meta-learn.html
Root-URL: 
Title: Distributed Search and Conflict Management Among Reusable Heterogeneous Agents  
Author: Susan Ellen Lander 
Abstract: Computer Science Technical Report 94-32 April 1994 
Abstract-found: 1
Intro-found: 1
Reference: [ Adler et al., 1989 ] <author> Adler, M. R., Davis, A. B., Weihmayer, R., and Worrest, R. W. </author> <title> Conflict-resolution strategies for non-hierarchical distributed agents. </title> <editor> In Gasser, L. and Huhns, M., editors, </editor> <booktitle> Distributed Artificial Intelligence, Volume 2, Research Notes in Artificial Intelligence. </booktitle> <publisher> Pitman, </publisher> <address> London, </address> <year> 1989. </year>
Reference-contexts: Several definitions of negotiation from various researchers, within and without the field of DAI, are provided below: Negotiation is a process of communication established between two conflicting agents in which they try to develop or refine their plans jointly so that the goals of each are satisfied. <ref> [ Adler et al., 1989 ] </ref> ...often negotiation is optional. Other methods are available for dealing with the divergence of interest including efforts to influence the other by overt moves (e.g., launching a military attack), taking the other to court, etc. <p> Telephone-Network Traffic Control: Adler, Davis, Weihmayer, and Worrest examine conflict management in the context of telephone-network traffic control in multia-gent systems <ref> [ Adler et al., 1989 ] </ref> . Agents are autonomous, geographically distributed, homogeneous and designed to work together. Each agent controls the routing of telephone calls through a network of linked nodes in a bounded geographical area.
Reference: [ Barr and Feigenbaum, 1981 ] <editor> Barr, A. and Feigenbaum, E. A. </editor> <booktitle> The Handbook of Artificial Intelligence, </booktitle> <volume> Volume 1. </volume> <publisher> William Kaufmann, Inc., </publisher> <year> 1981. </year>
Reference: [ Blackboard Technology Group, Inc., 1991 ] <institution> Blackboard Technology Group, Inc., </institution> <address> Amherst, MA. </address> <note> The GBB Version 2.0 Reference Manual, </note> <month> January </month> <year> 1991. </year>
Reference-contexts: the framework and each other through a set of interface structures and functions and each agent must meet the interface standards. 4.3.1 Overview of the Framework Architecture In TEAM, TMan and the common memory are implemented as a blackboard system on top of GBB, a commercially available generic blackboard shell <ref> [ Blackboard Technology Group, Inc., 1991 ] </ref> . When we discuss the TEAM framework, we are referring to the memory, TMan, and the agent-interface structures only. Agents are implemented separately and are not restricted to blackboard architectures.
Reference: [ Bond and Gasser, 1988 ] <editor> Bond, A. and Gasser, L., editors. </editor> <booktitle> Readings in Distributed Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1988. </year>
Reference-contexts: With this in mind, we categorize and present the relevant areas of research below. 2.1 Multiagent Systems In <ref> [ Bond and Gasser, 1988 ] </ref> , Bond and Gasser define research in multiagent systems (MASs) as follows: : : : (multiagent system) research is concerned with coordinating intelligent behavior among a collection of (possibly pre-existing) autonomous intelligent "agents", how they can coordinate their knowledge, goals, skills, and plans jointly to
Reference: [ Bond, 1989 ] <author> Bond, A. H. </author> <title> The cooperation of experts in engineering design. </title> <editor> In Gasser, L. and Huhns, M. N., editors, </editor> <booktitle> Distributed Artificial Intelligence, </booktitle> <volume> Volume 2, </volume> <pages> pages 463-484. </pages> <publisher> Pitman/Morgan Kaufmann, </publisher> <year> 1989. </year>
Reference: [ Brodley, 1993 ] <author> Brodley, C. E. </author> <title> Addressing the selective superiority problem: Au tomatic algorithm/model class selection. </title> <booktitle> In Tenth International Conference on Machine Learning, </booktitle> <pages> pages 17-24, </pages> <address> Amherst, MA, </address> <month> June </month> <year> 1993. </year>
Reference: [ Cammarata et al., 1983 ] <author> Cammarata, S., McArthur, D., and Steeb, R. </author> <title> Strategies of cooperation in distributed problem solving. </title> <booktitle> In Proceedings of the Eighth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 767-770, </pages> <institution> Karlsruhe, Federal Republic of Germany, </institution> <month> August </month> <year> 1983. </year>
Reference-contexts: Various points along the cooperation/hostility continuum are examined in [ Zlotkin and Rosenschein, 1990, Zlotkin and Rosenschein, 1991 ] . Negotiation can occur among peers <ref> [ Cammarata et al., 1983, Lander and Lesser, 1991 ] </ref> , through a mediator or arbitrator [ Sycara, 1988, Werkman, 1992 ] , or hierarchically through an organization [ Davis and Smith, 1983, Durfee and Montgomery, 1990 ] . <p> A role, therefore, defines a task or set of tasks to be performed with respect to a single solution and a role assignment activates the appropriate operators at a particular agent to achieve the desired role. In <ref> [ Cammarata et al., 1983 ] </ref> , Cammarata, McArthur, and Steeb note: Agents typically have differing appropriateness for a given task.
Reference: [ Conry et al., 1991 ] <author> Conry, S., Kuwabara, K., Lesser, V., and Meyer, R. </author> <title> Multistage negotiation for distributed satisfaction. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 21(6) </volume> <pages> 1462-1477, </pages> <month> November/December </month> <year> 1991. </year>
Reference-contexts: We describe how to handle conflict when agents are reusable, heterogeneous, and don't all have the same level of CR expertise. Multistage Negotiation: Conry et. al. present multistage negotiation as a coordination protocol for distributed search <ref> [ Conry et al., 1991 ] </ref> . The application domain is the generation of plans to satisfy service-restoral goals in the control of a communications network. Homogeneous agents control circuits within a particular region in the network. <p> For example, in their work on multistage negotiation, Conry et. al. have developed a formalism that explicitly represents the interactions of solution-dependent constraints among subplans and uses these constraints to either derive a solution or determine that no solution exists <ref> [ Conry et al., 1991 ] </ref> . We do not handle solution-dependent constraints in the dissertation however. 8.2.2 Determination of Transmission Information An agent must decide what information to transmit.
Reference: [ Corkill and Lesser, 1983 ] <author> Corkill, D. D. and Lesser, V. R. </author> <title> The use of meta-level control for coordination in a distributed problem solving network. </title> <booktitle> In Proceedings of the Eighth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 748-756, </pages> <address> Karlsruhe, Germany, </address> <month> August </month> <year> 1983. </year>
Reference-contexts: Meta-Level Control for Coordination: Corkill and Lesser look at the problem of achieving coordinated activity among the nodes in a distributed sensor network <ref> [ Corkill and Lesser, 1983 ] </ref> . Internode communication in these networks is a major issue since it is both limited and potentially unreliable. Limited node interaction makes it infeasible to keep every node completely informed of the information possessed by other nodes in the network. <p> Distraction is a phenomenon which appears frequently in distributed artificial intelligence literature. Although agents must be responsive to each other, in order to handle distraction, they should also maintain a healthy degree of skepticism <ref> [ Corkill and Lesser, 1983 ] </ref> . Otherwise, it is possible for an agent to spend too much time trying to respond to poor solutions from other agents.
Reference: [ Corkill, 1991 ] <author> Corkill, D. D. </author> <title> Introducing blackboard systems. </title> <journal> AI Expert, </journal> <volume> 6(1) </volume> <pages> 40-47, </pages> <month> September </month> <year> 1991. </year>
Reference: [ Davis and Smith, 1983 ] <author> Davis, R. and Smith, R. G. </author> <title> Negotiation as a metaphor for distributed problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 20 </volume> <pages> 63-109, </pages> <year> 1983. </year> [ <editor> de Bono, 1971 ] de Bono, E. </editor> <title> Lateral Thinking for Management, A handbook of creativity. </title> <journal> American Management Association, </journal> <year> 1971. </year>
Reference-contexts: Negotiation can occur among peers [ Cammarata et al., 1983, Lander and Lesser, 1991 ] , through a mediator or arbitrator [ Sycara, 1988, Werkman, 1992 ] , or hierarchically through an organization <ref> [ Davis and Smith, 1983, Durfee and Montgomery, 1990 ] </ref> . It can occur at the level of domain problem-solving or at the level of control problem-solving. <p> Contract Nets: Davis and Smith designed the contract net protocol as a control mechanism for the decomposition and allocation of tasks within a network of agents <ref> [ Davis and Smith, 1983 ] </ref> . They used an iterative bidding process to form contracts between a contractor and a contractee, dynamically building hierarchical organizations of nodes. <p> This centralized mechanism will 78 be described in detail in Chapter 7. However, the task allocation functionality could itself be fashioned as a distributed-search problem, perhaps using a bidding protocol such as the contract net protocol <ref> [ Davis and Smith, 1983 ] </ref> . An instantiated strategy object represents information about the state of a strategy that has been instantiated within an application system. The generic TEAM instantiated strategy object is shown in Figure 4.10.
Reference: [ Decker and Lesser, 1992a ] <author> Decker, K. and Lesser, V. </author> <title> The analysis of quantitative coordination relationships. </title> <booktitle> In Workshop on Distributed Artificial Intelligence, </booktitle> <address> Michigan, </address> <month> February </month> <year> 1992. </year> <month> 268 </month>
Reference-contexts: This work both enables more concurrency in agent processing and provides explicit mechanisms for agent notification when assumptions are violated. 2.5 Agent Coordination The coordination problem in distributed systems is described as the coherent scheduling of tasks over the set of distributed agents working on sets of interrelated problems <ref> [ Decker and Lesser, 1992a ] </ref> . Although coordination of TEAM agents fits this definition, the most sophisticated work on coordination deals with the issues that arise due to the impact of dynamically-changing environments, physically-distributed and/or uncertain data, and time and cost constraints on problem-solving.
Reference: [ Decker and Lesser, 1992b ] <author> Decker, K. S. and Lesser, V. R. </author> <title> Generalizing the partial global planning algorithm. </title> <journal> International Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 1(2) </volume> <pages> 319-346, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Decker and Lesser have generalized the PGP planner to ab 52 stract and quantify coordination relationships in a domain-independent way among semi-heterogeneous agents <ref> [ Decker and Lesser, 1992b ] </ref> . The themes of coordination and conflict resolution are closely related: conflict resolution activities often require coordination and coordination activities often require conflict resolution.
Reference: [ Durfee and Lesser, 1988 ] <author> Durfee, E. H. and Lesser, V. R. </author> <title> Predictability versus responsiveness: Coordinating problem solvers in dynamic domains. </title> <booktitle> In The Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 66-71, </pages> <address> Saint Paul, Minnesota, </address> <month> August </month> <year> 1988. </year>
Reference: [ Durfee and Lesser, 1991 ] <author> Durfee, E. H. and Lesser, V. R. </author> <title> Partial global planning: A coordination framework for distributed hypothesis formation. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 21(5) </volume> <pages> 1167-1183, </pages> <month> September/October </month> <year> 1991. </year>
Reference: [ Durfee and Montgomery, 1990 ] <author> Durfee, E. H. and Montgomery, T. A. </author> <title> A hierarchical protocol for coordinating multiagent behaviors. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 86-93, </pages> <address> Boston, Massachusetts, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Negotiation can occur among peers [ Cammarata et al., 1983, Lander and Lesser, 1991 ] , through a mediator or arbitrator [ Sycara, 1988, Werkman, 1992 ] , or hierarchically through an organization <ref> [ Davis and Smith, 1983, Durfee and Montgomery, 1990 ] </ref> . It can occur at the level of domain problem-solving or at the level of control problem-solving.
Reference: [ Durfee and Montgomery, 1991 ] <author> Durfee, E. H. and Montgomery, T. </author> <title> Coordination as distributed search in a hierarchical behavior space. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 21(6) </volume> <pages> 1363-1378, </pages> <month> November/December </month> <year> 1991. </year>
Reference-contexts: The protocol uses a single iteration of announce, bid, and select to award contracts. Coordination as Distributed Search: Durfee and Montgomery have looked at the process of coordination as itself involving distributed search through a hierarchical space of potential behaviors <ref> [ Durfee and Montgomery, 1991 ] </ref> . They describe five components of this search: hierarchical representation, metrics for evaluating the acceptability of a coordination plan, a distributed-search protocol for structuring agent interaction and communication, local-search algorithms, and control knowledge.
Reference: [ Durfee et al., 1987 ] <author> Durfee, E. H., Lesser, V. R., and Corkill, D. D. </author> <title> Coherent coop eration among communicating problem solvers. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 36(11) </volume> <pages> 1275-1291, </pages> <month> November </month> <year> 1987. </year>
Reference: [ Durfee, 1991 ] <author> Durfee, E. </author> <title> H. </title> <journal> The distributed artificial intelligence melting pot. IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 21(6) </volume> <pages> 1301-1306, </pages> <month> Novem-ber/December </month> <year> 1991. </year>
Reference-contexts: As is the case when humans approach a complex problem, modular agents must be able to work cooperatively in teams. Teams solve problems that are beyond the scope of any individual agent. As stated by Durfee <ref> [ Durfee, 1991 ] </ref> : Artificial intelligence (AI) has emphasized building "stand-alone systems" that can solve problems with minimal help from other systems (com-puter or human).
Reference: [ Ephrati and Rosenschein, 1991 ] <author> Ephrati, E. and Rosenschein, J. S. </author> <title> The Clarke Tax as a consensus mechanism among automated agents. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pages 173-184, </pages> <address> Anaheim, California, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: Ephrati and Rosenschein described the Clarke Tax, a voting protocol that could be applied over an entire system of agents to allow the system to reach consensus without providing an advantage to agents that lie <ref> [ Ephrati and Rosenschein, 1991 ] </ref> . However, this protocol, like other market-based protocols, is vulnerable to the formation of coalitions, and, therefore, provides only a first layer of protection.
Reference: [ Ephrati and Rosenschein, 1992 ] <author> Ephrati, E. and Rosenschein, J. S. </author> <title> Constrained intelligent action: Planning under the influence of a master agent. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence, </booktitle> <pages> pages 263-268, </pages> <address> San Jose, California, </address> <month> July </month> <year> 1992. </year>
Reference: [ Erman et al., 1980 ] <author> Erman, L. D., Hayes-Roth, F., Lesser, V. R., and Reddy, D. R. </author> <title> The Hearsay-II speech-understanding system: Integrating knowledge to resolve uncertainty. </title> <journal> Computing Surveys, </journal> <volume> 12(2) </volume> <pages> 213-253, </pages> <month> June </month> <year> 1980. </year>
Reference-contexts: Agents embody "microtheories", small chunks of locally consistent knowledge, and interact through negotiation over mutually inconsistent microtheories. The HEARSAY-II Speech Understanding System: The HEARSAY-II system provides an early model of multiple specialists working together <ref> [ Erman et al., 1980 ] </ref> . Cooperation among the specialists occurs implicitly through the incremental extension of globally available hypotheses. Conflicts are not resolved explicitly|instead competing hypotheses coexist and vie for processing resources to improve their believability.
Reference: [ Finin and Wiederhold, 1991 ] <author> Finin, T. and Wiederhold, G. </author> <title> An overview of KQML: A knowledge query manipulation language. </title> <type> Technical report, </type> <institution> Department of Computer Science, Stanford University, Stanford, </institution> <address> CA, </address> <year> 1991. </year>
Reference-contexts: Major areas of investigation include: * Ontologies, knowledge representations, and languages (interlingua) that support shared knowledge semantics among agents ( [ Finin and Wiederhold, 1991, Guha and Lenat, 1990, Neches et al., 1991 ] ) * Integration of heterogeneous databases and knowledge resources ( <ref> [ Finin and Wiederhold, 1991, Wiederhold, 1992 ] </ref> ) * Knowledge modularity that will support reusability ( [ Neches et al., 1991 ] ) * Communication languages and networking protocols to support distributed agents ( [ Genesereth, 1990 ] ) * Multi-viewpoint, multi-criteria evaluation of solutions ( [ Sycara, 1987, Werkman, <p> In this section, we discuss two aspects of knowledge management: knowledge sharing and knowledge consistency. Knowledge Sharing : When agents interact, they must be able to understand each other, i.e., they must have a mutual understanding of interacting objects and events <ref> [ Finin and Wiederhold, 1991, Wiederhold, 1992 ] </ref> . In some kinds of multiagent systems, it is possible that all agents will "speak the same language", and understanding each other will be a trivial matter. However, in heterogeneous or reusable-agent systems, shared languages cannot be taken for granted.
Reference: [ Fisher and Ury, 1981 ] <author> Fisher, R. and Ury, W. </author> <title> Getting to Yes: Negotiating Agreement without Giving In. </title> <publisher> Houghton Mi*in, </publisher> <year> 1981. </year>
Reference-contexts: Negotiation techniques have been developed in the realm of human relations (e.g., international relations, market relations) for minimizing the emotional and practical costs of relaxation <ref> [ Fisher and Ury, 1981, Pruitt, 1981 ] </ref> . We choose to ignore emotional costs for the time being with the assumption that our agents will be purely rational. On the practical side, we have implemented basic relaxation techniques within specific applications (see Chapters 6 and 7). <p> Fisher and Ury describe tactics to be used for reaching agreement in day-to-day experiences <ref> [ Fisher and Ury, 1981 ] </ref> . These authors describe various techniques used by expert negotiators that can be applied to human bargaining situations.
Reference: [ Fox et al., 1982 ] <author> Fox, M., Allen, B., and Strohm, G. </author> <title> Job-shop scheduling: an investi gation in constraint-directed reasoning. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 155-158, </pages> <address> Pittsburgh, Pennsylvania, </address> <month> August </month> <year> 1982. </year> <month> 269 </month>
Reference-contexts: Several researchers have looked at developing heuristics for constraint ordering <ref> [ Fox et al., 1982, Nishibe et al., 1992 ] </ref> . In distributed search, not only is constraint ordering at a single agent important, but power and role relationships among agents must be considered. We will examine the effects of different agent/role assignments on system performance in Chapter 9.
Reference: [ Fox et al., 1989 ] <author> Fox, M., Sadeh, N., and Baykan, C. </author> <title> Constrained heuristic search. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 309-315, </pages> <address> Detroit, Michigan, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: For example, Mammen [ Mammen and Lesser, 1992 ] describes heuristics for improving problem-solving efficiency in multi-agent systems based on the use of the variable tightness texture measure developed by Fox et. al. for single-agent systems <ref> [ Fox et al., 1989 ] </ref> . <p> Centralized Constraint-Directed Reasoning: Fox <ref> [ Fox, 1987, Fox et al., 1989 ] </ref> investigates constraint-directed reasoning in the job-shop scheduling domain. The representation of constraints in Fox's work is more complex than that in TEAM and the use of constraints is more integral to the operation of the system.
Reference: [ Fox, 1987 ] <author> Fox, M. S. </author> <title> Constraint-Directed Search: A Case Study of Job Shop Scheduling. </title> <booktitle> Research Notes in Artificial Intelligence. </booktitle> <publisher> Pitman Publishing, </publisher> <address> London, </address> <year> 1987. </year>
Reference-contexts: We choose to ignore emotional costs for the time being with the assumption that our agents will be purely rational. On the practical side, we have implemented basic relaxation techniques within specific applications (see Chapters 6 and 7). More sophisticated preference-manipulation techniques have been developed in other domains <ref> [ Fox, 1987, Sathi and Fox, 1989, Sycara, 1985 ] </ref> and can be incorporated into application systems developed within our approach. <p> Centralized Constraint-Directed Reasoning: Fox <ref> [ Fox, 1987, Fox et al., 1989 ] </ref> investigates constraint-directed reasoning in the job-shop scheduling domain. The representation of constraints in Fox's work is more complex than that in TEAM and the use of constraints is more integral to the operation of the system.
Reference: [ Gasser, 1991 ] <author> Gasser, L. </author> <title> Social conceptions of knowledge and action: DAI founda tions and open systems semantics. </title> <journal> Artificial Intelligence, </journal> <volume> 47 </volume> <pages> 107-138, </pages> <year> 1991. </year>
Reference-contexts: The agent that developed the new solution simply tried its next best possible partial solution. In contrast, with the TEAM approach, feedback information is used to refine the agent's view of the mutual search space before a new solution is proposed. 2.4 Negotiation and Conflict Management In <ref> [ Gasser, 1991 ] </ref> , Gasser states that the term negotiation has been used in dozens of different ways in the DAI literature.
Reference: [ Genesereth et al., 1986 ] <author> Genesereth, M. R., Ginsberg, M. L., and Rosenschein, J. S. </author> <title> Cooperation without communication. </title> <booktitle> In Proceedings of the Fifth National Conference on Artificial Intelligence, </booktitle> <pages> pages 51-57, </pages> <address> Philadelphia, PA, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: Cooperation without Communication: Genesereth, Ginsberg, and Rosenschein argue that with rational agents in restricted domains, no communication is needed to achieve cooperative behavior <ref> [ Genesereth et al., 1986 ] </ref> . Instead agents maintain local copies of a "payoff matrix" for the problem that defines the payoff each agent will receive for every possible outcome of the problem.
Reference: [ Genesereth, 1990 ] <author> Genesereth, M. </author> <title> Knowledge interchange format. </title> <type> Technical Report 90-4, </type> <institution> Department of Computer Science, Stanford University, Stanford, </institution> <address> CA, </address> <year> 1990. </year>
Reference-contexts: Neches et al., 1991 ] ) * Integration of heterogeneous databases and knowledge resources ( [ Finin and Wiederhold, 1991, Wiederhold, 1992 ] ) * Knowledge modularity that will support reusability ( [ Neches et al., 1991 ] ) * Communication languages and networking protocols to support distributed agents ( <ref> [ Genesereth, 1990 ] </ref> ) * Multi-viewpoint, multi-criteria evaluation of solutions ( [ Sycara, 1987, Werkman, 1992 ] ) * Formal models of cooperation, negotiation, and consensus ( [ Ephrati and Rosen schein, 1991, Genesereth et al., 1986, Rosenschein and Genesereth, 1985, Zlotkin and Rosenschein, 1990, Zlotkin and Rosenschein, 1991 ]
Reference: [ Guha and Lenat, 1990 ] <author> Guha, R. and Lenat, D. B. </author> <title> CYC: A midterm report. </title> <journal> AI Magazine, </journal> <volume> 11(3) </volume> <pages> 32-59, </pages> <month> Fall </month> <year> 1990. </year>
Reference-contexts: Also, with respect to Figure 4.4, note that some attributes (e.g., cost) are not necessarily used consistently across all potential domains. Defining ontologies for representing information across domains is an area of active research <ref> [ Guha and Lenat, 1990, Neches et al., 1991 ] </ref> . We use a minimal set of attributes for generic TEAM objects that we have observed to appear in some context in many domains.
Reference: [ Hayes-Roth, 1985 ] <author> Hayes-Roth, B. </author> <title> A blackboard architecture for control. </title> <journal> Artificial Intelligence, </journal> <volume> 26(3) </volume> <pages> 251-321, </pages> <month> July </month> <year> 1985. </year> <note> (Also published in Readings in Distributed Artificial Intelligence, </note> <editor> Alan H. Bond and Les Gasser, editors, </editor> <address> pages 503-540, </address> <publisher> Morgan Kaufmann, 1988.). </publisher>
Reference: [ Hewitt, 1986 ] <author> Hewitt, C. </author> <title> Offices are open systems. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 4(3) </volume> <pages> 271-287, </pages> <month> July </month> <year> 1986. </year>
Reference-contexts: Given a set of heterogeneous agents that are expected to be reusable, it is not possible to anticipate and engineer out all potential conflicts at development time since it is not known what knowledge will be contained in the complete system <ref> [ Hewitt, 1986 ] </ref> . Instead of dealing with conflict through knowledge engineering, an agent must consider conflict to be an integral part of the problem-solving process and address it explicitly as it occurs. <p> In this paper, they examine issues of parallelism, pluralism, and concurrency among diverse agents. A language, Ether, was developed to support the type of problem solving embodied in the scientific community metaphor. 38 This line of investigation has been continued by Hewitt in his research on open systems <ref> [ Hewitt, 1986, Hewitt, 1991 ] </ref> . An open system comprises a set of agents that concurrently interact with the world and that have no global perspective, control, or knowledge consistency. Agents embody "microtheories", small chunks of locally consistent knowledge, and interact through negotiation over mutually inconsistent microtheories.
Reference: [ Hewitt, 1991 ] <author> Hewitt, C. </author> <title> Open information systems semantics for distributed artifi cial intelligence. </title> <journal> Artificial Intelligence, </journal> <volume> 47(1) </volume> <pages> 79-106, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: In this paper, they examine issues of parallelism, pluralism, and concurrency among diverse agents. A language, Ether, was developed to support the type of problem solving embodied in the scientific community metaphor. 38 This line of investigation has been continued by Hewitt in his research on open systems <ref> [ Hewitt, 1986, Hewitt, 1991 ] </ref> . An open system comprises a set of agents that concurrently interact with the world and that have no global perspective, control, or knowledge consistency. Agents embody "microtheories", small chunks of locally consistent knowledge, and interact through negotiation over mutually inconsistent microtheories.
Reference: [ Hogg and Williams, 1993 ] <author> Hogg, T. and Williams, C. P. </author> <title> Solving the really hard problems with cooperative search. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 231-236, </pages> <address> Washington, DC, </address> <month> July </month> <year> 1993. </year>
Reference: [ Huhns and Bridgeland, 1991 ] <author> Huhns, M. N. and Bridgeland, D. M. </author> <title> Multiagent truth maintenance. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 21(6) </volume> <pages> 1437-1445, </pages> <month> November/December </month> <year> 1991. </year>
Reference-contexts: As work progresses in this area, it will be possible to use the results from that project to understand how to structure knowledge in particular multiagent systems. Knowledge Consistency: Another fundamental concern in multiagent systems is how to manage inconsistencies among agents. In <ref> [ Huhns and Bridgeland, 1991 ] </ref> , Huhns describes a precise truth-maintenance approach to distributed database management. We do not intend to imply that we use distributed truth-maintenance techniques or even that it would be possible or desirable to, given the heterogeneity of the agents involved.
Reference: [ Jagannathan et al., 1991 ] <author> Jagannathan, V., Cleetus, J., Matsumoto, A., Kannan, R., and Lewis, J. </author> <title> Computer support for concurrent engineering. </title> <booktitle> Concurrent Engineering: Issues, Technology, and Practice, </booktitle> <pages> pages 14-30, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: The system is particularly appropriate as a support tool for human designers. DICE: DARPA Initiative in Concurrent Engineering : The general problem of integrating diverse technologies in product development has spawned several efforts to develop a less costly and error-prone development cycle, notably the DARPA Initiative in Concurrent Engineering <ref> [ Jagannathan et al., 1991 ] </ref> . The DICE-WV program 2 attempts to provide computer support for CE in five areas: information 2 Another CE project, also with the acronym DICE, is in progress at MIT.
Reference: [ Khedro and Genesereth, 1993 ] <author> Khedro, T. and Genesereth, M. R. </author> <title> Progressive ne gotiation: A strategy for resolving conflicts in cooperative distributed multidisciplinary design. </title> <booktitle> In Proceedings of the Conflict Resolution Workshop, IJCAI-93, </booktitle> <address> Chambery, France, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: Implicit constraints cannot be expected to be shared in general, since they are an integral part of the agent's expertise and cannot be easily extricated. 2 These unshareable constraints strongly affect properties of the agent sets in which they are embedded. For example, in <ref> [ Khedro and Genesereth, 1993 ] </ref> , Khedro and Genesereth present a search model in which agents provably converge on a globally satisfactory design if one exists. However, the property of convergence can only be guaranteed if all constraining information can be explicitly exchanged. <p> We envision the evolutionary development of CR strategies and protocols such as those proposed by Klein [ Klein, 1991 ] , Khedro <ref> [ Khedro and Genesereth, 1993 ] </ref> , and Zlotkin [ Zlotkin and Rosenschein, 1990 ] that have useful 183 properties of completeness and convergence and the incorporation of those strategies into systems as options to be selected when the appropriate problem characteristics exist. <p> Expanding the Range of Search and Conflict-Resolution Strategies: Currently, only two search strategies are implemented: negotiated search and linear compromise. Other strategies, such as those suggested by Khedro <ref> [ Khedro and Genesereth, 1993 ] </ref> 229 and Klein [ Klein, 1991 ] , could be implemented in TEAM.
Reference: [ Klein and Lu, 1989 ] <author> Klein, M. and Lu, S. C.-Y. </author> <title> Conflict resolution in cooperative design. </title> <journal> International Journal of Artificial Intelligence in Engineering, </journal> <volume> 4(4), </volume> <year> 1989. </year>
Reference-contexts: TEAM is the first architecture that addresses that need in a flexible and generic manner. Cooperative Design: Klein has developed a conceptual model of conflict resolution in design and has shown that the model is viable through its implementation <ref> [ Klein and Lu, 1989, Klein, 1991 ] </ref> . The model is based on informal studies of cooperative design performed by human design experts. It has been applied to solar home design and local area network (LAN) design. Klein maintains that conflict-resolution (CR) expertise exists separately from domain-level design expertise.
Reference: [ Klein, 1991 ] <author> Klein, M. </author> <title> Supporting conflict resolution in cooperative design systems. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 21(6) </volume> <pages> 1379-1390, </pages> <month> Novem-ber/December </month> <year> 1991. </year> <month> 270 </month>
Reference-contexts: In other words, conflict stimulates agent interaction and is itself the basis of coordination of conflict-resolution behavior. The resolution of conflict dictates what information is to be exchanged and specifies a set of conflict-resolution tasks that must be added to the agent's scheduled activities. Klein <ref> [ Klein, 1991 ] </ref> has suggested that conflict should be elevated to a first-class status: that conflict- and domain-level knowledge should have separate but equal roles in problem-solving activity. <p> TEAM is the first architecture that addresses that need in a flexible and generic manner. Cooperative Design: Klein has developed a conceptual model of conflict resolution in design and has shown that the model is viable through its implementation <ref> [ Klein and Lu, 1989, Klein, 1991 ] </ref> . The model is based on informal studies of cooperative design performed by human design experts. It has been applied to solar home design and local area network (LAN) design. Klein maintains that conflict-resolution (CR) expertise exists separately from domain-level design expertise. <p> Currently, we can't even enumerate what these characteristics are. Classification of problems as globally or locally cooperative is a start along with classifications of evaluation functions as linear, monotonic, etc. as described in Chapter 7. Klein <ref> [ Klein, 1991 ] </ref> has done some initial work on identifying the characteristics of specific conflict situations and associating them with resolution procedures. The formal models of Zlotkin and Rosenschein [ Zlotkin and Rosenschein, 1991 ] offer some preliminary insights into types of cooperation that are feasible in particular situations. <p> We envision the evolutionary development of CR strategies and protocols such as those proposed by Klein <ref> [ Klein, 1991 ] </ref> , Khedro [ Khedro and Genesereth, 1993 ] , and Zlotkin [ Zlotkin and Rosenschein, 1990 ] that have useful 183 properties of completeness and convergence and the incorporation of those strategies into systems as options to be selected when the appropriate problem characteristics exist. <p> Development of a Comprehensive Conflict-Management Package: Conflict management includes both conflict avoidance and conflict resolution. Klein has inves 221 tigated developing a taxonomy of conflict-management techniques that is domain-independent at its highest levels <ref> [ Klein, 1991 ] </ref> . At the implementational level, however, instances of conflict-management techniques are domain-specific, depending on the type of information being handled and the capabilities of the agents involved to assimilate and apply the information. Because agents are reusable, it is not possible to knowledge-engineer an application system. <p> Expanding the Range of Search and Conflict-Resolution Strategies: Currently, only two search strategies are implemented: negotiated search and linear compromise. Other strategies, such as those suggested by Khedro [ Khedro and Genesereth, 1993 ] 229 and Klein <ref> [ Klein, 1991 ] </ref> , could be implemented in TEAM. When a strategy has been implemented in another system, it would be possible to compare performance with the TEAM version, leading to a better understanding of the strengths and weaknesses of the framework.
Reference: [ Kornfeld and Hewitt, 1981 ] <author> Kornfeld, W. A. and Hewitt, C. E. </author> <title> The scientific community metaphor. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> SMC-11(1):24-33, </volume> <month> January </month> <year> 1981. </year>
Reference: [ Kraus and Wilkenfeld, 1990 ] <author> Kraus, S. and Wilkenfeld, J. </author> <title> The function of time in cooperative negotiations. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pages 179-184, </pages> <address> Anaheim, California, </address> <month> July </month> <year> 1990. </year>
Reference: [ Laasri et al., 1992 ] <author> Laasri, B., Laasri, H., Lander, S., and Lesser, V. </author> <title> Toward a general model of intelligent negotiating agents. </title> <journal> The International Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 1(2) </volume> <pages> 291-317, </pages> <year> 1992. </year>
Reference-contexts: It can occur at the level of domain problem-solving or at the level of control problem-solving. Laasri et. al. describe the recursive negotiation model , a general model of multi-agent problem solving that details various situations that can potentially benefit from negotiation <ref> [ Laasri et al., 1992 ] </ref> . In examining this model, it becomes clear that negotiation is a pervasive process and remains relatively untapped by current computational systems.
Reference: [ Lander and Lesser, 1991 ] <author> Lander, S. E. and Lesser, V. R. </author> <title> Negotiated search: A framework for cooperative design. </title> <type> Technical Report 91-79, </type> <institution> Department of Computer and Information Science, University of Massachusetts, Amherst, Mas-sachusetts, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: Various points along the cooperation/hostility continuum are examined in [ Zlotkin and Rosenschein, 1990, Zlotkin and Rosenschein, 1991 ] . Negotiation can occur among peers <ref> [ Cammarata et al., 1983, Lander and Lesser, 1991 ] </ref> , through a mediator or arbitrator [ Sycara, 1988, Werkman, 1992 ] , or hierarchically through an organization [ Davis and Smith, 1983, Durfee and Montgomery, 1990 ] .
Reference: [ Lander and Lesser, 1992a ] <author> Lander, S. E. and Lesser, V. R. </author> <title> Customizing distributed search among agents with heterogeneous knowledge. </title> <booktitle> In Proceedings of the First International Conference on Information and Knowledge Management, </booktitle> <pages> pages 335-344, </pages> <address> Baltimore, Maryland, </address> <month> November </month> <year> 1992. </year>
Reference: [ Lander and Lesser, 1992b ] <author> Lander, S. E. and Lesser, V. R. </author> <title> Negotiated search: Organizing cooperative search among heterogeneous expert agents. </title> <booktitle> In Proceedings of the Fifth International Symposium on Artificial Intelligence, Applications in Manufacturing and Robotics, </booktitle> <pages> pages 351-358, </pages> <address> Cancun, Mexico, </address> <month> December </month> <year> 1992. </year>
Reference: [ Lander and Lesser, 1993 ] <author> Lander, S. E. and Lesser, V. R. </author> <title> Understanding the role of negotiation in distributed search among heterogeneous agents. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 438-444, </pages> <address> Chambery, France, </address> <month> August/September </month> <year> 1993. </year>
Reference-contexts: A major challenge we faced in applying negotiation, however, was that the term negotiation is used in many different situations and is difficult to pin down <ref> [ Lander and Lesser, 1993 ] </ref> .
Reference: [ Lander et al., 1991a ] <author> Lander, S., Lesser, V. R., and Connell, M. E. </author> <title> Conflict reso lution strategies for cooperating expert agents. </title> <editor> In Deen, S., editor, </editor> <booktitle> Cooperating Knowledge Based Systems 1990, </booktitle> <pages> pages 183-198. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: To achieve the flexibility required for reusable agent sets, the framework must be able to support different policies for information exchange such as the yes-no and alternatives policies described by Sen [ Sen and Durfee, 1992 ] or the generate-random-alternatives policy described by Lander <ref> [ Lander et al., 1991a ] </ref> . 2.4.5 Mediation and Arbitration In many human and some computational conflict-resolution systems, third-party intervention is used to help resolve conflicts among agents [ Pruitt, 1981, Sycara, 1988, Werkman, 1992 ] . <p> Now, consider the case where two agents have sparse solution spaces and functional relationships that cannot be communicated. This forms a very problematic agent set: the best-case scenario is that by random initiation and extension of designs, eventually the two agents find an overlapping solution <ref> [ Lander et al., 1991a ] </ref> . In this situation, both agents should instantiate initiate-solution and extend-solution since neither has an advantage in controlling the interactions. If the composite space is large and sparse, any mutually consistent solution found may be considered acceptable.
Reference: [ Lander et al., 1991b ] <author> Lander, S. E., Lesser, V. R., and Connell, M. E. </author> <title> Knowledge based conflict resolution for cooperation among expert agents. </title> <editor> In Sriram, D., Logher, R., and Fukuda, S., editors, </editor> <booktitle> Computer-Aided Cooperative Product Development, </booktitle> <pages> pages 253-268. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [ Lee et al., 1993 ] <author> Lee, K.-C., Mansfield, W., and Sheth, A. </author> <title> A framework for control ling cooperative agents. </title> <journal> Computer, </journal> <volume> 26(7) </volume> <pages> 8-17, </pages> <month> July </month> <year> 1993. </year>
Reference: [ Lesser and Corkill, 1983 ] <author> Lesser, V. and Corkill, D. </author> <title> The distributed vehicle moni toring testbed: A tool for investigating distributed problem solving networks. </title> <journal> AI Magazine, </journal> <volume> 4(3) </volume> <pages> 15-33, </pages> <year> 1983. </year> <note> (also in Blackboard Systems, </note> <editor> R. Engelmore and T. </editor> <publisher> Morgan (eds.), </publisher> <pages> pp 353-386, </pages> <publisher> Addison-Wesley, </publisher> <year> 1988). </year>
Reference-contexts: The Distributed Vehicle Monitoring Testbed : Rather than using backtracking to examine alternative solutions, the Distributed Vehicle Monitoring Testbed (DVMT) used an opportunistic incremental-extension algorithm in which multiple potential solution paths were simultaneously <ref> [ Lesser and Corkill, 1983 ] </ref> . When an a value couldn't be assigned to an attribute because of conflicts, instead of undoing some attribute (s) of that solution, a new solution was started.
Reference: [ Lesser et al., 1993 ] <author> Lesser, V., Nawab, H., Gallastegi, I., and Klassner, F. IPUS: </author> <title> An architecture for integrated signal processing and signal interpretation in complex environments. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 249-255, </pages> <address> Washington, DC, </address> <month> July </month> <year> 1993. </year> <month> 271 </month>
Reference: [ Lesser, 1990 ] <author> Lesser, V. R. </author> <title> An overview of DAI: Viewing distributed AI as distributed search. </title> <journal> Journal of the Japanese Society for Artificial Intelligence, </journal> <volume> 5(4) </volume> <pages> 392-400, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: A control strategy is used for deciding what to do next, specifically, deciding what operator to apply and where to apply it. When all operators reside in a single program or logical entity and have access to the same knowledge and databases, the search is centralized. In <ref> [ Lesser, 1990 ] </ref> , Lesser discusses distributed search: A distributed search involves partitioning the state space and its associated operators and control regime so that multiple processing elements can simultaneously perform local searches on different parts of the state space; the (intermediate) results of the local searches are shared in
Reference: [ Lesser, 1991 ] <author> Lesser, V. R. </author> <title> A retrospective view of fa/c distributed problem solving. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 21(6) </volume> <pages> 1347-1362, </pages> <month> Novem-ber/December </month> <year> 1991. </year>
Reference: [ MacLeod and Moll, 1991 ] <author> MacLeod, B. and Moll, R. OPL: </author> <title> An environment for pos ing and solving discrete optimization problems. </title> <type> Technical Report 91-20, </type> <institution> Computer Science Department, University of Massachusetts, </institution> <address> Amherst, MA, </address> <month> April </month> <year> 1991. </year>
Reference: [ Mammen and Lesser, 1992 ] <author> Mammen, D. L. and Lesser, V. R. </author> <title> Using textures to control distributed problem solving. </title> <booktitle> In Working Notes from the AAAI Workshop on Cooperation among Heterogeneous Intelligent Systems, AAAI-92, </booktitle> <address> San Jose, California, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: Currently, most heuristics are developed intuitively|someone decides that it seems reasonable to apply a particular rule to a particular situation. A more rigorous approach to heuristic development would provide both more robust systems and greater user confidence. For example, Mammen <ref> [ Mammen and Lesser, 1992 ] </ref> describes heuristics for improving problem-solving efficiency in multi-agent systems based on the use of the variable tightness texture measure developed by Fox et. al. for single-agent systems [ Fox et al., 1989 ] .
Reference: [ Marshall and et. al., 1982 ] <author> Marshall, R. and et. al. </author> <title> Investigation of the Kansas City Hyatt Regency walkways collapse. </title> <type> Technical Report Technical Report Science Series 143, </type> <institution> National Bureau of Standards, </institution> <address> Washington, D.C., </address> <month> May </month> <year> 1982. </year>
Reference-contexts: On July 7, 1981, two skywalks in the lobby of the Hyatt Regency Hotel in Kansas City collapsed. It was cited as the "most devastating structural collapse ever to take place in the United States;" 114 people died and 186 were injured <ref> [ Marshall and et. al., 1982 ] </ref> . This was not only a failure of a physical structural system, but also a failure of the process by which most projects in the U.S. are designed and built.
Reference: [ Meunier, 1988 ] <author> Meunier, K. L. </author> <title> Iterative respecification: A computational model for automating parametric mechanical system design. </title> <type> Master's thesis, </type> <institution> University of Massachusetts, Amherst, Massachusetts, </institution> <month> February </month> <year> 1988. </year>
Reference-contexts: The components of a steam condenser are a pump, heat exchanger, motor, platform, shaft, and v-belt. The domain-level knowledge in STEAM was originally developed by Meunier and Dixon for use in an iterative respecification system <ref> [ Meunier, 1988 ] </ref> . The implementation of STEAM was a major effort that was interleaved with the design and development of the TEAM framework. The TEAM framework was originally developed in the context of STEAM. <p> The first type validates the feasibility and sophistication of both the complete TEAM framework and particular features of the framework. We demonstrate the feasibility of the framework as an architecture for application systems by directly comparing results from STEAM to those obtained by Meunier <ref> [ Meunier, 1988 ] </ref> in the original steam-condenser design application in Chapter 6. We then demonstrate the sophistication of the framework by noting specific types of behavior that have been documented in other multiagent frameworks. <p> Experiments that will be described in following chapters include: * Comparison of the STEAM system and a previously developed system from which its domain knowledge was taken <ref> [ Meunier, 1988 ] </ref> . <p> are integrated into a coherent system that meets the requirements of the domain and the performance criteria of the system designer. 6.2.1 The STEAM Domain Much of the application knowledge in the steam condenser domain was originally developed by Meunier and Dixon for use in an iterative respecification system, IRSys <ref> [ Meunier, 1988 ] </ref> . 1 We finish the chapter by comparing STEAM to IRSys. STEAM and IRSys share a common domain, the design of steam condensers. They both decompose a steam condenser into a set of components, namely, a pump, heat exchanger, motor, platform, shaft and v-belt. <p> STEAM and IRSys share a common domain, the design of steam condensers. They both decompose a steam condenser into a set of components, namely, a pump, heat exchanger, motor, platform, shaft and v-belt. Figure 6.1, taken from <ref> [ Meunier, 1988 ] </ref> , shows the representation of a condenser that is used in both systems. Each component in the condenser is designed by a separate agent. For example, pump-agent produces pump designs. <p> As information about design 161 requirements propagates throughout the agent set, it is expected that new initial designs will improve. 6.4 Comparison of Results from IRSys and STEAM We ran both systems on the same data sets. The first four data sets were taken from <ref> [ Meunier, 1988 ] </ref> , and the rest were generated by selecting values for each of the problem specification parameters, required capacity, platform side length, and maximum platform deflection. The values were randomly generated from within the feasible value range for each parameter. <p> The first four were taken from Meunier's thesis work on steam condenser design <ref> [ Meunier, 1988 ] </ref> , the others were randomly generated. The first problem specification is infeasible and results in a system failure. It was used primarily to test the system and for comparison purposes with the IRSys system described in Chapter 6. <p> A summary of the results appears in Chapter 6. One hundred and one comparative trials were run, where each trial consisted of running STEAM and IRSys on identical problem specifications. The first trial was run with an infeasible problem specification. The first four problem specifications were taken from <ref> [ Meunier, 1988 ] </ref> , while the rest were derived by generating random values of each specification parameter within the known parameter boundaries.
Reference: [ Moehlman and Lesser, 1990 ] <author> Moehlman, T. and Lesser, V. </author> <title> Cooperative planning and decentralized negotiation in multi-fireboss phoenix. </title> <booktitle> In Proceedings of the 1990 DARPA Workshop on Innovative Approaches to Planning, Scheduling, and Control, </booktitle> <address> Texas, </address> <month> November </month> <year> 1990. </year>
Reference-contexts: This is a point where either human/machine or machine/machine negotiation could occur. It might be desirable to change the problem specification, either automatically or interactively with the user. In some domains, failure is not an acceptable alternative. For example, Moehlman <ref> [ Moehlman and Lesser, 1990 ] </ref> describes a system that attempts to control 131 a fire given a set of resources. In this case, giving up and allowing the fire to burn is never a solution.
Reference: [ Neches et al., 1991 ] <author> Neches, R., Fikes, R., Finin, T., Gruber, T., Patil, R., Senator, T., and Swartout, W. R. </author> <title> Enabling technology for knowledge sharing. </title> <journal> AI Magazine, </journal> <volume> 12(3) </volume> <pages> 36-56, </pages> <month> Fall </month> <year> 1991. </year>
Reference-contexts: The ability to flexibly team up and coordinate group activities toward individual and collective goals is a hallmark of intelligence. 4 1.1.1 Agent Reusability in Team Problem Solving When information is represented in a modular and logically independent way, the information is potentially reusable <ref> [ Neches et al., 1991 ] </ref> . The computational equivalent to teams of human specialists is the reusable-agent system, a multiagent system for which the agents can be dynamically selected from an existing library and integrated with minimal customized implementation. <p> (interlingua) that support shared knowledge semantics among agents ( [ Finin and Wiederhold, 1991, Guha and Lenat, 1990, Neches et al., 1991 ] ) * Integration of heterogeneous databases and knowledge resources ( [ Finin and Wiederhold, 1991, Wiederhold, 1992 ] ) * Knowledge modularity that will support reusability ( <ref> [ Neches et al., 1991 ] </ref> ) * Communication languages and networking protocols to support distributed agents ( [ Genesereth, 1990 ] ) * Multi-viewpoint, multi-criteria evaluation of solutions ( [ Sycara, 1987, Werkman, 1992 ] ) * Formal models of cooperation, negotiation, and consensus ( [ Ephrati and Rosen schein, <p> A major effort is underway to develop techniques to support sharing of knowledge among systems, The Knowledge-Sharing Effort, sponsored by the Air Force Office of Scientific Research, the Defense Advanced Research Projects Agency, the Corporation for National Research Initiatives, and the National Science Foundation <ref> [ Neches et al., 1991 ] </ref> . As work progresses in this area, it will be possible to use the results from that project to understand how to structure knowledge in particular multiagent systems. Knowledge Consistency: Another fundamental concern in multiagent systems is how to manage inconsistencies among agents. <p> Also, with respect to Figure 4.4, note that some attributes (e.g., cost) are not necessarily used consistently across all potential domains. Defining ontologies for representing information across domains is an area of active research <ref> [ Guha and Lenat, 1990, Neches et al., 1991 ] </ref> . We use a minimal set of attributes for generic TEAM objects that we have observed to appear in some context in many domains.
Reference: [ Newell, 1982 ] <author> Newell, A. </author> <title> The knowledge level. </title> <journal> Artificial Intelligence, </journal> <volume> 18(1) </volume> <pages> 87-127, </pages> <month> January </month> <year> 1982. </year>
Reference-contexts: However, the other agents can continue processing without interruption. Newell suggests that there is a level, the knowledge level , at which the behavior of an intelligent agent can be modelled <ref> [ Newell, 1982 ] </ref> . At this level, knowledge is viewed as being distinct from the representation an agent incorporates to access and manipulate that knowledge.
Reference: [ Nii, 1986 ] <author> Nii, H. P. </author> <title> Blackboard systems: The blackboard model of problem solving and the evolution of blackboard architectures. </title> <journal> AI Magazine, </journal> <volume> 7(2) </volume> <pages> 38-53, </pages> <month> Summer </month> <year> 1986. </year>
Reference: [ Nishibe et al., 1992 ] <author> Nishibe, Y., Kuwabara, K., and Ishida, T. </author> <title> Effects of heuristics in distributed constraint satisfaction: Towards satisficing algorithms. </title> <booktitle> In Workshop on Distributed Artificial Intelligence, </booktitle> <pages> pages 285-302, </pages> <address> Michigan, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: For each category, he describes associated research issues, current work that provides at least some initial suggestions on how to deal with those issues, and classes of problems that fall into the search category. In <ref> [ Nishibe et al., 1992 ] </ref> , Nishibe looks at reducing the often intractable computational cost of complete distributed-search algorithms for constraint-satisfaction problems. He particularly investigates developing satisficing algorithms that take advantage of heuristic orderings of variable/value instantiations. <p> Several researchers have looked at developing heuristics for constraint ordering <ref> [ Fox et al., 1982, Nishibe et al., 1992 ] </ref> . In distributed search, not only is constraint ordering at a single agent important, but power and role relationships among agents must be considered. We will examine the effects of different agent/role assignments on system performance in Chapter 9.
Reference: [ Orelup et al., 1988 ] <author> Orelup, M., Dixon, J., Cohen, P., and Simmons, M. Dominic II: </author> <title> Meta-level control in iterative redesign. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 25-30, </pages> <address> Saint Paul, Minnesota, </address> <month> August </month> <year> 1988. </year>
Reference: [ Pruitt, 1981 ] <author> Pruitt, D. G. </author> <title> Negotiation Behavior. </title> <publisher> Academic Press, </publisher> <year> 1981. </year>
Reference-contexts: Negotiation techniques have been developed in the realm of human relations (e.g., international relations, market relations) for minimizing the emotional and practical costs of relaxation <ref> [ Fisher and Ury, 1981, Pruitt, 1981 ] </ref> . We choose to ignore emotional costs for the time being with the assumption that our agents will be purely rational. On the practical side, we have implemented basic relaxation techniques within specific applications (see Chapters 6 and 7). <p> Some general methods that can be implemented as relaxation operators include relaxing or relinquishing constraints, relaxing or relinquishing goals, manipulating sets of constraints (e.g., unlinking, bridging <ref> [ Pruitt, 1981 ] </ref> ), or manipulating evaluation criteria [ Sycara, 1985 ] . Multiagent systems do not traditionally acknowledge or exploit the role of conflict among agents as a driving force in the control of problem-solving activity. <p> In contrast to such struggles, negotiation can be viewed as a form of coordination, in which the two parties talk to one another in search of an agreement. <ref> [ Pruitt, 1981 ] </ref> 33 Negotiation is composed of two phases: a communication phase where information relevant to the negotiation is communicated to participating agents, and a bargaining phase where "deals" are made between individuals or in a group... <p> In the following sections, we look at negotiation and conflict management in several different categories: human models, formal models, and computational models. 34 2.4.1 Human Models of Conflict Management Psychological Studies: Pruitt discusses human negotiation and conflict management in international relations from a background of organizational and occupational psychology <ref> [ Pruitt, 1981 ] </ref> . Fisher and Ury describe tactics to be used for reaching agreement in day-to-day experiences [ Fisher and Ury, 1981 ] . These authors describe various techniques used by expert negotiators that can be applied to human bargaining situations. <p> the yes-no and alternatives policies described by Sen [ Sen and Durfee, 1992 ] or the generate-random-alternatives policy described by Lander [ Lander et al., 1991a ] . 2.4.5 Mediation and Arbitration In many human and some computational conflict-resolution systems, third-party intervention is used to help resolve conflicts among agents <ref> [ Pruitt, 1981, Sycara, 1988, Werkman, 1992 ] </ref> . In mediation, the third party works with the disputants, helping them to reach agreement. In arbitration, the third party listens to arguments from both sides and produces a binding resolution.
Reference: [ Reddy et al., 1993 ] <author> Reddy, Y., Srinivas, K., Jagannathan, V., and Karinthi, R. </author> <title> Computer support for concurrent engineering. </title> <journal> Computer, </journal> <volume> 26(1) </volume> <pages> 12-16, </pages> <month> January </month> <year> 1993. </year> <month> 272 </month>
Reference: [ Robinson, 1991 ] <author> Robinson, W. N. </author> <title> A decision theoretic perspective of multiagent requirements negotiation. </title> <booktitle> In Proceedings of the AAAI Workshop on Cooperation Among Heterogeneous Intelligent Systems, </booktitle> <address> Anaheim, California, </address> <month> July </month> <year> 1991. </year>
Reference: [ Rosenschein and Genesereth, 1985 ] <author> Rosenschein, J. S. and Genesereth, M. R. </author> <title> Deals among rational agents. </title> <booktitle> In Proceedings of the Ninth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 91-99, </pages> <address> Los Angeles, California, </address> <month> August </month> <year> 1985. </year>
Reference-contexts: The term "cooperative" has been defined in different ways with respect to multiagent systems. It is sometimes used to mean a system of agents that have completely separate local goals and that interact only when interaction can potentially further those goals <ref> [ Rosenschein and Genesereth, 1985, Zlotkin and Rosenschein, 1990 ] </ref> . An example of this is a consumer/producer system in which some agents need to acquire resources and other agents have resources available to sell.
Reference: [ Sandholm, 1993 ] <author> Sandholm, T. </author> <title> An implementation of the contract net protocol based on marginal cost calculations. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 256-262, </pages> <address> Washington, D.C., </address> <month> July </month> <year> 1993. </year>
Reference-contexts: The distribution may also be inherent in domain due to a need for autonomy or privacy based on competitiveness, e.g., Sandholm describes a system of transport companies that must decide how to most profitably route their vehicles to accomplish required deliveries <ref> [ Sandholm, 1993 ] </ref> . These companies are competitive and do not wish to expose unnecessary information, but are willing to cooperate when doing so increases their profitability.
Reference: [ Sathi and Fox, 1989 ] <author> Sathi, A. and Fox, M. S. </author> <title> Constraint-directed negotiation of resource reallocations. </title> <editor> In Gasser, L. and Huhns, M., editors, </editor> <booktitle> Distributed Artificial Intelligence, </booktitle> <volume> Volume 2, chapter 8, </volume> <pages> pages 163-193. </pages> <publisher> Pitman Publishing, </publisher> <address> London, </address> <year> 1989. </year>
Reference-contexts: We choose to ignore emotional costs for the time being with the assumption that our agents will be purely rational. On the practical side, we have implemented basic relaxation techniques within specific applications (see Chapters 6 and 7). More sophisticated preference-manipulation techniques have been developed in other domains <ref> [ Fox, 1987, Sathi and Fox, 1989, Sycara, 1985 ] </ref> and can be incorporated into application systems developed within our approach. <p> The negotiation process can be viewed as constraint directed search in a problem space. <ref> [ Sathi and Fox, 1989 ] </ref> One of the primary motivations for the dissertation research was to examine how conflict management and negotiation could be used effectively in a multiagent search system. <p> Many of the psychological factors are not immediately relevant to computational negotiation and we do not take them into account. However, some of the tactics described in these works can be carried over to computational environments. In <ref> [ Sathi and Fox, 1989 ] </ref> , Sathi and Fox describe the implementation of several negotiation operators that were directly inspired by negotiation tactics suggested by Pruitt. <p> Although we have not pursued the use of lateral-thinking techniques for computational conflict resolution, it is an area that may offer interesting insights into how to construct mutually acceptable solutions in some situations. In <ref> [ Sathi and Fox, 1989 ] </ref> , Sathi describes a reconfiguration operator for resolving conflicts that changes the physical configuration of a resource in order to adapt the resource to more closely match a request. <p> However, the use of this protocol is limited to situations where all plans and associated plan fragments can be enumerated before its application. Constraint-Directed Resource Reallocation: Sathi and Fox <ref> [ Sathi and Fox, 1989 ] </ref> describe constraint-directed negotiation in the domain of resource reallocation in an engineering organization. In this domain, resources are bought and sold among agents in response to changing needs. <p> This understanding is achieved through a feedback system that can be separate from the actual proposals. Sathi and Fox recognized the underlying goal of feedback in their work on constraint-directed negotiation <ref> [ Sathi and Fox, 1989 ] </ref> : Constraint-directed negotiation would simply reduce to heuristic search if constraints were used only for evaluating negotiation positions. In constraint-directed negotiation we view constraints as fundamental in the generation of new positions.
Reference: [ Sathi et al., 1986 ] <author> Sathi, A., Morton, T. E., and Roth, S. F. Callisto: </author> <title> An intelligent project management system. </title> <journal> AI Magazine, </journal> <volume> 7(5) </volume> <pages> 34-52, </pages> <month> Winter </month> <year> 1986. </year>
Reference-contexts: CALLISTO: An Intelligent Project Management System: The CALLISTO system by Sathi, Morton, and Roth is concerned with the management of large projects that require resources and expertise from diverse fields <ref> [ Sathi et al., 1986 ] </ref> . The goal of the project is to model a good manager and the tasks that she is involved in: specifying activities, organizing personnel, scheduling activities, chronicling activities, projecting resource needs, monitoring project performance, and analyzing and managing 39 deviations from plans.
Reference: [ Sen and Durfee, 1992 ] <author> Sen, S. and Durfee, E. </author> <title> A formal analysis of communication and commitment in distributed meeting scheduling. </title> <booktitle> In Proceedings of the 10th Workshop on Distributed Artificial Intelligence, </booktitle> <address> Glen Arbor, Michigan, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: it mention that the other meeting is not very important? Should it tell the scheduler all the available time slots it has for that day? for the next week? Should it mention that every Wednesday from 3:00-5:00 is reserved for 44 tennis? Sen is attempting to formally investigate meeting scheduling <ref> [ Sen and Durfee, 1992 ] </ref> . He assumes that the cost of formulating a list of available time slots is very low compared to the cost of multiple communications. <p> To achieve the flexibility required for reusable agent sets, the framework must be able to support different policies for information exchange such as the yes-no and alternatives policies described by Sen <ref> [ Sen and Durfee, 1992 ] </ref> or the generate-random-alternatives policy described by Lander [ Lander et al., 1991a ] . 2.4.5 Mediation and Arbitration In many human and some computational conflict-resolution systems, third-party intervention is used to help resolve conflicts among agents [ Pruitt, 1981, Sycara, 1988, Werkman, 1992 ] .
Reference: [ Simon, 1969 ] <editor> Simon, H. A. </editor> <booktitle> The Sciences of the Artificial. </booktitle> <publisher> The M.I.T. Press, </publisher> <year> 1969. </year>
Reference: [ Skinner, 1992 ] <author> Skinner, J. M. </author> <title> A Synergistic Approach to Reasoning. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, University of New Mexico, </institution> <address> Albuquerque, NM, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: An active research area is hybrid systems, the integration of systems with different architectures (e.g., neural nets vs. production systems) or algorithms (e.g., linear optimization vs. heuristic search) where each agent implements the most appropriate technology for the class of problems it is designed to handle <ref> [ Skinner, 1992 ] </ref> .
Reference: [ Sommerville, 1989 ] <author> Sommerville, I. </author> <title> Software Engineering, Third Edition. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Sommerville suggests that implementation effort represents the smallest part of software development with more effort going into both design and testing. Furthermore, for large, long-lived, software systems, he estimates that maintenance costs normally exceed development costs by factors which range from two to four <ref> [ Sommerville, 1989 ] </ref> . 6.2 The STEAM System In the following sections, we describe the application domain of the STEAM system and the general organization of the system including task decomposition and agent concurrency issues.
Reference: [ Sriram et al., 1991 ] <author> Sriram, D., Logcher, R., and Fukuda, S., </author> <title> editors. Computer Aided Cooperative Product Development. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> No. 492. </volume> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: If the path fails, much of the work that has been done turns out to be irrelevant and, if constraints could be introduced earlier, some of that work could be avoided. In <ref> [ Sriram et al., 1991 ] </ref> , Sriram describes the problem in a product development domain, including a quotation from Business Week, April 30, 1990, p. 111: The present method of product development is like a relay race.
Reference: [ Sriram et al., 1992 ] <author> Sriram, D., Logcher, R., Groleau, N., and Cherneff, J. </author> <title> DICE: An object oriented programming environment for communication, coordination and control in computer aided engineering. </title> <editor> In Tong, C. and Sriram, D., editors, </editor> <booktitle> Artificial Intelligence in Engineering Design (Volume III). </booktitle> <publisher> Academic Press, </publisher> <year> 1992. </year>
Reference-contexts: However, we believe that these issues will become more important as the underlying interaction technology evolves. DICE: Distributed and Integrated Environment for Computer-aided Engineering: In <ref> [ Sriram et al., 1992 ] </ref> , Sriram, Logcher, Groleau, and Cherneff describe an architecture for building concurrent engineering systems that we will refer to as DICE-MIT. This architecture is designed specifically to facilitate the cooperation of agents working on diverse engineering problems in an integrated project.
Reference: [ Sycara et al., 1991 ] <author> Sycara, K., Roth, S., Sadeh, N., and Fox, M. </author> <title> Distributed constrained heuristic search. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 21(6) </volume> <pages> 1446-1461, </pages> <month> November/December </month> <year> 1991. </year>
Reference-contexts: Several mechanisms for determining the order of attribute instantiation (variable ordering), the order in which potential values are assigned to attributes (value ordering), and the order of agent invocation in distributed systems have been explored in <ref> [ Sycara et al., 1991, Yokoo et al., 1992 ] </ref> . A heuristic satisficing algorithm can only be as good as the heuristics that are used. Currently, most heuristics are developed intuitively|someone decides that it seems reasonable to apply a particular rule to a particular situation. <p> These requirements make the formalism too limited for use in systems of heterogeneous and reusable agents. We 31 note though that these limitations may be completely reasonable in the context of the application domain of job-shop scheduling. Distributed Constrained Heuristic Search: In <ref> [ Sycara et al., 1991 ] </ref> , Sycara, Roth, Sadeh, and Fox describe research in applying constraint-directed reasoning to systems of asynchronous agents.
Reference: [ Sycara, 1985 ] <author> Sycara, K. </author> <title> Arguments of persuasion in labour mediation. </title> <booktitle> In Proceed ings of the Ninth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 294-296, </pages> <address> Los Angeles, California, </address> <year> 1985. </year>
Reference-contexts: We choose to ignore emotional costs for the time being with the assumption that our agents will be purely rational. On the practical side, we have implemented basic relaxation techniques within specific applications (see Chapters 6 and 7). More sophisticated preference-manipulation techniques have been developed in other domains <ref> [ Fox, 1987, Sathi and Fox, 1989, Sycara, 1985 ] </ref> and can be incorporated into application systems developed within our approach. <p> Some general methods that can be implemented as relaxation operators include relaxing or relinquishing constraints, relaxing or relinquishing goals, manipulating sets of constraints (e.g., unlinking, bridging [ Pruitt, 1981 ] ), or manipulating evaluation criteria <ref> [ Sycara, 1985 ] </ref> . Multiagent systems do not traditionally acknowledge or exploit the role of conflict among agents as a driving force in the control of problem-solving activity. However, 9 for some types of problem solving, conflict is the focal point of interaction and must be explicitly addressed.
Reference: [ Sycara, 1987 ] <author> Sycara, E. P. </author> <title> Resolving Adversarial Conflicts: An Approach Integrat ing Case-Based and Analytic Methods. </title> <type> PhD thesis, </type> <institution> Georgia Institute of Technology, Atlanta, Georgia, </institution> <month> June </month> <year> 1987. </year> <note> Also published as Technical Report GIT-ICS-87/26. 273 </note>
Reference-contexts: knowledge resources ( [ Finin and Wiederhold, 1991, Wiederhold, 1992 ] ) * Knowledge modularity that will support reusability ( [ Neches et al., 1991 ] ) * Communication languages and networking protocols to support distributed agents ( [ Genesereth, 1990 ] ) * Multi-viewpoint, multi-criteria evaluation of solutions ( <ref> [ Sycara, 1987, Werkman, 1992 ] </ref> ) * Formal models of cooperation, negotiation, and consensus ( [ Ephrati and Rosen schein, 1991, Genesereth et al., 1986, Rosenschein and Genesereth, 1985, Zlotkin and Rosenschein, 1990, Zlotkin and Rosenschein, 1991 ] ) * Computational models of cooperation and negotiation ( [ Adler et <p> The mechanisms for achieving this in an equitable way will be described in detail in later chapters. Negotiation to Resolve Goal Conflicts: Negotiation to resolve goal conflicts was explored by Sycara <ref> [ Sycara, 1987, Sycara, 1988 ] </ref> . In this work, the application domain is labor mediation. Sycara's system, PERSUADER, acts as mediator between a company and a union. This is a locally cooperative domain since solution quality is a function of the utilities of independent agents.
Reference: [ Sycara, 1988 ] <author> Sycara, K. </author> <title> Resolving goal conflicts via negotiation. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 245-250, </pages> <address> Saint Paul, Minnesota, </address> <month> August </month> <year> 1988. </year> [ <title> von Martial, 1992 ] von Martial, F. Coordinating Plans of Autonomous Agents. </title> <booktitle> Lecture Notes in Artificial Intelligence, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Negotiation has been examined under a game-theoretic approach in which every agent knows all relevant information about other agents [ Genesereth et al., 1986, Kraus and Wilkenfeld, 1990, Zlotkin and Rosenschein, 1991 ] and under conditions where agents are hostile and completely unwilling to share private information <ref> [ Sycara, 1988 ] </ref> . Various points along the cooperation/hostility continuum are examined in [ Zlotkin and Rosenschein, 1990, Zlotkin and Rosenschein, 1991 ] . <p> Various points along the cooperation/hostility continuum are examined in [ Zlotkin and Rosenschein, 1990, Zlotkin and Rosenschein, 1991 ] . Negotiation can occur among peers [ Cammarata et al., 1983, Lander and Lesser, 1991 ] , through a mediator or arbitrator <ref> [ Sycara, 1988, Werkman, 1992 ] </ref> , or hierarchically through an organization [ Davis and Smith, 1983, Durfee and Montgomery, 1990 ] . It can occur at the level of domain problem-solving or at the level of control problem-solving. <p> the yes-no and alternatives policies described by Sen [ Sen and Durfee, 1992 ] or the generate-random-alternatives policy described by Lander [ Lander et al., 1991a ] . 2.4.5 Mediation and Arbitration In many human and some computational conflict-resolution systems, third-party intervention is used to help resolve conflicts among agents <ref> [ Pruitt, 1981, Sycara, 1988, Werkman, 1992 ] </ref> . In mediation, the third party works with the disputants, helping them to reach agreement. In arbitration, the third party listens to arguments from both sides and produces a binding resolution. <p> A mediator or arbitrator can collect information from the negotiation participants without making the information 45 public, provide an objective perspective, suggest proposals, and possibly enforce relaxations when agents will not relax voluntarily. A mediated approach was taken by Sycara in her work on management/labor negotiations <ref> [ Sycara, 1988 ] </ref> . Werkman uses both mediation and arbitration in his DFI system [ Werkman, 1992 ] . These systems are both described below. <p> The mechanisms for achieving this in an equitable way will be described in detail in later chapters. Negotiation to Resolve Goal Conflicts: Negotiation to resolve goal conflicts was explored by Sycara <ref> [ Sycara, 1987, Sycara, 1988 ] </ref> . In this work, the application domain is labor mediation. Sycara's system, PERSUADER, acts as mediator between a company and a union. This is a locally cooperative domain since solution quality is a function of the utilities of independent agents.
Reference: [ Werkman, 1992 ] <author> Werkman, K. </author> <title> Multiple agent cooperative design evaluation using negotiation. </title> <editor> In Gero, J., editor, </editor> <booktitle> Artificial Intelligence in Design '92, </booktitle> <pages> pages 161-180. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1992. </year>
Reference-contexts: knowledge resources ( [ Finin and Wiederhold, 1991, Wiederhold, 1992 ] ) * Knowledge modularity that will support reusability ( [ Neches et al., 1991 ] ) * Communication languages and networking protocols to support distributed agents ( [ Genesereth, 1990 ] ) * Multi-viewpoint, multi-criteria evaluation of solutions ( <ref> [ Sycara, 1987, Werkman, 1992 ] </ref> ) * Formal models of cooperation, negotiation, and consensus ( [ Ephrati and Rosen schein, 1991, Genesereth et al., 1986, Rosenschein and Genesereth, 1985, Zlotkin and Rosenschein, 1990, Zlotkin and Rosenschein, 1991 ] ) * Computational models of cooperation and negotiation ( [ Adler et <p> Various points along the cooperation/hostility continuum are examined in [ Zlotkin and Rosenschein, 1990, Zlotkin and Rosenschein, 1991 ] . Negotiation can occur among peers [ Cammarata et al., 1983, Lander and Lesser, 1991 ] , through a mediator or arbitrator <ref> [ Sycara, 1988, Werkman, 1992 ] </ref> , or hierarchically through an organization [ Davis and Smith, 1983, Durfee and Montgomery, 1990 ] . It can occur at the level of domain problem-solving or at the level of control problem-solving. <p> the yes-no and alternatives policies described by Sen [ Sen and Durfee, 1992 ] or the generate-random-alternatives policy described by Lander [ Lander et al., 1991a ] . 2.4.5 Mediation and Arbitration In many human and some computational conflict-resolution systems, third-party intervention is used to help resolve conflicts among agents <ref> [ Pruitt, 1981, Sycara, 1988, Werkman, 1992 ] </ref> . In mediation, the third party works with the disputants, helping them to reach agreement. In arbitration, the third party listens to arguments from both sides and produces a binding resolution. <p> A mediated approach was taken by Sycara in her work on management/labor negotiations [ Sycara, 1988 ] . Werkman uses both mediation and arbitration in his DFI system <ref> [ Werkman, 1992 ] </ref> . These systems are both described below. <p> The work below describes approaches to concurrent engineering that bring relevant information and constraints to the forefront at appropriate points in the development cycle. Cooperative Design Evaluation: Werkman has developed a negotiation-based approach to multi-perspective evaluation of designs <ref> [ Werkman, 1992 ] </ref> . The Designer Fabricator Interpreter (DFI) system assists a human engineer by selecting and critiquing alternatives from a set of steel beam-to-column building connection designs. The agents in the system parallel human design, manufacturing, and assembly critics. <p> Notice that there are no agents in this system that are redundantly solving the same problem. We don't have two pump designers for example. In globally cooperative systems, redundancy is usually not a desirable attribute, but there are situations where it is useful such as in multiperspective reasoning <ref> [ Werkman, 1992 ] </ref> . We will see an example of redundant problem solving in Chapter 7 where two agents are negotiating a buy/sell contract.
Reference: [ Wiederhold, 1992 ] <author> Wiederhold, G. </author> <title> Intelligent integration of diverse information. </title> <booktitle> In Proceedings of the ISMM International Conference on Information and Knowledge Management, </booktitle> <pages> pages 1-7, </pages> <address> Baltimore, MD, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Major areas of investigation include: * Ontologies, knowledge representations, and languages (interlingua) that support shared knowledge semantics among agents ( [ Finin and Wiederhold, 1991, Guha and Lenat, 1990, Neches et al., 1991 ] ) * Integration of heterogeneous databases and knowledge resources ( <ref> [ Finin and Wiederhold, 1991, Wiederhold, 1992 ] </ref> ) * Knowledge modularity that will support reusability ( [ Neches et al., 1991 ] ) * Communication languages and networking protocols to support distributed agents ( [ Genesereth, 1990 ] ) * Multi-viewpoint, multi-criteria evaluation of solutions ( [ Sycara, 1987, Werkman, <p> In this section, we discuss two aspects of knowledge management: knowledge sharing and knowledge consistency. Knowledge Sharing : When agents interact, they must be able to understand each other, i.e., they must have a mutual understanding of interacting objects and events <ref> [ Finin and Wiederhold, 1991, Wiederhold, 1992 ] </ref> . In some kinds of multiagent systems, it is possible that all agents will "speak the same language", and understanding each other will be a trivial matter. However, in heterogeneous or reusable-agent systems, shared languages cannot be taken for granted.
Reference: [ Winner, 1988 ] <author> Winner, R. </author> <title> The role of concurrent engineering in weapons system ac quisition. </title> <type> Technical Report IDA-R-338, </type> <institution> Institute for Defense Analysis, </institution> <address> Alexandria, VA, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: In <ref> [ Winner, 1988 ] </ref> , concurrent engineering is defined: Concurrent Engineering (CE) is a systematic approach to the integrated, concurrent design of products and their related processes, including manufacture and support.
Reference: [ Yokoo et al., 1992 ] <author> Yokoo, M., Durfee, E. H., Ishida, T., and Kuwabara, K. </author> <title> Dis tributed constraint satisfaction for formalizing distributed problem solving. </title> <booktitle> In Proceedings of the Twelfth International Conference on Distributed Computing Systems, </booktitle> <address> Yokohama, Japan, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: In <ref> [ Yokoo et al., 1992 ] </ref> , Yokoo looks at developing formal representations for various categories of distributed-search algorithms for constraint-directed search: distributed constraint satisfaction, distributed constraint optimization, distributed constraint optimization with local state-space search, and distributed constraint optimization with local and/or-graph search. <p> Several mechanisms for determining the order of attribute instantiation (variable ordering), the order in which potential values are assigned to attributes (value ordering), and the order of agent invocation in distributed systems have been explored in <ref> [ Sycara et al., 1991, Yokoo et al., 1992 ] </ref> . A heuristic satisficing algorithm can only be as good as the heuristics that are used. Currently, most heuristics are developed intuitively|someone decides that it seems reasonable to apply a particular rule to a particular situation.
Reference: [ Zlotkin and Rosenschein, 1989 ] <author> Zlotkin, G. and Rosenschein, J. S. </author> <title> Negotiation and task sharing among autonomous agents in cooperative domains. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 912-917, </pages> <address> Detroit, MI, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: These models have some highly desirable properties such as the ability to guarantee convergence, pareto-optimality, or equilibrium (where 35 no agent can benefit from lying). For example, Zlotkin and Rosenschein describe a formal model of negotiation in <ref> [ Zlotkin and Rosenschein, 1989 ] </ref> that can be used to guarantee the selection of pareto-optimal, utility-maximizing solutions from a set of potential solutions. <p> This is obviously a highly restricted case but does present some initial insights into what information is required for negotiating the mutual selection of acceptable solutions and where the information requirements are likely to break down. Negotiation to Select Pareto-Optimal Solutions: Zlotkin and Rosenschein describe a negotiation paradigm in <ref> [ Zlotkin and Rosenschein, 1989 ] </ref> that can be used to guarantee the selection of pareto-optimal solutions from a set of locally evaluated potential solutions. The paradigm is motivated with "The Postmen Problem" in which two agents have to deliver letters to addresses on a city map.
Reference: [ Zlotkin and Rosenschein, 1990 ] <author> Zlotkin, G. and Rosenschein, J. S. </author> <title> Negotiation and conflict resolution in non-cooperative domains. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 100-105, </pages> <address> Boston, Massachusetts, </address> <month> July </month> <year> 1990. </year>
Reference-contexts: The term "cooperative" has been defined in different ways with respect to multiagent systems. It is sometimes used to mean a system of agents that have completely separate local goals and that interact only when interaction can potentially further those goals <ref> [ Rosenschein and Genesereth, 1985, Zlotkin and Rosenschein, 1990 ] </ref> . An example of this is a consumer/producer system in which some agents need to acquire resources and other agents have resources available to sell. <p> Various points along the cooperation/hostility continuum are examined in <ref> [ Zlotkin and Rosenschein, 1990, Zlotkin and Rosenschein, 1991 ] </ref> . <p> We envision the evolutionary development of CR strategies and protocols such as those proposed by Klein [ Klein, 1991 ] , Khedro [ Khedro and Genesereth, 1993 ] , and Zlotkin <ref> [ Zlotkin and Rosenschein, 1990 ] </ref> that have useful 183 properties of completeness and convergence and the incorporation of those strategies into systems as options to be selected when the appropriate problem characteristics exist.
Reference: [ Zlotkin and Rosenschein, 1991 ] <author> Zlotkin, G. and Rosenschein, J. S. </author> <title> Cooperation and conflict resolution via negotiation among autonomous agents in noncooperative domains. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 21(6) </volume> <pages> 1317-1324, </pages> <month> November/December </month> <year> 1991. </year>
Reference-contexts: Various points along the cooperation/hostility continuum are examined in <ref> [ Zlotkin and Rosenschein, 1990, Zlotkin and Rosenschein, 1991 ] </ref> . <p> However, when solutions are expensive to generate, mechanisms that lead to efficient pruning of the search space (such as assimilating information about the local search spaces of other agents) are preferable to mechanisms that allow for detailed comparison of generated alternatives. Non-Cooperative Models: In <ref> [ Zlotkin and Rosenschein, 1991 ] </ref> , Zlotkin and Rosen-schein present the Unified Negotiation Protocol (UNP) for agents in non-cooperative domains: domains in which there may not be any benefit to cooperation. <p> Klein [ Klein, 1991 ] has done some initial work on identifying the characteristics of specific conflict situations and associating them with resolution procedures. The formal models of Zlotkin and Rosenschein <ref> [ Zlotkin and Rosenschein, 1991 ] </ref> offer some preliminary insights into types of cooperation that are feasible in particular situations. There is much work to be done however both in identifying the important features of problems and agents and in mapping those features to appropriate problem-solving strategies.
References-found: 88

