URL: http://www.cs.uni-bonn.de/~daniel/docs/MultiplicationBySquareIsChepOverGF2_960326.ps.gz
Refering-URL: http://www.cs.uni-bonn.de/~daniel/DANIELliteratur.html
Root-URL: http://cs.uni-bonn.de
Email: daniel@cs.bonn.edu  
Title: Multiplication by a Square is Cheap over F  
Author: Daniel Reischert 
Address: Romerstrae 164, D-53117 Bonn, Germany  
Affiliation: Universitat Bonn, Institut fur Informatik II,  
Date: March 22, 1996  
Pubnum: 2  
Abstract: A couple of important algorithms over F 2 are based on computational steps of the form w(x) u(x) v(x) 2 . When using ordinary polynomial arithmetic, there is a rather obvious way of speeding this up by combining squaring and multiplication. We present a different technique that also speeds up the asymptotically fast case. Typical applications are polynomial division and distinct degree factorization in F 2 [x]. In the latter case, further improvement can be achieved by combining several modular steps of the form v i v 2 i1 mod f . Our practical experience shows that this new method reduces the running time by about 70% for degrees above 10 000. Furthermore, this method is well suited for parallel computation and can be generalized to any finite field F q , which is particularly interesting for small q.
Abstract-found: 1
Intro-found: 1
Reference: [AhoHopUll74] <author> Aho, A. V., Hopcroft, J. E., and Ullman, J. D., </author> <title> "The Design and Analysis of Computer Algorithms," </title> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <month> Mas-sachusetts </month> <year> (1974). </year>
Reference-contexts: We are interested in the main part of the division algorithm described above, i. e. the fast calculation of the inverse of a polynomial. The basic idea and a description of the general case can be found in <ref> [AhoHopUll74] </ref>. To simplify matters here, let n be a power of 2.
Reference: [Can89] <author> Cantor, D. G., </author> <title> "On Arithmetical Algorithms over Finite Fields," </title> <journal> Journal of Combinatorial Theory A 50, </journal> <pages> pp. </pages> <month> 285-300 </month> <year> (1989). </year>
Reference-contexts: A substantial acceleration can be obtained by an idea of divide-and-conquer originated by Karatsuba and Ofman. Recursive application of this method leads to a running time of O (n 1:585 ). 2.2 Asymptotically Fast Algorithms Cantor describes in <ref> [Can89] </ref> a multiplication algorithm over F q (q = p k ), which needs O (n (log n) log p (p (p+1)=2) ) operations, where the constants in the "big-O" depend upon q. Asymptotically slightly faster are the multiplication algorithms which need O (n log n log log n) operations.
Reference: [CanZas81] <author> Cantor, D. G., and Zassenhaus, H., </author> <title> "A New Algorithm for Factoring Polynomials over Finite Fields," </title> <journal> Math. Comp. </journal> <volume> 36, </volume> <pages> pp. </pages> <note> 587-592 (1981). </note> <author> [GatSho92] von zur Gathen, J., and Shoup, V., </author> <title> "Computing Frobenius Maps and Factoring Polynomials," </title> <booktitle> Comp. Complexity 2, </booktitle> <pages> pp. </pages> <month> 187-224 </month> <year> (1992). </year>
Reference-contexts: Cantor and Zassenhaus describe in <ref> [CanZas81] </ref>, how to divide this task into three steps, square-free factorization, distinct degree factorization and equal degree factorization. Since in the meantime this algorithm has become generally known, we do not discuss it here as a whole but consider only the second step in detail.
Reference: [KalSho94] <author> Kaltofen, E., and Shoup, V., </author> <title> "Subquadratic-Time Factoring of Polynomials over Finite Fields," </title> <note> unpublished manuscript (1994). </note>
Reference-contexts: Since the reduction of v 2 i1 modulo f includes a step of the form w u v 2 , we can save some transformations, again, leading to a factor of 9 5 asymptotically. But there is even a better way. In [GatSho92] and <ref> [KalSho94] </ref>, von zur Gathen, Shoup, and Kaltofen describe their idea of using only a wide-meshed raster of v i . Consequently, it is unnecessary to calculate all v i , and we have the chance of combining several steps in (2). <p> In section 5, we have a closer look at the distinct degree factorization in F 2 [x] considering the idea of "baby steps / giant steps" as described in [GatSho92] and <ref> [KalSho94] </ref>. A generalization to F q is briefly discussed in section 6. <p> Therefore, collecting some candidates by multiplication and calcu-lating one gcd only from time to time will accelerate this procedure enormously. But the idea of von zur Gathen and Shoup in [GatSho92] and Kaltofen and Shoup in <ref> [KalSho94] </ref> is even better. <p> By the use of techniques for fast multi-point polynomial evaluation these gcd computations can be performed efficiently. See [GatSho92] and <ref> [KalSho94] </ref> for further details. The cited papers suggest calculating the "giant steps" from v jt to v jt+t by modular composition in the case of large finite fields.
Reference: [Rei95] <author> Reischert, D., </author> <title> "Schnelle Multiplikation von Polynomen uber GF(2) und Anwendungen," </title> <type> diploma thesis, </type> <institution> Universitat Bonn (1995). </institution>
Reference-contexts: In <ref> [Rei95] </ref>, the four algorithms described above are implemented and examined for the case q = 2.
Reference: [Sch77] <author> Schonhage, A., </author> <title> "Schnelle Multiplikation von Polynomen uber Korpern der Charakteristik 2," </title> <journal> Acta Informatica 7, </journal> <pages> pp. </pages> <month> 395-398 </month> <year> (1977). </year>
Reference-contexts: Asymptotically slightly faster are the multiplication algorithms which need O (n log n log log n) operations. One widely known is Schonhage's and Strassen's multiplication algorithm for long integers presented in [SchStr71], which can easily be transfered to polynomials over F q , p 6= 2. Schonhage shows in <ref> [Sch77] </ref> how to achieve this time bound in the case p = 2, too.
Reference: [SchGroVet94] <author> Schonhage, A., Grotefeld, A. F. W., and Vetter, E., </author> <title> "Fast Algorithms. </title>
Reference-contexts: The portable cross compiler "tpc" translates sources written in TPAL to C-code, which is especially efficient with regard to memory management. It profits from the principle of "locality" as included in the concept of TP. See <ref> [SchGroVet94] </ref> for further details about TP. Some time measurements concerning our implementation of multiplication algorithms were performed on a SPARC 10/41 at 40 MHz and are presented in the following table.
References-found: 7

