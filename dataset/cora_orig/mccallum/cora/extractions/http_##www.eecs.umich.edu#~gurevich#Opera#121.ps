URL: http://www.eecs.umich.edu/~gurevich/Opera/121.ps
Refering-URL: http://www.eecs.umich.edu/~gurevich/annotated.html
Root-URL: http://www.cs.umich.edu
Email: sdexter@eecs.umich.edu)  pdoyle@cs.stanford.edu)  gurevich@eecs.umich.edu)  
Title: Gurevich Abstract State Machines and Schonhage Storage Modification Machines  
Author: Scott Dexter Patrick Doyle Yuri Gurevich 
Address: USA  USA  USA  
Affiliation: (University of Michigan,  (Stanford University,  (University of Michigan,  
Abstract: We demonstrate that Schonhage storage modification machines are equivalent, in a strong sense, to unary abstract state machines. We also show that if one extends the Schonhage model with a pairing function and removes the unary restriction, then equivalence between the two machine models survives. 
Abstract-found: 1
Intro-found: 1
Reference: [Blass and Gurevich] <author> Blass, A., and Gurevich, Y.: </author> <title> "Evolving algebras and linear time hierarchy"; Proc. </title> <booktitle> of IFIP Congress 94, </booktitle> <volume> vol. I, </volume> <publisher> Elsevier (1994), </publisher> <pages> 383-390. </pages>
Reference: [Gurevich 91] <author> Gurevich, Y.: </author> <title> "Evolving algebras: An attempt to discover semantics"; Bulletin of European Assoc. for Theor. </title> <journal> Computer Science, </journal> <volume> no. 43, </volume> <month> Feb. </month> <year> 1991, </year> <pages> 264-284. </pages> <note> A slightly revised version appeared in "Current Trends in Theoretical Computer Science", </note> <editor> Eds. G. Rozenberg and A. Salomaa, </editor> <publisher> World Scientific, </publisher> <year> 1993, </year> <pages> 266-292. </pages>
Reference-contexts: We then extend this result to show that when we extend the Schonhage machine model with an additional pairing function we may remove the unary restriction on the abstract state machine model without violating equivalence. The notion of "real time" computing has changed since the time of Schonhage's work. <ref> [Gurevich 91] </ref> defines the notion of "lock-step" as an alternative to Schonhage's notion of real time. For the purpose of this paper, the rather limited definition of lock-step simulation we present below suffices.
Reference: [Gurevich 95] <author> Gurevich, Y.: </author> <title> "Evolving algebras 1993: Lipari guide"; Specification and Validation Methods, </title> <editor> Ed. E. Boerger, </editor> <publisher> Oxford University Press (1995), </publisher> <pages> 9-36. </pages>
Reference-contexts: a Schonhage machine is a sequence of states such that each state is computed from the previous state by executing the previous state's current instruction. 283Dexter S., Doyle P., Gurevich Y.: Gurevich Abstract State Machines and Schoenhage ... 3 Abstract State Machines An abstract state machine A (described fully in <ref> [Gurevich 95] </ref>) is given by a signature, a program, and an initial state. For the purposes of this paper, we restrict our attention to sequential abstract state machines without external functions. The signature (or vocabulary) of A is a finite collection of function names, each with a fixed arity. <p> The last means that the nullary function (or distinguished element) f belongs to V . We assume that every ASM has the universe Modes = fInitial; Working; Finalg in its vocabulary; the distinguished element Mode holds the current mode of the program. The ASM model <ref> [Gurevich 95] </ref> does not include input/output conventions, allowing users some freedom. Here we adopt the following conventions. Input is a binary sequence.
Reference: [Kolmogorov 53] <author> Kolmogorov, A. N.: </author> <title> "On the notion of an algorithm";Uspekhi Mat. </title> <journal> Nauk, </journal> <volume> 8, 4 (1953), </volume> <pages> 175-176. </pages>
Reference-contexts: 1 Introduction Schonhage introduced storage modification machines (Schonhage machines) in [Schonhage 70] (and expanded them in [Schonhage 80]) as a general model of computation. Although developed independently, Schonhage's model generalizes an earlier model presented by Kolmogorov in <ref> [Kolmogorov 53] </ref> and explained in [Kolmogorov and Uspenskii 63]. In both cases, the goal was to provide a machine model flexible enough to simulate the operation of arbitrary sequential algorithms "in real time." The notion of real-time simulation is defined in [Schonhage 80].
Reference: [Kolmogorov and Uspenskii 63] <author> Kolmogorov, A. N. and Uspenskii, V. A.: </author> <title> "On the definition of an algorithm"; AMS Tranlations 2nd Series, </title> <booktitle> 29 (1963), </booktitle> <pages> 217-245. </pages>
Reference-contexts: 1 Introduction Schonhage introduced storage modification machines (Schonhage machines) in [Schonhage 70] (and expanded them in [Schonhage 80]) as a general model of computation. Although developed independently, Schonhage's model generalizes an earlier model presented by Kolmogorov in [Kolmogorov 53] and explained in <ref> [Kolmogorov and Uspenskii 63] </ref>. In both cases, the goal was to provide a machine model flexible enough to simulate the operation of arbitrary sequential algorithms "in real time." The notion of real-time simulation is defined in [Schonhage 80].
Reference: [Schonhage 70] <author> Schonhage, A.: </author> <title> "Universelle Turing Speicherung"; Automatentheorie und Formale Sprachen, </title> <booktitle> Bibliogr. Institut, Mannheim (1970), </booktitle> <pages> 369-383. </pages>
Reference-contexts: 1 Introduction Schonhage introduced storage modification machines (Schonhage machines) in <ref> [Schonhage 70] </ref> (and expanded them in [Schonhage 80]) as a general model of computation. Although developed independently, Schonhage's model generalizes an earlier model presented by Kolmogorov in [Kolmogorov 53] and explained in [Kolmogorov and Uspenskii 63].
Reference: [Schonhage 80] <author> Schonhage, A.: </author> <title> "Storage modification machines"; SIAM J. </title> <booktitle> Computing, </booktitle> <month> 9 </month> <year> (1980), </year> <month> 490-508. </month> <title> Acknowledgements The work of Yuri Gurevich has been partially supported by NSF and ONR grants. </title> <editor> 303Dexter S., Doyle P., Gurevich Y.: </editor> <title> Gurevich Abstract State Machines and Schoenhage </title> ... 
Reference-contexts: 1 Introduction Schonhage introduced storage modification machines (Schonhage machines) in [Schonhage 70] (and expanded them in <ref> [Schonhage 80] </ref>) as a general model of computation. Although developed independently, Schonhage's model generalizes an earlier model presented by Kolmogorov in [Kolmogorov 53] and explained in [Kolmogorov and Uspenskii 63]. <p> In both cases, the goal was to provide a machine model flexible enough to simulate the operation of arbitrary sequential algorithms "in real time." The notion of real-time simulation is defined in <ref> [Schonhage 80] </ref>. In this paper we confirm the thesis in [Blass and Gurevich 94] that Schonhage's storage modification machines are lock-step equivalent (defined below) to unary (i.e. containing only nullary and unary functions) sequential Gurevich abstract state machines (ASMs) without external functions. <p> We use sans serif text to indicate abstract state machine code; Courier indicates Schonhage machine code. 2 Storage Modification Machines A Schonhage machine (described fully in <ref> [Schonhage 80] </ref>) consists of a dynamic data structure (called a structure), combined with a finite control program that manipulates the structure while reading an input string and writing to an output string.
References-found: 7

