URL: http://www.cs.bu.edu/techreports/96-014-tcp-boston.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: best@cs.bu.edu  kgtjan@cs.bu.edu  
Phone: Tel: (617) 353-9726  
Title: TCP Boston A Fragmentation-tolerant TCP Protocol for ATM Networks  
Author: Azer Bestavros Gitae Kim 
Keyword: ATM networks; TCP/IP; Adaptive Information Dispersal Algorithm; congestion control; performance evaluation.  
Note: This work has been partially funded by NSF grant CCR-9308344.  
Address: Boston, MA 02215  
Affiliation: Computer Science Department Boston University  
Abstract: The popularity of TCP/IP coupled with the premise of high speed communication using Asynchronous Transfer Mode (ATM) technology have prompted the network research community to propose a number of techniques to adapt TCP/IP to ATM network environments. ATM offers Available Bit Rate (ABR) and Unspecified Bit Rate (UBR) services for best-effort traffic, such as conventional file transfer. However, recent studies have shown that TCP/IP, when implemented using ABR or UBR, leads to serious performance degradations, especially when the utilization of network resources (such as switch buffers) is high. Proposed techniques| switch-level enhancements, for example|that attempt to patch up TCP/IP over ATMs have had limited success in alleviating this problem. The major reason for TCP/IP's poor performance over ATMs has been consistently attributed to packet fragmentation, which is the result of ATM's 53-byte cell-oriented switching architecture. In this paper, we present a new transport protocol, TCP Boston, that turns ATM's 53-byte cell-oriented switching architecture into an advantage for TCP/IP. At the core of TCP Boston is the Adaptive Information Dispersal Algorithm (AIDA), an efficient encoding technique that allows for dynamic redundancy control. AIDA makes TCP/IP's performance less sensitive to cell losses, thus ensuring a graceful degradation of TCP/IP's performance when faced with congested resources. In this paper, we introduce AIDA and overview the main features of TCP Boston. We present detailed simulation results that show the superiority of our protocol when compared to other adaptations of TCP/IP over ATMs. In particular, we show that TCP Boston improves TCP/IP's performance over ATMs for both network-centric metrics (e.g., effective throughput) and application-centric metrics (e.g., response time). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> ANSI. </author> <title> AAL5 ANew High Speed Data Transfer AAL. </title> <note> In ANSI T1S1.5 91-449. </note> <month> November </month> <year> 1991. </year>
Reference-contexts: The poor performance of TCP over ATMs is mainly due to packet fragmentation. Fragmentation occurs when an IP packet flows into an ATM virtual circuit through the AAL5 (ATM Adaptation Layer 5), which is the emerging, most common AAL for TCP/IP <ref> [1] </ref> over ATMs. AAL5 acts as an interface between the IP and ATM layers. It is responsible for the task of dividing TCP/IP's large data units (i.e., the TCP/IP packets) into sets of 48-byte data units called cells. <p> The output buffer is managed using FIFO scheduling, and cells in input ports are served in a round-robin fashion to ensure fairness. In our simulator, the ATM Adaptation Layer (AAL) implements the basic functions found in AAL5, namely fragmentation and reconstruction of IP packets <ref> [1, 15] </ref>. AAL divides IP packets into 48-byte units for transmission as ATM cells, and appends 0 to 47 bytes of padding to the end of data. <p> Since ns is originally designed to support packet-switched network environments, major modifications were necessary to allow it to support ATM-like network environments. In particular, the essential functions of AAL5 were added to simulate the handling of IP packets (i.e., fragmentation and reassembly of IP packets) <ref> [1, 15] </ref>. Also, the link layer of ns has been modified to include basic functions of ATM switches and virtual circuit management.
Reference: [2] <author> G. Armitage and K. Adams. </author> <title> Packet Reassembly During Cell Loss. </title> <journal> IEEE Network Mag., </journal> <volume> 7(5) </volume> <pages> 26-34, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Examples include the Selective Cell Discard (SCD) 2 <ref> [2] </ref> and the Early Packet Discard (EPD) [24]. In SCD, once a cell c is dropped at a switch, all subsequent cells from the packet to which c belongs are dropped by the switch.
Reference: [3] <author> R. Atkinson. </author> <title> Default IP MTU for use over ATM AAL5. </title> <booktitle> In RFC 1626. </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: Three different packet sizes were selected to reflect maximum transfer unit (MTU) of popular standards: 512 bytes for IP packets, 1,518 bytes for Ethernet, 4,352 bytes for FDDI link standards [20], and 9,180 bytes which is the recommended packet size for IP over ATM <ref> [3] </ref>. The values for the TCP window size are 8 kB, 16 kB, 32 kB, and 64 kB. Buffer sizes used for the ATM switch are 64, 256, 512, 1,000, 2,000, and 4,000 cells. The LBNL Network Simulator (ns) [14] was used for both packet-switched and ATM network simulations.
Reference: [4] <author> Azer Bestavros. </author> <title> IDA-based disk arrays. </title> <type> Technical Memorandum 45312-890707-01TM, </type> <institution> AT&T, Bell Laboratories, Department 45312, </institution> <address> Holmdel, NJ, </address> <month> July </month> <year> 1989. </year> <month> 24 </month>
Reference-contexts: Rabin [23], which has been previously shown to be a sound mechanism that considerably improves the performance 3 For a smoother presentation flow, studies related to ours are discussed throughout the paper, rather than in a specific section. 3 of I/O systems, parallel/distributed storage devices <ref> [4] </ref>, and real-time broadcast disks [7]. The use of IDA for efficient routing in parallel architectures has also been exploited in [19]. To understand how IDA works, consider a segment S of a data object to be transmitted. Let S consist of m fragments (hereinafter called cells).
Reference: [5] <author> Azer Bestavros. SETH: </author> <title> A VLSI chip for the real-time information dispersal and retrieval for security and fault-tolerance. </title> <booktitle> In Proceedings of ICPP'90, The 1990 International Conference on Parallel Processing, </booktitle> <address> Chicago, Illinois, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Figure 1 illustrates the dispersal, communication, and reconstruction of an object using IDA. Both the dispersal and reconstruction operations can be performed in real-time. This was demonstrated in <ref> [5] </ref>, where an architecture and a CMOS implementation of a VLSI chip that implements IDA was presented. 4 The dispersal and reconstruction operations are simple linear transformations using irreducible polynomial arithmetic. 5 The dispersal operation shown in figure 2 amounts to a matrix multiplica 4 The chip (called SETH) has been <p> The performance of the chip was measured to be about 1 Mbps. By using proper pipelining, more elaborate designs, and a more advanced VLSI fabrication process, this figure can be boosted significantly. 5 For more details, we refer the reader to <ref> [23, 5] </ref>. 4 tion (performed in the domain of a particular irreducible polynomial) that transforms the m cells of the original file into the N cells to be dispersed.
Reference: [6] <author> Azer Bestavros. </author> <title> An adaptive information dispersal algorithm for time-critical reliable communication. </title> <editor> In Ivan Frisch, Manu Malek, and Shivendra Panwar, editors, </editor> <title> Network Management and Control, Volume II. </title> <publisher> Plenum Publishing Corporation, </publisher> <address> New York, New York, </address> <year> 1994. </year>
Reference-contexts: The IDA approach is radically different in that redundancy is added uniformly; there is simply no distinction between data and parity. It is this feature that makes it possible to scale the amount of redundancy used in IDA. Indeed, this is the basis for Adaptive IDA (AIDA) <ref> [6] </ref>. Using AIDA, a bandwidth allocation operation is inserted after the dispersal operation but prior to transmission as shown in figure 3. This bandwidth allocation step allows the system to scale the amount of redundancy used in the transmission. <p> This integration of redundancy control and flow control in a reliable transport protocol 6 could be quite valuable for real-time communication as reported in <ref> [6] </ref>. The second solution above suggests the use of temporal redundancy to recover from erasures. Two possibilities exist|each representing an extreme in terms of the functionality required at the sender and receiver ends.
Reference: [7] <author> Azer Bestavros. </author> <title> AIDA-based real-time fault-tolerant broadcast disks. </title> <booktitle> In Proceedings of RTAS'96: The 1996 IEEE Real-Time Technology and Applications Symposium, </booktitle> <address> Boston, Massachusetts, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: Rabin [23], which has been previously shown to be a sound mechanism that considerably improves the performance 3 For a smoother presentation flow, studies related to ours are discussed throughout the paper, rather than in a specific section. 3 of I/O systems, parallel/distributed storage devices [4], and real-time broadcast disks <ref> [7] </ref>. The use of IDA for efficient routing in parallel architectures has also been exploited in [19]. To understand how IDA works, consider a segment S of a data object to be transmitted. Let S consist of m fragments (hereinafter called cells).
Reference: [8] <author> A. Bianco. </author> <title> Performance of the TCP Protocol over ATM Networks. </title> <booktitle> In Proceedingds of the 3rd International Conference on Computer Communications and Networks, </booktitle> <pages> pages 170-177, </pages> <address> San Francisco, CA, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: However, recent studies <ref> [8, 17, 24] </ref> have shown that TCP/IP, when implemented over ATM networks, is susceptible to serious performance limitations. The poor performance of TCP over ATMs is mainly due to packet fragmentation.
Reference: [9] <author> Ernst Biersack. </author> <title> Performance Evaluation of Forward Error Correction in ATM Networks. </title> <journal> Comm. of ACM, </journal> <pages> pages 248-257, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: An example of the use of this approach is the study in <ref> [9] </ref>, which suggests the use of Forward Error Correction (FEC) for real-time, unreliable video communication over ATM. In that study, FEC was shown to allow the trading of bandwidth for timeliness. <p> the simulation parameters are preset), we rely on a simple, yet general formulation of the wasted bandwidth in a multi-hop network, based on measurements obtained from simulating a network with a single congested switch (similar to the one used earlier in this section, and the ones used in [24] and <ref> [9] </ref>). The metric to be used in our analysis of the wasted bandwidth in a multi-hop network is the Byte-Hop product (BHops) [13]. When data (packet, cell, etc.) of size n bytes travels for h hops, its Byte-Hop product (i.e., the bandwidth consumed by the data), is n fi h.
Reference: [10] <author> Lawrence Brakmo, Sean O'Maley, and Larry Peterson. </author> <title> TCP Vegas: New Techniques for Congestion Detection and Avoidance. </title> <type> Technical Report TR 94 04, </type> <institution> The University of Arizona Computer Science Department, </institution> <address> Tucson, AZ 85721, </address> <month> Febrary </month> <year> 1994. </year>
Reference-contexts: An example of such an algorithm is the one used in TCP Vegas, which provides better congestion forecast by detecting the incipient stages of congestion before losses start to accrue (rather than using the loss of segments as a signal of congestion) <ref> [10] </ref>.
Reference: [11] <author> Thomas Chen and Stephen Liu. </author> <title> ATM Switching System. </title> <publisher> Artech House, Inc., </publisher> <address> 685 Canton St., Norwood, Ma 02062, </address> <year> 1995. </year>
Reference-contexts: This configuration simulates a WAN environment with a radius of 3,000 km and a bottleneck link bandwidth of 1.5 Mbps. The ATM switch is a simple, 16-port output-buffered single-stage switch <ref> [11] </ref>. When the output port is busy, a cell at the input port is queued into the output buffer of the simulated switch. When the output-buffer is full, an incoming cell destined to the output port is dropped.
Reference: [12] <author> Douglass E. Comer. </author> <title> Internetworking with TCP/IP, volume 1. </title> <publisher> Prentice Hall Inc., </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1995. </year>
Reference-contexts: ATM is designed to support a variety of applications with diverse requirements ranging from the real-time constrained delivery of live audio and video, to the best-effort delivery of conventional data such as FTP and email <ref> [12] </ref>. <p> high speed communication using emerging ATM technology have prompted the network research community to propose and implement a number of techniques that adapt TCP/IP to ATM network environments, thus allowing these environments to smoothly integrate (and make use of) currently available TCP-based applications and services without much (if any) modifications <ref> [12] </ref>. However, recent studies [8, 17, 24] have shown that TCP/IP, when implemented over ATM networks, is susceptible to serious performance limitations. The poor performance of TCP over ATMs is mainly due to packet fragmentation.
Reference: [13] <author> Petter B. Danzig, Richard S. Hall, and Michael F. Schwartz. </author> <title> A Case for Caching File Objects Inside In-terneworks. </title> <type> Technical Report CU-CS-642-93, </type> <institution> Department of Computer Science, University of Colorado Boulder, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: The metric to be used in our analysis of the wasted bandwidth in a multi-hop network is the Byte-Hop product (BHops) <ref> [13] </ref>. When data (packet, cell, etc.) of size n bytes travels for h hops, its Byte-Hop product (i.e., the bandwidth consumed by the data), is n fi h.
Reference: [14] <author> Sally Floyd. </author> <title> Simulator Tests. </title> <note> Available in ftp://ftp.ee.lbl.gov/papers/simtests.ps.Z. ns is available at http://www-nrg.ee.lbl.gov/nrg., July 1995. </note>
Reference-contexts: The values for the TCP window size are 8 kB, 16 kB, 32 kB, and 64 kB. Buffer sizes used for the ATM switch are 64, 256, 512, 1,000, 2,000, and 4,000 cells. The LBNL Network Simulator (ns) <ref> [14] </ref> was used for both packet-switched and ATM network simulations. To simulate TCP Boston, we modified ns extensively to implement the three main modules (i.e., the Session Management, Segment Management, and Flow Control modules) described in the previous section.
Reference: [15] <author> ATM Forum. </author> <title> ATM User-Network Interface Specification. </title> <publisher> Pretice Hall, Inc, </publisher> <address> Englewood Cliffs, New Jersey 07632, </address> <year> 1993. </year>
Reference-contexts: The output buffer is managed using FIFO scheduling, and cells in input ports are served in a round-robin fashion to ensure fairness. In our simulator, the ATM Adaptation Layer (AAL) implements the basic functions found in AAL5, namely fragmentation and reconstruction of IP packets <ref> [1, 15] </ref>. AAL divides IP packets into 48-byte units for transmission as ATM cells, and appends 0 to 47 bytes of padding to the end of data. <p> Since ns is originally designed to support packet-switched network environments, major modifications were necessary to allow it to support ATM-like network environments. In particular, the essential functions of AAL5 were added to simulate the handling of IP packets (i.e., fragmentation and reassembly of IP packets) <ref> [1, 15] </ref>. Also, the link layer of ns has been modified to include basic functions of ATM switches and virtual circuit management.
Reference: [16] <author> Garth A. Gibson and David A. Patterson. </author> <title> Designing disk arrays for high data reliability. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 17(1-2):4-27, </volume> <month> January/February </month> <year> 1992. </year>
Reference-contexts: Several redundancy-injecting protocols (similar to IDA) have been suggested in the literature. In most of these protocols, redundancy is injected in the form of parity, which is only used for error detection and/or correction purposes <ref> [16] </ref>. The IDA approach is radically different in that redundancy is added uniformly; there is simply no distinction between data and parity. It is this feature that makes it possible to scale the amount of redundancy used in IDA. Indeed, this is the basis for Adaptive IDA (AIDA) [6].
Reference: [17] <author> M. Hassan. </author> <title> Impact of Cell Loss on the Efficiency of TCP/IP over ATM. </title> <booktitle> In Proceedings of the 3rd International Conference on Computer Communications and Networks, </booktitle> <pages> pages 165-169, </pages> <address> San Francisco, CA, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: However, recent studies <ref> [8, 17, 24] </ref> have shown that TCP/IP, when implemented over ATM networks, is susceptible to serious performance limitations. The poor performance of TCP over ATMs is mainly due to packet fragmentation.
Reference: [18] <author> V. Jacobson. </author> <title> Berkeley TCP Evolution from 4.3-Tahoe to 4.3-Reno. </title> <booktitle> In Proceedings of the British Columbia Internet Engineering Task Force, </booktitle> <month> July </month> <year> 1990. </year> <month> 25 </month>
Reference-contexts: This required that our measurements be unaffected by the forward error correction capability provided by AIDA, which is enabled through spatial redundancy. (2) We wanted to compare the performance of TCP Boston with that of other TCP implementations (e.g., TCP Reno <ref> [18] </ref>) with and without switch-level enhancements (e.g., EPD [24]).
Reference: [19] <author> Yuh-Dauh Lyuu. </author> <title> Fast fault-tolerant parallel communication and on-line maintenance using information dispersal. </title> <type> Technical Report TR-19-1989, </type> <institution> Harvard University, Cambridge, Massachusetts, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: The use of IDA for efficient routing in parallel architectures has also been exploited in <ref> [19] </ref>. To understand how IDA works, consider a segment S of a data object to be transmitted. Let S consist of m fragments (hereinafter called cells).
Reference: [20] <author> Sonu Mirchandani and Raman Khanna, </author> <title> editors. FDDI Technology and Applications. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1993. </year>
Reference-contexts: Three different packet sizes were selected to reflect maximum transfer unit (MTU) of popular standards: 512 bytes for IP packets, 1,518 bytes for Ethernet, 4,352 bytes for FDDI link standards <ref> [20] </ref>, and 9,180 bytes which is the recommended packet size for IP over ATM [3]. The values for the TCP window size are 8 kB, 16 kB, 32 kB, and 64 kB. Buffer sizes used for the ATM switch are 64, 256, 512, 1,000, 2,000, and 4,000 cells.
Reference: [21] <author> Kihong Park, Gitae Kim, and Mark E. Crovella. </author> <title> The Effects of Traffic Self-Similarity on TCP Performance. </title> <type> Technical report, </type> <institution> Boston University Computer Science Department, </institution> <year> 1996. </year>
Reference-contexts: Recent studies on network traffic have shown that TCP can generate traffic self-similarity, which in turn causes performance degradation especially when the buffer space is limited <ref> [21] </ref> (i.e., the aggregated TCP traffic can generate bursts that cause uneven flow of traffic, which eventually leads to lower bandwidth utilization under limited 15 switch buffer size, for 64 kB window size size, for 64 kB window size size, for 64 kB window size 16 of switch buffer size, for
Reference: [22] <author> J. Postel. </author> <title> Transmission Control Protocol. </title> <booktitle> In RFC 793. </booktitle> <month> September </month> <year> 1981. </year>
Reference: [23] <author> Michael O. Rabin. </author> <title> Efficient dispersal of information for security, load balancing and fault tolerance. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 36(2) </volume> <pages> 335-348, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: AIDA is an elaboration on the Information Dispersal Algorithm of Michael O. Rabin <ref> [23] </ref>, which has been previously shown to be a sound mechanism that considerably improves the performance 3 For a smoother presentation flow, studies related to ours are discussed throughout the paper, rather than in a specific section. 3 of I/O systems, parallel/distributed storage devices [4], and real-time broadcast disks [7]. <p> The performance of the chip was measured to be about 1 Mbps. By using proper pipelining, more elaborate designs, and a more advanced VLSI fabrication process, this figure can be boosted significantly. 5 For more details, we refer the reader to <ref> [23, 5] </ref>. 4 tion (performed in the domain of a particular irreducible polynomial) that transforms the m cells of the original file into the N cells to be dispersed. <p> TCP Boston integrates a standard TCP/IP protocol (such as Reno or Vegas) with a powerful encoding mechanism based on AIDA (an adaptive version of Rabin's IDA dispersal and reconstruction algorithms <ref> [23] </ref>). We have presented our implementation of TCP Boston and have shown its performance superiority when compared to TCP techniques that are more vulnerable to fragmentation, namely TCP Reno and TCP Reno with EPD switch-level enhancements. Our performance evaluation was done in two steps.
Reference: [24] <author> A. Romanow and S. Floyd. </author> <title> Dynamics of TCP Traffic over ATM Networks. </title> <journal> IEEE Journal on Selected Areas in Communication, </journal> <volume> 13(4) </volume> <pages> 633-641, </pages> <month> May </month> <year> 1995. </year> <month> 26 </month>
Reference-contexts: However, recent studies <ref> [8, 17, 24] </ref> have shown that TCP/IP, when implemented over ATM networks, is susceptible to serious performance limitations. The poor performance of TCP over ATMs is mainly due to packet fragmentation. <p> Examples include the Selective Cell Discard (SCD) 2 [2] and the Early Packet Discard (EPD) <ref> [24] </ref>. In SCD, once a cell c is dropped at a switch, all subsequent cells from the packet to which c belongs are dropped by the switch. <p> Notice that both SCD and EPD require modifications to switch-level software. Moreover, these modifications require the switch-level to be aware of IP packet boundaries|a violation of the layering principle that was deemed unavoidable for performance purposes in <ref> [24] </ref>. The simulation results described in [24] show that both SCD and EPD improve the effective throughput of TCP/IP over ATMs. In particular, it was shown that the effective throughput achievable through the use of EPD approaches that of TCP/IP in the absence of fragmentation. <p> Notice that both SCD and EPD require modifications to switch-level software. Moreover, these modifications require the switch-level to be aware of IP packet boundaries|a violation of the layering principle that was deemed unavoidable for performance purposes in <ref> [24] </ref>. The simulation results described in [24] show that both SCD and EPD improve the effective throughput of TCP/IP over ATMs. In particular, it was shown that the effective throughput achievable through the use of EPD approaches that of TCP/IP in the absence of fragmentation. <p> The rationale that motivates the design of TCP Boston lies in our answer to the following simple question: Could a partial delivery of a packet be useful? Our 2 Also called Partial Packet Discard (PPD) in <ref> [24] </ref>. 2 answer is yes. In other words, the en route loss of one fragment (or more) from a packet does not render the rest of the fragments belonging to that packet useless. TCP Boston manages to make use of such partial information, thus preserving network bandwidth. <p> This required that our measurements be unaffected by the forward error correction capability provided by AIDA, which is enabled through spatial redundancy. (2) We wanted to compare the performance of TCP Boston with that of other TCP implementations (e.g., TCP Reno [18]) with and without switch-level enhancements (e.g., EPD <ref> [24] </ref>). Since these other protocols do not support forward error correction, this feature of TCP Boston had to be turned off. (3) To work properly, the dynamic redundancy control mechanism of TCP Boston requires a congestion avoidance algorithm that provides accurate forecasting of network congestion. <p> topology and the simulation parameters are preset), we rely on a simple, yet general formulation of the wasted bandwidth in a multi-hop network, based on measurements obtained from simulating a network with a single congested switch (similar to the one used earlier in this section, and the ones used in <ref> [24] </ref> and [9]). The metric to be used in our analysis of the wasted bandwidth in a multi-hop network is the Byte-Hop product (BHops) [13].
References-found: 24

