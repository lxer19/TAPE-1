URL: http://www.cs.cornell.edu/Info/Projects/NuPrl/documents/Constable/1stfile.ps
Refering-URL: http://www.cs.cornell.edu/Info/Projects/NuPrl/html/publication.html
Root-URL: http://www.cs.cornell.edu
Title: The Structure of Nuprl's Type Theory  
Author: Robert L. Constable 
Address: Ithaca, NY 14853  
Affiliation: Cornell University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Peter Aczel. </author> <title> An introduction to inductive definitions. </title> <editor> In J. Barwise, editor, </editor> <booktitle> Handbook of Mathematical Logic, </booktitle> <pages> pages 739-782. </pages> <publisher> North-Holland, </publisher> <year> 1977. </year>
Reference: [2] <author> Peter Aczel. </author> <title> The type theoretic interpretation of constructive set theory. </title> <booktitle> In Logic, Methodology and Philosophy of Science VII, </booktitle> <pages> pages 17-49. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1986. </year>
Reference: [3] <author> Stuart F. Allen. </author> <title> A non-type-theoretic semantics for type-theoretic language. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <year> 1987. </year>
Reference-contexts: The first section is a discussion of the uniform syntax of Nuprl 4 terms. The second section considers Allen's semantics <ref> [4, 3] </ref> for Nuprl without recursive types. Mendler [35] provides a semantics for recursive types as well, but it is more involved than what we present here. 15 4.1 Nuprl Term Syntax Following Frege, Church, and Martin-Lof, we take the basic unit of notation to be a term. <p> Before explaining the conditions which make a Nuprl sequent true we shall define a relation H@l, where H is a hypothesis list and l is a list of terms, and we shall define what it is for a sequent to be true at a list of terms. Allen <ref> [3] </ref> calls this pointwise functionality. x 1 :T 1 ,: : :,x n :T n @ t 1 ; : : : ; t n if and only if 8j &lt; n: t j+1 2 T j+1 [t 1 ; : : : ; t j =x 1 ; : :
Reference: [4] <author> Stuart F. Allen. </author> <title> A Non-type-theoretic Definition of Martin-Lof's Types. </title> <booktitle> In Proc. of Second Symp. on Logic in Comp. Sci., </booktitle> <pages> pages 215-224. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1987. </year>
Reference-contexts: The first section is a discussion of the uniform syntax of Nuprl 4 terms. The second section considers Allen's semantics <ref> [4, 3] </ref> for Nuprl without recursive types. Mendler [35] provides a semantics for recursive types as well, but it is more involved than what we present here. 15 4.1 Nuprl Term Syntax Following Frege, Church, and Martin-Lof, we take the basic unit of notation to be a term. <p> We know that equality is decidable and definitions are eliminable. 4.2 Semantics The Nuprl semantics is a variation on that given by Martin-Lof for his type theory and formalized by Stuart Allen (see <ref> [4] </ref>). There are three stages in the semantic specification: the computation system, the type system and the so-called judgement forms.
Reference: [5] <author> R. C. Backhouse, P. Chisholm, G. Malcolm, and E. Saaman. </author> <title> Do-it-yourself type theory (part I). </title> <journal> Formal Aspects of Computing, </journal> <volume> 1 </volume> <pages> 19-84, </pages> <year> 1989. </year>
Reference: [6] <author> M. J. Beeson. </author> <title> Formalizing constructive mathematics: Why and how? In F. </title> <editor> Rich-man, editor, </editor> <booktitle> Constructive Mathematics, Lecture Notes in Mathematics, </booktitle> <volume> Vol. 873, </volume> <pages> pages 146-90. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1981. </year>
Reference-contexts: Similarly, let Z=mod n denote the congruence integers, i.e. the integers with equality taken mod n so that x = y mod n iff n divides (x y). The only difference between Z and Z=mod n is the equality relation on the integer constants. Following Beeson <ref> [6] </ref> we might speak of the constants without an equality relation as a pre-type. Then a type arises by pairing an equality with a pre-type, say hT; Ei where E is an equivalence relation on T .
Reference: [7] <author> M.J. Beeson. </author> <title> Foundations of Constructive Mathematics. </title> <publisher> Springer Berlin, </publisher> <year> 1985. </year>
Reference: [8] <author> U. Berger and H. Schwichtenberg. </author> <title> Program extraction from classical proofs. </title> <editor> In Daniel Leivant, editor, </editor> <booktitle> Logic and Computational Complexity, </booktitle> <pages> pages 77-97. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1994. </year>
Reference: [9] <author> E. Bishop and D. </author> <title> Bridges. Constructive Analysis. </title> <publisher> Springer, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: The explanation given here should make them understandable. 5 Conclusion At the summer school I presented the details of Max Forester's constructive proof of the Intermediate Value Theorem [20] which was taken from Bishop and Bridges <ref> [9] </ref>. I also discussed the stamps problem from the Nuprl 4.2 library. I related this to Sam Buss' account of feasible arithmetic by using the efficient induction tactic 28 (complete nat ind with y at the end of int 1) [31].
Reference: [10] <author> S. Buss. </author> <title> The polynomial hierarchy and intuitionistic bounded arithmetic. In Structure in Complexity Theory, </title> <booktitle> Lecture Notes in Computer Science. </booktitle> <volume> 223, </volume> <pages> pages 77-103. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1986. </year>
Reference: [11] <author> Robert L. Constable. </author> <title> Types in Logic, Mathematics and Programming. </title> <editor> In S. Buss, editor, </editor> <title> Handbook of Proof Theory, </title> <publisher> North Holland, </publisher> <year> 1998. </year>
Reference-contexts: 1 Introduction 1.1 Context After my lectures on this topic were delivered in July 1995 at Marktoberdorf, my colleagues and I made available much more related material both at the Nuprl home page on the World Wide Web ("the Web") (www.cs.cornell.edu/Info/NuPrl/nuprl.html) and in publications [22], some soon to appear <ref> [11] </ref>. At the Web site the thesis of Jackson [31] and the article by Forester [20] are especially relevant to my lecture. Also, the 1986 Nuprl book is now available on line at the Web site as is the Nuprl 4 reference manual and a host of Nuprl libraries. <p> In type theory we allow a different class of predicates | those involving predicative higher-order logic in a sense. This topic is discussed in many articles and books on type theory <ref> [33, 13, 36, 43, 12, 11] </ref> and is beyond the scope of this article, so here we will just assume that the reader is familiar with one account of propositions-as-types or representing logic in type theory. The Nuprl style is to use the type of propositions, denoted P rop. <p> This concept is stratified into P rop i as in Principia Mathematica, and it is related by the propositions-as-types principle to the large types such as T ype. P rop i are indeed considered to be a "large types." (See <ref> [11] </ref> for an extensive discussion of this notion.) For the work we do here we only need the notions of T ype and P rop which we take to be T ype 1 and P rop 1 in the full Nuprl theory. 12 The point of universes or large types is
Reference: [12] <author> Robert L. Constable. </author> <title> Using reflection to explain and enhance type theory. </title> <editor> In Helmut Schwichtenberg, editor, </editor> <booktitle> Proof and Computation, </booktitle> <pages> pages 65-100, </pages> <address> Berlin, </address> <year> 1994. </year> <title> NATO Advanced Study Institute, </title> <booktitle> International Summer School held in Marktoberdorf, </booktitle> <address> Germany, July 20-August 1, </address> <year> 1995, </year> <booktitle> NATO Series F, </booktitle> <volume> Vol. 139, </volume> <publisher> Springer, </publisher> <address> Berlin. </address>
Reference-contexts: In type theory we allow a different class of predicates | those involving predicative higher-order logic in a sense. This topic is discussed in many articles and books on type theory <ref> [33, 13, 36, 43, 12, 11] </ref> and is beyond the scope of this article, so here we will just assume that the reader is familiar with one account of propositions-as-types or representing logic in type theory. The Nuprl style is to use the type of propositions, denoted P rop.
Reference: [13] <author> Robert L. Constable, Stuart F. Allen, H.M. Bromley, W.R. Cleaveland, J.F. Cre-mer, R.W. Harper, Douglas J. Howe, T.B. Knoblock, N.P. Mendler, P. Panan-gaden, James T. Sasaki, and Scott F. Smith. </author> <title> Implementing Mathematics with the Nuprl Development System. </title> <publisher> Prentice-Hall, </publisher> <address> NJ, </address> <year> 1986. </year> <month> 30 </month>
Reference-contexts: In type theory we allow a different class of predicates | those involving predicative higher-order logic in a sense. This topic is discussed in many articles and books on type theory <ref> [33, 13, 36, 43, 12, 11] </ref> and is beyond the scope of this article, so here we will just assume that the reader is familiar with one account of propositions-as-types or representing logic in type theory. The Nuprl style is to use the type of propositions, denoted P rop.
Reference: [14] <author> Thierry Coquand. </author> <title> Metamathematical investigations of a calculus of constructions. </title> <editor> In P. Odifreddi, editor, </editor> <booktitle> Logic and Computer Science, </booktitle> <pages> pages 91-122. </pages> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1990. </year>
Reference: [15] <author> Thierry Coquand and Christine Paulin-Mohring. </author> <title> Inductively defined types, preliminary version. </title> <booktitle> In COLOG '88, International Conference on Computer Logic, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 417, </volume> <pages> pages 50-66. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference: [16] <author> N. G. deBruijn. </author> <title> A survey of the project Automath. In To H.B. </title> <booktitle> Curry: Essays in Combinatory Logic, Lambda Calculus, and Formalism, </booktitle> <pages> pages 589-606. </pages> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference: [17] <author> Peter Dybjer. </author> <title> Inductive sets and families in Martin-Lof's type theory and their set-theoretic semantics. </title> <booktitle> In Proc. of the First Annual Workshop on Logical Frameworks, </booktitle> <pages> pages 280-306, </pages> <address> Sophia-Antipolis, France, </address> <month> June </month> <year> 1990. </year> <title> Programming Methodology Group, </title> <institution> Chamers University of Technology and University of Goteborg. </institution>
Reference: [18] <author> Peter Dybjer. </author> <title> Inductive sets and families in Martin-Lof's type theory and their set-theoretic semantics. </title> <editor> In G. Huet and G. Plotkin, editors, </editor> <booktitle> Logical Frameworks, </booktitle> <pages> pages 280-306. </pages> <publisher> Cambridge University Press, </publisher> <year> 1991. </year>
Reference: [19] <author> Solomon Feferman. </author> <title> A language and axioms for explicit mathematics. </title> <editor> In J. N. Crossley, editor, </editor> <booktitle> Algebra and Logic, Lecture Notes in Mathematics, </booktitle> <volume> Vol. 480, </volume> <pages> pages 87-139. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1975. </year>
Reference: [20] <author> Max B. Forester. </author> <title> Formalizing constructive real analysis. </title> <type> Technical Report TR93-1382, </type> <institution> Computer Science Dept., Cornell University, </institution> <address> Ithaca, NY, </address> <year> 1993. </year>
Reference-contexts: At the Web site the thesis of Jackson [31] and the article by Forester <ref> [20] </ref> are especially relevant to my lecture. Also, the 1986 Nuprl book is now available on line at the Web site as is the Nuprl 4 reference manual and a host of Nuprl libraries. <p> The explanation given here should make them understandable. 5 Conclusion At the summer school I presented the details of Max Forester's constructive proof of the Intermediate Value Theorem <ref> [20] </ref> which was taken from Bishop and Bridges [9]. I also discussed the stamps problem from the Nuprl 4.2 library. I related this to Sam Buss' account of feasible arithmetic by using the efficient induction tactic 28 (complete nat ind with y at the end of int 1) [31].
Reference: [21] <author> J-Y. Girard, P. Taylor, and Y. Lafont. </author> <title> Proofs and Types. </title> <booktitle> Cambridge Tracts in Computer Science, </booktitle> <volume> Vol. 7. </volume> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference: [22] <author> Jason J. Hickey. </author> <title> Objects and theories as very dependent types. </title> <booktitle> In Proceedings of FOOL 3, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: 1 Introduction 1.1 Context After my lectures on this topic were delivered in July 1995 at Marktoberdorf, my colleagues and I made available much more related material both at the Nuprl home page on the World Wide Web ("the Web") (www.cs.cornell.edu/Info/NuPrl/nuprl.html) and in publications <ref> [22] </ref>, some soon to appear [11]. At the Web site the thesis of Jackson [31] and the article by Forester [20] are especially relevant to my lecture.
Reference: [23] <author> C. A. R. Hoare. </author> <title> Notes on data structuring. In Structured Programming. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1972. </year>
Reference-contexts: The type constructors we choose are motivated both by mathematical and computational considerations. So we will see a tight relationship to the notion of type in programming languages. The notes by C.A.R. Hoare, Notes on Data Structuring <ref> [23] </ref>, make the point well. 2.2 Cartesian Products If A and B are types, then so is their product, written A fi B. There will be many formation rules of this form, so we adopt a simple convention for stating them.
Reference: [24] <author> W. Howard. </author> <title> The formulas-as-types notion of construction. In To H.B. </title> <booktitle> Curry: Essays on Combinatory Logic, Lambda-Calculus and Formalism, </booktitle> <pages> pages 479-490. </pages> <publisher> Academic Press, </publisher> <address> NY, </address> <year> 1980. </year>
Reference: [25] <author> Douglas J. Howe. </author> <title> Equality in lazy computation systems. </title> <booktitle> In Proc. of Fourth Symp. on Logic in Comp. Sci., </booktitle> <pages> pages 198-203. </pages> <publisher> IEEE Computer Society, </publisher> <month> June </month> <year> 1989. </year>
Reference: [26] <author> Douglas J. Howe. </author> <title> Reasoning about functional programs in Nuprl. Functional Programming, Concurrency, Simulation and Automated Reasoning, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 693, </volume> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1993. </year> <month> 31 </month>
Reference: [27] <author> Douglas J. Howe. </author> <title> Semantic foundations for embedding HOL in Nuprl. </title> <booktitle> In Pro--ceedings of AMAST'96, </booktitle> <year> 1996. </year> <note> To appear. </note>
Reference: [28] <author> Douglas J. Howe and Scott D. Stoller. </author> <title> An operational approach to combining classical set theory and functional programming languages. </title> <editor> In and J. C. Mitchell M. Hahiya, editor, </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Vol. 789, </volume> <pages> pages 36-55, </pages> <address> New York, </address> <month> April </month> <year> 1994. </year> <booktitle> International Symposium TACS '94, </booktitle> <publisher> Springer, </publisher> <address> Berlin. </address> <note> Theoretical Aspects of Computer Software. </note>
Reference: [29] <author> G. Huet. </author> <title> A uniform approach to type theory. </title> <editor> In G. Huet, editor, </editor> <booktitle> Logical Foundations of Functional Programming, </booktitle> <pages> pages 337-398. </pages> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference: [30] <author> G. P. Huet and B. Lang. </author> <title> Proving and applying program transformations expressed with second-order patterns. </title> <journal> Acta Informatica, </journal> <volume> 11 </volume> <pages> 31-55, </pages> <year> 1978. </year>
Reference-contexts: as universefi : posg natural numberfu : natg variablefv : stringg: We call the i j an index and the f i an index family name. alternatives | calculus with operator names Another representation of terms that is natural is based on using the lambda calculus to define all binding <ref> [30] </ref>. For example, 8x : A: B (x) would be represented as all (x : A: B (x)). And spread (p; u; v: t) would be spread (p; (u; v: t)).
Reference: [31] <author> Paul B. Jackson. </author> <title> Enhancing the Nuprl Proof Development System and Applying it to Computational Abstract Algebra. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <address> Ithaca, NY, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: At the Web site the thesis of Jackson <ref> [31] </ref> and the article by Forester [20] are especially relevant to my lecture. Also, the 1986 Nuprl book is now available on line at the Web site as is the Nuprl 4 reference manual and a host of Nuprl libraries. <p> I also discussed the stamps problem from the Nuprl 4.2 library. I related this to Sam Buss' account of feasible arithmetic by using the efficient induction tactic 28 (complete nat ind with y at the end of int 1) <ref> [31] </ref>. All of this material is now on the Web, and this article should help make it more accessible. 6 Acknowledgments I want to thank Kate Ricks for preparing this manuscript and Karla Consroe and Kate for helping with the Nuprl Web page. 29
Reference: [32] <author> Daniel Leivant. </author> <title> Intrinsic theories and computational complexity. </title> <editor> In Daniel Leivant, editor, </editor> <booktitle> Logic and Computational Complexity, </booktitle> <pages> pages 177-194. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1994. </year>
Reference: [33] <author> Per Martin-Lof. </author> <title> Constructive mathematics and computer programming. </title> <booktitle> In Sixth International Congress for Logic, Methodology, and Philosophy of Science, </booktitle> <pages> pages 153-75. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1982. </year>
Reference-contexts: In type theory we allow a different class of predicates | those involving predicative higher-order logic in a sense. This topic is discussed in many articles and books on type theory <ref> [33, 13, 36, 43, 12, 11] </ref> and is beyond the scope of this article, so here we will just assume that the reader is familiar with one account of propositions-as-types or representing logic in type theory. The Nuprl style is to use the type of propositions, denoted P rop.
Reference: [34] <author> Per Martin-Lof. </author> <title> Intuitionistic Type Theory, Studies in Proof Theory, </title> <booktitle> Lecture Notes. </booktitle> <publisher> Bibliopolis, Napoli, </publisher> <year> 1984. </year>
Reference: [35] <author> P.F. Mendler. </author> <title> Inductive Definition in Type Theory. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <address> Ithaca, NY, </address> <year> 1988. </year>
Reference-contexts: The first section is a discussion of the uniform syntax of Nuprl 4 terms. The second section considers Allen's semantics [4, 3] for Nuprl without recursive types. Mendler <ref> [35] </ref> provides a semantics for recursive types as well, but it is more involved than what we present here. 15 4.1 Nuprl Term Syntax Following Frege, Church, and Martin-Lof, we take the basic unit of notation to be a term.
Reference: [36] <author> B. Nordstrom, K. Petersson, and J. Smith. </author> <title> Programming in Martin-Lof 's Type Theory. </title> <publisher> Oxford Sciences Publication, Oxford, </publisher> <year> 1990. </year>
Reference-contexts: In type theory we allow a different class of predicates | those involving predicative higher-order logic in a sense. This topic is discussed in many articles and books on type theory <ref> [33, 13, 36, 43, 12, 11] </ref> and is beyond the scope of this article, so here we will just assume that the reader is familiar with one account of propositions-as-types or representing logic in type theory. The Nuprl style is to use the type of propositions, denoted P rop.
Reference: [37] <author> Erik Palmgren. </author> <title> On Fixed Point Operators, Inductive Definitions and Universes in Martin-Lof 's Type Theory. </title> <type> PhD thesis, </type> <institution> Uppsala University, Thunbergsvagen 3, S-752, Uppsala, Sweden, </institution> <month> March </month> <year> 1991. </year>
Reference: [38] <author> A. M. Pitts. </author> <title> Operationally-Based Theories of Program Equivalence. </title> <institution> University of Cambridge, </institution> <address> Cambridge, UK, </address> <year> 1995. </year>
Reference: [39] <author> Helmut Schwichtenberg. </author> <title> Computational Content of Proofs. </title> <institution> Mathematisches In-stitut, Universitat Munchen, Munchen, Germany, </institution> <year> 1995. </year> <note> Working material for Marktoberdorf lecture. </note>
Reference: [40] <author> D. Scott. </author> <title> Constructive validity. </title> <editor> In D. Lacombe M. Laudelt, editor, </editor> <booktitle> Symposium on Automatic Demonstration,Lecture Notes in Mathematics, </booktitle> <volume> Vol. 5 #3, </volume> <pages> pages 237-275, </pages> <address> New York, 1970. </address> <publisher> Springer-Verlag. </publisher> <pages> 32 </pages>
Reference: [41] <author> D. Scott. </author> <title> Data types as lattices. </title> <journal> SIAM J. Comput., </journal> <volume> 5 </volume> <pages> 522-87, </pages> <year> 1976. </year>
Reference: [42] <author> Anton Setzer. </author> <title> Proof theoretical strength of Martin-Lof Type Theory with W-type and one universe. </title> <type> PhD thesis, </type> <institution> Ludwig-Maximilians-Universitat, Munchen, </institution> <month> September </month> <year> 1993. </year>
Reference: [43] <author> S. Thompson. </author> <title> Type Theory and Functional Programming. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: Nax discovered a beautiful symmetry in the type definition process and used it to define a class of types that are sometimes called "lazy types' (see Thompson book, Type Theory and Functional Programming <ref> [43] </ref>). Essentially co-inductive types arise by taking maximal fixed points of monotone operators. The standard example is a stream, say of numbers define type S = N fi S. The elements of this type are objects that generate unbounded lists of numbers according to a certain generation law. <p> In type theory we allow a different class of predicates | those involving predicative higher-order logic in a sense. This topic is discussed in many articles and books on type theory <ref> [33, 13, 36, 43, 12, 11] </ref> and is beyond the scope of this article, so here we will just assume that the reader is familiar with one account of propositions-as-types or representing logic in type theory. The Nuprl style is to use the type of propositions, denoted P rop.
Reference: [44] <author> S.S. </author> <title> Wainer. The hierarchy of terminating recursive programs over N. </title> <editor> In Daniel Leivant, editor, </editor> <booktitle> Logic and Computational Complexity, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 959, </volume> <pages> pages 281-299. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1994. </year> <month> 33 </month>
References-found: 44

