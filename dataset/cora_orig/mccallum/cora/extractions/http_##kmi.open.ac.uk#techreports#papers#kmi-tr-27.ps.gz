URL: http://kmi.open.ac.uk/techreports/papers/kmi-tr-27.ps.gz
Refering-URL: http://kmi.open.ac.uk/techreports/kmi-tr-list.html
Root-URL: 
Email: -.zdrahal, e.motta-@open.ac.uk  
Title: Improving Competence by Integrating Case-Based Reasoning and Heuristic Search  
Author: Zdenek Zdrahal, Enrico Motta 
Address: Walton Hall, Milton Keynes, MK7 6AA United Kingdom  
Affiliation: Knowledge Media Institute The Open University  
Abstract: We analyse the behaviour of a Propose & Revise architecture in the VT elevator design problem and we show that this problem solving method cannot solve all possible cases covered by the available domain knowledge. We investigate this problem and we show that this limitation is caused by the restricted search regime employed by the method and that the competence of the method cannot be improved by acquiring additional domain knowledge. We therefore propose an alternative design problem solver, which integrates case-based reasoning and heuristic search techniques and overcomes the competence-related limitations exhibited by the Propose & Revise architecture, while maintaining the same level of efficiency. We describe four algorithms for case-based design, which exploit both general properties of parametric design tasks and application specific heuristic knowledge.
Abstract-found: 1
Intro-found: 1
Reference: <author> Banecek J. and Drvota J. </author> <year> (1995). </year> <title> Problem Analysis and Decomposition of Initial Vehicle Design. TR-Encode-Dccs-1-95 (Project Encode report). </title> <journal> DccS Engineering, Prague. </journal>
Reference-contexts: A detailed analysis of P&R problem solving methods is presented in (Zdrahal and Motta, 1995). Although this framework was proposed originally for the elevator design problem, it can be applied to other design situations. For instance, it has been used for an initial vehicle design application <ref> (Banecek and Drvota, 1995) </ref> and for sliding bearing design (Horak et al., 1995). In the rest of the paper we will use the expressions task knowledge and problem solving knowledge to refer to concepts or procedures introduced respectively as part of a task or problem solving method specification.
Reference: <author> Chandrasekaran B. </author> <year> (1990). </year> <title> Design Problem Solving: A Task Analysis. </title> <journal> AI magazine, </journal> <volume> Vol. 11, No. 4. </volume> <month> Winter </month> <year> 1990. </year> <pages> pp. </pages> <note> 59 - 71 Fischer G. </note> <author> and Nakakoji K. </author> <year> (1992). </year> <title> Beyond the macho approach of artificial intelligence: empower human designers-do not replace them. Knowledge-Based Systems. </title> <journal> Vol.5. </journal> <volume> No. 1. </volume> <month> March </month> <year> 1992. </year> <pages> pp. 15-30. </pages>
Reference: <author> Gero J. </author> <year> (1990). </year> <title> Design Prototypes: A Knowledge Representation Schema for Design. </title> <journal> AI magazine, </journal> <volume> Vol. 11, No. 4. </volume> <month> Winter </month> <year> 1990. </year> <pages> pp. </pages> <note> 26-36 Horak J., </note> <author> Valasek M. and Bauma V. </author> <year> (1995). </year> <title> Knowledge Level Analysis of Bearings Design. </title> <type> TR-Encode-CVUT-1-95 (Project Encode report). </type> <institution> Czech Technical University, Faculty of Mechanical Engineering. Prague. </institution>
Reference: <author> Maher M.L. </author> <year> (1990). </year> <title> Process Models for Design Synthesis. </title> <journal> AI magazine, </journal> <volume> Vol. 11, No. 4. </volume> <month> Winter </month> <year> 1990. </year> <pages> pp. </pages> <note> 49-58 Maher M.L., Balachandran M.B. </note> <author> and Zhang D.M. </author> <year> (1995). </year> <title> Case-based reasoning in design. </title> <publisher> Lawrence Erlbaum Associates, Publishers. </publisher> <address> Hawah, New Jersey. </address>
Reference-contexts: Algorithms 3 and 4 are based on a similar idea but their aim is retrieving not only the most adaptable but also the cheapest solutions. Design decomposition into nearly independent subproblems or loosely coupled subproblems is discussed e.g. in <ref> (Maher, 1990) </ref>. Composer, DJVU, IDIOM make use of this technique: they divide the problem into subproblems, resolve these subproblems by case-based methods and finally synthesise the solution. The decomposition technique used in this paper is simpler.
Reference: <author> Marcus, S. and McDermott, J. </author> <year> (1989). </year> <title> SALT: A Knowledge Acquisition Language for Propose-and-Revise Systems. </title> <journal> Journal of Artificial Intelligence, </journal> <volume> 39(1), </volume> <pages> 1-37. </pages>
Reference: <author> Motta E., Stutt A., Zdrahal Z., OHara K.and Shadbolt N.(1996). </author> <title> Solving VT in VITAL: a study in model construction and knowledge reuse. </title> <journal> International Journal of Human-Computer Studies (1996)44. </journal> <pages> pp. 333-371. </pages>
Reference-contexts: The results are displayed in table 1 which shows that the P&R problem solver is unable to provide solutions for more than 50% of the possible inputs, for details see <ref> (Motta and Zdrahal, 1996) </ref> . <p> We have argued that this problem cannot be caused by lack of domain knowledge, but such behaviour is the result of the pruning mechanism employed by P&R, which indiscriminately prunes the search when the algorithm makes a step seemingly away from the solution, see <ref> (Motta and Zdrahal, 1996) </ref>. Ideally, we would like to carry out additional knowledge acquisition sessions with the original VT domain experts and analyse the problem solving techniques used when solving the cases which cannot be solved by the given P&R method.
Reference: <author> Motta E. and Zdrahal Z. </author> <year> (1996). </year> <title> Parametric Design Problem Solving. </title> <booktitle> In Proceedings of the 10th Banff Knowledge Acquisition for Knowledge-Based Systems Workshop </booktitle> . 
Reference-contexts: The results are displayed in table 1 which shows that the P&R problem solver is unable to provide solutions for more than 50% of the possible inputs, for details see <ref> (Motta and Zdrahal, 1996) </ref> . <p> We have argued that this problem cannot be caused by lack of domain knowledge, but such behaviour is the result of the pruning mechanism employed by P&R, which indiscriminately prunes the search when the algorithm makes a step seemingly away from the solution, see <ref> (Motta and Zdrahal, 1996) </ref>. Ideally, we would like to carry out additional knowledge acquisition sessions with the original VT domain experts and analyse the problem solving techniques used when solving the cases which cannot be solved by the given P&R method.
Reference: <author> Selman B., Levesque H. and Mitchell D. </author> <year> (1992). </year> <title> A New Method for Solving Hard Satisfiability Problems. </title> <booktitle> in Proceedings of AAAI-92. </booktitle> <address> San Jose, California. </address> <pages> pp. 440-445. </pages>
Reference-contexts: A similar pattern of behaviour was reported by <ref> (Selman et al., 1992) </ref> when carrying out experiments on the satisfiability of a set of propositional clauses.
Reference: <editor> Smyth B. and Keane M.T. </editor> <booktitle> (1996). Adaptation-Guided Retrieval. In Proceedings of the 2nd UK CBR workshop (I.D.Watson ed.). Salford, </booktitle> <pages> pp. </pages> <editor> 2-15 Voss A. and Oxman R. </editor> <year> (1996). </year> <title> A Study of Case Adaptation Systems. </title> <booktitle> In Artificial Intelligence in Design 96. </booktitle> <editor> (J.S.Gero and F Sudweeks eds.). </editor> <publisher> Kluwer Academic Publishers. </publisher> <pages> pp. 172-189. </pages>
Reference-contexts: Some of these systems employ similar ideas and techniques with the approach described in this paper. For example, in AAAO, EADOCS, Composer and IDIOM, the design problem is represented as constraint satisfaction. EADOCS and IDIOM take into account the optimisation aspects of the problem. DJVU <ref> (Smyth and Keane, 1996) </ref> makes use of adaptation knowledge to assist in retrieving the most adaptable case. Algorithms 3 and 4 are based on a similar idea but their aim is retrieving not only the most adaptable but also the cheapest solutions.
Reference: <author> Wielinga B.J., Akkermans J.M. and Schreiber A.Th. </author> <year> (1995). </year> <title> A Formal Analysis of Parametric Design Problem Solving. </title> <booktitle> In Proceedings of the 9th Banff Knowledge Acquisition for Knowledge-Based Systems Workshop (B.R.Gaines and M.Musen eds.). </booktitle> <pages> pp. 37-1 - 37-15. </pages>
Reference-contexts: A constraint specifies a condition which must not be violated by a consistent design. For instance, the VT elevator design application includes constraints such as The cab height must be between 84 and 240 inches, inclusive. Requirements are also constraints and, as discussed in <ref> (Wielinga et al., 1995) </ref>, the difference between requirements and constraints is conceptual rather than formal. Requirements describe the desired properties of a solution, while constraints limit the space of valid designs. Moreover, constraints normally specify caseindependent restrictions, while requirements are typically casespecific.
Reference: <author> Yost G.R. and Rothenfluh T.R. </author> <year> (1996). </year> <title> Configuring elevator systems. </title> <booktitle> International Journal of Human-Computer Studies (1996) 44. </booktitle> <pages> pp. 521-568. </pages>
Reference-contexts: In this paper we critically review the competence of this method by analysing the behaviour of a Propose & Revise problem solver in the VT elevator design domain <ref> (Yost and Rothenfluh, 1996) </ref> and we show that such a problem solver could not solve all the obvious cases made possible by the available domain knowledge. <p> design domain <ref> (Yost and Rothenfluh, 1996) </ref> and we show that such a problem solver could not solve all the obvious cases made possible by the available domain knowledge. The reason for this limitation is that the problem solving model (not the domain knowledge!) provided by domain experts and described in (Yost and Rothenfluh, 1996) is incomplete. <p> A possibility therefore could be that in order to use EMR it is necessary to acquire the relevant knowledge about the order of parameter assignments. However, we find this quite unlikely. First of all, no such knowledge is provided in the description of the VT application <ref> (Yost and Rothenfluh, 1996) </ref>. Moreover, in the general case, it is difficult to imagine that such a control is meant to be part of a designers problem solving knowledge. Of course, it is likely that designers use domain dependent sequences of design steps. <p> We may speculate that in such cases the designer would rather allow for a new constraint violation which can be fixed later. In conclusion, the P&R approach as described in <ref> (Yost and Rothenfluh, 1996) </ref> provides a conceptual framework for operationalizing task knowledge in a processoriented way. However, it restricts search in a way which dramatically affects the competence of the problem solver. <p> Without a good search strategy many reasonable design requirements cannot be satisfied. We tested the P&R algorithm on input specifications generated by combining all legal values of speed and capacity from <ref> (Yost and Rothenfluh, 1996) </ref>. The values of the remaining 24 required parameters were always the same and correspond to the test case in (Yost and Rothenfluh, 1996). <p> We tested the P&R algorithm on input specifications generated by combining all legal values of speed and capacity from <ref> (Yost and Rothenfluh, 1996) </ref>. The values of the remaining 24 required parameters were always the same and correspond to the test case in (Yost and Rothenfluh, 1996). The results are displayed in table 1 which shows that the P&R problem solver is unable to provide solutions for more than 50% of the possible inputs, for details see (Motta and Zdrahal, 1996) .
Reference: <author> Zdrahal Z. and Motta E. </author> <year> (1995). </year> <title> An In-Depth Analysis of Propose & Revise Problem Solving Methods. </title> <booktitle> In Proceedings of the 9th Banff Knowledge Acquisition for Knowledge-Based Systems Workshop (B.R.Gaines and M.Musen eds.). </booktitle> <pages> pp. 38-1 - 38-20. </pages>
Reference-contexts: In contrast with this approach, CMR first assigns values to all parameters, thus producing a complete design model, and only then attempts to fix constraint violations. A detailed analysis of P&R problem solving methods is presented in <ref> (Zdrahal and Motta, 1995) </ref>. Although this framework was proposed originally for the elevator design problem, it can be applied to other design situations. For instance, it has been used for an initial vehicle design application (Banecek and Drvota, 1995) and for sliding bearing design (Horak et al., 1995).
References-found: 12

