URL: ftp://ftp.cs.colorado.edu/users/alw/papers/scm6.ps
Refering-URL: http://www.cs.colorado.edu/~alw/RecentPubs.html
Root-URL: http://www.cs.colorado.edu
Title: Post-Deployment Configuration Management  
Author: Dennis Heimbigner and Alexander L. Wolf 
Address: Boulder, CO 80309-0430, USA  
Affiliation: University of Colorado,  
Date: 1996 272  
Note: From the Proceedings of the 6th Inter. Conf. on Software Configuration Management, LNCS 1167, Springer-Verlag, Berlin,  
Abstract: Configuration management must move beyond its traditional development-time concerns with source files. Future software systems will be delivered in binary form and will be composed from pre-existing systems. The term Post-Deployment Configuration Management is proposed to address the problems introduced in managing these new kinds of versioned configurations.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Stuart I. Feldman. </author> <title> Make a program for maintaining computer programs. </title> <journal> Software Practice and Experience, </journal> <volume> 9:255 - 265, </volume> <year> 1979. </year>
Reference-contexts: One typically brings in a tar file and expands it. Then one goes into the subtree and executes a config script that interrogates the local system for information and produces a Makefile <ref> [1] </ref> for building the software system and taking the local context into account. The config scripts do all sorts of amazing things to find out local information: they may run the local C compiler with various test programs, for example.
Reference: 2. <author> D. Mackenzie, R. McGrath, and N. Friedman. Autoconf: </author> <title> Generating Automatic Configuration Scripts. Free Software Foundation, </title> <publisher> Inc, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: But of course we recognize the fuzziness of these separations. The current state of the art in parameterization (at least for Unix) is such things as environment variables, X resource files, and Autoconf <ref> [2] </ref>. Environment variables essentially define a simple database of (name,value) pairs where both the name and value are strings. Programs can query this database to pick out local values for such things as file paths, hardware (i.e, display names) and such.
Reference: 3. <author> Mark Maybee, Dennis Heimbigner, and Leon J. Osterweil. </author> <title> Multilanguage Interoperability in Distributed Systems. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering. IEEE Computer Society, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: We also note that the problem is complicated if (1) the local site already has some of the dependent software installed, and (2) if ranges of versions of dependent software can be used (i.e., version 3.1 through version 3.3 of Q <ref> [3] </ref>). We are addressing this problem by constructing a release manager on top of NUCM [6]. This release manager can maintain dependency information and help bring in proper versions of all required software. 274 4 Parameterization Software is usually parameterized to take local context into account. <p> We are just beginning to address the re-configuration area and hope to build on the technology we develop for installation, parameterization, and instantiation, as well as enhancing our own distributed object technology (Q <ref> [3] </ref>) to support dynamic reconfiguration. Acknowledgements. This material is based upon work sponsored by the Air Force Materiel Command, Rome Laboratory, and the Advanced Research Projects Agency under Contract Number F30602-94-C-0253.
Reference: 4. <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <month> 26 August </month> <year> 1991. </year>
Reference-contexts: As with parameters, we believe that this information need to be kept as a service where it can be queried and modified dynamically. The OMG CORBA <ref> [4] </ref> model includes a simple instance of such a server. But again, we believe that this server must allow for programmable specifications which, so far as we are aware, is a capability not currently provided anywhere. 6 Re-Configuration One a system is instantiated and executed, it will evolve over time.
Reference: 5. <author> J.M. Purtilo. </author> <title> The polylith software bus. </title> <type> Technical Report CS-TR-2469, </type> <institution> Department of Computer Science, University of Maryland, College Park, MD 20742, </institution> <year> 1990. </year>
Reference-contexts: But when one needs to instantiate a number of servers, in the correct sequence, and correctly interconnect them, and connect them to previously instantiated servers, the problem becomes much more difficult. This problem has been addressed in the case of what we would call "distributed computations." Polylith <ref> [5] </ref> is perhaps the canonical example here. By the term "distributed computation" we mean that there is a program that happens to be decomposed into distributed subpieces and whose purpose is to start up, complete some computation, and shut down.
Reference: 6. <author> Andre van der Hoek, Dennis Heimbigner, and Alexander L. Wolf. </author> <title> A Generic, Peer-to-Peer Repository for Distributed Configuration Management. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering. IEEE Computer Society, </booktitle> <month> March </month> <year> 1996. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: We are addressing this problem by constructing a release manager on top of NUCM <ref> [6] </ref>. This release manager can maintain dependency information and help bring in proper versions of all required software. 274 4 Parameterization Software is usually parameterized to take local context into account. Parameterization can encompass almost any site-dependent modification.
References-found: 6

