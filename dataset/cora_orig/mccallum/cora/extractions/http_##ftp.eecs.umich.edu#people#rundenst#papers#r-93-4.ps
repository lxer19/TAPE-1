URL: http://ftp.eecs.umich.edu/people/rundenst/papers/r-93-4.ps
Refering-URL: http://ftp.eecs.umich.edu/people/rundenst/papers/
Root-URL: http://www.eecs.umich.edu
Email: email: rundenst@eecs.umich.edu,  
Phone: phone: (313) 936-2971  
Title: Design Tool Integration Using Object-Oriented Database Views  
Author: Elke A. Rundensteiner 
Address: Ann Arbor, MI 48109-2122  
Affiliation: Dept. of Electrical Eng. and Computer Science University of Michigan,  
Abstract: CAD systems utilize a central design database (DDB) to achieve the much needed integration of diverse design information into one model. A global DDB represents a serious bottleneck for the CAD system; it prevents the extensibility of the CAD system over time and forces all design tools to work on the same comprehensive data model. As a solution, we propose to utilize the object-oriented view mechanism, called MultiView, for declaratively specifying customized tool interfaces (design views) on the CAD database. A design view contains a subset of relevant information from the DDB organized in a fashion most suitable to the needs of a particular tool. MultiView automatically maintains the mapping between the global data model and local design views, thus freeing individual design tools from this burden. The resulting CAD environment assures the consistent integration of design data from different tools, while providing each tool with a customized view of the integrated data. This paper gives numerous examples that demonstrate MultiView and its advantages for tool integration in behavioral synthesis. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Graham, A., </author> <title> "The CAD Framework Initiative Standards Progress Towards First Publication at Year End", </title> <journal> IEEE DATC Newsl. on DA, Sp. </journal> <year> 1992, </year> <pages> pp. 13-21. </pages>
Reference-contexts: 1 Introduction Tool integration has been identified as a costly problem for the CAD industry, for which up to 40 percent of a group's engineering resources are typically spent <ref> [1] </ref>. Efforts thus are underway to develop standard data models [1, 4], which allow design tools to operate on a centralized design database (DDB). Such a unified DDB insures the proper integration of design data generated and consumed by various design tools into one consistent design. <p> 1 Introduction Tool integration has been identified as a costly problem for the CAD industry, for which up to 40 percent of a group's engineering resources are typically spent [1]. Efforts thus are underway to develop standard data models <ref> [1, 4] </ref>, which allow design tools to operate on a centralized design database (DDB). Such a unified DDB insures the proper integration of design data generated and consumed by various design tools into one consistent design.
Reference: [2] <editor> Harrison, D., et al., </editor> <booktitle> Data Management and Graphics Editing in Berkeley Design Env., ICCAD'86, </booktitle> <pages> pp. 24-27. </pages>
Reference-contexts: These information domains are two separate parts of the global schema, each captured by different data structures. Furthermore, the structural domain of the design is generated from the behavioral one using design algorithms. Similarly, in OCT <ref> [2] </ref>, the term view is used to refer to different facets of a frame, each storing independent pieces of information about the design, such as the physical characteristics, the behavior, etc.
Reference: [3] <author> Heiler, S., and Zdonik, S. B., </author> <title> "Object views: Extending the vision", </title> <journal> IEEE Data Eng. Conf., </journal> <year> 1990, </year> <pages> pp. 86 - 93. </pages>
Reference-contexts: With incremental refinement of design data being an essential ingredient of DDBs, relational views are of limited use for CAD applications. In recent years, object-oriented databases (OODB) have been used for CAD applications. Also, several proposals for view mechanisms for OODBs have been developed <ref> [3, 8, 9] </ref>.
Reference: [4] <author> Knapp, D. W., and A. C. Parker, </author> <title> A unified representation for design information, </title> <address> CHDL-85, Elsvier, </address> <year> 1985. </year>
Reference-contexts: 1 Introduction Tool integration has been identified as a costly problem for the CAD industry, for which up to 40 percent of a group's engineering resources are typically spent [1]. Efforts thus are underway to develop standard data models <ref> [1, 4] </ref>, which allow design tools to operate on a centralized design database (DDB). Such a unified DDB insures the proper integration of design data generated and consumed by various design tools into one consistent design. <p> Section 3 introduces the OO view technology, MultiView, while Section 4 demonstrates the application of MultiView to high-level synthesis. An evaluation of the view-based approach is presented in Section 5, while Section 6 provides conclusions. 2 Previous Work The term `views' as used in the CAD literature <ref> [4, 5] </ref> is different from the database view concept proposed in this paper. Often the different information domains of an application, such as the behavioral and the structural domains in high-level synthesis, are referred to as views of the design [4]. <p> Often the different information domains of an application, such as the behavioral and the structural domains in high-level synthesis, are referred to as views of the design <ref> [4] </ref>. These information domains are two separate parts of the global schema, each captured by different data structures. Furthermore, the structural domain of the design is generated from the behavioral one using design algorithms.
Reference: [5] <author> Lanneer, D., et al., </author> <title> An OO framework for the full high-level synthesis trajectory, </title> <booktitle> CHDL, </booktitle> <pages> pp. 281-300, </pages> <year> 1991. </year>
Reference-contexts: Section 3 introduces the OO view technology, MultiView, while Section 4 demonstrates the application of MultiView to high-level synthesis. An evaluation of the view-based approach is presented in Section 5, while Section 6 provides conclusions. 2 Previous Work The term `views' as used in the CAD literature <ref> [4, 5] </ref> is different from the database view concept proposed in this paper. Often the different information domains of an application, such as the behavioral and the structural domains in high-level synthesis, are referred to as views of the design [4].
Reference: [6] <editor> Rammig, F., (editor), </editor> <booktitle> IFIP WG 10.2, Workshop on Electronic Design Automation Frameworks, </booktitle> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: Existing CAD databases do not address this problem of mismatch between the global DDB and local data needs of individual tools <ref> [6] </ref>. They leave the burden of mapping between the tool's local data structures and DDB's global data model to the design tools. Tools often use translators to load the DDB data into a design file and then to generate a local data structure in their personal workspace. <p> This avoids having to implement a complete tool interface from scratch. Others build fixed tool interfaces for a particular design task, and therefore cannot quickly construct new design views nor easily modify existing ones <ref> [6] </ref>. Our view approach promises to eliminate the bottleneck, allowing each tool to work on its customized view of the data while the database assures the consistent integration of the inputs from different tools into one comprehensive global model. In Section 2 we discuss related work.
Reference: [7] <author> Rundensteiner, E. A., Gajski, D. D., and Bic, L., </author> <title> "Component Synthesis from Functional Descriptions", </title> <note> to appear in IEEE Trans. on CAD, Fall 1993. </note>
Reference-contexts: with behavioral binding and floorplan attributes) defined in [9]. global database structural design data physical design data relationshipsrelationships behavioral design data MultiView view specification view mappings between global database and local views. global CAD view (schema) view for floor planning view for operator binding view for HDL-graph compilation Operator binding <ref> [7] </ref> establishes a mapping between the operators in the data flow graph (DFG) and the hardware units in the component graph (CG) (Fig. 3a). The binding tool needs information about the operators in the DFG, their assigned state, and components available per state.
Reference: [8] <author> Rundensteiner, E. A., </author> <title> "MultiView: A Methodology for Multiple Views in OODBs", </title> <booktitle> VLDB, </booktitle> <year> 1992, </year> <pages> pp. 187-198. </pages>
Reference-contexts: In this paper, we address this problem by moving the responsibility of mapping between the global DDB and the local tool models to the database. More precisely, we introduce object-oriented (OO) view technology (e.g., MultiView <ref> [8, 9] </ref>) as the mechanism for the generation of customized tool interfaces (design views) to DDB. OO views assure that updates through the tool interface are consistently reflected in the underlying database. <p> With incremental refinement of design data being an essential ingredient of DDBs, relational views are of limited use for CAD applications. In recent years, object-oriented databases (OODB) have been used for CAD applications. Also, several proposals for view mechanisms for OODBs have been developed <ref> [3, 8, 9] </ref>. <p> view update problem can be successfully addressed for OODBs, due to concepts such as object identity and encapsulation [9], this clearly opens the potential for applying the OODB view technology to the CAD domain. 3 Design View Specification This section briefly introduces OODB terminology, OO views, and the MultiView approach <ref> [8, 9] </ref>. A class C1 has a unique class name, an extent (a set of associated object instances), and a type description (all property functions applicable to the instances of the class). <p> For example, Fig. 1a shows the base schema, Fig. 1c the global schema, and Fig. 1e the view VS. In MultiView <ref> [8, 9] </ref>, view specification consists of: 1. the generation of customized (virtual) classes defined by an object-oriented query; 2. the integration of derived classes into one consistent global schema graph (GS); and 3. the specification of an arbitrarily complex view schema composed of both base and virtual classes from GS. <p> Automatic generation of a view schema simplifies the task of the view designer and guarantees the consistency of the resulting view schema. Details on these languages and algorithms can be found in <ref> [8, 9] </ref>, with an example following. Example 1. In Fig. 1, we depict base and virtual classes by circles and dotted circles, respectively. Given GS in Fig. 1a, the view definer specifies the virtual classes ALU and LogicUnits (Fig. 1b). These classes are integrated into GS (Fig. 1c).
Reference: [9] <author> Rundensteiner, E. A., </author> <title> "OO Views: An Approach to Tool Integration in Design Env.," </title> <institution> Diss., Info. and Comp. Science Dept., Univ. of Cal., Irvine, </institution> <month> Fall </month> <year> 1992. </year>
Reference-contexts: However, each design tool generally needs a subset of the information maintained by the global DDB (different levels of abstraction, different information domains, etc.), organized in a format suitable for the tool's particular requirements <ref> [9] </ref>. A central DDB thus represents a bottleneck of a CAD system, requiring all design tools to work on the same global data model. <p> In this paper, we address this problem by moving the responsibility of mapping between the global DDB and the local tool models to the database. More precisely, we introduce object-oriented (OO) view technology (e.g., MultiView <ref> [8, 9] </ref>) as the mechanism for the generation of customized tool interfaces (design views) to DDB. OO views assure that updates through the tool interface are consistently reflected in the underlying database. <p> With incremental refinement of design data being an essential ingredient of DDBs, relational views are of limited use for CAD applications. In recent years, object-oriented databases (OODB) have been used for CAD applications. Also, several proposals for view mechanisms for OODBs have been developed <ref> [3, 8, 9] </ref>. <p> In recent years, object-oriented databases (OODB) have been used for CAD applications. Also, several proposals for view mechanisms for OODBs have been developed [3, 8, 9]. Since the view update problem can be successfully addressed for OODBs, due to concepts such as object identity and encapsulation <ref> [9] </ref>, this clearly opens the potential for applying the OODB view technology to the CAD domain. 3 Design View Specification This section briefly introduces OODB terminology, OO views, and the MultiView approach [8, 9]. <p> view update problem can be successfully addressed for OODBs, due to concepts such as object identity and encapsulation [9], this clearly opens the potential for applying the OODB view technology to the CAD domain. 3 Design View Specification This section briefly introduces OODB terminology, OO views, and the MultiView approach <ref> [8, 9] </ref>. A class C1 has a unique class name, an extent (a set of associated object instances), and a type description (all property functions applicable to the instances of the class). <p> For example, Fig. 1a shows the base schema, Fig. 1c the global schema, and Fig. 1e the view VS. In MultiView <ref> [8, 9] </ref>, view specification consists of: 1. the generation of customized (virtual) classes defined by an object-oriented query; 2. the integration of derived classes into one consistent global schema graph (GS); and 3. the specification of an arbitrarily complex view schema composed of both base and virtual classes from GS. <p> For the first task, MultiView provides an object algebra <ref> [9] </ref> that can be used to define new virtual classes by modifying their type descriptions and/or membership extents. This algebra consists of six basic operators (Select, Project, Refine, etc.) that can be nested to form arbitrarily complex class derivations (Fig. 1b). (d) View Class Selection. <p> Automatic generation of a view schema simplifies the task of the view designer and guarantees the consistency of the resulting view schema. Details on these languages and algorithms can be found in <ref> [8, 9] </ref>, with an example following. Example 1. In Fig. 1, we depict base and virtual classes by circles and dotted circles, respectively. Given GS in Fig. 1a, the view definer specifies the virtual classes ALU and LogicUnits (Fig. 1b). These classes are integrated into GS (Fig. 1c). <p> As global schema, we assume the Behavioral Design Object Model (a control/data flow graph (CDFG) extended with state transition and structural bindings and a Component Graph augmented with behavioral binding and floorplan attributes) defined in <ref> [9] </ref>. global database structural design data physical design data relationshipsrelationships behavioral design data MultiView view specification view mappings between global database and local views. global CAD view (schema) view for floor planning view for operator binding view for HDL-graph compilation Operator binding [7] establishes a mapping between the operators in the <p> Third, since each DFG node is assigned to one state, we can retrieve but not modify the state assignment for each DFG node. The reader is referred to <ref> [9] </ref> for the specification of design views for other design tasks. 5 Evaluation of the View Approach The view-based database approach offers all the advantages of a centralized DDB, such as design data integration, access control, etc. <p> Also, new customized views can be created rapidly, allowing for the easy addition of new tools to the CAD system. Existing tools can immediately interoperate with these new tools through the DDB. As demonstrated by the examples in this paper and in <ref> [9] </ref>, design views also can: * filter different levels of detail of the global design data (e.g., hide complex timing constraints from DFG); * restructure the design schema to narrow the gap between the tool's local model and the global model (e.g., transform complex DFG net/port structures); * simplify application-specific processing
References-found: 9

