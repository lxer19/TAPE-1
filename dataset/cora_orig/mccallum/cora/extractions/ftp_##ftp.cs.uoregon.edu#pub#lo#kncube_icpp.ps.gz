URL: ftp://ftp.cs.uoregon.edu/pub/lo/kncube_icpp.ps.gz
Refering-URL: http://www.cs.uoregon.edu/research/DistributedComputing/archive.html
Root-URL: http://www.cs.uoregon.edu
Email: Email: kurtw, lo@cs.uoregon.edu Email: bose@cs.orst.edu  
Title: CONTIGUOUS AND NON-CONTIGUOUS PROCESSOR ALLOCATION ALGORITHMS FOR K-ARY N-CUBES  
Author: Kurt Windisch and Virginia Lo, Bella Bose 
Address: Eugene, OR 97403 Corvallis, OR 97331  
Affiliation: Dept. of Computer and Information Science Dept. of Computer Science University of Oregon Oregon State University  
Abstract: Efficient utilization of processing resources in a large, multiuser parallel computer depends on processor allocation algorithms that minimize system fragmentation. We propose three processor allocation algorithms for the k-ary n-cube class of parallel architectures, which includes the hypercube and multidimensional torus. The k-ary Partner strategy is a conventional contiguous processor allocation strategy that improves subcube recognition. The non-contiguous Multiple Buddy and Multiple Partner strategies lift the restriction of contiguity in order to address the problem of fragmentation associated with contiguous strategies. Simulations compare the performance of these three strategies with the performance of other k-ary n-cube allocation strategies, showing that non-contiguous allocation provides significantly increased system utilization by eliminating fragmentation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Al-Dhelaan and B. Bose. </author> <title> A new strategy for processor allocation in an n-cube multiprocessor. </title> <booktitle> In Proceedings of the International Phoenix Conference on Computers and Communication, </booktitle> <pages> pages 114-118, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: Despite this drawback, contiguous strategies remain the most commonly implemented processor allocation algorithms in real distributed memory parallel computers. 4.1 k-ary Partner Strategy We propose a new contiguous strategy, the k-ary Partner strategy, by extending our earlier Partner strategy developed for the binary hypercube <ref> [1] </ref> to the k-ary n-cube. Although it is similar to the k-ary Buddy strategy, in that it also uses the buddy tree representation of subcubes, it provides significantly better performance. <p> However, the 1-st partner set contains the nodes 12, 22, and 32, all of which are free. Therefore, those four nodes, 02 and its 1-st partners, are allocated to the job. Al-Dhelaan and Bose's subcube recognition proof <ref> [1] </ref> can be extended, without loss of generality, to show that the Partner strategy can recognize (nm+1)k nm subcubes (Q k m 's) from a Q k n , surpassing the recognition of the Gray Code strategy. <p> Deallocation simply costs O (k n ) to reset the allocation bits of each allocated processor. An implementation of the k-ary Partner strategy using free lists as described in <ref> [1] </ref> and similar to those used in MBS, could be used to reduce this overhead. 5.3 Paging (i) Another simple non-contiguous allocation strategy is Paging (i), which statically partitions the k-ary n-cube into k ary i-cubes (0 i n).
Reference: [2] <author> B. Bose, B. Broeg, Y. Kwon, and Y. Ashir. </author> <title> Lee distance and topological properties of k-ary n-cubes. </title> <journal> IEEE Transactions on Computers, </journal> <note> 1995. To appear. </note>
Reference-contexts: Sections 4 and 5 introduce new contiguous and non-contiguous processor allocation strategies for the k-ary n-cube. Section 6 analyzes the performance of these strategies through simulation, and Section 7 summarizes our results and discusses future work. 2 Mathematical Preliminaries A k-ary n-cube [4] <ref> [2] </ref>, also denoted as Q k n , is a graph containing k n nodes, each labeled with a distinct base-k, n-bit address, (a n 1; a n 2; : : : ; a i ; : : : ; a 1 ; a 0 ), with 0 a i k
Reference: [3] <author> M. Chen and K. G. Shin. </author> <title> Processor allocation in an n-cube multiprocessor using gray codes. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36(12):1396-1407, </volume> <month> December </month> <year> 1987. </year>
Reference-contexts: Since the hypercube is simply a k-ary n-cube where k = 2, the most obvious allocation algorithms for k-ary n-cubes are generalizations of the common binary hypercube strategies. Gautam and Chaudhary [5] extended the traditional hypercube algorithms, Buddy and Gray Code <ref> [3] </ref>, to the k-ary n-cube topology. However, the Gray Code strategy is flawed, in that many of the recognized regions do not actually form sub-cubes, or even multidimensional submeshes. Both the Buddy and Gray Code strategies are limited in their subcube recognition capability.
Reference: [4] <author> W. J. Dally. </author> <title> Performance analysis of k-ary n-cube interconnection networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(6) </volume> <pages> 775-784, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Sections 4 and 5 introduce new contiguous and non-contiguous processor allocation strategies for the k-ary n-cube. Section 6 analyzes the performance of these strategies through simulation, and Section 7 summarizes our results and discusses future work. 2 Mathematical Preliminaries A k-ary n-cube <ref> [4] </ref> [2], also denoted as Q k n , is a graph containing k n nodes, each labeled with a distinct base-k, n-bit address, (a n 1; a n 2; : : : ; a i ; : : : ; a 1 ; a 0 ), with 0 a i
Reference: [5] <author> V. Gautam and V. Chaudhary. </author> <title> Subcube allocation strategies in a k-ary n-cube. </title> <booktitle> In Proceedings of the Sixth ISCA International Conference on Parallel and Distributed Computing Systems, </booktitle> <address> Louisville, KY, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: Since the hypercube is simply a k-ary n-cube where k = 2, the most obvious allocation algorithms for k-ary n-cubes are generalizations of the common binary hypercube strategies. Gautam and Chaudhary <ref> [5] </ref> extended the traditional hypercube algorithms, Buddy and Gray Code [3], to the k-ary n-cube topology. However, the Gray Code strategy is flawed, in that many of the recognized regions do not actually form sub-cubes, or even multidimensional submeshes. <p> Our paper will assume that only requests for subcubes of the same base as the topology are allowed. In addition to the above algorithms, Gautam and Chaud-hary proposed a new algorithm called the Sniffing strategy <ref> [5] </ref>. They report that Sniffing is an improvement over the previous strategies, because it is able to satisfy requests for subcubes of bases, j 6= k, in a Q k n .
Reference: [6] <author> Phillip Krueger, Ten-Hwang Lai, and Vibha A. Dixit-Radiya. </author> <title> Job scheduling is more important than processor allocation for hypercube computers. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 5(5) </volume> <pages> 488-497, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: When servicing a dynamic workload under certain job scheduling policies, significant pockets of wasted processors, too small for most jobs, become scattered around the system and lead to impaired utilization of the system's processor resources. In binary hyper-cubes, Kreuger, Lai and Radiya <ref> [6] </ref> have shown that the maximum utilization attainable by contiguous allocation for uniform workloads under FCFS scheduling is 58%, and we have shown that the maximum for 2D mesh architectures is only 46% [8]. Significant improvement is achievable by the use of improved job scheduling policies. <p> This is due to the nature of the contiguity constraint and will be studied quantitatively in Section 6, where we will compare many allocation strategies by simulation. Improved performance requires exploration of other alternatives, including scheduling policies <ref> [6] </ref> and the approach we propose: non-contiguous allocation. 5 New Non-contiguous Strategies Non-contiguous processor allocation algorithms overcome the fragmentation drawback of contiguous strategies by allowing a job's allocation to be dispersed between many non-adjacent regions of the topology when necessary.
Reference: [7] <author> Keqin Li and Kam-Hoi Cheng. </author> <title> A two-dimensional buddy system for dynamic resource allocation in a partitionable mesh connected system. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 12 </volume> <pages> 79-83, </pages> <year> 1991. </year>
Reference-contexts: MBS is an extension of our mesh-based MBS algorithm [8] and is based on the k-ary Buddy strategy and the mesh 2D Buddy strategy <ref> [7] </ref>. MBS eliminates the problems of fragmentation found in these contiguous strategies by allowing multiple contiguous blocks to be allocated to a job non-contiguously.
Reference: [8] <author> W. Liu, V. M. Lo, K. Windisch, and B. Nitzberg. </author> <title> Noncontiguous processor allocation algorithms for distributed memory multicomputers. </title> <booktitle> In Proceedings Supercomputing '94, </booktitle> <pages> pages 227-236, </pages> <year> 1994. </year>
Reference-contexts: In binary hyper-cubes, Kreuger, Lai and Radiya [6] have shown that the maximum utilization attainable by contiguous allocation for uniform workloads under FCFS scheduling is 58%, and we have shown that the maximum for 2D mesh architectures is only 46% <ref> [8] </ref>. Significant improvement is achievable by the use of improved job scheduling policies. <p> Still, in large multiuser systems, especially those operating with high network bandwidth and with wormhole routing, noncontiguous alloca tion may have a positive net effect on performance <ref> [8] </ref>. We introduce three non-contiguous processor allocation strategies, all of which completely eliminate external fragmentation by allowing jobs to be allocated anywhere in the system, given enough free processors. <p> MBS is an extension of our mesh-based MBS algorithm <ref> [8] </ref> and is based on the k-ary Buddy strategy and the mesh 2D Buddy strategy [7]. MBS eliminates the problems of fragmentation found in these contiguous strategies by allowing multiple contiguous blocks to be allocated to a job non-contiguously. <p> For mesh architectures, we have seen that the increased contention due to non-contiguous allocation is not as serious as the fragmentation effects of the contiguous allocation. Thus, we observed that non-contiguous allocation performed better overall, even when message-passing contention was considered <ref> [8] </ref>. We have run similar experiments, described in [10], to determine the feasibility of non-contiguity in k-ary n-cubes with respect to network contention. 7 Conclusion We have presented several new contiguous and noncontiguous processor allocation algorithms, for k-ary n-cube architectures.
Reference: [9] <author> W. Qiao and L. M. Ni. </author> <title> Efficient processor allocation for 3d tori. </title> <type> Technical report, </type> <institution> Michigan State University, </institution> <address> East Lansing, MI 48824-1027, </address> <year> 1994. </year>
Reference-contexts: The Sniffing strategy has recognition capability equivalent to the k-ary Buddy strategy when j = k, but is enhanced with the added capability of recognizing subcubes and meshes of different bases. Qiao and Ni <ref> [9] </ref> developed a new processor allocation algorithm specifically for the 3D Tori (k-ary 3-cube) that is extendable to tori of any dimension.
Reference: [10] <author> K. Windisch, V. Lo, and B. Bose. </author> <title> Contiguous and noncontiguous processor allocation algorithms for k-ary n-cubes. </title> <type> Technical report, </type> <institution> University of Oregon, </institution> <year> 1995. </year>
Reference-contexts: For mesh architectures, we have seen that the increased contention due to non-contiguous allocation is not as serious as the fragmentation effects of the contiguous allocation. Thus, we observed that non-contiguous allocation performed better overall, even when message-passing contention was considered [8]. We have run similar experiments, described in <ref> [10] </ref>, to determine the feasibility of non-contiguity in k-ary n-cubes with respect to network contention. 7 Conclusion We have presented several new contiguous and noncontiguous processor allocation algorithms, for k-ary n-cube architectures. <p> It was also interesting to note that contiguous schemes performed better on the high-dimensional 1024-node k-ary n-cubes we tested, such as binary hypercubes, than on low-dimensional ones, such as 2D tori. Performance with respect to message-passing contention is further discussed and analyzed in <ref> [10] </ref>. Our ongoing work in this area includes examining the performance of a variety of job scheduling policies when used in conjunction with both contiguous and non-contiguous allocation schemes. Our goal is to develop efficient and practical resource management systems that fully utilize the computational capabilities of modern distributed memory multicomputers.
Reference: [11] <author> K. Windisch, J. V. Miller, and V. Lo. Procsimity: </author> <title> an experimental tool for processor allocation and scheduling in highly parallel systems. </title> <booktitle> In Proceedings of the Fifth Symposium on the Frontiers of Massively Parallel Computation, </booktitle> <pages> pages 414-421, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: Experiments were conducted using our discrete event simulator, ProcSimity <ref> [11] </ref>. The experiments model the arrival, service, and departure of a stream of 1000 jobs in k-ary n-cube systems using first-come, first-serve scheduling (FCFS). Jobs arrive, delay for an amount of time taken from an exponential distribution, and then depart.
References-found: 11

