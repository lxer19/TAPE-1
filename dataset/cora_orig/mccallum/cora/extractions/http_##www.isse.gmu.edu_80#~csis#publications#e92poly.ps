URL: http://www.isse.gmu.edu:80/~csis/publications/e92poly.ps
Refering-URL: http://www.isse.gmu.edu:80/~csis/publication.html
Root-URL: 
Email: email: fsandhu, jajodiag@sitevax.gmu.edu  
Title: Polyinstantiation for Cover Stories  
Author: Ravi S. Sandhu and Sushil Jajodia 
Date: November 1992, pages 307-328.  
Address: Toulouse, France,  Fairfax, VA 22030, USA  
Affiliation: Computer Security,  Center for Secure Information Systems Department of Information and Software Systems Engineering George Mason University  
Note: Proc. Second European Symposium on Research in  
Abstract: In this paper we study the use of polyinstantiation, for the purpose of implementing cover stories in multilevel secure relational database systems. We define a particular semantics for polyinstantiation called PCS (i.e., polyinstantiation for cover stories). PCS allows two alternatives for each attribute (or attribute group) of a multilevel entity: (i) no polyinstantiation, or (ii) polyinstantiation at the explicit request of a user to whom the polyinstantiation is visible. PCS strictly limits the extent of polyinstantiation by requiring that each entity in a multilevel relation has at most one tuple per security class. We demonstrate that PCS provides a natural, intuitive and useful technique for implementing cover stories. A particularly attractive feature of PCS is its run-time flexibility regarding the use of cover stories. A particular attribute may have cover stories for some entities and not for others. Even for the same entity, a particular attribute may be polyinstantiated at some time and not at other times.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Rae K. Burns, </author> <title> "Referential Secrecy." </title> <booktitle> Proc. IEEE Symposium on Security and Privacy, </booktitle> <address> Oakland, California, </address> <month> May </month> <year> 1990, </year> <pages> pages 133-142. </pages>
Reference: 2. <author> F. Cuppens and K. Yazdanian, </author> <title> "A "natural" decomposition of multi-level relations," </title> <booktitle> Proc. IEEE Symposium on Security and Privacy, </booktitle> <month> May </month> <year> 1992, </year> <pages> pages 273-284. </pages>
Reference-contexts: The exact manner in which this is done is closely related to the precise polyinstantiation behavior of the relation (see <ref> [2] </ref> for a detailed discussion). In multilevel relations, a major issue is how access classes are assigned to data stored in relations.
Reference: 3. <author> Dorothy E. Denning, Teresa F. Lunt, Roger R. Schell, Mark Heckman, and William R. Shockley, </author> <title> "A multilevel relational data model." </title> <booktitle> Proc. IEEE Symposium on Security and Privacy, </booktitle> <month> April </month> <year> 1987, </year> <pages> pages 220-234. </pages>
Reference-contexts: We refer the readers to [14] or [15] for a detailed exposition. A multilevel relation is said to be polyinstantiated when it contains two or more tuples with the same "apparent" primary key values. The concept of apparent primary key was introduced by Denning et al. in <ref> [3] </ref>. While the notion of a primary key is simple and well understood for classical (single-level) relations, it does not have a straightforward extension to multilevel relations. The apparent primary key of a multilevel relation are those attributes which are asserted by the user as being the primary key.
Reference: 4. <author> Dorothy E. Denning, Teresa F. Lunt, Roger R. Schell, William R. Shockley, and Mark Heckman, </author> <title> "The SeaView security model." </title> <booktitle> Proc. IEEE Symposium on Security and Privacy, </booktitle> <month> April </month> <year> 1988, </year> <pages> pages 218-233. </pages>
Reference: 5. <author> Dorothy E. Denning, </author> <title> "Lessons Learned from Modeling a Secure Multilevel Relational Database System." In Database Security: Status and Prospects, </title> <editor> (C. E. Landwehr, editor), </editor> <publisher> North-Holland, </publisher> <year> 1988, </year> <pages> pages 35-43. </pages>
Reference: 6. <institution> Department of Defense National Computer Security Center. Department of Defense Trusted Computer Systems Evaluation Criteria. DoD 5200.28-STD (1985). </institution>
Reference-contexts: Unfortunately the signaling channels opened up by this tolerance preclude such systems from attaining a high rating (i.e., B2 or above <ref> [6] </ref>) for multilevel security. 2. Tolerate Loss of Integrity. This is the entity polyinstantiation route and would give us the following result. <p> Tolerate Loss of Secrecy. This precludes a high degree of assurance (i.e., B2 or above <ref> [6] </ref>) for multilevel secure DBMS's. 2. Tolerate Loss of Integrity. This is the polyinstantiation route. (Or, the clearly unacceptable route of overwriting secret data by unclassified data.) 3. Tolerate Denial of Service. <p> There is information flow, but from a S-user (logged in as an U-subject) to an U-subject. This is an extremely important distinction. The paramount threat in computer security (at least, in terms of the Orange Book <ref> [6] </ref>) is from Trojan Horse infected subjects. Information leakage due to the activities of users in carrying out their jobs is of concern to overall system security. However, computerization cannot eliminate leakage that is intrinsically part of the application domain (such as setting some data element to be restricted).
Reference: 7. <author> Gajnak, G.E. </author> <title> "Some Results from the Entity-Relationship Multilevel Secure DBMS Project." </title> <booktitle> Aerospace Computer Security Applications Conference, </booktitle> <pages> pages 66-71 (1988). </pages>
Reference-contexts: There may be situations in which entity polyinstantiation is desirable. However, it should be understood that entity polyinstantiation is particularly detrimental to referential integrity as noted in <ref> [7] </ref>. for the apparent primary key.
Reference: 8. <author> J. Thomas Haigh, Richard C. O'Brien, and Daniel J. Thomsen, </author> <title> "The LDV Secure Relational DBMS Model." Database Security IV: Status and Prospects, </title> <editor> S. Jajodia and C. E. Landwehr (editors), </editor> <publisher> North-Holland, </publisher> <year> 1991, </year> <pages> pages 265-279. </pages>
Reference: 9. <author> Sushil Jajodia and Ravi S. Sandhu, </author> <title> "Polyinstantiation integrity in multilevel relations." </title> <booktitle> Proc. IEEE Symposium on Security and Privacy, </booktitle> <address> Oakland, California, </address> <month> May </month> <year> 1990, </year> <pages> pages 104-115. </pages>
Reference-contexts: As a result the only occurrence of polyinstantiation will be when it is deliberately requested for the purpose of implementing cover stories. To appreciate the intuitive notion of a cover story consider the eight instances of SOD shown below <ref> [9] </ref>. No. <p> Instances 5, 6, 7, and 8 are, however, confusing to interpret from a cover story perspective. Each of these cases has more than one S-tuple for the Enterprise, but only one U-tuple. It is possible to give a meaningful and consistent interpretation and update semantics for such relations <ref> [9, 12] </ref>. However, these interpretations loose the basic intuitive simplicity of the relational model. The intuitive appeal of instances 2, 3 and 4 is that they have one tuple per tuple class. We will adhere to this requirement in the rest of this paper. <p> Previous work on the semantics of null in polyinstantiated databases has taken the view that null's are subsumed by non-null values independent of the access class <ref> [9, 21] </ref>. In this case the first tuple in the following relation Starship Objective Destination TC Enterprise U Exploration U null U U Enterprise U Exploration U Rigel S S is subsumed by the second tuple, resulting in the following relation used in our polylow example of section 3.3. <p> The fact that we have null's rather than data values in the polyinstantiated field has no bearing on this issue. We note that the semantics of null in <ref> [9, 21] </ref> require all null values to be classified at the level of the apparent key (U in this case), thereby deeming the second tuple as illegal. 4.3 The Semantics of Update Our interpretation of the semantics of an SQL UPDATE command is identical to the one in the standard relational
Reference: 10. <author> Sushil Jajodia and Ravi S. Sandhu, </author> <title> "A formal framework for single level decomposition of multilevel relations." </title> <booktitle> Proc. IEEE Workshop on Computer Security Foundations, </booktitle> <address> Franconia, New Hampshire, </address> <month> June </month> <year> 1990, </year> <pages> pages 152-158. </pages>
Reference: 11. <author> Sushil Jajodia and Ravi S. Sandhu, </author> <title> "Polyinstantiation integrity in multilevel relations revisited." Database Security IV: Status and Prospects, </title> <editor> S. Jajodia and C. E. Landwehr (editors), </editor> <publisher> North-Holland, </publisher> <year> 1991, </year> <pages> pages 297-307. </pages>
Reference: 12. <author> Sushil Jajodia, Ravi S. Sandhu, and Edgar Sibley, </author> <title> "Update semantics of multilevel relations." </title> <booktitle> Proc. 6th Annual Computer Security Applications Conf., </booktitle> <month> December </month> <year> 1990, </year> <pages> pages 103-112. </pages>
Reference-contexts: Instances 5, 6, 7, and 8 are, however, confusing to interpret from a cover story perspective. Each of these cases has more than one S-tuple for the Enterprise, but only one U-tuple. It is possible to give a meaningful and consistent interpretation and update semantics for such relations <ref> [9, 12] </ref>. However, these interpretations loose the basic intuitive simplicity of the relational model. The intuitive appeal of instances 2, 3 and 4 is that they have one tuple per tuple class. We will adhere to this requirement in the rest of this paper.
Reference: 13. <author> Sushil Jajodia and Ravi S. Sandhu, </author> <title> "Database security: Current status and key issues," </title> <journal> ACM SIGMOD Record, </journal> <volume> Vol. 19, No. 4, </volume> <month> December </month> <year> 1990, </year> <pages> pages 123-126. </pages>
Reference: 14. <author> Sushil Jajodia and Ravi S. Sandhu, </author> <title> "A novel decomposition of multilevel relations into single-level relations." </title> <booktitle> Proc. IEEE Symposium on Security and Privacy, </booktitle> <address> Oakland, California, </address> <month> May </month> <year> 1991, </year> <pages> pages 300-313. </pages>
Reference-contexts: We assume that the readers are familiar with the basic concepts of the standard (single-level) as well as multilevel relations. We refer the readers to <ref> [14] </ref> or [15] for a detailed exposition. A multilevel relation is said to be polyinstantiated when it contains two or more tuples with the same "apparent" primary key values. The concept of apparent primary key was introduced by Denning et al. in [3]. <p> UPDATE SOD SET Objective = "Mining" WHERE Starship = "Enterprise" After this update S-users will see the following relation Starship Objective Destination TC Enterprise U Mining U Talos U U Enterprise U Spying S Talos U S This behavior can be implemented in a kernelized architecture using decompositions similar to <ref> [14] </ref>. Detailed discussion of this is beyond the scope of this paper. 4.5 Polyinstantiating Updates In addition to the usual UPDATE statement, whose interpretation is given above, we propose in PCS to introduce a polyinstantiating update statement to allow users to explicitly request polyinstantiation. <p> Changing restricted to unrestricted and vice versa requires special privileges. The former is specially dangerous in terms of possible polyinstantiation and should be executed only with proper protocols. Finally, we note that PCS can be implemented in a kernelized architecture using decompositions similar to <ref> [14] </ref>. Detailed discussion of this will require another paper. 5 CONCLUSION In this paper we have brought together a number of our previously published ideas, along with some new ones. We have also incorporated some concepts proposed by other researchers in the polyinstantiation arena.
Reference: 15. <author> Sushil Jajodia and Ravi S. Sandhu, </author> <title> "Toward a multilevel secure relational data model," </title> <booktitle> Proc. ACM SIGMOD Int'l. Conf. on Management of Data, </booktitle> <address> Denver, Col-orado, </address> <month> May 29-31, </month> <year> 1991, </year> <pages> pages 50-59. </pages>
Reference-contexts: We assume that the readers are familiar with the basic concepts of the standard (single-level) as well as multilevel relations. We refer the readers to [14] or <ref> [15] </ref> for a detailed exposition. A multilevel relation is said to be polyinstantiated when it contains two or more tuples with the same "apparent" primary key values. The concept of apparent primary key was introduced by Denning et al. in [3].
Reference: 16. <author> Sushil Jajodia and Ravi S. Sandhu, </author> <title> "Enforcing Primary Key Requirements in Multilevel Relations," </title> <booktitle> Proc. 4th RADC Workshop on Multilevel Database Security, </booktitle> <address> Rhode Island, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: Polyinstantiation should similarly be viewed as a technique which can be used for better or for worse. It is important to understand that there is nothing fundamental about the occurrence of polyinstantiation. Jajodia and Sandhu <ref> [16, 23] </ref> have shown how it is possible to prohibit polyinstantiation securely (i.e., without leakage of secret information or denial-of-service). In other words, if you don't like it you can get rid of it completely and securely.
Reference: 17. <author> Teresa F. Lunt, Dorothy E. Denning, Roger R. Schell, Mark Heckman, and William R. Shockley, </author> <title> "The SeaView security model." </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 16, No. 6, </volume> <month> June </month> <year> 1990, </year> <pages> pages 593-607. </pages>
Reference: 18. <author> Teresa F. Lunt and Donovan Hsieh, </author> <title> "Update semantics for a multilevel relational database." Database Security IV: Status and Prospects, </title> <editor> S. Jajodia and C. E. Landwehr, (editors), </editor> <publisher> North-Holland, </publisher> <year> 1991, </year> <pages> pages 281-296. </pages>
Reference: 19. <author> Teresa F. Lunt, "Polyinstantiation: </author> <title> an inevitable part of a multilevel world." </title> <booktitle> Proc. IEEE Workshop on Computer Security Foundations, </booktitle> <address> Franconia, New Hampshire, </address> <month> June </month> <year> 1991, </year> <pages> pages 236-238. </pages>
Reference-contexts: Systems which attach access classes to the tuples in a relation have limited expressive power and will not be discussed in this paper. There are two different types of polyinstantiation in multilevel relations with element level labeling <ref> [19] </ref>, as follows: entity polyinstantiation, and element polyinstantiation.
Reference: 20. <author> Ravi S. Sandhu, </author> <title> "The Schematic Protection Model: Its Definition and Analysis for Acyclic Attenuating Schemes." </title> <journal> Journal of ACM 35(2) </journal> <month> 404-432 </month> <year> (1988). </year>
Reference-contexts: One possibility is to tie the use of these privileges to some kind of a mandatory integrity label on the subject. Another possibility is to control the propagation of these privileges, by nondiscretionary means such as described in <ref> [20, 24] </ref>, so it can be determined who can possess them (i.e., with efficient safety analysis). The meaning of &lt;restricted,c&gt; in a data element is that ordinary c-users cannot modify this field. Only a c-user with the unrestrict privilege for that field is allowed to write into it.
Reference: 21. <author> Ravi S. Sandhu, Sushil Jajodia, and Teresa F. Lunt, </author> <title> "A new polyinstantiation integrity constraint for multilevel relations." </title> <booktitle> Proc. IEEE Workshop on Computer Security Foundations, </booktitle> <address> Franconia, New Hampshire, </address> <month> June </month> <year> 1990, </year> <pages> pages 159-165. </pages>
Reference-contexts: We will adhere to this requirement in the rest of this paper. It should be noted that certain problems with the concept of one-tuple-per-tuple-class in context of a partially ordered lattice were identified in <ref> [21] </ref>. These problems arise because [21] takes the following view: those attributes in a tuple that are classified below the tuple class are automatically derived from lower-level polyinstantiated tuples. PCS, however, takes the view that such attributes are explicitly derived by the user when constructing the higher-level tuple. <p> We will adhere to this requirement in the rest of this paper. It should be noted that certain problems with the concept of one-tuple-per-tuple-class in context of a partially ordered lattice were identified in <ref> [21] </ref>. These problems arise because [21] takes the following view: those attributes in a tuple that are classified below the tuple class are automatically derived from lower-level polyinstantiated tuples. PCS, however, takes the view that such attributes are explicitly derived by the user when constructing the higher-level tuple. <p> PCS, however, takes the view that such attributes are explicitly derived by the user when constructing the higher-level tuple. PCS therefore does not suffer from the problems identified in <ref> [21] </ref>. 2.3 Update Propagation One of the subtleties involved in maintaining plausible cover stories is consistency across different levels. <p> Previous work on the semantics of null in polyinstantiated databases has taken the view that null's are subsumed by non-null values independent of the access class <ref> [9, 21] </ref>. In this case the first tuple in the following relation Starship Objective Destination TC Enterprise U Exploration U null U U Enterprise U Exploration U Rigel S S is subsumed by the second tuple, resulting in the following relation used in our polylow example of section 3.3. <p> The fact that we have null's rather than data values in the polyinstantiated field has no bearing on this issue. We note that the semantics of null in <ref> [9, 21] </ref> require all null values to be classified at the level of the apparent key (U in this case), thereby deeming the second tuple as illegal. 4.3 The Semantics of Update Our interpretation of the semantics of an SQL UPDATE command is identical to the one in the standard relational
Reference: 22. <author> Ravi S. Sandhu and Sushil Jajodia, </author> <title> "Integrity Mechanisms in Database Management Systems." </title> <booktitle> Proc. 13th NIST-NCSC National Computer Security Conference, </booktitle> <address> Washington, D.C., </address> <month> October </month> <year> 1990, </year> <pages> pages 526-540. </pages>
Reference-contexts: The fact that the data element is restricted at all levels below c can be verified by the usual integrity checking mechanisms in a DBMS <ref> [22] </ref>. However, to guarantee this at levels incomparable with c is more tricky. In preparing to enter a data value at the c level, we would need to start a system-low (really data element low) process which can then write-up.
Reference: 23. <author> Ravi S. Sandhu and Sushil Jajodia, </author> <title> "Honest Databases That Can Keep Secrets." </title> <booktitle> Proc. 14th NIST-NCSC National Computer Security Conference, </booktitle> <address> Washington, D.C., </address> <month> October </month> <year> 1991, </year> <pages> pages 267-282. </pages>
Reference-contexts: Polyinstantiation should similarly be viewed as a technique which can be used for better or for worse. It is important to understand that there is nothing fundamental about the occurrence of polyinstantiation. Jajodia and Sandhu <ref> [16, 23] </ref> have shown how it is possible to prohibit polyinstantiation securely (i.e., without leakage of secret information or denial-of-service). In other words, if you don't like it you can get rid of it completely and securely. <p> We discuss the prevention of entity and element polyinstantiation separately below. 3.1 Source of Entity Polyinstantiation Entity polyinstantiation can occur in basically two different ways, which we respectively call polyhigh and polylow for ease of reference <ref> [23] </ref>. 1. Polyhigh: A high user inserts a tuple with a primary key that already exists at the low level. 2. Polylow: A low user inserts a tuple with a primary key that already exists at the high level. Polyhigh is easily prevented without disclosing secret information. <p> The basic idea is to introduce a special symbol denoted by "restricted" as the possible value of a data element <ref> [23] </ref>. <p> The concept of restricted is straightforward, so long as we have a totally ordered lattice. In the general case of a partially ordered lattice some subtleties arise. How to completely eliminate polyinstantiation using restricted is discussed at length in <ref> [23] </ref>. In general, updating the value of a data element to restricted is a safe operation from a polyinstantiation viewpoint; that is, it cannot cause polyinstantiation. <p> However, to guarantee this at levels incomparable with c is more tricky. In preparing to enter a data value at the c level, we would need to start a system-low (really data element low) process which can then write-up. A protocol for this purpose is described in <ref> [23] </ref>. 8 4 SEMANTICS OF PCS We now describe and motivate the intuitive semantics underlying our concept of PCS (i.e., polyinstantiation for cover stories). A formal model is given in the appendix.
Reference: 24. <author> Ravi S. Sandhu, </author> <title> "The Typed Access Matrix Model." </title> <booktitle> Proc. IEEE Symposium on Research in Security and Privacy, </booktitle> <address> Oakland, California, </address> <month> May </month> <year> 1992, </year> <pages> pages 122-136. </pages>
Reference-contexts: One possibility is to tie the use of these privileges to some kind of a mandatory integrity label on the subject. Another possibility is to control the propagation of these privileges, by nondiscretionary means such as described in <ref> [20, 24] </ref>, so it can be determined who can possess them (i.e., with efficient safety analysis). The meaning of &lt;restricted,c&gt; in a data element is that ordinary c-users cannot modify this field. Only a c-user with the unrestrict privilege for that field is allowed to write into it.

Reference: 1. <institution> A i 2 AK ) t[A i ] 6= null, </institution>
Reference: 2. <author> A i ; A j 2 AK ) t[C i ] = t[C j ], i.e., </author> <title> AK is uniformly classified, </title> <publisher> and </publisher>
Reference-contexts: The exact manner in which this is done is closely related to the precise polyinstantiation behavior of the relation (see <ref> [2] </ref> for a detailed discussion). In multilevel relations, a major issue is how access classes are assigned to data stored in relations.

References-found: 26

