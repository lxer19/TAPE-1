URL: http://www.cs.rutgers.edu/~ryder/516/info.ps
Refering-URL: http://www.cs.rutgers.edu/~ryder/516/516home.html
Root-URL: http://www.cs.rutgers.edu
Title: unfolds.) an exam late in the semester (i.e., a cumulative test) a 2 week individual
Author: Kremer and Ryder 
Note: COURSE INFORMATION 198:516 Programming Languages and Compilers II Spring 1997, Professors  The lectures will be taught by both Professors Kremer and Ryder; they both will grade the course as well. The required work for each student will consist of the following: (Note: this may be adjusted as the semester  biweekly study homeworks assigned to check your knowledge of the material. Answers to these assignments will be posted, but they will not be graded; they are for your use in learning the material and preparing for the exam. 2 Organizational Details  
Abstract: We have redesigned 198:516 so it is now a project-oriented course in which students will build and experiment with an optimizing compiler, both individually and in pairs. This compiler will input a stylized 3 address code (ILOC), an intermediate form for a typical imperative programming language. The goal of this course is to give you a firm foundation in how to build an optimizing compiler and understanding its capabilities. Our focus will be on standard optimizations and their interactions. This will include classical machine independent optimizations for imperative languages (e.g., def-use chains, dead code elimination, common subexpression elimination, constant propagation), internal representations of programs, and the theoretical foundations which ensure the correctness of the above transformations, namely, intraprocedural and interprocedural data flow analyses. * an individual student project (project 1), completed by week 6 of the semester. In this project each student will write code to perform a global optimization (chosen by the instructors) using def-use information. We will distribute test data for this project. Students will document their code and turn in a short (&lt;=5 pages) document describing their overall program structure and functionality. * participation in a team project with another student (project 2). This project will be started in week 7 of the semester and completed by the week classes end. It will involve experimentation with the interactions between several global optimizations. Again we expect commented code and a short document (&lt;=10 pages) describing overall program structure, functionality, experiments performed and their results. The results of the second project will be presented to the class by each team in a 15 minute oral report. The specification of second project may vary from team to team; students will select projects with instructor approval. We plan to grade the course based 35% on the exam, 30% on project 1, and 35% on project 2, but we reserve the right to adjust these weights. The class webpage is http://www.cs.rutgers.edu/~ryder/516home.html. 
Abstract-found: 1
Intro-found: 1
Reference: <author> V. Shreehdar and Guang Gao, </author> <title> "A Linear Time Algorithm for Placing Phi Nodes", </title> <journal> Journal of Programming Languages, </journal> <month> December </month> <year> 1995, </year> <note> (also see POPL95, </note> <month> pp 62-73); 6 Feb. </month> <title> 25 | (.5 lecture) Introduction to code motion, loop invariant motion (hoisting to preheaders). Project 1 due 3 7 Feb 25 and March 4 | (1 lecture) Constant propagation, intraprocedural and interprocedural algorithms, why this problem has interesting properties: the MOP is not MFP. </title> <note> Readings: </note> <author> Grove, Dan and Torczon, Linda, </author> <title> "Interprocedural Constant Propagation: A Study in Jump Function Implementation", </title> <booktitle> PLDI'93, </booktitle> <pages> pp 90-99. </pages>

Reference: <editor> Reading: (Instruction scheduling) T. Proebsing and C. Fischer, </editor> <title> "Linear-time, Optimal Code Scheduling for Delayed-Load Architectures", </title> <booktitle> ACM SIGPLAN'91 Conference on Programming Language Design and Implementation (PLDI'91), </booktitle> <address> Toronto, Ontario, Canada, </address> <month> pp.256-267. </month> <title> (Register allocation) Preston Briggs, Keith Cooper, and Linda Torczon, "Improvements to Graph Coloring for Register Allocation", </title> <journal> TOPLAS 16(3), </journal> <pages> pp 428-255, </pages> <month> May </month> <year> 1994. </year>
Reference: <author> Supplemental Reading: E. Altman, R. Govindarajan, and G. Gao, </author> <title> "Scheduling and Mapping: Software Pipelining in the Presence of Structural Hazards", </title> <booktitle> ACM SIGPLAN'95 Conference on Programming Language Design and Implementation (PLDI'95), </booktitle> <address> La Jolla, California, pp.139-150. </address>
Reference: <author> M. Chaiten, M. Auslander, A. Chandra, J. Cocke, M. Hopkins, and P. Markstein, </author> <title> "Register Allocation via Coloring", </title> <journal> Computer Languages, </journal> <volume> 6 </volume> <pages> 47-57, </pages> <month> January </month> <year> 1981. </year>

Reference: <author> Supplemental Reading: D. Callahan, S. Carr and K. Kennedy, </author> <title> "Improving Register Allocation for Subscripted Variables", </title> <booktitle> ACM SIGPLAN '90 Conference on Programming Language Design and Implementation (PLDI'90), </booktitle> <address> White Plains, New York, </address> <month> June </month> <year> 1990, </year> <pages> pp. 53-65. </pages>

References-found: 5

