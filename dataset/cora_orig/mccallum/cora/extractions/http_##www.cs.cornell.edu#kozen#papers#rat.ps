URL: http://www.cs.cornell.edu/kozen/papers/rat.ps
Refering-URL: http://www.cs.cornell.edu/kozen/papers/papers.html
Root-URL: http://www.cs.cornell.edu
Title: Rational Spaces and Set Constraints  
Author: Dexter Kozen 
Address: Ithaca, NY 14853-7501, USA  
Affiliation: Computer Science Department, Cornell University,  
Abstract: Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference. In this paper we investigate the topological structure of the spaces of solutions to systems of set constraints. We identify a family of topological spaces called rational spaces, which formalize the notion of a topological space with a regular or self-similar structure, such as the Cantor discontinuum or the space of runs of a finite automaton. We develop the basic theory of rational spaces and derive generalizations and proofs from topological principles of some results in the literature on set constraints.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aiken, D. Kozen, M. Vardi, and E. Wimmers. </author> <title> The complexity of set constraints. </title> <editor> In E. Borger, Y. Gurevich, and K. Meinke, editors, </editor> <booktitle> Proc. 1993 Conf. Computer Science Logic (CSL'93), volume 832 of Lect. Notes in Comput. Sci., </booktitle> <pages> pages 1-17. </pages> <institution> Eur. Assoc. Comput. Sci. </institution> <address> Logic, </address> <publisher> Springer, </publisher> <month> September </month> <year> 1993. </year>
Reference-contexts: They are strongly related to the hypergraphs introduced in <ref> [1] </ref>, the only essential difference being the inclusion of an acceptance condition in the former. The relation of finite tree set automata and finite hypergraphs to set constraints has been well studied [1,2,11,12,21,28]. Definition 2 Let be a finite ranked alphabet. <p> First, however, let us look at some examples of rational spaces. Example 9 A simple but revealing example is the Cantor discontinuum. This space can be constructed by starting from the closed real unit interval <ref> [0; 1] </ref> and applying the following operation: delete the "middle third", i.e., the open interval ( 1 3 ; 2 3 ); then delete the middle thirds of the remaining intervals; and so on. The Cantor discontinuum consists of points that are never deleted. <p> Let S be a finite system of set constraints over and X. In <ref> [1] </ref> it was shown how to construct a finite hypergraph (D; E) whose runs are in one-to-one correspondence with the solutions : X ! 2 T of S, where X is the set of variables occurring in S. This result is also implicit in [11].
Reference: [2] <author> A. Aiken, D. Kozen, and E. Wimmers. </author> <title> Decidability of systems of set constraints with negative constraints. </title> <institution> Infor. and Comput., </institution> <year> 1995. </year> <note> To appear. Also Cornell University Tech. Report 93-1362, </note> <month> June, </month> <year> 1993. </year>
Reference-contexts: Sixth Int. Joint Conf. Theory and Practice of Software Develop. (TAPSOFT'95), volume 915 of Lect. Notes in Comput. Sci., pages 42-61. Springer, May 1995. Preprint submitted to Elsevier Preprint 5 July 1995 Many results in the literature on set constraints are topological in flavor. For example, Aiken et al. <ref> [2] </ref> prove that mixed positive and negative set constraints are strictly more expressive than positive constraints alone. The proof of this result is based on a compactness lemma which states that a system of positive constraints is satisfiable if and only if all finite subsets are satisfiable. <p> One can show that the topology on this space is generated by subbasic clopen (closed and open) sets f j j= t xg and f j j= t ~ xg for t 2 T and x 2 X. It was shown in <ref> [2] </ref> that this space is compact. We will show in x4 below that this space has the following representation as a rational space. <p> We rederive several results in the literature on set constraints and tree set automata in terms of rational spaces. In many cases we are able to generalize the results and give shorter proofs that reveal the topological principles at work. 5.1 Positive and Negative Constraints In <ref> [2] </ref>, Aiken et al. prove that mixed positive and negative set constraints are strictly more expressive than positive constraints alone. The proof of this result is based on a compactness lemma which states that a system of positive constraints is satisfiable if and only if all finite subsets are satisfiable. <p> The proof of this result is based on a compactness lemma which states that a system of positive constraints is satisfiable if and only if all finite subsets are satisfiable. Under the correspondence of Theorem 31, the compactness lemma of <ref> [2] </ref> is equivalent to the compactness of the space R (2 X ; ?).
Reference: [3] <author> A. Aiken and B. Murphy. </author> <title> Implementing regular tree expressions. </title> <booktitle> In Proc. 1991 Conf. Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 427-447, </pages> <month> August </month> <year> 1991. </year>
Reference: [4] <author> A. Aiken and B. Murphy. </author> <title> Static type inference in a dynamically typed language. </title> <booktitle> In Proc. 18th Symp. Principles of Programming Languages, </booktitle> <pages> pages 279-290. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1991. </year>
Reference: [5] <author> A. Aiken and E. Wimmers. </author> <title> Solving systems of set constraints. </title> <booktitle> In Proc. 7th Symp. Logic in Computer Science, </booktitle> <pages> pages 329-340. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1992. </year>
Reference: [6] <author> L. Bachmair, H. Ganzinger, and U. Waldmann. </author> <title> Set constraints are the monadic class. </title> <booktitle> In Proc. 8th Symp. Logic in Computer Science, </booktitle> <pages> pages 75-83. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1993. </year>
Reference: [7] <author> W. Charatonik and L. Pacholski. </author> <title> Negative set constraints with equality. </title> <booktitle> In Proc. 9th Symp. Logic in Computer Science, </booktitle> <pages> pages 128-136. </pages> <publisher> IEEE, </publisher> <month> July </month> <year> 1994. </year>
Reference: [8] <author> W. Charatonik and L. Pacholski. </author> <title> Set constraints with projections are in nexptime. </title> <booktitle> In Proc. 35th Symp. Foundations of Computer Science, </booktitle> <pages> pages 642-653. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1994. </year>
Reference: [9] <author> A. Cheng and D. Kozen. </author> <title> A complete Gentzen-style axiomatization for set constraints. </title> <type> Technical Report TR95-1518, </type> <institution> Cornell University, </institution> <month> May </month> <year> 1995. </year> <month> 23 </month>
Reference-contexts: For example, it should be possible to derive an alternative proof of Theorem 34 by taking fixpoints of contractive self-embeddings. Alfons Geser has also pointed out a strong similarity to fractals, which is another connection that may be worth investigating. In <ref> [9] </ref>, we apply these results further to provide a Gentzen-style axiomatization involving sequents ` , where and are finite sets of set constraints, and give completeness and incompleteness results for this system. 22 Acknowledgement I am indebted to Ed Brinksma, Allan Cheng, Hartmut Ehrig, Alfons Geser, Anil Nerode, Vaughan Pratt, Vladimiro
Reference: [10] <author> J. Englefriet. </author> <title> Tree automata and tree grammars. </title> <type> Technical Report DAIMI FN-10, </type> <institution> Aarhus University, </institution> <month> April </month> <year> 1975. </year>
Reference-contexts: The resulting constraints are of the desired form. 2 2.3 Regular Sets A subset of T is regular if it is described by a finite bottom-up tree automaton <ref> [10] </ref>; equivalently, if it is some set x 1 described by a system of simultaneous set equations of the form x i = ' i (x 1 ; : : : ; x m ) ; 1 i n (15) in which each variable x i occurs on the left hand
Reference: [11] <author> R. Gilleron, S. Tison, and M. Tommasi. </author> <title> Solving systems of set constraints using tree automata. </title> <journal> In Proc. Symp. Theor. Aspects of Comput. Sci., </journal> <volume> volume 665, </volume> <pages> pages 505-514. </pages> <note> Springer-Verlag Lect. Notes in Comput. Sci., </note> <month> February </month> <year> 1993. </year>
Reference-contexts: It is well known that the compactness of classical propositional and predicate logic is essentially a topological result: logical compactness is equivalent to the topological compactness of a dual space. This is also the case here. In <ref> [11] </ref>, Gilleron et al. introduce tree set automata. Among other results, they establish various closure properties of these automata and show that every satisfiable finite system of set constraints has a regular solution. <p> Once this definition has been made and the basic theory developed, it is possible to rederive some of the results mentioned above from general principles, and in some cases give generalizations. For example, the result of <ref> [11] </ref> that every satisfiable finite system of set constraints has a regular solution is tantamount to the fact that every nonempty finitary rational space contains a rational point. (A rational point is a finitary singleton rational subspace.) In fact, every finitary rational space is a complete metric space, and is the <p> For example, the system x = a [ g (y) y = g (x) (16) has the unique regular solution (x) = fg n (a) j n eveng (y) = fg n (a) j n oddg : 2.4 Tree Set Automata and Hypergraphs Tree set automata were introduced in <ref> [11] </ref>. They are strongly related to the hypergraphs introduced in [1], the only essential difference being the inclusion of an acceptance condition in the former. The relation of finite tree set automata and finite hypergraphs to set constraints has been well studied [1,2,11,12,21,28]. <p> This also corresponds to the condition COND ! of <ref> [11] </ref>. 6 There exists a run in (D; E) if and only if (D; E) has an entire induced sub--hypergraph: an entire induced subhypergraph on D 0 D allows the definition of a run : T ! D 0 by induction; conversely, for any run , the induced subhypergraph on the <p> In [1] it was shown how to construct a finite hypergraph (D; E) whose runs are in one-to-one correspondence with the solutions : X ! 2 T of S, where X is the set of variables occurring in S. This result is also implicit in <ref> [11] </ref>. One can construct (D; E) by various alternative methods [2,19,21]. Here is yet another method. Let F be any subset of T +B (X) (finite or infinite) containing X and closed under subexpressions. <p> an entire induced subhypergraph of D. (Note, however, that in general R ( S S x R (D x )! A counterexample is given below in x5.4.) Applied to (29), this says that the essential subspace of R (D) is entire. 2 5.3 Density of Rational Points Gilleron et al. <ref> [11] </ref> prove that every satisfiable finite system of set constraints has a regular solution. Under the correspondence of Theorem 31, this reduces to the following fact about finitary rational spaces: Proposition 33 Every nonempty finitary rational space contains a rational point. PROOF. <p> By Proposition 33, any nonempty such A contains a rational point. Thus the set of rational points is dense in R (D), and its closure is R (D). 2 5.4 Closure Properties of Tree Set Automata In <ref> [11] </ref>, it is claimed without proof that the family of languages accepted by tree set automata is closed under (finite) union, intersection, and cylindrification. Closure under intersection can be shown as follows. Let D x be an indexed family of tree set automata with tuples A x of accept sets. <p> If D is a tree set automaton, take the rational product D fi f0; 1g of D with a two-element unrestricted hypergraph. For A an accept set in D, take A 0 = 1 1 (A), and add the new accept set 1 Contrary to the claim of <ref> [11] </ref>, the family of languages accepted by tree set automata is only closed under union for signatures containing at most one constant or at least one symbol of arity two or greater.
Reference: [12] <author> R. Gilleron, S. Tison, and M. Tommasi. </author> <title> Solving systems of set constraints with negated subset relationships. </title> <booktitle> In Proc. 34th Symp. Foundations of Comput. Sci., </booktitle> <pages> pages 372-380. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1993. </year>
Reference: [13] <author> N. Heintze. </author> <title> Set Based Program Analysis. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1993. </year>
Reference: [14] <author> N. Heintze and J. Jaffar. </author> <title> A decision procedure for a class of set constraints. </title> <booktitle> In Proc. 5th Symp. Logic in Computer Science, </booktitle> <pages> pages 42-51. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1990. </year>
Reference: [15] <author> N. Heintze and J. Jaffar. </author> <title> A finite presentation theorem for approximating logic programs. </title> <booktitle> In Proc. 17th Symp. Principles of Programming Languages, </booktitle> <pages> pages 197-209. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1990. </year>
Reference: [16] <author> N. D. Jones and S. S. Muchnick. </author> <title> Flow analysis and optimization of LISP-like structures. </title> <booktitle> In Proc. 6th Symp. Principles of Programming Languages, </booktitle> <pages> pages 244-256. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1979. </year>
Reference: [17] <author> B. Jonsson and A. Tarski. </author> <title> Boolean algebras with operators. </title> <journal> Amer. J. Math., </journal> <volume> 73 </volume> <pages> 891-939, </pages> <year> 1951. </year>
Reference: [18] <author> B. Jonsson and A. Tarski. </author> <title> Boolean algebras with operators. </title> <journal> Amer. J. Math., </journal> <volume> 74 </volume> <pages> 127-162, </pages> <year> 1952. </year>
Reference: [19] <author> D. Kozen. </author> <title> Logical aspects of set constraints. </title> <editor> In E. Borger, Y. Gurevich, and K. Meinke, editors, </editor> <booktitle> Proc. 1993 Conf. Computer Science Logic (CSL'93), volume 832 of Lect. Notes in Comput. Sci., </booktitle> <pages> pages 175-188. </pages> <institution> Eur. Assoc. Comput. Sci. </institution> <address> Logic, </address> <publisher> Springer, </publisher> <month> September </month> <year> 1993. </year>
Reference-contexts: Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [11,12], type theory [23,24], first-order monadic logic [6,7], Boolean algebras with operators [17,18], and modal logic <ref> [19] </ref>. There are algebraic and topological formulations, corresponding roughly to "soft" and "hard" typing respectively, which are related by Stone duality [19]. ? In P. D. Mosses, M. Nielsen, and M. I. Schwartzbach, editors, Proc. Sixth Int. Joint Conf. Theory and Practice of Software Develop. (TAPSOFT'95), volume 915 of Lect. <p> There are strong connections to automata theory [11,12], type theory [23,24], first-order monadic logic [6,7], Boolean algebras with operators [17,18], and modal logic <ref> [19] </ref>. There are algebraic and topological formulations, corresponding roughly to "soft" and "hard" typing respectively, which are related by Stone duality [19]. ? In P. D. Mosses, M. Nielsen, and M. I. Schwartzbach, editors, Proc. Sixth Int. Joint Conf. Theory and Practice of Software Develop. (TAPSOFT'95), volume 915 of Lect. Notes in Comput. Sci., pages 42-61. Springer, May 1995. <p> We write S j= S 0 if S j= ff for all ff 2 S 0 . We say S and S 0 are logically equivalent if S j= S 0 and S 0 j= S. 2.2 Termset Algebras Termset algebras were introduced in <ref> [19] </ref>. <p> " y n ) = f (x 1 ; : : : ; x n ) " f (y 1 ; : : : ; y n ) (12) ~ f (x 1 ; : : : ; x n ) = g6=f 1 The term closed was used in <ref> [19] </ref>. This terminology will be unsuitable in the present context because of the potential of confusion with topological closure. 4 [ i=1 | -z - ; ~ x i ; 1; : : : ; 1 ni Property (14) is called the generalized DeMorgan law. <p> However, it is a product of finitary spaces, one for each x 2 X, as can be seen by reversing the binding order of t and x in the -expression (19). Example 12 Every termset algebra has a set-theoretic representation as a topological term automaton whose topology is Stone <ref> [19] </ref>. These automata were introduced in [23,24]. <p> By Theorem 30, every solution of S 1 is also a solution of S 2 , thus S 1 j= S 2 . 2 We remark that the Stone dual St (F X =S) of the free termset algebra on generators X modulo S <ref> [19] </ref>, embedded in 2 T +B (X) in the natural way, gives rise to an induced subspace R (St (F X =S)) of R (2 T +B (X) ; S). 5 Applications In this section we apply the theory of rational spaces to set constraints.
Reference: [20] <author> D. Kozen. </author> <title> Set constraints and logic programming. </title> <type> Technical Report 94-1467, </type> <institution> Cornell University, </institution> <month> November </month> <year> 1994. </year>
Reference: [21] <author> D. Kozen. </author> <title> Set constraints and logic programming (abstract). </title> <editor> In J.-P. Jouannaud, editor, </editor> <booktitle> Proc. First Conf. Constraints in Computational Logics (CCL'94), volume 845 of Lect. Notes in Comput. Sci., </booktitle> <pages> pages 302-303. </pages> <publisher> ESPRIT, Springer, </publisher> <month> September </month> <year> 1994. </year>
Reference-contexts: Considerable recent effort has focussed on the complexity of the satisfiability problem [1,2,5-8,11,12,14,28]. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain <ref> [21] </ref>. Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [11,12], type theory [23,24], first-order monadic logic [6,7], Boolean algebras with operators [17,18], and modal logic [19].
Reference: [22] <author> D. Kozen. </author> <title> Rational spaces and set constraints. </title> <editor> In P. D. Mosses, M. Nielsen, and M. I. Schwartzbach, editors, </editor> <booktitle> Proc. Sixth Int. Joint Conf. Theory and Practice of Software Develop. (TAPSOFT'95), volume 915 of Lect. Notes in Comput. Sci., </booktitle> <pages> pages 42-61. </pages> <publisher> Springer, </publisher> <month> May </month> <year> 1995. </year>
Reference-contexts: The support of the National Science Foundation under grant CCR-9317320 and the U.S. Army Research Office through the ACSyAM branch of the Mathematical Sciences Institute of Cornell University under contract DAAL03-91-C-0027 is gratefully acknowledged. A previous version of this paper appeared in <ref> [22] </ref>.
Reference: [23] <author> D. Kozen, J. Palsberg, and M. I. Schwartzbach. </author> <title> Efficient recursive subtyping. </title> <booktitle> In Proc. 20th Symp. Princip. Programming Lang., </booktitle> <pages> pages 419-428. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1993. </year>
Reference: [24] <author> D. Kozen, J. Palsberg, and M. I. Schwartzbach. </author> <title> Efficient inference of partial types. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 49(2) </volume> <pages> 306-324, </pages> <month> October </month> <year> 1994. </year>
Reference: [25] <author> P. Mishra. </author> <title> Towards a theory of types in PROLOG. </title> <booktitle> In Proc. 1st Symp. Logic Programming, </booktitle> <pages> pages 289-298. </pages> <publisher> IEEE, </publisher> <year> 1984. </year>
Reference: [26] <author> P. Mishra and U. Reddy. </author> <title> Declaration-free type checking. </title> <booktitle> In Proc. 12th Symp. Principles of Programming Languages, </booktitle> <pages> pages 7-21. </pages> <publisher> ACM, </publisher> <year> 1985. </year>
Reference: [27] <author> J. C. Reynolds. </author> <title> Automatic computation of data set definitions. </title> <booktitle> In Information Processing 68, </booktitle> <pages> pages 456-461. </pages> <publisher> North-Holland, </publisher> <year> 1969. </year>
Reference: [28] <author> K. Stefansson. </author> <title> Systems of set constraints with negative constraints are nexptime-complete. </title> <booktitle> In Proc. 9th Symp. Logic in Computer Science, </booktitle> <pages> pages 137-141. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1994. </year>
Reference: [29] <author> J. Young and P. O'Keefe. </author> <title> Experience with a type evaluator. </title> <editor> In D. Bjtrner, A. P. Ershov, and N. D. Jones, editors, </editor> <booktitle> Partial Evaluation and Mixed Computation, </booktitle> <pages> pages 573-581. </pages> <publisher> North-Holland, </publisher> <year> 1988. </year> <month> 25 </month>
References-found: 29

