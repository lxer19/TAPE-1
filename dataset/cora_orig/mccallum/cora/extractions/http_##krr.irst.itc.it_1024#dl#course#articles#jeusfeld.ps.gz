URL: http://krr.irst.itc.it:1024/dl/course/articles/jeusfeld.ps.gz
Refering-URL: http://krr.irst.itc.it:1024/dl/course/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fbuchheit,nuttg@dfki.uni-sb.de  fjeusfeld,staudtg@informatik.rwth-aachen.de  
Title: Subsumption between Queries to Object-Oriented Databases  
Author: Martin Buchheit Manfred A. Jeusfeld Werner Nutt Martin Staudt 
Note: This work was supported in part by the Commission of the European Communities under ESPRIT Basic Research Action 6810 (Compulog 2), by the German Ministry of Research and Technology under grant ITW 92-01 (TACOS), and by the Ministry of Science and Research of Nordrhein-Westfalen.  
Address: D-66123 Saarbrucken, Germany,  V, Ahornstr. 55, D-52056 Aachen, Germany,  
Affiliation: German Research Center for Artificial Intelligence (DFKI), Stuhlsatzenhausweg 3,  RWTH Aachen, Informatik  
Abstract: Most work on query optimization in relational and object-oriented databases has concentrated on tuning algebraic expressions and the physical access to the database contents. The attention to semantic query optimization, however, has been restricted due to its inherent complexity. We take a second look at the problem for queries in object-oriented databases and find that reasoning techniques for concept languages developed in Artificial Intelligence apply for the following reasons: concept languages have been tailored for efficiency and their semantics is compatible with class and query definitions in object-oriented databases. We propose a query optimizer which decides subset relationships between a query and a view (a simpler query whose answer is stored) in polynomial time. 
Abstract-found: 1
Intro-found: 1
Reference: [AK89] <author> S. Abiteboul and P. Kanellakis. </author> <title> Object identity as a query language primitive. </title> <booktitle> In Proc. ACM-SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 159-173, </pages> <address> Port-land, Oregon, </address> <year> 1989. </year>
Reference-contexts: In OODB's classes are used to represent sets of objects and thus it is natural to use them also for describing query results. Object-oriented data models disagree as to whether new objects can be created as answers to queries or not (see e.g., <ref> [AK89] </ref>). In the object model presented here we restrict answer objects to existing objects 3 that are deduced as instances of so-called query classes. In contrast to the classes constituting the database schema the membership conditions in the declarations of query classes are necessary and sufficient.
Reference: [ASU79] <author> A. V. Aho, Y. Sagiv, and J. D. Ullman. </author> <title> Efficient optimization of a class of relational expressions. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 4(4) </volume> <pages> 435-454, </pages> <year> 1979. </year>
Reference-contexts: However, the objective of this work was not reusing queries, but computing for a given query 17 an equivalent one by removing unnecessary conjuncts. It is known that deciding containment of conjunctive queries is NP-hard, even if all predicates involved are binary. Aho et al. <ref> [ASU79] </ref> and Johnson and Klug [JK83] identified classes of conjunctive queries for which subsumption can be decided in polynomial time.
Reference: [BCD92] <author> F. Bancilhon, S. Cluet, and C. Delobel. </author> <title> A query language for O 2 . In F. </title> <editor> Bancil-hon, C. Delobel, and P. Kanellakis, editors, </editor> <title> Building and Object-oriented Database System The Story of O 2 , pages 234-255. </title> <publisher> Morgan Kaufmann Publ., </publisher> <year> 1992. </year>
Reference-contexts: Obviously, there is a direct correspondence between the expressiveness of the language SL and the handled classes of constraints. Object-oriented Query Optimization. Object-oriented database systems like O 2 <ref> [OT92, BCD92] </ref> and ObjectStore [OHMS92] focus query optimization on the use of physical clustering strategies and indexes. In O 2 , indexes are quite flexible by allowing a membership condition and computed attributes specified as path expressions, similar to the role of views presented in this paper.
Reference: [BHHM91] <author> H. Boley, P. Hanschke, K. Hinkelmann, and M. Meyer. COLAB: </author> <title> A hybrid knowledge compilation laboratory. </title> <booktitle> In 3rd Int. Workshop on Data, Expert Knowledge and Decisions, </booktitle> <address> Reisensburg, Germany, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: A similar strategy is pursued in the extended relational database system Postgres [SK91]. Cost models and benchmark resuls are in [KKM91] and [Han87] (for relational databases). There are several other systems combining advantages of reasoning in concept languages with object-oriented (e.g., [SLT91, LRS92]) or rule-based (e.g., <ref> [BHHM91] </ref>) representation languages by a hybrid system architecture.
Reference: [CGM88] <author> U.S. Chakravarthy, J. Grant, and J. Minker. </author> <title> Foundations of semantic query optimization for deductive databases. </title> <editor> In J. Minker, editor, </editor> <booktitle> Foundations of deductive databases and Logic programming, </booktitle> <pages> pages 243-273. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference-contexts: Semantic optimization techniques were first proposed in [Kin81, HZ80, Jar84] in the context of relational databases and dealt with rather simple types of constraints stating e.g., referential integrity and functional dependencies. For deductive databases and general integrity constraints in clausal form, <ref> [CGM88, CGM90, GL92, Kow92] </ref> describe a rewriting of queries and rules. This technique has also been used for generating cooperative answers [Gaa92].
Reference: [CGM90] <author> U.S. Chakravarthy, J. Grant, and J. Minker. </author> <title> Logic based approach to semantic query optimization. </title> <journal> ACM Trans. on Database Systems, </journal> <volume> 5(2) </volume> <pages> 162-207, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Semantic optimization techniques were first proposed in [Kin81, HZ80, Jar84] in the context of relational databases and dealt with rather simple types of constraints stating e.g., referential integrity and functional dependencies. For deductive databases and general integrity constraints in clausal form, <ref> [CGM88, CGM90, GL92, Kow92] </ref> describe a rewriting of queries and rules. This technique has also been used for generating cooperative answers [Gaa92].
Reference: [Cha92] <author> E. P. F. Chan. </author> <title> Containment and minimization of positive conjunctive queries in OODB's. </title> <booktitle> In Proc. of the Eleventh ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 202-211, </pages> <address> San Diego, CA, </address> <year> 1992. </year>
Reference-contexts: Neither of these classes comprises the language QL, so that QL concepts can be seen as a naturally occurring class of conjunctive queries with polynomial containment problem. In all this work on conjunctive queries no schema information like in our case has been taken into account. Recently, Chan <ref> [Cha92] </ref> has investigated the optimization of conjunctive queries in an object-oriented setting. He considered some minimal schema information like subclass relationship and disjointness of classes. Although the containment problem for his language is obviously NP-hard, he did not address the question of complexity. Semantic Query Optimization.
Reference: [CW91] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for incremental view maintenance. </title> <booktitle> In Proc. 17th Int. Conf. on Very Large Databases, </booktitle> <pages> pages 577-589, </pages> <year> 1991. </year>
Reference: [DLNN91a] <author> F. M. Donini, M. Lenzerini, D. Nardi, and W. Nutt. </author> <title> The complexity of concept languages. </title> <editor> In James Allen, Richard Fikes, and Erik Sandewall, editors, </editor> <booktitle> Proc. of the 2nd Int. Conf. on Principles of Knowledge Representation and Reasoning KR-91, </booktitle> <pages> pages 151-162. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: This research has come up with techniques to determine consistency and subsumption of concepts and has assessed the complexity of these inferences for a variety of languages (see e.g., <ref> [DLNN91a] </ref>). We believe that this relationship between work on databases and AI offers a potential of cross-fertilization: database research can profit from reasoning techniques for concepts, and knowledge representation research can learn about properties of practically applied set descriptions like class schemas and queries in OODB's. The Problem.
Reference: [DLNN91b] <author> F. M. Donini, M. Lenzerini, D. Nardi, and W. Nutt. </author> <title> Tractable concept languages. </title> <booktitle> In Proc. of the 12th Int. Joint Conf. on Artificial Intelligence IJCAI-91, </booktitle> <address> Sydney, </address> <year> 1991. </year>
Reference-contexts: They bear strong similarities to languages for describing schemas and queries of OODB's. Subsumption of concepts has been studied for a variety of languages and the borderline between variants where reasoning is tractable and where not is by now well understood (see e.g., <ref> [DLNN91b] </ref>). Three points make the ideas of our approach more precise: * Clean and dirty parts of queries: A query is separated into a clean part that can be represented with the concept language, and a dirty part that goes beyond concept language expressibility.
Reference: [Gaa92] <author> T. Gaasterland. </author> <title> Generating cooperative answers in deductive databases. </title> <type> PhD thesis, </type> <institution> University of Maryland, Dept. of Computer Science, College Park, </institution> <year> 1992. </year>
Reference-contexts: For deductive databases and general integrity constraints in clausal form, [CGM88, CGM90, GL92, Kow92] describe a rewriting of queries and rules. This technique has also been used for generating cooperative answers <ref> [Gaa92] </ref>. Several papers [SO89, HLO91] deal with the implementation of semantic query optimizers, esp. schemes for deciding which rules and integrity constraints are actually promising profit for a given query.
Reference: [GL92] <author> T. Gaasterland and J. Lobo. </author> <title> Processing negation and disjunction in logic programs through integrity constraints. </title> <type> Technical report, </type> <institution> University of Maryland, </institution> <year> 1992. </year>
Reference-contexts: Semantic optimization techniques were first proposed in [Kin81, HZ80, Jar84] in the context of relational databases and dealt with rather simple types of constraints stating e.g., referential integrity and functional dependencies. For deductive databases and general integrity constraints in clausal form, <ref> [CGM88, CGM90, GL92, Kow92] </ref> describe a rewriting of queries and rules. This technique has also been used for generating cooperative answers [Gaa92].
Reference: [Han87] <author> E.N. Hanson. </author> <title> A performance analysis of view materialization strategies. </title> <booktitle> In Proc. 1987 ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 440-453, </pages> <address> San Francisco, CA, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: Specific OODB views called materialized functions have been investigated in [KMWZ91]. The functions are used for deriving attribute values which are stored in a separate data structure. A similar strategy is pursued in the extended relational database system Postgres [SK91]. Cost models and benchmark resuls are in [KKM91] and <ref> [Han87] </ref> (for relational databases). There are several other systems combining advantages of reasoning in concept languages with object-oriented (e.g., [SLT91, LRS92]) or rule-based (e.g., [BHHM91]) representation languages by a hybrid system architecture.
Reference: [HLO91] <author> H.H.Pang, H. Lu, </author> <title> and B.C. Ooi. An efficient semantic query optimization algorithm. </title> <booktitle> In Proc. Int. Conf. on DataEngineering, </booktitle> <pages> pages 326-335, </pages> <year> 1991. </year>
Reference-contexts: For deductive databases and general integrity constraints in clausal form, [CGM88, CGM90, GL92, Kow92] describe a rewriting of queries and rules. This technique has also been used for generating cooperative answers [Gaa92]. Several papers <ref> [SO89, HLO91] </ref> deal with the implementation of semantic query optimizers, esp. schemes for deciding which rules and integrity constraints are actually promising profit for a given query.
Reference: [HZ80] <author> M. Hammer and S.B. Zdonik. </author> <title> Knowledge based query processing. </title> <booktitle> In Proc. 6th VLDB Conf., </booktitle> <pages> pages 137-147, </pages> <address> Montreal, Canada, </address> <year> 1980. </year> <month> 20 </month>
Reference-contexts: Semantic Query Optimization. Semantic query optimization considers semantic knowledge (integrity constraints) for constructing query evaluation plans and is relevant due to the incorporation of schema knowledge in our algorithm. Semantic optimization techniques were first proposed in <ref> [Kin81, HZ80, Jar84] </ref> in the context of relational databases and dealt with rather simple types of constraints stating e.g., referential integrity and functional dependencies. For deductive databases and general integrity constraints in clausal form, [CGM88, CGM90, GL92, Kow92] describe a rewriting of queries and rules.
Reference: [Jar84] <author> M. Jarke. </author> <title> External semantic query simplification: A graph theoretic approach and its implementation in prolog. </title> <booktitle> In Proc. 1st Int. Conf. on Expert Database Systems, </booktitle> <pages> pages 467-482, </pages> <address> Kiawah Isl., SC, </address> <year> 1984. </year>
Reference-contexts: Semantic Query Optimization. Semantic query optimization considers semantic knowledge (integrity constraints) for constructing query evaluation plans and is relevant due to the incorporation of schema knowledge in our algorithm. Semantic optimization techniques were first proposed in <ref> [Kin81, HZ80, Jar84] </ref> in the context of relational databases and dealt with rather simple types of constraints stating e.g., referential integrity and functional dependencies. For deductive databases and general integrity constraints in clausal form, [CGM88, CGM90, GL92, Kow92] describe a rewriting of queries and rules.
Reference: [JJS93] <author> M. Jarke, M. A. Jeusfeld, and P. Szczurko. </author> <title> Three aspects of intelligent cooperation in the quality life cycle. </title> <booktitle> In Proc. Intl. Conf. Intelligent and Cooperative Information Systems, </booktitle> <address> Rotterdam, Netherlands, </address> <year> 1993. </year> <note> Keynote talk. </note>
Reference-contexts: The first user asking this query triggers the normal evaluation. A control component ("trader") memorizes the query and the location of the answer (the view). A new query is then checked for subsumption against such views. Such an environment is currently set up in a quality management project <ref> [JJS93] </ref> where autonomous data-intensive tools cover certain aspects of quality management in the industrial product life cycle. Since the trader manipulates schema and query descriptions it provides an excellent test bed for the application of the techniques presented in this paper.
Reference: [JK83] <author> D. S. Johnson and A. Klug. </author> <title> Optimizing conjunctive queries that contain untyped variables. </title> <journal> SIAM Journal of Computation, </journal> <volume> 12(4) </volume> <pages> 616-640, </pages> <year> 1983. </year>
Reference-contexts: It is known that deciding containment of conjunctive queries is NP-hard, even if all predicates involved are binary. Aho et al. [ASU79] and Johnson and Klug <ref> [JK83] </ref> identified classes of conjunctive queries for which subsumption can be decided in polynomial time.
Reference: [JS93] <author> M. Jeusfeld and Martin Staudt. </author> <title> Query optimization in deductive object bases. </title> <editor> In Freytag, Maier, and Vossen, editors, </editor> <title> Query Processing for Advanced Database Systems. </title> <publisher> Morgan Kaufmann, </publisher> <month> June </month> <year> 1993. </year>
Reference-contexts: The system modifies the query evaluation plans by adding access operations to the stored extensions of subsuming views, thus restricting the search space. We plan to implement such a subsumption checker within the deductive object base manager ConceptBase <ref> [JS93, SNJ93] </ref> which offers a schema and query language very similar to DL. 5 Related Work Our work relates to several fields of research in databases and AI. We shortly discuss the relationship to optimization of conjunctive queries, to semantic query optimization, and query optimization in existing OODB systems.
Reference: [Kin81] <author> J.J. King. QUIST: </author> <title> A system for semantic query optimization in relational databases. </title> <booktitle> In Proc. 7th VLDB Conf., </booktitle> <pages> pages 510-517, </pages> <year> 1981. </year>
Reference-contexts: Semantic Query Optimization. Semantic query optimization considers semantic knowledge (integrity constraints) for constructing query evaluation plans and is relevant due to the incorporation of schema knowledge in our algorithm. Semantic optimization techniques were first proposed in <ref> [Kin81, HZ80, Jar84] </ref> in the context of relational databases and dealt with rather simple types of constraints stating e.g., referential integrity and functional dependencies. For deductive databases and general integrity constraints in clausal form, [CGM88, CGM90, GL92, Kow92] describe a rewriting of queries and rules.
Reference: [KKM91] <author> A. Kemper, C. Kilger, and G. Moerkotte. </author> <title> Function materialization in object bases. </title> <booktitle> In Proc. 1991 ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 258-267, </pages> <address> Denver, Colorado, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Specific OODB views called materialized functions have been investigated in [KMWZ91]. The functions are used for deriving attribute values which are stored in a separate data structure. A similar strategy is pursued in the extended relational database system Postgres [SK91]. Cost models and benchmark resuls are in <ref> [KKM91] </ref> and [Han87] (for relational databases). There are several other systems combining advantages of reasoning in concept languages with object-oriented (e.g., [SLT91, LRS92]) or rule-based (e.g., [BHHM91]) representation languages by a hybrid system architecture.
Reference: [KKS92] <author> M. Kifer, W. Kim, and Y. Sagiv. </author> <title> Querying object-oriented databases. </title> <booktitle> In Proc. 1992 ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 393-402, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Summarizing, our labeled paths generalize the common notion of paths (see e.g., <ref> [KKS92] </ref>) in that they allow one after each step to filter the values of an attribute. Moreover, one can access the values at the end of the path through a label. <p> Our approach makes this overhead unnecessary since the triggers for view maintenance can be automatically generated from the logical representation of views. Path expressions, derived attributes, views, and membership conditions to views are very similar to XSQL <ref> [KKS92] </ref>. Our notion of queries and views extends XSQL by class membership constraints to each intermediate node in the path. On the other hand, XSQL provides generation of object identifiers which is not considered here. Specific OODB views called materialized functions have been investigated in [KMWZ91].
Reference: [KMWZ91] <author> A. Kemper, G. Moerkotte, H.D. Walter, and A. Zachmann. GOM: </author> <title> a strongly typed, persistent object model with polymorphism. </title> <booktitle> In Proc. of BTW, </booktitle> <pages> pages 198-217, </pages> <address> Kaiserlautern, Germany, March 1991. </address> <publisher> Springer-Verlag, </publisher> <address> IFB 270. </address>
Reference-contexts: Our notion of queries and views extends XSQL by class membership constraints to each intermediate node in the path. On the other hand, XSQL provides generation of object identifiers which is not considered here. Specific OODB views called materialized functions have been investigated in <ref> [KMWZ91] </ref>. The functions are used for deriving attribute values which are stored in a separate data structure. A similar strategy is pursued in the extended relational database system Postgres [SK91]. Cost models and benchmark resuls are in [KKM91] and [Han87] (for relational databases).
Reference: [Kow92] <author> W.L. Kowarschick. </author> <title> Semantic optimization: What are disjunctive residues useful for ? SIGMOD RECORD, </title> <booktitle> 21(3) </booktitle> <pages> 26-32, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Semantic optimization techniques were first proposed in [Kin81, HZ80, Jar84] in the context of relational databases and dealt with rather simple types of constraints stating e.g., referential integrity and functional dependencies. For deductive databases and general integrity constraints in clausal form, <ref> [CGM88, CGM90, GL92, Kow92] </ref> describe a rewriting of queries and rules. This technique has also been used for generating cooperative answers [Gaa92].
Reference: [LRS92] <author> C. Laasch, C. Rich, and H.-J. Schek. </author> <title> Cocoon and Krisys- a survey and comparison. </title> <type> Technical Report 10/92, </type> <institution> FB Informatik, Universitat Kaiserslautern, Kaiser-slautern, Germany, </institution> <year> 1992. </year>
Reference-contexts: A similar strategy is pursued in the extended relational database system Postgres [SK91]. Cost models and benchmark resuls are in [KKM91] and [Han87] (for relational databases). There are several other systems combining advantages of reasoning in concept languages with object-oriented (e.g., <ref> [SLT91, LRS92] </ref>) or rule-based (e.g., [BHHM91]) representation languages by a hybrid system architecture.
Reference: [LS91] <author> M. Lenzerini and A. Schaerf. </author> <title> Concept languages as query languages. </title> <booktitle> In Proc. of AAAI-91, </booktitle> <pages> pages 471-476, </pages> <address> Anaheim, CA, </address> <year> 1991. </year>
Reference-contexts: There are several other systems combining advantages of reasoning in concept languages with object-oriented (e.g., [SLT91, LRS92]) or rule-based (e.g., [BHHM91]) representation languages by a hybrid system architecture. The idea to use different concept languages for stating facts and for querying has also appeared in <ref> [LS91] </ref>. 18 6 Conclusions This paper proposed a query optimization technique for OODB's by exploiting the structural knowledge encoded in the schema and in the query definitions. Summarizing we used the following ideas: 1.
Reference: [OHMS92] <author> J. Orenstein, S. Haradhvala, B. Margulies, and D. Sakahara. </author> <title> Query processing in the ObjectStore database system. </title> <booktitle> In Proc. 1992 ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 403-412, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Obviously, there is a direct correspondence between the expressiveness of the language SL and the handled classes of constraints. Object-oriented Query Optimization. Object-oriented database systems like O 2 [OT92, BCD92] and ObjectStore <ref> [OHMS92] </ref> focus query optimization on the use of physical clustering strategies and indexes. In O 2 , indexes are quite flexible by allowing a membership condition and computed attributes specified as path expressions, similar to the role of views presented in this paper.
Reference: [OT92] <author> O 2 -Team. </author> <title> A technical overview of the O 2 system. </title> <editor> In P. Loucopoulos and R. Zicari, editors, </editor> <booktitle> Conceptual Modeling, Databases, and CASE, </booktitle> <pages> pages 337-356. </pages> <publisher> John Wiley & Sons, </publisher> <year> 1992. </year>
Reference-contexts: Obviously, there is a direct correspondence between the expressiveness of the language SL and the handled classes of constraints. Object-oriented Query Optimization. Object-oriented database systems like O 2 <ref> [OT92, BCD92] </ref> and ObjectStore [OHMS92] focus query optimization on the use of physical clustering strategies and indexes. In O 2 , indexes are quite flexible by allowing a membership condition and computed attributes specified as path expressions, similar to the role of views presented in this paper.
Reference: [SK91] <author> M. Stonebraker and G. Kemnitz. </author> <title> The Postgres next-generation database system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 78-93, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Specific OODB views called materialized functions have been investigated in [KMWZ91]. The functions are used for deriving attribute values which are stored in a separate data structure. A similar strategy is pursued in the extended relational database system Postgres <ref> [SK91] </ref>. Cost models and benchmark resuls are in [KKM91] and [Han87] (for relational databases). There are several other systems combining advantages of reasoning in concept languages with object-oriented (e.g., [SLT91, LRS92]) or rule-based (e.g., [BHHM91]) representation languages by a hybrid system architecture.
Reference: [SLT91] <author> M.H. Scholl, C. Laasch, and M. Tresch. </author> <title> Updatable views in object oriented databases. </title> <booktitle> In Proc. 2nd Int. Conf. on Deductive and Object-Oriented Databases, </booktitle> <pages> pages 189-207, </pages> <address> Munich, Germany, </address> <month> December </month> <year> 1991. </year> <note> Springer LNCS 566. </note>
Reference-contexts: A similar strategy is pursued in the extended relational database system Postgres [SK91]. Cost models and benchmark resuls are in [KKM91] and [Han87] (for relational databases). There are several other systems combining advantages of reasoning in concept languages with object-oriented (e.g., <ref> [SLT91, LRS92] </ref>) or rule-based (e.g., [BHHM91]) representation languages by a hybrid system architecture.
Reference: [SNJ93] <author> M. Staudt, H.W. Nissen, and M.A. Jeusfeld. </author> <title> Query by rule, class and concept. </title> <journal> Applied Intelligence, 1993. Special issue on knowledge base management, </journal> <note> to appear. 21 </note>
Reference-contexts: We assume that every state of the database gives rise to exactly one model of these formulas. This might be achieved in several ways: either all facts are explicitly stated, or some schema formulas are employed as deductive rules, by which additional facts are derived (see e.g., <ref> [SNJ93] </ref>). The important point is that every state defines a unique structure that satisfies the schema. 4 8 x. Patient (x) ) Person (x) 8 x; y. Patient (x) ^ takes (x; y) ) Drug (y) 8 x; y. <p> The query QueryPatient yields the formula given in Figure 4. Each conjunct corresponds to the clause with the same number within the definition of QueryPatient. In a framework that combines deductive databases and object-orientedness, the translated query class can be readily executed (see <ref> [SNJ93] </ref>). Based on the entire conceptual schema of a database, users and application programs usually work on subschemas that constitute their external view on the database. A common approach (e.g., in SQL) is to use for the definition of such views a sublanguage of the query language. <p> The system modifies the query evaluation plans by adding access operations to the stored extensions of subsuming views, thus restricting the search space. We plan to implement such a subsumption checker within the deductive object base manager ConceptBase <ref> [JS93, SNJ93] </ref> which offers a schema and query language very similar to DL. 5 Related Work Our work relates to several fields of research in databases and AI. We shortly discuss the relationship to optimization of conjunctive queries, to semantic query optimization, and query optimization in existing OODB systems.
Reference: [SO89] <author> S.T. Shenoy and Z.M. Ozsoyoglu. </author> <title> Design and implementation of a semantic query optimizer. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 1(3) </volume> <pages> 344-361, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: For deductive databases and general integrity constraints in clausal form, [CGM88, CGM90, GL92, Kow92] describe a rewriting of queries and rules. This technique has also been used for generating cooperative answers [Gaa92]. Several papers <ref> [SO89, HLO91] </ref> deal with the implementation of semantic query optimizers, esp. schemes for deciding which rules and integrity constraints are actually promising profit for a given query.
Reference: [Ull89] <author> J. D. Ullman. </author> <title> Principles of Database and Knowledge-Base Systems, Volume 2: The New Technologies. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, MD, </address> <year> 1989. </year>
Reference-contexts: If not, we have a state where an object is in C but not in D and therefore C is not subsumed by D. This approach is similar to the technique used for deciding inclusion of conjunctive queries (see <ref> [Ull89] </ref>). But the problem is more complicated in our case because we have to take into account the schema axioms. In particular, axioms of the form A v 9R.&gt; lead to complications, since they can enforce the generation of new objects. <p> Conjunctive Queries. A closer look at Table 1 reveals that QL concepts are equivalent to formulas, whose prefix has only existential quantifiers and whose matrix is a conjunction of positive function free atoms. Such formulas are known as conjunctive queries in the context of relational and deductive databases <ref> [Ull89] </ref>. Much effort has been devoted to the containment problem for such queries, i.e., subsumption between queries with respect to an empty schema. However, the objective of this work was not reusing queries, but computing for a given query 17 an equivalent one by removing unnecessary conjuncts.
Reference: [UO92] <author> T. Urpi and A. Olive. </author> <title> A method for change computation in deductive databases. </title> <booktitle> In Proc. 18th VLDB Conf., </booktitle> <pages> pages 225-237, </pages> <address> Vancouver,British Columbia, Canada, </address> <year> 1992. </year>
Reference: [WS92] <author> W. A. Woods and J. G. Schmolze. </author> <title> The KL-ONE family. </title> <editor> In F.W. Lehmann, editor, </editor> <booktitle> Semantic Networks in Artificial Intelligence, </booktitle> <pages> pages 133-178. </pages> <publisher> Pergamon Press, </publisher> <year> 1992. </year> <note> Published as a special issue of Computers & Mathematics with Applications, Volume 23, Number 2-9. 22 </note>
Reference-contexts: In object-oriented databases (OODB's), these sets are called classes and the elements are constrained by some|not too complicated|type expression. Similar expressions for describing classes of objects|so-called concept descriptions or simply concepts|have been investigated in Artificial Intelligence (AI), where they occur in knowledge representation languages of the kl-one family <ref> [WS92] </ref>. This research has come up with techniques to determine consistency and subsumption of concepts and has assessed the complexity of these inferences for a variety of languages (see e.g., [DLNN91a]).
References-found: 35

