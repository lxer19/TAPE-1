URL: http://www.csl.sri.com/reports/postscript/csl-95-4.ps.gz
Refering-URL: http://www.csl.sri.com/reports/postscript/
Root-URL: 
Title: Formal Verification of an Avionics Microprocessor  
Author: Mandayam K. Srivas Steven P. Miller Collins 
Note: Commercial Avionics  June 1995  
Address: Menlo Park CA 94025 USA  Cedar Rapids, IA 52498 USA  
Affiliation: Computer Science Laboratory SRI International  Rockwell International  
Abstract: SRI International Computer Science Laboratory Technical Report CSL-95-04 
Abstract-found: 1
Intro-found: 1
Reference: [BB94] <author> Derek L. Beatty and Randal E. Bryant. </author> <title> Formally verifying a microprocessor using a simulation methodology. </title> <booktitle> In Proceedings of the 31st Design Automation Conference, </booktitle> <pages> pages 596-602. </pages> <institution> Association for Computing Machinery, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: A number of microprocessor designs have been formally verified <ref> [BB94, Hun94, CJB78, Coo86, SGGH94, SB90, Win90] </ref>. However, the AAMP5 is significantly more complex, at both the macro and micro-architecture levels, than any other processor for which formal verification has been attempted; it has a large, complex instruction set, multiple data types and addressing modes, and a microcoded, pipelined implementation.
Reference: [BD94] <author> J. R. Burch and D. L. Dill. </author> <title> Automatic verification of pipelined microprocessor control. </title> <editor> In David Dill, editor, </editor> <booktitle> Computer-Aided Verification, CAV '94, </booktitle> <pages> pages 68-80, </pages> <address> Stanford, CA, </address> <month> June </month> <year> 1994. </year> <booktitle> Volume 818 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Similarly, several groups have performed automated verification of non-microcoded processors, of which Warren Hunt's FM8501 [Hun94] and subsequent FM9000 [HB92] are among the most substantial. The problems of pipeline correctness were also studied previously by Srivas and Bickford [SB90], by Saxe and Garland [SGGH94], Burch and Dill <ref> [BD94] </ref>, and Windley and Coe [WC94]. A very simple microcoded processor design developed by Mike Gordon called "Tamarack" serves as something of a benchmark for microprogram verification and was considered quite a challenge not so long ago [Joy88]. <p> Burch and Dill use a slightly different approach in <ref> [BD94] </ref> to handle the time skew between the two levels. They "run" the micromachine longer by an appropriate number of cycles by streaming in NOP instructions before relating the states of the macro and micromachines.
Reference: [BF93] <author> R. Butler and G. Finelli. </author> <title> The infeasibility of experimental quantification of life-critical software reliability. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(5) </volume> <pages> 66-76, </pages> <month> January </month> <year> 1993. </year>
Reference: [BG90] <author> S. Brock and C. George. </author> <title> The RAISE Method Manual. </title> <booktitle> Computer Resources International A/S, </booktitle> <year> 1990. </year>
Reference-contexts: Checklists were drawn up for use in the inspections based on earlier checklists used in inspecting VDM [Jon90] specifications, the RAISE Method Manual <ref> [BG90] </ref>, and checklists used for code inspections at Collins. Eleven inspections were held of the macro level specification covering thirty-one of the most important theories. Inspectors were required to review the designated theories ahead of time, using the checklists as guides, and record all potential defects encountered.
Reference: [BKM + 82] <author> D. Best, C. Kress, N. Mykris, J. Russel, and W. Smith. </author> <title> An advanced-architecture cmos/sos microprocessor. </title> <booktitle> IEEE Micro, </booktitle> <pages> pages 11|26, </pages> <month> August </month> <year> 1982. </year>
Reference-contexts: the use of formal methods, with verification of the AAMP5 microcode being the latest and most ambitious in the series. 2.2 AAMP Family of Microprocessors The Advanced Architecture Microprocessor (AAMP) consists of a Rockwell proprietary family of microprocessors based on the Collins Adaptive Processor System (CAPS) originally developed in 1972 <ref> [Roc90, BKM + 82] </ref>. The AAMP architecture is specifically designed for use with block-structured, high-level languages such as Ada in real-time embedded applications. <p> These are discussed in the following sections. A more detailed discussion can be found in <ref> [BKM + 82] </ref>. 4.1.1 Organization of Memory The AAMP provides separate address spaces for code memory and data memory. While not required by the AAMP architecture, code memory is typically implemented in ROM.
Reference: [BM79] <author> R. S. Boyer and J S. Moore. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1979. </year>
Reference-contexts: In comparison to other widely used verifica tion systems, such as HOL [GM93] and the Boyer-Moore prover <ref> [BM79] </ref>, the distinguishing characteristic of PVS is that it supports both a highly expres sive specification language and a very effective interactive theorem prover in which most of the low-level proof steps are automated. The system consists of a specification language, a parser, a typechecker, and an interactive proof checker.
Reference: [BMD92] <author> A. Burns, J. McDermid, and J. Dobson. </author> <title> On the meaning of safety and security. </title> <journal> Computer Journal, </journal> <volume> 35(1) </volume> <pages> 3-15, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: Conclusions and Lessons Learned The real problem was not how to use PVS, but how to build a precise mathematical model of our own microprocessor. Even so, widespread acceptance of a general purpose specification language such as PVS or Z <ref> [BMD92] </ref> by practicing engineers is likely to be an uphill battle. A more productive approach may be to develop specialized notations or models that fit a specific problem domain and that can automatically be translated into an underlying formalism such as PVS. <p> Enhancements to PVS could facilitate this. In particular, integrating PVS with the standard document preparation system used at Collins would allow us to intersperse the formal specification with the text and diagram style used currently, i.e., the "specification as a document" concept promoted in Z and CaDiZ <ref> [BMD92] </ref>. Validation of formal specifications is essential to have confidence in the correctness proofs. We found inspections worked well with formal specifications, were quite inexpensive, and provided a natural vehicle for training.
Reference: [But91] <author> Ricky W. Butler. </author> <title> NASA Langley's research program in formal methods. </title> <booktitle> In COMPASS '91 (Proceedings of the Sixth Annual 96 References 97 Conference on Computer Assurance), </booktitle> <pages> pages 157-162, </pages> <address> Gaithers-burg, MD, </address> <month> June </month> <year> 1991. </year> <institution> IEEE Washington Section. </institution>
Reference-contexts: Chapter 7 presents conclusions and lessons learned. 4 Chapter 2 Background 2.1 NASA Langley, SRI International, and Rock well Collins NASA Langley's research program in formal methods <ref> [But91] </ref> was established to bring formal methods technology to a sufficiently mature level for use by the United States aerospace industry.
Reference: [CJB78] <author> W. C. Carter, W. H. Joyner, Jr., and D. Brand. </author> <title> Microprogram verification considered necessary. </title> <booktitle> In National Computer Conference, </booktitle> <pages> pages 657-664. </pages> <booktitle> Volume 48, AFIPS Conference Proceedings, </booktitle> <year> 1978. </year>
Reference-contexts: A number of microprocessor designs have been formally verified <ref> [BB94, Hun94, CJB78, Coo86, SGGH94, SB90, Win90] </ref>. However, the AAMP5 is significantly more complex, at both the macro and micro-architecture levels, than any other processor for which formal verification has been attempted; it has a large, complex instruction set, multiple data types and addressing modes, and a microcoded, pipelined implementation.
Reference: [Coo86] <author> J. V. Cook. </author> <title> Final report for the C/30 microcode verification project. </title> <type> Technical Report ATR-86(6771)-3, </type> <institution> Computer Science Laboratory, The Aerospace Corporation, El Segundo, </institution> <address> CA, </address> <month> September </month> <year> 1986. </year> <month> Export-controlled. </month>
Reference-contexts: A number of microprocessor designs have been formally verified <ref> [BB94, Hun94, CJB78, Coo86, SGGH94, SB90, Win90] </ref>. However, the AAMP5 is significantly more complex, at both the macro and micro-architecture levels, than any other processor for which formal verification has been attempted; it has a large, complex instruction set, multiple data types and addressing modes, and a microcoded, pipelined implementation. <p> is not new: it was pioneered by Bill Carter [LCB74] at IBM in the 1970's and applied to elements of NASA's Standard Spaceborne Computer [LCB74]; in the 1980's a group at the Aerospace Corporation verified microcode for an implementation of the C/30 switching computer using a verification system called SDVS <ref> [Coo86] </ref>; and a group at Inmos in the UK established correctness across two levels of description (in Occam) of the microcode for the T800 floating-point unit using mechanized transformations.
Reference: [CRSS94] <author> D. Cyrluk, S. Rajan, N. Shankar, and M. K. Srivas. </author> <title> Effective theorem proving for hardware verification. </title> <booktitle> In Kumar and Kropf [KK94], </booktitle> <pages> pages 203-222. </pages>
Reference-contexts: PVS is able to verify the microcode of Tamarack and Saxe's pipelined processor completely automatically in about five minutes <ref> [CRSS94] </ref>. Chapter 3 Pro ject Goals and Organization Formal verification of the AAMP5 microcode was selected for this project for a number of reasons. <p> See Cyrluk et al., <ref> [CRSS94] </ref> for more details about application of this strategy for hardware verification. The core strategy was, however, not adequate to automate proofs of the AAMP5 verification conditions.
Reference: [Cyr93] <author> David Cyrluk. </author> <title> Microprocessor verification in PVS: A methodology and simple example. </title> <type> Technical Report SRI-CSL-93-12, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Formal Verification of AAMP5 David Cyrluk has developed a general framework <ref> [Cyr93] </ref> for proving correspondence between state machines in PVS and has shown its application for pipelined microprocessors. The characterization of microprocessor correctness described here is similar to the visible state approach given there [Cyr93]. <p> Formal Verification of AAMP5 David Cyrluk has developed a general framework <ref> [Cyr93] </ref> for proving correspondence between state machines in PVS and has shown its application for pipelined microprocessors. The characterization of microprocessor correctness described here is similar to the visible state approach given there [Cyr93]. <p> However, it is easier and conceptually clearer to define the abstraction in a "distributed fashion" using the future visible or nonvisible states, which is the approach taken for the AAMP5. The pipelined verifications described in <ref> [Cyr93] </ref>, [SGGH94], [TK93], and most recently [WC94], also define the 6.2.
Reference: [DBC90] <author> Ben L. Di Vito, Ricky W. Butler, and James L. Caldwell. </author> <title> Formal design and verification of a reliable computing platform for real-time control. </title> <type> NASA Technical Memorandum 102716, </type> <institution> NASA Langley Research Center, Hampton, VA, </institution> <month> October </month> <year> 1990. </year>
Reference-contexts: Besides the inhouse development of a formally verified reliable computing platform RCP <ref> [DBC90] </ref>, NASA has sponsored a variety of demonstration projects to apply formal methods to critical subsystems of real aerospace computer systems. The Computer Science Laboratory of SRI International has been involved in the development and application of formal methods for more than twenty years.
Reference: [Fag86] <author> M. Fagan. </author> <title> Advances in software inspections. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(7):744|751, </volume> <month> July </month> <year> 1986. </year>
Reference-contexts: At some point, the Collins team would take the specifications, prepare them for formal inspections <ref> [Fag86] </ref>, conduct the inspections, correct the defects found, and send the revised specifications back to SRI. This approach was chosen both to validate the correctness of the specifications and to ensure that Collins personnel became actively involved in developing the PVS specifications. <p> Approximately 409 man hours were invested in this effort. At its conclusion, the macroarchitecture specification consisted of 2,550 lines of PVS organized into 48 theories, not including the bit vectors library discussed earlier. 4.4.3 Inspection Formal inspection <ref> [Fag86] </ref> of the macroarchitecture was felt to be essential, both to validate the correctness of the specification and to familiarize 4.4. Development of the Macroarchitecture Specification 37 more engineers at Collins with PVS.
Reference: [GBG + 91] <author> S. Gerhart, M. Bouler, K. Greene, D. Jamsek, T. Ralston, and D. Russinoff. </author> <title> Formal methods transition study final report. </title> <type> Technical Report STP-FT-322-91, </type> <institution> Microelectronics and Computer Technology Corporation, Austin, Texas, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: Collins Commercial Avionics is a division of Rockwell International and one of the largest suppliers of communications and avionics systems for commercial transport and general aviation aircraft. Collins' interest in formal methods dates from 1991 when it participated in the MCC Formal Methods Transition Study <ref> [GBG + 91] </ref>. As a result of this study, Collins initiated 5 6 Chapter 2.
Reference: [GM93] <author> M. J. C. Gordon and T. F. Melham, </author> <title> editors. Introduction to HOL: A Theorem Proving Environment for Higher-Order Logic. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, UK, </address> <year> 1993. </year>
Reference-contexts: In comparison to other widely used verifica tion systems, such as HOL <ref> [GM93] </ref> and the Boyer-Moore prover [BM79], the distinguishing characteristic of PVS is that it supports both a highly expres sive specification language and a very effective interactive theorem prover in which most of the low-level proof steps are automated. <p> The signal definitions implicitly specify the connectivity between the components. 48 Chapter 5. The Microarchitecture This style should be contrasted with the predicative style [Gor85] that is commonly used in most HOL <ref> [GM93] </ref> applications. In the predicative style, every hardware component is specified as a predicate relating the input and output signals of the component and a design is specified as a conjunction of the component predicates, with signals on the internal wires used to connect the components hidden by existential quantification.
Reference: [Gor85] <author> M. Gordon. </author> <title> Why higher-order logic is a good formalism for specifying and verifying hardware. </title> <type> Technical Report 77, </type> <institution> University of Cambridge Computer Laboratory, </institution> <month> September </month> <year> 1985. </year> <note> 98 References </note>
Reference-contexts: Every signal that is an output of a component is specified as a function of the signals appearing at the inputs to the component. The signal definitions implicitly specify the connectivity between the components. 48 Chapter 5. The Microarchitecture This style should be contrasted with the predicative style <ref> [Gor85] </ref> that is commonly used in most HOL [GM93] applications.
Reference: [Gup92] <author> Aarti Gupta. </author> <title> Formal hardware verification methods: A survey. </title> <booktitle> Formal Methods in Systems Design, </booktitle> 1(2/3):151-238, Octo-ber 1992. 
Reference-contexts: Verification of the interface specification, which is expressed as properties of the protocol used by the DPU to interact with its environment, is best done using state enumeration verification tools, such as CTL model-checkers <ref> [Gup92] </ref> on an abstract global state machine of the DPU-BIU-LFU system.
Reference: [HB92] <author> Warren A. Hunt, Jr. and Bishop C. Brock. </author> <title> A formal HDL and its use in the FM9001 verification. </title> <editor> In C. A. R. Hoare and M. J. C. Gordon, editors, </editor> <booktitle> Mechanized Reasoning and Hardware Design, </booktitle> <pages> pages 35-47, </pages> <address> Hemel Hempstead, UK, 1992. </address> <publisher> Prentice Hall International Series in Computer Science. </publisher>
Reference-contexts: Similarly, several groups have performed automated verification of non-microcoded processors, of which Warren Hunt's FM8501 [Hun94] and subsequent FM9000 <ref> [HB92] </ref> are among the most substantial. The problems of pipeline correctness were also studied previously by Srivas and Bickford [SB90], by Saxe and Garland [SGGH94], Burch and Dill [BD94], and Windley and Coe [WC94].
Reference: [Hun94] <author> Warren A. Hunt, Jr. FM8501: </author> <title> A Verified Microprocessor, </title> <booktitle> volume 795 of Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994. </year>
Reference-contexts: A number of microprocessor designs have been formally verified <ref> [BB94, Hun94, CJB78, Coo86, SGGH94, SB90, Win90] </ref>. However, the AAMP5 is significantly more complex, at both the macro and micro-architecture levels, than any other processor for which formal verification has been attempted; it has a large, complex instruction set, multiple data types and addressing modes, and a microcoded, pipelined implementation. <p> Similarly, several groups have performed automated verification of non-microcoded processors, of which Warren Hunt's FM8501 <ref> [Hun94] </ref> and subsequent FM9000 [HB92] are among the most substantial. The problems of pipeline correctness were also studied previously by Srivas and Bickford [SB90], by Saxe and Garland [SGGH94], Burch and Dill [BD94], and Windley and Coe [WC94].
Reference: [Int93] <author> Pentium Processor User's Manual, </author> <title> Volume I: Pentium Processor Data Book. Intel Corporation, order number 241428 edition, </title> <year> 1993. </year>
Reference-contexts: One measure of the complexity of a processor is the size of its implementation. In the case of the AAMP5, this is some 500,000 transistors, compared with some tens of thousands in previous formally verified designs and 3.1 million in an Intel Pentium <ref> [Int93] </ref>.
Reference: [Jon90] <author> Cliff B. Jones. </author> <title> Systematic Software Development Using VDM. </title> <publisher> Prentice Hall International Series in Computer Science. Prentice Hall, </publisher> <address> Hemel Hempstead, UK, </address> <note> second edition, </note> <year> 1990. </year>
Reference-contexts: At the end of these sessions, the engineers were divided into two teams, one that would review the macro-level specifications and one that would review the micro-level specifications. Checklists were drawn up for use in the inspections based on earlier checklists used in inspecting VDM <ref> [Jon90] </ref> specifications, the RAISE Method Manual [BG90], and checklists used for code inspections at Collins. Eleven inspections were held of the macro level specification covering thirty-one of the most important theories.
Reference: [Joy88] <author> Jeffrey Joyce. </author> <title> Verification and implementation of a microprocessor. </title> <editor> In G. Birtwistle and P. A. Subrahmanyam, editors, </editor> <title> VLSI Specification, Verification and Synthesis. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1988. </year>
Reference-contexts: A very simple microcoded processor design developed by Mike Gordon called "Tamarack" serves as something of a benchmark for microprogram verification and was considered quite a challenge not so long ago <ref> [Joy88] </ref>. PVS is able to verify the microcode of Tamarack and Saxe's pipelined processor completely automatically in about five minutes [CRSS94]. Chapter 3 Pro ject Goals and Organization Formal verification of the AAMP5 microcode was selected for this project for a number of reasons.
Reference: [KK94] <editor> Ramayya Kumar and Thomas Kropf, editors. </editor> <booktitle> Theorem Provers in Circuit Design (TPCD '94), volume 910 of Lecture Notes in Computer Science, </booktitle> <address> Bad Herrenalb, Germany, </address> <month> September </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference: [LCB74] <author> George B. Leeman, William C. Carter, and Alexander Birman. </author> <title> Some techniques for microprogram validation. </title> <booktitle> In Information Processing 74 (Proc. IFIP Congress 1974), </booktitle> <pages> pages 76-80. </pages> <publisher> North-Holland Publishing Co, </publisher> <year> 1974. </year>
Reference-contexts: In the case of the AAMP5, this is some 500,000 transistors, compared with some tens of thousands in previous formally verified designs and 3.1 million in an Intel Pentium [Int93]. Microcode verification is not new: it was pioneered by Bill Carter <ref> [LCB74] </ref> at IBM in the 1970's and applied to elements of NASA's Standard Spaceborne Computer [LCB74]; in the 1980's a group at the Aerospace Corporation verified microcode for an implementation of the C/30 switching computer using a verification system called SDVS [Coo86]; and a group at Inmos in the UK established <p> Microcode verification is not new: it was pioneered by Bill Carter <ref> [LCB74] </ref> at IBM in the 1970's and applied to elements of NASA's Standard Spaceborne Computer [LCB74]; in the 1980's a group at the Aerospace Corporation verified microcode for an implementation of the C/30 switching computer using a verification system called SDVS [Coo86]; and a group at Inmos in the UK established correctness across two levels of description (in Occam) of the microcode for the T800 floating-point
Reference: [LS93] <author> B. Littlewood and L. Strigini. </author> <title> Validation of ultra-high dependability of software-based systems. </title> <journal> CACM, </journal> <month> November </month> <year> 1993. </year>
Reference: [MD93] <author> Ralph Melton and David L. Dill. </author> <title> Mur Annotated Reference Manual. </title> <institution> Computer Science Department, Stanford University, Stanford, </institution> <address> CA, </address> <month> March </month> <year> 1993. </year> <note> References 99 </note>
Reference-contexts: We have verified some the properties in the interface specification for a simplified model of the DPU-BIU-LFU interface using Murphi <ref> [MD93] </ref> and the recently implemented connection between PVS and a model-checker. 6.8 Errors Discovered by the Verification Effort Analysis of a system by means of formal methods can reveal errors in two ways.
Reference: [ORS92] <author> S. Owre, J. M. Rushby, and N. Shankar. PVS: </author> <title> A prototype verification system. </title> <editor> In Deepak Kapur, editor, </editor> <booktitle> 11th International Conference on Automated Deduction (CADE), </booktitle> <pages> pages 748-752, </pages> <address> Saratoga, NY, </address> <month> June </month> <year> 1992. </year> <booktitle> Volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The project consisted of specifying in the PVS language developed by SRI [OSR93] a portion of a Rockwell proprietary microprocessor, the AAMP5, at both the instruction set and register-transfer levels and using the PVS theorem prover <ref> [ORS92, SOR93] </ref> to show that the microcode correctly implemented the specified behavior for a representative subset of instructions. The central result of this project was to demonstrate the feasibility of formally specifying a commercial microprocessor and the use of mechanical proofs of correctness to verify microcode.
Reference: [OSR93] <author> S. Owre, N. Shankar, and J. M. Rushby. </author> <title> The PVS Specification Language. </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> February </month> <year> 1993. </year> <note> A new edition for PVS Version 2 is expected in early 1995. </note>
Reference-contexts: Sponsored by the Systems Validation Branch of NASA Langley and Collins Commercial Avionics, a division of Rockwell International, it was conducted by Collins and the Computer Science Laboratory at SRI International. The project consisted of specifying in the PVS language developed by SRI <ref> [OSR93] </ref> a portion of a Rockwell proprietary microprocessor, the AAMP5, at both the instruction set and register-transfer levels and using the PVS theorem prover [ORS92, SOR93] to show that the microcode correctly implemented the specified behavior for a representative subset of instructions.
Reference: [Roc90] <institution> AAMP2 Advanced Architecture Microprocessor II Reference Manual. Rockwell International, Collins Commercial Avionics, Rockwell International Corporation, Cedar Rapids, Iowa 52498, </institution> <month> February </month> <year> 1990. </year>
Reference-contexts: the use of formal methods, with verification of the AAMP5 microcode being the latest and most ambitious in the series. 2.2 AAMP Family of Microprocessors The Advanced Architecture Microprocessor (AAMP) consists of a Rockwell proprietary family of microprocessors based on the Collins Adaptive Processor System (CAPS) originally developed in 1972 <ref> [Roc90, BKM + 82] </ref>. The AAMP architecture is specifically designed for use with block-structured, high-level languages such as Ada in real-time embedded applications. <p> It was followed by the AAMP2, AAMP3, and AAMP5. Members of the CAPS/AAMP family have been used in an impressive variety of products as shown in Table 2.1. The AAMP5 was designed as an object-code-compatible replacement for the earlier AAMP2 <ref> [Roc90] </ref>, with advanced implementation techniques such as pipelining providing a more than threefold performance improvement. <p> Since the AAMP5 was to be object-code compatible with the earlier AAMP2, this work was based on the AAMP2 Reference Manual <ref> [Roc90] </ref>. Each iteration was reviewed via informal walkthroughs by Collins and the comments returned to SRI. This phase lasted approximately three months, took 532 man hours to complete, and resulted in a first draft of the specification consisting of 1,595 lines of PVS organized into 25 theories. <p> To our surprise, this process alone uncovered two errors in the microcode that had not yet been discovered by traditional methods. Formal specification also pointed out several situations that the AAMP2 Reference Manual <ref> [Roc90] </ref> and the AAMP5 design documents left unspecified or stated unclearly. This seems to be a general deficiency of any English specification and not of the AAMP documentation. The process of performing mechanical proofs has detected several errors in the formal macro and micro-specifications.
Reference: [Roc93] <institution> AAMP5 Microarchitecture (Unreleased Document). Rockwell International, Processor and Software Technology Department, Advanced Technology and Engineering, Collins Commercial Avionics, Rockwell International Corporation, Cedar Rapids, Iowa 52498, </institution> <month> February </month> <year> 1993. </year>
Reference-contexts: The DPU is specified at the same level of detail given in the informal microarchitecture document <ref> [Roc93] </ref>. The rest of the AAMP5 is specified by formalizing the behavior of the other blocks expected by the DPU. The DPU directly interacts only with the LFU and the BIU. <p> An overview of the theory hierarchy comprising the microarchitecture specification is shown in Figure 5.4. Again, an arrow drawn from theory A to B indicates that A imports B. The hierarchy closely parallels the structural decomposition of the DPU into smaller circuit blocks in the AAMP5 microarchitecture document <ref> [Roc93] </ref>. Note that the ALU and the regfile are treated as black boxes in our specification. Every node in the graph shown in Figure 5.4 contains the PVS theories associated with a block of the circuit of the DPU.
Reference: [SB90] <author> Mandayam Srivas and Mark Bickford. </author> <title> Formal verification of a pipelined microprocessor. </title> <journal> IEEE Software, </journal> <volume> 7(5) </volume> <pages> 52-64, </pages> <month> Septem-ber </month> <year> 1990. </year>
Reference-contexts: A number of microprocessor designs have been formally verified <ref> [BB94, Hun94, CJB78, Coo86, SGGH94, SB90, Win90] </ref>. However, the AAMP5 is significantly more complex, at both the macro and micro-architecture levels, than any other processor for which formal verification has been attempted; it has a large, complex instruction set, multiple data types and addressing modes, and a microcoded, pipelined implementation. <p> Similarly, several groups have performed automated verification of non-microcoded processors, of which Warren Hunt's FM8501 [Hun94] and subsequent FM9000 [HB92] are among the most substantial. The problems of pipeline correctness were also studied previously by Srivas and Bickford <ref> [SB90] </ref>, by Saxe and Garland [SGGH94], Burch and Dill [BD94], and Windley and Coe [WC94]. A very simple microcoded processor design developed by Mike Gordon called "Tamarack" serves as something of a benchmark for microprogram verification and was considered quite a challenge not so long ago [Joy88]. <p> In principle, it should be possible to define the abstraction function as a function of the current visible state alone because the information necessary to compute the result of the to-be-completed instructions is stored in various hidden registers in the micromachine. In the MiniCayuga verification <ref> [SB90] </ref>, which is one of the earliest efforts in the mechanical verification of a pipelined processor, the abstraction function was defined in this fashion.
Reference: [SGGH94] <author> James B. Saxe, Stephen J. Garland, John V. Guttag, and James J. Horning. </author> <title> Using transformations and verification in circuit design. </title> <booktitle> Formal Methods in System Design, </booktitle> <volume> 4(1) </volume> <pages> 181-210, </pages> <year> 1994. </year>
Reference-contexts: A number of microprocessor designs have been formally verified <ref> [BB94, Hun94, CJB78, Coo86, SGGH94, SB90, Win90] </ref>. However, the AAMP5 is significantly more complex, at both the macro and micro-architecture levels, than any other processor for which formal verification has been attempted; it has a large, complex instruction set, multiple data types and addressing modes, and a microcoded, pipelined implementation. <p> Similarly, several groups have performed automated verification of non-microcoded processors, of which Warren Hunt's FM8501 [Hun94] and subsequent FM9000 [HB92] are among the most substantial. The problems of pipeline correctness were also studied previously by Srivas and Bickford [SB90], by Saxe and Garland <ref> [SGGH94] </ref>, Burch and Dill [BD94], and Windley and Coe [WC94]. A very simple microcoded processor design developed by Mike Gordon called "Tamarack" serves as something of a benchmark for microprogram verification and was considered quite a challenge not so long ago [Joy88]. <p> However, it is easier and conceptually clearer to define the abstraction in a "distributed fashion" using the future visible or nonvisible states, which is the approach taken for the AAMP5. The pipelined verifications described in [Cyr93], <ref> [SGGH94] </ref>, [TK93], and most recently [WC94], also define the 6.2.
Reference: [SOR93] <author> N. Shankar, S. Owre, and J. M. Rushby. </author> <title> The PVS Proof Checker: </title>
Reference-contexts: The project consisted of specifying in the PVS language developed by SRI [OSR93] a portion of a Rockwell proprietary microprocessor, the AAMP5, at both the instruction set and register-transfer levels and using the PVS theorem prover <ref> [ORS92, SOR93] </ref> to show that the microcode correctly implemented the specified behavior for a representative subset of instructions. The central result of this project was to demonstrate the feasibility of formally specifying a commercial microprocessor and the use of mechanical proofs of correctness to verify microcode. <p> The AAMP5 is designed for use in critical applications such as avionics displays, but is not intended for use in ultra-critical systems such as autoland or fly-by-wire. 2.3 PVS PVS (Prototype Verification System) <ref> [SOR93] </ref> is an environment for specification and verification that has been developed at SRI International's 2.3.
References-found: 34

