URL: http://www-plateau.cs.berkeley.edu/papers/1996/112/trey.ps
Refering-URL: http://www-plateau.cs.berkeley.edu/papers/1996/112/
Root-URL: 
Title: Berkeley Continuous Media Toolkit API  
Author: MacDonald H. Jackson, J. Eric Baldeschwieler, and Lawrence A. Rowe 
Date: September 3, 1996  
Address: Berkeley, CA 94720-1776  
Affiliation: Computer Science Division EECS University of California  
Abstract: The Berkeley Continuous Media Toolkit provides low-level, modular tools for developing distributed continuous media (CM) applications. The programming interface to the toolkit requires application developers to create and manage objects required to play back audio and video. These objects are distributed to different processes possibly on different hosts. This paper presents an application programming interface (API) that frees the application writer from the details of managing the underlying CM objects. It also provides an easily configurable framework in which CM object developers can place their objects. A simple video editing application is shown to demonstrate the benefits of using the API and framework.
Abstract-found: 1
Intro-found: 1
Reference: [Ack94] <author> Philipp Ackermann. </author> <title> Direct manipulation of temporal structures in a multimedia application framework. </title> <booktitle> In Multimedia 94, </booktitle> <address> San Francisco, CA, </address> <month> October </month> <year> 1994. </year>
Reference: [App] <institution> Apple Corp., Apple Quicktime Conferencing. </institution> <note> http://qtc.quicktime.apple.com/qtc/qtc.faq.tech.html. 16 </note>
Reference-contexts: The Multimedia Component Kit [dMG93] provides a C++ class library as an abstraction to specific devices but uses a separate analog transmission network for the delivery of continuous media data. Apple Quicktime Conferencing <ref> [App] </ref> (QTC) is a commercial system that provides an API to Quicktime codecs and network modules for the development of video conferencing applications. InSoft's OpenDVE [Ins] toolkit is another 1 commercial development system providing an API for application programmers to create collab-orative and desktop video conferencing applications.
Reference: [Bac96] <author> David Bacher. </author> <title> GUI tools for the Berkeley Distributed Video-on-Demand Database. </title> <type> Mas--ter's thesis, </type> <institution> University of California at Berkeley, </institution> <year> 1996. </year>
Reference-contexts: Only 16% of the code manipulates CM objects. Our goal was to develop a high-level interface which would simplify CM application development. We believe this API succeeded. Two applications have been written using the API: CMEdit and Ceedit. CMEdit [Bal96] is a non-linear CM editing application. Ceedit <ref> [Bac96] </ref> is a shot boundary editor which provides a mechanism for examining the output of shot detection algorithms. 6 Future Work This section presents some issues raised by concurrent research, and suggests related problems we believe need to be addressed.
Reference: [Bal96] <author> J. Eric Baldeschwieler. </author> <title> Editing extensions to the Berkeley Continuous Media Toolkit. </title> <type> Master's thesis, </type> <institution> University of California at Berkeley, </institution> <year> 1996. </year>
Reference-contexts: Only 16% of the code manipulates CM objects. Our goal was to develop a high-level interface which would simplify CM application development. We believe this API succeeded. Two applications have been written using the API: CMEdit and Ceedit. CMEdit <ref> [Bal96] </ref> is a non-linear CM editing application. Ceedit [Bac96] is a shot boundary editor which provides a mechanism for examining the output of shot detection algorithms. 6 Future Work This section presents some issues raised by concurrent research, and suggests related problems we believe need to be addressed.
Reference: [dMG93] <author> V. de Mey and S Gibbs. </author> <title> A multimedia component kit. </title> <booktitle> In ACM Multimedia 93 Proceedings, </booktitle> <pages> pages 291-300, </pages> <address> Anaheim, CA, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: It was designed to operate on high-speed local area networks. The DAVE system developed at Sandia Laboratories [MFY94] provides a high-level abstraction to continuous media devices. However, assumes devices are sampled at regular intervals and does not provide as flexible a time model as CMT. The Multimedia Component Kit <ref> [dMG93] </ref> provides a C++ class library as an abstraction to specific devices but uses a separate analog transmission network for the delivery of continuous media data.
Reference: [Ins] <institution> InSoft Corp., OpenDVE Home Page. </institution> <note> http://www.insoft.com/products/OpenDVE/OpenDVE.html. </note>
Reference-contexts: Apple Quicktime Conferencing [App] (QTC) is a commercial system that provides an API to Quicktime codecs and network modules for the development of video conferencing applications. InSoft's OpenDVE <ref> [Ins] </ref> toolkit is another 1 commercial development system providing an API for application programmers to create collab-orative and desktop video conferencing applications.
Reference: [Jaf] <institution> Personal communication with fiesal mahmood nawaz jaffer. </institution>
Reference-contexts: A continuous text CMT object is being developed that will add time sensitive text <ref> [Jaf] </ref>. It will be incorporated into the media player framework. However, it is unknown whether the Stream class will need to be changed to supplement this abstraction or whether a new class will be needed.
Reference: [LSR95] <author> P. Liu, B.C. Smith, and L.A. Rowe. </author> <title> Tcl-DP name server. </title> <booktitle> In Proceedings of 9th International Conference on Distributed Computing Systems, </booktitle> <address> Toronto, Canada, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: Tk is a collection of Tcl commands that implement a graphical user interface development toolkit. Tcl-DP is a scripting language for distributed application programming. It extends Tcl with remote procedure calls, unicast and multicast communication support, and a nameserver <ref> [LSR95] </ref>. CMT supports development of continuous media applications. The system includes abstractions for various audio and video streams (e.g., -law audio, MPEG, and MJPEG), file I/O, a logical time system (LTS), and objects that send and receive data over a network.
Reference: [McL93] <author> Michael J. McLennan. </author> <title> Object Oriented Programming in TCL. </title> <booktitle> In Proceedings of the Tcl/Tk Workshop 1993, </booktitle> <address> Berkeley, California, </address> <month> May </month> <year> 1993. </year>
Reference: [MFY94] <author> Robert F. Mines, Jerrold A. Friesen, and Christine L. Yang. Dave: </author> <title> A plug and play model for distributed multimedia application development. </title> <booktitle> In Multimedia 94, </booktitle> <address> San Francisco, CA, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Related work in multimedia toolkits include a variety of research systems and commercial products. The ViewStation project at MIT [Tea95] most closely matches the architecture of CMT. It was designed to operate on high-speed local area networks. The DAVE system developed at Sandia Laboratories <ref> [MFY94] </ref> provides a high-level abstraction to continuous media devices. However, assumes devices are sampled at regular intervals and does not provide as flexible a time model as CMT.
Reference: [MPR96] <author> Ketan Mayer-Patel and Lawrence A. Rowe. </author> <title> Design and performance of the continuous media toolkit. </title> <note> http://bmrc.berkeley.edu/projects/cmt/index.html, 1996. </note>
Reference-contexts: All connection and resource management details are hidden from the application developer. The API is built on the Continuous Media Toolkit (CMT) which provides an extensible collection of polymorphic objects that can be linked together to play audio and video over arbitrary networks <ref> [MPR96] </ref>. Audio and video material can be captured live or played from storage. Developers who use the toolkit can modify the objects to meet their needs, and after integrating new objects into the framework, applications will seamlessly take advantage of new toolkit capabilities.
Reference: [MSa] <institution> Microsoft Corp., </institution> <note> ActiveMovie streaming format product information. http://www.microsoft.com/advtech/activemovie/productinfo.htm. </note>
Reference-contexts: InSoft's OpenDVE [Ins] toolkit is another 1 commercial development system providing an API for application programmers to create collab-orative and desktop video conferencing applications. Lastly, the ActiveMovie <ref> [MSa] </ref> architecture from Microsoft is greater in scope than either Apple QTC or InSoft OpenDVE providing an API integrated with other development API's such as Direct3D [MSb] (a 3-D graphics API). The remainder of this paper is organized as follows.
Reference: [MSb] <institution> Microsoft Corp., Interactive Media Technologies: Direct3D. </institution> <note> http://www.microsoft.com/imedia/direct3d/direct3d.htm. </note>
Reference-contexts: Lastly, the ActiveMovie [MSa] architecture from Microsoft is greater in scope than either Apple QTC or InSoft OpenDVE providing an API integrated with other development API's such as Direct3D <ref> [MSb] </ref> (a 3-D graphics API). The remainder of this paper is organized as follows. Section 2 presents background on the issues encountered when developing CM applications and describes problems this API is designed to solve. Section 3 presents a high level introduction to the API software architecture.
Reference: [Ous94] <author> John K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1994. </year>
Reference-contexts: Two auxiliary functions and an example application are given in section 5 to demonstrate the power of the API. And section 6 discusses issues to be addressed and work to be done. 2 Background CMT is built on several existing tools, including Tcl/Tk <ref> [Ous94] </ref> and Tcl-DP [SRY93]. Tcl is an interpreted scripting language that provides a rapid prototyping environment. Tk is a collection of Tcl commands that implement a graphical user interface development toolkit. Tcl-DP is a scripting language for distributed application programming.
Reference: [RBB95] <author> Lawrence A. Rowe, David A. Berger, and J. Eric Baldeschwieler. </author> <title> The Berkeley Distributed Video-on-Demand System. </title> <editor> In T. Ishiguro, editor, </editor> <booktitle> Multimedia Computing, Proc. 6th NEC Research Symposium, </booktitle> <year> 1995. </year>
Reference-contexts: The URLs introduce a layer of indirection between the user and CM server processes. This indirection provides the flexibility necessary to use a centralized server which maintains a database of media stored on different sources <ref> [RBB95] </ref>. CM sources are specified using URLs similar to: cmtp://name-server.edu/bambi.mpg cmtp://name-server.edu:512/video/cinderella.mjpg The protocol, identified by cmtp, specifies the name server and file. <p> The function behaves as follows: CMApp TranslateURL cmtp://name-server.edu/bambi.mpg 4 returns the 3-tuple: video-server.edu 1490 /video/mpg/bambi.mpg By decoding the URL, an application can reference the video clip and the system can determine where the clip is located <ref> [RBB95] </ref>. 2.3 The CMT object CMT provides a mechanism to create objects on remote hosts. The CM process on a remote host is represented by an object, named cmt, on the client process. <p> For example, a CM script can be constructed that specifies that one window shows 10 seconds from several cameras in some order. This script can be saved in the Berkeley VOD system <ref> [RBB95] </ref> like any other playback object. The name resolution service needs to allow processes, for example a camera object, to register a name for themselves.
Reference: [SRY93] <author> B.C. Smith, L.A. Rowe, and S. Yen. </author> <title> Tcl Distributed Programming. </title> <booktitle> In Proceedings Tcl 1993 Workshop, </booktitle> <address> Berkeley, CA, </address> <year> 1993. </year>
Reference-contexts: Two auxiliary functions and an example application are given in section 5 to demonstrate the power of the API. And section 6 discusses issues to be addressed and work to be done. 2 Background CMT is built on several existing tools, including Tcl/Tk [Ous94] and Tcl-DP <ref> [SRY93] </ref>. Tcl is an interpreted scripting language that provides a rapid prototyping environment. Tk is a collection of Tcl commands that implement a graphical user interface development toolkit. Tcl-DP is a scripting language for distributed application programming.
Reference: [Tea95] <author> D. Tennenhouse and et. al. </author> <title> The ViewStation: a software-intensive approach to media processing and distribution. </title> <journal> Multimedia Systems, </journal> <volume> 3 </volume> <pages> 104-15, </pages> <year> 1995. </year>
Reference-contexts: CMT currently runs on PC's (Windows and UNIX) and UNIX workstations, and it will be ported to the Macintosh. Source code is available to encourage experimentation. Related work in multimedia toolkits include a variety of research systems and commercial products. The ViewStation project at MIT <ref> [Tea95] </ref> most closely matches the architecture of CMT. It was designed to operate on high-speed local area networks. The DAVE system developed at Sandia Laboratories [MFY94] provides a high-level abstraction to continuous media devices.
Reference: [WL95] <author> David Wetherall and Christopher J. Lindblad. </author> <title> Extending Tcl for dynamic object-oriented programming. </title> <booktitle> In Proceedings of the Tcl/Tk Workshop 1995, </booktitle> <address> Toronto, Ontario, </address> <month> July </month> <year> 1995. </year> <month> 17 </month>
Reference-contexts: Appendix C provides complete specifications of the playerBase, audioPlayer and videoPlayer classes. 12 4.3 Object Tcl The CMT Media Playback API was written using an object-oriented extension to Tcl, called Object Tcl (OTcl) <ref> [WL95] </ref>. OTcl provides an object-oriented framework for managing complex data types. OTcl objects can be defined using Tcl or C. One reason CMT uses a Tcl interface is because it is well-suited for rapid code development. Nevertheless, many internal objects are written in C for efficiency.
References-found: 18

