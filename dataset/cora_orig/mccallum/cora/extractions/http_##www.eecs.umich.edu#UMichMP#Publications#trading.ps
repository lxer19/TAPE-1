URL: http://www.eecs.umich.edu/UMichMP/Publications/trading.ps
Refering-URL: http://www.eecs.umich.edu/UMichMP/abstracts.html
Root-URL: http://www.eecs.umich.edu
Email: -blj,tnm-@eecs.umich.edu  
Title: The trading function in action  
Author: Bruce Jacob and Trevor Mudge 
Address: Michigan  
Affiliation: Advanced Computer Architecture Lab EECS Department, University of  
Abstract: This paper describes a commer cial software and hardware platform for telecommunications and multimedia pr ocessing. The software architecture loosely follows the CORB A and ODP standar ds of distrib uted computing and supports a number of application types on different hardware configurations. This paper is the result of lessons learned in the process of designing, building, and modifying an industrial telecommunications platform. In particular, the use of the trading function in the design of the system led to such benefits as support for the dynamic e volution of the system, the ability to dynamically add services and data types to a running system, support for heterogeneous systems, and a simple design performing well enough to handle traffic in excess of 40,000 busy-hour calls. 
Abstract-found: 1
Intro-found: 1
Reference: [Bach86] <author> Maurice J. Bach. </author> <title> The Design of the UNIX Operating System. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1986. </year>
Reference-contexts: All methods which implement the same service are bound to the same service name. An object requiring a service therefore requests the print service or the fax service. Requests go to the central trader, where they are inserted into a timeout queue similar to the callout table in Unix <ref> [Bach86] </ref>. Thus, an object needing a particular service only needs to know the name of the service, the interface of the service, and the address of the trader. Fig 2 illustrates the primary components of the softw are architecture at a lo wer level of abstraction.
Reference: [Birrell93] <author> Andrew Birrell, Greg Nelson, Susan Owicki, and Edward Wobber. </author> <title> Network objects. </title> <booktitle> In Proc. Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 217230, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Implemented systems include RPC systems such as the Distrib uted Computing Environment from OSF [OSF91], the Information Bus [Oki93], and Birrells Network Objects <ref> [Birrell93] </ref>. DCE assigns unique ids to service interf aces and requires a client to program for the interf ace and include the interface description at compile time. A client must kno w either a servers authentication id or a shared location in the CDS namespace before attempting to bind.
Reference: [Chase92] <author> Jeffrey S. Chase, Henry M. Levy, Edward D. Lazowska, and Miche Baker-Harvey. </author> <title> Lightweight shared objects in a 64-bit operating system. </title> <type> Technical Report 92-03-09, </type> <institution> University of Washington, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: A client receives all information on the network of the types to which the client subscribes. Birrells network objects are similar to other distrib uted object systems such as Opal <ref> [Chase92] </ref> and Emerald [Jul88], but simplify the designs by restricting mobility and cop y nonstationary objects over the network by pickling. Objects export their methods under whatever name they desire, so it is possible for a client object to f ind a server object by a descriptive name.
Reference: [Chin88] <author> Roger S. Chin and Samuel T. Chanson. </author> <title> Distributed object-based programming systems. </title> <journal> ACM Computing Surveys, </journal> <volume> 31(3), </volume> <month> March </month> <year> 1988. </year>
Reference-contexts: Software design Fig 1 illustrates the software architecture at a high level of abstraction. It is an example of the active object model, using a popular taxonomy <ref> [Chin88] </ref>. The system is made up of numerous interacting objects, each of which is a collection of methods bound to service names. The service names are globally visible, and advertised through a central point.
Reference: [ITU92] <author> ITU. </author> <title> Draft Recommendation X.903: Basic Reference Model of Open Distributed Processing. International Telecommunication Union, </title> <year> 1992. </year>
Reference-contexts: The software architecture of the system loosely follows the CORBA and ODP standards of distributed computing <ref> [OMG93, ITU92] </ref> and supports a number of applications on man y hardware organizations. The system is organized around the principle of the ODP trading function. <p> By contrast, support for an Internet connection is nonobvious; several years ago few could have predicted the rapid commercial rush to the Internet and the WorldWide Web. The trading function of the CCITT ODP Recommendation <ref> [ITU92, ITU94] </ref> is a simple concept that indirectly addresses these concerns. In the trading function, a trader acts as a yellow pages directory for services. Serv er objects that wish to offer services advertise, or export, their capabilities to the trader. <p> CORBA [OMG93] from the Object Management Group describes the use of objects, including standard def inition languages and methods for storing and retrie ving the interfaces. CORBA allows objects to invoke methods indirectly through the Object Request Broker, which can translate between client and serv er protocols. ODP <ref> [ITU92, ITU94] </ref> from CCITT (now ITU, the International Telecommunication Union) describes the trading function in which serv ers export service offers to a trader and clients import those offers.
Reference: [ITU94] <author> ITU. </author> <title> Draft Recommendation X.9tr: ODP Trading Function. International Telecommunication Union, </title> <year> 1994. </year>
Reference-contexts: By contrast, support for an Internet connection is nonobvious; several years ago few could have predicted the rapid commercial rush to the Internet and the WorldWide Web. The trading function of the CCITT ODP Recommendation <ref> [ITU92, ITU94] </ref> is a simple concept that indirectly addresses these concerns. In the trading function, a trader acts as a yellow pages directory for services. Serv er objects that wish to offer services advertise, or export, their capabilities to the trader. <p> It is a loose implementation of the trading function the ODP Recommendation, not a strict implementation, as the architecture was defined in 1991 before the ODP T rading Function draft w as published (in 1994 <ref> [ITU94] </ref>). In the trading function, exporting servers advertise their services to the trader, who retains the state and acts like a service database to inquiring clients. Importing clients mak e requests of the trader of the form, gi ve me a service which beha ves like the following ... <p> CORBA [OMG93] from the Object Management Group describes the use of objects, including standard def inition languages and methods for storing and retrie ving the interfaces. CORBA allows objects to invoke methods indirectly through the Object Request Broker, which can translate between client and serv er protocols. ODP <ref> [ITU92, ITU94] </ref> from CCITT (now ITU, the International Telecommunication Union) describes the trading function in which serv ers export service offers to a trader and clients import those offers.
Reference: [Jul88] <author> Eric Jul, Henry Levy, Norman Hutchinson, and Andrew Black. </author> <title> Fine-grained mobility in the Emerald system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1):109133, </volume> <month> February </month> <year> 1988. </year>
Reference-contexts: A client receives all information on the network of the types to which the client subscribes. Birrells network objects are similar to other distrib uted object systems such as Opal [Chase92] and Emerald <ref> [Jul88] </ref>, but simplify the designs by restricting mobility and cop y nonstationary objects over the network by pickling. Objects export their methods under whatever name they desire, so it is possible for a client object to f ind a server object by a descriptive name.
Reference: [Oki93] <author> Brian Oki, Manfred Pfluegl, Alex Siegel, and Dale Skeen. </author> <title> The Information Busan architecture for extensible distributed systems. </title> <booktitle> In Proc. Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: ODP [ITU92, ITU94] from CCITT (now ITU, the International Telecommunication Union) describes the trading function in which serv ers export service offers to a trader and clients import those offers. Implemented systems include RPC systems such as the Distrib uted Computing Environment from OSF [OSF91], the Information Bus <ref> [Oki93] </ref>, and Birrells Network Objects [Birrell93]. DCE assigns unique ids to service interf aces and requires a client to program for the interf ace and include the interface description at compile time.
Reference: [OMG93] <author> OMG. </author> <title> The Common Object Request Broker: Architecture and Specification, Rev 1.2. </title> <booktitle> Object Management Group, </booktitle> <month> December </month> <year> 1993. </year> <title> OMG Document Number 93-12-43. </title>
Reference-contexts: The software architecture of the system loosely follows the CORBA and ODP standards of distributed computing <ref> [OMG93, ITU92] </ref> and supports a number of applications on man y hardware organizations. The system is organized around the principle of the ODP trading function. <p> This can be anything from a beep to a notification that the system is heavily loaded, to starting a daemon that ascertains whether the system is functioning properly. Related Work Two standards of distributed computing exist which outline similar functionality b ut do not suggest designs. CORBA <ref> [OMG93] </ref> from the Object Management Group describes the use of objects, including standard def inition languages and methods for storing and retrie ving the interfaces. CORBA allows objects to invoke methods indirectly through the Object Request Broker, which can translate between client and serv er protocols.
Reference: [OSF91] <author> OSF. </author> <title> DCE Application Development Guide. Open Software Foundation, </title> <year> 1991. </year>
Reference-contexts: ODP [ITU92, ITU94] from CCITT (now ITU, the International Telecommunication Union) describes the trading function in which serv ers export service offers to a trader and clients import those offers. Implemented systems include RPC systems such as the Distrib uted Computing Environment from OSF <ref> [OSF91] </ref>, the Information Bus [Oki93], and Birrells Network Objects [Birrell93]. DCE assigns unique ids to service interf aces and requires a client to program for the interf ace and include the interface description at compile time.
References-found: 10

