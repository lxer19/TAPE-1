URL: ftp://ftp.cs.utexas.edu/pub/predator/cia10-95.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/schwartz/pub.htm
Root-URL: 
Title: Abstract  
Keyword: software reuse, software scalability, avionics domain modeling, domain-specific software architectures, GenVoca, LILEANNA.  
Abstract: ADAGE is a project to define and build a domain-specific software architecture (DSSA) environment for avionics. A central concept of ADAGE is the use of generators to implement scalable, component-based models of avionics software. In this paper, we review the ADAGE model (or reference architecture) of avionics software and describe techniques for avionics software synthesis. 
Abstract-found: 1
Intro-found: 1
Reference: [Ara93] <author> Guillermo Arango. </author> <title> Domain analysis methods. In Software Reusability, </title> <editor> W. Schafer and R.Prieto-Diaz, editors, </editor> <publisher> Ellis Horwood Publishers, </publisher> <year> 1993. </year>
Reference-contexts: A product of domain analysis, called a reference architecture, is a model or blueprint for an avionics software system generator. A central task in creating a DSSA is the definition of a reference architecture. Domain analysis techniques are still immature <ref> [Ara93] </ref>; there are no commonly accepted modeling processes or meta-modeling constructs that are used to define reference architectures.
Reference: [Bat92] <author> D. Batory and S. OMalley, </author> <title> The Design and Implementation of Hierarchical Software Systems with Reusable Components, </title> <journal> ACM Trans. Software Engineering and Methodology, </journal> <month> October </month> <year> 1992. </year>
Reference-contexts: Of critical importance is that whatever constructs or processes that are chosen to represent a reference architecture, they must be domain-independent; the applicability of a DSSA methodology across multiple domains is an essential requirement. We developed the ADAGE reference architecture in terms of the GenVoca model <ref> [Bat92] </ref>. This model is suited for software system generation; a software domain is expressed in terms of standardized sets of parameterized, plug-compatible, and reusable layers called components. A composition of components defines a software system or subsystem of the domain.
Reference: [Bat94a] <author> D. Batory, L. Coglianese, M. Goodwin, and S. Shafer, </author> <title> Creating Reference Architectures: An Example From Avionics, </title> <note> submitted for publication, </note> <year> 1994. </year>
Reference-contexts: Type equations for even simple avionics systems tend to be non-trivial. Equations often reference more than 50 distinct components that are stacked 15 layers deep. Further discussions and experiences with the ADAGE domain model are discussed in <ref> [Bat94a] </ref>. There are two other topics worth mentioning about GenVoca reference architectures. First, our model of component parameters is actually more complicated than indicated above. Until now, the only parameters of components that we have discussed have had realm types. In reality, components can have many other non-realm-type parameters.
Reference: [Bat94b] <author> D. Batory, V. Singhal, J. Thomas, S. Dasari, B. Geraci, and M. Sirkin, </author> <title> The GenVoca Model of Software-System Generators, </title> <journal> IEEE Software, </journal> <month> September </month> <year> 1994. </year>
Reference-contexts: Generators exploit the regularities of standardized decompositions/descriptions of systems by assembling these systems from pre-written components. The GenVoca model has been successfully applied to the domains of database systems, communication protocols, data structures, and distributed file systems <ref> [Bat94b] </ref>. We found that Gen-Voca was also well suited for defining reference architectures and generators of avionics software, thereby reinforcing the belief that its concepts are truly domain independent.
Reference: [Bat95] <author> D. Batory and B. Geraci, </author> <title> Validating Component Compositions in Software System Generators, </title> <note> in preparation, </note> <year> 1995. </year>
Reference-contexts: Domain-specific constraints, called design rules, are needed to identify (and thus preclude) illegal component combinations. A GenVoca reference architecture is defined by both the realms of components and the constraints (design rules) of component compositions. Design rule checking of type equations and GWFEs is discussed in <ref> [McA93, Bat95] </ref>. 4 The ADAGE Environment ADAGE is an integrated environment for avionics software system specification and synthesis. The elements of ADAGE that are relevant to our discussions are depicted in Figure 5. ADAGE users define avionics software systems using GLUE (Graphical Layout User Environment) [Hig94].
Reference: [Cog92] <author> Lou Coglianese, et al., </author> <title> An Avionics Domain-Specific Software Architecture, </title> <booktitle> ARPA PI Conference, </booktitle> <year> 1992. </year> <note> Also in CrossTalk, </note> <month> October </month> <year> 1992, </year> <institution> and Loral Federal Systems Owego TR. ADAGE IBM-92-07, </institution> <month> April </month> <year> 1992. </year>
Reference: [Cog93] <author> L. Coglianese and R. Szymanski, </author> <title> DSSA-ADAGE: An Environment for Architecture-based Avionics Development, </title> <note> Proceedings of AGARD 1993. Also, </note> <institution> Loral Federal Systems Owego TR. ADAGE-IBM-93-04, </institution> <month> May </month> <year> 1993. </year>
Reference: [Gog83] <author> J. Goguen and K. Levitt, </author> <title> editors, </title> <booktitle> Report on Program Libraries Workshop, SRI International, </booktitle> <address> Menlo Park, California, </address> <year> 1983. </year>
Reference-contexts: sections, we review the design of Ada packages and explain further the capabilities of LILEANNA and MEGEN to illustrate their use in avionics software generation. 4.1 LILEANNA LIL (Library Interconnect Language) is a general-purpose module interconnection language for designing, structuring, composing, and generating software systems in the Ada programming language <ref> [Gog83] </ref>. LILEANNA is an implementation of LIL that combines the power of ANNA (Annotated Ada) [Luc85] and is a language for formally specifying and generating Ada packages [Tra93a]. LILEANNA supports parameterized programming in Ada by introducing two entities, theories and views, and enhancing a third, package specifications.
Reference: [Goo92a] <author> M. Goodwin and L. Coglianese, </author> <title> Dictionary for the Avionics Domain Architecture Generation Environment of the Domain-Specific Software Architecture Project, </title> <address> ADAGE-IBM-92 04. </address>
Reference: [Goo92b] <author> M. Goodwin and M. Kushner, </author> <title> Domain Analysis for the Avionics Domain Architecture Generation Environment of Domain Specific Software Architecture, </title> <address> ADAGE-IBM-92-11, </address> <month> November </month> <year> 1992. </year>
Reference: [Hig94] <author> J. Higgins, </author> <title> ADAGE Layout Editor (LE) Users Manual, </title> <institution> Loral Federal Systems Owego, </institution> <type> TR. </type> <institution> ADAGE-LOR-94-04, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: The elements of ADAGE that are relevant to our discussions are depicted in Figure 5. ADAGE users define avionics software systems using GLUE (Graphical Layout User Environment) <ref> [Hig94] </ref>. GLUE graphically enables users to select components from realms, to define type equations by instantiating component parameters, to specify component configuration parameters, to record justifications for design choices, and to store, retrieve, and edit previously defined equations. GLUE has two additional responsibilities.
Reference: [Luc85] <author> D.C. Luckham and F.W. Von Henke, </author> <title> An Overview of ANNA: A Specification Langauge for Ada, </title> <journal> IEEE Software, </journal> <month> March </month> <year> 1995. </year>
Reference-contexts: LILEANNA is an implementation of LIL that combines the power of ANNA (Annotated Ada) <ref> [Luc85] </ref> and is a language for formally specifying and generating Ada packages [Tra93a]. LILEANNA supports parameterized programming in Ada by introducing two entities, theories and views, and enhancing a third, package specifications.
Reference: [McA93] <author> D. McAllester, </author> <title> DSSA-ADAGE Avionics/ Architecture Knowledge Representation Language, </title> <institution> Loral Federal Systems Owego TR. ADAGE-MIT-91-01. </institution>
Reference-contexts: Domain-specific constraints, called design rules, are needed to identify (and thus preclude) illegal component combinations. A GenVoca reference architecture is defined by both the realms of components and the constraints (design rules) of component compositions. Design rule checking of type equations and GWFEs is discussed in <ref> [McA93, Bat95] </ref>. 4 The ADAGE Environment ADAGE is an integrated environment for avionics software system specification and synthesis. The elements of ADAGE that are relevant to our discussions are depicted in Figure 5. ADAGE users define avionics software systems using GLUE (Graphical Layout User Environment) [Hig94]. <p> GLUE has two additional responsibilities. First, GLUE performs design rule checking to make sure that user-defined systems do not violate preconditions of components or global constraints imposed on the target system <ref> [McA93] </ref>. Second, when software generation is to occur, GLUE outputs a transcription of a specification in the form of GWFEs. LILEANNA (Library Interconnection Language Extended by Annotated Ada) and MEGEN (Module Expression GENerator) are tools used by ADAGE to generate avionics software in Ada.
Reference: [Par76] <author> D.L. Parnas, </author> <title> On the Design and Development of Program Families, </title> <journal> IEEE Trans. Software Engineering, </journal> <month> March </month> <year> 1976. </year>
Reference-contexts: Instead of moving directly from requirements to a one-of-a-kind avionics software system (a process called design without reuse), we recognize that target avionics systems belong to a family or domain of similar software products <ref> [Par76] </ref>. By analyzing the avionics domain (a process called domain analysis), it is possible to define libraries of primitive components and a factory for assembling these components into target systems. The blueprint for the libraries and factory is called the reference architecture.
Reference: [Tra93a] <author> W. Tracz, LILEANNA: </author> <title> A Parameterized Programming Language, </title> <booktitle> Proc. 2nd International Workshop on Software Reuse, </booktitle> <month> March </month> <year> 1993. </year>
Reference-contexts: LILEANNA (Library Interconnection Language Extended by Annotated Ada) and MEGEN (Module Expression GENerator) are tools used by ADAGE to generate avionics software in Ada. LILEANNA is a general-purpose language for composing, customizing, and generating Ada software <ref> [Tra93a] </ref>. It has the capabilities of editing and composing prewritten Ada packages automatically by following a script of high-level source-code modification statements, called module expressions. Module expressions are used by ADAGE to customize exemplar software, such as a universal device driver, to produce drivers for specific devices. <p> LILEANNA is an implementation of LIL that combines the power of ANNA (Annotated Ada) [Luc85] and is a language for formally specifying and generating Ada packages <ref> [Tra93a] </ref>. LILEANNA supports parameterized programming in Ada by introducing two entities, theories and views, and enhancing a third, package specifications. A LILEANNA package, with semantics specified either formally or informally, represents a template for generating a family of Ada packages. <p> Horizontal parameterization corresponds to the customization of software via instantia-tion of configuration parameters in GenVoca. LILEANNA supports horizontal parameterization by the import, protect, and extend statements - three forms of inheritance 4 - and the include statement, a subtyping construct <ref> [Tra93a] </ref>. The power of programming in LILEANNA centers on its ability to generate new instances of LILEANNA packages and to compose them.
Reference: [Tra93b] <author> W. Tracz and L. Coglianese, </author> <title> An Adapatable Software Architecture for Integrated Avionics, </title> <booktitle> in Proceedings of NAECON, </booktitle> <year> 1993. </year>
Reference-contexts: Module expressions are used by ADAGE to customize exemplar software, such as a universal device driver, to produce drivers for specific devices. LILEANNA receives its module expression scripts from MEGEN, a tool that understands avionics software and GWFEs <ref> [Tra93b] </ref>. <p> For the most part, support code does not need to be modified by LILEANNA, except perhaps to change a constant value in a package specification. 4.3 MEGEN As is evident from the previous sections, MEGEN (Module Expression GENerator) serves a key role in generating avionics software <ref> [Tra93b] </ref>. Unlike LILEANNA, MEGEN alone contains knowledge of the avionics domain (e.g., realms of components) and code-level details of Ada packages that implement ADAGE components. Given the GWFEs of a target system, MEGEN generates command scripts (module expressions) that LILEANNA uses to produce actual Ada source.
Reference: [SEI90] <author> Software Engineering Institute, </author> <booktitle> Proc. Workshop on Domain-Specific Software Architectures, </booktitle> <address> Hidden-Valley, Pennsylvania, </address> <year> 1990. </year>
Reference-contexts: 1 Introduction ARPAs Domain-Specific Software Architectures (DSSA) program was established in 1990 to create innovative approaches for generating control systems <ref> [SEI90] </ref>. The goal was to use formal descriptions of software architectures and advances in non-linear control and hierarchical control theory, to generate avionics, command and control, and vehicle management applications with an order of magnitude improvement in productivity and quality.
References-found: 17

