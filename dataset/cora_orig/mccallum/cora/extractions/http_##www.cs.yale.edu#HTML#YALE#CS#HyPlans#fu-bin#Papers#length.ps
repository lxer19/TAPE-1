URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/fu-bin/Papers/length.ps
Refering-URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/fu-bin/research.html
Root-URL: http://www.cs.yale.edu
Email: Email: fu.bin@erd.epson.com.  Email: beigel@eecs.uic.edu.  
Phone: Fax: (650) 843-9106.  Fax: (312)413-0024.  
Title: Length Bounded Molecular Computing  
Author: Bin Fu Richard Beigel 
Address: Palo Alto Laboratory, 3145 Porter Drive, Suite 104, Palo Alto, CA 94304.  Chicago Rm. 1116, SEO Building, M/C 154 851 S. Morgan St. Chicago, IL 60607-7053.  
Affiliation: Epson  Department of Electrical Engineering and Computer Science University of Illinois at  
Abstract: fl Supported in part by the National Science Foundation under grants CCR-9700417 and CCR-9796317. Part of this work was done when the two authors were at Lehigh University. This paper has been prepared for DNA 4 Proceedings. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Adleman, L., </author> <year> 1994, </year> <title> Molecular computation of solutions to combinatorial problems, </title> <journal> Science, </journal> <volume> 266, </volume> <pages> 1021-1024. </pages>
Reference: <author> Bach, E., Condon, A., Glaser, E., and Tanguay C., </author> <year> 1996, </year> <title> DNA models and algorithms for NP-complete problems. </title> <booktitle> In proceedings of the 11th annual conference on structure in complexity theory, </booktitle> <pages> 290-299. </pages>
Reference-contexts: Clearly, h, , and T () satisfy the conditions of Definition 8. The function h is P-uniform O (jGj)-size and O (jGj)-width computable. The partial order is (O (n); O (jGj))-well-founded. The recurrence can be solved explicitly to obtain t (n) &lt; 1:47 n . <ref> (Bach et al 1996) </ref>. We implement Tarjan's algorithms for independent set problem and have the following theorem. We decrease the length complexity to O (n) and keep the same time and volume complexity. This improves previous algorithms for this problem (Bach et al 1996). Theorem 14. <p> solved explicitly to obtain t (n) &lt; 1:47 n . <ref> (Bach et al 1996) </ref>. We implement Tarjan's algorithms for independent set problem and have the following theorem. We decrease the length complexity to O (n) and keep the same time and volume complexity. This improves previous algorithms for this problem (Bach et al 1996). Theorem 14. There is a fSeparate; Merge; Append; Cut; Initg-molecular algorithm for Independent set problem with O (jGj)-length, O (jGj n)-time and 1:47 n -volume. Implementing Monien and Speckenmeyer's algorithm for 3SAT problem, we have the following theorem.
Reference: <author> Baum, E., </author> <year> 1996, </year> <title> DNA sequences useful for computation, </title> <type> Technical report, </type> <institution> NEC. </institution>
Reference-contexts: Long common subsequences might cause DNA strands to be misclassified in Separation by subsequence. For in-depth discussion and a construction of the encoding, see Baum <ref> (Baum 1996) </ref> 1 The string x 1 x n is represented by the double DNA sequence lB 1 (x 1 )B 2 (x 2 ) B n (x n ): Such DNA sequences are called valid encodings.
Reference: <author> Beaver, D., </author> <year> 1995, </year> <title> Computer with DNA, </title> <journal> Journal of Computational Biology, </journal> <volume> 2(1). </volume>
Reference: <author> Beigel, R., and Fu, B., </author> <year> 1997, </year> <title> Molecular computing, bounded nondeterminism, and efficient recursion, </title> <booktitle> In ICALP'97, </booktitle> <volume> LNCS 1256, </volume> <pages> 816-826. </pages>
Reference-contexts: Implementing Recursion We slightly revise the description for the implementing recursion with bounded nondeter-minism in. <ref> (Beigel and Fu 1997) </ref> Definition 6. A partial order is (d (n); b (n))-well-founded if * y k y 1 ) k d (jy 1 j); and For technical simplicity we will consider only languages L containing the empty string, fl. <p> Proof: The proof is adapted to that of a similar theorem in <ref> (Beigel and Fu 1997) </ref>. Let L 2 REC fl (d (n); b (n); s (n); w (n); u (n); T (x)) via hh; i. <p> Hence, the function path can be computed by a P-uniform family of circuits with size O (d (jxj)(s (b (jxj)) + u (jxj)s 0 (b (jxj)))). and width O (w (b (jxj)) + u (jxj)w 0 (b (jxj))). The following is a slightly revised version of a theorem in <ref> (Beigel and Fu 1997) </ref>, which shows how to implement bounded nondeterminism with molecular computation. Theorem 12. NPinit (w (n); s (n); v (n)) MOL fl (w (n); s (n); v (n)). <p> Theorem 14. There is a fSeparate; Merge; Append; Cut; Initg-molecular algorithm for Independent set problem with O (jGj)-length, O (jGj n)-time and 1:47 n -volume. Implementing Monien and Speckenmeyer's algorithm for 3SAT problem, we have the following theorem. The length used in their paper <ref> (Beigel and Fu 1997) </ref> is O (mn), where n is the number of variables and m is the number of clauses. we decrease the length complexity to O (m) while keep the same order complexity for time and volume, This improve the results 12 in (Ogihara 1996, Beigel and Fu 1997).
Reference: <author> Boneh, D., Dunworth, C., and Lipton, R., </author> <year> 1995, </year> <title> Breaking DES using a molecular computer, </title> <booktitle> In Proceedings of the 1st DIMACS workshop on DNA Based Computers, </booktitle> <publisher> American Mathematics Society. </publisher>
Reference-contexts: Append (T; c) T := fxc : x 2 T g. Merge (T 1 ; T 2 ; T 3 ) T 3 := T 1 [ T 2 ; T 2 := ;. The implementation of those operations are described in <ref> (Boneh et al 1995) </ref>. Cut (T ) T = fx : 0x 2 T or 1x 2 T g. Restriction enzymes can cut double DNA strands at specific sites (Kari 1997, Beaver 1995, Head 1987). Others have proposed a variant of operation separate, which we will call Sep.
Reference: <author> Boneh, D., Dunworth, C., Lipton, R., and Sgall, J., </author> <year> 1996, </year> <title> On the computational power of DNA, </title> <journal> Discrete applied mathematics, </journal> <volume> 71, </volume> <pages> 79-94. </pages>
Reference-contexts: The algorithm is divided into depth of stages. Stage i has three phases. In phase 1, it, using the method from <ref> (Boneh 1996) </ref>, evaluates all gates in D i () and append those values at DNA strands. In phase 2, it checks if the length of strings encoded by DNA strands is longer than 2w ().
Reference: <author> Fu, B., </author> <year> 1997, </year> <title> Volume bounded molecular computation, </title> <type> PhD thesis, </type> <institution> Yale university. </institution>
Reference-contexts: Implementing Recursion We slightly revise the description for the implementing recursion with bounded nondeter-minism in. <ref> (Beigel and Fu 1997) </ref> Definition 6. A partial order is (d (n); b (n))-well-founded if * y k y 1 ) k d (jy 1 j); and For technical simplicity we will consider only languages L containing the empty string, fl. <p> Proof: The proof is adapted to that of a similar theorem in <ref> (Beigel and Fu 1997) </ref>. Let L 2 REC fl (d (n); b (n); s (n); w (n); u (n); T (x)) via hh; i. <p> Hence, the function path can be computed by a P-uniform family of circuits with size O (d (jxj)(s (b (jxj)) + u (jxj)s 0 (b (jxj)))). and width O (w (b (jxj)) + u (jxj)w 0 (b (jxj))). The following is a slightly revised version of a theorem in <ref> (Beigel and Fu 1997) </ref>, which shows how to implement bounded nondeterminism with molecular computation. Theorem 12. NPinit (w (n); s (n); v (n)) MOL fl (w (n); s (n); v (n)). <p> Theorem 14. There is a fSeparate; Merge; Append; Cut; Initg-molecular algorithm for Independent set problem with O (jGj)-length, O (jGj n)-time and 1:47 n -volume. Implementing Monien and Speckenmeyer's algorithm for 3SAT problem, we have the following theorem. The length used in their paper <ref> (Beigel and Fu 1997) </ref> is O (mn), where n is the number of variables and m is the number of clauses. we decrease the length complexity to O (m) while keep the same order complexity for time and volume, This improve the results 12 in (Ogihara 1996, Beigel and Fu 1997).
Reference: <author> Fu, B., Beigel, R., and Zhou, F., </author> <year> 1997, </year> <title> An O(n 2 (log 2 n)2 n ) volume molecular algorithm for Hamiltonian path, </title> <type> Manuscript, </type> <year> 1997. </year> <title> Head, T, 1987, Formal languages and DNA: an analysis of the generative capacity of recombinant behaviors, </title> <journal> Bull. Math. Biol., </journal> <volume> 49, </volume> <pages> 737-759. </pages> <note> 13 Kari, </note> <author> L., </author> <year> 1997, </year> <title> DNA computing: Arrival of biological mathematics, </title> <journal> The mathematical Intelligencer, </journal> <volume> 19(2), </volume> <pages> 9-22. </pages>
Reference-contexts: Implementing Recursion We slightly revise the description for the implementing recursion with bounded nondeter-minism in. <ref> (Beigel and Fu 1997) </ref> Definition 6. A partial order is (d (n); b (n))-well-founded if * y k y 1 ) k d (jy 1 j); and For technical simplicity we will consider only languages L containing the empty string, fl. <p> Proof: The proof is adapted to that of a similar theorem in <ref> (Beigel and Fu 1997) </ref>. Let L 2 REC fl (d (n); b (n); s (n); w (n); u (n); T (x)) via hh; i. <p> Hence, the function path can be computed by a P-uniform family of circuits with size O (d (jxj)(s (b (jxj)) + u (jxj)s 0 (b (jxj)))). and width O (w (b (jxj)) + u (jxj)w 0 (b (jxj))). The following is a slightly revised version of a theorem in <ref> (Beigel and Fu 1997) </ref>, which shows how to implement bounded nondeterminism with molecular computation. Theorem 12. NPinit (w (n); s (n); v (n)) MOL fl (w (n); s (n); v (n)). <p> Theorem 14. There is a fSeparate; Merge; Append; Cut; Initg-molecular algorithm for Independent set problem with O (jGj)-length, O (jGj n)-time and 1:47 n -volume. Implementing Monien and Speckenmeyer's algorithm for 3SAT problem, we have the following theorem. The length used in their paper <ref> (Beigel and Fu 1997) </ref> is O (mn), where n is the number of variables and m is the number of clauses. we decrease the length complexity to O (m) while keep the same order complexity for time and volume, This improve the results 12 in (Ogihara 1996, Beigel and Fu 1997).
Reference: <author> Lipton, R., </author> <year> 1995, </year> <title> Using DNA to solve NP-complete problems, </title> <journal> Science, </journal> <volume> 268, </volume> <pages> 542-545. </pages>
Reference: <author> Ogihara, M., </author> <year> 1996, </year> <title> Breadth first search 3SAT algorithms for DNA computers, </title> <type> Technical report 629, </type> <institution> University of Rochester. </institution>
Reference-contexts: length used in their paper (Beigel and Fu 1997) is O (mn), where n is the number of variables and m is the number of clauses. we decrease the length complexity to O (m) while keep the same order complexity for time and volume, This improve the results 12 in <ref> (Ogihara 1996, Beigel and Fu 1997) </ref>. Theorem 15. There is a fSeparate; Merge; Append; Cut; Initg-molecular algorithm for 3SAT problem with O (m)-length, O (mn)-time and 1:62 n -volume. Applying Theorem 13, we also have similar results for implementing the two algorithms in sticker model. 6.
Reference: <author> Ogihara, M., Ray, A., and Smith, K., </author> <year> 1997, </year> <title> Biomolecular computing-a shape of computation to come, </title> <journal> SIGACT News, </journal> <volume> 28(3), </volume> <pages> 2-11. </pages>
Reference-contexts: Yet Roweis et al (Roweis et al 1996) state that 2500-base sequences decay at a rate of 10% per hour, and Sambrook (Sam-brook et al 1989) states that DNA strands longer than 10000 bases have a serious decay problem. In their survey, Ogihara et al <ref> (Ogihara et al 1997) </ref> list strand-length complexity as an important resource to optimize. In this paper we show how to convert molecular algorithms for some NP-complete problems into length-efficient molecular algorithms, without substantially increasing their time or volume complexity. <p> There is a fSeparate; Merge; Append; Cut; Initg-molecular algorithm for 3SAT problem with O (m)-length, O (mn)-time and 1:62 n -volume. Applying Theorem 13, we also have similar results for implementing the two algorithms in sticker model. 6. Acknowledgment We are grateful to Mitsu Ogihara for sending his survey <ref> (Ogihara et al 1997) </ref>, which is very helpful for this research, and unknown reference for many helpful comments for an earlier version of this paper.
Reference: <author> Roweis, S., Winfree, E., Burgoyne, R., Chelyapov, N., Goodman, M., Rothemund, P., and Adleman, L., </author> <year> 1996, </year> <title> A sticker based model for DNA computation, </title> <booktitle> In proceedings of the second annual meeting on DNA based computers. </booktitle>
Reference-contexts: Although time and volume complexity have been well studied (Lipton 1995, Boneh et al 1995, Bach et al 1996, Ogihara 1996, Beigel and Fu 1997, Fu and Beigel 1997, Fu et al 1997, Fu 1997) strand length has received less attention. Yet Roweis et al <ref> (Roweis et al 1996) </ref> state that 2500-base sequences decay at a rate of 10% per hour, and Sambrook (Sam-brook et al 1989) states that DNA strands longer than 10000 bases have a serious decay problem. <p> We get the output T 1 ; T 2 from the following separation operation. The algorithm runs in time O (m). Separate (T 0 ; 0; e t 0 (i 0 ); T 1 ; T 2 ); 4. The Sticker Model Roweis et al <ref> (Roweis et al 1996) </ref> proposed a sticker model that behaves like a random memory. There are two kinds of DNA strands. Each memory model is divided into k 5 regions, each consisting of m bases. A sticker is the (Watson-Crick) complement of a memory region.
Reference: <author> Sambrook, J., Fritsch, E., and Maniatis, T., </author> <title> 1989 Molecular Cloning: a laboratory manual, volume 1, </title> <publisher> Cold Spring Harbor Press, </publisher> <address> NY, 2nd edition. </address>
Reference: <author> Tarjan, R., </author> <year> 1972, </year> <title> Finding a maximum clique, </title> <type> Technical report, 72-123, </type> <institution> Cornell university. </institution> <month> 14 </month>
Reference-contexts: A famous NP-complete problem, the independent set problem is the following: Given a graph G and a positive integer k, is there an independent set in G consisting of at least k vertices? Tarjan <ref> (Tarjan 1972) </ref> gave a simple algorithm to find the largest independent set in a graph. We present Tarjan's algorithm in Figure 1. A simple modification yields a dsr for the independent set problem.
References-found: 15

