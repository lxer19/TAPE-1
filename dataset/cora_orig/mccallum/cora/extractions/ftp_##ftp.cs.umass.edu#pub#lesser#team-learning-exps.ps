URL: ftp://ftp.cs.umass.edu/pub/lesser/team-learning-exps.ps
Refering-URL: http://dis.cs.umass.edu/research/meta-learn.html
Root-URL: 
Email: fnagendra,lesserg@cs.umass.edu  lander@cs.umass.edu  
Title: Learning Experiments in a Heterogeneous Multi-agent System  
Author: M V NagendraPrasad and Victor Lesser Susan E. Lander 
Address: Amherst, Massachusetts 01003  401 Main Street Amherst, Massachusetts 01002  
Affiliation: Department of Computer Science University of Massachusetts  Blackboard Technology Group  
Abstract: Self-organization for efficient distributed search control has received much attention previously but the work presented in this paper represents one of the few attempts at demonstrating its viability and utility in an agent-based system involving complex interactions within the agent set. We discuss experiments with a heterogeneous multi-agent parametric design system called L-TEAM where machine learning techniques endow the agents with capabilities to learn their organizational roles in negotiated search and to learn meta-level knowledge about the composite search spaces. We tested the system on a steam condenser design domain and empirically demonstrated its usefulness.
Abstract-found: 1
Intro-found: 1
Reference: [ Aha, Kibler, & Albert, 1991 ] <author> Aha, D. W.; Kibler, D.; and Albert, M. K. </author> <year> 1991. </year> <title> Instance-based learning algorithms. </title> <booktitle> Machine Learning 6 </booktitle> <pages> 37-66. </pages>
Reference-contexts: The algorithm we use here is the Instance-Based Learning (IBL) algorithm <ref> [ Aha, Kibler, & Albert, 1991 ] </ref> . During the learning phase, the agents perform their search with information assimilation as discussed above.
Reference: [ Lander, 1994 ] <author> Lander, S. E. </author> <year> 1994. </year> <title> Distributed Search in Heterogeneous and Reusable Multi-Agent Systems. </title> <type> Ph.D. Dissertation, </type> <institution> University of Massachusetts. </institution>
Reference-contexts: 1 Introduction In this paper, we present a heterogeneous multi-agent parametric design system called L-TEAM where machine learning techniques endow the agents with capabilities to learn their organizational roles in negotiated search and to learn meta-level knowledge about the composite search spaces. L-TEAM is an extension of the TEAM framework <ref> [ Lander, 1994 ] </ref> for cooperative search among a set of heterogeneous reusable agents. A reusable-agent system is an open system assembled by minimal customized integration of a dynamically selected subset from a catalogue of existing agents. Each agent works on a specific part of the overall problem. <p> As a part of this search process, agents augment their local view of the composite search space with meta-level information about search spaces of other agents through negotiation to minimize the likelihood of generating conflicting solutions <ref> [ Lander, 1994 ] </ref> . TEAM was introduced in the context of parametric design in multi-agent systems. Each of the agents has its own local state information, a local database with static and dynamic constraints on its design components and a local agenda of potential actions. <p> Then: (p+1) P ot k ij + ff (P ot T (p) P ot k n 2 F (T ); state n 2 situation j 2.3 Experiments To demonstrate the effectiveness of the mechanisms in L-TEAM and compare them to those in TEAM, we used the same domain as in <ref> [ Lander, 1994 ] </ref> | parametric design of steam condensers. The prototype multi-agent system for this domain, built on top of the TEAM framework, consists of seven agents: pump-agent, heat-exchanger-agent, motor-agent, vbelt-agent, shaft-agent, platform-agent, and frequency-critic. <p> The composite solution space lies within the intersection of the local parameter spaces under hard constraints but not necessarily under soft constraints. Order of constraint relaxation is an issue out of the scope of this paper. Lander <ref> [ Lander, 1994 ] </ref> presents an algorithm for this. Given a problem specification, each agent in TEAM initiates a search with completely local views. Whenever conflicts on explicit constraints are detected, a feedback process conveys the conflict information and the corresponding constraints to the agents involved.
Reference: [ Sutton, 1988 ] <author> Sutton, R. </author> <year> 1988. </year> <title> Learning to predict by the methods of temporal differences. </title> <booktitle> Machine Learning 3 </booktitle> <pages> 9-44. </pages>
Reference-contexts: A final state is a terminal state where the search ends successfully with a mutually acceptable design. When the search enters a terminal state, the performance measures are back-propagated to the relevant agents. We use the supervised-learning approach to prediction learning (see <ref> [ Sutton, 1988 ] </ref> ) to learn estimates for the UPC vectors for each of the states.
Reference: [ Whitehair & Lesser, 1993 ] <author> Whitehair, R., and Lesser, V. R. </author> <year> 1993. </year> <title> A framework for the analysis of sophisticated control in interpretation systems. </title> <institution> Computer Science Technical Report 93-53, University of Mas-sachusetts. </institution>
Reference-contexts: In this paper we propose learning methods that let the agents construct these rating functions based on past problem solving experience. 2.2 Learning Algorithm The formal basis for learning search strategies adopted in this paper is derived from the UPC formalism for search control (see <ref> [ Whitehair & Lesser, 1993 ] </ref> ) that relies on the calculation and use of the Utility, Probability and Cost (UPC) values associated with each hstate; op; f inal statei tuple.
References-found: 4

