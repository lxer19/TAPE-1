URL: http://mercury.lcs.mit.edu/~yxw/thesis.ps
Refering-URL: http://mercury.lcs.mit.edu/~yxw/
Root-URL: 
Title: A Model for Window Based Flow Control Packet-Switched Networks  
Author: by Xiaowei Yang Dr. David D. Clark Arthur C. Smith 
Degree: Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degree of Master of Science at the  All rights reserved. Author  Certified by  Thesis Supervisor Accepted by  Chairman, Departmental Committee on Graduate Students  
Date: March 1998  March 6th, 1998  
Affiliation: MASSACHUSETTS INSTITUTE OF TECHNOLOGY  c Massachusetts Institute of Technology 1998.  Department of Electrical Engineering and Computer Science  Senior Research Scientist, Laboratory for Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Dimitri Bertsekas and Robert Gallager. </author> <title> Data Networks. </title> <publisher> Prentice-Hall, Inc, </publisher> <year> 1992. </year> <note> [2] http://netweb.usc.edu/vint/. VINT: Virtual InterNetwork Testbed. [3] http://www nrg.ee.lbl.gov/ns/. ns version 1 - LBNL Network Simulator. </note>
Reference-contexts: The fixed granularity of the event driven simulation is the bottleneck of its speed. Unless we change the abstraction level, it is hard to improve its performance. Analytic method often uses classic queuing and network stochastic models which are restricted to problems that can be approximated as Markov chains <ref> [1] </ref>. As networks are using complicated protocols such as TCP/IP to implement flow control, they can't be simply modeled by Markov chain assumption. Thus, we lack a satisfying model to study the behavior of window based flow control packet-switched networks. <p> Flow Control A flow of data between a sender A and a receiver B is said to be end-to-end window flow controlled if there is an upper bound on the data units that have been sent by A but are not known by A to have been received by B <ref> [1] </ref>. The upper bound is called window size. In TCP, the upper bound is used both to keep the sender from overflowing the receiver's buffer and to keep the sender from overflowing the buffers inside the network. The sender keeps two window sizes for the two purposes. <p> We use our record and the equation set of the model to get the steady state parameters. The details of this algorithm are discussed in the next section. 4.2.2 Details We multiply each flow's window size by a scaling factor ff (ff 2 <ref> [0; 1] </ref>) and substitute W j in Equation 4.1 with ffW j . Let Cong (ff) denotes the set of congested links for the value ff. Obviously, Cong (0) = . Let E (ff) be a set of equations chosen from the constraints. Let n be the number of flows.
Reference: [4] <author> V. Jacobson. </author> <title> Congestion Avoidance and Control. </title> <booktitle> In Proceedings of the ACM SIGCOMM'88, </booktitle> <month> August </month> <year> 1988. </year>
Reference-contexts: Combining the two parts, we can find a set of steady state parameters. The difficult point is how to locate fully utilized links. The rates of flows are shaped by those links, which is the same phenomenon as TCP's self-clocking mechanism <ref> [4] </ref>. There is a simple and attractive idea. For each flow j, the maximum rate it could reach is P j . This happens when there is no congested link along its path. This rate can be viewed as the required rate of this flow.
Reference: [5] <author> William H. Press, Saul A. Teukolsky, William T. Vetterling, and Brian P. Flannery. </author> <title> Numerical Recipes in C. </title> <publisher> the Press Syndicate of the University of Cambridge, </publisher> <year> 1992. </year>
Reference-contexts: As a matter of fact, there are no good, general methods for solving systems of more than one nonlinear equations <ref> [5] </ref>. Finding a root for a set of nonlinear equations which have N unknowns is to find points which are common to N unrelated zero-contour hyper-surfaces (the N equations). Each equation is of dimension N 1 in a N dimension space. <p> Each equation is of dimension N 1 in a N dimension space. The numerical methods for solving such equations usually involve iterations and matrix operations. The convergence is always a problem. Newton-Raphson Method is the simplest multidimensional root finding method. We borrowed the code from book <ref> [5] </ref> for the equation solving part. Given the right set of congested links, Newton-Raphson method converges very well while solving the set of equations in E. However, sometimes, we may introduce some redundant constraints.
Reference: [6] <author> Floyd S. and Jacobson V. </author> <title> Random Early Detection gateways for Congestion Avoidance. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 1(4), </volume> <month> August </month> <year> 1993. </year>
Reference-contexts: Since in the real routers, buffer sizes are limited, when a router's buffer overflows, packets will get dropped. TCP will adjust its window size correspondingly. In this Chapter, we assume links are using RED (the Random Early Detection) <ref> [6] </ref> dropping mechanism. We simulate TCP with RED links by applying this model. In Section 6.1, a brief introduction of RED is listed. In Section 6.2, we discuss the assumptions our simulation depends on. <p> If none of them get dropped, we schedule the next event after the flow's current round trip time with its window increased by one. The following is the pseudo-code for the event handler. The part of the code for simulating RED is based on Floyd's paper <ref> [6] </ref>. The original RED algorithm described in this 46 paper keeps a variable count, which is the number of unmarked packets that have arrived since the last marked packet. The dropping probability of a packet is related to count. The variable count is to help marking packets more uniformly.
Reference: [7] <author> Anlu Yan and Wei-Bo Gong. </author> <title> Fluid Simulation for High Speed Networks. </title> <booktitle> In Proceedings of the 15th International Teletraffic Congress, </booktitle> <month> June </month> <year> 1997. </year> <month> 59 </month>
Reference-contexts: Especially when we are interested in a long time period simulation, it may also take a long time to do so many updatings. Another proposal is to use fluid model based time-driven simulation to simulate high speed networks <ref> [7] </ref>. This model simulates the network traffic as fluid. It is proved that the discretization error can be bounded by a constant proportional to the discretization time interval. This model can quickly locate the time and place of congestion.
References-found: 5

