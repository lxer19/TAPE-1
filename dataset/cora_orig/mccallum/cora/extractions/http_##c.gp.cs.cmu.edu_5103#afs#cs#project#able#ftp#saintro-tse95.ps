URL: http://c.gp.cs.cmu.edu:5103/afs/cs/project/able/ftp/saintro-tse95.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/project/able/www/paper_abstracts/saintro-tse95.html
Root-URL: http://www.cs.cmu.edu
Title: Introduction to the Special Issue on Software Architecture DRAFT: Do Not Distribute What is software
Author: David Garlan and Dewayne Perry I. 
Note: Within software engineering, most uses of the term "software architecture" focus on the first of these interpretations. Typical of these is the following definition (which was developed in a a software architecture discussion group at the SEI in 1994).  Generalizing from these trends, it is possible to identify  the other. The former has been the traditional focus of much of computer science, while the latter is emerging  
Abstract: A critical aspect of the design for any large software system is its gross structure represented as a high-level organization of computational elements and interactions between those elements. Broadly speaking, this is the software architectural level of design [?], [?]. The structure of software has long been recognized as an important issue of concern (e.g., [?], [?]). However, recently software architecture has begun to emerge as an explicit field of study for software engineering practitioners and researchers. Evidence of this trend is apparent in a large body of recent work in areas such as module interface languages, domain specific architectures, architectural description languages, design patterns and handbooks, formal underpinnings for architectural design, and architectural design environments. What exactly do we mean by the term "software architecture?" As one might expect of a field that has only recently emerged as an explicit focus for research and development, there is currently no universally-accepted definition. Moreover, if we look at the common uses of the term "architecture" in software, we find that it is used in quite different ways, often making it difficult to understand what aspect is being addressed. Among the various uses are (a) the architecture of a particular system, as in "the architecture of this system consists of the following components," (b) an architectural style, as in "this system adopts a client-server architecture," and (c) the general study of architecture, as in "the papers in this journal are about architecture." To clarify the nature of this effort it is helpful to observe that the recent emergence of interest in software architecture has been prompted by two distinct trends. The first is the recognition that over the years designers have begun to develop a shared repertoire of methods, techniques, patterns and idioms for structuring complex software systems. For example, the box and line diagrams and explanatory prose that typically accompany a high-level system description often refer to such organizations as a "pipeline," a "blackboard-oriented design," or a "client-server system." Although these terms are rarely assigned precise definitions, they permit designers to describe complex systems using abstractions that make the overall system intelligible. Moreover, they provide significant semantic content that informs others about the kinds of properties that the system will have: the expected paths of evolution, its overall computational paradigm, and its relationship to similar systems. The second trend is the concern with exploiting specific domains to provide reusable frameworks for product families. Such exploitation is based on the idea that common aspects of a collection of related systems can be extracted so that each new system can be built at relatively low cost by "instantiating" the shared design. Familiar examples include the standard decomposition of a compiler (which permits undergraduates to construct a new compiler in a semester), standardized communication protocols (which allow vendors to interoperate by providing services at different layers of abstraction), fourth-generation languages (which exploit the common patterns of business information processing), and user interface toolkits and frameworks (which provide both a reusable framework for developing interfaces and sets of reusable components, such as menus, and dialogue boxes). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Garlan and M. Shaw, </author> <title> "An introduction to software architecture," </title> <booktitle> in Advances in Software Engineering and Knowledge Engineering, Volume I, </booktitle> <publisher> World Scientific Publishing Company, </publisher> <year> 1993. </year>
Reference: [2] <author> D. E. Perry and A. L. Wolf, </author> <title> "Foundations for the study of software architecture," </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> vol. 17, no. 4, </volume> <year> 1992. </year>
Reference: [3] <author> E. W. Dijkstra, </author> <title> "The structure of the "THE"-multiprogramming system," </title> <journal> Communications of the ACM, </journal> <volume> vol. 11, no. 5, </volume> <pages> pp. 341-346, </pages> <year> 1968. </year>
Reference: [4] <author> D. L. Parnas, P. C. Clements, and D. M. Weiss, </author> <title> "The modular structure of complex systems," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. SE-11, </volume> <pages> pp. 259-266, </pages> <month> March </month> <year> 1985. </year>
Reference: [5] <author> R. Allen and D. Garlan, </author> <title> "Beyond definition/use: Architectural interconnection," </title> <booktitle> in Proceedings of the ACM Interface Definition Language Workshop, </booktitle> <volume> vol. 29(8), </volume> <booktitle> SIGPLAN Notices, </booktitle> <month> August </month> <year> 1994. </year>
Reference: [6] <author> G. Abowd, R. Allen, and D. Garlan, </author> <title> "Using style to give meaning to software architecture," </title> <booktitle> in Proc. of SIGSOFT'93: Foundations of Software Engineering, Software Engineering Notes 18(5), </booktitle> <pages> pp. 9-20, </pages> <month> December </month> <year> 1993. </year>
Reference: [7] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides, </author> <title> Design Patterns: Elements of Reusable Object-Oriented Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference: [8] <author> E. Mettala and M. H. Graham, </author> <title> "The domain-specific software architecture program," </title> <type> Tech. Rep. </type> <institution> CMU/SEI-92-SR-9, CMU Software Engineering Institute, </institution> <month> June </month> <year> 1992. </year>
Reference: [9] <author> R. Allen and D. Garlan, </author> <title> "Formalizing architectural connection," </title> <booktitle> in Proc. of ICSE'16, </booktitle> <month> May </month> <year> 1994. </year>
Reference: [10] <author> P. Clements, L. Bass, R. Kazman, and G. Abowd, </author> <title> "Predicting software quality by architecture-level evaluation," </title> <booktitle> in To appear in Proceedings of the Fifth International Conference on Software Quality, </booktitle> <address> (Austin, Texas), </address> <month> October </month> <year> 1995. </year>
Reference: [11] <author> D. Garlan, R. Allen, and J. Ockerbloom, </author> <title> "Exploiting style in architectural design environments," </title> <booktitle> in Proceedings of SIG-SOFT'94: Foundations of Software Engineering, </booktitle> <publisher> ACM Press, </publisher> <month> December </month> <year> 1994. </year>
Reference: [12] <author> R. P. Beck et al., </author> <title> "Architectures for large-scale reuse," </title> <journal> AT&T Technical Journal, </journal> <volume> vol. 71, </volume> <pages> pp. 34-45, </pages> <month> November-December </month> <year> 1992. </year>

References-found: 12

