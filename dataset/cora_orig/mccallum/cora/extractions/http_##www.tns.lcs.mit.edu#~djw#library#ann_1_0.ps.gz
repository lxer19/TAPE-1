URL: http://www.tns.lcs.mit.edu/~djw/library/ann_1_0.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/
Root-URL: 
Title: A Scalable, High Performance Active Network Node  
Author: Dan Decasper Guru Parulkar Bernhard Plattner 
Keyword: Key words: active networks; distributed code caching; gigabit active networking; scalable active network node  
Address: Switzerland  St. Louis, USA  
Affiliation: Computer Engineering and Networks Laboratory, ETH Zurich,  Applied Research Laboratory, Washington University,  
Email: [dan|plattner]@tik.ee.ethz.ch guru@arl.wustl.edu  
Phone: 1  Phone: +41-1-632 7019 Fax: +41-1-632 1035 2  Phone: +1-314-935 4586 Fax: +1-314-935 7302  
Date: April 1998  
Abstract: Active networking in an environment built to support link rates up to several gigabits per second prodices many challenges. One such area is that the total available processing power of a router is limited by the memory bandwidth and individual processing power of the routers microprocessors. In this paper, we identify three key components, which combined promise an innovative active network solution. This solution implements the key features typical to active networking such as automatic protocol deployment and application specific processing and is also suitable for a gigabit environment. First, we make use of a new large scale architecture which we call Distributed Code Caching. Second, we propose the Active Network Node (ANN), a scalable, high performance hardware platform based on off-the-shelf CPUs connected to a gigabit ATM switch backplane. Third, we describe a modular, extensible, highly efficient software framework which implements Distributed Code Caching and load-balancing among the ANNs CPUs, thus maximizing the computational performance of the ANN. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alexander, D., et al., </author> <title> Active Network Encapsulation Protocol (ANEP), </title> <type> RFC DRAFT, </type> <month> July </month> <year> 1997 </year>
Reference-contexts: We might also consider a version of our header in the context of the Active Network Encapsulation Protocol (ANEP, <ref> [1] </ref>) if it turns out to be broadly accepted. A Scalable, High Performance Active Network Node (ANN) Page 14 5 Applications We intend to design and implement a variety of applications on top of our active network architecture.
Reference: [2] <author> Alexander, D., Shaw, M., Nettles, S., Smith, J., </author> <title> Active Bridging, </title> <booktitle> In Proceedings of SIGCOMM 97, </booktitle> <month> September </month> <year> 1997 </year>
Reference-contexts: Applications running on end systems are allowed to inject code into the network to change the networks behavior to their favor. Active networking research concentrates on two commonly separated approaches: programmable switches <ref> [2, 6, 34] </ref> and capsules [27, 38]. These two approaches can be viewed as the two extremes in terms of program code injection into network nodes. Programmable switches typically learn by implicit, out-of-band injection of code by a network administrator. <p> Therefore, switchlets have to be installed out-of-band to provide handles for the PLAN programs which makes the system as a whole less flexible. Active Bridging <ref> [2] </ref> is an application of SwitchWare which shows reprogramming of a bridge with switchlets. 6.5 Columbia University Netscript [40] is middleware for programming functions of intermediate network nodes.
Reference: [3] <author> Amir, E., McCanne, S., </author> <title> An Application Level Video Gateway, </title> <booktitle> In Proceedings of ACM Multimedia, </booktitle> <month> November </month> <year> 1995 </year>
Reference-contexts: For example, dropping packets belonging to less important channels (e.g. the surround channel) and dropping high-rate samples prior to low rate samples, would each produce better quality audio than random dropping. Media gateways: We plan to investigate the usage of active network technologies to efficiently implement media gateways <ref> [3, 4] </ref>. The main purpose of a media gateway is to mitigate bandwidth heterogeneity among receivers of a real-time multicast audio/video session.
Reference: [4] <author> Amir, E., McCanne, S., Katz, R., </author> <title> Receiver-driven Bandwidth Adaptation for Lightweight Sessions, </title> <booktitle> In Proceedings of ACM Multimedia, </booktitle> <month> November </month> <year> 1997 </year>
Reference-contexts: This switch is illustrated in Figure <ref> [4] </ref>. The system compromises a multistage switching network that implements dynamic routing of cells to evenly balance the load from all inputs over the entire network. <p> For example, dropping packets belonging to less important channels (e.g. the surround channel) and dropping high-rate samples prior to low rate samples, would each produce better quality audio than random dropping. Media gateways: We plan to investigate the usage of active network technologies to efficiently implement media gateways <ref> [3, 4] </ref>. The main purpose of a media gateway is to mitigate bandwidth heterogeneity among receivers of a real-time multicast audio/video session.
Reference: [5] <author> Atkinson, R., </author> <title> Security Architecture for the Internet Protocol, </title> <type> RFC 1825, </type> <month> August </month> <year> 1995. </year>
Reference-contexts: This would typically be the network subsystem developers key. From there, it can securely read the public keys of other code servers and developers. Alternatively to the DNS related security scheme, we plan to use IP security <ref> [5] </ref> which is mandatory for IPv6, for code server authentication. This allows simple and streamlined security for ANNs which depend on code server authentication only and which do not want to check developer signatures. Plugin Database Controller (PDC): the PDC efficiently administers the local database of active plugins.
Reference: [6] <author> Bhattacharjee, S., et al., </author> <title> An Architecture for Active Networking, </title> <booktitle> In Proceedings of INFOCOM 97, </booktitle> <month> April </month> <year> 1997 </year>
Reference-contexts: Applications running on end systems are allowed to inject code into the network to change the networks behavior to their favor. Active networking research concentrates on two commonly separated approaches: programmable switches <ref> [2, 6, 34] </ref> and capsules [27, 38]. These two approaches can be viewed as the two extremes in terms of program code injection into network nodes. Programmable switches typically learn by implicit, out-of-band injection of code by a network administrator. <p> Possible other applications of interest are self-organizing network caches [7], e.g. for web traffic and online auctions [22]. 5.3.1 Real-Time Video and Audio Congestion control for real-time video: Congestion control for real time video streams has been shown to be a promising field for active network technologies <ref> [6] </ref>. An MPEG stream consists of frames of three different types: I, P, and B. Coding dependencies exist between the frames, causing P and B-frames to possibly require I frames in order to be properly decoded. <p> The programs are authenticated before interpretation and runtime limited during execution. The system provides a data dictionary which specifies what information a packets program is allowed to access. 6.3 Georgia Tech Zegura et al. <ref> [6, 7, 41] </ref> introduced the generic view of network code as a set of functions which are called depending on identifiers found in data packets. Application specific data processing is implemented, as an example, for congestion control for MPEG video streams. <p> They used simulation as well as an analytical model to evaluate the performance gains offered by the caching and showed that it might be an application of active networking worth pursuing. The system proposed here builds in part on the theoretical background and terminology introduced in <ref> [6] </ref>, but extends the systems capability to downloading function modules in-band, on-the-fly, and elaborates on the infrastructure needed to do so. 6.4 University of Pennsylvania The SwitchWare [34, 17] project mainly uses the programmable switch approach with three important components: active packets, switchlets, and a secure active router infrastructure.
Reference: [7] <author> Bhattacharjee, S., Calvert K., Zegura, E., </author> <title> Self-Organizing Wide-Area Network Caches, </title> <booktitle> In Proceedings of INFOCOM 98, </booktitle> <month> April </month> <year> 1998 </year>
Reference-contexts: As other applications emerge over time however, we might consider their applicability as well if our resources permit. Possible other applications of interest are self-organizing network caches <ref> [7] </ref>, e.g. for web traffic and online auctions [22]. 5.3.1 Real-Time Video and Audio Congestion control for real-time video: Congestion control for real time video streams has been shown to be a promising field for active network technologies [6]. <p> The programs are authenticated before interpretation and runtime limited during execution. The system provides a data dictionary which specifies what information a packets program is allowed to access. 6.3 Georgia Tech Zegura et al. <ref> [6, 7, 41] </ref> introduced the generic view of network code as a set of functions which are called depending on identifiers found in data packets. Application specific data processing is implemented, as an example, for congestion control for MPEG video streams. <p> The functions referred to in the data packets are loaded out-of-band into the network nodes. This work again provides a proof-of-concept, this time for the usefulness of application specific data processing in network nodes. Recently, this group showed how self-organizing network caches can be built using active network technologies <ref> [7] </ref>. They used simulation as well as an analytical model to evaluate the performance gains offered by the caching and showed that it might be an application of active networking worth pursuing.
Reference: [8] <author> Bradner, S., Mankin, A., </author> <title> The Recommendation for the IP Next Generation Protocol, </title> <type> RFC 1752, </type> <month> January </month> <year> 1995 </year>
Reference-contexts: If one follows the development and deployment efforts of IPv6 as successor of IPv4, one realizes how difficult it is in todays heavily commercial Internet. The design efforts for IPv6 started as early as 1994 <ref> [8] </ref> and still, even the most optimistic voices do not expect IPv6 to be used widely before 2010. Once a protocol is deployed, it is extremely hard (if not impossible) to change it globally.
Reference: [9] <author> Chaney, T., et al., </author> <title> Design of a Gigabit ATM Switch, </title> <booktitle> In Proceedings of INFOCOM97, </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: The top level hardware architecture for the Active Network Node (ANN) is shown in been refined and optimized for the purpose of active networks. The node consists of a set of Active Network Processing Elements (ANPE, four in Figure 2) connected to an ATM switch fabric <ref> [9] </ref>. ANNs are interconnected only through ANPEs. The scalable switch fabric currently supports eight ports with a data rate as high as 2.4 Gb/s on each port. The ANPE comprises a general purpose processor and can implement fast execution of application specific data processing.
Reference: [10] <author> Dasen, M., Fankhauser, G., Plattner, B., </author> <title> An Error Tolerant, Scalable Video Stream Encoding an Compression for Mobile Computing, ACTS Mobile Summit 96, </title> <month> November </month> <year> 1996 </year>
Reference-contexts: By selectively dropping P or B-frames prior to Iframes in case of congestion, much better results in terms of video quality can be achieved than by using the regular, random drop mechanism implemented in todays routers. The ETH has developed an alternative video codec called WaveVideo <ref> [10] </ref> based on the wavelet transformation. Although this algorithm achieves much better results when exposed to packet loss then most MPEG codecs (it performs particularly well in mobile computing environments where packet loss occurs very frequently), it can benefit in similar ways from selective packet dropping under congestion.
Reference: [11] <author> Decasper, D., Dittia, Z., Parulkar, G., Plattner, B., </author> <title> Router Plugins - A Software Architecture for Next Generation Routers, </title> <note> To appear in Proceedings of SIGCOMM98, </note> <month> September </month> <year> 1998 </year>
Reference-contexts: Washington University has an eight port prototype version of the switch up and running. 4 Software Infrastructure The software framework running on each ANPE will be embedded into our Router Plugin <ref> [11] </ref> research platform. The Router Plugin platform provides a flexible framework to investigate services and mechanisms including resource management, packet filtering, and packet scheduling for multimedia/multicast applications. It implements the IPv6 protocol suite in a modular environment, enabling the user to plug in experimental versions of companion protocols for evaluation.
Reference: [12] <author> Decasper, D., Plattner, B., DAN: </author> <title> Distributed Code Caching for Active Networks, </title> <booktitle> In Proceedings of INFOCOM98, </booktitle> <month> April </month> <year> 1998 </year>
Reference-contexts: We believe that a new innovative architecture, which we call Distributed Code Caching does just that. This architecture has been described in <ref> [12] </ref>, but we review some of the important properties in this subsection, since it is one of the three corner stones of our approach. 2.1 A New Active Network Architecture: Distributed Code Caching To overcome the performance related problems which will exist in the near term for capsules, we think that
Reference: [13] <author> Deering, S., Hinden, R., </author> <title> Internet Protocol, Version 6 (IPv6), Specification, </title> <type> RFC 1883, </type> <month> December </month> <year> 1995 </year>
Reference-contexts: Incremental addition of new features to existing protocol implementations can easily be done with the our system as well. In IPv6, only a very small set of IP options is specified in the base specification <ref> [13] </ref>. These options are mainly used to pad data packets to certain sizes in order to align them at word boundaries. However, the protocol supports new options in a modular way. An arbitrary number of IPv6 options can follow the IPv6 header in the form of Hop-by-Hop or Destination options.
Reference: [14] <author> Dittia, Zubin, Jerome R. Cox, Jr. and Guru Parulkar. </author> <title> Catching Up With the Networks: Host I/O at Gigabit Rates, </title> <type> Technical Report WUCS-94-11, </type> <institution> Department of Computer Science, Washington University in St. Louis, </institution> <year> 1994. </year>
Reference: [15] <author> Dittia, Zubin, Jerome R. Cox, Jr., and Guru Parulkar. </author> <title> Design of the APIC: A High Performance ATM Host-Network Interface Chip, </title> <booktitle> In Proceedings of INFOCOM95, </booktitle> <month> April 95. </month>
Reference: [16] <author> Eastlake, D.E., </author> <title> Domain Name System Security Extensions, </title> <address> draft-ietf-dnssec-secext2-02.txt, </address> <month> November </month> <year> 1997 </year>
Reference-contexts: On reception of the plugin, the ANN calculates the plugins MD5 hash, decrypts the received hash with the developers public key and compares both hashes. If they match, the plugin is assumed to be valid. The latest proposed security extensions <ref> [16] </ref> to the Domain Name System (DNS) provide support for a general public key distribution service which we plan to use to distribute the developers and code servers public keys.
Reference: [17] <author> Gunter, C., Nettles, S., Smith, J., </author> <title> The SwitchWare Active Network Architecture, </title> <note> http://www.cis.upenn.edu/~switchware/papers/switchware.ps, November 1997 </note>
Reference-contexts: The system proposed here builds in part on the theoretical background and terminology introduced in [6], but extends the systems capability to downloading function modules in-band, on-the-fly, and elaborates on the infrastructure needed to do so. 6.4 University of Pennsylvania The SwitchWare <ref> [34, 17] </ref> project mainly uses the programmable switch approach with three important components: active packets, switchlets, and a secure active router infrastructure. Active packets are similar to MITs capsules and switchlets are programs that provide specific services on the network nodes and can be dynamically loaded.
Reference: [18] <author> Gopalakrishnan, R., Parulkar, G., </author> <booktitle> "Bringing Real-time Scheduling Theory and Practice Closer for Multimedia Computing",In Proceedings of the 1996 ACM SIGMETRICS", </booktitle> <month> May </month> <year> 1996 </year>
Reference-contexts: The loadsharing algorithm will thereby first try to distribute flows to ANPEs connected to the same switch port before diverting to other ANPEs on the switch, thus saving switch bandwidth. We have already developed operating system support for ensuring QoS guarantees in the context of two other projects <ref> [18, 32] </ref> funded in part by DARPAs Quorum. We plan to use these operating system mechanisms and possibly expand them to implement the RC.
Reference: [19] <institution> INRIA IPv6 implementation for NetBSD/FreeBSD, ftp://ftp.inria.fr/networking/ipv6 </institution>
Reference-contexts: Other components shown in Figure 5 are already implemented in the Router Plugin platform and briefly described here: the IPv4/IPv6 stack is a dualstack IP implementation where the IPv6 part comes from the Institute National de Recherche en Informatique et en Automatique (INRIA, <ref> [19] </ref>) and is modified to fit into the Router Plugin system. The Association Identification Unit (AIU) implements fast packet filtering and flow detection mapping individual data packets to flows and matching flows against sets of filters.
Reference: [20] <author> Jacobson, V., and McCanne, S., </author> <title> Visual Audio Tool, </title> <institution> Lawrence Berkeley Laboratory, </institution> <note> Software on line </note>
Reference: [21] <author> Johnson, D., Perkins, C., </author> <title> Mobility Support in IPv6, </title> <address> draft-ietf-mobileip-ipv6-03.txt, </address> <month> July </month> <year> 1997 </year>
Reference-contexts: The code for multiple active functions can be wrapped together into one active plugin package. A download of such a package would install multiple active functions on the ANN. This makes sense for strongly correlated active functions such as the four options for IPv6 mobility support <ref> [21] </ref>. On occurrence of a function identifier in a data packet, not only the referenced active function implementation is downloaded and installed but also one or multiple others, since their reference is very likely in the future. <p> We will show this feature for options required for IPv6 mobility support <ref> [21] </ref> and possibly others. As mentioned before, the described system is not limited to such incremental upgrades of an existing protocol.
Reference: [22] <author> Legedza, U., Wetherall D., Guttag, J., </author> <title> Improving the Performance of Distributed Applications Using Active Networks, </title> <booktitle> In Proceedings of INFOCOM98, </booktitle> <month> April </month> <year> 1998 </year>
Reference-contexts: We plan to implement (and possibly improve) the scheme by usage of active plugins which allow upgrading of the routers at run time. Another interesting scheme for reliable multicast using active network technologies has been proposed recently (ARM, <ref> [22] </ref>). <p> To reduce wide-area recovery latency and to distribute the retransmission load, routers cache a certain amount of multicast data. A prototype has been implemented on MITs ANTS [39] architecture and yields promising results <ref> [22] </ref>. We plan to implement or port a version of the algorithm for comparison to our system. <p> As other applications emerge over time however, we might consider their applicability as well if our resources permit. Possible other applications of interest are self-organizing network caches [7], e.g. for web traffic and online auctions <ref> [22] </ref>. 5.3.1 Real-Time Video and Audio Congestion control for real-time video: Congestion control for real time video streams has been shown to be a promising field for active network technologies [6]. An MPEG stream consists of frames of three different types: I, P, and B. <p> Instead of passively forwarding each packet of the input stream to each receiver, an active node can use signal fusion to do some of the signal data mixing within the network, as pointed out in <ref> [22] </ref>. If multiple input signals pass through the same node at approximately the same time, that node can mix the signals. If the mixed signal is smaller than the sum of its constituents, this will reduce the total network traffic. <p> In another document, the usefulness of active reliable multicast is shown [23] using the ANTS platform (we briefly discussed this approach to multicasting in section 5.2) and results in terms of significant performance gains are measured in <ref> [22] </ref>. [22] also proposes various applications of active network technologies like sensor data mixing and inspired us to follow similar ways. 6.2 BBN Smart Packets [27] is another interesting capsule related approach. The main focus is on implementation of extended diagnostic functionality in the network. <p> In another document, the usefulness of active reliable multicast is shown [23] using the ANTS platform (we briefly discussed this approach to multicasting in section 5.2) and results in terms of significant performance gains are measured in <ref> [22] </ref>. [22] also proposes various applications of active network technologies like sensor data mixing and inspired us to follow similar ways. 6.2 BBN Smart Packets [27] is another interesting capsule related approach. The main focus is on implementation of extended diagnostic functionality in the network.
Reference: [23] <author> Lehman, L., Garland, S.J., and Tennenhouse, D., </author> <title> Active Reliable Multicast, </title> <booktitle> In Proceedings of INFOCOM98, </booktitle> <month> April </month> <year> 1998 </year>
Reference-contexts: Although exploited in a different way, this work shows that code caching is an interesting optimization that is worth pursuing. In another document, the usefulness of active reliable multicast is shown <ref> [23] </ref> using the ANTS platform (we briefly discussed this approach to multicasting in section 5.2) and results in terms of significant performance gains are measured in [22]. [22] also proposes various applications of active network technologies like sensor data mixing and inspired us to follow similar ways. 6.2 BBN Smart Packets
Reference: [24] <author> McCanne, S., Jacobson, V., </author> <title> vic: A Flexible Framework for Packet Video, </title> <booktitle> In Proceedings of ACM Multimedia, </booktitle> <month> November </month> <year> 1995 </year>
Reference: [25] <author> Mockapetris, P., </author> <title> Domain Names - Implementation and Specification, </title> <type> RFC 1035, </type> <month> November </month> <year> 1987 </year> <month> ftp://ftp.ee.lbl.gov/conferencing/vat </month>
Reference-contexts: The total end-to-end code download delay can be reduced approximately to the time a single ANN requires for the download. (2) Optimal code server arrangement. Code servers should be as close as possible to the ANN. They might be put into a hierarchy similar to DNS <ref> [25] </ref> servers where the root code servers get their active plugins from the programmers of the plugins. (3) Minimizing the distance between the ANN and the code server: The ANN can reach the code server through different ways.
References-found: 25

