URL: http://www.cs.toronto.edu/~mes/papers/em.ps
Refering-URL: http://www.cs.toronto.edu/~mes/papers/printed.html
Root-URL: 
Email: degiacomo@dis.uniroma1.it  reiter@cs.toronto.edu  mes@cs.toronto.edu  
Title: Execution Monitoring of High-Level Robot Programs.  
Author: Giuseppe De Giacomo Ray Reiter Mikhail Soutchanski 
Web: http://www.ida.liu.se/ext/etai/nj/fcs-98/listing.html  
Date: Jan. 6 Jan. 9, 1998).  
Note: Published in:Working Notes of the 4th Symposium on Logical Formalizations of Commonsense Reasoning (London, UK,  Electronic version is available at:  Names of the authors are mentioned alphabetically.  
Address: "La Sapienza"  Toronto  Toronto  
Affiliation: Dipartimento di Informatica e Sistemistica Universita di Roma  Department of Computer Science University of  Department of Computer Science University of  
Abstract: Imagine a robot that is executing a program on-line, and, insofar as it is reasonable to do so, it wishes to continue with this on-line program execution, no matter what exogenous events occur in the world. Execution monitoring is the robot's process of observing the world for discrepancies between the actual world and its internal representation of it, and recovering from such discrepancies. We provide a situation calculus-based account of such on-line program executions, with monitoring. This account relies on a specification for a single-step interpreter for the logic programming language Golog. The theory is supported by an implementation that is illustrated by a standard blocks world in which a robot is executing a Golog program to build a suitable tower. The monitor makes use of a simple kind of planner for recovering from malicious exogenous actions performed by another agent. After performing the sequence of actions generated by the recovery procedure, the robot eliminates the discrepancy and resumes executing its tower-building program. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Ambrose-Ingerson and S. Steel. </author> <title> Integrating planning, execution and monitoring. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI'88), </booktitle> <pages> pages 735-740. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1988. </year>
Reference-contexts: From this point, the on-line evaluation continues by doing one step of the new program, etc. */ 6 Conclusions and Future Work The more elaborated version of this paper will discuss the relationship of our work to "traditional" approaches in AI to execution monitoring (e.g. PLANEX [2], IPEM <ref> [1] </ref>, ROGUE [5]). We remark here only that we differ from these, first by the formal neatness of our approach, secondly by the fact that ours is a story for monitoring arbitrary programs, not simply straight line or partially ordered plans.
Reference: [2] <author> R.E. Fikes, P.E. Hart, and N.J. Nilsson. </author> <title> Learning and executing generalized robot plans. </title> <journal> Artificial Intelligence, </journal> <volume> 3(4) </volume> <pages> 251-288, </pages> <year> 1972. </year>
Reference-contexts: From this point, the on-line evaluation continues by doing one step of the new program, etc. */ 6 Conclusions and Future Work The more elaborated version of this paper will discuss the relationship of our work to "traditional" approaches in AI to execution monitoring (e.g. PLANEX <ref> [2] </ref>, IPEM [1], ROGUE [5]). We remark here only that we differ from these, first by the formal neatness of our approach, secondly by the fact that ours is a story for monitoring arbitrary programs, not simply straight line or partially ordered plans.
Reference: [3] <author> G. De Giacomo, Y. Lesperance, and H.J. Levesque. </author> <title> Reasoning about concurrent executions, prioritized interrupts, </title> <booktitle> and exogenous actions in the situation calculus. In Proceedings of the Fifteenth International Joint Conference on Artificial Intelligence (IJCAI-97), </booktitle> <year> 1997. </year>
Reference-contexts: Axioms describing the initial situation what is true initially, before any actions have occurred. This is any finite set of sentences that mention only the situation term S 0 , or that are situation independent. 2.1 Golog As presented in [6] and extended in <ref> [3] </ref>, Golog is a logic-programming language whose primitive actions are those of a background domain theory. Typically Golog programs are intended to be executed off-line, and then a sequence of actions should be extracted from such off-line 2 computation and executed on-line. <p> b 0 ) ; b 2 :r (b 2 )? ; move (b 2 ; b 1 ) ; b 3 :a (b 3 )? ; move (b 3 ; b 2 ) b 4 :p (b 4 )? ; move (b 4 ; b 3 ) endProc As in <ref> [3] </ref>, we associate to programs a transition semantics, i.e. a semantics based on single steps of program execution. Informally, this semantics declares that as a program proceeds, a program counter moves from the very beginning of the program along its intermediate states. <p> A configuration is a pair consisting of a program state (the part of the original program that is left to perform) and a situation. We introduce two predicates Trans and Final. 2 2 Axioms for procedures will be given in the extended version of <ref> [3] </ref>. 3 * Trans (ffi; s; ffi 0 ; s 0 ), given a program ffi and a situation s, tells us which is a possible next step in the computation, returning the resulting situation s 0 and the program ffi 0 that remains to be executed.
Reference: [4] <author> G. De Giacomo and H.J. Levesque. </author> <title> Congolog incremental interpreter. </title> <type> Technical report, </type> <institution> Computer Science Department, University of Toronto, </institution> <year> 1997. </year> <note> In preparation. </note>
Reference-contexts: Typically Golog programs are intended to be executed off-line, and then a sequence of actions should be extracted from such off-line 2 computation and executed on-line. Here we consider a variant of Golog that is intended to be executed entirely on-line <ref> [4] </ref>. <p> The following is such an interpreter: online (Prog,S0,Sf) :- final (Prog,S0), S0 = Sf ; trans (Prog,S0,Prog1,S1), /* Select a first action of Prog. */ !, /* Commit to this action. */ online (Prog1,S1,Sf). 4 An on-line interpreter based on T rans and F inal was originally proposed in <ref> [4] </ref> to give an account of Golog/ConGolog programs with sensing actions.
Reference: [5] <author> K.Z. Haigh and M. Veloso. </author> <title> Imterleaving planning and robot execution for asynchronous user requests. </title> <booktitle> In Proc. Int. Conf. on Intelligent Robots and Systems (IROS), </booktitle> <year> 1996. </year>
Reference-contexts: PLANEX [2], IPEM [1], ROGUE <ref> [5] </ref>). We remark here only that we differ from these, first by the formal neatness of our approach, secondly by the fact that ours is a story for monitoring arbitrary programs, not simply straight line or partially ordered plans. Plans for ongoing and future work include the following issues: 1.
Reference: [6] <author> H.J. Levesque, R. Reiter, Y. Lesperance, F. Lin and R. Scherl. Golog: </author> <title> A logic programming language for dynamic domains. </title> <journal> J. of Logic Programming, Special Issue on Actions, 1997, </journal> <volume> volume 31, </volume> <pages> N 1-3, 59-83. </pages>
Reference-contexts: Axioms describing the initial situation what is true initially, before any actions have occurred. This is any finite set of sentences that mention only the situation term S 0 , or that are situation independent. 2.1 Golog As presented in <ref> [6] </ref> and extended in [3], Golog is a logic-programming language whose primitive actions are those of a background domain theory. Typically Golog programs are intended to be executed off-line, and then a sequence of actions should be extracted from such off-line 2 computation and executed on-line. <p> ffi; s) Trans (ffi; s; ffi 00 ; s 00 ) ^ T (ffi 00 ; s 00 ; ffi 0 ; s 0 ) ) T (ffi; s; ffi 0 ; s 0 ) Using TransCl and Final we can give a new definition of the Do relation of <ref> [6] </ref> as: Do (ffi; s; s 0 ) 9ffi 0 :TransCl (ffi; s; ffi 0 ; s 0 ) ^ Final (ffi 0 ; s 0 ): In other words, Do (ffi; s; s 0 ) holds if it is possible to repeatedly single-step the program ffi, obtaining a program ffi
Reference: [7] <author> F. Lin and R. Reiter. </author> <title> State constraints revisited. </title> <editor> J. </editor> <booktitle> of Logic and Computation, special issue on actions and processes, 1994, </booktitle> <volume> volume 4, </volume> <pages> 655-678. </pages>
Reference-contexts: The version of the situation calculus that we use here has been described in [12], <ref> [7] </ref>, and elsewhere. To axiomatize the primitive actions and fluents of a domain of application, one must provide the following axioms: 1.
Reference: [8] <author> J.McCarthy, </author> <title> P.Hayes Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> In: B.Meltzer and D.Michie (editors), </editor> <booktitle> Machine Intelligence, v. </booktitle> <volume> 4, </volume> <publisher> Edinburgh University Press, </publisher> <year> 1969, </year> <pages> 463-502 </pages>
Reference: [9] <author> P.J. Ramadge and W.M. Wonham. </author> <title> Supervisory control of a class of discrete event processes. </title> <journal> SIAM Journal of Control and Optimization, </journal> <volume> 25(1) </volume> <pages> 206-230, </pages> <year> 1987. </year> <month> 13 </month>
Reference-contexts: Plans for ongoing and future work include the following issues: 1. Draw closer parallels with the concept of controllable systems in discrete event control theory <ref> [9, 10] </ref>. 2. Prove soundness and/or completeness of various recovery procedures. 12 3. Extend these ideas to temporal domains, for example, monitoring robot control programs written in sequential, temporal Golog [13]. 4. Implement these ideas on the Cognitive Robotics Group's RWI B21 autonomous robot at the University of Toronto.
Reference: [10] <author> P.J. Ramadge and W.M. Wonham. </author> <title> Modular feedback logic for discrete event systems. </title> <journal> SIAM Journal of Control and Optimization, </journal> <volume> 25(5) </volume> <pages> 1202-1218, </pages> <year> 1987. </year>
Reference-contexts: Plans for ongoing and future work include the following issues: 1. Draw closer parallels with the concept of controllable systems in discrete event control theory <ref> [9, 10] </ref>. 2. Prove soundness and/or completeness of various recovery procedures. 12 3. Extend these ideas to temporal domains, for example, monitoring robot control programs written in sequential, temporal Golog [13]. 4. Implement these ideas on the Cognitive Robotics Group's RWI B21 autonomous robot at the University of Toronto.
Reference: [11] <author> R. </author> <title> Reiter The frame problem in the situation calculus: a simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In: Vladimir Lifschitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy, </booktitle> <pages> pages 359-380. </pages> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1991. </year>
Reference-contexts: Successor state axioms embody the solution to the frame problem of Reiter <ref> [11] </ref>. 3. Axioms describing the initial situation what is true initially, before any actions have occurred.
Reference: [12] <author> R. Reiter. </author> <title> Proving properties of states in the situation calculus. </title> <journal> Artificial Intelligence, </journal> <volume> 64 </volume> <pages> 337-351, </pages> <year> 1993. </year>
Reference-contexts: The version of the situation calculus that we use here has been described in <ref> [12] </ref>, [7], and elsewhere. To axiomatize the primitive actions and fluents of a domain of application, one must provide the following axioms: 1.
Reference: [13] <author> R. Reiter. </author> <title> Sequential, temporal Golog. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1997. </year> <note> http://www.cs.toronto.edu/~cogrobo/. </note>
Reference-contexts: Draw closer parallels with the concept of controllable systems in discrete event control theory [9, 10]. 2. Prove soundness and/or completeness of various recovery procedures. 12 3. Extend these ideas to temporal domains, for example, monitoring robot control programs written in sequential, temporal Golog <ref> [13] </ref>. 4. Implement these ideas on the Cognitive Robotics Group's RWI B21 autonomous robot at the University of Toronto.
Reference: [14] <author> R. Scherl and H.J. Levesque. </author> <title> The frame problem and knowledge producing actions. </title> <booktitle> In Proc. AAAI-93, </booktitle> <pages> pages 689-695, </pages> <address> Washington, DC, </address> <year> 1993. </year>
Reference-contexts: A cautious on-line interpreter appeals to the off-line execution of the robot's program (in the process of guaranteeing that after committing to a program action, the remainder of the program terminates). Therefore, this requirement precludes cautious interpretation of robot programs that appeal to sensing actions <ref> [14] </ref>, since such actions cannot be performed off-line. 6 Because the brave interpreter never looks ahead, it is suitable for programs with sense actions. The price it pays for this is a greater risk of following dead-end paths. The cautious on-line interpreter is implemented in Prolog.
References-found: 14

