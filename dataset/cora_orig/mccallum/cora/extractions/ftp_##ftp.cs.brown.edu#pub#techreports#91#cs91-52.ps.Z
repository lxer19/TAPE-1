URL: ftp://ftp.cs.brown.edu/pub/techreports/91/cs91-52.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-91-52.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. Lejter, S. Meyers, and S. P. Reiss, </author> <title> "Support for Maintaining Object-Oriented Programs," </title> <booktitle> in Proceedings of the Conference on Software Maintenance, </booktitle> <pages> pp. 171-178, </pages> <month> Oct. </month> <year> 1991. </year> <note> To appear in IEEE Transactions on Software Engineering, December 1992. Also available as Brown University Computer Science Department Technical Report No. CS-91-52, August 1991. This paper is largely drawn from two other papers [9, 22]. </note>
Reference-contexts: Introduction Object-oriented languages are growing in popularity. They introduce features not available in conventional programming languages, such as function and operator overloading, inheri fl An earlier version of this paper was presented at the 1991 Conference on Software Maintenance <ref> [1] </ref>. 1 tance, and dynamic (late) binding. Although these features offer advantages, they also have some drawbacks.
Reference: [2] <author> R. M. Stallman, </author> <title> "EMACS: The Extensible, Customizable, Self-Documenting Display Editor," </title> <booktitle> in Proceedings of the ACM SIGPLAN/SIGOA Symposium on text Manipulation, </booktitle> <pages> pp. 147-156, </pages> <month> June </month> <year> 1981. </year> <title> Reprinted in Interactive Programming Environments, </title> <editor> David R. Barstow, Howard E. Shrobe, and Erik Sandewall, editors, </editor> <publisher> McGraw-Hill, </publisher> <year> 1984. </year>
Reference-contexts: To help programmers deal with problems such as these, we have developed the XREF editing module and its underlying relational database XREFDB. XREF is a set of interactive routines integrated into the GNU Emacs text editor <ref> [2] </ref>. These routines allow programmers to obtain information about programs they are working on through special editor commands. (Equivalent functionality is available through annotedit, the primary text editor in the FIELD programming environment [3, 4].
Reference: [3] <author> S. P. Reiss, </author> <title> "Connecting Tools using Message Passing in the FIELD Program Development Environment," </title> <journal> IEEE Software, </journal> <pages> pp. 57-67, </pages> <month> July </month> <year> 1990. </year> <note> Also available as 18 Brown University Computer Science Department Technical Report CS-88-18, "Inte--gration Mechanisms in the FIELD Environment," </note> <year> 1988. </year>
Reference-contexts: XREF is a set of interactive routines integrated into the GNU Emacs text editor [2]. These routines allow programmers to obtain information about programs they are working on through special editor commands. (Equivalent functionality is available through annotedit, the primary text editor in the FIELD programming environment <ref> [3, 4] </ref>. However, because Emacs is more familiar to most readers than is annotedit, in this paper we focus on the Emacs interface to XREFDB.) XREFDB is a relational database whose relations were specifically designed to support queries about programming languages.
Reference: [4] <author> S. P. Reiss, </author> <title> "Interacting with the FIELD Environment," </title> <journal> Software: Practice and Experience, </journal> <volume> vol. 20, </volume> <pages> pp. 89-115, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: XREF is a set of interactive routines integrated into the GNU Emacs text editor [2]. These routines allow programmers to obtain information about programs they are working on through special editor commands. (Equivalent functionality is available through annotedit, the primary text editor in the FIELD programming environment <ref> [3, 4] </ref>. However, because Emacs is more familiar to most readers than is annotedit, in this paper we focus on the Emacs interface to XREFDB.) XREFDB is a relational database whose relations were specifically designed to support queries about programming languages.
Reference: [5] <author> S. P. Reiss and S. Meyers, </author> <title> "FIELD Support for C++," </title> <booktitle> in USENIX C++ Conference Proceedings, </booktitle> <pages> pp. 293-299, </pages> <month> Apr. </month> <year> 1990. </year>
Reference-contexts: This problem can be mitigated somewhat by class browsers and similar tools <ref> [5, 6] </ref>, but such tools are, at this point, neither well-developed nor commonly available. The end result is that a programmer working on object-oriented software can spend a substantial amount of time searching through various class descriptions in an attempt to find the information s/he needs.
Reference: [6] <author> R. Raghavan, N. Ramakrishnan, and S. Strater, </author> <title> "A C++ Class Browser," </title> <booktitle> in 1987 USENIX C++ Papers, </booktitle> <pages> pp. 274-281, </pages> <year> 1987. </year>
Reference-contexts: This problem can be mitigated somewhat by class browsers and similar tools <ref> [5, 6] </ref>, but such tools are, at this point, neither well-developed nor commonly available. The end result is that a programmer working on object-oriented software can spend a substantial amount of time searching through various class descriptions in an attempt to find the information s/he needs.
Reference: [7] <author> S. Meyers and S. P. Reiss, </author> <title> "A System for Multiparadigm Development of Software Systems," </title> <booktitle> in Proceedings of the Sixth International Workshop on Software Specification and Design, </booktitle> <month> Oct. </month> <year> 1991. </year> <note> Also available as Brown University Computer Science Department Technical Report No. CS-91-50, </note> <month> August </month> <year> 1991. </year>
Reference-contexts: For a programmer examining an unfamiliar object-oriented program, the fact that dynamically bound calls can't be statically traced can pose a serious barrier to her/his understanding of the program. An Example One of the software systems currently under development at Brown University is used to model directed hypergraphs <ref> [7, 8] </ref>. In these graphs, hyperarcs are sets of source and destination branches connected to source nodes and destination nodes, respectively. Source (destination) branches are attached to nodes at output (input) ports.
Reference: [8] <author> S. Meyers, </author> <title> Representing Software Systems in Multiple-View Development Environments. </title> <type> PhD thesis, </type> <institution> Brown University Department of Computer Science, </institution> <year> 1992. </year>
Reference-contexts: For a programmer examining an unfamiliar object-oriented program, the fact that dynamically bound calls can't be statically traced can pose a serious barrier to her/his understanding of the program. An Example One of the software systems currently under development at Brown University is used to model directed hypergraphs <ref> [7, 8] </ref>. In these graphs, hyperarcs are sets of source and destination branches connected to source nodes and destination nodes, respectively. Source (destination) branches are attached to nodes at output (input) ports.
Reference: [9] <author> S. Meyers, </author> <title> "Working with Object-Oriented Programs: The View from the Trenches is Not Always Pretty," </title> <booktitle> in Proceedings of the Symposium on Object-Oriented Programming Emphasizing Practical Applications (SOOPPA), </booktitle> <pages> pp. 51-65, </pages> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: Meyers has published the details of the search elsewhere <ref> [9] </ref>.
Reference: [10] <author> B. Lewis and D. LaLiberte, </author> <title> The GNU Emacs Lisp Reference Manual. The Free Software Foundation, </title> <year> 1990. </year>
Reference-contexts: These queries were implemented as a set of routines in Emacs Lisp <ref> [10] </ref>, collectively known as the XREF module, that allow users to ask these questions from within GNU Emacs. XREF translates user requests into XREFDB queries, communicates them to an XREFDB process running alongside Emacs, and then uses the answers provided by the database to take appropriate actions within Emacs.
Reference: [11] <author> P. D. O'Brien, D. C. Halbert, and M. F. Kilian, </author> <title> "The Trellis Programming Environment," </title> <booktitle> in Proceedings of the 1987 Conference on Object-Oriented Programming Systems, Languages and Applications (OOPSLA '87), </booktitle> <pages> pp. 91-102, </pages> <month> Oct. </month> <year> 1987. </year>
Reference-contexts: Such voluntary use under less than ideal conditions increases our confidence in the need for such a package. 15 Related Work The Trellis programming environment <ref> [11] </ref> provides Trellis/Owl programmers with a set of tools similar to the ones presented in this paper. Like our system, Trellis is built around a program database that includes cross-referencing and type information about the objects and functions present in the program under development.
Reference: [12] <author> W. Teitelman and L. Masinter, </author> <title> "The Interlisp Programming Environment," </title> <journal> IEEE Computer, </journal> <volume> vol. 14, </volume> <pages> pp. 25-34, </pages> <month> Apr. </month> <year> 1981. </year> <title> Reprinted in Interactive Programming Environments, </title> <editor> David R. Barstow, Howard E. Shrobe, and Erik Sandewall, editors, </editor> <publisher> McGraw-Hill, </publisher> <year> 1984. </year>
Reference-contexts: Other systems that include a database integrated with a text editor include MasterScope for Interlisp <ref> [12] </ref> and the R n environment for FORTRAN [13]. None of these systems supports C++. The C and C++ Information Abstractors (CIA and CIA++)[14, 15] are systems in which a database is used to store and manipulate information describing the structure of a program.
Reference: [13] <author> R. T. Hood and K. Kennedy, </author> <title> "A Programming Environment for Fortran," </title> <type> Tech. Rep. </type> <institution> TR84-1, Rice University, </institution> <month> June </month> <year> 1984. </year> <month> 19 </month>
Reference-contexts: Other systems that include a database integrated with a text editor include MasterScope for Interlisp [12] and the R n environment for FORTRAN <ref> [13] </ref>. None of these systems supports C++. The C and C++ Information Abstractors (CIA and CIA++)[14, 15] are systems in which a database is used to store and manipulate information describing the structure of a program.
Reference: [14] <author> Y.-F. Chen, M. Y. Nishimoto, and C. V. Ramamoorthy, </author> <title> "The C Information Abstrac--tion System," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 16, </volume> <pages> pp. 325-334, </pages> <month> Mar. </month> <year> 1990. </year>
Reference: [15] <author> J. E. Grass and Y.-F. Chen, </author> <title> "The C++ Information Abstractor," </title> <booktitle> in USENIX C++ Conference Proceedings, </booktitle> <pages> pp. 265-277, </pages> <year> 1990. </year>
Reference: [16] <author> J. Browne and D. B. Johnson, </author> <title> "FAST: A Second Generation Program Analysis System," </title> <booktitle> in Proceedings of the Second International Conference on Software Engineering, </booktitle> <pages> pp. 142-148, </pages> <year> 1977. </year>
Reference-contexts: Other systems consisting of a stand-alone database containing information on program structures include FAST <ref> [16] </ref>, Cscope [17], and OMEGA [18]. Other approaches built around a central database include ENCORE [19] and the Harvard Programming Development System [20].
Reference: [17] <author> J. L. Steffen, </author> <title> "Interactive Examination of a C Program with CScope," </title> <booktitle> in Proceedings of the USENIX Association Winter Conference, </booktitle> <pages> pp. 170-175, </pages> <year> 1985. </year>
Reference-contexts: Other systems consisting of a stand-alone database containing information on program structures include FAST [16], Cscope <ref> [17] </ref>, and OMEGA [18]. Other approaches built around a central database include ENCORE [19] and the Harvard Programming Development System [20].
Reference: [18] <author> M. A. Linton, </author> <title> "Implementing Relational Views of Programs," </title> <booktitle> in Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments (P. Henderson, </booktitle> <publisher> ed.), </publisher> <pages> pp. 132-140, </pages> <month> Apr. </month> <year> 1984. </year> <note> Published as ACM SIGSOFT Software Engineering Notes 9:3, </note> <month> May </month> <year> 1984, </year> <journal> and ACM SIGPLAN Notices 19:5, </journal> <month> May </month> <year> 1984. </year>
Reference-contexts: Other systems consisting of a stand-alone database containing information on program structures include FAST [16], Cscope [17], and OMEGA <ref> [18] </ref>. Other approaches built around a central database include ENCORE [19] and the Harvard Programming Development System [20]. Recently, Rosenblum and Wolf have developed an internal representation for the semantics of C++ programs [21], and this representation could be used in place of a formal database for C++ development tools.
Reference: [19] <author> S. B. Zdonik and P. Wegner, </author> <title> "A Database Approach to Languages, Libraries, and Environments," </title> <type> Tech. Rep. </type> <institution> CS-85-10, Brown University Department of Computer Science, </institution> <year> 1985. </year>
Reference-contexts: Other systems consisting of a stand-alone database containing information on program structures include FAST [16], Cscope [17], and OMEGA [18]. Other approaches built around a central database include ENCORE <ref> [19] </ref> and the Harvard Programming Development System [20]. Recently, Rosenblum and Wolf have developed an internal representation for the semantics of C++ programs [21], and this representation could be used in place of a formal database for C++ development tools.
Reference: [20] <author> T. E. Cheatham, Jr., </author> <title> "An Overview of the Harvard Program Development System," in Software Engineering Environments (H. Hunke, </title> <editor> ed.), </editor> <publisher> North-Holland, </publisher> <year> 1981. </year>
Reference-contexts: Other systems consisting of a stand-alone database containing information on program structures include FAST [16], Cscope [17], and OMEGA [18]. Other approaches built around a central database include ENCORE [19] and the Harvard Programming Development System <ref> [20] </ref>. Recently, Rosenblum and Wolf have developed an internal representation for the semantics of C++ programs [21], and this representation could be used in place of a formal database for C++ development tools.
Reference: [21] <author> D. S. Rosenblum and A. L. Wolf, </author> <title> "Representing Semantically Analyzed C++ Code with Reprise," </title> <booktitle> in USENIX C++ Conference Proceedings, </booktitle> <pages> pp. 119-134, </pages> <month> Apr. </month> <year> 1991. </year>
Reference-contexts: Other approaches built around a central database include ENCORE [19] and the Harvard Programming Development System [20]. Recently, Rosenblum and Wolf have developed an internal representation for the semantics of C++ programs <ref> [21] </ref>, and this representation could be used in place of a formal database for C++ development tools. The implementation is not yet complete, however, so it is too early to evaluate the success of this approach. At any rate, their representation is very much specific to C++.
Reference: [22] <author> M. Lejter, S. Meyers, and S. P. Reiss, </author> <title> "Adding Semantic Information To C++ Development Environments," </title> <booktitle> in Proceedings of C++ at Work-'90, </booktitle> <pages> pp. 103-108, </pages> <month> Sept. </month> <year> 1990. </year> <month> 20 </month>
References-found: 22

