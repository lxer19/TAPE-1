URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/khaigh/www/papers/khaigh96e.ps.gz
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/khaigh/www/papers/khaigh96e.abstract.html
Root-URL: 
Email: khaigh@cs.cmu.edu  mmv@cs.cmu.edu  
Title: Planning with Dynamic Goals for Robot Execution  
Author: Karen Zita Haigh Manuela M. Veloso 
Address: Pittsburgh PA 15213-3891  
Affiliation: Computer Science Department Carnegie Mellon University  
Web: http://www.cs.cmu.edu/~khaigh  http://www.cs.cmu.edu/~mmv  
Abstract: We have been developing Rogue, an architecture that integrates high-level planning with a low-level executing robotic agent. Rogue is designed as the office gofer task planner for Xavier the robot. User requests are interpreted as high-level planning goals, such as getting coffee, and picking up and delivering mail or faxes. Users post tasks asynchronously and Rogue controls the corresponding planning and execution continuous process. This paper presents the extensions to a nonlinear state-space planning algorithm to allow for the interaction to the robot executor. We focus on presenting how executable steps are identified based on the planning model and the predicted execution performance; how interrupts from users requests are handled and incorporated into the system; how executable plans are merged according to their priorities; and how monitoring execution can add more perception knowledge to the planning and possible needed re-planning processes. The complete Rogue system will learn from its planning and execution experiences to improve upon its own behaviour with time. We finalize the paper by briefly discussing Rogue's learning opportunities. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Jaime G. Carbonell, Craig A. Knoblock, and Steven Minton. </author> <title> Prodigy: An integrated architecture for planning and learning. </title> <editor> In K. VanLehn, editor, </editor> <booktitle> Architectures for Intelligence. </booktitle> <publisher> Erlbaum, </publisher> <address> Hillsdale, NJ, </address> <year> 1990. </year> <note> Also Available as Technical Report CMU-CS-89-189. </note>
Reference-contexts: Prodigy is a domain-independent problem solver that serves as a testbed for machine learning research <ref> [1; 10] </ref>. Prodigy4.0 is a nonlinear planner that follows a state-space search guided by means-ends analysis and backward chaining. It reasons about multiple goals and multiple alternative operators to achieve the goals. In prodigy, an incomplete plan consists of two parts, the head-plan and the tail-plan (see Figure 3). <p> The module is able to compensate for certain problems, such as obstacles and missing landmarks, and will not report failure in these situations. n2 (done) n4 &lt;*finish*&gt; n5 (mtg-scheduled) Firing prefer bindings LOOK-AT-CLOSEST-CONF-ROOM-FIRST #&lt;5309&gt; over #&lt;5311&gt; n7 &lt;schedule-meeting 5309&gt; <ref> [1] </ref> n8 (conference-room 5309) n10 &lt;select-conference-room 5309&gt; n11 (at-room 5309) n13 &lt;goto-room 5309&gt; n14 &lt;GOTO-ROOM 5309&gt; SENDING COMMAND (tcaExecuteCommand "C_say" "Going to room 5309") ANNOUNCING: Going to room 5309 SENDING COMMAND (TCAEXPANDGOAL "navigateToG" #(TASK-CONTROL::MAPLOCDATA 567.0d0 3483.0d0)) ...waiting...
Reference: [2] <author> Karen Zita Haigh and Manuela Veloso. </author> <title> Interleaving planning and robot execution for asynchronous user requests. </title> <booktitle> In Proceedings of the International Conference on Intelligent Robots and Systems (IROS), </booktitle> <month> November </month> <year> 1996. </year> <note> To Appear. </note>
Reference-contexts: We are currently investigating techniques that will allow the system to use experience to improve its performance and model of the world. We have been reporting on our work on the interleaving of planning and execution work <ref> [2; 3] </ref>. In this paper, we focus on describing in detail the planning algorithm and representation. Rogue uses the prodigy planning algorithm which is a non-linear state-space means-ends analysis planner. We explain the extensions to the algorithm that allow for effective robot execution.
Reference: [3] <author> Karen Zita Haigh and Manuela M. Veloso. </author> <title> Using perception information for robot planning and execution. </title> <booktitle> In Proceedings of the AAAI Workshop "Intelligent Adaptive Agents". </booktitle> <publisher> AAAI Press, </publisher> <month> August </month> <year> 1996. </year> <note> Available at http://www.cs.cmu.edu/~khaigh/papers.html. </note>
Reference-contexts: We are currently investigating techniques that will allow the system to use experience to improve its performance and model of the world. We have been reporting on our work on the interleaving of planning and execution work <ref> [2; 3] </ref>. In this paper, we focus on describing in detail the planning algorithm and representation. Rogue uses the prodigy planning algorithm which is a non-linear state-space means-ends analysis planner. We explain the extensions to the algorithm that allow for effective robot execution.
Reference: [4] <author> Joseph O'Sullivan and Karen Zita Haigh. </author> <type> Xavier. </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> July </month> <year> 1994. </year> <note> Manual, Version 0.2, unpublished internal report. </note>
Reference-contexts: Xavier is a robot developed by Reid Simmons at Carnegie Mellon <ref> [4; 7] </ref>. One of the goals of the project is to have the robot move autonomously in an office build ing reliably performing office tasks such as picking up and delivering mail and computer printouts, returning and picking up library books, and carrying recycling cans to the appropriate containers [5]. <p> Rogue is intended to be the task scheduler for a roving office gofer unit, and will deal with tasks such as delivering mail, picking up printouts and returning library books. Xavier is a mobile robot being developed at CMU <ref> [4; 7] </ref> (see Figure 1). It is built on an RWI B24 base and includes bump sensors, a laser range finder, sonars, a color camera and a speech board. The software controlling Xavier includes both reactive and deliberative behaviours, integrated using the Task Control Architecture (TCA) [6; 8].
Reference: [5] <author> Reid Simmons. </author> <title> Becoming increasingly reliable. </title> <booktitle> In Proceedings of AIPS-94, </booktitle> <pages> pages 152-157, </pages> <address> Chicago, IL, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: One of the goals of the project is to have the robot move autonomously in an office build ing reliably performing office tasks such as picking up and delivering mail and computer printouts, returning and picking up library books, and carrying recycling cans to the appropriate containers <ref> [5] </ref>. Our on-going contribution to this ultimate goal is at the high-level reasoning of the process, allowing the robot to efficiently handle multiple interacting goals, and to learn from its experience. We aim at building a complete planning, executing and learning autonomous robotic agent.
Reference: [6] <author> Reid Simmons. </author> <title> Structured control for autonomous robots. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 10(1), </volume> <month> February </month> <year> 1994. </year>
Reference-contexts: It is built on an RWI B24 base and includes bump sensors, a laser range finder, sonars, a color camera and a speech board. The software controlling Xavier includes both reactive and deliberative behaviours, integrated using the Task Control Architecture (TCA) <ref> [6; 8] </ref>. The underlying architecture is described in more detail in [7]. Prodigy and Xavier are linked together using the Task Control Architecture [6; 8] as shown in Figure 2. <p> The software controlling Xavier includes both reactive and deliberative behaviours, integrated using the Task Control Architecture (TCA) <ref> [6; 8] </ref>. The underlying architecture is described in more detail in [7]. Prodigy and Xavier are linked together using the Task Control Architecture [6; 8] as shown in Figure 2.
Reference: [7] <author> Reid Simmons, Rich Goodwin, Karen Zita Haigh, Sven Koenig, and Joseph O'Sullivan. </author> <title> A modular architecture for office delivery robots. </title> <booktitle> Submission to Autonomous Agents 1997, </booktitle> <month> February </month> <year> 1997. </year>
Reference-contexts: Xavier is a robot developed by Reid Simmons at Carnegie Mellon <ref> [4; 7] </ref>. One of the goals of the project is to have the robot move autonomously in an office build ing reliably performing office tasks such as picking up and delivering mail and computer printouts, returning and picking up library books, and carrying recycling cans to the appropriate containers [5]. <p> Rogue is intended to be the task scheduler for a roving office gofer unit, and will deal with tasks such as delivering mail, picking up printouts and returning library books. Xavier is a mobile robot being developed at CMU <ref> [4; 7] </ref> (see Figure 1). It is built on an RWI B24 base and includes bump sensors, a laser range finder, sonars, a color camera and a speech board. The software controlling Xavier includes both reactive and deliberative behaviours, integrated using the Task Control Architecture (TCA) [6; 8]. <p> The software controlling Xavier includes both reactive and deliberative behaviours, integrated using the Task Control Architecture (TCA) [6; 8]. The underlying architecture is described in more detail in <ref> [7] </ref>. Prodigy and Xavier are linked together using the Task Control Architecture [6; 8] as shown in Figure 2.
Reference: [8] <author> Reid Simmons, Long-Ji Lin, and Chris Fedor. </author> <title> Autonomous task control for mobile robots. </title> <booktitle> In Proceedings of the IEEE Symposium on Reactive Control, </booktitle> <address> Philadel-phia, PA, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: It is built on an RWI B24 base and includes bump sensors, a laser range finder, sonars, a color camera and a speech board. The software controlling Xavier includes both reactive and deliberative behaviours, integrated using the Task Control Architecture (TCA) <ref> [6; 8] </ref>. The underlying architecture is described in more detail in [7]. Prodigy and Xavier are linked together using the Task Control Architecture [6; 8] as shown in Figure 2. <p> The software controlling Xavier includes both reactive and deliberative behaviours, integrated using the Task Control Architecture (TCA) <ref> [6; 8] </ref>. The underlying architecture is described in more detail in [7]. Prodigy and Xavier are linked together using the Task Control Architecture [6; 8] as shown in Figure 2.
Reference: [9] <author> Peter Stone and Manuela Veloso. </author> <title> User-guided interleaving of planning and execution. </title> <booktitle> In Proceedings of the European Workshop on Planning, </booktitle> <month> September </month> <year> 1995. </year>
Reference-contexts: During the application phase, user-defined code is called which can map the operator to a real-world action sequence <ref> [9] </ref>. Some examples of the use of this feature include shortening combined planning and execution time, acquiring necessary domain knowledge in order to continue planning (e.g. sensing the world), and executing an action in order to know its outcome and handle any failures. 4.
Reference: [10] <author> Manuela M. Veloso, Jaime Carbonell, M. Alicia Perez, Daniel Borrajo, Eugene Fink, and Jim Blythe. </author> <title> Integrating planning and learning: The prodigy architecture. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <volume> 7(1), </volume> <month> January </month> <year> 1995. </year>
Reference-contexts: Prodigy is a domain-independent problem solver that serves as a testbed for machine learning research <ref> [1; 10] </ref>. Prodigy4.0 is a nonlinear planner that follows a state-space search guided by means-ends analysis and backward chaining. It reasons about multiple goals and multiple alternative operators to achieve the goals. In prodigy, an incomplete plan consists of two parts, the head-plan and the tail-plan (see Figure 3).
References-found: 10

