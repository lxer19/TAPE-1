URL: http://www.cs.columbia.edu/~leana/ps/ft.ps
Refering-URL: http://www.cs.columbia.edu/~leana/publications.html
Root-URL: http://www.cs.columbia.edu
Email: muntzg@cs.ucla.edu  
Title: Fault Tolerant Design of Multimedia Servers  
Author: Steven Berson Leana Golubchik Richard R. Muntz 
Note: (Appeared in SIGMOD '95.)  
Address: fsteven, leana,  
Affiliation: UCLA Computer Science Department  
Abstract: Recent technological advances have made multimedia on-demand servers feasible. Two challenging tasks in such systems are: a) satisfying the real-time requirement for continuous delivery of objects at specified bandwidths and b) efficiently servicing multiple clients simultaneously. To accomplish these tasks and realize economies of scale associated with servicing a large user population, the multimedia server can require a large disk subsystem. Although a single disk is fairly reliable, a large disk farm can have an unacceptably high probability of disk failure. Further, due to the real-time constraint, the reliability and availability requirements of multimedia systems are very stringent. In this paper we investigate techniques for providing a high degree of reliability and availability, at low disk storage, bandwidth, and memory costs for on-demand multimedia servers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Steven Berson, Shahram Ghandeharizadeh, Richard R. Muntz, and Xiangyu Ju. </author> <title> Staggered Striping in Multimedia Information Systems. </title> <booktitle> SIGMOD, </booktitle> <year> 1994. </year> <title> 11 When the cluster size is 2 we effectively have mirroring and one could use the two copies to get even more stream capacity. This can however lead to trouble when there is a failure since some streams would have to be dropped. </title>
Reference-contexts: Another challenging task in multimedia systems is to service multiple clients simultaneously. There have been a number of proposals for video server data layouts and scheduling algorithms <ref> [1, 11, 8, 3] </ref> but very few are concerned with fault tolerance [11]. An example multimedia system is illustrated in Figure 1; it includes a multimedia server, a communication network 1 , and a set of display stations.
Reference: [2] <author> D. Bitton and J. Gray. </author> <title> Disk Shadowing. </title> <booktitle> VLDB, </booktitle> <pages> pages 331-338, </pages> <year> 1988. </year>
Reference-contexts: Therefore, without some form of fault tolerance, such a system is not likely to be acceptable. To improve the reliability and availability of the system we must use some fraction of the disk space to store redundant information. Typically, parity schemes [7] and mirroring schemes <ref> [2] </ref> have been used for this purpose. For instance, consider a storage subsystem (such as illustrated in Figure 3), where four out of every five disks are used to store "real" data and the fifth disk is used to store parity information, e.g., X0p = X0 X1 X2 X3.
Reference: [3] <author> M. Chen, D. Kandlur, and P. Yu. </author> <title> Optimization of the Grouped Sweeping Scheduling (GSS) with Heterogeneous Multimedia Streams. </title> <booktitle> ACM Multimedia '93, </booktitle> <pages> pages 235-242, </pages> <year> 1993. </year>
Reference-contexts: Another challenging task in multimedia systems is to service multiple clients simultaneously. There have been a number of proposals for video server data layouts and scheduling algorithms <ref> [1, 11, 8, 3] </ref> but very few are concerned with fault tolerance [11]. An example multimedia system is illustrated in Figure 1; it includes a multimedia server, a communication network 1 , and a set of display stations. <p> This extension to the Streaming RAID scheme was suggested in [11] 5 as an approach to reducing buffering requirements (which can be relatively large for the Streaming RAID); similar "grouping" schemes (although not in the context of the Streaming RAID) have been studied in <ref> [3] </ref>. The reason for some loss of disk bandwidth utilization (less streams can be handled) is that the cycles are now shorter and there are fewer requests per disk per cycle and that in turn means that the seek optimization will not work quite as well 6 . <p> Since blocks can be delivered before an entire parity group is read, much less buffer space is needed (as will be shown in Section 5. If a space resulting from reading more streams per cycle are investigated in <ref> [3] </ref>. disk read schedule disk failure does occur, the affected disk cluster will switch to degraded mode, where a cluster reads an entire parity group at a time.
Reference: [4] <author> P. Chen, E. Lee, G. Gibson, R. Katz, and D. Patterson. </author> <title> RAID: High-Performance, Reliable Secondary Storage. </title> <journal> ACM Computing Surveys, </journal> <pages> pages 145-186, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: The Streaming RAID scheme can withstand up to one disk failure per cluster before a catastrophic failure occurs. If we assume that disks fail independently, then the mean time to failure (MTTF) of a 1000 disk system with clusters of 9 data disks and 1 parity disk is approximately <ref> [4] </ref>: M T T F = M T T F (disk) 2 N fl (C 1) fl M T T R (disk) where N is the total number of disks in the system, C is the cluster size including the parity disk, and MTTR (disk) is the mean time to repair
Reference: [5] <author> H. Hsiao and D. J. DeWitt. </author> <title> Chained Declustering: A New Availability Strategy for Multiprocessor Database Machines. </title> <booktitle> Proc. of Data Engineering, </booktitle> <pages> pages 456-465, </pages> <year> 1990. </year>
Reference-contexts: Note that of these dropped blocks, no more than 1 can be from each parity group. This shift has to propagate to the right until enough idle capacity is found. If there is not enough band 7 This is similar to how "chained declustering" <ref> [5] </ref> handles failures width available in the system, then a degradation of service occurs, and one or more requests must be terminated. As an example, consider Figure 8.
Reference: [6] <author> Richard R. Muntz and John C.S. Lui. </author> <title> Performance analysis of disk arrays under failure. </title> <booktitle> VLDB Conference, </booktitle> <pages> pages 162-173, </pages> <year> 1990. </year>
Reference-contexts: In this case, an active request might have to be terminated and rescheduled at a later time. Another example of this type of failure will be discussed in Section 4. There are three modes of operation for a disk subsystem <ref> [6] </ref>, as originally defined in the context of disk arrays: 1) normal mode, where all disks are operational, 2) degraded mode, where one (or more) disks have failed, and 3) rebuild mode, where the disks are still down, but the process of rebuilding the missing information on spare disks is in
Reference: [7] <author> David A. Patterson, Garth Gibson, and Randy H. </author> <note> Katz. </note>
Reference-contexts: Therefore, without some form of fault tolerance, such a system is not likely to be acceptable. To improve the reliability and availability of the system we must use some fraction of the disk space to store redundant information. Typically, parity schemes <ref> [7] </ref> and mirroring schemes [2] have been used for this purpose.
References-found: 7

