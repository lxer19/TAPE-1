URL: http://www.eecs.umich.edu/techreports/cse/1997/CSE-TR-328-97.ps.gz
Refering-URL: http://www.eecs.umich.edu/home/techreports/cse97.html
Root-URL: http://www.eecs.umich.edu
Email: fpjensen,wallace,soparkarg@eecs.umich.edu  
Title: Specifying and Constructing Schedulers for Workflows with Autonomous Executions  
Author: P. Jensen C. Wallace N. Soparkar 
Keyword: Interoperability; Autonomous Systems; Distributed Databases; Workflows  
Note: Part of this work appears in the ATMA '96 Workshop. Supported in part by IBM grant #302023. Supported in part by NSF grant CCR-92-04742.  
Address: Ann Arbor, MI 48109-2122 USA  
Affiliation: Electrical Engineering Computer Science The University of Michigan  
Abstract: Workflow has become an important paradigm for distributed data and computing systems in a wide range of application areas. In a workflow, tasks executing on autonomous, heterogeneous systems are coordinated through data and control flow constraints. An important challenge in workflow management is the scheduling of actions and operations performed by the concurrently executing tasks. The legal interleavings among the tasks must be specified, and scheduling control mechanisms to ensure correct, efficient executions must be generated. Scheduling workflows is particularly difficult because the dependencies between tasks may be application-specific and task autonomy may place certain actions outside the control or observation of the scheduler. We use techniques from supervisory control theory of discrete event systems for specifying and generating scheduling controllers in workflow environments. We specify the tasks and the intertask dependencies as finite state automata. To model task autonomy, we characterize some of the event transitions in the task automata as beyond the control or observation of the workflow scheduler. By applying the techniques of supervisory control theory to these specifications, we show how the existence of schedulers may be ascertained and how schedulers may be constructed. In cases where no controller can allow exactly the desired class of schedules, we show how to construct a scheduler that allows the best possible approximation to the desired class. We also address the issues of prioritized tasks and distributed workflow scheduling. Our approach provides an effective means to model several workflow systems and to create scheduling mechanisms to manage them. 
Abstract-found: 1
Intro-found: 1
Reference: [AAA + 96] <author> G. Alonso, D. Agrawal, A. El Abbadi, M. Kamath, R. Gunthor, and C. Mohan. </author> <title> Advanced transaction models in workflow contexts. </title> <booktitle> In Proceedings of the Twelfth International Conference on Data Engineering, </booktitle> <month> February </month> <year> 1996. </year>
Reference-contexts: Similar comments apply to a few other terms that we use, and their meaning is apparent from the context. 2 Related Work The increased interest in workflow management (e.g., see <ref> [GHS95, KR95, AAA + 96] </ref>) has resulted in considerable work on scheduling for workflow, and [RS94] provides an overview of various techniques. As in our approach, the results available are tied to the model adopted and the assumptions made.
Reference: [ASSR93] <author> P.C. Attie, M.P. Singh, A. Sheth, and M. Rusinkiewicz. </author> <title> Specifying and enforcing intertask dependencies. </title> <booktitle> In Proceedings of the Nineteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 134-145, </pages> <year> 1993. </year>
Reference-contexts: For instance, issues of controllability and ob-servability (i.e., concepts that arise from the autonomy of constituent systems, as explained in the paper) that are examined in this paper are not handled by such efforts. Our work is more closely related to <ref> [ASSR93, ST94, Kle91, Gun93] </ref> in that we model tasks in a workflow system as automata. For example, finite state automata are constructed in [ASSR93] to represent dependencies in a manner similar to ours. However, the concept of supervisory control, including controllability and observability, are not addressed. <p> Our work is more closely related to [ASSR93, ST94, Kle91, Gun93] in that we model tasks in a workflow system as automata. For example, finite state automata are constructed in <ref> [ASSR93] </ref> to represent dependencies in a manner similar to ours. However, the concept of supervisory control, including controllability and observability, are not addressed. Similar is the case for [ST94] in which the methods for specifying dependencies and scheduling is based on temporal logic.
Reference: [CDFV88] <author> R. Cieslak, C. Desclaux, A.S. Fawaz, and P. Varaiya. </author> <title> Supervisory control of discrete-event processes with partial observations. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 33(3) </volume> <pages> 249-260, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: In such situations, a scheduler must be able to anticipate the occurrence of unseen events, using its control to generate legal schedules regardless of whether the unseen events occur. In this regard we incorporate the concept of observability into the supervisory control model <ref> [CDFV88] </ref>. The set of events in an uncontrolled DES is partitioned into a set of observable events o and a set of unobservable events uo . <p> Interestingly, the class of prefix-closed controllable and observable languages is closed under intersection. Therefore, K # exists in general, and can be computed efficiently <ref> [CDFV88] </ref>. 6 Conclusions We have addressed the issues in scheduling autonomous tasks in a workflow environment. We provided a framework adapted from the well-understood domain of discrete event control systems theory.
Reference: [GHS95] <author> D. Georgakopoulos, M. Hornick, and A. Sheth. </author> <title> An overview of workflow management: From process modeling to workflow automation infrastructure. </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> 3 </volume> <pages> 119-153, </pages> <year> 1995. </year>
Reference-contexts: Similar comments apply to a few other terms that we use, and their meaning is apparent from the context. 2 Related Work The increased interest in workflow management (e.g., see <ref> [GHS95, KR95, AAA + 96] </ref>) has resulted in considerable work on scheduling for workflow, and [RS94] provides an overview of various techniques. As in our approach, the results available are tied to the model adopted and the assumptions made.
Reference: [GRS91] <author> D. Georgakopolous, M. Rusinkiewicz, and A. Sheth. </author> <title> On serializability of multidatabase transactions through forced local conflicts. </title> <booktitle> In Seventh International Conference on Data Engineering, </booktitle> <year> 1991. </year>
Reference-contexts: As in our approach, the results available are tied to the model adopted and the assumptions made. Much of the research reported for workflow scheduling has developed from multidatabase transaction scheduling (e.g., see <ref> [SKS91, GRS91] </ref>). In consequence, there are several efforts that deal with issues of commitment of autonomously executed transactions and tasks. Indeed, some of the examples in this paper reflect this trend. While important and interesting, such research touches on just one aspect of several for workflow systems.
Reference: [Gun93] <author> R. Gunthor. </author> <title> Extended transaction processing based on dependency rules. </title> <booktitle> In Proceedings of RIDE-IMS '93, </booktitle> <pages> pages 207-214, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: For instance, issues of controllability and ob-servability (i.e., concepts that arise from the autonomy of constituent systems, as explained in the paper) that are examined in this paper are not handled by such efforts. Our work is more closely related to <ref> [ASSR93, ST94, Kle91, Gun93] </ref> in that we model tasks in a workflow system as automata. For example, finite state automata are constructed in [ASSR93] to represent dependencies in a manner similar to ours. However, the concept of supervisory control, including controllability and observability, are not addressed.
Reference: [Kle91] <author> J. Klein. </author> <title> Advanced rule driven transaction management. </title> <booktitle> In Proceedings of the Thirty-sixth IEEE Computer Society International Conference, </booktitle> <pages> pages 562-567, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: For instance, issues of controllability and ob-servability (i.e., concepts that arise from the autonomy of constituent systems, as explained in the paper) that are examined in this paper are not handled by such efforts. Our work is more closely related to <ref> [ASSR93, ST94, Kle91, Gun93] </ref> in that we model tasks in a workflow system as automata. For example, finite state automata are constructed in [ASSR93] to represent dependencies in a manner similar to ours. However, the concept of supervisory control, including controllability and observability, are not addressed.
Reference: [KR95] <author> M. Kamath and K. Ramamritham. </author> <title> Modeling, correctness and systems issues in supporting advanced database applications using workflow management systems. </title> <type> Technical Report 95-50, </type> <institution> University of Massachusetts, </institution> <year> 1995. </year>
Reference-contexts: Similar comments apply to a few other terms that we use, and their meaning is apparent from the context. 2 Related Work The increased interest in workflow management (e.g., see <ref> [GHS95, KR95, AAA + 96] </ref>) has resulted in considerable work on scheduling for workflow, and [RS94] provides an overview of various techniques. As in our approach, the results available are tied to the model adopted and the assumptions made.
Reference: [LW88] <author> F. Lin and W.M. Wonham. </author> <title> Decentralized supervisory control of discrete-event systems. </title> <journal> Information Sciences, </journal> <volume> 44 </volume> <pages> 199-224, </pages> <year> 1988. </year> <month> 17 </month>
Reference: [RS94] <author> M. Rusinkiewicz and A. Sheth. </author> <title> Specification and execution of transactional workflows. </title> <editor> In W. Kim, editor, </editor> <title> Modern Database Systems: The Object Model, Interoperability, and Beyond. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Similar comments apply to a few other terms that we use, and their meaning is apparent from the context. 2 Related Work The increased interest in workflow management (e.g., see [GHS95, KR95, AAA + 96]) has resulted in considerable work on scheduling for workflow, and <ref> [RS94] </ref> provides an overview of various techniques. As in our approach, the results available are tied to the model adopted and the assumptions made. Much of the research reported for workflow scheduling has developed from multidatabase transaction scheduling (e.g., see [SKS91, GRS91]).
Reference: [RW87a] <author> P.J. Ramadge and W.M. Wonham. </author> <title> Modular feedback logic for discrete event systems. </title> <journal> SIAM Journal of Control and Optimization, </journal> <volume> 25(5) </volume> <pages> 1202-1218, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: For non-conflicting languages, the " operator commutes with the intersection operator. That is, a supremal supervisor generating (K 1 " K 2 ) " can be obtained efficiently, effecting (K " " In short <ref> [RW87a, WR88a] </ref>: * If K 1 and K 2 are non-conflicting, L M (G)-closed and controllable, then K 1 " K 2 is L M (G)- closed and controllable. * If K 1 and K 2 are non-conflicting, then K " " 4.3 Illustrating Supervisory Control We now illustrate our approach
Reference: [RW87b] <author> P.J. Ramadge and W.M. Wonham. </author> <title> Supervisory control of a class of discrete-event processes. </title> <journal> SIAM Journal of Control and Optimization, </journal> <volume> 25(1) </volume> <pages> 206-230, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: To avoid blocking, we must not exclude any marked prefix that leads to a desired string in K, else there will be no way to attain the desired string. The results for controllability, taken from <ref> [RW87b] </ref>, are summarized as follows.
Reference: [RW89] <author> P.J. Ramadge and W.M. Wonham. </author> <title> The control of discrete event systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(1) </volume> <pages> 81-98, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: Each task in a workflow may be regarded as a set of discrete events ordered to execute in a pre-specified manner, and the discrete event systems of the individual tasks is combined to model the system as a whole. Second, we use techniques from supervisory control theory <ref> [RW89] </ref> to obtain correct and efficient schedulers that manage the workflow system. Our approach, though far from a panacea to all workflow problems, is a step toward understanding and solving several of the difficulties described above. <p> ultimately these two views may merge, our technique does provide an alternative, possibly better, approach to modeling and reasoning about autonomous executions in workflow environments. 3 Workflows and Discrete Event Systems In this section we describe workflows, introduce an illustrative example, and provide the basic concepts from discrete event systems <ref> [RW89] </ref>. 3.1 Describing Workflows A workflow is an organized set of tasks. Tasks are semantically coherent units of work which may be executed on diverse, heterogeneous platforms. Each task consists of events to be executed in a predefined order. <p> The T RAN S workflow intertask dependencies may be represented by the automata D s and D c as shown in Figure 4. 4 Workflows under Supervisory Control In this section, we present the supervisory control theory from <ref> [RW89] </ref> needed to frame workflow scheduling as a supervisory control problem.
Reference: [RW92] <author> K. Rudie and W.M. Wonham. </author> <title> Think globally, act locally: Decentralized supervisory control. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 37(11) </volume> <pages> 1692-1708, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: There exist supervisors S 1 , . . . S n such that L (S 1 ^ : : : ^ S 2 =G) = K if and only if K is controllable and co-observable <ref> [RW92] </ref>. An efficient algorithm presented in [RW93] determines whether controllers S 1 , . . . S n exist which satisfy the above conditions.
Reference: [RW93] <author> K. Rudie and J.C. Willems. </author> <title> The computational complexity of decentralized discrete-event control problems. </title> <type> Technical Report IMA Preprint Series 1105, </type> <institution> University of Minnesota, </institution> <year> 1993. </year>
Reference-contexts: There exist supervisors S 1 , . . . S n such that L (S 1 ^ : : : ^ S 2 =G) = K if and only if K is controllable and co-observable [RW92]. An efficient algorithm presented in <ref> [RW93] </ref> determines whether controllers S 1 , . . . S n exist which satisfy the above conditions.
Reference: [SKS91] <author> N. Soparkar, H.F. Korth, and A. Silberschatz. </author> <title> Failure-resilient transaction management in mul-tidatabases. </title> <journal> IEEE Computer, </journal> <volume> 24(12) </volume> <pages> 28-36, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: As in our approach, the results available are tied to the model adopted and the assumptions made. Much of the research reported for workflow scheduling has developed from multidatabase transaction scheduling (e.g., see <ref> [SKS91, GRS91] </ref>). In consequence, there are several efforts that deal with issues of commitment of autonomously executed transactions and tasks. Indeed, some of the examples in this paper reflect this trend. While important and interesting, such research touches on just one aspect of several for workflow systems.
Reference: [SL93a] <author> R. Sengupta and S. Lafortune. </author> <title> A deterministic optimal control theory for discrete event systems: Formulation and existence theory. </title> <type> Technical Report CGR-93-7, </type> <institution> University of Michigan, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Note that an optimal language with finite cost is always controllable. Therefore, an optimal language is a controllable sublanguage which allows the least costly worst case behavior. An efficient algorithm exists to realize an optimal scheduler (e.g., see <ref> [SL93a, SL93b] </ref>). As an example, consider a case where a workflow has priorities assigned to certain tasks. One possible approach to model this situation is to simply assign low execution and high control costs for higher priority tasks, and high execution and low control costs for lower priority tasks.
Reference: [SL93b] <author> R. Sengupta and S. Lafortune. </author> <title> A deterministic optimal control theory for discrete event systems: Computational results. </title> <type> Technical Report CGR-93-16, </type> <institution> University of Michigan, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Note that an optimal language with finite cost is always controllable. Therefore, an optimal language is a controllable sublanguage which allows the least costly worst case behavior. An efficient algorithm exists to realize an optimal scheduler (e.g., see <ref> [SL93a, SL93b] </ref>). As an example, consider a case where a workflow has priorities assigned to certain tasks. One possible approach to model this situation is to simply assign low execution and high control costs for higher priority tasks, and high execution and low control costs for lower priority tasks.
Reference: [ST94] <author> M.P. Singh and C. Tomlinson. </author> <title> Workflow execution through distributed events. </title> <booktitle> In Proceedings of the Sixth International Conference on Management of Data, </booktitle> <year> 1994. </year>
Reference-contexts: For instance, issues of controllability and ob-servability (i.e., concepts that arise from the autonomy of constituent systems, as explained in the paper) that are examined in this paper are not handled by such efforts. Our work is more closely related to <ref> [ASSR93, ST94, Kle91, Gun93] </ref> in that we model tasks in a workflow system as automata. For example, finite state automata are constructed in [ASSR93] to represent dependencies in a manner similar to ours. However, the concept of supervisory control, including controllability and observability, are not addressed. <p> For example, finite state automata are constructed in [ASSR93] to represent dependencies in a manner similar to ours. However, the concept of supervisory control, including controllability and observability, are not addressed. Similar is the case for <ref> [ST94] </ref> in which the methods for specifying dependencies and scheduling is based on temporal logic. Our methods, though based on formalisms, are different in that we adapt the well-understood techniques of discrete event systems.
Reference: [WR88a] <author> W.M. Wonham and P.J. Ramadge. </author> <title> Modular supervisor control of discrete event systems. Mathematical Control, Signals, </title> <journal> and Systems, </journal> <volume> 1(1) </volume> <pages> 13-30, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: For non-conflicting languages, the " operator commutes with the intersection operator. That is, a supremal supervisor generating (K 1 " K 2 ) " can be obtained efficiently, effecting (K " " In short <ref> [RW87a, WR88a] </ref>: * If K 1 and K 2 are non-conflicting, L M (G)-closed and controllable, then K 1 " K 2 is L M (G)- closed and controllable. * If K 1 and K 2 are non-conflicting, then K " " 4.3 Illustrating Supervisory Control We now illustrate our approach
Reference: [WR88b] <author> W.M. Wonham and P.J. Ramadge. </author> <title> On the supremal controllable sublanguage of a given language. </title> <journal> SIAM Journal of Control and Optimization, </journal> <volume> 25(3) </volume> <pages> 637-659, </pages> <month> May </month> <year> 1988. </year> <month> 18 </month>
Reference-contexts: In workflow scheduling, this implies finding a controller that allows as many legal schedules as possible while not allowing any illegal schedules. The class of controllable sublanguages of K is closed under set union and has a unique supremal element K " under set inclusion <ref> [WR88b] </ref>. We call K " the supremal controllable sublanguage of K, and we characterize a controller realizing K " as a supremal controller for K. If, as in workflow scheduling, dependencies implicit in K are never violated, then K " is the best solution possible. <p> Since K " M 6= K M , a supremal supervisor will allow only a subset of K M . Applying an algorithm in <ref> [WR88b] </ref>, we construct a generator for K " M with marked language K " M . We start with an FSA H 0 , a sub-automaton of G that generates K with marked language K M . <p> Let K s and K c be the languages generated by the dependency automata D s and D c . We can construct generators for K " s and K d , using the algorithm of <ref> [WR88b] </ref>; the generators are shown in Figure 9. The language resulting from the parallel use of the generators for K " c is K " c .
References-found: 21

