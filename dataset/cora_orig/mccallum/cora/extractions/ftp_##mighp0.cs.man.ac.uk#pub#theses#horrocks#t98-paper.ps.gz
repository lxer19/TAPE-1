URL: ftp://mighp0.cs.man.ac.uk/pub/theses/horrocks/t98-paper.ps.gz
Refering-URL: http://www.cs.man.ac.uk/mig/people/horrocks/publications.html
Root-URL: http://www.cs.man.ac.uk
Email: horrocks@cs.man.ac.uk  
Title: The FaCT System  
Author: Ian Horrocks 
Web: http://www.cs.man.ac.uk/~horrocks  
Address: Manchester, Manchester M13 9PL, UK  
Affiliation: Medical Informatics Group, Department of Computer Science, University of  
Abstract: FaCT is a Description Logic classifier which has been implemented as a test-bed for a highly optimised tableaux satisfiability (sub-sumption) testing algorithm. The correspondence between modal and description logics also allows FaCT to be used as a theorem prover for the propositional modal logics K, KT, K4 and S4. Empirical tests have demonstrated the effectiveness of the optimised implementation and, in particular, of the dependency directed backtracking optimisation. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> F. Baader, M. Buchheit, and B. </author> <title> Hollunder. Cardinality restrictions on concepts. </title> <journal> Artificial Intelligence, </journal> <volume> 88(1-2):195-213, </volume> <year> 1996. </year>
Reference-contexts: pass" tableau construction and search method as is usual in DL tableaux algorithms where logics generally have the finite model prop erty; 2. transitive roles are dealt with simply by propagating fl i OE terms along i relations; 3. termination is ensured by "blocking"|checking for cycles in the tableau construction <ref> [7, 1] </ref>. 4 Optimisations To improve the performance of the ALCH R + satisfiability testing algorithm, a range of optimisations have been employed.
Reference: 2. <editor> F. Baader, E. Franconi, B. Hollunder, B. Nebel, and H.-J. </editor> <title> Profitlich. An empirical analysis of optimization techniques for terminological representation systems or: Making KRIS get a move on. </title> <editor> In B. Nebel, C. Rich, and W. Swartout, editors, </editor> <booktitle> Principals of Knowledge Representation and Reasoning: Proceedings of the Third International Conference (KR'92), </booktitle> <pages> pages 270-281. </pages> <publisher> Morgan-Kaufmann, </publisher> <year> 1992. </year> <note> Also available as DFKI RR-93-03. </note>
Reference-contexts: In fact it has been shown (in the Kris system) that a significant improvement in performance can be obtained simply by not deleting names when they are lazily unfolded <ref> [2] </ref>. This is because obvious contradictions can often be detected earlier by comparing names rather than unfolded definitions. FaCT takes this optimisation to its logical conclusion by lexically normalising and encoding all formulae and, recursively, their sub-formulae, so that: 1.
Reference: 3. <editor> F. Baader, H.-J. Heinsohn, B. Hollunder, J. Muller, B. Nebel, W. Nutt, and H.-J. </editor> <title> Profitlich. Terminological knowledge representation: A proposal for a terminological logic. </title> <type> Technical Memo TM-90-04, </type> <institution> Deutsches Forschungszentrum fur Kunstliche Intelligenz GmbH (DFKI), </institution> <year> 1991. </year>
Reference-contexts: A Tarski style model theoretic semantics is used to interpret expressions <ref> [3] </ref>. Table 1 shows how propositional K (m) formulae correspond to ALC concept expressions. Note that the modal operators fl and correspond to 9R:C and 8R:C expressions, with different roles corresponding to distinct modalities or accessibility relations.
Reference: 4. <author> F. Baader and B. Hollunder. Kris: </author> <title> Knowledge representation and inference system. </title> <journal> SIGART Bulletin, </journal> <volume> 2(3) </volume> <pages> 8-14, </pages> <year> 1991. </year>
Reference-contexts: Figure 1, for example, shows CPU time plotted against problem size for 2 classes of formulae from the K benchmark suite, k-dum-p and k-grz-p. FaCT's performance is compared with that of the Crack DL [6], the KSAT K (m) theorem prover [11] and the Kris DL <ref> [4] </ref>. The performance of FaCT with the backjumping optimisation disabled is also shown, indicated in the graphs by FaCT fl . All the systems use compiled Lisp code (Allegro CL 4.3), and the tests were performed on a Sun Ultra 1 with a 147 MHz CPU and 64MB of RAM.
Reference: 5. <author> A. B. Baker. </author> <title> Intelligent Backtracking on Constraint Satisfaction Problems: Experimental and Theoretical Results. </title> <type> PhD thesis, </type> <institution> University of Oregon, </institution> <year> 1995. </year>
Reference-contexts: This problem is addressed by adapting a form of dependency directed backtracking called backjumping, which has been used in solving constraint satisfia-bility problems <ref> [5] </ref>. Backjumping works by labeling formulae with a dependency set indicating the branching choices on which they depend.
Reference: 6. <author> P. Bresciani, E. Franconi, and S. Tessaris. </author> <title> Implementing and testing expressive description logics: a preliminary report. </title> <editor> In Gerard Ellis, Robert A. Levinson, Andrew Fall, and Veronica Dahl, editors, </editor> <title> Knowledge Retrieval, Use and Storage for Efficiency: </title> <booktitle> Proceedings of the First International KRUSE Symposium, </booktitle> <pages> pages 28-39, </pages> <year> 1995. </year>
Reference-contexts: Figure 1, for example, shows CPU time plotted against problem size for 2 classes of formulae from the K benchmark suite, k-dum-p and k-grz-p. FaCT's performance is compared with that of the Crack DL <ref> [6] </ref>, the KSAT K (m) theorem prover [11] and the Kris DL [4]. The performance of FaCT with the backjumping optimisation disabled is also shown, indicated in the graphs by FaCT fl .
Reference: 7. <author> M. Buchheit, F. M. Donini, and A. Schaerf. </author> <title> Decidable reasoning in terminologi-cal knowledge representation systems. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 1 </volume> <pages> 109-138, </pages> <year> 1993. </year>
Reference-contexts: pass" tableau construction and search method as is usual in DL tableaux algorithms where logics generally have the finite model prop erty; 2. transitive roles are dealt with simply by propagating fl i OE terms along i relations; 3. termination is ensured by "blocking"|checking for cycles in the tableau construction <ref> [7, 1] </ref>. 4 Optimisations To improve the performance of the ALCH R + satisfiability testing algorithm, a range of optimisations have been employed.
Reference: 8. <author> M. Davis, G. Logemann, and D. Loveland. </author> <title> A machine program for theorem proving. </title> <journal> Communications of the ACM, </journal> <volume> 5 </volume> <pages> 394-397, </pages> <year> 1962. </year>
Reference-contexts: As the alternative branches of the search are not disjoint, there is nothing to prevent the recurrence of unsatisfiable disjuncts. FaCT deals with this problem by using a semantic branching technique adapted from the Davis-Putnam-Logemann-Loveland procedure (DPL) commonly used to solve propositional satisfiability (SAT) problems <ref> [8, 10] </ref>. Instead of choosing an unexpanded disjunction, a single disjunct OE is chosen from the set of unexpanded disjunctions, and the two possible tableaux obtained by adding either OE or :OE are then searched.
Reference: 9. <author> J. W. Freeman. </author> <title> Improvements to propositional satisfiability search algorithms. </title> <type> PhD thesis, </type> <institution> Department of Computer and Information Science, University of Pennsyl-vania, </institution> <address> Philadelphia, PA, USA, </address> <year> 1995. </year>
Reference-contexts: Instead of choosing an unexpanded disjunction, a single disjunct OE is chosen from the set of unexpanded disjunctions, and the two possible tableaux obtained by adding either OE or :OE are then searched. During the DPL search, FaCT also performs boolean constraint propagation (BCP) <ref> [9] </ref>, a technique which maximises deterministic expansion, and thus pruning of the search via contradiction detection, before performing non-deterministic expansion. BCP works by deterministically expanding disjunctions which present only one expansion possibility, and detecting a contradiction when there is a disjunction which no longer has any expansion possibilities.
Reference: 10. <author> J. W. Freeman. </author> <title> Hard random 3-SAT problems and the Davis-Putnam procedure. </title> <journal> Artificial Intelligence, </journal> <volume> 81 </volume> <pages> 183-198, </pages> <year> 1996. </year>
Reference-contexts: As the alternative branches of the search are not disjoint, there is nothing to prevent the recurrence of unsatisfiable disjuncts. FaCT deals with this problem by using a semantic branching technique adapted from the Davis-Putnam-Logemann-Loveland procedure (DPL) commonly used to solve propositional satisfiability (SAT) problems <ref> [8, 10] </ref>. Instead of choosing an unexpanded disjunction, a single disjunct OE is chosen from the set of unexpanded disjunctions, and the two possible tableaux obtained by adding either OE or :OE are then searched. <p> A similar technique was employed in the HARP theorem prover [15]. 5 Performance FaCT's performance as a modal logic theorem prover has been tested using both randomly generated formulae, a test method described in [12] and derived from a widely used procedure for testing SAT decision procedures <ref> [10] </ref>, and a corpus of carefully designed benchmark formulae [13].
Reference: 11. <author> F. Giunchiglia and R. Sebastiani. </author> <title> Building decision procedures for modal logics from propositional decision procedures|the case study of modal K. </title> <editor> In Michael McRobbie and John Slaney, editors, </editor> <booktitle> Proceedings of the Thirteenth International Conference on Automated Deduction (CADE-13), number 1104 in Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 583-597. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: can also lead to the detection of formulae which are trivially satisfiable or unsatisfiable. 4.2 Semantic Branching Search Standard tableaux algorithms use an inherently inefficient search technique for the non-deterministic expansion of disjunctive formulae|they choose an unex-panded disjunction and check the different tableaux obtained by adding each of the disjuncts <ref> [11] </ref>. As the alternative branches of the search are not disjoint, there is nothing to prevent the recurrence of unsatisfiable disjuncts. FaCT deals with this problem by using a semantic branching technique adapted from the Davis-Putnam-Logemann-Loveland procedure (DPL) commonly used to solve propositional satisfiability (SAT) problems [8, 10]. <p> Figure 1, for example, shows CPU time plotted against problem size for 2 classes of formulae from the K benchmark suite, k-dum-p and k-grz-p. FaCT's performance is compared with that of the Crack DL [6], the KSAT K (m) theorem prover <ref> [11] </ref> and the Kris DL [4]. The performance of FaCT with the backjumping optimisation disabled is also shown, indicated in the graphs by FaCT fl .
Reference: 12. <author> F. Giunchiglia and R. Sebastiani. </author> <title> A SAT-based decision procedure for ALC. </title> <editor> In L. C. Aiello, J. Doyle, and S. Shapiro, editors, </editor> <booktitle> Principals of Knowledge Representation and Reasoning: Proceedings of the Fifth International Conference (KR'96), </booktitle> <pages> pages 304-314. </pages> <publisher> Morgan Kaufmann, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: The algorithm can then jump back over intervening branching points without exploring any alternative branches. A similar technique was employed in the HARP theorem prover [15]. 5 Performance FaCT's performance as a modal logic theorem prover has been tested using both randomly generated formulae, a test method described in <ref> [12] </ref> and derived from a widely used procedure for testing SAT decision procedures [10], and a corpus of carefully designed benchmark formulae [13].
Reference: 13. <author> A. Heuerding and S. Schwendimann. </author> <title> A benchmark method for the propositional modal logics k, kt, </title> <type> s4. Technical report IAM-96-015, </type> <institution> University of Bern, Switzer-land, </institution> <month> October </month> <year> 1996. </year>
Reference-contexts: the HARP theorem prover [15]. 5 Performance FaCT's performance as a modal logic theorem prover has been tested using both randomly generated formulae, a test method described in [12] and derived from a widely used procedure for testing SAT decision procedures [10], and a corpus of carefully designed benchmark formulae <ref> [13] </ref>.
Reference: 14. <author> I. Horrocks. </author> <title> Optimising Tableaux Decision Procedures for Description Logics. </title> <type> PhD thesis, </type> <institution> University of Manchester, </institution> <year> 1997. </year>
Reference-contexts: The full algorithm, along with a proof of its soundness and correctness, is given in <ref> [14] </ref>. <p> FaCT performs well in tests using randomly generated formulae <ref> [14] </ref>, but its advantages are more clearly demonstrated by the benchmark formulae, and in particular by the provable formulae. 2 This is because the hardness of these formulae often derives from hidden unsatisfiability, a phenomenon which rarely occurs in the randomly generated formulae where hardness is simply a feature of the
Reference: 15. <author> F. Oppacher and E. Suen. HARP: </author> <title> A tableau-based theorem prover. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 4 </volume> <pages> 69-100, </pages> <year> 1988. </year>
Reference-contexts: The algorithm can then jump back over intervening branching points without exploring any alternative branches. A similar technique was employed in the HARP theorem prover <ref> [15] </ref>. 5 Performance FaCT's performance as a modal logic theorem prover has been tested using both randomly generated formulae, a test method described in [12] and derived from a widely used procedure for testing SAT decision procedures [10], and a corpus of carefully designed benchmark formulae [13].
Reference: 16. <author> U. Sattler. </author> <title> A concept language extended with different kinds of transitive roles. </title> <editor> In G. Gorz and S. Holldobler, editors, </editor> <booktitle> 20. Deutsche Jahrestagung fur Kunstliche Intelligenz, number 1137 in Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 333-345. </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: K (m) and K4 (m) : fl i OE becomes OE ^ fl i OE and i OE becomes OE _ i OE. 3 The ALCH R + Tableaux Algorithm The tableau algorithm for ALCH R + is extended from an algorithm for the ALC R + DL described in <ref> [16] </ref>. The full algorithm, along with a proof of its soundness and correctness, is given in [14].
Reference: 17. <author> K. Schild. </author> <title> A correspondence theory for terminological logics: Preliminary report. </title> <booktitle> In Proceedings of the 12th International Joint Conference on Artificial Intelligence (IJCAI-91), </booktitle> <pages> pages 466-471, </pages> <year> 1991. </year>
Reference-contexts: The underlying logic, ALCH R + , is a superset of the ALC DL, and this means that FaCT can be used as a theorem prover for the propositional modal logic K (m) (K with multiple modalities) by exploiting the well known correspondence between the two logics <ref> [17] </ref>. Because ALCH R + supports transitive relations, FaCT can also be used as a prover for K4 (m) , and it extends the range of logics it can deal with to include KT (m) and S4 (m) by embedding formulae in K (m) and K4 (m) respectively.
Reference: 18. <author> M. Schmidt-Schau and G. Smolka. </author> <title> Attributive concept descriptions with complements. </title> <journal> Artificial Intelligence, </journal> <volume> 48 </volume> <pages> 1-26, </pages> <year> 1991. </year>
Reference-contexts: The ALC DL <ref> [18] </ref> allows descriptions to be formed using 1 Fast Classification of Terminologies. standard logical connectives as well as both universally and existentially quanti-fied relational operators: if C is a concept and R is a role then an ALC concept expression is of the form C j &gt; j ? j :C
References-found: 18

