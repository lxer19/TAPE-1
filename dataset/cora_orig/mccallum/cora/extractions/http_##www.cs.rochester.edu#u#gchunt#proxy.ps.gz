URL: http://www.cs.rochester.edu/u/gchunt/proxy.ps.gz
Refering-URL: http://www.cs.rochester.edu/stats/oldmonths/1998.05/docs-name.html
Root-URL: 
Email: gchunt@cs.rochester.edu  
Title: Creating User-Mode Device Drivers with a Proxy  
Author: Galen C. Hunt 
Address: Rochester, NY 14627-0226  
Affiliation: Department of Computer Science University of Rochester  
Abstract: Writing Windows NT device drivers can be a daunting task. Device drivers must be fully reentrant, must use only limited resources and must be created with special development environments. Executing device drivers in user-mode offers significant coding advantages. User-mode device drivers have access to all user-mode libraries and applications. They can be developed using standard development tools and debugged on a single machine. Using the Proxy Driver to retrieve I/O requests from the kernel, user-mode drivers can export full device services to the kernel and applications. User-mode device drivers offer enormous flexibility for emulating devices and experimenting with new file systems. Experimental results show that in many cases, the overhead of moving to user-mode for processing I/O can be masked by the inherent costs of accessing physical devices. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. N. Bershad and C. B. Pinkerton. Watchdogs: </author> <title> Extending the UNIX File System. </title> <booktitle> In Computing Systems, Spring, </booktitle> <year> 1988. </year>
Reference-contexts: A contemporary of the Proxy Driver, Frigate requires a kernel supporting UCLA Stackable Layers. Frigate has been used to implement an Enigma encryption layer above SunOS file systems. Bershad and Pinkertons watchdogs <ref> [1] </ref> are user-mode filesystem components. A watchdog is attached to a particular point in the filesystem namespace. File I/O requests at the point of the watchdog are intercepted.
Reference: [2] <author> M. Bushnell. </author> <title> Towards a New Strategy of OS Design. </title> <journal> In GNU's Bulletin, </journal> <month> January </month> <year> 1994. </year>
Reference-contexts: Watchdogs are intended to allow unsophisticated users to modify the behavior of isolated file system functions. Bershad and Pinkerton use a special communication channel to pass I/O requests to watchdogs. The HURD system <ref> [2] </ref> supports the concept of user-mode file systems via a mechanism called translators. All files requests are sent through Mach ports. User file systems are just providers of file ports. Sample systems proposed include a file system level FTP client and a /proc file system similar to [7].
Reference: [3] <author> V. Cate. </author> <title> Alex- a Global Filesystem. </title> <booktitle> In Proceedings of the USENIX File System Workshop, </booktitle> <pages> pp. 1-11. </pages> <address> Ann Arbor, MI, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: For example, the SFS /subject:report directory contains one file for each email message with the word report in the subject line. Client machines connect to an SFS server using the NFS protocol. Similar in principle to our ftpfs, the Alex file system <ref> [3] </ref> provides access to FTP archives using the NFS protocol. NFS requests on the Alex server are converted to FTP requests and forwarded to the appropriate server. SNFS [9] is a generalized NFS server that supports an internal Scheme interpreter.
Reference: [4] <author> H. Custer. </author> <title> Inside Windows NT. </title> <publisher> Microsoft Press, </publisher> <address> Redmond, WA, </address> <year> 1993. </year>
Reference-contexts: Drivers can even inherit functionality from other drivers through COM aggregation. Appendix A lists the IDL definition for IDeviceFileSink, the interface used to deliver the most common file IRPs. The Proxy Service operates under control of the Windows NT Service Manager <ref> [4] </ref>. It can be stopped or started through the NT Service control panel. At startup, the Proxy Service dynamically loads the Proxy Driver into the kernel. It then looks for user-mode device driver components in the system registry under the key HKEY_LOCAL_MACHINE"SOFTWARE-"URCS"ProxyDevices.
Reference: [5] <author> D. K. Gifford, P. Jouvelot, M. A. Sheldon, and J. W. O'Toole, Jr. </author> <title> Semantic File Systems. </title> <booktitle> In Proceedings of the Thirteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 16-25. </pages> <address> Pacific Grove, CA, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: Unlike watchdogs and the HURD system, the Proxy Driver makes no modifications to the NT kernel. It exploits the NT I/O architecture, particularly IRPs, to provide simple, efficient user-mode device drivers for either file system or device operations. The Semantic File System (SFS) <ref> [5] </ref> is a user-mode file system that creates dynamic directories based on indexed search criteria. For example, the SFS /subject:report directory contains one file for each email message with the word report in the subject line. Client machines connect to an SFS server using the NFS protocol.
Reference: [6] <author> J. S. Heidemann and G. J. Popek. </author> <title> FileSystem Development with Stackable Layers. </title> <journal> In ACM Transactions on Computer Systems, </journal> <volume> vol. 12(1), </volume> <pages> pp. 58-89, </pages> <year> 1994. </year>
Reference-contexts: Related Work Other researchers have noted the benefits of supporting user-mode device drivers. Frigate [8] supports user-mode file servers using a dispatch layer in the UCLA Stackable Layers file system <ref> [6] </ref>. Applications issue file I/O requests either through kernel calls to user-mode servers or directly through a server backdoor. A contemporary of the Proxy Driver, Frigate requires a kernel supporting UCLA Stackable Layers. Frigate has been used to implement an Enigma encryption layer above SunOS file systems.
Reference: [7] <author> T. J. Killian. </author> <title> Processes as Files. </title> <booktitle> In Proceedings of the USENIX Software Tools Users Group Summer Conference, </booktitle> <pages> pp. 203-207, </pages> <month> 12-15 June </month> <year> 1984. </year>
Reference-contexts: All files requests are sent through Mach ports. User file systems are just providers of file ports. Sample systems proposed include a file system level FTP client and a /proc file system similar to <ref> [7] </ref>. Unlike watchdogs and the HURD system, the Proxy Driver makes no modifications to the NT kernel. It exploits the NT I/O architecture, particularly IRPs, to provide simple, efficient user-mode device drivers for either file system or device operations.
Reference: [8] <author> T. H. Kim and G. J. Popek. Frigate: </author> <title> An Object Oriented File System for Ordinary Users. </title> <booktitle> In Proceedings of the 3rd Conference on ObjectOriented Technologies and Systems, </booktitle> <pages> pp. 115-129. </pages> <address> Portland, OR, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: The ftpfs driver, for example, shares the WinInet cache with user-mode applications, such as Internet Explorer, to reduce network traffic and optimize performance. 5. Related Work Other researchers have noted the benefits of supporting user-mode device drivers. Frigate <ref> [8] </ref> supports user-mode file servers using a dispatch layer in the UCLA Stackable Layers file system [6]. Applications issue file I/O requests either through kernel calls to user-mode servers or directly through a server backdoor. A contemporary of the Proxy Driver, Frigate requires a kernel supporting UCLA Stackable Layers.
Reference: [9] <author> T. Lord. </author> <title> Extensible Linux NFS server soon to be available. </title> <booktitle> In comp.os.linux.announce, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: Client machines connect to an SFS server using the NFS protocol. Similar in principle to our ftpfs, the Alex file system [3] provides access to FTP archives using the NFS protocol. NFS requests on the Alex server are converted to FTP requests and forwarded to the appropriate server. SNFS <ref> [9] </ref> is a generalized NFS server that supports an internal Scheme interpreter. File requests on the NFS server are processed through user-loaded modules written in a version of Scheme. Proposed modules include union file systems, copy-on-write file systems, and FTP and HTTP file systems.
References-found: 9

