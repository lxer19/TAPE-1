URL: ftp://ftp.cs.bham.ac.uk/pub/authors/W.B.Langdon/papers/evogprep.ps
Refering-URL: http://www.cs.bham.ac.uk/~wbl/WBL_papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Genetic Programming in Europe Report of the E v o G P Working Group on
Author: W. B. Langdon and R. Poli 
Date: 30 November 1997  
Abstract: Genetic Programming (GP) is becoming a leading area of computer science in which Europe has a number of very active researchers which are now all gathered in the E v o G P working group. In this report we describe the state of the art in GP technology, the role Europe has in advancing it and the activities of the E v o G P working group. We indicate the likely benefits of this technology now and in the near future and we make recommendations for future European research. 
Abstract-found: 1
Intro-found: 1
Reference: [ABF97] <author> Manu Ahluwalia, Larry Bell, and Terence C. Fogarty. </author> <title> Co-evolving functions in genetic programming: A comparison in ADF selection strategies. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 3-8, </pages> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: For example at Napier the fundamental scaling problems associated with solving complex problems are under investigation <ref> [ABF97] </ref> as are issues concerning generating efficient programs from high level specifications, test programs, etc. While Edinburgh has proposed improved methods of testing evolved programs [GR97] and in Glasgow novel means of correcting distortion in radio frequency communications links have been investigated [EAS97].
Reference: [AK96] <author> David Andre and John R. Koza. </author> <title> Parallel genetic programming: A scalable implementation using the transputer network architecture. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 16, </booktitle> <pages> pages 317-338. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: Like GAs, GP parallelises easily and can readily take advantage of a wide range of dedicated parallel processing architectures <ref> [TOD96, SS96, JP96, Ikr96, AK96, OCPT96] </ref>. There is also interest in parallel execution using networks of workstations (e.g. using PVM) and across the Internet using Java. Often GP (and GAs) are parallelised by splitting the population so different parts of it are run on different CPUs.
Reference: [And94a] <author> David Andre. </author> <title> Automatically defined features: The simultaneous evolution of 2-dimensional feature detectors and an algorithm for using them. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 23, </booktitle> <pages> pages 477-494. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Andre has successfully used genetic programming in optical character recognition problems (OCR). In <ref> [And94a] </ref> he combines genetic programming with a genetic algorithm to produce an OCR program from scratch. In [And94b] he shows genetic programming can be used to maintain existing hand coded programs.
Reference: [And94b] <author> David Andre. </author> <title> Learning and upgrading rules for an OCR system using genetic programming. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <address> Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: Andre has successfully used genetic programming in optical character recognition problems (OCR). In [And94a] he combines genetic programming with a genetic algorithm to produce an OCR program from scratch. In <ref> [And94b] </ref> he shows genetic programming can be used to maintain existing hand coded programs. He shows genetic programming automatically enhancing an existing manually written OCR program so that it can be used with an additional font.
Reference: [Ang94] <author> Peter John Angeline. </author> <title> Genetic programming and emergent intelligence. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 4, </booktitle> <pages> pages 75-98. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Measures to allow programs to be evolved from program modules and to simultaneously evolve the modules * Automatically defined functions (ADFs) [Koz94, KA95] * Module Acquisition (MA/GliB) <ref> [Ang94] </ref> and * Adaptive Representions through Learning (ARL) [RB96]. 4. Search operators and algorithms such as * Mutation [BFN96, Lan98] * Context preserving crossover (SCPC/WCPC) [D'h94] * One-point Crossover [PL97] * Non genetic algorithm methods of searching the space of programs [SS97]. 5.
Reference: [AP94] <author> Martin Andrews and Richard Prager. </author> <title> Genetic programming for the acquisition of double auction market strategies. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 16, </booktitle> <pages> pages 355-368. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: The determination of which models are fitter is done manually. This work is similar to that in Section 2.3.6. 2.3.4 Trading <ref> [AP94] </ref> used genetic programming to create strategies which have traded in simulated commodity and futures markets (the double auction tournaments held by the Santa-Fe Institute, Arizona, USA). Their automatically evolved strategies have proved superior to many hand-coded strategies.
Reference: [ASS97] <author> P. Aiyarak, A. S. Saket, and M. C. Sinclair. </author> <title> Genetic programming approaches for minimum cost topology op-timisation of optical telecommunication networks. </title> <booktitle> In Second International Conference on Genetic Algorithms in Engineering Systems: Innovations and Applications, GALESIA, </booktitle> <institution> University of Strathclyde, Glasgow, UK, </institution> <month> 1-4 September </month> <year> 1997. </year> <pages> IEE. </pages>
Reference-contexts: While Edinburgh has proposed improved methods of testing evolved programs [GR97] and in Glasgow novel means of correcting distortion in radio frequency communications links have been investigated [EAS97]. The University of Essex has also applied GP to Telecommunication Networks <ref> [ASS97] </ref> and to the evolution of simple software agents. 3.4 Paris There is an established tradition of evolutionary computation in general and GP in particular in France.
Reference: [Ban93] <editor> Wolfgang Banzhaf. </editor> <title> Genetic programming for pedestrians. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> page 628, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: However a number of alternative approaches use linear chromosomes. [Per94] uses a linear postfix language and claims some advantages over the more standard tree approach. <ref> [Ban93] </ref> also uses a linear approach but various operations convert this to a tree shaped program which is executed. However of the linear chromosome approaches perhaps the most surprising and successful is [Nor94] in which the representation is a small (up to 1000 bytes) machine code program.
Reference: [BFN96] <author> Wolfgang Banzhaf, Frank D. Frankone, and Peter Nordin. </author> <title> The effect of extensive use of the mutation operator on generalization in genetic programming using sparse data sets. </title> <editor> In Hans-Michael Voigt, Werner Ebeling, Ingo Rechenberg, and Hans-Paul Schwefel, editors, </editor> <booktitle> Parallel Problem Solving from Nature IV, Proceedings of the International Conference on Evolutionary Computation, volume 1141 of LNCS, </booktitle> <pages> pages 300-309, </pages> <address> Berlin, Germany, 22-26 September 1996. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: Measures to allow programs to be evolved from program modules and to simultaneously evolve the modules * Automatically defined functions (ADFs) [Koz94, KA95] * Module Acquisition (MA/GliB) [Ang94] and * Adaptive Representions through Learning (ARL) [RB96]. 4. Search operators and algorithms such as * Mutation <ref> [BFN96, Lan98] </ref> * Context preserving crossover (SCPC/WCPC) [D'h94] * One-point Crossover [PL97] * Non genetic algorithm methods of searching the space of programs [SS97]. 5. The adoption of advanced genetic algorithm techniques by genetic programming. 6. An increasing number of implementations, many of them in the public domain. 7.
Reference: [BGMT95] <author> K. D. Bettenhausen, S. Gehlen, P. Marenbach, and H. Tolle. </author> <title> BioX++ New results and conceptions concerning the intelligent control of biotechnological processes. </title> <editor> In A. Munack and K. Schugerl, editors, </editor> <booktitle> 6th International Conference on Computer Applications in Biotechnology, </booktitle> <pages> pages 324-327. </pages> <publisher> Elsevier Science, </publisher> <year> 1995. </year>
Reference-contexts: Applications with both large and small data sets have been reported. Such models may help explain the process, be used for prediction, to optimise the process or control it. 3 The BioX system <ref> [BGMT95] </ref> has been used to model chemical engineering processes and river flows. [WC97] models river flows based on rain fall measurements.
Reference: [BGS96] <author> Walter Bohm and Andreas Geyer-Schulz. </author> <title> Exact uniform initialization for genetic programming. </title> <editor> In Richard K. Belew and Michael Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms IV, </booktitle> <address> University of San Diego, CA, USA, 3-5 August 1996. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: VUB is developing a platform independent distributed implementation of GP written in Java. IRIDIA has been actively involved with the American series of GP conferences [KDD + 97]. 6 3.10 Elsewhere GP research is also active in Vienna <ref> [BGS96] </ref>, Berlin and Bulgaria [SN97]. 4 E v o G P Working Group Genetic Programming has been identified as one of the important recent innovations in Evolutionary Computation.
Reference: [Bli96] <author> Tobias Blickle. </author> <title> Evolving compact solutions in genetic programming: A case study. </title> <editor> In Hans-Michael Voigt, Werner Ebeling, Ingo Rechenberg, and Hans-Paul Schwefel, editors, </editor> <booktitle> Parallel Problem Solving From Nature IV. Proceedings of the International Conference on Evolutionary Computation, volume 1141 of LNCS, </booktitle> <pages> pages 564-573, </pages> <address> Berlin, Germany, 22-26 September 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Topics include evolving compact programs <ref> [Bli96] </ref>, improved search techniques and use of GP with parallel computers [MST95]. 3.7 Cork In Ireland there has been work on using GP to automatically parallelise programs [RW97] as well as investigations into the mechanics of GP populations [Rya94]. 3.8 Italy In Parma GP has been applied to making existing medical
Reference: [BNKF97] <author> Wolfgang Banzhaf, Peter Nordin, Robert E. Keller, and Frank D. Francone. </author> <title> Genetic Programming An Introduction On the Automatic Evolution of Computer Programs and its Applications. </title> <publisher> Morgan Kaufmann, </publisher> <address> dpunkt.verlag, </address> <month> November </month> <year> 1997. </year>
Reference-contexts: It is also investigating issues concerning self-organisation and novel forms of computation such as molecular computation. The principal members of the group have recently published the first GP text book <ref> [BNKF97] </ref>. 3.2 Birmingham Like the Dortmund group, the EEBIC group within Birmingham University has diverse interests and international collaborative links.
Reference: [Bro91] <author> Rodney A. Brooks. </author> <title> Intelligence without reason. </title> <type> Technical report, </type> <institution> MIT AI Lab, </institution> <month> Apr </month> <year> 1991. </year> <note> AI Memo no 1293, Prepared for Computers and Thought. </note>
Reference-contexts: card credit worthiness scoring, loan application evaluation, data mining and customer retention modelling [Eib97]. 4 2.3.5 Autonomous Agents and Robotics One the current active strands in robot research is the development of independent mobile robots which are programmed to react to their environment rather than to follow a global plan <ref> [Bro91] </ref>. Until recently robot controllers had been hand coded however Spencer has been able to use genetic programming to automatically generate a control program enabling a simulated six legged robot to walk [Spe94]. [GQ96] and [BNO97] have evolved control programs and run them on real robots using GP.
Reference: [BNO97] <author> Wolfgang Banzhaf, Peter Nordin, and Markus Olmer. </author> <title> Generating adaptive behavior for a real robot using function regression within genetic programming. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 35-43, </pages> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Until recently robot controllers had been hand coded however Spencer has been able to use genetic programming to automatically generate a control program enabling a simulated six legged robot to walk [Spe94]. [GQ96] and <ref> [BNO97] </ref> have evolved control programs and run them on real robots using GP.
Reference: [CY97] <author> Shu-Heng Chen and Chia-Hsuan Yeh. </author> <title> Using genetic programming to model volatility in financial time series. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 58-63, </pages> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Their automatically evolved strategies have proved superior to many hand-coded strategies. While <ref> [CY97] </ref> use GP to model volatility in Japanese and New York stock markets and [OCPT96] model currency markets.
Reference: [Daw86] <author> Richard Dawkins. </author> <title> The blind Watchmaker. </title> <publisher> Harlow : Longman Scientific and Technical, </publisher> <year> 1986. </year>
Reference-contexts: evolve mobile robot controllers using GP and a simulator but demonstrate the controller running on the physical robot. [Han94b, HWSS95, Iba96, Qur96, RD94, LS96, ZKL96] have applied evolved autonomous agents using genetic programming. 2.3.6 Artistic There have been a number of uses of genetic programming, perhaps inspired by Dawkins' biomorphs <ref> [Daw86] </ref> or Karl Sims' panspermia [Sim91], which generate patterns on a computer display. For example [GH97] describes GP being used to make a short single character video.
Reference: [DC97] <editor> Marco Dorigo and Marco Colombetti. </editor> <title> Robot Shaping: An Experiment in Behavior Engineering. </title> <publisher> MIT Press/Bradford Books, </publisher> <year> 1997. </year>
Reference-contexts: in Milan has concentrated on fitness functions [Tet96]. 3.9 Brussels The adaptive systems group at the Vrije Universiteit Brussel (VUB) and the IRIDIA group at Universite Libre de Bruxelles have long been interested in evolutionary computation and are increasingly interested in Genetic Programming particularly in data mining and autonomous robotics <ref> [DC97] </ref>. VUB is developing a platform independent distributed implementation of GP written in Java.
Reference: [DFP + 94] <author> Sumit Das, Terry Franguidakis, Michael Papka, Thomas A. DeFanti, and Daniel J. Sandin. </author> <title> A genetic programming application in virtual reality. </title> <booktitle> In Proceedings of the first IEEE Conference on Evolutionary Computation, </booktitle> <volume> volume 1, </volume> <pages> pages 480-484, </pages> <address> Orlando, Florida, USA, </address> <month> 27-29 June </month> <year> 1994. </year> <title> IEEE Press. </title> <booktitle> Part of 1994 IEEE World Congress on Computational Intelligence, </booktitle> <address> Orlando, Florida. </address> <month> 14 </month>
Reference-contexts: For example [GH97] describes GP being used to make a short single character video. While Reynolds' "boids" technique [Rey92, Rey94b, Rey94a]. has been used as a basis for photo realistic imagery of bat swarms in the films "Batman Returns" and "Cliffhanger" [Rey96]. <ref> [DFP + 94] </ref> uses genetic programming to generate sounds and three dimensional shapes. Virtual reality techniques are used to present these to the user.
Reference: [D'h94] <author> Patrik D'haeseleer. </author> <title> Context preserving crossover in genetic programming. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <volume> volume 1, </volume> <pages> pages 256-261, </pages> <address> Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: Search operators and algorithms such as * Mutation [BFN96, Lan98] * Context preserving crossover (SCPC/WCPC) <ref> [D'h94] </ref> * One-point Crossover [PL97] * Non genetic algorithm methods of searching the space of programs [SS97]. 5. The adoption of advanced genetic algorithm techniques by genetic programming. 6. An increasing number of implementations, many of them in the public domain. 7.
Reference: [EAS97] <author> Anna I. Esparcia-Alcazar and Ken Sharman. </author> <title> Evolving recurrent neural network architectures by genetic programming. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 89-94, </pages> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: They report these performed better than the best hand coded algorithms. [PC97] evolves programs to improve the usefulness of 2D medical images while <ref> [EAS97] </ref> evolves digital signal filters which provide channel equalisation to restore the original signal after it has been distorted by noise and dispersion. [NB96] describes applications of GP to image and sound compression. 2.3.3 Design [KBAK96] shows the automatic design of electrical circuits to meet onerous design requirements. [NH94] have used <p> While Edinburgh has proposed improved methods of testing evolved programs [GR97] and in Glasgow novel means of correcting distortion in radio frequency communications links have been investigated <ref> [EAS97] </ref>. The University of Essex has also applied GP to Telecommunication Networks [ASS97] and to the evolution of simple software agents. 3.4 Paris There is an established tradition of evolutionary computation in general and GP in particular in France.
Reference: [EEK+96] <author> A.E. Eiben, T.J. Euverman, W. Kowalczyk, E. Peelen, F. Slisser and J.A.M. </author> <title> Wesseling. Comparing Adaptive and Traditional Techniques for Direct Marketing. </title> <editor> In H.-J. Zimmermann, editor, </editor> <booktitle> Proceedings of the 4th European Congress on Intelligent Techniques and Soft Computing, </booktitle> <pages> pages 434-437, </pages> <publisher> Verlag Mainz, </publisher> <address> Aachen, </address> <year> 1996. </year>
Reference-contexts: Normale Superieure is also active in the GP field. 3.5 Leiden The GP group at Leiden has concentrated upon financial applications of GP such as, direct marketing, credit card credit worthiness scoring, loan application evaluation, data mining and customer retention modelling as well as theoretical aspects such as improved representations <ref> [Kei96, EEK+96, EEKS98] </ref>. 3.6 Switzerland The principal centres of GP work in Switzerland are ETH (Zurich), IDSIA (Lugano), Geneva and EPFL (Lausanne).
Reference: [EEKS98] <author> A.E. Eiben, T.J. Euverman, W. Kowalczyk and F. Slisser. </author> <title> Modelling Customer Retention with Statistical Techniques, Rough Data Models and Genetic Programming. </title> <editor> In A. Skowron and S.K. Pal, editors, </editor> <title> Fuzzy Sets, Rough Sets and Decision Making Processes, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <note> 1998 (in press). </note>
Reference-contexts: Normale Superieure is also active in the GP field. 3.5 Leiden The GP group at Leiden has concentrated upon financial applications of GP such as, direct marketing, credit card credit worthiness scoring, loan application evaluation, data mining and customer retention modelling as well as theoretical aspects such as improved representations <ref> [Kei96, EEK+96, EEKS98] </ref>. 3.6 Switzerland The principal centres of GP work in Switzerland are ETH (Zurich), IDSIA (Lugano), Geneva and EPFL (Lausanne).
Reference: [Eib97] <author> Gusz Eiben. </author> <title> GP in leiden. electronic communication, </title> <month> 10 November </month> <year> 1997. </year>
Reference-contexts: While [CY97] use GP to model volatility in Japanese and New York stock markets and [OCPT96] model currency markets. Other financial applications include direct marketing, credit card credit worthiness scoring, loan application evaluation, data mining and customer retention modelling <ref> [Eib97] </ref>. 4 2.3.5 Autonomous Agents and Robotics One the current active strands in robot research is the development of independent mobile robots which are programmed to react to their environment rather than to follow a global plan [Bro91].
Reference: [FCC + 97] <author> I. De Falco, M. Conte, A. Della Cioppa, E. Tarantino, and G. Tautteur. </author> <title> Genetic programming estimates of kol-mogorov complexity. </title> <editor> In Eric Goodman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Seventh International Conference, </booktitle> <institution> Michigan State University, </institution> <address> East Lansing, MI, USA, 19-23 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: In Naples as an approximate technique to overcome intractable space and time difficulties associated with some mathematical analysis <ref> [FCC + 97] </ref>.
Reference: [GH97] <author> Larry Gritz and James K. Hahn. </author> <title> Genetic programming evolution of controllers for 3-D character animation. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 139-146, </pages> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: For example <ref> [GH97] </ref> describes GP being used to make a short single character video.
Reference: [GQ96] <author> Frederic Gruau and Kameel Quatramaran. </author> <title> Cellular encoding for interactive evolutionary robotics. </title> <institution> Cognitive Science Research Paper 425, School of Cognitive and Computing Sciences, University of Sussex, </institution> <address> Falmer, Brighton, Sussex, UK, </address> <month> July </month> <year> 1996. </year>
Reference-contexts: Until recently robot controllers had been hand coded however Spencer has been able to use genetic programming to automatically generate a control program enabling a simulated six legged robot to walk [Spe94]. <ref> [GQ96] </ref> and [BNO97] have evolved control programs and run them on real robots using GP.
Reference: [GR97] <author> Chris Gathercole and Peter Ross. </author> <title> Tackling the boolean even N parity problem with genetic programming and limited-error fitness. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 119-127, </pages> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Investigation of better ways to assess program fitness (Section 2.2.3) * Dynamic fitness such as [Tet96], LEF <ref> [GR97] </ref>, RAT [TA97] and co-evolution [Sie94] * Measures aimed at reducing the size of the evolved programs [IdS94, ZM96]. 3. <p> For example at Napier the fundamental scaling problems associated with solving complex problems are under investigation [ABF97] as are issues concerning generating efficient programs from high level specifications, test programs, etc. While Edinburgh has proposed improved methods of testing evolved programs <ref> [GR97] </ref> and in Glasgow novel means of correcting distortion in radio frequency communications links have been investigated [EAS97].
Reference: [Gru96] <author> F. Gruau. </author> <title> Modular genetic neural networks for six-legged locomotion. </title> <editor> In J.-M. Alliot, E. Lutton, E. Ronald, M. Schoenauer, and D. Snyers, editors, </editor> <booktitle> Artificial Evolution, volume 1063 of LNCS, </booktitle> <pages> pages 201-219. </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: of the programs to be evolved * Reducing memory requirements and reducing runtime using directed acyclic graphs [Han94a, Kei96] * Linear rather than tree representations (Section 2.2.1) * Representing programs with graphs (Section 2.2.1) * Using trees to specify how to grow another structure (such as an artificial neural network <ref> [Gru96] </ref>, an electrical circuit [KBA + 97] or simulations of flowering plants [Jac97]) * Including semantic information via type systems [Mon95] * Incorporating state or database information within a genetic program (Section 2.2.2). 2.
Reference: [Han93] <author> Simon Handley. </author> <title> Automatic learning of a detector for alpha-helices in protein sequences via genetic programming. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 271-278, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: While more accurate than a neural network they state "the main advantage ... is that it [GP] has automatically eliminated irrelevant model inputs ... [and] offers a degree of parsimony not attainable using a neural network." <ref> [Han93] </ref> uses genetic programming to predict the shape of proteins. He was able to evolve programs which, using the protein's chemical composition, were able to predict whether each part of a protein would have a particular geometric shape (an ff-helix) or not.
Reference: [Han94a] <author> S. Handley. </author> <title> On the use of a directed acyclic graph to represent a population of computer programs. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <pages> pages 154-159, </pages> <address> Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: Selected research topics are described in Sections 2.2 and an overview of applications of GP is given in Section 2.3. 1. Various changes to the representation of the programs to be evolved * Reducing memory requirements and reducing runtime using directed acyclic graphs <ref> [Han94a, Kei96] </ref> * Linear rather than tree representations (Section 2.2.1) * Representing programs with graphs (Section 2.2.1) * Using trees to specify how to grow another structure (such as an artificial neural network [Gru96], an electrical circuit [KBA + 97] or simulations of flowering plants [Jac97]) * Including semantic information via
Reference: [Han94b] <author> Simon G. Handley. </author> <title> The automatic generations of plans for a mobile robot via genetic programming with automatically defined functions. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 18, </booktitle> <pages> pages 391-407. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: While [LHL97] evolve mobile robot controllers using GP and a simulator but demonstrate the controller running on the physical robot. <ref> [Han94b, HWSS95, Iba96, Qur96, RD94, LS96, ZKL96] </ref> have applied evolved autonomous agents using genetic programming. 2.3.6 Artistic There have been a number of uses of genetic programming, perhaps inspired by Dawkins' biomorphs [Daw86] or Karl Sims' panspermia [Sim91], which generate patterns on a computer display.
Reference: [HWSS95] <author> Thomas Haynes, Roger Wainwright, Sandip Sen, and Dale Schoenefeld. </author> <title> Strongly typed genetic programming in evolving cooperation strategies. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 271-278, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: While [LHL97] evolve mobile robot controllers using GP and a simulator but demonstrate the controller running on the physical robot. <ref> [Han94b, HWSS95, Iba96, Qur96, RD94, LS96, ZKL96] </ref> have applied evolved autonomous agents using genetic programming. 2.3.6 Artistic There have been a number of uses of genetic programming, perhaps inspired by Dawkins' biomorphs [Daw86] or Karl Sims' panspermia [Sim91], which generate patterns on a computer display.
Reference: [Iba96] <editor> Hitoshi Iba. </editor> <title> Emergent cooperation for multiple agents using genetic programming. </title> <editor> In John R. Koza, editor, </editor> <booktitle> Late Breaking Papers at the Genetic Programming 1996 Conference Stanford University July 28-31, </booktitle> <year> 1996, </year> <pages> pages 66-74, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> Stanford Bookstore. </publisher>
Reference-contexts: While [LHL97] evolve mobile robot controllers using GP and a simulator but demonstrate the controller running on the physical robot. <ref> [Han94b, HWSS95, Iba96, Qur96, RD94, LS96, ZKL96] </ref> have applied evolved autonomous agents using genetic programming. 2.3.6 Artistic There have been a number of uses of genetic programming, perhaps inspired by Dawkins' biomorphs [Daw86] or Karl Sims' panspermia [Sim91], which generate patterns on a computer display.
Reference: [IdS94] <author> Hitoshi Iba, Hugo de Garis, and Taisuke Sato. </author> <title> Genetic programming using a minimum description length principle. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 12, </booktitle> <pages> pages 265-284. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Investigation of better ways to assess program fitness (Section 2.2.3) * Dynamic fitness such as [Tet96], LEF [GR97], RAT [TA97] and co-evolution [Sie94] * Measures aimed at reducing the size of the evolved programs <ref> [IdS94, ZM96] </ref>. 3. Measures to allow programs to be evolved from program modules and to simultaneously evolve the modules * Automatically defined functions (ADFs) [Koz94, KA95] * Module Acquisition (MA/GliB) [Ang94] and * Adaptive Representions through Learning (ARL) [RB96]. 4.
Reference: [Ikr96] <author> I. M. Ikram. </author> <title> An occam library for genetic programming on transputer networks. </title> <editor> In Hamid R. Arabnia, editor, </editor> <booktitle> Proceedings of the International Conference on Parallel and Distributed Processing Techniques and Applications, </booktitle> <pages> pages 1186-1189, </pages> <address> Sunnyvale, California, </address> <month> 9-11 August </month> <year> 1996. </year> <pages> CSREA. </pages>
Reference-contexts: Like GAs, GP parallelises easily and can readily take advantage of a wide range of dedicated parallel processing architectures <ref> [TOD96, SS96, JP96, Ikr96, AK96, OCPT96] </ref>. There is also interest in parallel execution using networks of workstations (e.g. using PVM) and across the Internet using Java. Often GP (and GAs) are parallelised by splitting the population so different parts of it are run on different CPUs.
Reference: [Jac97] <author> Christian Jacob. </author> <title> Principia Evolvica - Simulierte Evolution mit Mathematica. </title> <address> dpunkt.verlag, Heidelberg, Germany, </address> <month> August </month> <year> 1997. </year>
Reference-contexts: runtime using directed acyclic graphs [Han94a, Kei96] * Linear rather than tree representations (Section 2.2.1) * Representing programs with graphs (Section 2.2.1) * Using trees to specify how to grow another structure (such as an artificial neural network [Gru96], an electrical circuit [KBA + 97] or simulations of flowering plants <ref> [Jac97] </ref>) * Including semantic information via type systems [Mon95] * Incorporating state or database information within a genetic program (Section 2.2.2). 2.
Reference: [JMD94] <author> Michael Patrick Johnson, Pattie Maes, and Trevor Darrell. </author> <title> Evolving visual routines. </title> <editor> In Rodney A. Brooks and Pattie Maes, editors, </editor> <booktitle> ARTIFICIAL LIFE IV, Proceedings of the fourth International Workshop on the Synthesis and Simulation of Living Systems, </booktitle> <pages> pages 198-209, </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA, 6-8 July 1994. </address> <publisher> MIT Press. </publisher> <pages> 15 </pages>
Reference-contexts: These measurements are both noisy and chaotic. He compares the effectiveness (at removing noise but preserving the underlying signal) of special filters evolved by genetic programming and various standard filters. He concludes that a combination of genetic programming and heuristics is the most effective. <ref> [JMD94] </ref> was able to evolve 2D image processing programs to extract the location of peoples' hands from still silhouettes.
Reference: [JP96] <author> Hugues Juille and Jordan B. Pollack. </author> <title> Massively parallel genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 17, </booktitle> <pages> pages 339-358. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: Like GAs, GP parallelises easily and can readily take advantage of a wide range of dedicated parallel processing architectures <ref> [TOD96, SS96, JP96, Ikr96, AK96, OCPT96] </ref>. There is also interest in parallel execution using networks of workstations (e.g. using PVM) and across the Internet using Java. Often GP (and GAs) are parallelised by splitting the population so different parts of it are run on different CPUs.
Reference: [KA95] <author> John R. Koza and David Andre. </author> <title> Evolution of both the architecture and the sequence of work-performing steps of a computer program using genetic programming with architecture-altering operations. </title> <editor> In E. V. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 50-60, </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference-contexts: Measures to allow programs to be evolved from program modules and to simultaneously evolve the modules * Automatically defined functions (ADFs) <ref> [Koz94, KA95] </ref> * Module Acquisition (MA/GliB) [Ang94] and * Adaptive Representions through Learning (ARL) [RB96]. 4. Search operators and algorithms such as * Mutation [BFN96, Lan98] * Context preserving crossover (SCPC/WCPC) [D'h94] * One-point Crossover [PL97] * Non genetic algorithm methods of searching the space of programs [SS97]. 5.
Reference: [KBA + 97] <author> John R. Koza, Forrest H Bennett III, David Andre, Martin A. Keane, and Frank Dunlap. </author> <title> Automated synthesis of analog electrical circuits by means of genetic programming. </title> <journal> IEEE Transactions on Evolutionary Computation, </journal> <volume> 1(2) </volume> <pages> 109-128, </pages> <month> July </month> <year> 1997. </year>
Reference-contexts: be evolved * Reducing memory requirements and reducing runtime using directed acyclic graphs [Han94a, Kei96] * Linear rather than tree representations (Section 2.2.1) * Representing programs with graphs (Section 2.2.1) * Using trees to specify how to grow another structure (such as an artificial neural network [Gru96], an electrical circuit <ref> [KBA + 97] </ref> or simulations of flowering plants [Jac97]) * Including semantic information via type systems [Mon95] * Incorporating state or database information within a genetic program (Section 2.2.2). 2.
Reference: [KBAK96] <author> John R. Koza, Forrest H. Bennett III, David Andre, and Martin A. Keane. </author> <title> Automated WYWIWYG design of both the topology and component values of electrical circuits using genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 123-131, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: hand coded algorithms. [PC97] evolves programs to improve the usefulness of 2D medical images while [EAS97] evolves digital signal filters which provide channel equalisation to restore the original signal after it has been distorted by noise and dispersion. [NB96] describes applications of GP to image and sound compression. 2.3.3 Design <ref> [KBAK96] </ref> shows the automatic design of electrical circuits to meet onerous design requirements. [NH94] have used genetic programming to evolve 3-D jet aircraft models. The determination of which models are fitter is done manually.
Reference: [KDD + 97] <editor> John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors. </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: VUB is developing a platform independent distributed implementation of GP written in Java. IRIDIA has been actively involved with the American series of GP conferences <ref> [KDD + 97] </ref>. 6 3.10 Elsewhere GP research is also active in Vienna [BGS96], Berlin and Bulgaria [SN97]. 4 E v o G P Working Group Genetic Programming has been identified as one of the important recent innovations in Evolutionary Computation.
Reference: [Kei96] <author> Maarten Keijzer. </author> <title> Efficiently representing populations in genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 13, </booktitle> <pages> pages 259-278. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: Selected research topics are described in Sections 2.2 and an overview of applications of GP is given in Section 2.3. 1. Various changes to the representation of the programs to be evolved * Reducing memory requirements and reducing runtime using directed acyclic graphs <ref> [Han94a, Kei96] </ref> * Linear rather than tree representations (Section 2.2.1) * Representing programs with graphs (Section 2.2.1) * Using trees to specify how to grow another structure (such as an artificial neural network [Gru96], an electrical circuit [KBA + 97] or simulations of flowering plants [Jac97]) * Including semantic information via <p> Normale Superieure is also active in the GP field. 3.5 Leiden The GP group at Leiden has concentrated upon financial applications of GP such as, direct marketing, credit card credit worthiness scoring, loan application evaluation, data mining and customer retention modelling as well as theoretical aspects such as improved representations <ref> [Kei96, EEK+96, EEKS98] </ref>. 3.6 Switzerland The principal centres of GP work in Switzerland are ETH (Zurich), IDSIA (Lugano), Geneva and EPFL (Lausanne).
Reference: [Koz92] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1992. </year>
Reference-contexts: 1 Introduction Genetic Programming (GP) is a powerful set of techniques which allow the automatic production of computer programs. As a field GP was founded by John Koza at the beginning of the 90's, and has grown exponentially since then <ref> [Koz92, Koz94, Koz98] </ref>. GP is inspired by Darwinian natural evolution, and has been applied successfully to a large number of difficult problems, such as automatic design, pattern recognition, robotic control, optimisation, financial trading and forecasting. GP is a radically different method of developing software. <p> An increasing number of implementations, many of them in the public domain. 7. An increasing number of applications (Section 2.3). 2 2.2 GP Research 2.2.1 Program Representation In most genetic programming work the programs being evolved are represented using trees <ref> [Koz92] </ref>. However a number of alternative approaches use linear chromosomes. [Per94] uses a linear postfix language and claims some advantages over the more standard tree approach. [Ban93] also uses a linear approach but various operations convert this to a tree shaped program which is executed.
Reference: [Koz94] <author> John R. Koza. </author> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <publisher> MIT Press, </publisher> <address> Cambridge Massachusetts, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Genetic Programming (GP) is a powerful set of techniques which allow the automatic production of computer programs. As a field GP was founded by John Koza at the beginning of the 90's, and has grown exponentially since then <ref> [Koz92, Koz94, Koz98] </ref>. GP is inspired by Darwinian natural evolution, and has been applied successfully to a large number of difficult problems, such as automatic design, pattern recognition, robotic control, optimisation, financial trading and forecasting. GP is a radically different method of developing software. <p> Measures to allow programs to be evolved from program modules and to simultaneously evolve the modules * Automatically defined functions (ADFs) <ref> [Koz94, KA95] </ref> * Module Acquisition (MA/GliB) [Ang94] and * Adaptive Representions through Learning (ARL) [RB96]. 4. Search operators and algorithms such as * Mutation [BFN96, Lan98] * Context preserving crossover (SCPC/WCPC) [D'h94] * One-point Crossover [PL97] * Non genetic algorithm methods of searching the space of programs [SS97]. 5. <p> Genetic programming was able to do this as well as the best of other techniques but all suffered from the fact that the structure depends upon more than local composition. <ref> [Koz94] </ref> reports similar success on other protein geometry problems. [Lon97] recasts the problem of detecting anomalies in streams of hundreds of thousands of events generated by computer simulations, as the problem of inducing a formal grammar which describes most events.
Reference: [Koz98] <editor> John R. Koza. </editor> <booktitle> Genetic Programming III. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge Massachusetts, </address> <year> 1998 </year> <month> (forthcoming). </month>
Reference-contexts: 1 Introduction Genetic Programming (GP) is a powerful set of techniques which allow the automatic production of computer programs. As a field GP was founded by John Koza at the beginning of the 90's, and has grown exponentially since then <ref> [Koz92, Koz94, Koz98] </ref>. GP is inspired by Darwinian natural evolution, and has been applied successfully to a large number of difficult problems, such as automatic design, pattern recognition, robotic control, optimisation, financial trading and forecasting. GP is a radically different method of developing software.
Reference: [Lan98] <author> W. B. Langdon. </author> <title> Data Structures and Genetic Programming. </title> <address> Kulwer, </address> <year> 1998. </year> <title> forth coming. </title>
Reference-contexts: Measures to allow programs to be evolved from program modules and to simultaneously evolve the modules * Automatically defined functions (ADFs) [Koz94, KA95] * Module Acquisition (MA/GliB) [Ang94] and * Adaptive Representions through Learning (ARL) [RB96]. 4. Search operators and algorithms such as * Mutation <ref> [BFN96, Lan98] </ref> * Context preserving crossover (SCPC/WCPC) [D'h94] * One-point Crossover [PL97] * Non genetic algorithm methods of searching the space of programs [SS97]. 5. The adoption of advanced genetic algorithm techniques by genetic programming. 6. An increasing number of implementations, many of them in the public domain. 7. <p> and a stack. 2.2.2 Genetic Programming and State Information Most computer programs make extensive use of storage, yet in almost all genetic programming examples, each genetic program is a function of its inputs and almost all storage requirements are dealt with by the framework used to support the genetic programs. <ref> [Lan98] </ref> is primarily concerned with extending genetic programming to cover this important topic and provides an overview of GP with evolvable memory. 2.2.3 Parallel Execution and Evolvable Hardware In common with GAs, the vast proportion of machine resources consumed by GP are used running the fitness function to evaluate the population. <p> The principal members of the group have recently published the first GP text book [BNKF97]. 3.2 Birmingham Like the Dortmund group, the EEBIC group within Birmingham University has diverse interests and international collaborative links. At present the major topics include the theoretical underpinnings of GP <ref> [PL97, LP97a, Lan98, LP97b] </ref>, novel representations and operators (Section 2.2.1), as well as applications such as medical imaging [Pol96c] and scheduling [LT97]. 5 3.3 Scotland Three Scottish universities, Napier, Edinburgh and Glasgow are very active in the GP field.
Reference: [LHL97] <author> Wei-Po Lee, John Hallam, and Henrik Hautop Lund. </author> <title> Applying genetic programming to evolve behavior primitives and arbitrators for mobile robots. </title> <booktitle> In Proceedings of IEEE 4th International Conference on Evolutionary Computation, </booktitle> <volume> volume 1. </volume> <publisher> IEEE Press, </publisher> <year> 1997. </year> <note> to appear. </note>
Reference-contexts: Until recently robot controllers had been hand coded however Spencer has been able to use genetic programming to automatically generate a control program enabling a simulated six legged robot to walk [Spe94]. [GQ96] and [BNO97] have evolved control programs and run them on real robots using GP. While <ref> [LHL97] </ref> evolve mobile robot controllers using GP and a simulator but demonstrate the controller running on the physical robot. [Han94b, HWSS95, Iba96, Qur96, RD94, LS96, ZKL96] have applied evolved autonomous agents using genetic programming. 2.3.6 Artistic There have been a number of uses of genetic programming, perhaps inspired by Dawkins' biomorphs
Reference: [Lon97] <author> Tom Longshaw. </author> <title> Evolutionary learning of large grammars. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> page 445, </pages> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Genetic programming was able to do this as well as the best of other techniques but all suffered from the fact that the structure depends upon more than local composition. [Koz94] reports similar success on other protein geometry problems. <ref> [Lon97] </ref> recasts the problem of detecting anomalies in streams of hundreds of thousands of events generated by computer simulations, as the problem of inducing a formal grammar which describes most events. <p> The events it fails to match are then the interesting anomalies. <ref> [Lon97, page 452] </ref> states "The algorithm itself has proved its worth to us in the areas of data-mining and the analysis of the results from simulation". Andre has successfully used genetic programming in optical character recognition problems (OCR).
Reference: [LP97a] <author> W. B. Langdon and R. Poli. </author> <title> An analysis of the MAX problem in genetic programming. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 222-230, </pages> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The principal members of the group have recently published the first GP text book [BNKF97]. 3.2 Birmingham Like the Dortmund group, the EEBIC group within Birmingham University has diverse interests and international collaborative links. At present the major topics include the theoretical underpinnings of GP <ref> [PL97, LP97a, Lan98, LP97b] </ref>, novel representations and operators (Section 2.2.1), as well as applications such as medical imaging [Pol96c] and scheduling [LT97]. 5 3.3 Scotland Three Scottish universities, Napier, Edinburgh and Glasgow are very active in the GP field.
Reference: [LP97b] <author> W. B. Langdon and R. Poli. </author> <title> Fitness causes bloat: Mutation. </title> <editor> In John Koza, editor, </editor> <booktitle> Late Breaking Papers at the GP-97 Conference, </booktitle> <pages> pages 132-140, </pages> <address> Stanford, CA, USA, 13-16 July 1997. </address> <publisher> Stanford Bookstore. </publisher>
Reference-contexts: The principal members of the group have recently published the first GP text book [BNKF97]. 3.2 Birmingham Like the Dortmund group, the EEBIC group within Birmingham University has diverse interests and international collaborative links. At present the major topics include the theoretical underpinnings of GP <ref> [PL97, LP97a, Lan98, LP97b] </ref>, novel representations and operators (Section 2.2.1), as well as applications such as medical imaging [Pol96c] and scheduling [LT97]. 5 3.3 Scotland Three Scottish universities, Napier, Edinburgh and Glasgow are very active in the GP field.
Reference: [LS96] <author> Sean Luke and Lee Spector. </author> <title> Evolving teamwork and coordination with genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 150-156, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: While [LHL97] evolve mobile robot controllers using GP and a simulator but demonstrate the controller running on the physical robot. <ref> [Han94b, HWSS95, Iba96, Qur96, RD94, LS96, ZKL96] </ref> have applied evolved autonomous agents using genetic programming. 2.3.6 Artistic There have been a number of uses of genetic programming, perhaps inspired by Dawkins' biomorphs [Daw86] or Karl Sims' panspermia [Sim91], which generate patterns on a computer display.
Reference: [LT97] <author> W. B. Langdon and P. C. Treleaven. </author> <title> Scheduling maintenance of electrical power transmission networks using genetic programming. </title> <editor> In Kevin Warwick, Arthur Ekwue, and Raj Aggarwal, editors, </editor> <booktitle> Artificial Intelligence Techniques in Power Systems, chapter 10, </booktitle> <pages> pages 220-237. </pages> <publisher> IEE, </publisher> <year> 1997. </year>
Reference-contexts: At present the major topics include the theoretical underpinnings of GP [PL97, LP97a, Lan98, LP97b], novel representations and operators (Section 2.2.1), as well as applications such as medical imaging [Pol96c] and scheduling <ref> [LT97] </ref>. 5 3.3 Scotland Three Scottish universities, Napier, Edinburgh and Glasgow are very active in the GP field. For example at Napier the fundamental scaling problems associated with solving complex problems are under investigation [ABF97] as are issues concerning generating efficient programs from high level specifications, test programs, etc.
Reference: [Mon95] <author> David J. Montana. </author> <title> Strongly typed genetic programming. </title> <journal> Evolutionary Computation, </journal> <volume> 3(2) </volume> <pages> 199-230, </pages> <year> 1995. </year>
Reference-contexts: Linear rather than tree representations (Section 2.2.1) * Representing programs with graphs (Section 2.2.1) * Using trees to specify how to grow another structure (such as an artificial neural network [Gru96], an electrical circuit [KBA + 97] or simulations of flowering plants [Jac97]) * Including semantic information via type systems <ref> [Mon95] </ref> * Incorporating state or database information within a genetic program (Section 2.2.2). 2.
Reference: [MST95] <author> Christian Miccio, Eduardo Sanchez, and Marco Tomassini. </author> <title> Parallel genetic programming induction of binary decision diagrams. </title> <type> Technical Report 7, </type> <institution> Ecole Polytechnique Federal de Lausanne, EPFL, Switzerland, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: Topics include evolving compact programs [Bli96], improved search techniques and use of GP with parallel computers <ref> [MST95] </ref>. 3.7 Cork In Ireland there has been work on using GP to automatically parallelise programs [RW97] as well as investigations into the mechanics of GP populations [Rya94]. 3.8 Italy In Parma GP has been applied to making existing medical imaging techniques more effective and to the evolution of cellular-automata-based pattern
Reference: [NB95a] <author> Peter Nordin and Wolfgang Banzhaf. </author> <title> Complexity compression and evolution. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 310-317, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: It has a wide range of interests including linear genomes (Section 2.2.1), theoretical issues <ref> [NB95a, NFB96] </ref> and applications such as: function regression and model building, data compression [NB96], robotics (Section 2.3.5), interactive evolution (user-in-the-loop approaches), combinatorial optimisation problems and multi-agent systems. It is also investigating issues concerning self-organisation and novel forms of computation such as molecular computation.
Reference: [NB95b] <author> Peter Nordin and Wolfgang Banzhaf. </author> <title> Evolving turing-complete programs for a register machine with self-modifying code. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 318-325, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: However of the linear chromosome approaches perhaps the most surprising and successful is [Nor94] in which the representation is a small (up to 1000 bytes) machine code program. Enormous (more than thousand fold) speed ups in comparison with LISP are claimed. Later work <ref> [NB95b] </ref> extended the system so that it was fully Turing complete. A radically different program representation is used in Parallel Distributed Genetic Programming (PDGP) where program trees are replaced by directed graphs.
Reference: [NB96] <author> Peter Nordin and Wolfgang Banzhaf. </author> <title> Programmatic compression of images and sound. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 345-350, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher> <pages> 16 </pages>
Reference-contexts: They report these performed better than the best hand coded algorithms. [PC97] evolves programs to improve the usefulness of 2D medical images while [EAS97] evolves digital signal filters which provide channel equalisation to restore the original signal after it has been distorted by noise and dispersion. <ref> [NB96] </ref> describes applications of GP to image and sound compression. 2.3.3 Design [KBAK96] shows the automatic design of electrical circuits to meet onerous design requirements. [NH94] have used genetic programming to evolve 3-D jet aircraft models. The determination of which models are fitter is done manually. <p> It has a wide range of interests including linear genomes (Section 2.2.1), theoretical issues [NB95a, NFB96] and applications such as: function regression and model building, data compression <ref> [NB96] </ref>, robotics (Section 2.3.5), interactive evolution (user-in-the-loop approaches), combinatorial optimisation problems and multi-agent systems. It is also investigating issues concerning self-organisation and novel forms of computation such as molecular computation.
Reference: [NFB96] <author> Peter Nordin, Frank Francone, and Wolfgang Banzhaf. </author> <title> Explicitly defined introns and destructive crossover in genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 6, </booktitle> <pages> pages 111-134. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: It has a wide range of interests including linear genomes (Section 2.2.1), theoretical issues <ref> [NB95a, NFB96] </ref> and applications such as: function regression and model building, data compression [NB96], robotics (Section 2.3.5), interactive evolution (user-in-the-loop approaches), combinatorial optimisation problems and multi-agent systems. It is also investigating issues concerning self-organisation and novel forms of computation such as molecular computation.
Reference: [NH94] <author> Thang Nguyen and Thomas Huang. </author> <title> Evolvable 3D modeling for model-based object recognition systems. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 22, </booktitle> <pages> pages 459-475. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: images while [EAS97] evolves digital signal filters which provide channel equalisation to restore the original signal after it has been distorted by noise and dispersion. [NB96] describes applications of GP to image and sound compression. 2.3.3 Design [KBAK96] shows the automatic design of electrical circuits to meet onerous design requirements. <ref> [NH94] </ref> have used genetic programming to evolve 3-D jet aircraft models. The determination of which models are fitter is done manually.
Reference: [Nor94] <author> Peter Nordin. </author> <title> A compiling genetic programming system that directly manipulates the machine code. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 14, </booktitle> <pages> pages 311-331. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: However of the linear chromosome approaches perhaps the most surprising and successful is <ref> [Nor94] </ref> in which the representation is a small (up to 1000 bytes) machine code program. Enormous (more than thousand fold) speed ups in comparison with LISP are claimed. Later work [NB95b] extended the system so that it was fully Turing complete.
Reference: [Oak94] <author> Howard Oakley. </author> <title> Two scientific applications of genetic programming: Stack filters and non-linear equation fitting to chaotic data. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 17, </booktitle> <pages> pages 369-389. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Various (20) standard metrics are extracted from the image using standard techniques, which are then processed by a genetic program to yield target details. <ref> [Oak94] </ref> describes obtaining blood flow rates within human toes using laser Doppler measurements. These measurements are both noisy and chaotic. He compares the effectiveness (at removing noise but preserving the underlying signal) of special filters evolved by genetic programming and various standard filters.
Reference: [OCPT96] <author> Mouloud Oussaidene, Bastien Chopard, Olivier V. Pictet, and Marco Tomassini. </author> <title> Parallel genetic programming: An application to trading models evolution. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 357-380, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Like GAs, GP parallelises easily and can readily take advantage of a wide range of dedicated parallel processing architectures <ref> [TOD96, SS96, JP96, Ikr96, AK96, OCPT96] </ref>. There is also interest in parallel execution using networks of workstations (e.g. using PVM) and across the Internet using Java. Often GP (and GAs) are parallelised by splitting the population so different parts of it are run on different CPUs. <p> Their automatically evolved strategies have proved superior to many hand-coded strategies. While [CY97] use GP to model volatility in Japanese and New York stock markets and <ref> [OCPT96] </ref> model currency markets.
Reference: [PC97] <author> Riccardo Poli and Stefano Cagnoni. </author> <title> Genetic programming with user-driven selection: Experiments on the evolution of algorithms for image enhancement. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 269-277, </pages> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: He concludes that a combination of genetic programming and heuristics is the most effective. [JMD94] was able to evolve 2D image processing programs to extract the location of peoples' hands from still silhouettes. They report these performed better than the best hand coded algorithms. <ref> [PC97] </ref> evolves programs to improve the usefulness of 2D medical images while [EAS97] evolves digital signal filters which provide channel equalisation to restore the original signal after it has been distorted by noise and dispersion. [NB96] describes applications of GP to image and sound compression. 2.3.3 Design [KBAK96] shows the automatic
Reference: [Per94] <author> Tim Perkis. </author> <title> Stack-based genetic programming. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <volume> volume 1, </volume> <pages> pages 148-153, </pages> <address> Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: An increasing number of applications (Section 2.3). 2 2.2 GP Research 2.2.1 Program Representation In most genetic programming work the programs being evolved are represented using trees [Koz92]. However a number of alternative approaches use linear chromosomes. <ref> [Per94] </ref> uses a linear postfix language and claims some advantages over the more standard tree approach. [Ban93] also uses a linear approach but various operations convert this to a tree shaped program which is executed.
Reference: [PL97] <author> Riccardo Poli and W. B. Langdon. </author> <title> A new schema theory for genetic programming with one-point crossover and point mutation. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 278-285, </pages> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Search operators and algorithms such as * Mutation [BFN96, Lan98] * Context preserving crossover (SCPC/WCPC) [D'h94] * One-point Crossover <ref> [PL97] </ref> * Non genetic algorithm methods of searching the space of programs [SS97]. 5. The adoption of advanced genetic algorithm techniques by genetic programming. 6. An increasing number of implementations, many of them in the public domain. 7. <p> The principal members of the group have recently published the first GP text book [BNKF97]. 3.2 Birmingham Like the Dortmund group, the EEBIC group within Birmingham University has diverse interests and international collaborative links. At present the major topics include the theoretical underpinnings of GP <ref> [PL97, LP97a, Lan98, LP97b] </ref>, novel representations and operators (Section 2.2.1), as well as applications such as medical imaging [Pol96c] and scheduling [LT97]. 5 3.3 Scotland Three Scottish universities, Napier, Edinburgh and Glasgow are very active in the GP field.
Reference: [Pol96a] <author> R. Poli. </author> <title> Some steps towards a form of parallel distributed genetic programming. </title> <booktitle> In The 1st Online Workshop on Soft Computing (WSC1), </booktitle> <address> http://www.bioele.nuee.nagoya-u.ac.jp/wsc1/, 19-30 August 1996. Nagoya University, Japan. </address>
Reference-contexts: It is this reuse which gives the technique its power. PDGP is a very flexible framework and has been demonstrated evolving solutions for symbolic regression, parity and artificial ant problems and evolving boolean logic networks, artificial neural networks, finite state automata, etc. <ref> [Pol96d, Pol96a, Pol96b, Pol97] </ref>. In a system called PADO [Tel96], a new program representation was used to obtain parallel classification programs for signals and images. In PADO programs are made up of several groups of programs each group being used to recognise the instances of images of a given class.
Reference: [Pol96b] <author> Riccardo Poli. </author> <title> Evolution of recursive transistion networks for natural language recognition with parallel distributed genetic programming. </title> <type> Technical Report CSRP-96-19, </type> <institution> School of Computer Science, University of Birmingham, </institution> <address> B15 2TT, UK, </address> <month> December </month> <year> 1996. </year> <note> Presented at AISB-97 workshop on Evolutionary Computation. </note>
Reference-contexts: It is this reuse which gives the technique its power. PDGP is a very flexible framework and has been demonstrated evolving solutions for symbolic regression, parity and artificial ant problems and evolving boolean logic networks, artificial neural networks, finite state automata, etc. <ref> [Pol96d, Pol96a, Pol96b, Pol97] </ref>. In a system called PADO [Tel96], a new program representation was used to obtain parallel classification programs for signals and images. In PADO programs are made up of several groups of programs each group being used to recognise the instances of images of a given class.
Reference: [Pol96c] <author> Riccardo Poli. </author> <title> Genetic programming for feature detection and image segmentation. </title> <editor> In T. C. Fogarty, editor, </editor> <booktitle> Evolutionary Computing, number 1143 in Lecture Notes in Computer Science, </booktitle> <pages> pages 110-125. </pages> <publisher> Springer-Verlag, </publisher> <address> University of Sussex, UK, </address> <month> 1-2 April </month> <year> 1996. </year>
Reference-contexts: At present the major topics include the theoretical underpinnings of GP [PL97, LP97a, Lan98, LP97b], novel representations and operators (Section 2.2.1), as well as applications such as medical imaging <ref> [Pol96c] </ref> and scheduling [LT97]. 5 3.3 Scotland Three Scottish universities, Napier, Edinburgh and Glasgow are very active in the GP field.
Reference: [Pol96d] <author> Riccardo Poli. </author> <title> Parallel distributed genetic programming. </title> <type> Technical Report CSRP-96-15, </type> <institution> School of Computer Science, University of Birmingham, </institution> <address> B15 2TT, UK, </address> <month> September </month> <year> 1996. </year> <note> Submitted to Evolutionary Computation. </note>
Reference-contexts: It is this reuse which gives the technique its power. PDGP is a very flexible framework and has been demonstrated evolving solutions for symbolic regression, parity and artificial ant problems and evolving boolean logic networks, artificial neural networks, finite state automata, etc. <ref> [Pol96d, Pol96a, Pol96b, Pol97] </ref>. In a system called PADO [Tel96], a new program representation was used to obtain parallel classification programs for signals and images. In PADO programs are made up of several groups of programs each group being used to recognise the instances of images of a given class.
Reference: [Pol97] <author> Riccardo Poli. </author> <title> Discovery of symbolic, neuro-symbolic and neural networks with parallel distributed genetic programming. </title> <booktitle> In 3rd International Conference on Artificial Neural Networks and Genetic Algorithms, </booktitle> <institution> ICAN-NGA'97, University of East Anglia, Norwich, UK, </institution> <year> 1997. </year>
Reference-contexts: It is this reuse which gives the technique its power. PDGP is a very flexible framework and has been demonstrated evolving solutions for symbolic regression, parity and artificial ant problems and evolving boolean logic networks, artificial neural networks, finite state automata, etc. <ref> [Pol96d, Pol96a, Pol96b, Pol97] </ref>. In a system called PADO [Tel96], a new program representation was used to obtain parallel classification programs for signals and images. In PADO programs are made up of several groups of programs each group being used to recognise the instances of images of a given class.
Reference: [Qur96] <author> Adil Qureshi. </author> <title> Evolving agents. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 369-374, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: While [LHL97] evolve mobile robot controllers using GP and a simulator but demonstrate the controller running on the physical robot. <ref> [Han94b, HWSS95, Iba96, Qur96, RD94, LS96, ZKL96] </ref> have applied evolved autonomous agents using genetic programming. 2.3.6 Artistic There have been a number of uses of genetic programming, perhaps inspired by Dawkins' biomorphs [Daw86] or Karl Sims' panspermia [Sim91], which generate patterns on a computer display.
Reference: [RB96] <author> Justinian P. Rosca and Dana H. Ballard. </author> <title> Discovery of subroutines in genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 9, </booktitle> <pages> pages 177-202. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: Measures to allow programs to be evolved from program modules and to simultaneously evolve the modules * Automatically defined functions (ADFs) [Koz94, KA95] * Module Acquisition (MA/GliB) [Ang94] and * Adaptive Representions through Learning (ARL) <ref> [RB96] </ref>. 4. Search operators and algorithms such as * Mutation [BFN96, Lan98] * Context preserving crossover (SCPC/WCPC) [D'h94] * One-point Crossover [PL97] * Non genetic algorithm methods of searching the space of programs [SS97]. 5. The adoption of advanced genetic algorithm techniques by genetic programming. 6.
Reference: [RD94] <author> Simon Raik and Bohdan Durnota. </author> <title> The evolution of sporting strategies. </title> <editor> In Russel J. Stonier and Xing Huo Yu, editors, </editor> <booktitle> Complex Systems: Mechanisms of Adaption, </booktitle> <pages> pages 85-92. </pages> <publisher> IOS Press, </publisher> <year> 1994. </year>
Reference-contexts: While [LHL97] evolve mobile robot controllers using GP and a simulator but demonstrate the controller running on the physical robot. <ref> [Han94b, HWSS95, Iba96, Qur96, RD94, LS96, ZKL96] </ref> have applied evolved autonomous agents using genetic programming. 2.3.6 Artistic There have been a number of uses of genetic programming, perhaps inspired by Dawkins' biomorphs [Daw86] or Karl Sims' panspermia [Sim91], which generate patterns on a computer display.
Reference: [Rey92] <author> Craig W. Reynolds. </author> <title> An evolved, vision-based behavioral model of coordinated group motion. </title> <editor> In Meyer and Wilson, editors, </editor> <booktitle> From Animals to Animats (Proceedings of Simulation of Adaptive Behaviour). </booktitle> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: For example [GH97] describes GP being used to make a short single character video. While Reynolds' "boids" technique <ref> [Rey92, Rey94b, Rey94a] </ref>. has been used as a basis for photo realistic imagery of bat swarms in the films "Batman Returns" and "Cliffhanger" [Rey96]. [DFP + 94] uses genetic programming to generate sounds and three dimensional shapes. Virtual reality techniques are used to present these to the user.
Reference: [Rey94a] <author> Craig W. Reynolds. </author> <title> Evolution of obstacle avoidance behaviour:using noise to promote robust solutions. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 10, </booktitle> <pages> pages 221-241. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: For example [GH97] describes GP being used to make a short single character video. While Reynolds' "boids" technique <ref> [Rey92, Rey94b, Rey94a] </ref>. has been used as a basis for photo realistic imagery of bat swarms in the films "Batman Returns" and "Cliffhanger" [Rey96]. [DFP + 94] uses genetic programming to generate sounds and three dimensional shapes. Virtual reality techniques are used to present these to the user.
Reference: [Rey94b] <author> Craig W. Reynolds. </author> <title> An evolved, vision-based behavioral model of obstacle avoidance behaviour. </title> <editor> In Christo-pher G. Langton, editor, </editor> <booktitle> Artificial Life III, volume XVII of SFI Studies in the Sciences of Complexity, </booktitle> <pages> pages 327-346. </pages> <publisher> Addison-Wesley, </publisher> <address> Santa Fe Institute, New Mexico, USA, </address> <month> 15-19 June </month> <year> 1992 1994. </year>
Reference-contexts: For example [GH97] describes GP being used to make a short single character video. While Reynolds' "boids" technique <ref> [Rey92, Rey94b, Rey94a] </ref>. has been used as a basis for photo realistic imagery of bat swarms in the films "Batman Returns" and "Cliffhanger" [Rey96]. [DFP + 94] uses genetic programming to generate sounds and three dimensional shapes. Virtual reality techniques are used to present these to the user.
Reference: [Rey96] <author> Craig Reynolds. Boids. </author> <note> WWW home page, 12 August 1996. http://reality.sgi.com/craig/boids.html. </note>
Reference-contexts: For example [GH97] describes GP being used to make a short single character video. While Reynolds' "boids" technique [Rey92, Rey94b, Rey94a]. has been used as a basis for photo realistic imagery of bat swarms in the films "Batman Returns" and "Cliffhanger" <ref> [Rey96] </ref>. [DFP + 94] uses genetic programming to generate sounds and three dimensional shapes. Virtual reality techniques are used to present these to the user.
Reference: [RM95] <author> Gerald Robinson and Paul McIlroy. </author> <title> Exploring some commercial applications of genetic programming. </title> <type> Project 4487, </type> <institution> British Telecom, Systems Research Division, Martelsham, Ipswitch, UK, </institution> <month> 9/3/95 </month> <year> 1995. </year> <month> 17 </month>
Reference-contexts: GP is still in its infancy and so it is not surprising that interest is centred on academic institutions, however many of them have commercial partnerships and already some European firms are active in this area, e.g. British Telecom <ref> [RM95] </ref>, Daimler-Benz, Siemens, Voest-Alpine, Cap Volmac, and a number of smaller firms and financial institutions.
Reference: [RW97] <author> Conor Ryan and Paul Walsh. </author> <title> The evolution of provable parallel programs. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 295-302, </pages> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Topics include evolving compact programs [Bli96], improved search techniques and use of GP with parallel computers [MST95]. 3.7 Cork In Ireland there has been work on using GP to automatically parallelise programs <ref> [RW97] </ref> as well as investigations into the mechanics of GP populations [Rya94]. 3.8 Italy In Parma GP has been applied to making existing medical imaging techniques more effective and to the evolution of cellular-automata-based pattern classifiers.
Reference: [Rya94] <editor> Conor Ryan. Pygmies and civil servants. In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 11, </booktitle> <pages> pages 243-263. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Topics include evolving compact programs [Bli96], improved search techniques and use of GP with parallel computers [MST95]. 3.7 Cork In Ireland there has been work on using GP to automatically parallelise programs [RW97] as well as investigations into the mechanics of GP populations <ref> [Rya94] </ref>. 3.8 Italy In Parma GP has been applied to making existing medical imaging techniques more effective and to the evolution of cellular-automata-based pattern classifiers. In Naples as an approximate technique to overcome intractable space and time difficulties associated with some mathematical analysis [FCC + 97].
Reference: [SA94] <author> Lee Spector and Adam Alpern. </author> <title> Criticism, culture, and the automatic generation of artworks. </title> <booktitle> In Proceedings of Twelfth National Conference on Artificial Intelligence, </booktitle> <pages> pages 3-8, </pages> <address> Seattle, Washington, USA, 1994. </address> <publisher> AAAI Press/MIT Press. </publisher>
Reference-contexts: Virtual reality techniques are used to present these to the user. As in Section 2.3.3, there is an interactive fitness function, with the user indicating a preference between the four objects presented to him. <ref> [SA94] </ref> have used GP to automatically generate Jazz improvisations. (Examples of genetic music are available from the Internet, e.g. via http://www.cs.bham.ac.uk/~wbl). 3 GP in Europe In this section we review very briefly the main players in genetic programming within Europe. (To save space we do not reiterate work already described in
Reference: [Sie94] <author> Eric V. Siegel. </author> <title> Competitively evolving decision trees against fixed training cases for natural language processing. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 19, </booktitle> <pages> pages 409-423. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Investigation of better ways to assess program fitness (Section 2.2.3) * Dynamic fitness such as [Tet96], LEF [GR97], RAT [TA97] and co-evolution <ref> [Sie94] </ref> * Measures aimed at reducing the size of the evolved programs [IdS94, ZM96]. 3.
Reference: [Sim91] <editor> K. Sims. panspermia. In Christopher G. Langton, editor, </editor> <booktitle> Artificial Life II Video Proceedings. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Sante Fe Institute, New Mexico, USA, </address> <month> February </month> <year> 1990 1991. </year>
Reference-contexts: GP and a simulator but demonstrate the controller running on the physical robot. [Han94b, HWSS95, Iba96, Qur96, RD94, LS96, ZKL96] have applied evolved autonomous agents using genetic programming. 2.3.6 Artistic There have been a number of uses of genetic programming, perhaps inspired by Dawkins' biomorphs [Daw86] or Karl Sims' panspermia <ref> [Sim91] </ref>, which generate patterns on a computer display. For example [GH97] describes GP being used to make a short single character video.
Reference: [SN97] <author> Vanio Slavov and Nikolay I. Nikolaev. </author> <title> Inductive genetic programming and superposition of fitness landscapes. </title> <editor> In Eric Goodman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Seventh International Conference, </booktitle> <institution> Michigan State University, </institution> <address> East Lansing, MI, USA, 19-23 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: VUB is developing a platform independent distributed implementation of GP written in Java. IRIDIA has been actively involved with the American series of GP conferences [KDD + 97]. 6 3.10 Elsewhere GP research is also active in Vienna [BGS96], Berlin and Bulgaria <ref> [SN97] </ref>. 4 E v o G P Working Group Genetic Programming has been identified as one of the important recent innovations in Evolutionary Computation.
Reference: [Spe94] <author> Graham F. Spencer. </author> <title> Automatic generation of programs for crawling and walking. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 15, </booktitle> <pages> pages 335-353. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Until recently robot controllers had been hand coded however Spencer has been able to use genetic programming to automatically generate a control program enabling a simulated six legged robot to walk <ref> [Spe94] </ref>. [GQ96] and [BNO97] have evolved control programs and run them on real robots using GP.
Reference: [SS96] <author> Kilian Stoffel and Lee Spector. </author> <title> High-performance, parallel, stack-based genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 224-229, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Like GAs, GP parallelises easily and can readily take advantage of a wide range of dedicated parallel processing architectures <ref> [TOD96, SS96, JP96, Ikr96, AK96, OCPT96] </ref>. There is also interest in parallel execution using networks of workstations (e.g. using PVM) and across the Internet using Java. Often GP (and GAs) are parallelised by splitting the population so different parts of it are run on different CPUs.
Reference: [SS97] <author> R. P. Salustowicz and J. Schmidhuber. </author> <title> Probabilistic incremental program evolution. </title> <journal> Evolutionary Computation, </journal> <volume> 5(2) </volume> <pages> 123-141, </pages> <year> 1997. </year>
Reference-contexts: Search operators and algorithms such as * Mutation [BFN96, Lan98] * Context preserving crossover (SCPC/WCPC) [D'h94] * One-point Crossover [PL97] * Non genetic algorithm methods of searching the space of programs <ref> [SS97] </ref>. 5. The adoption of advanced genetic algorithm techniques by genetic programming. 6. An increasing number of implementations, many of them in the public domain. 7.
Reference: [SSJ + 96] <author> Marc Schoenauer, Michele Sebag, Francois Jouve, Bertrand Lamy, and Habibou Maitournam. </author> <title> Evolutionary identification of macro-mechanical models. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 23, </booktitle> <pages> pages 467-488. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: The principal research activities include applying GP to modelling the mechanical properties of novel engineering materials including improved means of fine tuning continuous coefficients <ref> [SSJ + 96] </ref>, reducing the cost of fitness evaluation, automatically simplifying evolved programs and extending GP to graphs.
Reference: [TA97] <author> Astro Teller and David Andre. </author> <title> Automatically choosing the number of fitness cases: The rational allocation of trials. </title> <editor> In John R. Koza, Kalyanmoy Deb, Marco Dorigo, David B. Fogel, Max Garzon, Hitoshi Iba, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <pages> pages 321-328, </pages> <address> Stanford University, CA, USA, 13-16 July 1997. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Investigation of better ways to assess program fitness (Section 2.2.3) * Dynamic fitness such as [Tet96], LEF [GR97], RAT <ref> [TA97] </ref> and co-evolution [Sie94] * Measures aimed at reducing the size of the evolved programs [IdS94, ZM96]. 3.
Reference: [Tac93] <author> Walter Alden Tackett. </author> <title> Genetic programming for feature discovery and image discrimination. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 303-309, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: He shows genetic programming automatically enhancing an existing manually written OCR program so that it can be used with an additional font. It is perhaps on routine maintenance problems, such as this, that genetic programming will find most immediate commercial application. 2.3.2 Image and Signal Processing <ref> [Tac93] </ref> describes the use of genetic programming to extract targets from low contrast noisy pictures.
Reference: [Tel96] <author> Astro Teller. </author> <title> Evolving programmers: The co-evolution of intelligent recombination operators. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 3, </booktitle> <pages> pages 45-68. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: PDGP is a very flexible framework and has been demonstrated evolving solutions for symbolic regression, parity and artificial ant problems and evolving boolean logic networks, artificial neural networks, finite state automata, etc. [Pol96d, Pol96a, Pol96b, Pol97]. In a system called PADO <ref> [Tel96] </ref>, a new program representation was used to obtain parallel classification programs for signals and images. In PADO programs are made up of several groups of programs each group being used to recognise the instances of images of a given class.
Reference: [Tet96] <author> Andrea G. B. Tettamanzi. </author> <title> Genetic programming without fitness. </title> <editor> In John R. Koza, editor, </editor> <booktitle> Late Breaking Papers at the Genetic Programming 1996 Conference Stanford University July 28-31, </booktitle> <year> 1996, </year> <pages> pages 193-195, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> Stanford Bookstore. </publisher>
Reference-contexts: Investigation of better ways to assess program fitness (Section 2.2.3) * Dynamic fitness such as <ref> [Tet96] </ref>, LEF [GR97], RAT [TA97] and co-evolution [Sie94] * Measures aimed at reducing the size of the evolved programs [IdS94, ZM96]. 3. <p> In Naples as an approximate technique to overcome intractable space and time difficulties associated with some mathematical analysis [FCC + 97]. Work in Milan has concentrated on fitness functions <ref> [Tet96] </ref>. 3.9 Brussels The adaptive systems group at the Vrije Universiteit Brussel (VUB) and the IRIDIA group at Universite Libre de Bruxelles have long been interested in evolutionary computation and are increasingly interested in Genetic Programming particularly in data mining and autonomous robotics [DC97].
Reference: [TOD96] <author> Turton, Openshaw, and Diplock. </author> <title> Some geographic applications of genetic programming on the cray T3D supercomputer. </title> <editor> In Jesshope and Shafarenko, editors, </editor> <address> UK Parallel'96. </address> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: Like GAs, GP parallelises easily and can readily take advantage of a wide range of dedicated parallel processing architectures <ref> [TOD96, SS96, JP96, Ikr96, AK96, OCPT96] </ref>. There is also interest in parallel execution using networks of workstations (e.g. using PVM) and across the Internet using Java. Often GP (and GAs) are parallelised by splitting the population so different parts of it are run on different CPUs.
Reference: [WC97] <author> P. A. Whigham and P. F. Crapper. </author> <title> Applying genetic programming to model rainfall-runoff. CSIRO Land and Water, </title> <address> Canberra, Australia, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: Applications with both large and small data sets have been reported. Such models may help explain the process, be used for prediction, to optimise the process or control it. 3 The BioX system [BGMT95] has been used to model chemical engineering processes and river flows. <ref> [WC97] </ref> models river flows based on rain fall measurements. On a very seasonal Australian river GP provided a better model than a conventional modelling tool. [WHH + 97] shows their GP system can accurately model complex chemical engineering processes using only observed data.
Reference: [WHH + 97] <author> Mark Willis, Hugo Hiden, Mark Hinchliffe, Ben McKay, and Geoffrey W. Barton. </author> <title> Systems modelling using genetic programming. </title> <booktitle> Computers in Chemical Engineering, </booktitle> <address> 21:S1161-1166, </address> <year> 1997. </year> <month> Supplemental. </month>
Reference-contexts: On a very seasonal Australian river GP provided a better model than a conventional modelling tool. <ref> [WHH + 97] </ref> shows their GP system can accurately model complex chemical engineering processes using only observed data.
Reference: [ZKL96] <author> Byoung-Tak Zhang, Ju-Hyun Kwak, and Chang-Hoon Lee. </author> <title> Building software agents for information filtering on the internet: A genetic programming approach. </title> <editor> In John R. Koza, editor, </editor> <booktitle> Late Breaking Papers at the Genetic Programming 1996 Conference Stanford University July 28-31, </booktitle> <year> 1996, </year> <pages> page 196, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> Stanford Bookstore. </publisher>
Reference-contexts: While [LHL97] evolve mobile robot controllers using GP and a simulator but demonstrate the controller running on the physical robot. <ref> [Han94b, HWSS95, Iba96, Qur96, RD94, LS96, ZKL96] </ref> have applied evolved autonomous agents using genetic programming. 2.3.6 Artistic There have been a number of uses of genetic programming, perhaps inspired by Dawkins' biomorphs [Daw86] or Karl Sims' panspermia [Sim91], which generate patterns on a computer display.
Reference: [ZM96] <author> Byoung-Tak Zhang and Heinz Muhlenbein. </author> <title> Adaptive fitness functions for dynamic growing/pruning of program trees. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 12, </booktitle> <pages> pages 241-256. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year> <month> 18 </month>
Reference-contexts: Investigation of better ways to assess program fitness (Section 2.2.3) * Dynamic fitness such as [Tet96], LEF [GR97], RAT [TA97] and co-evolution [Sie94] * Measures aimed at reducing the size of the evolved programs <ref> [IdS94, ZM96] </ref>. 3. Measures to allow programs to be evolved from program modules and to simultaneously evolve the modules * Automatically defined functions (ADFs) [Koz94, KA95] * Module Acquisition (MA/GliB) [Ang94] and * Adaptive Representions through Learning (ARL) [RB96]. 4.
References-found: 99

