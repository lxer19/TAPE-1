URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr91/tr91-025.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr91-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: A Data Structure for Circular String Analysis and Visualization  
Author: Dinesh P. Mehta yz Sartaj Sahni 
Keyword: and Phrases: Circular strings, visualization, analysis, directed acyclic word graphs.  
Address: Gainesville, FL 32611  Minneapolis, MN 55455  
Affiliation: Dept. of Computer and Information Sciences, University of Florida,  Dept. of Computer Science, University of Minnesota,  
Note: This research was supported in part by the National Science Foundation under grant MIP 86-17374.  
Date: 25  
Pubnum: Technical Report  
Abstract: Circular strings are used to represent circular genomes in molecular biology, polygons in computer graphics and computational geometry, and closed curves in computer vision. In this paper we extend techniques which have so far been successfully applied to the analysis and visualization of linear strings to circular strings by defining a data structure for circular strings. Efficient (often optimal) algorithms that support these techniques are presented. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Clift, D. Haussler, T.D. Schneider, and G.D. </author> <title> Stormo , "Sequence Landscapes," </title> <journal> Nucleic Acids Research, </journal> <volume> vol. 14, no. 1, </volume> <pages> pp. 141-158, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction The circular string data type is used to represent a number of objects such as circular genomes, polygons, and closed curves. Research in molecular biology involves the identification of recurring patterns in data and hypothesizing about their causes and/or effects <ref> [1, 2] </ref>. Research in pattern recognition and computer vision involves detecting similarities within an object or between objects [3]. Detecting patterns visually is tedious and prone to error. In [4], a model was proposed to alleviate this problem. <p> ; D 2 ) or q (D 1 ; D 2 ) is greater than a statistically determined threshold, then the following could be be said with some confidence: Presence of D 1 implies presence of D 2 . 8 Applications Circular strings may be used to represent circular genomes <ref> [1] </ref> such as G4 and X 174. The detection and analysis of patterns in genomes helps to provide insights into the evolution, structure, and function of organisms. [1] analyzes G4 and X 174 by linearizing and then constructing their scdawg. Our work improves upon [1] by : (i) analyzing circular strings <p> some confidence: Presence of D 1 implies presence of D 2 . 8 Applications Circular strings may be used to represent circular genomes <ref> [1] </ref> such as G4 and X 174. The detection and analysis of patterns in genomes helps to provide insights into the evolution, structure, and function of organisms. [1] analyzes G4 and X 174 by linearizing and then constructing their scdawg. Our work improves upon [1] by : (i) analyzing circular strings without risking the "loss" of patterns. (ii) extending the analysis and visualization techniques of [5] for linear strings to circular strings. 33 Circular strings in the form <p> be used to represent circular genomes <ref> [1] </ref> such as G4 and X 174. The detection and analysis of patterns in genomes helps to provide insights into the evolution, structure, and function of organisms. [1] analyzes G4 and X 174 by linearizing and then constructing their scdawg. Our work improves upon [1] by : (i) analyzing circular strings without risking the "loss" of patterns. (ii) extending the analysis and visualization techniques of [5] for linear strings to circular strings. 33 Circular strings in the form of chain codes are also used to represent closed curves in computer vision [11].
Reference: [2] <author> G.M. </author> <title> Morris , "The Matching of Protein Sequences using Color Intrasequence Homology Displays," </title> <journal> J. Mol. Graphics, </journal> <volume> vol. 6, </volume> <pages> pp. 135-142, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction The circular string data type is used to represent a number of objects such as circular genomes, polygons, and closed curves. Research in molecular biology involves the identification of recurring patterns in data and hypothesizing about their causes and/or effects <ref> [1, 2] </ref>. Research in pattern recognition and computer vision involves detecting similarities within an object or between objects [3]. Detecting patterns visually is tedious and prone to error. In [4], a model was proposed to alleviate this problem.
Reference: [3] <author> S.L. Tanimoto, </author> <title> "A method for detecting structure in polygons," </title> <journal> Pattern Recognition, </journal> <volume> vol. 13, no. 6, </volume> <pages> pp. 389-394, </pages> <year> 1981. </year>
Reference-contexts: Research in molecular biology involves the identification of recurring patterns in data and hypothesizing about their causes and/or effects [1, 2]. Research in pattern recognition and computer vision involves detecting similarities within an object or between objects <ref> [3] </ref>. Detecting patterns visually is tedious and prone to error. In [4], a model was proposed to alleviate this problem. <p> Techniques for linear strings may then be applied to it. However, this has the disadvantage that some significant patterns in the circular string may be lost because the patterns were broken when linearizing the string. Indeed, this would defeat the purpose of representing objects by circular strings. <ref> [3] </ref> defined a polygon structure graph, which is an extension of suffix trees to circular strings. However, the suffix tree is not as powerful as the scdawg and cannot be used to solve some of the problems that the scdawg can solve. <p> Information on other common segments would also be available. The techniques of this paper make it possible to detect all patterns irrespective of the starting pixels chosen for the two ob jects. Circular strings may also be used to represent polygons in computer graphics and computational geometry <ref> [3] </ref>. Figure 19 shows a polygon which is represented by the following alternating sequence of lines and angles: bfiaffeffeffcficfiefiaffeffeffcficfibffcffdffcff, where ff denotes a 90 degree angle and fi, a 270 degree angle.
Reference: [4] <author> D. Mehta and S. Sahni, </author> <title> "String Visualization," </title> <note> In Preparation, </note> <year> 1991. </year>
Reference-contexts: Research in molecular biology involves the identification of recurring patterns in data and hypothesizing about their causes and/or effects [1, 2]. Research in pattern recognition and computer vision involves detecting similarities within an object or between objects [3]. Detecting patterns visually is tedious and prone to error. In <ref> [4] </ref>, a model was proposed to alleviate this problem. The model consists of identifying all recurring patterns in a string and highlighting identical patterns in the same color. [4] also listed a number of queries that the model would support. <p> Detecting patterns visually is tedious and prone to error. In <ref> [4] </ref>, a model was proposed to alleviate this problem. The model consists of identifying all recurring patterns in a string and highlighting identical patterns in the same color. [4] also listed a number of queries that the model would support. In [5], efficient (mostly optimal) algorithms were proposed for some of these queries for linear strings. These algorithms perform operations and traversals on the symmetric compact directed acyclic word graph (scdawg) [6] of the linear string. <p> But, jocc (T ; v)j 2jocc (s; v)j, where jocc (s; v)j is the number of occurrences of de (v) in s. So, the complexity is O (jocc (s; v)j). jocc (s; v)j is the size of the output, so the algorithm is optimal. 2 6 Computing Conflicts Efficiently <ref> [4] </ref> defines the concept of conflicts and explains its importance in the analysis and visualization of strings. <p> The string, S m is known as the intersection of the conflict; the conflict is said to occur between D 1 and D 2 with respect to S m . <ref> [4] </ref> also identified a number of problems relating to the computation of conflicts in a linear string, while [5] presented efficient algorithms for most of these problems (some of which are listed in the next section). These algorithms typically involve sophisticated traversals or operations on the scdawg for linear strings.
Reference: [5] <author> D. Mehta and S. Sahni, </author> <title> "Computing Display Conflicts in String Visualization," </title> <note> Submitted for journal publication, </note> <year> 1991. </year>
Reference-contexts: In [4], a model was proposed to alleviate this problem. The model consists of identifying all recurring patterns in a string and highlighting identical patterns in the same color. [4] also listed a number of queries that the model would support. In <ref> [5] </ref>, efficient (mostly optimal) algorithms were proposed for some of these queries for linear strings. These algorithms perform operations and traversals on the symmetric compact directed acyclic word graph (scdawg) [6] of the linear string. <p> However, the suffix tree is not as powerful as the scdawg and cannot be used to solve some of the problems that the scdawg can solve. In this paper, we define an scdawg for circular strings. Algorithms in <ref> [5] </ref> and [6] which make use of the scdawg for linear strings can then be extended to circular strings with minor modifications. The extended algorithms continue to have the same efficient time and space complexities. <p> These properties ensure that the algorithms of <ref> [5] </ref> can be extended to circular strings. P 1: C V (s) consists of a source and a sink. <p> The string, S m is known as the intersection of the conflict; the conflict is said to occur between D 1 and D 2 with respect to S m . [4] also identified a number of problems relating to the computation of conflicts in a linear string, while <ref> [5] </ref> presented efficient algorithms for most of these problems (some of which are listed in the next section). These algorithms typically involve sophisticated traversals or operations on the scdawg for linear strings. <p> Our extension of scdawgs to circular strings makes it possible to use the same algorithms to solve the corresponding problems for circular strings with some minor modifications which are outlined below. There are conceptually two kinds of traversals that the algorithms of <ref> [5] </ref> perform on an scdawg corresponding to a linear string: (i) Traversal of displayable entities of the string. In these traversals, a vertex is traversed specifically because it represents a displayable entity of the string. (ii) Incidental traversals. <p> Type (i) traversals check the bit, while type (ii) traversals ignore it. Finally, all calls to LinearOccurrences are replaced by calls to CircOccurrences. 31 7 Other Queries In this section, we list queries that a system for the visualization and analysis of circular strings would support. <ref> [5] </ref> contains algorithms for these same queries for linear strings. In the previous section, we showed how these algorithms could be modified to support these queries. Size Restricted Queries: Experimental data show that random strings contain a large number of displayable entities whose lengths are small. <p> Our work improves upon [1] by : (i) analyzing circular strings without risking the "loss" of patterns. (ii) extending the analysis and visualization techniques of <ref> [5] </ref> for linear strings to circular strings. 33 Circular strings in the form of chain codes are also used to represent closed curves in computer vision [11]. The objects of Figure 18 (a) are represented in chain code as follows: (1) Arbitrarily choose a pixel through which the curve passes. <p> Objects 1 and 2 are represented by 1122102243244666666666 and 666666661122002242242446 respectively. The alphabet is f0, 1, 2, 3, 4, 5, 6, 7g which is fixed and of constant size (8) and therefore satisfies the condition of Section 2. We may now use the visualization techniques of <ref> [5] </ref> to compare the two ob jects. For example, our methods would show that ob jects 1 and 2 share the segments S1 and S2 (Figure 18 (c)) corresponding to 0224 and 2446666666661122 respectively. Information on other common segments would also be available.
Reference: [6] <author> A. Blumer, J. Blumer, D. Haussler, R. McConnell, and A. Ehrenfeucht, </author> <title> "Complete Inverted Files for Efficient Text Retrieval and Analysis," </title> <journal> J. ACM, </journal> <volume> vol. 34, no. 3, </volume> <pages> pp. 578-595, </pages> <year> 1987. </year>
Reference-contexts: In [5], efficient (mostly optimal) algorithms were proposed for some of these queries for linear strings. These algorithms perform operations and traversals on the symmetric compact directed acyclic word graph (scdawg) <ref> [6] </ref> of the linear string. The scdawg, which is used to represent a string or a set of strings, evolved from other string data structures such as position trees, suffix trees, directed acyclic word graphs, etc [7, 8, 9, 10]. <p> However, the suffix tree is not as powerful as the scdawg and cannot be used to solve some of the problems that the scdawg can solve. In this paper, we define an scdawg for circular strings. Algorithms in [5] and <ref> [6] </ref> which make use of the scdawg for linear strings can then be extended to circular strings with minor modifications. The extended algorithms continue to have the same efficient time and space complexities. <p> In the example, succ (S,cde) = f1,f g. So, the number of right edges leaving the vertex corresponding to it is 1. The space required for SC D (S ) is O (n) and the time needed to construct it is O (n) <ref> [7, 6] </ref>. While we have defined the scdawg data structure for a single string, it can be extended to represent a set of strings [6]. 6 4 Extension to Circular Strings In Section 4.1, we present a constructive definition of an scdawg for circular strings. <p> The space required for SC D (S ) is O (n) and the time needed to construct it is O (n) [7, 6]. While we have defined the scdawg data structure for a single string, it can be extended to represent a set of strings <ref> [6] </ref>. 6 4 Extension to Circular Strings In Section 4.1, we present a constructive definition of an scdawg for circular strings. <p> The traversal of the chain terminates either when the source is reached or a vertex with more than one re out edge is encountered (Lemma 3 (b)). Similarly, step 2 (b) identifies all prefix redundant vertices in V (T ). 4.2 Complexity Analysis Step 1 takes O (n) time <ref> [6] </ref>. Step 2 will in the worst case traverse all the vertices in S C D (T ) spending O (1) time at each. The number of vertices is bounded by O (n) [6]. So, step 2 takes O (n) time. Step 3 traverses S C D (T ). <p> all prefix redundant vertices in V (T ). 4.2 Complexity Analysis Step 1 takes O (n) time <ref> [6] </ref>. Step 2 will in the worst case traverse all the vertices in S C D (T ) spending O (1) time at each. The number of vertices is bounded by O (n) [6]. So, step 2 takes O (n) time. Step 3 traverses S C D (T ). <p> Note, however, that any incoming prefix/suffix extension edges to v will no longer remain prefix/suffix extension edges as xfl and fiy are not nil. 2 5 Computing Occurrences of Displayable Entities Procedure LinearOccurrences (S; v) of Figure 14, which is based on the outline in <ref> [6] </ref>, reports the end position of each occurrence of de (v), v * V (S ), in the linear string S . However, invoking LinearOccurrences (T ; v), v * C V (s), does not immediately yield all occurrences of de (v) in T .
Reference: [7] <author> A. Blumer, J. Blumer, D. Haussler, A. Ehrenfeucht, M.T. Chen, J. Seiferas, </author> <title> "The Smallest Automaton Recognizing the Subwords of a Text," </title> <journal> Theoretical Computer Science, </journal> <volume> no. 40, </volume> <pages> pp. 31-55, </pages> <year> 1985. </year>
Reference-contexts: The scdawg, which is used to represent a string or a set of strings, evolved from other string data structures such as position trees, suffix trees, directed acyclic word graphs, etc <ref> [7, 8, 9, 10] </ref>. One approach for extending these techniques to circular strings is to arbitrarily break the circular string at some point so that it becomes a linear string. Techniques for linear strings may then be applied to it. <p> In the example, succ (S,cde) = f1,f g. So, the number of right edges leaving the vertex corresponding to it is 1. The space required for SC D (S ) is O (n) and the time needed to construct it is O (n) <ref> [7, 6] </ref>. While we have defined the scdawg data structure for a single string, it can be extended to represent a set of strings [6]. 6 4 Extension to Circular Strings In Section 4.1, we present a constructive definition of an scdawg for circular strings.
Reference: [8] <author> M. E. Ma jster and A. Reiser, </author> <title> "Efficient on-line construction and correction of position trees," </title> <journal> SIAM Journal on Computing, </journal> <volume> vol. 9, </volume> <pages> pp. 785-807, </pages> <month> Nov. </month> <year> 1980. </year> <month> 36 </month>
Reference-contexts: The scdawg, which is used to represent a string or a set of strings, evolved from other string data structures such as position trees, suffix trees, directed acyclic word graphs, etc <ref> [7, 8, 9, 10] </ref>. One approach for extending these techniques to circular strings is to arbitrarily break the circular string at some point so that it becomes a linear string. Techniques for linear strings may then be applied to it.
Reference: [9] <author> E. McCreight, </author> <title> "A space-economical suffix tree construction algorithm," </title> <journal> Journal of the ACM, </journal> <volume> vol. 23, </volume> <pages> pp. 262-272, </pages> <month> Apr. </month> <year> 1976. </year>
Reference-contexts: The scdawg, which is used to represent a string or a set of strings, evolved from other string data structures such as position trees, suffix trees, directed acyclic word graphs, etc <ref> [7, 8, 9, 10] </ref>. One approach for extending these techniques to circular strings is to arbitrarily break the circular string at some point so that it becomes a linear string. Techniques for linear strings may then be applied to it.
Reference: [10] <author> M. T. Chen and Joel Seiferas, </author> <title> "Efficient and elegant subword tree construction," in Combinatorial Algorithms on Words (A. </title> <editor> Apostolico and Z. Galil, eds.), </editor> <booktitle> NATO ASI Series, </booktitle> <volume> Vol. F12, </volume> <pages> pp. 97-107, </pages> <address> Berlin Heidelberg: </address> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: The scdawg, which is used to represent a string or a set of strings, evolved from other string data structures such as position trees, suffix trees, directed acyclic word graphs, etc <ref> [7, 8, 9, 10] </ref>. One approach for extending these techniques to circular strings is to arbitrarily break the circular string at some point so that it becomes a linear string. Techniques for linear strings may then be applied to it.
Reference: [11] <author> R. Gonzalez, P. Wintz, </author> <title> Digital Image Processing, 2nd Edition. </title> <publisher> Addison Wesley, </publisher> <year> 1987. </year> <month> 37 </month>
Reference-contexts: work improves upon [1] by : (i) analyzing circular strings without risking the "loss" of patterns. (ii) extending the analysis and visualization techniques of [5] for linear strings to circular strings. 33 Circular strings in the form of chain codes are also used to represent closed curves in computer vision <ref> [11] </ref>. The objects of Figure 18 (a) are represented in chain code as follows: (1) Arbitrarily choose a pixel through which the curve passes.
References-found: 11

