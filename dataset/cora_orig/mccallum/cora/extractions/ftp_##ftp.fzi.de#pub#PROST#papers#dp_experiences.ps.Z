URL: ftp://ftp.fzi.de/pub/PROST/papers/dp_experiences.ps.Z
Refering-URL: http://www.fzi.de/prost/publications/overview.html
Root-URL: http://www.fzi.de
Email: email: zimmer@fzi.de  
Title: Experiences using Design Patterns to Reorganize an Object-Oriented Application  
Author: Walter Zimmer 
Address: Haid-und-Neu-Strasse 10-14, D-76131 Karlsruhe, Germany  
Affiliation: Forschungszentrum Informatik, Bereich Programmstrukturen  
Abstract: Most current object-oriented design techniques and approaches focus on the new development of a software system, without regarding the reorganization of existing systems at all. But many people point out, that after the initial design and implementation of an object-oriented system, the system must often be reorganized in order to get a cleaner design which is easier to understand, modify and extend. This paper presents experiences in the reorganization process of a hypermedia application, in which the new design pattern approach [Gamm93] was extensively used. 
Abstract-found: 1
Intro-found: 1
Reference: [App89] <institution> Apple Computer, Cupertino, California. Inc. </institution> <note> Macintosh Programmers Workshop Pascal 3.0 Reference, </note> <year> 1989. </year>
Reference-contexts: The goal of EMN is to integrate modern information technology and the cultural world. In the following text, the existing system is called EMN or the (hypermedia) application. The application was developed on top of MacApp, a framework for developing interactive applications on the Macintosh <ref> [App89] </ref>. The application consists of about 50 classes. The extension and maintenance of the existing application revealed deficiencies in the design and implementation, which became starting points for the later reorganization.
Reference: [Beck93] <author> K. Beck. </author> <title> Patterns and software development. </title> <journal> Dr. Dobbs Journal, </journal> <volume> 19(2):1823, </volume> <year> 1993. </year>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, because they address the aforementioned problems, especially in object-oriented systems (cf. <ref> [Beck93] </ref>, [Beck94], [Gamm93], [Gamm94], [Coad93], [Copl91], [Copl94], [Shaw91], [John92], [Busc93], [Pree94]). Design patterns are reusable micro-architectures, which frequently occur in object-oriented systems. 1 The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate with each other more effectively.
Reference: [Beck94] <author> K. Beck and R. Johnson. </author> <title> Patterns generate architecture. </title> <booktitle> In Proceedings of ECOOP94, </booktitle> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, because they address the aforementioned problems, especially in object-oriented systems (cf. [Beck93], <ref> [Beck94] </ref>, [Gamm93], [Gamm94], [Coad93], [Copl91], [Copl94], [Shaw91], [John92], [Busc93], [Pree94]). Design patterns are reusable micro-architectures, which frequently occur in object-oriented systems. 1 The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate with each other more effectively.
Reference: [Busc93] <author> F. Buschmann. </author> <title> Rational architectures for object-oriented software systems. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 6(5):3041, </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, because they address the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], [Gamm93], [Gamm94], [Coad93], [Copl91], [Copl94], [Shaw91], [John92], <ref> [Busc93] </ref>, [Pree94]). Design patterns are reusable micro-architectures, which frequently occur in object-oriented systems. 1 The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate with each other more effectively.
Reference: [Casa92] <author> Eduardo Casais. </author> <title> An incremental class reorganization approach. </title> <editor> In O. Lehrmann Madsen, editor, </editor> <booktitle> Proceedings ECOOP 92, </booktitle> <volume> LNCS 615, </volume> <pages> pages 114132, </pages> <address> Utrecht, The Netherlands, July 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Although the design process is iterative, and reorganization is a frequent task in most object-oriented systems <ref> [Casa92] </ref> [Opdy90] [Opdy92], current methods and tools concentrate on the development of new systems. In contrast to this, we wanted to explore how the reorganization of applications can be supported by using design pattern in combination with other existing design approaches. <p> In [Coad93], several design patterns were combined into an exemplary application, but the relationships were not investigated any further. [Zimm94] organized the relationships between Experiences using Design Patterns to Reorganize an Object-Oriented Application 7 design patterns into different categories, and derived an arrangement of the design patterns into different layers. <ref> [Casa92] </ref> and [Opdy92] presented interesting reorganization approaches and techniques. Unfortunately, no tool support is offered for either. 7. Experiences This section summarizes the experiences gained in the reorganization process.
Reference: [Chid91] <author> Shyam R. Chidamber and Chris F. Kemerer. </author> <title> Towards a metrics suite for object oriented design. </title> <booktitle> In Proceedings OOPSLA 91, </booktitle> <pages> pages 197211, </pages> <month> November </month> <year> 1991. </year> <journal> Published as ACM SIGPLAN Notices, </journal> <volume> volume 26, number 11. </volume>
Reference-contexts: They provided an efficient way to foresee deficiencies of the design / implementation and to design application parts which are generic. Design patterns accelerated this process by providing larger, well-designed building blocks. 3.2.3 Metrics / design rules Many design quality metrics <ref> [Chid91] </ref> are derived from design rules as described in [John88]; for example Number of methods is derived from Small class size. <p> Firstly, the catalogue contains a list of deficiencies (called reuse errors) together with design patterns which address these deficiencies. Furthermore, each design pattern description comprises a section Consequences where these issues are discussed in detail. For example, if a design metric for the coupling of objects (called CBO in <ref> [Chid91] </ref>) indicates a strong coupling, then the design pattern catalogue provides two design patterns which address this issue (called Dependence on inter-object relationships in [Gamm94]): Facade and Mediator. 4.2 Restructuring and documentation After having explored several alternatives and having decided to apply certain design patterns, one must actually reorganize the system.
Reference: [Coad93] <author> P. Coad. </author> <title> Object-oriented patterns. </title> <journal> Communications of the ACM, </journal> <volume> 35(9):153159, </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, because they address the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], [Gamm93], [Gamm94], <ref> [Coad93] </ref>, [Copl91], [Copl94], [Shaw91], [John92], [Busc93], [Pree94]). Design patterns are reusable micro-architectures, which frequently occur in object-oriented systems. 1 The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate with each other more effectively. <p> Related work This work is based on [Gamm93] and on a preliminary version of [Gamm94]. [Lajo94] also used the RDD method together with design patterns and refined the RDD method. Their results look promising too. In <ref> [Coad93] </ref>, several design patterns were combined into an exemplary application, but the relationships were not investigated any further. [Zimm94] organized the relationships between Experiences using Design Patterns to Reorganize an Object-Oriented Application 7 design patterns into different categories, and derived an arrangement of the design patterns into different layers. [Casa92] and
Reference: [Copl91] <author> J. Coplien. </author> <title> Advanced C++: Programming Styles and Idioms. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, because they address the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], [Gamm93], [Gamm94], [Coad93], <ref> [Copl91] </ref>, [Copl94], [Shaw91], [John92], [Busc93], [Pree94]). Design patterns are reusable micro-architectures, which frequently occur in object-oriented systems. 1 The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate with each other more effectively.
Reference: [Copl94] <author> J.O. Coplien. </author> <title> Generative pattern languages: An emerging direction of software design. </title> <type> Technical report, </type> <year> 1994. </year>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, because they address the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], [Gamm93], [Gamm94], [Coad93], [Copl91], <ref> [Copl94] </ref>, [Shaw91], [John92], [Busc93], [Pree94]). Design patterns are reusable micro-architectures, which frequently occur in object-oriented systems. 1 The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate with each other more effectively.
Reference: [Gamm93] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides. </author> <title> Design patterns: Abstraction and reuse in object-oriented designs. </title> <editor> In O. Nierstrasz, editor, </editor> <booktitle> Proceedings of ECOOP93, </booktitle> <pages> pages 406431, </pages> <address> Berlin, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, because they address the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], <ref> [Gamm93] </ref>, [Gamm94], [Coad93], [Copl91], [Copl94], [Shaw91], [John92], [Busc93], [Pree94]). Design patterns are reusable micro-architectures, which frequently occur in object-oriented systems. 1 The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate with each other more effectively. <p> In this paper, the following issues will be addressed: How do design patterns inuence the reorganization process? Which reorganization steps are most useful? 1. A good introductory paper for design patterns is <ref> [Gamm93] </ref>. Experiences using Design Patterns to Reorganize an Object-Oriented Application 2 Which design approaches, techniques and notations are adequate in the different phases of the reorganization process? How are these approaches interrelated? The next section introduces the hypermedia application which was reorganized and the goals of the reorganization. <p> In order to reduce the effort, we focused on the reorganization of central classes (doc Experiences using Design Patterns to Reorganize an Object-Oriented Application 3 uments, links, database interface, hierarchical structures) and did not realize all implementation details. The design pattern catalogue described in <ref> [Gamm93] </ref> and [Gamm94] 1 was used, as we found this catalogue to be the most comprehensive collection of well-described design patterns available currently. 3. <p> The resulting design was documented in the following way: Incorporate the names of the classes appearing in the design pattern to the corresponding classes in the application, for example LinkStrategy or HyperMediaDeco-rator. This simple naming strategy (suggested in <ref> [Gamm93] </ref>) provides the reader with references to the documentation of the applied design pattern. Thereby, existing documentation is reused, and only differing, application specific design decisions have to be documented. Although this naming strategy is very useful, it has also some limitations. <p> The focus of process. Some things have been added for completeness and comprehensibility. A labelled, directed arrow with source S and target T is read as S label T, for example Design patterns (S) serve as goals for (label) reorganization (T). 6. Related work This work is based on <ref> [Gamm93] </ref> and on a preliminary version of [Gamm94]. [Lajo94] also used the RDD method together with design patterns and refined the RDD method. Their results look promising too.
Reference: [Gamm94] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides. </author> <title> Design Pattern. Addison-Wesley, </title> <note> To Appear, </note> <year> 1994. </year>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, because they address the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], [Gamm93], <ref> [Gamm94] </ref>, [Coad93], [Copl91], [Copl94], [Shaw91], [John92], [Busc93], [Pree94]). Design patterns are reusable micro-architectures, which frequently occur in object-oriented systems. 1 The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate with each other more effectively. <p> In order to reduce the effort, we focused on the reorganization of central classes (doc Experiences using Design Patterns to Reorganize an Object-Oriented Application 3 uments, links, database interface, hierarchical structures) and did not realize all implementation details. The design pattern catalogue described in [Gamm93] and <ref> [Gamm94] </ref> 1 was used, as we found this catalogue to be the most comprehensive collection of well-described design patterns available currently. 3. <p> Therefore, the RDD method, which focuses on responsibilities of classes/subsystems and their collaborations, was used. A further reason for choosing the RDD method was, that the descriptions of the design patters in the catalogue <ref> [Gamm94] </ref> also use the RDD notation to describe their behavior. 3.2 Finding points to start the reorganization This section comprises some approaches which were useful for us in finding points to begin reorganizing the application. <p> The usage of the other approaches described in Section 3 uncovered critical application parts with their deficiencies, but it did not directly show which design patterns to apply to solve these problems. The catalogue 1 of design patterns <ref> [Gamm94] </ref> supported in two ways the search for adequate design patterns. Firstly, the catalogue contains a list of deficiencies (called reuse errors) together with design patterns which address these deficiencies. Furthermore, each design pattern description comprises a section Consequences where these issues are discussed in detail. <p> For example, if a design metric for the coupling of objects (called CBO in [Chid91]) indicates a strong coupling, then the design pattern catalogue provides two design patterns which address this issue (called Dependence on inter-object relationships in <ref> [Gamm94] </ref>): Facade and Mediator. 4.2 Restructuring and documentation After having explored several alternatives and having decided to apply certain design patterns, one must actually reorganize the system. [Opdy92] showed, that the automation of even simple restructuring operations (for instance generalization/specialization of inheritance hierarchy), which preserve the behaviour, is complex. <p> The design documentation of the reorganized hypermedia application is rather short, and it supposes that the reader has a good knowledge of the general object-oriented design concepts, the underlying framework MacApp and the design pattern catalogue <ref> [Gamm94] </ref>. 5. Relationships between design patterns and other areas of object-oriented software development areas, methods or techniques in the field of object-oriented software development. The focus of process. Some things have been added for completeness and comprehensibility. <p> A labelled, directed arrow with source S and target T is read as S label T, for example Design patterns (S) serve as goals for (label) reorganization (T). 6. Related work This work is based on [Gamm93] and on a preliminary version of <ref> [Gamm94] </ref>. [Lajo94] also used the RDD method together with design patterns and refined the RDD method. Their results look promising too. <p> The granularity level of the communication (discussion and documentation) has risen from classes, methods, inheritance and component relationships to micro-architectures composed of these object-oriented basic elements. In our opinion, the existence of a common vocabulary is the main advantage of design patterns. Although the design patterns that were used <ref> [Gamm94] </ref> are well-designed and -described, sometimes an (informal) description was interpreted differently, or the difference between two patterns could not be clearly defined. <p> Hypertext tools for documenting design patterns and applications. Analysis tools based on metrics which uncover design aws and suggests improvements (design rules / design patterns). Appropriate visualisation techniques [Pauw93] are also an important aspect. In spite of all the unsolved problems, the design approach and the excellent catalogue <ref> [Gamm94] </ref> have proven to be very useful. The design pattern approach is mature enough to in crease the productivity of object-oriented software development.
Reference: [Jaco92] <author> Ivar Jacobson, Magnus Christerson, Patrik Jonsson, and Gunnar Overgaard. </author> <title> Object-Oriented Software Engineering A Use Case Driven Approach. </title> <publisher> Addison-Wesley/ACM Press, </publisher> <year> 1992. </year>
Reference-contexts: Besides using these known weaknesses as starting points for reorganization, several scenarios for future usages were developed and analysed (similar to the Use Cases described in <ref> [Jaco92] </ref>). They provided an efficient way to foresee deficiencies of the design / implementation and to design application parts which are generic.
Reference: [John88] <author> Ralph Johnson. </author> <title> TS: AN optimizing compiler for smalltalk. </title> <booktitle> In Proceedings OOPSLA 88, </booktitle> <pages> pages 1826, </pages> <month> November </month> <year> 1988. </year> <journal> Published as ACM SIGPLAN Notices, </journal> <volume> volume 23, number 11. </volume>
Reference-contexts: Design patterns accelerated this process by providing larger, well-designed building blocks. 3.2.3 Metrics / design rules Many design quality metrics [Chid91] are derived from design rules as described in <ref> [John88] </ref>; for example Number of methods is derived from Small class size. <p> Tools to support the developer during this error-prone detail work are not available. A good approach to reduce the complexity of this process is to break the reorganization into smaller steps. Firstly, simple restructuring operations, as described in <ref> [John88] </ref> [Opdy92], are applied. Secondly, applications classes are identified which correspond to the classes in the cho 1. The current catalogue is considerably better (naming, discussion of consequences, examples) than the one used during the reorganization process dated from 5/93. The overview about reuse-errors and corre sponding design-patterns was added. <p> It requires a good knowledge of design patterns. Furthermore, the learning and usage of design patterns requires a fair knowledge about object-oriented modelling techniques and rules for good object-oriented design as described in <ref> [John88] </ref> [Lieb88] [Lieb89]. In order to reduce the complexity of the reorganization task, sometimes parts of the application were reorganized according to general design rules, before the design pattern was applied.
Reference: [John92] <author> R. Johnson. </author> <title> Documenting frameworks using patterns. </title> <booktitle> In Proceedings of OOPSLA92, volume 27 of ACM SIGPLAN Notices, </booktitle> <pages> pages 6376, </pages> <address> Vancouver, B.C., Canada, </address> <month> October </month> <year> 1992. </year> <note> ACM Press. </note>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, because they address the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], [Gamm93], [Gamm94], [Coad93], [Copl91], [Copl94], [Shaw91], <ref> [John92] </ref>, [Busc93], [Pree94]). Design patterns are reusable micro-architectures, which frequently occur in object-oriented systems. 1 The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate with each other more effectively.
Reference: [Krol93] <author> Armin Kroll. Anwendung von Design-Mustern zur Reorganisation einer Multimedia-Anwendung, </author> <month> July </month> <year> 1993. </year> <pages> Studienarbeit. </pages>
Reference-contexts: Typical examples were the strong coupling of database classes with application classes, and large, over-specialized classes which could not be reused in other applications. 2.2 Goals of the reorganization The overall goal of the reorganization <ref> [Krol93] </ref> was to generalize and partially extend the EMN in order to get rid of the aforementioned shortcomings.
Reference: [Lajo94] <author> Richard Lajoie and Rudolf K. Keller. </author> <title> Design and reuse in object-oriented frameworks: Patterns, contracts, and motifs in concert. </title> <booktitle> In Proceedings of the 62nd Congress of the Association Cana-dienne Francaise pour lAvancement des Sciences (ACFAS), </booktitle> <month> May </month> <year> 1994. </year> <title> to appear. Experiences using Design Patterns to Reorganize an Object-Oriented Application 10 </title>
Reference-contexts: A labelled, directed arrow with source S and target T is read as S label T, for example Design patterns (S) serve as goals for (label) reorganization (T). 6. Related work This work is based on [Gamm93] and on a preliminary version of [Gamm94]. <ref> [Lajo94] </ref> also used the RDD method together with design patterns and refined the RDD method. Their results look promising too.
Reference: [Lieb88] <author> Karl J. Lieberherr, Ian M. Holland, and Arthur Riel. </author> <title> Object-oriented programming: An objective sense of style. </title> <booktitle> In Proceedings OOPSLA 88, </booktitle> <pages> pages 323334, </pages> <month> November </month> <year> 1988. </year> <journal> Published as ACM SIGPLAN Notices, </journal> <volume> volume 23, number 11. </volume>
Reference-contexts: It requires a good knowledge of design patterns. Furthermore, the learning and usage of design patterns requires a fair knowledge about object-oriented modelling techniques and rules for good object-oriented design as described in [John88] <ref> [Lieb88] </ref> [Lieb89]. In order to reduce the complexity of the reorganization task, sometimes parts of the application were reorganized according to general design rules, before the design pattern was applied. The design of important abstractions in the application domain (links, documents) often requires the combination of several, interrelated design patterns.
Reference: [Lieb89] <author> Karl J. Lieberherr and Arthur J. Riel. </author> <title> Contributions to teaching object oriented design and programming. </title> <booktitle> In Proceedings OOPSLA 89, </booktitle> <pages> pages 1122, </pages> <month> October </month> <year> 1989. </year> <journal> Published as ACM SIGP-LAN Notices, </journal> <volume> volume 24, number 10. </volume>
Reference-contexts: It requires a good knowledge of design patterns. Furthermore, the learning and usage of design patterns requires a fair knowledge about object-oriented modelling techniques and rules for good object-oriented design as described in [John88] [Lieb88] <ref> [Lieb89] </ref>. In order to reduce the complexity of the reorganization task, sometimes parts of the application were reorganized according to general design rules, before the design pattern was applied. The design of important abstractions in the application domain (links, documents) often requires the combination of several, interrelated design patterns.
Reference: [Opdy90] <author> William F. Opdyke and Ralph E. Johnson. </author> <title> Refactoring: An aid in designing application frameworks and evolving object-oriented systems. </title> <booktitle> In Proceedings of Symposium on Object-Oriented Programming Emphasizing Practical Applications (SOOPPA), </booktitle> <year> 1990. </year>
Reference-contexts: Although the design process is iterative, and reorganization is a frequent task in most object-oriented systems [Casa92] <ref> [Opdy90] </ref> [Opdy92], current methods and tools concentrate on the development of new systems. In contrast to this, we wanted to explore how the reorganization of applications can be supported by using design pattern in combination with other existing design approaches.
Reference: [Opdy92] <author> William F. Opdyke. </author> <title> Refacoring Object-Oriented Frameworks. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1992. </year>
Reference-contexts: Although the design process is iterative, and reorganization is a frequent task in most object-oriented systems [Casa92] [Opdy90] <ref> [Opdy92] </ref>, current methods and tools concentrate on the development of new systems. In contrast to this, we wanted to explore how the reorganization of applications can be supported by using design pattern in combination with other existing design approaches. <p> indicates a strong coupling, then the design pattern catalogue provides two design patterns which address this issue (called Dependence on inter-object relationships in [Gamm94]): Facade and Mediator. 4.2 Restructuring and documentation After having explored several alternatives and having decided to apply certain design patterns, one must actually reorganize the system. <ref> [Opdy92] </ref> showed, that the automation of even simple restructuring operations (for instance generalization/specialization of inheritance hierarchy), which preserve the behaviour, is complex. Tools to support the developer during this error-prone detail work are not available. <p> Tools to support the developer during this error-prone detail work are not available. A good approach to reduce the complexity of this process is to break the reorganization into smaller steps. Firstly, simple restructuring operations, as described in [John88] <ref> [Opdy92] </ref>, are applied. Secondly, applications classes are identified which correspond to the classes in the cho 1. The current catalogue is considerably better (naming, discussion of consequences, examples) than the one used during the reorganization process dated from 5/93. The overview about reuse-errors and corre sponding design-patterns was added. <p> several design patterns were combined into an exemplary application, but the relationships were not investigated any further. [Zimm94] organized the relationships between Experiences using Design Patterns to Reorganize an Object-Oriented Application 7 design patterns into different categories, and derived an arrangement of the design patterns into different layers. [Casa92] and <ref> [Opdy92] </ref> presented interesting reorganization approaches and techniques. Unfortunately, no tool support is offered for either. 7. Experiences This section summarizes the experiences gained in the reorganization process. Although the different reorganization steps were presented in a sequential order, the reorganization process is iterative and the different steps are highly interwoven.
Reference: [Pauw93] <author> Wim De Pauw, Richard Helm, Doug Kimelman, and John Vlissides. </author> <title> Visualizing the behavior of object-oriented systems. </title> <booktitle> In Proceedings OOPSLA 93, ACM SIGPLAN Notices, </booktitle> <pages> pages 326337, </pages> <month> October </month> <year> 1993. </year> <title> Published as Proceedings OOPSLA 93, </title> <journal> ACM SIGPLAN Notices, </journal> <volume> volume 28, number 10. </volume>
Reference-contexts: In our opinion, results of metrics applied to a class or a library must not consist of a simple good or bad rating (or a rating like 1.97), but they should point out possible faults and point to appropriate solutions. Of course, powerful visualisation tools like those described in <ref> [Pauw93] </ref> can assist the developer in analysing the metrics results. <p> Hypertext tools for documenting design patterns and applications. Analysis tools based on metrics which uncover design aws and suggests improvements (design rules / design patterns). Appropriate visualisation techniques <ref> [Pauw93] </ref> are also an important aspect. In spite of all the unsolved problems, the design approach and the excellent catalogue [Gamm94] have proven to be very useful. The design pattern approach is mature enough to in crease the productivity of object-oriented software development.
Reference: [Pree94] <author> W. Pree. Meta-patterns: </author> <title> A means for describing the essentials of reusable o-o design. </title> <booktitle> In Proceedings of ECOOP94, </booktitle> <year> 1994. </year> <note> To Appear. </note>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, because they address the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], [Gamm93], [Gamm94], [Coad93], [Copl91], [Copl94], [Shaw91], [John92], [Busc93], <ref> [Pree94] </ref>). Design patterns are reusable micro-architectures, which frequently occur in object-oriented systems. 1 The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate with each other more effectively.
Reference: [Shaw91] <author> M. Shaw. </author> <title> Heterogenous design idioms for software architecture. </title> <booktitle> In Proceeding of the Sixth International Workshop on Software Specification and Design, Software Engineering Notes, </booktitle> <pages> pages 158165, </pages> <address> Como, Italy, </address> <month> October 25-26 </month> <year> 1991. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: A growing number of people consider design patterns to be a promising approach to system development, because they address the aforementioned problems, especially in object-oriented systems (cf. [Beck93], [Beck94], [Gamm93], [Gamm94], [Coad93], [Copl91], [Copl94], <ref> [Shaw91] </ref>, [John92], [Busc93], [Pree94]). Design patterns are reusable micro-architectures, which frequently occur in object-oriented systems. 1 The main idea behind design patterns is to support the reuse of design information, thus allowing developers to communicate with each other more effectively.
Reference: [Zimm94] <author> Walter Zimmer. </author> <title> Relationships between design patterns. </title> <note> 1994. Submitted to PLoP94. </note>
Reference-contexts: Their results look promising too. In [Coad93], several design patterns were combined into an exemplary application, but the relationships were not investigated any further. <ref> [Zimm94] </ref> organized the relationships between Experiences using Design Patterns to Reorganize an Object-Oriented Application 7 design patterns into different categories, and derived an arrangement of the design patterns into different layers. [Casa92] and [Opdy92] presented interesting reorganization approaches and techniques. Unfortunately, no tool support is offered for either. 7. <p> For example, Composite is a central design pattern which is often combined with several other design patterns (Iterator, Visitor, Builder). Therefore, the relationships between design patterns should be further investigated <ref> [Zimm94] </ref>. 8. Conclusions and outlook The experiences of using design patterns in the reorganization process are very encouraging. Research in the following areas can further increase the usefulness of the design pattern approach: Collecting generic and domain specific design patterns. Collecting and describing typical combinations of design patterns.
References-found: 24

