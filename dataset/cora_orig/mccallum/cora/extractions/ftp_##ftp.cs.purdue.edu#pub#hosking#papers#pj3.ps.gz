URL: ftp://ftp.cs.purdue.edu/pub/hosking/papers/pj3.ps.gz
Refering-URL: http://www.cs.purdue.edu/homes/hosking/papers.html
Root-URL: http://www.cs.purdue.edu
Email: fhosking,nystrom,brahnmatg@cs.purdue.edu  quintin@dcs.gla.ac.uk  
Phone: 2  
Title: on Persistence and Java Swizzle barrier optimizations for orthogonal persistence in Java  
Author: Kumar Brahnmath Nathaniel Nystrom Antony Hosking Quintin Cutts 
Date: June 5, 1998  
Address: West Lafayette, IN 47907-1398, USA  Glasgow G12 8QQ, Scotland  
Affiliation: 1 Department of Computer Sciences Purdue University  Department of Computing Science University of Glasgow  
Note: Submitted to Third International Workshop  
Abstract: Swizzling refers to the translation of object references from an external, persistent format to an internal, transient format used during application execution. Eager swizzling schemes translate all the references contained by objects as they are made resident. Lazy swizzling schemes defer translation of references until they are loaded from their container. Eager swizzling has the advantage of presenting a uniformly swizzled representation of references to the execution engine, at the cost of up-front translation of references that may never be used. Lazy swizzling avoids this cost, but requires a run-time check that we call a swizzle barrier to detect and convert unswizzled references as they are accessed. Lazy swizzling is most often used in situations where accesses are likely to be sparse and the up-front cost of eager swizzling is prohibitive. For example, large containers, such as arrays, may contain many thousands of references, only a fraction of which are ever actually accessed, let alone used to access their target. Thus, lazy swizzling of arrays makes sense even while other types of objects are eagerly swizzled, in which case every array access must be protected by a swizzle barrier. Many, if not most, of these barriers will occur in the bodies of loops that iterate through the elements of arrays. Here, we describe how to hoist loop-nested swizzle barriers into one inclusive barrier operation that can be performed outside the loop, and which swizzles the subset of array elements accessed in the loop body. Our approach to array swizzle barrier optimization is based on loop induction variable analysis. We have implemented this approach for the PJama prototype of orthogonal persistence for Java. In experiments with several benchmark applications our optimizations reduce the number of swizzle barriers executed by an average of 66%.
Abstract-found: 1
Intro-found: 1
Reference: <author> AHO, A. V., SETHI, R., AND ULLMAN, J. D. </author> <year> 1986. </year> <title> Compilers: Principles, Techniques, and Tools. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> ATKINSON, M. P., DAYN ES, L., JORDAN, M. J., PRINTEZIS, T., AND SPENCE, S. </author> <year> 1996. </year> <title> An orthogonally persistent Java. </title> <booktitle> ACM SIGMOD Record 25, </booktitle> <month> 4 (Dec.), 6875. </month>
Reference: <author> ATKINSON, M. P. AND MORRISON, R. </author> <year> 1995. </year> <title> Orthogonally persistent object systems. </title> <booktitle> International Journal on Very Large Data Bases 4, </booktitle> <volume> 3, </volume> <pages> 319401. </pages>
Reference: <author> BRIGGS, P., COOPER, K. D., HARVEY, T. J., AND SIMPSON, L. T. </author> <year> 1997. </year> <title> Practical improvements to the construction and destruction of static single assignment form. </title> <note> Available at http://www.cs.rice.edu/harv/ssa.ps. </note>
Reference: <author> BRIGGS, P., COOPER, K. D., AND SIMPSON, L. T. </author> <year> 1997. </year> <title> Value numbering. </title> <journal> Software: </journal> <note> Practice and Experience 27, 6 (June), 701724. </note>
Reference: <author> CHOW, F., CHAN, S., KENNEDY, R., LIU, S.-M., LO, R., AND TU, P. </author> <year> 1997. </year> <title> A new algorithm for partial redundancy elimination based on SSA form. </title> <booktitle> In Proceedings of the ACM Conference on Programming Language Design and Implementation (Las Vegas, </booktitle> <address> Nevada, </address> <month> June). </month> <journal> ACM SIGPLAN Notices 32, </journal> <volume> 5 (May), </volume> <pages> 273286. </pages>
Reference: <author> CUTTS, Q. AND HOSKING, A. L. </author> <year> 1997. </year> <title> Analysing, profiling and optimising orthogonal persistence for Java. </title> <booktitle> In Proceedings of the Second International Workshop on Persistence and Java (Half Moon Bay, </booktitle> <address> California, </address> <month> Aug.), </month> <note> M. P. </note>
Reference: <author> Atkinson and M. J. Jordan, Eds. </author> <type> Sun Microsystems Laboratories Technical Report 97-63, 107115. </type>
Reference: <author> CUTTS, Q., LENNON, S., AND HOSKING, A. L. </author> <year> 1998. </year> <title> Reconciling buffer management with persistence optimizations. </title> <booktitle> Submitted to the Eighth International Workshop on Persistent Object Systems. </booktitle>
Reference: <author> CYTRON, R., FERRANTE, J., ROSEN, B. K., WEGMAN, M. N., AND ZADECK, F. K. </author> <year> 1991. </year> <title> Efficiently computing static single assignment form and the program dependence graph. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 13, 4 (Oct.), </volume> <pages> 451490. </pages>
Reference: <author> DIWAN, A., MCKINLEY, K. S., AND MOSS, J. E. B. </author> <year> 1998. </year> <title> Type-based alias analysis. </title> <booktitle> In Proceedings of the ACM Conference on Programming Language Design and Implementation (Montreal, </booktitle> <address> Canada, </address> <month> June). </month> <journal> ACM SIGPLAN Notices 33. </journal> <note> To appear. </note>
Reference: <author> GERLEK, M. P., STOLTZ, E., AND WOLFE, M. </author> <year> 1995. </year> <title> Beyond induction variables: detecting and classifying sequences using a demand-driven SSA form. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 17, </volume> <month> 1 (Jan.), 85122. </month>
Reference: <author> GOSLING, J., JOY, B., AND STEELE, G. </author> <year> 1996. </year> <title> The Java Language Specification. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> HOSKING, A. L., NYSTROM, N., CUTTS, Q., AND BRAHNMATH, K. </author> <title> Optimizing the read and write barriers for orthogonal persistence. </title> <booktitle> Submitted to the Eighth International Workshop on Persistent Object Systems (Tiburon, </booktitle> <address> California, </address> <month> August </month> <year> 1998). </year> <note> 13 LARUS, </note> <author> J. R. AND HILFINGER, P. N. </author> <year> 1988. </year> <title> Detecting conflicts between structure accesses. </title> <booktitle> In Proceedings of the ACM Conference on Programming Language Design and Implementation (Atlanta, </booktitle> <address> Georgia, </address> <month> June). </month> <journal> ACM SIGPLAN Notices, </journal> <volume> 2134. </volume>
Reference: <author> LINDHOLM, T. AND YELLIN, F. </author> <year> 1996. </year> <title> The Java Virtual Machine Specification. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> MOREL, E. AND RENVOISE, C. </author> <year> 1979. </year> <title> Global optimization by suppression of partial redundancies. </title> <journal> Commun. ACM 22, </journal> <volume> 2 (Feb.), </volume> <pages> 96103. </pages>
Reference: <author> MOSS, J. E. B. </author> <year> 1992. </year> <title> Working with persistent objects: To swizzle or not to swizzle. </title> <journal> IEEE Trans. Softw. Eng. </journal> <volume> 18, 8 (Aug.), </volume> <pages> 657673. </pages>
Reference: <author> MUCHNICK, S. S. </author> <year> 1997. </year> <title> Advanced Compiler Design and Implementation. </title> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> NYSTROM, N., HOSKING, A. L., CUTTS, Q., AND DIWAN, A. </author> <title> Partial redundancy elimination for access path expressions. </title> <booktitle> Submitted to the 1998 ACM Conference on Object-Oriented Programming Systems, Languages and Applications. </booktitle>
Reference: <author> PALSBERG, J. AND SCHWARTZBACH, M. I. </author> <year> 1994. </year> <title> Object-Oriented Type Systems. </title> <publisher> Wiley. </publisher>
Reference: <author> STOLZ, E., GERLEK, M. P., AND WOLFE, M. </author> <year> 1994. </year> <title> Extended SSA with factored use-def chains to support optimization and parallelism. </title> <booktitle> In Proceedings of the 27th Annual Hawaii International Conference on System Sciences (Jan.). </booktitle> <pages> 4352. </pages>
Reference: <author> TARJAN, R. E. </author> <year> 1972. </year> <title> Depth-first search and linear graph algorithms. </title> <note> SIAM Journal of Computing 1, 2 (June), 146160. </note>
Reference: <author> WOLFE, M. </author> <year> 1996. </year> <title> High Performance Compilers for Parallel Computing. </title> <publisher> Addison-Wesley. </publisher> <pages> 14 </pages>
References-found: 23

