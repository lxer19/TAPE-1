URL: http://www.cs.nmsu.edu/~jcook/papers/MsThesis.ps.gz
Refering-URL: http://www.cs.nmsu.edu/~jcook/papers/
Root-URL: http://www.cs.nmsu.edu
Title: AGENTSIM: A SIMULATION OF A PETRI NET BASED HARDWARE DESCRIPTION LANGUAGE  
Author: by JONATHAN E. COOK 
Degree: Submitted in partial fulfillment of the requirements for the degree of Master of Science Thesis Advisor: Paul Drongowski  
Date: May 1991  
Affiliation: Department of Computer Engineering and Science CASE WESTERN RESERVE UNIVERSITY  
Abstract-found: 0
Intro-found: 1
Reference: [Bald88] <editor> An Environment for Object-Oriented Conceptual Programming Based on PROT Nets. Marco Baldassari, Giorgio Bruno. </editor> <booktitle> Lecture Notes in Computer Science. </booktitle> <volume> Vol 340. </volume> <publisher> Springer-Verlag. </publisher> <address> New York. </address> <year> 1988. </year>
Reference-contexts: The combination of dynamic token types and specifying guard predicates gives a net model with similar control abilities to the enabling conditions of Gdl/b transitions. One example of the application of PrT nets is an environment for object-oriented programming <ref> [Bald88] </ref>, which takes 18 the theoretical specification of PrT nets and maps it onto useable procedural semantics, called PROT nets. PROT nets consist of a graphical representation of the control structure and a textual description of the actions performed by transitions and the data used.
Reference: [Berk86] <institution> Berkeley CAD Tools User's Manual. University of California, at Berke-ley. </institution> <year> 1986. </year>
Reference-contexts: When simulating the design, tools in the environment can take two approaches. First, the HDL can be translated to a different language, which is specifically used for simulation purposes. For example, at the physical level, the magic format describes the physical layout of the design <ref> [Berk86] </ref>, but simulation is done by translating this to esim or spice format. Second, the simulation tool may directly use the HDL as the simulation language. This can be the case with tools using the VHDL language [Whee91].
Reference: [Boys88] <institution> A complexity analysis tool for VLSI systems. Glenn J. Boysko. M.S. </institution> <type> Thesis. </type> <institution> Computer Engineering and Science, Case Western Reserve University. </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: Analysis of the structure in terms of whether it can perform the data and control operations specified in Gdl/b is not part of the simulation requirements; this is done in the complexity analysis part of Agent <ref> [Boys88] </ref>. Gdl/p, dealing with the physical design of the system, does not enter into the picture for simulation purposes. 2.1 Gdl/b: The Behavioral Language Any behavioral description of a design must contain three basic elements of specification to be complete: data flow, control flow, and timing. <p> Gdl/b allows a set of assignments or computations to be attached to a transition, which take place on each firing of that transition. All assignments on a transition occur in parallel, so there must be no resource conflicts in the underlying structure. The complexity analysis tool of Agent <ref> [Boys88] </ref> would catch such a problem. If there are actions associated with a transition, then in a physical system these actions must take time. In Petri nets, the marking of the output places is simultaneous with the unmarking of the input places; there is no time involved. <p> Just as a compiler does not (in today's technology) inform the programmer of semantic errors, the simulator does not inform the designer of resource conflicts. This is reserved for a complexity analysis tool <ref> [Boys88] </ref>. <p> The editor windows give the designer a three sided view of the design, in accordance with the three language domains of Gdl. In each of these windows the engineer can create and modify his design in the corresponding Gdl domain. The analysis window, described in detail in <ref> [Boys88] </ref>, uses the information contained in the component library to determine some of the operating parameters of the design, including maximum speed (derived from finding the critical path), space and power analysis.
Reference: [Cook88] <author> Gsim: </author> <title> A Simulator for Gdl Modules. </title> <editor> Jonathan E. Cook. </editor> <title> Senior Project. </title> <institution> Computer Engineering and Science, Case Western Reserve University. </institution> <month> May </month> <year> 1988. </year>
Reference-contexts: In the first project [Gron88], A prolog representation of Gdl was used, and simulation was done in the prolog environment. In the second effort <ref> [Cook88] </ref>, a translator was described which translated Gdl into a C program, which would model the execution of the Gdl/b graph. <p> Prolog may be useful in the area of design automation also; in [Cook89], a small project which explored the use of Prolog to automatically synthesize a datapath, is described. 3.2.2 A Fixed Schedule Simulator In <ref> [Cook88] </ref>, a translator is described that translated Gdl into a C program, which would model the execution of the Gdl/b graph. This involved translating the various Gdl/b objects into C language constructs, and then generating a fixed schedule of the transitions in the net for evaluation.
Reference: [Cook89] <author> A Prolog Datapath Synthesizer. Jonathan E. Cook. </author> <title> Class Project. </title> <institution> Computer Engineering and Science, Case Western Reserve University. </institution> <month> Jan-uary </month> <year> 1989. </year>
Reference-contexts: Prolog may be useful in the area of design automation also; in <ref> [Cook89] </ref>, a small project which explored the use of Prolog to automatically synthesize a datapath, is described. 3.2.2 A Fixed Schedule Simulator In [Cook88], a translator is described that translated Gdl into a C program, which would model the execution of the Gdl/b graph.
Reference: [Dron86] <institution> An Experimental Assistant to Support the Construction and Analysis of Control Graph Datapath Design. Paul J. Drongowski, </institution> <type> Ranganathan Ramaswamy, Sundar Iyengar. Technical Report CES-87-03. </type> <institution> Computer Engineering and Science, Case Western Reserve University. </institution> <month> March </month> <year> 1987. </year>
Reference-contexts: Second, the simulation tool may directly use the HDL as the simulation language. This can be the case with tools using the VHDL language [Whee91]. This thesis entails the design and construction of a simulation tool for Agent, a research project at Case Western Reserve University <ref> [Dron86] </ref>. Agent is a hardware designer's assistant, a workbench providing a graphical design environment for the engineer. It allows the designer to interactively create his design and perform various analyses on it, as well as simulation with the addition of AgentSim.
Reference: [Dron88a] <institution> Assisting register transfer level hardware design: A Prolog Application. Paul J. Drongowski. Computer Engineering and Science, Case Western Reserve University. </institution> <month> April </month> <year> 1988. </year>
Reference-contexts: For doing analyses and evaluations of the static structure of the design, logic programming makes an excellent basis for specifying rules to analyze by. In <ref> [Dron88a] </ref>, the idea of using Prolog to assist in register transfer level hardware design is explored.
Reference: [Dron88b] <institution> The SP.1 Signal Processing Computer. Paul J. Drongowski. Computer Engineering and Science, Case Western Reserve University. </institution> <month> September </month> <year> 1988. </year>
Reference-contexts: We will be using the SP.1 computer as our example design. The SP.1 is a small proccessor specified only at the instruction set architecture level <ref> [Dron88b] </ref>. Its main purpose has been to serve as a design assignment for an undergraduate computer architecture class here at Case Western Reserve University. The SP.1 is a 8-bit processor which uses specialized, discrete registers in its architecture. The visible registers are shown in Figure 6.4.
Reference: [Dron88c] <institution> The SP.2 Signal Processing Computer. Paul J. Drongowski. Computer Engineering and Science, Case Western Reserve University. </institution> <month> September </month> <year> 1988. </year> <month> 80 </month>
Reference-contexts: It is the next generation of the SP.1, and was used for the same purpose: as a undergraduate design assignment <ref> [Dron88c] </ref>. Instead of a discrete and specialized register architecture like the SP.1, the SP.2 employs a general register set as its main storage resource. Operations that used a specific register, such as the Call using the SR register to store the return address, now use any of the general registers.
Reference: [Dron88d] <author> A Graphical Hardware Design Language. Paul J. Drongowski, Jwa-har R. Bammi, Ranganathan Ramaswamy, Sundar Iyengar, Tsu-Hua Wang. </author> <booktitle> 25th ACM/IEEE Design Automation Conference, </booktitle> <address> Las Vegas. </address> <month> June </month> <year> 1988. </year> <pages> pp 108-114. </pages>
Reference: [Fran85] <author> An Architecture Design and Assessment System for Software/Hardware Codesign. Geoffrey A. Frank, Connie U. Smith, John L. Cuadrado. </author> <booktitle> 22nd ACM/IEEE Design Automation Conference, </booktitle> <address> Las Vegas. </address> <month> June </month> <year> 1985. </year> <pages> pp 417-424. </pages>
Reference-contexts: The executables must include an inferential engine, which does the actual selection of transitions to fire. 3.1.2 Use of Petri Nets in Hardware Design In <ref> [Fran85] </ref>, a CAD tool called ADAS (an Architecture Design and Assessment System) is described which supports the parallel design of the hardware and software of VLSI systems, specifically for digital signal processors.
Reference: [Fisc88] <editor> Crafting a Compiler. Charles N. Fischer, Richard J. LeBlanc. </editor> <publisher> The Benjamin/Cummings Publishing Company. </publisher> <address> Menlo Park, CA. </address> <year> 1988. </year>
Reference: [Genr89] <editor> Equivalence Transformations of PrT-Nets. Hartmann J. Genrich. </editor> <booktitle> Lecture Notes in Computer Science. </booktitle> <volume> Vol 424. </volume> <publisher> Springer-Verlag. </publisher> <address> New York. </address> <year> 1990. </year>
Reference-contexts: Examples of these indices are: the average number of backlogged stations on the LAN, the average number stations waiting for the channel to become idle, and packet collision probabilities. The Predicate-Transition (PrT) nets are Petri nets with dynamic token types and guard predicates on transitions <ref> [Genr89] </ref>. Arcs are annotated with token patterns so that when a token is passed along an arc, it must be currently typed to the pattern associated with that arc.
Reference: [Gron88] <institution> Simulation of Annotated Petri Nets. Anders Gronqvist. M.S. Project. Computer Engineering and Science, Case Western Reserve University. </institution> <month> July </month> <year> 1988. </year>
Reference-contexts: This limits the type of parallelism that needs to be dealt with to independent parallelism. 3.2 Previous Work in Agent Two previous projects have dealt with simulation of Gdl in different manners. In the first project <ref> [Gron88] </ref>, A prolog representation of Gdl was used, and simulation was done in the prolog environment. In the second effort [Cook88], a translator was described which translated Gdl into a C program, which would model the execution of the Gdl/b graph. <p> Both of these projects have a more limited scope than this thesis, but have lessons to be learned from them. 3.2.1 A Prolog Simulator An earlier project involved in the simulation of Agent designs was a Prolog based simulator <ref> [Gron88] </ref>. Agent has the ability to dump a design into a Prolog database. By using this feature, an entire design can be asserted as Prolog ground clauses (facts), and the inherent structure of both the behavioral and structural partitions is instantly available.
Reference: [Hane89] <institution> Optimizing Microprograms for Recurrent Loops on Pipelined Architectures Using Timed Petri Nets. </institution> <address> Claire Hanen. </address> <booktitle> Lecture Notes in Computer Science. </booktitle> <volume> Vol 424. </volume> <publisher> Springer-Verlag. </publisher> <address> New York. </address> <year> 1990. </year>
Reference-contexts: The additional control over transitions through enabling conditions in Gdl/b is closely related to another extension of Petri nets known as Predicate-Transition Nets (PrT nets). 16 17 Examples of these are described here. In <ref> [Hane89] </ref>, the TTPN model is used to describe and optimize the micropro-grammed control of pipelined architecture. In this work, unlike Gdl/b, places represent resources which are used by actions (transitions).
Reference: [Iyen86] <author> The Gdl/s structural design language. Sundar R. Iyengar, Ranganathan Ramaswamy, Paul J. Drongowski. </author> <type> Technical Report CES-86-13. </type> <institution> Computer Engineering and Science, Case Western Reserve University. </institution> <month> Oc-tober </month> <year> 1986. </year> <title> [John75] yacc Yet Another Compiler Compiler. </title> <editor> S. C. </editor> <title> Johnson. </title> <type> C.S Technical Report #32. </type> <institution> AT&T Bell Labs. </institution> <address> Murray Hill, N.J. </address> <year> 1975. </year>
Reference-contexts: A Gdl/s specification represents the datapath that the Gdl/b graph would execute upon. It would not determine the physical construction of the datapath, only the logical structure that is used. A complete description of the Gdl/s language can be found in <ref> [Iyen86] </ref>. The basic partition of a structure is the module, a self-contained portion of the design . A module can only communicate outside of itself through I/O ports, which are explicitly specified. Inside a module, a design consists of components, connections, busses, signals, and other constructs.
Reference: [Kuma90] <institution> An Approach Towards Distributed Simulation of Timed Petri Nets. </institution> <note> Devendra Kumar, </note> <editor> Saad Harous. </editor> <booktitle> Proceedings of the 1990 Winter Simulation Conference. </booktitle> <month> December </month> <year> 1990. </year> <title> [Lesk75] lex a Lexical Analyzer Generator. </title> <editor> M. E. Lesk, E. Schmidt. </editor> <title> Unix Programmer's Manual 2. </title> <institution> AT&T Bell Labs. </institution> <address> Murray Hill, N.J. </address> <year> 1975. </year>
Reference-contexts: At the fine-grained level, gaining parallelism here implies the underlying topic of the parallel simulation of Petri net behavior, which is currently an active research area, one example being <ref> [Kuma90] </ref>. How this research could be extended to the constructs in Gdl/b would take further study.
Reference: [Mars87] <author> An Accurate Performance Model of CSMA/CD Bus LAN. M. Ajmone Marsan, G. Chiola, A. Fumagalli. </author> <booktitle> Lecture Notes in Computer Science. </booktitle> <volume> Vol 266. </volume> <publisher> Springer-Verlag. </publisher> <address> New York. </address> <year> 1987. </year>
Reference-contexts: These critical cycles are then mapped onto optimal solutions. The TTPN model is also used to describe the behavior of a CSMA/CD protocol on a bus LAN <ref> [Mars87] </ref>. The CSMA/CD (Carrier Sense Multiple Access with Collision Detection) protocol is the basis for the Ethernet standard. The TTPN constructed in this work is constrained to be able to be also classified as a deterministic stochastic Petri net (DSPN).
Reference: [Pete81] <institution> Petri Net Theory and the Modeling of Systems. </institution> <note> J. </note> <editor> L. Peterson. </editor> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, N.J. </address> <year> 1981. </year> <month> 81 </month>
Reference-contexts: A very good reference on Petri nets is Peterson's book <ref> [Pete81] </ref>; it is thin and easily readable, and is a comprehensive reference. A Petri net is a directed bipartite graph consisting of objects called places and transitions, connected to each other by arcs. Arcs can only connect places to transitions or transitions to places; they are not bidirectional.
Reference: [Petr62] <institution> Kommunikation mit Automaten, </institution> <type> PhD Dissertation. Carl Adam Petri. </type> <institution> University of Bonn. Bonn, West Germany. </institution> <year> 1962. </year>
Reference-contexts: What follows is a brief explanation of the properties of Petri nets, and then the extensions made by Gdl/b; a thorough description of this representation is found in [Wang86]. 2.1.1 Petri Nets In his 1962 PhD dissertation <ref> [Petr62] </ref>, Carl Adam Petri first described the control theory which evolved into what is now known as Petri nets. A very good reference on Petri nets is Peterson's book [Pete81]; it is thin and easily readable, and is a comprehensive reference.
Reference: [Wang86] <author> Gdl/b: </author> <title> Behavioral design language. </title> <editor> Tsu Hua Wang, Paul J. </editor> <title> Dron-gowski. </title> <type> Technical Report CES-86-12. </type> <institution> Computer Engineering and Science, Case Western Reserve University. </institution> <month> October </month> <year> 1986. </year>
Reference-contexts: What follows is a brief explanation of the properties of Petri nets, and then the extensions made by Gdl/b; a thorough description of this representation is found in <ref> [Wang86] </ref>. 2.1.1 Petri Nets In his 1962 PhD dissertation [Petr62], Carl Adam Petri first described the control theory which evolved into what is now known as Petri nets. A very good reference on Petri nets is Peterson's book [Pete81]; it is thin and easily readable, and is a comprehensive reference. <p> One can think of this specification as similar to a programming language without control constructs (if, for, while). The Petri net is Gdl/b's control structure. The exact syntax and specification of the Gdl/b data types and operations can be found in <ref> [Wang86] </ref>. In fact, the whole of Gdl/b is a 12 full-fledged parallel programming language. Thus it can be seen that Gdl/b gives the designer a powerful language in which to specify the behavior of his design.
Reference: [Whee91] <institution> Conversion of Graphical Description Language Behavioral and Structural Graphs to VHDL Programs. Brien L. Wheeler. M.S. </institution> <type> Thesis. </type> <institution> Computer Engineering and Science. Case Western Reserve university. </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: Second, the simulation tool may directly use the HDL as the simulation language. This can be the case with tools using the VHDL language <ref> [Whee91] </ref>. This thesis entails the design and construction of a simulation tool for Agent, a research project at Case Western Reserve University [Dron86]. Agent is a hardware designer's assistant, a workbench providing a graphical design environment for the engineer. <p> This is very useful when it is desired to do logical analyses on the design, or when making a mapping from one language to another <ref> [Whee91] </ref>. This, coupled with Prolog's built-in language parsing abilities, made for ele 21 gant evaluation code in the Prolog simulator. The unification and backtracking of logic programming made finding fireable transitions and marked places easy, and parsing of the expressions and actions is almost automatic in Prolog code.
References-found: 22

