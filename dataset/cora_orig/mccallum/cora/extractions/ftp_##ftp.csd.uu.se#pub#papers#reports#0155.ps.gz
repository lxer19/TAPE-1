URL: ftp://ftp.csd.uu.se/pub/papers/reports/0155.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Email: E-mail: av@csd.uu.se  
Phone: Phone: +4818471 00 00 Fax: +461851 19 25  
Title: P L 2 Tractable?  
Author: Aida Vitoria 
Address: Uppsala University  Box 311, S-751 05 Uppsala, Sweden  
Affiliation: Computing Science Department  
Note: Is  PL 2  
Abstract: UPMAIL Technical Report No. 155 April 24, 1998 ISSN 1100-0686 Abstract It is believed by the scientific community that PL 1 and PL 2 are the largest concept languages for which there exists a polynomial algorithm that solves the subsumption problem. Donini, Lenzerini, Nardi and Nutt have presented in [4] two polynomial algorithms that are intended to solve the subsumption problem for PL 1 and PL 2 , respectively. The authors also claim that both algorithms are sound and complete. In contrast, we show, by giving an example, that the algorithm described in [4] for language PL 2 is in fact not complete. As a direct consequence, it still remains an open problem to which computational complexity class belongs the subsumption problem for 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Brachman, H. Levesque. </author> <title> The Tractability of Subsumption in Frame-Based Description Languages. </title> <booktitle> In Proc. 4th National Conference on Artificial Intelligence (AAAI'84), </booktitle> <address> Austin, Texas, </address> <year> 1984. </year>
Reference-contexts: Much of the research done in this field aims at characterizing concept languages with respect to their expressive power [2, 7] or the computational complexity of the following problems : knowledge base satisfiability, concept satisfiability and subsumption (see for example <ref> [1, 3, 4, 5, 6, 8, 9, 10, 11] </ref>) This report is about the subsumption problem in the concept language PL 2 .
Reference: [2] <author> M. Buchheit, F. Donini, A. Schaerf. </author> <title> Decidable Reasoning in Terminological Knowledge Representation Systems. </title> <booktitle> In Proc. 13th International Joint Conference on Artificial Intelligence (IJCAI'93), Chambery, </booktitle> <editor> R. Bajcsy (ed.), </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction In the last years, much attention has been given to concept-knowledge bases. Much of the research done in this field aims at characterizing concept languages with respect to their expressive power <ref> [2, 7] </ref> or the computational complexity of the following problems : knowledge base satisfiability, concept satisfiability and subsumption (see for example [1, 3, 4, 5, 6, 8, 9, 10, 11]) This report is about the subsumption problem in the concept language PL 2 .
Reference: [3] <author> F. Donini, M. Lenzerini, D. Nardi, W. Nutt. </author> <title> The Complexity of Concept Languages. </title> <booktitle> In Proc. of the 2nd International Conference on Principles of Knowledge Representation and Reasoning (KR'91), </booktitle> <address> Cambridge, </address> <publisher> MA, </publisher> <editor> J. A. Allen, R. Fikes and E. Sandewall (eds.), </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: Much of the research done in this field aims at characterizing concept languages with respect to their expressive power [2, 7] or the computational complexity of the following problems : knowledge base satisfiability, concept satisfiability and subsumption (see for example <ref> [1, 3, 4, 5, 6, 8, 9, 10, 11] </ref>) This report is about the subsumption problem in the concept language PL 2 .
Reference: [4] <author> F. Donini, M. Lenzerini, D. Nardi, W. Nutt. </author> <title> Tractable Concept Languages. </title> <booktitle> In Proc. 12th International Joint Conference on Artificial Intelligence (IJ-CAI'91), </booktitle> <editor> Sidney, J. Mylopoulos and R. Reiter (eds.), </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: Much of the research done in this field aims at characterizing concept languages with respect to their expressive power [2, 7] or the computational complexity of the following problems : knowledge base satisfiability, concept satisfiability and subsumption (see for example <ref> [1, 3, 4, 5, 6, 8, 9, 10, 11] </ref>) This report is about the subsumption problem in the concept language PL 2 . <p> It is believed by the scientific community that PL 1 and PL 2 are the largest languages for which there exists a polynomial algorithm that solves the subsumption problem. In <ref> [4] </ref>, two tractable algorithms for checking whether a concept C 1 subsumes a concept C 2 in PL 1 and PL 2 , respectively, are presented. The authors of [4] also claim that these algorithms are sound and complete. <p> In <ref> [4] </ref>, two tractable algorithms for checking whether a concept C 1 subsumes a concept C 2 in PL 1 and PL 2 , respectively, are presented. The authors of [4] also claim that these algorithms are sound and complete. The main aim of this report is to prove that the algorithm presented in [4] for checking subsumption of concepts expressed in the language PL 2 is not complete. <p> The authors of <ref> [4] </ref> also claim that these algorithms are sound and complete. The main aim of this report is to prove that the algorithm presented in [4] for checking subsumption of concepts expressed in the language PL 2 is not complete. <p> In Section 2, we present the language PL 2 and recall the meaning of the subsumption problem. Section 3 gives a brief overview of the algorithm presented in <ref> [4] </ref> for solving the subsumption problem. In Section 4 we show , through an example, that this algorithm is not complete as his authors claimed. <p> The subsumption problem may be reduced to the problem of checking whether a concept is satisfiable. In fact, a concept C 1 subsumes a concept C 2 if and only if the concept C 2 u :C 1 is unsatisfiable. This is the approach followed in <ref> [4] </ref> and in this report. 2 3 An Algorithm for Checking Subsumption in PL 2 We give a brief overview of the algorithm described in [4]. As we will prove in next section, this algorithm is not complete as it is stated in that paper. <p> This is the approach followed in <ref> [4] </ref> and in this report. 2 3 An Algorithm for Checking Subsumption in PL 2 We give a brief overview of the algorithm described in [4]. As we will prove in next section, this algorithm is not complete as it is stated in that paper. As we said before, the subsumption problem can be reformulated in terms of concept unsatisfiability. <p> In this way, union operator (t) is avoided. But, still remains the problem of negated primitive concepts and negated universal quantified concepts. To cope with the problem mentioned before, it is proposed in <ref> [4] </ref> to consider the language PL + 2 that extends PL 2 in the following way. <p> The algorithm that checks if C is satisfiable transforms into another constraint system , called the completion of , such that contains a contradiction (in the form of a clash defined below) if and only if C is unsatisfiable. 3 The algorithm presented in <ref> [4] </ref> works by adding new constraints to according to the following 6 rules, until no new information can be generated. <p> According to <ref> [4] </ref>, if 2 contains a constraint of the form x 3 : P then we may conclude that f9 (r 1 u r 2 u r 3 ); :9 (r 1 u r 2 ) ffi r 4 g is a clash and, consequently, C 2 u :C 1 is unsatisfiable. <p> So, no assertion of the for x 3 : P belongs to the completion of 2 and it cannot be concluded that C 1 subsumes C 2 (or that C 2 u :C 1 is unsatisfiable). We may also conclude from this example that Theorem 5:2 stated in <ref> [4] </ref> is wrong. 2 The example above shows that universal quantified restrictions have to be taken into account when we want to check whether fx 1 : 9r 1 ; x 1 : :9r 2 g is a clash. <p> x : 8 (r 1 u r 2 ):9r 4 g with the completion rules presented before plus (9), instead of fr 1 u r 2 u r 3 (x; x 1 ); x : 8 (r 1 u r 2 ) ffi r 4 :P g as suggested in <ref> [4] </ref>, then an assertion of the form x 3 : P would have been obtained. If universal quantified restrictions have to be taken into account and new rules are needed then it is not obvious to us whether it is possible to have a tractable algorithm for PL 2 . <p> Notice that with the new rule (9) and due to the presence of intersection of relations in the language, it is possible to obtain completions with an exponential number of variables. 5 Conclusion This work aims to prove that the tractable algorithm presented in <ref> [4] </ref> for solving the subsumption problem is not complete. We have found a concrete example for which the algorithm fails to detect that a concept C 1 subsumes a concept C 2 . We also suspect that it is not possible to find a tractable algorithm.
Reference: [5] <author> F. Donini, M. Lenzerini, D. Nardi, W. Nutt. </author> <title> The Complexity of Concept Languages. </title> <type> Technical Report RR-95-07, </type> <institution> DFKI, </institution> <year> 1995. </year>
Reference-contexts: Much of the research done in this field aims at characterizing concept languages with respect to their expressive power [2, 7] or the computational complexity of the following problems : knowledge base satisfiability, concept satisfiability and subsumption (see for example <ref> [1, 3, 4, 5, 6, 8, 9, 10, 11] </ref>) This report is about the subsumption problem in the concept language PL 2 .
Reference: [6] <author> F. Donini, M. Lenzerini, D. Nardi, A. Schaerf. </author> <title> Deduction in Concept Languages: from Subsumption to Instance Checking. </title> <journal> Journal of Logic and Computation, </journal> <volume> 4(4) </volume> <pages> 423-452, </pages> <year> 1994. </year>
Reference-contexts: Much of the research done in this field aims at characterizing concept languages with respect to their expressive power [2, 7] or the computational complexity of the following problems : knowledge base satisfiability, concept satisfiability and subsumption (see for example <ref> [1, 3, 4, 5, 6, 8, 9, 10, 11] </ref>) This report is about the subsumption problem in the concept language PL 2 .
Reference: [7] <author> M. Mamede, L. Monteiro. ALCrn: </author> <title> A Decidable Terminological Language with Role Negation. </title> <booktitle> In Proc. 6th Australian Joint Conference on Artificial Intelligence (AI'93) , Melbourne, </booktitle> <editor> C. Rowles, H. Liu and N. Foo (eds.), </editor> <publisher> World Scientific Publishing, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction In the last years, much attention has been given to concept-knowledge bases. Much of the research done in this field aims at characterizing concept languages with respect to their expressive power <ref> [2, 7] </ref> or the computational complexity of the following problems : knowledge base satisfiability, concept satisfiability and subsumption (see for example [1, 3, 4, 5, 6, 8, 9, 10, 11]) This report is about the subsumption problem in the concept language PL 2 .
Reference: [8] <author> B. Nebel. </author> <title> Computational Complexity of Terminological Reasoning in BACK. </title> <journal> Artificial Intelligence, </journal> <volume> 34(3) </volume> <pages> 371-383, </pages> <year> 1988. </year>
Reference-contexts: Much of the research done in this field aims at characterizing concept languages with respect to their expressive power [2, 7] or the computational complexity of the following problems : knowledge base satisfiability, concept satisfiability and subsumption (see for example <ref> [1, 3, 4, 5, 6, 8, 9, 10, 11] </ref>) This report is about the subsumption problem in the concept language PL 2 .
Reference: [9] <author> B. Nebel. </author> <title> Terminological Reasoning is Inherently Intractable. </title> <journal> Artificial Intelligence, </journal> <volume> 43(2) </volume> <pages> 235-249, </pages> <year> 1990. </year>
Reference-contexts: Much of the research done in this field aims at characterizing concept languages with respect to their expressive power [2, 7] or the computational complexity of the following problems : knowledge base satisfiability, concept satisfiability and subsumption (see for example <ref> [1, 3, 4, 5, 6, 8, 9, 10, 11] </ref>) This report is about the subsumption problem in the concept language PL 2 .
Reference: [10] <author> A. Schaerf. </author> <title> On the Complexity of the Instance Checking Problem in Concept Languages with Existential Quantification. </title> <booktitle> In Proc. 7th International Symposium on Methodologies for Intelligence Systems (ISMIS'93), Trondheim, </booktitle> <editor> Nor-way, J. Komorowski and Z. W. Ras (eds.) </editor> <publisher> LNAI 689, Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Much of the research done in this field aims at characterizing concept languages with respect to their expressive power [2, 7] or the computational complexity of the following problems : knowledge base satisfiability, concept satisfiability and subsumption (see for example <ref> [1, 3, 4, 5, 6, 8, 9, 10, 11] </ref>) This report is about the subsumption problem in the concept language PL 2 .
Reference: [11] <author> M. Schmidt-Schau, G. Smolka. </author> <title> Attributive Concept Descriptions with Complements. </title> <journal> Artificial Intelligence, </journal> <volume> 48(1) </volume> <pages> 1-26, </pages> <year> 1991. </year> <month> 6 </month>
Reference-contexts: Much of the research done in this field aims at characterizing concept languages with respect to their expressive power [2, 7] or the computational complexity of the following problems : knowledge base satisfiability, concept satisfiability and subsumption (see for example <ref> [1, 3, 4, 5, 6, 8, 9, 10, 11] </ref>) This report is about the subsumption problem in the concept language PL 2 .
References-found: 11

