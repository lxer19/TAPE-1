URL: ftp://ftp.win.tue.nl/pub/techreports/josb/bound3.tex.ps.Z
Refering-URL: http://www.win.tue.nl/inf/onderzoek/publicaties.html
Root-URL: http://www.win.tue.nl
Title: Bounded Stacks, Bags and Queues  
Author: J.C.M. Baeten and J.A. Bergstra ; 
Address: P.O. Box 513, NL-5600 MB Eindhoven, The Netherlands,  Kruislaan 403, NL-1098 SJ Amsterdam, The Netherlands  Netherlands,  
Affiliation: 1 Department of Mathematics and Computing Science, Eindhoven University of Technology,  Programming Research Group, University of Amsterdam,  Department of Philosophy, Utrecht University,  Utrecht, The  
Pubnum: Heidelberglaan 8, NL-3584 CS  
Email: josb@win.tue.nl,  janb@phil.ruu.nl,  
Phone: 2  3  
Web: http://www.win.tue.nl/cs/fm/josb/  http://www.wins.uva.nl/research/prog/people/janb/  
Abstract: We prove that a bounded stack can be specifled in process algebra with just the operators alternative and sequential composition and iteration. The bounded bag cannot be specifled with these operators, but can be specifled if we add the parallel composition operator without communication (free merge). The bounded queue cannot even be specifled in this signature; we need a form of variable binding such as given by general communication and encapsulation, the state operator, or abstraction. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J.C.M. Baeten and J.A. Bergstra. </author> <title> Global renaming operators in concrete process algebra. </title> <journal> Information and Computation, </journal> <volume> 78 </volume> <pages> 205-245, </pages> <year> 1988. </year>
Reference-contexts: The unbounded queue cannot be flnitely specifled using the signature including free merge (see [5]), but can be specifled if we add an operator that features some form of variable binding, such as general communication with encapsulation, renaming or abstraction (see <ref> [1] </ref>). From [2] we know that in process algebra with alternative, sequential and parallel composition (with communication) and iteration, not all regular processes can be deflned. That paper also shows that we gain expressivity, each time we add one of these operators. <p> For more details, we refer to [8]. Here, we give a difierent flnite speciflcation for the queue, in the signature obtained by adding the state operator of <ref> [1] </ref> to BPA - .
Reference: 2. <author> J.A. Bergstra, I. Bethke, and A. Ponse. </author> <title> Process algebra with iteration and nesting. </title> <journal> The Computer Journal, </journal> <volume> 37(4) </volume> <pages> 243-258, </pages> <year> 1994. </year>
Reference-contexts: The unbounded queue cannot be flnitely specifled using the signature including free merge (see [5]), but can be specifled if we add an operator that features some form of variable binding, such as general communication with encapsulation, renaming or abstraction (see [1]). From <ref> [2] </ref> we know that in process algebra with alternative, sequential and parallel composition (with communication) and iteration, not all regular processes can be deflned. That paper also shows that we gain expressivity, each time we add one of these operators. <p> Axioms of PA - (a 2 A -). Finally, we have in Table 1 the iteration operator * or binary Kleene star with deflning equation BKS. In x y, we can iterate x and terminate by executing y. Much more about iteration can be found in <ref> [2] </ref>. Iteration gives a limited form of recursion, since p q is the solution of the recursive equation X = p X + q: is BPA plus iteration. Below we will occasionally use recursive equations. <p> From <ref> [2] </ref> we know that bisimulation is a congruence relation on process expressions, and that the set of process expressions modulo bisimulation constitutes a model for PA - . 3 Stack We flrst give a system of linear equations for the stack. We have given a flnite data type D.
Reference: 3. <author> J.A. Bergstra and J.W. Klop. </author> <title> The algebra of recursively deflned processes and the algebra of regular processes. </title> <editor> In J. Paredaens, editor, </editor> <booktitle> Proceedings 11th ICALP, number 172 in LNCS, </booktitle> <pages> pages 82-95. </pages> <publisher> Springer Verlag, </publisher> <year> 1984. </year>
Reference-contexts: The unbounded bag cannot be flnitely specifled using alternative, sequential composition and recursion, but can be so specifled if we use the free merge in addition (see <ref> [3] </ref>). The unbounded queue cannot be flnitely specifled using the signature including free merge (see [5]), but can be specifled if we add an operator that features some form of variable binding, such as general communication with encapsulation, renaming or abstraction (see [1]).
Reference: 4. <author> J.A. Bergstra and J.W. Klop. </author> <title> Algebra of communicating processes. </title> <editor> In J.W. de Bakker, M. Hazewinkel, and J.K. Lenstra, editors, </editor> <booktitle> Mathematics and Computer Science I, volume 1 of CWI Monograph, </booktitle> <pages> pages 89-138. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1986. </year>
Reference-contexts: This situation is remarkably similar to the situation we have with the spec-iflcation of the unbounded versions with recursion instead of iteration. There, we have that the unbounded stack is not a regular process, but is flnitely defln-able using alternative and sequential composition and recursion (see <ref> [4] </ref>). The unbounded bag cannot be flnitely specifled using alternative, sequential composition and recursion, but can be so specifled if we use the free merge in addition (see [3]).
Reference: 5. <author> J.A. Bergstra and J. Tiuryn. </author> <title> Process algebra semantics for queues. </title> <note> Fundamenta Informaticae, X:213-224, </note> <year> 1987. </year>
Reference-contexts: The unbounded bag cannot be flnitely specifled using alternative, sequential composition and recursion, but can be so specifled if we use the free merge in addition (see [3]). The unbounded queue cannot be flnitely specifled using the signature including free merge (see <ref> [5] </ref>), but can be specifled if we add an operator that features some form of variable binding, such as general communication with encapsulation, renaming or abstraction (see [1]).
Reference: 6. <author> D.M.R. Park. </author> <title> Concurrency and automata on inflnite sequences. </title> <editor> In P. Deussen, editor, </editor> <booktitle> Proceedings 5th GI Conference, number 104 in LNCS, </booktitle> <pages> pages 167-183. </pages> <publisher> Springer Verlag, </publisher> <year> 1981. </year>
Reference-contexts: Certainly, two processes that are equal must be able to perform the same sequences of actions (must have the same traces. Even more, any state of one process must have a corresponding similar state in the other process. This equality is captured by the well-known notion of bisimulation (see <ref> [6] </ref>). First, we describe which actions a process expression can perform. We do this by deflning an operational semantics for process expressions. This semantics is given by means of Plotkin style action rules (see [7]).
Reference: 7. <author> G.D. Plotkin. </author> <title> An operational semantics for CSP. </title> <editor> In D. Bjrner, editor, </editor> <booktitle> Proceedings Conference on Formal Description of Programming Concepts II, </booktitle> <pages> pages 199-225. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1983. </year>
Reference-contexts: This equality is captured by the well-known notion of bisimulation (see [6]). First, we describe which actions a process expression can perform. We do this by deflning an operational semantics for process expressions. This semantics is given by means of Plotkin style action rules (see <ref> [7] </ref>). For each atomic action a we have two predicates on process expressions: a binary relation a ! and a unary relation a p .
Reference: 8. <author> F.W. Vaandrager. </author> <title> Process algebra semantics of POOL. </title> <editor> In J.C.M. Baeten, editor, </editor> <booktitle> Applications of Process Algebra, number 17 in Cambridge Tracts in Theoretical Computer Science, </booktitle> <pages> pages 173-236. </pages> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: A well-known one is that an n-bounded queue can be given as a parallel composition of n coupled one-place bufiers. In order to specify this, we need parallel composition with communication, encapsulation and abstraction. In terms of the chaining operator of Vaandrager (see <ref> [8] </ref>), we can give a deflnition as follows: Queue (1) = Elt (1) - Queue (n + 1) = Queue (n) Queue (1) . For more details, we refer to [8]. <p> In terms of the chaining operator of Vaandrager (see <ref> [8] </ref>), we can give a deflnition as follows: Queue (1) = Elt (1) - Queue (n + 1) = Queue (n) Queue (1) . For more details, we refer to [8]. Here, we give a difierent flnite speciflcation for the queue, in the signature obtained by adding the state operator of [1] to BPA - .
References-found: 8

