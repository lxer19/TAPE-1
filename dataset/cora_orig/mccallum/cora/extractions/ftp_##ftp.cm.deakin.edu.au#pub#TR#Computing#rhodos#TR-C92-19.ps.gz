URL: ftp://ftp.cm.deakin.edu.au/pub/TR/Computing/rhodos/TR-C92-19.ps.gz
Refering-URL: http://gollum.cm.deakin.edu.au/techreports.html
Root-URL: 
Email: e-mail: raj@deakin.edu.au  e-mail: ang@deakin.edu.au  
Title: The Logical Design of the RHODOS Distributed File Facility  
Author: Rajmohan Panadiwal and Andrzej Goscinski Andrzej Goscinski, 
Note: Rajmohan Panadiwal,  
Address: Geelong, Vic-3217  
Affiliation: School of Computing and Mathematics Deakin University  
Date: September 8, 1994  
Abstract: This report presents the logical design of the distributed file facility for RHODOS (ResearcH Oriented Distributed Operating System). This design offers, in general, the same services as a centralized file system, i.e., block service, file service and disk service. However, because of performance, reliability, and distribution reasons the following additional issues and services have also been considered: replication and multiple copy update, transactions and atomic action control, naming of distributed objects, and the placement and location of files in a distributed file facility. The design follows the layered approach and provides a clean interface at each level. To improve the performance caching is provided at all the possible levels. 
Abstract-found: 1
Intro-found: 1
Reference: [Birrell and Needham 1980] <author> Birrell, A. D. and Needham, R. M. </author> <title> A Universal File Server' IEEE Transactions on Software Engineering. </title> <booktitle> SEP 6, </booktitle> <volume> No. 5, </volume> <pages> pp. 450-453 </pages>
Reference: [Braban and Schlenk 1989] <author> Braban, B. and Schlenk, P. </author> <title> A Well Structured Parallel File System for PM. </title> <journal> Operating Systems Review 23, </journal> <volume> No. 2, </volume> <pages> pp. 25-38 </pages>
Reference-contexts: The design of the RHODOS distributed file facility is heavily oriented towards the performance compared to the utilization of disk space. The whole architecture and many solutions of the distributed file facility are original. However, we carried out our general design process based on the following <ref> [Braban and Schlenk 1989] </ref>, [Coulouris and Dollimore 1988], [Fridrich and Older 1981], [Gif-ford et al. 1988], [Goscinski 1991a], [Goscinski 1991b], [Leach et al. 1983], [Levine 1987], [Mullender and Tanenbaum 1985], [Sturgis et al. 1980] and [Nelson et al 1988]. <p> be provided to access files and carry out operations on them in a reliable way. * Scalability The system's growth should not cause serious disruption of service or loss of performance to users. 2.2 Architecture of the RHODOS Distributed File System An analysis of the distributed file facilities described in <ref> [Braban and Schlenk 1989] </ref>, [Brown et al. 1985], [Leach et al. 1985], [Levine 1987], [Mullender and Tanenbaum 1985], [Fridrich and Older 1985], [Sandberg 1986], [Gifford et al. 1988], and [Satyanarayanan et al. 1985] show that their development is based on different architectural models. <p> This requires the provision of primitives to: obtain new blocks, release blocks that are no longer required, and transfer data into and out of blocks. Our requirements and influenced with the result of an analysis of the File System for PM (Parallel Modules) <ref> [Braban and Schlenk 1989] </ref> and DOMAIN [Leach et al. 1985] we propose that RHO-DOS disk service will provide the following service functions: allocate block, free block, flush block, get block, and put block. <p> This implies that file operations must deal with data and attributes. We propose the file operations which satisfy our need for the basic file service and is the result of an analysis of distributed file systems presented in <ref> [Braban and Schlenk 1989] </ref>, [Brown et al. 1985], [Folts 1989], [Gifford et al. 1988], [Levine 1987], [Leach et al. 1985], [Mukherjee et al. 1988], and [Sandberg 1986]. <p> at the operating system level. * Program development: The task of efficient and reliable development of highly sophisticated distributed database application should become easy and less time consuming. 6.1 Transaction Service Operations On the basis of our requirements and the result of an analysis of the transaction service discussed in <ref> [Braban and Schlenk 1989] </ref>, [Brown et al. 1985], [Eppinger and Spector 1988], [Fridrich and Older 1981], [Mukherjee et al. 1988], [Paxton 1979], [Sturgis et al. 1980] we propose the following operations for the the RHODOS transaction service: trans begin, trans end, trans abort, tbegin, tcreate, topen, tdelete, tread, tpread, twrite, tpwrite, <p> The directory service can be better described by introducing its operations. Based on our requirements and motivated with the result of an analysis of the <ref> [Braban and Schlenk 1989] </ref>, [Sandberg 1986], and [Spector and Kazar 1989] our proposed operations of a directory service are as follows: create dir, open dir, read dir, insert dir, un name, change, get names, close, delete and ch dir. 8.2 Access Control Each RHODOS file has an owner and the signature
Reference: [Brown et al. 1985] <author> Brown, M.R., Kolling, K.N. and Taft, </author> <title> E.A. The Alpine File System. </title> <journal> ACM Transactions on Computer Systems 3, </journal> <volume> No. 4, </volume> <pages> pp. 261-293 </pages>
Reference-contexts: files and carry out operations on them in a reliable way. * Scalability The system's growth should not cause serious disruption of service or loss of performance to users. 2.2 Architecture of the RHODOS Distributed File System An analysis of the distributed file facilities described in [Braban and Schlenk 1989], <ref> [Brown et al. 1985] </ref>, [Leach et al. 1985], [Levine 1987], [Mullender and Tanenbaum 1985], [Fridrich and Older 1985], [Sandberg 1986], [Gifford et al. 1988], and [Satyanarayanan et al. 1985] show that their development is based on different architectural models. <p> This implies that file operations must deal with data and attributes. We propose the file operations which satisfy our need for the basic file service and is the result of an analysis of distributed file systems presented in [Braban and Schlenk 1989], <ref> [Brown et al. 1985] </ref>, [Folts 1989], [Gifford et al. 1988], [Levine 1987], [Leach et al. 1985], [Mukherjee et al. 1988], and [Sandberg 1986]. <p> level. * Program development: The task of efficient and reliable development of highly sophisticated distributed database application should become easy and less time consuming. 6.1 Transaction Service Operations On the basis of our requirements and the result of an analysis of the transaction service discussed in [Braban and Schlenk 1989], <ref> [Brown et al. 1985] </ref>, [Eppinger and Spector 1988], [Fridrich and Older 1981], [Mukherjee et al. 1988], [Paxton 1979], [Sturgis et al. 1980] we propose the following operations for the the RHODOS transaction service: trans begin, trans end, trans abort, tbegin, tcreate, topen, tdelete, tread, tpread, twrite, tpwrite, tdeldata, tdelpage, tfcntl, tlseek, <p> The consequence of the large number of versions is the increased number of disk operations and hence it is I/O oriented. On the other hand, in the intentions list approach <ref> [Brown et al. 1985] </ref>, [Gray 1978], [Lampson 1981], [Mukherjee et al. 1988], and [Sturgis et al. 1980] the server makes a list which contains a record for each operation (e.g., twrite) that will make changes to files.
Reference: [Coulouris and Dollimore 1988] <author> Coulouris, G.F. and Dollimore, J. </author> <title> Distributed Systems. Concepts and Design. </title> <publisher> Addison-Wesley </publisher>
Reference-contexts: The whole architecture and many solutions of the distributed file facility are original. However, we carried out our general design process based on the following [Braban and Schlenk 1989], <ref> [Coulouris and Dollimore 1988] </ref>, [Fridrich and Older 1981], [Gif-ford et al. 1988], [Goscinski 1991a], [Goscinski 1991b], [Leach et al. 1983], [Levine 1987], [Mullender and Tanenbaum 1985], [Sturgis et al. 1980] and [Nelson et al 1988]. <p> to achieve the serializability in the RHODOS system is that they can generate the problem of deadlock (a deadlock is a state in which each member of a group of transaction is waiting for some other members to release a lock.) Based on the result of an analysis of XDFS <ref> [Coulouris and Dollimore 1988] </ref> we propose to use timeout to resolve the deadlock in the RHODOS system. According to our solution each lock is given a time period after which the lock is vulnerable.
Reference: [Dion 1980] <author> Dion, J. </author> <title> The Cambridge File Server. </title> <journal> Operating Systems Review 14, </journal> <volume> No. 4, </volume> <pages> pp. 26-35 </pages>
Reference-contexts: and then locating the data blocks. 14 We propose that the retrieval of the location of a file and its data blocks, i.e., the translation process is carried out in two steps, known as two step translation method, which is also used in the implementation of Cambridge File Server (CFS) <ref> [Dion 1980] </ref>, [Needham and Herbert 1982]. The description of two step translation method proposed for RHODOS is as follows: * 1 st step: To perform an operation on a file requires: system name of the file; and identification of the file server where the file is located. <p> Therefore for the RHODOS system we propose mutable files. Note that the file servers such as XDFS [Sturgis et al. 1980], CFS <ref> [Dion 1980] </ref>, NFS [Osadzinski 1988], and LOCUS [Popek and Walker 1985] also provide mutable files. The AMOEBA [Mullender and Tanenbaum 1985] file system provides immutable files. 5.2 File Service Operations A file contains data and has attributes. This implies that file operations must deal with data and attributes.
Reference: [Eppinger and Spector 1988] <author> Eppinger, J.L. and Spector, A.Z. </author> <title> A Camelot Perspective. </title> <journal> UNIX Review 7, </journal> <volume> No. 1, </volume> <pages> pp. 58-67 </pages>
Reference-contexts: The task of efficient and reliable development of highly sophisticated distributed database application should become easy and less time consuming. 6.1 Transaction Service Operations On the basis of our requirements and the result of an analysis of the transaction service discussed in [Braban and Schlenk 1989], [Brown et al. 1985], <ref> [Eppinger and Spector 1988] </ref>, [Fridrich and Older 1981], [Mukherjee et al. 1988], [Paxton 1979], [Sturgis et al. 1980] we propose the following operations for the the RHODOS transaction service: trans begin, trans end, trans abort, tbegin, tcreate, topen, tdelete, tread, tpread, twrite, tpwrite, tdeldata, tdelpage, tfcntl, tlseek, tclose, tend, and tabort.
Reference: [Folts 1989] <author> Folts, H. </author> <title> OSI File Service. </title> <journal> IEEE Network. </journal> <volume> 3, No. 2, </volume> <pages> pp. 52 </pages>
Reference-contexts: This implies that file operations must deal with data and attributes. We propose the file operations which satisfy our need for the basic file service and is the result of an analysis of distributed file systems presented in [Braban and Schlenk 1989], [Brown et al. 1985], <ref> [Folts 1989] </ref>, [Gifford et al. 1988], [Levine 1987], [Leach et al. 1985], [Mukherjee et al. 1988], and [Sandberg 1986].
Reference: [Fridrich and Older 1981] <author> Fridrich, M. and Older, W. </author> <title> The FELIX File Server. </title> <booktitle> Proceedings of the 8th ACM Symposium on Operating Systems Principles Pacific Grove, California, </booktitle> <pages> pp. 37-44 </pages>
Reference-contexts: The whole architecture and many solutions of the distributed file facility are original. However, we carried out our general design process based on the following [Braban and Schlenk 1989], [Coulouris and Dollimore 1988], <ref> [Fridrich and Older 1981] </ref>, [Gif-ford et al. 1988], [Goscinski 1991a], [Goscinski 1991b], [Leach et al. 1983], [Levine 1987], [Mullender and Tanenbaum 1985], [Sturgis et al. 1980] and [Nelson et al 1988]. <p> and reliable development of highly sophisticated distributed database application should become easy and less time consuming. 6.1 Transaction Service Operations On the basis of our requirements and the result of an analysis of the transaction service discussed in [Braban and Schlenk 1989], [Brown et al. 1985], [Eppinger and Spector 1988], <ref> [Fridrich and Older 1981] </ref>, [Mukherjee et al. 1988], [Paxton 1979], [Sturgis et al. 1980] we propose the following operations for the the RHODOS transaction service: trans begin, trans end, trans abort, tbegin, tcreate, topen, tdelete, tread, tpread, twrite, tpwrite, tdeldata, tdelpage, tfcntl, tlseek, tclose, tend, and tabort.
Reference: [Fridrich and Older 1985] <author> Fridrich, M. and Older, W. </author> <title> Helix: The Architecture of the XMS Distributed File System. </title> <journal> IEEE Software 2, </journal> <volume> No. 3, </volume> <pages> pp. 21-29 </pages>
Reference-contexts: system's growth should not cause serious disruption of service or loss of performance to users. 2.2 Architecture of the RHODOS Distributed File System An analysis of the distributed file facilities described in [Braban and Schlenk 1989], [Brown et al. 1985], [Leach et al. 1985], [Levine 1987], [Mullender and Tanenbaum 1985], <ref> [Fridrich and Older 1985] </ref>, [Sandberg 1986], [Gifford et al. 1988], and [Satyanarayanan et al. 1985] show that their development is based on different architectural models. However, there are some common elements that allow to propose a general architecture, useful for research purposes.
Reference: [Gerrity et al. 1990] <author> Gerrity, G.W., Goscinski, A., Indulska, J., Toomey, W., Zhu., W. </author> <title> The RHODOS Distributed Operating System. </title> <type> Technical report CS90/4, </type> <institution> Department of Computer Science, University College, University of New South Wales, Canberra, </institution> <month> February </month> <year> 1990. </year>
Reference-contexts: A system server takes inter process requests from the user processes known as client process and returns one or more messages with the result <ref> [Gerrity et al. 1990] </ref>. A system server is made of either a single server process or a group of server processes. A lot of services in the RHODOS system are provided by system servers such as file server, file name server ("directory service"), load balancing server, authentication server etc.
Reference: [Gerrity et al. 1991] <author> Gerrity, G.W., Goscinski, A., Indulska, J. Toomey, W. and Zhu., W. </author> <title> Can We Study Design Issues of Distributed Operating Systems in a Generalized Way? | RHODOS. </title> <booktitle> Proceedings of the 2nd Symposium on Experiences with Distributed and Multiprocessor Systems (SEDMS II). </booktitle> <address> March 1991, Atlanta. </address>
Reference-contexts: Processes in RHODOS communicate with each other by exchanging messages in the form of requests and replies. A process in the RHODOS system is identified by the system name of its unique port <ref> [Gerrity et al. 1991] </ref> and this port is referred as process-id. A system server takes inter process requests from the user processes known as client process and returns one or more messages with the result [Gerrity et al. 1990].
Reference: [Gifford et al. 1988] <author> Gifford, D.K., Needham, R.M. and Schreader, </author> <title> M.D. The Ceder File System. </title> <journal> Communications of the ACM 31, </journal> <volume> No. 3, </volume> <pages> pp. 288-298 </pages>
Reference-contexts: disruption of service or loss of performance to users. 2.2 Architecture of the RHODOS Distributed File System An analysis of the distributed file facilities described in [Braban and Schlenk 1989], [Brown et al. 1985], [Leach et al. 1985], [Levine 1987], [Mullender and Tanenbaum 1985], [Fridrich and Older 1985], [Sandberg 1986], <ref> [Gifford et al. 1988] </ref>, and [Satyanarayanan et al. 1985] show that their development is based on different architectural models. However, there are some common elements that allow to propose a general architecture, useful for research purposes. Such a general architecture has been proposed in [Goscinski 1991a]. <p> Therefore there is no overhead for running the sophisticated database applications which have built-in mechanisms for concurrency control and transactions. 15 5.1 Mutable and Immutable Files An immutable file is one that cannot be modified once it has been created except to be deleted. In <ref> [Gifford et al. 1988] </ref> it has been emphasized that sharing only immutable files makes it easy to support consistent sharing. Each immutable file is represented by a history of immutable versions. The immutable file is not updated. <p> This implies that file operations must deal with data and attributes. We propose the file operations which satisfy our need for the basic file service and is the result of an analysis of distributed file systems presented in [Braban and Schlenk 1989], [Brown et al. 1985], [Folts 1989], <ref> [Gifford et al. 1988] </ref>, [Levine 1987], [Leach et al. 1985], [Mukherjee et al. 1988], and [Sandberg 1986].
Reference: [Goscinski 1991a] <author> Goscinski, A. </author> <title> Distributed Operating Systems the Logical Design. </title> <publisher> Addison Wesley. </publisher>
Reference-contexts: The whole architecture and many solutions of the distributed file facility are original. However, we carried out our general design process based on the following [Braban and Schlenk 1989], [Coulouris and Dollimore 1988], [Fridrich and Older 1981], [Gif-ford et al. 1988], <ref> [Goscinski 1991a] </ref>, [Goscinski 1991b], [Leach et al. 1983], [Levine 1987], [Mullender and Tanenbaum 1985], [Sturgis et al. 1980] and [Nelson et al 1988]. Moreover, the logical design of several services of the facility has been influenced by other works which will be referenced in the following sections. <p> However, there are some common elements that allow to propose a general architecture, useful for research purposes. Such a general architecture has been proposed in <ref> [Goscinski 1991a] </ref>. Here, we propose the architecture of a distributed file facility for RHODOS as illustrated in Fig. 1. 2 All functions of the RHODOS file facility are handled by separate servers: file server, file name server (directory service), authentication server, load balancing server.
Reference: [Goscinski 1991b] <author> Goscinski, A. </author> <title> The Scope for the Development of a Distributed File Facility for the RHODOS. </title> <type> Technical Report CS36/91, </type> <institution> Department of Computer Science, University College, University of New South Wales, Canberra, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: The whole architecture and many solutions of the distributed file facility are original. However, we carried out our general design process based on the following [Braban and Schlenk 1989], [Coulouris and Dollimore 1988], [Fridrich and Older 1981], [Gif-ford et al. 1988], [Goscinski 1991a], <ref> [Goscinski 1991b] </ref>, [Leach et al. 1983], [Levine 1987], [Mullender and Tanenbaum 1985], [Sturgis et al. 1980] and [Nelson et al 1988]. Moreover, the logical design of several services of the facility has been influenced by other works which will be referenced in the following sections. <p> This includes the definition of specific functional units, the placement of such units, and their interaction. This issue must be considered in the context of file facility design goals. 1 2.1 Design Goals of a Distributed File Facility Following the design goals of a distributed file facility <ref> [Goscinski 1991b] </ref>, we have decided the RHO DOS distributed file facility should fulfill the following design goals: * High performance Performance of a distributed file system should be such that users should not see differences between a distributed system and a time sharing system using similar resources.
Reference: [Gray 1978] <author> Gray, J. </author> <booktitle> Notes on Database Operating Systems, in Operating Systems. An Advanced Course Lecture Notes in Computer Science, </booktitle> <volume> No. 60, </volume> <publisher> Springer-Verlag, </publisher> <pages> pp. 394-481 </pages>
Reference-contexts: The consequence of the large number of versions is the increased number of disk operations and hence it is I/O oriented. On the other hand, in the intentions list approach [Brown et al. 1985], <ref> [Gray 1978] </ref>, [Lampson 1981], [Mukherjee et al. 1988], and [Sturgis et al. 1980] the server makes a list which contains a record for each operation (e.g., twrite) that will make changes to files.
Reference: [Haddock and Goscinski 1991] <author> Haddock, A. and Goscinski, A. </author> <title> The Development and Experiences With the RHODOS Naming Facility. </title> <type> Technical Report CS37/91, </type> <institution> Department of Computer Science, University College, University of New South Wales, Canberra, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: In RHODOS, the attributes assumed for RHODOS files are as follows <ref> [Haddock and Goscinski 1991] </ref>: * file size, date and time of file creation, date and time of file access, date and time of file modification, others; * text or binary; * subtypes of text files (sources, reports, manuals, papers, others) or subtypes of the binary files (compilers, linkers, debuggers, anti-viral software, <p> linkers, debuggers, anti-viral software, databases, others); * lower level of subtypes (e.g., compilers are divided into compilers for different programming languages; and after that may be divided into compilers from different software manufactures, etc); There are three types of attributes of an object: naming oriented, system oriented and dynamic attributes <ref> [Haddock and Goscinski 1991] </ref>. The system oriented attributes like file size, file creation date etc are oriented towards the file management and known as file-specific attributes. In RHODOS, it is the responsibility of the distributed file facility to manage the file-specific attributes. <p> All those replicated files which will be updated later are known as to-be-updated-versions. 8 Naming/Directory Service A naming facility for the RHODOS system provides the maximum possible autonomy and flexibility to users yet at the same time allows them to share all accessible objects (resources, services) <ref> [Haddock and Goscinski 1991] </ref>. This facility manages user names and their mappings into the system names that are meaningful at the machine level. System names are unique throughout a distributed system. This allows files to be referenced by text string names.
Reference: [Howard et al. 1988] <author> Howard, J.K., Kazar, M.L., Menees, S.G., Nichols, D.A., Satya-narayanan, M. and Sidebotham, R.N. </author> <title> Scale and Performance in a Distributed File System. </title> <journal> ACM Transactions on Computer Systems 6, </journal> <volume> No. 10, </volume> <pages> pp. 55-81 </pages>
Reference-contexts: Therefore to achieve the goal of high performance of the RHODOS system and motivated with the result of an analysis of the caching system presented in <ref> [Howard et al. 1988] </ref>, [Nelson et al 1988], [Ousterhout et al. 1988], [Satyanarayanan et al. 1985], and [Schroeder et al. 1985] we propose for RHODOS a caching system based on the client memory.
Reference: [Israel et al. 1978] <author> Israel, J.E., Mitchell, J.G. and Sturgis, </author> <title> H.E. Separating Data from Function in a Distributed File System, in Operating Systems: Theory and Practice. </title> <editor> (Ed. Lanciaux D.), </editor> <publisher> North-Holland, </publisher> <pages> pp. 17-27 </pages>
Reference: [Indulska and Goscinski 1989] <author> Indulska, J., Goscinski, A. </author> <title> A Simulation Study of Resource Addressing Methods for a Distributed Operating System. </title> <journal> Applied In-formatics A1, </journal> <volume> No. 6, </volume> <pages> pp 244-254. </pages>
Reference-contexts: The process of selection is such that it either * minimizes communication overhead between the client and server; or * optimizes the storage utilization across all of the servers; or * associates a server with respect to a particular application. This issue has been dealt in <ref> [Indulska and Goscinski 1989] </ref> and is a subject of separate research project. 9 Summary There are a number of services provided by a distributed system, but one of the most important set of services is provided by the the file facility.
Reference: [Lampson 1981] <author> Lampson, B.W. </author> <title> Atomic Transactions, in Distributed Systems - Architecture and Implementation. An Advanced Course Lamp-son, </title> <editor> B.W. Paul, M. and Siegart , H.J. (editors), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 105, </volume> <pages> pp. 246-264 </pages>
Reference-contexts: To achieve this mirror images of the file location map, file indices, and all the important information of RHODOS file facility are kept in a separate disk drive (provided it exists), known as stable storage <ref> [Lampson 1981] </ref>, [Sturgis et al. 1980]. Note in the absence of a stable storage, the mirror images will be recorded duplicately on the same disk drive. 4.4 File Attributes Each of the types of the RHODOS objects is characterized by different properties (attributes), and different number of attributes. <p> An atomic transaction <ref> [Lampson 1981] </ref> is an all-or-nothing computation|either it installs a complete collection of changes or none, even if interrupted by a failure. * Recoverability: If the transaction aborts then the transaction service should present a scenario as if the transaction had not started at all. <p> The consequence of the large number of versions is the increased number of disk operations and hence it is I/O oriented. On the other hand, in the intentions list approach [Brown et al. 1985], [Gray 1978], <ref> [Lampson 1981] </ref>, [Mukherjee et al. 1988], and [Sturgis et al. 1980] the server makes a list which contains a record for each operation (e.g., twrite) that will make changes to files.
Reference: [Leach et al. 1983] <author> Leach, P.J., Levine, P.H., Douros, B.P., Hamilton, J.A. ,Nelson, D.L. and Stumpf, B.L. </author> <title> The Architecture of an Integrated Local Network. </title> <journal> IEEE Journal on Selected Areas in Communications SACP1, </journal> <volume> No. 5, </volume> <pages> pp. 842-856 </pages>
Reference-contexts: The whole architecture and many solutions of the distributed file facility are original. However, we carried out our general design process based on the following [Braban and Schlenk 1989], [Coulouris and Dollimore 1988], [Fridrich and Older 1981], [Gif-ford et al. 1988], [Goscinski 1991a], [Goscinski 1991b], <ref> [Leach et al. 1983] </ref>, [Levine 1987], [Mullender and Tanenbaum 1985], [Sturgis et al. 1980] and [Nelson et al 1988]. Moreover, the logical design of several services of the facility has been influenced by other works which will be referenced in the following sections. <p> All other files will be subjected to fragment level locking as illustrated in Fig. 6. Based on our requirements and the result of an analysis of operations required on locks as presented in the DOMAIN system <ref> [Leach et al. 1983] </ref> we propose the following lock operations for the RHODOS system: get record, set lock and unlock.
Reference: [Leach et al. 1985] <author> Leach, P.J., Levine, P.H., amilton, J.A. and Stumpf, B.L. </author> <title> The File System of an Integrated Local Network. </title> <booktitle> ACM Computer Science Conference New Orleans </booktitle>
Reference-contexts: operations on them in a reliable way. * Scalability The system's growth should not cause serious disruption of service or loss of performance to users. 2.2 Architecture of the RHODOS Distributed File System An analysis of the distributed file facilities described in [Braban and Schlenk 1989], [Brown et al. 1985], <ref> [Leach et al. 1985] </ref>, [Levine 1987], [Mullender and Tanenbaum 1985], [Fridrich and Older 1985], [Sandberg 1986], [Gifford et al. 1988], and [Satyanarayanan et al. 1985] show that their development is based on different architectural models. <p> This requires the provision of primitives to: obtain new blocks, release blocks that are no longer required, and transfer data into and out of blocks. Our requirements and influenced with the result of an analysis of the File System for PM (Parallel Modules) [Braban and Schlenk 1989] and DOMAIN <ref> [Leach et al. 1985] </ref> we propose that RHO-DOS disk service will provide the following service functions: allocate block, free block, flush block, get block, and put block. The syntax of these primitives allows more than one block to be retrieved and saved on the disk in one operation. <p> We propose the file operations which satisfy our need for the basic file service and is the result of an analysis of distributed file systems presented in [Braban and Schlenk 1989], [Brown et al. 1985], [Folts 1989], [Gifford et al. 1988], [Levine 1987], <ref> [Leach et al. 1985] </ref>, [Mukherjee et al. 1988], and [Sandberg 1986].
Reference: [Levine 1987] <author> Levine, P.H. </author> <title> The Apollo DOMAIN Distributed File System, Distributed Operating Systems Theory and Practice. Edited by. </title> <editor> Paker et al., </editor> <publisher> Springer-Verlag, </publisher> <pages> pp. 241-260 </pages>
Reference-contexts: The whole architecture and many solutions of the distributed file facility are original. However, we carried out our general design process based on the following [Braban and Schlenk 1989], [Coulouris and Dollimore 1988], [Fridrich and Older 1981], [Gif-ford et al. 1988], [Goscinski 1991a], [Goscinski 1991b], [Leach et al. 1983], <ref> [Levine 1987] </ref>, [Mullender and Tanenbaum 1985], [Sturgis et al. 1980] and [Nelson et al 1988]. Moreover, the logical design of several services of the facility has been influenced by other works which will be referenced in the following sections. <p> a reliable way. * Scalability The system's growth should not cause serious disruption of service or loss of performance to users. 2.2 Architecture of the RHODOS Distributed File System An analysis of the distributed file facilities described in [Braban and Schlenk 1989], [Brown et al. 1985], [Leach et al. 1985], <ref> [Levine 1987] </ref>, [Mullender and Tanenbaum 1985], [Fridrich and Older 1985], [Sandberg 1986], [Gifford et al. 1988], and [Satyanarayanan et al. 1985] show that their development is based on different architectural models. However, there are some common elements that allow to propose a general architecture, useful for research purposes. <p> We propose the file operations which satisfy our need for the basic file service and is the result of an analysis of distributed file systems presented in [Braban and Schlenk 1989], [Brown et al. 1985], [Folts 1989], [Gifford et al. 1988], <ref> [Levine 1987] </ref>, [Leach et al. 1985], [Mukherjee et al. 1988], and [Sandberg 1986].
Reference: [Levy and Silberschatz 1989] <author> Levy, E. and Silberschatz, A. </author> <title> Distributed File Systems: Concepts and Examples. </title> <institution> TRP89P04 Deaprtment of Computer Sciences, The University of Texas at Austin, </institution> <address> March Pacific Grove, California, </address> <pages> pp. 160-168 </pages>
Reference: [Mitchell and Dion 1982] <author> Mitchell, J. G. and Dion, J. </author> <title> A Comparison of Two Network Based File Servers. </title> <journal> Communications of the ACM. </journal> <volume> 25, No. 4, </volume> <pages> pp. 233-245 </pages>
Reference-contexts: On the basis of this requirement and influenced with the result of the study of an analysis of the distributed transactions with a coordinating server as implemented in the XDFS file service <ref> [Mitchell and Dion 1982] </ref> and [Sturgis et al. 1980], we propose a distributed transaction service for the RHODOS system. Thus, the goal of our distributed transaction service is to allow all file servers to collaborate to provide an integrated file service transparent to location, distribution, and replication of files.
Reference: [Mukherjee et al. 1988] <author> Mukherjee, A., Kramer, J. and Magee, J. </author> <title> A Distributed File Server for Embedded Applications. </title> <journal> Software Engineering Journal No. </journal> <volume> 8, </volume> <pages> pp. 142-148 </pages>
Reference-contexts: We propose the file operations which satisfy our need for the basic file service and is the result of an analysis of distributed file systems presented in [Braban and Schlenk 1989], [Brown et al. 1985], [Folts 1989], [Gifford et al. 1988], [Levine 1987], [Leach et al. 1985], <ref> [Mukherjee et al. 1988] </ref>, and [Sandberg 1986]. <p> highly sophisticated distributed database application should become easy and less time consuming. 6.1 Transaction Service Operations On the basis of our requirements and the result of an analysis of the transaction service discussed in [Braban and Schlenk 1989], [Brown et al. 1985], [Eppinger and Spector 1988], [Fridrich and Older 1981], <ref> [Mukherjee et al. 1988] </ref>, [Paxton 1979], [Sturgis et al. 1980] we propose the following operations for the the RHODOS transaction service: trans begin, trans end, trans abort, tbegin, tcreate, topen, tdelete, tread, tpread, twrite, tpwrite, tdeldata, tdelpage, tfcntl, tlseek, tclose, tend, and tabort. <p> The consequence of the large number of versions is the increased number of disk operations and hence it is I/O oriented. On the other hand, in the intentions list approach [Brown et al. 1985], [Gray 1978], [Lampson 1981], <ref> [Mukherjee et al. 1988] </ref>, and [Sturgis et al. 1980] the server makes a list which contains a record for each operation (e.g., twrite) that will make changes to files.
Reference: [Mullender and Tanenbaum 1985] <author> Mullender, S.J. and Tanenbaum, </author> <title> A.S.A Distributed File Service Based on Optimistic Concurrency Control. </title> <booktitle> Proceedings of the Tenth ACM Symposium on Operating Systems Principles Orcas Island, </booktitle> <address> Washington, </address> <pages> pp. 51-62 </pages>
Reference-contexts: However, we carried out our general design process based on the following [Braban and Schlenk 1989], [Coulouris and Dollimore 1988], [Fridrich and Older 1981], [Gif-ford et al. 1988], [Goscinski 1991a], [Goscinski 1991b], [Leach et al. 1983], [Levine 1987], <ref> [Mullender and Tanenbaum 1985] </ref>, [Sturgis et al. 1980] and [Nelson et al 1988]. Moreover, the logical design of several services of the facility has been influenced by other works which will be referenced in the following sections. <p> way. * Scalability The system's growth should not cause serious disruption of service or loss of performance to users. 2.2 Architecture of the RHODOS Distributed File System An analysis of the distributed file facilities described in [Braban and Schlenk 1989], [Brown et al. 1985], [Leach et al. 1985], [Levine 1987], <ref> [Mullender and Tanenbaum 1985] </ref>, [Fridrich and Older 1985], [Sandberg 1986], [Gifford et al. 1988], and [Satyanarayanan et al. 1985] show that their development is based on different architectural models. However, there are some common elements that allow to propose a general architecture, useful for research purposes. <p> Therefore for the RHODOS system we propose mutable files. Note that the file servers such as XDFS [Sturgis et al. 1980], CFS [Dion 1980], NFS [Osadzinski 1988], and LOCUS [Popek and Walker 1985] also provide mutable files. The AMOEBA <ref> [Mullender and Tanenbaum 1985] </ref> file system provides immutable files. 5.2 File Service Operations A file contains data and has attributes. This implies that file operations must deal with data and attributes.
Reference: [Needham and Herbert 1982] <author> Needham, R. M. and Herbert, A. J. </author> <title> The Cambridge Distributed Computing System. </title> <publisher> Addison-Wesley </publisher>
Reference-contexts: locating the data blocks. 14 We propose that the retrieval of the location of a file and its data blocks, i.e., the translation process is carried out in two steps, known as two step translation method, which is also used in the implementation of Cambridge File Server (CFS) [Dion 1980], <ref> [Needham and Herbert 1982] </ref>. The description of two step translation method proposed for RHODOS is as follows: * 1 st step: To perform an operation on a file requires: system name of the file; and identification of the file server where the file is located.
Reference: [Nelson et al 1988] <author> Nelson, M., Welch, B. and Ousterhout, J.K. </author> <title> Caching in the Sprite Network File System. </title> <journal> ACM Transactions on Compuyter Systems 6, </journal> <volume> No. </volume> <pages> 1 </pages>
Reference-contexts: However, we carried out our general design process based on the following [Braban and Schlenk 1989], [Coulouris and Dollimore 1988], [Fridrich and Older 1981], [Gif-ford et al. 1988], [Goscinski 1991a], [Goscinski 1991b], [Leach et al. 1983], [Levine 1987], [Mullender and Tanenbaum 1985], [Sturgis et al. 1980] and <ref> [Nelson et al 1988] </ref>. Moreover, the logical design of several services of the facility has been influenced by other works which will be referenced in the following sections. <p> Therefore to achieve the goal of high performance of the RHODOS system and motivated with the result of an analysis of the caching system presented in [Howard et al. 1988], <ref> [Nelson et al 1988] </ref>, [Ousterhout et al. 1988], [Satyanarayanan et al. 1985], and [Schroeder et al. 1985] we propose for RHODOS a caching system based on the client memory.
Reference: [Osadzinski 1988] <author> Osadzinski, A. </author> <title> The Network File System (NFS). </title> <booktitle> Computer Standards & Interfaces 8, </booktitle> <pages> pp. 45-48 </pages>
Reference-contexts: Therefore for the RHODOS system we propose mutable files. Note that the file servers such as XDFS [Sturgis et al. 1980], CFS [Dion 1980], NFS <ref> [Osadzinski 1988] </ref>, and LOCUS [Popek and Walker 1985] also provide mutable files. The AMOEBA [Mullender and Tanenbaum 1985] file system provides immutable files. 5.2 File Service Operations A file contains data and has attributes. This implies that file operations must deal with data and attributes.
Reference: [Ousterhout et al. 1988] <author> Ousterhout, J.K., Cherensen, A.R., Douglis, F., Nelson, M.N. and Welch, B.B. </author> <title> The Sprite Network Operating System. </title> <journal> IEEE Computer 21, </journal> <volume> No. 2, </volume> <pages> pp. 23-36 </pages>
Reference-contexts: Therefore to achieve the goal of high performance of the RHODOS system and motivated with the result of an analysis of the caching system presented in [Howard et al. 1988], [Nelson et al 1988], <ref> [Ousterhout et al. 1988] </ref>, [Satyanarayanan et al. 1985], and [Schroeder et al. 1985] we propose for RHODOS a caching system based on the client memory.
Reference: [Panadiwal 1992a] <author> Panadiwal. R. </author> <title> The Logical Design of the RHODOS Disk and File Service. </title> <type> Technical Report 1992. </type> <institution> Department of Computing and Mathematics, Deakin University, </institution> <note> Geelong, Vic-3217. (in preparation) </note>
Reference-contexts: A caching facility in RHODOS addresses the following design issues: * granularity of cached data, * the manner of propagating of modifications on cached copies, * the ways of determining of consistency of cached data. These issues have been adequately dealt in <ref> [Panadiwal 1992a] </ref>. In RHODOS, an external memory cache is an area of main memory in the client computer and file server which is organized as an array of blocks and fragments. Each cache block and fragment has an associated block-descriptor and cache pointer.
Reference: [Panadiwal 1992b] <author> Panadiwal. R. </author> <title> The Logical Design of the RHODOS Transaction Service. </title> <type> Technical Report 1992. </type> <institution> Department of Computing and Mathematics, Deakin University, </institution> <note> Geelong, Vic-3217. (in preparation) </note>
Reference-contexts: The transaction whose lock is broken is aborted. The design issues related with the use of timeouts have been dealt with in <ref> [Panadiwal 1992b] </ref>. 6.3 Recovery After Failures In the RHODOS distributed environment the atomicity of a transactions is threatened by two factors: concurrency and the failure of processes and computers. This generates the need for recovery.
Reference: [Paxton 1979] <author> Paxton, </author> <title> W.H. A Client P Based Transaction System to Maintain Data Integrity. </title> <booktitle> Proceedings of the Seventh Symposium on Operating Systems Principles Pacific Grove, California, </booktitle> <pages> pp. 18-23 </pages>
Reference-contexts: application should become easy and less time consuming. 6.1 Transaction Service Operations On the basis of our requirements and the result of an analysis of the transaction service discussed in [Braban and Schlenk 1989], [Brown et al. 1985], [Eppinger and Spector 1988], [Fridrich and Older 1981], [Mukherjee et al. 1988], <ref> [Paxton 1979] </ref>, [Sturgis et al. 1980] we propose the following operations for the the RHODOS transaction service: trans begin, trans end, trans abort, tbegin, tcreate, topen, tdelete, tread, tpread, twrite, tpwrite, tdeldata, tdelpage, tfcntl, tlseek, tclose, tend, and tabort.
Reference: [Popek and Walker 1985] <author> Popek, G. and Walker, B. </author> <title> (Editors) The LOCUS Distributed System Architecture. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Therefore for the RHODOS system we propose mutable files. Note that the file servers such as XDFS [Sturgis et al. 1980], CFS [Dion 1980], NFS [Osadzinski 1988], and LOCUS <ref> [Popek and Walker 1985] </ref> also provide mutable files. The AMOEBA [Mullender and Tanenbaum 1985] file system provides immutable files. 5.2 File Service Operations A file contains data and has attributes. This implies that file operations must deal with data and attributes.
Reference: [Sandberg 1986] <author> Sandberg,R. </author> <title> The Sun Network File System: Design, Implementation and Experience. Sun Microsystems, </title> <publisher> Inc. </publisher>
Reference-contexts: cause serious disruption of service or loss of performance to users. 2.2 Architecture of the RHODOS Distributed File System An analysis of the distributed file facilities described in [Braban and Schlenk 1989], [Brown et al. 1985], [Leach et al. 1985], [Levine 1987], [Mullender and Tanenbaum 1985], [Fridrich and Older 1985], <ref> [Sandberg 1986] </ref>, [Gifford et al. 1988], and [Satyanarayanan et al. 1985] show that their development is based on different architectural models. However, there are some common elements that allow to propose a general architecture, useful for research purposes. Such a general architecture has been proposed in [Goscinski 1991a]. <p> the file operations which satisfy our need for the basic file service and is the result of an analysis of distributed file systems presented in [Braban and Schlenk 1989], [Brown et al. 1985], [Folts 1989], [Gifford et al. 1988], [Levine 1987], [Leach et al. 1985], [Mukherjee et al. 1988], and <ref> [Sandberg 1986] </ref>. <p> The directory service can be better described by introducing its operations. Based on our requirements and motivated with the result of an analysis of the [Braban and Schlenk 1989], <ref> [Sandberg 1986] </ref>, and [Spector and Kazar 1989] our proposed operations of a directory service are as follows: create dir, open dir, read dir, insert dir, un name, change, get names, close, delete and ch dir. 8.2 Access Control Each RHODOS file has an owner and the signature of the owner, i.e.,
Reference: [Satyanarayanan et al. 1985] <author> Satyanarayanan, M., Howard, J.H., Nichols, D.A., Sidebotham, R.N., Spector, A.Z. and West, M.J. </author> <title> ITC Distributed File System: </title> <booktitle> Principles and Design. Proceedings of the 10th Sympsium on Operating Systems Principles Orcas Island, </booktitle> <pages> pp. 35-50 </pages>
Reference-contexts: of performance to users. 2.2 Architecture of the RHODOS Distributed File System An analysis of the distributed file facilities described in [Braban and Schlenk 1989], [Brown et al. 1985], [Leach et al. 1985], [Levine 1987], [Mullender and Tanenbaum 1985], [Fridrich and Older 1985], [Sandberg 1986], [Gifford et al. 1988], and <ref> [Satyanarayanan et al. 1985] </ref> show that their development is based on different architectural models. However, there are some common elements that allow to propose a general architecture, useful for research purposes. Such a general architecture has been proposed in [Goscinski 1991a]. <p> Therefore to achieve the goal of high performance of the RHODOS system and motivated with the result of an analysis of the caching system presented in [Howard et al. 1988], [Nelson et al 1988], [Ousterhout et al. 1988], <ref> [Satyanarayanan et al. 1985] </ref>, and [Schroeder et al. 1985] we propose for RHODOS a caching system based on the client memory.
Reference: [Schroeder et al. 1985] <author> Schroeder, M.D., Gifford, D.K. and Needham, </author> <title> R.M. A Caching File System for a Programmer's Workstation. </title> <booktitle> Proceedings of the 10th Sympsium on Operating Systems Principles Orcas Island, </booktitle> <pages> pp. 25-32 </pages>
Reference-contexts: Therefore to achieve the goal of high performance of the RHODOS system and motivated with the result of an analysis of the caching system presented in [Howard et al. 1988], [Nelson et al 1988], [Ousterhout et al. 1988], [Satyanarayanan et al. 1985], and <ref> [Schroeder et al. 1985] </ref> we propose for RHODOS a caching system based on the client memory.
Reference: [Spector and Kazar 1989] <author> Spector, A.Z. and Kazar, </author> <title> M.L. Uniting File Systems. </title> <journal> Unix Review 7, </journal> <volume> No. </volume> <pages> 3 pp. 61-70 </pages>
Reference-contexts: The directory service can be better described by introducing its operations. Based on our requirements and motivated with the result of an analysis of the [Braban and Schlenk 1989], [Sandberg 1986], and <ref> [Spector and Kazar 1989] </ref> our proposed operations of a directory service are as follows: create dir, open dir, read dir, insert dir, un name, change, get names, close, delete and ch dir. 8.2 Access Control Each RHODOS file has an owner and the signature of the owner, i.e., the userID is
Reference: [Sturgis et al. 1980] <author> Sturgis, H., Mitchell, J.G. and Israel, J. </author> <title> Issues in the Design and Use of a Distributed File System. </title> <journal> Operating Systems Review 14, </journal> <volume> No. 3, </volume> <pages> pp. 15-18 </pages>
Reference-contexts: However, we carried out our general design process based on the following [Braban and Schlenk 1989], [Coulouris and Dollimore 1988], [Fridrich and Older 1981], [Gif-ford et al. 1988], [Goscinski 1991a], [Goscinski 1991b], [Leach et al. 1983], [Levine 1987], [Mullender and Tanenbaum 1985], <ref> [Sturgis et al. 1980] </ref> and [Nelson et al 1988]. Moreover, the logical design of several services of the facility has been influenced by other works which will be referenced in the following sections. <p> To achieve this mirror images of the file location map, file indices, and all the important information of RHODOS file facility are kept in a separate disk drive (provided it exists), known as stable storage [Lampson 1981], <ref> [Sturgis et al. 1980] </ref>. Note in the absence of a stable storage, the mirror images will be recorded duplicately on the same disk drive. 4.4 File Attributes Each of the types of the RHODOS objects is characterized by different properties (attributes), and different number of attributes. <p> Therefore for the RHODOS system we propose mutable files. Note that the file servers such as XDFS <ref> [Sturgis et al. 1980] </ref>, CFS [Dion 1980], NFS [Osadzinski 1988], and LOCUS [Popek and Walker 1985] also provide mutable files. The AMOEBA [Mullender and Tanenbaum 1985] file system provides immutable files. 5.2 File Service Operations A file contains data and has attributes. <p> become easy and less time consuming. 6.1 Transaction Service Operations On the basis of our requirements and the result of an analysis of the transaction service discussed in [Braban and Schlenk 1989], [Brown et al. 1985], [Eppinger and Spector 1988], [Fridrich and Older 1981], [Mukherjee et al. 1988], [Paxton 1979], <ref> [Sturgis et al. 1980] </ref> we propose the following operations for the the RHODOS transaction service: trans begin, trans end, trans abort, tbegin, tcreate, topen, tdelete, tread, tpread, twrite, tpwrite, tdeldata, tdelpage, tfcntl, tlseek, tclose, tend, and tabort. <p> The consequence of the large number of versions is the increased number of disk operations and hence it is I/O oriented. On the other hand, in the intentions list approach [Brown et al. 1985], [Gray 1978], [Lampson 1981], [Mukherjee et al. 1988], and <ref> [Sturgis et al. 1980] </ref> the server makes a list which contains a record for each operation (e.g., twrite) that will make changes to files. Thus, when for example a write operation is performed, its intention is stored in the intentions list rather than making updates to the file involved. <p> On the basis of this requirement and influenced with the result of the study of an analysis of the distributed transactions with a coordinating server as implemented in the XDFS file service [Mitchell and Dion 1982] and <ref> [Sturgis et al. 1980] </ref>, we propose a distributed transaction service for the RHODOS system. Thus, the goal of our distributed transaction service is to allow all file servers to collaborate to provide an integrated file service transparent to location, distribution, and replication of files.
Reference: [Walker et al. 1983] <author> Walker, B., Popek, G., English, R., Kline, C. and Thiel, G. </author> <title> The LOCUS Distributed Operating System. </title> <booktitle> Proceedings of the 9th ACM Symposium on Operating Systems Principles Bretton Woods, </booktitle> <publisher> N.H., </publisher> <pages> pp. 49-70 </pages>
References-found: 41

