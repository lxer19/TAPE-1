URL: http://www.eecs.umich.edu/~davidvc/publications/bc.ps
Refering-URL: http://www.eecs.umich.edu/~davidvc/publications.html
Root-URL: http://www.cs.umich.edu
Title: by Faster Static Timing Analysis via Bus Compression  
Author: David Van Campenhout and Trevor Mudge 
Date: 285-96  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> K. Sakallah, T. Mudge, O. Olukotun, checkTc and minTc: </author> <title> Timing Verification and Optimal Clocking of Synchronous Digital Circuits, </title> <booktitle> in ICCAD-90 Digest of Technical Papers, </booktitle> <pages> pp. 552-555, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: First we review a popular model for static timing verification and optimization. 2 SMO Model A comprehensive model for analyzing the temporal behavior of synchronous systems was proposed by Sakallah, Mudge and Okulotun <ref> [1] </ref> (SMO). The SMO model assumes a multi-phase clocking system. All phases have a common clock period. During that clock period, each phase makes exactly one rising and one falling transition. The circuit is modeled by a network of synchronizers (either level-sensitive latches, or edge triggered ip-ops). <p> Another timing problem consists of finding the optimal clock schedule, i.e., the clock schedule with the smallest clock period that still satisfies all constraints. The optimization problem was originally tackled by linear programming <ref> [1] </ref>. However, Szymanski [4] proposed a more efficient approach. First the minimum cycle time set by the loops is computed. Subsequently all relevant constraints with respect to that cycle time are generated. The resulting lin ear program is much smaller in size than that of [1]. <p> originally tackled by linear programming <ref> [1] </ref>. However, Szymanski [4] proposed a more efficient approach. First the minimum cycle time set by the loops is computed. Subsequently all relevant constraints with respect to that cycle time are generated. The resulting lin ear program is much smaller in size than that of [1]. Again the time complexity of the algorithm is . It is clear that the number of level-sensitive latches critically affects the execution time of the algorithms.
Reference: [2] <author> T. Burks, K. Sakallah and T. Mudge, </author> <title> Critical Paths in Circuits with Level-Sensitive Latches, </title> <journal> IEEE Trans. VLSI Systems, </journal> <volume> Vol. 3, No. 2, </volume> <pages> pp. 273-291, </pages> <month> June </month> <year> 1995. </year>
Reference: [3] <author> T. Szymanski, </author> <title> Verifying Clock Schedules, </title> <booktitle> in ICCAD-90 Digest of Technical Papers, </booktitle> <year> 1990, </year> <pages> pp. 399-404, </pages> <year> 1990. </year>
Reference-contexts: For timing verification, it is checked whether a given clock schedule is valid, i.e., all setup and hold constraints are met. This problem is solved by relaxation. It has been shown <ref> [3] </ref> that convergence is obtained after at most iterations if the problem is feasible, where is the number of level-sensitive latches. Each iteration has a complexity of , where is the number of edges in the graph. This results in a time complexity of for the complete algo rithm.
Reference: [4] <author> T. Szymanski, </author> <title> Computing Optimal Clock Schedules, </title> <booktitle> in Proc. of the 29th Design Automation Conference, </booktitle> <pages> pp. 399-404, </pages> <year> 1992. </year>
Reference-contexts: Another timing problem consists of finding the optimal clock schedule, i.e., the clock schedule with the smallest clock period that still satisfies all constraints. The optimization problem was originally tackled by linear programming [1]. However, Szymanski <ref> [4] </ref> proposed a more efficient approach. First the minimum cycle time set by the loops is computed. Subsequently all relevant constraints with respect to that cycle time are generated. The resulting lin ear program is much smaller in size than that of [1].
Reference: [5] <author> D. Van Campenhout, </author> <title> A CMOS ARM Processor, </title> <type> Internal Report, </type> <institution> University of Michigan, </institution> <year> 1995. </year>
Reference-contexts: CSE-TR-285-96: FASTER STATIC TIMING ANALYSIS VIA BUS COMPRESSION 3 4 Experimental Results The effectiveness of the approach was validated with some large designs. The first example is the core of a 32-bit ARM microprocessor <ref> [5] </ref>. The design contains 10,725 gates, and 1,007 latches. A second example is the oating-point unit of the Aurora3 processor [6]. This is a IEEE compliant double-precision oating-point processor. The netlist contains 86,800 gates and 8,518 latches. Some modifications to the original designs were made.
Reference: [6] <author> T. Huff, </author> <title> Architectural and Circuit Issues for a High Clock Rate Floating-Point Processor, </title> <type> Ph.D. Dissertation, </type> <institution> University of Michigan, </institution> <year> 1995. </year>
Reference-contexts: The first example is the core of a 32-bit ARM microprocessor [5]. The design contains 10,725 gates, and 1,007 latches. A second example is the oating-point unit of the Aurora3 processor <ref> [6] </ref>. This is a IEEE compliant double-precision oating-point processor. The netlist contains 86,800 gates and 8,518 latches. Some modifications to the original designs were made. For example, the register files were replaced by a single register addressed by the decoder logic.
References-found: 6

