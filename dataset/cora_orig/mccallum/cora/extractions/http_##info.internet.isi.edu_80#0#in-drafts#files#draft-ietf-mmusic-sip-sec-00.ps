URL: http://info.internet.isi.edu:80/0/in-drafts/files/draft-ietf-mmusic-sip-sec-00.ps
Refering-URL: http://info.internet.isi.edu:80/in-drafts/id-abstracts.html
Root-URL: http://www.isi.edu
Title: documents as Internet-Drafts. Internet-Drafts are draft documents valid for a maximum of six months a
Author: Peter Kirstein draft-ietf-mmusic-sip-sec-.txt Goli Montasser-Kohsari 
Keyword: SIP Security Using Public Key Algorithms  
Address: College London  
Affiliation: University  
Date: March 12th 1998  March 12th 1998 Edmund Whelan Expires: September 12th 1998  
Note: Internet Draft SIP Security  Kirstein et al. Page [1] Internet Engineering Task Force MMUSIC WG Internet Draft  Status of this Memo This document is an Internet-Draft. Internet-Drafts are working documents of the Internet Engineering Task Force (IETF), its areas, and its working groups. Note that other groups may also distribute working  and may be updated, replaced, or obsoleted by other documents at any time. It is inappropriate to use Internet-Drafts as reference material or to cite them other than as ``work in progress.'' Distribution of this document is unlimited. This document is  Force Comments are solicited and should be addressed to the working group's mailing list at confctrl@isi.edu and/or the authors.  
Abstract: To learn the current status of any Internet-Draft, please check the ``1id-abstracts.txt'' listing contained in the Internet-Drafts Shadow Directories on ftp.is.co.za (Africa), ftp.nordu.net (Europe), munnari.oz.au (Pacific Rim), ds.internic.net (US East Coast), or ftp.isi.edu (US West Coast). Abstract The Session Initiation Protocol (SIP) is a simple protocol designed to enable the invitation of users to multimedia sessions. This document is a companion draft to draft-ietf-mmusic-sip-04.txt, which defines SIP but doesnt specify any security mechanisms other than possible protection by lower-level security mechanisms such as SSL. This leaves SIP transactions vulnerable to attack and this document aims to extend the SIP protocol to address such security considerations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M.Handley SAP: </author> <title> Session Announcement Protocol Internet Draft: </title> <publisher> draft-ietf-mmusic-sap-00.txt, 27/Nov/96 </publisher>
Reference-contexts: SIP can be used to initiate sessions as well as invite members to sessions that have been advertised and established by other means such as SAP <ref> [1] </ref>, electronic mail, news groups, web pages and directories (LDAP). SIP is fully defined in [2] and, as this is a companion draft aiming to extend the basic functionality of SIP to address security considerations, familiarity with [2] is assumed.
Reference: [2] <author> M. Handley, H. Schulzrinne and E. Schooler SIP: </author> <title> Session Initiation Protocol Internet Draft: </title> <address> draft-ietf-mmusic-sip-04.txt, </address> <month> Nov 97 </month>
Reference-contexts: SIP can be used to initiate sessions as well as invite members to sessions that have been advertised and established by other means such as SAP [1], electronic mail, news groups, web pages and directories (LDAP). SIP is fully defined in <ref> [2] </ref> and, as this is a companion draft aiming to extend the basic functionality of SIP to address security considerations, familiarity with [2] is assumed. <p> SIP is fully defined in <ref> [2] </ref> and, as this is a companion draft aiming to extend the basic functionality of SIP to address security considerations, familiarity with [2] is assumed. <p> TCP allows easier passage through existing firewalls, and given the similar protocol design, allows common servers for SIP, HTTP and the RTSP [5]. Internet Draft SIP Security March 12th 1998 Kirstein et al. Page [7] 2. Security Considerations The basic SIP Draft <ref> [2] </ref> does not deal with security considerations other than to specify a reliance on lower-layer security mechanisms such as SSL [6] when this is required. However, a number of issues need to be addressed.
Reference: [3] <author> D. </author> <title> Crocker Standard for the Format of ARPA Internet Text Messages STD 11, </title> <type> RFC 822, </type> <institution> University of Delaware, </institution> <month> August </month> <year> 1982 </year>
Reference-contexts: A SIP message is either a request from a client to a server, or a response from a server to a client. SIP-message = Request | Response ; SIP messages Both Request and Response messages use the generic RFC822 <ref> [3] </ref> message format for transferring entities (the payload of the message). Both types of message consist of a start-line, one or more header fields, an empty line indicating the end of the header fields and an optional message body.
Reference: [4] <author> M. Handley and V. Jacobson SDP: </author> <title> Session Description Protocol Internet Draft: </title> <address> draft-ietf-mmusic-sdp-06.txt, </address> <month> Jan 97 </month>
Reference-contexts: Generic message = start-line *(general header | request header | entity header) CRLF Internet Draft SIP Security March 12th 1998 Kirstein et al. Page <ref> [4] </ref> [message body] start-line = Request Line | Status Line 1.3.1 Request The Request message format is shown below: Request = Request Line *(general header | request header | entity header) CRLF [message body] The Request Line begins with a method token, followed by the Request-URI, the protocol version and ending <p> If the call is rejected, or otherwise unsuccessful, the caller sends a BYE request instead of an ACK. The INVITE request typically contains a session description, for example written in SDP format <ref> [4] </ref>, that provides the called party with enough information to join the session. For multicast sessions, the session description enumerates the media types and formats that may be distributed to that session.
Reference: [5] <author> H. Schulzrinne, A. Rao and R. </author> <title> Lanphier Real Time Streaming Protocol (RTSP) Internet Engineering Task Force, Internet Draft, July 97 Work In Progress </title>
Reference-contexts: Applications making use of the security enhancements detailed in this paper MUST include a SIP-Version of SIP/2.1. Internet Draft SIP Security March 12th 1998 Kirstein et al. Page <ref> [5] </ref> 1.4 SIP Transaction When making a SIP call a caller first locates the appropriate sever and then sends a SIP request. The most common SIP operation is the invitation. <p> Routers can more readily snoop SIP UDP packets. TCP allows easier passage through existing firewalls, and given the similar protocol design, allows common servers for SIP, HTTP and the RTSP <ref> [5] </ref>. Internet Draft SIP Security March 12th 1998 Kirstein et al. Page [7] 2. Security Considerations The basic SIP Draft [2] does not deal with security considerations other than to specify a reliance on lower-layer security mechanisms such as SSL [6] when this is required.
Reference: [6] <author> A. Freier, P. Karlton and P. </author> <title> Kocher The SSL Protocol: </title> <note> Version 3.0 Internet Draft: draft-ietf-tls-ssl-version3-00.txt, Nov 96 </note>
Reference-contexts: Page <ref> [6] </ref> The redirect server accepts the INVITE request (1), contacts the location service as before (2,3) and, instead of contacting the newly found address itself, returns the address to the caller (4). <p> Internet Draft SIP Security March 12th 1998 Kirstein et al. Page [7] 2. Security Considerations The basic SIP Draft [2] does not deal with security considerations other than to specify a reliance on lower-layer security mechanisms such as SSL <ref> [6] </ref> when this is required. However, a number of issues need to be addressed.
Reference: [7] <author> R.L. Rivest, A. Shamir and L.M. </author> <title> Adleman A Method for Obtaining Digital Signatures and Public Key Cryptosystems, </title> <journal> Communications of the ACM, v. </journal> <volume> 21, </volume> <editor> n. </editor> <volume> 2, </volume> <month> Feb </month> <year> 1978, </year> <note> pp 120-126 PKCS#1 RSA Encryption Standard RSA Laboratories, Version 1.5, </note> <month> Nov </month> <year> 1993 </year>
Reference-contexts: Routers can more readily snoop SIP UDP packets. TCP allows easier passage through existing firewalls, and given the similar protocol design, allows common servers for SIP, HTTP and the RTSP [5]. Internet Draft SIP Security March 12th 1998 Kirstein et al. Page <ref> [7] </ref> 2. Security Considerations The basic SIP Draft [2] does not deal with security considerations other than to specify a reliance on lower-layer security mechanisms such as SSL [6] when this is required. However, a number of issues need to be addressed. <p> Some Public Key algorithms (e.g. RSA <ref> [7] </ref>) can be used for both digital signatures and encryption whereas others (e.g. DSA) can only be used for digital signatures. Most practical implementations of public key cryptography use a combination of symmetric and asymmetric algorithms. <p> KeyEncryptionAlgorithmIdentifier Sending and receiving agents MUST support Diffie-Hellman defined in [22]. Receiving agents SHOULD support rsaEncryption <ref> [7] </ref>. Incoming encrypted messages contain symmetric keys which are to be decrypted with a user's private key. The size of the private key is determined during key generation. Sending agents SHOULD support rsaEncryption. <p> Internet Draft SIP Security March 12th 1998 Kirstein et al. Page [18] 2. SignatureAlgorithmIdentifier Sending and receiving agents MUST support id-dsa defined in [23]. The algorithm parameters MUST be absent (not encoded as NULL). Receiving agents SHOULD support rsaEncryption, defined in <ref> [7] </ref>. Receiving agents SHOULD support verification of signatures using RSA public key sizes from 512 bits to 1024 bits. Sending agents SHOULD support rsaEncryption. Outgoing messages are signed with a user's private key. The size of the private key is determined during key generation. 3.
Reference: [8] <author> J. </author> <title> Callas OpenPGP Message Formats Internet Draft: </title> <address> draft-ietf-openpgp-formats-00.txt, </address> <month> Nov </month> <year> 1998 </year>
Reference-contexts: Consequently, the messages are generally secured using a symmetric algorithm and a different session key each time. This session key is then encrypted and distributed using public key algorithms. Internet Draft SIP Security March 12th 1998 Kirstein et al. Page <ref> [8] </ref> The two public key algorithm formats which we make use of in this document are PGP [8] and S/MIME [9]. These can be used for both encryption and authentication. As detailed later implementers MUST support PGP formats with support for S/MIME being OPTIONAL. 3. <p> This session key is then encrypted and distributed using public key algorithms. Internet Draft SIP Security March 12th 1998 Kirstein et al. Page <ref> [8] </ref> The two public key algorithm formats which we make use of in this document are PGP [8] and S/MIME [9]. These can be used for both encryption and authentication. As detailed later implementers MUST support PGP formats with support for S/MIME being OPTIONAL. 3. <p> SIP Security with PGP and MIME The method specified here to secure SIP with PGP and MIME draws on RFC 1847 [10] and RFC 2015 [11]. 3.1 PGP Data Formats PGP can generate either ASCII armour <ref> [8] </ref> or 8-bit binary output when encrypting data, generating a digital signature or extracting a public key. With SIP an 8-bit clear channel is available and so ASCII armour is not necessary. However, for interoperability issues receiving agents SHOULD support the receipt of both armoured and unarmoured data. <p> This allows signature of ACK, BYE etc SIP messages. 3.6 PGP Supported Algorithms In order to maintain wide interoperability the algorithms supported here follow <ref> [8] </ref> where fuller details can be found. 1. Public Key Algorithms - Implementations MUST implement DSA for signatures and Elgamal for encryption. Implementations SHOULD implement RSA encryption. 2. Symmetric Key Algorithm - Implementations MUST implement TripleDES. Implementations SHOULD implement IDEA and CAST5.Implementations MAY implement any other algorithm. 3.
Reference: [9] <author> B. </author> <title> Ramsdell S/MIME Version 3 Message Specification Internet Draft: </title> <address> draft-ietf-smime-msg-01.txt, </address> <month> Jan </month> <year> 1998 </year>
Reference-contexts: This session key is then encrypted and distributed using public key algorithms. Internet Draft SIP Security March 12th 1998 Kirstein et al. Page [8] The two public key algorithm formats which we make use of in this document are PGP [8] and S/MIME <ref> [9] </ref>. These can be used for both encryption and authentication. As detailed later implementers MUST support PGP formats with support for S/MIME being OPTIONAL. 3. <p> Nyone &lt;anyone@anywhere.com&gt; p=A. Nyone +44 171 123 4567 c=IN IP4 239.255.140.52/15 Internet Draft SIP Security March 12th 1998 Kirstein et al. Page <ref> [9] </ref> t=3098084400 3098091600 a=tool:sdr v2.5a0 a=type:test m=audio 19274 RTP/AVP 0 c=IN IP4 239.255.140.52/15 a=ptime:40 Outside the MIME body the only SIP headers used are those dealing with routing information which the proxies need access to. These include the From, To and Call-ID fields. <p> In addition sending agents MUST use the signedData content type to apply a digital signature to a message and an envelopedData type to encrypt a message. Further details of the specific requirements can be found in <ref> [9] </ref>. Prior to any security enhancements the SIP message is converted into MIME canonical format exactly as described in [20] and discussed in Section 3.2. When S/MIME formats are used then these are as defined in [9,15] where more complete details can be found. <p> This always carries a single CMS object which is the BER encoding of the ASN.1 syntax describing the object. The MIME headers of all application/pkcs-7-mime objects SHOULD include the optional smime-type parameters as described in <ref> [9] </ref>. 4.2 Encryption Only with S/MIME The SIP message, which has been converted to MIME canonical format, is processed into a CMS [15] object of type envelopedData. This is then inserted into an applicaton/pkcs7-mime entity. <p> This may be useful in an environment where automatic signature verification is desired, as no private key material is required to verify a signature. 4.5 S/MIME Supported Algorithms In order to maintain wide interoperability the algorithms supported here follow <ref> [9] </ref> where fuller details can be found. 1. KeyEncryptionAlgorithmIdentifier Sending and receiving agents MUST support Diffie-Hellman defined in [22]. Receiving agents SHOULD support rsaEncryption [7]. Incoming encrypted messages contain symmetric keys which are to be decrypted with a user's private key.
Reference: [10] <institution> J. Galvin et al Security Multiparts for MIME: Multipart/Signed and Multipart/Encrypted Technical Report RFC 1847, Internet Engineering Task Force, </institution> <month> Oct </month> <year> 1995 </year>
Reference-contexts: These can be used for both encryption and authentication. As detailed later implementers MUST support PGP formats with support for S/MIME being OPTIONAL. 3. SIP Security with PGP and MIME The method specified here to secure SIP with PGP and MIME draws on RFC 1847 <ref> [10] </ref> and RFC 2015 [11]. 3.1 PGP Data Formats PGP can generate either ASCII armour [8] or 8-bit binary output when encrypting data, generating a digital signature or extracting a public key. With SIP an 8-bit clear channel is available and so ASCII armour is not necessary. <p> Page <ref> [10] </ref> Content-Type: application/pgp-encrypted Version: 1 -foo Content-Type: application/octet-stream BEGIN PGP MESSAGE-Version: 2.6.3i hIwDjHVjzUcPoL0BA/0TlaOlL9qyUoEqP+jvSBKZLkQD9vU14O4WWf9h0EPUnHwQ 6f8r+9YaxPvU7a25Oct2QE2oOIr+smDr+Z/NKld58ueFqvNQ+kXac9vRAzv403vt YYrh4ug1eetpe8znskWHiJv+3LHQBsNyWwLwoC78rIM2KQomhNUC6nvD9BP03qYA AADXS6iYIRljShpEtc137hBhx4Q9sXAh2ki2OnEPom+q0Pqwy2C5SgZfHfotg9Pt 3HWRSJ64Se0VN2SQl9jFZ0oAkKtY79sCvkyhRGIjteLlufNbGBbLnbghN7uUBQi/ URhXSWybyVMc2NoQaivRQxyHcXvhs8/687qPG2tGParPro2dbk8HiUN88lcdUCuL +aD8qDllVhESVkdXfUHvL28fHhdM2ERaFCKQVOt9/7mnF3LB6SSbJKZuZJ+BYg/3 zuBVqDZo49yfURsgZ/iU2HWMXUydYEvxOR8= =1I+h END PGP MESSAGE Upon receipt of a multipart/encrypted body part the following is done. <p> Page [11] of application/pgp-signature. The message is created in the same way as above in that only the information relevant to the proxies is outside the PGP signed message. As described in <ref> [10] </ref>, the digital signature MUST be calculated over both the data to be signed and the set of content headers belonging to the body part to be signed. <p> When S/MIME formats are used then these are as defined in [9,15] where more complete details can be found. These documents are, in turn, based on RFC 1847 <ref> [10] </ref> and PKCS#7 [14]. 4.1 The application/pkcs7-mime Type The application/pkcs-7-mime type is used to carry CMS objects. This always carries a single CMS object which is the BER encoding of the ASN.1 syntax describing the object.
Reference: [11] <author> M. </author> <title> Elkins MIME Security With Pretty Good Privacy Technical Report RFC 2015, </title> <institution> Internet Engineering Task Force, </institution> <month> Oct </month> <year> 1996 </year>
Reference-contexts: These can be used for both encryption and authentication. As detailed later implementers MUST support PGP formats with support for S/MIME being OPTIONAL. 3. SIP Security with PGP and MIME The method specified here to secure SIP with PGP and MIME draws on RFC 1847 [10] and RFC 2015 <ref> [11] </ref>. 3.1 PGP Data Formats PGP can generate either ASCII armour [8] or 8-bit binary output when encrypting data, generating a digital signature or extracting a public key. With SIP an 8-bit clear channel is available and so ASCII armour is not necessary. <p> The second body part MUST contain the PGP digital signature and MUST be labelled with a content-type Internet Draft SIP Security March 12th 1998 Kirstein et al. Page <ref> [11] </ref> of application/pgp-signature. The message is created in the same way as above in that only the information relevant to the proxies is outside the PGP signed message. <p> There are two methods for accomplishing this <ref> [11] </ref>. The data can be both encrypted and then signed or can undergo a joint encryption and signing process. Sending agents MUST support the joint process.
Reference: [12] <institution> X.208 Specification of Abstract Syntax Notation One (ASN.1) ITU-T Recommendations, </institution> <year> 1988 </year>
Reference-contexts: Page <ref> [12] </ref> The "&gt;"s in the previous example indicate the portion of the data over which the signature was calculated. <p> The Cryptographic Message Syntax (CMS) is derived from PKCS#7 [14] and is fully defined in [15]. This syntax is used here to digitally sign or encrypt SIP messages and describes an encapsulation syntax for data protection. The CMS values are generated using ASN.1 <ref> [12] </ref> using BER encoding [13] and values are generally represented as octet strings.
Reference: [13] <author> X.209 BER: </author> <title> Basic Encoding Rules for ASN.1 ITU-T Recommendations, </title> <year> 1988 </year>
Reference-contexts: Nyone &lt;anyone@anywhere.com&gt; &gt; p=A. Nyone +44 171 123 4567 &gt; c=IN IP4 239.255.140.52/15 &gt; a=tool:sdr v2.5a0 &gt; a=type:test &gt; m=audio 19274 RTP/AVP 0 Internet Draft SIP Security March 12th 1998 Kirstein et al. Page <ref> [13] </ref> &gt; c=IN IP4 239.255.140.52/15 &gt; a=ptime:40 &gt; &gt; Content-Type: application/pgp-signature &gt; &gt; -BEGIN PGP MESSAGE &gt; Version: 2.6.3i &gt; &gt; iQCVAwUBMJrRF2N9oWBghPDJAQE9UQQAtl7LuRVndBjrk4EqYBIb3h5QXIX/LC// &gt; jJV5bNvkZIGPIcEmI5iFd9boEgvpirHtIREEqLQRkYNoBActFBZmh9GC3C041WGq &gt; uMbrbxc+nIs1TIKlA08rVi9ig/2Yh7LFrK5Ein57U/W72vgSxLhe/zhdfolT9Brn &gt; HOxEa44b+EI= &gt; =ndaj &gt; -END PGP MESSAGE &gt; -END PGP MESSAGE -foo The text preceded by '&gt;' indicates that it is really encrypted, but <p> The Cryptographic Message Syntax (CMS) is derived from PKCS#7 [14] and is fully defined in [15]. This syntax is used here to digitally sign or encrypt SIP messages and describes an encapsulation syntax for data protection. The CMS values are generated using ASN.1 [12] using BER encoding <ref> [13] </ref> and values are generally represented as octet strings.
Reference: [14] <institution> PKCS#7 Cryptographic Message Syntax Standard RSA Laboratories, </institution> <note> Version 1.5, Nov 1993 Internet Draft SIP Security March 12th 1998 Kirstein et al. Page [20] </note>
Reference-contexts: Implementations SHOULD implement RSA encryption. 2. Symmetric Key Algorithm - Implementations MUST implement TripleDES. Implementations SHOULD implement IDEA and CAST5.Implementations MAY implement any other algorithm. 3. Compression Algorithms - Implementations MUST implement uncompressed data. Implementations SHOULD implement ZIP. Internet Draft SIP Security March 12th 1998 Kirstein et al. Page <ref> [14] </ref> 4. Hash Algorithms - Implementations MUST implement SHA-1. Implementations SHOULD implement MD5. 4. SIP Security with S/MIME Support for the use of the S/MIME message format is OPTIONAL in this specification. The Cryptographic Message Syntax (CMS) is derived from PKCS#7 [14] and is fully defined in [15]. <p> Page <ref> [14] </ref> 4. Hash Algorithms - Implementations MUST implement SHA-1. Implementations SHOULD implement MD5. 4. SIP Security with S/MIME Support for the use of the S/MIME message format is OPTIONAL in this specification. The Cryptographic Message Syntax (CMS) is derived from PKCS#7 [14] and is fully defined in [15]. This syntax is used here to digitally sign or encrypt SIP messages and describes an encapsulation syntax for data protection. The CMS values are generated using ASN.1 [12] using BER encoding [13] and values are generally represented as octet strings. <p> When S/MIME formats are used then these are as defined in [9,15] where more complete details can be found. These documents are, in turn, based on RFC 1847 [10] and PKCS#7 <ref> [14] </ref>. 4.1 The application/pkcs7-mime Type The application/pkcs-7-mime type is used to carry CMS objects. This always carries a single CMS object which is the BER encoding of the ASN.1 syntax describing the object.
Reference: [15] <author> R. </author> <title> Housley Cryptographic Message Syntax Internet Draft: </title> <address> draft-ietf-smime-cms-03.txt, </address> <month> Jan </month> <year> 1998 </year>
Reference-contexts: Page [14] 4. Hash Algorithms - Implementations MUST implement SHA-1. Implementations SHOULD implement MD5. 4. SIP Security with S/MIME Support for the use of the S/MIME message format is OPTIONAL in this specification. The Cryptographic Message Syntax (CMS) is derived from PKCS#7 [14] and is fully defined in <ref> [15] </ref>. This syntax is used here to digitally sign or encrypt SIP messages and describes an encapsulation syntax for data protection. The CMS values are generated using ASN.1 [12] using BER encoding [13] and values are generally represented as octet strings. <p> CMS associates a protection content type with a protection content and has ASN.1 type ContentInfo: ContentInfo ::= SEQUENCE - ContentType ContentType, Content [0] EXPLICIT ANY DEFINED BY contentType - ContentType ::= OBJECT IDENTIFIER ContentType indicates the type of protection content and is an Object Identifier. Six are defined in <ref> [15] </ref> but only Data, SignedData and EnvelopedData are of relevance to this document. Content is the actual protected content. Sending agents MUST use the data content type as the content within other content types to indicate the message content which has had security services applied to it. <p> The MIME headers of all application/pkcs-7-mime objects SHOULD include the optional smime-type parameters as described in [9]. 4.2 Encryption Only with S/MIME The SIP message, which has been converted to MIME canonical format, is processed into a CMS <ref> [15] </ref> object of type envelopedData. This is then inserted into an applicaton/pkcs7-mime entity. The smime-type parameter for enveloped-only messages is enveloped-data and the file extension for this type of message is .p7m. A sample message would be: INVITE j.doe@acme.com SIP/2.1 Internet Draft SIP Security March 12th 1998 Kirstein et al. <p> This is then inserted into an applicaton/pkcs7-mime entity. The smime-type parameter for enveloped-only messages is enveloped-data and the file extension for this type of message is .p7m. A sample message would be: INVITE j.doe@acme.com SIP/2.1 Internet Draft SIP Security March 12th 1998 Kirstein et al. Page <ref> [15] </ref> From: John Smith &lt;J.Smith@aa.org&gt; To: J.Doe &lt;joe@acme.com&gt; Call-ID: 554565 MIME-Version: 1.0 Content-Type: application/pkcs7-mime; smime-type=enveloped-data; name=smime.p7m Content-Transfer-Encoding: base64 Content-Disposition: attachment; filename=smime.p7m rfvbnj756tbBghyHhHUujhJhjH77n8HHGT9HG4VQpfyF467GhIGfHfYT6 7n8HHGghyHhHUujhJh4VQpfyF467GhIGfHfYGTrfvbnjT6jH7756tbB9H f8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4 0GhIGfHfQbnj756YT64V 4.3 Signing Only With S/MIME There are two possible formats for signed messages. One can either use application/pkcs7-mime and SignedData or multipart/signed.
Reference: [16] <institution> Fielding et al Hypetext transfer Protocol HTTP/1.1 Technical Report RFC 2068, Internet Engineering Task Force, </institution> <month> Jan </month> <year> 1997 </year>
Reference-contexts: "RECOMMENDED", "MAY", and "OPTIONAL" are to be interpreted as described in RFC 2119 [28] and indicate requirement levels for compliant SIP implementations. 1.3 SIP Message Overview As much of the message syntax is identical to HTTP/1.1 the notation [HX.Y] is used to refer to section X.Y of the current HTTP/1.1 <ref> [16] </ref> specification. In addition an augmented Backus-Naur form (BNF)[17, H2.1] is used. All SIP messages are text-based and use HTTP/1.1 conventions [H4.1], except for the additional ability of SIP to use UDP. <p> It makes use of the multipart/signed MIME type described in RFC 1847 and the format is similar to the PGP signed-only SIP messages earlier. The multipart/signed MIME type has two Internet Draft SIP Security March 12th 1998 Kirstein et al. Page <ref> [16] </ref> parts. The first part contains the MIME entity that is to be signed; the second part contains the signature, which is a CMS detached signature. In order to create this type of message the SIP message is again converted to MIME canonical format as discussed in Section 3.2.
Reference: [17] <author> D. </author> <title> Crocker Augmented BNF for Syntax Specifications: </title> <institution> ABNF Internet Engineering Task Force, Internet Draft, </institution> <month> Oct </month> <year> 1996, </year> <title> Work In Progress </title>
Reference-contexts: Nyone &lt;anyone@anywhere.com&gt; &gt; p=A. Nyone +44 171 123 4567 Internet Draft SIP Security March 12th 1998 Kirstein et al. Page <ref> [17] </ref> &gt; c=IN IP4 239.255.140.52/15 &gt; a=tool:sdr v2.5a0 &gt; a=type:test &gt; m=audio 19274 RTP/AVP 0 &gt; c=IN IP4 239.255.140.52/15 &gt; a=ptime:40 &gt; boundary42 Content-Type: application/pkcs7-signature; name=smime.p7s Content-Transfer-Encoding: base64 Content-Disposition: attachment; filename=smime.p7s ghyHhHUujhJhjH77n8HHGTrfvbnj756tbB9HG4VQpfyF467GhIGfHfYT6 4VQpfyF467GhIGfHfYT6jH77n8HHGghyHhHUujhJh756tbB9HGTrfvbnj n8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4 7GhIGfHfYT64VQbnj756 boundary42 The &gt; indicate the data included in the signature. 4.4 Signing and Encrypting To achieve
Reference: [18] <author> J. C. Mogul and S. E. </author> <note> Deering Path MTU Discovery Technical Report RFC 1191, </note> <institution> Internet Engineering Task Force, </institution> <month> Nov </month> <year> 1990 </year>
Reference-contexts: The 1400 bytes accommodates lower-layer packet headers within the "typical" MTU of around 1500 bytes. There are few MTU values around 1 kB; the next value is 1006 bytes for SLIP and 296 for low-delay PPP <ref> [18] </ref>. Recent studies [19] indicate that an MTU of 1500 bytes is a reasonable assumption. Thus, another reasonable value would be a message size of 950 bytes, to accommodate packet headers within the SLIP MTU without fragmentation. <p> Sending agents SHOULD support rsaEncryption. If an agent supports rsaEncryption, then it MUST support encryption of symmetric keys with RSA public keys at key sizes from 512 bits to 1024 bits. Internet Draft SIP Security March 12th 1998 Kirstein et al. Page <ref> [18] </ref> 2. SignatureAlgorithmIdentifier Sending and receiving agents MUST support id-dsa defined in [23]. The algorithm parameters MUST be absent (not encoded as NULL). Receiving agents SHOULD support rsaEncryption, defined in [7]. Receiving agents SHOULD support verification of signatures using RSA public key sizes from 512 bits to 1024 bits.
Reference: [19] <author> W. R. Stevens TCP/IP Illustrated: </author> <title> The Protocols Vol 1, </title> <address> Reading, Massachusetts. </address> <publisher> Pub: Addison-Wesley, </publisher> <year> 1994 </year>
Reference-contexts: The 1400 bytes accommodates lower-layer packet headers within the "typical" MTU of around 1500 bytes. There are few MTU values around 1 kB; the next value is 1006 bytes for SLIP and 296 for low-delay PPP [18]. Recent studies <ref> [19] </ref> indicate that an MTU of 1500 bytes is a reasonable assumption. Thus, another reasonable value would be a message size of 950 bytes, to accommodate packet headers within the SLIP MTU without fragmentation. <p> DigestAlgorithmIdentifier Receiving agents MUST support SHA-1 [26]. Receiving agents SHOULD support MD5 [27]. Sending agents SHOULD use SHA-1. Internet Draft SIP Security March 12th 1998 Kirstein et al. Page <ref> [19] </ref>

Reference: [21] <institution> Character sets assigned by IANA. </institution> <note> See &lt;ftp://ftp.isi.edu/in-notes/iana/assignments/character-sets&gt; </note>
Reference-contexts: As SIP messages are text-based the MIME canonicalization for the type text/plain should be followed. In brief the line ending must be the &lt;CR&gt;&lt;LF&gt; sequence and the charset should be a registered charset <ref> [21] </ref>. The details are specified in [20] and the chosen charset SHOULD be named in the charset parameter so the receiving agent can unambiguously determine the charset used. As SIP has an 8-bit clear channel available then no transfer encoding is necessary.
Reference: [22] <institution> ANSI X9.42 </institution>
Reference-contexts: KeyEncryptionAlgorithmIdentifier Sending and receiving agents MUST support Diffie-Hellman defined in <ref> [22] </ref>. Receiving agents SHOULD support rsaEncryption [7]. Incoming encrypted messages contain symmetric keys which are to be decrypted with a user's private key. The size of the private key is determined during key generation. Sending agents SHOULD support rsaEncryption.
Reference: [23] <author> ANSI X9.57-1997x, </author> <title> Public Key Cryptography for the Financial Services Industry: Certificate Management. </title> <note> Working Draft, </note> <month> June </month> <year> 1996 </year>
Reference-contexts: If an agent supports rsaEncryption, then it MUST support encryption of symmetric keys with RSA public keys at key sizes from 512 bits to 1024 bits. Internet Draft SIP Security March 12th 1998 Kirstein et al. Page [18] 2. SignatureAlgorithmIdentifier Sending and receiving agents MUST support id-dsa defined in <ref> [23] </ref>. The algorithm parameters MUST be absent (not encoded as NULL). Receiving agents SHOULD support rsaEncryption, defined in [7]. Receiving agents SHOULD support verification of signatures using RSA public key sizes from 512 bits to 1024 bits. Sending agents SHOULD support rsaEncryption.
Reference: [24] <institution> ANSI X3.106 American National Standards for Information Systems Data Link Encryption American National Standards Institute, 1983 (DES) W. </institution> <note> Tuchman Hellman Presents No Shortcuts Solutions to DES IEEE Spectrum, v16, n7, pp40-41, </note> <month> July </month> <year> 1979 </year>
Reference-contexts: Sending agents SHOULD support rsaEncryption. Outgoing messages are signed with a user's private key. The size of the private key is determined during key generation. 3. ContentEncryptionAlgorithmIdentifier Receiving agents MUST support encryption and decryption with DES EDE3 CBC <ref> [24] </ref>. Receiving agents SHOULD support encryption and decryption using the RC2 [25] or a compatible algorithm at a key size of 40 bits. 4. DigestAlgorithmIdentifier Receiving agents MUST support SHA-1 [26]. Receiving agents SHOULD support MD5 [27]. Sending agents SHOULD use SHA-1.
Reference: [25] <author> R.L. </author> <title> Rivest et al Description of the RC2 Encryption Algorithm Internet Draft: </title> <publisher> draft-rivest-rc2desc-01.txt </publisher>
Reference-contexts: Sending agents SHOULD support rsaEncryption. Outgoing messages are signed with a user's private key. The size of the private key is determined during key generation. 3. ContentEncryptionAlgorithmIdentifier Receiving agents MUST support encryption and decryption with DES EDE3 CBC [24]. Receiving agents SHOULD support encryption and decryption using the RC2 <ref> [25] </ref> or a compatible algorithm at a key size of 40 bits. 4. DigestAlgorithmIdentifier Receiving agents MUST support SHA-1 [26]. Receiving agents SHOULD support MD5 [27]. Sending agents SHOULD use SHA-1. Internet Draft SIP Security March 12th 1998 Kirstein et al. Page [19]
Reference: [26] <institution> NIST FIPS PUB 180-1 Secure Hash Standard National Institute of Standards and Technology, U.S. Dept. of Commerce, </institution> <note> DRAFT, May 1994 Internet Draft SIP Security March 12th 1998 Kirstein et al. Page [21] </note>
Reference-contexts: ContentEncryptionAlgorithmIdentifier Receiving agents MUST support encryption and decryption with DES EDE3 CBC [24]. Receiving agents SHOULD support encryption and decryption using the RC2 [25] or a compatible algorithm at a key size of 40 bits. 4. DigestAlgorithmIdentifier Receiving agents MUST support SHA-1 <ref> [26] </ref>. Receiving agents SHOULD support MD5 [27]. Sending agents SHOULD use SHA-1. Internet Draft SIP Security March 12th 1998 Kirstein et al. Page [19]
Reference: [27] <author> R. L. </author> <title> Rivest The MD5 Message Digest Algorithm Technical Report RFC 1321, </title> <institution> Internet Engineering Task Force, </institution> <month> April </month> <year> 1992 </year>
Reference-contexts: ContentEncryptionAlgorithmIdentifier Receiving agents MUST support encryption and decryption with DES EDE3 CBC [24]. Receiving agents SHOULD support encryption and decryption using the RC2 [25] or a compatible algorithm at a key size of 40 bits. 4. DigestAlgorithmIdentifier Receiving agents MUST support SHA-1 [26]. Receiving agents SHOULD support MD5 <ref> [27] </ref>. Sending agents SHOULD use SHA-1. Internet Draft SIP Security March 12th 1998 Kirstein et al. Page [19]

References-found: 26

