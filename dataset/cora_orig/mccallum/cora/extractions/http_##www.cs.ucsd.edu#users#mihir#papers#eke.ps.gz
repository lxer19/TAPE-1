URL: http://www.cs.ucsd.edu/users/mihir/papers/eke.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/mihir/papers/escrow.html
Root-URL: http://www.cs.ucsd.edu
Title: Encapsulated Key Escrow The idea behind EKE is a new cryptographic tool called a verifiable
Author: Mihir Bellare Shafi Goldwasser 
Address: San Diego, 9500 Gilman Drive, La Jolla, California 92093, USA.  545 Technology Square, Cambridge, MA 02139, USA. E  
Affiliation: Department of Computer Science Engineering, Mail Code 0114, University of California at  MIT Laboratory of Computer Science,  
Note: 1996. Latest version available at  capsule (VCTC). This has broader applications to "sending information into the future."  
Email: E-mail: mihir@cs.ucsd.edu.  mail: shafi@theory.lcs.mit.edu.  
Web: http://www-cse.ucsd.edu/users/mihir.  
Date: November 1996  
Abstract: Earlier version appeared as MIT Laboratory for Computer Science Technical Report 688, April Abstract The main objection to current key-escrow proposals is that they assume complete faith in the authority and its trustees. If the authority does not follow the rules, or is replaced by an un-trustworthy authority tomorrow, it can immediately recover the secret keys of all users, and embark on massive wiretapping. We introduce a new approach to key escrow called encapsulated key escrow (EKE). With this approach it is computationally possible for an authority to wiretap individual users, but computationally prohibitive for the authority to launch large scale wiretapping. This is achieved by imposing a time delay between obtaining the escrowed information of a user and actually recovering the secret key. Furthermore, the recoverability is verifiable at escrow time. The approach is applicable both for session keys and for public key cryptography. EKE is a simple general paradigm, applicable across cryptosystems and key distribution protocols, regardless of their type. It solves in one stroke the problem of imposing time delays in key escrow. In particular it yields the first time delayed key escrow system for RSA, and more efficient solutions for Diffie-Hellman than achievable by the previous approach to time delays, namely partial key escrow (PKE). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Bellare and S. Goldwasser. </author> <title> Verifiable partial key escrow. </title> <booktitle> Proceedings of the Fourth Annual Conference on Computer and Communications Security, ACM, </booktitle> <year> 1997. </year> <note> Preliminary version appeared as Technical Report CS95-447, </note> <institution> Dept. of CS and Engineering, UCSD, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: Partial key escrow for public key cryptography was investigated by Micali [23] and Bellare and Goldwasser <ref> [1] </ref>. (Shamir's work [33] and Micali's work [23] were later merged into [24]. We won't discuss the latter separately). <p> They provided verifiable PKE schemes for the Diffie-Hellman (DH) cryptosystem, and also provided some new factoring based cryptosystems permitting PKE. Most importantly, however, <ref> [1] </ref> pointed to some new security issues that arise in this context, in particular the danger of early recovery attacks. Roughly, the issue is about when the extra 2 k 2 factor effort must be invested by the authority. <p> If it can be done off-line before obtaining the warrant (consent of t + 1 trustees for the split key case) then we say early recovery is possible. This should be avoided since it effectively annuls the time delay. It is shown in <ref> [1] </ref> that the schemes of [23] suffer from early recovery attacks. The DH scheme they present prevents against these attacks. But no solution for RSA is known. Drawbacks of PKE. <p> The session key is likely to be a DH key, arising from an authenticated DH key exchange, a popular choice these days. It may also be a sequence of keys for different purposes. In all cases, PKE is in trouble. Accordingly, PKE proposals like <ref> [23, 1] </ref> have exploited the structure of the cryptosystem-system to find ways to "break up" the secret key into two parts such that the desired properties can be guaranteed. This requires extreme care. <p> For example the solution for Diffie-Hellman used in [23] relied on the assumption that Shank's algorithm, which given g a finds a in jaj=2 steps, is best possible. The danger of this approach was illustrated when Van Oorschot and Wiener found much better algorithms [34]. (The VPKE scheme of <ref> [1] </ref> uses the same assumption but in groups of prime order where the attacks of [34] don't apply. Nonetheless, it is a non-standard assumption to be making, and better avoided). <p> Nonetheless, it is a non-standard assumption to be making, and better avoided). A second issue is that avoiding early recovery appears to be a non-trivial problem. (As illustrated by the attacks on the schemes of [23]). Although a solution for the DH cryptosystem has been found 4 <ref> [1] </ref>, that solution is tailored to the algebra of the cryptosystem, and doesn't extend to other systems like RSA. It would be better to have a generic way to avoid early recovery attacks which did not rely on specific algebraic assumptions. <p> It would be better to have a generic way to avoid early recovery attacks which did not rely on specific algebraic assumptions. Another problem is verifiability for the session key schemes. (As indicated above, verifiability for the public key case was addressed in <ref> [23, 1] </ref>. But the issue arises for the session key case as well and needs to be addressed in this context). In the known session key schemes (Shamir [33] or differential workfactor cryptography [25]) the user may escrow junk rather than the session key. <p> In particular, it yields the first time delayed key escrow systems for RSA. EKE yields efficient solutions. In particular the EKE scheme for DH is a factor of 15 times more efficient than the VPKE DH scheme of <ref> [1] </ref>. The EKE approach makes no assumptions about the structure of the key being escrowed. This could be a DES key or a DH key or an RSA key or a sequence of different keys: they are all treated the same. <p> Our verifiable cryptographic time capsules can be used for exactly this purpose. The property of verifiability is especially attractive in some of these applications domains. 6 1.5 Related Work We have already discussed partial key escrow <ref> [33, 23, 1, 24] </ref>. In [28] , Rivest proposes several ideas of how to incorporate into one encryption algorithm multiple levels of security (which can lead to another generalization of partial key escrow) as follows. <p> Now to get the session key they must open the time capsule as before, which requires running for the prescribed amount of time. Early recovery. The issue of early versus delayed recovery in the context of time delayed escrow was pin-pointed in <ref> [1] </ref>. This issue is about when the extra 2 k 2 factor effort must be invested by the authority. If it can be done off-line before obtaining the warrant (consent of t + 1 trustees for the split key case) then we say early recovery is possible. <p> A trustee performs one decryption and two exponentiations per round. Let's put the cost of decryption at an exponentiation, making for a total of 3m exponentiations. For m = 100 this is 300 exponentiations. In comparison, the cost of the solution of <ref> [1] </ref> for comparable parameters was over 1600 exponentiations for the user and about 400 exponentiations for each trustee. We see a considerable reduction in the user cost: a factor of about 15! Further efficiency improvements. As written the protocol requires several rounds of interaction. <p> For m = 100 this is 100 exponentiations, cheaper than EKE-DH. Comparison with previous work. Partial key escrow systems for a factoring based cryptosys-tem were provided in <ref> [23, 1] </ref>, but were not very good. Firstly, there was no solution for RSA itself. The solutions required one to use a modulus product of many primes, making it much larger than a standard RSA modulus, and making the cryptosystem very inefficient. <p> The solutions required one to use a modulus product of many primes, making it much larger than a standard RSA modulus, and making the cryptosystem very inefficient. Thus the first contribution above is to get a system which works for standard RSA. Second, previous solutions suffered from early recovery <ref> [1] </ref>. Ours does not. 5 General constructions and uses of VCTCs Underlying encapsulated key escrow is a more general notion and tool. Namely that of a verifiable cryptographic time capsule discussed in Section 2. This is a way to "send information into the future" (cf. [21, 30]).
Reference: [2] <author> M.Bellare and P. Rogaway. </author> <title> Random oracles are practical: a paradigm for designing efficient protocols. </title> <booktitle> Proceedings of the First Annual Conference on Computer and Communications Security, ACM, </booktitle> <year> 1993. </year>
Reference-contexts: As written the protocol requires several rounds of interaction. However, in practice interaction can be eliminated by specifying the challenges as a hash of other quantities, a heuristic but seemingly sound approach justifiable in a random oracle model <ref> [2] </ref>. This is suggested for an implementation. The same applies to the following protocols and we won't mention it again. 4.5 An EKE scheme for RSA RSA is the most popular choice for a cryptosystem. Encryption under RSA can be done for example as specified in [3].
Reference: [3] <author> M. Bellare and P. Rogaway. </author> <title> Optimal asymmetric encryption. </title> <booktitle> Advances in Cryptology Euro-crypt 94 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 950, </volume> <editor> A. De Santis ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: It takes the secret key sk X of party X and a ciphertext C to recover the corresponding plaintext. 9 Public key encryption can be implemented using RSA. It is important that the scheme be secure. A suggested RSA based implementation is the OAEP scheme of <ref> [3] </ref>. We assume the encryption function can handle plaintexts of arbitrary length. (Typically this is implemented under the covers in two phases: RSA is applied to encrypt a symmetric key, and the data is encrypted under the symmetric key using a block cipher. <p> This is suggested for an implementation. The same applies to the following protocols and we won't mention it again. 4.5 An EKE scheme for RSA RSA is the most popular choice for a cryptosystem. Encryption under RSA can be done for example as specified in <ref> [3] </ref>. We present the first time delayed key escrow method for RSA which achieves delayed recovery. This is done by applying the general encapsulated key escrow paradigm of Section 4.3 in conjunction with the CCGS for factoring described in Section 4.2, to obtain an encapsulated key escrow scheme for RSA.
Reference: [4] <author> G. Blakley. </author> <title> Safeguarding cryptographic keys. </title> <booktitle> AFIPS Conference Proceedings, </booktitle> <month> June </month> <year> 1979. </year>
Reference: [5] <author> M. </author> <title> Blaze. Protocol failure in the escrowed encryption standard. </title> <booktitle> Proceedings of the Second Annual Conference on Computer and Communications Security, ACM, </booktitle> <year> 1994. </year>
Reference: [6] <author> M. Blum and S. Goldwasser. </author> <title> An efficient probabilistic public-key encryption that hides all partial information. </title> <booktitle> Advances in Cryptology - Crypto 84 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 196, </volume> <editor> R. Blakely ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference: [7] <author> B. Chor, S. Goldwasser, S. Micali, and B. Awerbuch. </author> <title> Verifiable secret sharing and achieving simultaneity in the presence of faults. </title> <booktitle> Proceedings of the 27th Symposium on Foundations of Computer Science, IEEE, </booktitle> <year> 1986. </year>
Reference: [8] <author> D. Coppersmith. </author> <title> Finding a small root of a bivariate integer equation; factoring with high bits known. </title> <booktitle> Advances in Cryptology - Eurocrypt 96 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 1070, </volume> <editor> U. Maurer ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: In particular this is true for keys of the DH or RSA systems. (For example, in the latter case, the key is the prime factors of some number. How do you give away "part" of this? One must be careful given attacks like <ref> [29, 8] </ref>). In particular this is the main reason no PKE has been found for the RSA system. The issue arises also for session keys. Here note DES is not the only system in use. <p> Giving away a few bits of the prime factors of a number might endanger the rest to an unknown extent, and there are attacks that can factor a number given partial information about the factors <ref> [29, 8] </ref>.
Reference: [9] <author> D. Denning. </author> <title> To tap or not to tap. </title> <journal> CACM 1993. </journal>
Reference: [10] <author> D. Denning and M. Smid. </author> <title> Key escrowing now. </title> <journal> IEEE Communications Magazine, </journal> <month> Sep. </month> <year> 1994. </year>
Reference: [11] <author> Y. Desmedt. </author> <title> Securing traceability of ciphertexts: towards a secure software key escrow system. </title> <booktitle> Advances in Cryptology - Eurocrypt 95 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 921, </volume> <editor> L. Guillou and J. Quisquater ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [12] <author> W. Diffie and M. Hellman. </author> <title> New directions in cryptography. </title> <journal> IEEE Trans. Info. Theory IT-22, </journal> <pages> pp. 644-654, </pages> <month> November </month> <year> 1976. </year> <month> 22 </month>
Reference: [FeSh] <author> U. Feige and A. Shamir. </author> <title> Witness Indistinguishable and Witness Hiding Protocols. </title> <booktitle> Proceedings of the 22nd Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1990. </year>
Reference: [13] <author> P. Feldman. </author> <title> A practical scheme for non-interactive verifiable secret sharing. </title> <booktitle> Proceedings of the 28th Symposium on Foundations of Computer Science, IEEE, </booktitle> <year> 1987. </year>
Reference: [14] <author> Y. Frankel and M. Yung. </author> <title> Escrow encryption systems visited: attacks, analysis and designs. </title> <booktitle> Advances in Cryptology - Crypto 95 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 963, </volume> <editor> D. Coppersmith ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [15] <author> S. Goldwasser and S. Micali. </author> <title> Probabilistic encryption. </title> <journal> J. of Computer and System Sciences, </journal> <volume> Vol. 28, </volume> <pages> pp. 270-299, </pages> <month> April </month> <year> 1984. </year>
Reference-contexts: This function takes the public encryption key of party X and a plaintext to produce a ciphertext. We recall that to be secure, the encryption function must be probabilistic <ref> [15] </ref>. It takes plaintext M and coins r to produce a ciphertext C = E X (M ; r). Sometimes we make r explicit like this.
Reference: [16] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The knowledge complexity of interactive proofs. </title> <journal> SIAM J. Comput. </journal> <volume> Vol. 18, No. 1, </volume> <pages> 186-208, </pages> <month> February </month> <year> 1989. </year>
Reference: [17] <author> S. Goldwasser, S. Micali and R. Rivest, </author> <title> A digital signature scheme secure against adaptive chosen-message attacks. </title> <journal> SIAM Journal of Computing Vol. </journal> <volume> 17, No. 2, </volume> <pages> pp. 281-308, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: What we will do is construct a "verifiable cryptographic time capsule." Let's now discuss how. 4.2 Certified claw generation schemes The key to obtaining verifiability for encapsulated key escrow is to exploit an ability to "split" the secret key into certain kinds of "claws." (The terminology is inspired by <ref> [17] </ref>. The notion is different, being more a form of secret sharing, but related in spirit). Certified claws. Let the public key pk be known.
Reference: [18] <author> J. Kilian and T. Leighton. </author> <title> Fair cryptosystems revisited. </title> <booktitle> Advances in Cryptology - Crypto 95 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 963, </volume> <editor> D. Coppersmith ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: We assume the user is in possession of her secret key and its matching public key, and has already conveyed the latter to the trustees. This does not necessarily mean that the user chose her secret key on her own. In particular, as pointed out by <ref> [18] </ref>, if the user chooses her keys it may be possible to set up "subliminal channels." To avoid this, the choice of keys may be a result of a prior protocol with the trustees. Our setting is general, making no assumptions about how the keys were derived.
Reference: [19] <author> H. Lenstra. </author> <title> Factoring integers with elliptic curves. </title> <journal> Annals of Math Vol. </journal> <volume> 126, </volume> <pages> pp. 649-673, </pages> <year> 1987. </year>
Reference-contexts: Second, it would not matter anyway. What the trustees can do is check that N is of the right length, say 1024 bits. If N is the product of three or more primes then the shortest has length at most 341 bits, and the elliptic curve methods <ref> [19] </ref> can be used to simply factor N in the recovery phase. Alternatively note that running the above recovery process will result in a split of N into smaller factors and these in turn can be factored.
Reference: [20] <author> A. Lenstra, P. Winkler and Y. Yacobi. </author> <title> A key escrow system with warrant bounds. </title> <booktitle> Advances in Cryptology - Crypto 95 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 963, </volume> <editor> D. Coppersmith ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [21] <author> T. </author> <month> May. </month> <note> Timed-release crypto. http://www.hks.net/cpunks/cpunks-0/1460.html. </note>
Reference-contexts: We stress that our solution applies to any cryptosystem. Typically however we can exploit the properties of a specific cryptosystem to improve the efficiency of the solutions. Sending information into future. May <ref> [21] </ref> points out that it would be extremely useful to be able to send encrypted messages into the future. <p> Ours does not. 5 General constructions and uses of VCTCs Underlying encapsulated key escrow is a more general notion and tool. Namely that of a verifiable cryptographic time capsule discussed in Section 2. This is a way to "send information into the future" (cf. <ref> [21, 30] </ref>). But in such a way that claims about how far into the future it is being sent, and whether it can be recovered at the claimed time, can be verified without revealing the information.
Reference: [22] <author> S. Micali. </author> <title> Fair public key cryptosystems. </title> <booktitle> Advances in Cryptology - Crypto 92 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 740, </volume> <editor> E. Brickell ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The pioneering proposals of this nature were the Clipper chip (where the government chooses the secret-keys of users and enforces use of a particular hardware and encryption algorithm), and Micali's fair public key cryptosystems <ref> [22] </ref> (where the user himself can chooses his secret and which can be applied to several public-key encryption algorithms such as RSA and Diffie-Hellman). <p> When the authority wants to wiretap it obtains a warrant to recover s. Let's call this "public key escrow" as opposed to "session key escrow." Public key escrow has been discussed in several places, most notably by Micali <ref> [22] </ref> who advocates having verifiability in this context. The relative merits of session key escrow and public key escrow have also been much discussed and we won't enter into it there.
Reference: [23] <author> S. Micali. </author> <title> Guaranteed partial key escrow. </title> <address> MIT/LCS TM-537, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Partial key escrow for public key cryptography was investigated by Micali <ref> [23] </ref> and Bellare and Goldwasser [1]. (Shamir's work [33] and Micali's work [23] were later merged into [24]. We won't discuss the latter separately). <p> Partial key escrow for public key cryptography was investigated by Micali <ref> [23] </ref> and Bellare and Goldwasser [1]. (Shamir's work [33] and Micali's work [23] were later merged into [24]. We won't discuss the latter separately). <p> If it can be done off-line before obtaining the warrant (consent of t + 1 trustees for the split key case) then we say early recovery is possible. This should be avoided since it effectively annuls the time delay. It is shown in [1] that the schemes of <ref> [23] </ref> suffer from early recovery attacks. The DH scheme they present prevents against these attacks. But no solution for RSA is known. Drawbacks of PKE. <p> The session key is likely to be a DH key, arising from an authenticated DH key exchange, a popular choice these days. It may also be a sequence of keys for different purposes. In all cases, PKE is in trouble. Accordingly, PKE proposals like <ref> [23, 1] </ref> have exploited the structure of the cryptosystem-system to find ways to "break up" the secret key into two parts such that the desired properties can be guaranteed. This requires extreme care. <p> This requires extreme care. It is hard to find ways to achieve this break up for particular systems, and even when found their quality is unclear. For example the solution for Diffie-Hellman used in <ref> [23] </ref> relied on the assumption that Shank's algorithm, which given g a finds a in jaj=2 steps, is best possible. <p> Nonetheless, it is a non-standard assumption to be making, and better avoided). A second issue is that avoiding early recovery appears to be a non-trivial problem. (As illustrated by the attacks on the schemes of <ref> [23] </ref>). Although a solution for the DH cryptosystem has been found 4 [1], that solution is tailored to the algebra of the cryptosystem, and doesn't extend to other systems like RSA. <p> It would be better to have a generic way to avoid early recovery attacks which did not rely on specific algebraic assumptions. Another problem is verifiability for the session key schemes. (As indicated above, verifiability for the public key case was addressed in <ref> [23, 1] </ref>. But the issue arises for the session key case as well and needs to be addressed in this context). In the known session key schemes (Shamir [33] or differential workfactor cryptography [25]) the user may escrow junk rather than the session key. <p> Our verifiable cryptographic time capsules can be used for exactly this purpose. The property of verifiability is especially attractive in some of these applications domains. 6 1.5 Related Work We have already discussed partial key escrow <ref> [33, 23, 1, 24] </ref>. In [28] , Rivest proposes several ideas of how to incorporate into one encryption algorithm multiple levels of security (which can lead to another generalization of partial key escrow) as follows. <p> For m = 100 this is 100 exponentiations, cheaper than EKE-DH. Comparison with previous work. Partial key escrow systems for a factoring based cryptosys-tem were provided in <ref> [23, 1] </ref>, but were not very good. Firstly, there was no solution for RSA itself. The solutions required one to use a modulus product of many primes, making it much larger than a standard RSA modulus, and making the cryptosystem very inefficient.
Reference: [24] <author> S. Micali and A. Shamir. </author> <title> Partial key escrow. </title> <type> Manuscript, </type> <month> February </month> <year> 1996. </year>
Reference-contexts: Partial key escrow for public key cryptography was investigated by Micali [23] and Bellare and Goldwasser [1]. (Shamir's work [33] and Micali's work [23] were later merged into <ref> [24] </ref>. We won't discuss the latter separately). These works introduced and addressed the issue of verifiability of the escrow in this context. (Namely the authority can verify that the user has indeed escrowed an appropriate sized piece of the secret key corresponding to her public key). <p> Our verifiable cryptographic time capsules can be used for exactly this purpose. The property of verifiability is especially attractive in some of these applications domains. 6 1.5 Related Work We have already discussed partial key escrow <ref> [33, 23, 1, 24] </ref>. In [28] , Rivest proposes several ideas of how to incorporate into one encryption algorithm multiple levels of security (which can lead to another generalization of partial key escrow) as follows. <p> The processing costs will be too high for all parties concerned, but especially for the government. Sources and comparison. The idea of splitting a DES key into two parts s 0 ; s 1 and escrowing only the first was put forth by <ref> [33, 24] </ref>. The scheme presented in the latter, however, involved A sending information directly to the authority and receiving some kind of certificate in return. This does not seem like the right model for session key escrow: as discussed above, interaction with a third party in this context is impractical.
Reference: [25] <author> R. Ozzie. </author> <title> Prepared remarks. Delivered at RSA Data Security Conference, </title> <address> San Francisco, </address> <month> January 17, </month> <year> 1996. </year> <note> Available at http:// www.lotus.com/notesr4/ozzie.htm. </note>
Reference-contexts: But simultaneously recovering keys of a large number of users becomes hard as the total effort involved in key recovery grows with the number of users. Thus, a deterrent to massive, large scale wiretapping is created. The differential-work-factor proposal of Lotus (described for example in <ref> [25] </ref>) implements this idea in the session key context. The escrow is performed by simply encrypting 56 k 2 bits of the DES session key under the authority public key, and attaching the resulting ciphertext as a LEAF (Law Enforcement Access Field) to the transmission between the users. <p> But the issue arises for the session key case as well and needs to be addressed in this context). In the known session key schemes (Shamir [33] or differential workfactor cryptography <ref> [25] </ref>) the user may escrow junk rather than the session key. It would be nice to find some deterrent to this. The lack of generality in PKE solutions will make it difficult to fix standards. <p> This does not seem like the right model for session key escrow: as discussed above, interaction with a third party in this context is impractical. The scheme above is essentially the "differential workfactor cryptography" scheme of Lotus Corporation, announced for example in <ref> [25] </ref>. The above scheme differs in a few details. What follows. Now we raise several issues and concerns with regard to a scheme like the above.
Reference: [26] <author> T. Pederson. </author> <title> Distributed provers with applications to undeniable signatures. </title> <booktitle> Advances in Cryptology - Eurocrypt 91 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 547, </volume> <editor> D. Davies ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [27] <author> R. Rivest. </author> <title> The RC5 encryption algorithm. </title> <type> Manuscript. </type>
Reference: [28] <author> R. Rivest. </author> <title> Multi-grade cryptography. </title> <type> Manuscript. </type>
Reference-contexts: Our verifiable cryptographic time capsules can be used for exactly this purpose. The property of verifiability is especially attractive in some of these applications domains. 6 1.5 Related Work We have already discussed partial key escrow [33, 23, 1, 24]. In <ref> [28] </ref> , Rivest proposes several ideas of how to incorporate into one encryption algorithm multiple levels of security (which can lead to another generalization of partial key escrow) as follows.
Reference: [29] <author> R. Rivest and A. Shamir. </author> <title> Efficient factoring based on partial information. </title> <booktitle> Advances in Cryptology - Eurocrypt 85 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 219, </volume> <editor> F. Pichler ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: In particular this is true for keys of the DH or RSA systems. (For example, in the latter case, the key is the prime factors of some number. How do you give away "part" of this? One must be careful given attacks like <ref> [29, 8] </ref>). In particular this is the main reason no PKE has been found for the RSA system. The issue arises also for session keys. Here note DES is not the only system in use. <p> Giving away a few bits of the prime factors of a number might endanger the rest to an unknown extent, and there are attacks that can factor a number given partial information about the factors <ref> [29, 8] </ref>.
Reference: [30] <author> R. Rivest, A. Shamir and D. Wagner. </author> <note> Time-lock puzzles and timed-release crypto. Manuscript available at http://theory.lcs.mit.edu:80/~rivest. </note>
Reference-contexts: In all his proposals, the secret keys depend on each other and no verifiability is provided. In the key escrow context, this yields similar problems to those discussed for partial key escrow. The work of Rivest, Shamir, and Wagner <ref> [30] </ref> proposes the concept and two implementations of time-lock puzzles, any of which can be used as a cryptographic time capsule. [30] do not address verifiability, but as our construction of VCTC takes any time-capsule as a starting point and makes it verifiable, it can be used to make any of <p> In the key escrow context, this yields similar problems to those discussed for partial key escrow. The work of Rivest, Shamir, and Wagner <ref> [30] </ref> proposes the concept and two implementations of time-lock puzzles, any of which can be used as a cryptographic time capsule. [30] do not address verifiability, but as our construction of VCTC takes any time-capsule as a starting point and makes it verifiable, it can be used to make any of the time-lock puzzles which they propose, into verifiable time-lock puzzles. 1.6 Road map We begin by discussing the approach at an <p> Ours does not. 5 General constructions and uses of VCTCs Underlying encapsulated key escrow is a more general notion and tool. Namely that of a verifiable cryptographic time capsule discussed in Section 2. This is a way to "send information into the future" (cf. <ref> [21, 30] </ref>). But in such a way that claims about how far into the future it is being sent, and whether it can be recovered at the claimed time, can be verified without revealing the information.
Reference: [31] <author> R. Rivest, A. Shamir, L. Adleman. </author> <title> A method for Obtaining Digital Signatures and Public Key Cryptosystems. </title> <journal> CACM, </journal> <volume> Vol 21, No. 2, </volume> <pages> pp. 120-126, </pages> <month> February </month> <year> 1978. </year>
Reference: [32] <author> A. Shamir. </author> <title> How to share a secret. </title> <journal> CACM, </journal> <volume> Vol. 22, No. 11, </volume> <pages> pp 612-613, </pages> <month> November </month> <year> 1979. </year>
Reference: [33] <author> A. Shamir. </author> <title> Partial key escrow: A new approach to software key escrow. Private communication made at Crypto 95, </title> <month> August </month> <year> 1995. </year> <note> Also presented at Key escrow conference, </note> <institution> Washington, </institution> <address> D.C., </address> <month> September 15, </month> <year> 1995. </year>
Reference-contexts: Similarly to the situation with government, a change in business management could bring a sudden recovery of employee secret keys and encroachment of their privacy. 1.2 Partial key escrow and its problems Past work. Shamir proposed partial key escrow (PKE) to address this problem <ref> [33] </ref>. His scheme is for escrow of a DES key. The idea is to escrow all but k 2 bits of the key. (He suggests k 2 = 48). <p> Partial key escrow for public key cryptography was investigated by Micali [23] and Bellare and Goldwasser [1]. (Shamir's work <ref> [33] </ref> and Micali's work [23] were later merged into [24]. We won't discuss the latter separately). <p> Another problem is verifiability for the session key schemes. (As indicated above, verifiability for the public key case was addressed in [23, 1]. But the issue arises for the session key case as well and needs to be addressed in this context). In the known session key schemes (Shamir <ref> [33] </ref> or differential workfactor cryptography [25]) the user may escrow junk rather than the session key. It would be nice to find some deterrent to this. The lack of generality in PKE solutions will make it difficult to fix standards. <p> Our verifiable cryptographic time capsules can be used for exactly this purpose. The property of verifiability is especially attractive in some of these applications domains. 6 1.5 Related Work We have already discussed partial key escrow <ref> [33, 23, 1, 24] </ref>. In [28] , Rivest proposes several ideas of how to incorporate into one encryption algorithm multiple levels of security (which can lead to another generalization of partial key escrow) as follows. <p> The processing costs will be too high for all parties concerned, but especially for the government. Sources and comparison. The idea of splitting a DES key into two parts s 0 ; s 1 and escrowing only the first was put forth by <ref> [33, 24] </ref>. The scheme presented in the latter, however, involved A sending information directly to the authority and receiving some kind of certificate in return. This does not seem like the right model for session key escrow: as discussed above, interaction with a third party in this context is impractical.
Reference: [34] <author> P. Van Oorschot and M. Wiener. </author> <title> On Diffie-Hellman key agreement with short exponents. </title> <booktitle> Advances in Cryptology - Eurocrypt 96 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 1070, </volume> <editor> U. Maurer ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <month> 23 </month>
Reference-contexts: For example the solution for Diffie-Hellman used in [23] relied on the assumption that Shank's algorithm, which given g a finds a in jaj=2 steps, is best possible. The danger of this approach was illustrated when Van Oorschot and Wiener found much better algorithms <ref> [34] </ref>. (The VPKE scheme of [1] uses the same assumption but in groups of prime order where the attacks of [34] don't apply. Nonetheless, it is a non-standard assumption to be making, and better avoided). <p> The danger of this approach was illustrated when Van Oorschot and Wiener found much better algorithms <ref> [34] </ref>. (The VPKE scheme of [1] uses the same assumption but in groups of prime order where the attacks of [34] don't apply. Nonetheless, it is a non-standard assumption to be making, and better avoided). A second issue is that avoiding early recovery appears to be a non-trivial problem. (As illustrated by the attacks on the schemes of [23]).
References-found: 35

