URL: ftp://mighp0.cs.man.ac.uk/pub/theses/horrocks/jlc-title.ps.gz
Refering-URL: http://www.cs.man.ac.uk/mig/people/horrocks/publications.html
Root-URL: http://www.cs.man.ac.uk
Title: Optimising Description Logic Subsumption  
Author: Ian Horrocks and Peter F. Patel-Schneider 
Note: 1 Part of this work was carried out while being a guest at IRST, Trento.  
Date: November, 1998  
Address: Manchester 1  Murray Hill, NJ, U.S.A.  
Affiliation: Department of Computer Science, University of  Bell Labs Research,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> F. Baader. </author> <title> Augmenting concept languages by transitive closure of roles: An alternative to terminological cycles. </title> <booktitle> In Proceedings of IJCAI-91 [40], </booktitle> <pages> pages 446451. </pages>
Reference-contexts: Edges are labeled with 4 The addition of role inclusion axioms also allows concept inclusion axioms to be dealt with adding them to concept expressions, a technique known as internalisation <ref> [1, 29] </ref>. 3 Syntax Semantics Concepts A A I &gt; I :C I C I C t D C I [ D I 8R:C fd 2 I : R I (d) C I g I 6nP fd 2 I : j P (d) j ng Roles P P I R t <p> It is hoped that the availability of DLP will lead to the development of such data, in particular knowledge bases that use its more expressive description logic. 5 Further details can be found in <ref> [37, 1, 13] </ref>. The implementations of both FaCT and DLP include a term classifier or Tbox that can build and maintain a concept hierarchya partial ordering of named concepts based on the subsumption relation.
Reference: [2] <editor> F. Baader, E. Franconi, B. Hollunder, B. Nebel, and H.-J. </editor> <title> Profitlich. An empirical analysis of optimization techniques for terminological representation systems or: Making KRIS get a move on. </title> <editor> In B. Nebel, C. Rich, and W. Swartout, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Third International Conference (KR'92), </booktitle> <pages> pages 270281. </pages> <publisher> Morgan-Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1992. </year> <note> Also available as DFKI RR-93-03. </note>
Reference-contexts: Description logic systems are also optimised in other ways. In particular, their operations are arranged so as to avoid potentially-costly subsumption checks whenever possible. There are also optimisations that are particular to description logics, having to do with the nature of the representation of knowledge in a description logic <ref> [2] </ref>, but these have little or nothing to do with optimising subsumption in general. <p> The task of computing the partial ordering of named concepts for a given knowledge base is itself amenable to a range of optimisations. In particular, concept definitions can, in general, be dealt with much more efficiently than other axioms using a technique called unfolding <ref> [2] </ref>, the basic idea being simply to substitute names with their corresponding definition wherever they occur. <p> The full set of normalisation rules employed by FaCT and DLP are given in Table 3. 7 KRIS addresses the same problem, in a less complete manner, by lazily expanding named concepts, and retaining their names in node labels <ref> [2] </ref>. 6 Concept expression Normal form ? :&gt; 9R:C :(8R::C) C u D ufC; Dg ufufC 1 ; : : : ; C n g; : : :g ufC 1 ; : : : ; C n ; : : :g ufCg C Table 3: Normalisation rules for FaCT and DLP
Reference: [3] <editor> F. Baader, H.-J. Heinsohn, B. Hollunder, J. Muller, B. Nebel, W. Nutt, and H.-J. Prof-itlich. </editor> <title> Terminological knowledge representation: A proposal for a terminological logic. </title> <type> Technical Memo TM-90-04, </type> <institution> Deutsches Forschungszentrum fur Kunstliche Intelligenz GmbH (DFKI), </institution> <year> 1991. </year>
Reference-contexts: Concept inclusion axioms are of the form C v D, where C and D are concept expressions, and can be used to assert arbitrary subsumption relationships. 3 A standard Tarski style model theoretic semantics is used to interpret concepts and roles, and to justify subsumption inferences <ref> [47, 3] </ref>. The meaning of concepts and roles is given by an interpretation I, which is a pair ( I ; I ), where I is the domain (a set) and I is an interpretation function. <p> The test knowledge base was constructed by first translating the GRAIL syntax of the GALEN knowledge base into the standard syntax used by most implemented description logics <ref> [3] </ref>.
Reference: [4] <author> F. Baader and B. </author> <title> Hollunder. A terminological knowledge representation system with complete inference algorithms. </title> <booktitle> In Processing declarative knowledge: International workshop PDK'91, number 567 in Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 67 86, </pages> <address> Berlin, 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Each of these techniques will be described in detail in the following sections. 3.1 Lexical Normalisation Theoretical descriptions of tableaux algorithms generally assume that the concept expression to be tested is in negation normal form, with negations applying only to atomic concepts <ref> [27, 4, 11] </ref>. This simplifies the (description of the) algorithm but it means that a clash will only be detected when an atomic concept and its negation occur in the same node label.
Reference: [5] <author> F. Baader and B. Hollunder. KRIS: </author> <title> Knowledge representation and inference system. </title> <journal> SIGART Bulletin, </journal> <volume> 2(3):814, </volume> <year> 1991. </year>
Reference-contexts: Several description logic systems have been built for such description logics, and thus include what is essentially a satisfiability checker for some propositional modal logic; examples of such systems include KRIS <ref> [5] </ref> and CRACK [10]. These two systems have incorporated a number of optimisations to achieve better performance of their subsumption checkers. Description logic systems are also optimised in other ways. In particular, their operations are arranged so as to avoid potentially-costly subsumption checks whenever possible. <p> However, although the theoretical complexity results are discouraging, empirical analyses of real applications have shown that the kinds of construct that lead to worst case intractability rarely occur in practice [35, 25, 46, 28], and it has proved possible to build practical description logic systems based on expressive description logics <ref> [5, 10, 29] </ref>. Systems that are based on description logics like these generally determine whether a subsumption holds by transforming the subsumption problem into a satisfiability problem in the obvious manner: concept C subsumes concept D if and only if the concept D u :C is not satisfiable. <p> of expanding the node; otherwise expansion continues, and when the node's satisfiability is determined the concept store is updated accordingly. 4 Comparison with Other Systems To analyse the effectiveness of the above optimisations, we compared the performance of FaCT and DLP against the performance of another description logic system (KRIS <ref> [5] </ref>) and a propositional modal logic prover (KSAT [23]). We used KRIS here as an example of an unoptimised description logic system. Other unoptimised description logic systems, such as Crack [10], give similar or worse results. We used KSAT as an example of a heavily-optimised reasoner for propositional modal logics.
Reference: [6] <author> A. B. Baker. </author> <title> Intelligent Backtracking on Constraint Satisfaction Problems: Experimental and Theoretical Results. </title> <type> PhD thesis, </type> <institution> University of Oregon, </institution> <year> 1995. </year>
Reference-contexts: This problem is addressed by adapting a form of dependency directed backtracking called backjumping, which has been used in solving constraint satisfiability problems <ref> [6] </ref> (a similar technique was also used in the HARP theorem prover [36]). Backjumping works by labeling concept expressions with a dependency set indicating the branching points on which they depend.
Reference: [7] <author> P. Balsiger and A. Heuerding. </author> <title> Comparison of theorem provers for modal logics introduction and summary. </title> <booktitle> In de Swart [14], </booktitle> <pages> pages 2526. </pages>
Reference-contexts: DLP also outperformed the other systems that took part in the Tableaux'98 comparison <ref> [7] </ref>. Our second propositional modal logic test suite uses a common method for testing SAT decision procedures [17] that has been adapted for use with propositional modal K by Giun-chiglia and Sebastiani [23], and further refined by Hustadt and Schmidt [33].
Reference: [8] <author> R. J. Brachman, D. L. McGuinness, P. F. Patel-Schneider, and L. A. Resnick. </author> <title> Living with CLASSIC: When and how to use a KL-ONE-like language. </title> <editor> In J. F. Sowa, editor, </editor> <booktitle> Principles of Semantic Networks: Explorations in the representation of knowledge, chapter 14, </booktitle> <pages> pages 401456. </pages> <publisher> Morgan-Kaufmann, </publisher> <year> 1991. </year> <month> 25 </month>
Reference-contexts: 1 Introduction Description logics are a logical formalism for the representation of knowledge about individuals and descriptions of individuals <ref> [8] </ref>. Description logics represent and reason with descriptions similar to all people whose friends are both doctors and lawyers or all people whose children are doctors or lawyers or who have a child who has a spouse.
Reference: [9] <author> R. J. Brachman, P. G. Selfridge, L. G. Terveen, B. Altman, A. Borgida, F. Halper, T. Kirk, A. Lazar, D. L. McGuinness, and L. A. Renick. </author> <title> Integrated support for data archaeology. </title> <journal> International Journal of Applied and Cooperative Information Systems, </journal> <volume> 2(2):159185, </volume> <year> 1993. </year>
Reference-contexts: Adding either role or concept inclusion axioms results in EXPTIME-complete subsump-tion 4 [38, 48, 29]. Determining subsumption in propositional dynamic logic is also EXP TIME-complete [39]. These and related complexity problems have lead some developers of description logic systems to use less-expressive description logics <ref> [9] </ref>.
Reference: [10] <author> P. Bresciani, E. Franconi, and S. Tessaris. </author> <title> Implementing and testing expressive description logics: a preliminary report. </title> <editor> In Ellis et al. </editor> <volume> [15], </volume> <pages> pages 2839. </pages>
Reference-contexts: Several description logic systems have been built for such description logics, and thus include what is essentially a satisfiability checker for some propositional modal logic; examples of such systems include KRIS [5] and CRACK <ref> [10] </ref>. These two systems have incorporated a number of optimisations to achieve better performance of their subsumption checkers. Description logic systems are also optimised in other ways. In particular, their operations are arranged so as to avoid potentially-costly subsumption checks whenever possible. <p> However, although the theoretical complexity results are discouraging, empirical analyses of real applications have shown that the kinds of construct that lead to worst case intractability rarely occur in practice [35, 25, 46, 28], and it has proved possible to build practical description logic systems based on expressive description logics <ref> [5, 10, 29] </ref>. Systems that are based on description logics like these generally determine whether a subsumption holds by transforming the subsumption problem into a satisfiability problem in the obvious manner: concept C subsumes concept D if and only if the concept D u :C is not satisfiable. <p> We used KRIS here as an example of an unoptimised description logic system. Other unoptimised description logic systems, such as Crack <ref> [10] </ref>, give similar or worse results. We used KSAT as an example of a heavily-optimised reasoner for propositional modal logics. However, neither KRIS nor KSAT can be used on all our tests. Neither handle transitive roles, and KSAT cannot handle a knowledge base.
Reference: [11] <author> M. Buchheit, F. M. Donini, and A. Schaerf. </author> <title> Decidable reasoning in terminological knowledge representation systems. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 1:109 138, </volume> <year> 1993. </year>
Reference-contexts: Each of these techniques will be described in detail in the following sections. 3.1 Lexical Normalisation Theoretical descriptions of tableaux algorithms generally assume that the concept expression to be tested is in negation normal form, with negations applying only to atomic concepts <ref> [27, 4, 11] </ref>. This simplifies the (description of the) algorithm but it means that a clash will only be detected when an atomic concept and its negation occur in the same node label.
Reference: [12] <author> M. Davis, G. Logemann, and D. Loveland. </author> <title> A machine program for theorem proving. </title> <journal> Communications of the ACM, </journal> <volume> 5:394397, </volume> <year> 1962. </year>
Reference-contexts: This problem can be dealt with by using a semantic branching technique adapted from the Davis-Putnam-Logemann-Loveland procedure (DPL) commonly used to solve propositional satisfiability (SAT) problems <ref> [12, 21] </ref>. Instead of choosing an unexpanded disjunction in L (x), a single disjunct D is chosen from one of the unexpanded disjunctions in L (x). The two possible sub-trees obtained by adding either D or :D to L (x) are then searched.
Reference: [13] <author> G. De Giacomo and F. Massacci. </author> <title> Combining deduction and model checking into tableaux and algorithms for converse-pdl. </title> <journal> Information and Computation, </journal> <note> to appear. </note>
Reference-contexts: It is hoped that the availability of DLP will lead to the development of such data, in particular knowledge bases that use its more expressive description logic. 5 Further details can be found in <ref> [37, 1, 13] </ref>. The implementations of both FaCT and DLP include a term classifier or Tbox that can build and maintain a concept hierarchya partial ordering of named concepts based on the subsumption relation.
Reference: [14] <author> H. de Swart, </author> <title> editor. Automated Reasoning with Analytic Tableaux and Related Methods: </title> <booktitle> International Conference Tableaux'98, number 1397 in Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <month> May </month> <year> 1998. </year>
Reference: [15] <author> Gerard Ellis, Robert A. Levinson, </author> <title> Andrew Fall, </title> <editor> and Veronica Dahl, editors. </editor> <title> Knowledge Retrieval, Use and Storage for Efficiency: </title> <booktitle> Proceedings of the First International KRUSE Symposium, </booktitle> <year> 1995. </year>
Reference: [16] <author> M. J. Fischer and R. E. Ladner. </author> <title> Propositional dynamic logic of regular programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 18:194211, </volume> <year> 1979. </year>
Reference-contexts: The less expressive logic is equivalent to the logic implemented by FaCT. Here DLP is essentially a reimplementation (with improved data structures and some additional optimisation) of FaCT's subsumption reasoner. The more expressive logic implemented by DLP includes propositional dynamic logic (PDL) <ref> [16] </ref>, augmenting PDL with number restrictions on atomic roles. The syntax and semantics of the more expressive logic is given in Table 2.
Reference: [17] <author> J. Franco and M. Paull. </author> <title> Probabilistic analysis of the Davis-Putnam procedure for solving the satisfiability problem. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 5:7787, </volume> <year> 1983. </year>
Reference-contexts: DLP also outperformed the other systems that took part in the Tableaux'98 comparison [7]. Our second propositional modal logic test suite uses a common method for testing SAT decision procedures <ref> [17] </ref> that has been adapted for use with propositional modal K by Giun-chiglia and Sebastiani [23], and further refined by Hustadt and Schmidt [33]. The method uses a random generator to produce formulae, with the characteristics of the formulae being controlled by a number of parameters.
Reference: [18] <author> E. Franconi. </author> <title> Systems comparison: Crack. </title> <editor> In Franconi et al. </editor> <volume> [19], </volume> <pages> pages 5859. </pages>
Reference-contexts: base acceptable to a larger number of implemented description logics (including KRIS and CRACK), and has relatively little impact on the hardness of subsumption testing, which derives primarily from the large number of highly disjunctive concepts generated by absorption [29]. 15 Test results for CRACK are due to Enrico Franconi <ref> [18] </ref>. 16 We have been unable to find a realistic knowledge base containing non-absorbable inclusion axioms.
Reference: [19] <author> E. Franconi, G. De Giacomo, R. M. MacGregor, W. Nutt, C. A. Welty, and F. Sebastiani, </author> <title> editors. </title> <booktitle> Collected Papers from the International Description Logics Workshop (DL'98). </booktitle> <address> CEUR, </address> <month> May </month> <year> 1998. </year>
Reference: [20] <author> J. W. Freeman. </author> <title> Improvements to propositional satisfiability search algorithms. </title> <type> PhD thesis, </type> <institution> Department of Computer and Information Science, University of Pennsylvania, </institution> <address> Philadelphia, PA, USA, </address> <year> 1995. </year>
Reference-contexts: The simplification used by both FaCT and DLP is to deterministically expand disjunctions in L (x) that present only one expansion possibility and to detect a clash when a disjunction in L (x) has no expansion possibilities. This simplification has been called boolean constraint propagation (BCP) <ref> [20] </ref>. In effect, the inference rule :C 1 ; : : : ; :C n ; C 1 t : : : t C n t D is being used to simplify the expression represented by L (x). <p> A method that is widely used in DPL SAT algorithms is to branch on the disjunct that has the Maximum number of Occurrences in disjunctions of Minimum Sizethe well known MOMS heuristic <ref> [20] </ref>. By choosing a disjunct that occurs frequently in small disjunctions, the MOMS heuristic tries to maximise the effect of BCP.
Reference: [21] <author> J. W. Freeman. </author> <title> Hard random 3-SAT problems and the Davis-Putnam procedure. </title> <journal> Artificial Intelligence, </journal> <volume> 81:183198, </volume> <year> 1996. </year>
Reference-contexts: This problem can be dealt with by using a semantic branching technique adapted from the Davis-Putnam-Logemann-Loveland procedure (DPL) commonly used to solve propositional satisfiability (SAT) problems <ref> [12, 21] </ref>. Instead of choosing an unexpanded disjunction in L (x), a single disjunct D is chosen from one of the unexpanded disjunctions in L (x). The two possible sub-trees obtained by adding either D or :D to L (x) are then searched.
Reference: [22] <author> F. Giunchiglia and R. Sebastiani. </author> <title> Building decision procedures for modal logics from propositional decision proceduresthe case study of modal K. </title> <editor> In Michael McRobbie and John Slaney, editors, </editor> <booktitle> Proceedings of the Thirteenth International Conference on Automated Deduction (CADE-13), number 1104 in Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 583597. </pages> <publisher> Springer, </publisher> <year> 1996. </year> <month> 26 </month>
Reference-contexts: label of a node x, syntactic branching works by choosing an unexpanded disjunction (C 1 t : : : t C n ) in L (x) and searching the different models obtained by adding each of the disjuncts C 1 , . . . , C n to L (x) <ref> [22] </ref>.
Reference: [23] <author> F. Giunchiglia and R. Sebastiani. </author> <title> A SAT-based decision procedure for ALC. </title> <editor> In L. C. Aiello, J. Doyle, and S. C. Shapiro, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Fifth International Conference (KR'96), </booktitle> <pages> pages 304314. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: As the alternative branches of the search tree are not disjoint, there is nothing to prevent the 8 A similar technique is used in KSAT, but without the benefit of tagging <ref> [23] </ref>. 7 t t t t x 1 x 2 x L (x) [ fCg ) clash L (x) [ fD 1 g L (x 2 ) [ fCg ) clash L (x 2 ) [ fD 2 g recurrence of an unsatisfiable disjunct in different branches. <p> when the node's satisfiability is determined the concept store is updated accordingly. 4 Comparison with Other Systems To analyse the effectiveness of the above optimisations, we compared the performance of FaCT and DLP against the performance of another description logic system (KRIS [5]) and a propositional modal logic prover (KSAT <ref> [23] </ref>). We used KRIS here as an example of an unoptimised description logic system. Other unoptimised description logic systems, such as Crack [10], give similar or worse results. We used KSAT as an example of a heavily-optimised reasoner for propositional modal logics. <p> DLP also outperformed the other systems that took part in the Tableaux'98 comparison [7]. Our second propositional modal logic test suite uses a common method for testing SAT decision procedures [17] that has been adapted for use with propositional modal K by Giun-chiglia and Sebastiani <ref> [23] </ref>, and further refined by Hustadt and Schmidt [33]. The method uses a random generator to produce formulae, with the characteristics of the formulae being controlled by a number of parameters.
Reference: [24] <author> J. Y. Halpern and Y. Moses. </author> <title> A guide to completeness and complexity for model logics of knowledge and belief. </title> <journal> Artificial Intelligence, </journal> <volume> 54(3):319379, </volume> <month> April </month> <year> 1992. </year>
Reference-contexts: Determining subsumption in ALC R + (and equivalently in S4) is PSPACE-complete <ref> [43, 24] </ref>. Adding either role or concept inclusion axioms results in EXPTIME-complete subsump-tion 4 [38, 48, 29]. Determining subsumption in propositional dynamic logic is also EXP TIME-complete [39]. These and related complexity problems have lead some developers of description logic systems to use less-expressive description logics [9].
Reference: [25] <author> J. Heinsohn, D. Kudenko, B. Nebel, and H.-J. Profitlich. </author> <title> An empirical analysis of terminological representation systems. </title> <journal> Artificial Intelligence, </journal> <volume> 68:367397, </volume> <year> 1994. </year>
Reference-contexts: These and related complexity problems have lead some developers of description logic systems to use less-expressive description logics [9]. However, although the theoretical complexity results are discouraging, empirical analyses of real applications have shown that the kinds of construct that lead to worst case intractability rarely occur in practice <ref> [35, 25, 46, 28] </ref>, and it has proved possible to build practical description logic systems based on expressive description logics [5, 10, 29].
Reference: [26] <author> A. Heuerding and S. Schwendimann. </author> <title> A benchmark method for the propositional modal logics K, KT, and S4. </title> <type> Technical report IAM-96-015, </type> <institution> University of Bern, Switzerland, </institution> <month> October </month> <year> 1996. </year>
Reference-contexts: However, neither KRIS nor KSAT can be used on all our tests. Neither handle transitive roles, and KSAT cannot handle a knowledge base. We used two propositional modal test suites: the test suite from the Tableaux'98 propositional modal logic comparison <ref> [26] </ref> 11 and a collection of random formulae like those generated by Hustadt and Schmidt [33]. These test suites are not ideal, but we were unable to find many description logic knowledge bases that were suitable for testing the performance of FaCT and DLP. <p> Full details of the generation technique and the characteristics of the various classes of formulae can be found in the comparison description <ref> [26] </ref>.
Reference: [27] <author> B. Hollunder and W. Nutt. </author> <title> Subsumption algorithms for concept languages. </title> <booktitle> In Proceedings of the 9th European Conference on Artificial Intelligence (ECAI'90), </booktitle> <pages> pages 348353. </pages> <publisher> John Wiley & Sons Ltd., </publisher> <year> 1990. </year>
Reference-contexts: Each of these techniques will be described in detail in the following sections. 3.1 Lexical Normalisation Theoretical descriptions of tableaux algorithms generally assume that the concept expression to be tested is in negation normal form, with negations applying only to atomic concepts <ref> [27, 4, 11] </ref>. This simplifies the (description of the) algorithm but it means that a clash will only be detected when an atomic concept and its negation occur in the same node label.
Reference: [28] <author> I. Horrocks. </author> <title> A comparison of two terminological knowledge representation systems. </title> <type> Master's thesis, </type> <institution> University of Manchester, </institution> <year> 1995. </year>
Reference-contexts: These and related complexity problems have lead some developers of description logic systems to use less-expressive description logics [9]. However, although the theoretical complexity results are discouraging, empirical analyses of real applications have shown that the kinds of construct that lead to worst case intractability rarely occur in practice <ref> [35, 25, 46, 28] </ref>, and it has proved possible to build practical description logic systems based on expressive description logics [5, 10, 29].
Reference: [29] <author> I. Horrocks. </author> <title> Optimising Tableaux Decision Procedures for Description Logics. </title> <type> PhD thesis, </type> <institution> University of Manchester, </institution> <year> 1997. </year>
Reference-contexts: Two systems that explore the subsumption optimisations required to build an expressive description logic system are FaCT <ref> [29] </ref>, a full description logic system, and DLP [37], an experimental system providing only a limited description logic interface. 1 These two systems incorporate a range of known, adapted, and novel optimisation techniques in their sub-sumption checkers. <p> To this logic, FaCT adds role and concept inclusion axioms <ref> [29] </ref>. Role inclusion axioms are of the form R v S, where R and S are role names, and can be used to define a primitive role hierarchy. <p> Determining subsumption in ALC R + (and equivalently in S4) is PSPACE-complete [43, 24]. Adding either role or concept inclusion axioms results in EXPTIME-complete subsump-tion 4 <ref> [38, 48, 29] </ref>. Determining subsumption in propositional dynamic logic is also EXP TIME-complete [39]. These and related complexity problems have lead some developers of description logic systems to use less-expressive description logics [9]. <p> However, although the theoretical complexity results are discouraging, empirical analyses of real applications have shown that the kinds of construct that lead to worst case intractability rarely occur in practice [35, 25, 46, 28], and it has proved possible to build practical description logic systems based on expressive description logics <ref> [5, 10, 29] </ref>. Systems that are based on description logics like these generally determine whether a subsumption holds by transforming the subsumption problem into a satisfiability problem in the obvious manner: concept C subsumes concept D if and only if the concept D u :C is not satisfiable. <p> Edges are labeled with 4 The addition of role inclusion axioms also allows concept inclusion axioms to be dealt with adding them to concept expressions, a technique known as internalisation <ref> [1, 29] </ref>. 3 Syntax Semantics Concepts A A I &gt; I :C I C I C t D C I [ D I 8R:C fd 2 I : R I (d) C I g I 6nP fd 2 I : j P (d) j ng Roles P P I R t <p> Unfortunately MOMS-style heuristics interact adversely with the backjumping optimisa-tion because they do not prefer older disjuncts, i.e., disjuncts that result from earlier branching points and that will thus lead to more effective pruning if a clash is discovered <ref> [29] </ref>. <p> The test knowledge base was constructed by first translating the GRAIL syntax of the GALEN knowledge base into the standard syntax used by most implemented description logics [3]. Concept inclusion axioms were then eliminated using a pre-processing technique called absorption <ref> [29] </ref>, which can convert some forms of inclusion axiom into augmented concept definitions while still retaining their meaningan important effect of GRAIL's restricted syntax is that all concept inclusion axioms can be eliminated in this way. 16 Finally, all role axioms were discarded. <p> This last step makes the knowledge base acceptable to a larger number of implemented description logics (including KRIS and CRACK), and has relatively little impact on the hardness of subsumption testing, which derives primarily from the large number of highly disjunctive concepts generated by absorption <ref> [29] </ref>. 15 Test results for CRACK are due to Enrico Franconi [18]. 16 We have been unable to find a realistic knowledge base containing non-absorbable inclusion axioms.
Reference: [30] <author> I. Horrocks. </author> <title> Using an expressive description logic: FaCT or fiction? In A. </title> <editor> G. Cohn, L. Schubert, and S. C. Shapiro, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Sixth International Conference (KR'98), </booktitle> <pages> pages 636 647. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <month> June </month> <year> 1998. </year>
Reference-contexts: Full details of the algorithm along with a proof of its soundness and completeness can be found in <ref> [30] </ref>. The algorithm for the logic implemented by DLP in its more expressive configuration is more complex due to the presence of the transitive closure operator and of number restrictions.
Reference: [31] <author> I. Horrocks and P. F. Patel-Schneider. </author> <title> Dl systems comparison. </title> <editor> In Franconi et al. </editor> <volume> [19], </volume> <pages> pages 5557. </pages>
Reference-contexts: More information on these tests can be found in the Systems Comparison section of the Proceedings of the 1998 International Workshop on Description Logics <ref> [31] </ref>. The results of these tests, given in Table 8 show that FaCT and DLP perform very well compared to other systems, even those, like NeoClassic, designed to work very quickly with simple constructs.
Reference: [32] <author> I. Horrocks and P. F. Patel-Schneider. </author> <title> FaCT and DLP. </title> <booktitle> In de Swart [14], </booktitle> <pages> pages 2730. </pages>
Reference-contexts: The test methodology here is to ascertain the number of the largest formula of each type that the system is able to solve within 100 seconds of CPU time (&gt;20 indicates that the hardest 11 We entered both FaCT and DLP in this comparison <ref> [32] </ref>. 12 Note that a formula is proved by demonstrating the unsatisfiability of its negation. 12 FaCT DLP KSAT Kris K p n p n p n p n branch 6 4 19 13 8 8 3 3 d4 &gt;20 8 &gt;20 &gt;20 8 5 8 6 grz &gt;20 &gt;20 &gt;20
Reference: [33] <author> U. Hustadt and R. A. Schmidt. </author> <title> On evaluating decision procedures for modal logic. </title> <booktitle> In Proceedings of the 15th International Joint Conference on Artificial Intelligence (IJCAI-97), </booktitle> <volume> volume 1, </volume> <pages> pages 202207, </pages> <year> 1997. </year>
Reference-contexts: Neither handle transitive roles, and KSAT cannot handle a knowledge base. We used two propositional modal test suites: the test suite from the Tableaux'98 propositional modal logic comparison [26] 11 and a collection of random formulae like those generated by Hustadt and Schmidt <ref> [33] </ref>. These test suites are not ideal, but we were unable to find many description logic knowledge bases that were suitable for testing the performance of FaCT and DLP. <p> Our second propositional modal logic test suite uses a common method for testing SAT decision procedures [17] that has been adapted for use with propositional modal K by Giun-chiglia and Sebastiani [23], and further refined by Hustadt and Schmidt <ref> [33] </ref>. The method uses a random generator to produce formulae, with the characteristics of the formulae being controlled by a number of parameters. Each formula produced is a conjunction of L K-clauses, where a K-clause is a disjunction of K elements, each element being negated with a probability of 0.5. <p> We also took some of the hardest subsumption problems from this knowledge base and turned them into satisfiability tests. These tests have proved to be difficult for state-of-the-art propositional modal theorem provers such as KSAT and Hustadt and Schmidt's SPASS based system <ref> [33] </ref>. In fact, some of these satisfiability tests take over 1,000 seconds for these two theorem provers.
Reference: [34] <author> R. Jeroslow and J. Wang. </author> <title> Solving propositional satisfiability problems. </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <volume> 1:167187, </volume> <year> 1990. </year>
Reference-contexts: Branching first on any of D 1 ; : : : ; D n , on the other hand, would only cause a single disjunction to be expanded. 10 There are several variants of the MOMS heuristic, including the heuristic from Jeroslow and Wang <ref> [34] </ref>. The Jeroslow and Wang (JW) heuristic considers all occurrences of a disjunct, weighting them according to the size of the disjunction in which they occur.
Reference: [35] <author> B. Nebel. </author> <title> Terminological reasoning is inherently intractable. </title> <journal> Artificial Intelligence, </journal> <volume> 43(2):235249, </volume> <year> 1990. </year>
Reference-contexts: These and related complexity problems have lead some developers of description logic systems to use less-expressive description logics [9]. However, although the theoretical complexity results are discouraging, empirical analyses of real applications have shown that the kinds of construct that lead to worst case intractability rarely occur in practice <ref> [35, 25, 46, 28] </ref>, and it has proved possible to build practical description logic systems based on expressive description logics [5, 10, 29].
Reference: [36] <author> F. Oppacher and E. Suen. HARP: </author> <title> A tableau-based theorem prover. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 4:69100, </volume> <year> 1988. </year>
Reference-contexts: This problem is addressed by adapting a form of dependency directed backtracking called backjumping, which has been used in solving constraint satisfiability problems [6] (a similar technique was also used in the HARP theorem prover <ref> [36] </ref>). Backjumping works by labeling concept expressions with a dependency set indicating the branching points on which they depend.
Reference: [37] <author> P. F. Patel-Schneider. </author> <title> DLP system description. </title> <editor> In Franconi et al. </editor> <volume> [19], </volume> <pages> pages 8789. </pages>
Reference-contexts: Two systems that explore the subsumption optimisations required to build an expressive description logic system are FaCT [29], a full description logic system, and DLP <ref> [37] </ref>, an experimental system providing only a limited description logic interface. 1 These two systems incorporate a range of known, adapted, and novel optimisation techniques in their sub-sumption checkers. The optimisation techniques include: lexical normalisation, semantic branching search, simplification, dependency directed backtracking, heuristic guided search and caching. <p> It is hoped that the availability of DLP will lead to the development of such data, in particular knowledge bases that use its more expressive description logic. 5 Further details can be found in <ref> [37, 1, 13] </ref>. The implementations of both FaCT and DLP include a term classifier or Tbox that can build and maintain a concept hierarchya partial ordering of named concepts based on the subsumption relation.
Reference: [38] <author> V. R. Pratt. </author> <title> A practical decision method for propositional dynamic logic. </title> <booktitle> In Proceedings of the Tenth ACM Symposium on Theory of Computing (STOC-78), </booktitle> <pages> pages 326337, </pages> <year> 1978. </year>
Reference-contexts: Determining subsumption in ALC R + (and equivalently in S4) is PSPACE-complete [43, 24]. Adding either role or concept inclusion axioms results in EXPTIME-complete subsump-tion 4 <ref> [38, 48, 29] </ref>. Determining subsumption in propositional dynamic logic is also EXP TIME-complete [39]. These and related complexity problems have lead some developers of description logic systems to use less-expressive description logics [9].
Reference: [39] <author> Vaughan R. Pratt. </author> <title> Models of program logics. </title> <booktitle> In Proceedings of the 20th Annual Sympo--sium on the Foundations of Computer Science, </booktitle> <pages> pages 115122. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1979. </year>
Reference-contexts: Determining subsumption in ALC R + (and equivalently in S4) is PSPACE-complete [43, 24]. Adding either role or concept inclusion axioms results in EXPTIME-complete subsump-tion 4 [38, 48, 29]. Determining subsumption in propositional dynamic logic is also EXP TIME-complete <ref> [39] </ref>. These and related complexity problems have lead some developers of description logic systems to use less-expressive description logics [9].
Reference: [40] <institution> Proceedings of the 12th International Joint Conference on Artificial Intelligence, (IJCAI-91), </institution> <year> 1991. </year>
Reference: [41] <author> A. Rector, S. Bechhofer, C. A. Goble, I. Horrocks, W. A. Nowlan, and W. D. Solomon. </author> <title> The GRAIL concept modelling language for medical terminology. </title> <booktitle> Artificial Intelligence in Medicine, </booktitle> <address> 9:139171, </address> <year> 1997. </year>
Reference-contexts: The GALEN knowledge base is a high level ontology that has been designed to form the foundation of a large concept model representing medical terminology. It has been created using the specially developed GRAIL description logic <ref> [41] </ref> that supports a primitive role hierarchy, transitive roles and concept inclusion axioms. GRAIL has a limited terminological languageonly conjunction and existential role concepts are supportedand an unusual syntax that restricts the way concept expressions can be formed.
Reference: [42] <author> A. L. Rector, </author> <title> W A Nowlan, and A Glowinski. Goals for concept representation in the GALEN project. </title> <booktitle> In Proceedings of the 17th Annual Symposium on Computer Applications in Medical Care (SCAMC'93), </booktitle> <pages> pages 414418, </pages> <address> Washington DC, USA, </address> <year> 1993. </year>
Reference-contexts: One test that we have been able to do with an expressive knowledge base is to take the GALEN knowledge base <ref> [42] </ref> and construct a version of it that is acceptable to FaCT, DLP, KRIS and CRACK 15 . The GALEN knowledge base is a high level ontology that has been designed to form the foundation of a large concept model representing medical terminology.
Reference: [43] <author> U. Sattler. </author> <title> A concept language extended with different kinds of transitive roles. </title> <editor> In G. G orz and S. H olldobler, editors, </editor> <booktitle> 20. Deutsche Jahrestagung f ur K unstliche Intelli-genz, number 1137 in Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 333345. </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Both FaCT and DLP implement expressive description logics, with subsumption problems that are known to be highly intractable in the worst case. FaCT implements a superset of the description logic ALC R + <ref> [43] </ref>, an extension of ALC [45] that distinguishes the set of transitive roles, R + ; in FaCT, this set is defined by axioms of the form R 2 R + . To this logic, FaCT adds role and concept inclusion axioms [29]. <p> Determining subsumption in ALC R + (and equivalently in S4) is PSPACE-complete <ref> [43, 24] </ref>. Adding either role or concept inclusion axioms results in EXPTIME-complete subsump-tion 4 [38, 48, 29]. Determining subsumption in propositional dynamic logic is also EXP TIME-complete [39]. These and related complexity problems have lead some developers of description logic systems to use less-expressive description logics [9].
Reference: [44] <author> K. Schild. </author> <title> A correspondence theory for terminological logics: Preliminary report. </title> <booktitle> In Proceedings of IJCAI-91 [40], </booktitle> <pages> pages 466471. </pages>
Reference-contexts: As description logic systems perform numerous subsumption checks in the course of their operations, they need to have a highly-optimised subsumption checker. Schild <ref> [44] </ref> has shown that determining subsumption in expressive description logics is equivalent to determining satisfiability of formulae in propositional modal or dynamic logics. <p> A simple transformation of the semantics demonstrates that this more expressive logic contains propositional dynamic logic as a subset <ref> [44] </ref>. It is also easy to see that this description logic is a superset of the logic used in FaCT, as both transitive roles and role inclusions can be simulated using role expressions.
Reference: [45] <author> M. Schmidt-Schau and G. Smolka. </author> <title> Attributive concept descriptions with complements. </title> <journal> Artificial Intelligence, </journal> <volume> 48:126, </volume> <year> 1991. </year>
Reference-contexts: Both FaCT and DLP implement expressive description logics, with subsumption problems that are known to be highly intractable in the worst case. FaCT implements a superset of the description logic ALC R + [43], an extension of ALC <ref> [45] </ref> that distinguishes the set of transitive roles, R + ; in FaCT, this set is defined by axioms of the form R 2 R + . To this logic, FaCT adds role and concept inclusion axioms [29].
Reference: [46] <author> P.-H. Speel, F. van Raalte, P. E. van der Vet, and N. J. I. </author> <title> Mars. Runtime and memory usage performance of description logics. </title> <editor> In Ellis et al. </editor> <volume> [15], </volume> <pages> pages 1327. </pages>
Reference-contexts: These and related complexity problems have lead some developers of description logic systems to use less-expressive description logics [9]. However, although the theoretical complexity results are discouraging, empirical analyses of real applications have shown that the kinds of construct that lead to worst case intractability rarely occur in practice <ref> [35, 25, 46, 28] </ref>, and it has proved possible to build practical description logic systems based on expressive description logics [5, 10, 29].
Reference: [47] <author> A. Tarski. </author> <title> Logic, Semantics, </title> <booktitle> Mathemetics: Papers from 1923 to 1938. </booktitle> <publisher> Oxford University Press, </publisher> <year> 1956. </year>
Reference-contexts: Concept inclusion axioms are of the form C v D, where C and D are concept expressions, and can be used to assert arbitrary subsumption relationships. 3 A standard Tarski style model theoretic semantics is used to interpret concepts and roles, and to justify subsumption inferences <ref> [47, 3] </ref>. The meaning of concepts and roles is given by an interpretation I, which is a pair ( I ; I ), where I is the domain (a set) and I is an interpretation function.
Reference: [48] <author> M. Y. Vardi and P. Wolper. </author> <title> Automata-theoretic techniques for modal logics of programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 32:183221, </volume> <year> 1986. </year> <month> 28 </month>
Reference-contexts: Determining subsumption in ALC R + (and equivalently in S4) is PSPACE-complete [43, 24]. Adding either role or concept inclusion axioms results in EXPTIME-complete subsump-tion 4 <ref> [38, 48, 29] </ref>. Determining subsumption in propositional dynamic logic is also EXP TIME-complete [39]. These and related complexity problems have lead some developers of description logic systems to use less-expressive description logics [9].
References-found: 48

