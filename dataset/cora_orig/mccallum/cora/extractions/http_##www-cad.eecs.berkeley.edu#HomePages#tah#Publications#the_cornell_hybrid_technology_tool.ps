URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/the_cornell_hybrid_technology_tool.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/the_cornell_hybrid_technology_tool.html
Root-URL: http://www.cs.berkeley.edu
Email: (tahjho)@cs.cornell.edu  
Title: HyTech The Cornell HYbrid TECHnology Tool  
Author: Thomas A. Henzinger and Pei-Hsin Ho 
Address: Ithaca, NY 14853  
Affiliation: Computer Science Department, Cornell University,  
Abstract: This paper is addressed to potential users of HyTech, the Cornell Hybrid Technology Tool, an automatic tool for analyzing hybrid systems. We review the formal technologies that have been incorporated into HyTech, and we illustrate the use of HyTech with three nontrivial case studies.
Abstract-found: 1
Intro-found: 1
Reference: [ACHH93] <author> R. Alur, C. Courcoubetis, T.A. Henzinger, and P.-H. Ho. </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 209-229. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: HyTech 3 is a symbolic model checker for linear hybrid systems. The underlying system model is hybrid automata, an extension of finite automata with continuous variables that are governed by differential equations <ref> [ACHH93] </ref>. The requirement specification language is the integrator computation tree logic Ictl, a branching-time logic with clocks and stop-watches for specifying timing constraints. Safety, liveness, real-time, and duration requirements of hybrid systems can be specified in Ictl [AHH93]. <p> In this report we review the formal technologies that have been incorporated into HyTech. In Section 2, we define the syntax and semantics of linear hybrid automata, which were introduced in <ref> [ACHH93, NOSY93] </ref>. In Section 3, we give an introduction to Ictl model checking and the reachability analysis of linear hybrid automata, which was presented in [AHH93, ACH + 95]. <p> Unfortunately, the computation of post fl ([[' I ]]) or pre fl ([[' F ]]) may not terminate within a finite number of post or pre operations, because the reachability problem for linear hybrid automata is undecidable <ref> [ACHH93] </ref>. HyTech, in other words, offers a semidecision procedure for the reachability analysis. It is our experience, however, that for practical examples, including the examples in this paper, the computation does terminate and HyTech solves the corresponding reachability problems.
Reference: [AHH93] <author> R. Alur, T.A. Henzinger, and P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <booktitle> In Proceedings of the 14th Annual Real-time Systems Symposium, </booktitle> <pages> pages 2-11. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: The requirement specification language is the integrator computation tree logic Ictl, a branching-time logic with clocks and stop-watches for specifying timing constraints. Safety, liveness, real-time, and duration requirements of hybrid systems can be specified in Ictl <ref> [AHH93] </ref>. Given a hybrid automaton describing a system and an Ictl formula describing a requirement, HyTech computes the state predicate that characterizes the set of system states that satisfy the requirement. In this report we review the formal technologies that have been incorporated into HyTech. <p> In Section 2, we define the syntax and semantics of linear hybrid automata, which were introduced in [ACHH93, NOSY93]. In Section 3, we give an introduction to Ictl model checking and the reachability analysis of linear hybrid automata, which was presented in <ref> [AHH93, ACH + 95] </ref>. <p> With some extra care in modeling, HyTech can also be used to analyze the general case of input strings with arbitrary length [HW95]. 2 Specification of Linear Hybrid Automata in HyTech The system modeling language of HyTech is linear hybrid automata <ref> [AHH93] </ref>. Intuitively, a linear hybrid automaton is a labeled multigraph (V; E) with a finite set X of real-valued variables. The edges in E represent discrete system actions and are labeled with guarded assignments to X. <p> Similarly, we define post (S) to be the set of all states such that 0 ! A for some state 0 2 S. Both pre (S) and post (S) are again regions <ref> [AHH93] </ref>. We write pre fl (S) for the infinite union S and post fl (S) for the infinite union S i0 post i (S). <p> Parametric analysis The automatic derivation of parameters was introduced for real-time systems in [AHV93] and applied to hybrid systems in <ref> [AHH93] </ref>. We can use HyTech to synthesize necessary and sufficient conditions on system parameters such that a hybrid automaton satisfies a requirement. Recall that the reactor temperature control system contains the parameter w, which specifies the necessary rest time for a control rod. <p> The readers should refer to [HH95b] for the details about the two-way iterative analysis of hybrid systems. 12 3.3 Ictl Model Checking To check hybrid automata against more general requirements than reachabil-ity, we use the requirement specification language Ictl <ref> [AHH93] </ref>. Ictl is a branching-time logic in the tradition of Ctl [CES86], with additional clock and stop-watch variables for specifying timing constraints. For a formal definition of Ictl, and a discussion of the model-checking algorithm, we refer the reader to [AHH93]; here we present only a couple of typical Ictl requirements <p> requirements than reachabil-ity, we use the requirement specification language Ictl <ref> [AHH93] </ref>. Ictl is a branching-time logic in the tradition of Ctl [CES86], with additional clock and stop-watch variables for specifying timing constraints. For a formal definition of Ictl, and a discussion of the model-checking algorithm, we refer the reader to [AHH93]; here we present only a couple of typical Ictl requirements for the reactor temperature control system. First, recall the safety requirement that the reactor never needs to be shut down, which was characterized by a reachability problem (A; ' I ; ' F ) in Section 3.1.
Reference: [AHV93] <author> R. Alur, T.A. Henzinger, and M.Y. Vardi. </author> <title> Parametric real-time reasoning. </title> <booktitle> In Proceedings of the 25th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 592-601. </pages> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference-contexts: Parametric analysis The automatic derivation of parameters was introduced for real-time systems in <ref> [AHV93] </ref> and applied to hybrid systems in [AHH93]. We can use HyTech to synthesize necessary and sufficient conditions on system parameters such that a hybrid automaton satisfies a requirement. Recall that the reactor temperature control system contains the parameter w, which specifies the necessary rest time for a control rod.
Reference: [BPV94] <author> D. Bosscher, I. Polak, and F. Vaandrager. </author> <title> Verification of an audio-control protocol. </title> <editor> In H. Langmaack, W.-P. de Roever, and J. Vytopil, editors, </editor> <booktitle> FTRTFT 94: Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 863, </booktitle> <pages> pages 170-192. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The boxes will not fall to the floor iff initially the boxes are not positioned closely together on the conveyor belt. HyTech automatically computes the minimum allowable initial distance between the two boxes. The third case study is the Philips audio control protocol presented by Boss-cher, Polak, and Vaandrager <ref> [BPV94] </ref>. The protocol consists of a sender that converts a bit string into an analog signal using the so-called Manchester encoding, and a receiver that converts the analog signal back into a bit string. The sender and the receiver use clocks that may be drifting apart. In [BPV94], it was shown, <p> Polak, and Vaandrager <ref> [BPV94] </ref>. The protocol consists of a sender that converts a bit string into an analog signal using the so-called Manchester encoding, and a receiver that converts the analog signal back into a bit string. The sender and the receiver use clocks that may be drifting apart. In [BPV94], it was shown, by a human proof, that the receiver decodes the signal correctly if and only if the clock drift is bounded by a certain constant. HyTech automatically computes that constant for input strings up to 8 bits. <p> that b2 b1 &gt; 9 _ b1 b2 &gt; 9 is a necessary and sufficient condition on the initial condition of the system so that neither box will fall off the conveyor belt; that is, jb 1 b 2 j &gt; 9. 23 5.3 The Philips Audio Control Protocol In <ref> [BPV94] </ref>, the timing-based Philips audio control protocol is modeled by an extension of the timed I/O automata model [LV92, LV93], and verified mathematically without computer support. We model the same protocol using linear hybrid automata, and verify its correctness for input strings up to length 8 using HyTech.
Reference: [CC77] <author> P. Cousot and R. Cousot. </author> <title> Abstract interpretation: a unified lattice model 27 output d := 2d d = 0 output 1 output 0 Fig. 21. The output automaton CPU time 681.8 sec. 4275 sec. 2018 sec. Input lengthClock error Location number 5 or 6 5 or 6 Disproved1/15 Proved 1/20 Transition number Fig. 22. Verification of the audio control protocol for the static analysis of programs by construction or approximation of fixpoints. </title> <booktitle> In Proceedings of the Fourth Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 238-252, </pages> <address> Los Angeles, California, 1977. </address> <publisher> ACM Press. </publisher>
Reference-contexts: The verification requires 17.27 seconds of CPU time. 6 3.2 Abstract Interpretation To expedite the reachability analysis and to force the termination of the analysis, HyTech provides several abstract-interpretation operators <ref> [CC77, HH95b] </ref>, including the convex-hull operator and the extrapolation operator. Our extrapolation operator is similar to the widening operator of [CH78, Hal93]. 6 All performance figures are given for a SPARC 670MP station. 11 An abstract-interpretation operator approximates a set of convex data re-gions with a single convex data region.
Reference: [CC92] <author> P. Cousot and R. Cousot. </author> <title> Comparing the Galois connection and widening/narrowing approaches to abstract interpretation. </title> <booktitle> In PLILP, Lecture Notes in Computer Science 631, </booktitle> <pages> pages 269-295. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: apply the extrapolation operator to all or none of the control locations, respectively. (In our analysis of the reactor temperature control system, it was not necessary to use any abstract-interpretation operators.) Two-way iterative approximation If inconclusive, the approximate reach-ability analysis can be refined by alternating approximate forward and backward analysis <ref> [CC92, DW95] </ref>. If any abstract-interpretation operators are used, HyTech automatically performs a two-way iterative analysis, beginning with the specified forward or backward pass.
Reference: [CES86] <author> E.M. Clarke, </author> <title> E.A. Emerson, and A.P. Sistla. Automatic verification of finite-state concurrent systems using temporal-logic specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <year> 1986. </year>
Reference-contexts: Ictl is a branching-time logic in the tradition of Ctl <ref> [CES86] </ref>, with additional clock and stop-watch variables for specifying timing constraints. For a formal definition of Ictl, and a discussion of the model-checking algorithm, we refer the reader to [AHH93]; here we present only a couple of typical Ictl requirements for the reactor temperature control system.
Reference: [CH78] <author> P. Cousot and N. Halbwachs. </author> <title> Automatic discovery of linear restraints among variables of a program. </title> <booktitle> In Proceedings of the Fifth Annual Symposium on Principles of Programming Languages. </booktitle> <publisher> ACM Press, </publisher> <year> 1978. </year>
Reference-contexts: Our extrapolation operator is similar to the widening operator of <ref> [CH78, Hal93] </ref>. 6 All performance figures are given for a SPARC 670MP station. 11 An abstract-interpretation operator approximates a set of convex data re-gions with a single convex data region. The convex-hull operator overapprox-imates a union of convex data regions by its convex hull.
Reference: [Cor94] <author> J.C. Corbett. </author> <title> Modeling and analysis of real-time Ada tasking programs. </title> <booktitle> In Proceedings of the 15th Annual Real-time Systems Symposium. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: In Section 5, we apply HyTech to three nontrivial benchmark problems. All three examples are taken from the literature, rather than devised by us. The first case study is a distributed control system introduced by Corbett <ref> [Cor94] </ref>. The system consists of a controller and two sensors, and is required to issue control commands to a robot within certain time limits. The two sensor processes are executed on a single processor, as scheduled by a priority scheduler. <p> 550, respectively, we obtain exactly the condition 9W &lt; 184 that results from analyzing the rate-translated reactor core automaton of Figure 1. 5 Three Case Studies We report on the application of HyTech to three nontrivial benchmark problems. 5.1 A Distributed Control System with Time-outs The distributed control system of <ref> [Cor94] </ref> consists of two sensors and a controller that generates control commands to a robot according to the sensor readings. The programs for the two sensors and the controller are written in Ada.
Reference: [DW95] <author> D.L. Dill and H. Wong-Toi. </author> <title> Verification of real-time systems by successive over- and underapproximation. </title> <booktitle> In CAV 95: Computer-aided Verification, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: apply the extrapolation operator to all or none of the control locations, respectively. (In our analysis of the reactor temperature control system, it was not necessary to use any abstract-interpretation operators.) Two-way iterative approximation If inconclusive, the approximate reach-ability analysis can be refined by alternating approximate forward and backward analysis <ref> [CC92, DW95] </ref>. If any abstract-interpretation operators are used, HyTech automatically performs a two-way iterative analysis, beginning with the specified forward or backward pass.
Reference: [DY95] <author> C. Daws and S. Yovine. </author> <title> Verification of multirate timed automata with KRONOS: two examples. </title> <type> Technical Report Spectre-95-06, </type> <institution> VERIMAG, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: The system is illustrated in Figure 12. This system has been also modeled and analyzed in <ref> [DY95] </ref>. s ready d := 0 1 d ! d := 0 1 d ! d := 0 d pick d turnrightd putdownd turnleft d stay d 6d 2d 6 _ d = 1 5 d d pick 1 d pick 2 5 d ! d := 0 d put 2
Reference: [Hal93] <author> N. Halbwachs. </author> <title> Delay analysis in synchronous programs. </title> <editor> In C. Courcoubetis, editor, </editor> <booktitle> CAV 93: Computer-aided Verification, Lecture Notes in Computer Science 697, </booktitle> <pages> pages 333-346. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <month> 28 </month>
Reference-contexts: The current implementation of HyTech consists of a Mathematica main program and a collection of C ++ subroutines that make use of a polyhedron-manipulation library by Halbwachs <ref> [Hal93, HRP94] </ref>. <p> Our extrapolation operator is similar to the widening operator of <ref> [CH78, Hal93] </ref>. 6 All performance figures are given for a SPARC 670MP station. 11 An abstract-interpretation operator approximates a set of convex data re-gions with a single convex data region. The convex-hull operator overapprox-imates a union of convex data regions by its convex hull.
Reference: [HH95a] <author> T.A. Henzinger and P.-H. Ho. </author> <title> Algorithmic analysis of nonlinear hybrid sys-tems. </title> <booktitle> In CAV 95: Computer-aided Verification, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: We also demonstrate the use of abstract-interpretation operators, which are discussed in greater detail in [HH95b]. In Section 4, we indicate how nonlinear hybrid systems can be translated into linear hybrid automata, so that linear analysis techniques apply <ref> [HH95a] </ref>. Throughout, we use a temperature controller for a toy nuclear reactor as a running example to illustrate the use of HyTech. For the practitioners, we present the actual input language for describing linear hybrid automata and verification commands. In Section 5, we apply HyTech to three nontrivial benchmark problems. <p> Both options can be formalized as algorithmic translations|the clock transla tion and the rate translation|from nonlinear hybrid automata to linear hybrid automata. Both translations are currently being implemented in HyTech, and formal definitions of the translations can be found in <ref> [HH95a] </ref>. 4.1 Clock Translation Suppose that the reactor core of the reactor temperature control example is modeled by the hybrid automaton shown in Figure 5. <p> The applicability of the clock translation depends on the solvability of differential equations, and we have begun to characterize sufficient conditions for the appli cability of the clock translation <ref> [HH95a] </ref>. 4.2 Rate Translation The rate translation overapproximates nonlinear variables using linear variables that are governed by rate intervals. <p> Thus better approximations allow the design engineers to use slower mechanisms for moving the control rods. If desired, the approximation by rate translation can be refined by splitting control locations <ref> [HH95a] </ref>. Finally, suppose we replace the differential equations for the nonlinear variable x of the reactor core automaton from Figure 5 by worst-case constant-slope assumptions. By experimenting, we find that under these simplifying assumptions, additional parameters can be synthesized by HyTech.
Reference: [HH95b] <author> T.A. Henzinger and P.-H. Ho. </author> <title> A note on abstract-interpretation strategies for hybrid automata. </title> <booktitle> This volume, </booktitle> <year> 1995. </year>
Reference-contexts: See also http://www.cs.cornell.edu/Info/People/tah/hytech.html. derive sufficient and necessary conditions on the parameters such that the system satisfies a given Ictl requirement. We also demonstrate the use of abstract-interpretation operators, which are discussed in greater detail in <ref> [HH95b] </ref>. In Section 4, we indicate how nonlinear hybrid systems can be translated into linear hybrid automata, so that linear analysis techniques apply [HH95a]. Throughout, we use a temperature controller for a toy nuclear reactor as a running example to illustrate the use of HyTech. <p> The verification requires 17.27 seconds of CPU time. 6 3.2 Abstract Interpretation To expedite the reachability analysis and to force the termination of the analysis, HyTech provides several abstract-interpretation operators <ref> [CC77, HH95b] </ref>, including the convex-hull operator and the extrapolation operator. Our extrapolation operator is similar to the widening operator of [CH78, Hal93]. 6 All performance figures are given for a SPARC 670MP station. 11 An abstract-interpretation operator approximates a set of convex data re-gions with a single convex data region. <p> If any abstract-interpretation operators are used, HyTech automatically performs a two-way iterative analysis, beginning with the specified forward or backward pass. The readers should refer to <ref> [HH95b] </ref> for the details about the two-way iterative analysis of hybrid systems. 12 3.3 Ictl Model Checking To check hybrid automata against more general requirements than reachabil-ity, we use the requirement specification language Ictl [AHH93].
Reference: [HHWT95] <author> T.A. Henzinger, P.-H. Ho, and H. Wong-Toi. HyTech: </author> <title> The next generation. </title> <note> Submitted, </note> <year> 1995. </year>
Reference-contexts: A forward reachability analysis with HyTech successfully verifies the protocol for k = 6. The performance of HyTech is summarized in Table 22. Remark. Since the submission of this paper, we have reimplemented HyTech independent of Mathematica <ref> [HHWT95] </ref>. That implementation is significantly more efficient, and achieves speedup of one to three orders of magnitude.
Reference: [HRP94] <author> N. Halbwachs, P. Raymond, and Y.-E. Proy. </author> <title> Verification of linear hybrid systems by means of convex approximation. </title> <editor> In B. LeCharlier, editor, </editor> <booktitle> International Symposium on Static Analysis, SAS'94, Lecture Notes in Computer Science 864, </booktitle> <address> Namur (belgium), </address> <month> September </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference-contexts: The current implementation of HyTech consists of a Mathematica main program and a collection of C ++ subroutines that make use of a polyhedron-manipulation library by Halbwachs <ref> [Hal93, HRP94] </ref>.
Reference: [HW95] <author> P.-H. Ho and H. Wong-Toi. </author> <title> Automated analysis of an audio control protocol. </title> <booktitle> In CAV 95: Computer-aided Verification, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: HyTech automatically computes that constant for input strings up to 8 bits. With some extra care in modeling, HyTech can also be used to analyze the general case of input strings with arbitrary length <ref> [HW95] </ref>. 2 Specification of Linear Hybrid Automata in HyTech The system modeling language of HyTech is linear hybrid automata [AHH93]. Intuitively, a linear hybrid automaton is a labeled multigraph (V; E) with a finite set X of real-valued variables.
Reference: [LV92] <author> N.A. Lynch and F. Vaandrager. </author> <title> Action transducers and timed automata. </title> <editor> In R.J. Cleaveland, editor, </editor> <booktitle> CONCUR 92: Theories of Concurrency, Lecture Notes in Computer Science 630, </booktitle> <pages> pages 436-455. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: initial condition of the system so that neither box will fall off the conveyor belt; that is, jb 1 b 2 j &gt; 9. 23 5.3 The Philips Audio Control Protocol In [BPV94], the timing-based Philips audio control protocol is modeled by an extension of the timed I/O automata model <ref> [LV92, LV93] </ref>, and verified mathematically without computer support. We model the same protocol using linear hybrid automata, and verify its correctness for input strings up to length 8 using HyTech. The protocol consists of a sender and a receiver.
Reference: [LV93] <author> N.A. Lynch and F. Vaandrager. </author> <title> Forward and backward simulations, part ii: timing-based systems. </title> <type> Technical Report CS-R9314, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <year> 1993. </year>
Reference-contexts: initial condition of the system so that neither box will fall off the conveyor belt; that is, jb 1 b 2 j &gt; 9. 23 5.3 The Philips Audio Control Protocol In [BPV94], the timing-based Philips audio control protocol is modeled by an extension of the timed I/O automata model <ref> [LV92, LV93] </ref>, and verified mathematically without computer support. We model the same protocol using linear hybrid automata, and verify its correctness for input strings up to length 8 using HyTech. The protocol consists of a sender and a receiver.
Reference: [NOSY93] <author> X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> An approach to the description and analysis of hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 149-178. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: In this report we review the formal technologies that have been incorporated into HyTech. In Section 2, we define the syntax and semantics of linear hybrid automata, which were introduced in <ref> [ACHH93, NOSY93] </ref>. In Section 3, we give an introduction to Ictl model checking and the reachability analysis of linear hybrid automata, which was presented in [AHH93, ACH + 95]. <p> The reactor core automaton through instantaneous system actions or, while time elapses, through continuous environment activities. Example: reactor temperature control We use a variant of the reactor temperature control system from <ref> [NOSY93] </ref> as a running example. The system consists of a reactor core and two control rods that control the temperature of the reactor core.
Reference: [PV95] <author> A. Puri and P. Varaiya. </author> <title> Verification of hybrid systems using abstractions. </title> <booktitle> This volume, </booktitle> <year> 1995. </year> <month> 29 </month>
Reference-contexts: It follows, for example, that a scheduler that gives higher priority to one sensor may meet the specification requirement, while a scheduler that gives priority to the other sensor may fail the requirement. The second case study is a two-robot manufacturing system introduced by Puri and Varaiya <ref> [PV95] </ref>. The system consists of a conveyor belt with two boxes, a service station, and two robots. The boxes will not fall to the floor iff initially the boxes are not positioned closely together on the conveyor belt. HyTech automatically computes the minimum allowable initial distance between the two boxes. <p> In that case, a robot command is generated at least once every 11.0 milliseconds. 5.2 A Two-robot Manufacturing System Puri and Varaiya <ref> [PV95] </ref> designed a manufacturing system that consists of a conveyor belt with two boxes, a service station, and two robots. The system is illustrated in Figure 12.
References-found: 21

