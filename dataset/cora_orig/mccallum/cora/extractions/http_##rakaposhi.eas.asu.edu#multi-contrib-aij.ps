URL: http://rakaposhi.eas.asu.edu/multi-contrib-aij.ps
Refering-URL: http://rakaposhi.eas.asu.edu/yochan.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Multi-Contributor Causal Structures for Planning: A Formalization and Evaluation  Multi-contributor Causal Structures for Planning  
Author: Subbarao Kambhampati 
Note: Running Head:  
Address: Tempe, AZ 85287-5406  
Affiliation: Department of Computer Science and Engineering Arizona State University  
Abstract: Explicit causal structure representations have been widely used in classical planning systems to guide a variety of aspects of planning, including plan generation, modification and generalization. For the most part, these representations were limited to single-contributor causal structures. Although widely used, single-contributor causal structures have several limitations in handling partially ordered and partially instantiated plans. Specifically they are (i) incapable of exploiting redundancy in the plan causal structure and (ii) force premature commitment to individual contributors thereby causing unnecessary backtracking. In this paper, we study multi-contributor causal structures as a way of overcoming these limitations. We will provide a general formulation for multi-contributor causal links, and explore the properties of several special classes of this formulation. We will then describe two planning algorithms -- MP and MP-I -- that use multi-contributor causal links to organize their search for plans. We will describe empirical studies demonstrating the advantages of MP and MP-I over planners that use single contributor causal structures, and argue that they strike a more favorable balance in the tradeoff between search space redundancy and premature commitment to contributors. Finally, we will present a framework for justifying plans with respect to multi-contributor causal structures and describe its applications in plan modification and generalization. fl A preliminary version of this paper was presented at the 1st Intl. Conference on AI Planning Systems, College Park, MD, 20742, June 1992 [11]. Author's e-mail address is rao@asuvax.asu.edu 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32:333--377, </volume> <year> 1987. </year>
Reference-contexts: We shall assume that the actions are represented by instantiated strips-style operators with Add, Delete and Precondition lists, all of which are conjunctions of functionless first order literals (c.f. <ref> [1] </ref>). For simplicity, we shall omit explicit mention of symbol table in this paper, and write plans as 3-tuples: P : hT ; O; Bi. When we talk about a step, it is assumed that we are also talking about the action (operator) signified by that step. <p> For plans involving the class of action representations used in classical planning (including ADL [19], STRIPS [18] and TWEAK <ref> [1] </ref> representations), the following causality theorem holds (c.f. [19]): A condition p is true in the state preceding the execution of a step w in a completion CP , if and only if there exists some step s that precedes w in CP , such that s has an effect p <p> The above formulation explicitly admits the possibility that p is contributed by different members of S for different completions of the plan. This facilitates a more flexible way of accommodating plans that are correct by the white-knight clause of tweak truth criterion <ref> [1] </ref>. Consider, for example, the prerequisite P of step f in in the plan mpex shown in Figure 1. Although both w1 and w2 provide P , neither of them can do it in all the completions of MP. <p> consider one of w1 and 4 Note that requiring that all the contributors of a causal link must precede the destination node, and provide an effect that will necessarily codesignate with the condition being supported, is in general stronger than the minimal constraints required to satisfy the tweak truth criterion <ref> [1] </ref>. Consider, for example, the case of a plan where a step w needs a condition P (v), s1 has an effect P (x), s 2 has an effect P (z), s 1 w, s 2 w, s 1 and s 2 are unordered w.r.t. to each other. <p> What we have here is a tradeoff between redundancy in the search space explored by the planner, and the amount of commitment it is making. Planners like tweak <ref> [1] </ref> have very low commitment, but may be searching in highly redundant search spaces. Planners like UA [17] and SNLP [16, 25] guarantee systematicity, but impose higher commitment and thus may lead to more backtracking. In Section 4.3 we related this increased commitment to exhaustiveness of validation structures. <p> Spectrum of Tradeoffs: More generally, there is a spectrum of tradeoffs between the redundancy in the search space and the extent of premature commitment forced by the planner. At one end of this spectrum we have planners that are generated by blindly inverting Chapman's MTC <ref> [1] </ref>. A representative search cycle for such planners is shown in Figure 12. Notice that such planners not only defer decisions about bindings and orderings, but also completely avoid committing to specific contributors for prerequisites.
Reference: [2] <author> S.A. Chien. </author> <title> An Explanation-Based Learning Approach to Incremental Planning. </title> <type> (Ph.D. Dissertation). </type> <note> Available as Technical Report UIUCDCS-R-90-1646, </note> <institution> Dept. of Computer Science, University of Illinois, Urbana, IL, </institution> <year> 1990. </year>
Reference-contexts: plan rationale [21]; in replanning, plan modification and abstraction planning to justify individual planning decisions and to retract unjustified ones [8, 6, 32]; in plan debugging to characterize the plan failures [26, 24]; and in plan generalization to explain plan correctness and use that explanation as a basis for generalization <ref> [9, 2] </ref>. Most of the previous work modeled plan causal structures in terms of single-contributor causal links, which maintain causal links as the dependencies between a consumer step requiring a prerequisite, and a single producer step which contributes that prerequisite.
Reference: [3] <author> J. Christensen. </author> <title> A hierarchical planner that generates its own hierarchies. </title> <booktitle> In Proc. Eighth Natl. Conf. on Artificial Intell (AAAI-90), </booktitle> <year> 1990. </year>
Reference-contexts: Most existing tractable abstraction strategies are based solely on analyses of potential interactions [14, 32], and are of limited utility. In particular, according to such analyses ``hf '' and ``he'' will be of the same level of importance as other preconditions. The predicate-relaxation approach advocated by Christensen <ref> [3] </ref> will be able to separate ``hf '' and ``he'' from other preconditions, but it is not in general tractable. Finally, although most of the experiments reported in this section were done in ground domains, we did test our planners in domains with variables.
Reference: [4] <author> K. Currie and A. Tate. O-Plan: </author> <title> The Open Planning Architecture. </title> <journal> Artificial Intelligence, </journal> <volume> 52 </volume> <pages> 49-86. </pages>
Reference: [5] <author> L. Daniels. </author> <title> Planning and operations research. </title> <booktitle> In: Artificial Intelligence: Tools, Techniques, and Applications, </booktitle> <editor> T. O'Shea and M. Eisenstadt (Ed). </editor> <publisher> Harper & Row, </publisher> <address> New York, </address> <year> 1984. </year> <month> 43 </month>
Reference-contexts: The initial implementations of nonlin did not attempt to re-justify the plan after such a retraction. This may leave the plan with unjustified constraints (thereby affecting the minimality of the plan and the completeness of the planner). Latter work on nonlin provided some techniques to rectify this <ref> [5] </ref>. The development of 25 Critical PV-nodes are essentially the last nodes on each incoming branch which assert the condition, without it being asserted or deleted subsequently in that branch. Thus, none of the initial contributors are irrelevant. <p> They however do not discuss or evaluate the utility of such dependencies in planning. The idea of justifying planning decisions with respect to the underlying causal (goal) structure of the plan has been first introduced in Daniels' work to augment NONLIN <ref> [5] </ref>, and is formalized in our work on PRIAR plan modification framework [8]. The framework discussed in Section A can be seen as an extension of that formalization to the case of multi-contributor validation structures. <p> In particular, we can justify causal links in terms of the overall goals of the plan, and then justify the other constraints in the plan in terms of the causal links they support <ref> [8, 32, 5] </ref>. Such a justification structure allows the planner to locate parts of the plan that become superfluous whenever a particular retraction occurs. When a decision is retracted, then all that is needed to rejustify the plan would be to locate the inconsistencies and superfluous steps.
Reference: [6] <author> S. Hanks and D. Weld. </author> <title> Systematic Adaptation for Case-Based Planning. </title> <booktitle> In Proceedings of 1st Intl. Conf. on AI Planning Systems, </booktitle> <address> College Park, MD, </address> <year> 1992. </year>
Reference-contexts: However, they also found wide-spread use in plan recognition to capture the plan rationale [21]; in replanning, plan modification and abstraction planning to justify individual planning decisions and to retract unjustified ones <ref> [8, 6, 32] </ref>; in plan debugging to characterize the plan failures [26, 24]; and in plan generalization to explain plan correctness and use that explanation as a basis for generalization [9, 2]. <p> in the search space by ``cutting'' (i.e., not backtracking on) certain planning decisions, including planning order and the order of conflict resolution from the search process. 32 A Supporting Modification and Reuse with Multi-contributor Causal Structures Causal structure representations have been shown to be very valuable in guiding plan modification <ref> [8, 6] </ref>, and generalization [9]. In this section, we look at the support provided by multi-contributor causal structures for plan modification.
Reference: [7] <author> J. Hertzberg and A. Horz. </author> <title> Towards a Theory of Conflict Detection and Resolution in Nonlinear Plans In Proceedings of 11th IJCAI, </title> <month> August </month> <year> 1989. </year>
Reference-contexts: Clouds allowed O-plan to manage multiple contributors all through the planning, by actively keeping track of the ``last incoming contributor'' wavefront. In <ref> [7] </ref>, Hertzberg and Horz discuss a formalization of plan causal dependencies that allows more than one dependency to support a pre-requisite, thus allowing for redundancy in the plan casual structure. They however do not discuss or evaluate the utility of such dependencies in planning.
Reference: [8] <author> S. Kambhampati and J.A. Hendler. </author> <title> A validation structure based theory of plan modification and reuse. </title> <journal> Artificial Intelligence, </journal> <volume> 55(2-3):193-258, </volume> <year> 1992. </year>
Reference-contexts: 1 Introduction Representation and use of causal structure of plans is ubiquitous in classical planning. Some of the specific (though similar) causal structure representations that have been proposed include Protection intervals [26, 27, 30, 19], goal structure [28], plan rationale [31], causal links [16], and validations <ref> [8] </ref>. The original motivation for these representations was to keep track of interactions and to organize and systematize the planner's search process [26, 28, 16]. <p> However, they also found wide-spread use in plan recognition to capture the plan rationale [21]; in replanning, plan modification and abstraction planning to justify individual planning decisions and to retract unjustified ones <ref> [8, 6, 32] </ref>; in plan debugging to characterize the plan failures [26, 24]; and in plan generalization to explain plan correctness and use that explanation as a basis for generalization [9, 2]. <p> The idea of justifying planning decisions with respect to the underlying causal (goal) structure of the plan has been first introduced in Daniels' work to augment NONLIN [5], and is formalized in our work on PRIAR plan modification framework <ref> [8] </ref>. The framework discussed in Section A can be seen as an extension of that formalization to the case of multi-contributor validation structures. <p> in the search space by ``cutting'' (i.e., not backtracking on) certain planning decisions, including planning order and the order of conflict resolution from the search process. 32 A Supporting Modification and Reuse with Multi-contributor Causal Structures Causal structure representations have been shown to be very valuable in guiding plan modification <ref> [8, 6] </ref>, and generalization [9]. In this section, we look at the support provided by multi-contributor causal structures for plan modification. <p> In particular, we can justify causal links in terms of the overall goals of the plan, and then justify the other constraints in the plan in terms of the causal links they support <ref> [8, 32, 5] </ref>. Such a justification structure allows the planner to locate parts of the plan that become superfluous whenever a particular retraction occurs. When a decision is retracted, then all that is needed to rejustify the plan would be to locate the inconsistencies and superfluous steps. <p> The idea here being that removal of such a step will lead to violation of some validation, and consequently cause the plan to fail. In a similar fashion, we can also justify ordering constraints and binding constraints <ref> [8] </ref>. When we allow multi-contributor causal structures, however, the mere fact that a step is supporting a validation does not necessarily mean that it is justified. <p> Additionally, it is said to be strongly justified w.r.t. V if all the steps, ordering constraints and binding constraints are strongly justified. Justifications like these can be computed for each individual decision in polynomial time or can be maintained incrementally during planning and plan modification (cf <ref> [8] </ref>). These justifications can be used to retract superfluous constraints from the plan while preserving the correctness of the plan. <p> Then V is not guaranteed to be a relevant or exhaustive validation structure for P 0 . Both these notions of justifications become equivalent in single contributor validation structures. The justification framework described in this section can form the basis for plan modification <ref> [8] </ref> and plan generalization (cf. [9]) procedures, based on multi-contributor validation structures. Our current re-implementation of PRIAR plan-modification system (c.f. [8]) provides support for this. <p> Both these notions of justifications become equivalent in single contributor validation structures. The justification framework described in this section can form the basis for plan modification <ref> [8] </ref> and plan generalization (cf. [9]) procedures, based on multi-contributor validation structures. Our current re-implementation of PRIAR plan-modification system (c.f. [8]) provides support for this. B Proofs Before proceeding with the proofs of the propositions in the paper, we will state and prove a useful lemma about the limitations of the partial plan representation described in Section 2.
Reference: [9] <author> S. Kambhampati and S.T. Kedar. </author> <title> A unified framework for explanation based generalization of partially ordered partially instantiated plans. </title> <journal> Artificial Intelligence, </journal> <note> To appear in Spring 94. (A preliminary version appears in Proc. of AAAI-91). </note>
Reference-contexts: plan rationale [21]; in replanning, plan modification and abstraction planning to justify individual planning decisions and to retract unjustified ones [8, 6, 32]; in plan debugging to characterize the plan failures [26, 24]; and in plan generalization to explain plan correctness and use that explanation as a basis for generalization <ref> [9, 2] </ref>. Most of the previous work modeled plan causal structures in terms of single-contributor causal links, which maintain causal links as the dependencies between a consumer step requiring a prerequisite, and a single producer step which contributes that prerequisite. <p> It is worth noting at this point that the ability to maximally generalize orderings/bindings etc. based on a validation structure and a single completion is not limited to exhaustive validations structures alone. In fact this a common technique used in explanation-based generalization (c.f. <ref> [9] </ref>). What is interesting about single contributor exhaustive validation structures is that they guarantee a unique such maximal generalization. Thus the class of partial order plans with single contributor exhaustive causal links can be used to define a equivalence class relation over the plan completions. <p> nonlinear planning is merely a means towards improving efficiency of finding plans rather than an end unto itself. (Even if less committed plans or plans having multi-contributor causal structures are required for execution and generalization purposes, we can get them by postprocessing plans generated by SNLP using EBG techniques (c.f. <ref> [9] </ref>).) The expectation regarding the improved efficiency of MP and MP-I comes from the fact that both planners have the ability to avoid premature commitment to specific contributors by flexibly accommodating multiple contributors. <p> by ``cutting'' (i.e., not backtracking on) certain planning decisions, including planning order and the order of conflict resolution from the search process. 32 A Supporting Modification and Reuse with Multi-contributor Causal Structures Causal structure representations have been shown to be very valuable in guiding plan modification [8, 6], and generalization <ref> [9] </ref>. In this section, we look at the support provided by multi-contributor causal structures for plan modification. <p> Then V is not guaranteed to be a relevant or exhaustive validation structure for P 0 . Both these notions of justifications become equivalent in single contributor validation structures. The justification framework described in this section can form the basis for plan modification [8] and plan generalization (cf. <ref> [9] </ref>) procedures, based on multi-contributor validation structures. Our current re-implementation of PRIAR plan-modification system (c.f. [8]) provides support for this.
Reference: [10] <author> S. Kambhampati. </author> <title> Characterizing Multi-Contributor Causal Structures for Planning. </title> <booktitle> In Proceedings of First Intl. Conference on AI Planning Systems, </booktitle> <month> June </month> <year> 1992. </year>
Reference: [11] <author> S. Kambhampati and D.S. Nau. </author> <title> On the Nature and Role of Modal Truth Criteria in Planning Tech. </title> <type> Report. </type> <institution> ISR-TR-93-30, Inst. for Systems Research, University of Maryland, </institution> <month> March, </month> <year> 1993. </year>
Reference-contexts: Our formulation below strikes a middle ground (see also Section 7.1): Definition 3.1 (Causal Link/Protection Interval) A causal link (or protection interval) of a plan P is a 3-tuple hS; p; wi (or S p ! w in McAllester's notation [16]) where (i) w is an individual step 3 See <ref> [11] </ref> for a discussion of some important asymmetries in the modal operators, as applied to TWEAK-type plans 6 and S is a set of steps belonging to plan P, (ii) w requires a condition p (iii) 8s 2 S 2 (s w) and (iv) for each step s 2 S, there
Reference: [12] <author> S. Kambhampati. </author> <title> On the utility of systematicity: Understanding tradeoffs between redundancy and commitment in partial order planning. </title> <booktitle> In Proc. 13th IJCAI, </booktitle> <year> 1993. </year>
Reference: [13] <author> S. Kambhampati. </author> <title> Planning as Refinement Search: A unified framework for comparative analysis of search space size and performance. </title> <type> ASU-CS-TR 93-004, </type> <institution> Dept. of Computer Sci. & Engg., Arizona State University, </institution> <address> Tempe, AZ 85287, </address> <year> 1993. </year>
Reference-contexts: First, it must be emphasized that the performance of a planner does not depend solely on the degree of commitment to contributors, but rather on a combination of factors including the order in which the goals are addressed and the particular termination conditions used (c.f. <ref> [13] </ref>). In our experiments, we kept these factors constant while varying only the goal protection strategies. Varying solutions to these other factors could affect the relative performance of planners based on single and multi-contributor causal links.
Reference: [14] <author> C. Knoblock, J. Tenenberg and Q. Yang. </author> <title> Characterizing abstraction hierarchies for planning. </title> <booktitle> In Proceedings of 9th AAAI, </booktitle> <pages> pp. 692-697, </pages> <year> 1991. </year>
Reference-contexts: Similarly, there are no tractable automated precondition abstraction mechanisms in existence which can induce the goal ordering of the type described above. Most existing tractable abstraction strategies are based solely on analyses of potential interactions <ref> [14, 32] </ref>, and are of limited utility. In particular, according to such analyses ``hf '' and ``he'' will be of the same level of importance as other preconditions.
Reference: [15] <author> P. Langley. </author> <title> Systematic and Nonsystematic search strategies. </title> <booktitle> In Proceedings of 1st Intl. Conference on AI Planning Systems, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: In Section 4.3 we related this increased commitment to exhaustiveness of validation structures. The tradeoff between non-redundancy in search space, and least-commitment, will depend to a large extent on the density of solutions in the domain (c.f. <ref> [15] </ref>). Consider for example the empirical comparison between MP , MP-I , SNLP and McNONLIN, discussed in Section 6.
Reference: [16] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic Nonlinear Planning. </title> <booktitle> In Proc. 9th AAAI, </booktitle> <year> 1991. </year>
Reference-contexts: 1 Introduction Representation and use of causal structure of plans is ubiquitous in classical planning. Some of the specific (though similar) causal structure representations that have been proposed include Protection intervals [26, 27, 30, 19], goal structure [28], plan rationale [31], causal links <ref> [16] </ref>, and validations [8]. The original motivation for these representations was to keep track of interactions and to organize and systematize the planner's search process [26, 28, 16]. <p> The original motivation for these representations was to keep track of interactions and to organize and systematize the planner's search process <ref> [26, 28, 16] </ref>. <p> Section 3 provides the general formulation of multi-contributor causal links, and characterizes the correctness of a plan 1 Planners such as SNLP <ref> [16, 25] </ref> and UA [17] that widen the definition of protection violation, to include both those nodes that intervene and delete the protected condition and those which intervene and merely reassert the protected condition, are especially troublesome in this respect. (This stronger definition of un-threatened and un-usurped causal links is introduced <p> Section 6 discusses the properties of these planners, and provides an empirical evaluation of their advantages over planners using single contributor causal structures. Section 7 discusses the relations with past research. Of special focus here will be the recent work on systematic nonlinear planners (c.f. <ref> [16, 17] </ref>). We will argue that MP and MP-I strike a more favorable balance in the tradeoff between the redundancy in the search space and the extent of (over)commitment, than is provided by single contributor systematic planners such as SNLP. Section 8 summarizes the contributions of the paper. <p> When we talk about a step, it is assumed that we are also talking about the action (operator) signified by that step. By definition, a partially ordered partially instantiated plan P corresponds to a set of totally 2 As McAllester <ref> [16] </ref> points out, this indirection through symbol table is necessitated by the fact that a plan can have multiple instances of a specific domain action serving different roles. 4 ordered totally instantiated execution sequences, called completions. <p> Our formulation below strikes a middle ground (see also Section 7.1): Definition 3.1 (Causal Link/Protection Interval) A causal link (or protection interval) of a plan P is a 3-tuple hS; p; wi (or S p ! w in McAllester's notation <ref> [16] </ref>) where (i) w is an individual step 3 See [11] for a discussion of some important asymmetries in the modal operators, as applied to TWEAK-type plans 6 and S is a set of steps belonging to plan P, (ii) w requires a condition p (iii) 8s 2 S 2 (s <p> The procedures for generating partially instantiated and partially ordered plans can be obtained in a straightforward fashion using the lifting transformation discussed in <ref> [16] </ref>. The implementations of these planners, discussed in Section 6, do use lifted versions of these algorithms.) Just as in planners using single-contributor causal links (e.g. SNLP [16]), the important steps in the multi-contributor causal link planners MP and MP-I are (i) to handle open goals and prerequisites by adding causal <p> The procedures for generating partially instantiated and partially ordered plans can be obtained in a straightforward fashion using the lifting transformation discussed in <ref> [16] </ref>. The implementations of these planners, discussed in Section 6, do use lifted versions of these algorithms.) Just as in planners using single-contributor causal links (e.g. SNLP [16]), the important steps in the multi-contributor causal link planners MP and MP-I are (i) to handle open goals and prerequisites by adding causal links to support them, and (ii) to handle unsafe causal links by adding additional ordering constraints on the plan. <p> Separation falls naturally out of the lifting transformation (see <ref> [16] </ref>) 8 It is instructive to note the differences between this lazy declobbering strategy and the TWEAK white-knight clause: MP-I uses declobbering only when a white-knight step already exists in the plan and is already constrained to necessarily follow the clobberer (-ve threat). <p> See Section A. 17 procedure, which keeps contributor set unordered, ensures that the validations maintained by MP are also exhaustive. In terms of completeness, we note that the algorithms MP and MP-I are generalized versions of the SNLP algorithm <ref> [16] </ref>, in the sense that (i) every plan that satisfies the termination conditions of SNLP also satisfies the termination conditions of MP and MP-I and (ii) the set of refinements allowed by MP and MP-I algorithms is a strict superset of the refinements allowed by SNLP. <p> To begin with, as discussed in Section 1, MP and MP-I will be able to find less constrained plans than planners using single-contributor causal structures such as SNLP. In particular, unlike SNLP (see <ref> [16] </ref>), both MP and MP-I can accommodate plans such as the one shown in Figure 6, proving whose correctness requires the white-knight clause of Chapman's Modal Truth Criterion. <p> In principle, however, it should be possible to integrate both these functionalities of multi-contributor casual structures. Finally, the work described in this paper has some important relations to the recent work on systematic nonlinear planning algorithms (c.f. <ref> [16, 17] </ref>). The next section explores these in depth. 7.1 Tradeoffs between redundancy in search space vs. extent of commitment Systematicity is the ability to eliminate redundancy in the search space by ensuring that no two partial plans in the search space will have safe overlapping completions. <p> What we have here is a tradeoff between redundancy in the search space explored by the planner, and the amount of commitment it is making. Planners like tweak [1] have very low commitment, but may be searching in highly redundant search spaces. Planners like UA [17] and SNLP <ref> [16, 25] </ref> guarantee systematicity, but impose higher commitment and thus may lead to more backtracking. In Section 4.3 we related this increased commitment to exhaustiveness of validation structures. <p> dense graph-structured rather than a tree structured search space. 28 While some of this of redundancy can be avoided by ignoring (or ``cutting'') goal ordering choices and conflict resolution ordering choices from the search space, there is another more subtle form of redundancy -- that of plans having overlapping linearizations <ref> [16] </ref> -- which still poses problems. Visiting plans having overlapping linerizations amounts to visiting some solutions (correct completions) more than once. The effect of such redundancy is to increase worst case size of the search space. <p> links/protection intervals in planning was exactly to systematize this search process so that the planner can do a better job of keeping track of its progress. 27 for example, any planner that backtracks on operator choices, ordering choices and binding choices can safely ignore goal ordering choices without losing completeness <ref> [19, 16] </ref> 28 Graph-structured search space in itself would not have been a problem if it were practical to maintain a closed list of all previously visited plans and checking for duplicates during search. <p> Unfortunately such a strategy poses prohibitive time (checking of equivalence of partially ordered partially instantiated plans takes O (n 3 ) time) as well as space requirements. 31 While TWEAK suffers from high redundancy in the search space, on the other extreme from it are planners such as SNLP <ref> [16] </ref> which organize the search space in such a way as to avoid all types of redundancy in the search space. <p> Proposition 5.3.1 The planning algorithms MP and MP-I described in Figures 4 and 5 are both complete in the technical sense of Definition 2.3. Proof Sketch: Our proof uses the fact that SNLP algorithm, described in <ref> [16] </ref> is provably complete (see [16] for a proof sketch). We will presently consider the completeness of MP . The only difference between the termination conditions of SNLP and MP is that the former maintains single-contributor validation structures. <p> Proposition 5.3.1 The planning algorithms MP and MP-I described in Figures 4 and 5 are both complete in the technical sense of Definition 2.3. Proof Sketch: Our proof uses the fact that SNLP algorithm, described in <ref> [16] </ref> is provably complete (see [16] for a proof sketch). We will presently consider the completeness of MP . The only difference between the termination conditions of SNLP and MP is that the former maintains single-contributor validation structures. <p> Thus, MP terminates for any plan for which SNLP terminates. Next, we note that the set of refinements used by MP is a superset of the refinements used by SNLP. In particular, with the removal of step 3.c, the algorithm MP becomes identical to the algorithm SNLP given in <ref> [16] </ref>. (Note that 3.c is the only step of the algorithm that introduces multi-contributor validations, and MakeRelevant procedure becomes an identity operation for single contributor causal structures). <p> It is possible to show that SNLP algorithm without +ve threat resolution (referred to as McNonlin in Section 6) is still sound and complete (c.f. <ref> [16] </ref>).
Reference: [17] <author> S. Minton, J. Bresina and M. Drummond. </author> <title> Commitment Strategies in Planning: A Comparative Analysis. </title> <booktitle> In Proc. 12th IJCAI, </booktitle> <year> 1991. </year>
Reference-contexts: Section 3 provides the general formulation of multi-contributor causal links, and characterizes the correctness of a plan 1 Planners such as SNLP [16, 25] and UA <ref> [17] </ref> that widen the definition of protection violation, to include both those nodes that intervene and delete the protected condition and those which intervene and merely reassert the protected condition, are especially troublesome in this respect. (This stronger definition of un-threatened and un-usurped causal links is introduced to avoid redundancy in <p> Section 6 discusses the properties of these planners, and provides an empirical evaluation of their advantages over planners using single contributor causal structures. Section 7 discusses the relations with past research. Of special focus here will be the recent work on systematic nonlinear planners (c.f. <ref> [16, 17] </ref>). We will argue that MP and MP-I strike a more favorable balance in the tradeoff between the redundancy in the search space and the extent of (over)commitment, than is provided by single contributor systematic planners such as SNLP. Section 8 summarizes the contributions of the paper. <p> In principle, however, it should be possible to integrate both these functionalities of multi-contributor casual structures. Finally, the work described in this paper has some important relations to the recent work on systematic nonlinear planning algorithms (c.f. <ref> [16, 17] </ref>). The next section explores these in depth. 7.1 Tradeoffs between redundancy in search space vs. extent of commitment Systematicity is the ability to eliminate redundancy in the search space by ensuring that no two partial plans in the search space will have safe overlapping completions. <p> What we have here is a tradeoff between redundancy in the search space explored by the planner, and the amount of commitment it is making. Planners like tweak [1] have very low commitment, but may be searching in highly redundant search spaces. Planners like UA <ref> [17] </ref> and SNLP [16, 25] guarantee systematicity, but impose higher commitment and thus may lead to more backtracking. In Section 4.3 we related this increased commitment to exhaustiveness of validation structures. <p> A representative search cycle for such planners is shown in Figure 12. Notice that such planners not only defer decisions about bindings and orderings, but also completely avoid committing to specific contributors for prerequisites. However, they have very high redundancy in the search space <ref> [17] </ref> (that is, they may consider the same potential solution in more than one search branch). Part of this redundancy comes from the fact that many of the planning decisions faced by TWEAK-like 30 Initialize Search queue with the null plan. Begin Loop 1.
Reference: [18] <author> N.J. Nilsson. </author> <booktitle> Principles of Artificial Intelligence. </booktitle> <publisher> Tioga Publishers, </publisher> <address> Palo Alto, CA, </address> <year> 1980. </year>
Reference-contexts: For plans involving the class of action representations used in classical planning (including ADL [19], STRIPS <ref> [18] </ref> and TWEAK [1] representations), the following causality theorem holds (c.f. [19]): A condition p is true in the state preceding the execution of a step w in a completion CP , if and only if there exists some step s that precedes w in CP , such that s has <p> -ve threats, the planners also use the additional heuristic strategy of postponing +ve threats -- i.e., they address all the -ve threats for a validations before they address the positive threats. 18 he and hf are supposed to be mnemonics for handempty and handfull conditions in the traditional blocksworld domain <ref> [18] </ref>, which are achieved or deleted by many of the actions in the domain. 21 and ART-MD-NS-RD-2 where A 2 i 's are modified.
Reference: [19] <author> E.P.D. Pednault. </author> <title> Synthesizing Plans that contain actions with Context-Dependent Effects Computational Intelligence, </title> <journal> Vol. </journal> <volume> 4, </volume> <month> 356-372 </month> <year> (1988). </year>
Reference-contexts: 1 Introduction Representation and use of causal structure of plans is ubiquitous in classical planning. Some of the specific (though similar) causal structure representations that have been proposed include Protection intervals <ref> [26, 27, 30, 19] </ref>, goal structure [28], plan rationale [31], causal links [16], and validations [8]. The original motivation for these representations was to keep track of interactions and to organize and systematize the planner's search process [26, 28, 16]. <p> For plans involving the class of action representations used in classical planning (including ADL <ref> [19] </ref>, STRIPS [18] and TWEAK [1] representations), the following causality theorem holds (c.f. [19]): A condition p is true in the state preceding the execution of a step w in a completion CP , if and only if there exists some step s that precedes w in CP , such that <p> For plans involving the class of action representations used in classical planning (including ADL <ref> [19] </ref>, STRIPS [18] and TWEAK [1] representations), the following causality theorem holds (c.f. [19]): A condition p is true in the state preceding the execution of a step w in a completion CP , if and only if there exists some step s that precedes w in CP , such that s has an effect p and no step s 0 coming between s <p> links/protection intervals in planning was exactly to systematize this search process so that the planner can do a better job of keeping track of its progress. 27 for example, any planner that backtracks on operator choices, ordering choices and binding choices can safely ignore goal ordering choices without losing completeness <ref> [19, 16] </ref> 28 Graph-structured search space in itself would not have been a problem if it were practical to maintain a closed list of all previously visited plans and checking for duplicates during search.
Reference: [20] <author> J.S. Penberthy and D.S. Weld. </author> <title> Temporal Planning with Constraints. </title> <booktitle> Working Notes of AAAI Spring Symposium on Foundations of Automatic Planning: The Classical Approach and Beyond. </booktitle> <year> 1993. </year> <note> Available as a AAAI Technical Report. 44 </note>
Reference-contexts: The framework discussed in Section A can be seen as an extension of that formalization to the case of multi-contributor validation structures. In their recent work on extending refinement planning to more expressive action representations <ref> [20] </ref>, Weld and Penberthy discuss the need for generalizing the notion of causal links to allow for multiple contributors. Despite some surface similarity, their motivation for allowing multiple contributors is quite distinct from ours. In particular, they intend to use the multiple contributors to model synergistic effects.
Reference: [21] <author> M.E. Pollack. </author> <title> A Model of Plan Inference that Distinguishes Between the Beliefs of Actors and Observers. </title> <booktitle> In Proceedings of the 1986 Workshop on Reasoning about Actions and Plans, </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Palo Alto, </address> <year> 1987. </year>
Reference-contexts: The original motivation for these representations was to keep track of interactions and to organize and systematize the planner's search process [26, 28, 16]. However, they also found wide-spread use in plan recognition to capture the plan rationale <ref> [21] </ref>; in replanning, plan modification and abstraction planning to justify individual planning decisions and to retract unjustified ones [8, 6, 32]; in plan debugging to characterize the plan failures [26, 24]; and in plan generalization to explain plan correctness and use that explanation as a basis for generalization [9, 2].
Reference: [22] <author> P.S. Rosenbloom, S. Lee and A. Unruh. </author> <title> Bias in Planning and Explanation-Based Learning. In Machine Learning Methods for Planning and Scheduling. </title> <editor> S. Minton (Ed.). </editor> <publisher> Morgan Kaufmann. </publisher>
Reference: [23] <author> E. Sacerdoti. </author> <title> Planning in a Hierarchy of Abstraction Spaces. </title> <journal> Artificial Intelligence, </journal> <volume> 5(2), </volume> <year> 1975. </year>
Reference: [24] <author> R. Simmons. </author> <title> A Theory of Debugging. </title> <booktitle> In Proceedings of 7th AAAI, </booktitle> <address> St. Paul, MN, </address> <year> 1988. </year>
Reference-contexts: However, they also found wide-spread use in plan recognition to capture the plan rationale [21]; in replanning, plan modification and abstraction planning to justify individual planning decisions and to retract unjustified ones [8, 6, 32]; in plan debugging to characterize the plan failures <ref> [26, 24] </ref>; and in plan generalization to explain plan correctness and use that explanation as a basis for generalization [9, 2].
Reference: [25] <author> A. Barrett and D. Weld. </author> <title> Partial order planning: Evaluating possible efficiency gains. </title> <type> Technical Report 92-05-01, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, WA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Section 3 provides the general formulation of multi-contributor causal links, and characterizes the correctness of a plan 1 Planners such as SNLP <ref> [16, 25] </ref> and UA [17] that widen the definition of protection violation, to include both those nodes that intervene and delete the protected condition and those which intervene and merely reassert the protected condition, are especially troublesome in this respect. (This stronger definition of un-threatened and un-usurped causal links is introduced <p> Empirical evaluation of this hypothesis is thus needed. Consequently, we implemented lifted versions of MP and MP-I over Weld et. al.'s implementation of SNLP <ref> [25] </ref> 16 , and compared their performance to SNLP and a NONLIN-like variant of SNLP, called McNONLIN, (which ignores +ve threats and thus sacrifices exhaustiveness of validation structure for partial plans) in a variety of domains. <p> Our test domains included the classical toy-worlds such as blocks world, as well as the synthetic domains used in Weld et. al.'s work <ref> [25] </ref>. In this paper, we will concentrate on the results from Weld et. al.'s synthetic domains and our variants of them, as they provide for a more controlled testing of our hypotheses. <p> What we have here is a tradeoff between redundancy in the search space explored by the planner, and the amount of commitment it is making. Planners like tweak [1] have very low commitment, but may be searching in highly redundant search spaces. Planners like UA [17] and SNLP <ref> [16, 25] </ref> guarantee systematicity, but impose higher commitment and thus may lead to more backtracking. In Section 4.3 we related this increased commitment to exhaustiveness of validation structures.
Reference: [26] <author> G.J. Sussman. </author> <title> A Computer Model of Skill Acquisition. </title> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1975 </year>
Reference-contexts: 1 Introduction Representation and use of causal structure of plans is ubiquitous in classical planning. Some of the specific (though similar) causal structure representations that have been proposed include Protection intervals <ref> [26, 27, 30, 19] </ref>, goal structure [28], plan rationale [31], causal links [16], and validations [8]. The original motivation for these representations was to keep track of interactions and to organize and systematize the planner's search process [26, 28, 16]. <p> The original motivation for these representations was to keep track of interactions and to organize and systematize the planner's search process <ref> [26, 28, 16] </ref>. <p> However, they also found wide-spread use in plan recognition to capture the plan rationale [21]; in replanning, plan modification and abstraction planning to justify individual planning decisions and to retract unjustified ones [8, 6, 32]; in plan debugging to characterize the plan failures <ref> [26, 24] </ref>; and in plan generalization to explain plan correctness and use that explanation as a basis for generalization [9, 2].
Reference: [27] <author> A. Tate. </author> <title> Interacting Goals and Their Use. </title> <booktitle> In Proceedings of IJCAI-75, </booktitle> <pages> pages 215-218, </pages> <address> Tbilisi, USSR, </address> <year> 1975. </year>
Reference-contexts: 1 Introduction Representation and use of causal structure of plans is ubiquitous in classical planning. Some of the specific (though similar) causal structure representations that have been proposed include Protection intervals <ref> [26, 27, 30, 19] </ref>, goal structure [28], plan rationale [31], causal links [16], and validations [8]. The original motivation for these representations was to keep track of interactions and to organize and systematize the planner's search process [26, 28, 16].
Reference: [28] <author> A. Tate. </author> <title> Generating Project Networks. </title> <booktitle> In Proceedings of IJCAI-77, pages 888--893, </booktitle> <address> Boston, MA, </address> <year> 1977. </year>
Reference-contexts: 1 Introduction Representation and use of causal structure of plans is ubiquitous in classical planning. Some of the specific (though similar) causal structure representations that have been proposed include Protection intervals [26, 27, 30, 19], goal structure <ref> [28] </ref>, plan rationale [31], causal links [16], and validations [8]. The original motivation for these representations was to keep track of interactions and to organize and systematize the planner's search process [26, 28, 16]. <p> The original motivation for these representations was to keep track of interactions and to organize and systematize the planner's search process <ref> [26, 28, 16] </ref>. <p> Such multi-contributor causal structures can also provide more flexibility during other phases of planning such as generalization and modification. Although the idea of multi-contributor causal links has been first introduced in Tate's nonlin <ref> [28] </ref> (see Section 7), there has neither been a systematic study of their properties nor an evaluation of their effectiveness. <p> (see Figure 12). 9 In implementing this procedure, it is possible to reduce some of the later interaction resolution by setting S initially to the set of steps that are the last incoming contributors of p in each branch. (Such steps are called the critical PV nodes in nonlin terminology <ref> [28] </ref>). 16 Any time we introduce ordering constraints between two existing steps of the plan (as is done in steps 3 (a), 3 (b), 3 (c) and 4 (a)), it is possible to make some contributors of some causal links irrelevant, thereby affecting the relevance of the validation structure. <p> In our experiments, we kept these factors constant while varying only the goal protection strategies. Varying solutions to these other factors could affect the relative performance of planners based on single and multi-contributor causal links. For example, we found that using more adaptive goal-selection 21 Unlike McNONLIN, Tate's NONLIN <ref> [28] </ref> in fact could non-monotonically violate a protection, and re-satisfy it in some alternate way. <p> From these plots, we note that although the overall complexity of the problems increases in the variablized domains, the relative performance of the planners remains largely unaffected. 7 Related Work To our knowledge, nonlin <ref> [28] </ref> and its successors are the only previous planners to have used multi-contributor causal links. nonlin's GOST table, in conjunction with its Q&A procedure, was capable of maintaining multiple redundant contributors for each prerequisite in the plan. nonlin's method of maintaining the multiple contributors was not complete, however.
Reference: [29] <author> A. Tate. </author> <title> Goal Structure, Holding Periods and ``Clouds.'' </title> <booktitle> In Proceedings of 1986 Timberline workshop on Reasoning about Actions and Plans, </booktitle> <pages> pages 267-277, </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1986. </year>
Reference-contexts: However, subsequent planning may introduce ordering relations among them, making them irrelevant 27 justification framework in Appendix A provides a systematic basis for doing such retraction in the context of multi-contributor causal structures. O-plan, a successor of NONLIN, also has a more generalized notion of protection intervals called ``clouds'' <ref> [29] </ref>, which were designed to manage the contributors and terminators of aggregated sets of dependencies. Clouds allowed O-plan to manage multiple contributors all through the planning, by actively keeping track of the ``last incoming contributor'' wavefront.
Reference: [30] <author> R. Waldinger. </author> <title> Achieving several goals simultaneously. </title> <booktitle> In Machine Intelligence 8, </booktitle> <publisher> Ellis Horwood Limited, </publisher> <address> Chichester, </address> <year> 1977. </year>
Reference-contexts: 1 Introduction Representation and use of causal structure of plans is ubiquitous in classical planning. Some of the specific (though similar) causal structure representations that have been proposed include Protection intervals <ref> [26, 27, 30, 19] </ref>, goal structure [28], plan rationale [31], causal links [16], and validations [8]. The original motivation for these representations was to keep track of interactions and to organize and systematize the planner's search process [26, 28, 16].
Reference: [31] <author> D. </author> <title> Wilkins Domain Independent Planning: Representation and Plan Generation. </title> <journal> Artificial Intelligence, </journal> <volume> 22:3, </volume> <year> 1984. </year>
Reference-contexts: 1 Introduction Representation and use of causal structure of plans is ubiquitous in classical planning. Some of the specific (though similar) causal structure representations that have been proposed include Protection intervals [26, 27, 30, 19], goal structure [28], plan rationale <ref> [31] </ref>, causal links [16], and validations [8]. The original motivation for these representations was to keep track of interactions and to organize and systematize the planner's search process [26, 28, 16].
Reference: [32] <author> Q. Yang and J.D. Tenenberg. abtweak: </author> <title> Abstracting a nonlinear, least-commitment planner. </title> <booktitle> In Proceedings of 8th AAAI, </booktitle> <year> 1990. </year> <month> 45 </month>
Reference-contexts: However, they also found wide-spread use in plan recognition to capture the plan rationale [21]; in replanning, plan modification and abstraction planning to justify individual planning decisions and to retract unjustified ones <ref> [8, 6, 32] </ref>; in plan debugging to characterize the plan failures [26, 24]; and in plan generalization to explain plan correctness and use that explanation as a basis for generalization [9, 2]. <p> Similarly, there are no tractable automated precondition abstraction mechanisms in existence which can induce the goal ordering of the type described above. Most existing tractable abstraction strategies are based solely on analyses of potential interactions <ref> [14, 32] </ref>, and are of limited utility. In particular, according to such analyses ``hf '' and ``he'' will be of the same level of importance as other preconditions. <p> In particular, we can justify causal links in terms of the overall goals of the plan, and then justify the other constraints in the plan in terms of the causal links they support <ref> [8, 32, 5] </ref>. Such a justification structure allows the planner to locate parts of the plan that become superfluous whenever a particular retraction occurs. When a decision is retracted, then all that is needed to rejustify the plan would be to locate the inconsistencies and superfluous steps.
References-found: 32

