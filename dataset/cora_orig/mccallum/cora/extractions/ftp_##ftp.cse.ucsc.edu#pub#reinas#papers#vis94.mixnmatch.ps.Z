URL: ftp://ftp.cse.ucsc.edu/pub/reinas/papers/vis94.mixnmatch.ps.Z
Refering-URL: http://www.cse.ucsc.edu/research/slvg/rvis.html
Root-URL: http://www.cse.ucsc.edu
Title: Mix&Match: A Construction Kit for Visualization  
Author: Alex Pang and Naim Alper 
Keyword: Key Words and Phrases: interactive, extensible, spray rendering, smart particles, visualization environment.  
Address: Santa Cruz, CA 95064 USA  
Affiliation: Baskin Center for Computer Engineering Information Sciences University of California, Santa Cruz  
Abstract: We present an environment in which users can interactively create different visualization methods. This modular and extensible environment encapsulates most of the existing visualization algorithms. Users can easily construct new visualization methods by combining simple, fine grain building blocks. These components operate on a local subset of the data and generally either look for target features or produce visual objects. Intermediate compositions may also be used to build more complex visualizations. This environment provides a foundation for building and exploring novel visualization methods. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gregory D. Abram and Turner Whitted. </author> <title> Building block shaders. </title> <booktitle> Computer Graphics (ACM SIGGRAPH Proceedings), </booktitle> <volume> 24(4):283 - 288, </volume> <month> August </month> <year> 1990. </year>
Reference-contexts: The importance of these qualities have been recognized in other work. In ConMan, users constructed networks for dynamically building and modifying graphics applications [5]. Abram and Whitted used an interactive network based system for constructing shaders from building blocks <ref> [1] </ref>. Kass used an interactive data flow programming environment to tackle many computer graphics problems [7]. Corrie and Mackerras recently extended the Renderman shading language to provide a modular and extensible volume rendering system based on programmable data shaders [2].
Reference: [2] <author> Brian Corrie and Paul Mackerras. </author> <title> Data shaders. </title> <booktitle> In Proceedings: Visualization '93, </booktitle> <pages> pages 275 - 282. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1993. </year>
Reference-contexts: Kass used an interactive data flow programming environment to tackle many computer graphics problems [7]. Corrie and Mackerras recently extended the Renderman shading language to provide a modular and extensible volume rendering system based on programmable data shaders <ref> [2] </ref>. Our approach strives to maintain the extensibility and enhance the flexibility and interactivity of modular visualization environments at the expense of some efficiency.
Reference: [3] <author> D. S. Dyer. </author> <title> A dataflow toolkit for visualization. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 10(4):60 - 69, </volume> <year> 1990. </year>
Reference-contexts: Finally, we show a couple of constructions and their effects. 2 Related Work In the last few years the data flow paradigm has become popular in scientific visualization. Visualization environments such as AVS [17], Iris Explorer [15], Khoros [12], apE <ref> [3] </ref>, and IBM Data Explorer [10] offer many modules that perform filtering, mapping and rendering tasks that can be combined to achieve a desired visualization goal. These systems offer generality, flexibility, modularity and extensibility. They address the needs of novice, intermediate and expert users.
Reference: [4] <author> T. A. Foley and D. A. Lane. </author> <title> Multi-valued volumetric visualization. </title> <booktitle> In Proceedings: Visualization '91, </booktitle> <pages> pages 218 - 225. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1991. </year>
Reference-contexts: that takes in a geometry (the iso-surface) as input and colors it according to a stream value can be used to investigate a relationship between two parameters of a data set by showing the variation of one parameter over a surface on which the other parameter is constant as in <ref> [4] </ref>.
Reference: [5] <author> Paul E. Haeberli. ConMan: </author> <title> A visual programming language for interactive graphics. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 22(4):103 - 111, </volume> <year> 1988. </year>
Reference-contexts: In spite of such shortcomings, these systems enjoy a large following mostly because of their flexibility and extensibility to meet new user demands. The importance of these qualities have been recognized in other work. In ConMan, users constructed networks for dynamically building and modifying graphics applications <ref> [5] </ref>. Abram and Whitted used an interactive network based system for constructing shaders from building blocks [1]. Kass used an interactive data flow programming environment to tackle many computer graphics problems [7].
Reference: [6] <author> G. T. Herman and H. K. Liu. </author> <title> Three-dimensional display of human organs from computer tomograms. </title> <journal> Computer Graphics and Image Processing, </journal> <volume> 9(1):1 - 21, </volume> <year> 1979. </year>
Reference-contexts: This slight modification will produce iso-surfaces that are visible only from the spray can's perspective. The position update function may be modified to follow surface gradients. Likewise, the behavior function may be substituted with one that paints the entire cell achieving a cuberille effect <ref> [6] </ref>. For some sparts it may be undesirable to rely on position update and death functions that sample the data. In the example above, cells that are missed will not produce polygons and may result in discontinuous surfaces.
Reference: [7] <author> Michael Kass. </author> <title> CONDOR: Constraint-based dataflow. </title> <booktitle> Computer Graphics (ACM SIGGRAPH Proceedings), </booktitle> <volume> 26(2) </volume> <pages> 321-330, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: In ConMan, users constructed networks for dynamically building and modifying graphics applications [5]. Abram and Whitted used an interactive network based system for constructing shaders from building blocks [1]. Kass used an interactive data flow programming environment to tackle many computer graphics problems <ref> [7] </ref>. Corrie and Mackerras recently extended the Renderman shading language to provide a modular and extensible volume rendering system based on programmable data shaders [2]. Our approach strives to maintain the extensibility and enhance the flexibility and interactivity of modular visualization environments at the expense of some efficiency.
Reference: [8] <author> G. David Kerlick. </author> <title> Moving iconic objects in scientific visualization. </title> <booktitle> In Proceedings: Visualization '90, </booktitle> <pages> pages 124 - 130. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1990. </year>
Reference-contexts: The key ingredient of Spray Rendering are the smart particles or sparts. These sparts are reminiscent of the Particle Systems introduced by Reeves [13] but also possess some of the features of boids in [14] and <ref> [8] </ref>. Sparts are born and have a finite life time. As they travel through the data space, they interact with the data, and perhaps among themselves, leaving behind them visual effects for the users. These particle behaviors can be roughly classified into two categories: targets and visual behaviors.
Reference: [9] <author> W. E. Lorensen and H. E. Cline. </author> <title> Marching cubes: A high resolution 3D surface construction algorithm. </title> <journal> Computer Graphics, </journal> <volume> 21(4):163 - 169, </volume> <year> 1987. </year>
Reference-contexts: Before enumerating the rules for constructing a spart, let us look at how a common visualization method can be expressed in the form of a spart as it would appear in the textual spart editor. The Marching Cubes algorithm <ref> [9] </ref> can be converted to a localized spart construction using three building blocks as illustrated below. Instead of looking at every cell in the volume, individual sparts handle a local subset of the data.
Reference: [10] <author> B. Lucas, G. Abram, N. Collins, D. Epstein, D. Gresh, and K. McAuliffe. </author> <title> An architecture for a scientific visualization system. </title> <booktitle> In Proceedings: Visualization '92, </booktitle> <pages> pages 107 - 114. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1992. </year>
Reference-contexts: Finally, we show a couple of constructions and their effects. 2 Related Work In the last few years the data flow paradigm has become popular in scientific visualization. Visualization environments such as AVS [17], Iris Explorer [15], Khoros [12], apE [3], and IBM Data Explorer <ref> [10] </ref> offer many modules that perform filtering, mapping and rendering tasks that can be combined to achieve a desired visualization goal. These systems offer generality, flexibility, modularity and extensibility. They address the needs of novice, intermediate and expert users. Novices merely load and execute previously constructed networks.
Reference: [11] <author> Alex Pang and Kyle Smith. </author> <title> Spray rendering: Visualization using smart particles. </title> <booktitle> In Proceedings: Visualization '93, </booktitle> <pages> pages 283 - 290. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1993. </year>
Reference-contexts: Because of our choice of execution style, large and dynamic data sets can be handled by localizing these visualization components only to regions of interest. 3 Spray Rendering In this section, we briefly describe the Spray Rendering <ref> [11] </ref> framework which we use for the construction and application of visualization methods using Mix&Match. Spray Rendering uses the metaphor of spray cans filled with smart paint particles. These particles are sprayed or delivered into the data set to highlight features of interest. <p> Eventually, a spart may also map and travel through any N-parameter space. However, we still need to investigate this further since mapping parameter values to Euclidean space will generally produce scattered data sets. This also complicates the point location test for a spart. In earlier implementations of Spray Rendering <ref> [11] </ref>, we mentioned the idea of mixing different targets and behaviors together to form new sparts. However, we only had predefined sparts in the sense that each spart on the shelf was a complete spart and could not be altered.
Reference: [12] <author> J. Rasure, D. Argiro, T. Sauer, and C. Williams. </author> <title> Visual language and software development environment for image processing. </title> <journal> International Journal of Imaging Systems and Technology, </journal> <volume> 2(3):183 - 199, </volume> <year> 1990. </year>
Reference-contexts: This is followed by detailed description of the internals of Mix&Match. Finally, we show a couple of constructions and their effects. 2 Related Work In the last few years the data flow paradigm has become popular in scientific visualization. Visualization environments such as AVS [17], Iris Explorer [15], Khoros <ref> [12] </ref>, apE [3], and IBM Data Explorer [10] offer many modules that perform filtering, mapping and rendering tasks that can be combined to achieve a desired visualization goal. These systems offer generality, flexibility, modularity and extensibility. They address the needs of novice, intermediate and expert users.
Reference: [13] <author> W. T. Reeves. </author> <title> Particle systems: A technique for modeling a class of fuzzy objects. </title> <journal> Computer Graphics, </journal> <volume> 17(3):359 - 376, </volume> <year> 1983. </year>
Reference-contexts: The number of paint particles and the distribution of these particles can also be varied. The key ingredient of Spray Rendering are the smart particles or sparts. These sparts are reminiscent of the Particle Systems introduced by Reeves <ref> [13] </ref> but also possess some of the features of boids in [14] and [8]. Sparts are born and have a finite life time. As they travel through the data space, they interact with the data, and perhaps among themselves, leaving behind them visual effects for the users.
Reference: [14] <author> C. W. Reynolds. </author> <title> Flocks, herds and schools: A distributed behavioral model. </title> <journal> Computer Graphics, </journal> <volume> 21(4):25 - 34, </volume> <year> 1987. </year>
Reference-contexts: The number of paint particles and the distribution of these particles can also be varied. The key ingredient of Spray Rendering are the smart particles or sparts. These sparts are reminiscent of the Particle Systems introduced by Reeves [13] but also possess some of the features of boids in <ref> [14] </ref> and [8]. Sparts are born and have a finite life time. As they travel through the data space, they interact with the data, and perhaps among themselves, leaving behind them visual effects for the users. These particle behaviors can be roughly classified into two categories: targets and visual behaviors.
Reference: [15] <author> G. Sloane. </author> <title> IRIS Explorer Module Writer's Guide. Silicon Graphics, </title> <publisher> Inc, </publisher> <address> Mountain View, </address> <year> 1992. </year> <title> Document Number 007-1369-010. </title>
Reference-contexts: This is followed by detailed description of the internals of Mix&Match. Finally, we show a couple of constructions and their effects. 2 Related Work In the last few years the data flow paradigm has become popular in scientific visualization. Visualization environments such as AVS [17], Iris Explorer <ref> [15] </ref>, Khoros [12], apE [3], and IBM Data Explorer [10] offer many modules that perform filtering, mapping and rendering tasks that can be combined to achieve a desired visualization goal. These systems offer generality, flexibility, modularity and extensibility. They address the needs of novice, intermediate and expert users.
Reference: [16] <author> Deyang Song and Eric Golin. </author> <title> Fine-grain visualization algorithms in dataflow environments. </title> <booktitle> In Proceedings: Visualization '93, </booktitle> <pages> pages 126 - 133. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1993. </year>
Reference-contexts: Performance also suffers when there is a lot of interaction or when the data is dynamic and contin-ually changing. Recently a fine grain data flow environment has been proposed to overcome some of these problems <ref> [16] </ref>. In this approach, the algorithms are redesigned to work locally on incoming chunks of data where the chunks are a few slices. However, visualization algorithms that require random access to the data set, such as streamlines for flow visualization, are difficult to convert.
Reference: [17] <author> C. Upson. </author> <title> The application visualization system: A computational environment for scientific visualization. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9(4):30 - 42, </volume> <year> 1989. </year>
Reference-contexts: This is followed by detailed description of the internals of Mix&Match. Finally, we show a couple of constructions and their effects. 2 Related Work In the last few years the data flow paradigm has become popular in scientific visualization. Visualization environments such as AVS <ref> [17] </ref>, Iris Explorer [15], Khoros [12], apE [3], and IBM Data Explorer [10] offer many modules that perform filtering, mapping and rendering tasks that can be combined to achieve a desired visualization goal. These systems offer generality, flexibility, modularity and extensibility.
Reference: [18] <author> C. Williams, J. Rasure, and C. Hansen. </author> <title> The state of the art of visual languages for visualization. </title> <booktitle> In Proceedings: Visualization '92, </booktitle> <pages> pages 202 - 209. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1992. </year>
Reference-contexts: Modules are required to "fire" as new data arrive. The granularity refers to the size of the data block that the module processes. In these systems, it is the same size as the data model (hence large) rather than being an atomic element of the data model <ref> [18] </ref>. Granularity may also refer to the size and complexity of the modules. Once again, in these systems they are large in the sense that they implement complete algorithms (e.g. mapping or filter modules).
References-found: 18

