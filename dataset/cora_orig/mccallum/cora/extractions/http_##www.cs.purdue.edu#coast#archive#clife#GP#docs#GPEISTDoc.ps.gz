URL: http://www.cs.purdue.edu/coast/archive/clife/GP/docs/GPEISTDoc.ps.gz
Refering-URL: http://www.cs.purdue.edu/coast/archive/clife/GP/docs/
Root-URL: http://www.cs.purdue.edu
Email: arpw@bnr.ca  
Title: A Genetic Programming Environment in Smalltalk  
Author: Tony White 
Address: P.O. Box 3511 Station C Ottawa, Ontario, CANADA K1Y 4H7  
Affiliation: Bell-Northern Research  
Abstract: Genetic Programming (GP), an extension of the Genetic Algorithm (GA), is a powerful optimization technique wherein tree objects representing programs are manipulated in order to evolve programmatic solutions to given problems. A number of GP implementations have been forthcoming the original being in LISP - all of which have been deficient in one or more areas. This authors implementation of a Genetic Programming Environment in Smalltalk (GPEIST) attempts to provide an environment with a rich set of inspectors, utilities and instrumentation that is extensible enough to provide a test bed for GP problems. 
Abstract-found: 1
Intro-found: 1
Reference: [Collins and Jefferson, 1991] <author> Collins, R., and Jefferson, D., AntFarm: </author> <title> Towards Simulated Evolution, </title> <booktitle> in Artificial Life II, </booktitle> <publisher> Addison-Wesley, </publisher> <address> pgs 579-601, </address> <year> 1991. </year>
Reference-contexts: The environment class hierarchy is shown in the figure below. The JohnMuirTrailEnv and SantaFeTrailEnv classes are application classes relating to the Ant Foraging problem <ref> [Collins and Jefferson, 1991] </ref>, and provide the specification for two different trails. 3.2 Behaviour Three aspects of behaviour have to be defined for GeneticObject subclasses. Firstly, the crossover and mutation operations have to defined. This behaviour is provided by the crossover:Using: and mutate:Using: methods.
Reference: [Coombs, Davis, 1987] <author> Coombs, S., and Davis, L., </author> <title> Genetic Algorithms and Communication Link Speed Design: Theoretical Considerations, </title> <booktitle> Proceedings of Second International Conference on Genetic Algorithms, pgs. </booktitle> <pages> 252-256, </pages> <year> 1987. </year>
Reference-contexts: Genetic algorithms combine both solution exploitation and exploration of the search space in an extremely effective way. Genetic algorithms have been used in a diverse set of optimization problems such as wire routing, travelling salesman problems, network link design <ref> [Coombs, Davis, 1987] </ref>, [Davis, Coombs, 1987], adaptive control and many others. Consult [Michalewicz, 1992] for more details on optimization problems in the areas of scheduling, strategy formulation and transportation problems.
Reference: [Davis, 1991] <editor> Davis, L., (editor), </editor> <booktitle> Handbook of Genetic Algorithms, </booktitle> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, </address> <year> 1991. </year>
Reference: [Davis, Coombs, 1987] <author> Davis, L., and Coombs, S., </author> <title> Genetic Algorithms and Communication Link Speed Design: Constraints and Operators, </title> <booktitle> Proceedings of Second International Conference on Genetic Algorithms, pgs. </booktitle> <pages> 257-260, </pages> <year> 1987. </year>
Reference-contexts: Genetic algorithms combine both solution exploitation and exploration of the search space in an extremely effective way. Genetic algorithms have been used in a diverse set of optimization problems such as wire routing, travelling salesman problems, network link design [Coombs, Davis, 1987], <ref> [Davis, Coombs, 1987] </ref>, adaptive control and many others. Consult [Michalewicz, 1992] for more details on optimization problems in the areas of scheduling, strategy formulation and transportation problems.
Reference: [Goldberg, 1989] <author> Goldberg, D.E., </author> <title> Genetic Algorithms in Search, Optimization and Machine Learning, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year>
Reference-contexts: Their considerable power arises from the characteristics of survival of the fittest and adaptation achieved through mixing of genetic information using operators such as crossover and mutation. The power of a GA has been analyzed in terms of the Schema Theorem [Holland, 1975] and the Building Block Hypothesis <ref> [Goldberg, 1989] </ref>. In the schema analysis, search is shown to proceed through identification of highly fit schema, and that such schema are preferentially propagated during the reproductive phase of a GA. Genetic algorithms are stochastic search algorithms whose search methods model aspects of Darwinian evolution. <p> The fitter the individual, the more likely it is to survive to be able to reproduce and thereby ensure that its genes survive to the next generation. While this section provides a brief introduction to genetic algorithms, more complete descriptions can be found in <ref> [Goldberg, 1989] </ref> and [Michalewicz, 1992]. Genetic algorithms use a vocabulary drawn from natural genetics. We talk about individuals (or genotypes) in a population. These individuals are sometimes also referred to as chromosomes or strings.
Reference: [Holland, 1975] <author> Holland, J., </author> <title> Adaptation in Natural and Artificial Systems, </title> <publisher> University of Michigan Press, </publisher> <year> 1975. </year>
Reference-contexts: Their considerable power arises from the characteristics of survival of the fittest and adaptation achieved through mixing of genetic information using operators such as crossover and mutation. The power of a GA has been analyzed in terms of the Schema Theorem <ref> [Holland, 1975] </ref> and the Building Block Hypothesis [Goldberg, 1989]. In the schema analysis, search is shown to proceed through identification of highly fit schema, and that such schema are preferentially propagated during the reproductive phase of a GA.
Reference: [Kirkpatrick et al, 1983] <author> Kirkpatrick, S., Gelatt, </author> <title> C.D., and Vecchi, M.P., Optimization by simulated annealing, </title> <booktitle> Science 220(4598), </booktitle> <month> 671-680 </month> <year> (1983). </year>
Reference-contexts: Many optimization problems are hard and although in specific cases algorithms of considerable importance have been developed for them, they are quite often not able to guarantee an optimal solution. Examples are the use of Simulated Annealing for wire routing and component placement problems <ref> [Kirkpatrick et al, 1983] </ref>. General techniques for the solution of NP-hard problems have not been forthcoming. Their considerable power arises from the characteristics of survival of the fittest and adaptation achieved through mixing of genetic information using operators such as crossover and mutation.
Reference: [Koza, 1990] <author> Koza, J. R., </author> <title> Genetic Programming: A Paradigm for Genetically Breeding Populations of Computer Programs to Solve Problems. </title> <institution> Stanford University Computer Science Department technical report STAN-CS-90-1314. </institution>
Reference-contexts: The mutation operation ensures that the population maintains some diversity as we proceed from generation to generation. 2 Basic Genetic Programming GP <ref> [Koza, 1990, 1992] </ref> is an extension of the basic GA model where simple bit strings are replaced with tree structures. These tree structures represent a parse tree for a computer program. While the GA remains unchanged, the operators used in exchange of genetic information between candidate solutions now change.
Reference: [Koza, 1992] <author> Koza, J.R., </author> <title> Genetic Programming: On the Programming of Computers by means of Natural Selection, </title> <publisher> MIT Press, </publisher> <address> Mass, </address> <year> 1992. </year>
Reference: [Singleton, 1994] <author> Singleton, A., </author> <title> Genetic Programming in C++, </title> <journal> Byte, </journal> <volume> pgs. </volume> <pages> 171-176, </pages> <month> February, </month> <year> 1994. </year>
Reference-contexts: An example of this latter requirement is the need to know how many times a particular node in a program is visited during its execution. In conclusion, GPEIST provides a object oriented implementation of the Genetic Programming paradigm. It is significantly richer in functionality than systems such as GPQUICK <ref> [Singleton, 1994] </ref> and, being implemented in Smalltalk 80, is source code transportable between a number of platforms.
Reference: [Michalewicz, 1992] <author> Michalewicz, Z., </author> <title> Genetic Algorithms + Data Structures = Evolution Programs, </title> <publisher> Springer Verlag Publishers, </publisher> <year> 1992. </year>
Reference-contexts: The fitter the individual, the more likely it is to survive to be able to reproduce and thereby ensure that its genes survive to the next generation. While this section provides a brief introduction to genetic algorithms, more complete descriptions can be found in [Goldberg, 1989] and <ref> [Michalewicz, 1992] </ref>. Genetic algorithms use a vocabulary drawn from natural genetics. We talk about individuals (or genotypes) in a population. These individuals are sometimes also referred to as chromosomes or strings. <p> Genetic algorithms have been used in a diverse set of optimization problems such as wire routing, travelling salesman problems, network link design [Coombs, Davis, 1987], [Davis, Coombs, 1987], adaptive control and many others. Consult <ref> [Michalewicz, 1992] </ref> for more details on optimization problems in the areas of scheduling, strategy formulation and transportation problems. Genetic algorithms differ from more convectional search algorithms in that they work with a population of chromosomes (solutions) rather than a single chromosome (solution).
References-found: 11

