URL: http://www.cs.brandeis.edu/~mairson/Seminar/wadler.ps.gz
Refering-URL: http://www.cs.brandeis.edu/~mairson/PL-seminar.html
Root-URL: http://www.cs.brandeis.edu
Email: Nick.Benton@cl.cam.ac.uk  wadler@dcs.glasgow.ac.uk  
Title: Linear Logic, Monads and the Lambda Calculus  
Author: Nick Benton Philip Wadler 
Address: New Museums Site Pembroke Street Cambridge CB2 3QG, UK  Glasgow G12 8QQ, UK  
Affiliation: University of Cambridge Computer Laboratory  University of Glasgow Department of Computing Science Lilybank Gardens  
Abstract: Models of intuitionistic linear logic also provide models of Moggi's computational metalanguage. We use the adjoint presentation of these models and the associated adjoint calculus to show that three translations, due mainly to Moggi, of the lambda calculus into the computational metalanguage (direct, call-by-name and call-by-value) correspond exactly to three translations, due mainly to Girard, of intuitionistic logic into intuitionistic linear logic. We also consider extending these results to languages with recursion. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abramsky. </author> <title> The lazy lambda calculus. </title> <editor> In D. Turner, editor, </editor> <booktitle> Research Directions in Functional Programming, chapter 4, </booktitle> <pages> pages 65-116. </pages> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: In this paper we start with three source calculi with identical syntax but different semantics: the direct calculus is the usual simply typed lambda calculus, the lifted calculus ? is a typed version of Abramsky and Ong's lazy lambda calculus <ref> [1] </ref>, and the call-by-value calculus v is typed version of Plotkin's calculus of that name [16].
Reference: [2] <author> P. Achten and R. Plasmeijer. </author> <title> The ins and outs of Clean I/O. </title> <journal> Journal of Functional Programming, </journal> <volume> 5(1) </volume> <pages> 81-110, </pages> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: The significance of these results extends well beyond the treatment of partiality by lifting and many suggestive similarities remain. For example, both linear and monadic types have been used to add updateable state to functional languages in a controlled way <ref> [2, 15] </ref>. We hope that our work may serve as a starting point for a formal comparison of these approaches. 9.
Reference: [3] <author> A. Barber. </author> <title> Dual intuitionistic linear logic. </title> <type> Draft paper, </type> <institution> University of Edinburgh, </institution> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: The alternative would have been to use the DILL (for `dual intuitionistic linear logic') syntax due to Wadler [18] and, independently, to Plotkin and Barber <ref> [3] </ref>. Using DILL makes two of the term translations appear more elegant, but makes the connection with the commonest presentations of ILL a little more indirect. It should be stressed that everything works equally well with either syntax.
Reference: [4] <author> P. N. Benton. </author> <title> A mixed linear and non-linear logic: Proofs, terms and models. </title> <booktitle> In Proceedings of Computer Science Logic 1994, Kazimierz, Poland, volume 933 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <note> Full version available as Technical Report 352, </note> <institution> Computer Laboratory, University of Cambridge, </institution> <month> Oc-tober </month> <year> 1994. </year>
Reference-contexts: Again there is additional structure, which is pleasingly easy to describe: the adjunction must be symmetric monoidal <ref> [4] </ref>. Taking ! = F G makes L a linear model, while taking T = GF makes C a monad model. Further, every linear model arises in this way, as do all the members of a significant class of monad models. <p> Here we choose to work with the calculus of [6]. Corresponding to adjoint models are the LNL term calculus (here referred to as the adjoint calculus) and LNL logic of <ref> [4] </ref>. Girard proposed two mappings of intuitionistic logic (or, equivalently, the simply typed lambda calculus) into ILL (or, equivalently, the linear term calculus), labelled ffi and fl [10]. <p> Thus, for instance, Girard's fl translation, first published in 1987, corresponds exactly to Moggi's call-by-value translation, first published in 1989, and we can finally see that this is the case in 1996. 2. Categorical models In this section we recall the central semantic definitions from <ref> [4] </ref>, [14] and [6] and some results which we shall need later. <p> The adjoint calculus In this section we sketch the adjoint calculus a of <ref> [4] </ref> and describe the translations of l and m into a which were used to prove the main results presented here. The adjoint calculus includes both linear types and terms, corresponding to objects and arrows of L, and non-linear types and terms, corresponding to objects and arrows of C. <p> Further details of both the semantics and the proof theory of a may be found in <ref> [4] </ref>.
Reference: [5] <author> P. N. Benton, G. M. Bierman, and V. C. V. de Paiva. </author> <title> Computational types from a logical perspective I. </title> <type> Technical Report 365, </type> <institution> Computer Laboratory, University of Cambridge, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: Each of the three models corresponds to both a logic and an associated term calculus. The logic associated with monad models and the computational metalan-guage is an intuitionistic modal logic, dubbed CL-logic in <ref> [5] </ref>. Associated with linear models and ILL are several proposals for linear term calculi, such as those of [6], [18], [11]. Here we choose to work with the calculus of [6].
Reference: [6] <author> P. N. Benton, G. M. Bierman, J. M. E. Hyland, and V. C. V. de Paiva. </author> <title> Term assignment for intuitionistic linear logic. </title> <type> Technical Report 262, </type> <institution> Computer Laboratory, University of Cambridge, </institution> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: The intuitionistic fragment of linear logic (ILL) may be modelled in a linear model a symmetric monoidal closed category with a comonad ! which satisfies some extra conditions relating it to the monoidal structure <ref> [6] </ref>. Moggi's computational meta-language may be modelled in a monad model a cartesian closed category with a monad T satisfying some different conditions relating it to the cartesian structure. The situations are tantalisingly close to dual: ! is almost, but not quite, entirely like T . <p> The logic associated with monad models and the computational metalan-guage is an intuitionistic modal logic, dubbed CL-logic in [5]. Associated with linear models and ILL are several proposals for linear term calculi, such as those of <ref> [6] </ref>, [18], [11]. Here we choose to work with the calculus of [6]. Corresponding to adjoint models are the LNL term calculus (here referred to as the adjoint calculus) and LNL logic of [4]. <p> The logic associated with monad models and the computational metalan-guage is an intuitionistic modal logic, dubbed CL-logic in [5]. Associated with linear models and ILL are several proposals for linear term calculi, such as those of <ref> [6] </ref>, [18], [11]. Here we choose to work with the calculus of [6]. Corresponding to adjoint models are the LNL term calculus (here referred to as the adjoint calculus) and LNL logic of [4]. Girard proposed two mappings of intuitionistic logic (or, equivalently, the simply typed lambda calculus) into ILL (or, equivalently, the linear term calculus), labelled ffi and fl [10]. <p> Thus, for instance, Girard's fl translation, first published in 1987, corresponds exactly to Moggi's call-by-value translation, first published in 1989, and we can finally see that this is the case in 1996. 2. Categorical models In this section we recall the central semantic definitions from [4], [14] and <ref> [6] </ref> and some results which we shall need later. <p> Which constructs bind variables, and hence how capture-avoiding substitution is defined, should be obvious from the typing rules. We are using the syntax of <ref> [6] </ref>, which is now fairly standard and well-known, although this does make the terms associated with the translations rather large and unwieldy. The alternative would have been to use the DILL (for `dual intuitionistic linear logic') syntax due to Wadler [18] and, independently, to Plotkin and Barber [3].
Reference: [7] <author> G. M. Bierman and V. C. V. de Paiva. </author> <title> Intuitionistic necessity revisited. </title> <booktitle> In Proceedings of Logic at Work Conference, </booktitle> <address> Amsterdam, </address> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: Perhaps results formally similar to those presented here could be obtained for other intuitionistic modal logics, such as the inuitionistic S4 of <ref> [7] </ref>. It may be that the relationship between the translations is a consequence more of the 2-like character of ! than of the restrictions on weakening and contraction in l . The significance of these results extends well beyond the treatment of partiality by lifting and many suggestive similarities remain.
Reference: [8] <author> T. Brauner. </author> <title> The Girard translation extended with recursion. </title> <booktitle> In Proceedings of Computer Science Logic 1994, Kazimierz, Poland, volume 933 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: However, the details are often glossed over (a notable exception being <ref> [8] </ref>). Firstly we observe that GX ffi ~ = X * for each source type X. <p> Recursion Our results also extend to languages with recursion, though there is some choice in exactly how recursion is treated. Brauner has already presented an extension of Proposition 4.1 in a linear model with parameterised fixpoints of all endomaps in the Kleisli category <ref> [8] </ref>. Bearing the case where C is predomains in mind, we instead use stronger version, due to Freyd, of Crole and Pitts's notion of fixpoint object [9] so that we only require certain fixpoints in C.
Reference: [9] <author> R. L. Crole and A. M. Pitts. </author> <title> New foundations for fix-point computations: </title> <journal> FIX-hyperdoctines and the FIX-logic. Information and Computation, </journal> <volume> 98(2), </volume> <month> June </month> <year> 1992. </year>
Reference-contexts: Brauner has already presented an extension of Proposition 4.1 in a linear model with parameterised fixpoints of all endomaps in the Kleisli category [8]. Bearing the case where C is predomains in mind, we instead use stronger version, due to Freyd, of Crole and Pitts's notion of fixpoint object <ref> [9] </ref> so that we only require certain fixpoints in C.
Reference: [10] <author> J.-Y. Girard. </author> <title> Linear logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 50 </volume> <pages> 1-102, </pages> <year> 1987. </year>
Reference-contexts: 1. Introduction Two of the most significant developments in semantics during the last decade are Girard's linear logic <ref> [10] </ref> and Moggi's computational metalanguage [14]. Any student of these formalisms will suspect that there are significant connections between the two, despite their apparent differences. <p> Corresponding to adjoint models are the LNL term calculus (here referred to as the adjoint calculus) and LNL logic of [4]. Girard proposed two mappings of intuitionistic logic (or, equivalently, the simply typed lambda calculus) into ILL (or, equivalently, the linear term calculus), labelled ffi and fl <ref> [10] </ref>. The connection between the ffi translation and call-by-name (CBN) lambda calculus, and between the fl translation and call-by-value (CBV) lambda calculus has previously been noted in [12, 13]. <p> Call-by-value translations The call-by-value translations are ?: v ! m , which is Moggi's CBV translation [14], and fl: v ! l which is another translation due to Girard <ref> [10] </ref>. (Interestingly, although the CBV translation is central to Moggi's work, Girard thought his fl translation was "not of much interest".) These translations are shown in Figure 4.
Reference: [11] <author> P. Lincoln and J. Mitchell. </author> <title> Operational aspects of linear lambda calculus. </title> <booktitle> In Proceedings of the Seventh Symposium on Logic in Computer Science, </booktitle> <address> Santa Cruz. </address> <publisher> IEEE Press, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: The logic associated with monad models and the computational metalan-guage is an intuitionistic modal logic, dubbed CL-logic in [5]. Associated with linear models and ILL are several proposals for linear term calculi, such as those of [6], [18], <ref> [11] </ref>. Here we choose to work with the calculus of [6]. Corresponding to adjoint models are the LNL term calculus (here referred to as the adjoint calculus) and LNL logic of [4].
Reference: [12] <author> I. Mackie. </author> <title> The Geometry of Implementation. </title> <type> PhD thesis, </type> <institution> Imperial College, </institution> <address> London, </address> <year> 1994. </year>
Reference-contexts: The connection between the ffi translation and call-by-name (CBN) lambda calculus, and between the fl translation and call-by-value (CBV) lambda calculus has previously been noted in <ref> [12, 13] </ref>. Moggi also proposed two translations, clearly labelled as call-by-value and call-by-name [14], of the lambda calculus into his computational metalanguage; Wadler discusses these further in [17].
Reference: [13] <author> J. Maraist, M. Odersky, D. N. Turner, and P. Wadler. </author> <title> Call-by-name, call-by-value, call-by-need, and the linear lambda calculus. </title> <type> Technical report, </type> <institution> Fakultat fur Informatik, Universitat Karlsruhe and Department of Computing Science, University of Glasgow, </institution> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: The connection between the ffi translation and call-by-name (CBN) lambda calculus, and between the fl translation and call-by-value (CBV) lambda calculus has previously been noted in <ref> [12, 13] </ref>. Moggi also proposed two translations, clearly labelled as call-by-value and call-by-name [14], of the lambda calculus into his computational metalanguage; Wadler discusses these further in [17].
Reference: [14] <author> E. Moggi. </author> <title> Notions of computation and monads. </title> <journal> Information and Computation, </journal> <volume> 93 </volume> <pages> 55-92, </pages> <year> 1991. </year>
Reference-contexts: 1. Introduction Two of the most significant developments in semantics during the last decade are Girard's linear logic [10] and Moggi's computational metalanguage <ref> [14] </ref>. Any student of these formalisms will suspect that there are significant connections between the two, despite their apparent differences. <p> The connection between the ffi translation and call-by-name (CBN) lambda calculus, and between the fl translation and call-by-value (CBV) lambda calculus has previously been noted in [12, 13]. Moggi also proposed two translations, clearly labelled as call-by-value and call-by-name <ref> [14] </ref>, of the lambda calculus into his computational metalanguage; Wadler discusses these further in [17]. <p> Thus, for instance, Girard's fl translation, first published in 1987, corresponds exactly to Moggi's call-by-value translation, first published in 1989, and we can finally see that this is the case in 1996. 2. Categorical models In this section we recall the central semantic definitions from [4], <ref> [14] </ref> and [6] and some results which we shall need later. <p> Call-by-value translations The call-by-value translations are ?: v ! m , which is Moggi's CBV translation <ref> [14] </ref>, and fl: v ! l which is another translation due to Girard [10]. (Interestingly, although the CBV translation is central to Moggi's work, Girard thought his fl translation was "not of much interest".) These translations are shown in Figure 4.
Reference: [15] <author> S. Peyton Jones and J. Launchbury. </author> <title> State in Haskell. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 8(4) </volume> <pages> 293-341, </pages> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: The significance of these results extends well beyond the treatment of partiality by lifting and many suggestive similarities remain. For example, both linear and monadic types have been used to add updateable state to functional languages in a controlled way <ref> [2, 15] </ref>. We hope that our work may serve as a starting point for a formal comparison of these approaches. 9.
Reference: [16] <author> G. D. Plotkin. </author> <title> Call-by-name, call-by-value, and the lambda calculus. </title> <journal> Theoretical Computer Science, </journal> <volume> 1 </volume> <pages> 125-159, </pages> <year> 1975. </year>
Reference-contexts: with three source calculi with identical syntax but different semantics: the direct calculus is the usual simply typed lambda calculus, the lifted calculus ? is a typed version of Abramsky and Ong's lazy lambda calculus [1], and the call-by-value calculus v is typed version of Plotkin's calculus of that name <ref> [16] </ref>. Each of these calculi is given two interpretations in an adjoint model via two translations one into the monadic calculus, yielding a semantics in C, and one into the linear calculus, yielding a semantics in L. <p> Briefly, the difference between these calculi is that they have different equational theories: satisfies the usual fi and rules, ? just satisfies the fi rules and v satisfies the restricted fi v and v laws <ref> [16] </ref>.
Reference: [17] <author> P. Wadler. </author> <title> Comprehending monads. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 2 </volume> <pages> 461-493, </pages> <year> 1992. </year> <booktitle> Special issue of selected papers from 6th Conference on Lisp and Functional Programming. </booktitle>
Reference-contexts: Moggi also proposed two translations, clearly labelled as call-by-value and call-by-name [14], of the lambda calculus into his computational metalanguage; Wadler discusses these further in <ref> [17] </ref>.
Reference: [18] <author> P. Wadler. </author> <title> A syntax for linear logic. </title> <booktitle> In Proceedings of the Ninth International Conference on the Mathematical Foundations of Programming Semantics, </booktitle> <address> New Orleans, Louisiana, </address> <booktitle> volume 802 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <month> Apr. </month> <year> 1993. </year>
Reference-contexts: The logic associated with monad models and the computational metalan-guage is an intuitionistic modal logic, dubbed CL-logic in [5]. Associated with linear models and ILL are several proposals for linear term calculi, such as those of [6], <ref> [18] </ref>, [11]. Here we choose to work with the calculus of [6]. Corresponding to adjoint models are the LNL term calculus (here referred to as the adjoint calculus) and LNL logic of [4]. <p> We are using the syntax of [6], which is now fairly standard and well-known, although this does make the terms associated with the translations rather large and unwieldy. The alternative would have been to use the DILL (for `dual intuitionistic linear logic') syntax due to Wadler <ref> [18] </ref> and, independently, to Plotkin and Barber [3]. Using DILL makes two of the term translations appear more elegant, but makes the connection with the commonest presentations of ILL a little more indirect. It should be stressed that everything works equally well with either syntax.
References-found: 18

