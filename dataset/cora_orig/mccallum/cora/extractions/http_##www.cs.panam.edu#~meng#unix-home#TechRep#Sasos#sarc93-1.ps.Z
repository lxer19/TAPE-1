URL: http://www.cs.panam.edu/~meng/unix-home/TechRep/Sasos/sarc93-1.ps.Z
Refering-URL: http://www.cs.panam.edu/~meng/unix-home/TechRep/Sasos/
Root-URL: http://www.cs.panam.edu
Title: Compiling for a 64-Bit Single Address Space Architecture  
Author: Tim Wilkinson, Ashley Saulsbury, Tom Stiemerlingand Kevin Murray 
Date: 29 Mar. 1993  
Address: City University, London, ENGLAND.  Stockholm, SWEDEN.  
Affiliation: Systems Architecture Research Centre  Swedish Institute of Computer Science  
Abstract: This paper examines techniques to enable standard UNIX applications to be executed on a new single address space operating system, Angel. This is achieved using advanced compiler techniques which allow multiple execution of the same program without conflicts and will also produce forkable code. The operating system is briefly examined and the compiler changes described in detail. Results are then presented which demonstrate such techniques do not adversely effect application performance. 
Abstract-found: 1
Intro-found: 1
Reference: [ABG + 86] <author> N. Accetta, W. Bolosky, D. Golub, R. Rashid, A. Tevanian, and M. Young. </author> <title> "MACH: A new kernel foundation for UNIX development,". </title> <booktitle> In USENIX Summer Conference, </booktitle> <month> July </month> <year> 1986. </year>
Reference-contexts: We conclude by considering future work. 2 Single Address Space Architectures It is well understood that large monolithic operating system designs are difficult to maintain or extend. This has resulted in the micro-kernel approach now current in operating systems research (examples of this technology are Mach <ref> [ABG + 86] </ref>, Amoeba [MvRT + 90], Meshix [OSW + 92] and Chorus [Roz90]). These systems operate using a small message passing micro-kernel which links clients, requesting services, to servers which provide them.
Reference: [BALL90] <author> Brian N. Bershad, Thomas E. Anderson, Edward D. Lazowska, and Henry M. Levy. </author> <title> "Lightweight Remote Procedure Call,". </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 8(1) </volume> <pages> 37-55, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: Unfortunately, such a strategy comes at a cost|it is necessary to package all data into messages for communications since no common memory exists, an operation which increases copying and reduces efficiency. This problem can be partially solved by modifying the message passing design <ref> [BALL90] </ref>. The appearance of 64-bit address processors allows a different micro-kernel approach to be made. Instead of providing many protected address spaces communicating with messages; a single address space is provided containing many disjoint and overlapping protection domains communicating via shared memory.
Reference: [CLBHL92a] <author> J. Chase, H. Levy, M. Baker-Harvey, and E. Lazowska. </author> <title> "How to Use a 64-Bit Virtual Address Space,". </title> <type> Technical Report 92-03-02, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: This design has been adopted in Angel [WSO + 92]. 2.1 Overview of Angel Angel is an example of a Single Address Space Architecture (SASA). There has been other worked carried out in this area over the last few years; for example Opal at Washing-ton University <ref> [CLBHL92a] </ref> as well as Psyche [SLM + 88] and other systems at Rochester University [GBK + 92]. Our interest arises from experience with a message passing micro-kernel, Meshix.
Reference: [CLBHL92b] <author> J. Chase, H. Levy, M. Baker-Harvey, and E. Lazowska. </author> <title> "Lightweight Shared Objects in a 64-Bit Operating System,". </title> <type> Technical Report 92-03-09, </type> <institution> De 10 partment of Computer Science and Engineering, University of Washington, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: The services this kernel provides are briefly described below. Data storage model As a SASA, Angel offers only one unified name space|the virtual address range of the processor. Addresses of 64-bits are adequate for the purposes of a large distributed multi-computer <ref> [CLBHL92b] </ref>. This space is allocated as a set of Objects. Each object is created 2 at a fixed place and with a fixed size 1 . All objects persist until explicitly deleted or garbage collected.
Reference: [DVH66] <author> J.B. Dennis and E.C. Van Horn. </author> <title> "Programming Semantics for Multipro-grammed Computations,". </title> <journal> Communications of the ACM, </journal> <volume> 9 </volume> <pages> 143-154, </pages> <month> March </month> <year> 1966. </year>
Reference-contexts: Communication between kernel and processes is also managed using shared memory. This reduces the number of system calls which would normally be required to obtain relatively trivial information (eg. time of day, process identity, priority, etc.). Protection model Angel's protection model is based around capabilities <ref> [DVH66] </ref>. Unlike other capability systems however, a capability only fulfils part of the requirement to access an object. Each capability may also nominate dependent objects. For example, a well known capability may exist to read and write the password database.
Reference: [GBK + 92] <author> W. Garrett, R. Bianchini, L. Kontothanassis, R. McCallum, J. Thomas, R. Wisniewski, and M. Scott. </author> <title> "Dynamic Sharing and Backward Compatibility on 64-Bit Machines,". </title> <type> Technical Report TR-418, </type> <institution> University or Rochester, Department of Computer Science, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: There has been other worked carried out in this area over the last few years; for example Opal at Washing-ton University [CLBHL92a] as well as Psyche [SLM + 88] and other systems at Rochester University <ref> [GBK + 92] </ref>. Our interest arises from experience with a message passing micro-kernel, Meshix. We found such a UNIX model to be inappropriate to parallel application development, both due to the environment it provided and its performance. Angel was designed to provide more suitable facilities. <p> Modifying the single address space to provide some process dependent address space, 2. Only use a processor with an implicit data segment (eg. 80486), or 3. Resolve the problem in the compiler. The first solution has been adopted in other proposed systems <ref> [GBK + 92] </ref> but we have dismissed this since it re-introduces the problems associated with process dependent addressing (address aliasing) Angel has eliminated. The second solution is desirable but only a few processors support an implicit data segment.
Reference: [MvRT + 90] <author> S. Mullender, G. van Rossum, A. Tanenbaum, R. van Renesse, and H. van Staveren. </author> <title> "Amoeba: A distributed operating system for the 1990's,". </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 44-53, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: This has resulted in the micro-kernel approach now current in operating systems research (examples of this technology are Mach [ABG + 86], Amoeba <ref> [MvRT + 90] </ref>, Meshix [OSW + 92] and Chorus [Roz90]). These systems operate using a small message passing micro-kernel which links clients, requesting services, to servers which provide them.
Reference: [OSW + 92] <author> P. Osmon, T. Stiemerling, A. Whitcroft, Wilkinson.T., and N. Williams. </author> <title> "Evaluating Meshix a Unix compatible micro-kernel Operating System,". </title> <booktitle> In OpenForum'92, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: This has resulted in the micro-kernel approach now current in operating systems research (examples of this technology are Mach [ABG + 86], Amoeba [MvRT + 90], Meshix <ref> [OSW + 92] </ref> and Chorus [Roz90]). These systems operate using a small message passing micro-kernel which links clients, requesting services, to servers which provide them.
Reference: [Roz90] <author> M. Rozier. </author> <title> "Overview of the CHORUS Distributed Operating Systems,". </title> <type> Technical Report CS-TR-90-25, </type> <institution> Chorus systemes, </institution> <year> 1990. </year>
Reference-contexts: This has resulted in the micro-kernel approach now current in operating systems research (examples of this technology are Mach [ABG + 86], Amoeba [MvRT + 90], Meshix [OSW + 92] and Chorus <ref> [Roz90] </ref>). These systems operate using a small message passing micro-kernel which links clients, requesting services, to servers which provide them.
Reference: [SLM + 88] <author> M.L. Scott, T.J. LeBlanc, B.D. Marsh, T.G. Becker, C. Dubnicki, E.P. Markatos, and N.G. Smithline. </author> <title> "Implementation Issues for the Psyche Operating System,". </title> <type> Technical Report, </type> <institution> University or Rochester, Department of Computer Science, </institution> <year> 1988. </year>
Reference-contexts: There has been other worked carried out in this area over the last few years; for example Opal at Washing-ton University [CLBHL92a] as well as Psyche <ref> [SLM + 88] </ref> and other systems at Rochester University [GBK + 92]. Our interest arises from experience with a message passing micro-kernel, Meshix. We found such a UNIX model to be inappropriate to parallel application development, both due to the environment it provided and its performance.
Reference: [WSO + 92] <author> T. Wilkinson, T. Stiemerling, P. Osmon, A. Saulsbury, and P. Kelly. </author> <note> "Angel: </note>
Reference-contexts: The appearance of 64-bit address processors allows a different micro-kernel approach to be made. Instead of providing many protected address spaces communicating with messages; a single address space is provided containing many disjoint and overlapping protection domains communicating via shared memory. This design has been adopted in Angel <ref> [WSO + 92] </ref>. 2.1 Overview of Angel Angel is an example of a Single Address Space Architecture (SASA).
References-found: 11

