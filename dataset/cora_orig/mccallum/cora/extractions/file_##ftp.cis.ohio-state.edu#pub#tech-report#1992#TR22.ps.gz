URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1992/TR22.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Title: Distributed Rule Monitoring in Active Databases and Its Performance Analysis  
Author: Ing-Miin Hsu, Mukesh Singhal, Ming T. Liu 
Date: August 10, 1992  
Address: 2036 Neil Avenue Mall Columbus, Ohio 43210  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: Monitoring rules in a distributed active database involves three design issues: how to decompose rules, how to distribute rules to sites, and how to evaluate distributed rules correctly. In this paper, we study these three issues for complicated rules, which are complex and time-consuming to evaluate. We propose a new relational operator, AND, and the associated algebraic manipulations of this operator to find independent parts of rule query, which can be distributed among sites. Due to problems introduced by geographical distribution of sites in a distributed system, such as communication delay and lack of a global clock, correct evaluation of distributed rules is not an easy task. We propose a distributed evaluation algorithm which guarantees the correctness of the evaluation result of the distributed rule by collecting consistent local results from sites to form the global view. The message count and the response time of this distributed evaluation algorithm are analyzed for triggering updates.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Johnathan Bein, Roger King & Nabil Kamel, "MOBY: </author> <title> An Architecture for Distributed Expert Database Systems," </title> <booktitle> Proc. of the 13th Int'l Conf. on VLDB, </booktitle> <year> 1987, </year> <pages> 13-20. </pages>
Reference: [2] <author> D. Bitton, H. Boral, D. J. DeWitt & W. K. Wilkinson, </author> <title> "Parallel Algorithms for the Execution of Relational Database Operations," </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 8, No. 3, </volume> <month> September </month> <year> 1983, </year> <pages> 324-353. </pages>
Reference-contexts: Each task is identified by a test node with one set of data tuples. Work has also been done to parallelize individual relational operators, most notably the join operator <ref> [2] </ref>. After a rule is decomposed, it is important to address the question of how to match decomposed subrules to sets of base relations in order to distribute both of them to sites.
Reference: [3] <author> K. Mani Chandy & Leslie Lamport, </author> <title> "Distributed Snapshots: Determining Global States of Distributed Systems," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol. 3, No. 1, </volume> <month> February </month> <year> 1986, </year> <pages> 64-75. </pages>
Reference-contexts: To guarantee the correctness of a global result, a consistent set of local results must be collected and combined. Traditional approaches in determine global state of a distributed system, such as global snapshots <ref> [3] </ref> and logical clocks [16], are not adequate in determining a consistent rule evaluation result. Global snapshots are suitable in detecting stable conditions, which stay unchanged once formed. However, rule conditions change dynamically since database states are changed constantly due to database updates.
Reference: [4] <author> Simona Rabinovichi Cohen & Ouri Wolfson, </author> <title> "Why a Single Parallelization Strategy is not Enough in Knowledge Bases," </title> <booktitle> Principle of Database Systems (PODS), </booktitle> <year> 1989, </year> <pages> 200-216. </pages>
Reference: [5] <author> U. Dayal, et al., </author> <title> "The HiPAC Project: Combining Active Databases and Timing Constraints," </title> <booktitle> SIGMOD Record, </booktitle> <volume> Vol. 17, No. 1, </volume> <month> March </month> <year> 1988, </year> <pages> 51-70. </pages>
Reference-contexts: of Rule Queries 4.1 Preliminaries The goal of evaluating a rule condition is to determine whether the rule condition has occurred, which can be represented as a true/false value, and, when it occurs, to pass to the rule action a subset of the derived data, which is called the binding <ref> [5] </ref> between a rule condition and its corresponding rule action. Since rule conditions introduced in relational DBMS's have taken the form of database queries, a rule condition restricted to its binding with the rule action can be easily converted to a relational expression.
Reference: [6] <author> Guozhu Dong, </author> <title> "On Distributed Processibility of Datalog Queries by Decomposing Databases," </title> <booktitle> SIGMOD Record, </booktitle> <volume> Vol. 18, No. 2, </volume> <year> 1989, </year> <pages> 26-35. </pages>
Reference: [7] <author> The Committee for Advanced DBMS Functions, </author> <title> "Third-Generation Database System Manifesto," </title> <booktitle> SIGMOD Record, </booktitle> <volume> Vol. 19, No. 3, </volume> <month> September </month> <year> 1990, </year> <pages> 31-44. </pages>
Reference: [8] <author> Sumit Ganguly, Avi Silberschatz & Shalom Tsur, </author> <title> "A Framework for the Parallel Processing of Datalog Queries," </title> <booktitle> SIGMOD Record, </booktitle> <volume> Vol. 19, Iss. 2, </volume> <year> 1990, </year> <pages> 143-152. </pages>
Reference: [9] <author> Anoop Gupta, </author> <title> Parallelism in Production Systems. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> Los Altos, CA, </address> <year> 1987. </year>
Reference-contexts: In MAPPS [18], different test nodes of the Rete algorithm are distributed to different processing elements to achieve parallelism. * At task level, the parallel Rete algorithm proposed in <ref> [9] </ref> and the DRete proposed in [14] parallelize the rule monitoring by decomposing each test node into tasks and distribute each task independently. Each task is identified by a test node with one set of data tuples.
Reference: [10] <author> Eric N. Hanson, </author> <title> "An Initial Report on the Design of Ariel," </title> <booktitle> SIGMOD Record, </booktitle> <volume> Vol. 18, No. 3, </volume> <month> September </month> <year> 1989, </year> <pages> 12-19. </pages>
Reference: [11] <author> Wilson Harvey, et al., </author> <title> "The Effectiveness of Task-Level Parallelism for Production Systems," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Vol. 13, No. 4, </volume> <month> December </month> <year> 1991, </year> <pages> 383-394. 34 </pages>
Reference: [12] <author> Guy Hulin, </author> <title> "Parallel Processing of Recursive Queries in Distributed Architec--tures," </title> <booktitle> Proc. of the 15th Int'l Conf. on VLDB, </booktitle> <address> Amsterdam, The Netherlands, </address> <year> 1989, </year> <pages> 87-96. </pages>
Reference-contexts: In deductive databases, an equivalent idea using discriminating predicates is also independently reported in [8,30]. * At relation level, rules are decomposed into single-relation subrules in <ref> [12] </ref> for processing recursive queries in parallel. * At relational operator level, each test node of the Rete algorithm can be considered as performing a relational operation, selection or join.
Reference: [13] <author> Toru Ishida, </author> <title> "Parallel Rule Firing in Production Systems," </title> <journal> IEEE Transactions on Knolwdge and Data Engineering, </journal> <volume> Vol. 3, No. 1, </volume> <month> March </month> <year> 1991, </year> <pages> 11-17. </pages>
Reference: [14] <author> Michael A. Kelly & Rudolph E. Seviora, </author> <title> "An Evaluation of DRete on CUPID for OPS5 Matching," </title> <booktitle> Proc. of the '89 Int'l Joint Conf. on Artificial Intelligence, </booktitle> <year> 1989, </year> <pages> 84-90. </pages>
Reference-contexts: In MAPPS [18], different test nodes of the Rete algorithm are distributed to different processing elements to achieve parallelism. * At task level, the parallel Rete algorithm proposed in [9] and the DRete proposed in <ref> [14] </ref> parallelize the rule monitoring by decomposing each test node into tasks and distribute each task independently. Each task is identified by a test node with one set of data tuples. Work has also been done to parallelize individual relational operators, most notably the join operator [2].
Reference: [15] <author> Steve Kuo & Dan Moldovan, </author> <title> "Implementation of Multiple Rule Firing Production Systems on Hypercube," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Vol. 13, </volume> <month> December </month> <year> 1991, </year> <pages> 383-394. </pages>
Reference: [16] <author> L. Lamport, </author> <title> "Time, Clocks and the Ordering the Events in a Distributed Systems," </title> <journal> Communication of the ACM , Vol. </journal> <volume> 21, No. 7, </volume> <month> July </month> <year> 1978, </year> <pages> 558-565. </pages>
Reference-contexts: To guarantee the correctness of a global result, a consistent set of local results must be collected and combined. Traditional approaches in determine global state of a distributed system, such as global snapshots [3] and logical clocks <ref> [16] </ref>, are not adequate in determining a consistent rule evaluation result. Global snapshots are suitable in detecting stable conditions, which stay unchanged once formed. However, rule conditions change dynamically since database states are changed constantly due to database updates.
Reference: [17] <author> Kemal Oflazer, </author> <title> "Partitioning in Parallel Processing of Production Systems," Pro. </title> <booktitle> of Int'l Conf. on Parallel Processing, </booktitle> <year> 1984, </year> <pages> 92-100. </pages>
Reference: [18] <author> A. O. Oshisanwo & P. P. Dasiewicz, </author> <title> "A Parallel Model and Architecture for Production Systems," </title> <booktitle> Int'l Conf. on Parallel Processing, </booktitle> <year> 1987, </year> <pages> 147-153. </pages>
Reference-contexts: In MAPPS <ref> [18] </ref>, different test nodes of the Rete algorithm are distributed to different processing elements to achieve parallelism. * At task level, the parallel Rete algorithm proposed in [9] and the DRete proposed in [14] parallelize the rule monitoring by decomposing each test node into tasks and distribute each task independently.
Reference: [19] <author> Louiqa Raschid, Timos K. Sellis & A. Delis, </author> <title> "On the Concurrent Execution of Production Rules in a Database Implementation," </title> <institution> CS-TR-2751, Department of Computer and Information Science, University of Maryland, </institution> <year> 1991. </year>
Reference: [20] <author> James G. Schmolze, </author> <title> "Guaranteeing Serializable Results in Synchronous Parallel Production Systems," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Vol. 13, No. 4, </volume> <month> December </month> <year> 1991, </year> <pages> 348-365. 35 </pages>
Reference: [21] <author> James G. Schmolze & Suraj Goel, </author> <title> "A Parallel Asynchronous Distributed Produc--tion System," </title> <booktitle> Proc. of the '87 Int'l Conf. on Artificial Intelligence, </booktitle> <month> July 13-17, </month> <year> 1987, </year> <pages> 65-71. </pages>
Reference: [22] <author> Avi Silberschatz, Michael Stonebraker & Jeffrey D. Ullman, </author> <title> "Database Systems: Achievements and Opportunities," </title> <booktitle> SIGMOD Record, </booktitle> <volume> Vol. 19, No. 4, </volume> <month> December </month> <year> 1990, </year> <pages> 6-22. </pages>
Reference: [23] <author> M. Spezialetti & J. P. Kearns, </author> <title> "Simultaneous Regions: A Framework for the Consistent Monitoring of Distributed Systems," </title> <booktitle> Proc. of Int'l Conf. on Distributed Computing Systems, </booktitle> <year> 1989, </year> <pages> 61-68. </pages>
Reference-contexts: To evaluate subrules scattered among nodes in a distributed environment where no global clock is available and many tasks may happen simultaneously, coordination among nodes is necessary to guarantee the correct evaluation result. The simultaneous 15 region approach <ref> [23] </ref> offers such a coordination scheme for a tree of nodes. Execution at each node is divided into regions, each of which is identified by a region number. <p> procedure local update; release table space for all child state info with region number child region no; End 17 6.3 Argument for Correctness Under the assumption of a reliable communication network, which loses no message and delivers messages in the order sent, the simultaneous region approach has the following properties <ref> [23] </ref>. (1) No region number will be skipped at each node because each node will be initialized with the same initial region number and will advance the region number successively. (2) For every region in a node, there is a corresponding, equally numbered, region in its sibling nodes.
Reference: [24] <author> Jaideep Srivastava, Kuo-Wei Hwang & Jack S. Eddy Tan, </author> <title> "Parallelism in Database Production Systems," </title> <booktitle> Proc. of the 6th Int'l Conf. on Data Engineering , 1990, </booktitle> <pages> 121-128. </pages>
Reference: [25] <author> Salvatore J. Stolfo, Daniel Miranker & R. Mills, </author> <title> "A Simple Processing Scheme to Extract and Load Balance Implicit Parallelism in The Concurrenrt Match of Production Rules," </title> <booktitle> Proc. AFIPS Symposium on Fifth Generation Computing, </booktitle> <year> 1985. </year>
Reference-contexts: Intead, parallelism is achieved by dividing the rule set into multiple partitions, each of which consists of multiple rules. This approach is adopted in most of the research on multiple rule firing for parallel production systems [11,13,15,17,20,21,24,26]. 3 * At rule level, copy-and-constraint technique <ref> [25] </ref> creates multiple copies of the same rule, where each copy is constrained to match a subset of the data.
Reference: [26] <author> Salvatore J. Stolfo & Daniel P. Miranker, </author> <title> "The DADO Production System Machine," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Vol. 3, </volume> <year> 1986, </year> <pages> 269-296. </pages>
Reference: [27] <author> Michael Stonebraker, Eric N. Hanson & Spyros Potamianos, </author> <title> "The POSTGRES Rule Manager," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 14, No. 7, </volume> <month> July </month> <year> 1988, </year> <pages> 897-907. </pages>
Reference: [28] <author> Michael Stonebraker, Marti Hearst & Spyros Potamianos, </author> <title> "A Commentary on the POSTGRES Rules System," </title> <booktitle> SIGMOD Record, </booktitle> <volume> Vol. 18, No. 3, </volume> <month> September </month> <year> 1989, </year> <pages> 5-11. </pages>
Reference-contexts: The remainder of the paper contains seven sections, beginning with a discussion of issues in distributed rule monitoring. Section 3 follows with examples of sample rules in a stock trading database system using PRS II syntax <ref> [28] </ref>, which will be used throughout this paper. Section 4 introduces a rule decomposition algorithm which uses algebraic manipulations of relational operators to decompose a rule condition into independent relational expressions. In Section 5, a distribution algorithm to adapt rule distribution to base relation distribution is discussed.
Reference: [29] <author> Jeffrey D. Ullman, </author> <title> Principles of Database Systems. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Maryland, </address> <year> 1982. </year>
Reference-contexts: Optimization of a relational expression by algebraic manipulations of its correspond ing relational operator tree has been studied in detail <ref> [29] </ref>. The principle idea is to 7 move selections and projections as far down the tree as possible. Our decomposition algorithm will follow the same principle. <p> The performance for non-triggering updates and its impact on overall performance is the topic of future research. Appendix A Algebraic laws in manipulating regular relational operators as introduced in <ref> [29] </ref> are presented in this appendix to complete the presentation of the decomposition algorithm. Conventional notations are used for these relational operators, such as selection (), projection (), Cartesian product (fi), join (1), union ([), intersection ("), and set difference ().
Reference: [30] <author> Ouri Wolfson & Aya Ozeri, </author> <title> "A New Paradigm for Parallel and Distributed Rule-Processing," </title> <booktitle> SIGMOD Record, </booktitle> <volume> Vol. 19, Iss. 2, </volume> <year> 1990, </year> <pages> 133-142. 37 </pages>
Reference-contexts: After a rule is decomposed, it is important to address the question of how to match decomposed subrules to sets of base relations in order to distribute both of them to sites. Three possible distribution philosophies are (1) having a fully replicated database for the base relations <ref> [30] </ref>, (2) adapting a base relation distribution to a rule distribution [1,6], and (3) adapting a rule distribution to a base relation distribution.
References-found: 30

