URL: ftp://ftp.cs.huji.ac.il/users/transis/ftcs-22.ps
Refering-URL: http://www.cs.huji.ac.il/labs/transis/abstracts92.html
Root-URL: http://www.cs.huji.ac.il
Title: Transis: A Communication Sub-System for High Availability  
Author: Yair Amir, Danny Dolev, Shlomo Kramer, Dalia Malki 
Address: Jerusalem, Israel  
Affiliation: The Hebrew University of  
Abstract: This paper describes Transis, a communication subsystem for high availability. Transis is a transport layer that supports reliable multicast services. The main novelty is in the efficient implementation using broadcast. The basis of Transis is automatic maintenance of dynamic membership. The membership algorithm is symmetrical, operates within the regular flow of messages, and overcomes partitions and re-merging. The higher layer provides various multicast services for sets of processes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. </author> <title> Membership algorithms in broadcast domains. </title> <type> Technical Report CS92-10, </type> <institution> dept. of comp. sci.., the Hebrew University of Jerusalem, </institution> <year> 1992. </year>
Reference-contexts: The basis layer of Lansis, membership, automatically maintains the CCS in consensus among all the members of CCS. The Membership section below sheds some intuition on the membership algorithm. The full details of the algorithm and proof of its correctness are found in <ref> [1] </ref>. The next layer on top of the dynamic membership is responsible for reliable delivery of messages within the CCS. It delivers both regular messages and special configuration change messages to the upper level. Lansis supports various primitives for coordinating the delivery of multicast messages in different processors (see below).
Reference: [2] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. </author> <title> Total ordering of messages in broadcast domains. </title> <type> Technical Report CS92-9, </type> <institution> dept. of comp. sci.., the Hebrew University of Jerusalem, </institution> <year> 1992. </year>
Reference-contexts: Agreed multicast: delivers messages in the same order at all sites. There are various protocols for achieving the agreed order, some not involving additional messages ([14, 17]), others involving a central coordinator ([8, 5]). We developed a sym metrical algorithm that achives this (see <ref> [2] </ref>). 5. Safe multicast: delivers a message after all the active processors have acknowledged its recep tion. These services resemble the ISIS approach, however the design and implementation differ. <p> The delivery criteria are as follows: 1. Basic: Immediate delivery. 2. Causal: When all direct predecessors in the DAG have been delivered. 3. Agreed: We have developed a novel delivery criterion called ToTo that achieves best case delay of n 2 +1 messages <ref> [2] </ref>. The ToTo delivery criterion are beyond the scope of this paper. 4. Safe: When the paths from the message to the DAG's leaves contain a message from each processor. The safe criterion changes automatically when the membership changes. <p> It is true that in some extreme cases, processors may wrongly decide that another processor has failed, but when this is found out, the system recovers. By maintaining membership at the lowest level, we simplify the implementation of all the other services. For example, in <ref> [2] </ref> we show how to construct the agreed multicast on top of the dynamic membership. The membership algorithm operates symmetrically and spontaneously. Its novel aspect is the ability to join partitions.
Reference: [3] <author> K. Birman, R. Cooper, and B. Gleeson. </author> <title> Programming with process groups: Group and multicast semantics. </title> <type> TR 91-1185, </type> <institution> dept. of Computer Science, Cornell Uni., </institution> <month> Jan </month> <year> 1991. </year>
Reference-contexts: Configuration-change messages are delivered within the regular flow of messages. Lansis guarantees to deliver configuration-change events in a consistent order with messages at all sites. More formally, each processor receives the same set of messages between every pair of configuration-change events. Birman et al. describe this concept in <ref> [3, 7] </ref> as virtual synchrony: It allows distributed applications to observe all the events in the system in a single order. In this way, it creates 1 Intuitively, we think of a broadcast domain (BD) as a logical broadcast LAN, which provides reliable and diverse broadcast operations.
Reference: [4] <author> K. Birman, R. Cooper, T. A. Joseph, K. Marzullo, M. Makpangou, K. Kane, F. Schmuck, and M. Wood. </author> <title> The ISIS System Manual. </title> <institution> Dept of Computer Science, Cornell University, </institution> <month> Sep 90. </month>
Reference-contexts: As Melliar Smith et al. noted ([15]), this may be implemented by using an incarnation number as part of the message identifier; The last incarnation number is saved on a nonvolatile storage. One of the leading projects in this area is the ISIS system <ref> [4] </ref>. ISIS provides services for constructing distributed applications in a heterogeneous network of Unix machines. The services are provided for enhancing both performance and availability of applications in a distributed environment. ISIS provides reliable communication for process-groups and various group control operations.
Reference: [5] <author> K. Birman and T. Joseph. </author> <title> Realiable communication in the presence of failures. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 5(1) </volume> <pages> 47-76, </pages> <month> February </month> <year> 1987. </year>
Reference: [6] <author> K. Birman and T. Joseph. </author> <title> Exploiting virtual synchrony in distributed systems. </title> <booktitle> In Ann. Symp. Operating Systems Principles, </booktitle> <volume> number 11, </volume> <pages> pages 123-138. </pages> <publisher> ACM, </publisher> <month> Nov 87. </month>
Reference: [7] <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight causal and atomic group multicast. </title> <type> TR 91-1192, </type> <institution> dept. of comp. sci., Conrell University, </institution> <note> 91. revised version of `fast causal multicast'. </note>
Reference-contexts: Configuration-change messages are delivered within the regular flow of messages. Lansis guarantees to deliver configuration-change events in a consistent order with messages at all sites. More formally, each processor receives the same set of messages between every pair of configuration-change events. Birman et al. describe this concept in <ref> [3, 7] </ref> as virtual synchrony: It allows distributed applications to observe all the events in the system in a single order. In this way, it creates 1 Intuitively, we think of a broadcast domain (BD) as a logical broadcast LAN, which provides reliable and diverse broadcast operations. <p> Typically, this problem has been solved for the case that a single processor joins an existing membership set (e.g. <ref> [15, 16, 9, 7] </ref>). However, in reality processors might temporarily detach. When they reconnect, they are oblivious to the detachment and continue sending regular messages. Another difficulty arises from partitions and reconnections of the network. In this case, there are two sets of processors that need to be joined together. <p> For example, in [2] we show how to construct the agreed multicast on top of the dynamic membership. The membership algorithm operates symmetrically and spontaneously. Its novel aspect is the ability to join partitions. To the best of our knowledge all of the existing membership algorithms (e.g. <ref> [15, 16, 9, 7] </ref>) handle the joining of single processors only. This feature is crucial since partitions do occur. For example, when the network includes bridging elements partitions are likely to occur.
Reference: [8] <author> J. M. Chang and N. Maxemchuck. </author> <title> Realiable broadcast protocols. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 2(3) </volume> <pages> 251-273, </pages> <month> August </month> <year> 1984. </year>
Reference: [9] <author> F. Cristian. </author> <title> Reaching agreement on processor group membership in synchronous distributed systems. </title> <type> Research Report RJ 5964, </type> <institution> IBM Almaden Research Center, </institution> <month> Mar. </month> <year> 1988. </year>
Reference-contexts: The CCS undergoes changes during operation: processors dynamically go up and down, and the CCS reflects these changes through a series of configuration changes. The problem of maintaining processor-set membership in the face of processor faults and joins is described in <ref> [9] </ref>. As noted by others ([12, 11, 14]), solving the membership problem in an asynchronous environ ment when faults may be present is impossible. Tran--sis contains a new membership protocol that handles any form of detachment and re-connection of processors, based on causally ordered messages. <p> Typically, this problem has been solved for the case that a single processor joins an existing membership set (e.g. <ref> [15, 16, 9, 7] </ref>). However, in reality processors might temporarily detach. When they reconnect, they are oblivious to the detachment and continue sending regular messages. Another difficulty arises from partitions and reconnections of the network. In this case, there are two sets of processors that need to be joined together. <p> For example, in [2] we show how to construct the agreed multicast on top of the dynamic membership. The membership algorithm operates symmetrically and spontaneously. Its novel aspect is the ability to join partitions. To the best of our knowledge all of the existing membership algorithms (e.g. <ref> [15, 16, 9, 7] </ref>) handle the joining of single processors only. This feature is crucial since partitions do occur. For example, when the network includes bridging elements partitions are likely to occur.
Reference: [10] <author> S. E. Deering. </author> <title> Host extensions for ip multicasting. </title> <type> RFC 1112, </type> <institution> SRI Network Information Center, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: The Lansis protocol exploits the network broadcast capability for disseminating messages to multiple destinations via a single transmission (if a multicast capability is supported, as in <ref> [10] </ref>, Lansis can exploit it to address only the participating machines). There are various multicast protocols that utilize broadcast hardware, such as UDP ([18]), and the IP extended multicast protocol ([10]). However, they provide best-effort delivery only, and are not completely reliable.
Reference: [11] <author> D. Dolev, C. Dwork, and L. Stockmeyer. </author> <title> On the minimal synchrony needed for distributed consensus. </title> <journal> J. ACM, </journal> <volume> 34(1) </volume> <pages> 77-97, </pages> <month> Jan. </month> <year> 1987. </year>
Reference-contexts: Our preliminary implementation over a heterogeneous network of Sun-4 and Sun-3 machines shows promising results. Over more than three machines, performance is already better than standard point to point protocols. Fischer, Lynch and Paterson ([12], and later Dolev, Dwork and Stockmeyer, <ref> [11] </ref>) have shown that without some sort of synchronization no agreement is possible. Our membership algorithm circumvents these results by introducing a dynamic local group upon which agreement is based.
Reference: [12] <author> M. J. Fischer, N. A. Lynch, and M. S. Paterson. </author> <title> Impossibility of distributed consensus with one faulty processor. </title> <journal> J. ACM, </journal> <volume> 32(2) </volume> <pages> 374-382, </pages> <year> 1985. </year>
Reference: [13] <author> L. Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Comm. ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July 78. </month>
Reference: [14] <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Broadcast protocols for distributed systems. </title> <journal> IEEE Trans. Parallel & Distributed Syst., </journal> <volume> (1), </volume> <month> Jan </month> <year> 1990. </year>
Reference-contexts: These services resemble the ISIS approach, however the design and implementation differ. The main benefit of the Transis approach is that it operates over nonreliable communication channels and makes an efficient use of the network broadcast capability. Melliar-Smith et al. suggest in <ref> [14, 15] </ref> a novel protocol for reliable broadcast communication over physical LANs, the Trans protocol. Similar ideas appear in the Psync protocol ([17]). These protocols use a combined system of ACKs and NACKs to detect message losses and recover them. <p> Therefore, they reflect the user-oriented cause and effect relation directly. In Trans, on the other hand, the partial order does not correspond to the user order of events and is obtained by applying the OPD predicate on the acknowledgements <ref> [14] </ref>. Furthermore, the delivery criteria in Lansis is significantly simplified by this modification. We think of the causal order as a directed acyclic graph (DAG): the nodes are the messages, the arcs connect two messages that are directly dependent in the causal order.
Reference: [15] <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Membership algorithms for asynchronous distributed systems. </title> <booktitle> In Intl. Conf. Distributed Computing Systems, </booktitle> <month> May 91. </month>
Reference-contexts: These services resemble the ISIS approach, however the design and implementation differ. The main benefit of the Transis approach is that it operates over nonreliable communication channels and makes an efficient use of the network broadcast capability. Melliar-Smith et al. suggest in <ref> [14, 15] </ref> a novel protocol for reliable broadcast communication over physical LANs, the Trans protocol. Similar ideas appear in the Psync protocol ([17]). These protocols use a combined system of ACKs and NACKs to detect message losses and recover them. <p> Typically, this problem has been solved for the case that a single processor joins an existing membership set (e.g. <ref> [15, 16, 9, 7] </ref>). However, in reality processors might temporarily detach. When they reconnect, they are oblivious to the detachment and continue sending regular messages. Another difficulty arises from partitions and reconnections of the network. In this case, there are two sets of processors that need to be joined together. <p> For example, in [2] we show how to construct the agreed multicast on top of the dynamic membership. The membership algorithm operates symmetrically and spontaneously. Its novel aspect is the ability to join partitions. To the best of our knowledge all of the existing membership algorithms (e.g. <ref> [15, 16, 9, 7] </ref>) handle the joining of single processors only. This feature is crucial since partitions do occur. For example, when the network includes bridging elements partitions are likely to occur.
Reference: [16] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> A membership protocol based on partial order. </title> <booktitle> In proc. of the intl. working conf. on Dependable Computing for Critical Applications, </booktitle> <month> Feb </month> <year> 1991. </year>
Reference-contexts: Typically, this problem has been solved for the case that a single processor joins an existing membership set (e.g. <ref> [15, 16, 9, 7] </ref>). However, in reality processors might temporarily detach. When they reconnect, they are oblivious to the detachment and continue sending regular messages. Another difficulty arises from partitions and reconnections of the network. In this case, there are two sets of processors that need to be joined together. <p> For example, in [2] we show how to construct the agreed multicast on top of the dynamic membership. The membership algorithm operates symmetrically and spontaneously. Its novel aspect is the ability to join partitions. To the best of our knowledge all of the existing membership algorithms (e.g. <ref> [15, 16, 9, 7] </ref>) handle the joining of single processors only. This feature is crucial since partitions do occur. For example, when the network includes bridging elements partitions are likely to occur.
Reference: [17] <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting. </author> <title> Preserving and using context information in inter-process communication. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> August 89. </month>
Reference: [18] <author> J. B. Postel. </author> <title> User datagram protocol. </title> <type> RFC 768, </type> <institution> SRI Network Information Center, </institution> <month> August </month> <year> 1980. </year>
References-found: 18

