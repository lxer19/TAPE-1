URL: ftp://ftp.cs.colorado.edu/users/alw/papers/CU-CS-849-98.ps.Z
Refering-URL: http://www.cs.colorado.edu/users/alw/AvailablePubs.html
Root-URL: http://www.cs.colorado.edu
Email: fandre,dennis,alwg@cs.colorado.edu  
Title: Software Architecture, Configuration Management, and Configurable Distributed Systems: A Menage a Trois  
Author: Andre van der Hoek, Dennis Heimbigner, and Alexander L. Wolf 
Note: This work was supported in part by the Air Force Material Command, Rome Laboratory, and the Advanced Research Projects Agency under Contract Number F30602-94-C-0253. The content of the information does not necessarily reflect the position or the policy of the Government and no official endorsement should be inferred.  
Address: Boulder, CO 80309 USA  
Affiliation: Software Engineering Research Laboratory Department of Computer Science University of Colorado  
Abstract: University of Colorado Department of Computer Science Technical Report CU-CS-849-98 January 1998 ABSTRACT Software architecture, configuration management, and configurable distributed systems are three areas of research that until now have evolved separately. Contributions in each field have focused on their respective area of concern. However, as solutions in the three fields tend to center around some notion of a system model, it is worthwhile to investigate their relationship in detail. In particular, the large amount of overlap among the system models developed in each area, combined with the complementary nature of the differences among them, suggests that an approach based on a common system model is viable. In this paper, we illustrate the benefits of using such a unified system model, identify the commonalities and differences among the existing system models, and present some of our initial experiments that we believe will lead to the development of a single system model that is usable in all three fields. c fl 1998 Andre van der Hoek, Dennis Heimbigner, and Alexander L. Wolf
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Agnew, C. Hofmeister, and J. Purtilo. </author> <title> Planning for Change: A Reconfiguration Language for Distributed Systems. </title> <booktitle> In Proceedings of the Second International Workshop on Configurable Distributed Systems, </booktitle> <pages> pages 15-22, </pages> <address> Los Alamitos, California, March 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Although a variety of tools and techniques have been developed [19, 25], few formally defined system models exist at this time. Even the ones that do exist <ref> [1, 15, 24] </ref> do not yet address the full breadth of problems that have been identified. Perhaps the most advanced system model to emerge from the configurable distributed systems area to date is Darwin [24]. We therefore use Darwin to model the configurable and distributed aspects of our optimization example.
Reference: [2] <author> R. Allen and D. Garlan. </author> <title> A Formal Basis for Architectural Connection. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 6(3) </volume> <pages> 213-249, </pages> <month> July </month> <year> 1997. </year>
Reference-contexts: Because components and connections are typed, type checking at system composition time ensures a certain 1 A connector is a formalized notion of a connection that has its own language constructs in some ADLs. 8 level of consistency. A stronger, behavioral type of consistency is achieved by Wright <ref> [2] </ref> and CHAM [17]. Both ADLs formally define architectures. Inconsistencies in an architecture are uncovered by carrying out analyses on its formal definition. Architectural mismatches, such as competing threads of control, have been uncovered this way [7].
Reference: [3] <author> D. Batory and B.J. Geraci. </author> <title> Composition Validation and Subjectivity in GenVoca Generators. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 23(2) </volume> <pages> 67-82, </pages> <month> February </month> <year> 1997. </year>
Reference-contexts: However, UniCon does not allow for versions of the actual compositional constructs, such as, for example, components, interfaces, or types; versioning is only supported at the implementation level, not at the architectural level. Construction has received some attention from the architecture community. One approach, GenVoca <ref> [3] </ref>, is generative in nature: based on an architectural description, a system implementation is generated. Because this approach limits itself to domain-specific applications, it is very powerful. Unfortunately, the underlying generic principles are at too low a level to be considered for inclusion in a unified system model.
Reference: [4] <author> J. Buffenbarger. </author> <title> Syntactic Software Merging. In Software Configuration Management: </title> <booktitle> ICSE SCM-4 and SCM-5 Workshops Selected Papers, number 1005 in Lecture Notes in Computer Science, </booktitle> <pages> pages 153-172, </pages> <address> New York, New York, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The desired system is then constructed by applying the changes to the baseline. Although the change-set approach is elegant and easily understood by its users, it has the problem that it depends on merging <ref> [4] </ref>, which makes it inherently inconsistent. However, its application to software architecture and configurable distributed systems is appealing because the coarse granularity of the objects of concern could lessen the merging problem considerably. The last comparison dimension, dynamism, has not been addressed by the configuration management community as of yet. <p> If both change sets are selected to be part of a system, the conflict will need to be resolved. Although most merging algorithms are capable of uncovering a conflict, they require manual assistance in resolving the conflict <ref> [4] </ref>. For the management of source code by configuration management systems that are based on change-set technology, this has not been a problem because conflicts arise only occasionally [37].
Reference: [5] <author> R.H. Byrd, E. Eskow, A. van der Hoek, R.B. Schnabel, and K.P.B. Oldenkamp. </author> <title> A Parallel Global Optimization Method for Solving Molecular Cluster and Polymer Conformation Problems. </title> <booktitle> In Proceedings of the Seventh SIAM Conference on Parallel Processing for Scientific Computing, </booktitle> <pages> pages 72-77. </pages> <publisher> SIAM, </publisher> <year> 1995. </year>
Reference-contexts: We conclude this section by contrasting the system models and summarizing the discussion. 3.1 Example research in the field of numerical analysis <ref> [5] </ref>. The purpose of the system is to globally optimize a mathematical function, i.e., to find the point in the domain of the function that yields the absolute lowest function value.
Reference: [6] <author> G.M. Clemm. </author> <title> The Odin Specification Language. </title> <booktitle> In Proceedings of the International Workshop on Software Versioning and Configuration Control, </booktitle> <pages> pages 144-158, </pages> <year> 1988. </year>
Reference-contexts: Some of these focus on the construction of a system out of a set of individual source files <ref> [6, 12] </ref>. Others are concerned with the management of versions and configurations of source files [20, 26].
Reference: [7] <editor> D. Compare, P. Inverardi, and A.L. Wolf. </editor> <booktitle> Uncovering Architectural Mismatch in Dynamic Behavior. Science of Computer Programming, </booktitle> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: A stronger, behavioral type of consistency is achieved by Wright [2] and CHAM [17]. Both ADLs formally define architectures. Inconsistencies in an architecture are uncovered by carrying out analyses on its formal definition. Architectural mismatches, such as competing threads of control, have been uncovered this way <ref> [7] </ref>. The support for the other comparison dimensions besides composition and consistency is rather limited in current ADLs.
Reference: [8] <editor> R. Conradi, editor. </editor> <booktitle> Proceedings of the Seventh International Workshop on Software Configuration Management, number 1235 in Lecture Notes in Computer Science, </booktitle> <address> New York, New York, May 1997. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Advanced techniques and modeling capabilities have been developed over the years <ref> [8, 10, 38] </ref> of which the example has highlighted the essential contributions. However, two additional concepts deserve special mention. * Variants and revisions. Our example contains two versions of an optimization algorithm: the Optimizer component and the FastOptimizer component.
Reference: [9] <author> S. Crane and K. Twidle. </author> <title> Constructing Distributed Unix Utilities in Regis. </title> <booktitle> In Proceedings of the Second International Workshop on Configurable Distributed Systems, </booktitle> <pages> pages 183-189, </pages> <address> Los Alamitos, California, March 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Despite this problem, support for dynamism in the configurable distributed systems discipline is well established. Both internal dynamism, as illustrated in the example, and external dynamism are 14 supported. External dynamism is, for instance, supported by some of the support environments of Darwin <ref> [9, 33] </ref>. These environments allow a user to dynamically reconfigure a system while it is executing. The other comparison dimensions are supported in a limited fashion. Only a few attempts to support these dimensions have been made so far.
Reference: [10] <author> J. Estublier, </author> <title> editor. Software Configuration Management: </title> <booktitle> ICSE SCM-4 and SCM-5 Workshops Selected Papers, number 1005 in Lecture Notes in Computer Science, </booktitle> <address> New York, New York, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Advanced techniques and modeling capabilities have been developed over the years <ref> [8, 10, 38] </ref> of which the example has highlighted the essential contributions. However, two additional concepts deserve special mention. * Variants and revisions. Our example contains two versions of an optimization algorithm: the Optimizer component and the FastOptimizer component.
Reference: [11] <author> J. Estublier and R. Casallas. </author> <title> The Adele Configuration Manager. </title> <editor> In W. Tichy, editor, </editor> <booktitle> Configuration Management, number 2 in Trends in Software, </booktitle> <pages> pages 99-134. </pages> <publisher> Wiley, </publisher> <address> London, Great Britain, </address> <year> 1994. </year>
Reference-contexts: Others are concerned with the management of versions and configurations of source files [20, 26]. Only recently, the two have been combined into unified system models that not only address versioning and construction, but also raise the level of abstraction from source files to system-level components <ref> [11, 21, 41] </ref>. To illustrate the strengths and weaknesses of a typical system model developed by the config 9 uration management discipline, Figure 3 presents a revised version of our optimization example that is modeled in the PCL system modeling language [41]. <p> However, when arbitrary components are selected to be combined in a new configuration, potential inconsistencies are not revealed by the information that is modeled. The typing mechanism of Adele <ref> [11] </ref> and the interface specifications introduced by Perry [34] provide some improvement, but behavioral consistency cannot be achieved since both are static in nature.
Reference: [12] <author> S.I. Feldman. </author> <title> MAKE | A Program for Maintaining Computer Programs. </title> <journal> Software|Practice and Experience, </journal> (9):252-265, April 1979. 
Reference-contexts: Some of these focus on the construction of a system out of a set of individual source files <ref> [6, 12] </ref>. Others are concerned with the management of versions and configurations of source files [20, 26].
Reference: [13] <author> H. Gall, M. Jazayeri, R. Klosch, W. Lugmayr, and G. Trausmuth. </author> <title> Architecture Recovery in ARES. </title> <editor> In L. Vidal, A. Finkelstein, G. Spanoudakis, and A.L. Wolf, editors, </editor> <booktitle> Joint Proceedings of the SIGSOFT '96 Workshops, </booktitle> <pages> pages 111-115, </pages> <address> New York, New York, 1996. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Several corrective approaches have been proposed that rediscover an architecture from an implementation <ref> [13, 32] </ref>, but these solutions provide only a snapshot in time of the mapping between a 2 software architecture and its implementation.
Reference: [14] <author> D. Garlan, R. Monroe, and D. Wile. ACME: </author> <title> An Architecture Description Interchange Language. </title> <booktitle> In Proceedings of CASCON '97. </booktitle> <institution> IBM Center for Advanced Studies, </institution> <month> November </month> <year> 1997. </year>
Reference-contexts: Further proof of the importance of composition in ADLs is presented by ACME <ref> [14] </ref>, an architecture description language that has been proposed to unify existing ADLs. ACME is centered around the notion of components, connectors, and configurations, which are all system modeling constructs that are used to model the composition of a system.
Reference: [15] <editor> R.S. Hall, D.M. Heimbigner, A. van der Hoek, and A.L. Wolf. </editor> <title> An Architecture for Post-Development Configuration Management in a Wide-Area Network. </title> <booktitle> In Proceedings of the 1997 International Conference on Distributed Computing Systems, </booktitle> <pages> pages 269-278. </pages> <publisher> IEEE Computer Society, </publisher> <month> May </month> <year> 1997. </year> <month> 21 </month>
Reference-contexts: Although a variety of tools and techniques have been developed [19, 25], few formally defined system models exist at this time. Even the ones that do exist <ref> [1, 15, 24] </ref> do not yet address the full breadth of problems that have been identified. Perhaps the most advanced system model to emerge from the configurable distributed systems area to date is Darwin [24]. We therefore use Darwin to model the configurable and distributed aspects of our optimization example. <p> A form of construction is supported by Darwin, but it suffers from the same problem as UniCon: a component is assumed to be implemented by a single source, and thus a single binary, file. Versioning is addressed by the Software Dock <ref> [15] </ref>, but it has only incorporated the concept of temporal revisions until now. Selection has not been addressed at all. It is important to note that system modeling in the configurable distributed systems discipline is still in its infancy.
Reference: [16] <author> P. Inverardi and A.L. Wolf. </author> <title> Formal Specification and Analysis of Software Architectures using the Chemical Abstract Machine Model. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4) </volume> <pages> 373-386, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Both external and internal dynamism are present in ADLs. Most notably, C2 [40] supports external dynamism through its ArchShell [27] environment, whereas internal dynamism is supported by Rapide [23] and CHAM <ref> [16] </ref>. In either case, though, support is limited because the system model itself provides no constructs to support the architectural changes with guidelines and constraints. It is not possible, for example, to specify in the system model what particular topology needs to be maintained while an architecture is being modified.
Reference: [17] <author> P. Inverardi, A.L. Wolf, and D. Yankelevich. </author> <title> Checking Assumptions in Component Dynamics at the Architectural Level. </title> <booktitle> In Proceedings of the Second International Conference on Coordination Models and Languages, number 1282 in Lecture Notes in Computer Science, </booktitle> <pages> pages 46-63, </pages> <address> New York, New York, </address> <month> September </month> <year> 1997. </year> <note> Springer-Verlag. </note>
Reference-contexts: Improved reuse can then be achieved because a design and its implementation are reused jointly, as opposed to the reuse of just a set of source files. As techniques to uncover architectural mismatch mature <ref> [17] </ref>, the compatibility of a reusable component with a set of already selected components can be assessed at a higher level. 3 A Comparison of Existing System Models The construction of a unified system model should build upon the lessons learned from the system models that have been developed to date. <p> A stronger, behavioral type of consistency is achieved by Wright [2] and CHAM <ref> [17] </ref>. Both ADLs formally define architectures. Inconsistencies in an architecture are uncovered by carrying out analyses on its formal definition. Architectural mismatches, such as competing threads of control, have been uncovered this way [7].
Reference: [18] <author> C.T. Karamanolis and J.N. Magee. </author> <title> A Replication Protocol to Support Dynamically Configurable Groups of Servers. </title> <booktitle> In Proceedings of the Third International Conference on Configurable Distributed Systems, </booktitle> <pages> pages 161-168, </pages> <address> Los Alamitos, California, May 1996. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: It is important to note that system modeling in the configurable distributed systems discipline is still in its infancy. A variety of techniques are currently being developed that simply have not matured into system model capabilities as of yet. For example, advanced replication <ref> [18] </ref> and internal reconfiguration [31] are in fact available as individual techniques, but none of the system models incorporate primitives that capture these notions. 3.6 Comparison Summary To summarize our comparison, we revisit Table 1.
Reference: [19] <author> J. Kramer and J. Purtilo, </author> <title> editors. </title> <booktitle> Proceedings of the Second International Workshop on Configurable Distributed Systems, </booktitle> <address> Los Alamitos, California, March 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Although a variety of tools and techniques have been developed <ref> [19, 25] </ref>, few formally defined system models exist at this time. Even the ones that do exist [1, 15, 24] do not yet address the full breadth of problems that have been identified.
Reference: [20] <author> D.B. Leblang, R.P. Chase, Jr., and H. Spilke. </author> <title> Increasing Productivity with a Parallel Configuration Manager. </title> <booktitle> In Proceedings of the International Workshop on Software Versioning and Configuration Control, </booktitle> <pages> pages 144-158, </pages> <year> 1988. </year>
Reference-contexts: Some of these focus on the construction of a system out of a set of individual source files [6, 12]. Others are concerned with the management of versions and configurations of source files <ref> [20, 26] </ref>. Only recently, the two have been combined into unified system models that not only address versioning and construction, but also raise the level of abstraction from source files to system-level components [11, 21, 41].
Reference: [21] <author> Y.-J. Lin and S.P. Reiss. </author> <title> Configuration Management with Logical Structures. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering, </booktitle> <pages> pages 298-307. </pages> <institution> Association for Computer Machinery, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: Others are concerned with the management of versions and configurations of source files [20, 26]. Only recently, the two have been combined into unified system models that not only address versioning and construction, but also raise the level of abstraction from source files to system-level components <ref> [11, 21, 41] </ref>. To illustrate the strengths and weaknesses of a typical system model developed by the config 9 uration management discipline, Figure 3 presents a revised version of our optimization example that is modeled in the PCL system modeling language [41].
Reference: [22] <author> D.C. Luckham, J.J. Kenney, L.M. Augustin, J. Vera, D. Bryan, and W. Mann. </author> <title> Specification and Analysis of System Architecture Using Rapide. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4) </volume> <pages> 336-355, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Combined with the architecture-level connections among components, the specification of the interaction behavior of all components results in a completely specified system on which important analyses can be carried out. For example, the Rapide tool set contains tools that simulate an architecture to uncover such architectural faults as deadlock <ref> [22] </ref>. We now turn our attention to the comparison dimensions we describe in Section 3.2 and the rankings given to software architecture in Table 1.
Reference: [23] <author> D.C. Luckham and J. Vera. </author> <title> An Event-Based Architecture Definition Language. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(9) </volume> <pages> 717-734, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: In particular, ADLs partition a system into individual components, describe the behavior of each component, and model the interconnections among the components. Figure 2 illustrates this focus of ADLs with an example architecture that is modeled in the Rapide <ref> [23] </ref> architecture description language. Shown are two components of the example system discussed in Section 3.1, a component that evaluates the function at a particular point in its domain, ComplexFunction, and a component that performs an optimization algorithm, Optimizer. <p> Internal dynamism, on the other hand, is the ability to create and destroy components from within the system model. Both external and internal dynamism are present in ADLs. Most notably, C2 [40] supports external dynamism through its ArchShell [27] environment, whereas internal dynamism is supported by Rapide <ref> [23] </ref> and CHAM [16]. In either case, though, support is limited because the system model itself provides no constructs to support the architectural changes with guidelines and constraints. <p> We are therefore carrying out a series of experiments in which we examine the ramifications of combining certain system modeling capabilities. In this section, we present two such experiments. We have examined how versioning and selection capabilities could be added to Rapide <ref> [23] </ref>. Below, we illustrate how such an addition can be achieved by integrating two different techniques with the language. We first illustrate how PCL attributes can be used to model and select variants of components.
Reference: [24] <author> J. Magee, N. Dulay, S. Eisenbach, and J. Kramer. </author> <title> Specifying Distributed Software Architectures. </title> <booktitle> In Proceedings of the Fifth European Software Engineering Conference, number 989 in Lecture Notes in Computer Science, </booktitle> <pages> pages 137-153, </pages> <address> New York, New York, </address> <month> September </month> <year> 1995. </year> <note> Springer-Verlag. </note>
Reference-contexts: Although a variety of tools and techniques have been developed [19, 25], few formally defined system models exist at this time. Even the ones that do exist <ref> [1, 15, 24] </ref> do not yet address the full breadth of problems that have been identified. Perhaps the most advanced system model to emerge from the configurable distributed systems area to date is Darwin [24]. We therefore use Darwin to model the configurable and distributed aspects of our optimization example. <p> Even the ones that do exist [1, 15, 24] do not yet address the full breadth of problems that have been identified. Perhaps the most advanced system model to emerge from the configurable distributed systems area to date is Darwin <ref> [24] </ref>. We therefore use Darwin to model the configurable and distributed aspects of our optimization example. Figure 4 illustrates the resulting specification. All four components that are described in Section 3.1 are modeled, but central to this example is the Scheduler component.
Reference: [25] <author> J.N. Magee and K. Schwan, </author> <title> editors. </title> <booktitle> Proceedings of the Third International Conference on Configurable Distributed Systems, </booktitle> <address> Los Alamitos, California, May 1996. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Although a variety of tools and techniques have been developed <ref> [19, 25] </ref>, few formally defined system models exist at this time. Even the ones that do exist [1, 15, 24] do not yet address the full breadth of problems that have been identified.
Reference: [26] <author> K. Marzullo and D. Wiebe. </author> <title> A Software System Modelling Facility. </title> <booktitle> In Proceedings of the ACM SIG-SOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments. ACM SIGSOFT, </booktitle> <month> April </month> <year> 1984. </year>
Reference-contexts: Some of these focus on the construction of a system out of a set of individual source files [6, 12]. Others are concerned with the management of versions and configurations of source files <ref> [20, 26] </ref>. Only recently, the two have been combined into unified system models that not only address versioning and construction, but also raise the level of abstraction from source files to system-level components [11, 21, 41].
Reference: [27] <author> N. Medvidovic. </author> <title> ADLs and Dynamic Architecture Changes. </title> <editor> In L. Vidal, A. Finkelstein, G. Spanoudakis, and A.L. Wolf, editors, </editor> <booktitle> Joint Proceedings of the SIGSOFT '96 Workshops, </booktitle> <pages> pages 24-27, </pages> <address> New York, New York, 1996. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Internal dynamism, on the other hand, is the ability to create and destroy components from within the system model. Both external and internal dynamism are present in ADLs. Most notably, C2 [40] supports external dynamism through its ArchShell <ref> [27] </ref> environment, whereas internal dynamism is supported by Rapide [23] and CHAM [16]. In either case, though, support is limited because the system model itself provides no constructs to support the architectural changes with guidelines and constraints.
Reference: [28] <author> N. Medvidovic and R.N. Taylor. </author> <title> A Framework for Classifying and Comparing Architecture Description Languages. </title> <booktitle> In Proceedings of the Sixth European Software Engineering Conference, number 1301 in Lecture Notes in Computer Science, </booktitle> <pages> pages 60-76, </pages> <address> New York, New York, </address> <month> September </month> <year> 1997. </year> <note> Springer-Verlag. </note>
Reference-contexts: This focus is shared by other ADLs, which is illustrated by a recent survey of existing ADLs <ref> [28] </ref>. The survey uses several key characteristics of components, connectors, 1 and configurations as its comparison dimensions.
Reference: [29] <author> D. Le Metayer. </author> <title> Software Architecture Styles as Graph Grammers. </title> <booktitle> In Proceedings of the Fourth ACM SIGSOFT Symposium on the Foundations of Software Engineering, SIGSOFT Software Engineering Notes, </booktitle> <pages> pages 15-23. </pages> <institution> Association for Computer Machinery, </institution> <month> November </month> <year> 1996. </year> <month> 22 </month>
Reference-contexts: It is not possible, for example, to specify in the system model what particular topology needs to be maintained while an architecture is being modified. The graph grammar approach developed by Le Metayer <ref> [29] </ref> addresses this problem and provides a means for constraining the topology of a system. As an inherent part of a system architecture, a coordination component is modeled.
Reference: [30] <author> J. Micallef and G.M. Clemm. </author> <title> The Asgard System: Activity-Based Configuration Management. </title> <booktitle> In Proceedings of the Sixth International Workshop on Software Configuration Management, number 1167 in Lecture Notes in Computer Science, </booktitle> <pages> pages 175-186, </pages> <address> New York, New York, 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Therefore, change sets cannot be based solely on the baseline of a system, but also on arbitrary combinations of the baseline and a collection of change sets. Techniques have been developed <ref> [30] </ref> that keep track of the dependencies among change sets and are therefore capable of assuring the inclusion of the correct change sets when a particular system is selected. Additionally, a new baseline can be designated that consists of the old baseline combined with a collection of change sets.
Reference: [31] <author> N.H. Minsky, V. Ungureanu, W. Wang, and J. Zhang. </author> <title> Building Reconfiguration Primitives into the Law of a System. </title> <booktitle> In Proceedings of the Third International Conference on Configurable Distributed Systems, </booktitle> <pages> pages 89-97, </pages> <address> Los Alamitos, California, May 1996. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: It is important to note that system modeling in the configurable distributed systems discipline is still in its infancy. A variety of techniques are currently being developed that simply have not matured into system model capabilities as of yet. For example, advanced replication [18] and internal reconfiguration <ref> [31] </ref> are in fact available as individual techniques, but none of the system models incorporate primitives that capture these notions. 3.6 Comparison Summary To summarize our comparison, we revisit Table 1.
Reference: [32] <author> G.C. Murphy. </author> <title> Architecture for Evolution. </title> <editor> In L. Vidal, A. Finkelstein, G. Spanoudakis, and A.L. Wolf, editors, </editor> <booktitle> Joint Proceedings of the SIGSOFT '96 Workshops, </booktitle> <pages> pages 83-86, </pages> <address> New York, New York, 1996. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Several corrective approaches have been proposed that rediscover an architecture from an implementation <ref> [13, 32] </ref>, but these solutions provide only a snapshot in time of the mapping between a 2 software architecture and its implementation.
Reference: [33] <author> K. Ng, J. Kramer, and J. Magee. </author> <title> A CASE Tool for Software Architecture Design. </title> <journal> Journal of Automated Software Engineering, </journal> 3(3/4):261-284, August 1996. 
Reference-contexts: Despite this problem, support for dynamism in the configurable distributed systems discipline is well established. Both internal dynamism, as illustrated in the example, and external dynamism are 14 supported. External dynamism is, for instance, supported by some of the support environments of Darwin <ref> [9, 33] </ref>. These environments allow a user to dynamically reconfigure a system while it is executing. The other comparison dimensions are supported in a limited fashion. Only a few attempts to support these dimensions have been made so far.
Reference: [34] <author> D.E. Perry. </author> <title> System Compositions and Shared Dependencies. </title> <booktitle> In Proceedings of the Sixth International Workshop on Software Configuration Management, number 1167 in Lecture Notes in Computer Science, </booktitle> <pages> pages 139-153, </pages> <address> New York, New York, 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: However, when arbitrary components are selected to be combined in a new configuration, potential inconsistencies are not revealed by the information that is modeled. The typing mechanism of Adele [11] and the interface specifications introduced by Perry <ref> [34] </ref> provide some improvement, but behavioral consistency cannot be achieved since both are static in nature. The next three comparison dimensions, construction, versioning, and selection, are at the heart 2 PCL includes a set of standard, extensible derivation rules that are part of its system modeling capabilities.
Reference: [35] <author> D.E. Perry and A.L. Wolf. </author> <title> Foundations for the Study of Software Architecture. </title> <booktitle> SIGSOFT Software Engineering Notes, </booktitle> <volume> 17(4) </volume> <pages> 40-52, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: reducing effort. 2.2 Reduced Architectural Erosion One of the main problems identified in the software architecture literature is architectural erosion: once the conceptual architecture of a system has been created, it becomes out of date with respect to the actual architecture that is embedded in the implementation of the system <ref> [35] </ref>. Several corrective approaches have been proposed that rediscover an architecture from an implementation [13, 32], but these solutions provide only a snapshot in time of the mapping between a 2 software architecture and its implementation.
Reference: [36] <author> M. Shaw, R. DeLine, D.V. Klein, T.L. Ross, D.M. Young, and G. Zelesnik. </author> <title> Abstractions for Software Architecture and Tools to Support Them. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4) </volume> <pages> 314-335, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: For example, C2 [40], an architecture description language, has recently begun to incorporate dynamism, which until now was addressed exclusively by configurable distributed systems research. As another example, UniCon <ref> [36] </ref>, an architecture description language, includes a build facility similar to the build utilities created by the configuration management discipline. Finally, Darwin, a language to describe configurable distributed systems, has started to incorporate certain features commonly found in ADLs, such as, for example, interface types. <p> Versioning and selection are not addressed at all; version control and the selection of components that constitute a configuration both have to be carried out by hand without any guidance from an architectural system model. UniCon <ref> [36] </ref> seems to be an exception because its system model supports variant implementations of components. However, UniCon does not allow for versions of the actual compositional constructs, such as, for example, components, interfaces, or types; versioning is only supported at the implementation level, not at the architectural level.
Reference: [37] <institution> Software Maintenance & Development Systems, Inc, Concord, Massachusetts. Aide de Camp Product Overview, </institution> <month> September </month> <year> 1994. </year>
Reference-contexts: We believe that these concepts need to be carried over into a unified system model to fully incorporate the essence of configuration management. * Change sets. A rather different approach to modeling system configurations is the change-set approach <ref> [37, 42] </ref>. As opposed to managing versions of components, change sets model changes as first-class entities. Changes can be simple modifications to a single component, but can also be complex modifications having a system-wide impact. <p> Although most merging algorithms are capable of uncovering a conflict, they require manual assistance in resolving the conflict [4]. For the management of source code by configuration management systems that are based on change-set technology, this has not been a problem because conflicts arise only occasionally <ref> [37] </ref>. It remains to be seen whether this also holds for unified system models or whether it turns out that conflicts arise too often for change sets to be practical in this domain. In the example of Figure 6, both change sets are based on the baseline of the system.
Reference: [38] <editor> I. Sommerville, editor. </editor> <booktitle> Proceedings of the Sixth International Workshop on Software Configuration Management, number 1167 in Lecture Notes in Computer Science, </booktitle> <address> New York, New York, March 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Advanced techniques and modeling capabilities have been developed over the years <ref> [8, 10, 38] </ref> of which the example has highlighted the essential contributions. However, two additional concepts deserve special mention. * Variants and revisions. Our example contains two versions of an optimization algorithm: the Optimizer component and the FastOptimizer component.
Reference: [39] <author> J.A. Stafford, D.J. Richardson, and A.L. Wolf. </author> <title> Chaining: A Software Architecture Dependence Analysis Technique. </title> <type> Technical Report CU-CS-845-97, </type> <institution> Department of Computer Science, University of Colorado, Boulder, Colorado, </institution> <month> September </month> <year> 1997. </year>
Reference-contexts: The configuration management discipline is not only concerned with versioning; change impact analysis and system construction are two other areas of interest that could benefit from a rise in abstraction level. In particular, applying architectural dependence analysis techniques <ref> [39] </ref> on a shared system model enables change impact analysis at the component level as opposed to the source-code level.
Reference: [40] <author> R.N. Taylor, N. Medvidovic, K.M. Anderson, E.J. Whitehead, Jr., J.E. Robbins, K.A. Nies, P. Oreizy, and D.L. Dubrow. </author> <title> A Component- and Message-Based Architectural Style for GUI Software. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 22(6) </volume> <pages> 390-406, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: More evidence is provided when we examine some of the contributions in each field and realize that they are crossing the implicit boundaries that have existed among the disciplines. For example, C2 <ref> [40] </ref>, an architecture description language, has recently begun to incorporate dynamism, which until now was addressed exclusively by configurable distributed systems research. As another example, UniCon [36], an architecture description language, includes a build facility similar to the build utilities created by the configuration management discipline. <p> External dynamism is the ability to dynamically reconfigure a system through some external support environment. Internal dynamism, on the other hand, is the ability to create and destroy components from within the system model. Both external and internal dynamism are present in ADLs. Most notably, C2 <ref> [40] </ref> supports external dynamism through its ArchShell [27] environment, whereas internal dynamism is supported by Rapide [23] and CHAM [16]. In either case, though, support is limited because the system model itself provides no constructs to support the architectural changes with guidelines and constraints.
Reference: [41] <author> E. Tryggeseth, B. Gulla, and R. Conradi. </author> <title> Modelling Systems with Variability using the PROTEUS Configuration Language. In Software Configuration Management: </title> <booktitle> ICSE SCM-4 and SCM-5 Workshops Selected Papers, number 1005 in Lecture Notes in Computer Science, </booktitle> <pages> pages 216-240, </pages> <address> New York, New York, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Others are concerned with the management of versions and configurations of source files [20, 26]. Only recently, the two have been combined into unified system models that not only address versioning and construction, but also raise the level of abstraction from source files to system-level components <ref> [11, 21, 41] </ref>. To illustrate the strengths and weaknesses of a typical system model developed by the config 9 uration management discipline, Figure 3 presents a revised version of our optimization example that is modeled in the PCL system modeling language [41]. <p> To illustrate the strengths and weaknesses of a typical system model developed by the config 9 uration management discipline, Figure 3 presents a revised version of our optimization example that is modeled in the PCL system modeling language <ref> [41] </ref>. Compared to the previous version in Figure 2, one additional component (or family in PCL terminology) has been introduced: the FastOptimizer component carries out an optimization in less time than the regular Optimizer component, but sacrifices precision to gain the time benefit. <p> We subsequently illustrate how 15 architectural changes can be modeled using change-set technology. 4.1 Architectural Versioning and Selection through Attributes A straightforward way of adding versioning and selection to Rapide is to adopt the attribute mechanism used by PCL <ref> [41] </ref>. In Figure 5 we have remodeled the optimization example of Figure 3 in Rapide while retaining the attributes of PCL. For each component, its required and provided functionalities, its behavior, and a set of descriptive attributes are modeled.
Reference: [42] <author> D. Wiborg Weber. </author> <title> Change Sets Versus Change Packages: Comparing Implementations of Change-Based SCM. </title> <booktitle> In Proceedings of the Seventh International Workshop on Software Configuration Management, number 1235 in Lecture Notes in Computer Science, </booktitle> <pages> pages 25-35, </pages> <address> New York, New York, 1997. </address> <publisher> Springer-Verlag. </publisher> <pages> 23 </pages>
Reference-contexts: We believe that these concepts need to be carried over into a unified system model to fully incorporate the essence of configuration management. * Change sets. A rather different approach to modeling system configurations is the change-set approach <ref> [37, 42] </ref>. As opposed to managing versions of components, change sets model changes as first-class entities. Changes can be simple modifications to a single component, but can also be complex modifications having a system-wide impact.
References-found: 42

