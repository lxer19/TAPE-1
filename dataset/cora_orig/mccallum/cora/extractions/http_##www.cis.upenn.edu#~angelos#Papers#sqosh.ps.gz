URL: http://www.cis.upenn.edu/~angelos/Papers/sqosh.ps.gz
Refering-URL: http://www.cis.upenn.edu/~switchware/home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Secure Quality of Service Handling (SQoSH)  
Author: D. Scott Alexander, William A. Arbaugh, Angelos D. Keromytis, Steve Muir and Jonathan M. Smith 
Abstract: Proposals for programmable network infrastructures, such as Active Networks and Open Signaling, provide programmers with access to network resources and data structures. The motivation for providing these interfaces is accelerated introduction of new services, but exposure of the interfaces introduces many new security risks. The risks can be reduced or eliminated via appropriate restrictions on the exported interfaces, as we demonstrate in our Secure Active Network Environment (SANE). SANE restricts the actions that loaded modules (including capsules) can perform by restricting the resources that can be named; this model is extended to remote invocation by means of cryptographic certificates. We have extended SANE to support restricted control of Quality of Service in a programmable network element. The Piglet lightweight device kernel provides a virtual clock-like scheduling discipline for network traffic, and exports several tuning knobs with which the clock can be adjusted. The ALIEN active loader provides safe access to these knobs to modules which operate on the network element. Thus, the SQoSH architecture is able to provide safe, secure access to network resources, while allowing these resources to be managed by end users needing customized networking services. A desirable consequence of SQoSH's integration of access control and resource control is that a large class of denial of service attacks, unaddressed solely with access control and cryptographic protocols, can now be prevented. We provide some performance measurements to illustrate the cost of security, and demonstrate that these costs are minor in the context of managing a multimedia stream. 
Abstract-found: 1
Intro-found: 1
Reference: [AAH + 98] <author> D. S. Alexander, W. A. Arbaugh, M. Hicks, P. Kakkar, A. D. Keromytis, J. T. Moore, C. A. Gunter, S. M. Nettles, and J. M. Smith. </author> <title> The switchware active net-work architecture. </title> <journal> IEEE Network Magazine, special issue on Active and Programmable Networks, </journal> <year> 1998. </year>
Reference-contexts: We view this scheme as one where expensive static checks are traded for cheaper dynamic checks. Thus, the SQoSH architecture echos similar design decisions made in restricting programmability to the control plane [vdML97, LBL95] and similar, although not equivalent decisons made in the overall SwitchWare architecture <ref> [AAH + 98] </ref> and its components such as SANE [AAKS98] (See Section 5, below). This division of functions into admission/authentication and policing/provision is the approach we have chosen for SQoSH. Figure 1 illustrates the SQoSH architecture at a high level.
Reference: [AAKS98] <author> D. Scott Alexander, William A. Arbaugh, Angelos D. Keromytis, and Jonathan M. Smith. </author> <title> A Secure Active Network Environment Architecture. </title> <journal> IEEE Network, </journal> <month> August </month> <year> 1998. </year>
Reference-contexts: For commercial applications this might be considered wasteful, while military uses might dictate provision of such a no-delay override facility. 1.6 Paper Overview The rest of the paper begins with descriptions of the Penn/Bellcore SwitchWare [SFG + 96] project and the Secure Active Network Environment (SANE <ref> [AAKS98] </ref>). The SANE infrastructure provides security guarantees to the network elements and overlaid services. Additional security services can be built on top of SANE, using the existing primitives. <p> Thus, the SQoSH architecture echos similar design decisions made in restricting programmability to the control plane [vdML97, LBL95] and similar, although not equivalent decisons made in the overall SwitchWare architecture [AAH + 98] and its components such as SANE <ref> [AAKS98] </ref> (See Section 5, below). This division of functions into admission/authentication and policing/provision is the approach we have chosen for SQoSH. Figure 1 illustrates the SQoSH architecture at a high level. The SANE system is the only means of access to resource management interfaces provided by Piglet (see Section 6). <p> SANE provides a decentralized mechanism for resource naming that does not allow name collisions (accidental or malicious). It does this by generating the name of a dynamic resource from the cryptographic credentials used to authenticate/authorize it. This prevents trojan horse type of attacks. See <ref> [AAKS98] </ref> for more details. 5 Implementation and Performance of SANE We have implemented SANE in the SwitchWare environment. For our experimental network we used a cluster of DEC Alpha PC 164SX machines, with 533MHz processors and 64MB memory each, connected via 100Mbit switched Ethernet. <p> An unauthenticated ping took an average of 5.084 ms versus 8.052 ms for the authenticated ping. As described in <ref> [AAKS98] </ref>, we believe that these numbers can be improved by changes to the Caml runtime system. In particular, caching of switchlets, improvements to the thread scheduler, and improvements to the thread linker could help with this performance.
Reference: [ABG + 97] <author> D. Scott Alexander, Bob Braden, Carl A. Gunter, Alden W. Jackson, Ange-los D. Keromytis, Gary J. Minden, and David Wether-all. </author> <title> Active network encapsulation protocol (anep). </title> <note> http://www.cis.upenn.edu/angelos/ANEP.txt.gz, August 1997. </note>
Reference-contexts: In SANE, we use the ANEP <ref> [ABG + 97] </ref> packet format over UDP, although in a homogenous active network a packet format would be unnecessary. We've added an authentication header, as shown in Figure 3, similar to the one used in the IPsec Authentication Header protocol [Atk95a].
Reference: [AFS97] <author> William A. Arbaugh, David J. Farber, and Jonathan M. Smith. </author> <title> A Secure and Reliable Bootstrap Architecture. </title> <booktitle> In Proceedings 1997 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 6571, </pages> <month> May </month> <year> 1997. </year>
Reference-contexts: The nature of this trust is outside the scope of AEGIS. Other work on the subject of secure system bootstrapping includes [TY91, Yee94, Cla94, LAB92]. A more extensive review of AEGIS and its differences with the above systems can be found in <ref> [AFS97] </ref>. 4.2 Cryptographic Primitives SANE provides access to various cryptographic primitives. These can be used by other applications as-is or as building blocks for more complex protocols.
Reference: [AKFS98] <author> William A. Arbaugh, Angelos D. Keromytis, David J. Farber, and Jonathan M. Smith. </author> <title> Automated Recovery in a Secure Bootstrap Process. In Network and Distributed System Security Symposium. </title> <booktitle> Internet Society, </booktitle> <month> March </month> <year> 1998. </year>
Reference-contexts: The SANE infrastructure provides security guarantees to the network elements and overlaid services. Additional security services can be built on top of SANE, using the existing primitives. These primitives include secure bootstrapping using the AEGIS architecture <ref> [AKFS98] </ref>; key exchange; authentication and identification of network entities; packet confidentiality; integrity and resource and access control; and namespace protection. Section 2 describes the SQoSH architecture and principles. Section 5 presents the current status of the implementation with some experiments and performance results. <p> This is accomplished by having each party send the other both an authentication certificate and an authorization certificate and using Diffie-Hellman key exchange to establish the shared secret. The protocol is carried out with a total of three messages transmitted. For more details on the protocol, see <ref> [AKFS98] </ref>. A node that has detected an integrity failure can establish this secure channel with a repository. It can then request a new version of the failed component. The repository will send the new component protected by the shared key to prevent tampering from an attacker.
Reference: [ASNS97] <author> D. S. Alexander, M. Shaw, S. M. Nettles, and J. M Smith. </author> <title> Active bridging. </title> <booktitle> In Proc. 1997 ACM SIG-COMM Conference, </booktitle> <year> 1997. </year>
Reference-contexts: Open signaling systems, such as DCAN [vdML97] or XBind [LBL95], restrict the programmability to the control plane. Operational active networking infrastructures have been produced by several initial efforts, such as Active Bridging <ref> [ASNS97] </ref>, ANTS [WGT98] and PLAN [HKM + 98]. These efforts are points in a design space which has many dimensions, the most important of which are flexibility, security, usability and performance. Programmable network elements provide flexibility and usability via the choice of programming language and execution environment.
Reference: [Atk95a] <author> R. Atkinson. </author> <title> IP authentication header. </title> <type> RFC 1826, </type> <month> August </month> <year> 1995. </year>
Reference-contexts: In SANE, we use the ANEP [ABG + 97] packet format over UDP, although in a homogenous active network a packet format would be unnecessary. We've added an authentication header, as shown in Figure 3, similar to the one used in the IPsec Authentication Header protocol <ref> [Atk95a] </ref>. The SP I is negotiated during the key establishment protocol exchange, and is used to identify the security association and corresponding cryptographic material used. The Replay Counter is a monotonically increasing value, used to prevent packet replay attacks.
Reference: [Atk95b] <author> R. Atkinson. </author> <title> IP encapsulating security payload. </title> <type> RFC 1827, </type> <month> August </month> <year> 1995. </year>
Reference-contexts: The Replay Counter is a monotonically increasing value, used to prevent packet replay attacks. The authenticator is the keyed hash (HMAC [KBC97]) computed over the SP I, replaycounter and packet payload. We can similarly define an encryption header similar to the IPsec ESP <ref> [Atk95b] </ref> protocol. 4.6 Link Keys When a SANE node boots, it attempts to establish shared keys with each of its neighbors. It does this by running the key establishment protocol already described. In the process, the identity of the neighbors is also verified.
Reference: [Atk95c] <author> R. Atkinson. </author> <title> Security architecture for the internet protocol. </title> <type> RFC 1825, </type> <month> August </month> <year> 1995. </year>
Reference-contexts: Even if IP [Pos81] option processing is needed, the CPU overhead is still quite small compared to the cost of executing an active packet. In such an environment, strict resource control in the intermediate routers was considered non-critical. Thus, security policies <ref> [Atk95c] </ref> are enforced end-to-end. While this approach has worked well in the past, there are several problems. First, denial of service attacks are relatively easy to mount, due to this simple resource model. Attacks to the infrastructure itself are possible, and result in major network connectivity loss.
Reference: [BBDS97] <author> R. Black, P. Barham, A. Donnelly, and N. Stratford. </author> <title> Protocol implementation in a vertically structured operating system. </title> <booktitle> In Proc. 22nd Annual Conference on Local Computer Networks, </booktitle> <year> 1997. </year>
Reference-contexts: SANE provides more general mechanisms and could thus be specialized to such an application (moving memory-protected objects about the network) but more importantly guarantees local integrity before extending itself into the network. 8.3 SQoSH and other environments The Cambridge University Nemesis <ref> [BBDS97] </ref> operating system has considerable potential for supporting SQoSH functionality, as its single-layer multiplexing model can be readily adapted to the SQoSH policing requirements. Using the SANE architecture, Nemesis could be enhanced with automated scheduling domain setup and adjustment to service Active Network needs.
Reference: [BFK98] <author> M. Blaze, J. Feigenbaum, and A. D. Keromytis. </author> <title> The keynote trust-management system, </title> <month> April </month> <year> 1998. </year>
Reference-contexts: Certain features, such as selective authorization delegation, user defined authorizations and certificate revocation through expiration are desirable, but they can be simulated in any of they proposed public key infrastructures. In our environment, we intend to use a combination of SPKI [EFRT97] and PolicyMaker [BFL96] or KeyNote <ref> [BFK98] </ref>. For more details on the certificate format, see Section 5. 4.4 Key Establishment Protocol (KEP) The protocol we use throughout this paper and in our architecture is based on the Station to Station protocol [DvOW92].
Reference: [BFL96] <author> M. Blaze, J. Feigenbaum, and J. Lacy. </author> <title> Decentralized trust management. </title> <booktitle> In Proc. of the 17th Symposium on Security and Privacy, </booktitle> <pages> pages 164173. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year> <note> [BZB + 97] R. </note> <author> Braden, L. Zhang, S. Berson, S. Herzog, and S. Jamin. </author> <title> Resource ReSerVation protocol (RSVP) version 1 functional sepcification. Internet RFC 2208, </title> <year> 1997. </year>
Reference-contexts: Certain features, such as selective authorization delegation, user defined authorizations and certificate revocation through expiration are desirable, but they can be simulated in any of they proposed public key infrastructures. In our environment, we intend to use a combination of SPKI [EFRT97] and PolicyMaker <ref> [BFL96] </ref> or KeyNote [BFK98]. For more details on the certificate format, see Section 5. 4.4 Key Establishment Protocol (KEP) The protocol we use throughout this paper and in our architecture is based on the Station to Station protocol [DvOW92].
Reference: [Cla94] <author> Paul Christopher Clark. </author> <title> BITS: A Smartcard Protected Operating System. </title> <type> PhD thesis, </type> <institution> George Washington University, </institution> <year> 1994. </year>
Reference-contexts: The goal of AEGIS is to prevent tampering of components that are considered trusted by the system administrator. The nature of this trust is outside the scope of AEGIS. Other work on the subject of secure system bootstrapping includes <ref> [TY91, Yee94, Cla94, LAB92] </ref>. A more extensive review of AEGIS and its differences with the above systems can be found in [AFS97]. 4.2 Cryptographic Primitives SANE provides access to various cryptographic primitives. These can be used by other applications as-is or as building blocks for more complex protocols.
Reference: [Com89] <author> Consultation Committee. </author> <title> X.509: The Directory Authentication Framework. International Telephone and Telegraph, International Telecommunications Union, </title> <address> Geneva, </address> <year> 1989. </year>
Reference-contexts: These same keys are also used to certify users and specify their access rights on the active nodes. It is only a matter of policy however what sort of certificate method is followed. A cyclic graph-type (such as in PGP) or a hierarchical approach (such as in X.509 <ref> [Com89] </ref>) or any other method can be used.
Reference: [DH76] <author> W. Diffie and M.E. Hellman. </author> <title> New Directions in Cryptography. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> IT22(6):644654, </volume> <month> Nov </month> <year> 1976. </year>
Reference-contexts: For more details on the certificate format, see Section 5. 4.4 Key Establishment Protocol (KEP) The protocol we use throughout this paper and in our architecture is based on the Station to Station protocol [DvOW92]. The basis of the protocol is the Diffie-Hellman exchange <ref> [DH76] </ref> for key establishment, and public key signatures for authentication (to avoid man-in-the-middle attacks). In our architecture we use DSA (a NIST-approved digital signature algorithm), but other (e.g., RSA [Lab93] etc.) algorithms can be used.
Reference: [dP91] <author> Martin de Prycker. </author> <title> Asynchronous Transfer Mode. </title> <publisher> El-lis Horwood, </publisher> <year> 1991. </year>
Reference-contexts: Much of the early work was stimulated by the promise of Asynchronous Transfer Mode (ATM) networks <ref> [dP91] </ref>. The demand for these services was stimulated by multimedia traffic [PS95]. <p> This research program resulted in the RSVP [BZB + 97] proposal for signaling resource reservations to network elements by endpoints. Neither ATM signaling protocols (e.g., Q.2931 or UNI 3.1) <ref> [dP91] </ref> nor RSVP [BZB + 97] provide the integrated admission control and policing of SQoSH.
Reference: [DvOW92] <author> W. Diffie, P.C. van Oorschot, and M.J. Wiener. </author> <title> Authentication and Authenticated Key Exchanges. Designs, Codes and Cryptography, </title> <address> 2:107125, </address> <year> 1992. </year>
Reference-contexts: For more details on the certificate format, see Section 5. 4.4 Key Establishment Protocol (KEP) The protocol we use throughout this paper and in our architecture is based on the Station to Station protocol <ref> [DvOW92] </ref>. The basis of the protocol is the Diffie-Hellman exchange [DH76] for key establishment, and public key signatures for authentication (to avoid man-in-the-middle attacks). In our architecture we use DSA (a NIST-approved digital signature algorithm), but other (e.g., RSA [Lab93] etc.) algorithms can be used.
Reference: [EFRT97] <author> Carl M. Ellison, Bill Frantz, Ron Rivest, and Brian M. Thomas. </author> <title> Simple Public Key Certificate. </title> <booktitle> Work in Progress, </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: Certain features, such as selective authorization delegation, user defined authorizations and certificate revocation through expiration are desirable, but they can be simulated in any of they proposed public key infrastructures. In our environment, we intend to use a combination of SPKI <ref> [EFRT97] </ref> and PolicyMaker [BFL96] or KeyNote [BFK98]. For more details on the certificate format, see Section 5. 4.4 Key Establishment Protocol (KEP) The protocol we use throughout this paper and in our architecture is based on the Station to Station protocol [DvOW92].
Reference: [GS95] <author> Li Gong and Paul Syverson. </author> <title> Fail-Stop Protocols: An Approach to Designing Secure Protocols. </title> <booktitle> In Proceedings of IFIP DCCA-5, </booktitle> <month> September </month> <year> 1995. </year> <note> [HKM + 98] M. </note> <author> Hicks, P. Kakkar, J. T. Moore, C. A. Gunter, and S. Nettles. </author> <title> Plan: A programming language for active networks. </title> <type> Technical report, </type> <institution> Department of Computer and Information Science, University of Pennsylvania, </institution> <month> February </month> <year> 1998. </year> <note> [HPB + 97] J. </note> <author> Hartman, L. Peterson, A. Bavier, P. Bigot, P. Bridges, B. Montz, R. Piltz, T. Proebsting, and O. Spatscheck. Joust: </author> <title> A platform for communications-oriented liquid software. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Arizona, </institution> <month> November </month> <year> 1997. </year>
Reference-contexts: Compilation techniques such as Just In Time should help narrow this gap in performance. The key exchange protocol was also implemented in Caml The protocol was designed to be fail safe <ref> [GS95] </ref> under all circumstances. In the presence of loosely synchronized clocks, it becomes fail stop (meaning that active attacks, including replays, on the protocol, are always detected). The average execution time of KEP with a 256 bit Diffie-Hellman exponent is 2.4 seconds, and with a 1024 bit exponent, 4.8 seconds.
Reference: [KBC97] <author> H. Krawczyk, M. Bellare, and R. Canetti. </author> <title> HMAC:KeyedHashing for Message Authentication. Internet RFC 2104, </title> <month> February </month> <year> 1997. </year>
Reference-contexts: The SP I is negotiated during the key establishment protocol exchange, and is used to identify the security association and corresponding cryptographic material used. The Replay Counter is a monotonically increasing value, used to prevent packet replay attacks. The authenticator is the keyed hash (HMAC <ref> [KBC97] </ref>) computed over the SP I, replaycounter and packet payload. We can similarly define an encryption header similar to the IPsec ESP [Atk95b] protocol. 4.6 Link Keys When a SANE node boots, it attempts to establish shared keys with each of its neighbors.
Reference: [KBIS98] <author> Angelos D. Keromytis, Matt Blaze, John Ioannidis, and Jonathan M. Smith. </author> <title> Firewalls in active networks. </title> <type> Technical report, </type> <institution> University of Pennsylvania, </institution> <month> Febru-ary </month> <year> 1998. </year>
Reference-contexts: In that respect, any machine at the edge of the domain can act as a firewall. In contrast to the Internet firewalls however, policy can be specified but not enforced at the edges; enforcement of access and resource management policies has to take place in the interior <ref> [KBIS98] </ref>. 4.8 Resource Control Resource control on the active switch is imposed by the runtime system, as specified by the certificates exchanged during key establishment. In SQoSH, these are used to control the behavior of Piglet.
Reference: [KS] <author> P. Karn and W. A. Simpson. </author> <title> The Photuris Session Key Management Protocol. </title> <booktitle> Work in Progress. </booktitle>
Reference-contexts: The average execution time of KEP with a 256 bit Diffie-Hellman exponent is 2.4 seconds, and with a 1024 bit exponent, 4.8 seconds. In both cases we used a 1024 bit modulus. This time is comparable to that of the IPsec key management protocols, Photuris <ref> [KS] </ref> and ISAKMP/Oakley [MSST96]. The certificate infrastructure we used in our setup is a shallow hierarchy. A small number of keys are considered as trusted to make statements about nodes or, more specifically, what the network topology is.
Reference: [LAB92] <author> Butler Lampson, Martin Abadi, and Michael Burrows. </author> <title> Authentication in distributed systems: </title> <journal> Theory and practice. ACM Transactions on Computer Systems, </journal> <volume> v10:265310, </volume> <month> November </month> <year> 1992. </year>
Reference-contexts: The goal of AEGIS is to prevent tampering of components that are considered trusted by the system administrator. The nature of this trust is outside the scope of AEGIS. Other work on the subject of secure system bootstrapping includes <ref> [TY91, Yee94, Cla94, LAB92] </ref>. A more extensive review of AEGIS and its differences with the above systems can be found in [AFS97]. 4.2 Cryptographic Primitives SANE provides access to various cryptographic primitives. These can be used by other applications as-is or as building blocks for more complex protocols.
Reference: [Lab93] <institution> RSA Laboratories. </institution> <note> PKCS #1: RSA Encryption Standard, version 1.5 edition, </note> <year> 1993. </year> <month> November. </month>
Reference-contexts: The basis of the protocol is the Diffie-Hellman exchange [DH76] for key establishment, and public key signatures for authentication (to avoid man-in-the-middle attacks). In our architecture we use DSA (a NIST-approved digital signature algorithm), but other (e.g., RSA <ref> [Lab93] </ref> etc.) algorithms can be used.
Reference: [LBL95] <author> A. A. Lazar, S. Bhonsle, and K.-S. Lim. </author> <title> A binding architecture for multimedia networks. </title> <journal> Journal of Parallel and Dsitributed Computing, </journal> <volume> 30:204216, </volume> <year> 1995. </year>
Reference-contexts: The more aggressive proposals [TSS + 97] share the property that programs are loaded into network elements on-the-fly, providing rapid dynamic reconfiguration of the network infrastructure. Open signaling systems, such as DCAN [vdML97] or XBind <ref> [LBL95] </ref>, restrict the programmability to the control plane. Operational active networking infrastructures have been produced by several initial efforts, such as Active Bridging [ASNS97], ANTS [WGT98] and PLAN [HKM + 98]. <p> We view this scheme as one where expensive static checks are traded for cheaper dynamic checks. Thus, the SQoSH architecture echos similar design decisions made in restricting programmability to the control plane <ref> [vdML97, LBL95] </ref> and similar, although not equivalent decisons made in the overall SwitchWare architecture [AAH + 98] and its components such as SANE [AAKS98] (See Section 5, below). This division of functions into admission/authentication and policing/provision is the approach we have chosen for SQoSH.
Reference: [MMO + 94] <author> A. B. Montz, D. Mosberger, S. W. O'Malley, L. L. Peterson, T. A. Proebsting, and J. H. Hartman. </author> <title> Scout: A communications-oriented operating system. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Arizona, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: Using the SANE architecture, Nemesis could be enhanced with automated scheduling domain setup and adjustment to service Active Network needs. Another system with great potential is the Arizona Scout/Escort <ref> [MMO + 94] </ref> operating system with its support end-to-end resource allocations called paths. Paths, in spirit, are the right idea for end-to-end allocation in an active network.
Reference: [MNSS87] <author> S. P. Miller, B. C. Neuman, J. I. Schiller, and J. H. Saltzer. </author> <title> Kerberos authentication and authorization system. </title> <type> Technical report, </type> <institution> MIT, </institution> <month> December </month> <year> 1987. </year>
Reference-contexts: By taking advantage of the existence of administrative domains, we could make some optimizations: * Once the user has established an SA with some active node in another administrative domain, that node can act as a key distribution server (KDC) similar to Kerberos <ref> [MNSS87] </ref>. * Only nodes at the perimeter of an administrative cloud need verify the cryptographic integrity of packets. They can then specify what the active packet can do in the interior of the domain. In that respect, any machine at the edge of the domain can act as a firewall.
Reference: [MS98] <author> S. J. Muir and J. M. Smith. </author> <title> Functional divisions in the piglet multiprocessor operating system. </title> <booktitle> In SIGOPS European Workshop, </booktitle> <month> September </month> <year> 1998. </year>
Reference-contexts: In the SQoSH architecture those capabilities are provided by Piglet <ref> [MS98] </ref>, a functionally-partitioned network operating system derived from Linux. 6.1 Piglet: Structure and Architecture Piglet is designed around an asymmetric, functionally-partitioned architecture, where system processors are dedicated to particular functions rather than having each processor execute user applications, as is typically the case in a symmetric multiprocessor OS.
Reference: [MSST96] <author> Douglas Maughan, Mark Schertler, Mark Schneider, and Jeff Turner. </author> <title> Internet Security Association and Key Management Protocol (ISAKMP). </title> <type> Internet draft, </type> <institution> IPSEC Working Group, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: The average execution time of KEP with a 256 bit Diffie-Hellman exponent is 2.4 seconds, and with a 1024 bit exponent, 4.8 seconds. In both cases we used a 1024 bit modulus. This time is comparable to that of the IPsec key management protocols, Photuris [KS] and ISAKMP/Oakley <ref> [MSST96] </ref>. The certificate infrastructure we used in our setup is a shallow hierarchy. A small number of keys are considered as trusted to make statements about nodes or, more specifically, what the network topology is.
Reference: [NBS77] <institution> Data Encryption Standard. </institution> <type> Technical Report FIPS-46, U.S. </type> <institution> Department of Commerce, </institution> <month> January </month> <year> 1977. </year>
Reference-contexts: These can be used by other applications as-is or as building blocks for more complex protocols. The services initially provided are: * public key signatures (DSA [NIS94]) * symmetric key encryption (DES <ref> [NBS77] </ref>) * (keyed) hashes (SHA1 [NIS95]) This set of primitives may be enriched in the future. All the algorithms have been implemented in Caml but due to performance degradation, we use a C version of SHA1.
Reference: [NIS94] <institution> Digital Signature Standard. </institution> <type> Technical Report FIPS-186, U.S. </type> <institution> Department of Commerce, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: These can be used by other applications as-is or as building blocks for more complex protocols. The services initially provided are: * public key signatures (DSA <ref> [NIS94] </ref>) * symmetric key encryption (DES [NBS77]) * (keyed) hashes (SHA1 [NIS95]) This set of primitives may be enriched in the future. All the algorithms have been implemented in Caml but due to performance degradation, we use a C version of SHA1.
Reference: [NIS95] <institution> Secure Hash Standard. </institution> <type> Technical Report FIPS-180-1, U.S. </type> <institution> Department of Commerce, </institution> <month> April </month> <year> 1995. </year> <note> Also known as: 59 Fed Reg 35317 (1994). </note>
Reference-contexts: These can be used by other applications as-is or as building blocks for more complex protocols. The services initially provided are: * public key signatures (DSA [NIS94]) * symmetric key encryption (DES [NBS77]) * (keyed) hashes (SHA1 <ref> [NIS95] </ref>) This set of primitives may be enriched in the future. All the algorithms have been implemented in Caml but due to performance degradation, we use a C version of SHA1.
Reference: [Pos80] <author> Jon Postel. </author> <title> User datagram protocol. Internet RFC 768, </title> <year> 1980. </year>
Reference-contexts: Access to the network is provided by the Unixnet and the Safeudp modules. The former provides access to raw Ethernet frames while the latter provides access to the native OS (e.g., Linux) implementation of UDP <ref> [Pos80] </ref>. This allows switchlets to access network interfaces for either sending or receiving frames or packets. Access to the data packets will be available to any switch-let, assuming said switchlet can prove that it has the authority to access the data.
Reference: [Pos81] <author> Jon Postel. </author> <title> INTERNET protocol. Internet RFC 791, </title> <year> 1981. </year>
Reference-contexts: In the latter, the only resource consumed by a packet at a router is the memory needed to temporarily store it and the CPU cycles necessary to find the correct route. Even if IP <ref> [Pos81] </ref> option processing is needed, the CPU overhead is still quite small compared to the cost of executing an active packet. In such an environment, strict resource control in the intermediate routers was considered non-critical. Thus, security policies [Atk95c] are enforced end-to-end.
Reference: [PS95] <author> G. Pacifici and R. Stadler. </author> <title> Integrating resource control and performance management in multimedia networks. </title> <booktitle> Proc. </booktitle> <address> ICC, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Much of the early work was stimulated by the promise of Asynchronous Transfer Mode (ATM) networks [dP91]. The demand for these services was stimulated by multimedia traffic <ref> [PS95] </ref>.
Reference: [Sch96] <author> H. Schulzrinne. </author> <title> The impact of resource reservation for real-time internet services. </title> <booktitle> NRC Wkshp on Information System Trustworthiness, </booktitle> <year> 1996. </year>
Reference-contexts: While such hardware support remains attractive, the signaling software (Q.2931) has proved sufficiently unwieldy that the potential for managed bandwidth remains largely unrealized. The attraction of integrated services did serve, however, to revitalize and stimulate research into integrated services in the IP Internet community <ref> [Sch96] </ref>. This research program resulted in the RSVP [BZB + 97] proposal for signaling resource reservations to network elements by endpoints. Neither ATM signaling protocols (e.g., Q.2931 or UNI 3.1) [dP91] nor RSVP [BZB + 97] provide the integrated admission control and policing of SQoSH.
Reference: [SFG + 96] <author> J. M. Smith, D. J. Farber, C. A. Gunter, S. M Nettles, D. C. Feldmeier, and W. D. Sincoskie. Switch-Ware: </author> <title> Accelerating network evolution. </title> <type> Technical Report MS-CIS-96-38, </type> <institution> CIS Dept. University of Pennsyl-vania, </institution> <year> 1996. </year>
Reference-contexts: For commercial applications this might be considered wasteful, while military uses might dictate provision of such a no-delay override facility. 1.6 Paper Overview The rest of the paper begins with descriptions of the Penn/Bellcore SwitchWare <ref> [SFG + 96] </ref> project and the Secure Active Network Environment (SANE [AAKS98]). The SANE infrastructure provides security guarantees to the network elements and overlaid services. Additional security services can be built on top of SANE, using the existing primitives.
Reference: [SJR86] <author> R. D. Sansom, D. P. Julin, and R. F. Rashid. </author> <title> Extending a capability based system into a network environment. </title> <booktitle> In Proceedings of the 1986 ACM SIGCOMM Conference, </booktitle> <month> August </month> <year> 1986. </year>
Reference-contexts: However, as all enhanced services are added to the node as PLAN extensions, any such extensions would require a SANE-like approach for security. An architecture which extended a protection model from the local domain to a distributed environment was provided by San-som, et al. <ref> [SJR86] </ref>, where protection was enforced locally with memory-protection enforced capabilities. (It is notable that capabilities can be viewed as a namespace-based protection mechanism). The capabilities were extended to remote nodes via cryptographic means.
Reference: [SLS97] <author> Christoph Schuba, Bryan Lyles, and Eugene Spaf-ford. </author> <title> A reference model for firewall technology, </title> <month> Mar. </month> <year> 1997. </year> <note> SPARTAN Symposium. </note>
Reference-contexts: It is presumed that administrative entities are trusted in either system, while policing is delegated; to hardware in the ATM setting and to some lower layer through the Internet Subnet-Specific Layer (ISSLL) in the RSVP case. Some extensions for securing signaling are discussed by Schuba <ref> [SLS97] </ref>.
Reference: [TSS + 97] <author> D. L. Tennenhouse, J. M. Smith, W. D. Sincoskie, D. J. Wetherall, and G. J. Minden. </author> <title> A survey of active network research. </title> <journal> IEEE Communications Magazine, </journal> <pages> pages 8086, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: The more aggressive proposals <ref> [TSS + 97] </ref> share the property that programs are loaded into network elements on-the-fly, providing rapid dynamic reconfiguration of the network infrastructure. Open signaling systems, such as DCAN [vdML97] or XBind [LBL95], restrict the programmability to the control plane. <p> (although we believe them extensible) is that their policing is limited to bandwidth management, rather than the more general resource model inherent in an Active Network. 8.2 Secure Resource Control in Active and Programmable Networks The Secure Active Network Environment has no direct analogues in ongoing work on active networks <ref> [TSS + 97] </ref>. While ANTS uses MD5 hashes (fingerprints) to name on-demand loaded modules, the hashes provide unique names rather than security. The ANTS execution environment depends on the Java programming language for protection, a dependency shared by many active network prototypes.
Reference: [TY91] <author> J.D. Tygar and Bennet Yee. Dyad: </author> <title> A system for using physically secure coprocessors. </title> <type> Technical Report CMUCS91140R, </type> <institution> Carnegie Mellon University, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: The goal of AEGIS is to prevent tampering of components that are considered trusted by the system administrator. The nature of this trust is outside the scope of AEGIS. Other work on the subject of secure system bootstrapping includes <ref> [TY91, Yee94, Cla94, LAB92] </ref>. A more extensive review of AEGIS and its differences with the above systems can be found in [AFS97]. 4.2 Cryptographic Primitives SANE provides access to various cryptographic primitives. These can be used by other applications as-is or as building blocks for more complex protocols.
Reference: [vdML97] <author> J. E. van der Merwe and I. M. Leslie. </author> <title> Switchlets and dynamic virtual ATM networks. </title> <booktitle> In Proc. of the Fifth IFIP/IEEE International Symposium on Integrated Network Management, </booktitle> <address> San Diego, CA., </address> <month> May </month> <year> 1997. </year>
Reference-contexts: The more aggressive proposals [TSS + 97] share the property that programs are loaded into network elements on-the-fly, providing rapid dynamic reconfiguration of the network infrastructure. Open signaling systems, such as DCAN <ref> [vdML97] </ref> or XBind [LBL95], restrict the programmability to the control plane. Operational active networking infrastructures have been produced by several initial efforts, such as Active Bridging [ASNS97], ANTS [WGT98] and PLAN [HKM + 98]. <p> We view this scheme as one where expensive static checks are traded for cheaper dynamic checks. Thus, the SQoSH architecture echos similar design decisions made in restricting programmability to the control plane <ref> [vdML97, LBL95] </ref> and similar, although not equivalent decisons made in the overall SwitchWare architecture [AAH + 98] and its components such as SANE [AAKS98] (See Section 5, below). This division of functions into admission/authentication and policing/provision is the approach we have chosen for SQoSH.
Reference: [WBDF97] <author> Dan S. Wallach, Dirk Balfanz, Drew Dean, and Ed-ward W. Felten. </author> <title> Flexible security architecture for java. </title> <booktitle> In Proceedings of the 16th ACM Symposium on Operating Systems Principles, </booktitle> <month> October </month> <year> 1997. </year>
Reference-contexts: While ANTS uses MD5 hashes (fingerprints) to name on-demand loaded modules, the hashes provide unique names rather than security. The ANTS execution environment depends on the Java programming language for protection, a dependency shared by many active network prototypes. Unfortunately, as Wallach, et al., <ref> [WBDF97] </ref> note, Java's security is suspect. The remote authentication and namespace security of SANE address issues ignored in these systems, and could be applied even in cases where Java is used, e.g., to provide integrity checking of the JVM or layers beneath it, as well as on-demand loaded modules.
Reference: [WGT98] <author> David J. Wetherall, John Guttag, and David L. Ten-nenhouse. </author> <title> Ants: A toolkit for building and dynamically deploying network protocols. </title> <booktitle> In To appear in IEEE OpenArch. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1998. </year>
Reference-contexts: Open signaling systems, such as DCAN [vdML97] or XBind [LBL95], restrict the programmability to the control plane. Operational active networking infrastructures have been produced by several initial efforts, such as Active Bridging [ASNS97], ANTS <ref> [WGT98] </ref> and PLAN [HKM + 98]. These efforts are points in a design space which has many dimensions, the most important of which are flexibility, security, usability and performance. Programmable network elements provide flexibility and usability via the choice of programming language and execution environment.
Reference: [Yee94] <author> Bennet Yee. </author> <title> Using Secure Coprocessors. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1994. </year>
Reference-contexts: The goal of AEGIS is to prevent tampering of components that are considered trusted by the system administrator. The nature of this trust is outside the scope of AEGIS. Other work on the subject of secure system bootstrapping includes <ref> [TY91, Yee94, Cla94, LAB92] </ref>. A more extensive review of AEGIS and its differences with the above systems can be found in [AFS97]. 4.2 Cryptographic Primitives SANE provides access to various cryptographic primitives. These can be used by other applications as-is or as building blocks for more complex protocols.
References-found: 45

