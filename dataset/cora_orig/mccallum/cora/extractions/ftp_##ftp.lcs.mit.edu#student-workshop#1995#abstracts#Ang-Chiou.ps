URL: ftp://ftp.lcs.mit.edu/student-workshop/1995/abstracts/Ang-Chiou.ps
Refering-URL: http://csg-www.lcs.mit.edu:8001/StarT-NG/
Root-URL: 
Title: Finding Deadlocks in Cache-Coherent Distributed Shared Memory Machines Figure 1: An abstract view of a
Author: Boon S. Ang and Derek Chiou 
Abstract: The design of a cache-coherent distributed shared memory (CCDSM) system is complex and prone to errors due to its concurrent, distributed nature. We examine the problem of deadlocks due to resource sharing between different memory requests that are occuring concurrrently, an issue which has not been dealt with extensively in the literature. We discuss a tool for illuminating all possible deadlock scenarios due to resource sharing. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Agarwal et al. </author> <title> The MIT Alewife Machine: A Large-Scale Distributed-Memory Multiprocessor. </title> <booktitle> In Proceedings of Workshop on Scalable Shared Memory Multipro-cesors. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: 1 Introduction A CCDSM system supports cache-coherent global shared memory on distributed-memory multiprocessor hardware. Coherence is maintained in a non-broadcast manner across sites, typically using a directory-based approach. Many research <ref> [6, 5, 1, 4] </ref> and a few commerical [3, 2] CCDSM systems have been built or are being built. Figure 1 shows a typical CCDSM implemention, consisting of processor sites and memory sites connected by a scalable interconnection network.
Reference: [2] <author> T. Brewer. </author> <title> A highly scalable system utilizing up to 128 pa-risc processors. </title> <institution> Convex Computer Corporation. </institution>
Reference-contexts: 1 Introduction A CCDSM system supports cache-coherent global shared memory on distributed-memory multiprocessor hardware. Coherence is maintained in a non-broadcast manner across sites, typically using a directory-based approach. Many research [6, 5, 1, 4] and a few commerical <ref> [3, 2] </ref> CCDSM systems have been built or are being built. Figure 1 shows a typical CCDSM implemention, consisting of processor sites and memory sites connected by a scalable interconnection network. Each processor site has one or more cache-equiped processors connected by a snoopy bus.
Reference: [3] <author> H. Burkhardt III et al. </author> <title> Overview of the KSR1 Computer System. </title> <type> Technical Report KSR-TR-9202001, </type> <institution> Kendall Square Research, </institution> <address> Boston, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: 1 Introduction A CCDSM system supports cache-coherent global shared memory on distributed-memory multiprocessor hardware. Coherence is maintained in a non-broadcast manner across sites, typically using a directory-based approach. Many research [6, 5, 1, 4] and a few commerical <ref> [3, 2] </ref> CCDSM systems have been built or are being built. Figure 1 shows a typical CCDSM implemention, consisting of processor sites and memory sites connected by a scalable interconnection network. Each processor site has one or more cache-equiped processors connected by a snoopy bus.
Reference: [4] <author> D. Chiou et al. *T-NG: </author> <title> Delivering Seamless Parallel Computing. Computation Structures Group Memo 371, </title> <institution> MIT Laboratory for Computer Science, 545 Technology Square, </institution> <address> Cambridge, MA 02139, </address> <month> February </month> <year> 1995. </year> <note> (To appear in EURO-PAR '95). </note>
Reference-contexts: 1 Introduction A CCDSM system supports cache-coherent global shared memory on distributed-memory multiprocessor hardware. Coherence is maintained in a non-broadcast manner across sites, typically using a directory-based approach. Many research <ref> [6, 5, 1, 4] </ref> and a few commerical [3, 2] CCDSM systems have been built or are being built. Figure 1 shows a typical CCDSM implemention, consisting of processor sites and memory sites connected by a scalable interconnection network.
Reference: [5] <author> J. Kuskin et al. </author> <title> The Stanford FLASH Multiprocessor. </title> <booktitle> In Proceedings of the 21st Annual International Symposium on Computer Architecture, </booktitle> <address> Chicago, Il, </address> <pages> pages 302-313, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: 1 Introduction A CCDSM system supports cache-coherent global shared memory on distributed-memory multiprocessor hardware. Coherence is maintained in a non-broadcast manner across sites, typically using a directory-based approach. Many research <ref> [6, 5, 1, 4] </ref> and a few commerical [3, 2] CCDSM systems have been built or are being built. Figure 1 shows a typical CCDSM implemention, consisting of processor sites and memory sites connected by a scalable interconnection network.
Reference: [6] <author> D. Lenoski et al. </author> <title> The Directory-Based Cache Coherence Protocol for the DASH Multiprocesor. </title> <booktitle> In Proceedings of The 17th Annual International Symposium on Computer Architecture, </booktitle> <address> Seattle, WA, </address> <pages> pages 148-159, </pages> <year> 1990. </year> <month> 2 </month>
Reference-contexts: 1 Introduction A CCDSM system supports cache-coherent global shared memory on distributed-memory multiprocessor hardware. Coherence is maintained in a non-broadcast manner across sites, typically using a directory-based approach. Many research <ref> [6, 5, 1, 4] </ref> and a few commerical [3, 2] CCDSM systems have been built or are being built. Figure 1 shows a typical CCDSM implemention, consisting of processor sites and memory sites connected by a scalable interconnection network.
References-found: 6

