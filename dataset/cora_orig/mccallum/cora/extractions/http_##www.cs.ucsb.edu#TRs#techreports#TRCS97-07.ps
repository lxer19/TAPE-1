URL: http://www.cs.ucsb.edu/TRs/techreports/TRCS97-07.ps
Refering-URL: http://www.cs.ucsb.edu/TRs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Impact of Media Exchanges in Robotic Storage Libraries  
Author: Sunil Prabhakar Divyakant Agrawal Amr El Abbadi 
Abstract: The large storage requirements of many commerical and scientific applications cannot be met by magnetic disks due to their high cost and low storage density. Consequently, cheaper and more dense tertiary storage systems are being intergrated into the storage hierarchies of these applications. Although tertiary storage can accomodate large amounts of data, the access latency is very high due to the need to load and unload media from the read/write drives. These media exchanges are very slow with typical times in the order of tens of seconds. In order to reduce this high latency research efforts have focussed on minimizing media exchanges under the assumption that it is always beneficial to eliminate exchanges. We analyze the validity of this assumption. It is shown that there are instances when the assumption does not hold. It is further shown that various factors influence the effect of an exchange, making it difficult to establish simple heuristics for scheduling media exchanges. Simulation is used to validate the theoretical results. 
Abstract-found: 1
Intro-found: 1
Reference: [ABZ96] <author> M. Andrews, M. A. Bender, and L. Zhang. </author> <title> New algorithms for the disk scheduling problem. </title> <booktitle> In Foundations of Computer Science, </booktitle> <year> 1996. </year>
Reference-contexts: Most of the solutions are applicable only to specific applications such as video-on-demand [CPK95, KDST95], relational databases [ML95, SS93], and multidimensional arrays [SS94, CDK + 95]. Generally applicable techniques for reducing the access latency include scheduling of I/O requests for a single medium <ref> [HS96, LO96, ABZ96] </ref> and altering the order in which media are loaded onto the drives [Ano96]. Given the magnitude of the exchange time, it is generally assumed that reducing the number of media exchanges will always be beneficial. <p> Section 5 concludes the paper. 2 Scheduling With Minimum Media Exchanges In this section, we summarize earlier results of I/O scheduling to minimize the number of media exchanges. The technique of scheduling batches of I/O requests is based upon the fact that I/O traffic is bursty in nature <ref> [ABZ96, RW93] </ref>, i.e., I/O requests are generated in a short period of time followed by periods during which little or no reqeusts are generated. This technique has also been used for scheduling batch I/O requests for single media such as linear tapes [LO96], serpentine tapes [HS96] and magnetic disks [ABZ96]. <p> This technique has also been used for scheduling batch I/O requests for single media such as linear tapes [LO96], serpentine tapes [HS96] and magnetic disks <ref> [ABZ96] </ref>. Scheduling of bursty I/O requests can be simplified by considering the requests in each burst independently. It can be assumed that these requests arrive together, and thus the problem can be viewed as off-line scheduling with requests arriving together rather than on-line scheduling with requests arriving continuously. <p> It can be assumed that these requests arrive together, and thus the problem can be viewed as off-line scheduling with requests arriving together rather than on-line scheduling with requests arriving continuously. This technique has also been used for studying other scheduling algorithms <ref> [HS96, LO96, ABZ96] </ref>. Given the current improvements in processor speeds and the high access latency of tertiary storage devices, it is tempting to consider an exhaustive search of all possible schedules in order to obtain an optimal solution instead of looking for efficient scheduling policies. <p> The value of this time is dependent upon the schedule used to service requests for a single medium. We do not restrict this schedule, any efficient schedule such as those described in [HS96, LO96] for tapes or in <ref> [ABZ96, Teo72] </ref> for disks could be used.
Reference: [Ano96] <author> Anonymous. </author> <title> Efficient I/O scheduling in tertiary libraries. </title> <type> Technical Report TRCS96-26, </type> <institution> Dept. </institution> <note> of Computer Science (Details omitted to facilitate blind review), </note> <year> 1996. </year>
Reference-contexts: Generally applicable techniques for reducing the access latency include scheduling of I/O requests for a single medium [HS96, LO96, ABZ96] and altering the order in which media are loaded onto the drives <ref> [Ano96] </ref>. Given the magnitude of the exchange time, it is generally assumed that reducing the number of media exchanges will always be beneficial. However, this assumption is not always valid, since there are instances where having extra media exchanges results in better performance. <p> Any of these scheduling algorithms can be used to determine the Single Medium schedule for each medium. The problem of finding the Media Loading schedules to determine the optimal order in which to load the media onto the drive has not been studied. In <ref> [Ano96] </ref> we investigated this problem and developed an O (m log m + N ) (m is the number of media and N is the number of requests) algorithm to find the optimal schedule for loading the media for a single drive. <p> We assume that this time is constant as given in most product specifications. The details of the derivation can be found in <ref> [Ano96] </ref>. The constant C i represents the wait incurred by the requests for medium i after it has been loaded onto the drive. This time is independent of when the medium gets loaded and does not depend upon the schedule. <p> n i + n i j=1 1 Based upon the above equation, the following theorem was established: Theorem 1 Any schedule of m media which satisfies Equation 3 is optimal 8i 1 i &lt; m; E + P i n i+1 (3) The proof of this theorem is presented in <ref> [Ano96] </ref>. <p> In the case of multiple drives, the problem of finding an optimal schedule for loading the media onto the drives that minimizes the number of media exchanges was shown to be NP-complete in <ref> [Ano96] </ref>. In the absence of efficient optimal solutions, heuristics were proposed.
Reference: [CDK + 95] <author> L. T. Chen, R. Drach, M. Keating, S. Louise, D. Rotem, and A. Shoshani. </author> <title> Efficient organization and access of multi-dimensional datasets on tertiary storage systems. </title> <booktitle> In Information Systems, </booktitle> <volume> volume 20, </volume> <pages> pages 155-83. </pages> <publisher> Elsevier Science, </publisher> <year> 1995. </year>
Reference-contexts: Reordering of I/O requests or intelligent scheduling of pending requests have been proposed for achieving this reduction. Most of the solutions are applicable only to specific applications such as video-on-demand [CPK95, KDST95], relational databases [ML95, SS93], and multidimensional arrays <ref> [SS94, CDK + 95] </ref>. Generally applicable techniques for reducing the access latency include scheduling of I/O requests for a single medium [HS96, LO96, ABZ96] and altering the order in which media are loaded onto the drives [Ano96].
Reference: [CPK95] <author> A. L. Chervenak, D. A. Patterson, and R. H. Katz. </author> <title> Storage systems for movies-on-demand video servers. </title> <booktitle> In Proceedings of the Fourteenth IEEE Symposium on Mass Storage Systems, </booktitle> <pages> pages 246-56, </pages> <address> Los Alamitos, CA, </address> <month> Sep. </month> <title> 1995. </title> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Reordering of I/O requests or intelligent scheduling of pending requests have been proposed for achieving this reduction. Most of the solutions are applicable only to specific applications such as video-on-demand <ref> [CPK95, KDST95] </ref>, relational databases [ML95, SS93], and multidimensional arrays [SS94, CDK + 95]. Generally applicable techniques for reducing the access latency include scheduling of I/O requests for a single medium [HS96, LO96, ABZ96] and altering the order in which media are loaded onto the drives [Ano96].
Reference: [DK93] <author> A. L. Drapeau and R. H. Katz. </author> <title> Striping in large tape libraries. </title> <booktitle> In Proc. of Supercomputing, </booktitle> <pages> pages 378-387, </pages> <address> Portland, Oregon, </address> <year> 1993. </year> <journal> ACM. </journal> <volume> 13 </volume>
Reference-contexts: Though techniques such as striping could be used to split data items across several media, it has been shown that due to the small number of drives in tertiary libraries, striping is not beneficial in the presence of concurrent users <ref> [GM95, DK93] </ref>. If a data item is too large to fit on a single medium, we can split a request for such a large item into separate requests for each contiguous segment.
Reference: [EXA96] <author> EXABYTE. </author> <title> Products. </title> <address> http://www.Exabyte.COM:80/Products/, Oct. </address> <year> 1996. </year>
Reference-contexts: Since this involves the physical movement of the tape or disk, it is a slow operation. In order to reduce this time, automatic tape and disk libraries (e.g. <ref> [EXA96, SON96, Qua96] </ref>) which operate much faster than humans, are commercially available. Typical exchange times for these automatic libraries are in fl Work supported by a research grant from NSF/ARPA/NASA IRI9411330. 1 tens of seconds.
Reference: [GM95] <author> L. Golubchik and R. Muntz. </author> <title> Analysis of striping techniques in robotic storage libraries. </title> <booktitle> In Proceedings of the Fourteenth IEEE Symposium on Mass Storage Systems, </booktitle> <pages> pages 225-38, </pages> <address> Monterey, CA, </address> <year> 1995. </year>
Reference-contexts: Though techniques such as striping could be used to split data items across several media, it has been shown that due to the small number of drives in tertiary libraries, striping is not beneficial in the presence of concurrent users <ref> [GM95, DK93] </ref>. If a data item is too large to fit on a single medium, we can split a request for such a large item into separate requests for each contiguous segment.
Reference: [HS96] <author> B. K. Hillyer and A. Silberschatz. </author> <title> Random I/O scheduling in online tertiary storage. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <address> Canada, </address> <year> 1996. </year>
Reference-contexts: Most of the solutions are applicable only to specific applications such as video-on-demand [CPK95, KDST95], relational databases [ML95, SS93], and multidimensional arrays [SS94, CDK + 95]. Generally applicable techniques for reducing the access latency include scheduling of I/O requests for a single medium <ref> [HS96, LO96, ABZ96] </ref> and altering the order in which media are loaded onto the drives [Ano96]. Given the magnitude of the exchange time, it is generally assumed that reducing the number of media exchanges will always be beneficial. <p> Given a batch of I/O requests for a robotic library, we would like to determine whether schedules that minimize the media exchanges perform better than schedules that allow more exchanges to be made and if not, under which conditions do they not perform better. In contrast to previous studies <ref> [HS96, LO96] </ref>, our study considers requests for more than a single medium. The rest of the paper is organized as follows. In Section 2 we summarize earlier work done on finding optimal schedules that minimize the number of media exchanges. <p> This technique has also been used for scheduling batch I/O requests for single media such as linear tapes [LO96], serpentine tapes <ref> [HS96] </ref> and magnetic disks [ABZ96]. Scheduling of bursty I/O requests can be simplified by considering the requests in each burst independently. <p> It can be assumed that these requests arrive together, and thus the problem can be viewed as off-line scheduling with requests arriving together rather than on-line scheduling with requests arriving continuously. This technique has also been used for studying other scheduling algorithms <ref> [HS96, LO96, ABZ96] </ref>. Given the current improvements in processor speeds and the high access latency of tertiary storage devices, it is tempting to consider an exhaustive search of all possible schedules in order to obtain an optimal solution instead of looking for efficient scheduling policies. <p> The goal of both these schedules is to minimize the total waiting time. The problem of finding efficient Single Medium schedules has already been addressed by a number of researchers. Hillyer and Silberschatz <ref> [HS96] </ref> have looked at efficient methods of scheduling a batch of requests for a single serpentine tape. Li and Orji [LO96] have studied the problem of scheduling a batch of request for linear tapes. <p> The value of this time is dependent upon the schedule used to service requests for a single medium. We do not restrict this schedule, any efficient schedule such as those described in <ref> [HS96, LO96] </ref> for tapes or in [ABZ96, Teo72] for disks could be used.
Reference: [KDST95] <author> M.G. Kienzle, A. Dan, D. Sitaram, and W. Tetzlaff. </author> <title> Using tertiary storage in video-on-demand servers. </title> <booktitle> In Digest of Papers. COMPCON '95, </booktitle> <pages> pages 225-33, </pages> <year> 1995. </year>
Reference-contexts: Reordering of I/O requests or intelligent scheduling of pending requests have been proposed for achieving this reduction. Most of the solutions are applicable only to specific applications such as video-on-demand <ref> [CPK95, KDST95] </ref>, relational databases [ML95, SS93], and multidimensional arrays [SS94, CDK + 95]. Generally applicable techniques for reducing the access latency include scheduling of I/O requests for a single medium [HS96, LO96, ABZ96] and altering the order in which media are loaded onto the drives [Ano96].
Reference: [LO96] <author> J. Li and C. Orji. </author> <title> I/O scheduling in tape-based tertiary systems. </title> <journal> Journal of Mathematical Modelling and Scientific Computing, </journal> <volume> 6, </volume> <year> 1996. </year>
Reference-contexts: Most of the solutions are applicable only to specific applications such as video-on-demand [CPK95, KDST95], relational databases [ML95, SS93], and multidimensional arrays [SS94, CDK + 95]. Generally applicable techniques for reducing the access latency include scheduling of I/O requests for a single medium <ref> [HS96, LO96, ABZ96] </ref> and altering the order in which media are loaded onto the drives [Ano96]. Given the magnitude of the exchange time, it is generally assumed that reducing the number of media exchanges will always be beneficial. <p> Given a batch of I/O requests for a robotic library, we would like to determine whether schedules that minimize the media exchanges perform better than schedules that allow more exchanges to be made and if not, under which conditions do they not perform better. In contrast to previous studies <ref> [HS96, LO96] </ref>, our study considers requests for more than a single medium. The rest of the paper is organized as follows. In Section 2 we summarize earlier work done on finding optimal schedules that minimize the number of media exchanges. <p> This technique has also been used for scheduling batch I/O requests for single media such as linear tapes <ref> [LO96] </ref>, serpentine tapes [HS96] and magnetic disks [ABZ96]. Scheduling of bursty I/O requests can be simplified by considering the requests in each burst independently. <p> It can be assumed that these requests arrive together, and thus the problem can be viewed as off-line scheduling with requests arriving together rather than on-line scheduling with requests arriving continuously. This technique has also been used for studying other scheduling algorithms <ref> [HS96, LO96, ABZ96] </ref>. Given the current improvements in processor speeds and the high access latency of tertiary storage devices, it is tempting to consider an exhaustive search of all possible schedules in order to obtain an optimal solution instead of looking for efficient scheduling policies. <p> The problem of finding efficient Single Medium schedules has already been addressed by a number of researchers. Hillyer and Silberschatz [HS96] have looked at efficient methods of scheduling a batch of requests for a single serpentine tape. Li and Orji <ref> [LO96] </ref> have studied the problem of scheduling a batch of request for linear tapes. Scheduling algorithms for magnetic disks have been extensively studied [Teo72] and these 3 could readily be applied to optical and magneto-optical disks. <p> The value of this time is dependent upon the schedule used to service requests for a single medium. We do not restrict this schedule, any efficient schedule such as those described in <ref> [HS96, LO96] </ref> for tapes or in [ABZ96, Teo72] for disks could be used.
Reference: [ML95] <author> J. Myllymaki and M. Livny. </author> <title> Disk-tape joins: Synchronizing disk and tape access. </title> <booktitle> In Joint International Conference on Measurement and Modeling of ComputerSystems. SIGMETRICS '95/PERFORMANCE '95, </booktitle> <pages> pages 279-90, </pages> <address> Ottawa, Canada, </address> <year> 1995. </year>
Reference-contexts: Reordering of I/O requests or intelligent scheduling of pending requests have been proposed for achieving this reduction. Most of the solutions are applicable only to specific applications such as video-on-demand [CPK95, KDST95], relational databases <ref> [ML95, SS93] </ref>, and multidimensional arrays [SS94, CDK + 95]. Generally applicable techniques for reducing the access latency include scheduling of I/O requests for a single medium [HS96, LO96, ABZ96] and altering the order in which media are loaded onto the drives [Ano96].
Reference: [MP93] <author> T. E. Morton and D. W. Pentico. </author> <title> Heuristic Scheduling Systems with applications to Production Systems and Project Management. </title> <publisher> John Wiley and Sons, Inc., </publisher> <year> 1993. </year>
Reference-contexts: In order to compare the efficiency of potential scheduling policies, it is necessary to define a quantitative measure of performance. This measure, or optimization function, could be one of several possibilities. Some of the popular optimization functions that have been studied in the literature include <ref> [Pin95, MP93] </ref>: * Makespan: the time at which the last request is completed. * TWCT: the Total Weighted Completion Time (each job has a weight, e.g. a priority). * AWT: the Average Waiting Time for all jobs. * Throughput: the average number of requests serviced per second.
Reference: [Pin95] <author> M. Pinedo. </author> <title> Scheduling Theory, </title> <booktitle> Algorithms and Systems. Prentice-Hall International Series in Industrial and Systems Engineering. </booktitle> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1995. </year>
Reference-contexts: In order to compare the efficiency of potential scheduling policies, it is necessary to define a quantitative measure of performance. This measure, or optimization function, could be one of several possibilities. Some of the popular optimization functions that have been studied in the literature include <ref> [Pin95, MP93] </ref>: * Makespan: the time at which the last request is completed. * TWCT: the Total Weighted Completion Time (each job has a weight, e.g. a priority). * AWT: the Average Waiting Time for all jobs. * Throughput: the average number of requests serviced per second.
Reference: [Qua96] <institution> Quantum. Products and technology. </institution> <address> http://www.quantum.com/products, Oct. </address> <year> 1996. </year>
Reference-contexts: Since this involves the physical movement of the tape or disk, it is a slow operation. In order to reduce this time, automatic tape and disk libraries (e.g. <ref> [EXA96, SON96, Qua96] </ref>) which operate much faster than humans, are commercially available. Typical exchange times for these automatic libraries are in fl Work supported by a research grant from NSF/ARPA/NASA IRI9411330. 1 tens of seconds.
Reference: [RW93] <author> C. Ruemmler and J. Wilkes. </author> <title> UNIX disk access patterns. </title> <booktitle> In USENIX, </booktitle> <pages> pages 405-420, </pages> <month> Winter </month> <year> 1993. </year>
Reference-contexts: Section 5 concludes the paper. 2 Scheduling With Minimum Media Exchanges In this section, we summarize earlier results of I/O scheduling to minimize the number of media exchanges. The technique of scheduling batches of I/O requests is based upon the fact that I/O traffic is bursty in nature <ref> [ABZ96, RW93] </ref>, i.e., I/O requests are generated in a short period of time followed by periods during which little or no reqeusts are generated. This technique has also been used for scheduling batch I/O requests for single media such as linear tapes [LO96], serpentine tapes [HS96] and magnetic disks [ABZ96].
Reference: [Sch86] <author> H. D. Schwetman. CSIM: </author> <title> A C-based, process-oriented simulation language. </title> <booktitle> In Proceedings of the 1986 Winter Simulation Conference, </booktitle> <pages> pages 387-396, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: In this section we use simulation to evaluate the impact of such media exchanges. 9 4.1 Experimental Setup The experiments were conducted using an event driven simulator for robotic libraries developed using the CSIM <ref> [Sch86] </ref> simulation package. A model of a general robotic library consisting of a configurable number of drives, robot arms and media has been developed. The performance of the drives and robot arms and the characteristics of the media are also configurable.
Reference: [SON96] <author> SONY. </author> <title> Recording media products. </title> <address> http://sony.sosin.com.sg/record-media/, Oct. </address> <year> 1996. </year>
Reference-contexts: Since this involves the physical movement of the tape or disk, it is a slow operation. In order to reduce this time, automatic tape and disk libraries (e.g. <ref> [EXA96, SON96, Qua96] </ref>) which operate much faster than humans, are commercially available. Typical exchange times for these automatic libraries are in fl Work supported by a research grant from NSF/ARPA/NASA IRI9411330. 1 tens of seconds.
Reference: [SS93] <author> S. Sarawagi and M. Stonebraker. </author> <title> Single query opimization for tertiary memory. </title> <type> Technical Report s2k-94-45, </type> <institution> Computer Science Div. U.C. Berkeley, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Reordering of I/O requests or intelligent scheduling of pending requests have been proposed for achieving this reduction. Most of the solutions are applicable only to specific applications such as video-on-demand [CPK95, KDST95], relational databases <ref> [ML95, SS93] </ref>, and multidimensional arrays [SS94, CDK + 95]. Generally applicable techniques for reducing the access latency include scheduling of I/O requests for a single medium [HS96, LO96, ABZ96] and altering the order in which media are loaded onto the drives [Ano96].
Reference: [SS94] <author> S. Sarawagi and M. Stonebraker. </author> <title> Efficient organization of large multidimensional arrays. </title> <booktitle> In IEEE Int. Conf. on Data Engineering, </booktitle> <pages> pages 328-336, </pages> <address> Houston, TX, USA, Feb. 1994. </address> <publisher> IEEE Comput. Soc. Press. </publisher>
Reference-contexts: Reordering of I/O requests or intelligent scheduling of pending requests have been proposed for achieving this reduction. Most of the solutions are applicable only to specific applications such as video-on-demand [CPK95, KDST95], relational databases [ML95, SS93], and multidimensional arrays <ref> [SS94, CDK + 95] </ref>. Generally applicable techniques for reducing the access latency include scheduling of I/O requests for a single medium [HS96, LO96, ABZ96] and altering the order in which media are loaded onto the drives [Ano96].
Reference: [Teo72] <author> T. J. Teorey. </author> <title> Properties of disk scheduling policies in multiprogrammed computer systems. </title> <booktitle> In Proceedings of the AFIPS Fall Joint Computer Conference, </booktitle> <pages> pages 1-11, </pages> <year> 1972. </year> <month> 14 </month>
Reference-contexts: Hillyer and Silberschatz [HS96] have looked at efficient methods of scheduling a batch of requests for a single serpentine tape. Li and Orji [LO96] have studied the problem of scheduling a batch of request for linear tapes. Scheduling algorithms for magnetic disks have been extensively studied <ref> [Teo72] </ref> and these 3 could readily be applied to optical and magneto-optical disks. Any of these scheduling algorithms can be used to determine the Single Medium schedule for each medium. <p> The value of this time is dependent upon the schedule used to service requests for a single medium. We do not restrict this schedule, any efficient schedule such as those described in [HS96, LO96] for tapes or in <ref> [ABZ96, Teo72] </ref> for disks could be used.
References-found: 20

