URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/tr.outbox/MIT-LCS-TR-685.ps.gz
Refering-URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/listings/tr600.html
Root-URL: 
Title: Correctness of Vehicle Control Systems: A Case Study  
Author: by Henri B. Weinberg Nancy A. Lynch 
Degree: 1992 Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degree of Master of Science in Electrical Engineering and Computer Science at the  All rights reserved. Author Certified by  Professor of Computer Science and Engineering Thesis Supervisor Accepted by Frederic R. Morgenthaler Chairman, Departmental Committee on Graduate Students  
Date: February 1996  
Affiliation: B.S., Computer Science Yale University,  MASSACHUSETTS INSTITUTE OF TECHNOLOGY  c Massachusetts Institute of Technology 1996.  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Nancy Lynch, Roberto Segala, Frits Vaandrager, and H.B. Weinberg. </author> <title> Hybrid I/O automata. </title> <booktitle> In DIMACS Workshop on Verification and Control of Hybrid Systems, </booktitle> <month> October </month> <year> 1995. </year> <note> To appear in R. </note> <editor> Alur, T. Henzinger, and E. Sontag, editors, </editor> <title> Hybrid Systems III, </title> <note> Lecture Notes in Computer Science, Springer-Verlag. Also, to appear as MIT/LCS/TM-544. </note>
Reference-contexts: However, systems that combine both types of activity appear to require new methods. The development and application of such methods is an active area of current research. One of the formal tools that has been developed is the hybrid I/O automaton model <ref> [1] </ref>. In this case study, we show how this model can be used to specify and verify part of an automated transportation system | a vehicle deceleration maneuver. <p> We conclude in Chapter 7. Chapter 2 Model: Hybrid I/O Automata The hybrid I/O automaton model <ref> [1] </ref> is based on the timed I/O automaton model of [2, 3, 4, 5], but includes more explicit treatment of continuous behavior. To make this report self contained, this chapter gives a complete but terse treatment of the HIOA model with an emphasis on those aspects used in subsequent chapters. <p> To make this report self contained, this chapter gives a complete but terse treatment of the HIOA model with an emphasis on those aspects used in subsequent chapters. The presentation is based on <ref> [1] </ref> and [27]. The chapter is organized as follows. We begin by introducing the notion of a trajectory; trajectories are functions that represent the continuous evolution of state. We proceed to define hybrid I/O automata (HIOA) and their executions and traces. <p> Theorem 2.5.1 If A and B are comparable HIOA's and there is a simulation from A to B, then A B. The definition of simulation given above is weaker than the one given in <ref> [1] </ref>. We have added the restriction that r and s be reachable states in Conditions 2 and 3. <p> A controller which stops time before the system reaches c f is a correct controller according to the above definition. In general, one would like to avoid such vacuous correctness results. This issue is beyond the scope of our investigation, but it is treated in some depth in <ref> [1, 4, 5] </ref>. None of the of the example controllers presented in this case study stop time. The following theorem says that the timeliness and safety properties are preserved by the implementation relation (see Section 2.4); in other words, an implementation of a correct brake-controller is itself a correct brake-controller.
Reference: [2] <author> Nancy Lynch and Frits Vaandrager. </author> <title> Forward and backward simulations Part II: </title> <journal> Timing-based systems. </journal> <note> Technical Memo MIT/LCS/TM-487.c, </note> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <address> Cambridge, MA 02139, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: In particular, we are concerned that HIOA techniques express hybrid systems faithfully and that they allow clear and scalable proofs of significant properties of these systems. Formal Framework The hybrid I/O automaton model is an extension of the timed I/O automaton model of <ref> [2, 3, 4, 5] </ref> inspired by the phase transition system model of [6] and the similar hybrid system model of [7]. A hybrid I/O automaton (HIOA) is a (possibly) infinite state labeled transition system. The states of a HIOA are the valuations of a set of variables. <p> The methods of invariant assertions, abstraction mappings, forward and backward simulations, history and prophecy variables are used in many places in computer science. We will not attempt to attribute all these notions. An overview of these methods, for untimed and timed systems, appears in <ref> [22, 2, 3] </ref>. Roy Johnson and Steve Spielman at Raytheon are leading the design and development of a prototype advanced personal rapid transit system, based partly on concepts developed by Dr. Edward Anderson of the Taxi2000 Corp. Prof. <p> We conclude in Chapter 7. Chapter 2 Model: Hybrid I/O Automata The hybrid I/O automaton model [1] is based on the timed I/O automaton model of <ref> [2, 3, 4, 5] </ref>, but includes more explicit treatment of continuous behavior. To make this report self contained, this chapter gives a complete but terse treatment of the HIOA model with an emphasis on those aspects used in subsequent chapters. The presentation is based on [1] and [27]. <p> Table 2.1 The skew-timer automaton. Actions: Input: set-timer (x) for x 2 R 0 Output: alarm Internal: fault Vars: Output: togo 2 R 0 [ f1g, initially 1 Internal: clock 2 R 0 , initially 0 rate 2 <ref> [0; 2] </ref>, initially 1 deadline 2 R 0 [ f1g, initially 1 Discrete Transitions: set-timer (x): Eff: togo := x deadline := clock + x alarm: Pre: deadline = clock Eff: deadline := 1 togo := 1 fault: Pre: togo 6= 0 Eff: togo :2 R 0 deadline := clock +
Reference: [3] <author> Nancy Lynch and Frits Vaandrager. </author> <title> Forward and backward simulations Part II: </title> <journal> Timing-based systems. Information and Computation. </journal> <note> To appear. Available now as [2]. </note>
Reference-contexts: In particular, we are concerned that HIOA techniques express hybrid systems faithfully and that they allow clear and scalable proofs of significant properties of these systems. Formal Framework The hybrid I/O automaton model is an extension of the timed I/O automaton model of <ref> [2, 3, 4, 5] </ref> inspired by the phase transition system model of [6] and the similar hybrid system model of [7]. A hybrid I/O automaton (HIOA) is a (possibly) infinite state labeled transition system. The states of a HIOA are the valuations of a set of variables. <p> The methods of invariant assertions, abstraction mappings, forward and backward simulations, history and prophecy variables are used in many places in computer science. We will not attempt to attribute all these notions. An overview of these methods, for untimed and timed systems, appears in <ref> [22, 2, 3] </ref>. Roy Johnson and Steve Spielman at Raytheon are leading the design and development of a prototype advanced personal rapid transit system, based partly on concepts developed by Dr. Edward Anderson of the Taxi2000 Corp. Prof. <p> We conclude in Chapter 7. Chapter 2 Model: Hybrid I/O Automata The hybrid I/O automaton model [1] is based on the timed I/O automaton model of <ref> [2, 3, 4, 5] </ref>, but includes more explicit treatment of continuous behavior. To make this report self contained, this chapter gives a complete but terse treatment of the HIOA model with an emphasis on those aspects used in subsequent chapters. The presentation is based on [1] and [27]. <p> Such a requirement would guarantee certain properties that are required in [27] but that are beyond the scope of this exposition. A simple example MMT-specification ping-pong appears in Table 2.2; its corresponding HIOA hybrid (ping-pong) appears in Table 2.3 in standard notation. The notation PING = fpingg : <ref> [3; 4] </ref>, means that task PING consists of the singleton set of actions fpingg and has lower and upper time bounds of 3 and 4, respectively. <p> Table 2.2 The ping-pong MMT-specification. Actions: Output: ping and pong Vars: Internal: count 2 N, initially 0 Discrete Transitions: ping: Pre: count is even Eff: count := count + 1 pong: Pre: count is odd Eff: count := count + 1 Tasks: PING = fpingg : <ref> [3; 4] </ref> PONG = fpongg : [7; 20] Notation All HIOAs that result from MMT-specifications have the now variable. So that we may compose these HIOAs and others that have a similar now variable, we adopt a convention for the now variable.
Reference: [4] <author> R. Gawlick, R. Segala, J. Stgaard-Andersen, and N. Lynch. </author> <title> Liveness in timed and untimed systems. </title> <type> Technical Report MIT/LCS/TR-587, </type> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <address> Cambridge, MA, 02139, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: In particular, we are concerned that HIOA techniques express hybrid systems faithfully and that they allow clear and scalable proofs of significant properties of these systems. Formal Framework The hybrid I/O automaton model is an extension of the timed I/O automaton model of <ref> [2, 3, 4, 5] </ref> inspired by the phase transition system model of [6] and the similar hybrid system model of [7]. A hybrid I/O automaton (HIOA) is a (possibly) infinite state labeled transition system. The states of a HIOA are the valuations of a set of variables. <p> We conclude in Chapter 7. Chapter 2 Model: Hybrid I/O Automata The hybrid I/O automaton model [1] is based on the timed I/O automaton model of <ref> [2, 3, 4, 5] </ref>, but includes more explicit treatment of continuous behavior. To make this report self contained, this chapter gives a complete but terse treatment of the HIOA model with an emphasis on those aspects used in subsequent chapters. The presentation is based on [1] and [27]. <p> Such a requirement would guarantee certain properties that are required in [27] but that are beyond the scope of this exposition. A simple example MMT-specification ping-pong appears in Table 2.2; its corresponding HIOA hybrid (ping-pong) appears in Table 2.3 in standard notation. The notation PING = fpingg : <ref> [3; 4] </ref>, means that task PING consists of the singleton set of actions fpingg and has lower and upper time bounds of 3 and 4, respectively. <p> Table 2.2 The ping-pong MMT-specification. Actions: Output: ping and pong Vars: Internal: count 2 N, initially 0 Discrete Transitions: ping: Pre: count is even Eff: count := count + 1 pong: Pre: count is odd Eff: count := count + 1 Tasks: PING = fpingg : <ref> [3; 4] </ref> PONG = fpongg : [7; 20] Notation All HIOAs that result from MMT-specifications have the now variable. So that we may compose these HIOAs and others that have a similar now variable, we adopt a convention for the now variable. <p> A controller which stops time before the system reaches c f is a correct controller according to the above definition. In general, one would like to avoid such vacuous correctness results. This issue is beyond the scope of our investigation, but it is treated in some depth in <ref> [1, 4, 5] </ref>. None of the of the example controllers presented in this case study stop time. The following theorem says that the timeliness and safety properties are preserved by the implementation relation (see Section 2.4); in other words, an implementation of a correct brake-controller is itself a correct brake-controller.
Reference: [5] <author> Rainer Gawlick, Roberto Segala, Jtrgen Stgaard-Andersen, and Nancy Lynch. </author> <title> Liveness in timed and untimed systems. </title> <editor> In Serge Abiteboul and Eli Shamir, editors, </editor> <booktitle> Proceedings of the 21st International Colloquim, ICALP94, volume 820 of Lecture Notes in Computer Science, </booktitle> <pages> pages 166-177, </pages> <address> Jerusalem, Israel, </address> <month> July </month> <year> 1994. </year> <note> Springer-Verlag. Full version in [4]. </note>
Reference-contexts: In particular, we are concerned that HIOA techniques express hybrid systems faithfully and that they allow clear and scalable proofs of significant properties of these systems. Formal Framework The hybrid I/O automaton model is an extension of the timed I/O automaton model of <ref> [2, 3, 4, 5] </ref> inspired by the phase transition system model of [6] and the similar hybrid system model of [7]. A hybrid I/O automaton (HIOA) is a (possibly) infinite state labeled transition system. The states of a HIOA are the valuations of a set of variables. <p> We conclude in Chapter 7. Chapter 2 Model: Hybrid I/O Automata The hybrid I/O automaton model [1] is based on the timed I/O automaton model of <ref> [2, 3, 4, 5] </ref>, but includes more explicit treatment of continuous behavior. To make this report self contained, this chapter gives a complete but terse treatment of the HIOA model with an emphasis on those aspects used in subsequent chapters. The presentation is based on [1] and [27]. <p> A controller which stops time before the system reaches c f is a correct controller according to the above definition. In general, one would like to avoid such vacuous correctness results. This issue is beyond the scope of our investigation, but it is treated in some depth in <ref> [1, 4, 5] </ref>. None of the of the example controllers presented in this case study stop time. The following theorem says that the timeliness and safety properties are preserved by the implementation relation (see Section 2.4); in other words, an implementation of a correct brake-controller is itself a correct brake-controller.
Reference: [6] <author> O. Maler, Z. Manna, and A. Pnueli. </author> <title> From timed to hybrid systems. </title> <editor> In J.W. de Bakker, C. Huizing, W.P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> REX Workshop on Real-Time: Theory in Practice, volume 600 of Lecture Notes in Computer Science, </booktitle> <pages> pages 447-484, </pages> <address> Mook, The Netherlands, June 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Formal Framework The hybrid I/O automaton model is an extension of the timed I/O automaton model of [2, 3, 4, 5] inspired by the phase transition system model of <ref> [6] </ref> and the similar hybrid system model of [7]. A hybrid I/O automaton (HIOA) is a (possibly) infinite state labeled transition system. The states of a HIOA are the valuations of a set of variables. Certain states are distinguished as start states. <p> Just as timed I/O automata have been extended to hybrid I/O automata to treat hybrid systems, so have other real-time models. For example, the timed transition system model of [18] is extended to the phase transition system model in <ref> [6] </ref>. Phase transition systems are analogous to hybrid I/O automata: their transitions correspond to our discrete steps; their activities correspond to our trajectories. The hybrid system model of [7] is similar to the phase transition system model except that it includes synchronization labels that correspond to our actions.
Reference: [7] <author> R. Alur, C. Courcoubetis, T.A. Henzinger, P.H. Ho, X. Nicollin, A. Olivero, J Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year> <month> 87 </month>
Reference-contexts: Formal Framework The hybrid I/O automaton model is an extension of the timed I/O automaton model of [2, 3, 4, 5] inspired by the phase transition system model of [6] and the similar hybrid system model of <ref> [7] </ref>. A hybrid I/O automaton (HIOA) is a (possibly) infinite state labeled transition system. The states of a HIOA are the valuations of a set of variables. Certain states are distinguished as start states. The transitions of a HIOA are of two types: continuous and discrete. <p> For example, the timed transition system model of [18] is extended to the phase transition system model in [6]. Phase transition systems are analogous to hybrid I/O automata: their transitions correspond to our discrete steps; their activities correspond to our trajectories. The hybrid system model of <ref> [7] </ref> is similar to the phase transition system model except that it includes synchronization labels that correspond to our actions. This allows a notion of parallel composition in the hybrid system model. <p> Actions: Output: ping and pong Vars: Internal: count 2 N, initially 0 Discrete Transitions: ping: Pre: count is even Eff: count := count + 1 pong: Pre: count is odd Eff: count := count + 1 Tasks: PING = fpingg : [3; 4] PONG = fpongg : <ref> [7; 20] </ref> Notation All HIOAs that result from MMT-specifications have the now variable. So that we may compose these HIOAs and others that have a similar now variable, we adopt a convention for the now variable.
Reference: [8] <author> Datta N. Godbole, John Lygeros, and Shankar Sastry. </author> <title> Hierarchical hybrid con-trol: A case study. Prelminary report for the california path program, </title> <institution> Institute of Transportations Studies, University of California, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: The Deceleration Maneuver Typical examples of automated transportation systems include the Raytheon Personal Rapid Transit System and the California PATH project <ref> [8, 9, 10] </ref>. In these hybrid systems, a number of computer controlled vehicles share a network of tracks or highways. The digital part of the system is the computer vehicle controller and the analog part of the system is the vehicle, its engine, the guideway, and so forth. <p> In these hybrid systems, a number of computer controlled vehicles share a network of tracks or highways. The digital part of the system is the computer vehicle controller and the analog part of the system is the vehicle, its engine, the guideway, and so forth. In <ref> [8] </ref> the control of the transportation system is described hierarchically. The higher levels of such a hierarchical system coordinate and determine strategy while the lowest level performs specific maneuvers. <p> Roy Johnson and Steve Spielman at Raytheon are leading the design and development of a prototype advanced personal rapid transit system, based partly on concepts developed by Dr. Edward Anderson of the Taxi2000 Corp. Prof. Shankar Sastry and his colleagues at Berkeley have studied intelligent highway systems <ref> [8, 9, 10] </ref> and specific scenarios that arise therein. For example, they have considered equipping cars with "smart" cruise controls that can adapt to other cars in the vicinity [9]. <p> Much work remains for the M.I.T. Theory of Distributed Systems research group in our long-term project applying these techniques to automated transit systems. Current research involves further case studies in ground based transportation systems. We are modeling multi-vehicle maneuvers arising in the California PATH project <ref> [8, 9, 10] </ref>. The high-level and preliminary treatment of safety systems in [15] will be extended to examine the implementations of those systems in the Raytheon Personal Rapid Transit project.
Reference: [9] <author> Datta Godbole and John Lygeros. </author> <title> Longitudinal control of the lead car of a platoon. </title> <type> California PATH Technical Memorandum 93-7, </type> <institution> Institute of Transportation Studies, University of California, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: The Deceleration Maneuver Typical examples of automated transportation systems include the Raytheon Personal Rapid Transit System and the California PATH project <ref> [8, 9, 10] </ref>. In these hybrid systems, a number of computer controlled vehicles share a network of tracks or highways. The digital part of the system is the computer vehicle controller and the analog part of the system is the vehicle, its engine, the guideway, and so forth. <p> Roy Johnson and Steve Spielman at Raytheon are leading the design and development of a prototype advanced personal rapid transit system, based partly on concepts developed by Dr. Edward Anderson of the Taxi2000 Corp. Prof. Shankar Sastry and his colleagues at Berkeley have studied intelligent highway systems <ref> [8, 9, 10] </ref> and specific scenarios that arise therein. For example, they have considered equipping cars with "smart" cruise controls that can adapt to other cars in the vicinity [9]. <p> Edward Anderson of the Taxi2000 Corp. Prof. Shankar Sastry and his colleagues at Berkeley have studied intelligent highway systems [8, 9, 10] and specific scenarios that arise therein. For example, they have considered equipping cars with "smart" cruise controls that can adapt to other cars in the vicinity <ref> [9] </ref>. Another project involving formal modeling of train control systems, using some computer science techniques, was carried out by Schneider and co-workers [23]. Their emphasis was on the use of an extension of Dijkstra's weakest-precondition calculus to derive correct solutions. <p> Much work remains for the M.I.T. Theory of Distributed Systems research group in our long-term project applying these techniques to automated transit systems. Current research involves further case studies in ground based transportation systems. We are modeling multi-vehicle maneuvers arising in the California PATH project <ref> [8, 9, 10] </ref>. The high-level and preliminary treatment of safety systems in [15] will be extended to examine the implementations of those systems in the Raytheon Personal Rapid Transit project.
Reference: [10] <author> John Lygeros and Datta N. Godbole. </author> <title> An interface between continuous and discrete-event controllers for vehicle automation. </title> <institution> California PATH Research Report UCB-ITS-PRR-94-12, Institute of Transportations Studies, University of California, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: The Deceleration Maneuver Typical examples of automated transportation systems include the Raytheon Personal Rapid Transit System and the California PATH project <ref> [8, 9, 10] </ref>. In these hybrid systems, a number of computer controlled vehicles share a network of tracks or highways. The digital part of the system is the computer vehicle controller and the analog part of the system is the vehicle, its engine, the guideway, and so forth. <p> Roy Johnson and Steve Spielman at Raytheon are leading the design and development of a prototype advanced personal rapid transit system, based partly on concepts developed by Dr. Edward Anderson of the Taxi2000 Corp. Prof. Shankar Sastry and his colleagues at Berkeley have studied intelligent highway systems <ref> [8, 9, 10] </ref> and specific scenarios that arise therein. For example, they have considered equipping cars with "smart" cruise controls that can adapt to other cars in the vicinity [9]. <p> Much work remains for the M.I.T. Theory of Distributed Systems research group in our long-term project applying these techniques to automated transit systems. Current research involves further case studies in ground based transportation systems. We are modeling multi-vehicle maneuvers arising in the California PATH project <ref> [8, 9, 10] </ref>. The high-level and preliminary treatment of safety systems in [15] will be extended to examine the implementations of those systems in the Raytheon Personal Rapid Transit project.
Reference: [11] <author> Nancy Lynch. </author> <title> Modelling and verification of automated transit systems, using timed automata, invariants and simulations. </title> <booktitle> In DIMACS Workshop on Verification and Control of Hybrid Systems, </booktitle> <month> October </month> <year> 1995. </year> <note> To appear in R. </note> <editor> Alur, T. Henzinger, and E. Sontag, editors, </editor> <title> Hybrid Systems III, </title> <note> Lecture Notes in Computer Science, Springer-Verlag. Also, to appear as MIT/LCS/TM-545. </note>
Reference-contexts: Related Work This case study is part of a long-term project in the M.I.T. Theory of Distributed Systems research group on modeling, verifying, and analyzing problems arising in automated transit systems. A survey of the project appears in <ref> [11] </ref>. The case study, [12, 13], examines the train and gate problem from traditional railroad control. In [14], the author uses abstraction to relate continuous and discrete control of a vehicle maneuver. Safety systems for automated transit are examined in [15].
Reference: [12] <author> Constance Heitmeyer and Nancy Lynch. </author> <title> The generalized railroad crossing: A case study in formal verification of real-time systems. </title> <booktitle> In Proceedings of the IEEE Real-Time Systems Symposium., </booktitle> <pages> pages 120-131, </pages> <address> San Juan, Puerto Rico, December 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Related Work This case study is part of a long-term project in the M.I.T. Theory of Distributed Systems research group on modeling, verifying, and analyzing problems arising in automated transit systems. A survey of the project appears in [11]. The case study, <ref> [12, 13] </ref>, examines the train and gate problem from traditional railroad control. In [14], the author uses abstraction to relate continuous and discrete control of a vehicle maneuver. Safety systems for automated transit are examined in [15].
Reference: [13] <author> Constance Heitmeyer and Nancy Lynch. </author> <title> The generalized railroad crossing: A case study in formal verification of real-time systems. </title> <type> Technical Memo MIT/LCS/TM-511, </type> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <address> Cambridge, MA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: Related Work This case study is part of a long-term project in the M.I.T. Theory of Distributed Systems research group on modeling, verifying, and analyzing problems arising in automated transit systems. A survey of the project appears in [11]. The case study, <ref> [12, 13] </ref>, examines the train and gate problem from traditional railroad control. In [14], the author uses abstraction to relate continuous and discrete control of a vehicle maneuver. Safety systems for automated transit are examined in [15].
Reference: [14] <author> Nancy Lynch. </author> <title> A three-level analysis of a simple acceleration maneuver, with uncertainties. </title> <type> Manuscript. </type> <note> WWW URL=http://theory.lcs.mit.edu/three-level.html. </note>
Reference-contexts: Theory of Distributed Systems research group on modeling, verifying, and analyzing problems arising in automated transit systems. A survey of the project appears in [11]. The case study, [12, 13], examines the train and gate problem from traditional railroad control. In <ref> [14] </ref>, the author uses abstraction to relate continuous and discrete control of a vehicle maneuver. Safety systems for automated transit are examined in [15]. The development of models and verification methods for timing-based systems is an active research area within computer science. <p> Nevertheless, we anticipate further progress in using this facet of the HIOA model. We look forward to further examination of the utility of simulation proofs for hybrid systems. An effort toward this begins in <ref> [14] </ref> but much remains to be done. We chose to avoid a highly abstract example controller in Chapter 5 because for this example the increased non-determinism would lead to complexity that would obscure the description.
Reference: [15] <author> H.B. Weinberg, Nancy Lynch, and Norman Delisle. </author> <title> Verification of automated vehicle protection systems. </title> <booktitle> In DIMACS Workshop on Verification and Control of Hybrid Systems, </booktitle> <month> October </month> <year> 1995. </year> <note> To appear in R. </note> <editor> Alur, T. Henzinger, and E. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: A survey of the project appears in [11]. The case study, [12, 13], examines the train and gate problem from traditional railroad control. In [14], the author uses abstraction to relate continuous and discrete control of a vehicle maneuver. Safety systems for automated transit are examined in <ref> [15] </ref>. The development of models and verification methods for timing-based systems is an active research area within computer science. The timed I/O automaton model is similar, for example, to a model of Alur and Dill [16], to one of Lamport [17] and to one of Henzinger, Manna and Pnueli [18]. <p> In this work we modeled the physical part of the system, the train, as a single automaton. We believe that the shared variables of HIOAs are the key to a more modular treatment of physical systems. Some modest progress in this direction appears in <ref> [15] </ref> where sensors and actuators are modeled as separate automata which share variables with the physical system. Nevertheless, we anticipate further progress in using this facet of the HIOA model. We look forward to further examination of the utility of simulation proofs for hybrid systems. <p> Current research involves further case studies in ground based transportation systems. We are modeling multi-vehicle maneuvers arising in the California PATH project [8, 9, 10]. The high-level and preliminary treatment of safety systems in <ref> [15] </ref> will be extended to examine the implementations of those systems in the Raytheon Personal Rapid Transit project. We hope to develop a machine parsable language for hybrid system specifications and to develop tools for computer aided proof checking and verification.
Reference: [16] <author> R. Alur and D. Dill. </author> <title> Automata for modelling real-time systems. </title> <booktitle> In Proc. 17th ICALP Lecture Notes in Computer Science 443, </booktitle> <pages> pages 322-335. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Safety systems for automated transit are examined in [15]. The development of models and verification methods for timing-based systems is an active research area within computer science. The timed I/O automaton model is similar, for example, to a model of Alur and Dill <ref> [16] </ref>, to one of Lamport [17] and to one of Henzinger, Manna and Pnueli [18].
Reference: [17] <author> Leslie Lamport. </author> <title> The temporal logic of actions. </title> <type> Technical Report 79, </type> <institution> Digital Systems Research Center, </institution> <month> December 25 </month> <year> 1991. </year>
Reference-contexts: Safety systems for automated transit are examined in [15]. The development of models and verification methods for timing-based systems is an active research area within computer science. The timed I/O automaton model is similar, for example, to a model of Alur and Dill [16], to one of Lamport <ref> [17] </ref> and to one of Henzinger, Manna and Pnueli [18].
Reference: [18] <author> Thomas Henzinger, Zohar Manna, and Amir Pnueli. </author> <title> Timed transition systems. </title> <editor> In J. W. de Bakker, C. Huizing, and G. Rozenberg, editors, </editor> <booktitle> Proceedings of REX Workshop "Real-Time: Theory in Practice", volume 600 of Lecture Notes in Comupter Science, </booktitle> <pages> pages 226-251. </pages> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1991. </year>
Reference-contexts: The development of models and verification methods for timing-based systems is an active research area within computer science. The timed I/O automaton model is similar, for example, to a model of Alur and Dill [16], to one of Lamport [17] and to one of Henzinger, Manna and Pnueli <ref> [18] </ref>. In contrast to those formalisms, the development and use of the timed I/O automaton model has focused on compositional properties [19], implementation relations [20], and semi-automated proof checking [21] with less emphasis on syntactic forms, temporal logics, and fully automatic analysis. <p> Just as timed I/O automata have been extended to hybrid I/O automata to treat hybrid systems, so have other real-time models. For example, the timed transition system model of <ref> [18] </ref> is extended to the phase transition system model in [6]. Phase transition systems are analogous to hybrid I/O automata: their transitions correspond to our discrete steps; their activities correspond to our trajectories.
Reference: [19] <author> Frits Vaandrager and Nancy Lynch. </author> <title> Action transducers and timed automata. </title> <editor> In W. R. Cleaveland, editor, </editor> <booktitle> CONCUR '92: 3rd International Conference on Concurrency Theory, volume 630 of Lecture Notes in Computer Science, </booktitle> <pages> pages 436-455, </pages> <address> Stony Brook, NY, USA, August 1992. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: In contrast to those formalisms, the development and use of the timed I/O automaton model has focused on compositional properties <ref> [19] </ref>, implementation relations [20], and semi-automated proof checking [21] with less emphasis on syntactic forms, temporal logics, and fully automatic analysis. Just as timed I/O automata have been extended to hybrid I/O automata to treat hybrid systems, so have other real-time models.
Reference: [20] <author> Jtrgen Stgaard-Andersen. </author> <title> Correctness of Protocols in Distributed Systems. </title> <type> PhD thesis, </type> <institution> Technical University of Denmark, Lyngby, Denmark, </institution> <month> December </month> <year> 1993. </year> <month> ID-TR: </month> <pages> 1993-131. </pages>
Reference-contexts: In contrast to those formalisms, the development and use of the timed I/O automaton model has focused on compositional properties [19], implementation relations <ref> [20] </ref>, and semi-automated proof checking [21] with less emphasis on syntactic forms, temporal logics, and fully automatic analysis. Just as timed I/O automata have been extended to hybrid I/O automata to treat hybrid systems, so have other real-time models. <p> Actions: Output: ping and pong Vars: Internal: count 2 N, initially 0 Discrete Transitions: ping: Pre: count is even Eff: count := count + 1 pong: Pre: count is odd Eff: count := count + 1 Tasks: PING = fpingg : [3; 4] PONG = fpongg : <ref> [7; 20] </ref> Notation All HIOAs that result from MMT-specifications have the now variable. So that we may compose these HIOAs and others that have a similar now variable, we adopt a convention for the now variable.
Reference: [21] <author> Victor Luchangco. </author> <title> Using simulation techniques to prove timing properties. </title> <type> Master's thesis, </type> <institution> MIT Electrical Engineering and Computer Science, </institution> <year> 1995. </year> <note> In progress. </note>
Reference-contexts: In contrast to those formalisms, the development and use of the timed I/O automaton model has focused on compositional properties [19], implementation relations [20], and semi-automated proof checking <ref> [21] </ref> with less emphasis on syntactic forms, temporal logics, and fully automatic analysis. Just as timed I/O automata have been extended to hybrid I/O automata to treat hybrid systems, so have other real-time models.
Reference: [22] <author> Nancy Lynch and Frits Vaandrager. </author> <title> Forward and backward simulations Part I: </title> <journal> Untimed systems. Info. Comput., </journal> <note> to appear. </note>
Reference-contexts: The methods of invariant assertions, abstraction mappings, forward and backward simulations, history and prophecy variables are used in many places in computer science. We will not attempt to attribute all these notions. An overview of these methods, for untimed and timed systems, appears in <ref> [22, 2, 3] </ref>. Roy Johnson and Steve Spielman at Raytheon are leading the design and development of a prototype advanced personal rapid transit system, based partly on concepts developed by Dr. Edward Anderson of the Taxi2000 Corp. Prof.
Reference: [23] <author> Keith Marzullo, Fred B. Schneider, and Navin Budhiraja. </author> <title> Derivation of sequential real-time, process control programs. </title> <editor> In Andre M. van Tilborg and Gary M. Koob, editors, </editor> <booktitle> Foundations of Real-Time Computing, </booktitle> <pages> pages 39-54. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: For example, they have considered equipping cars with "smart" cruise controls that can adapt to other cars in the vicinity [9]. Another project involving formal modeling of train control systems, using some computer science techniques, was carried out by Schneider and co-workers <ref> [23] </ref>. Their emphasis was on the use of an extension of Dijkstra's weakest-precondition calculus to derive correct solutions.
Reference: [24] <author> Gunter Leeb and Nancy Lynch. </author> <title> Proving safety properties of the steam boiler controller: Formal methods for industrial applications, a case study, </title> <month> January </month> <year> 1996. </year> <title> Submitted for publication. Presented at the Methods for Semantics and Specification, </title> <booktitle> International Conference and Research Center for Computer Science, </booktitle> <address> Schloss, Dagstuhl, Germany, </address> <month> June </month> <year> 1995, </year> <title> as "Using Timed Automata for the Steam Boiler Controller Problem.". </title>
Reference-contexts: Their emphasis was on the use of an extension of Dijkstra's weakest-precondition calculus to derive correct solutions. Other case studies in modeling hybrid systems include two analyses of steam boiler controllers | one using timed I/O automaton methods <ref> [24] </ref> and another using the automated proof checker PVS [25] | and a project using a variety of techniques to model and verify controllers for aircraft landing gear [26].
Reference: [25] <author> Jan Vitt and Jozef Hooman. </author> <title> Specification and verification of a real-time steam boiler system. </title> <booktitle> In Second European Workshop on Real-Time and Hybrid Systems, </booktitle> <pages> pages 205-208, </pages> <address> Grenoble, France, </address> <month> May </month> <year> 1995. </year> <note> Proceedings for participants only. </note>
Reference-contexts: Their emphasis was on the use of an extension of Dijkstra's weakest-precondition calculus to derive correct solutions. Other case studies in modeling hybrid systems include two analyses of steam boiler controllers | one using timed I/O automaton methods [24] and another using the automated proof checker PVS <ref> [25] </ref> | and a project using a variety of techniques to model and verify controllers for aircraft landing gear [26]. Outline In Chapter 2 we give a complete but terse treatment of the HIOA model and the notational conventions used in this case study.
Reference: [26] <author> Simin Nadjm-Tehrani. </author> <title> Modelling and formal analysis of an aircraft landing gear system. </title> <booktitle> In Second European Workshop on Real-Time and Hybrid Systems, </booktitle> <pages> pages 239-246, </pages> <address> Grenoble, France, </address> <month> May </month> <year> 1995. </year> <note> Proceedings for participants only. </note>
Reference-contexts: Other case studies in modeling hybrid systems include two analyses of steam boiler controllers | one using timed I/O automaton methods [24] and another using the automated proof checker PVS [25] | and a project using a variety of techniques to model and verify controllers for aircraft landing gear <ref> [26] </ref>. Outline In Chapter 2 we give a complete but terse treatment of the HIOA model and the notational conventions used in this case study.
Reference: [27] <author> Nancy A. Lynch and Hagit Attiya. </author> <title> Using mappings to prove timing properties. </title> <journal> Distributed Computing, </journal> <volume> 6(2) </volume> <pages> 121-139, </pages> <year> 1992. </year>
Reference-contexts: To make this report self contained, this chapter gives a complete but terse treatment of the HIOA model with an emphasis on those aspects used in subsequent chapters. The presentation is based on [1] and <ref> [27] </ref>. The chapter is organized as follows. We begin by introducing the notion of a trajectory; trajectories are functions that represent the continuous evolution of state. We proceed to define hybrid I/O automata (HIOA) and their executions and traces. <p> We prefer to view it as a subclass with a particular notation, rather than as a separate formalism. This section is based on a similar exposition in <ref> [27] </ref>. We give a formal definition of an MMT-specification, of a mapping from an MMT-specification to a HIOA, and an example MMT-specification together with its translation into standard notation. <p> 2 T (a) w (t):now w (0):last (C i ) (time does not pass deadlines) (b) w (t):first (C i ) = w (0):first (C i ) (deadlines remain unchanged) (c) w (t):last (C i ) = w (0):last (C i ) One difference between the exposition here and in <ref> [27] </ref>, is that we do not require that the upper bound of a task be non-zero. Such a requirement would guarantee certain properties that are required in [27] but that are beyond the scope of this exposition. <p> (deadlines remain unchanged) (c) w (t):last (C i ) = w (0):last (C i ) One difference between the exposition here and in <ref> [27] </ref>, is that we do not require that the upper bound of a task be non-zero. Such a requirement would guarantee certain properties that are required in [27] but that are beyond the scope of this exposition. A simple example MMT-specification ping-pong appears in Table 2.2; its corresponding HIOA hybrid (ping-pong) appears in Table 2.3 in standard notation.
Reference: [28] <author> N. Lynch and M. Tuttle. </author> <title> An introduction to Input/Output automata. </title> <journal> CWI-Quarterly, </journal> <volume> 2(3) </volume> <pages> 219-246, </pages> <month> September </month> <year> 1989. </year> <institution> Centrum voor Wiskunde en Informat-ica, </institution> <address> Amsterdam, The Netherlands. </address>
Reference-contexts: Since there are no input variables to skew-timer, that category does not appear. Variables are specified with a name and a type; an initial value is given for internal and output variables. * The discrete transitions are specified using precondition-effect, Pascal-like code as in <ref> [28, 29] </ref>. Each set of transitions which shares an action label (or set of related action labels) is specified as one precondition-effect block. For example, the first block describes all set-timer labeled transitions.
Reference: [29] <author> N. Lynch and M. Tuttle. </author> <title> Hierarchical correctness proofs for distributed algo-rithms. </title> <booktitle> In Proceedings of the 6 th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 137-151, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: Since there are no input variables to skew-timer, that category does not appear. Variables are specified with a name and a type; an initial value is given for internal and output variables. * The discrete transitions are specified using precondition-effect, Pascal-like code as in <ref> [28, 29] </ref>. Each set of transitions which shares an action label (or set of related action labels) is specified as one precondition-effect block. For example, the first block describes all set-timer labeled transitions.
Reference: [30] <author> Michael Merritt, Francemary Modugno, and Mark Tuttle. </author> <title> Time constrained automata. </title> <editor> In J. C. M. Baeten and J. F. Goote, editors, CONCUR'91: </editor> <booktitle> 2nd International Conference on Concurrency Theory, volume 527 of Lecture Notes in Comupter Science, </booktitle> <pages> pages 408-423, </pages> <address> Amsterdam, The Netherlands, </address> <month> August </month> <year> 1991. </year> <note> Springer-Verlag. </note>
Reference-contexts: The name "MMT" derives from the names Merritt, Modugno, and Tuttle, the authors of <ref> [30] </ref> where they present a model which corresponds to this subclass. We prefer to view it as a subclass with a particular notation, rather than as a separate formalism. This section is based on a similar exposition in [27].
References-found: 30

