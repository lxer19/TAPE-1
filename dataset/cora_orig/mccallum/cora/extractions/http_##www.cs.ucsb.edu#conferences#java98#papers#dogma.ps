URL: http://www.cs.ucsb.edu/conferences/java98/papers/dogma.ps
Refering-URL: http://www.cs.ucsb.edu/conferences/java98/program.html
Root-URL: http://www.cs.ucsb.edu
Email: fglenn, clement, snellg@cs.byu.edu  
Phone: (801) 378-7608  
Title: DOGMA: Distributed Object Group Management Architecture  
Author: Glenn Judd, Mark Clement, Quinn Snell 
Address: Provo, Utah 84602-6576  
Affiliation: Computer Science Department Brigham Young University  
Abstract: The performance of Java just-in-time compilers currently approaches native C++, making Java a serious contender for supercomputing application development. This paper presents DOGMA-a new Java based system which enables parallel computing on heterogeneous computers. DOGMA supports parallel programming in both a traditional message passing form and a novel object-oriented approach. DOGMA provides support for dedicated clusters as well as idle workstations through the use of a web based browse-in feature or the DOGMA screen saver. This research provides a unified environment for developing high performance supercomputing applications on heterogeneous systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. D. Alexandrov, M. Ibel, K. E. Schauser, and C. J. Scheiman. Superweb: </author> <title> Towards a global-based parallel computing infrastructure. </title> <booktitle> In Proceedings of the 11th International Parallel Processing Symposium, </booktitle> <month> April </month> <year> 1997. </year>
Reference: [2] <author> A. Baratloo, M. Karaul, Z. Kedem, and P. Wyckoff. </author> <title> Charlotte: Metacomputing on the web. </title> <booktitle> In Proceedings of the ISCA International Conference on Parallel and Distributed Computing, </booktitle> <year> 1996. </year>
Reference-contexts: DOGMA supports traditional message passing via an MPI implementation, but features object-group oriented programming as its preferred paradigm. Linda derivatives such as Jada [19], JavaSpaces [13] and Javelin [4] have not been able to achieve comparable performance. Java/DSM [21], Spar [15], JavaParty [18] and Charlotte <ref> [2] </ref> provide a shared address space, while DOGMA seeks to make the developer aware of the distributed nature of the program in order to increase performance. JAVADC [3], Lilith [6], WebFlow [9], and WWVM [5] provide frameworks for controlling natively coded parallel programming systems.
Reference: [3] <author> Z. Chen, K. Maly, P. Mehrotra, P. K. Vangala, and M. Zubair. </author> <title> Web based framework for distributed computing. </title> <booktitle> In Proceedings of the ACM 1997 PPoPP Workshop on Java for Science and Engineering Computation, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: Java/DSM [21], Spar [15], JavaParty [18] and Charlotte [2] provide a shared address space, while DOGMA seeks to make the developer aware of the distributed nature of the program in order to increase performance. JAVADC <ref> [3] </ref>, Lilith [6], WebFlow [9], and WWVM [5] provide frameworks for controlling natively coded parallel programming systems. They are functionally orthogonal to DOGMA which seeks to provide a Java-based system that is completely platform independent.
Reference: [4] <author> B. O. Christiansen, P. Cappello, M. F. Ionescu, M. O. Neary, K. E. Schauser, and D. Wu. Javelin: </author> <title> Internet-based parallel computing using java. </title> <booktitle> In ACM 1997 PPoPP Workshop on Java for Science and Engineering Computation, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: DOGMA supports traditional message passing via an MPI implementation, but features object-group oriented programming as its preferred paradigm. Linda derivatives such as Jada [19], JavaSpaces [13] and Javelin <ref> [4] </ref> have not been able to achieve comparable performance. Java/DSM [21], Spar [15], JavaParty [18] and Charlotte [2] provide a shared address space, while DOGMA seeks to make the developer aware of the distributed nature of the program in order to increase performance. <p> The Parallel Java with Global Object Space [14] sytem is object-group based as is DOGMA, but it does not provide for volunteer computing or dynamic class loading. Systems such as JET [17], SuperWeb [1]/Javelin <ref> [4] </ref> and Charlotte are similar to DOGMA in that they incorporate Web browser functionality; however, DOGMA also adds cluster based computing in order to utilize groups of nodes for which a user has login privilege. Additionally, DOGMA adds screen saver based browsing.
Reference: [5] <author> K. Dincer and G. C. Fox. </author> <title> Building a world-wide virtual machine based on web and hpcc technologies. </title> <booktitle> In Proceedings Supercomputing '96, </booktitle> <month> November </month> <year> 1996. </year>
Reference-contexts: Java/DSM [21], Spar [15], JavaParty [18] and Charlotte [2] provide a shared address space, while DOGMA seeks to make the developer aware of the distributed nature of the program in order to increase performance. JAVADC [3], Lilith [6], WebFlow [9], and WWVM <ref> [5] </ref> provide frameworks for controlling natively coded parallel programming systems. They are functionally orthogonal to DOGMA which seeks to provide a Java-based system that is completely platform independent.
Reference: [6] <author> D. Evensky, A. Gentile, L. Camp, and R. Armstrong. </author> <title> Lilith: Scalable execution of user code for distributed computing. </title> <booktitle> In Proceedings of the Sixth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <pages> pages 305-314, </pages> <year> 1997. </year>
Reference-contexts: Java/DSM [21], Spar [15], JavaParty [18] and Charlotte [2] provide a shared address space, while DOGMA seeks to make the developer aware of the distributed nature of the program in order to increase performance. JAVADC [3], Lilith <ref> [6] </ref>, WebFlow [9], and WWVM [5] provide frameworks for controlling natively coded parallel programming systems. They are functionally orthogonal to DOGMA which seeks to provide a Java-based system that is completely platform independent.
Reference: [7] <author> A. Ferrari. Jpvm. </author> <type> Technical report, </type> <note> http://www.cs.virginia.edu/~ajf2j/jpvm.html, 1997. </note>
Reference-contexts: The following section differentiates DOGMA from these existing systems. The JavaPVM [20], JPVM <ref> [7] </ref> and IceT [11] message passing schemes do not provide automatic data distribution nor do they provide the object group method invocation found in DOGMA. DOGMA supports traditional message passing via an MPI implementation, but features object-group oriented programming as its preferred paradigm.
Reference: [8] <author> M. Forum. </author> <title> Mpi: A message-passing interface standard. </title> <type> Technical report, </type> <institution> University of Tennessee, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: Recently the creation of distributed/parallel programs has been eased somewhat by developments such as MPI <ref> [8] </ref>, PVM [10], and CORBA [16]. These standards have allowed parallel/distributed programs to be written that will function on several different platforms in both tightly and loosely coupled environments. Nevertheless, despite the advances in source code level compatibility, traditional distributed programming environments require machine specific compilation and operating system customization.
Reference: [9] <author> W. Furmanski and G. Fox. </author> <title> Webflow a visual programming paradigm for web/java based coarse grain distributed computing. </title> <type> Technical report, </type> <institution> From handout material at Supercomputing '96, </institution> <year> 1996. </year>
Reference-contexts: Java/DSM [21], Spar [15], JavaParty [18] and Charlotte [2] provide a shared address space, while DOGMA seeks to make the developer aware of the distributed nature of the program in order to increase performance. JAVADC [3], Lilith [6], WebFlow <ref> [9] </ref>, and WWVM [5] provide frameworks for controlling natively coded parallel programming systems. They are functionally orthogonal to DOGMA which seeks to provide a Java-based system that is completely platform independent.
Reference: [10] <author> A. Geist, A. Beguelin, J. Dongarra, W. Jiang, R. Manchek, and V. Sunderam. </author> <title> PVM 3 user's guide and reference manual. </title> <type> Technical Report ORNL/TM-12187, </type> <institution> Oak Ridge National Laboratory, </institution> <month> September </month> <year> 1994. </year>
Reference-contexts: Recently the creation of distributed/parallel programs has been eased somewhat by developments such as MPI [8], PVM <ref> [10] </ref>, and CORBA [16]. These standards have allowed parallel/distributed programs to be written that will function on several different platforms in both tightly and loosely coupled environments. Nevertheless, despite the advances in source code level compatibility, traditional distributed programming environments require machine specific compilation and operating system customization.
Reference: [11] <author> P. A. Gray and V. S. Sunderam. IceT: </author> <title> Distributed computing and java. </title> <booktitle> In Proceedings of the ACM 1997 PPoPP Workshop on Java for Science and Engineering Computation, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: The following section differentiates DOGMA from these existing systems. The JavaPVM [20], JPVM [7] and IceT <ref> [11] </ref> message passing schemes do not provide automatic data distribution nor do they provide the object group method invocation found in DOGMA. DOGMA supports traditional message passing via an MPI implementation, but features object-group oriented programming as its preferred paradigm.
Reference: [12] <author> A. S. Grimshaw. </author> <title> An introduction to parallel object-oriented programming with mentat. </title> <type> Technical Report 91-07, </type> <institution> University of Virginia, </institution> <year> 1991. </year>
Reference-contexts: Currently, DJM is a centralized system managed by a central entity, DJMManager, which coordinates the actions of all system entities. Each node (JVM) in the system has a NodeManager which coordinates the node's interaction with DJMManager. As in Mentat <ref> [12] </ref>, nodes are organized into families and clusters. Families of nodes are nodes that have a similar configuration and architecture. Clusters of nodes are nodes that are located near each other physically. Unlike Mentat, there is not a single static system configuration database. Rather, the system is configured dynamically.
Reference: [13] <author> Javasoft. Javaspaces. </author> <type> Technical report, </type> <note> http://chatsubo.javasoft.com/javaspaces/, 1997. </note>
Reference-contexts: DOGMA supports traditional message passing via an MPI implementation, but features object-group oriented programming as its preferred paradigm. Linda derivatives such as Jada [19], JavaSpaces <ref> [13] </ref> and Javelin [4] have not been able to achieve comparable performance. Java/DSM [21], Spar [15], JavaParty [18] and Charlotte [2] provide a shared address space, while DOGMA seeks to make the developer aware of the distributed nature of the program in order to increase performance.
Reference: [14] <author> L. V. Kale, M. Bhandarkar, and T. Wilmarth. </author> <title> Design and implementation of parallel java with global object space. </title> <booktitle> In Proceedings of the International Conference on Parallel and Distributed Processing Techniques and Applications, </booktitle> <pages> pages 235-244, </pages> <year> 1997. </year>
Reference-contexts: JAVADC [3], Lilith [6], WebFlow [9], and WWVM [5] provide frameworks for controlling natively coded parallel programming systems. They are functionally orthogonal to DOGMA which seeks to provide a Java-based system that is completely platform independent. The Parallel Java with Global Object Space <ref> [14] </ref> sytem is object-group based as is DOGMA, but it does not provide for volunteer computing or dynamic class loading.
Reference: [15] <author> H. J. S. Kees van Reeuwijk, Arjan J.C. van Gemund. Spar: </author> <title> A programming language for semi-automatic compilation of parallel programs. </title> <booktitle> In ACM 1997 PPoPP Workshop on Java for Science and Engineering Computation, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: DOGMA supports traditional message passing via an MPI implementation, but features object-group oriented programming as its preferred paradigm. Linda derivatives such as Jada [19], JavaSpaces [13] and Javelin [4] have not been able to achieve comparable performance. Java/DSM [21], Spar <ref> [15] </ref>, JavaParty [18] and Charlotte [2] provide a shared address space, while DOGMA seeks to make the developer aware of the distributed nature of the program in order to increase performance. JAVADC [3], Lilith [6], WebFlow [9], and WWVM [5] provide frameworks for controlling natively coded parallel programming systems.
Reference: [16] <author> OMG. </author> <title> The common object request broker: Architecture and specification. </title> <editor> 2.0 ed., </editor> <month> July </month> <year> 1997. </year>
Reference-contexts: Recently the creation of distributed/parallel programs has been eased somewhat by developments such as MPI [8], PVM [10], and CORBA <ref> [16] </ref>. These standards have allowed parallel/distributed programs to be written that will function on several different platforms in both tightly and loosely coupled environments. Nevertheless, despite the advances in source code level compatibility, traditional distributed programming environments require machine specific compilation and operating system customization.
Reference: [17] <author> H. Pedroso, L. M. Silva, and J. G. Silva. </author> <title> Web-based metacomputing with jet. </title> <booktitle> In Proceedings of the ACM 1997 PPoPP Workshop on Java for Science and Engineering Computation, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: They are functionally orthogonal to DOGMA which seeks to provide a Java-based system that is completely platform independent. The Parallel Java with Global Object Space [14] sytem is object-group based as is DOGMA, but it does not provide for volunteer computing or dynamic class loading. Systems such as JET <ref> [17] </ref>, SuperWeb [1]/Javelin [4] and Charlotte are similar to DOGMA in that they incorporate Web browser functionality; however, DOGMA also adds cluster based computing in order to utilize groups of nodes for which a user has login privilege. Additionally, DOGMA adds screen saver based browsing.
Reference: [18] <author> M. Philippsen and M. Zenger. </author> <title> Javaparty transparent remote objects in java. </title> <booktitle> In Proceedings of the ACM 1997 PPoPP Workshop on Java for Science and Engineering Computation, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: DOGMA supports traditional message passing via an MPI implementation, but features object-group oriented programming as its preferred paradigm. Linda derivatives such as Jada [19], JavaSpaces [13] and Javelin [4] have not been able to achieve comparable performance. Java/DSM [21], Spar [15], JavaParty <ref> [18] </ref> and Charlotte [2] provide a shared address space, while DOGMA seeks to make the developer aware of the distributed nature of the program in order to increase performance. JAVADC [3], Lilith [6], WebFlow [9], and WWVM [5] provide frameworks for controlling natively coded parallel programming systems.
Reference: [19] <author> D. Rossi. </author> <title> Jada: Multiple object spaces for java. </title> <type> Technical report, </type> <note> http://www.cs.unibo.it/~rossi/jada/, 1996. </note>
Reference-contexts: DOGMA supports traditional message passing via an MPI implementation, but features object-group oriented programming as its preferred paradigm. Linda derivatives such as Jada <ref> [19] </ref>, JavaSpaces [13] and Javelin [4] have not been able to achieve comparable performance. Java/DSM [21], Spar [15], JavaParty [18] and Charlotte [2] provide a shared address space, while DOGMA seeks to make the developer aware of the distributed nature of the program in order to increase performance.
Reference: [20] <author> D. Thurman. Javapvm. </author> <type> Technical report, </type> <note> http://homer.isye.gatech.edu/chmsr/JavaPVM.html/, 1997. </note>
Reference-contexts: The following section differentiates DOGMA from these existing systems. The JavaPVM <ref> [20] </ref>, JPVM [7] and IceT [11] message passing schemes do not provide automatic data distribution nor do they provide the object group method invocation found in DOGMA. DOGMA supports traditional message passing via an MPI implementation, but features object-group oriented programming as its preferred paradigm.
Reference: [21] <author> W. Yu and A. Cox. Java/DSM: </author> <title> A platform for heterogeneous computing. </title> <booktitle> In Proceedings of the ACM 1997 PPoPP Workshop on Java for Science and Engineering Computation, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: DOGMA supports traditional message passing via an MPI implementation, but features object-group oriented programming as its preferred paradigm. Linda derivatives such as Jada [19], JavaSpaces [13] and Javelin [4] have not been able to achieve comparable performance. Java/DSM <ref> [21] </ref>, Spar [15], JavaParty [18] and Charlotte [2] provide a shared address space, while DOGMA seeks to make the developer aware of the distributed nature of the program in order to increase performance.
References-found: 21

