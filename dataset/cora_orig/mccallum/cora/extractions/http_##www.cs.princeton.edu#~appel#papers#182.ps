URL: http://www.cs.princeton.edu/~appel/papers/182.ps
Refering-URL: http://www.cs.princeton.edu/~appel/papers/
Root-URL: http://www.cs.princeton.edu
Title: Keywords: garbage collection, dynamic memory allocation, concurrency  
Author: Andrew W. Appel 
Date: November 1988  
Address: Princeton, NJ 08544  
Affiliation: Department of Computer Science Princeton University  
Abstract: In a programming environment with both concurrency and automatic garbage collection, the allocation and initialization of a new record is a sensitive matter: if it is interrupted halfway through, the allocating fl Supported in part by NSF Grants DCR-8603453 and CCR-8806121 and by a Digital Equipment Corp. Faculty Incentive Grant 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Andrew W. Appel. </author> <title> Garbage collection can be faster than stack allocation. </title> <journal> Information Processing Letters, </journal> <volume> 25(4) </volume> <pages> 275-279, </pages> <year> 1987. </year>
Reference: [2] <author> Andrew W. Appel, John R. Ellis, and Kai Li. </author> <title> Real-time concurrent collection on stock multiprocessors. </title> <booktitle> In SIGPLAN Notices (Proc. SIGPLAN '88 Conf. on Prog. Lang. Design and Implementation), </booktitle> <pages> pages 11-20, </pages> <year> 1988. </year>
Reference: [3] <author> Andrew W. Appel and David B. MacQueen. </author> <title> A Standard ML compiler. </title> <editor> In Gilles Kahn, editor, </editor> <booktitle> Functional Programming Languages and Computer Architecture (LNCS 274), </booktitle> <pages> pages 301-324, </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference: [4] <author> H. G. Baker. </author> <title> List processing in real time on a serial computer. </title> <journal> Communications of the ACM, </journal> <volume> 21(4) </volume> <pages> 280-294, </pages> <year> 1978. </year>
Reference: [5] <author> C. J. </author> <title> Cheney. A nonrecursive list compacting algorithm. </title> <journal> Communications of the ACM, </journal> <volume> 13(11) </volume> <pages> 677-678, </pages> <year> 1970. </year>
Reference: [6] <author> Robert R. Fenichel and Jerome C. Yochelson. </author> <title> A LISP garbage-collector for virtual-memory computer systems. </title> <journal> Communications of the ACM, </journal> <volume> 12(11) </volume> <pages> 611-612, </pages> <year> 1969. </year>
Reference: [7] <author> Henry Lieberman and Carl Hewitt. </author> <title> A real-time garbage collector based on the lifetimes of objects. </title> <journal> Communications of the ACM, </journal> <volume> 23(6) </volume> <pages> 419-429, </pages> <year> 1983. </year>
Reference: [8] <author> David Ungar. </author> <title> Generation scavenging: a non-disruptive high performance storage reclamation algorithm. </title> <booktitle> In SIGPLAN Notices (Proc. ACM SIG-SOFT/SIGPLAN Software Eng. Symp. on Practical Software Development Environments), </booktitle> <pages> pages 157-167, </pages> <year> 1984. </year> <month> 8 </month>
References-found: 8

