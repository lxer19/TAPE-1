URL: ftp://ftp.ai.univie.ac.at/papers/oefai-tr-94-07.ps.Z
Refering-URL: http://www.ai.univie.ac.at/clpqr/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A specialized, incremental solved form algorithm for systems of linear inequalities  
Author: Christian Holzbaur 
Keyword: Constraint Logic Programming, Implementation, Linear Programming  
Address: Freyung 6, A-1010 Vienna, Austria  
Affiliation: Austrian Research Institute for Artificial Intelligence, and Department of Medical Cybernetics and Artificial Intelligence University of Vienna  
Email: email: christian@ai.univie.ac.at  
Phone: voice: +43 1 53532810, fax: +43 1 5320652  
Web: TR-94-07  
Abstract: We present a computationally improved incremental solved form algorithm for systems of linear equations and inequalities. The algorithm is of the pivotal algebra type. It benefits (computationally) from a specialization of the classical Simplex algorithm that treats inequalities of dimension one, i.e. of the shape kx + d 0, special. In particular, the introduction of a slack variables is avoided in this case, which results in a basis that consists of higher dimensional inequality constraints only. Although the classical results concerning the complexity results for the Simplex algorithm apply, in particular in the worst case, the specialization is justified on the basis that even in the unlikely case that the special cases should not occur in practical programs, the average complexity is not higher than that of the classical algorithm. The proposed algorithm matches and advances current activities in the CLP area that try to restrict the use of general and expensive decision methods to the cases where they are unavoidable. 
Abstract-found: 1
Intro-found: 1
Reference: [Dantzig 63] <author> Dantzig G.B.: </author> <title> Linear Programming and Extensions, </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1963. </year>
Reference-contexts: Our work, as described in this paper, continues and complements the very same idea. We introduce an incremental, specialized variant of the Simplex algorithm <ref> [Dantzig 63] </ref>, that also exploits a partitioned solved form. The idea proper has been realized a long time ago in the area of linear programming under the name of bounded variable linear programs [Murty 76].
Reference: [Holzbaur 92] <author> Holzbaur C.: </author> <title> Metastructures vs. Attributed Variables in the Context of Extensible Unification, </title> <editor> in Bruynooghe M. & Wirs-ing M.(eds.), </editor> <booktitle> Programming Language Implementation and Logic Programming, </booktitle> <publisher> Springer, LNCS 631, </publisher> <address> pp.260-268, </address> <year> 1992. </year>
Reference-contexts: It now replaces the linear solver kernel of the CLP (&lt;) and CLP (Q) systems distributed with DMCAI-Clp, a CLP system based on extensible unification <ref> [Holzbaur 92, Holzbaur 92, Holzbaur 93] </ref>, which initially employed a classical Simplex algorithm without the specialization for lower dimensional constraints. The rich type system in the new algorithm and the choice of Pro-log as implementation language led to a very tabular coding style.
Reference: [Holzbaur 92] <author> Holzbaur C.: </author> <title> A High-Level Approach to the Realization of CLP Languages, </title> <booktitle> in Proceedings of the JICSLP92 Post-Conference Workshop on Constraint Logic Programming Systems, </booktitle> <address> Wash-ington D.C., </address> <year> 1992. </year>
Reference-contexts: It now replaces the linear solver kernel of the CLP (&lt;) and CLP (Q) systems distributed with DMCAI-Clp, a CLP system based on extensible unification <ref> [Holzbaur 92, Holzbaur 92, Holzbaur 93] </ref>, which initially employed a classical Simplex algorithm without the specialization for lower dimensional constraints. The rich type system in the new algorithm and the choice of Pro-log as implementation language led to a very tabular coding style.
Reference: [Holzbaur 93] <author> Holzbaur C.: </author> <title> Extensible Unification as Basis for the Implementation of CLP Languages, </title> <editor> in Baader F., et al., </editor> <booktitle> Proceedings of the Sixth International Workshop on Unification, </booktitle> <address> Boston University, MA, TR-93-004, pp.56-60, </address> <year> 1993. </year>
Reference-contexts: It now replaces the linear solver kernel of the CLP (&lt;) and CLP (Q) systems distributed with DMCAI-Clp, a CLP system based on extensible unification <ref> [Holzbaur 92, Holzbaur 92, Holzbaur 93] </ref>, which initially employed a classical Simplex algorithm without the specialization for lower dimensional constraints. The rich type system in the new algorithm and the choice of Pro-log as implementation language led to a very tabular coding style.
Reference: [Imbert et al. 93] <author> Imbert J.-L., Cohen J., Weeger M.-D.: </author> <title> An Algorithm for Linear Constraint Solving: Its Incorporation in a Prolog Meta-Interpreter for CLP, in Special Issue: Constraint Logic Programming, </title> <journal> Journal of Logic Programming, </journal> <volume> 16(3&4), </volume> <pages> 235-253, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction <ref> [Imbert et al. 93] </ref> propose a syntactically partitioned solved form for the incremental solution for systems of linear equalities, inequalities (strict or non-strict), and disequalities in a CLP context. <p> The advantage of keeping them out of the tableau is that the size of the working basis is smaller. Our motivation for developing specialized versions of general decision methods is the same as in <ref> [Imbert et al. 93] </ref>: We hope that the syntactically restricted forms of constraints will indeed occur frequently in actual CLP programs. <p> Strict inequalities are dealt with the same way as in <ref> [Imbert et al. 93] </ref>: For the Simplex algorithm all inequalities are non-strict. The strictness is enforced through appropriate disequations. Sign restrictions on slack variables are recorded in (1.b). J is the index set for bounded 2 variables.
Reference: [Murty 76] <author> Murty K.G.: </author> <title> Linear and Combinatorial Programming, </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1976. </year>
Reference-contexts: We introduce an incremental, specialized variant of the Simplex algorithm [Dantzig 63], that also exploits a partitioned solved form. The idea proper has been realized a long time ago in the area of linear programming under the name of bounded variable linear programs <ref> [Murty 76] </ref>. In bounded variable linear programs, some or all variables are restricted to lie within individual finite lower and upper bounds. Such problems can of course be solved by including all bound restrictions as constraints, i.e. rows in the simplex tableau. <p> Before we describe the application of Orden's method to our problem, we need a basic result from polyhedral theory <ref> [Murty 76] </ref>: A feasible solution ~x of (1) is a BFS 1 iff the set fA ;j : j 2 J; l i x j u j g [ fA ;j : j 62 J g is linearly independent. <p> (a) k &gt; 0 let lb = lowerr k (b) k &lt; 0 let lb = upperr k Note that in order to guarantee finite termination of the modified Simplex algorithm, we brake ties in the standard way by extending the definition of maximum to that of a lexicographic maximum <ref> [Murty 76] </ref>. If x b later leaves the basis, it gets a non-basic variable at the bound that determined lb above. For variables of type x [lower;uper] this depends on the sign of k.
Reference: [Orden 71] <author> Orden A.: </author> <title> On the Solution of Linear Equation/Inequality Systems, </title> <note> Mathematical Programming (1)137-152, 1971. 12 </note>
Reference-contexts: In order to decide whether a set of linear inequalities has an non-empty solution set, we can either employ what has been termed Simplex Phase 1, which works with an artificial objective function cx, or we can utilize a result by <ref> [Orden 71] </ref>, who gives an equivalent algorithm that avoids the artificial row. <p> A violation of the solved form is always detected by locating a basic variable that is out of its bounds. To repair such a row, we interpret the linear combination of variables that defines the basic variable as objective function <ref> [Orden 71] </ref>. If the current evaluation of the rhs is beyond the upper bound of the basic variable, we will try to decrease the objective function. <p> The pivot selection rule, in particular the selection of a lexicographic minimum/maximum, guarantees productive pivot steps, and hence finite termination. 3.1.2 Complexity The Simplex algorithm is known to be of exponential complexity in the worst case. <ref> [Orden 71] </ref> used a simple statistical model to explain the long observed fact that the number of pivot steps to be expected per row is in the order of the number of rows.
References-found: 7

