URL: ftp://ftp.cs.purdue.edu/pub/hosking/papers/UM-CS-1990-045.ps.gz
Refering-URL: http://www.cs.purdue.edu/homes/hosking/papers.html
Root-URL: http://www.cs.purdue.edu
Title: Design of an Object Faulting Persistent Smalltalk  
Author: Antony L. Hosking J. Eliot B. Moss Cynthia Bliss 
Note: This project is supported by National Science Foundation Grants CCR-8658074 and DCR-8500332, and by Digital Equipment Corporation, GTE Laboratories, and the Eastman Kodak Company.  
Address: Amherst, MA 01003  
Affiliation: Object Oriented Systems Laboratory Department of Computer and Information Science University of Massachusetts  
Abstract: COINS Technical Report 90-45 May 1990 
Abstract-found: 1
Intro-found: 1
Reference: [Atkinson and Morrison, 1985] <author> Malcolm P. Atkinson and Ronald Morrison. </author> <title> Procedures as persistent data objects. </title> <journal> ACM Transactions on Programming Languages and Systems 7, </journal> <month> 4 (October </month> <year> 1985), </year> <pages> 539-559. </pages>
Reference-contexts: Traditional database systems require users to cast their problems first in one model and then the other. Applications programmers would benefit enormously from being able to manipulate persistent data (data that outlive the execution of the program) just as they do non-persistent data. Persistent programming languages such as PS-Algol <ref> [Atkinson and Morrison, 1985] </ref> have shown that persistence can, and ought to, be an orthogonal property of data: any data item can potentially persist, independently of its other properties, including its type. There are significant gains to be made from using object-orientation as a means to language-database integration.
Reference: [Banerjee et al., 1987] <author> Jay Banerjee, Hong-Tai Chou, Jorge F. Garza, Won Kim, Darrell Woelk, Nat Ballou, and Houng-Joo Kim. </author> <title> Data model issues for object-oriented applications. </title> <journal> ACM Transactions on Office Information Systems 5, </journal> <month> 1 (January </month> <year> 1987), </year> <pages> 3-26. 13 </pages>
Reference-contexts: Object-orientation is one meeting ground of the programming language and database sub-cultures. A number of object-oriented database systems have been or are being developed, examples of which are GemStone [Maier et al., 1986], Orion <ref> [Banerjee et al., 1987] </ref>, and Iris [Fishman et al., 1987]. For programming languages there are Smalltalk [Goldberg and Robson, 1983], Trellis 1 [Schaffert et al., 1986] and CLOS [Bobrow et al., 1988], among many others. Integration efforts can build on the experiences of both the database and programming language worlds.
Reference: [Bobrow et al., 1988] <author> Daniel G. Bobrow, Linda G. DeMichiel, Richard P. Gabriel, Sonya E. Keene, Gregor Kiczales, and David A. Moon. </author> <title> Common Lisp object system specification. </title> <journal> ACM SIGPLAN Notices 23, </journal> <note> special issue (September 1988). ANSI X3J13 Document 88-002R. </note>
Reference-contexts: For programming languages there are Smalltalk [Goldberg and Robson, 1983], Trellis 1 [Schaffert et al., 1986] and CLOS <ref> [Bobrow et al., 1988] </ref>, among many others. Integration efforts can build on the experiences of both the database and programming language worlds. More significantly, object-orientation provides encapsulation of data and operations in such a way as to enhance the reusability, maintainability, and extensibility of systems.
Reference: [Carey et al., 1986] <author> M. J. Carey, D. J. DeWitt, J. E. Richardson, and E. J. Shekita. </author> <title> Object and file management in the EXODUS extensible database system. </title> <booktitle> In Proceedings of the Twelfth International Conference on Very Large Databases (Kyoto, </booktitle> <address> Japan, </address> <month> September </month> <year> 1986), </year> <booktitle> ACM, </booktitle> <pages> pp. 91-100. </pages>
Reference-contexts: Our approach to persistence does not modify the virtual image, providing a more seamless environment. Our approach to persistence is to modify the run-time system of the programming language, building from the programming language down to the database. Object-oriented databases, such as Orion [Kim et al., 1988], and Exodus <ref> [Carey et al., 1986] </ref>, approach language-database integration from the database up. Persistence in our object-faulting Smalltalk is orthogonal, unlike Orion and the Exodus database implementation language, E [Richardson, 1989]. 6 Conclusions and Future Work We believe that the object-faulting approach to persistence will prove to be effective.
Reference: [Chambers and Ungar, 1989] <author> Craig Chambers and David Ungar. </author> <title> Customization: Optimizing compiler technology for SELF, a dynamically-typed object-oriented programming language. </title> <booktitle> In Proceedings of the SIGPLAN '89 Conference on Programming Language Design and Implementation (Portland, </booktitle> <address> OR, </address> <month> June </month> <year> 1989), </year> <journal> vol. </journal> <volume> 24, no. </volume> <booktitle> 7 of ACM SIGPLAN Notices, ACM, </booktitle> <pages> pp. 146-160. </pages>
Reference: [Chambers et al., 1989] <author> Craig Chambers, David Ungar, and Elgin Lee. </author> <title> An efficient implementation of SELF, a dynamically-typed object-oriented language based on prototypes. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications (New Orleans, </booktitle> <address> LA, </address> <month> October </month> <year> 1989), </year> <journal> vol. </journal> <volume> 24, no. </volume> <booktitle> 10 of ACM SIGPLAN Notices, ACM, </booktitle> <pages> pp. 49-70. </pages>
Reference: [Copeland and Maier, 1984] <author> George Copeland and David Maier. </author> <title> Making Smalltalk a database system. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data (Boston, </booktitle> <address> MA, </address> <month> June </month> <year> 1984), </year> <title> vol. </title> <booktitle> 14, no.2 of ACM SIGMOD Record, ACM, </booktitle> <pages> pp. 316-325. </pages>
Reference-contexts: Environments that can successfully integrate features from programming languages and databases will enable us to build and maintain such applications more easily. Successful integration has been described as overcoming the impedance mismatch <ref> [Copeland and Maier, 1984] </ref> between programming language data models and database data models. Traditional database systems require users to cast their problems first in one model and then the other.
Reference: [Fishman et al., 1987] <author> D. H. Fishman, D. Beech, H. P. Cate, E. C. Chow, T. Connors, J. W. Davis, N. Derrett, C. G. Hoch, W. Kent, P. Lyngbaek, B. Mahbod, M. A. Neimat, T. A. Ryan, and M. C. Shan. </author> <title> Iris: An object-oriented database management system. </title> <journal> ACM Transactions on Office Information Systems 5, </journal> <month> 1 (January </month> <year> 1987), </year> <pages> 48-69. </pages>
Reference-contexts: Object-orientation is one meeting ground of the programming language and database sub-cultures. A number of object-oriented database systems have been or are being developed, examples of which are GemStone [Maier et al., 1986], Orion [Banerjee et al., 1987], and Iris <ref> [Fishman et al., 1987] </ref>. For programming languages there are Smalltalk [Goldberg and Robson, 1983], Trellis 1 [Schaffert et al., 1986] and CLOS [Bobrow et al., 1988], among many others. Integration efforts can build on the experiences of both the database and programming language worlds.
Reference: [Goldberg and Robson, 1983] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80: The Language and its Implementation. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: A number of object-oriented database systems have been or are being developed, examples of which are GemStone [Maier et al., 1986], Orion [Banerjee et al., 1987], and Iris [Fishman et al., 1987]. For programming languages there are Smalltalk <ref> [Goldberg and Robson, 1983] </ref>, Trellis 1 [Schaffert et al., 1986] and CLOS [Bobrow et al., 1988], among many others. Integration efforts can build on the experiences of both the database and programming language worlds. <p> marked link will result in a call to the object manager to determine the object's address, regardless of whether the object is already resident or not. 5 3 Faulting Smalltalk Objects Our implementation of Smalltalk is based on the definition of the Smalltalk-80 2 language found in the blue book <ref> [Goldberg and Robson, 1983] </ref>. We have made only minor extensions to the virtual image. While we have retained the standard bytecode instruction set, our implementation of the virtual machine is somewhat different from that defined in the blue book. The blue book implementation of the heap used an object table.
Reference: [Kaehler and Krasner, 1983] <author> Ted Kaehler and Glenn Krasner. </author> <title> LOOMlarge object-oriented memory for Smalltalk-80 systems. In Smalltalk-80: Bits of History, Words of Advice, </title> <editor> Glenn Krasner, Ed. </editor> <publisher> Addison-Wesley, </publisher> <year> 1983, </year> <journal> ch. </journal> <volume> 14, </volume> <pages> pp. 251-270. </pages>
Reference-contexts: Node marking is complicated by the fact that the non-resident objects are just that, non-resident, 3 4 and must (paradoxically) be in memory for them to be checked. To overcome this we can use an approach similar to leaves in LOOM <ref> [Kaehler and Krasner, 1983] </ref>. A leaf is a specially marked resident pseudo-object that stands in for a non-resident object. We call such fake objects fault blocks. All references from resident objects to non-resident objects are actually pointers to a fault block (see Figure 4).
Reference: [Kim et al., 1988] <author> Won Kim, Nat Ballou, Jay Banerjee, Hong-Tai Chou, Jorge F. Garza, and Darrell Woelk. </author> <title> Integrating an object-oriented programming system with a database system. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications (San Diego, </booktitle> <address> California, </address> <month> November </month> <year> 1988), </year> <journal> vol. </journal> <volume> 23, no. </volume> <booktitle> 11 of ACM SIGPLAN Notices, ACM, </booktitle> <pages> pp. 142-152. </pages>
Reference-contexts: Our approach to persistence does not modify the virtual image, providing a more seamless environment. Our approach to persistence is to modify the run-time system of the programming language, building from the programming language down to the database. Object-oriented databases, such as Orion <ref> [Kim et al., 1988] </ref>, and Exodus [Carey et al., 1986], approach language-database integration from the database up.
Reference: [Maier et al., 1986] <author> D. Maier, J. Stein, A. Otis, and A. Purdy. </author> <title> Development of an object-oriented DBMS. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications (Portland, </booktitle> <address> OR, </address> <month> September </month> <year> 1986), </year> <journal> vol. </journal> <volume> 21, no. </volume> <booktitle> 11 of ACM SIGPLAN Notices, ACM, </booktitle> <pages> pp. 472-482. </pages>
Reference-contexts: There are significant gains to be made from using object-orientation as a means to language-database integration. Object-orientation is one meeting ground of the programming language and database sub-cultures. A number of object-oriented database systems have been or are being developed, examples of which are GemStone <ref> [Maier et al., 1986] </ref>, Orion [Banerjee et al., 1987], and Iris [Fishman et al., 1987]. For programming languages there are Smalltalk [Goldberg and Robson, 1983], Trellis 1 [Schaffert et al., 1986] and CLOS [Bobrow et al., 1988], among many others.
Reference: [Moss and Sinofsky, 1988] <author> J. Eliot B. Moss and Steven Sinofsky. </author> <title> Managing persistent data with Mneme: Designing a reliable, shared object interface. </title> <booktitle> In Advances in Object-Oriented Database Systems (September 1988), vol. 334 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 298-316. </pages>
Reference-contexts: Our design of object faulting for Smalltalk uses the Mneme persistent object store <ref> [Moss and Sinofsky, 1988, Moss, 1989a, Moss, 1989b] </ref> as the underlying object manager.
Reference: [Moss, 1989a] <author> J. Eliot B. Moss. </author> <title> Addressing large distributed collections of persistent objects: The Mneme project's approach. </title> <booktitle> In Second International Workshop on Database Programming Languages (Gleneden Beach, </booktitle> <address> OR, </address> <month> June </month> <year> 1989), </year> <pages> pp. 269-285. </pages> <note> Also available as University of Massachusetts, Department of Computer and Information Science Technical Report 89-68. 14 </note>
Reference-contexts: Our design of object faulting for Smalltalk uses the Mneme persistent object store <ref> [Moss and Sinofsky, 1988, Moss, 1989a, Moss, 1989b] </ref> as the underlying object manager.
Reference: [Moss, 1989b] <author> J. Eliot B. Moss. </author> <title> The Mneme persistent object store. </title> <type> COINS Technical Report 89-107, </type> <institution> Department of Computer and Information Science, University of Massachusetts, </institution> <address> Amherst, MA, </address> <month> October </month> <year> 1989. </year> <note> Submitted for publication. </note>
Reference-contexts: Our design of object faulting for Smalltalk uses the Mneme persistent object store <ref> [Moss and Sinofsky, 1988, Moss, 1989a, Moss, 1989b] </ref> as the underlying object manager.
Reference: [Purdy et al., 1987] <author> Alan Purdy, Bruce Schuchardt, and David Maier. </author> <title> Integrating an object server with other worlds. </title> <journal> ACM Transactions on Office Information Systems 5, </journal> <month> 1 (January </month> <year> 1987), </year> <pages> 27-47. </pages>
Reference-contexts: We permit object pointers to be both real memory addresses and object identifiers, and our design demonstrates an alternative approach to persistence that does not require an explicit object table. GemStone <ref> [Purdy et al., 1987] </ref>, is another effort to expand the Smalltalk heap to include objects 12 on disk. However, it extends Smalltalk to provide considerable database functionality, including queries and an execution model.
Reference: [Richardson, 1989] <author> Joel Edward Richardson. E: </author> <title> A Persistent Systems Implementation Language. </title> <type> PhD thesis, </type> <institution> Computer Sciences Department, University of Wisconsin, Madison, WI, </institution> <month> August </month> <year> 1989. </year> <note> Available as Computer Sciences Technical Report #868. </note>
Reference-contexts: Object-oriented databases, such as Orion [Kim et al., 1988], and Exodus [Carey et al., 1986], approach language-database integration from the database up. Persistence in our object-faulting Smalltalk is orthogonal, unlike Orion and the Exodus database implementation language, E <ref> [Richardson, 1989] </ref>. 6 Conclusions and Future Work We believe that the object-faulting approach to persistence will prove to be effective.
Reference: [Schaffert et al., 1986] <author> Craig Schaffert, Topher Cooper, Bruce Bullis, Mike Kilian, and Carrie Wilpolt. </author> <title> An introduction to Trellis/Owl. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications (Portland, </booktitle> <address> OR, </address> <month> September </month> <year> 1986), </year> <journal> vol. </journal> <volume> 21, no. </volume> <booktitle> 11 of ACM SIGPLAN Notices, ACM, </booktitle> <pages> pp. 9-16. </pages>
Reference-contexts: A number of object-oriented database systems have been or are being developed, examples of which are GemStone [Maier et al., 1986], Orion [Banerjee et al., 1987], and Iris [Fishman et al., 1987]. For programming languages there are Smalltalk [Goldberg and Robson, 1983], Trellis 1 <ref> [Schaffert et al., 1986] </ref> and CLOS [Bobrow et al., 1988], among many others. Integration efforts can build on the experiences of both the database and programming language worlds.
Reference: [Straw et al., 1989] <author> Andrew Straw, Fred Mellender, and Steve Riegel. </author> <title> Object management in a persistent smalltalk system. </title> <journal> Software: Practice and Experience 19, </journal> <month> 8 (August </month> <year> 1989), </year> <pages> 719-737. </pages>
Reference-contexts: This will result in a marked improvement in performance over LOOM. We also intend to make provision for sharing and reliability by building on Mneme's concurrency control and recovery facilities. The Alltalk system <ref> [Straw et al., 1989] </ref> shares many of our goals. However, the approach it takes is very similar to LOOM, using an object table to translate between object pointers and memory addresses.
Reference: [Ungar and Smith, 1987] <author> David Ungar and Randall B. Smith. </author> <title> SELF: The power of simplicity. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications (Orlando, </booktitle> <address> FL, </address> <month> October </month> <year> 1987), </year> <journal> vol. </journal> <volume> 22, no. </volume> <booktitle> 11 of ACM SIGPLAN Notices, ACM, </booktitle> <pages> pp. 227-241. </pages>
Reference: [Ungar, 1984] <author> David Ungar. </author> <title> Generation scavenging: A non-disruptive high performance storage reclamation algorithm. </title> <booktitle> In Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments (Pittsburgh, </booktitle> <address> PA, </address> <month> April </month> <year> 1984), </year> <journal> ACM SIGPLAN Notices, ACM, </journal> <pages> pp. 157-167. </pages>
Reference-contexts: More recently, generation scavenging garbage collection schemes have been devised that eliminate the need for an object table, while retaining performance <ref> [Ungar, 1984, Ungar, 1987] </ref>. Furthermore, our implementation is for a 32-bit paged virtual-memory architecture, reducing addressability concerns. We have implemented Smalltalk on VAX 3 hardware, with no object table, using a variant of generation scavenging garbage collection. Object pointers are 32-bit tagged entities.
Reference: [Ungar, 1987] <author> David Michael Ungar. </author> <title> The Design and Evaluation of a High Performance Smalltalk System. </title> <publisher> ACM Distinguished Dissertations. The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1987. </year> <type> Ph.D. Dissertation, </type> <institution> University of California at Berkeley, </institution> <month> February </month> <year> 1986. </year> <month> 15 </month>
Reference-contexts: More recently, generation scavenging garbage collection schemes have been devised that eliminate the need for an object table, while retaining performance <ref> [Ungar, 1984, Ungar, 1987] </ref>. Furthermore, our implementation is for a 32-bit paged virtual-memory architecture, reducing addressability concerns. We have implemented Smalltalk on VAX 3 hardware, with no object table, using a variant of generation scavenging garbage collection. Object pointers are 32-bit tagged entities.
References-found: 22

