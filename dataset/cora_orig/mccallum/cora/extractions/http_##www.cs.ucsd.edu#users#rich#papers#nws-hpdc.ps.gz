URL: http://www.cs.ucsd.edu/users/rich/papers/nws-hpdc.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/rich/publications.html
Root-URL: http://www.cs.ucsd.edu
Title: Forecasting Network Performance to Support Dynamic Scheduling Using the Network Weather Service  
Author: Rich Wolski 
Keyword: scheduling, metacomputing, quality-of-service, statistical forecasting, network performance monitoring  
Address: La Jolla, CA 92093-0114  
Affiliation: Computer Science and Engineering Department University of California, San Diego  
Abstract: The Network Weather Service is a generalizable and extensible facility designed to provide dynamic resource performance forecasts in metacomputing environments. In this paper, we outline its design and detail the predictive performance of the forecasts it generates. While the forecasting methods are general, we focus on their ability to predict the TCP/IP end-to-end throughput and latency that is attainable by an application using systems located at different sites. Such network forecasts are needed both to support scheduling [5], and by the metacomputing software infrastructure to develop quality-of-service guarantees [10, 17]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Distributed object computation testbed. </institution> <note> http://www.sdsc.edu/DOCT/QuadPage.html. </note>
Reference-contexts: These versions will be initially deployed as part of the GUSTO (Globus UbiquitouS Testbed) [10] and DOCT (Distributed Object Computational Testbed) <ref> [1] </ref> metacomputing testbeds. We plan to use these implementations both to investigate metacomput-ing scheduling via AppLeS [4, 2] and the development of general quality-of-service mechanisms.
Reference: [2] <author> AppLeS. </author> <note> http://www-cse.ucsd.edu/groups/hpcl/apples/apples.html. </note>
Reference-contexts: These versions will be initially deployed as part of the GUSTO (Globus UbiquitouS Testbed) [10] and DOCT (Distributed Object Computational Testbed) [1] metacomputing testbeds. We plan to use these implementations both to investigate metacomput-ing scheduling via AppLeS <ref> [4, 2] </ref> and the development of general quality-of-service mechanisms. Acknowledgements We would like to thank Francine Berman, Chandra Krintz, and Jenny Schopf at UCSD and Allen Downey at UCB and SDSC for their comments, suggestions, and criticisms, all of which were invaluable.
Reference: [3] <author> S. Basu, A. Mukherjee, and S. Kilvansky. </author> <title> Time series models for internet traffic. </title> <type> Technical Report GIT-CC-95-27, </type> <institution> Georgia Institure of Technology, </institution> <year> 1996. </year>
Reference-contexts: The need to limit the intrusiveness of the NWS influences both the implementation of the overall system and the forecasting techniques we have chosen. Since the problems of non-intrusive resource monitoring [26, 21, 9] and load forecasting <ref> [24, 3, 18, 23, 8] </ref> both pose open research questions, we have separated the sensory and forecasting functions of the NWS. The resulting modular design is intended to provide a general facility in which a variety of different monitoring and forecasting techniques can be employed easily. <p> Autoregressive Models Recent work <ref> [3, 18] </ref> has shown that aggregate internet packet traffic can be effectively modeled by autoregressive, integrated, moving average (ARIMA) models. Fitting these models to a specific time series requires the solution to a system of potentially non-linear simultaneous equations, making them difficult to use in a dynamic setting. <p> Notice also that LAST is not a good predictor of network performance (particularly of latency) except for the cross-country internet throughput measurements. In that experiment, however, it performs best. We believe that this result supports those reported in <ref> [3] </ref> which demonstrate the ability of autoregressive models to correctly reflect aggregate traffic patterns in certain wide-area network environments. In particular, the authors analyze packet data taken from the gateway between SDSC and the NSFNET backbone. The PCL-to-NCSA TCP connection we monitored traverses this gateway. <p> Our work with the NWS is very much in its formative stages. We plan to investigate how the system can incorporate modeling techniques which require a computationally-intensive fitting phase. The ARIMA models described in <ref> [3] </ref>, the self-similarity analysis outlined in [24], and the semi-nonparametric techniques discussed in [13, 14], all provide immediately promising avenues of investigation. We would like to discern the relationship between the computational complexity devoted to making a forecast its accuracy.
Reference: [4] <author> F. Berman and R. Wolski. </author> <title> Scheduling from the perspective of the application. </title> <booktitle> In Proceedings of High-Performance Distributed Computing Conference, </booktitle> <year> 1996. </year>
Reference-contexts: We have developed the NWS for use by schedulers in a networked computational environment. Systems such as those outlined in [15, 30, 29, 10] can use NWS forecasts to parameterize their respective scheduling methods and thereby generate schedules that are sensitive to load variation. In <ref> [5, 4] </ref> we report on the efficacy this technique for parallel applications in production distributed computing environments. As a result of its success, we are currently implementing versions for two production metacomputing systems: Legion [17] and Globus/Nexus [10]. <p> These versions will be initially deployed as part of the GUSTO (Globus UbiquitouS Testbed) [10] and DOCT (Distributed Object Computational Testbed) [1] metacomputing testbeds. We plan to use these implementations both to investigate metacomput-ing scheduling via AppLeS <ref> [4, 2] </ref> and the development of general quality-of-service mechanisms. Acknowledgements We would like to thank Francine Berman, Chandra Krintz, and Jenny Schopf at UCSD and Allen Downey at UCB and SDSC for their comments, suggestions, and criticisms, all of which were invaluable.
Reference: [5] <author> F. Berman, R. Wolski, S. Figueira, J. Schopf, and G. Shao. </author> <title> Application level scheduling on distributed heterogeneous networks. </title> <booktitle> In Proceedings of Supercomputing 1996, </booktitle> <year> 1996. </year>
Reference-contexts: Recent work shows that parallel applications can use non-dedicated metacomputers to achieve high-performance without gang-scheduling or other centralized scheduling fl Supported by NSF grant ASC-9308900 and Advanced Research Projects Agency/ITO, Distributed Object Computation Testbed, ARPA order No. D570, Issued by ESC/ENS under contract #F19628-96-C-0020. y email: rich@cs.ucsd.edu, http://www-cse.ucsd.edu/users/rich/ policies <ref> [5, 11, 15, 30] </ref>. To gain the desired levels of performance, however, the scheduling methods described in these works depend on predictions of the performance deliverable to the application from the available metacomputing resources. <p> We have developed the NWS for use by schedulers in a networked computational environment. Systems such as those outlined in [15, 30, 29, 10] can use NWS forecasts to parameterize their respective scheduling methods and thereby generate schedules that are sensitive to load variation. In <ref> [5, 4] </ref> we report on the efficacy this technique for parallel applications in production distributed computing environments. As a result of its success, we are currently implementing versions for two production metacomputing systems: Legion [17] and Globus/Nexus [10].
Reference: [6] <author> J. </author> <title> Burg. Maximum Entropy Spectral Analysis. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1975. </year>
Reference-contexts: The Levinson Recursion requires a set of partial correlation (PARCOR) coefficients which can also be derived recursively. Burg <ref> [6] </ref> and more recently Haddad and Parsons [19] describe a recursive algorithm for calculating both the PARCOR and autoregression coefficients from which we derive our current implementation. We omit the details of the algorithm here due to space constraints, but our implementation follows [19] closely.
Reference: [7] <author> R. Carter and M. Crovella. </author> <title> Dynamic server selection using bandwidth probing in wide-area networks. </title> <type> Technical Report TR-96-007, </type> <institution> Boston University, </institution> <year> 1996. </year>
Reference-contexts: In [15], the authors report similarly positive results for parallel applications using dynamic performance forecasting as the basis for scheduling, and other work indicates that dynamic information can be used to enhance the performance of world-wide-web applications <ref> [7] </ref>. In this paper, we focus on the problem of network performance forecasting to support parallel application scheduling. <p> We would like to discern the relationship between the computational complexity devoted to making a forecast its accuracy. We also plan to integrate other sensory mechanisms such as those described in <ref> [7] </ref>, and to investigate how groups of forecasts may be composed to yield higher-level perfor mance characteristics. 9 As of this writing, second generation implementations of the NWS are underway for the Globus/Nexus [10] and Legion [17] metacomputing systems.
Reference: [8] <author> M. Crovella and A. Bestavros. </author> <title> Self-similarity in world wide web traffic: Evidence and possible causes. </title> <booktitle> In Proceedings of the 1996 ACM Sigmetrics Conference on Measurement and Modeling of Computer Systems, </booktitle> <year> 1996. </year>
Reference-contexts: The need to limit the intrusiveness of the NWS influences both the implementation of the overall system and the forecasting techniques we have chosen. Since the problems of non-intrusive resource monitoring [26, 21, 9] and load forecasting <ref> [24, 3, 18, 23, 8] </ref> both pose open research questions, we have separated the sensory and forecasting functions of the NWS. The resulting modular design is intended to provide a general facility in which a variety of different monitoring and forecasting techniques can be employed easily.
Reference: [9] <author> M. Crovella and T. LeBlanc. </author> <title> Parallel performance prediction using lost-cycles analysis. </title> <booktitle> In Proceedings of Supercomputing 1994, </booktitle> <year> 1994. </year>
Reference-contexts: The need to limit the intrusiveness of the NWS influences both the implementation of the overall system and the forecasting techniques we have chosen. Since the problems of non-intrusive resource monitoring <ref> [26, 21, 9] </ref> and load forecasting [24, 3, 18, 23, 8] both pose open research questions, we have separated the sensory and forecasting functions of the NWS.
Reference: [10] <author> T. DeFanti, I. Foster, M. Papka, R. Stevens, and T. Kuh-fuss. </author> <title> Overview of the i-way: Wide area visual supercomputing. </title> <journal> International Journal of Supercomputer Applications, </journal> <note> To Appear. </note>
Reference-contexts: We think of this functionality as being analogous to weather forecasting, and as such, term the service the Network Weather Service (NWS). We have developed the NWS for use by schedulers in a networked computational environment. Systems such as those outlined in <ref> [15, 30, 29, 10] </ref> can use NWS forecasts to parameterize their respective scheduling methods and thereby generate schedules that are sensitive to load variation. In [5, 4] we report on the efficacy this technique for parallel applications in production distributed computing environments. <p> In [5, 4] we report on the efficacy this technique for parallel applications in production distributed computing environments. As a result of its success, we are currently implementing versions for two production metacomputing systems: Legion [17] and Globus/Nexus <ref> [10] </ref>. In [15], the authors report similarly positive results for parallel applications using dynamic performance forecasting as the basis for scheduling, and other work indicates that dynamic information can be used to enhance the performance of world-wide-web applications [7]. <p> We also plan to integrate other sensory mechanisms such as those described in [7], and to investigate how groups of forecasts may be composed to yield higher-level perfor mance characteristics. 9 As of this writing, second generation implementations of the NWS are underway for the Globus/Nexus <ref> [10] </ref> and Legion [17] metacomputing systems. These versions will be initially deployed as part of the GUSTO (Globus UbiquitouS Testbed) [10] and DOCT (Distributed Object Computational Testbed) [1] metacomputing testbeds. <p> investigate how groups of forecasts may be composed to yield higher-level perfor mance characteristics. 9 As of this writing, second generation implementations of the NWS are underway for the Globus/Nexus <ref> [10] </ref> and Legion [17] metacomputing systems. These versions will be initially deployed as part of the GUSTO (Globus UbiquitouS Testbed) [10] and DOCT (Distributed Object Computational Testbed) [1] metacomputing testbeds. We plan to use these implementations both to investigate metacomput-ing scheduling via AppLeS [4, 2] and the development of general quality-of-service mechanisms.
Reference: [11] <author> A. Dusseau, R. Arpaci, and D. Culler. </author> <title> Effective distributed scheduling of parallel workloads. </title> <booktitle> In Proceedings of SIG-METRICS/Performance, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: Recent work shows that parallel applications can use non-dedicated metacomputers to achieve high-performance without gang-scheduling or other centralized scheduling fl Supported by NSF grant ASC-9308900 and Advanced Research Projects Agency/ITO, Distributed Object Computation Testbed, ARPA order No. D570, Issued by ESC/ENS under contract #F19628-96-C-0020. y email: rich@cs.ucsd.edu, http://www-cse.ucsd.edu/users/rich/ policies <ref> [5, 11, 15, 30] </ref>. To gain the desired levels of performance, however, the scheduling methods described in these works depend on predictions of the performance deliverable to the application from the available metacomputing resources.
Reference: [12] <author> N. Gallagher and G. Wise. </author> <title> A theoretical analysis of the properties of median filters. </title> <journal> IEEE Transactions ASSP, </journal> <month> December </month> <year> 1981. </year>
Reference-contexts: Median-based Methods The median value can also serve as a useful predictor, particularly if the measurement sequence contains randomly-occurring, asymmetric outliers. Our presentation of these techniques follows the exposition in [19] and <ref> [12] </ref>. The median over a sliding window of fixed length whose leading edge is the most recent measurement is used as the forecast for the next measurement.
Reference: [13] <author> R. Gallant and G. Tauchen. Snp: </author> <title> A program for nonparametric time series analysis. </title> <note> In http://www.econ.duke.edu/Papers/Abstracts/abstract.95.26.html. </note>
Reference-contexts: Our work with the NWS is very much in its formative stages. We plan to investigate how the system can incorporate modeling techniques which require a computationally-intensive fitting phase. The ARIMA models described in [3], the self-similarity analysis outlined in [24], and the semi-nonparametric techniques discussed in <ref> [13, 14] </ref>, all provide immediately promising avenues of investigation. We would like to discern the relationship between the computational complexity devoted to making a forecast its accuracy.
Reference: [14] <author> R. Gallant and G. Tauchen. </author> <title> Seminonparametric estimation of conditionally constrained heterogeneous processes: Asset pricing applications. </title> <type> Econometrica 57, </type> <pages> pages 1091-1120, </pages> <year> 1989. </year>
Reference-contexts: Our work with the NWS is very much in its formative stages. We plan to investigate how the system can incorporate modeling techniques which require a computationally-intensive fitting phase. The ARIMA models described in [3], the self-similarity analysis outlined in [24], and the semi-nonparametric techniques discussed in <ref> [13, 14] </ref>, all provide immediately promising avenues of investigation. We would like to discern the relationship between the computational complexity devoted to making a forecast its accuracy.
Reference: [15] <author> J. Gehrinf and A. Reinfeld. </author> <title> Mars a framework for minimizing the job execution time in a metacomputing environment. </title> <booktitle> Proceedings of Future general Computer Systems, </booktitle> <year> 1996. </year>
Reference-contexts: Recent work shows that parallel applications can use non-dedicated metacomputers to achieve high-performance without gang-scheduling or other centralized scheduling fl Supported by NSF grant ASC-9308900 and Advanced Research Projects Agency/ITO, Distributed Object Computation Testbed, ARPA order No. D570, Issued by ESC/ENS under contract #F19628-96-C-0020. y email: rich@cs.ucsd.edu, http://www-cse.ucsd.edu/users/rich/ policies <ref> [5, 11, 15, 30] </ref>. To gain the desired levels of performance, however, the scheduling methods described in these works depend on predictions of the performance deliverable to the application from the available metacomputing resources. <p> We think of this functionality as being analogous to weather forecasting, and as such, term the service the Network Weather Service (NWS). We have developed the NWS for use by schedulers in a networked computational environment. Systems such as those outlined in <ref> [15, 30, 29, 10] </ref> can use NWS forecasts to parameterize their respective scheduling methods and thereby generate schedules that are sensitive to load variation. In [5, 4] we report on the efficacy this technique for parallel applications in production distributed computing environments. <p> In [5, 4] we report on the efficacy this technique for parallel applications in production distributed computing environments. As a result of its success, we are currently implementing versions for two production metacomputing systems: Legion [17] and Globus/Nexus [10]. In <ref> [15] </ref>, the authors report similarly positive results for parallel applications using dynamic performance forecasting as the basis for scheduling, and other work indicates that dynamic information can be used to enhance the performance of world-wide-web applications [7].
Reference: [16] <author> C. Granger and P. Newbold. </author> <title> Forecasting Economic Time Series. </title> <publisher> Academic Press, </publisher> <year> 1986. </year>
Reference-contexts: We then define M IN M SE (t) = predictor f (t) (17) 2 The autoregressive model is applicable if the decay in the autocorrelation function is exponential and the value of p is set to the duration of the decay <ref> [16] </ref>. Our current implementation of the NWS does not attempt to determine the suitability of AR for a particular resource. Instead, it assumes that the autoregressive model is applicable, and tracks the prediction error, using AR only if the error is lower than other competing predictors (see section 4.4).
Reference: [17] <author> A. S. Grimshaw, W. A. Wulf, J. C. French, A. C. Weaver, and P. F. Reynolds. Legion: </author> <title> The next logical step towrd a nationwide virtual computer. </title> <type> Technical Report CS-94-21, </type> <institution> University of Virginia, </institution> <year> 1994. </year>
Reference-contexts: In [5, 4] we report on the efficacy this technique for parallel applications in production distributed computing environments. As a result of its success, we are currently implementing versions for two production metacomputing systems: Legion <ref> [17] </ref> and Globus/Nexus [10]. In [15], the authors report similarly positive results for parallel applications using dynamic performance forecasting as the basis for scheduling, and other work indicates that dynamic information can be used to enhance the performance of world-wide-web applications [7]. <p> We also plan to integrate other sensory mechanisms such as those described in [7], and to investigate how groups of forecasts may be composed to yield higher-level perfor mance characteristics. 9 As of this writing, second generation implementations of the NWS are underway for the Globus/Nexus [10] and Legion <ref> [17] </ref> metacomputing systems. These versions will be initially deployed as part of the GUSTO (Globus UbiquitouS Testbed) [10] and DOCT (Distributed Object Computational Testbed) [1] metacomputing testbeds. We plan to use these implementations both to investigate metacomput-ing scheduling via AppLeS [4, 2] and the development of general quality-of-service mechanisms.
Reference: [18] <author> N. Groschwitz and G. Polyzos. </author> <title> A time series model of long-term traffic on the nsfnet backbone. </title> <booktitle> In Proceedings of the IEEE International Conference on Communications (ICC'94), </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: The need to limit the intrusiveness of the NWS influences both the implementation of the overall system and the forecasting techniques we have chosen. Since the problems of non-intrusive resource monitoring [26, 21, 9] and load forecasting <ref> [24, 3, 18, 23, 8] </ref> both pose open research questions, we have separated the sensory and forecasting functions of the NWS. The resulting modular design is intended to provide a general facility in which a variety of different monitoring and forecasting techniques can be employed easily. <p> Autoregressive Models Recent work <ref> [3, 18] </ref> has shown that aggregate internet packet traffic can be effectively modeled by autoregressive, integrated, moving average (ARIMA) models. Fitting these models to a specific time series requires the solution to a system of potentially non-linear simultaneous equations, making them difficult to use in a dynamic setting.
Reference: [19] <author> R. Haddad and T. Parsons. </author> <title> Digital Signal Processing: Theory, Applications, and Hardware. </title> <publisher> Computer Science Press, </publisher> <year> 1991. </year>
Reference-contexts: Median-based Methods The median value can also serve as a useful predictor, particularly if the measurement sequence contains randomly-occurring, asymmetric outliers. Our presentation of these techniques follows the exposition in <ref> [19] </ref> and [12]. The median over a sliding window of fixed length whose leading edge is the most recent measurement is used as the forecast for the next measurement. <p> Median filters are attractive because they will reject the effects of sharply outlying data points or impulses from the forecasts they produce. They lack some of the smoothing power of the averaging based methods, however, resulting in forecasts with a considerable amount of jitter <ref> [19] </ref>. It is possible to combine the positive advantages of both classes of methods in the form of an ff-trimmed mean filter that averages the central K 2 fl ff fl K values within a sliding window of size K for (0 &lt; ff &lt; 0:5). <p> However, fitting a purely autoregressive (AR) model requires only the solution to a strictly linear system of equations that can be solved recursively via the Levinson Recursion <ref> [19] </ref>. <p> The Levinson Recursion requires a set of partial correlation (PARCOR) coefficients which can also be derived recursively. Burg [6] and more recently Haddad and Parsons <ref> [19] </ref> describe a recursive algorithm for calculating both the PARCOR and autoregression coefficients from which we derive our current implementation. We omit the details of the algorithm here due to space constraints, but our implementation follows [19] closely. <p> Burg [6] and more recently Haddad and Parsons <ref> [19] </ref> describe a recursive algorithm for calculating both the PARCOR and autoregression coefficients from which we derive our current implementation. We omit the details of the algorithm here due to space constraints, but our implementation follows [19] closely. The algorithm takes time O (p N ) for N measurements, which becomes prohibitive when N is the length of the entire time series.
Reference: [20] <author> M. Harchol-Balter and A. Downey. </author> <title> Exploiting process lifetime distributions for dynamic load balancing. </title> <booktitle> In Proceedings of the 1996 ACM Sigmetrics Conference on Measurement and Modeling of Computer Systems, </booktitle> <year> 1996. </year>
Reference-contexts: Note that for K = 0, SW AV G uses the last measurement only as a predictor. That is, LAST (t) = SW AV G (t; 0) (7) Recent work by Harchol-Balter and Downey <ref> [20] </ref> indicates that this is a useful predictor for CPU resources, hence we include it as a separate method. The choice of K for SW AV G may be difficult to determine a priori for each resource, and in fact, may vary over time.
Reference: [21] <author> J. Hollingsworth, B. Miller, and J. Cargille. </author> <title> Dynamic program instrumentation for scalable performance tools. </title> <booktitle> In Proceedings of SHPCC 1994, </booktitle> <year> 1994. </year>
Reference-contexts: The need to limit the intrusiveness of the NWS influences both the implementation of the overall system and the forecasting techniques we have chosen. Since the problems of non-intrusive resource monitoring <ref> [26, 21, 9] </ref> and load forecasting [24, 3, 18, 23, 8] both pose open research questions, we have separated the sensory and forecasting functions of the NWS.
Reference: [22] <author> V. Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> In Proceedings of SIGCOMM '88, </booktitle> <volume> volume 18, </volume> <month> August </month> <year> 1988. </year>
Reference-contexts: Stochastic gradient or recursive prediction error estimators are powerful predictive techniques with recursive formulations [25]. For example, modern implementations of the TCP/IP protocol include a dynamic predictor of end-to end round-trip time based on stochastic gradient filter [28]. We follow the exposition of the technique provided in <ref> [22] </ref> which includes a description of a very efficient implementation for the Unix kernel. We define GRAD (t; g) = (1 g) fl GRAD (t 1; g) + g fl value (t) (10) for a gain (0 &lt; g &lt; 1).
Reference: [23] <author> S. Keshav. </author> <title> A control-theoretic approach to flow control. </title> <booktitle> In Proceedings of SIGCOMM '91, </booktitle> <volume> volume 24, </volume> <month> August </month> <year> 1991. </year>
Reference-contexts: The need to limit the intrusiveness of the NWS influences both the implementation of the overall system and the forecasting techniques we have chosen. Since the problems of non-intrusive resource monitoring [26, 21, 9] and load forecasting <ref> [24, 3, 18, 23, 8] </ref> both pose open research questions, we have separated the sensory and forecasting functions of the NWS. The resulting modular design is intended to provide a general facility in which a variety of different monitoring and forecasting techniques can be employed easily.
Reference: [24] <author> W. e. a. Leland. </author> <title> On the self-similar nature of ethernet traffic. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <month> February </month> <year> 1994. </year>
Reference-contexts: The need to limit the intrusiveness of the NWS influences both the implementation of the overall system and the forecasting techniques we have chosen. Since the problems of non-intrusive resource monitoring [26, 21, 9] and load forecasting <ref> [24, 3, 18, 23, 8] </ref> both pose open research questions, we have separated the sensory and forecasting functions of the NWS. The resulting modular design is intended to provide a general facility in which a variety of different monitoring and forecasting techniques can be employed easily. <p> Our work with the NWS is very much in its formative stages. We plan to investigate how the system can incorporate modeling techniques which require a computationally-intensive fitting phase. The ARIMA models described in [3], the self-similarity analysis outlined in <ref> [24] </ref>, and the semi-nonparametric techniques discussed in [13, 14], all provide immediately promising avenues of investigation. We would like to discern the relationship between the computational complexity devoted to making a forecast its accuracy.
Reference: [25] <author> L. Ljung and T. Soderstrom. </author> <title> Theory and Practice of Recursive Identification. </title> <publisher> MIT Press, </publisher> <year> 1983. </year>
Reference-contexts: In the experiments presented in the next section, we set 5 &lt;= K &lt;= 50. Stochastic gradient or recursive prediction error estimators are powerful predictive techniques with recursive formulations <ref> [25] </ref>. For example, modern implementations of the TCP/IP protocol include a dynamic predictor of end-to end round-trip time based on stochastic gradient filter [28]. We follow the exposition of the technique provided in [22] which includes a description of a very efficient implementation for the Unix kernel.
Reference: [26] <author> A. Malony, D. Reed, and H. Wijshoff. </author> <title> Performance Measurement Intrusion and Perturbation Analysis. </title> <journal> IEEE-TPDS, </journal> <volume> 3(4) </volume> <pages> 433-450, </pages> <month> July </month> <year> 1992. </year> <note> Available as Tech. Report CSRD-923, </note> <institution> University of Illinois, Center for Supercomputing Research and Development. </institution> <note> Reprinted in IEEE CS Press Tutorial, Monitoring and Debugging Distributed and/or Real-Time Systems, </note> <author> Jeffrey Tsai and S. </author> <booktitle> Yang (Eds.), </booktitle> <pages> pp. 77-94, </pages> <year> 1995. </year>
Reference-contexts: The need to limit the intrusiveness of the NWS influences both the implementation of the overall system and the forecasting techniques we have chosen. Since the problems of non-intrusive resource monitoring <ref> [26, 21, 9] </ref> and load forecasting [24, 3, 18, 23, 8] both pose open research questions, we have separated the sensory and forecasting functions of the NWS.
Reference: [27] <author> Netperf. </author> <note> http://www.cup.hp.com/netperf/netperfpage.html. </note>
Reference-contexts: Netperf proved to be a robust and powerful substrate for our purposes, and we encourage those interested to visit the netperf World Wide Web site at <ref> [27] </ref> for further information. fer. Throughput is then calculated as the data size divided by the transfer time (Equation 1). throughput = data size=(data transfer time) (1) The resulting measure includes the overhead necessary to initiate a TCP/IP communication stream, which can be significant.
Reference: [28] <author> P. e. a. Postel. </author> <title> Transmission control protocol specification, 1981. ARPA Working Group Requests for Comment DDN Network Information Center, </title> <booktitle> SRI International, </booktitle> <address> Menlo Park, CA, RFC-793. </address>
Reference-contexts: Stochastic gradient or recursive prediction error estimators are powerful predictive techniques with recursive formulations [25]. For example, modern implementations of the TCP/IP protocol include a dynamic predictor of end-to end round-trip time based on stochastic gradient filter <ref> [28] </ref>. We follow the exposition of the technique provided in [22] which includes a description of a very efficient implementation for the Unix kernel.
Reference: [29] <author> T. Tannenbaum and M. Litzkow. </author> <title> The conder distributed processing system. </title> <journal> Dr. Dobbs Journal, </journal> <month> February </month> <year> 1995. </year>
Reference-contexts: We think of this functionality as being analogous to weather forecasting, and as such, term the service the Network Weather Service (NWS). We have developed the NWS for use by schedulers in a networked computational environment. Systems such as those outlined in <ref> [15, 30, 29, 10] </ref> can use NWS forecasts to parameterize their respective scheduling methods and thereby generate schedules that are sensitive to load variation. In [5, 4] we report on the efficacy this technique for parallel applications in production distributed computing environments.
Reference: [30] <author> J. Weissman and A. Grimshaw. </author> <title> A framework for partitioning parallel computations in heterogeneous env ironments. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 7(5), </volume> <month> August </month> <year> 1995. </year>
Reference-contexts: Recent work shows that parallel applications can use non-dedicated metacomputers to achieve high-performance without gang-scheduling or other centralized scheduling fl Supported by NSF grant ASC-9308900 and Advanced Research Projects Agency/ITO, Distributed Object Computation Testbed, ARPA order No. D570, Issued by ESC/ENS under contract #F19628-96-C-0020. y email: rich@cs.ucsd.edu, http://www-cse.ucsd.edu/users/rich/ policies <ref> [5, 11, 15, 30] </ref>. To gain the desired levels of performance, however, the scheduling methods described in these works depend on predictions of the performance deliverable to the application from the available metacomputing resources. <p> We think of this functionality as being analogous to weather forecasting, and as such, term the service the Network Weather Service (NWS). We have developed the NWS for use by schedulers in a networked computational environment. Systems such as those outlined in <ref> [15, 30, 29, 10] </ref> can use NWS forecasts to parameterize their respective scheduling methods and thereby generate schedules that are sensitive to load variation. In [5, 4] we report on the efficacy this technique for parallel applications in production distributed computing environments.
Reference: [31] <author> R. Wolski. </author> <title> Dynamically forecasting network performance using the network weather service. </title> <type> Technical Report TR-CS96-494, </type> <institution> U.C. </institution> <address> San Diego, </address> <month> October </month> <year> 1996. </year> <note> available from http://www.cs.ucsd.edu/users/rich/publications.html. 10 </note>
Reference-contexts: Summary and Analysis of Network Forecasting Performance A more detailed description and analysis of the forecasting performance can be found in <ref> [31] </ref>. Tables 3 and 4 summarize the performance of the best predictors for each setting. Notice that GRAD is the overall best predictor of throughput if mean square error is used as an accuracy measure.
References-found: 31

