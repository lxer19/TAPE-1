URL: http://www.cs.cornell.edu/Info/People/jackson/papers/abalg.ps.gz
Refering-URL: http://www.cs.cornell.edu/Info/People/jackson/jackson.html
Root-URL: 
Email: E-mail: jackson@cs.cornell.edu  
Title: Exploring Abstract Algebra in Constructive Type Theory  
Author: Paul Jackson 
Date: January 20, 1995  
Address: Ithaca NY 14853 USA  
Affiliation: Department of Computer Science Cornell University  
Abstract: I describe my implementation of computational abstract algebra in the Nuprl system. I focus on my development of multivariate polynomials. I show how I use Nuprl's expressive type theory to define classes of free abelian monoids and free monoid algebras. These classes are combined to create a class of all implementations of polynomials. I discuss the issues of subtyping and computational content that came up in designing the class definitions. I give examples of relevant theory developments, tactics and proofs. I consider how Nuprl could act as an algebraic `oracle' for a computer algebra system and the relevance of this work for abstract functional programming.
Abstract-found: 1
Intro-found: 1
Reference: [AL90] <author> Mark Aagaard and Miriam Leeser. </author> <title> The implementation and proof of a boolean simplification system. </title> <type> Technical Report EE-CEG-90-2, </type> <institution> Cornell School of Electrical Engineering, </institution> <month> March </month> <year> 1990. </year> <booktitle> In theOxford Workshop on Designing Correct Circuits, </booktitle> <month> September, </month> <year> 1990. </year>
Reference-contexts: It has a well developed user interface and a large collection of tactics for such tasks as forward and backward chaining, rewriting and arithmetic reasoning. Libraries have been built up in number theory [How87], analysis [CH92], hardware verification [BV90], hardware synthesis <ref> [AL90] </ref> and meta-reasoning [How88].
Reference: [Bai93] <author> Anthony Bailey. </author> <title> Representing algebra in LEGO. </title> <type> Master's thesis, </type> <institution> University of Edinburgh, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: The IMPS people have a notion of little theories [FGT92] which they use for proving theorems about groups and rings. Anthony Bailey has developed a concrete theory of polynomials in one variable in the LEGO system and has proven the correctness of Euclid's algorithm over these polynomials <ref> [Bai93] </ref>. The Mizar project seems to have done a fair amount in algebra, but hasn't yet tackled polynomials. Clarke and Xudong have been adding theorem proving capabilities to Mathe-matica to create their Analytica system [CZ92].
Reference: [BC93] <author> David A. Basin and Robert L. Constable. </author> <title> Metalogical frameworks. </title> <editor> In Gerard Huet and Gordon Plotkin, editors, </editor> <booktitle> Logical Environments. </booktitle> <publisher> Cam-bridge University Press, </publisher> <year> 1993. </year> <month> 13 </month>
Reference-contexts: Type theory can provide an effective framework for formally reasoning about ADT's. Type theory is particularly convenient in that both ADT specifications and implementations are described in a single language <ref> [MP85, BC93] </ref>.
Reference: [Bou74] <author> Nicolas Bourbaki. </author> <title> Algebra, Part I. Elements of Mathematics. </title> <publisher> Addison--Wesley, </publisher> <year> 1974. </year>
Reference-contexts: At the same time, I craft the definition such that a wide variety of useful computable functions could be constructed from an arbitrary inhabitant of the class. My approach is based on the standard abstract approach found in textbooks such as Lang [Lan84] or Bourbaki <ref> [Bou74] </ref>: 1. Monomials in S are elements of a free abelian monoid over S. 2. Polynomials over S with coefficients from A are elements of a free monoid algebra over the monoid of monomials and the ring A.
Reference: [BV90] <author> David A. Basin and Peter Del Vecchio. </author> <title> Verification of combinational logic in Nuprl. </title> <editor> In M. E. Leeser and G. M. Brown, editors, </editor> <title> Hardware Specification, Verification, and Synthesis: </title> <journal> Mathematical Aspects, </journal> <pages> pages 333-357. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year> <note> LNCS 408. </note>
Reference-contexts: It has a well developed user interface and a large collection of tactics for such tasks as forward and backward chaining, rewriting and arithmetic reasoning. Libraries have been built up in number theory [How87], analysis [CH92], hardware verification <ref> [BV90] </ref>, hardware synthesis [AL90] and meta-reasoning [How88].
Reference: [C + 86] <author> Robert Constable et al. </author> <title> Implementing Mathematics with The Nuprl Development System. </title> <publisher> Prentice-Hall, </publisher> <address> NJ, </address> <year> 1986. </year>
Reference-contexts: For example, most computer algebra systems are interested in algebraic structures with decidable equality relations, so I am reasoning primarily with structures with boolean-valued equality functions. 1.2 Background Nuprl <ref> [C + 86, Jac92] </ref> is an interactive tactic-based theorem prover in the LCF tradition. It uses a constructive type theory similar to that of Martin-Lof [ML82]. The type theory is briefly reviewed in Section 2. Nuprl has been developed in the last 10 years by over a dozen people.
Reference: [CH92] <author> Jawahar Chirimar and Douglas J. Howe. </author> <title> Implementing constructive real analysis: Preliminary report. </title> <booktitle> In Constructivity in Computer Science, volume 613 of Lecture Notes in Computer Science, </booktitle> <pages> pages 165-178. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Nuprl has been developed in the last 10 years by over a dozen people. It has a well developed user interface and a large collection of tactics for such tasks as forward and backward chaining, rewriting and arithmetic reasoning. Libraries have been built up in number theory [How87], analysis <ref> [CH92] </ref>, hardware verification [BV90], hardware synthesis [AL90] and meta-reasoning [How88].
Reference: [CZ92] <author> Edmund Clarke and Xudong Zhao. </author> <title> Analytica a theorem prover in math-ematica. </title> <editor> In D. Kapur, editor, </editor> <booktitle> 11th Conference on Automated Deduction, volume 607 of Lecture Notes in Artifical Intelligence, </booktitle> <pages> pages 761-765. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: I want to explore possibilities for symbiotic interactions between computer algebra systems and theorem provers, and speculate on how in the long term they might be integrated. Already promising work has been done in the area <ref> [CZ92, HT93] </ref>. Here at Cornell I am currently investigating links between Nuprl and the Weyl system [Zip93]. In particular I am exploring the use of Nuprl as an algebraic oracle to Weyl. Nuprl's type theory provides a certain range of options for making explicit various computational aspects of algebra. <p> The Mizar project seems to have done a fair amount in algebra, but hasn't yet tackled polynomials. Clarke and Xudong have been adding theorem proving capabilities to Mathe-matica to create their Analytica system <ref> [CZ92] </ref>. They have impressive results in proving equivalences of sums of series, but their work has been hindered by the lack of rigor inherent in the Mathematica environment.
Reference: [FGT92] <author> William M. Farmer, Joshua D. Guttman, and F. Javier Thayer. </author> <title> Little theories. </title> <editor> In D. Kapur, editor, </editor> <booktitle> 11th Conference on Automated Deduction, volume 607 of Lecture Notes in Artifical Intelligence, </booktitle> <pages> pages 567-581. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Harrison and Thery [HT93] have looked at the interaction between HOL and Maple, where Maple performs algebraic manipulations and integrations that HOL then 2 verifies. The IMPS people have a notion of little theories <ref> [FGT92] </ref> which they use for proving theorems about groups and rings. Anthony Bailey has developed a concrete theory of polynomials in one variable in the LEGO system and has proven the correctness of Euclid's algorithm over these polynomials [Bai93].
Reference: [GH93] <author> John V. Guttag and James J. Horning. </author> <title> Larch: Languages and Tools for Formal Specification. Texts and Monographs in Computer Science. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Clarke and Xudong have been adding theorem proving capabilities to Mathe-matica to create their Analytica system [CZ92]. They have impressive results in proving equivalences of sums of series, but their work has been hindered by the lack of rigor inherent in the Mathematica environment. The Larch <ref> [GH93] </ref> group has worked on program specification and verification using ADT's in a first-order-logic setting. 2 Type Theory Preliminaries I give here an informal overview of the types in Nuprl's type theory I have been working with: * The booleans B and the integers Z. * A dependent-function () type constructor
Reference: [Gun89] <author> Elsa L. Gunter. </author> <title> Doing algebra in simple type theory. </title> <type> Technical Report MS-CIS-89-38, </type> <institution> Department of computer and Information Science, University of Pennsylvania, </institution> <year> 1989. </year>
Reference-contexts: Section 4 gives some practical details on my work to date and Section 5 describes applications of the work that we are actively pursuing. Finally, Section 6 summarizes my accomplishments. 1.4 Related Work I know of several other efforts to develop abstract algebra in a theorem proving environment. Gunter <ref> [Gun89] </ref> working with HOL has proven group isomorphism theorems and shown the integers mod n to be an implementation of abstract groups. Harrison and Thery [HT93] have looked at the interaction between HOL and Maple, where Maple performs algebraic manipulations and integrations that HOL then 2 verifies.
Reference: [How87] <author> Douglas J. Howe. </author> <title> Implementing number theory: An experiment with Nuprl. </title> <booktitle> In Eighth Conference on Automated Deduction, volume 230 of Lecture Notes in Computer Science, </booktitle> <pages> pages 404-415. </pages> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1987. </year>
Reference-contexts: Nuprl has been developed in the last 10 years by over a dozen people. It has a well developed user interface and a large collection of tactics for such tasks as forward and backward chaining, rewriting and arithmetic reasoning. Libraries have been built up in number theory <ref> [How87] </ref>, analysis [CH92], hardware verification [BV90], hardware synthesis [AL90] and meta-reasoning [How88].
Reference: [How88] <author> D. Howe. </author> <title> Automating Reasoning in an Implementation of Constructive Type Theory. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <address> Ithaca, NY, </address> <month> April </month> <year> 1988. </year>
Reference-contexts: It has a well developed user interface and a large collection of tactics for such tasks as forward and backward chaining, rewriting and arithmetic reasoning. Libraries have been built up in number theory [How87], analysis [CH92], hardware verification [BV90], hardware synthesis [AL90] and meta-reasoning <ref> [How88] </ref>. Many of the tactics and theory developments mentioned in this paper are covered in greater detail in my thesis [Jac94]. 1.3 Organization of this Paper To illustrate my work, I have chosen to show a sequence of definitions leading up to the class of multivariate polynomial algebras.
Reference: [HT93] <author> John Harrison and Laurent Thery. </author> <title> Extending the HOL theorem prover with a computer algebra system to reason about the reals. </title> <booktitle> In Proceedings of the HOL '93 Workshop on Higher Order Logic Theorem Proving and its Applications, </booktitle> <year> 1993. </year>
Reference-contexts: I want to explore possibilities for symbiotic interactions between computer algebra systems and theorem provers, and speculate on how in the long term they might be integrated. Already promising work has been done in the area <ref> [CZ92, HT93] </ref>. Here at Cornell I am currently investigating links between Nuprl and the Weyl system [Zip93]. In particular I am exploring the use of Nuprl as an algebraic oracle to Weyl. Nuprl's type theory provides a certain range of options for making explicit various computational aspects of algebra. <p> Gunter [Gun89] working with HOL has proven group isomorphism theorems and shown the integers mod n to be an implementation of abstract groups. Harrison and Thery <ref> [HT93] </ref> have looked at the interaction between HOL and Maple, where Maple performs algebraic manipulations and integrations that HOL then 2 verifies. The IMPS people have a notion of little theories [FGT92] which they use for proving theorems about groups and rings.
Reference: [Jac92] <author> Paul B. Jackson. </author> <title> Nuprl and its use in circuit design. In R.T. </title> <editor> Boute V. Stavridou, T.F.Melham, editor, </editor> <booktitle> Proceedings of the 1992 International Conference on Theorem Provers in Circuit Design, IFIP Transactions A-10. </booktitle> <publisher> North-Holland, </publisher> <year> 1992. </year> <month> 14 </month>
Reference-contexts: For example, most computer algebra systems are interested in algebraic structures with decidable equality relations, so I am reasoning primarily with structures with boolean-valued equality functions. 1.2 Background Nuprl <ref> [C + 86, Jac92] </ref> is an interactive tactic-based theorem prover in the LCF tradition. It uses a constructive type theory similar to that of Martin-Lof [ML82]. The type theory is briefly reviewed in Section 2. Nuprl has been developed in the last 10 years by over a dozen people.
Reference: [Jac94] <author> Paul B. Jackson. </author> <title> Enhancing the Nuprl Theorem Prover and Applying it to Constructive Algebra. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <year> 1994. </year> <month> Forthcoming. </month>
Reference-contexts: Libraries have been built up in number theory [How87], analysis [CH92], hardware verification [BV90], hardware synthesis [AL90] and meta-reasoning [How88]. Many of the tactics and theory developments mentioned in this paper are covered in greater detail in my thesis <ref> [Jac94] </ref>. 1.3 Organization of this Paper To illustrate my work, I have chosen to show a sequence of definitions leading up to the class of multivariate polynomial algebras.
Reference: [JS92] <author> Richard D. Jenks and Robert S. Sutor. </author> <title> AXIOM: the Scientific Computation System. </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: An example of the built-in support is that elements of function types always respect these equality relations. This design decision seems in accord with current practice in constructive algebra [MRR88] and in the computer algebra system Axiom <ref> [JS92] </ref> where much attention has been paid to constructivity. 4 Practical Work 4.1 Theory Development All the class definitions described in Section 3 have been entered into the Nuprl system, but as yet I haven't proved much using them.
Reference: [Lan84] <author> Serge Lang. </author> <title> Algebra. </title> <publisher> Addison-Wesley, </publisher> <address> 2nd edition, </address> <year> 1984. </year>
Reference-contexts: At the same time, I craft the definition such that a wide variety of useful computable functions could be constructed from an arbitrary inhabitant of the class. My approach is based on the standard abstract approach found in textbooks such as Lang <ref> [Lan84] </ref> or Bourbaki [Bou74]: 1. Monomials in S are elements of a free abelian monoid over S. 2. Polynomials over S with coefficients from A are elements of a free monoid algebra over the monoid of monomials and the ring A.
Reference: [ML82] <author> Per Martin-Lof. </author> <title> Constructive mathematics and computer programming. </title> <booktitle> In Sixth International Congress for Logic, Methodology, and Philosophy of Science, </booktitle> <pages> pages 153-175, </pages> <address> Amsterdam, 1982. </address> <publisher> North Holland. </publisher>
Reference-contexts: It uses a constructive type theory similar to that of Martin-Lof <ref> [ML82] </ref>. The type theory is briefly reviewed in Section 2. Nuprl has been developed in the last 10 years by over a dozen people. It has a well developed user interface and a large collection of tactics for such tasks as forward and backward chaining, rewriting and arithmetic reasoning.
Reference: [MP85] <author> John C. Mitchell and Gordon Plotkin. </author> <title> Abstract types have existential type. </title> <booktitle> In Conference Record of the Twelfth Annual ACM Symposium on Principles of Programming Languages. Association for Computing Machinery, SIGACT, SIGPLAN, </booktitle> <year> 1985. </year>
Reference-contexts: Type theory can provide an effective framework for formally reasoning about ADT's. Type theory is particularly convenient in that both ADT specifications and implementations are described in a single language <ref> [MP85, BC93] </ref>.
Reference: [MRR88] <author> Ray Mines, Fred Richman, and Wim Ruitenburg. </author> <title> A Course in constructive Algebra. </title> <publisher> Universitext. Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: An example of the built-in support is that elements of function types always respect these equality relations. This design decision seems in accord with current practice in constructive algebra <ref> [MRR88] </ref> and in the computer algebra system Axiom [JS92] where much attention has been paid to constructivity. 4 Practical Work 4.1 Theory Development All the class definitions described in Section 3 have been entered into the Nuprl system, but as yet I haven't proved much using them.
Reference: [Wir90] <author> Martin Wirsing. </author> <title> Algebraic specification. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Models and Semantics, chapter 13. </booktitle> <publisher> Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: When specifying an inhabitant of the abelian-monoid class I then have to supply a dummy inverse function. There are numerous proposals <ref> [Wir90] </ref> for forms of dependent record types that support forgetful subtyping. I am very interested in trying to adapt one of them to Nuprl's type theory. Many algebraic definitions have computational content when considered constructively. The free class definitions in Section 3 have these universal projection functions. <p> Final classes should be no more difficult to construct. The importance of this is that in the ADT community there has been a debate going on about the relative merits of loose, initial and final algebraic specifications <ref> [Wir90] </ref>. In Nuprl, all three paradigms can be explored. 6 Conclusions I have presented here some of the first steps I have taken in implementing abstract algebra in an interactive theorem proving setting.
Reference: [Zip93] <author> Richard Zippel. </author> <title> The Weyl computer algebra substrate. </title> <editor> In Alfonso Mi-ola, editor, </editor> <booktitle> Design and Implementation of Symbolic Computation Systems, volume 722 of Lecture Notes in Computer Science, </booktitle> <pages> pages 303-318. </pages> <publisher> Springer Verlag, </publisher> <year> 1993. </year> <month> 15 </month>
Reference-contexts: Already promising work has been done in the area [CZ92, HT93]. Here at Cornell I am currently investigating links between Nuprl and the Weyl system <ref> [Zip93] </ref>. In particular I am exploring the use of Nuprl as an algebraic oracle to Weyl. Nuprl's type theory provides a certain range of options for making explicit various computational aspects of algebra. <p> The other branch of the proof, fl6 , was proven with tactics identical to those at fl4 and fl5 . 5 Applications 5.1 Interaction with Computer Algebra Systems I am exploring ways in which Nuprl could usefully interact with the Weyl computer algebra system being developed here at Cornell <ref> [Zip93] </ref>. One scenario is for Nuprl to behave as an algebraic oracle for the computer algebra system. In the course of calculations, Weyl creates new instances of algebraic structures and sometimes would like to decide which algorithm to use based on properties of these structures.
References-found: 23

